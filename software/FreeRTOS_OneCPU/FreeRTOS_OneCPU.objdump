
FreeRTOS_OneCPU.elf:     file format elf32-littlenios2
FreeRTOS_OneCPU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010003a0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00026a08 memsz 0x00026a08 flags r-x
    LOAD off    0x00027a28 vaddr 0x01026a28 paddr 0x01028608 align 2**12
         filesz 0x00001be0 memsz 0x00001be0 flags rw-
    LOAD off    0x0002a1e8 vaddr 0x0102a1e8 paddr 0x0102a1e8 align 2**12
         filesz 0x00000000 memsz 0x00800520 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000380  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024e7c  010003a0  010003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000180c  0102521c  0102521c  0002621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be0  01026a28  01028608  00027a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          008005a6  0102a1e8  0102a1e8  0002a1e8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0182a708  0182a708  00029608  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00029608  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001658  00000000  00000000  00029630  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003be14  00000000  00000000  0002ac88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e04d  00000000  00000000  00066a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013a07  00000000  00000000  00074ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006e80  00000000  00000000  000884f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00007f02  00000000  00000000  0008f370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a681  00000000  00000000  00097272  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000b18f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ae0  00000000  00000000  000b1958  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000bb25e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000bb261  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000bb26b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000bb26c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000bb26d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000bb278  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000bb283  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000bb28e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  000bb29a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000494a  00000000  00000000  000bb2b6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027948b  00000000  00000000  000bfc00  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010003a0 l    d  .text	00000000 .text
0102521c l    d  .rodata	00000000 .rodata
01026a28 l    d  .rwdata	00000000 .rwdata
0102a1e8 l    d  .bss	00000000 .bss
0182a708 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_OneCPU_bsp//obj/HAL/src/crt0.o
010003e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/Source/portable/GCC/NiosII/port_asm.o
01000020 l       .exceptions	00000000 save_context
0100009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
01000100 l       .exceptions	00000000 hw_irq_test
010001c4 l       .exceptions	00000000 soft_exceptions
01000124 l       .exceptions	00000000 hw_irq_handler
0100013c l       .exceptions	00000000 restore_context
010001e0 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 event_groups.c
01000a7c l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
01000d7c l     F .text	0000002c prvReadGp
01000ee0 l     F .text	00000088 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0102a278 l     O .bss	00800000 ucHeap
01028598 l     O .rwdata	00000002 heapSTRUCT_SIZE
0102a1e8 l     O .bss	00000008 xStart
0102a1f0 l     O .bss	00000008 xEnd
0102859c l     O .rwdata	00000004 xFreeBytesRemaining
0102a1f8 l     O .bss	00000004 xHeapHasBeenInitialised.2596
01001290 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
010014c0 l     F .text	00000084 prvInitialiseNewQueue
01001544 l     F .text	00000060 prvInitialiseMutex
0100231c l     F .text	0000018c prvCopyDataToQueue
010026d0 l     F .text	00000058 prvIsQueueFull
01002544 l     F .text	000000f4 prvUnlockQueue
010024a8 l     F .text	0000009c prvCopyDataFromQueue
01002638 l     F .text	00000050 prvIsQueueEmpty
010022cc l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 stream_buffer.c
0100359c l     F .text	00000080 prvInitialiseNewStreamBuffer
01003528 l     F .text	00000074 prvBytesInBuffer
01002cd0 l     F .text	000000d4 prvWriteMessageToBuffer
01003320 l     F .text	000000f4 prvWriteBytesToBuffer
01003088 l     F .text	000000bc prvReadMessageFromBuffer
01003414 l     F .text	00000114 prvReadBytesFromBuffer
00000000 l    df *ABS*	00000000 tasks.c
0182a278 l     O .bss	00000064 pxReadyTasksLists
0182a2dc l     O .bss	00000014 xDelayedTaskList1
0182a2f0 l     O .bss	00000014 xDelayedTaskList2
0102a200 l     O .bss	00000004 pxDelayedTaskList
0102a204 l     O .bss	00000004 pxOverflowDelayedTaskList
0182a304 l     O .bss	00000014 xPendingReadyList
0182a318 l     O .bss	00000014 xTasksWaitingTermination
0102a208 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0182a32c l     O .bss	00000014 xSuspendedTaskList
0102a20c l     O .bss	00000004 uxCurrentNumberOfTasks
0102a210 l     O .bss	00000004 xTickCount
0102a214 l     O .bss	00000004 uxTopReadyPriority
0102a218 l     O .bss	00000004 xSchedulerRunning
0102a21c l     O .bss	00000004 uxPendedTicks
0102a220 l     O .bss	00000004 xYieldPending
0102a224 l     O .bss	00000004 xNumOfOverflows
0102a228 l     O .bss	00000004 uxTaskNumber
0102a22c l     O .bss	00000004 xNextTaskUnblockTime
0102a230 l     O .bss	00000004 xIdleTaskHandle
0102a234 l     O .bss	00000004 uxSchedulerSuspended
01003704 l     F .text	000001e4 prvInitialiseNewTask
010038e8 l     F .text	000000fc prvAddNewTaskToReadyList
01004c38 l     F .text	000000b8 prvInitialiseTaskLists
01004e34 l     F .text	00000044 prvDeleteTCB
01004e78 l     F .text	00000054 prvResetNextTaskUnblockTime
01005a6c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0100406c l     F .text	0000006c prvTaskIsTaskSuspended
01004c1c l     F .text	0000001c prvIdleTask
01004cf0 l     F .text	00000080 prvCheckTasksWaitingTermination
01004d70 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 metal-test.c
01005b88 l     F .text	00000064 metal_list_add_before
01005bec l     F .text	0000003c metal_list_add_tail
010285a0 l     O .rwdata	00000008 test_cases
00000000 l    df *ABS*	00000000 device.c
01005e84 l     F .text	00000040 metal_list_init
01005ec4 l     F .text	00000064 metal_list_add_before
01005f28 l     F .text	0000003c metal_list_add_tail
01005f64 l     F .text	00000068 metal_list_del
01005fcc l     F .text	0000003c __metal_cache_flush
01006008 l     F .text	0000003c __metal_cache_invalidate
01006044 l     F .text	0000003c metal_cache_flush
01006080 l     F .text	0000003c metal_cache_invalidate
01025300 l     O .rodata	00000013 __func__.2760
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 alloc.c
01006880 l     F .text	00000030 metal_allocate_memory
010068b0 l     F .text	00000034 metal_free_memory
010285a8 l     O .rwdata	00000004 test_count
010068e4 l     F .text	000000b8 alloc_thread
0100699c l     F .text	00000048 alloc
010069e4 l     F .text	00000034 metal_test_alloc
01026a54 l     O .rwdata	00000010 metal_test_alloc.2863
00000000 l    df *ABS*	00000000 atomic.c
010285ac l     O .rwdata	00000004 atomic_test_count
01006a18 l     F .text	00000060 atomic_thread
01006a78 l     F .text	000000d0 atomic
01006b48 l     F .text	00000034 metal_test_atomic
01026a64 l     O .rwdata	00000010 metal_test_atomic.2316
00000000 l    df *ABS*	00000000 condition.c
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 io.c
00000000 l    df *ABS*	00000000 irq.c
01006d80 l     F .text	0000003c metal_irq_unregister
01006dbc l     F .text	00000028 irq_handler
01006de4 l     F .text	00000174 irq
01006f58 l     F .text	00000034 metal_test_irq
01026a74 l     O .rwdata	00000010 metal_test_irq.2402
00000000 l    df *ABS*	00000000 mutex.c
01006f8c l     F .text	00000030 __metal_mutex_init
01006fbc l     F .text	00000024 __metal_mutex_deinit
01006fe0 l     F .text	00000040 __metal_mutex_acquire
01007020 l     F .text	00000030 __metal_mutex_release
01007050 l     F .text	00000034 metal_mutex_init
01007084 l     F .text	00000034 metal_mutex_deinit
010070b8 l     F .text	00000034 metal_mutex_acquire
010070ec l     F .text	00000034 metal_mutex_release
010285b0 l     O .rwdata	00000004 mutex_test_count
01007120 l     F .text	0000006c mutex_thread
0100718c l     F .text	00000064 mutex
010071f0 l     F .text	00000034 metal_test_mutex
01026a84 l     O .rwdata	00000010 metal_test_mutex.2608
00000000 l    df *ABS*	00000000 sys.c
00000000 l    df *ABS*	00000000 shmem.c
00000000 l    df *ABS*	00000000 sleep.c
010072e4 l     F .text	0000003c __metal_sleep_usec
01007320 l     F .text	00000030 metal_sleep_usec
01007350 l     F .text	000000c0 sleep
01007410 l     F .text	00000034 metal_test_sleep
01026a94 l     O .rwdata	00000010 metal_test_sleep.2855
00000000 l    df *ABS*	00000000 threads.c
01007444 l     F .text	0000005c thread_wrapper
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 init.c
010078e4 l     F .text	00000040 metal_list_init
00000000 l    df *ABS*	00000000 io.c
01007a10 l     F .text	0000005c metal_io_virt
00000000 l    df *ABS*	00000000 irq.c
010080fc l     F .text	00000064 metal_list_add_before
01008160 l     F .text	0000003c metal_list_add_tail
010285b4 l     O .rwdata	00000008 irq_cntrs
0100819c l     F .text	000000f4 metal_irq_allocate
0100835c l     F .text	00000094 metal_irq_get_controller
010083f0 l     F .text	00000060 _metal_irq_set_enable
00000000 l    df *ABS*	00000000 log.c
00000000 l    df *ABS*	00000000 shmem.c
0100867c l     F .text	00000064 metal_list_add_before
010086e0 l     F .text	0000003c metal_list_add_tail
0100871c l     F .text	00000028 metal_io_region_size
0102549c l     O .rodata	0000001d __func__.2650
00000000 l    df *ABS*	00000000 softirq.c
010088c4 l     F .text	00000064 metal_irq_handle
0102a238 l     O .bss	00000004 metal_softirq_avail
010285bc l     O .rwdata	00000004 metal_softirq_num
0182a340 l     O .bss	00000200 metal_softirqs
0182a540 l     O .bss	00000040 metal_softirq_pending
0182a580 l     O .bss	00000040 metal_softirq_enabled
01008928 l     F .text	000000b4 metal_softirq_set_enable
01026aa4 l     O .rwdata	00000020 metal_softirq_cntr
00000000 l    df *ABS*	00000000 rpmsg_retarget.c
01008c88 l     F .text	00000030 __metal_mutex_init
01008cb8 l     F .text	00000024 __metal_mutex_deinit
01008cdc l     F .text	00000040 __metal_mutex_acquire
01008d1c l     F .text	00000030 __metal_mutex_release
01008d4c l     F .text	00000034 metal_mutex_init
01008d80 l     F .text	00000034 metal_mutex_deinit
01008db4 l     F .text	00000034 metal_mutex_acquire
01008de8 l     F .text	00000034 metal_mutex_release
01008e1c l     F .text	00000030 metal_spinlock_init
01008e4c l     F .text	00000040 metal_spinlock_acquire
01008e8c l     F .text	00000030 metal_spinlock_release
01008ebc l     F .text	0000007c rpmsg_send
01008f38 l     F .text	0000004c is_rpmsg_ept_ready
0102a23c l     O .bss	00000004 rpmsg_default_rpc
01008f84 l     F .text	000000f0 rpmsg_rpc_ept_cb
01009074 l     F .text	00000074 rpmsg_service_unbind
00000000 l    df *ABS*	00000000 elf_loader.c
010098a8 l     F .text	00000030 metal_allocate_memory
010098d8 l     F .text	00000034 metal_free_memory
0100990c l     F .text	0000004c elf_is_64
01009958 l     F .text	00000050 elf_ehdr_size
010099a8 l     F .text	0000005c elf_phoff
01009a04 l     F .text	00000060 elf_phentsize
01009a64 l     F .text	00000060 elf_phnum
01009ac4 l     F .text	0000005c elf_shoff
01009b20 l     F .text	00000060 elf_shentsize
01009b80 l     F .text	00000060 elf_shnum
01009be0 l     F .text	00000060 elf_shstrndx
01009c40 l     F .text	00000058 elf_phtable_ptr
01009c98 l     F .text	00000058 elf_shtable_ptr
01009cf0 l     F .text	00000058 elf_shstrtab_ptr
01009d48 l     F .text	00000058 elf_load_state
01009da0 l     F .text	000001a0 elf_parse_segment
01009f40 l     F .text	000000fc elf_get_segment_from_index
0100a03c l     F .text	00000180 elf_get_section_from_name
0100a1bc l     F .text	00000104 elf_get_section_from_index
0100a2c0 l     F .text	00000238 elf_parse_section
0100a4f8 l     F .text	000000d0 elf_next_load_segment
0100a5c8 l     F .text	00000040 elf_info_size
010256b0 l     O .rodata	00000010 __func__.3369
010256c0 l     O .rodata	00000009 __func__.3400
010256cc l     O .rodata	00000015 __func__.3426
00000000 l    df *ABS*	00000000 remoteproc.c
0100b4c0 l     F .text	00000030 metal_allocate_memory
0100b4f0 l     F .text	00000034 metal_free_memory
0100b524 l     F .text	00000074 metal_bitmap_set_bit
0100b598 l     F .text	0000005c metal_bitmap_is_bit_set
0100b5f4 l     F .text	00000040 metal_bitmap_is_bit_clear
0100b634 l     F .text	0000006c metal_bitmap_next_clear_bit
0100b6a0 l     F .text	00000040 metal_list_init
0100b6e0 l     F .text	00000064 metal_list_add_before
0100b744 l     F .text	0000003c metal_list_add_tail
0100b780 l     F .text	00000068 metal_list_del
0100b7e8 l     F .text	0000005c metal_io_virt
0100b844 l     F .text	00000054 metal_io_virt_to_offset
0100b898 l     F .text	000000d0 metal_io_phys
0100b968 l     F .text	000000d8 metal_io_phys_to_offset
0100ba40 l     F .text	00000044 metal_io_phys_to_virt
0100ba84 l     F .text	00000030 __metal_mutex_init
0100bab4 l     F .text	00000040 __metal_mutex_acquire
0100baf4 l     F .text	00000030 __metal_mutex_release
0100bb24 l     F .text	00000034 metal_mutex_init
0100bb58 l     F .text	00000034 metal_mutex_acquire
0100bb8c l     F .text	00000034 metal_mutex_release
0100bbc0 l     F .text	00000024 RPROC_ERR_PTR
0100bbe4 l     F .text	00000088 vring_size
0100bc6c l     F .text	0000005c remoteproc_check_fw_format
0100bcc8 l     F .text	00000178 remoteproc_get_mem
0100be40 l     F .text	00000048 remoteproc_datopa
0100be88 l     F .text	00000048 remoteproc_patoda
0100bed0 l     F .text	0000015c remoteproc_get_rsc_table
0100c02c l     F .text	00000054 remoteproc_parse_rsc_table
01025c60 l     O .rodata	00000010 __func__.3649
01025c70 l     O .rodata	00000018 __func__.3685
0100e100 l     F .text	0000004c remoteproc_virtio_notify
01025c88 l     O .rodata	00000019 __func__.3718
01025ca4 l     O .rodata	00000019 __func__.3739
00000000 l    df *ABS*	00000000 remoteproc_virtio.c
0100e5f0 l     F .text	0000005c metal_io_virt
0100e64c l     F .text	00000054 metal_io_virt_to_offset
0100e6a0 l     F .text	00000198 metal_io_read
01025d88 l     O .rodata	0000000e __func__.2565
0100e838 l     F .text	0000017c metal_io_write
01025d98 l     O .rodata	0000000f __func__.2574
0100e9b4 l     F .text	00000030 metal_allocate_memory
0100e9e4 l     F .text	00000034 metal_free_memory
0100ea18 l     F .text	00000060 virtqueue_allocate
0100ea78 l     F .text	000000bc rproc_virtio_virtqueue_notify
01025d68 l     O .rodata	0000001e __func__.3282
0100eb34 l     F .text	00000084 rproc_virtio_get_status
0100ebb8 l     F .text	000000d4 rproc_virtio_set_status
0100ec8c l     F .text	00000084 rproc_virtio_get_dfeatures
0100ed10 l     F .text	00000098 rproc_virtio_get_features
0100eda8 l     F .text	000000cc rproc_virtio_set_features
0100ee74 l     F .text	00000054 rproc_virtio_negotiate_features
0100eec8 l     F .text	00000030 rproc_virtio_read_config
0100eef8 l     F .text	00000030 rproc_virtio_write_config
0100ef28 l     F .text	00000044 rproc_virtio_reset_device
01025d44 l     O .rodata	00000024 remoteproc_virtio_dispatch_funcs
00000000 l    df *ABS*	00000000 rsc_table_parser.c
0100f454 l     F .text	00000054 metal_io_virt_to_offset
01025da8 l     O .rodata	00000010 rsc_handler_table
0100fc50 l     F .text	00000028 handle_dummy_rsc
01025dec l     O .rodata	00000009 __func__.2936
00000000 l    df *ABS*	00000000 rpmsg.c
0100fdf4 l     F .text	00000040 __metal_mutex_acquire
0100fe34 l     F .text	00000030 __metal_mutex_release
0100fe64 l     F .text	00000034 metal_mutex_acquire
0100fe98 l     F .text	00000034 metal_mutex_release
0100fecc l     F .text	00000064 metal_list_add_before
0100ff30 l     F .text	0000003c metal_list_add_tail
0100ff6c l     F .text	00000068 metal_list_del
0100ffd4 l     F .text	00000074 metal_bitmap_set_bit
01010048 l     F .text	0000005c metal_bitmap_is_bit_set
010100a4 l     F .text	00000078 metal_bitmap_clear_bit
0101011c l     F .text	00000040 metal_bitmap_is_bit_clear
0101015c l     F .text	0000006c metal_bitmap_next_clear_bit
010101c8 l     F .text	00000094 rpmsg_init_ept
0101025c l     F .text	00000074 rpmsg_get_address
010102d0 l     F .text	0000004c rpmsg_release_address
0101031c l     F .text	00000050 rpmsg_is_address_set
0101036c l     F .text	00000054 rpmsg_set_address
01010650 l     F .text	00000084 rpmsg_unregister_endpoint
00000000 l    df *ABS*	00000000 rpmsg_virtio.c
01010960 l     F .text	0000003c __metal_sleep_usec
0101099c l     F .text	00000030 metal_sleep_usec
010109cc l     F .text	00000040 metal_list_init
01010a0c l     F .text	00000034 metal_list_is_empty
01010a40 l     F .text	00000054 metal_io_virt_to_offset
01010a94 l     F .text	00000030 __metal_mutex_init
01010ac4 l     F .text	00000024 __metal_mutex_deinit
01010ae8 l     F .text	00000040 __metal_mutex_acquire
01010b28 l     F .text	00000030 __metal_mutex_release
01010b58 l     F .text	00000034 metal_mutex_init
01010b8c l     F .text	00000034 metal_mutex_deinit
01010bc0 l     F .text	00000034 metal_mutex_acquire
01010bf4 l     F .text	00000034 metal_mutex_release
01010c28 l     F .text	00000094 rpmsg_init_ept
01010cbc l     F .text	0000002c rpmsg_virtio_get_role
01010ce8 l     F .text	0000005c rpmsg_virtio_set_status
01010d44 l     F .text	00000048 rpmsg_virtio_get_status
01010d8c l     F .text	00000048 rpmsg_virtio_get_features
01010dd4 l     F .text	0000005c rpmsg_virtio_create_virtqueues
01010e30 l     F .text	00000040 rpmsg_get_ept_from_addr
01010f48 l     F .text	000000b0 rpmsg_virtio_return_buffer
01010ff8 l     F .text	000000b8 rpmsg_virtio_enqueue_buffer
010110b0 l     F .text	000000bc rpmsg_virtio_get_tx_buffer
0101116c l     F .text	00000090 rpmsg_virtio_get_rx_buffer
010111fc l     F .text	00000060 rpmsg_virtio_wait_remote_ready
0101125c l     F .text	0000007c _rpmsg_virtio_get_buffer_size
010112d8 l     F .text	0000021c rpmsg_virtio_send_offchannel_raw
010114f4 l     F .text	00000024 rpmsg_virtio_tx_callback
01011518 l     F .text	00000238 rpmsg_virtio_rx_callback
01011750 l     F .text	000001dc rpmsg_virtio_ns_callback
00000000 l    df *ABS*	00000000 virtio.c
01011e04 l     F .text	00000088 vring_size
01011e8c l     F .text	00000054 metal_io_virt_to_offset
01025e60 l     O .rodata	00000048 virtio_ident_table
01025ee0 l     O .rodata	00000028 virtio_common_feature_desc
01011f50 l     F .text	0000012c virtio_feature_name
00000000 l    df *ABS*	00000000 virtqueue.c
01012240 l     F .text	000000a0 vring_init
010122e0 l     F .text	00000060 vring_need_event
01012340 l     F .text	00000034 metal_free_memory
01012374 l     F .text	0000005c metal_io_virt
010123d0 l     F .text	00000054 metal_io_virt_to_offset
01012424 l     F .text	000000d0 metal_io_phys
010124f4 l     F .text	000000d8 metal_io_phys_to_offset
010125cc l     F .text	00000044 metal_io_phys_to_virt
01012610 l     F .text	00000044 metal_io_virt_to_phys
01012654 l     F .text	00000044 virtqueue_phys_to_virt
01012698 l     F .text	00000044 virtqueue_virt_to_phys
01013298 l     F .text	000000dc vq_ring_init
01013038 l     F .text	0000014c vq_ring_add_buffer
01013374 l     F .text	000000a0 vq_ring_update_avail
01013184 l     F .text	00000114 vq_ring_free_chain
01013414 l     F .text	000001a4 vq_ring_enable_interrupt
01013604 l     F .text	000001b8 vq_ring_must_notify
010137bc l     F .text	00000048 vq_ring_notify
01013804 l     F .text	00000048 virtqueue_nused
0101384c l     F .text	00000048 virtqueue_navail
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
01026adc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
01026742 l     O .rodata	00000010 zeroes.4389
01026752 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
01016aa0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 findfp.c
01018328 l     F .text	00000008 __fp_unlock
0101833c l     F .text	0000019c __sinit.part.1
010184d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
01026f20 l     O .rwdata	00000020 lc_ctype_charset
01026f00 l     O .rwdata	00000020 lc_message_charset
01026f40 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
01026780 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
010268b4 l     O .rodata	00000010 blanks.4332
010268a4 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0101c6a8 l     F .text	000000fc __sprint_r.part.0
010268d4 l     O .rodata	00000010 blanks.4348
010268c4 l     O .rodata	00000010 zeroes.4349
0101dc34 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
010222dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010223e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01022448 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
010226c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
010227a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01022910 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010229fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01022bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010285f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01022e4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01022f80 l     F .text	00000034 alt_dev_reg
01022fb4 l     F .text	0000003c alt_get_errno
01022ff0 l     F .text	00000068 alt_avalon_mutex_reg
01027528 l     O .rwdata	00001060 jtag_uart_0
01028588 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0102331c l     F .text	0000020c altera_avalon_jtag_uart_irq
01023528 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
01023b60 l     F .text	0000003c alt_get_errno
01023b9c l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01023e2c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010241ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010246f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
01024830 l     F .text	0000003c alt_get_errno
0102486c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0102a274 g     O .bss	00000004 alt_instruction_exception_handler
0101a6b8 g     F .text	00000074 _mprec_log10
0100b2f0 g     F .text	00000080 elf_get_entry
0101a7a4 g     F .text	0000008c __any_on
01006258 g     F .text	000000a4 metal_bus_find
0101efbc g     F .text	00000054 _isatty_r
0102678c g     O .rodata	00000028 __mprec_tinytens
01022b0c g     F .text	0000007c alt_main
01013c58 g     F .text	000000c0 _puts_r
010128a4 g     F .text	00000130 virtqueue_get_buffer
0182a608 g     O .bss	00000100 alt_irq
0182a5e8 g     O .bss	00000020 _metal
0101e9a4 g     F .text	00000060 _lseek_r
0100012c g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0100486c g     F .text	00000064 vTaskPlaceOnUnorderedEventList
01001250 g     F .text	00000020 xPortGetFreeHeapSize
010007d4 g     F .text	0000003c xEventGroupGetBitsFromISR
01028608 g       *ABS*	00000000 __flash_rwdata_start
01020e08 g     F .text	00000088 .hidden __eqdf2
0182a708 g       *ABS*	00000000 __alt_heap_start
01003d28 g     F .text	00000058 uxTaskPriorityGet
01012ca4 g     F .text	00000034 virtqueue_enable_cb
0101b100 g     F .text	0000005c _kill_r
0101ed78 g     F .text	0000009c _wcrtomb_r
01010470 g     F .text	000000a0 rpmsg_send_ns_message
0101aec8 g     F .text	00000084 _signal_r
0101b238 g     F .text	0000005c __sseek
01018678 g     F .text	00000010 __sinit
0101ec20 g     F .text	00000140 __swbuf_r
01018d0c g     F .text	0000007c _setlocale_r
010184e0 g     F .text	00000068 __sfmoreglue
01008654 g     F .text	00000028 metal_get_log_level
01002da4 g     F .text	00000158 xStreamBufferReceive
01022bac g     F .text	00000024 __malloc_unlock
01014620 g     F .text	0000001c strerror
01008744 g     F .text	000000b8 metal_shmem_register_generic
01000440 g     F .text	00000184 xEventGroupSync
010196d8 g     F .text	0000015c memmove
010072a4 g     F .text	00000040 metal_shmem_open
01005270 g     F .text	00000054 vTaskEnterCritical
01018660 g     F .text	00000018 _cleanup
01013e04 g     F .text	000000e4 snprintf
01001938 g     F .text	000000e8 xQueueGenericSendFromISR
01004554 g     F .text	00000040 pcTaskGetName
01023cd4 g     F .text	00000040 altera_avalon_mutex_trylock
01019834 g     F .text	000000a8 _Balloc
01002990 g     F .text	00000088 xStreamBufferSpacesAvailable
01008620 g     F .text	00000034 metal_set_log_level
01020e90 g     F .text	000000dc .hidden __gtdf2
01024c28 g     F .text	00000024 altera_nios2_gen2_irq_init
01002888 g     F .text	0000009c xStreamBufferReset
01000000 g     F .entry	0000001c __reset
01001600 g     F .text	00000090 xQueueGiveMutexRecursive
0102a1fc g     O .bss	00000004 pxCurrentTCB
01023d68 g     F .text	00000074 altera_avalon_mutex_is_mine
01006c60 g     F .text	00000034 metal_sys_finish
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100c114 g     F .text	0000009c remoteproc_init
0101ef60 g     F .text	0000005c _fstat_r
01007a6c g     F .text	00000168 metal_io_init
0102a258 g     O .bss	00000004 errno
0101b1b4 g     F .text	00000008 __seofread
0101b46c g     F .text	0000123c ___svfiprintf_internal_r
01007274 g     F .text	00000030 metal_machine_io_mem_map
01002be0 g     F .text	000000f0 xStreamBufferSendFromISR
0100650c g     F .text	000000a4 metal_generic_dev_open
0102a264 g     O .bss	00000004 alt_argv
01030598 g       *ABS*	00000000 _gp
01022e1c g     F .text	00000030 usleep
010087fc g     F .text	000000c8 metal_shmem_open_generic
01006698 g     F .text	00000088 metal_generic_dev_dma_unmap
01003dcc g     F .text	000001a4 vTaskPrioritySet
01022534 g     F .text	00000020 getpid
01004ad8 g     F .text	0000003c vTaskInternalSetTimeOutState
01009230 g     F .text	000000b4 rpmsg_rpc_release
010063e8 g     F .text	00000090 metal_device_close
010005c4 g     F .text	000001a8 xEventGroupWaitBits
0100c890 g     F .text	00000d80 remoteproc_load
0100b474 g     F .text	0000004c elf_get_load_state
010273a8 g     O .rwdata	00000180 alt_fd_list
010120c0 g     F .text	00000180 virtio_create_virtqueues
01000e88 g     F .text	00000038 xPortStartScheduler
01004314 g     F .text	00000048 vTaskEndScheduler
0102438c g     F .text	00000090 alt_find_dev
010139e8 g     F .text	00000148 memcpy
0100481c g     F .text	00000050 vTaskPlaceOnEventList
010049c4 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
01018330 g     F .text	0000000c _cleanup_r
010220f4 g     F .text	000000dc .hidden __floatsidf
010247b4 g     F .text	0000007c alt_io_redirect
01020f6c g     F .text	000000f4 .hidden __ltdf2
01002148 g     F .text	0000007c xQueuePeekFromISR
0102521c g       *ABS*	00000000 __DTOR_END__
01006ba4 g     F .text	00000084 metal_generic_dev_sys_open
01013d18 g     F .text	00000014 puts
01024e88 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01001184 g     F .text	000000cc vPortFree
01013fc4 g     F .text	0000065c _strerror_r
0101ad94 g     F .text	00000074 __fpclassifyd
0101a614 g     F .text	000000a4 __ratio
0100f32c g     F .text	000000cc rproc_virtio_notified
0101dc18 g     F .text	0000001c __vfiprintf_internal
010093e8 g     F .text	00000038 rpmsg_set_default_rpc
01001ca4 g     F .text	00000210 xQueueSemaphoreTake
01023720 g     F .text	0000021c altera_avalon_jtag_uart_read
0101fbb8 g     F .text	00000064 .hidden __udivsi3
01022700 g     F .text	000000a4 isatty
0101af4c g     F .text	000000bc _raise_r
01013894 g     F .text	00000068 __assert_func
010267dc g     O .rodata	000000c8 __mprec_tens
01004dd4 g     F .text	00000060 uxTaskGetStackHighWaterMark
010074a0 g     F .text	00000100 metal_run
01018d88 g     F .text	0000000c __locale_charset
01000b80 g     F .text	0000008c vListInsertEnd
01024df8 g     F .text	00000090 alt_icache_flush
0102a254 g     O .bss	00000004 __malloc_top_pad
0101b15c g     F .text	00000004 _getpid_r
0100c660 g     F .text	00000068 remoteproc_get_io_with_va
010003ec g     F .text	00000054 xEventGroupCreate
010285c8 g     O .rwdata	00000004 __mb_cur_max
01018db8 g     F .text	0000000c _localeconv_r
01019c40 g     F .text	0000003c __i2b
010186c8 g     F .text	000004bc __sfvwrite_r
0101b008 g     F .text	000000a8 __sigtramp_r
0101207c g     F .text	00000044 virtio_describe
0101ae08 g     F .text	00000054 _sbrk_r
010085c4 g     F .text	00000034 metal_set_log_handler
01000a04 g     F .text	0000003c vEventGroupSetBitsCallback
010041a4 g     F .text	000000e0 xTaskResumeFromISR
01007924 g     F .text	000000ac metal_init
0100f3f8 g     F .text	0000005c rproc_virtio_wait_remote_ready
0101ebc0 g     F .text	00000060 _read_r
01000b54 g     F .text	0000002c vListInitialiseItem
010285e8 g     O .rwdata	00000004 alt_max_fd
01000f68 g     F .text	00000048 vPortSysTickHandler
0101dfbc g     F .text	000000f0 _fclose_r
0100c564 g     F .text	00000064 remoteproc_get_io_with_pa
01001afc g     F .text	000001a8 xQueueReceive
0101e338 g     F .text	00000030 fflush
0102a250 g     O .bss	00000004 __malloc_max_sbrked_mem
01007bd4 g     F .text	000001b4 metal_io_block_read
01003d80 g     F .text	0000004c uxTaskPriorityGetFromISR
01022554 g     F .text	00000170 alt_irq_register
01012ab8 g     F .text	00000114 virtqueue_get_available_buffer
0101fc74 g     F .text	000008ac .hidden __adddf3
0100d610 g     F .text	00000a50 remoteproc_load_noblock
0101a3bc g     F .text	0000010c __b2d
0101f588 g     F .text	00000538 .hidden __umoddi3
01022a38 g     F .text	000000d4 lseek
01023ddc g     F .text	00000050 altera_avalon_mutex_first_lock
0100e14c g     F .text	00000390 remoteproc_create_virtio
010285c0 g     O .rwdata	00000004 _global_impure_ptr
01000810 g     F .text	00000180 xEventGroupSetBits
0101a830 g     F .text	00000564 _realloc_r
0182a708 g       *ABS*	00000000 __bss_end
01024600 g     F .text	000000f0 alt_iic_isr_register
01024b20 g     F .text	00000108 alt_tick
0101f010 g     F .text	00000578 .hidden __udivdi3
0101e4cc g     F .text	00000024 _fputwc_r
010267b4 g     O .rodata	00000028 __mprec_bigtens
01019a24 g     F .text	00000104 __s2b
01016a88 g     F .text	00000018 abort
01009420 g     F .text	00000130 _open
010221d0 g     F .text	000000a8 .hidden __floatunsidf
01006b7c g     F .text	00000028 metal_condition_wait
0101a0fc g     F .text	00000060 __mcmp
01000fb0 g     F .text	000001d4 pvPortMalloc
0100851c g     F .text	0000003c metal_irq_enable
01018698 g     F .text	00000018 __fp_lock_all
010245b4 g     F .text	0000004c alt_ic_irq_enabled
01002290 g     F .text	0000003c vQueueDelete
010060bc g     F .text	000000f8 metal_bus_register
01000ec0 g     F .text	00000020 vPortEndScheduler
01000aec g     F .text	00000068 vListInitialise
01003144 g     F .text	00000058 xStreamBufferIsEmpty
01024a84 g     F .text	0000009c alt_alarm_stop
0102a25c g     O .bss	00000004 alt_irq_active
010092e4 g     F .text	00000104 rpmsg_rpc_send
01000258 g     F .exceptions	000000d4 alt_irq_handler
01027380 g     O .rwdata	00000028 alt_dev_null
01010510 g     F .text	00000140 rpmsg_get_endpoint
010044e0 g     F .text	00000028 xTaskGetTickCount
01001784 g     F .text	000001b4 xQueueGenericSend
01023c18 g     F .text	00000054 altera_avalon_mutex_open
01002a58 g     F .text	00000188 xStreamBufferSend
0100329c g     F .text	00000084 xStreamBufferReceiveCompletedFromISR
010241a4 g     F .text	00000048 alt_dcache_flush_all
01019b28 g     F .text	00000068 __hi0bits
01022074 g     F .text	00000080 .hidden __fixdfsi
01002efc g     F .text	000000a8 xStreamBufferNextMessageLengthBytes
01005034 g     F .text	000000fc xTaskPriorityDisinherit
01008a6c g     F .text	00000030 metal_softirq_init
01028608 g       *ABS*	00000000 __ram_rwdata_end
01010e70  w    F .text	0000007c rpmsg_virtio_shm_pool_get_buffer
010285e0 g     O .rwdata	00000008 alt_dev_list
01022e88 g     F .text	000000f8 write
010048d0 g     F .text	000000f4 xTaskRemoveFromEventList
010285f8 g     O .rwdata	00000008 alt_mutex_list
01026a28 g       *ABS*	00000000 __ram_rodata_end
01022484 g     F .text	000000b0 fstat
0100076c g     F .text	00000068 xEventGroupClearBits
010227e0 g     F .text	00000130 kill
01020f6c g     F .text	000000f4 .hidden __ledf2
01001eb4 g     F .text	000001b0 xQueuePeek
01019e74 g     F .text	00000140 __pow5mult
0102a248 g     O .bss	00000004 __nlocale_changed
0101c7bc g     F .text	0000145c ___vfiprintf_internal_r
0101fc1c g     F .text	00000058 .hidden __umodsi3
0100c6c8 g     F .text	000001c8 remoteproc_mmap
010089dc g     F .text	00000090 metal_softirq_set
0100c1b0 g     F .text	00000084 remoteproc_remove
01008558 g     F .text	0000003c metal_irq_disable
0182a708 g       *ABS*	00000000 end
01002fa4 g     F .text	000000e4 xStreamBufferReceiveFromISR
010039e4 g     F .text	000000e8 vTaskDelete
0102325c g     F .text	000000c0 altera_avalon_jtag_uart_init
0100032c g     F .exceptions	00000074 alt_instruction_exception_entry
01005368 g     F .text	00000038 pvTaskIncrementMutexHeldCount
01025208 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01023ea4 g     F .text	0000007c alt_avalon_timer_sc_init
01022278 g     F .text	00000064 .hidden __clzsi2
01013d2c g     F .text	000000d8 _snprintf_r
0102393c g     F .text	00000224 altera_avalon_jtag_uart_write
01007894 g     F .text	00000050 metal_get_timestamp
01018688 g     F .text	00000004 __sfp_lock_acquire
010195f4 g     F .text	000000e4 memchr
01004b14 g     F .text	000000e0 xTaskCheckForTimeOut
0101e694 g     F .text	00000310 _free_r
01004ef4 g     F .text	00000140 xTaskPriorityInherit
01018d94 g     F .text	00000010 __locale_mb_cur_max
01025088 g     F .text	00000180 __call_exitprocs
010108b0 g     F .text	000000b0 rpmsg_destroy_ept
01002824 g     F .text	00000064 vStreamBufferDelete
0102a244 g     O .bss	00000004 __mlocale_changed
010053a0 g     F .text	000000b0 ulTaskNotifyTake
010285cc g     O .rwdata	00000004 __malloc_sbrk_base
010003a0 g     F .text	0000004c _start
0102a26c g     O .bss	00000004 _alt_tick_rate
0100435c g     F .text	0000002c vTaskSuspendAll
01003c18 g     F .text	00000110 eTaskGetState
0100319c g     F .text	0000007c xStreamBufferIsFull
01004508 g     F .text	0000002c xTaskGetTickCountFromISR
01016a68 g     F .text	00000008 _user_strerror
010062fc g     F .text	000000ec metal_device_open
01019fb4 g     F .text	00000148 __lshift
010129d4 g     F .text	00000040 virtqueue_get_buffer_length
0102a270 g     O .bss	00000004 _alt_nticks
0101b0c4 g     F .text	00000018 signal
01022c0c g     F .text	000000fc read
01023090 g     F .text	00000068 alt_sys_init
010075a0 g     F .text	00000214 metal_run_noblock
0101b29c g     F .text	000001d0 __ssprint_r
01000ce4 g     F .text	00000098 uxListRemove
01024f70 g     F .text	00000118 __register_exitproc
010146d4 g     F .text	000000d0 strncmp
01023d14 g     F .text	00000054 altera_avalon_mutex_unlock
01012cd8 g     F .text	0000013c virtqueue_disable_cb
01002778 g     F .text	000000ac xStreamBufferGenericCreate
01019c7c g     F .text	000001f8 __multiply
010235c8 g     F .text	00000068 altera_avalon_jtag_uart_close
01026a28 g       *ABS*	00000000 __ram_rwdata_start
0102521c g       *ABS*	00000000 __ram_rodata_start
010147a4 g     F .text	000000ec strncpy
0182a5c0 g     O .bss	00000028 __malloc_current_mallinfo
010059f4 g     F .text	00000078 xTaskNotifyStateClear
010040d8 g     F .text	000000cc vTaskResume
0101a4c8 g     F .text	0000014c __d2b
01004744 g     F .text	000000d8 vTaskSwitchContext
0100c5c8 g     F .text	00000098 remoteproc_get_io_with_da
010090e8 g     F .text	00000148 rpmsg_rpc_init
010230f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01024d54 g     F .text	000000a4 alt_get_fd
0102404c g     F .text	00000158 alt_busy_sleep
0101dea4 g     F .text	00000054 _close_r
01012a14 g     F .text	000000a4 virtqueue_free
01010eec g     F .text	0000005c rpmsg_virtio_init_shm_pool
01005450 g     F .text	000000f4 xTaskNotifyWait
0101199c g     F .text	000003e0 rpmsg_init_vdev
0101396c g     F .text	0000007c memcmp
010231b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0182a708 g       *ABS*	00000000 __alt_stack_base
01023208 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0100a608 g     F .text	0000006c elf_identify
01005c28 g     F .text	0000003c metal_add_test_case
0101dd50 g     F .text	00000154 __swsetup_r
01003f70 g     F .text	000000fc vTaskSuspend
01020520 g     F .text	000008e8 .hidden __divdf3
01010728 g     F .text	00000188 rpmsg_create_ept
01018548 g     F .text	00000118 __sfp
0101a72c g     F .text	00000078 __copybits
01004534 g     F .text	00000020 uxTaskGetNumberOfTasks
01026f78 g     O .rwdata	00000408 __malloc_av_
01018694 g     F .text	00000004 __sinit_lock_release
01007d88 g     F .text	000001b0 metal_io_block_write
01021060 g     F .text	00000718 .hidden __muldf3
0101b160 g     F .text	00000054 __sread
01024c4c g     F .text	00000108 alt_find_file
01024228 g     F .text	000000a4 alt_dev_llist_insert
01022b88 g     F .text	00000024 __malloc_lock
01022d6c g     F .text	000000b0 sbrk
01014890 g     F .text	000021d8 ___svfprintf_internal_r
01001690 g     F .text	0000009c xQueueTakeMutexRecursive
01006478 g     F .text	00000094 metal_register_generic_device
01008a9c g     F .text	000000bc metal_softirq_allocate
0101e2dc g     F .text	0000005c _fflush_r
01000990 g     F .text	00000074 vEventGroupDelete
01006720 g     F .text	000000c0 metal_dma_map
0101def8 g     F .text	000000c4 _calloc_r
010135b8 g     F .text	0000004c virtqueue_notification
01005544 g     F .text	000001ac xTaskGenericNotify
0101192c g     F .text	00000070 rpmsg_virtio_get_buffer_size
0102a1e8 g       *ABS*	00000000 __bss_start
01013b30 g     F .text	00000128 memset
01005b54 g     F .text	00000034 main
0102a268 g     O .bss	00000004 alt_envp
0102a24c g     O .bss	00000004 __malloc_max_total_mem
01007224 g     F .text	00000028 metal_machine_cache_flush
01023158 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0101ed60 g     F .text	00000018 __swbuf
01012e60 g     F .text	00000124 virtqueue_dump
01008594 g     F .text	00000030 metal_default_log_handler
01000c0c g     F .text	000000d8 vListInsert
0101b294 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0101e0ac g     F .text	00000014 fclose
01023c90 g     F .text	00000044 altera_avalon_mutex_lock
01016ca0 g     F .text	00001688 _dtoa_r
01018de8 g     F .text	0000080c _malloc_r
0101eed4 g     F .text	00000030 __ascii_wctomb
0100c080 g     F .text	00000094 remoteproc_set_rsc_table
010285ec g     O .rwdata	00000004 alt_errno
01003acc g     F .text	000000f0 vTaskDelayUntil
01013910 g     F .text	00000020 _fiprintf_r
0101b0dc g     F .text	00000010 _init_signal
010067e0 g     F .text	000000a0 metal_dma_unmap
01018b84 g     F .text	000000c4 _fwalk
0100e060 g     F .text	000000a0 remoteproc_allocate_id
010126dc g     F .text	000000c4 virtqueue_create
01006c94 g     F .text	000000ec metal_sys_io_mem_map
01002064 g     F .text	000000e4 xQueueReceiveFromISR
01004ecc g     F .text	00000028 xTaskGetCurrentTaskHandle
0101fac0 g     F .text	00000084 .hidden __divsi3
01001418 g     F .text	000000a8 xQueueGenericCreate
01012f84 g     F .text	000000b4 virtqueue_get_desc_size
0101e570 g     F .text	00000124 _malloc_trim_r
0102521c g       *ABS*	00000000 __CTOR_END__
01013ee8 g     F .text	000000dc strcmp
0100172c g     F .text	00000058 xQueueCreateCountingSemaphore
0102521c g       *ABS*	00000000 __flash_rodata_start
0102521c g       *ABS*	00000000 __DTOR_LIST__
01002924 g     F .text	0000006c xStreamBufferSetTriggerLevel
010077b4 g     F .text	000000e0 metal_finish_threads
0100c378 g     F .text	000000ac remoteproc_stop
010056f0 g     F .text	000001e4 xTaskGenericNotifyFromISR
01020e08 g     F .text	00000088 .hidden __nedf2
01023058 g     F .text	00000038 alt_irq_init
01022d08 g     F .text	00000064 alt_release_fd
01004388 g     F .text	00000158 xTaskResumeAll
01002204 g     F .text	00000054 uxQueueSpacesAvailable
010268e4 g     O .rodata	00000100 .hidden __clz_tab
01004284 g     F .text	00000090 vTaskStartScheduler
0102a240 g     O .bss	00000004 _PathLocale
01008290 g     F .text	000000cc metal_irq_register_controller
0100fbb4 g     F .text	0000009c handle_trace_rsc
01024f24 g     F .text	00000014 atexit
0101dcf0 g     F .text	00000060 _write_r
0100fc78 g     F .text	0000017c find_rsc
01018dc4 g     F .text	00000018 setlocale
01002728 g     F .text	00000050 xQueueIsQueueFullFromISR
010285c4 g     O .rwdata	00000004 _impure_ptr
0102a260 g     O .bss	00000004 alt_argc
010103c0 g     F .text	000000b0 rpmsg_send_offchannel_raw
0101e0c0 g     F .text	0000021c __sflush_r
01012e14 g     F .text	0000004c virtqueue_kick
0102432c g     F .text	00000060 _do_dtors
0100f8cc g     F .text	000000a0 handle_vendor_rsc
01018db0 g     F .text	00000008 __locale_cjk_lang
0100c424 g     F .text	000000dc remoteproc_shutdown
01000020 g       .exceptions	00000000 alt_irq_entry
0101a358 g     F .text	00000064 __ulp
010186b0 g     F .text	00000018 __fp_unlock_all
01004bf4 g     F .text	00000028 vTaskMissedYield
010285d8 g     O .rwdata	00000008 alt_fs_list
0100f758 g     F .text	00000174 handle_carve_out_rsc
010021c4 g     F .text	00000040 uxQueueMessagesWaiting
01026a28  w    O .rwdata	0000002c metal_generic_bus
01004594 g     F .text	000001b0 xTaskIncrementTick
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100f284 g     F .text	000000a8 rproc_virtio_init_vring
0100724c g     F .text	00000028 metal_machine_cache_invalidate
01018ddc g     F .text	0000000c localeconv
010079d0 g     F .text	00000040 metal_finish
010065b0 g     F .text	000000e8 metal_generic_dev_dma_map
01024450 g     F .text	00000050 alt_ic_isr_register
01011ee0 g     F .text	00000070 virtio_dev_name
01001304 g     F .text	00000114 xQueueGenericReset
01009690 g     F .text	0000015c _write
01028608 g       *ABS*	00000000 _edata
0182a708 g       *ABS*	00000000 _end
0101e368 g     F .text	00000164 __fputwc
010003a0 g       *ABS*	00000000 __ram_exceptions_end
01007f38 g     F .text	000001c4 metal_io_block_set
01023630 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01006c28 g     F .text	00000038 metal_sys_init
0100361c g     F .text	000000e8 xTaskCreate
01001270 g     F .text	00000020 vPortInitialiseBlocks
01024528 g     F .text	0000008c alt_ic_irq_disable
0100ef6c g     F .text	0000026c rproc_virtio_create_vdev
0101b1bc g     F .text	0000007c __swrite
010285d0 g     O .rwdata	00000004 __malloc_trim_threshold
01018da4 g     F .text	0000000c __locale_msgcharset
0100b370 g     F .text	00000104 elf_locate_rsc_table
01024f38 g     F .text	00000038 exit
01013930 g     F .text	0000003c fiprintf
01016a70 g     F .text	00000018 _vfiprintf_r
01018c48 g     F .text	000000c4 _fwalk_reent
0101a15c g     F .text	000001fc __mdiff
0101fb44 g     F .text	00000074 .hidden __modsi3
01003bbc g     F .text	0000005c vTaskDelay
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0101868c g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100c500 g     F .text	00000064 remoteproc_get_io_with_name
01008b58 g     F .text	00000130 metal_softirq_dispatch
01005130 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
01009550 g     F .text	00000140 _read
01008450 g     F .text	000000cc metal_irq_register
01011d7c g     F .text	00000088 rpmsg_deinit_vdev
01022414 g     F .text	00000034 _exit
01023f20 g     F .text	0000012c alt_alarm_start
0101ea04 g     F .text	000001bc __smakebuf_r
010052c4 g     F .text	00000060 vTaskExitCritical
0101463c g     F .text	00000098 strlen
01000da8 g     F .text	000000e0 pxPortInitialiseStack
0101ae5c g     F .text	0000006c _init_signal_r
01024930 g     F .text	00000154 open
01020e90 g     F .text	000000dc .hidden __gedf2
010138fc g     F .text	00000014 __assert
010061b4 g     F .text	000000a4 metal_bus_unregister
010285d4 g     O .rwdata	00000004 __wctomb
010085f8 g     F .text	00000028 metal_get_log_handler
0101c7a4 g     F .text	00000018 __sprint_r
0102441c g     F .text	00000034 alt_icache_flush_all
01004a8c g     F .text	0000004c vTaskSetTimeOutState
0100e4dc g     F .text	00000084 remoteproc_remove_virtio
010285f0 g     O .rwdata	00000004 alt_priority_mask
010127a0 g     F .text	00000104 virtqueue_add_buffer
010244a0 g     F .text	00000088 alt_ic_irq_enable
010106d4 g     F .text	00000054 rpmsg_register_endpoint
01023c6c g     F .text	00000024 altera_avalon_mutex_close
0101ef04 g     F .text	0000005c _wctomb_r
01002258 g     F .text	00000038 uxQueueMessagesWaitingFromISR
01002688 g     F .text	00000048 xQueueIsQueueEmptyFromISR
01002a18 g     F .text	00000040 xStreamBufferBytesAvailable
0100c234 g     F .text	000000b0 remoteproc_config
0100b1e0 g     F .text	00000110 elf_release
01021778 g     F .text	000008fc .hidden __subdf3
01026ac4 g     O .rwdata	00000018 elf_ops
0100f96c g     F .text	00000248 handle_vdev_rsc
01019b90 g     F .text	000000b0 __lo0bits
0100ada0 g     F .text	00000440 elf_load
01028600 g     O .rwdata	00000008 alt_alarm_list
01012bcc g     F .text	000000d8 virtqueue_add_consumed_buffer
010242cc g     F .text	00000060 _do_ctors
0101b0ec g     F .text	00000014 __sigtramp
0100c2e4 g     F .text	00000094 remoteproc_start
0100a674 g     F .text	0000072c elf_load_header
01005324 g     F .text	00000044 uxTaskResetEventItemValue
0101ee14 g     F .text	000000c0 wcrtomb
010015a4 g     F .text	0000005c xQueueCreateMutex
01022318 g     F .text	000000d0 close
010058d4 g     F .text	00000120 vTaskNotifyGiveFromISR
0100f1d8 g     F .text	000000ac rproc_virtio_remove_vdev
01022978 g     F .text	00000084 alt_load
0100f4a8 g     F .text	000002b0 handle_rsc_table
01000a40 g     F .text	0000003c vEventGroupClearBitsCallback
01003218 g     F .text	00000084 xStreamBufferSendCompletedFromISR
01001a20 g     F .text	000000dc xQueueGiveFromISR
0101e4f0 g     F .text	00000080 fputwc
0101b0b0 g     F .text	00000014 raise
010097ec g     F .text	000000bc _close
0100e560 g     F .text	00000090 remoteproc_get_notification
01018690 g     F .text	00000004 __sinit_lock_acquire
01005c64 g     F .text	00000220 metal_tests_run
01019904 g     F .text	00000120 __multadd
010198dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	0840e814 	ori	at,at,928
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_sdram-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 1000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 1000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 1000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 100002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 1000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 1000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 1000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 100003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 1000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 1000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 1000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 100004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 1000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 100006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 1000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 1000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 1000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 100007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 1000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 1000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 1000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 100008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 1000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 1000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 1000098:	df001c15 	stw	fp,112(sp)

0100009c <save_sp_to_pxCurrentTCB>:
 100009c:	060040f4 	movhi	et,259

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 10000a0:	c6287f04 	addi	et,et,-24068
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 10000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 10000a8:	c6c00015 	stw	sp,0(et)

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 10000ac:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 10000b0:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 10000b4:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 10000b8:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 10000bc:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 10000c0:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 10000c4:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 10000c8:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 10000cc:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 10000d0:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 10000d4:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 10000d8:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 10000dc:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 10000e0:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 10000e4:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 10000e8:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 10000ec:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 10000f0:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 10000f4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 10000f8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000fc:	dbc01215 	stw	r15,72(sp)

01000100 <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 1000100:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 1000104:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 1000108:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 100010c:	10002d26 	beq	r2,zero,10001c4 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 1000110:	20002c26 	beq	r4,zero,10001c4 <soft_exceptions>
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000114:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000118:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100011c:	10002726 	beq	r2,zero,10001bc <restore_context+0x80>
        beq   r4, zero, .Lnot_irq
 1000120:	20002626 	beq	r4,zero,10001bc <restore_context+0x80>

01000124 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 1000124:	10002580 	call	1000258 <alt_irq_handler>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000128:	10002580 	call	1000258 <alt_irq_handler>

0100012c <restore_sp_from_pxCurrentTCB>:
 100012c:	060040f4 	movhi	et,259

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 1000130:	c6287f04 	addi	et,et,-24068
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 1000134:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 1000138:	c6c00017 	ldw	sp,0(et)

0100013c <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 100013c:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 1000140:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 1000144:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 1000148:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 100014c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 1000150:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 1000154:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 1000158:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 100015c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 1000160:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 1000164:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 1000168:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 100016c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 1000170:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 1000174:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 1000178:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 100017c:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 1000180:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 1000184:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 1000188:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 100018c:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 1000190:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 1000194:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 1000198:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 100019c:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 10001a0:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 10001a4:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 10001a8:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 10001ac:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 10001b0:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 10001b4:	ef80083a 	eret

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 10001b8:	00001206 	br	1000204 <call_scheduler+0x24>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 10001bc:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 10001c0:	e8bfff17 	ldw	r2,-4(ea)

010001c4 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 10001c4:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 10001c8:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 10001cc:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 10001d0:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 10001d4:	c0000226 	beq	et,zero,10001e0 <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 10001d8:	003da03a 	break	0
  	br		restore_context			# its something else
 10001dc:	003fd706 	br	100013c <__alt_data_end+0xff00013c>

010001e0 <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 10001e0:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 10001e4:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 10001e8:	10047440 	call	1004744 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 10001ec:	003fcf06 	br	100012c <__alt_data_end+0xff00012c>
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 10001f0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 10001f4:	100032c0 	call	100032c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 10001f8:	1000021e 	bne	r2,zero,1000204 <call_scheduler+0x24>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10001fc:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000200:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000204:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 1000208:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 100020c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 1000210:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 1000214:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 1000218:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 100021c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 1000220:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 1000224:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 1000228:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 100022c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 1000230:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 1000234:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 1000238:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 100023c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 1000240:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 1000244:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 1000248:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100024c:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 1000250:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 1000254:	ef80083a 	eret

01000258 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 1000258:	defff904 	addi	sp,sp,-28
 100025c:	dfc00615 	stw	ra,24(sp)
 1000260:	df000515 	stw	fp,20(sp)
 1000264:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 1000268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100026c:	0005313a 	rdctl	r2,ipending
 1000270:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000274:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000278:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 100027c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000280:	00800044 	movi	r2,1
 1000284:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000288:	e0fffb17 	ldw	r3,-20(fp)
 100028c:	e0bffc17 	ldw	r2,-16(fp)
 1000290:	1884703a 	and	r2,r3,r2
 1000294:	10001426 	beq	r2,zero,10002e8 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000298:	008060f4 	movhi	r2,387
 100029c:	10a98204 	addi	r2,r2,-23032
 10002a0:	e0fffd17 	ldw	r3,-12(fp)
 10002a4:	180690fa 	slli	r3,r3,3
 10002a8:	10c5883a 	add	r2,r2,r3
 10002ac:	10c00017 	ldw	r3,0(r2)
 10002b0:	008060f4 	movhi	r2,387
 10002b4:	10a98204 	addi	r2,r2,-23032
 10002b8:	e13ffd17 	ldw	r4,-12(fp)
 10002bc:	200890fa 	slli	r4,r4,3
 10002c0:	1105883a 	add	r2,r2,r4
 10002c4:	10800104 	addi	r2,r2,4
 10002c8:	10800017 	ldw	r2,0(r2)
 10002cc:	1009883a 	mov	r4,r2
 10002d0:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 10002d4:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10002d8:	0005313a 	rdctl	r2,ipending
 10002dc:	e0bfff15 	stw	r2,-4(fp)

  return active;
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	00000706 	br	1000304 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 10002e8:	e0bffc17 	ldw	r2,-16(fp)
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	10800044 	addi	r2,r2,1
 10002fc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000300:	003fe106 	br	1000288 <__alt_data_end+0xff000288>

    active = alt_irq_pending ();
 1000304:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1000308:	e0bffb17 	ldw	r2,-20(fp)
 100030c:	103fdb1e 	bne	r2,zero,100027c <__alt_data_end+0xff00027c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1000310:	0001883a 	nop
}
 1000314:	0001883a 	nop
 1000318:	e037883a 	mov	sp,fp
 100031c:	dfc00117 	ldw	ra,4(sp)
 1000320:	df000017 	ldw	fp,0(sp)
 1000324:	dec00204 	addi	sp,sp,8
 1000328:	f800283a 	ret

0100032c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 100032c:	defffb04 	addi	sp,sp,-20
 1000330:	dfc00415 	stw	ra,16(sp)
 1000334:	df000315 	stw	fp,12(sp)
 1000338:	df000304 	addi	fp,sp,12
 100033c:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1000340:	000531fa 	rdctl	r2,exception
 1000344:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1000348:	e0bffd17 	ldw	r2,-12(fp)
 100034c:	10801f0c 	andi	r2,r2,124
 1000350:	1004d0ba 	srli	r2,r2,2
 1000354:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1000358:	0005333a 	rdctl	r2,badaddr
 100035c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000360:	d0a73717 	ldw	r2,-25380(gp)
 1000364:	10000726 	beq	r2,zero,1000384 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1000368:	d0a73717 	ldw	r2,-25380(gp)
 100036c:	e0fffd17 	ldw	r3,-12(fp)
 1000370:	e1bffe17 	ldw	r6,-8(fp)
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	1809883a 	mov	r4,r3
 100037c:	103ee83a 	callr	r2
 1000380:	00000206 	br	100038c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000384:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000388:	0005883a 	mov	r2,zero
}
 100038c:	e037883a 	mov	sp,fp
 1000390:	dfc00117 	ldw	ra,4(sp)
 1000394:	df000017 	ldw	fp,0(sp)
 1000398:	dec00204 	addi	sp,sp,8
 100039c:	f800283a 	ret

Disassembly of section .text:

010003a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10003a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10003a4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10003a8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10003ac:	00bffd16 	blt	zero,r2,10003a4 <__alt_data_end+0xff0003a4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10003b0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10003b4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10003b8:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10003bc:	d6816614 	ori	gp,gp,1432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10003c0:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10003c4:	10a87a14 	ori	r2,r2,41448

    movhi r3, %hi(__bss_end)
 10003c8:	00c060b4 	movhi	r3,386
    ori r3, r3, %lo(__bss_end)
 10003cc:	18e9c214 	ori	r3,r3,42760

    beq r2, r3, 1f
 10003d0:	10c00326 	beq	r2,r3,10003e0 <_start+0x40>

0:
    stw zero, (r2)
 10003d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10003d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10003dc:	10fffd36 	bltu	r2,r3,10003d4 <__alt_data_end+0xff0003d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10003e0:	10229780 	call	1022978 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10003e4:	1022b0c0 	call	1022b0c <alt_main>

010003e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10003e8:	003fff06 	br	10003e8 <__alt_data_end+0xff0003e8>

010003ec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 10003ec:	defffd04 	addi	sp,sp,-12
 10003f0:	dfc00215 	stw	ra,8(sp)
 10003f4:	df000115 	stw	fp,4(sp)
 10003f8:	df000104 	addi	fp,sp,4
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 10003fc:	01000604 	movi	r4,24
 1000400:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1000404:	e0bfff15 	stw	r2,-4(fp)

		if( pxEventBits != NULL )
 1000408:	e0bfff17 	ldw	r2,-4(fp)
 100040c:	10000626 	beq	r2,zero,1000428 <xEventGroupCreate+0x3c>
		{
			pxEventBits->uxEventBits = 0;
 1000410:	e0bfff17 	ldw	r2,-4(fp)
 1000414:	10000015 	stw	zero,0(r2)
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 1000418:	e0bfff17 	ldw	r2,-4(fp)
 100041c:	10800104 	addi	r2,r2,4
 1000420:	1009883a 	mov	r4,r2
 1000424:	1000aec0 	call	1000aec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 1000428:	e0bfff17 	ldw	r2,-4(fp)
	}
 100042c:	e037883a 	mov	sp,fp
 1000430:	dfc00117 	ldw	ra,4(sp)
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00204 	addi	sp,sp,8
 100043c:	f800283a 	ret

01000440 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 1000440:	defff504 	addi	sp,sp,-44
 1000444:	dfc00a15 	stw	ra,40(sp)
 1000448:	df000915 	stw	fp,36(sp)
 100044c:	df000904 	addi	fp,sp,36
 1000450:	e13ffc15 	stw	r4,-16(fp)
 1000454:	e17ffd15 	stw	r5,-12(fp)
 1000458:	e1bffe15 	stw	r6,-8(fp)
 100045c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 1000460:	e0bffc17 	ldw	r2,-16(fp)
 1000464:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 1000468:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 100046c:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 1000470:	e0bff817 	ldw	r2,-32(fp)
 1000474:	10800017 	ldw	r2,0(r2)
 1000478:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 100047c:	e17ffd17 	ldw	r5,-12(fp)
 1000480:	e13ffc17 	ldw	r4,-16(fp)
 1000484:	10008100 	call	1000810 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000488:	e0fffa17 	ldw	r3,-24(fp)
 100048c:	e0bffd17 	ldw	r2,-12(fp)
 1000490:	1886b03a 	or	r3,r3,r2
 1000494:	e0bffe17 	ldw	r2,-8(fp)
 1000498:	1886703a 	and	r3,r3,r2
 100049c:	e0bffe17 	ldw	r2,-8(fp)
 10004a0:	18800d1e 	bne	r3,r2,10004d8 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 10004a4:	e0fffa17 	ldw	r3,-24(fp)
 10004a8:	e0bffd17 	ldw	r2,-12(fp)
 10004ac:	1884b03a 	or	r2,r3,r2
 10004b0:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 10004b4:	e0bff817 	ldw	r2,-32(fp)
 10004b8:	10c00017 	ldw	r3,0(r2)
 10004bc:	e0bffe17 	ldw	r2,-8(fp)
 10004c0:	0084303a 	nor	r2,zero,r2
 10004c4:	1886703a 	and	r3,r3,r2
 10004c8:	e0bff817 	ldw	r2,-32(fp)
 10004cc:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
 10004d0:	e03fff15 	stw	zero,-4(fp)
 10004d4:	00001106 	br	100051c <xEventGroupSync+0xdc>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 10004d8:	e0bfff17 	ldw	r2,-4(fp)
 10004dc:	10000a26 	beq	r2,zero,1000508 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 10004e0:	e0bff817 	ldw	r2,-32(fp)
 10004e4:	10c00104 	addi	r3,r2,4
 10004e8:	e0bffe17 	ldw	r2,-8(fp)
 10004ec:	10814034 	orhi	r2,r2,1280
 10004f0:	e1bfff17 	ldw	r6,-4(fp)
 10004f4:	100b883a 	mov	r5,r2
 10004f8:	1809883a 	mov	r4,r3
 10004fc:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 1000500:	e03ff715 	stw	zero,-36(fp)
 1000504:	00000506 	br	100051c <xEventGroupSync+0xdc>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 1000508:	e0bff817 	ldw	r2,-32(fp)
 100050c:	10800017 	ldw	r2,0(r2)
 1000510:	e0bff715 	stw	r2,-36(fp)
				xTimeoutOccurred = pdTRUE;
 1000514:	00800044 	movi	r2,1
 1000518:	e0bff915 	stw	r2,-28(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 100051c:	10043880 	call	1004388 <xTaskResumeAll>
 1000520:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10002026 	beq	r2,zero,10005ac <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
 100052c:	e0bffb17 	ldw	r2,-20(fp)
 1000530:	1000011e 	bne	r2,zero,1000538 <xEventGroupSync+0xf8>
		{
			portYIELD_WITHIN_API();
 1000534:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 1000538:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 100053c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 1000540:	e0bff717 	ldw	r2,-36(fp)
 1000544:	1080802c 	andhi	r2,r2,512
 1000548:	1000131e 	bne	r2,zero,1000598 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 100054c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 1000550:	e0bff817 	ldw	r2,-32(fp)
 1000554:	10800017 	ldw	r2,0(r2)
 1000558:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 100055c:	e0fff717 	ldw	r3,-36(fp)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	1886703a 	and	r3,r3,r2
 1000568:	e0bffe17 	ldw	r2,-8(fp)
 100056c:	1880071e 	bne	r3,r2,100058c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000570:	e0bff817 	ldw	r2,-32(fp)
 1000574:	10c00017 	ldw	r3,0(r2)
 1000578:	e0bffe17 	ldw	r2,-8(fp)
 100057c:	0084303a 	nor	r2,zero,r2
 1000580:	1886703a 	and	r3,r3,r2
 1000584:	e0bff817 	ldw	r2,-32(fp)
 1000588:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 100058c:	10052c40 	call	10052c4 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
 1000590:	00800044 	movi	r2,1
 1000594:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000598:	e0fff717 	ldw	r3,-36(fp)
 100059c:	00804034 	movhi	r2,256
 10005a0:	10bfffc4 	addi	r2,r2,-1
 10005a4:	1884703a 	and	r2,r3,r2
 10005a8:	e0bff715 	stw	r2,-36(fp)
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 10005ac:	e0bff717 	ldw	r2,-36(fp)
}
 10005b0:	e037883a 	mov	sp,fp
 10005b4:	dfc00117 	ldw	ra,4(sp)
 10005b8:	df000017 	ldw	fp,0(sp)
 10005bc:	dec00204 	addi	sp,sp,8
 10005c0:	f800283a 	ret

010005c4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 10005c4:	defff304 	addi	sp,sp,-52
 10005c8:	dfc00c15 	stw	ra,48(sp)
 10005cc:	df000b15 	stw	fp,44(sp)
 10005d0:	df000b04 	addi	fp,sp,44
 10005d4:	e13ffc15 	stw	r4,-16(fp)
 10005d8:	e17ffd15 	stw	r5,-12(fp)
 10005dc:	e1bffe15 	stw	r6,-8(fp)
 10005e0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10005e4:	e0bffc17 	ldw	r2,-16(fp)
 10005e8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
 10005ec:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 10005f0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 10005f4:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 10005f8:	e0bff717 	ldw	r2,-36(fp)
 10005fc:	10800017 	ldw	r2,0(r2)
 1000600:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 1000604:	e1bfff17 	ldw	r6,-4(fp)
 1000608:	e17ffd17 	ldw	r5,-12(fp)
 100060c:	e13ff917 	ldw	r4,-28(fp)
 1000610:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 1000614:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
 1000618:	e0bffa17 	ldw	r2,-24(fp)
 100061c:	10000d26 	beq	r2,zero,1000654 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 1000620:	e0bff917 	ldw	r2,-28(fp)
 1000624:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
 1000628:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	10002226 	beq	r2,zero,10006bc <xEventGroupWaitBits+0xf8>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000634:	e0bff717 	ldw	r2,-36(fp)
 1000638:	10c00017 	ldw	r3,0(r2)
 100063c:	e0bffd17 	ldw	r2,-12(fp)
 1000640:	0084303a 	nor	r2,zero,r2
 1000644:	1886703a 	and	r3,r3,r2
 1000648:	e0bff717 	ldw	r2,-36(fp)
 100064c:	10c00015 	stw	r3,0(r2)
 1000650:	00001a06 	br	10006bc <xEventGroupWaitBits+0xf8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 1000654:	e0800217 	ldw	r2,8(fp)
 1000658:	1000051e 	bne	r2,zero,1000670 <xEventGroupWaitBits+0xac>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 100065c:	e0bff917 	ldw	r2,-28(fp)
 1000660:	e0bff515 	stw	r2,-44(fp)
			xTimeoutOccurred = pdTRUE;
 1000664:	00800044 	movi	r2,1
 1000668:	e0bff815 	stw	r2,-32(fp)
 100066c:	00001306 	br	10006bc <xEventGroupWaitBits+0xf8>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 1000670:	e0bffe17 	ldw	r2,-8(fp)
 1000674:	10000326 	beq	r2,zero,1000684 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 1000678:	e0bff617 	ldw	r2,-40(fp)
 100067c:	10804034 	orhi	r2,r2,256
 1000680:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 1000684:	e0bfff17 	ldw	r2,-4(fp)
 1000688:	10000326 	beq	r2,zero,1000698 <xEventGroupWaitBits+0xd4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 100068c:	e0bff617 	ldw	r2,-40(fp)
 1000690:	10810034 	orhi	r2,r2,1024
 1000694:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 1000698:	e0bff717 	ldw	r2,-36(fp)
 100069c:	11000104 	addi	r4,r2,4
 10006a0:	e0fffd17 	ldw	r3,-12(fp)
 10006a4:	e0bff617 	ldw	r2,-40(fp)
 10006a8:	1884b03a 	or	r2,r3,r2
 10006ac:	e1800217 	ldw	r6,8(fp)
 10006b0:	100b883a 	mov	r5,r2
 10006b4:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 10006b8:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 10006bc:	10043880 	call	1004388 <xTaskResumeAll>
 10006c0:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 10006c4:	e0800217 	ldw	r2,8(fp)
 10006c8:	10002226 	beq	r2,zero,1000754 <xEventGroupWaitBits+0x190>
	{
		if( xAlreadyYielded == pdFALSE )
 10006cc:	e0bffb17 	ldw	r2,-20(fp)
 10006d0:	1000011e 	bne	r2,zero,10006d8 <xEventGroupWaitBits+0x114>
		{
			portYIELD_WITHIN_API();
 10006d4:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 10006d8:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 10006dc:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 10006e0:	e0bff517 	ldw	r2,-44(fp)
 10006e4:	1080802c 	andhi	r2,r2,512
 10006e8:	1000151e 	bne	r2,zero,1000740 <xEventGroupWaitBits+0x17c>
		{
			taskENTER_CRITICAL();
 10006ec:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 10006f0:	e0bff717 	ldw	r2,-36(fp)
 10006f4:	10800017 	ldw	r2,0(r2)
 10006f8:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 10006fc:	e1bfff17 	ldw	r6,-4(fp)
 1000700:	e17ffd17 	ldw	r5,-12(fp)
 1000704:	e13ff517 	ldw	r4,-44(fp)
 1000708:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 100070c:	10000926 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
				{
					if( xClearOnExit != pdFALSE )
 1000710:	e0bffe17 	ldw	r2,-8(fp)
 1000714:	10000726 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000718:	e0bff717 	ldw	r2,-36(fp)
 100071c:	10c00017 	ldw	r3,0(r2)
 1000720:	e0bffd17 	ldw	r2,-12(fp)
 1000724:	0084303a 	nor	r2,zero,r2
 1000728:	1886703a 	and	r3,r3,r2
 100072c:	e0bff717 	ldw	r2,-36(fp)
 1000730:	10c00015 	stw	r3,0(r2)
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 1000734:	00800044 	movi	r2,1
 1000738:	e0bff815 	stw	r2,-32(fp)
			}
			taskEXIT_CRITICAL();
 100073c:	10052c40 	call	10052c4 <vTaskExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000740:	e0fff517 	ldw	r3,-44(fp)
 1000744:	00804034 	movhi	r2,256
 1000748:	10bfffc4 	addi	r2,r2,-1
 100074c:	1884703a 	and	r2,r3,r2
 1000750:	e0bff515 	stw	r2,-44(fp)
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 1000754:	e0bff517 	ldw	r2,-44(fp)
}
 1000758:	e037883a 	mov	sp,fp
 100075c:	dfc00117 	ldw	ra,4(sp)
 1000760:	df000017 	ldw	fp,0(sp)
 1000764:	dec00204 	addi	sp,sp,8
 1000768:	f800283a 	ret

0100076c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 100076c:	defffa04 	addi	sp,sp,-24
 1000770:	dfc00515 	stw	ra,20(sp)
 1000774:	df000415 	stw	fp,16(sp)
 1000778:	df000404 	addi	fp,sp,16
 100077c:	e13ffe15 	stw	r4,-8(fp)
 1000780:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 1000784:	e0bffe17 	ldw	r2,-8(fp)
 1000788:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
 100078c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 1000790:	e0bffc17 	ldw	r2,-16(fp)
 1000794:	10800017 	ldw	r2,0(r2)
 1000798:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 100079c:	e0bffc17 	ldw	r2,-16(fp)
 10007a0:	10c00017 	ldw	r3,0(r2)
 10007a4:	e0bfff17 	ldw	r2,-4(fp)
 10007a8:	0084303a 	nor	r2,zero,r2
 10007ac:	1886703a 	and	r3,r3,r2
 10007b0:	e0bffc17 	ldw	r2,-16(fp)
 10007b4:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
 10007b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10007bc:	e0bffd17 	ldw	r2,-12(fp)
}
 10007c0:	e037883a 	mov	sp,fp
 10007c4:	dfc00117 	ldw	ra,4(sp)
 10007c8:	df000017 	ldw	fp,0(sp)
 10007cc:	dec00204 	addi	sp,sp,8
 10007d0:	f800283a 	ret

010007d4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 10007d4:	defffb04 	addi	sp,sp,-20
 10007d8:	df000415 	stw	fp,16(sp)
 10007dc:	df000404 	addi	fp,sp,16
 10007e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 10007e4:	e0bfff17 	ldw	r2,-4(fp)
 10007e8:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10007ec:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
 10007f0:	e0bffc17 	ldw	r2,-16(fp)
 10007f4:	10800017 	ldw	r2,0(r2)
 10007f8:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 10007fc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 1000800:	e037883a 	mov	sp,fp
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00104 	addi	sp,sp,4
 100080c:	f800283a 	ret

01000810 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 1000810:	defff304 	addi	sp,sp,-52
 1000814:	dfc00c15 	stw	ra,48(sp)
 1000818:	df000b15 	stw	fp,44(sp)
 100081c:	df000b04 	addi	fp,sp,44
 1000820:	e13ffe15 	stw	r4,-8(fp)
 1000824:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1000828:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = xEventGroup;
 100082c:	e0bffe17 	ldw	r2,-8(fp)
 1000830:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
 1000834:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
 1000838:	e0bff817 	ldw	r2,-32(fp)
 100083c:	10800104 	addi	r2,r2,4
 1000840:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000844:	e0bff917 	ldw	r2,-28(fp)
 1000848:	10800204 	addi	r2,r2,8
 100084c:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
 1000850:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 1000854:	e0bff917 	ldw	r2,-28(fp)
 1000858:	10800317 	ldw	r2,12(r2)
 100085c:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 1000860:	e0bff817 	ldw	r2,-32(fp)
 1000864:	10c00017 	ldw	r3,0(r2)
 1000868:	e0bfff17 	ldw	r2,-4(fp)
 100086c:	1886b03a 	or	r3,r3,r2
 1000870:	e0bff817 	ldw	r2,-32(fp)
 1000874:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000878:	00003306 	br	1000948 <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
 100087c:	e0bff517 	ldw	r2,-44(fp)
 1000880:	10800117 	ldw	r2,4(r2)
 1000884:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1000888:	e0bff517 	ldw	r2,-44(fp)
 100088c:	10800017 	ldw	r2,0(r2)
 1000890:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
 1000894:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1000898:	e0bffc17 	ldw	r2,-16(fp)
 100089c:	10bfc02c 	andhi	r2,r2,65280
 10008a0:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 10008a4:	e0fffc17 	ldw	r3,-16(fp)
 10008a8:	00804034 	movhi	r2,256
 10008ac:	10bfffc4 	addi	r2,r2,-1
 10008b0:	1884703a 	and	r2,r3,r2
 10008b4:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 10008b8:	e0bffd17 	ldw	r2,-12(fp)
 10008bc:	1081002c 	andhi	r2,r2,1024
 10008c0:	1000081e 	bne	r2,zero,10008e4 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 10008c4:	e0bff817 	ldw	r2,-32(fp)
 10008c8:	10c00017 	ldw	r3,0(r2)
 10008cc:	e0bffc17 	ldw	r2,-16(fp)
 10008d0:	1884703a 	and	r2,r3,r2
 10008d4:	10000b26 	beq	r2,zero,1000904 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
 10008d8:	00800044 	movi	r2,1
 10008dc:	e0bff715 	stw	r2,-36(fp)
 10008e0:	00000806 	br	1000904 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 10008e4:	e0bff817 	ldw	r2,-32(fp)
 10008e8:	10c00017 	ldw	r3,0(r2)
 10008ec:	e0bffc17 	ldw	r2,-16(fp)
 10008f0:	1886703a 	and	r3,r3,r2
 10008f4:	e0bffc17 	ldw	r2,-16(fp)
 10008f8:	1880021e 	bne	r3,r2,1000904 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 10008fc:	00800044 	movi	r2,1
 1000900:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 1000904:	e0bff717 	ldw	r2,-36(fp)
 1000908:	10000d26 	beq	r2,zero,1000940 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 100090c:	e0bffd17 	ldw	r2,-12(fp)
 1000910:	1080402c 	andhi	r2,r2,256
 1000914:	10000426 	beq	r2,zero,1000928 <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 1000918:	e0fff617 	ldw	r3,-40(fp)
 100091c:	e0bffc17 	ldw	r2,-16(fp)
 1000920:	1884b03a 	or	r2,r3,r2
 1000924:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 1000928:	e0bff817 	ldw	r2,-32(fp)
 100092c:	10800017 	ldw	r2,0(r2)
 1000930:	10808034 	orhi	r2,r2,512
 1000934:	100b883a 	mov	r5,r2
 1000938:	e13ff517 	ldw	r4,-44(fp)
 100093c:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 1000940:	e0bffb17 	ldw	r2,-20(fp)
 1000944:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000948:	e0fff517 	ldw	r3,-44(fp)
 100094c:	e0bffa17 	ldw	r2,-24(fp)
 1000950:	18bfca1e 	bne	r3,r2,100087c <__alt_data_end+0xff00087c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1000954:	e0bff817 	ldw	r2,-32(fp)
 1000958:	10c00017 	ldw	r3,0(r2)
 100095c:	e0bff617 	ldw	r2,-40(fp)
 1000960:	0084303a 	nor	r2,zero,r2
 1000964:	1886703a 	and	r3,r3,r2
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
 1000970:	10043880 	call	1004388 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 1000974:	e0bff817 	ldw	r2,-32(fp)
 1000978:	10800017 	ldw	r2,0(r2)
}
 100097c:	e037883a 	mov	sp,fp
 1000980:	dfc00117 	ldw	ra,4(sp)
 1000984:	df000017 	ldw	fp,0(sp)
 1000988:	dec00204 	addi	sp,sp,8
 100098c:	f800283a 	ret

01000990 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 1000990:	defffb04 	addi	sp,sp,-20
 1000994:	dfc00415 	stw	ra,16(sp)
 1000998:	df000315 	stw	fp,12(sp)
 100099c:	df000304 	addi	fp,sp,12
 10009a0:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10009a4:	e0bfff17 	ldw	r2,-4(fp)
 10009a8:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 10009ac:	e0bffd17 	ldw	r2,-12(fp)
 10009b0:	10800104 	addi	r2,r2,4
 10009b4:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
 10009b8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009bc:	00000506 	br	10009d4 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 10009c0:	e0bffe17 	ldw	r2,-8(fp)
 10009c4:	10800317 	ldw	r2,12(r2)
 10009c8:	01408034 	movhi	r5,512
 10009cc:	1009883a 	mov	r4,r2
 10009d0:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009d4:	e0bffe17 	ldw	r2,-8(fp)
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	103ff81e 	bne	r2,zero,10009c0 <__alt_data_end+0xff0009c0>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 10009e0:	e13ffd17 	ldw	r4,-12(fp)
 10009e4:	10011840 	call	1001184 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 10009e8:	10043880 	call	1004388 <xTaskResumeAll>
}
 10009ec:	0001883a 	nop
 10009f0:	e037883a 	mov	sp,fp
 10009f4:	dfc00117 	ldw	ra,4(sp)
 10009f8:	df000017 	ldw	fp,0(sp)
 10009fc:	dec00204 	addi	sp,sp,8
 1000a00:	f800283a 	ret

01000a04 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 1000a04:	defffc04 	addi	sp,sp,-16
 1000a08:	dfc00315 	stw	ra,12(sp)
 1000a0c:	df000215 	stw	fp,8(sp)
 1000a10:	df000204 	addi	fp,sp,8
 1000a14:	e13ffe15 	stw	r4,-8(fp)
 1000a18:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a1c:	e17fff17 	ldw	r5,-4(fp)
 1000a20:	e13ffe17 	ldw	r4,-8(fp)
 1000a24:	10008100 	call	1000810 <xEventGroupSetBits>
}
 1000a28:	0001883a 	nop
 1000a2c:	e037883a 	mov	sp,fp
 1000a30:	dfc00117 	ldw	ra,4(sp)
 1000a34:	df000017 	ldw	fp,0(sp)
 1000a38:	dec00204 	addi	sp,sp,8
 1000a3c:	f800283a 	ret

01000a40 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 1000a40:	defffc04 	addi	sp,sp,-16
 1000a44:	dfc00315 	stw	ra,12(sp)
 1000a48:	df000215 	stw	fp,8(sp)
 1000a4c:	df000204 	addi	fp,sp,8
 1000a50:	e13ffe15 	stw	r4,-8(fp)
 1000a54:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a58:	e17fff17 	ldw	r5,-4(fp)
 1000a5c:	e13ffe17 	ldw	r4,-8(fp)
 1000a60:	100076c0 	call	100076c <xEventGroupClearBits>
}
 1000a64:	0001883a 	nop
 1000a68:	e037883a 	mov	sp,fp
 1000a6c:	dfc00117 	ldw	ra,4(sp)
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00204 	addi	sp,sp,8
 1000a78:	f800283a 	ret

01000a7c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 1000a7c:	defffb04 	addi	sp,sp,-20
 1000a80:	df000415 	stw	fp,16(sp)
 1000a84:	df000404 	addi	fp,sp,16
 1000a88:	e13ffd15 	stw	r4,-12(fp)
 1000a8c:	e17ffe15 	stw	r5,-8(fp)
 1000a90:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
 1000a94:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
 1000a98:	e0bfff17 	ldw	r2,-4(fp)
 1000a9c:	1000071e 	bne	r2,zero,1000abc <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1000aa0:	e0fffd17 	ldw	r3,-12(fp)
 1000aa4:	e0bffe17 	ldw	r2,-8(fp)
 1000aa8:	1884703a 	and	r2,r3,r2
 1000aac:	10000a26 	beq	r2,zero,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ab0:	00800044 	movi	r2,1
 1000ab4:	e0bffc15 	stw	r2,-16(fp)
 1000ab8:	00000706 	br	1000ad8 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000abc:	e0fffd17 	ldw	r3,-12(fp)
 1000ac0:	e0bffe17 	ldw	r2,-8(fp)
 1000ac4:	1886703a 	and	r3,r3,r2
 1000ac8:	e0bffe17 	ldw	r2,-8(fp)
 1000acc:	1880021e 	bne	r3,r2,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ad0:	00800044 	movi	r2,1
 1000ad4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 1000ad8:	e0bffc17 	ldw	r2,-16(fp)
}
 1000adc:	e037883a 	mov	sp,fp
 1000ae0:	df000017 	ldw	fp,0(sp)
 1000ae4:	dec00104 	addi	sp,sp,4
 1000ae8:	f800283a 	ret

01000aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1000aec:	defffe04 	addi	sp,sp,-8
 1000af0:	df000115 	stw	fp,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000afc:	e0bfff17 	ldw	r2,-4(fp)
 1000b00:	10c00204 	addi	r3,r2,8
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1000b0c:	e0bfff17 	ldw	r2,-4(fp)
 1000b10:	00ffffc4 	movi	r3,-1
 1000b14:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b18:	e0bfff17 	ldw	r2,-4(fp)
 1000b1c:	10c00204 	addi	r3,r2,8
 1000b20:	e0bfff17 	ldw	r2,-4(fp)
 1000b24:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b28:	e0bfff17 	ldw	r2,-4(fp)
 1000b2c:	10c00204 	addi	r3,r2,8
 1000b30:	e0bfff17 	ldw	r2,-4(fp)
 1000b34:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1000b38:	e0bfff17 	ldw	r2,-4(fp)
 1000b3c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 1000b40:	0001883a 	nop
 1000b44:	e037883a 	mov	sp,fp
 1000b48:	df000017 	ldw	fp,0(sp)
 1000b4c:	dec00104 	addi	sp,sp,4
 1000b50:	f800283a 	ret

01000b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 1000b54:	defffe04 	addi	sp,sp,-8
 1000b58:	df000115 	stw	fp,4(sp)
 1000b5c:	df000104 	addi	fp,sp,4
 1000b60:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1000b64:	e0bfff17 	ldw	r2,-4(fp)
 1000b68:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 1000b6c:	0001883a 	nop
 1000b70:	e037883a 	mov	sp,fp
 1000b74:	df000017 	ldw	fp,0(sp)
 1000b78:	dec00104 	addi	sp,sp,4
 1000b7c:	f800283a 	ret

01000b80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000b80:	defffc04 	addi	sp,sp,-16
 1000b84:	df000315 	stw	fp,12(sp)
 1000b88:	df000304 	addi	fp,sp,12
 1000b8c:	e13ffe15 	stw	r4,-8(fp)
 1000b90:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 1000b94:	e0bffe17 	ldw	r2,-8(fp)
 1000b98:	10800117 	ldw	r2,4(r2)
 1000b9c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1000ba0:	e0bfff17 	ldw	r2,-4(fp)
 1000ba4:	e0fffd17 	ldw	r3,-12(fp)
 1000ba8:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1000bac:	e0bffd17 	ldw	r2,-12(fp)
 1000bb0:	10c00217 	ldw	r3,8(r2)
 1000bb4:	e0bfff17 	ldw	r2,-4(fp)
 1000bb8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1000bbc:	e0bffd17 	ldw	r2,-12(fp)
 1000bc0:	10800217 	ldw	r2,8(r2)
 1000bc4:	e0ffff17 	ldw	r3,-4(fp)
 1000bc8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 1000bcc:	e0bffd17 	ldw	r2,-12(fp)
 1000bd0:	e0ffff17 	ldw	r3,-4(fp)
 1000bd4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1000bd8:	e0bfff17 	ldw	r2,-4(fp)
 1000bdc:	e0fffe17 	ldw	r3,-8(fp)
 1000be0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000be4:	e0bffe17 	ldw	r2,-8(fp)
 1000be8:	10800017 	ldw	r2,0(r2)
 1000bec:	10c00044 	addi	r3,r2,1
 1000bf0:	e0bffe17 	ldw	r2,-8(fp)
 1000bf4:	10c00015 	stw	r3,0(r2)
}
 1000bf8:	0001883a 	nop
 1000bfc:	e037883a 	mov	sp,fp
 1000c00:	df000017 	ldw	fp,0(sp)
 1000c04:	dec00104 	addi	sp,sp,4
 1000c08:	f800283a 	ret

01000c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000c0c:	defffb04 	addi	sp,sp,-20
 1000c10:	df000415 	stw	fp,16(sp)
 1000c14:	df000404 	addi	fp,sp,16
 1000c18:	e13ffe15 	stw	r4,-8(fp)
 1000c1c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1000c20:	e0bfff17 	ldw	r2,-4(fp)
 1000c24:	10800017 	ldw	r2,0(r2)
 1000c28:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1000c2c:	e0bffd17 	ldw	r2,-12(fp)
 1000c30:	10bfffd8 	cmpnei	r2,r2,-1
 1000c34:	1000041e 	bne	r2,zero,1000c48 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1000c38:	e0bffe17 	ldw	r2,-8(fp)
 1000c3c:	10800417 	ldw	r2,16(r2)
 1000c40:	e0bffc15 	stw	r2,-16(fp)
 1000c44:	00000c06 	br	1000c78 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1000c48:	e0bffe17 	ldw	r2,-8(fp)
 1000c4c:	10800204 	addi	r2,r2,8
 1000c50:	e0bffc15 	stw	r2,-16(fp)
 1000c54:	00000306 	br	1000c64 <vListInsert+0x58>
 1000c58:	e0bffc17 	ldw	r2,-16(fp)
 1000c5c:	10800117 	ldw	r2,4(r2)
 1000c60:	e0bffc15 	stw	r2,-16(fp)
 1000c64:	e0bffc17 	ldw	r2,-16(fp)
 1000c68:	10800117 	ldw	r2,4(r2)
 1000c6c:	10800017 	ldw	r2,0(r2)
 1000c70:	e0fffd17 	ldw	r3,-12(fp)
 1000c74:	18bff82e 	bgeu	r3,r2,1000c58 <__alt_data_end+0xff000c58>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1000c78:	e0bffc17 	ldw	r2,-16(fp)
 1000c7c:	10c00117 	ldw	r3,4(r2)
 1000c80:	e0bfff17 	ldw	r2,-4(fp)
 1000c84:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1000c88:	e0bfff17 	ldw	r2,-4(fp)
 1000c8c:	10800117 	ldw	r2,4(r2)
 1000c90:	e0ffff17 	ldw	r3,-4(fp)
 1000c94:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 1000c98:	e0bfff17 	ldw	r2,-4(fp)
 1000c9c:	e0fffc17 	ldw	r3,-16(fp)
 1000ca0:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 1000ca4:	e0bffc17 	ldw	r2,-16(fp)
 1000ca8:	e0ffff17 	ldw	r3,-4(fp)
 1000cac:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1000cb0:	e0bfff17 	ldw	r2,-4(fp)
 1000cb4:	e0fffe17 	ldw	r3,-8(fp)
 1000cb8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000cbc:	e0bffe17 	ldw	r2,-8(fp)
 1000cc0:	10800017 	ldw	r2,0(r2)
 1000cc4:	10c00044 	addi	r3,r2,1
 1000cc8:	e0bffe17 	ldw	r2,-8(fp)
 1000ccc:	10c00015 	stw	r3,0(r2)
}
 1000cd0:	0001883a 	nop
 1000cd4:	e037883a 	mov	sp,fp
 1000cd8:	df000017 	ldw	fp,0(sp)
 1000cdc:	dec00104 	addi	sp,sp,4
 1000ce0:	f800283a 	ret

01000ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1000ce4:	defffd04 	addi	sp,sp,-12
 1000ce8:	df000215 	stw	fp,8(sp)
 1000cec:	df000204 	addi	fp,sp,8
 1000cf0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1000cf4:	e0bfff17 	ldw	r2,-4(fp)
 1000cf8:	10800417 	ldw	r2,16(r2)
 1000cfc:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1000d00:	e0bfff17 	ldw	r2,-4(fp)
 1000d04:	10800117 	ldw	r2,4(r2)
 1000d08:	e0ffff17 	ldw	r3,-4(fp)
 1000d0c:	18c00217 	ldw	r3,8(r3)
 1000d10:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1000d14:	e0bfff17 	ldw	r2,-4(fp)
 1000d18:	10800217 	ldw	r2,8(r2)
 1000d1c:	e0ffff17 	ldw	r3,-4(fp)
 1000d20:	18c00117 	ldw	r3,4(r3)
 1000d24:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1000d28:	e0bffe17 	ldw	r2,-8(fp)
 1000d2c:	10c00117 	ldw	r3,4(r2)
 1000d30:	e0bfff17 	ldw	r2,-4(fp)
 1000d34:	1880041e 	bne	r3,r2,1000d48 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 1000d38:	e0bfff17 	ldw	r2,-4(fp)
 1000d3c:	10c00217 	ldw	r3,8(r2)
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 1000d48:	e0bfff17 	ldw	r2,-4(fp)
 1000d4c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 1000d50:	e0bffe17 	ldw	r2,-8(fp)
 1000d54:	10800017 	ldw	r2,0(r2)
 1000d58:	10ffffc4 	addi	r3,r2,-1
 1000d5c:	e0bffe17 	ldw	r2,-8(fp)
 1000d60:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 1000d64:	e0bffe17 	ldw	r2,-8(fp)
 1000d68:	10800017 	ldw	r2,0(r2)
}
 1000d6c:	e037883a 	mov	sp,fp
 1000d70:	df000017 	ldw	fp,0(sp)
 1000d74:	dec00104 	addi	sp,sp,4
 1000d78:	f800283a 	ret

01000d7c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 1000d7c:	defffe04 	addi	sp,sp,-8
 1000d80:	df000115 	stw	fp,4(sp)
 1000d84:	df000104 	addi	fp,sp,4
 1000d88:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	16800015 	stw	gp,0(r2)
}
 1000d94:	0001883a 	nop
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 1000da8:	defff904 	addi	sp,sp,-28
 1000dac:	dfc00615 	stw	ra,24(sp)
 1000db0:	df000515 	stw	fp,20(sp)
 1000db4:	df000504 	addi	fp,sp,20
 1000db8:	e13ffd15 	stw	r4,-12(fp)
 1000dbc:	e17ffe15 	stw	r5,-8(fp)
 1000dc0:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 1000dc4:	e0bffd17 	ldw	r2,-12(fp)
 1000dc8:	10bfff04 	addi	r2,r2,-4
 1000dcc:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 1000dd0:	e0bffc04 	addi	r2,fp,-16
 1000dd4:	1009883a 	mov	r4,r2
 1000dd8:	1000d7c0 	call	1000d7c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 1000ddc:	e0fffd17 	ldw	r3,-12(fp)
 1000de0:	00b7abb4 	movhi	r2,57006
 1000de4:	10afbbc4 	addi	r2,r2,-16657
 1000de8:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 1000dec:	e0bffd17 	ldw	r2,-12(fp)
 1000df0:	10bfff04 	addi	r2,r2,-4
 1000df4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 1000df8:	e0fffb17 	ldw	r3,-20(fp)
 1000dfc:	e0bffd17 	ldw	r2,-12(fp)
 1000e00:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e04:	e0bffd17 	ldw	r2,-12(fp)
 1000e08:	10bfff04 	addi	r2,r2,-4
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 1000e10:	e0fffc17 	ldw	r3,-16(fp)
 1000e14:	e0bffd17 	ldw	r2,-12(fp)
 1000e18:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 1000e1c:	e0bffd17 	ldw	r2,-12(fp)
 1000e20:	10bff704 	addi	r2,r2,-36
 1000e24:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 1000e28:	e0fffe17 	ldw	r3,-8(fp)
 1000e2c:	e0bffd17 	ldw	r2,-12(fp)
 1000e30:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e34:	e0bffd17 	ldw	r2,-12(fp)
 1000e38:	10bfff04 	addi	r2,r2,-4
 1000e3c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 1000e40:	e0bffd17 	ldw	r2,-12(fp)
 1000e44:	00c00044 	movi	r3,1
 1000e48:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 1000e4c:	e0bffd17 	ldw	r2,-12(fp)
 1000e50:	10bff404 	addi	r2,r2,-48
 1000e54:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 1000e58:	e0ffff17 	ldw	r3,-4(fp)
 1000e5c:	e0bffd17 	ldw	r2,-12(fp)
 1000e60:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 1000e64:	e0bffd17 	ldw	r2,-12(fp)
 1000e68:	10bffb04 	addi	r2,r2,-20
 1000e6c:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 1000e70:	e0bffd17 	ldw	r2,-12(fp)
}
 1000e74:	e037883a 	mov	sp,fp
 1000e78:	dfc00117 	ldw	ra,4(sp)
 1000e7c:	df000017 	ldw	fp,0(sp)
 1000e80:	dec00204 	addi	sp,sp,8
 1000e84:	f800283a 	ret

01000e88 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 1000e88:	defffe04 	addi	sp,sp,-8
 1000e8c:	dfc00115 	stw	ra,4(sp)
 1000e90:	df000015 	stw	fp,0(sp)
 1000e94:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 1000e98:	1000ee00 	call	1000ee0 <prvSetupTimerInterrupt>
 1000e9c:	00804034 	movhi	r2,256
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 1000ea0:	10804b04 	addi	r2,r2,300
 1000ea4:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 1000ea8:	0005883a 	mov	r2,zero
}
 1000eac:	e037883a 	mov	sp,fp
 1000eb0:	dfc00117 	ldw	ra,4(sp)
 1000eb4:	df000017 	ldw	fp,0(sp)
 1000eb8:	dec00204 	addi	sp,sp,8
 1000ebc:	f800283a 	ret

01000ec0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1000ec0:	deffff04 	addi	sp,sp,-4
 1000ec4:	df000015 	stw	fp,0(sp)
 1000ec8:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 1000ecc:	0001883a 	nop
 1000ed0:	e037883a 	mov	sp,fp
 1000ed4:	df000017 	ldw	fp,0(sp)
 1000ed8:	dec00104 	addi	sp,sp,4
 1000edc:	f800283a 	ret

01000ee0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 1000ee0:	defffe04 	addi	sp,sp,-8
 1000ee4:	dfc00115 	stw	ra,4(sp)
 1000ee8:	df000015 	stw	fp,0(sp)
 1000eec:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
 1000ef0:	01804034 	movhi	r6,256
 1000ef4:	3183da04 	addi	r6,r6,3944
 1000ef8:	000b883a 	mov	r5,zero
 1000efc:	01000044 	movi	r4,1
 1000f00:	10225540 	call	1022554 <alt_irq_register>
 1000f04:	10bffa98 	cmpnei	r2,r2,-22
 1000f08:	1000021e 	bne	r2,zero,1000f14 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 1000f0c:	003da03a 	break	0
 1000f10:	00000c06 	br	1000f44 <prvSetupTimerInterrupt+0x64>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 1000f14:	00c00204 	movi	r3,8
 1000f18:	00800904 	movi	r2,36
 1000f1c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 1000f20:	00f0d414 	movui	r3,50000
 1000f24:	00800a04 	movi	r2,40
 1000f28:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 1000f2c:	0007883a 	mov	r3,zero
 1000f30:	00800b04 	movi	r2,44
 1000f34:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 1000f38:	00c001c4 	movi	r3,7
 1000f3c:	00800904 	movi	r2,36
 1000f40:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f44:	00ffff84 	movi	r3,-2
 1000f48:	00800804 	movi	r2,32
 1000f4c:	10c00035 	stwio	r3,0(r2)
}
 1000f50:	0001883a 	nop
 1000f54:	e037883a 	mov	sp,fp
 1000f58:	dfc00117 	ldw	ra,4(sp)
 1000f5c:	df000017 	ldw	fp,0(sp)
 1000f60:	dec00204 	addi	sp,sp,8
 1000f64:	f800283a 	ret

01000f68 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 1000f68:	defffc04 	addi	sp,sp,-16
 1000f6c:	dfc00315 	stw	ra,12(sp)
 1000f70:	df000215 	stw	fp,8(sp)
 1000f74:	df000204 	addi	fp,sp,8
 1000f78:	e13ffe15 	stw	r4,-8(fp)
 1000f7c:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 1000f80:	10045940 	call	1004594 <xTaskIncrementTick>
 1000f84:	10000126 	beq	r2,zero,1000f8c <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 1000f88:	10047440 	call	1004744 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f8c:	00ffff84 	movi	r3,-2
 1000f90:	00800804 	movi	r2,32
 1000f94:	10c00035 	stwio	r3,0(r2)
}
 1000f98:	0001883a 	nop
 1000f9c:	e037883a 	mov	sp,fp
 1000fa0:	dfc00117 	ldw	ra,4(sp)
 1000fa4:	df000017 	ldw	fp,0(sp)
 1000fa8:	dec00204 	addi	sp,sp,8
 1000fac:	f800283a 	ret

01000fb0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 1000fb0:	defff704 	addi	sp,sp,-36
 1000fb4:	dfc00815 	stw	ra,32(sp)
 1000fb8:	df000715 	stw	fp,28(sp)
 1000fbc:	df000704 	addi	fp,sp,28
 1000fc0:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 1000fc4:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 1000fc8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 1000fcc:	d0a71817 	ldw	r2,-25504(gp)
 1000fd0:	1000031e 	bne	r2,zero,1000fe0 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 1000fd4:	10012900 	call	1001290 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 1000fd8:	00800044 	movi	r2,1
 1000fdc:	d0a71815 	stw	r2,-25504(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 1000fe0:	e0bfff17 	ldw	r2,-4(fp)
 1000fe4:	10000d26 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 1000fe8:	00800204 	movi	r2,8
 1000fec:	10bfffcc 	andi	r2,r2,65535
 1000ff0:	e0ffff17 	ldw	r3,-4(fp)
 1000ff4:	1885883a 	add	r2,r3,r2
 1000ff8:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 1000ffc:	e0bfff17 	ldw	r2,-4(fp)
 1001000:	108000cc 	andi	r2,r2,3
 1001004:	10000526 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 1001008:	e0ffff17 	ldw	r3,-4(fp)
 100100c:	00bfff04 	movi	r2,-4
 1001010:	1884703a 	and	r2,r3,r2
 1001014:	10800104 	addi	r2,r2,4
 1001018:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 100101c:	e0bfff17 	ldw	r2,-4(fp)
 1001020:	10005126 	beq	r2,zero,1001168 <pvPortMalloc+0x1b8>
 1001024:	e0ffff17 	ldw	r3,-4(fp)
 1001028:	00802034 	movhi	r2,128
 100102c:	10bffec4 	addi	r2,r2,-5
 1001030:	10c04d36 	bltu	r2,r3,1001168 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 1001034:	d0a71404 	addi	r2,gp,-25520
 1001038:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 100103c:	d0a71417 	ldw	r2,-25520(gp)
 1001040:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 1001044:	00000506 	br	100105c <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 1001048:	e0bff917 	ldw	r2,-28(fp)
 100104c:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 1001050:	e0bff917 	ldw	r2,-28(fp)
 1001054:	10800017 	ldw	r2,0(r2)
 1001058:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 100105c:	e0bff917 	ldw	r2,-28(fp)
 1001060:	10c00117 	ldw	r3,4(r2)
 1001064:	e0bfff17 	ldw	r2,-4(fp)
 1001068:	1880032e 	bgeu	r3,r2,1001078 <pvPortMalloc+0xc8>
 100106c:	e0bff917 	ldw	r2,-28(fp)
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	103ff41e 	bne	r2,zero,1001048 <__alt_data_end+0xff001048>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 1001078:	e0fff917 	ldw	r3,-28(fp)
 100107c:	d0a71604 	addi	r2,gp,-25512
 1001080:	18803926 	beq	r3,r2,1001168 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 1001084:	e0bffa17 	ldw	r2,-24(fp)
 1001088:	10c00017 	ldw	r3,0(r2)
 100108c:	00800204 	movi	r2,8
 1001090:	10bfffcc 	andi	r2,r2,65535
 1001094:	1885883a 	add	r2,r3,r2
 1001098:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 100109c:	e0bff917 	ldw	r2,-28(fp)
 10010a0:	10c00017 	ldw	r3,0(r2)
 10010a4:	e0bffa17 	ldw	r2,-24(fp)
 10010a8:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 10010ac:	e0bff917 	ldw	r2,-28(fp)
 10010b0:	10c00117 	ldw	r3,4(r2)
 10010b4:	e0bfff17 	ldw	r2,-4(fp)
 10010b8:	1887c83a 	sub	r3,r3,r2
 10010bc:	00800204 	movi	r2,8
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1085883a 	add	r2,r2,r2
 10010c8:	10c0222e 	bgeu	r2,r3,1001154 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 10010cc:	e0fff917 	ldw	r3,-28(fp)
 10010d0:	e0bfff17 	ldw	r2,-4(fp)
 10010d4:	1885883a 	add	r2,r3,r2
 10010d8:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 10010dc:	e0bff917 	ldw	r2,-28(fp)
 10010e0:	10c00117 	ldw	r3,4(r2)
 10010e4:	e0bfff17 	ldw	r2,-4(fp)
 10010e8:	1887c83a 	sub	r3,r3,r2
 10010ec:	e0bffd17 	ldw	r2,-12(fp)
 10010f0:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 10010f4:	e0bff917 	ldw	r2,-28(fp)
 10010f8:	e0ffff17 	ldw	r3,-4(fp)
 10010fc:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 1001100:	e0bffd17 	ldw	r2,-12(fp)
 1001104:	10800117 	ldw	r2,4(r2)
 1001108:	e0bffe15 	stw	r2,-8(fp)
 100110c:	d0a71404 	addi	r2,gp,-25520
 1001110:	e0bffc15 	stw	r2,-16(fp)
 1001114:	00000306 	br	1001124 <pvPortMalloc+0x174>
 1001118:	e0bffc17 	ldw	r2,-16(fp)
 100111c:	10800017 	ldw	r2,0(r2)
 1001120:	e0bffc15 	stw	r2,-16(fp)
 1001124:	e0bffc17 	ldw	r2,-16(fp)
 1001128:	10800017 	ldw	r2,0(r2)
 100112c:	10c00117 	ldw	r3,4(r2)
 1001130:	e0bffe17 	ldw	r2,-8(fp)
 1001134:	18bff836 	bltu	r3,r2,1001118 <__alt_data_end+0xff001118>
 1001138:	e0bffc17 	ldw	r2,-16(fp)
 100113c:	10c00017 	ldw	r3,0(r2)
 1001140:	e0bffd17 	ldw	r2,-12(fp)
 1001144:	10c00015 	stw	r3,0(r2)
 1001148:	e0bffc17 	ldw	r2,-16(fp)
 100114c:	e0fffd17 	ldw	r3,-12(fp)
 1001150:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 1001154:	d0e00117 	ldw	r3,-32764(gp)
 1001158:	e0bff917 	ldw	r2,-28(fp)
 100115c:	10800117 	ldw	r2,4(r2)
 1001160:	1885c83a 	sub	r2,r3,r2
 1001164:	d0a00115 	stw	r2,-32764(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1001168:	10043880 	call	1004388 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 100116c:	e0bffb17 	ldw	r2,-20(fp)
}
 1001170:	e037883a 	mov	sp,fp
 1001174:	dfc00117 	ldw	ra,4(sp)
 1001178:	df000017 	ldw	fp,0(sp)
 100117c:	dec00204 	addi	sp,sp,8
 1001180:	f800283a 	ret

01001184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1001184:	defff904 	addi	sp,sp,-28
 1001188:	dfc00615 	stw	ra,24(sp)
 100118c:	df000515 	stw	fp,20(sp)
 1001190:	df000504 	addi	fp,sp,20
 1001194:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 1001198:	e0bfff17 	ldw	r2,-4(fp)
 100119c:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10002426 	beq	r2,zero,1001238 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 10011a8:	00800204 	movi	r2,8
 10011ac:	10bfffcc 	andi	r2,r2,65535
 10011b0:	0085c83a 	sub	r2,zero,r2
 10011b4:	e0fffc17 	ldw	r3,-16(fp)
 10011b8:	1885883a 	add	r2,r3,r2
 10011bc:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 10011c0:	e0bffc17 	ldw	r2,-16(fp)
 10011c4:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 10011c8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 10011cc:	e0bffd17 	ldw	r2,-12(fp)
 10011d0:	10800117 	ldw	r2,4(r2)
 10011d4:	e0bffe15 	stw	r2,-8(fp)
 10011d8:	d0a71404 	addi	r2,gp,-25520
 10011dc:	e0bffb15 	stw	r2,-20(fp)
 10011e0:	00000306 	br	10011f0 <vPortFree+0x6c>
 10011e4:	e0bffb17 	ldw	r2,-20(fp)
 10011e8:	10800017 	ldw	r2,0(r2)
 10011ec:	e0bffb15 	stw	r2,-20(fp)
 10011f0:	e0bffb17 	ldw	r2,-20(fp)
 10011f4:	10800017 	ldw	r2,0(r2)
 10011f8:	10c00117 	ldw	r3,4(r2)
 10011fc:	e0bffe17 	ldw	r2,-8(fp)
 1001200:	18bff836 	bltu	r3,r2,10011e4 <__alt_data_end+0xff0011e4>
 1001204:	e0bffb17 	ldw	r2,-20(fp)
 1001208:	10c00017 	ldw	r3,0(r2)
 100120c:	e0bffd17 	ldw	r2,-12(fp)
 1001210:	10c00015 	stw	r3,0(r2)
 1001214:	e0bffb17 	ldw	r2,-20(fp)
 1001218:	e0fffd17 	ldw	r3,-12(fp)
 100121c:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 1001220:	e0bffd17 	ldw	r2,-12(fp)
 1001224:	10c00117 	ldw	r3,4(r2)
 1001228:	d0a00117 	ldw	r2,-32764(gp)
 100122c:	1885883a 	add	r2,r3,r2
 1001230:	d0a00115 	stw	r2,-32764(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 1001234:	10043880 	call	1004388 <xTaskResumeAll>
	}
}
 1001238:	0001883a 	nop
 100123c:	e037883a 	mov	sp,fp
 1001240:	dfc00117 	ldw	ra,4(sp)
 1001244:	df000017 	ldw	fp,0(sp)
 1001248:	dec00204 	addi	sp,sp,8
 100124c:	f800283a 	ret

01001250 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 1001250:	deffff04 	addi	sp,sp,-4
 1001254:	df000015 	stw	fp,0(sp)
 1001258:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 100125c:	d0a00117 	ldw	r2,-32764(gp)
}
 1001260:	e037883a 	mov	sp,fp
 1001264:	df000017 	ldw	fp,0(sp)
 1001268:	dec00104 	addi	sp,sp,4
 100126c:	f800283a 	ret

01001270 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 1001270:	deffff04 	addi	sp,sp,-4
 1001274:	df000015 	stw	fp,0(sp)
 1001278:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 100127c:	0001883a 	nop
 1001280:	e037883a 	mov	sp,fp
 1001284:	df000017 	ldw	fp,0(sp)
 1001288:	dec00104 	addi	sp,sp,4
 100128c:	f800283a 	ret

01001290 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 1001290:	defffd04 	addi	sp,sp,-12
 1001294:	df000215 	stw	fp,8(sp)
 1001298:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 100129c:	008040f4 	movhi	r2,259
 10012a0:	10a89f04 	addi	r2,r2,-23940
 10012a4:	00ffff04 	movi	r3,-4
 10012a8:	10c4703a 	and	r2,r2,r3
 10012ac:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 10012b0:	e0bffe17 	ldw	r2,-8(fp)
 10012b4:	d0a71415 	stw	r2,-25520(gp)
	xStart.xBlockSize = ( size_t ) 0;
 10012b8:	d0271515 	stw	zero,-25516(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 10012bc:	00802034 	movhi	r2,128
 10012c0:	10bfff04 	addi	r2,r2,-4
 10012c4:	d0a71715 	stw	r2,-25508(gp)
	xEnd.pxNextFreeBlock = NULL;
 10012c8:	d0271615 	stw	zero,-25512(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 10012d4:	e0ffff17 	ldw	r3,-4(fp)
 10012d8:	00802034 	movhi	r2,128
 10012dc:	10bfff04 	addi	r2,r2,-4
 10012e0:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 10012e4:	e0bfff17 	ldw	r2,-4(fp)
 10012e8:	d0e71604 	addi	r3,gp,-25512
 10012ec:	10c00015 	stw	r3,0(r2)
}
 10012f0:	0001883a 	nop
 10012f4:	e037883a 	mov	sp,fp
 10012f8:	df000017 	ldw	fp,0(sp)
 10012fc:	dec00104 	addi	sp,sp,4
 1001300:	f800283a 	ret

01001304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 1001304:	defffb04 	addi	sp,sp,-20
 1001308:	dfc00415 	stw	ra,16(sp)
 100130c:	df000315 	stw	fp,12(sp)
 1001310:	df000304 	addi	fp,sp,12
 1001314:	e13ffe15 	stw	r4,-8(fp)
 1001318:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 100131c:	e0bffe17 	ldw	r2,-8(fp)
 1001320:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1001324:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001328:	e0bffd17 	ldw	r2,-12(fp)
 100132c:	10c00017 	ldw	r3,0(r2)
 1001330:	e0bffd17 	ldw	r2,-12(fp)
 1001334:	11000f17 	ldw	r4,60(r2)
 1001338:	e0bffd17 	ldw	r2,-12(fp)
 100133c:	10801017 	ldw	r2,64(r2)
 1001340:	2085383a 	mul	r2,r4,r2
 1001344:	1887883a 	add	r3,r3,r2
 1001348:	e0bffd17 	ldw	r2,-12(fp)
 100134c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1001350:	e0bffd17 	ldw	r2,-12(fp)
 1001354:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 1001358:	e0bffd17 	ldw	r2,-12(fp)
 100135c:	10c00017 	ldw	r3,0(r2)
 1001360:	e0bffd17 	ldw	r2,-12(fp)
 1001364:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001368:	e0bffd17 	ldw	r2,-12(fp)
 100136c:	10c00017 	ldw	r3,0(r2)
 1001370:	e0bffd17 	ldw	r2,-12(fp)
 1001374:	10800f17 	ldw	r2,60(r2)
 1001378:	113fffc4 	addi	r4,r2,-1
 100137c:	e0bffd17 	ldw	r2,-12(fp)
 1001380:	10801017 	ldw	r2,64(r2)
 1001384:	2085383a 	mul	r2,r4,r2
 1001388:	1887883a 	add	r3,r3,r2
 100138c:	e0bffd17 	ldw	r2,-12(fp)
 1001390:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 1001394:	e0bffd17 	ldw	r2,-12(fp)
 1001398:	00ffffc4 	movi	r3,-1
 100139c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 10013a0:	e0bffd17 	ldw	r2,-12(fp)
 10013a4:	00ffffc4 	movi	r3,-1
 10013a8:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 10013ac:	e0bfff17 	ldw	r2,-4(fp)
 10013b0:	10000a1e 	bne	r2,zero,10013dc <xQueueGenericReset+0xd8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10013b4:	e0bffd17 	ldw	r2,-12(fp)
 10013b8:	10800417 	ldw	r2,16(r2)
 10013bc:	10000f26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10013c0:	e0bffd17 	ldw	r2,-12(fp)
 10013c4:	10800404 	addi	r2,r2,16
 10013c8:	1009883a 	mov	r4,r2
 10013cc:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10013d0:	10000a26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
 10013d4:	003b683a 	trap	0
 10013d8:	00000806 	br	10013fc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 10013dc:	e0bffd17 	ldw	r2,-12(fp)
 10013e0:	10800404 	addi	r2,r2,16
 10013e4:	1009883a 	mov	r4,r2
 10013e8:	1000aec0 	call	1000aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 10013ec:	e0bffd17 	ldw	r2,-12(fp)
 10013f0:	10800904 	addi	r2,r2,36
 10013f4:	1009883a 	mov	r4,r2
 10013f8:	1000aec0 	call	1000aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 10013fc:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 1001400:	00800044 	movi	r2,1
}
 1001404:	e037883a 	mov	sp,fp
 1001408:	dfc00117 	ldw	ra,4(sp)
 100140c:	df000017 	ldw	fp,0(sp)
 1001410:	dec00204 	addi	sp,sp,8
 1001414:	f800283a 	ret

01001418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 1001418:	defff704 	addi	sp,sp,-36
 100141c:	dfc00815 	stw	ra,32(sp)
 1001420:	df000715 	stw	fp,28(sp)
 1001424:	df000704 	addi	fp,sp,28
 1001428:	e13ffd15 	stw	r4,-12(fp)
 100142c:	e17ffe15 	stw	r5,-8(fp)
 1001430:	3005883a 	mov	r2,r6
 1001434:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 1001438:	e0bffe17 	ldw	r2,-8(fp)
 100143c:	1000021e 	bne	r2,zero,1001448 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 1001440:	e03ffa15 	stw	zero,-24(fp)
 1001444:	00000406 	br	1001458 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1001448:	e0fffd17 	ldw	r3,-12(fp)
 100144c:	e0bffe17 	ldw	r2,-8(fp)
 1001450:	1885383a 	mul	r2,r3,r2
 1001454:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 1001458:	e0bffa17 	ldw	r2,-24(fp)
 100145c:	10801204 	addi	r2,r2,72
 1001460:	1009883a 	mov	r4,r2
 1001464:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1001468:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 100146c:	e0bffb17 	ldw	r2,-20(fp)
 1001470:	10000d26 	beq	r2,zero,10014a8 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 1001474:	e0bffb17 	ldw	r2,-20(fp)
 1001478:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 100147c:	e0bffc17 	ldw	r2,-16(fp)
 1001480:	10801204 	addi	r2,r2,72
 1001484:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 1001488:	e0ffff03 	ldbu	r3,-4(fp)
 100148c:	e0bffb17 	ldw	r2,-20(fp)
 1001490:	d8800015 	stw	r2,0(sp)
 1001494:	180f883a 	mov	r7,r3
 1001498:	e1bffc17 	ldw	r6,-16(fp)
 100149c:	e17ffe17 	ldw	r5,-8(fp)
 10014a0:	e13ffd17 	ldw	r4,-12(fp)
 10014a4:	10014c00 	call	10014c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 10014a8:	e0bffb17 	ldw	r2,-20(fp)
	}
 10014ac:	e037883a 	mov	sp,fp
 10014b0:	dfc00117 	ldw	ra,4(sp)
 10014b4:	df000017 	ldw	fp,0(sp)
 10014b8:	dec00204 	addi	sp,sp,8
 10014bc:	f800283a 	ret

010014c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 10014c0:	defffa04 	addi	sp,sp,-24
 10014c4:	dfc00515 	stw	ra,20(sp)
 10014c8:	df000415 	stw	fp,16(sp)
 10014cc:	df000404 	addi	fp,sp,16
 10014d0:	e13ffc15 	stw	r4,-16(fp)
 10014d4:	e17ffd15 	stw	r5,-12(fp)
 10014d8:	e1bffe15 	stw	r6,-8(fp)
 10014dc:	3805883a 	mov	r2,r7
 10014e0:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 10014e4:	e0bffd17 	ldw	r2,-12(fp)
 10014e8:	1000041e 	bne	r2,zero,10014fc <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 10014ec:	e0800217 	ldw	r2,8(fp)
 10014f0:	e0c00217 	ldw	r3,8(fp)
 10014f4:	10c00015 	stw	r3,0(r2)
 10014f8:	00000306 	br	1001508 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 10014fc:	e0800217 	ldw	r2,8(fp)
 1001500:	e0fffe17 	ldw	r3,-8(fp)
 1001504:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 1001508:	e0800217 	ldw	r2,8(fp)
 100150c:	e0fffc17 	ldw	r3,-16(fp)
 1001510:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 1001514:	e0800217 	ldw	r2,8(fp)
 1001518:	e0fffd17 	ldw	r3,-12(fp)
 100151c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1001520:	01400044 	movi	r5,1
 1001524:	e1000217 	ldw	r4,8(fp)
 1001528:	10013040 	call	1001304 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 100152c:	0001883a 	nop
 1001530:	e037883a 	mov	sp,fp
 1001534:	dfc00117 	ldw	ra,4(sp)
 1001538:	df000017 	ldw	fp,0(sp)
 100153c:	dec00204 	addi	sp,sp,8
 1001540:	f800283a 	ret

01001544 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 1001544:	defffd04 	addi	sp,sp,-12
 1001548:	dfc00215 	stw	ra,8(sp)
 100154c:	df000115 	stw	fp,4(sp)
 1001550:	df000104 	addi	fp,sp,4
 1001554:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	10000b26 	beq	r2,zero,100158c <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 1001560:	e0bfff17 	ldw	r2,-4(fp)
 1001564:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1001568:	e0bfff17 	ldw	r2,-4(fp)
 100156c:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 1001570:	e0bfff17 	ldw	r2,-4(fp)
 1001574:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 1001578:	000f883a 	mov	r7,zero
 100157c:	000d883a 	mov	r6,zero
 1001580:	000b883a 	mov	r5,zero
 1001584:	e13fff17 	ldw	r4,-4(fp)
 1001588:	10017840 	call	1001784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 100158c:	0001883a 	nop
 1001590:	e037883a 	mov	sp,fp
 1001594:	dfc00117 	ldw	ra,4(sp)
 1001598:	df000017 	ldw	fp,0(sp)
 100159c:	dec00204 	addi	sp,sp,8
 10015a0:	f800283a 	ret

010015a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 10015a4:	defffa04 	addi	sp,sp,-24
 10015a8:	dfc00515 	stw	ra,20(sp)
 10015ac:	df000415 	stw	fp,16(sp)
 10015b0:	df000404 	addi	fp,sp,16
 10015b4:	2005883a 	mov	r2,r4
 10015b8:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 10015bc:	00800044 	movi	r2,1
 10015c0:	e0bffc15 	stw	r2,-16(fp)
 10015c4:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 10015c8:	e0bfff03 	ldbu	r2,-4(fp)
 10015cc:	100d883a 	mov	r6,r2
 10015d0:	e17ffd17 	ldw	r5,-12(fp)
 10015d4:	e13ffc17 	ldw	r4,-16(fp)
 10015d8:	10014180 	call	1001418 <xQueueGenericCreate>
 10015dc:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 10015e0:	e13ffe17 	ldw	r4,-8(fp)
 10015e4:	10015440 	call	1001544 <prvInitialiseMutex>

		return xNewQueue;
 10015e8:	e0bffe17 	ldw	r2,-8(fp)
	}
 10015ec:	e037883a 	mov	sp,fp
 10015f0:	dfc00117 	ldw	ra,4(sp)
 10015f4:	df000017 	ldw	fp,0(sp)
 10015f8:	dec00204 	addi	sp,sp,8
 10015fc:	f800283a 	ret

01001600 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 1001600:	defffa04 	addi	sp,sp,-24
 1001604:	dfc00515 	stw	ra,20(sp)
 1001608:	df000415 	stw	fp,16(sp)
 100160c:	dc000315 	stw	r16,12(sp)
 1001610:	df000404 	addi	fp,sp,16
 1001614:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1001618:	e0bffe17 	ldw	r2,-8(fp)
 100161c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 1001620:	e0bffd17 	ldw	r2,-12(fp)
 1001624:	14000217 	ldw	r16,8(r2)
 1001628:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 100162c:	8080101e 	bne	r16,r2,1001670 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 1001630:	e0bffd17 	ldw	r2,-12(fp)
 1001634:	10800317 	ldw	r2,12(r2)
 1001638:	10ffffc4 	addi	r3,r2,-1
 100163c:	e0bffd17 	ldw	r2,-12(fp)
 1001640:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 1001644:	e0bffd17 	ldw	r2,-12(fp)
 1001648:	10800317 	ldw	r2,12(r2)
 100164c:	1000051e 	bne	r2,zero,1001664 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 1001650:	000f883a 	mov	r7,zero
 1001654:	000d883a 	mov	r6,zero
 1001658:	000b883a 	mov	r5,zero
 100165c:	e13ffd17 	ldw	r4,-12(fp)
 1001660:	10017840 	call	1001784 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 1001664:	00800044 	movi	r2,1
 1001668:	e0bffc15 	stw	r2,-16(fp)
 100166c:	00000106 	br	1001674 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 1001670:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 1001674:	e0bffc17 	ldw	r2,-16(fp)
	}
 1001678:	e6ffff04 	addi	sp,fp,-4
 100167c:	dfc00217 	ldw	ra,8(sp)
 1001680:	df000117 	ldw	fp,4(sp)
 1001684:	dc000017 	ldw	r16,0(sp)
 1001688:	dec00304 	addi	sp,sp,12
 100168c:	f800283a 	ret

01001690 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 1001690:	defff904 	addi	sp,sp,-28
 1001694:	dfc00615 	stw	ra,24(sp)
 1001698:	df000515 	stw	fp,20(sp)
 100169c:	dc000415 	stw	r16,16(sp)
 10016a0:	df000504 	addi	fp,sp,20
 10016a4:	e13ffd15 	stw	r4,-12(fp)
 10016a8:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 10016ac:	e0bffd17 	ldw	r2,-12(fp)
 10016b0:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 10016b4:	e0bffc17 	ldw	r2,-16(fp)
 10016b8:	14000217 	ldw	r16,8(r2)
 10016bc:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 10016c0:	8080081e 	bne	r16,r2,10016e4 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016c4:	e0bffc17 	ldw	r2,-16(fp)
 10016c8:	10800317 	ldw	r2,12(r2)
 10016cc:	10c00044 	addi	r3,r2,1
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 10016d8:	00800044 	movi	r2,1
 10016dc:	e0bffb15 	stw	r2,-20(fp)
 10016e0:	00000b06 	br	1001710 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 10016e4:	e17ffe17 	ldw	r5,-8(fp)
 10016e8:	e13ffc17 	ldw	r4,-16(fp)
 10016ec:	1001ca40 	call	1001ca4 <xQueueSemaphoreTake>
 10016f0:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 10016f4:	e0bffb17 	ldw	r2,-20(fp)
 10016f8:	10000526 	beq	r2,zero,1001710 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016fc:	e0bffc17 	ldw	r2,-16(fp)
 1001700:	10800317 	ldw	r2,12(r2)
 1001704:	10c00044 	addi	r3,r2,1
 1001708:	e0bffc17 	ldw	r2,-16(fp)
 100170c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 1001710:	e0bffb17 	ldw	r2,-20(fp)
	}
 1001714:	e6ffff04 	addi	sp,fp,-4
 1001718:	dfc00217 	ldw	ra,8(sp)
 100171c:	df000117 	ldw	fp,4(sp)
 1001720:	dc000017 	ldw	r16,0(sp)
 1001724:	dec00304 	addi	sp,sp,12
 1001728:	f800283a 	ret

0100172c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 100172c:	defffb04 	addi	sp,sp,-20
 1001730:	dfc00415 	stw	ra,16(sp)
 1001734:	df000315 	stw	fp,12(sp)
 1001738:	df000304 	addi	fp,sp,12
 100173c:	e13ffe15 	stw	r4,-8(fp)
 1001740:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 1001744:	01800084 	movi	r6,2
 1001748:	000b883a 	mov	r5,zero
 100174c:	e13ffe17 	ldw	r4,-8(fp)
 1001750:	10014180 	call	1001418 <xQueueGenericCreate>
 1001754:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 1001758:	e0bffd17 	ldw	r2,-12(fp)
 100175c:	10000326 	beq	r2,zero,100176c <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1001760:	e0bffd17 	ldw	r2,-12(fp)
 1001764:	e0ffff17 	ldw	r3,-4(fp)
 1001768:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 100176c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1001770:	e037883a 	mov	sp,fp
 1001774:	dfc00117 	ldw	ra,4(sp)
 1001778:	df000017 	ldw	fp,0(sp)
 100177c:	dec00204 	addi	sp,sp,8
 1001780:	f800283a 	ret

01001784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 1001784:	defff504 	addi	sp,sp,-44
 1001788:	dfc00a15 	stw	ra,40(sp)
 100178c:	df000915 	stw	fp,36(sp)
 1001790:	df000904 	addi	fp,sp,36
 1001794:	e13ffc15 	stw	r4,-16(fp)
 1001798:	e17ffd15 	stw	r5,-12(fp)
 100179c:	e1bffe15 	stw	r6,-8(fp)
 10017a0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 10017a4:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 10017a8:	e0bffc17 	ldw	r2,-16(fp)
 10017ac:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 10017b0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 10017b4:	e0bff817 	ldw	r2,-32(fp)
 10017b8:	10c00e17 	ldw	r3,56(r2)
 10017bc:	e0bff817 	ldw	r2,-32(fp)
 10017c0:	10800f17 	ldw	r2,60(r2)
 10017c4:	18800336 	bltu	r3,r2,10017d4 <xQueueGenericSend+0x50>
 10017c8:	e0bfff17 	ldw	r2,-4(fp)
 10017cc:	10800098 	cmpnei	r2,r2,2
 10017d0:	1000151e 	bne	r2,zero,1001828 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 10017d4:	e1bfff17 	ldw	r6,-4(fp)
 10017d8:	e17ffd17 	ldw	r5,-12(fp)
 10017dc:	e13ff817 	ldw	r4,-32(fp)
 10017e0:	100231c0 	call	100231c <prvCopyDataToQueue>
 10017e4:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10017e8:	e0bff817 	ldw	r2,-32(fp)
 10017ec:	10800917 	ldw	r2,36(r2)
 10017f0:	10000726 	beq	r2,zero,1001810 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10017f4:	e0bff817 	ldw	r2,-32(fp)
 10017f8:	10800904 	addi	r2,r2,36
 10017fc:	1009883a 	mov	r4,r2
 1001800:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001804:	10000526 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 1001808:	003b683a 	trap	0
 100180c:	00000306 	br	100181c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 1001810:	e0bff917 	ldw	r2,-28(fp)
 1001814:	10000126 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 1001818:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 100181c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001820:	00800044 	movi	r2,1
 1001824:	00003f06 	br	1001924 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001828:	e0bffe17 	ldw	r2,-8(fp)
 100182c:	1000031e 	bne	r2,zero,100183c <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001830:	10052c40 	call	10052c4 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1001834:	0005883a 	mov	r2,zero
 1001838:	00003a06 	br	1001924 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 100183c:	e0bff717 	ldw	r2,-36(fp)
 1001840:	1000051e 	bne	r2,zero,1001858 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001844:	e0bffa04 	addi	r2,fp,-24
 1001848:	1009883a 	mov	r4,r2
 100184c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001850:	00800044 	movi	r2,1
 1001854:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001858:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 100185c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001860:	10052700 	call	1005270 <vTaskEnterCritical>
 1001864:	e0bff817 	ldw	r2,-32(fp)
 1001868:	10801103 	ldbu	r2,68(r2)
 100186c:	10803fcc 	andi	r2,r2,255
 1001870:	1080201c 	xori	r2,r2,128
 1001874:	10bfe004 	addi	r2,r2,-128
 1001878:	10bfffd8 	cmpnei	r2,r2,-1
 100187c:	1000021e 	bne	r2,zero,1001888 <xQueueGenericSend+0x104>
 1001880:	e0bff817 	ldw	r2,-32(fp)
 1001884:	10001105 	stb	zero,68(r2)
 1001888:	e0bff817 	ldw	r2,-32(fp)
 100188c:	10801143 	ldbu	r2,69(r2)
 1001890:	10803fcc 	andi	r2,r2,255
 1001894:	1080201c 	xori	r2,r2,128
 1001898:	10bfe004 	addi	r2,r2,-128
 100189c:	10bfffd8 	cmpnei	r2,r2,-1
 10018a0:	1000021e 	bne	r2,zero,10018ac <xQueueGenericSend+0x128>
 10018a4:	e0bff817 	ldw	r2,-32(fp)
 10018a8:	10001145 	stb	zero,69(r2)
 10018ac:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 10018b0:	e0fffe04 	addi	r3,fp,-8
 10018b4:	e0bffa04 	addi	r2,fp,-24
 10018b8:	180b883a 	mov	r5,r3
 10018bc:	1009883a 	mov	r4,r2
 10018c0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 10018c4:	1000131e 	bne	r2,zero,1001914 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 10018c8:	e13ff817 	ldw	r4,-32(fp)
 10018cc:	10026d00 	call	10026d0 <prvIsQueueFull>
 10018d0:	10000c26 	beq	r2,zero,1001904 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 10018d4:	e0bff817 	ldw	r2,-32(fp)
 10018d8:	10800404 	addi	r2,r2,16
 10018dc:	e0fffe17 	ldw	r3,-8(fp)
 10018e0:	180b883a 	mov	r5,r3
 10018e4:	1009883a 	mov	r4,r2
 10018e8:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 10018ec:	e13ff817 	ldw	r4,-32(fp)
 10018f0:	10025440 	call	1002544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 10018f4:	10043880 	call	1004388 <xTaskResumeAll>
 10018f8:	103fad1e 	bne	r2,zero,10017b0 <__alt_data_end+0xff0017b0>
				{
					portYIELD_WITHIN_API();
 10018fc:	003b683a 	trap	0
 1001900:	003fab06 	br	10017b0 <__alt_data_end+0xff0017b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1001904:	e13ff817 	ldw	r4,-32(fp)
 1001908:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100190c:	10043880 	call	1004388 <xTaskResumeAll>
 1001910:	003fa706 	br	10017b0 <__alt_data_end+0xff0017b0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 1001914:	e13ff817 	ldw	r4,-32(fp)
 1001918:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100191c:	10043880 	call	1004388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 1001920:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 1001924:	e037883a 	mov	sp,fp
 1001928:	dfc00117 	ldw	ra,4(sp)
 100192c:	df000017 	ldw	fp,0(sp)
 1001930:	dec00204 	addi	sp,sp,8
 1001934:	f800283a 	ret

01001938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 1001938:	defff604 	addi	sp,sp,-40
 100193c:	dfc00915 	stw	ra,36(sp)
 1001940:	df000815 	stw	fp,32(sp)
 1001944:	df000804 	addi	fp,sp,32
 1001948:	e13ffc15 	stw	r4,-16(fp)
 100194c:	e17ffd15 	stw	r5,-12(fp)
 1001950:	e1bffe15 	stw	r6,-8(fp)
 1001954:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001958:	e0bffc17 	ldw	r2,-16(fp)
 100195c:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001960:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1001964:	e0bff917 	ldw	r2,-28(fp)
 1001968:	10c00e17 	ldw	r3,56(r2)
 100196c:	e0bff917 	ldw	r2,-28(fp)
 1001970:	10800f17 	ldw	r2,60(r2)
 1001974:	18800336 	bltu	r3,r2,1001984 <xQueueGenericSendFromISR+0x4c>
 1001978:	e0bfff17 	ldw	r2,-4(fp)
 100197c:	10800098 	cmpnei	r2,r2,2
 1001980:	1000201e 	bne	r2,zero,1001a04 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001984:	e0bff917 	ldw	r2,-28(fp)
 1001988:	10801143 	ldbu	r2,69(r2)
 100198c:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1001990:	e1bfff17 	ldw	r6,-4(fp)
 1001994:	e17ffd17 	ldw	r5,-12(fp)
 1001998:	e13ff917 	ldw	r4,-28(fp)
 100199c:	100231c0 	call	100231c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 10019a0:	e0bffb07 	ldb	r2,-20(fp)
 10019a4:	10bfffd8 	cmpnei	r2,r2,-1
 10019a8:	10000e1e 	bne	r2,zero,10019e4 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10019ac:	e0bff917 	ldw	r2,-28(fp)
 10019b0:	10800917 	ldw	r2,36(r2)
 10019b4:	10001026 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10019b8:	e0bff917 	ldw	r2,-28(fp)
 10019bc:	10800904 	addi	r2,r2,36
 10019c0:	1009883a 	mov	r4,r2
 10019c4:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10019c8:	10000b26 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 10019cc:	e0bffe17 	ldw	r2,-8(fp)
 10019d0:	10000926 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 10019d4:	e0bffe17 	ldw	r2,-8(fp)
 10019d8:	00c00044 	movi	r3,1
 10019dc:	10c00015 	stw	r3,0(r2)
 10019e0:	00000506 	br	10019f8 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 10019e4:	e0bffb03 	ldbu	r2,-20(fp)
 10019e8:	10800044 	addi	r2,r2,1
 10019ec:	1007883a 	mov	r3,r2
 10019f0:	e0bff917 	ldw	r2,-28(fp)
 10019f4:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 10019f8:	00800044 	movi	r2,1
 10019fc:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 1001a00:	00000106 	br	1001a08 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001a04:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001a08:	e0bff817 	ldw	r2,-32(fp)
}
 1001a0c:	e037883a 	mov	sp,fp
 1001a10:	dfc00117 	ldw	ra,4(sp)
 1001a14:	df000017 	ldw	fp,0(sp)
 1001a18:	dec00204 	addi	sp,sp,8
 1001a1c:	f800283a 	ret

01001a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1001a20:	defff704 	addi	sp,sp,-36
 1001a24:	dfc00815 	stw	ra,32(sp)
 1001a28:	df000715 	stw	fp,28(sp)
 1001a2c:	df000704 	addi	fp,sp,28
 1001a30:	e13ffe15 	stw	r4,-8(fp)
 1001a34:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001a38:	e0bffe17 	ldw	r2,-8(fp)
 1001a3c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001a40:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001a44:	e0bffa17 	ldw	r2,-24(fp)
 1001a48:	10800e17 	ldw	r2,56(r2)
 1001a4c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 1001a50:	e0bffa17 	ldw	r2,-24(fp)
 1001a54:	10800f17 	ldw	r2,60(r2)
 1001a58:	e0fffc17 	ldw	r3,-16(fp)
 1001a5c:	1880202e 	bgeu	r3,r2,1001ae0 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001a60:	e0bffa17 	ldw	r2,-24(fp)
 1001a64:	10801143 	ldbu	r2,69(r2)
 1001a68:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1001a6c:	e0bffc17 	ldw	r2,-16(fp)
 1001a70:	10c00044 	addi	r3,r2,1
 1001a74:	e0bffa17 	ldw	r2,-24(fp)
 1001a78:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 1001a7c:	e0bffd07 	ldb	r2,-12(fp)
 1001a80:	10bfffd8 	cmpnei	r2,r2,-1
 1001a84:	10000e1e 	bne	r2,zero,1001ac0 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001a88:	e0bffa17 	ldw	r2,-24(fp)
 1001a8c:	10800917 	ldw	r2,36(r2)
 1001a90:	10001026 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001a94:	e0bffa17 	ldw	r2,-24(fp)
 1001a98:	10800904 	addi	r2,r2,36
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001aa4:	10000b26 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 1001aa8:	e0bfff17 	ldw	r2,-4(fp)
 1001aac:	10000926 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 1001ab0:	e0bfff17 	ldw	r2,-4(fp)
 1001ab4:	00c00044 	movi	r3,1
 1001ab8:	10c00015 	stw	r3,0(r2)
 1001abc:	00000506 	br	1001ad4 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1001ac0:	e0bffd03 	ldbu	r2,-12(fp)
 1001ac4:	10800044 	addi	r2,r2,1
 1001ac8:	1007883a 	mov	r3,r2
 1001acc:	e0bffa17 	ldw	r2,-24(fp)
 1001ad0:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 1001ad4:	00800044 	movi	r2,1
 1001ad8:	e0bff915 	stw	r2,-28(fp)
 1001adc:	00000106 	br	1001ae4 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001ae0:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001ae4:	e0bff917 	ldw	r2,-28(fp)
}
 1001ae8:	e037883a 	mov	sp,fp
 1001aec:	dfc00117 	ldw	ra,4(sp)
 1001af0:	df000017 	ldw	fp,0(sp)
 1001af4:	dec00204 	addi	sp,sp,8
 1001af8:	f800283a 	ret

01001afc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001afc:	defff604 	addi	sp,sp,-40
 1001b00:	dfc00915 	stw	ra,36(sp)
 1001b04:	df000815 	stw	fp,32(sp)
 1001b08:	df000804 	addi	fp,sp,32
 1001b0c:	e13ffd15 	stw	r4,-12(fp)
 1001b10:	e17ffe15 	stw	r5,-8(fp)
 1001b14:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001b18:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001b1c:	e0bffd17 	ldw	r2,-12(fp)
 1001b20:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001b24:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001b28:	e0bff917 	ldw	r2,-28(fp)
 1001b2c:	10800e17 	ldw	r2,56(r2)
 1001b30:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001b34:	e0bffa17 	ldw	r2,-24(fp)
 1001b38:	10001326 	beq	r2,zero,1001b88 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001b3c:	e17ffe17 	ldw	r5,-8(fp)
 1001b40:	e13ff917 	ldw	r4,-28(fp)
 1001b44:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1001b48:	e0bffa17 	ldw	r2,-24(fp)
 1001b4c:	10ffffc4 	addi	r3,r2,-1
 1001b50:	e0bff917 	ldw	r2,-28(fp)
 1001b54:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001b58:	e0bff917 	ldw	r2,-28(fp)
 1001b5c:	10800417 	ldw	r2,16(r2)
 1001b60:	10000626 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001b64:	e0bff917 	ldw	r2,-28(fp)
 1001b68:	10800404 	addi	r2,r2,16
 1001b6c:	1009883a 	mov	r4,r2
 1001b70:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001b74:	10000126 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001b78:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001b7c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001b80:	00800044 	movi	r2,1
 1001b84:	00004206 	br	1001c90 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001b88:	e0bfff17 	ldw	r2,-4(fp)
 1001b8c:	1000031e 	bne	r2,zero,1001b9c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001b90:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001b94:	0005883a 	mov	r2,zero
 1001b98:	00003d06 	br	1001c90 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001b9c:	e0bff817 	ldw	r2,-32(fp)
 1001ba0:	1000051e 	bne	r2,zero,1001bb8 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001ba4:	e0bffb04 	addi	r2,fp,-20
 1001ba8:	1009883a 	mov	r4,r2
 1001bac:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001bb0:	00800044 	movi	r2,1
 1001bb4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001bb8:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001bbc:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001bc0:	10052700 	call	1005270 <vTaskEnterCritical>
 1001bc4:	e0bff917 	ldw	r2,-28(fp)
 1001bc8:	10801103 	ldbu	r2,68(r2)
 1001bcc:	10803fcc 	andi	r2,r2,255
 1001bd0:	1080201c 	xori	r2,r2,128
 1001bd4:	10bfe004 	addi	r2,r2,-128
 1001bd8:	10bfffd8 	cmpnei	r2,r2,-1
 1001bdc:	1000021e 	bne	r2,zero,1001be8 <xQueueReceive+0xec>
 1001be0:	e0bff917 	ldw	r2,-28(fp)
 1001be4:	10001105 	stb	zero,68(r2)
 1001be8:	e0bff917 	ldw	r2,-28(fp)
 1001bec:	10801143 	ldbu	r2,69(r2)
 1001bf0:	10803fcc 	andi	r2,r2,255
 1001bf4:	1080201c 	xori	r2,r2,128
 1001bf8:	10bfe004 	addi	r2,r2,-128
 1001bfc:	10bfffd8 	cmpnei	r2,r2,-1
 1001c00:	1000021e 	bne	r2,zero,1001c0c <xQueueReceive+0x110>
 1001c04:	e0bff917 	ldw	r2,-28(fp)
 1001c08:	10001145 	stb	zero,69(r2)
 1001c0c:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001c10:	e0ffff04 	addi	r3,fp,-4
 1001c14:	e0bffb04 	addi	r2,fp,-20
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	1009883a 	mov	r4,r2
 1001c20:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001c24:	1000131e 	bne	r2,zero,1001c74 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c28:	e13ff917 	ldw	r4,-28(fp)
 1001c2c:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c30:	10000c26 	beq	r2,zero,1001c64 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001c34:	e0bff917 	ldw	r2,-28(fp)
 1001c38:	10800904 	addi	r2,r2,36
 1001c3c:	e0ffff17 	ldw	r3,-4(fp)
 1001c40:	180b883a 	mov	r5,r3
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001c4c:	e13ff917 	ldw	r4,-28(fp)
 1001c50:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001c54:	10043880 	call	1004388 <xTaskResumeAll>
 1001c58:	103fb21e 	bne	r2,zero,1001b24 <__alt_data_end+0xff001b24>
				{
					portYIELD_WITHIN_API();
 1001c5c:	003b683a 	trap	0
 1001c60:	003fb006 	br	1001b24 <__alt_data_end+0xff001b24>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 1001c64:	e13ff917 	ldw	r4,-28(fp)
 1001c68:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001c6c:	10043880 	call	1004388 <xTaskResumeAll>
 1001c70:	003fac06 	br	1001b24 <__alt_data_end+0xff001b24>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 1001c74:	e13ff917 	ldw	r4,-28(fp)
 1001c78:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001c7c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c80:	e13ff917 	ldw	r4,-28(fp)
 1001c84:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c88:	103fa626 	beq	r2,zero,1001b24 <__alt_data_end+0xff001b24>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001c8c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001c90:	e037883a 	mov	sp,fp
 1001c94:	dfc00117 	ldw	ra,4(sp)
 1001c98:	df000017 	ldw	fp,0(sp)
 1001c9c:	dec00204 	addi	sp,sp,8
 1001ca0:	f800283a 	ret

01001ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 1001ca4:	defff504 	addi	sp,sp,-44
 1001ca8:	dfc00a15 	stw	ra,40(sp)
 1001cac:	df000915 	stw	fp,36(sp)
 1001cb0:	df000904 	addi	fp,sp,36
 1001cb4:	e13ffe15 	stw	r4,-8(fp)
 1001cb8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001cbc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001cc0:	e0bffe17 	ldw	r2,-8(fp)
 1001cc4:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 1001cc8:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001ccc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1001cd0:	e0bff917 	ldw	r2,-28(fp)
 1001cd4:	10800e17 	ldw	r2,56(r2)
 1001cd8:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1001cdc:	e0bffa17 	ldw	r2,-24(fp)
 1001ce0:	10001726 	beq	r2,zero,1001d40 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1001ce4:	e0bffa17 	ldw	r2,-24(fp)
 1001ce8:	10ffffc4 	addi	r3,r2,-1
 1001cec:	e0bff917 	ldw	r2,-28(fp)
 1001cf0:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001cf4:	e0bff917 	ldw	r2,-28(fp)
 1001cf8:	10800017 	ldw	r2,0(r2)
 1001cfc:	1000041e 	bne	r2,zero,1001d10 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 1001d00:	10053680 	call	1005368 <pvTaskIncrementMutexHeldCount>
 1001d04:	1007883a 	mov	r3,r2
 1001d08:	e0bff917 	ldw	r2,-28(fp)
 1001d0c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001d10:	e0bff917 	ldw	r2,-28(fp)
 1001d14:	10800417 	ldw	r2,16(r2)
 1001d18:	10000626 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001d1c:	e0bff917 	ldw	r2,-28(fp)
 1001d20:	10800404 	addi	r2,r2,16
 1001d24:	1009883a 	mov	r4,r2
 1001d28:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001d2c:	10000126 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001d30:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001d34:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001d38:	00800044 	movi	r2,1
 1001d3c:	00005806 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001d40:	e0bfff17 	ldw	r2,-4(fp)
 1001d44:	1000031e 	bne	r2,zero,1001d54 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 1001d48:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001d4c:	0005883a 	mov	r2,zero
 1001d50:	00005306 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001d54:	e0bff717 	ldw	r2,-36(fp)
 1001d58:	1000051e 	bne	r2,zero,1001d70 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001d5c:	e0bffc04 	addi	r2,fp,-16
 1001d60:	1009883a 	mov	r4,r2
 1001d64:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001d68:	00800044 	movi	r2,1
 1001d6c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001d70:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001d74:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001d78:	10052700 	call	1005270 <vTaskEnterCritical>
 1001d7c:	e0bff917 	ldw	r2,-28(fp)
 1001d80:	10801103 	ldbu	r2,68(r2)
 1001d84:	10803fcc 	andi	r2,r2,255
 1001d88:	1080201c 	xori	r2,r2,128
 1001d8c:	10bfe004 	addi	r2,r2,-128
 1001d90:	10bfffd8 	cmpnei	r2,r2,-1
 1001d94:	1000021e 	bne	r2,zero,1001da0 <xQueueSemaphoreTake+0xfc>
 1001d98:	e0bff917 	ldw	r2,-28(fp)
 1001d9c:	10001105 	stb	zero,68(r2)
 1001da0:	e0bff917 	ldw	r2,-28(fp)
 1001da4:	10801143 	ldbu	r2,69(r2)
 1001da8:	10803fcc 	andi	r2,r2,255
 1001dac:	1080201c 	xori	r2,r2,128
 1001db0:	10bfe004 	addi	r2,r2,-128
 1001db4:	10bfffd8 	cmpnei	r2,r2,-1
 1001db8:	1000021e 	bne	r2,zero,1001dc4 <xQueueSemaphoreTake+0x120>
 1001dbc:	e0bff917 	ldw	r2,-28(fp)
 1001dc0:	10001145 	stb	zero,69(r2)
 1001dc4:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001dc8:	e0ffff04 	addi	r3,fp,-4
 1001dcc:	e0bffc04 	addi	r2,fp,-16
 1001dd0:	180b883a 	mov	r5,r3
 1001dd4:	1009883a 	mov	r4,r2
 1001dd8:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001ddc:	10001d1e 	bne	r2,zero,1001e54 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001de0:	e13ff917 	ldw	r4,-28(fp)
 1001de4:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001de8:	10001626 	beq	r2,zero,1001e44 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001dec:	e0bff917 	ldw	r2,-28(fp)
 1001df0:	10800017 	ldw	r2,0(r2)
 1001df4:	1000071e 	bne	r2,zero,1001e14 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 1001df8:	10052700 	call	1005270 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 1001dfc:	e0bff917 	ldw	r2,-28(fp)
 1001e00:	10800217 	ldw	r2,8(r2)
 1001e04:	1009883a 	mov	r4,r2
 1001e08:	1004ef40 	call	1004ef4 <xTaskPriorityInherit>
 1001e0c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 1001e10:	10052c40 	call	10052c4 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001e14:	e0bff917 	ldw	r2,-28(fp)
 1001e18:	10800904 	addi	r2,r2,36
 1001e1c:	e0ffff17 	ldw	r3,-4(fp)
 1001e20:	180b883a 	mov	r5,r3
 1001e24:	1009883a 	mov	r4,r2
 1001e28:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001e2c:	e13ff917 	ldw	r4,-28(fp)
 1001e30:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001e34:	10043880 	call	1004388 <xTaskResumeAll>
 1001e38:	103fa41e 	bne	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				{
					portYIELD_WITHIN_API();
 1001e3c:	003b683a 	trap	0
 1001e40:	003fa206 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 1001e44:	e13ff917 	ldw	r4,-28(fp)
 1001e48:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001e4c:	10043880 	call	1004388 <xTaskResumeAll>
 1001e50:	003f9e06 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 1001e54:	e13ff917 	ldw	r4,-28(fp)
 1001e58:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001e5c:	10043880 	call	1004388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001e60:	e13ff917 	ldw	r4,-28(fp)
 1001e64:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001e68:	103f9826 	beq	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 1001e6c:	e0bff817 	ldw	r2,-32(fp)
 1001e70:	10000a26 	beq	r2,zero,1001e9c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 1001e74:	10052700 	call	1005270 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1001e78:	e13ff917 	ldw	r4,-28(fp)
 1001e7c:	10022cc0 	call	10022cc <prvGetDisinheritPriorityAfterTimeout>
 1001e80:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 1001e84:	e0bff917 	ldw	r2,-28(fp)
 1001e88:	10800217 	ldw	r2,8(r2)
 1001e8c:	e17ffb17 	ldw	r5,-20(fp)
 1001e90:	1009883a 	mov	r4,r2
 1001e94:	10051300 	call	1005130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 1001e98:	10052c40 	call	10052c4 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001e9c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001ea0:	e037883a 	mov	sp,fp
 1001ea4:	dfc00117 	ldw	ra,4(sp)
 1001ea8:	df000017 	ldw	fp,0(sp)
 1001eac:	dec00204 	addi	sp,sp,8
 1001eb0:	f800283a 	ret

01001eb4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001eb4:	defff504 	addi	sp,sp,-44
 1001eb8:	dfc00a15 	stw	ra,40(sp)
 1001ebc:	df000915 	stw	fp,36(sp)
 1001ec0:	df000904 	addi	fp,sp,36
 1001ec4:	e13ffd15 	stw	r4,-12(fp)
 1001ec8:	e17ffe15 	stw	r5,-8(fp)
 1001ecc:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001ed0:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1001ed4:	e0bffd17 	ldw	r2,-12(fp)
 1001ed8:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001edc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001ee0:	e0bff817 	ldw	r2,-32(fp)
 1001ee4:	10800e17 	ldw	r2,56(r2)
 1001ee8:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001eec:	e0bff917 	ldw	r2,-28(fp)
 1001ef0:	10001526 	beq	r2,zero,1001f48 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1001ef4:	e0bff817 	ldw	r2,-32(fp)
 1001ef8:	10800317 	ldw	r2,12(r2)
 1001efc:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001f00:	e17ffe17 	ldw	r5,-8(fp)
 1001f04:	e13ff817 	ldw	r4,-32(fp)
 1001f08:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1001f0c:	e0bff817 	ldw	r2,-32(fp)
 1001f10:	e0fffa17 	ldw	r3,-24(fp)
 1001f14:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001f18:	e0bff817 	ldw	r2,-32(fp)
 1001f1c:	10800917 	ldw	r2,36(r2)
 1001f20:	10000626 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001f24:	e0bff817 	ldw	r2,-32(fp)
 1001f28:	10800904 	addi	r2,r2,36
 1001f2c:	1009883a 	mov	r4,r2
 1001f30:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001f34:	10000126 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 1001f38:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001f3c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001f40:	00800044 	movi	r2,1
 1001f44:	00004206 	br	1002050 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001f48:	e0bfff17 	ldw	r2,-4(fp)
 1001f4c:	1000031e 	bne	r2,zero,1001f5c <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001f50:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001f54:	0005883a 	mov	r2,zero
 1001f58:	00003d06 	br	1002050 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001f5c:	e0bff717 	ldw	r2,-36(fp)
 1001f60:	1000051e 	bne	r2,zero,1001f78 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001f64:	e0bffb04 	addi	r2,fp,-20
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001f70:	00800044 	movi	r2,1
 1001f74:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001f78:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001f7c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001f80:	10052700 	call	1005270 <vTaskEnterCritical>
 1001f84:	e0bff817 	ldw	r2,-32(fp)
 1001f88:	10801103 	ldbu	r2,68(r2)
 1001f8c:	10803fcc 	andi	r2,r2,255
 1001f90:	1080201c 	xori	r2,r2,128
 1001f94:	10bfe004 	addi	r2,r2,-128
 1001f98:	10bfffd8 	cmpnei	r2,r2,-1
 1001f9c:	1000021e 	bne	r2,zero,1001fa8 <xQueuePeek+0xf4>
 1001fa0:	e0bff817 	ldw	r2,-32(fp)
 1001fa4:	10001105 	stb	zero,68(r2)
 1001fa8:	e0bff817 	ldw	r2,-32(fp)
 1001fac:	10801143 	ldbu	r2,69(r2)
 1001fb0:	10803fcc 	andi	r2,r2,255
 1001fb4:	1080201c 	xori	r2,r2,128
 1001fb8:	10bfe004 	addi	r2,r2,-128
 1001fbc:	10bfffd8 	cmpnei	r2,r2,-1
 1001fc0:	1000021e 	bne	r2,zero,1001fcc <xQueuePeek+0x118>
 1001fc4:	e0bff817 	ldw	r2,-32(fp)
 1001fc8:	10001145 	stb	zero,69(r2)
 1001fcc:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001fd0:	e0ffff04 	addi	r3,fp,-4
 1001fd4:	e0bffb04 	addi	r2,fp,-20
 1001fd8:	180b883a 	mov	r5,r3
 1001fdc:	1009883a 	mov	r4,r2
 1001fe0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001fe4:	1000131e 	bne	r2,zero,1002034 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001fe8:	e13ff817 	ldw	r4,-32(fp)
 1001fec:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001ff0:	10000c26 	beq	r2,zero,1002024 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001ff4:	e0bff817 	ldw	r2,-32(fp)
 1001ff8:	10800904 	addi	r2,r2,36
 1001ffc:	e0ffff17 	ldw	r3,-4(fp)
 1002000:	180b883a 	mov	r5,r3
 1002004:	1009883a 	mov	r4,r2
 1002008:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 100200c:	e13ff817 	ldw	r4,-32(fp)
 1002010:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1002014:	10043880 	call	1004388 <xTaskResumeAll>
 1002018:	103fb01e 	bne	r2,zero,1001edc <__alt_data_end+0xff001edc>
				{
					portYIELD_WITHIN_API();
 100201c:	003b683a 	trap	0
 1002020:	003fae06 	br	1001edc <__alt_data_end+0xff001edc>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 1002024:	e13ff817 	ldw	r4,-32(fp)
 1002028:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100202c:	10043880 	call	1004388 <xTaskResumeAll>
 1002030:	003faa06 	br	1001edc <__alt_data_end+0xff001edc>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 1002034:	e13ff817 	ldw	r4,-32(fp)
 1002038:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100203c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1002040:	e13ff817 	ldw	r4,-32(fp)
 1002044:	10026380 	call	1002638 <prvIsQueueEmpty>
 1002048:	103fa426 	beq	r2,zero,1001edc <__alt_data_end+0xff001edc>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 100204c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1002050:	e037883a 	mov	sp,fp
 1002054:	dfc00117 	ldw	ra,4(sp)
 1002058:	df000017 	ldw	fp,0(sp)
 100205c:	dec00204 	addi	sp,sp,8
 1002060:	f800283a 	ret

01002064 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002064:	defff604 	addi	sp,sp,-40
 1002068:	dfc00915 	stw	ra,36(sp)
 100206c:	df000815 	stw	fp,32(sp)
 1002070:	df000804 	addi	fp,sp,32
 1002074:	e13ffd15 	stw	r4,-12(fp)
 1002078:	e17ffe15 	stw	r5,-8(fp)
 100207c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1002080:	e0bffd17 	ldw	r2,-12(fp)
 1002084:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002088:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100208c:	e0bff917 	ldw	r2,-28(fp)
 1002090:	10800e17 	ldw	r2,56(r2)
 1002094:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1002098:	e0bffb17 	ldw	r2,-20(fp)
 100209c:	10002326 	beq	r2,zero,100212c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 10020a0:	e0bff917 	ldw	r2,-28(fp)
 10020a4:	10801103 	ldbu	r2,68(r2)
 10020a8:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 10020ac:	e17ffe17 	ldw	r5,-8(fp)
 10020b0:	e13ff917 	ldw	r4,-28(fp)
 10020b4:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 10020b8:	e0bffb17 	ldw	r2,-20(fp)
 10020bc:	10ffffc4 	addi	r3,r2,-1
 10020c0:	e0bff917 	ldw	r2,-28(fp)
 10020c4:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 10020c8:	e0bffc07 	ldb	r2,-16(fp)
 10020cc:	10bfffd8 	cmpnei	r2,r2,-1
 10020d0:	10000e1e 	bne	r2,zero,100210c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10020d4:	e0bff917 	ldw	r2,-28(fp)
 10020d8:	10800417 	ldw	r2,16(r2)
 10020dc:	10001026 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10020e0:	e0bff917 	ldw	r2,-28(fp)
 10020e4:	10800404 	addi	r2,r2,16
 10020e8:	1009883a 	mov	r4,r2
 10020ec:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10020f0:	10000b26 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 10020f4:	e0bfff17 	ldw	r2,-4(fp)
 10020f8:	10000926 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 10020fc:	e0bfff17 	ldw	r2,-4(fp)
 1002100:	00c00044 	movi	r3,1
 1002104:	10c00015 	stw	r3,0(r2)
 1002108:	00000506 	br	1002120 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 100210c:	e0bffc03 	ldbu	r2,-16(fp)
 1002110:	10800044 	addi	r2,r2,1
 1002114:	1007883a 	mov	r3,r2
 1002118:	e0bff917 	ldw	r2,-28(fp)
 100211c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 1002120:	00800044 	movi	r2,1
 1002124:	e0bff815 	stw	r2,-32(fp)
 1002128:	00000106 	br	1002130 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 100212c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1002130:	e0bff817 	ldw	r2,-32(fp)
}
 1002134:	e037883a 	mov	sp,fp
 1002138:	dfc00117 	ldw	ra,4(sp)
 100213c:	df000017 	ldw	fp,0(sp)
 1002140:	dec00204 	addi	sp,sp,8
 1002144:	f800283a 	ret

01002148 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 1002148:	defff804 	addi	sp,sp,-32
 100214c:	dfc00715 	stw	ra,28(sp)
 1002150:	df000615 	stw	fp,24(sp)
 1002154:	df000604 	addi	fp,sp,24
 1002158:	e13ffe15 	stw	r4,-8(fp)
 100215c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1002160:	e0bffe17 	ldw	r2,-8(fp)
 1002164:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002168:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 100216c:	e0bffb17 	ldw	r2,-20(fp)
 1002170:	10800e17 	ldw	r2,56(r2)
 1002174:	10000c26 	beq	r2,zero,10021a8 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1002178:	e0bffb17 	ldw	r2,-20(fp)
 100217c:	10800317 	ldw	r2,12(r2)
 1002180:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1002184:	e17fff17 	ldw	r5,-4(fp)
 1002188:	e13ffb17 	ldw	r4,-20(fp)
 100218c:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1002190:	e0bffb17 	ldw	r2,-20(fp)
 1002194:	e0fffd17 	ldw	r3,-12(fp)
 1002198:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 100219c:	00800044 	movi	r2,1
 10021a0:	e0bffa15 	stw	r2,-24(fp)
 10021a4:	00000106 	br	10021ac <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 10021a8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 10021ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10021b0:	e037883a 	mov	sp,fp
 10021b4:	dfc00117 	ldw	ra,4(sp)
 10021b8:	df000017 	ldw	fp,0(sp)
 10021bc:	dec00204 	addi	sp,sp,8
 10021c0:	f800283a 	ret

010021c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 10021c4:	defffc04 	addi	sp,sp,-16
 10021c8:	dfc00315 	stw	ra,12(sp)
 10021cc:	df000215 	stw	fp,8(sp)
 10021d0:	df000204 	addi	fp,sp,8
 10021d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 10021d8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 10021dc:	e0bfff17 	ldw	r2,-4(fp)
 10021e0:	10800e17 	ldw	r2,56(r2)
 10021e4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 10021e8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10021ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 10021f0:	e037883a 	mov	sp,fp
 10021f4:	dfc00117 	ldw	ra,4(sp)
 10021f8:	df000017 	ldw	fp,0(sp)
 10021fc:	dec00204 	addi	sp,sp,8
 1002200:	f800283a 	ret

01002204 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 1002204:	defffb04 	addi	sp,sp,-20
 1002208:	dfc00415 	stw	ra,16(sp)
 100220c:	df000315 	stw	fp,12(sp)
 1002210:	df000304 	addi	fp,sp,12
 1002214:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002218:	e0bfff17 	ldw	r2,-4(fp)
 100221c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1002220:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 1002224:	e0bffd17 	ldw	r2,-12(fp)
 1002228:	10c00f17 	ldw	r3,60(r2)
 100222c:	e0bffd17 	ldw	r2,-12(fp)
 1002230:	10800e17 	ldw	r2,56(r2)
 1002234:	1885c83a 	sub	r2,r3,r2
 1002238:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 100223c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 1002240:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002244:	e037883a 	mov	sp,fp
 1002248:	dfc00117 	ldw	ra,4(sp)
 100224c:	df000017 	ldw	fp,0(sp)
 1002250:	dec00204 	addi	sp,sp,8
 1002254:	f800283a 	ret

01002258 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 1002258:	defffc04 	addi	sp,sp,-16
 100225c:	df000315 	stw	fp,12(sp)
 1002260:	df000304 	addi	fp,sp,12
 1002264:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002268:	e0bfff17 	ldw	r2,-4(fp)
 100226c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 1002270:	e0bffd17 	ldw	r2,-12(fp)
 1002274:	10800e17 	ldw	r2,56(r2)
 1002278:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 100227c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002280:	e037883a 	mov	sp,fp
 1002284:	df000017 	ldw	fp,0(sp)
 1002288:	dec00104 	addi	sp,sp,4
 100228c:	f800283a 	ret

01002290 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 1002290:	defffc04 	addi	sp,sp,-16
 1002294:	dfc00315 	stw	ra,12(sp)
 1002298:	df000215 	stw	fp,8(sp)
 100229c:	df000204 	addi	fp,sp,8
 10022a0:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 10022a4:	e0bfff17 	ldw	r2,-4(fp)
 10022a8:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 10022ac:	e13ffe17 	ldw	r4,-8(fp)
 10022b0:	10011840 	call	1001184 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 10022b4:	0001883a 	nop
 10022b8:	e037883a 	mov	sp,fp
 10022bc:	dfc00117 	ldw	ra,4(sp)
 10022c0:	df000017 	ldw	fp,0(sp)
 10022c4:	dec00204 	addi	sp,sp,8
 10022c8:	f800283a 	ret

010022cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 10022cc:	defffd04 	addi	sp,sp,-12
 10022d0:	df000215 	stw	fp,8(sp)
 10022d4:	df000204 	addi	fp,sp,8
 10022d8:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 10022dc:	e0bfff17 	ldw	r2,-4(fp)
 10022e0:	10800917 	ldw	r2,36(r2)
 10022e4:	10000726 	beq	r2,zero,1002304 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 10022e8:	e0bfff17 	ldw	r2,-4(fp)
 10022ec:	10800c17 	ldw	r2,48(r2)
 10022f0:	10800017 	ldw	r2,0(r2)
 10022f4:	00c00144 	movi	r3,5
 10022f8:	1885c83a 	sub	r2,r3,r2
 10022fc:	e0bffe15 	stw	r2,-8(fp)
 1002300:	00000106 	br	1002308 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 1002304:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 1002308:	e0bffe17 	ldw	r2,-8(fp)
	}
 100230c:	e037883a 	mov	sp,fp
 1002310:	df000017 	ldw	fp,0(sp)
 1002314:	dec00104 	addi	sp,sp,4
 1002318:	f800283a 	ret

0100231c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 100231c:	defff904 	addi	sp,sp,-28
 1002320:	dfc00615 	stw	ra,24(sp)
 1002324:	df000515 	stw	fp,20(sp)
 1002328:	df000504 	addi	fp,sp,20
 100232c:	e13ffd15 	stw	r4,-12(fp)
 1002330:	e17ffe15 	stw	r5,-8(fp)
 1002334:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 1002338:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100233c:	e0bffd17 	ldw	r2,-12(fp)
 1002340:	10800e17 	ldw	r2,56(r2)
 1002344:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 1002348:	e0bffd17 	ldw	r2,-12(fp)
 100234c:	10801017 	ldw	r2,64(r2)
 1002350:	10000b1e 	bne	r2,zero,1002380 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1002354:	e0bffd17 	ldw	r2,-12(fp)
 1002358:	10800017 	ldw	r2,0(r2)
 100235c:	1000481e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 1002360:	e0bffd17 	ldw	r2,-12(fp)
 1002364:	10800217 	ldw	r2,8(r2)
 1002368:	1009883a 	mov	r4,r2
 100236c:	10050340 	call	1005034 <xTaskPriorityDisinherit>
 1002370:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 1002374:	e0bffd17 	ldw	r2,-12(fp)
 1002378:	10000215 	stw	zero,8(r2)
 100237c:	00004006 	br	1002480 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 1002380:	e0bfff17 	ldw	r2,-4(fp)
 1002384:	1000191e 	bne	r2,zero,10023ec <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 1002388:	e0bffd17 	ldw	r2,-12(fp)
 100238c:	10c00117 	ldw	r3,4(r2)
 1002390:	e0bffd17 	ldw	r2,-12(fp)
 1002394:	10801017 	ldw	r2,64(r2)
 1002398:	100d883a 	mov	r6,r2
 100239c:	e17ffe17 	ldw	r5,-8(fp)
 10023a0:	1809883a 	mov	r4,r3
 10023a4:	10139e80 	call	10139e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10023a8:	e0bffd17 	ldw	r2,-12(fp)
 10023ac:	10c00117 	ldw	r3,4(r2)
 10023b0:	e0bffd17 	ldw	r2,-12(fp)
 10023b4:	10801017 	ldw	r2,64(r2)
 10023b8:	1887883a 	add	r3,r3,r2
 10023bc:	e0bffd17 	ldw	r2,-12(fp)
 10023c0:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 10023c4:	e0bffd17 	ldw	r2,-12(fp)
 10023c8:	10c00117 	ldw	r3,4(r2)
 10023cc:	e0bffd17 	ldw	r2,-12(fp)
 10023d0:	10800217 	ldw	r2,8(r2)
 10023d4:	18802a36 	bltu	r3,r2,1002480 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 10023d8:	e0bffd17 	ldw	r2,-12(fp)
 10023dc:	10c00017 	ldw	r3,0(r2)
 10023e0:	e0bffd17 	ldw	r2,-12(fp)
 10023e4:	10c00115 	stw	r3,4(r2)
 10023e8:	00002506 	br	1002480 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 10023ec:	e0bffd17 	ldw	r2,-12(fp)
 10023f0:	10c00317 	ldw	r3,12(r2)
 10023f4:	e0bffd17 	ldw	r2,-12(fp)
 10023f8:	10801017 	ldw	r2,64(r2)
 10023fc:	100d883a 	mov	r6,r2
 1002400:	e17ffe17 	ldw	r5,-8(fp)
 1002404:	1809883a 	mov	r4,r3
 1002408:	10139e80 	call	10139e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 100240c:	e0bffd17 	ldw	r2,-12(fp)
 1002410:	10c00317 	ldw	r3,12(r2)
 1002414:	e0bffd17 	ldw	r2,-12(fp)
 1002418:	10801017 	ldw	r2,64(r2)
 100241c:	0085c83a 	sub	r2,zero,r2
 1002420:	1887883a 	add	r3,r3,r2
 1002424:	e0bffd17 	ldw	r2,-12(fp)
 1002428:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 100242c:	e0bffd17 	ldw	r2,-12(fp)
 1002430:	10c00317 	ldw	r3,12(r2)
 1002434:	e0bffd17 	ldw	r2,-12(fp)
 1002438:	10800017 	ldw	r2,0(r2)
 100243c:	1880082e 	bgeu	r3,r2,1002460 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 1002440:	e0bffd17 	ldw	r2,-12(fp)
 1002444:	10c00217 	ldw	r3,8(r2)
 1002448:	e0bffd17 	ldw	r2,-12(fp)
 100244c:	10801017 	ldw	r2,64(r2)
 1002450:	0085c83a 	sub	r2,zero,r2
 1002454:	1887883a 	add	r3,r3,r2
 1002458:	e0bffd17 	ldw	r2,-12(fp)
 100245c:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 1002460:	e0bfff17 	ldw	r2,-4(fp)
 1002464:	10800098 	cmpnei	r2,r2,2
 1002468:	1000051e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 100246c:	e0bffc17 	ldw	r2,-16(fp)
 1002470:	10000326 	beq	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 1002474:	e0bffc17 	ldw	r2,-16(fp)
 1002478:	10bfffc4 	addi	r2,r2,-1
 100247c:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1002480:	e0bffc17 	ldw	r2,-16(fp)
 1002484:	10c00044 	addi	r3,r2,1
 1002488:	e0bffd17 	ldw	r2,-12(fp)
 100248c:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 1002490:	e0bffb17 	ldw	r2,-20(fp)
}
 1002494:	e037883a 	mov	sp,fp
 1002498:	dfc00117 	ldw	ra,4(sp)
 100249c:	df000017 	ldw	fp,0(sp)
 10024a0:	dec00204 	addi	sp,sp,8
 10024a4:	f800283a 	ret

010024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 10024a8:	defffc04 	addi	sp,sp,-16
 10024ac:	dfc00315 	stw	ra,12(sp)
 10024b0:	df000215 	stw	fp,8(sp)
 10024b4:	df000204 	addi	fp,sp,8
 10024b8:	e13ffe15 	stw	r4,-8(fp)
 10024bc:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 10024c0:	e0bffe17 	ldw	r2,-8(fp)
 10024c4:	10801017 	ldw	r2,64(r2)
 10024c8:	10001826 	beq	r2,zero,100252c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10024cc:	e0bffe17 	ldw	r2,-8(fp)
 10024d0:	10c00317 	ldw	r3,12(r2)
 10024d4:	e0bffe17 	ldw	r2,-8(fp)
 10024d8:	10801017 	ldw	r2,64(r2)
 10024dc:	1887883a 	add	r3,r3,r2
 10024e0:	e0bffe17 	ldw	r2,-8(fp)
 10024e4:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 10024e8:	e0bffe17 	ldw	r2,-8(fp)
 10024ec:	10c00317 	ldw	r3,12(r2)
 10024f0:	e0bffe17 	ldw	r2,-8(fp)
 10024f4:	10800217 	ldw	r2,8(r2)
 10024f8:	18800436 	bltu	r3,r2,100250c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 10024fc:	e0bffe17 	ldw	r2,-8(fp)
 1002500:	10c00017 	ldw	r3,0(r2)
 1002504:	e0bffe17 	ldw	r2,-8(fp)
 1002508:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 100250c:	e0bffe17 	ldw	r2,-8(fp)
 1002510:	10c00317 	ldw	r3,12(r2)
 1002514:	e0bffe17 	ldw	r2,-8(fp)
 1002518:	10801017 	ldw	r2,64(r2)
 100251c:	100d883a 	mov	r6,r2
 1002520:	180b883a 	mov	r5,r3
 1002524:	e13fff17 	ldw	r4,-4(fp)
 1002528:	10139e80 	call	10139e8 <memcpy>
	}
}
 100252c:	0001883a 	nop
 1002530:	e037883a 	mov	sp,fp
 1002534:	dfc00117 	ldw	ra,4(sp)
 1002538:	df000017 	ldw	fp,0(sp)
 100253c:	dec00204 	addi	sp,sp,8
 1002540:	f800283a 	ret

01002544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 1002544:	defffc04 	addi	sp,sp,-16
 1002548:	dfc00315 	stw	ra,12(sp)
 100254c:	df000215 	stw	fp,8(sp)
 1002550:	df000204 	addi	fp,sp,8
 1002554:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 1002558:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 100255c:	e0bfff17 	ldw	r2,-4(fp)
 1002560:	10801143 	ldbu	r2,69(r2)
 1002564:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 1002568:	00000c06 	br	100259c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 100256c:	e0bfff17 	ldw	r2,-4(fp)
 1002570:	10800917 	ldw	r2,36(r2)
 1002574:	10000c26 	beq	r2,zero,10025a8 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1002578:	e0bfff17 	ldw	r2,-4(fp)
 100257c:	10800904 	addi	r2,r2,36
 1002580:	1009883a 	mov	r4,r2
 1002584:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1002588:	10000126 	beq	r2,zero,1002590 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 100258c:	1004bf40 	call	1004bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 1002590:	e0bffe03 	ldbu	r2,-8(fp)
 1002594:	10bfffc4 	addi	r2,r2,-1
 1002598:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 100259c:	e0bffe07 	ldb	r2,-8(fp)
 10025a0:	00bff216 	blt	zero,r2,100256c <__alt_data_end+0xff00256c>
 10025a4:	00000106 	br	10025ac <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 10025a8:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 10025ac:	e0bfff17 	ldw	r2,-4(fp)
 10025b0:	00ffffc4 	movi	r3,-1
 10025b4:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 10025b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 10025bc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 10025c0:	e0bfff17 	ldw	r2,-4(fp)
 10025c4:	10801103 	ldbu	r2,68(r2)
 10025c8:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 10025cc:	00000c06 	br	1002600 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10025d0:	e0bfff17 	ldw	r2,-4(fp)
 10025d4:	10800417 	ldw	r2,16(r2)
 10025d8:	10000c26 	beq	r2,zero,100260c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10025dc:	e0bfff17 	ldw	r2,-4(fp)
 10025e0:	10800404 	addi	r2,r2,16
 10025e4:	1009883a 	mov	r4,r2
 10025e8:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10025ec:	10000126 	beq	r2,zero,10025f4 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 10025f0:	1004bf40 	call	1004bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 10025f4:	e0bffe43 	ldbu	r2,-7(fp)
 10025f8:	10bfffc4 	addi	r2,r2,-1
 10025fc:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 1002600:	e0bffe47 	ldb	r2,-7(fp)
 1002604:	00bff216 	blt	zero,r2,10025d0 <__alt_data_end+0xff0025d0>
 1002608:	00000106 	br	1002610 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 100260c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 1002610:	e0bfff17 	ldw	r2,-4(fp)
 1002614:	00ffffc4 	movi	r3,-1
 1002618:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 100261c:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1002620:	0001883a 	nop
 1002624:	e037883a 	mov	sp,fp
 1002628:	dfc00117 	ldw	ra,4(sp)
 100262c:	df000017 	ldw	fp,0(sp)
 1002630:	dec00204 	addi	sp,sp,8
 1002634:	f800283a 	ret

01002638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 1002638:	defffc04 	addi	sp,sp,-16
 100263c:	dfc00315 	stw	ra,12(sp)
 1002640:	df000215 	stw	fp,8(sp)
 1002644:	df000204 	addi	fp,sp,8
 1002648:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 100264c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 1002650:	e0bfff17 	ldw	r2,-4(fp)
 1002654:	10800e17 	ldw	r2,56(r2)
 1002658:	1000031e 	bne	r2,zero,1002668 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 100265c:	00800044 	movi	r2,1
 1002660:	e0bffe15 	stw	r2,-8(fp)
 1002664:	00000106 	br	100266c <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 1002668:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100266c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002670:	e0bffe17 	ldw	r2,-8(fp)
}
 1002674:	e037883a 	mov	sp,fp
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	df000017 	ldw	fp,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret

01002688 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 1002688:	defffc04 	addi	sp,sp,-16
 100268c:	df000315 	stw	fp,12(sp)
 1002690:	df000304 	addi	fp,sp,12
 1002694:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002698:	e0bfff17 	ldw	r2,-4(fp)
 100269c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 10026a0:	e0bffe17 	ldw	r2,-8(fp)
 10026a4:	10800e17 	ldw	r2,56(r2)
 10026a8:	1000031e 	bne	r2,zero,10026b8 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 10026ac:	00800044 	movi	r2,1
 10026b0:	e0bffd15 	stw	r2,-12(fp)
 10026b4:	00000106 	br	10026bc <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 10026b8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10026bc:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 10026c0:	e037883a 	mov	sp,fp
 10026c4:	df000017 	ldw	fp,0(sp)
 10026c8:	dec00104 	addi	sp,sp,4
 10026cc:	f800283a 	ret

010026d0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 10026d0:	defffc04 	addi	sp,sp,-16
 10026d4:	dfc00315 	stw	ra,12(sp)
 10026d8:	df000215 	stw	fp,8(sp)
 10026dc:	df000204 	addi	fp,sp,8
 10026e0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 10026e4:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 10026e8:	e0bfff17 	ldw	r2,-4(fp)
 10026ec:	10c00e17 	ldw	r3,56(r2)
 10026f0:	e0bfff17 	ldw	r2,-4(fp)
 10026f4:	10800f17 	ldw	r2,60(r2)
 10026f8:	1880031e 	bne	r3,r2,1002708 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 10026fc:	00800044 	movi	r2,1
 1002700:	e0bffe15 	stw	r2,-8(fp)
 1002704:	00000106 	br	100270c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 1002708:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100270c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002710:	e0bffe17 	ldw	r2,-8(fp)
}
 1002714:	e037883a 	mov	sp,fp
 1002718:	dfc00117 	ldw	ra,4(sp)
 100271c:	df000017 	ldw	fp,0(sp)
 1002720:	dec00204 	addi	sp,sp,8
 1002724:	f800283a 	ret

01002728 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 1002728:	defffc04 	addi	sp,sp,-16
 100272c:	df000315 	stw	fp,12(sp)
 1002730:	df000304 	addi	fp,sp,12
 1002734:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002738:	e0bfff17 	ldw	r2,-4(fp)
 100273c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1002740:	e0bffe17 	ldw	r2,-8(fp)
 1002744:	10c00e17 	ldw	r3,56(r2)
 1002748:	e0bffe17 	ldw	r2,-8(fp)
 100274c:	10800f17 	ldw	r2,60(r2)
 1002750:	1880031e 	bne	r3,r2,1002760 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 1002754:	00800044 	movi	r2,1
 1002758:	e0bffd15 	stw	r2,-12(fp)
 100275c:	00000106 	br	1002764 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 1002760:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 1002764:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1002768:	e037883a 	mov	sp,fp
 100276c:	df000017 	ldw	fp,0(sp)
 1002770:	dec00104 	addi	sp,sp,4
 1002774:	f800283a 	ret

01002778 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 1002778:	defff804 	addi	sp,sp,-32
 100277c:	dfc00715 	stw	ra,28(sp)
 1002780:	df000615 	stw	fp,24(sp)
 1002784:	df000604 	addi	fp,sp,24
 1002788:	e13ffd15 	stw	r4,-12(fp)
 100278c:	e17ffe15 	stw	r5,-8(fp)
 1002790:	e1bfff15 	stw	r6,-4(fp)

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 1002794:	e0bfff17 	ldw	r2,-4(fp)
 1002798:	10800058 	cmpnei	r2,r2,1
 100279c:	1000031e 	bne	r2,zero,10027ac <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 10027a0:	00800044 	movi	r2,1
 10027a4:	e0bffb05 	stb	r2,-20(fp)
 10027a8:	00000106 	br	10027b0 <xStreamBufferGenericCreate+0x38>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 10027ac:	e03ffb05 	stb	zero,-20(fp)
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 10027b0:	e0bffe17 	ldw	r2,-8(fp)
 10027b4:	1000021e 	bne	r2,zero,10027c0 <xStreamBufferGenericCreate+0x48>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 10027b8:	00800044 	movi	r2,1
 10027bc:	e0bffe15 	stw	r2,-8(fp)
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 10027c0:	e0bffd17 	ldw	r2,-12(fp)
 10027c4:	10800044 	addi	r2,r2,1
 10027c8:	e0bffd15 	stw	r2,-12(fp)
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 10027cc:	e0bffd17 	ldw	r2,-12(fp)
 10027d0:	10800804 	addi	r2,r2,32
 10027d4:	1009883a 	mov	r4,r2
 10027d8:	1000fb00 	call	1000fb0 <pvPortMalloc>
 10027dc:	e0bffc15 	stw	r2,-16(fp)

		if( pucAllocatedMemory != NULL )
 10027e0:	e0bffc17 	ldw	r2,-16(fp)
 10027e4:	10000926 	beq	r2,zero,100280c <xStreamBufferGenericCreate+0x94>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 10027e8:	e0bffc17 	ldw	r2,-16(fp)
 10027ec:	10c00804 	addi	r3,r2,32
 10027f0:	e0bffb03 	ldbu	r2,-20(fp)
 10027f4:	d8800015 	stw	r2,0(sp)
 10027f8:	e1fffe17 	ldw	r7,-8(fp)
 10027fc:	e1bffd17 	ldw	r6,-12(fp)
 1002800:	180b883a 	mov	r5,r3
 1002804:	e13ffc17 	ldw	r4,-16(fp)
 1002808:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 100280c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1002810:	e037883a 	mov	sp,fp
 1002814:	dfc00117 	ldw	ra,4(sp)
 1002818:	df000017 	ldw	fp,0(sp)
 100281c:	dec00204 	addi	sp,sp,8
 1002820:	f800283a 	ret

01002824 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 1002824:	defffc04 	addi	sp,sp,-16
 1002828:	dfc00315 	stw	ra,12(sp)
 100282c:	df000215 	stw	fp,8(sp)
 1002830:	df000204 	addi	fp,sp,8
 1002834:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 1002838:	e0bfff17 	ldw	r2,-4(fp)
 100283c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 1002840:	e0bffe17 	ldw	r2,-8(fp)
 1002844:	10800703 	ldbu	r2,28(r2)
 1002848:	10803fcc 	andi	r2,r2,255
 100284c:	1080008c 	andi	r2,r2,2
 1002850:	1000031e 	bne	r2,zero,1002860 <vStreamBufferDelete+0x3c>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 1002854:	e13ffe17 	ldw	r4,-8(fp)
 1002858:	10011840 	call	1001184 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 100285c:	00000406 	br	1002870 <vStreamBufferDelete+0x4c>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 1002860:	01800804 	movi	r6,32
 1002864:	000b883a 	mov	r5,zero
 1002868:	e13ffe17 	ldw	r4,-8(fp)
 100286c:	1013b300 	call	1013b30 <memset>
	}
}
 1002870:	0001883a 	nop
 1002874:	e037883a 	mov	sp,fp
 1002878:	dfc00117 	ldw	ra,4(sp)
 100287c:	df000017 	ldw	fp,0(sp)
 1002880:	dec00204 	addi	sp,sp,8
 1002884:	f800283a 	ret

01002888 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 1002888:	defffa04 	addi	sp,sp,-24
 100288c:	dfc00515 	stw	ra,20(sp)
 1002890:	df000415 	stw	fp,16(sp)
 1002894:	df000404 	addi	fp,sp,16
 1002898:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 100289c:	e0bfff17 	ldw	r2,-4(fp)
 10028a0:	e0bffe15 	stw	r2,-8(fp)
BaseType_t xReturn = pdFAIL;
 10028a4:	e03ffd15 	stw	zero,-12(fp)
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 10028a8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 10028ac:	e0bffe17 	ldw	r2,-8(fp)
 10028b0:	10800417 	ldw	r2,16(r2)
 10028b4:	1000141e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 10028b8:	e0bffe17 	ldw	r2,-8(fp)
 10028bc:	10800517 	ldw	r2,20(r2)
 10028c0:	1000111e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028c4:	e0bffe17 	ldw	r2,-8(fp)
 10028c8:	10c00617 	ldw	r3,24(r2)
 10028cc:	e0bffe17 	ldw	r2,-8(fp)
 10028d0:	11000217 	ldw	r4,8(r2)
 10028d4:	e0bffe17 	ldw	r2,-8(fp)
 10028d8:	11400317 	ldw	r5,12(r2)
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
 10028dc:	e0bffe17 	ldw	r2,-8(fp)
 10028e0:	10800703 	ldbu	r2,28(r2)
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028e4:	10803fcc 	andi	r2,r2,255
 10028e8:	d8800015 	stw	r2,0(sp)
 10028ec:	280f883a 	mov	r7,r5
 10028f0:	200d883a 	mov	r6,r4
 10028f4:	180b883a 	mov	r5,r3
 10028f8:	e13ffe17 	ldw	r4,-8(fp)
 10028fc:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 1002900:	00800044 	movi	r2,1
 1002904:	e0bffd15 	stw	r2,-12(fp)

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 1002908:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 100290c:	e0bffd17 	ldw	r2,-12(fp)
}
 1002910:	e037883a 	mov	sp,fp
 1002914:	dfc00117 	ldw	ra,4(sp)
 1002918:	df000017 	ldw	fp,0(sp)
 100291c:	dec00204 	addi	sp,sp,8
 1002920:	f800283a 	ret

01002924 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 1002924:	defffb04 	addi	sp,sp,-20
 1002928:	df000415 	stw	fp,16(sp)
 100292c:	df000404 	addi	fp,sp,16
 1002930:	e13ffe15 	stw	r4,-8(fp)
 1002934:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002938:	e0bffe17 	ldw	r2,-8(fp)
 100293c:	e0bffd15 	stw	r2,-12(fp)
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 1002940:	e0bfff17 	ldw	r2,-4(fp)
 1002944:	1000021e 	bne	r2,zero,1002950 <xStreamBufferSetTriggerLevel+0x2c>
	{
		xTriggerLevel = ( size_t ) 1;
 1002948:	00800044 	movi	r2,1
 100294c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 1002950:	e0bffd17 	ldw	r2,-12(fp)
 1002954:	10c00217 	ldw	r3,8(r2)
 1002958:	e0bfff17 	ldw	r2,-4(fp)
 100295c:	18800636 	bltu	r3,r2,1002978 <xStreamBufferSetTriggerLevel+0x54>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 1002960:	e0bffd17 	ldw	r2,-12(fp)
 1002964:	e0ffff17 	ldw	r3,-4(fp)
 1002968:	10c00315 	stw	r3,12(r2)
		xReturn = pdPASS;
 100296c:	00800044 	movi	r2,1
 1002970:	e0bffc15 	stw	r2,-16(fp)
 1002974:	00000106 	br	100297c <xStreamBufferSetTriggerLevel+0x58>
	}
	else
	{
		xReturn = pdFALSE;
 1002978:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 100297c:	e0bffc17 	ldw	r2,-16(fp)
}
 1002980:	e037883a 	mov	sp,fp
 1002984:	df000017 	ldw	fp,0(sp)
 1002988:	dec00104 	addi	sp,sp,4
 100298c:	f800283a 	ret

01002990 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002990:	defffc04 	addi	sp,sp,-16
 1002994:	df000315 	stw	fp,12(sp)
 1002998:	df000304 	addi	fp,sp,12
 100299c:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10029a0:	e0bfff17 	ldw	r2,-4(fp)
 10029a4:	e0bffe15 	stw	r2,-8(fp)
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 10029a8:	e0bffe17 	ldw	r2,-8(fp)
 10029ac:	10c00217 	ldw	r3,8(r2)
 10029b0:	e0bffe17 	ldw	r2,-8(fp)
 10029b4:	10800017 	ldw	r2,0(r2)
 10029b8:	1885883a 	add	r2,r3,r2
 10029bc:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= pxStreamBuffer->xHead;
 10029c0:	e0bffe17 	ldw	r2,-8(fp)
 10029c4:	10800117 	ldw	r2,4(r2)
 10029c8:	e0fffd17 	ldw	r3,-12(fp)
 10029cc:	1885c83a 	sub	r2,r3,r2
 10029d0:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= ( size_t ) 1;
 10029d4:	e0bffd17 	ldw	r2,-12(fp)
 10029d8:	10bfffc4 	addi	r2,r2,-1
 10029dc:	e0bffd15 	stw	r2,-12(fp)

	if( xSpace >= pxStreamBuffer->xLength )
 10029e0:	e0bffe17 	ldw	r2,-8(fp)
 10029e4:	10800217 	ldw	r2,8(r2)
 10029e8:	e0fffd17 	ldw	r3,-12(fp)
 10029ec:	18800536 	bltu	r3,r2,1002a04 <xStreamBufferSpacesAvailable+0x74>
	{
		xSpace -= pxStreamBuffer->xLength;
 10029f0:	e0bffe17 	ldw	r2,-8(fp)
 10029f4:	10800217 	ldw	r2,8(r2)
 10029f8:	e0fffd17 	ldw	r3,-12(fp)
 10029fc:	1885c83a 	sub	r2,r3,r2
 1002a00:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 1002a04:	e0bffd17 	ldw	r2,-12(fp)
}
 1002a08:	e037883a 	mov	sp,fp
 1002a0c:	df000017 	ldw	fp,0(sp)
 1002a10:	dec00104 	addi	sp,sp,4
 1002a14:	f800283a 	ret

01002a18 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002a18:	defffb04 	addi	sp,sp,-20
 1002a1c:	dfc00415 	stw	ra,16(sp)
 1002a20:	df000315 	stw	fp,12(sp)
 1002a24:	df000304 	addi	fp,sp,12
 1002a28:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a2c:	e0bfff17 	ldw	r2,-4(fp)
 1002a30:	e0bffd15 	stw	r2,-12(fp)
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 1002a34:	e13ffd17 	ldw	r4,-12(fp)
 1002a38:	10035280 	call	1003528 <prvBytesInBuffer>
 1002a3c:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1002a40:	e0bffe17 	ldw	r2,-8(fp)
}
 1002a44:	e037883a 	mov	sp,fp
 1002a48:	dfc00117 	ldw	ra,4(sp)
 1002a4c:	df000017 	ldw	fp,0(sp)
 1002a50:	dec00204 	addi	sp,sp,8
 1002a54:	f800283a 	ret

01002a58 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 1002a58:	defff304 	addi	sp,sp,-52
 1002a5c:	dfc00c15 	stw	ra,48(sp)
 1002a60:	df000b15 	stw	fp,44(sp)
 1002a64:	df000b04 	addi	fp,sp,44
 1002a68:	e13ffc15 	stw	r4,-16(fp)
 1002a6c:	e17ffd15 	stw	r5,-12(fp)
 1002a70:	e1bffe15 	stw	r6,-8(fp)
 1002a74:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a78:	e0bffc17 	ldw	r2,-16(fp)
 1002a7c:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace = 0;
 1002a80:	e03ff615 	stw	zero,-40(fp)
size_t xRequiredSpace = xDataLengthBytes;
 1002a84:	e0bffe17 	ldw	r2,-8(fp)
 1002a88:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002a8c:	e0bff817 	ldw	r2,-32(fp)
 1002a90:	10800703 	ldbu	r2,28(r2)
 1002a94:	10803fcc 	andi	r2,r2,255
 1002a98:	1080004c 	andi	r2,r2,1
 1002a9c:	10000326 	beq	r2,zero,1002aac <xStreamBufferSend+0x54>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002aa0:	e0bff717 	ldw	r2,-36(fp)
 1002aa4:	10800104 	addi	r2,r2,4
 1002aa8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002aac:	e0bfff17 	ldw	r2,-4(fp)
 1002ab0:	10002226 	beq	r2,zero,1002b3c <xStreamBufferSend+0xe4>
	{
		vTaskSetTimeOutState( &xTimeOut );
 1002ab4:	e0bffa04 	addi	r2,fp,-24
 1002ab8:	1009883a 	mov	r4,r2
 1002abc:	1004a8c0 	call	1004a8c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 1002ac0:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002ac4:	e13ff817 	ldw	r4,-32(fp)
 1002ac8:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002acc:	e0bff615 	stw	r2,-40(fp)

				if( xSpace < xRequiredSpace )
 1002ad0:	e0fff617 	ldw	r3,-40(fp)
 1002ad4:	e0bff717 	ldw	r2,-36(fp)
 1002ad8:	1880072e 	bgeu	r3,r2,1002af8 <xStreamBufferSend+0xa0>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 1002adc:	0009883a 	mov	r4,zero
 1002ae0:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 1002ae4:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002ae8:	1007883a 	mov	r3,r2
 1002aec:	e0bff817 	ldw	r2,-32(fp)
 1002af0:	10c00515 	stw	r3,20(r2)
 1002af4:	00000206 	br	1002b00 <xStreamBufferSend+0xa8>
				}
				else
				{
					taskEXIT_CRITICAL();
 1002af8:	10052c40 	call	10052c4 <vTaskExitCritical>
					break;
 1002afc:	00000f06 	br	1002b3c <xStreamBufferSend+0xe4>
				}
			}
			taskEXIT_CRITICAL();
 1002b00:	10052c40 	call	10052c4 <vTaskExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002b04:	e0bfff17 	ldw	r2,-4(fp)
 1002b08:	100f883a 	mov	r7,r2
 1002b0c:	000d883a 	mov	r6,zero
 1002b10:	000b883a 	mov	r5,zero
 1002b14:	0009883a 	mov	r4,zero
 1002b18:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 1002b1c:	e0bff817 	ldw	r2,-32(fp)
 1002b20:	10000515 	stw	zero,20(r2)

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 1002b24:	e0ffff04 	addi	r3,fp,-4
 1002b28:	e0bffa04 	addi	r2,fp,-24
 1002b2c:	180b883a 	mov	r5,r3
 1002b30:	1009883a 	mov	r4,r2
 1002b34:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1002b38:	103fe126 	beq	r2,zero,1002ac0 <__alt_data_end+0xff002ac0>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 1002b3c:	e0bff617 	ldw	r2,-40(fp)
 1002b40:	1000031e 	bne	r2,zero,1002b50 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002b44:	e13ff817 	ldw	r4,-32(fp)
 1002b48:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002b4c:	e0bff615 	stw	r2,-40(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002b50:	e0bff717 	ldw	r2,-36(fp)
 1002b54:	d8800015 	stw	r2,0(sp)
 1002b58:	e1fff617 	ldw	r7,-40(fp)
 1002b5c:	e1bffe17 	ldw	r6,-8(fp)
 1002b60:	e17ffd17 	ldw	r5,-12(fp)
 1002b64:	e13ff817 	ldw	r4,-32(fp)
 1002b68:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002b6c:	e0bff915 	stw	r2,-28(fp)

	if( xReturn > ( size_t ) 0 )
 1002b70:	e0bff917 	ldw	r2,-28(fp)
 1002b74:	10001426 	beq	r2,zero,1002bc8 <xStreamBufferSend+0x170>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002b78:	e13ff817 	ldw	r4,-32(fp)
 1002b7c:	10035280 	call	1003528 <prvBytesInBuffer>
 1002b80:	1007883a 	mov	r3,r2
 1002b84:	e0bff817 	ldw	r2,-32(fp)
 1002b88:	10800317 	ldw	r2,12(r2)
 1002b8c:	18800e36 	bltu	r3,r2,1002bc8 <xStreamBufferSend+0x170>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 1002b90:	100435c0 	call	100435c <vTaskSuspendAll>
 1002b94:	e0bff817 	ldw	r2,-32(fp)
 1002b98:	10800417 	ldw	r2,16(r2)
 1002b9c:	10000926 	beq	r2,zero,1002bc4 <xStreamBufferSend+0x16c>
 1002ba0:	e0bff817 	ldw	r2,-32(fp)
 1002ba4:	10800417 	ldw	r2,16(r2)
 1002ba8:	000f883a 	mov	r7,zero
 1002bac:	000d883a 	mov	r6,zero
 1002bb0:	000b883a 	mov	r5,zero
 1002bb4:	1009883a 	mov	r4,r2
 1002bb8:	10055440 	call	1005544 <xTaskGenericNotify>
 1002bbc:	e0bff817 	ldw	r2,-32(fp)
 1002bc0:	10000415 	stw	zero,16(r2)
 1002bc4:	10043880 	call	1004388 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 1002bc8:	e0bff917 	ldw	r2,-28(fp)
}
 1002bcc:	e037883a 	mov	sp,fp
 1002bd0:	dfc00117 	ldw	ra,4(sp)
 1002bd4:	df000017 	ldw	fp,0(sp)
 1002bd8:	dec00204 	addi	sp,sp,8
 1002bdc:	f800283a 	ret

01002be0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002be0:	defff404 	addi	sp,sp,-48
 1002be4:	dfc00b15 	stw	ra,44(sp)
 1002be8:	df000a15 	stw	fp,40(sp)
 1002bec:	df000a04 	addi	fp,sp,40
 1002bf0:	e13ffc15 	stw	r4,-16(fp)
 1002bf4:	e17ffd15 	stw	r5,-12(fp)
 1002bf8:	e1bffe15 	stw	r6,-8(fp)
 1002bfc:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002c00:	e0bffc17 	ldw	r2,-16(fp)
 1002c04:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 1002c08:	e0bffe17 	ldw	r2,-8(fp)
 1002c0c:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002c10:	e0bff817 	ldw	r2,-32(fp)
 1002c14:	10800703 	ldbu	r2,28(r2)
 1002c18:	10803fcc 	andi	r2,r2,255
 1002c1c:	1080004c 	andi	r2,r2,1
 1002c20:	10000326 	beq	r2,zero,1002c30 <xStreamBufferSendFromISR+0x50>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002c24:	e0bff717 	ldw	r2,-36(fp)
 1002c28:	10800104 	addi	r2,r2,4
 1002c2c:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002c30:	e13ff817 	ldw	r4,-32(fp)
 1002c34:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002c38:	e0bff915 	stw	r2,-28(fp)
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002c3c:	e0bff717 	ldw	r2,-36(fp)
 1002c40:	d8800015 	stw	r2,0(sp)
 1002c44:	e1fff917 	ldw	r7,-28(fp)
 1002c48:	e1bffe17 	ldw	r6,-8(fp)
 1002c4c:	e17ffd17 	ldw	r5,-12(fp)
 1002c50:	e13ff817 	ldw	r4,-32(fp)
 1002c54:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002c58:	e0bffa15 	stw	r2,-24(fp)

	if( xReturn > ( size_t ) 0 )
 1002c5c:	e0bffa17 	ldw	r2,-24(fp)
 1002c60:	10001526 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002c64:	e13ff817 	ldw	r4,-32(fp)
 1002c68:	10035280 	call	1003528 <prvBytesInBuffer>
 1002c6c:	1007883a 	mov	r3,r2
 1002c70:	e0bff817 	ldw	r2,-32(fp)
 1002c74:	10800317 	ldw	r2,12(r2)
 1002c78:	18800f36 	bltu	r3,r2,1002cb8 <xStreamBufferSendFromISR+0xd8>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1002c7c:	e03ffb15 	stw	zero,-20(fp)
 1002c80:	e0bff817 	ldw	r2,-32(fp)
 1002c84:	10800417 	ldw	r2,16(r2)
 1002c88:	10000b26 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
 1002c8c:	e0bff817 	ldw	r2,-32(fp)
 1002c90:	10c00417 	ldw	r3,16(r2)
 1002c94:	e0bfff17 	ldw	r2,-4(fp)
 1002c98:	d8800015 	stw	r2,0(sp)
 1002c9c:	000f883a 	mov	r7,zero
 1002ca0:	000d883a 	mov	r6,zero
 1002ca4:	000b883a 	mov	r5,zero
 1002ca8:	1809883a 	mov	r4,r3
 1002cac:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1002cb0:	e0bff817 	ldw	r2,-32(fp)
 1002cb4:	10000415 	stw	zero,16(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 1002cb8:	e0bffa17 	ldw	r2,-24(fp)
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	dfc00117 	ldw	ra,4(sp)
 1002cc4:	df000017 	ldw	fp,0(sp)
 1002cc8:	dec00204 	addi	sp,sp,8
 1002ccc:	f800283a 	ret

01002cd0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 1002cd0:	defff804 	addi	sp,sp,-32
 1002cd4:	dfc00715 	stw	ra,28(sp)
 1002cd8:	df000615 	stw	fp,24(sp)
 1002cdc:	df000604 	addi	fp,sp,24
 1002ce0:	e13ffc15 	stw	r4,-16(fp)
 1002ce4:	e17ffd15 	stw	r5,-12(fp)
 1002ce8:	e1bffe15 	stw	r6,-8(fp)
 1002cec:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 1002cf0:	e0bfff17 	ldw	r2,-4(fp)
 1002cf4:	1000021e 	bne	r2,zero,1002d00 <prvWriteMessageToBuffer+0x30>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 1002cf8:	e03ffa15 	stw	zero,-24(fp)
 1002cfc:	00001906 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 1002d00:	e0bffc17 	ldw	r2,-16(fp)
 1002d04:	10800703 	ldbu	r2,28(r2)
 1002d08:	10803fcc 	andi	r2,r2,255
 1002d0c:	1080004c 	andi	r2,r2,1
 1002d10:	1000081e 	bne	r2,zero,1002d34 <prvWriteMessageToBuffer+0x64>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 1002d14:	00800044 	movi	r2,1
 1002d18:	e0bffa15 	stw	r2,-24(fp)
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 1002d1c:	e0fffe17 	ldw	r3,-8(fp)
 1002d20:	e0bfff17 	ldw	r2,-4(fp)
 1002d24:	1880012e 	bgeu	r3,r2,1002d2c <prvWriteMessageToBuffer+0x5c>
 1002d28:	1805883a 	mov	r2,r3
 1002d2c:	e0bffe15 	stw	r2,-8(fp)
 1002d30:	00000c06 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( xSpace >= xRequiredSpace )
 1002d34:	e0ffff17 	ldw	r3,-4(fp)
 1002d38:	e0800217 	ldw	r2,8(fp)
 1002d3c:	18800836 	bltu	r3,r2,1002d60 <prvWriteMessageToBuffer+0x90>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 1002d40:	00800044 	movi	r2,1
 1002d44:	e0bffa15 	stw	r2,-24(fp)
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 1002d48:	e0bffe04 	addi	r2,fp,-8
 1002d4c:	01800104 	movi	r6,4
 1002d50:	100b883a 	mov	r5,r2
 1002d54:	e13ffc17 	ldw	r4,-16(fp)
 1002d58:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d5c:	00000106 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 1002d60:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xShouldWrite != pdFALSE )
 1002d64:	e0bffa17 	ldw	r2,-24(fp)
 1002d68:	10000726 	beq	r2,zero,1002d88 <prvWriteMessageToBuffer+0xb8>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 1002d6c:	e0bffe17 	ldw	r2,-8(fp)
 1002d70:	100d883a 	mov	r6,r2
 1002d74:	e17ffd17 	ldw	r5,-12(fp)
 1002d78:	e13ffc17 	ldw	r4,-16(fp)
 1002d7c:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d80:	e0bffb15 	stw	r2,-20(fp)
 1002d84:	00000106 	br	1002d8c <prvWriteMessageToBuffer+0xbc>
	}
	else
	{
		xReturn = 0;
 1002d88:	e03ffb15 	stw	zero,-20(fp)
	}

	return xReturn;
 1002d8c:	e0bffb17 	ldw	r2,-20(fp)
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	dfc00117 	ldw	ra,4(sp)
 1002d98:	df000017 	ldw	fp,0(sp)
 1002d9c:	dec00204 	addi	sp,sp,8
 1002da0:	f800283a 	ret

01002da4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 1002da4:	defff504 	addi	sp,sp,-44
 1002da8:	dfc00a15 	stw	ra,40(sp)
 1002dac:	df000915 	stw	fp,36(sp)
 1002db0:	df000904 	addi	fp,sp,36
 1002db4:	e13ffc15 	stw	r4,-16(fp)
 1002db8:	e17ffd15 	stw	r5,-12(fp)
 1002dbc:	e1bffe15 	stw	r6,-8(fp)
 1002dc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002dc4:	e0bffc17 	ldw	r2,-16(fp)
 1002dc8:	e0bffb15 	stw	r2,-20(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002dcc:	e03ff815 	stw	zero,-32(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002dd0:	e0bffb17 	ldw	r2,-20(fp)
 1002dd4:	10800703 	ldbu	r2,28(r2)
 1002dd8:	10803fcc 	andi	r2,r2,255
 1002ddc:	1080004c 	andi	r2,r2,1
 1002de0:	10000326 	beq	r2,zero,1002df0 <xStreamBufferReceive+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002de4:	00800104 	movi	r2,4
 1002de8:	e0bffa15 	stw	r2,-24(fp)
 1002dec:	00000106 	br	1002df4 <xStreamBufferReceive+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002df0:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002df4:	e0bfff17 	ldw	r2,-4(fp)
 1002df8:	10001c26 	beq	r2,zero,1002e6c <xStreamBufferReceive+0xc8>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 1002dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e00:	e13ffb17 	ldw	r4,-20(fp)
 1002e04:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e08:	e0bff915 	stw	r2,-28(fp)
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e0c:	e0bff917 	ldw	r2,-28(fp)
 1002e10:	e0fffa17 	ldw	r3,-24(fp)
 1002e14:	18800636 	bltu	r3,r2,1002e30 <xStreamBufferReceive+0x8c>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 1002e18:	0009883a 	mov	r4,zero
 1002e1c:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1002e20:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002e24:	1007883a 	mov	r3,r2
 1002e28:	e0bffb17 	ldw	r2,-20(fp)
 1002e2c:	10c00415 	stw	r3,16(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1002e30:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e34:	e0bff917 	ldw	r2,-28(fp)
 1002e38:	e0fffa17 	ldw	r3,-24(fp)
 1002e3c:	18800e36 	bltu	r3,r2,1002e78 <xStreamBufferReceive+0xd4>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002e40:	e1ffff17 	ldw	r7,-4(fp)
 1002e44:	000d883a 	mov	r6,zero
 1002e48:	000b883a 	mov	r5,zero
 1002e4c:	0009883a 	mov	r4,zero
 1002e50:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1002e54:	e0bffb17 	ldw	r2,-20(fp)
 1002e58:	10000415 	stw	zero,16(r2)

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e5c:	e13ffb17 	ldw	r4,-20(fp)
 1002e60:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e64:	e0bff915 	stw	r2,-28(fp)
 1002e68:	00000306 	br	1002e78 <xStreamBufferReceive+0xd4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e6c:	e13ffb17 	ldw	r4,-20(fp)
 1002e70:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e74:	e0bff915 	stw	r2,-28(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1002e78:	e0bff917 	ldw	r2,-28(fp)
 1002e7c:	e0fffa17 	ldw	r3,-24(fp)
 1002e80:	1880182e 	bgeu	r3,r2,1002ee4 <xStreamBufferReceive+0x140>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 1002e84:	e0bffa17 	ldw	r2,-24(fp)
 1002e88:	d8800015 	stw	r2,0(sp)
 1002e8c:	e1fff917 	ldw	r7,-28(fp)
 1002e90:	e1bffe17 	ldw	r6,-8(fp)
 1002e94:	e17ffd17 	ldw	r5,-12(fp)
 1002e98:	e13ffb17 	ldw	r4,-20(fp)
 1002e9c:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1002ea0:	e0bff815 	stw	r2,-32(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 1002ea4:	e0bff817 	ldw	r2,-32(fp)
 1002ea8:	10000e26 	beq	r2,zero,1002ee4 <xStreamBufferReceive+0x140>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 1002eac:	100435c0 	call	100435c <vTaskSuspendAll>
 1002eb0:	e0bffb17 	ldw	r2,-20(fp)
 1002eb4:	10800517 	ldw	r2,20(r2)
 1002eb8:	10000926 	beq	r2,zero,1002ee0 <xStreamBufferReceive+0x13c>
 1002ebc:	e0bffb17 	ldw	r2,-20(fp)
 1002ec0:	10800517 	ldw	r2,20(r2)
 1002ec4:	000f883a 	mov	r7,zero
 1002ec8:	000d883a 	mov	r6,zero
 1002ecc:	000b883a 	mov	r5,zero
 1002ed0:	1009883a 	mov	r4,r2
 1002ed4:	10055440 	call	1005544 <xTaskGenericNotify>
 1002ed8:	e0bffb17 	ldw	r2,-20(fp)
 1002edc:	10000515 	stw	zero,20(r2)
 1002ee0:	10043880 	call	1004388 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 1002ee4:	e0bff817 	ldw	r2,-32(fp)
}
 1002ee8:	e037883a 	mov	sp,fp
 1002eec:	dfc00117 	ldw	ra,4(sp)
 1002ef0:	df000017 	ldw	fp,0(sp)
 1002ef4:	dec00204 	addi	sp,sp,8
 1002ef8:	f800283a 	ret

01002efc <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 1002efc:	defff804 	addi	sp,sp,-32
 1002f00:	dfc00715 	stw	ra,28(sp)
 1002f04:	df000615 	stw	fp,24(sp)
 1002f08:	df000604 	addi	fp,sp,24
 1002f0c:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002f10:	e0bfff17 	ldw	r2,-4(fp)
 1002f14:	e0bffb15 	stw	r2,-20(fp)
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002f18:	e0bffb17 	ldw	r2,-20(fp)
 1002f1c:	10800703 	ldbu	r2,28(r2)
 1002f20:	10803fcc 	andi	r2,r2,255
 1002f24:	1080004c 	andi	r2,r2,1
 1002f28:	10001726 	beq	r2,zero,1002f88 <xStreamBufferNextMessageLengthBytes+0x8c>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002f2c:	e13ffb17 	ldw	r4,-20(fp)
 1002f30:	10035280 	call	1003528 <prvBytesInBuffer>
 1002f34:	e0bffc15 	stw	r2,-16(fp)
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 1002f38:	e0bffc17 	ldw	r2,-16(fp)
 1002f3c:	10800170 	cmpltui	r2,r2,5
 1002f40:	10000f1e 	bne	r2,zero,1002f80 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 1002f44:	e0bffb17 	ldw	r2,-20(fp)
 1002f48:	10800017 	ldw	r2,0(r2)
 1002f4c:	e0bffd15 	stw	r2,-12(fp)
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 1002f50:	e0bffe04 	addi	r2,fp,-8
 1002f54:	e1fffc17 	ldw	r7,-16(fp)
 1002f58:	01800104 	movi	r6,4
 1002f5c:	100b883a 	mov	r5,r2
 1002f60:	e13ffb17 	ldw	r4,-20(fp)
 1002f64:	10034140 	call	1003414 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 1002f68:	e0bffe17 	ldw	r2,-8(fp)
 1002f6c:	e0bffa15 	stw	r2,-24(fp)
			pxStreamBuffer->xTail = xOriginalTail;
 1002f70:	e0bffb17 	ldw	r2,-20(fp)
 1002f74:	e0fffd17 	ldw	r3,-12(fp)
 1002f78:	10c00015 	stw	r3,0(r2)
 1002f7c:	00000306 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
 1002f80:	e03ffa15 	stw	zero,-24(fp)
 1002f84:	00000106 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
		}
	}
	else
	{
		xReturn = 0;
 1002f88:	e03ffa15 	stw	zero,-24(fp)
	}

	return xReturn;
 1002f8c:	e0bffa17 	ldw	r2,-24(fp)
}
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002fa4:	defff404 	addi	sp,sp,-48
 1002fa8:	dfc00b15 	stw	ra,44(sp)
 1002fac:	df000a15 	stw	fp,40(sp)
 1002fb0:	df000a04 	addi	fp,sp,40
 1002fb4:	e13ffc15 	stw	r4,-16(fp)
 1002fb8:	e17ffd15 	stw	r5,-12(fp)
 1002fbc:	e1bffe15 	stw	r6,-8(fp)
 1002fc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002fc4:	e0bffc17 	ldw	r2,-16(fp)
 1002fc8:	e0bff915 	stw	r2,-28(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002fcc:	e03ff715 	stw	zero,-36(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002fd0:	e0bff917 	ldw	r2,-28(fp)
 1002fd4:	10800703 	ldbu	r2,28(r2)
 1002fd8:	10803fcc 	andi	r2,r2,255
 1002fdc:	1080004c 	andi	r2,r2,1
 1002fe0:	10000326 	beq	r2,zero,1002ff0 <xStreamBufferReceiveFromISR+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002fe4:	00800104 	movi	r2,4
 1002fe8:	e0bff815 	stw	r2,-32(fp)
 1002fec:	00000106 	br	1002ff4 <xStreamBufferReceiveFromISR+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002ff0:	e03ff815 	stw	zero,-32(fp)
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002ff4:	e13ff917 	ldw	r4,-28(fp)
 1002ff8:	10035280 	call	1003528 <prvBytesInBuffer>
 1002ffc:	e0bffa15 	stw	r2,-24(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1003000:	e0bffa17 	ldw	r2,-24(fp)
 1003004:	e0fff817 	ldw	r3,-32(fp)
 1003008:	1880192e 	bgeu	r3,r2,1003070 <xStreamBufferReceiveFromISR+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 100300c:	e0bff817 	ldw	r2,-32(fp)
 1003010:	d8800015 	stw	r2,0(sp)
 1003014:	e1fffa17 	ldw	r7,-24(fp)
 1003018:	e1bffe17 	ldw	r6,-8(fp)
 100301c:	e17ffd17 	ldw	r5,-12(fp)
 1003020:	e13ff917 	ldw	r4,-28(fp)
 1003024:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1003028:	e0bff715 	stw	r2,-36(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 100302c:	e0bff717 	ldw	r2,-36(fp)
 1003030:	10000f26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1003034:	e03ffb15 	stw	zero,-20(fp)
 1003038:	e0bff917 	ldw	r2,-28(fp)
 100303c:	10800517 	ldw	r2,20(r2)
 1003040:	10000b26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
 1003044:	e0bff917 	ldw	r2,-28(fp)
 1003048:	10c00517 	ldw	r3,20(r2)
 100304c:	e0bfff17 	ldw	r2,-4(fp)
 1003050:	d8800015 	stw	r2,0(sp)
 1003054:	000f883a 	mov	r7,zero
 1003058:	000d883a 	mov	r6,zero
 100305c:	000b883a 	mov	r5,zero
 1003060:	1809883a 	mov	r4,r3
 1003064:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1003068:	e0bff917 	ldw	r2,-28(fp)
 100306c:	10000515 	stw	zero,20(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 1003070:	e0bff717 	ldw	r2,-36(fp)
}
 1003074:	e037883a 	mov	sp,fp
 1003078:	dfc00117 	ldw	ra,4(sp)
 100307c:	df000017 	ldw	fp,0(sp)
 1003080:	dec00204 	addi	sp,sp,8
 1003084:	f800283a 	ret

01003088 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 1003088:	defff604 	addi	sp,sp,-40
 100308c:	dfc00915 	stw	ra,36(sp)
 1003090:	df000815 	stw	fp,32(sp)
 1003094:	df000804 	addi	fp,sp,32
 1003098:	e13ffc15 	stw	r4,-16(fp)
 100309c:	e17ffd15 	stw	r5,-12(fp)
 10030a0:	e1bffe15 	stw	r6,-8(fp)
 10030a4:	e1ffff15 	stw	r7,-4(fp)
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 10030a8:	e0800217 	ldw	r2,8(fp)
 10030ac:	10001726 	beq	r2,zero,100310c <prvReadMessageFromBuffer+0x84>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 10030b0:	e0bffc17 	ldw	r2,-16(fp)
 10030b4:	10800017 	ldw	r2,0(r2)
 10030b8:	e0bff915 	stw	r2,-28(fp)
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 10030bc:	e0bffb04 	addi	r2,fp,-20
 10030c0:	e1ffff17 	ldw	r7,-4(fp)
 10030c4:	e1800217 	ldw	r6,8(fp)
 10030c8:	100b883a 	mov	r5,r2
 10030cc:	e13ffc17 	ldw	r4,-16(fp)
 10030d0:	10034140 	call	1003414 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 10030d4:	e0bffb17 	ldw	r2,-20(fp)
 10030d8:	e0bff815 	stw	r2,-32(fp)

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 10030dc:	e0ffff17 	ldw	r3,-4(fp)
 10030e0:	e0800217 	ldw	r2,8(fp)
 10030e4:	1885c83a 	sub	r2,r3,r2
 10030e8:	e0bfff15 	stw	r2,-4(fp)

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 10030ec:	e0bff817 	ldw	r2,-32(fp)
 10030f0:	e0fffe17 	ldw	r3,-8(fp)
 10030f4:	1880072e 	bgeu	r3,r2,1003114 <prvReadMessageFromBuffer+0x8c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 10030f8:	e0bffc17 	ldw	r2,-16(fp)
 10030fc:	e0fff917 	ldw	r3,-28(fp)
 1003100:	10c00015 	stw	r3,0(r2)
			xNextMessageLength = 0;
 1003104:	e03ff815 	stw	zero,-32(fp)
 1003108:	00000206 	br	1003114 <prvReadMessageFromBuffer+0x8c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 100310c:	e0bffe17 	ldw	r2,-8(fp)
 1003110:	e0bff815 	stw	r2,-32(fp)
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 1003114:	e1ffff17 	ldw	r7,-4(fp)
 1003118:	e1bff817 	ldw	r6,-32(fp)
 100311c:	e17ffd17 	ldw	r5,-12(fp)
 1003120:	e13ffc17 	ldw	r4,-16(fp)
 1003124:	10034140 	call	1003414 <prvReadBytesFromBuffer>
 1003128:	e0bffa15 	stw	r2,-24(fp)

	return xReceivedLength;
 100312c:	e0bffa17 	ldw	r2,-24(fp)
}
 1003130:	e037883a 	mov	sp,fp
 1003134:	dfc00117 	ldw	ra,4(sp)
 1003138:	df000017 	ldw	fp,0(sp)
 100313c:	dec00204 	addi	sp,sp,8
 1003140:	f800283a 	ret

01003144 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 1003144:	defffb04 	addi	sp,sp,-20
 1003148:	df000415 	stw	fp,16(sp)
 100314c:	df000404 	addi	fp,sp,16
 1003150:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003154:	e0bfff17 	ldw	r2,-4(fp)
 1003158:	e0bffd15 	stw	r2,-12(fp)
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 100315c:	e0bffd17 	ldw	r2,-12(fp)
 1003160:	10800017 	ldw	r2,0(r2)
 1003164:	e0bffe15 	stw	r2,-8(fp)
	if( pxStreamBuffer->xHead == xTail )
 1003168:	e0bffd17 	ldw	r2,-12(fp)
 100316c:	10c00117 	ldw	r3,4(r2)
 1003170:	e0bffe17 	ldw	r2,-8(fp)
 1003174:	1880031e 	bne	r3,r2,1003184 <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 1003178:	00800044 	movi	r2,1
 100317c:	e0bffc15 	stw	r2,-16(fp)
 1003180:	00000106 	br	1003188 <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 1003184:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003188:	e0bffc17 	ldw	r2,-16(fp)
}
 100318c:	e037883a 	mov	sp,fp
 1003190:	df000017 	ldw	fp,0(sp)
 1003194:	dec00104 	addi	sp,sp,4
 1003198:	f800283a 	ret

0100319c <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 100319c:	defffa04 	addi	sp,sp,-24
 10031a0:	dfc00515 	stw	ra,20(sp)
 10031a4:	df000415 	stw	fp,16(sp)
 10031a8:	df000404 	addi	fp,sp,16
 10031ac:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10031b0:	e0bfff17 	ldw	r2,-4(fp)
 10031b4:	e0bffe15 	stw	r2,-8(fp)

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 10031b8:	e0bffe17 	ldw	r2,-8(fp)
 10031bc:	10800703 	ldbu	r2,28(r2)
 10031c0:	10803fcc 	andi	r2,r2,255
 10031c4:	1080004c 	andi	r2,r2,1
 10031c8:	10000326 	beq	r2,zero,10031d8 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 10031cc:	00800104 	movi	r2,4
 10031d0:	e0bffd15 	stw	r2,-12(fp)
 10031d4:	00000106 	br	10031dc <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 10031d8:	e03ffd15 	stw	zero,-12(fp)
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 10031dc:	e13fff17 	ldw	r4,-4(fp)
 10031e0:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 10031e4:	1007883a 	mov	r3,r2
 10031e8:	e0bffd17 	ldw	r2,-12(fp)
 10031ec:	10c00336 	bltu	r2,r3,10031fc <xStreamBufferIsFull+0x60>
	{
		xReturn = pdTRUE;
 10031f0:	00800044 	movi	r2,1
 10031f4:	e0bffc15 	stw	r2,-16(fp)
 10031f8:	00000106 	br	1003200 <xStreamBufferIsFull+0x64>
	}
	else
	{
		xReturn = pdFALSE;
 10031fc:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003200:	e0bffc17 	ldw	r2,-16(fp)
}
 1003204:	e037883a 	mov	sp,fp
 1003208:	dfc00117 	ldw	ra,4(sp)
 100320c:	df000017 	ldw	fp,0(sp)
 1003210:	dec00204 	addi	sp,sp,8
 1003214:	f800283a 	ret

01003218 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 1003218:	defff804 	addi	sp,sp,-32
 100321c:	dfc00715 	stw	ra,28(sp)
 1003220:	df000615 	stw	fp,24(sp)
 1003224:	df000604 	addi	fp,sp,24
 1003228:	e13ffe15 	stw	r4,-8(fp)
 100322c:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003230:	e0bffe17 	ldw	r2,-8(fp)
 1003234:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1003238:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 100323c:	e0bffc17 	ldw	r2,-16(fp)
 1003240:	10800417 	ldw	r2,16(r2)
 1003244:	10000e26 	beq	r2,zero,1003280 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1003248:	e0bffc17 	ldw	r2,-16(fp)
 100324c:	10c00417 	ldw	r3,16(r2)
 1003250:	e0bfff17 	ldw	r2,-4(fp)
 1003254:	d8800015 	stw	r2,0(sp)
 1003258:	000f883a 	mov	r7,zero
 100325c:	000d883a 	mov	r6,zero
 1003260:	000b883a 	mov	r5,zero
 1003264:	1809883a 	mov	r4,r3
 1003268:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 100326c:	e0bffc17 	ldw	r2,-16(fp)
 1003270:	10000415 	stw	zero,16(r2)
			xReturn = pdTRUE;
 1003274:	00800044 	movi	r2,1
 1003278:	e0bffb15 	stw	r2,-20(fp)
 100327c:	00000106 	br	1003284 <xStreamBufferSendCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003280:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003284:	e0bffb17 	ldw	r2,-20(fp)
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 100329c:	defff804 	addi	sp,sp,-32
 10032a0:	dfc00715 	stw	ra,28(sp)
 10032a4:	df000615 	stw	fp,24(sp)
 10032a8:	df000604 	addi	fp,sp,24
 10032ac:	e13ffe15 	stw	r4,-8(fp)
 10032b0:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10032b4:	e0bffe17 	ldw	r2,-8(fp)
 10032b8:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 10032bc:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 10032c0:	e0bffc17 	ldw	r2,-16(fp)
 10032c4:	10800517 	ldw	r2,20(r2)
 10032c8:	10000e26 	beq	r2,zero,1003304 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 10032cc:	e0bffc17 	ldw	r2,-16(fp)
 10032d0:	10c00517 	ldw	r3,20(r2)
 10032d4:	e0bfff17 	ldw	r2,-4(fp)
 10032d8:	d8800015 	stw	r2,0(sp)
 10032dc:	000f883a 	mov	r7,zero
 10032e0:	000d883a 	mov	r6,zero
 10032e4:	000b883a 	mov	r5,zero
 10032e8:	1809883a 	mov	r4,r3
 10032ec:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 10032f0:	e0bffc17 	ldw	r2,-16(fp)
 10032f4:	10000515 	stw	zero,20(r2)
			xReturn = pdTRUE;
 10032f8:	00800044 	movi	r2,1
 10032fc:	e0bffb15 	stw	r2,-20(fp)
 1003300:	00000106 	br	1003308 <xStreamBufferReceiveCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003304:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003308:	e0bffb17 	ldw	r2,-20(fp)
}
 100330c:	e037883a 	mov	sp,fp
 1003310:	dfc00117 	ldw	ra,4(sp)
 1003314:	df000017 	ldw	fp,0(sp)
 1003318:	dec00204 	addi	sp,sp,8
 100331c:	f800283a 	ret

01003320 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 1003320:	defff904 	addi	sp,sp,-28
 1003324:	dfc00615 	stw	ra,24(sp)
 1003328:	df000515 	stw	fp,20(sp)
 100332c:	df000504 	addi	fp,sp,20
 1003330:	e13ffd15 	stw	r4,-12(fp)
 1003334:	e17ffe15 	stw	r5,-8(fp)
 1003338:	e1bfff15 	stw	r6,-4(fp)
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
 100333c:	e0bffd17 	ldw	r2,-12(fp)
 1003340:	10800117 	ldw	r2,4(r2)
 1003344:	e0bffb15 	stw	r2,-20(fp)

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1003348:	e0bffd17 	ldw	r2,-12(fp)
 100334c:	10c00217 	ldw	r3,8(r2)
 1003350:	e0bffb17 	ldw	r2,-20(fp)
 1003354:	1885c83a 	sub	r2,r3,r2
 1003358:	e0ffff17 	ldw	r3,-4(fp)
 100335c:	1880012e 	bgeu	r3,r2,1003364 <prvWriteBytesToBuffer+0x44>
 1003360:	1805883a 	mov	r2,r3
 1003364:	e0bffc15 	stw	r2,-16(fp)

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003368:	e0bffd17 	ldw	r2,-12(fp)
 100336c:	10c00617 	ldw	r3,24(r2)
 1003370:	e0bffb17 	ldw	r2,-20(fp)
 1003374:	1885883a 	add	r2,r3,r2
 1003378:	e1bffc17 	ldw	r6,-16(fp)
 100337c:	e17ffe17 	ldw	r5,-8(fp)
 1003380:	1009883a 	mov	r4,r2
 1003384:	10139e80 	call	10139e8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 1003388:	e0bfff17 	ldw	r2,-4(fp)
 100338c:	e0fffc17 	ldw	r3,-16(fp)
 1003390:	18800a2e 	bgeu	r3,r2,10033bc <prvWriteBytesToBuffer+0x9c>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003394:	e0bffd17 	ldw	r2,-12(fp)
 1003398:	11000617 	ldw	r4,24(r2)
 100339c:	e0fffe17 	ldw	r3,-8(fp)
 10033a0:	e0bffc17 	ldw	r2,-16(fp)
 10033a4:	188b883a 	add	r5,r3,r2
 10033a8:	e0ffff17 	ldw	r3,-4(fp)
 10033ac:	e0bffc17 	ldw	r2,-16(fp)
 10033b0:	1885c83a 	sub	r2,r3,r2
 10033b4:	100d883a 	mov	r6,r2
 10033b8:	10139e80 	call	10139e8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 10033bc:	e0fffb17 	ldw	r3,-20(fp)
 10033c0:	e0bfff17 	ldw	r2,-4(fp)
 10033c4:	1885883a 	add	r2,r3,r2
 10033c8:	e0bffb15 	stw	r2,-20(fp)
	if( xNextHead >= pxStreamBuffer->xLength )
 10033cc:	e0bffd17 	ldw	r2,-12(fp)
 10033d0:	10800217 	ldw	r2,8(r2)
 10033d4:	e0fffb17 	ldw	r3,-20(fp)
 10033d8:	18800536 	bltu	r3,r2,10033f0 <prvWriteBytesToBuffer+0xd0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 10033dc:	e0bffd17 	ldw	r2,-12(fp)
 10033e0:	10800217 	ldw	r2,8(r2)
 10033e4:	e0fffb17 	ldw	r3,-20(fp)
 10033e8:	1885c83a 	sub	r2,r3,r2
 10033ec:	e0bffb15 	stw	r2,-20(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 10033f0:	e0bffd17 	ldw	r2,-12(fp)
 10033f4:	e0fffb17 	ldw	r3,-20(fp)
 10033f8:	10c00115 	stw	r3,4(r2)

	return xCount;
 10033fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003400:	e037883a 	mov	sp,fp
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	df000017 	ldw	fp,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 1003414:	defff704 	addi	sp,sp,-36
 1003418:	dfc00815 	stw	ra,32(sp)
 100341c:	df000715 	stw	fp,28(sp)
 1003420:	df000704 	addi	fp,sp,28
 1003424:	e13ffc15 	stw	r4,-16(fp)
 1003428:	e17ffd15 	stw	r5,-12(fp)
 100342c:	e1bffe15 	stw	r6,-8(fp)
 1003430:	e1ffff15 	stw	r7,-4(fp)
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 1003434:	e0ffff17 	ldw	r3,-4(fp)
 1003438:	e0bffe17 	ldw	r2,-8(fp)
 100343c:	1880012e 	bgeu	r3,r2,1003444 <prvReadBytesFromBuffer+0x30>
 1003440:	1805883a 	mov	r2,r3
 1003444:	e0bffa15 	stw	r2,-24(fp)

	if( xCount > ( size_t ) 0 )
 1003448:	e0bffa17 	ldw	r2,-24(fp)
 100344c:	10003026 	beq	r2,zero,1003510 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 1003450:	e0bffc17 	ldw	r2,-16(fp)
 1003454:	10800017 	ldw	r2,0(r2)
 1003458:	e0bff915 	stw	r2,-28(fp)

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 100345c:	e0bffc17 	ldw	r2,-16(fp)
 1003460:	10c00217 	ldw	r3,8(r2)
 1003464:	e0bff917 	ldw	r2,-28(fp)
 1003468:	1885c83a 	sub	r2,r3,r2
 100346c:	e0fffa17 	ldw	r3,-24(fp)
 1003470:	1880012e 	bgeu	r3,r2,1003478 <prvReadBytesFromBuffer+0x64>
 1003474:	1805883a 	mov	r2,r3
 1003478:	e0bffb15 	stw	r2,-20(fp)

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 100347c:	e0bffc17 	ldw	r2,-16(fp)
 1003480:	10c00617 	ldw	r3,24(r2)
 1003484:	e0bff917 	ldw	r2,-28(fp)
 1003488:	1885883a 	add	r2,r3,r2
 100348c:	e1bffb17 	ldw	r6,-20(fp)
 1003490:	100b883a 	mov	r5,r2
 1003494:	e13ffd17 	ldw	r4,-12(fp)
 1003498:	10139e80 	call	10139e8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 100349c:	e0bffa17 	ldw	r2,-24(fp)
 10034a0:	e0fffb17 	ldw	r3,-20(fp)
 10034a4:	18800a2e 	bgeu	r3,r2,10034d0 <prvReadBytesFromBuffer+0xbc>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 10034a8:	e0fffd17 	ldw	r3,-12(fp)
 10034ac:	e0bffb17 	ldw	r2,-20(fp)
 10034b0:	1889883a 	add	r4,r3,r2
 10034b4:	e0bffc17 	ldw	r2,-16(fp)
 10034b8:	11400617 	ldw	r5,24(r2)
 10034bc:	e0fffa17 	ldw	r3,-24(fp)
 10034c0:	e0bffb17 	ldw	r2,-20(fp)
 10034c4:	1885c83a 	sub	r2,r3,r2
 10034c8:	100d883a 	mov	r6,r2
 10034cc:	10139e80 	call	10139e8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 10034d0:	e0fff917 	ldw	r3,-28(fp)
 10034d4:	e0bffa17 	ldw	r2,-24(fp)
 10034d8:	1885883a 	add	r2,r3,r2
 10034dc:	e0bff915 	stw	r2,-28(fp)

		if( xNextTail >= pxStreamBuffer->xLength )
 10034e0:	e0bffc17 	ldw	r2,-16(fp)
 10034e4:	10800217 	ldw	r2,8(r2)
 10034e8:	e0fff917 	ldw	r3,-28(fp)
 10034ec:	18800536 	bltu	r3,r2,1003504 <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 10034f0:	e0bffc17 	ldw	r2,-16(fp)
 10034f4:	10800217 	ldw	r2,8(r2)
 10034f8:	e0fff917 	ldw	r3,-28(fp)
 10034fc:	1885c83a 	sub	r2,r3,r2
 1003500:	e0bff915 	stw	r2,-28(fp)
		}

		pxStreamBuffer->xTail = xNextTail;
 1003504:	e0bffc17 	ldw	r2,-16(fp)
 1003508:	e0fff917 	ldw	r3,-28(fp)
 100350c:	10c00015 	stw	r3,0(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003510:	e0bffa17 	ldw	r2,-24(fp)
}
 1003514:	e037883a 	mov	sp,fp
 1003518:	dfc00117 	ldw	ra,4(sp)
 100351c:	df000017 	ldw	fp,0(sp)
 1003520:	dec00204 	addi	sp,sp,8
 1003524:	f800283a 	ret

01003528 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 1003528:	defffd04 	addi	sp,sp,-12
 100352c:	df000215 	stw	fp,8(sp)
 1003530:	df000204 	addi	fp,sp,8
 1003534:	e13fff15 	stw	r4,-4(fp)
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1003538:	e0bfff17 	ldw	r2,-4(fp)
 100353c:	10c00217 	ldw	r3,8(r2)
 1003540:	e0bfff17 	ldw	r2,-4(fp)
 1003544:	10800117 	ldw	r2,4(r2)
 1003548:	1885883a 	add	r2,r3,r2
 100354c:	e0bffe15 	stw	r2,-8(fp)
	xCount -= pxStreamBuffer->xTail;
 1003550:	e0bfff17 	ldw	r2,-4(fp)
 1003554:	10800017 	ldw	r2,0(r2)
 1003558:	e0fffe17 	ldw	r3,-8(fp)
 100355c:	1885c83a 	sub	r2,r3,r2
 1003560:	e0bffe15 	stw	r2,-8(fp)
	if ( xCount >= pxStreamBuffer->xLength )
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	10800217 	ldw	r2,8(r2)
 100356c:	e0fffe17 	ldw	r3,-8(fp)
 1003570:	18800536 	bltu	r3,r2,1003588 <prvBytesInBuffer+0x60>
	{
		xCount -= pxStreamBuffer->xLength;
 1003574:	e0bfff17 	ldw	r2,-4(fp)
 1003578:	10800217 	ldw	r2,8(r2)
 100357c:	e0fffe17 	ldw	r3,-8(fp)
 1003580:	1885c83a 	sub	r2,r3,r2
 1003584:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003588:	e0bffe17 	ldw	r2,-8(fp)
}
 100358c:	e037883a 	mov	sp,fp
 1003590:	df000017 	ldw	fp,0(sp)
 1003594:	dec00104 	addi	sp,sp,4
 1003598:	f800283a 	ret

0100359c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 100359c:	defff904 	addi	sp,sp,-28
 10035a0:	dfc00615 	stw	ra,24(sp)
 10035a4:	df000515 	stw	fp,20(sp)
 10035a8:	df000504 	addi	fp,sp,20
 10035ac:	e13ffb15 	stw	r4,-20(fp)
 10035b0:	e17ffc15 	stw	r5,-16(fp)
 10035b4:	e1bffd15 	stw	r6,-12(fp)
 10035b8:	e1fffe15 	stw	r7,-8(fp)
 10035bc:	e0800217 	ldw	r2,8(fp)
 10035c0:	e0bfff05 	stb	r2,-4(fp)
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 10035c4:	01800804 	movi	r6,32
 10035c8:	000b883a 	mov	r5,zero
 10035cc:	e13ffb17 	ldw	r4,-20(fp)
 10035d0:	1013b300 	call	1013b30 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 10035d4:	e0bffb17 	ldw	r2,-20(fp)
 10035d8:	e0fffc17 	ldw	r3,-16(fp)
 10035dc:	10c00615 	stw	r3,24(r2)
	pxStreamBuffer->xLength = xBufferSizeBytes;
 10035e0:	e0bffb17 	ldw	r2,-20(fp)
 10035e4:	e0fffd17 	ldw	r3,-12(fp)
 10035e8:	10c00215 	stw	r3,8(r2)
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 10035ec:	e0bffb17 	ldw	r2,-20(fp)
 10035f0:	e0fffe17 	ldw	r3,-8(fp)
 10035f4:	10c00315 	stw	r3,12(r2)
	pxStreamBuffer->ucFlags = ucFlags;
 10035f8:	e0bffb17 	ldw	r2,-20(fp)
 10035fc:	e0ffff03 	ldbu	r3,-4(fp)
 1003600:	10c00705 	stb	r3,28(r2)
}
 1003604:	0001883a 	nop
 1003608:	e037883a 	mov	sp,fp
 100360c:	dfc00117 	ldw	ra,4(sp)
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00204 	addi	sp,sp,8
 1003618:	f800283a 	ret

0100361c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 100361c:	defff304 	addi	sp,sp,-52
 1003620:	dfc00c15 	stw	ra,48(sp)
 1003624:	df000b15 	stw	fp,44(sp)
 1003628:	df000b04 	addi	fp,sp,44
 100362c:	e13ffc15 	stw	r4,-16(fp)
 1003630:	e17ffd15 	stw	r5,-12(fp)
 1003634:	3005883a 	mov	r2,r6
 1003638:	e1ffff15 	stw	r7,-4(fp)
 100363c:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 1003640:	e0bffe0b 	ldhu	r2,-8(fp)
 1003644:	1085883a 	add	r2,r2,r2
 1003648:	1085883a 	add	r2,r2,r2
 100364c:	1009883a 	mov	r4,r2
 1003650:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003654:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 1003658:	e0bffb17 	ldw	r2,-20(fp)
 100365c:	10000c26 	beq	r2,zero,1003690 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 1003660:	01001404 	movi	r4,80
 1003664:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003668:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 100366c:	e0bff917 	ldw	r2,-28(fp)
 1003670:	10000426 	beq	r2,zero,1003684 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 1003674:	e0bff917 	ldw	r2,-28(fp)
 1003678:	e0fffb17 	ldw	r3,-20(fp)
 100367c:	10c00c15 	stw	r3,48(r2)
 1003680:	00000406 	br	1003694 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 1003684:	e13ffb17 	ldw	r4,-20(fp)
 1003688:	10011840 	call	1001184 <vPortFree>
 100368c:	00000106 	br	1003694 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 1003690:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 1003694:	e0bff917 	ldw	r2,-28(fp)
 1003698:	10001226 	beq	r2,zero,10036e4 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 100369c:	e0fffe0b 	ldhu	r3,-8(fp)
 10036a0:	d8000315 	stw	zero,12(sp)
 10036a4:	e0bff917 	ldw	r2,-28(fp)
 10036a8:	d8800215 	stw	r2,8(sp)
 10036ac:	e0800317 	ldw	r2,12(fp)
 10036b0:	d8800115 	stw	r2,4(sp)
 10036b4:	e0800217 	ldw	r2,8(fp)
 10036b8:	d8800015 	stw	r2,0(sp)
 10036bc:	e1ffff17 	ldw	r7,-4(fp)
 10036c0:	180d883a 	mov	r6,r3
 10036c4:	e17ffd17 	ldw	r5,-12(fp)
 10036c8:	e13ffc17 	ldw	r4,-16(fp)
 10036cc:	10037040 	call	1003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 10036d0:	e13ff917 	ldw	r4,-28(fp)
 10036d4:	10038e80 	call	10038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 10036d8:	00800044 	movi	r2,1
 10036dc:	e0bffa15 	stw	r2,-24(fp)
 10036e0:	00000206 	br	10036ec <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 10036e4:	00bfffc4 	movi	r2,-1
 10036e8:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 10036ec:	e0bffa17 	ldw	r2,-24(fp)
	}
 10036f0:	e037883a 	mov	sp,fp
 10036f4:	dfc00117 	ldw	ra,4(sp)
 10036f8:	df000017 	ldw	fp,0(sp)
 10036fc:	dec00204 	addi	sp,sp,8
 1003700:	f800283a 	ret

01003704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 1003704:	defff804 	addi	sp,sp,-32
 1003708:	dfc00715 	stw	ra,28(sp)
 100370c:	df000615 	stw	fp,24(sp)
 1003710:	df000604 	addi	fp,sp,24
 1003714:	e13ffc15 	stw	r4,-16(fp)
 1003718:	e17ffd15 	stw	r5,-12(fp)
 100371c:	e1bffe15 	stw	r6,-8(fp)
 1003720:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 1003724:	e0800417 	ldw	r2,16(fp)
 1003728:	10c00c17 	ldw	r3,48(r2)
 100372c:	e0bffe17 	ldw	r2,-8(fp)
 1003730:	1085883a 	add	r2,r2,r2
 1003734:	1085883a 	add	r2,r2,r2
 1003738:	100d883a 	mov	r6,r2
 100373c:	01402944 	movi	r5,165
 1003740:	1809883a 	mov	r4,r3
 1003744:	1013b300 	call	1013b30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 1003748:	e0800417 	ldw	r2,16(fp)
 100374c:	10c00c17 	ldw	r3,48(r2)
 1003750:	e13ffe17 	ldw	r4,-8(fp)
 1003754:	00900034 	movhi	r2,16384
 1003758:	10bfffc4 	addi	r2,r2,-1
 100375c:	2085883a 	add	r2,r4,r2
 1003760:	1085883a 	add	r2,r2,r2
 1003764:	1085883a 	add	r2,r2,r2
 1003768:	1885883a 	add	r2,r3,r2
 100376c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 1003770:	e0fffb17 	ldw	r3,-20(fp)
 1003774:	00bfff04 	movi	r2,-4
 1003778:	1884703a 	and	r2,r3,r2
 100377c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 1003780:	e0bffd17 	ldw	r2,-12(fp)
 1003784:	10001e26 	beq	r2,zero,1003800 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 1003788:	e03ffa15 	stw	zero,-24(fp)
 100378c:	00001406 	br	10037e0 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 1003790:	e0fffd17 	ldw	r3,-12(fp)
 1003794:	e0bffa17 	ldw	r2,-24(fp)
 1003798:	1885883a 	add	r2,r3,r2
 100379c:	10c00003 	ldbu	r3,0(r2)
 10037a0:	e1000417 	ldw	r4,16(fp)
 10037a4:	e0bffa17 	ldw	r2,-24(fp)
 10037a8:	2085883a 	add	r2,r4,r2
 10037ac:	10800d04 	addi	r2,r2,52
 10037b0:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 10037b4:	e0fffd17 	ldw	r3,-12(fp)
 10037b8:	e0bffa17 	ldw	r2,-24(fp)
 10037bc:	1885883a 	add	r2,r3,r2
 10037c0:	10800003 	ldbu	r2,0(r2)
 10037c4:	10803fcc 	andi	r2,r2,255
 10037c8:	1080201c 	xori	r2,r2,128
 10037cc:	10bfe004 	addi	r2,r2,-128
 10037d0:	10000726 	beq	r2,zero,10037f0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 10037d4:	e0bffa17 	ldw	r2,-24(fp)
 10037d8:	10800044 	addi	r2,r2,1
 10037dc:	e0bffa15 	stw	r2,-24(fp)
 10037e0:	e0bffa17 	ldw	r2,-24(fp)
 10037e4:	10800230 	cmpltui	r2,r2,8
 10037e8:	103fe91e 	bne	r2,zero,1003790 <__alt_data_end+0xff003790>
 10037ec:	00000106 	br	10037f4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 10037f0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 10037f4:	e0800417 	ldw	r2,16(fp)
 10037f8:	10000ec5 	stb	zero,59(r2)
 10037fc:	00000206 	br	1003808 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 1003800:	e0800417 	ldw	r2,16(fp)
 1003804:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003808:	e0800217 	ldw	r2,8(fp)
 100380c:	10800170 	cmpltui	r2,r2,5
 1003810:	1000021e 	bne	r2,zero,100381c <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003814:	00800104 	movi	r2,4
 1003818:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 100381c:	e0800417 	ldw	r2,16(fp)
 1003820:	e0c00217 	ldw	r3,8(fp)
 1003824:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 1003828:	e0800417 	ldw	r2,16(fp)
 100382c:	e0c00217 	ldw	r3,8(fp)
 1003830:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 1003834:	e0800417 	ldw	r2,16(fp)
 1003838:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 100383c:	e0800417 	ldw	r2,16(fp)
 1003840:	10800104 	addi	r2,r2,4
 1003844:	1009883a 	mov	r4,r2
 1003848:	1000b540 	call	1000b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 100384c:	e0800417 	ldw	r2,16(fp)
 1003850:	10800604 	addi	r2,r2,24
 1003854:	1009883a 	mov	r4,r2
 1003858:	1000b540 	call	1000b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 100385c:	e0800417 	ldw	r2,16(fp)
 1003860:	e0c00417 	ldw	r3,16(fp)
 1003864:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003868:	00c00144 	movi	r3,5
 100386c:	e0800217 	ldw	r2,8(fp)
 1003870:	1887c83a 	sub	r3,r3,r2
 1003874:	e0800417 	ldw	r2,16(fp)
 1003878:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 100387c:	e0800417 	ldw	r2,16(fp)
 1003880:	e0c00417 	ldw	r3,16(fp)
 1003884:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 1003888:	e0800417 	ldw	r2,16(fp)
 100388c:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 1003890:	e0800417 	ldw	r2,16(fp)
 1003894:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003898:	e0800417 	ldw	r2,16(fp)
 100389c:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 10038a0:	e1bfff17 	ldw	r6,-4(fp)
 10038a4:	e17ffc17 	ldw	r5,-16(fp)
 10038a8:	e13ffb17 	ldw	r4,-20(fp)
 10038ac:	1000da80 	call	1000da8 <pxPortInitialiseStack>
 10038b0:	1007883a 	mov	r3,r2
 10038b4:	e0800417 	ldw	r2,16(fp)
 10038b8:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 10038bc:	e0800317 	ldw	r2,12(fp)
 10038c0:	10000326 	beq	r2,zero,10038d0 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 10038c4:	e0800317 	ldw	r2,12(fp)
 10038c8:	e0c00417 	ldw	r3,16(fp)
 10038cc:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10038d0:	0001883a 	nop
 10038d4:	e037883a 	mov	sp,fp
 10038d8:	dfc00117 	ldw	ra,4(sp)
 10038dc:	df000017 	ldw	fp,0(sp)
 10038e0:	dec00204 	addi	sp,sp,8
 10038e4:	f800283a 	ret

010038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 10038e8:	defffd04 	addi	sp,sp,-12
 10038ec:	dfc00215 	stw	ra,8(sp)
 10038f0:	df000115 	stw	fp,4(sp)
 10038f4:	df000104 	addi	fp,sp,4
 10038f8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 10038fc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 1003900:	d0a71d17 	ldw	r2,-25484(gp)
 1003904:	10800044 	addi	r2,r2,1
 1003908:	d0a71d15 	stw	r2,-25484(gp)
		if( pxCurrentTCB == NULL )
 100390c:	d0a71917 	ldw	r2,-25500(gp)
 1003910:	1000071e 	bne	r2,zero,1003930 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 1003914:	e0bfff17 	ldw	r2,-4(fp)
 1003918:	d0a71915 	stw	r2,-25500(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 100391c:	d0a71d17 	ldw	r2,-25484(gp)
 1003920:	10800058 	cmpnei	r2,r2,1
 1003924:	10000b1e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 1003928:	1004c380 	call	1004c38 <prvInitialiseTaskLists>
 100392c:	00000906 	br	1003954 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 1003930:	d0a72017 	ldw	r2,-25472(gp)
 1003934:	1000071e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 1003938:	d0a71917 	ldw	r2,-25500(gp)
 100393c:	10800b17 	ldw	r2,44(r2)
 1003940:	e0ffff17 	ldw	r3,-4(fp)
 1003944:	18c00b17 	ldw	r3,44(r3)
 1003948:	18800236 	bltu	r3,r2,1003954 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 100394c:	e0bfff17 	ldw	r2,-4(fp)
 1003950:	d0a71915 	stw	r2,-25500(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 1003954:	d0a72417 	ldw	r2,-25456(gp)
 1003958:	10800044 	addi	r2,r2,1
 100395c:	d0a72415 	stw	r2,-25456(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 1003960:	e0bfff17 	ldw	r2,-4(fp)
 1003964:	10800b17 	ldw	r2,44(r2)
 1003968:	d0e71f17 	ldw	r3,-25476(gp)
 100396c:	1880032e 	bgeu	r3,r2,100397c <prvAddNewTaskToReadyList+0x94>
 1003970:	e0bfff17 	ldw	r2,-4(fp)
 1003974:	10800b17 	ldw	r2,44(r2)
 1003978:	d0a71f15 	stw	r2,-25476(gp)
 100397c:	e0bfff17 	ldw	r2,-4(fp)
 1003980:	10800b17 	ldw	r2,44(r2)
 1003984:	10c00524 	muli	r3,r2,20
 1003988:	008060f4 	movhi	r2,387
 100398c:	10a89e04 	addi	r2,r2,-23944
 1003990:	1887883a 	add	r3,r3,r2
 1003994:	e0bfff17 	ldw	r2,-4(fp)
 1003998:	10800104 	addi	r2,r2,4
 100399c:	100b883a 	mov	r5,r2
 10039a0:	1809883a 	mov	r4,r3
 10039a4:	1000b800 	call	1000b80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 10039a8:	10052c40 	call	10052c4 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 10039ac:	d0a72017 	ldw	r2,-25472(gp)
 10039b0:	10000626 	beq	r2,zero,10039cc <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 10039b4:	d0a71917 	ldw	r2,-25500(gp)
 10039b8:	10c00b17 	ldw	r3,44(r2)
 10039bc:	e0bfff17 	ldw	r2,-4(fp)
 10039c0:	10800b17 	ldw	r2,44(r2)
 10039c4:	1880012e 	bgeu	r3,r2,10039cc <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 10039c8:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10039cc:	0001883a 	nop
 10039d0:	e037883a 	mov	sp,fp
 10039d4:	dfc00117 	ldw	ra,4(sp)
 10039d8:	df000017 	ldw	fp,0(sp)
 10039dc:	dec00204 	addi	sp,sp,8
 10039e0:	f800283a 	ret

010039e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 10039e4:	defffc04 	addi	sp,sp,-16
 10039e8:	dfc00315 	stw	ra,12(sp)
 10039ec:	df000215 	stw	fp,8(sp)
 10039f0:	df000204 	addi	fp,sp,8
 10039f4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 10039f8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 10039fc:	e0bfff17 	ldw	r2,-4(fp)
 1003a00:	1000021e 	bne	r2,zero,1003a0c <vTaskDelete+0x28>
 1003a04:	d0a71917 	ldw	r2,-25500(gp)
 1003a08:	00000106 	br	1003a10 <vTaskDelete+0x2c>
 1003a0c:	e0bfff17 	ldw	r2,-4(fp)
 1003a10:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003a14:	e0bffe17 	ldw	r2,-8(fp)
 1003a18:	10800104 	addi	r2,r2,4
 1003a1c:	1009883a 	mov	r4,r2
 1003a20:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003a24:	e0bffe17 	ldw	r2,-8(fp)
 1003a28:	10800a17 	ldw	r2,40(r2)
 1003a2c:	10000426 	beq	r2,zero,1003a40 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003a30:	e0bffe17 	ldw	r2,-8(fp)
 1003a34:	10800604 	addi	r2,r2,24
 1003a38:	1009883a 	mov	r4,r2
 1003a3c:	1000ce40 	call	1000ce4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 1003a40:	d0a72417 	ldw	r2,-25456(gp)
 1003a44:	10800044 	addi	r2,r2,1
 1003a48:	d0a72415 	stw	r2,-25456(gp)

			if( pxTCB == pxCurrentTCB )
 1003a4c:	d0a71917 	ldw	r2,-25500(gp)
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	18800a1e 	bne	r3,r2,1003a80 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 1003a58:	e0bffe17 	ldw	r2,-8(fp)
 1003a5c:	10800104 	addi	r2,r2,4
 1003a60:	100b883a 	mov	r5,r2
 1003a64:	010060f4 	movhi	r4,387
 1003a68:	2128c604 	addi	r4,r4,-23784
 1003a6c:	1000b800 	call	1000b80 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 1003a70:	d0a71c17 	ldw	r2,-25488(gp)
 1003a74:	10800044 	addi	r2,r2,1
 1003a78:	d0a71c15 	stw	r2,-25488(gp)
 1003a7c:	00000606 	br	1003a98 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 1003a80:	d0a71d17 	ldw	r2,-25484(gp)
 1003a84:	10bfffc4 	addi	r2,r2,-1
 1003a88:	d0a71d15 	stw	r2,-25484(gp)
				prvDeleteTCB( pxTCB );
 1003a8c:	e13ffe17 	ldw	r4,-8(fp)
 1003a90:	1004e340 	call	1004e34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 1003a94:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 1003a98:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 1003a9c:	d0a72017 	ldw	r2,-25472(gp)
 1003aa0:	10000426 	beq	r2,zero,1003ab4 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 1003aa4:	d0a71917 	ldw	r2,-25500(gp)
 1003aa8:	e0fffe17 	ldw	r3,-8(fp)
 1003aac:	1880011e 	bne	r3,r2,1003ab4 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 1003ab0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 1003ab4:	0001883a 	nop
 1003ab8:	e037883a 	mov	sp,fp
 1003abc:	dfc00117 	ldw	ra,4(sp)
 1003ac0:	df000017 	ldw	fp,0(sp)
 1003ac4:	dec00204 	addi	sp,sp,8
 1003ac8:	f800283a 	ret

01003acc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 1003acc:	defff804 	addi	sp,sp,-32
 1003ad0:	dfc00715 	stw	ra,28(sp)
 1003ad4:	df000615 	stw	fp,24(sp)
 1003ad8:	df000604 	addi	fp,sp,24
 1003adc:	e13ffe15 	stw	r4,-8(fp)
 1003ae0:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1003ae4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 1003ae8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 1003aec:	d0a71e17 	ldw	r2,-25480(gp)
 1003af0:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1003af4:	e0bffe17 	ldw	r2,-8(fp)
 1003af8:	10c00017 	ldw	r3,0(r2)
 1003afc:	e0bfff17 	ldw	r2,-4(fp)
 1003b00:	1885883a 	add	r2,r3,r2
 1003b04:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 1003b08:	e0bffe17 	ldw	r2,-8(fp)
 1003b0c:	10800017 	ldw	r2,0(r2)
 1003b10:	e0fffb17 	ldw	r3,-20(fp)
 1003b14:	18800a2e 	bgeu	r3,r2,1003b40 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1003b18:	e0bffe17 	ldw	r2,-8(fp)
 1003b1c:	10800017 	ldw	r2,0(r2)
 1003b20:	e0fffc17 	ldw	r3,-16(fp)
 1003b24:	18800f2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
 1003b28:	e0bffc17 	ldw	r2,-16(fp)
 1003b2c:	e0fffb17 	ldw	r3,-20(fp)
 1003b30:	18800c2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b34:	00800044 	movi	r2,1
 1003b38:	e0bffa15 	stw	r2,-24(fp)
 1003b3c:	00000906 	br	1003b64 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1003b40:	e0bffe17 	ldw	r2,-8(fp)
 1003b44:	10800017 	ldw	r2,0(r2)
 1003b48:	e0fffc17 	ldw	r3,-16(fp)
 1003b4c:	18800336 	bltu	r3,r2,1003b5c <vTaskDelayUntil+0x90>
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	e0fffb17 	ldw	r3,-20(fp)
 1003b58:	1880022e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b5c:	00800044 	movi	r2,1
 1003b60:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 1003b64:	e0bffe17 	ldw	r2,-8(fp)
 1003b68:	e0fffc17 	ldw	r3,-16(fp)
 1003b6c:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 1003b70:	e0bffa17 	ldw	r2,-24(fp)
 1003b74:	10000626 	beq	r2,zero,1003b90 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1003b78:	e0fffc17 	ldw	r3,-16(fp)
 1003b7c:	e0bffb17 	ldw	r2,-20(fp)
 1003b80:	1885c83a 	sub	r2,r3,r2
 1003b84:	000b883a 	mov	r5,zero
 1003b88:	1009883a 	mov	r4,r2
 1003b8c:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 1003b90:	10043880 	call	1004388 <xTaskResumeAll>
 1003b94:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003b98:	e0bffd17 	ldw	r2,-12(fp)
 1003b9c:	1000011e 	bne	r2,zero,1003ba4 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 1003ba0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003ba4:	0001883a 	nop
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	dfc00117 	ldw	ra,4(sp)
 1003bb0:	df000017 	ldw	fp,0(sp)
 1003bb4:	dec00204 	addi	sp,sp,8
 1003bb8:	f800283a 	ret

01003bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 1003bbc:	defffc04 	addi	sp,sp,-16
 1003bc0:	dfc00315 	stw	ra,12(sp)
 1003bc4:	df000215 	stw	fp,8(sp)
 1003bc8:	df000204 	addi	fp,sp,8
 1003bcc:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 1003bd0:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 1003bd4:	e0bfff17 	ldw	r2,-4(fp)
 1003bd8:	10000626 	beq	r2,zero,1003bf4 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 1003bdc:	100435c0 	call	100435c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1003be0:	000b883a 	mov	r5,zero
 1003be4:	e13fff17 	ldw	r4,-4(fp)
 1003be8:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 1003bec:	10043880 	call	1004388 <xTaskResumeAll>
 1003bf0:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003bf4:	e0bffe17 	ldw	r2,-8(fp)
 1003bf8:	1000011e 	bne	r2,zero,1003c00 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 1003bfc:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003c00:	0001883a 	nop
 1003c04:	e037883a 	mov	sp,fp
 1003c08:	dfc00117 	ldw	ra,4(sp)
 1003c0c:	df000017 	ldw	fp,0(sp)
 1003c10:	dec00204 	addi	sp,sp,8
 1003c14:	f800283a 	ret

01003c18 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 1003c18:	defff804 	addi	sp,sp,-32
 1003c1c:	dfc00715 	stw	ra,28(sp)
 1003c20:	df000615 	stw	fp,24(sp)
 1003c24:	df000604 	addi	fp,sp,24
 1003c28:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 1003c2c:	e0bfff17 	ldw	r2,-4(fp)
 1003c30:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 1003c34:	d0a71917 	ldw	r2,-25500(gp)
 1003c38:	e0fffb17 	ldw	r3,-20(fp)
 1003c3c:	1880021e 	bne	r3,r2,1003c48 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 1003c40:	e03ffa15 	stw	zero,-24(fp)
 1003c44:	00003206 	br	1003d10 <eTaskGetState+0xf8>
		}
		else
		{
			taskENTER_CRITICAL();
 1003c48:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1003c4c:	e0bffb17 	ldw	r2,-20(fp)
 1003c50:	10800517 	ldw	r2,20(r2)
 1003c54:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 1003c58:	d0a71a17 	ldw	r2,-25496(gp)
 1003c5c:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1003c60:	d0a71b17 	ldw	r2,-25492(gp)
 1003c64:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 1003c68:	10052c40 	call	10052c4 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1003c6c:	e0fffc17 	ldw	r3,-16(fp)
 1003c70:	e0bffd17 	ldw	r2,-12(fp)
 1003c74:	18800326 	beq	r3,r2,1003c84 <eTaskGetState+0x6c>
 1003c78:	e0fffc17 	ldw	r3,-16(fp)
 1003c7c:	e0bffe17 	ldw	r2,-8(fp)
 1003c80:	1880031e 	bne	r3,r2,1003c90 <eTaskGetState+0x78>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 1003c84:	00800084 	movi	r2,2
 1003c88:	e0bffa15 	stw	r2,-24(fp)
 1003c8c:	00002006 	br	1003d10 <eTaskGetState+0xf8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 1003c90:	e0fffc17 	ldw	r3,-16(fp)
 1003c94:	008060f4 	movhi	r2,387
 1003c98:	10a8cb04 	addi	r2,r2,-23764
 1003c9c:	1880111e 	bne	r3,r2,1003ce4 <eTaskGetState+0xcc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1003ca0:	e0bffb17 	ldw	r2,-20(fp)
 1003ca4:	10800a17 	ldw	r2,40(r2)
 1003ca8:	10000b1e 	bne	r2,zero,1003cd8 <eTaskGetState+0xc0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003cac:	e0bffb17 	ldw	r2,-20(fp)
 1003cb0:	10801303 	ldbu	r2,76(r2)
 1003cb4:	10803fcc 	andi	r2,r2,255
 1003cb8:	10800058 	cmpnei	r2,r2,1
 1003cbc:	1000031e 	bne	r2,zero,1003ccc <eTaskGetState+0xb4>
							{
								eReturn = eBlocked;
 1003cc0:	00800084 	movi	r2,2
 1003cc4:	e0bffa15 	stw	r2,-24(fp)
 1003cc8:	00001106 	br	1003d10 <eTaskGetState+0xf8>
							}
							else
							{
								eReturn = eSuspended;
 1003ccc:	008000c4 	movi	r2,3
 1003cd0:	e0bffa15 	stw	r2,-24(fp)
 1003cd4:	00000e06 	br	1003d10 <eTaskGetState+0xf8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 1003cd8:	00800084 	movi	r2,2
 1003cdc:	e0bffa15 	stw	r2,-24(fp)
 1003ce0:	00000b06 	br	1003d10 <eTaskGetState+0xf8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1003ce4:	e0fffc17 	ldw	r3,-16(fp)
 1003ce8:	008060f4 	movhi	r2,387
 1003cec:	10a8c604 	addi	r2,r2,-23784
 1003cf0:	18800226 	beq	r3,r2,1003cfc <eTaskGetState+0xe4>
 1003cf4:	e0bffc17 	ldw	r2,-16(fp)
 1003cf8:	1000031e 	bne	r2,zero,1003d08 <eTaskGetState+0xf0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 1003cfc:	00800104 	movi	r2,4
 1003d00:	e0bffa15 	stw	r2,-24(fp)
 1003d04:	00000206 	br	1003d10 <eTaskGetState+0xf8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 1003d08:	00800044 	movi	r2,1
 1003d0c:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 1003d10:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1003d14:	e037883a 	mov	sp,fp
 1003d18:	dfc00117 	ldw	ra,4(sp)
 1003d1c:	df000017 	ldw	fp,0(sp)
 1003d20:	dec00204 	addi	sp,sp,8
 1003d24:	f800283a 	ret

01003d28 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 1003d28:	defffb04 	addi	sp,sp,-20
 1003d2c:	dfc00415 	stw	ra,16(sp)
 1003d30:	df000315 	stw	fp,12(sp)
 1003d34:	df000304 	addi	fp,sp,12
 1003d38:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 1003d3c:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d40:	e0bfff17 	ldw	r2,-4(fp)
 1003d44:	1000021e 	bne	r2,zero,1003d50 <uxTaskPriorityGet+0x28>
 1003d48:	d0a71917 	ldw	r2,-25500(gp)
 1003d4c:	00000106 	br	1003d54 <uxTaskPriorityGet+0x2c>
 1003d50:	e0bfff17 	ldw	r2,-4(fp)
 1003d54:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003d58:	e0bffd17 	ldw	r2,-12(fp)
 1003d5c:	10800b17 	ldw	r2,44(r2)
 1003d60:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 1003d64:	10052c40 	call	10052c4 <vTaskExitCritical>

		return uxReturn;
 1003d68:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003d6c:	e037883a 	mov	sp,fp
 1003d70:	dfc00117 	ldw	ra,4(sp)
 1003d74:	df000017 	ldw	fp,0(sp)
 1003d78:	dec00204 	addi	sp,sp,8
 1003d7c:	f800283a 	ret

01003d80 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 1003d80:	defffb04 	addi	sp,sp,-20
 1003d84:	df000415 	stw	fp,16(sp)
 1003d88:	df000404 	addi	fp,sp,16
 1003d8c:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1003d90:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d94:	e0bfff17 	ldw	r2,-4(fp)
 1003d98:	1000021e 	bne	r2,zero,1003da4 <uxTaskPriorityGetFromISR+0x24>
 1003d9c:	d0a71917 	ldw	r2,-25500(gp)
 1003da0:	00000106 	br	1003da8 <uxTaskPriorityGetFromISR+0x28>
 1003da4:	e0bfff17 	ldw	r2,-4(fp)
 1003da8:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003dac:	e0bffd17 	ldw	r2,-12(fp)
 1003db0:	10800b17 	ldw	r2,44(r2)
 1003db4:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 1003db8:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003dbc:	e037883a 	mov	sp,fp
 1003dc0:	df000017 	ldw	fp,0(sp)
 1003dc4:	dec00104 	addi	sp,sp,4
 1003dc8:	f800283a 	ret

01003dcc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 1003dcc:	defff804 	addi	sp,sp,-32
 1003dd0:	dfc00715 	stw	ra,28(sp)
 1003dd4:	df000615 	stw	fp,24(sp)
 1003dd8:	df000604 	addi	fp,sp,24
 1003ddc:	e13ffe15 	stw	r4,-8(fp)
 1003de0:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 1003de4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003de8:	e0bfff17 	ldw	r2,-4(fp)
 1003dec:	10800170 	cmpltui	r2,r2,5
 1003df0:	1000021e 	bne	r2,zero,1003dfc <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003df4:	00800104 	movi	r2,4
 1003df8:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 1003dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003e00:	e0bffe17 	ldw	r2,-8(fp)
 1003e04:	1000021e 	bne	r2,zero,1003e10 <vTaskPrioritySet+0x44>
 1003e08:	d0a71917 	ldw	r2,-25500(gp)
 1003e0c:	00000106 	br	1003e14 <vTaskPrioritySet+0x48>
 1003e10:	e0bffe17 	ldw	r2,-8(fp)
 1003e14:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1003e18:	e0bffb17 	ldw	r2,-20(fp)
 1003e1c:	10801017 	ldw	r2,64(r2)
 1003e20:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 1003e24:	e0fffc17 	ldw	r3,-16(fp)
 1003e28:	e0bfff17 	ldw	r2,-4(fp)
 1003e2c:	18804926 	beq	r3,r2,1003f54 <vTaskPrioritySet+0x188>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 1003e30:	e0bfff17 	ldw	r2,-4(fp)
 1003e34:	e0fffc17 	ldw	r3,-16(fp)
 1003e38:	18800a2e 	bgeu	r3,r2,1003e64 <vTaskPrioritySet+0x98>
				{
					if( pxTCB != pxCurrentTCB )
 1003e3c:	d0a71917 	ldw	r2,-25500(gp)
 1003e40:	e0fffb17 	ldw	r3,-20(fp)
 1003e44:	18800c26 	beq	r3,r2,1003e78 <vTaskPrioritySet+0xac>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1003e48:	d0a71917 	ldw	r2,-25500(gp)
 1003e4c:	10800b17 	ldw	r2,44(r2)
 1003e50:	e0ffff17 	ldw	r3,-4(fp)
 1003e54:	18800836 	bltu	r3,r2,1003e78 <vTaskPrioritySet+0xac>
						{
							xYieldRequired = pdTRUE;
 1003e58:	00800044 	movi	r2,1
 1003e5c:	e0bffa15 	stw	r2,-24(fp)
 1003e60:	00000506 	br	1003e78 <vTaskPrioritySet+0xac>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 1003e64:	d0a71917 	ldw	r2,-25500(gp)
 1003e68:	e0fffb17 	ldw	r3,-20(fp)
 1003e6c:	1880021e 	bne	r3,r2,1003e78 <vTaskPrioritySet+0xac>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 1003e70:	00800044 	movi	r2,1
 1003e74:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1003e78:	e0bffb17 	ldw	r2,-20(fp)
 1003e7c:	10800b17 	ldw	r2,44(r2)
 1003e80:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1003e84:	e0bffb17 	ldw	r2,-20(fp)
 1003e88:	10c01017 	ldw	r3,64(r2)
 1003e8c:	e0bffb17 	ldw	r2,-20(fp)
 1003e90:	10800b17 	ldw	r2,44(r2)
 1003e94:	1880031e 	bne	r3,r2,1003ea4 <vTaskPrioritySet+0xd8>
					{
						pxTCB->uxPriority = uxNewPriority;
 1003e98:	e0bffb17 	ldw	r2,-20(fp)
 1003e9c:	e0ffff17 	ldw	r3,-4(fp)
 1003ea0:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 1003ea4:	e0bffb17 	ldw	r2,-20(fp)
 1003ea8:	e0ffff17 	ldw	r3,-4(fp)
 1003eac:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1003eb0:	e0bffb17 	ldw	r2,-20(fp)
 1003eb4:	10800617 	ldw	r2,24(r2)
 1003eb8:	10000516 	blt	r2,zero,1003ed0 <vTaskPrioritySet+0x104>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003ebc:	00c00144 	movi	r3,5
 1003ec0:	e0bfff17 	ldw	r2,-4(fp)
 1003ec4:	1887c83a 	sub	r3,r3,r2
 1003ec8:	e0bffb17 	ldw	r2,-20(fp)
 1003ecc:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1003ed0:	e0bffb17 	ldw	r2,-20(fp)
 1003ed4:	10c00517 	ldw	r3,20(r2)
 1003ed8:	e0bffd17 	ldw	r2,-12(fp)
 1003edc:	11000524 	muli	r4,r2,20
 1003ee0:	008060f4 	movhi	r2,387
 1003ee4:	10a89e04 	addi	r2,r2,-23944
 1003ee8:	2085883a 	add	r2,r4,r2
 1003eec:	1880161e 	bne	r3,r2,1003f48 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003ef0:	e0bffb17 	ldw	r2,-20(fp)
 1003ef4:	10800104 	addi	r2,r2,4
 1003ef8:	1009883a 	mov	r4,r2
 1003efc:	1000ce40 	call	1000ce4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 1003f00:	e0bffb17 	ldw	r2,-20(fp)
 1003f04:	10800b17 	ldw	r2,44(r2)
 1003f08:	d0e71f17 	ldw	r3,-25476(gp)
 1003f0c:	1880032e 	bgeu	r3,r2,1003f1c <vTaskPrioritySet+0x150>
 1003f10:	e0bffb17 	ldw	r2,-20(fp)
 1003f14:	10800b17 	ldw	r2,44(r2)
 1003f18:	d0a71f15 	stw	r2,-25476(gp)
 1003f1c:	e0bffb17 	ldw	r2,-20(fp)
 1003f20:	10800b17 	ldw	r2,44(r2)
 1003f24:	10c00524 	muli	r3,r2,20
 1003f28:	008060f4 	movhi	r2,387
 1003f2c:	10a89e04 	addi	r2,r2,-23944
 1003f30:	1887883a 	add	r3,r3,r2
 1003f34:	e0bffb17 	ldw	r2,-20(fp)
 1003f38:	10800104 	addi	r2,r2,4
 1003f3c:	100b883a 	mov	r5,r2
 1003f40:	1809883a 	mov	r4,r3
 1003f44:	1000b800 	call	1000b80 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 1003f48:	e0bffa17 	ldw	r2,-24(fp)
 1003f4c:	10000126 	beq	r2,zero,1003f54 <vTaskPrioritySet+0x188>
				{
					taskYIELD_IF_USING_PREEMPTION();
 1003f50:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 1003f54:	10052c40 	call	10052c4 <vTaskExitCritical>
	}
 1003f58:	0001883a 	nop
 1003f5c:	e037883a 	mov	sp,fp
 1003f60:	dfc00117 	ldw	ra,4(sp)
 1003f64:	df000017 	ldw	fp,0(sp)
 1003f68:	dec00204 	addi	sp,sp,8
 1003f6c:	f800283a 	ret

01003f70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 1003f70:	defffc04 	addi	sp,sp,-16
 1003f74:	dfc00315 	stw	ra,12(sp)
 1003f78:	df000215 	stw	fp,8(sp)
 1003f7c:	df000204 	addi	fp,sp,8
 1003f80:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 1003f84:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1003f88:	e0bfff17 	ldw	r2,-4(fp)
 1003f8c:	1000021e 	bne	r2,zero,1003f98 <vTaskSuspend+0x28>
 1003f90:	d0a71917 	ldw	r2,-25500(gp)
 1003f94:	00000106 	br	1003f9c <vTaskSuspend+0x2c>
 1003f98:	e0bfff17 	ldw	r2,-4(fp)
 1003f9c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003fa0:	e0bffe17 	ldw	r2,-8(fp)
 1003fa4:	10800104 	addi	r2,r2,4
 1003fa8:	1009883a 	mov	r4,r2
 1003fac:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003fb0:	e0bffe17 	ldw	r2,-8(fp)
 1003fb4:	10800a17 	ldw	r2,40(r2)
 1003fb8:	10000426 	beq	r2,zero,1003fcc <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003fbc:	e0bffe17 	ldw	r2,-8(fp)
 1003fc0:	10800604 	addi	r2,r2,24
 1003fc4:	1009883a 	mov	r4,r2
 1003fc8:	1000ce40 	call	1000ce4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1003fcc:	e0bffe17 	ldw	r2,-8(fp)
 1003fd0:	10800104 	addi	r2,r2,4
 1003fd4:	100b883a 	mov	r5,r2
 1003fd8:	010060f4 	movhi	r4,387
 1003fdc:	2128cb04 	addi	r4,r4,-23764
 1003fe0:	1000b800 	call	1000b80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003fe4:	e0bffe17 	ldw	r2,-8(fp)
 1003fe8:	10801303 	ldbu	r2,76(r2)
 1003fec:	10803fcc 	andi	r2,r2,255
 1003ff0:	10800058 	cmpnei	r2,r2,1
 1003ff4:	1000021e 	bne	r2,zero,1004000 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003ff8:	e0bffe17 	ldw	r2,-8(fp)
 1003ffc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 1004000:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 1004004:	d0a72017 	ldw	r2,-25472(gp)
 1004008:	10000326 	beq	r2,zero,1004018 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 100400c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 1004010:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 1004014:	10052c40 	call	10052c4 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 1004018:	d0a71917 	ldw	r2,-25500(gp)
 100401c:	e0fffe17 	ldw	r3,-8(fp)
 1004020:	18800c1e 	bne	r3,r2,1004054 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 1004024:	d0a72017 	ldw	r2,-25472(gp)
 1004028:	10000226 	beq	r2,zero,1004034 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 100402c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004030:	00000806 	br	1004054 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 1004034:	008060f4 	movhi	r2,387
 1004038:	10a8cb04 	addi	r2,r2,-23764
 100403c:	10c00017 	ldw	r3,0(r2)
 1004040:	d0a71d17 	ldw	r2,-25484(gp)
 1004044:	1880021e 	bne	r3,r2,1004050 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 1004048:	d0271915 	stw	zero,-25500(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100404c:	00000106 	br	1004054 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 1004050:	10047440 	call	1004744 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004054:	0001883a 	nop
 1004058:	e037883a 	mov	sp,fp
 100405c:	dfc00117 	ldw	ra,4(sp)
 1004060:	df000017 	ldw	fp,0(sp)
 1004064:	dec00204 	addi	sp,sp,8
 1004068:	f800283a 	ret

0100406c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 100406c:	defffc04 	addi	sp,sp,-16
 1004070:	df000315 	stw	fp,12(sp)
 1004074:	df000304 	addi	fp,sp,12
 1004078:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 100407c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 1004080:	e0bfff17 	ldw	r2,-4(fp)
 1004084:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1004088:	e0bffe17 	ldw	r2,-8(fp)
 100408c:	10c00517 	ldw	r3,20(r2)
 1004090:	008060f4 	movhi	r2,387
 1004094:	10a8cb04 	addi	r2,r2,-23764
 1004098:	18800a1e 	bne	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 100409c:	e0bffe17 	ldw	r2,-8(fp)
 10040a0:	10c00a17 	ldw	r3,40(r2)
 10040a4:	008060f4 	movhi	r2,387
 10040a8:	10a8c104 	addi	r2,r2,-23804
 10040ac:	18800526 	beq	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 10040b0:	e0bffe17 	ldw	r2,-8(fp)
 10040b4:	10800a17 	ldw	r2,40(r2)
 10040b8:	1000021e 	bne	r2,zero,10040c4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 10040bc:	00800044 	movi	r2,1
 10040c0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 10040c4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 10040c8:	e037883a 	mov	sp,fp
 10040cc:	df000017 	ldw	fp,0(sp)
 10040d0:	dec00104 	addi	sp,sp,4
 10040d4:	f800283a 	ret

010040d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 10040d8:	defffc04 	addi	sp,sp,-16
 10040dc:	dfc00315 	stw	ra,12(sp)
 10040e0:	df000215 	stw	fp,8(sp)
 10040e4:	df000204 	addi	fp,sp,8
 10040e8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10040ec:	e0bfff17 	ldw	r2,-4(fp)
 10040f0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 10040f4:	d0a71917 	ldw	r2,-25500(gp)
 10040f8:	e0fffe17 	ldw	r3,-8(fp)
 10040fc:	18802326 	beq	r3,r2,100418c <vTaskResume+0xb4>
 1004100:	e0bffe17 	ldw	r2,-8(fp)
 1004104:	10002126 	beq	r2,zero,100418c <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 1004108:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 100410c:	e13ffe17 	ldw	r4,-8(fp)
 1004110:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 1004114:	10001c26 	beq	r2,zero,1004188 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1004118:	e0bffe17 	ldw	r2,-8(fp)
 100411c:	10800104 	addi	r2,r2,4
 1004120:	1009883a 	mov	r4,r2
 1004124:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004128:	e0bffe17 	ldw	r2,-8(fp)
 100412c:	10800b17 	ldw	r2,44(r2)
 1004130:	d0e71f17 	ldw	r3,-25476(gp)
 1004134:	1880032e 	bgeu	r3,r2,1004144 <vTaskResume+0x6c>
 1004138:	e0bffe17 	ldw	r2,-8(fp)
 100413c:	10800b17 	ldw	r2,44(r2)
 1004140:	d0a71f15 	stw	r2,-25476(gp)
 1004144:	e0bffe17 	ldw	r2,-8(fp)
 1004148:	10800b17 	ldw	r2,44(r2)
 100414c:	10c00524 	muli	r3,r2,20
 1004150:	008060f4 	movhi	r2,387
 1004154:	10a89e04 	addi	r2,r2,-23944
 1004158:	1887883a 	add	r3,r3,r2
 100415c:	e0bffe17 	ldw	r2,-8(fp)
 1004160:	10800104 	addi	r2,r2,4
 1004164:	100b883a 	mov	r5,r2
 1004168:	1809883a 	mov	r4,r3
 100416c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004170:	e0bffe17 	ldw	r2,-8(fp)
 1004174:	10c00b17 	ldw	r3,44(r2)
 1004178:	d0a71917 	ldw	r2,-25500(gp)
 100417c:	10800b17 	ldw	r2,44(r2)
 1004180:	18800136 	bltu	r3,r2,1004188 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 1004184:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 1004188:	10052c40 	call	10052c4 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100418c:	0001883a 	nop
 1004190:	e037883a 	mov	sp,fp
 1004194:	dfc00117 	ldw	ra,4(sp)
 1004198:	df000017 	ldw	fp,0(sp)
 100419c:	dec00204 	addi	sp,sp,8
 10041a0:	f800283a 	ret

010041a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 10041a4:	defffa04 	addi	sp,sp,-24
 10041a8:	dfc00515 	stw	ra,20(sp)
 10041ac:	df000415 	stw	fp,16(sp)
 10041b0:	df000404 	addi	fp,sp,16
 10041b4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 10041b8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10041bc:	e0bfff17 	ldw	r2,-4(fp)
 10041c0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10041c4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 10041c8:	e13ffd17 	ldw	r4,-12(fp)
 10041cc:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 10041d0:	10002626 	beq	r2,zero,100426c <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10041d4:	d0a72717 	ldw	r2,-25444(gp)
 10041d8:	10001e1e 	bne	r2,zero,1004254 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10041dc:	e0bffd17 	ldw	r2,-12(fp)
 10041e0:	10c00b17 	ldw	r3,44(r2)
 10041e4:	d0a71917 	ldw	r2,-25500(gp)
 10041e8:	10800b17 	ldw	r2,44(r2)
 10041ec:	18800236 	bltu	r3,r2,10041f8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 10041f0:	00800044 	movi	r2,1
 10041f4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10041f8:	e0bffd17 	ldw	r2,-12(fp)
 10041fc:	10800104 	addi	r2,r2,4
 1004200:	1009883a 	mov	r4,r2
 1004204:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004208:	e0bffd17 	ldw	r2,-12(fp)
 100420c:	10800b17 	ldw	r2,44(r2)
 1004210:	d0e71f17 	ldw	r3,-25476(gp)
 1004214:	1880032e 	bgeu	r3,r2,1004224 <xTaskResumeFromISR+0x80>
 1004218:	e0bffd17 	ldw	r2,-12(fp)
 100421c:	10800b17 	ldw	r2,44(r2)
 1004220:	d0a71f15 	stw	r2,-25476(gp)
 1004224:	e0bffd17 	ldw	r2,-12(fp)
 1004228:	10800b17 	ldw	r2,44(r2)
 100422c:	10c00524 	muli	r3,r2,20
 1004230:	008060f4 	movhi	r2,387
 1004234:	10a89e04 	addi	r2,r2,-23944
 1004238:	1887883a 	add	r3,r3,r2
 100423c:	e0bffd17 	ldw	r2,-12(fp)
 1004240:	10800104 	addi	r2,r2,4
 1004244:	100b883a 	mov	r5,r2
 1004248:	1809883a 	mov	r4,r3
 100424c:	1000b800 	call	1000b80 <vListInsertEnd>
 1004250:	00000606 	br	100426c <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1004254:	e0bffd17 	ldw	r2,-12(fp)
 1004258:	10800604 	addi	r2,r2,24
 100425c:	100b883a 	mov	r5,r2
 1004260:	010060f4 	movhi	r4,387
 1004264:	2128c104 	addi	r4,r4,-23804
 1004268:	1000b800 	call	1000b80 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 100426c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1004270:	e037883a 	mov	sp,fp
 1004274:	dfc00117 	ldw	ra,4(sp)
 1004278:	df000017 	ldw	fp,0(sp)
 100427c:	dec00204 	addi	sp,sp,8
 1004280:	f800283a 	ret

01004284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 1004284:	defffa04 	addi	sp,sp,-24
 1004288:	dfc00515 	stw	ra,20(sp)
 100428c:	df000415 	stw	fp,16(sp)
 1004290:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 1004294:	d0a72604 	addi	r2,gp,-25448
 1004298:	d8800115 	stw	r2,4(sp)
 100429c:	d8000015 	stw	zero,0(sp)
 10042a0:	000f883a 	mov	r7,zero
 10042a4:	01810004 	movi	r6,1024
 10042a8:	014040b4 	movhi	r5,258
 10042ac:	29548704 	addi	r5,r5,21020
 10042b0:	01004034 	movhi	r4,256
 10042b4:	21130704 	addi	r4,r4,19484
 10042b8:	100361c0 	call	100361c <xTaskCreate>
 10042bc:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 10042c0:	e0bffe17 	ldw	r2,-8(fp)
 10042c4:	10800058 	cmpnei	r2,r2,1
 10042c8:	10000c1e 	bne	r2,zero,10042fc <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10042cc:	0005303a 	rdctl	r2,status
 10042d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10042d4:	e0ffff17 	ldw	r3,-4(fp)
 10042d8:	00bfff84 	movi	r2,-2
 10042dc:	1884703a 	and	r2,r3,r2
 10042e0:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 10042e4:	00bfffc4 	movi	r2,-1
 10042e8:	d0a72515 	stw	r2,-25452(gp)
		xSchedulerRunning = pdTRUE;
 10042ec:	00800044 	movi	r2,1
 10042f0:	d0a72015 	stw	r2,-25472(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 10042f4:	d0271e15 	stw	zero,-25480(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 10042f8:	1000e880 	call	1000e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 10042fc:	0001883a 	nop
 1004300:	e037883a 	mov	sp,fp
 1004304:	dfc00117 	ldw	ra,4(sp)
 1004308:	df000017 	ldw	fp,0(sp)
 100430c:	dec00204 	addi	sp,sp,8
 1004310:	f800283a 	ret

01004314 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 1004314:	defffd04 	addi	sp,sp,-12
 1004318:	dfc00215 	stw	ra,8(sp)
 100431c:	df000115 	stw	fp,4(sp)
 1004320:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004324:	0005303a 	rdctl	r2,status
 1004328:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100432c:	e0ffff17 	ldw	r3,-4(fp)
 1004330:	00bfff84 	movi	r2,-2
 1004334:	1884703a 	and	r2,r3,r2
 1004338:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 100433c:	d0272015 	stw	zero,-25472(gp)
	vPortEndScheduler();
 1004340:	1000ec00 	call	1000ec0 <vPortEndScheduler>
}
 1004344:	0001883a 	nop
 1004348:	e037883a 	mov	sp,fp
 100434c:	dfc00117 	ldw	ra,4(sp)
 1004350:	df000017 	ldw	fp,0(sp)
 1004354:	dec00204 	addi	sp,sp,8
 1004358:	f800283a 	ret

0100435c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 100435c:	deffff04 	addi	sp,sp,-4
 1004360:	df000015 	stw	fp,0(sp)
 1004364:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 1004368:	d0a72717 	ldw	r2,-25444(gp)
 100436c:	10800044 	addi	r2,r2,1
 1004370:	d0a72715 	stw	r2,-25444(gp)
	portMEMORY_BARRIER();
}
 1004374:	0001883a 	nop
 1004378:	e037883a 	mov	sp,fp
 100437c:	df000017 	ldw	fp,0(sp)
 1004380:	dec00104 	addi	sp,sp,4
 1004384:	f800283a 	ret

01004388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 1004388:	defffb04 	addi	sp,sp,-20
 100438c:	dfc00415 	stw	ra,16(sp)
 1004390:	df000315 	stw	fp,12(sp)
 1004394:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 1004398:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 100439c:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 10043a0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 10043a4:	d0a72717 	ldw	r2,-25444(gp)
 10043a8:	10bfffc4 	addi	r2,r2,-1
 10043ac:	d0a72715 	stw	r2,-25444(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10043b0:	d0a72717 	ldw	r2,-25444(gp)
 10043b4:	1000431e 	bne	r2,zero,10044c4 <xTaskResumeAll+0x13c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 10043b8:	d0a71d17 	ldw	r2,-25484(gp)
 10043bc:	10004126 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 10043c0:	00002606 	br	100445c <xTaskResumeAll+0xd4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10043c4:	008060f4 	movhi	r2,387
 10043c8:	10a8c104 	addi	r2,r2,-23804
 10043cc:	10800317 	ldw	r2,12(r2)
 10043d0:	10800317 	ldw	r2,12(r2)
 10043d4:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 10043d8:	e0bffd17 	ldw	r2,-12(fp)
 10043dc:	10800604 	addi	r2,r2,24
 10043e0:	1009883a 	mov	r4,r2
 10043e4:	1000ce40 	call	1000ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10043e8:	e0bffd17 	ldw	r2,-12(fp)
 10043ec:	10800104 	addi	r2,r2,4
 10043f0:	1009883a 	mov	r4,r2
 10043f4:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 10043f8:	e0bffd17 	ldw	r2,-12(fp)
 10043fc:	10800b17 	ldw	r2,44(r2)
 1004400:	d0e71f17 	ldw	r3,-25476(gp)
 1004404:	1880032e 	bgeu	r3,r2,1004414 <xTaskResumeAll+0x8c>
 1004408:	e0bffd17 	ldw	r2,-12(fp)
 100440c:	10800b17 	ldw	r2,44(r2)
 1004410:	d0a71f15 	stw	r2,-25476(gp)
 1004414:	e0bffd17 	ldw	r2,-12(fp)
 1004418:	10800b17 	ldw	r2,44(r2)
 100441c:	10c00524 	muli	r3,r2,20
 1004420:	008060f4 	movhi	r2,387
 1004424:	10a89e04 	addi	r2,r2,-23944
 1004428:	1887883a 	add	r3,r3,r2
 100442c:	e0bffd17 	ldw	r2,-12(fp)
 1004430:	10800104 	addi	r2,r2,4
 1004434:	100b883a 	mov	r5,r2
 1004438:	1809883a 	mov	r4,r3
 100443c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004440:	e0bffd17 	ldw	r2,-12(fp)
 1004444:	10c00b17 	ldw	r3,44(r2)
 1004448:	d0a71917 	ldw	r2,-25500(gp)
 100444c:	10800b17 	ldw	r2,44(r2)
 1004450:	18800236 	bltu	r3,r2,100445c <xTaskResumeAll+0xd4>
					{
						xYieldPending = pdTRUE;
 1004454:	00800044 	movi	r2,1
 1004458:	d0a72215 	stw	r2,-25464(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 100445c:	008060f4 	movhi	r2,387
 1004460:	10a8c104 	addi	r2,r2,-23804
 1004464:	10800017 	ldw	r2,0(r2)
 1004468:	103fd61e 	bne	r2,zero,10043c4 <__alt_data_end+0xff0043c4>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 100446c:	e0bffd17 	ldw	r2,-12(fp)
 1004470:	10000126 	beq	r2,zero,1004478 <xTaskResumeAll+0xf0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 1004474:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 1004478:	d0a72117 	ldw	r2,-25468(gp)
 100447c:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 1004480:	e0bfff17 	ldw	r2,-4(fp)
 1004484:	10000a26 	beq	r2,zero,10044b0 <xTaskResumeAll+0x128>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 1004488:	10045940 	call	1004594 <xTaskIncrementTick>
 100448c:	10000226 	beq	r2,zero,1004498 <xTaskResumeAll+0x110>
							{
								xYieldPending = pdTRUE;
 1004490:	00800044 	movi	r2,1
 1004494:	d0a72215 	stw	r2,-25464(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 1004498:	e0bfff17 	ldw	r2,-4(fp)
 100449c:	10bfffc4 	addi	r2,r2,-1
 10044a0:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 10044a4:	e0bfff17 	ldw	r2,-4(fp)
 10044a8:	103ff71e 	bne	r2,zero,1004488 <__alt_data_end+0xff004488>

						uxPendedTicks = 0;
 10044ac:	d0272115 	stw	zero,-25468(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 10044b0:	d0a72217 	ldw	r2,-25464(gp)
 10044b4:	10000326 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 10044b8:	00800044 	movi	r2,1
 10044bc:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 10044c0:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 10044c4:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xAlreadyYielded;
 10044c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10044cc:	e037883a 	mov	sp,fp
 10044d0:	dfc00117 	ldw	ra,4(sp)
 10044d4:	df000017 	ldw	fp,0(sp)
 10044d8:	dec00204 	addi	sp,sp,8
 10044dc:	f800283a 	ret

010044e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 10044e0:	defffe04 	addi	sp,sp,-8
 10044e4:	df000115 	stw	fp,4(sp)
 10044e8:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 10044ec:	d0a71e17 	ldw	r2,-25480(gp)
 10044f0:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 10044f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10044f8:	e037883a 	mov	sp,fp
 10044fc:	df000017 	ldw	fp,0(sp)
 1004500:	dec00104 	addi	sp,sp,4
 1004504:	f800283a 	ret

01004508 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 1004508:	defffd04 	addi	sp,sp,-12
 100450c:	df000215 	stw	fp,8(sp)
 1004510:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 1004514:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 1004518:	d0a71e17 	ldw	r2,-25480(gp)
 100451c:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1004520:	e0bfff17 	ldw	r2,-4(fp)
}
 1004524:	e037883a 	mov	sp,fp
 1004528:	df000017 	ldw	fp,0(sp)
 100452c:	dec00104 	addi	sp,sp,4
 1004530:	f800283a 	ret

01004534 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 1004534:	deffff04 	addi	sp,sp,-4
 1004538:	df000015 	stw	fp,0(sp)
 100453c:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 1004540:	d0a71d17 	ldw	r2,-25484(gp)
}
 1004544:	e037883a 	mov	sp,fp
 1004548:	df000017 	ldw	fp,0(sp)
 100454c:	dec00104 	addi	sp,sp,4
 1004550:	f800283a 	ret

01004554 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1004554:	defffd04 	addi	sp,sp,-12
 1004558:	df000215 	stw	fp,8(sp)
 100455c:	df000204 	addi	fp,sp,8
 1004560:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 1004564:	e0bfff17 	ldw	r2,-4(fp)
 1004568:	1000021e 	bne	r2,zero,1004574 <pcTaskGetName+0x20>
 100456c:	d0a71917 	ldw	r2,-25500(gp)
 1004570:	00000106 	br	1004578 <pcTaskGetName+0x24>
 1004574:	e0bfff17 	ldw	r2,-4(fp)
 1004578:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 100457c:	e0bffe17 	ldw	r2,-8(fp)
 1004580:	10800d04 	addi	r2,r2,52
}
 1004584:	e037883a 	mov	sp,fp
 1004588:	df000017 	ldw	fp,0(sp)
 100458c:	dec00104 	addi	sp,sp,4
 1004590:	f800283a 	ret

01004594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 1004594:	defff904 	addi	sp,sp,-28
 1004598:	dfc00615 	stw	ra,24(sp)
 100459c:	df000515 	stw	fp,20(sp)
 10045a0:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 10045a4:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10045a8:	d0a72717 	ldw	r2,-25444(gp)
 10045ac:	1000581e 	bne	r2,zero,1004710 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 10045b0:	d0a71e17 	ldw	r2,-25480(gp)
 10045b4:	10800044 	addi	r2,r2,1
 10045b8:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 10045bc:	e0bffc17 	ldw	r2,-16(fp)
 10045c0:	d0a71e15 	stw	r2,-25480(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 10045c4:	e0bffc17 	ldw	r2,-16(fp)
 10045c8:	10000a1e 	bne	r2,zero,10045f4 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 10045cc:	d0a71a17 	ldw	r2,-25496(gp)
 10045d0:	e0bffd15 	stw	r2,-12(fp)
 10045d4:	d0a71b17 	ldw	r2,-25492(gp)
 10045d8:	d0a71a15 	stw	r2,-25496(gp)
 10045dc:	e0bffd17 	ldw	r2,-12(fp)
 10045e0:	d0a71b15 	stw	r2,-25492(gp)
 10045e4:	d0a72317 	ldw	r2,-25460(gp)
 10045e8:	10800044 	addi	r2,r2,1
 10045ec:	d0a72315 	stw	r2,-25460(gp)
 10045f0:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 10045f4:	d0a72517 	ldw	r2,-25452(gp)
 10045f8:	e0fffc17 	ldw	r3,-16(fp)
 10045fc:	18803836 	bltu	r3,r2,10046e0 <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004600:	d0a71a17 	ldw	r2,-25496(gp)
 1004604:	10800017 	ldw	r2,0(r2)
 1004608:	1000031e 	bne	r2,zero,1004618 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100460c:	00bfffc4 	movi	r2,-1
 1004610:	d0a72515 	stw	r2,-25452(gp)
					break;
 1004614:	00003206 	br	10046e0 <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004618:	d0a71a17 	ldw	r2,-25496(gp)
 100461c:	10800317 	ldw	r2,12(r2)
 1004620:	10800317 	ldw	r2,12(r2)
 1004624:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1004628:	e0bffe17 	ldw	r2,-8(fp)
 100462c:	10800117 	ldw	r2,4(r2)
 1004630:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 1004634:	e0fffc17 	ldw	r3,-16(fp)
 1004638:	e0bfff17 	ldw	r2,-4(fp)
 100463c:	1880032e 	bgeu	r3,r2,100464c <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 1004640:	e0bfff17 	ldw	r2,-4(fp)
 1004644:	d0a72515 	stw	r2,-25452(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 1004648:	00002506 	br	10046e0 <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 100464c:	e0bffe17 	ldw	r2,-8(fp)
 1004650:	10800104 	addi	r2,r2,4
 1004654:	1009883a 	mov	r4,r2
 1004658:	1000ce40 	call	1000ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 100465c:	e0bffe17 	ldw	r2,-8(fp)
 1004660:	10800a17 	ldw	r2,40(r2)
 1004664:	10000426 	beq	r2,zero,1004678 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1004668:	e0bffe17 	ldw	r2,-8(fp)
 100466c:	10800604 	addi	r2,r2,24
 1004670:	1009883a 	mov	r4,r2
 1004674:	1000ce40 	call	1000ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 1004678:	e0bffe17 	ldw	r2,-8(fp)
 100467c:	10800b17 	ldw	r2,44(r2)
 1004680:	d0e71f17 	ldw	r3,-25476(gp)
 1004684:	1880032e 	bgeu	r3,r2,1004694 <xTaskIncrementTick+0x100>
 1004688:	e0bffe17 	ldw	r2,-8(fp)
 100468c:	10800b17 	ldw	r2,44(r2)
 1004690:	d0a71f15 	stw	r2,-25476(gp)
 1004694:	e0bffe17 	ldw	r2,-8(fp)
 1004698:	10800b17 	ldw	r2,44(r2)
 100469c:	10c00524 	muli	r3,r2,20
 10046a0:	008060f4 	movhi	r2,387
 10046a4:	10a89e04 	addi	r2,r2,-23944
 10046a8:	1887883a 	add	r3,r3,r2
 10046ac:	e0bffe17 	ldw	r2,-8(fp)
 10046b0:	10800104 	addi	r2,r2,4
 10046b4:	100b883a 	mov	r5,r2
 10046b8:	1809883a 	mov	r4,r3
 10046bc:	1000b800 	call	1000b80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10046c0:	e0bffe17 	ldw	r2,-8(fp)
 10046c4:	10c00b17 	ldw	r3,44(r2)
 10046c8:	d0a71917 	ldw	r2,-25500(gp)
 10046cc:	10800b17 	ldw	r2,44(r2)
 10046d0:	18bfcb36 	bltu	r3,r2,1004600 <__alt_data_end+0xff004600>
						{
							xSwitchRequired = pdTRUE;
 10046d4:	00800044 	movi	r2,1
 10046d8:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 10046dc:	003fc806 	br	1004600 <__alt_data_end+0xff004600>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 10046e0:	d0a71917 	ldw	r2,-25500(gp)
 10046e4:	10c00b17 	ldw	r3,44(r2)
 10046e8:	008060f4 	movhi	r2,387
 10046ec:	10a89e04 	addi	r2,r2,-23944
 10046f0:	18c00524 	muli	r3,r3,20
 10046f4:	10c5883a 	add	r2,r2,r3
 10046f8:	10800017 	ldw	r2,0(r2)
 10046fc:	108000b0 	cmpltui	r2,r2,2
 1004700:	1000061e 	bne	r2,zero,100471c <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 1004704:	00800044 	movi	r2,1
 1004708:	e0bffb15 	stw	r2,-20(fp)
 100470c:	00000306 	br	100471c <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 1004710:	d0a72117 	ldw	r2,-25468(gp)
 1004714:	10800044 	addi	r2,r2,1
 1004718:	d0a72115 	stw	r2,-25468(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 100471c:	d0a72217 	ldw	r2,-25464(gp)
 1004720:	10000226 	beq	r2,zero,100472c <xTaskIncrementTick+0x198>
		{
			xSwitchRequired = pdTRUE;
 1004724:	00800044 	movi	r2,1
 1004728:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 100472c:	e0bffb17 	ldw	r2,-20(fp)
}
 1004730:	e037883a 	mov	sp,fp
 1004734:	dfc00117 	ldw	ra,4(sp)
 1004738:	df000017 	ldw	fp,0(sp)
 100473c:	dec00204 	addi	sp,sp,8
 1004740:	f800283a 	ret

01004744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 1004744:	defffd04 	addi	sp,sp,-12
 1004748:	df000215 	stw	fp,8(sp)
 100474c:	df000204 	addi	fp,sp,8
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 1004750:	d0a72717 	ldw	r2,-25444(gp)
 1004754:	10000326 	beq	r2,zero,1004764 <vTaskSwitchContext+0x20>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 1004758:	00800044 	movi	r2,1
 100475c:	d0a72215 	stw	r2,-25464(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004760:	00002906 	br	1004808 <vTaskSwitchContext+0xc4>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 1004764:	d0272215 	stw	zero,-25464(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004768:	d0a71f17 	ldw	r2,-25476(gp)
 100476c:	e0bffe15 	stw	r2,-8(fp)
 1004770:	00000306 	br	1004780 <vTaskSwitchContext+0x3c>
 1004774:	e0bffe17 	ldw	r2,-8(fp)
 1004778:	10bfffc4 	addi	r2,r2,-1
 100477c:	e0bffe15 	stw	r2,-8(fp)
 1004780:	008060f4 	movhi	r2,387
 1004784:	10a89e04 	addi	r2,r2,-23944
 1004788:	e0fffe17 	ldw	r3,-8(fp)
 100478c:	18c00524 	muli	r3,r3,20
 1004790:	10c5883a 	add	r2,r2,r3
 1004794:	10800017 	ldw	r2,0(r2)
 1004798:	103ff626 	beq	r2,zero,1004774 <__alt_data_end+0xff004774>
 100479c:	e0bffe17 	ldw	r2,-8(fp)
 10047a0:	10c00524 	muli	r3,r2,20
 10047a4:	008060f4 	movhi	r2,387
 10047a8:	10a89e04 	addi	r2,r2,-23944
 10047ac:	1885883a 	add	r2,r3,r2
 10047b0:	e0bfff15 	stw	r2,-4(fp)
 10047b4:	e0bfff17 	ldw	r2,-4(fp)
 10047b8:	10800117 	ldw	r2,4(r2)
 10047bc:	10c00117 	ldw	r3,4(r2)
 10047c0:	e0bfff17 	ldw	r2,-4(fp)
 10047c4:	10c00115 	stw	r3,4(r2)
 10047c8:	e0bfff17 	ldw	r2,-4(fp)
 10047cc:	10c00117 	ldw	r3,4(r2)
 10047d0:	e0bfff17 	ldw	r2,-4(fp)
 10047d4:	10800204 	addi	r2,r2,8
 10047d8:	1880051e 	bne	r3,r2,10047f0 <vTaskSwitchContext+0xac>
 10047dc:	e0bfff17 	ldw	r2,-4(fp)
 10047e0:	10800117 	ldw	r2,4(r2)
 10047e4:	10c00117 	ldw	r3,4(r2)
 10047e8:	e0bfff17 	ldw	r2,-4(fp)
 10047ec:	10c00115 	stw	r3,4(r2)
 10047f0:	e0bfff17 	ldw	r2,-4(fp)
 10047f4:	10800117 	ldw	r2,4(r2)
 10047f8:	10800317 	ldw	r2,12(r2)
 10047fc:	d0a71915 	stw	r2,-25500(gp)
 1004800:	e0bffe17 	ldw	r2,-8(fp)
 1004804:	d0a71f15 	stw	r2,-25476(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004808:	0001883a 	nop
 100480c:	e037883a 	mov	sp,fp
 1004810:	df000017 	ldw	fp,0(sp)
 1004814:	dec00104 	addi	sp,sp,4
 1004818:	f800283a 	ret

0100481c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 100481c:	defffc04 	addi	sp,sp,-16
 1004820:	dfc00315 	stw	ra,12(sp)
 1004824:	df000215 	stw	fp,8(sp)
 1004828:	df000204 	addi	fp,sp,8
 100482c:	e13ffe15 	stw	r4,-8(fp)
 1004830:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004834:	d0a71917 	ldw	r2,-25500(gp)
 1004838:	10800604 	addi	r2,r2,24
 100483c:	100b883a 	mov	r5,r2
 1004840:	e13ffe17 	ldw	r4,-8(fp)
 1004844:	1000c0c0 	call	1000c0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1004848:	01400044 	movi	r5,1
 100484c:	e13fff17 	ldw	r4,-4(fp)
 1004850:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 1004854:	0001883a 	nop
 1004858:	e037883a 	mov	sp,fp
 100485c:	dfc00117 	ldw	ra,4(sp)
 1004860:	df000017 	ldw	fp,0(sp)
 1004864:	dec00204 	addi	sp,sp,8
 1004868:	f800283a 	ret

0100486c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 100486c:	defffb04 	addi	sp,sp,-20
 1004870:	dfc00415 	stw	ra,16(sp)
 1004874:	df000315 	stw	fp,12(sp)
 1004878:	df000304 	addi	fp,sp,12
 100487c:	e13ffd15 	stw	r4,-12(fp)
 1004880:	e17ffe15 	stw	r5,-8(fp)
 1004884:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1004888:	d0a71917 	ldw	r2,-25500(gp)
 100488c:	e0fffe17 	ldw	r3,-8(fp)
 1004890:	18e00034 	orhi	r3,r3,32768
 1004894:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004898:	d0a71917 	ldw	r2,-25500(gp)
 100489c:	10800604 	addi	r2,r2,24
 10048a0:	100b883a 	mov	r5,r2
 10048a4:	e13ffd17 	ldw	r4,-12(fp)
 10048a8:	1000b800 	call	1000b80 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10048ac:	01400044 	movi	r5,1
 10048b0:	e13fff17 	ldw	r4,-4(fp)
 10048b4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 10048b8:	0001883a 	nop
 10048bc:	e037883a 	mov	sp,fp
 10048c0:	dfc00117 	ldw	ra,4(sp)
 10048c4:	df000017 	ldw	fp,0(sp)
 10048c8:	dec00204 	addi	sp,sp,8
 10048cc:	f800283a 	ret

010048d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 10048d0:	defffb04 	addi	sp,sp,-20
 10048d4:	dfc00415 	stw	ra,16(sp)
 10048d8:	df000315 	stw	fp,12(sp)
 10048dc:	df000304 	addi	fp,sp,12
 10048e0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10048e4:	e0bfff17 	ldw	r2,-4(fp)
 10048e8:	10800317 	ldw	r2,12(r2)
 10048ec:	10800317 	ldw	r2,12(r2)
 10048f0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 10048f4:	e0bffe17 	ldw	r2,-8(fp)
 10048f8:	10800604 	addi	r2,r2,24
 10048fc:	1009883a 	mov	r4,r2
 1004900:	1000ce40 	call	1000ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1004904:	d0a72717 	ldw	r2,-25444(gp)
 1004908:	1000171e 	bne	r2,zero,1004968 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 100490c:	e0bffe17 	ldw	r2,-8(fp)
 1004910:	10800104 	addi	r2,r2,4
 1004914:	1009883a 	mov	r4,r2
 1004918:	1000ce40 	call	1000ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 100491c:	e0bffe17 	ldw	r2,-8(fp)
 1004920:	10800b17 	ldw	r2,44(r2)
 1004924:	d0e71f17 	ldw	r3,-25476(gp)
 1004928:	1880032e 	bgeu	r3,r2,1004938 <xTaskRemoveFromEventList+0x68>
 100492c:	e0bffe17 	ldw	r2,-8(fp)
 1004930:	10800b17 	ldw	r2,44(r2)
 1004934:	d0a71f15 	stw	r2,-25476(gp)
 1004938:	e0bffe17 	ldw	r2,-8(fp)
 100493c:	10800b17 	ldw	r2,44(r2)
 1004940:	10c00524 	muli	r3,r2,20
 1004944:	008060f4 	movhi	r2,387
 1004948:	10a89e04 	addi	r2,r2,-23944
 100494c:	1887883a 	add	r3,r3,r2
 1004950:	e0bffe17 	ldw	r2,-8(fp)
 1004954:	10800104 	addi	r2,r2,4
 1004958:	100b883a 	mov	r5,r2
 100495c:	1809883a 	mov	r4,r3
 1004960:	1000b800 	call	1000b80 <vListInsertEnd>
 1004964:	00000606 	br	1004980 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 1004968:	e0bffe17 	ldw	r2,-8(fp)
 100496c:	10800604 	addi	r2,r2,24
 1004970:	100b883a 	mov	r5,r2
 1004974:	010060f4 	movhi	r4,387
 1004978:	2128c104 	addi	r4,r4,-23804
 100497c:	1000b800 	call	1000b80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004980:	e0bffe17 	ldw	r2,-8(fp)
 1004984:	10800b17 	ldw	r2,44(r2)
 1004988:	d0e71917 	ldw	r3,-25500(gp)
 100498c:	18c00b17 	ldw	r3,44(r3)
 1004990:	1880052e 	bgeu	r3,r2,10049a8 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 1004994:	00800044 	movi	r2,1
 1004998:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 100499c:	00800044 	movi	r2,1
 10049a0:	d0a72215 	stw	r2,-25464(gp)
 10049a4:	00000106 	br	10049ac <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 10049a8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10049ac:	e0bffd17 	ldw	r2,-12(fp)
}
 10049b0:	e037883a 	mov	sp,fp
 10049b4:	dfc00117 	ldw	ra,4(sp)
 10049b8:	df000017 	ldw	fp,0(sp)
 10049bc:	dec00204 	addi	sp,sp,8
 10049c0:	f800283a 	ret

010049c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 10049c4:	defffb04 	addi	sp,sp,-20
 10049c8:	dfc00415 	stw	ra,16(sp)
 10049cc:	df000315 	stw	fp,12(sp)
 10049d0:	df000304 	addi	fp,sp,12
 10049d4:	e13ffe15 	stw	r4,-8(fp)
 10049d8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 10049dc:	e0bfff17 	ldw	r2,-4(fp)
 10049e0:	10e00034 	orhi	r3,r2,32768
 10049e4:	e0bffe17 	ldw	r2,-8(fp)
 10049e8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10049ec:	e0bffe17 	ldw	r2,-8(fp)
 10049f0:	10800317 	ldw	r2,12(r2)
 10049f4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 10049f8:	e13ffe17 	ldw	r4,-8(fp)
 10049fc:	1000ce40 	call	1000ce4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1004a00:	e0bffd17 	ldw	r2,-12(fp)
 1004a04:	10800104 	addi	r2,r2,4
 1004a08:	1009883a 	mov	r4,r2
 1004a0c:	1000ce40 	call	1000ce4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1004a10:	e0bffd17 	ldw	r2,-12(fp)
 1004a14:	10800b17 	ldw	r2,44(r2)
 1004a18:	d0e71f17 	ldw	r3,-25476(gp)
 1004a1c:	1880032e 	bgeu	r3,r2,1004a2c <vTaskRemoveFromUnorderedEventList+0x68>
 1004a20:	e0bffd17 	ldw	r2,-12(fp)
 1004a24:	10800b17 	ldw	r2,44(r2)
 1004a28:	d0a71f15 	stw	r2,-25476(gp)
 1004a2c:	e0bffd17 	ldw	r2,-12(fp)
 1004a30:	10800b17 	ldw	r2,44(r2)
 1004a34:	10c00524 	muli	r3,r2,20
 1004a38:	008060f4 	movhi	r2,387
 1004a3c:	10a89e04 	addi	r2,r2,-23944
 1004a40:	1887883a 	add	r3,r3,r2
 1004a44:	e0bffd17 	ldw	r2,-12(fp)
 1004a48:	10800104 	addi	r2,r2,4
 1004a4c:	100b883a 	mov	r5,r2
 1004a50:	1809883a 	mov	r4,r3
 1004a54:	1000b800 	call	1000b80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004a58:	e0bffd17 	ldw	r2,-12(fp)
 1004a5c:	10800b17 	ldw	r2,44(r2)
 1004a60:	d0e71917 	ldw	r3,-25500(gp)
 1004a64:	18c00b17 	ldw	r3,44(r3)
 1004a68:	1880022e 	bgeu	r3,r2,1004a74 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 1004a6c:	00800044 	movi	r2,1
 1004a70:	d0a72215 	stw	r2,-25464(gp)
	}
}
 1004a74:	0001883a 	nop
 1004a78:	e037883a 	mov	sp,fp
 1004a7c:	dfc00117 	ldw	ra,4(sp)
 1004a80:	df000017 	ldw	fp,0(sp)
 1004a84:	dec00204 	addi	sp,sp,8
 1004a88:	f800283a 	ret

01004a8c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004a8c:	defffd04 	addi	sp,sp,-12
 1004a90:	dfc00215 	stw	ra,8(sp)
 1004a94:	df000115 	stw	fp,4(sp)
 1004a98:	df000104 	addi	fp,sp,4
 1004a9c:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 1004aa0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004aa4:	d0e72317 	ldw	r3,-25460(gp)
 1004aa8:	e0bfff17 	ldw	r2,-4(fp)
 1004aac:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 1004ab0:	d0e71e17 	ldw	r3,-25480(gp)
 1004ab4:	e0bfff17 	ldw	r2,-4(fp)
 1004ab8:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 1004abc:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1004ac0:	0001883a 	nop
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	dfc00117 	ldw	ra,4(sp)
 1004acc:	df000017 	ldw	fp,0(sp)
 1004ad0:	dec00204 	addi	sp,sp,8
 1004ad4:	f800283a 	ret

01004ad8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004ad8:	defffe04 	addi	sp,sp,-8
 1004adc:	df000115 	stw	fp,4(sp)
 1004ae0:	df000104 	addi	fp,sp,4
 1004ae4:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004ae8:	d0e72317 	ldw	r3,-25460(gp)
 1004aec:	e0bfff17 	ldw	r2,-4(fp)
 1004af0:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 1004af4:	d0e71e17 	ldw	r3,-25480(gp)
 1004af8:	e0bfff17 	ldw	r2,-4(fp)
 1004afc:	10c00115 	stw	r3,4(r2)
}
 1004b00:	0001883a 	nop
 1004b04:	e037883a 	mov	sp,fp
 1004b08:	df000017 	ldw	fp,0(sp)
 1004b0c:	dec00104 	addi	sp,sp,4
 1004b10:	f800283a 	ret

01004b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1004b14:	defff904 	addi	sp,sp,-28
 1004b18:	dfc00615 	stw	ra,24(sp)
 1004b1c:	df000515 	stw	fp,20(sp)
 1004b20:	df000504 	addi	fp,sp,20
 1004b24:	e13ffe15 	stw	r4,-8(fp)
 1004b28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1004b2c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 1004b30:	d0a71e17 	ldw	r2,-25480(gp)
 1004b34:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 1004b38:	e0bffe17 	ldw	r2,-8(fp)
 1004b3c:	10800117 	ldw	r2,4(r2)
 1004b40:	e0fffc17 	ldw	r3,-16(fp)
 1004b44:	1885c83a 	sub	r2,r3,r2
 1004b48:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 1004b4c:	e0bfff17 	ldw	r2,-4(fp)
 1004b50:	10800017 	ldw	r2,0(r2)
 1004b54:	10bfffd8 	cmpnei	r2,r2,-1
 1004b58:	1000021e 	bne	r2,zero,1004b64 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 1004b5c:	e03ffb15 	stw	zero,-20(fp)
 1004b60:	00001d06 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 1004b64:	e0bffe17 	ldw	r2,-8(fp)
 1004b68:	10c00017 	ldw	r3,0(r2)
 1004b6c:	d0a72317 	ldw	r2,-25460(gp)
 1004b70:	18800726 	beq	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
 1004b74:	e0bffe17 	ldw	r2,-8(fp)
 1004b78:	10800117 	ldw	r2,4(r2)
 1004b7c:	e0fffc17 	ldw	r3,-16(fp)
 1004b80:	18800336 	bltu	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 1004b84:	00800044 	movi	r2,1
 1004b88:	e0bffb15 	stw	r2,-20(fp)
 1004b8c:	00001206 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 1004b90:	e0bfff17 	ldw	r2,-4(fp)
 1004b94:	10800017 	ldw	r2,0(r2)
 1004b98:	e0fffd17 	ldw	r3,-12(fp)
 1004b9c:	18800a2e 	bgeu	r3,r2,1004bc8 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 1004ba0:	e0bfff17 	ldw	r2,-4(fp)
 1004ba4:	10c00017 	ldw	r3,0(r2)
 1004ba8:	e0bffd17 	ldw	r2,-12(fp)
 1004bac:	1887c83a 	sub	r3,r3,r2
 1004bb0:	e0bfff17 	ldw	r2,-4(fp)
 1004bb4:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 1004bb8:	e13ffe17 	ldw	r4,-8(fp)
 1004bbc:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 1004bc0:	e03ffb15 	stw	zero,-20(fp)
 1004bc4:	00000406 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 1004bc8:	e0bfff17 	ldw	r2,-4(fp)
 1004bcc:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 1004bd0:	00800044 	movi	r2,1
 1004bd4:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 1004bd8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1004bdc:	e0bffb17 	ldw	r2,-20(fp)
}
 1004be0:	e037883a 	mov	sp,fp
 1004be4:	dfc00117 	ldw	ra,4(sp)
 1004be8:	df000017 	ldw	fp,0(sp)
 1004bec:	dec00204 	addi	sp,sp,8
 1004bf0:	f800283a 	ret

01004bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1004bf4:	deffff04 	addi	sp,sp,-4
 1004bf8:	df000015 	stw	fp,0(sp)
 1004bfc:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1004c00:	00800044 	movi	r2,1
 1004c04:	d0a72215 	stw	r2,-25464(gp)
}
 1004c08:	0001883a 	nop
 1004c0c:	e037883a 	mov	sp,fp
 1004c10:	df000017 	ldw	fp,0(sp)
 1004c14:	dec00104 	addi	sp,sp,4
 1004c18:	f800283a 	ret

01004c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 1004c1c:	defffd04 	addi	sp,sp,-12
 1004c20:	dfc00215 	stw	ra,8(sp)
 1004c24:	df000115 	stw	fp,4(sp)
 1004c28:	df000104 	addi	fp,sp,4
 1004c2c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 1004c30:	1004cf00 	call	1004cf0 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1004c34:	003ffe06 	br	1004c30 <__alt_data_end+0xff004c30>

01004c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 1004c38:	defffd04 	addi	sp,sp,-12
 1004c3c:	dfc00215 	stw	ra,8(sp)
 1004c40:	df000115 	stw	fp,4(sp)
 1004c44:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c48:	e03fff15 	stw	zero,-4(fp)
 1004c4c:	00000a06 	br	1004c78 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 1004c50:	e0bfff17 	ldw	r2,-4(fp)
 1004c54:	10c00524 	muli	r3,r2,20
 1004c58:	008060f4 	movhi	r2,387
 1004c5c:	10a89e04 	addi	r2,r2,-23944
 1004c60:	1885883a 	add	r2,r3,r2
 1004c64:	1009883a 	mov	r4,r2
 1004c68:	1000aec0 	call	1000aec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c6c:	e0bfff17 	ldw	r2,-4(fp)
 1004c70:	10800044 	addi	r2,r2,1
 1004c74:	e0bfff15 	stw	r2,-4(fp)
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10800170 	cmpltui	r2,r2,5
 1004c80:	103ff31e 	bne	r2,zero,1004c50 <__alt_data_end+0xff004c50>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1004c84:	010060f4 	movhi	r4,387
 1004c88:	2128b704 	addi	r4,r4,-23844
 1004c8c:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 1004c90:	010060f4 	movhi	r4,387
 1004c94:	2128bc04 	addi	r4,r4,-23824
 1004c98:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 1004c9c:	010060f4 	movhi	r4,387
 1004ca0:	2128c104 	addi	r4,r4,-23804
 1004ca4:	1000aec0 	call	1000aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 1004ca8:	010060f4 	movhi	r4,387
 1004cac:	2128c604 	addi	r4,r4,-23784
 1004cb0:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 1004cb4:	010060f4 	movhi	r4,387
 1004cb8:	2128cb04 	addi	r4,r4,-23764
 1004cbc:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 1004cc0:	008060f4 	movhi	r2,387
 1004cc4:	10a8b704 	addi	r2,r2,-23844
 1004cc8:	d0a71a15 	stw	r2,-25496(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 1004ccc:	008060f4 	movhi	r2,387
 1004cd0:	10a8bc04 	addi	r2,r2,-23824
 1004cd4:	d0a71b15 	stw	r2,-25492(gp)
}
 1004cd8:	0001883a 	nop
 1004cdc:	e037883a 	mov	sp,fp
 1004ce0:	dfc00117 	ldw	ra,4(sp)
 1004ce4:	df000017 	ldw	fp,0(sp)
 1004ce8:	dec00204 	addi	sp,sp,8
 1004cec:	f800283a 	ret

01004cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 1004cf0:	defffd04 	addi	sp,sp,-12
 1004cf4:	dfc00215 	stw	ra,8(sp)
 1004cf8:	df000115 	stw	fp,4(sp)
 1004cfc:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d00:	00001306 	br	1004d50 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 1004d04:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004d08:	008060f4 	movhi	r2,387
 1004d0c:	10a8c604 	addi	r2,r2,-23784
 1004d10:	10800317 	ldw	r2,12(r2)
 1004d14:	10800317 	ldw	r2,12(r2)
 1004d18:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1004d1c:	e0bfff17 	ldw	r2,-4(fp)
 1004d20:	10800104 	addi	r2,r2,4
 1004d24:	1009883a 	mov	r4,r2
 1004d28:	1000ce40 	call	1000ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 1004d2c:	d0a71d17 	ldw	r2,-25484(gp)
 1004d30:	10bfffc4 	addi	r2,r2,-1
 1004d34:	d0a71d15 	stw	r2,-25484(gp)
				--uxDeletedTasksWaitingCleanUp;
 1004d38:	d0a71c17 	ldw	r2,-25488(gp)
 1004d3c:	10bfffc4 	addi	r2,r2,-1
 1004d40:	d0a71c15 	stw	r2,-25488(gp)
			}
			taskEXIT_CRITICAL();
 1004d44:	10052c40 	call	10052c4 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 1004d48:	e13fff17 	ldw	r4,-4(fp)
 1004d4c:	1004e340 	call	1004e34 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d50:	d0a71c17 	ldw	r2,-25488(gp)
 1004d54:	103feb1e 	bne	r2,zero,1004d04 <__alt_data_end+0xff004d04>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1004d58:	0001883a 	nop
 1004d5c:	e037883a 	mov	sp,fp
 1004d60:	dfc00117 	ldw	ra,4(sp)
 1004d64:	df000017 	ldw	fp,0(sp)
 1004d68:	dec00204 	addi	sp,sp,8
 1004d6c:	f800283a 	ret

01004d70 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 1004d70:	defffd04 	addi	sp,sp,-12
 1004d74:	df000215 	stw	fp,8(sp)
 1004d78:	df000204 	addi	fp,sp,8
 1004d7c:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 1004d80:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004d84:	00000606 	br	1004da0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 1004d88:	e0bfff17 	ldw	r2,-4(fp)
 1004d8c:	10800044 	addi	r2,r2,1
 1004d90:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 1004d94:	e0bffe17 	ldw	r2,-8(fp)
 1004d98:	10800044 	addi	r2,r2,1
 1004d9c:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004da0:	e0bfff17 	ldw	r2,-4(fp)
 1004da4:	10800003 	ldbu	r2,0(r2)
 1004da8:	10803fcc 	andi	r2,r2,255
 1004dac:	10802960 	cmpeqi	r2,r2,165
 1004db0:	103ff51e 	bne	r2,zero,1004d88 <__alt_data_end+0xff004d88>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 1004db4:	e0bffe17 	ldw	r2,-8(fp)
 1004db8:	1004d0ba 	srli	r2,r2,2
 1004dbc:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 1004dc0:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004dc4:	e037883a 	mov	sp,fp
 1004dc8:	df000017 	ldw	fp,0(sp)
 1004dcc:	dec00104 	addi	sp,sp,4
 1004dd0:	f800283a 	ret

01004dd4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1004dd4:	defffa04 	addi	sp,sp,-24
 1004dd8:	dfc00515 	stw	ra,20(sp)
 1004ddc:	df000415 	stw	fp,16(sp)
 1004de0:	df000404 	addi	fp,sp,16
 1004de4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1004de8:	e0bfff17 	ldw	r2,-4(fp)
 1004dec:	1000021e 	bne	r2,zero,1004df8 <uxTaskGetStackHighWaterMark+0x24>
 1004df0:	d0a71917 	ldw	r2,-25500(gp)
 1004df4:	00000106 	br	1004dfc <uxTaskGetStackHighWaterMark+0x28>
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 1004e00:	e0bffc17 	ldw	r2,-16(fp)
 1004e04:	10800c17 	ldw	r2,48(r2)
 1004e08:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1004e0c:	e13ffd17 	ldw	r4,-12(fp)
 1004e10:	1004d700 	call	1004d70 <prvTaskCheckFreeStackSpace>
 1004e14:	10bfffcc 	andi	r2,r2,65535
 1004e18:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1004e1c:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004e20:	e037883a 	mov	sp,fp
 1004e24:	dfc00117 	ldw	ra,4(sp)
 1004e28:	df000017 	ldw	fp,0(sp)
 1004e2c:	dec00204 	addi	sp,sp,8
 1004e30:	f800283a 	ret

01004e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 1004e34:	defffd04 	addi	sp,sp,-12
 1004e38:	dfc00215 	stw	ra,8(sp)
 1004e3c:	df000115 	stw	fp,4(sp)
 1004e40:	df000104 	addi	fp,sp,4
 1004e44:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1004e48:	e0bfff17 	ldw	r2,-4(fp)
 1004e4c:	10800c17 	ldw	r2,48(r2)
 1004e50:	1009883a 	mov	r4,r2
 1004e54:	10011840 	call	1001184 <vPortFree>
			vPortFree( pxTCB );
 1004e58:	e13fff17 	ldw	r4,-4(fp)
 1004e5c:	10011840 	call	1001184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1004e60:	0001883a 	nop
 1004e64:	e037883a 	mov	sp,fp
 1004e68:	dfc00117 	ldw	ra,4(sp)
 1004e6c:	df000017 	ldw	fp,0(sp)
 1004e70:	dec00204 	addi	sp,sp,8
 1004e74:	f800283a 	ret

01004e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 1004e78:	defffe04 	addi	sp,sp,-8
 1004e7c:	df000115 	stw	fp,4(sp)
 1004e80:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004e84:	d0a71a17 	ldw	r2,-25496(gp)
 1004e88:	10800017 	ldw	r2,0(r2)
 1004e8c:	1000031e 	bne	r2,zero,1004e9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 1004e90:	00bfffc4 	movi	r2,-1
 1004e94:	d0a72515 	stw	r2,-25452(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 1004e98:	00000706 	br	1004eb8 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004e9c:	d0a71a17 	ldw	r2,-25496(gp)
 1004ea0:	10800317 	ldw	r2,12(r2)
 1004ea4:	10800317 	ldw	r2,12(r2)
 1004ea8:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1004eac:	e0bfff17 	ldw	r2,-4(fp)
 1004eb0:	10800117 	ldw	r2,4(r2)
 1004eb4:	d0a72515 	stw	r2,-25452(gp)
	}
}
 1004eb8:	0001883a 	nop
 1004ebc:	e037883a 	mov	sp,fp
 1004ec0:	df000017 	ldw	fp,0(sp)
 1004ec4:	dec00104 	addi	sp,sp,4
 1004ec8:	f800283a 	ret

01004ecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 1004ecc:	defffe04 	addi	sp,sp,-8
 1004ed0:	df000115 	stw	fp,4(sp)
 1004ed4:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1004ed8:	d0a71917 	ldw	r2,-25500(gp)
 1004edc:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1004ee0:	e0bfff17 	ldw	r2,-4(fp)
	}
 1004ee4:	e037883a 	mov	sp,fp
 1004ee8:	df000017 	ldw	fp,0(sp)
 1004eec:	dec00104 	addi	sp,sp,4
 1004ef0:	f800283a 	ret

01004ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1004ef4:	defffb04 	addi	sp,sp,-20
 1004ef8:	dfc00415 	stw	ra,16(sp)
 1004efc:	df000315 	stw	fp,12(sp)
 1004f00:	df000304 	addi	fp,sp,12
 1004f04:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1004f08:	e0bfff17 	ldw	r2,-4(fp)
 1004f0c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1004f10:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1004f14:	e0bfff17 	ldw	r2,-4(fp)
 1004f18:	10004026 	beq	r2,zero,100501c <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1004f1c:	e0bffe17 	ldw	r2,-8(fp)
 1004f20:	10c00b17 	ldw	r3,44(r2)
 1004f24:	d0a71917 	ldw	r2,-25500(gp)
 1004f28:	10800b17 	ldw	r2,44(r2)
 1004f2c:	1880342e 	bgeu	r3,r2,1005000 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1004f30:	e0bffe17 	ldw	r2,-8(fp)
 1004f34:	10800617 	ldw	r2,24(r2)
 1004f38:	10000616 	blt	r2,zero,1004f54 <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1004f3c:	d0a71917 	ldw	r2,-25500(gp)
 1004f40:	10800b17 	ldw	r2,44(r2)
 1004f44:	00c00144 	movi	r3,5
 1004f48:	1887c83a 	sub	r3,r3,r2
 1004f4c:	e0bffe17 	ldw	r2,-8(fp)
 1004f50:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1004f54:	e0bffe17 	ldw	r2,-8(fp)
 1004f58:	10c00517 	ldw	r3,20(r2)
 1004f5c:	e0bffe17 	ldw	r2,-8(fp)
 1004f60:	10800b17 	ldw	r2,44(r2)
 1004f64:	11000524 	muli	r4,r2,20
 1004f68:	008060f4 	movhi	r2,387
 1004f6c:	10a89e04 	addi	r2,r2,-23944
 1004f70:	2085883a 	add	r2,r4,r2
 1004f74:	18801b1e 	bne	r3,r2,1004fe4 <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1004f78:	e0bffe17 	ldw	r2,-8(fp)
 1004f7c:	10800104 	addi	r2,r2,4
 1004f80:	1009883a 	mov	r4,r2
 1004f84:	1000ce40 	call	1000ce4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004f88:	d0a71917 	ldw	r2,-25500(gp)
 1004f8c:	10c00b17 	ldw	r3,44(r2)
 1004f90:	e0bffe17 	ldw	r2,-8(fp)
 1004f94:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1004f98:	e0bffe17 	ldw	r2,-8(fp)
 1004f9c:	10800b17 	ldw	r2,44(r2)
 1004fa0:	d0e71f17 	ldw	r3,-25476(gp)
 1004fa4:	1880032e 	bgeu	r3,r2,1004fb4 <xTaskPriorityInherit+0xc0>
 1004fa8:	e0bffe17 	ldw	r2,-8(fp)
 1004fac:	10800b17 	ldw	r2,44(r2)
 1004fb0:	d0a71f15 	stw	r2,-25476(gp)
 1004fb4:	e0bffe17 	ldw	r2,-8(fp)
 1004fb8:	10800b17 	ldw	r2,44(r2)
 1004fbc:	10c00524 	muli	r3,r2,20
 1004fc0:	008060f4 	movhi	r2,387
 1004fc4:	10a89e04 	addi	r2,r2,-23944
 1004fc8:	1887883a 	add	r3,r3,r2
 1004fcc:	e0bffe17 	ldw	r2,-8(fp)
 1004fd0:	10800104 	addi	r2,r2,4
 1004fd4:	100b883a 	mov	r5,r2
 1004fd8:	1809883a 	mov	r4,r3
 1004fdc:	1000b800 	call	1000b80 <vListInsertEnd>
 1004fe0:	00000406 	br	1004ff4 <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004fe4:	d0a71917 	ldw	r2,-25500(gp)
 1004fe8:	10c00b17 	ldw	r3,44(r2)
 1004fec:	e0bffe17 	ldw	r2,-8(fp)
 1004ff0:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1004ff4:	00800044 	movi	r2,1
 1004ff8:	e0bffd15 	stw	r2,-12(fp)
 1004ffc:	00000706 	br	100501c <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1005000:	e0bffe17 	ldw	r2,-8(fp)
 1005004:	10c01017 	ldw	r3,64(r2)
 1005008:	d0a71917 	ldw	r2,-25500(gp)
 100500c:	10800b17 	ldw	r2,44(r2)
 1005010:	1880022e 	bgeu	r3,r2,100501c <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1005014:	00800044 	movi	r2,1
 1005018:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 100501c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005020:	e037883a 	mov	sp,fp
 1005024:	dfc00117 	ldw	ra,4(sp)
 1005028:	df000017 	ldw	fp,0(sp)
 100502c:	dec00204 	addi	sp,sp,8
 1005030:	f800283a 	ret

01005034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1005034:	defffb04 	addi	sp,sp,-20
 1005038:	dfc00415 	stw	ra,16(sp)
 100503c:	df000315 	stw	fp,12(sp)
 1005040:	df000304 	addi	fp,sp,12
 1005044:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005048:	e0bfff17 	ldw	r2,-4(fp)
 100504c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1005050:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1005054:	e0bfff17 	ldw	r2,-4(fp)
 1005058:	10002f26 	beq	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 100505c:	e0bffe17 	ldw	r2,-8(fp)
 1005060:	10801117 	ldw	r2,68(r2)
 1005064:	10ffffc4 	addi	r3,r2,-1
 1005068:	e0bffe17 	ldw	r2,-8(fp)
 100506c:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1005070:	e0bffe17 	ldw	r2,-8(fp)
 1005074:	10c00b17 	ldw	r3,44(r2)
 1005078:	e0bffe17 	ldw	r2,-8(fp)
 100507c:	10801017 	ldw	r2,64(r2)
 1005080:	18802526 	beq	r3,r2,1005118 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1005084:	e0bffe17 	ldw	r2,-8(fp)
 1005088:	10801117 	ldw	r2,68(r2)
 100508c:	1000221e 	bne	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005090:	e0bffe17 	ldw	r2,-8(fp)
 1005094:	10800104 	addi	r2,r2,4
 1005098:	1009883a 	mov	r4,r2
 100509c:	1000ce40 	call	1000ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 10050a0:	e0bffe17 	ldw	r2,-8(fp)
 10050a4:	10c01017 	ldw	r3,64(r2)
 10050a8:	e0bffe17 	ldw	r2,-8(fp)
 10050ac:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10050b0:	e0bffe17 	ldw	r2,-8(fp)
 10050b4:	10800b17 	ldw	r2,44(r2)
 10050b8:	00c00144 	movi	r3,5
 10050bc:	1887c83a 	sub	r3,r3,r2
 10050c0:	e0bffe17 	ldw	r2,-8(fp)
 10050c4:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 10050c8:	e0bffe17 	ldw	r2,-8(fp)
 10050cc:	10800b17 	ldw	r2,44(r2)
 10050d0:	d0e71f17 	ldw	r3,-25476(gp)
 10050d4:	1880032e 	bgeu	r3,r2,10050e4 <xTaskPriorityDisinherit+0xb0>
 10050d8:	e0bffe17 	ldw	r2,-8(fp)
 10050dc:	10800b17 	ldw	r2,44(r2)
 10050e0:	d0a71f15 	stw	r2,-25476(gp)
 10050e4:	e0bffe17 	ldw	r2,-8(fp)
 10050e8:	10800b17 	ldw	r2,44(r2)
 10050ec:	10c00524 	muli	r3,r2,20
 10050f0:	008060f4 	movhi	r2,387
 10050f4:	10a89e04 	addi	r2,r2,-23944
 10050f8:	1887883a 	add	r3,r3,r2
 10050fc:	e0bffe17 	ldw	r2,-8(fp)
 1005100:	10800104 	addi	r2,r2,4
 1005104:	100b883a 	mov	r5,r2
 1005108:	1809883a 	mov	r4,r3
 100510c:	1000b800 	call	1000b80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1005110:	00800044 	movi	r2,1
 1005114:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1005118:	e0bffd17 	ldw	r2,-12(fp)
	}
 100511c:	e037883a 	mov	sp,fp
 1005120:	dfc00117 	ldw	ra,4(sp)
 1005124:	df000017 	ldw	fp,0(sp)
 1005128:	dec00204 	addi	sp,sp,8
 100512c:	f800283a 	ret

01005130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1005130:	defff804 	addi	sp,sp,-32
 1005134:	dfc00715 	stw	ra,28(sp)
 1005138:	df000615 	stw	fp,24(sp)
 100513c:	df000604 	addi	fp,sp,24
 1005140:	e13ffe15 	stw	r4,-8(fp)
 1005144:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005148:	e0bffe17 	ldw	r2,-8(fp)
 100514c:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1005150:	00800044 	movi	r2,1
 1005154:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1005158:	e0bffe17 	ldw	r2,-8(fp)
 100515c:	10003e26 	beq	r2,zero,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1005160:	e0bffb17 	ldw	r2,-20(fp)
 1005164:	10c01017 	ldw	r3,64(r2)
 1005168:	e0bfff17 	ldw	r2,-4(fp)
 100516c:	1880032e 	bgeu	r3,r2,100517c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1005170:	e0bfff17 	ldw	r2,-4(fp)
 1005174:	e0bffa15 	stw	r2,-24(fp)
 1005178:	00000306 	br	1005188 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 100517c:	e0bffb17 	ldw	r2,-20(fp)
 1005180:	10801017 	ldw	r2,64(r2)
 1005184:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1005188:	e0bffb17 	ldw	r2,-20(fp)
 100518c:	10c00b17 	ldw	r3,44(r2)
 1005190:	e0bffa17 	ldw	r2,-24(fp)
 1005194:	18803026 	beq	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1005198:	e0bffb17 	ldw	r2,-20(fp)
 100519c:	10c01117 	ldw	r3,68(r2)
 10051a0:	e0bffc17 	ldw	r2,-16(fp)
 10051a4:	18802c1e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 10051a8:	e0bffb17 	ldw	r2,-20(fp)
 10051ac:	10800b17 	ldw	r2,44(r2)
 10051b0:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 10051b4:	e0bffb17 	ldw	r2,-20(fp)
 10051b8:	e0fffa17 	ldw	r3,-24(fp)
 10051bc:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 10051c0:	e0bffb17 	ldw	r2,-20(fp)
 10051c4:	10800617 	ldw	r2,24(r2)
 10051c8:	10000516 	blt	r2,zero,10051e0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10051cc:	00c00144 	movi	r3,5
 10051d0:	e0bffa17 	ldw	r2,-24(fp)
 10051d4:	1887c83a 	sub	r3,r3,r2
 10051d8:	e0bffb17 	ldw	r2,-20(fp)
 10051dc:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 10051e0:	e0bffb17 	ldw	r2,-20(fp)
 10051e4:	10c00517 	ldw	r3,20(r2)
 10051e8:	e0bffd17 	ldw	r2,-12(fp)
 10051ec:	11000524 	muli	r4,r2,20
 10051f0:	008060f4 	movhi	r2,387
 10051f4:	10a89e04 	addi	r2,r2,-23944
 10051f8:	2085883a 	add	r2,r4,r2
 10051fc:	1880161e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005200:	e0bffb17 	ldw	r2,-20(fp)
 1005204:	10800104 	addi	r2,r2,4
 1005208:	1009883a 	mov	r4,r2
 100520c:	1000ce40 	call	1000ce4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1005210:	e0bffb17 	ldw	r2,-20(fp)
 1005214:	10800b17 	ldw	r2,44(r2)
 1005218:	d0e71f17 	ldw	r3,-25476(gp)
 100521c:	1880032e 	bgeu	r3,r2,100522c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1005220:	e0bffb17 	ldw	r2,-20(fp)
 1005224:	10800b17 	ldw	r2,44(r2)
 1005228:	d0a71f15 	stw	r2,-25476(gp)
 100522c:	e0bffb17 	ldw	r2,-20(fp)
 1005230:	10800b17 	ldw	r2,44(r2)
 1005234:	10c00524 	muli	r3,r2,20
 1005238:	008060f4 	movhi	r2,387
 100523c:	10a89e04 	addi	r2,r2,-23944
 1005240:	1887883a 	add	r3,r3,r2
 1005244:	e0bffb17 	ldw	r2,-20(fp)
 1005248:	10800104 	addi	r2,r2,4
 100524c:	100b883a 	mov	r5,r2
 1005250:	1809883a 	mov	r4,r3
 1005254:	1000b800 	call	1000b80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005258:	0001883a 	nop
 100525c:	e037883a 	mov	sp,fp
 1005260:	dfc00117 	ldw	ra,4(sp)
 1005264:	df000017 	ldw	fp,0(sp)
 1005268:	dec00204 	addi	sp,sp,8
 100526c:	f800283a 	ret

01005270 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1005270:	defffe04 	addi	sp,sp,-8
 1005274:	df000115 	stw	fp,4(sp)
 1005278:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100527c:	0005303a 	rdctl	r2,status
 1005280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005284:	e0ffff17 	ldw	r3,-4(fp)
 1005288:	00bfff84 	movi	r2,-2
 100528c:	1884703a 	and	r2,r3,r2
 1005290:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 1005294:	d0a72017 	ldw	r2,-25472(gp)
 1005298:	10000526 	beq	r2,zero,10052b0 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 100529c:	d0a71917 	ldw	r2,-25500(gp)
 10052a0:	10c00f17 	ldw	r3,60(r2)
 10052a4:	18c00044 	addi	r3,r3,1
 10052a8:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 10052ac:	d0a71917 	ldw	r2,-25500(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 10052b0:	0001883a 	nop
 10052b4:	e037883a 	mov	sp,fp
 10052b8:	df000017 	ldw	fp,0(sp)
 10052bc:	dec00104 	addi	sp,sp,4
 10052c0:	f800283a 	ret

010052c4 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 10052c4:	defffe04 	addi	sp,sp,-8
 10052c8:	df000115 	stw	fp,4(sp)
 10052cc:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 10052d0:	d0a72017 	ldw	r2,-25472(gp)
 10052d4:	10000e26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 10052d8:	d0a71917 	ldw	r2,-25500(gp)
 10052dc:	10800f17 	ldw	r2,60(r2)
 10052e0:	10000b26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 10052e4:	d0a71917 	ldw	r2,-25500(gp)
 10052e8:	10c00f17 	ldw	r3,60(r2)
 10052ec:	18ffffc4 	addi	r3,r3,-1
 10052f0:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 10052f4:	d0a71917 	ldw	r2,-25500(gp)
 10052f8:	10800f17 	ldw	r2,60(r2)
 10052fc:	1000041e 	bne	r2,zero,1005310 <vTaskExitCritical+0x4c>
 1005300:	00800044 	movi	r2,1
 1005304:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005308:	e0bfff17 	ldw	r2,-4(fp)
 100530c:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005310:	0001883a 	nop
 1005314:	e037883a 	mov	sp,fp
 1005318:	df000017 	ldw	fp,0(sp)
 100531c:	dec00104 	addi	sp,sp,4
 1005320:	f800283a 	ret

01005324 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1005324:	defffe04 	addi	sp,sp,-8
 1005328:	df000115 	stw	fp,4(sp)
 100532c:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1005330:	d0a71917 	ldw	r2,-25500(gp)
 1005334:	10800617 	ldw	r2,24(r2)
 1005338:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100533c:	d0a71917 	ldw	r2,-25500(gp)
 1005340:	d0e71917 	ldw	r3,-25500(gp)
 1005344:	18c00b17 	ldw	r3,44(r3)
 1005348:	01000144 	movi	r4,5
 100534c:	20c7c83a 	sub	r3,r4,r3
 1005350:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 1005354:	e0bfff17 	ldw	r2,-4(fp)
}
 1005358:	e037883a 	mov	sp,fp
 100535c:	df000017 	ldw	fp,0(sp)
 1005360:	dec00104 	addi	sp,sp,4
 1005364:	f800283a 	ret

01005368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1005368:	deffff04 	addi	sp,sp,-4
 100536c:	df000015 	stw	fp,0(sp)
 1005370:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 1005374:	d0a71917 	ldw	r2,-25500(gp)
 1005378:	10000426 	beq	r2,zero,100538c <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 100537c:	d0a71917 	ldw	r2,-25500(gp)
 1005380:	10c01117 	ldw	r3,68(r2)
 1005384:	18c00044 	addi	r3,r3,1
 1005388:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 100538c:	d0a71917 	ldw	r2,-25500(gp)
	}
 1005390:	e037883a 	mov	sp,fp
 1005394:	df000017 	ldw	fp,0(sp)
 1005398:	dec00104 	addi	sp,sp,4
 100539c:	f800283a 	ret

010053a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 10053a0:	defffb04 	addi	sp,sp,-20
 10053a4:	dfc00415 	stw	ra,16(sp)
 10053a8:	df000315 	stw	fp,12(sp)
 10053ac:	df000304 	addi	fp,sp,12
 10053b0:	e13ffe15 	stw	r4,-8(fp)
 10053b4:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 10053b8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 10053bc:	d0a71917 	ldw	r2,-25500(gp)
 10053c0:	10801217 	ldw	r2,72(r2)
 10053c4:	1000091e 	bne	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10053c8:	d0a71917 	ldw	r2,-25500(gp)
 10053cc:	00c00044 	movi	r3,1
 10053d0:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10053d4:	e0bfff17 	ldw	r2,-4(fp)
 10053d8:	10000426 	beq	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10053dc:	01400044 	movi	r5,1
 10053e0:	e13fff17 	ldw	r4,-4(fp)
 10053e4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10053e8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10053ec:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10053f0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 10053f4:	d0a71917 	ldw	r2,-25500(gp)
 10053f8:	10801217 	ldw	r2,72(r2)
 10053fc:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 1005400:	e0bffd17 	ldw	r2,-12(fp)
 1005404:	10000926 	beq	r2,zero,100542c <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 1005408:	e0bffe17 	ldw	r2,-8(fp)
 100540c:	10000326 	beq	r2,zero,100541c <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 1005410:	d0a71917 	ldw	r2,-25500(gp)
 1005414:	10001215 	stw	zero,72(r2)
 1005418:	00000406 	br	100542c <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 100541c:	d0a71917 	ldw	r2,-25500(gp)
 1005420:	e0fffd17 	ldw	r3,-12(fp)
 1005424:	18ffffc4 	addi	r3,r3,-1
 1005428:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 100542c:	d0a71917 	ldw	r2,-25500(gp)
 1005430:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005434:	10052c40 	call	10052c4 <vTaskExitCritical>

		return ulReturn;
 1005438:	e0bffd17 	ldw	r2,-12(fp)
	}
 100543c:	e037883a 	mov	sp,fp
 1005440:	dfc00117 	ldw	ra,4(sp)
 1005444:	df000017 	ldw	fp,0(sp)
 1005448:	dec00204 	addi	sp,sp,8
 100544c:	f800283a 	ret

01005450 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1005450:	defff904 	addi	sp,sp,-28
 1005454:	dfc00615 	stw	ra,24(sp)
 1005458:	df000515 	stw	fp,20(sp)
 100545c:	df000504 	addi	fp,sp,20
 1005460:	e13ffc15 	stw	r4,-16(fp)
 1005464:	e17ffd15 	stw	r5,-12(fp)
 1005468:	e1bffe15 	stw	r6,-8(fp)
 100546c:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1005470:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1005474:	d0a71917 	ldw	r2,-25500(gp)
 1005478:	10801303 	ldbu	r2,76(r2)
 100547c:	10803fcc 	andi	r2,r2,255
 1005480:	108000a0 	cmpeqi	r2,r2,2
 1005484:	10000f1e 	bne	r2,zero,10054c4 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1005488:	d0a71917 	ldw	r2,-25500(gp)
 100548c:	11001217 	ldw	r4,72(r2)
 1005490:	e0fffc17 	ldw	r3,-16(fp)
 1005494:	00c6303a 	nor	r3,zero,r3
 1005498:	20c6703a 	and	r3,r4,r3
 100549c:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10054a0:	d0a71917 	ldw	r2,-25500(gp)
 10054a4:	00c00044 	movi	r3,1
 10054a8:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10054ac:	e0bfff17 	ldw	r2,-4(fp)
 10054b0:	10000426 	beq	r2,zero,10054c4 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10054b4:	01400044 	movi	r5,1
 10054b8:	e13fff17 	ldw	r4,-4(fp)
 10054bc:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10054c0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10054c4:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10054c8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 10054cc:	e0bffe17 	ldw	r2,-8(fp)
 10054d0:	10000426 	beq	r2,zero,10054e4 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 10054d4:	d0a71917 	ldw	r2,-25500(gp)
 10054d8:	10c01217 	ldw	r3,72(r2)
 10054dc:	e0bffe17 	ldw	r2,-8(fp)
 10054e0:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 10054e4:	d0a71917 	ldw	r2,-25500(gp)
 10054e8:	10801303 	ldbu	r2,76(r2)
 10054ec:	10803fcc 	andi	r2,r2,255
 10054f0:	108000a0 	cmpeqi	r2,r2,2
 10054f4:	1000021e 	bne	r2,zero,1005500 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 10054f8:	e03ffb15 	stw	zero,-20(fp)
 10054fc:	00000806 	br	1005520 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 1005500:	d0a71917 	ldw	r2,-25500(gp)
 1005504:	11001217 	ldw	r4,72(r2)
 1005508:	e0fffd17 	ldw	r3,-12(fp)
 100550c:	00c6303a 	nor	r3,zero,r3
 1005510:	20c6703a 	and	r3,r4,r3
 1005514:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 1005518:	00800044 	movi	r2,1
 100551c:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005520:	d0a71917 	ldw	r2,-25500(gp)
 1005524:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005528:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 100552c:	e0bffb17 	ldw	r2,-20(fp)
	}
 1005530:	e037883a 	mov	sp,fp
 1005534:	dfc00117 	ldw	ra,4(sp)
 1005538:	df000017 	ldw	fp,0(sp)
 100553c:	dec00204 	addi	sp,sp,8
 1005540:	f800283a 	ret

01005544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 1005544:	defff704 	addi	sp,sp,-36
 1005548:	dfc00815 	stw	ra,32(sp)
 100554c:	df000715 	stw	fp,28(sp)
 1005550:	df000704 	addi	fp,sp,28
 1005554:	e13ffc15 	stw	r4,-16(fp)
 1005558:	e17ffd15 	stw	r5,-12(fp)
 100555c:	e1bffe15 	stw	r6,-8(fp)
 1005560:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 1005564:	00800044 	movi	r2,1
 1005568:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 100556c:	e0bffc17 	ldw	r2,-16(fp)
 1005570:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 1005574:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 1005578:	e0bfff17 	ldw	r2,-4(fp)
 100557c:	10000426 	beq	r2,zero,1005590 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1005580:	e0bffa17 	ldw	r2,-24(fp)
 1005584:	10c01217 	ldw	r3,72(r2)
 1005588:	e0bfff17 	ldw	r2,-4(fp)
 100558c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1005590:	e0bffa17 	ldw	r2,-24(fp)
 1005594:	10801303 	ldbu	r2,76(r2)
 1005598:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 100559c:	e0bffa17 	ldw	r2,-24(fp)
 10055a0:	00c00084 	movi	r3,2
 10055a4:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 10055a8:	e0bffe17 	ldw	r2,-8(fp)
 10055ac:	10800168 	cmpgeui	r2,r2,5
 10055b0:	1000261e 	bne	r2,zero,100564c <xTaskGenericNotify+0x108>
 10055b4:	e0bffe17 	ldw	r2,-8(fp)
 10055b8:	100690ba 	slli	r3,r2,2
 10055bc:	00804034 	movhi	r2,256
 10055c0:	10957404 	addi	r2,r2,21968
 10055c4:	1885883a 	add	r2,r3,r2
 10055c8:	10800017 	ldw	r2,0(r2)
 10055cc:	1000683a 	jmp	r2
 10055d0:	01005654 	movui	r4,345
 10055d4:	010055e4 	muli	r4,zero,343
 10055d8:	01005600 	call	100560 <__alt_mem_sdram-0xeffaa0>
 10055dc:	01005618 	cmpnei	r4,zero,344
 10055e0:	01005628 	cmpgeui	r4,zero,344
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 10055e4:	e0bffa17 	ldw	r2,-24(fp)
 10055e8:	10c01217 	ldw	r3,72(r2)
 10055ec:	e0bffd17 	ldw	r2,-12(fp)
 10055f0:	1886b03a 	or	r3,r3,r2
 10055f4:	e0bffa17 	ldw	r2,-24(fp)
 10055f8:	10c01215 	stw	r3,72(r2)
					break;
 10055fc:	00001606 	br	1005658 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1005600:	e0bffa17 	ldw	r2,-24(fp)
 1005604:	10801217 	ldw	r2,72(r2)
 1005608:	10c00044 	addi	r3,r2,1
 100560c:	e0bffa17 	ldw	r2,-24(fp)
 1005610:	10c01215 	stw	r3,72(r2)
					break;
 1005614:	00001006 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1005618:	e0bffa17 	ldw	r2,-24(fp)
 100561c:	e0fffd17 	ldw	r3,-12(fp)
 1005620:	10c01215 	stw	r3,72(r2)
					break;
 1005624:	00000c06 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1005628:	e0bffb03 	ldbu	r2,-20(fp)
 100562c:	108000a0 	cmpeqi	r2,r2,2
 1005630:	1000041e 	bne	r2,zero,1005644 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1005634:	e0bffa17 	ldw	r2,-24(fp)
 1005638:	e0fffd17 	ldw	r3,-12(fp)
 100563c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1005640:	00000506 	br	1005658 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1005644:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 1005648:	00000306 	br	1005658 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 100564c:	0001883a 	nop
 1005650:	00000106 	br	1005658 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005654:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005658:	e0bffb03 	ldbu	r2,-20(fp)
 100565c:	10800058 	cmpnei	r2,r2,1
 1005660:	10001c1e 	bne	r2,zero,10056d4 <xTaskGenericNotify+0x190>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005664:	e0bffa17 	ldw	r2,-24(fp)
 1005668:	10800104 	addi	r2,r2,4
 100566c:	1009883a 	mov	r4,r2
 1005670:	1000ce40 	call	1000ce4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 1005674:	e0bffa17 	ldw	r2,-24(fp)
 1005678:	10800b17 	ldw	r2,44(r2)
 100567c:	d0e71f17 	ldw	r3,-25476(gp)
 1005680:	1880032e 	bgeu	r3,r2,1005690 <xTaskGenericNotify+0x14c>
 1005684:	e0bffa17 	ldw	r2,-24(fp)
 1005688:	10800b17 	ldw	r2,44(r2)
 100568c:	d0a71f15 	stw	r2,-25476(gp)
 1005690:	e0bffa17 	ldw	r2,-24(fp)
 1005694:	10800b17 	ldw	r2,44(r2)
 1005698:	10c00524 	muli	r3,r2,20
 100569c:	008060f4 	movhi	r2,387
 10056a0:	10a89e04 	addi	r2,r2,-23944
 10056a4:	1887883a 	add	r3,r3,r2
 10056a8:	e0bffa17 	ldw	r2,-24(fp)
 10056ac:	10800104 	addi	r2,r2,4
 10056b0:	100b883a 	mov	r5,r2
 10056b4:	1809883a 	mov	r4,r3
 10056b8:	1000b800 	call	1000b80 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10056bc:	e0bffa17 	ldw	r2,-24(fp)
 10056c0:	10800b17 	ldw	r2,44(r2)
 10056c4:	d0e71917 	ldw	r3,-25500(gp)
 10056c8:	18c00b17 	ldw	r3,44(r3)
 10056cc:	1880012e 	bgeu	r3,r2,10056d4 <xTaskGenericNotify+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 10056d0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10056d4:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 10056d8:	e0bff917 	ldw	r2,-28(fp)
	}
 10056dc:	e037883a 	mov	sp,fp
 10056e0:	dfc00117 	ldw	ra,4(sp)
 10056e4:	df000017 	ldw	fp,0(sp)
 10056e8:	dec00204 	addi	sp,sp,8
 10056ec:	f800283a 	ret

010056f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10056f0:	defff604 	addi	sp,sp,-40
 10056f4:	dfc00915 	stw	ra,36(sp)
 10056f8:	df000815 	stw	fp,32(sp)
 10056fc:	df000804 	addi	fp,sp,32
 1005700:	e13ffc15 	stw	r4,-16(fp)
 1005704:	e17ffd15 	stw	r5,-12(fp)
 1005708:	e1bffe15 	stw	r6,-8(fp)
 100570c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1005710:	00800044 	movi	r2,1
 1005714:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1005718:	e0bffc17 	ldw	r2,-16(fp)
 100571c:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1005720:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 1005724:	e0bfff17 	ldw	r2,-4(fp)
 1005728:	10000426 	beq	r2,zero,100573c <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 100572c:	e0bff917 	ldw	r2,-28(fp)
 1005730:	10c01217 	ldw	r3,72(r2)
 1005734:	e0bfff17 	ldw	r2,-4(fp)
 1005738:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 100573c:	e0bff917 	ldw	r2,-28(fp)
 1005740:	10801303 	ldbu	r2,76(r2)
 1005744:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005748:	e0bff917 	ldw	r2,-28(fp)
 100574c:	00c00084 	movi	r3,2
 1005750:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 1005754:	e0bffe17 	ldw	r2,-8(fp)
 1005758:	10800168 	cmpgeui	r2,r2,5
 100575c:	1000261e 	bne	r2,zero,10057f8 <xTaskGenericNotifyFromISR+0x108>
 1005760:	e0bffe17 	ldw	r2,-8(fp)
 1005764:	100690ba 	slli	r3,r2,2
 1005768:	00804034 	movhi	r2,256
 100576c:	1095df04 	addi	r2,r2,22396
 1005770:	1885883a 	add	r2,r3,r2
 1005774:	10800017 	ldw	r2,0(r2)
 1005778:	1000683a 	jmp	r2
 100577c:	01005800 	call	100580 <__alt_mem_sdram-0xeffa80>
 1005780:	01005790 	cmplti	r4,zero,350
 1005784:	010057ac 	andhi	r4,zero,350
 1005788:	010057c4 	movi	r4,351
 100578c:	010057d4 	movui	r4,351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1005790:	e0bff917 	ldw	r2,-28(fp)
 1005794:	10c01217 	ldw	r3,72(r2)
 1005798:	e0bffd17 	ldw	r2,-12(fp)
 100579c:	1886b03a 	or	r3,r3,r2
 10057a0:	e0bff917 	ldw	r2,-28(fp)
 10057a4:	10c01215 	stw	r3,72(r2)
					break;
 10057a8:	00001606 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 10057ac:	e0bff917 	ldw	r2,-28(fp)
 10057b0:	10801217 	ldw	r2,72(r2)
 10057b4:	10c00044 	addi	r3,r2,1
 10057b8:	e0bff917 	ldw	r2,-28(fp)
 10057bc:	10c01215 	stw	r3,72(r2)
					break;
 10057c0:	00001006 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 10057c4:	e0bff917 	ldw	r2,-28(fp)
 10057c8:	e0fffd17 	ldw	r3,-12(fp)
 10057cc:	10c01215 	stw	r3,72(r2)
					break;
 10057d0:	00000c06 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 10057d4:	e0bffb03 	ldbu	r2,-20(fp)
 10057d8:	108000a0 	cmpeqi	r2,r2,2
 10057dc:	1000041e 	bne	r2,zero,10057f0 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 10057e0:	e0bff917 	ldw	r2,-28(fp)
 10057e4:	e0fffd17 	ldw	r3,-12(fp)
 10057e8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 10057ec:	00000506 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 10057f0:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 10057f4:	00000306 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 10057f8:	0001883a 	nop
 10057fc:	00000106 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005800:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005804:	e0bffb03 	ldbu	r2,-20(fp)
 1005808:	10800058 	cmpnei	r2,r2,1
 100580c:	10002b1e 	bne	r2,zero,10058bc <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005810:	d0a72717 	ldw	r2,-25444(gp)
 1005814:	1000171e 	bne	r2,zero,1005874 <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005818:	e0bff917 	ldw	r2,-28(fp)
 100581c:	10800104 	addi	r2,r2,4
 1005820:	1009883a 	mov	r4,r2
 1005824:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005828:	e0bff917 	ldw	r2,-28(fp)
 100582c:	10800b17 	ldw	r2,44(r2)
 1005830:	d0e71f17 	ldw	r3,-25476(gp)
 1005834:	1880032e 	bgeu	r3,r2,1005844 <xTaskGenericNotifyFromISR+0x154>
 1005838:	e0bff917 	ldw	r2,-28(fp)
 100583c:	10800b17 	ldw	r2,44(r2)
 1005840:	d0a71f15 	stw	r2,-25476(gp)
 1005844:	e0bff917 	ldw	r2,-28(fp)
 1005848:	10800b17 	ldw	r2,44(r2)
 100584c:	10c00524 	muli	r3,r2,20
 1005850:	008060f4 	movhi	r2,387
 1005854:	10a89e04 	addi	r2,r2,-23944
 1005858:	1887883a 	add	r3,r3,r2
 100585c:	e0bff917 	ldw	r2,-28(fp)
 1005860:	10800104 	addi	r2,r2,4
 1005864:	100b883a 	mov	r5,r2
 1005868:	1809883a 	mov	r4,r3
 100586c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005870:	00000606 	br	100588c <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005874:	e0bff917 	ldw	r2,-28(fp)
 1005878:	10800604 	addi	r2,r2,24
 100587c:	100b883a 	mov	r5,r2
 1005880:	010060f4 	movhi	r4,387
 1005884:	2128c104 	addi	r4,r4,-23804
 1005888:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 100588c:	e0bff917 	ldw	r2,-28(fp)
 1005890:	10800b17 	ldw	r2,44(r2)
 1005894:	d0e71917 	ldw	r3,-25500(gp)
 1005898:	18c00b17 	ldw	r3,44(r3)
 100589c:	1880072e 	bgeu	r3,r2,10058bc <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10058a0:	e0800217 	ldw	r2,8(fp)
 10058a4:	10000326 	beq	r2,zero,10058b4 <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10058a8:	e0800217 	ldw	r2,8(fp)
 10058ac:	00c00044 	movi	r3,1
 10058b0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10058b4:	00800044 	movi	r2,1
 10058b8:	d0a72215 	stw	r2,-25464(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 10058bc:	e0bff817 	ldw	r2,-32(fp)
	}
 10058c0:	e037883a 	mov	sp,fp
 10058c4:	dfc00117 	ldw	ra,4(sp)
 10058c8:	df000017 	ldw	fp,0(sp)
 10058cc:	dec00204 	addi	sp,sp,8
 10058d0:	f800283a 	ret

010058d4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10058d4:	defff904 	addi	sp,sp,-28
 10058d8:	dfc00615 	stw	ra,24(sp)
 10058dc:	df000515 	stw	fp,20(sp)
 10058e0:	df000504 	addi	fp,sp,20
 10058e4:	e13ffe15 	stw	r4,-8(fp)
 10058e8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 10058ec:	e0bffe17 	ldw	r2,-8(fp)
 10058f0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10058f4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 10058f8:	e0bffb17 	ldw	r2,-20(fp)
 10058fc:	10801303 	ldbu	r2,76(r2)
 1005900:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005904:	e0bffb17 	ldw	r2,-20(fp)
 1005908:	00c00084 	movi	r3,2
 100590c:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1005910:	e0bffb17 	ldw	r2,-20(fp)
 1005914:	10801217 	ldw	r2,72(r2)
 1005918:	10c00044 	addi	r3,r2,1
 100591c:	e0bffb17 	ldw	r2,-20(fp)
 1005920:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005924:	e0bffd03 	ldbu	r2,-12(fp)
 1005928:	10800058 	cmpnei	r2,r2,1
 100592c:	10002b1e 	bne	r2,zero,10059dc <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005930:	d0a72717 	ldw	r2,-25444(gp)
 1005934:	1000171e 	bne	r2,zero,1005994 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005938:	e0bffb17 	ldw	r2,-20(fp)
 100593c:	10800104 	addi	r2,r2,4
 1005940:	1009883a 	mov	r4,r2
 1005944:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005948:	e0bffb17 	ldw	r2,-20(fp)
 100594c:	10800b17 	ldw	r2,44(r2)
 1005950:	d0e71f17 	ldw	r3,-25476(gp)
 1005954:	1880032e 	bgeu	r3,r2,1005964 <vTaskNotifyGiveFromISR+0x90>
 1005958:	e0bffb17 	ldw	r2,-20(fp)
 100595c:	10800b17 	ldw	r2,44(r2)
 1005960:	d0a71f15 	stw	r2,-25476(gp)
 1005964:	e0bffb17 	ldw	r2,-20(fp)
 1005968:	10800b17 	ldw	r2,44(r2)
 100596c:	10c00524 	muli	r3,r2,20
 1005970:	008060f4 	movhi	r2,387
 1005974:	10a89e04 	addi	r2,r2,-23944
 1005978:	1887883a 	add	r3,r3,r2
 100597c:	e0bffb17 	ldw	r2,-20(fp)
 1005980:	10800104 	addi	r2,r2,4
 1005984:	100b883a 	mov	r5,r2
 1005988:	1809883a 	mov	r4,r3
 100598c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005990:	00000606 	br	10059ac <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005994:	e0bffb17 	ldw	r2,-20(fp)
 1005998:	10800604 	addi	r2,r2,24
 100599c:	100b883a 	mov	r5,r2
 10059a0:	010060f4 	movhi	r4,387
 10059a4:	2128c104 	addi	r4,r4,-23804
 10059a8:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10059ac:	e0bffb17 	ldw	r2,-20(fp)
 10059b0:	10800b17 	ldw	r2,44(r2)
 10059b4:	d0e71917 	ldw	r3,-25500(gp)
 10059b8:	18c00b17 	ldw	r3,44(r3)
 10059bc:	1880072e 	bgeu	r3,r2,10059dc <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10059c0:	e0bfff17 	ldw	r2,-4(fp)
 10059c4:	10000326 	beq	r2,zero,10059d4 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10059c8:	e0bfff17 	ldw	r2,-4(fp)
 10059cc:	00c00044 	movi	r3,1
 10059d0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10059d4:	00800044 	movi	r2,1
 10059d8:	d0a72215 	stw	r2,-25464(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 10059dc:	0001883a 	nop
 10059e0:	e037883a 	mov	sp,fp
 10059e4:	dfc00117 	ldw	ra,4(sp)
 10059e8:	df000017 	ldw	fp,0(sp)
 10059ec:	dec00204 	addi	sp,sp,8
 10059f0:	f800283a 	ret

010059f4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 10059f4:	defffb04 	addi	sp,sp,-20
 10059f8:	dfc00415 	stw	ra,16(sp)
 10059fc:	df000315 	stw	fp,12(sp)
 1005a00:	df000304 	addi	fp,sp,12
 1005a04:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 1005a08:	e0bfff17 	ldw	r2,-4(fp)
 1005a0c:	1000021e 	bne	r2,zero,1005a18 <xTaskNotifyStateClear+0x24>
 1005a10:	d0a71917 	ldw	r2,-25500(gp)
 1005a14:	00000106 	br	1005a1c <xTaskNotifyStateClear+0x28>
 1005a18:	e0bfff17 	ldw	r2,-4(fp)
 1005a1c:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1005a20:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1005a24:	e0bffe17 	ldw	r2,-8(fp)
 1005a28:	10801303 	ldbu	r2,76(r2)
 1005a2c:	10803fcc 	andi	r2,r2,255
 1005a30:	10800098 	cmpnei	r2,r2,2
 1005a34:	1000051e 	bne	r2,zero,1005a4c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005a38:	e0bffe17 	ldw	r2,-8(fp)
 1005a3c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 1005a40:	00800044 	movi	r2,1
 1005a44:	e0bffd15 	stw	r2,-12(fp)
 1005a48:	00000106 	br	1005a50 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 1005a4c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 1005a50:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 1005a54:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005a58:	e037883a 	mov	sp,fp
 1005a5c:	dfc00117 	ldw	ra,4(sp)
 1005a60:	df000017 	ldw	fp,0(sp)
 1005a64:	dec00204 	addi	sp,sp,8
 1005a68:	f800283a 	ret

01005a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 1005a6c:	defffa04 	addi	sp,sp,-24
 1005a70:	dfc00515 	stw	ra,20(sp)
 1005a74:	df000415 	stw	fp,16(sp)
 1005a78:	df000404 	addi	fp,sp,16
 1005a7c:	e13ffe15 	stw	r4,-8(fp)
 1005a80:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1005a84:	d0a71e17 	ldw	r2,-25480(gp)
 1005a88:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005a8c:	d0a71917 	ldw	r2,-25500(gp)
 1005a90:	10800104 	addi	r2,r2,4
 1005a94:	1009883a 	mov	r4,r2
 1005a98:	1000ce40 	call	1000ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1005a9c:	e0bffe17 	ldw	r2,-8(fp)
 1005aa0:	10bfffd8 	cmpnei	r2,r2,-1
 1005aa4:	1000091e 	bne	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
 1005aa8:	e0bfff17 	ldw	r2,-4(fp)
 1005aac:	10000726 	beq	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005ab0:	d0a71917 	ldw	r2,-25500(gp)
 1005ab4:	10800104 	addi	r2,r2,4
 1005ab8:	100b883a 	mov	r5,r2
 1005abc:	010060f4 	movhi	r4,387
 1005ac0:	2128cb04 	addi	r4,r4,-23764
 1005ac4:	1000b800 	call	1000b80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005ac8:	00001c06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 1005acc:	e0fffc17 	ldw	r3,-16(fp)
 1005ad0:	e0bffe17 	ldw	r2,-8(fp)
 1005ad4:	1885883a 	add	r2,r3,r2
 1005ad8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 1005adc:	d0a71917 	ldw	r2,-25500(gp)
 1005ae0:	e0fffd17 	ldw	r3,-12(fp)
 1005ae4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 1005ae8:	e0fffd17 	ldw	r3,-12(fp)
 1005aec:	e0bffc17 	ldw	r2,-16(fp)
 1005af0:	1880072e 	bgeu	r3,r2,1005b10 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005af4:	d0e71b17 	ldw	r3,-25492(gp)
 1005af8:	d0a71917 	ldw	r2,-25500(gp)
 1005afc:	10800104 	addi	r2,r2,4
 1005b00:	100b883a 	mov	r5,r2
 1005b04:	1809883a 	mov	r4,r3
 1005b08:	1000c0c0 	call	1000c0c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b0c:	00000b06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005b10:	d0e71a17 	ldw	r3,-25496(gp)
 1005b14:	d0a71917 	ldw	r2,-25500(gp)
 1005b18:	10800104 	addi	r2,r2,4
 1005b1c:	100b883a 	mov	r5,r2
 1005b20:	1809883a 	mov	r4,r3
 1005b24:	1000c0c0 	call	1000c0c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 1005b28:	d0a72517 	ldw	r2,-25452(gp)
 1005b2c:	e0fffd17 	ldw	r3,-12(fp)
 1005b30:	1880022e 	bgeu	r3,r2,1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 1005b34:	e0bffd17 	ldw	r2,-12(fp)
 1005b38:	d0a72515 	stw	r2,-25452(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b3c:	0001883a 	nop
 1005b40:	e037883a 	mov	sp,fp
 1005b44:	dfc00117 	ldw	ra,4(sp)
 1005b48:	df000017 	ldw	fp,0(sp)
 1005b4c:	dec00204 	addi	sp,sp,8
 1005b50:	f800283a 	ret

01005b54 <main>:
 */

#include <stdio.h>

int main()
{
 1005b54:	defffe04 	addi	sp,sp,-8
 1005b58:	dfc00115 	stw	ra,4(sp)
 1005b5c:	df000015 	stw	fp,0(sp)
 1005b60:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 1005b64:	010040b4 	movhi	r4,258
 1005b68:	21148904 	addi	r4,r4,21028
 1005b6c:	1013d180 	call	1013d18 <puts>

  return 0;
 1005b70:	0005883a 	mov	r2,zero
}
 1005b74:	e037883a 	mov	sp,fp
 1005b78:	dfc00117 	ldw	ra,4(sp)
 1005b7c:	df000017 	ldw	fp,0(sp)
 1005b80:	dec00204 	addi	sp,sp,8
 1005b84:	f800283a 	ret

01005b88 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1005b88:	defffd04 	addi	sp,sp,-12
 1005b8c:	df000215 	stw	fp,8(sp)
 1005b90:	df000204 	addi	fp,sp,8
 1005b94:	e13ffe15 	stw	r4,-8(fp)
 1005b98:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1005b9c:	e0bffe17 	ldw	r2,-8(fp)
 1005ba0:	10c00117 	ldw	r3,4(r2)
 1005ba4:	e0bfff17 	ldw	r2,-4(fp)
 1005ba8:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1005bac:	e0bfff17 	ldw	r2,-4(fp)
 1005bb0:	e0fffe17 	ldw	r3,-8(fp)
 1005bb4:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1005bb8:	e0bfff17 	ldw	r2,-4(fp)
 1005bbc:	10800017 	ldw	r2,0(r2)
 1005bc0:	e0ffff17 	ldw	r3,-4(fp)
 1005bc4:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1005bc8:	e0bfff17 	ldw	r2,-4(fp)
 1005bcc:	10800117 	ldw	r2,4(r2)
 1005bd0:	e0ffff17 	ldw	r3,-4(fp)
 1005bd4:	10c00015 	stw	r3,0(r2)
}
 1005bd8:	0001883a 	nop
 1005bdc:	e037883a 	mov	sp,fp
 1005be0:	df000017 	ldw	fp,0(sp)
 1005be4:	dec00104 	addi	sp,sp,4
 1005be8:	f800283a 	ret

01005bec <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1005bec:	defffc04 	addi	sp,sp,-16
 1005bf0:	dfc00315 	stw	ra,12(sp)
 1005bf4:	df000215 	stw	fp,8(sp)
 1005bf8:	df000204 	addi	fp,sp,8
 1005bfc:	e13ffe15 	stw	r4,-8(fp)
 1005c00:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1005c04:	e17fff17 	ldw	r5,-4(fp)
 1005c08:	e13ffe17 	ldw	r4,-8(fp)
 1005c0c:	1005b880 	call	1005b88 <metal_list_add_before>
}
 1005c10:	0001883a 	nop
 1005c14:	e037883a 	mov	sp,fp
 1005c18:	dfc00117 	ldw	ra,4(sp)
 1005c1c:	df000017 	ldw	fp,0(sp)
 1005c20:	dec00204 	addi	sp,sp,8
 1005c24:	f800283a 	ret

01005c28 <metal_add_test_case>:
	return errstr;
}
#endif

void metal_add_test_case(struct metal_test_case *test_case)
{
 1005c28:	defffd04 	addi	sp,sp,-12
 1005c2c:	dfc00215 	stw	ra,8(sp)
 1005c30:	df000115 	stw	fp,4(sp)
 1005c34:	df000104 	addi	fp,sp,4
 1005c38:	e13fff15 	stw	r4,-4(fp)
	metal_list_add_tail(&test_cases, &test_case->node);
 1005c3c:	e0bfff17 	ldw	r2,-4(fp)
 1005c40:	100b883a 	mov	r5,r2
 1005c44:	d1200204 	addi	r4,gp,-32760
 1005c48:	1005bec0 	call	1005bec <metal_list_add_tail>
}
 1005c4c:	0001883a 	nop
 1005c50:	e037883a 	mov	sp,fp
 1005c54:	dfc00117 	ldw	ra,4(sp)
 1005c58:	df000017 	ldw	fp,0(sp)
 1005c5c:	dec00204 	addi	sp,sp,8
 1005c60:	f800283a 	ret

01005c64 <metal_tests_run>:

int metal_tests_run(struct metal_init_params *params)
{
 1005c64:	deffee04 	addi	sp,sp,-72
 1005c68:	dfc01115 	stw	ra,68(sp)
 1005c6c:	df001015 	stw	fp,64(sp)
 1005c70:	dcc00f15 	stw	r19,60(sp)
 1005c74:	dc800e15 	stw	r18,56(sp)
 1005c78:	dc400d15 	stw	r17,52(sp)
 1005c7c:	dc000c15 	stw	r16,48(sp)
 1005c80:	df001004 	addi	fp,sp,64
 1005c84:	e13ffb15 	stw	r4,-20(fp)
	struct metal_init_params dparams = METAL_INIT_DEFAULTS;
 1005c88:	00804074 	movhi	r2,257
 1005c8c:	10a16504 	addi	r2,r2,-31340
 1005c90:	e0bff915 	stw	r2,-28(fp)
 1005c94:	00800184 	movi	r2,6
 1005c98:	e0bffa15 	stw	r2,-24(fp)
	struct metal_test_case *test_case;
	struct metal_list *node;
	int error, errors = 0;
 1005c9c:	e03ff415 	stw	zero,-48(fp)
	const char *dots = "..................................";
 1005ca0:	008040b4 	movhi	r2,258
 1005ca4:	10948e04 	addi	r2,r2,21048
 1005ca8:	e0bff515 	stw	r2,-44(fp)
	const char *pad;

	if (!params)
 1005cac:	e0bffb17 	ldw	r2,-20(fp)
 1005cb0:	1000021e 	bne	r2,zero,1005cbc <metal_tests_run+0x58>
		params = &dparams;
 1005cb4:	e0bff904 	addi	r2,fp,-28
 1005cb8:	e0bffb15 	stw	r2,-20(fp)

	params->log_level = METAL_LOG_DEBUG;
 1005cbc:	e0bffb17 	ldw	r2,-20(fp)
 1005cc0:	00c001c4 	movi	r3,7
 1005cc4:	10c00115 	stw	r3,4(r2)
	error = metal_init(params);
 1005cc8:	e13ffb17 	ldw	r4,-20(fp)
 1005ccc:	10079240 	call	1007924 <metal_init>
 1005cd0:	e0bff615 	stw	r2,-40(fp)
	if (error)
 1005cd4:	e0bff617 	ldw	r2,-40(fp)
 1005cd8:	10000226 	beq	r2,zero,1005ce4 <metal_tests_run+0x80>
		return error;
 1005cdc:	e0bff617 	ldw	r2,-40(fp)
 1005ce0:	00005f06 	br	1005e60 <metal_tests_run+0x1fc>

	metal_list_for_each(&test_cases, node) {
 1005ce4:	d0a00217 	ldw	r2,-32760(gp)
 1005ce8:	e0bff315 	stw	r2,-52(fp)
 1005cec:	00005706 	br	1005e4c <metal_tests_run+0x1e8>
		test_case = metal_container_of(node, struct metal_test_case,
 1005cf0:	e0bff317 	ldw	r2,-52(fp)
 1005cf4:	e0bff715 	stw	r2,-36(fp)
					       node);
		pad = dots + strlen(test_case->name);
 1005cf8:	e0bff717 	ldw	r2,-36(fp)
 1005cfc:	10800217 	ldw	r2,8(r2)
 1005d00:	1009883a 	mov	r4,r2
 1005d04:	101463c0 	call	101463c <strlen>
 1005d08:	1007883a 	mov	r3,r2
 1005d0c:	e0bff517 	ldw	r2,-44(fp)
 1005d10:	10c5883a 	add	r2,r2,r3
 1005d14:	e0bff815 	stw	r2,-32(fp)
		metal_log(METAL_LOG_INFO,"running [%s]\n", test_case->name);
 1005d18:	008060f4 	movhi	r2,387
 1005d1c:	10a97a04 	addi	r2,r2,-23064
 1005d20:	10800017 	ldw	r2,0(r2)
 1005d24:	108001b0 	cmpltui	r2,r2,6
 1005d28:	10000e1e 	bne	r2,zero,1005d64 <metal_tests_run+0x100>
 1005d2c:	008060f4 	movhi	r2,387
 1005d30:	10a97a04 	addi	r2,r2,-23064
 1005d34:	10800117 	ldw	r2,4(r2)
 1005d38:	10000a26 	beq	r2,zero,1005d64 <metal_tests_run+0x100>
 1005d3c:	008060f4 	movhi	r2,387
 1005d40:	10a97a04 	addi	r2,r2,-23064
 1005d44:	10800117 	ldw	r2,4(r2)
 1005d48:	e0fff717 	ldw	r3,-36(fp)
 1005d4c:	18c00217 	ldw	r3,8(r3)
 1005d50:	180d883a 	mov	r6,r3
 1005d54:	014040b4 	movhi	r5,258
 1005d58:	29549704 	addi	r5,r5,21084
 1005d5c:	01000184 	movi	r4,6
 1005d60:	103ee83a 	callr	r2
		error = test_case->test();
 1005d64:	e0bff717 	ldw	r2,-36(fp)
 1005d68:	10800317 	ldw	r2,12(r2)
 1005d6c:	103ee83a 	callr	r2
 1005d70:	e0bff615 	stw	r2,-40(fp)
		metal_log(METAL_LOG_INFO,"result [%s]%s %s%s%s\n",
 1005d74:	008060f4 	movhi	r2,387
 1005d78:	10a97a04 	addi	r2,r2,-23064
 1005d7c:	10800017 	ldw	r2,0(r2)
 1005d80:	108001b0 	cmpltui	r2,r2,6
 1005d84:	1000291e 	bne	r2,zero,1005e2c <metal_tests_run+0x1c8>
 1005d88:	008060f4 	movhi	r2,387
 1005d8c:	10a97a04 	addi	r2,r2,-23064
 1005d90:	10800117 	ldw	r2,4(r2)
 1005d94:	10002526 	beq	r2,zero,1005e2c <metal_tests_run+0x1c8>
 1005d98:	008060f4 	movhi	r2,387
 1005d9c:	10a97a04 	addi	r2,r2,-23064
 1005da0:	14800117 	ldw	r18,4(r2)
 1005da4:	e0bff717 	ldw	r2,-36(fp)
 1005da8:	14c00217 	ldw	r19,8(r2)
 1005dac:	e0bff617 	ldw	r2,-40(fp)
 1005db0:	10000326 	beq	r2,zero,1005dc0 <metal_tests_run+0x15c>
 1005db4:	040040b4 	movhi	r16,258
 1005db8:	84149b04 	addi	r16,r16,21100
 1005dbc:	00000206 	br	1005dc8 <metal_tests_run+0x164>
 1005dc0:	040040b4 	movhi	r16,258
 1005dc4:	84149d04 	addi	r16,r16,21108
 1005dc8:	e0bff617 	ldw	r2,-40(fp)
 1005dcc:	10000326 	beq	r2,zero,1005ddc <metal_tests_run+0x178>
 1005dd0:	044040b4 	movhi	r17,258
 1005dd4:	8c549f04 	addi	r17,r17,21116
 1005dd8:	00000206 	br	1005de4 <metal_tests_run+0x180>
 1005ddc:	044040b4 	movhi	r17,258
 1005de0:	8c54a204 	addi	r17,r17,21128
 1005de4:	e0bff617 	ldw	r2,-40(fp)
 1005de8:	10000526 	beq	r2,zero,1005e00 <metal_tests_run+0x19c>
 1005dec:	e0bff617 	ldw	r2,-40(fp)
 1005df0:	0085c83a 	sub	r2,zero,r2
 1005df4:	1009883a 	mov	r4,r2
 1005df8:	10146200 	call	1014620 <strerror>
 1005dfc:	00000206 	br	1005e08 <metal_tests_run+0x1a4>
 1005e00:	008040b4 	movhi	r2,258
 1005e04:	1094a204 	addi	r2,r2,21128
 1005e08:	d8800215 	stw	r2,8(sp)
 1005e0c:	dc400115 	stw	r17,4(sp)
 1005e10:	dc000015 	stw	r16,0(sp)
 1005e14:	e1fff817 	ldw	r7,-32(fp)
 1005e18:	980d883a 	mov	r6,r19
 1005e1c:	014040b4 	movhi	r5,258
 1005e20:	2954a304 	addi	r5,r5,21132
 1005e24:	01000184 	movi	r4,6
 1005e28:	903ee83a 	callr	r18
		       test_case->name, pad,
		       error ? "fail" : "pass",
		       error ? " - error: " : "",
		       error ? strerror(-error) : "");
		if (error)
 1005e2c:	e0bff617 	ldw	r2,-40(fp)
 1005e30:	10000326 	beq	r2,zero,1005e40 <metal_tests_run+0x1dc>
			errors++;
 1005e34:	e0bff417 	ldw	r2,-48(fp)
 1005e38:	10800044 	addi	r2,r2,1
 1005e3c:	e0bff415 	stw	r2,-48(fp)
	params->log_level = METAL_LOG_DEBUG;
	error = metal_init(params);
	if (error)
		return error;

	metal_list_for_each(&test_cases, node) {
 1005e40:	e0bff317 	ldw	r2,-52(fp)
 1005e44:	10800017 	ldw	r2,0(r2)
 1005e48:	e0bff315 	stw	r2,-52(fp)
 1005e4c:	e0fff317 	ldw	r3,-52(fp)
 1005e50:	d0a00204 	addi	r2,gp,-32760
 1005e54:	18bfa61e 	bne	r3,r2,1005cf0 <__alt_data_end+0xff005cf0>
		       error ? strerror(-error) : "");
		if (error)
			errors++;
	}

	metal_finish();
 1005e58:	10079d00 	call	10079d0 <metal_finish>

	return errors;
 1005e5c:	e0bff417 	ldw	r2,-48(fp)
}
 1005e60:	e6fffc04 	addi	sp,fp,-16
 1005e64:	dfc00517 	ldw	ra,20(sp)
 1005e68:	df000417 	ldw	fp,16(sp)
 1005e6c:	dcc00317 	ldw	r19,12(sp)
 1005e70:	dc800217 	ldw	r18,8(sp)
 1005e74:	dc400117 	ldw	r17,4(sp)
 1005e78:	dc000017 	ldw	r16,0(sp)
 1005e7c:	dec00604 	addi	sp,sp,24
 1005e80:	f800283a 	ret

01005e84 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 1005e84:	defffe04 	addi	sp,sp,-8
 1005e88:	df000115 	stw	fp,4(sp)
 1005e8c:	df000104 	addi	fp,sp,4
 1005e90:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 1005e94:	e0bfff17 	ldw	r2,-4(fp)
 1005e98:	e0ffff17 	ldw	r3,-4(fp)
 1005e9c:	10c00115 	stw	r3,4(r2)
 1005ea0:	e0bfff17 	ldw	r2,-4(fp)
 1005ea4:	10c00117 	ldw	r3,4(r2)
 1005ea8:	e0bfff17 	ldw	r2,-4(fp)
 1005eac:	10c00015 	stw	r3,0(r2)
}
 1005eb0:	0001883a 	nop
 1005eb4:	e037883a 	mov	sp,fp
 1005eb8:	df000017 	ldw	fp,0(sp)
 1005ebc:	dec00104 	addi	sp,sp,4
 1005ec0:	f800283a 	ret

01005ec4 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1005ec4:	defffd04 	addi	sp,sp,-12
 1005ec8:	df000215 	stw	fp,8(sp)
 1005ecc:	df000204 	addi	fp,sp,8
 1005ed0:	e13ffe15 	stw	r4,-8(fp)
 1005ed4:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1005ed8:	e0bffe17 	ldw	r2,-8(fp)
 1005edc:	10c00117 	ldw	r3,4(r2)
 1005ee0:	e0bfff17 	ldw	r2,-4(fp)
 1005ee4:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1005ee8:	e0bfff17 	ldw	r2,-4(fp)
 1005eec:	e0fffe17 	ldw	r3,-8(fp)
 1005ef0:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1005ef4:	e0bfff17 	ldw	r2,-4(fp)
 1005ef8:	10800017 	ldw	r2,0(r2)
 1005efc:	e0ffff17 	ldw	r3,-4(fp)
 1005f00:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1005f04:	e0bfff17 	ldw	r2,-4(fp)
 1005f08:	10800117 	ldw	r2,4(r2)
 1005f0c:	e0ffff17 	ldw	r3,-4(fp)
 1005f10:	10c00015 	stw	r3,0(r2)
}
 1005f14:	0001883a 	nop
 1005f18:	e037883a 	mov	sp,fp
 1005f1c:	df000017 	ldw	fp,0(sp)
 1005f20:	dec00104 	addi	sp,sp,4
 1005f24:	f800283a 	ret

01005f28 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1005f28:	defffc04 	addi	sp,sp,-16
 1005f2c:	dfc00315 	stw	ra,12(sp)
 1005f30:	df000215 	stw	fp,8(sp)
 1005f34:	df000204 	addi	fp,sp,8
 1005f38:	e13ffe15 	stw	r4,-8(fp)
 1005f3c:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1005f40:	e17fff17 	ldw	r5,-4(fp)
 1005f44:	e13ffe17 	ldw	r4,-8(fp)
 1005f48:	1005ec40 	call	1005ec4 <metal_list_add_before>
}
 1005f4c:	0001883a 	nop
 1005f50:	e037883a 	mov	sp,fp
 1005f54:	dfc00117 	ldw	ra,4(sp)
 1005f58:	df000017 	ldw	fp,0(sp)
 1005f5c:	dec00204 	addi	sp,sp,8
 1005f60:	f800283a 	ret

01005f64 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 1005f64:	defffe04 	addi	sp,sp,-8
 1005f68:	df000115 	stw	fp,4(sp)
 1005f6c:	df000104 	addi	fp,sp,4
 1005f70:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 1005f74:	e0bfff17 	ldw	r2,-4(fp)
 1005f78:	10800017 	ldw	r2,0(r2)
 1005f7c:	e0ffff17 	ldw	r3,-4(fp)
 1005f80:	18c00117 	ldw	r3,4(r3)
 1005f84:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 1005f88:	e0bfff17 	ldw	r2,-4(fp)
 1005f8c:	10800117 	ldw	r2,4(r2)
 1005f90:	e0ffff17 	ldw	r3,-4(fp)
 1005f94:	18c00017 	ldw	r3,0(r3)
 1005f98:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 1005f9c:	e0bfff17 	ldw	r2,-4(fp)
 1005fa0:	e0ffff17 	ldw	r3,-4(fp)
 1005fa4:	10c00115 	stw	r3,4(r2)
 1005fa8:	e0bfff17 	ldw	r2,-4(fp)
 1005fac:	10c00117 	ldw	r3,4(r2)
 1005fb0:	e0bfff17 	ldw	r2,-4(fp)
 1005fb4:	10c00015 	stw	r3,0(r2)
}
 1005fb8:	0001883a 	nop
 1005fbc:	e037883a 	mov	sp,fp
 1005fc0:	df000017 	ldw	fp,0(sp)
 1005fc4:	dec00104 	addi	sp,sp,4
 1005fc8:	f800283a 	ret

01005fcc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 1005fcc:	defffc04 	addi	sp,sp,-16
 1005fd0:	dfc00315 	stw	ra,12(sp)
 1005fd4:	df000215 	stw	fp,8(sp)
 1005fd8:	df000204 	addi	fp,sp,8
 1005fdc:	e13ffe15 	stw	r4,-8(fp)
 1005fe0:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_flush(addr, len);
 1005fe4:	e17fff17 	ldw	r5,-4(fp)
 1005fe8:	e13ffe17 	ldw	r4,-8(fp)
 1005fec:	10072240 	call	1007224 <metal_machine_cache_flush>
}
 1005ff0:	0001883a 	nop
 1005ff4:	e037883a 	mov	sp,fp
 1005ff8:	dfc00117 	ldw	ra,4(sp)
 1005ffc:	df000017 	ldw	fp,0(sp)
 1006000:	dec00204 	addi	sp,sp,8
 1006004:	f800283a 	ret

01006008 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 1006008:	defffc04 	addi	sp,sp,-16
 100600c:	dfc00315 	stw	ra,12(sp)
 1006010:	df000215 	stw	fp,8(sp)
 1006014:	df000204 	addi	fp,sp,8
 1006018:	e13ffe15 	stw	r4,-8(fp)
 100601c:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_invalidate(addr, len);
 1006020:	e17fff17 	ldw	r5,-4(fp)
 1006024:	e13ffe17 	ldw	r4,-8(fp)
 1006028:	100724c0 	call	100724c <metal_machine_cache_invalidate>
}
 100602c:	0001883a 	nop
 1006030:	e037883a 	mov	sp,fp
 1006034:	dfc00117 	ldw	ra,4(sp)
 1006038:	df000017 	ldw	fp,0(sp)
 100603c:	dec00204 	addi	sp,sp,8
 1006040:	f800283a 	ret

01006044 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 1006044:	defffc04 	addi	sp,sp,-16
 1006048:	dfc00315 	stw	ra,12(sp)
 100604c:	df000215 	stw	fp,8(sp)
 1006050:	df000204 	addi	fp,sp,8
 1006054:	e13ffe15 	stw	r4,-8(fp)
 1006058:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_flush(addr, len);
 100605c:	e17fff17 	ldw	r5,-4(fp)
 1006060:	e13ffe17 	ldw	r4,-8(fp)
 1006064:	1005fcc0 	call	1005fcc <__metal_cache_flush>
}
 1006068:	0001883a 	nop
 100606c:	e037883a 	mov	sp,fp
 1006070:	dfc00117 	ldw	ra,4(sp)
 1006074:	df000017 	ldw	fp,0(sp)
 1006078:	dec00204 	addi	sp,sp,8
 100607c:	f800283a 	ret

01006080 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 1006080:	defffc04 	addi	sp,sp,-16
 1006084:	dfc00315 	stw	ra,12(sp)
 1006088:	df000215 	stw	fp,8(sp)
 100608c:	df000204 	addi	fp,sp,8
 1006090:	e13ffe15 	stw	r4,-8(fp)
 1006094:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_invalidate(addr, len);
 1006098:	e17fff17 	ldw	r5,-4(fp)
 100609c:	e13ffe17 	ldw	r4,-8(fp)
 10060a0:	10060080 	call	1006008 <__metal_cache_invalidate>
}
 10060a4:	0001883a 	nop
 10060a8:	e037883a 	mov	sp,fp
 10060ac:	dfc00117 	ldw	ra,4(sp)
 10060b0:	df000017 	ldw	fp,0(sp)
 10060b4:	dec00204 	addi	sp,sp,8
 10060b8:	f800283a 	ret

010060bc <metal_bus_register>:
#include <utilities.h>
#include <dma.h>
#include <cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 10060bc:	defffd04 	addi	sp,sp,-12
 10060c0:	dfc00215 	stw	ra,8(sp)
 10060c4:	df000115 	stw	fp,4(sp)
 10060c8:	df000104 	addi	fp,sp,4
 10060cc:	e13fff15 	stw	r4,-4(fp)
	if (!bus || !bus->name || !strlen(bus->name))
 10060d0:	e0bfff17 	ldw	r2,-4(fp)
 10060d4:	10000a26 	beq	r2,zero,1006100 <metal_bus_register+0x44>
 10060d8:	e0bfff17 	ldw	r2,-4(fp)
 10060dc:	10800017 	ldw	r2,0(r2)
 10060e0:	10000726 	beq	r2,zero,1006100 <metal_bus_register+0x44>
 10060e4:	e0bfff17 	ldw	r2,-4(fp)
 10060e8:	10800017 	ldw	r2,0(r2)
 10060ec:	10800003 	ldbu	r2,0(r2)
 10060f0:	10803fcc 	andi	r2,r2,255
 10060f4:	1080201c 	xori	r2,r2,128
 10060f8:	10bfe004 	addi	r2,r2,-128
 10060fc:	1000021e 	bne	r2,zero,1006108 <metal_bus_register+0x4c>
		return -EINVAL;
 1006100:	00bffa84 	movi	r2,-22
 1006104:	00002606 	br	10061a0 <metal_bus_register+0xe4>
	if (metal_bus_find(bus->name, NULL) == 0)
 1006108:	e0bfff17 	ldw	r2,-4(fp)
 100610c:	10800017 	ldw	r2,0(r2)
 1006110:	000b883a 	mov	r5,zero
 1006114:	1009883a 	mov	r4,r2
 1006118:	10062580 	call	1006258 <metal_bus_find>
 100611c:	1000021e 	bne	r2,zero,1006128 <metal_bus_register+0x6c>
		return -EEXIST;
 1006120:	00bffbc4 	movi	r2,-17
 1006124:	00001e06 	br	10061a0 <metal_bus_register+0xe4>
	metal_list_init(&bus->devices);
 1006128:	e0bfff17 	ldw	r2,-4(fp)
 100612c:	10800704 	addi	r2,r2,28
 1006130:	1009883a 	mov	r4,r2
 1006134:	1005e840 	call	1005e84 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 1006138:	e0bfff17 	ldw	r2,-4(fp)
 100613c:	10800904 	addi	r2,r2,36
 1006140:	100b883a 	mov	r5,r2
 1006144:	010060f4 	movhi	r4,387
 1006148:	21297c04 	addi	r4,r4,-23056
 100614c:	1005f280 	call	1005f28 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 1006150:	008060f4 	movhi	r2,387
 1006154:	10a97a04 	addi	r2,r2,-23064
 1006158:	10800017 	ldw	r2,0(r2)
 100615c:	108001f0 	cmpltui	r2,r2,7
 1006160:	10000e1e 	bne	r2,zero,100619c <metal_bus_register+0xe0>
 1006164:	008060f4 	movhi	r2,387
 1006168:	10a97a04 	addi	r2,r2,-23064
 100616c:	10800117 	ldw	r2,4(r2)
 1006170:	10000a26 	beq	r2,zero,100619c <metal_bus_register+0xe0>
 1006174:	008060f4 	movhi	r2,387
 1006178:	10a97a04 	addi	r2,r2,-23064
 100617c:	10800117 	ldw	r2,4(r2)
 1006180:	e0ffff17 	ldw	r3,-4(fp)
 1006184:	18c00017 	ldw	r3,0(r3)
 1006188:	180d883a 	mov	r6,r3
 100618c:	014040b4 	movhi	r5,258
 1006190:	2954a904 	addi	r5,r5,21156
 1006194:	010001c4 	movi	r4,7
 1006198:	103ee83a 	callr	r2
	return 0;
 100619c:	0005883a 	mov	r2,zero
}
 10061a0:	e037883a 	mov	sp,fp
 10061a4:	dfc00117 	ldw	ra,4(sp)
 10061a8:	df000017 	ldw	fp,0(sp)
 10061ac:	dec00204 	addi	sp,sp,8
 10061b0:	f800283a 	ret

010061b4 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 10061b4:	defffd04 	addi	sp,sp,-12
 10061b8:	dfc00215 	stw	ra,8(sp)
 10061bc:	df000115 	stw	fp,4(sp)
 10061c0:	df000104 	addi	fp,sp,4
 10061c4:	e13fff15 	stw	r4,-4(fp)
	metal_list_del(&bus->node);
 10061c8:	e0bfff17 	ldw	r2,-4(fp)
 10061cc:	10800904 	addi	r2,r2,36
 10061d0:	1009883a 	mov	r4,r2
 10061d4:	1005f640 	call	1005f64 <metal_list_del>
	if (bus->ops.bus_close)
 10061d8:	e0bfff17 	ldw	r2,-4(fp)
 10061dc:	10800117 	ldw	r2,4(r2)
 10061e0:	10000426 	beq	r2,zero,10061f4 <metal_bus_unregister+0x40>
		bus->ops.bus_close(bus);
 10061e4:	e0bfff17 	ldw	r2,-4(fp)
 10061e8:	10800117 	ldw	r2,4(r2)
 10061ec:	e13fff17 	ldw	r4,-4(fp)
 10061f0:	103ee83a 	callr	r2
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 10061f4:	008060f4 	movhi	r2,387
 10061f8:	10a97a04 	addi	r2,r2,-23064
 10061fc:	10800017 	ldw	r2,0(r2)
 1006200:	108001f0 	cmpltui	r2,r2,7
 1006204:	10000e1e 	bne	r2,zero,1006240 <metal_bus_unregister+0x8c>
 1006208:	008060f4 	movhi	r2,387
 100620c:	10a97a04 	addi	r2,r2,-23064
 1006210:	10800117 	ldw	r2,4(r2)
 1006214:	10000a26 	beq	r2,zero,1006240 <metal_bus_unregister+0x8c>
 1006218:	008060f4 	movhi	r2,387
 100621c:	10a97a04 	addi	r2,r2,-23064
 1006220:	10800117 	ldw	r2,4(r2)
 1006224:	e0ffff17 	ldw	r3,-4(fp)
 1006228:	18c00017 	ldw	r3,0(r3)
 100622c:	180d883a 	mov	r6,r3
 1006230:	014040b4 	movhi	r5,258
 1006234:	2954ae04 	addi	r5,r5,21176
 1006238:	010001c4 	movi	r4,7
 100623c:	103ee83a 	callr	r2
	return 0;
 1006240:	0005883a 	mov	r2,zero
}
 1006244:	e037883a 	mov	sp,fp
 1006248:	dfc00117 	ldw	ra,4(sp)
 100624c:	df000017 	ldw	fp,0(sp)
 1006250:	dec00204 	addi	sp,sp,8
 1006254:	f800283a 	ret

01006258 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 1006258:	defffa04 	addi	sp,sp,-24
 100625c:	dfc00515 	stw	ra,20(sp)
 1006260:	df000415 	stw	fp,16(sp)
 1006264:	df000404 	addi	fp,sp,16
 1006268:	e13ffe15 	stw	r4,-8(fp)
 100626c:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 1006270:	008060f4 	movhi	r2,387
 1006274:	10a97a04 	addi	r2,r2,-23064
 1006278:	10800217 	ldw	r2,8(r2)
 100627c:	e0bffc15 	stw	r2,-16(fp)
 1006280:	00001406 	br	10062d4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
 1006284:	e0bffc17 	ldw	r2,-16(fp)
 1006288:	10bff704 	addi	r2,r2,-36
 100628c:	e0bffd15 	stw	r2,-12(fp)
		if (strcmp(bus->name, name) != 0)
 1006290:	e0bffd17 	ldw	r2,-12(fp)
 1006294:	10800017 	ldw	r2,0(r2)
 1006298:	e17ffe17 	ldw	r5,-8(fp)
 100629c:	1009883a 	mov	r4,r2
 10062a0:	1013ee80 	call	1013ee8 <strcmp>
 10062a4:	10000426 	beq	r2,zero,10062b8 <metal_bus_find+0x60>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10062a8:	e0bffc17 	ldw	r2,-16(fp)
 10062ac:	10800017 	ldw	r2,0(r2)
 10062b0:	e0bffc15 	stw	r2,-16(fp)
 10062b4:	00000706 	br	10062d4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
		if (strcmp(bus->name, name) != 0)
			continue;
		if (result)
 10062b8:	e0bfff17 	ldw	r2,-4(fp)
 10062bc:	10000326 	beq	r2,zero,10062cc <metal_bus_find+0x74>
			*result = bus;
 10062c0:	e0bfff17 	ldw	r2,-4(fp)
 10062c4:	e0fffd17 	ldw	r3,-12(fp)
 10062c8:	10c00015 	stw	r3,0(r2)
		return 0;
 10062cc:	0005883a 	mov	r2,zero
 10062d0:	00000506 	br	10062e8 <metal_bus_find+0x90>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10062d4:	e0fffc17 	ldw	r3,-16(fp)
 10062d8:	008060f4 	movhi	r2,387
 10062dc:	10a97c04 	addi	r2,r2,-23056
 10062e0:	18bfe81e 	bne	r3,r2,1006284 <__alt_data_end+0xff006284>
			continue;
		if (result)
			*result = bus;
		return 0;
	}
	return -ENOENT;
 10062e4:	00bfff84 	movi	r2,-2
}
 10062e8:	e037883a 	mov	sp,fp
 10062ec:	dfc00117 	ldw	ra,4(sp)
 10062f0:	df000017 	ldw	fp,0(sp)
 10062f4:	dec00204 	addi	sp,sp,8
 10062f8:	f800283a 	ret

010062fc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 10062fc:	defff904 	addi	sp,sp,-28
 1006300:	dfc00615 	stw	ra,24(sp)
 1006304:	df000515 	stw	fp,20(sp)
 1006308:	df000504 	addi	fp,sp,20
 100630c:	e13ffd15 	stw	r4,-12(fp)
 1006310:	e17ffe15 	stw	r5,-8(fp)
 1006314:	e1bfff15 	stw	r6,-4(fp)
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 1006318:	e0bffd17 	ldw	r2,-12(fp)
 100631c:	10001026 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006320:	e0bffd17 	ldw	r2,-12(fp)
 1006324:	10800003 	ldbu	r2,0(r2)
 1006328:	10803fcc 	andi	r2,r2,255
 100632c:	1080201c 	xori	r2,r2,128
 1006330:	10bfe004 	addi	r2,r2,-128
 1006334:	10000a26 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006338:	e0bffe17 	ldw	r2,-8(fp)
 100633c:	10000826 	beq	r2,zero,1006360 <metal_device_open+0x64>
	    !dev_name || !strlen(dev_name) ||
 1006340:	e0bffe17 	ldw	r2,-8(fp)
 1006344:	10800003 	ldbu	r2,0(r2)
 1006348:	10803fcc 	andi	r2,r2,255
 100634c:	1080201c 	xori	r2,r2,128
 1006350:	10bfe004 	addi	r2,r2,-128
 1006354:	10000226 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006358:	e0bfff17 	ldw	r2,-4(fp)
 100635c:	1000021e 	bne	r2,zero,1006368 <metal_device_open+0x6c>
	    !device)
		return -EINVAL;
 1006360:	00bffa84 	movi	r2,-22
 1006364:	00001b06 	br	10063d4 <metal_device_open+0xd8>

	error = metal_bus_find(bus_name, &bus);
 1006368:	e0bffc04 	addi	r2,fp,-16
 100636c:	100b883a 	mov	r5,r2
 1006370:	e13ffd17 	ldw	r4,-12(fp)
 1006374:	10062580 	call	1006258 <metal_bus_find>
 1006378:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 100637c:	e0bffb17 	ldw	r2,-20(fp)
 1006380:	10000226 	beq	r2,zero,100638c <metal_device_open+0x90>
		return error;
 1006384:	e0bffb17 	ldw	r2,-20(fp)
 1006388:	00001206 	br	10063d4 <metal_device_open+0xd8>

	if (!bus->ops.dev_open)
 100638c:	e0bffc17 	ldw	r2,-16(fp)
 1006390:	10800217 	ldw	r2,8(r2)
 1006394:	1000021e 	bne	r2,zero,10063a0 <metal_device_open+0xa4>
		return -ENODEV;
 1006398:	00bffb44 	movi	r2,-19
 100639c:	00000d06 	br	10063d4 <metal_device_open+0xd8>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 10063a0:	e0bffc17 	ldw	r2,-16(fp)
 10063a4:	10800217 	ldw	r2,8(r2)
 10063a8:	e0fffc17 	ldw	r3,-16(fp)
 10063ac:	e1bfff17 	ldw	r6,-4(fp)
 10063b0:	e17ffe17 	ldw	r5,-8(fp)
 10063b4:	1809883a 	mov	r4,r3
 10063b8:	103ee83a 	callr	r2
 10063bc:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 10063c0:	e0bffb17 	ldw	r2,-20(fp)
 10063c4:	10000226 	beq	r2,zero,10063d0 <metal_device_open+0xd4>
		return error;
 10063c8:	e0bffb17 	ldw	r2,-20(fp)
 10063cc:	00000106 	br	10063d4 <metal_device_open+0xd8>

	return 0;
 10063d0:	0005883a 	mov	r2,zero
}
 10063d4:	e037883a 	mov	sp,fp
 10063d8:	dfc00117 	ldw	ra,4(sp)
 10063dc:	df000017 	ldw	fp,0(sp)
 10063e0:	dec00204 	addi	sp,sp,8
 10063e4:	f800283a 	ret

010063e8 <metal_device_close>:

void metal_device_close(struct metal_device *device)
{
 10063e8:	defffd04 	addi	sp,sp,-12
 10063ec:	dfc00215 	stw	ra,8(sp)
 10063f0:	df000115 	stw	fp,4(sp)
 10063f4:	df000104 	addi	fp,sp,4
 10063f8:	e13fff15 	stw	r4,-4(fp)
	metal_assert(device && device->bus);
 10063fc:	e0bfff17 	ldw	r2,-4(fp)
 1006400:	10000326 	beq	r2,zero,1006410 <metal_device_close+0x28>
 1006404:	e0bfff17 	ldw	r2,-4(fp)
 1006408:	10800117 	ldw	r2,4(r2)
 100640c:	1000081e 	bne	r2,zero,1006430 <metal_device_close+0x48>
 1006410:	01c040b4 	movhi	r7,258
 1006414:	39d4b404 	addi	r7,r7,21200
 1006418:	018040b4 	movhi	r6,258
 100641c:	3194c004 	addi	r6,r6,21248
 1006420:	014014c4 	movi	r5,83
 1006424:	010040b4 	movhi	r4,258
 1006428:	2114ba04 	addi	r4,r4,21224
 100642c:	10138940 	call	1013894 <__assert_func>
	if (device->bus->ops.dev_close)
 1006430:	e0bfff17 	ldw	r2,-4(fp)
 1006434:	10800117 	ldw	r2,4(r2)
 1006438:	10800317 	ldw	r2,12(r2)
 100643c:	10000826 	beq	r2,zero,1006460 <metal_device_close+0x78>
		device->bus->ops.dev_close(device->bus, device);
 1006440:	e0bfff17 	ldw	r2,-4(fp)
 1006444:	10800117 	ldw	r2,4(r2)
 1006448:	10800317 	ldw	r2,12(r2)
 100644c:	e0ffff17 	ldw	r3,-4(fp)
 1006450:	18c00117 	ldw	r3,4(r3)
 1006454:	e17fff17 	ldw	r5,-4(fp)
 1006458:	1809883a 	mov	r4,r3
 100645c:	103ee83a 	callr	r2
}
 1006460:	0001883a 	nop
 1006464:	e037883a 	mov	sp,fp
 1006468:	dfc00117 	ldw	ra,4(sp)
 100646c:	df000017 	ldw	fp,0(sp)
 1006470:	dec00204 	addi	sp,sp,8
 1006474:	f800283a 	ret

01006478 <metal_register_generic_device>:

int metal_register_generic_device(struct metal_device *device)
{
 1006478:	defffd04 	addi	sp,sp,-12
 100647c:	dfc00215 	stw	ra,8(sp)
 1006480:	df000115 	stw	fp,4(sp)
 1006484:	df000104 	addi	fp,sp,4
 1006488:	e13fff15 	stw	r4,-4(fp)
	if (!device->name || !strlen(device->name) ||
 100648c:	e0bfff17 	ldw	r2,-4(fp)
 1006490:	10800017 	ldw	r2,0(r2)
 1006494:	10000b26 	beq	r2,zero,10064c4 <metal_register_generic_device+0x4c>
 1006498:	e0bfff17 	ldw	r2,-4(fp)
 100649c:	10800017 	ldw	r2,0(r2)
 10064a0:	10800003 	ldbu	r2,0(r2)
 10064a4:	10803fcc 	andi	r2,r2,255
 10064a8:	1080201c 	xori	r2,r2,128
 10064ac:	10bfe004 	addi	r2,r2,-128
 10064b0:	10000426 	beq	r2,zero,10064c4 <metal_register_generic_device+0x4c>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 10064b4:	e0bfff17 	ldw	r2,-4(fp)
 10064b8:	10800217 	ldw	r2,8(r2)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
	if (!device->name || !strlen(device->name) ||
 10064bc:	108000b0 	cmpltui	r2,r2,2
 10064c0:	1000021e 	bne	r2,zero,10064cc <metal_register_generic_device+0x54>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
		return -EINVAL;
 10064c4:	00bffa84 	movi	r2,-22
 10064c8:	00000b06 	br	10064f8 <metal_register_generic_device+0x80>

	device->bus = &metal_generic_bus;
 10064cc:	e0ffff17 	ldw	r3,-4(fp)
 10064d0:	008040b4 	movhi	r2,258
 10064d4:	109a8a04 	addi	r2,r2,27176
 10064d8:	18800115 	stw	r2,4(r3)
	metal_list_add_tail(&_metal.common.generic_device_list,
 10064dc:	e0bfff17 	ldw	r2,-4(fp)
 10064e0:	10801104 	addi	r2,r2,68
 10064e4:	100b883a 	mov	r5,r2
 10064e8:	010060f4 	movhi	r4,387
 10064ec:	21298004 	addi	r4,r4,-23040
 10064f0:	1005f280 	call	1005f28 <metal_list_add_tail>
			    &device->node);
	return 0;
 10064f4:	0005883a 	mov	r2,zero
}
 10064f8:	e037883a 	mov	sp,fp
 10064fc:	dfc00117 	ldw	ra,4(sp)
 1006500:	df000017 	ldw	fp,0(sp)
 1006504:	dec00204 	addi	sp,sp,8
 1006508:	f800283a 	ret

0100650c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 100650c:	defff904 	addi	sp,sp,-28
 1006510:	dfc00615 	stw	ra,24(sp)
 1006514:	df000515 	stw	fp,20(sp)
 1006518:	df000504 	addi	fp,sp,20
 100651c:	e13ffd15 	stw	r4,-12(fp)
 1006520:	e17ffe15 	stw	r5,-8(fp)
 1006524:	e1bfff15 	stw	r6,-4(fp)
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006528:	008060f4 	movhi	r2,387
 100652c:	10a97a04 	addi	r2,r2,-23064
 1006530:	10800617 	ldw	r2,24(r2)
 1006534:	e0bffb15 	stw	r2,-20(fp)
 1006538:	00001306 	br	1006588 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
 100653c:	e0bffb17 	ldw	r2,-20(fp)
 1006540:	10bfef04 	addi	r2,r2,-68
 1006544:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(dev->name, dev_name) != 0)
 1006548:	e0bffc17 	ldw	r2,-16(fp)
 100654c:	10800017 	ldw	r2,0(r2)
 1006550:	e17ffe17 	ldw	r5,-8(fp)
 1006554:	1009883a 	mov	r4,r2
 1006558:	1013ee80 	call	1013ee8 <strcmp>
 100655c:	10000426 	beq	r2,zero,1006570 <metal_generic_dev_open+0x64>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006560:	e0bffb17 	ldw	r2,-20(fp)
 1006564:	10800017 	ldw	r2,0(r2)
 1006568:	e0bffb15 	stw	r2,-20(fp)
 100656c:	00000606 	br	1006588 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
		if (strcmp(dev->name, dev_name) != 0)
			continue;
		*device = dev;
 1006570:	e0bfff17 	ldw	r2,-4(fp)
 1006574:	e0fffc17 	ldw	r3,-16(fp)
 1006578:	10c00015 	stw	r3,0(r2)
		return metal_generic_dev_sys_open(dev);
 100657c:	e13ffc17 	ldw	r4,-16(fp)
 1006580:	1006ba40 	call	1006ba4 <metal_generic_dev_sys_open>
 1006584:	00000506 	br	100659c <metal_generic_dev_open+0x90>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006588:	e0fffb17 	ldw	r3,-20(fp)
 100658c:	008060f4 	movhi	r2,387
 1006590:	10a98004 	addi	r2,r2,-23040
 1006594:	18bfe91e 	bne	r3,r2,100653c <__alt_data_end+0xff00653c>
			continue;
		*device = dev;
		return metal_generic_dev_sys_open(dev);
	}

	return -ENODEV;
 1006598:	00bffb44 	movi	r2,-19
}
 100659c:	e037883a 	mov	sp,fp
 10065a0:	dfc00117 	ldw	ra,4(sp)
 10065a4:	df000017 	ldw	fp,0(sp)
 10065a8:	dec00204 	addi	sp,sp,8
 10065ac:	f800283a 	ret

010065b0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 10065b0:	defff904 	addi	sp,sp,-28
 10065b4:	dfc00615 	stw	ra,24(sp)
 10065b8:	df000515 	stw	fp,20(sp)
 10065bc:	df000504 	addi	fp,sp,20
 10065c0:	e13ffc15 	stw	r4,-16(fp)
 10065c4:	e17ffd15 	stw	r5,-12(fp)
 10065c8:	e1bffe15 	stw	r6,-8(fp)
 10065cc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
 10065d0:	e0c00317 	ldw	r3,12(fp)
 10065d4:	e0bfff17 	ldw	r2,-4(fp)
 10065d8:	18800626 	beq	r3,r2,10065f4 <metal_generic_dev_dma_map+0x44>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 10065dc:	e0800217 	ldw	r2,8(fp)
 10065e0:	10800324 	muli	r2,r2,12
 10065e4:	100d883a 	mov	r6,r2
 10065e8:	e17fff17 	ldw	r5,-4(fp)
 10065ec:	e1000317 	ldw	r4,12(fp)
 10065f0:	10139e80 	call	10139e8 <memcpy>
	for (i = 0; i < nents_in; i++) {
 10065f4:	e03ffb15 	stw	zero,-20(fp)
 10065f8:	00001e06 	br	1006674 <metal_generic_dev_dma_map+0xc4>
		if (dir == METAL_DMA_DEV_W) {
 10065fc:	e0bffe17 	ldw	r2,-8(fp)
 1006600:	10800098 	cmpnei	r2,r2,2
 1006604:	10000c1e 	bne	r2,zero,1006638 <metal_generic_dev_dma_map+0x88>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 1006608:	e0bffb17 	ldw	r2,-20(fp)
 100660c:	10800324 	muli	r2,r2,12
 1006610:	e0c00317 	ldw	r3,12(fp)
 1006614:	1885883a 	add	r2,r3,r2
 1006618:	11000017 	ldw	r4,0(r2)
 100661c:	e0bffb17 	ldw	r2,-20(fp)
 1006620:	10800324 	muli	r2,r2,12
 1006624:	e0c00317 	ldw	r3,12(fp)
 1006628:	1885883a 	add	r2,r3,r2
 100662c:	10800217 	ldw	r2,8(r2)
 1006630:	100b883a 	mov	r5,r2
 1006634:	10060440 	call	1006044 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 1006638:	e0bffb17 	ldw	r2,-20(fp)
 100663c:	10800324 	muli	r2,r2,12
 1006640:	e0c00317 	ldw	r3,12(fp)
 1006644:	1885883a 	add	r2,r3,r2
 1006648:	11000017 	ldw	r4,0(r2)
 100664c:	e0bffb17 	ldw	r2,-20(fp)
 1006650:	10800324 	muli	r2,r2,12
 1006654:	e0c00317 	ldw	r3,12(fp)
 1006658:	1885883a 	add	r2,r3,r2
 100665c:	10800217 	ldw	r2,8(r2)
 1006660:	100b883a 	mov	r5,r2
 1006664:	10060800 	call	1006080 <metal_cache_invalidate>
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
	for (i = 0; i < nents_in; i++) {
 1006668:	e0bffb17 	ldw	r2,-20(fp)
 100666c:	10800044 	addi	r2,r2,1
 1006670:	e0bffb15 	stw	r2,-20(fp)
 1006674:	e0fffb17 	ldw	r3,-20(fp)
 1006678:	e0800217 	ldw	r2,8(fp)
 100667c:	18bfdf16 	blt	r3,r2,10065fc <__alt_data_end+0xff0065fc>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
	}

	return nents_in;
 1006680:	e0800217 	ldw	r2,8(fp)
}
 1006684:	e037883a 	mov	sp,fp
 1006688:	dfc00117 	ldw	ra,4(sp)
 100668c:	df000017 	ldw	fp,0(sp)
 1006690:	dec00204 	addi	sp,sp,8
 1006694:	f800283a 	ret

01006698 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 1006698:	defff904 	addi	sp,sp,-28
 100669c:	dfc00615 	stw	ra,24(sp)
 10066a0:	df000515 	stw	fp,20(sp)
 10066a4:	df000504 	addi	fp,sp,20
 10066a8:	e13ffc15 	stw	r4,-16(fp)
 10066ac:	e17ffd15 	stw	r5,-12(fp)
 10066b0:	e1bffe15 	stw	r6,-8(fp)
 10066b4:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 10066b8:	e03ffb15 	stw	zero,-20(fp)
 10066bc:	00000f06 	br	10066fc <metal_generic_dev_dma_unmap+0x64>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 10066c0:	e0bffb17 	ldw	r2,-20(fp)
 10066c4:	10800324 	muli	r2,r2,12
 10066c8:	e0ffff17 	ldw	r3,-4(fp)
 10066cc:	1885883a 	add	r2,r3,r2
 10066d0:	11000017 	ldw	r4,0(r2)
 10066d4:	e0bffb17 	ldw	r2,-20(fp)
 10066d8:	10800324 	muli	r2,r2,12
 10066dc:	e0ffff17 	ldw	r3,-4(fp)
 10066e0:	1885883a 	add	r2,r3,r2
 10066e4:	10800217 	ldw	r2,8(r2)
 10066e8:	100b883a 	mov	r5,r2
 10066ec:	10060800 	call	1006080 <metal_cache_invalidate>
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 10066f0:	e0bffb17 	ldw	r2,-20(fp)
 10066f4:	10800044 	addi	r2,r2,1
 10066f8:	e0bffb15 	stw	r2,-20(fp)
 10066fc:	e0fffb17 	ldw	r3,-20(fp)
 1006700:	e0800217 	ldw	r2,8(fp)
 1006704:	18bfee16 	blt	r3,r2,10066c0 <__alt_data_end+0xff0066c0>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
	}
}
 1006708:	0001883a 	nop
 100670c:	e037883a 	mov	sp,fp
 1006710:	dfc00117 	ldw	ra,4(sp)
 1006714:	df000017 	ldw	fp,0(sp)
 1006718:	dec00204 	addi	sp,sp,8
 100671c:	f800283a 	ret

01006720 <metal_dma_map>:
int metal_dma_map(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg_in,
		  int nents_in,
		  struct metal_sg *sg_out)
{
 1006720:	defff704 	addi	sp,sp,-36
 1006724:	dfc00815 	stw	ra,32(sp)
 1006728:	df000715 	stw	fp,28(sp)
 100672c:	df000704 	addi	fp,sp,28
 1006730:	e13ffc15 	stw	r4,-16(fp)
 1006734:	e17ffd15 	stw	r5,-12(fp)
 1006738:	e1bffe15 	stw	r6,-8(fp)
 100673c:	e1ffff15 	stw	r7,-4(fp)
	int nents_out;

	if (!dev || !sg_in || !sg_out)
 1006740:	e0bffc17 	ldw	r2,-16(fp)
 1006744:	10000426 	beq	r2,zero,1006758 <metal_dma_map+0x38>
 1006748:	e0bffe17 	ldw	r2,-8(fp)
 100674c:	10000226 	beq	r2,zero,1006758 <metal_dma_map+0x38>
 1006750:	e0800217 	ldw	r2,8(fp)
 1006754:	1000021e 	bne	r2,zero,1006760 <metal_dma_map+0x40>
		return -EINVAL;
 1006758:	00bffa84 	movi	r2,-22
 100675c:	00001b06 	br	10067cc <metal_dma_map+0xac>
	if (!dev->bus->ops.dev_dma_map)
 1006760:	e0bffc17 	ldw	r2,-16(fp)
 1006764:	10800117 	ldw	r2,4(r2)
 1006768:	10800517 	ldw	r2,20(r2)
 100676c:	1000021e 	bne	r2,zero,1006778 <metal_dma_map+0x58>
		return -ENODEV;
 1006770:	00bffb44 	movi	r2,-19
 1006774:	00001506 	br	10067cc <metal_dma_map+0xac>

	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006778:	e0bffd17 	ldw	r2,-12(fp)
 100677c:	10800058 	cmpnei	r2,r2,1
 1006780:	1000021e 	bne	r2,zero,100678c <metal_dma_map+0x6c>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 1006784:	0001b03a 	sync
 1006788:	00000106 	br	1006790 <metal_dma_map+0x70>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 100678c:	0001b03a 	sync
	nents_out = dev->bus->ops.dev_dma_map(dev->bus,
 1006790:	e0bffc17 	ldw	r2,-16(fp)
 1006794:	10800117 	ldw	r2,4(r2)
 1006798:	10800517 	ldw	r2,20(r2)
 100679c:	e0fffc17 	ldw	r3,-16(fp)
 10067a0:	19000117 	ldw	r4,4(r3)
 10067a4:	e0c00217 	ldw	r3,8(fp)
 10067a8:	d8c00115 	stw	r3,4(sp)
 10067ac:	e0ffff17 	ldw	r3,-4(fp)
 10067b0:	d8c00015 	stw	r3,0(sp)
 10067b4:	e1fffe17 	ldw	r7,-8(fp)
 10067b8:	e1bffd17 	ldw	r6,-12(fp)
 10067bc:	e17ffc17 	ldw	r5,-16(fp)
 10067c0:	103ee83a 	callr	r2
 10067c4:	e0bffb15 	stw	r2,-20(fp)
			dev, dir, sg_in, nents_in, sg_out);
	return nents_out;
 10067c8:	e0bffb17 	ldw	r2,-20(fp)
}
 10067cc:	e037883a 	mov	sp,fp
 10067d0:	dfc00117 	ldw	ra,4(sp)
 10067d4:	df000017 	ldw	fp,0(sp)
 10067d8:	dec00204 	addi	sp,sp,8
 10067dc:	f800283a 	ret

010067e0 <metal_dma_unmap>:

void metal_dma_unmap(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg,
		  int nents)
{
 10067e0:	defff904 	addi	sp,sp,-28
 10067e4:	dfc00615 	stw	ra,24(sp)
 10067e8:	df000515 	stw	fp,20(sp)
 10067ec:	df000504 	addi	fp,sp,20
 10067f0:	e13ffc15 	stw	r4,-16(fp)
 10067f4:	e17ffd15 	stw	r5,-12(fp)
 10067f8:	e1bffe15 	stw	r6,-8(fp)
 10067fc:	e1ffff15 	stw	r7,-4(fp)
	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006800:	e0bffd17 	ldw	r2,-12(fp)
 1006804:	10800058 	cmpnei	r2,r2,1
 1006808:	1000021e 	bne	r2,zero,1006814 <metal_dma_unmap+0x34>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 100680c:	0001b03a 	sync
 1006810:	00000106 	br	1006818 <metal_dma_unmap+0x38>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 1006814:	0001b03a 	sync

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
 1006818:	e0bffc17 	ldw	r2,-16(fp)
 100681c:	10001226 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
 1006820:	e0bffc17 	ldw	r2,-16(fp)
 1006824:	10800117 	ldw	r2,4(r2)
 1006828:	10800617 	ldw	r2,24(r2)
 100682c:	10000e26 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
 1006830:	e0bffe17 	ldw	r2,-8(fp)
 1006834:	10000c26 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
		return;
	dev->bus->ops.dev_dma_unmap(dev->bus,
 1006838:	e0bffc17 	ldw	r2,-16(fp)
 100683c:	10800117 	ldw	r2,4(r2)
 1006840:	10800617 	ldw	r2,24(r2)
 1006844:	e0fffc17 	ldw	r3,-16(fp)
 1006848:	19000117 	ldw	r4,4(r3)
 100684c:	e0ffff17 	ldw	r3,-4(fp)
 1006850:	d8c00015 	stw	r3,0(sp)
 1006854:	e1fffe17 	ldw	r7,-8(fp)
 1006858:	e1bffd17 	ldw	r6,-12(fp)
 100685c:	e17ffc17 	ldw	r5,-16(fp)
 1006860:	103ee83a 	callr	r2
 1006864:	00000106 	br	100686c <metal_dma_unmap+0x8c>
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
		return;
 1006868:	0001883a 	nop
	dev->bus->ops.dev_dma_unmap(dev->bus,
			dev, dir, sg, nents);
}
 100686c:	e037883a 	mov	sp,fp
 1006870:	dfc00117 	ldw	ra,4(sp)
 1006874:	df000017 	ldw	fp,0(sp)
 1006878:	dec00204 	addi	sp,sp,8
 100687c:	f800283a 	ret

01006880 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1006880:	defffd04 	addi	sp,sp,-12
 1006884:	dfc00215 	stw	ra,8(sp)
 1006888:	df000115 	stw	fp,4(sp)
 100688c:	df000104 	addi	fp,sp,4
 1006890:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 1006894:	e13fff17 	ldw	r4,-4(fp)
 1006898:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100689c:	e037883a 	mov	sp,fp
 10068a0:	dfc00117 	ldw	ra,4(sp)
 10068a4:	df000017 	ldw	fp,0(sp)
 10068a8:	dec00204 	addi	sp,sp,8
 10068ac:	f800283a 	ret

010068b0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 10068b0:	defffd04 	addi	sp,sp,-12
 10068b4:	dfc00215 	stw	ra,8(sp)
 10068b8:	df000115 	stw	fp,4(sp)
 10068bc:	df000104 	addi	fp,sp,4
 10068c0:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 10068c4:	e13fff17 	ldw	r4,-4(fp)
 10068c8:	10011840 	call	1001184 <vPortFree>
}
 10068cc:	0001883a 	nop
 10068d0:	e037883a 	mov	sp,fp
 10068d4:	dfc00117 	ldw	ra,4(sp)
 10068d8:	df000017 	ldw	fp,0(sp)
 10068dc:	dec00204 	addi	sp,sp,8
 10068e0:	f800283a 	ret

010068e4 <alloc_thread>:
#include <sys.h>

static const int test_count = 10;

static void *alloc_thread(void *arg)
{
 10068e4:	defffa04 	addi	sp,sp,-24
 10068e8:	dfc00515 	stw	ra,20(sp)
 10068ec:	df000415 	stw	fp,16(sp)
 10068f0:	df000404 	addi	fp,sp,16
 10068f4:	e13fff15 	stw	r4,-4(fp)
	int i;
	void *ptr;
	void *rv = 0;
 10068f8:	e03ffd15 	stw	zero,-12(fp)

	(void)arg;

	for (i = 0; i < test_count; i++) {
 10068fc:	e03ffc15 	stw	zero,-16(fp)
 1006900:	00001d06 	br	1006978 <alloc_thread+0x94>
		/* expecting the implementation to be thread safe */
		ptr = metal_allocate_memory(256 /*10*i*/);
 1006904:	01004004 	movi	r4,256
 1006908:	10068800 	call	1006880 <metal_allocate_memory>
 100690c:	e0bffe15 	stw	r2,-8(fp)
		if (!ptr) {
 1006910:	e0bffe17 	ldw	r2,-8(fp)
 1006914:	1000131e 	bne	r2,zero,1006964 <alloc_thread+0x80>
			metal_log(METAL_LOG_DEBUG, "failed to allocate memmory\n");
 1006918:	008060f4 	movhi	r2,387
 100691c:	10a97a04 	addi	r2,r2,-23064
 1006920:	10800017 	ldw	r2,0(r2)
 1006924:	108001f0 	cmpltui	r2,r2,7
 1006928:	10000b1e 	bne	r2,zero,1006958 <alloc_thread+0x74>
 100692c:	008060f4 	movhi	r2,387
 1006930:	10a97a04 	addi	r2,r2,-23064
 1006934:	10800117 	ldw	r2,4(r2)
 1006938:	10000726 	beq	r2,zero,1006958 <alloc_thread+0x74>
 100693c:	008060f4 	movhi	r2,387
 1006940:	10a97a04 	addi	r2,r2,-23064
 1006944:	10800117 	ldw	r2,4(r2)
 1006948:	014040b4 	movhi	r5,258
 100694c:	2954c504 	addi	r5,r5,21268
 1006950:	010001c4 	movi	r4,7
 1006954:	103ee83a 	callr	r2
		        rv = (void *)-ENOMEM;
 1006958:	00bffd04 	movi	r2,-12
 100695c:	e0bffd15 	stw	r2,-12(fp)
			break;
 1006960:	00000806 	br	1006984 <alloc_thread+0xa0>
		}

		metal_free_memory(ptr);
 1006964:	e13ffe17 	ldw	r4,-8(fp)
 1006968:	10068b00 	call	10068b0 <metal_free_memory>
	void *ptr;
	void *rv = 0;

	(void)arg;

	for (i = 0; i < test_count; i++) {
 100696c:	e0bffc17 	ldw	r2,-16(fp)
 1006970:	10800044 	addi	r2,r2,1
 1006974:	e0bffc15 	stw	r2,-16(fp)
 1006978:	00800284 	movi	r2,10
 100697c:	e0fffc17 	ldw	r3,-16(fp)
 1006980:	18bfe016 	blt	r3,r2,1006904 <__alt_data_end+0xff006904>
		}

		metal_free_memory(ptr);
	}

	return rv;
 1006984:	e0bffd17 	ldw	r2,-12(fp)
}
 1006988:	e037883a 	mov	sp,fp
 100698c:	dfc00117 	ldw	ra,4(sp)
 1006990:	df000017 	ldw	fp,0(sp)
 1006994:	dec00204 	addi	sp,sp,8
 1006998:	f800283a 	ret

0100699c <alloc>:

static int alloc(void)
{
 100699c:	defffc04 	addi	sp,sp,-16
 10069a0:	dfc00315 	stw	ra,12(sp)
 10069a4:	df000215 	stw	fp,8(sp)
 10069a8:	df000204 	addi	fp,sp,8
	const int threads = 10;
 10069ac:	00800284 	movi	r2,10
 10069b0:	e0bffe15 	stw	r2,-8(fp)
	int rc;

	rc =  metal_run(threads, alloc_thread, NULL);
 10069b4:	000d883a 	mov	r6,zero
 10069b8:	01404034 	movhi	r5,256
 10069bc:	295a3904 	addi	r5,r5,26852
 10069c0:	e13ffe17 	ldw	r4,-8(fp)
 10069c4:	10074a00 	call	10074a0 <metal_run>
 10069c8:	e0bfff15 	stw	r2,-4(fp)

	return rc;
 10069cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10069d0:	e037883a 	mov	sp,fp
 10069d4:	dfc00117 	ldw	ra,4(sp)
 10069d8:	df000017 	ldw	fp,0(sp)
 10069dc:	dec00204 	addi	sp,sp,8
 10069e0:	f800283a 	ret

010069e4 <metal_test_alloc>:
METAL_ADD_TEST(alloc);
 10069e4:	defffe04 	addi	sp,sp,-8
 10069e8:	dfc00115 	stw	ra,4(sp)
 10069ec:	df000015 	stw	fp,0(sp)
 10069f0:	d839883a 	mov	fp,sp
 10069f4:	010040b4 	movhi	r4,258
 10069f8:	211a9504 	addi	r4,r4,27220
 10069fc:	1005c280 	call	1005c28 <metal_add_test_case>
 1006a00:	0001883a 	nop
 1006a04:	e037883a 	mov	sp,fp
 1006a08:	dfc00117 	ldw	ra,4(sp)
 1006a0c:	df000017 	ldw	fp,0(sp)
 1006a10:	dec00204 	addi	sp,sp,8
 1006a14:	f800283a 	ret

01006a18 <atomic_thread>:
#include <sys.h>

static const int atomic_test_count = 1000;

static void *atomic_thread(void *arg)
{
 1006a18:	defffc04 	addi	sp,sp,-16
 1006a1c:	df000315 	stw	fp,12(sp)
 1006a20:	df000304 	addi	fp,sp,12
 1006a24:	e13fff15 	stw	r4,-4(fp)
	atomic_int *c = arg;
 1006a28:	e0bfff17 	ldw	r2,-4(fp)
 1006a2c:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < atomic_test_count; i++)
 1006a30:	e03ffd15 	stw	zero,-12(fp)
 1006a34:	00000806 	br	1006a58 <atomic_thread+0x40>
		atomic_fetch_add(c, 1);
 1006a38:	e0bffe17 	ldw	r2,-8(fp)
 1006a3c:	10800017 	ldw	r2,0(r2)
 1006a40:	10c00044 	addi	r3,r2,1
 1006a44:	e0bffe17 	ldw	r2,-8(fp)
 1006a48:	10c00015 	stw	r3,0(r2)
static void *atomic_thread(void *arg)
{
	atomic_int *c = arg;
	int i;

	for (i = 0; i < atomic_test_count; i++)
 1006a4c:	e0bffd17 	ldw	r2,-12(fp)
 1006a50:	10800044 	addi	r2,r2,1
 1006a54:	e0bffd15 	stw	r2,-12(fp)
 1006a58:	0080fa04 	movi	r2,1000
 1006a5c:	e0fffd17 	ldw	r3,-12(fp)
 1006a60:	18bff516 	blt	r3,r2,1006a38 <__alt_data_end+0xff006a38>
		atomic_fetch_add(c, 1);

	return NULL;
 1006a64:	0005883a 	mov	r2,zero
}
 1006a68:	e037883a 	mov	sp,fp
 1006a6c:	df000017 	ldw	fp,0(sp)
 1006a70:	dec00104 	addi	sp,sp,4
 1006a74:	f800283a 	ret

01006a78 <atomic>:

static int atomic(void)
{
 1006a78:	defffa04 	addi	sp,sp,-24
 1006a7c:	dfc00515 	stw	ra,20(sp)
 1006a80:	df000415 	stw	fp,16(sp)
 1006a84:	df000404 	addi	fp,sp,16
	const int threads = 10;
 1006a88:	00800284 	movi	r2,10
 1006a8c:	e0bffd15 	stw	r2,-12(fp)
	atomic_int counter = ATOMIC_VAR_INIT(0);
 1006a90:	e03fff15 	stw	zero,-4(fp)
	int value, error;

	error = metal_run(threads, atomic_thread, &counter);
 1006a94:	e0bfff04 	addi	r2,fp,-4
 1006a98:	100d883a 	mov	r6,r2
 1006a9c:	01404034 	movhi	r5,256
 1006aa0:	295a8604 	addi	r5,r5,27160
 1006aa4:	e13ffd17 	ldw	r4,-12(fp)
 1006aa8:	10074a00 	call	10074a0 <metal_run>
 1006aac:	e0bffc15 	stw	r2,-16(fp)
	if (!error) {
 1006ab0:	e0bffc17 	ldw	r2,-16(fp)
 1006ab4:	10001e1e 	bne	r2,zero,1006b30 <atomic+0xb8>
		value = atomic_load(&counter);
 1006ab8:	0001b03a 	sync
 1006abc:	e0bfff17 	ldw	r2,-4(fp)
 1006ac0:	e0bffe15 	stw	r2,-8(fp)
		value -= atomic_test_count * threads;
 1006ac4:	00c0fa04 	movi	r3,1000
 1006ac8:	e0bffd17 	ldw	r2,-12(fp)
 1006acc:	1885383a 	mul	r2,r3,r2
 1006ad0:	e0fffe17 	ldw	r3,-8(fp)
 1006ad4:	1885c83a 	sub	r2,r3,r2
 1006ad8:	e0bffe15 	stw	r2,-8(fp)
		if (value) {
 1006adc:	e0bffe17 	ldw	r2,-8(fp)
 1006ae0:	10001326 	beq	r2,zero,1006b30 <atomic+0xb8>
			metal_log(METAL_LOG_DEBUG, "counter mismatch, delta = %d\n",
 1006ae4:	008060f4 	movhi	r2,387
 1006ae8:	10a97a04 	addi	r2,r2,-23064
 1006aec:	10800017 	ldw	r2,0(r2)
 1006af0:	108001f0 	cmpltui	r2,r2,7
 1006af4:	10000c1e 	bne	r2,zero,1006b28 <atomic+0xb0>
 1006af8:	008060f4 	movhi	r2,387
 1006afc:	10a97a04 	addi	r2,r2,-23064
 1006b00:	10800117 	ldw	r2,4(r2)
 1006b04:	10000826 	beq	r2,zero,1006b28 <atomic+0xb0>
 1006b08:	008060f4 	movhi	r2,387
 1006b0c:	10a97a04 	addi	r2,r2,-23064
 1006b10:	10800117 	ldw	r2,4(r2)
 1006b14:	e1bffe17 	ldw	r6,-8(fp)
 1006b18:	014040b4 	movhi	r5,258
 1006b1c:	2954ce04 	addi	r5,r5,21304
 1006b20:	010001c4 	movi	r4,7
 1006b24:	103ee83a 	callr	r2
				  value);
			error = -EINVAL;
 1006b28:	00bffa84 	movi	r2,-22
 1006b2c:	e0bffc15 	stw	r2,-16(fp)
		}
	}

	return error;
 1006b30:	e0bffc17 	ldw	r2,-16(fp)
}
 1006b34:	e037883a 	mov	sp,fp
 1006b38:	dfc00117 	ldw	ra,4(sp)
 1006b3c:	df000017 	ldw	fp,0(sp)
 1006b40:	dec00204 	addi	sp,sp,8
 1006b44:	f800283a 	ret

01006b48 <metal_test_atomic>:
METAL_ADD_TEST(atomic);
 1006b48:	defffe04 	addi	sp,sp,-8
 1006b4c:	dfc00115 	stw	ra,4(sp)
 1006b50:	df000015 	stw	fp,0(sp)
 1006b54:	d839883a 	mov	fp,sp
 1006b58:	010040b4 	movhi	r4,258
 1006b5c:	211a9904 	addi	r4,r4,27236
 1006b60:	1005c280 	call	1005c28 <metal_add_test_case>
 1006b64:	0001883a 	nop
 1006b68:	e037883a 	mov	sp,fp
 1006b6c:	dfc00117 	ldw	ra,4(sp)
 1006b70:	df000017 	ldw	fp,0(sp)
 1006b74:	dec00204 	addi	sp,sp,8
 1006b78:	f800283a 	ret

01006b7c <metal_condition_wait>:

#include <condition.h>

int metal_condition_wait(struct metal_condition *cv,
			 metal_mutex_t *m)
{
 1006b7c:	defffd04 	addi	sp,sp,-12
 1006b80:	df000215 	stw	fp,8(sp)
 1006b84:	df000204 	addi	fp,sp,8
 1006b88:	e13ffe15 	stw	r4,-8(fp)
 1006b8c:	e17fff15 	stw	r5,-4(fp)
	/* TODO: Implement condition variable for FreeRTOS */
	(void)cv;
	(void)m;
	return 0;
 1006b90:	0005883a 	mov	r2,zero
}
 1006b94:	e037883a 	mov	sp,fp
 1006b98:	df000017 	ldw	fp,0(sp)
 1006b9c:	dec00104 	addi	sp,sp,4
 1006ba0:	f800283a 	ret

01006ba4 <metal_generic_dev_sys_open>:
#include <device.h>
#include <sys.h>
#include <utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 1006ba4:	defffb04 	addi	sp,sp,-20
 1006ba8:	dfc00415 	stw	ra,16(sp)
 1006bac:	df000315 	stw	fp,12(sp)
 1006bb0:	df000304 	addi	fp,sp,12
 1006bb4:	e13fff15 	stw	r4,-4(fp)
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006bb8:	e03ffd15 	stw	zero,-12(fp)
 1006bbc:	00000e06 	br	1006bf8 <metal_generic_dev_sys_open+0x54>
		io = &dev->regions[i];
 1006bc0:	e0bffd17 	ldw	r2,-12(fp)
 1006bc4:	10800e24 	muli	r2,r2,56
 1006bc8:	10800304 	addi	r2,r2,12
 1006bcc:	e0ffff17 	ldw	r3,-4(fp)
 1006bd0:	1885883a 	add	r2,r3,r2
 1006bd4:	e0bffe15 	stw	r2,-8(fp)
		if (!io->size)
 1006bd8:	e0bffe17 	ldw	r2,-8(fp)
 1006bdc:	10800217 	ldw	r2,8(r2)
 1006be0:	10000a26 	beq	r2,zero,1006c0c <metal_generic_dev_sys_open+0x68>
			break;
		metal_sys_io_mem_map(io);
 1006be4:	e13ffe17 	ldw	r4,-8(fp)
 1006be8:	1006c940 	call	1006c94 <metal_sys_io_mem_map>
{
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006bec:	e0bffd17 	ldw	r2,-12(fp)
 1006bf0:	10800044 	addi	r2,r2,1
 1006bf4:	e0bffd15 	stw	r2,-12(fp)
 1006bf8:	e0bfff17 	ldw	r2,-4(fp)
 1006bfc:	10800217 	ldw	r2,8(r2)
 1006c00:	e0fffd17 	ldw	r3,-12(fp)
 1006c04:	18bfee36 	bltu	r3,r2,1006bc0 <__alt_data_end+0xff006bc0>
 1006c08:	00000106 	br	1006c10 <metal_generic_dev_sys_open+0x6c>
		io = &dev->regions[i];
		if (!io->size)
			break;
 1006c0c:	0001883a 	nop
		metal_sys_io_mem_map(io);
	}

	return 0;
 1006c10:	0005883a 	mov	r2,zero
}
 1006c14:	e037883a 	mov	sp,fp
 1006c18:	dfc00117 	ldw	ra,4(sp)
 1006c1c:	df000017 	ldw	fp,0(sp)
 1006c20:	dec00204 	addi	sp,sp,8
 1006c24:	f800283a 	ret

01006c28 <metal_sys_init>:
#include <device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 1006c28:	defffd04 	addi	sp,sp,-12
 1006c2c:	dfc00215 	stw	ra,8(sp)
 1006c30:	df000115 	stw	fp,4(sp)
 1006c34:	df000104 	addi	fp,sp,4
 1006c38:	e13fff15 	stw	r4,-4(fp)
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 1006c3c:	010040b4 	movhi	r4,258
 1006c40:	211a8a04 	addi	r4,r4,27176
 1006c44:	10060bc0 	call	10060bc <metal_bus_register>
	return 0;
 1006c48:	0005883a 	mov	r2,zero
}
 1006c4c:	e037883a 	mov	sp,fp
 1006c50:	dfc00117 	ldw	ra,4(sp)
 1006c54:	df000017 	ldw	fp,0(sp)
 1006c58:	dec00204 	addi	sp,sp,8
 1006c5c:	f800283a 	ret

01006c60 <metal_sys_finish>:

void metal_sys_finish(void)
{
 1006c60:	defffe04 	addi	sp,sp,-8
 1006c64:	dfc00115 	stw	ra,4(sp)
 1006c68:	df000015 	stw	fp,0(sp)
 1006c6c:	d839883a 	mov	fp,sp
	metal_bus_unregister(&metal_generic_bus);
 1006c70:	010040b4 	movhi	r4,258
 1006c74:	211a8a04 	addi	r4,r4,27176
 1006c78:	10061b40 	call	10061b4 <metal_bus_unregister>
}
 1006c7c:	0001883a 	nop
 1006c80:	e037883a 	mov	sp,fp
 1006c84:	dfc00117 	ldw	ra,4(sp)
 1006c88:	df000017 	ldw	fp,0(sp)
 1006c8c:	dec00204 	addi	sp,sp,8
 1006c90:	f800283a 	ret

01006c94 <metal_sys_io_mem_map>:
 */

#include <metal_io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 1006c94:	defffa04 	addi	sp,sp,-24
 1006c98:	dfc00515 	stw	ra,20(sp)
 1006c9c:	df000415 	stw	fp,16(sp)
 1006ca0:	df000404 	addi	fp,sp,16
 1006ca4:	e13fff15 	stw	r4,-4(fp)
	unsigned long p;
	size_t psize;
	void *va;

	va = io->virt;
 1006ca8:	e0bfff17 	ldw	r2,-4(fp)
 1006cac:	10800017 	ldw	r2,0(r2)
 1006cb0:	e0bffe15 	stw	r2,-8(fp)
	psize = io->size;
 1006cb4:	e0bfff17 	ldw	r2,-4(fp)
 1006cb8:	10800217 	ldw	r2,8(r2)
 1006cbc:	e0bffd15 	stw	r2,-12(fp)
	if (psize) {
 1006cc0:	e0bffd17 	ldw	r2,-12(fp)
 1006cc4:	10002826 	beq	r2,zero,1006d68 <metal_sys_io_mem_map+0xd4>
		if (psize >> io->page_shift)
 1006cc8:	e0bfff17 	ldw	r2,-4(fp)
 1006ccc:	10800317 	ldw	r2,12(r2)
 1006cd0:	e0fffd17 	ldw	r3,-12(fp)
 1006cd4:	1884d83a 	srl	r2,r3,r2
 1006cd8:	10000526 	beq	r2,zero,1006cf0 <metal_sys_io_mem_map+0x5c>
			psize = (size_t)1 << io->page_shift;
 1006cdc:	e0bfff17 	ldw	r2,-4(fp)
 1006ce0:	10800317 	ldw	r2,12(r2)
 1006ce4:	00c00044 	movi	r3,1
 1006ce8:	1884983a 	sll	r2,r3,r2
 1006cec:	e0bffd15 	stw	r2,-12(fp)
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 1006cf0:	e03ffc15 	stw	zero,-16(fp)
 1006cf4:	00001506 	br	1006d4c <metal_sys_io_mem_map+0xb8>
			metal_machine_io_mem_map(va, io->physmap[p],
 1006cf8:	e0bfff17 	ldw	r2,-4(fp)
 1006cfc:	10c00117 	ldw	r3,4(r2)
 1006d00:	e0bffc17 	ldw	r2,-16(fp)
 1006d04:	1085883a 	add	r2,r2,r2
 1006d08:	1085883a 	add	r2,r2,r2
 1006d0c:	1885883a 	add	r2,r3,r2
 1006d10:	10c00017 	ldw	r3,0(r2)
 1006d14:	e0bfff17 	ldw	r2,-4(fp)
 1006d18:	10800517 	ldw	r2,20(r2)
 1006d1c:	100f883a 	mov	r7,r2
 1006d20:	e1bffd17 	ldw	r6,-12(fp)
 1006d24:	180b883a 	mov	r5,r3
 1006d28:	e13ffe17 	ldw	r4,-8(fp)
 1006d2c:	10072740 	call	1007274 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 1006d30:	e0fffe17 	ldw	r3,-8(fp)
 1006d34:	e0bffd17 	ldw	r2,-12(fp)
 1006d38:	1885883a 	add	r2,r3,r2
 1006d3c:	e0bffe15 	stw	r2,-8(fp)
	va = io->virt;
	psize = io->size;
	if (psize) {
		if (psize >> io->page_shift)
			psize = (size_t)1 << io->page_shift;
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 1006d40:	e0bffc17 	ldw	r2,-16(fp)
 1006d44:	10800044 	addi	r2,r2,1
 1006d48:	e0bffc15 	stw	r2,-16(fp)
 1006d4c:	e0bfff17 	ldw	r2,-4(fp)
 1006d50:	10c00217 	ldw	r3,8(r2)
 1006d54:	e0bfff17 	ldw	r2,-4(fp)
 1006d58:	10800317 	ldw	r2,12(r2)
 1006d5c:	1886d83a 	srl	r3,r3,r2
 1006d60:	e0bffc17 	ldw	r2,-16(fp)
 1006d64:	18bfe42e 	bgeu	r3,r2,1006cf8 <__alt_data_end+0xff006cf8>
			metal_machine_io_mem_map(va, io->physmap[p],
						 psize, io->mem_flags);
			va += psize;
		}
	}
}
 1006d68:	0001883a 	nop
 1006d6c:	e037883a 	mov	sp,fp
 1006d70:	dfc00117 	ldw	ra,4(sp)
 1006d74:	df000017 	ldw	fp,0(sp)
 1006d78:	dec00204 	addi	sp,sp,8
 1006d7c:	f800283a 	ret

01006d80 <metal_irq_unregister>:
 *
 * @param[in]  irq         interrupt id
 */
static inline
void metal_irq_unregister(int irq)
{
 1006d80:	defffd04 	addi	sp,sp,-12
 1006d84:	dfc00215 	stw	ra,8(sp)
 1006d88:	df000115 	stw	fp,4(sp)
 1006d8c:	df000104 	addi	fp,sp,4
 1006d90:	e13fff15 	stw	r4,-4(fp)
	metal_irq_register(irq, 0, NULL);
 1006d94:	000d883a 	mov	r6,zero
 1006d98:	000b883a 	mov	r5,zero
 1006d9c:	e13fff17 	ldw	r4,-4(fp)
 1006da0:	10084500 	call	1008450 <metal_irq_register>
}
 1006da4:	0001883a 	nop
 1006da8:	e037883a 	mov	sp,fp
 1006dac:	dfc00117 	ldw	ra,4(sp)
 1006db0:	df000017 	ldw	fp,0(sp)
 1006db4:	dec00204 	addi	sp,sp,8
 1006db8:	f800283a 	ret

01006dbc <irq_handler>:
#include <sys.h>
#include <metal_list.h>
#include <utilities.h>

static int irq_handler(int irq, void *priv)
{
 1006dbc:	defffd04 	addi	sp,sp,-12
 1006dc0:	df000215 	stw	fp,8(sp)
 1006dc4:	df000204 	addi	fp,sp,8
 1006dc8:	e13ffe15 	stw	r4,-8(fp)
 1006dcc:	e17fff15 	stw	r5,-4(fp)
	(void)irq;
	(void)priv;

	return 0;
 1006dd0:	0005883a 	mov	r2,zero
}
 1006dd4:	e037883a 	mov	sp,fp
 1006dd8:	df000017 	ldw	fp,0(sp)
 1006ddc:	dec00104 	addi	sp,sp,4
 1006de0:	f800283a 	ret

01006de4 <irq>:

static int irq(void)
{
 1006de4:	defffb04 	addi	sp,sp,-20
 1006de8:	dfc00415 	stw	ra,16(sp)
 1006dec:	df000315 	stw	fp,12(sp)
 1006df0:	df000304 	addi	fp,sp,12
	int rc = 0;
 1006df4:	e03ffd15 	stw	zero,-12(fp)
	char *err_msg="";
 1006df8:	008040b4 	movhi	r2,258
 1006dfc:	1094d804 	addi	r2,r2,21344
 1006e00:	e0bffe15 	stw	r2,-8(fp)
	enum metal_log_level mll= metal_get_log_level();
 1006e04:	10086540 	call	1008654 <metal_get_log_level>
 1006e08:	e0bfff15 	stw	r2,-4(fp)

	/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */
	metal_set_log_level(METAL_LOG_CRITICAL);
 1006e0c:	01000084 	movi	r4,2
 1006e10:	10086200 	call	1008620 <metal_set_log_level>

	rc = metal_irq_register(1, irq_handler, (void *)1);
 1006e14:	01800044 	movi	r6,1
 1006e18:	01404034 	movhi	r5,256
 1006e1c:	295b6f04 	addi	r5,r5,28092
 1006e20:	01000044 	movi	r4,1
 1006e24:	10084500 	call	1008450 <metal_irq_register>
 1006e28:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e2c:	e0bffd17 	ldw	r2,-12(fp)
 1006e30:	10000426 	beq	r2,zero,1006e44 <irq+0x60>
		err_msg = "register irq 0 fail drv_id 1\n";
 1006e34:	008040b4 	movhi	r2,258
 1006e38:	1094d904 	addi	r2,r2,21348
 1006e3c:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006e40:	00002006 	br	1006ec4 <irq+0xe0>
	}
	rc = metal_irq_register(2, irq_handler, (void *)1);
 1006e44:	01800044 	movi	r6,1
 1006e48:	01404034 	movhi	r5,256
 1006e4c:	295b6f04 	addi	r5,r5,28092
 1006e50:	01000084 	movi	r4,2
 1006e54:	10084500 	call	1008450 <metal_irq_register>
 1006e58:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e5c:	e0bffd17 	ldw	r2,-12(fp)
 1006e60:	10000426 	beq	r2,zero,1006e74 <irq+0x90>
		err_msg = "register irq 1 fail drv_id 1\n";
 1006e64:	008040b4 	movhi	r2,258
 1006e68:	1094e104 	addi	r2,r2,21380
 1006e6c:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006e70:	00001406 	br	1006ec4 <irq+0xe0>
	}

	metal_irq_unregister(1);
 1006e74:	01000044 	movi	r4,1
 1006e78:	1006d800 	call	1006d80 <metal_irq_unregister>
	rc = metal_irq_register(1, irq_handler, (void *)1);
 1006e7c:	01800044 	movi	r6,1
 1006e80:	01404034 	movhi	r5,256
 1006e84:	295b6f04 	addi	r5,r5,28092
 1006e88:	01000044 	movi	r4,1
 1006e8c:	10084500 	call	1008450 <metal_irq_register>
 1006e90:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e94:	e0bffd17 	ldw	r2,-12(fp)
 1006e98:	10000426 	beq	r2,zero,1006eac <irq+0xc8>
		err_msg = "register irq 0 after unregistering failed\n";
 1006e9c:	008040b4 	movhi	r2,258
 1006ea0:	1094e904 	addi	r2,r2,21412
 1006ea4:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006ea8:	00000606 	br	1006ec4 <irq+0xe0>
	}
	metal_irq_unregister(1);
 1006eac:	01000044 	movi	r4,1
 1006eb0:	1006d800 	call	1006d80 <metal_irq_unregister>
	metal_irq_unregister(2);
 1006eb4:	01000084 	movi	r4,2
 1006eb8:	1006d800 	call	1006d80 <metal_irq_unregister>

	return 0;
 1006ebc:	0005883a 	mov	r2,zero
 1006ec0:	00002006 	br	1006f44 <irq+0x160>
out:
	metal_set_log_level(mll);
 1006ec4:	e13fff17 	ldw	r4,-4(fp)
 1006ec8:	10086200 	call	1008620 <metal_set_log_level>
	if ((err_msg[0] != '\0') && (!rc))
 1006ecc:	e0bffe17 	ldw	r2,-8(fp)
 1006ed0:	10800003 	ldbu	r2,0(r2)
 1006ed4:	10803fcc 	andi	r2,r2,255
 1006ed8:	1080201c 	xori	r2,r2,128
 1006edc:	10bfe004 	addi	r2,r2,-128
 1006ee0:	10000426 	beq	r2,zero,1006ef4 <irq+0x110>
 1006ee4:	e0bffd17 	ldw	r2,-12(fp)
 1006ee8:	1000021e 	bne	r2,zero,1006ef4 <irq+0x110>
		rc = -EINVAL;
 1006eec:	00bffa84 	movi	r2,-22
 1006ef0:	e0bffd15 	stw	r2,-12(fp)
	if (rc) metal_log(METAL_LOG_ERROR, "%s", err_msg);
 1006ef4:	e0bffd17 	ldw	r2,-12(fp)
 1006ef8:	10001126 	beq	r2,zero,1006f40 <irq+0x15c>
 1006efc:	008060f4 	movhi	r2,387
 1006f00:	10a97a04 	addi	r2,r2,-23064
 1006f04:	10800017 	ldw	r2,0(r2)
 1006f08:	108000f0 	cmpltui	r2,r2,3
 1006f0c:	10000c1e 	bne	r2,zero,1006f40 <irq+0x15c>
 1006f10:	008060f4 	movhi	r2,387
 1006f14:	10a97a04 	addi	r2,r2,-23064
 1006f18:	10800117 	ldw	r2,4(r2)
 1006f1c:	10000826 	beq	r2,zero,1006f40 <irq+0x15c>
 1006f20:	008060f4 	movhi	r2,387
 1006f24:	10a97a04 	addi	r2,r2,-23064
 1006f28:	10800117 	ldw	r2,4(r2)
 1006f2c:	e1bffe17 	ldw	r6,-8(fp)
 1006f30:	014040b4 	movhi	r5,258
 1006f34:	2954f404 	addi	r5,r5,21456
 1006f38:	010000c4 	movi	r4,3
 1006f3c:	103ee83a 	callr	r2
	return rc;
 1006f40:	e0bffd17 	ldw	r2,-12(fp)
}
 1006f44:	e037883a 	mov	sp,fp
 1006f48:	dfc00117 	ldw	ra,4(sp)
 1006f4c:	df000017 	ldw	fp,0(sp)
 1006f50:	dec00204 	addi	sp,sp,8
 1006f54:	f800283a 	ret

01006f58 <metal_test_irq>:

METAL_ADD_TEST(irq);
 1006f58:	defffe04 	addi	sp,sp,-8
 1006f5c:	dfc00115 	stw	ra,4(sp)
 1006f60:	df000015 	stw	fp,0(sp)
 1006f64:	d839883a 	mov	fp,sp
 1006f68:	010040b4 	movhi	r4,258
 1006f6c:	211a9d04 	addi	r4,r4,27252
 1006f70:	1005c280 	call	1005c28 <metal_add_test_case>
 1006f74:	0001883a 	nop
 1006f78:	e037883a 	mov	sp,fp
 1006f7c:	dfc00117 	ldw	ra,4(sp)
 1006f80:	df000017 	ldw	fp,0(sp)
 1006f84:	dec00204 	addi	sp,sp,8
 1006f88:	f800283a 	ret

01006f8c <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1006f8c:	defffe04 	addi	sp,sp,-8
 1006f90:	df000115 	stw	fp,4(sp)
 1006f94:	df000104 	addi	fp,sp,4
 1006f98:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1006f9c:	e0bfff17 	ldw	r2,-4(fp)
 1006fa0:	10000015 	stw	zero,0(r2)
 1006fa4:	0001b03a 	sync
}
 1006fa8:	0001883a 	nop
 1006fac:	e037883a 	mov	sp,fp
 1006fb0:	df000017 	ldw	fp,0(sp)
 1006fb4:	dec00104 	addi	sp,sp,4
 1006fb8:	f800283a 	ret

01006fbc <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1006fbc:	defffe04 	addi	sp,sp,-8
 1006fc0:	df000115 	stw	fp,4(sp)
 1006fc4:	df000104 	addi	fp,sp,4
 1006fc8:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1006fcc:	0001883a 	nop
 1006fd0:	e037883a 	mov	sp,fp
 1006fd4:	df000017 	ldw	fp,0(sp)
 1006fd8:	dec00104 	addi	sp,sp,4
 1006fdc:	f800283a 	ret

01006fe0 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1006fe0:	defffe04 	addi	sp,sp,-8
 1006fe4:	df000115 	stw	fp,4(sp)
 1006fe8:	df000104 	addi	fp,sp,4
 1006fec:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1006ff0:	0001883a 	nop
 1006ff4:	e0bfff17 	ldw	r2,-4(fp)
 1006ff8:	00c00044 	movi	r3,1
 1006ffc:	10c00015 	stw	r3,0(r2)
 1007000:	e0bfff17 	ldw	r2,-4(fp)
 1007004:	10800017 	ldw	r2,0(r2)
 1007008:	103ffa1e 	bne	r2,zero,1006ff4 <__alt_data_end+0xff006ff4>
		;
	}
}
 100700c:	0001883a 	nop
 1007010:	e037883a 	mov	sp,fp
 1007014:	df000017 	ldw	fp,0(sp)
 1007018:	dec00104 	addi	sp,sp,4
 100701c:	f800283a 	ret

01007020 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1007020:	defffe04 	addi	sp,sp,-8
 1007024:	df000115 	stw	fp,4(sp)
 1007028:	df000104 	addi	fp,sp,4
 100702c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1007030:	e0bfff17 	ldw	r2,-4(fp)
 1007034:	0001b03a 	sync
 1007038:	10000015 	stw	zero,0(r2)
}
 100703c:	0001883a 	nop
 1007040:	e037883a 	mov	sp,fp
 1007044:	df000017 	ldw	fp,0(sp)
 1007048:	dec00104 	addi	sp,sp,4
 100704c:	f800283a 	ret

01007050 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1007050:	defffd04 	addi	sp,sp,-12
 1007054:	dfc00215 	stw	ra,8(sp)
 1007058:	df000115 	stw	fp,4(sp)
 100705c:	df000104 	addi	fp,sp,4
 1007060:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1007064:	e13fff17 	ldw	r4,-4(fp)
 1007068:	1006f8c0 	call	1006f8c <__metal_mutex_init>
}
 100706c:	0001883a 	nop
 1007070:	e037883a 	mov	sp,fp
 1007074:	dfc00117 	ldw	ra,4(sp)
 1007078:	df000017 	ldw	fp,0(sp)
 100707c:	dec00204 	addi	sp,sp,8
 1007080:	f800283a 	ret

01007084 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1007084:	defffd04 	addi	sp,sp,-12
 1007088:	dfc00215 	stw	ra,8(sp)
 100708c:	df000115 	stw	fp,4(sp)
 1007090:	df000104 	addi	fp,sp,4
 1007094:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1007098:	e13fff17 	ldw	r4,-4(fp)
 100709c:	1006fbc0 	call	1006fbc <__metal_mutex_deinit>
}
 10070a0:	0001883a 	nop
 10070a4:	e037883a 	mov	sp,fp
 10070a8:	dfc00117 	ldw	ra,4(sp)
 10070ac:	df000017 	ldw	fp,0(sp)
 10070b0:	dec00204 	addi	sp,sp,8
 10070b4:	f800283a 	ret

010070b8 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 10070b8:	defffd04 	addi	sp,sp,-12
 10070bc:	dfc00215 	stw	ra,8(sp)
 10070c0:	df000115 	stw	fp,4(sp)
 10070c4:	df000104 	addi	fp,sp,4
 10070c8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 10070cc:	e13fff17 	ldw	r4,-4(fp)
 10070d0:	1006fe00 	call	1006fe0 <__metal_mutex_acquire>
}
 10070d4:	0001883a 	nop
 10070d8:	e037883a 	mov	sp,fp
 10070dc:	dfc00117 	ldw	ra,4(sp)
 10070e0:	df000017 	ldw	fp,0(sp)
 10070e4:	dec00204 	addi	sp,sp,8
 10070e8:	f800283a 	ret

010070ec <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 10070ec:	defffd04 	addi	sp,sp,-12
 10070f0:	dfc00215 	stw	ra,8(sp)
 10070f4:	df000115 	stw	fp,4(sp)
 10070f8:	df000104 	addi	fp,sp,4
 10070fc:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1007100:	e13fff17 	ldw	r4,-4(fp)
 1007104:	10070200 	call	1007020 <__metal_mutex_release>
}
 1007108:	0001883a 	nop
 100710c:	e037883a 	mov	sp,fp
 1007110:	dfc00117 	ldw	ra,4(sp)
 1007114:	df000017 	ldw	fp,0(sp)
 1007118:	dec00204 	addi	sp,sp,8
 100711c:	f800283a 	ret

01007120 <mutex_thread>:
#include <mutex.h>

static const int mutex_test_count = 1000;

static void *mutex_thread(void *arg)
{
 1007120:	defffb04 	addi	sp,sp,-20
 1007124:	dfc00415 	stw	ra,16(sp)
 1007128:	df000315 	stw	fp,12(sp)
 100712c:	df000304 	addi	fp,sp,12
 1007130:	e13fff15 	stw	r4,-4(fp)
	metal_mutex_t *l = arg;
 1007134:	e0bfff17 	ldw	r2,-4(fp)
 1007138:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 100713c:	e03ffd15 	stw	zero,-12(fp)
 1007140:	00000906 	br	1007168 <mutex_thread+0x48>
		metal_mutex_acquire(l);
 1007144:	e13ffe17 	ldw	r4,-8(fp)
 1007148:	10070b80 	call	10070b8 <metal_mutex_acquire>
		usleep(1);
 100714c:	01000044 	movi	r4,1
 1007150:	1022e1c0 	call	1022e1c <usleep>
		metal_mutex_release(l);
 1007154:	e13ffe17 	ldw	r4,-8(fp)
 1007158:	10070ec0 	call	10070ec <metal_mutex_release>
static void *mutex_thread(void *arg)
{
	metal_mutex_t *l = arg;
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 100715c:	e0bffd17 	ldw	r2,-12(fp)
 1007160:	10800044 	addi	r2,r2,1
 1007164:	e0bffd15 	stw	r2,-12(fp)
 1007168:	0080fa04 	movi	r2,1000
 100716c:	e0fffd17 	ldw	r3,-12(fp)
 1007170:	18bff416 	blt	r3,r2,1007144 <__alt_data_end+0xff007144>
		metal_mutex_acquire(l);
		usleep(1);
		metal_mutex_release(l);
	}

	return NULL;
 1007174:	0005883a 	mov	r2,zero
}
 1007178:	e037883a 	mov	sp,fp
 100717c:	dfc00117 	ldw	ra,4(sp)
 1007180:	df000017 	ldw	fp,0(sp)
 1007184:	dec00204 	addi	sp,sp,8
 1007188:	f800283a 	ret

0100718c <mutex>:

static int mutex(void)
{
 100718c:	defffb04 	addi	sp,sp,-20
 1007190:	dfc00415 	stw	ra,16(sp)
 1007194:	df000315 	stw	fp,12(sp)
 1007198:	df000304 	addi	fp,sp,12
	metal_mutex_t lock;
	const int threads = 10;
 100719c:	00800284 	movi	r2,10
 10071a0:	e0bffd15 	stw	r2,-12(fp)
	int rc;

	metal_mutex_init(&lock);
 10071a4:	e0bfff04 	addi	r2,fp,-4
 10071a8:	1009883a 	mov	r4,r2
 10071ac:	10070500 	call	1007050 <metal_mutex_init>

	rc = metal_run(threads, mutex_thread, &lock);
 10071b0:	e0bfff04 	addi	r2,fp,-4
 10071b4:	100d883a 	mov	r6,r2
 10071b8:	01404034 	movhi	r5,256
 10071bc:	295c4804 	addi	r5,r5,28960
 10071c0:	e13ffd17 	ldw	r4,-12(fp)
 10071c4:	10074a00 	call	10074a0 <metal_run>
 10071c8:	e0bffe15 	stw	r2,-8(fp)

	metal_mutex_deinit(&lock);
 10071cc:	e0bfff04 	addi	r2,fp,-4
 10071d0:	1009883a 	mov	r4,r2
 10071d4:	10070840 	call	1007084 <metal_mutex_deinit>
	return rc;
 10071d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10071dc:	e037883a 	mov	sp,fp
 10071e0:	dfc00117 	ldw	ra,4(sp)
 10071e4:	df000017 	ldw	fp,0(sp)
 10071e8:	dec00204 	addi	sp,sp,8
 10071ec:	f800283a 	ret

010071f0 <metal_test_mutex>:
METAL_ADD_TEST(mutex);
 10071f0:	defffe04 	addi	sp,sp,-8
 10071f4:	dfc00115 	stw	ra,4(sp)
 10071f8:	df000015 	stw	fp,0(sp)
 10071fc:	d839883a 	mov	fp,sp
 1007200:	010040b4 	movhi	r4,258
 1007204:	211aa104 	addi	r4,r4,27268
 1007208:	1005c280 	call	1005c28 <metal_add_test_case>
 100720c:	0001883a 	nop
 1007210:	e037883a 	mov	sp,fp
 1007214:	dfc00117 	ldw	ra,4(sp)
 1007218:	df000017 	ldw	fp,0(sp)
 100721c:	dec00204 	addi	sp,sp,8
 1007220:	f800283a 	ret

01007224 <metal_machine_cache_flush>:
	}
	return state;
}*/

void metal_machine_cache_flush(void *addr, unsigned int len)
{/*
 1007224:	defffd04 	addi	sp,sp,-12
 1007228:	df000215 	stw	fp,8(sp)
 100722c:	df000204 	addi	fp,sp,8
 1007230:	e13ffe15 	stw	r4,-8(fp)
 1007234:	e17fff15 	stw	r5,-4(fp)
	if (!addr && !len)
		Xil_DCacheFlush();
	else
		Xil_DCacheFlushRange((intptr_t)addr, len);*/
}
 1007238:	0001883a 	nop
 100723c:	e037883a 	mov	sp,fp
 1007240:	df000017 	ldw	fp,0(sp)
 1007244:	dec00104 	addi	sp,sp,4
 1007248:	f800283a 	ret

0100724c <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 100724c:	defffd04 	addi	sp,sp,-12
 1007250:	df000215 	stw	fp,8(sp)
 1007254:	df000204 	addi	fp,sp,8
 1007258:	e13ffe15 	stw	r4,-8(fp)
 100725c:	e17fff15 	stw	r5,-4(fp)
	/*if (!addr && !len)
		Xil_DCacheInvalidate();
	else
		Xil_DCacheInvalidateRange((intptr_t)addr, len);*/
}
 1007260:	0001883a 	nop
 1007264:	e037883a 	mov	sp,fp
 1007268:	df000017 	ldw	fp,0(sp)
 100726c:	dec00104 	addi	sp,sp,4
 1007270:	f800283a 	ret

01007274 <metal_machine_io_mem_map>:
	asm volatile("wfi");
}*/

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
				      size_t size, unsigned int flags)
{
 1007274:	defffb04 	addi	sp,sp,-20
 1007278:	df000415 	stw	fp,16(sp)
 100727c:	df000404 	addi	fp,sp,16
 1007280:	e13ffc15 	stw	r4,-16(fp)
 1007284:	e17ffd15 	stw	r5,-12(fp)
 1007288:	e1bffe15 	stw	r6,-8(fp)
 100728c:	e1ffff15 	stw	r7,-4(fp)

		/* Write translation table entry value to entry address */
		/*Xil_SetTlbAttributes(ttb_addr, flags);
	}*/

	return va;
 1007290:	e0bffc17 	ldw	r2,-16(fp)
}
 1007294:	e037883a 	mov	sp,fp
 1007298:	df000017 	ldw	fp,0(sp)
 100729c:	dec00104 	addi	sp,sp,4
 10072a0:	f800283a 	ret

010072a4 <metal_shmem_open>:

#include <shmem.h>

int metal_shmem_open(const char *name, size_t size,
		     struct metal_io_region **io)
{
 10072a4:	defffb04 	addi	sp,sp,-20
 10072a8:	dfc00415 	stw	ra,16(sp)
 10072ac:	df000315 	stw	fp,12(sp)
 10072b0:	df000304 	addi	fp,sp,12
 10072b4:	e13ffd15 	stw	r4,-12(fp)
 10072b8:	e17ffe15 	stw	r5,-8(fp)
 10072bc:	e1bfff15 	stw	r6,-4(fp)
	return metal_shmem_open_generic(name, size, io);
 10072c0:	e1bfff17 	ldw	r6,-4(fp)
 10072c4:	e17ffe17 	ldw	r5,-8(fp)
 10072c8:	e13ffd17 	ldw	r4,-12(fp)
 10072cc:	10087fc0 	call	10087fc <metal_shmem_open_generic>
}
 10072d0:	e037883a 	mov	sp,fp
 10072d4:	dfc00117 	ldw	ra,4(sp)
 10072d8:	df000017 	ldw	fp,0(sp)
 10072dc:	dec00204 	addi	sp,sp,8
 10072e0:	f800283a 	ret

010072e4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 10072e4:	defffc04 	addi	sp,sp,-16
 10072e8:	dfc00315 	stw	ra,12(sp)
 10072ec:	df000215 	stw	fp,8(sp)
 10072f0:	df000204 	addi	fp,sp,8
 10072f4:	e13fff15 	stw	r4,-4(fp)
	const TickType_t xDelay = usec / portTICK_PERIOD_MS;
 10072f8:	e0bfff17 	ldw	r2,-4(fp)
 10072fc:	e0bffe15 	stw	r2,-8(fp)
	vTaskDelay(xDelay);
 1007300:	e13ffe17 	ldw	r4,-8(fp)
 1007304:	1003bbc0 	call	1003bbc <vTaskDelay>
	return 0;
 1007308:	0005883a 	mov	r2,zero
}
 100730c:	e037883a 	mov	sp,fp
 1007310:	dfc00117 	ldw	ra,4(sp)
 1007314:	df000017 	ldw	fp,0(sp)
 1007318:	dec00204 	addi	sp,sp,8
 100731c:	f800283a 	ret

01007320 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 1007320:	defffd04 	addi	sp,sp,-12
 1007324:	dfc00215 	stw	ra,8(sp)
 1007328:	df000115 	stw	fp,4(sp)
 100732c:	df000104 	addi	fp,sp,4
 1007330:	e13fff15 	stw	r4,-4(fp)
	return __metal_sleep_usec(usec);
 1007334:	e13fff17 	ldw	r4,-4(fp)
 1007338:	10072e40 	call	10072e4 <__metal_sleep_usec>
}
 100733c:	e037883a 	mov	sp,fp
 1007340:	dfc00117 	ldw	ra,4(sp)
 1007344:	df000017 	ldw	fp,0(sp)
 1007348:	dec00204 	addi	sp,sp,8
 100734c:	f800283a 	ret

01007350 <sleep>:
#include <sleep.h>
#include <log.h>
#include <sys.h>

static int sleep(void)
{
 1007350:	defff404 	addi	sp,sp,-48
 1007354:	dfc00b15 	stw	ra,44(sp)
 1007358:	df000a15 	stw	fp,40(sp)
 100735c:	dc400915 	stw	r17,36(sp)
 1007360:	dc000815 	stw	r16,32(sp)
 1007364:	df000a04 	addi	fp,sp,40
	int rc;
	unsigned int usec = 3;
 1007368:	008000c4 	movi	r2,3
 100736c:	e0bff715 	stw	r2,-36(fp)
	unsigned long long tstart, tend, tdelayed;

	tstart = metal_get_timestamp();
 1007370:	10078940 	call	1007894 <metal_get_timestamp>
 1007374:	e0bff815 	stw	r2,-32(fp)
 1007378:	e0fff915 	stw	r3,-28(fp)
	metal_sleep_usec((usec/portTICK_PERIOD_MS));
 100737c:	e13ff717 	ldw	r4,-36(fp)
 1007380:	10073200 	call	1007320 <metal_sleep_usec>
	tend = metal_get_timestamp();
 1007384:	10078940 	call	1007894 <metal_get_timestamp>
 1007388:	e0bffa15 	stw	r2,-24(fp)
 100738c:	e0fffb15 	stw	r3,-20(fp)
	tdelayed = tend - tstart;
 1007390:	e13ffa17 	ldw	r4,-24(fp)
 1007394:	e17ffb17 	ldw	r5,-20(fp)
 1007398:	e1bff817 	ldw	r6,-32(fp)
 100739c:	e1fff917 	ldw	r7,-28(fp)
 10073a0:	2185c83a 	sub	r2,r4,r6
 10073a4:	2091803a 	cmpltu	r8,r4,r2
 10073a8:	29c7c83a 	sub	r3,r5,r7
 10073ac:	1a09c83a 	sub	r4,r3,r8
 10073b0:	2007883a 	mov	r3,r4
 10073b4:	e0bffc15 	stw	r2,-16(fp)
 10073b8:	e0fffd15 	stw	r3,-12(fp)
	if (tdelayed > (usec/portTICK_PERIOD_MS))
 10073bc:	e0bff717 	ldw	r2,-36(fp)
 10073c0:	1021883a 	mov	r16,r2
 10073c4:	0023883a 	mov	r17,zero
 10073c8:	e0bffd17 	ldw	r2,-12(fp)
 10073cc:	88800436 	bltu	r17,r2,10073e0 <sleep+0x90>
 10073d0:	e0bffd17 	ldw	r2,-12(fp)
 10073d4:	1440051e 	bne	r2,r17,10073ec <sleep+0x9c>
 10073d8:	e0bffc17 	ldw	r2,-16(fp)
 10073dc:	8080032e 	bgeu	r16,r2,10073ec <sleep+0x9c>
		rc = -1;
 10073e0:	00bfffc4 	movi	r2,-1
 10073e4:	e0bff615 	stw	r2,-40(fp)
 10073e8:	00000106 	br	10073f0 <sleep+0xa0>
	else
		rc = 0;
 10073ec:	e03ff615 	stw	zero,-40(fp)

	return rc;
 10073f0:	e0bff617 	ldw	r2,-40(fp)
}
 10073f4:	e6fffe04 	addi	sp,fp,-8
 10073f8:	dfc00317 	ldw	ra,12(sp)
 10073fc:	df000217 	ldw	fp,8(sp)
 1007400:	dc400117 	ldw	r17,4(sp)
 1007404:	dc000017 	ldw	r16,0(sp)
 1007408:	dec00404 	addi	sp,sp,16
 100740c:	f800283a 	ret

01007410 <metal_test_sleep>:
METAL_ADD_TEST(sleep);
 1007410:	defffe04 	addi	sp,sp,-8
 1007414:	dfc00115 	stw	ra,4(sp)
 1007418:	df000015 	stw	fp,0(sp)
 100741c:	d839883a 	mov	fp,sp
 1007420:	010040b4 	movhi	r4,258
 1007424:	211aa504 	addi	r4,r4,27284
 1007428:	1005c280 	call	1005c28 <metal_add_test_case>
 100742c:	0001883a 	nop
 1007430:	e037883a 	mov	sp,fp
 1007434:	dfc00117 	ldw	ra,4(sp)
 1007438:	df000017 	ldw	fp,0(sp)
 100743c:	dec00204 	addi	sp,sp,8
 1007440:	f800283a 	ret

01007444 <thread_wrapper>:
		metal_thread_t thread_func;
		void *arg;
	} thread_wrap_arg_t;

static void thread_wrapper(void *arg)
{
 1007444:	defffc04 	addi	sp,sp,-16
 1007448:	dfc00315 	stw	ra,12(sp)
 100744c:	df000215 	stw	fp,8(sp)
 1007450:	df000204 	addi	fp,sp,8
 1007454:	e13fff15 	stw	r4,-4(fp)
	thread_wrap_arg_t *wrap_p = (thread_wrap_arg_t *)arg;
 1007458:	e0bfff17 	ldw	r2,-4(fp)
 100745c:	e0bffe15 	stw	r2,-8(fp)
	(void)wrap_p->thread_func(wrap_p->arg);
 1007460:	e0bffe17 	ldw	r2,-8(fp)
 1007464:	10800017 	ldw	r2,0(r2)
 1007468:	e0fffe17 	ldw	r3,-8(fp)
 100746c:	18c00117 	ldw	r3,4(r3)
 1007470:	1809883a 	mov	r4,r3
 1007474:	103ee83a 	callr	r2
	vPortFree(wrap_p);
 1007478:	e13ffe17 	ldw	r4,-8(fp)
 100747c:	10011840 	call	1001184 <vPortFree>
	vTaskDelete(NULL);
 1007480:	0009883a 	mov	r4,zero
 1007484:	10039e40 	call	10039e4 <vTaskDelete>
}       
 1007488:	0001883a 	nop
 100748c:	e037883a 	mov	sp,fp
 1007490:	dfc00117 	ldw	ra,4(sp)
 1007494:	df000017 	ldw	fp,0(sp)
 1007498:	dec00204 	addi	sp,sp,8
 100749c:	f800283a 	ret

010074a0 <metal_run>:

int metal_run(int threads, metal_thread_t child, void *arg)
{
 10074a0:	defff504 	addi	sp,sp,-44
 10074a4:	dfc00a15 	stw	ra,40(sp)
 10074a8:	df000915 	stw	fp,36(sp)
 10074ac:	dc000815 	stw	r16,32(sp)
 10074b0:	df000904 	addi	fp,sp,36
 10074b4:	e13ffc15 	stw	r4,-16(fp)
 10074b8:	e17ffd15 	stw	r5,-12(fp)
 10074bc:	e1bffe15 	stw	r6,-8(fp)
 10074c0:	d809883a 	mov	r4,sp
 10074c4:	2021883a 	mov	r16,r4
	TaskHandle_t tids[threads];
 10074c8:	e13ffc17 	ldw	r4,-16(fp)
 10074cc:	217fffc4 	addi	r5,r4,-1
 10074d0:	e17ff815 	stw	r5,-32(fp)
 10074d4:	200b883a 	mov	r5,r4
 10074d8:	2817883a 	mov	r11,r5
 10074dc:	0019883a 	mov	r12,zero
 10074e0:	580ad6fa 	srli	r5,r11,27
 10074e4:	6010917a 	slli	r8,r12,5
 10074e8:	2a10b03a 	or	r8,r5,r8
 10074ec:	580e917a 	slli	r7,r11,5
 10074f0:	200b883a 	mov	r5,r4
 10074f4:	2813883a 	mov	r9,r5
 10074f8:	0015883a 	mov	r10,zero
 10074fc:	480ad6fa 	srli	r5,r9,27
 1007500:	5006917a 	slli	r3,r10,5
 1007504:	28c6b03a 	or	r3,r5,r3
 1007508:	4804917a 	slli	r2,r9,5
 100750c:	2005883a 	mov	r2,r4
 1007510:	1085883a 	add	r2,r2,r2
 1007514:	1085883a 	add	r2,r2,r2
 1007518:	108000c4 	addi	r2,r2,3
 100751c:	108000c4 	addi	r2,r2,3
 1007520:	1004d0ba 	srli	r2,r2,2
 1007524:	1085883a 	add	r2,r2,r2
 1007528:	1085883a 	add	r2,r2,r2
 100752c:	d8b7c83a 	sub	sp,sp,r2
 1007530:	d8800104 	addi	r2,sp,4
 1007534:	108000c4 	addi	r2,r2,3
 1007538:	1004d0ba 	srli	r2,r2,2
 100753c:	1085883a 	add	r2,r2,r2
 1007540:	1085883a 	add	r2,r2,r2
 1007544:	e0bff915 	stw	r2,-28(fp)
	int error, ts_created;

	error = metal_run_noblock(threads, child, arg, (void *)tids, &ts_created);
 1007548:	e0fff917 	ldw	r3,-28(fp)
 100754c:	e0bffb04 	addi	r2,fp,-20
 1007550:	d8800015 	stw	r2,0(sp)
 1007554:	180f883a 	mov	r7,r3
 1007558:	e1bffe17 	ldw	r6,-8(fp)
 100755c:	e17ffd17 	ldw	r5,-12(fp)
 1007560:	e13ffc17 	ldw	r4,-16(fp)
 1007564:	10075a00 	call	10075a0 <metal_run_noblock>
 1007568:	e0bffa15 	stw	r2,-24(fp)

	metal_finish_threads(ts_created, (void *)tids);
 100756c:	e0bffb17 	ldw	r2,-20(fp)
 1007570:	e0fff917 	ldw	r3,-28(fp)
 1007574:	180b883a 	mov	r5,r3
 1007578:	1009883a 	mov	r4,r2
 100757c:	10077b40 	call	10077b4 <metal_finish_threads>

	return error;
 1007580:	e0bffa17 	ldw	r2,-24(fp)
 1007584:	8037883a 	mov	sp,r16
}
 1007588:	e6ffff04 	addi	sp,fp,-4
 100758c:	dfc00217 	ldw	ra,8(sp)
 1007590:	df000117 	ldw	fp,4(sp)
 1007594:	dc000017 	ldw	r16,0(sp)
 1007598:	dec00304 	addi	sp,sp,12
 100759c:	f800283a 	ret

010075a0 <metal_run_noblock>:


int metal_run_noblock(int threads, metal_thread_t child,
		     void *arg, void *tids, int *threads_out)
{
 10075a0:	defff004 	addi	sp,sp,-64
 10075a4:	dfc00f15 	stw	ra,60(sp)
 10075a8:	df000e15 	stw	fp,56(sp)
 10075ac:	df000e04 	addi	fp,sp,56
 10075b0:	e13ffc15 	stw	r4,-16(fp)
 10075b4:	e17ffd15 	stw	r5,-12(fp)
 10075b8:	e1bffe15 	stw	r6,-8(fp)
 10075bc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 10075c0:	e0bfff17 	ldw	r2,-4(fp)
 10075c4:	e0bff615 	stw	r2,-40(fp)
	BaseType_t stat = pdPASS;
 10075c8:	00800044 	movi	r2,1
 10075cc:	e0bff515 	stw	r2,-44(fp)
	char tn[15];
	thread_wrap_arg_t *wrap_p;

	if (!tids) {
 10075d0:	e0bfff17 	ldw	r2,-4(fp)
 10075d4:	1000121e 	bne	r2,zero,1007620 <metal_run_noblock+0x80>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 10075d8:	008060f4 	movhi	r2,387
 10075dc:	10a97a04 	addi	r2,r2,-23064
 10075e0:	10800017 	ldw	r2,0(r2)
 10075e4:	108000f0 	cmpltui	r2,r2,3
 10075e8:	10000b1e 	bne	r2,zero,1007618 <metal_run_noblock+0x78>
 10075ec:	008060f4 	movhi	r2,387
 10075f0:	10a97a04 	addi	r2,r2,-23064
 10075f4:	10800117 	ldw	r2,4(r2)
 10075f8:	10000726 	beq	r2,zero,1007618 <metal_run_noblock+0x78>
 10075fc:	008060f4 	movhi	r2,387
 1007600:	10a97a04 	addi	r2,r2,-23064
 1007604:	10800117 	ldw	r2,4(r2)
 1007608:	014040b4 	movhi	r5,258
 100760c:	2954fa04 	addi	r5,r5,21480
 1007610:	010000c4 	movi	r4,3
 1007614:	103ee83a 	callr	r2
		return -EINVAL;
 1007618:	00bffa84 	movi	r2,-22
 100761c:	00006006 	br	10077a0 <metal_run_noblock+0x200>
	}

	for (i = 0; i < threads; i++) {
 1007620:	e03ff415 	stw	zero,-48(fp)
 1007624:	00004f06 	br	1007764 <metal_run_noblock+0x1c4>
		snprintf(tn, metal_dim(tn), "%d", i);
 1007628:	e0bff804 	addi	r2,fp,-32
 100762c:	e1fff417 	ldw	r7,-48(fp)
 1007630:	018040b4 	movhi	r6,258
 1007634:	31950304 	addi	r6,r6,21516
 1007638:	014003c4 	movi	r5,15
 100763c:	1009883a 	mov	r4,r2
 1007640:	1013e040 	call	1013e04 <snprintf>
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
 1007644:	01000204 	movi	r4,8
 1007648:	1000fb00 	call	1000fb0 <pvPortMalloc>
 100764c:	e0bff715 	stw	r2,-36(fp)
		if (!wrap_p) {
 1007650:	e0bff717 	ldw	r2,-36(fp)
 1007654:	1000121e 	bne	r2,zero,10076a0 <metal_run_noblock+0x100>
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
 1007658:	008060f4 	movhi	r2,387
 100765c:	10a97a04 	addi	r2,r2,-23064
 1007660:	10800017 	ldw	r2,0(r2)
 1007664:	108000f0 	cmpltui	r2,r2,3
 1007668:	1000421e 	bne	r2,zero,1007774 <metal_run_noblock+0x1d4>
 100766c:	008060f4 	movhi	r2,387
 1007670:	10a97a04 	addi	r2,r2,-23064
 1007674:	10800117 	ldw	r2,4(r2)
 1007678:	10003e26 	beq	r2,zero,1007774 <metal_run_noblock+0x1d4>
 100767c:	008060f4 	movhi	r2,387
 1007680:	10a97a04 	addi	r2,r2,-23064
 1007684:	10800117 	ldw	r2,4(r2)
 1007688:	e1bff417 	ldw	r6,-48(fp)
 100768c:	014040b4 	movhi	r5,258
 1007690:	29550404 	addi	r5,r5,21520
 1007694:	010000c4 	movi	r4,3
 1007698:	103ee83a 	callr	r2
			break;
 100769c:	00003506 	br	1007774 <metal_run_noblock+0x1d4>
		}
			
		wrap_p->thread_func = child;
 10076a0:	e0bff717 	ldw	r2,-36(fp)
 10076a4:	e0fffd17 	ldw	r3,-12(fp)
 10076a8:	10c00015 	stw	r3,0(r2)
		wrap_p->arg = arg;
 10076ac:	e0bff717 	ldw	r2,-36(fp)
 10076b0:	e0fffe17 	ldw	r3,-8(fp)
 10076b4:	10c00115 	stw	r3,4(r2)
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 10076b8:	e0bff417 	ldw	r2,-48(fp)
				   wrap_p, 2, &tid_p[i]);
 10076bc:	1085883a 	add	r2,r2,r2
 10076c0:	1085883a 	add	r2,r2,r2
 10076c4:	1007883a 	mov	r3,r2
			break;
		}
			
		wrap_p->thread_func = child;
		wrap_p->arg = arg;
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 10076c8:	e0bff617 	ldw	r2,-40(fp)
 10076cc:	10c5883a 	add	r2,r2,r3
 10076d0:	e0fff804 	addi	r3,fp,-32
 10076d4:	d8800115 	stw	r2,4(sp)
 10076d8:	00800084 	movi	r2,2
 10076dc:	d8800015 	stw	r2,0(sp)
 10076e0:	e1fff717 	ldw	r7,-36(fp)
 10076e4:	01802004 	movi	r6,128
 10076e8:	180b883a 	mov	r5,r3
 10076ec:	01004034 	movhi	r4,256
 10076f0:	211d1104 	addi	r4,r4,29764
 10076f4:	100361c0 	call	100361c <xTaskCreate>
 10076f8:	e0bff515 	stw	r2,-44(fp)
				   wrap_p, 2, &tid_p[i]);
		if (stat != pdPASS) {
 10076fc:	e0bff517 	ldw	r2,-44(fp)
 1007700:	10800060 	cmpeqi	r2,r2,1
 1007704:	1000141e 	bne	r2,zero,1007758 <metal_run_noblock+0x1b8>
			metal_log(METAL_LOG_ERROR, "failed to create thread %d\n", i);
 1007708:	008060f4 	movhi	r2,387
 100770c:	10a97a04 	addi	r2,r2,-23064
 1007710:	10800017 	ldw	r2,0(r2)
 1007714:	108000f0 	cmpltui	r2,r2,3
 1007718:	10000c1e 	bne	r2,zero,100774c <metal_run_noblock+0x1ac>
 100771c:	008060f4 	movhi	r2,387
 1007720:	10a97a04 	addi	r2,r2,-23064
 1007724:	10800117 	ldw	r2,4(r2)
 1007728:	10000826 	beq	r2,zero,100774c <metal_run_noblock+0x1ac>
 100772c:	008060f4 	movhi	r2,387
 1007730:	10a97a04 	addi	r2,r2,-23064
 1007734:	10800117 	ldw	r2,4(r2)
 1007738:	e1bff417 	ldw	r6,-48(fp)
 100773c:	014040b4 	movhi	r5,258
 1007740:	29550c04 	addi	r5,r5,21552
 1007744:	010000c4 	movi	r4,3
 1007748:	103ee83a 	callr	r2
			vPortFree(wrap_p);
 100774c:	e13ff717 	ldw	r4,-36(fp)
 1007750:	10011840 	call	1001184 <vPortFree>
			break;
 1007754:	00000806 	br	1007778 <metal_run_noblock+0x1d8>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return -EINVAL;
	}

	for (i = 0; i < threads; i++) {
 1007758:	e0bff417 	ldw	r2,-48(fp)
 100775c:	10800044 	addi	r2,r2,1
 1007760:	e0bff415 	stw	r2,-48(fp)
 1007764:	e0fff417 	ldw	r3,-48(fp)
 1007768:	e0bffc17 	ldw	r2,-16(fp)
 100776c:	18bfae16 	blt	r3,r2,1007628 <__alt_data_end+0xff007628>
 1007770:	00000106 	br	1007778 <metal_run_noblock+0x1d8>
		snprintf(tn, metal_dim(tn), "%d", i);
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
		if (!wrap_p) {
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
			break;
 1007774:	0001883a 	nop
			vPortFree(wrap_p);
			break;
		}
	}

	*threads_out = i;
 1007778:	e0800217 	ldw	r2,8(fp)
 100777c:	e0fff417 	ldw	r3,-48(fp)
 1007780:	10c00015 	stw	r3,0(r2)
	return pdPASS == stat ? 0 : -ENOMEM;
 1007784:	e0bff517 	ldw	r2,-44(fp)
 1007788:	10800058 	cmpnei	r2,r2,1
 100778c:	1000021e 	bne	r2,zero,1007798 <metal_run_noblock+0x1f8>
 1007790:	0005883a 	mov	r2,zero
 1007794:	00000206 	br	10077a0 <metal_run_noblock+0x200>
 1007798:	00bffd04 	movi	r2,-12
 100779c:	0001883a 	nop
}
 10077a0:	e037883a 	mov	sp,fp
 10077a4:	dfc00117 	ldw	ra,4(sp)
 10077a8:	df000017 	ldw	fp,0(sp)
 10077ac:	dec00204 	addi	sp,sp,8
 10077b0:	f800283a 	ret

010077b4 <metal_finish_threads>:


void metal_finish_threads(int threads, void *tids)
{
 10077b4:	defff904 	addi	sp,sp,-28
 10077b8:	dfc00615 	stw	ra,24(sp)
 10077bc:	df000515 	stw	fp,20(sp)
 10077c0:	df000504 	addi	fp,sp,20
 10077c4:	e13ffe15 	stw	r4,-8(fp)
 10077c8:	e17fff15 	stw	r5,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 10077cc:	e0bfff17 	ldw	r2,-4(fp)
 10077d0:	e0bffc15 	stw	r2,-16(fp)

	if (!tids) {
 10077d4:	e0bfff17 	ldw	r2,-4(fp)
 10077d8:	1000111e 	bne	r2,zero,1007820 <metal_finish_threads+0x6c>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 10077dc:	008060f4 	movhi	r2,387
 10077e0:	10a97a04 	addi	r2,r2,-23064
 10077e4:	10800017 	ldw	r2,0(r2)
 10077e8:	108000f0 	cmpltui	r2,r2,3
 10077ec:	1000231e 	bne	r2,zero,100787c <metal_finish_threads+0xc8>
 10077f0:	008060f4 	movhi	r2,387
 10077f4:	10a97a04 	addi	r2,r2,-23064
 10077f8:	10800117 	ldw	r2,4(r2)
 10077fc:	10001f26 	beq	r2,zero,100787c <metal_finish_threads+0xc8>
 1007800:	008060f4 	movhi	r2,387
 1007804:	10a97a04 	addi	r2,r2,-23064
 1007808:	10800117 	ldw	r2,4(r2)
 100780c:	014040b4 	movhi	r5,258
 1007810:	2954fa04 	addi	r5,r5,21480
 1007814:	010000c4 	movi	r4,3
 1007818:	103ee83a 	callr	r2
		return;
 100781c:	00001706 	br	100787c <metal_finish_threads+0xc8>
	}

	for (i = 0; i < threads; i++) {
 1007820:	e03ffb15 	stw	zero,-20(fp)
 1007824:	00001106 	br	100786c <metal_finish_threads+0xb8>
		eTaskState ts;
		do {
			taskYIELD();
 1007828:	003b683a 	trap	0
			ts=eTaskGetState(tid_p[i]);
 100782c:	e0bffb17 	ldw	r2,-20(fp)
 1007830:	1085883a 	add	r2,r2,r2
 1007834:	1085883a 	add	r2,r2,r2
 1007838:	1007883a 	mov	r3,r2
 100783c:	e0bffc17 	ldw	r2,-16(fp)
 1007840:	10c5883a 	add	r2,r2,r3
 1007844:	10800017 	ldw	r2,0(r2)
 1007848:	1009883a 	mov	r4,r2
 100784c:	1003c180 	call	1003c18 <eTaskGetState>
 1007850:	e0bffd15 	stw	r2,-12(fp)
		} while (ts != eDeleted);
 1007854:	e0bffd17 	ldw	r2,-12(fp)
 1007858:	10800118 	cmpnei	r2,r2,4
 100785c:	103ff21e 	bne	r2,zero,1007828 <__alt_data_end+0xff007828>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
	}

	for (i = 0; i < threads; i++) {
 1007860:	e0bffb17 	ldw	r2,-20(fp)
 1007864:	10800044 	addi	r2,r2,1
 1007868:	e0bffb15 	stw	r2,-20(fp)
 100786c:	e0fffb17 	ldw	r3,-20(fp)
 1007870:	e0bffe17 	ldw	r2,-8(fp)
 1007874:	18bfec16 	blt	r3,r2,1007828 <__alt_data_end+0xff007828>
 1007878:	00000106 	br	1007880 <metal_finish_threads+0xcc>
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;

	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
 100787c:	0001883a 	nop
		do {
			taskYIELD();
			ts=eTaskGetState(tid_p[i]);
		} while (ts != eDeleted);
	}
}
 1007880:	e037883a 	mov	sp,fp
 1007884:	dfc00117 	ldw	ra,4(sp)
 1007888:	df000017 	ldw	fp,0(sp)
 100788c:	dec00204 	addi	sp,sp,8
 1007890:	f800283a 	ret

01007894 <metal_get_timestamp>:
#include <task.h>

#include <time.h>

unsigned long long metal_get_timestamp(void)
{
 1007894:	defffc04 	addi	sp,sp,-16
 1007898:	dfc00315 	stw	ra,12(sp)
 100789c:	df000215 	stw	fp,8(sp)
 10078a0:	dc400115 	stw	r17,4(sp)
 10078a4:	dc000015 	stw	r16,0(sp)
 10078a8:	df000204 	addi	fp,sp,8
	return (unsigned long long)xTaskGetTickCount();
 10078ac:	10044e00 	call	10044e0 <xTaskGetTickCount>
 10078b0:	1021883a 	mov	r16,r2
 10078b4:	0023883a 	mov	r17,zero
 10078b8:	8007883a 	mov	r3,r16
 10078bc:	8809883a 	mov	r4,r17
}
 10078c0:	1805883a 	mov	r2,r3
 10078c4:	2007883a 	mov	r3,r4
 10078c8:	e6fffe04 	addi	sp,fp,-8
 10078cc:	dfc00317 	ldw	ra,12(sp)
 10078d0:	df000217 	ldw	fp,8(sp)
 10078d4:	dc400117 	ldw	r17,4(sp)
 10078d8:	dc000017 	ldw	r16,0(sp)
 10078dc:	dec00404 	addi	sp,sp,16
 10078e0:	f800283a 	ret

010078e4 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 10078e4:	defffe04 	addi	sp,sp,-8
 10078e8:	df000115 	stw	fp,4(sp)
 10078ec:	df000104 	addi	fp,sp,4
 10078f0:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 10078f4:	e0bfff17 	ldw	r2,-4(fp)
 10078f8:	e0ffff17 	ldw	r3,-4(fp)
 10078fc:	10c00115 	stw	r3,4(r2)
 1007900:	e0bfff17 	ldw	r2,-4(fp)
 1007904:	10c00117 	ldw	r3,4(r2)
 1007908:	e0bfff17 	ldw	r2,-4(fp)
 100790c:	10c00015 	stw	r3,0(r2)
}
 1007910:	0001883a 	nop
 1007914:	e037883a 	mov	sp,fp
 1007918:	df000017 	ldw	fp,0(sp)
 100791c:	dec00104 	addi	sp,sp,4
 1007920:	f800283a 	ret

01007924 <metal_init>:
#include <string.h>

#include <sys.h>

int metal_init(const struct metal_init_params *params)
{
 1007924:	defffc04 	addi	sp,sp,-16
 1007928:	dfc00315 	stw	ra,12(sp)
 100792c:	df000215 	stw	fp,8(sp)
 1007930:	df000204 	addi	fp,sp,8
 1007934:	e13fff15 	stw	r4,-4(fp)
	int error = 0;
 1007938:	e03ffe15 	stw	zero,-8(fp)

	memset(&_metal, 0, sizeof(_metal));
 100793c:	01800804 	movi	r6,32
 1007940:	000b883a 	mov	r5,zero
 1007944:	010060f4 	movhi	r4,387
 1007948:	21297a04 	addi	r4,r4,-23064
 100794c:	1013b300 	call	1013b30 <memset>

	_metal.common.log_handler   = params->log_handler;
 1007950:	e0bfff17 	ldw	r2,-4(fp)
 1007954:	10c00017 	ldw	r3,0(r2)
 1007958:	008060f4 	movhi	r2,387
 100795c:	10a97a04 	addi	r2,r2,-23064
 1007960:	10c00115 	stw	r3,4(r2)
	_metal.common.log_level     = params->log_level;
 1007964:	e0bfff17 	ldw	r2,-4(fp)
 1007968:	10c00117 	ldw	r3,4(r2)
 100796c:	008060f4 	movhi	r2,387
 1007970:	10a97a04 	addi	r2,r2,-23064
 1007974:	10c00015 	stw	r3,0(r2)

	metal_list_init(&_metal.common.bus_list);
 1007978:	010060f4 	movhi	r4,387
 100797c:	21297c04 	addi	r4,r4,-23056
 1007980:	10078e40 	call	10078e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 1007984:	010060f4 	movhi	r4,387
 1007988:	21297e04 	addi	r4,r4,-23048
 100798c:	10078e40 	call	10078e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 1007990:	010060f4 	movhi	r4,387
 1007994:	21298004 	addi	r4,r4,-23040
 1007998:	10078e40 	call	10078e4 <metal_list_init>

	error = metal_sys_init(params);
 100799c:	e13fff17 	ldw	r4,-4(fp)
 10079a0:	1006c280 	call	1006c28 <metal_sys_init>
 10079a4:	e0bffe15 	stw	r2,-8(fp)
	if (error)
 10079a8:	e0bffe17 	ldw	r2,-8(fp)
 10079ac:	10000226 	beq	r2,zero,10079b8 <metal_init+0x94>
		return error;
 10079b0:	e0bffe17 	ldw	r2,-8(fp)
 10079b4:	00000106 	br	10079bc <metal_init+0x98>

	return error;
 10079b8:	e0bffe17 	ldw	r2,-8(fp)
}
 10079bc:	e037883a 	mov	sp,fp
 10079c0:	dfc00117 	ldw	ra,4(sp)
 10079c4:	df000017 	ldw	fp,0(sp)
 10079c8:	dec00204 	addi	sp,sp,8
 10079cc:	f800283a 	ret

010079d0 <metal_finish>:

void metal_finish(void)
{
 10079d0:	defffe04 	addi	sp,sp,-8
 10079d4:	dfc00115 	stw	ra,4(sp)
 10079d8:	df000015 	stw	fp,0(sp)
 10079dc:	d839883a 	mov	fp,sp
	metal_sys_finish();
 10079e0:	1006c600 	call	1006c60 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 10079e4:	01800804 	movi	r6,32
 10079e8:	000b883a 	mov	r5,zero
 10079ec:	010060f4 	movhi	r4,387
 10079f0:	21297a04 	addi	r4,r4,-23064
 10079f4:	1013b300 	call	1013b30 <memset>
}
 10079f8:	0001883a 	nop
 10079fc:	e037883a 	mov	sp,fp
 1007a00:	dfc00117 	ldw	ra,4(sp)
 1007a04:	df000017 	ldw	fp,0(sp)
 1007a08:	dec00204 	addi	sp,sp,8
 1007a0c:	f800283a 	ret

01007a10 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1007a10:	defffd04 	addi	sp,sp,-12
 1007a14:	df000215 	stw	fp,8(sp)
 1007a18:	df000204 	addi	fp,sp,8
 1007a1c:	e13ffe15 	stw	r4,-8(fp)
 1007a20:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007a24:	e0bffe17 	ldw	r2,-8(fp)
 1007a28:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1007a2c:	10bfffe0 	cmpeqi	r2,r2,-1
 1007a30:	1000091e 	bne	r2,zero,1007a58 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007a34:	e0bffe17 	ldw	r2,-8(fp)
 1007a38:	10800217 	ldw	r2,8(r2)
 1007a3c:	e0ffff17 	ldw	r3,-4(fp)
 1007a40:	1880052e 	bgeu	r3,r2,1007a58 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1007a44:	e0bffe17 	ldw	r2,-8(fp)
 1007a48:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1007a4c:	e0bfff17 	ldw	r2,-4(fp)
 1007a50:	1885883a 	add	r2,r3,r2
 1007a54:	00000106 	br	1007a5c <metal_io_virt+0x4c>
 1007a58:	0005883a 	mov	r2,zero
}
 1007a5c:	e037883a 	mov	sp,fp
 1007a60:	df000017 	ldw	fp,0(sp)
 1007a64:	dec00104 	addi	sp,sp,4
 1007a68:	f800283a 	ret

01007a6c <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 1007a6c:	defff204 	addi	sp,sp,-56
 1007a70:	dfc00d15 	stw	ra,52(sp)
 1007a74:	df000c15 	stw	fp,48(sp)
 1007a78:	df000c04 	addi	fp,sp,48
 1007a7c:	e13ffc15 	stw	r4,-16(fp)
 1007a80:	e17ffd15 	stw	r5,-12(fp)
 1007a84:	e1bffe15 	stw	r6,-8(fp)
 1007a88:	e1ffff15 	stw	r7,-4(fp)
	const struct metal_io_ops nops = {
 1007a8c:	e03ff415 	stw	zero,-48(fp)
 1007a90:	e03ff515 	stw	zero,-44(fp)
 1007a94:	e03ff615 	stw	zero,-40(fp)
 1007a98:	e03ff715 	stw	zero,-36(fp)
 1007a9c:	e03ff815 	stw	zero,-32(fp)
 1007aa0:	e03ff915 	stw	zero,-28(fp)
 1007aa4:	e03ffa15 	stw	zero,-24(fp)
 1007aa8:	e03ffb15 	stw	zero,-20(fp)
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
 1007aac:	e0bffc17 	ldw	r2,-16(fp)
 1007ab0:	e0fffd17 	ldw	r3,-12(fp)
 1007ab4:	10c00015 	stw	r3,0(r2)
	io->physmap = physmap;
 1007ab8:	e0bffc17 	ldw	r2,-16(fp)
 1007abc:	e0fffe17 	ldw	r3,-8(fp)
 1007ac0:	10c00115 	stw	r3,4(r2)
	io->size = size;
 1007ac4:	e0bffc17 	ldw	r2,-16(fp)
 1007ac8:	e0ffff17 	ldw	r3,-4(fp)
 1007acc:	10c00215 	stw	r3,8(r2)
	io->page_shift = page_shift;
 1007ad0:	e0bffc17 	ldw	r2,-16(fp)
 1007ad4:	e0c00217 	ldw	r3,8(fp)
 1007ad8:	10c00315 	stw	r3,12(r2)
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 1007adc:	e0800217 	ldw	r2,8(fp)
 1007ae0:	10800830 	cmpltui	r2,r2,32
 1007ae4:	1000041e 	bne	r2,zero,1007af8 <metal_io_init+0x8c>
		/* avoid overflow */
		io->page_mask = -1UL;
 1007ae8:	e0bffc17 	ldw	r2,-16(fp)
 1007aec:	00ffffc4 	movi	r3,-1
 1007af0:	10c00415 	stw	r3,16(r2)
 1007af4:	00000606 	br	1007b10 <metal_io_init+0xa4>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 1007af8:	00c00044 	movi	r3,1
 1007afc:	e0800217 	ldw	r2,8(fp)
 1007b00:	1884983a 	sll	r2,r3,r2
 1007b04:	10ffffc4 	addi	r3,r2,-1
 1007b08:	e0bffc17 	ldw	r2,-16(fp)
 1007b0c:	10c00415 	stw	r3,16(r2)
	io->mem_flags = mem_flags;
 1007b10:	e0bffc17 	ldw	r2,-16(fp)
 1007b14:	e0c00317 	ldw	r3,12(fp)
 1007b18:	10c00515 	stw	r3,20(r2)
	io->ops = ops ? *ops : nops;
 1007b1c:	e0800417 	ldw	r2,16(fp)
 1007b20:	10001326 	beq	r2,zero,1007b70 <metal_io_init+0x104>
 1007b24:	e0bffc17 	ldw	r2,-16(fp)
 1007b28:	e0c00417 	ldw	r3,16(fp)
 1007b2c:	19000017 	ldw	r4,0(r3)
 1007b30:	11000615 	stw	r4,24(r2)
 1007b34:	19000117 	ldw	r4,4(r3)
 1007b38:	11000715 	stw	r4,28(r2)
 1007b3c:	19000217 	ldw	r4,8(r3)
 1007b40:	11000815 	stw	r4,32(r2)
 1007b44:	19000317 	ldw	r4,12(r3)
 1007b48:	11000915 	stw	r4,36(r2)
 1007b4c:	19000417 	ldw	r4,16(r3)
 1007b50:	11000a15 	stw	r4,40(r2)
 1007b54:	19000517 	ldw	r4,20(r3)
 1007b58:	11000b15 	stw	r4,44(r2)
 1007b5c:	19000617 	ldw	r4,24(r3)
 1007b60:	11000c15 	stw	r4,48(r2)
 1007b64:	18c00717 	ldw	r3,28(r3)
 1007b68:	10c00d15 	stw	r3,52(r2)
 1007b6c:	00001106 	br	1007bb4 <metal_io_init+0x148>
 1007b70:	e0bffc17 	ldw	r2,-16(fp)
 1007b74:	e0fff417 	ldw	r3,-48(fp)
 1007b78:	10c00615 	stw	r3,24(r2)
 1007b7c:	e0fff517 	ldw	r3,-44(fp)
 1007b80:	10c00715 	stw	r3,28(r2)
 1007b84:	e0fff617 	ldw	r3,-40(fp)
 1007b88:	10c00815 	stw	r3,32(r2)
 1007b8c:	e0fff717 	ldw	r3,-36(fp)
 1007b90:	10c00915 	stw	r3,36(r2)
 1007b94:	e0fff817 	ldw	r3,-32(fp)
 1007b98:	10c00a15 	stw	r3,40(r2)
 1007b9c:	e0fff917 	ldw	r3,-28(fp)
 1007ba0:	10c00b15 	stw	r3,44(r2)
 1007ba4:	e0fffa17 	ldw	r3,-24(fp)
 1007ba8:	10c00c15 	stw	r3,48(r2)
 1007bac:	e0fffb17 	ldw	r3,-20(fp)
 1007bb0:	10c00d15 	stw	r3,52(r2)
	metal_sys_io_mem_map(io);
 1007bb4:	e13ffc17 	ldw	r4,-16(fp)
 1007bb8:	1006c940 	call	1006c94 <metal_sys_io_mem_map>
}
 1007bbc:	0001883a 	nop
 1007bc0:	e037883a 	mov	sp,fp
 1007bc4:	dfc00117 	ldw	ra,4(sp)
 1007bc8:	df000017 	ldw	fp,0(sp)
 1007bcc:	dec00204 	addi	sp,sp,8
 1007bd0:	f800283a 	ret

01007bd4 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 1007bd4:	defff604 	addi	sp,sp,-40
 1007bd8:	dfc00915 	stw	ra,36(sp)
 1007bdc:	df000815 	stw	fp,32(sp)
 1007be0:	df000804 	addi	fp,sp,32
 1007be4:	e13ffc15 	stw	r4,-16(fp)
 1007be8:	e17ffd15 	stw	r5,-12(fp)
 1007bec:	e1bffe15 	stw	r6,-8(fp)
 1007bf0:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007bf4:	e17ffd17 	ldw	r5,-12(fp)
 1007bf8:	e13ffc17 	ldw	r4,-16(fp)
 1007bfc:	1007a100 	call	1007a10 <metal_io_virt>
 1007c00:	e0bff915 	stw	r2,-28(fp)
	unsigned char *dest = dst;
 1007c04:	e0bffe17 	ldw	r2,-8(fp)
 1007c08:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 1007c0c:	e0bffc17 	ldw	r2,-16(fp)
 1007c10:	10800217 	ldw	r2,8(r2)
 1007c14:	e0fffd17 	ldw	r3,-12(fp)
 1007c18:	18800236 	bltu	r3,r2,1007c24 <metal_io_block_read+0x50>
		return -ERANGE;
 1007c1c:	00bff784 	movi	r2,-34
 1007c20:	00005406 	br	1007d74 <metal_io_block_read+0x1a0>
	if ((offset + len) > io->size)
 1007c24:	e0ffff17 	ldw	r3,-4(fp)
 1007c28:	e0bffd17 	ldw	r2,-12(fp)
 1007c2c:	1885883a 	add	r2,r3,r2
 1007c30:	e0fffc17 	ldw	r3,-16(fp)
 1007c34:	18c00217 	ldw	r3,8(r3)
 1007c38:	1880052e 	bgeu	r3,r2,1007c50 <metal_io_block_read+0x7c>
		len = io->size - offset;
 1007c3c:	e0bffc17 	ldw	r2,-16(fp)
 1007c40:	10c00217 	ldw	r3,8(r2)
 1007c44:	e0bffd17 	ldw	r2,-12(fp)
 1007c48:	1885c83a 	sub	r2,r3,r2
 1007c4c:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007c50:	e0bfff17 	ldw	r2,-4(fp)
 1007c54:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_read) {
 1007c58:	e0bffc17 	ldw	r2,-16(fp)
 1007c5c:	10800817 	ldw	r2,32(r2)
 1007c60:	10000b26 	beq	r2,zero,1007c90 <metal_io_block_read+0xbc>
		retlen = (*io->ops.block_read)(
 1007c64:	e0bffc17 	ldw	r2,-16(fp)
 1007c68:	10800817 	ldw	r2,32(r2)
 1007c6c:	e0ffff17 	ldw	r3,-4(fp)
 1007c70:	d8c00015 	stw	r3,0(sp)
 1007c74:	01c00144 	movi	r7,5
 1007c78:	e1bffe17 	ldw	r6,-8(fp)
 1007c7c:	e17ffd17 	ldw	r5,-12(fp)
 1007c80:	e13ffc17 	ldw	r4,-16(fp)
 1007c84:	103ee83a 	callr	r2
 1007c88:	e0bffb15 	stw	r2,-20(fp)
 1007c8c:	00003806 	br	1007d70 <metal_io_block_read+0x19c>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 1007c90:	0001b03a 	sync
		while ( len && (
 1007c94:	00000d06 	br	1007ccc <metal_io_block_read+0xf8>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 1007c98:	e0bff917 	ldw	r2,-28(fp)
 1007c9c:	10c00003 	ldbu	r3,0(r2)
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
 1007ca0:	e0bffa17 	ldw	r2,-24(fp)
 1007ca4:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
 1007ca8:	e0bffa17 	ldw	r2,-24(fp)
 1007cac:	10800044 	addi	r2,r2,1
 1007cb0:	e0bffa15 	stw	r2,-24(fp)
			ptr++;
 1007cb4:	e0bff917 	ldw	r2,-28(fp)
 1007cb8:	10800044 	addi	r2,r2,1
 1007cbc:	e0bff915 	stw	r2,-28(fp)
			len--;
 1007cc0:	e0bfff17 	ldw	r2,-4(fp)
 1007cc4:	10bfffc4 	addi	r2,r2,-1
 1007cc8:	e0bfff15 	stw	r2,-4(fp)
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 1007ccc:	e0bfff17 	ldw	r2,-4(fp)
 1007cd0:	10001426 	beq	r2,zero,1007d24 <metal_io_block_read+0x150>
			((uintptr_t)dest % sizeof(int)) ||
 1007cd4:	e0bffa17 	ldw	r2,-24(fp)
 1007cd8:	108000cc 	andi	r2,r2,3
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 1007cdc:	103fee1e 	bne	r2,zero,1007c98 <__alt_data_end+0xff007c98>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
 1007ce0:	e0bff917 	ldw	r2,-28(fp)
 1007ce4:	108000cc 	andi	r2,r2,3
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
 1007ce8:	103feb1e 	bne	r2,zero,1007c98 <__alt_data_end+0xff007c98>
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007cec:	00000d06 	br	1007d24 <metal_io_block_read+0x150>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 1007cf0:	e0bff917 	ldw	r2,-28(fp)
 1007cf4:	10c00017 	ldw	r3,0(r2)
 1007cf8:	e0bffa17 	ldw	r2,-24(fp)
 1007cfc:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007d00:	e0bffa17 	ldw	r2,-24(fp)
 1007d04:	10800104 	addi	r2,r2,4
 1007d08:	e0bffa15 	stw	r2,-24(fp)
					ptr += sizeof(int),
 1007d0c:	e0bff917 	ldw	r2,-28(fp)
 1007d10:	10800104 	addi	r2,r2,4
 1007d14:	e0bff915 	stw	r2,-28(fp)
					len -= sizeof(int))
 1007d18:	e0bfff17 	ldw	r2,-4(fp)
 1007d1c:	10bfff04 	addi	r2,r2,-4
 1007d20:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007d24:	e0bfff17 	ldw	r2,-4(fp)
 1007d28:	10800108 	cmpgei	r2,r2,4
 1007d2c:	103ff01e 	bne	r2,zero,1007cf0 <__alt_data_end+0xff007cf0>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1007d30:	00000d06 	br	1007d68 <metal_io_block_read+0x194>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 1007d34:	e0bff917 	ldw	r2,-28(fp)
 1007d38:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
 1007d3c:	e0bffa17 	ldw	r2,-24(fp)
 1007d40:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1007d44:	e0bffa17 	ldw	r2,-24(fp)
 1007d48:	10800044 	addi	r2,r2,1
 1007d4c:	e0bffa15 	stw	r2,-24(fp)
 1007d50:	e0bff917 	ldw	r2,-28(fp)
 1007d54:	10800044 	addi	r2,r2,1
 1007d58:	e0bff915 	stw	r2,-28(fp)
 1007d5c:	e0bfff17 	ldw	r2,-4(fp)
 1007d60:	10bfffc4 	addi	r2,r2,-1
 1007d64:	e0bfff15 	stw	r2,-4(fp)
 1007d68:	e0bfff17 	ldw	r2,-4(fp)
 1007d6c:	103ff11e 	bne	r2,zero,1007d34 <__alt_data_end+0xff007d34>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
 1007d70:	e0bffb17 	ldw	r2,-20(fp)
}
 1007d74:	e037883a 	mov	sp,fp
 1007d78:	dfc00117 	ldw	ra,4(sp)
 1007d7c:	df000017 	ldw	fp,0(sp)
 1007d80:	dec00204 	addi	sp,sp,8
 1007d84:	f800283a 	ret

01007d88 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 1007d88:	defff604 	addi	sp,sp,-40
 1007d8c:	dfc00915 	stw	ra,36(sp)
 1007d90:	df000815 	stw	fp,32(sp)
 1007d94:	df000804 	addi	fp,sp,32
 1007d98:	e13ffc15 	stw	r4,-16(fp)
 1007d9c:	e17ffd15 	stw	r5,-12(fp)
 1007da0:	e1bffe15 	stw	r6,-8(fp)
 1007da4:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007da8:	e17ffd17 	ldw	r5,-12(fp)
 1007dac:	e13ffc17 	ldw	r4,-16(fp)
 1007db0:	1007a100 	call	1007a10 <metal_io_virt>
 1007db4:	e0bff915 	stw	r2,-28(fp)
	const unsigned char *source = src;
 1007db8:	e0bffe17 	ldw	r2,-8(fp)
 1007dbc:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 1007dc0:	e0bffc17 	ldw	r2,-16(fp)
 1007dc4:	10800217 	ldw	r2,8(r2)
 1007dc8:	e0fffd17 	ldw	r3,-12(fp)
 1007dcc:	18800236 	bltu	r3,r2,1007dd8 <metal_io_block_write+0x50>
		return -ERANGE;
 1007dd0:	00bff784 	movi	r2,-34
 1007dd4:	00005306 	br	1007f24 <metal_io_block_write+0x19c>
	if ((offset + len) > io->size)
 1007dd8:	e0ffff17 	ldw	r3,-4(fp)
 1007ddc:	e0bffd17 	ldw	r2,-12(fp)
 1007de0:	1885883a 	add	r2,r3,r2
 1007de4:	e0fffc17 	ldw	r3,-16(fp)
 1007de8:	18c00217 	ldw	r3,8(r3)
 1007dec:	1880052e 	bgeu	r3,r2,1007e04 <metal_io_block_write+0x7c>
		len = io->size - offset;
 1007df0:	e0bffc17 	ldw	r2,-16(fp)
 1007df4:	10c00217 	ldw	r3,8(r2)
 1007df8:	e0bffd17 	ldw	r2,-12(fp)
 1007dfc:	1885c83a 	sub	r2,r3,r2
 1007e00:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007e04:	e0bfff17 	ldw	r2,-4(fp)
 1007e08:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_write) {
 1007e0c:	e0bffc17 	ldw	r2,-16(fp)
 1007e10:	10800917 	ldw	r2,36(r2)
 1007e14:	10001826 	beq	r2,zero,1007e78 <metal_io_block_write+0xf0>
		retlen = (*io->ops.block_write)(
 1007e18:	e0bffc17 	ldw	r2,-16(fp)
 1007e1c:	10800917 	ldw	r2,36(r2)
 1007e20:	e0ffff17 	ldw	r3,-4(fp)
 1007e24:	d8c00015 	stw	r3,0(sp)
 1007e28:	01c00144 	movi	r7,5
 1007e2c:	e1bffe17 	ldw	r6,-8(fp)
 1007e30:	e17ffd17 	ldw	r5,-12(fp)
 1007e34:	e13ffc17 	ldw	r4,-16(fp)
 1007e38:	103ee83a 	callr	r2
 1007e3c:	e0bffb15 	stw	r2,-20(fp)
 1007e40:	00003706 	br	1007f20 <metal_io_block_write+0x198>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 1007e44:	e0bffa17 	ldw	r2,-24(fp)
 1007e48:	10c00003 	ldbu	r3,0(r2)
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
 1007e4c:	e0bff917 	ldw	r2,-28(fp)
 1007e50:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
 1007e54:	e0bff917 	ldw	r2,-28(fp)
 1007e58:	10800044 	addi	r2,r2,1
 1007e5c:	e0bff915 	stw	r2,-28(fp)
			source++;
 1007e60:	e0bffa17 	ldw	r2,-24(fp)
 1007e64:	10800044 	addi	r2,r2,1
 1007e68:	e0bffa15 	stw	r2,-24(fp)
			len--;
 1007e6c:	e0bfff17 	ldw	r2,-4(fp)
 1007e70:	10bfffc4 	addi	r2,r2,-1
 1007e74:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 1007e78:	e0bfff17 	ldw	r2,-4(fp)
 1007e7c:	10001426 	beq	r2,zero,1007ed0 <metal_io_block_write+0x148>
			((uintptr_t)ptr % sizeof(int)) ||
 1007e80:	e0bff917 	ldw	r2,-28(fp)
 1007e84:	108000cc 	andi	r2,r2,3
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 1007e88:	103fee1e 	bne	r2,zero,1007e44 <__alt_data_end+0xff007e44>
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
 1007e8c:	e0bffa17 	ldw	r2,-24(fp)
 1007e90:	108000cc 	andi	r2,r2,3
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
 1007e94:	103feb1e 	bne	r2,zero,1007e44 <__alt_data_end+0xff007e44>
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007e98:	00000d06 	br	1007ed0 <metal_io_block_write+0x148>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 1007e9c:	e0bffa17 	ldw	r2,-24(fp)
 1007ea0:	10c00017 	ldw	r3,0(r2)
 1007ea4:	e0bff917 	ldw	r2,-28(fp)
 1007ea8:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007eac:	e0bff917 	ldw	r2,-28(fp)
 1007eb0:	10800104 	addi	r2,r2,4
 1007eb4:	e0bff915 	stw	r2,-28(fp)
					source += sizeof(int),
 1007eb8:	e0bffa17 	ldw	r2,-24(fp)
 1007ebc:	10800104 	addi	r2,r2,4
 1007ec0:	e0bffa15 	stw	r2,-24(fp)
					len -= sizeof(int))
 1007ec4:	e0bfff17 	ldw	r2,-4(fp)
 1007ec8:	10bfff04 	addi	r2,r2,-4
 1007ecc:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007ed0:	e0bfff17 	ldw	r2,-4(fp)
 1007ed4:	10800108 	cmpgei	r2,r2,4
 1007ed8:	103ff01e 	bne	r2,zero,1007e9c <__alt_data_end+0xff007e9c>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 1007edc:	00000d06 	br	1007f14 <metal_io_block_write+0x18c>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 1007ee0:	e0bffa17 	ldw	r2,-24(fp)
 1007ee4:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
 1007ee8:	e0bff917 	ldw	r2,-28(fp)
 1007eec:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 1007ef0:	e0bff917 	ldw	r2,-28(fp)
 1007ef4:	10800044 	addi	r2,r2,1
 1007ef8:	e0bff915 	stw	r2,-28(fp)
 1007efc:	e0bffa17 	ldw	r2,-24(fp)
 1007f00:	10800044 	addi	r2,r2,1
 1007f04:	e0bffa15 	stw	r2,-24(fp)
 1007f08:	e0bfff17 	ldw	r2,-4(fp)
 1007f0c:	10bfffc4 	addi	r2,r2,-1
 1007f10:	e0bfff15 	stw	r2,-4(fp)
 1007f14:	e0bfff17 	ldw	r2,-4(fp)
 1007f18:	103ff11e 	bne	r2,zero,1007ee0 <__alt_data_end+0xff007ee0>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
 1007f1c:	0001b03a 	sync
	}
	return retlen;
 1007f20:	e0bffb17 	ldw	r2,-20(fp)
}
 1007f24:	e037883a 	mov	sp,fp
 1007f28:	dfc00117 	ldw	ra,4(sp)
 1007f2c:	df000017 	ldw	fp,0(sp)
 1007f30:	dec00204 	addi	sp,sp,8
 1007f34:	f800283a 	ret

01007f38 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 1007f38:	defff504 	addi	sp,sp,-44
 1007f3c:	dfc00a15 	stw	ra,40(sp)
 1007f40:	df000915 	stw	fp,36(sp)
 1007f44:	df000904 	addi	fp,sp,36
 1007f48:	e13ffc15 	stw	r4,-16(fp)
 1007f4c:	e17ffd15 	stw	r5,-12(fp)
 1007f50:	3005883a 	mov	r2,r6
 1007f54:	e1ffff15 	stw	r7,-4(fp)
 1007f58:	e0bffe05 	stb	r2,-8(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007f5c:	e17ffd17 	ldw	r5,-12(fp)
 1007f60:	e13ffc17 	ldw	r4,-16(fp)
 1007f64:	1007a100 	call	1007a10 <metal_io_virt>
 1007f68:	e0bff815 	stw	r2,-32(fp)
	int retlen = len;
 1007f6c:	e0bfff17 	ldw	r2,-4(fp)
 1007f70:	e0bffb15 	stw	r2,-20(fp)

	if (offset >= io->size)
 1007f74:	e0bffc17 	ldw	r2,-16(fp)
 1007f78:	10800217 	ldw	r2,8(r2)
 1007f7c:	e0fffd17 	ldw	r3,-12(fp)
 1007f80:	18800236 	bltu	r3,r2,1007f8c <metal_io_block_set+0x54>
		return -ERANGE;
 1007f84:	00bff784 	movi	r2,-34
 1007f88:	00005706 	br	10080e8 <metal_io_block_set+0x1b0>
	if ((offset + len) > io->size)
 1007f8c:	e0ffff17 	ldw	r3,-4(fp)
 1007f90:	e0bffd17 	ldw	r2,-12(fp)
 1007f94:	1885883a 	add	r2,r3,r2
 1007f98:	e0fffc17 	ldw	r3,-16(fp)
 1007f9c:	18c00217 	ldw	r3,8(r3)
 1007fa0:	1880052e 	bgeu	r3,r2,1007fb8 <metal_io_block_set+0x80>
		len = io->size - offset;
 1007fa4:	e0bffc17 	ldw	r2,-16(fp)
 1007fa8:	10c00217 	ldw	r3,8(r2)
 1007fac:	e0bffd17 	ldw	r2,-12(fp)
 1007fb0:	1885c83a 	sub	r2,r3,r2
 1007fb4:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007fb8:	e0bfff17 	ldw	r2,-4(fp)
 1007fbc:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_set) {
 1007fc0:	e0bffc17 	ldw	r2,-16(fp)
 1007fc4:	10800a17 	ldw	r2,40(r2)
 1007fc8:	10000b26 	beq	r2,zero,1007ff8 <metal_io_block_set+0xc0>
		(*io->ops.block_set)(
 1007fcc:	e0bffc17 	ldw	r2,-16(fp)
 1007fd0:	10800a17 	ldw	r2,40(r2)
 1007fd4:	e13ffe03 	ldbu	r4,-8(fp)
 1007fd8:	e0ffff17 	ldw	r3,-4(fp)
 1007fdc:	d8c00015 	stw	r3,0(sp)
 1007fe0:	01c00144 	movi	r7,5
 1007fe4:	200d883a 	mov	r6,r4
 1007fe8:	e17ffd17 	ldw	r5,-12(fp)
 1007fec:	e13ffc17 	ldw	r4,-16(fp)
 1007ff0:	103ee83a 	callr	r2
 1007ff4:	00003b06 	br	10080e4 <metal_io_block_set+0x1ac>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 1007ff8:	e0bffe03 	ldbu	r2,-8(fp)
 1007ffc:	e0bff915 	stw	r2,-28(fp)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 1008000:	00800044 	movi	r2,1
 1008004:	e0bffa15 	stw	r2,-24(fp)
 1008008:	00000a06 	br	1008034 <metal_io_block_set+0xfc>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
 100800c:	e0fffe03 	ldbu	r3,-8(fp)
 1008010:	e0bffa17 	ldw	r2,-24(fp)
 1008014:	100490fa 	slli	r2,r2,3
 1008018:	1884983a 	sll	r2,r3,r2
 100801c:	e0fff917 	ldw	r3,-28(fp)
 1008020:	1884b03a 	or	r2,r3,r2
 1008024:	e0bff915 	stw	r2,-28(fp)
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 1008028:	e0bffa17 	ldw	r2,-24(fp)
 100802c:	10800044 	addi	r2,r2,1
 1008030:	e0bffa15 	stw	r2,-24(fp)
 1008034:	e0bffa17 	ldw	r2,-24(fp)
 1008038:	10800130 	cmpltui	r2,r2,4
 100803c:	103ff31e 	bne	r2,zero,100800c <__alt_data_end+0xff00800c>
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008040:	00000906 	br	1008068 <metal_io_block_set+0x130>
			*(unsigned char *)ptr = (unsigned char) value;
 1008044:	e0bff817 	ldw	r2,-32(fp)
 1008048:	e0fffe03 	ldbu	r3,-8(fp)
 100804c:	10c00005 	stb	r3,0(r2)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008050:	e0bff817 	ldw	r2,-32(fp)
 1008054:	10800044 	addi	r2,r2,1
 1008058:	e0bff815 	stw	r2,-32(fp)
 100805c:	e0bfff17 	ldw	r2,-4(fp)
 1008060:	10bfffc4 	addi	r2,r2,-1
 1008064:	e0bfff15 	stw	r2,-4(fp)
 1008068:	e0bfff17 	ldw	r2,-4(fp)
 100806c:	10000d26 	beq	r2,zero,10080a4 <metal_io_block_set+0x16c>
 1008070:	e0bff817 	ldw	r2,-32(fp)
 1008074:	108000cc 	andi	r2,r2,3
 1008078:	103ff21e 	bne	r2,zero,1008044 <__alt_data_end+0xff008044>
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100807c:	00000906 	br	10080a4 <metal_io_block_set+0x16c>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 1008080:	e0bff817 	ldw	r2,-32(fp)
 1008084:	e0fff917 	ldw	r3,-28(fp)
 1008088:	10c00015 	stw	r3,0(r2)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100808c:	e0bff817 	ldw	r2,-32(fp)
 1008090:	10800104 	addi	r2,r2,4
 1008094:	e0bff815 	stw	r2,-32(fp)
						len -= sizeof(int))
 1008098:	e0bfff17 	ldw	r2,-4(fp)
 100809c:	10bfff04 	addi	r2,r2,-4
 10080a0:	e0bfff15 	stw	r2,-4(fp)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10080a4:	e0bfff17 	ldw	r2,-4(fp)
 10080a8:	10800108 	cmpgei	r2,r2,4
 10080ac:	103ff41e 	bne	r2,zero,1008080 <__alt_data_end+0xff008080>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10080b0:	00000906 	br	10080d8 <metal_io_block_set+0x1a0>
			*(unsigned char *)ptr = (unsigned char) value;
 10080b4:	e0bff817 	ldw	r2,-32(fp)
 10080b8:	e0fffe03 	ldbu	r3,-8(fp)
 10080bc:	10c00005 	stb	r3,0(r2)
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10080c0:	e0bff817 	ldw	r2,-32(fp)
 10080c4:	10800044 	addi	r2,r2,1
 10080c8:	e0bff815 	stw	r2,-32(fp)
 10080cc:	e0bfff17 	ldw	r2,-4(fp)
 10080d0:	10bfffc4 	addi	r2,r2,-1
 10080d4:	e0bfff15 	stw	r2,-4(fp)
 10080d8:	e0bfff17 	ldw	r2,-4(fp)
 10080dc:	103ff51e 	bne	r2,zero,10080b4 <__alt_data_end+0xff0080b4>
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
 10080e0:	0001b03a 	sync
	}
	return retlen;
 10080e4:	e0bffb17 	ldw	r2,-20(fp)
}
 10080e8:	e037883a 	mov	sp,fp
 10080ec:	dfc00117 	ldw	ra,4(sp)
 10080f0:	df000017 	ldw	fp,0(sp)
 10080f4:	dec00204 	addi	sp,sp,8
 10080f8:	f800283a 	ret

010080fc <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 10080fc:	defffd04 	addi	sp,sp,-12
 1008100:	df000215 	stw	fp,8(sp)
 1008104:	df000204 	addi	fp,sp,8
 1008108:	e13ffe15 	stw	r4,-8(fp)
 100810c:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008110:	e0bffe17 	ldw	r2,-8(fp)
 1008114:	10c00117 	ldw	r3,4(r2)
 1008118:	e0bfff17 	ldw	r2,-4(fp)
 100811c:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1008120:	e0bfff17 	ldw	r2,-4(fp)
 1008124:	e0fffe17 	ldw	r3,-8(fp)
 1008128:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 100812c:	e0bfff17 	ldw	r2,-4(fp)
 1008130:	10800017 	ldw	r2,0(r2)
 1008134:	e0ffff17 	ldw	r3,-4(fp)
 1008138:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 100813c:	e0bfff17 	ldw	r2,-4(fp)
 1008140:	10800117 	ldw	r2,4(r2)
 1008144:	e0ffff17 	ldw	r3,-4(fp)
 1008148:	10c00015 	stw	r3,0(r2)
}
 100814c:	0001883a 	nop
 1008150:	e037883a 	mov	sp,fp
 1008154:	df000017 	ldw	fp,0(sp)
 1008158:	dec00104 	addi	sp,sp,4
 100815c:	f800283a 	ret

01008160 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1008160:	defffc04 	addi	sp,sp,-16
 1008164:	dfc00315 	stw	ra,12(sp)
 1008168:	df000215 	stw	fp,8(sp)
 100816c:	df000204 	addi	fp,sp,8
 1008170:	e13ffe15 	stw	r4,-8(fp)
 1008174:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1008178:	e17fff17 	ldw	r5,-4(fp)
 100817c:	e13ffe17 	ldw	r4,-8(fp)
 1008180:	10080fc0 	call	10080fc <metal_list_add_before>
}
 1008184:	0001883a 	nop
 1008188:	e037883a 	mov	sp,fp
 100818c:	dfc00117 	ldw	ra,4(sp)
 1008190:	df000017 	ldw	fp,0(sp)
 1008194:	dec00204 	addi	sp,sp,8
 1008198:	f800283a 	ret

0100819c <metal_irq_allocate>:

/** List of registered IRQ controller */
static METAL_DECLARE_LIST(irq_cntrs);

static int metal_irq_allocate(int irq_base, int irq_num)
{
 100819c:	defff704 	addi	sp,sp,-36
 10081a0:	df000815 	stw	fp,32(sp)
 10081a4:	df000804 	addi	fp,sp,32
 10081a8:	e13ffe15 	stw	r4,-8(fp)
 10081ac:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;
	int irq_tocheck = irq_base, irq_end_tocheck;
 10081b0:	e0bffe17 	ldw	r2,-8(fp)
 10081b4:	e0bff915 	stw	r2,-28(fp)

	if (irq_num == 0) {
 10081b8:	e0bfff17 	ldw	r2,-4(fp)
 10081bc:	1000021e 	bne	r2,zero,10081c8 <metal_irq_allocate+0x2c>
		return METAL_IRQ_ANY;
 10081c0:	00bfffc4 	movi	r2,-1
 10081c4:	00002e06 	br	1008280 <metal_irq_allocate+0xe4>
	}
	if (irq_tocheck == METAL_IRQ_ANY) {
 10081c8:	e0bff917 	ldw	r2,-28(fp)
 10081cc:	10bfffd8 	cmpnei	r2,r2,-1
 10081d0:	1000011e 	bne	r2,zero,10081d8 <metal_irq_allocate+0x3c>
		irq_tocheck = 0;
 10081d4:	e03ff915 	stw	zero,-28(fp)
	}
	irq_end_tocheck = irq_tocheck + irq_num;
 10081d8:	e0fff917 	ldw	r3,-28(fp)
 10081dc:	e0bfff17 	ldw	r2,-4(fp)
 10081e0:	1885883a 	add	r2,r3,r2
 10081e4:	e0bffa15 	stw	r2,-24(fp)

	metal_list_for_each(&irq_cntrs, node) {
 10081e8:	d0a00717 	ldw	r2,-32740(gp)
 10081ec:	e0bff815 	stw	r2,-32(fp)
 10081f0:	00001f06 	br	1008270 <metal_irq_allocate+0xd4>
		int cntr_irq_base, cntr_irq_end;

		cntr = metal_container_of(node,
 10081f4:	e0bff817 	ldw	r2,-32(fp)
 10081f8:	10bffb04 	addi	r2,r2,-20
 10081fc:	e0bffb15 	stw	r2,-20(fp)
					  struct metal_irq_controller, node);
		cntr_irq_base = cntr->irq_base;
 1008200:	e0bffb17 	ldw	r2,-20(fp)
 1008204:	10800017 	ldw	r2,0(r2)
 1008208:	e0bffc15 	stw	r2,-16(fp)
		cntr_irq_end = cntr_irq_base + cntr->irq_num;
 100820c:	e0bffb17 	ldw	r2,-20(fp)
 1008210:	10c00117 	ldw	r3,4(r2)
 1008214:	e0bffc17 	ldw	r2,-16(fp)
 1008218:	1885883a 	add	r2,r3,r2
 100821c:	e0bffd15 	stw	r2,-12(fp)
		if (irq_tocheck < cntr_irq_end &&
 1008220:	e0fff917 	ldw	r3,-28(fp)
 1008224:	e0bffd17 	ldw	r2,-12(fp)
 1008228:	18800e0e 	bge	r3,r2,1008264 <metal_irq_allocate+0xc8>
 100822c:	e0bffa17 	ldw	r2,-24(fp)
 1008230:	e0fffc17 	ldw	r3,-16(fp)
 1008234:	18800b0e 	bge	r3,r2,1008264 <metal_irq_allocate+0xc8>
		    irq_end_tocheck > cntr_irq_base) {
			if (irq_base != METAL_IRQ_ANY) {
 1008238:	e0bffe17 	ldw	r2,-8(fp)
 100823c:	10bfffe0 	cmpeqi	r2,r2,-1
 1008240:	1000021e 	bne	r2,zero,100824c <metal_irq_allocate+0xb0>
				/* IRQ has been allocated */
				return METAL_IRQ_ANY;
 1008244:	00bfffc4 	movi	r2,-1
 1008248:	00000d06 	br	1008280 <metal_irq_allocate+0xe4>
			}
			irq_tocheck = cntr_irq_end;
 100824c:	e0bffd17 	ldw	r2,-12(fp)
 1008250:	e0bff915 	stw	r2,-28(fp)
			irq_end_tocheck = irq_tocheck + irq_num;
 1008254:	e0fff917 	ldw	r3,-28(fp)
 1008258:	e0bfff17 	ldw	r2,-4(fp)
 100825c:	1885883a 	add	r2,r3,r2
 1008260:	e0bffa15 	stw	r2,-24(fp)
	if (irq_tocheck == METAL_IRQ_ANY) {
		irq_tocheck = 0;
	}
	irq_end_tocheck = irq_tocheck + irq_num;

	metal_list_for_each(&irq_cntrs, node) {
 1008264:	e0bff817 	ldw	r2,-32(fp)
 1008268:	10800017 	ldw	r2,0(r2)
 100826c:	e0bff815 	stw	r2,-32(fp)
 1008270:	e0fff817 	ldw	r3,-32(fp)
 1008274:	d0a00704 	addi	r2,gp,-32740
 1008278:	18bfde1e 	bne	r3,r2,10081f4 <__alt_data_end+0xff0081f4>
			}
			irq_tocheck = cntr_irq_end;
			irq_end_tocheck = irq_tocheck + irq_num;
		}
	}
	return irq_tocheck;
 100827c:	e0bff917 	ldw	r2,-28(fp)
}
 1008280:	e037883a 	mov	sp,fp
 1008284:	df000017 	ldw	fp,0(sp)
 1008288:	dec00104 	addi	sp,sp,4
 100828c:	f800283a 	ret

01008290 <metal_irq_register_controller>:

int metal_irq_register_controller(struct metal_irq_controller *cntr)
{
 1008290:	defffb04 	addi	sp,sp,-20
 1008294:	dfc00415 	stw	ra,16(sp)
 1008298:	df000315 	stw	fp,12(sp)
 100829c:	df000304 	addi	fp,sp,12
 10082a0:	e13fff15 	stw	r4,-4(fp)
	int irq_base;
	struct metal_list *node;

	if (cntr == NULL) {
 10082a4:	e0bfff17 	ldw	r2,-4(fp)
 10082a8:	1000021e 	bne	r2,zero,10082b4 <metal_irq_register_controller+0x24>
		return -EINVAL;
 10082ac:	00bffa84 	movi	r2,-22
 10082b0:	00002506 	br	1008348 <metal_irq_register_controller+0xb8>
	}
	metal_list_for_each(&irq_cntrs, node) {
 10082b4:	d0a00717 	ldw	r2,-32740(gp)
 10082b8:	e0bffd15 	stw	r2,-12(fp)
 10082bc:	00000906 	br	10082e4 <metal_irq_register_controller+0x54>
		if (node == &cntr->node) {
 10082c0:	e0bfff17 	ldw	r2,-4(fp)
 10082c4:	10c00504 	addi	r3,r2,20
 10082c8:	e0bffd17 	ldw	r2,-12(fp)
 10082cc:	1880021e 	bne	r3,r2,10082d8 <metal_irq_register_controller+0x48>
			return 0;
 10082d0:	0005883a 	mov	r2,zero
 10082d4:	00001c06 	br	1008348 <metal_irq_register_controller+0xb8>
	struct metal_list *node;

	if (cntr == NULL) {
		return -EINVAL;
	}
	metal_list_for_each(&irq_cntrs, node) {
 10082d8:	e0bffd17 	ldw	r2,-12(fp)
 10082dc:	10800017 	ldw	r2,0(r2)
 10082e0:	e0bffd15 	stw	r2,-12(fp)
 10082e4:	e0fffd17 	ldw	r3,-12(fp)
 10082e8:	d0a00704 	addi	r2,gp,-32740
 10082ec:	18bff41e 	bne	r3,r2,10082c0 <__alt_data_end+0xff0082c0>
		}
	}

	/* Allocate IRQ numbers which are not yet used by any IRQ
	 * controllers.*/
	irq_base = metal_irq_allocate(cntr->irq_base , cntr->irq_num);
 10082f0:	e0bfff17 	ldw	r2,-4(fp)
 10082f4:	10c00017 	ldw	r3,0(r2)
 10082f8:	e0bfff17 	ldw	r2,-4(fp)
 10082fc:	10800117 	ldw	r2,4(r2)
 1008300:	100b883a 	mov	r5,r2
 1008304:	1809883a 	mov	r4,r3
 1008308:	100819c0 	call	100819c <metal_irq_allocate>
 100830c:	e0bffe15 	stw	r2,-8(fp)
	if (irq_base == METAL_IRQ_ANY) {
 1008310:	e0bffe17 	ldw	r2,-8(fp)
 1008314:	10bfffd8 	cmpnei	r2,r2,-1
 1008318:	1000021e 	bne	r2,zero,1008324 <metal_irq_register_controller+0x94>
		return -EINVAL;
 100831c:	00bffa84 	movi	r2,-22
 1008320:	00000906 	br	1008348 <metal_irq_register_controller+0xb8>
	}
	cntr->irq_base = irq_base;
 1008324:	e0bfff17 	ldw	r2,-4(fp)
 1008328:	e0fffe17 	ldw	r3,-8(fp)
 100832c:	10c00015 	stw	r3,0(r2)

	metal_list_add_tail(&irq_cntrs, &cntr->node);
 1008330:	e0bfff17 	ldw	r2,-4(fp)
 1008334:	10800504 	addi	r2,r2,20
 1008338:	100b883a 	mov	r5,r2
 100833c:	d1200704 	addi	r4,gp,-32740
 1008340:	10081600 	call	1008160 <metal_list_add_tail>
	return 0;
 1008344:	0005883a 	mov	r2,zero
}
 1008348:	e037883a 	mov	sp,fp
 100834c:	dfc00117 	ldw	ra,4(sp)
 1008350:	df000017 	ldw	fp,0(sp)
 1008354:	dec00204 	addi	sp,sp,8
 1008358:	f800283a 	ret

0100835c <metal_irq_get_controller>:

static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
 100835c:	defffa04 	addi	sp,sp,-24
 1008360:	df000515 	stw	fp,20(sp)
 1008364:	df000504 	addi	fp,sp,20
 1008368:	e13fff15 	stw	r4,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 100836c:	d0a00717 	ldw	r2,-32740(gp)
 1008370:	e0bffb15 	stw	r2,-20(fp)
 1008374:	00001606 	br	10083d0 <metal_irq_get_controller+0x74>
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
		       metal_container_of(node, struct metal_irq_controller,
 1008378:	e0bffb17 	ldw	r2,-20(fp)
 100837c:	10bffb04 	addi	r2,r2,-20
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
 1008380:	e0bffc15 	stw	r2,-16(fp)
		       metal_container_of(node, struct metal_irq_controller,
				          node);
		irq_base = cntr->irq_base;
 1008384:	e0bffc17 	ldw	r2,-16(fp)
 1008388:	10800017 	ldw	r2,0(r2)
 100838c:	e0bffd15 	stw	r2,-12(fp)
		irq_end = irq_base + cntr->irq_num;
 1008390:	e0bffc17 	ldw	r2,-16(fp)
 1008394:	10c00117 	ldw	r3,4(r2)
 1008398:	e0bffd17 	ldw	r2,-12(fp)
 100839c:	1885883a 	add	r2,r3,r2
 10083a0:	e0bffe15 	stw	r2,-8(fp)
		if (irq >= irq_base && irq < irq_end) {
 10083a4:	e0ffff17 	ldw	r3,-4(fp)
 10083a8:	e0bffd17 	ldw	r2,-12(fp)
 10083ac:	18800516 	blt	r3,r2,10083c4 <metal_irq_get_controller+0x68>
 10083b0:	e0ffff17 	ldw	r3,-4(fp)
 10083b4:	e0bffe17 	ldw	r2,-8(fp)
 10083b8:	1880020e 	bge	r3,r2,10083c4 <metal_irq_get_controller+0x68>
		       return cntr;
 10083bc:	e0bffc17 	ldw	r2,-16(fp)
 10083c0:	00000706 	br	10083e0 <metal_irq_get_controller+0x84>
static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 10083c4:	e0bffb17 	ldw	r2,-20(fp)
 10083c8:	10800017 	ldw	r2,0(r2)
 10083cc:	e0bffb15 	stw	r2,-20(fp)
 10083d0:	e0fffb17 	ldw	r3,-20(fp)
 10083d4:	d0a00704 	addi	r2,gp,-32740
 10083d8:	18bfe71e 	bne	r3,r2,1008378 <__alt_data_end+0xff008378>
		irq_end = irq_base + cntr->irq_num;
		if (irq >= irq_base && irq < irq_end) {
		       return cntr;
		}
	}
	return NULL;
 10083dc:	0005883a 	mov	r2,zero
}
 10083e0:	e037883a 	mov	sp,fp
 10083e4:	df000017 	ldw	fp,0(sp)
 10083e8:	dec00104 	addi	sp,sp,4
 10083ec:	f800283a 	ret

010083f0 <_metal_irq_set_enable>:

static void _metal_irq_set_enable(int irq, unsigned int state)
{
 10083f0:	defffb04 	addi	sp,sp,-20
 10083f4:	dfc00415 	stw	ra,16(sp)
 10083f8:	df000315 	stw	fp,12(sp)
 10083fc:	df000304 	addi	fp,sp,12
 1008400:	e13ffe15 	stw	r4,-8(fp)
 1008404:	e17fff15 	stw	r5,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
 1008408:	e13ffe17 	ldw	r4,-8(fp)
 100840c:	100835c0 	call	100835c <metal_irq_get_controller>
 1008410:	e0bffd15 	stw	r2,-12(fp)
	if (cntr == NULL) {
 1008414:	e0bffd17 	ldw	r2,-12(fp)
 1008418:	10000726 	beq	r2,zero,1008438 <_metal_irq_set_enable+0x48>
		return;
	}
	cntr->irq_set_enable(cntr, irq, state);
 100841c:	e0bffd17 	ldw	r2,-12(fp)
 1008420:	10800317 	ldw	r2,12(r2)
 1008424:	e1bfff17 	ldw	r6,-4(fp)
 1008428:	e17ffe17 	ldw	r5,-8(fp)
 100842c:	e13ffd17 	ldw	r4,-12(fp)
 1008430:	103ee83a 	callr	r2
 1008434:	00000106 	br	100843c <_metal_irq_set_enable+0x4c>
{
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
	if (cntr == NULL) {
		return;
 1008438:	0001883a 	nop
	}
	cntr->irq_set_enable(cntr, irq, state);
}
 100843c:	e037883a 	mov	sp,fp
 1008440:	dfc00117 	ldw	ra,4(sp)
 1008444:	df000017 	ldw	fp,0(sp)
 1008448:	dec00204 	addi	sp,sp,8
 100844c:	f800283a 	ret

01008450 <metal_irq_register>:

int metal_irq_register(int irq,
		       metal_irq_handler irq_handler,
		       void *arg)
{
 1008450:	defff904 	addi	sp,sp,-28
 1008454:	dfc00615 	stw	ra,24(sp)
 1008458:	df000515 	stw	fp,20(sp)
 100845c:	df000504 	addi	fp,sp,20
 1008460:	e13ffd15 	stw	r4,-12(fp)
 1008464:	e17ffe15 	stw	r5,-8(fp)
 1008468:	e1bfff15 	stw	r6,-4(fp)
	struct metal_irq_controller *cntr;
	struct metal_irq *irq_data;

	cntr = metal_irq_get_controller(irq);
 100846c:	e13ffd17 	ldw	r4,-12(fp)
 1008470:	100835c0 	call	100835c <metal_irq_get_controller>
 1008474:	e0bffb15 	stw	r2,-20(fp)
	if (cntr == NULL) {
 1008478:	e0bffb17 	ldw	r2,-20(fp)
 100847c:	1000021e 	bne	r2,zero,1008488 <metal_irq_register+0x38>
		return -EINVAL;
 1008480:	00bffa84 	movi	r2,-22
 1008484:	00002006 	br	1008508 <metal_irq_register+0xb8>
	}
	if (cntr->irq_register != NULL) {
 1008488:	e0bffb17 	ldw	r2,-20(fp)
 100848c:	10800417 	ldw	r2,16(r2)
 1008490:	10000826 	beq	r2,zero,10084b4 <metal_irq_register+0x64>
		return cntr->irq_register(cntr, irq, irq_handler, arg);
 1008494:	e0bffb17 	ldw	r2,-20(fp)
 1008498:	10800417 	ldw	r2,16(r2)
 100849c:	e1ffff17 	ldw	r7,-4(fp)
 10084a0:	e1bffe17 	ldw	r6,-8(fp)
 10084a4:	e17ffd17 	ldw	r5,-12(fp)
 10084a8:	e13ffb17 	ldw	r4,-20(fp)
 10084ac:	103ee83a 	callr	r2
 10084b0:	00001506 	br	1008508 <metal_irq_register+0xb8>
	}
	if (cntr->irqs == NULL) {
 10084b4:	e0bffb17 	ldw	r2,-20(fp)
 10084b8:	10800717 	ldw	r2,28(r2)
 10084bc:	1000021e 	bne	r2,zero,10084c8 <metal_irq_register+0x78>
		return -EINVAL;
 10084c0:	00bffa84 	movi	r2,-22
 10084c4:	00001006 	br	1008508 <metal_irq_register+0xb8>
	}
	irq_data = &cntr->irqs[irq - cntr->irq_base];
 10084c8:	e0bffb17 	ldw	r2,-20(fp)
 10084cc:	10c00717 	ldw	r3,28(r2)
 10084d0:	e0bffb17 	ldw	r2,-20(fp)
 10084d4:	10800017 	ldw	r2,0(r2)
 10084d8:	e13ffd17 	ldw	r4,-12(fp)
 10084dc:	2085c83a 	sub	r2,r4,r2
 10084e0:	100490fa 	slli	r2,r2,3
 10084e4:	1885883a 	add	r2,r3,r2
 10084e8:	e0bffc15 	stw	r2,-16(fp)
	irq_data->hd = irq_handler;
 10084ec:	e0bffc17 	ldw	r2,-16(fp)
 10084f0:	e0fffe17 	ldw	r3,-8(fp)
 10084f4:	10c00015 	stw	r3,0(r2)
	irq_data->arg = arg;
 10084f8:	e0bffc17 	ldw	r2,-16(fp)
 10084fc:	e0ffff17 	ldw	r3,-4(fp)
 1008500:	10c00115 	stw	r3,4(r2)
	return 0;
 1008504:	0005883a 	mov	r2,zero
}
 1008508:	e037883a 	mov	sp,fp
 100850c:	dfc00117 	ldw	ra,4(sp)
 1008510:	df000017 	ldw	fp,0(sp)
 1008514:	dec00204 	addi	sp,sp,8
 1008518:	f800283a 	ret

0100851c <metal_irq_enable>:

void metal_irq_enable(unsigned int vector)
{
 100851c:	defffd04 	addi	sp,sp,-12
 1008520:	dfc00215 	stw	ra,8(sp)
 1008524:	df000115 	stw	fp,4(sp)
 1008528:	df000104 	addi	fp,sp,4
 100852c:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_ENABLE);
 1008530:	e0bfff17 	ldw	r2,-4(fp)
 1008534:	01400044 	movi	r5,1
 1008538:	1009883a 	mov	r4,r2
 100853c:	10083f00 	call	10083f0 <_metal_irq_set_enable>
}
 1008540:	0001883a 	nop
 1008544:	e037883a 	mov	sp,fp
 1008548:	dfc00117 	ldw	ra,4(sp)
 100854c:	df000017 	ldw	fp,0(sp)
 1008550:	dec00204 	addi	sp,sp,8
 1008554:	f800283a 	ret

01008558 <metal_irq_disable>:

void metal_irq_disable(unsigned int vector)
{
 1008558:	defffd04 	addi	sp,sp,-12
 100855c:	dfc00215 	stw	ra,8(sp)
 1008560:	df000115 	stw	fp,4(sp)
 1008564:	df000104 	addi	fp,sp,4
 1008568:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_DISABLE);
 100856c:	e0bfff17 	ldw	r2,-4(fp)
 1008570:	000b883a 	mov	r5,zero
 1008574:	1009883a 	mov	r4,r2
 1008578:	10083f00 	call	10083f0 <_metal_irq_set_enable>
}
 100857c:	0001883a 	nop
 1008580:	e037883a 	mov	sp,fp
 1008584:	dfc00117 	ldw	ra,4(sp)
 1008588:	df000017 	ldw	fp,0(sp)
 100858c:	dec00204 	addi	sp,sp,8
 1008590:	f800283a 	ret

01008594 <metal_default_log_handler>:
#include <log.h>
#include <sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 1008594:	defffb04 	addi	sp,sp,-20
 1008598:	df000215 	stw	fp,8(sp)
 100859c:	df000204 	addi	fp,sp,8
 10085a0:	e13ffe15 	stw	r4,-8(fp)
 10085a4:	e17fff15 	stw	r5,-4(fp)
 10085a8:	e1800115 	stw	r6,4(fp)
 10085ac:	e1c00215 	stw	r7,8(fp)
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 10085b0:	0001883a 	nop
 10085b4:	e037883a 	mov	sp,fp
 10085b8:	df000017 	ldw	fp,0(sp)
 10085bc:	dec00304 	addi	sp,sp,12
 10085c0:	f800283a 	ret

010085c4 <metal_set_log_handler>:

void metal_set_log_handler(metal_log_handler handler)
{
 10085c4:	defffe04 	addi	sp,sp,-8
 10085c8:	df000115 	stw	fp,4(sp)
 10085cc:	df000104 	addi	fp,sp,4
 10085d0:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_handler = handler;
 10085d4:	008060f4 	movhi	r2,387
 10085d8:	10a97a04 	addi	r2,r2,-23064
 10085dc:	e0ffff17 	ldw	r3,-4(fp)
 10085e0:	10c00115 	stw	r3,4(r2)
}
 10085e4:	0001883a 	nop
 10085e8:	e037883a 	mov	sp,fp
 10085ec:	df000017 	ldw	fp,0(sp)
 10085f0:	dec00104 	addi	sp,sp,4
 10085f4:	f800283a 	ret

010085f8 <metal_get_log_handler>:

metal_log_handler metal_get_log_handler(void)
{
 10085f8:	deffff04 	addi	sp,sp,-4
 10085fc:	df000015 	stw	fp,0(sp)
 1008600:	d839883a 	mov	fp,sp
	return _metal.common.log_handler;
 1008604:	008060f4 	movhi	r2,387
 1008608:	10a97a04 	addi	r2,r2,-23064
 100860c:	10800117 	ldw	r2,4(r2)
}
 1008610:	e037883a 	mov	sp,fp
 1008614:	df000017 	ldw	fp,0(sp)
 1008618:	dec00104 	addi	sp,sp,4
 100861c:	f800283a 	ret

01008620 <metal_set_log_level>:

void metal_set_log_level(enum metal_log_level level)
{
 1008620:	defffe04 	addi	sp,sp,-8
 1008624:	df000115 	stw	fp,4(sp)
 1008628:	df000104 	addi	fp,sp,4
 100862c:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_level = level;
 1008630:	008060f4 	movhi	r2,387
 1008634:	10a97a04 	addi	r2,r2,-23064
 1008638:	e0ffff17 	ldw	r3,-4(fp)
 100863c:	10c00015 	stw	r3,0(r2)
}
 1008640:	0001883a 	nop
 1008644:	e037883a 	mov	sp,fp
 1008648:	df000017 	ldw	fp,0(sp)
 100864c:	dec00104 	addi	sp,sp,4
 1008650:	f800283a 	ret

01008654 <metal_get_log_level>:

enum metal_log_level metal_get_log_level(void)
{
 1008654:	deffff04 	addi	sp,sp,-4
 1008658:	df000015 	stw	fp,0(sp)
 100865c:	d839883a 	mov	fp,sp
	return _metal.common.log_level;
 1008660:	008060f4 	movhi	r2,387
 1008664:	10a97a04 	addi	r2,r2,-23064
 1008668:	10800017 	ldw	r2,0(r2)
}
 100866c:	e037883a 	mov	sp,fp
 1008670:	df000017 	ldw	fp,0(sp)
 1008674:	dec00104 	addi	sp,sp,4
 1008678:	f800283a 	ret

0100867c <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 100867c:	defffd04 	addi	sp,sp,-12
 1008680:	df000215 	stw	fp,8(sp)
 1008684:	df000204 	addi	fp,sp,8
 1008688:	e13ffe15 	stw	r4,-8(fp)
 100868c:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008690:	e0bffe17 	ldw	r2,-8(fp)
 1008694:	10c00117 	ldw	r3,4(r2)
 1008698:	e0bfff17 	ldw	r2,-4(fp)
 100869c:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 10086a0:	e0bfff17 	ldw	r2,-4(fp)
 10086a4:	e0fffe17 	ldw	r3,-8(fp)
 10086a8:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 10086ac:	e0bfff17 	ldw	r2,-4(fp)
 10086b0:	10800017 	ldw	r2,0(r2)
 10086b4:	e0ffff17 	ldw	r3,-4(fp)
 10086b8:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 10086bc:	e0bfff17 	ldw	r2,-4(fp)
 10086c0:	10800117 	ldw	r2,4(r2)
 10086c4:	e0ffff17 	ldw	r3,-4(fp)
 10086c8:	10c00015 	stw	r3,0(r2)
}
 10086cc:	0001883a 	nop
 10086d0:	e037883a 	mov	sp,fp
 10086d4:	df000017 	ldw	fp,0(sp)
 10086d8:	dec00104 	addi	sp,sp,4
 10086dc:	f800283a 	ret

010086e0 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 10086e0:	defffc04 	addi	sp,sp,-16
 10086e4:	dfc00315 	stw	ra,12(sp)
 10086e8:	df000215 	stw	fp,8(sp)
 10086ec:	df000204 	addi	fp,sp,8
 10086f0:	e13ffe15 	stw	r4,-8(fp)
 10086f4:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 10086f8:	e17fff17 	ldw	r5,-4(fp)
 10086fc:	e13ffe17 	ldw	r4,-8(fp)
 1008700:	100867c0 	call	100867c <metal_list_add_before>
}
 1008704:	0001883a 	nop
 1008708:	e037883a 	mov	sp,fp
 100870c:	dfc00117 	ldw	ra,4(sp)
 1008710:	df000017 	ldw	fp,0(sp)
 1008714:	dec00204 	addi	sp,sp,8
 1008718:	f800283a 	ret

0100871c <metal_io_region_size>:
 *
 * @param[in]	io	I/O region handle.
 * @return	Size of I/O region.
 */
static inline size_t metal_io_region_size(struct metal_io_region *io)
{
 100871c:	defffe04 	addi	sp,sp,-8
 1008720:	df000115 	stw	fp,4(sp)
 1008724:	df000104 	addi	fp,sp,4
 1008728:	e13fff15 	stw	r4,-4(fp)
	return io->size;
 100872c:	e0bfff17 	ldw	r2,-4(fp)
 1008730:	10800217 	ldw	r2,8(r2)
}
 1008734:	e037883a 	mov	sp,fp
 1008738:	df000017 	ldw	fp,0(sp)
 100873c:	dec00104 	addi	sp,sp,4
 1008740:	f800283a 	ret

01008744 <metal_shmem_register_generic>:
#include <shmem.h>
#include <sys.h>
#include <utilities.h>

int metal_shmem_register_generic(struct metal_generic_shmem *shmem)
{
 1008744:	defffd04 	addi	sp,sp,-12
 1008748:	dfc00215 	stw	ra,8(sp)
 100874c:	df000115 	stw	fp,4(sp)
 1008750:	df000104 	addi	fp,sp,4
 1008754:	e13fff15 	stw	r4,-4(fp)
	/* Make sure that we can be found. */
	metal_assert(shmem->name && strlen(shmem->name) != 0);
 1008758:	e0bfff17 	ldw	r2,-4(fp)
 100875c:	10800017 	ldw	r2,0(r2)
 1008760:	10000726 	beq	r2,zero,1008780 <metal_shmem_register_generic+0x3c>
 1008764:	e0bfff17 	ldw	r2,-4(fp)
 1008768:	10800017 	ldw	r2,0(r2)
 100876c:	10800003 	ldbu	r2,0(r2)
 1008770:	10803fcc 	andi	r2,r2,255
 1008774:	1080201c 	xori	r2,r2,128
 1008778:	10bfe004 	addi	r2,r2,-128
 100877c:	1000081e 	bne	r2,zero,10087a0 <metal_shmem_register_generic+0x5c>
 1008780:	01c040b4 	movhi	r7,258
 1008784:	39d51304 	addi	r7,r7,21580
 1008788:	018040b4 	movhi	r6,258
 100878c:	31952704 	addi	r6,r6,21660
 1008790:	01400584 	movi	r5,22
 1008794:	010040b4 	movhi	r4,258
 1008798:	21151d04 	addi	r4,r4,21620
 100879c:	10138940 	call	1013894 <__assert_func>

	/* Statically registered shmem regions cannot have a destructor. */
	metal_assert(!shmem->io.ops.close);
 10087a0:	e0bfff17 	ldw	r2,-4(fp)
 10087a4:	10800c17 	ldw	r2,48(r2)
 10087a8:	10000826 	beq	r2,zero,10087cc <metal_shmem_register_generic+0x88>
 10087ac:	01c040b4 	movhi	r7,258
 10087b0:	39d52104 	addi	r7,r7,21636
 10087b4:	018040b4 	movhi	r6,258
 10087b8:	31952704 	addi	r6,r6,21660
 10087bc:	01400644 	movi	r5,25
 10087c0:	010040b4 	movhi	r4,258
 10087c4:	21151d04 	addi	r4,r4,21620
 10087c8:	10138940 	call	1013894 <__assert_func>

	metal_list_add_tail(&_metal.common.generic_shmem_list,
 10087cc:	e0bfff17 	ldw	r2,-4(fp)
 10087d0:	10800f04 	addi	r2,r2,60
 10087d4:	100b883a 	mov	r5,r2
 10087d8:	010060f4 	movhi	r4,387
 10087dc:	21297e04 	addi	r4,r4,-23048
 10087e0:	10086e00 	call	10086e0 <metal_list_add_tail>
			    &shmem->node);
	return 0;
 10087e4:	0005883a 	mov	r2,zero
}
 10087e8:	e037883a 	mov	sp,fp
 10087ec:	dfc00117 	ldw	ra,4(sp)
 10087f0:	df000017 	ldw	fp,0(sp)
 10087f4:	dec00204 	addi	sp,sp,8
 10087f8:	f800283a 	ret

010087fc <metal_shmem_open_generic>:

int metal_shmem_open_generic(const char *name, size_t size,
			     struct metal_io_region **result)
{
 10087fc:	defff904 	addi	sp,sp,-28
 1008800:	dfc00615 	stw	ra,24(sp)
 1008804:	df000515 	stw	fp,20(sp)
 1008808:	df000504 	addi	fp,sp,20
 100880c:	e13ffd15 	stw	r4,-12(fp)
 1008810:	e17ffe15 	stw	r5,-8(fp)
 1008814:	e1bfff15 	stw	r6,-4(fp)
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008818:	008060f4 	movhi	r2,387
 100881c:	10a97a04 	addi	r2,r2,-23064
 1008820:	10800417 	ldw	r2,16(r2)
 1008824:	e0bffb15 	stw	r2,-20(fp)
 1008828:	00001c06 	br	100889c <metal_shmem_open_generic+0xa0>
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
 100882c:	e0bffb17 	ldw	r2,-20(fp)
 1008830:	10bff104 	addi	r2,r2,-60
 1008834:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(shmem->name, name) != 0)
 1008838:	e0bffc17 	ldw	r2,-16(fp)
 100883c:	10800017 	ldw	r2,0(r2)
 1008840:	e17ffd17 	ldw	r5,-12(fp)
 1008844:	1009883a 	mov	r4,r2
 1008848:	1013ee80 	call	1013ee8 <strcmp>
 100884c:	10000d1e 	bne	r2,zero,1008884 <metal_shmem_open_generic+0x88>
			continue;
		if (size > metal_io_region_size(&shmem->io))
 1008850:	e0bffc17 	ldw	r2,-16(fp)
 1008854:	10800104 	addi	r2,r2,4
 1008858:	1009883a 	mov	r4,r2
 100885c:	100871c0 	call	100871c <metal_io_region_size>
 1008860:	1007883a 	mov	r3,r2
 1008864:	e0bffe17 	ldw	r2,-8(fp)
 1008868:	18800836 	bltu	r3,r2,100888c <metal_shmem_open_generic+0x90>
			continue;
		*result = &shmem->io;
 100886c:	e0bffc17 	ldw	r2,-16(fp)
 1008870:	10c00104 	addi	r3,r2,4
 1008874:	e0bfff17 	ldw	r2,-4(fp)
 1008878:	10c00015 	stw	r3,0(r2)
		return 0;
 100887c:	0005883a 	mov	r2,zero
 1008880:	00000b06 	br	10088b0 <metal_shmem_open_generic+0xb4>
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
		if (strcmp(shmem->name, name) != 0)
			continue;
 1008884:	0001883a 	nop
 1008888:	00000106 	br	1008890 <metal_shmem_open_generic+0x94>
		if (size > metal_io_region_size(&shmem->io))
			continue;
 100888c:	0001883a 	nop
			     struct metal_io_region **result)
{
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008890:	e0bffb17 	ldw	r2,-20(fp)
 1008894:	10800017 	ldw	r2,0(r2)
 1008898:	e0bffb15 	stw	r2,-20(fp)
 100889c:	e0fffb17 	ldw	r3,-20(fp)
 10088a0:	008060f4 	movhi	r2,387
 10088a4:	10a97e04 	addi	r2,r2,-23048
 10088a8:	18bfe01e 	bne	r3,r2,100882c <__alt_data_end+0xff00882c>
			continue;
		*result = &shmem->io;
		return 0;
	}

	return -ENOENT;
 10088ac:	00bfff84 	movi	r2,-2
}
 10088b0:	e037883a 	mov	sp,fp
 10088b4:	dfc00117 	ldw	ra,4(sp)
 10088b8:	df000017 	ldw	fp,0(sp)
 10088bc:	dec00204 	addi	sp,sp,8
 10088c0:	f800283a 	ret

010088c4 <metal_irq_handle>:
 * @param[in] irq IRQ id which will be passed to handler
 * @return IRQ handler status
 */
static inline
int metal_irq_handle(struct metal_irq *irq_data, int irq)
{
 10088c4:	defffc04 	addi	sp,sp,-16
 10088c8:	dfc00315 	stw	ra,12(sp)
 10088cc:	df000215 	stw	fp,8(sp)
 10088d0:	df000204 	addi	fp,sp,8
 10088d4:	e13ffe15 	stw	r4,-8(fp)
 10088d8:	e17fff15 	stw	r5,-4(fp)
	if (irq_data != NULL && irq_data->hd != NULL) {
 10088dc:	e0bffe17 	ldw	r2,-8(fp)
 10088e0:	10000b26 	beq	r2,zero,1008910 <metal_irq_handle+0x4c>
 10088e4:	e0bffe17 	ldw	r2,-8(fp)
 10088e8:	10800017 	ldw	r2,0(r2)
 10088ec:	10000826 	beq	r2,zero,1008910 <metal_irq_handle+0x4c>
		return irq_data->hd(irq, irq_data->arg);
 10088f0:	e0bffe17 	ldw	r2,-8(fp)
 10088f4:	10800017 	ldw	r2,0(r2)
 10088f8:	e0fffe17 	ldw	r3,-8(fp)
 10088fc:	18c00117 	ldw	r3,4(r3)
 1008900:	180b883a 	mov	r5,r3
 1008904:	e13fff17 	ldw	r4,-4(fp)
 1008908:	103ee83a 	callr	r2
 100890c:	00000106 	br	1008914 <metal_irq_handle+0x50>
	} else {
		return METAL_IRQ_NOT_HANDLED;
 1008910:	0005883a 	mov	r2,zero
	}
}
 1008914:	e037883a 	mov	sp,fp
 1008918:	dfc00117 	ldw	ra,4(sp)
 100891c:	df000017 	ldw	fp,0(sp)
 1008920:	dec00204 	addi	sp,sp,8
 1008924:	f800283a 	ret

01008928 <metal_softirq_set_enable>:
static int metal_softirq_avail = 0;
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
 1008928:	defffc04 	addi	sp,sp,-16
 100892c:	df000315 	stw	fp,12(sp)
 1008930:	df000304 	addi	fp,sp,12
 1008934:	e13ffd15 	stw	r4,-12(fp)
 1008938:	e17ffe15 	stw	r5,-8(fp)
 100893c:	e1bfff15 	stw	r6,-4(fp)
	if (irq < cntr->irq_base ||
 1008940:	e0bffd17 	ldw	r2,-12(fp)
 1008944:	10800017 	ldw	r2,0(r2)
 1008948:	e0fffe17 	ldw	r3,-8(fp)
 100894c:	18801e16 	blt	r3,r2,10089c8 <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008950:	e0bffd17 	ldw	r2,-12(fp)
 1008954:	10c00017 	ldw	r3,0(r2)
 1008958:	e0bffd17 	ldw	r2,-12(fp)
 100895c:	10800117 	ldw	r2,4(r2)
 1008960:	1885883a 	add	r2,r3,r2
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
 1008964:	e0fffe17 	ldw	r3,-8(fp)
 1008968:	1880170e 	bge	r3,r2,10089c8 <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 100896c:	e0bffd17 	ldw	r2,-12(fp)
 1008970:	10800017 	ldw	r2,0(r2)
 1008974:	e0fffe17 	ldw	r3,-8(fp)
 1008978:	1885c83a 	sub	r2,r3,r2
 100897c:	e0bffe15 	stw	r2,-8(fp)
	if (enable ==  METAL_IRQ_ENABLE) {
 1008980:	e0bfff17 	ldw	r2,-4(fp)
 1008984:	10800058 	cmpnei	r2,r2,1
 1008988:	1000081e 	bne	r2,zero,10089ac <metal_softirq_set_enable+0x84>
		atomic_store(&metal_softirq_enabled[irq], 1);
 100898c:	008060f4 	movhi	r2,387
 1008990:	10a96004 	addi	r2,r2,-23168
 1008994:	e0fffe17 	ldw	r3,-8(fp)
 1008998:	10c5883a 	add	r2,r2,r3
 100899c:	00c00044 	movi	r3,1
 10089a0:	10c00005 	stb	r3,0(r2)
 10089a4:	0001b03a 	sync
 10089a8:	00000806 	br	10089cc <metal_softirq_set_enable+0xa4>
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
 10089ac:	008060f4 	movhi	r2,387
 10089b0:	10a96004 	addi	r2,r2,-23168
 10089b4:	e0fffe17 	ldw	r3,-8(fp)
 10089b8:	10c5883a 	add	r2,r2,r3
 10089bc:	10000005 	stb	zero,0(r2)
 10089c0:	0001b03a 	sync
 10089c4:	00000106 	br	10089cc <metal_softirq_set_enable+0xa4>
static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 10089c8:	0001883a 	nop
	if (enable ==  METAL_IRQ_ENABLE) {
		atomic_store(&metal_softirq_enabled[irq], 1);
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
	}
}
 10089cc:	e037883a 	mov	sp,fp
 10089d0:	df000017 	ldw	fp,0(sp)
 10089d4:	dec00104 	addi	sp,sp,4
 10089d8:	f800283a 	ret

010089dc <metal_softirq_set>:
				    NULL,
				    metal_softirq_set_enable, NULL,
				    metal_softirqs)

void metal_softirq_set(int irq)
{
 10089dc:	defffd04 	addi	sp,sp,-12
 10089e0:	df000215 	stw	fp,8(sp)
 10089e4:	df000204 	addi	fp,sp,8
 10089e8:	e13fff15 	stw	r4,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;
 10089ec:	008040b4 	movhi	r2,258
 10089f0:	109aa904 	addi	r2,r2,27300
 10089f4:	e0bffe15 	stw	r2,-8(fp)

	if (irq < cntr->irq_base ||
 10089f8:	e0bffe17 	ldw	r2,-8(fp)
 10089fc:	10800017 	ldw	r2,0(r2)
 1008a00:	e0ffff17 	ldw	r3,-4(fp)
 1008a04:	18801416 	blt	r3,r2,1008a58 <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008a08:	e0bffe17 	ldw	r2,-8(fp)
 1008a0c:	10c00017 	ldw	r3,0(r2)
 1008a10:	e0bffe17 	ldw	r2,-8(fp)
 1008a14:	10800117 	ldw	r2,4(r2)
 1008a18:	1885883a 	add	r2,r3,r2
{
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
 1008a1c:	e0ffff17 	ldw	r3,-4(fp)
 1008a20:	18800d0e 	bge	r3,r2,1008a58 <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 1008a24:	e0bffe17 	ldw	r2,-8(fp)
 1008a28:	10800017 	ldw	r2,0(r2)
 1008a2c:	e0ffff17 	ldw	r3,-4(fp)
 1008a30:	1885c83a 	sub	r2,r3,r2
 1008a34:	e0bfff15 	stw	r2,-4(fp)
	atomic_store(&metal_softirq_pending[irq], 1);
 1008a38:	008060f4 	movhi	r2,387
 1008a3c:	10a95004 	addi	r2,r2,-23232
 1008a40:	e0ffff17 	ldw	r3,-4(fp)
 1008a44:	10c5883a 	add	r2,r2,r3
 1008a48:	00c00044 	movi	r3,1
 1008a4c:	10c00005 	stb	r3,0(r2)
 1008a50:	0001b03a 	sync
 1008a54:	00000106 	br	1008a5c <metal_softirq_set+0x80>

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 1008a58:	0001883a 	nop
	}

	irq -= cntr->irq_base;
	atomic_store(&metal_softirq_pending[irq], 1);
}
 1008a5c:	e037883a 	mov	sp,fp
 1008a60:	df000017 	ldw	fp,0(sp)
 1008a64:	dec00104 	addi	sp,sp,4
 1008a68:	f800283a 	ret

01008a6c <metal_softirq_init>:

int metal_softirq_init()
{
 1008a6c:	defffe04 	addi	sp,sp,-8
 1008a70:	dfc00115 	stw	ra,4(sp)
 1008a74:	df000015 	stw	fp,0(sp)
 1008a78:	d839883a 	mov	fp,sp
	return metal_irq_register_controller(&metal_softirq_cntr);
 1008a7c:	010040b4 	movhi	r4,258
 1008a80:	211aa904 	addi	r4,r4,27300
 1008a84:	10082900 	call	1008290 <metal_irq_register_controller>
}
 1008a88:	e037883a 	mov	sp,fp
 1008a8c:	dfc00117 	ldw	ra,4(sp)
 1008a90:	df000017 	ldw	fp,0(sp)
 1008a94:	dec00204 	addi	sp,sp,8
 1008a98:	f800283a 	ret

01008a9c <metal_softirq_allocate>:

int metal_softirq_allocate(int num)
{
 1008a9c:	defffc04 	addi	sp,sp,-16
 1008aa0:	dfc00315 	stw	ra,12(sp)
 1008aa4:	df000215 	stw	fp,8(sp)
 1008aa8:	df000204 	addi	fp,sp,8
 1008aac:	e13fff15 	stw	r4,-4(fp)
	int irq_base;

	if ((metal_softirq_avail + num) >= metal_softirq_num) {
 1008ab0:	d0e72817 	ldw	r3,-25440(gp)
 1008ab4:	e0bfff17 	ldw	r2,-4(fp)
 1008ab8:	1887883a 	add	r3,r3,r2
 1008abc:	00801004 	movi	r2,64
 1008ac0:	18801316 	blt	r3,r2,1008b10 <metal_softirq_allocate+0x74>
		metal_log(METAL_LOG_ERROR, "No %d available soft irqs.\r\n",
 1008ac4:	008060f4 	movhi	r2,387
 1008ac8:	10a97a04 	addi	r2,r2,-23064
 1008acc:	10800017 	ldw	r2,0(r2)
 1008ad0:	108000f0 	cmpltui	r2,r2,3
 1008ad4:	10000c1e 	bne	r2,zero,1008b08 <metal_softirq_allocate+0x6c>
 1008ad8:	008060f4 	movhi	r2,387
 1008adc:	10a97a04 	addi	r2,r2,-23064
 1008ae0:	10800117 	ldw	r2,4(r2)
 1008ae4:	10000826 	beq	r2,zero,1008b08 <metal_softirq_allocate+0x6c>
 1008ae8:	008060f4 	movhi	r2,387
 1008aec:	10a97a04 	addi	r2,r2,-23064
 1008af0:	10800117 	ldw	r2,4(r2)
 1008af4:	e1bfff17 	ldw	r6,-4(fp)
 1008af8:	014040b4 	movhi	r5,258
 1008afc:	29552f04 	addi	r5,r5,21692
 1008b00:	010000c4 	movi	r4,3
 1008b04:	103ee83a 	callr	r2
			  num);
		return -EINVAL;
 1008b08:	00bffa84 	movi	r2,-22
 1008b0c:	00000d06 	br	1008b44 <metal_softirq_allocate+0xa8>
	}
	irq_base = metal_softirq_avail;
 1008b10:	d0a72817 	ldw	r2,-25440(gp)
 1008b14:	e0bffe15 	stw	r2,-8(fp)
	irq_base += metal_softirq_cntr.irq_base;
 1008b18:	008040b4 	movhi	r2,258
 1008b1c:	109aa904 	addi	r2,r2,27300
 1008b20:	10800017 	ldw	r2,0(r2)
 1008b24:	e0fffe17 	ldw	r3,-8(fp)
 1008b28:	1885883a 	add	r2,r3,r2
 1008b2c:	e0bffe15 	stw	r2,-8(fp)
	metal_softirq_avail += num;
 1008b30:	d0e72817 	ldw	r3,-25440(gp)
 1008b34:	e0bfff17 	ldw	r2,-4(fp)
 1008b38:	1885883a 	add	r2,r3,r2
 1008b3c:	d0a72815 	stw	r2,-25440(gp)
	return irq_base;
 1008b40:	e0bffe17 	ldw	r2,-8(fp)
}
 1008b44:	e037883a 	mov	sp,fp
 1008b48:	dfc00117 	ldw	ra,4(sp)
 1008b4c:	df000017 	ldw	fp,0(sp)
 1008b50:	dec00204 	addi	sp,sp,8
 1008b54:	f800283a 	ret

01008b58 <metal_softirq_dispatch>:

void metal_softirq_dispatch()
{
 1008b58:	defff804 	addi	sp,sp,-32
 1008b5c:	dfc00715 	stw	ra,28(sp)
 1008b60:	df000615 	stw	fp,24(sp)
 1008b64:	df000604 	addi	fp,sp,24
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 1008b68:	e03ffa15 	stw	zero,-24(fp)
 1008b6c:	00003d06 	br	1008c64 <metal_softirq_dispatch+0x10c>
		struct metal_irq *irq;
		char is_pending = 1;
 1008b70:	00800044 	movi	r2,1
 1008b74:	e0bfff05 	stb	r2,-4(fp)

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
 1008b78:	0001b03a 	sync
 1008b7c:	008060f4 	movhi	r2,387
 1008b80:	10a96004 	addi	r2,r2,-23168
 1008b84:	e0fffa17 	ldw	r3,-24(fp)
 1008b88:	10c5883a 	add	r2,r2,r3
 1008b8c:	10800003 	ldbu	r2,0(r2)
 1008b90:	10803fcc 	andi	r2,r2,255
 1008b94:	1080201c 	xori	r2,r2,128
 1008b98:	10bfe004 	addi	r2,r2,-128
 1008b9c:	10002e26 	beq	r2,zero,1008c58 <metal_softirq_dispatch+0x100>
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
 1008ba0:	e0fffa17 	ldw	r3,-24(fp)
 1008ba4:	008060f4 	movhi	r2,387
 1008ba8:	10a95004 	addi	r2,r2,-23232
 1008bac:	1885883a 	add	r2,r3,r2
 1008bb0:	e0bffb15 	stw	r2,-20(fp)
 1008bb4:	e0bfff04 	addi	r2,fp,-4
 1008bb8:	e0bffc15 	stw	r2,-16(fp)
 1008bbc:	e0bffc17 	ldw	r2,-16(fp)
 1008bc0:	10800003 	ldbu	r2,0(r2)
 1008bc4:	e0bffd05 	stb	r2,-12(fp)
 1008bc8:	e0bffb17 	ldw	r2,-20(fp)
 1008bcc:	10800003 	ldbu	r2,0(r2)
 1008bd0:	10c03fcc 	andi	r3,r2,255
 1008bd4:	18c0201c 	xori	r3,r3,128
 1008bd8:	18ffe004 	addi	r3,r3,-128
 1008bdc:	e0bffd07 	ldb	r2,-12(fp)
 1008be0:	1880041e 	bne	r3,r2,1008bf4 <metal_softirq_dispatch+0x9c>
 1008be4:	e0bffb17 	ldw	r2,-20(fp)
 1008be8:	10000005 	stb	zero,0(r2)
 1008bec:	0005883a 	mov	r2,zero
 1008bf0:	00000206 	br	1008bfc <metal_softirq_dispatch+0xa4>
 1008bf4:	e0bffb17 	ldw	r2,-20(fp)
 1008bf8:	10800003 	ldbu	r2,0(r2)
 1008bfc:	e0bffd45 	stb	r2,-11(fp)
 1008c00:	e0bffc17 	ldw	r2,-16(fp)
 1008c04:	e0fffd43 	ldbu	r3,-11(fp)
 1008c08:	10c00005 	stb	r3,0(r2)
 1008c0c:	e0fffd47 	ldb	r3,-11(fp)
 1008c10:	e0bffd07 	ldb	r2,-12(fp)
 1008c14:	1885003a 	cmpeq	r2,r3,r2
 1008c18:	10803fcc 	andi	r2,r2,255

	for (i = 0; i < metal_softirq_num; i++) {
		struct metal_irq *irq;
		char is_pending = 1;

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
 1008c1c:	10000e26 	beq	r2,zero,1008c58 <metal_softirq_dispatch+0x100>
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
						   &is_pending, 0)) {
			irq = &metal_softirqs[i];
 1008c20:	e0bffa17 	ldw	r2,-24(fp)
 1008c24:	100690fa 	slli	r3,r2,3
 1008c28:	008060f4 	movhi	r2,387
 1008c2c:	10a8d004 	addi	r2,r2,-23744
 1008c30:	1885883a 	add	r2,r3,r2
 1008c34:	e0bffe15 	stw	r2,-8(fp)
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
 1008c38:	008040b4 	movhi	r2,258
 1008c3c:	109aa904 	addi	r2,r2,27300
 1008c40:	10c00017 	ldw	r3,0(r2)

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
						   &is_pending, 0)) {
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
 1008c44:	e0bffa17 	ldw	r2,-24(fp)
 1008c48:	1885883a 	add	r2,r3,r2
 1008c4c:	100b883a 	mov	r5,r2
 1008c50:	e13ffe17 	ldw	r4,-8(fp)
 1008c54:	10088c40 	call	10088c4 <metal_irq_handle>

void metal_softirq_dispatch()
{
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 1008c58:	e0bffa17 	ldw	r2,-24(fp)
 1008c5c:	10800044 	addi	r2,r2,1
 1008c60:	e0bffa15 	stw	r2,-24(fp)
 1008c64:	00801004 	movi	r2,64
 1008c68:	e0fffa17 	ldw	r3,-24(fp)
 1008c6c:	18bfc016 	blt	r3,r2,1008b70 <__alt_data_end+0xff008b70>
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
		}
	}
}
 1008c70:	0001883a 	nop
 1008c74:	e037883a 	mov	sp,fp
 1008c78:	dfc00117 	ldw	ra,4(sp)
 1008c7c:	df000017 	ldw	fp,0(sp)
 1008c80:	dec00204 	addi	sp,sp,8
 1008c84:	f800283a 	ret

01008c88 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1008c88:	defffe04 	addi	sp,sp,-8
 1008c8c:	df000115 	stw	fp,4(sp)
 1008c90:	df000104 	addi	fp,sp,4
 1008c94:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1008c98:	e0bfff17 	ldw	r2,-4(fp)
 1008c9c:	10000015 	stw	zero,0(r2)
 1008ca0:	0001b03a 	sync
}
 1008ca4:	0001883a 	nop
 1008ca8:	e037883a 	mov	sp,fp
 1008cac:	df000017 	ldw	fp,0(sp)
 1008cb0:	dec00104 	addi	sp,sp,4
 1008cb4:	f800283a 	ret

01008cb8 <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1008cb8:	defffe04 	addi	sp,sp,-8
 1008cbc:	df000115 	stw	fp,4(sp)
 1008cc0:	df000104 	addi	fp,sp,4
 1008cc4:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1008cc8:	0001883a 	nop
 1008ccc:	e037883a 	mov	sp,fp
 1008cd0:	df000017 	ldw	fp,0(sp)
 1008cd4:	dec00104 	addi	sp,sp,4
 1008cd8:	f800283a 	ret

01008cdc <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1008cdc:	defffe04 	addi	sp,sp,-8
 1008ce0:	df000115 	stw	fp,4(sp)
 1008ce4:	df000104 	addi	fp,sp,4
 1008ce8:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1008cec:	0001883a 	nop
 1008cf0:	e0bfff17 	ldw	r2,-4(fp)
 1008cf4:	00c00044 	movi	r3,1
 1008cf8:	10c00015 	stw	r3,0(r2)
 1008cfc:	e0bfff17 	ldw	r2,-4(fp)
 1008d00:	10800017 	ldw	r2,0(r2)
 1008d04:	103ffa1e 	bne	r2,zero,1008cf0 <__alt_data_end+0xff008cf0>
		;
	}
}
 1008d08:	0001883a 	nop
 1008d0c:	e037883a 	mov	sp,fp
 1008d10:	df000017 	ldw	fp,0(sp)
 1008d14:	dec00104 	addi	sp,sp,4
 1008d18:	f800283a 	ret

01008d1c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1008d1c:	defffe04 	addi	sp,sp,-8
 1008d20:	df000115 	stw	fp,4(sp)
 1008d24:	df000104 	addi	fp,sp,4
 1008d28:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1008d2c:	e0bfff17 	ldw	r2,-4(fp)
 1008d30:	0001b03a 	sync
 1008d34:	10000015 	stw	zero,0(r2)
}
 1008d38:	0001883a 	nop
 1008d3c:	e037883a 	mov	sp,fp
 1008d40:	df000017 	ldw	fp,0(sp)
 1008d44:	dec00104 	addi	sp,sp,4
 1008d48:	f800283a 	ret

01008d4c <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1008d4c:	defffd04 	addi	sp,sp,-12
 1008d50:	dfc00215 	stw	ra,8(sp)
 1008d54:	df000115 	stw	fp,4(sp)
 1008d58:	df000104 	addi	fp,sp,4
 1008d5c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1008d60:	e13fff17 	ldw	r4,-4(fp)
 1008d64:	1008c880 	call	1008c88 <__metal_mutex_init>
}
 1008d68:	0001883a 	nop
 1008d6c:	e037883a 	mov	sp,fp
 1008d70:	dfc00117 	ldw	ra,4(sp)
 1008d74:	df000017 	ldw	fp,0(sp)
 1008d78:	dec00204 	addi	sp,sp,8
 1008d7c:	f800283a 	ret

01008d80 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1008d80:	defffd04 	addi	sp,sp,-12
 1008d84:	dfc00215 	stw	ra,8(sp)
 1008d88:	df000115 	stw	fp,4(sp)
 1008d8c:	df000104 	addi	fp,sp,4
 1008d90:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1008d94:	e13fff17 	ldw	r4,-4(fp)
 1008d98:	1008cb80 	call	1008cb8 <__metal_mutex_deinit>
}
 1008d9c:	0001883a 	nop
 1008da0:	e037883a 	mov	sp,fp
 1008da4:	dfc00117 	ldw	ra,4(sp)
 1008da8:	df000017 	ldw	fp,0(sp)
 1008dac:	dec00204 	addi	sp,sp,8
 1008db0:	f800283a 	ret

01008db4 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 1008db4:	defffd04 	addi	sp,sp,-12
 1008db8:	dfc00215 	stw	ra,8(sp)
 1008dbc:	df000115 	stw	fp,4(sp)
 1008dc0:	df000104 	addi	fp,sp,4
 1008dc4:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 1008dc8:	e13fff17 	ldw	r4,-4(fp)
 1008dcc:	1008cdc0 	call	1008cdc <__metal_mutex_acquire>
}
 1008dd0:	0001883a 	nop
 1008dd4:	e037883a 	mov	sp,fp
 1008dd8:	dfc00117 	ldw	ra,4(sp)
 1008ddc:	df000017 	ldw	fp,0(sp)
 1008de0:	dec00204 	addi	sp,sp,8
 1008de4:	f800283a 	ret

01008de8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1008de8:	defffd04 	addi	sp,sp,-12
 1008dec:	dfc00215 	stw	ra,8(sp)
 1008df0:	df000115 	stw	fp,4(sp)
 1008df4:	df000104 	addi	fp,sp,4
 1008df8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1008dfc:	e13fff17 	ldw	r4,-4(fp)
 1008e00:	1008d1c0 	call	1008d1c <__metal_mutex_release>
}
 1008e04:	0001883a 	nop
 1008e08:	e037883a 	mov	sp,fp
 1008e0c:	dfc00117 	ldw	ra,4(sp)
 1008e10:	df000017 	ldw	fp,0(sp)
 1008e14:	dec00204 	addi	sp,sp,8
 1008e18:	f800283a 	ret

01008e1c <metal_spinlock_init>:
/**
 * @brief	Initialize a libmetal spinlock.
 * @param[in]	slock	Spinlock to initialize.
 */
static inline void metal_spinlock_init(struct metal_spinlock *slock)
{
 1008e1c:	defffe04 	addi	sp,sp,-8
 1008e20:	df000115 	stw	fp,4(sp)
 1008e24:	df000104 	addi	fp,sp,4
 1008e28:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&slock->v);
 1008e2c:	e0bfff17 	ldw	r2,-4(fp)
 1008e30:	0001b03a 	sync
 1008e34:	10000015 	stw	zero,0(r2)
}
 1008e38:	0001883a 	nop
 1008e3c:	e037883a 	mov	sp,fp
 1008e40:	df000017 	ldw	fp,0(sp)
 1008e44:	dec00104 	addi	sp,sp,4
 1008e48:	f800283a 	ret

01008e4c <metal_spinlock_acquire>:
 * @brief	Acquire a spinlock.
 * @param[in]	slock   Spinlock to acquire.
 * @see metal_spinlock_release
 */
static inline void metal_spinlock_acquire(struct metal_spinlock *slock)
{
 1008e4c:	defffe04 	addi	sp,sp,-8
 1008e50:	df000115 	stw	fp,4(sp)
 1008e54:	df000104 	addi	fp,sp,4
 1008e58:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&slock->v)) {
 1008e5c:	0001883a 	nop
 1008e60:	e0bfff17 	ldw	r2,-4(fp)
 1008e64:	00c00044 	movi	r3,1
 1008e68:	10c00015 	stw	r3,0(r2)
 1008e6c:	e0bfff17 	ldw	r2,-4(fp)
 1008e70:	10800017 	ldw	r2,0(r2)
 1008e74:	103ffa1e 	bne	r2,zero,1008e60 <__alt_data_end+0xff008e60>
		metal_cpu_yield();
	}
}
 1008e78:	0001883a 	nop
 1008e7c:	e037883a 	mov	sp,fp
 1008e80:	df000017 	ldw	fp,0(sp)
 1008e84:	dec00104 	addi	sp,sp,4
 1008e88:	f800283a 	ret

01008e8c <metal_spinlock_release>:
 * @brief	Release a previously acquired spinlock.
 * @param[in]	slock	Spinlock to release.
 * @see metal_spinlock_acquire
 */
static inline void metal_spinlock_release(struct metal_spinlock *slock)
{
 1008e8c:	defffe04 	addi	sp,sp,-8
 1008e90:	df000115 	stw	fp,4(sp)
 1008e94:	df000104 	addi	fp,sp,4
 1008e98:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&slock->v);
 1008e9c:	e0bfff17 	ldw	r2,-4(fp)
 1008ea0:	0001b03a 	sync
 1008ea4:	10000015 	stw	zero,0(r2)
}
 1008ea8:	0001883a 	nop
 1008eac:	e037883a 	mov	sp,fp
 1008eb0:	df000017 	ldw	fp,0(sp)
 1008eb4:	dec00104 	addi	sp,sp,4
 1008eb8:	f800283a 	ret

01008ebc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 1008ebc:	defff904 	addi	sp,sp,-28
 1008ec0:	dfc00615 	stw	ra,24(sp)
 1008ec4:	df000515 	stw	fp,20(sp)
 1008ec8:	df000504 	addi	fp,sp,20
 1008ecc:	e13ffd15 	stw	r4,-12(fp)
 1008ed0:	e17ffe15 	stw	r5,-8(fp)
 1008ed4:	e1bfff15 	stw	r6,-4(fp)
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 1008ed8:	e0bffd17 	ldw	r2,-12(fp)
 1008edc:	10800a17 	ldw	r2,40(r2)
 1008ee0:	10bfffd8 	cmpnei	r2,r2,-1
 1008ee4:	1000021e 	bne	r2,zero,1008ef0 <rpmsg_send+0x34>
		return RPMSG_ERR_ADDR;
 1008ee8:	00be0a44 	movi	r2,-2007
 1008eec:	00000d06 	br	1008f24 <rpmsg_send+0x68>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 1008ef0:	e0bffd17 	ldw	r2,-12(fp)
 1008ef4:	10c00917 	ldw	r3,36(r2)
 1008ef8:	e0bffd17 	ldw	r2,-12(fp)
 1008efc:	11000a17 	ldw	r4,40(r2)
 1008f00:	00800044 	movi	r2,1
 1008f04:	d8800115 	stw	r2,4(sp)
 1008f08:	e0bfff17 	ldw	r2,-4(fp)
 1008f0c:	d8800015 	stw	r2,0(sp)
 1008f10:	e1fffe17 	ldw	r7,-8(fp)
 1008f14:	200d883a 	mov	r6,r4
 1008f18:	180b883a 	mov	r5,r3
 1008f1c:	e13ffd17 	ldw	r4,-12(fp)
 1008f20:	10103c00 	call	10103c0 <rpmsg_send_offchannel_raw>
					 len, true);
}
 1008f24:	e037883a 	mov	sp,fp
 1008f28:	dfc00117 	ldw	ra,4(sp)
 1008f2c:	df000017 	ldw	fp,0(sp)
 1008f30:	dec00204 	addi	sp,sp,8
 1008f34:	f800283a 	ret

01008f38 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 1008f38:	defffe04 	addi	sp,sp,-8
 1008f3c:	df000115 	stw	fp,4(sp)
 1008f40:	df000104 	addi	fp,sp,4
 1008f44:	e13fff15 	stw	r4,-4(fp)
	return (ept->dest_addr != RPMSG_ADDR_ANY) &&
 1008f48:	e0bfff17 	ldw	r2,-4(fp)
 1008f4c:	10800a17 	ldw	r2,40(r2)
 1008f50:	10bfffe0 	cmpeqi	r2,r2,-1
 1008f54:	1000061e 	bne	r2,zero,1008f70 <is_rpmsg_ept_ready+0x38>
		(ept->addr != RPMSG_ADDR_ANY);
 1008f58:	e0bfff17 	ldw	r2,-4(fp)
 1008f5c:	10800917 	ldw	r2,36(r2)
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
	return (ept->dest_addr != RPMSG_ADDR_ANY) &&
 1008f60:	10bfffe0 	cmpeqi	r2,r2,-1
 1008f64:	1000021e 	bne	r2,zero,1008f70 <is_rpmsg_ept_ready+0x38>
 1008f68:	00800044 	movi	r2,1
 1008f6c:	00000106 	br	1008f74 <is_rpmsg_ept_ready+0x3c>
 1008f70:	0005883a 	mov	r2,zero
		(ept->addr != RPMSG_ADDR_ANY);
}
 1008f74:	e037883a 	mov	sp,fp
 1008f78:	df000017 	ldw	fp,0(sp)
 1008f7c:	dec00104 	addi	sp,sp,4
 1008f80:	f800283a 	ret

01008f84 <rpmsg_rpc_ept_cb>:
 *************************************************************************/
static struct rpmsg_rpc_data *rpmsg_default_rpc;

static int rpmsg_rpc_ept_cb(struct rpmsg_endpoint *ept, void *data, size_t len,
			    uint32_t src, void *priv)
{
 1008f84:	defff804 	addi	sp,sp,-32
 1008f88:	dfc00715 	stw	ra,28(sp)
 1008f8c:	df000615 	stw	fp,24(sp)
 1008f90:	df000604 	addi	fp,sp,24
 1008f94:	e13ffc15 	stw	r4,-16(fp)
 1008f98:	e17ffd15 	stw	r5,-12(fp)
 1008f9c:	e1bffe15 	stw	r6,-8(fp)
 1008fa0:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_rpc_syscall *syscall;

	(void)priv;
	(void)src;

	if (data != NULL && ept != NULL) {
 1008fa4:	e0bffd17 	ldw	r2,-12(fp)
 1008fa8:	10002c26 	beq	r2,zero,100905c <rpmsg_rpc_ept_cb+0xd8>
 1008fac:	e0bffc17 	ldw	r2,-16(fp)
 1008fb0:	10002a26 	beq	r2,zero,100905c <rpmsg_rpc_ept_cb+0xd8>
		syscall = data;
 1008fb4:	e0bffd17 	ldw	r2,-12(fp)
 1008fb8:	e0bffa15 	stw	r2,-24(fp)
		if (syscall->id == TERM_SYSCALL_ID) {
 1008fbc:	e0bffa17 	ldw	r2,-24(fp)
 1008fc0:	10800017 	ldw	r2,0(r2)
 1008fc4:	10800198 	cmpnei	r2,r2,6
 1008fc8:	1000031e 	bne	r2,zero,1008fd8 <rpmsg_rpc_ept_cb+0x54>
			rpmsg_destroy_ept(ept);
 1008fcc:	e13ffc17 	ldw	r4,-16(fp)
 1008fd0:	10108b00 	call	10108b0 <rpmsg_destroy_ept>
 1008fd4:	00002106 	br	100905c <rpmsg_rpc_ept_cb+0xd8>
		} else {
			struct rpmsg_rpc_data *rpc;

			rpc = metal_container_of(ept,
 1008fd8:	e0bffc17 	ldw	r2,-16(fp)
 1008fdc:	e0bffb15 	stw	r2,-20(fp)
						 struct rpmsg_rpc_data,
						 ept);
			metal_spinlock_acquire(&rpc->buflock);
 1008fe0:	e0bffb17 	ldw	r2,-20(fp)
 1008fe4:	10801804 	addi	r2,r2,96
 1008fe8:	1009883a 	mov	r4,r2
 1008fec:	1008e4c0 	call	1008e4c <metal_spinlock_acquire>
			if (rpc->respbuf != NULL && rpc->respbuf_len != 0) {
 1008ff0:	e0bffb17 	ldw	r2,-20(fp)
 1008ff4:	10801217 	ldw	r2,72(r2)
 1008ff8:	10001026 	beq	r2,zero,100903c <rpmsg_rpc_ept_cb+0xb8>
 1008ffc:	e0bffb17 	ldw	r2,-20(fp)
 1009000:	10801317 	ldw	r2,76(r2)
 1009004:	10000d26 	beq	r2,zero,100903c <rpmsg_rpc_ept_cb+0xb8>
				if (len > rpc->respbuf_len)
 1009008:	e0bffb17 	ldw	r2,-20(fp)
 100900c:	10c01317 	ldw	r3,76(r2)
 1009010:	e0bffe17 	ldw	r2,-8(fp)
 1009014:	1880032e 	bgeu	r3,r2,1009024 <rpmsg_rpc_ept_cb+0xa0>
					len = rpc->respbuf_len;
 1009018:	e0bffb17 	ldw	r2,-20(fp)
 100901c:	10801317 	ldw	r2,76(r2)
 1009020:	e0bffe15 	stw	r2,-8(fp)
				memcpy(rpc->respbuf, data, len);
 1009024:	e0bffb17 	ldw	r2,-20(fp)
 1009028:	10801217 	ldw	r2,72(r2)
 100902c:	e1bffe17 	ldw	r6,-8(fp)
 1009030:	e17ffd17 	ldw	r5,-12(fp)
 1009034:	1009883a 	mov	r4,r2
 1009038:	10139e80 	call	10139e8 <memcpy>
			}
			atomic_flag_clear(&rpc->nacked);
 100903c:	e0bffb17 	ldw	r2,-20(fp)
 1009040:	10801104 	addi	r2,r2,68
 1009044:	0001b03a 	sync
 1009048:	10000015 	stw	zero,0(r2)
			metal_spinlock_release(&rpc->buflock);
 100904c:	e0bffb17 	ldw	r2,-20(fp)
 1009050:	10801804 	addi	r2,r2,96
 1009054:	1009883a 	mov	r4,r2
 1009058:	1008e8c0 	call	1008e8c <metal_spinlock_release>
		}
	}

	return RPMSG_SUCCESS;
 100905c:	0005883a 	mov	r2,zero
}
 1009060:	e037883a 	mov	sp,fp
 1009064:	dfc00117 	ldw	ra,4(sp)
 1009068:	df000017 	ldw	fp,0(sp)
 100906c:	dec00204 	addi	sp,sp,8
 1009070:	f800283a 	ret

01009074 <rpmsg_service_unbind>:

static void rpmsg_service_unbind(struct rpmsg_endpoint *ept)
{
 1009074:	defffc04 	addi	sp,sp,-16
 1009078:	dfc00315 	stw	ra,12(sp)
 100907c:	df000215 	stw	fp,8(sp)
 1009080:	df000204 	addi	fp,sp,8
 1009084:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_rpc_data *rpc;

	rpc = metal_container_of(ept, struct rpmsg_rpc_data, ept);
 1009088:	e0bfff17 	ldw	r2,-4(fp)
 100908c:	e0bffe15 	stw	r2,-8(fp)
	rpc->ept_destroyed = 1;
 1009090:	e0bffe17 	ldw	r2,-8(fp)
 1009094:	00c00044 	movi	r3,1
 1009098:	10c01015 	stw	r3,64(r2)
	rpmsg_destroy_ept(ept);
 100909c:	e13fff17 	ldw	r4,-4(fp)
 10090a0:	10108b00 	call	10108b0 <rpmsg_destroy_ept>
	atomic_flag_clear(&rpc->nacked);
 10090a4:	e0bffe17 	ldw	r2,-8(fp)
 10090a8:	10801104 	addi	r2,r2,68
 10090ac:	0001b03a 	sync
 10090b0:	10000015 	stw	zero,0(r2)
	if (rpc->shutdown_cb)
 10090b4:	e0bffe17 	ldw	r2,-8(fp)
 10090b8:	10801617 	ldw	r2,88(r2)
 10090bc:	10000426 	beq	r2,zero,10090d0 <rpmsg_service_unbind+0x5c>
		rpc->shutdown_cb(rpc);
 10090c0:	e0bffe17 	ldw	r2,-8(fp)
 10090c4:	10801617 	ldw	r2,88(r2)
 10090c8:	e13ffe17 	ldw	r4,-8(fp)
 10090cc:	103ee83a 	callr	r2
}
 10090d0:	0001883a 	nop
 10090d4:	e037883a 	mov	sp,fp
 10090d8:	dfc00117 	ldw	ra,4(sp)
 10090dc:	df000017 	ldw	fp,0(sp)
 10090e0:	dec00204 	addi	sp,sp,8
 10090e4:	f800283a 	ret

010090e8 <rpmsg_rpc_init>:
		   struct rpmsg_device *rdev,
		   const char *ept_name, uint32_t ept_addr,
		   uint32_t ept_raddr,
		   void *poll_arg, rpmsg_rpc_poll poll,
		   rpmsg_rpc_shutdown_cb shutdown_cb)
{
 10090e8:	defff604 	addi	sp,sp,-40
 10090ec:	dfc00915 	stw	ra,36(sp)
 10090f0:	df000815 	stw	fp,32(sp)
 10090f4:	df000804 	addi	fp,sp,32
 10090f8:	e13ffc15 	stw	r4,-16(fp)
 10090fc:	e17ffd15 	stw	r5,-12(fp)
 1009100:	e1bffe15 	stw	r6,-8(fp)
 1009104:	e1ffff15 	stw	r7,-4(fp)
	int ret;

	if (rpc == NULL || rdev == NULL)
 1009108:	e0bffc17 	ldw	r2,-16(fp)
 100910c:	10000226 	beq	r2,zero,1009118 <rpmsg_rpc_init+0x30>
 1009110:	e0bffd17 	ldw	r2,-12(fp)
 1009114:	1000021e 	bne	r2,zero,1009120 <rpmsg_rpc_init+0x38>
		return -EINVAL;
 1009118:	00bffa84 	movi	r2,-22
 100911c:	00003f06 	br	100921c <rpmsg_rpc_init+0x134>
	metal_spinlock_init(&rpc->buflock);
 1009120:	e0bffc17 	ldw	r2,-16(fp)
 1009124:	10801804 	addi	r2,r2,96
 1009128:	1009883a 	mov	r4,r2
 100912c:	1008e1c0 	call	1008e1c <metal_spinlock_init>
	metal_mutex_init(&rpc->lock);
 1009130:	e0bffc17 	ldw	r2,-16(fp)
 1009134:	10801704 	addi	r2,r2,92
 1009138:	1009883a 	mov	r4,r2
 100913c:	1008d4c0 	call	1008d4c <metal_mutex_init>
	rpc->shutdown_cb = shutdown_cb;
 1009140:	e0bffc17 	ldw	r2,-16(fp)
 1009144:	e0c00517 	ldw	r3,20(fp)
 1009148:	10c01615 	stw	r3,88(r2)
	rpc->poll_arg = poll_arg;
 100914c:	e0bffc17 	ldw	r2,-16(fp)
 1009150:	e0c00317 	ldw	r3,12(fp)
 1009154:	10c01515 	stw	r3,84(r2)
	rpc->poll = poll;
 1009158:	e0bffc17 	ldw	r2,-16(fp)
 100915c:	e0c00417 	ldw	r3,16(fp)
 1009160:	10c01415 	stw	r3,80(r2)
	rpc->ept_destroyed = 0;
 1009164:	e0bffc17 	ldw	r2,-16(fp)
 1009168:	10001015 	stw	zero,64(r2)
	rpc->respbuf = NULL;
 100916c:	e0bffc17 	ldw	r2,-16(fp)
 1009170:	10001215 	stw	zero,72(r2)
	rpc->respbuf_len = 0;
 1009174:	e0bffc17 	ldw	r2,-16(fp)
 1009178:	10001315 	stw	zero,76(r2)
	atomic_init(&rpc->nacked, 1);
 100917c:	e0bffc17 	ldw	r2,-16(fp)
 1009180:	00c00044 	movi	r3,1
 1009184:	10c01115 	stw	r3,68(r2)
	ret = rpmsg_create_ept(&rpc->ept, rdev,
 1009188:	e0fffc17 	ldw	r3,-16(fp)
 100918c:	00804074 	movhi	r2,257
 1009190:	10a41d04 	addi	r2,r2,-28556
 1009194:	d8800215 	stw	r2,8(sp)
 1009198:	00804074 	movhi	r2,257
 100919c:	10a3e104 	addi	r2,r2,-28796
 10091a0:	d8800115 	stw	r2,4(sp)
 10091a4:	e0800217 	ldw	r2,8(fp)
 10091a8:	d8800015 	stw	r2,0(sp)
 10091ac:	e1ffff17 	ldw	r7,-4(fp)
 10091b0:	e1bffe17 	ldw	r6,-8(fp)
 10091b4:	e17ffd17 	ldw	r5,-12(fp)
 10091b8:	1809883a 	mov	r4,r3
 10091bc:	10107280 	call	1010728 <rpmsg_create_ept>
 10091c0:	e0bffb15 	stw	r2,-20(fp)
			       ept_name, ept_addr, ept_raddr,
			       rpmsg_rpc_ept_cb, rpmsg_service_unbind);
	if (ret != 0) {
 10091c4:	e0bffb17 	ldw	r2,-20(fp)
 10091c8:	10000f26 	beq	r2,zero,1009208 <rpmsg_rpc_init+0x120>
		metal_mutex_release(&rpc->lock);
 10091cc:	e0bffc17 	ldw	r2,-16(fp)
 10091d0:	10801704 	addi	r2,r2,92
 10091d4:	1009883a 	mov	r4,r2
 10091d8:	1008de80 	call	1008de8 <metal_mutex_release>
		return -EINVAL;
 10091dc:	00bffa84 	movi	r2,-22
 10091e0:	00000e06 	br	100921c <rpmsg_rpc_init+0x134>
	}
	while (!is_rpmsg_ept_ready(&rpc->ept)) {
		if (rpc->poll)
 10091e4:	e0bffc17 	ldw	r2,-16(fp)
 10091e8:	10801417 	ldw	r2,80(r2)
 10091ec:	10000626 	beq	r2,zero,1009208 <rpmsg_rpc_init+0x120>
			rpc->poll(rpc->poll_arg);
 10091f0:	e0bffc17 	ldw	r2,-16(fp)
 10091f4:	10801417 	ldw	r2,80(r2)
 10091f8:	e0fffc17 	ldw	r3,-16(fp)
 10091fc:	18c01517 	ldw	r3,84(r3)
 1009200:	1809883a 	mov	r4,r3
 1009204:	103ee83a 	callr	r2
			       rpmsg_rpc_ept_cb, rpmsg_service_unbind);
	if (ret != 0) {
		metal_mutex_release(&rpc->lock);
		return -EINVAL;
	}
	while (!is_rpmsg_ept_ready(&rpc->ept)) {
 1009208:	e0bffc17 	ldw	r2,-16(fp)
 100920c:	1009883a 	mov	r4,r2
 1009210:	1008f380 	call	1008f38 <is_rpmsg_ept_ready>
 1009214:	103ff326 	beq	r2,zero,10091e4 <__alt_data_end+0xff0091e4>
		if (rpc->poll)
			rpc->poll(rpc->poll_arg);
	}
	return 0;
 1009218:	0005883a 	mov	r2,zero
}
 100921c:	e037883a 	mov	sp,fp
 1009220:	dfc00117 	ldw	ra,4(sp)
 1009224:	df000017 	ldw	fp,0(sp)
 1009228:	dec00204 	addi	sp,sp,8
 100922c:	f800283a 	ret

01009230 <rpmsg_rpc_release>:

void rpmsg_rpc_release(struct rpmsg_rpc_data *rpc)
{
 1009230:	defffd04 	addi	sp,sp,-12
 1009234:	dfc00215 	stw	ra,8(sp)
 1009238:	df000115 	stw	fp,4(sp)
 100923c:	df000104 	addi	fp,sp,4
 1009240:	e13fff15 	stw	r4,-4(fp)
	if (rpc == NULL)
 1009244:	e0bfff17 	ldw	r2,-4(fp)
 1009248:	10002026 	beq	r2,zero,10092cc <rpmsg_rpc_release+0x9c>
		return;
	if (rpc->ept_destroyed == 0)
 100924c:	e0bfff17 	ldw	r2,-4(fp)
 1009250:	10801017 	ldw	r2,64(r2)
 1009254:	1000031e 	bne	r2,zero,1009264 <rpmsg_rpc_release+0x34>
		rpmsg_destroy_ept(&rpc->ept);
 1009258:	e0bfff17 	ldw	r2,-4(fp)
 100925c:	1009883a 	mov	r4,r2
 1009260:	10108b00 	call	10108b0 <rpmsg_destroy_ept>
	metal_mutex_acquire(&rpc->lock);
 1009264:	e0bfff17 	ldw	r2,-4(fp)
 1009268:	10801704 	addi	r2,r2,92
 100926c:	1009883a 	mov	r4,r2
 1009270:	1008db40 	call	1008db4 <metal_mutex_acquire>
	metal_spinlock_acquire(&rpc->buflock);
 1009274:	e0bfff17 	ldw	r2,-4(fp)
 1009278:	10801804 	addi	r2,r2,96
 100927c:	1009883a 	mov	r4,r2
 1009280:	1008e4c0 	call	1008e4c <metal_spinlock_acquire>
	rpc->respbuf = NULL;
 1009284:	e0bfff17 	ldw	r2,-4(fp)
 1009288:	10001215 	stw	zero,72(r2)
	rpc->respbuf_len = 0;
 100928c:	e0bfff17 	ldw	r2,-4(fp)
 1009290:	10001315 	stw	zero,76(r2)
	metal_spinlock_release(&rpc->buflock);
 1009294:	e0bfff17 	ldw	r2,-4(fp)
 1009298:	10801804 	addi	r2,r2,96
 100929c:	1009883a 	mov	r4,r2
 10092a0:	1008e8c0 	call	1008e8c <metal_spinlock_release>
	metal_mutex_release(&rpc->lock);
 10092a4:	e0bfff17 	ldw	r2,-4(fp)
 10092a8:	10801704 	addi	r2,r2,92
 10092ac:	1009883a 	mov	r4,r2
 10092b0:	1008de80 	call	1008de8 <metal_mutex_release>
	metal_mutex_deinit(&rpc->lock);
 10092b4:	e0bfff17 	ldw	r2,-4(fp)
 10092b8:	10801704 	addi	r2,r2,92
 10092bc:	1009883a 	mov	r4,r2
 10092c0:	1008d800 	call	1008d80 <metal_mutex_deinit>

	return;
 10092c4:	0001883a 	nop
 10092c8:	00000106 	br	10092d0 <rpmsg_rpc_release+0xa0>
}

void rpmsg_rpc_release(struct rpmsg_rpc_data *rpc)
{
	if (rpc == NULL)
		return;
 10092cc:	0001883a 	nop
	metal_spinlock_release(&rpc->buflock);
	metal_mutex_release(&rpc->lock);
	metal_mutex_deinit(&rpc->lock);

	return;
}
 10092d0:	e037883a 	mov	sp,fp
 10092d4:	dfc00117 	ldw	ra,4(sp)
 10092d8:	df000017 	ldw	fp,0(sp)
 10092dc:	dec00204 	addi	sp,sp,8
 10092e0:	f800283a 	ret

010092e4 <rpmsg_rpc_send>:

int rpmsg_rpc_send(struct rpmsg_rpc_data *rpc,
		   void *req, size_t len,
		   void *resp, size_t resp_len)
{
 10092e4:	defff904 	addi	sp,sp,-28
 10092e8:	dfc00615 	stw	ra,24(sp)
 10092ec:	df000515 	stw	fp,20(sp)
 10092f0:	df000504 	addi	fp,sp,20
 10092f4:	e13ffc15 	stw	r4,-16(fp)
 10092f8:	e17ffd15 	stw	r5,-12(fp)
 10092fc:	e1bffe15 	stw	r6,-8(fp)
 1009300:	e1ffff15 	stw	r7,-4(fp)
	int ret;

	if (rpc == NULL)
 1009304:	e0bffc17 	ldw	r2,-16(fp)
 1009308:	1000021e 	bne	r2,zero,1009314 <rpmsg_rpc_send+0x30>
		return -EINVAL;
 100930c:	00bffa84 	movi	r2,-22
 1009310:	00003006 	br	10093d4 <rpmsg_rpc_send+0xf0>
	metal_spinlock_acquire(&rpc->buflock);
 1009314:	e0bffc17 	ldw	r2,-16(fp)
 1009318:	10801804 	addi	r2,r2,96
 100931c:	1009883a 	mov	r4,r2
 1009320:	1008e4c0 	call	1008e4c <metal_spinlock_acquire>
	rpc->respbuf = resp;
 1009324:	e0bffc17 	ldw	r2,-16(fp)
 1009328:	e0ffff17 	ldw	r3,-4(fp)
 100932c:	10c01215 	stw	r3,72(r2)
	rpc->respbuf_len = resp_len;
 1009330:	e0bffc17 	ldw	r2,-16(fp)
 1009334:	e0c00217 	ldw	r3,8(fp)
 1009338:	10c01315 	stw	r3,76(r2)
	metal_spinlock_release(&rpc->buflock);
 100933c:	e0bffc17 	ldw	r2,-16(fp)
 1009340:	10801804 	addi	r2,r2,96
 1009344:	1009883a 	mov	r4,r2
 1009348:	1008e8c0 	call	1008e8c <metal_spinlock_release>
	(void)atomic_flag_test_and_set(&rpc->nacked);
 100934c:	e0bffc17 	ldw	r2,-16(fp)
 1009350:	00c00044 	movi	r3,1
 1009354:	10c01115 	stw	r3,68(r2)
	ret = rpmsg_send(&rpc->ept, req, len);
 1009358:	e0bffc17 	ldw	r2,-16(fp)
 100935c:	e0fffe17 	ldw	r3,-8(fp)
 1009360:	180d883a 	mov	r6,r3
 1009364:	e17ffd17 	ldw	r5,-12(fp)
 1009368:	1009883a 	mov	r4,r2
 100936c:	1008ebc0 	call	1008ebc <rpmsg_send>
 1009370:	e0bffb15 	stw	r2,-20(fp)
	if (ret < 0)
 1009374:	e0bffb17 	ldw	r2,-20(fp)
 1009378:	1000020e 	bge	r2,zero,1009384 <rpmsg_rpc_send+0xa0>
		return -EINVAL;
 100937c:	00bffa84 	movi	r2,-22
 1009380:	00001406 	br	10093d4 <rpmsg_rpc_send+0xf0>
	if (!resp)
 1009384:	e0bfff17 	ldw	r2,-4(fp)
 1009388:	10000b1e 	bne	r2,zero,10093b8 <rpmsg_rpc_send+0xd4>
		return ret;
 100938c:	e0bffb17 	ldw	r2,-20(fp)
 1009390:	00001006 	br	10093d4 <rpmsg_rpc_send+0xf0>
	while((atomic_flag_test_and_set(&rpc->nacked))) {
		if (rpc->poll)
 1009394:	e0bffc17 	ldw	r2,-16(fp)
 1009398:	10801417 	ldw	r2,80(r2)
 100939c:	10000626 	beq	r2,zero,10093b8 <rpmsg_rpc_send+0xd4>
			rpc->poll(rpc->poll_arg);
 10093a0:	e0bffc17 	ldw	r2,-16(fp)
 10093a4:	10801417 	ldw	r2,80(r2)
 10093a8:	e0fffc17 	ldw	r3,-16(fp)
 10093ac:	18c01517 	ldw	r3,84(r3)
 10093b0:	1809883a 	mov	r4,r3
 10093b4:	103ee83a 	callr	r2
	ret = rpmsg_send(&rpc->ept, req, len);
	if (ret < 0)
		return -EINVAL;
	if (!resp)
		return ret;
	while((atomic_flag_test_and_set(&rpc->nacked))) {
 10093b8:	e0bffc17 	ldw	r2,-16(fp)
 10093bc:	00c00044 	movi	r3,1
 10093c0:	10c01115 	stw	r3,68(r2)
 10093c4:	e0bffc17 	ldw	r2,-16(fp)
 10093c8:	10801117 	ldw	r2,68(r2)
 10093cc:	103ff11e 	bne	r2,zero,1009394 <__alt_data_end+0xff009394>
		if (rpc->poll)
			rpc->poll(rpc->poll_arg);
	}
	return ret;
 10093d0:	e0bffb17 	ldw	r2,-20(fp)
}
 10093d4:	e037883a 	mov	sp,fp
 10093d8:	dfc00117 	ldw	ra,4(sp)
 10093dc:	df000017 	ldw	fp,0(sp)
 10093e0:	dec00204 	addi	sp,sp,8
 10093e4:	f800283a 	ret

010093e8 <rpmsg_set_default_rpc>:

void rpmsg_set_default_rpc(struct rpmsg_rpc_data *rpc)
{
 10093e8:	defffe04 	addi	sp,sp,-8
 10093ec:	df000115 	stw	fp,4(sp)
 10093f0:	df000104 	addi	fp,sp,4
 10093f4:	e13fff15 	stw	r4,-4(fp)
	if (rpc == NULL)
 10093f8:	e0bfff17 	ldw	r2,-4(fp)
 10093fc:	10000326 	beq	r2,zero,100940c <rpmsg_set_default_rpc+0x24>
		return;
	rpmsg_default_rpc = rpc;
 1009400:	e0bfff17 	ldw	r2,-4(fp)
 1009404:	d0a72915 	stw	r2,-25436(gp)
 1009408:	00000106 	br	1009410 <rpmsg_set_default_rpc+0x28>
}

void rpmsg_set_default_rpc(struct rpmsg_rpc_data *rpc)
{
	if (rpc == NULL)
		return;
 100940c:	0001883a 	nop
	rpmsg_default_rpc = rpc;
}
 1009410:	e037883a 	mov	sp,fp
 1009414:	df000017 	ldw	fp,0(sp)
 1009418:	dec00104 	addi	sp,sp,4
 100941c:	f800283a 	ret

01009420 <_open>:
 *
 *************************************************************************/
#define MAX_BUF_LEN 496UL

int _open(const char *filename, int flags, int mode)
{
 1009420:	deff7504 	addi	sp,sp,-556
 1009424:	dfc08a15 	stw	ra,552(sp)
 1009428:	df008915 	stw	fp,548(sp)
 100942c:	df008904 	addi	fp,sp,548
 1009430:	e13ffd15 	stw	r4,-12(fp)
 1009434:	e17ffe15 	stw	r5,-8(fp)
 1009438:	e1bfff15 	stw	r6,-4(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 100943c:	d0a72917 	ldw	r2,-25436(gp)
 1009440:	e0bf7915 	stw	r2,-540(fp)
	struct rpmsg_rpc_syscall *syscall;
	struct rpmsg_rpc_syscall resp;
	int filename_len = strlen(filename) + 1;
 1009444:	e13ffd17 	ldw	r4,-12(fp)
 1009448:	101463c0 	call	101463c <strlen>
 100944c:	10800044 	addi	r2,r2,1
 1009450:	e0bf7a15 	stw	r2,-536(fp)
	int payload_size = sizeof(*syscall) + filename_len;
 1009454:	e0bf7a17 	ldw	r2,-536(fp)
 1009458:	10800404 	addi	r2,r2,16
 100945c:	e0bf7b15 	stw	r2,-532(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	int ret;

	if (filename == NULL || payload_size > (int)MAX_BUF_LEN) {
 1009460:	e0bffd17 	ldw	r2,-12(fp)
 1009464:	10000326 	beq	r2,zero,1009474 <_open+0x54>
 1009468:	e0bf7b17 	ldw	r2,-532(fp)
 100946c:	10807c50 	cmplti	r2,r2,497
 1009470:	1000021e 	bne	r2,zero,100947c <_open+0x5c>
		return -EINVAL;
 1009474:	00bffa84 	movi	r2,-22
 1009478:	00003006 	br	100953c <_open+0x11c>
	}

	if (rpc == NULL)
 100947c:	e0bf7917 	ldw	r2,-540(fp)
 1009480:	1000021e 	bne	r2,zero,100948c <_open+0x6c>
		return -EINVAL;
 1009484:	00bffa84 	movi	r2,-22
 1009488:	00002c06 	br	100953c <_open+0x11c>

	/* Construct rpc payload */
	syscall = (struct rpmsg_rpc_syscall *)tmpbuf;
 100948c:	e0bf8104 	addi	r2,fp,-508
 1009490:	e0bf7c15 	stw	r2,-528(fp)
	syscall->id = OPEN_SYSCALL_ID;
 1009494:	e0bf7c17 	ldw	r2,-528(fp)
 1009498:	00c00044 	movi	r3,1
 100949c:	10c00015 	stw	r3,0(r2)
	syscall->args.int_field1 = flags;
 10094a0:	e0bf7c17 	ldw	r2,-528(fp)
 10094a4:	e0fffe17 	ldw	r3,-8(fp)
 10094a8:	10c00115 	stw	r3,4(r2)
	syscall->args.int_field2 = mode;
 10094ac:	e0bf7c17 	ldw	r2,-528(fp)
 10094b0:	e0ffff17 	ldw	r3,-4(fp)
 10094b4:	10c00215 	stw	r3,8(r2)
	syscall->args.data_len = filename_len;
 10094b8:	e0ff7a17 	ldw	r3,-536(fp)
 10094bc:	e0bf7c17 	ldw	r2,-528(fp)
 10094c0:	10c00315 	stw	r3,12(r2)
	memcpy(tmpbuf + sizeof(*syscall), filename, filename_len);
 10094c4:	e0bf8104 	addi	r2,fp,-508
 10094c8:	10800404 	addi	r2,r2,16
 10094cc:	e0ff7a17 	ldw	r3,-536(fp)
 10094d0:	180d883a 	mov	r6,r3
 10094d4:	e17ffd17 	ldw	r5,-12(fp)
 10094d8:	1009883a 	mov	r4,r2
 10094dc:	10139e80 	call	10139e8 <memcpy>

	resp.id = 0;
 10094e0:	e03f7d15 	stw	zero,-524(fp)
	ret = rpmsg_rpc_send(rpc, tmpbuf, payload_size,
 10094e4:	e13f7b17 	ldw	r4,-532(fp)
 10094e8:	e17f7d04 	addi	r5,fp,-524
 10094ec:	e0ff8104 	addi	r3,fp,-508
 10094f0:	00800404 	movi	r2,16
 10094f4:	d8800015 	stw	r2,0(sp)
 10094f8:	280f883a 	mov	r7,r5
 10094fc:	200d883a 	mov	r6,r4
 1009500:	180b883a 	mov	r5,r3
 1009504:	e13f7917 	ldw	r4,-540(fp)
 1009508:	10092e40 	call	10092e4 <rpmsg_rpc_send>
 100950c:	e0bf7815 	stw	r2,-544(fp)
			     (void *)&resp, sizeof(resp));
	if (ret >= 0) {
 1009510:	e0bf7817 	ldw	r2,-544(fp)
 1009514:	10000816 	blt	r2,zero,1009538 <_open+0x118>
		/* Obtain return args and return to caller */
		if (resp.id == OPEN_SYSCALL_ID)
 1009518:	e0bf7d17 	ldw	r2,-524(fp)
 100951c:	10800058 	cmpnei	r2,r2,1
 1009520:	1000031e 	bne	r2,zero,1009530 <_open+0x110>
			ret = resp.args.int_field1;
 1009524:	e0bf7e17 	ldw	r2,-520(fp)
 1009528:	e0bf7815 	stw	r2,-544(fp)
 100952c:	00000206 	br	1009538 <_open+0x118>
		else
			ret = -EINVAL;
 1009530:	00bffa84 	movi	r2,-22
 1009534:	e0bf7815 	stw	r2,-544(fp)
	}

	return ret;
 1009538:	e0bf7817 	ldw	r2,-544(fp)
}
 100953c:	e037883a 	mov	sp,fp
 1009540:	dfc00117 	ldw	ra,4(sp)
 1009544:	df000017 	ldw	fp,0(sp)
 1009548:	dec00204 	addi	sp,sp,8
 100954c:	f800283a 	ret

01009550 <_read>:
 *
 *       Low level function to redirect IO to serial.
 *
 *************************************************************************/
int _read(int fd, char *buffer, int buflen)
{
 1009550:	deff7404 	addi	sp,sp,-560
 1009554:	dfc08b15 	stw	ra,556(sp)
 1009558:	df008a15 	stw	fp,552(sp)
 100955c:	df008a04 	addi	fp,sp,552
 1009560:	e13ffd15 	stw	r4,-12(fp)
 1009564:	e17ffe15 	stw	r5,-8(fp)
 1009568:	e1bfff15 	stw	r6,-4(fp)
	struct rpmsg_rpc_syscall syscall;
	struct rpmsg_rpc_syscall *resp;
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 100956c:	d0a72917 	ldw	r2,-25436(gp)
 1009570:	e0bf7915 	stw	r2,-540(fp)
	int payload_size = sizeof(syscall);
 1009574:	00800404 	movi	r2,16
 1009578:	e0bf7a15 	stw	r2,-536(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	int ret;

	if (rpc == NULL || buffer == NULL || buflen == 0)
 100957c:	e0bf7917 	ldw	r2,-540(fp)
 1009580:	10000426 	beq	r2,zero,1009594 <_read+0x44>
 1009584:	e0bffe17 	ldw	r2,-8(fp)
 1009588:	10000226 	beq	r2,zero,1009594 <_read+0x44>
 100958c:	e0bfff17 	ldw	r2,-4(fp)
 1009590:	1000021e 	bne	r2,zero,100959c <_read+0x4c>
		return -EINVAL;
 1009594:	00bffa84 	movi	r2,-22
 1009598:	00003806 	br	100967c <_read+0x12c>

	/* Construct rpc payload */
	syscall.id = READ_SYSCALL_ID;
 100959c:	00800104 	movi	r2,4
 10095a0:	e0bf7d15 	stw	r2,-524(fp)
	syscall.args.int_field1 = fd;
 10095a4:	e0bffd17 	ldw	r2,-12(fp)
 10095a8:	e0bf7e15 	stw	r2,-520(fp)
	syscall.args.int_field2 = buflen;
 10095ac:	e0bfff17 	ldw	r2,-4(fp)
 10095b0:	e0bf7f15 	stw	r2,-516(fp)
	syscall.args.data_len = 0;	/*not used */
 10095b4:	e03f8015 	stw	zero,-512(fp)

	resp = (struct rpmsg_rpc_syscall *)tmpbuf;
 10095b8:	e0bf8104 	addi	r2,fp,-508
 10095bc:	e0bf7b15 	stw	r2,-532(fp)
	resp->id = 0;
 10095c0:	e0bf7b17 	ldw	r2,-532(fp)
 10095c4:	10000015 	stw	zero,0(r2)
	ret = rpmsg_rpc_send(rpc, (void *)&syscall, payload_size,
 10095c8:	e13f7a17 	ldw	r4,-536(fp)
 10095cc:	e17f8104 	addi	r5,fp,-508
 10095d0:	e0ff7d04 	addi	r3,fp,-524
 10095d4:	00807c04 	movi	r2,496
 10095d8:	d8800015 	stw	r2,0(sp)
 10095dc:	280f883a 	mov	r7,r5
 10095e0:	200d883a 	mov	r6,r4
 10095e4:	180b883a 	mov	r5,r3
 10095e8:	e13f7917 	ldw	r4,-540(fp)
 10095ec:	10092e40 	call	10092e4 <rpmsg_rpc_send>
 10095f0:	e0bf7715 	stw	r2,-548(fp)
			     tmpbuf, sizeof(tmpbuf));

	/* Obtain return args and return to caller */
	if (ret >= 0) {
 10095f4:	e0bf7717 	ldw	r2,-548(fp)
 10095f8:	10001f16 	blt	r2,zero,1009678 <_read+0x128>
		if (resp->id == READ_SYSCALL_ID) {
 10095fc:	e0bf7b17 	ldw	r2,-532(fp)
 1009600:	10800017 	ldw	r2,0(r2)
 1009604:	10800118 	cmpnei	r2,r2,4
 1009608:	1000191e 	bne	r2,zero,1009670 <_read+0x120>
			if (resp->args.int_field1 > 0) {
 100960c:	e0bf7b17 	ldw	r2,-532(fp)
 1009610:	10800117 	ldw	r2,4(r2)
 1009614:	0080120e 	bge	zero,r2,1009660 <_read+0x110>
				int tmplen = resp->args.data_len;
 1009618:	e0bf7b17 	ldw	r2,-532(fp)
 100961c:	10800317 	ldw	r2,12(r2)
 1009620:	e0bf7815 	stw	r2,-544(fp)
				unsigned char *tmpptr = tmpbuf;
 1009624:	e0bf8104 	addi	r2,fp,-508
 1009628:	e0bf7c15 	stw	r2,-528(fp)

				tmpptr += sizeof(*resp);
 100962c:	e0bf7c17 	ldw	r2,-528(fp)
 1009630:	10800404 	addi	r2,r2,16
 1009634:	e0bf7c15 	stw	r2,-528(fp)
				if (tmplen > buflen)
 1009638:	e0bf7817 	ldw	r2,-544(fp)
 100963c:	e0ffff17 	ldw	r3,-4(fp)
 1009640:	1880020e 	bge	r3,r2,100964c <_read+0xfc>
					tmplen = buflen;
 1009644:	e0bfff17 	ldw	r2,-4(fp)
 1009648:	e0bf7815 	stw	r2,-544(fp)
				memcpy(buffer, tmpptr, tmplen);
 100964c:	e0bf7817 	ldw	r2,-544(fp)
 1009650:	100d883a 	mov	r6,r2
 1009654:	e17f7c17 	ldw	r5,-528(fp)
 1009658:	e13ffe17 	ldw	r4,-8(fp)
 100965c:	10139e80 	call	10139e8 <memcpy>
			}
			ret = resp->args.int_field1;
 1009660:	e0bf7b17 	ldw	r2,-532(fp)
 1009664:	10800117 	ldw	r2,4(r2)
 1009668:	e0bf7715 	stw	r2,-548(fp)
 100966c:	00000206 	br	1009678 <_read+0x128>
		} else {
			ret = -EINVAL;
 1009670:	00bffa84 	movi	r2,-22
 1009674:	e0bf7715 	stw	r2,-548(fp)
		}
	}

	return ret;
 1009678:	e0bf7717 	ldw	r2,-548(fp)
}
 100967c:	e037883a 	mov	sp,fp
 1009680:	dfc00117 	ldw	ra,4(sp)
 1009684:	df000017 	ldw	fp,0(sp)
 1009688:	dec00204 	addi	sp,sp,8
 100968c:	f800283a 	ret

01009690 <_write>:
 *
 *       Low level function to redirect IO to serial.
 *
 *************************************************************************/
int _write(int fd, const char *ptr, int len)
{
 1009690:	deff7404 	addi	sp,sp,-560
 1009694:	dfc08b15 	stw	ra,556(sp)
 1009698:	df008a15 	stw	fp,552(sp)
 100969c:	df008a04 	addi	fp,sp,552
 10096a0:	e13ffd15 	stw	r4,-12(fp)
 10096a4:	e17ffe15 	stw	r5,-8(fp)
 10096a8:	e1bfff15 	stw	r6,-4(fp)
	int ret;
	struct rpmsg_rpc_syscall *syscall;
	struct rpmsg_rpc_syscall resp;
	int payload_size = sizeof(*syscall) + len;
 10096ac:	e0bfff17 	ldw	r2,-4(fp)
 10096b0:	10800404 	addi	r2,r2,16
 10096b4:	e0bf7815 	stw	r2,-544(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 10096b8:	d0a72917 	ldw	r2,-25436(gp)
 10096bc:	e0bf7a15 	stw	r2,-536(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	unsigned char *tmpptr;
	int null_term = 0;
 10096c0:	e03f7915 	stw	zero,-540(fp)

	if (rpc == NULL)
 10096c4:	e0bf7a17 	ldw	r2,-536(fp)
 10096c8:	1000021e 	bne	r2,zero,10096d4 <_write+0x44>
		return -EINVAL;
 10096cc:	00bffa84 	movi	r2,-22
 10096d0:	00004106 	br	10097d8 <_write+0x148>
	if (fd == 1)
 10096d4:	e0bffd17 	ldw	r2,-12(fp)
 10096d8:	10800058 	cmpnei	r2,r2,1
 10096dc:	1000021e 	bne	r2,zero,10096e8 <_write+0x58>
		null_term = 1;
 10096e0:	00800044 	movi	r2,1
 10096e4:	e0bf7915 	stw	r2,-540(fp)

	syscall = (struct rpmsg_rpc_syscall *)tmpbuf;
 10096e8:	e0bf8104 	addi	r2,fp,-508
 10096ec:	e0bf7b15 	stw	r2,-532(fp)
	syscall->id = WRITE_SYSCALL_ID;
 10096f0:	e0bf7b17 	ldw	r2,-532(fp)
 10096f4:	00c000c4 	movi	r3,3
 10096f8:	10c00015 	stw	r3,0(r2)
	syscall->args.int_field1 = fd;
 10096fc:	e0bf7b17 	ldw	r2,-532(fp)
 1009700:	e0fffd17 	ldw	r3,-12(fp)
 1009704:	10c00115 	stw	r3,4(r2)
	syscall->args.int_field2 = len;
 1009708:	e0bf7b17 	ldw	r2,-532(fp)
 100970c:	e0ffff17 	ldw	r3,-4(fp)
 1009710:	10c00215 	stw	r3,8(r2)
	syscall->args.data_len = len + null_term;
 1009714:	e0ffff17 	ldw	r3,-4(fp)
 1009718:	e0bf7917 	ldw	r2,-540(fp)
 100971c:	1885883a 	add	r2,r3,r2
 1009720:	1007883a 	mov	r3,r2
 1009724:	e0bf7b17 	ldw	r2,-532(fp)
 1009728:	10c00315 	stw	r3,12(r2)
	tmpptr = tmpbuf + sizeof(*syscall);
 100972c:	e0bf8104 	addi	r2,fp,-508
 1009730:	10800404 	addi	r2,r2,16
 1009734:	e0bf7c15 	stw	r2,-528(fp)
	memcpy(tmpptr, ptr, len);
 1009738:	e0bfff17 	ldw	r2,-4(fp)
 100973c:	100d883a 	mov	r6,r2
 1009740:	e17ffe17 	ldw	r5,-8(fp)
 1009744:	e13f7c17 	ldw	r4,-528(fp)
 1009748:	10139e80 	call	10139e8 <memcpy>
	if (null_term == 1) {
 100974c:	e0bf7917 	ldw	r2,-540(fp)
 1009750:	10800058 	cmpnei	r2,r2,1
 1009754:	1000091e 	bne	r2,zero,100977c <_write+0xec>
		*(char *)(tmpptr + len + null_term) = 0;
 1009758:	e0ffff17 	ldw	r3,-4(fp)
 100975c:	e0bf7917 	ldw	r2,-540(fp)
 1009760:	1885883a 	add	r2,r3,r2
 1009764:	e0ff7c17 	ldw	r3,-528(fp)
 1009768:	1885883a 	add	r2,r3,r2
 100976c:	10000005 	stb	zero,0(r2)
		payload_size += 1;
 1009770:	e0bf7817 	ldw	r2,-544(fp)
 1009774:	10800044 	addi	r2,r2,1
 1009778:	e0bf7815 	stw	r2,-544(fp)
	}
	resp.id = 0;
 100977c:	e03f7d15 	stw	zero,-524(fp)
	ret = rpmsg_rpc_send(rpc, tmpbuf, payload_size,
 1009780:	e13f7817 	ldw	r4,-544(fp)
 1009784:	e17f7d04 	addi	r5,fp,-524
 1009788:	e0ff8104 	addi	r3,fp,-508
 100978c:	00800404 	movi	r2,16
 1009790:	d8800015 	stw	r2,0(sp)
 1009794:	280f883a 	mov	r7,r5
 1009798:	200d883a 	mov	r6,r4
 100979c:	180b883a 	mov	r5,r3
 10097a0:	e13f7a17 	ldw	r4,-536(fp)
 10097a4:	10092e40 	call	10092e4 <rpmsg_rpc_send>
 10097a8:	e0bf7715 	stw	r2,-548(fp)
			     (void *)&resp, sizeof(resp));

	if (ret >= 0) {
 10097ac:	e0bf7717 	ldw	r2,-548(fp)
 10097b0:	10000816 	blt	r2,zero,10097d4 <_write+0x144>
		if (resp.id == WRITE_SYSCALL_ID)
 10097b4:	e0bf7d17 	ldw	r2,-524(fp)
 10097b8:	108000d8 	cmpnei	r2,r2,3
 10097bc:	1000031e 	bne	r2,zero,10097cc <_write+0x13c>
			ret = resp.args.int_field1;
 10097c0:	e0bf7e17 	ldw	r2,-520(fp)
 10097c4:	e0bf7715 	stw	r2,-548(fp)
 10097c8:	00000206 	br	10097d4 <_write+0x144>
		else
			ret = -EINVAL;
 10097cc:	00bffa84 	movi	r2,-22
 10097d0:	e0bf7715 	stw	r2,-548(fp)
	}

	return ret;
 10097d4:	e0bf7717 	ldw	r2,-548(fp)

}
 10097d8:	e037883a 	mov	sp,fp
 10097dc:	dfc00117 	ldw	ra,4(sp)
 10097e0:	df000017 	ldw	fp,0(sp)
 10097e4:	dec00204 	addi	sp,sp,8
 10097e8:	f800283a 	ret

010097ec <_close>:
 *
 *       Close a file.  Minimal implementation
 *
 *************************************************************************/
int _close(int fd)
{
 10097ec:	defff104 	addi	sp,sp,-60
 10097f0:	dfc00e15 	stw	ra,56(sp)
 10097f4:	df000d15 	stw	fp,52(sp)
 10097f8:	df000d04 	addi	fp,sp,52
 10097fc:	e13fff15 	stw	r4,-4(fp)
	int ret;
	struct rpmsg_rpc_syscall syscall;
	struct rpmsg_rpc_syscall resp;
	int payload_size = sizeof(syscall);
 1009800:	00800404 	movi	r2,16
 1009804:	e0bff515 	stw	r2,-44(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 1009808:	d0a72917 	ldw	r2,-25436(gp)
 100980c:	e0bff615 	stw	r2,-40(fp)

	if (rpc == NULL)
 1009810:	e0bff617 	ldw	r2,-40(fp)
 1009814:	1000021e 	bne	r2,zero,1009820 <_close+0x34>
		return -EINVAL;
 1009818:	00bffa84 	movi	r2,-22
 100981c:	00001d06 	br	1009894 <_close+0xa8>
	syscall.id = CLOSE_SYSCALL_ID;
 1009820:	00800084 	movi	r2,2
 1009824:	e0bff715 	stw	r2,-36(fp)
	syscall.args.int_field1 = fd;
 1009828:	e0bfff17 	ldw	r2,-4(fp)
 100982c:	e0bff815 	stw	r2,-32(fp)
	syscall.args.int_field2 = 0;	/*not used */
 1009830:	e03ff915 	stw	zero,-28(fp)
	syscall.args.data_len = 0;	/*not used */
 1009834:	e03ffa15 	stw	zero,-24(fp)

	resp.id = 0;
 1009838:	e03ffb15 	stw	zero,-20(fp)
	ret = rpmsg_rpc_send(rpc, (void*)&syscall, payload_size,
 100983c:	e13ff517 	ldw	r4,-44(fp)
 1009840:	e17ffb04 	addi	r5,fp,-20
 1009844:	e0fff704 	addi	r3,fp,-36
 1009848:	00800404 	movi	r2,16
 100984c:	d8800015 	stw	r2,0(sp)
 1009850:	280f883a 	mov	r7,r5
 1009854:	200d883a 	mov	r6,r4
 1009858:	180b883a 	mov	r5,r3
 100985c:	e13ff617 	ldw	r4,-40(fp)
 1009860:	10092e40 	call	10092e4 <rpmsg_rpc_send>
 1009864:	e0bff415 	stw	r2,-48(fp)
			     (void*)&resp, sizeof(resp));

	if (ret >= 0) {
 1009868:	e0bff417 	ldw	r2,-48(fp)
 100986c:	10000816 	blt	r2,zero,1009890 <_close+0xa4>
		if (resp.id == CLOSE_SYSCALL_ID)
 1009870:	e0bffb17 	ldw	r2,-20(fp)
 1009874:	10800098 	cmpnei	r2,r2,2
 1009878:	1000031e 	bne	r2,zero,1009888 <_close+0x9c>
			ret = resp.args.int_field1;
 100987c:	e0bffc17 	ldw	r2,-16(fp)
 1009880:	e0bff415 	stw	r2,-48(fp)
 1009884:	00000206 	br	1009890 <_close+0xa4>
		else
			ret = -EINVAL;
 1009888:	00bffa84 	movi	r2,-22
 100988c:	e0bff415 	stw	r2,-48(fp)
	}

	return ret;
 1009890:	e0bff417 	ldw	r2,-48(fp)
}
 1009894:	e037883a 	mov	sp,fp
 1009898:	dfc00117 	ldw	ra,4(sp)
 100989c:	df000017 	ldw	fp,0(sp)
 10098a0:	dec00204 	addi	sp,sp,8
 10098a4:	f800283a 	ret

010098a8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 10098a8:	defffd04 	addi	sp,sp,-12
 10098ac:	dfc00215 	stw	ra,8(sp)
 10098b0:	df000115 	stw	fp,4(sp)
 10098b4:	df000104 	addi	fp,sp,4
 10098b8:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 10098bc:	e13fff17 	ldw	r4,-4(fp)
 10098c0:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 10098c4:	e037883a 	mov	sp,fp
 10098c8:	dfc00117 	ldw	ra,4(sp)
 10098cc:	df000017 	ldw	fp,0(sp)
 10098d0:	dec00204 	addi	sp,sp,8
 10098d4:	f800283a 	ret

010098d8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 10098d8:	defffd04 	addi	sp,sp,-12
 10098dc:	dfc00215 	stw	ra,8(sp)
 10098e0:	df000115 	stw	fp,4(sp)
 10098e4:	df000104 	addi	fp,sp,4
 10098e8:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 10098ec:	e13fff17 	ldw	r4,-4(fp)
 10098f0:	10011840 	call	1001184 <vPortFree>
}
 10098f4:	0001883a 	nop
 10098f8:	e037883a 	mov	sp,fp
 10098fc:	dfc00117 	ldw	ra,4(sp)
 1009900:	df000017 	ldw	fp,0(sp)
 1009904:	dec00204 	addi	sp,sp,8
 1009908:	f800283a 	ret

0100990c <elf_is_64>:

#include <lib/include/openamp/elf_loader.h>
#include <lib/include/openamp/remoteproc.h>

static int elf_is_64(const void *elf_info)
{
 100990c:	defffd04 	addi	sp,sp,-12
 1009910:	df000215 	stw	fp,8(sp)
 1009914:	df000204 	addi	fp,sp,8
 1009918:	e13fff15 	stw	r4,-4(fp)
	const unsigned char *tmp = elf_info;
 100991c:	e0bfff17 	ldw	r2,-4(fp)
 1009920:	e0bffe15 	stw	r2,-8(fp)

	if (tmp[EI_CLASS] == ELFCLASS64)
 1009924:	e0bffe17 	ldw	r2,-8(fp)
 1009928:	10800104 	addi	r2,r2,4
 100992c:	10800003 	ldbu	r2,0(r2)
 1009930:	10803fcc 	andi	r2,r2,255
 1009934:	10800098 	cmpnei	r2,r2,2
 1009938:	1000021e 	bne	r2,zero,1009944 <elf_is_64+0x38>
		return 1;
 100993c:	00800044 	movi	r2,1
 1009940:	00000106 	br	1009948 <elf_is_64+0x3c>
	else
		return 0;
 1009944:	0005883a 	mov	r2,zero
}
 1009948:	e037883a 	mov	sp,fp
 100994c:	df000017 	ldw	fp,0(sp)
 1009950:	dec00104 	addi	sp,sp,4
 1009954:	f800283a 	ret

01009958 <elf_ehdr_size>:

static size_t elf_ehdr_size(const void *elf_info)
{
 1009958:	defffd04 	addi	sp,sp,-12
 100995c:	dfc00215 	stw	ra,8(sp)
 1009960:	df000115 	stw	fp,4(sp)
 1009964:	df000104 	addi	fp,sp,4
 1009968:	e13fff15 	stw	r4,-4(fp)
	if (elf_info == NULL)
 100996c:	e0bfff17 	ldw	r2,-4(fp)
 1009970:	1000021e 	bne	r2,zero,100997c <elf_ehdr_size+0x24>
		return sizeof(Elf64_Ehdr);
 1009974:	00801004 	movi	r2,64
 1009978:	00000606 	br	1009994 <elf_ehdr_size+0x3c>
	else if (elf_is_64(elf_info) != 0)
 100997c:	e13fff17 	ldw	r4,-4(fp)
 1009980:	100990c0 	call	100990c <elf_is_64>
 1009984:	10000226 	beq	r2,zero,1009990 <elf_ehdr_size+0x38>
		return sizeof(Elf64_Ehdr);
 1009988:	00801004 	movi	r2,64
 100998c:	00000106 	br	1009994 <elf_ehdr_size+0x3c>
	else
		return sizeof(Elf32_Ehdr);
 1009990:	00800d04 	movi	r2,52
}
 1009994:	e037883a 	mov	sp,fp
 1009998:	dfc00117 	ldw	ra,4(sp)
 100999c:	df000017 	ldw	fp,0(sp)
 10099a0:	dec00204 	addi	sp,sp,8
 10099a4:	f800283a 	ret

010099a8 <elf_phoff>:

static size_t elf_phoff(const void *elf_info)
{
 10099a8:	defffb04 	addi	sp,sp,-20
 10099ac:	dfc00415 	stw	ra,16(sp)
 10099b0:	df000315 	stw	fp,12(sp)
 10099b4:	df000304 	addi	fp,sp,12
 10099b8:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 10099bc:	e13fff17 	ldw	r4,-4(fp)
 10099c0:	100990c0 	call	100990c <elf_is_64>
 10099c4:	1000051e 	bne	r2,zero,10099dc <elf_phoff+0x34>
		const Elf32_Ehdr *ehdr = elf_info;
 10099c8:	e0bfff17 	ldw	r2,-4(fp)
 10099cc:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phoff;
 10099d0:	e0bffd17 	ldw	r2,-12(fp)
 10099d4:	10800717 	ldw	r2,28(r2)
 10099d8:	00000506 	br	10099f0 <elf_phoff+0x48>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 10099dc:	e0bfff17 	ldw	r2,-4(fp)
 10099e0:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phoff;
 10099e4:	e13ffe17 	ldw	r4,-8(fp)
 10099e8:	20800817 	ldw	r2,32(r4)
 10099ec:	20c00917 	ldw	r3,36(r4)
	}
}
 10099f0:	e037883a 	mov	sp,fp
 10099f4:	dfc00117 	ldw	ra,4(sp)
 10099f8:	df000017 	ldw	fp,0(sp)
 10099fc:	dec00204 	addi	sp,sp,8
 1009a00:	f800283a 	ret

01009a04 <elf_phentsize>:

static size_t elf_phentsize(const void *elf_info)
{
 1009a04:	defffb04 	addi	sp,sp,-20
 1009a08:	dfc00415 	stw	ra,16(sp)
 1009a0c:	df000315 	stw	fp,12(sp)
 1009a10:	df000304 	addi	fp,sp,12
 1009a14:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009a18:	e13fff17 	ldw	r4,-4(fp)
 1009a1c:	100990c0 	call	100990c <elf_is_64>
 1009a20:	1000061e 	bne	r2,zero,1009a3c <elf_phentsize+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 1009a24:	e0bfff17 	ldw	r2,-4(fp)
 1009a28:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phentsize;
 1009a2c:	e0bffd17 	ldw	r2,-12(fp)
 1009a30:	10800a8b 	ldhu	r2,42(r2)
 1009a34:	10bfffcc 	andi	r2,r2,65535
 1009a38:	00000506 	br	1009a50 <elf_phentsize+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009a3c:	e0bfff17 	ldw	r2,-4(fp)
 1009a40:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phentsize;
 1009a44:	e0bffe17 	ldw	r2,-8(fp)
 1009a48:	10800d8b 	ldhu	r2,54(r2)
 1009a4c:	10bfffcc 	andi	r2,r2,65535
	}
}
 1009a50:	e037883a 	mov	sp,fp
 1009a54:	dfc00117 	ldw	ra,4(sp)
 1009a58:	df000017 	ldw	fp,0(sp)
 1009a5c:	dec00204 	addi	sp,sp,8
 1009a60:	f800283a 	ret

01009a64 <elf_phnum>:

static int elf_phnum(const void *elf_info)
{
 1009a64:	defffb04 	addi	sp,sp,-20
 1009a68:	dfc00415 	stw	ra,16(sp)
 1009a6c:	df000315 	stw	fp,12(sp)
 1009a70:	df000304 	addi	fp,sp,12
 1009a74:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009a78:	e13fff17 	ldw	r4,-4(fp)
 1009a7c:	100990c0 	call	100990c <elf_is_64>
 1009a80:	1000061e 	bne	r2,zero,1009a9c <elf_phnum+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 1009a84:	e0bfff17 	ldw	r2,-4(fp)
 1009a88:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phnum;
 1009a8c:	e0bffd17 	ldw	r2,-12(fp)
 1009a90:	10800b0b 	ldhu	r2,44(r2)
 1009a94:	10bfffcc 	andi	r2,r2,65535
 1009a98:	00000506 	br	1009ab0 <elf_phnum+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009a9c:	e0bfff17 	ldw	r2,-4(fp)
 1009aa0:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phnum;
 1009aa4:	e0bffe17 	ldw	r2,-8(fp)
 1009aa8:	10800e0b 	ldhu	r2,56(r2)
 1009aac:	10bfffcc 	andi	r2,r2,65535
	}
}
 1009ab0:	e037883a 	mov	sp,fp
 1009ab4:	dfc00117 	ldw	ra,4(sp)
 1009ab8:	df000017 	ldw	fp,0(sp)
 1009abc:	dec00204 	addi	sp,sp,8
 1009ac0:	f800283a 	ret

01009ac4 <elf_shoff>:

static size_t elf_shoff(const void *elf_info)
{
 1009ac4:	defffb04 	addi	sp,sp,-20
 1009ac8:	dfc00415 	stw	ra,16(sp)
 1009acc:	df000315 	stw	fp,12(sp)
 1009ad0:	df000304 	addi	fp,sp,12
 1009ad4:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009ad8:	e13fff17 	ldw	r4,-4(fp)
 1009adc:	100990c0 	call	100990c <elf_is_64>
 1009ae0:	1000051e 	bne	r2,zero,1009af8 <elf_shoff+0x34>
		const Elf32_Ehdr *ehdr = elf_info;
 1009ae4:	e0bfff17 	ldw	r2,-4(fp)
 1009ae8:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shoff;
 1009aec:	e0bffd17 	ldw	r2,-12(fp)
 1009af0:	10800817 	ldw	r2,32(r2)
 1009af4:	00000506 	br	1009b0c <elf_shoff+0x48>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009af8:	e0bfff17 	ldw	r2,-4(fp)
 1009afc:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shoff;
 1009b00:	e13ffe17 	ldw	r4,-8(fp)
 1009b04:	20800a17 	ldw	r2,40(r4)
 1009b08:	20c00b17 	ldw	r3,44(r4)
	}
}
 1009b0c:	e037883a 	mov	sp,fp
 1009b10:	dfc00117 	ldw	ra,4(sp)
 1009b14:	df000017 	ldw	fp,0(sp)
 1009b18:	dec00204 	addi	sp,sp,8
 1009b1c:	f800283a 	ret

01009b20 <elf_shentsize>:

static size_t elf_shentsize(const void *elf_info)
{
 1009b20:	defffb04 	addi	sp,sp,-20
 1009b24:	dfc00415 	stw	ra,16(sp)
 1009b28:	df000315 	stw	fp,12(sp)
 1009b2c:	df000304 	addi	fp,sp,12
 1009b30:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009b34:	e13fff17 	ldw	r4,-4(fp)
 1009b38:	100990c0 	call	100990c <elf_is_64>
 1009b3c:	1000061e 	bne	r2,zero,1009b58 <elf_shentsize+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 1009b40:	e0bfff17 	ldw	r2,-4(fp)
 1009b44:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shentsize;
 1009b48:	e0bffd17 	ldw	r2,-12(fp)
 1009b4c:	10800b8b 	ldhu	r2,46(r2)
 1009b50:	10bfffcc 	andi	r2,r2,65535
 1009b54:	00000506 	br	1009b6c <elf_shentsize+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009b58:	e0bfff17 	ldw	r2,-4(fp)
 1009b5c:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shentsize;
 1009b60:	e0bffe17 	ldw	r2,-8(fp)
 1009b64:	10800e8b 	ldhu	r2,58(r2)
 1009b68:	10bfffcc 	andi	r2,r2,65535
	}
}
 1009b6c:	e037883a 	mov	sp,fp
 1009b70:	dfc00117 	ldw	ra,4(sp)
 1009b74:	df000017 	ldw	fp,0(sp)
 1009b78:	dec00204 	addi	sp,sp,8
 1009b7c:	f800283a 	ret

01009b80 <elf_shnum>:

static int elf_shnum(const void *elf_info)
{
 1009b80:	defffb04 	addi	sp,sp,-20
 1009b84:	dfc00415 	stw	ra,16(sp)
 1009b88:	df000315 	stw	fp,12(sp)
 1009b8c:	df000304 	addi	fp,sp,12
 1009b90:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009b94:	e13fff17 	ldw	r4,-4(fp)
 1009b98:	100990c0 	call	100990c <elf_is_64>
 1009b9c:	1000061e 	bne	r2,zero,1009bb8 <elf_shnum+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 1009ba0:	e0bfff17 	ldw	r2,-4(fp)
 1009ba4:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shnum;
 1009ba8:	e0bffd17 	ldw	r2,-12(fp)
 1009bac:	10800c0b 	ldhu	r2,48(r2)
 1009bb0:	10bfffcc 	andi	r2,r2,65535
 1009bb4:	00000506 	br	1009bcc <elf_shnum+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009bb8:	e0bfff17 	ldw	r2,-4(fp)
 1009bbc:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shnum;
 1009bc0:	e0bffe17 	ldw	r2,-8(fp)
 1009bc4:	10800f0b 	ldhu	r2,60(r2)
 1009bc8:	10bfffcc 	andi	r2,r2,65535
	}
}
 1009bcc:	e037883a 	mov	sp,fp
 1009bd0:	dfc00117 	ldw	ra,4(sp)
 1009bd4:	df000017 	ldw	fp,0(sp)
 1009bd8:	dec00204 	addi	sp,sp,8
 1009bdc:	f800283a 	ret

01009be0 <elf_shstrndx>:

static int elf_shstrndx(const void *elf_info)
{
 1009be0:	defffb04 	addi	sp,sp,-20
 1009be4:	dfc00415 	stw	ra,16(sp)
 1009be8:	df000315 	stw	fp,12(sp)
 1009bec:	df000304 	addi	fp,sp,12
 1009bf0:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009bf4:	e13fff17 	ldw	r4,-4(fp)
 1009bf8:	100990c0 	call	100990c <elf_is_64>
 1009bfc:	1000061e 	bne	r2,zero,1009c18 <elf_shstrndx+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 1009c00:	e0bfff17 	ldw	r2,-4(fp)
 1009c04:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shstrndx;
 1009c08:	e0bffd17 	ldw	r2,-12(fp)
 1009c0c:	10800c8b 	ldhu	r2,50(r2)
 1009c10:	10bfffcc 	andi	r2,r2,65535
 1009c14:	00000506 	br	1009c2c <elf_shstrndx+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 1009c18:	e0bfff17 	ldw	r2,-4(fp)
 1009c1c:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shstrndx;
 1009c20:	e0bffe17 	ldw	r2,-8(fp)
 1009c24:	10800f8b 	ldhu	r2,62(r2)
 1009c28:	10bfffcc 	andi	r2,r2,65535
	}
}
 1009c2c:	e037883a 	mov	sp,fp
 1009c30:	dfc00117 	ldw	ra,4(sp)
 1009c34:	df000017 	ldw	fp,0(sp)
 1009c38:	dec00204 	addi	sp,sp,8
 1009c3c:	f800283a 	ret

01009c40 <elf_phtable_ptr>:

static void **elf_phtable_ptr(void *elf_info)
{
 1009c40:	defffb04 	addi	sp,sp,-20
 1009c44:	dfc00415 	stw	ra,16(sp)
 1009c48:	df000315 	stw	fp,12(sp)
 1009c4c:	df000304 	addi	fp,sp,12
 1009c50:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009c54:	e13fff17 	ldw	r4,-4(fp)
 1009c58:	100990c0 	call	100990c <elf_is_64>
 1009c5c:	1000051e 	bne	r2,zero,1009c74 <elf_phtable_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 1009c60:	e0bfff17 	ldw	r2,-4(fp)
 1009c64:	e0bffd15 	stw	r2,-12(fp)

		return (void **)&einfo->phdrs;
 1009c68:	e0bffd17 	ldw	r2,-12(fp)
 1009c6c:	10800e04 	addi	r2,r2,56
 1009c70:	00000406 	br	1009c84 <elf_phtable_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 1009c74:	e0bfff17 	ldw	r2,-4(fp)
 1009c78:	e0bffe15 	stw	r2,-8(fp)

		return (void **)&einfo->phdrs;
 1009c7c:	e0bffe17 	ldw	r2,-8(fp)
 1009c80:	10801104 	addi	r2,r2,68
	}
}
 1009c84:	e037883a 	mov	sp,fp
 1009c88:	dfc00117 	ldw	ra,4(sp)
 1009c8c:	df000017 	ldw	fp,0(sp)
 1009c90:	dec00204 	addi	sp,sp,8
 1009c94:	f800283a 	ret

01009c98 <elf_shtable_ptr>:

static void **elf_shtable_ptr(void *elf_info)
{
 1009c98:	defffb04 	addi	sp,sp,-20
 1009c9c:	dfc00415 	stw	ra,16(sp)
 1009ca0:	df000315 	stw	fp,12(sp)
 1009ca4:	df000304 	addi	fp,sp,12
 1009ca8:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009cac:	e13fff17 	ldw	r4,-4(fp)
 1009cb0:	100990c0 	call	100990c <elf_is_64>
 1009cb4:	1000051e 	bne	r2,zero,1009ccc <elf_shtable_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 1009cb8:	e0bfff17 	ldw	r2,-4(fp)
 1009cbc:	e0bffd15 	stw	r2,-12(fp)

		return (void **)&einfo->shdrs;
 1009cc0:	e0bffd17 	ldw	r2,-12(fp)
 1009cc4:	10800f04 	addi	r2,r2,60
 1009cc8:	00000406 	br	1009cdc <elf_shtable_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 1009ccc:	e0bfff17 	ldw	r2,-4(fp)
 1009cd0:	e0bffe15 	stw	r2,-8(fp)

		return (void **)&einfo->shdrs;
 1009cd4:	e0bffe17 	ldw	r2,-8(fp)
 1009cd8:	10801204 	addi	r2,r2,72
	}
}
 1009cdc:	e037883a 	mov	sp,fp
 1009ce0:	dfc00117 	ldw	ra,4(sp)
 1009ce4:	df000017 	ldw	fp,0(sp)
 1009ce8:	dec00204 	addi	sp,sp,8
 1009cec:	f800283a 	ret

01009cf0 <elf_shstrtab_ptr>:

static void **elf_shstrtab_ptr(void *elf_info)
{
 1009cf0:	defffb04 	addi	sp,sp,-20
 1009cf4:	dfc00415 	stw	ra,16(sp)
 1009cf8:	df000315 	stw	fp,12(sp)
 1009cfc:	df000304 	addi	fp,sp,12
 1009d00:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009d04:	e13fff17 	ldw	r4,-4(fp)
 1009d08:	100990c0 	call	100990c <elf_is_64>
 1009d0c:	1000051e 	bne	r2,zero,1009d24 <elf_shstrtab_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 1009d10:	e0bfff17 	ldw	r2,-4(fp)
 1009d14:	e0bffd15 	stw	r2,-12(fp)

		return &einfo->shstrtab;
 1009d18:	e0bffd17 	ldw	r2,-12(fp)
 1009d1c:	10801004 	addi	r2,r2,64
 1009d20:	00000406 	br	1009d34 <elf_shstrtab_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 1009d24:	e0bfff17 	ldw	r2,-4(fp)
 1009d28:	e0bffe15 	stw	r2,-8(fp)

		return &einfo->shstrtab;
 1009d2c:	e0bffe17 	ldw	r2,-8(fp)
 1009d30:	10801304 	addi	r2,r2,76
	}
}
 1009d34:	e037883a 	mov	sp,fp
 1009d38:	dfc00117 	ldw	ra,4(sp)
 1009d3c:	df000017 	ldw	fp,0(sp)
 1009d40:	dec00204 	addi	sp,sp,8
 1009d44:	f800283a 	ret

01009d48 <elf_load_state>:

static int *elf_load_state(void *elf_info)
{
 1009d48:	defffb04 	addi	sp,sp,-20
 1009d4c:	dfc00415 	stw	ra,16(sp)
 1009d50:	df000315 	stw	fp,12(sp)
 1009d54:	df000304 	addi	fp,sp,12
 1009d58:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009d5c:	e13fff17 	ldw	r4,-4(fp)
 1009d60:	100990c0 	call	100990c <elf_is_64>
 1009d64:	1000051e 	bne	r2,zero,1009d7c <elf_load_state+0x34>
		struct elf32_info *einfo = elf_info;
 1009d68:	e0bfff17 	ldw	r2,-4(fp)
 1009d6c:	e0bffd15 	stw	r2,-12(fp)

		return &einfo->load_state;
 1009d70:	e0bffd17 	ldw	r2,-12(fp)
 1009d74:	10800d04 	addi	r2,r2,52
 1009d78:	00000406 	br	1009d8c <elf_load_state+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 1009d7c:	e0bfff17 	ldw	r2,-4(fp)
 1009d80:	e0bffe15 	stw	r2,-8(fp)

		return &einfo->load_state;
 1009d84:	e0bffe17 	ldw	r2,-8(fp)
 1009d88:	10801004 	addi	r2,r2,64
	}
}
 1009d8c:	e037883a 	mov	sp,fp
 1009d90:	dfc00117 	ldw	ra,4(sp)
 1009d94:	df000017 	ldw	fp,0(sp)
 1009d98:	dec00204 	addi	sp,sp,8
 1009d9c:	f800283a 	ret

01009da0 <elf_parse_segment>:
static void elf_parse_segment(void *elf_info, const void *elf_phdr,
			      unsigned int *p_type, size_t *p_offset,
			      metal_phys_addr_t *p_vaddr,
			      metal_phys_addr_t *p_paddr,
			      size_t *p_filesz, size_t *p_memsz)
{
 1009da0:	defff804 	addi	sp,sp,-32
 1009da4:	dfc00715 	stw	ra,28(sp)
 1009da8:	df000615 	stw	fp,24(sp)
 1009dac:	df000604 	addi	fp,sp,24
 1009db0:	e13ffc15 	stw	r4,-16(fp)
 1009db4:	e17ffd15 	stw	r5,-12(fp)
 1009db8:	e1bffe15 	stw	r6,-8(fp)
 1009dbc:	e1ffff15 	stw	r7,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009dc0:	e13ffc17 	ldw	r4,-16(fp)
 1009dc4:	100990c0 	call	100990c <elf_is_64>
 1009dc8:	1000271e 	bne	r2,zero,1009e68 <elf_parse_segment+0xc8>
		const Elf32_Phdr *phdr = elf_phdr;
 1009dcc:	e0bffd17 	ldw	r2,-12(fp)
 1009dd0:	e0bffa15 	stw	r2,-24(fp)

		if (p_type != NULL)
 1009dd4:	e0bffe17 	ldw	r2,-8(fp)
 1009dd8:	10000426 	beq	r2,zero,1009dec <elf_parse_segment+0x4c>
			*p_type = (unsigned int)phdr->p_type;
 1009ddc:	e0bffa17 	ldw	r2,-24(fp)
 1009de0:	10c00017 	ldw	r3,0(r2)
 1009de4:	e0bffe17 	ldw	r2,-8(fp)
 1009de8:	10c00015 	stw	r3,0(r2)
		if (p_offset != NULL)
 1009dec:	e0bfff17 	ldw	r2,-4(fp)
 1009df0:	10000426 	beq	r2,zero,1009e04 <elf_parse_segment+0x64>
			*p_offset = (size_t)phdr->p_offset;
 1009df4:	e0bffa17 	ldw	r2,-24(fp)
 1009df8:	10c00117 	ldw	r3,4(r2)
 1009dfc:	e0bfff17 	ldw	r2,-4(fp)
 1009e00:	10c00015 	stw	r3,0(r2)
		if (p_vaddr != NULL)
 1009e04:	e0800217 	ldw	r2,8(fp)
 1009e08:	10000426 	beq	r2,zero,1009e1c <elf_parse_segment+0x7c>
			*p_vaddr = (metal_phys_addr_t)phdr->p_vaddr;
 1009e0c:	e0bffa17 	ldw	r2,-24(fp)
 1009e10:	10c00217 	ldw	r3,8(r2)
 1009e14:	e0800217 	ldw	r2,8(fp)
 1009e18:	10c00015 	stw	r3,0(r2)
		if (p_paddr != NULL)
 1009e1c:	e0800317 	ldw	r2,12(fp)
 1009e20:	10000426 	beq	r2,zero,1009e34 <elf_parse_segment+0x94>
			*p_paddr = (metal_phys_addr_t)phdr->p_paddr;
 1009e24:	e0bffa17 	ldw	r2,-24(fp)
 1009e28:	10c00317 	ldw	r3,12(r2)
 1009e2c:	e0800317 	ldw	r2,12(fp)
 1009e30:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
 1009e34:	e0800417 	ldw	r2,16(fp)
 1009e38:	10000426 	beq	r2,zero,1009e4c <elf_parse_segment+0xac>
			*p_filesz = (size_t)phdr->p_filesz;
 1009e3c:	e0bffa17 	ldw	r2,-24(fp)
 1009e40:	10c00417 	ldw	r3,16(r2)
 1009e44:	e0800417 	ldw	r2,16(fp)
 1009e48:	10c00015 	stw	r3,0(r2)
		if (p_memsz != NULL)
 1009e4c:	e0800517 	ldw	r2,20(fp)
 1009e50:	10003526 	beq	r2,zero,1009f28 <elf_parse_segment+0x188>
			*p_memsz = (size_t)phdr->p_memsz;
 1009e54:	e0bffa17 	ldw	r2,-24(fp)
 1009e58:	10c00517 	ldw	r3,20(r2)
 1009e5c:	e0800517 	ldw	r2,20(fp)
 1009e60:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
			*p_filesz = (size_t)phdr->p_filesz;
		if (p_memsz != NULL)
			*p_memsz = (size_t)phdr->p_memsz;
	}
}
 1009e64:	00003006 	br	1009f28 <elf_parse_segment+0x188>
		if (p_filesz != NULL)
			*p_filesz = (size_t)phdr->p_filesz;
		if (p_memsz != NULL)
			*p_memsz = (size_t)phdr->p_memsz;
	} else {
		const Elf64_Phdr *phdr = elf_phdr;
 1009e68:	e0bffd17 	ldw	r2,-12(fp)
 1009e6c:	e0bffb15 	stw	r2,-20(fp)

		if (p_type != NULL)
 1009e70:	e0bffe17 	ldw	r2,-8(fp)
 1009e74:	10000426 	beq	r2,zero,1009e88 <elf_parse_segment+0xe8>
			*p_type = (unsigned int)phdr->p_type;
 1009e78:	e0bffb17 	ldw	r2,-20(fp)
 1009e7c:	10c00017 	ldw	r3,0(r2)
 1009e80:	e0bffe17 	ldw	r2,-8(fp)
 1009e84:	10c00015 	stw	r3,0(r2)
		if (p_offset != NULL)
 1009e88:	e0bfff17 	ldw	r2,-4(fp)
 1009e8c:	10000626 	beq	r2,zero,1009ea8 <elf_parse_segment+0x108>
			*p_offset = (size_t)phdr->p_offset;
 1009e90:	e13ffb17 	ldw	r4,-20(fp)
 1009e94:	20800217 	ldw	r2,8(r4)
 1009e98:	20c00317 	ldw	r3,12(r4)
 1009e9c:	1007883a 	mov	r3,r2
 1009ea0:	e0bfff17 	ldw	r2,-4(fp)
 1009ea4:	10c00015 	stw	r3,0(r2)
		if (p_vaddr != NULL)
 1009ea8:	e0800217 	ldw	r2,8(fp)
 1009eac:	10000626 	beq	r2,zero,1009ec8 <elf_parse_segment+0x128>
			*p_vaddr = (metal_phys_addr_t)phdr->p_vaddr;
 1009eb0:	e13ffb17 	ldw	r4,-20(fp)
 1009eb4:	20800417 	ldw	r2,16(r4)
 1009eb8:	20c00517 	ldw	r3,20(r4)
 1009ebc:	1007883a 	mov	r3,r2
 1009ec0:	e0800217 	ldw	r2,8(fp)
 1009ec4:	10c00015 	stw	r3,0(r2)
		if (p_paddr != NULL)
 1009ec8:	e0800317 	ldw	r2,12(fp)
 1009ecc:	10000626 	beq	r2,zero,1009ee8 <elf_parse_segment+0x148>
			*p_paddr = (metal_phys_addr_t)phdr->p_paddr;
 1009ed0:	e13ffb17 	ldw	r4,-20(fp)
 1009ed4:	20800617 	ldw	r2,24(r4)
 1009ed8:	20c00717 	ldw	r3,28(r4)
 1009edc:	1007883a 	mov	r3,r2
 1009ee0:	e0800317 	ldw	r2,12(fp)
 1009ee4:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
 1009ee8:	e0800417 	ldw	r2,16(fp)
 1009eec:	10000626 	beq	r2,zero,1009f08 <elf_parse_segment+0x168>
			*p_filesz = (size_t)phdr->p_filesz;
 1009ef0:	e13ffb17 	ldw	r4,-20(fp)
 1009ef4:	20800817 	ldw	r2,32(r4)
 1009ef8:	20c00917 	ldw	r3,36(r4)
 1009efc:	1007883a 	mov	r3,r2
 1009f00:	e0800417 	ldw	r2,16(fp)
 1009f04:	10c00015 	stw	r3,0(r2)
		if (p_memsz != NULL)
 1009f08:	e0800517 	ldw	r2,20(fp)
 1009f0c:	10000626 	beq	r2,zero,1009f28 <elf_parse_segment+0x188>
			*p_memsz = (size_t)phdr->p_memsz;
 1009f10:	e13ffb17 	ldw	r4,-20(fp)
 1009f14:	20800a17 	ldw	r2,40(r4)
 1009f18:	20c00b17 	ldw	r3,44(r4)
 1009f1c:	1007883a 	mov	r3,r2
 1009f20:	e0800517 	ldw	r2,20(fp)
 1009f24:	10c00015 	stw	r3,0(r2)
	}
}
 1009f28:	0001883a 	nop
 1009f2c:	e037883a 	mov	sp,fp
 1009f30:	dfc00117 	ldw	ra,4(sp)
 1009f34:	df000017 	ldw	fp,0(sp)
 1009f38:	dec00204 	addi	sp,sp,8
 1009f3c:	f800283a 	ret

01009f40 <elf_get_segment_from_index>:

static const void *elf_get_segment_from_index(void *elf_info, int index)
{
 1009f40:	defff604 	addi	sp,sp,-40
 1009f44:	dfc00915 	stw	ra,36(sp)
 1009f48:	df000815 	stw	fp,32(sp)
 1009f4c:	df000804 	addi	fp,sp,32
 1009f50:	e13ffe15 	stw	r4,-8(fp)
 1009f54:	e17fff15 	stw	r5,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009f58:	e13ffe17 	ldw	r4,-8(fp)
 1009f5c:	100990c0 	call	100990c <elf_is_64>
 1009f60:	1000191e 	bne	r2,zero,1009fc8 <elf_get_segment_from_index+0x88>
		const struct elf32_info *einfo = elf_info;
 1009f64:	e0bffe17 	ldw	r2,-8(fp)
 1009f68:	e0bff815 	stw	r2,-32(fp)
		const Elf32_Ehdr *ehdr = &einfo->ehdr;
 1009f6c:	e0bff817 	ldw	r2,-32(fp)
 1009f70:	e0bff915 	stw	r2,-28(fp)
		const Elf32_Phdr *phdrs = einfo->phdrs;
 1009f74:	e0bff817 	ldw	r2,-32(fp)
 1009f78:	10800e17 	ldw	r2,56(r2)
 1009f7c:	e0bffa15 	stw	r2,-24(fp)

		if (phdrs == NULL)
 1009f80:	e0bffa17 	ldw	r2,-24(fp)
 1009f84:	1000021e 	bne	r2,zero,1009f90 <elf_get_segment_from_index+0x50>
			return NULL;
 1009f88:	0005883a 	mov	r2,zero
 1009f8c:	00002606 	br	100a028 <elf_get_segment_from_index+0xe8>
		if (index < 0 || index >= ehdr->e_phnum)
 1009f90:	e0bfff17 	ldw	r2,-4(fp)
 1009f94:	10000516 	blt	r2,zero,1009fac <elf_get_segment_from_index+0x6c>
 1009f98:	e0bff917 	ldw	r2,-28(fp)
 1009f9c:	10800b0b 	ldhu	r2,44(r2)
 1009fa0:	10bfffcc 	andi	r2,r2,65535
 1009fa4:	e0ffff17 	ldw	r3,-4(fp)
 1009fa8:	18800216 	blt	r3,r2,1009fb4 <elf_get_segment_from_index+0x74>
			return NULL;
 1009fac:	0005883a 	mov	r2,zero
 1009fb0:	00001d06 	br	100a028 <elf_get_segment_from_index+0xe8>
		return &phdrs[index];
 1009fb4:	e0bfff17 	ldw	r2,-4(fp)
 1009fb8:	1004917a 	slli	r2,r2,5
 1009fbc:	e0fffa17 	ldw	r3,-24(fp)
 1009fc0:	1885883a 	add	r2,r3,r2
 1009fc4:	00001806 	br	100a028 <elf_get_segment_from_index+0xe8>
	} else {
		const struct elf64_info *einfo = elf_info;
 1009fc8:	e0bffe17 	ldw	r2,-8(fp)
 1009fcc:	e0bffb15 	stw	r2,-20(fp)
		const Elf64_Ehdr *ehdr = &einfo->ehdr;
 1009fd0:	e0bffb17 	ldw	r2,-20(fp)
 1009fd4:	e0bffc15 	stw	r2,-16(fp)
		const Elf64_Phdr *phdrs = einfo->phdrs;
 1009fd8:	e0bffb17 	ldw	r2,-20(fp)
 1009fdc:	10801117 	ldw	r2,68(r2)
 1009fe0:	e0bffd15 	stw	r2,-12(fp)

		if (phdrs == NULL)
 1009fe4:	e0bffd17 	ldw	r2,-12(fp)
 1009fe8:	1000021e 	bne	r2,zero,1009ff4 <elf_get_segment_from_index+0xb4>
			return NULL;
 1009fec:	0005883a 	mov	r2,zero
 1009ff0:	00000d06 	br	100a028 <elf_get_segment_from_index+0xe8>
		if (index < 0 || index >= ehdr->e_phnum)
 1009ff4:	e0bfff17 	ldw	r2,-4(fp)
 1009ff8:	10000516 	blt	r2,zero,100a010 <elf_get_segment_from_index+0xd0>
 1009ffc:	e0bffc17 	ldw	r2,-16(fp)
 100a000:	10800e0b 	ldhu	r2,56(r2)
 100a004:	10bfffcc 	andi	r2,r2,65535
 100a008:	e0ffff17 	ldw	r3,-4(fp)
 100a00c:	18800216 	blt	r3,r2,100a018 <elf_get_segment_from_index+0xd8>
			return NULL;
 100a010:	0005883a 	mov	r2,zero
 100a014:	00000406 	br	100a028 <elf_get_segment_from_index+0xe8>
		return &phdrs[index];
 100a018:	e0bfff17 	ldw	r2,-4(fp)
 100a01c:	10800e24 	muli	r2,r2,56
 100a020:	e0fffd17 	ldw	r3,-12(fp)
 100a024:	1885883a 	add	r2,r3,r2
	}
}
 100a028:	e037883a 	mov	sp,fp
 100a02c:	dfc00117 	ldw	ra,4(sp)
 100a030:	df000017 	ldw	fp,0(sp)
 100a034:	dec00204 	addi	sp,sp,8
 100a038:	f800283a 	ret

0100a03c <elf_get_section_from_name>:

static void *elf_get_section_from_name(void *elf_info, const char *name)
{
 100a03c:	defff404 	addi	sp,sp,-48
 100a040:	dfc00b15 	stw	ra,44(sp)
 100a044:	df000a15 	stw	fp,40(sp)
 100a048:	df000a04 	addi	fp,sp,40
 100a04c:	e13ffe15 	stw	r4,-8(fp)
 100a050:	e17fff15 	stw	r5,-4(fp)
	unsigned int i;
	const char *name_table;

	if (elf_is_64(elf_info) == 0) {
 100a054:	e13ffe17 	ldw	r4,-8(fp)
 100a058:	100990c0 	call	100990c <elf_is_64>
 100a05c:	1000291e 	bne	r2,zero,100a104 <elf_get_section_from_name+0xc8>
		struct elf32_info *einfo = elf_info;
 100a060:	e0bffe17 	ldw	r2,-8(fp)
 100a064:	e0bff915 	stw	r2,-28(fp)
		Elf32_Ehdr *ehdr = &einfo->ehdr;
 100a068:	e0bff917 	ldw	r2,-28(fp)
 100a06c:	e0bffa15 	stw	r2,-24(fp)
		Elf32_Shdr *shdr = einfo->shdrs;
 100a070:	e0bff917 	ldw	r2,-28(fp)
 100a074:	10800f17 	ldw	r2,60(r2)
 100a078:	e0bff715 	stw	r2,-36(fp)

		name_table = einfo->shstrtab;
 100a07c:	e0bff917 	ldw	r2,-28(fp)
 100a080:	10801017 	ldw	r2,64(r2)
 100a084:	e0bffb15 	stw	r2,-20(fp)
		if (shdr == NULL || name_table == NULL)
 100a088:	e0bff717 	ldw	r2,-36(fp)
 100a08c:	10000226 	beq	r2,zero,100a098 <elf_get_section_from_name+0x5c>
 100a090:	e0bffb17 	ldw	r2,-20(fp)
 100a094:	1000021e 	bne	r2,zero,100a0a0 <elf_get_section_from_name+0x64>
			return NULL;
 100a098:	0005883a 	mov	r2,zero
 100a09c:	00004206 	br	100a1a8 <elf_get_section_from_name+0x16c>
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a0a0:	e03ff615 	stw	zero,-40(fp)
 100a0a4:	00001106 	br	100a0ec <elf_get_section_from_name+0xb0>
			if (strcmp(name, name_table + shdr->sh_name))
 100a0a8:	e0bff717 	ldw	r2,-36(fp)
 100a0ac:	10800017 	ldw	r2,0(r2)
 100a0b0:	e0fffb17 	ldw	r3,-20(fp)
 100a0b4:	1885883a 	add	r2,r3,r2
 100a0b8:	100b883a 	mov	r5,r2
 100a0bc:	e13fff17 	ldw	r4,-4(fp)
 100a0c0:	1013ee80 	call	1013ee8 <strcmp>
 100a0c4:	10000726 	beq	r2,zero,100a0e4 <elf_get_section_from_name+0xa8>
		Elf32_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a0c8:	e0bff617 	ldw	r2,-40(fp)
 100a0cc:	10800044 	addi	r2,r2,1
 100a0d0:	e0bff615 	stw	r2,-40(fp)
 100a0d4:	e0bff717 	ldw	r2,-36(fp)
 100a0d8:	10800a04 	addi	r2,r2,40
 100a0dc:	e0bff715 	stw	r2,-36(fp)
 100a0e0:	00000206 	br	100a0ec <elf_get_section_from_name+0xb0>
			if (strcmp(name, name_table + shdr->sh_name))
				continue;
			else
				return shdr;
 100a0e4:	e0bff717 	ldw	r2,-36(fp)
 100a0e8:	00002f06 	br	100a1a8 <elf_get_section_from_name+0x16c>
		Elf32_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a0ec:	e0bffa17 	ldw	r2,-24(fp)
 100a0f0:	10800c0b 	ldhu	r2,48(r2)
 100a0f4:	10bfffcc 	andi	r2,r2,65535
 100a0f8:	e0fff617 	ldw	r3,-40(fp)
 100a0fc:	18bfea36 	bltu	r3,r2,100a0a8 <__alt_data_end+0xff00a0a8>
 100a100:	00002806 	br	100a1a4 <elf_get_section_from_name+0x168>
				continue;
			else
				return shdr;
		}
	} else {
		struct elf64_info *einfo = elf_info;
 100a104:	e0bffe17 	ldw	r2,-8(fp)
 100a108:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Ehdr *ehdr = &einfo->ehdr;
 100a10c:	e0bffc17 	ldw	r2,-16(fp)
 100a110:	e0bffd15 	stw	r2,-12(fp)
		Elf64_Shdr *shdr = einfo->shdrs;
 100a114:	e0bffc17 	ldw	r2,-16(fp)
 100a118:	10801217 	ldw	r2,72(r2)
 100a11c:	e0bff815 	stw	r2,-32(fp)

		name_table = einfo->shstrtab;
 100a120:	e0bffc17 	ldw	r2,-16(fp)
 100a124:	10801317 	ldw	r2,76(r2)
 100a128:	e0bffb15 	stw	r2,-20(fp)
		if (shdr == NULL || name_table == NULL)
 100a12c:	e0bff817 	ldw	r2,-32(fp)
 100a130:	10000226 	beq	r2,zero,100a13c <elf_get_section_from_name+0x100>
 100a134:	e0bffb17 	ldw	r2,-20(fp)
 100a138:	1000021e 	bne	r2,zero,100a144 <elf_get_section_from_name+0x108>
			return NULL;
 100a13c:	0005883a 	mov	r2,zero
 100a140:	00001906 	br	100a1a8 <elf_get_section_from_name+0x16c>
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a144:	e03ff615 	stw	zero,-40(fp)
 100a148:	00001106 	br	100a190 <elf_get_section_from_name+0x154>
			if (strcmp(name, name_table + shdr->sh_name))
 100a14c:	e0bff817 	ldw	r2,-32(fp)
 100a150:	10800017 	ldw	r2,0(r2)
 100a154:	e0fffb17 	ldw	r3,-20(fp)
 100a158:	1885883a 	add	r2,r3,r2
 100a15c:	100b883a 	mov	r5,r2
 100a160:	e13fff17 	ldw	r4,-4(fp)
 100a164:	1013ee80 	call	1013ee8 <strcmp>
 100a168:	10000726 	beq	r2,zero,100a188 <elf_get_section_from_name+0x14c>
		Elf64_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a16c:	e0bff617 	ldw	r2,-40(fp)
 100a170:	10800044 	addi	r2,r2,1
 100a174:	e0bff615 	stw	r2,-40(fp)
 100a178:	e0bff817 	ldw	r2,-32(fp)
 100a17c:	10801004 	addi	r2,r2,64
 100a180:	e0bff815 	stw	r2,-32(fp)
 100a184:	00000206 	br	100a190 <elf_get_section_from_name+0x154>
			if (strcmp(name, name_table + shdr->sh_name))
				continue;
			else
				return shdr;
 100a188:	e0bff817 	ldw	r2,-32(fp)
 100a18c:	00000606 	br	100a1a8 <elf_get_section_from_name+0x16c>
		Elf64_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a190:	e0bffd17 	ldw	r2,-12(fp)
 100a194:	10800f0b 	ldhu	r2,60(r2)
 100a198:	10bfffcc 	andi	r2,r2,65535
 100a19c:	e0fff617 	ldw	r3,-40(fp)
 100a1a0:	18bfea36 	bltu	r3,r2,100a14c <__alt_data_end+0xff00a14c>
				continue;
			else
				return shdr;
		}
	}
	return NULL;
 100a1a4:	0005883a 	mov	r2,zero
}
 100a1a8:	e037883a 	mov	sp,fp
 100a1ac:	dfc00117 	ldw	ra,4(sp)
 100a1b0:	df000017 	ldw	fp,0(sp)
 100a1b4:	dec00204 	addi	sp,sp,8
 100a1b8:	f800283a 	ret

0100a1bc <elf_get_section_from_index>:

static void *elf_get_section_from_index(void *elf_info, int index)
{
 100a1bc:	defff604 	addi	sp,sp,-40
 100a1c0:	dfc00915 	stw	ra,36(sp)
 100a1c4:	df000815 	stw	fp,32(sp)
 100a1c8:	df000804 	addi	fp,sp,32
 100a1cc:	e13ffe15 	stw	r4,-8(fp)
 100a1d0:	e17fff15 	stw	r5,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a1d4:	e13ffe17 	ldw	r4,-8(fp)
 100a1d8:	100990c0 	call	100990c <elf_is_64>
 100a1dc:	10001a1e 	bne	r2,zero,100a248 <elf_get_section_from_index+0x8c>
		struct elf32_info *einfo = elf_info;
 100a1e0:	e0bffe17 	ldw	r2,-8(fp)
 100a1e4:	e0bff815 	stw	r2,-32(fp)
		Elf32_Ehdr *ehdr = &einfo->ehdr;
 100a1e8:	e0bff817 	ldw	r2,-32(fp)
 100a1ec:	e0bff915 	stw	r2,-28(fp)
		Elf32_Shdr *shdr = einfo->shdrs;
 100a1f0:	e0bff817 	ldw	r2,-32(fp)
 100a1f4:	10800f17 	ldw	r2,60(r2)
 100a1f8:	e0bffa15 	stw	r2,-24(fp)

		if (shdr == NULL)
 100a1fc:	e0bffa17 	ldw	r2,-24(fp)
 100a200:	1000021e 	bne	r2,zero,100a20c <elf_get_section_from_index+0x50>
			return NULL;
 100a204:	0005883a 	mov	r2,zero
 100a208:	00002806 	br	100a2ac <elf_get_section_from_index+0xf0>
		if (index < 0 || index >= ehdr->e_shnum)
 100a20c:	e0bfff17 	ldw	r2,-4(fp)
 100a210:	10000516 	blt	r2,zero,100a228 <elf_get_section_from_index+0x6c>
 100a214:	e0bff917 	ldw	r2,-28(fp)
 100a218:	10800c0b 	ldhu	r2,48(r2)
 100a21c:	10bfffcc 	andi	r2,r2,65535
 100a220:	e0ffff17 	ldw	r3,-4(fp)
 100a224:	18800216 	blt	r3,r2,100a230 <elf_get_section_from_index+0x74>
			return NULL;
 100a228:	0005883a 	mov	r2,zero
 100a22c:	00001f06 	br	100a2ac <elf_get_section_from_index+0xf0>
		return &einfo->shdrs[index];
 100a230:	e0bff817 	ldw	r2,-32(fp)
 100a234:	10c00f17 	ldw	r3,60(r2)
 100a238:	e0bfff17 	ldw	r2,-4(fp)
 100a23c:	10800a24 	muli	r2,r2,40
 100a240:	1885883a 	add	r2,r3,r2
 100a244:	00001906 	br	100a2ac <elf_get_section_from_index+0xf0>
	} else {
		struct elf64_info *einfo = elf_info;
 100a248:	e0bffe17 	ldw	r2,-8(fp)
 100a24c:	e0bffb15 	stw	r2,-20(fp)
		Elf64_Ehdr *ehdr = &einfo->ehdr;
 100a250:	e0bffb17 	ldw	r2,-20(fp)
 100a254:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Shdr *shdr = einfo->shdrs;
 100a258:	e0bffb17 	ldw	r2,-20(fp)
 100a25c:	10801217 	ldw	r2,72(r2)
 100a260:	e0bffd15 	stw	r2,-12(fp)

		if (shdr == NULL)
 100a264:	e0bffd17 	ldw	r2,-12(fp)
 100a268:	1000021e 	bne	r2,zero,100a274 <elf_get_section_from_index+0xb8>
			return NULL;
 100a26c:	0005883a 	mov	r2,zero
 100a270:	00000e06 	br	100a2ac <elf_get_section_from_index+0xf0>
		if (index < 0 || index >= ehdr->e_shnum)
 100a274:	e0bfff17 	ldw	r2,-4(fp)
 100a278:	10000516 	blt	r2,zero,100a290 <elf_get_section_from_index+0xd4>
 100a27c:	e0bffc17 	ldw	r2,-16(fp)
 100a280:	10800f0b 	ldhu	r2,60(r2)
 100a284:	10bfffcc 	andi	r2,r2,65535
 100a288:	e0ffff17 	ldw	r3,-4(fp)
 100a28c:	18800216 	blt	r3,r2,100a298 <elf_get_section_from_index+0xdc>
			return NULL;
 100a290:	0005883a 	mov	r2,zero
 100a294:	00000506 	br	100a2ac <elf_get_section_from_index+0xf0>
		return &einfo->shdrs[index];
 100a298:	e0bffb17 	ldw	r2,-20(fp)
 100a29c:	10c01217 	ldw	r3,72(r2)
 100a2a0:	e0bfff17 	ldw	r2,-4(fp)
 100a2a4:	100491ba 	slli	r2,r2,6
 100a2a8:	1885883a 	add	r2,r3,r2
	}
}
 100a2ac:	e037883a 	mov	sp,fp
 100a2b0:	dfc00117 	ldw	ra,4(sp)
 100a2b4:	df000017 	ldw	fp,0(sp)
 100a2b8:	dec00204 	addi	sp,sp,8
 100a2bc:	f800283a 	ret

0100a2c0 <elf_parse_section>:
			      metal_phys_addr_t *sh_addr,
			      size_t *sh_offset, size_t *sh_size,
			      unsigned int *sh_link, unsigned int *sh_info,
			      unsigned int *sh_addralign,
			      size_t *sh_entsize)
{
 100a2c0:	defff804 	addi	sp,sp,-32
 100a2c4:	dfc00715 	stw	ra,28(sp)
 100a2c8:	df000615 	stw	fp,24(sp)
 100a2cc:	df000604 	addi	fp,sp,24
 100a2d0:	e13ffc15 	stw	r4,-16(fp)
 100a2d4:	e17ffd15 	stw	r5,-12(fp)
 100a2d8:	e1bffe15 	stw	r6,-8(fp)
 100a2dc:	e1ffff15 	stw	r7,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a2e0:	e13ffc17 	ldw	r4,-16(fp)
 100a2e4:	100990c0 	call	100990c <elf_is_64>
 100a2e8:	1000391e 	bne	r2,zero,100a3d0 <elf_parse_section+0x110>
		Elf32_Shdr *shdr = elf_shdr;
 100a2ec:	e0bffd17 	ldw	r2,-12(fp)
 100a2f0:	e0bffa15 	stw	r2,-24(fp)

		if (sh_type != NULL)
 100a2f4:	e0bffe17 	ldw	r2,-8(fp)
 100a2f8:	10000426 	beq	r2,zero,100a30c <elf_parse_section+0x4c>
			*sh_type = shdr->sh_type;
 100a2fc:	e0bffa17 	ldw	r2,-24(fp)
 100a300:	10c00117 	ldw	r3,4(r2)
 100a304:	e0bffe17 	ldw	r2,-8(fp)
 100a308:	10c00015 	stw	r3,0(r2)
		if (sh_flags != NULL)
 100a30c:	e0bfff17 	ldw	r2,-4(fp)
 100a310:	10000426 	beq	r2,zero,100a324 <elf_parse_section+0x64>
			*sh_flags = shdr->sh_flags;
 100a314:	e0bffa17 	ldw	r2,-24(fp)
 100a318:	10c00217 	ldw	r3,8(r2)
 100a31c:	e0bfff17 	ldw	r2,-4(fp)
 100a320:	10c00015 	stw	r3,0(r2)
		if (sh_addr != NULL)
 100a324:	e0800217 	ldw	r2,8(fp)
 100a328:	10000426 	beq	r2,zero,100a33c <elf_parse_section+0x7c>
			*sh_addr = (metal_phys_addr_t)shdr->sh_addr;
 100a32c:	e0bffa17 	ldw	r2,-24(fp)
 100a330:	10c00317 	ldw	r3,12(r2)
 100a334:	e0800217 	ldw	r2,8(fp)
 100a338:	10c00015 	stw	r3,0(r2)
		if (sh_offset != NULL)
 100a33c:	e0800317 	ldw	r2,12(fp)
 100a340:	10000426 	beq	r2,zero,100a354 <elf_parse_section+0x94>
			*sh_offset = shdr->sh_offset;
 100a344:	e0bffa17 	ldw	r2,-24(fp)
 100a348:	10c00417 	ldw	r3,16(r2)
 100a34c:	e0800317 	ldw	r2,12(fp)
 100a350:	10c00015 	stw	r3,0(r2)
		if (sh_size != NULL)
 100a354:	e0800417 	ldw	r2,16(fp)
 100a358:	10000426 	beq	r2,zero,100a36c <elf_parse_section+0xac>
			*sh_size = shdr->sh_size;
 100a35c:	e0bffa17 	ldw	r2,-24(fp)
 100a360:	10c00517 	ldw	r3,20(r2)
 100a364:	e0800417 	ldw	r2,16(fp)
 100a368:	10c00015 	stw	r3,0(r2)
		if (sh_link != NULL)
 100a36c:	e0800517 	ldw	r2,20(fp)
 100a370:	10000426 	beq	r2,zero,100a384 <elf_parse_section+0xc4>
			*sh_link = shdr->sh_link;
 100a374:	e0bffa17 	ldw	r2,-24(fp)
 100a378:	10c00617 	ldw	r3,24(r2)
 100a37c:	e0800517 	ldw	r2,20(fp)
 100a380:	10c00015 	stw	r3,0(r2)
		if (sh_info != NULL)
 100a384:	e0800617 	ldw	r2,24(fp)
 100a388:	10000426 	beq	r2,zero,100a39c <elf_parse_section+0xdc>
			*sh_info = shdr->sh_info;
 100a38c:	e0bffa17 	ldw	r2,-24(fp)
 100a390:	10c00717 	ldw	r3,28(r2)
 100a394:	e0800617 	ldw	r2,24(fp)
 100a398:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
 100a39c:	e0800717 	ldw	r2,28(fp)
 100a3a0:	10000426 	beq	r2,zero,100a3b4 <elf_parse_section+0xf4>
			*sh_addralign = shdr->sh_addralign;
 100a3a4:	e0bffa17 	ldw	r2,-24(fp)
 100a3a8:	10c00817 	ldw	r3,32(r2)
 100a3ac:	e0800717 	ldw	r2,28(fp)
 100a3b0:	10c00015 	stw	r3,0(r2)
		if (sh_entsize != NULL)
 100a3b4:	e0800817 	ldw	r2,32(fp)
 100a3b8:	10004926 	beq	r2,zero,100a4e0 <elf_parse_section+0x220>
			*sh_entsize = shdr->sh_entsize;
 100a3bc:	e0bffa17 	ldw	r2,-24(fp)
 100a3c0:	10c00917 	ldw	r3,36(r2)
 100a3c4:	e0800817 	ldw	r2,32(fp)
 100a3c8:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
			*sh_addralign = shdr->sh_addralign;
		if (sh_entsize != NULL)
			*sh_entsize = shdr->sh_entsize;
	}
}
 100a3cc:	00004406 	br	100a4e0 <elf_parse_section+0x220>
		if (sh_addralign != NULL)
			*sh_addralign = shdr->sh_addralign;
		if (sh_entsize != NULL)
			*sh_entsize = shdr->sh_entsize;
	} else {
		Elf64_Shdr *shdr = elf_shdr;
 100a3d0:	e0bffd17 	ldw	r2,-12(fp)
 100a3d4:	e0bffb15 	stw	r2,-20(fp)

		if (sh_type != NULL)
 100a3d8:	e0bffe17 	ldw	r2,-8(fp)
 100a3dc:	10000426 	beq	r2,zero,100a3f0 <elf_parse_section+0x130>
			*sh_type = shdr->sh_type;
 100a3e0:	e0bffb17 	ldw	r2,-20(fp)
 100a3e4:	10c00117 	ldw	r3,4(r2)
 100a3e8:	e0bffe17 	ldw	r2,-8(fp)
 100a3ec:	10c00015 	stw	r3,0(r2)
		if (sh_flags != NULL)
 100a3f0:	e0bfff17 	ldw	r2,-4(fp)
 100a3f4:	10000626 	beq	r2,zero,100a410 <elf_parse_section+0x150>
			*sh_flags = shdr->sh_flags;
 100a3f8:	e13ffb17 	ldw	r4,-20(fp)
 100a3fc:	20800217 	ldw	r2,8(r4)
 100a400:	20c00317 	ldw	r3,12(r4)
 100a404:	1007883a 	mov	r3,r2
 100a408:	e0bfff17 	ldw	r2,-4(fp)
 100a40c:	10c00015 	stw	r3,0(r2)
		if (sh_addr != NULL)
 100a410:	e0800217 	ldw	r2,8(fp)
 100a414:	10000626 	beq	r2,zero,100a430 <elf_parse_section+0x170>
			*sh_addr = (metal_phys_addr_t)shdr->sh_addr;
 100a418:	e13ffb17 	ldw	r4,-20(fp)
 100a41c:	20800417 	ldw	r2,16(r4)
 100a420:	20c00517 	ldw	r3,20(r4)
 100a424:	1007883a 	mov	r3,r2
 100a428:	e0800217 	ldw	r2,8(fp)
 100a42c:	10c00015 	stw	r3,0(r2)
		if (sh_offset != NULL)
 100a430:	e0800317 	ldw	r2,12(fp)
 100a434:	10000626 	beq	r2,zero,100a450 <elf_parse_section+0x190>
			*sh_offset = shdr->sh_offset;
 100a438:	e13ffb17 	ldw	r4,-20(fp)
 100a43c:	20800617 	ldw	r2,24(r4)
 100a440:	20c00717 	ldw	r3,28(r4)
 100a444:	1007883a 	mov	r3,r2
 100a448:	e0800317 	ldw	r2,12(fp)
 100a44c:	10c00015 	stw	r3,0(r2)
		if (sh_size != NULL)
 100a450:	e0800417 	ldw	r2,16(fp)
 100a454:	10000626 	beq	r2,zero,100a470 <elf_parse_section+0x1b0>
			*sh_size = shdr->sh_size;
 100a458:	e13ffb17 	ldw	r4,-20(fp)
 100a45c:	20800817 	ldw	r2,32(r4)
 100a460:	20c00917 	ldw	r3,36(r4)
 100a464:	1007883a 	mov	r3,r2
 100a468:	e0800417 	ldw	r2,16(fp)
 100a46c:	10c00015 	stw	r3,0(r2)
		if (sh_link != NULL)
 100a470:	e0800517 	ldw	r2,20(fp)
 100a474:	10000426 	beq	r2,zero,100a488 <elf_parse_section+0x1c8>
			*sh_link = shdr->sh_link;
 100a478:	e0bffb17 	ldw	r2,-20(fp)
 100a47c:	10c00a17 	ldw	r3,40(r2)
 100a480:	e0800517 	ldw	r2,20(fp)
 100a484:	10c00015 	stw	r3,0(r2)
		if (sh_info != NULL)
 100a488:	e0800617 	ldw	r2,24(fp)
 100a48c:	10000426 	beq	r2,zero,100a4a0 <elf_parse_section+0x1e0>
			*sh_info = shdr->sh_info;
 100a490:	e0bffb17 	ldw	r2,-20(fp)
 100a494:	10c00b17 	ldw	r3,44(r2)
 100a498:	e0800617 	ldw	r2,24(fp)
 100a49c:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
 100a4a0:	e0800717 	ldw	r2,28(fp)
 100a4a4:	10000626 	beq	r2,zero,100a4c0 <elf_parse_section+0x200>
			*sh_addralign = shdr->sh_addralign;
 100a4a8:	e13ffb17 	ldw	r4,-20(fp)
 100a4ac:	20800c17 	ldw	r2,48(r4)
 100a4b0:	20c00d17 	ldw	r3,52(r4)
 100a4b4:	1007883a 	mov	r3,r2
 100a4b8:	e0800717 	ldw	r2,28(fp)
 100a4bc:	10c00015 	stw	r3,0(r2)
		if (sh_entsize != NULL)
 100a4c0:	e0800817 	ldw	r2,32(fp)
 100a4c4:	10000626 	beq	r2,zero,100a4e0 <elf_parse_section+0x220>
			*sh_entsize = shdr->sh_entsize;
 100a4c8:	e13ffb17 	ldw	r4,-20(fp)
 100a4cc:	20800e17 	ldw	r2,56(r4)
 100a4d0:	20c00f17 	ldw	r3,60(r4)
 100a4d4:	1007883a 	mov	r3,r2
 100a4d8:	e0800817 	ldw	r2,32(fp)
 100a4dc:	10c00015 	stw	r3,0(r2)
	}
}
 100a4e0:	0001883a 	nop
 100a4e4:	e037883a 	mov	sp,fp
 100a4e8:	dfc00117 	ldw	ra,4(sp)
 100a4ec:	df000017 	ldw	fp,0(sp)
 100a4f0:	dec00204 	addi	sp,sp,8
 100a4f4:	f800283a 	ret

0100a4f8 <elf_next_load_segment>:

static const void *elf_next_load_segment(void *elf_info, int *nseg,
				   metal_phys_addr_t *da,
				   size_t *noffset, size_t *nfsize,
				   size_t *nmsize)
{
 100a4f8:	defff404 	addi	sp,sp,-48
 100a4fc:	dfc00b15 	stw	ra,44(sp)
 100a500:	df000a15 	stw	fp,40(sp)
 100a504:	df000a04 	addi	fp,sp,40
 100a508:	e13ffc15 	stw	r4,-16(fp)
 100a50c:	e17ffd15 	stw	r5,-12(fp)
 100a510:	e1bffe15 	stw	r6,-8(fp)
 100a514:	e1ffff15 	stw	r7,-4(fp)
	const void *phdr;
	unsigned int p_type = PT_NULL;
 100a518:	e03ffb15 	stw	zero,-20(fp)

	if (elf_info == NULL || nseg == NULL)
 100a51c:	e0bffc17 	ldw	r2,-16(fp)
 100a520:	10000226 	beq	r2,zero,100a52c <elf_next_load_segment+0x34>
 100a524:	e0bffd17 	ldw	r2,-12(fp)
 100a528:	10001e1e 	bne	r2,zero,100a5a4 <elf_next_load_segment+0xac>
		return NULL;
 100a52c:	0005883a 	mov	r2,zero
 100a530:	00002006 	br	100a5b4 <elf_next_load_segment+0xbc>
	while(p_type != PT_LOAD) {
		phdr = elf_get_segment_from_index(elf_info, *nseg);
 100a534:	e0bffd17 	ldw	r2,-12(fp)
 100a538:	10800017 	ldw	r2,0(r2)
 100a53c:	100b883a 	mov	r5,r2
 100a540:	e13ffc17 	ldw	r4,-16(fp)
 100a544:	1009f400 	call	1009f40 <elf_get_segment_from_index>
 100a548:	e0bffa15 	stw	r2,-24(fp)
		if (phdr == NULL)
 100a54c:	e0bffa17 	ldw	r2,-24(fp)
 100a550:	1000021e 	bne	r2,zero,100a55c <elf_next_load_segment+0x64>
			return NULL;
 100a554:	0005883a 	mov	r2,zero
 100a558:	00001606 	br	100a5b4 <elf_next_load_segment+0xbc>
		elf_parse_segment(elf_info, phdr, &p_type, noffset,
 100a55c:	e0fffb04 	addi	r3,fp,-20
 100a560:	e0800317 	ldw	r2,12(fp)
 100a564:	d8800315 	stw	r2,12(sp)
 100a568:	e0800217 	ldw	r2,8(fp)
 100a56c:	d8800215 	stw	r2,8(sp)
 100a570:	d8000115 	stw	zero,4(sp)
 100a574:	e0bffe17 	ldw	r2,-8(fp)
 100a578:	d8800015 	stw	r2,0(sp)
 100a57c:	e1ffff17 	ldw	r7,-4(fp)
 100a580:	180d883a 	mov	r6,r3
 100a584:	e17ffa17 	ldw	r5,-24(fp)
 100a588:	e13ffc17 	ldw	r4,-16(fp)
 100a58c:	1009da00 	call	1009da0 <elf_parse_segment>
				  da, NULL, nfsize, nmsize);
		*nseg = *nseg + 1;
 100a590:	e0bffd17 	ldw	r2,-12(fp)
 100a594:	10800017 	ldw	r2,0(r2)
 100a598:	10c00044 	addi	r3,r2,1
 100a59c:	e0bffd17 	ldw	r2,-12(fp)
 100a5a0:	10c00015 	stw	r3,0(r2)
	const void *phdr;
	unsigned int p_type = PT_NULL;

	if (elf_info == NULL || nseg == NULL)
		return NULL;
	while(p_type != PT_LOAD) {
 100a5a4:	e0bffb17 	ldw	r2,-20(fp)
 100a5a8:	10800058 	cmpnei	r2,r2,1
 100a5ac:	103fe11e 	bne	r2,zero,100a534 <__alt_data_end+0xff00a534>
			return NULL;
		elf_parse_segment(elf_info, phdr, &p_type, noffset,
				  da, NULL, nfsize, nmsize);
		*nseg = *nseg + 1;
	}
	return phdr;
 100a5b0:	e0bffa17 	ldw	r2,-24(fp)
}
 100a5b4:	e037883a 	mov	sp,fp
 100a5b8:	dfc00117 	ldw	ra,4(sp)
 100a5bc:	df000017 	ldw	fp,0(sp)
 100a5c0:	dec00204 	addi	sp,sp,8
 100a5c4:	f800283a 	ret

0100a5c8 <elf_info_size>:

static size_t elf_info_size(const void *img_data)
{
 100a5c8:	defffd04 	addi	sp,sp,-12
 100a5cc:	dfc00215 	stw	ra,8(sp)
 100a5d0:	df000115 	stw	fp,4(sp)
 100a5d4:	df000104 	addi	fp,sp,4
 100a5d8:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(img_data) == 0)
 100a5dc:	e13fff17 	ldw	r4,-4(fp)
 100a5e0:	100990c0 	call	100990c <elf_is_64>
 100a5e4:	1000021e 	bne	r2,zero,100a5f0 <elf_info_size+0x28>
		return sizeof(struct elf32_info);
 100a5e8:	00801104 	movi	r2,68
 100a5ec:	00000106 	br	100a5f4 <elf_info_size+0x2c>
	else
		return sizeof(struct elf64_info);
 100a5f0:	00801404 	movi	r2,80
}
 100a5f4:	e037883a 	mov	sp,fp
 100a5f8:	dfc00117 	ldw	ra,4(sp)
 100a5fc:	df000017 	ldw	fp,0(sp)
 100a600:	dec00204 	addi	sp,sp,8
 100a604:	f800283a 	ret

0100a608 <elf_identify>:

int elf_identify(const void *img_data, size_t len)
{
 100a608:	defffc04 	addi	sp,sp,-16
 100a60c:	dfc00315 	stw	ra,12(sp)
 100a610:	df000215 	stw	fp,8(sp)
 100a614:	df000204 	addi	fp,sp,8
 100a618:	e13ffe15 	stw	r4,-8(fp)
 100a61c:	e17fff15 	stw	r5,-4(fp)
	if (len < SELFMAG || img_data == NULL)
 100a620:	e0bfff17 	ldw	r2,-4(fp)
 100a624:	10800130 	cmpltui	r2,r2,4
 100a628:	1000021e 	bne	r2,zero,100a634 <elf_identify+0x2c>
 100a62c:	e0bffe17 	ldw	r2,-8(fp)
 100a630:	1000021e 	bne	r2,zero,100a63c <elf_identify+0x34>
		return -RPROC_EINVAL;
 100a634:	00bfff84 	movi	r2,-2
 100a638:	00000906 	br	100a660 <elf_identify+0x58>
	if (memcmp(img_data, ELFMAG, SELFMAG) != 0)
 100a63c:	01800104 	movi	r6,4
 100a640:	014040b4 	movhi	r5,258
 100a644:	29553704 	addi	r5,r5,21724
 100a648:	e13ffe17 	ldw	r4,-8(fp)
 100a64c:	101396c0 	call	101396c <memcmp>
 100a650:	10000226 	beq	r2,zero,100a65c <elf_identify+0x54>
		return -RPROC_EINVAL;
 100a654:	00bfff84 	movi	r2,-2
 100a658:	00000106 	br	100a660 <elf_identify+0x58>
	else
		return 0;
 100a65c:	0005883a 	mov	r2,zero
}
 100a660:	e037883a 	mov	sp,fp
 100a664:	dfc00117 	ldw	ra,4(sp)
 100a668:	df000017 	ldw	fp,0(sp)
 100a66c:	dec00204 	addi	sp,sp,8
 100a670:	f800283a 	ret

0100a674 <elf_load_header>:

int elf_load_header(const void *img_data, size_t offset, size_t len,
		    void **img_info, int last_load_state,
		    size_t *noffset, size_t *nlen)
{
 100a674:	deffe204 	addi	sp,sp,-120
 100a678:	dfc01d15 	stw	ra,116(sp)
 100a67c:	df001c15 	stw	fp,112(sp)
 100a680:	dc001b15 	stw	r16,108(sp)
 100a684:	df001c04 	addi	fp,sp,112
 100a688:	e13ffb15 	stw	r4,-20(fp)
 100a68c:	e17ffc15 	stw	r5,-16(fp)
 100a690:	e1bffd15 	stw	r6,-12(fp)
 100a694:	e1fffe15 	stw	r7,-8(fp)
	int *load_state;

	metal_assert(noffset != NULL);
 100a698:	e0800317 	ldw	r2,12(fp)
 100a69c:	1000081e 	bne	r2,zero,100a6c0 <elf_load_header+0x4c>
 100a6a0:	01c040b4 	movhi	r7,258
 100a6a4:	39d53904 	addi	r7,r7,21732
 100a6a8:	018040b4 	movhi	r6,258
 100a6ac:	3195ac04 	addi	r6,r6,22192
 100a6b0:	014064c4 	movi	r5,403
 100a6b4:	010040b4 	movhi	r4,258
 100a6b8:	21153f04 	addi	r4,r4,21756
 100a6bc:	10138940 	call	1013894 <__assert_func>
	metal_assert(nlen != NULL);
 100a6c0:	e0800417 	ldw	r2,16(fp)
 100a6c4:	1000081e 	bne	r2,zero,100a6e8 <elf_load_header+0x74>
 100a6c8:	01c040b4 	movhi	r7,258
 100a6cc:	39d54804 	addi	r7,r7,21792
 100a6d0:	018040b4 	movhi	r6,258
 100a6d4:	3195ac04 	addi	r6,r6,22192
 100a6d8:	01406504 	movi	r5,404
 100a6dc:	010040b4 	movhi	r4,258
 100a6e0:	21153f04 	addi	r4,r4,21756
 100a6e4:	10138940 	call	1013894 <__assert_func>
	/* Get ELF header */
	if (last_load_state == ELF_STATE_INIT) {
 100a6e8:	e0800217 	ldw	r2,8(fp)
 100a6ec:	1000431e 	bne	r2,zero,100a7fc <elf_load_header+0x188>
		size_t tmpsize;

		metal_log(METAL_LOG_DEBUG, "Loading ELF headering\r\n");
 100a6f0:	008060f4 	movhi	r2,387
 100a6f4:	10a97a04 	addi	r2,r2,-23064
 100a6f8:	10800017 	ldw	r2,0(r2)
 100a6fc:	108001f0 	cmpltui	r2,r2,7
 100a700:	10000b1e 	bne	r2,zero,100a730 <elf_load_header+0xbc>
 100a704:	008060f4 	movhi	r2,387
 100a708:	10a97a04 	addi	r2,r2,-23064
 100a70c:	10800117 	ldw	r2,4(r2)
 100a710:	10000726 	beq	r2,zero,100a730 <elf_load_header+0xbc>
 100a714:	008060f4 	movhi	r2,387
 100a718:	10a97a04 	addi	r2,r2,-23064
 100a71c:	10800117 	ldw	r2,4(r2)
 100a720:	014040b4 	movhi	r5,258
 100a724:	29554d04 	addi	r5,r5,21812
 100a728:	010001c4 	movi	r4,7
 100a72c:	103ee83a 	callr	r2
		tmpsize = elf_ehdr_size(img_data);
 100a730:	e13ffb17 	ldw	r4,-20(fp)
 100a734:	10099580 	call	1009958 <elf_ehdr_size>
 100a738:	e0bfeb15 	stw	r2,-84(fp)
		if (len < tmpsize) {
 100a73c:	e0fffd17 	ldw	r3,-12(fp)
 100a740:	e0bfeb17 	ldw	r2,-84(fp)
 100a744:	1880072e 	bgeu	r3,r2,100a764 <elf_load_header+0xf0>
			*noffset = 0;
 100a748:	e0800317 	ldw	r2,12(fp)
 100a74c:	10000015 	stw	zero,0(r2)
			*nlen = tmpsize;
 100a750:	e0800417 	ldw	r2,16(fp)
 100a754:	e0ffeb17 	ldw	r3,-84(fp)
 100a758:	10c00015 	stw	r3,0(r2)
			return ELF_STATE_INIT;
 100a75c:	0005883a 	mov	r2,zero
 100a760:	00018906 	br	100ad88 <elf_load_header+0x714>
		} else {
			size_t infosize = elf_info_size(img_data);
 100a764:	e13ffb17 	ldw	r4,-20(fp)
 100a768:	100a5c80 	call	100a5c8 <elf_info_size>
 100a76c:	e0bfec15 	stw	r2,-80(fp)

			if (*img_info == NULL) {
 100a770:	e0bffe17 	ldw	r2,-8(fp)
 100a774:	10800017 	ldw	r2,0(r2)
 100a778:	1000101e 	bne	r2,zero,100a7bc <elf_load_header+0x148>
				*img_info = metal_allocate_memory(infosize);
 100a77c:	e13fec17 	ldw	r4,-80(fp)
 100a780:	10098a80 	call	10098a8 <metal_allocate_memory>
 100a784:	1007883a 	mov	r3,r2
 100a788:	e0bffe17 	ldw	r2,-8(fp)
 100a78c:	10c00015 	stw	r3,0(r2)
				if (*img_info == NULL)
 100a790:	e0bffe17 	ldw	r2,-8(fp)
 100a794:	10800017 	ldw	r2,0(r2)
 100a798:	1000021e 	bne	r2,zero,100a7a4 <elf_load_header+0x130>
					return -RPROC_ENOMEM;
 100a79c:	00bfffc4 	movi	r2,-1
 100a7a0:	00017906 	br	100ad88 <elf_load_header+0x714>
				memset(*img_info, 0, infosize);
 100a7a4:	e0bffe17 	ldw	r2,-8(fp)
 100a7a8:	10800017 	ldw	r2,0(r2)
 100a7ac:	e1bfec17 	ldw	r6,-80(fp)
 100a7b0:	000b883a 	mov	r5,zero
 100a7b4:	1009883a 	mov	r4,r2
 100a7b8:	1013b300 	call	1013b30 <memset>
			}
			memcpy(*img_info, img_data, tmpsize);
 100a7bc:	e0bffe17 	ldw	r2,-8(fp)
 100a7c0:	10800017 	ldw	r2,0(r2)
 100a7c4:	e1bfeb17 	ldw	r6,-84(fp)
 100a7c8:	e17ffb17 	ldw	r5,-20(fp)
 100a7cc:	1009883a 	mov	r4,r2
 100a7d0:	10139e80 	call	10139e8 <memcpy>
			load_state = elf_load_state(*img_info);
 100a7d4:	e0bffe17 	ldw	r2,-8(fp)
 100a7d8:	10800017 	ldw	r2,0(r2)
 100a7dc:	1009883a 	mov	r4,r2
 100a7e0:	1009d480 	call	1009d48 <elf_load_state>
 100a7e4:	e0bfed15 	stw	r2,-76(fp)
			*load_state = ELF_STATE_WAIT_FOR_PHDRS;
 100a7e8:	e0bfed17 	ldw	r2,-76(fp)
 100a7ec:	00c04004 	movi	r3,256
 100a7f0:	10c00015 	stw	r3,0(r2)
			last_load_state = ELF_STATE_WAIT_FOR_PHDRS;
 100a7f4:	00804004 	movi	r2,256
 100a7f8:	e0800215 	stw	r2,8(fp)
		}
	}
	metal_assert(*img_info != NULL);
 100a7fc:	e0bffe17 	ldw	r2,-8(fp)
 100a800:	10800017 	ldw	r2,0(r2)
 100a804:	1000081e 	bne	r2,zero,100a828 <elf_load_header+0x1b4>
 100a808:	01c040b4 	movhi	r7,258
 100a80c:	39d55304 	addi	r7,r7,21836
 100a810:	018040b4 	movhi	r6,258
 100a814:	3195ac04 	addi	r6,r6,22192
 100a818:	01406b84 	movi	r5,430
 100a81c:	010040b4 	movhi	r4,258
 100a820:	21153f04 	addi	r4,r4,21756
 100a824:	10138940 	call	1013894 <__assert_func>
	load_state = elf_load_state(*img_info);
 100a828:	e0bffe17 	ldw	r2,-8(fp)
 100a82c:	10800017 	ldw	r2,0(r2)
 100a830:	1009883a 	mov	r4,r2
 100a834:	1009d480 	call	1009d48 <elf_load_state>
 100a838:	e0bfed15 	stw	r2,-76(fp)
	if (last_load_state != *load_state)
 100a83c:	e0bfed17 	ldw	r2,-76(fp)
 100a840:	10c00017 	ldw	r3,0(r2)
 100a844:	e0800217 	ldw	r2,8(fp)
 100a848:	18800226 	beq	r3,r2,100a854 <elf_load_header+0x1e0>
		return -RPROC_EINVAL;
 100a84c:	00bfff84 	movi	r2,-2
 100a850:	00014d06 	br	100ad88 <elf_load_header+0x714>
	/* Get ELF program headers */
	if (*load_state == ELF_STATE_WAIT_FOR_PHDRS) {
 100a854:	e0bfed17 	ldw	r2,-76(fp)
 100a858:	10800017 	ldw	r2,0(r2)
 100a85c:	10804018 	cmpnei	r2,r2,256
 100a860:	1000541e 	bne	r2,zero,100a9b4 <elf_load_header+0x340>
		size_t phdrs_size;
		size_t phdrs_offset;
		void **phdrs;
		const void *img_phdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF program header.\r\n");
 100a864:	008060f4 	movhi	r2,387
 100a868:	10a97a04 	addi	r2,r2,-23064
 100a86c:	10800017 	ldw	r2,0(r2)
 100a870:	108001f0 	cmpltui	r2,r2,7
 100a874:	10000b1e 	bne	r2,zero,100a8a4 <elf_load_header+0x230>
 100a878:	008060f4 	movhi	r2,387
 100a87c:	10a97a04 	addi	r2,r2,-23064
 100a880:	10800117 	ldw	r2,4(r2)
 100a884:	10000726 	beq	r2,zero,100a8a4 <elf_load_header+0x230>
 100a888:	008060f4 	movhi	r2,387
 100a88c:	10a97a04 	addi	r2,r2,-23064
 100a890:	10800117 	ldw	r2,4(r2)
 100a894:	014040b4 	movhi	r5,258
 100a898:	29555a04 	addi	r5,r5,21864
 100a89c:	010001c4 	movi	r4,7
 100a8a0:	103ee83a 	callr	r2
		phdrs_offset = elf_phoff(*img_info);
 100a8a4:	e0bffe17 	ldw	r2,-8(fp)
 100a8a8:	10800017 	ldw	r2,0(r2)
 100a8ac:	1009883a 	mov	r4,r2
 100a8b0:	10099a80 	call	10099a8 <elf_phoff>
 100a8b4:	e0bfee15 	stw	r2,-72(fp)
		phdrs_size = elf_phnum(*img_info) * elf_phentsize(*img_info);
 100a8b8:	e0bffe17 	ldw	r2,-8(fp)
 100a8bc:	10800017 	ldw	r2,0(r2)
 100a8c0:	1009883a 	mov	r4,r2
 100a8c4:	1009a640 	call	1009a64 <elf_phnum>
 100a8c8:	1021883a 	mov	r16,r2
 100a8cc:	e0bffe17 	ldw	r2,-8(fp)
 100a8d0:	10800017 	ldw	r2,0(r2)
 100a8d4:	1009883a 	mov	r4,r2
 100a8d8:	1009a040 	call	1009a04 <elf_phentsize>
 100a8dc:	8085383a 	mul	r2,r16,r2
 100a8e0:	e0bfef15 	stw	r2,-68(fp)
		if (offset > phdrs_offset ||
 100a8e4:	e0bffc17 	ldw	r2,-16(fp)
 100a8e8:	e0ffee17 	ldw	r3,-72(fp)
 100a8ec:	18800736 	bltu	r3,r2,100a90c <elf_load_header+0x298>
		    offset + len < phdrs_offset + phdrs_size) {
 100a8f0:	e0fffc17 	ldw	r3,-16(fp)
 100a8f4:	e0bffd17 	ldw	r2,-12(fp)
 100a8f8:	1887883a 	add	r3,r3,r2
 100a8fc:	e13fee17 	ldw	r4,-72(fp)
 100a900:	e0bfef17 	ldw	r2,-68(fp)
 100a904:	2085883a 	add	r2,r4,r2
		const void *img_phdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF program header.\r\n");
		phdrs_offset = elf_phoff(*img_info);
		phdrs_size = elf_phnum(*img_info) * elf_phentsize(*img_info);
		if (offset > phdrs_offset ||
 100a908:	1880092e 	bgeu	r3,r2,100a930 <elf_load_header+0x2bc>
		    offset + len < phdrs_offset + phdrs_size) {
			*noffset = phdrs_offset;
 100a90c:	e0800317 	ldw	r2,12(fp)
 100a910:	e0ffee17 	ldw	r3,-72(fp)
 100a914:	10c00015 	stw	r3,0(r2)
			*nlen = phdrs_size;
 100a918:	e0800417 	ldw	r2,16(fp)
 100a91c:	e0ffef17 	ldw	r3,-68(fp)
 100a920:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100a924:	e0bfed17 	ldw	r2,-76(fp)
 100a928:	10800017 	ldw	r2,0(r2)
 100a92c:	00011606 	br	100ad88 <elf_load_header+0x714>
		}
		/* calculate the programs headers offset to the image_data */
		phdrs_offset -= offset;
 100a930:	e0ffee17 	ldw	r3,-72(fp)
 100a934:	e0bffc17 	ldw	r2,-16(fp)
 100a938:	1885c83a 	sub	r2,r3,r2
 100a93c:	e0bfee15 	stw	r2,-72(fp)
		img_phdrs = (const char *)img_data + phdrs_offset;
 100a940:	e0fffb17 	ldw	r3,-20(fp)
 100a944:	e0bfee17 	ldw	r2,-72(fp)
 100a948:	1885883a 	add	r2,r3,r2
 100a94c:	e0bff015 	stw	r2,-64(fp)
		phdrs = elf_phtable_ptr(*img_info);
 100a950:	e0bffe17 	ldw	r2,-8(fp)
 100a954:	10800017 	ldw	r2,0(r2)
 100a958:	1009883a 	mov	r4,r2
 100a95c:	1009c400 	call	1009c40 <elf_phtable_ptr>
 100a960:	e0bff115 	stw	r2,-60(fp)
		*phdrs = metal_allocate_memory(phdrs_size);
 100a964:	e13fef17 	ldw	r4,-68(fp)
 100a968:	10098a80 	call	10098a8 <metal_allocate_memory>
 100a96c:	1007883a 	mov	r3,r2
 100a970:	e0bff117 	ldw	r2,-60(fp)
 100a974:	10c00015 	stw	r3,0(r2)
		if (*phdrs == NULL)
 100a978:	e0bff117 	ldw	r2,-60(fp)
 100a97c:	10800017 	ldw	r2,0(r2)
 100a980:	1000021e 	bne	r2,zero,100a98c <elf_load_header+0x318>
			return -RPROC_ENOMEM;
 100a984:	00bfffc4 	movi	r2,-1
 100a988:	0000ff06 	br	100ad88 <elf_load_header+0x714>
		memcpy(*phdrs, img_phdrs, phdrs_size);
 100a98c:	e0bff117 	ldw	r2,-60(fp)
 100a990:	10800017 	ldw	r2,0(r2)
 100a994:	e1bfef17 	ldw	r6,-68(fp)
 100a998:	e17ff017 	ldw	r5,-64(fp)
 100a99c:	1009883a 	mov	r4,r2
 100a9a0:	10139e80 	call	10139e8 <memcpy>
		*load_state = ELF_STATE_WAIT_FOR_SHDRS |
 100a9a4:	e0ffed17 	ldw	r3,-76(fp)
 100a9a8:	00800074 	movhi	r2,1
 100a9ac:	10808004 	addi	r2,r2,512
 100a9b0:	18800015 	stw	r2,0(r3)
			       RPROC_LOADER_READY_TO_LOAD;
	}
	/* Get ELF Section Headers */
	if ((*load_state & ELF_STATE_WAIT_FOR_SHDRS) != 0) {
 100a9b4:	e0bfed17 	ldw	r2,-76(fp)
 100a9b8:	10800017 	ldw	r2,0(r2)
 100a9bc:	1080800c 	andi	r2,r2,512
 100a9c0:	10007e26 	beq	r2,zero,100abbc <elf_load_header+0x548>
		size_t shdrs_size;
		size_t shdrs_offset;
		void **shdrs;
		const void *img_shdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF section header.\r\n");
 100a9c4:	008060f4 	movhi	r2,387
 100a9c8:	10a97a04 	addi	r2,r2,-23064
 100a9cc:	10800017 	ldw	r2,0(r2)
 100a9d0:	108001f0 	cmpltui	r2,r2,7
 100a9d4:	10000b1e 	bne	r2,zero,100aa04 <elf_load_header+0x390>
 100a9d8:	008060f4 	movhi	r2,387
 100a9dc:	10a97a04 	addi	r2,r2,-23064
 100a9e0:	10800117 	ldw	r2,4(r2)
 100a9e4:	10000726 	beq	r2,zero,100aa04 <elf_load_header+0x390>
 100a9e8:	008060f4 	movhi	r2,387
 100a9ec:	10a97a04 	addi	r2,r2,-23064
 100a9f0:	10800117 	ldw	r2,4(r2)
 100a9f4:	014040b4 	movhi	r5,258
 100a9f8:	29556204 	addi	r5,r5,21896
 100a9fc:	010001c4 	movi	r4,7
 100aa00:	103ee83a 	callr	r2
		shdrs_offset = elf_shoff(*img_info);
 100aa04:	e0bffe17 	ldw	r2,-8(fp)
 100aa08:	10800017 	ldw	r2,0(r2)
 100aa0c:	1009883a 	mov	r4,r2
 100aa10:	1009ac40 	call	1009ac4 <elf_shoff>
 100aa14:	e0bff215 	stw	r2,-56(fp)
		if (elf_shnum(*img_info) == 0) {
 100aa18:	e0bffe17 	ldw	r2,-8(fp)
 100aa1c:	10800017 	ldw	r2,0(r2)
 100aa20:	1009883a 	mov	r4,r2
 100aa24:	1009b800 	call	1009b80 <elf_shnum>
 100aa28:	10000f1e 	bne	r2,zero,100aa68 <elf_load_header+0x3f4>
			*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100aa2c:	e0bfed17 	ldw	r2,-76(fp)
 100aa30:	10800017 	ldw	r2,0(r2)
 100aa34:	1007883a 	mov	r3,r2
 100aa38:	00bffff4 	movhi	r2,65535
 100aa3c:	10803fc4 	addi	r2,r2,255
 100aa40:	1884703a 	and	r2,r3,r2
 100aa44:	10820014 	ori	r2,r2,2048
 100aa48:	1007883a 	mov	r3,r2
 100aa4c:	e0bfed17 	ldw	r2,-76(fp)
 100aa50:	10c00015 	stw	r3,0(r2)
				       ELF_STATE_HDRS_COMPLETE;
			*nlen = 0;
 100aa54:	e0800417 	ldw	r2,16(fp)
 100aa58:	10000015 	stw	zero,0(r2)
			return *load_state;
 100aa5c:	e0bfed17 	ldw	r2,-76(fp)
 100aa60:	10800017 	ldw	r2,0(r2)
 100aa64:	0000c806 	br	100ad88 <elf_load_header+0x714>
		}
		shdrs_size = elf_shnum(*img_info) * elf_shentsize(*img_info);
 100aa68:	e0bffe17 	ldw	r2,-8(fp)
 100aa6c:	10800017 	ldw	r2,0(r2)
 100aa70:	1009883a 	mov	r4,r2
 100aa74:	1009b800 	call	1009b80 <elf_shnum>
 100aa78:	1021883a 	mov	r16,r2
 100aa7c:	e0bffe17 	ldw	r2,-8(fp)
 100aa80:	10800017 	ldw	r2,0(r2)
 100aa84:	1009883a 	mov	r4,r2
 100aa88:	1009b200 	call	1009b20 <elf_shentsize>
 100aa8c:	8085383a 	mul	r2,r16,r2
 100aa90:	e0bff315 	stw	r2,-52(fp)
		if (offset > shdrs_offset ||
 100aa94:	e0bffc17 	ldw	r2,-16(fp)
 100aa98:	e0fff217 	ldw	r3,-56(fp)
 100aa9c:	18800736 	bltu	r3,r2,100aabc <elf_load_header+0x448>
		    offset + len < shdrs_offset + shdrs_size) {
 100aaa0:	e0fffc17 	ldw	r3,-16(fp)
 100aaa4:	e0bffd17 	ldw	r2,-12(fp)
 100aaa8:	1887883a 	add	r3,r3,r2
 100aaac:	e13ff217 	ldw	r4,-56(fp)
 100aab0:	e0bff317 	ldw	r2,-52(fp)
 100aab4:	2085883a 	add	r2,r4,r2
				       ELF_STATE_HDRS_COMPLETE;
			*nlen = 0;
			return *load_state;
		}
		shdrs_size = elf_shnum(*img_info) * elf_shentsize(*img_info);
		if (offset > shdrs_offset ||
 100aab8:	1880092e 	bgeu	r3,r2,100aae0 <elf_load_header+0x46c>
		    offset + len < shdrs_offset + shdrs_size) {
			*noffset = shdrs_offset;
 100aabc:	e0800317 	ldw	r2,12(fp)
 100aac0:	e0fff217 	ldw	r3,-56(fp)
 100aac4:	10c00015 	stw	r3,0(r2)
			*nlen = shdrs_size;
 100aac8:	e0800417 	ldw	r2,16(fp)
 100aacc:	e0fff317 	ldw	r3,-52(fp)
 100aad0:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100aad4:	e0bfed17 	ldw	r2,-76(fp)
 100aad8:	10800017 	ldw	r2,0(r2)
 100aadc:	0000aa06 	br	100ad88 <elf_load_header+0x714>
		}
		/* calculate the sections headers offset to the image_data */
		shdrs_offset -= offset;
 100aae0:	e0fff217 	ldw	r3,-56(fp)
 100aae4:	e0bffc17 	ldw	r2,-16(fp)
 100aae8:	1885c83a 	sub	r2,r3,r2
 100aaec:	e0bff215 	stw	r2,-56(fp)
		img_shdrs = (const char *)img_data + shdrs_offset;
 100aaf0:	e0fffb17 	ldw	r3,-20(fp)
 100aaf4:	e0bff217 	ldw	r2,-56(fp)
 100aaf8:	1885883a 	add	r2,r3,r2
 100aafc:	e0bff415 	stw	r2,-48(fp)
		shdrs = elf_shtable_ptr(*img_info);
 100ab00:	e0bffe17 	ldw	r2,-8(fp)
 100ab04:	10800017 	ldw	r2,0(r2)
 100ab08:	1009883a 	mov	r4,r2
 100ab0c:	1009c980 	call	1009c98 <elf_shtable_ptr>
 100ab10:	e0bff515 	stw	r2,-44(fp)
		*shdrs = metal_allocate_memory(shdrs_size);
 100ab14:	e13ff317 	ldw	r4,-52(fp)
 100ab18:	10098a80 	call	10098a8 <metal_allocate_memory>
 100ab1c:	1007883a 	mov	r3,r2
 100ab20:	e0bff517 	ldw	r2,-44(fp)
 100ab24:	10c00015 	stw	r3,0(r2)
		if (*shdrs == NULL)
 100ab28:	e0bff517 	ldw	r2,-44(fp)
 100ab2c:	10800017 	ldw	r2,0(r2)
 100ab30:	1000021e 	bne	r2,zero,100ab3c <elf_load_header+0x4c8>
			return -RPROC_ENOMEM;
 100ab34:	00bfffc4 	movi	r2,-1
 100ab38:	00009306 	br	100ad88 <elf_load_header+0x714>
		memcpy(*shdrs, img_shdrs, shdrs_size);
 100ab3c:	e0bff517 	ldw	r2,-44(fp)
 100ab40:	10800017 	ldw	r2,0(r2)
 100ab44:	e1bff317 	ldw	r6,-52(fp)
 100ab48:	e17ff417 	ldw	r5,-48(fp)
 100ab4c:	1009883a 	mov	r4,r2
 100ab50:	10139e80 	call	10139e8 <memcpy>
		*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100ab54:	e0bfed17 	ldw	r2,-76(fp)
 100ab58:	10800017 	ldw	r2,0(r2)
 100ab5c:	1007883a 	mov	r3,r2
 100ab60:	00bffff4 	movhi	r2,65535
 100ab64:	10803fc4 	addi	r2,r2,255
 100ab68:	1884703a 	and	r2,r3,r2
 100ab6c:	10810014 	ori	r2,r2,1024
 100ab70:	1007883a 	mov	r3,r2
 100ab74:	e0bfed17 	ldw	r2,-76(fp)
 100ab78:	10c00015 	stw	r3,0(r2)
			       ELF_STATE_WAIT_FOR_SHSTRTAB;
		metal_log(METAL_LOG_DEBUG,
 100ab7c:	008060f4 	movhi	r2,387
 100ab80:	10a97a04 	addi	r2,r2,-23064
 100ab84:	10800017 	ldw	r2,0(r2)
 100ab88:	108001f0 	cmpltui	r2,r2,7
 100ab8c:	10000b1e 	bne	r2,zero,100abbc <elf_load_header+0x548>
 100ab90:	008060f4 	movhi	r2,387
 100ab94:	10a97a04 	addi	r2,r2,-23064
 100ab98:	10800117 	ldw	r2,4(r2)
 100ab9c:	10000726 	beq	r2,zero,100abbc <elf_load_header+0x548>
 100aba0:	008060f4 	movhi	r2,387
 100aba4:	10a97a04 	addi	r2,r2,-23064
 100aba8:	10800117 	ldw	r2,4(r2)
 100abac:	014040b4 	movhi	r5,258
 100abb0:	29556a04 	addi	r5,r5,21928
 100abb4:	010001c4 	movi	r4,7
 100abb8:	103ee83a 	callr	r2
			  "Loading ELF section header complete.\r\n");
	}
	/* Get ELF SHSTRTAB section */
	if ((*load_state & ELF_STATE_WAIT_FOR_SHSTRTAB) != 0) {
 100abbc:	e0bfed17 	ldw	r2,-76(fp)
 100abc0:	10800017 	ldw	r2,0(r2)
 100abc4:	1081000c 	andi	r2,r2,1024
 100abc8:	10006e26 	beq	r2,zero,100ad84 <elf_load_header+0x710>
		size_t shstrtab_offset;
		int shstrndx;
		void *shdr;
		void **shstrtab;

		metal_log(METAL_LOG_DEBUG, "Loading ELF shstrtab.\r\n");
 100abcc:	008060f4 	movhi	r2,387
 100abd0:	10a97a04 	addi	r2,r2,-23064
 100abd4:	10800017 	ldw	r2,0(r2)
 100abd8:	108001f0 	cmpltui	r2,r2,7
 100abdc:	10000b1e 	bne	r2,zero,100ac0c <elf_load_header+0x598>
 100abe0:	008060f4 	movhi	r2,387
 100abe4:	10a97a04 	addi	r2,r2,-23064
 100abe8:	10800117 	ldw	r2,4(r2)
 100abec:	10000726 	beq	r2,zero,100ac0c <elf_load_header+0x598>
 100abf0:	008060f4 	movhi	r2,387
 100abf4:	10a97a04 	addi	r2,r2,-23064
 100abf8:	10800117 	ldw	r2,4(r2)
 100abfc:	014040b4 	movhi	r5,258
 100ac00:	29557404 	addi	r5,r5,21968
 100ac04:	010001c4 	movi	r4,7
 100ac08:	103ee83a 	callr	r2
		shstrndx = elf_shstrndx(*img_info);
 100ac0c:	e0bffe17 	ldw	r2,-8(fp)
 100ac10:	10800017 	ldw	r2,0(r2)
 100ac14:	1009883a 	mov	r4,r2
 100ac18:	1009be00 	call	1009be0 <elf_shstrndx>
 100ac1c:	e0bff615 	stw	r2,-40(fp)
		shdr = elf_get_section_from_index(*img_info, shstrndx);
 100ac20:	e0bffe17 	ldw	r2,-8(fp)
 100ac24:	10800017 	ldw	r2,0(r2)
 100ac28:	e17ff617 	ldw	r5,-40(fp)
 100ac2c:	1009883a 	mov	r4,r2
 100ac30:	100a1bc0 	call	100a1bc <elf_get_section_from_index>
 100ac34:	e0bff715 	stw	r2,-36(fp)
		if (shdr == NULL)
 100ac38:	e0bff717 	ldw	r2,-36(fp)
 100ac3c:	1000021e 	bne	r2,zero,100ac48 <elf_load_header+0x5d4>
			return -RPROC_EINVAL;
 100ac40:	00bfff84 	movi	r2,-2
 100ac44:	00005006 	br	100ad88 <elf_load_header+0x714>
		elf_parse_section(*img_info, shdr, NULL, NULL,
 100ac48:	e0bffe17 	ldw	r2,-8(fp)
 100ac4c:	10c00017 	ldw	r3,0(r2)
 100ac50:	d8000615 	stw	zero,24(sp)
 100ac54:	d8000515 	stw	zero,20(sp)
 100ac58:	d8000415 	stw	zero,16(sp)
 100ac5c:	d8000315 	stw	zero,12(sp)
 100ac60:	e0bff904 	addi	r2,fp,-28
 100ac64:	d8800215 	stw	r2,8(sp)
 100ac68:	e0bffa04 	addi	r2,fp,-24
 100ac6c:	d8800115 	stw	r2,4(sp)
 100ac70:	d8000015 	stw	zero,0(sp)
 100ac74:	000f883a 	mov	r7,zero
 100ac78:	000d883a 	mov	r6,zero
 100ac7c:	e17ff717 	ldw	r5,-36(fp)
 100ac80:	1809883a 	mov	r4,r3
 100ac84:	100a2c00 	call	100a2c0 <elf_parse_section>
				  NULL, &shstrtab_offset,
				  &shstrtab_size, NULL, NULL,
				  NULL, NULL);
		if (offset > shstrtab_offset ||
 100ac88:	e0fffa17 	ldw	r3,-24(fp)
 100ac8c:	e0bffc17 	ldw	r2,-16(fp)
 100ac90:	18800736 	bltu	r3,r2,100acb0 <elf_load_header+0x63c>
		    offset + len < shstrtab_offset + shstrtab_size) {
 100ac94:	e0fffc17 	ldw	r3,-16(fp)
 100ac98:	e0bffd17 	ldw	r2,-12(fp)
 100ac9c:	1887883a 	add	r3,r3,r2
 100aca0:	e13ffa17 	ldw	r4,-24(fp)
 100aca4:	e0bff917 	ldw	r2,-28(fp)
 100aca8:	2085883a 	add	r2,r4,r2
			return -RPROC_EINVAL;
		elf_parse_section(*img_info, shdr, NULL, NULL,
				  NULL, &shstrtab_offset,
				  &shstrtab_size, NULL, NULL,
				  NULL, NULL);
		if (offset > shstrtab_offset ||
 100acac:	1880092e 	bgeu	r3,r2,100acd4 <elf_load_header+0x660>
		    offset + len < shstrtab_offset + shstrtab_size) {
			*noffset = shstrtab_offset;
 100acb0:	e0fffa17 	ldw	r3,-24(fp)
 100acb4:	e0800317 	ldw	r2,12(fp)
 100acb8:	10c00015 	stw	r3,0(r2)
			*nlen = shstrtab_size;
 100acbc:	e0fff917 	ldw	r3,-28(fp)
 100acc0:	e0800417 	ldw	r2,16(fp)
 100acc4:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100acc8:	e0bfed17 	ldw	r2,-76(fp)
 100accc:	10800017 	ldw	r2,0(r2)
 100acd0:	00002d06 	br	100ad88 <elf_load_header+0x714>
		}
		/* Calculate shstrtab section offset to the input image data */
		shstrtab_offset -= offset;
 100acd4:	e0fffa17 	ldw	r3,-24(fp)
 100acd8:	e0bffc17 	ldw	r2,-16(fp)
 100acdc:	1885c83a 	sub	r2,r3,r2
 100ace0:	e0bffa15 	stw	r2,-24(fp)
		shstrtab = elf_shstrtab_ptr(*img_info);
 100ace4:	e0bffe17 	ldw	r2,-8(fp)
 100ace8:	10800017 	ldw	r2,0(r2)
 100acec:	1009883a 	mov	r4,r2
 100acf0:	1009cf00 	call	1009cf0 <elf_shstrtab_ptr>
 100acf4:	e0bff815 	stw	r2,-32(fp)
		*shstrtab = metal_allocate_memory(shstrtab_size);
 100acf8:	e0bff917 	ldw	r2,-28(fp)
 100acfc:	1009883a 	mov	r4,r2
 100ad00:	10098a80 	call	10098a8 <metal_allocate_memory>
 100ad04:	1007883a 	mov	r3,r2
 100ad08:	e0bff817 	ldw	r2,-32(fp)
 100ad0c:	10c00015 	stw	r3,0(r2)
		if (*shstrtab == NULL)
 100ad10:	e0bff817 	ldw	r2,-32(fp)
 100ad14:	10800017 	ldw	r2,0(r2)
 100ad18:	1000021e 	bne	r2,zero,100ad24 <elf_load_header+0x6b0>
			return -RPROC_ENOMEM;
 100ad1c:	00bfffc4 	movi	r2,-1
 100ad20:	00001906 	br	100ad88 <elf_load_header+0x714>
		memcpy(*shstrtab,
 100ad24:	e0bff817 	ldw	r2,-32(fp)
 100ad28:	11000017 	ldw	r4,0(r2)
 100ad2c:	e0bffa17 	ldw	r2,-24(fp)
		       (const char *)img_data + shstrtab_offset,
 100ad30:	e0fffb17 	ldw	r3,-20(fp)
 100ad34:	1885883a 	add	r2,r3,r2
		shstrtab_offset -= offset;
		shstrtab = elf_shstrtab_ptr(*img_info);
		*shstrtab = metal_allocate_memory(shstrtab_size);
		if (*shstrtab == NULL)
			return -RPROC_ENOMEM;
		memcpy(*shstrtab,
 100ad38:	e0fff917 	ldw	r3,-28(fp)
 100ad3c:	180d883a 	mov	r6,r3
 100ad40:	100b883a 	mov	r5,r2
 100ad44:	10139e80 	call	10139e8 <memcpy>
		       (const char *)img_data + shstrtab_offset,
		       shstrtab_size);
		*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100ad48:	e0bfed17 	ldw	r2,-76(fp)
 100ad4c:	10800017 	ldw	r2,0(r2)
 100ad50:	1007883a 	mov	r3,r2
 100ad54:	00bffff4 	movhi	r2,65535
 100ad58:	10803fc4 	addi	r2,r2,255
 100ad5c:	1884703a 	and	r2,r3,r2
 100ad60:	10820014 	ori	r2,r2,2048
 100ad64:	1007883a 	mov	r3,r2
 100ad68:	e0bfed17 	ldw	r2,-76(fp)
 100ad6c:	10c00015 	stw	r3,0(r2)
			       ELF_STATE_HDRS_COMPLETE;
		*nlen = 0;
 100ad70:	e0800417 	ldw	r2,16(fp)
 100ad74:	10000015 	stw	zero,0(r2)
		return *load_state;
 100ad78:	e0bfed17 	ldw	r2,-76(fp)
 100ad7c:	10800017 	ldw	r2,0(r2)
 100ad80:	00000106 	br	100ad88 <elf_load_header+0x714>
	}
	return last_load_state;
 100ad84:	e0800217 	ldw	r2,8(fp)
}
 100ad88:	e6ffff04 	addi	sp,fp,-4
 100ad8c:	dfc00217 	ldw	ra,8(sp)
 100ad90:	df000117 	ldw	fp,4(sp)
 100ad94:	dc000017 	ldw	r16,0(sp)
 100ad98:	dec00304 	addi	sp,sp,12
 100ad9c:	f800283a 	ret

0100ada0 <elf_load>:
	     const void *img_data, size_t offset, size_t len,
	     void **img_info, int last_load_state,
	     metal_phys_addr_t *da,
	     size_t *noffset, size_t *nlen,
	     unsigned char *padding, size_t *nmemsize)
{
 100ada0:	defff104 	addi	sp,sp,-60
 100ada4:	dfc00e15 	stw	ra,56(sp)
 100ada8:	df000d15 	stw	fp,52(sp)
 100adac:	df000d04 	addi	fp,sp,52
 100adb0:	e13ffc15 	stw	r4,-16(fp)
 100adb4:	e17ffd15 	stw	r5,-12(fp)
 100adb8:	e1bffe15 	stw	r6,-8(fp)
 100adbc:	e1ffff15 	stw	r7,-4(fp)
	int *load_state;
	const void *phdr;

	(void)rproc;
	metal_assert(da != NULL);
 100adc0:	e0800417 	ldw	r2,16(fp)
 100adc4:	1000081e 	bne	r2,zero,100ade8 <elf_load+0x48>
 100adc8:	01c040b4 	movhi	r7,258
 100adcc:	39d57a04 	addi	r7,r7,21992
 100add0:	018040b4 	movhi	r6,258
 100add4:	3195b004 	addi	r6,r6,22208
 100add8:	014088c4 	movi	r5,547
 100addc:	010040b4 	movhi	r4,258
 100ade0:	21153f04 	addi	r4,r4,21756
 100ade4:	10138940 	call	1013894 <__assert_func>
	metal_assert(noffset != NULL);
 100ade8:	e0800517 	ldw	r2,20(fp)
 100adec:	1000081e 	bne	r2,zero,100ae10 <elf_load+0x70>
 100adf0:	01c040b4 	movhi	r7,258
 100adf4:	39d53904 	addi	r7,r7,21732
 100adf8:	018040b4 	movhi	r6,258
 100adfc:	3195b004 	addi	r6,r6,22208
 100ae00:	01408904 	movi	r5,548
 100ae04:	010040b4 	movhi	r4,258
 100ae08:	21153f04 	addi	r4,r4,21756
 100ae0c:	10138940 	call	1013894 <__assert_func>
	metal_assert(nlen != NULL);
 100ae10:	e0800617 	ldw	r2,24(fp)
 100ae14:	1000081e 	bne	r2,zero,100ae38 <elf_load+0x98>
 100ae18:	01c040b4 	movhi	r7,258
 100ae1c:	39d54804 	addi	r7,r7,21792
 100ae20:	018040b4 	movhi	r6,258
 100ae24:	3195b004 	addi	r6,r6,22208
 100ae28:	01408944 	movi	r5,549
 100ae2c:	010040b4 	movhi	r4,258
 100ae30:	21153f04 	addi	r4,r4,21756
 100ae34:	10138940 	call	1013894 <__assert_func>
	if ((last_load_state & RPROC_LOADER_MASK) == RPROC_LOADER_NOT_READY) {
 100ae38:	e0800317 	ldw	r2,12(fp)
 100ae3c:	10803fec 	andhi	r2,r2,255
 100ae40:	1000241e 	bne	r2,zero,100aed4 <elf_load+0x134>
		metal_log(METAL_LOG_DEBUG,
 100ae44:	008060f4 	movhi	r2,387
 100ae48:	10a97a04 	addi	r2,r2,-23064
 100ae4c:	10800017 	ldw	r2,0(r2)
 100ae50:	108001f0 	cmpltui	r2,r2,7
 100ae54:	10000b1e 	bne	r2,zero,100ae84 <elf_load+0xe4>
 100ae58:	008060f4 	movhi	r2,387
 100ae5c:	10a97a04 	addi	r2,r2,-23064
 100ae60:	10800117 	ldw	r2,4(r2)
 100ae64:	10000726 	beq	r2,zero,100ae84 <elf_load+0xe4>
 100ae68:	008060f4 	movhi	r2,387
 100ae6c:	10a97a04 	addi	r2,r2,-23064
 100ae70:	10800117 	ldw	r2,4(r2)
 100ae74:	014040b4 	movhi	r5,258
 100ae78:	29557f04 	addi	r5,r5,22012
 100ae7c:	010001c4 	movi	r4,7
 100ae80:	103ee83a 	callr	r2
			  "needs to load header first\r\n");
		last_load_state = elf_load_header(img_data, offset, len,
 100ae84:	e0800617 	ldw	r2,24(fp)
 100ae88:	d8800215 	stw	r2,8(sp)
 100ae8c:	e0800517 	ldw	r2,20(fp)
 100ae90:	d8800115 	stw	r2,4(sp)
 100ae94:	e0800317 	ldw	r2,12(fp)
 100ae98:	d8800015 	stw	r2,0(sp)
 100ae9c:	e1c00217 	ldw	r7,8(fp)
 100aea0:	e1bfff17 	ldw	r6,-4(fp)
 100aea4:	e17ffe17 	ldw	r5,-8(fp)
 100aea8:	e13ffd17 	ldw	r4,-12(fp)
 100aeac:	100a6740 	call	100a674 <elf_load_header>
 100aeb0:	e0800315 	stw	r2,12(fp)
						  img_info, last_load_state,
						  noffset, nlen);
		if ((last_load_state & RPROC_LOADER_MASK) ==
 100aeb4:	e0800317 	ldw	r2,12(fp)
 100aeb8:	10803fec 	andhi	r2,r2,255
 100aebc:	1000051e 	bne	r2,zero,100aed4 <elf_load+0x134>
		    RPROC_LOADER_NOT_READY) {
			*da = RPROC_LOAD_ANYADDR;
 100aec0:	e0800417 	ldw	r2,16(fp)
 100aec4:	00ffffc4 	movi	r3,-1
 100aec8:	10c00015 	stw	r3,0(r2)
			return last_load_state;
 100aecc:	e0800317 	ldw	r2,12(fp)
 100aed0:	0000be06 	br	100b1cc <elf_load+0x42c>
		}
	}
	metal_assert(img_info != NULL && *img_info != NULL);
 100aed4:	e0800217 	ldw	r2,8(fp)
 100aed8:	10000326 	beq	r2,zero,100aee8 <elf_load+0x148>
 100aedc:	e0800217 	ldw	r2,8(fp)
 100aee0:	10800017 	ldw	r2,0(r2)
 100aee4:	1000081e 	bne	r2,zero,100af08 <elf_load+0x168>
 100aee8:	01c040b4 	movhi	r7,258
 100aeec:	39d58704 	addi	r7,r7,22044
 100aef0:	018040b4 	movhi	r6,258
 100aef4:	3195b004 	addi	r6,r6,22208
 100aef8:	01408c84 	movi	r5,562
 100aefc:	010040b4 	movhi	r4,258
 100af00:	21153f04 	addi	r4,r4,21756
 100af04:	10138940 	call	1013894 <__assert_func>
	load_state = elf_load_state(*img_info);
 100af08:	e0800217 	ldw	r2,8(fp)
 100af0c:	10800017 	ldw	r2,0(r2)
 100af10:	1009883a 	mov	r4,r2
 100af14:	1009d480 	call	1009d48 <elf_load_state>
 100af18:	e0bff615 	stw	r2,-40(fp)
	/* For ELF, segment padding value is 0 */
	if (padding != NULL)
 100af1c:	e0800717 	ldw	r2,28(fp)
 100af20:	10000226 	beq	r2,zero,100af2c <elf_load+0x18c>
		*padding = 0;
 100af24:	e0800717 	ldw	r2,28(fp)
 100af28:	10000005 	stb	zero,0(r2)
	if ((*load_state & RPROC_LOADER_READY_TO_LOAD) != 0) {
 100af2c:	e0bff617 	ldw	r2,-40(fp)
 100af30:	10800017 	ldw	r2,0(r2)
 100af34:	1080006c 	andhi	r2,r2,1
 100af38:	10006b26 	beq	r2,zero,100b0e8 <elf_load+0x348>
		int nsegment;
		size_t nsegmsize = 0;
 100af3c:	e03ffa15 	stw	zero,-24(fp)
		size_t nsize = 0;
 100af40:	e03ffb15 	stw	zero,-20(fp)
		int phnums = 0;
 100af44:	e03ff715 	stw	zero,-36(fp)

		nsegment = *load_state & ELF_NEXT_SEGMENT_MASK;
 100af48:	e0bff617 	ldw	r2,-40(fp)
 100af4c:	10800017 	ldw	r2,0(r2)
 100af50:	10803fcc 	andi	r2,r2,255
 100af54:	e0bff915 	stw	r2,-28(fp)
		phdr = elf_next_load_segment(*img_info, &nsegment, da,
 100af58:	e0800217 	ldw	r2,8(fp)
 100af5c:	10c00017 	ldw	r3,0(r2)
 100af60:	e13ff904 	addi	r4,fp,-28
 100af64:	e0bffa04 	addi	r2,fp,-24
 100af68:	d8800115 	stw	r2,4(sp)
 100af6c:	e0bffb04 	addi	r2,fp,-20
 100af70:	d8800015 	stw	r2,0(sp)
 100af74:	e1c00517 	ldw	r7,20(fp)
 100af78:	e1800417 	ldw	r6,16(fp)
 100af7c:	200b883a 	mov	r5,r4
 100af80:	1809883a 	mov	r4,r3
 100af84:	100a4f80 	call	100a4f8 <elf_next_load_segment>
 100af88:	e0bff815 	stw	r2,-32(fp)
					     noffset, &nsize, &nsegmsize);
		if (phdr == NULL) {
 100af8c:	e0bff817 	ldw	r2,-32(fp)
 100af90:	10001e1e 	bne	r2,zero,100b00c <elf_load+0x26c>
			metal_log(METAL_LOG_DEBUG, "cannot find more segment\r\n");
 100af94:	008060f4 	movhi	r2,387
 100af98:	10a97a04 	addi	r2,r2,-23064
 100af9c:	10800017 	ldw	r2,0(r2)
 100afa0:	108001f0 	cmpltui	r2,r2,7
 100afa4:	10000b1e 	bne	r2,zero,100afd4 <elf_load+0x234>
 100afa8:	008060f4 	movhi	r2,387
 100afac:	10a97a04 	addi	r2,r2,-23064
 100afb0:	10800117 	ldw	r2,4(r2)
 100afb4:	10000726 	beq	r2,zero,100afd4 <elf_load+0x234>
 100afb8:	008060f4 	movhi	r2,387
 100afbc:	10a97a04 	addi	r2,r2,-23064
 100afc0:	10800117 	ldw	r2,4(r2)
 100afc4:	014040b4 	movhi	r5,258
 100afc8:	29559404 	addi	r5,r5,22096
 100afcc:	010001c4 	movi	r4,7
 100afd0:	103ee83a 	callr	r2
			*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100afd4:	e0bff617 	ldw	r2,-40(fp)
 100afd8:	10800017 	ldw	r2,0(r2)
 100afdc:	1007883a 	mov	r3,r2
 100afe0:	00bfc004 	movi	r2,-256
 100afe4:	1886703a 	and	r3,r3,r2
				      (nsegment & ELF_NEXT_SEGMENT_MASK);
 100afe8:	e0bff917 	ldw	r2,-28(fp)
 100afec:	10803fcc 	andi	r2,r2,255
		nsegment = *load_state & ELF_NEXT_SEGMENT_MASK;
		phdr = elf_next_load_segment(*img_info, &nsegment, da,
					     noffset, &nsize, &nsegmsize);
		if (phdr == NULL) {
			metal_log(METAL_LOG_DEBUG, "cannot find more segment\r\n");
			*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100aff0:	1884b03a 	or	r2,r3,r2
 100aff4:	1007883a 	mov	r3,r2
 100aff8:	e0bff617 	ldw	r2,-40(fp)
 100affc:	10c00015 	stw	r3,0(r2)
				      (nsegment & ELF_NEXT_SEGMENT_MASK);
			return *load_state;
 100b000:	e0bff617 	ldw	r2,-40(fp)
 100b004:	10800017 	ldw	r2,0(r2)
 100b008:	00007006 	br	100b1cc <elf_load+0x42c>
		}
		*nlen = nsize;
 100b00c:	e0fffb17 	ldw	r3,-20(fp)
 100b010:	e0800617 	ldw	r2,24(fp)
 100b014:	10c00015 	stw	r3,0(r2)
		*nmemsize = nsegmsize;
 100b018:	e0fffa17 	ldw	r3,-24(fp)
 100b01c:	e0800817 	ldw	r2,32(fp)
 100b020:	10c00015 	stw	r3,0(r2)
		phnums = elf_phnum(*img_info);
 100b024:	e0800217 	ldw	r2,8(fp)
 100b028:	10800017 	ldw	r2,0(r2)
 100b02c:	1009883a 	mov	r4,r2
 100b030:	1009a640 	call	1009a64 <elf_phnum>
 100b034:	e0bff715 	stw	r2,-36(fp)
		metal_log(METAL_LOG_DEBUG, "segment: %d, total segs %d\r\n",
 100b038:	008060f4 	movhi	r2,387
 100b03c:	10a97a04 	addi	r2,r2,-23064
 100b040:	10800017 	ldw	r2,0(r2)
 100b044:	108001f0 	cmpltui	r2,r2,7
 100b048:	10000e1e 	bne	r2,zero,100b084 <elf_load+0x2e4>
 100b04c:	008060f4 	movhi	r2,387
 100b050:	10a97a04 	addi	r2,r2,-23064
 100b054:	10800117 	ldw	r2,4(r2)
 100b058:	10000a26 	beq	r2,zero,100b084 <elf_load+0x2e4>
 100b05c:	008060f4 	movhi	r2,387
 100b060:	10a97a04 	addi	r2,r2,-23064
 100b064:	10800117 	ldw	r2,4(r2)
 100b068:	e0fff917 	ldw	r3,-28(fp)
 100b06c:	e1fff717 	ldw	r7,-36(fp)
 100b070:	180d883a 	mov	r6,r3
 100b074:	014040b4 	movhi	r5,258
 100b078:	29559b04 	addi	r5,r5,22124
 100b07c:	010001c4 	movi	r4,7
 100b080:	103ee83a 	callr	r2
			  nsegment, phnums);
		if (nsegment == phnums) {
 100b084:	e0fff917 	ldw	r3,-28(fp)
 100b088:	e0bff717 	ldw	r2,-36(fp)
 100b08c:	18800a1e 	bne	r3,r2,100b0b8 <elf_load+0x318>
			*load_state = (*load_state & (~RPROC_LOADER_MASK)) |
 100b090:	e0bff617 	ldw	r2,-40(fp)
 100b094:	10800017 	ldw	r2,0(r2)
 100b098:	1007883a 	mov	r3,r2
 100b09c:	00bfc074 	movhi	r2,65281
 100b0a0:	10bfffc4 	addi	r2,r2,-1
 100b0a4:	1884703a 	and	r2,r3,r2
 100b0a8:	108000b4 	orhi	r2,r2,2
 100b0ac:	1007883a 	mov	r3,r2
 100b0b0:	e0bff617 	ldw	r2,-40(fp)
 100b0b4:	10c00015 	stw	r3,0(r2)
				      RPROC_LOADER_POST_DATA_LOAD;
		}
		*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b0b8:	e0bff617 	ldw	r2,-40(fp)
 100b0bc:	10800017 	ldw	r2,0(r2)
 100b0c0:	1007883a 	mov	r3,r2
 100b0c4:	00bfc004 	movi	r2,-256
 100b0c8:	1886703a 	and	r3,r3,r2
			      (nsegment & ELF_NEXT_SEGMENT_MASK);
 100b0cc:	e0bff917 	ldw	r2,-28(fp)
 100b0d0:	10803fcc 	andi	r2,r2,255
			  nsegment, phnums);
		if (nsegment == phnums) {
			*load_state = (*load_state & (~RPROC_LOADER_MASK)) |
				      RPROC_LOADER_POST_DATA_LOAD;
		}
		*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b0d4:	1884b03a 	or	r2,r3,r2
 100b0d8:	1007883a 	mov	r3,r2
 100b0dc:	e0bff617 	ldw	r2,-40(fp)
 100b0e0:	10c00015 	stw	r3,0(r2)
 100b0e4:	00003706 	br	100b1c4 <elf_load+0x424>
			      (nsegment & ELF_NEXT_SEGMENT_MASK);
	} else if ((*load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
 100b0e8:	e0bff617 	ldw	r2,-40(fp)
 100b0ec:	10800017 	ldw	r2,0(r2)
 100b0f0:	108000ac 	andhi	r2,r2,2
 100b0f4:	10003326 	beq	r2,zero,100b1c4 <elf_load+0x424>
		if ((*load_state & ELF_STATE_HDRS_COMPLETE) == 0) {
 100b0f8:	e0bff617 	ldw	r2,-40(fp)
 100b0fc:	10800017 	ldw	r2,0(r2)
 100b100:	1082000c 	andi	r2,r2,2048
 100b104:	1000231e 	bne	r2,zero,100b194 <elf_load+0x3f4>
			last_load_state = elf_load_header(img_data, offset,
 100b108:	e0800617 	ldw	r2,24(fp)
 100b10c:	d8800215 	stw	r2,8(sp)
 100b110:	e0800517 	ldw	r2,20(fp)
 100b114:	d8800115 	stw	r2,4(sp)
 100b118:	e0800317 	ldw	r2,12(fp)
 100b11c:	d8800015 	stw	r2,0(sp)
 100b120:	e1c00217 	ldw	r7,8(fp)
 100b124:	e1bfff17 	ldw	r6,-4(fp)
 100b128:	e17ffe17 	ldw	r5,-8(fp)
 100b12c:	e13ffd17 	ldw	r4,-12(fp)
 100b130:	100a6740 	call	100a674 <elf_load_header>
 100b134:	e0800315 	stw	r2,12(fp)
							  len, img_info,
							  last_load_state,
							  noffset, nlen);
			if (last_load_state < 0)
 100b138:	e0800317 	ldw	r2,12(fp)
 100b13c:	1000020e 	bge	r2,zero,100b148 <elf_load+0x3a8>
				return last_load_state;
 100b140:	e0800317 	ldw	r2,12(fp)
 100b144:	00002106 	br	100b1cc <elf_load+0x42c>
			if ((last_load_state & ELF_STATE_HDRS_COMPLETE) != 0) {
 100b148:	e0800317 	ldw	r2,12(fp)
 100b14c:	1082000c 	andi	r2,r2,2048
 100b150:	10000c26 	beq	r2,zero,100b184 <elf_load+0x3e4>
				*load_state = (*load_state &
 100b154:	e0bff617 	ldw	r2,-40(fp)
 100b158:	10800017 	ldw	r2,0(r2)
 100b15c:	1007883a 	mov	r3,r2
 100b160:	00bfc074 	movhi	r2,65281
 100b164:	10bfffc4 	addi	r2,r2,-1
 100b168:	1884703a 	and	r2,r3,r2
						(~RPROC_LOADER_MASK)) |
 100b16c:	10800134 	orhi	r2,r2,4
							  last_load_state,
							  noffset, nlen);
			if (last_load_state < 0)
				return last_load_state;
			if ((last_load_state & ELF_STATE_HDRS_COMPLETE) != 0) {
				*load_state = (*load_state &
 100b170:	1007883a 	mov	r3,r2
 100b174:	e0bff617 	ldw	r2,-40(fp)
 100b178:	10c00015 	stw	r3,0(r2)
						(~RPROC_LOADER_MASK)) |
						RPROC_LOADER_LOAD_COMPLETE;
				*nlen = 0;
 100b17c:	e0800617 	ldw	r2,24(fp)
 100b180:	10000015 	stw	zero,0(r2)
			}
			*da = RPROC_LOAD_ANYADDR;
 100b184:	e0800417 	ldw	r2,16(fp)
 100b188:	00ffffc4 	movi	r3,-1
 100b18c:	10c00015 	stw	r3,0(r2)
 100b190:	00000c06 	br	100b1c4 <elf_load+0x424>
		} else {
		/* TODO: will handle relocate later */
			*nlen = 0;
 100b194:	e0800617 	ldw	r2,24(fp)
 100b198:	10000015 	stw	zero,0(r2)
			*load_state = (*load_state &
 100b19c:	e0bff617 	ldw	r2,-40(fp)
 100b1a0:	10800017 	ldw	r2,0(r2)
 100b1a4:	1007883a 	mov	r3,r2
 100b1a8:	00bfc074 	movhi	r2,65281
 100b1ac:	10bfffc4 	addi	r2,r2,-1
 100b1b0:	1884703a 	and	r2,r3,r2
					(~RPROC_LOADER_MASK)) |
 100b1b4:	10800134 	orhi	r2,r2,4
			}
			*da = RPROC_LOAD_ANYADDR;
		} else {
		/* TODO: will handle relocate later */
			*nlen = 0;
			*load_state = (*load_state &
 100b1b8:	1007883a 	mov	r3,r2
 100b1bc:	e0bff617 	ldw	r2,-40(fp)
 100b1c0:	10c00015 	stw	r3,0(r2)
					(~RPROC_LOADER_MASK)) |
					RPROC_LOADER_LOAD_COMPLETE;
		}
	}
	return *load_state;
 100b1c4:	e0bff617 	ldw	r2,-40(fp)
 100b1c8:	10800017 	ldw	r2,0(r2)
}
 100b1cc:	e037883a 	mov	sp,fp
 100b1d0:	dfc00117 	ldw	ra,4(sp)
 100b1d4:	df000017 	ldw	fp,0(sp)
 100b1d8:	dec00204 	addi	sp,sp,8
 100b1dc:	f800283a 	ret

0100b1e0 <elf_release>:

void elf_release(void *img_info)
{
 100b1e0:	defffb04 	addi	sp,sp,-20
 100b1e4:	dfc00415 	stw	ra,16(sp)
 100b1e8:	df000315 	stw	fp,12(sp)
 100b1ec:	df000304 	addi	fp,sp,12
 100b1f0:	e13fff15 	stw	r4,-4(fp)
	if (img_info == NULL)
 100b1f4:	e0bfff17 	ldw	r2,-4(fp)
 100b1f8:	10003726 	beq	r2,zero,100b2d8 <elf_release+0xf8>
		return;
	if (elf_is_64(img_info) == 0) {
 100b1fc:	e13fff17 	ldw	r4,-4(fp)
 100b200:	100990c0 	call	100990c <elf_is_64>
 100b204:	10001a1e 	bne	r2,zero,100b270 <elf_release+0x90>
		struct elf32_info *elf_info = img_info;
 100b208:	e0bfff17 	ldw	r2,-4(fp)
 100b20c:	e0bffd15 	stw	r2,-12(fp)

		if (elf_info->phdrs != NULL)
 100b210:	e0bffd17 	ldw	r2,-12(fp)
 100b214:	10800e17 	ldw	r2,56(r2)
 100b218:	10000426 	beq	r2,zero,100b22c <elf_release+0x4c>
			metal_free_memory(elf_info->phdrs);
 100b21c:	e0bffd17 	ldw	r2,-12(fp)
 100b220:	10800e17 	ldw	r2,56(r2)
 100b224:	1009883a 	mov	r4,r2
 100b228:	10098d80 	call	10098d8 <metal_free_memory>
		if (elf_info->shdrs != NULL)
 100b22c:	e0bffd17 	ldw	r2,-12(fp)
 100b230:	10800f17 	ldw	r2,60(r2)
 100b234:	10000426 	beq	r2,zero,100b248 <elf_release+0x68>
			metal_free_memory(elf_info->shdrs);
 100b238:	e0bffd17 	ldw	r2,-12(fp)
 100b23c:	10800f17 	ldw	r2,60(r2)
 100b240:	1009883a 	mov	r4,r2
 100b244:	10098d80 	call	10098d8 <metal_free_memory>
		if (elf_info->shstrtab != NULL)
 100b248:	e0bffd17 	ldw	r2,-12(fp)
 100b24c:	10801017 	ldw	r2,64(r2)
 100b250:	10000426 	beq	r2,zero,100b264 <elf_release+0x84>
			metal_free_memory(elf_info->shstrtab);
 100b254:	e0bffd17 	ldw	r2,-12(fp)
 100b258:	10801017 	ldw	r2,64(r2)
 100b25c:	1009883a 	mov	r4,r2
 100b260:	10098d80 	call	10098d8 <metal_free_memory>
		metal_free_memory(img_info);
 100b264:	e13fff17 	ldw	r4,-4(fp)
 100b268:	10098d80 	call	10098d8 <metal_free_memory>
 100b26c:	00001b06 	br	100b2dc <elf_release+0xfc>

	} else {
		struct elf64_info *elf_info = img_info;
 100b270:	e0bfff17 	ldw	r2,-4(fp)
 100b274:	e0bffe15 	stw	r2,-8(fp)

		if (elf_info->phdrs != NULL)
 100b278:	e0bffe17 	ldw	r2,-8(fp)
 100b27c:	10801117 	ldw	r2,68(r2)
 100b280:	10000426 	beq	r2,zero,100b294 <elf_release+0xb4>
			metal_free_memory(elf_info->phdrs);
 100b284:	e0bffe17 	ldw	r2,-8(fp)
 100b288:	10801117 	ldw	r2,68(r2)
 100b28c:	1009883a 	mov	r4,r2
 100b290:	10098d80 	call	10098d8 <metal_free_memory>
		if (elf_info->shdrs != NULL)
 100b294:	e0bffe17 	ldw	r2,-8(fp)
 100b298:	10801217 	ldw	r2,72(r2)
 100b29c:	10000426 	beq	r2,zero,100b2b0 <elf_release+0xd0>
			metal_free_memory(elf_info->shdrs);
 100b2a0:	e0bffe17 	ldw	r2,-8(fp)
 100b2a4:	10801217 	ldw	r2,72(r2)
 100b2a8:	1009883a 	mov	r4,r2
 100b2ac:	10098d80 	call	10098d8 <metal_free_memory>
		if (elf_info->shstrtab != NULL)
 100b2b0:	e0bffe17 	ldw	r2,-8(fp)
 100b2b4:	10801317 	ldw	r2,76(r2)
 100b2b8:	10000426 	beq	r2,zero,100b2cc <elf_release+0xec>
			metal_free_memory(elf_info->shstrtab);
 100b2bc:	e0bffe17 	ldw	r2,-8(fp)
 100b2c0:	10801317 	ldw	r2,76(r2)
 100b2c4:	1009883a 	mov	r4,r2
 100b2c8:	10098d80 	call	10098d8 <metal_free_memory>
		metal_free_memory(img_info);
 100b2cc:	e13fff17 	ldw	r4,-4(fp)
 100b2d0:	10098d80 	call	10098d8 <metal_free_memory>
 100b2d4:	00000106 	br	100b2dc <elf_release+0xfc>
}

void elf_release(void *img_info)
{
	if (img_info == NULL)
		return;
 100b2d8:	0001883a 	nop
			metal_free_memory(elf_info->shdrs);
		if (elf_info->shstrtab != NULL)
			metal_free_memory(elf_info->shstrtab);
		metal_free_memory(img_info);
	}
}
 100b2dc:	e037883a 	mov	sp,fp
 100b2e0:	dfc00117 	ldw	ra,4(sp)
 100b2e4:	df000017 	ldw	fp,0(sp)
 100b2e8:	dec00204 	addi	sp,sp,8
 100b2ec:	f800283a 	ret

0100b2f0 <elf_get_entry>:

metal_phys_addr_t elf_get_entry(void *elf_info)
{
 100b2f0:	defff804 	addi	sp,sp,-32
 100b2f4:	dfc00715 	stw	ra,28(sp)
 100b2f8:	df000615 	stw	fp,24(sp)
 100b2fc:	df000604 	addi	fp,sp,24
 100b300:	e13fff15 	stw	r4,-4(fp)
	if (!elf_info)
 100b304:	e0bfff17 	ldw	r2,-4(fp)
 100b308:	1000021e 	bne	r2,zero,100b314 <elf_get_entry+0x24>
		return METAL_BAD_PHYS;
 100b30c:	00bfffc4 	movi	r2,-1
 100b310:	00001206 	br	100b35c <elf_get_entry+0x6c>

	if (elf_is_64(elf_info) == 0) {
 100b314:	e13fff17 	ldw	r4,-4(fp)
 100b318:	100990c0 	call	100990c <elf_is_64>
 100b31c:	1000071e 	bne	r2,zero,100b33c <elf_get_entry+0x4c>
		Elf32_Ehdr *elf_ehdr = elf_info;
 100b320:	e0bfff17 	ldw	r2,-4(fp)
 100b324:	e0bffa15 	stw	r2,-24(fp)
		Elf32_Addr e_entry;

		e_entry = elf_ehdr->e_entry;
 100b328:	e0bffa17 	ldw	r2,-24(fp)
 100b32c:	10800617 	ldw	r2,24(r2)
 100b330:	e0bffb15 	stw	r2,-20(fp)
		return (metal_phys_addr_t)e_entry;
 100b334:	e0bffb17 	ldw	r2,-20(fp)
 100b338:	00000806 	br	100b35c <elf_get_entry+0x6c>
	} else {
		Elf64_Ehdr *elf_ehdr = elf_info;
 100b33c:	e0bfff17 	ldw	r2,-4(fp)
 100b340:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Addr e_entry;

		e_entry = elf_ehdr->e_entry;
 100b344:	e0bffc17 	ldw	r2,-16(fp)
 100b348:	10c00617 	ldw	r3,24(r2)
 100b34c:	e0fffd15 	stw	r3,-12(fp)
 100b350:	10800717 	ldw	r2,28(r2)
 100b354:	e0bffe15 	stw	r2,-8(fp)
		return (metal_phys_addr_t)e_entry;
 100b358:	e0bffd17 	ldw	r2,-12(fp)
	}
}
 100b35c:	e037883a 	mov	sp,fp
 100b360:	dfc00117 	ldw	ra,4(sp)
 100b364:	df000017 	ldw	fp,0(sp)
 100b368:	dec00204 	addi	sp,sp,8
 100b36c:	f800283a 	ret

0100b370 <elf_locate_rsc_table>:

int elf_locate_rsc_table(void *elf_info, metal_phys_addr_t *da,
			 size_t *offset, size_t *size)
{
 100b370:	defff004 	addi	sp,sp,-64
 100b374:	dfc00f15 	stw	ra,60(sp)
 100b378:	df000e15 	stw	fp,56(sp)
 100b37c:	df000e04 	addi	fp,sp,56
 100b380:	e13ffc15 	stw	r4,-16(fp)
 100b384:	e17ffd15 	stw	r5,-12(fp)
 100b388:	e1bffe15 	stw	r6,-8(fp)
 100b38c:	e1ffff15 	stw	r7,-4(fp)
	char *sect_name = ".resource_table";
 100b390:	008040b4 	movhi	r2,258
 100b394:	1095a304 	addi	r2,r2,22156
 100b398:	e0bff915 	stw	r2,-28(fp)
	void *shdr;
	int *load_state;

	if (elf_info == NULL)
 100b39c:	e0bffc17 	ldw	r2,-16(fp)
 100b3a0:	1000021e 	bne	r2,zero,100b3ac <elf_locate_rsc_table+0x3c>
		return -RPROC_EINVAL;
 100b3a4:	00bfff84 	movi	r2,-2
 100b3a8:	00002d06 	br	100b460 <elf_locate_rsc_table+0xf0>

	load_state = elf_load_state(elf_info);
 100b3ac:	e13ffc17 	ldw	r4,-16(fp)
 100b3b0:	1009d480 	call	1009d48 <elf_load_state>
 100b3b4:	e0bffa15 	stw	r2,-24(fp)
	if ((*load_state & ELF_STATE_HDRS_COMPLETE) == 0)
 100b3b8:	e0bffa17 	ldw	r2,-24(fp)
 100b3bc:	10800017 	ldw	r2,0(r2)
 100b3c0:	1082000c 	andi	r2,r2,2048
 100b3c4:	1000021e 	bne	r2,zero,100b3d0 <elf_locate_rsc_table+0x60>
		return -RPROC_ERR_LOADER_STATE;
 100b3c8:	00bffd04 	movi	r2,-12
 100b3cc:	00002406 	br	100b460 <elf_locate_rsc_table+0xf0>
	shdr = elf_get_section_from_name(elf_info, sect_name);
 100b3d0:	e17ff917 	ldw	r5,-28(fp)
 100b3d4:	e13ffc17 	ldw	r4,-16(fp)
 100b3d8:	100a03c0 	call	100a03c <elf_get_section_from_name>
 100b3dc:	e0bffb15 	stw	r2,-20(fp)
	if (shdr == NULL) {
 100b3e0:	e0bffb17 	ldw	r2,-20(fp)
 100b3e4:	10000e1e 	bne	r2,zero,100b420 <elf_locate_rsc_table+0xb0>
		metal_assert(size != NULL);
 100b3e8:	e0bfff17 	ldw	r2,-4(fp)
 100b3ec:	1000081e 	bne	r2,zero,100b410 <elf_locate_rsc_table+0xa0>
 100b3f0:	01c040b4 	movhi	r7,258
 100b3f4:	39d5a704 	addi	r7,r7,22172
 100b3f8:	018040b4 	movhi	r6,258
 100b3fc:	3195b304 	addi	r6,r6,22220
 100b400:	0140aa84 	movi	r5,682
 100b404:	010040b4 	movhi	r4,258
 100b408:	21153f04 	addi	r4,r4,21756
 100b40c:	10138940 	call	1013894 <__assert_func>
		*size = 0;
 100b410:	e0bfff17 	ldw	r2,-4(fp)
 100b414:	10000015 	stw	zero,0(r2)
		return 0;
 100b418:	0005883a 	mov	r2,zero
 100b41c:	00001006 	br	100b460 <elf_locate_rsc_table+0xf0>
	}
	elf_parse_section(elf_info, shdr, NULL, NULL,
 100b420:	d8000615 	stw	zero,24(sp)
 100b424:	d8000515 	stw	zero,20(sp)
 100b428:	d8000415 	stw	zero,16(sp)
 100b42c:	d8000315 	stw	zero,12(sp)
 100b430:	e0bfff17 	ldw	r2,-4(fp)
 100b434:	d8800215 	stw	r2,8(sp)
 100b438:	e0bffe17 	ldw	r2,-8(fp)
 100b43c:	d8800115 	stw	r2,4(sp)
 100b440:	e0bffd17 	ldw	r2,-12(fp)
 100b444:	d8800015 	stw	r2,0(sp)
 100b448:	000f883a 	mov	r7,zero
 100b44c:	000d883a 	mov	r6,zero
 100b450:	e17ffb17 	ldw	r5,-20(fp)
 100b454:	e13ffc17 	ldw	r4,-16(fp)
 100b458:	100a2c00 	call	100a2c0 <elf_parse_section>
			  da, offset, size,
			  NULL, NULL, NULL, NULL);
	return 0;
 100b45c:	0005883a 	mov	r2,zero
}
 100b460:	e037883a 	mov	sp,fp
 100b464:	dfc00117 	ldw	ra,4(sp)
 100b468:	df000017 	ldw	fp,0(sp)
 100b46c:	dec00204 	addi	sp,sp,8
 100b470:	f800283a 	ret

0100b474 <elf_get_load_state>:

int elf_get_load_state(void *img_info)
{
 100b474:	defffc04 	addi	sp,sp,-16
 100b478:	dfc00315 	stw	ra,12(sp)
 100b47c:	df000215 	stw	fp,8(sp)
 100b480:	df000204 	addi	fp,sp,8
 100b484:	e13fff15 	stw	r4,-4(fp)
	int *load_state;

	if (img_info == NULL)
 100b488:	e0bfff17 	ldw	r2,-4(fp)
 100b48c:	1000021e 	bne	r2,zero,100b498 <elf_get_load_state+0x24>
		return -RPROC_EINVAL;
 100b490:	00bfff84 	movi	r2,-2
 100b494:	00000506 	br	100b4ac <elf_get_load_state+0x38>
	load_state = elf_load_state(img_info);
 100b498:	e13fff17 	ldw	r4,-4(fp)
 100b49c:	1009d480 	call	1009d48 <elf_load_state>
 100b4a0:	e0bffe15 	stw	r2,-8(fp)
	return *load_state;
 100b4a4:	e0bffe17 	ldw	r2,-8(fp)
 100b4a8:	10800017 	ldw	r2,0(r2)
}
 100b4ac:	e037883a 	mov	sp,fp
 100b4b0:	dfc00117 	ldw	ra,4(sp)
 100b4b4:	df000017 	ldw	fp,0(sp)
 100b4b8:	dec00204 	addi	sp,sp,8
 100b4bc:	f800283a 	ret

0100b4c0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 100b4c0:	defffd04 	addi	sp,sp,-12
 100b4c4:	dfc00215 	stw	ra,8(sp)
 100b4c8:	df000115 	stw	fp,4(sp)
 100b4cc:	df000104 	addi	fp,sp,4
 100b4d0:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 100b4d4:	e13fff17 	ldw	r4,-4(fp)
 100b4d8:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100b4dc:	e037883a 	mov	sp,fp
 100b4e0:	dfc00117 	ldw	ra,4(sp)
 100b4e4:	df000017 	ldw	fp,0(sp)
 100b4e8:	dec00204 	addi	sp,sp,8
 100b4ec:	f800283a 	ret

0100b4f0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 100b4f0:	defffd04 	addi	sp,sp,-12
 100b4f4:	dfc00215 	stw	ra,8(sp)
 100b4f8:	df000115 	stw	fp,4(sp)
 100b4fc:	df000104 	addi	fp,sp,4
 100b500:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 100b504:	e13fff17 	ldw	r4,-4(fp)
 100b508:	10011840 	call	1001184 <vPortFree>
}
 100b50c:	0001883a 	nop
 100b510:	e037883a 	mov	sp,fp
 100b514:	dfc00117 	ldw	ra,4(sp)
 100b518:	df000017 	ldw	fp,0(sp)
 100b51c:	dec00204 	addi	sp,sp,8
 100b520:	f800283a 	ret

0100b524 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 100b524:	defffd04 	addi	sp,sp,-12
 100b528:	df000215 	stw	fp,8(sp)
 100b52c:	df000204 	addi	fp,sp,8
 100b530:	e13ffe15 	stw	r4,-8(fp)
 100b534:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100b538:	e0bfff17 	ldw	r2,-4(fp)
 100b53c:	1004d17a 	srli	r2,r2,5
 100b540:	1087883a 	add	r3,r2,r2
 100b544:	18c7883a 	add	r3,r3,r3
 100b548:	1809883a 	mov	r4,r3
 100b54c:	e0fffe17 	ldw	r3,-8(fp)
 100b550:	1907883a 	add	r3,r3,r4
 100b554:	1085883a 	add	r2,r2,r2
 100b558:	1085883a 	add	r2,r2,r2
 100b55c:	1009883a 	mov	r4,r2
 100b560:	e0bffe17 	ldw	r2,-8(fp)
 100b564:	1105883a 	add	r2,r2,r4
 100b568:	11000017 	ldw	r4,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100b56c:	e0bfff17 	ldw	r2,-4(fp)
 100b570:	108007cc 	andi	r2,r2,31
 100b574:	01400044 	movi	r5,1
 100b578:	2884983a 	sll	r2,r5,r2

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100b57c:	2084b03a 	or	r2,r4,r2
 100b580:	18800015 	stw	r2,0(r3)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 100b584:	0001883a 	nop
 100b588:	e037883a 	mov	sp,fp
 100b58c:	df000017 	ldw	fp,0(sp)
 100b590:	dec00104 	addi	sp,sp,4
 100b594:	f800283a 	ret

0100b598 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 100b598:	defffd04 	addi	sp,sp,-12
 100b59c:	df000215 	stw	fp,8(sp)
 100b5a0:	df000204 	addi	fp,sp,8
 100b5a4:	e13ffe15 	stw	r4,-8(fp)
 100b5a8:	e17fff15 	stw	r5,-4(fp)
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100b5ac:	e0bfff17 	ldw	r2,-4(fp)
 100b5b0:	1004d17a 	srli	r2,r2,5
 100b5b4:	1085883a 	add	r2,r2,r2
 100b5b8:	1085883a 	add	r2,r2,r2
 100b5bc:	1007883a 	mov	r3,r2
 100b5c0:	e0bffe17 	ldw	r2,-8(fp)
 100b5c4:	10c5883a 	add	r2,r2,r3
 100b5c8:	10c00017 	ldw	r3,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100b5cc:	e0bfff17 	ldw	r2,-4(fp)
 100b5d0:	108007cc 	andi	r2,r2,31
 100b5d4:	1884d83a 	srl	r2,r3,r2
 100b5d8:	1080004c 	andi	r2,r2,1
 100b5dc:	1004c03a 	cmpne	r2,r2,zero
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100b5e0:	10803fcc 	andi	r2,r2,255
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}
 100b5e4:	e037883a 	mov	sp,fp
 100b5e8:	df000017 	ldw	fp,0(sp)
 100b5ec:	dec00104 	addi	sp,sp,4
 100b5f0:	f800283a 	ret

0100b5f4 <metal_bitmap_is_bit_clear>:
	bitmap[bit / METAL_BITS_PER_ULONG] &=
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 100b5f4:	defffc04 	addi	sp,sp,-16
 100b5f8:	dfc00315 	stw	ra,12(sp)
 100b5fc:	df000215 	stw	fp,8(sp)
 100b600:	df000204 	addi	fp,sp,8
 100b604:	e13ffe15 	stw	r4,-8(fp)
 100b608:	e17fff15 	stw	r5,-4(fp)
	return !metal_bitmap_is_bit_set(bitmap, bit);
 100b60c:	e17fff17 	ldw	r5,-4(fp)
 100b610:	e13ffe17 	ldw	r4,-8(fp)
 100b614:	100b5980 	call	100b598 <metal_bitmap_is_bit_set>
 100b618:	1005003a 	cmpeq	r2,r2,zero
 100b61c:	10803fcc 	andi	r2,r2,255
}
 100b620:	e037883a 	mov	sp,fp
 100b624:	dfc00117 	ldw	ra,4(sp)
 100b628:	df000017 	ldw	fp,0(sp)
 100b62c:	dec00204 	addi	sp,sp,8
 100b630:	f800283a 	ret

0100b634 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 100b634:	defffa04 	addi	sp,sp,-24
 100b638:	dfc00515 	stw	ra,20(sp)
 100b63c:	df000415 	stw	fp,16(sp)
 100b640:	df000404 	addi	fp,sp,16
 100b644:	e13ffd15 	stw	r4,-12(fp)
 100b648:	e17ffe15 	stw	r5,-8(fp)
 100b64c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int bit;
	for (bit = start;
 100b650:	e0bffe17 	ldw	r2,-8(fp)
 100b654:	e0bffc15 	stw	r2,-16(fp)
 100b658:	00000306 	br	100b668 <metal_bitmap_next_clear_bit+0x34>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 100b65c:	e0bffc17 	ldw	r2,-16(fp)
 100b660:	10800044 	addi	r2,r2,1
 100b664:	e0bffc15 	stw	r2,-16(fp)
static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;
	for (bit = start;
 100b668:	e0fffc17 	ldw	r3,-16(fp)
 100b66c:	e0bfff17 	ldw	r2,-4(fp)
 100b670:	1880052e 	bgeu	r3,r2,100b688 <metal_bitmap_next_clear_bit+0x54>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100b674:	e0bffc17 	ldw	r2,-16(fp)
 100b678:	100b883a 	mov	r5,r2
 100b67c:	e13ffd17 	ldw	r4,-12(fp)
 100b680:	100b5f40 	call	100b5f4 <metal_bitmap_is_bit_clear>
 100b684:	103ff526 	beq	r2,zero,100b65c <__alt_data_end+0xff00b65c>
	     bit ++)
		;
	return bit;
 100b688:	e0bffc17 	ldw	r2,-16(fp)
}
 100b68c:	e037883a 	mov	sp,fp
 100b690:	dfc00117 	ldw	ra,4(sp)
 100b694:	df000017 	ldw	fp,0(sp)
 100b698:	dec00204 	addi	sp,sp,8
 100b69c:	f800283a 	ret

0100b6a0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 100b6a0:	defffe04 	addi	sp,sp,-8
 100b6a4:	df000115 	stw	fp,4(sp)
 100b6a8:	df000104 	addi	fp,sp,4
 100b6ac:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 100b6b0:	e0bfff17 	ldw	r2,-4(fp)
 100b6b4:	e0ffff17 	ldw	r3,-4(fp)
 100b6b8:	10c00115 	stw	r3,4(r2)
 100b6bc:	e0bfff17 	ldw	r2,-4(fp)
 100b6c0:	10c00117 	ldw	r3,4(r2)
 100b6c4:	e0bfff17 	ldw	r2,-4(fp)
 100b6c8:	10c00015 	stw	r3,0(r2)
}
 100b6cc:	0001883a 	nop
 100b6d0:	e037883a 	mov	sp,fp
 100b6d4:	df000017 	ldw	fp,0(sp)
 100b6d8:	dec00104 	addi	sp,sp,4
 100b6dc:	f800283a 	ret

0100b6e0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 100b6e0:	defffd04 	addi	sp,sp,-12
 100b6e4:	df000215 	stw	fp,8(sp)
 100b6e8:	df000204 	addi	fp,sp,8
 100b6ec:	e13ffe15 	stw	r4,-8(fp)
 100b6f0:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 100b6f4:	e0bffe17 	ldw	r2,-8(fp)
 100b6f8:	10c00117 	ldw	r3,4(r2)
 100b6fc:	e0bfff17 	ldw	r2,-4(fp)
 100b700:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 100b704:	e0bfff17 	ldw	r2,-4(fp)
 100b708:	e0fffe17 	ldw	r3,-8(fp)
 100b70c:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 100b710:	e0bfff17 	ldw	r2,-4(fp)
 100b714:	10800017 	ldw	r2,0(r2)
 100b718:	e0ffff17 	ldw	r3,-4(fp)
 100b71c:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 100b720:	e0bfff17 	ldw	r2,-4(fp)
 100b724:	10800117 	ldw	r2,4(r2)
 100b728:	e0ffff17 	ldw	r3,-4(fp)
 100b72c:	10c00015 	stw	r3,0(r2)
}
 100b730:	0001883a 	nop
 100b734:	e037883a 	mov	sp,fp
 100b738:	df000017 	ldw	fp,0(sp)
 100b73c:	dec00104 	addi	sp,sp,4
 100b740:	f800283a 	ret

0100b744 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 100b744:	defffc04 	addi	sp,sp,-16
 100b748:	dfc00315 	stw	ra,12(sp)
 100b74c:	df000215 	stw	fp,8(sp)
 100b750:	df000204 	addi	fp,sp,8
 100b754:	e13ffe15 	stw	r4,-8(fp)
 100b758:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 100b75c:	e17fff17 	ldw	r5,-4(fp)
 100b760:	e13ffe17 	ldw	r4,-8(fp)
 100b764:	100b6e00 	call	100b6e0 <metal_list_add_before>
}
 100b768:	0001883a 	nop
 100b76c:	e037883a 	mov	sp,fp
 100b770:	dfc00117 	ldw	ra,4(sp)
 100b774:	df000017 	ldw	fp,0(sp)
 100b778:	dec00204 	addi	sp,sp,8
 100b77c:	f800283a 	ret

0100b780 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 100b780:	defffe04 	addi	sp,sp,-8
 100b784:	df000115 	stw	fp,4(sp)
 100b788:	df000104 	addi	fp,sp,4
 100b78c:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 100b790:	e0bfff17 	ldw	r2,-4(fp)
 100b794:	10800017 	ldw	r2,0(r2)
 100b798:	e0ffff17 	ldw	r3,-4(fp)
 100b79c:	18c00117 	ldw	r3,4(r3)
 100b7a0:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 100b7a4:	e0bfff17 	ldw	r2,-4(fp)
 100b7a8:	10800117 	ldw	r2,4(r2)
 100b7ac:	e0ffff17 	ldw	r3,-4(fp)
 100b7b0:	18c00017 	ldw	r3,0(r3)
 100b7b4:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 100b7b8:	e0bfff17 	ldw	r2,-4(fp)
 100b7bc:	e0ffff17 	ldw	r3,-4(fp)
 100b7c0:	10c00115 	stw	r3,4(r2)
 100b7c4:	e0bfff17 	ldw	r2,-4(fp)
 100b7c8:	10c00117 	ldw	r3,4(r2)
 100b7cc:	e0bfff17 	ldw	r2,-4(fp)
 100b7d0:	10c00015 	stw	r3,0(r2)
}
 100b7d4:	0001883a 	nop
 100b7d8:	e037883a 	mov	sp,fp
 100b7dc:	df000017 	ldw	fp,0(sp)
 100b7e0:	dec00104 	addi	sp,sp,4
 100b7e4:	f800283a 	ret

0100b7e8 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 100b7e8:	defffd04 	addi	sp,sp,-12
 100b7ec:	df000215 	stw	fp,8(sp)
 100b7f0:	df000204 	addi	fp,sp,8
 100b7f4:	e13ffe15 	stw	r4,-8(fp)
 100b7f8:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 100b7fc:	e0bffe17 	ldw	r2,-8(fp)
 100b800:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 100b804:	10bfffe0 	cmpeqi	r2,r2,-1
 100b808:	1000091e 	bne	r2,zero,100b830 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 100b80c:	e0bffe17 	ldw	r2,-8(fp)
 100b810:	10800217 	ldw	r2,8(r2)
 100b814:	e0ffff17 	ldw	r3,-4(fp)
 100b818:	1880052e 	bgeu	r3,r2,100b830 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 100b81c:	e0bffe17 	ldw	r2,-8(fp)
 100b820:	10c00017 	ldw	r3,0(r2)
		: NULL);
 100b824:	e0bfff17 	ldw	r2,-4(fp)
 100b828:	1885883a 	add	r2,r3,r2
 100b82c:	00000106 	br	100b834 <metal_io_virt+0x4c>
 100b830:	0005883a 	mov	r2,zero
}
 100b834:	e037883a 	mov	sp,fp
 100b838:	df000017 	ldw	fp,0(sp)
 100b83c:	dec00104 	addi	sp,sp,4
 100b840:	f800283a 	ret

0100b844 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100b844:	defffc04 	addi	sp,sp,-16
 100b848:	df000315 	stw	fp,12(sp)
 100b84c:	df000304 	addi	fp,sp,12
 100b850:	e13ffe15 	stw	r4,-8(fp)
 100b854:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100b858:	e0bfff17 	ldw	r2,-4(fp)
 100b85c:	e0fffe17 	ldw	r3,-8(fp)
 100b860:	18c00017 	ldw	r3,0(r3)
 100b864:	10c5c83a 	sub	r2,r2,r3
 100b868:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100b86c:	e0bffe17 	ldw	r2,-8(fp)
 100b870:	10800217 	ldw	r2,8(r2)
 100b874:	e0fffd17 	ldw	r3,-12(fp)
 100b878:	1880022e 	bgeu	r3,r2,100b884 <metal_io_virt_to_offset+0x40>
 100b87c:	e0bffd17 	ldw	r2,-12(fp)
 100b880:	00000106 	br	100b888 <metal_io_virt_to_offset+0x44>
 100b884:	00bfffc4 	movi	r2,-1
}
 100b888:	e037883a 	mov	sp,fp
 100b88c:	df000017 	ldw	fp,0(sp)
 100b890:	dec00104 	addi	sp,sp,4
 100b894:	f800283a 	ret

0100b898 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 100b898:	defffb04 	addi	sp,sp,-20
 100b89c:	dfc00415 	stw	ra,16(sp)
 100b8a0:	df000315 	stw	fp,12(sp)
 100b8a4:	df000304 	addi	fp,sp,12
 100b8a8:	e13ffe15 	stw	r4,-8(fp)
 100b8ac:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 100b8b0:	e0bffe17 	ldw	r2,-8(fp)
 100b8b4:	10800c17 	ldw	r2,48(r2)
 100b8b8:	1000211e 	bne	r2,zero,100b940 <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 100b8bc:	e0bffe17 	ldw	r2,-8(fp)
 100b8c0:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 100b8c4:	10800828 	cmpgeui	r2,r2,32
 100b8c8:	1000051e 	bne	r2,zero,100b8e0 <metal_io_phys+0x48>
 100b8cc:	e0bffe17 	ldw	r2,-8(fp)
 100b8d0:	10800317 	ldw	r2,12(r2)
 100b8d4:	e0ffff17 	ldw	r3,-4(fp)
 100b8d8:	1884d83a 	srl	r2,r3,r2
 100b8dc:	00000106 	br	100b8e4 <metal_io_phys+0x4c>
 100b8e0:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 100b8e4:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100b8e8:	e0bffe17 	ldw	r2,-8(fp)
 100b8ec:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 100b8f0:	10001126 	beq	r2,zero,100b938 <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100b8f4:	e0bffe17 	ldw	r2,-8(fp)
 100b8f8:	10800217 	ldw	r2,8(r2)
 100b8fc:	e0ffff17 	ldw	r3,-4(fp)
 100b900:	18800d2e 	bgeu	r3,r2,100b938 <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 100b904:	e0bffe17 	ldw	r2,-8(fp)
 100b908:	10c00117 	ldw	r3,4(r2)
 100b90c:	e0bffd17 	ldw	r2,-12(fp)
 100b910:	1085883a 	add	r2,r2,r2
 100b914:	1085883a 	add	r2,r2,r2
 100b918:	1885883a 	add	r2,r3,r2
 100b91c:	10c00017 	ldw	r3,0(r2)
 100b920:	e0bffe17 	ldw	r2,-8(fp)
 100b924:	11000417 	ldw	r4,16(r2)
 100b928:	e0bfff17 	ldw	r2,-4(fp)
 100b92c:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 100b930:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100b934:	00000706 	br	100b954 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 100b938:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100b93c:	00000506 	br	100b954 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 100b940:	e0bffe17 	ldw	r2,-8(fp)
 100b944:	10800c17 	ldw	r2,48(r2)
 100b948:	e17fff17 	ldw	r5,-4(fp)
 100b94c:	e13ffe17 	ldw	r4,-8(fp)
 100b950:	103ee83a 	callr	r2
}
 100b954:	e037883a 	mov	sp,fp
 100b958:	dfc00117 	ldw	ra,4(sp)
 100b95c:	df000017 	ldw	fp,0(sp)
 100b960:	dec00204 	addi	sp,sp,8
 100b964:	f800283a 	ret

0100b968 <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 100b968:	defffb04 	addi	sp,sp,-20
 100b96c:	dfc00415 	stw	ra,16(sp)
 100b970:	df000315 	stw	fp,12(sp)
 100b974:	df000304 	addi	fp,sp,12
 100b978:	e13ffe15 	stw	r4,-8(fp)
 100b97c:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 100b980:	e0bffe17 	ldw	r2,-8(fp)
 100b984:	10800d17 	ldw	r2,52(r2)
 100b988:	1000231e 	bne	r2,zero,100ba18 <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 100b98c:	e0bffe17 	ldw	r2,-8(fp)
 100b990:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 100b994:	10bfffd8 	cmpnei	r2,r2,-1
 100b998:	1000061e 	bne	r2,zero,100b9b4 <metal_io_phys_to_offset+0x4c>
 100b99c:	e0bffe17 	ldw	r2,-8(fp)
 100b9a0:	10800117 	ldw	r2,4(r2)
 100b9a4:	10800017 	ldw	r2,0(r2)
 100b9a8:	e0ffff17 	ldw	r3,-4(fp)
 100b9ac:	1885c83a 	sub	r2,r3,r2
 100b9b0:	00000406 	br	100b9c4 <metal_io_phys_to_offset+0x5c>
 100b9b4:	e0bffe17 	ldw	r2,-8(fp)
 100b9b8:	10c00417 	ldw	r3,16(r2)
 100b9bc:	e0bfff17 	ldw	r2,-4(fp)
 100b9c0:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 100b9c4:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 100b9c8:	e17ffd17 	ldw	r5,-12(fp)
 100b9cc:	e13ffe17 	ldw	r4,-8(fp)
 100b9d0:	100b8980 	call	100b898 <metal_io_phys>
 100b9d4:	1007883a 	mov	r3,r2
 100b9d8:	e0bfff17 	ldw	r2,-4(fp)
 100b9dc:	1880021e 	bne	r3,r2,100b9e8 <metal_io_phys_to_offset+0x80>
				return offset;
 100b9e0:	e0bffd17 	ldw	r2,-12(fp)
 100b9e4:	00001106 	br	100ba2c <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 100b9e8:	e0bffe17 	ldw	r2,-8(fp)
 100b9ec:	10c00417 	ldw	r3,16(r2)
 100b9f0:	e0bffd17 	ldw	r2,-12(fp)
 100b9f4:	1885883a 	add	r2,r3,r2
 100b9f8:	10800044 	addi	r2,r2,1
 100b9fc:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 100ba00:	e0bffe17 	ldw	r2,-8(fp)
 100ba04:	10800217 	ldw	r2,8(r2)
 100ba08:	e0fffd17 	ldw	r3,-12(fp)
 100ba0c:	18bfee36 	bltu	r3,r2,100b9c8 <__alt_data_end+0xff00b9c8>
		return METAL_BAD_OFFSET;
 100ba10:	00bfffc4 	movi	r2,-1
 100ba14:	00000506 	br	100ba2c <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 100ba18:	e0bffe17 	ldw	r2,-8(fp)
 100ba1c:	10800d17 	ldw	r2,52(r2)
 100ba20:	e17fff17 	ldw	r5,-4(fp)
 100ba24:	e13ffe17 	ldw	r4,-8(fp)
 100ba28:	103ee83a 	callr	r2
}
 100ba2c:	e037883a 	mov	sp,fp
 100ba30:	dfc00117 	ldw	ra,4(sp)
 100ba34:	df000017 	ldw	fp,0(sp)
 100ba38:	dec00204 	addi	sp,sp,8
 100ba3c:	f800283a 	ret

0100ba40 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 100ba40:	defffc04 	addi	sp,sp,-16
 100ba44:	dfc00315 	stw	ra,12(sp)
 100ba48:	df000215 	stw	fp,8(sp)
 100ba4c:	df000204 	addi	fp,sp,8
 100ba50:	e13ffe15 	stw	r4,-8(fp)
 100ba54:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 100ba58:	e17fff17 	ldw	r5,-4(fp)
 100ba5c:	e13ffe17 	ldw	r4,-8(fp)
 100ba60:	100b9680 	call	100b968 <metal_io_phys_to_offset>
 100ba64:	100b883a 	mov	r5,r2
 100ba68:	e13ffe17 	ldw	r4,-8(fp)
 100ba6c:	100b7e80 	call	100b7e8 <metal_io_virt>
}
 100ba70:	e037883a 	mov	sp,fp
 100ba74:	dfc00117 	ldw	ra,4(sp)
 100ba78:	df000017 	ldw	fp,0(sp)
 100ba7c:	dec00204 	addi	sp,sp,8
 100ba80:	f800283a 	ret

0100ba84 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 100ba84:	defffe04 	addi	sp,sp,-8
 100ba88:	df000115 	stw	fp,4(sp)
 100ba8c:	df000104 	addi	fp,sp,4
 100ba90:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 100ba94:	e0bfff17 	ldw	r2,-4(fp)
 100ba98:	10000015 	stw	zero,0(r2)
 100ba9c:	0001b03a 	sync
}
 100baa0:	0001883a 	nop
 100baa4:	e037883a 	mov	sp,fp
 100baa8:	df000017 	ldw	fp,0(sp)
 100baac:	dec00104 	addi	sp,sp,4
 100bab0:	f800283a 	ret

0100bab4 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 100bab4:	defffe04 	addi	sp,sp,-8
 100bab8:	df000115 	stw	fp,4(sp)
 100babc:	df000104 	addi	fp,sp,4
 100bac0:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 100bac4:	0001883a 	nop
 100bac8:	e0bfff17 	ldw	r2,-4(fp)
 100bacc:	00c00044 	movi	r3,1
 100bad0:	10c00015 	stw	r3,0(r2)
 100bad4:	e0bfff17 	ldw	r2,-4(fp)
 100bad8:	10800017 	ldw	r2,0(r2)
 100badc:	103ffa1e 	bne	r2,zero,100bac8 <__alt_data_end+0xff00bac8>
		;
	}
}
 100bae0:	0001883a 	nop
 100bae4:	e037883a 	mov	sp,fp
 100bae8:	df000017 	ldw	fp,0(sp)
 100baec:	dec00104 	addi	sp,sp,4
 100baf0:	f800283a 	ret

0100baf4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 100baf4:	defffe04 	addi	sp,sp,-8
 100baf8:	df000115 	stw	fp,4(sp)
 100bafc:	df000104 	addi	fp,sp,4
 100bb00:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 100bb04:	e0bfff17 	ldw	r2,-4(fp)
 100bb08:	0001b03a 	sync
 100bb0c:	10000015 	stw	zero,0(r2)
}
 100bb10:	0001883a 	nop
 100bb14:	e037883a 	mov	sp,fp
 100bb18:	df000017 	ldw	fp,0(sp)
 100bb1c:	dec00104 	addi	sp,sp,4
 100bb20:	f800283a 	ret

0100bb24 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 100bb24:	defffd04 	addi	sp,sp,-12
 100bb28:	dfc00215 	stw	ra,8(sp)
 100bb2c:	df000115 	stw	fp,4(sp)
 100bb30:	df000104 	addi	fp,sp,4
 100bb34:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 100bb38:	e13fff17 	ldw	r4,-4(fp)
 100bb3c:	100ba840 	call	100ba84 <__metal_mutex_init>
}
 100bb40:	0001883a 	nop
 100bb44:	e037883a 	mov	sp,fp
 100bb48:	dfc00117 	ldw	ra,4(sp)
 100bb4c:	df000017 	ldw	fp,0(sp)
 100bb50:	dec00204 	addi	sp,sp,8
 100bb54:	f800283a 	ret

0100bb58 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 100bb58:	defffd04 	addi	sp,sp,-12
 100bb5c:	dfc00215 	stw	ra,8(sp)
 100bb60:	df000115 	stw	fp,4(sp)
 100bb64:	df000104 	addi	fp,sp,4
 100bb68:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 100bb6c:	e13fff17 	ldw	r4,-4(fp)
 100bb70:	100bab40 	call	100bab4 <__metal_mutex_acquire>
}
 100bb74:	0001883a 	nop
 100bb78:	e037883a 	mov	sp,fp
 100bb7c:	dfc00117 	ldw	ra,4(sp)
 100bb80:	df000017 	ldw	fp,0(sp)
 100bb84:	dec00204 	addi	sp,sp,8
 100bb88:	f800283a 	ret

0100bb8c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 100bb8c:	defffd04 	addi	sp,sp,-12
 100bb90:	dfc00215 	stw	ra,8(sp)
 100bb94:	df000115 	stw	fp,4(sp)
 100bb98:	df000104 	addi	fp,sp,4
 100bb9c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 100bba0:	e13fff17 	ldw	r4,-4(fp)
 100bba4:	100baf40 	call	100baf4 <__metal_mutex_release>
}
 100bba8:	0001883a 	nop
 100bbac:	e037883a 	mov	sp,fp
 100bbb0:	dfc00117 	ldw	ra,4(sp)
 100bbb4:	df000017 	ldw	fp,0(sp)
 100bbb8:	dec00204 	addi	sp,sp,8
 100bbbc:	f800283a 	ret

0100bbc0 <RPROC_ERR_PTR>:
	else
		return 0;
}

static inline void *RPROC_ERR_PTR(long error)
{
 100bbc0:	defffe04 	addi	sp,sp,-8
 100bbc4:	df000115 	stw	fp,4(sp)
 100bbc8:	df000104 	addi	fp,sp,4
 100bbcc:	e13fff15 	stw	r4,-4(fp)
	return (void *)error;
 100bbd0:	e0bfff17 	ldw	r2,-4(fp)
}
 100bbd4:	e037883a 	mov	sp,fp
 100bbd8:	df000017 	ldw	fp,0(sp)
 100bbdc:	dec00104 	addi	sp,sp,4
 100bbe0:	f800283a 	ret

0100bbe4 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].event)

static inline int vring_size(unsigned int num, unsigned long align)
{
 100bbe4:	defffc04 	addi	sp,sp,-16
 100bbe8:	df000315 	stw	fp,12(sp)
 100bbec:	df000304 	addi	fp,sp,12
 100bbf0:	e13ffe15 	stw	r4,-8(fp)
 100bbf4:	e17fff15 	stw	r5,-4(fp)
	int size;

	size = num * sizeof(struct vring_desc);
 100bbf8:	e0bffe17 	ldw	r2,-8(fp)
 100bbfc:	1004913a 	slli	r2,r2,4
 100bc00:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 100bc04:	e0bffe17 	ldw	r2,-8(fp)
 100bc08:	108000c4 	addi	r2,r2,3
 100bc0c:	1085883a 	add	r2,r2,r2
 100bc10:	1007883a 	mov	r3,r2
 100bc14:	e0bffd17 	ldw	r2,-12(fp)
 100bc18:	1885883a 	add	r2,r3,r2
 100bc1c:	e0bffd15 	stw	r2,-12(fp)
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 100bc20:	e0fffd17 	ldw	r3,-12(fp)
 100bc24:	e0bfff17 	ldw	r2,-4(fp)
 100bc28:	1885883a 	add	r2,r3,r2
 100bc2c:	10ffffc4 	addi	r3,r2,-1
 100bc30:	e0bfff17 	ldw	r2,-4(fp)
 100bc34:	0085c83a 	sub	r2,zero,r2
 100bc38:	1884703a 	and	r2,r3,r2
 100bc3c:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 100bc40:	e0bffe17 	ldw	r2,-8(fp)
 100bc44:	100690fa 	slli	r3,r2,3

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
 100bc48:	e0bffd17 	ldw	r2,-12(fp)
 100bc4c:	1885883a 	add	r2,r3,r2
 100bc50:	10800184 	addi	r2,r2,6
 100bc54:	e0bffd15 	stw	r2,-12(fp)
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);

	return size;
 100bc58:	e0bffd17 	ldw	r2,-12(fp)
}
 100bc5c:	e037883a 	mov	sp,fp
 100bc60:	df000017 	ldw	fp,0(sp)
 100bc64:	dec00104 	addi	sp,sp,4
 100bc68:	f800283a 	ret

0100bc6c <remoteproc_check_fw_format>:
/******************************************************************************
 *  static functions
 *****************************************************************************/
static struct loader_ops *
remoteproc_check_fw_format(const void *img_data, size_t img_len)
{
 100bc6c:	defffc04 	addi	sp,sp,-16
 100bc70:	dfc00315 	stw	ra,12(sp)
 100bc74:	df000215 	stw	fp,8(sp)
 100bc78:	df000204 	addi	fp,sp,8
 100bc7c:	e13ffe15 	stw	r4,-8(fp)
 100bc80:	e17fff15 	stw	r5,-4(fp)
	if (img_len <= 0)
 100bc84:	e0bfff17 	ldw	r2,-4(fp)
 100bc88:	1000021e 	bne	r2,zero,100bc94 <remoteproc_check_fw_format+0x28>
		return NULL;
 100bc8c:	0005883a 	mov	r2,zero
 100bc90:	00000806 	br	100bcb4 <remoteproc_check_fw_format+0x48>
	else if (elf_identify(img_data, img_len) == 0)
 100bc94:	e17fff17 	ldw	r5,-4(fp)
 100bc98:	e13ffe17 	ldw	r4,-8(fp)
 100bc9c:	100a6080 	call	100a608 <elf_identify>
 100bca0:	1000031e 	bne	r2,zero,100bcb0 <remoteproc_check_fw_format+0x44>
		return &elf_ops;
 100bca4:	008040b4 	movhi	r2,258
 100bca8:	109ab104 	addi	r2,r2,27332
 100bcac:	00000106 	br	100bcb4 <remoteproc_check_fw_format+0x48>
	else
		return NULL;
 100bcb0:	0005883a 	mov	r2,zero
}
 100bcb4:	e037883a 	mov	sp,fp
 100bcb8:	dfc00117 	ldw	ra,4(sp)
 100bcbc:	df000017 	ldw	fp,0(sp)
 100bcc0:	dec00204 	addi	sp,sp,8
 100bcc4:	f800283a 	ret

0100bcc8 <remoteproc_get_mem>:

static struct remoteproc_mem *
remoteproc_get_mem(struct remoteproc *rproc, const char *name,
		   metal_phys_addr_t pa, metal_phys_addr_t da,
		   void *va, size_t size)
{
 100bcc8:	defff404 	addi	sp,sp,-48
 100bccc:	dfc00b15 	stw	ra,44(sp)
 100bcd0:	df000a15 	stw	fp,40(sp)
 100bcd4:	df000a04 	addi	fp,sp,40
 100bcd8:	e13ffc15 	stw	r4,-16(fp)
 100bcdc:	e17ffd15 	stw	r5,-12(fp)
 100bce0:	e1bffe15 	stw	r6,-8(fp)
 100bce4:	e1ffff15 	stw	r7,-4(fp)
	struct metal_list *node;
	struct remoteproc_mem *mem;

	metal_list_for_each(&rproc->mems, node) {
 100bce8:	e0bffc17 	ldw	r2,-16(fp)
 100bcec:	10800417 	ldw	r2,16(r2)
 100bcf0:	e0bff615 	stw	r2,-40(fp)
 100bcf4:	00004806 	br	100be18 <remoteproc_get_mem+0x150>
		mem = metal_container_of(node, struct remoteproc_mem, node);
 100bcf8:	e0bff617 	ldw	r2,-40(fp)
 100bcfc:	10bff404 	addi	r2,r2,-48
 100bd00:	e0bff715 	stw	r2,-36(fp)
		if (name) {
 100bd04:	e0bffd17 	ldw	r2,-12(fp)
 100bd08:	10000926 	beq	r2,zero,100bd30 <remoteproc_get_mem+0x68>
			if (!strncmp(name, mem->name, sizeof(mem->name)))
 100bd0c:	e0bff717 	ldw	r2,-36(fp)
 100bd10:	10800304 	addi	r2,r2,12
 100bd14:	01800804 	movi	r6,32
 100bd18:	100b883a 	mov	r5,r2
 100bd1c:	e13ffd17 	ldw	r4,-12(fp)
 100bd20:	10146d40 	call	10146d4 <strncmp>
 100bd24:	1000391e 	bne	r2,zero,100be0c <remoteproc_get_mem+0x144>
				return mem;
 100bd28:	e0bff717 	ldw	r2,-36(fp)
 100bd2c:	00003f06 	br	100be2c <remoteproc_get_mem+0x164>
		} else if (pa != METAL_BAD_PHYS) {
 100bd30:	e0bffe17 	ldw	r2,-8(fp)
 100bd34:	10bfffe0 	cmpeqi	r2,r2,-1
 100bd38:	1000121e 	bne	r2,zero,100bd84 <remoteproc_get_mem+0xbc>
			metal_phys_addr_t pa_start, pa_end;

			pa_start = mem->pa;
 100bd3c:	e0bff717 	ldw	r2,-36(fp)
 100bd40:	10800117 	ldw	r2,4(r2)
 100bd44:	e0bff815 	stw	r2,-32(fp)
			pa_end = pa_start + mem->size;
 100bd48:	e0bff717 	ldw	r2,-36(fp)
 100bd4c:	10c00217 	ldw	r3,8(r2)
 100bd50:	e0bff817 	ldw	r2,-32(fp)
 100bd54:	1885883a 	add	r2,r3,r2
 100bd58:	e0bff915 	stw	r2,-28(fp)
			if (pa >= pa_start && (pa + size) <= pa_end)
 100bd5c:	e0fffe17 	ldw	r3,-8(fp)
 100bd60:	e0bff817 	ldw	r2,-32(fp)
 100bd64:	18802936 	bltu	r3,r2,100be0c <remoteproc_get_mem+0x144>
 100bd68:	e0fffe17 	ldw	r3,-8(fp)
 100bd6c:	e0800317 	ldw	r2,12(fp)
 100bd70:	1885883a 	add	r2,r3,r2
 100bd74:	e0fff917 	ldw	r3,-28(fp)
 100bd78:	18802436 	bltu	r3,r2,100be0c <remoteproc_get_mem+0x144>
				return mem;
 100bd7c:	e0bff717 	ldw	r2,-36(fp)
 100bd80:	00002a06 	br	100be2c <remoteproc_get_mem+0x164>
		} else if (da != METAL_BAD_PHYS) {
 100bd84:	e0bfff17 	ldw	r2,-4(fp)
 100bd88:	10bfffe0 	cmpeqi	r2,r2,-1
 100bd8c:	1000121e 	bne	r2,zero,100bdd8 <remoteproc_get_mem+0x110>
			metal_phys_addr_t da_start, da_end;

			da_start = mem->da;
 100bd90:	e0bff717 	ldw	r2,-36(fp)
 100bd94:	10800017 	ldw	r2,0(r2)
 100bd98:	e0bffa15 	stw	r2,-24(fp)
			da_end = da_start + mem->size;
 100bd9c:	e0bff717 	ldw	r2,-36(fp)
 100bda0:	10c00217 	ldw	r3,8(r2)
 100bda4:	e0bffa17 	ldw	r2,-24(fp)
 100bda8:	1885883a 	add	r2,r3,r2
 100bdac:	e0bffb15 	stw	r2,-20(fp)
			if (da >= da_start && (da + size) <= da_end)
 100bdb0:	e0ffff17 	ldw	r3,-4(fp)
 100bdb4:	e0bffa17 	ldw	r2,-24(fp)
 100bdb8:	18801436 	bltu	r3,r2,100be0c <remoteproc_get_mem+0x144>
 100bdbc:	e0ffff17 	ldw	r3,-4(fp)
 100bdc0:	e0800317 	ldw	r2,12(fp)
 100bdc4:	1885883a 	add	r2,r3,r2
 100bdc8:	e0fffb17 	ldw	r3,-20(fp)
 100bdcc:	18800f36 	bltu	r3,r2,100be0c <remoteproc_get_mem+0x144>
				return mem;
 100bdd0:	e0bff717 	ldw	r2,-36(fp)
 100bdd4:	00001506 	br	100be2c <remoteproc_get_mem+0x164>
		} else if (va) {
 100bdd8:	e0800217 	ldw	r2,8(fp)
 100bddc:	10000926 	beq	r2,zero,100be04 <remoteproc_get_mem+0x13c>
			if (metal_io_virt_to_offset(mem->io, va) !=
 100bde0:	e0bff717 	ldw	r2,-36(fp)
 100bde4:	10800b17 	ldw	r2,44(r2)
 100bde8:	e1400217 	ldw	r5,8(fp)
 100bdec:	1009883a 	mov	r4,r2
 100bdf0:	100b8440 	call	100b844 <metal_io_virt_to_offset>
 100bdf4:	10bfffe0 	cmpeqi	r2,r2,-1
 100bdf8:	1000041e 	bne	r2,zero,100be0c <remoteproc_get_mem+0x144>
			    METAL_BAD_OFFSET)
				return mem;
 100bdfc:	e0bff717 	ldw	r2,-36(fp)
 100be00:	00000a06 	br	100be2c <remoteproc_get_mem+0x164>

		} else {
			return NULL;
 100be04:	0005883a 	mov	r2,zero
 100be08:	00000806 	br	100be2c <remoteproc_get_mem+0x164>
		   void *va, size_t size)
{
	struct metal_list *node;
	struct remoteproc_mem *mem;

	metal_list_for_each(&rproc->mems, node) {
 100be0c:	e0bff617 	ldw	r2,-40(fp)
 100be10:	10800017 	ldw	r2,0(r2)
 100be14:	e0bff615 	stw	r2,-40(fp)
 100be18:	e0bffc17 	ldw	r2,-16(fp)
 100be1c:	10c00404 	addi	r3,r2,16
 100be20:	e0bff617 	ldw	r2,-40(fp)
 100be24:	18bfb41e 	bne	r3,r2,100bcf8 <__alt_data_end+0xff00bcf8>

		} else {
			return NULL;
		}
	}
	return NULL;
 100be28:	0005883a 	mov	r2,zero
}
 100be2c:	e037883a 	mov	sp,fp
 100be30:	dfc00117 	ldw	ra,4(sp)
 100be34:	df000017 	ldw	fp,0(sp)
 100be38:	dec00204 	addi	sp,sp,8
 100be3c:	f800283a 	ret

0100be40 <remoteproc_datopa>:

static metal_phys_addr_t
remoteproc_datopa(struct remoteproc_mem *mem, metal_phys_addr_t da)
{
 100be40:	defffc04 	addi	sp,sp,-16
 100be44:	df000315 	stw	fp,12(sp)
 100be48:	df000304 	addi	fp,sp,12
 100be4c:	e13ffe15 	stw	r4,-8(fp)
 100be50:	e17fff15 	stw	r5,-4(fp)
	metal_phys_addr_t pa;

	pa = mem->pa + da - mem->da;
 100be54:	e0bffe17 	ldw	r2,-8(fp)
 100be58:	10c00117 	ldw	r3,4(r2)
 100be5c:	e0bfff17 	ldw	r2,-4(fp)
 100be60:	1887883a 	add	r3,r3,r2
 100be64:	e0bffe17 	ldw	r2,-8(fp)
 100be68:	10800017 	ldw	r2,0(r2)
 100be6c:	1885c83a 	sub	r2,r3,r2
 100be70:	e0bffd15 	stw	r2,-12(fp)
	return pa;
 100be74:	e0bffd17 	ldw	r2,-12(fp)
}
 100be78:	e037883a 	mov	sp,fp
 100be7c:	df000017 	ldw	fp,0(sp)
 100be80:	dec00104 	addi	sp,sp,4
 100be84:	f800283a 	ret

0100be88 <remoteproc_patoda>:

static metal_phys_addr_t
remoteproc_patoda(struct remoteproc_mem *mem, metal_phys_addr_t pa)
{
 100be88:	defffc04 	addi	sp,sp,-16
 100be8c:	df000315 	stw	fp,12(sp)
 100be90:	df000304 	addi	fp,sp,12
 100be94:	e13ffe15 	stw	r4,-8(fp)
 100be98:	e17fff15 	stw	r5,-4(fp)
	metal_phys_addr_t da;

	da = mem->da + pa - mem->pa;
 100be9c:	e0bffe17 	ldw	r2,-8(fp)
 100bea0:	10c00017 	ldw	r3,0(r2)
 100bea4:	e0bfff17 	ldw	r2,-4(fp)
 100bea8:	1887883a 	add	r3,r3,r2
 100beac:	e0bffe17 	ldw	r2,-8(fp)
 100beb0:	10800117 	ldw	r2,4(r2)
 100beb4:	1885c83a 	sub	r2,r3,r2
 100beb8:	e0bffd15 	stw	r2,-12(fp)
	return da;
 100bebc:	e0bffd17 	ldw	r2,-12(fp)
}
 100bec0:	e037883a 	mov	sp,fp
 100bec4:	df000017 	ldw	fp,0(sp)
 100bec8:	dec00104 	addi	sp,sp,4
 100becc:	f800283a 	ret

0100bed0 <remoteproc_get_rsc_table>:
static void *remoteproc_get_rsc_table(struct remoteproc *rproc,
				      void *store,
				      struct image_store_ops *store_ops,
				      size_t offset,
				      size_t len)
{
 100bed0:	defff404 	addi	sp,sp,-48
 100bed4:	dfc00b15 	stw	ra,44(sp)
 100bed8:	df000a15 	stw	fp,40(sp)
 100bedc:	df000a04 	addi	fp,sp,40
 100bee0:	e13ffc15 	stw	r4,-16(fp)
 100bee4:	e17ffd15 	stw	r5,-12(fp)
 100bee8:	e1bffe15 	stw	r6,-8(fp)
 100beec:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	void *rsc_table = NULL;
 100bef0:	e03ff915 	stw	zero,-28(fp)
	const void *img_data;

	/* Copy the resource table to local memory,
	 * the caller should be responsible to release the memory
	 */
	rsc_table = metal_allocate_memory(len);
 100bef4:	e1000217 	ldw	r4,8(fp)
 100bef8:	100b4c00 	call	100b4c0 <metal_allocate_memory>
 100befc:	e0bff915 	stw	r2,-28(fp)
	if (!rsc_table) {
 100bf00:	e0bff917 	ldw	r2,-28(fp)
 100bf04:	1000031e 	bne	r2,zero,100bf14 <remoteproc_get_rsc_table+0x44>
		return RPROC_ERR_PTR(-RPROC_ENOMEM);
 100bf08:	013fffc4 	movi	r4,-1
 100bf0c:	100bbc00 	call	100bbc0 <RPROC_ERR_PTR>
 100bf10:	00004106 	br	100c018 <remoteproc_get_rsc_table+0x148>
	}
	ret = store_ops->load(store, offset, len, &img_data, RPROC_LOAD_ANYADDR,
 100bf14:	e0bffe17 	ldw	r2,-8(fp)
 100bf18:	10800217 	ldw	r2,8(r2)
 100bf1c:	e13ffb04 	addi	r4,fp,-20
 100bf20:	00c00044 	movi	r3,1
 100bf24:	d8c00215 	stw	r3,8(sp)
 100bf28:	d8000115 	stw	zero,4(sp)
 100bf2c:	00ffffc4 	movi	r3,-1
 100bf30:	d8c00015 	stw	r3,0(sp)
 100bf34:	200f883a 	mov	r7,r4
 100bf38:	e1800217 	ldw	r6,8(fp)
 100bf3c:	e17fff17 	ldw	r5,-4(fp)
 100bf40:	e13ffd17 	ldw	r4,-12(fp)
 100bf44:	103ee83a 	callr	r2
 100bf48:	e0bffa15 	stw	r2,-24(fp)
			      NULL, 1);
	if (ret < 0 || ret < (int)len || img_data == NULL) {
 100bf4c:	e0bffa17 	ldw	r2,-24(fp)
 100bf50:	10000516 	blt	r2,zero,100bf68 <remoteproc_get_rsc_table+0x98>
 100bf54:	e0800217 	ldw	r2,8(fp)
 100bf58:	e0fffa17 	ldw	r3,-24(fp)
 100bf5c:	18800216 	blt	r3,r2,100bf68 <remoteproc_get_rsc_table+0x98>
 100bf60:	e0bffb17 	ldw	r2,-20(fp)
 100bf64:	1000161e 	bne	r2,zero,100bfc0 <remoteproc_get_rsc_table+0xf0>
		metal_log(METAL_LOG_ERROR,
 100bf68:	008060f4 	movhi	r2,387
 100bf6c:	10a97a04 	addi	r2,r2,-23064
 100bf70:	10800017 	ldw	r2,0(r2)
 100bf74:	108000f0 	cmpltui	r2,r2,3
 100bf78:	10000d1e 	bne	r2,zero,100bfb0 <remoteproc_get_rsc_table+0xe0>
 100bf7c:	008060f4 	movhi	r2,387
 100bf80:	10a97a04 	addi	r2,r2,-23064
 100bf84:	10800117 	ldw	r2,4(r2)
 100bf88:	10000926 	beq	r2,zero,100bfb0 <remoteproc_get_rsc_table+0xe0>
 100bf8c:	008060f4 	movhi	r2,387
 100bf90:	10a97a04 	addi	r2,r2,-23064
 100bf94:	10800117 	ldw	r2,4(r2)
 100bf98:	e1c00217 	ldw	r7,8(fp)
 100bf9c:	e1bfff17 	ldw	r6,-4(fp)
 100bfa0:	014040b4 	movhi	r5,258
 100bfa4:	2955b904 	addi	r5,r5,22244
 100bfa8:	010000c4 	movi	r4,3
 100bfac:	103ee83a 	callr	r2
			  "get rsc failed: 0x%llx, 0x%llx\r\n", offset, len);
		rsc_table = RPROC_ERR_PTR(-RPROC_EINVAL);
 100bfb0:	013fff84 	movi	r4,-2
 100bfb4:	100bbc00 	call	100bbc0 <RPROC_ERR_PTR>
 100bfb8:	e0bff915 	stw	r2,-28(fp)
		goto error;
 100bfbc:	00001306 	br	100c00c <remoteproc_get_rsc_table+0x13c>
	}
	memcpy(rsc_table, img_data, len);
 100bfc0:	e0bffb17 	ldw	r2,-20(fp)
 100bfc4:	e1800217 	ldw	r6,8(fp)
 100bfc8:	100b883a 	mov	r5,r2
 100bfcc:	e13ff917 	ldw	r4,-28(fp)
 100bfd0:	10139e80 	call	10139e8 <memcpy>

	ret = handle_rsc_table(rproc, rsc_table, len, NULL);
 100bfd4:	000f883a 	mov	r7,zero
 100bfd8:	e1800217 	ldw	r6,8(fp)
 100bfdc:	e17ff917 	ldw	r5,-28(fp)
 100bfe0:	e13ffc17 	ldw	r4,-16(fp)
 100bfe4:	100f4a80 	call	100f4a8 <handle_rsc_table>
 100bfe8:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0) {
 100bfec:	e0bffa17 	ldw	r2,-24(fp)
 100bff0:	1000040e 	bge	r2,zero,100c004 <remoteproc_get_rsc_table+0x134>
		rsc_table = RPROC_ERR_PTR(ret);
 100bff4:	e13ffa17 	ldw	r4,-24(fp)
 100bff8:	100bbc00 	call	100bbc0 <RPROC_ERR_PTR>
 100bffc:	e0bff915 	stw	r2,-28(fp)
		goto error;
 100c000:	00000206 	br	100c00c <remoteproc_get_rsc_table+0x13c>
	}
	return rsc_table;
 100c004:	e0bff917 	ldw	r2,-28(fp)
 100c008:	00000306 	br	100c018 <remoteproc_get_rsc_table+0x148>

error:
	metal_free_memory(rsc_table);
 100c00c:	e13ff917 	ldw	r4,-28(fp)
 100c010:	100b4f00 	call	100b4f0 <metal_free_memory>
	return rsc_table;
 100c014:	e0bff917 	ldw	r2,-28(fp)
}
 100c018:	e037883a 	mov	sp,fp
 100c01c:	dfc00117 	ldw	ra,4(sp)
 100c020:	df000017 	ldw	fp,0(sp)
 100c024:	dec00204 	addi	sp,sp,8
 100c028:	f800283a 	ret

0100c02c <remoteproc_parse_rsc_table>:

static int remoteproc_parse_rsc_table(struct remoteproc *rproc,
				      struct resource_table *rsc_table,
				      size_t rsc_size)
{
 100c02c:	defffa04 	addi	sp,sp,-24
 100c030:	dfc00515 	stw	ra,20(sp)
 100c034:	df000415 	stw	fp,16(sp)
 100c038:	df000404 	addi	fp,sp,16
 100c03c:	e13ffd15 	stw	r4,-12(fp)
 100c040:	e17ffe15 	stw	r5,-8(fp)
 100c044:	e1bfff15 	stw	r6,-4(fp)
	struct metal_io_region *io;

	io = remoteproc_get_io_with_va(rproc, rsc_table);
 100c048:	e17ffe17 	ldw	r5,-8(fp)
 100c04c:	e13ffd17 	ldw	r4,-12(fp)
 100c050:	100c6600 	call	100c660 <remoteproc_get_io_with_va>
 100c054:	e0bffc15 	stw	r2,-16(fp)
	return handle_rsc_table(rproc, rsc_table, rsc_size, io);
 100c058:	e1fffc17 	ldw	r7,-16(fp)
 100c05c:	e1bfff17 	ldw	r6,-4(fp)
 100c060:	e17ffe17 	ldw	r5,-8(fp)
 100c064:	e13ffd17 	ldw	r4,-12(fp)
 100c068:	100f4a80 	call	100f4a8 <handle_rsc_table>
}
 100c06c:	e037883a 	mov	sp,fp
 100c070:	dfc00117 	ldw	ra,4(sp)
 100c074:	df000017 	ldw	fp,0(sp)
 100c078:	dec00204 	addi	sp,sp,8
 100c07c:	f800283a 	ret

0100c080 <remoteproc_set_rsc_table>:

int remoteproc_set_rsc_table(struct remoteproc *rproc,
			     struct resource_table *rsc_table,
			     size_t rsc_size)
{
 100c080:	defff904 	addi	sp,sp,-28
 100c084:	dfc00615 	stw	ra,24(sp)
 100c088:	df000515 	stw	fp,20(sp)
 100c08c:	df000504 	addi	fp,sp,20
 100c090:	e13ffd15 	stw	r4,-12(fp)
 100c094:	e17ffe15 	stw	r5,-8(fp)
 100c098:	e1bfff15 	stw	r6,-4(fp)
	int ret;
	struct metal_io_region *io;

	io = remoteproc_get_io_with_va(rproc, rsc_table);
 100c09c:	e17ffe17 	ldw	r5,-8(fp)
 100c0a0:	e13ffd17 	ldw	r4,-12(fp)
 100c0a4:	100c6600 	call	100c660 <remoteproc_get_io_with_va>
 100c0a8:	e0bffb15 	stw	r2,-20(fp)
	if (!io)
 100c0ac:	e0bffb17 	ldw	r2,-20(fp)
 100c0b0:	1000021e 	bne	r2,zero,100c0bc <remoteproc_set_rsc_table+0x3c>
		return -RPROC_EINVAL;
 100c0b4:	00bfff84 	movi	r2,-2
 100c0b8:	00001106 	br	100c100 <remoteproc_set_rsc_table+0x80>
	ret = remoteproc_parse_rsc_table(rproc, rsc_table, rsc_size);
 100c0bc:	e1bfff17 	ldw	r6,-4(fp)
 100c0c0:	e17ffe17 	ldw	r5,-8(fp)
 100c0c4:	e13ffd17 	ldw	r4,-12(fp)
 100c0c8:	100c02c0 	call	100c02c <remoteproc_parse_rsc_table>
 100c0cc:	e0bffc15 	stw	r2,-16(fp)
	if (!ret) {
 100c0d0:	e0bffc17 	ldw	r2,-16(fp)
 100c0d4:	1000091e 	bne	r2,zero,100c0fc <remoteproc_set_rsc_table+0x7c>
		rproc->rsc_table = rsc_table;
 100c0d8:	e0bffd17 	ldw	r2,-12(fp)
 100c0dc:	e0fffe17 	ldw	r3,-8(fp)
 100c0e0:	10c00115 	stw	r3,4(r2)
		rproc->rsc_len = rsc_size;
 100c0e4:	e0bffd17 	ldw	r2,-12(fp)
 100c0e8:	e0ffff17 	ldw	r3,-4(fp)
 100c0ec:	10c00215 	stw	r3,8(r2)
		rproc->rsc_io = io;
 100c0f0:	e0bffd17 	ldw	r2,-12(fp)
 100c0f4:	e0fffb17 	ldw	r3,-20(fp)
 100c0f8:	10c00315 	stw	r3,12(r2)
	}
	return ret;
 100c0fc:	e0bffc17 	ldw	r2,-16(fp)
}
 100c100:	e037883a 	mov	sp,fp
 100c104:	dfc00117 	ldw	ra,4(sp)
 100c108:	df000017 	ldw	fp,0(sp)
 100c10c:	dec00204 	addi	sp,sp,8
 100c110:	f800283a 	ret

0100c114 <remoteproc_init>:

struct remoteproc *remoteproc_init(struct remoteproc *rproc,
				   struct remoteproc_ops *ops, void *priv)
{
 100c114:	defffb04 	addi	sp,sp,-20
 100c118:	dfc00415 	stw	ra,16(sp)
 100c11c:	df000315 	stw	fp,12(sp)
 100c120:	df000304 	addi	fp,sp,12
 100c124:	e13ffd15 	stw	r4,-12(fp)
 100c128:	e17ffe15 	stw	r5,-8(fp)
 100c12c:	e1bfff15 	stw	r6,-4(fp)
	if (rproc) {
 100c130:	e0bffd17 	ldw	r2,-12(fp)
 100c134:	10001126 	beq	r2,zero,100c17c <remoteproc_init+0x68>
		memset(rproc, 0, sizeof(*rproc));
 100c138:	01800e04 	movi	r6,56
 100c13c:	000b883a 	mov	r5,zero
 100c140:	e13ffd17 	ldw	r4,-12(fp)
 100c144:	1013b300 	call	1013b30 <memset>
		rproc->state = RPROC_OFFLINE;
 100c148:	e0bffd17 	ldw	r2,-12(fp)
 100c14c:	10000c15 	stw	zero,48(r2)
		metal_mutex_init(&rproc->lock);
 100c150:	e0bffd17 	ldw	r2,-12(fp)
 100c154:	1009883a 	mov	r4,r2
 100c158:	100bb240 	call	100bb24 <metal_mutex_init>
		metal_list_init(&rproc->mems);
 100c15c:	e0bffd17 	ldw	r2,-12(fp)
 100c160:	10800404 	addi	r2,r2,16
 100c164:	1009883a 	mov	r4,r2
 100c168:	100b6a00 	call	100b6a0 <metal_list_init>
		metal_list_init(&rproc->vdevs);
 100c16c:	e0bffd17 	ldw	r2,-12(fp)
 100c170:	10800604 	addi	r2,r2,24
 100c174:	1009883a 	mov	r4,r2
 100c178:	100b6a00 	call	100b6a0 <metal_list_init>
	}
	rproc = ops->init(rproc, ops, priv);
 100c17c:	e0bffe17 	ldw	r2,-8(fp)
 100c180:	10800017 	ldw	r2,0(r2)
 100c184:	e1bfff17 	ldw	r6,-4(fp)
 100c188:	e17ffe17 	ldw	r5,-8(fp)
 100c18c:	e13ffd17 	ldw	r4,-12(fp)
 100c190:	103ee83a 	callr	r2
 100c194:	e0bffd15 	stw	r2,-12(fp)
	return rproc;
 100c198:	e0bffd17 	ldw	r2,-12(fp)
}
 100c19c:	e037883a 	mov	sp,fp
 100c1a0:	dfc00117 	ldw	ra,4(sp)
 100c1a4:	df000017 	ldw	fp,0(sp)
 100c1a8:	dec00204 	addi	sp,sp,8
 100c1ac:	f800283a 	ret

0100c1b0 <remoteproc_remove>:

int remoteproc_remove(struct remoteproc *rproc)
{
 100c1b0:	defffc04 	addi	sp,sp,-16
 100c1b4:	dfc00315 	stw	ra,12(sp)
 100c1b8:	df000215 	stw	fp,8(sp)
 100c1bc:	df000204 	addi	fp,sp,8
 100c1c0:	e13fff15 	stw	r4,-4(fp)
	int ret;

	if (rproc) {
 100c1c4:	e0bfff17 	ldw	r2,-4(fp)
 100c1c8:	10001226 	beq	r2,zero,100c214 <remoteproc_remove+0x64>
		metal_mutex_acquire(&rproc->lock);
 100c1cc:	e0bfff17 	ldw	r2,-4(fp)
 100c1d0:	1009883a 	mov	r4,r2
 100c1d4:	100bb580 	call	100bb58 <metal_mutex_acquire>
		if (rproc->state == RPROC_OFFLINE)
 100c1d8:	e0bfff17 	ldw	r2,-4(fp)
 100c1dc:	10800c17 	ldw	r2,48(r2)
 100c1e0:	1000061e 	bne	r2,zero,100c1fc <remoteproc_remove+0x4c>
			rproc->ops->remove(rproc);
 100c1e4:	e0bfff17 	ldw	r2,-4(fp)
 100c1e8:	10800917 	ldw	r2,36(r2)
 100c1ec:	10800117 	ldw	r2,4(r2)
 100c1f0:	e13fff17 	ldw	r4,-4(fp)
 100c1f4:	103ee83a 	callr	r2
 100c1f8:	00000206 	br	100c204 <remoteproc_remove+0x54>
		else
			ret = -RPROC_EAGAIN;
 100c1fc:	00bfff04 	movi	r2,-4
 100c200:	e0bffe15 	stw	r2,-8(fp)
		metal_mutex_release(&rproc->lock);
 100c204:	e0bfff17 	ldw	r2,-4(fp)
 100c208:	1009883a 	mov	r4,r2
 100c20c:	100bb8c0 	call	100bb8c <metal_mutex_release>
 100c210:	00000206 	br	100c21c <remoteproc_remove+0x6c>
	} else {
		ret = -RPROC_EINVAL;
 100c214:	00bfff84 	movi	r2,-2
 100c218:	e0bffe15 	stw	r2,-8(fp)
	}
	return ret;
 100c21c:	e0bffe17 	ldw	r2,-8(fp)
}
 100c220:	e037883a 	mov	sp,fp
 100c224:	dfc00117 	ldw	ra,4(sp)
 100c228:	df000017 	ldw	fp,0(sp)
 100c22c:	dec00204 	addi	sp,sp,8
 100c230:	f800283a 	ret

0100c234 <remoteproc_config>:

int remoteproc_config(struct remoteproc *rproc, void *data)
{
 100c234:	defffb04 	addi	sp,sp,-20
 100c238:	dfc00415 	stw	ra,16(sp)
 100c23c:	df000315 	stw	fp,12(sp)
 100c240:	df000304 	addi	fp,sp,12
 100c244:	e13ffe15 	stw	r4,-8(fp)
 100c248:	e17fff15 	stw	r5,-4(fp)
	int ret = -RPROC_ENODEV;
 100c24c:	00bfff44 	movi	r2,-3
 100c250:	e0bffd15 	stw	r2,-12(fp)

	if (rproc) {
 100c254:	e0bffe17 	ldw	r2,-8(fp)
 100c258:	10001c26 	beq	r2,zero,100c2cc <remoteproc_config+0x98>
		metal_mutex_acquire(&rproc->lock);
 100c25c:	e0bffe17 	ldw	r2,-8(fp)
 100c260:	1009883a 	mov	r4,r2
 100c264:	100bb580 	call	100bb58 <metal_mutex_acquire>
		if (rproc->state == RPROC_OFFLINE) {
 100c268:	e0bffe17 	ldw	r2,-8(fp)
 100c26c:	10800c17 	ldw	r2,48(r2)
 100c270:	1000111e 	bne	r2,zero,100c2b8 <remoteproc_config+0x84>
			/* configure operation is allowed if the state is
			 * offline or ready. This function can be called
			 * multiple times before start the remote.
			 */
			if (rproc->ops->config)
 100c274:	e0bffe17 	ldw	r2,-8(fp)
 100c278:	10800917 	ldw	r2,36(r2)
 100c27c:	10800417 	ldw	r2,16(r2)
 100c280:	10000826 	beq	r2,zero,100c2a4 <remoteproc_config+0x70>
				ret = rproc->ops->config(rproc, data);
 100c284:	e0bffe17 	ldw	r2,-8(fp)
 100c288:	10800917 	ldw	r2,36(r2)
 100c28c:	10800417 	ldw	r2,16(r2)
 100c290:	e17fff17 	ldw	r5,-4(fp)
 100c294:	e13ffe17 	ldw	r4,-8(fp)
 100c298:	103ee83a 	callr	r2
 100c29c:	e0bffd15 	stw	r2,-12(fp)
 100c2a0:	00000106 	br	100c2a8 <remoteproc_config+0x74>
			else
				ret = 0;
 100c2a4:	e03ffd15 	stw	zero,-12(fp)
			rproc->state = RPROC_READY;
 100c2a8:	e0bffe17 	ldw	r2,-8(fp)
 100c2ac:	00c00084 	movi	r3,2
 100c2b0:	10c00c15 	stw	r3,48(r2)
 100c2b4:	00000206 	br	100c2c0 <remoteproc_config+0x8c>
		} else {
			ret = -RPROC_EINVAL;
 100c2b8:	00bfff84 	movi	r2,-2
 100c2bc:	e0bffd15 	stw	r2,-12(fp)
		}
		metal_mutex_release(&rproc->lock);
 100c2c0:	e0bffe17 	ldw	r2,-8(fp)
 100c2c4:	1009883a 	mov	r4,r2
 100c2c8:	100bb8c0 	call	100bb8c <metal_mutex_release>
	}
	return ret;
 100c2cc:	e0bffd17 	ldw	r2,-12(fp)
}
 100c2d0:	e037883a 	mov	sp,fp
 100c2d4:	dfc00117 	ldw	ra,4(sp)
 100c2d8:	df000017 	ldw	fp,0(sp)
 100c2dc:	dec00204 	addi	sp,sp,8
 100c2e0:	f800283a 	ret

0100c2e4 <remoteproc_start>:

int remoteproc_start(struct remoteproc *rproc)
{
 100c2e4:	defffc04 	addi	sp,sp,-16
 100c2e8:	dfc00315 	stw	ra,12(sp)
 100c2ec:	df000215 	stw	fp,8(sp)
 100c2f0:	df000204 	addi	fp,sp,8
 100c2f4:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100c2f8:	00bfff44 	movi	r2,-3
 100c2fc:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100c300:	e0bfff17 	ldw	r2,-4(fp)
 100c304:	10001626 	beq	r2,zero,100c360 <remoteproc_start+0x7c>
		metal_mutex_acquire(&rproc->lock);
 100c308:	e0bfff17 	ldw	r2,-4(fp)
 100c30c:	1009883a 	mov	r4,r2
 100c310:	100bb580 	call	100bb58 <metal_mutex_acquire>
		if (rproc->state == RPROC_READY) {
 100c314:	e0bfff17 	ldw	r2,-4(fp)
 100c318:	10800c17 	ldw	r2,48(r2)
 100c31c:	10800098 	cmpnei	r2,r2,2
 100c320:	10000a1e 	bne	r2,zero,100c34c <remoteproc_start+0x68>
			ret = rproc->ops->start(rproc);
 100c324:	e0bfff17 	ldw	r2,-4(fp)
 100c328:	10800917 	ldw	r2,36(r2)
 100c32c:	10800517 	ldw	r2,20(r2)
 100c330:	e13fff17 	ldw	r4,-4(fp)
 100c334:	103ee83a 	callr	r2
 100c338:	e0bffe15 	stw	r2,-8(fp)
			rproc->state = RPROC_RUNNING;
 100c33c:	e0bfff17 	ldw	r2,-4(fp)
 100c340:	00c000c4 	movi	r3,3
 100c344:	10c00c15 	stw	r3,48(r2)
 100c348:	00000206 	br	100c354 <remoteproc_start+0x70>
		} else {
			ret = -RPROC_EINVAL;
 100c34c:	00bfff84 	movi	r2,-2
 100c350:	e0bffe15 	stw	r2,-8(fp)
		}
		metal_mutex_release(&rproc->lock);
 100c354:	e0bfff17 	ldw	r2,-4(fp)
 100c358:	1009883a 	mov	r4,r2
 100c35c:	100bb8c0 	call	100bb8c <metal_mutex_release>
	}
	return ret;
 100c360:	e0bffe17 	ldw	r2,-8(fp)
}
 100c364:	e037883a 	mov	sp,fp
 100c368:	dfc00117 	ldw	ra,4(sp)
 100c36c:	df000017 	ldw	fp,0(sp)
 100c370:	dec00204 	addi	sp,sp,8
 100c374:	f800283a 	ret

0100c378 <remoteproc_stop>:

int remoteproc_stop(struct remoteproc *rproc)
{
 100c378:	defffc04 	addi	sp,sp,-16
 100c37c:	dfc00315 	stw	ra,12(sp)
 100c380:	df000215 	stw	fp,8(sp)
 100c384:	df000204 	addi	fp,sp,8
 100c388:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100c38c:	00bfff44 	movi	r2,-3
 100c390:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100c394:	e0bfff17 	ldw	r2,-4(fp)
 100c398:	10001c26 	beq	r2,zero,100c40c <remoteproc_stop+0x94>
		metal_mutex_acquire(&rproc->lock);
 100c39c:	e0bfff17 	ldw	r2,-4(fp)
 100c3a0:	1009883a 	mov	r4,r2
 100c3a4:	100bb580 	call	100bb58 <metal_mutex_acquire>
		if (rproc->state != RPROC_STOPPED &&
 100c3a8:	e0bfff17 	ldw	r2,-4(fp)
 100c3ac:	10800c17 	ldw	r2,48(r2)
 100c3b0:	108001a0 	cmpeqi	r2,r2,6
 100c3b4:	1000111e 	bne	r2,zero,100c3fc <remoteproc_stop+0x84>
		    rproc->state != RPROC_OFFLINE) {
 100c3b8:	e0bfff17 	ldw	r2,-4(fp)
 100c3bc:	10800c17 	ldw	r2,48(r2)
{
	int ret = -RPROC_ENODEV;

	if (rproc) {
		metal_mutex_acquire(&rproc->lock);
		if (rproc->state != RPROC_STOPPED &&
 100c3c0:	10000e26 	beq	r2,zero,100c3fc <remoteproc_stop+0x84>
		    rproc->state != RPROC_OFFLINE) {
			if (rproc->ops->stop)
 100c3c4:	e0bfff17 	ldw	r2,-4(fp)
 100c3c8:	10800917 	ldw	r2,36(r2)
 100c3cc:	10800617 	ldw	r2,24(r2)
 100c3d0:	10000626 	beq	r2,zero,100c3ec <remoteproc_stop+0x74>
				ret = rproc->ops->stop(rproc);
 100c3d4:	e0bfff17 	ldw	r2,-4(fp)
 100c3d8:	10800917 	ldw	r2,36(r2)
 100c3dc:	10800617 	ldw	r2,24(r2)
 100c3e0:	e13fff17 	ldw	r4,-4(fp)
 100c3e4:	103ee83a 	callr	r2
 100c3e8:	e0bffe15 	stw	r2,-8(fp)
			rproc->state = RPROC_STOPPED;
 100c3ec:	e0bfff17 	ldw	r2,-4(fp)
 100c3f0:	00c00184 	movi	r3,6
 100c3f4:	10c00c15 	stw	r3,48(r2)
 100c3f8:	00000106 	br	100c400 <remoteproc_stop+0x88>
		} else {
			ret = 0;
 100c3fc:	e03ffe15 	stw	zero,-8(fp)
		}
		metal_mutex_release(&rproc->lock);
 100c400:	e0bfff17 	ldw	r2,-4(fp)
 100c404:	1009883a 	mov	r4,r2
 100c408:	100bb8c0 	call	100bb8c <metal_mutex_release>
	}
	return ret;
 100c40c:	e0bffe17 	ldw	r2,-8(fp)
}
 100c410:	e037883a 	mov	sp,fp
 100c414:	dfc00117 	ldw	ra,4(sp)
 100c418:	df000017 	ldw	fp,0(sp)
 100c41c:	dec00204 	addi	sp,sp,8
 100c420:	f800283a 	ret

0100c424 <remoteproc_shutdown>:

int remoteproc_shutdown(struct remoteproc *rproc)
{
 100c424:	defffc04 	addi	sp,sp,-16
 100c428:	dfc00315 	stw	ra,12(sp)
 100c42c:	df000215 	stw	fp,8(sp)
 100c430:	df000204 	addi	fp,sp,8
 100c434:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100c438:	00bfff44 	movi	r2,-3
 100c43c:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100c440:	e0bfff17 	ldw	r2,-4(fp)
 100c444:	10002826 	beq	r2,zero,100c4e8 <remoteproc_shutdown+0xc4>
		ret = 0;
 100c448:	e03ffe15 	stw	zero,-8(fp)
		metal_mutex_acquire(&rproc->lock);
 100c44c:	e0bfff17 	ldw	r2,-4(fp)
 100c450:	1009883a 	mov	r4,r2
 100c454:	100bb580 	call	100bb58 <metal_mutex_acquire>
		if (rproc->state != RPROC_OFFLINE) {
 100c458:	e0bfff17 	ldw	r2,-4(fp)
 100c45c:	10800c17 	ldw	r2,48(r2)
 100c460:	10001e26 	beq	r2,zero,100c4dc <remoteproc_shutdown+0xb8>
			if (rproc->state != RPROC_STOPPED) {
 100c464:	e0bfff17 	ldw	r2,-4(fp)
 100c468:	10800c17 	ldw	r2,48(r2)
 100c46c:	108001a0 	cmpeqi	r2,r2,6
 100c470:	10000a1e 	bne	r2,zero,100c49c <remoteproc_shutdown+0x78>
				if (rproc->ops->stop)
 100c474:	e0bfff17 	ldw	r2,-4(fp)
 100c478:	10800917 	ldw	r2,36(r2)
 100c47c:	10800617 	ldw	r2,24(r2)
 100c480:	10000626 	beq	r2,zero,100c49c <remoteproc_shutdown+0x78>
					ret = rproc->ops->stop(rproc);
 100c484:	e0bfff17 	ldw	r2,-4(fp)
 100c488:	10800917 	ldw	r2,36(r2)
 100c48c:	10800617 	ldw	r2,24(r2)
 100c490:	e13fff17 	ldw	r4,-4(fp)
 100c494:	103ee83a 	callr	r2
 100c498:	e0bffe15 	stw	r2,-8(fp)
			}
			if (!ret) {
 100c49c:	e0bffe17 	ldw	r2,-8(fp)
 100c4a0:	10000e1e 	bne	r2,zero,100c4dc <remoteproc_shutdown+0xb8>
				if (rproc->ops->shutdown)
 100c4a4:	e0bfff17 	ldw	r2,-4(fp)
 100c4a8:	10800917 	ldw	r2,36(r2)
 100c4ac:	10800717 	ldw	r2,28(r2)
 100c4b0:	10000626 	beq	r2,zero,100c4cc <remoteproc_shutdown+0xa8>
					ret = rproc->ops->shutdown(rproc);
 100c4b4:	e0bfff17 	ldw	r2,-4(fp)
 100c4b8:	10800917 	ldw	r2,36(r2)
 100c4bc:	10800717 	ldw	r2,28(r2)
 100c4c0:	e13fff17 	ldw	r4,-4(fp)
 100c4c4:	103ee83a 	callr	r2
 100c4c8:	e0bffe15 	stw	r2,-8(fp)
				if (!ret) {
 100c4cc:	e0bffe17 	ldw	r2,-8(fp)
 100c4d0:	1000021e 	bne	r2,zero,100c4dc <remoteproc_shutdown+0xb8>
					rproc->state = RPROC_OFFLINE;
 100c4d4:	e0bfff17 	ldw	r2,-4(fp)
 100c4d8:	10000c15 	stw	zero,48(r2)
				}
			}
		}
		metal_mutex_release(&rproc->lock);
 100c4dc:	e0bfff17 	ldw	r2,-4(fp)
 100c4e0:	1009883a 	mov	r4,r2
 100c4e4:	100bb8c0 	call	100bb8c <metal_mutex_release>
	}
	return ret;
 100c4e8:	e0bffe17 	ldw	r2,-8(fp)
}
 100c4ec:	e037883a 	mov	sp,fp
 100c4f0:	dfc00117 	ldw	ra,4(sp)
 100c4f4:	df000017 	ldw	fp,0(sp)
 100c4f8:	dec00204 	addi	sp,sp,8
 100c4fc:	f800283a 	ret

0100c500 <remoteproc_get_io_with_name>:

struct metal_io_region *
remoteproc_get_io_with_name(struct remoteproc *rproc,
			    const char *name)
{
 100c500:	defff904 	addi	sp,sp,-28
 100c504:	dfc00615 	stw	ra,24(sp)
 100c508:	df000515 	stw	fp,20(sp)
 100c50c:	df000504 	addi	fp,sp,20
 100c510:	e13ffe15 	stw	r4,-8(fp)
 100c514:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, name,
 100c518:	d8000115 	stw	zero,4(sp)
 100c51c:	d8000015 	stw	zero,0(sp)
 100c520:	01ffffc4 	movi	r7,-1
 100c524:	01bfffc4 	movi	r6,-1
 100c528:	e17fff17 	ldw	r5,-4(fp)
 100c52c:	e13ffe17 	ldw	r4,-8(fp)
 100c530:	100bcc80 	call	100bcc8 <remoteproc_get_mem>
 100c534:	e0bffd15 	stw	r2,-12(fp)
				 METAL_BAD_PHYS, METAL_BAD_PHYS, NULL, 0);
	if (mem)
 100c538:	e0bffd17 	ldw	r2,-12(fp)
 100c53c:	10000326 	beq	r2,zero,100c54c <remoteproc_get_io_with_name+0x4c>
		return mem->io;
 100c540:	e0bffd17 	ldw	r2,-12(fp)
 100c544:	10800b17 	ldw	r2,44(r2)
 100c548:	00000106 	br	100c550 <remoteproc_get_io_with_name+0x50>
	else
		return NULL;
 100c54c:	0005883a 	mov	r2,zero
}
 100c550:	e037883a 	mov	sp,fp
 100c554:	dfc00117 	ldw	ra,4(sp)
 100c558:	df000017 	ldw	fp,0(sp)
 100c55c:	dec00204 	addi	sp,sp,8
 100c560:	f800283a 	ret

0100c564 <remoteproc_get_io_with_pa>:

struct metal_io_region *
remoteproc_get_io_with_pa(struct remoteproc *rproc,
			  metal_phys_addr_t pa)
{
 100c564:	defff904 	addi	sp,sp,-28
 100c568:	dfc00615 	stw	ra,24(sp)
 100c56c:	df000515 	stw	fp,20(sp)
 100c570:	df000504 	addi	fp,sp,20
 100c574:	e13ffe15 	stw	r4,-8(fp)
 100c578:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, pa, METAL_BAD_PHYS, NULL, 0);
 100c57c:	d8000115 	stw	zero,4(sp)
 100c580:	d8000015 	stw	zero,0(sp)
 100c584:	01ffffc4 	movi	r7,-1
 100c588:	e1bfff17 	ldw	r6,-4(fp)
 100c58c:	000b883a 	mov	r5,zero
 100c590:	e13ffe17 	ldw	r4,-8(fp)
 100c594:	100bcc80 	call	100bcc8 <remoteproc_get_mem>
 100c598:	e0bffd15 	stw	r2,-12(fp)
	if (mem)
 100c59c:	e0bffd17 	ldw	r2,-12(fp)
 100c5a0:	10000326 	beq	r2,zero,100c5b0 <remoteproc_get_io_with_pa+0x4c>
		return mem->io;
 100c5a4:	e0bffd17 	ldw	r2,-12(fp)
 100c5a8:	10800b17 	ldw	r2,44(r2)
 100c5ac:	00000106 	br	100c5b4 <remoteproc_get_io_with_pa+0x50>
	else
		return NULL;
 100c5b0:	0005883a 	mov	r2,zero
}
 100c5b4:	e037883a 	mov	sp,fp
 100c5b8:	dfc00117 	ldw	ra,4(sp)
 100c5bc:	df000017 	ldw	fp,0(sp)
 100c5c0:	dec00204 	addi	sp,sp,8
 100c5c4:	f800283a 	ret

0100c5c8 <remoteproc_get_io_with_da>:

struct metal_io_region *
remoteproc_get_io_with_da(struct remoteproc *rproc,
			  metal_phys_addr_t da,
			  unsigned long *offset)
{
 100c5c8:	defff604 	addi	sp,sp,-40
 100c5cc:	dfc00915 	stw	ra,36(sp)
 100c5d0:	df000815 	stw	fp,32(sp)
 100c5d4:	df000804 	addi	fp,sp,32
 100c5d8:	e13ffd15 	stw	r4,-12(fp)
 100c5dc:	e17ffe15 	stw	r5,-8(fp)
 100c5e0:	e1bfff15 	stw	r6,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, METAL_BAD_PHYS, da, NULL, 0);
 100c5e4:	d8000115 	stw	zero,4(sp)
 100c5e8:	d8000015 	stw	zero,0(sp)
 100c5ec:	e1fffe17 	ldw	r7,-8(fp)
 100c5f0:	01bfffc4 	movi	r6,-1
 100c5f4:	000b883a 	mov	r5,zero
 100c5f8:	e13ffd17 	ldw	r4,-12(fp)
 100c5fc:	100bcc80 	call	100bcc8 <remoteproc_get_mem>
 100c600:	e0bffa15 	stw	r2,-24(fp)
	if (mem) {
 100c604:	e0bffa17 	ldw	r2,-24(fp)
 100c608:	10000f26 	beq	r2,zero,100c648 <remoteproc_get_io_with_da+0x80>
		struct metal_io_region *io;
		metal_phys_addr_t pa;

		io = mem->io;
 100c60c:	e0bffa17 	ldw	r2,-24(fp)
 100c610:	10800b17 	ldw	r2,44(r2)
 100c614:	e0bffb15 	stw	r2,-20(fp)
		pa = remoteproc_datopa(mem, da);
 100c618:	e17ffe17 	ldw	r5,-8(fp)
 100c61c:	e13ffa17 	ldw	r4,-24(fp)
 100c620:	100be400 	call	100be40 <remoteproc_datopa>
 100c624:	e0bffc15 	stw	r2,-16(fp)
		*offset = metal_io_phys_to_offset(io, pa);
 100c628:	e17ffc17 	ldw	r5,-16(fp)
 100c62c:	e13ffb17 	ldw	r4,-20(fp)
 100c630:	100b9680 	call	100b968 <metal_io_phys_to_offset>
 100c634:	1007883a 	mov	r3,r2
 100c638:	e0bfff17 	ldw	r2,-4(fp)
 100c63c:	10c00015 	stw	r3,0(r2)
		return io;
 100c640:	e0bffb17 	ldw	r2,-20(fp)
 100c644:	00000106 	br	100c64c <remoteproc_get_io_with_da+0x84>
	} else {
		return NULL;
 100c648:	0005883a 	mov	r2,zero
	}
}
 100c64c:	e037883a 	mov	sp,fp
 100c650:	dfc00117 	ldw	ra,4(sp)
 100c654:	df000017 	ldw	fp,0(sp)
 100c658:	dec00204 	addi	sp,sp,8
 100c65c:	f800283a 	ret

0100c660 <remoteproc_get_io_with_va>:

struct metal_io_region *
remoteproc_get_io_with_va(struct remoteproc *rproc, void *va)
{
 100c660:	defff904 	addi	sp,sp,-28
 100c664:	dfc00615 	stw	ra,24(sp)
 100c668:	df000515 	stw	fp,20(sp)
 100c66c:	df000504 	addi	fp,sp,20
 100c670:	e13ffe15 	stw	r4,-8(fp)
 100c674:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, METAL_BAD_PHYS, METAL_BAD_PHYS,
 100c678:	d8000115 	stw	zero,4(sp)
 100c67c:	e0bfff17 	ldw	r2,-4(fp)
 100c680:	d8800015 	stw	r2,0(sp)
 100c684:	01ffffc4 	movi	r7,-1
 100c688:	01bfffc4 	movi	r6,-1
 100c68c:	000b883a 	mov	r5,zero
 100c690:	e13ffe17 	ldw	r4,-8(fp)
 100c694:	100bcc80 	call	100bcc8 <remoteproc_get_mem>
 100c698:	e0bffd15 	stw	r2,-12(fp)
				 va, 0);
	if (mem)
 100c69c:	e0bffd17 	ldw	r2,-12(fp)
 100c6a0:	10000326 	beq	r2,zero,100c6b0 <remoteproc_get_io_with_va+0x50>
		return mem->io;
 100c6a4:	e0bffd17 	ldw	r2,-12(fp)
 100c6a8:	10800b17 	ldw	r2,44(r2)
 100c6ac:	00000106 	br	100c6b4 <remoteproc_get_io_with_va+0x54>
	else
		return NULL;
 100c6b0:	0005883a 	mov	r2,zero
}
 100c6b4:	e037883a 	mov	sp,fp
 100c6b8:	dfc00117 	ldw	ra,4(sp)
 100c6bc:	df000017 	ldw	fp,0(sp)
 100c6c0:	dec00204 	addi	sp,sp,8
 100c6c4:	f800283a 	ret

0100c6c8 <remoteproc_mmap>:

void *remoteproc_mmap(struct remoteproc *rproc,
		      metal_phys_addr_t *pa, metal_phys_addr_t *da,
		      size_t size, unsigned int attribute,
		      struct metal_io_region **io)
{
 100c6c8:	defff404 	addi	sp,sp,-48
 100c6cc:	dfc00b15 	stw	ra,44(sp)
 100c6d0:	df000a15 	stw	fp,40(sp)
 100c6d4:	df000a04 	addi	fp,sp,40
 100c6d8:	e13ffc15 	stw	r4,-16(fp)
 100c6dc:	e17ffd15 	stw	r5,-12(fp)
 100c6e0:	e1bffe15 	stw	r6,-8(fp)
 100c6e4:	e1ffff15 	stw	r7,-4(fp)
	void *va = NULL;
 100c6e8:	e03ff815 	stw	zero,-32(fp)
	metal_phys_addr_t lpa, lda;
	struct remoteproc_mem *mem;

	if (!rproc)
 100c6ec:	e0bffc17 	ldw	r2,-16(fp)
 100c6f0:	1000021e 	bne	r2,zero,100c6fc <remoteproc_mmap+0x34>
		return NULL;
 100c6f4:	0005883a 	mov	r2,zero
 100c6f8:	00006006 	br	100c87c <remoteproc_mmap+0x1b4>
	else if (!pa && !da)
 100c6fc:	e0bffd17 	ldw	r2,-12(fp)
 100c700:	1000041e 	bne	r2,zero,100c714 <remoteproc_mmap+0x4c>
 100c704:	e0bffe17 	ldw	r2,-8(fp)
 100c708:	1000021e 	bne	r2,zero,100c714 <remoteproc_mmap+0x4c>
		return NULL;
 100c70c:	0005883a 	mov	r2,zero
 100c710:	00005a06 	br	100c87c <remoteproc_mmap+0x1b4>
	if (pa)
 100c714:	e0bffd17 	ldw	r2,-12(fp)
 100c718:	10000426 	beq	r2,zero,100c72c <remoteproc_mmap+0x64>
		lpa = *pa;
 100c71c:	e0bffd17 	ldw	r2,-12(fp)
 100c720:	10800017 	ldw	r2,0(r2)
 100c724:	e0bffa15 	stw	r2,-24(fp)
 100c728:	00000206 	br	100c734 <remoteproc_mmap+0x6c>
	else
		lpa = METAL_BAD_PHYS;
 100c72c:	00bfffc4 	movi	r2,-1
 100c730:	e0bffa15 	stw	r2,-24(fp)
	if (da)
 100c734:	e0bffe17 	ldw	r2,-8(fp)
 100c738:	10000426 	beq	r2,zero,100c74c <remoteproc_mmap+0x84>
		lda =  *da;
 100c73c:	e0bffe17 	ldw	r2,-8(fp)
 100c740:	10800017 	ldw	r2,0(r2)
 100c744:	e0bffb15 	stw	r2,-20(fp)
 100c748:	00000206 	br	100c754 <remoteproc_mmap+0x8c>
	else
		lda = METAL_BAD_PHYS;
 100c74c:	00bfffc4 	movi	r2,-1
 100c750:	e0bffb15 	stw	r2,-20(fp)
	mem = remoteproc_get_mem(rproc, NULL, lpa, lda, NULL, size);
 100c754:	e0fffa17 	ldw	r3,-24(fp)
 100c758:	e13ffb17 	ldw	r4,-20(fp)
 100c75c:	e0bfff17 	ldw	r2,-4(fp)
 100c760:	d8800115 	stw	r2,4(sp)
 100c764:	d8000015 	stw	zero,0(sp)
 100c768:	200f883a 	mov	r7,r4
 100c76c:	180d883a 	mov	r6,r3
 100c770:	000b883a 	mov	r5,zero
 100c774:	e13ffc17 	ldw	r4,-16(fp)
 100c778:	100bcc80 	call	100bcc8 <remoteproc_get_mem>
 100c77c:	e0bff915 	stw	r2,-28(fp)
	if (mem) {
 100c780:	e0bff917 	ldw	r2,-28(fp)
 100c784:	10001f26 	beq	r2,zero,100c804 <remoteproc_mmap+0x13c>
		if (lpa != METAL_BAD_PHYS)
 100c788:	e0bffa17 	ldw	r2,-24(fp)
 100c78c:	10bfffe0 	cmpeqi	r2,r2,-1
 100c790:	1000061e 	bne	r2,zero,100c7ac <remoteproc_mmap+0xe4>
			lda = remoteproc_patoda(mem, lpa);
 100c794:	e0bffa17 	ldw	r2,-24(fp)
 100c798:	100b883a 	mov	r5,r2
 100c79c:	e13ff917 	ldw	r4,-28(fp)
 100c7a0:	100be880 	call	100be88 <remoteproc_patoda>
 100c7a4:	e0bffb15 	stw	r2,-20(fp)
 100c7a8:	00000806 	br	100c7cc <remoteproc_mmap+0x104>
		else if (lda != METAL_BAD_PHYS)
 100c7ac:	e0bffb17 	ldw	r2,-20(fp)
 100c7b0:	10bfffe0 	cmpeqi	r2,r2,-1
 100c7b4:	1000051e 	bne	r2,zero,100c7cc <remoteproc_mmap+0x104>
			lpa = remoteproc_datopa(mem, lda);
 100c7b8:	e0bffb17 	ldw	r2,-20(fp)
 100c7bc:	100b883a 	mov	r5,r2
 100c7c0:	e13ff917 	ldw	r4,-28(fp)
 100c7c4:	100be400 	call	100be40 <remoteproc_datopa>
 100c7c8:	e0bffa15 	stw	r2,-24(fp)
		if (io)
 100c7cc:	e0800317 	ldw	r2,12(fp)
 100c7d0:	10000426 	beq	r2,zero,100c7e4 <remoteproc_mmap+0x11c>
			*io = mem->io;
 100c7d4:	e0bff917 	ldw	r2,-28(fp)
 100c7d8:	10c00b17 	ldw	r3,44(r2)
 100c7dc:	e0800317 	ldw	r2,12(fp)
 100c7e0:	10c00015 	stw	r3,0(r2)
		va = metal_io_phys_to_virt(mem->io, lpa);
 100c7e4:	e0bff917 	ldw	r2,-28(fp)
 100c7e8:	10800b17 	ldw	r2,44(r2)
 100c7ec:	e0fffa17 	ldw	r3,-24(fp)
 100c7f0:	180b883a 	mov	r5,r3
 100c7f4:	1009883a 	mov	r4,r2
 100c7f8:	100ba400 	call	100ba40 <metal_io_phys_to_virt>
 100c7fc:	e0bff815 	stw	r2,-32(fp)
 100c800:	00001306 	br	100c850 <remoteproc_mmap+0x188>
	} else if (rproc->ops->mmap) {
 100c804:	e0bffc17 	ldw	r2,-16(fp)
 100c808:	10800917 	ldw	r2,36(r2)
 100c80c:	10800217 	ldw	r2,8(r2)
 100c810:	10000f26 	beq	r2,zero,100c850 <remoteproc_mmap+0x188>
		va = rproc->ops->mmap(rproc, &lpa, &lda, size, attribute, io);
 100c814:	e0bffc17 	ldw	r2,-16(fp)
 100c818:	10800917 	ldw	r2,36(r2)
 100c81c:	10800217 	ldw	r2,8(r2)
 100c820:	e17ffb04 	addi	r5,fp,-20
 100c824:	e13ffa04 	addi	r4,fp,-24
 100c828:	e0c00317 	ldw	r3,12(fp)
 100c82c:	d8c00115 	stw	r3,4(sp)
 100c830:	e0c00217 	ldw	r3,8(fp)
 100c834:	d8c00015 	stw	r3,0(sp)
 100c838:	e1ffff17 	ldw	r7,-4(fp)
 100c83c:	280d883a 	mov	r6,r5
 100c840:	200b883a 	mov	r5,r4
 100c844:	e13ffc17 	ldw	r4,-16(fp)
 100c848:	103ee83a 	callr	r2
 100c84c:	e0bff815 	stw	r2,-32(fp)
	}

	if (pa)
 100c850:	e0bffd17 	ldw	r2,-12(fp)
 100c854:	10000326 	beq	r2,zero,100c864 <remoteproc_mmap+0x19c>
		*pa  = lpa;
 100c858:	e0fffa17 	ldw	r3,-24(fp)
 100c85c:	e0bffd17 	ldw	r2,-12(fp)
 100c860:	10c00015 	stw	r3,0(r2)
	if (da)
 100c864:	e0bffe17 	ldw	r2,-8(fp)
 100c868:	10000326 	beq	r2,zero,100c878 <remoteproc_mmap+0x1b0>
		*da = lda;
 100c86c:	e0fffb17 	ldw	r3,-20(fp)
 100c870:	e0bffe17 	ldw	r2,-8(fp)
 100c874:	10c00015 	stw	r3,0(r2)
	return va;
 100c878:	e0bff817 	ldw	r2,-32(fp)
}
 100c87c:	e037883a 	mov	sp,fp
 100c880:	dfc00117 	ldw	ra,4(sp)
 100c884:	df000017 	ldw	fp,0(sp)
 100c888:	dec00204 	addi	sp,sp,8
 100c88c:	f800283a 	ret

0100c890 <remoteproc_load>:

int remoteproc_load(struct remoteproc *rproc, const char *path,
		    void *store, struct image_store_ops *store_ops,
		    void **img_info)
{
 100c890:	deffdf04 	addi	sp,sp,-132
 100c894:	dfc02015 	stw	ra,128(sp)
 100c898:	df001f15 	stw	fp,124(sp)
 100c89c:	df001f04 	addi	fp,sp,124
 100c8a0:	e13ffc15 	stw	r4,-16(fp)
 100c8a4:	e17ffd15 	stw	r5,-12(fp)
 100c8a8:	e1bffe15 	stw	r6,-8(fp)
 100c8ac:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	struct loader_ops *loader;
	const void *img_data;
	void *limg_info = NULL;
 100c8b0:	e03ff115 	stw	zero,-60(fp)
	size_t offset, noffset;
	size_t len, nlen;
	int last_load_state;
	metal_phys_addr_t da, rsc_da;
	size_t rsc_size = 0;
 100c8b4:	e03ff715 	stw	zero,-36(fp)
	void *rsc_table = NULL;
 100c8b8:	e03fec15 	stw	zero,-80(fp)
	struct metal_io_region *io = NULL;
 100c8bc:	e03ff815 	stw	zero,-32(fp)

	if (!rproc)
 100c8c0:	e0bffc17 	ldw	r2,-16(fp)
 100c8c4:	1000021e 	bne	r2,zero,100c8d0 <remoteproc_load+0x40>
		return -RPROC_ENODEV;
 100c8c8:	00bfff44 	movi	r2,-3
 100c8cc:	00034b06 	br	100d5fc <remoteproc_load+0xd6c>

	metal_mutex_acquire(&rproc->lock);
 100c8d0:	e0bffc17 	ldw	r2,-16(fp)
 100c8d4:	1009883a 	mov	r4,r2
 100c8d8:	100bb580 	call	100bb58 <metal_mutex_acquire>
	metal_log(METAL_LOG_DEBUG, "%s: check remoteproc status\r\n", __func__);
 100c8dc:	008060f4 	movhi	r2,387
 100c8e0:	10a97a04 	addi	r2,r2,-23064
 100c8e4:	10800017 	ldw	r2,0(r2)
 100c8e8:	108001f0 	cmpltui	r2,r2,7
 100c8ec:	10000d1e 	bne	r2,zero,100c924 <remoteproc_load+0x94>
 100c8f0:	008060f4 	movhi	r2,387
 100c8f4:	10a97a04 	addi	r2,r2,-23064
 100c8f8:	10800117 	ldw	r2,4(r2)
 100c8fc:	10000926 	beq	r2,zero,100c924 <remoteproc_load+0x94>
 100c900:	008060f4 	movhi	r2,387
 100c904:	10a97a04 	addi	r2,r2,-23064
 100c908:	10800117 	ldw	r2,4(r2)
 100c90c:	018040b4 	movhi	r6,258
 100c910:	31971804 	addi	r6,r6,23648
 100c914:	014040b4 	movhi	r5,258
 100c918:	2955c204 	addi	r5,r5,22280
 100c91c:	010001c4 	movi	r4,7
 100c920:	103ee83a 	callr	r2
	/* If remoteproc is not in ready state, cannot load executable */
	if (rproc->state != RPROC_READY && rproc->state != RPROC_CONFIGURED) {
 100c924:	e0bffc17 	ldw	r2,-16(fp)
 100c928:	10800c17 	ldw	r2,48(r2)
 100c92c:	108000a0 	cmpeqi	r2,r2,2
 100c930:	10001c1e 	bne	r2,zero,100c9a4 <remoteproc_load+0x114>
 100c934:	e0bffc17 	ldw	r2,-16(fp)
 100c938:	10800c17 	ldw	r2,48(r2)
 100c93c:	10800060 	cmpeqi	r2,r2,1
 100c940:	1000181e 	bne	r2,zero,100c9a4 <remoteproc_load+0x114>
		metal_log(METAL_LOG_ERROR,
 100c944:	008060f4 	movhi	r2,387
 100c948:	10a97a04 	addi	r2,r2,-23064
 100c94c:	10800017 	ldw	r2,0(r2)
 100c950:	108000f0 	cmpltui	r2,r2,3
 100c954:	10000e1e 	bne	r2,zero,100c990 <remoteproc_load+0x100>
 100c958:	008060f4 	movhi	r2,387
 100c95c:	10a97a04 	addi	r2,r2,-23064
 100c960:	10800117 	ldw	r2,4(r2)
 100c964:	10000a26 	beq	r2,zero,100c990 <remoteproc_load+0x100>
 100c968:	008060f4 	movhi	r2,387
 100c96c:	10a97a04 	addi	r2,r2,-23064
 100c970:	10800117 	ldw	r2,4(r2)
 100c974:	e0fffc17 	ldw	r3,-16(fp)
 100c978:	18c00c17 	ldw	r3,48(r3)
 100c97c:	180d883a 	mov	r6,r3
 100c980:	014040b4 	movhi	r5,258
 100c984:	2955ca04 	addi	r5,r5,22312
 100c988:	010000c4 	movi	r4,3
 100c98c:	103ee83a 	callr	r2
			  "load failure: invalid rproc state %d.\r\n",
			  rproc->state);
		metal_mutex_release(&rproc->lock);
 100c990:	e0bffc17 	ldw	r2,-16(fp)
 100c994:	1009883a 	mov	r4,r2
 100c998:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return -RPROC_EINVAL;
 100c99c:	00bfff84 	movi	r2,-2
 100c9a0:	00031606 	br	100d5fc <remoteproc_load+0xd6c>
	}

	if (!store_ops) {
 100c9a4:	e0bfff17 	ldw	r2,-4(fp)
 100c9a8:	1000151e 	bne	r2,zero,100ca00 <remoteproc_load+0x170>
		metal_log(METAL_LOG_ERROR,
 100c9ac:	008060f4 	movhi	r2,387
 100c9b0:	10a97a04 	addi	r2,r2,-23064
 100c9b4:	10800017 	ldw	r2,0(r2)
 100c9b8:	108000f0 	cmpltui	r2,r2,3
 100c9bc:	10000b1e 	bne	r2,zero,100c9ec <remoteproc_load+0x15c>
 100c9c0:	008060f4 	movhi	r2,387
 100c9c4:	10a97a04 	addi	r2,r2,-23064
 100c9c8:	10800117 	ldw	r2,4(r2)
 100c9cc:	10000726 	beq	r2,zero,100c9ec <remoteproc_load+0x15c>
 100c9d0:	008060f4 	movhi	r2,387
 100c9d4:	10a97a04 	addi	r2,r2,-23064
 100c9d8:	10800117 	ldw	r2,4(r2)
 100c9dc:	014040b4 	movhi	r5,258
 100c9e0:	2955d404 	addi	r5,r5,22352
 100c9e4:	010000c4 	movi	r4,3
 100c9e8:	103ee83a 	callr	r2
			  "load failure: loader ops is not set.\r\n");
		metal_mutex_release(&rproc->lock);
 100c9ec:	e0bffc17 	ldw	r2,-16(fp)
 100c9f0:	1009883a 	mov	r4,r2
 100c9f4:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return -RPROC_EINVAL;
 100c9f8:	00bfff84 	movi	r2,-2
 100c9fc:	0002ff06 	br	100d5fc <remoteproc_load+0xd6c>
	}

	/* Open executable to get ready to parse */
	metal_log(METAL_LOG_DEBUG, "%s: open executable image\r\n", __func__);
 100ca00:	008060f4 	movhi	r2,387
 100ca04:	10a97a04 	addi	r2,r2,-23064
 100ca08:	10800017 	ldw	r2,0(r2)
 100ca0c:	108001f0 	cmpltui	r2,r2,7
 100ca10:	10000d1e 	bne	r2,zero,100ca48 <remoteproc_load+0x1b8>
 100ca14:	008060f4 	movhi	r2,387
 100ca18:	10a97a04 	addi	r2,r2,-23064
 100ca1c:	10800117 	ldw	r2,4(r2)
 100ca20:	10000926 	beq	r2,zero,100ca48 <remoteproc_load+0x1b8>
 100ca24:	008060f4 	movhi	r2,387
 100ca28:	10a97a04 	addi	r2,r2,-23064
 100ca2c:	10800117 	ldw	r2,4(r2)
 100ca30:	018040b4 	movhi	r6,258
 100ca34:	31971804 	addi	r6,r6,23648
 100ca38:	014040b4 	movhi	r5,258
 100ca3c:	2955de04 	addi	r5,r5,22392
 100ca40:	010001c4 	movi	r4,7
 100ca44:	103ee83a 	callr	r2
	ret = store_ops->open(store, path, &img_data);
 100ca48:	e0bfff17 	ldw	r2,-4(fp)
 100ca4c:	10800017 	ldw	r2,0(r2)
 100ca50:	e0fff004 	addi	r3,fp,-64
 100ca54:	180d883a 	mov	r6,r3
 100ca58:	e17ffd17 	ldw	r5,-12(fp)
 100ca5c:	e13ffe17 	ldw	r4,-8(fp)
 100ca60:	103ee83a 	callr	r2
 100ca64:	e0bfe815 	stw	r2,-96(fp)
	if (ret <= 0) {
 100ca68:	e0bfe817 	ldw	r2,-96(fp)
 100ca6c:	00801616 	blt	zero,r2,100cac8 <remoteproc_load+0x238>
		metal_log(METAL_LOG_ERROR,
 100ca70:	008060f4 	movhi	r2,387
 100ca74:	10a97a04 	addi	r2,r2,-23064
 100ca78:	10800017 	ldw	r2,0(r2)
 100ca7c:	108000f0 	cmpltui	r2,r2,3
 100ca80:	10000c1e 	bne	r2,zero,100cab4 <remoteproc_load+0x224>
 100ca84:	008060f4 	movhi	r2,387
 100ca88:	10a97a04 	addi	r2,r2,-23064
 100ca8c:	10800117 	ldw	r2,4(r2)
 100ca90:	10000826 	beq	r2,zero,100cab4 <remoteproc_load+0x224>
 100ca94:	008060f4 	movhi	r2,387
 100ca98:	10a97a04 	addi	r2,r2,-23064
 100ca9c:	10800117 	ldw	r2,4(r2)
 100caa0:	e1bfe817 	ldw	r6,-96(fp)
 100caa4:	014040b4 	movhi	r5,258
 100caa8:	2955e504 	addi	r5,r5,22420
 100caac:	010000c4 	movi	r4,3
 100cab0:	103ee83a 	callr	r2
			  "load failure: failed to open firmware %d.\r\n",
			  ret);
		metal_mutex_release(&rproc->lock);
 100cab4:	e0bffc17 	ldw	r2,-16(fp)
 100cab8:	1009883a 	mov	r4,r2
 100cabc:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return -RPROC_EINVAL;
 100cac0:	00bfff84 	movi	r2,-2
 100cac4:	0002cd06 	br	100d5fc <remoteproc_load+0xd6c>
	}
	len = ret;
 100cac8:	e0bfe817 	ldw	r2,-96(fp)
 100cacc:	e0bfea15 	stw	r2,-88(fp)
	metal_assert(img_data != NULL);
 100cad0:	e0bff017 	ldw	r2,-64(fp)
 100cad4:	1000081e 	bne	r2,zero,100caf8 <remoteproc_load+0x268>
 100cad8:	01c040b4 	movhi	r7,258
 100cadc:	39d5f004 	addi	r7,r7,22464
 100cae0:	018040b4 	movhi	r6,258
 100cae4:	31971804 	addi	r6,r6,23648
 100cae8:	01406a04 	movi	r5,424
 100caec:	010040b4 	movhi	r4,258
 100caf0:	2115f604 	addi	r4,r4,22488
 100caf4:	10138940 	call	1013894 <__assert_func>

	/* Check executable format to select a parser */
	loader = rproc->loader;
 100caf8:	e0bffc17 	ldw	r2,-16(fp)
 100cafc:	10800b17 	ldw	r2,44(r2)
 100cb00:	e0bfe915 	stw	r2,-92(fp)
	if (!loader) {
 100cb04:	e0bfe917 	ldw	r2,-92(fp)
 100cb08:	10002f1e 	bne	r2,zero,100cbc8 <remoteproc_load+0x338>
		metal_log(METAL_LOG_DEBUG, "%s: check loader\r\n", __func__);
 100cb0c:	008060f4 	movhi	r2,387
 100cb10:	10a97a04 	addi	r2,r2,-23064
 100cb14:	10800017 	ldw	r2,0(r2)
 100cb18:	108001f0 	cmpltui	r2,r2,7
 100cb1c:	10000d1e 	bne	r2,zero,100cb54 <remoteproc_load+0x2c4>
 100cb20:	008060f4 	movhi	r2,387
 100cb24:	10a97a04 	addi	r2,r2,-23064
 100cb28:	10800117 	ldw	r2,4(r2)
 100cb2c:	10000926 	beq	r2,zero,100cb54 <remoteproc_load+0x2c4>
 100cb30:	008060f4 	movhi	r2,387
 100cb34:	10a97a04 	addi	r2,r2,-23064
 100cb38:	10800117 	ldw	r2,4(r2)
 100cb3c:	018040b4 	movhi	r6,258
 100cb40:	31971804 	addi	r6,r6,23648
 100cb44:	014040b4 	movhi	r5,258
 100cb48:	2955ff04 	addi	r5,r5,22524
 100cb4c:	010001c4 	movi	r4,7
 100cb50:	103ee83a 	callr	r2
		loader = remoteproc_check_fw_format(img_data, len);
 100cb54:	e0bff017 	ldw	r2,-64(fp)
 100cb58:	e17fea17 	ldw	r5,-88(fp)
 100cb5c:	1009883a 	mov	r4,r2
 100cb60:	100bc6c0 	call	100bc6c <remoteproc_check_fw_format>
 100cb64:	e0bfe915 	stw	r2,-92(fp)
		if (!loader) {
 100cb68:	e0bfe917 	ldw	r2,-92(fp)
 100cb6c:	1000131e 	bne	r2,zero,100cbbc <remoteproc_load+0x32c>
			metal_log(METAL_LOG_ERROR,
 100cb70:	008060f4 	movhi	r2,387
 100cb74:	10a97a04 	addi	r2,r2,-23064
 100cb78:	10800017 	ldw	r2,0(r2)
 100cb7c:	108000f0 	cmpltui	r2,r2,3
 100cb80:	10000b1e 	bne	r2,zero,100cbb0 <remoteproc_load+0x320>
 100cb84:	008060f4 	movhi	r2,387
 100cb88:	10a97a04 	addi	r2,r2,-23064
 100cb8c:	10800117 	ldw	r2,4(r2)
 100cb90:	10000726 	beq	r2,zero,100cbb0 <remoteproc_load+0x320>
 100cb94:	008060f4 	movhi	r2,387
 100cb98:	10a97a04 	addi	r2,r2,-23064
 100cb9c:	10800117 	ldw	r2,4(r2)
 100cba0:	014040b4 	movhi	r5,258
 100cba4:	29560404 	addi	r5,r5,22544
 100cba8:	010000c4 	movi	r4,3
 100cbac:	103ee83a 	callr	r2
			       "load failure: failed to get store ops.\r\n");
			ret = -RPROC_EINVAL;
 100cbb0:	00bfff84 	movi	r2,-2
 100cbb4:	e0bfe815 	stw	r2,-96(fp)
			goto error1;
 100cbb8:	00028806 	br	100d5dc <remoteproc_load+0xd4c>
		}
		rproc->loader = loader;
 100cbbc:	e0bffc17 	ldw	r2,-16(fp)
 100cbc0:	e0ffe917 	ldw	r3,-92(fp)
 100cbc4:	10c00b15 	stw	r3,44(r2)
	}

	/* Load executable headers */
	metal_log(METAL_LOG_DEBUG, "%s: loading headers\r\n", __func__);
 100cbc8:	008060f4 	movhi	r2,387
 100cbcc:	10a97a04 	addi	r2,r2,-23064
 100cbd0:	10800017 	ldw	r2,0(r2)
 100cbd4:	108001f0 	cmpltui	r2,r2,7
 100cbd8:	10000d1e 	bne	r2,zero,100cc10 <remoteproc_load+0x380>
 100cbdc:	008060f4 	movhi	r2,387
 100cbe0:	10a97a04 	addi	r2,r2,-23064
 100cbe4:	10800117 	ldw	r2,4(r2)
 100cbe8:	10000926 	beq	r2,zero,100cc10 <remoteproc_load+0x380>
 100cbec:	008060f4 	movhi	r2,387
 100cbf0:	10a97a04 	addi	r2,r2,-23064
 100cbf4:	10800117 	ldw	r2,4(r2)
 100cbf8:	018040b4 	movhi	r6,258
 100cbfc:	31971804 	addi	r6,r6,23648
 100cc00:	014040b4 	movhi	r5,258
 100cc04:	29560f04 	addi	r5,r5,22588
 100cc08:	010001c4 	movi	r4,7
 100cc0c:	103ee83a 	callr	r2
	offset = 0;
 100cc10:	e03ff215 	stw	zero,-56(fp)
	last_load_state = RPROC_LOADER_NOT_READY;
 100cc14:	e03feb15 	stw	zero,-84(fp)
	while(1) {
		ret = loader->load_header(img_data, offset, len,
 100cc18:	e0bfe917 	ldw	r2,-92(fp)
 100cc1c:	10800017 	ldw	r2,0(r2)
 100cc20:	e13ff017 	ldw	r4,-64(fp)
 100cc24:	e17ff217 	ldw	r5,-56(fp)
 100cc28:	e1bff104 	addi	r6,fp,-60
 100cc2c:	e0fff404 	addi	r3,fp,-48
 100cc30:	d8c00215 	stw	r3,8(sp)
 100cc34:	e0fff304 	addi	r3,fp,-52
 100cc38:	d8c00115 	stw	r3,4(sp)
 100cc3c:	e0ffeb17 	ldw	r3,-84(fp)
 100cc40:	d8c00015 	stw	r3,0(sp)
 100cc44:	300f883a 	mov	r7,r6
 100cc48:	e1bfea17 	ldw	r6,-88(fp)
 100cc4c:	103ee83a 	callr	r2
 100cc50:	e0bfe815 	stw	r2,-96(fp)
					  &limg_info, last_load_state,
					  &noffset, &nlen);
		last_load_state = ret;
 100cc54:	e0bfe817 	ldw	r2,-96(fp)
 100cc58:	e0bfeb15 	stw	r2,-84(fp)
		metal_log(METAL_LOG_DEBUG,
 100cc5c:	008060f4 	movhi	r2,387
 100cc60:	10a97a04 	addi	r2,r2,-23064
 100cc64:	10800017 	ldw	r2,0(r2)
 100cc68:	108001f0 	cmpltui	r2,r2,7
 100cc6c:	1000151e 	bne	r2,zero,100ccc4 <remoteproc_load+0x434>
 100cc70:	008060f4 	movhi	r2,387
 100cc74:	10a97a04 	addi	r2,r2,-23064
 100cc78:	10800117 	ldw	r2,4(r2)
 100cc7c:	10001126 	beq	r2,zero,100ccc4 <remoteproc_load+0x434>
 100cc80:	008060f4 	movhi	r2,387
 100cc84:	10a97a04 	addi	r2,r2,-23064
 100cc88:	10800117 	ldw	r2,4(r2)
 100cc8c:	e17ff217 	ldw	r5,-56(fp)
 100cc90:	e0fff317 	ldw	r3,-52(fp)
 100cc94:	e13ff417 	ldw	r4,-48(fp)
 100cc98:	d9000215 	stw	r4,8(sp)
 100cc9c:	d8c00115 	stw	r3,4(sp)
 100cca0:	e0ffea17 	ldw	r3,-88(fp)
 100cca4:	d8c00015 	stw	r3,0(sp)
 100cca8:	280f883a 	mov	r7,r5
 100ccac:	018040b4 	movhi	r6,258
 100ccb0:	31971804 	addi	r6,r6,23648
 100ccb4:	014040b4 	movhi	r5,258
 100ccb8:	29561504 	addi	r5,r5,22612
 100ccbc:	010001c4 	movi	r4,7
 100ccc0:	103ee83a 	callr	r2
			  "%s, load header 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, noffset, nlen);
		if (ret < 0) {
 100ccc4:	e0bfe817 	ldw	r2,-96(fp)
 100ccc8:	1000140e 	bge	r2,zero,100cd1c <remoteproc_load+0x48c>
			metal_log(METAL_LOG_ERROR,
 100cccc:	008060f4 	movhi	r2,387
 100ccd0:	10a97a04 	addi	r2,r2,-23064
 100ccd4:	10800017 	ldw	r2,0(r2)
 100ccd8:	108000f0 	cmpltui	r2,r2,3
 100ccdc:	1002371e 	bne	r2,zero,100d5bc <remoteproc_load+0xd2c>
 100cce0:	008060f4 	movhi	r2,387
 100cce4:	10a97a04 	addi	r2,r2,-23064
 100cce8:	10800117 	ldw	r2,4(r2)
 100ccec:	10023326 	beq	r2,zero,100d5bc <remoteproc_load+0xd2c>
 100ccf0:	008060f4 	movhi	r2,387
 100ccf4:	10a97a04 	addi	r2,r2,-23064
 100ccf8:	10800117 	ldw	r2,4(r2)
 100ccfc:	e0fff217 	ldw	r3,-56(fp)
 100cd00:	e1ffea17 	ldw	r7,-88(fp)
 100cd04:	180d883a 	mov	r6,r3
 100cd08:	014040b4 	movhi	r5,258
 100cd0c:	29562104 	addi	r5,r5,22660
 100cd10:	010000c4 	movi	r4,3
 100cd14:	103ee83a 	callr	r2
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);

			goto error2;
 100cd18:	00022806 	br	100d5bc <remoteproc_load+0xd2c>
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
 100cd1c:	e0bfe817 	ldw	r2,-96(fp)
 100cd20:	1080006c 	andhi	r2,r2,1
 100cd24:	10000b26 	beq	r2,zero,100cd54 <remoteproc_load+0x4c4>
			if (nlen == 0)
 100cd28:	e0bff417 	ldw	r2,-48(fp)
 100cd2c:	10003826 	beq	r2,zero,100ce10 <remoteproc_load+0x580>
				break;
			else if ((noffset > (offset + len)) &&
 100cd30:	e0fff217 	ldw	r3,-56(fp)
 100cd34:	e0bfea17 	ldw	r2,-88(fp)
 100cd38:	1887883a 	add	r3,r3,r2
 100cd3c:	e0bff317 	ldw	r2,-52(fp)
 100cd40:	1880042e 	bgeu	r3,r2,100cd54 <remoteproc_load+0x4c4>
				 (store_ops->features & SUPPORT_SEEK) == 0) {
 100cd44:	e0bfff17 	ldw	r2,-4(fp)
 100cd48:	10800317 	ldw	r2,12(r2)
 100cd4c:	1080004c 	andi	r2,r2,1

			goto error2;
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
			if (nlen == 0)
				break;
			else if ((noffset > (offset + len)) &&
 100cd50:	10003126 	beq	r2,zero,100ce18 <remoteproc_load+0x588>
				 */
				break;
			}
		}
		/* Continue to load headers image data */
		img_data = NULL;
 100cd54:	e03ff015 	stw	zero,-64(fp)
		ret = store_ops->load(store, noffset, nlen,
 100cd58:	e0bfff17 	ldw	r2,-4(fp)
 100cd5c:	10800217 	ldw	r2,8(r2)
 100cd60:	e13ff317 	ldw	r4,-52(fp)
 100cd64:	e17ff417 	ldw	r5,-48(fp)
 100cd68:	e1bff004 	addi	r6,fp,-64
 100cd6c:	00c00044 	movi	r3,1
 100cd70:	d8c00215 	stw	r3,8(sp)
 100cd74:	d8000115 	stw	zero,4(sp)
 100cd78:	00ffffc4 	movi	r3,-1
 100cd7c:	d8c00015 	stw	r3,0(sp)
 100cd80:	300f883a 	mov	r7,r6
 100cd84:	280d883a 	mov	r6,r5
 100cd88:	200b883a 	mov	r5,r4
 100cd8c:	e13ffe17 	ldw	r4,-8(fp)
 100cd90:	103ee83a 	callr	r2
 100cd94:	e0bfe815 	stw	r2,-96(fp)
				      &img_data,
				      RPROC_LOAD_ANYADDR,
				      NULL, 1);
		if (ret < (int)nlen) {
 100cd98:	e0bff417 	ldw	r2,-48(fp)
 100cd9c:	1007883a 	mov	r3,r2
 100cda0:	e0bfe817 	ldw	r2,-96(fp)
 100cda4:	10c0150e 	bge	r2,r3,100cdfc <remoteproc_load+0x56c>
			metal_log(METAL_LOG_ERROR,
 100cda8:	008060f4 	movhi	r2,387
 100cdac:	10a97a04 	addi	r2,r2,-23064
 100cdb0:	10800017 	ldw	r2,0(r2)
 100cdb4:	108000f0 	cmpltui	r2,r2,3
 100cdb8:	1002021e 	bne	r2,zero,100d5c4 <remoteproc_load+0xd34>
 100cdbc:	008060f4 	movhi	r2,387
 100cdc0:	10a97a04 	addi	r2,r2,-23064
 100cdc4:	10800117 	ldw	r2,4(r2)
 100cdc8:	1001fe26 	beq	r2,zero,100d5c4 <remoteproc_load+0xd34>
 100cdcc:	008060f4 	movhi	r2,387
 100cdd0:	10a97a04 	addi	r2,r2,-23064
 100cdd4:	10800117 	ldw	r2,4(r2)
 100cdd8:	e0fff317 	ldw	r3,-52(fp)
 100cddc:	e13ff417 	ldw	r4,-48(fp)
 100cde0:	200f883a 	mov	r7,r4
 100cde4:	180d883a 	mov	r6,r3
 100cde8:	014040b4 	movhi	r5,258
 100cdec:	29562904 	addi	r5,r5,22692
 100cdf0:	010000c4 	movi	r4,3
 100cdf4:	103ee83a 	callr	r2
				  "load image data failed 0x%x,%d\r\n",
				  noffset, nlen);
			goto error2;
 100cdf8:	0001f206 	br	100d5c4 <remoteproc_load+0xd34>
		}
		offset = noffset;
 100cdfc:	e0bff317 	ldw	r2,-52(fp)
 100ce00:	e0bff215 	stw	r2,-56(fp)
		len = nlen;
 100ce04:	e0bff417 	ldw	r2,-48(fp)
 100ce08:	e0bfea15 	stw	r2,-88(fp)
	}
 100ce0c:	003f8206 	br	100cc18 <__alt_data_end+0xff00cc18>
				  offset, len);

			goto error2;
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
			if (nlen == 0)
				break;
 100ce10:	0001883a 	nop
 100ce14:	00000106 	br	100ce1c <remoteproc_load+0x58c>
				 * headers such as ELF section headers which
				 * is usually located to the end of image.
				 * Continue to load binary data to target
				 * memory.
				 */
				break;
 100ce18:	0001883a 	nop
			goto error2;
		}
		offset = noffset;
		len = nlen;
	}
	ret = loader->locate_rsc_table(limg_info, &rsc_da, &offset, &rsc_size);
 100ce1c:	e0bfe917 	ldw	r2,-92(fp)
 100ce20:	10800217 	ldw	r2,8(r2)
 100ce24:	e0fff117 	ldw	r3,-60(fp)
 100ce28:	e1bff704 	addi	r6,fp,-36
 100ce2c:	e17ff204 	addi	r5,fp,-56
 100ce30:	e13ff604 	addi	r4,fp,-40
 100ce34:	300f883a 	mov	r7,r6
 100ce38:	280d883a 	mov	r6,r5
 100ce3c:	200b883a 	mov	r5,r4
 100ce40:	1809883a 	mov	r4,r3
 100ce44:	103ee83a 	callr	r2
 100ce48:	e0bfe815 	stw	r2,-96(fp)
	if (ret == 0 && rsc_size > 0) {
 100ce4c:	e0bfe817 	ldw	r2,-96(fp)
 100ce50:	10000b1e 	bne	r2,zero,100ce80 <remoteproc_load+0x5f0>
 100ce54:	e0bff717 	ldw	r2,-36(fp)
 100ce58:	10000926 	beq	r2,zero,100ce80 <remoteproc_load+0x5f0>
		/* parse resource table */
		rsc_table = remoteproc_get_rsc_table(rproc, store, store_ops,
 100ce5c:	e0fff217 	ldw	r3,-56(fp)
 100ce60:	e0bff717 	ldw	r2,-36(fp)
 100ce64:	d8800015 	stw	r2,0(sp)
 100ce68:	180f883a 	mov	r7,r3
 100ce6c:	e1bfff17 	ldw	r6,-4(fp)
 100ce70:	e17ffe17 	ldw	r5,-8(fp)
 100ce74:	e13ffc17 	ldw	r4,-16(fp)
 100ce78:	100bed00 	call	100bed0 <remoteproc_get_rsc_table>
 100ce7c:	e0bfec15 	stw	r2,-80(fp)
						     offset, rsc_size);
	}

	/* load executable data */
	metal_log(METAL_LOG_DEBUG, "%s: load executable data\r\n", __func__);
 100ce80:	008060f4 	movhi	r2,387
 100ce84:	10a97a04 	addi	r2,r2,-23064
 100ce88:	10800017 	ldw	r2,0(r2)
 100ce8c:	108001f0 	cmpltui	r2,r2,7
 100ce90:	10000d1e 	bne	r2,zero,100cec8 <remoteproc_load+0x638>
 100ce94:	008060f4 	movhi	r2,387
 100ce98:	10a97a04 	addi	r2,r2,-23064
 100ce9c:	10800117 	ldw	r2,4(r2)
 100cea0:	10000926 	beq	r2,zero,100cec8 <remoteproc_load+0x638>
 100cea4:	008060f4 	movhi	r2,387
 100cea8:	10a97a04 	addi	r2,r2,-23064
 100ceac:	10800117 	ldw	r2,4(r2)
 100ceb0:	018040b4 	movhi	r6,258
 100ceb4:	31971804 	addi	r6,r6,23648
 100ceb8:	014040b4 	movhi	r5,258
 100cebc:	29563204 	addi	r5,r5,22728
 100cec0:	010001c4 	movi	r4,7
 100cec4:	103ee83a 	callr	r2
	offset = 0;
 100cec8:	e03ff215 	stw	zero,-56(fp)
	len = 0;
 100cecc:	e03fea15 	stw	zero,-88(fp)
	ret = -RPROC_EINVAL;
 100ced0:	00bfff84 	movi	r2,-2
 100ced4:	e0bfe815 	stw	r2,-96(fp)
	while(1) {
		unsigned char padding;
		size_t nmemsize;
		metal_phys_addr_t pa;

		da = RPROC_LOAD_ANYADDR;
 100ced8:	00bfffc4 	movi	r2,-1
 100cedc:	e0bff515 	stw	r2,-44(fp)
		nlen = 0;
 100cee0:	e03ff415 	stw	zero,-48(fp)
		nmemsize = 0;
 100cee4:	e03ffa15 	stw	zero,-24(fp)
		noffset = 0;
 100cee8:	e03ff315 	stw	zero,-52(fp)
		ret = loader->load_data(rproc, img_data, offset, len,
 100ceec:	e0bfe917 	ldw	r2,-92(fp)
 100cef0:	10800117 	ldw	r2,4(r2)
 100cef4:	e13ff017 	ldw	r4,-64(fp)
 100cef8:	e17ff217 	ldw	r5,-56(fp)
 100cefc:	e0fffa04 	addi	r3,fp,-24
 100cf00:	d8c00615 	stw	r3,24(sp)
 100cf04:	e0fff904 	addi	r3,fp,-28
 100cf08:	d8c00515 	stw	r3,20(sp)
 100cf0c:	e0fff404 	addi	r3,fp,-48
 100cf10:	d8c00415 	stw	r3,16(sp)
 100cf14:	e0fff304 	addi	r3,fp,-52
 100cf18:	d8c00315 	stw	r3,12(sp)
 100cf1c:	e0fff504 	addi	r3,fp,-44
 100cf20:	d8c00215 	stw	r3,8(sp)
 100cf24:	e0ffeb17 	ldw	r3,-84(fp)
 100cf28:	d8c00115 	stw	r3,4(sp)
 100cf2c:	e0fff104 	addi	r3,fp,-60
 100cf30:	d8c00015 	stw	r3,0(sp)
 100cf34:	e1ffea17 	ldw	r7,-88(fp)
 100cf38:	280d883a 	mov	r6,r5
 100cf3c:	200b883a 	mov	r5,r4
 100cf40:	e13ffc17 	ldw	r4,-16(fp)
 100cf44:	103ee83a 	callr	r2
 100cf48:	e0bfe815 	stw	r2,-96(fp)
					&limg_info, last_load_state, &da,
					&noffset, &nlen, &padding, &nmemsize);
		if (ret < 0) {
 100cf4c:	e0bfe817 	ldw	r2,-96(fp)
 100cf50:	1000150e 	bge	r2,zero,100cfa8 <remoteproc_load+0x718>
			metal_log(METAL_LOG_ERROR,
 100cf54:	008060f4 	movhi	r2,387
 100cf58:	10a97a04 	addi	r2,r2,-23064
 100cf5c:	10800017 	ldw	r2,0(r2)
 100cf60:	108000f0 	cmpltui	r2,r2,3
 100cf64:	10018d1e 	bne	r2,zero,100d59c <remoteproc_load+0xd0c>
 100cf68:	008060f4 	movhi	r2,387
 100cf6c:	10a97a04 	addi	r2,r2,-23064
 100cf70:	10800117 	ldw	r2,4(r2)
 100cf74:	10018926 	beq	r2,zero,100d59c <remoteproc_load+0xd0c>
 100cf78:	008060f4 	movhi	r2,387
 100cf7c:	10a97a04 	addi	r2,r2,-23064
 100cf80:	10800117 	ldw	r2,4(r2)
 100cf84:	e0fff317 	ldw	r3,-52(fp)
 100cf88:	e13ff417 	ldw	r4,-48(fp)
 100cf8c:	200f883a 	mov	r7,r4
 100cf90:	180d883a 	mov	r6,r3
 100cf94:	014040b4 	movhi	r5,258
 100cf98:	29563904 	addi	r5,r5,22756
 100cf9c:	010000c4 	movi	r4,3
 100cfa0:	103ee83a 	callr	r2
				  "load data failed,0x%lx,%d\r\n",
				  noffset, nlen);
			goto error3;
 100cfa4:	00017d06 	br	100d59c <remoteproc_load+0xd0c>
		}
		metal_log(METAL_LOG_DEBUG,
 100cfa8:	008060f4 	movhi	r2,387
 100cfac:	10a97a04 	addi	r2,r2,-23064
 100cfb0:	10800017 	ldw	r2,0(r2)
 100cfb4:	108001f0 	cmpltui	r2,r2,7
 100cfb8:	1000131e 	bne	r2,zero,100d008 <remoteproc_load+0x778>
 100cfbc:	008060f4 	movhi	r2,387
 100cfc0:	10a97a04 	addi	r2,r2,-23064
 100cfc4:	10800117 	ldw	r2,4(r2)
 100cfc8:	10000f26 	beq	r2,zero,100d008 <remoteproc_load+0x778>
 100cfcc:	008060f4 	movhi	r2,387
 100cfd0:	10a97a04 	addi	r2,r2,-23064
 100cfd4:	10800117 	ldw	r2,4(r2)
 100cfd8:	e1bff517 	ldw	r6,-44(fp)
 100cfdc:	e1fff317 	ldw	r7,-52(fp)
 100cfe0:	e0fff417 	ldw	r3,-48(fp)
 100cfe4:	e13ffa17 	ldw	r4,-24(fp)
 100cfe8:	e17fe817 	ldw	r5,-96(fp)
 100cfec:	d9400215 	stw	r5,8(sp)
 100cff0:	d9000115 	stw	r4,4(sp)
 100cff4:	d8c00015 	stw	r3,0(sp)
 100cff8:	014040b4 	movhi	r5,258
 100cffc:	29564004 	addi	r5,r5,22784
 100d000:	010001c4 	movi	r4,7
 100d004:	103ee83a 	callr	r2
			  "load data: da 0x%lx, offset 0x%lx, len = 0x%lx, memsize = 0x%lx, state 0x%x\r\n",
			  da, noffset, nlen, nmemsize, ret);
		last_load_state = ret;
 100d008:	e0bfe817 	ldw	r2,-96(fp)
 100d00c:	e0bfeb15 	stw	r2,-84(fp)
		if (da != RPROC_LOAD_ANYADDR) {
 100d010:	e0bff517 	ldw	r2,-44(fp)
 100d014:	10bfffe0 	cmpeqi	r2,r2,-1
 100d018:	10006b1e 	bne	r2,zero,100d1c8 <remoteproc_load+0x938>
			/* Data is supposed to be loaded to target memory */
			img_data = NULL;
 100d01c:	e03ff015 	stw	zero,-64(fp)
			/* get the I/O region from remoteproc */
			pa = METAL_BAD_PHYS;
 100d020:	00bfffc4 	movi	r2,-1
 100d024:	e0bffb15 	stw	r2,-20(fp)
			(void)remoteproc_mmap(rproc, &pa, &da, nmemsize, 0, &io);
 100d028:	e17ffa17 	ldw	r5,-24(fp)
 100d02c:	e13ff504 	addi	r4,fp,-44
 100d030:	e0fffb04 	addi	r3,fp,-20
 100d034:	e0bff804 	addi	r2,fp,-32
 100d038:	d8800115 	stw	r2,4(sp)
 100d03c:	d8000015 	stw	zero,0(sp)
 100d040:	280f883a 	mov	r7,r5
 100d044:	200d883a 	mov	r6,r4
 100d048:	180b883a 	mov	r5,r3
 100d04c:	e13ffc17 	ldw	r4,-16(fp)
 100d050:	100c6c80 	call	100c6c8 <remoteproc_mmap>
			if (pa == METAL_BAD_PHYS || io == NULL) {
 100d054:	e0bffb17 	ldw	r2,-20(fp)
 100d058:	10bfffe0 	cmpeqi	r2,r2,-1
 100d05c:	1000021e 	bne	r2,zero,100d068 <remoteproc_load+0x7d8>
 100d060:	e0bff817 	ldw	r2,-32(fp)
 100d064:	1000151e 	bne	r2,zero,100d0bc <remoteproc_load+0x82c>
				metal_log(METAL_LOG_ERROR,
 100d068:	008060f4 	movhi	r2,387
 100d06c:	10a97a04 	addi	r2,r2,-23064
 100d070:	10800017 	ldw	r2,0(r2)
 100d074:	108000f0 	cmpltui	r2,r2,3
 100d078:	10000d1e 	bne	r2,zero,100d0b0 <remoteproc_load+0x820>
 100d07c:	008060f4 	movhi	r2,387
 100d080:	10a97a04 	addi	r2,r2,-23064
 100d084:	10800117 	ldw	r2,4(r2)
 100d088:	10000926 	beq	r2,zero,100d0b0 <remoteproc_load+0x820>
 100d08c:	008060f4 	movhi	r2,387
 100d090:	10a97a04 	addi	r2,r2,-23064
 100d094:	10800117 	ldw	r2,4(r2)
 100d098:	e0fff517 	ldw	r3,-44(fp)
 100d09c:	180d883a 	mov	r6,r3
 100d0a0:	014040b4 	movhi	r5,258
 100d0a4:	29565404 	addi	r5,r5,22864
 100d0a8:	010000c4 	movi	r4,3
 100d0ac:	103ee83a 	callr	r2
					  "load failed, no mapping for 0x%llx.\r\n",
					  da);
				ret = -RPROC_EINVAL;
 100d0b0:	00bfff84 	movi	r2,-2
 100d0b4:	e0bfe815 	stw	r2,-96(fp)
				goto error3;
 100d0b8:	00013b06 	br	100d5a8 <remoteproc_load+0xd18>
			}
			if (nlen > 0) {
 100d0bc:	e0bff417 	ldw	r2,-48(fp)
 100d0c0:	10002c26 	beq	r2,zero,100d174 <remoteproc_load+0x8e4>
				ret = store_ops->load(store, noffset, nlen,
 100d0c4:	e0bfff17 	ldw	r2,-4(fp)
 100d0c8:	10800217 	ldw	r2,8(r2)
 100d0cc:	e23ff317 	ldw	r8,-52(fp)
 100d0d0:	e1bff417 	ldw	r6,-48(fp)
 100d0d4:	e0fffb17 	ldw	r3,-20(fp)
 100d0d8:	e13ff817 	ldw	r4,-32(fp)
 100d0dc:	e1fff004 	addi	r7,fp,-64
 100d0e0:	01400044 	movi	r5,1
 100d0e4:	d9400215 	stw	r5,8(sp)
 100d0e8:	d9000115 	stw	r4,4(sp)
 100d0ec:	d8c00015 	stw	r3,0(sp)
 100d0f0:	400b883a 	mov	r5,r8
 100d0f4:	e13ffe17 	ldw	r4,-8(fp)
 100d0f8:	103ee83a 	callr	r2
 100d0fc:	e0bfe815 	stw	r2,-96(fp)
						      &img_data, pa, io, 1);
				if (ret != (int)nlen) {
 100d100:	e0bff417 	ldw	r2,-48(fp)
 100d104:	1007883a 	mov	r3,r2
 100d108:	e0bfe817 	ldw	r2,-96(fp)
 100d10c:	10c01926 	beq	r2,r3,100d174 <remoteproc_load+0x8e4>
					metal_log(METAL_LOG_ERROR,
 100d110:	008060f4 	movhi	r2,387
 100d114:	10a97a04 	addi	r2,r2,-23064
 100d118:	10800017 	ldw	r2,0(r2)
 100d11c:	108000f0 	cmpltui	r2,r2,3
 100d120:	1000111e 	bne	r2,zero,100d168 <remoteproc_load+0x8d8>
 100d124:	008060f4 	movhi	r2,387
 100d128:	10a97a04 	addi	r2,r2,-23064
 100d12c:	10800117 	ldw	r2,4(r2)
 100d130:	10000d26 	beq	r2,zero,100d168 <remoteproc_load+0x8d8>
 100d134:	008060f4 	movhi	r2,387
 100d138:	10a97a04 	addi	r2,r2,-23064
 100d13c:	10800117 	ldw	r2,4(r2)
 100d140:	e13ffb17 	ldw	r4,-20(fp)
 100d144:	e17ff317 	ldw	r5,-52(fp)
 100d148:	e0fff417 	ldw	r3,-48(fp)
 100d14c:	d8c00015 	stw	r3,0(sp)
 100d150:	280f883a 	mov	r7,r5
 100d154:	200d883a 	mov	r6,r4
 100d158:	014040b4 	movhi	r5,258
 100d15c:	29565e04 	addi	r5,r5,22904
 100d160:	010000c4 	movi	r4,3
 100d164:	103ee83a 	callr	r2
						  "load data failed 0x%lx, 0x%lx, 0x%x\r\n",
						  pa, noffset, nlen);
					ret = -RPROC_EINVAL;
 100d168:	00bfff84 	movi	r2,-2
 100d16c:	e0bfe815 	stw	r2,-96(fp)
					goto error3;
 100d170:	00010d06 	br	100d5a8 <remoteproc_load+0xd18>
				}
			}
			if (nmemsize > nlen) {
 100d174:	e0bffa17 	ldw	r2,-24(fp)
 100d178:	e0fff417 	ldw	r3,-48(fp)
 100d17c:	18bf562e 	bgeu	r3,r2,100ced8 <__alt_data_end+0xff00ced8>
				size_t tmpoffset;

				tmpoffset = metal_io_phys_to_offset(io,
 100d180:	e13ff817 	ldw	r4,-32(fp)
 100d184:	e0fffb17 	ldw	r3,-20(fp)
 100d188:	e0bff417 	ldw	r2,-48(fp)
 100d18c:	1885883a 	add	r2,r3,r2
 100d190:	100b883a 	mov	r5,r2
 100d194:	100b9680 	call	100b968 <metal_io_phys_to_offset>
 100d198:	e0bfed15 	stw	r2,-76(fp)
								    pa + nlen);
				metal_io_block_set(io, tmpoffset,
 100d19c:	e13ff817 	ldw	r4,-32(fp)
 100d1a0:	e0bff903 	ldbu	r2,-28(fp)
 100d1a4:	11403fcc 	andi	r5,r2,255
						   padding, (nmemsize - nlen));
 100d1a8:	e0fffa17 	ldw	r3,-24(fp)
 100d1ac:	e0bff417 	ldw	r2,-48(fp)
 100d1b0:	1885c83a 	sub	r2,r3,r2
			if (nmemsize > nlen) {
				size_t tmpoffset;

				tmpoffset = metal_io_phys_to_offset(io,
								    pa + nlen);
				metal_io_block_set(io, tmpoffset,
 100d1b4:	100f883a 	mov	r7,r2
 100d1b8:	280d883a 	mov	r6,r5
 100d1bc:	e17fed17 	ldw	r5,-76(fp)
 100d1c0:	1007f380 	call	1007f38 <metal_io_block_set>
 100d1c4:	003f4406 	br	100ced8 <__alt_data_end+0xff00ced8>
						   padding, (nmemsize - nlen));
			}
		} else if (nlen != 0) {
 100d1c8:	e0bff417 	ldw	r2,-48(fp)
 100d1cc:	10004326 	beq	r2,zero,100d2dc <remoteproc_load+0xa4c>
			ret = store_ops->load(store, noffset, nlen,
 100d1d0:	e0bfff17 	ldw	r2,-4(fp)
 100d1d4:	10800217 	ldw	r2,8(r2)
 100d1d8:	e13ff317 	ldw	r4,-52(fp)
 100d1dc:	e17ff417 	ldw	r5,-48(fp)
 100d1e0:	e1bff004 	addi	r6,fp,-64
 100d1e4:	00c00044 	movi	r3,1
 100d1e8:	d8c00215 	stw	r3,8(sp)
 100d1ec:	d8000115 	stw	zero,4(sp)
 100d1f0:	00ffffc4 	movi	r3,-1
 100d1f4:	d8c00015 	stw	r3,0(sp)
 100d1f8:	300f883a 	mov	r7,r6
 100d1fc:	280d883a 	mov	r6,r5
 100d200:	200b883a 	mov	r5,r4
 100d204:	e13ffe17 	ldw	r4,-8(fp)
 100d208:	103ee83a 	callr	r2
 100d20c:	e0bfe815 	stw	r2,-96(fp)
					      &img_data,
					      RPROC_LOAD_ANYADDR,
					      NULL, 1);
			if (ret < (int)nlen) {
 100d210:	e0bff417 	ldw	r2,-48(fp)
 100d214:	1007883a 	mov	r3,r2
 100d218:	e0bfe817 	ldw	r2,-96(fp)
 100d21c:	10c02a0e 	bge	r2,r3,100d2c8 <remoteproc_load+0xa38>
				if ((last_load_state &
 100d220:	e0bfeb17 	ldw	r2,-84(fp)
 100d224:	108000ac 	andhi	r2,r2,2
 100d228:	10001126 	beq	r2,zero,100d270 <remoteproc_load+0x9e0>
				    RPROC_LOADER_POST_DATA_LOAD) != 0) {
					metal_log(METAL_LOG_WARNING,
 100d22c:	008060f4 	movhi	r2,387
 100d230:	10a97a04 	addi	r2,r2,-23064
 100d234:	10800017 	ldw	r2,0(r2)
 100d238:	10800130 	cmpltui	r2,r2,4
 100d23c:	1000291e 	bne	r2,zero,100d2e4 <remoteproc_load+0xa54>
 100d240:	008060f4 	movhi	r2,387
 100d244:	10a97a04 	addi	r2,r2,-23064
 100d248:	10800117 	ldw	r2,4(r2)
 100d24c:	10002526 	beq	r2,zero,100d2e4 <remoteproc_load+0xa54>
 100d250:	008060f4 	movhi	r2,387
 100d254:	10a97a04 	addi	r2,r2,-23064
 100d258:	10800117 	ldw	r2,4(r2)
 100d25c:	014040b4 	movhi	r5,258
 100d260:	29566804 	addi	r5,r5,22944
 100d264:	01000104 	movi	r4,4
 100d268:	103ee83a 	callr	r2
						  "not all the headers are loaded\r\n");
					break;
 100d26c:	00001d06 	br	100d2e4 <remoteproc_load+0xa54>
				}
				metal_log(METAL_LOG_ERROR,
 100d270:	008060f4 	movhi	r2,387
 100d274:	10a97a04 	addi	r2,r2,-23064
 100d278:	10800017 	ldw	r2,0(r2)
 100d27c:	108000f0 	cmpltui	r2,r2,3
 100d280:	1000c81e 	bne	r2,zero,100d5a4 <remoteproc_load+0xd14>
 100d284:	008060f4 	movhi	r2,387
 100d288:	10a97a04 	addi	r2,r2,-23064
 100d28c:	10800117 	ldw	r2,4(r2)
 100d290:	1000c426 	beq	r2,zero,100d5a4 <remoteproc_load+0xd14>
 100d294:	008060f4 	movhi	r2,387
 100d298:	10a97a04 	addi	r2,r2,-23064
 100d29c:	10800117 	ldw	r2,4(r2)
 100d2a0:	e0fff317 	ldw	r3,-52(fp)
 100d2a4:	e13ff417 	ldw	r4,-48(fp)
 100d2a8:	200f883a 	mov	r7,r4
 100d2ac:	180d883a 	mov	r6,r3
 100d2b0:	014040b4 	movhi	r5,258
 100d2b4:	29567104 	addi	r5,r5,22980
 100d2b8:	010000c4 	movi	r4,3
 100d2bc:	103ee83a 	callr	r2
					  "post-load image data failed 0x%x,%d\r\n",
					  noffset, nlen);
				goto error3;
 100d2c0:	0001883a 	nop
 100d2c4:	0000b706 	br	100d5a4 <remoteproc_load+0xd14>
			}
			offset = noffset;
 100d2c8:	e0bff317 	ldw	r2,-52(fp)
 100d2cc:	e0bff215 	stw	r2,-56(fp)
			len = nlen;
 100d2d0:	e0bff417 	ldw	r2,-48(fp)
 100d2d4:	e0bfea15 	stw	r2,-88(fp)
		} else {
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
		}
	}
 100d2d8:	003eff06 	br	100ced8 <__alt_data_end+0xff00ced8>
			}
			offset = noffset;
			len = nlen;
		} else {
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
 100d2dc:	0001883a 	nop
 100d2e0:	00000106 	br	100d2e8 <remoteproc_load+0xa58>
			if (ret < (int)nlen) {
				if ((last_load_state &
				    RPROC_LOADER_POST_DATA_LOAD) != 0) {
					metal_log(METAL_LOG_WARNING,
						  "not all the headers are loaded\r\n");
					break;
 100d2e4:	0001883a 	nop
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
		}
	}

	if (rsc_size == 0) {
 100d2e8:	e0bff717 	ldw	r2,-36(fp)
 100d2ec:	1000191e 	bne	r2,zero,100d354 <remoteproc_load+0xac4>
		ret = loader->locate_rsc_table(limg_info, &rsc_da,
 100d2f0:	e0bfe917 	ldw	r2,-92(fp)
 100d2f4:	10800217 	ldw	r2,8(r2)
 100d2f8:	e0fff117 	ldw	r3,-60(fp)
 100d2fc:	e1bff704 	addi	r6,fp,-36
 100d300:	e17ff204 	addi	r5,fp,-56
 100d304:	e13ff604 	addi	r4,fp,-40
 100d308:	300f883a 	mov	r7,r6
 100d30c:	280d883a 	mov	r6,r5
 100d310:	200b883a 	mov	r5,r4
 100d314:	1809883a 	mov	r4,r3
 100d318:	103ee83a 	callr	r2
 100d31c:	e0bfe815 	stw	r2,-96(fp)
					       &offset, &rsc_size);
		if (ret == 0 && rsc_size > 0) {
 100d320:	e0bfe817 	ldw	r2,-96(fp)
 100d324:	10000b1e 	bne	r2,zero,100d354 <remoteproc_load+0xac4>
 100d328:	e0bff717 	ldw	r2,-36(fp)
 100d32c:	10000926 	beq	r2,zero,100d354 <remoteproc_load+0xac4>
			/* parse resource table */
			rsc_table = remoteproc_get_rsc_table(rproc, store,
 100d330:	e0fff217 	ldw	r3,-56(fp)
 100d334:	e0bff717 	ldw	r2,-36(fp)
 100d338:	d8800015 	stw	r2,0(sp)
 100d33c:	180f883a 	mov	r7,r3
 100d340:	e1bfff17 	ldw	r6,-4(fp)
 100d344:	e17ffe17 	ldw	r5,-8(fp)
 100d348:	e13ffc17 	ldw	r4,-16(fp)
 100d34c:	100bed00 	call	100bed0 <remoteproc_get_rsc_table>
 100d350:	e0bfec15 	stw	r2,-80(fp)
							     rsc_size);
		}
	}

	/* Update resource table */
	if (rsc_table) {
 100d354:	e0bfec17 	ldw	r2,-80(fp)
 100d358:	10005f26 	beq	r2,zero,100d4d8 <remoteproc_load+0xc48>
		void *rsc_table_cp = rsc_table;
 100d35c:	e0bfec17 	ldw	r2,-80(fp)
 100d360:	e0bfee15 	stw	r2,-72(fp)

		metal_log(METAL_LOG_DEBUG,
 100d364:	008060f4 	movhi	r2,387
 100d368:	10a97a04 	addi	r2,r2,-23064
 100d36c:	10800017 	ldw	r2,0(r2)
 100d370:	108001f0 	cmpltui	r2,r2,7
 100d374:	10000d1e 	bne	r2,zero,100d3ac <remoteproc_load+0xb1c>
 100d378:	008060f4 	movhi	r2,387
 100d37c:	10a97a04 	addi	r2,r2,-23064
 100d380:	10800117 	ldw	r2,4(r2)
 100d384:	10000926 	beq	r2,zero,100d3ac <remoteproc_load+0xb1c>
 100d388:	008060f4 	movhi	r2,387
 100d38c:	10a97a04 	addi	r2,r2,-23064
 100d390:	10800117 	ldw	r2,4(r2)
 100d394:	018040b4 	movhi	r6,258
 100d398:	31971804 	addi	r6,r6,23648
 100d39c:	014040b4 	movhi	r5,258
 100d3a0:	29567b04 	addi	r5,r5,23020
 100d3a4:	010001c4 	movi	r4,7
 100d3a8:	103ee83a 	callr	r2
			  "%s, update resource table\r\n", __func__);
		rsc_table = remoteproc_mmap(rproc, NULL, &rsc_da,
 100d3ac:	e13ff717 	ldw	r4,-36(fp)
 100d3b0:	e0fff604 	addi	r3,fp,-40
 100d3b4:	e0bff804 	addi	r2,fp,-32
 100d3b8:	d8800115 	stw	r2,4(sp)
 100d3bc:	d8000015 	stw	zero,0(sp)
 100d3c0:	200f883a 	mov	r7,r4
 100d3c4:	180d883a 	mov	r6,r3
 100d3c8:	000b883a 	mov	r5,zero
 100d3cc:	e13ffc17 	ldw	r4,-16(fp)
 100d3d0:	100c6c80 	call	100c6c8 <remoteproc_mmap>
 100d3d4:	e0bfec15 	stw	r2,-80(fp)
					    rsc_size, 0, &io);
		if (rsc_table) {
 100d3d8:	e0bfec17 	ldw	r2,-80(fp)
 100d3dc:	10002b26 	beq	r2,zero,100d48c <remoteproc_load+0xbfc>
			size_t rsc_io_offset;

			/* Update resource table */
			rsc_io_offset = metal_io_virt_to_offset(io, rsc_table);
 100d3e0:	e0bff817 	ldw	r2,-32(fp)
 100d3e4:	e17fec17 	ldw	r5,-80(fp)
 100d3e8:	1009883a 	mov	r4,r2
 100d3ec:	100b8440 	call	100b844 <metal_io_virt_to_offset>
 100d3f0:	e0bfef15 	stw	r2,-68(fp)
			ret = metal_io_block_write(io, rsc_io_offset,
 100d3f4:	e0bff817 	ldw	r2,-32(fp)
 100d3f8:	e0fff717 	ldw	r3,-36(fp)
 100d3fc:	180f883a 	mov	r7,r3
 100d400:	e1bfee17 	ldw	r6,-72(fp)
 100d404:	e17fef17 	ldw	r5,-68(fp)
 100d408:	1009883a 	mov	r4,r2
 100d40c:	1007d880 	call	1007d88 <metal_io_block_write>
 100d410:	e0bfe815 	stw	r2,-96(fp)
						   rsc_table_cp, rsc_size);
			if (ret != (int)rsc_size) {
 100d414:	e0bff717 	ldw	r2,-36(fp)
 100d418:	1007883a 	mov	r3,r2
 100d41c:	e0bfe817 	ldw	r2,-96(fp)
 100d420:	10c01026 	beq	r2,r3,100d464 <remoteproc_load+0xbd4>
				metal_log(METAL_LOG_WARNING,
 100d424:	008060f4 	movhi	r2,387
 100d428:	10a97a04 	addi	r2,r2,-23064
 100d42c:	10800017 	ldw	r2,0(r2)
 100d430:	10800130 	cmpltui	r2,r2,4
 100d434:	10000b1e 	bne	r2,zero,100d464 <remoteproc_load+0xbd4>
 100d438:	008060f4 	movhi	r2,387
 100d43c:	10a97a04 	addi	r2,r2,-23064
 100d440:	10800117 	ldw	r2,4(r2)
 100d444:	10000726 	beq	r2,zero,100d464 <remoteproc_load+0xbd4>
 100d448:	008060f4 	movhi	r2,387
 100d44c:	10a97a04 	addi	r2,r2,-23064
 100d450:	10800117 	ldw	r2,4(r2)
 100d454:	014040b4 	movhi	r5,258
 100d458:	29568204 	addi	r5,r5,23048
 100d45c:	01000104 	movi	r4,4
 100d460:	103ee83a 	callr	r2
					  "load: failed to update rsc\r\n");
			}
			rproc->rsc_table = rsc_table;
 100d464:	e0bffc17 	ldw	r2,-16(fp)
 100d468:	e0ffec17 	ldw	r3,-80(fp)
 100d46c:	10c00115 	stw	r3,4(r2)
			rproc->rsc_len = rsc_size;
 100d470:	e0fff717 	ldw	r3,-36(fp)
 100d474:	e0bffc17 	ldw	r2,-16(fp)
 100d478:	10c00215 	stw	r3,8(r2)
			rproc->rsc_io = io;
 100d47c:	e0fff817 	ldw	r3,-32(fp)
 100d480:	e0bffc17 	ldw	r2,-16(fp)
 100d484:	10c00315 	stw	r3,12(r2)
 100d488:	00001006 	br	100d4cc <remoteproc_load+0xc3c>
		} else {
			metal_log(METAL_LOG_WARNING,
 100d48c:	008060f4 	movhi	r2,387
 100d490:	10a97a04 	addi	r2,r2,-23064
 100d494:	10800017 	ldw	r2,0(r2)
 100d498:	10800130 	cmpltui	r2,r2,4
 100d49c:	10000b1e 	bne	r2,zero,100d4cc <remoteproc_load+0xc3c>
 100d4a0:	008060f4 	movhi	r2,387
 100d4a4:	10a97a04 	addi	r2,r2,-23064
 100d4a8:	10800117 	ldw	r2,4(r2)
 100d4ac:	10000726 	beq	r2,zero,100d4cc <remoteproc_load+0xc3c>
 100d4b0:	008060f4 	movhi	r2,387
 100d4b4:	10a97a04 	addi	r2,r2,-23064
 100d4b8:	10800117 	ldw	r2,4(r2)
 100d4bc:	014040b4 	movhi	r5,258
 100d4c0:	29568a04 	addi	r5,r5,23080
 100d4c4:	01000104 	movi	r4,4
 100d4c8:	103ee83a 	callr	r2
				  "load: not able to update rsc table.\r\n");
		}
		metal_free_memory(rsc_table_cp);
 100d4cc:	e13fee17 	ldw	r4,-72(fp)
 100d4d0:	100b4f00 	call	100b4f0 <metal_free_memory>
		/* So that the rsc_table will not get released */
		rsc_table = NULL;
 100d4d4:	e03fec15 	stw	zero,-80(fp)
	}

	metal_log(METAL_LOG_DEBUG, "%s: successfully load firmware\r\n",
 100d4d8:	008060f4 	movhi	r2,387
 100d4dc:	10a97a04 	addi	r2,r2,-23064
 100d4e0:	10800017 	ldw	r2,0(r2)
 100d4e4:	108001f0 	cmpltui	r2,r2,7
 100d4e8:	10000d1e 	bne	r2,zero,100d520 <remoteproc_load+0xc90>
 100d4ec:	008060f4 	movhi	r2,387
 100d4f0:	10a97a04 	addi	r2,r2,-23064
 100d4f4:	10800117 	ldw	r2,4(r2)
 100d4f8:	10000926 	beq	r2,zero,100d520 <remoteproc_load+0xc90>
 100d4fc:	008060f4 	movhi	r2,387
 100d500:	10a97a04 	addi	r2,r2,-23064
 100d504:	10800117 	ldw	r2,4(r2)
 100d508:	018040b4 	movhi	r6,258
 100d50c:	31971804 	addi	r6,r6,23648
 100d510:	014040b4 	movhi	r5,258
 100d514:	29569404 	addi	r5,r5,23120
 100d518:	010001c4 	movi	r4,7
 100d51c:	103ee83a 	callr	r2
		  __func__);
	/* get entry point from the firmware */
	rproc->bootaddr = loader->get_entry(limg_info);
 100d520:	e0bfe917 	ldw	r2,-92(fp)
 100d524:	10800417 	ldw	r2,16(r2)
 100d528:	e0fff117 	ldw	r3,-60(fp)
 100d52c:	1809883a 	mov	r4,r3
 100d530:	103ee83a 	callr	r2
 100d534:	1007883a 	mov	r3,r2
 100d538:	e0bffc17 	ldw	r2,-16(fp)
 100d53c:	10c00a15 	stw	r3,40(r2)
	rproc->state = RPROC_READY;
 100d540:	e0bffc17 	ldw	r2,-16(fp)
 100d544:	00c00084 	movi	r3,2
 100d548:	10c00c15 	stw	r3,48(r2)

	metal_mutex_release(&rproc->lock);
 100d54c:	e0bffc17 	ldw	r2,-16(fp)
 100d550:	1009883a 	mov	r4,r2
 100d554:	100bb8c0 	call	100bb8c <metal_mutex_release>
	if (img_info)
 100d558:	e0800217 	ldw	r2,8(fp)
 100d55c:	10000426 	beq	r2,zero,100d570 <remoteproc_load+0xce0>
		*img_info = limg_info;
 100d560:	e0fff117 	ldw	r3,-60(fp)
 100d564:	e0800217 	ldw	r2,8(fp)
 100d568:	10c00015 	stw	r3,0(r2)
 100d56c:	00000506 	br	100d584 <remoteproc_load+0xcf4>
	else
		loader->release(limg_info);
 100d570:	e0bfe917 	ldw	r2,-92(fp)
 100d574:	10800317 	ldw	r2,12(r2)
 100d578:	e0fff117 	ldw	r3,-60(fp)
 100d57c:	1809883a 	mov	r4,r3
 100d580:	103ee83a 	callr	r2
	store_ops->close(store);
 100d584:	e0bfff17 	ldw	r2,-4(fp)
 100d588:	10800117 	ldw	r2,4(r2)
 100d58c:	e13ffe17 	ldw	r4,-8(fp)
 100d590:	103ee83a 	callr	r2
	return 0;
 100d594:	0005883a 	mov	r2,zero
 100d598:	00001806 	br	100d5fc <remoteproc_load+0xd6c>
					&noffset, &nlen, &padding, &nmemsize);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load data failed,0x%lx,%d\r\n",
				  noffset, nlen);
			goto error3;
 100d59c:	0001883a 	nop
 100d5a0:	00000106 	br	100d5a8 <remoteproc_load+0xd18>
					break;
				}
				metal_log(METAL_LOG_ERROR,
					  "post-load image data failed 0x%x,%d\r\n",
					  noffset, nlen);
				goto error3;
 100d5a4:	0001883a 	nop
		loader->release(limg_info);
	store_ops->close(store);
	return 0;

error3:
	if (rsc_table)
 100d5a8:	e0bfec17 	ldw	r2,-80(fp)
 100d5ac:	10000626 	beq	r2,zero,100d5c8 <remoteproc_load+0xd38>
		metal_free_memory(rsc_table);
 100d5b0:	e13fec17 	ldw	r4,-80(fp)
 100d5b4:	100b4f00 	call	100b4f0 <metal_free_memory>
 100d5b8:	00000306 	br	100d5c8 <remoteproc_load+0xd38>
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);

			goto error2;
 100d5bc:	0001883a 	nop
 100d5c0:	00000106 	br	100d5c8 <remoteproc_load+0xd38>
				      NULL, 1);
		if (ret < (int)nlen) {
			metal_log(METAL_LOG_ERROR,
				  "load image data failed 0x%x,%d\r\n",
				  noffset, nlen);
			goto error2;
 100d5c4:	0001883a 	nop

error3:
	if (rsc_table)
		metal_free_memory(rsc_table);
error2:
	loader->release(limg_info);
 100d5c8:	e0bfe917 	ldw	r2,-92(fp)
 100d5cc:	10800317 	ldw	r2,12(r2)
 100d5d0:	e0fff117 	ldw	r3,-60(fp)
 100d5d4:	1809883a 	mov	r4,r3
 100d5d8:	103ee83a 	callr	r2
error1:
	store_ops->close(store);
 100d5dc:	e0bfff17 	ldw	r2,-4(fp)
 100d5e0:	10800117 	ldw	r2,4(r2)
 100d5e4:	e13ffe17 	ldw	r4,-8(fp)
 100d5e8:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100d5ec:	e0bffc17 	ldw	r2,-16(fp)
 100d5f0:	1009883a 	mov	r4,r2
 100d5f4:	100bb8c0 	call	100bb8c <metal_mutex_release>
	return ret;
 100d5f8:	e0bfe817 	ldw	r2,-96(fp)
}
 100d5fc:	e037883a 	mov	sp,fp
 100d600:	dfc00117 	ldw	ra,4(sp)
 100d604:	df000017 	ldw	fp,0(sp)
 100d608:	dec00204 	addi	sp,sp,8
 100d60c:	f800283a 	ret

0100d610 <remoteproc_load_noblock>:
			    const void *img_data, size_t offset, size_t len,
			    void **img_info,
			    metal_phys_addr_t *pa, struct metal_io_region **io,
			    size_t *noffset, size_t *nlen,
			    size_t *nmlen, unsigned char *padding)
{
 100d610:	deffe804 	addi	sp,sp,-96
 100d614:	dfc01715 	stw	ra,92(sp)
 100d618:	df001615 	stw	fp,88(sp)
 100d61c:	df001604 	addi	fp,sp,88
 100d620:	e13ffc15 	stw	r4,-16(fp)
 100d624:	e17ffd15 	stw	r5,-12(fp)
 100d628:	e1bffe15 	stw	r6,-8(fp)
 100d62c:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	struct loader_ops *loader;
	void *limg_info = NULL;
 100d630:	e03ff715 	stw	zero,-36(fp)
	int last_load_state;
	metal_phys_addr_t da, rsc_da;
	size_t rsc_size;
	void *rsc_table = NULL, *lrsc_table = NULL;
 100d634:	e03ff415 	stw	zero,-48(fp)
 100d638:	e03ff515 	stw	zero,-44(fp)

	if (!rproc)
 100d63c:	e0bffc17 	ldw	r2,-16(fp)
 100d640:	1000021e 	bne	r2,zero,100d64c <remoteproc_load_noblock+0x3c>
		return -RPROC_ENODEV;
 100d644:	00bfff44 	movi	r2,-3
 100d648:	00028006 	br	100e04c <remoteproc_load_noblock+0xa3c>

	metal_assert(pa != NULL);
 100d64c:	e0800317 	ldw	r2,12(fp)
 100d650:	1000081e 	bne	r2,zero,100d674 <remoteproc_load_noblock+0x64>
 100d654:	01c040b4 	movhi	r7,258
 100d658:	39d69d04 	addi	r7,r7,23156
 100d65c:	018040b4 	movhi	r6,258
 100d660:	31971c04 	addi	r6,r6,23664
 100d664:	0140a644 	movi	r5,665
 100d668:	010040b4 	movhi	r4,258
 100d66c:	2115f604 	addi	r4,r4,22488
 100d670:	10138940 	call	1013894 <__assert_func>
	metal_assert(io != NULL);
 100d674:	e0800417 	ldw	r2,16(fp)
 100d678:	1000081e 	bne	r2,zero,100d69c <remoteproc_load_noblock+0x8c>
 100d67c:	01c040b4 	movhi	r7,258
 100d680:	39d6a204 	addi	r7,r7,23176
 100d684:	018040b4 	movhi	r6,258
 100d688:	31971c04 	addi	r6,r6,23664
 100d68c:	0140a684 	movi	r5,666
 100d690:	010040b4 	movhi	r4,258
 100d694:	2115f604 	addi	r4,r4,22488
 100d698:	10138940 	call	1013894 <__assert_func>
	metal_assert(noffset != NULL);
 100d69c:	e0800517 	ldw	r2,20(fp)
 100d6a0:	1000081e 	bne	r2,zero,100d6c4 <remoteproc_load_noblock+0xb4>
 100d6a4:	01c040b4 	movhi	r7,258
 100d6a8:	39d6a704 	addi	r7,r7,23196
 100d6ac:	018040b4 	movhi	r6,258
 100d6b0:	31971c04 	addi	r6,r6,23664
 100d6b4:	0140a6c4 	movi	r5,667
 100d6b8:	010040b4 	movhi	r4,258
 100d6bc:	2115f604 	addi	r4,r4,22488
 100d6c0:	10138940 	call	1013894 <__assert_func>
	metal_assert(nlen != NULL);
 100d6c4:	e0800617 	ldw	r2,24(fp)
 100d6c8:	1000081e 	bne	r2,zero,100d6ec <remoteproc_load_noblock+0xdc>
 100d6cc:	01c040b4 	movhi	r7,258
 100d6d0:	39d6ad04 	addi	r7,r7,23220
 100d6d4:	018040b4 	movhi	r6,258
 100d6d8:	31971c04 	addi	r6,r6,23664
 100d6dc:	0140a704 	movi	r5,668
 100d6e0:	010040b4 	movhi	r4,258
 100d6e4:	2115f604 	addi	r4,r4,22488
 100d6e8:	10138940 	call	1013894 <__assert_func>
	metal_assert(nmlen != NULL);
 100d6ec:	e0800717 	ldw	r2,28(fp)
 100d6f0:	1000081e 	bne	r2,zero,100d714 <remoteproc_load_noblock+0x104>
 100d6f4:	01c040b4 	movhi	r7,258
 100d6f8:	39d6b204 	addi	r7,r7,23240
 100d6fc:	018040b4 	movhi	r6,258
 100d700:	31971c04 	addi	r6,r6,23664
 100d704:	0140a744 	movi	r5,669
 100d708:	010040b4 	movhi	r4,258
 100d70c:	2115f604 	addi	r4,r4,22488
 100d710:	10138940 	call	1013894 <__assert_func>
	metal_assert(padding != NULL);
 100d714:	e0800817 	ldw	r2,32(fp)
 100d718:	1000081e 	bne	r2,zero,100d73c <remoteproc_load_noblock+0x12c>
 100d71c:	01c040b4 	movhi	r7,258
 100d720:	39d6b804 	addi	r7,r7,23264
 100d724:	018040b4 	movhi	r6,258
 100d728:	31971c04 	addi	r6,r6,23664
 100d72c:	0140a784 	movi	r5,670
 100d730:	010040b4 	movhi	r4,258
 100d734:	2115f604 	addi	r4,r4,22488
 100d738:	10138940 	call	1013894 <__assert_func>

	metal_mutex_acquire(&rproc->lock);
 100d73c:	e0bffc17 	ldw	r2,-16(fp)
 100d740:	1009883a 	mov	r4,r2
 100d744:	100bb580 	call	100bb58 <metal_mutex_acquire>
	metal_log(METAL_LOG_DEBUG, "%s: check remoteproc status\r\n", __func__);
 100d748:	008060f4 	movhi	r2,387
 100d74c:	10a97a04 	addi	r2,r2,-23064
 100d750:	10800017 	ldw	r2,0(r2)
 100d754:	108001f0 	cmpltui	r2,r2,7
 100d758:	10000d1e 	bne	r2,zero,100d790 <remoteproc_load_noblock+0x180>
 100d75c:	008060f4 	movhi	r2,387
 100d760:	10a97a04 	addi	r2,r2,-23064
 100d764:	10800117 	ldw	r2,4(r2)
 100d768:	10000926 	beq	r2,zero,100d790 <remoteproc_load_noblock+0x180>
 100d76c:	008060f4 	movhi	r2,387
 100d770:	10a97a04 	addi	r2,r2,-23064
 100d774:	10800117 	ldw	r2,4(r2)
 100d778:	018040b4 	movhi	r6,258
 100d77c:	31971c04 	addi	r6,r6,23664
 100d780:	014040b4 	movhi	r5,258
 100d784:	2955c204 	addi	r5,r5,22280
 100d788:	010001c4 	movi	r4,7
 100d78c:	103ee83a 	callr	r2
	/* If remoteproc is not in ready state, cannot load executable */
	if (rproc->state != RPROC_READY) {
 100d790:	e0bffc17 	ldw	r2,-16(fp)
 100d794:	10800c17 	ldw	r2,48(r2)
 100d798:	108000a0 	cmpeqi	r2,r2,2
 100d79c:	1000181e 	bne	r2,zero,100d800 <remoteproc_load_noblock+0x1f0>
		metal_log(METAL_LOG_ERROR,
 100d7a0:	008060f4 	movhi	r2,387
 100d7a4:	10a97a04 	addi	r2,r2,-23064
 100d7a8:	10800017 	ldw	r2,0(r2)
 100d7ac:	108000f0 	cmpltui	r2,r2,3
 100d7b0:	10000e1e 	bne	r2,zero,100d7ec <remoteproc_load_noblock+0x1dc>
 100d7b4:	008060f4 	movhi	r2,387
 100d7b8:	10a97a04 	addi	r2,r2,-23064
 100d7bc:	10800117 	ldw	r2,4(r2)
 100d7c0:	10000a26 	beq	r2,zero,100d7ec <remoteproc_load_noblock+0x1dc>
 100d7c4:	008060f4 	movhi	r2,387
 100d7c8:	10a97a04 	addi	r2,r2,-23064
 100d7cc:	10800117 	ldw	r2,4(r2)
 100d7d0:	e0fffc17 	ldw	r3,-16(fp)
 100d7d4:	18c00c17 	ldw	r3,48(r3)
 100d7d8:	180d883a 	mov	r6,r3
 100d7dc:	014040b4 	movhi	r5,258
 100d7e0:	2955ca04 	addi	r5,r5,22312
 100d7e4:	010000c4 	movi	r4,3
 100d7e8:	103ee83a 	callr	r2
			  "load failure: invalid rproc state %d.\r\n",
			  rproc->state);
		metal_mutex_release(&rproc->lock);
 100d7ec:	e0bffc17 	ldw	r2,-16(fp)
 100d7f0:	1009883a 	mov	r4,r2
 100d7f4:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return -RPROC_EINVAL;
 100d7f8:	00bfff84 	movi	r2,-2
 100d7fc:	00021306 	br	100e04c <remoteproc_load_noblock+0xa3c>
	}

	/* Check executable format to select a parser */
	loader = rproc->loader;
 100d800:	e0bffc17 	ldw	r2,-16(fp)
 100d804:	10800b17 	ldw	r2,44(r2)
 100d808:	e0bff215 	stw	r2,-56(fp)
	if (!loader) {
 100d80c:	e0bff217 	ldw	r2,-56(fp)
 100d810:	10004d1e 	bne	r2,zero,100d948 <remoteproc_load_noblock+0x338>
		metal_log(METAL_LOG_DEBUG, "%s: check loader\r\n", __func__);
 100d814:	008060f4 	movhi	r2,387
 100d818:	10a97a04 	addi	r2,r2,-23064
 100d81c:	10800017 	ldw	r2,0(r2)
 100d820:	108001f0 	cmpltui	r2,r2,7
 100d824:	10000d1e 	bne	r2,zero,100d85c <remoteproc_load_noblock+0x24c>
 100d828:	008060f4 	movhi	r2,387
 100d82c:	10a97a04 	addi	r2,r2,-23064
 100d830:	10800117 	ldw	r2,4(r2)
 100d834:	10000926 	beq	r2,zero,100d85c <remoteproc_load_noblock+0x24c>
 100d838:	008060f4 	movhi	r2,387
 100d83c:	10a97a04 	addi	r2,r2,-23064
 100d840:	10800117 	ldw	r2,4(r2)
 100d844:	018040b4 	movhi	r6,258
 100d848:	31971c04 	addi	r6,r6,23664
 100d84c:	014040b4 	movhi	r5,258
 100d850:	2955ff04 	addi	r5,r5,22524
 100d854:	010001c4 	movi	r4,7
 100d858:	103ee83a 	callr	r2
		if (img_data == NULL || offset != 0 || len == 0) {
 100d85c:	e0bffd17 	ldw	r2,-12(fp)
 100d860:	10000426 	beq	r2,zero,100d874 <remoteproc_load_noblock+0x264>
 100d864:	e0bffe17 	ldw	r2,-8(fp)
 100d868:	1000021e 	bne	r2,zero,100d874 <remoteproc_load_noblock+0x264>
 100d86c:	e0bfff17 	ldw	r2,-4(fp)
 100d870:	1000151e 	bne	r2,zero,100d8c8 <remoteproc_load_noblock+0x2b8>
			metal_log(METAL_LOG_ERROR,
 100d874:	008060f4 	movhi	r2,387
 100d878:	10a97a04 	addi	r2,r2,-23064
 100d87c:	10800017 	ldw	r2,0(r2)
 100d880:	108000f0 	cmpltui	r2,r2,3
 100d884:	10000b1e 	bne	r2,zero,100d8b4 <remoteproc_load_noblock+0x2a4>
 100d888:	008060f4 	movhi	r2,387
 100d88c:	10a97a04 	addi	r2,r2,-23064
 100d890:	10800117 	ldw	r2,4(r2)
 100d894:	10000726 	beq	r2,zero,100d8b4 <remoteproc_load_noblock+0x2a4>
 100d898:	008060f4 	movhi	r2,387
 100d89c:	10a97a04 	addi	r2,r2,-23064
 100d8a0:	10800117 	ldw	r2,4(r2)
 100d8a4:	014040b4 	movhi	r5,258
 100d8a8:	2956be04 	addi	r5,r5,23288
 100d8ac:	010000c4 	movi	r4,3
 100d8b0:	103ee83a 	callr	r2
				  "load failure, invalid inputs, not able to identify image.\r\n");
			metal_mutex_release(&rproc->lock);
 100d8b4:	e0bffc17 	ldw	r2,-16(fp)
 100d8b8:	1009883a 	mov	r4,r2
 100d8bc:	100bb8c0 	call	100bb8c <metal_mutex_release>
			return -RPROC_EINVAL;
 100d8c0:	00bfff84 	movi	r2,-2
 100d8c4:	0001e106 	br	100e04c <remoteproc_load_noblock+0xa3c>
		}
		loader = remoteproc_check_fw_format(img_data, len);
 100d8c8:	e17fff17 	ldw	r5,-4(fp)
 100d8cc:	e13ffd17 	ldw	r4,-12(fp)
 100d8d0:	100bc6c0 	call	100bc6c <remoteproc_check_fw_format>
 100d8d4:	e0bff215 	stw	r2,-56(fp)
		if (!loader) {
 100d8d8:	e0bff217 	ldw	r2,-56(fp)
 100d8dc:	1000171e 	bne	r2,zero,100d93c <remoteproc_load_noblock+0x32c>
			metal_log(METAL_LOG_ERROR,
 100d8e0:	008060f4 	movhi	r2,387
 100d8e4:	10a97a04 	addi	r2,r2,-23064
 100d8e8:	10800017 	ldw	r2,0(r2)
 100d8ec:	108000f0 	cmpltui	r2,r2,3
 100d8f0:	10000b1e 	bne	r2,zero,100d920 <remoteproc_load_noblock+0x310>
 100d8f4:	008060f4 	movhi	r2,387
 100d8f8:	10a97a04 	addi	r2,r2,-23064
 100d8fc:	10800117 	ldw	r2,4(r2)
 100d900:	10000726 	beq	r2,zero,100d920 <remoteproc_load_noblock+0x310>
 100d904:	008060f4 	movhi	r2,387
 100d908:	10a97a04 	addi	r2,r2,-23064
 100d90c:	10800117 	ldw	r2,4(r2)
 100d910:	014040b4 	movhi	r5,258
 100d914:	2956cd04 	addi	r5,r5,23348
 100d918:	010000c4 	movi	r4,3
 100d91c:	103ee83a 	callr	r2
			       "load failure: failed to identify image.\r\n");
			ret = -RPROC_EINVAL;
 100d920:	00bfff84 	movi	r2,-2
 100d924:	e0bff115 	stw	r2,-60(fp)
			metal_mutex_release(&rproc->lock);
 100d928:	e0bffc17 	ldw	r2,-16(fp)
 100d92c:	1009883a 	mov	r4,r2
 100d930:	100bb8c0 	call	100bb8c <metal_mutex_release>
			return -RPROC_EINVAL;
 100d934:	00bfff84 	movi	r2,-2
 100d938:	0001c406 	br	100e04c <remoteproc_load_noblock+0xa3c>
		}
		rproc->loader = loader;
 100d93c:	e0bffc17 	ldw	r2,-16(fp)
 100d940:	e0fff217 	ldw	r3,-56(fp)
 100d944:	10c00b15 	stw	r3,44(r2)
	}
	if (img_info == NULL || *img_info == NULL) {
 100d948:	e0800217 	ldw	r2,8(fp)
 100d94c:	10000326 	beq	r2,zero,100d95c <remoteproc_load_noblock+0x34c>
 100d950:	e0800217 	ldw	r2,8(fp)
 100d954:	10800017 	ldw	r2,0(r2)
 100d958:	1000021e 	bne	r2,zero,100d964 <remoteproc_load_noblock+0x354>
		last_load_state = 0;
 100d95c:	e03ff315 	stw	zero,-52(fp)
 100d960:	00002006 	br	100d9e4 <remoteproc_load_noblock+0x3d4>
	} else {
		limg_info = *img_info;
 100d964:	e0800217 	ldw	r2,8(fp)
 100d968:	10800017 	ldw	r2,0(r2)
 100d96c:	e0bff715 	stw	r2,-36(fp)
		last_load_state = loader->get_load_state(limg_info);
 100d970:	e0bff217 	ldw	r2,-56(fp)
 100d974:	10800517 	ldw	r2,20(r2)
 100d978:	e0fff717 	ldw	r3,-36(fp)
 100d97c:	1809883a 	mov	r4,r3
 100d980:	103ee83a 	callr	r2
 100d984:	e0bff315 	stw	r2,-52(fp)
		if (last_load_state < 0) {
 100d988:	e0bff317 	ldw	r2,-52(fp)
 100d98c:	1000150e 	bge	r2,zero,100d9e4 <remoteproc_load_noblock+0x3d4>
			metal_log(METAL_LOG_ERROR,
 100d990:	008060f4 	movhi	r2,387
 100d994:	10a97a04 	addi	r2,r2,-23064
 100d998:	10800017 	ldw	r2,0(r2)
 100d99c:	108000f0 	cmpltui	r2,r2,3
 100d9a0:	10000b1e 	bne	r2,zero,100d9d0 <remoteproc_load_noblock+0x3c0>
 100d9a4:	008060f4 	movhi	r2,387
 100d9a8:	10a97a04 	addi	r2,r2,-23064
 100d9ac:	10800117 	ldw	r2,4(r2)
 100d9b0:	10000726 	beq	r2,zero,100d9d0 <remoteproc_load_noblock+0x3c0>
 100d9b4:	008060f4 	movhi	r2,387
 100d9b8:	10a97a04 	addi	r2,r2,-23064
 100d9bc:	10800117 	ldw	r2,4(r2)
 100d9c0:	014040b4 	movhi	r5,258
 100d9c4:	2956d804 	addi	r5,r5,23392
 100d9c8:	010000c4 	movi	r4,3
 100d9cc:	103ee83a 	callr	r2
				  "load failure, not able get load state.\r\n");
			metal_mutex_release(&rproc->lock);
 100d9d0:	e0bffc17 	ldw	r2,-16(fp)
 100d9d4:	1009883a 	mov	r4,r2
 100d9d8:	100bb8c0 	call	100bb8c <metal_mutex_release>
			return -RPROC_EINVAL;
 100d9dc:	00bfff84 	movi	r2,-2
 100d9e0:	00019a06 	br	100e04c <remoteproc_load_noblock+0xa3c>
		}
	}
	da = RPROC_LOAD_ANYADDR;
 100d9e4:	00bfffc4 	movi	r2,-1
 100d9e8:	e0bff815 	stw	r2,-32(fp)
	*nlen = 0;
 100d9ec:	e0800617 	ldw	r2,24(fp)
 100d9f0:	10000015 	stw	zero,0(r2)
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0 &&
 100d9f4:	e0bff317 	ldw	r2,-52(fp)
 100d9f8:	1080006c 	andhi	r2,r2,1
 100d9fc:	10004a1e 	bne	r2,zero,100db28 <remoteproc_load_noblock+0x518>
	    (last_load_state & RPROC_LOADER_LOAD_COMPLETE) == 0) {
 100da00:	e0bff317 	ldw	r2,-52(fp)
 100da04:	1080012c 	andhi	r2,r2,4
			return -RPROC_EINVAL;
		}
	}
	da = RPROC_LOAD_ANYADDR;
	*nlen = 0;
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0 &&
 100da08:	1000471e 	bne	r2,zero,100db28 <remoteproc_load_noblock+0x518>
	    (last_load_state & RPROC_LOADER_LOAD_COMPLETE) == 0) {
		/* Get the mandatory executable headers */
		ret = loader->load_header(img_data, offset, len,
 100da0c:	e0bff217 	ldw	r2,-56(fp)
 100da10:	10800017 	ldw	r2,0(r2)
 100da14:	e13ff704 	addi	r4,fp,-36
 100da18:	e0c00617 	ldw	r3,24(fp)
 100da1c:	d8c00215 	stw	r3,8(sp)
 100da20:	e0c00517 	ldw	r3,20(fp)
 100da24:	d8c00115 	stw	r3,4(sp)
 100da28:	e0fff317 	ldw	r3,-52(fp)
 100da2c:	d8c00015 	stw	r3,0(sp)
 100da30:	200f883a 	mov	r7,r4
 100da34:	e1bfff17 	ldw	r6,-4(fp)
 100da38:	e17ffe17 	ldw	r5,-8(fp)
 100da3c:	e13ffd17 	ldw	r4,-12(fp)
 100da40:	103ee83a 	callr	r2
 100da44:	e0bff115 	stw	r2,-60(fp)
					  &limg_info, last_load_state,
					  noffset, nlen);
		metal_log(METAL_LOG_DEBUG,
 100da48:	008060f4 	movhi	r2,387
 100da4c:	10a97a04 	addi	r2,r2,-23064
 100da50:	10800017 	ldw	r2,0(r2)
 100da54:	108001f0 	cmpltui	r2,r2,7
 100da58:	1000161e 	bne	r2,zero,100dab4 <remoteproc_load_noblock+0x4a4>
 100da5c:	008060f4 	movhi	r2,387
 100da60:	10a97a04 	addi	r2,r2,-23064
 100da64:	10800117 	ldw	r2,4(r2)
 100da68:	10001226 	beq	r2,zero,100dab4 <remoteproc_load_noblock+0x4a4>
 100da6c:	008060f4 	movhi	r2,387
 100da70:	10a97a04 	addi	r2,r2,-23064
 100da74:	10800117 	ldw	r2,4(r2)
 100da78:	e0c00517 	ldw	r3,20(fp)
 100da7c:	18c00017 	ldw	r3,0(r3)
 100da80:	e1000617 	ldw	r4,24(fp)
 100da84:	21000017 	ldw	r4,0(r4)
 100da88:	d9000215 	stw	r4,8(sp)
 100da8c:	d8c00115 	stw	r3,4(sp)
 100da90:	e0ffff17 	ldw	r3,-4(fp)
 100da94:	d8c00015 	stw	r3,0(sp)
 100da98:	e1fffe17 	ldw	r7,-8(fp)
 100da9c:	018040b4 	movhi	r6,258
 100daa0:	31971c04 	addi	r6,r6,23664
 100daa4:	014040b4 	movhi	r5,258
 100daa8:	29561504 	addi	r5,r5,22612
 100daac:	010001c4 	movi	r4,7
 100dab0:	103ee83a 	callr	r2
			  "%s, load header 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
 100dab4:	e0bff117 	ldw	r2,-60(fp)
 100dab8:	1000130e 	bge	r2,zero,100db08 <remoteproc_load_noblock+0x4f8>
			metal_log(METAL_LOG_ERROR,
 100dabc:	008060f4 	movhi	r2,387
 100dac0:	10a97a04 	addi	r2,r2,-23064
 100dac4:	10800017 	ldw	r2,0(r2)
 100dac8:	108000f0 	cmpltui	r2,r2,3
 100dacc:	1001531e 	bne	r2,zero,100e01c <remoteproc_load_noblock+0xa0c>
 100dad0:	008060f4 	movhi	r2,387
 100dad4:	10a97a04 	addi	r2,r2,-23064
 100dad8:	10800117 	ldw	r2,4(r2)
 100dadc:	10014f26 	beq	r2,zero,100e01c <remoteproc_load_noblock+0xa0c>
 100dae0:	008060f4 	movhi	r2,387
 100dae4:	10a97a04 	addi	r2,r2,-23064
 100dae8:	10800117 	ldw	r2,4(r2)
 100daec:	e1ffff17 	ldw	r7,-4(fp)
 100daf0:	e1bffe17 	ldw	r6,-8(fp)
 100daf4:	014040b4 	movhi	r5,258
 100daf8:	29562104 	addi	r5,r5,22660
 100dafc:	010000c4 	movi	r4,3
 100db00:	103ee83a 	callr	r2
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
 100db04:	00014506 	br	100e01c <remoteproc_load_noblock+0xa0c>
		}
		last_load_state = ret;
 100db08:	e0bff117 	ldw	r2,-60(fp)
 100db0c:	e0bff315 	stw	r2,-52(fp)
		if (*nlen != 0 &&
 100db10:	e0800617 	ldw	r2,24(fp)
 100db14:	10800017 	ldw	r2,0(r2)
 100db18:	10000326 	beq	r2,zero,100db28 <remoteproc_load_noblock+0x518>
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
 100db1c:	e0bff317 	ldw	r2,-52(fp)
 100db20:	1080006c 	andhi	r2,r2,1
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
		}
		last_load_state = ret;
		if (*nlen != 0 &&
 100db24:	10012a26 	beq	r2,zero,100dfd0 <remoteproc_load_noblock+0x9c0>
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) != 0 ||
 100db28:	e0bff317 	ldw	r2,-52(fp)
 100db2c:	1080006c 	andhi	r2,r2,1
 100db30:	1000031e 	bne	r2,zero,100db40 <remoteproc_load_noblock+0x530>
	    (last_load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
 100db34:	e0bff317 	ldw	r2,-52(fp)
 100db38:	108000ac 	andhi	r2,r2,2
		last_load_state = ret;
		if (*nlen != 0 &&
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) != 0 ||
 100db3c:	10007726 	beq	r2,zero,100dd1c <remoteproc_load_noblock+0x70c>
	    (last_load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
		/* Enough information to know which target memory for
		 * which data.
		 */
		ret = loader->load_data(rproc, img_data, offset, len,
 100db40:	e0bff217 	ldw	r2,-56(fp)
 100db44:	10800117 	ldw	r2,4(r2)
 100db48:	e0c00717 	ldw	r3,28(fp)
 100db4c:	d8c00615 	stw	r3,24(sp)
 100db50:	e0c00817 	ldw	r3,32(fp)
 100db54:	d8c00515 	stw	r3,20(sp)
 100db58:	e0c00617 	ldw	r3,24(fp)
 100db5c:	d8c00415 	stw	r3,16(sp)
 100db60:	e0c00517 	ldw	r3,20(fp)
 100db64:	d8c00315 	stw	r3,12(sp)
 100db68:	e0fff804 	addi	r3,fp,-32
 100db6c:	d8c00215 	stw	r3,8(sp)
 100db70:	e0fff317 	ldw	r3,-52(fp)
 100db74:	d8c00115 	stw	r3,4(sp)
 100db78:	e0fff704 	addi	r3,fp,-36
 100db7c:	d8c00015 	stw	r3,0(sp)
 100db80:	e1ffff17 	ldw	r7,-4(fp)
 100db84:	e1bffe17 	ldw	r6,-8(fp)
 100db88:	e17ffd17 	ldw	r5,-12(fp)
 100db8c:	e13ffc17 	ldw	r4,-16(fp)
 100db90:	103ee83a 	callr	r2
 100db94:	e0bff115 	stw	r2,-60(fp)
					&limg_info, last_load_state, &da,
					noffset, nlen, padding, nmlen);
		metal_log(METAL_LOG_DEBUG,
 100db98:	008060f4 	movhi	r2,387
 100db9c:	10a97a04 	addi	r2,r2,-23064
 100dba0:	10800017 	ldw	r2,0(r2)
 100dba4:	108001f0 	cmpltui	r2,r2,7
 100dba8:	1000161e 	bne	r2,zero,100dc04 <remoteproc_load_noblock+0x5f4>
 100dbac:	008060f4 	movhi	r2,387
 100dbb0:	10a97a04 	addi	r2,r2,-23064
 100dbb4:	10800117 	ldw	r2,4(r2)
 100dbb8:	10001226 	beq	r2,zero,100dc04 <remoteproc_load_noblock+0x5f4>
 100dbbc:	008060f4 	movhi	r2,387
 100dbc0:	10a97a04 	addi	r2,r2,-23064
 100dbc4:	10800117 	ldw	r2,4(r2)
 100dbc8:	e0c00517 	ldw	r3,20(fp)
 100dbcc:	18c00017 	ldw	r3,0(r3)
 100dbd0:	e1000617 	ldw	r4,24(fp)
 100dbd4:	21000017 	ldw	r4,0(r4)
 100dbd8:	d9000215 	stw	r4,8(sp)
 100dbdc:	d8c00115 	stw	r3,4(sp)
 100dbe0:	e0ffff17 	ldw	r3,-4(fp)
 100dbe4:	d8c00015 	stw	r3,0(sp)
 100dbe8:	e1fffe17 	ldw	r7,-8(fp)
 100dbec:	018040b4 	movhi	r6,258
 100dbf0:	31971c04 	addi	r6,r6,23664
 100dbf4:	014040b4 	movhi	r5,258
 100dbf8:	2956e304 	addi	r5,r5,23436
 100dbfc:	010001c4 	movi	r4,7
 100dc00:	103ee83a 	callr	r2
			  "%s, load data 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
 100dc04:	e0bff117 	ldw	r2,-60(fp)
 100dc08:	1000130e 	bge	r2,zero,100dc58 <remoteproc_load_noblock+0x648>
			metal_log(METAL_LOG_ERROR,
 100dc0c:	008060f4 	movhi	r2,387
 100dc10:	10a97a04 	addi	r2,r2,-23064
 100dc14:	10800017 	ldw	r2,0(r2)
 100dc18:	108000f0 	cmpltui	r2,r2,3
 100dc1c:	1001011e 	bne	r2,zero,100e024 <remoteproc_load_noblock+0xa14>
 100dc20:	008060f4 	movhi	r2,387
 100dc24:	10a97a04 	addi	r2,r2,-23064
 100dc28:	10800117 	ldw	r2,4(r2)
 100dc2c:	1000fd26 	beq	r2,zero,100e024 <remoteproc_load_noblock+0xa14>
 100dc30:	008060f4 	movhi	r2,387
 100dc34:	10a97a04 	addi	r2,r2,-23064
 100dc38:	10800117 	ldw	r2,4(r2)
 100dc3c:	e1ffff17 	ldw	r7,-4(fp)
 100dc40:	e1bffe17 	ldw	r6,-8(fp)
 100dc44:	014040b4 	movhi	r5,258
 100dc48:	29563904 	addi	r5,r5,22756
 100dc4c:	010000c4 	movi	r4,3
 100dc50:	103ee83a 	callr	r2
				  "load data failed,0x%lx,%d\r\n",
				  offset, len);
			goto error1;
 100dc54:	0000f306 	br	100e024 <remoteproc_load_noblock+0xa14>
		}
		last_load_state = ret;
 100dc58:	e0bff117 	ldw	r2,-60(fp)
 100dc5c:	e0bff315 	stw	r2,-52(fp)
		if (da != RPROC_LOAD_ANYADDR) {
 100dc60:	e0bff817 	ldw	r2,-32(fp)
 100dc64:	10bfffe0 	cmpeqi	r2,r2,-1
 100dc68:	1000291e 	bne	r2,zero,100dd10 <remoteproc_load_noblock+0x700>
			/* get the I/O region from remoteproc */
			*pa = METAL_BAD_PHYS;
 100dc6c:	e0800317 	ldw	r2,12(fp)
 100dc70:	00ffffc4 	movi	r3,-1
 100dc74:	10c00015 	stw	r3,0(r2)
			(void)remoteproc_mmap(rproc, pa, &da, *nmlen, 0, io);
 100dc78:	e0800717 	ldw	r2,28(fp)
 100dc7c:	11000017 	ldw	r4,0(r2)
 100dc80:	e0fff804 	addi	r3,fp,-32
 100dc84:	e0800417 	ldw	r2,16(fp)
 100dc88:	d8800115 	stw	r2,4(sp)
 100dc8c:	d8000015 	stw	zero,0(sp)
 100dc90:	200f883a 	mov	r7,r4
 100dc94:	180d883a 	mov	r6,r3
 100dc98:	e1400317 	ldw	r5,12(fp)
 100dc9c:	e13ffc17 	ldw	r4,-16(fp)
 100dca0:	100c6c80 	call	100c6c8 <remoteproc_mmap>
			if (*pa == METAL_BAD_PHYS || io == NULL) {
 100dca4:	e0800317 	ldw	r2,12(fp)
 100dca8:	10800017 	ldw	r2,0(r2)
 100dcac:	10bfffe0 	cmpeqi	r2,r2,-1
 100dcb0:	1000021e 	bne	r2,zero,100dcbc <remoteproc_load_noblock+0x6ac>
 100dcb4:	e0800417 	ldw	r2,16(fp)
 100dcb8:	1000151e 	bne	r2,zero,100dd10 <remoteproc_load_noblock+0x700>
				metal_log(METAL_LOG_ERROR,
 100dcbc:	008060f4 	movhi	r2,387
 100dcc0:	10a97a04 	addi	r2,r2,-23064
 100dcc4:	10800017 	ldw	r2,0(r2)
 100dcc8:	108000f0 	cmpltui	r2,r2,3
 100dccc:	10000d1e 	bne	r2,zero,100dd04 <remoteproc_load_noblock+0x6f4>
 100dcd0:	008060f4 	movhi	r2,387
 100dcd4:	10a97a04 	addi	r2,r2,-23064
 100dcd8:	10800117 	ldw	r2,4(r2)
 100dcdc:	10000926 	beq	r2,zero,100dd04 <remoteproc_load_noblock+0x6f4>
 100dce0:	008060f4 	movhi	r2,387
 100dce4:	10a97a04 	addi	r2,r2,-23064
 100dce8:	10800117 	ldw	r2,4(r2)
 100dcec:	e0fff817 	ldw	r3,-32(fp)
 100dcf0:	180d883a 	mov	r6,r3
 100dcf4:	014040b4 	movhi	r5,258
 100dcf8:	29565404 	addi	r5,r5,22864
 100dcfc:	010000c4 	movi	r4,3
 100dd00:	103ee83a 	callr	r2
					  "load failed, no mapping for 0x%llx.\r\n",
					  da);
				ret = -RPROC_EINVAL;
 100dd04:	00bfff84 	movi	r2,-2
 100dd08:	e0bff115 	stw	r2,-60(fp)
				goto error1;
 100dd0c:	0000c606 	br	100e028 <remoteproc_load_noblock+0xa18>
			}
		}
		if (*nlen != 0)
 100dd10:	e0800617 	ldw	r2,24(fp)
 100dd14:	10800017 	ldw	r2,0(r2)
 100dd18:	1000af1e 	bne	r2,zero,100dfd8 <remoteproc_load_noblock+0x9c8>
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0) {
 100dd1c:	e0bff317 	ldw	r2,-52(fp)
 100dd20:	1080012c 	andhi	r2,r2,4
 100dd24:	1000ad26 	beq	r2,zero,100dfdc <remoteproc_load_noblock+0x9cc>
		/* Get resource table */
		size_t rsc_offset;
		size_t rsc_io_offset;

		ret = loader->locate_rsc_table(limg_info, &rsc_da,
 100dd28:	e0bff217 	ldw	r2,-56(fp)
 100dd2c:	10800217 	ldw	r2,8(r2)
 100dd30:	e0fff717 	ldw	r3,-36(fp)
 100dd34:	e1bffa04 	addi	r6,fp,-24
 100dd38:	e17ffb04 	addi	r5,fp,-20
 100dd3c:	e13ff904 	addi	r4,fp,-28
 100dd40:	300f883a 	mov	r7,r6
 100dd44:	280d883a 	mov	r6,r5
 100dd48:	200b883a 	mov	r5,r4
 100dd4c:	1809883a 	mov	r4,r3
 100dd50:	103ee83a 	callr	r2
 100dd54:	e0bff115 	stw	r2,-60(fp)
					       &rsc_offset, &rsc_size);
		if (ret == 0 && rsc_size > 0) {
 100dd58:	e0bff117 	ldw	r2,-60(fp)
 100dd5c:	1000931e 	bne	r2,zero,100dfac <remoteproc_load_noblock+0x99c>
 100dd60:	e0bffa17 	ldw	r2,-24(fp)
 100dd64:	10009126 	beq	r2,zero,100dfac <remoteproc_load_noblock+0x99c>
			lrsc_table = metal_allocate_memory(rsc_size);
 100dd68:	e0bffa17 	ldw	r2,-24(fp)
 100dd6c:	1009883a 	mov	r4,r2
 100dd70:	100b4c00 	call	100b4c0 <metal_allocate_memory>
 100dd74:	e0bff515 	stw	r2,-44(fp)
			if (lrsc_table == NULL) {
 100dd78:	e0bff517 	ldw	r2,-44(fp)
 100dd7c:	1000031e 	bne	r2,zero,100dd8c <remoteproc_load_noblock+0x77c>
				ret = -RPROC_ENOMEM;
 100dd80:	00bfffc4 	movi	r2,-1
 100dd84:	e0bff115 	stw	r2,-60(fp)
				goto error1;
 100dd88:	0000a706 	br	100e028 <remoteproc_load_noblock+0xa18>
			}
			rsc_table = remoteproc_mmap(rproc, NULL, &rsc_da,
 100dd8c:	e13ffa17 	ldw	r4,-24(fp)
 100dd90:	e0fff904 	addi	r3,fp,-28
 100dd94:	e0800417 	ldw	r2,16(fp)
 100dd98:	d8800115 	stw	r2,4(sp)
 100dd9c:	d8000015 	stw	zero,0(sp)
 100dda0:	200f883a 	mov	r7,r4
 100dda4:	180d883a 	mov	r6,r3
 100dda8:	000b883a 	mov	r5,zero
 100ddac:	e13ffc17 	ldw	r4,-16(fp)
 100ddb0:	100c6c80 	call	100c6c8 <remoteproc_mmap>
 100ddb4:	e0bff415 	stw	r2,-48(fp)
						    rsc_size, 0, io);
			if (*io == NULL) {
 100ddb8:	e0800417 	ldw	r2,16(fp)
 100ddbc:	10800017 	ldw	r2,0(r2)
 100ddc0:	1000131e 	bne	r2,zero,100de10 <remoteproc_load_noblock+0x800>
				metal_log(METAL_LOG_ERROR,
 100ddc4:	008060f4 	movhi	r2,387
 100ddc8:	10a97a04 	addi	r2,r2,-23064
 100ddcc:	10800017 	ldw	r2,0(r2)
 100ddd0:	108000f0 	cmpltui	r2,r2,3
 100ddd4:	10000b1e 	bne	r2,zero,100de04 <remoteproc_load_noblock+0x7f4>
 100ddd8:	008060f4 	movhi	r2,387
 100dddc:	10a97a04 	addi	r2,r2,-23064
 100dde0:	10800117 	ldw	r2,4(r2)
 100dde4:	10000726 	beq	r2,zero,100de04 <remoteproc_load_noblock+0x7f4>
 100dde8:	008060f4 	movhi	r2,387
 100ddec:	10a97a04 	addi	r2,r2,-23064
 100ddf0:	10800117 	ldw	r2,4(r2)
 100ddf4:	014040b4 	movhi	r5,258
 100ddf8:	2956ef04 	addi	r5,r5,23484
 100ddfc:	010000c4 	movi	r4,3
 100de00:	103ee83a 	callr	r2
					  "load failed: failed to mmap rsc\r\n");
				metal_free_memory(lrsc_table);
 100de04:	e13ff517 	ldw	r4,-44(fp)
 100de08:	100b4f00 	call	100b4f0 <metal_free_memory>
				goto error1;
 100de0c:	00008606 	br	100e028 <remoteproc_load_noblock+0xa18>
			}
			rsc_io_offset = metal_io_virt_to_offset(*io, rsc_table);
 100de10:	e0800417 	ldw	r2,16(fp)
 100de14:	10800017 	ldw	r2,0(r2)
 100de18:	e17ff417 	ldw	r5,-48(fp)
 100de1c:	1009883a 	mov	r4,r2
 100de20:	100b8440 	call	100b844 <metal_io_virt_to_offset>
 100de24:	e0bff615 	stw	r2,-40(fp)
			ret = metal_io_block_read(*io, rsc_io_offset,
 100de28:	e0800417 	ldw	r2,16(fp)
 100de2c:	10800017 	ldw	r2,0(r2)
 100de30:	e0fffa17 	ldw	r3,-24(fp)
 100de34:	180f883a 	mov	r7,r3
 100de38:	e1bff517 	ldw	r6,-44(fp)
 100de3c:	e17ff617 	ldw	r5,-40(fp)
 100de40:	1009883a 	mov	r4,r2
 100de44:	1007bd40 	call	1007bd4 <metal_io_block_read>
 100de48:	e0bff115 	stw	r2,-60(fp)
						  lrsc_table, rsc_size);
			if (ret != (int)rsc_size) {
 100de4c:	e0bffa17 	ldw	r2,-24(fp)
 100de50:	1007883a 	mov	r3,r2
 100de54:	e0bff117 	ldw	r2,-60(fp)
 100de58:	10c01326 	beq	r2,r3,100dea8 <remoteproc_load_noblock+0x898>
				metal_log(METAL_LOG_ERROR,
 100de5c:	008060f4 	movhi	r2,387
 100de60:	10a97a04 	addi	r2,r2,-23064
 100de64:	10800017 	ldw	r2,0(r2)
 100de68:	108000f0 	cmpltui	r2,r2,3
 100de6c:	10000b1e 	bne	r2,zero,100de9c <remoteproc_load_noblock+0x88c>
 100de70:	008060f4 	movhi	r2,387
 100de74:	10a97a04 	addi	r2,r2,-23064
 100de78:	10800117 	ldw	r2,4(r2)
 100de7c:	10000726 	beq	r2,zero,100de9c <remoteproc_load_noblock+0x88c>
 100de80:	008060f4 	movhi	r2,387
 100de84:	10a97a04 	addi	r2,r2,-23064
 100de88:	10800117 	ldw	r2,4(r2)
 100de8c:	014040b4 	movhi	r5,258
 100de90:	2956f804 	addi	r5,r5,23520
 100de94:	010000c4 	movi	r4,3
 100de98:	103ee83a 	callr	r2
					  "load failed: failed to get rsc\r\n");
				metal_free_memory(lrsc_table);
 100de9c:	e13ff517 	ldw	r4,-44(fp)
 100dea0:	100b4f00 	call	100b4f0 <metal_free_memory>
				goto error1;
 100dea4:	00006006 	br	100e028 <remoteproc_load_noblock+0xa18>
			}
			/* parse resource table */
			ret = remoteproc_parse_rsc_table(rproc, lrsc_table,
 100dea8:	e0bffa17 	ldw	r2,-24(fp)
 100deac:	100d883a 	mov	r6,r2
 100deb0:	e17ff517 	ldw	r5,-44(fp)
 100deb4:	e13ffc17 	ldw	r4,-16(fp)
 100deb8:	100c02c0 	call	100c02c <remoteproc_parse_rsc_table>
 100debc:	e0bff115 	stw	r2,-60(fp)
							 rsc_size);
			if (ret < 0) {
 100dec0:	e0bff117 	ldw	r2,-60(fp)
 100dec4:	1000140e 	bge	r2,zero,100df18 <remoteproc_load_noblock+0x908>
				metal_log(METAL_LOG_ERROR,
 100dec8:	008060f4 	movhi	r2,387
 100decc:	10a97a04 	addi	r2,r2,-23064
 100ded0:	10800017 	ldw	r2,0(r2)
 100ded4:	108000f0 	cmpltui	r2,r2,3
 100ded8:	10000b1e 	bne	r2,zero,100df08 <remoteproc_load_noblock+0x8f8>
 100dedc:	008060f4 	movhi	r2,387
 100dee0:	10a97a04 	addi	r2,r2,-23064
 100dee4:	10800117 	ldw	r2,4(r2)
 100dee8:	10000726 	beq	r2,zero,100df08 <remoteproc_load_noblock+0x8f8>
 100deec:	008060f4 	movhi	r2,387
 100def0:	10a97a04 	addi	r2,r2,-23064
 100def4:	10800117 	ldw	r2,4(r2)
 100def8:	014040b4 	movhi	r5,258
 100defc:	29570104 	addi	r5,r5,23556
 100df00:	010000c4 	movi	r4,3
 100df04:	103ee83a 	callr	r2
					  "load failed: failed to parse rsc\r\n");
				metal_free_memory(lrsc_table);
 100df08:	e13ff517 	ldw	r4,-44(fp)
 100df0c:	100b4f00 	call	100b4f0 <metal_free_memory>
				goto error1;
 100df10:	0001883a 	nop
 100df14:	00004406 	br	100e028 <remoteproc_load_noblock+0xa18>
			}
			/* Update resource table */
			ret = metal_io_block_write(*io, rsc_io_offset,
 100df18:	e0800417 	ldw	r2,16(fp)
 100df1c:	10800017 	ldw	r2,0(r2)
 100df20:	e0fffa17 	ldw	r3,-24(fp)
 100df24:	180f883a 	mov	r7,r3
 100df28:	e1bff517 	ldw	r6,-44(fp)
 100df2c:	e17ff617 	ldw	r5,-40(fp)
 100df30:	1009883a 	mov	r4,r2
 100df34:	1007d880 	call	1007d88 <metal_io_block_write>
 100df38:	e0bff115 	stw	r2,-60(fp)
						  lrsc_table, rsc_size);
			if (ret != (int)rsc_size) {
 100df3c:	e0bffa17 	ldw	r2,-24(fp)
 100df40:	1007883a 	mov	r3,r2
 100df44:	e0bff117 	ldw	r2,-60(fp)
 100df48:	10c01026 	beq	r2,r3,100df8c <remoteproc_load_noblock+0x97c>
				metal_log(METAL_LOG_WARNING,
 100df4c:	008060f4 	movhi	r2,387
 100df50:	10a97a04 	addi	r2,r2,-23064
 100df54:	10800017 	ldw	r2,0(r2)
 100df58:	10800130 	cmpltui	r2,r2,4
 100df5c:	10000b1e 	bne	r2,zero,100df8c <remoteproc_load_noblock+0x97c>
 100df60:	008060f4 	movhi	r2,387
 100df64:	10a97a04 	addi	r2,r2,-23064
 100df68:	10800117 	ldw	r2,4(r2)
 100df6c:	10000726 	beq	r2,zero,100df8c <remoteproc_load_noblock+0x97c>
 100df70:	008060f4 	movhi	r2,387
 100df74:	10a97a04 	addi	r2,r2,-23064
 100df78:	10800117 	ldw	r2,4(r2)
 100df7c:	014040b4 	movhi	r5,258
 100df80:	29570a04 	addi	r5,r5,23592
 100df84:	01000104 	movi	r4,4
 100df88:	103ee83a 	callr	r2
					  "load executable, failed to update rsc\r\n");
			}
			rproc->rsc_table = rsc_table;
 100df8c:	e0bffc17 	ldw	r2,-16(fp)
 100df90:	e0fff417 	ldw	r3,-48(fp)
 100df94:	10c00115 	stw	r3,4(r2)
			rproc->rsc_len = rsc_size;
 100df98:	e0fffa17 	ldw	r3,-24(fp)
 100df9c:	e0bffc17 	ldw	r2,-16(fp)
 100dfa0:	10c00215 	stw	r3,8(r2)
			metal_free_memory(lrsc_table);
 100dfa4:	e13ff517 	ldw	r4,-44(fp)
 100dfa8:	100b4f00 	call	100b4f0 <metal_free_memory>
		}

		/* get entry point from the firmware */
		rproc->bootaddr = loader->get_entry(limg_info);
 100dfac:	e0bff217 	ldw	r2,-56(fp)
 100dfb0:	10800417 	ldw	r2,16(r2)
 100dfb4:	e0fff717 	ldw	r3,-36(fp)
 100dfb8:	1809883a 	mov	r4,r3
 100dfbc:	103ee83a 	callr	r2
 100dfc0:	1007883a 	mov	r3,r2
 100dfc4:	e0bffc17 	ldw	r2,-16(fp)
 100dfc8:	10c00a15 	stw	r3,40(r2)
 100dfcc:	00000306 	br	100dfdc <remoteproc_load_noblock+0x9cc>
			goto error1;
		}
		last_load_state = ret;
		if (*nlen != 0 &&
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
 100dfd0:	0001883a 	nop
 100dfd4:	00000106 	br	100dfdc <remoteproc_load_noblock+0x9cc>
				ret = -RPROC_EINVAL;
				goto error1;
			}
		}
		if (*nlen != 0)
			goto out;
 100dfd8:	0001883a 	nop

		/* get entry point from the firmware */
		rproc->bootaddr = loader->get_entry(limg_info);
	}
out:
	if (img_info != NULL)
 100dfdc:	e0800217 	ldw	r2,8(fp)
 100dfe0:	10000426 	beq	r2,zero,100dff4 <remoteproc_load_noblock+0x9e4>
		*img_info = limg_info;
 100dfe4:	e0fff717 	ldw	r3,-36(fp)
 100dfe8:	e0800217 	ldw	r2,8(fp)
 100dfec:	10c00015 	stw	r3,0(r2)
 100dff0:	00000506 	br	100e008 <remoteproc_load_noblock+0x9f8>
	else
		loader->release(limg_info);
 100dff4:	e0bff217 	ldw	r2,-56(fp)
 100dff8:	10800317 	ldw	r2,12(r2)
 100dffc:	e0fff717 	ldw	r3,-36(fp)
 100e000:	1809883a 	mov	r4,r3
 100e004:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100e008:	e0bffc17 	ldw	r2,-16(fp)
 100e00c:	1009883a 	mov	r4,r2
 100e010:	100bb8c0 	call	100bb8c <metal_mutex_release>
	return 0;
 100e014:	0005883a 	mov	r2,zero
 100e018:	00000c06 	br	100e04c <remoteproc_load_noblock+0xa3c>
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
 100e01c:	0001883a 	nop
 100e020:	00000106 	br	100e028 <remoteproc_load_noblock+0xa18>
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load data failed,0x%lx,%d\r\n",
				  offset, len);
			goto error1;
 100e024:	0001883a 	nop
		loader->release(limg_info);
	metal_mutex_release(&rproc->lock);
	return 0;

error1:
	loader->release(limg_info);
 100e028:	e0bff217 	ldw	r2,-56(fp)
 100e02c:	10800317 	ldw	r2,12(r2)
 100e030:	e0fff717 	ldw	r3,-36(fp)
 100e034:	1809883a 	mov	r4,r3
 100e038:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100e03c:	e0bffc17 	ldw	r2,-16(fp)
 100e040:	1009883a 	mov	r4,r2
 100e044:	100bb8c0 	call	100bb8c <metal_mutex_release>
	return ret;
 100e048:	e0bff117 	ldw	r2,-60(fp)
}
 100e04c:	e037883a 	mov	sp,fp
 100e050:	dfc00117 	ldw	ra,4(sp)
 100e054:	df000017 	ldw	fp,0(sp)
 100e058:	dec00204 	addi	sp,sp,8
 100e05c:	f800283a 	ret

0100e060 <remoteproc_allocate_id>:

unsigned int remoteproc_allocate_id(struct remoteproc *rproc,
				    unsigned int start,
				    unsigned int end)
{
 100e060:	defffa04 	addi	sp,sp,-24
 100e064:	dfc00515 	stw	ra,20(sp)
 100e068:	df000415 	stw	fp,16(sp)
 100e06c:	df000404 	addi	fp,sp,16
 100e070:	e13ffd15 	stw	r4,-12(fp)
 100e074:	e17ffe15 	stw	r5,-8(fp)
 100e078:	e1bfff15 	stw	r6,-4(fp)
	unsigned int notifyid;

	if (start == RSC_NOTIFY_ID_ANY)
 100e07c:	e0bffe17 	ldw	r2,-8(fp)
 100e080:	10bfffd8 	cmpnei	r2,r2,-1
 100e084:	1000011e 	bne	r2,zero,100e08c <remoteproc_allocate_id+0x2c>
		start = 0;
 100e088:	e03ffe15 	stw	zero,-8(fp)
	if (end == 0)
 100e08c:	e0bfff17 	ldw	r2,-4(fp)
 100e090:	1000021e 	bne	r2,zero,100e09c <remoteproc_allocate_id+0x3c>
		end = METAL_BITS_PER_ULONG;
 100e094:	00800804 	movi	r2,32
 100e098:	e0bfff15 	stw	r2,-4(fp)

	notifyid = metal_bitmap_next_clear_bit(&rproc->bitmap,
 100e09c:	e0bffd17 	ldw	r2,-12(fp)
 100e0a0:	10800804 	addi	r2,r2,32
 100e0a4:	e1bfff17 	ldw	r6,-4(fp)
 100e0a8:	e17ffe17 	ldw	r5,-8(fp)
 100e0ac:	1009883a 	mov	r4,r2
 100e0b0:	100b6340 	call	100b634 <metal_bitmap_next_clear_bit>
 100e0b4:	e0bffc15 	stw	r2,-16(fp)
					       start, end);
	if (notifyid != end)
 100e0b8:	e0fffc17 	ldw	r3,-16(fp)
 100e0bc:	e0bfff17 	ldw	r2,-4(fp)
 100e0c0:	18800726 	beq	r3,r2,100e0e0 <remoteproc_allocate_id+0x80>
		metal_bitmap_set_bit(&rproc->bitmap, notifyid);
 100e0c4:	e0bffd17 	ldw	r2,-12(fp)
 100e0c8:	10800804 	addi	r2,r2,32
 100e0cc:	e0fffc17 	ldw	r3,-16(fp)
 100e0d0:	180b883a 	mov	r5,r3
 100e0d4:	1009883a 	mov	r4,r2
 100e0d8:	100b5240 	call	100b524 <metal_bitmap_set_bit>
 100e0dc:	00000206 	br	100e0e8 <remoteproc_allocate_id+0x88>
	else
		notifyid = RSC_NOTIFY_ID_ANY;
 100e0e0:	00bfffc4 	movi	r2,-1
 100e0e4:	e0bffc15 	stw	r2,-16(fp)

	return notifyid;
 100e0e8:	e0bffc17 	ldw	r2,-16(fp)
}
 100e0ec:	e037883a 	mov	sp,fp
 100e0f0:	dfc00117 	ldw	ra,4(sp)
 100e0f4:	df000017 	ldw	fp,0(sp)
 100e0f8:	dec00204 	addi	sp,sp,8
 100e0fc:	f800283a 	ret

0100e100 <remoteproc_virtio_notify>:

static int remoteproc_virtio_notify(void *priv, uint32_t id)
{
 100e100:	defffb04 	addi	sp,sp,-20
 100e104:	dfc00415 	stw	ra,16(sp)
 100e108:	df000315 	stw	fp,12(sp)
 100e10c:	df000304 	addi	fp,sp,12
 100e110:	e13ffe15 	stw	r4,-8(fp)
 100e114:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc *rproc = priv;
 100e118:	e0bffe17 	ldw	r2,-8(fp)
 100e11c:	e0bffd15 	stw	r2,-12(fp)

	return rproc->ops->notify(rproc, id);
 100e120:	e0bffd17 	ldw	r2,-12(fp)
 100e124:	10800917 	ldw	r2,36(r2)
 100e128:	10800817 	ldw	r2,32(r2)
 100e12c:	e17fff17 	ldw	r5,-4(fp)
 100e130:	e13ffd17 	ldw	r4,-12(fp)
 100e134:	103ee83a 	callr	r2
}
 100e138:	e037883a 	mov	sp,fp
 100e13c:	dfc00117 	ldw	ra,4(sp)
 100e140:	df000017 	ldw	fp,0(sp)
 100e144:	dec00204 	addi	sp,sp,8
 100e148:	f800283a 	ret

0100e14c <remoteproc_create_virtio>:

struct virtio_device *
remoteproc_create_virtio(struct remoteproc *rproc,
			 int vdev_id, unsigned int role,
			 void (*rst_cb)(struct virtio_device *vdev))
{
 100e14c:	deffe504 	addi	sp,sp,-108
 100e150:	dfc01a15 	stw	ra,104(sp)
 100e154:	df001915 	stw	fp,100(sp)
 100e158:	df001904 	addi	fp,sp,100
 100e15c:	e13ffc15 	stw	r4,-16(fp)
 100e160:	e17ffd15 	stw	r5,-12(fp)
 100e164:	e1bffe15 	stw	r6,-8(fp)
 100e168:	e1ffff15 	stw	r7,-4(fp)
	size_t vdev_rsc_offset;
	unsigned int notifyid;
	unsigned int num_vrings, i;
	struct metal_list *node;

	metal_assert(rproc);
 100e16c:	e0bffc17 	ldw	r2,-16(fp)
 100e170:	1000081e 	bne	r2,zero,100e194 <remoteproc_create_virtio+0x48>
 100e174:	01c040b4 	movhi	r7,258
 100e178:	39d71404 	addi	r7,r7,23632
 100e17c:	018040b4 	movhi	r6,258
 100e180:	31972204 	addi	r6,r6,23688
 100e184:	0140dc44 	movi	r5,881
 100e188:	010040b4 	movhi	r4,258
 100e18c:	2115f604 	addi	r4,r4,22488
 100e190:	10138940 	call	1013894 <__assert_func>
	metal_mutex_acquire(&rproc->lock);
 100e194:	e0bffc17 	ldw	r2,-16(fp)
 100e198:	1009883a 	mov	r4,r2
 100e19c:	100bb580 	call	100bb58 <metal_mutex_acquire>
	rsc_table = rproc->rsc_table;
 100e1a0:	e0bffc17 	ldw	r2,-16(fp)
 100e1a4:	10800117 	ldw	r2,4(r2)
 100e1a8:	e0bfec15 	stw	r2,-80(fp)
	vdev_rsc_io = rproc->rsc_io;
 100e1ac:	e0bffc17 	ldw	r2,-16(fp)
 100e1b0:	10800317 	ldw	r2,12(r2)
 100e1b4:	e0bfed15 	stw	r2,-76(fp)
	vdev_rsc_offset = find_rsc(rsc_table, RSC_VDEV, vdev_id);
 100e1b8:	e0bffd17 	ldw	r2,-12(fp)
 100e1bc:	100d883a 	mov	r6,r2
 100e1c0:	014000c4 	movi	r5,3
 100e1c4:	e13fec17 	ldw	r4,-80(fp)
 100e1c8:	100fc780 	call	100fc78 <find_rsc>
 100e1cc:	e0bfee15 	stw	r2,-72(fp)
	if (!vdev_rsc_offset) {
 100e1d0:	e0bfee17 	ldw	r2,-72(fp)
 100e1d4:	1000051e 	bne	r2,zero,100e1ec <remoteproc_create_virtio+0xa0>
		metal_mutex_release(&rproc->lock);
 100e1d8:	e0bffc17 	ldw	r2,-16(fp)
 100e1dc:	1009883a 	mov	r4,r2
 100e1e0:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return NULL;
 100e1e4:	0005883a 	mov	r2,zero
 100e1e8:	0000b706 	br	100e4c8 <remoteproc_create_virtio+0x37c>
	}
	vdev_rsc = (struct fw_rsc_vdev *)(rsc_table + vdev_rsc_offset);
 100e1ec:	e0ffec17 	ldw	r3,-80(fp)
 100e1f0:	e0bfee17 	ldw	r2,-72(fp)
 100e1f4:	1885883a 	add	r2,r3,r2
 100e1f8:	e0bfef15 	stw	r2,-68(fp)
	notifyid = vdev_rsc->notifyid;
 100e1fc:	e0bfef17 	ldw	r2,-68(fp)
 100e200:	10c00203 	ldbu	r3,8(r2)
 100e204:	11000243 	ldbu	r4,9(r2)
 100e208:	2008923a 	slli	r4,r4,8
 100e20c:	20c6b03a 	or	r3,r4,r3
 100e210:	11000283 	ldbu	r4,10(r2)
 100e214:	2008943a 	slli	r4,r4,16
 100e218:	20c6b03a 	or	r3,r4,r3
 100e21c:	108002c3 	ldbu	r2,11(r2)
 100e220:	1004963a 	slli	r2,r2,24
 100e224:	10c4b03a 	or	r2,r2,r3
 100e228:	e0bff015 	stw	r2,-64(fp)
	/* Check if the virtio device is already created */
	metal_list_for_each(&rproc->vdevs, node) {
 100e22c:	e0bffc17 	ldw	r2,-16(fp)
 100e230:	10800617 	ldw	r2,24(r2)
 100e234:	e0bfeb15 	stw	r2,-84(fp)
 100e238:	00001006 	br	100e27c <remoteproc_create_virtio+0x130>
		rpvdev = metal_container_of(node, struct remoteproc_virtio,
 100e23c:	e0bfeb17 	ldw	r2,-84(fp)
 100e240:	10bff104 	addi	r2,r2,-60
 100e244:	e0bff115 	stw	r2,-60(fp)
					    node);
		if (rpvdev->vdev.notifyid == notifyid) {
 100e248:	e0bff117 	ldw	r2,-60(fp)
 100e24c:	10c00417 	ldw	r3,16(r2)
 100e250:	e0bff017 	ldw	r2,-64(fp)
 100e254:	1880061e 	bne	r3,r2,100e270 <remoteproc_create_virtio+0x124>
			metal_mutex_release(&rproc->lock);
 100e258:	e0bffc17 	ldw	r2,-16(fp)
 100e25c:	1009883a 	mov	r4,r2
 100e260:	100bb8c0 	call	100bb8c <metal_mutex_release>
			return &rpvdev->vdev;
 100e264:	e0bff117 	ldw	r2,-60(fp)
 100e268:	10800404 	addi	r2,r2,16
 100e26c:	00009606 	br	100e4c8 <remoteproc_create_virtio+0x37c>
		return NULL;
	}
	vdev_rsc = (struct fw_rsc_vdev *)(rsc_table + vdev_rsc_offset);
	notifyid = vdev_rsc->notifyid;
	/* Check if the virtio device is already created */
	metal_list_for_each(&rproc->vdevs, node) {
 100e270:	e0bfeb17 	ldw	r2,-84(fp)
 100e274:	10800017 	ldw	r2,0(r2)
 100e278:	e0bfeb15 	stw	r2,-84(fp)
 100e27c:	e0bffc17 	ldw	r2,-16(fp)
 100e280:	10c00604 	addi	r3,r2,24
 100e284:	e0bfeb17 	ldw	r2,-84(fp)
 100e288:	18bfec1e 	bne	r3,r2,100e23c <__alt_data_end+0xff00e23c>
		if (rpvdev->vdev.notifyid == notifyid) {
			metal_mutex_release(&rproc->lock);
			return &rpvdev->vdev;
		}
	}
	vdev = rproc_virtio_create_vdev(role, notifyid,
 100e28c:	e0bfff17 	ldw	r2,-4(fp)
 100e290:	d8800215 	stw	r2,8(sp)
 100e294:	00804074 	movhi	r2,257
 100e298:	10b84004 	addi	r2,r2,-7936
 100e29c:	d8800115 	stw	r2,4(sp)
 100e2a0:	e0bffc17 	ldw	r2,-16(fp)
 100e2a4:	d8800015 	stw	r2,0(sp)
 100e2a8:	e1ffed17 	ldw	r7,-76(fp)
 100e2ac:	e1bfef17 	ldw	r6,-68(fp)
 100e2b0:	e17ff017 	ldw	r5,-64(fp)
 100e2b4:	e13ffe17 	ldw	r4,-8(fp)
 100e2b8:	100ef6c0 	call	100ef6c <rproc_virtio_create_vdev>
 100e2bc:	e0bff215 	stw	r2,-56(fp)
					vdev_rsc, vdev_rsc_io, rproc,
					remoteproc_virtio_notify,
					rst_cb);
	if (!vdev) {
 100e2c0:	e0bff217 	ldw	r2,-56(fp)
 100e2c4:	1000051e 	bne	r2,zero,100e2dc <remoteproc_create_virtio+0x190>
		metal_mutex_release(&rproc->lock);
 100e2c8:	e0bffc17 	ldw	r2,-16(fp)
 100e2cc:	1009883a 	mov	r4,r2
 100e2d0:	100bb8c0 	call	100bb8c <metal_mutex_release>
		return NULL;
 100e2d4:	0005883a 	mov	r2,zero
 100e2d8:	00007b06 	br	100e4c8 <remoteproc_create_virtio+0x37c>
	}

	rproc_virtio_wait_remote_ready(vdev);
 100e2dc:	e13ff217 	ldw	r4,-56(fp)
 100e2e0:	100f3f80 	call	100f3f8 <rproc_virtio_wait_remote_ready>

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100e2e4:	e0bff217 	ldw	r2,-56(fp)
 100e2e8:	10bffc04 	addi	r2,r2,-16
 100e2ec:	e0bff115 	stw	r2,-60(fp)
	metal_list_add_tail(&rproc->vdevs, &rpvdev->node);
 100e2f0:	e0bffc17 	ldw	r2,-16(fp)
 100e2f4:	10c00604 	addi	r3,r2,24
 100e2f8:	e0bff117 	ldw	r2,-60(fp)
 100e2fc:	10800f04 	addi	r2,r2,60
 100e300:	100b883a 	mov	r5,r2
 100e304:	1809883a 	mov	r4,r3
 100e308:	100b7440 	call	100b744 <metal_list_add_tail>
	num_vrings = vdev_rsc->num_of_vrings;
 100e30c:	e0bfef17 	ldw	r2,-68(fp)
 100e310:	10800643 	ldbu	r2,25(r2)
 100e314:	10803fcc 	andi	r2,r2,255
 100e318:	e0bff315 	stw	r2,-52(fp)

	/* set the notification id for vrings */
	for (i = 0; i < num_vrings; i++) {
 100e31c:	e03fea15 	stw	zero,-88(fp)
 100e320:	00005706 	br	100e480 <remoteproc_create_virtio+0x334>
		struct metal_io_region *io;
		void *va;
		size_t size;
		int ret;

		vring_rsc = &vdev_rsc->vring[i];
 100e324:	e0bfea17 	ldw	r2,-88(fp)
 100e328:	10800524 	muli	r2,r2,20
 100e32c:	10800704 	addi	r2,r2,28
 100e330:	e0ffef17 	ldw	r3,-68(fp)
 100e334:	1885883a 	add	r2,r3,r2
 100e338:	e0bff415 	stw	r2,-48(fp)
		notifyid = vring_rsc->notifyid;
 100e33c:	e0bff417 	ldw	r2,-48(fp)
 100e340:	10c00303 	ldbu	r3,12(r2)
 100e344:	11000343 	ldbu	r4,13(r2)
 100e348:	2008923a 	slli	r4,r4,8
 100e34c:	20c6b03a 	or	r3,r4,r3
 100e350:	11000383 	ldbu	r4,14(r2)
 100e354:	2008943a 	slli	r4,r4,16
 100e358:	20c6b03a 	or	r3,r4,r3
 100e35c:	108003c3 	ldbu	r2,15(r2)
 100e360:	1004963a 	slli	r2,r2,24
 100e364:	10c4b03a 	or	r2,r2,r3
 100e368:	e0bff015 	stw	r2,-64(fp)
		da = vring_rsc->da;
 100e36c:	e0bff417 	ldw	r2,-48(fp)
 100e370:	10c00003 	ldbu	r3,0(r2)
 100e374:	11000043 	ldbu	r4,1(r2)
 100e378:	2008923a 	slli	r4,r4,8
 100e37c:	20c6b03a 	or	r3,r4,r3
 100e380:	11000083 	ldbu	r4,2(r2)
 100e384:	2008943a 	slli	r4,r4,16
 100e388:	20c6b03a 	or	r3,r4,r3
 100e38c:	108000c3 	ldbu	r2,3(r2)
 100e390:	1004963a 	slli	r2,r2,24
 100e394:	10c4b03a 	or	r2,r2,r3
 100e398:	e0bffa15 	stw	r2,-24(fp)
		num_descs = vring_rsc->num;
 100e39c:	e0bff417 	ldw	r2,-48(fp)
 100e3a0:	10c00203 	ldbu	r3,8(r2)
 100e3a4:	11000243 	ldbu	r4,9(r2)
 100e3a8:	2008923a 	slli	r4,r4,8
 100e3ac:	20c6b03a 	or	r3,r4,r3
 100e3b0:	11000283 	ldbu	r4,10(r2)
 100e3b4:	2008943a 	slli	r4,r4,16
 100e3b8:	20c6b03a 	or	r3,r4,r3
 100e3bc:	108002c3 	ldbu	r2,11(r2)
 100e3c0:	1004963a 	slli	r2,r2,24
 100e3c4:	10c4b03a 	or	r2,r2,r3
 100e3c8:	e0bff515 	stw	r2,-44(fp)
		align = vring_rsc->align;
 100e3cc:	e0bff417 	ldw	r2,-48(fp)
 100e3d0:	10c00103 	ldbu	r3,4(r2)
 100e3d4:	11000143 	ldbu	r4,5(r2)
 100e3d8:	2008923a 	slli	r4,r4,8
 100e3dc:	20c6b03a 	or	r3,r4,r3
 100e3e0:	11000183 	ldbu	r4,6(r2)
 100e3e4:	2008943a 	slli	r4,r4,16
 100e3e8:	20c6b03a 	or	r3,r4,r3
 100e3ec:	108001c3 	ldbu	r2,7(r2)
 100e3f0:	1004963a 	slli	r2,r2,24
 100e3f4:	10c4b03a 	or	r2,r2,r3
 100e3f8:	e0bff615 	stw	r2,-40(fp)
		size = vring_size(num_descs, align);
 100e3fc:	e17ff617 	ldw	r5,-40(fp)
 100e400:	e13ff517 	ldw	r4,-44(fp)
 100e404:	100bbe40 	call	100bbe4 <vring_size>
 100e408:	e0bff715 	stw	r2,-36(fp)
		va = remoteproc_mmap(rproc, NULL, &da, size, 0, &io);
 100e40c:	e0fffa04 	addi	r3,fp,-24
 100e410:	e0bffb04 	addi	r2,fp,-20
 100e414:	d8800115 	stw	r2,4(sp)
 100e418:	d8000015 	stw	zero,0(sp)
 100e41c:	e1fff717 	ldw	r7,-36(fp)
 100e420:	180d883a 	mov	r6,r3
 100e424:	000b883a 	mov	r5,zero
 100e428:	e13ffc17 	ldw	r4,-16(fp)
 100e42c:	100c6c80 	call	100c6c8 <remoteproc_mmap>
 100e430:	e0bff815 	stw	r2,-32(fp)
		if (!va)
 100e434:	e0bff817 	ldw	r2,-32(fp)
 100e438:	10001926 	beq	r2,zero,100e4a0 <remoteproc_create_virtio+0x354>
			goto err1;
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
 100e43c:	e0bffb17 	ldw	r2,-20(fp)
 100e440:	e0fff617 	ldw	r3,-40(fp)
 100e444:	d8c00215 	stw	r3,8(sp)
 100e448:	e0fff517 	ldw	r3,-44(fp)
 100e44c:	d8c00115 	stw	r3,4(sp)
 100e450:	d8800015 	stw	r2,0(sp)
 100e454:	e1fff817 	ldw	r7,-32(fp)
 100e458:	e1bff017 	ldw	r6,-64(fp)
 100e45c:	e17fea17 	ldw	r5,-88(fp)
 100e460:	e13ff217 	ldw	r4,-56(fp)
 100e464:	100f2840 	call	100f284 <rproc_virtio_init_vring>
 100e468:	e0bff915 	stw	r2,-28(fp)
					      va, io, num_descs, align);
		if (ret)
 100e46c:	e0bff917 	ldw	r2,-28(fp)
 100e470:	10000d1e 	bne	r2,zero,100e4a8 <remoteproc_create_virtio+0x35c>
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
	metal_list_add_tail(&rproc->vdevs, &rpvdev->node);
	num_vrings = vdev_rsc->num_of_vrings;

	/* set the notification id for vrings */
	for (i = 0; i < num_vrings; i++) {
 100e474:	e0bfea17 	ldw	r2,-88(fp)
 100e478:	10800044 	addi	r2,r2,1
 100e47c:	e0bfea15 	stw	r2,-88(fp)
 100e480:	e0ffea17 	ldw	r3,-88(fp)
 100e484:	e0bff317 	ldw	r2,-52(fp)
 100e488:	18bfa636 	bltu	r3,r2,100e324 <__alt_data_end+0xff00e324>
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
					      va, io, num_descs, align);
		if (ret)
			goto err1;
	}
	metal_mutex_release(&rproc->lock);
 100e48c:	e0bffc17 	ldw	r2,-16(fp)
 100e490:	1009883a 	mov	r4,r2
 100e494:	100bb8c0 	call	100bb8c <metal_mutex_release>
	return vdev;
 100e498:	e0bff217 	ldw	r2,-56(fp)
 100e49c:	00000a06 	br	100e4c8 <remoteproc_create_virtio+0x37c>
		num_descs = vring_rsc->num;
		align = vring_rsc->align;
		size = vring_size(num_descs, align);
		va = remoteproc_mmap(rproc, NULL, &da, size, 0, &io);
		if (!va)
			goto err1;
 100e4a0:	0001883a 	nop
 100e4a4:	00000106 	br	100e4ac <remoteproc_create_virtio+0x360>
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
					      va, io, num_descs, align);
		if (ret)
			goto err1;
 100e4a8:	0001883a 	nop
	}
	metal_mutex_release(&rproc->lock);
	return vdev;

err1:
	remoteproc_remove_virtio(rproc, vdev);
 100e4ac:	e17ff217 	ldw	r5,-56(fp)
 100e4b0:	e13ffc17 	ldw	r4,-16(fp)
 100e4b4:	100e4dc0 	call	100e4dc <remoteproc_remove_virtio>
	metal_mutex_release(&rproc->lock);
 100e4b8:	e0bffc17 	ldw	r2,-16(fp)
 100e4bc:	1009883a 	mov	r4,r2
 100e4c0:	100bb8c0 	call	100bb8c <metal_mutex_release>
	return NULL;
 100e4c4:	0005883a 	mov	r2,zero
}
 100e4c8:	e037883a 	mov	sp,fp
 100e4cc:	dfc00117 	ldw	ra,4(sp)
 100e4d0:	df000017 	ldw	fp,0(sp)
 100e4d4:	dec00204 	addi	sp,sp,8
 100e4d8:	f800283a 	ret

0100e4dc <remoteproc_remove_virtio>:

void remoteproc_remove_virtio(struct remoteproc *rproc,
			      struct virtio_device *vdev)
{
 100e4dc:	defffb04 	addi	sp,sp,-20
 100e4e0:	dfc00415 	stw	ra,16(sp)
 100e4e4:	df000315 	stw	fp,12(sp)
 100e4e8:	df000304 	addi	fp,sp,12
 100e4ec:	e13ffe15 	stw	r4,-8(fp)
 100e4f0:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_virtio *rpvdev;

	(void)rproc;
	metal_assert(vdev);
 100e4f4:	e0bfff17 	ldw	r2,-4(fp)
 100e4f8:	1000081e 	bne	r2,zero,100e51c <remoteproc_remove_virtio+0x40>
 100e4fc:	01c040b4 	movhi	r7,258
 100e500:	39d71604 	addi	r7,r7,23640
 100e504:	018040b4 	movhi	r6,258
 100e508:	31972904 	addi	r6,r6,23716
 100e50c:	0140eec4 	movi	r5,955
 100e510:	010040b4 	movhi	r4,258
 100e514:	2115f604 	addi	r4,r4,22488
 100e518:	10138940 	call	1013894 <__assert_func>
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100e51c:	e0bfff17 	ldw	r2,-4(fp)
 100e520:	10bffc04 	addi	r2,r2,-16
 100e524:	e0bffd15 	stw	r2,-12(fp)
	metal_list_del(&rpvdev->node);
 100e528:	e0bffd17 	ldw	r2,-12(fp)
 100e52c:	10800f04 	addi	r2,r2,60
 100e530:	1009883a 	mov	r4,r2
 100e534:	100b7800 	call	100b780 <metal_list_del>
	rproc_virtio_remove_vdev(&rpvdev->vdev);
 100e538:	e0bffd17 	ldw	r2,-12(fp)
 100e53c:	10800404 	addi	r2,r2,16
 100e540:	1009883a 	mov	r4,r2
 100e544:	100f1d80 	call	100f1d8 <rproc_virtio_remove_vdev>
}
 100e548:	0001883a 	nop
 100e54c:	e037883a 	mov	sp,fp
 100e550:	dfc00117 	ldw	ra,4(sp)
 100e554:	df000017 	ldw	fp,0(sp)
 100e558:	dec00204 	addi	sp,sp,8
 100e55c:	f800283a 	ret

0100e560 <remoteproc_get_notification>:

int remoteproc_get_notification(struct remoteproc *rproc, uint32_t notifyid)
{
 100e560:	defff904 	addi	sp,sp,-28
 100e564:	dfc00615 	stw	ra,24(sp)
 100e568:	df000515 	stw	fp,20(sp)
 100e56c:	df000504 	addi	fp,sp,20
 100e570:	e13ffe15 	stw	r4,-8(fp)
 100e574:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct metal_list *node;
	int ret;

	metal_list_for_each(&rproc->vdevs, node) {
 100e578:	e0bffe17 	ldw	r2,-8(fp)
 100e57c:	10800617 	ldw	r2,24(r2)
 100e580:	e0bffb15 	stw	r2,-20(fp)
 100e584:	00001006 	br	100e5c8 <remoteproc_get_notification+0x68>
		rpvdev = metal_container_of(node, struct remoteproc_virtio,
 100e588:	e0bffb17 	ldw	r2,-20(fp)
 100e58c:	10bff104 	addi	r2,r2,-60
 100e590:	e0bffc15 	stw	r2,-16(fp)
					    node);
		ret = rproc_virtio_notified(&rpvdev->vdev, notifyid);
 100e594:	e0bffc17 	ldw	r2,-16(fp)
 100e598:	10800404 	addi	r2,r2,16
 100e59c:	e17fff17 	ldw	r5,-4(fp)
 100e5a0:	1009883a 	mov	r4,r2
 100e5a4:	100f32c0 	call	100f32c <rproc_virtio_notified>
 100e5a8:	e0bffd15 	stw	r2,-12(fp)
		if (ret)
 100e5ac:	e0bffd17 	ldw	r2,-12(fp)
 100e5b0:	10000226 	beq	r2,zero,100e5bc <remoteproc_get_notification+0x5c>
			return ret;
 100e5b4:	e0bffd17 	ldw	r2,-12(fp)
 100e5b8:	00000806 	br	100e5dc <remoteproc_get_notification+0x7c>
{
	struct remoteproc_virtio *rpvdev;
	struct metal_list *node;
	int ret;

	metal_list_for_each(&rproc->vdevs, node) {
 100e5bc:	e0bffb17 	ldw	r2,-20(fp)
 100e5c0:	10800017 	ldw	r2,0(r2)
 100e5c4:	e0bffb15 	stw	r2,-20(fp)
 100e5c8:	e0bffe17 	ldw	r2,-8(fp)
 100e5cc:	10c00604 	addi	r3,r2,24
 100e5d0:	e0bffb17 	ldw	r2,-20(fp)
 100e5d4:	18bfec1e 	bne	r3,r2,100e588 <__alt_data_end+0xff00e588>
					    node);
		ret = rproc_virtio_notified(&rpvdev->vdev, notifyid);
		if (ret)
			return ret;
	}
	return 0;
 100e5d8:	0005883a 	mov	r2,zero
}
 100e5dc:	e037883a 	mov	sp,fp
 100e5e0:	dfc00117 	ldw	ra,4(sp)
 100e5e4:	df000017 	ldw	fp,0(sp)
 100e5e8:	dec00204 	addi	sp,sp,8
 100e5ec:	f800283a 	ret

0100e5f0 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 100e5f0:	defffd04 	addi	sp,sp,-12
 100e5f4:	df000215 	stw	fp,8(sp)
 100e5f8:	df000204 	addi	fp,sp,8
 100e5fc:	e13ffe15 	stw	r4,-8(fp)
 100e600:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 100e604:	e0bffe17 	ldw	r2,-8(fp)
 100e608:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 100e60c:	10bfffe0 	cmpeqi	r2,r2,-1
 100e610:	1000091e 	bne	r2,zero,100e638 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 100e614:	e0bffe17 	ldw	r2,-8(fp)
 100e618:	10800217 	ldw	r2,8(r2)
 100e61c:	e0ffff17 	ldw	r3,-4(fp)
 100e620:	1880052e 	bgeu	r3,r2,100e638 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 100e624:	e0bffe17 	ldw	r2,-8(fp)
 100e628:	10c00017 	ldw	r3,0(r2)
		: NULL);
 100e62c:	e0bfff17 	ldw	r2,-4(fp)
 100e630:	1885883a 	add	r2,r3,r2
 100e634:	00000106 	br	100e63c <metal_io_virt+0x4c>
 100e638:	0005883a 	mov	r2,zero
}
 100e63c:	e037883a 	mov	sp,fp
 100e640:	df000017 	ldw	fp,0(sp)
 100e644:	dec00104 	addi	sp,sp,4
 100e648:	f800283a 	ret

0100e64c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100e64c:	defffc04 	addi	sp,sp,-16
 100e650:	df000315 	stw	fp,12(sp)
 100e654:	df000304 	addi	fp,sp,12
 100e658:	e13ffe15 	stw	r4,-8(fp)
 100e65c:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100e660:	e0bfff17 	ldw	r2,-4(fp)
 100e664:	e0fffe17 	ldw	r3,-8(fp)
 100e668:	18c00017 	ldw	r3,0(r3)
 100e66c:	10c5c83a 	sub	r2,r2,r3
 100e670:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100e674:	e0bffe17 	ldw	r2,-8(fp)
 100e678:	10800217 	ldw	r2,8(r2)
 100e67c:	e0fffd17 	ldw	r3,-12(fp)
 100e680:	1880022e 	bgeu	r3,r2,100e68c <metal_io_virt_to_offset+0x40>
 100e684:	e0bffd17 	ldw	r2,-12(fp)
 100e688:	00000106 	br	100e690 <metal_io_virt_to_offset+0x44>
 100e68c:	00bfffc4 	movi	r2,-1
}
 100e690:	e037883a 	mov	sp,fp
 100e694:	df000017 	ldw	fp,0(sp)
 100e698:	dec00104 	addi	sp,sp,4
 100e69c:	f800283a 	ret

0100e6a0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 100e6a0:	defff704 	addi	sp,sp,-36
 100e6a4:	dfc00815 	stw	ra,32(sp)
 100e6a8:	df000715 	stw	fp,28(sp)
 100e6ac:	dc400615 	stw	r17,24(sp)
 100e6b0:	dc000515 	stw	r16,20(sp)
 100e6b4:	df000704 	addi	fp,sp,28
 100e6b8:	e13ffa15 	stw	r4,-24(fp)
 100e6bc:	e17ffb15 	stw	r5,-20(fp)
 100e6c0:	e1bffc15 	stw	r6,-16(fp)
 100e6c4:	e1fffd15 	stw	r7,-12(fp)
	void *ptr = metal_io_virt(io, offset);
 100e6c8:	e17ffb17 	ldw	r5,-20(fp)
 100e6cc:	e13ffa17 	ldw	r4,-24(fp)
 100e6d0:	100e5f00 	call	100e5f0 <metal_io_virt>
 100e6d4:	e0bff915 	stw	r2,-28(fp)

	if (io->ops.read)
 100e6d8:	e0bffa17 	ldw	r2,-24(fp)
 100e6dc:	10800617 	ldw	r2,24(r2)
 100e6e0:	10000a26 	beq	r2,zero,100e70c <metal_io_read+0x6c>
		return (*io->ops.read)(io, offset, order, width);
 100e6e4:	e0bffa17 	ldw	r2,-24(fp)
 100e6e8:	10800617 	ldw	r2,24(r2)
 100e6ec:	e1fffd17 	ldw	r7,-12(fp)
 100e6f0:	e1bffc17 	ldw	r6,-16(fp)
 100e6f4:	e17ffb17 	ldw	r5,-20(fp)
 100e6f8:	e13ffa17 	ldw	r4,-24(fp)
 100e6fc:	103ee83a 	callr	r2
 100e700:	1021883a 	mov	r16,r2
 100e704:	1823883a 	mov	r17,r3
 100e708:	00004006 	br	100e80c <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uchar) == width)
 100e70c:	e0bff917 	ldw	r2,-28(fp)
 100e710:	10000a26 	beq	r2,zero,100e73c <metal_io_read+0x9c>
 100e714:	e0bffd17 	ldw	r2,-12(fp)
 100e718:	10800058 	cmpnei	r2,r2,1
 100e71c:	1000071e 	bne	r2,zero,100e73c <metal_io_read+0x9c>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 100e720:	0001b03a 	sync
 100e724:	e0bff917 	ldw	r2,-28(fp)
 100e728:	10800003 	ldbu	r2,0(r2)
 100e72c:	10803fcc 	andi	r2,r2,255
 100e730:	1021883a 	mov	r16,r2
 100e734:	0023883a 	mov	r17,zero
 100e738:	00003406 	br	100e80c <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ushort) == width)
 100e73c:	e0bff917 	ldw	r2,-28(fp)
 100e740:	10000a26 	beq	r2,zero,100e76c <metal_io_read+0xcc>
 100e744:	e0bffd17 	ldw	r2,-12(fp)
 100e748:	10800098 	cmpnei	r2,r2,2
 100e74c:	1000071e 	bne	r2,zero,100e76c <metal_io_read+0xcc>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 100e750:	0001b03a 	sync
 100e754:	e0bff917 	ldw	r2,-28(fp)
 100e758:	1080000b 	ldhu	r2,0(r2)
 100e75c:	10bfffcc 	andi	r2,r2,65535
 100e760:	1021883a 	mov	r16,r2
 100e764:	0023883a 	mov	r17,zero
 100e768:	00002806 	br	100e80c <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uint) == width)
 100e76c:	e0bff917 	ldw	r2,-28(fp)
 100e770:	10000926 	beq	r2,zero,100e798 <metal_io_read+0xf8>
 100e774:	e0bffd17 	ldw	r2,-12(fp)
 100e778:	10800118 	cmpnei	r2,r2,4
 100e77c:	1000061e 	bne	r2,zero,100e798 <metal_io_read+0xf8>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 100e780:	0001b03a 	sync
 100e784:	e0bff917 	ldw	r2,-28(fp)
 100e788:	10800017 	ldw	r2,0(r2)
 100e78c:	1021883a 	mov	r16,r2
 100e790:	0023883a 	mov	r17,zero
 100e794:	00001d06 	br	100e80c <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ulong) == width)
 100e798:	e0bff917 	ldw	r2,-28(fp)
 100e79c:	10000926 	beq	r2,zero,100e7c4 <metal_io_read+0x124>
 100e7a0:	e0bffd17 	ldw	r2,-12(fp)
 100e7a4:	10800118 	cmpnei	r2,r2,4
 100e7a8:	1000061e 	bne	r2,zero,100e7c4 <metal_io_read+0x124>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 100e7ac:	0001b03a 	sync
 100e7b0:	e0bff917 	ldw	r2,-28(fp)
 100e7b4:	10800017 	ldw	r2,0(r2)
 100e7b8:	1021883a 	mov	r16,r2
 100e7bc:	0023883a 	mov	r17,zero
 100e7c0:	00001206 	br	100e80c <metal_io_read+0x16c>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 100e7c4:	e0bff917 	ldw	r2,-28(fp)
 100e7c8:	10000826 	beq	r2,zero,100e7ec <metal_io_read+0x14c>
 100e7cc:	e0bffd17 	ldw	r2,-12(fp)
 100e7d0:	10800218 	cmpnei	r2,r2,8
 100e7d4:	1000051e 	bne	r2,zero,100e7ec <metal_io_read+0x14c>
		return atomic_load_explicit((atomic_ullong *)ptr, order);
 100e7d8:	0001b03a 	sync
 100e7dc:	e0bff917 	ldw	r2,-28(fp)
 100e7e0:	14000017 	ldw	r16,0(r2)
 100e7e4:	14400117 	ldw	r17,4(r2)
 100e7e8:	00000806 	br	100e80c <metal_io_read+0x16c>
#endif
	metal_assert(0);
 100e7ec:	01c040b4 	movhi	r7,258
 100e7f0:	39d73004 	addi	r7,r7,23744
 100e7f4:	018040b4 	movhi	r6,258
 100e7f8:	31976204 	addi	r6,r6,23944
 100e7fc:	01403f84 	movi	r5,254
 100e800:	010040b4 	movhi	r4,258
 100e804:	21173104 	addi	r4,r4,23748
 100e808:	10138940 	call	1013894 <__assert_func>
 100e80c:	8007883a 	mov	r3,r16
 100e810:	8809883a 	mov	r4,r17
	return 0; /* quiet compiler */
}
 100e814:	1805883a 	mov	r2,r3
 100e818:	2007883a 	mov	r3,r4
 100e81c:	e6fffe04 	addi	sp,fp,-8
 100e820:	dfc00317 	ldw	ra,12(sp)
 100e824:	df000217 	ldw	fp,8(sp)
 100e828:	dc400117 	ldw	r17,4(sp)
 100e82c:	dc000017 	ldw	r16,0(sp)
 100e830:	dec00404 	addi	sp,sp,16
 100e834:	f800283a 	ret

0100e838 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 100e838:	defff704 	addi	sp,sp,-36
 100e83c:	dfc00815 	stw	ra,32(sp)
 100e840:	df000715 	stw	fp,28(sp)
 100e844:	df000704 	addi	fp,sp,28
 100e848:	e13ffc15 	stw	r4,-16(fp)
 100e84c:	e17ffd15 	stw	r5,-12(fp)
 100e850:	e1bffe15 	stw	r6,-8(fp)
 100e854:	e1ffff15 	stw	r7,-4(fp)
	void *ptr = metal_io_virt(io, offset);
 100e858:	e17ffd17 	ldw	r5,-12(fp)
 100e85c:	e13ffc17 	ldw	r4,-16(fp)
 100e860:	100e5f00 	call	100e5f0 <metal_io_virt>
 100e864:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.write)
 100e868:	e0bffc17 	ldw	r2,-16(fp)
 100e86c:	10800717 	ldw	r2,28(r2)
 100e870:	10000c26 	beq	r2,zero,100e8a4 <metal_io_write+0x6c>
		(*io->ops.write)(io, offset, value, order, width);
 100e874:	e0bffc17 	ldw	r2,-16(fp)
 100e878:	10800717 	ldw	r2,28(r2)
 100e87c:	e0c00317 	ldw	r3,12(fp)
 100e880:	d8c00115 	stw	r3,4(sp)
 100e884:	e0c00217 	ldw	r3,8(fp)
 100e888:	d8c00015 	stw	r3,0(sp)
 100e88c:	e1bffe17 	ldw	r6,-8(fp)
 100e890:	e1ffff17 	ldw	r7,-4(fp)
 100e894:	e17ffd17 	ldw	r5,-12(fp)
 100e898:	e13ffc17 	ldw	r4,-16(fp)
 100e89c:	103ee83a 	callr	r2
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 100e8a0:	00003e06 	br	100e99c <metal_io_write+0x164>
	       uint64_t value, memory_order order, int width)
{
	void *ptr = metal_io_virt(io, offset);
	if (io->ops.write)
		(*io->ops.write)(io, offset, value, order, width);
	else if (ptr && sizeof(atomic_uchar) == width)
 100e8a4:	e0bffb17 	ldw	r2,-20(fp)
 100e8a8:	10000926 	beq	r2,zero,100e8d0 <metal_io_write+0x98>
 100e8ac:	e0800317 	ldw	r2,12(fp)
 100e8b0:	10800058 	cmpnei	r2,r2,1
 100e8b4:	1000061e 	bne	r2,zero,100e8d0 <metal_io_write+0x98>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 100e8b8:	e0bffe17 	ldw	r2,-8(fp)
 100e8bc:	1007883a 	mov	r3,r2
 100e8c0:	e0bffb17 	ldw	r2,-20(fp)
 100e8c4:	10c00005 	stb	r3,0(r2)
 100e8c8:	0001b03a 	sync
 100e8cc:	00003306 	br	100e99c <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ushort) == width)
 100e8d0:	e0bffb17 	ldw	r2,-20(fp)
 100e8d4:	10000926 	beq	r2,zero,100e8fc <metal_io_write+0xc4>
 100e8d8:	e0800317 	ldw	r2,12(fp)
 100e8dc:	10800098 	cmpnei	r2,r2,2
 100e8e0:	1000061e 	bne	r2,zero,100e8fc <metal_io_write+0xc4>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 100e8e4:	e0bffe17 	ldw	r2,-8(fp)
 100e8e8:	1007883a 	mov	r3,r2
 100e8ec:	e0bffb17 	ldw	r2,-20(fp)
 100e8f0:	10c0000d 	sth	r3,0(r2)
 100e8f4:	0001b03a 	sync
 100e8f8:	00002806 	br	100e99c <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_uint) == width)
 100e8fc:	e0bffb17 	ldw	r2,-20(fp)
 100e900:	10000826 	beq	r2,zero,100e924 <metal_io_write+0xec>
 100e904:	e0800317 	ldw	r2,12(fp)
 100e908:	10800118 	cmpnei	r2,r2,4
 100e90c:	1000051e 	bne	r2,zero,100e924 <metal_io_write+0xec>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 100e910:	e0fffe17 	ldw	r3,-8(fp)
 100e914:	e0bffb17 	ldw	r2,-20(fp)
 100e918:	10c00015 	stw	r3,0(r2)
 100e91c:	0001b03a 	sync
 100e920:	00001e06 	br	100e99c <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ulong) == width)
 100e924:	e0bffb17 	ldw	r2,-20(fp)
 100e928:	10000826 	beq	r2,zero,100e94c <metal_io_write+0x114>
 100e92c:	e0800317 	ldw	r2,12(fp)
 100e930:	10800118 	cmpnei	r2,r2,4
 100e934:	1000051e 	bne	r2,zero,100e94c <metal_io_write+0x114>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 100e938:	e0fffe17 	ldw	r3,-8(fp)
 100e93c:	e0bffb17 	ldw	r2,-20(fp)
 100e940:	10c00015 	stw	r3,0(r2)
 100e944:	0001b03a 	sync
 100e948:	00001406 	br	100e99c <metal_io_write+0x164>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 100e94c:	e0bffb17 	ldw	r2,-20(fp)
 100e950:	10000a26 	beq	r2,zero,100e97c <metal_io_write+0x144>
 100e954:	e0800317 	ldw	r2,12(fp)
 100e958:	10800218 	cmpnei	r2,r2,8
 100e95c:	1000071e 	bne	r2,zero,100e97c <metal_io_write+0x144>
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
 100e960:	e0bffb17 	ldw	r2,-20(fp)
 100e964:	e0fffe17 	ldw	r3,-8(fp)
 100e968:	10c00015 	stw	r3,0(r2)
 100e96c:	e0ffff17 	ldw	r3,-4(fp)
 100e970:	10c00115 	stw	r3,4(r2)
 100e974:	0001b03a 	sync
 100e978:	00000806 	br	100e99c <metal_io_write+0x164>
#endif
	else
		metal_assert (0);
 100e97c:	01c040b4 	movhi	r7,258
 100e980:	39d73004 	addi	r7,r7,23744
 100e984:	018040b4 	movhi	r6,258
 100e988:	31976604 	addi	r6,r6,23960
 100e98c:	01404804 	movi	r5,288
 100e990:	010040b4 	movhi	r4,258
 100e994:	21173104 	addi	r4,r4,23748
 100e998:	10138940 	call	1013894 <__assert_func>
}
 100e99c:	0001883a 	nop
 100e9a0:	e037883a 	mov	sp,fp
 100e9a4:	dfc00117 	ldw	ra,4(sp)
 100e9a8:	df000017 	ldw	fp,0(sp)
 100e9ac:	dec00204 	addi	sp,sp,8
 100e9b0:	f800283a 	ret

0100e9b4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 100e9b4:	defffd04 	addi	sp,sp,-12
 100e9b8:	dfc00215 	stw	ra,8(sp)
 100e9bc:	df000115 	stw	fp,4(sp)
 100e9c0:	df000104 	addi	fp,sp,4
 100e9c4:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 100e9c8:	e13fff17 	ldw	r4,-4(fp)
 100e9cc:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100e9d0:	e037883a 	mov	sp,fp
 100e9d4:	dfc00117 	ldw	ra,4(sp)
 100e9d8:	df000017 	ldw	fp,0(sp)
 100e9dc:	dec00204 	addi	sp,sp,8
 100e9e0:	f800283a 	ret

0100e9e4 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 100e9e4:	defffd04 	addi	sp,sp,-12
 100e9e8:	dfc00215 	stw	ra,8(sp)
 100e9ec:	df000115 	stw	fp,4(sp)
 100e9f0:	df000104 	addi	fp,sp,4
 100e9f4:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 100e9f8:	e13fff17 	ldw	r4,-4(fp)
 100e9fc:	10011840 	call	1001184 <vPortFree>
}
 100ea00:	0001883a 	nop
 100ea04:	e037883a 	mov	sp,fp
 100ea08:	dfc00117 	ldw	ra,4(sp)
 100ea0c:	df000017 	ldw	fp,0(sp)
 100ea10:	dec00204 	addi	sp,sp,8
 100ea14:	f800283a 	ret

0100ea18 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 100ea18:	defffb04 	addi	sp,sp,-20
 100ea1c:	dfc00415 	stw	ra,16(sp)
 100ea20:	df000315 	stw	fp,12(sp)
 100ea24:	df000304 	addi	fp,sp,12
 100ea28:	e13fff15 	stw	r4,-4(fp)
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
 100ea2c:	e0bfff17 	ldw	r2,-4(fp)
 100ea30:	100490fa 	slli	r2,r2,3
void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 100ea34:	10800d04 	addi	r2,r2,52
 100ea38:	e0bffd15 	stw	r2,-12(fp)
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = metal_allocate_memory(vq_size);
 100ea3c:	e13ffd17 	ldw	r4,-12(fp)
 100ea40:	100e9b40 	call	100e9b4 <metal_allocate_memory>
 100ea44:	e0bffe15 	stw	r2,-8(fp)
	if (vqs) {
 100ea48:	e0bffe17 	ldw	r2,-8(fp)
 100ea4c:	10000426 	beq	r2,zero,100ea60 <virtqueue_allocate+0x48>
		memset(vqs, 0x00, vq_size);
 100ea50:	e1bffd17 	ldw	r6,-12(fp)
 100ea54:	000b883a 	mov	r5,zero
 100ea58:	e13ffe17 	ldw	r4,-8(fp)
 100ea5c:	1013b300 	call	1013b30 <memset>
	}

	return vqs;
 100ea60:	e0bffe17 	ldw	r2,-8(fp)
}
 100ea64:	e037883a 	mov	sp,fp
 100ea68:	dfc00117 	ldw	ra,4(sp)
 100ea6c:	df000017 	ldw	fp,0(sp)
 100ea70:	dec00204 	addi	sp,sp,8
 100ea74:	f800283a 	ret

0100ea78 <rproc_virtio_virtqueue_notify>:
#include <../../../../metal/cpu.h>
#include <../../../../metal/utilities.h>
#include <../../../../metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 100ea78:	defff904 	addi	sp,sp,-28
 100ea7c:	dfc00615 	stw	ra,24(sp)
 100ea80:	df000515 	stw	fp,20(sp)
 100ea84:	df000504 	addi	fp,sp,20
 100ea88:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 100ea8c:	e0bfff17 	ldw	r2,-4(fp)
 100ea90:	1080020b 	ldhu	r2,8(r2)
 100ea94:	10bfffcc 	andi	r2,r2,65535
 100ea98:	e0bffb15 	stw	r2,-20(fp)

	vdev = vq->vq_dev;
 100ea9c:	e0bfff17 	ldw	r2,-4(fp)
 100eaa0:	10800017 	ldw	r2,0(r2)
 100eaa4:	e0bffc15 	stw	r2,-16(fp)
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100eaa8:	e0bffc17 	ldw	r2,-16(fp)
 100eaac:	10bffc04 	addi	r2,r2,-16
 100eab0:	e0bffd15 	stw	r2,-12(fp)
	metal_assert(vq_id < vdev->vrings_num);
 100eab4:	e0bffc17 	ldw	r2,-16(fp)
 100eab8:	10800917 	ldw	r2,36(r2)
 100eabc:	e0fffb17 	ldw	r3,-20(fp)
 100eac0:	18800836 	bltu	r3,r2,100eae4 <rproc_virtio_virtqueue_notify+0x6c>
 100eac4:	01c040b4 	movhi	r7,258
 100eac8:	39d73f04 	addi	r7,r7,23804
 100eacc:	018040b4 	movhi	r6,258
 100ead0:	31975a04 	addi	r6,r6,23912
 100ead4:	01400744 	movi	r5,29
 100ead8:	010040b4 	movhi	r4,258
 100eadc:	21174604 	addi	r4,r4,23832
 100eae0:	10138940 	call	1013894 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 100eae4:	e0bffc17 	ldw	r2,-16(fp)
 100eae8:	10c00a17 	ldw	r3,40(r2)
 100eaec:	e0bffb17 	ldw	r2,-20(fp)
 100eaf0:	10800624 	muli	r2,r2,24
 100eaf4:	1885883a 	add	r2,r3,r2
 100eaf8:	e0bffe15 	stw	r2,-8(fp)
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 100eafc:	e0bffd17 	ldw	r2,-12(fp)
 100eb00:	10800317 	ldw	r2,12(r2)
 100eb04:	e0fffd17 	ldw	r3,-12(fp)
 100eb08:	19000017 	ldw	r4,0(r3)
 100eb0c:	e0fffe17 	ldw	r3,-8(fp)
 100eb10:	18c00417 	ldw	r3,16(r3)
 100eb14:	180b883a 	mov	r5,r3
 100eb18:	103ee83a 	callr	r2
}
 100eb1c:	0001883a 	nop
 100eb20:	e037883a 	mov	sp,fp
 100eb24:	dfc00117 	ldw	ra,4(sp)
 100eb28:	df000017 	ldw	fp,0(sp)
 100eb2c:	dec00204 	addi	sp,sp,8
 100eb30:	f800283a 	ret

0100eb34 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 100eb34:	defff904 	addi	sp,sp,-28
 100eb38:	dfc00615 	stw	ra,24(sp)
 100eb3c:	df000515 	stw	fp,20(sp)
 100eb40:	df000504 	addi	fp,sp,20
 100eb44:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100eb48:	e0bfff17 	ldw	r2,-4(fp)
 100eb4c:	10bffc04 	addi	r2,r2,-16
 100eb50:	e0bffb15 	stw	r2,-20(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100eb54:	e0bffb17 	ldw	r2,-20(fp)
 100eb58:	10800117 	ldw	r2,4(r2)
 100eb5c:	e0bffc15 	stw	r2,-16(fp)
	io = rpvdev->vdev_rsc_io;
 100eb60:	e0bffb17 	ldw	r2,-20(fp)
 100eb64:	10800217 	ldw	r2,8(r2)
 100eb68:	e0bffd15 	stw	r2,-12(fp)
	status = metal_io_read8(io,
 100eb6c:	e0bffc17 	ldw	r2,-16(fp)
 100eb70:	10800604 	addi	r2,r2,24
 100eb74:	100b883a 	mov	r5,r2
 100eb78:	e13ffd17 	ldw	r4,-12(fp)
 100eb7c:	100e64c0 	call	100e64c <metal_io_virt_to_offset>
 100eb80:	01c00044 	movi	r7,1
 100eb84:	01800144 	movi	r6,5
 100eb88:	100b883a 	mov	r5,r2
 100eb8c:	e13ffd17 	ldw	r4,-12(fp)
 100eb90:	100e6a00 	call	100e6a0 <metal_io_read>
 100eb94:	1009883a 	mov	r4,r2
 100eb98:	180b883a 	mov	r5,r3
 100eb9c:	e13ffe05 	stb	r4,-8(fp)
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 100eba0:	e0bffe03 	ldbu	r2,-8(fp)
}
 100eba4:	e037883a 	mov	sp,fp
 100eba8:	dfc00117 	ldw	ra,4(sp)
 100ebac:	df000017 	ldw	fp,0(sp)
 100ebb0:	dec00204 	addi	sp,sp,8
 100ebb4:	f800283a 	ret

0100ebb8 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 100ebb8:	defff504 	addi	sp,sp,-44
 100ebbc:	dfc00a15 	stw	ra,40(sp)
 100ebc0:	df000915 	stw	fp,36(sp)
 100ebc4:	dc400815 	stw	r17,32(sp)
 100ebc8:	dc000715 	stw	r16,28(sp)
 100ebcc:	df000904 	addi	fp,sp,36
 100ebd0:	e13ffc15 	stw	r4,-16(fp)
 100ebd4:	2805883a 	mov	r2,r5
 100ebd8:	e0bffd05 	stb	r2,-12(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100ebdc:	e0bffc17 	ldw	r2,-16(fp)
 100ebe0:	10bffc04 	addi	r2,r2,-16
 100ebe4:	e0bff915 	stw	r2,-28(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100ebe8:	e0bff917 	ldw	r2,-28(fp)
 100ebec:	10800117 	ldw	r2,4(r2)
 100ebf0:	e0bffa15 	stw	r2,-24(fp)
	io = rpvdev->vdev_rsc_io;
 100ebf4:	e0bff917 	ldw	r2,-28(fp)
 100ebf8:	10800217 	ldw	r2,8(r2)
 100ebfc:	e0bffb15 	stw	r2,-20(fp)
	metal_io_write8(io,
 100ec00:	e0bffa17 	ldw	r2,-24(fp)
 100ec04:	10800604 	addi	r2,r2,24
 100ec08:	100b883a 	mov	r5,r2
 100ec0c:	e13ffb17 	ldw	r4,-20(fp)
 100ec10:	100e64c0 	call	100e64c <metal_io_virt_to_offset>
 100ec14:	1007883a 	mov	r3,r2
 100ec18:	e0bffd03 	ldbu	r2,-12(fp)
 100ec1c:	10803fcc 	andi	r2,r2,255
 100ec20:	1021883a 	mov	r16,r2
 100ec24:	0023883a 	mov	r17,zero
 100ec28:	00800044 	movi	r2,1
 100ec2c:	d8800115 	stw	r2,4(sp)
 100ec30:	00800144 	movi	r2,5
 100ec34:	d8800015 	stw	r2,0(sp)
 100ec38:	800d883a 	mov	r6,r16
 100ec3c:	880f883a 	mov	r7,r17
 100ec40:	180b883a 	mov	r5,r3
 100ec44:	e13ffb17 	ldw	r4,-20(fp)
 100ec48:	100e8380 	call	100e838 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
 100ec4c:	e0bff917 	ldw	r2,-28(fp)
 100ec50:	10800317 	ldw	r2,12(r2)
 100ec54:	e0fff917 	ldw	r3,-28(fp)
 100ec58:	19000017 	ldw	r4,0(r3)
 100ec5c:	e0fffc17 	ldw	r3,-16(fp)
 100ec60:	18c00017 	ldw	r3,0(r3)
 100ec64:	180b883a 	mov	r5,r3
 100ec68:	103ee83a 	callr	r2
}
 100ec6c:	0001883a 	nop
 100ec70:	e6fffe04 	addi	sp,fp,-8
 100ec74:	dfc00317 	ldw	ra,12(sp)
 100ec78:	df000217 	ldw	fp,8(sp)
 100ec7c:	dc400117 	ldw	r17,4(sp)
 100ec80:	dc000017 	ldw	r16,0(sp)
 100ec84:	dec00404 	addi	sp,sp,16
 100ec88:	f800283a 	ret

0100ec8c <rproc_virtio_get_dfeatures>:
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
 100ec8c:	defff904 	addi	sp,sp,-28
 100ec90:	dfc00615 	stw	ra,24(sp)
 100ec94:	df000515 	stw	fp,20(sp)
 100ec98:	df000504 	addi	fp,sp,20
 100ec9c:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100eca0:	e0bfff17 	ldw	r2,-4(fp)
 100eca4:	10bffc04 	addi	r2,r2,-16
 100eca8:	e0bffb15 	stw	r2,-20(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100ecac:	e0bffb17 	ldw	r2,-20(fp)
 100ecb0:	10800117 	ldw	r2,4(r2)
 100ecb4:	e0bffc15 	stw	r2,-16(fp)
	io = rpvdev->vdev_rsc_io;
 100ecb8:	e0bffb17 	ldw	r2,-20(fp)
 100ecbc:	10800217 	ldw	r2,8(r2)
 100ecc0:	e0bffd15 	stw	r2,-12(fp)
	features = metal_io_read32(io,
 100ecc4:	e0bffc17 	ldw	r2,-16(fp)
 100ecc8:	10800304 	addi	r2,r2,12
 100eccc:	100b883a 	mov	r5,r2
 100ecd0:	e13ffd17 	ldw	r4,-12(fp)
 100ecd4:	100e64c0 	call	100e64c <metal_io_virt_to_offset>
 100ecd8:	01c00104 	movi	r7,4
 100ecdc:	01800144 	movi	r6,5
 100ece0:	100b883a 	mov	r5,r2
 100ece4:	e13ffd17 	ldw	r4,-12(fp)
 100ece8:	100e6a00 	call	100e6a0 <metal_io_read>
 100ecec:	1009883a 	mov	r4,r2
 100ecf0:	180b883a 	mov	r5,r3
 100ecf4:	e13ffe15 	stw	r4,-8(fp)
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 100ecf8:	e0bffe17 	ldw	r2,-8(fp)
}
 100ecfc:	e037883a 	mov	sp,fp
 100ed00:	dfc00117 	ldw	ra,4(sp)
 100ed04:	df000017 	ldw	fp,0(sp)
 100ed08:	dec00204 	addi	sp,sp,8
 100ed0c:	f800283a 	ret

0100ed10 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 100ed10:	defff804 	addi	sp,sp,-32
 100ed14:	dfc00715 	stw	ra,28(sp)
 100ed18:	df000615 	stw	fp,24(sp)
 100ed1c:	df000604 	addi	fp,sp,24
 100ed20:	e13fff15 	stw	r4,-4(fp)
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100ed24:	e0bfff17 	ldw	r2,-4(fp)
 100ed28:	10bffc04 	addi	r2,r2,-16
 100ed2c:	e0bffa15 	stw	r2,-24(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100ed30:	e0bffa17 	ldw	r2,-24(fp)
 100ed34:	10800117 	ldw	r2,4(r2)
 100ed38:	e0bffb15 	stw	r2,-20(fp)
	io = rpvdev->vdev_rsc_io;
 100ed3c:	e0bffa17 	ldw	r2,-24(fp)
 100ed40:	10800217 	ldw	r2,8(r2)
 100ed44:	e0bffc15 	stw	r2,-16(fp)
	gfeatures = metal_io_read32(io,
 100ed48:	e0bffb17 	ldw	r2,-20(fp)
 100ed4c:	10800404 	addi	r2,r2,16
 100ed50:	100b883a 	mov	r5,r2
 100ed54:	e13ffc17 	ldw	r4,-16(fp)
 100ed58:	100e64c0 	call	100e64c <metal_io_virt_to_offset>
 100ed5c:	01c00104 	movi	r7,4
 100ed60:	01800144 	movi	r6,5
 100ed64:	100b883a 	mov	r5,r2
 100ed68:	e13ffc17 	ldw	r4,-16(fp)
 100ed6c:	100e6a00 	call	100e6a0 <metal_io_read>
 100ed70:	1009883a 	mov	r4,r2
 100ed74:	180b883a 	mov	r5,r3
 100ed78:	e13ffd15 	stw	r4,-12(fp)
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
 100ed7c:	e13fff17 	ldw	r4,-4(fp)
 100ed80:	100ec8c0 	call	100ec8c <rproc_virtio_get_dfeatures>
 100ed84:	e0bffe15 	stw	r2,-8(fp)

	return dfeatures & gfeatures;
 100ed88:	e0fffe17 	ldw	r3,-8(fp)
 100ed8c:	e0bffd17 	ldw	r2,-12(fp)
 100ed90:	1884703a 	and	r2,r3,r2
}
 100ed94:	e037883a 	mov	sp,fp
 100ed98:	dfc00117 	ldw	ra,4(sp)
 100ed9c:	df000017 	ldw	fp,0(sp)
 100eda0:	dec00204 	addi	sp,sp,8
 100eda4:	f800283a 	ret

0100eda8 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 100eda8:	defff504 	addi	sp,sp,-44
 100edac:	dfc00a15 	stw	ra,40(sp)
 100edb0:	df000915 	stw	fp,36(sp)
 100edb4:	dc400815 	stw	r17,32(sp)
 100edb8:	dc000715 	stw	r16,28(sp)
 100edbc:	df000904 	addi	fp,sp,36
 100edc0:	e13ffc15 	stw	r4,-16(fp)
 100edc4:	e17ffd15 	stw	r5,-12(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100edc8:	e0bffc17 	ldw	r2,-16(fp)
 100edcc:	10bffc04 	addi	r2,r2,-16
 100edd0:	e0bff915 	stw	r2,-28(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100edd4:	e0bff917 	ldw	r2,-28(fp)
 100edd8:	10800117 	ldw	r2,4(r2)
 100eddc:	e0bffa15 	stw	r2,-24(fp)
	io = rpvdev->vdev_rsc_io;
 100ede0:	e0bff917 	ldw	r2,-28(fp)
 100ede4:	10800217 	ldw	r2,8(r2)
 100ede8:	e0bffb15 	stw	r2,-20(fp)
	metal_io_write32(io,
 100edec:	e0bffa17 	ldw	r2,-24(fp)
 100edf0:	10800404 	addi	r2,r2,16
 100edf4:	100b883a 	mov	r5,r2
 100edf8:	e13ffb17 	ldw	r4,-20(fp)
 100edfc:	100e64c0 	call	100e64c <metal_io_virt_to_offset>
 100ee00:	1007883a 	mov	r3,r2
 100ee04:	e0bffd17 	ldw	r2,-12(fp)
 100ee08:	1021883a 	mov	r16,r2
 100ee0c:	0023883a 	mov	r17,zero
 100ee10:	00800104 	movi	r2,4
 100ee14:	d8800115 	stw	r2,4(sp)
 100ee18:	00800144 	movi	r2,5
 100ee1c:	d8800015 	stw	r2,0(sp)
 100ee20:	800d883a 	mov	r6,r16
 100ee24:	880f883a 	mov	r7,r17
 100ee28:	180b883a 	mov	r5,r3
 100ee2c:	e13ffb17 	ldw	r4,-20(fp)
 100ee30:	100e8380 	call	100e838 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->gfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
 100ee34:	e0bff917 	ldw	r2,-28(fp)
 100ee38:	10800317 	ldw	r2,12(r2)
 100ee3c:	e0fff917 	ldw	r3,-28(fp)
 100ee40:	19000017 	ldw	r4,0(r3)
 100ee44:	e0fffc17 	ldw	r3,-16(fp)
 100ee48:	18c00017 	ldw	r3,0(r3)
 100ee4c:	180b883a 	mov	r5,r3
 100ee50:	103ee83a 	callr	r2
}
 100ee54:	0001883a 	nop
 100ee58:	e6fffe04 	addi	sp,fp,-8
 100ee5c:	dfc00317 	ldw	ra,12(sp)
 100ee60:	df000217 	ldw	fp,8(sp)
 100ee64:	dc400117 	ldw	r17,4(sp)
 100ee68:	dc000017 	ldw	r16,0(sp)
 100ee6c:	dec00404 	addi	sp,sp,16
 100ee70:	f800283a 	ret

0100ee74 <rproc_virtio_negotiate_features>:

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 100ee74:	defffb04 	addi	sp,sp,-20
 100ee78:	dfc00415 	stw	ra,16(sp)
 100ee7c:	df000315 	stw	fp,12(sp)
 100ee80:	df000304 	addi	fp,sp,12
 100ee84:	e13ffe15 	stw	r4,-8(fp)
 100ee88:	e17fff15 	stw	r5,-4(fp)
	uint32_t dfeatures = rproc_virtio_get_dfeatures(vdev);
 100ee8c:	e13ffe17 	ldw	r4,-8(fp)
 100ee90:	100ec8c0 	call	100ec8c <rproc_virtio_get_dfeatures>
 100ee94:	e0bffd15 	stw	r2,-12(fp)
	rproc_virtio_set_features(vdev, dfeatures & features);
 100ee98:	e0fffd17 	ldw	r3,-12(fp)
 100ee9c:	e0bfff17 	ldw	r2,-4(fp)
 100eea0:	1884703a 	and	r2,r3,r2
 100eea4:	100b883a 	mov	r5,r2
 100eea8:	e13ffe17 	ldw	r4,-8(fp)
 100eeac:	100eda80 	call	100eda8 <rproc_virtio_set_features>
	return 0;
 100eeb0:	0005883a 	mov	r2,zero
}
 100eeb4:	e037883a 	mov	sp,fp
 100eeb8:	dfc00117 	ldw	ra,4(sp)
 100eebc:	df000017 	ldw	fp,0(sp)
 100eec0:	dec00204 	addi	sp,sp,8
 100eec4:	f800283a 	ret

0100eec8 <rproc_virtio_read_config>:
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 100eec8:	defffb04 	addi	sp,sp,-20
 100eecc:	df000415 	stw	fp,16(sp)
 100eed0:	df000404 	addi	fp,sp,16
 100eed4:	e13ffc15 	stw	r4,-16(fp)
 100eed8:	e17ffd15 	stw	r5,-12(fp)
 100eedc:	e1bffe15 	stw	r6,-8(fp)
 100eee0:	e1ffff15 	stw	r7,-4(fp)
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 100eee4:	0001883a 	nop
 100eee8:	e037883a 	mov	sp,fp
 100eeec:	df000017 	ldw	fp,0(sp)
 100eef0:	dec00104 	addi	sp,sp,4
 100eef4:	f800283a 	ret

0100eef8 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 100eef8:	defffb04 	addi	sp,sp,-20
 100eefc:	df000415 	stw	fp,16(sp)
 100ef00:	df000404 	addi	fp,sp,16
 100ef04:	e13ffc15 	stw	r4,-16(fp)
 100ef08:	e17ffd15 	stw	r5,-12(fp)
 100ef0c:	e1bffe15 	stw	r6,-8(fp)
 100ef10:	e1ffff15 	stw	r7,-4(fp)
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 100ef14:	0001883a 	nop
 100ef18:	e037883a 	mov	sp,fp
 100ef1c:	df000017 	ldw	fp,0(sp)
 100ef20:	dec00104 	addi	sp,sp,4
 100ef24:	f800283a 	ret

0100ef28 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 100ef28:	defffd04 	addi	sp,sp,-12
 100ef2c:	dfc00215 	stw	ra,8(sp)
 100ef30:	df000115 	stw	fp,4(sp)
 100ef34:	df000104 	addi	fp,sp,4
 100ef38:	e13fff15 	stw	r4,-4(fp)
	if (vdev->role == VIRTIO_DEV_MASTER)
 100ef3c:	e0bfff17 	ldw	r2,-4(fp)
 100ef40:	10800517 	ldw	r2,20(r2)
 100ef44:	1000031e 	bne	r2,zero,100ef54 <rproc_virtio_reset_device+0x2c>
		rproc_virtio_set_status(vdev,
 100ef48:	01401004 	movi	r5,64
 100ef4c:	e13fff17 	ldw	r4,-4(fp)
 100ef50:	100ebb80 	call	100ebb8 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 100ef54:	0001883a 	nop
 100ef58:	e037883a 	mov	sp,fp
 100ef5c:	dfc00117 	ldw	ra,4(sp)
 100ef60:	df000017 	ldw	fp,0(sp)
 100ef64:	dec00204 	addi	sp,sp,8
 100ef68:	f800283a 	ret

0100ef6c <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 100ef6c:	defff004 	addi	sp,sp,-64
 100ef70:	dfc00f15 	stw	ra,60(sp)
 100ef74:	df000e15 	stw	fp,56(sp)
 100ef78:	df000e04 	addi	fp,sp,56
 100ef7c:	e13ffc15 	stw	r4,-16(fp)
 100ef80:	e17ffd15 	stw	r5,-12(fp)
 100ef84:	e1bffe15 	stw	r6,-8(fp)
 100ef88:	e1ffff15 	stw	r7,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 100ef8c:	e0bffe17 	ldw	r2,-8(fp)
 100ef90:	e0bff415 	stw	r2,-48(fp)
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 100ef94:	e0bff417 	ldw	r2,-48(fp)
 100ef98:	10800643 	ldbu	r2,25(r2)
 100ef9c:	10803fcc 	andi	r2,r2,255
 100efa0:	e0bff515 	stw	r2,-44(fp)
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 100efa4:	01001104 	movi	r4,68
 100efa8:	100e9b40 	call	100e9b4 <metal_allocate_memory>
 100efac:	e0bff615 	stw	r2,-40(fp)
	if (!rpvdev)
 100efb0:	e0bff617 	ldw	r2,-40(fp)
 100efb4:	1000021e 	bne	r2,zero,100efc0 <rproc_virtio_create_vdev+0x54>
		return NULL;
 100efb8:	0005883a 	mov	r2,zero
 100efbc:	00008106 	br	100f1c4 <rproc_virtio_create_vdev+0x258>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 100efc0:	e0bff517 	ldw	r2,-44(fp)
 100efc4:	10800624 	muli	r2,r2,24
 100efc8:	1009883a 	mov	r4,r2
 100efcc:	100e9b40 	call	100e9b4 <metal_allocate_memory>
 100efd0:	e0bff715 	stw	r2,-36(fp)
	if (!vrings_info)
 100efd4:	e0bff717 	ldw	r2,-36(fp)
 100efd8:	10007626 	beq	r2,zero,100f1b4 <rproc_virtio_create_vdev+0x248>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 100efdc:	01801104 	movi	r6,68
 100efe0:	000b883a 	mov	r5,zero
 100efe4:	e13ff617 	ldw	r4,-40(fp)
 100efe8:	1013b300 	call	1013b30 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 100efec:	01800604 	movi	r6,24
 100eff0:	000b883a 	mov	r5,zero
 100eff4:	e13ff717 	ldw	r4,-36(fp)
 100eff8:	1013b300 	call	1013b30 <memset>
	vdev = &rpvdev->vdev;
 100effc:	e0bff617 	ldw	r2,-40(fp)
 100f000:	10800404 	addi	r2,r2,16
 100f004:	e0bff815 	stw	r2,-32(fp)

	for (i = 0; i < num_vrings; i++) {
 100f008:	e03ff215 	stw	zero,-56(fp)
 100f00c:	00002306 	br	100f09c <rproc_virtio_create_vdev+0x130>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 100f010:	e03ff315 	stw	zero,-52(fp)

		vring_rsc = &vdev_rsc->vring[i];
 100f014:	e0bff217 	ldw	r2,-56(fp)
 100f018:	10800524 	muli	r2,r2,20
 100f01c:	10800704 	addi	r2,r2,28
 100f020:	e0fff417 	ldw	r3,-48(fp)
 100f024:	1885883a 	add	r2,r3,r2
 100f028:	e0bff915 	stw	r2,-28(fp)
		if (role == VIRTIO_DEV_MASTER) {
 100f02c:	e0bffc17 	ldw	r2,-16(fp)
 100f030:	10000c1e 	bne	r2,zero,100f064 <rproc_virtio_create_vdev+0xf8>
			num_extra_desc = vring_rsc->num;
 100f034:	e0bff917 	ldw	r2,-28(fp)
 100f038:	10c00203 	ldbu	r3,8(r2)
 100f03c:	11000243 	ldbu	r4,9(r2)
 100f040:	2008923a 	slli	r4,r4,8
 100f044:	20c6b03a 	or	r3,r4,r3
 100f048:	11000283 	ldbu	r4,10(r2)
 100f04c:	2008943a 	slli	r4,r4,16
 100f050:	20c6b03a 	or	r3,r4,r3
 100f054:	108002c3 	ldbu	r2,11(r2)
 100f058:	1004963a 	slli	r2,r2,24
 100f05c:	10c4b03a 	or	r2,r2,r3
 100f060:	e0bff315 	stw	r2,-52(fp)
		}
		vq = virtqueue_allocate(num_extra_desc);
 100f064:	e13ff317 	ldw	r4,-52(fp)
 100f068:	100ea180 	call	100ea18 <virtqueue_allocate>
 100f06c:	e0bffa15 	stw	r2,-24(fp)
		if (!vq)
 100f070:	e0bffa17 	ldw	r2,-24(fp)
 100f074:	10003626 	beq	r2,zero,100f150 <rproc_virtio_create_vdev+0x1e4>
			goto err1;
		vrings_info[i].vq = vq;
 100f078:	e0bff217 	ldw	r2,-56(fp)
 100f07c:	10800624 	muli	r2,r2,24
 100f080:	e0fff717 	ldw	r3,-36(fp)
 100f084:	1885883a 	add	r2,r3,r2
 100f088:	e0fffa17 	ldw	r3,-24(fp)
 100f08c:	10c00015 	stw	r3,0(r2)
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
	memset(vrings_info, 0, sizeof(*vrings_info));
	vdev = &rpvdev->vdev;

	for (i = 0; i < num_vrings; i++) {
 100f090:	e0bff217 	ldw	r2,-56(fp)
 100f094:	10800044 	addi	r2,r2,1
 100f098:	e0bff215 	stw	r2,-56(fp)
 100f09c:	e0fff217 	ldw	r3,-56(fp)
 100f0a0:	e0bff517 	ldw	r2,-44(fp)
 100f0a4:	18bfda36 	bltu	r3,r2,100f010 <__alt_data_end+0xff00f010>
		if (!vq)
			goto err1;
		vrings_info[i].vq = vq;
	}

	rpvdev->notify = notify;
 100f0a8:	e0bff617 	ldw	r2,-40(fp)
 100f0ac:	e0c00317 	ldw	r3,12(fp)
 100f0b0:	10c00315 	stw	r3,12(r2)
	rpvdev->priv = priv;
 100f0b4:	e0bff617 	ldw	r2,-40(fp)
 100f0b8:	e0c00217 	ldw	r3,8(fp)
 100f0bc:	10c00015 	stw	r3,0(r2)
	vdev->vrings_info = vrings_info;
 100f0c0:	e0bff817 	ldw	r2,-32(fp)
 100f0c4:	e0fff717 	ldw	r3,-36(fp)
 100f0c8:	10c00a15 	stw	r3,40(r2)
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 100f0cc:	e0bff617 	ldw	r2,-40(fp)
 100f0d0:	e0fff417 	ldw	r3,-48(fp)
 100f0d4:	10c00115 	stw	r3,4(r2)
	rpvdev->vdev_rsc_io = rsc_io;
 100f0d8:	e0bff617 	ldw	r2,-40(fp)
 100f0dc:	e0ffff17 	ldw	r3,-4(fp)
 100f0e0:	10c00215 	stw	r3,8(r2)

	vdev->notifyid = notifyid;
 100f0e4:	e0bff817 	ldw	r2,-32(fp)
 100f0e8:	e0fffd17 	ldw	r3,-12(fp)
 100f0ec:	10c00015 	stw	r3,0(r2)
	vdev->role = role;
 100f0f0:	e0bff817 	ldw	r2,-32(fp)
 100f0f4:	e0fffc17 	ldw	r3,-16(fp)
 100f0f8:	10c00515 	stw	r3,20(r2)
	vdev->reset_cb = rst_cb;
 100f0fc:	e0bff817 	ldw	r2,-32(fp)
 100f100:	e0c00417 	ldw	r3,16(fp)
 100f104:	10c00615 	stw	r3,24(r2)
	vdev->vrings_num = num_vrings;
 100f108:	e0bff817 	ldw	r2,-32(fp)
 100f10c:	e0fff517 	ldw	r3,-44(fp)
 100f110:	10c00915 	stw	r3,36(r2)
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 100f114:	e0fff817 	ldw	r3,-32(fp)
 100f118:	008040b4 	movhi	r2,258
 100f11c:	10975104 	addi	r2,r2,23876
 100f120:	18800715 	stw	r2,28(r3)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == VIRTIO_DEV_MASTER) {
 100f124:	e0bffc17 	ldw	r2,-16(fp)
 100f128:	1000061e 	bne	r2,zero,100f144 <rproc_virtio_create_vdev+0x1d8>
		uint32_t dfeatures = rproc_virtio_get_dfeatures(vdev);
 100f12c:	e13ff817 	ldw	r4,-32(fp)
 100f130:	100ec8c0 	call	100ec8c <rproc_virtio_get_dfeatures>
 100f134:	e0bffb15 	stw	r2,-20(fp)
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
 100f138:	e17ffb17 	ldw	r5,-20(fp)
 100f13c:	e13ff817 	ldw	r4,-32(fp)
 100f140:	100ee740 	call	100ee74 <rproc_virtio_negotiate_features>
	}
#endif

	return &rpvdev->vdev;
 100f144:	e0bff617 	ldw	r2,-40(fp)
 100f148:	10800404 	addi	r2,r2,16
 100f14c:	00001d06 	br	100f1c4 <rproc_virtio_create_vdev+0x258>
		if (role == VIRTIO_DEV_MASTER) {
			num_extra_desc = vring_rsc->num;
		}
		vq = virtqueue_allocate(num_extra_desc);
		if (!vq)
			goto err1;
 100f150:	0001883a 	nop
#endif

	return &rpvdev->vdev;

err1:
	for (i = 0; i < num_vrings; i++) {
 100f154:	e03ff215 	stw	zero,-56(fp)
 100f158:	00001006 	br	100f19c <rproc_virtio_create_vdev+0x230>
		if (vrings_info[i].vq)
 100f15c:	e0bff217 	ldw	r2,-56(fp)
 100f160:	10800624 	muli	r2,r2,24
 100f164:	e0fff717 	ldw	r3,-36(fp)
 100f168:	1885883a 	add	r2,r3,r2
 100f16c:	10800017 	ldw	r2,0(r2)
 100f170:	10000726 	beq	r2,zero,100f190 <rproc_virtio_create_vdev+0x224>
			metal_free_memory(vrings_info[i].vq);
 100f174:	e0bff217 	ldw	r2,-56(fp)
 100f178:	10800624 	muli	r2,r2,24
 100f17c:	e0fff717 	ldw	r3,-36(fp)
 100f180:	1885883a 	add	r2,r3,r2
 100f184:	10800017 	ldw	r2,0(r2)
 100f188:	1009883a 	mov	r4,r2
 100f18c:	100e9e40 	call	100e9e4 <metal_free_memory>
#endif

	return &rpvdev->vdev;

err1:
	for (i = 0; i < num_vrings; i++) {
 100f190:	e0bff217 	ldw	r2,-56(fp)
 100f194:	10800044 	addi	r2,r2,1
 100f198:	e0bff215 	stw	r2,-56(fp)
 100f19c:	e0fff217 	ldw	r3,-56(fp)
 100f1a0:	e0bff517 	ldw	r2,-44(fp)
 100f1a4:	18bfed36 	bltu	r3,r2,100f15c <__alt_data_end+0xff00f15c>
		if (vrings_info[i].vq)
			metal_free_memory(vrings_info[i].vq);
	}
	metal_free_memory(vrings_info);
 100f1a8:	e13ff717 	ldw	r4,-36(fp)
 100f1ac:	100e9e40 	call	100e9e4 <metal_free_memory>
 100f1b0:	00000106 	br	100f1b8 <rproc_virtio_create_vdev+0x24c>
	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
	if (!rpvdev)
		return NULL;
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
	if (!vrings_info)
		goto err0;
 100f1b4:	0001883a 	nop
		if (vrings_info[i].vq)
			metal_free_memory(vrings_info[i].vq);
	}
	metal_free_memory(vrings_info);
err0:
	metal_free_memory(rpvdev);
 100f1b8:	e13ff617 	ldw	r4,-40(fp)
 100f1bc:	100e9e40 	call	100e9e4 <metal_free_memory>
	return NULL;
 100f1c0:	0005883a 	mov	r2,zero
}
 100f1c4:	e037883a 	mov	sp,fp
 100f1c8:	dfc00117 	ldw	ra,4(sp)
 100f1cc:	df000017 	ldw	fp,0(sp)
 100f1d0:	dec00204 	addi	sp,sp,8
 100f1d4:	f800283a 	ret

0100f1d8 <rproc_virtio_remove_vdev>:

void rproc_virtio_remove_vdev(struct virtio_device *vdev)
{
 100f1d8:	defffa04 	addi	sp,sp,-24
 100f1dc:	dfc00515 	stw	ra,20(sp)
 100f1e0:	df000415 	stw	fp,16(sp)
 100f1e4:	df000404 	addi	fp,sp,16
 100f1e8:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	unsigned int i;

	if (!vdev)
 100f1ec:	e0bfff17 	ldw	r2,-4(fp)
 100f1f0:	10001e26 	beq	r2,zero,100f26c <rproc_virtio_remove_vdev+0x94>
		return;
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f1f4:	e0bfff17 	ldw	r2,-4(fp)
 100f1f8:	10bffc04 	addi	r2,r2,-16
 100f1fc:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i < vdev->vrings_num; i++) {
 100f200:	e03ffc15 	stw	zero,-16(fp)
 100f204:	00000e06 	br	100f240 <rproc_virtio_remove_vdev+0x68>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 100f208:	e0bfff17 	ldw	r2,-4(fp)
 100f20c:	10c00a17 	ldw	r3,40(r2)
 100f210:	e0bffc17 	ldw	r2,-16(fp)
 100f214:	10800624 	muli	r2,r2,24
 100f218:	1885883a 	add	r2,r3,r2
 100f21c:	10800017 	ldw	r2,0(r2)
 100f220:	e0bffe15 	stw	r2,-8(fp)
		if (vq)
 100f224:	e0bffe17 	ldw	r2,-8(fp)
 100f228:	10000226 	beq	r2,zero,100f234 <rproc_virtio_remove_vdev+0x5c>
			metal_free_memory(vq);
 100f22c:	e13ffe17 	ldw	r4,-8(fp)
 100f230:	100e9e40 	call	100e9e4 <metal_free_memory>
	unsigned int i;

	if (!vdev)
		return;
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
	for (i = 0; i < vdev->vrings_num; i++) {
 100f234:	e0bffc17 	ldw	r2,-16(fp)
 100f238:	10800044 	addi	r2,r2,1
 100f23c:	e0bffc15 	stw	r2,-16(fp)
 100f240:	e0bfff17 	ldw	r2,-4(fp)
 100f244:	10800917 	ldw	r2,36(r2)
 100f248:	e0fffc17 	ldw	r3,-16(fp)
 100f24c:	18bfee36 	bltu	r3,r2,100f208 <__alt_data_end+0xff00f208>

		vq = vdev->vrings_info[i].vq;
		if (vq)
			metal_free_memory(vq);
	}
	metal_free_memory(vdev->vrings_info);
 100f250:	e0bfff17 	ldw	r2,-4(fp)
 100f254:	10800a17 	ldw	r2,40(r2)
 100f258:	1009883a 	mov	r4,r2
 100f25c:	100e9e40 	call	100e9e4 <metal_free_memory>
	metal_free_memory(rpvdev);
 100f260:	e13ffd17 	ldw	r4,-12(fp)
 100f264:	100e9e40 	call	100e9e4 <metal_free_memory>
 100f268:	00000106 	br	100f270 <rproc_virtio_remove_vdev+0x98>
{
	struct remoteproc_virtio *rpvdev;
	unsigned int i;

	if (!vdev)
		return;
 100f26c:	0001883a 	nop
		if (vq)
			metal_free_memory(vq);
	}
	metal_free_memory(vdev->vrings_info);
	metal_free_memory(rpvdev);
}
 100f270:	e037883a 	mov	sp,fp
 100f274:	dfc00117 	ldw	ra,4(sp)
 100f278:	df000017 	ldw	fp,0(sp)
 100f27c:	dec00204 	addi	sp,sp,8
 100f280:	f800283a 	ret

0100f284 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 100f284:	defff904 	addi	sp,sp,-28
 100f288:	df000615 	stw	fp,24(sp)
 100f28c:	df000604 	addi	fp,sp,24
 100f290:	e13ffc15 	stw	r4,-16(fp)
 100f294:	e17ffd15 	stw	r5,-12(fp)
 100f298:	e1bffe15 	stw	r6,-8(fp)
 100f29c:	e1ffff15 	stw	r7,-4(fp)
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 100f2a0:	e0bffc17 	ldw	r2,-16(fp)
 100f2a4:	10800917 	ldw	r2,36(r2)
 100f2a8:	e0bffa15 	stw	r2,-24(fp)
	if (index >= num_vrings)
 100f2ac:	e0fffd17 	ldw	r3,-12(fp)
 100f2b0:	e0bffa17 	ldw	r2,-24(fp)
 100f2b4:	18800236 	bltu	r3,r2,100f2c0 <rproc_virtio_init_vring+0x3c>
		return -RPROC_EINVAL;
 100f2b8:	00bfff84 	movi	r2,-2
 100f2bc:	00001706 	br	100f31c <rproc_virtio_init_vring+0x98>
	vring_info = &vdev->vrings_info[index];
 100f2c0:	e0bffc17 	ldw	r2,-16(fp)
 100f2c4:	10c00a17 	ldw	r3,40(r2)
 100f2c8:	e0bffd17 	ldw	r2,-12(fp)
 100f2cc:	10800624 	muli	r2,r2,24
 100f2d0:	1885883a 	add	r2,r3,r2
 100f2d4:	e0bffb15 	stw	r2,-20(fp)
	vring_info->io = io;
 100f2d8:	e0bffb17 	ldw	r2,-20(fp)
 100f2dc:	e0c00117 	ldw	r3,4(fp)
 100f2e0:	10c00515 	stw	r3,20(r2)
	vring_info->notifyid = notifyid;
 100f2e4:	e0bffb17 	ldw	r2,-20(fp)
 100f2e8:	e0fffe17 	ldw	r3,-8(fp)
 100f2ec:	10c00415 	stw	r3,16(r2)
	vring_info->info.vaddr = va;
 100f2f0:	e0bffb17 	ldw	r2,-20(fp)
 100f2f4:	e0ffff17 	ldw	r3,-4(fp)
 100f2f8:	10c00115 	stw	r3,4(r2)
	vring_info->info.num_descs = num_descs;
 100f2fc:	e0800217 	ldw	r2,8(fp)
 100f300:	1007883a 	mov	r3,r2
 100f304:	e0bffb17 	ldw	r2,-20(fp)
 100f308:	10c0030d 	sth	r3,12(r2)
	vring_info->info.align = align;
 100f30c:	e0bffb17 	ldw	r2,-20(fp)
 100f310:	e0c00317 	ldw	r3,12(fp)
 100f314:	10c00215 	stw	r3,8(r2)

	return 0;
 100f318:	0005883a 	mov	r2,zero
}
 100f31c:	e037883a 	mov	sp,fp
 100f320:	df000017 	ldw	fp,0(sp)
 100f324:	dec00104 	addi	sp,sp,4
 100f328:	f800283a 	ret

0100f32c <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 100f32c:	defff804 	addi	sp,sp,-32
 100f330:	dfc00715 	stw	ra,28(sp)
 100f334:	df000615 	stw	fp,24(sp)
 100f338:	df000604 	addi	fp,sp,24
 100f33c:	e13ffe15 	stw	r4,-8(fp)
 100f340:	e17fff15 	stw	r5,-4(fp)
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 100f344:	e0bffe17 	ldw	r2,-8(fp)
 100f348:	1000021e 	bne	r2,zero,100f354 <rproc_virtio_notified+0x28>
		return -RPROC_EINVAL;
 100f34c:	00bfff84 	movi	r2,-2
 100f350:	00002406 	br	100f3e4 <rproc_virtio_notified+0xb8>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
 100f354:	e0bffe17 	ldw	r2,-8(fp)
 100f358:	10c00017 	ldw	r3,0(r2)
 100f35c:	e0bfff17 	ldw	r2,-4(fp)
 100f360:	1880021e 	bne	r3,r2,100f36c <rproc_virtio_notified+0x40>
		return 0;
 100f364:	0005883a 	mov	r2,zero
 100f368:	00001e06 	br	100f3e4 <rproc_virtio_notified+0xb8>
	num_vrings = vdev->vrings_num;
 100f36c:	e0bffe17 	ldw	r2,-8(fp)
 100f370:	10800917 	ldw	r2,36(r2)
 100f374:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < num_vrings; i++) {
 100f378:	e03ffa15 	stw	zero,-24(fp)
 100f37c:	00001506 	br	100f3d4 <rproc_virtio_notified+0xa8>
		vring_info = &vdev->vrings_info[i];
 100f380:	e0bffe17 	ldw	r2,-8(fp)
 100f384:	10c00a17 	ldw	r3,40(r2)
 100f388:	e0bffa17 	ldw	r2,-24(fp)
 100f38c:	10800624 	muli	r2,r2,24
 100f390:	1885883a 	add	r2,r3,r2
 100f394:	e0bffc15 	stw	r2,-16(fp)
		if (vring_info->notifyid == notifyid ||
 100f398:	e0bffc17 	ldw	r2,-16(fp)
 100f39c:	10c00417 	ldw	r3,16(r2)
 100f3a0:	e0bfff17 	ldw	r2,-4(fp)
 100f3a4:	18800326 	beq	r3,r2,100f3b4 <rproc_virtio_notified+0x88>
 100f3a8:	e0bfff17 	ldw	r2,-4(fp)
 100f3ac:	10bfffd8 	cmpnei	r2,r2,-1
 100f3b0:	1000051e 	bne	r2,zero,100f3c8 <rproc_virtio_notified+0x9c>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 100f3b4:	e0bffc17 	ldw	r2,-16(fp)
 100f3b8:	10800017 	ldw	r2,0(r2)
 100f3bc:	e0bffd15 	stw	r2,-12(fp)
			virtqueue_notification(vq);
 100f3c0:	e13ffd17 	ldw	r4,-12(fp)
 100f3c4:	10135b80 	call	10135b8 <virtqueue_notification>
		return -RPROC_EINVAL;
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
		return 0;
	num_vrings = vdev->vrings_num;
	for (i = 0; i < num_vrings; i++) {
 100f3c8:	e0bffa17 	ldw	r2,-24(fp)
 100f3cc:	10800044 	addi	r2,r2,1
 100f3d0:	e0bffa15 	stw	r2,-24(fp)
 100f3d4:	e0fffa17 	ldw	r3,-24(fp)
 100f3d8:	e0bffb17 	ldw	r2,-20(fp)
 100f3dc:	18bfe836 	bltu	r3,r2,100f380 <__alt_data_end+0xff00f380>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
			virtqueue_notification(vq);
		}
	}
	return 0;
 100f3e0:	0005883a 	mov	r2,zero
}
 100f3e4:	e037883a 	mov	sp,fp
 100f3e8:	dfc00117 	ldw	ra,4(sp)
 100f3ec:	df000017 	ldw	fp,0(sp)
 100f3f0:	dec00204 	addi	sp,sp,8
 100f3f4:	f800283a 	ret

0100f3f8 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 100f3f8:	defffc04 	addi	sp,sp,-16
 100f3fc:	dfc00315 	stw	ra,12(sp)
 100f400:	df000215 	stw	fp,8(sp)
 100f404:	df000204 	addi	fp,sp,8
 100f408:	e13fff15 	stw	r4,-4(fp)
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 100f40c:	e0bfff17 	ldw	r2,-4(fp)
 100f410:	10800517 	ldw	r2,20(r2)
 100f414:	10000726 	beq	r2,zero,100f434 <rproc_virtio_wait_remote_ready+0x3c>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 100f418:	e13fff17 	ldw	r4,-4(fp)
 100f41c:	100eb340 	call	100eb34 <rproc_virtio_get_status>
 100f420:	e0bffe05 	stb	r2,-8(fp)
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 100f424:	e0bffe03 	ldbu	r2,-8(fp)
 100f428:	1080010c 	andi	r2,r2,4
 100f42c:	1000031e 	bne	r2,zero,100f43c <rproc_virtio_wait_remote_ready+0x44>
			return;
		metal_cpu_yield();
	}
 100f430:	003ff906 	br	100f418 <__alt_data_end+0xff00f418>
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
		return;
 100f434:	0001883a 	nop
 100f438:	00000106 	br	100f440 <rproc_virtio_wait_remote_ready+0x48>

	while (1) {
		status = rproc_virtio_get_status(vdev);
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
			return;
 100f43c:	0001883a 	nop
		metal_cpu_yield();
	}
}
 100f440:	e037883a 	mov	sp,fp
 100f444:	dfc00117 	ldw	ra,4(sp)
 100f448:	df000017 	ldw	fp,0(sp)
 100f44c:	dec00204 	addi	sp,sp,8
 100f450:	f800283a 	ret

0100f454 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100f454:	defffc04 	addi	sp,sp,-16
 100f458:	df000315 	stw	fp,12(sp)
 100f45c:	df000304 	addi	fp,sp,12
 100f460:	e13ffe15 	stw	r4,-8(fp)
 100f464:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100f468:	e0bfff17 	ldw	r2,-4(fp)
 100f46c:	e0fffe17 	ldw	r3,-8(fp)
 100f470:	18c00017 	ldw	r3,0(r3)
 100f474:	10c5c83a 	sub	r2,r2,r3
 100f478:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100f47c:	e0bffe17 	ldw	r2,-8(fp)
 100f480:	10800217 	ldw	r2,8(r2)
 100f484:	e0fffd17 	ldw	r3,-12(fp)
 100f488:	1880022e 	bgeu	r3,r2,100f494 <metal_io_virt_to_offset+0x40>
 100f48c:	e0bffd17 	ldw	r2,-12(fp)
 100f490:	00000106 	br	100f498 <metal_io_virt_to_offset+0x44>
 100f494:	00bfffc4 	movi	r2,-1
}
 100f498:	e037883a 	mov	sp,fp
 100f49c:	df000017 	ldw	fp,0(sp)
 100f4a0:	dec00104 	addi	sp,sp,4
 100f4a4:	f800283a 	ret

0100f4a8 <handle_rsc_table>:
};

int handle_rsc_table(struct remoteproc *rproc,
		     struct resource_table *rsc_table, size_t size,
		     struct metal_io_region *io)
{
 100f4a8:	defff504 	addi	sp,sp,-44
 100f4ac:	dfc00a15 	stw	ra,40(sp)
 100f4b0:	df000915 	stw	fp,36(sp)
 100f4b4:	df000904 	addi	fp,sp,36
 100f4b8:	e13ffc15 	stw	r4,-16(fp)
 100f4bc:	e17ffd15 	stw	r5,-12(fp)
 100f4c0:	e1bffe15 	stw	r6,-8(fp)
 100f4c4:	e1ffff15 	stw	r7,-4(fp)
	char *rsc_start;
	unsigned int rsc_type;
	unsigned int idx, offset;
	int status = 0;
 100f4c8:	e03ff815 	stw	zero,-32(fp)

	/* Validate rsc table header fields */

	/* Minimum rsc table size */
	if (sizeof(struct resource_table) > size) {
 100f4cc:	e0bffe17 	ldw	r2,-8(fp)
 100f4d0:	10800428 	cmpgeui	r2,r2,16
 100f4d4:	1000021e 	bne	r2,zero,100f4e0 <handle_rsc_table+0x38>
		return -RPROC_ERR_RSC_TAB_TRUNC;
 100f4d8:	00bffec4 	movi	r2,-5
 100f4dc:	00009906 	br	100f744 <handle_rsc_table+0x29c>
	}

	/* Supported version */
	if (rsc_table->ver != RSC_TAB_SUPPORTED_VERSION) {
 100f4e0:	e0bffd17 	ldw	r2,-12(fp)
 100f4e4:	10c00003 	ldbu	r3,0(r2)
 100f4e8:	11000043 	ldbu	r4,1(r2)
 100f4ec:	2008923a 	slli	r4,r4,8
 100f4f0:	20c6b03a 	or	r3,r4,r3
 100f4f4:	11000083 	ldbu	r4,2(r2)
 100f4f8:	2008943a 	slli	r4,r4,16
 100f4fc:	20c6b03a 	or	r3,r4,r3
 100f500:	108000c3 	ldbu	r2,3(r2)
 100f504:	1004963a 	slli	r2,r2,24
 100f508:	10c4b03a 	or	r2,r2,r3
 100f50c:	10800060 	cmpeqi	r2,r2,1
 100f510:	1000021e 	bne	r2,zero,100f51c <handle_rsc_table+0x74>
		return -RPROC_ERR_RSC_TAB_VER;
 100f514:	00bffe84 	movi	r2,-6
 100f518:	00008a06 	br	100f744 <handle_rsc_table+0x29c>
	}

	/* Offset array */
	offset = sizeof(struct resource_table)
		 + rsc_table->num * sizeof(rsc_table->offset[0]);
 100f51c:	e0bffd17 	ldw	r2,-12(fp)
 100f520:	10c00103 	ldbu	r3,4(r2)
 100f524:	11000143 	ldbu	r4,5(r2)
 100f528:	2008923a 	slli	r4,r4,8
 100f52c:	20c6b03a 	or	r3,r4,r3
 100f530:	11000183 	ldbu	r4,6(r2)
 100f534:	2008943a 	slli	r4,r4,16
 100f538:	20c6b03a 	or	r3,r4,r3
 100f53c:	108001c3 	ldbu	r2,7(r2)
 100f540:	1004963a 	slli	r2,r2,24
 100f544:	10c4b03a 	or	r2,r2,r3
	if (rsc_table->ver != RSC_TAB_SUPPORTED_VERSION) {
		return -RPROC_ERR_RSC_TAB_VER;
	}

	/* Offset array */
	offset = sizeof(struct resource_table)
 100f548:	10800104 	addi	r2,r2,4
 100f54c:	1085883a 	add	r2,r2,r2
 100f550:	1085883a 	add	r2,r2,r2
 100f554:	e0bff915 	stw	r2,-28(fp)
		 + rsc_table->num * sizeof(rsc_table->offset[0]);

	if (offset > size) {
 100f558:	e0bff917 	ldw	r2,-28(fp)
 100f55c:	e0fffe17 	ldw	r3,-8(fp)
 100f560:	1880022e 	bgeu	r3,r2,100f56c <handle_rsc_table+0xc4>
		return -RPROC_ERR_RSC_TAB_TRUNC;
 100f564:	00bffec4 	movi	r2,-5
 100f568:	00007606 	br	100f744 <handle_rsc_table+0x29c>
	}

	/* Reserved fields - must be zero */
	if ((rsc_table->reserved[0] != 0 || rsc_table->reserved[1]) != 0) {
 100f56c:	e0bffd17 	ldw	r2,-12(fp)
 100f570:	10c00203 	ldbu	r3,8(r2)
 100f574:	11000243 	ldbu	r4,9(r2)
 100f578:	2008923a 	slli	r4,r4,8
 100f57c:	20c6b03a 	or	r3,r4,r3
 100f580:	11000283 	ldbu	r4,10(r2)
 100f584:	2008943a 	slli	r4,r4,16
 100f588:	20c6b03a 	or	r3,r4,r3
 100f58c:	108002c3 	ldbu	r2,11(r2)
 100f590:	1004963a 	slli	r2,r2,24
 100f594:	10c4b03a 	or	r2,r2,r3
 100f598:	10000c1e 	bne	r2,zero,100f5cc <handle_rsc_table+0x124>
 100f59c:	e0bffd17 	ldw	r2,-12(fp)
 100f5a0:	10c00303 	ldbu	r3,12(r2)
 100f5a4:	11000343 	ldbu	r4,13(r2)
 100f5a8:	2008923a 	slli	r4,r4,8
 100f5ac:	20c6b03a 	or	r3,r4,r3
 100f5b0:	11000383 	ldbu	r4,14(r2)
 100f5b4:	2008943a 	slli	r4,r4,16
 100f5b8:	20c6b03a 	or	r3,r4,r3
 100f5bc:	108003c3 	ldbu	r2,15(r2)
 100f5c0:	1004963a 	slli	r2,r2,24
 100f5c4:	10c4b03a 	or	r2,r2,r3
 100f5c8:	10000226 	beq	r2,zero,100f5d4 <handle_rsc_table+0x12c>
 100f5cc:	00800044 	movi	r2,1
 100f5d0:	00000106 	br	100f5d8 <handle_rsc_table+0x130>
 100f5d4:	0005883a 	mov	r2,zero
 100f5d8:	10000226 	beq	r2,zero,100f5e4 <handle_rsc_table+0x13c>
		return -RPROC_ERR_RSC_TAB_RSVD;
 100f5dc:	00bffe44 	movi	r2,-7
 100f5e0:	00005806 	br	100f744 <handle_rsc_table+0x29c>
	}

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
 100f5e4:	e03ff715 	stw	zero,-36(fp)
 100f5e8:	00004506 	br	100f700 <handle_rsc_table+0x258>
		rsc_start = (char *)rsc_table;
 100f5ec:	e0bffd17 	ldw	r2,-12(fp)
 100f5f0:	e0bffa15 	stw	r2,-24(fp)
		rsc_start += rsc_table->offset[idx];
 100f5f4:	e0fffd17 	ldw	r3,-12(fp)
 100f5f8:	e0bff717 	ldw	r2,-36(fp)
 100f5fc:	10800104 	addi	r2,r2,4
 100f600:	1085883a 	add	r2,r2,r2
 100f604:	1085883a 	add	r2,r2,r2
 100f608:	1885883a 	add	r2,r3,r2
 100f60c:	10c00003 	ldbu	r3,0(r2)
 100f610:	11000043 	ldbu	r4,1(r2)
 100f614:	2008923a 	slli	r4,r4,8
 100f618:	20c6b03a 	or	r3,r4,r3
 100f61c:	11000083 	ldbu	r4,2(r2)
 100f620:	2008943a 	slli	r4,r4,16
 100f624:	20c6b03a 	or	r3,r4,r3
 100f628:	108000c3 	ldbu	r2,3(r2)
 100f62c:	1004963a 	slli	r2,r2,24
 100f630:	10c4b03a 	or	r2,r2,r3
 100f634:	1007883a 	mov	r3,r2
 100f638:	e0bffa17 	ldw	r2,-24(fp)
 100f63c:	10c5883a 	add	r2,r2,r3
 100f640:	e0bffa15 	stw	r2,-24(fp)
		if (io &&
 100f644:	e0bfff17 	ldw	r2,-4(fp)
 100f648:	10000726 	beq	r2,zero,100f668 <handle_rsc_table+0x1c0>
		    metal_io_virt_to_offset(io, rsc_start) == METAL_BAD_OFFSET)
 100f64c:	e17ffa17 	ldw	r5,-24(fp)
 100f650:	e13fff17 	ldw	r4,-4(fp)
 100f654:	100f4540 	call	100f454 <metal_io_virt_to_offset>

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
		rsc_start = (char *)rsc_table;
		rsc_start += rsc_table->offset[idx];
		if (io &&
 100f658:	10bfffd8 	cmpnei	r2,r2,-1
 100f65c:	1000021e 	bne	r2,zero,100f668 <handle_rsc_table+0x1c0>
		    metal_io_virt_to_offset(io, rsc_start) == METAL_BAD_OFFSET)
			return -RPROC_ERR_RSC_TAB_TRUNC;
 100f660:	00bffec4 	movi	r2,-5
 100f664:	00003706 	br	100f744 <handle_rsc_table+0x29c>
		rsc_type = *((uint32_t *)rsc_start);
 100f668:	e0bffa17 	ldw	r2,-24(fp)
 100f66c:	10800017 	ldw	r2,0(r2)
 100f670:	e0bffb15 	stw	r2,-20(fp)
		if (rsc_type < RSC_LAST)
 100f674:	e0bffb17 	ldw	r2,-20(fp)
 100f678:	10800128 	cmpgeui	r2,r2,4
 100f67c:	10000c1e 	bne	r2,zero,100f6b0 <handle_rsc_table+0x208>
			status = rsc_handler_table[rsc_type](rproc,
 100f680:	008040b4 	movhi	r2,258
 100f684:	10976a04 	addi	r2,r2,23976
 100f688:	e0fffb17 	ldw	r3,-20(fp)
 100f68c:	18c7883a 	add	r3,r3,r3
 100f690:	18c7883a 	add	r3,r3,r3
 100f694:	10c5883a 	add	r2,r2,r3
 100f698:	10800017 	ldw	r2,0(r2)
 100f69c:	e17ffa17 	ldw	r5,-24(fp)
 100f6a0:	e13ffc17 	ldw	r4,-16(fp)
 100f6a4:	103ee83a 	callr	r2
 100f6a8:	e0bff815 	stw	r2,-32(fp)
 100f6ac:	00000a06 	br	100f6d8 <handle_rsc_table+0x230>
							     rsc_start);
		else if (rsc_type >= RSC_VENDOR_START &&
 100f6b0:	e0bffb17 	ldw	r2,-20(fp)
 100f6b4:	10802030 	cmpltui	r2,r2,128
 100f6b8:	1000071e 	bne	r2,zero,100f6d8 <handle_rsc_table+0x230>
 100f6bc:	e0bffb17 	ldw	r2,-20(fp)
 100f6c0:	10808068 	cmpgeui	r2,r2,513
 100f6c4:	1000041e 	bne	r2,zero,100f6d8 <handle_rsc_table+0x230>
			 rsc_type <= RSC_VENDOR_END)
			status = handle_vendor_rsc(rproc, rsc_start);
 100f6c8:	e17ffa17 	ldw	r5,-24(fp)
 100f6cc:	e13ffc17 	ldw	r4,-16(fp)
 100f6d0:	100f8cc0 	call	100f8cc <handle_vendor_rsc>
 100f6d4:	e0bff815 	stw	r2,-32(fp)
		if (status == -RPROC_ERR_RSC_TAB_NS) {
 100f6d8:	e0bff817 	ldw	r2,-32(fp)
 100f6dc:	10bffd58 	cmpnei	r2,r2,-11
 100f6e0:	1000021e 	bne	r2,zero,100f6ec <handle_rsc_table+0x244>
			status = 0;
 100f6e4:	e03ff815 	stw	zero,-32(fp)
			continue;
 100f6e8:	00000206 	br	100f6f4 <handle_rsc_table+0x24c>
		}
		else if (status)
 100f6ec:	e0bff817 	ldw	r2,-32(fp)
 100f6f0:	1000121e 	bne	r2,zero,100f73c <handle_rsc_table+0x294>
	if ((rsc_table->reserved[0] != 0 || rsc_table->reserved[1]) != 0) {
		return -RPROC_ERR_RSC_TAB_RSVD;
	}

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
 100f6f4:	e0bff717 	ldw	r2,-36(fp)
 100f6f8:	10800044 	addi	r2,r2,1
 100f6fc:	e0bff715 	stw	r2,-36(fp)
 100f700:	e0bffd17 	ldw	r2,-12(fp)
 100f704:	10c00103 	ldbu	r3,4(r2)
 100f708:	11000143 	ldbu	r4,5(r2)
 100f70c:	2008923a 	slli	r4,r4,8
 100f710:	20c6b03a 	or	r3,r4,r3
 100f714:	11000183 	ldbu	r4,6(r2)
 100f718:	2008943a 	slli	r4,r4,16
 100f71c:	20c6b03a 	or	r3,r4,r3
 100f720:	108001c3 	ldbu	r2,7(r2)
 100f724:	1004963a 	slli	r2,r2,24
 100f728:	10c4b03a 	or	r2,r2,r3
 100f72c:	1007883a 	mov	r3,r2
 100f730:	e0bff717 	ldw	r2,-36(fp)
 100f734:	10ffad36 	bltu	r2,r3,100f5ec <__alt_data_end+0xff00f5ec>
 100f738:	00000106 	br	100f740 <handle_rsc_table+0x298>
		if (status == -RPROC_ERR_RSC_TAB_NS) {
			status = 0;
			continue;
		}
		else if (status)
			break;
 100f73c:	0001883a 	nop
	}

	return status;
 100f740:	e0bff817 	ldw	r2,-32(fp)
}
 100f744:	e037883a 	mov	sp,fp
 100f748:	dfc00117 	ldw	ra,4(sp)
 100f74c:	df000017 	ldw	fp,0(sp)
 100f750:	dec00204 	addi	sp,sp,8
 100f754:	f800283a 	ret

0100f758 <handle_carve_out_rsc>:
 *
 * @returns - 0 for success, or negative value for failure
 *
 */
int handle_carve_out_rsc(struct remoteproc *rproc, void *rsc)
{
 100f758:	defff504 	addi	sp,sp,-44
 100f75c:	dfc00a15 	stw	ra,40(sp)
 100f760:	df000915 	stw	fp,36(sp)
 100f764:	df000904 	addi	fp,sp,36
 100f768:	e13ffe15 	stw	r4,-8(fp)
 100f76c:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_carveout *carve_rsc = rsc;
 100f770:	e0bfff17 	ldw	r2,-4(fp)
 100f774:	e0bff915 	stw	r2,-28(fp)
	metal_phys_addr_t pa;
	size_t size;
	unsigned int attribute;

	/* Validate resource fields */
	if (!carve_rsc) {
 100f778:	e0bff917 	ldw	r2,-28(fp)
 100f77c:	1000021e 	bne	r2,zero,100f788 <handle_carve_out_rsc+0x30>
		return -RPROC_ERR_RSC_TAB_NP;
 100f780:	00bffd84 	movi	r2,-10
 100f784:	00004c06 	br	100f8b8 <handle_carve_out_rsc+0x160>
	}

	if (carve_rsc->reserved) {
 100f788:	e0bff917 	ldw	r2,-28(fp)
 100f78c:	10c00503 	ldbu	r3,20(r2)
 100f790:	11000543 	ldbu	r4,21(r2)
 100f794:	2008923a 	slli	r4,r4,8
 100f798:	20c6b03a 	or	r3,r4,r3
 100f79c:	11000583 	ldbu	r4,22(r2)
 100f7a0:	2008943a 	slli	r4,r4,16
 100f7a4:	20c6b03a 	or	r3,r4,r3
 100f7a8:	108005c3 	ldbu	r2,23(r2)
 100f7ac:	1004963a 	slli	r2,r2,24
 100f7b0:	10c4b03a 	or	r2,r2,r3
 100f7b4:	10000226 	beq	r2,zero,100f7c0 <handle_carve_out_rsc+0x68>
		return -RPROC_ERR_RSC_TAB_RSVD;
 100f7b8:	00bffe44 	movi	r2,-7
 100f7bc:	00003e06 	br	100f8b8 <handle_carve_out_rsc+0x160>
	}
	pa = carve_rsc->pa;
 100f7c0:	e0bff917 	ldw	r2,-28(fp)
 100f7c4:	10c00203 	ldbu	r3,8(r2)
 100f7c8:	11000243 	ldbu	r4,9(r2)
 100f7cc:	2008923a 	slli	r4,r4,8
 100f7d0:	20c6b03a 	or	r3,r4,r3
 100f7d4:	11000283 	ldbu	r4,10(r2)
 100f7d8:	2008943a 	slli	r4,r4,16
 100f7dc:	20c6b03a 	or	r3,r4,r3
 100f7e0:	108002c3 	ldbu	r2,11(r2)
 100f7e4:	1004963a 	slli	r2,r2,24
 100f7e8:	10c4b03a 	or	r2,r2,r3
 100f7ec:	e0bffd15 	stw	r2,-12(fp)
	da = carve_rsc->da;
 100f7f0:	e0bff917 	ldw	r2,-28(fp)
 100f7f4:	10c00103 	ldbu	r3,4(r2)
 100f7f8:	11000143 	ldbu	r4,5(r2)
 100f7fc:	2008923a 	slli	r4,r4,8
 100f800:	20c6b03a 	or	r3,r4,r3
 100f804:	11000183 	ldbu	r4,6(r2)
 100f808:	2008943a 	slli	r4,r4,16
 100f80c:	20c6b03a 	or	r3,r4,r3
 100f810:	108001c3 	ldbu	r2,7(r2)
 100f814:	1004963a 	slli	r2,r2,24
 100f818:	10c4b03a 	or	r2,r2,r3
 100f81c:	e0bffc15 	stw	r2,-16(fp)
	size = carve_rsc->len;
 100f820:	e0bff917 	ldw	r2,-28(fp)
 100f824:	10c00303 	ldbu	r3,12(r2)
 100f828:	11000343 	ldbu	r4,13(r2)
 100f82c:	2008923a 	slli	r4,r4,8
 100f830:	20c6b03a 	or	r3,r4,r3
 100f834:	11000383 	ldbu	r4,14(r2)
 100f838:	2008943a 	slli	r4,r4,16
 100f83c:	20c6b03a 	or	r3,r4,r3
 100f840:	108003c3 	ldbu	r2,15(r2)
 100f844:	1004963a 	slli	r2,r2,24
 100f848:	10c4b03a 	or	r2,r2,r3
 100f84c:	e0bffa15 	stw	r2,-24(fp)
	attribute = carve_rsc->flags;
 100f850:	e0bff917 	ldw	r2,-28(fp)
 100f854:	10c00403 	ldbu	r3,16(r2)
 100f858:	11000443 	ldbu	r4,17(r2)
 100f85c:	2008923a 	slli	r4,r4,8
 100f860:	20c6b03a 	or	r3,r4,r3
 100f864:	11000483 	ldbu	r4,18(r2)
 100f868:	2008943a 	slli	r4,r4,16
 100f86c:	20c6b03a 	or	r3,r4,r3
 100f870:	108004c3 	ldbu	r2,19(r2)
 100f874:	1004963a 	slli	r2,r2,24
 100f878:	10c4b03a 	or	r2,r2,r3
 100f87c:	e0bffb15 	stw	r2,-20(fp)
	if (remoteproc_mmap(rproc, &pa, &da, size, attribute, NULL))
 100f880:	e13ffc04 	addi	r4,fp,-16
 100f884:	e0fffd04 	addi	r3,fp,-12
 100f888:	d8000115 	stw	zero,4(sp)
 100f88c:	e0bffb17 	ldw	r2,-20(fp)
 100f890:	d8800015 	stw	r2,0(sp)
 100f894:	e1fffa17 	ldw	r7,-24(fp)
 100f898:	200d883a 	mov	r6,r4
 100f89c:	180b883a 	mov	r5,r3
 100f8a0:	e13ffe17 	ldw	r4,-8(fp)
 100f8a4:	100c6c80 	call	100c6c8 <remoteproc_mmap>
 100f8a8:	10000226 	beq	r2,zero,100f8b4 <handle_carve_out_rsc+0x15c>
		return 0;
 100f8ac:	0005883a 	mov	r2,zero
 100f8b0:	00000106 	br	100f8b8 <handle_carve_out_rsc+0x160>
	else
		return -RPROC_EINVAL;
 100f8b4:	00bfff84 	movi	r2,-2
}
 100f8b8:	e037883a 	mov	sp,fp
 100f8bc:	dfc00117 	ldw	ra,4(sp)
 100f8c0:	df000017 	ldw	fp,0(sp)
 100f8c4:	dec00204 	addi	sp,sp,8
 100f8c8:	f800283a 	ret

0100f8cc <handle_vendor_rsc>:

int handle_vendor_rsc(struct remoteproc *rproc, void *rsc)
{
 100f8cc:	defffa04 	addi	sp,sp,-24
 100f8d0:	dfc00515 	stw	ra,20(sp)
 100f8d4:	df000415 	stw	fp,16(sp)
 100f8d8:	df000404 	addi	fp,sp,16
 100f8dc:	e13ffe15 	stw	r4,-8(fp)
 100f8e0:	e17fff15 	stw	r5,-4(fp)
	if (rproc && rproc->ops->handle_rsc) {
 100f8e4:	e0bffe17 	ldw	r2,-8(fp)
 100f8e8:	10001a26 	beq	r2,zero,100f954 <handle_vendor_rsc+0x88>
 100f8ec:	e0bffe17 	ldw	r2,-8(fp)
 100f8f0:	10800917 	ldw	r2,36(r2)
 100f8f4:	10800317 	ldw	r2,12(r2)
 100f8f8:	10001626 	beq	r2,zero,100f954 <handle_vendor_rsc+0x88>
		struct fw_rsc_vendor *vend_rsc = rsc;
 100f8fc:	e0bfff17 	ldw	r2,-4(fp)
 100f900:	e0bffc15 	stw	r2,-16(fp)
		size_t len = vend_rsc->len;
 100f904:	e0bffc17 	ldw	r2,-16(fp)
 100f908:	10c00103 	ldbu	r3,4(r2)
 100f90c:	11000143 	ldbu	r4,5(r2)
 100f910:	2008923a 	slli	r4,r4,8
 100f914:	20c6b03a 	or	r3,r4,r3
 100f918:	11000183 	ldbu	r4,6(r2)
 100f91c:	2008943a 	slli	r4,r4,16
 100f920:	20c6b03a 	or	r3,r4,r3
 100f924:	108001c3 	ldbu	r2,7(r2)
 100f928:	1004963a 	slli	r2,r2,24
 100f92c:	10c4b03a 	or	r2,r2,r3
 100f930:	e0bffd15 	stw	r2,-12(fp)

		return rproc->ops->handle_rsc(rproc, rsc, len);
 100f934:	e0bffe17 	ldw	r2,-8(fp)
 100f938:	10800917 	ldw	r2,36(r2)
 100f93c:	10800317 	ldw	r2,12(r2)
 100f940:	e1bffd17 	ldw	r6,-12(fp)
 100f944:	e17fff17 	ldw	r5,-4(fp)
 100f948:	e13ffe17 	ldw	r4,-8(fp)
 100f94c:	103ee83a 	callr	r2
 100f950:	00000106 	br	100f958 <handle_vendor_rsc+0x8c>
	}
	return -RPROC_ERR_RSC_TAB_NS;
 100f954:	00bffd44 	movi	r2,-11
}
 100f958:	e037883a 	mov	sp,fp
 100f95c:	dfc00117 	ldw	ra,4(sp)
 100f960:	df000017 	ldw	fp,0(sp)
 100f964:	dec00204 	addi	sp,sp,8
 100f968:	f800283a 	ret

0100f96c <handle_vdev_rsc>:

int handle_vdev_rsc(struct remoteproc *rproc, void *rsc)
{
 100f96c:	defff704 	addi	sp,sp,-36
 100f970:	dfc00815 	stw	ra,32(sp)
 100f974:	df000715 	stw	fp,28(sp)
 100f978:	df000704 	addi	fp,sp,28
 100f97c:	e13ffe15 	stw	r4,-8(fp)
 100f980:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_vdev *vdev_rsc = rsc;
 100f984:	e0bfff17 	ldw	r2,-4(fp)
 100f988:	e0bffa15 	stw	r2,-24(fp)
	unsigned int notifyid, i, num_vrings;

	/* only assign notification IDs but do not initialize vdev */
	notifyid = vdev_rsc->notifyid;
 100f98c:	e0bffa17 	ldw	r2,-24(fp)
 100f990:	10c00203 	ldbu	r3,8(r2)
 100f994:	11000243 	ldbu	r4,9(r2)
 100f998:	2008923a 	slli	r4,r4,8
 100f99c:	20c6b03a 	or	r3,r4,r3
 100f9a0:	11000283 	ldbu	r4,10(r2)
 100f9a4:	2008943a 	slli	r4,r4,16
 100f9a8:	20c6b03a 	or	r3,r4,r3
 100f9ac:	108002c3 	ldbu	r2,11(r2)
 100f9b0:	1004963a 	slli	r2,r2,24
 100f9b4:	10c4b03a 	or	r2,r2,r3
 100f9b8:	e0bffb15 	stw	r2,-20(fp)
	notifyid = remoteproc_allocate_id(rproc,
 100f9bc:	e0bffb17 	ldw	r2,-20(fp)
 100f9c0:	10800044 	addi	r2,r2,1
 100f9c4:	100d883a 	mov	r6,r2
 100f9c8:	e17ffb17 	ldw	r5,-20(fp)
 100f9cc:	e13ffe17 	ldw	r4,-8(fp)
 100f9d0:	100e0600 	call	100e060 <remoteproc_allocate_id>
 100f9d4:	e0bffb15 	stw	r2,-20(fp)
					  notifyid, notifyid + 1);
	if (notifyid != RSC_NOTIFY_ID_ANY)
 100f9d8:	e0bffb17 	ldw	r2,-20(fp)
 100f9dc:	10bfffe0 	cmpeqi	r2,r2,-1
 100f9e0:	1000231e 	bne	r2,zero,100fa70 <handle_vdev_rsc+0x104>
		vdev_rsc->notifyid = notifyid;
 100f9e4:	e0bffa17 	ldw	r2,-24(fp)
 100f9e8:	e0fffb17 	ldw	r3,-20(fp)
 100f9ec:	19403fcc 	andi	r5,r3,255
 100f9f0:	10c00203 	ldbu	r3,8(r2)
 100f9f4:	1806703a 	and	r3,r3,zero
 100f9f8:	1809883a 	mov	r4,r3
 100f9fc:	2807883a 	mov	r3,r5
 100fa00:	20c6b03a 	or	r3,r4,r3
 100fa04:	10c00205 	stb	r3,8(r2)
 100fa08:	e0fffb17 	ldw	r3,-20(fp)
 100fa0c:	1806d23a 	srli	r3,r3,8
 100fa10:	19403fcc 	andi	r5,r3,255
 100fa14:	10c00243 	ldbu	r3,9(r2)
 100fa18:	1806703a 	and	r3,r3,zero
 100fa1c:	1809883a 	mov	r4,r3
 100fa20:	2807883a 	mov	r3,r5
 100fa24:	20c6b03a 	or	r3,r4,r3
 100fa28:	10c00245 	stb	r3,9(r2)
 100fa2c:	e0fffb17 	ldw	r3,-20(fp)
 100fa30:	1806d43a 	srli	r3,r3,16
 100fa34:	19403fcc 	andi	r5,r3,255
 100fa38:	10c00283 	ldbu	r3,10(r2)
 100fa3c:	1806703a 	and	r3,r3,zero
 100fa40:	1809883a 	mov	r4,r3
 100fa44:	2807883a 	mov	r3,r5
 100fa48:	20c6b03a 	or	r3,r4,r3
 100fa4c:	10c00285 	stb	r3,10(r2)
 100fa50:	e0fffb17 	ldw	r3,-20(fp)
 100fa54:	180ad63a 	srli	r5,r3,24
 100fa58:	10c002c3 	ldbu	r3,11(r2)
 100fa5c:	1806703a 	and	r3,r3,zero
 100fa60:	1809883a 	mov	r4,r3
 100fa64:	2807883a 	mov	r3,r5
 100fa68:	20c6b03a 	or	r3,r4,r3
 100fa6c:	10c002c5 	stb	r3,11(r2)

	num_vrings = vdev_rsc->num_of_vrings;
 100fa70:	e0bffa17 	ldw	r2,-24(fp)
 100fa74:	10800643 	ldbu	r2,25(r2)
 100fa78:	10803fcc 	andi	r2,r2,255
 100fa7c:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i < num_vrings; i++) {
 100fa80:	e03ff915 	stw	zero,-28(fp)
 100fa84:	00004206 	br	100fb90 <handle_vdev_rsc+0x224>
		struct fw_rsc_vdev_vring *vring_rsc;

		vring_rsc = &vdev_rsc->vring[i];
 100fa88:	e0bff917 	ldw	r2,-28(fp)
 100fa8c:	10800524 	muli	r2,r2,20
 100fa90:	10800704 	addi	r2,r2,28
 100fa94:	e0fffa17 	ldw	r3,-24(fp)
 100fa98:	1885883a 	add	r2,r3,r2
 100fa9c:	e0bffd15 	stw	r2,-12(fp)
		notifyid = vring_rsc->notifyid;
 100faa0:	e0bffd17 	ldw	r2,-12(fp)
 100faa4:	10c00303 	ldbu	r3,12(r2)
 100faa8:	11000343 	ldbu	r4,13(r2)
 100faac:	2008923a 	slli	r4,r4,8
 100fab0:	20c6b03a 	or	r3,r4,r3
 100fab4:	11000383 	ldbu	r4,14(r2)
 100fab8:	2008943a 	slli	r4,r4,16
 100fabc:	20c6b03a 	or	r3,r4,r3
 100fac0:	108003c3 	ldbu	r2,15(r2)
 100fac4:	1004963a 	slli	r2,r2,24
 100fac8:	10c4b03a 	or	r2,r2,r3
 100facc:	e0bffb15 	stw	r2,-20(fp)
		notifyid = remoteproc_allocate_id(rproc,
 100fad0:	e0bffb17 	ldw	r2,-20(fp)
 100fad4:	10800044 	addi	r2,r2,1
 100fad8:	100d883a 	mov	r6,r2
 100fadc:	e17ffb17 	ldw	r5,-20(fp)
 100fae0:	e13ffe17 	ldw	r4,-8(fp)
 100fae4:	100e0600 	call	100e060 <remoteproc_allocate_id>
 100fae8:	e0bffb15 	stw	r2,-20(fp)
						  notifyid,
						  notifyid + 1);
		if (notifyid != RSC_NOTIFY_ID_ANY)
 100faec:	e0bffb17 	ldw	r2,-20(fp)
 100faf0:	10bfffe0 	cmpeqi	r2,r2,-1
 100faf4:	1000231e 	bne	r2,zero,100fb84 <handle_vdev_rsc+0x218>
			vdev_rsc->notifyid = notifyid;
 100faf8:	e0bffa17 	ldw	r2,-24(fp)
 100fafc:	e0fffb17 	ldw	r3,-20(fp)
 100fb00:	19403fcc 	andi	r5,r3,255
 100fb04:	10c00203 	ldbu	r3,8(r2)
 100fb08:	1806703a 	and	r3,r3,zero
 100fb0c:	1809883a 	mov	r4,r3
 100fb10:	2807883a 	mov	r3,r5
 100fb14:	20c6b03a 	or	r3,r4,r3
 100fb18:	10c00205 	stb	r3,8(r2)
 100fb1c:	e0fffb17 	ldw	r3,-20(fp)
 100fb20:	1806d23a 	srli	r3,r3,8
 100fb24:	19403fcc 	andi	r5,r3,255
 100fb28:	10c00243 	ldbu	r3,9(r2)
 100fb2c:	1806703a 	and	r3,r3,zero
 100fb30:	1809883a 	mov	r4,r3
 100fb34:	2807883a 	mov	r3,r5
 100fb38:	20c6b03a 	or	r3,r4,r3
 100fb3c:	10c00245 	stb	r3,9(r2)
 100fb40:	e0fffb17 	ldw	r3,-20(fp)
 100fb44:	1806d43a 	srli	r3,r3,16
 100fb48:	19403fcc 	andi	r5,r3,255
 100fb4c:	10c00283 	ldbu	r3,10(r2)
 100fb50:	1806703a 	and	r3,r3,zero
 100fb54:	1809883a 	mov	r4,r3
 100fb58:	2807883a 	mov	r3,r5
 100fb5c:	20c6b03a 	or	r3,r4,r3
 100fb60:	10c00285 	stb	r3,10(r2)
 100fb64:	e0fffb17 	ldw	r3,-20(fp)
 100fb68:	180ad63a 	srli	r5,r3,24
 100fb6c:	10c002c3 	ldbu	r3,11(r2)
 100fb70:	1806703a 	and	r3,r3,zero
 100fb74:	1809883a 	mov	r4,r3
 100fb78:	2807883a 	mov	r3,r5
 100fb7c:	20c6b03a 	or	r3,r4,r3
 100fb80:	10c002c5 	stb	r3,11(r2)
					  notifyid, notifyid + 1);
	if (notifyid != RSC_NOTIFY_ID_ANY)
		vdev_rsc->notifyid = notifyid;

	num_vrings = vdev_rsc->num_of_vrings;
	for (i = 0; i < num_vrings; i++) {
 100fb84:	e0bff917 	ldw	r2,-28(fp)
 100fb88:	10800044 	addi	r2,r2,1
 100fb8c:	e0bff915 	stw	r2,-28(fp)
 100fb90:	e0fff917 	ldw	r3,-28(fp)
 100fb94:	e0bffc17 	ldw	r2,-16(fp)
 100fb98:	18bfbb36 	bltu	r3,r2,100fa88 <__alt_data_end+0xff00fa88>
						  notifyid + 1);
		if (notifyid != RSC_NOTIFY_ID_ANY)
			vdev_rsc->notifyid = notifyid;
	}

	return 0;
 100fb9c:	0005883a 	mov	r2,zero
}
 100fba0:	e037883a 	mov	sp,fp
 100fba4:	dfc00117 	ldw	ra,4(sp)
 100fba8:	df000017 	ldw	fp,0(sp)
 100fbac:	dec00204 	addi	sp,sp,8
 100fbb0:	f800283a 	ret

0100fbb4 <handle_trace_rsc>:
 *
 * @returns - no service error
 *
 */
int handle_trace_rsc(struct remoteproc *rproc, void *rsc)
{
 100fbb4:	defffc04 	addi	sp,sp,-16
 100fbb8:	df000315 	stw	fp,12(sp)
 100fbbc:	df000304 	addi	fp,sp,12
 100fbc0:	e13ffe15 	stw	r4,-8(fp)
 100fbc4:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_trace *vdev_rsc = rsc;
 100fbc8:	e0bfff17 	ldw	r2,-4(fp)
 100fbcc:	e0bffd15 	stw	r2,-12(fp)
	(void)rproc;

	if (vdev_rsc->da != FW_RSC_U32_ADDR_ANY && vdev_rsc->len != 0)
 100fbd0:	e0bffd17 	ldw	r2,-12(fp)
 100fbd4:	10c00103 	ldbu	r3,4(r2)
 100fbd8:	11000143 	ldbu	r4,5(r2)
 100fbdc:	2008923a 	slli	r4,r4,8
 100fbe0:	20c6b03a 	or	r3,r4,r3
 100fbe4:	11000183 	ldbu	r4,6(r2)
 100fbe8:	2008943a 	slli	r4,r4,16
 100fbec:	20c6b03a 	or	r3,r4,r3
 100fbf0:	108001c3 	ldbu	r2,7(r2)
 100fbf4:	1004963a 	slli	r2,r2,24
 100fbf8:	10c4b03a 	or	r2,r2,r3
 100fbfc:	10bfffe0 	cmpeqi	r2,r2,-1
 100fc00:	10000e1e 	bne	r2,zero,100fc3c <handle_trace_rsc+0x88>
 100fc04:	e0bffd17 	ldw	r2,-12(fp)
 100fc08:	10c00203 	ldbu	r3,8(r2)
 100fc0c:	11000243 	ldbu	r4,9(r2)
 100fc10:	2008923a 	slli	r4,r4,8
 100fc14:	20c6b03a 	or	r3,r4,r3
 100fc18:	11000283 	ldbu	r4,10(r2)
 100fc1c:	2008943a 	slli	r4,r4,16
 100fc20:	20c6b03a 	or	r3,r4,r3
 100fc24:	108002c3 	ldbu	r2,11(r2)
 100fc28:	1004963a 	slli	r2,r2,24
 100fc2c:	10c4b03a 	or	r2,r2,r3
 100fc30:	10000226 	beq	r2,zero,100fc3c <handle_trace_rsc+0x88>
		return 0;
 100fc34:	0005883a 	mov	r2,zero
 100fc38:	00000106 	br	100fc40 <handle_trace_rsc+0x8c>
	/* FIXME: master should allocated a memory used by slave */

	return -RPROC_ERR_RSC_TAB_NS;
 100fc3c:	00bffd44 	movi	r2,-11
}
 100fc40:	e037883a 	mov	sp,fp
 100fc44:	df000017 	ldw	fp,0(sp)
 100fc48:	dec00104 	addi	sp,sp,4
 100fc4c:	f800283a 	ret

0100fc50 <handle_dummy_rsc>:
 *
 * @returns - no service error
 *
 */
static int handle_dummy_rsc(struct remoteproc *rproc, void *rsc)
{
 100fc50:	defffd04 	addi	sp,sp,-12
 100fc54:	df000215 	stw	fp,8(sp)
 100fc58:	df000204 	addi	fp,sp,8
 100fc5c:	e13ffe15 	stw	r4,-8(fp)
 100fc60:	e17fff15 	stw	r5,-4(fp)
	(void)rproc;
	(void)rsc;

	return -RPROC_ERR_RSC_TAB_NS;
 100fc64:	00bffd44 	movi	r2,-11
}
 100fc68:	e037883a 	mov	sp,fp
 100fc6c:	df000017 	ldw	fp,0(sp)
 100fc70:	dec00104 	addi	sp,sp,4
 100fc74:	f800283a 	ret

0100fc78 <find_rsc>:

size_t find_rsc(void *rsc_table, unsigned int rsc_type, unsigned int index)
{
 100fc78:	defff604 	addi	sp,sp,-40
 100fc7c:	dfc00915 	stw	ra,36(sp)
 100fc80:	df000815 	stw	fp,32(sp)
 100fc84:	df000804 	addi	fp,sp,32
 100fc88:	e13ffd15 	stw	r4,-12(fp)
 100fc8c:	e17ffe15 	stw	r5,-8(fp)
 100fc90:	e1bfff15 	stw	r6,-4(fp)
	struct resource_table *r_table = rsc_table;
 100fc94:	e0bffd17 	ldw	r2,-12(fp)
 100fc98:	e0bffa15 	stw	r2,-24(fp)
	unsigned int i, rsc_index;
	unsigned int lrsc_type;
	char *rsc_start;

	metal_assert(r_table);
 100fc9c:	e0bffa17 	ldw	r2,-24(fp)
 100fca0:	1000081e 	bne	r2,zero,100fcc4 <find_rsc+0x4c>
 100fca4:	01c040b4 	movhi	r7,258
 100fca8:	39d76e04 	addi	r7,r7,23992
 100fcac:	018040b4 	movhi	r6,258
 100fcb0:	31977b04 	addi	r6,r6,24044
 100fcb4:	014033c4 	movi	r5,207
 100fcb8:	010040b4 	movhi	r4,258
 100fcbc:	21177004 	addi	r4,r4,24000
 100fcc0:	10138940 	call	1013894 <__assert_func>
	/* Loop through the offset array and parse each resource entry */
	rsc_index = 0;
 100fcc4:	e03ff915 	stw	zero,-28(fp)
	for (i = 0; i < r_table->num; i++) {
 100fcc8:	e03ff815 	stw	zero,-32(fp)
 100fccc:	00003506 	br	100fda4 <find_rsc+0x12c>
		rsc_start = (char *)r_table;
 100fcd0:	e0bffa17 	ldw	r2,-24(fp)
 100fcd4:	e0bffb15 	stw	r2,-20(fp)
		rsc_start += r_table->offset[i];
 100fcd8:	e0fffa17 	ldw	r3,-24(fp)
 100fcdc:	e0bff817 	ldw	r2,-32(fp)
 100fce0:	10800104 	addi	r2,r2,4
 100fce4:	1085883a 	add	r2,r2,r2
 100fce8:	1085883a 	add	r2,r2,r2
 100fcec:	1885883a 	add	r2,r3,r2
 100fcf0:	10c00003 	ldbu	r3,0(r2)
 100fcf4:	11000043 	ldbu	r4,1(r2)
 100fcf8:	2008923a 	slli	r4,r4,8
 100fcfc:	20c6b03a 	or	r3,r4,r3
 100fd00:	11000083 	ldbu	r4,2(r2)
 100fd04:	2008943a 	slli	r4,r4,16
 100fd08:	20c6b03a 	or	r3,r4,r3
 100fd0c:	108000c3 	ldbu	r2,3(r2)
 100fd10:	1004963a 	slli	r2,r2,24
 100fd14:	10c4b03a 	or	r2,r2,r3
 100fd18:	1007883a 	mov	r3,r2
 100fd1c:	e0bffb17 	ldw	r2,-20(fp)
 100fd20:	10c5883a 	add	r2,r2,r3
 100fd24:	e0bffb15 	stw	r2,-20(fp)
		lrsc_type = *((uint32_t *)rsc_start);
 100fd28:	e0bffb17 	ldw	r2,-20(fp)
 100fd2c:	10800017 	ldw	r2,0(r2)
 100fd30:	e0bffc15 	stw	r2,-16(fp)
		if (lrsc_type == rsc_type) {
 100fd34:	e0fffc17 	ldw	r3,-16(fp)
 100fd38:	e0bffe17 	ldw	r2,-8(fp)
 100fd3c:	1880161e 	bne	r3,r2,100fd98 <find_rsc+0x120>
			if (rsc_index++ == index)
 100fd40:	e0bff917 	ldw	r2,-28(fp)
 100fd44:	10c00044 	addi	r3,r2,1
 100fd48:	e0fff915 	stw	r3,-28(fp)
 100fd4c:	e0ffff17 	ldw	r3,-4(fp)
 100fd50:	10c0111e 	bne	r2,r3,100fd98 <find_rsc+0x120>
				return r_table->offset[i];
 100fd54:	e0fffa17 	ldw	r3,-24(fp)
 100fd58:	e0bff817 	ldw	r2,-32(fp)
 100fd5c:	10800104 	addi	r2,r2,4
 100fd60:	1085883a 	add	r2,r2,r2
 100fd64:	1085883a 	add	r2,r2,r2
 100fd68:	1885883a 	add	r2,r3,r2
 100fd6c:	10c00003 	ldbu	r3,0(r2)
 100fd70:	11000043 	ldbu	r4,1(r2)
 100fd74:	2008923a 	slli	r4,r4,8
 100fd78:	20c6b03a 	or	r3,r4,r3
 100fd7c:	11000083 	ldbu	r4,2(r2)
 100fd80:	2008943a 	slli	r4,r4,16
 100fd84:	20c6b03a 	or	r3,r4,r3
 100fd88:	108000c3 	ldbu	r2,3(r2)
 100fd8c:	1004963a 	slli	r2,r2,24
 100fd90:	10c4b03a 	or	r2,r2,r3
 100fd94:	00001206 	br	100fde0 <find_rsc+0x168>
	char *rsc_start;

	metal_assert(r_table);
	/* Loop through the offset array and parse each resource entry */
	rsc_index = 0;
	for (i = 0; i < r_table->num; i++) {
 100fd98:	e0bff817 	ldw	r2,-32(fp)
 100fd9c:	10800044 	addi	r2,r2,1
 100fda0:	e0bff815 	stw	r2,-32(fp)
 100fda4:	e0bffa17 	ldw	r2,-24(fp)
 100fda8:	10c00103 	ldbu	r3,4(r2)
 100fdac:	11000143 	ldbu	r4,5(r2)
 100fdb0:	2008923a 	slli	r4,r4,8
 100fdb4:	20c6b03a 	or	r3,r4,r3
 100fdb8:	11000183 	ldbu	r4,6(r2)
 100fdbc:	2008943a 	slli	r4,r4,16
 100fdc0:	20c6b03a 	or	r3,r4,r3
 100fdc4:	108001c3 	ldbu	r2,7(r2)
 100fdc8:	1004963a 	slli	r2,r2,24
 100fdcc:	10c4b03a 	or	r2,r2,r3
 100fdd0:	1007883a 	mov	r3,r2
 100fdd4:	e0bff817 	ldw	r2,-32(fp)
 100fdd8:	10ffbd36 	bltu	r2,r3,100fcd0 <__alt_data_end+0xff00fcd0>
		if (lrsc_type == rsc_type) {
			if (rsc_index++ == index)
				return r_table->offset[i];
		}
	}
	return 0;
 100fddc:	0005883a 	mov	r2,zero
}
 100fde0:	e037883a 	mov	sp,fp
 100fde4:	dfc00117 	ldw	ra,4(sp)
 100fde8:	df000017 	ldw	fp,0(sp)
 100fdec:	dec00204 	addi	sp,sp,8
 100fdf0:	f800283a 	ret

0100fdf4 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 100fdf4:	defffe04 	addi	sp,sp,-8
 100fdf8:	df000115 	stw	fp,4(sp)
 100fdfc:	df000104 	addi	fp,sp,4
 100fe00:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 100fe04:	0001883a 	nop
 100fe08:	e0bfff17 	ldw	r2,-4(fp)
 100fe0c:	00c00044 	movi	r3,1
 100fe10:	10c00015 	stw	r3,0(r2)
 100fe14:	e0bfff17 	ldw	r2,-4(fp)
 100fe18:	10800017 	ldw	r2,0(r2)
 100fe1c:	103ffa1e 	bne	r2,zero,100fe08 <__alt_data_end+0xff00fe08>
		;
	}
}
 100fe20:	0001883a 	nop
 100fe24:	e037883a 	mov	sp,fp
 100fe28:	df000017 	ldw	fp,0(sp)
 100fe2c:	dec00104 	addi	sp,sp,4
 100fe30:	f800283a 	ret

0100fe34 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 100fe34:	defffe04 	addi	sp,sp,-8
 100fe38:	df000115 	stw	fp,4(sp)
 100fe3c:	df000104 	addi	fp,sp,4
 100fe40:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 100fe44:	e0bfff17 	ldw	r2,-4(fp)
 100fe48:	0001b03a 	sync
 100fe4c:	10000015 	stw	zero,0(r2)
}
 100fe50:	0001883a 	nop
 100fe54:	e037883a 	mov	sp,fp
 100fe58:	df000017 	ldw	fp,0(sp)
 100fe5c:	dec00104 	addi	sp,sp,4
 100fe60:	f800283a 	ret

0100fe64 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 100fe64:	defffd04 	addi	sp,sp,-12
 100fe68:	dfc00215 	stw	ra,8(sp)
 100fe6c:	df000115 	stw	fp,4(sp)
 100fe70:	df000104 	addi	fp,sp,4
 100fe74:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 100fe78:	e13fff17 	ldw	r4,-4(fp)
 100fe7c:	100fdf40 	call	100fdf4 <__metal_mutex_acquire>
}
 100fe80:	0001883a 	nop
 100fe84:	e037883a 	mov	sp,fp
 100fe88:	dfc00117 	ldw	ra,4(sp)
 100fe8c:	df000017 	ldw	fp,0(sp)
 100fe90:	dec00204 	addi	sp,sp,8
 100fe94:	f800283a 	ret

0100fe98 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 100fe98:	defffd04 	addi	sp,sp,-12
 100fe9c:	dfc00215 	stw	ra,8(sp)
 100fea0:	df000115 	stw	fp,4(sp)
 100fea4:	df000104 	addi	fp,sp,4
 100fea8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 100feac:	e13fff17 	ldw	r4,-4(fp)
 100feb0:	100fe340 	call	100fe34 <__metal_mutex_release>
}
 100feb4:	0001883a 	nop
 100feb8:	e037883a 	mov	sp,fp
 100febc:	dfc00117 	ldw	ra,4(sp)
 100fec0:	df000017 	ldw	fp,0(sp)
 100fec4:	dec00204 	addi	sp,sp,8
 100fec8:	f800283a 	ret

0100fecc <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 100fecc:	defffd04 	addi	sp,sp,-12
 100fed0:	df000215 	stw	fp,8(sp)
 100fed4:	df000204 	addi	fp,sp,8
 100fed8:	e13ffe15 	stw	r4,-8(fp)
 100fedc:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 100fee0:	e0bffe17 	ldw	r2,-8(fp)
 100fee4:	10c00117 	ldw	r3,4(r2)
 100fee8:	e0bfff17 	ldw	r2,-4(fp)
 100feec:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 100fef0:	e0bfff17 	ldw	r2,-4(fp)
 100fef4:	e0fffe17 	ldw	r3,-8(fp)
 100fef8:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 100fefc:	e0bfff17 	ldw	r2,-4(fp)
 100ff00:	10800017 	ldw	r2,0(r2)
 100ff04:	e0ffff17 	ldw	r3,-4(fp)
 100ff08:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 100ff0c:	e0bfff17 	ldw	r2,-4(fp)
 100ff10:	10800117 	ldw	r2,4(r2)
 100ff14:	e0ffff17 	ldw	r3,-4(fp)
 100ff18:	10c00015 	stw	r3,0(r2)
}
 100ff1c:	0001883a 	nop
 100ff20:	e037883a 	mov	sp,fp
 100ff24:	df000017 	ldw	fp,0(sp)
 100ff28:	dec00104 	addi	sp,sp,4
 100ff2c:	f800283a 	ret

0100ff30 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 100ff30:	defffc04 	addi	sp,sp,-16
 100ff34:	dfc00315 	stw	ra,12(sp)
 100ff38:	df000215 	stw	fp,8(sp)
 100ff3c:	df000204 	addi	fp,sp,8
 100ff40:	e13ffe15 	stw	r4,-8(fp)
 100ff44:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 100ff48:	e17fff17 	ldw	r5,-4(fp)
 100ff4c:	e13ffe17 	ldw	r4,-8(fp)
 100ff50:	100fecc0 	call	100fecc <metal_list_add_before>
}
 100ff54:	0001883a 	nop
 100ff58:	e037883a 	mov	sp,fp
 100ff5c:	dfc00117 	ldw	ra,4(sp)
 100ff60:	df000017 	ldw	fp,0(sp)
 100ff64:	dec00204 	addi	sp,sp,8
 100ff68:	f800283a 	ret

0100ff6c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 100ff6c:	defffe04 	addi	sp,sp,-8
 100ff70:	df000115 	stw	fp,4(sp)
 100ff74:	df000104 	addi	fp,sp,4
 100ff78:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 100ff7c:	e0bfff17 	ldw	r2,-4(fp)
 100ff80:	10800017 	ldw	r2,0(r2)
 100ff84:	e0ffff17 	ldw	r3,-4(fp)
 100ff88:	18c00117 	ldw	r3,4(r3)
 100ff8c:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 100ff90:	e0bfff17 	ldw	r2,-4(fp)
 100ff94:	10800117 	ldw	r2,4(r2)
 100ff98:	e0ffff17 	ldw	r3,-4(fp)
 100ff9c:	18c00017 	ldw	r3,0(r3)
 100ffa0:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 100ffa4:	e0bfff17 	ldw	r2,-4(fp)
 100ffa8:	e0ffff17 	ldw	r3,-4(fp)
 100ffac:	10c00115 	stw	r3,4(r2)
 100ffb0:	e0bfff17 	ldw	r2,-4(fp)
 100ffb4:	10c00117 	ldw	r3,4(r2)
 100ffb8:	e0bfff17 	ldw	r2,-4(fp)
 100ffbc:	10c00015 	stw	r3,0(r2)
}
 100ffc0:	0001883a 	nop
 100ffc4:	e037883a 	mov	sp,fp
 100ffc8:	df000017 	ldw	fp,0(sp)
 100ffcc:	dec00104 	addi	sp,sp,4
 100ffd0:	f800283a 	ret

0100ffd4 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 100ffd4:	defffd04 	addi	sp,sp,-12
 100ffd8:	df000215 	stw	fp,8(sp)
 100ffdc:	df000204 	addi	fp,sp,8
 100ffe0:	e13ffe15 	stw	r4,-8(fp)
 100ffe4:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100ffe8:	e0bfff17 	ldw	r2,-4(fp)
 100ffec:	1004d17a 	srli	r2,r2,5
 100fff0:	1087883a 	add	r3,r2,r2
 100fff4:	18c7883a 	add	r3,r3,r3
 100fff8:	1809883a 	mov	r4,r3
 100fffc:	e0fffe17 	ldw	r3,-8(fp)
 1010000:	1907883a 	add	r3,r3,r4
 1010004:	1085883a 	add	r2,r2,r2
 1010008:	1085883a 	add	r2,r2,r2
 101000c:	1009883a 	mov	r4,r2
 1010010:	e0bffe17 	ldw	r2,-8(fp)
 1010014:	1105883a 	add	r2,r2,r4
 1010018:	11000017 	ldw	r4,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 101001c:	e0bfff17 	ldw	r2,-4(fp)
 1010020:	108007cc 	andi	r2,r2,31
 1010024:	01400044 	movi	r5,1
 1010028:	2884983a 	sll	r2,r5,r2

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 101002c:	2084b03a 	or	r2,r4,r2
 1010030:	18800015 	stw	r2,0(r3)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 1010034:	0001883a 	nop
 1010038:	e037883a 	mov	sp,fp
 101003c:	df000017 	ldw	fp,0(sp)
 1010040:	dec00104 	addi	sp,sp,4
 1010044:	f800283a 	ret

01010048 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 1010048:	defffd04 	addi	sp,sp,-12
 101004c:	df000215 	stw	fp,8(sp)
 1010050:	df000204 	addi	fp,sp,8
 1010054:	e13ffe15 	stw	r4,-8(fp)
 1010058:	e17fff15 	stw	r5,-4(fp)
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 101005c:	e0bfff17 	ldw	r2,-4(fp)
 1010060:	1004d17a 	srli	r2,r2,5
 1010064:	1085883a 	add	r2,r2,r2
 1010068:	1085883a 	add	r2,r2,r2
 101006c:	1007883a 	mov	r3,r2
 1010070:	e0bffe17 	ldw	r2,-8(fp)
 1010074:	10c5883a 	add	r2,r2,r3
 1010078:	10c00017 	ldw	r3,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 101007c:	e0bfff17 	ldw	r2,-4(fp)
 1010080:	108007cc 	andi	r2,r2,31
 1010084:	1884d83a 	srl	r2,r3,r2
 1010088:	1080004c 	andi	r2,r2,1
 101008c:	1004c03a 	cmpne	r2,r2,zero
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 1010090:	10803fcc 	andi	r2,r2,255
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}
 1010094:	e037883a 	mov	sp,fp
 1010098:	df000017 	ldw	fp,0(sp)
 101009c:	dec00104 	addi	sp,sp,4
 10100a0:	f800283a 	ret

010100a4 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 10100a4:	defffd04 	addi	sp,sp,-12
 10100a8:	df000215 	stw	fp,8(sp)
 10100ac:	df000204 	addi	fp,sp,8
 10100b0:	e13ffe15 	stw	r4,-8(fp)
 10100b4:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 10100b8:	e0bfff17 	ldw	r2,-4(fp)
 10100bc:	1004d17a 	srli	r2,r2,5
 10100c0:	1087883a 	add	r3,r2,r2
 10100c4:	18c7883a 	add	r3,r3,r3
 10100c8:	1809883a 	mov	r4,r3
 10100cc:	e0fffe17 	ldw	r3,-8(fp)
 10100d0:	1907883a 	add	r3,r3,r4
 10100d4:	1085883a 	add	r2,r2,r2
 10100d8:	1085883a 	add	r2,r2,r2
 10100dc:	1009883a 	mov	r4,r2
 10100e0:	e0bffe17 	ldw	r2,-8(fp)
 10100e4:	1105883a 	add	r2,r2,r4
 10100e8:	11000017 	ldw	r4,0(r2)
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 10100ec:	e0bfff17 	ldw	r2,-4(fp)
 10100f0:	108007cc 	andi	r2,r2,31
 10100f4:	01400044 	movi	r5,1
 10100f8:	2884983a 	sll	r2,r5,r2
 10100fc:	0084303a 	nor	r2,zero,r2
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 1010100:	2084703a 	and	r2,r4,r2
 1010104:	18800015 	stw	r2,0(r3)
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 1010108:	0001883a 	nop
 101010c:	e037883a 	mov	sp,fp
 1010110:	df000017 	ldw	fp,0(sp)
 1010114:	dec00104 	addi	sp,sp,4
 1010118:	f800283a 	ret

0101011c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 101011c:	defffc04 	addi	sp,sp,-16
 1010120:	dfc00315 	stw	ra,12(sp)
 1010124:	df000215 	stw	fp,8(sp)
 1010128:	df000204 	addi	fp,sp,8
 101012c:	e13ffe15 	stw	r4,-8(fp)
 1010130:	e17fff15 	stw	r5,-4(fp)
	return !metal_bitmap_is_bit_set(bitmap, bit);
 1010134:	e17fff17 	ldw	r5,-4(fp)
 1010138:	e13ffe17 	ldw	r4,-8(fp)
 101013c:	10100480 	call	1010048 <metal_bitmap_is_bit_set>
 1010140:	1005003a 	cmpeq	r2,r2,zero
 1010144:	10803fcc 	andi	r2,r2,255
}
 1010148:	e037883a 	mov	sp,fp
 101014c:	dfc00117 	ldw	ra,4(sp)
 1010150:	df000017 	ldw	fp,0(sp)
 1010154:	dec00204 	addi	sp,sp,8
 1010158:	f800283a 	ret

0101015c <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 101015c:	defffa04 	addi	sp,sp,-24
 1010160:	dfc00515 	stw	ra,20(sp)
 1010164:	df000415 	stw	fp,16(sp)
 1010168:	df000404 	addi	fp,sp,16
 101016c:	e13ffd15 	stw	r4,-12(fp)
 1010170:	e17ffe15 	stw	r5,-8(fp)
 1010174:	e1bfff15 	stw	r6,-4(fp)
	unsigned int bit;
	for (bit = start;
 1010178:	e0bffe17 	ldw	r2,-8(fp)
 101017c:	e0bffc15 	stw	r2,-16(fp)
 1010180:	00000306 	br	1010190 <metal_bitmap_next_clear_bit+0x34>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 1010184:	e0bffc17 	ldw	r2,-16(fp)
 1010188:	10800044 	addi	r2,r2,1
 101018c:	e0bffc15 	stw	r2,-16(fp)
static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;
	for (bit = start;
 1010190:	e0fffc17 	ldw	r3,-16(fp)
 1010194:	e0bfff17 	ldw	r2,-4(fp)
 1010198:	1880052e 	bgeu	r3,r2,10101b0 <metal_bitmap_next_clear_bit+0x54>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 101019c:	e0bffc17 	ldw	r2,-16(fp)
 10101a0:	100b883a 	mov	r5,r2
 10101a4:	e13ffd17 	ldw	r4,-12(fp)
 10101a8:	101011c0 	call	101011c <metal_bitmap_is_bit_clear>
 10101ac:	103ff526 	beq	r2,zero,1010184 <__alt_data_end+0xff010184>
	     bit ++)
		;
	return bit;
 10101b0:	e0bffc17 	ldw	r2,-16(fp)
}
 10101b4:	e037883a 	mov	sp,fp
 10101b8:	dfc00117 	ldw	ra,4(sp)
 10101bc:	df000017 	ldw	fp,0(sp)
 10101c0:	dec00204 	addi	sp,sp,8
 10101c4:	f800283a 	ret

010101c8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 10101c8:	defffa04 	addi	sp,sp,-24
 10101cc:	dfc00515 	stw	ra,20(sp)
 10101d0:	df000415 	stw	fp,16(sp)
 10101d4:	df000404 	addi	fp,sp,16
 10101d8:	e13ffc15 	stw	r4,-16(fp)
 10101dc:	e17ffd15 	stw	r5,-12(fp)
 10101e0:	e1bffe15 	stw	r6,-8(fp)
 10101e4:	e1ffff15 	stw	r7,-4(fp)
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 10101e8:	e0fffc17 	ldw	r3,-16(fp)
 10101ec:	e0bffd17 	ldw	r2,-12(fp)
 10101f0:	10000226 	beq	r2,zero,10101fc <rpmsg_init_ept+0x34>
 10101f4:	e0bffd17 	ldw	r2,-12(fp)
 10101f8:	00000206 	br	1010204 <rpmsg_init_ept+0x3c>
 10101fc:	008040b4 	movhi	r2,258
 1010200:	10977e04 	addi	r2,r2,24056
 1010204:	01800804 	movi	r6,32
 1010208:	100b883a 	mov	r5,r2
 101020c:	1809883a 	mov	r4,r3
 1010210:	10147a40 	call	10147a4 <strncpy>
	ept->addr = src;
 1010214:	e0bffc17 	ldw	r2,-16(fp)
 1010218:	e0fffe17 	ldw	r3,-8(fp)
 101021c:	10c00915 	stw	r3,36(r2)
	ept->dest_addr = dest;
 1010220:	e0bffc17 	ldw	r2,-16(fp)
 1010224:	e0ffff17 	ldw	r3,-4(fp)
 1010228:	10c00a15 	stw	r3,40(r2)
	ept->cb = cb;
 101022c:	e0bffc17 	ldw	r2,-16(fp)
 1010230:	e0c00217 	ldw	r3,8(fp)
 1010234:	10c00b15 	stw	r3,44(r2)
	ept->ns_unbind_cb = ns_unbind_cb;
 1010238:	e0bffc17 	ldw	r2,-16(fp)
 101023c:	e0c00317 	ldw	r3,12(fp)
 1010240:	10c00c15 	stw	r3,48(r2)
}
 1010244:	0001883a 	nop
 1010248:	e037883a 	mov	sp,fp
 101024c:	dfc00117 	ldw	ra,4(sp)
 1010250:	df000017 	ldw	fp,0(sp)
 1010254:	dec00204 	addi	sp,sp,8
 1010258:	f800283a 	ret

0101025c <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 101025c:	defffa04 	addi	sp,sp,-24
 1010260:	dfc00515 	stw	ra,20(sp)
 1010264:	df000415 	stw	fp,16(sp)
 1010268:	df000404 	addi	fp,sp,16
 101026c:	e13ffe15 	stw	r4,-8(fp)
 1010270:	e17fff15 	stw	r5,-4(fp)
	unsigned int addr = RPMSG_ADDR_ANY;
 1010274:	00bfffc4 	movi	r2,-1
 1010278:	e0bffc15 	stw	r2,-16(fp)
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 101027c:	e0bfff17 	ldw	r2,-4(fp)
 1010280:	100d883a 	mov	r6,r2
 1010284:	000b883a 	mov	r5,zero
 1010288:	e13ffe17 	ldw	r4,-8(fp)
 101028c:	101015c0 	call	101015c <metal_bitmap_next_clear_bit>
 1010290:	e0bffd15 	stw	r2,-12(fp)
	if (nextbit < (uint32_t)size) {
 1010294:	e0bfff17 	ldw	r2,-4(fp)
 1010298:	e0fffd17 	ldw	r3,-12(fp)
 101029c:	1880062e 	bgeu	r3,r2,10102b8 <rpmsg_get_address+0x5c>
		addr = nextbit;
 10102a0:	e0bffd17 	ldw	r2,-12(fp)
 10102a4:	e0bffc15 	stw	r2,-16(fp)
		metal_bitmap_set_bit(bitmap, nextbit);
 10102a8:	e0bffd17 	ldw	r2,-12(fp)
 10102ac:	100b883a 	mov	r5,r2
 10102b0:	e13ffe17 	ldw	r4,-8(fp)
 10102b4:	100ffd40 	call	100ffd4 <metal_bitmap_set_bit>
	}

	return addr;
 10102b8:	e0bffc17 	ldw	r2,-16(fp)
}
 10102bc:	e037883a 	mov	sp,fp
 10102c0:	dfc00117 	ldw	ra,4(sp)
 10102c4:	df000017 	ldw	fp,0(sp)
 10102c8:	dec00204 	addi	sp,sp,8
 10102cc:	f800283a 	ret

010102d0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 10102d0:	defffb04 	addi	sp,sp,-20
 10102d4:	dfc00415 	stw	ra,16(sp)
 10102d8:	df000315 	stw	fp,12(sp)
 10102dc:	df000304 	addi	fp,sp,12
 10102e0:	e13ffd15 	stw	r4,-12(fp)
 10102e4:	e17ffe15 	stw	r5,-8(fp)
 10102e8:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size)
 10102ec:	e0ffff17 	ldw	r3,-4(fp)
 10102f0:	e0bffe17 	ldw	r2,-8(fp)
 10102f4:	1880030e 	bge	r3,r2,1010304 <rpmsg_release_address+0x34>
		metal_bitmap_clear_bit(bitmap, addr);
 10102f8:	e17fff17 	ldw	r5,-4(fp)
 10102fc:	e13ffd17 	ldw	r4,-12(fp)
 1010300:	10100a40 	call	10100a4 <metal_bitmap_clear_bit>
}
 1010304:	0001883a 	nop
 1010308:	e037883a 	mov	sp,fp
 101030c:	dfc00117 	ldw	ra,4(sp)
 1010310:	df000017 	ldw	fp,0(sp)
 1010314:	dec00204 	addi	sp,sp,8
 1010318:	f800283a 	ret

0101031c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 101031c:	defffb04 	addi	sp,sp,-20
 1010320:	dfc00415 	stw	ra,16(sp)
 1010324:	df000315 	stw	fp,12(sp)
 1010328:	df000304 	addi	fp,sp,12
 101032c:	e13ffd15 	stw	r4,-12(fp)
 1010330:	e17ffe15 	stw	r5,-8(fp)
 1010334:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size)
 1010338:	e0ffff17 	ldw	r3,-4(fp)
 101033c:	e0bffe17 	ldw	r2,-8(fp)
 1010340:	1880040e 	bge	r3,r2,1010354 <rpmsg_is_address_set+0x38>
		return metal_bitmap_is_bit_set(bitmap, addr);
 1010344:	e17fff17 	ldw	r5,-4(fp)
 1010348:	e13ffd17 	ldw	r4,-12(fp)
 101034c:	10100480 	call	1010048 <metal_bitmap_is_bit_set>
 1010350:	00000106 	br	1010358 <rpmsg_is_address_set+0x3c>
	else
		return RPMSG_ERR_PARAM;
 1010354:	00be0b44 	movi	r2,-2003
}
 1010358:	e037883a 	mov	sp,fp
 101035c:	dfc00117 	ldw	ra,4(sp)
 1010360:	df000017 	ldw	fp,0(sp)
 1010364:	dec00204 	addi	sp,sp,8
 1010368:	f800283a 	ret

0101036c <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 101036c:	defffb04 	addi	sp,sp,-20
 1010370:	dfc00415 	stw	ra,16(sp)
 1010374:	df000315 	stw	fp,12(sp)
 1010378:	df000304 	addi	fp,sp,12
 101037c:	e13ffd15 	stw	r4,-12(fp)
 1010380:	e17ffe15 	stw	r5,-8(fp)
 1010384:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size) {
 1010388:	e0ffff17 	ldw	r3,-4(fp)
 101038c:	e0bffe17 	ldw	r2,-8(fp)
 1010390:	1880050e 	bge	r3,r2,10103a8 <rpmsg_set_address+0x3c>
		metal_bitmap_set_bit(bitmap, addr);
 1010394:	e17fff17 	ldw	r5,-4(fp)
 1010398:	e13ffd17 	ldw	r4,-12(fp)
 101039c:	100ffd40 	call	100ffd4 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 10103a0:	0005883a 	mov	r2,zero
 10103a4:	00000106 	br	10103ac <rpmsg_set_address+0x40>
	} else {
		return RPMSG_ERR_PARAM;
 10103a8:	00be0b44 	movi	r2,-2003
	}
}
 10103ac:	e037883a 	mov	sp,fp
 10103b0:	dfc00117 	ldw	ra,4(sp)
 10103b4:	df000017 	ldw	fp,0(sp)
 10103b8:	dec00204 	addi	sp,sp,8
 10103bc:	f800283a 	ret

010103c0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 10103c0:	defff704 	addi	sp,sp,-36
 10103c4:	dfc00815 	stw	ra,32(sp)
 10103c8:	df000715 	stw	fp,28(sp)
 10103cc:	df000704 	addi	fp,sp,28
 10103d0:	e13ffc15 	stw	r4,-16(fp)
 10103d4:	e17ffd15 	stw	r5,-12(fp)
 10103d8:	e1bffe15 	stw	r6,-8(fp)
 10103dc:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 10103e0:	e0bffc17 	ldw	r2,-16(fp)
 10103e4:	10000826 	beq	r2,zero,1010408 <rpmsg_send_offchannel_raw+0x48>
 10103e8:	e0bffc17 	ldw	r2,-16(fp)
 10103ec:	10800817 	ldw	r2,32(r2)
 10103f0:	10000526 	beq	r2,zero,1010408 <rpmsg_send_offchannel_raw+0x48>
 10103f4:	e0bfff17 	ldw	r2,-4(fp)
 10103f8:	10000326 	beq	r2,zero,1010408 <rpmsg_send_offchannel_raw+0x48>
 10103fc:	e0bffe17 	ldw	r2,-8(fp)
 1010400:	10bfffd8 	cmpnei	r2,r2,-1
 1010404:	1000021e 	bne	r2,zero,1010410 <rpmsg_send_offchannel_raw+0x50>
		return RPMSG_ERR_PARAM;
 1010408:	00be0b44 	movi	r2,-2003
 101040c:	00001306 	br	101045c <rpmsg_send_offchannel_raw+0x9c>

	rdev = ept->rdev;
 1010410:	e0bffc17 	ldw	r2,-16(fp)
 1010414:	10800817 	ldw	r2,32(r2)
 1010418:	e0bffb15 	stw	r2,-20(fp)

	if (rdev->ops.send_offchannel_raw)
 101041c:	e0bffb17 	ldw	r2,-20(fp)
 1010420:	10801817 	ldw	r2,96(r2)
 1010424:	10000c26 	beq	r2,zero,1010458 <rpmsg_send_offchannel_raw+0x98>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 1010428:	e0bffb17 	ldw	r2,-20(fp)
 101042c:	10801817 	ldw	r2,96(r2)
 1010430:	e0c00317 	ldw	r3,12(fp)
 1010434:	d8c00115 	stw	r3,4(sp)
 1010438:	e0c00217 	ldw	r3,8(fp)
 101043c:	d8c00015 	stw	r3,0(sp)
 1010440:	e1ffff17 	ldw	r7,-4(fp)
 1010444:	e1bffe17 	ldw	r6,-8(fp)
 1010448:	e17ffd17 	ldw	r5,-12(fp)
 101044c:	e13ffb17 	ldw	r4,-20(fp)
 1010450:	103ee83a 	callr	r2
 1010454:	00000106 	br	101045c <rpmsg_send_offchannel_raw+0x9c>
						      size, wait);

	return RPMSG_ERR_PARAM;
 1010458:	00be0b44 	movi	r2,-2003
}
 101045c:	e037883a 	mov	sp,fp
 1010460:	dfc00117 	ldw	ra,4(sp)
 1010464:	df000017 	ldw	fp,0(sp)
 1010468:	dec00204 	addi	sp,sp,8
 101046c:	f800283a 	ret

01010470 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 1010470:	deffef04 	addi	sp,sp,-68
 1010474:	dfc01015 	stw	ra,64(sp)
 1010478:	df000f15 	stw	fp,60(sp)
 101047c:	df000f04 	addi	fp,sp,60
 1010480:	e13ffe15 	stw	r4,-8(fp)
 1010484:	e17fff15 	stw	r5,-4(fp)
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 1010488:	e0bfff17 	ldw	r2,-4(fp)
 101048c:	e0bffd15 	stw	r2,-12(fp)
	ns_msg.addr = ept->addr;
 1010490:	e0bffe17 	ldw	r2,-8(fp)
 1010494:	10800917 	ldw	r2,36(r2)
 1010498:	e0bffc15 	stw	r2,-16(fp)
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 101049c:	e0fffe17 	ldw	r3,-8(fp)
 10104a0:	e0bff404 	addi	r2,fp,-48
 10104a4:	01800804 	movi	r6,32
 10104a8:	180b883a 	mov	r5,r3
 10104ac:	1009883a 	mov	r4,r2
 10104b0:	10147a40 	call	10147a4 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 10104b4:	e0bffe17 	ldw	r2,-8(fp)
 10104b8:	10c00917 	ldw	r3,36(r2)
 10104bc:	e13ff404 	addi	r4,fp,-48
 10104c0:	00800044 	movi	r2,1
 10104c4:	d8800115 	stw	r2,4(sp)
 10104c8:	00800a04 	movi	r2,40
 10104cc:	d8800015 	stw	r2,0(sp)
 10104d0:	200f883a 	mov	r7,r4
 10104d4:	01800d44 	movi	r6,53
 10104d8:	180b883a 	mov	r5,r3
 10104dc:	e13ffe17 	ldw	r4,-8(fp)
 10104e0:	10103c00 	call	10103c0 <rpmsg_send_offchannel_raw>
 10104e4:	e0bff315 	stw	r2,-52(fp)
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 10104e8:	e0bff317 	ldw	r2,-52(fp)
 10104ec:	1000020e 	bge	r2,zero,10104f8 <rpmsg_send_ns_message+0x88>
		return ret;
 10104f0:	e0bff317 	ldw	r2,-52(fp)
 10104f4:	00000106 	br	10104fc <rpmsg_send_ns_message+0x8c>
	else
		return RPMSG_SUCCESS;
 10104f8:	0005883a 	mov	r2,zero
}
 10104fc:	e037883a 	mov	sp,fp
 1010500:	dfc00117 	ldw	ra,4(sp)
 1010504:	df000017 	ldw	fp,0(sp)
 1010508:	dec00204 	addi	sp,sp,8
 101050c:	f800283a 	ret

01010510 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 1010510:	defff704 	addi	sp,sp,-36
 1010514:	dfc00815 	stw	ra,32(sp)
 1010518:	df000715 	stw	fp,28(sp)
 101051c:	df000704 	addi	fp,sp,28
 1010520:	e13ffc15 	stw	r4,-16(fp)
 1010524:	e17ffd15 	stw	r5,-12(fp)
 1010528:	e1bffe15 	stw	r6,-8(fp)
 101052c:	e1ffff15 	stw	r7,-4(fp)
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 1010530:	e0bffc17 	ldw	r2,-16(fp)
 1010534:	10800017 	ldw	r2,0(r2)
 1010538:	e0bff915 	stw	r2,-28(fp)
 101053c:	00003b06 	br	101062c <rpmsg_get_endpoint+0x11c>
		int name_match = 0;
 1010540:	e03ffa15 	stw	zero,-24(fp)

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 1010544:	e0bff917 	ldw	r2,-28(fp)
 1010548:	10bff304 	addi	r2,r2,-52
 101054c:	e0bffb15 	stw	r2,-20(fp)
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 1010550:	e0bffe17 	ldw	r2,-8(fp)
 1010554:	10bfffe0 	cmpeqi	r2,r2,-1
 1010558:	1000061e 	bne	r2,zero,1010574 <rpmsg_get_endpoint+0x64>
 101055c:	e0bffb17 	ldw	r2,-20(fp)
 1010560:	10c00917 	ldw	r3,36(r2)
 1010564:	e0bffe17 	ldw	r2,-8(fp)
 1010568:	1880021e 	bne	r3,r2,1010574 <rpmsg_get_endpoint+0x64>
			return ept;
 101056c:	e0bffb17 	ldw	r2,-20(fp)
 1010570:	00003206 	br	101063c <rpmsg_get_endpoint+0x12c>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 1010574:	e0bffb17 	ldw	r2,-20(fp)
 1010578:	10c00917 	ldw	r3,36(r2)
 101057c:	e0bffe17 	ldw	r2,-8(fp)
 1010580:	1880061e 	bne	r3,r2,101059c <rpmsg_get_endpoint+0x8c>
 1010584:	e0bffb17 	ldw	r2,-20(fp)
 1010588:	10c00a17 	ldw	r3,40(r2)
 101058c:	e0bfff17 	ldw	r2,-4(fp)
 1010590:	1880021e 	bne	r3,r2,101059c <rpmsg_get_endpoint+0x8c>
			return ept;
 1010594:	e0bffb17 	ldw	r2,-20(fp)
 1010598:	00002806 	br	101063c <rpmsg_get_endpoint+0x12c>
		/* else use name service and destination address */
		if (name)
 101059c:	e0bffd17 	ldw	r2,-12(fp)
 10105a0:	10000826 	beq	r2,zero,10105c4 <rpmsg_get_endpoint+0xb4>
			name_match = !strncmp(ept->name, name,
 10105a4:	e0bffb17 	ldw	r2,-20(fp)
 10105a8:	01800804 	movi	r6,32
 10105ac:	e17ffd17 	ldw	r5,-12(fp)
 10105b0:	1009883a 	mov	r4,r2
 10105b4:	10146d40 	call	10146d4 <strncmp>
 10105b8:	1005003a 	cmpeq	r2,r2,zero
 10105bc:	10803fcc 	andi	r2,r2,255
 10105c0:	e0bffa15 	stw	r2,-24(fp)
					      sizeof(ept->name));
		if (!name || !name_match)
 10105c4:	e0bffd17 	ldw	r2,-12(fp)
 10105c8:	10001426 	beq	r2,zero,101061c <rpmsg_get_endpoint+0x10c>
 10105cc:	e0bffa17 	ldw	r2,-24(fp)
 10105d0:	10001226 	beq	r2,zero,101061c <rpmsg_get_endpoint+0x10c>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 10105d4:	e0bfff17 	ldw	r2,-4(fp)
 10105d8:	10bfffe0 	cmpeqi	r2,r2,-1
 10105dc:	1000061e 	bne	r2,zero,10105f8 <rpmsg_get_endpoint+0xe8>
 10105e0:	e0bffb17 	ldw	r2,-20(fp)
 10105e4:	10c00a17 	ldw	r3,40(r2)
 10105e8:	e0bfff17 	ldw	r2,-4(fp)
 10105ec:	1880021e 	bne	r3,r2,10105f8 <rpmsg_get_endpoint+0xe8>
			return ept;
 10105f0:	e0bffb17 	ldw	r2,-20(fp)
 10105f4:	00001106 	br	101063c <rpmsg_get_endpoint+0x12c>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 10105f8:	e0bffe17 	ldw	r2,-8(fp)
 10105fc:	10bfffd8 	cmpnei	r2,r2,-1
 1010600:	1000071e 	bne	r2,zero,1010620 <rpmsg_get_endpoint+0x110>
 1010604:	e0bffb17 	ldw	r2,-20(fp)
 1010608:	10800a17 	ldw	r2,40(r2)
 101060c:	10bfffd8 	cmpnei	r2,r2,-1
 1010610:	1000031e 	bne	r2,zero,1010620 <rpmsg_get_endpoint+0x110>
			return ept;
 1010614:	e0bffb17 	ldw	r2,-20(fp)
 1010618:	00000806 	br	101063c <rpmsg_get_endpoint+0x12c>
		/* else use name service and destination address */
		if (name)
			name_match = !strncmp(ept->name, name,
					      sizeof(ept->name));
		if (!name || !name_match)
			continue;
 101061c:	0001883a 	nop
					  uint32_t dest_addr)
{
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 1010620:	e0bff917 	ldw	r2,-28(fp)
 1010624:	10800017 	ldw	r2,0(r2)
 1010628:	e0bff915 	stw	r2,-28(fp)
 101062c:	e0fffc17 	ldw	r3,-16(fp)
 1010630:	e0bff917 	ldw	r2,-28(fp)
 1010634:	18bfc21e 	bne	r3,r2,1010540 <__alt_data_end+0xff010540>
			return ept;
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
			return ept;
	}
	return NULL;
 1010638:	0005883a 	mov	r2,zero
}
 101063c:	e037883a 	mov	sp,fp
 1010640:	dfc00117 	ldw	ra,4(sp)
 1010644:	df000017 	ldw	fp,0(sp)
 1010648:	dec00204 	addi	sp,sp,8
 101064c:	f800283a 	ret

01010650 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 1010650:	defffc04 	addi	sp,sp,-16
 1010654:	dfc00315 	stw	ra,12(sp)
 1010658:	df000215 	stw	fp,8(sp)
 101065c:	df000204 	addi	fp,sp,8
 1010660:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept)
 1010664:	e0bfff17 	ldw	r2,-4(fp)
 1010668:	10001426 	beq	r2,zero,10106bc <rpmsg_unregister_endpoint+0x6c>
		return;

	rdev = ept->rdev;
 101066c:	e0bfff17 	ldw	r2,-4(fp)
 1010670:	10800817 	ldw	r2,32(r2)
 1010674:	e0bffe15 	stw	r2,-8(fp)

	if (ept->addr != RPMSG_ADDR_ANY)
 1010678:	e0bfff17 	ldw	r2,-4(fp)
 101067c:	10800917 	ldw	r2,36(r2)
 1010680:	10bfffe0 	cmpeqi	r2,r2,-1
 1010684:	1000081e 	bne	r2,zero,10106a8 <rpmsg_unregister_endpoint+0x58>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 1010688:	e0bffe17 	ldw	r2,-8(fp)
 101068c:	10c01204 	addi	r3,r2,72
				      ept->addr);
 1010690:	e0bfff17 	ldw	r2,-4(fp)
 1010694:	10800917 	ldw	r2,36(r2)
		return;

	rdev = ept->rdev;

	if (ept->addr != RPMSG_ADDR_ANY)
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 1010698:	100d883a 	mov	r6,r2
 101069c:	01402004 	movi	r5,128
 10106a0:	1809883a 	mov	r4,r3
 10106a4:	10102d00 	call	10102d0 <rpmsg_release_address>
				      ept->addr);
	metal_list_del(&ept->node);
 10106a8:	e0bfff17 	ldw	r2,-4(fp)
 10106ac:	10800d04 	addi	r2,r2,52
 10106b0:	1009883a 	mov	r4,r2
 10106b4:	100ff6c0 	call	100ff6c <metal_list_del>
 10106b8:	00000106 	br	10106c0 <rpmsg_unregister_endpoint+0x70>
static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
		return;
 10106bc:	0001883a 	nop

	if (ept->addr != RPMSG_ADDR_ANY)
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
				      ept->addr);
	metal_list_del(&ept->node);
}
 10106c0:	e037883a 	mov	sp,fp
 10106c4:	dfc00117 	ldw	ra,4(sp)
 10106c8:	df000017 	ldw	fp,0(sp)
 10106cc:	dec00204 	addi	sp,sp,8
 10106d0:	f800283a 	ret

010106d4 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
 10106d4:	defffc04 	addi	sp,sp,-16
 10106d8:	dfc00315 	stw	ra,12(sp)
 10106dc:	df000215 	stw	fp,8(sp)
 10106e0:	df000204 	addi	fp,sp,8
 10106e4:	e13ffe15 	stw	r4,-8(fp)
 10106e8:	e17fff15 	stw	r5,-4(fp)
	ept->rdev = rdev;
 10106ec:	e0bfff17 	ldw	r2,-4(fp)
 10106f0:	e0fffe17 	ldw	r3,-8(fp)
 10106f4:	10c00815 	stw	r3,32(r2)
	metal_list_add_tail(&rdev->endpoints, &ept->node);
 10106f8:	e0fffe17 	ldw	r3,-8(fp)
 10106fc:	e0bfff17 	ldw	r2,-4(fp)
 1010700:	10800d04 	addi	r2,r2,52
 1010704:	100b883a 	mov	r5,r2
 1010708:	1809883a 	mov	r4,r3
 101070c:	100ff300 	call	100ff30 <metal_list_add_tail>
}
 1010710:	0001883a 	nop
 1010714:	e037883a 	mov	sp,fp
 1010718:	dfc00117 	ldw	ra,4(sp)
 101071c:	df000017 	ldw	fp,0(sp)
 1010720:	dec00204 	addi	sp,sp,8
 1010724:	f800283a 	ret

01010728 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 1010728:	defff604 	addi	sp,sp,-40
 101072c:	dfc00915 	stw	ra,36(sp)
 1010730:	df000815 	stw	fp,32(sp)
 1010734:	df000804 	addi	fp,sp,32
 1010738:	e13ffc15 	stw	r4,-16(fp)
 101073c:	e17ffd15 	stw	r5,-12(fp)
 1010740:	e1bffe15 	stw	r6,-8(fp)
 1010744:	e1ffff15 	stw	r7,-4(fp)
	int status = RPMSG_SUCCESS;
 1010748:	e03ffa15 	stw	zero,-24(fp)
	uint32_t addr = src;
 101074c:	e0bfff17 	ldw	r2,-4(fp)
 1010750:	e0bffb15 	stw	r2,-20(fp)

	if (!ept)
 1010754:	e0bffc17 	ldw	r2,-16(fp)
 1010758:	1000021e 	bne	r2,zero,1010764 <rpmsg_create_ept+0x3c>
		return RPMSG_ERR_PARAM;
 101075c:	00be0b44 	movi	r2,-2003
 1010760:	00004e06 	br	101089c <rpmsg_create_ept+0x174>

	metal_mutex_acquire(&rdev->lock);
 1010764:	e0bffd17 	ldw	r2,-12(fp)
 1010768:	10801604 	addi	r2,r2,88
 101076c:	1009883a 	mov	r4,r2
 1010770:	100fe640 	call	100fe64 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 1010774:	e0bfff17 	ldw	r2,-4(fp)
 1010778:	10bfffe0 	cmpeqi	r2,r2,-1
 101077c:	1000161e 	bne	r2,zero,10107d8 <rpmsg_create_ept+0xb0>
		status = rpmsg_is_address_set(rdev->bitmap,
 1010780:	e0bffd17 	ldw	r2,-12(fp)
 1010784:	10801204 	addi	r2,r2,72
 1010788:	e0ffff17 	ldw	r3,-4(fp)
 101078c:	180d883a 	mov	r6,r3
 1010790:	01402004 	movi	r5,128
 1010794:	1009883a 	mov	r4,r2
 1010798:	101031c0 	call	101031c <rpmsg_is_address_set>
 101079c:	e0bffa15 	stw	r2,-24(fp)
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 10107a0:	e0bffa17 	ldw	r2,-24(fp)
 10107a4:	1000081e 	bne	r2,zero,10107c8 <rpmsg_create_ept+0xa0>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 10107a8:	e0bffd17 	ldw	r2,-12(fp)
 10107ac:	10801204 	addi	r2,r2,72
 10107b0:	e0ffff17 	ldw	r3,-4(fp)
 10107b4:	180d883a 	mov	r6,r3
 10107b8:	01402004 	movi	r5,128
 10107bc:	1009883a 	mov	r4,r2
 10107c0:	101036c0 	call	101036c <rpmsg_set_address>
 10107c4:	00000a06 	br	10107f0 <rpmsg_create_ept+0xc8>
					  src);
		} else if (status > 0) {
 10107c8:	e0bffa17 	ldw	r2,-24(fp)
 10107cc:	00802d0e 	bge	zero,r2,1010884 <rpmsg_create_ept+0x15c>
			status = RPMSG_SUCCESS;
 10107d0:	e03ffa15 	stw	zero,-24(fp)
			goto ret_status;
 10107d4:	00002c06 	br	1010888 <rpmsg_create_ept+0x160>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 10107d8:	e0bffd17 	ldw	r2,-12(fp)
 10107dc:	10801204 	addi	r2,r2,72
 10107e0:	01402004 	movi	r5,128
 10107e4:	1009883a 	mov	r4,r2
 10107e8:	101025c0 	call	101025c <rpmsg_get_address>
 10107ec:	e0bffb15 	stw	r2,-20(fp)
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 10107f0:	e0800417 	ldw	r2,16(fp)
 10107f4:	d8800115 	stw	r2,4(sp)
 10107f8:	e0800317 	ldw	r2,12(fp)
 10107fc:	d8800015 	stw	r2,0(sp)
 1010800:	e1c00217 	ldw	r7,8(fp)
 1010804:	e1bffb17 	ldw	r6,-20(fp)
 1010808:	e17ffe17 	ldw	r5,-8(fp)
 101080c:	e13ffc17 	ldw	r4,-16(fp)
 1010810:	10101c80 	call	10101c8 <rpmsg_init_ept>
	rpmsg_register_endpoint(rdev, ept);
 1010814:	e17ffc17 	ldw	r5,-16(fp)
 1010818:	e13ffd17 	ldw	r4,-12(fp)
 101081c:	10106d40 	call	10106d4 <rpmsg_register_endpoint>

	if (rdev->support_ns && ept->dest_addr == RPMSG_ADDR_ANY) {
 1010820:	e0bffd17 	ldw	r2,-12(fp)
 1010824:	10801903 	ldbu	r2,100(r2)
 1010828:	10803fcc 	andi	r2,r2,255
 101082c:	10001626 	beq	r2,zero,1010888 <rpmsg_create_ept+0x160>
 1010830:	e0bffc17 	ldw	r2,-16(fp)
 1010834:	10800a17 	ldw	r2,40(r2)
 1010838:	10bfffd8 	cmpnei	r2,r2,-1
 101083c:	1000121e 	bne	r2,zero,1010888 <rpmsg_create_ept+0x160>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 1010840:	e0bffd17 	ldw	r2,-12(fp)
 1010844:	10801604 	addi	r2,r2,88
 1010848:	1009883a 	mov	r4,r2
 101084c:	100fe980 	call	100fe98 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 1010850:	000b883a 	mov	r5,zero
 1010854:	e13ffc17 	ldw	r4,-16(fp)
 1010858:	10104700 	call	1010470 <rpmsg_send_ns_message>
 101085c:	e0bffa15 	stw	r2,-24(fp)
		metal_mutex_acquire(&rdev->lock);
 1010860:	e0bffd17 	ldw	r2,-12(fp)
 1010864:	10801604 	addi	r2,r2,88
 1010868:	1009883a 	mov	r4,r2
 101086c:	100fe640 	call	100fe64 <metal_mutex_acquire>
		if (status)
 1010870:	e0bffa17 	ldw	r2,-24(fp)
 1010874:	10000426 	beq	r2,zero,1010888 <rpmsg_create_ept+0x160>
			rpmsg_unregister_endpoint(ept);
 1010878:	e13ffc17 	ldw	r4,-16(fp)
 101087c:	10106500 	call	1010650 <rpmsg_unregister_endpoint>
 1010880:	00000106 	br	1010888 <rpmsg_create_ept+0x160>
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
			goto ret_status;
		} else {
			goto ret_status;
 1010884:	0001883a 	nop
		if (status)
			rpmsg_unregister_endpoint(ept);
	}

ret_status:
	metal_mutex_release(&rdev->lock);
 1010888:	e0bffd17 	ldw	r2,-12(fp)
 101088c:	10801604 	addi	r2,r2,88
 1010890:	1009883a 	mov	r4,r2
 1010894:	100fe980 	call	100fe98 <metal_mutex_release>
	return status;
 1010898:	e0bffa17 	ldw	r2,-24(fp)
}
 101089c:	e037883a 	mov	sp,fp
 10108a0:	dfc00117 	ldw	ra,4(sp)
 10108a4:	df000017 	ldw	fp,0(sp)
 10108a8:	dec00204 	addi	sp,sp,8
 10108ac:	f800283a 	ret

010108b0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 10108b0:	defffc04 	addi	sp,sp,-16
 10108b4:	dfc00315 	stw	ra,12(sp)
 10108b8:	df000215 	stw	fp,8(sp)
 10108bc:	df000204 	addi	fp,sp,8
 10108c0:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept)
 10108c4:	e0bfff17 	ldw	r2,-4(fp)
 10108c8:	10001f26 	beq	r2,zero,1010948 <rpmsg_destroy_ept+0x98>
		return;

	rdev = ept->rdev;
 10108cc:	e0bfff17 	ldw	r2,-4(fp)
 10108d0:	10800817 	ldw	r2,32(r2)
 10108d4:	e0bffe15 	stw	r2,-8(fp)
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
 10108d8:	e0bfff17 	ldw	r2,-4(fp)
 10108dc:	10800003 	ldbu	r2,0(r2)
 10108e0:	10803fcc 	andi	r2,r2,255
 10108e4:	1080201c 	xori	r2,r2,128
 10108e8:	10bfe004 	addi	r2,r2,-128
 10108ec:	10000b26 	beq	r2,zero,101091c <rpmsg_destroy_ept+0x6c>
 10108f0:	e0bffe17 	ldw	r2,-8(fp)
 10108f4:	10801903 	ldbu	r2,100(r2)
 10108f8:	10803fcc 	andi	r2,r2,255
 10108fc:	10000726 	beq	r2,zero,101091c <rpmsg_destroy_ept+0x6c>
 1010900:	e0bfff17 	ldw	r2,-4(fp)
 1010904:	10800917 	ldw	r2,36(r2)
 1010908:	10800d60 	cmpeqi	r2,r2,53
 101090c:	1000031e 	bne	r2,zero,101091c <rpmsg_destroy_ept+0x6c>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 1010910:	01400044 	movi	r5,1
 1010914:	e13fff17 	ldw	r4,-4(fp)
 1010918:	10104700 	call	1010470 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 101091c:	e0bffe17 	ldw	r2,-8(fp)
 1010920:	10801604 	addi	r2,r2,88
 1010924:	1009883a 	mov	r4,r2
 1010928:	100fe640 	call	100fe64 <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 101092c:	e13fff17 	ldw	r4,-4(fp)
 1010930:	10106500 	call	1010650 <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 1010934:	e0bffe17 	ldw	r2,-8(fp)
 1010938:	10801604 	addi	r2,r2,88
 101093c:	1009883a 	mov	r4,r2
 1010940:	100fe980 	call	100fe98 <metal_mutex_release>
 1010944:	00000106 	br	101094c <rpmsg_destroy_ept+0x9c>
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
		return;
 1010948:	0001883a 	nop
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	metal_mutex_acquire(&rdev->lock);
	rpmsg_unregister_endpoint(ept);
	metal_mutex_release(&rdev->lock);
}
 101094c:	e037883a 	mov	sp,fp
 1010950:	dfc00117 	ldw	ra,4(sp)
 1010954:	df000017 	ldw	fp,0(sp)
 1010958:	dec00204 	addi	sp,sp,8
 101095c:	f800283a 	ret

01010960 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 1010960:	defffc04 	addi	sp,sp,-16
 1010964:	dfc00315 	stw	ra,12(sp)
 1010968:	df000215 	stw	fp,8(sp)
 101096c:	df000204 	addi	fp,sp,8
 1010970:	e13fff15 	stw	r4,-4(fp)
	const TickType_t xDelay = usec / portTICK_PERIOD_MS;
 1010974:	e0bfff17 	ldw	r2,-4(fp)
 1010978:	e0bffe15 	stw	r2,-8(fp)
	vTaskDelay(xDelay);
 101097c:	e13ffe17 	ldw	r4,-8(fp)
 1010980:	1003bbc0 	call	1003bbc <vTaskDelay>
	return 0;
 1010984:	0005883a 	mov	r2,zero
}
 1010988:	e037883a 	mov	sp,fp
 101098c:	dfc00117 	ldw	ra,4(sp)
 1010990:	df000017 	ldw	fp,0(sp)
 1010994:	dec00204 	addi	sp,sp,8
 1010998:	f800283a 	ret

0101099c <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 101099c:	defffd04 	addi	sp,sp,-12
 10109a0:	dfc00215 	stw	ra,8(sp)
 10109a4:	df000115 	stw	fp,4(sp)
 10109a8:	df000104 	addi	fp,sp,4
 10109ac:	e13fff15 	stw	r4,-4(fp)
	return __metal_sleep_usec(usec);
 10109b0:	e13fff17 	ldw	r4,-4(fp)
 10109b4:	10109600 	call	1010960 <__metal_sleep_usec>
}
 10109b8:	e037883a 	mov	sp,fp
 10109bc:	dfc00117 	ldw	ra,4(sp)
 10109c0:	df000017 	ldw	fp,0(sp)
 10109c4:	dec00204 	addi	sp,sp,8
 10109c8:	f800283a 	ret

010109cc <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 10109cc:	defffe04 	addi	sp,sp,-8
 10109d0:	df000115 	stw	fp,4(sp)
 10109d4:	df000104 	addi	fp,sp,4
 10109d8:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 10109dc:	e0bfff17 	ldw	r2,-4(fp)
 10109e0:	e0ffff17 	ldw	r3,-4(fp)
 10109e4:	10c00115 	stw	r3,4(r2)
 10109e8:	e0bfff17 	ldw	r2,-4(fp)
 10109ec:	10c00117 	ldw	r3,4(r2)
 10109f0:	e0bfff17 	ldw	r2,-4(fp)
 10109f4:	10c00015 	stw	r3,0(r2)
}
 10109f8:	0001883a 	nop
 10109fc:	e037883a 	mov	sp,fp
 1010a00:	df000017 	ldw	fp,0(sp)
 1010a04:	dec00104 	addi	sp,sp,4
 1010a08:	f800283a 	ret

01010a0c <metal_list_is_empty>:
{
	metal_list_add_before(list, node);
}

static inline int metal_list_is_empty(struct metal_list *list)
{
 1010a0c:	defffe04 	addi	sp,sp,-8
 1010a10:	df000115 	stw	fp,4(sp)
 1010a14:	df000104 	addi	fp,sp,4
 1010a18:	e13fff15 	stw	r4,-4(fp)
	return list->next == list;
 1010a1c:	e0bfff17 	ldw	r2,-4(fp)
 1010a20:	10c00017 	ldw	r3,0(r2)
 1010a24:	e0bfff17 	ldw	r2,-4(fp)
 1010a28:	1885003a 	cmpeq	r2,r3,r2
 1010a2c:	10803fcc 	andi	r2,r2,255
}
 1010a30:	e037883a 	mov	sp,fp
 1010a34:	df000017 	ldw	fp,0(sp)
 1010a38:	dec00104 	addi	sp,sp,4
 1010a3c:	f800283a 	ret

01010a40 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 1010a40:	defffc04 	addi	sp,sp,-16
 1010a44:	df000315 	stw	fp,12(sp)
 1010a48:	df000304 	addi	fp,sp,12
 1010a4c:	e13ffe15 	stw	r4,-8(fp)
 1010a50:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 1010a54:	e0bfff17 	ldw	r2,-4(fp)
 1010a58:	e0fffe17 	ldw	r3,-8(fp)
 1010a5c:	18c00017 	ldw	r3,0(r3)
 1010a60:	10c5c83a 	sub	r2,r2,r3
 1010a64:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1010a68:	e0bffe17 	ldw	r2,-8(fp)
 1010a6c:	10800217 	ldw	r2,8(r2)
 1010a70:	e0fffd17 	ldw	r3,-12(fp)
 1010a74:	1880022e 	bgeu	r3,r2,1010a80 <metal_io_virt_to_offset+0x40>
 1010a78:	e0bffd17 	ldw	r2,-12(fp)
 1010a7c:	00000106 	br	1010a84 <metal_io_virt_to_offset+0x44>
 1010a80:	00bfffc4 	movi	r2,-1
}
 1010a84:	e037883a 	mov	sp,fp
 1010a88:	df000017 	ldw	fp,0(sp)
 1010a8c:	dec00104 	addi	sp,sp,4
 1010a90:	f800283a 	ret

01010a94 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1010a94:	defffe04 	addi	sp,sp,-8
 1010a98:	df000115 	stw	fp,4(sp)
 1010a9c:	df000104 	addi	fp,sp,4
 1010aa0:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1010aa4:	e0bfff17 	ldw	r2,-4(fp)
 1010aa8:	10000015 	stw	zero,0(r2)
 1010aac:	0001b03a 	sync
}
 1010ab0:	0001883a 	nop
 1010ab4:	e037883a 	mov	sp,fp
 1010ab8:	df000017 	ldw	fp,0(sp)
 1010abc:	dec00104 	addi	sp,sp,4
 1010ac0:	f800283a 	ret

01010ac4 <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1010ac4:	defffe04 	addi	sp,sp,-8
 1010ac8:	df000115 	stw	fp,4(sp)
 1010acc:	df000104 	addi	fp,sp,4
 1010ad0:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1010ad4:	0001883a 	nop
 1010ad8:	e037883a 	mov	sp,fp
 1010adc:	df000017 	ldw	fp,0(sp)
 1010ae0:	dec00104 	addi	sp,sp,4
 1010ae4:	f800283a 	ret

01010ae8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1010ae8:	defffe04 	addi	sp,sp,-8
 1010aec:	df000115 	stw	fp,4(sp)
 1010af0:	df000104 	addi	fp,sp,4
 1010af4:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1010af8:	0001883a 	nop
 1010afc:	e0bfff17 	ldw	r2,-4(fp)
 1010b00:	00c00044 	movi	r3,1
 1010b04:	10c00015 	stw	r3,0(r2)
 1010b08:	e0bfff17 	ldw	r2,-4(fp)
 1010b0c:	10800017 	ldw	r2,0(r2)
 1010b10:	103ffa1e 	bne	r2,zero,1010afc <__alt_data_end+0xff010afc>
		;
	}
}
 1010b14:	0001883a 	nop
 1010b18:	e037883a 	mov	sp,fp
 1010b1c:	df000017 	ldw	fp,0(sp)
 1010b20:	dec00104 	addi	sp,sp,4
 1010b24:	f800283a 	ret

01010b28 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1010b28:	defffe04 	addi	sp,sp,-8
 1010b2c:	df000115 	stw	fp,4(sp)
 1010b30:	df000104 	addi	fp,sp,4
 1010b34:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1010b38:	e0bfff17 	ldw	r2,-4(fp)
 1010b3c:	0001b03a 	sync
 1010b40:	10000015 	stw	zero,0(r2)
}
 1010b44:	0001883a 	nop
 1010b48:	e037883a 	mov	sp,fp
 1010b4c:	df000017 	ldw	fp,0(sp)
 1010b50:	dec00104 	addi	sp,sp,4
 1010b54:	f800283a 	ret

01010b58 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1010b58:	defffd04 	addi	sp,sp,-12
 1010b5c:	dfc00215 	stw	ra,8(sp)
 1010b60:	df000115 	stw	fp,4(sp)
 1010b64:	df000104 	addi	fp,sp,4
 1010b68:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1010b6c:	e13fff17 	ldw	r4,-4(fp)
 1010b70:	1010a940 	call	1010a94 <__metal_mutex_init>
}
 1010b74:	0001883a 	nop
 1010b78:	e037883a 	mov	sp,fp
 1010b7c:	dfc00117 	ldw	ra,4(sp)
 1010b80:	df000017 	ldw	fp,0(sp)
 1010b84:	dec00204 	addi	sp,sp,8
 1010b88:	f800283a 	ret

01010b8c <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1010b8c:	defffd04 	addi	sp,sp,-12
 1010b90:	dfc00215 	stw	ra,8(sp)
 1010b94:	df000115 	stw	fp,4(sp)
 1010b98:	df000104 	addi	fp,sp,4
 1010b9c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1010ba0:	e13fff17 	ldw	r4,-4(fp)
 1010ba4:	1010ac40 	call	1010ac4 <__metal_mutex_deinit>
}
 1010ba8:	0001883a 	nop
 1010bac:	e037883a 	mov	sp,fp
 1010bb0:	dfc00117 	ldw	ra,4(sp)
 1010bb4:	df000017 	ldw	fp,0(sp)
 1010bb8:	dec00204 	addi	sp,sp,8
 1010bbc:	f800283a 	ret

01010bc0 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 1010bc0:	defffd04 	addi	sp,sp,-12
 1010bc4:	dfc00215 	stw	ra,8(sp)
 1010bc8:	df000115 	stw	fp,4(sp)
 1010bcc:	df000104 	addi	fp,sp,4
 1010bd0:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 1010bd4:	e13fff17 	ldw	r4,-4(fp)
 1010bd8:	1010ae80 	call	1010ae8 <__metal_mutex_acquire>
}
 1010bdc:	0001883a 	nop
 1010be0:	e037883a 	mov	sp,fp
 1010be4:	dfc00117 	ldw	ra,4(sp)
 1010be8:	df000017 	ldw	fp,0(sp)
 1010bec:	dec00204 	addi	sp,sp,8
 1010bf0:	f800283a 	ret

01010bf4 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1010bf4:	defffd04 	addi	sp,sp,-12
 1010bf8:	dfc00215 	stw	ra,8(sp)
 1010bfc:	df000115 	stw	fp,4(sp)
 1010c00:	df000104 	addi	fp,sp,4
 1010c04:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1010c08:	e13fff17 	ldw	r4,-4(fp)
 1010c0c:	1010b280 	call	1010b28 <__metal_mutex_release>
}
 1010c10:	0001883a 	nop
 1010c14:	e037883a 	mov	sp,fp
 1010c18:	dfc00117 	ldw	ra,4(sp)
 1010c1c:	df000017 	ldw	fp,0(sp)
 1010c20:	dec00204 	addi	sp,sp,8
 1010c24:	f800283a 	ret

01010c28 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 1010c28:	defffa04 	addi	sp,sp,-24
 1010c2c:	dfc00515 	stw	ra,20(sp)
 1010c30:	df000415 	stw	fp,16(sp)
 1010c34:	df000404 	addi	fp,sp,16
 1010c38:	e13ffc15 	stw	r4,-16(fp)
 1010c3c:	e17ffd15 	stw	r5,-12(fp)
 1010c40:	e1bffe15 	stw	r6,-8(fp)
 1010c44:	e1ffff15 	stw	r7,-4(fp)
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 1010c48:	e0fffc17 	ldw	r3,-16(fp)
 1010c4c:	e0bffd17 	ldw	r2,-12(fp)
 1010c50:	10000226 	beq	r2,zero,1010c5c <rpmsg_init_ept+0x34>
 1010c54:	e0bffd17 	ldw	r2,-12(fp)
 1010c58:	00000206 	br	1010c64 <rpmsg_init_ept+0x3c>
 1010c5c:	008040b4 	movhi	r2,258
 1010c60:	10977f04 	addi	r2,r2,24060
 1010c64:	01800804 	movi	r6,32
 1010c68:	100b883a 	mov	r5,r2
 1010c6c:	1809883a 	mov	r4,r3
 1010c70:	10147a40 	call	10147a4 <strncpy>
	ept->addr = src;
 1010c74:	e0bffc17 	ldw	r2,-16(fp)
 1010c78:	e0fffe17 	ldw	r3,-8(fp)
 1010c7c:	10c00915 	stw	r3,36(r2)
	ept->dest_addr = dest;
 1010c80:	e0bffc17 	ldw	r2,-16(fp)
 1010c84:	e0ffff17 	ldw	r3,-4(fp)
 1010c88:	10c00a15 	stw	r3,40(r2)
	ept->cb = cb;
 1010c8c:	e0bffc17 	ldw	r2,-16(fp)
 1010c90:	e0c00217 	ldw	r3,8(fp)
 1010c94:	10c00b15 	stw	r3,44(r2)
	ept->ns_unbind_cb = ns_unbind_cb;
 1010c98:	e0bffc17 	ldw	r2,-16(fp)
 1010c9c:	e0c00317 	ldw	r3,12(fp)
 1010ca0:	10c00c15 	stw	r3,48(r2)
}
 1010ca4:	0001883a 	nop
 1010ca8:	e037883a 	mov	sp,fp
 1010cac:	dfc00117 	ldw	ra,4(sp)
 1010cb0:	df000017 	ldw	fp,0(sp)
 1010cb4:	dec00204 	addi	sp,sp,8
 1010cb8:	f800283a 	ret

01010cbc <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 1010cbc:	defffe04 	addi	sp,sp,-8
 1010cc0:	df000115 	stw	fp,4(sp)
 1010cc4:	df000104 	addi	fp,sp,4
 1010cc8:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->role;
 1010ccc:	e0bfff17 	ldw	r2,-4(fp)
 1010cd0:	10801a17 	ldw	r2,104(r2)
 1010cd4:	10800517 	ldw	r2,20(r2)
}
 1010cd8:	e037883a 	mov	sp,fp
 1010cdc:	df000017 	ldw	fp,0(sp)
 1010ce0:	dec00104 	addi	sp,sp,4
 1010ce4:	f800283a 	ret

01010ce8 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 1010ce8:	defffc04 	addi	sp,sp,-16
 1010cec:	dfc00315 	stw	ra,12(sp)
 1010cf0:	df000215 	stw	fp,8(sp)
 1010cf4:	df000204 	addi	fp,sp,8
 1010cf8:	e13ffe15 	stw	r4,-8(fp)
 1010cfc:	2805883a 	mov	r2,r5
 1010d00:	e0bfff05 	stb	r2,-4(fp)
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 1010d04:	e0bffe17 	ldw	r2,-8(fp)
 1010d08:	10801a17 	ldw	r2,104(r2)
 1010d0c:	10800717 	ldw	r2,28(r2)
 1010d10:	10800117 	ldw	r2,4(r2)
 1010d14:	e0fffe17 	ldw	r3,-8(fp)
 1010d18:	18c01a17 	ldw	r3,104(r3)
 1010d1c:	e13fff03 	ldbu	r4,-4(fp)
 1010d20:	200b883a 	mov	r5,r4
 1010d24:	1809883a 	mov	r4,r3
 1010d28:	103ee83a 	callr	r2
}
 1010d2c:	0001883a 	nop
 1010d30:	e037883a 	mov	sp,fp
 1010d34:	dfc00117 	ldw	ra,4(sp)
 1010d38:	df000017 	ldw	fp,0(sp)
 1010d3c:	dec00204 	addi	sp,sp,8
 1010d40:	f800283a 	ret

01010d44 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 1010d44:	defffd04 	addi	sp,sp,-12
 1010d48:	dfc00215 	stw	ra,8(sp)
 1010d4c:	df000115 	stw	fp,4(sp)
 1010d50:	df000104 	addi	fp,sp,4
 1010d54:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->func->get_status(rvdev->vdev);
 1010d58:	e0bfff17 	ldw	r2,-4(fp)
 1010d5c:	10801a17 	ldw	r2,104(r2)
 1010d60:	10800717 	ldw	r2,28(r2)
 1010d64:	10800017 	ldw	r2,0(r2)
 1010d68:	e0ffff17 	ldw	r3,-4(fp)
 1010d6c:	18c01a17 	ldw	r3,104(r3)
 1010d70:	1809883a 	mov	r4,r3
 1010d74:	103ee83a 	callr	r2
}
 1010d78:	e037883a 	mov	sp,fp
 1010d7c:	dfc00117 	ldw	ra,4(sp)
 1010d80:	df000017 	ldw	fp,0(sp)
 1010d84:	dec00204 	addi	sp,sp,8
 1010d88:	f800283a 	ret

01010d8c <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 1010d8c:	defffd04 	addi	sp,sp,-12
 1010d90:	dfc00215 	stw	ra,8(sp)
 1010d94:	df000115 	stw	fp,4(sp)
 1010d98:	df000104 	addi	fp,sp,4
 1010d9c:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->func->get_features(rvdev->vdev);
 1010da0:	e0bfff17 	ldw	r2,-4(fp)
 1010da4:	10801a17 	ldw	r2,104(r2)
 1010da8:	10800717 	ldw	r2,28(r2)
 1010dac:	10800217 	ldw	r2,8(r2)
 1010db0:	e0ffff17 	ldw	r3,-4(fp)
 1010db4:	18c01a17 	ldw	r3,104(r3)
 1010db8:	1809883a 	mov	r4,r3
 1010dbc:	103ee83a 	callr	r2
}
 1010dc0:	e037883a 	mov	sp,fp
 1010dc4:	dfc00117 	ldw	ra,4(sp)
 1010dc8:	df000017 	ldw	fp,0(sp)
 1010dcc:	dec00204 	addi	sp,sp,8
 1010dd0:	f800283a 	ret

01010dd4 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks[])
{
 1010dd4:	defff904 	addi	sp,sp,-28
 1010dd8:	dfc00615 	stw	ra,24(sp)
 1010ddc:	df000515 	stw	fp,20(sp)
 1010de0:	df000504 	addi	fp,sp,20
 1010de4:	e13ffc15 	stw	r4,-16(fp)
 1010de8:	e17ffd15 	stw	r5,-12(fp)
 1010dec:	e1bffe15 	stw	r6,-8(fp)
 1010df0:	e1ffff15 	stw	r7,-4(fp)
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 1010df4:	e0bffc17 	ldw	r2,-16(fp)
 1010df8:	10c01a17 	ldw	r3,104(r2)
 1010dfc:	e13ffd17 	ldw	r4,-12(fp)
 1010e00:	e0800217 	ldw	r2,8(fp)
 1010e04:	d8800015 	stw	r2,0(sp)
 1010e08:	e1ffff17 	ldw	r7,-4(fp)
 1010e0c:	e1bffe17 	ldw	r6,-8(fp)
 1010e10:	200b883a 	mov	r5,r4
 1010e14:	1809883a 	mov	r4,r3
 1010e18:	10120c00 	call	10120c0 <virtio_create_virtqueues>
					callbacks);
}
 1010e1c:	e037883a 	mov	sp,fp
 1010e20:	dfc00117 	ldw	ra,4(sp)
 1010e24:	df000017 	ldw	fp,0(sp)
 1010e28:	dec00204 	addi	sp,sp,8
 1010e2c:	f800283a 	ret

01010e30 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 1010e30:	defffc04 	addi	sp,sp,-16
 1010e34:	dfc00315 	stw	ra,12(sp)
 1010e38:	df000215 	stw	fp,8(sp)
 1010e3c:	df000204 	addi	fp,sp,8
 1010e40:	e13ffe15 	stw	r4,-8(fp)
 1010e44:	e17fff15 	stw	r5,-4(fp)
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 1010e48:	01ffffc4 	movi	r7,-1
 1010e4c:	e1bfff17 	ldw	r6,-4(fp)
 1010e50:	000b883a 	mov	r5,zero
 1010e54:	e13ffe17 	ldw	r4,-8(fp)
 1010e58:	10105100 	call	1010510 <rpmsg_get_endpoint>
}
 1010e5c:	e037883a 	mov	sp,fp
 1010e60:	dfc00117 	ldw	ra,4(sp)
 1010e64:	df000017 	ldw	fp,0(sp)
 1010e68:	dec00204 	addi	sp,sp,8
 1010e6c:	f800283a 	ret

01010e70 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 1010e70:	defffc04 	addi	sp,sp,-16
 1010e74:	df000315 	stw	fp,12(sp)
 1010e78:	df000304 	addi	fp,sp,12
 1010e7c:	e13ffe15 	stw	r4,-8(fp)
 1010e80:	e17fff15 	stw	r5,-4(fp)
	void *buffer;

	if (shpool->avail < size)
 1010e84:	e0bffe17 	ldw	r2,-8(fp)
 1010e88:	10c00117 	ldw	r3,4(r2)
 1010e8c:	e0bfff17 	ldw	r2,-4(fp)
 1010e90:	1880022e 	bgeu	r3,r2,1010e9c <rpmsg_virtio_shm_pool_get_buffer+0x2c>
		return NULL;
 1010e94:	0005883a 	mov	r2,zero
 1010e98:	00001006 	br	1010edc <rpmsg_virtio_shm_pool_get_buffer+0x6c>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
 1010e9c:	e0bffe17 	ldw	r2,-8(fp)
 1010ea0:	10c00017 	ldw	r3,0(r2)
 1010ea4:	e0bffe17 	ldw	r2,-8(fp)
 1010ea8:	11000217 	ldw	r4,8(r2)
 1010eac:	e0bffe17 	ldw	r2,-8(fp)
 1010eb0:	10800117 	ldw	r2,4(r2)
 1010eb4:	2085c83a 	sub	r2,r4,r2
 1010eb8:	1885883a 	add	r2,r3,r2
 1010ebc:	e0bffd15 	stw	r2,-12(fp)
	shpool->avail -= size;
 1010ec0:	e0bffe17 	ldw	r2,-8(fp)
 1010ec4:	10c00117 	ldw	r3,4(r2)
 1010ec8:	e0bfff17 	ldw	r2,-4(fp)
 1010ecc:	1887c83a 	sub	r3,r3,r2
 1010ed0:	e0bffe17 	ldw	r2,-8(fp)
 1010ed4:	10c00115 	stw	r3,4(r2)

	return buffer;
 1010ed8:	e0bffd17 	ldw	r2,-12(fp)
}
 1010edc:	e037883a 	mov	sp,fp
 1010ee0:	df000017 	ldw	fp,0(sp)
 1010ee4:	dec00104 	addi	sp,sp,4
 1010ee8:	f800283a 	ret

01010eec <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 1010eec:	defffc04 	addi	sp,sp,-16
 1010ef0:	df000315 	stw	fp,12(sp)
 1010ef4:	df000304 	addi	fp,sp,12
 1010ef8:	e13ffd15 	stw	r4,-12(fp)
 1010efc:	e17ffe15 	stw	r5,-8(fp)
 1010f00:	e1bfff15 	stw	r6,-4(fp)
	if (!shpool)
 1010f04:	e0bffd17 	ldw	r2,-12(fp)
 1010f08:	10000a26 	beq	r2,zero,1010f34 <rpmsg_virtio_init_shm_pool+0x48>
		return;
	shpool->base = shb;
 1010f0c:	e0bffd17 	ldw	r2,-12(fp)
 1010f10:	e0fffe17 	ldw	r3,-8(fp)
 1010f14:	10c00015 	stw	r3,0(r2)
	shpool->size = size;
 1010f18:	e0bffd17 	ldw	r2,-12(fp)
 1010f1c:	e0ffff17 	ldw	r3,-4(fp)
 1010f20:	10c00215 	stw	r3,8(r2)
	shpool->avail = size;
 1010f24:	e0bffd17 	ldw	r2,-12(fp)
 1010f28:	e0ffff17 	ldw	r3,-4(fp)
 1010f2c:	10c00115 	stw	r3,4(r2)
 1010f30:	00000106 	br	1010f38 <rpmsg_virtio_init_shm_pool+0x4c>

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
	if (!shpool)
		return;
 1010f34:	0001883a 	nop
	shpool->base = shb;
	shpool->size = size;
	shpool->avail = size;
}
 1010f38:	e037883a 	mov	sp,fp
 1010f3c:	df000017 	ldw	fp,0(sp)
 1010f40:	dec00104 	addi	sp,sp,4
 1010f44:	f800283a 	ret

01010f48 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
 1010f48:	defff604 	addi	sp,sp,-40
 1010f4c:	dfc00915 	stw	ra,36(sp)
 1010f50:	df000815 	stw	fp,32(sp)
 1010f54:	df000804 	addi	fp,sp,32
 1010f58:	e13ffc15 	stw	r4,-16(fp)
 1010f5c:	e17ffd15 	stw	r5,-12(fp)
 1010f60:	e1bffe15 	stw	r6,-8(fp)
 1010f64:	3805883a 	mov	r2,r7
 1010f68:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 1010f6c:	e13ffc17 	ldw	r4,-16(fp)
 1010f70:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 1010f74:	e0bff915 	stw	r2,-28(fp)
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1010f78:	e0bff917 	ldw	r2,-28(fp)
 1010f7c:	10000e1e 	bne	r2,zero,1010fb8 <rpmsg_virtio_return_buffer+0x70>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 1010f80:	e0bffd17 	ldw	r2,-12(fp)
 1010f84:	e0bffa15 	stw	r2,-24(fp)
		vqbuf.len = len;
 1010f88:	e0bffe17 	ldw	r2,-8(fp)
 1010f8c:	e0bffb15 	stw	r2,-20(fp)
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 1010f90:	e0bffc17 	ldw	r2,-16(fp)
 1010f94:	10c01b17 	ldw	r3,108(r2)
 1010f98:	e13ffa04 	addi	r4,fp,-24
 1010f9c:	e0bffd17 	ldw	r2,-12(fp)
 1010fa0:	d8800015 	stw	r2,0(sp)
 1010fa4:	01c00044 	movi	r7,1
 1010fa8:	000d883a 	mov	r6,zero
 1010fac:	200b883a 	mov	r5,r4
 1010fb0:	1809883a 	mov	r4,r3
 1010fb4:	10127a00 	call	10127a0 <virtqueue_add_buffer>
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 1010fb8:	e0bff917 	ldw	r2,-28(fp)
 1010fbc:	10800058 	cmpnei	r2,r2,1
 1010fc0:	1000071e 	bne	r2,zero,1010fe0 <rpmsg_virtio_return_buffer+0x98>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 1010fc4:	e0bffc17 	ldw	r2,-16(fp)
 1010fc8:	10801b17 	ldw	r2,108(r2)
 1010fcc:	e0ffff0b 	ldhu	r3,-4(fp)
 1010fd0:	e1bffe17 	ldw	r6,-8(fp)
 1010fd4:	180b883a 	mov	r5,r3
 1010fd8:	1009883a 	mov	r4,r2
 1010fdc:	1012bcc0 	call	1012bcc <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 1010fe0:	0001883a 	nop
 1010fe4:	e037883a 	mov	sp,fp
 1010fe8:	dfc00117 	ldw	ra,4(sp)
 1010fec:	df000017 	ldw	fp,0(sp)
 1010ff0:	dec00204 	addi	sp,sp,8
 1010ff4:	f800283a 	ret

01010ff8 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
 1010ff8:	defff604 	addi	sp,sp,-40
 1010ffc:	dfc00915 	stw	ra,36(sp)
 1011000:	df000815 	stw	fp,32(sp)
 1011004:	df000804 	addi	fp,sp,32
 1011008:	e13ffc15 	stw	r4,-16(fp)
 101100c:	e17ffd15 	stw	r5,-12(fp)
 1011010:	e1bffe15 	stw	r6,-8(fp)
 1011014:	3805883a 	mov	r2,r7
 1011018:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 101101c:	e13ffc17 	ldw	r4,-16(fp)
 1011020:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 1011024:	e0bff915 	stw	r2,-28(fp)
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011028:	e0bff917 	ldw	r2,-28(fp)
 101102c:	10000f1e 	bne	r2,zero,101106c <rpmsg_virtio_enqueue_buffer+0x74>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 1011030:	e0bffd17 	ldw	r2,-12(fp)
 1011034:	e0bffa15 	stw	r2,-24(fp)
		vqbuf.len = len;
 1011038:	e0bffe17 	ldw	r2,-8(fp)
 101103c:	e0bffb15 	stw	r2,-20(fp)
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
 1011040:	e0bffc17 	ldw	r2,-16(fp)
 1011044:	10c01c17 	ldw	r3,112(r2)
 1011048:	e13ffa04 	addi	r4,fp,-24
 101104c:	e0bffd17 	ldw	r2,-12(fp)
 1011050:	d8800015 	stw	r2,0(sp)
 1011054:	000f883a 	mov	r7,zero
 1011058:	01800044 	movi	r6,1
 101105c:	200b883a 	mov	r5,r4
 1011060:	1809883a 	mov	r4,r3
 1011064:	10127a00 	call	10127a0 <virtqueue_add_buffer>
 1011068:	00000c06 	br	101109c <rpmsg_virtio_enqueue_buffer+0xa4>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 101106c:	e0bff917 	ldw	r2,-28(fp)
 1011070:	10800058 	cmpnei	r2,r2,1
 1011074:	1000081e 	bne	r2,zero,1011098 <rpmsg_virtio_enqueue_buffer+0xa0>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 1011078:	e0bffc17 	ldw	r2,-16(fp)
 101107c:	10801c17 	ldw	r2,112(r2)
 1011080:	e0ffff0b 	ldhu	r3,-4(fp)
 1011084:	e1bffe17 	ldw	r6,-8(fp)
 1011088:	180b883a 	mov	r5,r3
 101108c:	1009883a 	mov	r4,r2
 1011090:	1012bcc0 	call	1012bcc <virtqueue_add_consumed_buffer>
 1011094:	00000106 	br	101109c <rpmsg_virtio_enqueue_buffer+0xa4>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 1011098:	0005883a 	mov	r2,zero
}
 101109c:	e037883a 	mov	sp,fp
 10110a0:	dfc00117 	ldw	ra,4(sp)
 10110a4:	df000017 	ldw	fp,0(sp)
 10110a8:	dec00204 	addi	sp,sp,8
 10110ac:	f800283a 	ret

010110b0 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
 10110b0:	defff904 	addi	sp,sp,-28
 10110b4:	dfc00615 	stw	ra,24(sp)
 10110b8:	df000515 	stw	fp,20(sp)
 10110bc:	df000504 	addi	fp,sp,20
 10110c0:	e13ffd15 	stw	r4,-12(fp)
 10110c4:	e17ffe15 	stw	r5,-8(fp)
 10110c8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 10110cc:	e13ffd17 	ldw	r4,-12(fp)
 10110d0:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 10110d4:	e0bffc15 	stw	r2,-16(fp)
	void *data = NULL;
 10110d8:	e03ffb15 	stw	zero,-20(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 10110dc:	e0bffc17 	ldw	r2,-16(fp)
 10110e0:	1000121e 	bne	r2,zero,101112c <rpmsg_virtio_get_tx_buffer+0x7c>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
 10110e4:	e0bffd17 	ldw	r2,-12(fp)
 10110e8:	10801c17 	ldw	r2,112(r2)
 10110ec:	e1bfff17 	ldw	r6,-4(fp)
 10110f0:	e17ffe17 	ldw	r5,-8(fp)
 10110f4:	1009883a 	mov	r4,r2
 10110f8:	10128a40 	call	10128a4 <virtqueue_get_buffer>
 10110fc:	e0bffb15 	stw	r2,-20(fp)
		if (data == NULL) {
 1011100:	e0bffb17 	ldw	r2,-20(fp)
 1011104:	1000091e 	bne	r2,zero,101112c <rpmsg_virtio_get_tx_buffer+0x7c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 1011108:	e0bffd17 	ldw	r2,-12(fp)
 101110c:	10801e17 	ldw	r2,120(r2)
 1011110:	01408004 	movi	r5,512
 1011114:	1009883a 	mov	r4,r2
 1011118:	1010e700 	call	1010e70 <rpmsg_virtio_shm_pool_get_buffer>
 101111c:	e0bffb15 	stw	r2,-20(fp)
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 1011120:	e0bffe17 	ldw	r2,-8(fp)
 1011124:	00c08004 	movi	r3,512
 1011128:	10c00015 	stw	r3,0(r2)
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 101112c:	e0bffc17 	ldw	r2,-16(fp)
 1011130:	10800058 	cmpnei	r2,r2,1
 1011134:	1000071e 	bne	r2,zero,1011154 <rpmsg_virtio_get_tx_buffer+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
 1011138:	e0bffd17 	ldw	r2,-12(fp)
 101113c:	10801c17 	ldw	r2,112(r2)
 1011140:	e1bffe17 	ldw	r6,-8(fp)
 1011144:	e17fff17 	ldw	r5,-4(fp)
 1011148:	1009883a 	mov	r4,r2
 101114c:	1012ab80 	call	1012ab8 <virtqueue_get_available_buffer>
 1011150:	e0bffb15 	stw	r2,-20(fp)
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 1011154:	e0bffb17 	ldw	r2,-20(fp)
}
 1011158:	e037883a 	mov	sp,fp
 101115c:	dfc00117 	ldw	ra,4(sp)
 1011160:	df000017 	ldw	fp,0(sp)
 1011164:	dec00204 	addi	sp,sp,8
 1011168:	f800283a 	ret

0101116c <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
 101116c:	defff904 	addi	sp,sp,-28
 1011170:	dfc00615 	stw	ra,24(sp)
 1011174:	df000515 	stw	fp,20(sp)
 1011178:	df000504 	addi	fp,sp,20
 101117c:	e13ffd15 	stw	r4,-12(fp)
 1011180:	e17ffe15 	stw	r5,-8(fp)
 1011184:	e1bfff15 	stw	r6,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 1011188:	e13ffd17 	ldw	r4,-12(fp)
 101118c:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 1011190:	e0bffc15 	stw	r2,-16(fp)
	void *data = NULL;
 1011194:	e03ffb15 	stw	zero,-20(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011198:	e0bffc17 	ldw	r2,-16(fp)
 101119c:	1000071e 	bne	r2,zero,10111bc <rpmsg_virtio_get_rx_buffer+0x50>
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
 10111a0:	e0bffd17 	ldw	r2,-12(fp)
 10111a4:	10801b17 	ldw	r2,108(r2)
 10111a8:	e1bfff17 	ldw	r6,-4(fp)
 10111ac:	e17ffe17 	ldw	r5,-8(fp)
 10111b0:	1009883a 	mov	r4,r2
 10111b4:	10128a40 	call	10128a4 <virtqueue_get_buffer>
 10111b8:	e0bffb15 	stw	r2,-20(fp)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 10111bc:	e0bffc17 	ldw	r2,-16(fp)
 10111c0:	10800058 	cmpnei	r2,r2,1
 10111c4:	1000071e 	bne	r2,zero,10111e4 <rpmsg_virtio_get_rx_buffer+0x78>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
 10111c8:	e0bffd17 	ldw	r2,-12(fp)
 10111cc:	10801b17 	ldw	r2,108(r2)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
		data =
 10111d0:	e1bffe17 	ldw	r6,-8(fp)
 10111d4:	e17fff17 	ldw	r5,-4(fp)
 10111d8:	1009883a 	mov	r4,r2
 10111dc:	1012ab80 	call	1012ab8 <virtqueue_get_available_buffer>
 10111e0:	e0bffb15 	stw	r2,-20(fp)
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 10111e4:	e0bffb17 	ldw	r2,-20(fp)
}
 10111e8:	e037883a 	mov	sp,fp
 10111ec:	dfc00117 	ldw	ra,4(sp)
 10111f0:	df000017 	ldw	fp,0(sp)
 10111f4:	dec00204 	addi	sp,sp,8
 10111f8:	f800283a 	ret

010111fc <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 10111fc:	defffc04 	addi	sp,sp,-16
 1011200:	dfc00315 	stw	ra,12(sp)
 1011204:	df000215 	stw	fp,8(sp)
 1011208:	df000204 	addi	fp,sp,8
 101120c:	e13fff15 	stw	r4,-4(fp)
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 1011210:	e13fff17 	ldw	r4,-4(fp)
 1011214:	1010d440 	call	1010d44 <rpmsg_virtio_get_status>
 1011218:	e0bffe05 	stb	r2,-8(fp)
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 101121c:	e0bffe03 	ldbu	r2,-8(fp)
 1011220:	1080100c 	andi	r2,r2,64
 1011224:	10000426 	beq	r2,zero,1011238 <rpmsg_virtio_wait_remote_ready+0x3c>
			rpmsg_virtio_set_status(rvdev, 0);
 1011228:	000b883a 	mov	r5,zero
 101122c:	e13fff17 	ldw	r4,-4(fp)
 1011230:	1010ce80 	call	1010ce8 <rpmsg_virtio_set_status>
 1011234:	003ff606 	br	1011210 <__alt_data_end+0xff011210>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 1011238:	e0bffe03 	ldbu	r2,-8(fp)
 101123c:	1080010c 	andi	r2,r2,4
 1011240:	103ff326 	beq	r2,zero,1011210 <__alt_data_end+0xff011210>
			return true;
 1011244:	00800044 	movi	r2,1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 1011248:	e037883a 	mov	sp,fp
 101124c:	dfc00117 	ldw	ra,4(sp)
 1011250:	df000017 	ldw	fp,0(sp)
 1011254:	dec00204 	addi	sp,sp,8
 1011258:	f800283a 	ret

0101125c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 101125c:	defffb04 	addi	sp,sp,-20
 1011260:	dfc00415 	stw	ra,16(sp)
 1011264:	df000315 	stw	fp,12(sp)
 1011268:	df000304 	addi	fp,sp,12
 101126c:	e13fff15 	stw	r4,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 1011270:	e13fff17 	ldw	r4,-4(fp)
 1011274:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 1011278:	e0bffe15 	stw	r2,-8(fp)
	int length = 0;
 101127c:	e03ffd15 	stw	zero,-12(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011280:	e0bffe17 	ldw	r2,-8(fp)
 1011284:	1000021e 	bne	r2,zero,1011290 <_rpmsg_virtio_get_buffer_size+0x34>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 1011288:	00807c04 	movi	r2,496
 101128c:	e0bffd15 	stw	r2,-12(fp)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 1011290:	e0bffe17 	ldw	r2,-8(fp)
 1011294:	10800058 	cmpnei	r2,r2,1
 1011298:	1000091e 	bne	r2,zero,10112c0 <_rpmsg_virtio_get_buffer_size+0x64>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 101129c:	e0bfff17 	ldw	r2,-4(fp)
 10112a0:	10801c17 	ldw	r2,112(r2)
 10112a4:	1009883a 	mov	r4,r2
 10112a8:	1012f840 	call	1012f84 <virtqueue_get_desc_size>
 10112ac:	10bffc04 	addi	r2,r2,-16
	if (role == RPMSG_REMOTE) {
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
 10112b0:	e0bffd15 	stw	r2,-12(fp)
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
		if (length < 0) {
 10112b4:	e0bffd17 	ldw	r2,-12(fp)
 10112b8:	1000010e 	bge	r2,zero,10112c0 <_rpmsg_virtio_get_buffer_size+0x64>
			length = 0;
 10112bc:	e03ffd15 	stw	zero,-12(fp)
		}
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 10112c0:	e0bffd17 	ldw	r2,-12(fp)
}
 10112c4:	e037883a 	mov	sp,fp
 10112c8:	dfc00117 	ldw	ra,4(sp)
 10112cc:	df000017 	ldw	fp,0(sp)
 10112d0:	dec00204 	addi	sp,sp,8
 10112d4:	f800283a 	ret

010112d8 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 10112d8:	deffee04 	addi	sp,sp,-72
 10112dc:	dfc01115 	stw	ra,68(sp)
 10112e0:	df001015 	stw	fp,64(sp)
 10112e4:	df001004 	addi	fp,sp,64
 10112e8:	e13ffc15 	stw	r4,-16(fp)
 10112ec:	e17ffd15 	stw	r5,-12(fp)
 10112f0:	e1bffe15 	stw	r6,-8(fp)
 10112f4:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 10112f8:	e03ff015 	stw	zero,-64(fp)
	uint32_t buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 10112fc:	e0bffc17 	ldw	r2,-16(fp)
 1011300:	e0bff215 	stw	r2,-56(fp)

	status = rpmsg_virtio_get_status(rvdev);
 1011304:	e13ff217 	ldw	r4,-56(fp)
 1011308:	1010d440 	call	1010d44 <rpmsg_virtio_get_status>
 101130c:	10803fcc 	andi	r2,r2,255
 1011310:	e0bff315 	stw	r2,-52(fp)
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 1011314:	e0bff317 	ldw	r2,-52(fp)
 1011318:	1080010c 	andi	r2,r2,4
 101131c:	1000021e 	bne	r2,zero,1011328 <rpmsg_virtio_send_offchannel_raw+0x50>
		return RPMSG_ERR_DEV_STATE;
 1011320:	00be0b04 	movi	r2,-2004
 1011324:	00006e06 	br	10114e0 <rpmsg_virtio_send_offchannel_raw+0x208>
	}

	if (wait)
 1011328:	e0800317 	ldw	r2,12(fp)
 101132c:	10000326 	beq	r2,zero,101133c <rpmsg_virtio_send_offchannel_raw+0x64>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 1011330:	008ea604 	movi	r2,15000
 1011334:	e0bff115 	stw	r2,-60(fp)
 1011338:	00000106 	br	1011340 <rpmsg_virtio_send_offchannel_raw+0x68>
	else
		tick_count = 0;
 101133c:	e03ff115 	stw	zero,-60(fp)

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 1011340:	e0bffc17 	ldw	r2,-16(fp)
 1011344:	10801604 	addi	r2,r2,88
 1011348:	1009883a 	mov	r4,r2
 101134c:	1010bc00 	call	1010bc0 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 1011350:	e13ff217 	ldw	r4,-56(fp)
 1011354:	101125c0 	call	101125c <_rpmsg_virtio_get_buffer_size>
 1011358:	e0bff415 	stw	r2,-48(fp)
		if (size <= avail_size)
 101135c:	e0800217 	ldw	r2,8(fp)
 1011360:	e0fff417 	ldw	r3,-48(fp)
 1011364:	18800716 	blt	r3,r2,1011384 <rpmsg_virtio_send_offchannel_raw+0xac>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 1011368:	e0fffa04 	addi	r3,fp,-24
 101136c:	e0bffb04 	addi	r2,fp,-20
 1011370:	180d883a 	mov	r6,r3
 1011374:	100b883a 	mov	r5,r2
 1011378:	e13ff217 	ldw	r4,-56(fp)
 101137c:	10110b00 	call	10110b0 <rpmsg_virtio_get_tx_buffer>
 1011380:	e0bff015 	stw	r2,-64(fp)
							    &idx);
		metal_mutex_release(&rdev->lock);
 1011384:	e0bffc17 	ldw	r2,-16(fp)
 1011388:	10801604 	addi	r2,r2,88
 101138c:	1009883a 	mov	r4,r2
 1011390:	1010bf40 	call	1010bf4 <metal_mutex_release>
		if (buffer || !tick_count)
 1011394:	e0bff017 	ldw	r2,-64(fp)
 1011398:	10000c1e 	bne	r2,zero,10113cc <rpmsg_virtio_send_offchannel_raw+0xf4>
 101139c:	e0bff117 	ldw	r2,-60(fp)
 10113a0:	10000a26 	beq	r2,zero,10113cc <rpmsg_virtio_send_offchannel_raw+0xf4>
			break;
		if (avail_size != 0)
 10113a4:	e0bff417 	ldw	r2,-48(fp)
 10113a8:	10000226 	beq	r2,zero,10113b4 <rpmsg_virtio_send_offchannel_raw+0xdc>
			return RPMSG_ERR_BUFF_SIZE;
 10113ac:	00be0ac4 	movi	r2,-2005
 10113b0:	00004b06 	br	10114e0 <rpmsg_virtio_send_offchannel_raw+0x208>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 10113b4:	0100fa04 	movi	r4,1000
 10113b8:	101099c0 	call	101099c <metal_sleep_usec>
		tick_count--;
 10113bc:	e0bff117 	ldw	r2,-60(fp)
 10113c0:	10bfffc4 	addi	r2,r2,-1
 10113c4:	e0bff115 	stw	r2,-60(fp)
	}
 10113c8:	003fdd06 	br	1011340 <__alt_data_end+0xff011340>
	if (!buffer)
 10113cc:	e0bff017 	ldw	r2,-64(fp)
 10113d0:	1000021e 	bne	r2,zero,10113dc <rpmsg_virtio_send_offchannel_raw+0x104>
		return RPMSG_ERR_NO_BUFF;
 10113d4:	00be0b84 	movi	r2,-2002
 10113d8:	00004106 	br	10114e0 <rpmsg_virtio_send_offchannel_raw+0x208>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 10113dc:	e0bffe17 	ldw	r2,-8(fp)
 10113e0:	e0bff715 	stw	r2,-36(fp)
	rp_hdr.src = src;
 10113e4:	e0bffd17 	ldw	r2,-12(fp)
 10113e8:	e0bff615 	stw	r2,-40(fp)
	rp_hdr.len = size;
 10113ec:	e0800217 	ldw	r2,8(fp)
 10113f0:	e0bff90d 	sth	r2,-28(fp)
	rp_hdr.reserved = 0;
 10113f4:	e03ff815 	stw	zero,-32(fp)

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 10113f8:	e0bff217 	ldw	r2,-56(fp)
 10113fc:	10801d17 	ldw	r2,116(r2)
 1011400:	e0bff515 	stw	r2,-44(fp)
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 1011404:	e17ff017 	ldw	r5,-64(fp)
 1011408:	e13ff517 	ldw	r4,-44(fp)
 101140c:	1010a400 	call	1010a40 <metal_io_virt_to_offset>
 1011410:	1007883a 	mov	r3,r2
 1011414:	e0bff604 	addi	r2,fp,-40
 1011418:	01c00404 	movi	r7,16
 101141c:	100d883a 	mov	r6,r2
 1011420:	180b883a 	mov	r5,r3
 1011424:	e13ff517 	ldw	r4,-44(fp)
 1011428:	1007d880 	call	1007d88 <metal_io_block_write>
 101142c:	e0bff315 	stw	r2,-52(fp)
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
 1011430:	e0bff317 	ldw	r2,-52(fp)
 1011434:	10800420 	cmpeqi	r2,r2,16
 1011438:	1000011e 	bne	r2,zero,1011440 <rpmsg_virtio_send_offchannel_raw+0x168>
 101143c:	003fff06 	br	101143c <__alt_data_end+0xff01143c>

	status = metal_io_block_write(io,
 1011440:	e0bff017 	ldw	r2,-64(fp)
 1011444:	10800404 	addi	r2,r2,16
 1011448:	100b883a 	mov	r5,r2
 101144c:	e13ff517 	ldw	r4,-44(fp)
 1011450:	1010a400 	call	1010a40 <metal_io_virt_to_offset>
 1011454:	e1c00217 	ldw	r7,8(fp)
 1011458:	e1bfff17 	ldw	r6,-4(fp)
 101145c:	100b883a 	mov	r5,r2
 1011460:	e13ff517 	ldw	r4,-44(fp)
 1011464:	1007d880 	call	1007d88 <metal_io_block_write>
 1011468:	e0bff315 	stw	r2,-52(fp)
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
 101146c:	e0fff317 	ldw	r3,-52(fp)
 1011470:	e0800217 	ldw	r2,8(fp)
 1011474:	18800126 	beq	r3,r2,101147c <rpmsg_virtio_send_offchannel_raw+0x1a4>
 1011478:	003fff06 	br	1011478 <__alt_data_end+0xff011478>
	metal_mutex_acquire(&rdev->lock);
 101147c:	e0bffc17 	ldw	r2,-16(fp)
 1011480:	10801604 	addi	r2,r2,88
 1011484:	1009883a 	mov	r4,r2
 1011488:	1010bc00 	call	1010bc0 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 101148c:	e0bffb17 	ldw	r2,-20(fp)
 1011490:	e0fffa0b 	ldhu	r3,-24(fp)
 1011494:	18ffffcc 	andi	r3,r3,65535
 1011498:	180f883a 	mov	r7,r3
 101149c:	100d883a 	mov	r6,r2
 10114a0:	e17ff017 	ldw	r5,-64(fp)
 10114a4:	e13ff217 	ldw	r4,-56(fp)
 10114a8:	1010ff80 	call	1010ff8 <rpmsg_virtio_enqueue_buffer>
 10114ac:	e0bff315 	stw	r2,-52(fp)
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
 10114b0:	e0bff317 	ldw	r2,-52(fp)
 10114b4:	10000126 	beq	r2,zero,10114bc <rpmsg_virtio_send_offchannel_raw+0x1e4>
 10114b8:	003fff06 	br	10114b8 <__alt_data_end+0xff0114b8>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 10114bc:	e0bff217 	ldw	r2,-56(fp)
 10114c0:	10801c17 	ldw	r2,112(r2)
 10114c4:	1009883a 	mov	r4,r2
 10114c8:	1012e140 	call	1012e14 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 10114cc:	e0bffc17 	ldw	r2,-16(fp)
 10114d0:	10801604 	addi	r2,r2,88
 10114d4:	1009883a 	mov	r4,r2
 10114d8:	1010bf40 	call	1010bf4 <metal_mutex_release>

	return size;
 10114dc:	e0800217 	ldw	r2,8(fp)
}
 10114e0:	e037883a 	mov	sp,fp
 10114e4:	dfc00117 	ldw	ra,4(sp)
 10114e8:	df000017 	ldw	fp,0(sp)
 10114ec:	dec00204 	addi	sp,sp,8
 10114f0:	f800283a 	ret

010114f4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 10114f4:	defffe04 	addi	sp,sp,-8
 10114f8:	df000115 	stw	fp,4(sp)
 10114fc:	df000104 	addi	fp,sp,4
 1011500:	e13fff15 	stw	r4,-4(fp)
	(void)vq;
}
 1011504:	0001883a 	nop
 1011508:	e037883a 	mov	sp,fp
 101150c:	df000017 	ldw	fp,0(sp)
 1011510:	dec00104 	addi	sp,sp,4
 1011514:	f800283a 	ret

01011518 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 1011518:	defff404 	addi	sp,sp,-48
 101151c:	dfc00b15 	stw	ra,44(sp)
 1011520:	df000a15 	stw	fp,40(sp)
 1011524:	df000a04 	addi	fp,sp,40
 1011528:	e13fff15 	stw	r4,-4(fp)
	struct virtio_device *vdev = vq->vq_dev;
 101152c:	e0bfff17 	ldw	r2,-4(fp)
 1011530:	10800017 	ldw	r2,0(r2)
 1011534:	e0bff815 	stw	r2,-32(fp)
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 1011538:	e0bff817 	ldw	r2,-32(fp)
 101153c:	10800817 	ldw	r2,32(r2)
 1011540:	e0bff915 	stw	r2,-28(fp)
	struct rpmsg_device *rdev = &rvdev->rdev;
 1011544:	e0bff917 	ldw	r2,-28(fp)
 1011548:	e0bffa15 	stw	r2,-24(fp)
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 101154c:	e0bffa17 	ldw	r2,-24(fp)
 1011550:	10801604 	addi	r2,r2,88
 1011554:	1009883a 	mov	r4,r2
 1011558:	1010bc00 	call	1010bc0 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 101155c:	e0fffe04 	addi	r3,fp,-8
 1011560:	e0bffd04 	addi	r2,fp,-12
 1011564:	180d883a 	mov	r6,r3
 1011568:	100b883a 	mov	r5,r2
 101156c:	e13ff917 	ldw	r4,-28(fp)
 1011570:	101116c0 	call	101116c <rpmsg_virtio_get_rx_buffer>
 1011574:	e0bff715 	stw	r2,-36(fp)

	metal_mutex_release(&rdev->lock);
 1011578:	e0bffa17 	ldw	r2,-24(fp)
 101157c:	10801604 	addi	r2,r2,88
 1011580:	1009883a 	mov	r4,r2
 1011584:	1010bf40 	call	1010bf4 <metal_mutex_release>

	while (rp_hdr) {
 1011588:	00006906 	br	1011730 <rpmsg_virtio_rx_callback+0x218>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 101158c:	e0bffa17 	ldw	r2,-24(fp)
 1011590:	10801604 	addi	r2,r2,88
 1011594:	1009883a 	mov	r4,r2
 1011598:	1010bc00 	call	1010bc0 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 101159c:	e0bff717 	ldw	r2,-36(fp)
 10115a0:	10c00103 	ldbu	r3,4(r2)
 10115a4:	11000143 	ldbu	r4,5(r2)
 10115a8:	2008923a 	slli	r4,r4,8
 10115ac:	20c6b03a 	or	r3,r4,r3
 10115b0:	11000183 	ldbu	r4,6(r2)
 10115b4:	2008943a 	slli	r4,r4,16
 10115b8:	20c6b03a 	or	r3,r4,r3
 10115bc:	108001c3 	ldbu	r2,7(r2)
 10115c0:	1004963a 	slli	r2,r2,24
 10115c4:	10c4b03a 	or	r2,r2,r3
 10115c8:	100b883a 	mov	r5,r2
 10115cc:	e13ffa17 	ldw	r4,-24(fp)
 10115d0:	1010e300 	call	1010e30 <rpmsg_get_ept_from_addr>
 10115d4:	e0bffb15 	stw	r2,-20(fp)
		metal_mutex_release(&rdev->lock);
 10115d8:	e0bffa17 	ldw	r2,-24(fp)
 10115dc:	10801604 	addi	r2,r2,88
 10115e0:	1009883a 	mov	r4,r2
 10115e4:	1010bf40 	call	1010bf4 <metal_mutex_release>

		if (ept) {
 10115e8:	e0bffb17 	ldw	r2,-20(fp)
 10115ec:	10003326 	beq	r2,zero,10116bc <rpmsg_virtio_rx_callback+0x1a4>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 10115f0:	e0bffb17 	ldw	r2,-20(fp)
 10115f4:	10800a17 	ldw	r2,40(r2)
 10115f8:	10bfffd8 	cmpnei	r2,r2,-1
 10115fc:	10000e1e 	bne	r2,zero,1011638 <rpmsg_virtio_rx_callback+0x120>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
 1011600:	e0bff717 	ldw	r2,-36(fp)
 1011604:	10c00003 	ldbu	r3,0(r2)
 1011608:	11000043 	ldbu	r4,1(r2)
 101160c:	2008923a 	slli	r4,r4,8
 1011610:	20c6b03a 	or	r3,r4,r3
 1011614:	11000083 	ldbu	r4,2(r2)
 1011618:	2008943a 	slli	r4,r4,16
 101161c:	20c6b03a 	or	r3,r4,r3
 1011620:	108000c3 	ldbu	r2,3(r2)
 1011624:	1004963a 	slli	r2,r2,24
 1011628:	10c4b03a 	or	r2,r2,r3
 101162c:	1007883a 	mov	r3,r2
 1011630:	e0bffb17 	ldw	r2,-20(fp)
 1011634:	10c00a15 	stw	r3,40(r2)
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 1011638:	e0bffb17 	ldw	r2,-20(fp)
 101163c:	10c00b17 	ldw	r3,44(r2)
 1011640:	e0bff717 	ldw	r2,-36(fp)
 1011644:	12000404 	addi	r8,r2,16
					 rp_hdr->len, rp_hdr->src, ept->priv);
 1011648:	e0bff717 	ldw	r2,-36(fp)
 101164c:	11000303 	ldbu	r4,12(r2)
 1011650:	10800343 	ldbu	r2,13(r2)
 1011654:	1004923a 	slli	r2,r2,8
 1011658:	1104b03a 	or	r2,r2,r4
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 101165c:	11bfffcc 	andi	r6,r2,65535
 1011660:	e0bff717 	ldw	r2,-36(fp)
 1011664:	11000003 	ldbu	r4,0(r2)
 1011668:	11400043 	ldbu	r5,1(r2)
 101166c:	280a923a 	slli	r5,r5,8
 1011670:	2908b03a 	or	r4,r5,r4
 1011674:	11400083 	ldbu	r5,2(r2)
 1011678:	280a943a 	slli	r5,r5,16
 101167c:	2908b03a 	or	r4,r5,r4
 1011680:	108000c3 	ldbu	r2,3(r2)
 1011684:	1004963a 	slli	r2,r2,24
 1011688:	1104b03a 	or	r2,r2,r4
 101168c:	1009883a 	mov	r4,r2
 1011690:	e0bffb17 	ldw	r2,-20(fp)
 1011694:	10800f17 	ldw	r2,60(r2)
 1011698:	d8800015 	stw	r2,0(sp)
 101169c:	200f883a 	mov	r7,r4
 10116a0:	400b883a 	mov	r5,r8
 10116a4:	e13ffb17 	ldw	r4,-20(fp)
 10116a8:	183ee83a 	callr	r3
 10116ac:	e0bffc15 	stw	r2,-16(fp)
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
 10116b0:	e0bffc17 	ldw	r2,-16(fp)
 10116b4:	1000010e 	bge	r2,zero,10116bc <rpmsg_virtio_rx_callback+0x1a4>
 10116b8:	003fff06 	br	10116b8 <__alt_data_end+0xff0116b8>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
 10116bc:	e0bffa17 	ldw	r2,-24(fp)
 10116c0:	10801604 	addi	r2,r2,88
 10116c4:	1009883a 	mov	r4,r2
 10116c8:	1010bc00 	call	1010bc0 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 10116cc:	e0bffd17 	ldw	r2,-12(fp)
 10116d0:	e0fffe0b 	ldhu	r3,-8(fp)
 10116d4:	18ffffcc 	andi	r3,r3,65535
 10116d8:	180f883a 	mov	r7,r3
 10116dc:	100d883a 	mov	r6,r2
 10116e0:	e17ff717 	ldw	r5,-36(fp)
 10116e4:	e13ff917 	ldw	r4,-28(fp)
 10116e8:	1010f480 	call	1010f48 <rpmsg_virtio_return_buffer>

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 10116ec:	e0fffe04 	addi	r3,fp,-8
 10116f0:	e0bffd04 	addi	r2,fp,-12
 10116f4:	180d883a 	mov	r6,r3
 10116f8:	100b883a 	mov	r5,r2
 10116fc:	e13ff917 	ldw	r4,-28(fp)
 1011700:	101116c0 	call	101116c <rpmsg_virtio_get_rx_buffer>
 1011704:	e0bff715 	stw	r2,-36(fp)
		if (rp_hdr == NULL) {
 1011708:	e0bff717 	ldw	r2,-36(fp)
 101170c:	1000041e 	bne	r2,zero,1011720 <rpmsg_virtio_rx_callback+0x208>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
 1011710:	e0bff917 	ldw	r2,-28(fp)
 1011714:	10801b17 	ldw	r2,108(r2)
 1011718:	1009883a 	mov	r4,r2
 101171c:	1012e140 	call	1012e14 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
 1011720:	e0bffa17 	ldw	r2,-24(fp)
 1011724:	10801604 	addi	r2,r2,88
 1011728:	1009883a 	mov	r4,r2
 101172c:	1010bf40 	call	1010bf4 <metal_mutex_release>
	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
 1011730:	e0bff717 	ldw	r2,-36(fp)
 1011734:	103f951e 	bne	r2,zero,101158c <__alt_data_end+0xff01158c>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
		}
		metal_mutex_release(&rdev->lock);
	}
}
 1011738:	0001883a 	nop
 101173c:	e037883a 	mov	sp,fp
 1011740:	dfc00117 	ldw	ra,4(sp)
 1011744:	df000017 	ldw	fp,0(sp)
 1011748:	dec00204 	addi	sp,sp,8
 101174c:	f800283a 	ret

01011750 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 1011750:	deffec04 	addi	sp,sp,-80
 1011754:	dfc01315 	stw	ra,76(sp)
 1011758:	df001215 	stw	fp,72(sp)
 101175c:	df001204 	addi	fp,sp,72
 1011760:	e13ffc15 	stw	r4,-16(fp)
 1011764:	e17ffd15 	stw	r5,-12(fp)
 1011768:	e1bffe15 	stw	r6,-8(fp)
 101176c:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_device *rdev = ept->rdev;
 1011770:	e0bffc17 	ldw	r2,-16(fp)
 1011774:	10800817 	ldw	r2,32(r2)
 1011778:	e0bfee15 	stw	r2,-72(fp)
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 101177c:	e0bfee17 	ldw	r2,-72(fp)
 1011780:	e0bfef15 	stw	r2,-68(fp)
	struct metal_io_region *io = rvdev->shbuf_io;
 1011784:	e0bfef17 	ldw	r2,-68(fp)
 1011788:	10801d17 	ldw	r2,116(r2)
 101178c:	e0bff015 	stw	r2,-64(fp)
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
 1011790:	e0bffd17 	ldw	r2,-12(fp)
 1011794:	e0bff115 	stw	r2,-60(fp)
	if (len != sizeof(*ns_msg))
 1011798:	e0bffe17 	ldw	r2,-8(fp)
 101179c:	10800a20 	cmpeqi	r2,r2,40
 10117a0:	1000021e 	bne	r2,zero,10117ac <rpmsg_virtio_ns_callback+0x5c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 10117a4:	0005883a 	mov	r2,zero
 10117a8:	00005b06 	br	1011918 <rpmsg_virtio_ns_callback+0x1c8>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 10117ac:	e0bff117 	ldw	r2,-60(fp)

	ns_msg = data;
	if (len != sizeof(*ns_msg))
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
	metal_io_block_read(io,
 10117b0:	100b883a 	mov	r5,r2
 10117b4:	e13ff017 	ldw	r4,-64(fp)
 10117b8:	1010a400 	call	1010a40 <metal_io_virt_to_offset>
 10117bc:	1007883a 	mov	r3,r2
 10117c0:	e0bff404 	addi	r2,fp,-48
 10117c4:	01c00804 	movi	r7,32
 10117c8:	100d883a 	mov	r6,r2
 10117cc:	180b883a 	mov	r5,r3
 10117d0:	e13ff017 	ldw	r4,-64(fp)
 10117d4:	1007bd40 	call	1007bd4 <metal_io_block_read>
			    metal_io_virt_to_offset(io, ns_msg->name),
			    &name, sizeof(name));
	dest = ns_msg->addr;
 10117d8:	e0bff117 	ldw	r2,-60(fp)
 10117dc:	10c00803 	ldbu	r3,32(r2)
 10117e0:	11000843 	ldbu	r4,33(r2)
 10117e4:	2008923a 	slli	r4,r4,8
 10117e8:	20c6b03a 	or	r3,r4,r3
 10117ec:	11000883 	ldbu	r4,34(r2)
 10117f0:	2008943a 	slli	r4,r4,16
 10117f4:	20c6b03a 	or	r3,r4,r3
 10117f8:	108008c3 	ldbu	r2,35(r2)
 10117fc:	1004963a 	slli	r2,r2,24
 1011800:	10c4b03a 	or	r2,r2,r3
 1011804:	e0bff215 	stw	r2,-56(fp)

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 1011808:	e0bfee17 	ldw	r2,-72(fp)
 101180c:	10801604 	addi	r2,r2,88
 1011810:	1009883a 	mov	r4,r2
 1011814:	1010bc00 	call	1010bc0 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 1011818:	e0bff404 	addi	r2,fp,-48
 101181c:	e1fff217 	ldw	r7,-56(fp)
 1011820:	01bfffc4 	movi	r6,-1
 1011824:	100b883a 	mov	r5,r2
 1011828:	e13fee17 	ldw	r4,-72(fp)
 101182c:	10105100 	call	1010510 <rpmsg_get_endpoint>
 1011830:	e0bff315 	stw	r2,-52(fp)

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 1011834:	e0bff117 	ldw	r2,-60(fp)
 1011838:	10c00903 	ldbu	r3,36(r2)
 101183c:	11000943 	ldbu	r4,37(r2)
 1011840:	2008923a 	slli	r4,r4,8
 1011844:	20c6b03a 	or	r3,r4,r3
 1011848:	11000983 	ldbu	r4,38(r2)
 101184c:	2008943a 	slli	r4,r4,16
 1011850:	20c6b03a 	or	r3,r4,r3
 1011854:	108009c3 	ldbu	r2,39(r2)
 1011858:	1004963a 	slli	r2,r2,24
 101185c:	10c4b03a 	or	r2,r2,r3
 1011860:	1080004c 	andi	r2,r2,1
 1011864:	10001326 	beq	r2,zero,10118b4 <rpmsg_virtio_ns_callback+0x164>
		if (_ept)
 1011868:	e0bff317 	ldw	r2,-52(fp)
 101186c:	10000326 	beq	r2,zero,101187c <rpmsg_virtio_ns_callback+0x12c>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 1011870:	e0bff317 	ldw	r2,-52(fp)
 1011874:	00ffffc4 	movi	r3,-1
 1011878:	10c00a15 	stw	r3,40(r2)
		metal_mutex_release(&rdev->lock);
 101187c:	e0bfee17 	ldw	r2,-72(fp)
 1011880:	10801604 	addi	r2,r2,88
 1011884:	1009883a 	mov	r4,r2
 1011888:	1010bf40 	call	1010bf4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 101188c:	e0bff317 	ldw	r2,-52(fp)
 1011890:	10002026 	beq	r2,zero,1011914 <rpmsg_virtio_ns_callback+0x1c4>
 1011894:	e0bff317 	ldw	r2,-52(fp)
 1011898:	10800c17 	ldw	r2,48(r2)
 101189c:	10001d26 	beq	r2,zero,1011914 <rpmsg_virtio_ns_callback+0x1c4>
			_ept->ns_unbind_cb(ept);
 10118a0:	e0bff317 	ldw	r2,-52(fp)
 10118a4:	10800c17 	ldw	r2,48(r2)
 10118a8:	e13ffc17 	ldw	r4,-16(fp)
 10118ac:	103ee83a 	callr	r2
 10118b0:	00001806 	br	1011914 <rpmsg_virtio_ns_callback+0x1c4>
	} else {
		if (!_ept) {
 10118b4:	e0bff317 	ldw	r2,-52(fp)
 10118b8:	10000f1e 	bne	r2,zero,10118f8 <rpmsg_virtio_ns_callback+0x1a8>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 10118bc:	e0bfee17 	ldw	r2,-72(fp)
 10118c0:	10801604 	addi	r2,r2,88
 10118c4:	1009883a 	mov	r4,r2
 10118c8:	1010bf40 	call	1010bf4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 10118cc:	e0bfee17 	ldw	r2,-72(fp)
 10118d0:	10801717 	ldw	r2,92(r2)
 10118d4:	10000f26 	beq	r2,zero,1011914 <rpmsg_virtio_ns_callback+0x1c4>
				rdev->ns_bind_cb(rdev, name, dest);
 10118d8:	e0bfee17 	ldw	r2,-72(fp)
 10118dc:	10801717 	ldw	r2,92(r2)
 10118e0:	e0fff404 	addi	r3,fp,-48
 10118e4:	e1bff217 	ldw	r6,-56(fp)
 10118e8:	180b883a 	mov	r5,r3
 10118ec:	e13fee17 	ldw	r4,-72(fp)
 10118f0:	103ee83a 	callr	r2
 10118f4:	00000706 	br	1011914 <rpmsg_virtio_ns_callback+0x1c4>
		} else {
			_ept->dest_addr = dest;
 10118f8:	e0bff317 	ldw	r2,-52(fp)
 10118fc:	e0fff217 	ldw	r3,-56(fp)
 1011900:	10c00a15 	stw	r3,40(r2)
			metal_mutex_release(&rdev->lock);
 1011904:	e0bfee17 	ldw	r2,-72(fp)
 1011908:	10801604 	addi	r2,r2,88
 101190c:	1009883a 	mov	r4,r2
 1011910:	1010bf40 	call	1010bf4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 1011914:	0005883a 	mov	r2,zero
}
 1011918:	e037883a 	mov	sp,fp
 101191c:	dfc00117 	ldw	ra,4(sp)
 1011920:	df000017 	ldw	fp,0(sp)
 1011924:	dec00204 	addi	sp,sp,8
 1011928:	f800283a 	ret

0101192c <rpmsg_virtio_get_buffer_size>:

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
 101192c:	defffb04 	addi	sp,sp,-20
 1011930:	dfc00415 	stw	ra,16(sp)
 1011934:	df000315 	stw	fp,12(sp)
 1011938:	df000304 	addi	fp,sp,12
 101193c:	e13fff15 	stw	r4,-4(fp)
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
 1011940:	e0bfff17 	ldw	r2,-4(fp)
 1011944:	1000021e 	bne	r2,zero,1011950 <rpmsg_virtio_get_buffer_size+0x24>
		return RPMSG_ERR_PARAM;
 1011948:	00be0b44 	movi	r2,-2003
 101194c:	00000e06 	br	1011988 <rpmsg_virtio_get_buffer_size+0x5c>
	metal_mutex_acquire(&rdev->lock);
 1011950:	e0bfff17 	ldw	r2,-4(fp)
 1011954:	10801604 	addi	r2,r2,88
 1011958:	1009883a 	mov	r4,r2
 101195c:	1010bc00 	call	1010bc0 <metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
 1011960:	e0bfff17 	ldw	r2,-4(fp)
 1011964:	e0bffd15 	stw	r2,-12(fp)
	size = _rpmsg_virtio_get_buffer_size(rvdev);
 1011968:	e13ffd17 	ldw	r4,-12(fp)
 101196c:	101125c0 	call	101125c <_rpmsg_virtio_get_buffer_size>
 1011970:	e0bffe15 	stw	r2,-8(fp)
	metal_mutex_release(&rdev->lock);
 1011974:	e0bfff17 	ldw	r2,-4(fp)
 1011978:	10801604 	addi	r2,r2,88
 101197c:	1009883a 	mov	r4,r2
 1011980:	1010bf40 	call	1010bf4 <metal_mutex_release>
	return size;
 1011984:	e0bffe17 	ldw	r2,-8(fp)
}
 1011988:	e037883a 	mov	sp,fp
 101198c:	dfc00117 	ldw	ra,4(sp)
 1011990:	df000017 	ldw	fp,0(sp)
 1011994:	dec00204 	addi	sp,sp,8
 1011998:	f800283a 	ret

0101199c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 101199c:	deffe704 	addi	sp,sp,-100
 10119a0:	dfc01815 	stw	ra,96(sp)
 10119a4:	df001715 	stw	fp,92(sp)
 10119a8:	dcc01615 	stw	r19,88(sp)
 10119ac:	dc801515 	stw	r18,84(sp)
 10119b0:	dc401415 	stw	r17,80(sp)
 10119b4:	dc001315 	stw	r16,76(sp)
 10119b8:	df001704 	addi	fp,sp,92
 10119bc:	e13ff815 	stw	r4,-32(fp)
 10119c0:	e17ff915 	stw	r5,-28(fp)
 10119c4:	e1bffa15 	stw	r6,-24(fp)
 10119c8:	e1fffb15 	stw	r7,-20(fp)
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback *callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 10119cc:	e0bff817 	ldw	r2,-32(fp)
 10119d0:	e0bfee15 	stw	r2,-72(fp)
	memset(rdev, 0, sizeof(*rdev));
 10119d4:	01801a04 	movi	r6,104
 10119d8:	000b883a 	mov	r5,zero
 10119dc:	e13fee17 	ldw	r4,-72(fp)
 10119e0:	1013b300 	call	1013b30 <memset>
	metal_mutex_init(&rdev->lock);
 10119e4:	e0bfee17 	ldw	r2,-72(fp)
 10119e8:	10801604 	addi	r2,r2,88
 10119ec:	1009883a 	mov	r4,r2
 10119f0:	1010b580 	call	1010b58 <metal_mutex_init>
	rvdev->vdev = vdev;
 10119f4:	e0bff817 	ldw	r2,-32(fp)
 10119f8:	e0fff917 	ldw	r3,-28(fp)
 10119fc:	10c01a15 	stw	r3,104(r2)
	rdev->ns_bind_cb = ns_bind_cb;
 1011a00:	e0bfee17 	ldw	r2,-72(fp)
 1011a04:	e0fffa17 	ldw	r3,-24(fp)
 1011a08:	10c01715 	stw	r3,92(r2)
	vdev->priv = rvdev;
 1011a0c:	e0bff917 	ldw	r2,-28(fp)
 1011a10:	e0fff817 	ldw	r3,-32(fp)
 1011a14:	10c00815 	stw	r3,32(r2)
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 1011a18:	e0ffee17 	ldw	r3,-72(fp)
 1011a1c:	00804074 	movhi	r2,257
 1011a20:	1084b604 	addi	r2,r2,4824
 1011a24:	18801815 	stw	r2,96(r3)
	role = rpmsg_virtio_get_role(rvdev);
 1011a28:	e13ff817 	ldw	r4,-32(fp)
 1011a2c:	1010cbc0 	call	1010cbc <rpmsg_virtio_get_role>
 1011a30:	e0bfef15 	stw	r2,-68(fp)

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 1011a34:	e0bfef17 	ldw	r2,-68(fp)
 1011a38:	10800058 	cmpnei	r2,r2,1
 1011a3c:	1000021e 	bne	r2,zero,1011a48 <rpmsg_init_vdev+0xac>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 1011a40:	e13ff817 	ldw	r4,-32(fp)
 1011a44:	10111fc0 	call	10111fc <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
 1011a48:	e13ff817 	ldw	r4,-32(fp)
 1011a4c:	1010d8c0 	call	1010d8c <rpmsg_virtio_get_features>
 1011a50:	1025883a 	mov	r18,r2
 1011a54:	0027883a 	mov	r19,zero
 1011a58:	e0bff917 	ldw	r2,-28(fp)
 1011a5c:	14800315 	stw	r18,12(r2)
 1011a60:	14c00415 	stw	r19,16(r2)
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 1011a64:	e13ff917 	ldw	r4,-28(fp)
 1011a68:	20800317 	ldw	r2,12(r4)
 1011a6c:	20c00417 	ldw	r3,16(r4)
 1011a70:	1400004c 	andi	r16,r2,1
 1011a74:	1822703a 	and	r17,r3,zero
 1011a78:	8444b03a 	or	r2,r16,r17
 1011a7c:	1004c03a 	cmpne	r2,r2,zero
 1011a80:	1007883a 	mov	r3,r2
 1011a84:	e0bfee17 	ldw	r2,-72(fp)
 1011a88:	10c01905 	stb	r3,100(r2)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011a8c:	e0bfef17 	ldw	r2,-68(fp)
 1011a90:	1000231e 	bne	r2,zero,1011b20 <rpmsg_init_vdev+0x184>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 1011a94:	e0800217 	ldw	r2,8(fp)
 1011a98:	1000021e 	bne	r2,zero,1011aa4 <rpmsg_init_vdev+0x108>
			return RPMSG_ERR_PARAM;
 1011a9c:	00be0b44 	movi	r2,-2003
 1011aa0:	0000ad06 	br	1011d58 <rpmsg_init_vdev+0x3bc>
		if (!shpool->size)
 1011aa4:	e0800217 	ldw	r2,8(fp)
 1011aa8:	10800217 	ldw	r2,8(r2)
 1011aac:	1000021e 	bne	r2,zero,1011ab8 <rpmsg_init_vdev+0x11c>
			return RPMSG_ERR_NO_BUFF;
 1011ab0:	00be0b84 	movi	r2,-2002
 1011ab4:	0000a806 	br	1011d58 <rpmsg_init_vdev+0x3bc>
		rvdev->shpool = shpool;
 1011ab8:	e0bff817 	ldw	r2,-32(fp)
 1011abc:	e0c00217 	ldw	r3,8(fp)
 1011ac0:	10c01e15 	stw	r3,120(r2)

		vq_names[0] = "rx_vq";
 1011ac4:	008040b4 	movhi	r2,258
 1011ac8:	10978004 	addi	r2,r2,24064
 1011acc:	e0bff215 	stw	r2,-56(fp)
		vq_names[1] = "tx_vq";
 1011ad0:	008040b4 	movhi	r2,258
 1011ad4:	10978204 	addi	r2,r2,24072
 1011ad8:	e0bff315 	stw	r2,-52(fp)
		callback[0] = rpmsg_virtio_rx_callback;
 1011adc:	00804074 	movhi	r2,257
 1011ae0:	10854604 	addi	r2,r2,5400
 1011ae4:	e0bff415 	stw	r2,-48(fp)
		callback[1] = rpmsg_virtio_tx_callback;
 1011ae8:	00804074 	movhi	r2,257
 1011aec:	10853d04 	addi	r2,r2,5364
 1011af0:	e0bff515 	stw	r2,-44(fp)
		rvdev->rvq  = vdev->vrings_info[0].vq;
 1011af4:	e0bff917 	ldw	r2,-28(fp)
 1011af8:	10800a17 	ldw	r2,40(r2)
 1011afc:	10c00017 	ldw	r3,0(r2)
 1011b00:	e0bff817 	ldw	r2,-32(fp)
 1011b04:	10c01b15 	stw	r3,108(r2)
		rvdev->svq  = vdev->vrings_info[1].vq;
 1011b08:	e0bff917 	ldw	r2,-28(fp)
 1011b0c:	10800a17 	ldw	r2,40(r2)
 1011b10:	10800604 	addi	r2,r2,24
 1011b14:	10c00017 	ldw	r3,0(r2)
 1011b18:	e0bff817 	ldw	r2,-32(fp)
 1011b1c:	10c01c15 	stw	r3,112(r2)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 1011b20:	e0bfef17 	ldw	r2,-68(fp)
 1011b24:	10800058 	cmpnei	r2,r2,1
 1011b28:	1000171e 	bne	r2,zero,1011b88 <rpmsg_init_vdev+0x1ec>
		vq_names[0] = "tx_vq";
 1011b2c:	008040b4 	movhi	r2,258
 1011b30:	10978204 	addi	r2,r2,24072
 1011b34:	e0bff215 	stw	r2,-56(fp)
		vq_names[1] = "rx_vq";
 1011b38:	008040b4 	movhi	r2,258
 1011b3c:	10978004 	addi	r2,r2,24064
 1011b40:	e0bff315 	stw	r2,-52(fp)
		callback[0] = rpmsg_virtio_tx_callback;
 1011b44:	00804074 	movhi	r2,257
 1011b48:	10853d04 	addi	r2,r2,5364
 1011b4c:	e0bff415 	stw	r2,-48(fp)
		callback[1] = rpmsg_virtio_rx_callback;
 1011b50:	00804074 	movhi	r2,257
 1011b54:	10854604 	addi	r2,r2,5400
 1011b58:	e0bff515 	stw	r2,-44(fp)
		rvdev->rvq  = vdev->vrings_info[1].vq;
 1011b5c:	e0bff917 	ldw	r2,-28(fp)
 1011b60:	10800a17 	ldw	r2,40(r2)
 1011b64:	10800604 	addi	r2,r2,24
 1011b68:	10c00017 	ldw	r3,0(r2)
 1011b6c:	e0bff817 	ldw	r2,-32(fp)
 1011b70:	10c01b15 	stw	r3,108(r2)
		rvdev->svq  = vdev->vrings_info[0].vq;
 1011b74:	e0bff917 	ldw	r2,-28(fp)
 1011b78:	10800a17 	ldw	r2,40(r2)
 1011b7c:	10c00017 	ldw	r3,0(r2)
 1011b80:	e0bff817 	ldw	r2,-32(fp)
 1011b84:	10c01c15 	stw	r3,112(r2)
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 1011b88:	e0bff817 	ldw	r2,-32(fp)
 1011b8c:	e0fffb17 	ldw	r3,-20(fp)
 1011b90:	10c01d15 	stw	r3,116(r2)

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 1011b94:	e0fff204 	addi	r3,fp,-56
 1011b98:	e0bff404 	addi	r2,fp,-48
 1011b9c:	d8800015 	stw	r2,0(sp)
 1011ba0:	180f883a 	mov	r7,r3
 1011ba4:	01800084 	movi	r6,2
 1011ba8:	000b883a 	mov	r5,zero
 1011bac:	e13ff817 	ldw	r4,-32(fp)
 1011bb0:	1010dd40 	call	1010dd4 <rpmsg_virtio_create_virtqueues>
 1011bb4:	e0bfeb15 	stw	r2,-84(fp)
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 1011bb8:	e0bfeb17 	ldw	r2,-84(fp)
 1011bbc:	10000226 	beq	r2,zero,1011bc8 <rpmsg_init_vdev+0x22c>
		return status;
 1011bc0:	e0bfeb17 	ldw	r2,-84(fp)
 1011bc4:	00006406 	br	1011d58 <rpmsg_init_vdev+0x3bc>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
 1011bc8:	e0bff817 	ldw	r2,-32(fp)
 1011bcc:	10801c17 	ldw	r2,112(r2)
 1011bd0:	1009883a 	mov	r4,r2
 1011bd4:	1012cd80 	call	1012cd8 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 1011bd8:	e03fec15 	stw	zero,-80(fp)
 1011bdc:	00000d06 	br	1011c14 <rpmsg_init_vdev+0x278>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 1011be0:	e0bff917 	ldw	r2,-28(fp)
 1011be4:	10c00a17 	ldw	r3,40(r2)
 1011be8:	e0bfec17 	ldw	r2,-80(fp)
 1011bec:	10800624 	muli	r2,r2,24
 1011bf0:	1885883a 	add	r2,r3,r2
 1011bf4:	10800017 	ldw	r2,0(r2)
 1011bf8:	e0bff015 	stw	r2,-64(fp)
		vq->shm_io = shm_io;
 1011bfc:	e0bff017 	ldw	r2,-64(fp)
 1011c00:	e0fffb17 	ldw	r3,-20(fp)
 1011c04:	10c00a15 	stw	r3,40(r2)
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 1011c08:	e0bfec17 	ldw	r2,-80(fp)
 1011c0c:	10800044 	addi	r2,r2,1
 1011c10:	e0bfec15 	stw	r2,-80(fp)
 1011c14:	e0bfec17 	ldw	r2,-80(fp)
 1011c18:	108000b0 	cmpltui	r2,r2,2
 1011c1c:	103ff01e 	bne	r2,zero,1011be0 <__alt_data_end+0xff011be0>
		vq = vdev->vrings_info[i].vq;
		vq->shm_io = shm_io;
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011c20:	e0bfef17 	ldw	r2,-68(fp)
 1011c24:	10002e1e 	bne	r2,zero,1011ce0 <rpmsg_init_vdev+0x344>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 1011c28:	00808004 	movi	r2,512
 1011c2c:	e0bff715 	stw	r2,-36(fp)
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 1011c30:	e03fed15 	stw	zero,-76(fp)
 1011c34:	00002406 	br	1011cc8 <rpmsg_init_vdev+0x32c>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 1011c38:	01408004 	movi	r5,512
 1011c3c:	e1000217 	ldw	r4,8(fp)
 1011c40:	1010e700 	call	1010e70 <rpmsg_virtio_shm_pool_get_buffer>
 1011c44:	e0bff115 	stw	r2,-60(fp)
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 1011c48:	e0bff117 	ldw	r2,-60(fp)
 1011c4c:	1000021e 	bne	r2,zero,1011c58 <rpmsg_init_vdev+0x2bc>
				return RPMSG_ERR_NO_BUFF;
 1011c50:	00be0b84 	movi	r2,-2002
 1011c54:	00004006 	br	1011d58 <rpmsg_init_vdev+0x3bc>
			}

			vqbuf.buf = buffer;
 1011c58:	e0bff117 	ldw	r2,-60(fp)
 1011c5c:	e0bff615 	stw	r2,-40(fp)

			metal_io_block_set(shm_io,
 1011c60:	e17ff117 	ldw	r5,-60(fp)
 1011c64:	e13ffb17 	ldw	r4,-20(fp)
 1011c68:	1010a400 	call	1010a40 <metal_io_virt_to_offset>
 1011c6c:	01c08004 	movi	r7,512
 1011c70:	000d883a 	mov	r6,zero
 1011c74:	100b883a 	mov	r5,r2
 1011c78:	e13ffb17 	ldw	r4,-20(fp)
 1011c7c:	1007f380 	call	1007f38 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 1011c80:	e0bff817 	ldw	r2,-32(fp)
 1011c84:	10c01b17 	ldw	r3,108(r2)

			metal_io_block_set(shm_io,
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
 1011c88:	e13ff604 	addi	r4,fp,-40
 1011c8c:	e0bff117 	ldw	r2,-60(fp)
 1011c90:	d8800015 	stw	r2,0(sp)
 1011c94:	01c00044 	movi	r7,1
 1011c98:	000d883a 	mov	r6,zero
 1011c9c:	200b883a 	mov	r5,r4
 1011ca0:	1809883a 	mov	r4,r3
 1011ca4:	10127a00 	call	10127a0 <virtqueue_add_buffer>
 1011ca8:	e0bfeb15 	stw	r2,-84(fp)
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
						     buffer);

			if (status != RPMSG_SUCCESS) {
 1011cac:	e0bfeb17 	ldw	r2,-84(fp)
 1011cb0:	10000226 	beq	r2,zero,1011cbc <rpmsg_init_vdev+0x320>
				return status;
 1011cb4:	e0bfeb17 	ldw	r2,-84(fp)
 1011cb8:	00002706 	br	1011d58 <rpmsg_init_vdev+0x3bc>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 1011cbc:	e0bfed17 	ldw	r2,-76(fp)
 1011cc0:	10800044 	addi	r2,r2,1
 1011cc4:	e0bfed15 	stw	r2,-76(fp)
 1011cc8:	e0bff817 	ldw	r2,-32(fp)
 1011ccc:	10801b17 	ldw	r2,108(r2)
 1011cd0:	1080028b 	ldhu	r2,10(r2)
 1011cd4:	10bfffcc 	andi	r2,r2,65535
 1011cd8:	e0ffed17 	ldw	r3,-76(fp)
 1011cdc:	18bfd636 	bltu	r3,r2,1011c38 <__alt_data_end+0xff011c38>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 1011ce0:	e0bfee17 	ldw	r2,-72(fp)
 1011ce4:	1009883a 	mov	r4,r2
 1011ce8:	10109cc0 	call	10109cc <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
 1011cec:	e0bfee17 	ldw	r2,-72(fp)
 1011cf0:	10801903 	ldbu	r2,100(r2)
 1011cf4:	10803fcc 	andi	r2,r2,255
 1011cf8:	10001126 	beq	r2,zero,1011d40 <rpmsg_init_vdev+0x3a4>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 1011cfc:	e0bfee17 	ldw	r2,-72(fp)
 1011d00:	10c00204 	addi	r3,r2,8
 1011d04:	d8000115 	stw	zero,4(sp)
 1011d08:	00804074 	movhi	r2,257
 1011d0c:	1085d404 	addi	r2,r2,5968
 1011d10:	d8800015 	stw	r2,0(sp)
 1011d14:	01c00d44 	movi	r7,53
 1011d18:	01800d44 	movi	r6,53
 1011d1c:	014040b4 	movhi	r5,258
 1011d20:	29578404 	addi	r5,r5,24080
 1011d24:	1809883a 	mov	r4,r3
 1011d28:	1010c280 	call	1010c28 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 1011d2c:	e0bfee17 	ldw	r2,-72(fp)
 1011d30:	10800204 	addi	r2,r2,8
 1011d34:	100b883a 	mov	r5,r2
 1011d38:	e13fee17 	ldw	r4,-72(fp)
 1011d3c:	10106d40 	call	10106d4 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 1011d40:	e0bfef17 	ldw	r2,-68(fp)
 1011d44:	1000031e 	bne	r2,zero,1011d54 <rpmsg_init_vdev+0x3b8>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 1011d48:	01400104 	movi	r5,4
 1011d4c:	e13ff817 	ldw	r4,-32(fp)
 1011d50:	1010ce80 	call	1010ce8 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 1011d54:	e0bfeb17 	ldw	r2,-84(fp)
}
 1011d58:	e6fffc04 	addi	sp,fp,-16
 1011d5c:	dfc00517 	ldw	ra,20(sp)
 1011d60:	df000417 	ldw	fp,16(sp)
 1011d64:	dcc00317 	ldw	r19,12(sp)
 1011d68:	dc800217 	ldw	r18,8(sp)
 1011d6c:	dc400117 	ldw	r17,4(sp)
 1011d70:	dc000017 	ldw	r16,0(sp)
 1011d74:	dec00604 	addi	sp,sp,24
 1011d78:	f800283a 	ret

01011d7c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 1011d7c:	defffa04 	addi	sp,sp,-24
 1011d80:	dfc00515 	stw	ra,20(sp)
 1011d84:	df000415 	stw	fp,16(sp)
 1011d88:	df000404 	addi	fp,sp,16
 1011d8c:	e13fff15 	stw	r4,-4(fp)
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 1011d90:	e0bfff17 	ldw	r2,-4(fp)
 1011d94:	e0bffc15 	stw	r2,-16(fp)
	while (!metal_list_is_empty(&rdev->endpoints)) {
 1011d98:	00000806 	br	1011dbc <rpmsg_deinit_vdev+0x40>
		node = rdev->endpoints.next;
 1011d9c:	e0bffc17 	ldw	r2,-16(fp)
 1011da0:	10800017 	ldw	r2,0(r2)
 1011da4:	e0bffd15 	stw	r2,-12(fp)
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 1011da8:	e0bffd17 	ldw	r2,-12(fp)
 1011dac:	10bff304 	addi	r2,r2,-52
 1011db0:	e0bffe15 	stw	r2,-8(fp)
		rpmsg_destroy_ept(ept);
 1011db4:	e13ffe17 	ldw	r4,-8(fp)
 1011db8:	10108b00 	call	10108b0 <rpmsg_destroy_ept>
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
 1011dbc:	e0bffc17 	ldw	r2,-16(fp)
 1011dc0:	1009883a 	mov	r4,r2
 1011dc4:	1010a0c0 	call	1010a0c <metal_list_is_empty>
 1011dc8:	103ff426 	beq	r2,zero,1011d9c <__alt_data_end+0xff011d9c>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
 1011dcc:	e0bfff17 	ldw	r2,-4(fp)
 1011dd0:	10001b15 	stw	zero,108(r2)
	rvdev->svq = 0;
 1011dd4:	e0bfff17 	ldw	r2,-4(fp)
 1011dd8:	10001c15 	stw	zero,112(r2)

	metal_mutex_deinit(&rdev->lock);
 1011ddc:	e0bffc17 	ldw	r2,-16(fp)
 1011de0:	10801604 	addi	r2,r2,88
 1011de4:	1009883a 	mov	r4,r2
 1011de8:	1010b8c0 	call	1010b8c <metal_mutex_deinit>
}
 1011dec:	0001883a 	nop
 1011df0:	e037883a 	mov	sp,fp
 1011df4:	dfc00117 	ldw	ra,4(sp)
 1011df8:	df000017 	ldw	fp,0(sp)
 1011dfc:	dec00204 	addi	sp,sp,8
 1011e00:	f800283a 	ret

01011e04 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].event)

static inline int vring_size(unsigned int num, unsigned long align)
{
 1011e04:	defffc04 	addi	sp,sp,-16
 1011e08:	df000315 	stw	fp,12(sp)
 1011e0c:	df000304 	addi	fp,sp,12
 1011e10:	e13ffe15 	stw	r4,-8(fp)
 1011e14:	e17fff15 	stw	r5,-4(fp)
	int size;

	size = num * sizeof(struct vring_desc);
 1011e18:	e0bffe17 	ldw	r2,-8(fp)
 1011e1c:	1004913a 	slli	r2,r2,4
 1011e20:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 1011e24:	e0bffe17 	ldw	r2,-8(fp)
 1011e28:	108000c4 	addi	r2,r2,3
 1011e2c:	1085883a 	add	r2,r2,r2
 1011e30:	1007883a 	mov	r3,r2
 1011e34:	e0bffd17 	ldw	r2,-12(fp)
 1011e38:	1885883a 	add	r2,r3,r2
 1011e3c:	e0bffd15 	stw	r2,-12(fp)
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 1011e40:	e0fffd17 	ldw	r3,-12(fp)
 1011e44:	e0bfff17 	ldw	r2,-4(fp)
 1011e48:	1885883a 	add	r2,r3,r2
 1011e4c:	10ffffc4 	addi	r3,r2,-1
 1011e50:	e0bfff17 	ldw	r2,-4(fp)
 1011e54:	0085c83a 	sub	r2,zero,r2
 1011e58:	1884703a 	and	r2,r3,r2
 1011e5c:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 1011e60:	e0bffe17 	ldw	r2,-8(fp)
 1011e64:	100690fa 	slli	r3,r2,3

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
 1011e68:	e0bffd17 	ldw	r2,-12(fp)
 1011e6c:	1885883a 	add	r2,r3,r2
 1011e70:	10800184 	addi	r2,r2,6
 1011e74:	e0bffd15 	stw	r2,-12(fp)
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);

	return size;
 1011e78:	e0bffd17 	ldw	r2,-12(fp)
}
 1011e7c:	e037883a 	mov	sp,fp
 1011e80:	df000017 	ldw	fp,0(sp)
 1011e84:	dec00104 	addi	sp,sp,4
 1011e88:	f800283a 	ret

01011e8c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 1011e8c:	defffc04 	addi	sp,sp,-16
 1011e90:	df000315 	stw	fp,12(sp)
 1011e94:	df000304 	addi	fp,sp,12
 1011e98:	e13ffe15 	stw	r4,-8(fp)
 1011e9c:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 1011ea0:	e0bfff17 	ldw	r2,-4(fp)
 1011ea4:	e0fffe17 	ldw	r3,-8(fp)
 1011ea8:	18c00017 	ldw	r3,0(r3)
 1011eac:	10c5c83a 	sub	r2,r2,r3
 1011eb0:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1011eb4:	e0bffe17 	ldw	r2,-8(fp)
 1011eb8:	10800217 	ldw	r2,8(r2)
 1011ebc:	e0fffd17 	ldw	r3,-12(fp)
 1011ec0:	1880022e 	bgeu	r3,r2,1011ecc <metal_io_virt_to_offset+0x40>
 1011ec4:	e0bffd17 	ldw	r2,-12(fp)
 1011ec8:	00000106 	br	1011ed0 <metal_io_virt_to_offset+0x44>
 1011ecc:	00bfffc4 	movi	r2,-1
}
 1011ed0:	e037883a 	mov	sp,fp
 1011ed4:	df000017 	ldw	fp,0(sp)
 1011ed8:	dec00104 	addi	sp,sp,4
 1011edc:	f800283a 	ret

01011ee0 <virtio_dev_name>:

	{0, NULL}
};

const char *virtio_dev_name(unsigned short devid)
{
 1011ee0:	defffd04 	addi	sp,sp,-12
 1011ee4:	df000215 	stw	fp,8(sp)
 1011ee8:	df000204 	addi	fp,sp,8
 1011eec:	2005883a 	mov	r2,r4
 1011ef0:	e0bfff0d 	sth	r2,-4(fp)
	const struct virtio_ident *ident;

	for (ident = virtio_ident_table; ident->name != NULL; ident++) {
 1011ef4:	008040b4 	movhi	r2,258
 1011ef8:	10979804 	addi	r2,r2,24160
 1011efc:	e0bffe15 	stw	r2,-8(fp)
 1011f00:	00000b06 	br	1011f30 <virtio_dev_name+0x50>
		if (ident->devid == devid)
 1011f04:	e0bffe17 	ldw	r2,-8(fp)
 1011f08:	1080000b 	ldhu	r2,0(r2)
 1011f0c:	10ffffcc 	andi	r3,r2,65535
 1011f10:	e0bfff0b 	ldhu	r2,-4(fp)
 1011f14:	1880031e 	bne	r3,r2,1011f24 <virtio_dev_name+0x44>
			return ident->name;
 1011f18:	e0bffe17 	ldw	r2,-8(fp)
 1011f1c:	10800117 	ldw	r2,4(r2)
 1011f20:	00000706 	br	1011f40 <virtio_dev_name+0x60>

const char *virtio_dev_name(unsigned short devid)
{
	const struct virtio_ident *ident;

	for (ident = virtio_ident_table; ident->name != NULL; ident++) {
 1011f24:	e0bffe17 	ldw	r2,-8(fp)
 1011f28:	10800204 	addi	r2,r2,8
 1011f2c:	e0bffe15 	stw	r2,-8(fp)
 1011f30:	e0bffe17 	ldw	r2,-8(fp)
 1011f34:	10800117 	ldw	r2,4(r2)
 1011f38:	103ff21e 	bne	r2,zero,1011f04 <__alt_data_end+0xff011f04>
		if (ident->devid == devid)
			return ident->name;
	}

	return NULL;
 1011f3c:	0005883a 	mov	r2,zero
}
 1011f40:	e037883a 	mov	sp,fp
 1011f44:	df000017 	ldw	fp,0(sp)
 1011f48:	dec00104 	addi	sp,sp,4
 1011f4c:	f800283a 	ret

01011f50 <virtio_feature_name>:

static const char *virtio_feature_name(unsigned long val,
				       const struct virtio_feature_desc *desc)
{
 1011f50:	defff904 	addi	sp,sp,-28
 1011f54:	df000615 	stw	fp,24(sp)
 1011f58:	df000604 	addi	fp,sp,24
 1011f5c:	e13ffe15 	stw	r4,-8(fp)
 1011f60:	e17fff15 	stw	r5,-4(fp)
	int i, j;
	const struct virtio_feature_desc *descs[2] = { desc,
 1011f64:	e0bfff17 	ldw	r2,-4(fp)
 1011f68:	e0bffc15 	stw	r2,-16(fp)
 1011f6c:	008040b4 	movhi	r2,258
 1011f70:	1097b804 	addi	r2,r2,24288
 1011f74:	e0bffd15 	stw	r2,-12(fp)
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
 1011f78:	e03ffa15 	stw	zero,-24(fp)
 1011f7c:	00003706 	br	101205c <virtio_feature_name+0x10c>
		if (!descs[i])
 1011f80:	e0bffa17 	ldw	r2,-24(fp)
 1011f84:	1085883a 	add	r2,r2,r2
 1011f88:	1085883a 	add	r2,r2,r2
 1011f8c:	e0fffa04 	addi	r3,fp,-24
 1011f90:	1885883a 	add	r2,r3,r2
 1011f94:	10800204 	addi	r2,r2,8
 1011f98:	10800017 	ldw	r2,0(r2)
 1011f9c:	10002b26 	beq	r2,zero,101204c <virtio_feature_name+0xfc>
			continue;

		for (j = 0; descs[i][j].vfd_val != 0; j++) {
 1011fa0:	e03ffb15 	stw	zero,-20(fp)
 1011fa4:	00001c06 	br	1012018 <virtio_feature_name+0xc8>
			if (val == descs[i][j].vfd_val)
 1011fa8:	e0bffa17 	ldw	r2,-24(fp)
 1011fac:	1085883a 	add	r2,r2,r2
 1011fb0:	1085883a 	add	r2,r2,r2
 1011fb4:	e0fffa04 	addi	r3,fp,-24
 1011fb8:	1885883a 	add	r2,r3,r2
 1011fbc:	10800204 	addi	r2,r2,8
 1011fc0:	10c00017 	ldw	r3,0(r2)
 1011fc4:	e0bffb17 	ldw	r2,-20(fp)
 1011fc8:	100490fa 	slli	r2,r2,3
 1011fcc:	1885883a 	add	r2,r3,r2
 1011fd0:	10c00017 	ldw	r3,0(r2)
 1011fd4:	e0bffe17 	ldw	r2,-8(fp)
 1011fd8:	18800c1e 	bne	r3,r2,101200c <virtio_feature_name+0xbc>
				return descs[i][j].vfd_str;
 1011fdc:	e0bffa17 	ldw	r2,-24(fp)
 1011fe0:	1085883a 	add	r2,r2,r2
 1011fe4:	1085883a 	add	r2,r2,r2
 1011fe8:	e0fffa04 	addi	r3,fp,-24
 1011fec:	1885883a 	add	r2,r3,r2
 1011ff0:	10800204 	addi	r2,r2,8
 1011ff4:	10c00017 	ldw	r3,0(r2)
 1011ff8:	e0bffb17 	ldw	r2,-20(fp)
 1011ffc:	100490fa 	slli	r2,r2,3
 1012000:	1885883a 	add	r2,r3,r2
 1012004:	10800117 	ldw	r2,4(r2)
 1012008:	00001806 	br	101206c <virtio_feature_name+0x11c>

	for (i = 0; i < 2; i++) {
		if (!descs[i])
			continue;

		for (j = 0; descs[i][j].vfd_val != 0; j++) {
 101200c:	e0bffb17 	ldw	r2,-20(fp)
 1012010:	10800044 	addi	r2,r2,1
 1012014:	e0bffb15 	stw	r2,-20(fp)
 1012018:	e0bffa17 	ldw	r2,-24(fp)
 101201c:	1085883a 	add	r2,r2,r2
 1012020:	1085883a 	add	r2,r2,r2
 1012024:	e0fffa04 	addi	r3,fp,-24
 1012028:	1885883a 	add	r2,r3,r2
 101202c:	10800204 	addi	r2,r2,8
 1012030:	10c00017 	ldw	r3,0(r2)
 1012034:	e0bffb17 	ldw	r2,-20(fp)
 1012038:	100490fa 	slli	r2,r2,3
 101203c:	1885883a 	add	r2,r3,r2
 1012040:	10800017 	ldw	r2,0(r2)
 1012044:	103fd81e 	bne	r2,zero,1011fa8 <__alt_data_end+0xff011fa8>
 1012048:	00000106 	br	1012050 <virtio_feature_name+0x100>
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
		if (!descs[i])
			continue;
 101204c:	0001883a 	nop
	int i, j;
	const struct virtio_feature_desc *descs[2] = { desc,
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
 1012050:	e0bffa17 	ldw	r2,-24(fp)
 1012054:	10800044 	addi	r2,r2,1
 1012058:	e0bffa15 	stw	r2,-24(fp)
 101205c:	e0bffa17 	ldw	r2,-24(fp)
 1012060:	10800090 	cmplti	r2,r2,2
 1012064:	103fc61e 	bne	r2,zero,1011f80 <__alt_data_end+0xff011f80>
			if (val == descs[i][j].vfd_val)
				return descs[i][j].vfd_str;
		}
	}

	return NULL;
 1012068:	0005883a 	mov	r2,zero
}
 101206c:	e037883a 	mov	sp,fp
 1012070:	df000017 	ldw	fp,0(sp)
 1012074:	dec00104 	addi	sp,sp,4
 1012078:	f800283a 	ret

0101207c <virtio_describe>:

void virtio_describe(struct virtio_device *dev, const char *msg,
		     uint32_t features, struct virtio_feature_desc *desc)
{
 101207c:	defffa04 	addi	sp,sp,-24
 1012080:	dfc00515 	stw	ra,20(sp)
 1012084:	df000415 	stw	fp,16(sp)
 1012088:	df000404 	addi	fp,sp,16
 101208c:	e13ffc15 	stw	r4,-16(fp)
 1012090:	e17ffd15 	stw	r5,-12(fp)
 1012094:	e1bffe15 	stw	r6,-8(fp)
 1012098:	e1ffff15 	stw	r7,-4(fp)
	(void)dev;
	(void)msg;
	(void)features;

	// TODO: Not used currently - keeping it for future use
	virtio_feature_name(0, desc);
 101209c:	e17fff17 	ldw	r5,-4(fp)
 10120a0:	0009883a 	mov	r4,zero
 10120a4:	1011f500 	call	1011f50 <virtio_feature_name>
}
 10120a8:	0001883a 	nop
 10120ac:	e037883a 	mov	sp,fp
 10120b0:	dfc00117 	ldw	ra,4(sp)
 10120b4:	df000017 	ldw	fp,0(sp)
 10120b8:	dec00204 	addi	sp,sp,8
 10120bc:	f800283a 	ret

010120c0 <virtio_create_virtqueues>:

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 10120c0:	defff004 	addi	sp,sp,-64
 10120c4:	dfc00f15 	stw	ra,60(sp)
 10120c8:	df000e15 	stw	fp,56(sp)
 10120cc:	df000e04 	addi	fp,sp,56
 10120d0:	e13ffc15 	stw	r4,-16(fp)
 10120d4:	e17ffd15 	stw	r5,-12(fp)
 10120d8:	e1bffe15 	stw	r6,-8(fp)
 10120dc:	e1ffff15 	stw	r7,-4(fp)
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 10120e0:	e0bffc17 	ldw	r2,-16(fp)
 10120e4:	10800917 	ldw	r2,36(r2)
 10120e8:	e0bff615 	stw	r2,-40(fp)
	if (nvqs > num_vrings)
 10120ec:	e0bffe17 	ldw	r2,-8(fp)
 10120f0:	e0fff617 	ldw	r3,-40(fp)
 10120f4:	1880022e 	bgeu	r3,r2,1012100 <virtio_create_virtqueues+0x40>
		return ERROR_VQUEUE_INVLD_PARAM;
 10120f8:	00bd1004 	movi	r2,-3008
 10120fc:	00004b06 	br	101222c <virtio_create_virtqueues+0x16c>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 1012100:	e03ff515 	stw	zero,-44(fp)
 1012104:	00004506 	br	101221c <virtio_create_virtqueues+0x15c>
		vring_info = &vdev->vrings_info[i];
 1012108:	e0bffc17 	ldw	r2,-16(fp)
 101210c:	10c00a17 	ldw	r3,40(r2)
 1012110:	e0bff517 	ldw	r2,-44(fp)
 1012114:	10800624 	muli	r2,r2,24
 1012118:	1885883a 	add	r2,r3,r2
 101211c:	e0bff715 	stw	r2,-36(fp)

		vring_alloc = &vring_info->info;
 1012120:	e0bff717 	ldw	r2,-36(fp)
 1012124:	10800104 	addi	r2,r2,4
 1012128:	e0bff815 	stw	r2,-32(fp)
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 101212c:	e0bffc17 	ldw	r2,-16(fp)
 1012130:	10800517 	ldw	r2,20(r2)
 1012134:	1000161e 	bne	r2,zero,1012190 <virtio_create_virtqueues+0xd0>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 1012138:	e0bff717 	ldw	r2,-36(fp)
 101213c:	10800517 	ldw	r2,20(r2)
 1012140:	e0bff915 	stw	r2,-28(fp)

			offset = metal_io_virt_to_offset(io,
 1012144:	e0bff817 	ldw	r2,-32(fp)
 1012148:	10800017 	ldw	r2,0(r2)
 101214c:	100b883a 	mov	r5,r2
 1012150:	e13ff917 	ldw	r4,-28(fp)
 1012154:	1011e8c0 	call	1011e8c <metal_io_virt_to_offset>
 1012158:	e0bffa15 	stw	r2,-24(fp)
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 101215c:	e0bff817 	ldw	r2,-32(fp)
 1012160:	1080020b 	ldhu	r2,8(r2)
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
 1012164:	10ffffcc 	andi	r3,r2,65535
 1012168:	e0bff817 	ldw	r2,-32(fp)
 101216c:	10800117 	ldw	r2,4(r2)
 1012170:	100b883a 	mov	r5,r2
 1012174:	1809883a 	mov	r4,r3
 1012178:	1011e040 	call	1011e04 <vring_size>
 101217c:	100f883a 	mov	r7,r2
 1012180:	000d883a 	mov	r6,zero
 1012184:	e17ffa17 	ldw	r5,-24(fp)
 1012188:	e13ff917 	ldw	r4,-28(fp)
 101218c:	1007f380 	call	1007f38 <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 1012190:	e0bff517 	ldw	r2,-44(fp)
 1012194:	117fffcc 	andi	r5,r2,65535
 1012198:	e0bff517 	ldw	r2,-44(fp)
 101219c:	1085883a 	add	r2,r2,r2
 10121a0:	1085883a 	add	r2,r2,r2
 10121a4:	1007883a 	mov	r3,r2
 10121a8:	e0bfff17 	ldw	r2,-4(fp)
 10121ac:	10c5883a 	add	r2,r2,r3
 10121b0:	11800017 	ldw	r6,0(r2)
				       callbacks[i], vdev->func->notify,
 10121b4:	e0bff517 	ldw	r2,-44(fp)
 10121b8:	1085883a 	add	r2,r2,r2
 10121bc:	1085883a 	add	r2,r2,r2
 10121c0:	1007883a 	mov	r3,r2
 10121c4:	e0800217 	ldw	r2,8(fp)
 10121c8:	10c5883a 	add	r2,r2,r3
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 10121cc:	10800017 	ldw	r2,0(r2)
				       callbacks[i], vdev->func->notify,
 10121d0:	e0fffc17 	ldw	r3,-16(fp)
 10121d4:	18c00717 	ldw	r3,28(r3)
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 10121d8:	18c00817 	ldw	r3,32(r3)
 10121dc:	e13ff717 	ldw	r4,-36(fp)
 10121e0:	21000017 	ldw	r4,0(r4)
 10121e4:	d9000215 	stw	r4,8(sp)
 10121e8:	d8c00115 	stw	r3,4(sp)
 10121ec:	d8800015 	stw	r2,0(sp)
 10121f0:	e1fff817 	ldw	r7,-32(fp)
 10121f4:	e13ffc17 	ldw	r4,-16(fp)
 10121f8:	10126dc0 	call	10126dc <virtqueue_create>
 10121fc:	e0bffb15 	stw	r2,-20(fp)
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
 1012200:	e0bffb17 	ldw	r2,-20(fp)
 1012204:	10000226 	beq	r2,zero,1012210 <virtio_create_virtqueues+0x150>
			return ret;
 1012208:	e0bffb17 	ldw	r2,-20(fp)
 101220c:	00000706 	br	101222c <virtio_create_virtqueues+0x16c>

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 1012210:	e0bff517 	ldw	r2,-44(fp)
 1012214:	10800044 	addi	r2,r2,1
 1012218:	e0bff515 	stw	r2,-44(fp)
 101221c:	e0fff517 	ldw	r3,-44(fp)
 1012220:	e0bffe17 	ldw	r2,-8(fp)
 1012224:	18bfb836 	bltu	r3,r2,1012108 <__alt_data_end+0xff012108>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
 1012228:	0005883a 	mov	r2,zero
}
 101222c:	e037883a 	mov	sp,fp
 1012230:	dfc00117 	ldw	ra,4(sp)
 1012234:	df000017 	ldw	fp,0(sp)
 1012238:	dec00204 	addi	sp,sp,8
 101223c:	f800283a 	ret

01012240 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 1012240:	defffb04 	addi	sp,sp,-20
 1012244:	df000415 	stw	fp,16(sp)
 1012248:	df000404 	addi	fp,sp,16
 101224c:	e13ffc15 	stw	r4,-16(fp)
 1012250:	e17ffd15 	stw	r5,-12(fp)
 1012254:	e1bffe15 	stw	r6,-8(fp)
 1012258:	e1ffff15 	stw	r7,-4(fp)
	vr->num = num;
 101225c:	e0bffc17 	ldw	r2,-16(fp)
 1012260:	e0fffd17 	ldw	r3,-12(fp)
 1012264:	10c00015 	stw	r3,0(r2)
	vr->desc = (struct vring_desc *)p;
 1012268:	e0bffc17 	ldw	r2,-16(fp)
 101226c:	e0fffe17 	ldw	r3,-8(fp)
 1012270:	10c00115 	stw	r3,4(r2)
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 1012274:	e0bffd17 	ldw	r2,-12(fp)
 1012278:	1004913a 	slli	r2,r2,4
 101227c:	e0fffe17 	ldw	r3,-8(fp)
 1012280:	1887883a 	add	r3,r3,r2
 1012284:	e0bffc17 	ldw	r2,-16(fp)
 1012288:	10c00215 	stw	r3,8(r2)
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 101228c:	e0bffc17 	ldw	r2,-16(fp)
 1012290:	10c00217 	ldw	r3,8(r2)
 1012294:	e0bffd17 	ldw	r2,-12(fp)
 1012298:	10800084 	addi	r2,r2,2
 101229c:	1085883a 	add	r2,r2,r2
 10122a0:	1885883a 	add	r2,r3,r2
 10122a4:	1007883a 	mov	r3,r2
 10122a8:	e0bfff17 	ldw	r2,-4(fp)
 10122ac:	1885883a 	add	r2,r3,r2
	      align - 1) & ~(align - 1));
 10122b0:	10c00044 	addi	r3,r2,1
 10122b4:	e0bfff17 	ldw	r2,-4(fp)
 10122b8:	0085c83a 	sub	r2,zero,r2
 10122bc:	1884703a 	and	r2,r3,r2
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
 10122c0:	1007883a 	mov	r3,r2
 10122c4:	e0bffc17 	ldw	r2,-16(fp)
 10122c8:	10c00315 	stw	r3,12(r2)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
	      align - 1) & ~(align - 1));
}
 10122cc:	0001883a 	nop
 10122d0:	e037883a 	mov	sp,fp
 10122d4:	df000017 	ldw	fp,0(sp)
 10122d8:	dec00104 	addi	sp,sp,4
 10122dc:	f800283a 	ret

010122e0 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 10122e0:	defffc04 	addi	sp,sp,-16
 10122e4:	df000315 	stw	fp,12(sp)
 10122e8:	df000304 	addi	fp,sp,12
 10122ec:	2807883a 	mov	r3,r5
 10122f0:	3005883a 	mov	r2,r6
 10122f4:	e13ffd0d 	sth	r4,-12(fp)
 10122f8:	e0fffe0d 	sth	r3,-8(fp)
 10122fc:	e0bfff0d 	sth	r2,-4(fp)
	return (uint16_t)(new_idx - event_idx - 1) <
 1012300:	e0fffe0b 	ldhu	r3,-8(fp)
 1012304:	e0bffd0b 	ldhu	r2,-12(fp)
 1012308:	1885c83a 	sub	r2,r3,r2
 101230c:	10bfffc4 	addi	r2,r2,-1
 1012310:	1009883a 	mov	r4,r2
	    (uint16_t)(new_idx - old);
 1012314:	e0fffe0b 	ldhu	r3,-8(fp)
 1012318:	e0bfff0b 	ldhu	r2,-4(fp)
 101231c:	1885c83a 	sub	r2,r3,r2
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
 1012320:	20ffffcc 	andi	r3,r4,65535
 1012324:	10bfffcc 	andi	r2,r2,65535
 1012328:	1885803a 	cmpltu	r2,r3,r2
 101232c:	10803fcc 	andi	r2,r2,255
	    (uint16_t)(new_idx - old);
}
 1012330:	e037883a 	mov	sp,fp
 1012334:	df000017 	ldw	fp,0(sp)
 1012338:	dec00104 	addi	sp,sp,4
 101233c:	f800283a 	ret

01012340 <metal_free_memory>:
{
	return (pvPortMalloc(size));
}

static inline void metal_free_memory(void *ptr)
{
 1012340:	defffd04 	addi	sp,sp,-12
 1012344:	dfc00215 	stw	ra,8(sp)
 1012348:	df000115 	stw	fp,4(sp)
 101234c:	df000104 	addi	fp,sp,4
 1012350:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 1012354:	e13fff17 	ldw	r4,-4(fp)
 1012358:	10011840 	call	1001184 <vPortFree>
}
 101235c:	0001883a 	nop
 1012360:	e037883a 	mov	sp,fp
 1012364:	dfc00117 	ldw	ra,4(sp)
 1012368:	df000017 	ldw	fp,0(sp)
 101236c:	dec00204 	addi	sp,sp,8
 1012370:	f800283a 	ret

01012374 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1012374:	defffd04 	addi	sp,sp,-12
 1012378:	df000215 	stw	fp,8(sp)
 101237c:	df000204 	addi	fp,sp,8
 1012380:	e13ffe15 	stw	r4,-8(fp)
 1012384:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1012388:	e0bffe17 	ldw	r2,-8(fp)
 101238c:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1012390:	10bfffe0 	cmpeqi	r2,r2,-1
 1012394:	1000091e 	bne	r2,zero,10123bc <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1012398:	e0bffe17 	ldw	r2,-8(fp)
 101239c:	10800217 	ldw	r2,8(r2)
 10123a0:	e0ffff17 	ldw	r3,-4(fp)
 10123a4:	1880052e 	bgeu	r3,r2,10123bc <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 10123a8:	e0bffe17 	ldw	r2,-8(fp)
 10123ac:	10c00017 	ldw	r3,0(r2)
		: NULL);
 10123b0:	e0bfff17 	ldw	r2,-4(fp)
 10123b4:	1885883a 	add	r2,r3,r2
 10123b8:	00000106 	br	10123c0 <metal_io_virt+0x4c>
 10123bc:	0005883a 	mov	r2,zero
}
 10123c0:	e037883a 	mov	sp,fp
 10123c4:	df000017 	ldw	fp,0(sp)
 10123c8:	dec00104 	addi	sp,sp,4
 10123cc:	f800283a 	ret

010123d0 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 10123d0:	defffc04 	addi	sp,sp,-16
 10123d4:	df000315 	stw	fp,12(sp)
 10123d8:	df000304 	addi	fp,sp,12
 10123dc:	e13ffe15 	stw	r4,-8(fp)
 10123e0:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 10123e4:	e0bfff17 	ldw	r2,-4(fp)
 10123e8:	e0fffe17 	ldw	r3,-8(fp)
 10123ec:	18c00017 	ldw	r3,0(r3)
 10123f0:	10c5c83a 	sub	r2,r2,r3
 10123f4:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 10123f8:	e0bffe17 	ldw	r2,-8(fp)
 10123fc:	10800217 	ldw	r2,8(r2)
 1012400:	e0fffd17 	ldw	r3,-12(fp)
 1012404:	1880022e 	bgeu	r3,r2,1012410 <metal_io_virt_to_offset+0x40>
 1012408:	e0bffd17 	ldw	r2,-12(fp)
 101240c:	00000106 	br	1012414 <metal_io_virt_to_offset+0x44>
 1012410:	00bfffc4 	movi	r2,-1
}
 1012414:	e037883a 	mov	sp,fp
 1012418:	df000017 	ldw	fp,0(sp)
 101241c:	dec00104 	addi	sp,sp,4
 1012420:	f800283a 	ret

01012424 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 1012424:	defffb04 	addi	sp,sp,-20
 1012428:	dfc00415 	stw	ra,16(sp)
 101242c:	df000315 	stw	fp,12(sp)
 1012430:	df000304 	addi	fp,sp,12
 1012434:	e13ffe15 	stw	r4,-8(fp)
 1012438:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 101243c:	e0bffe17 	ldw	r2,-8(fp)
 1012440:	10800c17 	ldw	r2,48(r2)
 1012444:	1000211e 	bne	r2,zero,10124cc <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 1012448:	e0bffe17 	ldw	r2,-8(fp)
 101244c:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 1012450:	10800828 	cmpgeui	r2,r2,32
 1012454:	1000051e 	bne	r2,zero,101246c <metal_io_phys+0x48>
 1012458:	e0bffe17 	ldw	r2,-8(fp)
 101245c:	10800317 	ldw	r2,12(r2)
 1012460:	e0ffff17 	ldw	r3,-4(fp)
 1012464:	1884d83a 	srl	r2,r3,r2
 1012468:	00000106 	br	1012470 <metal_io_phys+0x4c>
 101246c:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 1012470:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012474:	e0bffe17 	ldw	r2,-8(fp)
 1012478:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 101247c:	10001126 	beq	r2,zero,10124c4 <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012480:	e0bffe17 	ldw	r2,-8(fp)
 1012484:	10800217 	ldw	r2,8(r2)
 1012488:	e0ffff17 	ldw	r3,-4(fp)
 101248c:	18800d2e 	bgeu	r3,r2,10124c4 <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 1012490:	e0bffe17 	ldw	r2,-8(fp)
 1012494:	10c00117 	ldw	r3,4(r2)
 1012498:	e0bffd17 	ldw	r2,-12(fp)
 101249c:	1085883a 	add	r2,r2,r2
 10124a0:	1085883a 	add	r2,r2,r2
 10124a4:	1885883a 	add	r2,r3,r2
 10124a8:	10c00017 	ldw	r3,0(r2)
 10124ac:	e0bffe17 	ldw	r2,-8(fp)
 10124b0:	11000417 	ldw	r4,16(r2)
 10124b4:	e0bfff17 	ldw	r2,-4(fp)
 10124b8:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 10124bc:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 10124c0:	00000706 	br	10124e0 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 10124c4:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 10124c8:	00000506 	br	10124e0 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 10124cc:	e0bffe17 	ldw	r2,-8(fp)
 10124d0:	10800c17 	ldw	r2,48(r2)
 10124d4:	e17fff17 	ldw	r5,-4(fp)
 10124d8:	e13ffe17 	ldw	r4,-8(fp)
 10124dc:	103ee83a 	callr	r2
}
 10124e0:	e037883a 	mov	sp,fp
 10124e4:	dfc00117 	ldw	ra,4(sp)
 10124e8:	df000017 	ldw	fp,0(sp)
 10124ec:	dec00204 	addi	sp,sp,8
 10124f0:	f800283a 	ret

010124f4 <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 10124f4:	defffb04 	addi	sp,sp,-20
 10124f8:	dfc00415 	stw	ra,16(sp)
 10124fc:	df000315 	stw	fp,12(sp)
 1012500:	df000304 	addi	fp,sp,12
 1012504:	e13ffe15 	stw	r4,-8(fp)
 1012508:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 101250c:	e0bffe17 	ldw	r2,-8(fp)
 1012510:	10800d17 	ldw	r2,52(r2)
 1012514:	1000231e 	bne	r2,zero,10125a4 <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 1012518:	e0bffe17 	ldw	r2,-8(fp)
 101251c:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 1012520:	10bfffd8 	cmpnei	r2,r2,-1
 1012524:	1000061e 	bne	r2,zero,1012540 <metal_io_phys_to_offset+0x4c>
 1012528:	e0bffe17 	ldw	r2,-8(fp)
 101252c:	10800117 	ldw	r2,4(r2)
 1012530:	10800017 	ldw	r2,0(r2)
 1012534:	e0ffff17 	ldw	r3,-4(fp)
 1012538:	1885c83a 	sub	r2,r3,r2
 101253c:	00000406 	br	1012550 <metal_io_phys_to_offset+0x5c>
 1012540:	e0bffe17 	ldw	r2,-8(fp)
 1012544:	10c00417 	ldw	r3,16(r2)
 1012548:	e0bfff17 	ldw	r2,-4(fp)
 101254c:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 1012550:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 1012554:	e17ffd17 	ldw	r5,-12(fp)
 1012558:	e13ffe17 	ldw	r4,-8(fp)
 101255c:	10124240 	call	1012424 <metal_io_phys>
 1012560:	1007883a 	mov	r3,r2
 1012564:	e0bfff17 	ldw	r2,-4(fp)
 1012568:	1880021e 	bne	r3,r2,1012574 <metal_io_phys_to_offset+0x80>
				return offset;
 101256c:	e0bffd17 	ldw	r2,-12(fp)
 1012570:	00001106 	br	10125b8 <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 1012574:	e0bffe17 	ldw	r2,-8(fp)
 1012578:	10c00417 	ldw	r3,16(r2)
 101257c:	e0bffd17 	ldw	r2,-12(fp)
 1012580:	1885883a 	add	r2,r3,r2
 1012584:	10800044 	addi	r2,r2,1
 1012588:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 101258c:	e0bffe17 	ldw	r2,-8(fp)
 1012590:	10800217 	ldw	r2,8(r2)
 1012594:	e0fffd17 	ldw	r3,-12(fp)
 1012598:	18bfee36 	bltu	r3,r2,1012554 <__alt_data_end+0xff012554>
		return METAL_BAD_OFFSET;
 101259c:	00bfffc4 	movi	r2,-1
 10125a0:	00000506 	br	10125b8 <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 10125a4:	e0bffe17 	ldw	r2,-8(fp)
 10125a8:	10800d17 	ldw	r2,52(r2)
 10125ac:	e17fff17 	ldw	r5,-4(fp)
 10125b0:	e13ffe17 	ldw	r4,-8(fp)
 10125b4:	103ee83a 	callr	r2
}
 10125b8:	e037883a 	mov	sp,fp
 10125bc:	dfc00117 	ldw	ra,4(sp)
 10125c0:	df000017 	ldw	fp,0(sp)
 10125c4:	dec00204 	addi	sp,sp,8
 10125c8:	f800283a 	ret

010125cc <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 10125cc:	defffc04 	addi	sp,sp,-16
 10125d0:	dfc00315 	stw	ra,12(sp)
 10125d4:	df000215 	stw	fp,8(sp)
 10125d8:	df000204 	addi	fp,sp,8
 10125dc:	e13ffe15 	stw	r4,-8(fp)
 10125e0:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 10125e4:	e17fff17 	ldw	r5,-4(fp)
 10125e8:	e13ffe17 	ldw	r4,-8(fp)
 10125ec:	10124f40 	call	10124f4 <metal_io_phys_to_offset>
 10125f0:	100b883a 	mov	r5,r2
 10125f4:	e13ffe17 	ldw	r4,-8(fp)
 10125f8:	10123740 	call	1012374 <metal_io_virt>
}
 10125fc:	e037883a 	mov	sp,fp
 1012600:	dfc00117 	ldw	ra,4(sp)
 1012604:	df000017 	ldw	fp,0(sp)
 1012608:	dec00204 	addi	sp,sp,8
 101260c:	f800283a 	ret

01012610 <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
 1012610:	defffc04 	addi	sp,sp,-16
 1012614:	dfc00315 	stw	ra,12(sp)
 1012618:	df000215 	stw	fp,8(sp)
 101261c:	df000204 	addi	fp,sp,8
 1012620:	e13ffe15 	stw	r4,-8(fp)
 1012624:	e17fff15 	stw	r5,-4(fp)
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 1012628:	e17fff17 	ldw	r5,-4(fp)
 101262c:	e13ffe17 	ldw	r4,-8(fp)
 1012630:	10123d00 	call	10123d0 <metal_io_virt_to_offset>
 1012634:	100b883a 	mov	r5,r2
 1012638:	e13ffe17 	ldw	r4,-8(fp)
 101263c:	10124240 	call	1012424 <metal_io_phys>
}
 1012640:	e037883a 	mov	sp,fp
 1012644:	dfc00117 	ldw	ra,4(sp)
 1012648:	df000017 	ldw	fp,0(sp)
 101264c:	dec00204 	addi	sp,sp,8
 1012650:	f800283a 	ret

01012654 <virtqueue_phys_to_virt>:
static int virtqueue_navail(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 1012654:	defffb04 	addi	sp,sp,-20
 1012658:	dfc00415 	stw	ra,16(sp)
 101265c:	df000315 	stw	fp,12(sp)
 1012660:	df000304 	addi	fp,sp,12
 1012664:	e13ffe15 	stw	r4,-8(fp)
 1012668:	e17fff15 	stw	r5,-4(fp)
	struct metal_io_region *io = vq->shm_io;
 101266c:	e0bffe17 	ldw	r2,-8(fp)
 1012670:	10800a17 	ldw	r2,40(r2)
 1012674:	e0bffd15 	stw	r2,-12(fp)

	return metal_io_phys_to_virt(io, phys);
 1012678:	e17fff17 	ldw	r5,-4(fp)
 101267c:	e13ffd17 	ldw	r4,-12(fp)
 1012680:	10125cc0 	call	10125cc <metal_io_phys_to_virt>
}
 1012684:	e037883a 	mov	sp,fp
 1012688:	dfc00117 	ldw	ra,4(sp)
 101268c:	df000017 	ldw	fp,0(sp)
 1012690:	dec00204 	addi	sp,sp,8
 1012694:	f800283a 	ret

01012698 <virtqueue_virt_to_phys>:

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 1012698:	defffb04 	addi	sp,sp,-20
 101269c:	dfc00415 	stw	ra,16(sp)
 10126a0:	df000315 	stw	fp,12(sp)
 10126a4:	df000304 	addi	fp,sp,12
 10126a8:	e13ffe15 	stw	r4,-8(fp)
 10126ac:	e17fff15 	stw	r5,-4(fp)
	struct metal_io_region *io = vq->shm_io;
 10126b0:	e0bffe17 	ldw	r2,-8(fp)
 10126b4:	10800a17 	ldw	r2,40(r2)
 10126b8:	e0bffd15 	stw	r2,-12(fp)

	return metal_io_virt_to_phys(io, buf);
 10126bc:	e17fff17 	ldw	r5,-4(fp)
 10126c0:	e13ffd17 	ldw	r4,-12(fp)
 10126c4:	10126100 	call	1012610 <metal_io_virt_to_phys>
}
 10126c8:	e037883a 	mov	sp,fp
 10126cc:	dfc00117 	ldw	ra,4(sp)
 10126d0:	df000017 	ldw	fp,0(sp)
 10126d4:	dec00204 	addi	sp,sp,8
 10126d8:	f800283a 	ret

010126dc <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 10126dc:	defff904 	addi	sp,sp,-28
 10126e0:	dfc00615 	stw	ra,24(sp)
 10126e4:	df000515 	stw	fp,20(sp)
 10126e8:	df000504 	addi	fp,sp,20
 10126ec:	e13ffc15 	stw	r4,-16(fp)
 10126f0:	2805883a 	mov	r2,r5
 10126f4:	e1bffe15 	stw	r6,-8(fp)
 10126f8:	e1ffff15 	stw	r7,-4(fp)
 10126fc:	e0bffd0d 	sth	r2,-12(fp)
	int status = VQUEUE_SUCCESS;
 1012700:	e03ffb15 	stw	zero,-20(fp)
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 1012704:	e0bffb17 	ldw	r2,-20(fp)
 1012708:	10001f1e 	bne	r2,zero,1012788 <virtqueue_create+0xac>
		vq->vq_dev = virt_dev;
 101270c:	e0800417 	ldw	r2,16(fp)
 1012710:	e0fffc17 	ldw	r3,-16(fp)
 1012714:	10c00015 	stw	r3,0(r2)
		vq->vq_name = name;
 1012718:	e0800417 	ldw	r2,16(fp)
 101271c:	e0fffe17 	ldw	r3,-8(fp)
 1012720:	10c00115 	stw	r3,4(r2)
		vq->vq_queue_index = id;
 1012724:	e0800417 	ldw	r2,16(fp)
 1012728:	e0fffd0b 	ldhu	r3,-12(fp)
 101272c:	10c0020d 	sth	r3,8(r2)
		vq->vq_nentries = ring->num_descs;
 1012730:	e0bfff17 	ldw	r2,-4(fp)
 1012734:	10c0020b 	ldhu	r3,8(r2)
 1012738:	e0800417 	ldw	r2,16(fp)
 101273c:	10c0028d 	sth	r3,10(r2)
		vq->vq_free_cnt = vq->vq_nentries;
 1012740:	e0800417 	ldw	r2,16(fp)
 1012744:	10c0028b 	ldhu	r3,10(r2)
 1012748:	e0800417 	ldw	r2,16(fp)
 101274c:	10c0090d 	sth	r3,36(r2)
		vq->callback = callback;
 1012750:	e0800417 	ldw	r2,16(fp)
 1012754:	e0c00217 	ldw	r3,8(fp)
 1012758:	10c00315 	stw	r3,12(r2)
		vq->notify = notify;
 101275c:	e0800417 	ldw	r2,16(fp)
 1012760:	e0c00317 	ldw	r3,12(fp)
 1012764:	10c00415 	stw	r3,16(r2)

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
 1012768:	e0bfff17 	ldw	r2,-4(fp)
 101276c:	10c00017 	ldw	r3,0(r2)
 1012770:	e0bfff17 	ldw	r2,-4(fp)
 1012774:	10800117 	ldw	r2,4(r2)
 1012778:	100d883a 	mov	r6,r2
 101277c:	180b883a 	mov	r5,r3
 1012780:	e1000417 	ldw	r4,16(fp)
 1012784:	10132980 	call	1013298 <vq_ring_init>
	}

	return status;
 1012788:	e0bffb17 	ldw	r2,-20(fp)
}
 101278c:	e037883a 	mov	sp,fp
 1012790:	dfc00117 	ldw	ra,4(sp)
 1012794:	df000017 	ldw	fp,0(sp)
 1012798:	dec00204 	addi	sp,sp,8
 101279c:	f800283a 	ret

010127a0 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 10127a0:	defff404 	addi	sp,sp,-48
 10127a4:	dfc00b15 	stw	ra,44(sp)
 10127a8:	df000a15 	stw	fp,40(sp)
 10127ac:	df000a04 	addi	fp,sp,40
 10127b0:	e13ffc15 	stw	r4,-16(fp)
 10127b4:	e17ffd15 	stw	r5,-12(fp)
 10127b8:	e1bffe15 	stw	r6,-8(fp)
 10127bc:	e1ffff15 	stw	r7,-4(fp)
	struct vq_desc_extra *dxp = NULL;
 10127c0:	e03ff815 	stw	zero,-32(fp)
	int status = VQUEUE_SUCCESS;
 10127c4:	e03ff915 	stw	zero,-28(fp)
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 10127c8:	e0fffe17 	ldw	r3,-8(fp)
 10127cc:	e0bfff17 	ldw	r2,-4(fp)
 10127d0:	1885883a 	add	r2,r3,r2
 10127d4:	e0bffa15 	stw	r2,-24(fp)
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 10127d8:	e0bff917 	ldw	r2,-28(fp)
 10127dc:	10002b1e 	bne	r2,zero,101288c <virtqueue_add_buffer+0xec>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 10127e0:	e0bffc17 	ldw	r2,-16(fp)
 10127e4:	10800b0b 	ldhu	r2,44(r2)
 10127e8:	e0bffb0d 	sth	r2,-20(fp)
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 10127ec:	e0bffb0b 	ldhu	r2,-20(fp)
 10127f0:	100490fa 	slli	r2,r2,3
 10127f4:	10800d04 	addi	r2,r2,52
 10127f8:	e0fffc17 	ldw	r3,-16(fp)
 10127fc:	1885883a 	add	r2,r3,r2
 1012800:	e0bff815 	stw	r2,-32(fp)

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 1012804:	e0bff817 	ldw	r2,-32(fp)
 1012808:	e0c00217 	ldw	r3,8(fp)
 101280c:	10c00015 	stw	r3,0(r2)
		dxp->ndescs = needed;
 1012810:	e0bffa17 	ldw	r2,-24(fp)
 1012814:	1007883a 	mov	r3,r2
 1012818:	e0bff817 	ldw	r2,-32(fp)
 101281c:	10c0010d 	sth	r3,4(r2)

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 1012820:	e0bffc17 	ldw	r2,-16(fp)
 1012824:	10c00617 	ldw	r3,24(r2)
 1012828:	e13ffb0b 	ldhu	r4,-20(fp)
 101282c:	e0bfff17 	ldw	r2,-4(fp)
 1012830:	d8800115 	stw	r2,4(sp)
 1012834:	e0bffe17 	ldw	r2,-8(fp)
 1012838:	d8800015 	stw	r2,0(sp)
 101283c:	e1fffd17 	ldw	r7,-12(fp)
 1012840:	200d883a 	mov	r6,r4
 1012844:	180b883a 	mov	r5,r3
 1012848:	e13ffc17 	ldw	r4,-16(fp)
 101284c:	10130380 	call	1013038 <vq_ring_add_buffer>
 1012850:	e0bffb8d 	sth	r2,-18(fp)
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 1012854:	e0bffc17 	ldw	r2,-16(fp)
 1012858:	e0fffb8b 	ldhu	r3,-18(fp)
 101285c:	10c00b0d 	sth	r3,44(r2)
		vq->vq_free_cnt -= needed;
 1012860:	e0bffc17 	ldw	r2,-16(fp)
 1012864:	1080090b 	ldhu	r2,36(r2)
 1012868:	e0fffa17 	ldw	r3,-24(fp)
 101286c:	10c5c83a 	sub	r2,r2,r3
 1012870:	1007883a 	mov	r3,r2
 1012874:	e0bffc17 	ldw	r2,-16(fp)
 1012878:	10c0090d 	sth	r3,36(r2)

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 101287c:	e0bffb0b 	ldhu	r2,-20(fp)
 1012880:	100b883a 	mov	r5,r2
 1012884:	e13ffc17 	ldw	r4,-16(fp)
 1012888:	10133740 	call	1013374 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 101288c:	e0bff917 	ldw	r2,-28(fp)
}
 1012890:	e037883a 	mov	sp,fp
 1012894:	dfc00117 	ldw	ra,4(sp)
 1012898:	df000017 	ldw	fp,0(sp)
 101289c:	dec00204 	addi	sp,sp,8
 10128a0:	f800283a 	ret

010128a4 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 10128a4:	defff704 	addi	sp,sp,-36
 10128a8:	dfc00815 	stw	ra,32(sp)
 10128ac:	df000715 	stw	fp,28(sp)
 10128b0:	df000704 	addi	fp,sp,28
 10128b4:	e13ffd15 	stw	r4,-12(fp)
 10128b8:	e17ffe15 	stw	r5,-8(fp)
 10128bc:	e1bfff15 	stw	r6,-4(fp)
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 10128c0:	e0bffd17 	ldw	r2,-12(fp)
 10128c4:	10000826 	beq	r2,zero,10128e8 <virtqueue_get_buffer+0x44>
 10128c8:	e0bffd17 	ldw	r2,-12(fp)
 10128cc:	10c00b8b 	ldhu	r3,46(r2)
 10128d0:	e0bffd17 	ldw	r2,-12(fp)
 10128d4:	10800817 	ldw	r2,32(r2)
 10128d8:	1080008b 	ldhu	r2,2(r2)
 10128dc:	18ffffcc 	andi	r3,r3,65535
 10128e0:	10bfffcc 	andi	r2,r2,65535
 10128e4:	1880021e 	bne	r3,r2,10128f0 <virtqueue_get_buffer+0x4c>
		return NULL;
 10128e8:	0005883a 	mov	r2,zero
 10128ec:	00003406 	br	10129c0 <virtqueue_get_buffer+0x11c>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 10128f0:	e0bffd17 	ldw	r2,-12(fp)
 10128f4:	10800b8b 	ldhu	r2,46(r2)
 10128f8:	10c00044 	addi	r3,r2,1
 10128fc:	1809883a 	mov	r4,r3
 1012900:	e0fffd17 	ldw	r3,-12(fp)
 1012904:	19000b8d 	sth	r4,46(r3)
 1012908:	1007883a 	mov	r3,r2
 101290c:	e0bffd17 	ldw	r2,-12(fp)
 1012910:	1080028b 	ldhu	r2,10(r2)
 1012914:	10bfffc4 	addi	r2,r2,-1
 1012918:	1884703a 	and	r2,r3,r2
 101291c:	e0bff90d 	sth	r2,-28(fp)
	uep = &vq->vq_ring.used->ring[used_idx];
 1012920:	e0bffd17 	ldw	r2,-12(fp)
 1012924:	10c00817 	ldw	r3,32(r2)
 1012928:	e0bff90b 	ldhu	r2,-28(fp)
 101292c:	100490fa 	slli	r2,r2,3
 1012930:	10800104 	addi	r2,r2,4
 1012934:	1885883a 	add	r2,r3,r2
 1012938:	e0bffa15 	stw	r2,-24(fp)

	atomic_thread_fence(memory_order_seq_cst);
 101293c:	0001b03a 	sync

	desc_idx = (uint16_t)uep->id;
 1012940:	e0bffa17 	ldw	r2,-24(fp)
 1012944:	10800017 	ldw	r2,0(r2)
 1012948:	e0bffb0d 	sth	r2,-20(fp)
	if (len)
 101294c:	e0bffe17 	ldw	r2,-8(fp)
 1012950:	10000426 	beq	r2,zero,1012964 <virtqueue_get_buffer+0xc0>
		*len = uep->len;
 1012954:	e0bffa17 	ldw	r2,-24(fp)
 1012958:	10c00117 	ldw	r3,4(r2)
 101295c:	e0bffe17 	ldw	r2,-8(fp)
 1012960:	10c00015 	stw	r3,0(r2)

	vq_ring_free_chain(vq, desc_idx);
 1012964:	e0bffb0b 	ldhu	r2,-20(fp)
 1012968:	100b883a 	mov	r5,r2
 101296c:	e13ffd17 	ldw	r4,-12(fp)
 1012970:	10131840 	call	1013184 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 1012974:	e0bffb0b 	ldhu	r2,-20(fp)
 1012978:	e0fffd17 	ldw	r3,-12(fp)
 101297c:	100490fa 	slli	r2,r2,3
 1012980:	1885883a 	add	r2,r3,r2
 1012984:	10800d04 	addi	r2,r2,52
 1012988:	10800017 	ldw	r2,0(r2)
 101298c:	e0bffc15 	stw	r2,-16(fp)
	vq->vq_descx[desc_idx].cookie = NULL;
 1012990:	e0bffb0b 	ldhu	r2,-20(fp)
 1012994:	e0fffd17 	ldw	r3,-12(fp)
 1012998:	100490fa 	slli	r2,r2,3
 101299c:	1885883a 	add	r2,r3,r2
 10129a0:	10800d04 	addi	r2,r2,52
 10129a4:	10000015 	stw	zero,0(r2)

	if (idx)
 10129a8:	e0bfff17 	ldw	r2,-4(fp)
 10129ac:	10000326 	beq	r2,zero,10129bc <virtqueue_get_buffer+0x118>
		*idx = used_idx;
 10129b0:	e0bfff17 	ldw	r2,-4(fp)
 10129b4:	e0fff90b 	ldhu	r3,-28(fp)
 10129b8:	10c0000d 	sth	r3,0(r2)
	VQUEUE_IDLE(vq);

	return cookie;
 10129bc:	e0bffc17 	ldw	r2,-16(fp)
}
 10129c0:	e037883a 	mov	sp,fp
 10129c4:	dfc00117 	ldw	ra,4(sp)
 10129c8:	df000017 	ldw	fp,0(sp)
 10129cc:	dec00204 	addi	sp,sp,8
 10129d0:	f800283a 	ret

010129d4 <virtqueue_get_buffer_length>:

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
 10129d4:	defffd04 	addi	sp,sp,-12
 10129d8:	df000215 	stw	fp,8(sp)
 10129dc:	df000204 	addi	fp,sp,8
 10129e0:	e13ffe15 	stw	r4,-8(fp)
 10129e4:	2805883a 	mov	r2,r5
 10129e8:	e0bfff0d 	sth	r2,-4(fp)
	return vq->vq_ring.desc[idx].len;
 10129ec:	e0bffe17 	ldw	r2,-8(fp)
 10129f0:	10c00617 	ldw	r3,24(r2)
 10129f4:	e0bfff0b 	ldhu	r2,-4(fp)
 10129f8:	1004913a 	slli	r2,r2,4
 10129fc:	1885883a 	add	r2,r3,r2
 1012a00:	10800217 	ldw	r2,8(r2)
}
 1012a04:	e037883a 	mov	sp,fp
 1012a08:	df000017 	ldw	fp,0(sp)
 1012a0c:	dec00104 	addi	sp,sp,4
 1012a10:	f800283a 	ret

01012a14 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
 1012a14:	defffd04 	addi	sp,sp,-12
 1012a18:	dfc00215 	stw	ra,8(sp)
 1012a1c:	df000115 	stw	fp,4(sp)
 1012a20:	df000104 	addi	fp,sp,4
 1012a24:	e13fff15 	stw	r4,-4(fp)
	if (vq) {
 1012a28:	e0bfff17 	ldw	r2,-4(fp)
 1012a2c:	10001c26 	beq	r2,zero,1012aa0 <virtqueue_free+0x8c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
 1012a30:	e0bfff17 	ldw	r2,-4(fp)
 1012a34:	10c0090b 	ldhu	r3,36(r2)
 1012a38:	e0bfff17 	ldw	r2,-4(fp)
 1012a3c:	1080028b 	ldhu	r2,10(r2)
 1012a40:	18ffffcc 	andi	r3,r3,65535
 1012a44:	10bfffcc 	andi	r2,r2,65535
 1012a48:	18801326 	beq	r3,r2,1012a98 <virtqueue_free+0x84>
			metal_log(METAL_LOG_WARNING,
 1012a4c:	008060f4 	movhi	r2,387
 1012a50:	10a97a04 	addi	r2,r2,-23064
 1012a54:	10800017 	ldw	r2,0(r2)
 1012a58:	10800130 	cmpltui	r2,r2,4
 1012a5c:	10000e1e 	bne	r2,zero,1012a98 <virtqueue_free+0x84>
 1012a60:	008060f4 	movhi	r2,387
 1012a64:	10a97a04 	addi	r2,r2,-23064
 1012a68:	10800117 	ldw	r2,4(r2)
 1012a6c:	10000a26 	beq	r2,zero,1012a98 <virtqueue_free+0x84>
 1012a70:	008060f4 	movhi	r2,387
 1012a74:	10a97a04 	addi	r2,r2,-23064
 1012a78:	10800117 	ldw	r2,4(r2)
 1012a7c:	e0ffff17 	ldw	r3,-4(fp)
 1012a80:	18c00117 	ldw	r3,4(r3)
 1012a84:	180d883a 	mov	r6,r3
 1012a88:	014040b4 	movhi	r5,258
 1012a8c:	2957c204 	addi	r5,r5,24328
 1012a90:	01000104 	movi	r4,4
 1012a94:	103ee83a 	callr	r2
				  "%s: freeing non-empty virtqueue\r\n",
				  vq->vq_name);
		}

		metal_free_memory(vq);
 1012a98:	e13fff17 	ldw	r4,-4(fp)
 1012a9c:	10123400 	call	1012340 <metal_free_memory>
	}
}
 1012aa0:	0001883a 	nop
 1012aa4:	e037883a 	mov	sp,fp
 1012aa8:	dfc00117 	ldw	ra,4(sp)
 1012aac:	df000017 	ldw	fp,0(sp)
 1012ab0:	dec00204 	addi	sp,sp,8
 1012ab4:	f800283a 	ret

01012ab8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 1012ab8:	defff904 	addi	sp,sp,-28
 1012abc:	dfc00615 	stw	ra,24(sp)
 1012ac0:	df000515 	stw	fp,20(sp)
 1012ac4:	df000504 	addi	fp,sp,20
 1012ac8:	e13ffd15 	stw	r4,-12(fp)
 1012acc:	e17ffe15 	stw	r5,-8(fp)
 1012ad0:	e1bfff15 	stw	r6,-4(fp)
	uint16_t head_idx = 0;
 1012ad4:	e03ffb0d 	sth	zero,-20(fp)
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 1012ad8:	0001b03a 	sync
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 1012adc:	e0bffd17 	ldw	r2,-12(fp)
 1012ae0:	10c00c0b 	ldhu	r3,48(r2)
 1012ae4:	e0bffd17 	ldw	r2,-12(fp)
 1012ae8:	10800717 	ldw	r2,28(r2)
 1012aec:	1080008b 	ldhu	r2,2(r2)
 1012af0:	18ffffcc 	andi	r3,r3,65535
 1012af4:	10bfffcc 	andi	r2,r2,65535
 1012af8:	1880021e 	bne	r3,r2,1012b04 <virtqueue_get_available_buffer+0x4c>
		return NULL;
 1012afc:	0005883a 	mov	r2,zero
 1012b00:	00002d06 	br	1012bb8 <virtqueue_get_available_buffer+0x100>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 1012b04:	e0bffd17 	ldw	r2,-12(fp)
 1012b08:	10800c0b 	ldhu	r2,48(r2)
 1012b0c:	10c00044 	addi	r3,r2,1
 1012b10:	1809883a 	mov	r4,r3
 1012b14:	e0fffd17 	ldw	r3,-12(fp)
 1012b18:	19000c0d 	sth	r4,48(r3)
 1012b1c:	1007883a 	mov	r3,r2
 1012b20:	e0bffd17 	ldw	r2,-12(fp)
 1012b24:	1080028b 	ldhu	r2,10(r2)
 1012b28:	10bfffc4 	addi	r2,r2,-1
 1012b2c:	1884703a 	and	r2,r3,r2
 1012b30:	e0bffb0d 	sth	r2,-20(fp)
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 1012b34:	e0bffd17 	ldw	r2,-12(fp)
 1012b38:	10c00717 	ldw	r3,28(r2)
 1012b3c:	e0bffb0b 	ldhu	r2,-20(fp)
 1012b40:	10800084 	addi	r2,r2,2
 1012b44:	1085883a 	add	r2,r2,r2
 1012b48:	1885883a 	add	r2,r3,r2
 1012b4c:	10c0000b 	ldhu	r3,0(r2)
 1012b50:	e0bffe17 	ldw	r2,-8(fp)
 1012b54:	10c0000d 	sth	r3,0(r2)

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 1012b58:	e0bffd17 	ldw	r2,-12(fp)
 1012b5c:	10c00617 	ldw	r3,24(r2)
 1012b60:	e0bffe17 	ldw	r2,-8(fp)
 1012b64:	1080000b 	ldhu	r2,0(r2)
 1012b68:	10bfffcc 	andi	r2,r2,65535
 1012b6c:	1004913a 	slli	r2,r2,4
 1012b70:	1889883a 	add	r4,r3,r2
 1012b74:	20800017 	ldw	r2,0(r4)
 1012b78:	20c00117 	ldw	r3,4(r4)
 1012b7c:	100b883a 	mov	r5,r2
 1012b80:	e13ffd17 	ldw	r4,-12(fp)
 1012b84:	10126540 	call	1012654 <virtqueue_phys_to_virt>
 1012b88:	e0bffc15 	stw	r2,-16(fp)
	*len = vq->vq_ring.desc[*avail_idx].len;
 1012b8c:	e0bffd17 	ldw	r2,-12(fp)
 1012b90:	10c00617 	ldw	r3,24(r2)
 1012b94:	e0bffe17 	ldw	r2,-8(fp)
 1012b98:	1080000b 	ldhu	r2,0(r2)
 1012b9c:	10bfffcc 	andi	r2,r2,65535
 1012ba0:	1004913a 	slli	r2,r2,4
 1012ba4:	1885883a 	add	r2,r3,r2
 1012ba8:	10c00217 	ldw	r3,8(r2)
 1012bac:	e0bfff17 	ldw	r2,-4(fp)
 1012bb0:	10c00015 	stw	r3,0(r2)

	VQUEUE_IDLE(vq);

	return buffer;
 1012bb4:	e0bffc17 	ldw	r2,-16(fp)
}
 1012bb8:	e037883a 	mov	sp,fp
 1012bbc:	dfc00117 	ldw	ra,4(sp)
 1012bc0:	df000017 	ldw	fp,0(sp)
 1012bc4:	dec00204 	addi	sp,sp,8
 1012bc8:	f800283a 	ret

01012bcc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 1012bcc:	defffa04 	addi	sp,sp,-24
 1012bd0:	df000515 	stw	fp,20(sp)
 1012bd4:	df000504 	addi	fp,sp,20
 1012bd8:	e13ffd15 	stw	r4,-12(fp)
 1012bdc:	2805883a 	mov	r2,r5
 1012be0:	e1bfff15 	stw	r6,-4(fp)
 1012be4:	e0bffe0d 	sth	r2,-8(fp)
	struct vring_used_elem *used_desc = NULL;
 1012be8:	e03ffb15 	stw	zero,-20(fp)
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 1012bec:	e0bffd17 	ldw	r2,-12(fp)
 1012bf0:	1080028b 	ldhu	r2,10(r2)
 1012bf4:	10ffffcc 	andi	r3,r2,65535
 1012bf8:	e0bffe0b 	ldhu	r2,-8(fp)
 1012bfc:	1880022e 	bgeu	r3,r2,1012c08 <virtqueue_add_consumed_buffer+0x3c>
		return ERROR_VRING_NO_BUFF;
 1012c00:	00bd1044 	movi	r2,-3007
 1012c04:	00002306 	br	1012c94 <virtqueue_add_consumed_buffer+0xc8>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 1012c08:	e0bffd17 	ldw	r2,-12(fp)
 1012c0c:	10800817 	ldw	r2,32(r2)
 1012c10:	1080008b 	ldhu	r2,2(r2)
 1012c14:	1007883a 	mov	r3,r2
 1012c18:	e0bffd17 	ldw	r2,-12(fp)
 1012c1c:	1080028b 	ldhu	r2,10(r2)
 1012c20:	10bfffc4 	addi	r2,r2,-1
 1012c24:	1884703a 	and	r2,r3,r2
 1012c28:	e0bffc0d 	sth	r2,-16(fp)
	used_desc = &vq->vq_ring.used->ring[used_idx];
 1012c2c:	e0bffd17 	ldw	r2,-12(fp)
 1012c30:	10c00817 	ldw	r3,32(r2)
 1012c34:	e0bffc0b 	ldhu	r2,-16(fp)
 1012c38:	100490fa 	slli	r2,r2,3
 1012c3c:	10800104 	addi	r2,r2,4
 1012c40:	1885883a 	add	r2,r3,r2
 1012c44:	e0bffb15 	stw	r2,-20(fp)
	used_desc->id = head_idx;
 1012c48:	e0fffe0b 	ldhu	r3,-8(fp)
 1012c4c:	e0bffb17 	ldw	r2,-20(fp)
 1012c50:	10c00015 	stw	r3,0(r2)
	used_desc->len = len;
 1012c54:	e0bffb17 	ldw	r2,-20(fp)
 1012c58:	e0ffff17 	ldw	r3,-4(fp)
 1012c5c:	10c00115 	stw	r3,4(r2)

	atomic_thread_fence(memory_order_seq_cst);
 1012c60:	0001b03a 	sync

	vq->vq_ring.used->idx++;
 1012c64:	e0bffd17 	ldw	r2,-12(fp)
 1012c68:	10800817 	ldw	r2,32(r2)
 1012c6c:	10c0008b 	ldhu	r3,2(r2)
 1012c70:	18c00044 	addi	r3,r3,1
 1012c74:	10c0008d 	sth	r3,2(r2)

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 1012c78:	e0bffd17 	ldw	r2,-12(fp)
 1012c7c:	1080098b 	ldhu	r2,38(r2)
 1012c80:	10800044 	addi	r2,r2,1
 1012c84:	1007883a 	mov	r3,r2
 1012c88:	e0bffd17 	ldw	r2,-12(fp)
 1012c8c:	10c0098d 	sth	r3,38(r2)

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 1012c90:	0005883a 	mov	r2,zero
}
 1012c94:	e037883a 	mov	sp,fp
 1012c98:	df000017 	ldw	fp,0(sp)
 1012c9c:	dec00104 	addi	sp,sp,4
 1012ca0:	f800283a 	ret

01012ca4 <virtqueue_enable_cb>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Function status
 */
int virtqueue_enable_cb(struct virtqueue *vq)
{
 1012ca4:	defffd04 	addi	sp,sp,-12
 1012ca8:	dfc00215 	stw	ra,8(sp)
 1012cac:	df000115 	stw	fp,4(sp)
 1012cb0:	df000104 	addi	fp,sp,4
 1012cb4:	e13fff15 	stw	r4,-4(fp)
	return vq_ring_enable_interrupt(vq, 0);
 1012cb8:	000b883a 	mov	r5,zero
 1012cbc:	e13fff17 	ldw	r4,-4(fp)
 1012cc0:	10134140 	call	1013414 <vq_ring_enable_interrupt>
}
 1012cc4:	e037883a 	mov	sp,fp
 1012cc8:	dfc00117 	ldw	ra,4(sp)
 1012ccc:	df000017 	ldw	fp,0(sp)
 1012cd0:	dec00204 	addi	sp,sp,8
 1012cd4:	f800283a 	ret

01012cd8 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 1012cd8:	defffe04 	addi	sp,sp,-8
 1012cdc:	df000115 	stw	fp,4(sp)
 1012ce0:	df000104 	addi	fp,sp,4
 1012ce4:	e13fff15 	stw	r4,-4(fp)
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1012ce8:	e0bfff17 	ldw	r2,-4(fp)
 1012cec:	11000017 	ldw	r4,0(r2)
 1012cf0:	20800317 	ldw	r2,12(r4)
 1012cf4:	20c00417 	ldw	r3,16(r4)
 1012cf8:	1148002c 	andhi	r5,r2,8192
 1012cfc:	180c703a 	and	r6,r3,zero
 1012d00:	2805883a 	mov	r2,r5
 1012d04:	1184b03a 	or	r2,r2,r6
 1012d08:	10002626 	beq	r2,zero,1012da4 <virtqueue_disable_cb+0xcc>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1012d0c:	e0bfff17 	ldw	r2,-4(fp)
 1012d10:	10800017 	ldw	r2,0(r2)
 1012d14:	10800517 	ldw	r2,20(r2)
 1012d18:	10000e1e 	bne	r2,zero,1012d54 <virtqueue_disable_cb+0x7c>
			vring_used_event(&vq->vq_ring) =
 1012d1c:	e0bfff17 	ldw	r2,-4(fp)
 1012d20:	10c00717 	ldw	r3,28(r2)
 1012d24:	e0bfff17 	ldw	r2,-4(fp)
 1012d28:	10800517 	ldw	r2,20(r2)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 1012d2c:	e13fff17 	ldw	r4,-4(fp)
 1012d30:	21400b8b 	ldhu	r5,46(r4)
 1012d34:	e13fff17 	ldw	r4,-4(fp)
 1012d38:	2100028b 	ldhu	r4,10(r4)
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
			vring_used_event(&vq->vq_ring) =
 1012d3c:	2909c83a 	sub	r4,r5,r4
 1012d40:	213fffc4 	addi	r4,r4,-1
 1012d44:	10800084 	addi	r2,r2,2
 1012d48:	1085883a 	add	r2,r2,r2
 1012d4c:	1885883a 	add	r2,r3,r2
 1012d50:	1100000d 	sth	r4,0(r2)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 1012d54:	e0bfff17 	ldw	r2,-4(fp)
 1012d58:	10800017 	ldw	r2,0(r2)
 1012d5c:	10800517 	ldw	r2,20(r2)
 1012d60:	10800058 	cmpnei	r2,r2,1
 1012d64:	1000261e 	bne	r2,zero,1012e00 <virtqueue_disable_cb+0x128>
			vring_avail_event(&vq->vq_ring) =
 1012d68:	e0bfff17 	ldw	r2,-4(fp)
 1012d6c:	10c00817 	ldw	r3,32(r2)
 1012d70:	e0bfff17 	ldw	r2,-4(fp)
 1012d74:	10800517 	ldw	r2,20(r2)
			    vq->vq_available_idx - vq->vq_nentries - 1;
 1012d78:	e13fff17 	ldw	r4,-4(fp)
 1012d7c:	21400c0b 	ldhu	r5,48(r4)
 1012d80:	e13fff17 	ldw	r4,-4(fp)
 1012d84:	2100028b 	ldhu	r4,10(r4)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			vring_avail_event(&vq->vq_ring) =
 1012d88:	2909c83a 	sub	r4,r5,r4
 1012d8c:	213fffc4 	addi	r4,r4,-1
 1012d90:	100490fa 	slli	r2,r2,3
 1012d94:	1885883a 	add	r2,r3,r2
 1012d98:	10800104 	addi	r2,r2,4
 1012d9c:	1100000d 	sth	r4,0(r2)
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
 1012da0:	00001706 	br	1012e00 <virtqueue_disable_cb+0x128>
			    vq->vq_available_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1012da4:	e0bfff17 	ldw	r2,-4(fp)
 1012da8:	10800017 	ldw	r2,0(r2)
 1012dac:	10800517 	ldw	r2,20(r2)
 1012db0:	1000071e 	bne	r2,zero,1012dd0 <virtqueue_disable_cb+0xf8>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 1012db4:	e0bfff17 	ldw	r2,-4(fp)
 1012db8:	10800717 	ldw	r2,28(r2)
 1012dbc:	e0ffff17 	ldw	r3,-4(fp)
 1012dc0:	18c00717 	ldw	r3,28(r3)
 1012dc4:	18c0000b 	ldhu	r3,0(r3)
 1012dc8:	18c00054 	ori	r3,r3,1
 1012dcc:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1012dd0:	e0bfff17 	ldw	r2,-4(fp)
 1012dd4:	10800017 	ldw	r2,0(r2)
 1012dd8:	10800517 	ldw	r2,20(r2)
 1012ddc:	10800058 	cmpnei	r2,r2,1
 1012de0:	1000071e 	bne	r2,zero,1012e00 <virtqueue_disable_cb+0x128>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
 1012de4:	e0bfff17 	ldw	r2,-4(fp)
 1012de8:	10800817 	ldw	r2,32(r2)
 1012dec:	e0ffff17 	ldw	r3,-4(fp)
 1012df0:	18c00817 	ldw	r3,32(r3)
 1012df4:	18c0000b 	ldhu	r3,0(r3)
 1012df8:	18c00054 	ori	r3,r3,1
 1012dfc:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
 1012e00:	0001883a 	nop
 1012e04:	e037883a 	mov	sp,fp
 1012e08:	df000017 	ldw	fp,0(sp)
 1012e0c:	dec00104 	addi	sp,sp,4
 1012e10:	f800283a 	ret

01012e14 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 1012e14:	defffd04 	addi	sp,sp,-12
 1012e18:	dfc00215 	stw	ra,8(sp)
 1012e1c:	df000115 	stw	fp,4(sp)
 1012e20:	df000104 	addi	fp,sp,4
 1012e24:	e13fff15 	stw	r4,-4(fp)
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 1012e28:	0001b03a 	sync

	if (vq_ring_must_notify(vq))
 1012e2c:	e13fff17 	ldw	r4,-4(fp)
 1012e30:	10136040 	call	1013604 <vq_ring_must_notify>
 1012e34:	10000226 	beq	r2,zero,1012e40 <virtqueue_kick+0x2c>
		vq_ring_notify(vq);
 1012e38:	e13fff17 	ldw	r4,-4(fp)
 1012e3c:	10137bc0 	call	10137bc <vq_ring_notify>

	vq->vq_queued_cnt = 0;
 1012e40:	e0bfff17 	ldw	r2,-4(fp)
 1012e44:	1000098d 	sth	zero,38(r2)

	VQUEUE_IDLE(vq);
}
 1012e48:	0001883a 	nop
 1012e4c:	e037883a 	mov	sp,fp
 1012e50:	dfc00117 	ldw	ra,4(sp)
 1012e54:	df000017 	ldw	fp,0(sp)
 1012e58:	dec00204 	addi	sp,sp,8
 1012e5c:	f800283a 	ret

01012e60 <virtqueue_dump>:
 * virtqueue_dump Dumps important virtqueue fields , use for debugging purposes
 *
 * @param vq - Pointer to VirtIO queue control block
 */
void virtqueue_dump(struct virtqueue *vq)
{
 1012e60:	defff504 	addi	sp,sp,-44
 1012e64:	dfc00a15 	stw	ra,40(sp)
 1012e68:	df000915 	stw	fp,36(sp)
 1012e6c:	df000904 	addi	fp,sp,36
 1012e70:	e13fff15 	stw	r4,-4(fp)
	if (!vq)
 1012e74:	e0bfff17 	ldw	r2,-4(fp)
 1012e78:	10003c26 	beq	r2,zero,1012f6c <virtqueue_dump+0x10c>
		return;

	metal_log(METAL_LOG_DEBUG,
 1012e7c:	008060f4 	movhi	r2,387
 1012e80:	10a97a04 	addi	r2,r2,-23064
 1012e84:	10800017 	ldw	r2,0(r2)
 1012e88:	108001f0 	cmpltui	r2,r2,7
 1012e8c:	1000381e 	bne	r2,zero,1012f70 <virtqueue_dump+0x110>
 1012e90:	008060f4 	movhi	r2,387
 1012e94:	10a97a04 	addi	r2,r2,-23064
 1012e98:	10800117 	ldw	r2,4(r2)
 1012e9c:	10003426 	beq	r2,zero,1012f70 <virtqueue_dump+0x110>
 1012ea0:	008060f4 	movhi	r2,387
 1012ea4:	10a97a04 	addi	r2,r2,-23064
 1012ea8:	10800117 	ldw	r2,4(r2)
 1012eac:	e0ffff17 	ldw	r3,-4(fp)
 1012eb0:	1ac00117 	ldw	r11,4(r3)
 1012eb4:	e0ffff17 	ldw	r3,-4(fp)
 1012eb8:	18c0028b 	ldhu	r3,10(r3)
 1012ebc:	1b3fffcc 	andi	r12,r3,65535
 1012ec0:	e0ffff17 	ldw	r3,-4(fp)
 1012ec4:	18c0090b 	ldhu	r3,36(r3)
 1012ec8:	18ffffcc 	andi	r3,r3,65535
 1012ecc:	e13fff17 	ldw	r4,-4(fp)
 1012ed0:	2100098b 	ldhu	r4,38(r4)
 1012ed4:	213fffcc 	andi	r4,r4,65535
 1012ed8:	e17fff17 	ldw	r5,-4(fp)
 1012edc:	29400b0b 	ldhu	r5,44(r5)
 1012ee0:	297fffcc 	andi	r5,r5,65535
 1012ee4:	e1bfff17 	ldw	r6,-4(fp)
 1012ee8:	31800717 	ldw	r6,28(r6)
 1012eec:	3180008b 	ldhu	r6,2(r6)
 1012ef0:	31bfffcc 	andi	r6,r6,65535
 1012ef4:	e1ffff17 	ldw	r7,-4(fp)
 1012ef8:	39c00b8b 	ldhu	r7,46(r7)
 1012efc:	39ffffcc 	andi	r7,r7,65535
 1012f00:	e23fff17 	ldw	r8,-4(fp)
 1012f04:	42000817 	ldw	r8,32(r8)
 1012f08:	4200008b 	ldhu	r8,2(r8)
 1012f0c:	423fffcc 	andi	r8,r8,65535
 1012f10:	e27fff17 	ldw	r9,-4(fp)
 1012f14:	4a400717 	ldw	r9,28(r9)
 1012f18:	4a40000b 	ldhu	r9,0(r9)
 1012f1c:	4a7fffcc 	andi	r9,r9,65535
 1012f20:	e2bfff17 	ldw	r10,-4(fp)
 1012f24:	52800817 	ldw	r10,32(r10)
 1012f28:	5280000b 	ldhu	r10,0(r10)
 1012f2c:	52bfffcc 	andi	r10,r10,65535
 1012f30:	da800715 	stw	r10,28(sp)
 1012f34:	da400615 	stw	r9,24(sp)
 1012f38:	da000515 	stw	r8,20(sp)
 1012f3c:	d9c00415 	stw	r7,16(sp)
 1012f40:	d9800315 	stw	r6,12(sp)
 1012f44:	d9400215 	stw	r5,8(sp)
 1012f48:	d9000115 	stw	r4,4(sp)
 1012f4c:	d8c00015 	stw	r3,0(sp)
 1012f50:	600f883a 	mov	r7,r12
 1012f54:	580d883a 	mov	r6,r11
 1012f58:	014040b4 	movhi	r5,258
 1012f5c:	2957cb04 	addi	r5,r5,24364
 1012f60:	010001c4 	movi	r4,7
 1012f64:	103ee83a 	callr	r2
 1012f68:	00000106 	br	1012f70 <virtqueue_dump+0x110>
 * @param vq - Pointer to VirtIO queue control block
 */
void virtqueue_dump(struct virtqueue *vq)
{
	if (!vq)
		return;
 1012f6c:	0001883a 	nop
		  vq->vq_name, vq->vq_nentries, vq->vq_free_cnt,
		  vq->vq_queued_cnt, vq->vq_desc_head_idx,
		  vq->vq_ring.avail->idx, vq->vq_used_cons_idx,
		  vq->vq_ring.used->idx, vq->vq_ring.avail->flags,
		  vq->vq_ring.used->flags);
}
 1012f70:	e037883a 	mov	sp,fp
 1012f74:	dfc00117 	ldw	ra,4(sp)
 1012f78:	df000017 	ldw	fp,0(sp)
 1012f7c:	dec00204 	addi	sp,sp,8
 1012f80:	f800283a 	ret

01012f84 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 1012f84:	defffc04 	addi	sp,sp,-16
 1012f88:	df000315 	stw	fp,12(sp)
 1012f8c:	df000304 	addi	fp,sp,12
 1012f90:	e13fff15 	stw	r4,-4(fp)
	uint16_t head_idx = 0;
 1012f94:	e03ffd0d 	sth	zero,-12(fp)
	uint16_t avail_idx = 0;
 1012f98:	e03ffd8d 	sth	zero,-10(fp)
	uint32_t len = 0;
 1012f9c:	e03ffe15 	stw	zero,-8(fp)

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 1012fa0:	e0bfff17 	ldw	r2,-4(fp)
 1012fa4:	10c00c0b 	ldhu	r3,48(r2)
 1012fa8:	e0bfff17 	ldw	r2,-4(fp)
 1012fac:	10800717 	ldw	r2,28(r2)
 1012fb0:	1080008b 	ldhu	r2,2(r2)
 1012fb4:	18ffffcc 	andi	r3,r3,65535
 1012fb8:	10bfffcc 	andi	r2,r2,65535
 1012fbc:	1880021e 	bne	r3,r2,1012fc8 <virtqueue_get_desc_size+0x44>
		return 0;
 1012fc0:	0005883a 	mov	r2,zero
 1012fc4:	00001806 	br	1013028 <virtqueue_get_desc_size+0xa4>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 1012fc8:	e0bfff17 	ldw	r2,-4(fp)
 1012fcc:	10800c0b 	ldhu	r2,48(r2)
 1012fd0:	1007883a 	mov	r3,r2
 1012fd4:	e0bfff17 	ldw	r2,-4(fp)
 1012fd8:	1080028b 	ldhu	r2,10(r2)
 1012fdc:	10bfffc4 	addi	r2,r2,-1
 1012fe0:	1884703a 	and	r2,r3,r2
 1012fe4:	e0bffd0d 	sth	r2,-12(fp)
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 1012fe8:	e0bfff17 	ldw	r2,-4(fp)
 1012fec:	10c00717 	ldw	r3,28(r2)
 1012ff0:	e0bffd0b 	ldhu	r2,-12(fp)
 1012ff4:	10800084 	addi	r2,r2,2
 1012ff8:	1085883a 	add	r2,r2,r2
 1012ffc:	1885883a 	add	r2,r3,r2
 1013000:	1080000b 	ldhu	r2,0(r2)
 1013004:	e0bffd8d 	sth	r2,-10(fp)
	len = vq->vq_ring.desc[avail_idx].len;
 1013008:	e0bfff17 	ldw	r2,-4(fp)
 101300c:	10c00617 	ldw	r3,24(r2)
 1013010:	e0bffd8b 	ldhu	r2,-10(fp)
 1013014:	1004913a 	slli	r2,r2,4
 1013018:	1885883a 	add	r2,r3,r2
 101301c:	10800217 	ldw	r2,8(r2)
 1013020:	e0bffe15 	stw	r2,-8(fp)

	VQUEUE_IDLE(vq);

	return len;
 1013024:	e0bffe17 	ldw	r2,-8(fp)
}
 1013028:	e037883a 	mov	sp,fp
 101302c:	df000017 	ldw	fp,0(sp)
 1013030:	dec00104 	addi	sp,sp,4
 1013034:	f800283a 	ret

01013038 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 1013038:	defff404 	addi	sp,sp,-48
 101303c:	dfc00b15 	stw	ra,44(sp)
 1013040:	df000a15 	stw	fp,40(sp)
 1013044:	dc400915 	stw	r17,36(sp)
 1013048:	dc000815 	stw	r16,32(sp)
 101304c:	df000a04 	addi	fp,sp,40
 1013050:	e13ffa15 	stw	r4,-24(fp)
 1013054:	e17ffb15 	stw	r5,-20(fp)
 1013058:	3005883a 	mov	r2,r6
 101305c:	e1fffd15 	stw	r7,-12(fp)
 1013060:	e0bffc0d 	sth	r2,-16(fp)
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 1013064:	e0c00217 	ldw	r3,8(fp)
 1013068:	e0800317 	ldw	r2,12(fp)
 101306c:	1885883a 	add	r2,r3,r2
 1013070:	e0bff815 	stw	r2,-32(fp)

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 1013074:	e03ff615 	stw	zero,-40(fp)
 1013078:	e0bffc0b 	ldhu	r2,-16(fp)
 101307c:	e0bff70d 	sth	r2,-36(fp)
 1013080:	00003506 	br	1013158 <vq_ring_add_buffer+0x120>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 1013084:	e0bff70b 	ldhu	r2,-36(fp)
 1013088:	1004913a 	slli	r2,r2,4
 101308c:	e0fffb17 	ldw	r3,-20(fp)
 1013090:	1885883a 	add	r2,r3,r2
 1013094:	e0bff915 	stw	r2,-28(fp)
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 1013098:	e0bff617 	ldw	r2,-40(fp)
 101309c:	100490fa 	slli	r2,r2,3
 10130a0:	e0fffd17 	ldw	r3,-12(fp)
 10130a4:	1885883a 	add	r2,r3,r2
 10130a8:	10800017 	ldw	r2,0(r2)
 10130ac:	100b883a 	mov	r5,r2
 10130b0:	e13ffa17 	ldw	r4,-24(fp)
 10130b4:	10126980 	call	1012698 <virtqueue_virt_to_phys>
 10130b8:	1021883a 	mov	r16,r2
 10130bc:	0023883a 	mov	r17,zero
 10130c0:	e0bff917 	ldw	r2,-28(fp)
 10130c4:	14000015 	stw	r16,0(r2)
 10130c8:	14400115 	stw	r17,4(r2)
		dp->len = buf_list[i].len;
 10130cc:	e0bff617 	ldw	r2,-40(fp)
 10130d0:	100490fa 	slli	r2,r2,3
 10130d4:	e0fffd17 	ldw	r3,-12(fp)
 10130d8:	1885883a 	add	r2,r3,r2
 10130dc:	10800117 	ldw	r2,4(r2)
 10130e0:	1007883a 	mov	r3,r2
 10130e4:	e0bff917 	ldw	r2,-28(fp)
 10130e8:	10c00215 	stw	r3,8(r2)
		dp->flags = 0;
 10130ec:	e0bff917 	ldw	r2,-28(fp)
 10130f0:	1000030d 	sth	zero,12(r2)

		if (i < needed - 1)
 10130f4:	e0bff817 	ldw	r2,-32(fp)
 10130f8:	10bfffc4 	addi	r2,r2,-1
 10130fc:	e0fff617 	ldw	r3,-40(fp)
 1013100:	1880060e 	bge	r3,r2,101311c <vq_ring_add_buffer+0xe4>
			dp->flags |= VRING_DESC_F_NEXT;
 1013104:	e0bff917 	ldw	r2,-28(fp)
 1013108:	1080030b 	ldhu	r2,12(r2)
 101310c:	10800054 	ori	r2,r2,1
 1013110:	1007883a 	mov	r3,r2
 1013114:	e0bff917 	ldw	r2,-28(fp)
 1013118:	10c0030d 	sth	r3,12(r2)

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 101311c:	e0fff617 	ldw	r3,-40(fp)
 1013120:	e0800217 	ldw	r2,8(fp)
 1013124:	18800616 	blt	r3,r2,1013140 <vq_ring_add_buffer+0x108>
			dp->flags |= VRING_DESC_F_WRITE;
 1013128:	e0bff917 	ldw	r2,-28(fp)
 101312c:	1080030b 	ldhu	r2,12(r2)
 1013130:	10800094 	ori	r2,r2,2
 1013134:	1007883a 	mov	r3,r2
 1013138:	e0bff917 	ldw	r2,-28(fp)
 101313c:	10c0030d 	sth	r3,12(r2)

	(void)vq;

	needed = readable + writable;

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 1013140:	e0bff617 	ldw	r2,-40(fp)
 1013144:	10800044 	addi	r2,r2,1
 1013148:	e0bff615 	stw	r2,-40(fp)
 101314c:	e0bff917 	ldw	r2,-28(fp)
 1013150:	1080038b 	ldhu	r2,14(r2)
 1013154:	e0bff70d 	sth	r2,-36(fp)
 1013158:	e0fff617 	ldw	r3,-40(fp)
 101315c:	e0bff817 	ldw	r2,-32(fp)
 1013160:	18bfc816 	blt	r3,r2,1013084 <__alt_data_end+0xff013084>
		 */
		if (i >= readable)
			dp->flags |= VRING_DESC_F_WRITE;
	}

	return idx;
 1013164:	e0bff70b 	ldhu	r2,-36(fp)
}
 1013168:	e6fffe04 	addi	sp,fp,-8
 101316c:	dfc00317 	ldw	ra,12(sp)
 1013170:	df000217 	ldw	fp,8(sp)
 1013174:	dc400117 	ldw	r17,4(sp)
 1013178:	dc000017 	ldw	r16,0(sp)
 101317c:	dec00404 	addi	sp,sp,16
 1013180:	f800283a 	ret

01013184 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 1013184:	defffb04 	addi	sp,sp,-20
 1013188:	df000415 	stw	fp,16(sp)
 101318c:	df000404 	addi	fp,sp,16
 1013190:	e13ffe15 	stw	r4,-8(fp)
 1013194:	2805883a 	mov	r2,r5
 1013198:	e0bfff0d 	sth	r2,-4(fp)
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 101319c:	e0bffe17 	ldw	r2,-8(fp)
 10131a0:	10c00617 	ldw	r3,24(r2)
 10131a4:	e0bfff0b 	ldhu	r2,-4(fp)
 10131a8:	1004913a 	slli	r2,r2,4
 10131ac:	1885883a 	add	r2,r3,r2
 10131b0:	e0bffc15 	stw	r2,-16(fp)
	dxp = &vq->vq_descx[desc_idx];
 10131b4:	e0bfff0b 	ldhu	r2,-4(fp)
 10131b8:	100490fa 	slli	r2,r2,3
 10131bc:	10800d04 	addi	r2,r2,52
 10131c0:	e0fffe17 	ldw	r3,-8(fp)
 10131c4:	1885883a 	add	r2,r3,r2
 10131c8:	e0bffd15 	stw	r2,-12(fp)

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 10131cc:	e0bffe17 	ldw	r2,-8(fp)
 10131d0:	10c0090b 	ldhu	r3,36(r2)
 10131d4:	e0bffd17 	ldw	r2,-12(fp)
 10131d8:	1080010b 	ldhu	r2,4(r2)
 10131dc:	1885883a 	add	r2,r3,r2
 10131e0:	1007883a 	mov	r3,r2
 10131e4:	e0bffe17 	ldw	r2,-8(fp)
 10131e8:	10c0090d 	sth	r3,36(r2)
	dxp->ndescs--;
 10131ec:	e0bffd17 	ldw	r2,-12(fp)
 10131f0:	1080010b 	ldhu	r2,4(r2)
 10131f4:	10bfffc4 	addi	r2,r2,-1
 10131f8:	1007883a 	mov	r3,r2
 10131fc:	e0bffd17 	ldw	r2,-12(fp)
 1013200:	10c0010d 	sth	r3,4(r2)

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 1013204:	e0bffc17 	ldw	r2,-16(fp)
 1013208:	1080030b 	ldhu	r2,12(r2)
 101320c:	10bfffcc 	andi	r2,r2,65535
 1013210:	1080010c 	andi	r2,r2,4
 1013214:	1000141e 	bne	r2,zero,1013268 <vq_ring_free_chain+0xe4>
		while (dp->flags & VRING_DESC_F_NEXT) {
 1013218:	00000e06 	br	1013254 <vq_ring_free_chain+0xd0>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 101321c:	e0bffe17 	ldw	r2,-8(fp)
 1013220:	10c00617 	ldw	r3,24(r2)
 1013224:	e0bffc17 	ldw	r2,-16(fp)
 1013228:	1080038b 	ldhu	r2,14(r2)
 101322c:	10bfffcc 	andi	r2,r2,65535
 1013230:	1004913a 	slli	r2,r2,4
 1013234:	1885883a 	add	r2,r3,r2
 1013238:	e0bffc15 	stw	r2,-16(fp)
			dxp->ndescs--;
 101323c:	e0bffd17 	ldw	r2,-12(fp)
 1013240:	1080010b 	ldhu	r2,4(r2)
 1013244:	10bfffc4 	addi	r2,r2,-1
 1013248:	1007883a 	mov	r3,r2
 101324c:	e0bffd17 	ldw	r2,-12(fp)
 1013250:	10c0010d 	sth	r3,4(r2)

	vq->vq_free_cnt += dxp->ndescs;
	dxp->ndescs--;

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
		while (dp->flags & VRING_DESC_F_NEXT) {
 1013254:	e0bffc17 	ldw	r2,-16(fp)
 1013258:	1080030b 	ldhu	r2,12(r2)
 101325c:	10bfffcc 	andi	r2,r2,65535
 1013260:	1080004c 	andi	r2,r2,1
 1013264:	103fed1e 	bne	r2,zero,101321c <__alt_data_end+0xff01321c>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 1013268:	e0bffe17 	ldw	r2,-8(fp)
 101326c:	10c00b0b 	ldhu	r3,44(r2)
 1013270:	e0bffc17 	ldw	r2,-16(fp)
 1013274:	10c0038d 	sth	r3,14(r2)
	vq->vq_desc_head_idx = desc_idx;
 1013278:	e0bffe17 	ldw	r2,-8(fp)
 101327c:	e0ffff0b 	ldhu	r3,-4(fp)
 1013280:	10c00b0d 	sth	r3,44(r2)
}
 1013284:	0001883a 	nop
 1013288:	e037883a 	mov	sp,fp
 101328c:	df000017 	ldw	fp,0(sp)
 1013290:	dec00104 	addi	sp,sp,4
 1013294:	f800283a 	ret

01013298 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 1013298:	defff804 	addi	sp,sp,-32
 101329c:	dfc00715 	stw	ra,28(sp)
 10132a0:	df000615 	stw	fp,24(sp)
 10132a4:	df000604 	addi	fp,sp,24
 10132a8:	e13ffd15 	stw	r4,-12(fp)
 10132ac:	e17ffe15 	stw	r5,-8(fp)
 10132b0:	e1bfff15 	stw	r6,-4(fp)
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 10132b4:	e0bffd17 	ldw	r2,-12(fp)
 10132b8:	1080028b 	ldhu	r2,10(r2)
 10132bc:	10bfffcc 	andi	r2,r2,65535
 10132c0:	e0bffb15 	stw	r2,-20(fp)
	vr = &vq->vq_ring;
 10132c4:	e0bffd17 	ldw	r2,-12(fp)
 10132c8:	10800504 	addi	r2,r2,20
 10132cc:	e0bffc15 	stw	r2,-16(fp)

	vring_init(vr, size, ring_mem, alignment);
 10132d0:	e0bffb17 	ldw	r2,-20(fp)
 10132d4:	e0ffff17 	ldw	r3,-4(fp)
 10132d8:	180f883a 	mov	r7,r3
 10132dc:	e1bffe17 	ldw	r6,-8(fp)
 10132e0:	100b883a 	mov	r5,r2
 10132e4:	e13ffc17 	ldw	r4,-16(fp)
 10132e8:	10122400 	call	1012240 <vring_init>

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 10132ec:	e0bffd17 	ldw	r2,-12(fp)
 10132f0:	10800017 	ldw	r2,0(r2)
 10132f4:	10800517 	ldw	r2,20(r2)
 10132f8:	1000181e 	bne	r2,zero,101335c <vq_ring_init+0xc4>
		for (i = 0; i < size - 1; i++)
 10132fc:	e03ffa15 	stw	zero,-24(fp)
 1013300:	00000b06 	br	1013330 <vq_ring_init+0x98>
			vr->desc[i].next = i + 1;
 1013304:	e0bffc17 	ldw	r2,-16(fp)
 1013308:	10c00117 	ldw	r3,4(r2)
 101330c:	e0bffa17 	ldw	r2,-24(fp)
 1013310:	1004913a 	slli	r2,r2,4
 1013314:	1885883a 	add	r2,r3,r2
 1013318:	e0fffa17 	ldw	r3,-24(fp)
 101331c:	18c00044 	addi	r3,r3,1
 1013320:	10c0038d 	sth	r3,14(r2)

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
		for (i = 0; i < size - 1; i++)
 1013324:	e0bffa17 	ldw	r2,-24(fp)
 1013328:	10800044 	addi	r2,r2,1
 101332c:	e0bffa15 	stw	r2,-24(fp)
 1013330:	e0bffb17 	ldw	r2,-20(fp)
 1013334:	10bfffc4 	addi	r2,r2,-1
 1013338:	e0fffa17 	ldw	r3,-24(fp)
 101333c:	18bff116 	blt	r3,r2,1013304 <__alt_data_end+0xff013304>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 1013340:	e0bffc17 	ldw	r2,-16(fp)
 1013344:	10c00117 	ldw	r3,4(r2)
 1013348:	e0bffa17 	ldw	r2,-24(fp)
 101334c:	1004913a 	slli	r2,r2,4
 1013350:	1885883a 	add	r2,r3,r2
 1013354:	00e00004 	movi	r3,-32768
 1013358:	10c0038d 	sth	r3,14(r2)
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
 101335c:	0001883a 	nop
 1013360:	e037883a 	mov	sp,fp
 1013364:	dfc00117 	ldw	ra,4(sp)
 1013368:	df000017 	ldw	fp,0(sp)
 101336c:	dec00204 	addi	sp,sp,8
 1013370:	f800283a 	ret

01013374 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 1013374:	defffc04 	addi	sp,sp,-16
 1013378:	df000315 	stw	fp,12(sp)
 101337c:	df000304 	addi	fp,sp,12
 1013380:	e13ffe15 	stw	r4,-8(fp)
 1013384:	2805883a 	mov	r2,r5
 1013388:	e0bfff0d 	sth	r2,-4(fp)
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 101338c:	e0bffe17 	ldw	r2,-8(fp)
 1013390:	10800717 	ldw	r2,28(r2)
 1013394:	1080008b 	ldhu	r2,2(r2)
 1013398:	1007883a 	mov	r3,r2
 101339c:	e0bffe17 	ldw	r2,-8(fp)
 10133a0:	1080028b 	ldhu	r2,10(r2)
 10133a4:	10bfffc4 	addi	r2,r2,-1
 10133a8:	1884703a 	and	r2,r3,r2
 10133ac:	e0bffd0d 	sth	r2,-12(fp)
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 10133b0:	e0bffe17 	ldw	r2,-8(fp)
 10133b4:	10c00717 	ldw	r3,28(r2)
 10133b8:	e0bffd0b 	ldhu	r2,-12(fp)
 10133bc:	10800084 	addi	r2,r2,2
 10133c0:	1085883a 	add	r2,r2,r2
 10133c4:	1885883a 	add	r2,r3,r2
 10133c8:	e0ffff0b 	ldhu	r3,-4(fp)
 10133cc:	10c0000d 	sth	r3,0(r2)

	atomic_thread_fence(memory_order_seq_cst);
 10133d0:	0001b03a 	sync

	vq->vq_ring.avail->idx++;
 10133d4:	e0bffe17 	ldw	r2,-8(fp)
 10133d8:	10800717 	ldw	r2,28(r2)
 10133dc:	10c0008b 	ldhu	r3,2(r2)
 10133e0:	18c00044 	addi	r3,r3,1
 10133e4:	10c0008d 	sth	r3,2(r2)

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 10133e8:	e0bffe17 	ldw	r2,-8(fp)
 10133ec:	1080098b 	ldhu	r2,38(r2)
 10133f0:	10800044 	addi	r2,r2,1
 10133f4:	1007883a 	mov	r3,r2
 10133f8:	e0bffe17 	ldw	r2,-8(fp)
 10133fc:	10c0098d 	sth	r3,38(r2)
}
 1013400:	0001883a 	nop
 1013404:	e037883a 	mov	sp,fp
 1013408:	df000017 	ldw	fp,0(sp)
 101340c:	dec00104 	addi	sp,sp,4
 1013410:	f800283a 	ret

01013414 <vq_ring_enable_interrupt>:
 *
 * vq_ring_enable_interrupt
 *
 */
static int vq_ring_enable_interrupt(struct virtqueue *vq, uint16_t ndesc)
{
 1013414:	defffc04 	addi	sp,sp,-16
 1013418:	dfc00315 	stw	ra,12(sp)
 101341c:	df000215 	stw	fp,8(sp)
 1013420:	df000204 	addi	fp,sp,8
 1013424:	e13ffe15 	stw	r4,-8(fp)
 1013428:	2805883a 	mov	r2,r5
 101342c:	e0bfff0d 	sth	r2,-4(fp)
	/*
	 * Enable interrupts, making sure we get the latest index of
	 * what's already been consumed.
	 */
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1013430:	e0bffe17 	ldw	r2,-8(fp)
 1013434:	11000017 	ldw	r4,0(r2)
 1013438:	20800317 	ldw	r2,12(r4)
 101343c:	20c00417 	ldw	r3,16(r4)
 1013440:	1188002c 	andhi	r6,r2,8192
 1013444:	180e703a 	and	r7,r3,zero
 1013448:	3005883a 	mov	r2,r6
 101344c:	11c4b03a 	or	r2,r2,r7
 1013450:	10002226 	beq	r2,zero,10134dc <vq_ring_enable_interrupt+0xc8>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013454:	e0bffe17 	ldw	r2,-8(fp)
 1013458:	10800017 	ldw	r2,0(r2)
 101345c:	10800517 	ldw	r2,20(r2)
 1013460:	10000c1e 	bne	r2,zero,1013494 <vq_ring_enable_interrupt+0x80>
			vring_used_event(&vq->vq_ring) = vq->vq_used_cons_idx + ndesc;
 1013464:	e0bffe17 	ldw	r2,-8(fp)
 1013468:	10c00717 	ldw	r3,28(r2)
 101346c:	e0bffe17 	ldw	r2,-8(fp)
 1013470:	10800517 	ldw	r2,20(r2)
 1013474:	e13ffe17 	ldw	r4,-8(fp)
 1013478:	21400b8b 	ldhu	r5,46(r4)
 101347c:	e13fff0b 	ldhu	r4,-4(fp)
 1013480:	2909883a 	add	r4,r5,r4
 1013484:	10800084 	addi	r2,r2,2
 1013488:	1085883a 	add	r2,r2,r2
 101348c:	1885883a 	add	r2,r3,r2
 1013490:	1100000d 	sth	r4,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1013494:	e0bffe17 	ldw	r2,-8(fp)
 1013498:	10800017 	ldw	r2,0(r2)
 101349c:	10800517 	ldw	r2,20(r2)
 10134a0:	10800058 	cmpnei	r2,r2,1
 10134a4:	1000261e 	bne	r2,zero,1013540 <vq_ring_enable_interrupt+0x12c>
			vring_avail_event(&vq->vq_ring) = vq->vq_available_idx + ndesc;
 10134a8:	e0bffe17 	ldw	r2,-8(fp)
 10134ac:	10c00817 	ldw	r3,32(r2)
 10134b0:	e0bffe17 	ldw	r2,-8(fp)
 10134b4:	10800517 	ldw	r2,20(r2)
 10134b8:	e13ffe17 	ldw	r4,-8(fp)
 10134bc:	21400c0b 	ldhu	r5,48(r4)
 10134c0:	e13fff0b 	ldhu	r4,-4(fp)
 10134c4:	2909883a 	add	r4,r5,r4
 10134c8:	100490fa 	slli	r2,r2,3
 10134cc:	1885883a 	add	r2,r3,r2
 10134d0:	10800104 	addi	r2,r2,4
 10134d4:	1100000d 	sth	r4,0(r2)
 10134d8:	00001906 	br	1013540 <vq_ring_enable_interrupt+0x12c>
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 10134dc:	e0bffe17 	ldw	r2,-8(fp)
 10134e0:	10800017 	ldw	r2,0(r2)
 10134e4:	10800517 	ldw	r2,20(r2)
 10134e8:	1000081e 	bne	r2,zero,101350c <vq_ring_enable_interrupt+0xf8>
			vq->vq_ring.avail->flags &= ~VRING_AVAIL_F_NO_INTERRUPT;
 10134ec:	e0bffe17 	ldw	r2,-8(fp)
 10134f0:	10800717 	ldw	r2,28(r2)
 10134f4:	e0fffe17 	ldw	r3,-8(fp)
 10134f8:	18c00717 	ldw	r3,28(r3)
 10134fc:	1900000b 	ldhu	r4,0(r3)
 1013500:	00ffff84 	movi	r3,-2
 1013504:	20c6703a 	and	r3,r4,r3
 1013508:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 101350c:	e0bffe17 	ldw	r2,-8(fp)
 1013510:	10800017 	ldw	r2,0(r2)
 1013514:	10800517 	ldw	r2,20(r2)
 1013518:	10800058 	cmpnei	r2,r2,1
 101351c:	1000081e 	bne	r2,zero,1013540 <vq_ring_enable_interrupt+0x12c>
			vq->vq_ring.used->flags &= ~VRING_USED_F_NO_NOTIFY;
 1013520:	e0bffe17 	ldw	r2,-8(fp)
 1013524:	10800817 	ldw	r2,32(r2)
 1013528:	e0fffe17 	ldw	r3,-8(fp)
 101352c:	18c00817 	ldw	r3,32(r3)
 1013530:	1900000b 	ldhu	r4,0(r3)
 1013534:	00ffff84 	movi	r3,-2
 1013538:	20c6703a 	and	r3,r4,r3
 101353c:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_MASTER_ONLY*/
	}

	atomic_thread_fence(memory_order_seq_cst);
 1013540:	0001b03a 	sync
	 * Enough items may have already been consumed to meet our threshold
	 * since we last checked. Let our caller know so it processes the new
	 * entries.
	 */
#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1013544:	e0bffe17 	ldw	r2,-8(fp)
 1013548:	10800017 	ldw	r2,0(r2)
 101354c:	10800517 	ldw	r2,20(r2)
 1013550:	1000071e 	bne	r2,zero,1013570 <vq_ring_enable_interrupt+0x15c>
		if (virtqueue_nused(vq) > ndesc) {
 1013554:	e13ffe17 	ldw	r4,-8(fp)
 1013558:	10138040 	call	1013804 <virtqueue_nused>
 101355c:	1007883a 	mov	r3,r2
 1013560:	e0bfff0b 	ldhu	r2,-4(fp)
 1013564:	10c0020e 	bge	r2,r3,1013570 <vq_ring_enable_interrupt+0x15c>
			return 1;
 1013568:	00800044 	movi	r2,1
 101356c:	00000d06 	br	10135a4 <vq_ring_enable_interrupt+0x190>
		}
	}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 1013570:	e0bffe17 	ldw	r2,-8(fp)
 1013574:	10800017 	ldw	r2,0(r2)
 1013578:	10800517 	ldw	r2,20(r2)
 101357c:	10800058 	cmpnei	r2,r2,1
 1013580:	1000071e 	bne	r2,zero,10135a0 <vq_ring_enable_interrupt+0x18c>
		if (virtqueue_navail(vq) > ndesc) {
 1013584:	e13ffe17 	ldw	r4,-8(fp)
 1013588:	101384c0 	call	101384c <virtqueue_navail>
 101358c:	1007883a 	mov	r3,r2
 1013590:	e0bfff0b 	ldhu	r2,-4(fp)
 1013594:	10c0020e 	bge	r2,r3,10135a0 <vq_ring_enable_interrupt+0x18c>
			return 1;
 1013598:	00800044 	movi	r2,1
 101359c:	00000106 	br	10135a4 <vq_ring_enable_interrupt+0x190>
		}
	}
#endif /*VIRTIO_MASTER_ONLY*/

	return 0;
 10135a0:	0005883a 	mov	r2,zero
}
 10135a4:	e037883a 	mov	sp,fp
 10135a8:	dfc00117 	ldw	ra,4(sp)
 10135ac:	df000017 	ldw	fp,0(sp)
 10135b0:	dec00204 	addi	sp,sp,8
 10135b4:	f800283a 	ret

010135b8 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 10135b8:	defffd04 	addi	sp,sp,-12
 10135bc:	dfc00215 	stw	ra,8(sp)
 10135c0:	df000115 	stw	fp,4(sp)
 10135c4:	df000104 	addi	fp,sp,4
 10135c8:	e13fff15 	stw	r4,-4(fp)
	atomic_thread_fence(memory_order_seq_cst);
 10135cc:	0001b03a 	sync
	if (vq->callback)
 10135d0:	e0bfff17 	ldw	r2,-4(fp)
 10135d4:	10800317 	ldw	r2,12(r2)
 10135d8:	10000426 	beq	r2,zero,10135ec <virtqueue_notification+0x34>
		vq->callback(vq);
 10135dc:	e0bfff17 	ldw	r2,-4(fp)
 10135e0:	10800317 	ldw	r2,12(r2)
 10135e4:	e13fff17 	ldw	r4,-4(fp)
 10135e8:	103ee83a 	callr	r2
}
 10135ec:	0001883a 	nop
 10135f0:	e037883a 	mov	sp,fp
 10135f4:	dfc00117 	ldw	ra,4(sp)
 10135f8:	df000017 	ldw	fp,0(sp)
 10135fc:	dec00204 	addi	sp,sp,8
 1013600:	f800283a 	ret

01013604 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
 1013604:	defffb04 	addi	sp,sp,-20
 1013608:	dfc00415 	stw	ra,16(sp)
 101360c:	df000315 	stw	fp,12(sp)
 1013610:	df000304 	addi	fp,sp,12
 1013614:	e13fff15 	stw	r4,-4(fp)
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1013618:	e0bfff17 	ldw	r2,-4(fp)
 101361c:	11000017 	ldw	r4,0(r2)
 1013620:	20800317 	ldw	r2,12(r4)
 1013624:	20c00417 	ldw	r3,16(r4)
 1013628:	1148002c 	andhi	r5,r2,8192
 101362c:	180c703a 	and	r6,r3,zero
 1013630:	2805883a 	mov	r2,r5
 1013634:	1184b03a 	or	r2,r2,r6
 1013638:	10004126 	beq	r2,zero,1013740 <vq_ring_must_notify+0x13c>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 101363c:	e0bfff17 	ldw	r2,-4(fp)
 1013640:	10800017 	ldw	r2,0(r2)
 1013644:	10800517 	ldw	r2,20(r2)
 1013648:	10001c1e 	bne	r2,zero,10136bc <vq_ring_must_notify+0xb8>
			new_idx = vq->vq_ring.avail->idx;
 101364c:	e0bfff17 	ldw	r2,-4(fp)
 1013650:	10800717 	ldw	r2,28(r2)
 1013654:	1080008b 	ldhu	r2,2(r2)
 1013658:	e0bffd0d 	sth	r2,-12(fp)
			prev_idx = new_idx - vq->vq_queued_cnt;
 101365c:	e0bfff17 	ldw	r2,-4(fp)
 1013660:	1080098b 	ldhu	r2,38(r2)
 1013664:	e0fffd0b 	ldhu	r3,-12(fp)
 1013668:	1885c83a 	sub	r2,r3,r2
 101366c:	e0bffd8d 	sth	r2,-10(fp)
			event_idx = vring_avail_event(&vq->vq_ring);
 1013670:	e0bfff17 	ldw	r2,-4(fp)
 1013674:	10c00817 	ldw	r3,32(r2)
 1013678:	e0bfff17 	ldw	r2,-4(fp)
 101367c:	10800517 	ldw	r2,20(r2)
 1013680:	100490fa 	slli	r2,r2,3
 1013684:	1885883a 	add	r2,r3,r2
 1013688:	10800104 	addi	r2,r2,4
 101368c:	1080000b 	ldhu	r2,0(r2)
 1013690:	e0bffe0d 	sth	r2,-8(fp)
			return vring_need_event(event_idx, new_idx, prev_idx) != 0;
 1013694:	e0bffe0b 	ldhu	r2,-8(fp)
 1013698:	e0fffd0b 	ldhu	r3,-12(fp)
 101369c:	e13ffd8b 	ldhu	r4,-10(fp)
 10136a0:	200d883a 	mov	r6,r4
 10136a4:	180b883a 	mov	r5,r3
 10136a8:	1009883a 	mov	r4,r2
 10136ac:	10122e00 	call	10122e0 <vring_need_event>
 10136b0:	1004c03a 	cmpne	r2,r2,zero
 10136b4:	10803fcc 	andi	r2,r2,255
 10136b8:	00003b06 	br	10137a8 <vq_ring_must_notify+0x1a4>
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 10136bc:	e0bfff17 	ldw	r2,-4(fp)
 10136c0:	10800017 	ldw	r2,0(r2)
 10136c4:	10800517 	ldw	r2,20(r2)
 10136c8:	10800058 	cmpnei	r2,r2,1
 10136cc:	1000351e 	bne	r2,zero,10137a4 <vq_ring_must_notify+0x1a0>
			new_idx = vq->vq_ring.used->idx;
 10136d0:	e0bfff17 	ldw	r2,-4(fp)
 10136d4:	10800817 	ldw	r2,32(r2)
 10136d8:	1080008b 	ldhu	r2,2(r2)
 10136dc:	e0bffd0d 	sth	r2,-12(fp)
			prev_idx = new_idx - vq->vq_queued_cnt;
 10136e0:	e0bfff17 	ldw	r2,-4(fp)
 10136e4:	1080098b 	ldhu	r2,38(r2)
 10136e8:	e0fffd0b 	ldhu	r3,-12(fp)
 10136ec:	1885c83a 	sub	r2,r3,r2
 10136f0:	e0bffd8d 	sth	r2,-10(fp)
			event_idx = vring_used_event(&vq->vq_ring);
 10136f4:	e0bfff17 	ldw	r2,-4(fp)
 10136f8:	10c00717 	ldw	r3,28(r2)
 10136fc:	e0bfff17 	ldw	r2,-4(fp)
 1013700:	10800517 	ldw	r2,20(r2)
 1013704:	10800084 	addi	r2,r2,2
 1013708:	1085883a 	add	r2,r2,r2
 101370c:	1885883a 	add	r2,r3,r2
 1013710:	1080000b 	ldhu	r2,0(r2)
 1013714:	e0bffe0d 	sth	r2,-8(fp)
			return vring_need_event(event_idx, new_idx, prev_idx) != 0;
 1013718:	e0bffe0b 	ldhu	r2,-8(fp)
 101371c:	e0fffd0b 	ldhu	r3,-12(fp)
 1013720:	e13ffd8b 	ldhu	r4,-10(fp)
 1013724:	200d883a 	mov	r6,r4
 1013728:	180b883a 	mov	r5,r3
 101372c:	1009883a 	mov	r4,r2
 1013730:	10122e00 	call	10122e0 <vring_need_event>
 1013734:	1004c03a 	cmpne	r2,r2,zero
 1013738:	10803fcc 	andi	r2,r2,255
 101373c:	00001a06 	br	10137a8 <vq_ring_must_notify+0x1a4>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013740:	e0bfff17 	ldw	r2,-4(fp)
 1013744:	10800017 	ldw	r2,0(r2)
 1013748:	10800517 	ldw	r2,20(r2)
 101374c:	1000081e 	bne	r2,zero,1013770 <vq_ring_must_notify+0x16c>
			return (vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0;
 1013750:	e0bfff17 	ldw	r2,-4(fp)
 1013754:	10800817 	ldw	r2,32(r2)
 1013758:	1080000b 	ldhu	r2,0(r2)
 101375c:	10bfffcc 	andi	r2,r2,65535
 1013760:	1080004c 	andi	r2,r2,1
 1013764:	1005003a 	cmpeq	r2,r2,zero
 1013768:	10803fcc 	andi	r2,r2,255
 101376c:	00000e06 	br	10137a8 <vq_ring_must_notify+0x1a4>
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1013770:	e0bfff17 	ldw	r2,-4(fp)
 1013774:	10800017 	ldw	r2,0(r2)
 1013778:	10800517 	ldw	r2,20(r2)
 101377c:	10800058 	cmpnei	r2,r2,1
 1013780:	1000081e 	bne	r2,zero,10137a4 <vq_ring_must_notify+0x1a0>
			return (vq->vq_ring.avail->flags & VRING_AVAIL_F_NO_INTERRUPT) == 0;
 1013784:	e0bfff17 	ldw	r2,-4(fp)
 1013788:	10800717 	ldw	r2,28(r2)
 101378c:	1080000b 	ldhu	r2,0(r2)
 1013790:	10bfffcc 	andi	r2,r2,65535
 1013794:	1080004c 	andi	r2,r2,1
 1013798:	1005003a 	cmpeq	r2,r2,zero
 101379c:	10803fcc 	andi	r2,r2,255
 10137a0:	00000106 	br	10137a8 <vq_ring_must_notify+0x1a4>
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
 10137a4:	0005883a 	mov	r2,zero
}
 10137a8:	e037883a 	mov	sp,fp
 10137ac:	dfc00117 	ldw	ra,4(sp)
 10137b0:	df000017 	ldw	fp,0(sp)
 10137b4:	dec00204 	addi	sp,sp,8
 10137b8:	f800283a 	ret

010137bc <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
 10137bc:	defffd04 	addi	sp,sp,-12
 10137c0:	dfc00215 	stw	ra,8(sp)
 10137c4:	df000115 	stw	fp,4(sp)
 10137c8:	df000104 	addi	fp,sp,4
 10137cc:	e13fff15 	stw	r4,-4(fp)
	if (vq->notify)
 10137d0:	e0bfff17 	ldw	r2,-4(fp)
 10137d4:	10800417 	ldw	r2,16(r2)
 10137d8:	10000426 	beq	r2,zero,10137ec <vq_ring_notify+0x30>
		vq->notify(vq);
 10137dc:	e0bfff17 	ldw	r2,-4(fp)
 10137e0:	10800417 	ldw	r2,16(r2)
 10137e4:	e13fff17 	ldw	r4,-4(fp)
 10137e8:	103ee83a 	callr	r2
}
 10137ec:	0001883a 	nop
 10137f0:	e037883a 	mov	sp,fp
 10137f4:	dfc00117 	ldw	ra,4(sp)
 10137f8:	df000017 	ldw	fp,0(sp)
 10137fc:	dec00204 	addi	sp,sp,8
 1013800:	f800283a 	ret

01013804 <virtqueue_nused>:
 * virtqueue_nused
 *
 */
#ifndef VIRTIO_SLAVE_ONLY
static int virtqueue_nused(struct virtqueue *vq)
{
 1013804:	defffd04 	addi	sp,sp,-12
 1013808:	df000215 	stw	fp,8(sp)
 101380c:	df000204 	addi	fp,sp,8
 1013810:	e13fff15 	stw	r4,-4(fp)
	uint16_t used_idx, nused;

	used_idx = vq->vq_ring.used->idx;
 1013814:	e0bfff17 	ldw	r2,-4(fp)
 1013818:	10800817 	ldw	r2,32(r2)
 101381c:	1080008b 	ldhu	r2,2(r2)
 1013820:	e0bffe0d 	sth	r2,-8(fp)

	nused = (uint16_t)(used_idx - vq->vq_used_cons_idx);
 1013824:	e0bfff17 	ldw	r2,-4(fp)
 1013828:	10800b8b 	ldhu	r2,46(r2)
 101382c:	e0fffe0b 	ldhu	r3,-8(fp)
 1013830:	1885c83a 	sub	r2,r3,r2
 1013834:	e0bffe8d 	sth	r2,-6(fp)
	VQASSERT(vq, nused <= vq->vq_nentries, "used more than available");

	return nused;
 1013838:	e0bffe8b 	ldhu	r2,-6(fp)
}
 101383c:	e037883a 	mov	sp,fp
 1013840:	df000017 	ldw	fp,0(sp)
 1013844:	dec00104 	addi	sp,sp,4
 1013848:	f800283a 	ret

0101384c <virtqueue_navail>:
 * virtqueue_navail
 *
 */
#ifndef VIRTIO_MASTER_ONLY
static int virtqueue_navail(struct virtqueue *vq)
{
 101384c:	defffd04 	addi	sp,sp,-12
 1013850:	df000215 	stw	fp,8(sp)
 1013854:	df000204 	addi	fp,sp,8
 1013858:	e13fff15 	stw	r4,-4(fp)
	uint16_t avail_idx, navail;

	avail_idx = vq->vq_ring.avail->idx;
 101385c:	e0bfff17 	ldw	r2,-4(fp)
 1013860:	10800717 	ldw	r2,28(r2)
 1013864:	1080008b 	ldhu	r2,2(r2)
 1013868:	e0bffe0d 	sth	r2,-8(fp)

	navail = (uint16_t)(avail_idx - vq->vq_available_idx);
 101386c:	e0bfff17 	ldw	r2,-4(fp)
 1013870:	10800c0b 	ldhu	r2,48(r2)
 1013874:	e0fffe0b 	ldhu	r3,-8(fp)
 1013878:	1885c83a 	sub	r2,r3,r2
 101387c:	e0bffe8d 	sth	r2,-6(fp)
	VQASSERT(vq, navail <= vq->vq_nentries, "avail more than available");

	return navail;
 1013880:	e0bffe8b 	ldhu	r2,-6(fp)
}
 1013884:	e037883a 	mov	sp,fp
 1013888:	df000017 	ldw	fp,0(sp)
 101388c:	dec00104 	addi	sp,sp,4
 1013890:	f800283a 	ret

01013894 <__assert_func>:
 1013894:	008040f4 	movhi	r2,259
 1013898:	10a17104 	addi	r2,r2,-31292
 101389c:	10800017 	ldw	r2,0(r2)
 10138a0:	defffc04 	addi	sp,sp,-16
 10138a4:	dfc00315 	stw	ra,12(sp)
 10138a8:	2015883a 	mov	r10,r4
 10138ac:	2811883a 	mov	r8,r5
 10138b0:	3813883a 	mov	r9,r7
 10138b4:	11000317 	ldw	r4,12(r2)
 10138b8:	30000c26 	beq	r6,zero,10138ec <__assert_func+0x58>
 10138bc:	00c040b4 	movhi	r3,258
 10138c0:	18d7ee04 	addi	r3,r3,24504
 10138c4:	3005883a 	mov	r2,r6
 10138c8:	014040b4 	movhi	r5,258
 10138cc:	2957f204 	addi	r5,r5,24520
 10138d0:	500f883a 	mov	r7,r10
 10138d4:	480d883a 	mov	r6,r9
 10138d8:	d8c00115 	stw	r3,4(sp)
 10138dc:	da000015 	stw	r8,0(sp)
 10138e0:	d8800215 	stw	r2,8(sp)
 10138e4:	10139300 	call	1013930 <fiprintf>
 10138e8:	1016a880 	call	1016a88 <abort>
 10138ec:	00c040b4 	movhi	r3,258
 10138f0:	18d7f104 	addi	r3,r3,24516
 10138f4:	1805883a 	mov	r2,r3
 10138f8:	003ff306 	br	10138c8 <__alt_data_end+0xff0138c8>

010138fc <__assert>:
 10138fc:	deffff04 	addi	sp,sp,-4
 1013900:	300f883a 	mov	r7,r6
 1013904:	000d883a 	mov	r6,zero
 1013908:	dfc00015 	stw	ra,0(sp)
 101390c:	10138940 	call	1013894 <__assert_func>

01013910 <_fiprintf_r>:
 1013910:	defffe04 	addi	sp,sp,-8
 1013914:	dfc00015 	stw	ra,0(sp)
 1013918:	d9c00115 	stw	r7,4(sp)
 101391c:	d9c00104 	addi	r7,sp,4
 1013920:	1016a700 	call	1016a70 <_vfiprintf_r>
 1013924:	dfc00017 	ldw	ra,0(sp)
 1013928:	dec00204 	addi	sp,sp,8
 101392c:	f800283a 	ret

01013930 <fiprintf>:
 1013930:	defffd04 	addi	sp,sp,-12
 1013934:	2005883a 	mov	r2,r4
 1013938:	dfc00015 	stw	ra,0(sp)
 101393c:	d9800115 	stw	r6,4(sp)
 1013940:	d9c00215 	stw	r7,8(sp)
 1013944:	00c040f4 	movhi	r3,259
 1013948:	18e17104 	addi	r3,r3,-31292
 101394c:	19000017 	ldw	r4,0(r3)
 1013950:	280d883a 	mov	r6,r5
 1013954:	d9c00104 	addi	r7,sp,4
 1013958:	100b883a 	mov	r5,r2
 101395c:	1016a700 	call	1016a70 <_vfiprintf_r>
 1013960:	dfc00017 	ldw	ra,0(sp)
 1013964:	dec00304 	addi	sp,sp,12
 1013968:	f800283a 	ret

0101396c <memcmp>:
 101396c:	01c000c4 	movi	r7,3
 1013970:	3980192e 	bgeu	r7,r6,10139d8 <memcmp+0x6c>
 1013974:	2144b03a 	or	r2,r4,r5
 1013978:	11c4703a 	and	r2,r2,r7
 101397c:	10000f26 	beq	r2,zero,10139bc <memcmp+0x50>
 1013980:	20800003 	ldbu	r2,0(r4)
 1013984:	28c00003 	ldbu	r3,0(r5)
 1013988:	10c0151e 	bne	r2,r3,10139e0 <memcmp+0x74>
 101398c:	31bfff84 	addi	r6,r6,-2
 1013990:	01ffffc4 	movi	r7,-1
 1013994:	00000406 	br	10139a8 <memcmp+0x3c>
 1013998:	20800003 	ldbu	r2,0(r4)
 101399c:	28c00003 	ldbu	r3,0(r5)
 10139a0:	31bfffc4 	addi	r6,r6,-1
 10139a4:	10c00e1e 	bne	r2,r3,10139e0 <memcmp+0x74>
 10139a8:	21000044 	addi	r4,r4,1
 10139ac:	29400044 	addi	r5,r5,1
 10139b0:	31fff91e 	bne	r6,r7,1013998 <__alt_data_end+0xff013998>
 10139b4:	0005883a 	mov	r2,zero
 10139b8:	f800283a 	ret
 10139bc:	20c00017 	ldw	r3,0(r4)
 10139c0:	28800017 	ldw	r2,0(r5)
 10139c4:	18bfee1e 	bne	r3,r2,1013980 <__alt_data_end+0xff013980>
 10139c8:	31bfff04 	addi	r6,r6,-4
 10139cc:	21000104 	addi	r4,r4,4
 10139d0:	29400104 	addi	r5,r5,4
 10139d4:	39bff936 	bltu	r7,r6,10139bc <__alt_data_end+0xff0139bc>
 10139d8:	303fe91e 	bne	r6,zero,1013980 <__alt_data_end+0xff013980>
 10139dc:	003ff506 	br	10139b4 <__alt_data_end+0xff0139b4>
 10139e0:	10c5c83a 	sub	r2,r2,r3
 10139e4:	f800283a 	ret

010139e8 <memcpy>:
 10139e8:	defffd04 	addi	sp,sp,-12
 10139ec:	dfc00215 	stw	ra,8(sp)
 10139f0:	dc400115 	stw	r17,4(sp)
 10139f4:	dc000015 	stw	r16,0(sp)
 10139f8:	00c003c4 	movi	r3,15
 10139fc:	2005883a 	mov	r2,r4
 1013a00:	1980452e 	bgeu	r3,r6,1013b18 <memcpy+0x130>
 1013a04:	2906b03a 	or	r3,r5,r4
 1013a08:	18c000cc 	andi	r3,r3,3
 1013a0c:	1800441e 	bne	r3,zero,1013b20 <memcpy+0x138>
 1013a10:	347ffc04 	addi	r17,r6,-16
 1013a14:	8822d13a 	srli	r17,r17,4
 1013a18:	28c00104 	addi	r3,r5,4
 1013a1c:	23400104 	addi	r13,r4,4
 1013a20:	8820913a 	slli	r16,r17,4
 1013a24:	2b000204 	addi	r12,r5,8
 1013a28:	22c00204 	addi	r11,r4,8
 1013a2c:	84000504 	addi	r16,r16,20
 1013a30:	2a800304 	addi	r10,r5,12
 1013a34:	22400304 	addi	r9,r4,12
 1013a38:	2c21883a 	add	r16,r5,r16
 1013a3c:	2811883a 	mov	r8,r5
 1013a40:	200f883a 	mov	r7,r4
 1013a44:	41000017 	ldw	r4,0(r8)
 1013a48:	1fc00017 	ldw	ra,0(r3)
 1013a4c:	63c00017 	ldw	r15,0(r12)
 1013a50:	39000015 	stw	r4,0(r7)
 1013a54:	53800017 	ldw	r14,0(r10)
 1013a58:	6fc00015 	stw	ra,0(r13)
 1013a5c:	5bc00015 	stw	r15,0(r11)
 1013a60:	4b800015 	stw	r14,0(r9)
 1013a64:	18c00404 	addi	r3,r3,16
 1013a68:	39c00404 	addi	r7,r7,16
 1013a6c:	42000404 	addi	r8,r8,16
 1013a70:	6b400404 	addi	r13,r13,16
 1013a74:	63000404 	addi	r12,r12,16
 1013a78:	5ac00404 	addi	r11,r11,16
 1013a7c:	52800404 	addi	r10,r10,16
 1013a80:	4a400404 	addi	r9,r9,16
 1013a84:	1c3fef1e 	bne	r3,r16,1013a44 <__alt_data_end+0xff013a44>
 1013a88:	89c00044 	addi	r7,r17,1
 1013a8c:	380e913a 	slli	r7,r7,4
 1013a90:	310003cc 	andi	r4,r6,15
 1013a94:	02c000c4 	movi	r11,3
 1013a98:	11c7883a 	add	r3,r2,r7
 1013a9c:	29cb883a 	add	r5,r5,r7
 1013aa0:	5900212e 	bgeu	r11,r4,1013b28 <memcpy+0x140>
 1013aa4:	1813883a 	mov	r9,r3
 1013aa8:	2811883a 	mov	r8,r5
 1013aac:	200f883a 	mov	r7,r4
 1013ab0:	42800017 	ldw	r10,0(r8)
 1013ab4:	4a400104 	addi	r9,r9,4
 1013ab8:	39ffff04 	addi	r7,r7,-4
 1013abc:	4abfff15 	stw	r10,-4(r9)
 1013ac0:	42000104 	addi	r8,r8,4
 1013ac4:	59fffa36 	bltu	r11,r7,1013ab0 <__alt_data_end+0xff013ab0>
 1013ac8:	213fff04 	addi	r4,r4,-4
 1013acc:	2008d0ba 	srli	r4,r4,2
 1013ad0:	318000cc 	andi	r6,r6,3
 1013ad4:	21000044 	addi	r4,r4,1
 1013ad8:	2109883a 	add	r4,r4,r4
 1013adc:	2109883a 	add	r4,r4,r4
 1013ae0:	1907883a 	add	r3,r3,r4
 1013ae4:	290b883a 	add	r5,r5,r4
 1013ae8:	30000626 	beq	r6,zero,1013b04 <memcpy+0x11c>
 1013aec:	198d883a 	add	r6,r3,r6
 1013af0:	29c00003 	ldbu	r7,0(r5)
 1013af4:	18c00044 	addi	r3,r3,1
 1013af8:	29400044 	addi	r5,r5,1
 1013afc:	19ffffc5 	stb	r7,-1(r3)
 1013b00:	19bffb1e 	bne	r3,r6,1013af0 <__alt_data_end+0xff013af0>
 1013b04:	dfc00217 	ldw	ra,8(sp)
 1013b08:	dc400117 	ldw	r17,4(sp)
 1013b0c:	dc000017 	ldw	r16,0(sp)
 1013b10:	dec00304 	addi	sp,sp,12
 1013b14:	f800283a 	ret
 1013b18:	2007883a 	mov	r3,r4
 1013b1c:	003ff206 	br	1013ae8 <__alt_data_end+0xff013ae8>
 1013b20:	2007883a 	mov	r3,r4
 1013b24:	003ff106 	br	1013aec <__alt_data_end+0xff013aec>
 1013b28:	200d883a 	mov	r6,r4
 1013b2c:	003fee06 	br	1013ae8 <__alt_data_end+0xff013ae8>

01013b30 <memset>:
 1013b30:	20c000cc 	andi	r3,r4,3
 1013b34:	2005883a 	mov	r2,r4
 1013b38:	18004426 	beq	r3,zero,1013c4c <memset+0x11c>
 1013b3c:	31ffffc4 	addi	r7,r6,-1
 1013b40:	30004026 	beq	r6,zero,1013c44 <memset+0x114>
 1013b44:	2813883a 	mov	r9,r5
 1013b48:	200d883a 	mov	r6,r4
 1013b4c:	2007883a 	mov	r3,r4
 1013b50:	00000406 	br	1013b64 <memset+0x34>
 1013b54:	3a3fffc4 	addi	r8,r7,-1
 1013b58:	31800044 	addi	r6,r6,1
 1013b5c:	38003926 	beq	r7,zero,1013c44 <memset+0x114>
 1013b60:	400f883a 	mov	r7,r8
 1013b64:	18c00044 	addi	r3,r3,1
 1013b68:	32400005 	stb	r9,0(r6)
 1013b6c:	1a0000cc 	andi	r8,r3,3
 1013b70:	403ff81e 	bne	r8,zero,1013b54 <__alt_data_end+0xff013b54>
 1013b74:	010000c4 	movi	r4,3
 1013b78:	21c02d2e 	bgeu	r4,r7,1013c30 <memset+0x100>
 1013b7c:	29003fcc 	andi	r4,r5,255
 1013b80:	200c923a 	slli	r6,r4,8
 1013b84:	3108b03a 	or	r4,r6,r4
 1013b88:	200c943a 	slli	r6,r4,16
 1013b8c:	218cb03a 	or	r6,r4,r6
 1013b90:	010003c4 	movi	r4,15
 1013b94:	21c0182e 	bgeu	r4,r7,1013bf8 <memset+0xc8>
 1013b98:	3b3ffc04 	addi	r12,r7,-16
 1013b9c:	6018d13a 	srli	r12,r12,4
 1013ba0:	1a000104 	addi	r8,r3,4
 1013ba4:	1ac00204 	addi	r11,r3,8
 1013ba8:	6008913a 	slli	r4,r12,4
 1013bac:	1a800304 	addi	r10,r3,12
 1013bb0:	1813883a 	mov	r9,r3
 1013bb4:	21000504 	addi	r4,r4,20
 1013bb8:	1909883a 	add	r4,r3,r4
 1013bbc:	49800015 	stw	r6,0(r9)
 1013bc0:	41800015 	stw	r6,0(r8)
 1013bc4:	59800015 	stw	r6,0(r11)
 1013bc8:	51800015 	stw	r6,0(r10)
 1013bcc:	42000404 	addi	r8,r8,16
 1013bd0:	4a400404 	addi	r9,r9,16
 1013bd4:	5ac00404 	addi	r11,r11,16
 1013bd8:	52800404 	addi	r10,r10,16
 1013bdc:	413ff71e 	bne	r8,r4,1013bbc <__alt_data_end+0xff013bbc>
 1013be0:	63000044 	addi	r12,r12,1
 1013be4:	6018913a 	slli	r12,r12,4
 1013be8:	39c003cc 	andi	r7,r7,15
 1013bec:	010000c4 	movi	r4,3
 1013bf0:	1b07883a 	add	r3,r3,r12
 1013bf4:	21c00e2e 	bgeu	r4,r7,1013c30 <memset+0x100>
 1013bf8:	1813883a 	mov	r9,r3
 1013bfc:	3811883a 	mov	r8,r7
 1013c00:	010000c4 	movi	r4,3
 1013c04:	49800015 	stw	r6,0(r9)
 1013c08:	423fff04 	addi	r8,r8,-4
 1013c0c:	4a400104 	addi	r9,r9,4
 1013c10:	223ffc36 	bltu	r4,r8,1013c04 <__alt_data_end+0xff013c04>
 1013c14:	393fff04 	addi	r4,r7,-4
 1013c18:	2008d0ba 	srli	r4,r4,2
 1013c1c:	39c000cc 	andi	r7,r7,3
 1013c20:	21000044 	addi	r4,r4,1
 1013c24:	2109883a 	add	r4,r4,r4
 1013c28:	2109883a 	add	r4,r4,r4
 1013c2c:	1907883a 	add	r3,r3,r4
 1013c30:	38000526 	beq	r7,zero,1013c48 <memset+0x118>
 1013c34:	19cf883a 	add	r7,r3,r7
 1013c38:	19400005 	stb	r5,0(r3)
 1013c3c:	18c00044 	addi	r3,r3,1
 1013c40:	38fffd1e 	bne	r7,r3,1013c38 <__alt_data_end+0xff013c38>
 1013c44:	f800283a 	ret
 1013c48:	f800283a 	ret
 1013c4c:	2007883a 	mov	r3,r4
 1013c50:	300f883a 	mov	r7,r6
 1013c54:	003fc706 	br	1013b74 <__alt_data_end+0xff013b74>

01013c58 <_puts_r>:
 1013c58:	defff604 	addi	sp,sp,-40
 1013c5c:	dc000715 	stw	r16,28(sp)
 1013c60:	2021883a 	mov	r16,r4
 1013c64:	2809883a 	mov	r4,r5
 1013c68:	dc400815 	stw	r17,32(sp)
 1013c6c:	dfc00915 	stw	ra,36(sp)
 1013c70:	2823883a 	mov	r17,r5
 1013c74:	101463c0 	call	101463c <strlen>
 1013c78:	10c00044 	addi	r3,r2,1
 1013c7c:	d8800115 	stw	r2,4(sp)
 1013c80:	008040b4 	movhi	r2,258
 1013c84:	1097ff04 	addi	r2,r2,24572
 1013c88:	d8800215 	stw	r2,8(sp)
 1013c8c:	00800044 	movi	r2,1
 1013c90:	d8800315 	stw	r2,12(sp)
 1013c94:	00800084 	movi	r2,2
 1013c98:	dc400015 	stw	r17,0(sp)
 1013c9c:	d8c00615 	stw	r3,24(sp)
 1013ca0:	dec00415 	stw	sp,16(sp)
 1013ca4:	d8800515 	stw	r2,20(sp)
 1013ca8:	80000226 	beq	r16,zero,1013cb4 <_puts_r+0x5c>
 1013cac:	80800e17 	ldw	r2,56(r16)
 1013cb0:	10001426 	beq	r2,zero,1013d04 <_puts_r+0xac>
 1013cb4:	81400217 	ldw	r5,8(r16)
 1013cb8:	2880030b 	ldhu	r2,12(r5)
 1013cbc:	10c8000c 	andi	r3,r2,8192
 1013cc0:	1800061e 	bne	r3,zero,1013cdc <_puts_r+0x84>
 1013cc4:	29001917 	ldw	r4,100(r5)
 1013cc8:	00f7ffc4 	movi	r3,-8193
 1013ccc:	10880014 	ori	r2,r2,8192
 1013cd0:	20c6703a 	and	r3,r4,r3
 1013cd4:	2880030d 	sth	r2,12(r5)
 1013cd8:	28c01915 	stw	r3,100(r5)
 1013cdc:	d9800404 	addi	r6,sp,16
 1013ce0:	8009883a 	mov	r4,r16
 1013ce4:	10186c80 	call	10186c8 <__sfvwrite_r>
 1013ce8:	1000091e 	bne	r2,zero,1013d10 <_puts_r+0xb8>
 1013cec:	00800284 	movi	r2,10
 1013cf0:	dfc00917 	ldw	ra,36(sp)
 1013cf4:	dc400817 	ldw	r17,32(sp)
 1013cf8:	dc000717 	ldw	r16,28(sp)
 1013cfc:	dec00a04 	addi	sp,sp,40
 1013d00:	f800283a 	ret
 1013d04:	8009883a 	mov	r4,r16
 1013d08:	10186780 	call	1018678 <__sinit>
 1013d0c:	003fe906 	br	1013cb4 <__alt_data_end+0xff013cb4>
 1013d10:	00bfffc4 	movi	r2,-1
 1013d14:	003ff606 	br	1013cf0 <__alt_data_end+0xff013cf0>

01013d18 <puts>:
 1013d18:	008040f4 	movhi	r2,259
 1013d1c:	10a17104 	addi	r2,r2,-31292
 1013d20:	200b883a 	mov	r5,r4
 1013d24:	11000017 	ldw	r4,0(r2)
 1013d28:	1013c581 	jmpi	1013c58 <_puts_r>

01013d2c <_snprintf_r>:
 1013d2c:	30003116 	blt	r6,zero,1013df4 <_snprintf_r+0xc8>
 1013d30:	deffe404 	addi	sp,sp,-112
 1013d34:	00c08204 	movi	r3,520
 1013d38:	dc001a15 	stw	r16,104(sp)
 1013d3c:	3005883a 	mov	r2,r6
 1013d40:	dfc01b15 	stw	ra,108(sp)
 1013d44:	d8c0030d 	sth	r3,12(sp)
 1013d48:	d9400015 	stw	r5,0(sp)
 1013d4c:	d9400415 	stw	r5,16(sp)
 1013d50:	380d883a 	mov	r6,r7
 1013d54:	2021883a 	mov	r16,r4
 1013d58:	10001026 	beq	r2,zero,1013d9c <_snprintf_r+0x70>
 1013d5c:	10bfffc4 	addi	r2,r2,-1
 1013d60:	d8800215 	stw	r2,8(sp)
 1013d64:	d8800515 	stw	r2,20(sp)
 1013d68:	d9c01c04 	addi	r7,sp,112
 1013d6c:	00bfffc4 	movi	r2,-1
 1013d70:	d80b883a 	mov	r5,sp
 1013d74:	d880038d 	sth	r2,14(sp)
 1013d78:	10148900 	call	1014890 <___svfprintf_internal_r>
 1013d7c:	00ffffc4 	movi	r3,-1
 1013d80:	10c01316 	blt	r2,r3,1013dd0 <_snprintf_r+0xa4>
 1013d84:	d8c00017 	ldw	r3,0(sp)
 1013d88:	18000005 	stb	zero,0(r3)
 1013d8c:	dfc01b17 	ldw	ra,108(sp)
 1013d90:	dc001a17 	ldw	r16,104(sp)
 1013d94:	dec01c04 	addi	sp,sp,112
 1013d98:	f800283a 	ret
 1013d9c:	00bfffc4 	movi	r2,-1
 1013da0:	d9c01c04 	addi	r7,sp,112
 1013da4:	d80b883a 	mov	r5,sp
 1013da8:	d8000215 	stw	zero,8(sp)
 1013dac:	d8000515 	stw	zero,20(sp)
 1013db0:	d880038d 	sth	r2,14(sp)
 1013db4:	10148900 	call	1014890 <___svfprintf_internal_r>
 1013db8:	00ffffc4 	movi	r3,-1
 1013dbc:	10c00716 	blt	r2,r3,1013ddc <_snprintf_r+0xb0>
 1013dc0:	dfc01b17 	ldw	ra,108(sp)
 1013dc4:	dc001a17 	ldw	r16,104(sp)
 1013dc8:	dec01c04 	addi	sp,sp,112
 1013dcc:	f800283a 	ret
 1013dd0:	00c022c4 	movi	r3,139
 1013dd4:	80c00015 	stw	r3,0(r16)
 1013dd8:	003fea06 	br	1013d84 <__alt_data_end+0xff013d84>
 1013ddc:	00c022c4 	movi	r3,139
 1013de0:	80c00015 	stw	r3,0(r16)
 1013de4:	dfc01b17 	ldw	ra,108(sp)
 1013de8:	dc001a17 	ldw	r16,104(sp)
 1013dec:	dec01c04 	addi	sp,sp,112
 1013df0:	f800283a 	ret
 1013df4:	008022c4 	movi	r2,139
 1013df8:	20800015 	stw	r2,0(r4)
 1013dfc:	00bfffc4 	movi	r2,-1
 1013e00:	f800283a 	ret

01013e04 <snprintf>:
 1013e04:	deffe304 	addi	sp,sp,-116
 1013e08:	dfc01b15 	stw	ra,108(sp)
 1013e0c:	dc001a15 	stw	r16,104(sp)
 1013e10:	d9c01c15 	stw	r7,112(sp)
 1013e14:	008040f4 	movhi	r2,259
 1013e18:	10a17104 	addi	r2,r2,-31292
 1013e1c:	14000017 	ldw	r16,0(r2)
 1013e20:	28002d16 	blt	r5,zero,1013ed8 <snprintf+0xd4>
 1013e24:	00808204 	movi	r2,520
 1013e28:	d880030d 	sth	r2,12(sp)
 1013e2c:	d9000015 	stw	r4,0(sp)
 1013e30:	d9000415 	stw	r4,16(sp)
 1013e34:	28001126 	beq	r5,zero,1013e7c <snprintf+0x78>
 1013e38:	28bfffc4 	addi	r2,r5,-1
 1013e3c:	d8800215 	stw	r2,8(sp)
 1013e40:	d8800515 	stw	r2,20(sp)
 1013e44:	d9c01c04 	addi	r7,sp,112
 1013e48:	00bfffc4 	movi	r2,-1
 1013e4c:	d80b883a 	mov	r5,sp
 1013e50:	8009883a 	mov	r4,r16
 1013e54:	d880038d 	sth	r2,14(sp)
 1013e58:	10148900 	call	1014890 <___svfprintf_internal_r>
 1013e5c:	00ffffc4 	movi	r3,-1
 1013e60:	10c01416 	blt	r2,r3,1013eb4 <snprintf+0xb0>
 1013e64:	d8c00017 	ldw	r3,0(sp)
 1013e68:	18000005 	stb	zero,0(r3)
 1013e6c:	dfc01b17 	ldw	ra,108(sp)
 1013e70:	dc001a17 	ldw	r16,104(sp)
 1013e74:	dec01d04 	addi	sp,sp,116
 1013e78:	f800283a 	ret
 1013e7c:	00bfffc4 	movi	r2,-1
 1013e80:	d9c01c04 	addi	r7,sp,112
 1013e84:	d80b883a 	mov	r5,sp
 1013e88:	8009883a 	mov	r4,r16
 1013e8c:	d8000215 	stw	zero,8(sp)
 1013e90:	d8000515 	stw	zero,20(sp)
 1013e94:	d880038d 	sth	r2,14(sp)
 1013e98:	10148900 	call	1014890 <___svfprintf_internal_r>
 1013e9c:	00ffffc4 	movi	r3,-1
 1013ea0:	10c00716 	blt	r2,r3,1013ec0 <snprintf+0xbc>
 1013ea4:	dfc01b17 	ldw	ra,108(sp)
 1013ea8:	dc001a17 	ldw	r16,104(sp)
 1013eac:	dec01d04 	addi	sp,sp,116
 1013eb0:	f800283a 	ret
 1013eb4:	00c022c4 	movi	r3,139
 1013eb8:	80c00015 	stw	r3,0(r16)
 1013ebc:	003fe906 	br	1013e64 <__alt_data_end+0xff013e64>
 1013ec0:	00c022c4 	movi	r3,139
 1013ec4:	80c00015 	stw	r3,0(r16)
 1013ec8:	dfc01b17 	ldw	ra,108(sp)
 1013ecc:	dc001a17 	ldw	r16,104(sp)
 1013ed0:	dec01d04 	addi	sp,sp,116
 1013ed4:	f800283a 	ret
 1013ed8:	008022c4 	movi	r2,139
 1013edc:	80800015 	stw	r2,0(r16)
 1013ee0:	00bfffc4 	movi	r2,-1
 1013ee4:	003fef06 	br	1013ea4 <__alt_data_end+0xff013ea4>

01013ee8 <strcmp>:
 1013ee8:	2144b03a 	or	r2,r4,r5
 1013eec:	108000cc 	andi	r2,r2,3
 1013ef0:	1000171e 	bne	r2,zero,1013f50 <strcmp+0x68>
 1013ef4:	20800017 	ldw	r2,0(r4)
 1013ef8:	28c00017 	ldw	r3,0(r5)
 1013efc:	10c0141e 	bne	r2,r3,1013f50 <strcmp+0x68>
 1013f00:	027fbff4 	movhi	r9,65279
 1013f04:	4a7fbfc4 	addi	r9,r9,-257
 1013f08:	0086303a 	nor	r3,zero,r2
 1013f0c:	02202074 	movhi	r8,32897
 1013f10:	1245883a 	add	r2,r2,r9
 1013f14:	42202004 	addi	r8,r8,-32640
 1013f18:	10c4703a 	and	r2,r2,r3
 1013f1c:	1204703a 	and	r2,r2,r8
 1013f20:	10000226 	beq	r2,zero,1013f2c <strcmp+0x44>
 1013f24:	00002306 	br	1013fb4 <strcmp+0xcc>
 1013f28:	1000221e 	bne	r2,zero,1013fb4 <strcmp+0xcc>
 1013f2c:	21000104 	addi	r4,r4,4
 1013f30:	20c00017 	ldw	r3,0(r4)
 1013f34:	29400104 	addi	r5,r5,4
 1013f38:	29800017 	ldw	r6,0(r5)
 1013f3c:	1a4f883a 	add	r7,r3,r9
 1013f40:	00c4303a 	nor	r2,zero,r3
 1013f44:	3884703a 	and	r2,r7,r2
 1013f48:	1204703a 	and	r2,r2,r8
 1013f4c:	19bff626 	beq	r3,r6,1013f28 <__alt_data_end+0xff013f28>
 1013f50:	20800003 	ldbu	r2,0(r4)
 1013f54:	10c03fcc 	andi	r3,r2,255
 1013f58:	18c0201c 	xori	r3,r3,128
 1013f5c:	18ffe004 	addi	r3,r3,-128
 1013f60:	18000c26 	beq	r3,zero,1013f94 <strcmp+0xac>
 1013f64:	29800007 	ldb	r6,0(r5)
 1013f68:	19800326 	beq	r3,r6,1013f78 <strcmp+0x90>
 1013f6c:	00001306 	br	1013fbc <strcmp+0xd4>
 1013f70:	29800007 	ldb	r6,0(r5)
 1013f74:	11800b1e 	bne	r2,r6,1013fa4 <strcmp+0xbc>
 1013f78:	21000044 	addi	r4,r4,1
 1013f7c:	20c00003 	ldbu	r3,0(r4)
 1013f80:	29400044 	addi	r5,r5,1
 1013f84:	18803fcc 	andi	r2,r3,255
 1013f88:	1080201c 	xori	r2,r2,128
 1013f8c:	10bfe004 	addi	r2,r2,-128
 1013f90:	103ff71e 	bne	r2,zero,1013f70 <__alt_data_end+0xff013f70>
 1013f94:	0007883a 	mov	r3,zero
 1013f98:	28800003 	ldbu	r2,0(r5)
 1013f9c:	1885c83a 	sub	r2,r3,r2
 1013fa0:	f800283a 	ret
 1013fa4:	28800003 	ldbu	r2,0(r5)
 1013fa8:	18c03fcc 	andi	r3,r3,255
 1013fac:	1885c83a 	sub	r2,r3,r2
 1013fb0:	f800283a 	ret
 1013fb4:	0005883a 	mov	r2,zero
 1013fb8:	f800283a 	ret
 1013fbc:	10c03fcc 	andi	r3,r2,255
 1013fc0:	003ff506 	br	1013f98 <__alt_data_end+0xff013f98>

01013fc4 <_strerror_r>:
 1013fc4:	deffff04 	addi	sp,sp,-4
 1013fc8:	2807883a 	mov	r3,r5
 1013fcc:	dfc00015 	stw	ra,0(sp)
 1013fd0:	00802384 	movi	r2,142
 1013fd4:	300b883a 	mov	r5,r6
 1013fd8:	10c18736 	bltu	r2,r3,10145f8 <_strerror_r+0x634>
 1013fdc:	181090ba 	slli	r8,r3,2
 1013fe0:	00804074 	movhi	r2,257
 1013fe4:	108ffd04 	addi	r2,r2,16372
 1013fe8:	4085883a 	add	r2,r8,r2
 1013fec:	10800017 	ldw	r2,0(r2)
 1013ff0:	1000683a 	jmp	r2
 1013ff4:	01014230 	cmpltui	r4,zero,1288
 1013ff8:	010145ec 	andhi	r4,zero,1303
 1013ffc:	010145e0 	cmpeqi	r4,zero,1303
 1014000:	010145d4 	movui	r4,1303
 1014004:	010145c8 	cmpgei	r4,zero,1303
 1014008:	010145bc 	xorhi	r4,zero,1302
 101400c:	010145b0 	cmpltui	r4,zero,1302
 1014010:	010145a4 	muli	r4,zero,1302
 1014014:	01014598 	cmpnei	r4,zero,1302
 1014018:	0101458c 	andi	r4,zero,1302
 101401c:	01014580 	call	101458 <__alt_mem_sdram-0xefeba8>
 1014020:	01014574 	movhi	r4,1301
 1014024:	01014568 	cmpgeui	r4,zero,1301
 1014028:	0101455c 	xori	r4,zero,1301
 101402c:	01014550 	cmplti	r4,zero,1301
 1014030:	010145f8 	rdprs	r4,zero,1303
 1014034:	01014544 	movi	r4,1301
 1014038:	01014538 	rdprs	r4,zero,1300
 101403c:	0101452c 	andhi	r4,zero,1300
 1014040:	01014520 	cmpeqi	r4,zero,1300
 1014044:	01014514 	movui	r4,1300
 1014048:	01014508 	cmpgei	r4,zero,1300
 101404c:	010144fc 	xorhi	r4,zero,1299
 1014050:	010144f0 	cmpltui	r4,zero,1299
 1014054:	010144e4 	muli	r4,zero,1299
 1014058:	010144d8 	cmpnei	r4,zero,1299
 101405c:	010144cc 	andi	r4,zero,1299
 1014060:	010144c0 	call	10144c <__alt_mem_sdram-0xefebb4>
 1014064:	010144b4 	movhi	r4,1298
 1014068:	010144a8 	cmpgeui	r4,zero,1298
 101406c:	0101449c 	xori	r4,zero,1298
 1014070:	01014490 	cmplti	r4,zero,1298
 1014074:	01014484 	movi	r4,1298
 1014078:	01014478 	rdprs	r4,zero,1297
 101407c:	0101446c 	andhi	r4,zero,1297
 1014080:	01014460 	cmpeqi	r4,zero,1297
 1014084:	01014454 	movui	r4,1297
 1014088:	010145f8 	rdprs	r4,zero,1303
 101408c:	010145f8 	rdprs	r4,zero,1303
 1014090:	010145f8 	rdprs	r4,zero,1303
 1014094:	010145f8 	rdprs	r4,zero,1303
 1014098:	010145f8 	rdprs	r4,zero,1303
 101409c:	010145f8 	rdprs	r4,zero,1303
 10140a0:	010145f8 	rdprs	r4,zero,1303
 10140a4:	010145f8 	rdprs	r4,zero,1303
 10140a8:	01014448 	cmpgei	r4,zero,1297
 10140ac:	0101443c 	xorhi	r4,zero,1296
 10140b0:	010145f8 	rdprs	r4,zero,1303
 10140b4:	010145f8 	rdprs	r4,zero,1303
 10140b8:	010145f8 	rdprs	r4,zero,1303
 10140bc:	010145f8 	rdprs	r4,zero,1303
 10140c0:	010145f8 	rdprs	r4,zero,1303
 10140c4:	010145f8 	rdprs	r4,zero,1303
 10140c8:	010145f8 	rdprs	r4,zero,1303
 10140cc:	010145f8 	rdprs	r4,zero,1303
 10140d0:	010145f8 	rdprs	r4,zero,1303
 10140d4:	010145f8 	rdprs	r4,zero,1303
 10140d8:	010145f8 	rdprs	r4,zero,1303
 10140dc:	010145f8 	rdprs	r4,zero,1303
 10140e0:	010145f8 	rdprs	r4,zero,1303
 10140e4:	01014430 	cmpltui	r4,zero,1296
 10140e8:	01014424 	muli	r4,zero,1296
 10140ec:	01014418 	cmpnei	r4,zero,1296
 10140f0:	0101440c 	andi	r4,zero,1296
 10140f4:	010145f8 	rdprs	r4,zero,1303
 10140f8:	010145f8 	rdprs	r4,zero,1303
 10140fc:	010145f8 	rdprs	r4,zero,1303
 1014100:	01014400 	call	101440 <__alt_mem_sdram-0xefebc0>
 1014104:	010145f8 	rdprs	r4,zero,1303
 1014108:	010145f8 	rdprs	r4,zero,1303
 101410c:	010145f8 	rdprs	r4,zero,1303
 1014110:	010143f4 	movhi	r4,1295
 1014114:	010145f8 	rdprs	r4,zero,1303
 1014118:	010145f8 	rdprs	r4,zero,1303
 101411c:	010143e8 	cmpgeui	r4,zero,1295
 1014120:	010145f8 	rdprs	r4,zero,1303
 1014124:	010145f8 	rdprs	r4,zero,1303
 1014128:	010143dc 	xori	r4,zero,1295
 101412c:	010145f8 	rdprs	r4,zero,1303
 1014130:	010145f8 	rdprs	r4,zero,1303
 1014134:	010145f8 	rdprs	r4,zero,1303
 1014138:	010145f8 	rdprs	r4,zero,1303
 101413c:	010145f8 	rdprs	r4,zero,1303
 1014140:	010145f8 	rdprs	r4,zero,1303
 1014144:	010145f8 	rdprs	r4,zero,1303
 1014148:	010145f8 	rdprs	r4,zero,1303
 101414c:	010145f8 	rdprs	r4,zero,1303
 1014150:	010145f8 	rdprs	r4,zero,1303
 1014154:	010143d0 	cmplti	r4,zero,1295
 1014158:	010145f8 	rdprs	r4,zero,1303
 101415c:	010143c4 	movi	r4,1295
 1014160:	010143b8 	rdprs	r4,zero,1294
 1014164:	010143ac 	andhi	r4,zero,1294
 1014168:	010145f8 	rdprs	r4,zero,1303
 101416c:	010145f8 	rdprs	r4,zero,1303
 1014170:	010143a0 	cmpeqi	r4,zero,1294
 1014174:	010145f8 	rdprs	r4,zero,1303
 1014178:	010145f8 	rdprs	r4,zero,1303
 101417c:	010145f8 	rdprs	r4,zero,1303
 1014180:	010145f8 	rdprs	r4,zero,1303
 1014184:	010145f8 	rdprs	r4,zero,1303
 1014188:	010145f8 	rdprs	r4,zero,1303
 101418c:	010145f8 	rdprs	r4,zero,1303
 1014190:	010145f8 	rdprs	r4,zero,1303
 1014194:	01014394 	movui	r4,1294
 1014198:	01014388 	cmpgei	r4,zero,1294
 101419c:	0101437c 	xorhi	r4,zero,1293
 10141a0:	01014370 	cmpltui	r4,zero,1293
 10141a4:	01014364 	muli	r4,zero,1293
 10141a8:	01014358 	cmpnei	r4,zero,1293
 10141ac:	010145f8 	rdprs	r4,zero,1303
 10141b0:	0101434c 	andi	r4,zero,1293
 10141b4:	01014340 	call	101434 <__alt_mem_sdram-0xefebcc>
 10141b8:	01014334 	movhi	r4,1292
 10141bc:	01014328 	cmpgeui	r4,zero,1292
 10141c0:	0101431c 	xori	r4,zero,1292
 10141c4:	01014310 	cmplti	r4,zero,1292
 10141c8:	01014304 	movi	r4,1292
 10141cc:	010142f8 	rdprs	r4,zero,1291
 10141d0:	010142ec 	andhi	r4,zero,1291
 10141d4:	010142e0 	cmpeqi	r4,zero,1291
 10141d8:	010142d4 	movui	r4,1291
 10141dc:	010142c8 	cmpgei	r4,zero,1291
 10141e0:	010142bc 	xorhi	r4,zero,1290
 10141e4:	010145f8 	rdprs	r4,zero,1303
 10141e8:	010142b0 	cmpltui	r4,zero,1290
 10141ec:	010142a4 	muli	r4,zero,1290
 10141f0:	01014298 	cmpnei	r4,zero,1290
 10141f4:	0101428c 	andi	r4,zero,1290
 10141f8:	010145f8 	rdprs	r4,zero,1303
 10141fc:	010145f8 	rdprs	r4,zero,1303
 1014200:	010145f8 	rdprs	r4,zero,1303
 1014204:	010145f8 	rdprs	r4,zero,1303
 1014208:	010145f8 	rdprs	r4,zero,1303
 101420c:	01014280 	call	101428 <__alt_mem_sdram-0xefebd8>
 1014210:	010145f8 	rdprs	r4,zero,1303
 1014214:	010145f8 	rdprs	r4,zero,1303
 1014218:	010145f8 	rdprs	r4,zero,1303
 101421c:	01014274 	movhi	r4,1289
 1014220:	01014268 	cmpgeui	r4,zero,1289
 1014224:	0101425c 	xori	r4,zero,1289
 1014228:	01014250 	cmplti	r4,zero,1289
 101422c:	01014244 	movi	r4,1289
 1014230:	008040b4 	movhi	r2,258
 1014234:	10980004 	addi	r2,r2,24576
 1014238:	dfc00017 	ldw	ra,0(sp)
 101423c:	dec00104 	addi	sp,sp,4
 1014240:	f800283a 	ret
 1014244:	008040b4 	movhi	r2,258
 1014248:	10999d04 	addi	r2,r2,26228
 101424c:	003ffa06 	br	1014238 <__alt_data_end+0xff014238>
 1014250:	008040b4 	movhi	r2,258
 1014254:	10999704 	addi	r2,r2,26204
 1014258:	003ff706 	br	1014238 <__alt_data_end+0xff014238>
 101425c:	008040b4 	movhi	r2,258
 1014260:	10999204 	addi	r2,r2,26184
 1014264:	003ff406 	br	1014238 <__alt_data_end+0xff014238>
 1014268:	008040b4 	movhi	r2,258
 101426c:	1099ab04 	addi	r2,r2,26284
 1014270:	003ff106 	br	1014238 <__alt_data_end+0xff014238>
 1014274:	008040b4 	movhi	r2,258
 1014278:	1098e904 	addi	r2,r2,25508
 101427c:	003fee06 	br	1014238 <__alt_data_end+0xff014238>
 1014280:	008040b4 	movhi	r2,258
 1014284:	1098b704 	addi	r2,r2,25308
 1014288:	003feb06 	br	1014238 <__alt_data_end+0xff014238>
 101428c:	008040b4 	movhi	r2,258
 1014290:	10998504 	addi	r2,r2,26132
 1014294:	003fe806 	br	1014238 <__alt_data_end+0xff014238>
 1014298:	008040b4 	movhi	r2,258
 101429c:	10998b04 	addi	r2,r2,26156
 10142a0:	003fe506 	br	1014238 <__alt_data_end+0xff014238>
 10142a4:	008040b4 	movhi	r2,258
 10142a8:	10988604 	addi	r2,r2,25112
 10142ac:	003fe206 	br	1014238 <__alt_data_end+0xff014238>
 10142b0:	008040b4 	movhi	r2,258
 10142b4:	10997604 	addi	r2,r2,26072
 10142b8:	003fdf06 	br	1014238 <__alt_data_end+0xff014238>
 10142bc:	008040b4 	movhi	r2,258
 10142c0:	10991304 	addi	r2,r2,25676
 10142c4:	003fdc06 	br	1014238 <__alt_data_end+0xff014238>
 10142c8:	008040b4 	movhi	r2,258
 10142cc:	1099b504 	addi	r2,r2,26324
 10142d0:	003fd906 	br	1014238 <__alt_data_end+0xff014238>
 10142d4:	008040b4 	movhi	r2,258
 10142d8:	10983804 	addi	r2,r2,24800
 10142dc:	003fd606 	br	1014238 <__alt_data_end+0xff014238>
 10142e0:	008040b4 	movhi	r2,258
 10142e4:	10982a04 	addi	r2,r2,24744
 10142e8:	003fd306 	br	1014238 <__alt_data_end+0xff014238>
 10142ec:	008040b4 	movhi	r2,258
 10142f0:	10986c04 	addi	r2,r2,25008
 10142f4:	003fd006 	br	1014238 <__alt_data_end+0xff014238>
 10142f8:	008040b4 	movhi	r2,258
 10142fc:	1098ac04 	addi	r2,r2,25264
 1014300:	003fcd06 	br	1014238 <__alt_data_end+0xff014238>
 1014304:	008040b4 	movhi	r2,258
 1014308:	10986804 	addi	r2,r2,24992
 101430c:	003fca06 	br	1014238 <__alt_data_end+0xff014238>
 1014310:	008040b4 	movhi	r2,258
 1014314:	1099ba04 	addi	r2,r2,26344
 1014318:	003fc706 	br	1014238 <__alt_data_end+0xff014238>
 101431c:	008040b4 	movhi	r2,258
 1014320:	10987d04 	addi	r2,r2,25076
 1014324:	003fc406 	br	1014238 <__alt_data_end+0xff014238>
 1014328:	008040b4 	movhi	r2,258
 101432c:	1098f204 	addi	r2,r2,25544
 1014330:	003fc106 	br	1014238 <__alt_data_end+0xff014238>
 1014334:	008040b4 	movhi	r2,258
 1014338:	10997c04 	addi	r2,r2,26096
 101433c:	003fbe06 	br	1014238 <__alt_data_end+0xff014238>
 1014340:	008040b4 	movhi	r2,258
 1014344:	10997004 	addi	r2,r2,26048
 1014348:	003fbb06 	br	1014238 <__alt_data_end+0xff014238>
 101434c:	008040b4 	movhi	r2,258
 1014350:	10996404 	addi	r2,r2,26000
 1014354:	003fb806 	br	1014238 <__alt_data_end+0xff014238>
 1014358:	008040b4 	movhi	r2,258
 101435c:	10995e04 	addi	r2,r2,25976
 1014360:	003fb506 	br	1014238 <__alt_data_end+0xff014238>
 1014364:	008040b4 	movhi	r2,258
 1014368:	10995604 	addi	r2,r2,25944
 101436c:	003fb206 	br	1014238 <__alt_data_end+0xff014238>
 1014370:	008040b4 	movhi	r2,258
 1014374:	10994e04 	addi	r2,r2,25912
 1014378:	003faf06 	br	1014238 <__alt_data_end+0xff014238>
 101437c:	008040b4 	movhi	r2,258
 1014380:	10994204 	addi	r2,r2,25864
 1014384:	003fac06 	br	1014238 <__alt_data_end+0xff014238>
 1014388:	008040b4 	movhi	r2,258
 101438c:	10993904 	addi	r2,r2,25828
 1014390:	003fa906 	br	1014238 <__alt_data_end+0xff014238>
 1014394:	008040b4 	movhi	r2,258
 1014398:	10996904 	addi	r2,r2,26020
 101439c:	003fa606 	br	1014238 <__alt_data_end+0xff014238>
 10143a0:	008040b4 	movhi	r2,258
 10143a4:	1099a204 	addi	r2,r2,26248
 10143a8:	003fa306 	br	1014238 <__alt_data_end+0xff014238>
 10143ac:	008040b4 	movhi	r2,258
 10143b0:	10993304 	addi	r2,r2,25804
 10143b4:	003fa006 	br	1014238 <__alt_data_end+0xff014238>
 10143b8:	008040b4 	movhi	r2,258
 10143bc:	10992c04 	addi	r2,r2,25776
 10143c0:	003f9d06 	br	1014238 <__alt_data_end+0xff014238>
 10143c4:	008040b4 	movhi	r2,258
 10143c8:	10992704 	addi	r2,r2,25756
 10143cc:	003f9a06 	br	1014238 <__alt_data_end+0xff014238>
 10143d0:	008040b4 	movhi	r2,258
 10143d4:	10992004 	addi	r2,r2,25728
 10143d8:	003f9706 	br	1014238 <__alt_data_end+0xff014238>
 10143dc:	008040b4 	movhi	r2,258
 10143e0:	10991d04 	addi	r2,r2,25716
 10143e4:	003f9406 	br	1014238 <__alt_data_end+0xff014238>
 10143e8:	008040b4 	movhi	r2,258
 10143ec:	10991804 	addi	r2,r2,25696
 10143f0:	003f9106 	br	1014238 <__alt_data_end+0xff014238>
 10143f4:	008040b4 	movhi	r2,258
 10143f8:	10990f04 	addi	r2,r2,25660
 10143fc:	003f8e06 	br	1014238 <__alt_data_end+0xff014238>
 1014400:	008040b4 	movhi	r2,258
 1014404:	10990904 	addi	r2,r2,25636
 1014408:	003f8b06 	br	1014238 <__alt_data_end+0xff014238>
 101440c:	008040b4 	movhi	r2,258
 1014410:	10990404 	addi	r2,r2,25616
 1014414:	003f8806 	br	1014238 <__alt_data_end+0xff014238>
 1014418:	008040b4 	movhi	r2,258
 101441c:	1098fe04 	addi	r2,r2,25592
 1014420:	003f8506 	br	1014238 <__alt_data_end+0xff014238>
 1014424:	008040b4 	movhi	r2,258
 1014428:	10994004 	addi	r2,r2,25856
 101442c:	003f8206 	br	1014238 <__alt_data_end+0xff014238>
 1014430:	008040b4 	movhi	r2,258
 1014434:	1098fa04 	addi	r2,r2,25576
 1014438:	003f7f06 	br	1014238 <__alt_data_end+0xff014238>
 101443c:	008040b4 	movhi	r2,258
 1014440:	1098f804 	addi	r2,r2,25568
 1014444:	003f7c06 	br	1014238 <__alt_data_end+0xff014238>
 1014448:	008040b4 	movhi	r2,258
 101444c:	1098ef04 	addi	r2,r2,25532
 1014450:	003f7906 	br	1014238 <__alt_data_end+0xff014238>
 1014454:	008040b4 	movhi	r2,258
 1014458:	1098e404 	addi	r2,r2,25488
 101445c:	003f7606 	br	1014238 <__alt_data_end+0xff014238>
 1014460:	008040b4 	movhi	r2,258
 1014464:	1098dd04 	addi	r2,r2,25460
 1014468:	003f7306 	br	1014238 <__alt_data_end+0xff014238>
 101446c:	008040b4 	movhi	r2,258
 1014470:	1098d804 	addi	r2,r2,25440
 1014474:	003f7006 	br	1014238 <__alt_data_end+0xff014238>
 1014478:	008040b4 	movhi	r2,258
 101447c:	1098cc04 	addi	r2,r2,25392
 1014480:	003f6d06 	br	1014238 <__alt_data_end+0xff014238>
 1014484:	008040b4 	movhi	r2,258
 1014488:	1098c904 	addi	r2,r2,25380
 101448c:	003f6a06 	br	1014238 <__alt_data_end+0xff014238>
 1014490:	008040b4 	movhi	r2,258
 1014494:	1098c504 	addi	r2,r2,25364
 1014498:	003f6706 	br	1014238 <__alt_data_end+0xff014238>
 101449c:	008040b4 	movhi	r2,258
 10144a0:	1098bf04 	addi	r2,r2,25340
 10144a4:	003f6406 	br	1014238 <__alt_data_end+0xff014238>
 10144a8:	008040b4 	movhi	r2,258
 10144ac:	1098bb04 	addi	r2,r2,25324
 10144b0:	003f6106 	br	1014238 <__alt_data_end+0xff014238>
 10144b4:	008040b4 	movhi	r2,258
 10144b8:	1098b104 	addi	r2,r2,25284
 10144bc:	003f5e06 	br	1014238 <__alt_data_end+0xff014238>
 10144c0:	008040b4 	movhi	r2,258
 10144c4:	1098a804 	addi	r2,r2,25248
 10144c8:	003f5b06 	br	1014238 <__alt_data_end+0xff014238>
 10144cc:	008040b4 	movhi	r2,258
 10144d0:	1098a404 	addi	r2,r2,25232
 10144d4:	003f5806 	br	1014238 <__alt_data_end+0xff014238>
 10144d8:	008040b4 	movhi	r2,258
 10144dc:	10989e04 	addi	r2,r2,25208
 10144e0:	003f5506 	br	1014238 <__alt_data_end+0xff014238>
 10144e4:	008040b4 	movhi	r2,258
 10144e8:	10989604 	addi	r2,r2,25176
 10144ec:	003f5206 	br	1014238 <__alt_data_end+0xff014238>
 10144f0:	008040b4 	movhi	r2,258
 10144f4:	10988e04 	addi	r2,r2,25144
 10144f8:	003f4f06 	br	1014238 <__alt_data_end+0xff014238>
 10144fc:	008040b4 	movhi	r2,258
 1014500:	10987804 	addi	r2,r2,25056
 1014504:	003f4c06 	br	1014238 <__alt_data_end+0xff014238>
 1014508:	008040b4 	movhi	r2,258
 101450c:	10987404 	addi	r2,r2,25040
 1014510:	003f4906 	br	1014238 <__alt_data_end+0xff014238>
 1014514:	008040b4 	movhi	r2,258
 1014518:	10986404 	addi	r2,r2,24976
 101451c:	003f4606 	br	1014238 <__alt_data_end+0xff014238>
 1014520:	008040b4 	movhi	r2,258
 1014524:	10986004 	addi	r2,r2,24960
 1014528:	003f4306 	br	1014238 <__alt_data_end+0xff014238>
 101452c:	008040b4 	movhi	r2,258
 1014530:	10985b04 	addi	r2,r2,24940
 1014534:	003f4006 	br	1014238 <__alt_data_end+0xff014238>
 1014538:	008040b4 	movhi	r2,258
 101453c:	10985804 	addi	r2,r2,24928
 1014540:	003f3d06 	br	1014238 <__alt_data_end+0xff014238>
 1014544:	008040b4 	movhi	r2,258
 1014548:	10985204 	addi	r2,r2,24904
 101454c:	003f3a06 	br	1014238 <__alt_data_end+0xff014238>
 1014550:	008040b4 	movhi	r2,258
 1014554:	10984f04 	addi	r2,r2,24892
 1014558:	003f3706 	br	1014238 <__alt_data_end+0xff014238>
 101455c:	008040b4 	movhi	r2,258
 1014560:	10984a04 	addi	r2,r2,24872
 1014564:	003f3406 	br	1014238 <__alt_data_end+0xff014238>
 1014568:	008040b4 	movhi	r2,258
 101456c:	10984504 	addi	r2,r2,24852
 1014570:	003f3106 	br	1014238 <__alt_data_end+0xff014238>
 1014574:	008040b4 	movhi	r2,258
 1014578:	10984004 	addi	r2,r2,24832
 101457c:	003f2e06 	br	1014238 <__alt_data_end+0xff014238>
 1014580:	008040b4 	movhi	r2,258
 1014584:	10983504 	addi	r2,r2,24788
 1014588:	003f2b06 	br	1014238 <__alt_data_end+0xff014238>
 101458c:	008040b4 	movhi	r2,258
 1014590:	10983104 	addi	r2,r2,24772
 1014594:	003f2806 	br	1014238 <__alt_data_end+0xff014238>
 1014598:	008040b4 	movhi	r2,258
 101459c:	10982504 	addi	r2,r2,24724
 10145a0:	003f2506 	br	1014238 <__alt_data_end+0xff014238>
 10145a4:	008040b4 	movhi	r2,258
 10145a8:	10982004 	addi	r2,r2,24704
 10145ac:	003f2206 	br	1014238 <__alt_data_end+0xff014238>
 10145b0:	008040b4 	movhi	r2,258
 10145b4:	10981904 	addi	r2,r2,24676
 10145b8:	003f1f06 	br	1014238 <__alt_data_end+0xff014238>
 10145bc:	008040b4 	movhi	r2,258
 10145c0:	10981604 	addi	r2,r2,24664
 10145c4:	003f1c06 	br	1014238 <__alt_data_end+0xff014238>
 10145c8:	008040b4 	movhi	r2,258
 10145cc:	10981004 	addi	r2,r2,24640
 10145d0:	003f1906 	br	1014238 <__alt_data_end+0xff014238>
 10145d4:	008040b4 	movhi	r2,258
 10145d8:	10980c04 	addi	r2,r2,24624
 10145dc:	003f1606 	br	1014238 <__alt_data_end+0xff014238>
 10145e0:	008040b4 	movhi	r2,258
 10145e4:	10980504 	addi	r2,r2,24596
 10145e8:	003f1306 	br	1014238 <__alt_data_end+0xff014238>
 10145ec:	008040b4 	movhi	r2,258
 10145f0:	10980204 	addi	r2,r2,24584
 10145f4:	003f1006 	br	1014238 <__alt_data_end+0xff014238>
 10145f8:	38000726 	beq	r7,zero,1014618 <_strerror_r+0x654>
 10145fc:	380d883a 	mov	r6,r7
 1014600:	1809883a 	mov	r4,r3
 1014604:	1016a680 	call	1016a68 <_user_strerror>
 1014608:	103f0b1e 	bne	r2,zero,1014238 <__alt_data_end+0xff014238>
 101460c:	008040b4 	movhi	r2,258
 1014610:	1097f104 	addi	r2,r2,24516
 1014614:	003f0806 	br	1014238 <__alt_data_end+0xff014238>
 1014618:	200f883a 	mov	r7,r4
 101461c:	003ff706 	br	10145fc <__alt_data_end+0xff0145fc>

01014620 <strerror>:
 1014620:	008040f4 	movhi	r2,259
 1014624:	10a17104 	addi	r2,r2,-31292
 1014628:	200b883a 	mov	r5,r4
 101462c:	11000017 	ldw	r4,0(r2)
 1014630:	000f883a 	mov	r7,zero
 1014634:	000d883a 	mov	r6,zero
 1014638:	1013fc41 	jmpi	1013fc4 <_strerror_r>

0101463c <strlen>:
 101463c:	208000cc 	andi	r2,r4,3
 1014640:	10002026 	beq	r2,zero,10146c4 <strlen+0x88>
 1014644:	20800007 	ldb	r2,0(r4)
 1014648:	10002026 	beq	r2,zero,10146cc <strlen+0x90>
 101464c:	2005883a 	mov	r2,r4
 1014650:	00000206 	br	101465c <strlen+0x20>
 1014654:	10c00007 	ldb	r3,0(r2)
 1014658:	18001826 	beq	r3,zero,10146bc <strlen+0x80>
 101465c:	10800044 	addi	r2,r2,1
 1014660:	10c000cc 	andi	r3,r2,3
 1014664:	183ffb1e 	bne	r3,zero,1014654 <__alt_data_end+0xff014654>
 1014668:	10c00017 	ldw	r3,0(r2)
 101466c:	01ffbff4 	movhi	r7,65279
 1014670:	39ffbfc4 	addi	r7,r7,-257
 1014674:	00ca303a 	nor	r5,zero,r3
 1014678:	01a02074 	movhi	r6,32897
 101467c:	19c7883a 	add	r3,r3,r7
 1014680:	31a02004 	addi	r6,r6,-32640
 1014684:	1946703a 	and	r3,r3,r5
 1014688:	1986703a 	and	r3,r3,r6
 101468c:	1800091e 	bne	r3,zero,10146b4 <strlen+0x78>
 1014690:	10800104 	addi	r2,r2,4
 1014694:	10c00017 	ldw	r3,0(r2)
 1014698:	19cb883a 	add	r5,r3,r7
 101469c:	00c6303a 	nor	r3,zero,r3
 10146a0:	28c6703a 	and	r3,r5,r3
 10146a4:	1986703a 	and	r3,r3,r6
 10146a8:	183ff926 	beq	r3,zero,1014690 <__alt_data_end+0xff014690>
 10146ac:	00000106 	br	10146b4 <strlen+0x78>
 10146b0:	10800044 	addi	r2,r2,1
 10146b4:	10c00007 	ldb	r3,0(r2)
 10146b8:	183ffd1e 	bne	r3,zero,10146b0 <__alt_data_end+0xff0146b0>
 10146bc:	1105c83a 	sub	r2,r2,r4
 10146c0:	f800283a 	ret
 10146c4:	2005883a 	mov	r2,r4
 10146c8:	003fe706 	br	1014668 <__alt_data_end+0xff014668>
 10146cc:	0005883a 	mov	r2,zero
 10146d0:	f800283a 	ret

010146d4 <strncmp>:
 10146d4:	30003126 	beq	r6,zero,101479c <strncmp+0xc8>
 10146d8:	2144b03a 	or	r2,r4,r5
 10146dc:	108000cc 	andi	r2,r2,3
 10146e0:	10001e1e 	bne	r2,zero,101475c <strncmp+0x88>
 10146e4:	024000c4 	movi	r9,3
 10146e8:	49801c2e 	bgeu	r9,r6,101475c <strncmp+0x88>
 10146ec:	20800017 	ldw	r2,0(r4)
 10146f0:	28c00017 	ldw	r3,0(r5)
 10146f4:	10c0191e 	bne	r2,r3,101475c <strncmp+0x88>
 10146f8:	31bfff04 	addi	r6,r6,-4
 10146fc:	30002726 	beq	r6,zero,101479c <strncmp+0xc8>
 1014700:	02ffbff4 	movhi	r11,65279
 1014704:	5affbfc4 	addi	r11,r11,-257
 1014708:	0086303a 	nor	r3,zero,r2
 101470c:	02a02074 	movhi	r10,32897
 1014710:	12c5883a 	add	r2,r2,r11
 1014714:	52a02004 	addi	r10,r10,-32640
 1014718:	10c4703a 	and	r2,r2,r3
 101471c:	1284703a 	and	r2,r2,r10
 1014720:	10000b26 	beq	r2,zero,1014750 <strncmp+0x7c>
 1014724:	00001d06 	br	101479c <strncmp+0xc8>
 1014728:	20c00017 	ldw	r3,0(r4)
 101472c:	29c00017 	ldw	r7,0(r5)
 1014730:	1ad1883a 	add	r8,r3,r11
 1014734:	00c4303a 	nor	r2,zero,r3
 1014738:	4084703a 	and	r2,r8,r2
 101473c:	1284703a 	and	r2,r2,r10
 1014740:	19c0061e 	bne	r3,r7,101475c <strncmp+0x88>
 1014744:	31bfff04 	addi	r6,r6,-4
 1014748:	30001426 	beq	r6,zero,101479c <strncmp+0xc8>
 101474c:	1000131e 	bne	r2,zero,101479c <strncmp+0xc8>
 1014750:	21000104 	addi	r4,r4,4
 1014754:	29400104 	addi	r5,r5,4
 1014758:	49bff336 	bltu	r9,r6,1014728 <__alt_data_end+0xff014728>
 101475c:	28800007 	ldb	r2,0(r5)
 1014760:	20c00007 	ldb	r3,0(r4)
 1014764:	31bfffc4 	addi	r6,r6,-1
 1014768:	10c0081e 	bne	r2,r3,101478c <strncmp+0xb8>
 101476c:	30000b26 	beq	r6,zero,101479c <strncmp+0xc8>
 1014770:	10000a26 	beq	r2,zero,101479c <strncmp+0xc8>
 1014774:	21000044 	addi	r4,r4,1
 1014778:	29400044 	addi	r5,r5,1
 101477c:	20800007 	ldb	r2,0(r4)
 1014780:	28c00007 	ldb	r3,0(r5)
 1014784:	31bfffc4 	addi	r6,r6,-1
 1014788:	10fff826 	beq	r2,r3,101476c <__alt_data_end+0xff01476c>
 101478c:	20800003 	ldbu	r2,0(r4)
 1014790:	28c00003 	ldbu	r3,0(r5)
 1014794:	10c5c83a 	sub	r2,r2,r3
 1014798:	f800283a 	ret
 101479c:	0005883a 	mov	r2,zero
 10147a0:	f800283a 	ret

010147a4 <strncpy>:
 10147a4:	2906b03a 	or	r3,r5,r4
 10147a8:	18c000cc 	andi	r3,r3,3
 10147ac:	2005883a 	mov	r2,r4
 10147b0:	18002c1e 	bne	r3,zero,1014864 <strncpy+0xc0>
 10147b4:	010000c4 	movi	r4,3
 10147b8:	21802a2e 	bgeu	r4,r6,1014864 <strncpy+0xc0>
 10147bc:	033fbff4 	movhi	r12,65279
 10147c0:	02e02074 	movhi	r11,32897
 10147c4:	633fbfc4 	addi	r12,r12,-257
 10147c8:	5ae02004 	addi	r11,r11,-32640
 10147cc:	100f883a 	mov	r7,r2
 10147d0:	2a000017 	ldw	r8,0(r5)
 10147d4:	3815883a 	mov	r10,r7
 10147d8:	4313883a 	add	r9,r8,r12
 10147dc:	0206303a 	nor	r3,zero,r8
 10147e0:	48c6703a 	and	r3,r9,r3
 10147e4:	1ac6703a 	and	r3,r3,r11
 10147e8:	1800261e 	bne	r3,zero,1014884 <strncpy+0xe0>
 10147ec:	39c00104 	addi	r7,r7,4
 10147f0:	52000015 	stw	r8,0(r10)
 10147f4:	31bfff04 	addi	r6,r6,-4
 10147f8:	3811883a 	mov	r8,r7
 10147fc:	29400104 	addi	r5,r5,4
 1014800:	21bff336 	bltu	r4,r6,10147d0 <__alt_data_end+0xff0147d0>
 1014804:	30001e26 	beq	r6,zero,1014880 <strncpy+0xdc>
 1014808:	29c00003 	ldbu	r7,0(r5)
 101480c:	31bfffc4 	addi	r6,r6,-1
 1014810:	40c00044 	addi	r3,r8,1
 1014814:	41c00005 	stb	r7,0(r8)
 1014818:	39c03fcc 	andi	r7,r7,255
 101481c:	39c0201c 	xori	r7,r7,128
 1014820:	39ffe004 	addi	r7,r7,-128
 1014824:	29400044 	addi	r5,r5,1
 1014828:	38001026 	beq	r7,zero,101486c <strncpy+0xc8>
 101482c:	1811883a 	mov	r8,r3
 1014830:	00000906 	br	1014858 <strncpy+0xb4>
 1014834:	29c00003 	ldbu	r7,0(r5)
 1014838:	31bfffc4 	addi	r6,r6,-1
 101483c:	29400044 	addi	r5,r5,1
 1014840:	41c00005 	stb	r7,0(r8)
 1014844:	39c03fcc 	andi	r7,r7,255
 1014848:	39c0201c 	xori	r7,r7,128
 101484c:	39ffe004 	addi	r7,r7,-128
 1014850:	1811883a 	mov	r8,r3
 1014854:	38000526 	beq	r7,zero,101486c <strncpy+0xc8>
 1014858:	18c00044 	addi	r3,r3,1
 101485c:	303ff51e 	bne	r6,zero,1014834 <__alt_data_end+0xff014834>
 1014860:	f800283a 	ret
 1014864:	1011883a 	mov	r8,r2
 1014868:	003fe606 	br	1014804 <__alt_data_end+0xff014804>
 101486c:	30000726 	beq	r6,zero,101488c <strncpy+0xe8>
 1014870:	198d883a 	add	r6,r3,r6
 1014874:	18000005 	stb	zero,0(r3)
 1014878:	18c00044 	addi	r3,r3,1
 101487c:	19bffd1e 	bne	r3,r6,1014874 <__alt_data_end+0xff014874>
 1014880:	f800283a 	ret
 1014884:	3811883a 	mov	r8,r7
 1014888:	003fdf06 	br	1014808 <__alt_data_end+0xff014808>
 101488c:	f800283a 	ret

01014890 <___svfprintf_internal_r>:
 1014890:	deffb704 	addi	sp,sp,-292
 1014894:	dfc04815 	stw	ra,288(sp)
 1014898:	ddc04615 	stw	r23,280(sp)
 101489c:	d9402c15 	stw	r5,176(sp)
 10148a0:	d9003915 	stw	r4,228(sp)
 10148a4:	302f883a 	mov	r23,r6
 10148a8:	d9c02d15 	stw	r7,180(sp)
 10148ac:	df004715 	stw	fp,284(sp)
 10148b0:	dd804515 	stw	r22,276(sp)
 10148b4:	dd404415 	stw	r21,272(sp)
 10148b8:	dd004315 	stw	r20,268(sp)
 10148bc:	dcc04215 	stw	r19,264(sp)
 10148c0:	dc804115 	stw	r18,260(sp)
 10148c4:	dc404015 	stw	r17,256(sp)
 10148c8:	dc003f15 	stw	r16,252(sp)
 10148cc:	1018db80 	call	1018db8 <_localeconv_r>
 10148d0:	10800017 	ldw	r2,0(r2)
 10148d4:	1009883a 	mov	r4,r2
 10148d8:	d8803415 	stw	r2,208(sp)
 10148dc:	101463c0 	call	101463c <strlen>
 10148e0:	d8c02c17 	ldw	r3,176(sp)
 10148e4:	d8803815 	stw	r2,224(sp)
 10148e8:	1880030b 	ldhu	r2,12(r3)
 10148ec:	1080200c 	andi	r2,r2,128
 10148f0:	10000226 	beq	r2,zero,10148fc <___svfprintf_internal_r+0x6c>
 10148f4:	18800417 	ldw	r2,16(r3)
 10148f8:	10067f26 	beq	r2,zero,10162f8 <___svfprintf_internal_r+0x1a68>
 10148fc:	dcc03917 	ldw	r19,228(sp)
 1014900:	d8c00404 	addi	r3,sp,16
 1014904:	054040b4 	movhi	r21,258
 1014908:	d9001e04 	addi	r4,sp,120
 101490c:	ad59d084 	addi	r21,r21,26434
 1014910:	d8c01e15 	stw	r3,120(sp)
 1014914:	d8002015 	stw	zero,128(sp)
 1014918:	d8001f15 	stw	zero,124(sp)
 101491c:	d8003315 	stw	zero,204(sp)
 1014920:	d8003615 	stw	zero,216(sp)
 1014924:	d8003715 	stw	zero,220(sp)
 1014928:	1811883a 	mov	r8,r3
 101492c:	d8003a15 	stw	zero,232(sp)
 1014930:	d8003b15 	stw	zero,236(sp)
 1014934:	d8002f15 	stw	zero,188(sp)
 1014938:	d9002815 	stw	r4,160(sp)
 101493c:	b8800007 	ldb	r2,0(r23)
 1014940:	10026726 	beq	r2,zero,10152e0 <___svfprintf_internal_r+0xa50>
 1014944:	00c00944 	movi	r3,37
 1014948:	b821883a 	mov	r16,r23
 101494c:	10c0021e 	bne	r2,r3,1014958 <___svfprintf_internal_r+0xc8>
 1014950:	00001406 	br	10149a4 <___svfprintf_internal_r+0x114>
 1014954:	10c00326 	beq	r2,r3,1014964 <___svfprintf_internal_r+0xd4>
 1014958:	84000044 	addi	r16,r16,1
 101495c:	80800007 	ldb	r2,0(r16)
 1014960:	103ffc1e 	bne	r2,zero,1014954 <__alt_data_end+0xff014954>
 1014964:	85e3c83a 	sub	r17,r16,r23
 1014968:	88000e26 	beq	r17,zero,10149a4 <___svfprintf_internal_r+0x114>
 101496c:	d8c02017 	ldw	r3,128(sp)
 1014970:	d8801f17 	ldw	r2,124(sp)
 1014974:	45c00015 	stw	r23,0(r8)
 1014978:	1c47883a 	add	r3,r3,r17
 101497c:	10800044 	addi	r2,r2,1
 1014980:	d8c02015 	stw	r3,128(sp)
 1014984:	44400115 	stw	r17,4(r8)
 1014988:	d8801f15 	stw	r2,124(sp)
 101498c:	00c001c4 	movi	r3,7
 1014990:	18809716 	blt	r3,r2,1014bf0 <___svfprintf_internal_r+0x360>
 1014994:	42000204 	addi	r8,r8,8
 1014998:	d9402f17 	ldw	r5,188(sp)
 101499c:	2c4b883a 	add	r5,r5,r17
 10149a0:	d9402f15 	stw	r5,188(sp)
 10149a4:	80800007 	ldb	r2,0(r16)
 10149a8:	10009826 	beq	r2,zero,1014c0c <___svfprintf_internal_r+0x37c>
 10149ac:	84400047 	ldb	r17,1(r16)
 10149b0:	00bfffc4 	movi	r2,-1
 10149b4:	85c00044 	addi	r23,r16,1
 10149b8:	d8002785 	stb	zero,158(sp)
 10149bc:	0007883a 	mov	r3,zero
 10149c0:	000f883a 	mov	r7,zero
 10149c4:	d8802915 	stw	r2,164(sp)
 10149c8:	d8003115 	stw	zero,196(sp)
 10149cc:	0025883a 	mov	r18,zero
 10149d0:	01401604 	movi	r5,88
 10149d4:	01800244 	movi	r6,9
 10149d8:	02800a84 	movi	r10,42
 10149dc:	02401b04 	movi	r9,108
 10149e0:	bdc00044 	addi	r23,r23,1
 10149e4:	88bff804 	addi	r2,r17,-32
 10149e8:	2882f036 	bltu	r5,r2,10155ac <___svfprintf_internal_r+0xd1c>
 10149ec:	100490ba 	slli	r2,r2,2
 10149f0:	01004074 	movhi	r4,257
 10149f4:	21128104 	addi	r4,r4,18948
 10149f8:	1105883a 	add	r2,r2,r4
 10149fc:	10800017 	ldw	r2,0(r2)
 1014a00:	1000683a 	jmp	r2
 1014a04:	01015514 	movui	r4,1364
 1014a08:	010155ac 	andhi	r4,zero,1366
 1014a0c:	010155ac 	andhi	r4,zero,1366
 1014a10:	01015508 	cmpgei	r4,zero,1364
 1014a14:	010155ac 	andhi	r4,zero,1366
 1014a18:	010155ac 	andhi	r4,zero,1366
 1014a1c:	010155ac 	andhi	r4,zero,1366
 1014a20:	010155ac 	andhi	r4,zero,1366
 1014a24:	010155ac 	andhi	r4,zero,1366
 1014a28:	010155ac 	andhi	r4,zero,1366
 1014a2c:	01014c68 	cmpgeui	r4,zero,1329
 1014a30:	01015444 	movi	r4,1361
 1014a34:	010155ac 	andhi	r4,zero,1366
 1014a38:	01014b78 	rdprs	r4,zero,1325
 1014a3c:	01014c90 	cmplti	r4,zero,1330
 1014a40:	010155ac 	andhi	r4,zero,1366
 1014a44:	01014d04 	movi	r4,1332
 1014a48:	01014cd0 	cmplti	r4,zero,1331
 1014a4c:	01014cd0 	cmplti	r4,zero,1331
 1014a50:	01014cd0 	cmplti	r4,zero,1331
 1014a54:	01014cd0 	cmplti	r4,zero,1331
 1014a58:	01014cd0 	cmplti	r4,zero,1331
 1014a5c:	01014cd0 	cmplti	r4,zero,1331
 1014a60:	01014cd0 	cmplti	r4,zero,1331
 1014a64:	01014cd0 	cmplti	r4,zero,1331
 1014a68:	01014cd0 	cmplti	r4,zero,1331
 1014a6c:	010155ac 	andhi	r4,zero,1366
 1014a70:	010155ac 	andhi	r4,zero,1366
 1014a74:	010155ac 	andhi	r4,zero,1366
 1014a78:	010155ac 	andhi	r4,zero,1366
 1014a7c:	010155ac 	andhi	r4,zero,1366
 1014a80:	010155ac 	andhi	r4,zero,1366
 1014a84:	010155ac 	andhi	r4,zero,1366
 1014a88:	010155ac 	andhi	r4,zero,1366
 1014a8c:	010155ac 	andhi	r4,zero,1366
 1014a90:	010155ac 	andhi	r4,zero,1366
 1014a94:	01014dbc 	xorhi	r4,zero,1334
 1014a98:	01014d10 	cmplti	r4,zero,1332
 1014a9c:	010155ac 	andhi	r4,zero,1366
 1014aa0:	01014d10 	cmplti	r4,zero,1332
 1014aa4:	010155ac 	andhi	r4,zero,1366
 1014aa8:	010155ac 	andhi	r4,zero,1366
 1014aac:	010155ac 	andhi	r4,zero,1366
 1014ab0:	010155ac 	andhi	r4,zero,1366
 1014ab4:	01014db0 	cmpltui	r4,zero,1334
 1014ab8:	010155ac 	andhi	r4,zero,1366
 1014abc:	010155ac 	andhi	r4,zero,1366
 1014ac0:	01014e78 	rdprs	r4,zero,1337
 1014ac4:	010155ac 	andhi	r4,zero,1366
 1014ac8:	010155ac 	andhi	r4,zero,1366
 1014acc:	010155ac 	andhi	r4,zero,1366
 1014ad0:	010155ac 	andhi	r4,zero,1366
 1014ad4:	010155ac 	andhi	r4,zero,1366
 1014ad8:	010152e8 	cmpgeui	r4,zero,1355
 1014adc:	010155ac 	andhi	r4,zero,1366
 1014ae0:	010155ac 	andhi	r4,zero,1366
 1014ae4:	01015348 	cmpgei	r4,zero,1357
 1014ae8:	010155ac 	andhi	r4,zero,1366
 1014aec:	010155ac 	andhi	r4,zero,1366
 1014af0:	010155ac 	andhi	r4,zero,1366
 1014af4:	010155ac 	andhi	r4,zero,1366
 1014af8:	010155ac 	andhi	r4,zero,1366
 1014afc:	010155ac 	andhi	r4,zero,1366
 1014b00:	010155ac 	andhi	r4,zero,1366
 1014b04:	010155ac 	andhi	r4,zero,1366
 1014b08:	010155ac 	andhi	r4,zero,1366
 1014b0c:	010155ac 	andhi	r4,zero,1366
 1014b10:	010153f8 	rdprs	r4,zero,1359
 1014b14:	01015534 	movhi	r4,1364
 1014b18:	01014d10 	cmplti	r4,zero,1332
 1014b1c:	01014d10 	cmplti	r4,zero,1332
 1014b20:	01014d10 	cmplti	r4,zero,1332
 1014b24:	01015588 	cmpgei	r4,zero,1366
 1014b28:	01015534 	movhi	r4,1364
 1014b2c:	010155ac 	andhi	r4,zero,1366
 1014b30:	010155ac 	andhi	r4,zero,1366
 1014b34:	01015544 	movi	r4,1365
 1014b38:	010155ac 	andhi	r4,zero,1366
 1014b3c:	01015554 	movui	r4,1365
 1014b40:	01015434 	movhi	r4,1360
 1014b44:	01014b84 	movi	r4,1326
 1014b48:	01015454 	movui	r4,1361
 1014b4c:	010155ac 	andhi	r4,zero,1366
 1014b50:	01015460 	cmpeqi	r4,zero,1361
 1014b54:	010155ac 	andhi	r4,zero,1366
 1014b58:	010154bc 	xorhi	r4,zero,1362
 1014b5c:	010155ac 	andhi	r4,zero,1366
 1014b60:	010155ac 	andhi	r4,zero,1366
 1014b64:	010154cc 	andi	r4,zero,1363
 1014b68:	d9003117 	ldw	r4,196(sp)
 1014b6c:	d8802d15 	stw	r2,180(sp)
 1014b70:	0109c83a 	sub	r4,zero,r4
 1014b74:	d9003115 	stw	r4,196(sp)
 1014b78:	94800114 	ori	r18,r18,4
 1014b7c:	bc400007 	ldb	r17,0(r23)
 1014b80:	003f9706 	br	10149e0 <__alt_data_end+0xff0149e0>
 1014b84:	00800c04 	movi	r2,48
 1014b88:	d9002d17 	ldw	r4,180(sp)
 1014b8c:	d9402917 	ldw	r5,164(sp)
 1014b90:	d8802705 	stb	r2,156(sp)
 1014b94:	00801e04 	movi	r2,120
 1014b98:	d8802745 	stb	r2,157(sp)
 1014b9c:	d8002785 	stb	zero,158(sp)
 1014ba0:	20c00104 	addi	r3,r4,4
 1014ba4:	25000017 	ldw	r20,0(r4)
 1014ba8:	002d883a 	mov	r22,zero
 1014bac:	90800094 	ori	r2,r18,2
 1014bb0:	28028616 	blt	r5,zero,10155cc <___svfprintf_internal_r+0xd3c>
 1014bb4:	00bfdfc4 	movi	r2,-129
 1014bb8:	90a4703a 	and	r18,r18,r2
 1014bbc:	d8c02d15 	stw	r3,180(sp)
 1014bc0:	94800094 	ori	r18,r18,2
 1014bc4:	a002731e 	bne	r20,zero,1015594 <___svfprintf_internal_r+0xd04>
 1014bc8:	008040b4 	movhi	r2,258
 1014bcc:	1099c904 	addi	r2,r2,26404
 1014bd0:	d8803a15 	stw	r2,232(sp)
 1014bd4:	04401e04 	movi	r17,120
 1014bd8:	d8c02917 	ldw	r3,164(sp)
 1014bdc:	0039883a 	mov	fp,zero
 1014be0:	1801d526 	beq	r3,zero,1015338 <___svfprintf_internal_r+0xaa8>
 1014be4:	0029883a 	mov	r20,zero
 1014be8:	002d883a 	mov	r22,zero
 1014bec:	0001f106 	br	10153b4 <___svfprintf_internal_r+0xb24>
 1014bf0:	d9402c17 	ldw	r5,176(sp)
 1014bf4:	d9801e04 	addi	r6,sp,120
 1014bf8:	9809883a 	mov	r4,r19
 1014bfc:	101b29c0 	call	101b29c <__ssprint_r>
 1014c00:	1000081e 	bne	r2,zero,1014c24 <___svfprintf_internal_r+0x394>
 1014c04:	da000404 	addi	r8,sp,16
 1014c08:	003f6306 	br	1014998 <__alt_data_end+0xff014998>
 1014c0c:	d8802017 	ldw	r2,128(sp)
 1014c10:	10000426 	beq	r2,zero,1014c24 <___svfprintf_internal_r+0x394>
 1014c14:	d9402c17 	ldw	r5,176(sp)
 1014c18:	d9003917 	ldw	r4,228(sp)
 1014c1c:	d9801e04 	addi	r6,sp,120
 1014c20:	101b29c0 	call	101b29c <__ssprint_r>
 1014c24:	d8802c17 	ldw	r2,176(sp)
 1014c28:	10c0030b 	ldhu	r3,12(r2)
 1014c2c:	d8802f17 	ldw	r2,188(sp)
 1014c30:	18c0100c 	andi	r3,r3,64
 1014c34:	1805f51e 	bne	r3,zero,101640c <___svfprintf_internal_r+0x1b7c>
 1014c38:	dfc04817 	ldw	ra,288(sp)
 1014c3c:	df004717 	ldw	fp,284(sp)
 1014c40:	ddc04617 	ldw	r23,280(sp)
 1014c44:	dd804517 	ldw	r22,276(sp)
 1014c48:	dd404417 	ldw	r21,272(sp)
 1014c4c:	dd004317 	ldw	r20,268(sp)
 1014c50:	dcc04217 	ldw	r19,264(sp)
 1014c54:	dc804117 	ldw	r18,260(sp)
 1014c58:	dc404017 	ldw	r17,256(sp)
 1014c5c:	dc003f17 	ldw	r16,252(sp)
 1014c60:	dec04904 	addi	sp,sp,292
 1014c64:	f800283a 	ret
 1014c68:	d8802d17 	ldw	r2,180(sp)
 1014c6c:	d9002d17 	ldw	r4,180(sp)
 1014c70:	10800017 	ldw	r2,0(r2)
 1014c74:	d8803115 	stw	r2,196(sp)
 1014c78:	20800104 	addi	r2,r4,4
 1014c7c:	d9003117 	ldw	r4,196(sp)
 1014c80:	203fb916 	blt	r4,zero,1014b68 <__alt_data_end+0xff014b68>
 1014c84:	d8802d15 	stw	r2,180(sp)
 1014c88:	bc400007 	ldb	r17,0(r23)
 1014c8c:	003f5406 	br	10149e0 <__alt_data_end+0xff0149e0>
 1014c90:	bc400007 	ldb	r17,0(r23)
 1014c94:	bac00044 	addi	r11,r23,1
 1014c98:	8a873926 	beq	r17,r10,1016980 <___svfprintf_internal_r+0x20f0>
 1014c9c:	88bff404 	addi	r2,r17,-48
 1014ca0:	0009883a 	mov	r4,zero
 1014ca4:	30868836 	bltu	r6,r2,10166c8 <___svfprintf_internal_r+0x1e38>
 1014ca8:	5c400007 	ldb	r17,0(r11)
 1014cac:	210002a4 	muli	r4,r4,10
 1014cb0:	5dc00044 	addi	r23,r11,1
 1014cb4:	b817883a 	mov	r11,r23
 1014cb8:	2089883a 	add	r4,r4,r2
 1014cbc:	88bff404 	addi	r2,r17,-48
 1014cc0:	30bff92e 	bgeu	r6,r2,1014ca8 <__alt_data_end+0xff014ca8>
 1014cc4:	2005d716 	blt	r4,zero,1016424 <___svfprintf_internal_r+0x1b94>
 1014cc8:	d9002915 	stw	r4,164(sp)
 1014ccc:	003f4506 	br	10149e4 <__alt_data_end+0xff0149e4>
 1014cd0:	b809883a 	mov	r4,r23
 1014cd4:	d8003115 	stw	zero,196(sp)
 1014cd8:	88bff404 	addi	r2,r17,-48
 1014cdc:	0017883a 	mov	r11,zero
 1014ce0:	24400007 	ldb	r17,0(r4)
 1014ce4:	5ac002a4 	muli	r11,r11,10
 1014ce8:	bdc00044 	addi	r23,r23,1
 1014cec:	b809883a 	mov	r4,r23
 1014cf0:	12d7883a 	add	r11,r2,r11
 1014cf4:	88bff404 	addi	r2,r17,-48
 1014cf8:	30bff92e 	bgeu	r6,r2,1014ce0 <__alt_data_end+0xff014ce0>
 1014cfc:	dac03115 	stw	r11,196(sp)
 1014d00:	003f3806 	br	10149e4 <__alt_data_end+0xff0149e4>
 1014d04:	94802014 	ori	r18,r18,128
 1014d08:	bc400007 	ldb	r17,0(r23)
 1014d0c:	003f3406 	br	10149e0 <__alt_data_end+0xff0149e0>
 1014d10:	18c03fcc 	andi	r3,r3,255
 1014d14:	1807471e 	bne	r3,zero,1016a34 <___svfprintf_internal_r+0x21a4>
 1014d18:	9080020c 	andi	r2,r18,8
 1014d1c:	10047d26 	beq	r2,zero,1015f14 <___svfprintf_internal_r+0x1684>
 1014d20:	d8c02d17 	ldw	r3,180(sp)
 1014d24:	d9002d17 	ldw	r4,180(sp)
 1014d28:	d9402d17 	ldw	r5,180(sp)
 1014d2c:	18c00017 	ldw	r3,0(r3)
 1014d30:	21000117 	ldw	r4,4(r4)
 1014d34:	29400204 	addi	r5,r5,8
 1014d38:	d8c03615 	stw	r3,216(sp)
 1014d3c:	d9003715 	stw	r4,220(sp)
 1014d40:	d9402d15 	stw	r5,180(sp)
 1014d44:	d9003617 	ldw	r4,216(sp)
 1014d48:	d9403717 	ldw	r5,220(sp)
 1014d4c:	da003e15 	stw	r8,248(sp)
 1014d50:	04000044 	movi	r16,1
 1014d54:	101ad940 	call	101ad94 <__fpclassifyd>
 1014d58:	da003e17 	ldw	r8,248(sp)
 1014d5c:	14044b1e 	bne	r2,r16,1015e8c <___svfprintf_internal_r+0x15fc>
 1014d60:	d9003617 	ldw	r4,216(sp)
 1014d64:	d9403717 	ldw	r5,220(sp)
 1014d68:	000d883a 	mov	r6,zero
 1014d6c:	000f883a 	mov	r7,zero
 1014d70:	1020f6c0 	call	1020f6c <__ledf2>
 1014d74:	da003e17 	ldw	r8,248(sp)
 1014d78:	1005f316 	blt	r2,zero,1016548 <___svfprintf_internal_r+0x1cb8>
 1014d7c:	df002783 	ldbu	fp,158(sp)
 1014d80:	008011c4 	movi	r2,71
 1014d84:	1445590e 	bge	r2,r17,10162ec <___svfprintf_internal_r+0x1a5c>
 1014d88:	040040b4 	movhi	r16,258
 1014d8c:	8419c104 	addi	r16,r16,26372
 1014d90:	00c000c4 	movi	r3,3
 1014d94:	00bfdfc4 	movi	r2,-129
 1014d98:	d8c02a15 	stw	r3,168(sp)
 1014d9c:	90a4703a 	and	r18,r18,r2
 1014da0:	d8c02e15 	stw	r3,184(sp)
 1014da4:	d8002915 	stw	zero,164(sp)
 1014da8:	d8003215 	stw	zero,200(sp)
 1014dac:	00006606 	br	1014f48 <___svfprintf_internal_r+0x6b8>
 1014db0:	94800214 	ori	r18,r18,8
 1014db4:	bc400007 	ldb	r17,0(r23)
 1014db8:	003f0906 	br	10149e0 <__alt_data_end+0xff0149e0>
 1014dbc:	18c03fcc 	andi	r3,r3,255
 1014dc0:	1807181e 	bne	r3,zero,1016a24 <___svfprintf_internal_r+0x2194>
 1014dc4:	94800414 	ori	r18,r18,16
 1014dc8:	9080080c 	andi	r2,r18,32
 1014dcc:	10039626 	beq	r2,zero,1015c28 <___svfprintf_internal_r+0x1398>
 1014dd0:	d9402d17 	ldw	r5,180(sp)
 1014dd4:	28800117 	ldw	r2,4(r5)
 1014dd8:	2d000017 	ldw	r20,0(r5)
 1014ddc:	29400204 	addi	r5,r5,8
 1014de0:	d9402d15 	stw	r5,180(sp)
 1014de4:	102d883a 	mov	r22,r2
 1014de8:	10039816 	blt	r2,zero,1015c4c <___svfprintf_internal_r+0x13bc>
 1014dec:	d9402917 	ldw	r5,164(sp)
 1014df0:	df002783 	ldbu	fp,158(sp)
 1014df4:	2803ab16 	blt	r5,zero,1015ca4 <___svfprintf_internal_r+0x1414>
 1014df8:	00ffdfc4 	movi	r3,-129
 1014dfc:	a584b03a 	or	r2,r20,r22
 1014e00:	90e4703a 	and	r18,r18,r3
 1014e04:	10014a26 	beq	r2,zero,1015330 <___svfprintf_internal_r+0xaa0>
 1014e08:	b0034b26 	beq	r22,zero,1015b38 <___svfprintf_internal_r+0x12a8>
 1014e0c:	dc402a15 	stw	r17,168(sp)
 1014e10:	dc001e04 	addi	r16,sp,120
 1014e14:	b023883a 	mov	r17,r22
 1014e18:	402d883a 	mov	r22,r8
 1014e1c:	a009883a 	mov	r4,r20
 1014e20:	880b883a 	mov	r5,r17
 1014e24:	01800284 	movi	r6,10
 1014e28:	000f883a 	mov	r7,zero
 1014e2c:	101f5880 	call	101f588 <__umoddi3>
 1014e30:	10800c04 	addi	r2,r2,48
 1014e34:	843fffc4 	addi	r16,r16,-1
 1014e38:	a009883a 	mov	r4,r20
 1014e3c:	880b883a 	mov	r5,r17
 1014e40:	80800005 	stb	r2,0(r16)
 1014e44:	01800284 	movi	r6,10
 1014e48:	000f883a 	mov	r7,zero
 1014e4c:	101f0100 	call	101f010 <__udivdi3>
 1014e50:	1029883a 	mov	r20,r2
 1014e54:	10c4b03a 	or	r2,r2,r3
 1014e58:	1823883a 	mov	r17,r3
 1014e5c:	103fef1e 	bne	r2,zero,1014e1c <__alt_data_end+0xff014e1c>
 1014e60:	d8c02817 	ldw	r3,160(sp)
 1014e64:	dc402a17 	ldw	r17,168(sp)
 1014e68:	b011883a 	mov	r8,r22
 1014e6c:	1c07c83a 	sub	r3,r3,r16
 1014e70:	d8c02e15 	stw	r3,184(sp)
 1014e74:	00002e06 	br	1014f30 <___svfprintf_internal_r+0x6a0>
 1014e78:	18c03fcc 	andi	r3,r3,255
 1014e7c:	1806e71e 	bne	r3,zero,1016a1c <___svfprintf_internal_r+0x218c>
 1014e80:	94800414 	ori	r18,r18,16
 1014e84:	9080080c 	andi	r2,r18,32
 1014e88:	1002d426 	beq	r2,zero,10159dc <___svfprintf_internal_r+0x114c>
 1014e8c:	d9402d17 	ldw	r5,180(sp)
 1014e90:	d8c02917 	ldw	r3,164(sp)
 1014e94:	d8002785 	stb	zero,158(sp)
 1014e98:	28800204 	addi	r2,r5,8
 1014e9c:	2d000017 	ldw	r20,0(r5)
 1014ea0:	2d800117 	ldw	r22,4(r5)
 1014ea4:	18041516 	blt	r3,zero,1015efc <___svfprintf_internal_r+0x166c>
 1014ea8:	013fdfc4 	movi	r4,-129
 1014eac:	a586b03a 	or	r3,r20,r22
 1014eb0:	d8802d15 	stw	r2,180(sp)
 1014eb4:	9124703a 	and	r18,r18,r4
 1014eb8:	1802d51e 	bne	r3,zero,1015a10 <___svfprintf_internal_r+0x1180>
 1014ebc:	d9402917 	ldw	r5,164(sp)
 1014ec0:	0039883a 	mov	fp,zero
 1014ec4:	2806be26 	beq	r5,zero,10169c0 <___svfprintf_internal_r+0x2130>
 1014ec8:	0029883a 	mov	r20,zero
 1014ecc:	002d883a 	mov	r22,zero
 1014ed0:	dc001e04 	addi	r16,sp,120
 1014ed4:	a006d0fa 	srli	r3,r20,3
 1014ed8:	b008977a 	slli	r4,r22,29
 1014edc:	b02cd0fa 	srli	r22,r22,3
 1014ee0:	a50001cc 	andi	r20,r20,7
 1014ee4:	a0800c04 	addi	r2,r20,48
 1014ee8:	843fffc4 	addi	r16,r16,-1
 1014eec:	20e8b03a 	or	r20,r4,r3
 1014ef0:	80800005 	stb	r2,0(r16)
 1014ef4:	a586b03a 	or	r3,r20,r22
 1014ef8:	183ff61e 	bne	r3,zero,1014ed4 <__alt_data_end+0xff014ed4>
 1014efc:	90c0004c 	andi	r3,r18,1
 1014f00:	18013926 	beq	r3,zero,10153e8 <___svfprintf_internal_r+0xb58>
 1014f04:	10803fcc 	andi	r2,r2,255
 1014f08:	1080201c 	xori	r2,r2,128
 1014f0c:	10bfe004 	addi	r2,r2,-128
 1014f10:	00c00c04 	movi	r3,48
 1014f14:	10c13426 	beq	r2,r3,10153e8 <___svfprintf_internal_r+0xb58>
 1014f18:	80ffffc5 	stb	r3,-1(r16)
 1014f1c:	d8c02817 	ldw	r3,160(sp)
 1014f20:	80bfffc4 	addi	r2,r16,-1
 1014f24:	1021883a 	mov	r16,r2
 1014f28:	1887c83a 	sub	r3,r3,r2
 1014f2c:	d8c02e15 	stw	r3,184(sp)
 1014f30:	d8802e17 	ldw	r2,184(sp)
 1014f34:	d9002917 	ldw	r4,164(sp)
 1014f38:	1100010e 	bge	r2,r4,1014f40 <___svfprintf_internal_r+0x6b0>
 1014f3c:	2005883a 	mov	r2,r4
 1014f40:	d8802a15 	stw	r2,168(sp)
 1014f44:	d8003215 	stw	zero,200(sp)
 1014f48:	e7003fcc 	andi	fp,fp,255
 1014f4c:	e700201c 	xori	fp,fp,128
 1014f50:	e73fe004 	addi	fp,fp,-128
 1014f54:	e0000326 	beq	fp,zero,1014f64 <___svfprintf_internal_r+0x6d4>
 1014f58:	d8c02a17 	ldw	r3,168(sp)
 1014f5c:	18c00044 	addi	r3,r3,1
 1014f60:	d8c02a15 	stw	r3,168(sp)
 1014f64:	90c0008c 	andi	r3,r18,2
 1014f68:	d8c02b15 	stw	r3,172(sp)
 1014f6c:	18000326 	beq	r3,zero,1014f7c <___svfprintf_internal_r+0x6ec>
 1014f70:	d8c02a17 	ldw	r3,168(sp)
 1014f74:	18c00084 	addi	r3,r3,2
 1014f78:	d8c02a15 	stw	r3,168(sp)
 1014f7c:	90c0210c 	andi	r3,r18,132
 1014f80:	d8c03015 	stw	r3,192(sp)
 1014f84:	1801a11e 	bne	r3,zero,101560c <___svfprintf_internal_r+0xd7c>
 1014f88:	d9003117 	ldw	r4,196(sp)
 1014f8c:	d8c02a17 	ldw	r3,168(sp)
 1014f90:	20e9c83a 	sub	r20,r4,r3
 1014f94:	05019d0e 	bge	zero,r20,101560c <___svfprintf_internal_r+0xd7c>
 1014f98:	02400404 	movi	r9,16
 1014f9c:	d8c02017 	ldw	r3,128(sp)
 1014fa0:	d8801f17 	ldw	r2,124(sp)
 1014fa4:	4d051b0e 	bge	r9,r20,1016414 <___svfprintf_internal_r+0x1b84>
 1014fa8:	014040b4 	movhi	r5,258
 1014fac:	2959d484 	addi	r5,r5,26450
 1014fb0:	dc403c15 	stw	r17,240(sp)
 1014fb4:	d9403515 	stw	r5,212(sp)
 1014fb8:	a023883a 	mov	r17,r20
 1014fbc:	482d883a 	mov	r22,r9
 1014fc0:	9029883a 	mov	r20,r18
 1014fc4:	070001c4 	movi	fp,7
 1014fc8:	8025883a 	mov	r18,r16
 1014fcc:	dc002c17 	ldw	r16,176(sp)
 1014fd0:	00000306 	br	1014fe0 <___svfprintf_internal_r+0x750>
 1014fd4:	8c7ffc04 	addi	r17,r17,-16
 1014fd8:	42000204 	addi	r8,r8,8
 1014fdc:	b440130e 	bge	r22,r17,101502c <___svfprintf_internal_r+0x79c>
 1014fe0:	010040b4 	movhi	r4,258
 1014fe4:	18c00404 	addi	r3,r3,16
 1014fe8:	10800044 	addi	r2,r2,1
 1014fec:	2119d484 	addi	r4,r4,26450
 1014ff0:	41000015 	stw	r4,0(r8)
 1014ff4:	45800115 	stw	r22,4(r8)
 1014ff8:	d8c02015 	stw	r3,128(sp)
 1014ffc:	d8801f15 	stw	r2,124(sp)
 1015000:	e0bff40e 	bge	fp,r2,1014fd4 <__alt_data_end+0xff014fd4>
 1015004:	d9801e04 	addi	r6,sp,120
 1015008:	800b883a 	mov	r5,r16
 101500c:	9809883a 	mov	r4,r19
 1015010:	101b29c0 	call	101b29c <__ssprint_r>
 1015014:	103f031e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015018:	8c7ffc04 	addi	r17,r17,-16
 101501c:	d8c02017 	ldw	r3,128(sp)
 1015020:	d8801f17 	ldw	r2,124(sp)
 1015024:	da000404 	addi	r8,sp,16
 1015028:	b47fed16 	blt	r22,r17,1014fe0 <__alt_data_end+0xff014fe0>
 101502c:	9021883a 	mov	r16,r18
 1015030:	a025883a 	mov	r18,r20
 1015034:	8829883a 	mov	r20,r17
 1015038:	dc403c17 	ldw	r17,240(sp)
 101503c:	d9403517 	ldw	r5,212(sp)
 1015040:	a0c7883a 	add	r3,r20,r3
 1015044:	10800044 	addi	r2,r2,1
 1015048:	41400015 	stw	r5,0(r8)
 101504c:	45000115 	stw	r20,4(r8)
 1015050:	d8c02015 	stw	r3,128(sp)
 1015054:	d8801f15 	stw	r2,124(sp)
 1015058:	010001c4 	movi	r4,7
 101505c:	20829f16 	blt	r4,r2,1015adc <___svfprintf_internal_r+0x124c>
 1015060:	df002787 	ldb	fp,158(sp)
 1015064:	42000204 	addi	r8,r8,8
 1015068:	e0000c26 	beq	fp,zero,101509c <___svfprintf_internal_r+0x80c>
 101506c:	d8801f17 	ldw	r2,124(sp)
 1015070:	d9002784 	addi	r4,sp,158
 1015074:	18c00044 	addi	r3,r3,1
 1015078:	10800044 	addi	r2,r2,1
 101507c:	41000015 	stw	r4,0(r8)
 1015080:	01000044 	movi	r4,1
 1015084:	41000115 	stw	r4,4(r8)
 1015088:	d8c02015 	stw	r3,128(sp)
 101508c:	d8801f15 	stw	r2,124(sp)
 1015090:	010001c4 	movi	r4,7
 1015094:	20823816 	blt	r4,r2,1015978 <___svfprintf_internal_r+0x10e8>
 1015098:	42000204 	addi	r8,r8,8
 101509c:	d8802b17 	ldw	r2,172(sp)
 10150a0:	10000c26 	beq	r2,zero,10150d4 <___svfprintf_internal_r+0x844>
 10150a4:	d8801f17 	ldw	r2,124(sp)
 10150a8:	d9002704 	addi	r4,sp,156
 10150ac:	18c00084 	addi	r3,r3,2
 10150b0:	10800044 	addi	r2,r2,1
 10150b4:	41000015 	stw	r4,0(r8)
 10150b8:	01000084 	movi	r4,2
 10150bc:	41000115 	stw	r4,4(r8)
 10150c0:	d8c02015 	stw	r3,128(sp)
 10150c4:	d8801f15 	stw	r2,124(sp)
 10150c8:	010001c4 	movi	r4,7
 10150cc:	20823216 	blt	r4,r2,1015998 <___svfprintf_internal_r+0x1108>
 10150d0:	42000204 	addi	r8,r8,8
 10150d4:	d9003017 	ldw	r4,192(sp)
 10150d8:	00802004 	movi	r2,128
 10150dc:	20819726 	beq	r4,r2,101573c <___svfprintf_internal_r+0xeac>
 10150e0:	d9402917 	ldw	r5,164(sp)
 10150e4:	d8802e17 	ldw	r2,184(sp)
 10150e8:	28adc83a 	sub	r22,r5,r2
 10150ec:	05802f0e 	bge	zero,r22,10151ac <___svfprintf_internal_r+0x91c>
 10150f0:	07000404 	movi	fp,16
 10150f4:	d8801f17 	ldw	r2,124(sp)
 10150f8:	e583c00e 	bge	fp,r22,1015ffc <___svfprintf_internal_r+0x176c>
 10150fc:	014040b4 	movhi	r5,258
 1015100:	2959d084 	addi	r5,r5,26434
 1015104:	dc402915 	stw	r17,164(sp)
 1015108:	d9402b15 	stw	r5,172(sp)
 101510c:	b023883a 	mov	r17,r22
 1015110:	050001c4 	movi	r20,7
 1015114:	902d883a 	mov	r22,r18
 1015118:	8025883a 	mov	r18,r16
 101511c:	dc002c17 	ldw	r16,176(sp)
 1015120:	00000306 	br	1015130 <___svfprintf_internal_r+0x8a0>
 1015124:	8c7ffc04 	addi	r17,r17,-16
 1015128:	42000204 	addi	r8,r8,8
 101512c:	e440110e 	bge	fp,r17,1015174 <___svfprintf_internal_r+0x8e4>
 1015130:	18c00404 	addi	r3,r3,16
 1015134:	10800044 	addi	r2,r2,1
 1015138:	45400015 	stw	r21,0(r8)
 101513c:	47000115 	stw	fp,4(r8)
 1015140:	d8c02015 	stw	r3,128(sp)
 1015144:	d8801f15 	stw	r2,124(sp)
 1015148:	a0bff60e 	bge	r20,r2,1015124 <__alt_data_end+0xff015124>
 101514c:	d9801e04 	addi	r6,sp,120
 1015150:	800b883a 	mov	r5,r16
 1015154:	9809883a 	mov	r4,r19
 1015158:	101b29c0 	call	101b29c <__ssprint_r>
 101515c:	103eb11e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015160:	8c7ffc04 	addi	r17,r17,-16
 1015164:	d8c02017 	ldw	r3,128(sp)
 1015168:	d8801f17 	ldw	r2,124(sp)
 101516c:	da000404 	addi	r8,sp,16
 1015170:	e47fef16 	blt	fp,r17,1015130 <__alt_data_end+0xff015130>
 1015174:	9021883a 	mov	r16,r18
 1015178:	b025883a 	mov	r18,r22
 101517c:	882d883a 	mov	r22,r17
 1015180:	dc402917 	ldw	r17,164(sp)
 1015184:	d9002b17 	ldw	r4,172(sp)
 1015188:	1d87883a 	add	r3,r3,r22
 101518c:	10800044 	addi	r2,r2,1
 1015190:	41000015 	stw	r4,0(r8)
 1015194:	45800115 	stw	r22,4(r8)
 1015198:	d8c02015 	stw	r3,128(sp)
 101519c:	d8801f15 	stw	r2,124(sp)
 10151a0:	010001c4 	movi	r4,7
 10151a4:	2081ec16 	blt	r4,r2,1015958 <___svfprintf_internal_r+0x10c8>
 10151a8:	42000204 	addi	r8,r8,8
 10151ac:	9080400c 	andi	r2,r18,256
 10151b0:	1001181e 	bne	r2,zero,1015614 <___svfprintf_internal_r+0xd84>
 10151b4:	d9402e17 	ldw	r5,184(sp)
 10151b8:	d8801f17 	ldw	r2,124(sp)
 10151bc:	44000015 	stw	r16,0(r8)
 10151c0:	1947883a 	add	r3,r3,r5
 10151c4:	10800044 	addi	r2,r2,1
 10151c8:	41400115 	stw	r5,4(r8)
 10151cc:	d8c02015 	stw	r3,128(sp)
 10151d0:	d8801f15 	stw	r2,124(sp)
 10151d4:	010001c4 	movi	r4,7
 10151d8:	2081d116 	blt	r4,r2,1015920 <___svfprintf_internal_r+0x1090>
 10151dc:	42000204 	addi	r8,r8,8
 10151e0:	9480010c 	andi	r18,r18,4
 10151e4:	90003226 	beq	r18,zero,10152b0 <___svfprintf_internal_r+0xa20>
 10151e8:	d9403117 	ldw	r5,196(sp)
 10151ec:	d8802a17 	ldw	r2,168(sp)
 10151f0:	28a1c83a 	sub	r16,r5,r2
 10151f4:	04002e0e 	bge	zero,r16,10152b0 <___svfprintf_internal_r+0xa20>
 10151f8:	04400404 	movi	r17,16
 10151fc:	d8801f17 	ldw	r2,124(sp)
 1015200:	8c04b90e 	bge	r17,r16,10164e8 <___svfprintf_internal_r+0x1c58>
 1015204:	014040b4 	movhi	r5,258
 1015208:	2959d484 	addi	r5,r5,26450
 101520c:	d9403515 	stw	r5,212(sp)
 1015210:	048001c4 	movi	r18,7
 1015214:	dd002c17 	ldw	r20,176(sp)
 1015218:	00000306 	br	1015228 <___svfprintf_internal_r+0x998>
 101521c:	843ffc04 	addi	r16,r16,-16
 1015220:	42000204 	addi	r8,r8,8
 1015224:	8c00130e 	bge	r17,r16,1015274 <___svfprintf_internal_r+0x9e4>
 1015228:	010040b4 	movhi	r4,258
 101522c:	18c00404 	addi	r3,r3,16
 1015230:	10800044 	addi	r2,r2,1
 1015234:	2119d484 	addi	r4,r4,26450
 1015238:	41000015 	stw	r4,0(r8)
 101523c:	44400115 	stw	r17,4(r8)
 1015240:	d8c02015 	stw	r3,128(sp)
 1015244:	d8801f15 	stw	r2,124(sp)
 1015248:	90bff40e 	bge	r18,r2,101521c <__alt_data_end+0xff01521c>
 101524c:	d9801e04 	addi	r6,sp,120
 1015250:	a00b883a 	mov	r5,r20
 1015254:	9809883a 	mov	r4,r19
 1015258:	101b29c0 	call	101b29c <__ssprint_r>
 101525c:	103e711e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015260:	843ffc04 	addi	r16,r16,-16
 1015264:	d8c02017 	ldw	r3,128(sp)
 1015268:	d8801f17 	ldw	r2,124(sp)
 101526c:	da000404 	addi	r8,sp,16
 1015270:	8c3fed16 	blt	r17,r16,1015228 <__alt_data_end+0xff015228>
 1015274:	d9403517 	ldw	r5,212(sp)
 1015278:	1c07883a 	add	r3,r3,r16
 101527c:	10800044 	addi	r2,r2,1
 1015280:	41400015 	stw	r5,0(r8)
 1015284:	44000115 	stw	r16,4(r8)
 1015288:	d8c02015 	stw	r3,128(sp)
 101528c:	d8801f15 	stw	r2,124(sp)
 1015290:	010001c4 	movi	r4,7
 1015294:	2080060e 	bge	r4,r2,10152b0 <___svfprintf_internal_r+0xa20>
 1015298:	d9402c17 	ldw	r5,176(sp)
 101529c:	d9801e04 	addi	r6,sp,120
 10152a0:	9809883a 	mov	r4,r19
 10152a4:	101b29c0 	call	101b29c <__ssprint_r>
 10152a8:	103e5e1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10152ac:	d8c02017 	ldw	r3,128(sp)
 10152b0:	d8803117 	ldw	r2,196(sp)
 10152b4:	d9002a17 	ldw	r4,168(sp)
 10152b8:	1100010e 	bge	r2,r4,10152c0 <___svfprintf_internal_r+0xa30>
 10152bc:	2005883a 	mov	r2,r4
 10152c0:	d9402f17 	ldw	r5,188(sp)
 10152c4:	288b883a 	add	r5,r5,r2
 10152c8:	d9402f15 	stw	r5,188(sp)
 10152cc:	18019c1e 	bne	r3,zero,1015940 <___svfprintf_internal_r+0x10b0>
 10152d0:	b8800007 	ldb	r2,0(r23)
 10152d4:	d8001f15 	stw	zero,124(sp)
 10152d8:	da000404 	addi	r8,sp,16
 10152dc:	103d991e 	bne	r2,zero,1014944 <__alt_data_end+0xff014944>
 10152e0:	b821883a 	mov	r16,r23
 10152e4:	003daf06 	br	10149a4 <__alt_data_end+0xff0149a4>
 10152e8:	18c03fcc 	andi	r3,r3,255
 10152ec:	1805c71e 	bne	r3,zero,1016a0c <___svfprintf_internal_r+0x217c>
 10152f0:	94800414 	ori	r18,r18,16
 10152f4:	9080080c 	andi	r2,r18,32
 10152f8:	10020126 	beq	r2,zero,1015b00 <___svfprintf_internal_r+0x1270>
 10152fc:	d8802d17 	ldw	r2,180(sp)
 1015300:	d9002917 	ldw	r4,164(sp)
 1015304:	d8002785 	stb	zero,158(sp)
 1015308:	10c00204 	addi	r3,r2,8
 101530c:	15000017 	ldw	r20,0(r2)
 1015310:	15800117 	ldw	r22,4(r2)
 1015314:	20038e16 	blt	r4,zero,1016150 <___svfprintf_internal_r+0x18c0>
 1015318:	013fdfc4 	movi	r4,-129
 101531c:	a584b03a 	or	r2,r20,r22
 1015320:	d8c02d15 	stw	r3,180(sp)
 1015324:	9124703a 	and	r18,r18,r4
 1015328:	0039883a 	mov	fp,zero
 101532c:	103eb61e 	bne	r2,zero,1014e08 <__alt_data_end+0xff014e08>
 1015330:	d8802917 	ldw	r2,164(sp)
 1015334:	1002c81e 	bne	r2,zero,1015e58 <___svfprintf_internal_r+0x15c8>
 1015338:	d8002915 	stw	zero,164(sp)
 101533c:	d8002e15 	stw	zero,184(sp)
 1015340:	dc001e04 	addi	r16,sp,120
 1015344:	003efa06 	br	1014f30 <__alt_data_end+0xff014f30>
 1015348:	18c03fcc 	andi	r3,r3,255
 101534c:	1805ad1e 	bne	r3,zero,1016a04 <___svfprintf_internal_r+0x2174>
 1015350:	014040b4 	movhi	r5,258
 1015354:	2959c404 	addi	r5,r5,26384
 1015358:	d9403a15 	stw	r5,232(sp)
 101535c:	9080080c 	andi	r2,r18,32
 1015360:	10006126 	beq	r2,zero,10154e8 <___svfprintf_internal_r+0xc58>
 1015364:	d8802d17 	ldw	r2,180(sp)
 1015368:	15000017 	ldw	r20,0(r2)
 101536c:	15800117 	ldw	r22,4(r2)
 1015370:	10800204 	addi	r2,r2,8
 1015374:	d8802d15 	stw	r2,180(sp)
 1015378:	9080004c 	andi	r2,r18,1
 101537c:	10018e26 	beq	r2,zero,10159b8 <___svfprintf_internal_r+0x1128>
 1015380:	a584b03a 	or	r2,r20,r22
 1015384:	10030926 	beq	r2,zero,1015fac <___svfprintf_internal_r+0x171c>
 1015388:	d8c02917 	ldw	r3,164(sp)
 101538c:	00800c04 	movi	r2,48
 1015390:	d8802705 	stb	r2,156(sp)
 1015394:	dc402745 	stb	r17,157(sp)
 1015398:	d8002785 	stb	zero,158(sp)
 101539c:	90800094 	ori	r2,r18,2
 10153a0:	18048716 	blt	r3,zero,10165c0 <___svfprintf_internal_r+0x1d30>
 10153a4:	00bfdfc4 	movi	r2,-129
 10153a8:	90a4703a 	and	r18,r18,r2
 10153ac:	94800094 	ori	r18,r18,2
 10153b0:	0039883a 	mov	fp,zero
 10153b4:	d9003a17 	ldw	r4,232(sp)
 10153b8:	dc001e04 	addi	r16,sp,120
 10153bc:	a08003cc 	andi	r2,r20,15
 10153c0:	b006973a 	slli	r3,r22,28
 10153c4:	2085883a 	add	r2,r4,r2
 10153c8:	a028d13a 	srli	r20,r20,4
 10153cc:	10800003 	ldbu	r2,0(r2)
 10153d0:	b02cd13a 	srli	r22,r22,4
 10153d4:	843fffc4 	addi	r16,r16,-1
 10153d8:	1d28b03a 	or	r20,r3,r20
 10153dc:	80800005 	stb	r2,0(r16)
 10153e0:	a584b03a 	or	r2,r20,r22
 10153e4:	103ff51e 	bne	r2,zero,10153bc <__alt_data_end+0xff0153bc>
 10153e8:	d8c02817 	ldw	r3,160(sp)
 10153ec:	1c07c83a 	sub	r3,r3,r16
 10153f0:	d8c02e15 	stw	r3,184(sp)
 10153f4:	003ece06 	br	1014f30 <__alt_data_end+0xff014f30>
 10153f8:	d8c02d17 	ldw	r3,180(sp)
 10153fc:	d9002d17 	ldw	r4,180(sp)
 1015400:	d8002785 	stb	zero,158(sp)
 1015404:	18800017 	ldw	r2,0(r3)
 1015408:	21000104 	addi	r4,r4,4
 101540c:	00c00044 	movi	r3,1
 1015410:	d8c02a15 	stw	r3,168(sp)
 1015414:	d8801405 	stb	r2,80(sp)
 1015418:	d9002d15 	stw	r4,180(sp)
 101541c:	d8c02e15 	stw	r3,184(sp)
 1015420:	d8002915 	stw	zero,164(sp)
 1015424:	d8003215 	stw	zero,200(sp)
 1015428:	dc001404 	addi	r16,sp,80
 101542c:	0039883a 	mov	fp,zero
 1015430:	003ecc06 	br	1014f64 <__alt_data_end+0xff014f64>
 1015434:	18c03fcc 	andi	r3,r3,255
 1015438:	183e9226 	beq	r3,zero,1014e84 <__alt_data_end+0xff014e84>
 101543c:	d9c02785 	stb	r7,158(sp)
 1015440:	003e9006 	br	1014e84 <__alt_data_end+0xff014e84>
 1015444:	00c00044 	movi	r3,1
 1015448:	01c00ac4 	movi	r7,43
 101544c:	bc400007 	ldb	r17,0(r23)
 1015450:	003d6306 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015454:	94800814 	ori	r18,r18,32
 1015458:	bc400007 	ldb	r17,0(r23)
 101545c:	003d6006 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015460:	d8c02d17 	ldw	r3,180(sp)
 1015464:	d8002785 	stb	zero,158(sp)
 1015468:	1c000017 	ldw	r16,0(r3)
 101546c:	1d000104 	addi	r20,r3,4
 1015470:	80040f26 	beq	r16,zero,10164b0 <___svfprintf_internal_r+0x1c20>
 1015474:	d9002917 	ldw	r4,164(sp)
 1015478:	2003dc16 	blt	r4,zero,10163ec <___svfprintf_internal_r+0x1b5c>
 101547c:	200d883a 	mov	r6,r4
 1015480:	000b883a 	mov	r5,zero
 1015484:	8009883a 	mov	r4,r16
 1015488:	da003e15 	stw	r8,248(sp)
 101548c:	10195f40 	call	10195f4 <memchr>
 1015490:	da003e17 	ldw	r8,248(sp)
 1015494:	10045826 	beq	r2,zero,10165f8 <___svfprintf_internal_r+0x1d68>
 1015498:	1405c83a 	sub	r2,r2,r16
 101549c:	d8802e15 	stw	r2,184(sp)
 10154a0:	1003d816 	blt	r2,zero,1016404 <___svfprintf_internal_r+0x1b74>
 10154a4:	df002783 	ldbu	fp,158(sp)
 10154a8:	d8802a15 	stw	r2,168(sp)
 10154ac:	dd002d15 	stw	r20,180(sp)
 10154b0:	d8002915 	stw	zero,164(sp)
 10154b4:	d8003215 	stw	zero,200(sp)
 10154b8:	003ea306 	br	1014f48 <__alt_data_end+0xff014f48>
 10154bc:	18c03fcc 	andi	r3,r3,255
 10154c0:	183f8c26 	beq	r3,zero,10152f4 <__alt_data_end+0xff0152f4>
 10154c4:	d9c02785 	stb	r7,158(sp)
 10154c8:	003f8a06 	br	10152f4 <__alt_data_end+0xff0152f4>
 10154cc:	18c03fcc 	andi	r3,r3,255
 10154d0:	1805631e 	bne	r3,zero,1016a60 <___svfprintf_internal_r+0x21d0>
 10154d4:	014040b4 	movhi	r5,258
 10154d8:	2959c904 	addi	r5,r5,26404
 10154dc:	d9403a15 	stw	r5,232(sp)
 10154e0:	9080080c 	andi	r2,r18,32
 10154e4:	103f9f1e 	bne	r2,zero,1015364 <__alt_data_end+0xff015364>
 10154e8:	9080040c 	andi	r2,r18,16
 10154ec:	10029c26 	beq	r2,zero,1015f60 <___svfprintf_internal_r+0x16d0>
 10154f0:	d8c02d17 	ldw	r3,180(sp)
 10154f4:	002d883a 	mov	r22,zero
 10154f8:	1d000017 	ldw	r20,0(r3)
 10154fc:	18c00104 	addi	r3,r3,4
 1015500:	d8c02d15 	stw	r3,180(sp)
 1015504:	003f9c06 	br	1015378 <__alt_data_end+0xff015378>
 1015508:	94800054 	ori	r18,r18,1
 101550c:	bc400007 	ldb	r17,0(r23)
 1015510:	003d3306 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015514:	38803fcc 	andi	r2,r7,255
 1015518:	1080201c 	xori	r2,r2,128
 101551c:	10bfe004 	addi	r2,r2,-128
 1015520:	1002971e 	bne	r2,zero,1015f80 <___svfprintf_internal_r+0x16f0>
 1015524:	00c00044 	movi	r3,1
 1015528:	01c00804 	movi	r7,32
 101552c:	bc400007 	ldb	r17,0(r23)
 1015530:	003d2b06 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015534:	18c03fcc 	andi	r3,r3,255
 1015538:	183e2326 	beq	r3,zero,1014dc8 <__alt_data_end+0xff014dc8>
 101553c:	d9c02785 	stb	r7,158(sp)
 1015540:	003e2106 	br	1014dc8 <__alt_data_end+0xff014dc8>
 1015544:	bc400007 	ldb	r17,0(r23)
 1015548:	8a430426 	beq	r17,r9,101615c <___svfprintf_internal_r+0x18cc>
 101554c:	94800414 	ori	r18,r18,16
 1015550:	003d2306 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015554:	18c03fcc 	andi	r3,r3,255
 1015558:	18053f1e 	bne	r3,zero,1016a58 <___svfprintf_internal_r+0x21c8>
 101555c:	9080080c 	andi	r2,r18,32
 1015560:	10028926 	beq	r2,zero,1015f88 <___svfprintf_internal_r+0x16f8>
 1015564:	d9402d17 	ldw	r5,180(sp)
 1015568:	d9002f17 	ldw	r4,188(sp)
 101556c:	28800017 	ldw	r2,0(r5)
 1015570:	2007d7fa 	srai	r3,r4,31
 1015574:	29400104 	addi	r5,r5,4
 1015578:	d9402d15 	stw	r5,180(sp)
 101557c:	11000015 	stw	r4,0(r2)
 1015580:	10c00115 	stw	r3,4(r2)
 1015584:	003ced06 	br	101493c <__alt_data_end+0xff01493c>
 1015588:	94801014 	ori	r18,r18,64
 101558c:	bc400007 	ldb	r17,0(r23)
 1015590:	003d1306 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015594:	010040b4 	movhi	r4,258
 1015598:	2119c904 	addi	r4,r4,26404
 101559c:	0039883a 	mov	fp,zero
 10155a0:	d9003a15 	stw	r4,232(sp)
 10155a4:	04401e04 	movi	r17,120
 10155a8:	003f8206 	br	10153b4 <__alt_data_end+0xff0153b4>
 10155ac:	18c03fcc 	andi	r3,r3,255
 10155b0:	1805221e 	bne	r3,zero,1016a3c <___svfprintf_internal_r+0x21ac>
 10155b4:	883d9526 	beq	r17,zero,1014c0c <__alt_data_end+0xff014c0c>
 10155b8:	00c00044 	movi	r3,1
 10155bc:	d8c02a15 	stw	r3,168(sp)
 10155c0:	dc401405 	stb	r17,80(sp)
 10155c4:	d8002785 	stb	zero,158(sp)
 10155c8:	003f9406 	br	101541c <__alt_data_end+0xff01541c>
 10155cc:	010040b4 	movhi	r4,258
 10155d0:	2119c904 	addi	r4,r4,26404
 10155d4:	d9003a15 	stw	r4,232(sp)
 10155d8:	d8c02d15 	stw	r3,180(sp)
 10155dc:	1025883a 	mov	r18,r2
 10155e0:	04401e04 	movi	r17,120
 10155e4:	a584b03a 	or	r2,r20,r22
 10155e8:	1000fa1e 	bne	r2,zero,10159d4 <___svfprintf_internal_r+0x1144>
 10155ec:	0039883a 	mov	fp,zero
 10155f0:	00800084 	movi	r2,2
 10155f4:	10803fcc 	andi	r2,r2,255
 10155f8:	00c00044 	movi	r3,1
 10155fc:	10c21626 	beq	r2,r3,1015e58 <___svfprintf_internal_r+0x15c8>
 1015600:	00c00084 	movi	r3,2
 1015604:	10fe301e 	bne	r2,r3,1014ec8 <__alt_data_end+0xff014ec8>
 1015608:	003d7606 	br	1014be4 <__alt_data_end+0xff014be4>
 101560c:	d8c02017 	ldw	r3,128(sp)
 1015610:	003e9506 	br	1015068 <__alt_data_end+0xff015068>
 1015614:	00801944 	movi	r2,101
 1015618:	14407c0e 	bge	r2,r17,101580c <___svfprintf_internal_r+0xf7c>
 101561c:	d9003617 	ldw	r4,216(sp)
 1015620:	d9403717 	ldw	r5,220(sp)
 1015624:	000d883a 	mov	r6,zero
 1015628:	000f883a 	mov	r7,zero
 101562c:	d8c03d15 	stw	r3,244(sp)
 1015630:	da003e15 	stw	r8,248(sp)
 1015634:	1020e080 	call	1020e08 <__eqdf2>
 1015638:	d8c03d17 	ldw	r3,244(sp)
 101563c:	da003e17 	ldw	r8,248(sp)
 1015640:	1000f51e 	bne	r2,zero,1015a18 <___svfprintf_internal_r+0x1188>
 1015644:	d8801f17 	ldw	r2,124(sp)
 1015648:	010040b4 	movhi	r4,258
 101564c:	2119d004 	addi	r4,r4,26432
 1015650:	18c00044 	addi	r3,r3,1
 1015654:	10800044 	addi	r2,r2,1
 1015658:	41000015 	stw	r4,0(r8)
 101565c:	01000044 	movi	r4,1
 1015660:	41000115 	stw	r4,4(r8)
 1015664:	d8c02015 	stw	r3,128(sp)
 1015668:	d8801f15 	stw	r2,124(sp)
 101566c:	010001c4 	movi	r4,7
 1015670:	20826616 	blt	r4,r2,101600c <___svfprintf_internal_r+0x177c>
 1015674:	42000204 	addi	r8,r8,8
 1015678:	d8802617 	ldw	r2,152(sp)
 101567c:	d9403317 	ldw	r5,204(sp)
 1015680:	11400216 	blt	r2,r5,101568c <___svfprintf_internal_r+0xdfc>
 1015684:	9080004c 	andi	r2,r18,1
 1015688:	103ed526 	beq	r2,zero,10151e0 <__alt_data_end+0xff0151e0>
 101568c:	d8803817 	ldw	r2,224(sp)
 1015690:	d9003417 	ldw	r4,208(sp)
 1015694:	d9403817 	ldw	r5,224(sp)
 1015698:	1887883a 	add	r3,r3,r2
 101569c:	d8801f17 	ldw	r2,124(sp)
 10156a0:	41000015 	stw	r4,0(r8)
 10156a4:	41400115 	stw	r5,4(r8)
 10156a8:	10800044 	addi	r2,r2,1
 10156ac:	d8c02015 	stw	r3,128(sp)
 10156b0:	d8801f15 	stw	r2,124(sp)
 10156b4:	010001c4 	movi	r4,7
 10156b8:	2082af16 	blt	r4,r2,1016178 <___svfprintf_internal_r+0x18e8>
 10156bc:	42000204 	addi	r8,r8,8
 10156c0:	d8803317 	ldw	r2,204(sp)
 10156c4:	143fffc4 	addi	r16,r2,-1
 10156c8:	043ec50e 	bge	zero,r16,10151e0 <__alt_data_end+0xff0151e0>
 10156cc:	04400404 	movi	r17,16
 10156d0:	d8801f17 	ldw	r2,124(sp)
 10156d4:	8c00860e 	bge	r17,r16,10158f0 <___svfprintf_internal_r+0x1060>
 10156d8:	014040b4 	movhi	r5,258
 10156dc:	2959d084 	addi	r5,r5,26434
 10156e0:	d9402b15 	stw	r5,172(sp)
 10156e4:	058001c4 	movi	r22,7
 10156e8:	dd002c17 	ldw	r20,176(sp)
 10156ec:	00000306 	br	10156fc <___svfprintf_internal_r+0xe6c>
 10156f0:	42000204 	addi	r8,r8,8
 10156f4:	843ffc04 	addi	r16,r16,-16
 10156f8:	8c00800e 	bge	r17,r16,10158fc <___svfprintf_internal_r+0x106c>
 10156fc:	18c00404 	addi	r3,r3,16
 1015700:	10800044 	addi	r2,r2,1
 1015704:	45400015 	stw	r21,0(r8)
 1015708:	44400115 	stw	r17,4(r8)
 101570c:	d8c02015 	stw	r3,128(sp)
 1015710:	d8801f15 	stw	r2,124(sp)
 1015714:	b0bff60e 	bge	r22,r2,10156f0 <__alt_data_end+0xff0156f0>
 1015718:	d9801e04 	addi	r6,sp,120
 101571c:	a00b883a 	mov	r5,r20
 1015720:	9809883a 	mov	r4,r19
 1015724:	101b29c0 	call	101b29c <__ssprint_r>
 1015728:	103d3e1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 101572c:	d8c02017 	ldw	r3,128(sp)
 1015730:	d8801f17 	ldw	r2,124(sp)
 1015734:	da000404 	addi	r8,sp,16
 1015738:	003fee06 	br	10156f4 <__alt_data_end+0xff0156f4>
 101573c:	d9403117 	ldw	r5,196(sp)
 1015740:	d8802a17 	ldw	r2,168(sp)
 1015744:	28adc83a 	sub	r22,r5,r2
 1015748:	05be650e 	bge	zero,r22,10150e0 <__alt_data_end+0xff0150e0>
 101574c:	07000404 	movi	fp,16
 1015750:	d8801f17 	ldw	r2,124(sp)
 1015754:	e583a20e 	bge	fp,r22,10165e0 <___svfprintf_internal_r+0x1d50>
 1015758:	014040b4 	movhi	r5,258
 101575c:	2959d084 	addi	r5,r5,26434
 1015760:	dc403015 	stw	r17,192(sp)
 1015764:	d9402b15 	stw	r5,172(sp)
 1015768:	b023883a 	mov	r17,r22
 101576c:	050001c4 	movi	r20,7
 1015770:	902d883a 	mov	r22,r18
 1015774:	8025883a 	mov	r18,r16
 1015778:	dc002c17 	ldw	r16,176(sp)
 101577c:	00000306 	br	101578c <___svfprintf_internal_r+0xefc>
 1015780:	8c7ffc04 	addi	r17,r17,-16
 1015784:	42000204 	addi	r8,r8,8
 1015788:	e440110e 	bge	fp,r17,10157d0 <___svfprintf_internal_r+0xf40>
 101578c:	18c00404 	addi	r3,r3,16
 1015790:	10800044 	addi	r2,r2,1
 1015794:	45400015 	stw	r21,0(r8)
 1015798:	47000115 	stw	fp,4(r8)
 101579c:	d8c02015 	stw	r3,128(sp)
 10157a0:	d8801f15 	stw	r2,124(sp)
 10157a4:	a0bff60e 	bge	r20,r2,1015780 <__alt_data_end+0xff015780>
 10157a8:	d9801e04 	addi	r6,sp,120
 10157ac:	800b883a 	mov	r5,r16
 10157b0:	9809883a 	mov	r4,r19
 10157b4:	101b29c0 	call	101b29c <__ssprint_r>
 10157b8:	103d1a1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10157bc:	8c7ffc04 	addi	r17,r17,-16
 10157c0:	d8c02017 	ldw	r3,128(sp)
 10157c4:	d8801f17 	ldw	r2,124(sp)
 10157c8:	da000404 	addi	r8,sp,16
 10157cc:	e47fef16 	blt	fp,r17,101578c <__alt_data_end+0xff01578c>
 10157d0:	9021883a 	mov	r16,r18
 10157d4:	b025883a 	mov	r18,r22
 10157d8:	882d883a 	mov	r22,r17
 10157dc:	dc403017 	ldw	r17,192(sp)
 10157e0:	d9002b17 	ldw	r4,172(sp)
 10157e4:	1d87883a 	add	r3,r3,r22
 10157e8:	10800044 	addi	r2,r2,1
 10157ec:	41000015 	stw	r4,0(r8)
 10157f0:	45800115 	stw	r22,4(r8)
 10157f4:	d8c02015 	stw	r3,128(sp)
 10157f8:	d8801f15 	stw	r2,124(sp)
 10157fc:	010001c4 	movi	r4,7
 1015800:	20819a16 	blt	r4,r2,1015e6c <___svfprintf_internal_r+0x15dc>
 1015804:	42000204 	addi	r8,r8,8
 1015808:	003e3506 	br	10150e0 <__alt_data_end+0xff0150e0>
 101580c:	d9403317 	ldw	r5,204(sp)
 1015810:	00800044 	movi	r2,1
 1015814:	18c00044 	addi	r3,r3,1
 1015818:	1141710e 	bge	r2,r5,1015de0 <___svfprintf_internal_r+0x1550>
 101581c:	dc401f17 	ldw	r17,124(sp)
 1015820:	00800044 	movi	r2,1
 1015824:	40800115 	stw	r2,4(r8)
 1015828:	8c400044 	addi	r17,r17,1
 101582c:	44000015 	stw	r16,0(r8)
 1015830:	d8c02015 	stw	r3,128(sp)
 1015834:	dc401f15 	stw	r17,124(sp)
 1015838:	008001c4 	movi	r2,7
 101583c:	14417416 	blt	r2,r17,1015e10 <___svfprintf_internal_r+0x1580>
 1015840:	42000204 	addi	r8,r8,8
 1015844:	d8803817 	ldw	r2,224(sp)
 1015848:	d9003417 	ldw	r4,208(sp)
 101584c:	8c400044 	addi	r17,r17,1
 1015850:	10c7883a 	add	r3,r2,r3
 1015854:	40800115 	stw	r2,4(r8)
 1015858:	41000015 	stw	r4,0(r8)
 101585c:	d8c02015 	stw	r3,128(sp)
 1015860:	dc401f15 	stw	r17,124(sp)
 1015864:	008001c4 	movi	r2,7
 1015868:	14417216 	blt	r2,r17,1015e34 <___svfprintf_internal_r+0x15a4>
 101586c:	45800204 	addi	r22,r8,8
 1015870:	d9003617 	ldw	r4,216(sp)
 1015874:	d9403717 	ldw	r5,220(sp)
 1015878:	000d883a 	mov	r6,zero
 101587c:	000f883a 	mov	r7,zero
 1015880:	d8c03d15 	stw	r3,244(sp)
 1015884:	1020e080 	call	1020e08 <__eqdf2>
 1015888:	d8c03d17 	ldw	r3,244(sp)
 101588c:	1000b326 	beq	r2,zero,1015b5c <___svfprintf_internal_r+0x12cc>
 1015890:	d9403317 	ldw	r5,204(sp)
 1015894:	84000044 	addi	r16,r16,1
 1015898:	8c400044 	addi	r17,r17,1
 101589c:	28bfffc4 	addi	r2,r5,-1
 10158a0:	1887883a 	add	r3,r3,r2
 10158a4:	b0800115 	stw	r2,4(r22)
 10158a8:	b4000015 	stw	r16,0(r22)
 10158ac:	d8c02015 	stw	r3,128(sp)
 10158b0:	dc401f15 	stw	r17,124(sp)
 10158b4:	008001c4 	movi	r2,7
 10158b8:	1440d216 	blt	r2,r17,1015c04 <___svfprintf_internal_r+0x1374>
 10158bc:	b5800204 	addi	r22,r22,8
 10158c0:	d9003b17 	ldw	r4,236(sp)
 10158c4:	df0022c4 	addi	fp,sp,139
 10158c8:	8c400044 	addi	r17,r17,1
 10158cc:	20c7883a 	add	r3,r4,r3
 10158d0:	b7000015 	stw	fp,0(r22)
 10158d4:	b1000115 	stw	r4,4(r22)
 10158d8:	d8c02015 	stw	r3,128(sp)
 10158dc:	dc401f15 	stw	r17,124(sp)
 10158e0:	008001c4 	movi	r2,7
 10158e4:	14400e16 	blt	r2,r17,1015920 <___svfprintf_internal_r+0x1090>
 10158e8:	b2000204 	addi	r8,r22,8
 10158ec:	003e3c06 	br	10151e0 <__alt_data_end+0xff0151e0>
 10158f0:	010040b4 	movhi	r4,258
 10158f4:	2119d084 	addi	r4,r4,26434
 10158f8:	d9002b15 	stw	r4,172(sp)
 10158fc:	d9002b17 	ldw	r4,172(sp)
 1015900:	1c07883a 	add	r3,r3,r16
 1015904:	44000115 	stw	r16,4(r8)
 1015908:	41000015 	stw	r4,0(r8)
 101590c:	10800044 	addi	r2,r2,1
 1015910:	d8c02015 	stw	r3,128(sp)
 1015914:	d8801f15 	stw	r2,124(sp)
 1015918:	010001c4 	movi	r4,7
 101591c:	20be2f0e 	bge	r4,r2,10151dc <__alt_data_end+0xff0151dc>
 1015920:	d9402c17 	ldw	r5,176(sp)
 1015924:	d9801e04 	addi	r6,sp,120
 1015928:	9809883a 	mov	r4,r19
 101592c:	101b29c0 	call	101b29c <__ssprint_r>
 1015930:	103cbc1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015934:	d8c02017 	ldw	r3,128(sp)
 1015938:	da000404 	addi	r8,sp,16
 101593c:	003e2806 	br	10151e0 <__alt_data_end+0xff0151e0>
 1015940:	d9402c17 	ldw	r5,176(sp)
 1015944:	d9801e04 	addi	r6,sp,120
 1015948:	9809883a 	mov	r4,r19
 101594c:	101b29c0 	call	101b29c <__ssprint_r>
 1015950:	103e5f26 	beq	r2,zero,10152d0 <__alt_data_end+0xff0152d0>
 1015954:	003cb306 	br	1014c24 <__alt_data_end+0xff014c24>
 1015958:	d9402c17 	ldw	r5,176(sp)
 101595c:	d9801e04 	addi	r6,sp,120
 1015960:	9809883a 	mov	r4,r19
 1015964:	101b29c0 	call	101b29c <__ssprint_r>
 1015968:	103cae1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 101596c:	d8c02017 	ldw	r3,128(sp)
 1015970:	da000404 	addi	r8,sp,16
 1015974:	003e0d06 	br	10151ac <__alt_data_end+0xff0151ac>
 1015978:	d9402c17 	ldw	r5,176(sp)
 101597c:	d9801e04 	addi	r6,sp,120
 1015980:	9809883a 	mov	r4,r19
 1015984:	101b29c0 	call	101b29c <__ssprint_r>
 1015988:	103ca61e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 101598c:	d8c02017 	ldw	r3,128(sp)
 1015990:	da000404 	addi	r8,sp,16
 1015994:	003dc106 	br	101509c <__alt_data_end+0xff01509c>
 1015998:	d9402c17 	ldw	r5,176(sp)
 101599c:	d9801e04 	addi	r6,sp,120
 10159a0:	9809883a 	mov	r4,r19
 10159a4:	101b29c0 	call	101b29c <__ssprint_r>
 10159a8:	103c9e1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10159ac:	d8c02017 	ldw	r3,128(sp)
 10159b0:	da000404 	addi	r8,sp,16
 10159b4:	003dc706 	br	10150d4 <__alt_data_end+0xff0150d4>
 10159b8:	d8802917 	ldw	r2,164(sp)
 10159bc:	d8002785 	stb	zero,158(sp)
 10159c0:	103f0816 	blt	r2,zero,10155e4 <__alt_data_end+0xff0155e4>
 10159c4:	00ffdfc4 	movi	r3,-129
 10159c8:	a584b03a 	or	r2,r20,r22
 10159cc:	90e4703a 	and	r18,r18,r3
 10159d0:	103c8126 	beq	r2,zero,1014bd8 <__alt_data_end+0xff014bd8>
 10159d4:	0039883a 	mov	fp,zero
 10159d8:	003e7606 	br	10153b4 <__alt_data_end+0xff0153b4>
 10159dc:	9080040c 	andi	r2,r18,16
 10159e0:	10013d26 	beq	r2,zero,1015ed8 <___svfprintf_internal_r+0x1648>
 10159e4:	d9002d17 	ldw	r4,180(sp)
 10159e8:	d9402917 	ldw	r5,164(sp)
 10159ec:	d8002785 	stb	zero,158(sp)
 10159f0:	20800104 	addi	r2,r4,4
 10159f4:	25000017 	ldw	r20,0(r4)
 10159f8:	002d883a 	mov	r22,zero
 10159fc:	28013f16 	blt	r5,zero,1015efc <___svfprintf_internal_r+0x166c>
 1015a00:	00ffdfc4 	movi	r3,-129
 1015a04:	d8802d15 	stw	r2,180(sp)
 1015a08:	90e4703a 	and	r18,r18,r3
 1015a0c:	a03d2b26 	beq	r20,zero,1014ebc <__alt_data_end+0xff014ebc>
 1015a10:	0039883a 	mov	fp,zero
 1015a14:	003d2e06 	br	1014ed0 <__alt_data_end+0xff014ed0>
 1015a18:	dc402617 	ldw	r17,152(sp)
 1015a1c:	0441830e 	bge	zero,r17,101602c <___svfprintf_internal_r+0x179c>
 1015a20:	dc403217 	ldw	r17,200(sp)
 1015a24:	d8803317 	ldw	r2,204(sp)
 1015a28:	1440010e 	bge	r2,r17,1015a30 <___svfprintf_internal_r+0x11a0>
 1015a2c:	1023883a 	mov	r17,r2
 1015a30:	04400a0e 	bge	zero,r17,1015a5c <___svfprintf_internal_r+0x11cc>
 1015a34:	d8801f17 	ldw	r2,124(sp)
 1015a38:	1c47883a 	add	r3,r3,r17
 1015a3c:	44000015 	stw	r16,0(r8)
 1015a40:	10800044 	addi	r2,r2,1
 1015a44:	44400115 	stw	r17,4(r8)
 1015a48:	d8c02015 	stw	r3,128(sp)
 1015a4c:	d8801f15 	stw	r2,124(sp)
 1015a50:	010001c4 	movi	r4,7
 1015a54:	20827516 	blt	r4,r2,101642c <___svfprintf_internal_r+0x1b9c>
 1015a58:	42000204 	addi	r8,r8,8
 1015a5c:	88027b16 	blt	r17,zero,101644c <___svfprintf_internal_r+0x1bbc>
 1015a60:	d9003217 	ldw	r4,200(sp)
 1015a64:	2463c83a 	sub	r17,r4,r17
 1015a68:	0440990e 	bge	zero,r17,1015cd0 <___svfprintf_internal_r+0x1440>
 1015a6c:	05800404 	movi	r22,16
 1015a70:	d8801f17 	ldw	r2,124(sp)
 1015a74:	b441530e 	bge	r22,r17,1015fc4 <___svfprintf_internal_r+0x1734>
 1015a78:	010040b4 	movhi	r4,258
 1015a7c:	2119d084 	addi	r4,r4,26434
 1015a80:	d9002b15 	stw	r4,172(sp)
 1015a84:	070001c4 	movi	fp,7
 1015a88:	dd002c17 	ldw	r20,176(sp)
 1015a8c:	00000306 	br	1015a9c <___svfprintf_internal_r+0x120c>
 1015a90:	42000204 	addi	r8,r8,8
 1015a94:	8c7ffc04 	addi	r17,r17,-16
 1015a98:	b4414d0e 	bge	r22,r17,1015fd0 <___svfprintf_internal_r+0x1740>
 1015a9c:	18c00404 	addi	r3,r3,16
 1015aa0:	10800044 	addi	r2,r2,1
 1015aa4:	45400015 	stw	r21,0(r8)
 1015aa8:	45800115 	stw	r22,4(r8)
 1015aac:	d8c02015 	stw	r3,128(sp)
 1015ab0:	d8801f15 	stw	r2,124(sp)
 1015ab4:	e0bff60e 	bge	fp,r2,1015a90 <__alt_data_end+0xff015a90>
 1015ab8:	d9801e04 	addi	r6,sp,120
 1015abc:	a00b883a 	mov	r5,r20
 1015ac0:	9809883a 	mov	r4,r19
 1015ac4:	101b29c0 	call	101b29c <__ssprint_r>
 1015ac8:	103c561e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015acc:	d8c02017 	ldw	r3,128(sp)
 1015ad0:	d8801f17 	ldw	r2,124(sp)
 1015ad4:	da000404 	addi	r8,sp,16
 1015ad8:	003fee06 	br	1015a94 <__alt_data_end+0xff015a94>
 1015adc:	d9402c17 	ldw	r5,176(sp)
 1015ae0:	d9801e04 	addi	r6,sp,120
 1015ae4:	9809883a 	mov	r4,r19
 1015ae8:	101b29c0 	call	101b29c <__ssprint_r>
 1015aec:	103c4d1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015af0:	d8c02017 	ldw	r3,128(sp)
 1015af4:	df002787 	ldb	fp,158(sp)
 1015af8:	da000404 	addi	r8,sp,16
 1015afc:	003d5a06 	br	1015068 <__alt_data_end+0xff015068>
 1015b00:	9080040c 	andi	r2,r18,16
 1015b04:	10005c26 	beq	r2,zero,1015c78 <___svfprintf_internal_r+0x13e8>
 1015b08:	d9402d17 	ldw	r5,180(sp)
 1015b0c:	d8c02917 	ldw	r3,164(sp)
 1015b10:	d8002785 	stb	zero,158(sp)
 1015b14:	28800104 	addi	r2,r5,4
 1015b18:	2d000017 	ldw	r20,0(r5)
 1015b1c:	002d883a 	mov	r22,zero
 1015b20:	18005e16 	blt	r3,zero,1015c9c <___svfprintf_internal_r+0x140c>
 1015b24:	00ffdfc4 	movi	r3,-129
 1015b28:	d8802d15 	stw	r2,180(sp)
 1015b2c:	90e4703a 	and	r18,r18,r3
 1015b30:	0039883a 	mov	fp,zero
 1015b34:	a03dfe26 	beq	r20,zero,1015330 <__alt_data_end+0xff015330>
 1015b38:	00800244 	movi	r2,9
 1015b3c:	153cb336 	bltu	r2,r20,1014e0c <__alt_data_end+0xff014e0c>
 1015b40:	a5000c04 	addi	r20,r20,48
 1015b44:	dc001dc4 	addi	r16,sp,119
 1015b48:	dd001dc5 	stb	r20,119(sp)
 1015b4c:	d8c02817 	ldw	r3,160(sp)
 1015b50:	1c07c83a 	sub	r3,r3,r16
 1015b54:	d8c02e15 	stw	r3,184(sp)
 1015b58:	003cf506 	br	1014f30 <__alt_data_end+0xff014f30>
 1015b5c:	d8803317 	ldw	r2,204(sp)
 1015b60:	143fffc4 	addi	r16,r2,-1
 1015b64:	043f560e 	bge	zero,r16,10158c0 <__alt_data_end+0xff0158c0>
 1015b68:	07000404 	movi	fp,16
 1015b6c:	e403530e 	bge	fp,r16,10168bc <___svfprintf_internal_r+0x202c>
 1015b70:	014040b4 	movhi	r5,258
 1015b74:	2959d084 	addi	r5,r5,26434
 1015b78:	d9402b15 	stw	r5,172(sp)
 1015b7c:	01c001c4 	movi	r7,7
 1015b80:	dd002c17 	ldw	r20,176(sp)
 1015b84:	00000306 	br	1015b94 <___svfprintf_internal_r+0x1304>
 1015b88:	843ffc04 	addi	r16,r16,-16
 1015b8c:	b5800204 	addi	r22,r22,8
 1015b90:	e400130e 	bge	fp,r16,1015be0 <___svfprintf_internal_r+0x1350>
 1015b94:	18c00404 	addi	r3,r3,16
 1015b98:	8c400044 	addi	r17,r17,1
 1015b9c:	b5400015 	stw	r21,0(r22)
 1015ba0:	b7000115 	stw	fp,4(r22)
 1015ba4:	d8c02015 	stw	r3,128(sp)
 1015ba8:	dc401f15 	stw	r17,124(sp)
 1015bac:	3c7ff60e 	bge	r7,r17,1015b88 <__alt_data_end+0xff015b88>
 1015bb0:	d9801e04 	addi	r6,sp,120
 1015bb4:	a00b883a 	mov	r5,r20
 1015bb8:	9809883a 	mov	r4,r19
 1015bbc:	d9c03d15 	stw	r7,244(sp)
 1015bc0:	101b29c0 	call	101b29c <__ssprint_r>
 1015bc4:	d9c03d17 	ldw	r7,244(sp)
 1015bc8:	103c161e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015bcc:	843ffc04 	addi	r16,r16,-16
 1015bd0:	d8c02017 	ldw	r3,128(sp)
 1015bd4:	dc401f17 	ldw	r17,124(sp)
 1015bd8:	dd800404 	addi	r22,sp,16
 1015bdc:	e43fed16 	blt	fp,r16,1015b94 <__alt_data_end+0xff015b94>
 1015be0:	d8802b17 	ldw	r2,172(sp)
 1015be4:	1c07883a 	add	r3,r3,r16
 1015be8:	8c400044 	addi	r17,r17,1
 1015bec:	b0800015 	stw	r2,0(r22)
 1015bf0:	b4000115 	stw	r16,4(r22)
 1015bf4:	d8c02015 	stw	r3,128(sp)
 1015bf8:	dc401f15 	stw	r17,124(sp)
 1015bfc:	008001c4 	movi	r2,7
 1015c00:	147f2e0e 	bge	r2,r17,10158bc <__alt_data_end+0xff0158bc>
 1015c04:	d9402c17 	ldw	r5,176(sp)
 1015c08:	d9801e04 	addi	r6,sp,120
 1015c0c:	9809883a 	mov	r4,r19
 1015c10:	101b29c0 	call	101b29c <__ssprint_r>
 1015c14:	103c031e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015c18:	d8c02017 	ldw	r3,128(sp)
 1015c1c:	dc401f17 	ldw	r17,124(sp)
 1015c20:	dd800404 	addi	r22,sp,16
 1015c24:	003f2606 	br	10158c0 <__alt_data_end+0xff0158c0>
 1015c28:	9080040c 	andi	r2,r18,16
 1015c2c:	1000c326 	beq	r2,zero,1015f3c <___svfprintf_internal_r+0x16ac>
 1015c30:	d8802d17 	ldw	r2,180(sp)
 1015c34:	15000017 	ldw	r20,0(r2)
 1015c38:	10800104 	addi	r2,r2,4
 1015c3c:	d8802d15 	stw	r2,180(sp)
 1015c40:	a02dd7fa 	srai	r22,r20,31
 1015c44:	b005883a 	mov	r2,r22
 1015c48:	103c680e 	bge	r2,zero,1014dec <__alt_data_end+0xff014dec>
 1015c4c:	0529c83a 	sub	r20,zero,r20
 1015c50:	a004c03a 	cmpne	r2,r20,zero
 1015c54:	05adc83a 	sub	r22,zero,r22
 1015c58:	b0adc83a 	sub	r22,r22,r2
 1015c5c:	d8802917 	ldw	r2,164(sp)
 1015c60:	07000b44 	movi	fp,45
 1015c64:	df002785 	stb	fp,158(sp)
 1015c68:	10022e16 	blt	r2,zero,1016524 <___svfprintf_internal_r+0x1c94>
 1015c6c:	00bfdfc4 	movi	r2,-129
 1015c70:	90a4703a 	and	r18,r18,r2
 1015c74:	003c6406 	br	1014e08 <__alt_data_end+0xff014e08>
 1015c78:	9080100c 	andi	r2,r18,64
 1015c7c:	d8002785 	stb	zero,158(sp)
 1015c80:	10012526 	beq	r2,zero,1016118 <___svfprintf_internal_r+0x1888>
 1015c84:	d9002d17 	ldw	r4,180(sp)
 1015c88:	d9402917 	ldw	r5,164(sp)
 1015c8c:	002d883a 	mov	r22,zero
 1015c90:	20800104 	addi	r2,r4,4
 1015c94:	2500000b 	ldhu	r20,0(r4)
 1015c98:	283fa20e 	bge	r5,zero,1015b24 <__alt_data_end+0xff015b24>
 1015c9c:	d8802d15 	stw	r2,180(sp)
 1015ca0:	0039883a 	mov	fp,zero
 1015ca4:	a584b03a 	or	r2,r20,r22
 1015ca8:	103c571e 	bne	r2,zero,1014e08 <__alt_data_end+0xff014e08>
 1015cac:	00800044 	movi	r2,1
 1015cb0:	003e5006 	br	10155f4 <__alt_data_end+0xff0155f4>
 1015cb4:	d9402c17 	ldw	r5,176(sp)
 1015cb8:	d9801e04 	addi	r6,sp,120
 1015cbc:	9809883a 	mov	r4,r19
 1015cc0:	101b29c0 	call	101b29c <__ssprint_r>
 1015cc4:	103bd71e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015cc8:	d8c02017 	ldw	r3,128(sp)
 1015ccc:	da000404 	addi	r8,sp,16
 1015cd0:	d9003217 	ldw	r4,200(sp)
 1015cd4:	d8802617 	ldw	r2,152(sp)
 1015cd8:	d9403317 	ldw	r5,204(sp)
 1015cdc:	8123883a 	add	r17,r16,r4
 1015ce0:	11400216 	blt	r2,r5,1015cec <___svfprintf_internal_r+0x145c>
 1015ce4:	9100004c 	andi	r4,r18,1
 1015ce8:	20000d26 	beq	r4,zero,1015d20 <___svfprintf_internal_r+0x1490>
 1015cec:	d9003817 	ldw	r4,224(sp)
 1015cf0:	d9403417 	ldw	r5,208(sp)
 1015cf4:	1907883a 	add	r3,r3,r4
 1015cf8:	d9001f17 	ldw	r4,124(sp)
 1015cfc:	41400015 	stw	r5,0(r8)
 1015d00:	d9403817 	ldw	r5,224(sp)
 1015d04:	21000044 	addi	r4,r4,1
 1015d08:	d8c02015 	stw	r3,128(sp)
 1015d0c:	41400115 	stw	r5,4(r8)
 1015d10:	d9001f15 	stw	r4,124(sp)
 1015d14:	014001c4 	movi	r5,7
 1015d18:	2901dc16 	blt	r5,r4,101648c <___svfprintf_internal_r+0x1bfc>
 1015d1c:	42000204 	addi	r8,r8,8
 1015d20:	d9003317 	ldw	r4,204(sp)
 1015d24:	8121883a 	add	r16,r16,r4
 1015d28:	2085c83a 	sub	r2,r4,r2
 1015d2c:	8461c83a 	sub	r16,r16,r17
 1015d30:	1400010e 	bge	r2,r16,1015d38 <___svfprintf_internal_r+0x14a8>
 1015d34:	1021883a 	mov	r16,r2
 1015d38:	04000a0e 	bge	zero,r16,1015d64 <___svfprintf_internal_r+0x14d4>
 1015d3c:	d9001f17 	ldw	r4,124(sp)
 1015d40:	1c07883a 	add	r3,r3,r16
 1015d44:	44400015 	stw	r17,0(r8)
 1015d48:	21000044 	addi	r4,r4,1
 1015d4c:	44000115 	stw	r16,4(r8)
 1015d50:	d8c02015 	stw	r3,128(sp)
 1015d54:	d9001f15 	stw	r4,124(sp)
 1015d58:	014001c4 	movi	r5,7
 1015d5c:	2901e616 	blt	r5,r4,10164f8 <___svfprintf_internal_r+0x1c68>
 1015d60:	42000204 	addi	r8,r8,8
 1015d64:	8001f616 	blt	r16,zero,1016540 <___svfprintf_internal_r+0x1cb0>
 1015d68:	1421c83a 	sub	r16,r2,r16
 1015d6c:	043d1c0e 	bge	zero,r16,10151e0 <__alt_data_end+0xff0151e0>
 1015d70:	04400404 	movi	r17,16
 1015d74:	d8801f17 	ldw	r2,124(sp)
 1015d78:	8c3edd0e 	bge	r17,r16,10158f0 <__alt_data_end+0xff0158f0>
 1015d7c:	014040b4 	movhi	r5,258
 1015d80:	2959d084 	addi	r5,r5,26434
 1015d84:	d9402b15 	stw	r5,172(sp)
 1015d88:	058001c4 	movi	r22,7
 1015d8c:	dd002c17 	ldw	r20,176(sp)
 1015d90:	00000306 	br	1015da0 <___svfprintf_internal_r+0x1510>
 1015d94:	42000204 	addi	r8,r8,8
 1015d98:	843ffc04 	addi	r16,r16,-16
 1015d9c:	8c3ed70e 	bge	r17,r16,10158fc <__alt_data_end+0xff0158fc>
 1015da0:	18c00404 	addi	r3,r3,16
 1015da4:	10800044 	addi	r2,r2,1
 1015da8:	45400015 	stw	r21,0(r8)
 1015dac:	44400115 	stw	r17,4(r8)
 1015db0:	d8c02015 	stw	r3,128(sp)
 1015db4:	d8801f15 	stw	r2,124(sp)
 1015db8:	b0bff60e 	bge	r22,r2,1015d94 <__alt_data_end+0xff015d94>
 1015dbc:	d9801e04 	addi	r6,sp,120
 1015dc0:	a00b883a 	mov	r5,r20
 1015dc4:	9809883a 	mov	r4,r19
 1015dc8:	101b29c0 	call	101b29c <__ssprint_r>
 1015dcc:	103b951e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015dd0:	d8c02017 	ldw	r3,128(sp)
 1015dd4:	d8801f17 	ldw	r2,124(sp)
 1015dd8:	da000404 	addi	r8,sp,16
 1015ddc:	003fee06 	br	1015d98 <__alt_data_end+0xff015d98>
 1015de0:	9088703a 	and	r4,r18,r2
 1015de4:	203e8d1e 	bne	r4,zero,101581c <__alt_data_end+0xff01581c>
 1015de8:	dc401f17 	ldw	r17,124(sp)
 1015dec:	40800115 	stw	r2,4(r8)
 1015df0:	44000015 	stw	r16,0(r8)
 1015df4:	8c400044 	addi	r17,r17,1
 1015df8:	d8c02015 	stw	r3,128(sp)
 1015dfc:	dc401f15 	stw	r17,124(sp)
 1015e00:	008001c4 	movi	r2,7
 1015e04:	147f7f16 	blt	r2,r17,1015c04 <__alt_data_end+0xff015c04>
 1015e08:	45800204 	addi	r22,r8,8
 1015e0c:	003eac06 	br	10158c0 <__alt_data_end+0xff0158c0>
 1015e10:	d9402c17 	ldw	r5,176(sp)
 1015e14:	d9801e04 	addi	r6,sp,120
 1015e18:	9809883a 	mov	r4,r19
 1015e1c:	101b29c0 	call	101b29c <__ssprint_r>
 1015e20:	103b801e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015e24:	d8c02017 	ldw	r3,128(sp)
 1015e28:	dc401f17 	ldw	r17,124(sp)
 1015e2c:	da000404 	addi	r8,sp,16
 1015e30:	003e8406 	br	1015844 <__alt_data_end+0xff015844>
 1015e34:	d9402c17 	ldw	r5,176(sp)
 1015e38:	d9801e04 	addi	r6,sp,120
 1015e3c:	9809883a 	mov	r4,r19
 1015e40:	101b29c0 	call	101b29c <__ssprint_r>
 1015e44:	103b771e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015e48:	d8c02017 	ldw	r3,128(sp)
 1015e4c:	dc401f17 	ldw	r17,124(sp)
 1015e50:	dd800404 	addi	r22,sp,16
 1015e54:	003e8606 	br	1015870 <__alt_data_end+0xff015870>
 1015e58:	0029883a 	mov	r20,zero
 1015e5c:	a5000c04 	addi	r20,r20,48
 1015e60:	dc001dc4 	addi	r16,sp,119
 1015e64:	dd001dc5 	stb	r20,119(sp)
 1015e68:	003f3806 	br	1015b4c <__alt_data_end+0xff015b4c>
 1015e6c:	d9402c17 	ldw	r5,176(sp)
 1015e70:	d9801e04 	addi	r6,sp,120
 1015e74:	9809883a 	mov	r4,r19
 1015e78:	101b29c0 	call	101b29c <__ssprint_r>
 1015e7c:	103b691e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1015e80:	d8c02017 	ldw	r3,128(sp)
 1015e84:	da000404 	addi	r8,sp,16
 1015e88:	003c9506 	br	10150e0 <__alt_data_end+0xff0150e0>
 1015e8c:	d9003617 	ldw	r4,216(sp)
 1015e90:	d9403717 	ldw	r5,220(sp)
 1015e94:	da003e15 	stw	r8,248(sp)
 1015e98:	101ad940 	call	101ad94 <__fpclassifyd>
 1015e9c:	da003e17 	ldw	r8,248(sp)
 1015ea0:	1000bd1e 	bne	r2,zero,1016198 <___svfprintf_internal_r+0x1908>
 1015ea4:	008011c4 	movi	r2,71
 1015ea8:	14411e0e 	bge	r2,r17,1016324 <___svfprintf_internal_r+0x1a94>
 1015eac:	040040b4 	movhi	r16,258
 1015eb0:	8419c304 	addi	r16,r16,26380
 1015eb4:	00c000c4 	movi	r3,3
 1015eb8:	00bfdfc4 	movi	r2,-129
 1015ebc:	d8c02a15 	stw	r3,168(sp)
 1015ec0:	90a4703a 	and	r18,r18,r2
 1015ec4:	df002783 	ldbu	fp,158(sp)
 1015ec8:	d8c02e15 	stw	r3,184(sp)
 1015ecc:	d8002915 	stw	zero,164(sp)
 1015ed0:	d8003215 	stw	zero,200(sp)
 1015ed4:	003c1c06 	br	1014f48 <__alt_data_end+0xff014f48>
 1015ed8:	9080100c 	andi	r2,r18,64
 1015edc:	d8002785 	stb	zero,158(sp)
 1015ee0:	10009426 	beq	r2,zero,1016134 <___svfprintf_internal_r+0x18a4>
 1015ee4:	d8c02d17 	ldw	r3,180(sp)
 1015ee8:	d9002917 	ldw	r4,164(sp)
 1015eec:	002d883a 	mov	r22,zero
 1015ef0:	18800104 	addi	r2,r3,4
 1015ef4:	1d00000b 	ldhu	r20,0(r3)
 1015ef8:	203ec10e 	bge	r4,zero,1015a00 <__alt_data_end+0xff015a00>
 1015efc:	a586b03a 	or	r3,r20,r22
 1015f00:	d8802d15 	stw	r2,180(sp)
 1015f04:	183ec21e 	bne	r3,zero,1015a10 <__alt_data_end+0xff015a10>
 1015f08:	0039883a 	mov	fp,zero
 1015f0c:	0005883a 	mov	r2,zero
 1015f10:	003db806 	br	10155f4 <__alt_data_end+0xff0155f4>
 1015f14:	d8802d17 	ldw	r2,180(sp)
 1015f18:	d8c02d17 	ldw	r3,180(sp)
 1015f1c:	d9002d17 	ldw	r4,180(sp)
 1015f20:	10800017 	ldw	r2,0(r2)
 1015f24:	18c00117 	ldw	r3,4(r3)
 1015f28:	21000204 	addi	r4,r4,8
 1015f2c:	d8803615 	stw	r2,216(sp)
 1015f30:	d8c03715 	stw	r3,220(sp)
 1015f34:	d9002d15 	stw	r4,180(sp)
 1015f38:	003b8206 	br	1014d44 <__alt_data_end+0xff014d44>
 1015f3c:	9080100c 	andi	r2,r18,64
 1015f40:	10010726 	beq	r2,zero,1016360 <___svfprintf_internal_r+0x1ad0>
 1015f44:	d8c02d17 	ldw	r3,180(sp)
 1015f48:	1d00000f 	ldh	r20,0(r3)
 1015f4c:	18c00104 	addi	r3,r3,4
 1015f50:	d8c02d15 	stw	r3,180(sp)
 1015f54:	a02dd7fa 	srai	r22,r20,31
 1015f58:	b005883a 	mov	r2,r22
 1015f5c:	003ba206 	br	1014de8 <__alt_data_end+0xff014de8>
 1015f60:	9080100c 	andi	r2,r18,64
 1015f64:	10010526 	beq	r2,zero,101637c <___svfprintf_internal_r+0x1aec>
 1015f68:	d9002d17 	ldw	r4,180(sp)
 1015f6c:	002d883a 	mov	r22,zero
 1015f70:	2500000b 	ldhu	r20,0(r4)
 1015f74:	21000104 	addi	r4,r4,4
 1015f78:	d9002d15 	stw	r4,180(sp)
 1015f7c:	003cfe06 	br	1015378 <__alt_data_end+0xff015378>
 1015f80:	bc400007 	ldb	r17,0(r23)
 1015f84:	003a9606 	br	10149e0 <__alt_data_end+0xff0149e0>
 1015f88:	9080040c 	andi	r2,r18,16
 1015f8c:	10010126 	beq	r2,zero,1016394 <___svfprintf_internal_r+0x1b04>
 1015f90:	d9402d17 	ldw	r5,180(sp)
 1015f94:	d8c02f17 	ldw	r3,188(sp)
 1015f98:	28800017 	ldw	r2,0(r5)
 1015f9c:	29400104 	addi	r5,r5,4
 1015fa0:	d9402d15 	stw	r5,180(sp)
 1015fa4:	10c00015 	stw	r3,0(r2)
 1015fa8:	003a6406 	br	101493c <__alt_data_end+0xff01493c>
 1015fac:	d9002917 	ldw	r4,164(sp)
 1015fb0:	d8002785 	stb	zero,158(sp)
 1015fb4:	203d8d16 	blt	r4,zero,10155ec <__alt_data_end+0xff0155ec>
 1015fb8:	00bfdfc4 	movi	r2,-129
 1015fbc:	90a4703a 	and	r18,r18,r2
 1015fc0:	003b0506 	br	1014bd8 <__alt_data_end+0xff014bd8>
 1015fc4:	014040b4 	movhi	r5,258
 1015fc8:	2959d084 	addi	r5,r5,26434
 1015fcc:	d9402b15 	stw	r5,172(sp)
 1015fd0:	d9402b17 	ldw	r5,172(sp)
 1015fd4:	1c47883a 	add	r3,r3,r17
 1015fd8:	10800044 	addi	r2,r2,1
 1015fdc:	41400015 	stw	r5,0(r8)
 1015fe0:	44400115 	stw	r17,4(r8)
 1015fe4:	d8c02015 	stw	r3,128(sp)
 1015fe8:	d8801f15 	stw	r2,124(sp)
 1015fec:	010001c4 	movi	r4,7
 1015ff0:	20bf3016 	blt	r4,r2,1015cb4 <__alt_data_end+0xff015cb4>
 1015ff4:	42000204 	addi	r8,r8,8
 1015ff8:	003f3506 	br	1015cd0 <__alt_data_end+0xff015cd0>
 1015ffc:	010040b4 	movhi	r4,258
 1016000:	2119d084 	addi	r4,r4,26434
 1016004:	d9002b15 	stw	r4,172(sp)
 1016008:	003c5e06 	br	1015184 <__alt_data_end+0xff015184>
 101600c:	d9402c17 	ldw	r5,176(sp)
 1016010:	d9801e04 	addi	r6,sp,120
 1016014:	9809883a 	mov	r4,r19
 1016018:	101b29c0 	call	101b29c <__ssprint_r>
 101601c:	103b011e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1016020:	d8c02017 	ldw	r3,128(sp)
 1016024:	da000404 	addi	r8,sp,16
 1016028:	003d9306 	br	1015678 <__alt_data_end+0xff015678>
 101602c:	d8801f17 	ldw	r2,124(sp)
 1016030:	014040b4 	movhi	r5,258
 1016034:	01000044 	movi	r4,1
 1016038:	18c00044 	addi	r3,r3,1
 101603c:	10800044 	addi	r2,r2,1
 1016040:	2959d004 	addi	r5,r5,26432
 1016044:	41000115 	stw	r4,4(r8)
 1016048:	41400015 	stw	r5,0(r8)
 101604c:	d8c02015 	stw	r3,128(sp)
 1016050:	d8801f15 	stw	r2,124(sp)
 1016054:	010001c4 	movi	r4,7
 1016058:	2080b516 	blt	r4,r2,1016330 <___svfprintf_internal_r+0x1aa0>
 101605c:	42000204 	addi	r8,r8,8
 1016060:	8800041e 	bne	r17,zero,1016074 <___svfprintf_internal_r+0x17e4>
 1016064:	d8803317 	ldw	r2,204(sp)
 1016068:	1000021e 	bne	r2,zero,1016074 <___svfprintf_internal_r+0x17e4>
 101606c:	9080004c 	andi	r2,r18,1
 1016070:	103c5b26 	beq	r2,zero,10151e0 <__alt_data_end+0xff0151e0>
 1016074:	d9003817 	ldw	r4,224(sp)
 1016078:	d8801f17 	ldw	r2,124(sp)
 101607c:	d9403417 	ldw	r5,208(sp)
 1016080:	20c7883a 	add	r3,r4,r3
 1016084:	10800044 	addi	r2,r2,1
 1016088:	41000115 	stw	r4,4(r8)
 101608c:	41400015 	stw	r5,0(r8)
 1016090:	d8c02015 	stw	r3,128(sp)
 1016094:	d8801f15 	stw	r2,124(sp)
 1016098:	010001c4 	movi	r4,7
 101609c:	20818016 	blt	r4,r2,10166a0 <___svfprintf_internal_r+0x1e10>
 10160a0:	42000204 	addi	r8,r8,8
 10160a4:	0463c83a 	sub	r17,zero,r17
 10160a8:	0440cb0e 	bge	zero,r17,10163d8 <___svfprintf_internal_r+0x1b48>
 10160ac:	05800404 	movi	r22,16
 10160b0:	b440e80e 	bge	r22,r17,1016454 <___svfprintf_internal_r+0x1bc4>
 10160b4:	014040b4 	movhi	r5,258
 10160b8:	2959d084 	addi	r5,r5,26434
 10160bc:	d9402b15 	stw	r5,172(sp)
 10160c0:	070001c4 	movi	fp,7
 10160c4:	dd002c17 	ldw	r20,176(sp)
 10160c8:	00000306 	br	10160d8 <___svfprintf_internal_r+0x1848>
 10160cc:	42000204 	addi	r8,r8,8
 10160d0:	8c7ffc04 	addi	r17,r17,-16
 10160d4:	b440e20e 	bge	r22,r17,1016460 <___svfprintf_internal_r+0x1bd0>
 10160d8:	18c00404 	addi	r3,r3,16
 10160dc:	10800044 	addi	r2,r2,1
 10160e0:	45400015 	stw	r21,0(r8)
 10160e4:	45800115 	stw	r22,4(r8)
 10160e8:	d8c02015 	stw	r3,128(sp)
 10160ec:	d8801f15 	stw	r2,124(sp)
 10160f0:	e0bff60e 	bge	fp,r2,10160cc <__alt_data_end+0xff0160cc>
 10160f4:	d9801e04 	addi	r6,sp,120
 10160f8:	a00b883a 	mov	r5,r20
 10160fc:	9809883a 	mov	r4,r19
 1016100:	101b29c0 	call	101b29c <__ssprint_r>
 1016104:	103ac71e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1016108:	d8c02017 	ldw	r3,128(sp)
 101610c:	d8801f17 	ldw	r2,124(sp)
 1016110:	da000404 	addi	r8,sp,16
 1016114:	003fee06 	br	10160d0 <__alt_data_end+0xff0160d0>
 1016118:	d8c02d17 	ldw	r3,180(sp)
 101611c:	d9002917 	ldw	r4,164(sp)
 1016120:	002d883a 	mov	r22,zero
 1016124:	18800104 	addi	r2,r3,4
 1016128:	1d000017 	ldw	r20,0(r3)
 101612c:	203e7d0e 	bge	r4,zero,1015b24 <__alt_data_end+0xff015b24>
 1016130:	003eda06 	br	1015c9c <__alt_data_end+0xff015c9c>
 1016134:	d9402d17 	ldw	r5,180(sp)
 1016138:	d8c02917 	ldw	r3,164(sp)
 101613c:	002d883a 	mov	r22,zero
 1016140:	28800104 	addi	r2,r5,4
 1016144:	2d000017 	ldw	r20,0(r5)
 1016148:	183e2d0e 	bge	r3,zero,1015a00 <__alt_data_end+0xff015a00>
 101614c:	003f6b06 	br	1015efc <__alt_data_end+0xff015efc>
 1016150:	d8c02d15 	stw	r3,180(sp)
 1016154:	0039883a 	mov	fp,zero
 1016158:	003ed206 	br	1015ca4 <__alt_data_end+0xff015ca4>
 101615c:	bc400043 	ldbu	r17,1(r23)
 1016160:	94800814 	ori	r18,r18,32
 1016164:	bdc00044 	addi	r23,r23,1
 1016168:	8c403fcc 	andi	r17,r17,255
 101616c:	8c40201c 	xori	r17,r17,128
 1016170:	8c7fe004 	addi	r17,r17,-128
 1016174:	003a1a06 	br	10149e0 <__alt_data_end+0xff0149e0>
 1016178:	d9402c17 	ldw	r5,176(sp)
 101617c:	d9801e04 	addi	r6,sp,120
 1016180:	9809883a 	mov	r4,r19
 1016184:	101b29c0 	call	101b29c <__ssprint_r>
 1016188:	103aa61e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 101618c:	d8c02017 	ldw	r3,128(sp)
 1016190:	da000404 	addi	r8,sp,16
 1016194:	003d4a06 	br	10156c0 <__alt_data_end+0xff0156c0>
 1016198:	d9002917 	ldw	r4,164(sp)
 101619c:	05bff7c4 	movi	r22,-33
 10161a0:	00bfffc4 	movi	r2,-1
 10161a4:	8dac703a 	and	r22,r17,r22
 10161a8:	20806a26 	beq	r4,r2,1016354 <___svfprintf_internal_r+0x1ac4>
 10161ac:	008011c4 	movi	r2,71
 10161b0:	b0813726 	beq	r22,r2,1016690 <___svfprintf_internal_r+0x1e00>
 10161b4:	d9003717 	ldw	r4,220(sp)
 10161b8:	90c04014 	ori	r3,r18,256
 10161bc:	d8c02b15 	stw	r3,172(sp)
 10161c0:	20015d16 	blt	r4,zero,1016738 <___svfprintf_internal_r+0x1ea8>
 10161c4:	dd003717 	ldw	r20,220(sp)
 10161c8:	d8002a05 	stb	zero,168(sp)
 10161cc:	00801984 	movi	r2,102
 10161d0:	88814026 	beq	r17,r2,10166d4 <___svfprintf_internal_r+0x1e44>
 10161d4:	00801184 	movi	r2,70
 10161d8:	88817126 	beq	r17,r2,10167a0 <___svfprintf_internal_r+0x1f10>
 10161dc:	00801144 	movi	r2,69
 10161e0:	b0816226 	beq	r22,r2,101676c <___svfprintf_internal_r+0x1edc>
 10161e4:	d8c02917 	ldw	r3,164(sp)
 10161e8:	d8802104 	addi	r2,sp,132
 10161ec:	d8800315 	stw	r2,12(sp)
 10161f0:	d9403617 	ldw	r5,216(sp)
 10161f4:	d8802504 	addi	r2,sp,148
 10161f8:	d8800215 	stw	r2,8(sp)
 10161fc:	d8802604 	addi	r2,sp,152
 1016200:	d8c00015 	stw	r3,0(sp)
 1016204:	d8800115 	stw	r2,4(sp)
 1016208:	01c00084 	movi	r7,2
 101620c:	a00d883a 	mov	r6,r20
 1016210:	9809883a 	mov	r4,r19
 1016214:	d8c03d15 	stw	r3,244(sp)
 1016218:	da003e15 	stw	r8,248(sp)
 101621c:	1016ca00 	call	1016ca0 <_dtoa_r>
 1016220:	1021883a 	mov	r16,r2
 1016224:	008019c4 	movi	r2,103
 1016228:	d8c03d17 	ldw	r3,244(sp)
 101622c:	da003e17 	ldw	r8,248(sp)
 1016230:	8880e726 	beq	r17,r2,10165d0 <___svfprintf_internal_r+0x1d40>
 1016234:	008011c4 	movi	r2,71
 1016238:	8880d426 	beq	r17,r2,101658c <___svfprintf_internal_r+0x1cfc>
 101623c:	80f9883a 	add	fp,r16,r3
 1016240:	d9003617 	ldw	r4,216(sp)
 1016244:	000d883a 	mov	r6,zero
 1016248:	000f883a 	mov	r7,zero
 101624c:	a00b883a 	mov	r5,r20
 1016250:	da003e15 	stw	r8,248(sp)
 1016254:	1020e080 	call	1020e08 <__eqdf2>
 1016258:	da003e17 	ldw	r8,248(sp)
 101625c:	1000e426 	beq	r2,zero,10165f0 <___svfprintf_internal_r+0x1d60>
 1016260:	d8802117 	ldw	r2,132(sp)
 1016264:	1700062e 	bgeu	r2,fp,1016280 <___svfprintf_internal_r+0x19f0>
 1016268:	01000c04 	movi	r4,48
 101626c:	10c00044 	addi	r3,r2,1
 1016270:	d8c02115 	stw	r3,132(sp)
 1016274:	11000005 	stb	r4,0(r2)
 1016278:	d8802117 	ldw	r2,132(sp)
 101627c:	173ffb36 	bltu	r2,fp,101626c <__alt_data_end+0xff01626c>
 1016280:	1405c83a 	sub	r2,r2,r16
 1016284:	d8803315 	stw	r2,204(sp)
 1016288:	008011c4 	movi	r2,71
 101628c:	b080c526 	beq	r22,r2,10165a4 <___svfprintf_internal_r+0x1d14>
 1016290:	00801944 	movi	r2,101
 1016294:	1441d90e 	bge	r2,r17,10169fc <___svfprintf_internal_r+0x216c>
 1016298:	d8c02617 	ldw	r3,152(sp)
 101629c:	00801984 	movi	r2,102
 10162a0:	d8c03215 	stw	r3,200(sp)
 10162a4:	88813426 	beq	r17,r2,1016778 <___svfprintf_internal_r+0x1ee8>
 10162a8:	d8c03217 	ldw	r3,200(sp)
 10162ac:	d9003317 	ldw	r4,204(sp)
 10162b0:	19012516 	blt	r3,r4,1016748 <___svfprintf_internal_r+0x1eb8>
 10162b4:	9480004c 	andi	r18,r18,1
 10162b8:	9001841e 	bne	r18,zero,10168cc <___svfprintf_internal_r+0x203c>
 10162bc:	1805883a 	mov	r2,r3
 10162c0:	1801cc16 	blt	r3,zero,10169f4 <___svfprintf_internal_r+0x2164>
 10162c4:	d8c03217 	ldw	r3,200(sp)
 10162c8:	044019c4 	movi	r17,103
 10162cc:	d8c02e15 	stw	r3,184(sp)
 10162d0:	df002a07 	ldb	fp,168(sp)
 10162d4:	e000a61e 	bne	fp,zero,1016570 <___svfprintf_internal_r+0x1ce0>
 10162d8:	df002783 	ldbu	fp,158(sp)
 10162dc:	d8802a15 	stw	r2,168(sp)
 10162e0:	dc802b17 	ldw	r18,172(sp)
 10162e4:	d8002915 	stw	zero,164(sp)
 10162e8:	003b1706 	br	1014f48 <__alt_data_end+0xff014f48>
 10162ec:	040040b4 	movhi	r16,258
 10162f0:	8419c004 	addi	r16,r16,26368
 10162f4:	003aa606 	br	1014d90 <__alt_data_end+0xff014d90>
 10162f8:	d9003917 	ldw	r4,228(sp)
 10162fc:	04001004 	movi	r16,64
 1016300:	800b883a 	mov	r5,r16
 1016304:	1018de80 	call	1018de8 <_malloc_r>
 1016308:	d9002c17 	ldw	r4,176(sp)
 101630c:	20800015 	stw	r2,0(r4)
 1016310:	20800415 	stw	r2,16(r4)
 1016314:	1001cb26 	beq	r2,zero,1016a44 <___svfprintf_internal_r+0x21b4>
 1016318:	d8802c17 	ldw	r2,176(sp)
 101631c:	14000515 	stw	r16,20(r2)
 1016320:	00397606 	br	10148fc <__alt_data_end+0xff0148fc>
 1016324:	040040b4 	movhi	r16,258
 1016328:	8419c204 	addi	r16,r16,26376
 101632c:	003ee106 	br	1015eb4 <__alt_data_end+0xff015eb4>
 1016330:	d9402c17 	ldw	r5,176(sp)
 1016334:	d9801e04 	addi	r6,sp,120
 1016338:	9809883a 	mov	r4,r19
 101633c:	101b29c0 	call	101b29c <__ssprint_r>
 1016340:	103a381e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1016344:	dc402617 	ldw	r17,152(sp)
 1016348:	d8c02017 	ldw	r3,128(sp)
 101634c:	da000404 	addi	r8,sp,16
 1016350:	003f4306 	br	1016060 <__alt_data_end+0xff016060>
 1016354:	01400184 	movi	r5,6
 1016358:	d9402915 	stw	r5,164(sp)
 101635c:	003f9506 	br	10161b4 <__alt_data_end+0xff0161b4>
 1016360:	d9002d17 	ldw	r4,180(sp)
 1016364:	25000017 	ldw	r20,0(r4)
 1016368:	21000104 	addi	r4,r4,4
 101636c:	d9002d15 	stw	r4,180(sp)
 1016370:	a02dd7fa 	srai	r22,r20,31
 1016374:	b005883a 	mov	r2,r22
 1016378:	003a9b06 	br	1014de8 <__alt_data_end+0xff014de8>
 101637c:	d9402d17 	ldw	r5,180(sp)
 1016380:	002d883a 	mov	r22,zero
 1016384:	2d000017 	ldw	r20,0(r5)
 1016388:	29400104 	addi	r5,r5,4
 101638c:	d9402d15 	stw	r5,180(sp)
 1016390:	003bf906 	br	1015378 <__alt_data_end+0xff015378>
 1016394:	9480100c 	andi	r18,r18,64
 1016398:	90006e26 	beq	r18,zero,1016554 <___svfprintf_internal_r+0x1cc4>
 101639c:	d9002d17 	ldw	r4,180(sp)
 10163a0:	d9402f17 	ldw	r5,188(sp)
 10163a4:	20800017 	ldw	r2,0(r4)
 10163a8:	21000104 	addi	r4,r4,4
 10163ac:	d9002d15 	stw	r4,180(sp)
 10163b0:	1140000d 	sth	r5,0(r2)
 10163b4:	00396106 	br	101493c <__alt_data_end+0xff01493c>
 10163b8:	d9402c17 	ldw	r5,176(sp)
 10163bc:	d9801e04 	addi	r6,sp,120
 10163c0:	9809883a 	mov	r4,r19
 10163c4:	101b29c0 	call	101b29c <__ssprint_r>
 10163c8:	103a161e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10163cc:	d8c02017 	ldw	r3,128(sp)
 10163d0:	d8801f17 	ldw	r2,124(sp)
 10163d4:	da000404 	addi	r8,sp,16
 10163d8:	d9403317 	ldw	r5,204(sp)
 10163dc:	10800044 	addi	r2,r2,1
 10163e0:	44000015 	stw	r16,0(r8)
 10163e4:	28c7883a 	add	r3,r5,r3
 10163e8:	003b7706 	br	10151c8 <__alt_data_end+0xff0151c8>
 10163ec:	8009883a 	mov	r4,r16
 10163f0:	da003e15 	stw	r8,248(sp)
 10163f4:	101463c0 	call	101463c <strlen>
 10163f8:	d8802e15 	stw	r2,184(sp)
 10163fc:	da003e17 	ldw	r8,248(sp)
 1016400:	103c280e 	bge	r2,zero,10154a4 <__alt_data_end+0xff0154a4>
 1016404:	0005883a 	mov	r2,zero
 1016408:	003c2606 	br	10154a4 <__alt_data_end+0xff0154a4>
 101640c:	00bfffc4 	movi	r2,-1
 1016410:	003a0906 	br	1014c38 <__alt_data_end+0xff014c38>
 1016414:	010040b4 	movhi	r4,258
 1016418:	2119d484 	addi	r4,r4,26450
 101641c:	d9003515 	stw	r4,212(sp)
 1016420:	003b0606 	br	101503c <__alt_data_end+0xff01503c>
 1016424:	013fffc4 	movi	r4,-1
 1016428:	003a2706 	br	1014cc8 <__alt_data_end+0xff014cc8>
 101642c:	d9402c17 	ldw	r5,176(sp)
 1016430:	d9801e04 	addi	r6,sp,120
 1016434:	9809883a 	mov	r4,r19
 1016438:	101b29c0 	call	101b29c <__ssprint_r>
 101643c:	1039f91e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 1016440:	d8c02017 	ldw	r3,128(sp)
 1016444:	da000404 	addi	r8,sp,16
 1016448:	003d8406 	br	1015a5c <__alt_data_end+0xff015a5c>
 101644c:	0023883a 	mov	r17,zero
 1016450:	003d8306 	br	1015a60 <__alt_data_end+0xff015a60>
 1016454:	010040b4 	movhi	r4,258
 1016458:	2119d084 	addi	r4,r4,26434
 101645c:	d9002b15 	stw	r4,172(sp)
 1016460:	d9002b17 	ldw	r4,172(sp)
 1016464:	1c47883a 	add	r3,r3,r17
 1016468:	10800044 	addi	r2,r2,1
 101646c:	41000015 	stw	r4,0(r8)
 1016470:	44400115 	stw	r17,4(r8)
 1016474:	d8c02015 	stw	r3,128(sp)
 1016478:	d8801f15 	stw	r2,124(sp)
 101647c:	010001c4 	movi	r4,7
 1016480:	20bfcd16 	blt	r4,r2,10163b8 <__alt_data_end+0xff0163b8>
 1016484:	42000204 	addi	r8,r8,8
 1016488:	003fd306 	br	10163d8 <__alt_data_end+0xff0163d8>
 101648c:	d9402c17 	ldw	r5,176(sp)
 1016490:	d9801e04 	addi	r6,sp,120
 1016494:	9809883a 	mov	r4,r19
 1016498:	101b29c0 	call	101b29c <__ssprint_r>
 101649c:	1039e11e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10164a0:	d8802617 	ldw	r2,152(sp)
 10164a4:	d8c02017 	ldw	r3,128(sp)
 10164a8:	da000404 	addi	r8,sp,16
 10164ac:	003e1c06 	br	1015d20 <__alt_data_end+0xff015d20>
 10164b0:	d8802917 	ldw	r2,164(sp)
 10164b4:	00c00184 	movi	r3,6
 10164b8:	1880012e 	bgeu	r3,r2,10164c0 <___svfprintf_internal_r+0x1c30>
 10164bc:	1805883a 	mov	r2,r3
 10164c0:	d8802e15 	stw	r2,184(sp)
 10164c4:	1000f316 	blt	r2,zero,1016894 <___svfprintf_internal_r+0x2004>
 10164c8:	040040b4 	movhi	r16,258
 10164cc:	d8802a15 	stw	r2,168(sp)
 10164d0:	dd002d15 	stw	r20,180(sp)
 10164d4:	d8002915 	stw	zero,164(sp)
 10164d8:	d8003215 	stw	zero,200(sp)
 10164dc:	8419ce04 	addi	r16,r16,26424
 10164e0:	0039883a 	mov	fp,zero
 10164e4:	003a9f06 	br	1014f64 <__alt_data_end+0xff014f64>
 10164e8:	010040b4 	movhi	r4,258
 10164ec:	2119d484 	addi	r4,r4,26450
 10164f0:	d9003515 	stw	r4,212(sp)
 10164f4:	003b5f06 	br	1015274 <__alt_data_end+0xff015274>
 10164f8:	d9402c17 	ldw	r5,176(sp)
 10164fc:	d9801e04 	addi	r6,sp,120
 1016500:	9809883a 	mov	r4,r19
 1016504:	101b29c0 	call	101b29c <__ssprint_r>
 1016508:	1039c61e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 101650c:	d8802617 	ldw	r2,152(sp)
 1016510:	d9403317 	ldw	r5,204(sp)
 1016514:	d8c02017 	ldw	r3,128(sp)
 1016518:	da000404 	addi	r8,sp,16
 101651c:	2885c83a 	sub	r2,r5,r2
 1016520:	003e1006 	br	1015d64 <__alt_data_end+0xff015d64>
 1016524:	00800044 	movi	r2,1
 1016528:	10803fcc 	andi	r2,r2,255
 101652c:	00c00044 	movi	r3,1
 1016530:	10fa3526 	beq	r2,r3,1014e08 <__alt_data_end+0xff014e08>
 1016534:	00c00084 	movi	r3,2
 1016538:	10fb9e26 	beq	r2,r3,10153b4 <__alt_data_end+0xff0153b4>
 101653c:	003a6406 	br	1014ed0 <__alt_data_end+0xff014ed0>
 1016540:	0021883a 	mov	r16,zero
 1016544:	003e0806 	br	1015d68 <__alt_data_end+0xff015d68>
 1016548:	07000b44 	movi	fp,45
 101654c:	df002785 	stb	fp,158(sp)
 1016550:	003a0b06 	br	1014d80 <__alt_data_end+0xff014d80>
 1016554:	d8c02d17 	ldw	r3,180(sp)
 1016558:	d9002f17 	ldw	r4,188(sp)
 101655c:	18800017 	ldw	r2,0(r3)
 1016560:	18c00104 	addi	r3,r3,4
 1016564:	d8c02d15 	stw	r3,180(sp)
 1016568:	11000015 	stw	r4,0(r2)
 101656c:	0038f306 	br	101493c <__alt_data_end+0xff01493c>
 1016570:	00c00b44 	movi	r3,45
 1016574:	d8c02785 	stb	r3,158(sp)
 1016578:	d8802a15 	stw	r2,168(sp)
 101657c:	dc802b17 	ldw	r18,172(sp)
 1016580:	d8002915 	stw	zero,164(sp)
 1016584:	07000b44 	movi	fp,45
 1016588:	003a7306 	br	1014f58 <__alt_data_end+0xff014f58>
 101658c:	9080004c 	andi	r2,r18,1
 1016590:	1000941e 	bne	r2,zero,10167e4 <___svfprintf_internal_r+0x1f54>
 1016594:	d8802117 	ldw	r2,132(sp)
 1016598:	1405c83a 	sub	r2,r2,r16
 101659c:	d8803315 	stw	r2,204(sp)
 10165a0:	b441161e 	bne	r22,r17,10169fc <___svfprintf_internal_r+0x216c>
 10165a4:	dd802617 	ldw	r22,152(sp)
 10165a8:	00bfff44 	movi	r2,-3
 10165ac:	b0801a16 	blt	r22,r2,1016618 <___svfprintf_internal_r+0x1d88>
 10165b0:	d9402917 	ldw	r5,164(sp)
 10165b4:	2d801816 	blt	r5,r22,1016618 <___svfprintf_internal_r+0x1d88>
 10165b8:	dd803215 	stw	r22,200(sp)
 10165bc:	003f3a06 	br	10162a8 <__alt_data_end+0xff0162a8>
 10165c0:	1025883a 	mov	r18,r2
 10165c4:	0039883a 	mov	fp,zero
 10165c8:	00800084 	movi	r2,2
 10165cc:	003fd606 	br	1016528 <__alt_data_end+0xff016528>
 10165d0:	9080004c 	andi	r2,r18,1
 10165d4:	103f191e 	bne	r2,zero,101623c <__alt_data_end+0xff01623c>
 10165d8:	d8802117 	ldw	r2,132(sp)
 10165dc:	003f2806 	br	1016280 <__alt_data_end+0xff016280>
 10165e0:	010040b4 	movhi	r4,258
 10165e4:	2119d084 	addi	r4,r4,26434
 10165e8:	d9002b15 	stw	r4,172(sp)
 10165ec:	003c7c06 	br	10157e0 <__alt_data_end+0xff0157e0>
 10165f0:	e005883a 	mov	r2,fp
 10165f4:	003f2206 	br	1016280 <__alt_data_end+0xff016280>
 10165f8:	d9402917 	ldw	r5,164(sp)
 10165fc:	df002783 	ldbu	fp,158(sp)
 1016600:	dd002d15 	stw	r20,180(sp)
 1016604:	d9402a15 	stw	r5,168(sp)
 1016608:	d9402e15 	stw	r5,184(sp)
 101660c:	d8002915 	stw	zero,164(sp)
 1016610:	d8003215 	stw	zero,200(sp)
 1016614:	003a4c06 	br	1014f48 <__alt_data_end+0xff014f48>
 1016618:	8c7fff84 	addi	r17,r17,-2
 101661c:	b5bfffc4 	addi	r22,r22,-1
 1016620:	dd802615 	stw	r22,152(sp)
 1016624:	dc4022c5 	stb	r17,139(sp)
 1016628:	b000c316 	blt	r22,zero,1016938 <___svfprintf_internal_r+0x20a8>
 101662c:	00800ac4 	movi	r2,43
 1016630:	d8802305 	stb	r2,140(sp)
 1016634:	00800244 	movi	r2,9
 1016638:	15806e16 	blt	r2,r22,10167f4 <___svfprintf_internal_r+0x1f64>
 101663c:	00800c04 	movi	r2,48
 1016640:	b5800c04 	addi	r22,r22,48
 1016644:	d8802345 	stb	r2,141(sp)
 1016648:	dd802385 	stb	r22,142(sp)
 101664c:	d88023c4 	addi	r2,sp,143
 1016650:	df0022c4 	addi	fp,sp,139
 1016654:	d8c03317 	ldw	r3,204(sp)
 1016658:	1739c83a 	sub	fp,r2,fp
 101665c:	d9003317 	ldw	r4,204(sp)
 1016660:	e0c7883a 	add	r3,fp,r3
 1016664:	df003b15 	stw	fp,236(sp)
 1016668:	d8c02e15 	stw	r3,184(sp)
 101666c:	00800044 	movi	r2,1
 1016670:	1100b70e 	bge	r2,r4,1016950 <___svfprintf_internal_r+0x20c0>
 1016674:	d8c02e17 	ldw	r3,184(sp)
 1016678:	18c00044 	addi	r3,r3,1
 101667c:	d8c02e15 	stw	r3,184(sp)
 1016680:	1805883a 	mov	r2,r3
 1016684:	1800b016 	blt	r3,zero,1016948 <___svfprintf_internal_r+0x20b8>
 1016688:	d8003215 	stw	zero,200(sp)
 101668c:	003f1006 	br	10162d0 <__alt_data_end+0xff0162d0>
 1016690:	d8802917 	ldw	r2,164(sp)
 1016694:	103ec71e 	bne	r2,zero,10161b4 <__alt_data_end+0xff0161b4>
 1016698:	dc002915 	stw	r16,164(sp)
 101669c:	003ec506 	br	10161b4 <__alt_data_end+0xff0161b4>
 10166a0:	d9402c17 	ldw	r5,176(sp)
 10166a4:	d9801e04 	addi	r6,sp,120
 10166a8:	9809883a 	mov	r4,r19
 10166ac:	101b29c0 	call	101b29c <__ssprint_r>
 10166b0:	10395c1e 	bne	r2,zero,1014c24 <__alt_data_end+0xff014c24>
 10166b4:	dc402617 	ldw	r17,152(sp)
 10166b8:	d8c02017 	ldw	r3,128(sp)
 10166bc:	d8801f17 	ldw	r2,124(sp)
 10166c0:	da000404 	addi	r8,sp,16
 10166c4:	003e7706 	br	10160a4 <__alt_data_end+0xff0160a4>
 10166c8:	582f883a 	mov	r23,r11
 10166cc:	d8002915 	stw	zero,164(sp)
 10166d0:	0038c406 	br	10149e4 <__alt_data_end+0xff0149e4>
 10166d4:	d8c02917 	ldw	r3,164(sp)
 10166d8:	d8802104 	addi	r2,sp,132
 10166dc:	d8800315 	stw	r2,12(sp)
 10166e0:	d9403617 	ldw	r5,216(sp)
 10166e4:	d8802504 	addi	r2,sp,148
 10166e8:	d8800215 	stw	r2,8(sp)
 10166ec:	d8802604 	addi	r2,sp,152
 10166f0:	d8c00015 	stw	r3,0(sp)
 10166f4:	9809883a 	mov	r4,r19
 10166f8:	d8800115 	stw	r2,4(sp)
 10166fc:	01c000c4 	movi	r7,3
 1016700:	a00d883a 	mov	r6,r20
 1016704:	da003e15 	stw	r8,248(sp)
 1016708:	1016ca00 	call	1016ca0 <_dtoa_r>
 101670c:	d9002917 	ldw	r4,164(sp)
 1016710:	da003e17 	ldw	r8,248(sp)
 1016714:	1021883a 	mov	r16,r2
 1016718:	1139883a 	add	fp,r2,r4
 101671c:	2007883a 	mov	r3,r4
 1016720:	81000007 	ldb	r4,0(r16)
 1016724:	00800c04 	movi	r2,48
 1016728:	20806f26 	beq	r4,r2,10168e8 <___svfprintf_internal_r+0x2058>
 101672c:	d8c02617 	ldw	r3,152(sp)
 1016730:	e0f9883a 	add	fp,fp,r3
 1016734:	003ec206 	br	1016240 <__alt_data_end+0xff016240>
 1016738:	00c00b44 	movi	r3,45
 101673c:	2520003c 	xorhi	r20,r4,32768
 1016740:	d8c02a05 	stb	r3,168(sp)
 1016744:	003ea106 	br	10161cc <__alt_data_end+0xff0161cc>
 1016748:	d8c03217 	ldw	r3,200(sp)
 101674c:	00c0890e 	bge	zero,r3,1016974 <___svfprintf_internal_r+0x20e4>
 1016750:	00800044 	movi	r2,1
 1016754:	d9003317 	ldw	r4,204(sp)
 1016758:	1105883a 	add	r2,r2,r4
 101675c:	d8802e15 	stw	r2,184(sp)
 1016760:	10005f16 	blt	r2,zero,10168e0 <___svfprintf_internal_r+0x2050>
 1016764:	044019c4 	movi	r17,103
 1016768:	003ed906 	br	10162d0 <__alt_data_end+0xff0162d0>
 101676c:	d9002917 	ldw	r4,164(sp)
 1016770:	20c00044 	addi	r3,r4,1
 1016774:	003e9c06 	br	10161e8 <__alt_data_end+0xff0161e8>
 1016778:	d9002917 	ldw	r4,164(sp)
 101677c:	00c0680e 	bge	zero,r3,1016920 <___svfprintf_internal_r+0x2090>
 1016780:	2000461e 	bne	r4,zero,101689c <___svfprintf_internal_r+0x200c>
 1016784:	9480004c 	andi	r18,r18,1
 1016788:	9000441e 	bne	r18,zero,101689c <___svfprintf_internal_r+0x200c>
 101678c:	1805883a 	mov	r2,r3
 1016790:	1800a016 	blt	r3,zero,1016a14 <___svfprintf_internal_r+0x2184>
 1016794:	d8c03217 	ldw	r3,200(sp)
 1016798:	d8c02e15 	stw	r3,184(sp)
 101679c:	003ecc06 	br	10162d0 <__alt_data_end+0xff0162d0>
 10167a0:	d9402917 	ldw	r5,164(sp)
 10167a4:	d8802104 	addi	r2,sp,132
 10167a8:	d8800315 	stw	r2,12(sp)
 10167ac:	d9400015 	stw	r5,0(sp)
 10167b0:	d8802504 	addi	r2,sp,148
 10167b4:	d9403617 	ldw	r5,216(sp)
 10167b8:	d8800215 	stw	r2,8(sp)
 10167bc:	d8802604 	addi	r2,sp,152
 10167c0:	d8800115 	stw	r2,4(sp)
 10167c4:	01c000c4 	movi	r7,3
 10167c8:	a00d883a 	mov	r6,r20
 10167cc:	9809883a 	mov	r4,r19
 10167d0:	da003e15 	stw	r8,248(sp)
 10167d4:	1016ca00 	call	1016ca0 <_dtoa_r>
 10167d8:	d8c02917 	ldw	r3,164(sp)
 10167dc:	da003e17 	ldw	r8,248(sp)
 10167e0:	1021883a 	mov	r16,r2
 10167e4:	00801184 	movi	r2,70
 10167e8:	80f9883a 	add	fp,r16,r3
 10167ec:	88bfcc26 	beq	r17,r2,1016720 <__alt_data_end+0xff016720>
 10167f0:	003e9306 	br	1016240 <__alt_data_end+0xff016240>
 10167f4:	df0022c4 	addi	fp,sp,139
 10167f8:	dc002915 	stw	r16,164(sp)
 10167fc:	9829883a 	mov	r20,r19
 1016800:	e021883a 	mov	r16,fp
 1016804:	4027883a 	mov	r19,r8
 1016808:	b009883a 	mov	r4,r22
 101680c:	01400284 	movi	r5,10
 1016810:	101fb440 	call	101fb44 <__modsi3>
 1016814:	10800c04 	addi	r2,r2,48
 1016818:	843fffc4 	addi	r16,r16,-1
 101681c:	b009883a 	mov	r4,r22
 1016820:	01400284 	movi	r5,10
 1016824:	80800005 	stb	r2,0(r16)
 1016828:	101fac00 	call	101fac0 <__divsi3>
 101682c:	102d883a 	mov	r22,r2
 1016830:	00800244 	movi	r2,9
 1016834:	15bff416 	blt	r2,r22,1016808 <__alt_data_end+0xff016808>
 1016838:	9811883a 	mov	r8,r19
 101683c:	b0800c04 	addi	r2,r22,48
 1016840:	a027883a 	mov	r19,r20
 1016844:	8029883a 	mov	r20,r16
 1016848:	a17fffc4 	addi	r5,r20,-1
 101684c:	a0bfffc5 	stb	r2,-1(r20)
 1016850:	dc002917 	ldw	r16,164(sp)
 1016854:	2f00752e 	bgeu	r5,fp,1016a2c <___svfprintf_internal_r+0x219c>
 1016858:	d9c02384 	addi	r7,sp,142
 101685c:	3d0fc83a 	sub	r7,r7,r20
 1016860:	d9002344 	addi	r4,sp,141
 1016864:	e1cf883a 	add	r7,fp,r7
 1016868:	00000106 	br	1016870 <___svfprintf_internal_r+0x1fe0>
 101686c:	28800003 	ldbu	r2,0(r5)
 1016870:	20800005 	stb	r2,0(r4)
 1016874:	21000044 	addi	r4,r4,1
 1016878:	29400044 	addi	r5,r5,1
 101687c:	21fffb1e 	bne	r4,r7,101686c <__alt_data_end+0xff01686c>
 1016880:	d8802304 	addi	r2,sp,140
 1016884:	1505c83a 	sub	r2,r2,r20
 1016888:	d8c02344 	addi	r3,sp,141
 101688c:	1885883a 	add	r2,r3,r2
 1016890:	003f7006 	br	1016654 <__alt_data_end+0xff016654>
 1016894:	0005883a 	mov	r2,zero
 1016898:	003f0b06 	br	10164c8 <__alt_data_end+0xff0164c8>
 101689c:	d9002917 	ldw	r4,164(sp)
 10168a0:	d8c03217 	ldw	r3,200(sp)
 10168a4:	20800044 	addi	r2,r4,1
 10168a8:	1885883a 	add	r2,r3,r2
 10168ac:	d8802e15 	stw	r2,184(sp)
 10168b0:	103e870e 	bge	r2,zero,10162d0 <__alt_data_end+0xff0162d0>
 10168b4:	0005883a 	mov	r2,zero
 10168b8:	003e8506 	br	10162d0 <__alt_data_end+0xff0162d0>
 10168bc:	010040b4 	movhi	r4,258
 10168c0:	2119d084 	addi	r4,r4,26434
 10168c4:	d9002b15 	stw	r4,172(sp)
 10168c8:	003cc506 	br	1015be0 <__alt_data_end+0xff015be0>
 10168cc:	d8c03217 	ldw	r3,200(sp)
 10168d0:	18c00044 	addi	r3,r3,1
 10168d4:	d8c02e15 	stw	r3,184(sp)
 10168d8:	1805883a 	mov	r2,r3
 10168dc:	183fa10e 	bge	r3,zero,1016764 <__alt_data_end+0xff016764>
 10168e0:	0005883a 	mov	r2,zero
 10168e4:	003f9f06 	br	1016764 <__alt_data_end+0xff016764>
 10168e8:	d9003617 	ldw	r4,216(sp)
 10168ec:	000d883a 	mov	r6,zero
 10168f0:	000f883a 	mov	r7,zero
 10168f4:	a00b883a 	mov	r5,r20
 10168f8:	d8c03d15 	stw	r3,244(sp)
 10168fc:	da003e15 	stw	r8,248(sp)
 1016900:	1020e080 	call	1020e08 <__eqdf2>
 1016904:	d8c03d17 	ldw	r3,244(sp)
 1016908:	da003e17 	ldw	r8,248(sp)
 101690c:	103f8726 	beq	r2,zero,101672c <__alt_data_end+0xff01672c>
 1016910:	00800044 	movi	r2,1
 1016914:	10c7c83a 	sub	r3,r2,r3
 1016918:	d8c02615 	stw	r3,152(sp)
 101691c:	003f8406 	br	1016730 <__alt_data_end+0xff016730>
 1016920:	20000e1e 	bne	r4,zero,101695c <___svfprintf_internal_r+0x20cc>
 1016924:	9480004c 	andi	r18,r18,1
 1016928:	90000c1e 	bne	r18,zero,101695c <___svfprintf_internal_r+0x20cc>
 101692c:	00800044 	movi	r2,1
 1016930:	d8802e15 	stw	r2,184(sp)
 1016934:	003e6606 	br	10162d0 <__alt_data_end+0xff0162d0>
 1016938:	00800b44 	movi	r2,45
 101693c:	05adc83a 	sub	r22,zero,r22
 1016940:	d8802305 	stb	r2,140(sp)
 1016944:	003f3b06 	br	1016634 <__alt_data_end+0xff016634>
 1016948:	0005883a 	mov	r2,zero
 101694c:	003f4e06 	br	1016688 <__alt_data_end+0xff016688>
 1016950:	90a4703a 	and	r18,r18,r2
 1016954:	903f4a26 	beq	r18,zero,1016680 <__alt_data_end+0xff016680>
 1016958:	003f4606 	br	1016674 <__alt_data_end+0xff016674>
 101695c:	d8c02917 	ldw	r3,164(sp)
 1016960:	18c00084 	addi	r3,r3,2
 1016964:	d8c02e15 	stw	r3,184(sp)
 1016968:	1805883a 	mov	r2,r3
 101696c:	183e580e 	bge	r3,zero,10162d0 <__alt_data_end+0xff0162d0>
 1016970:	003fd006 	br	10168b4 <__alt_data_end+0xff0168b4>
 1016974:	00800084 	movi	r2,2
 1016978:	10c5c83a 	sub	r2,r2,r3
 101697c:	003f7506 	br	1016754 <__alt_data_end+0xff016754>
 1016980:	d8802d17 	ldw	r2,180(sp)
 1016984:	d9002d17 	ldw	r4,180(sp)
 1016988:	bc400043 	ldbu	r17,1(r23)
 101698c:	10800017 	ldw	r2,0(r2)
 1016990:	582f883a 	mov	r23,r11
 1016994:	d8802915 	stw	r2,164(sp)
 1016998:	20800104 	addi	r2,r4,4
 101699c:	d9002917 	ldw	r4,164(sp)
 10169a0:	d8802d15 	stw	r2,180(sp)
 10169a4:	203df00e 	bge	r4,zero,1016168 <__alt_data_end+0xff016168>
 10169a8:	8c403fcc 	andi	r17,r17,255
 10169ac:	00bfffc4 	movi	r2,-1
 10169b0:	8c40201c 	xori	r17,r17,128
 10169b4:	d8802915 	stw	r2,164(sp)
 10169b8:	8c7fe004 	addi	r17,r17,-128
 10169bc:	00380806 	br	10149e0 <__alt_data_end+0xff0149e0>
 10169c0:	9080004c 	andi	r2,r18,1
 10169c4:	0039883a 	mov	fp,zero
 10169c8:	10000726 	beq	r2,zero,10169e8 <___svfprintf_internal_r+0x2158>
 10169cc:	d8c02817 	ldw	r3,160(sp)
 10169d0:	dc001dc4 	addi	r16,sp,119
 10169d4:	00800c04 	movi	r2,48
 10169d8:	1c07c83a 	sub	r3,r3,r16
 10169dc:	d8801dc5 	stb	r2,119(sp)
 10169e0:	d8c02e15 	stw	r3,184(sp)
 10169e4:	00395206 	br	1014f30 <__alt_data_end+0xff014f30>
 10169e8:	d8002e15 	stw	zero,184(sp)
 10169ec:	dc001e04 	addi	r16,sp,120
 10169f0:	00394f06 	br	1014f30 <__alt_data_end+0xff014f30>
 10169f4:	0005883a 	mov	r2,zero
 10169f8:	003e3206 	br	10162c4 <__alt_data_end+0xff0162c4>
 10169fc:	dd802617 	ldw	r22,152(sp)
 1016a00:	003f0606 	br	101661c <__alt_data_end+0xff01661c>
 1016a04:	d9c02785 	stb	r7,158(sp)
 1016a08:	003a5106 	br	1015350 <__alt_data_end+0xff015350>
 1016a0c:	d9c02785 	stb	r7,158(sp)
 1016a10:	003a3706 	br	10152f0 <__alt_data_end+0xff0152f0>
 1016a14:	0005883a 	mov	r2,zero
 1016a18:	003f5e06 	br	1016794 <__alt_data_end+0xff016794>
 1016a1c:	d9c02785 	stb	r7,158(sp)
 1016a20:	00391706 	br	1014e80 <__alt_data_end+0xff014e80>
 1016a24:	d9c02785 	stb	r7,158(sp)
 1016a28:	0038e606 	br	1014dc4 <__alt_data_end+0xff014dc4>
 1016a2c:	d8802344 	addi	r2,sp,141
 1016a30:	003f0806 	br	1016654 <__alt_data_end+0xff016654>
 1016a34:	d9c02785 	stb	r7,158(sp)
 1016a38:	0038b706 	br	1014d18 <__alt_data_end+0xff014d18>
 1016a3c:	d9c02785 	stb	r7,158(sp)
 1016a40:	003adc06 	br	10155b4 <__alt_data_end+0xff0155b4>
 1016a44:	d9403917 	ldw	r5,228(sp)
 1016a48:	00800304 	movi	r2,12
 1016a4c:	28800015 	stw	r2,0(r5)
 1016a50:	00bfffc4 	movi	r2,-1
 1016a54:	00387806 	br	1014c38 <__alt_data_end+0xff014c38>
 1016a58:	d9c02785 	stb	r7,158(sp)
 1016a5c:	003abf06 	br	101555c <__alt_data_end+0xff01555c>
 1016a60:	d9c02785 	stb	r7,158(sp)
 1016a64:	003a9b06 	br	10154d4 <__alt_data_end+0xff0154d4>

01016a68 <_user_strerror>:
 1016a68:	0005883a 	mov	r2,zero
 1016a6c:	f800283a 	ret

01016a70 <_vfiprintf_r>:
 1016a70:	deffff04 	addi	sp,sp,-4
 1016a74:	dfc00015 	stw	ra,0(sp)
 1016a78:	101c7bc0 	call	101c7bc <___vfiprintf_internal_r>
 1016a7c:	dfc00017 	ldw	ra,0(sp)
 1016a80:	dec00104 	addi	sp,sp,4
 1016a84:	f800283a 	ret

01016a88 <abort>:
 1016a88:	deffff04 	addi	sp,sp,-4
 1016a8c:	01000184 	movi	r4,6
 1016a90:	dfc00015 	stw	ra,0(sp)
 1016a94:	101b0b00 	call	101b0b0 <raise>
 1016a98:	01000044 	movi	r4,1
 1016a9c:	10224140 	call	1022414 <_exit>

01016aa0 <quorem>:
 1016aa0:	defff704 	addi	sp,sp,-36
 1016aa4:	dc800215 	stw	r18,8(sp)
 1016aa8:	20800417 	ldw	r2,16(r4)
 1016aac:	2c800417 	ldw	r18,16(r5)
 1016ab0:	dfc00815 	stw	ra,32(sp)
 1016ab4:	ddc00715 	stw	r23,28(sp)
 1016ab8:	dd800615 	stw	r22,24(sp)
 1016abc:	dd400515 	stw	r21,20(sp)
 1016ac0:	dd000415 	stw	r20,16(sp)
 1016ac4:	dcc00315 	stw	r19,12(sp)
 1016ac8:	dc400115 	stw	r17,4(sp)
 1016acc:	dc000015 	stw	r16,0(sp)
 1016ad0:	14807116 	blt	r2,r18,1016c98 <quorem+0x1f8>
 1016ad4:	94bfffc4 	addi	r18,r18,-1
 1016ad8:	94ad883a 	add	r22,r18,r18
 1016adc:	b5ad883a 	add	r22,r22,r22
 1016ae0:	2c400504 	addi	r17,r5,20
 1016ae4:	8da9883a 	add	r20,r17,r22
 1016ae8:	25400504 	addi	r21,r4,20
 1016aec:	282f883a 	mov	r23,r5
 1016af0:	adad883a 	add	r22,r21,r22
 1016af4:	a1400017 	ldw	r5,0(r20)
 1016af8:	2021883a 	mov	r16,r4
 1016afc:	b1000017 	ldw	r4,0(r22)
 1016b00:	29400044 	addi	r5,r5,1
 1016b04:	101fbb80 	call	101fbb8 <__udivsi3>
 1016b08:	1027883a 	mov	r19,r2
 1016b0c:	10002c26 	beq	r2,zero,1016bc0 <quorem+0x120>
 1016b10:	a813883a 	mov	r9,r21
 1016b14:	880b883a 	mov	r5,r17
 1016b18:	0009883a 	mov	r4,zero
 1016b1c:	000d883a 	mov	r6,zero
 1016b20:	2a000017 	ldw	r8,0(r5)
 1016b24:	49c00017 	ldw	r7,0(r9)
 1016b28:	29400104 	addi	r5,r5,4
 1016b2c:	40bfffcc 	andi	r2,r8,65535
 1016b30:	14c5383a 	mul	r2,r2,r19
 1016b34:	4010d43a 	srli	r8,r8,16
 1016b38:	38ffffcc 	andi	r3,r7,65535
 1016b3c:	1105883a 	add	r2,r2,r4
 1016b40:	1008d43a 	srli	r4,r2,16
 1016b44:	44d1383a 	mul	r8,r8,r19
 1016b48:	198d883a 	add	r6,r3,r6
 1016b4c:	10ffffcc 	andi	r3,r2,65535
 1016b50:	30c7c83a 	sub	r3,r6,r3
 1016b54:	380ed43a 	srli	r7,r7,16
 1016b58:	4105883a 	add	r2,r8,r4
 1016b5c:	180dd43a 	srai	r6,r3,16
 1016b60:	113fffcc 	andi	r4,r2,65535
 1016b64:	390fc83a 	sub	r7,r7,r4
 1016b68:	398d883a 	add	r6,r7,r6
 1016b6c:	300e943a 	slli	r7,r6,16
 1016b70:	18ffffcc 	andi	r3,r3,65535
 1016b74:	1008d43a 	srli	r4,r2,16
 1016b78:	38ceb03a 	or	r7,r7,r3
 1016b7c:	49c00015 	stw	r7,0(r9)
 1016b80:	300dd43a 	srai	r6,r6,16
 1016b84:	4a400104 	addi	r9,r9,4
 1016b88:	a17fe52e 	bgeu	r20,r5,1016b20 <__alt_data_end+0xff016b20>
 1016b8c:	b0800017 	ldw	r2,0(r22)
 1016b90:	10000b1e 	bne	r2,zero,1016bc0 <quorem+0x120>
 1016b94:	b0bfff04 	addi	r2,r22,-4
 1016b98:	a880082e 	bgeu	r21,r2,1016bbc <quorem+0x11c>
 1016b9c:	b0ffff17 	ldw	r3,-4(r22)
 1016ba0:	18000326 	beq	r3,zero,1016bb0 <quorem+0x110>
 1016ba4:	00000506 	br	1016bbc <quorem+0x11c>
 1016ba8:	10c00017 	ldw	r3,0(r2)
 1016bac:	1800031e 	bne	r3,zero,1016bbc <quorem+0x11c>
 1016bb0:	10bfff04 	addi	r2,r2,-4
 1016bb4:	94bfffc4 	addi	r18,r18,-1
 1016bb8:	a8bffb36 	bltu	r21,r2,1016ba8 <__alt_data_end+0xff016ba8>
 1016bbc:	84800415 	stw	r18,16(r16)
 1016bc0:	b80b883a 	mov	r5,r23
 1016bc4:	8009883a 	mov	r4,r16
 1016bc8:	101a0fc0 	call	101a0fc <__mcmp>
 1016bcc:	10002616 	blt	r2,zero,1016c68 <quorem+0x1c8>
 1016bd0:	9cc00044 	addi	r19,r19,1
 1016bd4:	a805883a 	mov	r2,r21
 1016bd8:	000b883a 	mov	r5,zero
 1016bdc:	11000017 	ldw	r4,0(r2)
 1016be0:	89800017 	ldw	r6,0(r17)
 1016be4:	10800104 	addi	r2,r2,4
 1016be8:	20ffffcc 	andi	r3,r4,65535
 1016bec:	194b883a 	add	r5,r3,r5
 1016bf0:	30ffffcc 	andi	r3,r6,65535
 1016bf4:	28c7c83a 	sub	r3,r5,r3
 1016bf8:	300cd43a 	srli	r6,r6,16
 1016bfc:	2008d43a 	srli	r4,r4,16
 1016c00:	180bd43a 	srai	r5,r3,16
 1016c04:	18ffffcc 	andi	r3,r3,65535
 1016c08:	2189c83a 	sub	r4,r4,r6
 1016c0c:	2149883a 	add	r4,r4,r5
 1016c10:	200c943a 	slli	r6,r4,16
 1016c14:	8c400104 	addi	r17,r17,4
 1016c18:	200bd43a 	srai	r5,r4,16
 1016c1c:	30c6b03a 	or	r3,r6,r3
 1016c20:	10ffff15 	stw	r3,-4(r2)
 1016c24:	a47fed2e 	bgeu	r20,r17,1016bdc <__alt_data_end+0xff016bdc>
 1016c28:	9485883a 	add	r2,r18,r18
 1016c2c:	1085883a 	add	r2,r2,r2
 1016c30:	a887883a 	add	r3,r21,r2
 1016c34:	18800017 	ldw	r2,0(r3)
 1016c38:	10000b1e 	bne	r2,zero,1016c68 <quorem+0x1c8>
 1016c3c:	18bfff04 	addi	r2,r3,-4
 1016c40:	a880082e 	bgeu	r21,r2,1016c64 <quorem+0x1c4>
 1016c44:	18ffff17 	ldw	r3,-4(r3)
 1016c48:	18000326 	beq	r3,zero,1016c58 <quorem+0x1b8>
 1016c4c:	00000506 	br	1016c64 <quorem+0x1c4>
 1016c50:	10c00017 	ldw	r3,0(r2)
 1016c54:	1800031e 	bne	r3,zero,1016c64 <quorem+0x1c4>
 1016c58:	10bfff04 	addi	r2,r2,-4
 1016c5c:	94bfffc4 	addi	r18,r18,-1
 1016c60:	a8bffb36 	bltu	r21,r2,1016c50 <__alt_data_end+0xff016c50>
 1016c64:	84800415 	stw	r18,16(r16)
 1016c68:	9805883a 	mov	r2,r19
 1016c6c:	dfc00817 	ldw	ra,32(sp)
 1016c70:	ddc00717 	ldw	r23,28(sp)
 1016c74:	dd800617 	ldw	r22,24(sp)
 1016c78:	dd400517 	ldw	r21,20(sp)
 1016c7c:	dd000417 	ldw	r20,16(sp)
 1016c80:	dcc00317 	ldw	r19,12(sp)
 1016c84:	dc800217 	ldw	r18,8(sp)
 1016c88:	dc400117 	ldw	r17,4(sp)
 1016c8c:	dc000017 	ldw	r16,0(sp)
 1016c90:	dec00904 	addi	sp,sp,36
 1016c94:	f800283a 	ret
 1016c98:	0005883a 	mov	r2,zero
 1016c9c:	003ff306 	br	1016c6c <__alt_data_end+0xff016c6c>

01016ca0 <_dtoa_r>:
 1016ca0:	20801017 	ldw	r2,64(r4)
 1016ca4:	deffde04 	addi	sp,sp,-136
 1016ca8:	df002015 	stw	fp,128(sp)
 1016cac:	dcc01b15 	stw	r19,108(sp)
 1016cb0:	dc801a15 	stw	r18,104(sp)
 1016cb4:	dc401915 	stw	r17,100(sp)
 1016cb8:	dc001815 	stw	r16,96(sp)
 1016cbc:	dfc02115 	stw	ra,132(sp)
 1016cc0:	ddc01f15 	stw	r23,124(sp)
 1016cc4:	dd801e15 	stw	r22,120(sp)
 1016cc8:	dd401d15 	stw	r21,116(sp)
 1016ccc:	dd001c15 	stw	r20,112(sp)
 1016cd0:	d9c00315 	stw	r7,12(sp)
 1016cd4:	2039883a 	mov	fp,r4
 1016cd8:	3023883a 	mov	r17,r6
 1016cdc:	2825883a 	mov	r18,r5
 1016ce0:	dc002417 	ldw	r16,144(sp)
 1016ce4:	3027883a 	mov	r19,r6
 1016ce8:	10000826 	beq	r2,zero,1016d0c <_dtoa_r+0x6c>
 1016cec:	21801117 	ldw	r6,68(r4)
 1016cf0:	00c00044 	movi	r3,1
 1016cf4:	100b883a 	mov	r5,r2
 1016cf8:	1986983a 	sll	r3,r3,r6
 1016cfc:	11800115 	stw	r6,4(r2)
 1016d00:	10c00215 	stw	r3,8(r2)
 1016d04:	10198dc0 	call	10198dc <_Bfree>
 1016d08:	e0001015 	stw	zero,64(fp)
 1016d0c:	88002e16 	blt	r17,zero,1016dc8 <_dtoa_r+0x128>
 1016d10:	80000015 	stw	zero,0(r16)
 1016d14:	889ffc2c 	andhi	r2,r17,32752
 1016d18:	00dffc34 	movhi	r3,32752
 1016d1c:	10c01c26 	beq	r2,r3,1016d90 <_dtoa_r+0xf0>
 1016d20:	000d883a 	mov	r6,zero
 1016d24:	000f883a 	mov	r7,zero
 1016d28:	9009883a 	mov	r4,r18
 1016d2c:	980b883a 	mov	r5,r19
 1016d30:	1020e080 	call	1020e08 <__eqdf2>
 1016d34:	10002b1e 	bne	r2,zero,1016de4 <_dtoa_r+0x144>
 1016d38:	d9c02317 	ldw	r7,140(sp)
 1016d3c:	00800044 	movi	r2,1
 1016d40:	38800015 	stw	r2,0(r7)
 1016d44:	d8802517 	ldw	r2,148(sp)
 1016d48:	10019e26 	beq	r2,zero,10173c4 <_dtoa_r+0x724>
 1016d4c:	d8c02517 	ldw	r3,148(sp)
 1016d50:	008040b4 	movhi	r2,258
 1016d54:	1099d044 	addi	r2,r2,26433
 1016d58:	18800015 	stw	r2,0(r3)
 1016d5c:	10bfffc4 	addi	r2,r2,-1
 1016d60:	dfc02117 	ldw	ra,132(sp)
 1016d64:	df002017 	ldw	fp,128(sp)
 1016d68:	ddc01f17 	ldw	r23,124(sp)
 1016d6c:	dd801e17 	ldw	r22,120(sp)
 1016d70:	dd401d17 	ldw	r21,116(sp)
 1016d74:	dd001c17 	ldw	r20,112(sp)
 1016d78:	dcc01b17 	ldw	r19,108(sp)
 1016d7c:	dc801a17 	ldw	r18,104(sp)
 1016d80:	dc401917 	ldw	r17,100(sp)
 1016d84:	dc001817 	ldw	r16,96(sp)
 1016d88:	dec02204 	addi	sp,sp,136
 1016d8c:	f800283a 	ret
 1016d90:	d8c02317 	ldw	r3,140(sp)
 1016d94:	0089c3c4 	movi	r2,9999
 1016d98:	18800015 	stw	r2,0(r3)
 1016d9c:	90017726 	beq	r18,zero,101737c <_dtoa_r+0x6dc>
 1016da0:	008040b4 	movhi	r2,258
 1016da4:	1099dc04 	addi	r2,r2,26480
 1016da8:	d9002517 	ldw	r4,148(sp)
 1016dac:	203fec26 	beq	r4,zero,1016d60 <__alt_data_end+0xff016d60>
 1016db0:	10c000c7 	ldb	r3,3(r2)
 1016db4:	1801781e 	bne	r3,zero,1017398 <_dtoa_r+0x6f8>
 1016db8:	10c000c4 	addi	r3,r2,3
 1016dbc:	d9802517 	ldw	r6,148(sp)
 1016dc0:	30c00015 	stw	r3,0(r6)
 1016dc4:	003fe606 	br	1016d60 <__alt_data_end+0xff016d60>
 1016dc8:	04e00034 	movhi	r19,32768
 1016dcc:	9cffffc4 	addi	r19,r19,-1
 1016dd0:	00800044 	movi	r2,1
 1016dd4:	8ce6703a 	and	r19,r17,r19
 1016dd8:	80800015 	stw	r2,0(r16)
 1016ddc:	9823883a 	mov	r17,r19
 1016de0:	003fcc06 	br	1016d14 <__alt_data_end+0xff016d14>
 1016de4:	d8800204 	addi	r2,sp,8
 1016de8:	d8800015 	stw	r2,0(sp)
 1016dec:	d9c00104 	addi	r7,sp,4
 1016df0:	900b883a 	mov	r5,r18
 1016df4:	980d883a 	mov	r6,r19
 1016df8:	e009883a 	mov	r4,fp
 1016dfc:	8820d53a 	srli	r16,r17,20
 1016e00:	101a4c80 	call	101a4c8 <__d2b>
 1016e04:	d8800915 	stw	r2,36(sp)
 1016e08:	8001651e 	bne	r16,zero,10173a0 <_dtoa_r+0x700>
 1016e0c:	dd800217 	ldw	r22,8(sp)
 1016e10:	dc000117 	ldw	r16,4(sp)
 1016e14:	00800804 	movi	r2,32
 1016e18:	b421883a 	add	r16,r22,r16
 1016e1c:	80c10c84 	addi	r3,r16,1074
 1016e20:	10c2d10e 	bge	r2,r3,1017968 <_dtoa_r+0xcc8>
 1016e24:	00801004 	movi	r2,64
 1016e28:	81010484 	addi	r4,r16,1042
 1016e2c:	10c7c83a 	sub	r3,r2,r3
 1016e30:	9108d83a 	srl	r4,r18,r4
 1016e34:	88e2983a 	sll	r17,r17,r3
 1016e38:	2448b03a 	or	r4,r4,r17
 1016e3c:	10221d00 	call	10221d0 <__floatunsidf>
 1016e40:	017f8434 	movhi	r5,65040
 1016e44:	01800044 	movi	r6,1
 1016e48:	1009883a 	mov	r4,r2
 1016e4c:	194b883a 	add	r5,r3,r5
 1016e50:	843fffc4 	addi	r16,r16,-1
 1016e54:	d9801115 	stw	r6,68(sp)
 1016e58:	000d883a 	mov	r6,zero
 1016e5c:	01cffe34 	movhi	r7,16376
 1016e60:	10217780 	call	1021778 <__subdf3>
 1016e64:	0198dbf4 	movhi	r6,25455
 1016e68:	01cff4f4 	movhi	r7,16339
 1016e6c:	3190d844 	addi	r6,r6,17249
 1016e70:	39e1e9c4 	addi	r7,r7,-30809
 1016e74:	1009883a 	mov	r4,r2
 1016e78:	180b883a 	mov	r5,r3
 1016e7c:	10210600 	call	1021060 <__muldf3>
 1016e80:	01a2d874 	movhi	r6,35681
 1016e84:	01cff1f4 	movhi	r7,16327
 1016e88:	31b22cc4 	addi	r6,r6,-14157
 1016e8c:	39e28a04 	addi	r7,r7,-30168
 1016e90:	180b883a 	mov	r5,r3
 1016e94:	1009883a 	mov	r4,r2
 1016e98:	101fc740 	call	101fc74 <__adddf3>
 1016e9c:	8009883a 	mov	r4,r16
 1016ea0:	1029883a 	mov	r20,r2
 1016ea4:	1823883a 	mov	r17,r3
 1016ea8:	10220f40 	call	10220f4 <__floatsidf>
 1016eac:	019427f4 	movhi	r6,20639
 1016eb0:	01cff4f4 	movhi	r7,16339
 1016eb4:	319e7ec4 	addi	r6,r6,31227
 1016eb8:	39d104c4 	addi	r7,r7,17427
 1016ebc:	1009883a 	mov	r4,r2
 1016ec0:	180b883a 	mov	r5,r3
 1016ec4:	10210600 	call	1021060 <__muldf3>
 1016ec8:	100d883a 	mov	r6,r2
 1016ecc:	180f883a 	mov	r7,r3
 1016ed0:	a009883a 	mov	r4,r20
 1016ed4:	880b883a 	mov	r5,r17
 1016ed8:	101fc740 	call	101fc74 <__adddf3>
 1016edc:	1009883a 	mov	r4,r2
 1016ee0:	180b883a 	mov	r5,r3
 1016ee4:	1029883a 	mov	r20,r2
 1016ee8:	1823883a 	mov	r17,r3
 1016eec:	10220740 	call	1022074 <__fixdfsi>
 1016ef0:	000d883a 	mov	r6,zero
 1016ef4:	000f883a 	mov	r7,zero
 1016ef8:	a009883a 	mov	r4,r20
 1016efc:	880b883a 	mov	r5,r17
 1016f00:	d8800515 	stw	r2,20(sp)
 1016f04:	1020f6c0 	call	1020f6c <__ledf2>
 1016f08:	10028716 	blt	r2,zero,1017928 <_dtoa_r+0xc88>
 1016f0c:	d8c00517 	ldw	r3,20(sp)
 1016f10:	00800584 	movi	r2,22
 1016f14:	10c27536 	bltu	r2,r3,10178ec <_dtoa_r+0xc4c>
 1016f18:	180490fa 	slli	r2,r3,3
 1016f1c:	00c040b4 	movhi	r3,258
 1016f20:	18d9f704 	addi	r3,r3,26588
 1016f24:	1885883a 	add	r2,r3,r2
 1016f28:	11000017 	ldw	r4,0(r2)
 1016f2c:	11400117 	ldw	r5,4(r2)
 1016f30:	900d883a 	mov	r6,r18
 1016f34:	980f883a 	mov	r7,r19
 1016f38:	1020e900 	call	1020e90 <__gedf2>
 1016f3c:	00828d0e 	bge	zero,r2,1017974 <_dtoa_r+0xcd4>
 1016f40:	d9000517 	ldw	r4,20(sp)
 1016f44:	d8000e15 	stw	zero,56(sp)
 1016f48:	213fffc4 	addi	r4,r4,-1
 1016f4c:	d9000515 	stw	r4,20(sp)
 1016f50:	b42dc83a 	sub	r22,r22,r16
 1016f54:	b5bfffc4 	addi	r22,r22,-1
 1016f58:	b0026f16 	blt	r22,zero,1017918 <_dtoa_r+0xc78>
 1016f5c:	d8000815 	stw	zero,32(sp)
 1016f60:	d9c00517 	ldw	r7,20(sp)
 1016f64:	38026416 	blt	r7,zero,10178f8 <_dtoa_r+0xc58>
 1016f68:	b1ed883a 	add	r22,r22,r7
 1016f6c:	d9c00d15 	stw	r7,52(sp)
 1016f70:	d8000a15 	stw	zero,40(sp)
 1016f74:	d9800317 	ldw	r6,12(sp)
 1016f78:	00800244 	movi	r2,9
 1016f7c:	11811436 	bltu	r2,r6,10173d0 <_dtoa_r+0x730>
 1016f80:	00800144 	movi	r2,5
 1016f84:	1184e10e 	bge	r2,r6,101830c <_dtoa_r+0x166c>
 1016f88:	31bfff04 	addi	r6,r6,-4
 1016f8c:	d9800315 	stw	r6,12(sp)
 1016f90:	0023883a 	mov	r17,zero
 1016f94:	d9800317 	ldw	r6,12(sp)
 1016f98:	008000c4 	movi	r2,3
 1016f9c:	30836726 	beq	r6,r2,1017d3c <_dtoa_r+0x109c>
 1016fa0:	1183410e 	bge	r2,r6,1017ca8 <_dtoa_r+0x1008>
 1016fa4:	d9c00317 	ldw	r7,12(sp)
 1016fa8:	00800104 	movi	r2,4
 1016fac:	38827c26 	beq	r7,r2,10179a0 <_dtoa_r+0xd00>
 1016fb0:	00800144 	movi	r2,5
 1016fb4:	3884c41e 	bne	r7,r2,10182c8 <_dtoa_r+0x1628>
 1016fb8:	00800044 	movi	r2,1
 1016fbc:	d8800b15 	stw	r2,44(sp)
 1016fc0:	d8c00517 	ldw	r3,20(sp)
 1016fc4:	d9002217 	ldw	r4,136(sp)
 1016fc8:	1907883a 	add	r3,r3,r4
 1016fcc:	19800044 	addi	r6,r3,1
 1016fd0:	d8c00c15 	stw	r3,48(sp)
 1016fd4:	d9800615 	stw	r6,24(sp)
 1016fd8:	0183a40e 	bge	zero,r6,1017e6c <_dtoa_r+0x11cc>
 1016fdc:	d9800617 	ldw	r6,24(sp)
 1016fe0:	3021883a 	mov	r16,r6
 1016fe4:	e0001115 	stw	zero,68(fp)
 1016fe8:	008005c4 	movi	r2,23
 1016fec:	1184c92e 	bgeu	r2,r6,1018314 <_dtoa_r+0x1674>
 1016ff0:	00c00044 	movi	r3,1
 1016ff4:	00800104 	movi	r2,4
 1016ff8:	1085883a 	add	r2,r2,r2
 1016ffc:	11000504 	addi	r4,r2,20
 1017000:	180b883a 	mov	r5,r3
 1017004:	18c00044 	addi	r3,r3,1
 1017008:	313ffb2e 	bgeu	r6,r4,1016ff8 <__alt_data_end+0xff016ff8>
 101700c:	e1401115 	stw	r5,68(fp)
 1017010:	e009883a 	mov	r4,fp
 1017014:	10198340 	call	1019834 <_Balloc>
 1017018:	d8800715 	stw	r2,28(sp)
 101701c:	e0801015 	stw	r2,64(fp)
 1017020:	00800384 	movi	r2,14
 1017024:	1400f736 	bltu	r2,r16,1017404 <_dtoa_r+0x764>
 1017028:	8800f626 	beq	r17,zero,1017404 <_dtoa_r+0x764>
 101702c:	d9c00517 	ldw	r7,20(sp)
 1017030:	01c39a0e 	bge	zero,r7,1017e9c <_dtoa_r+0x11fc>
 1017034:	388003cc 	andi	r2,r7,15
 1017038:	100490fa 	slli	r2,r2,3
 101703c:	382bd13a 	srai	r21,r7,4
 1017040:	00c040b4 	movhi	r3,258
 1017044:	18d9f704 	addi	r3,r3,26588
 1017048:	1885883a 	add	r2,r3,r2
 101704c:	a8c0040c 	andi	r3,r21,16
 1017050:	12400017 	ldw	r9,0(r2)
 1017054:	12000117 	ldw	r8,4(r2)
 1017058:	18037926 	beq	r3,zero,1017e40 <_dtoa_r+0x11a0>
 101705c:	008040b4 	movhi	r2,258
 1017060:	1099ed04 	addi	r2,r2,26548
 1017064:	11800817 	ldw	r6,32(r2)
 1017068:	11c00917 	ldw	r7,36(r2)
 101706c:	9009883a 	mov	r4,r18
 1017070:	980b883a 	mov	r5,r19
 1017074:	da001715 	stw	r8,92(sp)
 1017078:	da401615 	stw	r9,88(sp)
 101707c:	10205200 	call	1020520 <__divdf3>
 1017080:	da001717 	ldw	r8,92(sp)
 1017084:	da401617 	ldw	r9,88(sp)
 1017088:	ad4003cc 	andi	r21,r21,15
 101708c:	040000c4 	movi	r16,3
 1017090:	1023883a 	mov	r17,r2
 1017094:	1829883a 	mov	r20,r3
 1017098:	a8001126 	beq	r21,zero,10170e0 <_dtoa_r+0x440>
 101709c:	05c040b4 	movhi	r23,258
 10170a0:	bdd9ed04 	addi	r23,r23,26548
 10170a4:	4805883a 	mov	r2,r9
 10170a8:	4007883a 	mov	r3,r8
 10170ac:	a980004c 	andi	r6,r21,1
 10170b0:	1009883a 	mov	r4,r2
 10170b4:	a82bd07a 	srai	r21,r21,1
 10170b8:	180b883a 	mov	r5,r3
 10170bc:	30000426 	beq	r6,zero,10170d0 <_dtoa_r+0x430>
 10170c0:	b9800017 	ldw	r6,0(r23)
 10170c4:	b9c00117 	ldw	r7,4(r23)
 10170c8:	84000044 	addi	r16,r16,1
 10170cc:	10210600 	call	1021060 <__muldf3>
 10170d0:	bdc00204 	addi	r23,r23,8
 10170d4:	a83ff51e 	bne	r21,zero,10170ac <__alt_data_end+0xff0170ac>
 10170d8:	1013883a 	mov	r9,r2
 10170dc:	1811883a 	mov	r8,r3
 10170e0:	480d883a 	mov	r6,r9
 10170e4:	400f883a 	mov	r7,r8
 10170e8:	8809883a 	mov	r4,r17
 10170ec:	a00b883a 	mov	r5,r20
 10170f0:	10205200 	call	1020520 <__divdf3>
 10170f4:	d8800f15 	stw	r2,60(sp)
 10170f8:	d8c01015 	stw	r3,64(sp)
 10170fc:	d8c00e17 	ldw	r3,56(sp)
 1017100:	18000626 	beq	r3,zero,101711c <_dtoa_r+0x47c>
 1017104:	d9000f17 	ldw	r4,60(sp)
 1017108:	d9401017 	ldw	r5,64(sp)
 101710c:	000d883a 	mov	r6,zero
 1017110:	01cffc34 	movhi	r7,16368
 1017114:	1020f6c0 	call	1020f6c <__ledf2>
 1017118:	10040b16 	blt	r2,zero,1018148 <_dtoa_r+0x14a8>
 101711c:	8009883a 	mov	r4,r16
 1017120:	10220f40 	call	10220f4 <__floatsidf>
 1017124:	d9800f17 	ldw	r6,60(sp)
 1017128:	d9c01017 	ldw	r7,64(sp)
 101712c:	1009883a 	mov	r4,r2
 1017130:	180b883a 	mov	r5,r3
 1017134:	10210600 	call	1021060 <__muldf3>
 1017138:	000d883a 	mov	r6,zero
 101713c:	01d00734 	movhi	r7,16412
 1017140:	1009883a 	mov	r4,r2
 1017144:	180b883a 	mov	r5,r3
 1017148:	101fc740 	call	101fc74 <__adddf3>
 101714c:	1021883a 	mov	r16,r2
 1017150:	d8800617 	ldw	r2,24(sp)
 1017154:	047f3034 	movhi	r17,64704
 1017158:	1c63883a 	add	r17,r3,r17
 101715c:	10031826 	beq	r2,zero,1017dc0 <_dtoa_r+0x1120>
 1017160:	d8c00517 	ldw	r3,20(sp)
 1017164:	db000617 	ldw	r12,24(sp)
 1017168:	d8c01315 	stw	r3,76(sp)
 101716c:	d9000b17 	ldw	r4,44(sp)
 1017170:	20038f26 	beq	r4,zero,1017fb0 <_dtoa_r+0x1310>
 1017174:	60bfffc4 	addi	r2,r12,-1
 1017178:	100490fa 	slli	r2,r2,3
 101717c:	00c040b4 	movhi	r3,258
 1017180:	18d9f704 	addi	r3,r3,26588
 1017184:	1885883a 	add	r2,r3,r2
 1017188:	11800017 	ldw	r6,0(r2)
 101718c:	11c00117 	ldw	r7,4(r2)
 1017190:	d8800717 	ldw	r2,28(sp)
 1017194:	0009883a 	mov	r4,zero
 1017198:	014ff834 	movhi	r5,16352
 101719c:	db001615 	stw	r12,88(sp)
 10171a0:	15c00044 	addi	r23,r2,1
 10171a4:	10205200 	call	1020520 <__divdf3>
 10171a8:	800d883a 	mov	r6,r16
 10171ac:	880f883a 	mov	r7,r17
 10171b0:	1009883a 	mov	r4,r2
 10171b4:	180b883a 	mov	r5,r3
 10171b8:	10217780 	call	1021778 <__subdf3>
 10171bc:	d9401017 	ldw	r5,64(sp)
 10171c0:	d9000f17 	ldw	r4,60(sp)
 10171c4:	102b883a 	mov	r21,r2
 10171c8:	d8c01215 	stw	r3,72(sp)
 10171cc:	10220740 	call	1022074 <__fixdfsi>
 10171d0:	1009883a 	mov	r4,r2
 10171d4:	1029883a 	mov	r20,r2
 10171d8:	10220f40 	call	10220f4 <__floatsidf>
 10171dc:	d9000f17 	ldw	r4,60(sp)
 10171e0:	d9401017 	ldw	r5,64(sp)
 10171e4:	100d883a 	mov	r6,r2
 10171e8:	180f883a 	mov	r7,r3
 10171ec:	10217780 	call	1021778 <__subdf3>
 10171f0:	1823883a 	mov	r17,r3
 10171f4:	d8c00717 	ldw	r3,28(sp)
 10171f8:	d9401217 	ldw	r5,72(sp)
 10171fc:	a2000c04 	addi	r8,r20,48
 1017200:	1021883a 	mov	r16,r2
 1017204:	1a000005 	stb	r8,0(r3)
 1017208:	800d883a 	mov	r6,r16
 101720c:	880f883a 	mov	r7,r17
 1017210:	a809883a 	mov	r4,r21
 1017214:	4029883a 	mov	r20,r8
 1017218:	1020e900 	call	1020e90 <__gedf2>
 101721c:	00841d16 	blt	zero,r2,1018294 <_dtoa_r+0x15f4>
 1017220:	800d883a 	mov	r6,r16
 1017224:	880f883a 	mov	r7,r17
 1017228:	0009883a 	mov	r4,zero
 101722c:	014ffc34 	movhi	r5,16368
 1017230:	10217780 	call	1021778 <__subdf3>
 1017234:	d9401217 	ldw	r5,72(sp)
 1017238:	100d883a 	mov	r6,r2
 101723c:	180f883a 	mov	r7,r3
 1017240:	a809883a 	mov	r4,r21
 1017244:	1020e900 	call	1020e90 <__gedf2>
 1017248:	db001617 	ldw	r12,88(sp)
 101724c:	00840e16 	blt	zero,r2,1018288 <_dtoa_r+0x15e8>
 1017250:	00800044 	movi	r2,1
 1017254:	13006b0e 	bge	r2,r12,1017404 <_dtoa_r+0x764>
 1017258:	d9000717 	ldw	r4,28(sp)
 101725c:	dd800f15 	stw	r22,60(sp)
 1017260:	dcc01015 	stw	r19,64(sp)
 1017264:	2319883a 	add	r12,r4,r12
 1017268:	dcc01217 	ldw	r19,72(sp)
 101726c:	602d883a 	mov	r22,r12
 1017270:	dc801215 	stw	r18,72(sp)
 1017274:	b825883a 	mov	r18,r23
 1017278:	00000906 	br	10172a0 <_dtoa_r+0x600>
 101727c:	10217780 	call	1021778 <__subdf3>
 1017280:	a80d883a 	mov	r6,r21
 1017284:	980f883a 	mov	r7,r19
 1017288:	1009883a 	mov	r4,r2
 101728c:	180b883a 	mov	r5,r3
 1017290:	1020f6c0 	call	1020f6c <__ledf2>
 1017294:	1003e816 	blt	r2,zero,1018238 <_dtoa_r+0x1598>
 1017298:	b825883a 	mov	r18,r23
 101729c:	bd83e926 	beq	r23,r22,1018244 <_dtoa_r+0x15a4>
 10172a0:	a809883a 	mov	r4,r21
 10172a4:	980b883a 	mov	r5,r19
 10172a8:	000d883a 	mov	r6,zero
 10172ac:	01d00934 	movhi	r7,16420
 10172b0:	10210600 	call	1021060 <__muldf3>
 10172b4:	000d883a 	mov	r6,zero
 10172b8:	01d00934 	movhi	r7,16420
 10172bc:	8009883a 	mov	r4,r16
 10172c0:	880b883a 	mov	r5,r17
 10172c4:	102b883a 	mov	r21,r2
 10172c8:	1827883a 	mov	r19,r3
 10172cc:	10210600 	call	1021060 <__muldf3>
 10172d0:	180b883a 	mov	r5,r3
 10172d4:	1009883a 	mov	r4,r2
 10172d8:	1821883a 	mov	r16,r3
 10172dc:	1023883a 	mov	r17,r2
 10172e0:	10220740 	call	1022074 <__fixdfsi>
 10172e4:	1009883a 	mov	r4,r2
 10172e8:	1029883a 	mov	r20,r2
 10172ec:	10220f40 	call	10220f4 <__floatsidf>
 10172f0:	8809883a 	mov	r4,r17
 10172f4:	800b883a 	mov	r5,r16
 10172f8:	100d883a 	mov	r6,r2
 10172fc:	180f883a 	mov	r7,r3
 1017300:	10217780 	call	1021778 <__subdf3>
 1017304:	a5000c04 	addi	r20,r20,48
 1017308:	a80d883a 	mov	r6,r21
 101730c:	980f883a 	mov	r7,r19
 1017310:	1009883a 	mov	r4,r2
 1017314:	180b883a 	mov	r5,r3
 1017318:	95000005 	stb	r20,0(r18)
 101731c:	1021883a 	mov	r16,r2
 1017320:	1823883a 	mov	r17,r3
 1017324:	1020f6c0 	call	1020f6c <__ledf2>
 1017328:	bdc00044 	addi	r23,r23,1
 101732c:	800d883a 	mov	r6,r16
 1017330:	880f883a 	mov	r7,r17
 1017334:	0009883a 	mov	r4,zero
 1017338:	014ffc34 	movhi	r5,16368
 101733c:	103fcf0e 	bge	r2,zero,101727c <__alt_data_end+0xff01727c>
 1017340:	d8c01317 	ldw	r3,76(sp)
 1017344:	d8c00515 	stw	r3,20(sp)
 1017348:	d9400917 	ldw	r5,36(sp)
 101734c:	e009883a 	mov	r4,fp
 1017350:	10198dc0 	call	10198dc <_Bfree>
 1017354:	d9000517 	ldw	r4,20(sp)
 1017358:	d9802317 	ldw	r6,140(sp)
 101735c:	d9c02517 	ldw	r7,148(sp)
 1017360:	b8000005 	stb	zero,0(r23)
 1017364:	20800044 	addi	r2,r4,1
 1017368:	30800015 	stw	r2,0(r6)
 101736c:	3802aa26 	beq	r7,zero,1017e18 <_dtoa_r+0x1178>
 1017370:	3dc00015 	stw	r23,0(r7)
 1017374:	d8800717 	ldw	r2,28(sp)
 1017378:	003e7906 	br	1016d60 <__alt_data_end+0xff016d60>
 101737c:	00800434 	movhi	r2,16
 1017380:	10bfffc4 	addi	r2,r2,-1
 1017384:	88a2703a 	and	r17,r17,r2
 1017388:	883e851e 	bne	r17,zero,1016da0 <__alt_data_end+0xff016da0>
 101738c:	008040b4 	movhi	r2,258
 1017390:	1099d904 	addi	r2,r2,26468
 1017394:	003e8406 	br	1016da8 <__alt_data_end+0xff016da8>
 1017398:	10c00204 	addi	r3,r2,8
 101739c:	003e8706 	br	1016dbc <__alt_data_end+0xff016dbc>
 10173a0:	01400434 	movhi	r5,16
 10173a4:	297fffc4 	addi	r5,r5,-1
 10173a8:	994a703a 	and	r5,r19,r5
 10173ac:	9009883a 	mov	r4,r18
 10173b0:	843f0044 	addi	r16,r16,-1023
 10173b4:	294ffc34 	orhi	r5,r5,16368
 10173b8:	dd800217 	ldw	r22,8(sp)
 10173bc:	d8001115 	stw	zero,68(sp)
 10173c0:	003ea506 	br	1016e58 <__alt_data_end+0xff016e58>
 10173c4:	008040b4 	movhi	r2,258
 10173c8:	1099d004 	addi	r2,r2,26432
 10173cc:	003e6406 	br	1016d60 <__alt_data_end+0xff016d60>
 10173d0:	e0001115 	stw	zero,68(fp)
 10173d4:	000b883a 	mov	r5,zero
 10173d8:	e009883a 	mov	r4,fp
 10173dc:	10198340 	call	1019834 <_Balloc>
 10173e0:	01bfffc4 	movi	r6,-1
 10173e4:	01c00044 	movi	r7,1
 10173e8:	d8800715 	stw	r2,28(sp)
 10173ec:	d9800c15 	stw	r6,48(sp)
 10173f0:	e0801015 	stw	r2,64(fp)
 10173f4:	d8000315 	stw	zero,12(sp)
 10173f8:	d9c00b15 	stw	r7,44(sp)
 10173fc:	d9800615 	stw	r6,24(sp)
 1017400:	d8002215 	stw	zero,136(sp)
 1017404:	d8800117 	ldw	r2,4(sp)
 1017408:	10008916 	blt	r2,zero,1017630 <_dtoa_r+0x990>
 101740c:	d9000517 	ldw	r4,20(sp)
 1017410:	00c00384 	movi	r3,14
 1017414:	19008616 	blt	r3,r4,1017630 <_dtoa_r+0x990>
 1017418:	200490fa 	slli	r2,r4,3
 101741c:	00c040b4 	movhi	r3,258
 1017420:	d9802217 	ldw	r6,136(sp)
 1017424:	18d9f704 	addi	r3,r3,26588
 1017428:	1885883a 	add	r2,r3,r2
 101742c:	14000017 	ldw	r16,0(r2)
 1017430:	14400117 	ldw	r17,4(r2)
 1017434:	30016316 	blt	r6,zero,10179c4 <_dtoa_r+0xd24>
 1017438:	800d883a 	mov	r6,r16
 101743c:	880f883a 	mov	r7,r17
 1017440:	9009883a 	mov	r4,r18
 1017444:	980b883a 	mov	r5,r19
 1017448:	10205200 	call	1020520 <__divdf3>
 101744c:	180b883a 	mov	r5,r3
 1017450:	1009883a 	mov	r4,r2
 1017454:	10220740 	call	1022074 <__fixdfsi>
 1017458:	1009883a 	mov	r4,r2
 101745c:	102b883a 	mov	r21,r2
 1017460:	10220f40 	call	10220f4 <__floatsidf>
 1017464:	800d883a 	mov	r6,r16
 1017468:	880f883a 	mov	r7,r17
 101746c:	1009883a 	mov	r4,r2
 1017470:	180b883a 	mov	r5,r3
 1017474:	10210600 	call	1021060 <__muldf3>
 1017478:	100d883a 	mov	r6,r2
 101747c:	180f883a 	mov	r7,r3
 1017480:	9009883a 	mov	r4,r18
 1017484:	980b883a 	mov	r5,r19
 1017488:	10217780 	call	1021778 <__subdf3>
 101748c:	d9c00717 	ldw	r7,28(sp)
 1017490:	1009883a 	mov	r4,r2
 1017494:	a8800c04 	addi	r2,r21,48
 1017498:	38800005 	stb	r2,0(r7)
 101749c:	3dc00044 	addi	r23,r7,1
 10174a0:	d9c00617 	ldw	r7,24(sp)
 10174a4:	01800044 	movi	r6,1
 10174a8:	180b883a 	mov	r5,r3
 10174ac:	2005883a 	mov	r2,r4
 10174b0:	39803826 	beq	r7,r6,1017594 <_dtoa_r+0x8f4>
 10174b4:	000d883a 	mov	r6,zero
 10174b8:	01d00934 	movhi	r7,16420
 10174bc:	10210600 	call	1021060 <__muldf3>
 10174c0:	000d883a 	mov	r6,zero
 10174c4:	000f883a 	mov	r7,zero
 10174c8:	1009883a 	mov	r4,r2
 10174cc:	180b883a 	mov	r5,r3
 10174d0:	1025883a 	mov	r18,r2
 10174d4:	1827883a 	mov	r19,r3
 10174d8:	1020e080 	call	1020e08 <__eqdf2>
 10174dc:	103f9a26 	beq	r2,zero,1017348 <__alt_data_end+0xff017348>
 10174e0:	d9c00617 	ldw	r7,24(sp)
 10174e4:	d8c00717 	ldw	r3,28(sp)
 10174e8:	b829883a 	mov	r20,r23
 10174ec:	38bfffc4 	addi	r2,r7,-1
 10174f0:	18ad883a 	add	r22,r3,r2
 10174f4:	00000a06 	br	1017520 <_dtoa_r+0x880>
 10174f8:	10210600 	call	1021060 <__muldf3>
 10174fc:	000d883a 	mov	r6,zero
 1017500:	000f883a 	mov	r7,zero
 1017504:	1009883a 	mov	r4,r2
 1017508:	180b883a 	mov	r5,r3
 101750c:	1025883a 	mov	r18,r2
 1017510:	1827883a 	mov	r19,r3
 1017514:	b829883a 	mov	r20,r23
 1017518:	1020e080 	call	1020e08 <__eqdf2>
 101751c:	103f8a26 	beq	r2,zero,1017348 <__alt_data_end+0xff017348>
 1017520:	800d883a 	mov	r6,r16
 1017524:	880f883a 	mov	r7,r17
 1017528:	9009883a 	mov	r4,r18
 101752c:	980b883a 	mov	r5,r19
 1017530:	10205200 	call	1020520 <__divdf3>
 1017534:	180b883a 	mov	r5,r3
 1017538:	1009883a 	mov	r4,r2
 101753c:	10220740 	call	1022074 <__fixdfsi>
 1017540:	1009883a 	mov	r4,r2
 1017544:	102b883a 	mov	r21,r2
 1017548:	10220f40 	call	10220f4 <__floatsidf>
 101754c:	800d883a 	mov	r6,r16
 1017550:	880f883a 	mov	r7,r17
 1017554:	1009883a 	mov	r4,r2
 1017558:	180b883a 	mov	r5,r3
 101755c:	10210600 	call	1021060 <__muldf3>
 1017560:	100d883a 	mov	r6,r2
 1017564:	180f883a 	mov	r7,r3
 1017568:	9009883a 	mov	r4,r18
 101756c:	980b883a 	mov	r5,r19
 1017570:	10217780 	call	1021778 <__subdf3>
 1017574:	aa000c04 	addi	r8,r21,48
 1017578:	a2000005 	stb	r8,0(r20)
 101757c:	000d883a 	mov	r6,zero
 1017580:	01d00934 	movhi	r7,16420
 1017584:	1009883a 	mov	r4,r2
 1017588:	180b883a 	mov	r5,r3
 101758c:	a5c00044 	addi	r23,r20,1
 1017590:	b53fd91e 	bne	r22,r20,10174f8 <__alt_data_end+0xff0174f8>
 1017594:	100d883a 	mov	r6,r2
 1017598:	180f883a 	mov	r7,r3
 101759c:	1009883a 	mov	r4,r2
 10175a0:	180b883a 	mov	r5,r3
 10175a4:	101fc740 	call	101fc74 <__adddf3>
 10175a8:	100d883a 	mov	r6,r2
 10175ac:	180f883a 	mov	r7,r3
 10175b0:	8009883a 	mov	r4,r16
 10175b4:	880b883a 	mov	r5,r17
 10175b8:	1027883a 	mov	r19,r2
 10175bc:	1825883a 	mov	r18,r3
 10175c0:	1020f6c0 	call	1020f6c <__ledf2>
 10175c4:	10000816 	blt	r2,zero,10175e8 <_dtoa_r+0x948>
 10175c8:	980d883a 	mov	r6,r19
 10175cc:	900f883a 	mov	r7,r18
 10175d0:	8009883a 	mov	r4,r16
 10175d4:	880b883a 	mov	r5,r17
 10175d8:	1020e080 	call	1020e08 <__eqdf2>
 10175dc:	103f5a1e 	bne	r2,zero,1017348 <__alt_data_end+0xff017348>
 10175e0:	ad40004c 	andi	r21,r21,1
 10175e4:	a83f5826 	beq	r21,zero,1017348 <__alt_data_end+0xff017348>
 10175e8:	bd3fffc3 	ldbu	r20,-1(r23)
 10175ec:	b8bfffc4 	addi	r2,r23,-1
 10175f0:	1007883a 	mov	r3,r2
 10175f4:	01400e44 	movi	r5,57
 10175f8:	d9800717 	ldw	r6,28(sp)
 10175fc:	00000506 	br	1017614 <_dtoa_r+0x974>
 1017600:	18ffffc4 	addi	r3,r3,-1
 1017604:	11824726 	beq	r2,r6,1017f24 <_dtoa_r+0x1284>
 1017608:	1d000003 	ldbu	r20,0(r3)
 101760c:	102f883a 	mov	r23,r2
 1017610:	10bfffc4 	addi	r2,r2,-1
 1017614:	a1003fcc 	andi	r4,r20,255
 1017618:	2100201c 	xori	r4,r4,128
 101761c:	213fe004 	addi	r4,r4,-128
 1017620:	217ff726 	beq	r4,r5,1017600 <__alt_data_end+0xff017600>
 1017624:	a2000044 	addi	r8,r20,1
 1017628:	12000005 	stb	r8,0(r2)
 101762c:	003f4606 	br	1017348 <__alt_data_end+0xff017348>
 1017630:	d9000b17 	ldw	r4,44(sp)
 1017634:	2000c826 	beq	r4,zero,1017958 <_dtoa_r+0xcb8>
 1017638:	d9800317 	ldw	r6,12(sp)
 101763c:	00c00044 	movi	r3,1
 1017640:	1980f90e 	bge	r3,r6,1017a28 <_dtoa_r+0xd88>
 1017644:	d8800617 	ldw	r2,24(sp)
 1017648:	d8c00a17 	ldw	r3,40(sp)
 101764c:	157fffc4 	addi	r21,r2,-1
 1017650:	1d41f316 	blt	r3,r21,1017e20 <_dtoa_r+0x1180>
 1017654:	1d6bc83a 	sub	r21,r3,r21
 1017658:	d9c00617 	ldw	r7,24(sp)
 101765c:	3802aa16 	blt	r7,zero,1018108 <_dtoa_r+0x1468>
 1017660:	dd000817 	ldw	r20,32(sp)
 1017664:	d8800617 	ldw	r2,24(sp)
 1017668:	d8c00817 	ldw	r3,32(sp)
 101766c:	01400044 	movi	r5,1
 1017670:	e009883a 	mov	r4,fp
 1017674:	1887883a 	add	r3,r3,r2
 1017678:	d8c00815 	stw	r3,32(sp)
 101767c:	b0ad883a 	add	r22,r22,r2
 1017680:	1019c400 	call	1019c40 <__i2b>
 1017684:	1023883a 	mov	r17,r2
 1017688:	a0000826 	beq	r20,zero,10176ac <_dtoa_r+0xa0c>
 101768c:	0580070e 	bge	zero,r22,10176ac <_dtoa_r+0xa0c>
 1017690:	a005883a 	mov	r2,r20
 1017694:	b500b916 	blt	r22,r20,101797c <_dtoa_r+0xcdc>
 1017698:	d9000817 	ldw	r4,32(sp)
 101769c:	a0a9c83a 	sub	r20,r20,r2
 10176a0:	b0adc83a 	sub	r22,r22,r2
 10176a4:	2089c83a 	sub	r4,r4,r2
 10176a8:	d9000815 	stw	r4,32(sp)
 10176ac:	d9800a17 	ldw	r6,40(sp)
 10176b0:	0181810e 	bge	zero,r6,1017cb8 <_dtoa_r+0x1018>
 10176b4:	d9c00b17 	ldw	r7,44(sp)
 10176b8:	3800b326 	beq	r7,zero,1017988 <_dtoa_r+0xce8>
 10176bc:	a800b226 	beq	r21,zero,1017988 <_dtoa_r+0xce8>
 10176c0:	880b883a 	mov	r5,r17
 10176c4:	a80d883a 	mov	r6,r21
 10176c8:	e009883a 	mov	r4,fp
 10176cc:	1019e740 	call	1019e74 <__pow5mult>
 10176d0:	d9800917 	ldw	r6,36(sp)
 10176d4:	100b883a 	mov	r5,r2
 10176d8:	e009883a 	mov	r4,fp
 10176dc:	1023883a 	mov	r17,r2
 10176e0:	1019c7c0 	call	1019c7c <__multiply>
 10176e4:	1021883a 	mov	r16,r2
 10176e8:	d8800a17 	ldw	r2,40(sp)
 10176ec:	d9400917 	ldw	r5,36(sp)
 10176f0:	e009883a 	mov	r4,fp
 10176f4:	1545c83a 	sub	r2,r2,r21
 10176f8:	d8800a15 	stw	r2,40(sp)
 10176fc:	10198dc0 	call	10198dc <_Bfree>
 1017700:	d8c00a17 	ldw	r3,40(sp)
 1017704:	18009f1e 	bne	r3,zero,1017984 <_dtoa_r+0xce4>
 1017708:	05c00044 	movi	r23,1
 101770c:	e009883a 	mov	r4,fp
 1017710:	b80b883a 	mov	r5,r23
 1017714:	1019c400 	call	1019c40 <__i2b>
 1017718:	d9000d17 	ldw	r4,52(sp)
 101771c:	102b883a 	mov	r21,r2
 1017720:	2000ce26 	beq	r4,zero,1017a5c <_dtoa_r+0xdbc>
 1017724:	200d883a 	mov	r6,r4
 1017728:	100b883a 	mov	r5,r2
 101772c:	e009883a 	mov	r4,fp
 1017730:	1019e740 	call	1019e74 <__pow5mult>
 1017734:	d9800317 	ldw	r6,12(sp)
 1017738:	102b883a 	mov	r21,r2
 101773c:	b981810e 	bge	r23,r6,1017d44 <_dtoa_r+0x10a4>
 1017740:	0027883a 	mov	r19,zero
 1017744:	a8800417 	ldw	r2,16(r21)
 1017748:	05c00804 	movi	r23,32
 101774c:	10800104 	addi	r2,r2,4
 1017750:	1085883a 	add	r2,r2,r2
 1017754:	1085883a 	add	r2,r2,r2
 1017758:	a885883a 	add	r2,r21,r2
 101775c:	11000017 	ldw	r4,0(r2)
 1017760:	1019b280 	call	1019b28 <__hi0bits>
 1017764:	b885c83a 	sub	r2,r23,r2
 1017768:	1585883a 	add	r2,r2,r22
 101776c:	108007cc 	andi	r2,r2,31
 1017770:	1000b326 	beq	r2,zero,1017a40 <_dtoa_r+0xda0>
 1017774:	00c00804 	movi	r3,32
 1017778:	1887c83a 	sub	r3,r3,r2
 101777c:	01000104 	movi	r4,4
 1017780:	20c2cd0e 	bge	r4,r3,10182b8 <_dtoa_r+0x1618>
 1017784:	00c00704 	movi	r3,28
 1017788:	1885c83a 	sub	r2,r3,r2
 101778c:	d8c00817 	ldw	r3,32(sp)
 1017790:	a0a9883a 	add	r20,r20,r2
 1017794:	b0ad883a 	add	r22,r22,r2
 1017798:	1887883a 	add	r3,r3,r2
 101779c:	d8c00815 	stw	r3,32(sp)
 10177a0:	d9800817 	ldw	r6,32(sp)
 10177a4:	0180040e 	bge	zero,r6,10177b8 <_dtoa_r+0xb18>
 10177a8:	800b883a 	mov	r5,r16
 10177ac:	e009883a 	mov	r4,fp
 10177b0:	1019fb40 	call	1019fb4 <__lshift>
 10177b4:	1021883a 	mov	r16,r2
 10177b8:	0580050e 	bge	zero,r22,10177d0 <_dtoa_r+0xb30>
 10177bc:	a80b883a 	mov	r5,r21
 10177c0:	b00d883a 	mov	r6,r22
 10177c4:	e009883a 	mov	r4,fp
 10177c8:	1019fb40 	call	1019fb4 <__lshift>
 10177cc:	102b883a 	mov	r21,r2
 10177d0:	d9c00e17 	ldw	r7,56(sp)
 10177d4:	3801211e 	bne	r7,zero,1017c5c <_dtoa_r+0xfbc>
 10177d8:	d9800617 	ldw	r6,24(sp)
 10177dc:	0181380e 	bge	zero,r6,1017cc0 <_dtoa_r+0x1020>
 10177e0:	d8c00b17 	ldw	r3,44(sp)
 10177e4:	1800ab1e 	bne	r3,zero,1017a94 <_dtoa_r+0xdf4>
 10177e8:	dc800717 	ldw	r18,28(sp)
 10177ec:	dcc00617 	ldw	r19,24(sp)
 10177f0:	9029883a 	mov	r20,r18
 10177f4:	00000206 	br	1017800 <_dtoa_r+0xb60>
 10177f8:	10199040 	call	1019904 <__multadd>
 10177fc:	1021883a 	mov	r16,r2
 1017800:	a80b883a 	mov	r5,r21
 1017804:	8009883a 	mov	r4,r16
 1017808:	1016aa00 	call	1016aa0 <quorem>
 101780c:	10800c04 	addi	r2,r2,48
 1017810:	90800005 	stb	r2,0(r18)
 1017814:	94800044 	addi	r18,r18,1
 1017818:	9507c83a 	sub	r3,r18,r20
 101781c:	000f883a 	mov	r7,zero
 1017820:	01800284 	movi	r6,10
 1017824:	800b883a 	mov	r5,r16
 1017828:	e009883a 	mov	r4,fp
 101782c:	1cfff216 	blt	r3,r19,10177f8 <__alt_data_end+0xff0177f8>
 1017830:	1011883a 	mov	r8,r2
 1017834:	d8800617 	ldw	r2,24(sp)
 1017838:	0082370e 	bge	zero,r2,1018118 <_dtoa_r+0x1478>
 101783c:	d9000717 	ldw	r4,28(sp)
 1017840:	0025883a 	mov	r18,zero
 1017844:	20af883a 	add	r23,r4,r2
 1017848:	01800044 	movi	r6,1
 101784c:	800b883a 	mov	r5,r16
 1017850:	e009883a 	mov	r4,fp
 1017854:	da001715 	stw	r8,92(sp)
 1017858:	1019fb40 	call	1019fb4 <__lshift>
 101785c:	a80b883a 	mov	r5,r21
 1017860:	1009883a 	mov	r4,r2
 1017864:	d8800915 	stw	r2,36(sp)
 1017868:	101a0fc0 	call	101a0fc <__mcmp>
 101786c:	da001717 	ldw	r8,92(sp)
 1017870:	0081800e 	bge	zero,r2,1017e74 <_dtoa_r+0x11d4>
 1017874:	b93fffc3 	ldbu	r4,-1(r23)
 1017878:	b8bfffc4 	addi	r2,r23,-1
 101787c:	1007883a 	mov	r3,r2
 1017880:	01800e44 	movi	r6,57
 1017884:	d9c00717 	ldw	r7,28(sp)
 1017888:	00000506 	br	10178a0 <_dtoa_r+0xc00>
 101788c:	18ffffc4 	addi	r3,r3,-1
 1017890:	11c12326 	beq	r2,r7,1017d20 <_dtoa_r+0x1080>
 1017894:	19000003 	ldbu	r4,0(r3)
 1017898:	102f883a 	mov	r23,r2
 101789c:	10bfffc4 	addi	r2,r2,-1
 10178a0:	21403fcc 	andi	r5,r4,255
 10178a4:	2940201c 	xori	r5,r5,128
 10178a8:	297fe004 	addi	r5,r5,-128
 10178ac:	29bff726 	beq	r5,r6,101788c <__alt_data_end+0xff01788c>
 10178b0:	21000044 	addi	r4,r4,1
 10178b4:	11000005 	stb	r4,0(r2)
 10178b8:	a80b883a 	mov	r5,r21
 10178bc:	e009883a 	mov	r4,fp
 10178c0:	10198dc0 	call	10198dc <_Bfree>
 10178c4:	883ea026 	beq	r17,zero,1017348 <__alt_data_end+0xff017348>
 10178c8:	90000426 	beq	r18,zero,10178dc <_dtoa_r+0xc3c>
 10178cc:	94400326 	beq	r18,r17,10178dc <_dtoa_r+0xc3c>
 10178d0:	900b883a 	mov	r5,r18
 10178d4:	e009883a 	mov	r4,fp
 10178d8:	10198dc0 	call	10198dc <_Bfree>
 10178dc:	880b883a 	mov	r5,r17
 10178e0:	e009883a 	mov	r4,fp
 10178e4:	10198dc0 	call	10198dc <_Bfree>
 10178e8:	003e9706 	br	1017348 <__alt_data_end+0xff017348>
 10178ec:	01800044 	movi	r6,1
 10178f0:	d9800e15 	stw	r6,56(sp)
 10178f4:	003d9606 	br	1016f50 <__alt_data_end+0xff016f50>
 10178f8:	d8800817 	ldw	r2,32(sp)
 10178fc:	d8c00517 	ldw	r3,20(sp)
 1017900:	d8000d15 	stw	zero,52(sp)
 1017904:	10c5c83a 	sub	r2,r2,r3
 1017908:	00c9c83a 	sub	r4,zero,r3
 101790c:	d8800815 	stw	r2,32(sp)
 1017910:	d9000a15 	stw	r4,40(sp)
 1017914:	003d9706 	br	1016f74 <__alt_data_end+0xff016f74>
 1017918:	05adc83a 	sub	r22,zero,r22
 101791c:	dd800815 	stw	r22,32(sp)
 1017920:	002d883a 	mov	r22,zero
 1017924:	003d8e06 	br	1016f60 <__alt_data_end+0xff016f60>
 1017928:	d9000517 	ldw	r4,20(sp)
 101792c:	10220f40 	call	10220f4 <__floatsidf>
 1017930:	100d883a 	mov	r6,r2
 1017934:	180f883a 	mov	r7,r3
 1017938:	a009883a 	mov	r4,r20
 101793c:	880b883a 	mov	r5,r17
 1017940:	1020e080 	call	1020e08 <__eqdf2>
 1017944:	103d7126 	beq	r2,zero,1016f0c <__alt_data_end+0xff016f0c>
 1017948:	d9c00517 	ldw	r7,20(sp)
 101794c:	39ffffc4 	addi	r7,r7,-1
 1017950:	d9c00515 	stw	r7,20(sp)
 1017954:	003d6d06 	br	1016f0c <__alt_data_end+0xff016f0c>
 1017958:	dd400a17 	ldw	r21,40(sp)
 101795c:	dd000817 	ldw	r20,32(sp)
 1017960:	0023883a 	mov	r17,zero
 1017964:	003f4806 	br	1017688 <__alt_data_end+0xff017688>
 1017968:	10e3c83a 	sub	r17,r2,r3
 101796c:	9448983a 	sll	r4,r18,r17
 1017970:	003d3206 	br	1016e3c <__alt_data_end+0xff016e3c>
 1017974:	d8000e15 	stw	zero,56(sp)
 1017978:	003d7506 	br	1016f50 <__alt_data_end+0xff016f50>
 101797c:	b005883a 	mov	r2,r22
 1017980:	003f4506 	br	1017698 <__alt_data_end+0xff017698>
 1017984:	dc000915 	stw	r16,36(sp)
 1017988:	d9800a17 	ldw	r6,40(sp)
 101798c:	d9400917 	ldw	r5,36(sp)
 1017990:	e009883a 	mov	r4,fp
 1017994:	1019e740 	call	1019e74 <__pow5mult>
 1017998:	1021883a 	mov	r16,r2
 101799c:	003f5a06 	br	1017708 <__alt_data_end+0xff017708>
 10179a0:	01c00044 	movi	r7,1
 10179a4:	d9c00b15 	stw	r7,44(sp)
 10179a8:	d8802217 	ldw	r2,136(sp)
 10179ac:	0081280e 	bge	zero,r2,1017e50 <_dtoa_r+0x11b0>
 10179b0:	100d883a 	mov	r6,r2
 10179b4:	1021883a 	mov	r16,r2
 10179b8:	d8800c15 	stw	r2,48(sp)
 10179bc:	d8800615 	stw	r2,24(sp)
 10179c0:	003d8806 	br	1016fe4 <__alt_data_end+0xff016fe4>
 10179c4:	d8800617 	ldw	r2,24(sp)
 10179c8:	00be9b16 	blt	zero,r2,1017438 <__alt_data_end+0xff017438>
 10179cc:	10010f1e 	bne	r2,zero,1017e0c <_dtoa_r+0x116c>
 10179d0:	880b883a 	mov	r5,r17
 10179d4:	000d883a 	mov	r6,zero
 10179d8:	01d00534 	movhi	r7,16404
 10179dc:	8009883a 	mov	r4,r16
 10179e0:	10210600 	call	1021060 <__muldf3>
 10179e4:	900d883a 	mov	r6,r18
 10179e8:	980f883a 	mov	r7,r19
 10179ec:	1009883a 	mov	r4,r2
 10179f0:	180b883a 	mov	r5,r3
 10179f4:	1020e900 	call	1020e90 <__gedf2>
 10179f8:	002b883a 	mov	r21,zero
 10179fc:	0023883a 	mov	r17,zero
 1017a00:	1000bf16 	blt	r2,zero,1017d00 <_dtoa_r+0x1060>
 1017a04:	d9802217 	ldw	r6,136(sp)
 1017a08:	ddc00717 	ldw	r23,28(sp)
 1017a0c:	018c303a 	nor	r6,zero,r6
 1017a10:	d9800515 	stw	r6,20(sp)
 1017a14:	a80b883a 	mov	r5,r21
 1017a18:	e009883a 	mov	r4,fp
 1017a1c:	10198dc0 	call	10198dc <_Bfree>
 1017a20:	883e4926 	beq	r17,zero,1017348 <__alt_data_end+0xff017348>
 1017a24:	003fad06 	br	10178dc <__alt_data_end+0xff0178dc>
 1017a28:	d9c01117 	ldw	r7,68(sp)
 1017a2c:	3801bc26 	beq	r7,zero,1018120 <_dtoa_r+0x1480>
 1017a30:	10810cc4 	addi	r2,r2,1075
 1017a34:	dd400a17 	ldw	r21,40(sp)
 1017a38:	dd000817 	ldw	r20,32(sp)
 1017a3c:	003f0a06 	br	1017668 <__alt_data_end+0xff017668>
 1017a40:	00800704 	movi	r2,28
 1017a44:	d9000817 	ldw	r4,32(sp)
 1017a48:	a0a9883a 	add	r20,r20,r2
 1017a4c:	b0ad883a 	add	r22,r22,r2
 1017a50:	2089883a 	add	r4,r4,r2
 1017a54:	d9000815 	stw	r4,32(sp)
 1017a58:	003f5106 	br	10177a0 <__alt_data_end+0xff0177a0>
 1017a5c:	d8c00317 	ldw	r3,12(sp)
 1017a60:	b8c1fc0e 	bge	r23,r3,1018254 <_dtoa_r+0x15b4>
 1017a64:	0027883a 	mov	r19,zero
 1017a68:	b805883a 	mov	r2,r23
 1017a6c:	003f3e06 	br	1017768 <__alt_data_end+0xff017768>
 1017a70:	880b883a 	mov	r5,r17
 1017a74:	e009883a 	mov	r4,fp
 1017a78:	000f883a 	mov	r7,zero
 1017a7c:	01800284 	movi	r6,10
 1017a80:	10199040 	call	1019904 <__multadd>
 1017a84:	d9000c17 	ldw	r4,48(sp)
 1017a88:	1023883a 	mov	r17,r2
 1017a8c:	0102040e 	bge	zero,r4,10182a0 <_dtoa_r+0x1600>
 1017a90:	d9000615 	stw	r4,24(sp)
 1017a94:	0500050e 	bge	zero,r20,1017aac <_dtoa_r+0xe0c>
 1017a98:	880b883a 	mov	r5,r17
 1017a9c:	a00d883a 	mov	r6,r20
 1017aa0:	e009883a 	mov	r4,fp
 1017aa4:	1019fb40 	call	1019fb4 <__lshift>
 1017aa8:	1023883a 	mov	r17,r2
 1017aac:	9801241e 	bne	r19,zero,1017f40 <_dtoa_r+0x12a0>
 1017ab0:	8829883a 	mov	r20,r17
 1017ab4:	d9000617 	ldw	r4,24(sp)
 1017ab8:	dcc00717 	ldw	r19,28(sp)
 1017abc:	9480004c 	andi	r18,r18,1
 1017ac0:	20bfffc4 	addi	r2,r4,-1
 1017ac4:	9885883a 	add	r2,r19,r2
 1017ac8:	d8800415 	stw	r2,16(sp)
 1017acc:	dc800615 	stw	r18,24(sp)
 1017ad0:	a80b883a 	mov	r5,r21
 1017ad4:	8009883a 	mov	r4,r16
 1017ad8:	1016aa00 	call	1016aa0 <quorem>
 1017adc:	880b883a 	mov	r5,r17
 1017ae0:	8009883a 	mov	r4,r16
 1017ae4:	102f883a 	mov	r23,r2
 1017ae8:	101a0fc0 	call	101a0fc <__mcmp>
 1017aec:	a80b883a 	mov	r5,r21
 1017af0:	a00d883a 	mov	r6,r20
 1017af4:	e009883a 	mov	r4,fp
 1017af8:	102d883a 	mov	r22,r2
 1017afc:	101a15c0 	call	101a15c <__mdiff>
 1017b00:	1007883a 	mov	r3,r2
 1017b04:	10800317 	ldw	r2,12(r2)
 1017b08:	bc800c04 	addi	r18,r23,48
 1017b0c:	180b883a 	mov	r5,r3
 1017b10:	10004e1e 	bne	r2,zero,1017c4c <_dtoa_r+0xfac>
 1017b14:	8009883a 	mov	r4,r16
 1017b18:	d8c01615 	stw	r3,88(sp)
 1017b1c:	101a0fc0 	call	101a0fc <__mcmp>
 1017b20:	d8c01617 	ldw	r3,88(sp)
 1017b24:	e009883a 	mov	r4,fp
 1017b28:	d8801615 	stw	r2,88(sp)
 1017b2c:	180b883a 	mov	r5,r3
 1017b30:	10198dc0 	call	10198dc <_Bfree>
 1017b34:	d8801617 	ldw	r2,88(sp)
 1017b38:	1000041e 	bne	r2,zero,1017b4c <_dtoa_r+0xeac>
 1017b3c:	d9800317 	ldw	r6,12(sp)
 1017b40:	3000021e 	bne	r6,zero,1017b4c <_dtoa_r+0xeac>
 1017b44:	d8c00617 	ldw	r3,24(sp)
 1017b48:	18003726 	beq	r3,zero,1017c28 <_dtoa_r+0xf88>
 1017b4c:	b0002016 	blt	r22,zero,1017bd0 <_dtoa_r+0xf30>
 1017b50:	b000041e 	bne	r22,zero,1017b64 <_dtoa_r+0xec4>
 1017b54:	d9000317 	ldw	r4,12(sp)
 1017b58:	2000021e 	bne	r4,zero,1017b64 <_dtoa_r+0xec4>
 1017b5c:	d8c00617 	ldw	r3,24(sp)
 1017b60:	18001b26 	beq	r3,zero,1017bd0 <_dtoa_r+0xf30>
 1017b64:	00810716 	blt	zero,r2,1017f84 <_dtoa_r+0x12e4>
 1017b68:	d8c00417 	ldw	r3,16(sp)
 1017b6c:	9d800044 	addi	r22,r19,1
 1017b70:	9c800005 	stb	r18,0(r19)
 1017b74:	b02f883a 	mov	r23,r22
 1017b78:	98c10626 	beq	r19,r3,1017f94 <_dtoa_r+0x12f4>
 1017b7c:	800b883a 	mov	r5,r16
 1017b80:	000f883a 	mov	r7,zero
 1017b84:	01800284 	movi	r6,10
 1017b88:	e009883a 	mov	r4,fp
 1017b8c:	10199040 	call	1019904 <__multadd>
 1017b90:	1021883a 	mov	r16,r2
 1017b94:	000f883a 	mov	r7,zero
 1017b98:	01800284 	movi	r6,10
 1017b9c:	880b883a 	mov	r5,r17
 1017ba0:	e009883a 	mov	r4,fp
 1017ba4:	8d002526 	beq	r17,r20,1017c3c <_dtoa_r+0xf9c>
 1017ba8:	10199040 	call	1019904 <__multadd>
 1017bac:	a00b883a 	mov	r5,r20
 1017bb0:	000f883a 	mov	r7,zero
 1017bb4:	01800284 	movi	r6,10
 1017bb8:	e009883a 	mov	r4,fp
 1017bbc:	1023883a 	mov	r17,r2
 1017bc0:	10199040 	call	1019904 <__multadd>
 1017bc4:	1029883a 	mov	r20,r2
 1017bc8:	b027883a 	mov	r19,r22
 1017bcc:	003fc006 	br	1017ad0 <__alt_data_end+0xff017ad0>
 1017bd0:	9011883a 	mov	r8,r18
 1017bd4:	00800e0e 	bge	zero,r2,1017c10 <_dtoa_r+0xf70>
 1017bd8:	800b883a 	mov	r5,r16
 1017bdc:	01800044 	movi	r6,1
 1017be0:	e009883a 	mov	r4,fp
 1017be4:	da001715 	stw	r8,92(sp)
 1017be8:	1019fb40 	call	1019fb4 <__lshift>
 1017bec:	a80b883a 	mov	r5,r21
 1017bf0:	1009883a 	mov	r4,r2
 1017bf4:	1021883a 	mov	r16,r2
 1017bf8:	101a0fc0 	call	101a0fc <__mcmp>
 1017bfc:	da001717 	ldw	r8,92(sp)
 1017c00:	0081960e 	bge	zero,r2,101825c <_dtoa_r+0x15bc>
 1017c04:	00800e44 	movi	r2,57
 1017c08:	40817026 	beq	r8,r2,10181cc <_dtoa_r+0x152c>
 1017c0c:	ba000c44 	addi	r8,r23,49
 1017c10:	8825883a 	mov	r18,r17
 1017c14:	9dc00044 	addi	r23,r19,1
 1017c18:	9a000005 	stb	r8,0(r19)
 1017c1c:	a023883a 	mov	r17,r20
 1017c20:	dc000915 	stw	r16,36(sp)
 1017c24:	003f2406 	br	10178b8 <__alt_data_end+0xff0178b8>
 1017c28:	00800e44 	movi	r2,57
 1017c2c:	9011883a 	mov	r8,r18
 1017c30:	90816626 	beq	r18,r2,10181cc <_dtoa_r+0x152c>
 1017c34:	05bff516 	blt	zero,r22,1017c0c <__alt_data_end+0xff017c0c>
 1017c38:	003ff506 	br	1017c10 <__alt_data_end+0xff017c10>
 1017c3c:	10199040 	call	1019904 <__multadd>
 1017c40:	1023883a 	mov	r17,r2
 1017c44:	1029883a 	mov	r20,r2
 1017c48:	003fdf06 	br	1017bc8 <__alt_data_end+0xff017bc8>
 1017c4c:	e009883a 	mov	r4,fp
 1017c50:	10198dc0 	call	10198dc <_Bfree>
 1017c54:	00800044 	movi	r2,1
 1017c58:	003fbc06 	br	1017b4c <__alt_data_end+0xff017b4c>
 1017c5c:	a80b883a 	mov	r5,r21
 1017c60:	8009883a 	mov	r4,r16
 1017c64:	101a0fc0 	call	101a0fc <__mcmp>
 1017c68:	103edb0e 	bge	r2,zero,10177d8 <__alt_data_end+0xff0177d8>
 1017c6c:	800b883a 	mov	r5,r16
 1017c70:	000f883a 	mov	r7,zero
 1017c74:	01800284 	movi	r6,10
 1017c78:	e009883a 	mov	r4,fp
 1017c7c:	10199040 	call	1019904 <__multadd>
 1017c80:	1021883a 	mov	r16,r2
 1017c84:	d8800517 	ldw	r2,20(sp)
 1017c88:	d8c00b17 	ldw	r3,44(sp)
 1017c8c:	10bfffc4 	addi	r2,r2,-1
 1017c90:	d8800515 	stw	r2,20(sp)
 1017c94:	183f761e 	bne	r3,zero,1017a70 <__alt_data_end+0xff017a70>
 1017c98:	d9000c17 	ldw	r4,48(sp)
 1017c9c:	0101730e 	bge	zero,r4,101826c <_dtoa_r+0x15cc>
 1017ca0:	d9000615 	stw	r4,24(sp)
 1017ca4:	003ed006 	br	10177e8 <__alt_data_end+0xff0177e8>
 1017ca8:	00800084 	movi	r2,2
 1017cac:	3081861e 	bne	r6,r2,10182c8 <_dtoa_r+0x1628>
 1017cb0:	d8000b15 	stw	zero,44(sp)
 1017cb4:	003f3c06 	br	10179a8 <__alt_data_end+0xff0179a8>
 1017cb8:	dc000917 	ldw	r16,36(sp)
 1017cbc:	003e9206 	br	1017708 <__alt_data_end+0xff017708>
 1017cc0:	d9c00317 	ldw	r7,12(sp)
 1017cc4:	00800084 	movi	r2,2
 1017cc8:	11fec50e 	bge	r2,r7,10177e0 <__alt_data_end+0xff0177e0>
 1017ccc:	d9000617 	ldw	r4,24(sp)
 1017cd0:	20013c1e 	bne	r4,zero,10181c4 <_dtoa_r+0x1524>
 1017cd4:	a80b883a 	mov	r5,r21
 1017cd8:	000f883a 	mov	r7,zero
 1017cdc:	01800144 	movi	r6,5
 1017ce0:	e009883a 	mov	r4,fp
 1017ce4:	10199040 	call	1019904 <__multadd>
 1017ce8:	100b883a 	mov	r5,r2
 1017cec:	8009883a 	mov	r4,r16
 1017cf0:	102b883a 	mov	r21,r2
 1017cf4:	101a0fc0 	call	101a0fc <__mcmp>
 1017cf8:	dc000915 	stw	r16,36(sp)
 1017cfc:	00bf410e 	bge	zero,r2,1017a04 <__alt_data_end+0xff017a04>
 1017d00:	d9c00717 	ldw	r7,28(sp)
 1017d04:	00800c44 	movi	r2,49
 1017d08:	38800005 	stb	r2,0(r7)
 1017d0c:	d8800517 	ldw	r2,20(sp)
 1017d10:	3dc00044 	addi	r23,r7,1
 1017d14:	10800044 	addi	r2,r2,1
 1017d18:	d8800515 	stw	r2,20(sp)
 1017d1c:	003f3d06 	br	1017a14 <__alt_data_end+0xff017a14>
 1017d20:	d9800517 	ldw	r6,20(sp)
 1017d24:	d9c00717 	ldw	r7,28(sp)
 1017d28:	00800c44 	movi	r2,49
 1017d2c:	31800044 	addi	r6,r6,1
 1017d30:	d9800515 	stw	r6,20(sp)
 1017d34:	38800005 	stb	r2,0(r7)
 1017d38:	003edf06 	br	10178b8 <__alt_data_end+0xff0178b8>
 1017d3c:	d8000b15 	stw	zero,44(sp)
 1017d40:	003c9f06 	br	1016fc0 <__alt_data_end+0xff016fc0>
 1017d44:	903e7e1e 	bne	r18,zero,1017740 <__alt_data_end+0xff017740>
 1017d48:	00800434 	movhi	r2,16
 1017d4c:	10bfffc4 	addi	r2,r2,-1
 1017d50:	9884703a 	and	r2,r19,r2
 1017d54:	1000ea1e 	bne	r2,zero,1018100 <_dtoa_r+0x1460>
 1017d58:	9cdffc2c 	andhi	r19,r19,32752
 1017d5c:	9800e826 	beq	r19,zero,1018100 <_dtoa_r+0x1460>
 1017d60:	d9c00817 	ldw	r7,32(sp)
 1017d64:	b5800044 	addi	r22,r22,1
 1017d68:	04c00044 	movi	r19,1
 1017d6c:	39c00044 	addi	r7,r7,1
 1017d70:	d9c00815 	stw	r7,32(sp)
 1017d74:	d8800d17 	ldw	r2,52(sp)
 1017d78:	103e721e 	bne	r2,zero,1017744 <__alt_data_end+0xff017744>
 1017d7c:	00800044 	movi	r2,1
 1017d80:	003e7906 	br	1017768 <__alt_data_end+0xff017768>
 1017d84:	8009883a 	mov	r4,r16
 1017d88:	10220f40 	call	10220f4 <__floatsidf>
 1017d8c:	d9800f17 	ldw	r6,60(sp)
 1017d90:	d9c01017 	ldw	r7,64(sp)
 1017d94:	1009883a 	mov	r4,r2
 1017d98:	180b883a 	mov	r5,r3
 1017d9c:	10210600 	call	1021060 <__muldf3>
 1017da0:	000d883a 	mov	r6,zero
 1017da4:	01d00734 	movhi	r7,16412
 1017da8:	1009883a 	mov	r4,r2
 1017dac:	180b883a 	mov	r5,r3
 1017db0:	101fc740 	call	101fc74 <__adddf3>
 1017db4:	047f3034 	movhi	r17,64704
 1017db8:	1021883a 	mov	r16,r2
 1017dbc:	1c63883a 	add	r17,r3,r17
 1017dc0:	d9000f17 	ldw	r4,60(sp)
 1017dc4:	d9401017 	ldw	r5,64(sp)
 1017dc8:	000d883a 	mov	r6,zero
 1017dcc:	01d00534 	movhi	r7,16404
 1017dd0:	10217780 	call	1021778 <__subdf3>
 1017dd4:	800d883a 	mov	r6,r16
 1017dd8:	880f883a 	mov	r7,r17
 1017ddc:	1009883a 	mov	r4,r2
 1017de0:	180b883a 	mov	r5,r3
 1017de4:	102b883a 	mov	r21,r2
 1017de8:	1829883a 	mov	r20,r3
 1017dec:	1020e900 	call	1020e90 <__gedf2>
 1017df0:	00806c16 	blt	zero,r2,1017fa4 <_dtoa_r+0x1304>
 1017df4:	89e0003c 	xorhi	r7,r17,32768
 1017df8:	800d883a 	mov	r6,r16
 1017dfc:	a809883a 	mov	r4,r21
 1017e00:	a00b883a 	mov	r5,r20
 1017e04:	1020f6c0 	call	1020f6c <__ledf2>
 1017e08:	103d7e0e 	bge	r2,zero,1017404 <__alt_data_end+0xff017404>
 1017e0c:	002b883a 	mov	r21,zero
 1017e10:	0023883a 	mov	r17,zero
 1017e14:	003efb06 	br	1017a04 <__alt_data_end+0xff017a04>
 1017e18:	d8800717 	ldw	r2,28(sp)
 1017e1c:	003bd006 	br	1016d60 <__alt_data_end+0xff016d60>
 1017e20:	d9000a17 	ldw	r4,40(sp)
 1017e24:	d9800d17 	ldw	r6,52(sp)
 1017e28:	dd400a15 	stw	r21,40(sp)
 1017e2c:	a905c83a 	sub	r2,r21,r4
 1017e30:	308d883a 	add	r6,r6,r2
 1017e34:	d9800d15 	stw	r6,52(sp)
 1017e38:	002b883a 	mov	r21,zero
 1017e3c:	003e0606 	br	1017658 <__alt_data_end+0xff017658>
 1017e40:	9023883a 	mov	r17,r18
 1017e44:	9829883a 	mov	r20,r19
 1017e48:	04000084 	movi	r16,2
 1017e4c:	003c9206 	br	1017098 <__alt_data_end+0xff017098>
 1017e50:	04000044 	movi	r16,1
 1017e54:	dc000c15 	stw	r16,48(sp)
 1017e58:	dc000615 	stw	r16,24(sp)
 1017e5c:	dc002215 	stw	r16,136(sp)
 1017e60:	e0001115 	stw	zero,68(fp)
 1017e64:	000b883a 	mov	r5,zero
 1017e68:	003c6906 	br	1017010 <__alt_data_end+0xff017010>
 1017e6c:	3021883a 	mov	r16,r6
 1017e70:	003ffb06 	br	1017e60 <__alt_data_end+0xff017e60>
 1017e74:	1000021e 	bne	r2,zero,1017e80 <_dtoa_r+0x11e0>
 1017e78:	4200004c 	andi	r8,r8,1
 1017e7c:	403e7d1e 	bne	r8,zero,1017874 <__alt_data_end+0xff017874>
 1017e80:	01000c04 	movi	r4,48
 1017e84:	00000106 	br	1017e8c <_dtoa_r+0x11ec>
 1017e88:	102f883a 	mov	r23,r2
 1017e8c:	b8bfffc4 	addi	r2,r23,-1
 1017e90:	10c00007 	ldb	r3,0(r2)
 1017e94:	193ffc26 	beq	r3,r4,1017e88 <__alt_data_end+0xff017e88>
 1017e98:	003e8706 	br	10178b8 <__alt_data_end+0xff0178b8>
 1017e9c:	d8800517 	ldw	r2,20(sp)
 1017ea0:	00a3c83a 	sub	r17,zero,r2
 1017ea4:	8800a426 	beq	r17,zero,1018138 <_dtoa_r+0x1498>
 1017ea8:	888003cc 	andi	r2,r17,15
 1017eac:	100490fa 	slli	r2,r2,3
 1017eb0:	00c040b4 	movhi	r3,258
 1017eb4:	18d9f704 	addi	r3,r3,26588
 1017eb8:	1885883a 	add	r2,r3,r2
 1017ebc:	11800017 	ldw	r6,0(r2)
 1017ec0:	11c00117 	ldw	r7,4(r2)
 1017ec4:	9009883a 	mov	r4,r18
 1017ec8:	980b883a 	mov	r5,r19
 1017ecc:	8823d13a 	srai	r17,r17,4
 1017ed0:	10210600 	call	1021060 <__muldf3>
 1017ed4:	d8800f15 	stw	r2,60(sp)
 1017ed8:	d8c01015 	stw	r3,64(sp)
 1017edc:	8800e826 	beq	r17,zero,1018280 <_dtoa_r+0x15e0>
 1017ee0:	050040b4 	movhi	r20,258
 1017ee4:	a519ed04 	addi	r20,r20,26548
 1017ee8:	04000084 	movi	r16,2
 1017eec:	8980004c 	andi	r6,r17,1
 1017ef0:	1009883a 	mov	r4,r2
 1017ef4:	8823d07a 	srai	r17,r17,1
 1017ef8:	180b883a 	mov	r5,r3
 1017efc:	30000426 	beq	r6,zero,1017f10 <_dtoa_r+0x1270>
 1017f00:	a1800017 	ldw	r6,0(r20)
 1017f04:	a1c00117 	ldw	r7,4(r20)
 1017f08:	84000044 	addi	r16,r16,1
 1017f0c:	10210600 	call	1021060 <__muldf3>
 1017f10:	a5000204 	addi	r20,r20,8
 1017f14:	883ff51e 	bne	r17,zero,1017eec <__alt_data_end+0xff017eec>
 1017f18:	d8800f15 	stw	r2,60(sp)
 1017f1c:	d8c01015 	stw	r3,64(sp)
 1017f20:	003c7606 	br	10170fc <__alt_data_end+0xff0170fc>
 1017f24:	00c00c04 	movi	r3,48
 1017f28:	10c00005 	stb	r3,0(r2)
 1017f2c:	d8c00517 	ldw	r3,20(sp)
 1017f30:	bd3fffc3 	ldbu	r20,-1(r23)
 1017f34:	18c00044 	addi	r3,r3,1
 1017f38:	d8c00515 	stw	r3,20(sp)
 1017f3c:	003db906 	br	1017624 <__alt_data_end+0xff017624>
 1017f40:	89400117 	ldw	r5,4(r17)
 1017f44:	e009883a 	mov	r4,fp
 1017f48:	10198340 	call	1019834 <_Balloc>
 1017f4c:	89800417 	ldw	r6,16(r17)
 1017f50:	89400304 	addi	r5,r17,12
 1017f54:	11000304 	addi	r4,r2,12
 1017f58:	31800084 	addi	r6,r6,2
 1017f5c:	318d883a 	add	r6,r6,r6
 1017f60:	318d883a 	add	r6,r6,r6
 1017f64:	1027883a 	mov	r19,r2
 1017f68:	10139e80 	call	10139e8 <memcpy>
 1017f6c:	01800044 	movi	r6,1
 1017f70:	980b883a 	mov	r5,r19
 1017f74:	e009883a 	mov	r4,fp
 1017f78:	1019fb40 	call	1019fb4 <__lshift>
 1017f7c:	1029883a 	mov	r20,r2
 1017f80:	003ecc06 	br	1017ab4 <__alt_data_end+0xff017ab4>
 1017f84:	00800e44 	movi	r2,57
 1017f88:	90809026 	beq	r18,r2,10181cc <_dtoa_r+0x152c>
 1017f8c:	92000044 	addi	r8,r18,1
 1017f90:	003f1f06 	br	1017c10 <__alt_data_end+0xff017c10>
 1017f94:	9011883a 	mov	r8,r18
 1017f98:	8825883a 	mov	r18,r17
 1017f9c:	a023883a 	mov	r17,r20
 1017fa0:	003e2906 	br	1017848 <__alt_data_end+0xff017848>
 1017fa4:	002b883a 	mov	r21,zero
 1017fa8:	0023883a 	mov	r17,zero
 1017fac:	003f5406 	br	1017d00 <__alt_data_end+0xff017d00>
 1017fb0:	61bfffc4 	addi	r6,r12,-1
 1017fb4:	300490fa 	slli	r2,r6,3
 1017fb8:	00c040b4 	movhi	r3,258
 1017fbc:	18d9f704 	addi	r3,r3,26588
 1017fc0:	1885883a 	add	r2,r3,r2
 1017fc4:	11000017 	ldw	r4,0(r2)
 1017fc8:	11400117 	ldw	r5,4(r2)
 1017fcc:	d8800717 	ldw	r2,28(sp)
 1017fd0:	880f883a 	mov	r7,r17
 1017fd4:	d9801215 	stw	r6,72(sp)
 1017fd8:	800d883a 	mov	r6,r16
 1017fdc:	db001615 	stw	r12,88(sp)
 1017fe0:	15c00044 	addi	r23,r2,1
 1017fe4:	10210600 	call	1021060 <__muldf3>
 1017fe8:	d9401017 	ldw	r5,64(sp)
 1017fec:	d9000f17 	ldw	r4,60(sp)
 1017ff0:	d8c01515 	stw	r3,84(sp)
 1017ff4:	d8801415 	stw	r2,80(sp)
 1017ff8:	10220740 	call	1022074 <__fixdfsi>
 1017ffc:	1009883a 	mov	r4,r2
 1018000:	1021883a 	mov	r16,r2
 1018004:	10220f40 	call	10220f4 <__floatsidf>
 1018008:	d9000f17 	ldw	r4,60(sp)
 101800c:	d9401017 	ldw	r5,64(sp)
 1018010:	100d883a 	mov	r6,r2
 1018014:	180f883a 	mov	r7,r3
 1018018:	10217780 	call	1021778 <__subdf3>
 101801c:	1829883a 	mov	r20,r3
 1018020:	d8c00717 	ldw	r3,28(sp)
 1018024:	84000c04 	addi	r16,r16,48
 1018028:	1023883a 	mov	r17,r2
 101802c:	1c000005 	stb	r16,0(r3)
 1018030:	db001617 	ldw	r12,88(sp)
 1018034:	00800044 	movi	r2,1
 1018038:	60802226 	beq	r12,r2,10180c4 <_dtoa_r+0x1424>
 101803c:	d9c00717 	ldw	r7,28(sp)
 1018040:	8805883a 	mov	r2,r17
 1018044:	b82b883a 	mov	r21,r23
 1018048:	3b19883a 	add	r12,r7,r12
 101804c:	6023883a 	mov	r17,r12
 1018050:	a007883a 	mov	r3,r20
 1018054:	dc800f15 	stw	r18,60(sp)
 1018058:	000d883a 	mov	r6,zero
 101805c:	01d00934 	movhi	r7,16420
 1018060:	1009883a 	mov	r4,r2
 1018064:	180b883a 	mov	r5,r3
 1018068:	10210600 	call	1021060 <__muldf3>
 101806c:	180b883a 	mov	r5,r3
 1018070:	1009883a 	mov	r4,r2
 1018074:	1829883a 	mov	r20,r3
 1018078:	1025883a 	mov	r18,r2
 101807c:	10220740 	call	1022074 <__fixdfsi>
 1018080:	1009883a 	mov	r4,r2
 1018084:	1021883a 	mov	r16,r2
 1018088:	10220f40 	call	10220f4 <__floatsidf>
 101808c:	100d883a 	mov	r6,r2
 1018090:	180f883a 	mov	r7,r3
 1018094:	9009883a 	mov	r4,r18
 1018098:	a00b883a 	mov	r5,r20
 101809c:	84000c04 	addi	r16,r16,48
 10180a0:	10217780 	call	1021778 <__subdf3>
 10180a4:	ad400044 	addi	r21,r21,1
 10180a8:	ac3fffc5 	stb	r16,-1(r21)
 10180ac:	ac7fea1e 	bne	r21,r17,1018058 <__alt_data_end+0xff018058>
 10180b0:	1023883a 	mov	r17,r2
 10180b4:	d8801217 	ldw	r2,72(sp)
 10180b8:	dc800f17 	ldw	r18,60(sp)
 10180bc:	1829883a 	mov	r20,r3
 10180c0:	b8af883a 	add	r23,r23,r2
 10180c4:	d9001417 	ldw	r4,80(sp)
 10180c8:	d9401517 	ldw	r5,84(sp)
 10180cc:	000d883a 	mov	r6,zero
 10180d0:	01cff834 	movhi	r7,16352
 10180d4:	101fc740 	call	101fc74 <__adddf3>
 10180d8:	880d883a 	mov	r6,r17
 10180dc:	a00f883a 	mov	r7,r20
 10180e0:	1009883a 	mov	r4,r2
 10180e4:	180b883a 	mov	r5,r3
 10180e8:	1020f6c0 	call	1020f6c <__ledf2>
 10180ec:	10003e0e 	bge	r2,zero,10181e8 <_dtoa_r+0x1548>
 10180f0:	d9001317 	ldw	r4,76(sp)
 10180f4:	bd3fffc3 	ldbu	r20,-1(r23)
 10180f8:	d9000515 	stw	r4,20(sp)
 10180fc:	003d3b06 	br	10175ec <__alt_data_end+0xff0175ec>
 1018100:	0027883a 	mov	r19,zero
 1018104:	003f1b06 	br	1017d74 <__alt_data_end+0xff017d74>
 1018108:	d8800817 	ldw	r2,32(sp)
 101810c:	11e9c83a 	sub	r20,r2,r7
 1018110:	0005883a 	mov	r2,zero
 1018114:	003d5406 	br	1017668 <__alt_data_end+0xff017668>
 1018118:	00800044 	movi	r2,1
 101811c:	003dc706 	br	101783c <__alt_data_end+0xff01783c>
 1018120:	d8c00217 	ldw	r3,8(sp)
 1018124:	00800d84 	movi	r2,54
 1018128:	dd400a17 	ldw	r21,40(sp)
 101812c:	10c5c83a 	sub	r2,r2,r3
 1018130:	dd000817 	ldw	r20,32(sp)
 1018134:	003d4c06 	br	1017668 <__alt_data_end+0xff017668>
 1018138:	dc800f15 	stw	r18,60(sp)
 101813c:	dcc01015 	stw	r19,64(sp)
 1018140:	04000084 	movi	r16,2
 1018144:	003bed06 	br	10170fc <__alt_data_end+0xff0170fc>
 1018148:	d9000617 	ldw	r4,24(sp)
 101814c:	203f0d26 	beq	r4,zero,1017d84 <__alt_data_end+0xff017d84>
 1018150:	d9800c17 	ldw	r6,48(sp)
 1018154:	01bcab0e 	bge	zero,r6,1017404 <__alt_data_end+0xff017404>
 1018158:	d9401017 	ldw	r5,64(sp)
 101815c:	d9000f17 	ldw	r4,60(sp)
 1018160:	000d883a 	mov	r6,zero
 1018164:	01d00934 	movhi	r7,16420
 1018168:	10210600 	call	1021060 <__muldf3>
 101816c:	81000044 	addi	r4,r16,1
 1018170:	d8800f15 	stw	r2,60(sp)
 1018174:	d8c01015 	stw	r3,64(sp)
 1018178:	10220f40 	call	10220f4 <__floatsidf>
 101817c:	d9800f17 	ldw	r6,60(sp)
 1018180:	d9c01017 	ldw	r7,64(sp)
 1018184:	1009883a 	mov	r4,r2
 1018188:	180b883a 	mov	r5,r3
 101818c:	10210600 	call	1021060 <__muldf3>
 1018190:	01d00734 	movhi	r7,16412
 1018194:	000d883a 	mov	r6,zero
 1018198:	1009883a 	mov	r4,r2
 101819c:	180b883a 	mov	r5,r3
 10181a0:	101fc740 	call	101fc74 <__adddf3>
 10181a4:	d9c00517 	ldw	r7,20(sp)
 10181a8:	047f3034 	movhi	r17,64704
 10181ac:	1021883a 	mov	r16,r2
 10181b0:	39ffffc4 	addi	r7,r7,-1
 10181b4:	d9c01315 	stw	r7,76(sp)
 10181b8:	1c63883a 	add	r17,r3,r17
 10181bc:	db000c17 	ldw	r12,48(sp)
 10181c0:	003bea06 	br	101716c <__alt_data_end+0xff01716c>
 10181c4:	dc000915 	stw	r16,36(sp)
 10181c8:	003e0e06 	br	1017a04 <__alt_data_end+0xff017a04>
 10181cc:	01000e44 	movi	r4,57
 10181d0:	8825883a 	mov	r18,r17
 10181d4:	9dc00044 	addi	r23,r19,1
 10181d8:	99000005 	stb	r4,0(r19)
 10181dc:	a023883a 	mov	r17,r20
 10181e0:	dc000915 	stw	r16,36(sp)
 10181e4:	003da406 	br	1017878 <__alt_data_end+0xff017878>
 10181e8:	d9801417 	ldw	r6,80(sp)
 10181ec:	d9c01517 	ldw	r7,84(sp)
 10181f0:	0009883a 	mov	r4,zero
 10181f4:	014ff834 	movhi	r5,16352
 10181f8:	10217780 	call	1021778 <__subdf3>
 10181fc:	880d883a 	mov	r6,r17
 1018200:	a00f883a 	mov	r7,r20
 1018204:	1009883a 	mov	r4,r2
 1018208:	180b883a 	mov	r5,r3
 101820c:	1020e900 	call	1020e90 <__gedf2>
 1018210:	00bc7c0e 	bge	zero,r2,1017404 <__alt_data_end+0xff017404>
 1018214:	01000c04 	movi	r4,48
 1018218:	00000106 	br	1018220 <_dtoa_r+0x1580>
 101821c:	102f883a 	mov	r23,r2
 1018220:	b8bfffc4 	addi	r2,r23,-1
 1018224:	10c00007 	ldb	r3,0(r2)
 1018228:	193ffc26 	beq	r3,r4,101821c <__alt_data_end+0xff01821c>
 101822c:	d9801317 	ldw	r6,76(sp)
 1018230:	d9800515 	stw	r6,20(sp)
 1018234:	003c4406 	br	1017348 <__alt_data_end+0xff017348>
 1018238:	d9801317 	ldw	r6,76(sp)
 101823c:	d9800515 	stw	r6,20(sp)
 1018240:	003cea06 	br	10175ec <__alt_data_end+0xff0175ec>
 1018244:	dd800f17 	ldw	r22,60(sp)
 1018248:	dcc01017 	ldw	r19,64(sp)
 101824c:	dc801217 	ldw	r18,72(sp)
 1018250:	003c6c06 	br	1017404 <__alt_data_end+0xff017404>
 1018254:	903e031e 	bne	r18,zero,1017a64 <__alt_data_end+0xff017a64>
 1018258:	003ebb06 	br	1017d48 <__alt_data_end+0xff017d48>
 101825c:	103e6c1e 	bne	r2,zero,1017c10 <__alt_data_end+0xff017c10>
 1018260:	4080004c 	andi	r2,r8,1
 1018264:	103e6a26 	beq	r2,zero,1017c10 <__alt_data_end+0xff017c10>
 1018268:	003e6606 	br	1017c04 <__alt_data_end+0xff017c04>
 101826c:	d8c00317 	ldw	r3,12(sp)
 1018270:	00800084 	movi	r2,2
 1018274:	10c02916 	blt	r2,r3,101831c <_dtoa_r+0x167c>
 1018278:	d9000c17 	ldw	r4,48(sp)
 101827c:	003e8806 	br	1017ca0 <__alt_data_end+0xff017ca0>
 1018280:	04000084 	movi	r16,2
 1018284:	003b9d06 	br	10170fc <__alt_data_end+0xff0170fc>
 1018288:	d9001317 	ldw	r4,76(sp)
 101828c:	d9000515 	stw	r4,20(sp)
 1018290:	003cd606 	br	10175ec <__alt_data_end+0xff0175ec>
 1018294:	d8801317 	ldw	r2,76(sp)
 1018298:	d8800515 	stw	r2,20(sp)
 101829c:	003c2a06 	br	1017348 <__alt_data_end+0xff017348>
 10182a0:	d9800317 	ldw	r6,12(sp)
 10182a4:	00800084 	movi	r2,2
 10182a8:	11801516 	blt	r2,r6,1018300 <_dtoa_r+0x1660>
 10182ac:	d9c00c17 	ldw	r7,48(sp)
 10182b0:	d9c00615 	stw	r7,24(sp)
 10182b4:	003df706 	br	1017a94 <__alt_data_end+0xff017a94>
 10182b8:	193d3926 	beq	r3,r4,10177a0 <__alt_data_end+0xff0177a0>
 10182bc:	00c00f04 	movi	r3,60
 10182c0:	1885c83a 	sub	r2,r3,r2
 10182c4:	003ddf06 	br	1017a44 <__alt_data_end+0xff017a44>
 10182c8:	e009883a 	mov	r4,fp
 10182cc:	e0001115 	stw	zero,68(fp)
 10182d0:	000b883a 	mov	r5,zero
 10182d4:	10198340 	call	1019834 <_Balloc>
 10182d8:	d8800715 	stw	r2,28(sp)
 10182dc:	d8c00717 	ldw	r3,28(sp)
 10182e0:	00bfffc4 	movi	r2,-1
 10182e4:	01000044 	movi	r4,1
 10182e8:	d8800c15 	stw	r2,48(sp)
 10182ec:	e0c01015 	stw	r3,64(fp)
 10182f0:	d9000b15 	stw	r4,44(sp)
 10182f4:	d8800615 	stw	r2,24(sp)
 10182f8:	d8002215 	stw	zero,136(sp)
 10182fc:	003c4106 	br	1017404 <__alt_data_end+0xff017404>
 1018300:	d8c00c17 	ldw	r3,48(sp)
 1018304:	d8c00615 	stw	r3,24(sp)
 1018308:	003e7006 	br	1017ccc <__alt_data_end+0xff017ccc>
 101830c:	04400044 	movi	r17,1
 1018310:	003b2006 	br	1016f94 <__alt_data_end+0xff016f94>
 1018314:	000b883a 	mov	r5,zero
 1018318:	003b3d06 	br	1017010 <__alt_data_end+0xff017010>
 101831c:	d8800c17 	ldw	r2,48(sp)
 1018320:	d8800615 	stw	r2,24(sp)
 1018324:	003e6906 	br	1017ccc <__alt_data_end+0xff017ccc>

01018328 <__fp_unlock>:
 1018328:	0005883a 	mov	r2,zero
 101832c:	f800283a 	ret

01018330 <_cleanup_r>:
 1018330:	014040b4 	movhi	r5,258
 1018334:	2977ef04 	addi	r5,r5,-8260
 1018338:	1018c481 	jmpi	1018c48 <_fwalk_reent>

0101833c <__sinit.part.1>:
 101833c:	defff704 	addi	sp,sp,-36
 1018340:	00c040b4 	movhi	r3,258
 1018344:	dfc00815 	stw	ra,32(sp)
 1018348:	ddc00715 	stw	r23,28(sp)
 101834c:	dd800615 	stw	r22,24(sp)
 1018350:	dd400515 	stw	r21,20(sp)
 1018354:	dd000415 	stw	r20,16(sp)
 1018358:	dcc00315 	stw	r19,12(sp)
 101835c:	dc800215 	stw	r18,8(sp)
 1018360:	dc400115 	stw	r17,4(sp)
 1018364:	dc000015 	stw	r16,0(sp)
 1018368:	18e0cc04 	addi	r3,r3,-31952
 101836c:	24000117 	ldw	r16,4(r4)
 1018370:	20c00f15 	stw	r3,60(r4)
 1018374:	2080bb04 	addi	r2,r4,748
 1018378:	00c000c4 	movi	r3,3
 101837c:	20c0b915 	stw	r3,740(r4)
 1018380:	2080ba15 	stw	r2,744(r4)
 1018384:	2000b815 	stw	zero,736(r4)
 1018388:	05c00204 	movi	r23,8
 101838c:	00800104 	movi	r2,4
 1018390:	2025883a 	mov	r18,r4
 1018394:	b80d883a 	mov	r6,r23
 1018398:	81001704 	addi	r4,r16,92
 101839c:	000b883a 	mov	r5,zero
 10183a0:	80000015 	stw	zero,0(r16)
 10183a4:	80000115 	stw	zero,4(r16)
 10183a8:	80000215 	stw	zero,8(r16)
 10183ac:	8080030d 	sth	r2,12(r16)
 10183b0:	80001915 	stw	zero,100(r16)
 10183b4:	8000038d 	sth	zero,14(r16)
 10183b8:	80000415 	stw	zero,16(r16)
 10183bc:	80000515 	stw	zero,20(r16)
 10183c0:	80000615 	stw	zero,24(r16)
 10183c4:	1013b300 	call	1013b30 <memset>
 10183c8:	058040b4 	movhi	r22,258
 10183cc:	94400217 	ldw	r17,8(r18)
 10183d0:	054040b4 	movhi	r21,258
 10183d4:	050040b4 	movhi	r20,258
 10183d8:	04c040b4 	movhi	r19,258
 10183dc:	b5ac5804 	addi	r22,r22,-20128
 10183e0:	ad6c6f04 	addi	r21,r21,-20036
 10183e4:	a52c8e04 	addi	r20,r20,-19912
 10183e8:	9ceca504 	addi	r19,r19,-19820
 10183ec:	85800815 	stw	r22,32(r16)
 10183f0:	85400915 	stw	r21,36(r16)
 10183f4:	85000a15 	stw	r20,40(r16)
 10183f8:	84c00b15 	stw	r19,44(r16)
 10183fc:	84000715 	stw	r16,28(r16)
 1018400:	00800284 	movi	r2,10
 1018404:	8880030d 	sth	r2,12(r17)
 1018408:	00800044 	movi	r2,1
 101840c:	b80d883a 	mov	r6,r23
 1018410:	89001704 	addi	r4,r17,92
 1018414:	000b883a 	mov	r5,zero
 1018418:	88000015 	stw	zero,0(r17)
 101841c:	88000115 	stw	zero,4(r17)
 1018420:	88000215 	stw	zero,8(r17)
 1018424:	88001915 	stw	zero,100(r17)
 1018428:	8880038d 	sth	r2,14(r17)
 101842c:	88000415 	stw	zero,16(r17)
 1018430:	88000515 	stw	zero,20(r17)
 1018434:	88000615 	stw	zero,24(r17)
 1018438:	1013b300 	call	1013b30 <memset>
 101843c:	94000317 	ldw	r16,12(r18)
 1018440:	00800484 	movi	r2,18
 1018444:	8c400715 	stw	r17,28(r17)
 1018448:	8d800815 	stw	r22,32(r17)
 101844c:	8d400915 	stw	r21,36(r17)
 1018450:	8d000a15 	stw	r20,40(r17)
 1018454:	8cc00b15 	stw	r19,44(r17)
 1018458:	8080030d 	sth	r2,12(r16)
 101845c:	00800084 	movi	r2,2
 1018460:	80000015 	stw	zero,0(r16)
 1018464:	80000115 	stw	zero,4(r16)
 1018468:	80000215 	stw	zero,8(r16)
 101846c:	80001915 	stw	zero,100(r16)
 1018470:	8080038d 	sth	r2,14(r16)
 1018474:	80000415 	stw	zero,16(r16)
 1018478:	80000515 	stw	zero,20(r16)
 101847c:	80000615 	stw	zero,24(r16)
 1018480:	b80d883a 	mov	r6,r23
 1018484:	000b883a 	mov	r5,zero
 1018488:	81001704 	addi	r4,r16,92
 101848c:	1013b300 	call	1013b30 <memset>
 1018490:	00800044 	movi	r2,1
 1018494:	84000715 	stw	r16,28(r16)
 1018498:	85800815 	stw	r22,32(r16)
 101849c:	85400915 	stw	r21,36(r16)
 10184a0:	85000a15 	stw	r20,40(r16)
 10184a4:	84c00b15 	stw	r19,44(r16)
 10184a8:	90800e15 	stw	r2,56(r18)
 10184ac:	dfc00817 	ldw	ra,32(sp)
 10184b0:	ddc00717 	ldw	r23,28(sp)
 10184b4:	dd800617 	ldw	r22,24(sp)
 10184b8:	dd400517 	ldw	r21,20(sp)
 10184bc:	dd000417 	ldw	r20,16(sp)
 10184c0:	dcc00317 	ldw	r19,12(sp)
 10184c4:	dc800217 	ldw	r18,8(sp)
 10184c8:	dc400117 	ldw	r17,4(sp)
 10184cc:	dc000017 	ldw	r16,0(sp)
 10184d0:	dec00904 	addi	sp,sp,36
 10184d4:	f800283a 	ret

010184d8 <__fp_lock>:
 10184d8:	0005883a 	mov	r2,zero
 10184dc:	f800283a 	ret

010184e0 <__sfmoreglue>:
 10184e0:	defffc04 	addi	sp,sp,-16
 10184e4:	dc400115 	stw	r17,4(sp)
 10184e8:	2c7fffc4 	addi	r17,r5,-1
 10184ec:	8c401a24 	muli	r17,r17,104
 10184f0:	dc800215 	stw	r18,8(sp)
 10184f4:	2825883a 	mov	r18,r5
 10184f8:	89401d04 	addi	r5,r17,116
 10184fc:	dc000015 	stw	r16,0(sp)
 1018500:	dfc00315 	stw	ra,12(sp)
 1018504:	1018de80 	call	1018de8 <_malloc_r>
 1018508:	1021883a 	mov	r16,r2
 101850c:	10000726 	beq	r2,zero,101852c <__sfmoreglue+0x4c>
 1018510:	11000304 	addi	r4,r2,12
 1018514:	10000015 	stw	zero,0(r2)
 1018518:	14800115 	stw	r18,4(r2)
 101851c:	11000215 	stw	r4,8(r2)
 1018520:	89801a04 	addi	r6,r17,104
 1018524:	000b883a 	mov	r5,zero
 1018528:	1013b300 	call	1013b30 <memset>
 101852c:	8005883a 	mov	r2,r16
 1018530:	dfc00317 	ldw	ra,12(sp)
 1018534:	dc800217 	ldw	r18,8(sp)
 1018538:	dc400117 	ldw	r17,4(sp)
 101853c:	dc000017 	ldw	r16,0(sp)
 1018540:	dec00404 	addi	sp,sp,16
 1018544:	f800283a 	ret

01018548 <__sfp>:
 1018548:	defffb04 	addi	sp,sp,-20
 101854c:	dc000015 	stw	r16,0(sp)
 1018550:	040040f4 	movhi	r16,259
 1018554:	84217004 	addi	r16,r16,-31296
 1018558:	dcc00315 	stw	r19,12(sp)
 101855c:	2027883a 	mov	r19,r4
 1018560:	81000017 	ldw	r4,0(r16)
 1018564:	dfc00415 	stw	ra,16(sp)
 1018568:	dc800215 	stw	r18,8(sp)
 101856c:	20800e17 	ldw	r2,56(r4)
 1018570:	dc400115 	stw	r17,4(sp)
 1018574:	1000021e 	bne	r2,zero,1018580 <__sfp+0x38>
 1018578:	101833c0 	call	101833c <__sinit.part.1>
 101857c:	81000017 	ldw	r4,0(r16)
 1018580:	2480b804 	addi	r18,r4,736
 1018584:	047fffc4 	movi	r17,-1
 1018588:	91000117 	ldw	r4,4(r18)
 101858c:	94000217 	ldw	r16,8(r18)
 1018590:	213fffc4 	addi	r4,r4,-1
 1018594:	20000a16 	blt	r4,zero,10185c0 <__sfp+0x78>
 1018598:	8080030f 	ldh	r2,12(r16)
 101859c:	10000c26 	beq	r2,zero,10185d0 <__sfp+0x88>
 10185a0:	80c01d04 	addi	r3,r16,116
 10185a4:	00000206 	br	10185b0 <__sfp+0x68>
 10185a8:	18bfe60f 	ldh	r2,-104(r3)
 10185ac:	10000826 	beq	r2,zero,10185d0 <__sfp+0x88>
 10185b0:	213fffc4 	addi	r4,r4,-1
 10185b4:	1c3ffd04 	addi	r16,r3,-12
 10185b8:	18c01a04 	addi	r3,r3,104
 10185bc:	247ffa1e 	bne	r4,r17,10185a8 <__alt_data_end+0xff0185a8>
 10185c0:	90800017 	ldw	r2,0(r18)
 10185c4:	10001d26 	beq	r2,zero,101863c <__sfp+0xf4>
 10185c8:	1025883a 	mov	r18,r2
 10185cc:	003fee06 	br	1018588 <__alt_data_end+0xff018588>
 10185d0:	00bfffc4 	movi	r2,-1
 10185d4:	8080038d 	sth	r2,14(r16)
 10185d8:	00800044 	movi	r2,1
 10185dc:	8080030d 	sth	r2,12(r16)
 10185e0:	80001915 	stw	zero,100(r16)
 10185e4:	80000015 	stw	zero,0(r16)
 10185e8:	80000215 	stw	zero,8(r16)
 10185ec:	80000115 	stw	zero,4(r16)
 10185f0:	80000415 	stw	zero,16(r16)
 10185f4:	80000515 	stw	zero,20(r16)
 10185f8:	80000615 	stw	zero,24(r16)
 10185fc:	01800204 	movi	r6,8
 1018600:	000b883a 	mov	r5,zero
 1018604:	81001704 	addi	r4,r16,92
 1018608:	1013b300 	call	1013b30 <memset>
 101860c:	8005883a 	mov	r2,r16
 1018610:	80000c15 	stw	zero,48(r16)
 1018614:	80000d15 	stw	zero,52(r16)
 1018618:	80001115 	stw	zero,68(r16)
 101861c:	80001215 	stw	zero,72(r16)
 1018620:	dfc00417 	ldw	ra,16(sp)
 1018624:	dcc00317 	ldw	r19,12(sp)
 1018628:	dc800217 	ldw	r18,8(sp)
 101862c:	dc400117 	ldw	r17,4(sp)
 1018630:	dc000017 	ldw	r16,0(sp)
 1018634:	dec00504 	addi	sp,sp,20
 1018638:	f800283a 	ret
 101863c:	01400104 	movi	r5,4
 1018640:	9809883a 	mov	r4,r19
 1018644:	10184e00 	call	10184e0 <__sfmoreglue>
 1018648:	90800015 	stw	r2,0(r18)
 101864c:	103fde1e 	bne	r2,zero,10185c8 <__alt_data_end+0xff0185c8>
 1018650:	00800304 	movi	r2,12
 1018654:	98800015 	stw	r2,0(r19)
 1018658:	0005883a 	mov	r2,zero
 101865c:	003ff006 	br	1018620 <__alt_data_end+0xff018620>

01018660 <_cleanup>:
 1018660:	008040f4 	movhi	r2,259
 1018664:	10a17004 	addi	r2,r2,-31296
 1018668:	11000017 	ldw	r4,0(r2)
 101866c:	014040b4 	movhi	r5,258
 1018670:	2977ef04 	addi	r5,r5,-8260
 1018674:	1018c481 	jmpi	1018c48 <_fwalk_reent>

01018678 <__sinit>:
 1018678:	20800e17 	ldw	r2,56(r4)
 101867c:	10000126 	beq	r2,zero,1018684 <__sinit+0xc>
 1018680:	f800283a 	ret
 1018684:	101833c1 	jmpi	101833c <__sinit.part.1>

01018688 <__sfp_lock_acquire>:
 1018688:	f800283a 	ret

0101868c <__sfp_lock_release>:
 101868c:	f800283a 	ret

01018690 <__sinit_lock_acquire>:
 1018690:	f800283a 	ret

01018694 <__sinit_lock_release>:
 1018694:	f800283a 	ret

01018698 <__fp_lock_all>:
 1018698:	008040f4 	movhi	r2,259
 101869c:	10a17104 	addi	r2,r2,-31292
 10186a0:	11000017 	ldw	r4,0(r2)
 10186a4:	014040b4 	movhi	r5,258
 10186a8:	29613604 	addi	r5,r5,-31528
 10186ac:	1018b841 	jmpi	1018b84 <_fwalk>

010186b0 <__fp_unlock_all>:
 10186b0:	008040f4 	movhi	r2,259
 10186b4:	10a17104 	addi	r2,r2,-31292
 10186b8:	11000017 	ldw	r4,0(r2)
 10186bc:	014040b4 	movhi	r5,258
 10186c0:	2960ca04 	addi	r5,r5,-31960
 10186c4:	1018b841 	jmpi	1018b84 <_fwalk>

010186c8 <__sfvwrite_r>:
 10186c8:	30800217 	ldw	r2,8(r6)
 10186cc:	10006726 	beq	r2,zero,101886c <__sfvwrite_r+0x1a4>
 10186d0:	28c0030b 	ldhu	r3,12(r5)
 10186d4:	defff404 	addi	sp,sp,-48
 10186d8:	dd400715 	stw	r21,28(sp)
 10186dc:	dd000615 	stw	r20,24(sp)
 10186e0:	dc000215 	stw	r16,8(sp)
 10186e4:	dfc00b15 	stw	ra,44(sp)
 10186e8:	df000a15 	stw	fp,40(sp)
 10186ec:	ddc00915 	stw	r23,36(sp)
 10186f0:	dd800815 	stw	r22,32(sp)
 10186f4:	dcc00515 	stw	r19,20(sp)
 10186f8:	dc800415 	stw	r18,16(sp)
 10186fc:	dc400315 	stw	r17,12(sp)
 1018700:	1880020c 	andi	r2,r3,8
 1018704:	2821883a 	mov	r16,r5
 1018708:	202b883a 	mov	r21,r4
 101870c:	3029883a 	mov	r20,r6
 1018710:	10002726 	beq	r2,zero,10187b0 <__sfvwrite_r+0xe8>
 1018714:	28800417 	ldw	r2,16(r5)
 1018718:	10002526 	beq	r2,zero,10187b0 <__sfvwrite_r+0xe8>
 101871c:	1880008c 	andi	r2,r3,2
 1018720:	a4400017 	ldw	r17,0(r20)
 1018724:	10002a26 	beq	r2,zero,10187d0 <__sfvwrite_r+0x108>
 1018728:	05a00034 	movhi	r22,32768
 101872c:	0027883a 	mov	r19,zero
 1018730:	0025883a 	mov	r18,zero
 1018734:	b5bf0004 	addi	r22,r22,-1024
 1018738:	980d883a 	mov	r6,r19
 101873c:	a809883a 	mov	r4,r21
 1018740:	90004626 	beq	r18,zero,101885c <__sfvwrite_r+0x194>
 1018744:	900f883a 	mov	r7,r18
 1018748:	b480022e 	bgeu	r22,r18,1018754 <__sfvwrite_r+0x8c>
 101874c:	01e00034 	movhi	r7,32768
 1018750:	39ff0004 	addi	r7,r7,-1024
 1018754:	80800917 	ldw	r2,36(r16)
 1018758:	81400717 	ldw	r5,28(r16)
 101875c:	103ee83a 	callr	r2
 1018760:	0080570e 	bge	zero,r2,10188c0 <__sfvwrite_r+0x1f8>
 1018764:	a0c00217 	ldw	r3,8(r20)
 1018768:	98a7883a 	add	r19,r19,r2
 101876c:	90a5c83a 	sub	r18,r18,r2
 1018770:	1885c83a 	sub	r2,r3,r2
 1018774:	a0800215 	stw	r2,8(r20)
 1018778:	103fef1e 	bne	r2,zero,1018738 <__alt_data_end+0xff018738>
 101877c:	0005883a 	mov	r2,zero
 1018780:	dfc00b17 	ldw	ra,44(sp)
 1018784:	df000a17 	ldw	fp,40(sp)
 1018788:	ddc00917 	ldw	r23,36(sp)
 101878c:	dd800817 	ldw	r22,32(sp)
 1018790:	dd400717 	ldw	r21,28(sp)
 1018794:	dd000617 	ldw	r20,24(sp)
 1018798:	dcc00517 	ldw	r19,20(sp)
 101879c:	dc800417 	ldw	r18,16(sp)
 10187a0:	dc400317 	ldw	r17,12(sp)
 10187a4:	dc000217 	ldw	r16,8(sp)
 10187a8:	dec00c04 	addi	sp,sp,48
 10187ac:	f800283a 	ret
 10187b0:	800b883a 	mov	r5,r16
 10187b4:	a809883a 	mov	r4,r21
 10187b8:	101dd500 	call	101dd50 <__swsetup_r>
 10187bc:	1000eb1e 	bne	r2,zero,1018b6c <__sfvwrite_r+0x4a4>
 10187c0:	80c0030b 	ldhu	r3,12(r16)
 10187c4:	a4400017 	ldw	r17,0(r20)
 10187c8:	1880008c 	andi	r2,r3,2
 10187cc:	103fd61e 	bne	r2,zero,1018728 <__alt_data_end+0xff018728>
 10187d0:	1880004c 	andi	r2,r3,1
 10187d4:	10003f1e 	bne	r2,zero,10188d4 <__sfvwrite_r+0x20c>
 10187d8:	0039883a 	mov	fp,zero
 10187dc:	0025883a 	mov	r18,zero
 10187e0:	90001a26 	beq	r18,zero,101884c <__sfvwrite_r+0x184>
 10187e4:	1880800c 	andi	r2,r3,512
 10187e8:	84c00217 	ldw	r19,8(r16)
 10187ec:	10002126 	beq	r2,zero,1018874 <__sfvwrite_r+0x1ac>
 10187f0:	982f883a 	mov	r23,r19
 10187f4:	94c09336 	bltu	r18,r19,1018a44 <__sfvwrite_r+0x37c>
 10187f8:	1881200c 	andi	r2,r3,1152
 10187fc:	10009e1e 	bne	r2,zero,1018a78 <__sfvwrite_r+0x3b0>
 1018800:	81000017 	ldw	r4,0(r16)
 1018804:	b80d883a 	mov	r6,r23
 1018808:	e00b883a 	mov	r5,fp
 101880c:	10196d80 	call	10196d8 <memmove>
 1018810:	80c00217 	ldw	r3,8(r16)
 1018814:	81000017 	ldw	r4,0(r16)
 1018818:	9005883a 	mov	r2,r18
 101881c:	1ce7c83a 	sub	r19,r3,r19
 1018820:	25cf883a 	add	r7,r4,r23
 1018824:	84c00215 	stw	r19,8(r16)
 1018828:	81c00015 	stw	r7,0(r16)
 101882c:	a0c00217 	ldw	r3,8(r20)
 1018830:	e0b9883a 	add	fp,fp,r2
 1018834:	90a5c83a 	sub	r18,r18,r2
 1018838:	18a7c83a 	sub	r19,r3,r2
 101883c:	a4c00215 	stw	r19,8(r20)
 1018840:	983fce26 	beq	r19,zero,101877c <__alt_data_end+0xff01877c>
 1018844:	80c0030b 	ldhu	r3,12(r16)
 1018848:	903fe61e 	bne	r18,zero,10187e4 <__alt_data_end+0xff0187e4>
 101884c:	8f000017 	ldw	fp,0(r17)
 1018850:	8c800117 	ldw	r18,4(r17)
 1018854:	8c400204 	addi	r17,r17,8
 1018858:	003fe106 	br	10187e0 <__alt_data_end+0xff0187e0>
 101885c:	8cc00017 	ldw	r19,0(r17)
 1018860:	8c800117 	ldw	r18,4(r17)
 1018864:	8c400204 	addi	r17,r17,8
 1018868:	003fb306 	br	1018738 <__alt_data_end+0xff018738>
 101886c:	0005883a 	mov	r2,zero
 1018870:	f800283a 	ret
 1018874:	81000017 	ldw	r4,0(r16)
 1018878:	80800417 	ldw	r2,16(r16)
 101887c:	11005736 	bltu	r2,r4,10189dc <__sfvwrite_r+0x314>
 1018880:	85c00517 	ldw	r23,20(r16)
 1018884:	95c05536 	bltu	r18,r23,10189dc <__sfvwrite_r+0x314>
 1018888:	00a00034 	movhi	r2,32768
 101888c:	10bfffc4 	addi	r2,r2,-1
 1018890:	9009883a 	mov	r4,r18
 1018894:	1480012e 	bgeu	r2,r18,101889c <__sfvwrite_r+0x1d4>
 1018898:	1009883a 	mov	r4,r2
 101889c:	b80b883a 	mov	r5,r23
 10188a0:	101fac00 	call	101fac0 <__divsi3>
 10188a4:	15cf383a 	mul	r7,r2,r23
 10188a8:	81400717 	ldw	r5,28(r16)
 10188ac:	80800917 	ldw	r2,36(r16)
 10188b0:	e00d883a 	mov	r6,fp
 10188b4:	a809883a 	mov	r4,r21
 10188b8:	103ee83a 	callr	r2
 10188bc:	00bfdb16 	blt	zero,r2,101882c <__alt_data_end+0xff01882c>
 10188c0:	8080030b 	ldhu	r2,12(r16)
 10188c4:	10801014 	ori	r2,r2,64
 10188c8:	8080030d 	sth	r2,12(r16)
 10188cc:	00bfffc4 	movi	r2,-1
 10188d0:	003fab06 	br	1018780 <__alt_data_end+0xff018780>
 10188d4:	0027883a 	mov	r19,zero
 10188d8:	0011883a 	mov	r8,zero
 10188dc:	0039883a 	mov	fp,zero
 10188e0:	0025883a 	mov	r18,zero
 10188e4:	90001f26 	beq	r18,zero,1018964 <__sfvwrite_r+0x29c>
 10188e8:	40005a26 	beq	r8,zero,1018a54 <__sfvwrite_r+0x38c>
 10188ec:	982d883a 	mov	r22,r19
 10188f0:	94c0012e 	bgeu	r18,r19,10188f8 <__sfvwrite_r+0x230>
 10188f4:	902d883a 	mov	r22,r18
 10188f8:	81000017 	ldw	r4,0(r16)
 10188fc:	80800417 	ldw	r2,16(r16)
 1018900:	b02f883a 	mov	r23,r22
 1018904:	81c00517 	ldw	r7,20(r16)
 1018908:	1100032e 	bgeu	r2,r4,1018918 <__sfvwrite_r+0x250>
 101890c:	80c00217 	ldw	r3,8(r16)
 1018910:	38c7883a 	add	r3,r7,r3
 1018914:	1d801816 	blt	r3,r22,1018978 <__sfvwrite_r+0x2b0>
 1018918:	b1c03e16 	blt	r22,r7,1018a14 <__sfvwrite_r+0x34c>
 101891c:	80800917 	ldw	r2,36(r16)
 1018920:	81400717 	ldw	r5,28(r16)
 1018924:	e00d883a 	mov	r6,fp
 1018928:	da000115 	stw	r8,4(sp)
 101892c:	a809883a 	mov	r4,r21
 1018930:	103ee83a 	callr	r2
 1018934:	102f883a 	mov	r23,r2
 1018938:	da000117 	ldw	r8,4(sp)
 101893c:	00bfe00e 	bge	zero,r2,10188c0 <__alt_data_end+0xff0188c0>
 1018940:	9de7c83a 	sub	r19,r19,r23
 1018944:	98001f26 	beq	r19,zero,10189c4 <__sfvwrite_r+0x2fc>
 1018948:	a0800217 	ldw	r2,8(r20)
 101894c:	e5f9883a 	add	fp,fp,r23
 1018950:	95e5c83a 	sub	r18,r18,r23
 1018954:	15efc83a 	sub	r23,r2,r23
 1018958:	a5c00215 	stw	r23,8(r20)
 101895c:	b83f8726 	beq	r23,zero,101877c <__alt_data_end+0xff01877c>
 1018960:	903fe11e 	bne	r18,zero,10188e8 <__alt_data_end+0xff0188e8>
 1018964:	8f000017 	ldw	fp,0(r17)
 1018968:	8c800117 	ldw	r18,4(r17)
 101896c:	0011883a 	mov	r8,zero
 1018970:	8c400204 	addi	r17,r17,8
 1018974:	003fdb06 	br	10188e4 <__alt_data_end+0xff0188e4>
 1018978:	180d883a 	mov	r6,r3
 101897c:	e00b883a 	mov	r5,fp
 1018980:	da000115 	stw	r8,4(sp)
 1018984:	d8c00015 	stw	r3,0(sp)
 1018988:	10196d80 	call	10196d8 <memmove>
 101898c:	d8c00017 	ldw	r3,0(sp)
 1018990:	80800017 	ldw	r2,0(r16)
 1018994:	800b883a 	mov	r5,r16
 1018998:	a809883a 	mov	r4,r21
 101899c:	10c5883a 	add	r2,r2,r3
 10189a0:	80800015 	stw	r2,0(r16)
 10189a4:	d8c00015 	stw	r3,0(sp)
 10189a8:	101e2dc0 	call	101e2dc <_fflush_r>
 10189ac:	d8c00017 	ldw	r3,0(sp)
 10189b0:	da000117 	ldw	r8,4(sp)
 10189b4:	103fc21e 	bne	r2,zero,10188c0 <__alt_data_end+0xff0188c0>
 10189b8:	182f883a 	mov	r23,r3
 10189bc:	9de7c83a 	sub	r19,r19,r23
 10189c0:	983fe11e 	bne	r19,zero,1018948 <__alt_data_end+0xff018948>
 10189c4:	800b883a 	mov	r5,r16
 10189c8:	a809883a 	mov	r4,r21
 10189cc:	101e2dc0 	call	101e2dc <_fflush_r>
 10189d0:	103fbb1e 	bne	r2,zero,10188c0 <__alt_data_end+0xff0188c0>
 10189d4:	0011883a 	mov	r8,zero
 10189d8:	003fdb06 	br	1018948 <__alt_data_end+0xff018948>
 10189dc:	94c0012e 	bgeu	r18,r19,10189e4 <__sfvwrite_r+0x31c>
 10189e0:	9027883a 	mov	r19,r18
 10189e4:	980d883a 	mov	r6,r19
 10189e8:	e00b883a 	mov	r5,fp
 10189ec:	10196d80 	call	10196d8 <memmove>
 10189f0:	80800217 	ldw	r2,8(r16)
 10189f4:	80c00017 	ldw	r3,0(r16)
 10189f8:	14c5c83a 	sub	r2,r2,r19
 10189fc:	1cc7883a 	add	r3,r3,r19
 1018a00:	80800215 	stw	r2,8(r16)
 1018a04:	80c00015 	stw	r3,0(r16)
 1018a08:	10004326 	beq	r2,zero,1018b18 <__sfvwrite_r+0x450>
 1018a0c:	9805883a 	mov	r2,r19
 1018a10:	003f8606 	br	101882c <__alt_data_end+0xff01882c>
 1018a14:	b00d883a 	mov	r6,r22
 1018a18:	e00b883a 	mov	r5,fp
 1018a1c:	da000115 	stw	r8,4(sp)
 1018a20:	10196d80 	call	10196d8 <memmove>
 1018a24:	80800217 	ldw	r2,8(r16)
 1018a28:	80c00017 	ldw	r3,0(r16)
 1018a2c:	da000117 	ldw	r8,4(sp)
 1018a30:	1585c83a 	sub	r2,r2,r22
 1018a34:	1dad883a 	add	r22,r3,r22
 1018a38:	80800215 	stw	r2,8(r16)
 1018a3c:	85800015 	stw	r22,0(r16)
 1018a40:	003fbf06 	br	1018940 <__alt_data_end+0xff018940>
 1018a44:	81000017 	ldw	r4,0(r16)
 1018a48:	9027883a 	mov	r19,r18
 1018a4c:	902f883a 	mov	r23,r18
 1018a50:	003f6c06 	br	1018804 <__alt_data_end+0xff018804>
 1018a54:	900d883a 	mov	r6,r18
 1018a58:	01400284 	movi	r5,10
 1018a5c:	e009883a 	mov	r4,fp
 1018a60:	10195f40 	call	10195f4 <memchr>
 1018a64:	10003e26 	beq	r2,zero,1018b60 <__sfvwrite_r+0x498>
 1018a68:	10800044 	addi	r2,r2,1
 1018a6c:	1727c83a 	sub	r19,r2,fp
 1018a70:	02000044 	movi	r8,1
 1018a74:	003f9d06 	br	10188ec <__alt_data_end+0xff0188ec>
 1018a78:	80800517 	ldw	r2,20(r16)
 1018a7c:	81400417 	ldw	r5,16(r16)
 1018a80:	81c00017 	ldw	r7,0(r16)
 1018a84:	10a7883a 	add	r19,r2,r2
 1018a88:	9885883a 	add	r2,r19,r2
 1018a8c:	1026d7fa 	srli	r19,r2,31
 1018a90:	396dc83a 	sub	r22,r7,r5
 1018a94:	b1000044 	addi	r4,r22,1
 1018a98:	9885883a 	add	r2,r19,r2
 1018a9c:	1027d07a 	srai	r19,r2,1
 1018aa0:	2485883a 	add	r2,r4,r18
 1018aa4:	980d883a 	mov	r6,r19
 1018aa8:	9880022e 	bgeu	r19,r2,1018ab4 <__sfvwrite_r+0x3ec>
 1018aac:	1027883a 	mov	r19,r2
 1018ab0:	100d883a 	mov	r6,r2
 1018ab4:	18c1000c 	andi	r3,r3,1024
 1018ab8:	18001c26 	beq	r3,zero,1018b2c <__sfvwrite_r+0x464>
 1018abc:	300b883a 	mov	r5,r6
 1018ac0:	a809883a 	mov	r4,r21
 1018ac4:	1018de80 	call	1018de8 <_malloc_r>
 1018ac8:	102f883a 	mov	r23,r2
 1018acc:	10002926 	beq	r2,zero,1018b74 <__sfvwrite_r+0x4ac>
 1018ad0:	81400417 	ldw	r5,16(r16)
 1018ad4:	b00d883a 	mov	r6,r22
 1018ad8:	1009883a 	mov	r4,r2
 1018adc:	10139e80 	call	10139e8 <memcpy>
 1018ae0:	8080030b 	ldhu	r2,12(r16)
 1018ae4:	00fedfc4 	movi	r3,-1153
 1018ae8:	10c4703a 	and	r2,r2,r3
 1018aec:	10802014 	ori	r2,r2,128
 1018af0:	8080030d 	sth	r2,12(r16)
 1018af4:	bd89883a 	add	r4,r23,r22
 1018af8:	9d8fc83a 	sub	r7,r19,r22
 1018afc:	85c00415 	stw	r23,16(r16)
 1018b00:	84c00515 	stw	r19,20(r16)
 1018b04:	81000015 	stw	r4,0(r16)
 1018b08:	9027883a 	mov	r19,r18
 1018b0c:	81c00215 	stw	r7,8(r16)
 1018b10:	902f883a 	mov	r23,r18
 1018b14:	003f3b06 	br	1018804 <__alt_data_end+0xff018804>
 1018b18:	800b883a 	mov	r5,r16
 1018b1c:	a809883a 	mov	r4,r21
 1018b20:	101e2dc0 	call	101e2dc <_fflush_r>
 1018b24:	103fb926 	beq	r2,zero,1018a0c <__alt_data_end+0xff018a0c>
 1018b28:	003f6506 	br	10188c0 <__alt_data_end+0xff0188c0>
 1018b2c:	a809883a 	mov	r4,r21
 1018b30:	101a8300 	call	101a830 <_realloc_r>
 1018b34:	102f883a 	mov	r23,r2
 1018b38:	103fee1e 	bne	r2,zero,1018af4 <__alt_data_end+0xff018af4>
 1018b3c:	81400417 	ldw	r5,16(r16)
 1018b40:	a809883a 	mov	r4,r21
 1018b44:	101e6940 	call	101e694 <_free_r>
 1018b48:	8080030b 	ldhu	r2,12(r16)
 1018b4c:	00ffdfc4 	movi	r3,-129
 1018b50:	1884703a 	and	r2,r3,r2
 1018b54:	00c00304 	movi	r3,12
 1018b58:	a8c00015 	stw	r3,0(r21)
 1018b5c:	003f5906 	br	10188c4 <__alt_data_end+0xff0188c4>
 1018b60:	94c00044 	addi	r19,r18,1
 1018b64:	02000044 	movi	r8,1
 1018b68:	003f6006 	br	10188ec <__alt_data_end+0xff0188ec>
 1018b6c:	00bfffc4 	movi	r2,-1
 1018b70:	003f0306 	br	1018780 <__alt_data_end+0xff018780>
 1018b74:	00800304 	movi	r2,12
 1018b78:	a8800015 	stw	r2,0(r21)
 1018b7c:	8080030b 	ldhu	r2,12(r16)
 1018b80:	003f5006 	br	10188c4 <__alt_data_end+0xff0188c4>

01018b84 <_fwalk>:
 1018b84:	defff704 	addi	sp,sp,-36
 1018b88:	dd000415 	stw	r20,16(sp)
 1018b8c:	dfc00815 	stw	ra,32(sp)
 1018b90:	ddc00715 	stw	r23,28(sp)
 1018b94:	dd800615 	stw	r22,24(sp)
 1018b98:	dd400515 	stw	r21,20(sp)
 1018b9c:	dcc00315 	stw	r19,12(sp)
 1018ba0:	dc800215 	stw	r18,8(sp)
 1018ba4:	dc400115 	stw	r17,4(sp)
 1018ba8:	dc000015 	stw	r16,0(sp)
 1018bac:	2500b804 	addi	r20,r4,736
 1018bb0:	a0002326 	beq	r20,zero,1018c40 <_fwalk+0xbc>
 1018bb4:	282b883a 	mov	r21,r5
 1018bb8:	002f883a 	mov	r23,zero
 1018bbc:	05800044 	movi	r22,1
 1018bc0:	04ffffc4 	movi	r19,-1
 1018bc4:	a4400117 	ldw	r17,4(r20)
 1018bc8:	a4800217 	ldw	r18,8(r20)
 1018bcc:	8c7fffc4 	addi	r17,r17,-1
 1018bd0:	88000d16 	blt	r17,zero,1018c08 <_fwalk+0x84>
 1018bd4:	94000304 	addi	r16,r18,12
 1018bd8:	94800384 	addi	r18,r18,14
 1018bdc:	8080000b 	ldhu	r2,0(r16)
 1018be0:	8c7fffc4 	addi	r17,r17,-1
 1018be4:	813ffd04 	addi	r4,r16,-12
 1018be8:	b080042e 	bgeu	r22,r2,1018bfc <_fwalk+0x78>
 1018bec:	9080000f 	ldh	r2,0(r18)
 1018bf0:	14c00226 	beq	r2,r19,1018bfc <_fwalk+0x78>
 1018bf4:	a83ee83a 	callr	r21
 1018bf8:	b8aeb03a 	or	r23,r23,r2
 1018bfc:	84001a04 	addi	r16,r16,104
 1018c00:	94801a04 	addi	r18,r18,104
 1018c04:	8cfff51e 	bne	r17,r19,1018bdc <__alt_data_end+0xff018bdc>
 1018c08:	a5000017 	ldw	r20,0(r20)
 1018c0c:	a03fed1e 	bne	r20,zero,1018bc4 <__alt_data_end+0xff018bc4>
 1018c10:	b805883a 	mov	r2,r23
 1018c14:	dfc00817 	ldw	ra,32(sp)
 1018c18:	ddc00717 	ldw	r23,28(sp)
 1018c1c:	dd800617 	ldw	r22,24(sp)
 1018c20:	dd400517 	ldw	r21,20(sp)
 1018c24:	dd000417 	ldw	r20,16(sp)
 1018c28:	dcc00317 	ldw	r19,12(sp)
 1018c2c:	dc800217 	ldw	r18,8(sp)
 1018c30:	dc400117 	ldw	r17,4(sp)
 1018c34:	dc000017 	ldw	r16,0(sp)
 1018c38:	dec00904 	addi	sp,sp,36
 1018c3c:	f800283a 	ret
 1018c40:	002f883a 	mov	r23,zero
 1018c44:	003ff206 	br	1018c10 <__alt_data_end+0xff018c10>

01018c48 <_fwalk_reent>:
 1018c48:	defff704 	addi	sp,sp,-36
 1018c4c:	dd000415 	stw	r20,16(sp)
 1018c50:	dfc00815 	stw	ra,32(sp)
 1018c54:	ddc00715 	stw	r23,28(sp)
 1018c58:	dd800615 	stw	r22,24(sp)
 1018c5c:	dd400515 	stw	r21,20(sp)
 1018c60:	dcc00315 	stw	r19,12(sp)
 1018c64:	dc800215 	stw	r18,8(sp)
 1018c68:	dc400115 	stw	r17,4(sp)
 1018c6c:	dc000015 	stw	r16,0(sp)
 1018c70:	2500b804 	addi	r20,r4,736
 1018c74:	a0002326 	beq	r20,zero,1018d04 <_fwalk_reent+0xbc>
 1018c78:	282b883a 	mov	r21,r5
 1018c7c:	2027883a 	mov	r19,r4
 1018c80:	002f883a 	mov	r23,zero
 1018c84:	05800044 	movi	r22,1
 1018c88:	04bfffc4 	movi	r18,-1
 1018c8c:	a4400117 	ldw	r17,4(r20)
 1018c90:	a4000217 	ldw	r16,8(r20)
 1018c94:	8c7fffc4 	addi	r17,r17,-1
 1018c98:	88000c16 	blt	r17,zero,1018ccc <_fwalk_reent+0x84>
 1018c9c:	84000304 	addi	r16,r16,12
 1018ca0:	8080000b 	ldhu	r2,0(r16)
 1018ca4:	8c7fffc4 	addi	r17,r17,-1
 1018ca8:	817ffd04 	addi	r5,r16,-12
 1018cac:	b080052e 	bgeu	r22,r2,1018cc4 <_fwalk_reent+0x7c>
 1018cb0:	8080008f 	ldh	r2,2(r16)
 1018cb4:	9809883a 	mov	r4,r19
 1018cb8:	14800226 	beq	r2,r18,1018cc4 <_fwalk_reent+0x7c>
 1018cbc:	a83ee83a 	callr	r21
 1018cc0:	b8aeb03a 	or	r23,r23,r2
 1018cc4:	84001a04 	addi	r16,r16,104
 1018cc8:	8cbff51e 	bne	r17,r18,1018ca0 <__alt_data_end+0xff018ca0>
 1018ccc:	a5000017 	ldw	r20,0(r20)
 1018cd0:	a03fee1e 	bne	r20,zero,1018c8c <__alt_data_end+0xff018c8c>
 1018cd4:	b805883a 	mov	r2,r23
 1018cd8:	dfc00817 	ldw	ra,32(sp)
 1018cdc:	ddc00717 	ldw	r23,28(sp)
 1018ce0:	dd800617 	ldw	r22,24(sp)
 1018ce4:	dd400517 	ldw	r21,20(sp)
 1018ce8:	dd000417 	ldw	r20,16(sp)
 1018cec:	dcc00317 	ldw	r19,12(sp)
 1018cf0:	dc800217 	ldw	r18,8(sp)
 1018cf4:	dc400117 	ldw	r17,4(sp)
 1018cf8:	dc000017 	ldw	r16,0(sp)
 1018cfc:	dec00904 	addi	sp,sp,36
 1018d00:	f800283a 	ret
 1018d04:	002f883a 	mov	r23,zero
 1018d08:	003ff206 	br	1018cd4 <__alt_data_end+0xff018cd4>

01018d0c <_setlocale_r>:
 1018d0c:	30001b26 	beq	r6,zero,1018d7c <_setlocale_r+0x70>
 1018d10:	014040b4 	movhi	r5,258
 1018d14:	defffe04 	addi	sp,sp,-8
 1018d18:	2959dd04 	addi	r5,r5,26484
 1018d1c:	3009883a 	mov	r4,r6
 1018d20:	dc000015 	stw	r16,0(sp)
 1018d24:	dfc00115 	stw	ra,4(sp)
 1018d28:	3021883a 	mov	r16,r6
 1018d2c:	1013ee80 	call	1013ee8 <strcmp>
 1018d30:	1000061e 	bne	r2,zero,1018d4c <_setlocale_r+0x40>
 1018d34:	008040b4 	movhi	r2,258
 1018d38:	1097fe04 	addi	r2,r2,24568
 1018d3c:	dfc00117 	ldw	ra,4(sp)
 1018d40:	dc000017 	ldw	r16,0(sp)
 1018d44:	dec00204 	addi	sp,sp,8
 1018d48:	f800283a 	ret
 1018d4c:	014040b4 	movhi	r5,258
 1018d50:	2957fe04 	addi	r5,r5,24568
 1018d54:	8009883a 	mov	r4,r16
 1018d58:	1013ee80 	call	1013ee8 <strcmp>
 1018d5c:	103ff526 	beq	r2,zero,1018d34 <__alt_data_end+0xff018d34>
 1018d60:	014040b4 	movhi	r5,258
 1018d64:	2957f104 	addi	r5,r5,24516
 1018d68:	8009883a 	mov	r4,r16
 1018d6c:	1013ee80 	call	1013ee8 <strcmp>
 1018d70:	103ff026 	beq	r2,zero,1018d34 <__alt_data_end+0xff018d34>
 1018d74:	0005883a 	mov	r2,zero
 1018d78:	003ff006 	br	1018d3c <__alt_data_end+0xff018d3c>
 1018d7c:	008040b4 	movhi	r2,258
 1018d80:	1097fe04 	addi	r2,r2,24568
 1018d84:	f800283a 	ret

01018d88 <__locale_charset>:
 1018d88:	008040b4 	movhi	r2,258
 1018d8c:	109bc804 	addi	r2,r2,28448
 1018d90:	f800283a 	ret

01018d94 <__locale_mb_cur_max>:
 1018d94:	008040f4 	movhi	r2,259
 1018d98:	10a17204 	addi	r2,r2,-31288
 1018d9c:	10800017 	ldw	r2,0(r2)
 1018da0:	f800283a 	ret

01018da4 <__locale_msgcharset>:
 1018da4:	008040b4 	movhi	r2,258
 1018da8:	109bc004 	addi	r2,r2,28416
 1018dac:	f800283a 	ret

01018db0 <__locale_cjk_lang>:
 1018db0:	0005883a 	mov	r2,zero
 1018db4:	f800283a 	ret

01018db8 <_localeconv_r>:
 1018db8:	008040b4 	movhi	r2,258
 1018dbc:	109bd004 	addi	r2,r2,28480
 1018dc0:	f800283a 	ret

01018dc4 <setlocale>:
 1018dc4:	008040f4 	movhi	r2,259
 1018dc8:	10a17104 	addi	r2,r2,-31292
 1018dcc:	280d883a 	mov	r6,r5
 1018dd0:	200b883a 	mov	r5,r4
 1018dd4:	11000017 	ldw	r4,0(r2)
 1018dd8:	1018d0c1 	jmpi	1018d0c <_setlocale_r>

01018ddc <localeconv>:
 1018ddc:	008040b4 	movhi	r2,258
 1018de0:	109bd004 	addi	r2,r2,28480
 1018de4:	f800283a 	ret

01018de8 <_malloc_r>:
 1018de8:	defff504 	addi	sp,sp,-44
 1018dec:	dc800315 	stw	r18,12(sp)
 1018df0:	dfc00a15 	stw	ra,40(sp)
 1018df4:	df000915 	stw	fp,36(sp)
 1018df8:	ddc00815 	stw	r23,32(sp)
 1018dfc:	dd800715 	stw	r22,28(sp)
 1018e00:	dd400615 	stw	r21,24(sp)
 1018e04:	dd000515 	stw	r20,20(sp)
 1018e08:	dcc00415 	stw	r19,16(sp)
 1018e0c:	dc400215 	stw	r17,8(sp)
 1018e10:	dc000115 	stw	r16,4(sp)
 1018e14:	288002c4 	addi	r2,r5,11
 1018e18:	00c00584 	movi	r3,22
 1018e1c:	2025883a 	mov	r18,r4
 1018e20:	18807f2e 	bgeu	r3,r2,1019020 <_malloc_r+0x238>
 1018e24:	047ffe04 	movi	r17,-8
 1018e28:	1462703a 	and	r17,r2,r17
 1018e2c:	8800a316 	blt	r17,zero,10190bc <_malloc_r+0x2d4>
 1018e30:	8940a236 	bltu	r17,r5,10190bc <_malloc_r+0x2d4>
 1018e34:	1022b880 	call	1022b88 <__malloc_lock>
 1018e38:	00807dc4 	movi	r2,503
 1018e3c:	1441e92e 	bgeu	r2,r17,10195e4 <_malloc_r+0x7fc>
 1018e40:	8804d27a 	srli	r2,r17,9
 1018e44:	1000a126 	beq	r2,zero,10190cc <_malloc_r+0x2e4>
 1018e48:	00c00104 	movi	r3,4
 1018e4c:	18811e36 	bltu	r3,r2,10192c8 <_malloc_r+0x4e0>
 1018e50:	8804d1ba 	srli	r2,r17,6
 1018e54:	12000e44 	addi	r8,r2,57
 1018e58:	11c00e04 	addi	r7,r2,56
 1018e5c:	4209883a 	add	r4,r8,r8
 1018e60:	04c040b4 	movhi	r19,258
 1018e64:	2109883a 	add	r4,r4,r4
 1018e68:	9cdbde04 	addi	r19,r19,28536
 1018e6c:	2109883a 	add	r4,r4,r4
 1018e70:	9909883a 	add	r4,r19,r4
 1018e74:	24000117 	ldw	r16,4(r4)
 1018e78:	213ffe04 	addi	r4,r4,-8
 1018e7c:	24009726 	beq	r4,r16,10190dc <_malloc_r+0x2f4>
 1018e80:	80800117 	ldw	r2,4(r16)
 1018e84:	01bfff04 	movi	r6,-4
 1018e88:	014003c4 	movi	r5,15
 1018e8c:	1184703a 	and	r2,r2,r6
 1018e90:	1447c83a 	sub	r3,r2,r17
 1018e94:	28c00716 	blt	r5,r3,1018eb4 <_malloc_r+0xcc>
 1018e98:	1800920e 	bge	r3,zero,10190e4 <_malloc_r+0x2fc>
 1018e9c:	84000317 	ldw	r16,12(r16)
 1018ea0:	24008e26 	beq	r4,r16,10190dc <_malloc_r+0x2f4>
 1018ea4:	80800117 	ldw	r2,4(r16)
 1018ea8:	1184703a 	and	r2,r2,r6
 1018eac:	1447c83a 	sub	r3,r2,r17
 1018eb0:	28fff90e 	bge	r5,r3,1018e98 <__alt_data_end+0xff018e98>
 1018eb4:	3809883a 	mov	r4,r7
 1018eb8:	018040b4 	movhi	r6,258
 1018ebc:	9c000417 	ldw	r16,16(r19)
 1018ec0:	319bde04 	addi	r6,r6,28536
 1018ec4:	32000204 	addi	r8,r6,8
 1018ec8:	82013426 	beq	r16,r8,101939c <_malloc_r+0x5b4>
 1018ecc:	80c00117 	ldw	r3,4(r16)
 1018ed0:	00bfff04 	movi	r2,-4
 1018ed4:	188e703a 	and	r7,r3,r2
 1018ed8:	3c45c83a 	sub	r2,r7,r17
 1018edc:	00c003c4 	movi	r3,15
 1018ee0:	18811f16 	blt	r3,r2,1019360 <_malloc_r+0x578>
 1018ee4:	32000515 	stw	r8,20(r6)
 1018ee8:	32000415 	stw	r8,16(r6)
 1018eec:	10007f0e 	bge	r2,zero,10190ec <_malloc_r+0x304>
 1018ef0:	00807fc4 	movi	r2,511
 1018ef4:	11c0fd36 	bltu	r2,r7,10192ec <_malloc_r+0x504>
 1018ef8:	3806d0fa 	srli	r3,r7,3
 1018efc:	01c00044 	movi	r7,1
 1018f00:	30800117 	ldw	r2,4(r6)
 1018f04:	19400044 	addi	r5,r3,1
 1018f08:	294b883a 	add	r5,r5,r5
 1018f0c:	1807d0ba 	srai	r3,r3,2
 1018f10:	294b883a 	add	r5,r5,r5
 1018f14:	294b883a 	add	r5,r5,r5
 1018f18:	298b883a 	add	r5,r5,r6
 1018f1c:	38c6983a 	sll	r3,r7,r3
 1018f20:	29c00017 	ldw	r7,0(r5)
 1018f24:	2a7ffe04 	addi	r9,r5,-8
 1018f28:	1886b03a 	or	r3,r3,r2
 1018f2c:	82400315 	stw	r9,12(r16)
 1018f30:	81c00215 	stw	r7,8(r16)
 1018f34:	30c00115 	stw	r3,4(r6)
 1018f38:	2c000015 	stw	r16,0(r5)
 1018f3c:	3c000315 	stw	r16,12(r7)
 1018f40:	2005d0ba 	srai	r2,r4,2
 1018f44:	01400044 	movi	r5,1
 1018f48:	288a983a 	sll	r5,r5,r2
 1018f4c:	19406f36 	bltu	r3,r5,101910c <_malloc_r+0x324>
 1018f50:	28c4703a 	and	r2,r5,r3
 1018f54:	10000a1e 	bne	r2,zero,1018f80 <_malloc_r+0x198>
 1018f58:	00bfff04 	movi	r2,-4
 1018f5c:	294b883a 	add	r5,r5,r5
 1018f60:	2088703a 	and	r4,r4,r2
 1018f64:	28c4703a 	and	r2,r5,r3
 1018f68:	21000104 	addi	r4,r4,4
 1018f6c:	1000041e 	bne	r2,zero,1018f80 <_malloc_r+0x198>
 1018f70:	294b883a 	add	r5,r5,r5
 1018f74:	28c4703a 	and	r2,r5,r3
 1018f78:	21000104 	addi	r4,r4,4
 1018f7c:	103ffc26 	beq	r2,zero,1018f70 <__alt_data_end+0xff018f70>
 1018f80:	02bfff04 	movi	r10,-4
 1018f84:	024003c4 	movi	r9,15
 1018f88:	21800044 	addi	r6,r4,1
 1018f8c:	318d883a 	add	r6,r6,r6
 1018f90:	318d883a 	add	r6,r6,r6
 1018f94:	318d883a 	add	r6,r6,r6
 1018f98:	998d883a 	add	r6,r19,r6
 1018f9c:	333ffe04 	addi	r12,r6,-8
 1018fa0:	2017883a 	mov	r11,r4
 1018fa4:	31800104 	addi	r6,r6,4
 1018fa8:	34000017 	ldw	r16,0(r6)
 1018fac:	31fffd04 	addi	r7,r6,-12
 1018fb0:	81c0041e 	bne	r16,r7,1018fc4 <_malloc_r+0x1dc>
 1018fb4:	0000fb06 	br	10193a4 <_malloc_r+0x5bc>
 1018fb8:	1801030e 	bge	r3,zero,10193c8 <_malloc_r+0x5e0>
 1018fbc:	84000317 	ldw	r16,12(r16)
 1018fc0:	81c0f826 	beq	r16,r7,10193a4 <_malloc_r+0x5bc>
 1018fc4:	80800117 	ldw	r2,4(r16)
 1018fc8:	1284703a 	and	r2,r2,r10
 1018fcc:	1447c83a 	sub	r3,r2,r17
 1018fd0:	48fff90e 	bge	r9,r3,1018fb8 <__alt_data_end+0xff018fb8>
 1018fd4:	80800317 	ldw	r2,12(r16)
 1018fd8:	81000217 	ldw	r4,8(r16)
 1018fdc:	89400054 	ori	r5,r17,1
 1018fe0:	81400115 	stw	r5,4(r16)
 1018fe4:	20800315 	stw	r2,12(r4)
 1018fe8:	11000215 	stw	r4,8(r2)
 1018fec:	8463883a 	add	r17,r16,r17
 1018ff0:	9c400515 	stw	r17,20(r19)
 1018ff4:	9c400415 	stw	r17,16(r19)
 1018ff8:	18800054 	ori	r2,r3,1
 1018ffc:	88800115 	stw	r2,4(r17)
 1019000:	8a000315 	stw	r8,12(r17)
 1019004:	8a000215 	stw	r8,8(r17)
 1019008:	88e3883a 	add	r17,r17,r3
 101900c:	88c00015 	stw	r3,0(r17)
 1019010:	9009883a 	mov	r4,r18
 1019014:	1022bac0 	call	1022bac <__malloc_unlock>
 1019018:	80800204 	addi	r2,r16,8
 101901c:	00001b06 	br	101908c <_malloc_r+0x2a4>
 1019020:	04400404 	movi	r17,16
 1019024:	89402536 	bltu	r17,r5,10190bc <_malloc_r+0x2d4>
 1019028:	1022b880 	call	1022b88 <__malloc_lock>
 101902c:	00800184 	movi	r2,6
 1019030:	01000084 	movi	r4,2
 1019034:	04c040b4 	movhi	r19,258
 1019038:	1085883a 	add	r2,r2,r2
 101903c:	9cdbde04 	addi	r19,r19,28536
 1019040:	1085883a 	add	r2,r2,r2
 1019044:	9885883a 	add	r2,r19,r2
 1019048:	14000117 	ldw	r16,4(r2)
 101904c:	10fffe04 	addi	r3,r2,-8
 1019050:	80c0d926 	beq	r16,r3,10193b8 <_malloc_r+0x5d0>
 1019054:	80c00117 	ldw	r3,4(r16)
 1019058:	81000317 	ldw	r4,12(r16)
 101905c:	00bfff04 	movi	r2,-4
 1019060:	1884703a 	and	r2,r3,r2
 1019064:	81400217 	ldw	r5,8(r16)
 1019068:	8085883a 	add	r2,r16,r2
 101906c:	10c00117 	ldw	r3,4(r2)
 1019070:	29000315 	stw	r4,12(r5)
 1019074:	21400215 	stw	r5,8(r4)
 1019078:	18c00054 	ori	r3,r3,1
 101907c:	10c00115 	stw	r3,4(r2)
 1019080:	9009883a 	mov	r4,r18
 1019084:	1022bac0 	call	1022bac <__malloc_unlock>
 1019088:	80800204 	addi	r2,r16,8
 101908c:	dfc00a17 	ldw	ra,40(sp)
 1019090:	df000917 	ldw	fp,36(sp)
 1019094:	ddc00817 	ldw	r23,32(sp)
 1019098:	dd800717 	ldw	r22,28(sp)
 101909c:	dd400617 	ldw	r21,24(sp)
 10190a0:	dd000517 	ldw	r20,20(sp)
 10190a4:	dcc00417 	ldw	r19,16(sp)
 10190a8:	dc800317 	ldw	r18,12(sp)
 10190ac:	dc400217 	ldw	r17,8(sp)
 10190b0:	dc000117 	ldw	r16,4(sp)
 10190b4:	dec00b04 	addi	sp,sp,44
 10190b8:	f800283a 	ret
 10190bc:	00800304 	movi	r2,12
 10190c0:	90800015 	stw	r2,0(r18)
 10190c4:	0005883a 	mov	r2,zero
 10190c8:	003ff006 	br	101908c <__alt_data_end+0xff01908c>
 10190cc:	01002004 	movi	r4,128
 10190d0:	02001004 	movi	r8,64
 10190d4:	01c00fc4 	movi	r7,63
 10190d8:	003f6106 	br	1018e60 <__alt_data_end+0xff018e60>
 10190dc:	4009883a 	mov	r4,r8
 10190e0:	003f7506 	br	1018eb8 <__alt_data_end+0xff018eb8>
 10190e4:	81000317 	ldw	r4,12(r16)
 10190e8:	003fde06 	br	1019064 <__alt_data_end+0xff019064>
 10190ec:	81c5883a 	add	r2,r16,r7
 10190f0:	11400117 	ldw	r5,4(r2)
 10190f4:	9009883a 	mov	r4,r18
 10190f8:	29400054 	ori	r5,r5,1
 10190fc:	11400115 	stw	r5,4(r2)
 1019100:	1022bac0 	call	1022bac <__malloc_unlock>
 1019104:	80800204 	addi	r2,r16,8
 1019108:	003fe006 	br	101908c <__alt_data_end+0xff01908c>
 101910c:	9c000217 	ldw	r16,8(r19)
 1019110:	00bfff04 	movi	r2,-4
 1019114:	85800117 	ldw	r22,4(r16)
 1019118:	b0ac703a 	and	r22,r22,r2
 101911c:	b4400336 	bltu	r22,r17,101912c <_malloc_r+0x344>
 1019120:	b445c83a 	sub	r2,r22,r17
 1019124:	00c003c4 	movi	r3,15
 1019128:	18805d16 	blt	r3,r2,10192a0 <_malloc_r+0x4b8>
 101912c:	05c040f4 	movhi	r23,259
 1019130:	008040f4 	movhi	r2,259
 1019134:	10a89504 	addi	r2,r2,-23980
 1019138:	bde17304 	addi	r23,r23,-31284
 101913c:	15400017 	ldw	r21,0(r2)
 1019140:	b8c00017 	ldw	r3,0(r23)
 1019144:	00bfffc4 	movi	r2,-1
 1019148:	858d883a 	add	r6,r16,r22
 101914c:	8d6b883a 	add	r21,r17,r21
 1019150:	1880ea26 	beq	r3,r2,10194fc <_malloc_r+0x714>
 1019154:	ad4403c4 	addi	r21,r21,4111
 1019158:	00bc0004 	movi	r2,-4096
 101915c:	a8aa703a 	and	r21,r21,r2
 1019160:	a80b883a 	mov	r5,r21
 1019164:	9009883a 	mov	r4,r18
 1019168:	d9800015 	stw	r6,0(sp)
 101916c:	101ae080 	call	101ae08 <_sbrk_r>
 1019170:	1029883a 	mov	r20,r2
 1019174:	00bfffc4 	movi	r2,-1
 1019178:	d9800017 	ldw	r6,0(sp)
 101917c:	a080e826 	beq	r20,r2,1019520 <_malloc_r+0x738>
 1019180:	a180a636 	bltu	r20,r6,101941c <_malloc_r+0x634>
 1019184:	070060f4 	movhi	fp,387
 1019188:	e7297004 	addi	fp,fp,-23104
 101918c:	e0800017 	ldw	r2,0(fp)
 1019190:	a887883a 	add	r3,r21,r2
 1019194:	e0c00015 	stw	r3,0(fp)
 1019198:	3500e626 	beq	r6,r20,1019534 <_malloc_r+0x74c>
 101919c:	b9000017 	ldw	r4,0(r23)
 10191a0:	00bfffc4 	movi	r2,-1
 10191a4:	2080ee26 	beq	r4,r2,1019560 <_malloc_r+0x778>
 10191a8:	a185c83a 	sub	r2,r20,r6
 10191ac:	10c5883a 	add	r2,r2,r3
 10191b0:	e0800015 	stw	r2,0(fp)
 10191b4:	a0c001cc 	andi	r3,r20,7
 10191b8:	1800bc26 	beq	r3,zero,10194ac <_malloc_r+0x6c4>
 10191bc:	a0e9c83a 	sub	r20,r20,r3
 10191c0:	00840204 	movi	r2,4104
 10191c4:	a5000204 	addi	r20,r20,8
 10191c8:	10c7c83a 	sub	r3,r2,r3
 10191cc:	a545883a 	add	r2,r20,r21
 10191d0:	1083ffcc 	andi	r2,r2,4095
 10191d4:	18abc83a 	sub	r21,r3,r2
 10191d8:	a80b883a 	mov	r5,r21
 10191dc:	9009883a 	mov	r4,r18
 10191e0:	101ae080 	call	101ae08 <_sbrk_r>
 10191e4:	00ffffc4 	movi	r3,-1
 10191e8:	10c0e126 	beq	r2,r3,1019570 <_malloc_r+0x788>
 10191ec:	1505c83a 	sub	r2,r2,r20
 10191f0:	1545883a 	add	r2,r2,r21
 10191f4:	10800054 	ori	r2,r2,1
 10191f8:	e0c00017 	ldw	r3,0(fp)
 10191fc:	9d000215 	stw	r20,8(r19)
 1019200:	a0800115 	stw	r2,4(r20)
 1019204:	a8c7883a 	add	r3,r21,r3
 1019208:	e0c00015 	stw	r3,0(fp)
 101920c:	84c00e26 	beq	r16,r19,1019248 <_malloc_r+0x460>
 1019210:	018003c4 	movi	r6,15
 1019214:	3580a72e 	bgeu	r6,r22,10194b4 <_malloc_r+0x6cc>
 1019218:	81400117 	ldw	r5,4(r16)
 101921c:	013ffe04 	movi	r4,-8
 1019220:	b0bffd04 	addi	r2,r22,-12
 1019224:	1104703a 	and	r2,r2,r4
 1019228:	2900004c 	andi	r4,r5,1
 101922c:	2088b03a 	or	r4,r4,r2
 1019230:	81000115 	stw	r4,4(r16)
 1019234:	01400144 	movi	r5,5
 1019238:	8089883a 	add	r4,r16,r2
 101923c:	21400115 	stw	r5,4(r4)
 1019240:	21400215 	stw	r5,8(r4)
 1019244:	3080cd36 	bltu	r6,r2,101957c <_malloc_r+0x794>
 1019248:	008040f4 	movhi	r2,259
 101924c:	10a89404 	addi	r2,r2,-23984
 1019250:	11000017 	ldw	r4,0(r2)
 1019254:	20c0012e 	bgeu	r4,r3,101925c <_malloc_r+0x474>
 1019258:	10c00015 	stw	r3,0(r2)
 101925c:	008040f4 	movhi	r2,259
 1019260:	10a89304 	addi	r2,r2,-23988
 1019264:	11000017 	ldw	r4,0(r2)
 1019268:	9c000217 	ldw	r16,8(r19)
 101926c:	20c0012e 	bgeu	r4,r3,1019274 <_malloc_r+0x48c>
 1019270:	10c00015 	stw	r3,0(r2)
 1019274:	80c00117 	ldw	r3,4(r16)
 1019278:	00bfff04 	movi	r2,-4
 101927c:	1886703a 	and	r3,r3,r2
 1019280:	1c45c83a 	sub	r2,r3,r17
 1019284:	1c400236 	bltu	r3,r17,1019290 <_malloc_r+0x4a8>
 1019288:	00c003c4 	movi	r3,15
 101928c:	18800416 	blt	r3,r2,10192a0 <_malloc_r+0x4b8>
 1019290:	9009883a 	mov	r4,r18
 1019294:	1022bac0 	call	1022bac <__malloc_unlock>
 1019298:	0005883a 	mov	r2,zero
 101929c:	003f7b06 	br	101908c <__alt_data_end+0xff01908c>
 10192a0:	88c00054 	ori	r3,r17,1
 10192a4:	80c00115 	stw	r3,4(r16)
 10192a8:	8463883a 	add	r17,r16,r17
 10192ac:	10800054 	ori	r2,r2,1
 10192b0:	9c400215 	stw	r17,8(r19)
 10192b4:	88800115 	stw	r2,4(r17)
 10192b8:	9009883a 	mov	r4,r18
 10192bc:	1022bac0 	call	1022bac <__malloc_unlock>
 10192c0:	80800204 	addi	r2,r16,8
 10192c4:	003f7106 	br	101908c <__alt_data_end+0xff01908c>
 10192c8:	00c00504 	movi	r3,20
 10192cc:	18804a2e 	bgeu	r3,r2,10193f8 <_malloc_r+0x610>
 10192d0:	00c01504 	movi	r3,84
 10192d4:	18806e36 	bltu	r3,r2,1019490 <_malloc_r+0x6a8>
 10192d8:	8804d33a 	srli	r2,r17,12
 10192dc:	12001bc4 	addi	r8,r2,111
 10192e0:	11c01b84 	addi	r7,r2,110
 10192e4:	4209883a 	add	r4,r8,r8
 10192e8:	003edd06 	br	1018e60 <__alt_data_end+0xff018e60>
 10192ec:	3804d27a 	srli	r2,r7,9
 10192f0:	00c00104 	movi	r3,4
 10192f4:	1880442e 	bgeu	r3,r2,1019408 <_malloc_r+0x620>
 10192f8:	00c00504 	movi	r3,20
 10192fc:	18808136 	bltu	r3,r2,1019504 <_malloc_r+0x71c>
 1019300:	11401704 	addi	r5,r2,92
 1019304:	10c016c4 	addi	r3,r2,91
 1019308:	294b883a 	add	r5,r5,r5
 101930c:	294b883a 	add	r5,r5,r5
 1019310:	294b883a 	add	r5,r5,r5
 1019314:	994b883a 	add	r5,r19,r5
 1019318:	28800017 	ldw	r2,0(r5)
 101931c:	018040b4 	movhi	r6,258
 1019320:	297ffe04 	addi	r5,r5,-8
 1019324:	319bde04 	addi	r6,r6,28536
 1019328:	28806526 	beq	r5,r2,10194c0 <_malloc_r+0x6d8>
 101932c:	01bfff04 	movi	r6,-4
 1019330:	10c00117 	ldw	r3,4(r2)
 1019334:	1986703a 	and	r3,r3,r6
 1019338:	38c0022e 	bgeu	r7,r3,1019344 <_malloc_r+0x55c>
 101933c:	10800217 	ldw	r2,8(r2)
 1019340:	28bffb1e 	bne	r5,r2,1019330 <__alt_data_end+0xff019330>
 1019344:	11400317 	ldw	r5,12(r2)
 1019348:	98c00117 	ldw	r3,4(r19)
 101934c:	81400315 	stw	r5,12(r16)
 1019350:	80800215 	stw	r2,8(r16)
 1019354:	2c000215 	stw	r16,8(r5)
 1019358:	14000315 	stw	r16,12(r2)
 101935c:	003ef806 	br	1018f40 <__alt_data_end+0xff018f40>
 1019360:	88c00054 	ori	r3,r17,1
 1019364:	80c00115 	stw	r3,4(r16)
 1019368:	8463883a 	add	r17,r16,r17
 101936c:	34400515 	stw	r17,20(r6)
 1019370:	34400415 	stw	r17,16(r6)
 1019374:	10c00054 	ori	r3,r2,1
 1019378:	8a000315 	stw	r8,12(r17)
 101937c:	8a000215 	stw	r8,8(r17)
 1019380:	88c00115 	stw	r3,4(r17)
 1019384:	88a3883a 	add	r17,r17,r2
 1019388:	88800015 	stw	r2,0(r17)
 101938c:	9009883a 	mov	r4,r18
 1019390:	1022bac0 	call	1022bac <__malloc_unlock>
 1019394:	80800204 	addi	r2,r16,8
 1019398:	003f3c06 	br	101908c <__alt_data_end+0xff01908c>
 101939c:	30c00117 	ldw	r3,4(r6)
 10193a0:	003ee706 	br	1018f40 <__alt_data_end+0xff018f40>
 10193a4:	5ac00044 	addi	r11,r11,1
 10193a8:	588000cc 	andi	r2,r11,3
 10193ac:	31800204 	addi	r6,r6,8
 10193b0:	103efd1e 	bne	r2,zero,1018fa8 <__alt_data_end+0xff018fa8>
 10193b4:	00002406 	br	1019448 <_malloc_r+0x660>
 10193b8:	14000317 	ldw	r16,12(r2)
 10193bc:	143f251e 	bne	r2,r16,1019054 <__alt_data_end+0xff019054>
 10193c0:	21000084 	addi	r4,r4,2
 10193c4:	003ebc06 	br	1018eb8 <__alt_data_end+0xff018eb8>
 10193c8:	8085883a 	add	r2,r16,r2
 10193cc:	10c00117 	ldw	r3,4(r2)
 10193d0:	81000317 	ldw	r4,12(r16)
 10193d4:	81400217 	ldw	r5,8(r16)
 10193d8:	18c00054 	ori	r3,r3,1
 10193dc:	10c00115 	stw	r3,4(r2)
 10193e0:	29000315 	stw	r4,12(r5)
 10193e4:	21400215 	stw	r5,8(r4)
 10193e8:	9009883a 	mov	r4,r18
 10193ec:	1022bac0 	call	1022bac <__malloc_unlock>
 10193f0:	80800204 	addi	r2,r16,8
 10193f4:	003f2506 	br	101908c <__alt_data_end+0xff01908c>
 10193f8:	12001704 	addi	r8,r2,92
 10193fc:	11c016c4 	addi	r7,r2,91
 1019400:	4209883a 	add	r4,r8,r8
 1019404:	003e9606 	br	1018e60 <__alt_data_end+0xff018e60>
 1019408:	3804d1ba 	srli	r2,r7,6
 101940c:	11400e44 	addi	r5,r2,57
 1019410:	10c00e04 	addi	r3,r2,56
 1019414:	294b883a 	add	r5,r5,r5
 1019418:	003fbc06 	br	101930c <__alt_data_end+0xff01930c>
 101941c:	84ff5926 	beq	r16,r19,1019184 <__alt_data_end+0xff019184>
 1019420:	008040b4 	movhi	r2,258
 1019424:	109bde04 	addi	r2,r2,28536
 1019428:	14000217 	ldw	r16,8(r2)
 101942c:	00bfff04 	movi	r2,-4
 1019430:	80c00117 	ldw	r3,4(r16)
 1019434:	1886703a 	and	r3,r3,r2
 1019438:	003f9106 	br	1019280 <__alt_data_end+0xff019280>
 101943c:	60800217 	ldw	r2,8(r12)
 1019440:	213fffc4 	addi	r4,r4,-1
 1019444:	1300651e 	bne	r2,r12,10195dc <_malloc_r+0x7f4>
 1019448:	208000cc 	andi	r2,r4,3
 101944c:	633ffe04 	addi	r12,r12,-8
 1019450:	103ffa1e 	bne	r2,zero,101943c <__alt_data_end+0xff01943c>
 1019454:	98800117 	ldw	r2,4(r19)
 1019458:	0146303a 	nor	r3,zero,r5
 101945c:	1884703a 	and	r2,r3,r2
 1019460:	98800115 	stw	r2,4(r19)
 1019464:	294b883a 	add	r5,r5,r5
 1019468:	117f2836 	bltu	r2,r5,101910c <__alt_data_end+0xff01910c>
 101946c:	283f2726 	beq	r5,zero,101910c <__alt_data_end+0xff01910c>
 1019470:	2886703a 	and	r3,r5,r2
 1019474:	5809883a 	mov	r4,r11
 1019478:	183ec31e 	bne	r3,zero,1018f88 <__alt_data_end+0xff018f88>
 101947c:	294b883a 	add	r5,r5,r5
 1019480:	2886703a 	and	r3,r5,r2
 1019484:	21000104 	addi	r4,r4,4
 1019488:	183ffc26 	beq	r3,zero,101947c <__alt_data_end+0xff01947c>
 101948c:	003ebe06 	br	1018f88 <__alt_data_end+0xff018f88>
 1019490:	00c05504 	movi	r3,340
 1019494:	18801236 	bltu	r3,r2,10194e0 <_malloc_r+0x6f8>
 1019498:	8804d3fa 	srli	r2,r17,15
 101949c:	12001e04 	addi	r8,r2,120
 10194a0:	11c01dc4 	addi	r7,r2,119
 10194a4:	4209883a 	add	r4,r8,r8
 10194a8:	003e6d06 	br	1018e60 <__alt_data_end+0xff018e60>
 10194ac:	00c40004 	movi	r3,4096
 10194b0:	003f4606 	br	10191cc <__alt_data_end+0xff0191cc>
 10194b4:	00800044 	movi	r2,1
 10194b8:	a0800115 	stw	r2,4(r20)
 10194bc:	003f7406 	br	1019290 <__alt_data_end+0xff019290>
 10194c0:	1805d0ba 	srai	r2,r3,2
 10194c4:	01c00044 	movi	r7,1
 10194c8:	30c00117 	ldw	r3,4(r6)
 10194cc:	388e983a 	sll	r7,r7,r2
 10194d0:	2805883a 	mov	r2,r5
 10194d4:	38c6b03a 	or	r3,r7,r3
 10194d8:	30c00115 	stw	r3,4(r6)
 10194dc:	003f9b06 	br	101934c <__alt_data_end+0xff01934c>
 10194e0:	00c15504 	movi	r3,1364
 10194e4:	18801a36 	bltu	r3,r2,1019550 <_malloc_r+0x768>
 10194e8:	8804d4ba 	srli	r2,r17,18
 10194ec:	12001f44 	addi	r8,r2,125
 10194f0:	11c01f04 	addi	r7,r2,124
 10194f4:	4209883a 	add	r4,r8,r8
 10194f8:	003e5906 	br	1018e60 <__alt_data_end+0xff018e60>
 10194fc:	ad400404 	addi	r21,r21,16
 1019500:	003f1706 	br	1019160 <__alt_data_end+0xff019160>
 1019504:	00c01504 	movi	r3,84
 1019508:	18802336 	bltu	r3,r2,1019598 <_malloc_r+0x7b0>
 101950c:	3804d33a 	srli	r2,r7,12
 1019510:	11401bc4 	addi	r5,r2,111
 1019514:	10c01b84 	addi	r3,r2,110
 1019518:	294b883a 	add	r5,r5,r5
 101951c:	003f7b06 	br	101930c <__alt_data_end+0xff01930c>
 1019520:	9c000217 	ldw	r16,8(r19)
 1019524:	00bfff04 	movi	r2,-4
 1019528:	80c00117 	ldw	r3,4(r16)
 101952c:	1886703a 	and	r3,r3,r2
 1019530:	003f5306 	br	1019280 <__alt_data_end+0xff019280>
 1019534:	3083ffcc 	andi	r2,r6,4095
 1019538:	103f181e 	bne	r2,zero,101919c <__alt_data_end+0xff01919c>
 101953c:	99000217 	ldw	r4,8(r19)
 1019540:	b545883a 	add	r2,r22,r21
 1019544:	10800054 	ori	r2,r2,1
 1019548:	20800115 	stw	r2,4(r4)
 101954c:	003f3e06 	br	1019248 <__alt_data_end+0xff019248>
 1019550:	01003f84 	movi	r4,254
 1019554:	02001fc4 	movi	r8,127
 1019558:	01c01f84 	movi	r7,126
 101955c:	003e4006 	br	1018e60 <__alt_data_end+0xff018e60>
 1019560:	008040f4 	movhi	r2,259
 1019564:	10a17304 	addi	r2,r2,-31284
 1019568:	15000015 	stw	r20,0(r2)
 101956c:	003f1106 	br	10191b4 <__alt_data_end+0xff0191b4>
 1019570:	00800044 	movi	r2,1
 1019574:	002b883a 	mov	r21,zero
 1019578:	003f1f06 	br	10191f8 <__alt_data_end+0xff0191f8>
 101957c:	81400204 	addi	r5,r16,8
 1019580:	9009883a 	mov	r4,r18
 1019584:	101e6940 	call	101e694 <_free_r>
 1019588:	008060f4 	movhi	r2,387
 101958c:	10a97004 	addi	r2,r2,-23104
 1019590:	10c00017 	ldw	r3,0(r2)
 1019594:	003f2c06 	br	1019248 <__alt_data_end+0xff019248>
 1019598:	00c05504 	movi	r3,340
 101959c:	18800536 	bltu	r3,r2,10195b4 <_malloc_r+0x7cc>
 10195a0:	3804d3fa 	srli	r2,r7,15
 10195a4:	11401e04 	addi	r5,r2,120
 10195a8:	10c01dc4 	addi	r3,r2,119
 10195ac:	294b883a 	add	r5,r5,r5
 10195b0:	003f5606 	br	101930c <__alt_data_end+0xff01930c>
 10195b4:	00c15504 	movi	r3,1364
 10195b8:	18800536 	bltu	r3,r2,10195d0 <_malloc_r+0x7e8>
 10195bc:	3804d4ba 	srli	r2,r7,18
 10195c0:	11401f44 	addi	r5,r2,125
 10195c4:	10c01f04 	addi	r3,r2,124
 10195c8:	294b883a 	add	r5,r5,r5
 10195cc:	003f4f06 	br	101930c <__alt_data_end+0xff01930c>
 10195d0:	01403f84 	movi	r5,254
 10195d4:	00c01f84 	movi	r3,126
 10195d8:	003f4c06 	br	101930c <__alt_data_end+0xff01930c>
 10195dc:	98800117 	ldw	r2,4(r19)
 10195e0:	003fa006 	br	1019464 <__alt_data_end+0xff019464>
 10195e4:	8808d0fa 	srli	r4,r17,3
 10195e8:	20800044 	addi	r2,r4,1
 10195ec:	1085883a 	add	r2,r2,r2
 10195f0:	003e9006 	br	1019034 <__alt_data_end+0xff019034>

010195f4 <memchr>:
 10195f4:	208000cc 	andi	r2,r4,3
 10195f8:	280f883a 	mov	r7,r5
 10195fc:	10003426 	beq	r2,zero,10196d0 <memchr+0xdc>
 1019600:	30bfffc4 	addi	r2,r6,-1
 1019604:	30001a26 	beq	r6,zero,1019670 <memchr+0x7c>
 1019608:	20c00003 	ldbu	r3,0(r4)
 101960c:	29803fcc 	andi	r6,r5,255
 1019610:	30c0051e 	bne	r6,r3,1019628 <memchr+0x34>
 1019614:	00001806 	br	1019678 <memchr+0x84>
 1019618:	10001526 	beq	r2,zero,1019670 <memchr+0x7c>
 101961c:	20c00003 	ldbu	r3,0(r4)
 1019620:	10bfffc4 	addi	r2,r2,-1
 1019624:	30c01426 	beq	r6,r3,1019678 <memchr+0x84>
 1019628:	21000044 	addi	r4,r4,1
 101962c:	20c000cc 	andi	r3,r4,3
 1019630:	183ff91e 	bne	r3,zero,1019618 <__alt_data_end+0xff019618>
 1019634:	020000c4 	movi	r8,3
 1019638:	40801136 	bltu	r8,r2,1019680 <memchr+0x8c>
 101963c:	10000c26 	beq	r2,zero,1019670 <memchr+0x7c>
 1019640:	20c00003 	ldbu	r3,0(r4)
 1019644:	29403fcc 	andi	r5,r5,255
 1019648:	28c00b26 	beq	r5,r3,1019678 <memchr+0x84>
 101964c:	20c00044 	addi	r3,r4,1
 1019650:	39803fcc 	andi	r6,r7,255
 1019654:	2089883a 	add	r4,r4,r2
 1019658:	00000306 	br	1019668 <memchr+0x74>
 101965c:	18c00044 	addi	r3,r3,1
 1019660:	197fffc3 	ldbu	r5,-1(r3)
 1019664:	31400526 	beq	r6,r5,101967c <memchr+0x88>
 1019668:	1805883a 	mov	r2,r3
 101966c:	20fffb1e 	bne	r4,r3,101965c <__alt_data_end+0xff01965c>
 1019670:	0005883a 	mov	r2,zero
 1019674:	f800283a 	ret
 1019678:	2005883a 	mov	r2,r4
 101967c:	f800283a 	ret
 1019680:	28c03fcc 	andi	r3,r5,255
 1019684:	1812923a 	slli	r9,r3,8
 1019688:	02ffbff4 	movhi	r11,65279
 101968c:	02a02074 	movhi	r10,32897
 1019690:	48d2b03a 	or	r9,r9,r3
 1019694:	4806943a 	slli	r3,r9,16
 1019698:	5affbfc4 	addi	r11,r11,-257
 101969c:	52a02004 	addi	r10,r10,-32640
 10196a0:	48d2b03a 	or	r9,r9,r3
 10196a4:	20c00017 	ldw	r3,0(r4)
 10196a8:	48c6f03a 	xor	r3,r9,r3
 10196ac:	1acd883a 	add	r6,r3,r11
 10196b0:	00c6303a 	nor	r3,zero,r3
 10196b4:	30c6703a 	and	r3,r6,r3
 10196b8:	1a86703a 	and	r3,r3,r10
 10196bc:	183fe01e 	bne	r3,zero,1019640 <__alt_data_end+0xff019640>
 10196c0:	10bfff04 	addi	r2,r2,-4
 10196c4:	21000104 	addi	r4,r4,4
 10196c8:	40bff636 	bltu	r8,r2,10196a4 <__alt_data_end+0xff0196a4>
 10196cc:	003fdb06 	br	101963c <__alt_data_end+0xff01963c>
 10196d0:	3005883a 	mov	r2,r6
 10196d4:	003fd706 	br	1019634 <__alt_data_end+0xff019634>

010196d8 <memmove>:
 10196d8:	2005883a 	mov	r2,r4
 10196dc:	29000b2e 	bgeu	r5,r4,101970c <memmove+0x34>
 10196e0:	298f883a 	add	r7,r5,r6
 10196e4:	21c0092e 	bgeu	r4,r7,101970c <memmove+0x34>
 10196e8:	2187883a 	add	r3,r4,r6
 10196ec:	198bc83a 	sub	r5,r3,r6
 10196f0:	30004826 	beq	r6,zero,1019814 <memmove+0x13c>
 10196f4:	39ffffc4 	addi	r7,r7,-1
 10196f8:	39000003 	ldbu	r4,0(r7)
 10196fc:	18ffffc4 	addi	r3,r3,-1
 1019700:	19000005 	stb	r4,0(r3)
 1019704:	28fffb1e 	bne	r5,r3,10196f4 <__alt_data_end+0xff0196f4>
 1019708:	f800283a 	ret
 101970c:	00c003c4 	movi	r3,15
 1019710:	1980412e 	bgeu	r3,r6,1019818 <memmove+0x140>
 1019714:	2886b03a 	or	r3,r5,r2
 1019718:	18c000cc 	andi	r3,r3,3
 101971c:	1800401e 	bne	r3,zero,1019820 <memmove+0x148>
 1019720:	33fffc04 	addi	r15,r6,-16
 1019724:	781ed13a 	srli	r15,r15,4
 1019728:	28c00104 	addi	r3,r5,4
 101972c:	13400104 	addi	r13,r2,4
 1019730:	781c913a 	slli	r14,r15,4
 1019734:	2b000204 	addi	r12,r5,8
 1019738:	12c00204 	addi	r11,r2,8
 101973c:	73800504 	addi	r14,r14,20
 1019740:	2a800304 	addi	r10,r5,12
 1019744:	12400304 	addi	r9,r2,12
 1019748:	2b9d883a 	add	r14,r5,r14
 101974c:	2811883a 	mov	r8,r5
 1019750:	100f883a 	mov	r7,r2
 1019754:	41000017 	ldw	r4,0(r8)
 1019758:	39c00404 	addi	r7,r7,16
 101975c:	18c00404 	addi	r3,r3,16
 1019760:	393ffc15 	stw	r4,-16(r7)
 1019764:	193ffc17 	ldw	r4,-16(r3)
 1019768:	6b400404 	addi	r13,r13,16
 101976c:	5ac00404 	addi	r11,r11,16
 1019770:	693ffc15 	stw	r4,-16(r13)
 1019774:	61000017 	ldw	r4,0(r12)
 1019778:	4a400404 	addi	r9,r9,16
 101977c:	42000404 	addi	r8,r8,16
 1019780:	593ffc15 	stw	r4,-16(r11)
 1019784:	51000017 	ldw	r4,0(r10)
 1019788:	63000404 	addi	r12,r12,16
 101978c:	52800404 	addi	r10,r10,16
 1019790:	493ffc15 	stw	r4,-16(r9)
 1019794:	1bbfef1e 	bne	r3,r14,1019754 <__alt_data_end+0xff019754>
 1019798:	79000044 	addi	r4,r15,1
 101979c:	2008913a 	slli	r4,r4,4
 10197a0:	328003cc 	andi	r10,r6,15
 10197a4:	02c000c4 	movi	r11,3
 10197a8:	1107883a 	add	r3,r2,r4
 10197ac:	290b883a 	add	r5,r5,r4
 10197b0:	5a801e2e 	bgeu	r11,r10,101982c <memmove+0x154>
 10197b4:	1813883a 	mov	r9,r3
 10197b8:	2811883a 	mov	r8,r5
 10197bc:	500f883a 	mov	r7,r10
 10197c0:	41000017 	ldw	r4,0(r8)
 10197c4:	4a400104 	addi	r9,r9,4
 10197c8:	39ffff04 	addi	r7,r7,-4
 10197cc:	493fff15 	stw	r4,-4(r9)
 10197d0:	42000104 	addi	r8,r8,4
 10197d4:	59fffa36 	bltu	r11,r7,10197c0 <__alt_data_end+0xff0197c0>
 10197d8:	513fff04 	addi	r4,r10,-4
 10197dc:	2008d0ba 	srli	r4,r4,2
 10197e0:	318000cc 	andi	r6,r6,3
 10197e4:	21000044 	addi	r4,r4,1
 10197e8:	2109883a 	add	r4,r4,r4
 10197ec:	2109883a 	add	r4,r4,r4
 10197f0:	1907883a 	add	r3,r3,r4
 10197f4:	290b883a 	add	r5,r5,r4
 10197f8:	30000b26 	beq	r6,zero,1019828 <memmove+0x150>
 10197fc:	198d883a 	add	r6,r3,r6
 1019800:	29c00003 	ldbu	r7,0(r5)
 1019804:	18c00044 	addi	r3,r3,1
 1019808:	29400044 	addi	r5,r5,1
 101980c:	19ffffc5 	stb	r7,-1(r3)
 1019810:	19bffb1e 	bne	r3,r6,1019800 <__alt_data_end+0xff019800>
 1019814:	f800283a 	ret
 1019818:	1007883a 	mov	r3,r2
 101981c:	003ff606 	br	10197f8 <__alt_data_end+0xff0197f8>
 1019820:	1007883a 	mov	r3,r2
 1019824:	003ff506 	br	10197fc <__alt_data_end+0xff0197fc>
 1019828:	f800283a 	ret
 101982c:	500d883a 	mov	r6,r10
 1019830:	003ff106 	br	10197f8 <__alt_data_end+0xff0197f8>

01019834 <_Balloc>:
 1019834:	20801317 	ldw	r2,76(r4)
 1019838:	defffc04 	addi	sp,sp,-16
 101983c:	dc400115 	stw	r17,4(sp)
 1019840:	dc000015 	stw	r16,0(sp)
 1019844:	dfc00315 	stw	ra,12(sp)
 1019848:	dc800215 	stw	r18,8(sp)
 101984c:	2023883a 	mov	r17,r4
 1019850:	2821883a 	mov	r16,r5
 1019854:	10000f26 	beq	r2,zero,1019894 <_Balloc+0x60>
 1019858:	8407883a 	add	r3,r16,r16
 101985c:	18c7883a 	add	r3,r3,r3
 1019860:	10c7883a 	add	r3,r2,r3
 1019864:	18800017 	ldw	r2,0(r3)
 1019868:	10001126 	beq	r2,zero,10198b0 <_Balloc+0x7c>
 101986c:	11000017 	ldw	r4,0(r2)
 1019870:	19000015 	stw	r4,0(r3)
 1019874:	10000415 	stw	zero,16(r2)
 1019878:	10000315 	stw	zero,12(r2)
 101987c:	dfc00317 	ldw	ra,12(sp)
 1019880:	dc800217 	ldw	r18,8(sp)
 1019884:	dc400117 	ldw	r17,4(sp)
 1019888:	dc000017 	ldw	r16,0(sp)
 101988c:	dec00404 	addi	sp,sp,16
 1019890:	f800283a 	ret
 1019894:	01800844 	movi	r6,33
 1019898:	01400104 	movi	r5,4
 101989c:	101def80 	call	101def8 <_calloc_r>
 10198a0:	88801315 	stw	r2,76(r17)
 10198a4:	103fec1e 	bne	r2,zero,1019858 <__alt_data_end+0xff019858>
 10198a8:	0005883a 	mov	r2,zero
 10198ac:	003ff306 	br	101987c <__alt_data_end+0xff01987c>
 10198b0:	01400044 	movi	r5,1
 10198b4:	2c24983a 	sll	r18,r5,r16
 10198b8:	8809883a 	mov	r4,r17
 10198bc:	91800144 	addi	r6,r18,5
 10198c0:	318d883a 	add	r6,r6,r6
 10198c4:	318d883a 	add	r6,r6,r6
 10198c8:	101def80 	call	101def8 <_calloc_r>
 10198cc:	103ff626 	beq	r2,zero,10198a8 <__alt_data_end+0xff0198a8>
 10198d0:	14000115 	stw	r16,4(r2)
 10198d4:	14800215 	stw	r18,8(r2)
 10198d8:	003fe606 	br	1019874 <__alt_data_end+0xff019874>

010198dc <_Bfree>:
 10198dc:	28000826 	beq	r5,zero,1019900 <_Bfree+0x24>
 10198e0:	28c00117 	ldw	r3,4(r5)
 10198e4:	20801317 	ldw	r2,76(r4)
 10198e8:	18c7883a 	add	r3,r3,r3
 10198ec:	18c7883a 	add	r3,r3,r3
 10198f0:	10c5883a 	add	r2,r2,r3
 10198f4:	10c00017 	ldw	r3,0(r2)
 10198f8:	28c00015 	stw	r3,0(r5)
 10198fc:	11400015 	stw	r5,0(r2)
 1019900:	f800283a 	ret

01019904 <__multadd>:
 1019904:	defffa04 	addi	sp,sp,-24
 1019908:	dc800315 	stw	r18,12(sp)
 101990c:	dc400215 	stw	r17,8(sp)
 1019910:	dc000115 	stw	r16,4(sp)
 1019914:	2823883a 	mov	r17,r5
 1019918:	2c000417 	ldw	r16,16(r5)
 101991c:	dfc00515 	stw	ra,20(sp)
 1019920:	dcc00415 	stw	r19,16(sp)
 1019924:	2025883a 	mov	r18,r4
 1019928:	29400504 	addi	r5,r5,20
 101992c:	0011883a 	mov	r8,zero
 1019930:	28c00017 	ldw	r3,0(r5)
 1019934:	29400104 	addi	r5,r5,4
 1019938:	42000044 	addi	r8,r8,1
 101993c:	18bfffcc 	andi	r2,r3,65535
 1019940:	1185383a 	mul	r2,r2,r6
 1019944:	1806d43a 	srli	r3,r3,16
 1019948:	11cf883a 	add	r7,r2,r7
 101994c:	3808d43a 	srli	r4,r7,16
 1019950:	1987383a 	mul	r3,r3,r6
 1019954:	38bfffcc 	andi	r2,r7,65535
 1019958:	1907883a 	add	r3,r3,r4
 101995c:	1808943a 	slli	r4,r3,16
 1019960:	180ed43a 	srli	r7,r3,16
 1019964:	2085883a 	add	r2,r4,r2
 1019968:	28bfff15 	stw	r2,-4(r5)
 101996c:	443ff016 	blt	r8,r16,1019930 <__alt_data_end+0xff019930>
 1019970:	38000926 	beq	r7,zero,1019998 <__multadd+0x94>
 1019974:	88800217 	ldw	r2,8(r17)
 1019978:	80800f0e 	bge	r16,r2,10199b8 <__multadd+0xb4>
 101997c:	80800144 	addi	r2,r16,5
 1019980:	1085883a 	add	r2,r2,r2
 1019984:	1085883a 	add	r2,r2,r2
 1019988:	8885883a 	add	r2,r17,r2
 101998c:	11c00015 	stw	r7,0(r2)
 1019990:	84000044 	addi	r16,r16,1
 1019994:	8c000415 	stw	r16,16(r17)
 1019998:	8805883a 	mov	r2,r17
 101999c:	dfc00517 	ldw	ra,20(sp)
 10199a0:	dcc00417 	ldw	r19,16(sp)
 10199a4:	dc800317 	ldw	r18,12(sp)
 10199a8:	dc400217 	ldw	r17,8(sp)
 10199ac:	dc000117 	ldw	r16,4(sp)
 10199b0:	dec00604 	addi	sp,sp,24
 10199b4:	f800283a 	ret
 10199b8:	89400117 	ldw	r5,4(r17)
 10199bc:	9009883a 	mov	r4,r18
 10199c0:	d9c00015 	stw	r7,0(sp)
 10199c4:	29400044 	addi	r5,r5,1
 10199c8:	10198340 	call	1019834 <_Balloc>
 10199cc:	89800417 	ldw	r6,16(r17)
 10199d0:	89400304 	addi	r5,r17,12
 10199d4:	11000304 	addi	r4,r2,12
 10199d8:	31800084 	addi	r6,r6,2
 10199dc:	318d883a 	add	r6,r6,r6
 10199e0:	318d883a 	add	r6,r6,r6
 10199e4:	1027883a 	mov	r19,r2
 10199e8:	10139e80 	call	10139e8 <memcpy>
 10199ec:	d9c00017 	ldw	r7,0(sp)
 10199f0:	88000a26 	beq	r17,zero,1019a1c <__multadd+0x118>
 10199f4:	88c00117 	ldw	r3,4(r17)
 10199f8:	90801317 	ldw	r2,76(r18)
 10199fc:	18c7883a 	add	r3,r3,r3
 1019a00:	18c7883a 	add	r3,r3,r3
 1019a04:	10c5883a 	add	r2,r2,r3
 1019a08:	10c00017 	ldw	r3,0(r2)
 1019a0c:	88c00015 	stw	r3,0(r17)
 1019a10:	14400015 	stw	r17,0(r2)
 1019a14:	9823883a 	mov	r17,r19
 1019a18:	003fd806 	br	101997c <__alt_data_end+0xff01997c>
 1019a1c:	9823883a 	mov	r17,r19
 1019a20:	003fd606 	br	101997c <__alt_data_end+0xff01997c>

01019a24 <__s2b>:
 1019a24:	defff904 	addi	sp,sp,-28
 1019a28:	dc400115 	stw	r17,4(sp)
 1019a2c:	dc000015 	stw	r16,0(sp)
 1019a30:	2023883a 	mov	r17,r4
 1019a34:	2821883a 	mov	r16,r5
 1019a38:	39000204 	addi	r4,r7,8
 1019a3c:	01400244 	movi	r5,9
 1019a40:	dcc00315 	stw	r19,12(sp)
 1019a44:	dc800215 	stw	r18,8(sp)
 1019a48:	dfc00615 	stw	ra,24(sp)
 1019a4c:	dd400515 	stw	r21,20(sp)
 1019a50:	dd000415 	stw	r20,16(sp)
 1019a54:	3825883a 	mov	r18,r7
 1019a58:	3027883a 	mov	r19,r6
 1019a5c:	101fac00 	call	101fac0 <__divsi3>
 1019a60:	00c00044 	movi	r3,1
 1019a64:	000b883a 	mov	r5,zero
 1019a68:	1880030e 	bge	r3,r2,1019a78 <__s2b+0x54>
 1019a6c:	18c7883a 	add	r3,r3,r3
 1019a70:	29400044 	addi	r5,r5,1
 1019a74:	18bffd16 	blt	r3,r2,1019a6c <__alt_data_end+0xff019a6c>
 1019a78:	8809883a 	mov	r4,r17
 1019a7c:	10198340 	call	1019834 <_Balloc>
 1019a80:	d8c00717 	ldw	r3,28(sp)
 1019a84:	10c00515 	stw	r3,20(r2)
 1019a88:	00c00044 	movi	r3,1
 1019a8c:	10c00415 	stw	r3,16(r2)
 1019a90:	00c00244 	movi	r3,9
 1019a94:	1cc0210e 	bge	r3,r19,1019b1c <__s2b+0xf8>
 1019a98:	80eb883a 	add	r21,r16,r3
 1019a9c:	a829883a 	mov	r20,r21
 1019aa0:	84e1883a 	add	r16,r16,r19
 1019aa4:	a1c00007 	ldb	r7,0(r20)
 1019aa8:	01800284 	movi	r6,10
 1019aac:	a5000044 	addi	r20,r20,1
 1019ab0:	100b883a 	mov	r5,r2
 1019ab4:	39fff404 	addi	r7,r7,-48
 1019ab8:	8809883a 	mov	r4,r17
 1019abc:	10199040 	call	1019904 <__multadd>
 1019ac0:	a43ff81e 	bne	r20,r16,1019aa4 <__alt_data_end+0xff019aa4>
 1019ac4:	ace1883a 	add	r16,r21,r19
 1019ac8:	843ffe04 	addi	r16,r16,-8
 1019acc:	9c800a0e 	bge	r19,r18,1019af8 <__s2b+0xd4>
 1019ad0:	94e5c83a 	sub	r18,r18,r19
 1019ad4:	84a5883a 	add	r18,r16,r18
 1019ad8:	81c00007 	ldb	r7,0(r16)
 1019adc:	01800284 	movi	r6,10
 1019ae0:	84000044 	addi	r16,r16,1
 1019ae4:	100b883a 	mov	r5,r2
 1019ae8:	39fff404 	addi	r7,r7,-48
 1019aec:	8809883a 	mov	r4,r17
 1019af0:	10199040 	call	1019904 <__multadd>
 1019af4:	84bff81e 	bne	r16,r18,1019ad8 <__alt_data_end+0xff019ad8>
 1019af8:	dfc00617 	ldw	ra,24(sp)
 1019afc:	dd400517 	ldw	r21,20(sp)
 1019b00:	dd000417 	ldw	r20,16(sp)
 1019b04:	dcc00317 	ldw	r19,12(sp)
 1019b08:	dc800217 	ldw	r18,8(sp)
 1019b0c:	dc400117 	ldw	r17,4(sp)
 1019b10:	dc000017 	ldw	r16,0(sp)
 1019b14:	dec00704 	addi	sp,sp,28
 1019b18:	f800283a 	ret
 1019b1c:	84000284 	addi	r16,r16,10
 1019b20:	1827883a 	mov	r19,r3
 1019b24:	003fe906 	br	1019acc <__alt_data_end+0xff019acc>

01019b28 <__hi0bits>:
 1019b28:	20bfffec 	andhi	r2,r4,65535
 1019b2c:	1000141e 	bne	r2,zero,1019b80 <__hi0bits+0x58>
 1019b30:	2008943a 	slli	r4,r4,16
 1019b34:	00800404 	movi	r2,16
 1019b38:	20ffc02c 	andhi	r3,r4,65280
 1019b3c:	1800021e 	bne	r3,zero,1019b48 <__hi0bits+0x20>
 1019b40:	2008923a 	slli	r4,r4,8
 1019b44:	10800204 	addi	r2,r2,8
 1019b48:	20fc002c 	andhi	r3,r4,61440
 1019b4c:	1800021e 	bne	r3,zero,1019b58 <__hi0bits+0x30>
 1019b50:	2008913a 	slli	r4,r4,4
 1019b54:	10800104 	addi	r2,r2,4
 1019b58:	20f0002c 	andhi	r3,r4,49152
 1019b5c:	1800031e 	bne	r3,zero,1019b6c <__hi0bits+0x44>
 1019b60:	2109883a 	add	r4,r4,r4
 1019b64:	10800084 	addi	r2,r2,2
 1019b68:	2109883a 	add	r4,r4,r4
 1019b6c:	20000316 	blt	r4,zero,1019b7c <__hi0bits+0x54>
 1019b70:	2110002c 	andhi	r4,r4,16384
 1019b74:	2000041e 	bne	r4,zero,1019b88 <__hi0bits+0x60>
 1019b78:	00800804 	movi	r2,32
 1019b7c:	f800283a 	ret
 1019b80:	0005883a 	mov	r2,zero
 1019b84:	003fec06 	br	1019b38 <__alt_data_end+0xff019b38>
 1019b88:	10800044 	addi	r2,r2,1
 1019b8c:	f800283a 	ret

01019b90 <__lo0bits>:
 1019b90:	20c00017 	ldw	r3,0(r4)
 1019b94:	188001cc 	andi	r2,r3,7
 1019b98:	10000826 	beq	r2,zero,1019bbc <__lo0bits+0x2c>
 1019b9c:	1880004c 	andi	r2,r3,1
 1019ba0:	1000211e 	bne	r2,zero,1019c28 <__lo0bits+0x98>
 1019ba4:	1880008c 	andi	r2,r3,2
 1019ba8:	1000211e 	bne	r2,zero,1019c30 <__lo0bits+0xa0>
 1019bac:	1806d0ba 	srli	r3,r3,2
 1019bb0:	00800084 	movi	r2,2
 1019bb4:	20c00015 	stw	r3,0(r4)
 1019bb8:	f800283a 	ret
 1019bbc:	18bfffcc 	andi	r2,r3,65535
 1019bc0:	10001326 	beq	r2,zero,1019c10 <__lo0bits+0x80>
 1019bc4:	0005883a 	mov	r2,zero
 1019bc8:	19403fcc 	andi	r5,r3,255
 1019bcc:	2800021e 	bne	r5,zero,1019bd8 <__lo0bits+0x48>
 1019bd0:	1806d23a 	srli	r3,r3,8
 1019bd4:	10800204 	addi	r2,r2,8
 1019bd8:	194003cc 	andi	r5,r3,15
 1019bdc:	2800021e 	bne	r5,zero,1019be8 <__lo0bits+0x58>
 1019be0:	1806d13a 	srli	r3,r3,4
 1019be4:	10800104 	addi	r2,r2,4
 1019be8:	194000cc 	andi	r5,r3,3
 1019bec:	2800021e 	bne	r5,zero,1019bf8 <__lo0bits+0x68>
 1019bf0:	1806d0ba 	srli	r3,r3,2
 1019bf4:	10800084 	addi	r2,r2,2
 1019bf8:	1940004c 	andi	r5,r3,1
 1019bfc:	2800081e 	bne	r5,zero,1019c20 <__lo0bits+0x90>
 1019c00:	1806d07a 	srli	r3,r3,1
 1019c04:	1800051e 	bne	r3,zero,1019c1c <__lo0bits+0x8c>
 1019c08:	00800804 	movi	r2,32
 1019c0c:	f800283a 	ret
 1019c10:	1806d43a 	srli	r3,r3,16
 1019c14:	00800404 	movi	r2,16
 1019c18:	003feb06 	br	1019bc8 <__alt_data_end+0xff019bc8>
 1019c1c:	10800044 	addi	r2,r2,1
 1019c20:	20c00015 	stw	r3,0(r4)
 1019c24:	f800283a 	ret
 1019c28:	0005883a 	mov	r2,zero
 1019c2c:	f800283a 	ret
 1019c30:	1806d07a 	srli	r3,r3,1
 1019c34:	00800044 	movi	r2,1
 1019c38:	20c00015 	stw	r3,0(r4)
 1019c3c:	f800283a 	ret

01019c40 <__i2b>:
 1019c40:	defffd04 	addi	sp,sp,-12
 1019c44:	dc000015 	stw	r16,0(sp)
 1019c48:	04000044 	movi	r16,1
 1019c4c:	dc400115 	stw	r17,4(sp)
 1019c50:	2823883a 	mov	r17,r5
 1019c54:	800b883a 	mov	r5,r16
 1019c58:	dfc00215 	stw	ra,8(sp)
 1019c5c:	10198340 	call	1019834 <_Balloc>
 1019c60:	14400515 	stw	r17,20(r2)
 1019c64:	14000415 	stw	r16,16(r2)
 1019c68:	dfc00217 	ldw	ra,8(sp)
 1019c6c:	dc400117 	ldw	r17,4(sp)
 1019c70:	dc000017 	ldw	r16,0(sp)
 1019c74:	dec00304 	addi	sp,sp,12
 1019c78:	f800283a 	ret

01019c7c <__multiply>:
 1019c7c:	defffa04 	addi	sp,sp,-24
 1019c80:	dcc00315 	stw	r19,12(sp)
 1019c84:	dc800215 	stw	r18,8(sp)
 1019c88:	34c00417 	ldw	r19,16(r6)
 1019c8c:	2c800417 	ldw	r18,16(r5)
 1019c90:	dd000415 	stw	r20,16(sp)
 1019c94:	dc400115 	stw	r17,4(sp)
 1019c98:	dfc00515 	stw	ra,20(sp)
 1019c9c:	dc000015 	stw	r16,0(sp)
 1019ca0:	2829883a 	mov	r20,r5
 1019ca4:	3023883a 	mov	r17,r6
 1019ca8:	94c0050e 	bge	r18,r19,1019cc0 <__multiply+0x44>
 1019cac:	9007883a 	mov	r3,r18
 1019cb0:	3029883a 	mov	r20,r6
 1019cb4:	9825883a 	mov	r18,r19
 1019cb8:	2823883a 	mov	r17,r5
 1019cbc:	1827883a 	mov	r19,r3
 1019cc0:	a0800217 	ldw	r2,8(r20)
 1019cc4:	94e1883a 	add	r16,r18,r19
 1019cc8:	a1400117 	ldw	r5,4(r20)
 1019ccc:	1400010e 	bge	r2,r16,1019cd4 <__multiply+0x58>
 1019cd0:	29400044 	addi	r5,r5,1
 1019cd4:	10198340 	call	1019834 <_Balloc>
 1019cd8:	8415883a 	add	r10,r16,r16
 1019cdc:	12c00504 	addi	r11,r2,20
 1019ce0:	5295883a 	add	r10,r10,r10
 1019ce4:	5a95883a 	add	r10,r11,r10
 1019ce8:	5807883a 	mov	r3,r11
 1019cec:	5a80032e 	bgeu	r11,r10,1019cfc <__multiply+0x80>
 1019cf0:	18000015 	stw	zero,0(r3)
 1019cf4:	18c00104 	addi	r3,r3,4
 1019cf8:	1abffd36 	bltu	r3,r10,1019cf0 <__alt_data_end+0xff019cf0>
 1019cfc:	9ce7883a 	add	r19,r19,r19
 1019d00:	94a5883a 	add	r18,r18,r18
 1019d04:	89800504 	addi	r6,r17,20
 1019d08:	9ce7883a 	add	r19,r19,r19
 1019d0c:	a3400504 	addi	r13,r20,20
 1019d10:	94a5883a 	add	r18,r18,r18
 1019d14:	34d9883a 	add	r12,r6,r19
 1019d18:	6c93883a 	add	r9,r13,r18
 1019d1c:	3300422e 	bgeu	r6,r12,1019e28 <__multiply+0x1ac>
 1019d20:	37c00017 	ldw	ra,0(r6)
 1019d24:	fbffffcc 	andi	r15,ra,65535
 1019d28:	78001b26 	beq	r15,zero,1019d98 <__multiply+0x11c>
 1019d2c:	5811883a 	mov	r8,r11
 1019d30:	681d883a 	mov	r14,r13
 1019d34:	000f883a 	mov	r7,zero
 1019d38:	71000017 	ldw	r4,0(r14)
 1019d3c:	40c00017 	ldw	r3,0(r8)
 1019d40:	73800104 	addi	r14,r14,4
 1019d44:	217fffcc 	andi	r5,r4,65535
 1019d48:	2bcb383a 	mul	r5,r5,r15
 1019d4c:	2008d43a 	srli	r4,r4,16
 1019d50:	1c7fffcc 	andi	r17,r3,65535
 1019d54:	2c4b883a 	add	r5,r5,r17
 1019d58:	29cb883a 	add	r5,r5,r7
 1019d5c:	23c9383a 	mul	r4,r4,r15
 1019d60:	1806d43a 	srli	r3,r3,16
 1019d64:	280ed43a 	srli	r7,r5,16
 1019d68:	297fffcc 	andi	r5,r5,65535
 1019d6c:	20c7883a 	add	r3,r4,r3
 1019d70:	19c7883a 	add	r3,r3,r7
 1019d74:	1808943a 	slli	r4,r3,16
 1019d78:	4023883a 	mov	r17,r8
 1019d7c:	180ed43a 	srli	r7,r3,16
 1019d80:	214ab03a 	or	r5,r4,r5
 1019d84:	41400015 	stw	r5,0(r8)
 1019d88:	42000104 	addi	r8,r8,4
 1019d8c:	727fea36 	bltu	r14,r9,1019d38 <__alt_data_end+0xff019d38>
 1019d90:	89c00115 	stw	r7,4(r17)
 1019d94:	37c00017 	ldw	ra,0(r6)
 1019d98:	f83ed43a 	srli	ra,ra,16
 1019d9c:	f8001f26 	beq	ra,zero,1019e1c <__multiply+0x1a0>
 1019da0:	58c00017 	ldw	r3,0(r11)
 1019da4:	681d883a 	mov	r14,r13
 1019da8:	581f883a 	mov	r15,r11
 1019dac:	1811883a 	mov	r8,r3
 1019db0:	5825883a 	mov	r18,r11
 1019db4:	000f883a 	mov	r7,zero
 1019db8:	00000106 	br	1019dc0 <__multiply+0x144>
 1019dbc:	8825883a 	mov	r18,r17
 1019dc0:	7140000b 	ldhu	r5,0(r14)
 1019dc4:	4010d43a 	srli	r8,r8,16
 1019dc8:	193fffcc 	andi	r4,r3,65535
 1019dcc:	2fcb383a 	mul	r5,r5,ra
 1019dd0:	7bc00104 	addi	r15,r15,4
 1019dd4:	73800104 	addi	r14,r14,4
 1019dd8:	2a0b883a 	add	r5,r5,r8
 1019ddc:	29cb883a 	add	r5,r5,r7
 1019de0:	2806943a 	slli	r3,r5,16
 1019de4:	94400104 	addi	r17,r18,4
 1019de8:	280ad43a 	srli	r5,r5,16
 1019dec:	1908b03a 	or	r4,r3,r4
 1019df0:	793fff15 	stw	r4,-4(r15)
 1019df4:	70ffff17 	ldw	r3,-4(r14)
 1019df8:	8a000017 	ldw	r8,0(r17)
 1019dfc:	1806d43a 	srli	r3,r3,16
 1019e00:	413fffcc 	andi	r4,r8,65535
 1019e04:	1fc7383a 	mul	r3,r3,ra
 1019e08:	1907883a 	add	r3,r3,r4
 1019e0c:	1947883a 	add	r3,r3,r5
 1019e10:	180ed43a 	srli	r7,r3,16
 1019e14:	727fe936 	bltu	r14,r9,1019dbc <__alt_data_end+0xff019dbc>
 1019e18:	90c00115 	stw	r3,4(r18)
 1019e1c:	31800104 	addi	r6,r6,4
 1019e20:	5ac00104 	addi	r11,r11,4
 1019e24:	333fbe36 	bltu	r6,r12,1019d20 <__alt_data_end+0xff019d20>
 1019e28:	0400090e 	bge	zero,r16,1019e50 <__multiply+0x1d4>
 1019e2c:	50ffff17 	ldw	r3,-4(r10)
 1019e30:	52bfff04 	addi	r10,r10,-4
 1019e34:	18000326 	beq	r3,zero,1019e44 <__multiply+0x1c8>
 1019e38:	00000506 	br	1019e50 <__multiply+0x1d4>
 1019e3c:	50c00017 	ldw	r3,0(r10)
 1019e40:	1800031e 	bne	r3,zero,1019e50 <__multiply+0x1d4>
 1019e44:	843fffc4 	addi	r16,r16,-1
 1019e48:	52bfff04 	addi	r10,r10,-4
 1019e4c:	803ffb1e 	bne	r16,zero,1019e3c <__alt_data_end+0xff019e3c>
 1019e50:	14000415 	stw	r16,16(r2)
 1019e54:	dfc00517 	ldw	ra,20(sp)
 1019e58:	dd000417 	ldw	r20,16(sp)
 1019e5c:	dcc00317 	ldw	r19,12(sp)
 1019e60:	dc800217 	ldw	r18,8(sp)
 1019e64:	dc400117 	ldw	r17,4(sp)
 1019e68:	dc000017 	ldw	r16,0(sp)
 1019e6c:	dec00604 	addi	sp,sp,24
 1019e70:	f800283a 	ret

01019e74 <__pow5mult>:
 1019e74:	defffa04 	addi	sp,sp,-24
 1019e78:	dcc00315 	stw	r19,12(sp)
 1019e7c:	dc000015 	stw	r16,0(sp)
 1019e80:	dfc00515 	stw	ra,20(sp)
 1019e84:	dd000415 	stw	r20,16(sp)
 1019e88:	dc800215 	stw	r18,8(sp)
 1019e8c:	dc400115 	stw	r17,4(sp)
 1019e90:	308000cc 	andi	r2,r6,3
 1019e94:	3021883a 	mov	r16,r6
 1019e98:	2027883a 	mov	r19,r4
 1019e9c:	10002f1e 	bne	r2,zero,1019f5c <__pow5mult+0xe8>
 1019ea0:	2825883a 	mov	r18,r5
 1019ea4:	8021d0ba 	srai	r16,r16,2
 1019ea8:	80001a26 	beq	r16,zero,1019f14 <__pow5mult+0xa0>
 1019eac:	9c401217 	ldw	r17,72(r19)
 1019eb0:	8800061e 	bne	r17,zero,1019ecc <__pow5mult+0x58>
 1019eb4:	00003406 	br	1019f88 <__pow5mult+0x114>
 1019eb8:	8021d07a 	srai	r16,r16,1
 1019ebc:	80001526 	beq	r16,zero,1019f14 <__pow5mult+0xa0>
 1019ec0:	88800017 	ldw	r2,0(r17)
 1019ec4:	10001c26 	beq	r2,zero,1019f38 <__pow5mult+0xc4>
 1019ec8:	1023883a 	mov	r17,r2
 1019ecc:	8080004c 	andi	r2,r16,1
 1019ed0:	103ff926 	beq	r2,zero,1019eb8 <__alt_data_end+0xff019eb8>
 1019ed4:	880d883a 	mov	r6,r17
 1019ed8:	900b883a 	mov	r5,r18
 1019edc:	9809883a 	mov	r4,r19
 1019ee0:	1019c7c0 	call	1019c7c <__multiply>
 1019ee4:	90001b26 	beq	r18,zero,1019f54 <__pow5mult+0xe0>
 1019ee8:	91000117 	ldw	r4,4(r18)
 1019eec:	98c01317 	ldw	r3,76(r19)
 1019ef0:	8021d07a 	srai	r16,r16,1
 1019ef4:	2109883a 	add	r4,r4,r4
 1019ef8:	2109883a 	add	r4,r4,r4
 1019efc:	1907883a 	add	r3,r3,r4
 1019f00:	19000017 	ldw	r4,0(r3)
 1019f04:	91000015 	stw	r4,0(r18)
 1019f08:	1c800015 	stw	r18,0(r3)
 1019f0c:	1025883a 	mov	r18,r2
 1019f10:	803feb1e 	bne	r16,zero,1019ec0 <__alt_data_end+0xff019ec0>
 1019f14:	9005883a 	mov	r2,r18
 1019f18:	dfc00517 	ldw	ra,20(sp)
 1019f1c:	dd000417 	ldw	r20,16(sp)
 1019f20:	dcc00317 	ldw	r19,12(sp)
 1019f24:	dc800217 	ldw	r18,8(sp)
 1019f28:	dc400117 	ldw	r17,4(sp)
 1019f2c:	dc000017 	ldw	r16,0(sp)
 1019f30:	dec00604 	addi	sp,sp,24
 1019f34:	f800283a 	ret
 1019f38:	880d883a 	mov	r6,r17
 1019f3c:	880b883a 	mov	r5,r17
 1019f40:	9809883a 	mov	r4,r19
 1019f44:	1019c7c0 	call	1019c7c <__multiply>
 1019f48:	88800015 	stw	r2,0(r17)
 1019f4c:	10000015 	stw	zero,0(r2)
 1019f50:	003fdd06 	br	1019ec8 <__alt_data_end+0xff019ec8>
 1019f54:	1025883a 	mov	r18,r2
 1019f58:	003fd706 	br	1019eb8 <__alt_data_end+0xff019eb8>
 1019f5c:	10bfffc4 	addi	r2,r2,-1
 1019f60:	1085883a 	add	r2,r2,r2
 1019f64:	00c040b4 	movhi	r3,258
 1019f68:	18d9e004 	addi	r3,r3,26496
 1019f6c:	1085883a 	add	r2,r2,r2
 1019f70:	1885883a 	add	r2,r3,r2
 1019f74:	11800017 	ldw	r6,0(r2)
 1019f78:	000f883a 	mov	r7,zero
 1019f7c:	10199040 	call	1019904 <__multadd>
 1019f80:	1025883a 	mov	r18,r2
 1019f84:	003fc706 	br	1019ea4 <__alt_data_end+0xff019ea4>
 1019f88:	05000044 	movi	r20,1
 1019f8c:	a00b883a 	mov	r5,r20
 1019f90:	9809883a 	mov	r4,r19
 1019f94:	10198340 	call	1019834 <_Balloc>
 1019f98:	1023883a 	mov	r17,r2
 1019f9c:	00809c44 	movi	r2,625
 1019fa0:	88800515 	stw	r2,20(r17)
 1019fa4:	8d000415 	stw	r20,16(r17)
 1019fa8:	9c401215 	stw	r17,72(r19)
 1019fac:	88000015 	stw	zero,0(r17)
 1019fb0:	003fc606 	br	1019ecc <__alt_data_end+0xff019ecc>

01019fb4 <__lshift>:
 1019fb4:	defff904 	addi	sp,sp,-28
 1019fb8:	dd400515 	stw	r21,20(sp)
 1019fbc:	dcc00315 	stw	r19,12(sp)
 1019fc0:	302bd17a 	srai	r21,r6,5
 1019fc4:	2cc00417 	ldw	r19,16(r5)
 1019fc8:	28800217 	ldw	r2,8(r5)
 1019fcc:	dd000415 	stw	r20,16(sp)
 1019fd0:	ace7883a 	add	r19,r21,r19
 1019fd4:	dc800215 	stw	r18,8(sp)
 1019fd8:	dc400115 	stw	r17,4(sp)
 1019fdc:	dc000015 	stw	r16,0(sp)
 1019fe0:	dfc00615 	stw	ra,24(sp)
 1019fe4:	9c000044 	addi	r16,r19,1
 1019fe8:	2823883a 	mov	r17,r5
 1019fec:	3029883a 	mov	r20,r6
 1019ff0:	2025883a 	mov	r18,r4
 1019ff4:	29400117 	ldw	r5,4(r5)
 1019ff8:	1400030e 	bge	r2,r16,101a008 <__lshift+0x54>
 1019ffc:	1085883a 	add	r2,r2,r2
 101a000:	29400044 	addi	r5,r5,1
 101a004:	143ffd16 	blt	r2,r16,1019ffc <__alt_data_end+0xff019ffc>
 101a008:	9009883a 	mov	r4,r18
 101a00c:	10198340 	call	1019834 <_Balloc>
 101a010:	10c00504 	addi	r3,r2,20
 101a014:	0540070e 	bge	zero,r21,101a034 <__lshift+0x80>
 101a018:	ad6b883a 	add	r21,r21,r21
 101a01c:	ad6b883a 	add	r21,r21,r21
 101a020:	1809883a 	mov	r4,r3
 101a024:	1d47883a 	add	r3,r3,r21
 101a028:	20000015 	stw	zero,0(r4)
 101a02c:	21000104 	addi	r4,r4,4
 101a030:	193ffd1e 	bne	r3,r4,101a028 <__alt_data_end+0xff01a028>
 101a034:	8a000417 	ldw	r8,16(r17)
 101a038:	89000504 	addi	r4,r17,20
 101a03c:	a18007cc 	andi	r6,r20,31
 101a040:	4211883a 	add	r8,r8,r8
 101a044:	4211883a 	add	r8,r8,r8
 101a048:	2211883a 	add	r8,r4,r8
 101a04c:	30002326 	beq	r6,zero,101a0dc <__lshift+0x128>
 101a050:	02400804 	movi	r9,32
 101a054:	4993c83a 	sub	r9,r9,r6
 101a058:	000b883a 	mov	r5,zero
 101a05c:	21c00017 	ldw	r7,0(r4)
 101a060:	1815883a 	mov	r10,r3
 101a064:	18c00104 	addi	r3,r3,4
 101a068:	398e983a 	sll	r7,r7,r6
 101a06c:	21000104 	addi	r4,r4,4
 101a070:	394ab03a 	or	r5,r7,r5
 101a074:	197fff15 	stw	r5,-4(r3)
 101a078:	217fff17 	ldw	r5,-4(r4)
 101a07c:	2a4ad83a 	srl	r5,r5,r9
 101a080:	223ff636 	bltu	r4,r8,101a05c <__alt_data_end+0xff01a05c>
 101a084:	51400115 	stw	r5,4(r10)
 101a088:	28001a1e 	bne	r5,zero,101a0f4 <__lshift+0x140>
 101a08c:	843fffc4 	addi	r16,r16,-1
 101a090:	14000415 	stw	r16,16(r2)
 101a094:	88000826 	beq	r17,zero,101a0b8 <__lshift+0x104>
 101a098:	89000117 	ldw	r4,4(r17)
 101a09c:	90c01317 	ldw	r3,76(r18)
 101a0a0:	2109883a 	add	r4,r4,r4
 101a0a4:	2109883a 	add	r4,r4,r4
 101a0a8:	1907883a 	add	r3,r3,r4
 101a0ac:	19000017 	ldw	r4,0(r3)
 101a0b0:	89000015 	stw	r4,0(r17)
 101a0b4:	1c400015 	stw	r17,0(r3)
 101a0b8:	dfc00617 	ldw	ra,24(sp)
 101a0bc:	dd400517 	ldw	r21,20(sp)
 101a0c0:	dd000417 	ldw	r20,16(sp)
 101a0c4:	dcc00317 	ldw	r19,12(sp)
 101a0c8:	dc800217 	ldw	r18,8(sp)
 101a0cc:	dc400117 	ldw	r17,4(sp)
 101a0d0:	dc000017 	ldw	r16,0(sp)
 101a0d4:	dec00704 	addi	sp,sp,28
 101a0d8:	f800283a 	ret
 101a0dc:	21400017 	ldw	r5,0(r4)
 101a0e0:	18c00104 	addi	r3,r3,4
 101a0e4:	21000104 	addi	r4,r4,4
 101a0e8:	197fff15 	stw	r5,-4(r3)
 101a0ec:	223ffb36 	bltu	r4,r8,101a0dc <__alt_data_end+0xff01a0dc>
 101a0f0:	003fe606 	br	101a08c <__alt_data_end+0xff01a08c>
 101a0f4:	9c000084 	addi	r16,r19,2
 101a0f8:	003fe406 	br	101a08c <__alt_data_end+0xff01a08c>

0101a0fc <__mcmp>:
 101a0fc:	20800417 	ldw	r2,16(r4)
 101a100:	28c00417 	ldw	r3,16(r5)
 101a104:	10c5c83a 	sub	r2,r2,r3
 101a108:	1000111e 	bne	r2,zero,101a150 <__mcmp+0x54>
 101a10c:	18c7883a 	add	r3,r3,r3
 101a110:	18c7883a 	add	r3,r3,r3
 101a114:	21000504 	addi	r4,r4,20
 101a118:	29400504 	addi	r5,r5,20
 101a11c:	20c5883a 	add	r2,r4,r3
 101a120:	28cb883a 	add	r5,r5,r3
 101a124:	00000106 	br	101a12c <__mcmp+0x30>
 101a128:	20800a2e 	bgeu	r4,r2,101a154 <__mcmp+0x58>
 101a12c:	10bfff04 	addi	r2,r2,-4
 101a130:	297fff04 	addi	r5,r5,-4
 101a134:	11800017 	ldw	r6,0(r2)
 101a138:	28c00017 	ldw	r3,0(r5)
 101a13c:	30fffa26 	beq	r6,r3,101a128 <__alt_data_end+0xff01a128>
 101a140:	30c00236 	bltu	r6,r3,101a14c <__mcmp+0x50>
 101a144:	00800044 	movi	r2,1
 101a148:	f800283a 	ret
 101a14c:	00bfffc4 	movi	r2,-1
 101a150:	f800283a 	ret
 101a154:	0005883a 	mov	r2,zero
 101a158:	f800283a 	ret

0101a15c <__mdiff>:
 101a15c:	28c00417 	ldw	r3,16(r5)
 101a160:	30800417 	ldw	r2,16(r6)
 101a164:	defffa04 	addi	sp,sp,-24
 101a168:	dcc00315 	stw	r19,12(sp)
 101a16c:	dc800215 	stw	r18,8(sp)
 101a170:	dfc00515 	stw	ra,20(sp)
 101a174:	dd000415 	stw	r20,16(sp)
 101a178:	dc400115 	stw	r17,4(sp)
 101a17c:	dc000015 	stw	r16,0(sp)
 101a180:	1887c83a 	sub	r3,r3,r2
 101a184:	2825883a 	mov	r18,r5
 101a188:	3027883a 	mov	r19,r6
 101a18c:	1800141e 	bne	r3,zero,101a1e0 <__mdiff+0x84>
 101a190:	1085883a 	add	r2,r2,r2
 101a194:	1085883a 	add	r2,r2,r2
 101a198:	2a000504 	addi	r8,r5,20
 101a19c:	34000504 	addi	r16,r6,20
 101a1a0:	4087883a 	add	r3,r8,r2
 101a1a4:	8085883a 	add	r2,r16,r2
 101a1a8:	00000106 	br	101a1b0 <__mdiff+0x54>
 101a1ac:	40c0592e 	bgeu	r8,r3,101a314 <__mdiff+0x1b8>
 101a1b0:	18ffff04 	addi	r3,r3,-4
 101a1b4:	10bfff04 	addi	r2,r2,-4
 101a1b8:	19c00017 	ldw	r7,0(r3)
 101a1bc:	11400017 	ldw	r5,0(r2)
 101a1c0:	397ffa26 	beq	r7,r5,101a1ac <__alt_data_end+0xff01a1ac>
 101a1c4:	3940592e 	bgeu	r7,r5,101a32c <__mdiff+0x1d0>
 101a1c8:	9005883a 	mov	r2,r18
 101a1cc:	4023883a 	mov	r17,r8
 101a1d0:	9825883a 	mov	r18,r19
 101a1d4:	05000044 	movi	r20,1
 101a1d8:	1027883a 	mov	r19,r2
 101a1dc:	00000406 	br	101a1f0 <__mdiff+0x94>
 101a1e0:	18005616 	blt	r3,zero,101a33c <__mdiff+0x1e0>
 101a1e4:	34400504 	addi	r17,r6,20
 101a1e8:	2c000504 	addi	r16,r5,20
 101a1ec:	0029883a 	mov	r20,zero
 101a1f0:	91400117 	ldw	r5,4(r18)
 101a1f4:	10198340 	call	1019834 <_Balloc>
 101a1f8:	92400417 	ldw	r9,16(r18)
 101a1fc:	9b000417 	ldw	r12,16(r19)
 101a200:	12c00504 	addi	r11,r2,20
 101a204:	4a51883a 	add	r8,r9,r9
 101a208:	6319883a 	add	r12,r12,r12
 101a20c:	4211883a 	add	r8,r8,r8
 101a210:	6319883a 	add	r12,r12,r12
 101a214:	15000315 	stw	r20,12(r2)
 101a218:	8211883a 	add	r8,r16,r8
 101a21c:	8b19883a 	add	r12,r17,r12
 101a220:	0007883a 	mov	r3,zero
 101a224:	81400017 	ldw	r5,0(r16)
 101a228:	89c00017 	ldw	r7,0(r17)
 101a22c:	59800104 	addi	r6,r11,4
 101a230:	293fffcc 	andi	r4,r5,65535
 101a234:	20c7883a 	add	r3,r4,r3
 101a238:	393fffcc 	andi	r4,r7,65535
 101a23c:	1909c83a 	sub	r4,r3,r4
 101a240:	280ad43a 	srli	r5,r5,16
 101a244:	380ed43a 	srli	r7,r7,16
 101a248:	2007d43a 	srai	r3,r4,16
 101a24c:	213fffcc 	andi	r4,r4,65535
 101a250:	29cbc83a 	sub	r5,r5,r7
 101a254:	28c7883a 	add	r3,r5,r3
 101a258:	180a943a 	slli	r5,r3,16
 101a25c:	8c400104 	addi	r17,r17,4
 101a260:	84000104 	addi	r16,r16,4
 101a264:	2908b03a 	or	r4,r5,r4
 101a268:	59000015 	stw	r4,0(r11)
 101a26c:	1807d43a 	srai	r3,r3,16
 101a270:	3015883a 	mov	r10,r6
 101a274:	3017883a 	mov	r11,r6
 101a278:	8b3fea36 	bltu	r17,r12,101a224 <__alt_data_end+0xff01a224>
 101a27c:	8200162e 	bgeu	r16,r8,101a2d8 <__mdiff+0x17c>
 101a280:	8017883a 	mov	r11,r16
 101a284:	59400017 	ldw	r5,0(r11)
 101a288:	31800104 	addi	r6,r6,4
 101a28c:	5ac00104 	addi	r11,r11,4
 101a290:	293fffcc 	andi	r4,r5,65535
 101a294:	20c7883a 	add	r3,r4,r3
 101a298:	280ed43a 	srli	r7,r5,16
 101a29c:	180bd43a 	srai	r5,r3,16
 101a2a0:	193fffcc 	andi	r4,r3,65535
 101a2a4:	3947883a 	add	r3,r7,r5
 101a2a8:	180a943a 	slli	r5,r3,16
 101a2ac:	1807d43a 	srai	r3,r3,16
 101a2b0:	2908b03a 	or	r4,r5,r4
 101a2b4:	313fff15 	stw	r4,-4(r6)
 101a2b8:	5a3ff236 	bltu	r11,r8,101a284 <__alt_data_end+0xff01a284>
 101a2bc:	0406303a 	nor	r3,zero,r16
 101a2c0:	1a07883a 	add	r3,r3,r8
 101a2c4:	1806d0ba 	srli	r3,r3,2
 101a2c8:	18c00044 	addi	r3,r3,1
 101a2cc:	18c7883a 	add	r3,r3,r3
 101a2d0:	18c7883a 	add	r3,r3,r3
 101a2d4:	50d5883a 	add	r10,r10,r3
 101a2d8:	50ffff04 	addi	r3,r10,-4
 101a2dc:	2000041e 	bne	r4,zero,101a2f0 <__mdiff+0x194>
 101a2e0:	18ffff04 	addi	r3,r3,-4
 101a2e4:	19000017 	ldw	r4,0(r3)
 101a2e8:	4a7fffc4 	addi	r9,r9,-1
 101a2ec:	203ffc26 	beq	r4,zero,101a2e0 <__alt_data_end+0xff01a2e0>
 101a2f0:	12400415 	stw	r9,16(r2)
 101a2f4:	dfc00517 	ldw	ra,20(sp)
 101a2f8:	dd000417 	ldw	r20,16(sp)
 101a2fc:	dcc00317 	ldw	r19,12(sp)
 101a300:	dc800217 	ldw	r18,8(sp)
 101a304:	dc400117 	ldw	r17,4(sp)
 101a308:	dc000017 	ldw	r16,0(sp)
 101a30c:	dec00604 	addi	sp,sp,24
 101a310:	f800283a 	ret
 101a314:	000b883a 	mov	r5,zero
 101a318:	10198340 	call	1019834 <_Balloc>
 101a31c:	00c00044 	movi	r3,1
 101a320:	10c00415 	stw	r3,16(r2)
 101a324:	10000515 	stw	zero,20(r2)
 101a328:	003ff206 	br	101a2f4 <__alt_data_end+0xff01a2f4>
 101a32c:	8023883a 	mov	r17,r16
 101a330:	0029883a 	mov	r20,zero
 101a334:	4021883a 	mov	r16,r8
 101a338:	003fad06 	br	101a1f0 <__alt_data_end+0xff01a1f0>
 101a33c:	9005883a 	mov	r2,r18
 101a340:	94400504 	addi	r17,r18,20
 101a344:	9c000504 	addi	r16,r19,20
 101a348:	9825883a 	mov	r18,r19
 101a34c:	05000044 	movi	r20,1
 101a350:	1027883a 	mov	r19,r2
 101a354:	003fa606 	br	101a1f0 <__alt_data_end+0xff01a1f0>

0101a358 <__ulp>:
 101a358:	295ffc2c 	andhi	r5,r5,32752
 101a35c:	00bf3034 	movhi	r2,64704
 101a360:	2887883a 	add	r3,r5,r2
 101a364:	00c0020e 	bge	zero,r3,101a370 <__ulp+0x18>
 101a368:	0005883a 	mov	r2,zero
 101a36c:	f800283a 	ret
 101a370:	00c7c83a 	sub	r3,zero,r3
 101a374:	1807d53a 	srai	r3,r3,20
 101a378:	008004c4 	movi	r2,19
 101a37c:	10c00b0e 	bge	r2,r3,101a3ac <__ulp+0x54>
 101a380:	18bffb04 	addi	r2,r3,-20
 101a384:	01000784 	movi	r4,30
 101a388:	0007883a 	mov	r3,zero
 101a38c:	20800516 	blt	r4,r2,101a3a4 <__ulp+0x4c>
 101a390:	010007c4 	movi	r4,31
 101a394:	2089c83a 	sub	r4,r4,r2
 101a398:	00800044 	movi	r2,1
 101a39c:	1104983a 	sll	r2,r2,r4
 101a3a0:	f800283a 	ret
 101a3a4:	00800044 	movi	r2,1
 101a3a8:	f800283a 	ret
 101a3ac:	01400234 	movhi	r5,8
 101a3b0:	28c7d83a 	sra	r3,r5,r3
 101a3b4:	0005883a 	mov	r2,zero
 101a3b8:	f800283a 	ret

0101a3bc <__b2d>:
 101a3bc:	defffa04 	addi	sp,sp,-24
 101a3c0:	dc000015 	stw	r16,0(sp)
 101a3c4:	24000417 	ldw	r16,16(r4)
 101a3c8:	dc400115 	stw	r17,4(sp)
 101a3cc:	24400504 	addi	r17,r4,20
 101a3d0:	8421883a 	add	r16,r16,r16
 101a3d4:	8421883a 	add	r16,r16,r16
 101a3d8:	8c21883a 	add	r16,r17,r16
 101a3dc:	dc800215 	stw	r18,8(sp)
 101a3e0:	84bfff17 	ldw	r18,-4(r16)
 101a3e4:	dd000415 	stw	r20,16(sp)
 101a3e8:	dcc00315 	stw	r19,12(sp)
 101a3ec:	9009883a 	mov	r4,r18
 101a3f0:	2829883a 	mov	r20,r5
 101a3f4:	dfc00515 	stw	ra,20(sp)
 101a3f8:	1019b280 	call	1019b28 <__hi0bits>
 101a3fc:	00c00804 	movi	r3,32
 101a400:	1889c83a 	sub	r4,r3,r2
 101a404:	a1000015 	stw	r4,0(r20)
 101a408:	01000284 	movi	r4,10
 101a40c:	84ffff04 	addi	r19,r16,-4
 101a410:	20801216 	blt	r4,r2,101a45c <__b2d+0xa0>
 101a414:	018002c4 	movi	r6,11
 101a418:	308dc83a 	sub	r6,r6,r2
 101a41c:	9186d83a 	srl	r3,r18,r6
 101a420:	18cffc34 	orhi	r3,r3,16368
 101a424:	8cc0212e 	bgeu	r17,r19,101a4ac <__b2d+0xf0>
 101a428:	813ffe17 	ldw	r4,-8(r16)
 101a42c:	218cd83a 	srl	r6,r4,r6
 101a430:	10800544 	addi	r2,r2,21
 101a434:	9084983a 	sll	r2,r18,r2
 101a438:	1184b03a 	or	r2,r2,r6
 101a43c:	dfc00517 	ldw	ra,20(sp)
 101a440:	dd000417 	ldw	r20,16(sp)
 101a444:	dcc00317 	ldw	r19,12(sp)
 101a448:	dc800217 	ldw	r18,8(sp)
 101a44c:	dc400117 	ldw	r17,4(sp)
 101a450:	dc000017 	ldw	r16,0(sp)
 101a454:	dec00604 	addi	sp,sp,24
 101a458:	f800283a 	ret
 101a45c:	8cc00f2e 	bgeu	r17,r19,101a49c <__b2d+0xe0>
 101a460:	117ffd44 	addi	r5,r2,-11
 101a464:	80bffe17 	ldw	r2,-8(r16)
 101a468:	28000e26 	beq	r5,zero,101a4a4 <__b2d+0xe8>
 101a46c:	1949c83a 	sub	r4,r3,r5
 101a470:	9164983a 	sll	r18,r18,r5
 101a474:	1106d83a 	srl	r3,r2,r4
 101a478:	81bffe04 	addi	r6,r16,-8
 101a47c:	948ffc34 	orhi	r18,r18,16368
 101a480:	90c6b03a 	or	r3,r18,r3
 101a484:	89800e2e 	bgeu	r17,r6,101a4c0 <__b2d+0x104>
 101a488:	81bffd17 	ldw	r6,-12(r16)
 101a48c:	1144983a 	sll	r2,r2,r5
 101a490:	310ad83a 	srl	r5,r6,r4
 101a494:	2884b03a 	or	r2,r5,r2
 101a498:	003fe806 	br	101a43c <__alt_data_end+0xff01a43c>
 101a49c:	10bffd44 	addi	r2,r2,-11
 101a4a0:	1000041e 	bne	r2,zero,101a4b4 <__b2d+0xf8>
 101a4a4:	90cffc34 	orhi	r3,r18,16368
 101a4a8:	003fe406 	br	101a43c <__alt_data_end+0xff01a43c>
 101a4ac:	000d883a 	mov	r6,zero
 101a4b0:	003fdf06 	br	101a430 <__alt_data_end+0xff01a430>
 101a4b4:	90a4983a 	sll	r18,r18,r2
 101a4b8:	0005883a 	mov	r2,zero
 101a4bc:	003ff906 	br	101a4a4 <__alt_data_end+0xff01a4a4>
 101a4c0:	1144983a 	sll	r2,r2,r5
 101a4c4:	003fdd06 	br	101a43c <__alt_data_end+0xff01a43c>

0101a4c8 <__d2b>:
 101a4c8:	defff804 	addi	sp,sp,-32
 101a4cc:	dc000215 	stw	r16,8(sp)
 101a4d0:	3021883a 	mov	r16,r6
 101a4d4:	dc400315 	stw	r17,12(sp)
 101a4d8:	8022907a 	slli	r17,r16,1
 101a4dc:	dd000615 	stw	r20,24(sp)
 101a4e0:	2829883a 	mov	r20,r5
 101a4e4:	01400044 	movi	r5,1
 101a4e8:	dcc00515 	stw	r19,20(sp)
 101a4ec:	dc800415 	stw	r18,16(sp)
 101a4f0:	dfc00715 	stw	ra,28(sp)
 101a4f4:	3825883a 	mov	r18,r7
 101a4f8:	8822d57a 	srli	r17,r17,21
 101a4fc:	10198340 	call	1019834 <_Balloc>
 101a500:	1027883a 	mov	r19,r2
 101a504:	00800434 	movhi	r2,16
 101a508:	10bfffc4 	addi	r2,r2,-1
 101a50c:	808c703a 	and	r6,r16,r2
 101a510:	88000126 	beq	r17,zero,101a518 <__d2b+0x50>
 101a514:	31800434 	orhi	r6,r6,16
 101a518:	d9800015 	stw	r6,0(sp)
 101a51c:	a0002426 	beq	r20,zero,101a5b0 <__d2b+0xe8>
 101a520:	d9000104 	addi	r4,sp,4
 101a524:	dd000115 	stw	r20,4(sp)
 101a528:	1019b900 	call	1019b90 <__lo0bits>
 101a52c:	d8c00017 	ldw	r3,0(sp)
 101a530:	10002f1e 	bne	r2,zero,101a5f0 <__d2b+0x128>
 101a534:	d9000117 	ldw	r4,4(sp)
 101a538:	99000515 	stw	r4,20(r19)
 101a53c:	1821003a 	cmpeq	r16,r3,zero
 101a540:	01000084 	movi	r4,2
 101a544:	2421c83a 	sub	r16,r4,r16
 101a548:	98c00615 	stw	r3,24(r19)
 101a54c:	9c000415 	stw	r16,16(r19)
 101a550:	88001f1e 	bne	r17,zero,101a5d0 <__d2b+0x108>
 101a554:	10bef384 	addi	r2,r2,-1074
 101a558:	90800015 	stw	r2,0(r18)
 101a55c:	00900034 	movhi	r2,16384
 101a560:	10bfffc4 	addi	r2,r2,-1
 101a564:	8085883a 	add	r2,r16,r2
 101a568:	1085883a 	add	r2,r2,r2
 101a56c:	1085883a 	add	r2,r2,r2
 101a570:	9885883a 	add	r2,r19,r2
 101a574:	11000517 	ldw	r4,20(r2)
 101a578:	8020917a 	slli	r16,r16,5
 101a57c:	1019b280 	call	1019b28 <__hi0bits>
 101a580:	d8c00817 	ldw	r3,32(sp)
 101a584:	8085c83a 	sub	r2,r16,r2
 101a588:	18800015 	stw	r2,0(r3)
 101a58c:	9805883a 	mov	r2,r19
 101a590:	dfc00717 	ldw	ra,28(sp)
 101a594:	dd000617 	ldw	r20,24(sp)
 101a598:	dcc00517 	ldw	r19,20(sp)
 101a59c:	dc800417 	ldw	r18,16(sp)
 101a5a0:	dc400317 	ldw	r17,12(sp)
 101a5a4:	dc000217 	ldw	r16,8(sp)
 101a5a8:	dec00804 	addi	sp,sp,32
 101a5ac:	f800283a 	ret
 101a5b0:	d809883a 	mov	r4,sp
 101a5b4:	1019b900 	call	1019b90 <__lo0bits>
 101a5b8:	d8c00017 	ldw	r3,0(sp)
 101a5bc:	04000044 	movi	r16,1
 101a5c0:	9c000415 	stw	r16,16(r19)
 101a5c4:	98c00515 	stw	r3,20(r19)
 101a5c8:	10800804 	addi	r2,r2,32
 101a5cc:	883fe126 	beq	r17,zero,101a554 <__alt_data_end+0xff01a554>
 101a5d0:	00c00d44 	movi	r3,53
 101a5d4:	8c7ef344 	addi	r17,r17,-1075
 101a5d8:	88a3883a 	add	r17,r17,r2
 101a5dc:	1885c83a 	sub	r2,r3,r2
 101a5e0:	d8c00817 	ldw	r3,32(sp)
 101a5e4:	94400015 	stw	r17,0(r18)
 101a5e8:	18800015 	stw	r2,0(r3)
 101a5ec:	003fe706 	br	101a58c <__alt_data_end+0xff01a58c>
 101a5f0:	01000804 	movi	r4,32
 101a5f4:	2089c83a 	sub	r4,r4,r2
 101a5f8:	1908983a 	sll	r4,r3,r4
 101a5fc:	d9400117 	ldw	r5,4(sp)
 101a600:	1886d83a 	srl	r3,r3,r2
 101a604:	2148b03a 	or	r4,r4,r5
 101a608:	99000515 	stw	r4,20(r19)
 101a60c:	d8c00015 	stw	r3,0(sp)
 101a610:	003fca06 	br	101a53c <__alt_data_end+0xff01a53c>

0101a614 <__ratio>:
 101a614:	defff904 	addi	sp,sp,-28
 101a618:	dc400315 	stw	r17,12(sp)
 101a61c:	2823883a 	mov	r17,r5
 101a620:	d9400104 	addi	r5,sp,4
 101a624:	dfc00615 	stw	ra,24(sp)
 101a628:	dcc00515 	stw	r19,20(sp)
 101a62c:	dc800415 	stw	r18,16(sp)
 101a630:	2027883a 	mov	r19,r4
 101a634:	dc000215 	stw	r16,8(sp)
 101a638:	101a3bc0 	call	101a3bc <__b2d>
 101a63c:	d80b883a 	mov	r5,sp
 101a640:	8809883a 	mov	r4,r17
 101a644:	1025883a 	mov	r18,r2
 101a648:	1821883a 	mov	r16,r3
 101a64c:	101a3bc0 	call	101a3bc <__b2d>
 101a650:	8a000417 	ldw	r8,16(r17)
 101a654:	99000417 	ldw	r4,16(r19)
 101a658:	d9400117 	ldw	r5,4(sp)
 101a65c:	2209c83a 	sub	r4,r4,r8
 101a660:	2010917a 	slli	r8,r4,5
 101a664:	d9000017 	ldw	r4,0(sp)
 101a668:	2909c83a 	sub	r4,r5,r4
 101a66c:	4109883a 	add	r4,r8,r4
 101a670:	01000e0e 	bge	zero,r4,101a6ac <__ratio+0x98>
 101a674:	2008953a 	slli	r4,r4,20
 101a678:	2421883a 	add	r16,r4,r16
 101a67c:	100d883a 	mov	r6,r2
 101a680:	180f883a 	mov	r7,r3
 101a684:	9009883a 	mov	r4,r18
 101a688:	800b883a 	mov	r5,r16
 101a68c:	10205200 	call	1020520 <__divdf3>
 101a690:	dfc00617 	ldw	ra,24(sp)
 101a694:	dcc00517 	ldw	r19,20(sp)
 101a698:	dc800417 	ldw	r18,16(sp)
 101a69c:	dc400317 	ldw	r17,12(sp)
 101a6a0:	dc000217 	ldw	r16,8(sp)
 101a6a4:	dec00704 	addi	sp,sp,28
 101a6a8:	f800283a 	ret
 101a6ac:	2008953a 	slli	r4,r4,20
 101a6b0:	1907c83a 	sub	r3,r3,r4
 101a6b4:	003ff106 	br	101a67c <__alt_data_end+0xff01a67c>

0101a6b8 <_mprec_log10>:
 101a6b8:	defffe04 	addi	sp,sp,-8
 101a6bc:	dc000015 	stw	r16,0(sp)
 101a6c0:	dfc00115 	stw	ra,4(sp)
 101a6c4:	008005c4 	movi	r2,23
 101a6c8:	2021883a 	mov	r16,r4
 101a6cc:	11000d0e 	bge	r2,r4,101a704 <_mprec_log10+0x4c>
 101a6d0:	0005883a 	mov	r2,zero
 101a6d4:	00cffc34 	movhi	r3,16368
 101a6d8:	843fffc4 	addi	r16,r16,-1
 101a6dc:	000d883a 	mov	r6,zero
 101a6e0:	01d00934 	movhi	r7,16420
 101a6e4:	1009883a 	mov	r4,r2
 101a6e8:	180b883a 	mov	r5,r3
 101a6ec:	10210600 	call	1021060 <__muldf3>
 101a6f0:	803ff91e 	bne	r16,zero,101a6d8 <__alt_data_end+0xff01a6d8>
 101a6f4:	dfc00117 	ldw	ra,4(sp)
 101a6f8:	dc000017 	ldw	r16,0(sp)
 101a6fc:	dec00204 	addi	sp,sp,8
 101a700:	f800283a 	ret
 101a704:	202090fa 	slli	r16,r4,3
 101a708:	008040b4 	movhi	r2,258
 101a70c:	1099f704 	addi	r2,r2,26588
 101a710:	1421883a 	add	r16,r2,r16
 101a714:	80800017 	ldw	r2,0(r16)
 101a718:	80c00117 	ldw	r3,4(r16)
 101a71c:	dfc00117 	ldw	ra,4(sp)
 101a720:	dc000017 	ldw	r16,0(sp)
 101a724:	dec00204 	addi	sp,sp,8
 101a728:	f800283a 	ret

0101a72c <__copybits>:
 101a72c:	297fffc4 	addi	r5,r5,-1
 101a730:	280fd17a 	srai	r7,r5,5
 101a734:	30c00417 	ldw	r3,16(r6)
 101a738:	30800504 	addi	r2,r6,20
 101a73c:	39c00044 	addi	r7,r7,1
 101a740:	18c7883a 	add	r3,r3,r3
 101a744:	39cf883a 	add	r7,r7,r7
 101a748:	18c7883a 	add	r3,r3,r3
 101a74c:	39cf883a 	add	r7,r7,r7
 101a750:	10c7883a 	add	r3,r2,r3
 101a754:	21cf883a 	add	r7,r4,r7
 101a758:	10c00d2e 	bgeu	r2,r3,101a790 <__copybits+0x64>
 101a75c:	200b883a 	mov	r5,r4
 101a760:	12000017 	ldw	r8,0(r2)
 101a764:	29400104 	addi	r5,r5,4
 101a768:	10800104 	addi	r2,r2,4
 101a76c:	2a3fff15 	stw	r8,-4(r5)
 101a770:	10fffb36 	bltu	r2,r3,101a760 <__alt_data_end+0xff01a760>
 101a774:	1985c83a 	sub	r2,r3,r6
 101a778:	10bffac4 	addi	r2,r2,-21
 101a77c:	1004d0ba 	srli	r2,r2,2
 101a780:	10800044 	addi	r2,r2,1
 101a784:	1085883a 	add	r2,r2,r2
 101a788:	1085883a 	add	r2,r2,r2
 101a78c:	2089883a 	add	r4,r4,r2
 101a790:	21c0032e 	bgeu	r4,r7,101a7a0 <__copybits+0x74>
 101a794:	20000015 	stw	zero,0(r4)
 101a798:	21000104 	addi	r4,r4,4
 101a79c:	21fffd36 	bltu	r4,r7,101a794 <__alt_data_end+0xff01a794>
 101a7a0:	f800283a 	ret

0101a7a4 <__any_on>:
 101a7a4:	20c00417 	ldw	r3,16(r4)
 101a7a8:	2805d17a 	srai	r2,r5,5
 101a7ac:	21000504 	addi	r4,r4,20
 101a7b0:	18800d0e 	bge	r3,r2,101a7e8 <__any_on+0x44>
 101a7b4:	18c7883a 	add	r3,r3,r3
 101a7b8:	18c7883a 	add	r3,r3,r3
 101a7bc:	20c7883a 	add	r3,r4,r3
 101a7c0:	20c0192e 	bgeu	r4,r3,101a828 <__any_on+0x84>
 101a7c4:	18bfff17 	ldw	r2,-4(r3)
 101a7c8:	18ffff04 	addi	r3,r3,-4
 101a7cc:	1000041e 	bne	r2,zero,101a7e0 <__any_on+0x3c>
 101a7d0:	20c0142e 	bgeu	r4,r3,101a824 <__any_on+0x80>
 101a7d4:	18ffff04 	addi	r3,r3,-4
 101a7d8:	19400017 	ldw	r5,0(r3)
 101a7dc:	283ffc26 	beq	r5,zero,101a7d0 <__alt_data_end+0xff01a7d0>
 101a7e0:	00800044 	movi	r2,1
 101a7e4:	f800283a 	ret
 101a7e8:	10c00a0e 	bge	r2,r3,101a814 <__any_on+0x70>
 101a7ec:	1085883a 	add	r2,r2,r2
 101a7f0:	1085883a 	add	r2,r2,r2
 101a7f4:	294007cc 	andi	r5,r5,31
 101a7f8:	2087883a 	add	r3,r4,r2
 101a7fc:	283ff026 	beq	r5,zero,101a7c0 <__alt_data_end+0xff01a7c0>
 101a800:	19800017 	ldw	r6,0(r3)
 101a804:	3144d83a 	srl	r2,r6,r5
 101a808:	114a983a 	sll	r5,r2,r5
 101a80c:	317ff41e 	bne	r6,r5,101a7e0 <__alt_data_end+0xff01a7e0>
 101a810:	003feb06 	br	101a7c0 <__alt_data_end+0xff01a7c0>
 101a814:	1085883a 	add	r2,r2,r2
 101a818:	1085883a 	add	r2,r2,r2
 101a81c:	2087883a 	add	r3,r4,r2
 101a820:	003fe706 	br	101a7c0 <__alt_data_end+0xff01a7c0>
 101a824:	f800283a 	ret
 101a828:	0005883a 	mov	r2,zero
 101a82c:	f800283a 	ret

0101a830 <_realloc_r>:
 101a830:	defff604 	addi	sp,sp,-40
 101a834:	dc800215 	stw	r18,8(sp)
 101a838:	dfc00915 	stw	ra,36(sp)
 101a83c:	df000815 	stw	fp,32(sp)
 101a840:	ddc00715 	stw	r23,28(sp)
 101a844:	dd800615 	stw	r22,24(sp)
 101a848:	dd400515 	stw	r21,20(sp)
 101a84c:	dd000415 	stw	r20,16(sp)
 101a850:	dcc00315 	stw	r19,12(sp)
 101a854:	dc400115 	stw	r17,4(sp)
 101a858:	dc000015 	stw	r16,0(sp)
 101a85c:	3025883a 	mov	r18,r6
 101a860:	2800b726 	beq	r5,zero,101ab40 <_realloc_r+0x310>
 101a864:	282b883a 	mov	r21,r5
 101a868:	2029883a 	mov	r20,r4
 101a86c:	1022b880 	call	1022b88 <__malloc_lock>
 101a870:	a8bfff17 	ldw	r2,-4(r21)
 101a874:	043fff04 	movi	r16,-4
 101a878:	90c002c4 	addi	r3,r18,11
 101a87c:	01000584 	movi	r4,22
 101a880:	acfffe04 	addi	r19,r21,-8
 101a884:	1420703a 	and	r16,r2,r16
 101a888:	20c0332e 	bgeu	r4,r3,101a958 <_realloc_r+0x128>
 101a88c:	047ffe04 	movi	r17,-8
 101a890:	1c62703a 	and	r17,r3,r17
 101a894:	8807883a 	mov	r3,r17
 101a898:	88005816 	blt	r17,zero,101a9fc <_realloc_r+0x1cc>
 101a89c:	8c805736 	bltu	r17,r18,101a9fc <_realloc_r+0x1cc>
 101a8a0:	80c0300e 	bge	r16,r3,101a964 <_realloc_r+0x134>
 101a8a4:	070040b4 	movhi	fp,258
 101a8a8:	e71bde04 	addi	fp,fp,28536
 101a8ac:	e1c00217 	ldw	r7,8(fp)
 101a8b0:	9c09883a 	add	r4,r19,r16
 101a8b4:	22000117 	ldw	r8,4(r4)
 101a8b8:	21c06326 	beq	r4,r7,101aa48 <_realloc_r+0x218>
 101a8bc:	017fff84 	movi	r5,-2
 101a8c0:	414a703a 	and	r5,r8,r5
 101a8c4:	214b883a 	add	r5,r4,r5
 101a8c8:	29800117 	ldw	r6,4(r5)
 101a8cc:	3180004c 	andi	r6,r6,1
 101a8d0:	30003f26 	beq	r6,zero,101a9d0 <_realloc_r+0x1a0>
 101a8d4:	1080004c 	andi	r2,r2,1
 101a8d8:	10008326 	beq	r2,zero,101aae8 <_realloc_r+0x2b8>
 101a8dc:	900b883a 	mov	r5,r18
 101a8e0:	a009883a 	mov	r4,r20
 101a8e4:	1018de80 	call	1018de8 <_malloc_r>
 101a8e8:	1025883a 	mov	r18,r2
 101a8ec:	10011e26 	beq	r2,zero,101ad68 <_realloc_r+0x538>
 101a8f0:	a93fff17 	ldw	r4,-4(r21)
 101a8f4:	10fffe04 	addi	r3,r2,-8
 101a8f8:	00bfff84 	movi	r2,-2
 101a8fc:	2084703a 	and	r2,r4,r2
 101a900:	9885883a 	add	r2,r19,r2
 101a904:	1880ee26 	beq	r3,r2,101acc0 <_realloc_r+0x490>
 101a908:	81bfff04 	addi	r6,r16,-4
 101a90c:	00800904 	movi	r2,36
 101a910:	1180b836 	bltu	r2,r6,101abf4 <_realloc_r+0x3c4>
 101a914:	00c004c4 	movi	r3,19
 101a918:	19809636 	bltu	r3,r6,101ab74 <_realloc_r+0x344>
 101a91c:	9005883a 	mov	r2,r18
 101a920:	a807883a 	mov	r3,r21
 101a924:	19000017 	ldw	r4,0(r3)
 101a928:	11000015 	stw	r4,0(r2)
 101a92c:	19000117 	ldw	r4,4(r3)
 101a930:	11000115 	stw	r4,4(r2)
 101a934:	18c00217 	ldw	r3,8(r3)
 101a938:	10c00215 	stw	r3,8(r2)
 101a93c:	a80b883a 	mov	r5,r21
 101a940:	a009883a 	mov	r4,r20
 101a944:	101e6940 	call	101e694 <_free_r>
 101a948:	a009883a 	mov	r4,r20
 101a94c:	1022bac0 	call	1022bac <__malloc_unlock>
 101a950:	9005883a 	mov	r2,r18
 101a954:	00001206 	br	101a9a0 <_realloc_r+0x170>
 101a958:	00c00404 	movi	r3,16
 101a95c:	1823883a 	mov	r17,r3
 101a960:	003fce06 	br	101a89c <__alt_data_end+0xff01a89c>
 101a964:	a825883a 	mov	r18,r21
 101a968:	8445c83a 	sub	r2,r16,r17
 101a96c:	00c003c4 	movi	r3,15
 101a970:	18802636 	bltu	r3,r2,101aa0c <_realloc_r+0x1dc>
 101a974:	99800117 	ldw	r6,4(r19)
 101a978:	9c07883a 	add	r3,r19,r16
 101a97c:	3180004c 	andi	r6,r6,1
 101a980:	3420b03a 	or	r16,r6,r16
 101a984:	9c000115 	stw	r16,4(r19)
 101a988:	18800117 	ldw	r2,4(r3)
 101a98c:	10800054 	ori	r2,r2,1
 101a990:	18800115 	stw	r2,4(r3)
 101a994:	a009883a 	mov	r4,r20
 101a998:	1022bac0 	call	1022bac <__malloc_unlock>
 101a99c:	9005883a 	mov	r2,r18
 101a9a0:	dfc00917 	ldw	ra,36(sp)
 101a9a4:	df000817 	ldw	fp,32(sp)
 101a9a8:	ddc00717 	ldw	r23,28(sp)
 101a9ac:	dd800617 	ldw	r22,24(sp)
 101a9b0:	dd400517 	ldw	r21,20(sp)
 101a9b4:	dd000417 	ldw	r20,16(sp)
 101a9b8:	dcc00317 	ldw	r19,12(sp)
 101a9bc:	dc800217 	ldw	r18,8(sp)
 101a9c0:	dc400117 	ldw	r17,4(sp)
 101a9c4:	dc000017 	ldw	r16,0(sp)
 101a9c8:	dec00a04 	addi	sp,sp,40
 101a9cc:	f800283a 	ret
 101a9d0:	017fff04 	movi	r5,-4
 101a9d4:	414a703a 	and	r5,r8,r5
 101a9d8:	814d883a 	add	r6,r16,r5
 101a9dc:	30c01f16 	blt	r6,r3,101aa5c <_realloc_r+0x22c>
 101a9e0:	20800317 	ldw	r2,12(r4)
 101a9e4:	20c00217 	ldw	r3,8(r4)
 101a9e8:	a825883a 	mov	r18,r21
 101a9ec:	3021883a 	mov	r16,r6
 101a9f0:	18800315 	stw	r2,12(r3)
 101a9f4:	10c00215 	stw	r3,8(r2)
 101a9f8:	003fdb06 	br	101a968 <__alt_data_end+0xff01a968>
 101a9fc:	00800304 	movi	r2,12
 101aa00:	a0800015 	stw	r2,0(r20)
 101aa04:	0005883a 	mov	r2,zero
 101aa08:	003fe506 	br	101a9a0 <__alt_data_end+0xff01a9a0>
 101aa0c:	98c00117 	ldw	r3,4(r19)
 101aa10:	9c4b883a 	add	r5,r19,r17
 101aa14:	11000054 	ori	r4,r2,1
 101aa18:	18c0004c 	andi	r3,r3,1
 101aa1c:	1c62b03a 	or	r17,r3,r17
 101aa20:	9c400115 	stw	r17,4(r19)
 101aa24:	29000115 	stw	r4,4(r5)
 101aa28:	2885883a 	add	r2,r5,r2
 101aa2c:	10c00117 	ldw	r3,4(r2)
 101aa30:	29400204 	addi	r5,r5,8
 101aa34:	a009883a 	mov	r4,r20
 101aa38:	18c00054 	ori	r3,r3,1
 101aa3c:	10c00115 	stw	r3,4(r2)
 101aa40:	101e6940 	call	101e694 <_free_r>
 101aa44:	003fd306 	br	101a994 <__alt_data_end+0xff01a994>
 101aa48:	017fff04 	movi	r5,-4
 101aa4c:	414a703a 	and	r5,r8,r5
 101aa50:	89800404 	addi	r6,r17,16
 101aa54:	8151883a 	add	r8,r16,r5
 101aa58:	4180590e 	bge	r8,r6,101abc0 <_realloc_r+0x390>
 101aa5c:	1080004c 	andi	r2,r2,1
 101aa60:	103f9e1e 	bne	r2,zero,101a8dc <__alt_data_end+0xff01a8dc>
 101aa64:	adbffe17 	ldw	r22,-8(r21)
 101aa68:	00bfff04 	movi	r2,-4
 101aa6c:	9dadc83a 	sub	r22,r19,r22
 101aa70:	b1800117 	ldw	r6,4(r22)
 101aa74:	3084703a 	and	r2,r6,r2
 101aa78:	20002026 	beq	r4,zero,101aafc <_realloc_r+0x2cc>
 101aa7c:	80af883a 	add	r23,r16,r2
 101aa80:	b96f883a 	add	r23,r23,r5
 101aa84:	21c05f26 	beq	r4,r7,101ac04 <_realloc_r+0x3d4>
 101aa88:	b8c01c16 	blt	r23,r3,101aafc <_realloc_r+0x2cc>
 101aa8c:	20800317 	ldw	r2,12(r4)
 101aa90:	20c00217 	ldw	r3,8(r4)
 101aa94:	81bfff04 	addi	r6,r16,-4
 101aa98:	01000904 	movi	r4,36
 101aa9c:	18800315 	stw	r2,12(r3)
 101aaa0:	10c00215 	stw	r3,8(r2)
 101aaa4:	b0c00217 	ldw	r3,8(r22)
 101aaa8:	b0800317 	ldw	r2,12(r22)
 101aaac:	b4800204 	addi	r18,r22,8
 101aab0:	18800315 	stw	r2,12(r3)
 101aab4:	10c00215 	stw	r3,8(r2)
 101aab8:	21801b36 	bltu	r4,r6,101ab28 <_realloc_r+0x2f8>
 101aabc:	008004c4 	movi	r2,19
 101aac0:	1180352e 	bgeu	r2,r6,101ab98 <_realloc_r+0x368>
 101aac4:	a8800017 	ldw	r2,0(r21)
 101aac8:	b0800215 	stw	r2,8(r22)
 101aacc:	a8800117 	ldw	r2,4(r21)
 101aad0:	b0800315 	stw	r2,12(r22)
 101aad4:	008006c4 	movi	r2,27
 101aad8:	11807f36 	bltu	r2,r6,101acd8 <_realloc_r+0x4a8>
 101aadc:	b0800404 	addi	r2,r22,16
 101aae0:	ad400204 	addi	r21,r21,8
 101aae4:	00002d06 	br	101ab9c <_realloc_r+0x36c>
 101aae8:	adbffe17 	ldw	r22,-8(r21)
 101aaec:	00bfff04 	movi	r2,-4
 101aaf0:	9dadc83a 	sub	r22,r19,r22
 101aaf4:	b1000117 	ldw	r4,4(r22)
 101aaf8:	2084703a 	and	r2,r4,r2
 101aafc:	b03f7726 	beq	r22,zero,101a8dc <__alt_data_end+0xff01a8dc>
 101ab00:	80af883a 	add	r23,r16,r2
 101ab04:	b8ff7516 	blt	r23,r3,101a8dc <__alt_data_end+0xff01a8dc>
 101ab08:	b0800317 	ldw	r2,12(r22)
 101ab0c:	b0c00217 	ldw	r3,8(r22)
 101ab10:	81bfff04 	addi	r6,r16,-4
 101ab14:	01000904 	movi	r4,36
 101ab18:	18800315 	stw	r2,12(r3)
 101ab1c:	10c00215 	stw	r3,8(r2)
 101ab20:	b4800204 	addi	r18,r22,8
 101ab24:	21bfe52e 	bgeu	r4,r6,101aabc <__alt_data_end+0xff01aabc>
 101ab28:	a80b883a 	mov	r5,r21
 101ab2c:	9009883a 	mov	r4,r18
 101ab30:	10196d80 	call	10196d8 <memmove>
 101ab34:	b821883a 	mov	r16,r23
 101ab38:	b027883a 	mov	r19,r22
 101ab3c:	003f8a06 	br	101a968 <__alt_data_end+0xff01a968>
 101ab40:	300b883a 	mov	r5,r6
 101ab44:	dfc00917 	ldw	ra,36(sp)
 101ab48:	df000817 	ldw	fp,32(sp)
 101ab4c:	ddc00717 	ldw	r23,28(sp)
 101ab50:	dd800617 	ldw	r22,24(sp)
 101ab54:	dd400517 	ldw	r21,20(sp)
 101ab58:	dd000417 	ldw	r20,16(sp)
 101ab5c:	dcc00317 	ldw	r19,12(sp)
 101ab60:	dc800217 	ldw	r18,8(sp)
 101ab64:	dc400117 	ldw	r17,4(sp)
 101ab68:	dc000017 	ldw	r16,0(sp)
 101ab6c:	dec00a04 	addi	sp,sp,40
 101ab70:	1018de81 	jmpi	1018de8 <_malloc_r>
 101ab74:	a8c00017 	ldw	r3,0(r21)
 101ab78:	90c00015 	stw	r3,0(r18)
 101ab7c:	a8c00117 	ldw	r3,4(r21)
 101ab80:	90c00115 	stw	r3,4(r18)
 101ab84:	00c006c4 	movi	r3,27
 101ab88:	19804536 	bltu	r3,r6,101aca0 <_realloc_r+0x470>
 101ab8c:	90800204 	addi	r2,r18,8
 101ab90:	a8c00204 	addi	r3,r21,8
 101ab94:	003f6306 	br	101a924 <__alt_data_end+0xff01a924>
 101ab98:	9005883a 	mov	r2,r18
 101ab9c:	a8c00017 	ldw	r3,0(r21)
 101aba0:	b821883a 	mov	r16,r23
 101aba4:	b027883a 	mov	r19,r22
 101aba8:	10c00015 	stw	r3,0(r2)
 101abac:	a8c00117 	ldw	r3,4(r21)
 101abb0:	10c00115 	stw	r3,4(r2)
 101abb4:	a8c00217 	ldw	r3,8(r21)
 101abb8:	10c00215 	stw	r3,8(r2)
 101abbc:	003f6a06 	br	101a968 <__alt_data_end+0xff01a968>
 101abc0:	9c67883a 	add	r19,r19,r17
 101abc4:	4445c83a 	sub	r2,r8,r17
 101abc8:	e4c00215 	stw	r19,8(fp)
 101abcc:	10800054 	ori	r2,r2,1
 101abd0:	98800115 	stw	r2,4(r19)
 101abd4:	a8bfff17 	ldw	r2,-4(r21)
 101abd8:	a009883a 	mov	r4,r20
 101abdc:	1080004c 	andi	r2,r2,1
 101abe0:	1462b03a 	or	r17,r2,r17
 101abe4:	ac7fff15 	stw	r17,-4(r21)
 101abe8:	1022bac0 	call	1022bac <__malloc_unlock>
 101abec:	a805883a 	mov	r2,r21
 101abf0:	003f6b06 	br	101a9a0 <__alt_data_end+0xff01a9a0>
 101abf4:	a80b883a 	mov	r5,r21
 101abf8:	9009883a 	mov	r4,r18
 101abfc:	10196d80 	call	10196d8 <memmove>
 101ac00:	003f4e06 	br	101a93c <__alt_data_end+0xff01a93c>
 101ac04:	89000404 	addi	r4,r17,16
 101ac08:	b93fbc16 	blt	r23,r4,101aafc <__alt_data_end+0xff01aafc>
 101ac0c:	b0800317 	ldw	r2,12(r22)
 101ac10:	b0c00217 	ldw	r3,8(r22)
 101ac14:	81bfff04 	addi	r6,r16,-4
 101ac18:	01000904 	movi	r4,36
 101ac1c:	18800315 	stw	r2,12(r3)
 101ac20:	10c00215 	stw	r3,8(r2)
 101ac24:	b4800204 	addi	r18,r22,8
 101ac28:	21804336 	bltu	r4,r6,101ad38 <_realloc_r+0x508>
 101ac2c:	008004c4 	movi	r2,19
 101ac30:	11803f2e 	bgeu	r2,r6,101ad30 <_realloc_r+0x500>
 101ac34:	a8800017 	ldw	r2,0(r21)
 101ac38:	b0800215 	stw	r2,8(r22)
 101ac3c:	a8800117 	ldw	r2,4(r21)
 101ac40:	b0800315 	stw	r2,12(r22)
 101ac44:	008006c4 	movi	r2,27
 101ac48:	11803f36 	bltu	r2,r6,101ad48 <_realloc_r+0x518>
 101ac4c:	b0800404 	addi	r2,r22,16
 101ac50:	ad400204 	addi	r21,r21,8
 101ac54:	a8c00017 	ldw	r3,0(r21)
 101ac58:	10c00015 	stw	r3,0(r2)
 101ac5c:	a8c00117 	ldw	r3,4(r21)
 101ac60:	10c00115 	stw	r3,4(r2)
 101ac64:	a8c00217 	ldw	r3,8(r21)
 101ac68:	10c00215 	stw	r3,8(r2)
 101ac6c:	b447883a 	add	r3,r22,r17
 101ac70:	bc45c83a 	sub	r2,r23,r17
 101ac74:	e0c00215 	stw	r3,8(fp)
 101ac78:	10800054 	ori	r2,r2,1
 101ac7c:	18800115 	stw	r2,4(r3)
 101ac80:	b0800117 	ldw	r2,4(r22)
 101ac84:	a009883a 	mov	r4,r20
 101ac88:	1080004c 	andi	r2,r2,1
 101ac8c:	1462b03a 	or	r17,r2,r17
 101ac90:	b4400115 	stw	r17,4(r22)
 101ac94:	1022bac0 	call	1022bac <__malloc_unlock>
 101ac98:	9005883a 	mov	r2,r18
 101ac9c:	003f4006 	br	101a9a0 <__alt_data_end+0xff01a9a0>
 101aca0:	a8c00217 	ldw	r3,8(r21)
 101aca4:	90c00215 	stw	r3,8(r18)
 101aca8:	a8c00317 	ldw	r3,12(r21)
 101acac:	90c00315 	stw	r3,12(r18)
 101acb0:	30801126 	beq	r6,r2,101acf8 <_realloc_r+0x4c8>
 101acb4:	90800404 	addi	r2,r18,16
 101acb8:	a8c00404 	addi	r3,r21,16
 101acbc:	003f1906 	br	101a924 <__alt_data_end+0xff01a924>
 101acc0:	90ffff17 	ldw	r3,-4(r18)
 101acc4:	00bfff04 	movi	r2,-4
 101acc8:	a825883a 	mov	r18,r21
 101accc:	1884703a 	and	r2,r3,r2
 101acd0:	80a1883a 	add	r16,r16,r2
 101acd4:	003f2406 	br	101a968 <__alt_data_end+0xff01a968>
 101acd8:	a8800217 	ldw	r2,8(r21)
 101acdc:	b0800415 	stw	r2,16(r22)
 101ace0:	a8800317 	ldw	r2,12(r21)
 101ace4:	b0800515 	stw	r2,20(r22)
 101ace8:	31000a26 	beq	r6,r4,101ad14 <_realloc_r+0x4e4>
 101acec:	b0800604 	addi	r2,r22,24
 101acf0:	ad400404 	addi	r21,r21,16
 101acf4:	003fa906 	br	101ab9c <__alt_data_end+0xff01ab9c>
 101acf8:	a9000417 	ldw	r4,16(r21)
 101acfc:	90800604 	addi	r2,r18,24
 101ad00:	a8c00604 	addi	r3,r21,24
 101ad04:	91000415 	stw	r4,16(r18)
 101ad08:	a9000517 	ldw	r4,20(r21)
 101ad0c:	91000515 	stw	r4,20(r18)
 101ad10:	003f0406 	br	101a924 <__alt_data_end+0xff01a924>
 101ad14:	a8c00417 	ldw	r3,16(r21)
 101ad18:	ad400604 	addi	r21,r21,24
 101ad1c:	b0800804 	addi	r2,r22,32
 101ad20:	b0c00615 	stw	r3,24(r22)
 101ad24:	a8ffff17 	ldw	r3,-4(r21)
 101ad28:	b0c00715 	stw	r3,28(r22)
 101ad2c:	003f9b06 	br	101ab9c <__alt_data_end+0xff01ab9c>
 101ad30:	9005883a 	mov	r2,r18
 101ad34:	003fc706 	br	101ac54 <__alt_data_end+0xff01ac54>
 101ad38:	a80b883a 	mov	r5,r21
 101ad3c:	9009883a 	mov	r4,r18
 101ad40:	10196d80 	call	10196d8 <memmove>
 101ad44:	003fc906 	br	101ac6c <__alt_data_end+0xff01ac6c>
 101ad48:	a8800217 	ldw	r2,8(r21)
 101ad4c:	b0800415 	stw	r2,16(r22)
 101ad50:	a8800317 	ldw	r2,12(r21)
 101ad54:	b0800515 	stw	r2,20(r22)
 101ad58:	31000726 	beq	r6,r4,101ad78 <_realloc_r+0x548>
 101ad5c:	b0800604 	addi	r2,r22,24
 101ad60:	ad400404 	addi	r21,r21,16
 101ad64:	003fbb06 	br	101ac54 <__alt_data_end+0xff01ac54>
 101ad68:	a009883a 	mov	r4,r20
 101ad6c:	1022bac0 	call	1022bac <__malloc_unlock>
 101ad70:	0005883a 	mov	r2,zero
 101ad74:	003f0a06 	br	101a9a0 <__alt_data_end+0xff01a9a0>
 101ad78:	a8c00417 	ldw	r3,16(r21)
 101ad7c:	ad400604 	addi	r21,r21,24
 101ad80:	b0800804 	addi	r2,r22,32
 101ad84:	b0c00615 	stw	r3,24(r22)
 101ad88:	a8ffff17 	ldw	r3,-4(r21)
 101ad8c:	b0c00715 	stw	r3,28(r22)
 101ad90:	003fb006 	br	101ac54 <__alt_data_end+0xff01ac54>

0101ad94 <__fpclassifyd>:
 101ad94:	00a00034 	movhi	r2,32768
 101ad98:	10bfffc4 	addi	r2,r2,-1
 101ad9c:	2884703a 	and	r2,r5,r2
 101ada0:	10000726 	beq	r2,zero,101adc0 <__fpclassifyd+0x2c>
 101ada4:	00fffc34 	movhi	r3,65520
 101ada8:	019ff834 	movhi	r6,32736
 101adac:	28c7883a 	add	r3,r5,r3
 101adb0:	31bfffc4 	addi	r6,r6,-1
 101adb4:	30c00536 	bltu	r6,r3,101adcc <__fpclassifyd+0x38>
 101adb8:	00800104 	movi	r2,4
 101adbc:	f800283a 	ret
 101adc0:	2000021e 	bne	r4,zero,101adcc <__fpclassifyd+0x38>
 101adc4:	00800084 	movi	r2,2
 101adc8:	f800283a 	ret
 101adcc:	00dffc34 	movhi	r3,32752
 101add0:	019ff834 	movhi	r6,32736
 101add4:	28cb883a 	add	r5,r5,r3
 101add8:	31bfffc4 	addi	r6,r6,-1
 101addc:	317ff62e 	bgeu	r6,r5,101adb8 <__alt_data_end+0xff01adb8>
 101ade0:	01400434 	movhi	r5,16
 101ade4:	297fffc4 	addi	r5,r5,-1
 101ade8:	28800236 	bltu	r5,r2,101adf4 <__fpclassifyd+0x60>
 101adec:	008000c4 	movi	r2,3
 101adf0:	f800283a 	ret
 101adf4:	10c00226 	beq	r2,r3,101ae00 <__fpclassifyd+0x6c>
 101adf8:	0005883a 	mov	r2,zero
 101adfc:	f800283a 	ret
 101ae00:	2005003a 	cmpeq	r2,r4,zero
 101ae04:	f800283a 	ret

0101ae08 <_sbrk_r>:
 101ae08:	defffd04 	addi	sp,sp,-12
 101ae0c:	dc000015 	stw	r16,0(sp)
 101ae10:	040040f4 	movhi	r16,259
 101ae14:	dc400115 	stw	r17,4(sp)
 101ae18:	84289604 	addi	r16,r16,-23976
 101ae1c:	2023883a 	mov	r17,r4
 101ae20:	2809883a 	mov	r4,r5
 101ae24:	dfc00215 	stw	ra,8(sp)
 101ae28:	80000015 	stw	zero,0(r16)
 101ae2c:	1022d6c0 	call	1022d6c <sbrk>
 101ae30:	00ffffc4 	movi	r3,-1
 101ae34:	10c00526 	beq	r2,r3,101ae4c <_sbrk_r+0x44>
 101ae38:	dfc00217 	ldw	ra,8(sp)
 101ae3c:	dc400117 	ldw	r17,4(sp)
 101ae40:	dc000017 	ldw	r16,0(sp)
 101ae44:	dec00304 	addi	sp,sp,12
 101ae48:	f800283a 	ret
 101ae4c:	80c00017 	ldw	r3,0(r16)
 101ae50:	183ff926 	beq	r3,zero,101ae38 <__alt_data_end+0xff01ae38>
 101ae54:	88c00015 	stw	r3,0(r17)
 101ae58:	003ff706 	br	101ae38 <__alt_data_end+0xff01ae38>

0101ae5c <_init_signal_r>:
 101ae5c:	2080b717 	ldw	r2,732(r4)
 101ae60:	10000226 	beq	r2,zero,101ae6c <_init_signal_r+0x10>
 101ae64:	0005883a 	mov	r2,zero
 101ae68:	f800283a 	ret
 101ae6c:	defffe04 	addi	sp,sp,-8
 101ae70:	01402004 	movi	r5,128
 101ae74:	dc000015 	stw	r16,0(sp)
 101ae78:	dfc00115 	stw	ra,4(sp)
 101ae7c:	2021883a 	mov	r16,r4
 101ae80:	1018de80 	call	1018de8 <_malloc_r>
 101ae84:	8080b715 	stw	r2,732(r16)
 101ae88:	10000d26 	beq	r2,zero,101aec0 <_init_signal_r+0x64>
 101ae8c:	0007883a 	mov	r3,zero
 101ae90:	01002004 	movi	r4,128
 101ae94:	00000106 	br	101ae9c <_init_signal_r+0x40>
 101ae98:	8080b717 	ldw	r2,732(r16)
 101ae9c:	10c5883a 	add	r2,r2,r3
 101aea0:	10000015 	stw	zero,0(r2)
 101aea4:	18c00104 	addi	r3,r3,4
 101aea8:	193ffb1e 	bne	r3,r4,101ae98 <__alt_data_end+0xff01ae98>
 101aeac:	0005883a 	mov	r2,zero
 101aeb0:	dfc00117 	ldw	ra,4(sp)
 101aeb4:	dc000017 	ldw	r16,0(sp)
 101aeb8:	dec00204 	addi	sp,sp,8
 101aebc:	f800283a 	ret
 101aec0:	00bfffc4 	movi	r2,-1
 101aec4:	003ffa06 	br	101aeb0 <__alt_data_end+0xff01aeb0>

0101aec8 <_signal_r>:
 101aec8:	00c007c4 	movi	r3,31
 101aecc:	19401536 	bltu	r3,r5,101af24 <_signal_r+0x5c>
 101aed0:	2080b717 	ldw	r2,732(r4)
 101aed4:	defffc04 	addi	sp,sp,-16
 101aed8:	dc800215 	stw	r18,8(sp)
 101aedc:	dc400115 	stw	r17,4(sp)
 101aee0:	dc000015 	stw	r16,0(sp)
 101aee4:	dfc00315 	stw	ra,12(sp)
 101aee8:	3023883a 	mov	r17,r6
 101aeec:	2021883a 	mov	r16,r4
 101aef0:	2825883a 	mov	r18,r5
 101aef4:	10000f26 	beq	r2,zero,101af34 <_signal_r+0x6c>
 101aef8:	948b883a 	add	r5,r18,r18
 101aefc:	294b883a 	add	r5,r5,r5
 101af00:	114b883a 	add	r5,r2,r5
 101af04:	28800017 	ldw	r2,0(r5)
 101af08:	2c400015 	stw	r17,0(r5)
 101af0c:	dfc00317 	ldw	ra,12(sp)
 101af10:	dc800217 	ldw	r18,8(sp)
 101af14:	dc400117 	ldw	r17,4(sp)
 101af18:	dc000017 	ldw	r16,0(sp)
 101af1c:	dec00404 	addi	sp,sp,16
 101af20:	f800283a 	ret
 101af24:	00c00584 	movi	r3,22
 101af28:	20c00015 	stw	r3,0(r4)
 101af2c:	00bfffc4 	movi	r2,-1
 101af30:	f800283a 	ret
 101af34:	101ae5c0 	call	101ae5c <_init_signal_r>
 101af38:	1000021e 	bne	r2,zero,101af44 <_signal_r+0x7c>
 101af3c:	8080b717 	ldw	r2,732(r16)
 101af40:	003fed06 	br	101aef8 <__alt_data_end+0xff01aef8>
 101af44:	00bfffc4 	movi	r2,-1
 101af48:	003ff006 	br	101af0c <__alt_data_end+0xff01af0c>

0101af4c <_raise_r>:
 101af4c:	008007c4 	movi	r2,31
 101af50:	11402936 	bltu	r2,r5,101aff8 <_raise_r+0xac>
 101af54:	20c0b717 	ldw	r3,732(r4)
 101af58:	defffd04 	addi	sp,sp,-12
 101af5c:	dc400115 	stw	r17,4(sp)
 101af60:	dc000015 	stw	r16,0(sp)
 101af64:	dfc00215 	stw	ra,8(sp)
 101af68:	2021883a 	mov	r16,r4
 101af6c:	2823883a 	mov	r17,r5
 101af70:	18001726 	beq	r3,zero,101afd0 <_raise_r+0x84>
 101af74:	2945883a 	add	r2,r5,r5
 101af78:	1085883a 	add	r2,r2,r2
 101af7c:	1887883a 	add	r3,r3,r2
 101af80:	19800017 	ldw	r6,0(r3)
 101af84:	30001226 	beq	r6,zero,101afd0 <_raise_r+0x84>
 101af88:	00800044 	movi	r2,1
 101af8c:	30800e26 	beq	r6,r2,101afc8 <_raise_r+0x7c>
 101af90:	013fffc4 	movi	r4,-1
 101af94:	31000926 	beq	r6,r4,101afbc <_raise_r+0x70>
 101af98:	18000015 	stw	zero,0(r3)
 101af9c:	2809883a 	mov	r4,r5
 101afa0:	303ee83a 	callr	r6
 101afa4:	0005883a 	mov	r2,zero
 101afa8:	dfc00217 	ldw	ra,8(sp)
 101afac:	dc400117 	ldw	r17,4(sp)
 101afb0:	dc000017 	ldw	r16,0(sp)
 101afb4:	dec00304 	addi	sp,sp,12
 101afb8:	f800283a 	ret
 101afbc:	00c00584 	movi	r3,22
 101afc0:	80c00015 	stw	r3,0(r16)
 101afc4:	003ff806 	br	101afa8 <__alt_data_end+0xff01afa8>
 101afc8:	0005883a 	mov	r2,zero
 101afcc:	003ff606 	br	101afa8 <__alt_data_end+0xff01afa8>
 101afd0:	8009883a 	mov	r4,r16
 101afd4:	101b15c0 	call	101b15c <_getpid_r>
 101afd8:	880d883a 	mov	r6,r17
 101afdc:	100b883a 	mov	r5,r2
 101afe0:	8009883a 	mov	r4,r16
 101afe4:	dfc00217 	ldw	ra,8(sp)
 101afe8:	dc400117 	ldw	r17,4(sp)
 101afec:	dc000017 	ldw	r16,0(sp)
 101aff0:	dec00304 	addi	sp,sp,12
 101aff4:	101b1001 	jmpi	101b100 <_kill_r>
 101aff8:	00800584 	movi	r2,22
 101affc:	20800015 	stw	r2,0(r4)
 101b000:	00bfffc4 	movi	r2,-1
 101b004:	f800283a 	ret

0101b008 <__sigtramp_r>:
 101b008:	008007c4 	movi	r2,31
 101b00c:	11402436 	bltu	r2,r5,101b0a0 <__sigtramp_r+0x98>
 101b010:	20c0b717 	ldw	r3,732(r4)
 101b014:	defffd04 	addi	sp,sp,-12
 101b018:	dc400115 	stw	r17,4(sp)
 101b01c:	dc000015 	stw	r16,0(sp)
 101b020:	dfc00215 	stw	ra,8(sp)
 101b024:	2021883a 	mov	r16,r4
 101b028:	2823883a 	mov	r17,r5
 101b02c:	18001826 	beq	r3,zero,101b090 <__sigtramp_r+0x88>
 101b030:	8c45883a 	add	r2,r17,r17
 101b034:	1085883a 	add	r2,r2,r2
 101b038:	1885883a 	add	r2,r3,r2
 101b03c:	10c00017 	ldw	r3,0(r2)
 101b040:	18001126 	beq	r3,zero,101b088 <__sigtramp_r+0x80>
 101b044:	013fffc4 	movi	r4,-1
 101b048:	19000d26 	beq	r3,r4,101b080 <__sigtramp_r+0x78>
 101b04c:	01000044 	movi	r4,1
 101b050:	19000926 	beq	r3,r4,101b078 <__sigtramp_r+0x70>
 101b054:	10000015 	stw	zero,0(r2)
 101b058:	8809883a 	mov	r4,r17
 101b05c:	183ee83a 	callr	r3
 101b060:	0005883a 	mov	r2,zero
 101b064:	dfc00217 	ldw	ra,8(sp)
 101b068:	dc400117 	ldw	r17,4(sp)
 101b06c:	dc000017 	ldw	r16,0(sp)
 101b070:	dec00304 	addi	sp,sp,12
 101b074:	f800283a 	ret
 101b078:	008000c4 	movi	r2,3
 101b07c:	003ff906 	br	101b064 <__alt_data_end+0xff01b064>
 101b080:	00800084 	movi	r2,2
 101b084:	003ff706 	br	101b064 <__alt_data_end+0xff01b064>
 101b088:	00800044 	movi	r2,1
 101b08c:	003ff506 	br	101b064 <__alt_data_end+0xff01b064>
 101b090:	101ae5c0 	call	101ae5c <_init_signal_r>
 101b094:	1000041e 	bne	r2,zero,101b0a8 <__sigtramp_r+0xa0>
 101b098:	80c0b717 	ldw	r3,732(r16)
 101b09c:	003fe406 	br	101b030 <__alt_data_end+0xff01b030>
 101b0a0:	00bfffc4 	movi	r2,-1
 101b0a4:	f800283a 	ret
 101b0a8:	00bfffc4 	movi	r2,-1
 101b0ac:	003fed06 	br	101b064 <__alt_data_end+0xff01b064>

0101b0b0 <raise>:
 101b0b0:	008040f4 	movhi	r2,259
 101b0b4:	10a17104 	addi	r2,r2,-31292
 101b0b8:	200b883a 	mov	r5,r4
 101b0bc:	11000017 	ldw	r4,0(r2)
 101b0c0:	101af4c1 	jmpi	101af4c <_raise_r>

0101b0c4 <signal>:
 101b0c4:	008040f4 	movhi	r2,259
 101b0c8:	10a17104 	addi	r2,r2,-31292
 101b0cc:	280d883a 	mov	r6,r5
 101b0d0:	200b883a 	mov	r5,r4
 101b0d4:	11000017 	ldw	r4,0(r2)
 101b0d8:	101aec81 	jmpi	101aec8 <_signal_r>

0101b0dc <_init_signal>:
 101b0dc:	008040f4 	movhi	r2,259
 101b0e0:	10a17104 	addi	r2,r2,-31292
 101b0e4:	11000017 	ldw	r4,0(r2)
 101b0e8:	101ae5c1 	jmpi	101ae5c <_init_signal_r>

0101b0ec <__sigtramp>:
 101b0ec:	008040f4 	movhi	r2,259
 101b0f0:	10a17104 	addi	r2,r2,-31292
 101b0f4:	200b883a 	mov	r5,r4
 101b0f8:	11000017 	ldw	r4,0(r2)
 101b0fc:	101b0081 	jmpi	101b008 <__sigtramp_r>

0101b100 <_kill_r>:
 101b100:	defffd04 	addi	sp,sp,-12
 101b104:	2805883a 	mov	r2,r5
 101b108:	dc000015 	stw	r16,0(sp)
 101b10c:	040040f4 	movhi	r16,259
 101b110:	dc400115 	stw	r17,4(sp)
 101b114:	84289604 	addi	r16,r16,-23976
 101b118:	2023883a 	mov	r17,r4
 101b11c:	300b883a 	mov	r5,r6
 101b120:	1009883a 	mov	r4,r2
 101b124:	dfc00215 	stw	ra,8(sp)
 101b128:	80000015 	stw	zero,0(r16)
 101b12c:	10227e00 	call	10227e0 <kill>
 101b130:	00ffffc4 	movi	r3,-1
 101b134:	10c00526 	beq	r2,r3,101b14c <_kill_r+0x4c>
 101b138:	dfc00217 	ldw	ra,8(sp)
 101b13c:	dc400117 	ldw	r17,4(sp)
 101b140:	dc000017 	ldw	r16,0(sp)
 101b144:	dec00304 	addi	sp,sp,12
 101b148:	f800283a 	ret
 101b14c:	80c00017 	ldw	r3,0(r16)
 101b150:	183ff926 	beq	r3,zero,101b138 <__alt_data_end+0xff01b138>
 101b154:	88c00015 	stw	r3,0(r17)
 101b158:	003ff706 	br	101b138 <__alt_data_end+0xff01b138>

0101b15c <_getpid_r>:
 101b15c:	10225341 	jmpi	1022534 <getpid>

0101b160 <__sread>:
 101b160:	defffe04 	addi	sp,sp,-8
 101b164:	dc000015 	stw	r16,0(sp)
 101b168:	2821883a 	mov	r16,r5
 101b16c:	2940038f 	ldh	r5,14(r5)
 101b170:	dfc00115 	stw	ra,4(sp)
 101b174:	101ebc00 	call	101ebc0 <_read_r>
 101b178:	10000716 	blt	r2,zero,101b198 <__sread+0x38>
 101b17c:	80c01417 	ldw	r3,80(r16)
 101b180:	1887883a 	add	r3,r3,r2
 101b184:	80c01415 	stw	r3,80(r16)
 101b188:	dfc00117 	ldw	ra,4(sp)
 101b18c:	dc000017 	ldw	r16,0(sp)
 101b190:	dec00204 	addi	sp,sp,8
 101b194:	f800283a 	ret
 101b198:	80c0030b 	ldhu	r3,12(r16)
 101b19c:	18fbffcc 	andi	r3,r3,61439
 101b1a0:	80c0030d 	sth	r3,12(r16)
 101b1a4:	dfc00117 	ldw	ra,4(sp)
 101b1a8:	dc000017 	ldw	r16,0(sp)
 101b1ac:	dec00204 	addi	sp,sp,8
 101b1b0:	f800283a 	ret

0101b1b4 <__seofread>:
 101b1b4:	0005883a 	mov	r2,zero
 101b1b8:	f800283a 	ret

0101b1bc <__swrite>:
 101b1bc:	2880030b 	ldhu	r2,12(r5)
 101b1c0:	defffb04 	addi	sp,sp,-20
 101b1c4:	dcc00315 	stw	r19,12(sp)
 101b1c8:	dc800215 	stw	r18,8(sp)
 101b1cc:	dc400115 	stw	r17,4(sp)
 101b1d0:	dc000015 	stw	r16,0(sp)
 101b1d4:	dfc00415 	stw	ra,16(sp)
 101b1d8:	10c0400c 	andi	r3,r2,256
 101b1dc:	2821883a 	mov	r16,r5
 101b1e0:	2023883a 	mov	r17,r4
 101b1e4:	3025883a 	mov	r18,r6
 101b1e8:	3827883a 	mov	r19,r7
 101b1ec:	18000526 	beq	r3,zero,101b204 <__swrite+0x48>
 101b1f0:	2940038f 	ldh	r5,14(r5)
 101b1f4:	01c00084 	movi	r7,2
 101b1f8:	000d883a 	mov	r6,zero
 101b1fc:	101e9a40 	call	101e9a4 <_lseek_r>
 101b200:	8080030b 	ldhu	r2,12(r16)
 101b204:	8140038f 	ldh	r5,14(r16)
 101b208:	10bbffcc 	andi	r2,r2,61439
 101b20c:	980f883a 	mov	r7,r19
 101b210:	900d883a 	mov	r6,r18
 101b214:	8809883a 	mov	r4,r17
 101b218:	8080030d 	sth	r2,12(r16)
 101b21c:	dfc00417 	ldw	ra,16(sp)
 101b220:	dcc00317 	ldw	r19,12(sp)
 101b224:	dc800217 	ldw	r18,8(sp)
 101b228:	dc400117 	ldw	r17,4(sp)
 101b22c:	dc000017 	ldw	r16,0(sp)
 101b230:	dec00504 	addi	sp,sp,20
 101b234:	101dcf01 	jmpi	101dcf0 <_write_r>

0101b238 <__sseek>:
 101b238:	defffe04 	addi	sp,sp,-8
 101b23c:	dc000015 	stw	r16,0(sp)
 101b240:	2821883a 	mov	r16,r5
 101b244:	2940038f 	ldh	r5,14(r5)
 101b248:	dfc00115 	stw	ra,4(sp)
 101b24c:	101e9a40 	call	101e9a4 <_lseek_r>
 101b250:	00ffffc4 	movi	r3,-1
 101b254:	10c00826 	beq	r2,r3,101b278 <__sseek+0x40>
 101b258:	80c0030b 	ldhu	r3,12(r16)
 101b25c:	80801415 	stw	r2,80(r16)
 101b260:	18c40014 	ori	r3,r3,4096
 101b264:	80c0030d 	sth	r3,12(r16)
 101b268:	dfc00117 	ldw	ra,4(sp)
 101b26c:	dc000017 	ldw	r16,0(sp)
 101b270:	dec00204 	addi	sp,sp,8
 101b274:	f800283a 	ret
 101b278:	80c0030b 	ldhu	r3,12(r16)
 101b27c:	18fbffcc 	andi	r3,r3,61439
 101b280:	80c0030d 	sth	r3,12(r16)
 101b284:	dfc00117 	ldw	ra,4(sp)
 101b288:	dc000017 	ldw	r16,0(sp)
 101b28c:	dec00204 	addi	sp,sp,8
 101b290:	f800283a 	ret

0101b294 <__sclose>:
 101b294:	2940038f 	ldh	r5,14(r5)
 101b298:	101dea41 	jmpi	101dea4 <_close_r>

0101b29c <__ssprint_r>:
 101b29c:	30800217 	ldw	r2,8(r6)
 101b2a0:	defff604 	addi	sp,sp,-40
 101b2a4:	dc800215 	stw	r18,8(sp)
 101b2a8:	dfc00915 	stw	ra,36(sp)
 101b2ac:	df000815 	stw	fp,32(sp)
 101b2b0:	ddc00715 	stw	r23,28(sp)
 101b2b4:	dd800615 	stw	r22,24(sp)
 101b2b8:	dd400515 	stw	r21,20(sp)
 101b2bc:	dd000415 	stw	r20,16(sp)
 101b2c0:	dcc00315 	stw	r19,12(sp)
 101b2c4:	dc400115 	stw	r17,4(sp)
 101b2c8:	dc000015 	stw	r16,0(sp)
 101b2cc:	3025883a 	mov	r18,r6
 101b2d0:	10005826 	beq	r2,zero,101b434 <__ssprint_r+0x198>
 101b2d4:	2027883a 	mov	r19,r4
 101b2d8:	35c00017 	ldw	r23,0(r6)
 101b2dc:	29000017 	ldw	r4,0(r5)
 101b2e0:	28800217 	ldw	r2,8(r5)
 101b2e4:	2823883a 	mov	r17,r5
 101b2e8:	0039883a 	mov	fp,zero
 101b2ec:	0021883a 	mov	r16,zero
 101b2f0:	80003926 	beq	r16,zero,101b3d8 <__ssprint_r+0x13c>
 101b2f4:	102b883a 	mov	r21,r2
 101b2f8:	102d883a 	mov	r22,r2
 101b2fc:	80803a36 	bltu	r16,r2,101b3e8 <__ssprint_r+0x14c>
 101b300:	88c0030b 	ldhu	r3,12(r17)
 101b304:	1881200c 	andi	r2,r3,1152
 101b308:	10002626 	beq	r2,zero,101b3a4 <__ssprint_r+0x108>
 101b30c:	88800517 	ldw	r2,20(r17)
 101b310:	89400417 	ldw	r5,16(r17)
 101b314:	81800044 	addi	r6,r16,1
 101b318:	108f883a 	add	r7,r2,r2
 101b31c:	3885883a 	add	r2,r7,r2
 101b320:	100ed7fa 	srli	r7,r2,31
 101b324:	216dc83a 	sub	r22,r4,r5
 101b328:	3589883a 	add	r4,r6,r22
 101b32c:	3885883a 	add	r2,r7,r2
 101b330:	102bd07a 	srai	r21,r2,1
 101b334:	a80d883a 	mov	r6,r21
 101b338:	a900022e 	bgeu	r21,r4,101b344 <__ssprint_r+0xa8>
 101b33c:	202b883a 	mov	r21,r4
 101b340:	200d883a 	mov	r6,r4
 101b344:	18c1000c 	andi	r3,r3,1024
 101b348:	18002a26 	beq	r3,zero,101b3f4 <__ssprint_r+0x158>
 101b34c:	300b883a 	mov	r5,r6
 101b350:	9809883a 	mov	r4,r19
 101b354:	1018de80 	call	1018de8 <_malloc_r>
 101b358:	1029883a 	mov	r20,r2
 101b35c:	10002c26 	beq	r2,zero,101b410 <__ssprint_r+0x174>
 101b360:	89400417 	ldw	r5,16(r17)
 101b364:	b00d883a 	mov	r6,r22
 101b368:	1009883a 	mov	r4,r2
 101b36c:	10139e80 	call	10139e8 <memcpy>
 101b370:	8880030b 	ldhu	r2,12(r17)
 101b374:	00fedfc4 	movi	r3,-1153
 101b378:	10c4703a 	and	r2,r2,r3
 101b37c:	10802014 	ori	r2,r2,128
 101b380:	8880030d 	sth	r2,12(r17)
 101b384:	a589883a 	add	r4,r20,r22
 101b388:	adadc83a 	sub	r22,r21,r22
 101b38c:	8d400515 	stw	r21,20(r17)
 101b390:	8d800215 	stw	r22,8(r17)
 101b394:	8d000415 	stw	r20,16(r17)
 101b398:	89000015 	stw	r4,0(r17)
 101b39c:	802b883a 	mov	r21,r16
 101b3a0:	802d883a 	mov	r22,r16
 101b3a4:	b00d883a 	mov	r6,r22
 101b3a8:	e00b883a 	mov	r5,fp
 101b3ac:	10196d80 	call	10196d8 <memmove>
 101b3b0:	88800217 	ldw	r2,8(r17)
 101b3b4:	89000017 	ldw	r4,0(r17)
 101b3b8:	90c00217 	ldw	r3,8(r18)
 101b3bc:	1545c83a 	sub	r2,r2,r21
 101b3c0:	2589883a 	add	r4,r4,r22
 101b3c4:	88800215 	stw	r2,8(r17)
 101b3c8:	89000015 	stw	r4,0(r17)
 101b3cc:	1c21c83a 	sub	r16,r3,r16
 101b3d0:	94000215 	stw	r16,8(r18)
 101b3d4:	80001726 	beq	r16,zero,101b434 <__ssprint_r+0x198>
 101b3d8:	bf000017 	ldw	fp,0(r23)
 101b3dc:	bc000117 	ldw	r16,4(r23)
 101b3e0:	bdc00204 	addi	r23,r23,8
 101b3e4:	003fc206 	br	101b2f0 <__alt_data_end+0xff01b2f0>
 101b3e8:	802b883a 	mov	r21,r16
 101b3ec:	802d883a 	mov	r22,r16
 101b3f0:	003fec06 	br	101b3a4 <__alt_data_end+0xff01b3a4>
 101b3f4:	9809883a 	mov	r4,r19
 101b3f8:	101a8300 	call	101a830 <_realloc_r>
 101b3fc:	1029883a 	mov	r20,r2
 101b400:	103fe01e 	bne	r2,zero,101b384 <__alt_data_end+0xff01b384>
 101b404:	89400417 	ldw	r5,16(r17)
 101b408:	9809883a 	mov	r4,r19
 101b40c:	101e6940 	call	101e694 <_free_r>
 101b410:	88c0030b 	ldhu	r3,12(r17)
 101b414:	00800304 	movi	r2,12
 101b418:	98800015 	stw	r2,0(r19)
 101b41c:	18c01014 	ori	r3,r3,64
 101b420:	88c0030d 	sth	r3,12(r17)
 101b424:	00bfffc4 	movi	r2,-1
 101b428:	90000215 	stw	zero,8(r18)
 101b42c:	90000115 	stw	zero,4(r18)
 101b430:	00000206 	br	101b43c <__ssprint_r+0x1a0>
 101b434:	90000115 	stw	zero,4(r18)
 101b438:	0005883a 	mov	r2,zero
 101b43c:	dfc00917 	ldw	ra,36(sp)
 101b440:	df000817 	ldw	fp,32(sp)
 101b444:	ddc00717 	ldw	r23,28(sp)
 101b448:	dd800617 	ldw	r22,24(sp)
 101b44c:	dd400517 	ldw	r21,20(sp)
 101b450:	dd000417 	ldw	r20,16(sp)
 101b454:	dcc00317 	ldw	r19,12(sp)
 101b458:	dc800217 	ldw	r18,8(sp)
 101b45c:	dc400117 	ldw	r17,4(sp)
 101b460:	dc000017 	ldw	r16,0(sp)
 101b464:	dec00a04 	addi	sp,sp,40
 101b468:	f800283a 	ret

0101b46c <___svfiprintf_internal_r>:
 101b46c:	2880030b 	ldhu	r2,12(r5)
 101b470:	deffc804 	addi	sp,sp,-224
 101b474:	dcc03115 	stw	r19,196(sp)
 101b478:	dfc03715 	stw	ra,220(sp)
 101b47c:	df003615 	stw	fp,216(sp)
 101b480:	ddc03515 	stw	r23,212(sp)
 101b484:	dd803415 	stw	r22,208(sp)
 101b488:	dd403315 	stw	r21,204(sp)
 101b48c:	dd003215 	stw	r20,200(sp)
 101b490:	dc803015 	stw	r18,192(sp)
 101b494:	dc402f15 	stw	r17,188(sp)
 101b498:	dc002e15 	stw	r16,184(sp)
 101b49c:	d9402715 	stw	r5,156(sp)
 101b4a0:	d9002a15 	stw	r4,168(sp)
 101b4a4:	1080200c 	andi	r2,r2,128
 101b4a8:	d9c02315 	stw	r7,140(sp)
 101b4ac:	3027883a 	mov	r19,r6
 101b4b0:	10000226 	beq	r2,zero,101b4bc <___svfiprintf_internal_r+0x50>
 101b4b4:	28800417 	ldw	r2,16(r5)
 101b4b8:	10041d26 	beq	r2,zero,101c530 <___svfiprintf_internal_r+0x10c4>
 101b4bc:	dac01a04 	addi	r11,sp,104
 101b4c0:	dac01e15 	stw	r11,120(sp)
 101b4c4:	d8801e17 	ldw	r2,120(sp)
 101b4c8:	dac019c4 	addi	r11,sp,103
 101b4cc:	dd402a17 	ldw	r21,168(sp)
 101b4d0:	ddc02717 	ldw	r23,156(sp)
 101b4d4:	058040b4 	movhi	r22,258
 101b4d8:	050040b4 	movhi	r20,258
 101b4dc:	dac01f15 	stw	r11,124(sp)
 101b4e0:	12d7c83a 	sub	r11,r2,r11
 101b4e4:	b59a2d04 	addi	r22,r22,26804
 101b4e8:	a51a2904 	addi	r20,r20,26788
 101b4ec:	dec01a15 	stw	sp,104(sp)
 101b4f0:	d8001c15 	stw	zero,112(sp)
 101b4f4:	d8001b15 	stw	zero,108(sp)
 101b4f8:	d811883a 	mov	r8,sp
 101b4fc:	d8002915 	stw	zero,164(sp)
 101b500:	d8002515 	stw	zero,148(sp)
 101b504:	dac02b15 	stw	r11,172(sp)
 101b508:	98800007 	ldb	r2,0(r19)
 101b50c:	1002dd26 	beq	r2,zero,101c084 <___svfiprintf_internal_r+0xc18>
 101b510:	00c00944 	movi	r3,37
 101b514:	9823883a 	mov	r17,r19
 101b518:	10c0021e 	bne	r2,r3,101b524 <___svfiprintf_internal_r+0xb8>
 101b51c:	00001406 	br	101b570 <___svfiprintf_internal_r+0x104>
 101b520:	10c00326 	beq	r2,r3,101b530 <___svfiprintf_internal_r+0xc4>
 101b524:	8c400044 	addi	r17,r17,1
 101b528:	88800007 	ldb	r2,0(r17)
 101b52c:	103ffc1e 	bne	r2,zero,101b520 <__alt_data_end+0xff01b520>
 101b530:	8ce1c83a 	sub	r16,r17,r19
 101b534:	80000e26 	beq	r16,zero,101b570 <___svfiprintf_internal_r+0x104>
 101b538:	d8c01c17 	ldw	r3,112(sp)
 101b53c:	d8801b17 	ldw	r2,108(sp)
 101b540:	44c00015 	stw	r19,0(r8)
 101b544:	1c07883a 	add	r3,r3,r16
 101b548:	10800044 	addi	r2,r2,1
 101b54c:	d8c01c15 	stw	r3,112(sp)
 101b550:	44000115 	stw	r16,4(r8)
 101b554:	d8801b15 	stw	r2,108(sp)
 101b558:	00c001c4 	movi	r3,7
 101b55c:	18831e16 	blt	r3,r2,101c1d8 <___svfiprintf_internal_r+0xd6c>
 101b560:	42000204 	addi	r8,r8,8
 101b564:	dac02517 	ldw	r11,148(sp)
 101b568:	5c17883a 	add	r11,r11,r16
 101b56c:	dac02515 	stw	r11,148(sp)
 101b570:	88800007 	ldb	r2,0(r17)
 101b574:	1002c526 	beq	r2,zero,101c08c <___svfiprintf_internal_r+0xc20>
 101b578:	88c00047 	ldb	r3,1(r17)
 101b57c:	8cc00044 	addi	r19,r17,1
 101b580:	d8001d85 	stb	zero,118(sp)
 101b584:	0009883a 	mov	r4,zero
 101b588:	000f883a 	mov	r7,zero
 101b58c:	043fffc4 	movi	r16,-1
 101b590:	d8002415 	stw	zero,144(sp)
 101b594:	0025883a 	mov	r18,zero
 101b598:	01401604 	movi	r5,88
 101b59c:	01800244 	movi	r6,9
 101b5a0:	02800a84 	movi	r10,42
 101b5a4:	02401b04 	movi	r9,108
 101b5a8:	9cc00044 	addi	r19,r19,1
 101b5ac:	18bff804 	addi	r2,r3,-32
 101b5b0:	2881dd36 	bltu	r5,r2,101bd28 <___svfiprintf_internal_r+0x8bc>
 101b5b4:	100490ba 	slli	r2,r2,2
 101b5b8:	02c040b4 	movhi	r11,258
 101b5bc:	5aed7304 	addi	r11,r11,-18996
 101b5c0:	12c5883a 	add	r2,r2,r11
 101b5c4:	10800017 	ldw	r2,0(r2)
 101b5c8:	1000683a 	jmp	r2
 101b5cc:	0101b7c8 	cmpgei	r4,zero,1759
 101b5d0:	0101bd28 	cmpgeui	r4,zero,1780
 101b5d4:	0101bd28 	cmpgeui	r4,zero,1780
 101b5d8:	0101b7bc 	xorhi	r4,zero,1758
 101b5dc:	0101bd28 	cmpgeui	r4,zero,1780
 101b5e0:	0101bd28 	cmpgeui	r4,zero,1780
 101b5e4:	0101bd28 	cmpgeui	r4,zero,1780
 101b5e8:	0101bd28 	cmpgeui	r4,zero,1780
 101b5ec:	0101bd28 	cmpgeui	r4,zero,1780
 101b5f0:	0101bd28 	cmpgeui	r4,zero,1780
 101b5f4:	0101b730 	cmpltui	r4,zero,1756
 101b5f8:	0101b90c 	andi	r4,zero,1764
 101b5fc:	0101bd28 	cmpgeui	r4,zero,1780
 101b600:	0101b75c 	xori	r4,zero,1757
 101b604:	0101bd5c 	xori	r4,zero,1781
 101b608:	0101bd28 	cmpgeui	r4,zero,1780
 101b60c:	0101bd50 	cmplti	r4,zero,1781
 101b610:	0101bcf0 	cmpltui	r4,zero,1779
 101b614:	0101bcf0 	cmpltui	r4,zero,1779
 101b618:	0101bcf0 	cmpltui	r4,zero,1779
 101b61c:	0101bcf0 	cmpltui	r4,zero,1779
 101b620:	0101bcf0 	cmpltui	r4,zero,1779
 101b624:	0101bcf0 	cmpltui	r4,zero,1779
 101b628:	0101bcf0 	cmpltui	r4,zero,1779
 101b62c:	0101bcf0 	cmpltui	r4,zero,1779
 101b630:	0101bcf0 	cmpltui	r4,zero,1779
 101b634:	0101bd28 	cmpgeui	r4,zero,1780
 101b638:	0101bd28 	cmpgeui	r4,zero,1780
 101b63c:	0101bd28 	cmpgeui	r4,zero,1780
 101b640:	0101bd28 	cmpgeui	r4,zero,1780
 101b644:	0101bd28 	cmpgeui	r4,zero,1780
 101b648:	0101bd28 	cmpgeui	r4,zero,1780
 101b64c:	0101bd28 	cmpgeui	r4,zero,1780
 101b650:	0101bd28 	cmpgeui	r4,zero,1780
 101b654:	0101bd28 	cmpgeui	r4,zero,1780
 101b658:	0101bd28 	cmpgeui	r4,zero,1780
 101b65c:	0101bc8c 	andi	r4,zero,1778
 101b660:	0101bd28 	cmpgeui	r4,zero,1780
 101b664:	0101bd28 	cmpgeui	r4,zero,1780
 101b668:	0101bd28 	cmpgeui	r4,zero,1780
 101b66c:	0101bd28 	cmpgeui	r4,zero,1780
 101b670:	0101bd28 	cmpgeui	r4,zero,1780
 101b674:	0101bd28 	cmpgeui	r4,zero,1780
 101b678:	0101bd28 	cmpgeui	r4,zero,1780
 101b67c:	0101bd28 	cmpgeui	r4,zero,1780
 101b680:	0101bd28 	cmpgeui	r4,zero,1780
 101b684:	0101bd28 	cmpgeui	r4,zero,1780
 101b688:	0101be04 	movi	r4,1784
 101b68c:	0101bd28 	cmpgeui	r4,zero,1780
 101b690:	0101bd28 	cmpgeui	r4,zero,1780
 101b694:	0101bd28 	cmpgeui	r4,zero,1780
 101b698:	0101bd28 	cmpgeui	r4,zero,1780
 101b69c:	0101bd28 	cmpgeui	r4,zero,1780
 101b6a0:	0101bd9c 	xori	r4,zero,1782
 101b6a4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6a8:	0101bd28 	cmpgeui	r4,zero,1780
 101b6ac:	0101bad0 	cmplti	r4,zero,1771
 101b6b0:	0101bd28 	cmpgeui	r4,zero,1780
 101b6b4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6b8:	0101bd28 	cmpgeui	r4,zero,1780
 101b6bc:	0101bd28 	cmpgeui	r4,zero,1780
 101b6c0:	0101bd28 	cmpgeui	r4,zero,1780
 101b6c4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6c8:	0101bd28 	cmpgeui	r4,zero,1780
 101b6cc:	0101bd28 	cmpgeui	r4,zero,1780
 101b6d0:	0101bd28 	cmpgeui	r4,zero,1780
 101b6d4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6d8:	0101b9c0 	call	101b9c <__alt_mem_sdram-0xefe464>
 101b6dc:	0101bb6c 	andhi	r4,zero,1773
 101b6e0:	0101bd28 	cmpgeui	r4,zero,1780
 101b6e4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6e8:	0101bd28 	cmpgeui	r4,zero,1780
 101b6ec:	0101bb60 	cmpeqi	r4,zero,1773
 101b6f0:	0101bb6c 	andhi	r4,zero,1773
 101b6f4:	0101bd28 	cmpgeui	r4,zero,1780
 101b6f8:	0101bd28 	cmpgeui	r4,zero,1780
 101b6fc:	0101bb50 	cmplti	r4,zero,1773
 101b700:	0101bd28 	cmpgeui	r4,zero,1780
 101b704:	0101bb14 	movui	r4,1772
 101b708:	0101b91c 	xori	r4,zero,1764
 101b70c:	0101b768 	cmpgeui	r4,zero,1757
 101b710:	0101bc80 	call	101bc8 <__alt_mem_sdram-0xefe438>
 101b714:	0101bd28 	cmpgeui	r4,zero,1780
 101b718:	0101bc34 	movhi	r4,1776
 101b71c:	0101bd28 	cmpgeui	r4,zero,1780
 101b720:	0101b88c 	andi	r4,zero,1762
 101b724:	0101bd28 	cmpgeui	r4,zero,1780
 101b728:	0101bd28 	cmpgeui	r4,zero,1780
 101b72c:	0101b7e8 	cmpgeui	r4,zero,1759
 101b730:	dac02317 	ldw	r11,140(sp)
 101b734:	5ac00017 	ldw	r11,0(r11)
 101b738:	dac02415 	stw	r11,144(sp)
 101b73c:	dac02317 	ldw	r11,140(sp)
 101b740:	58800104 	addi	r2,r11,4
 101b744:	dac02417 	ldw	r11,144(sp)
 101b748:	5802e90e 	bge	r11,zero,101c2f0 <___svfiprintf_internal_r+0xe84>
 101b74c:	dac02417 	ldw	r11,144(sp)
 101b750:	d8802315 	stw	r2,140(sp)
 101b754:	02d7c83a 	sub	r11,zero,r11
 101b758:	dac02415 	stw	r11,144(sp)
 101b75c:	94800114 	ori	r18,r18,4
 101b760:	98c00007 	ldb	r3,0(r19)
 101b764:	003f9006 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101b768:	00800c04 	movi	r2,48
 101b76c:	dac02317 	ldw	r11,140(sp)
 101b770:	d8801d05 	stb	r2,116(sp)
 101b774:	00801e04 	movi	r2,120
 101b778:	d8801d45 	stb	r2,117(sp)
 101b77c:	d8001d85 	stb	zero,118(sp)
 101b780:	58c00104 	addi	r3,r11,4
 101b784:	5f000017 	ldw	fp,0(r11)
 101b788:	0013883a 	mov	r9,zero
 101b78c:	90800094 	ori	r2,r18,2
 101b790:	80032b16 	blt	r16,zero,101c440 <___svfiprintf_internal_r+0xfd4>
 101b794:	00bfdfc4 	movi	r2,-129
 101b798:	90a4703a 	and	r18,r18,r2
 101b79c:	d8c02315 	stw	r3,140(sp)
 101b7a0:	94800094 	ori	r18,r18,2
 101b7a4:	e002dc26 	beq	fp,zero,101c318 <___svfiprintf_internal_r+0xeac>
 101b7a8:	010040b4 	movhi	r4,258
 101b7ac:	2119c904 	addi	r4,r4,26404
 101b7b0:	0015883a 	mov	r10,zero
 101b7b4:	d9002915 	stw	r4,164(sp)
 101b7b8:	00002306 	br	101b848 <___svfiprintf_internal_r+0x3dc>
 101b7bc:	94800054 	ori	r18,r18,1
 101b7c0:	98c00007 	ldb	r3,0(r19)
 101b7c4:	003f7806 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101b7c8:	38803fcc 	andi	r2,r7,255
 101b7cc:	1080201c 	xori	r2,r2,128
 101b7d0:	10bfe004 	addi	r2,r2,-128
 101b7d4:	1002f31e 	bne	r2,zero,101c3a4 <___svfiprintf_internal_r+0xf38>
 101b7d8:	01000044 	movi	r4,1
 101b7dc:	01c00804 	movi	r7,32
 101b7e0:	98c00007 	ldb	r3,0(r19)
 101b7e4:	003f7006 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101b7e8:	21003fcc 	andi	r4,r4,255
 101b7ec:	2003aa1e 	bne	r4,zero,101c698 <___svfiprintf_internal_r+0x122c>
 101b7f0:	008040b4 	movhi	r2,258
 101b7f4:	1099c904 	addi	r2,r2,26404
 101b7f8:	d8802915 	stw	r2,164(sp)
 101b7fc:	9080080c 	andi	r2,r18,32
 101b800:	1000ba26 	beq	r2,zero,101baec <___svfiprintf_internal_r+0x680>
 101b804:	dac02317 	ldw	r11,140(sp)
 101b808:	5f000017 	ldw	fp,0(r11)
 101b80c:	5a400117 	ldw	r9,4(r11)
 101b810:	5ac00204 	addi	r11,r11,8
 101b814:	dac02315 	stw	r11,140(sp)
 101b818:	9080004c 	andi	r2,r18,1
 101b81c:	10029026 	beq	r2,zero,101c260 <___svfiprintf_internal_r+0xdf4>
 101b820:	e244b03a 	or	r2,fp,r9
 101b824:	1002d41e 	bne	r2,zero,101c378 <___svfiprintf_internal_r+0xf0c>
 101b828:	d8001d85 	stb	zero,118(sp)
 101b82c:	80030b16 	blt	r16,zero,101c45c <___svfiprintf_internal_r+0xff0>
 101b830:	00bfdfc4 	movi	r2,-129
 101b834:	90a4703a 	and	r18,r18,r2
 101b838:	0015883a 	mov	r10,zero
 101b83c:	80002426 	beq	r16,zero,101b8d0 <___svfiprintf_internal_r+0x464>
 101b840:	0039883a 	mov	fp,zero
 101b844:	0013883a 	mov	r9,zero
 101b848:	d9002917 	ldw	r4,164(sp)
 101b84c:	dc401a04 	addi	r17,sp,104
 101b850:	e08003cc 	andi	r2,fp,15
 101b854:	4806973a 	slli	r3,r9,28
 101b858:	2085883a 	add	r2,r4,r2
 101b85c:	e038d13a 	srli	fp,fp,4
 101b860:	10800003 	ldbu	r2,0(r2)
 101b864:	4812d13a 	srli	r9,r9,4
 101b868:	8c7fffc4 	addi	r17,r17,-1
 101b86c:	1f38b03a 	or	fp,r3,fp
 101b870:	88800005 	stb	r2,0(r17)
 101b874:	e244b03a 	or	r2,fp,r9
 101b878:	103ff51e 	bne	r2,zero,101b850 <__alt_data_end+0xff01b850>
 101b87c:	dac01e17 	ldw	r11,120(sp)
 101b880:	5c57c83a 	sub	r11,r11,r17
 101b884:	dac02115 	stw	r11,132(sp)
 101b888:	00001406 	br	101b8dc <___svfiprintf_internal_r+0x470>
 101b88c:	21003fcc 	andi	r4,r4,255
 101b890:	2003741e 	bne	r4,zero,101c664 <___svfiprintf_internal_r+0x11f8>
 101b894:	9080080c 	andi	r2,r18,32
 101b898:	10014526 	beq	r2,zero,101bdb0 <___svfiprintf_internal_r+0x944>
 101b89c:	dac02317 	ldw	r11,140(sp)
 101b8a0:	d8001d85 	stb	zero,118(sp)
 101b8a4:	58c00204 	addi	r3,r11,8
 101b8a8:	5f000017 	ldw	fp,0(r11)
 101b8ac:	5a400117 	ldw	r9,4(r11)
 101b8b0:	8002d916 	blt	r16,zero,101c418 <___svfiprintf_internal_r+0xfac>
 101b8b4:	013fdfc4 	movi	r4,-129
 101b8b8:	e244b03a 	or	r2,fp,r9
 101b8bc:	d8c02315 	stw	r3,140(sp)
 101b8c0:	9124703a 	and	r18,r18,r4
 101b8c4:	0015883a 	mov	r10,zero
 101b8c8:	1000b91e 	bne	r2,zero,101bbb0 <___svfiprintf_internal_r+0x744>
 101b8cc:	8002e61e 	bne	r16,zero,101c468 <___svfiprintf_internal_r+0xffc>
 101b8d0:	0021883a 	mov	r16,zero
 101b8d4:	d8002115 	stw	zero,132(sp)
 101b8d8:	dc401a04 	addi	r17,sp,104
 101b8dc:	d8c02117 	ldw	r3,132(sp)
 101b8e0:	dc002015 	stw	r16,128(sp)
 101b8e4:	80c0010e 	bge	r16,r3,101b8ec <___svfiprintf_internal_r+0x480>
 101b8e8:	d8c02015 	stw	r3,128(sp)
 101b8ec:	52803fcc 	andi	r10,r10,255
 101b8f0:	5280201c 	xori	r10,r10,128
 101b8f4:	52bfe004 	addi	r10,r10,-128
 101b8f8:	50003c26 	beq	r10,zero,101b9ec <___svfiprintf_internal_r+0x580>
 101b8fc:	dac02017 	ldw	r11,128(sp)
 101b900:	5ac00044 	addi	r11,r11,1
 101b904:	dac02015 	stw	r11,128(sp)
 101b908:	00003806 	br	101b9ec <___svfiprintf_internal_r+0x580>
 101b90c:	01000044 	movi	r4,1
 101b910:	01c00ac4 	movi	r7,43
 101b914:	98c00007 	ldb	r3,0(r19)
 101b918:	003f2306 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101b91c:	21003fcc 	andi	r4,r4,255
 101b920:	2003481e 	bne	r4,zero,101c644 <___svfiprintf_internal_r+0x11d8>
 101b924:	9080080c 	andi	r2,r18,32
 101b928:	10013b26 	beq	r2,zero,101be18 <___svfiprintf_internal_r+0x9ac>
 101b92c:	dac02317 	ldw	r11,140(sp)
 101b930:	d8001d85 	stb	zero,118(sp)
 101b934:	58800204 	addi	r2,r11,8
 101b938:	5f000017 	ldw	fp,0(r11)
 101b93c:	5a400117 	ldw	r9,4(r11)
 101b940:	8002a816 	blt	r16,zero,101c3e4 <___svfiprintf_internal_r+0xf78>
 101b944:	013fdfc4 	movi	r4,-129
 101b948:	e246b03a 	or	r3,fp,r9
 101b94c:	d8802315 	stw	r2,140(sp)
 101b950:	9124703a 	and	r18,r18,r4
 101b954:	18013c26 	beq	r3,zero,101be48 <___svfiprintf_internal_r+0x9dc>
 101b958:	0015883a 	mov	r10,zero
 101b95c:	dc401a04 	addi	r17,sp,104
 101b960:	e006d0fa 	srli	r3,fp,3
 101b964:	4808977a 	slli	r4,r9,29
 101b968:	4812d0fa 	srli	r9,r9,3
 101b96c:	e70001cc 	andi	fp,fp,7
 101b970:	e0800c04 	addi	r2,fp,48
 101b974:	8c7fffc4 	addi	r17,r17,-1
 101b978:	20f8b03a 	or	fp,r4,r3
 101b97c:	88800005 	stb	r2,0(r17)
 101b980:	e246b03a 	or	r3,fp,r9
 101b984:	183ff61e 	bne	r3,zero,101b960 <__alt_data_end+0xff01b960>
 101b988:	90c0004c 	andi	r3,r18,1
 101b98c:	1800a526 	beq	r3,zero,101bc24 <___svfiprintf_internal_r+0x7b8>
 101b990:	10803fcc 	andi	r2,r2,255
 101b994:	1080201c 	xori	r2,r2,128
 101b998:	10bfe004 	addi	r2,r2,-128
 101b99c:	00c00c04 	movi	r3,48
 101b9a0:	10ffb626 	beq	r2,r3,101b87c <__alt_data_end+0xff01b87c>
 101b9a4:	88ffffc5 	stb	r3,-1(r17)
 101b9a8:	d8c01e17 	ldw	r3,120(sp)
 101b9ac:	88bfffc4 	addi	r2,r17,-1
 101b9b0:	1023883a 	mov	r17,r2
 101b9b4:	1887c83a 	sub	r3,r3,r2
 101b9b8:	d8c02115 	stw	r3,132(sp)
 101b9bc:	003fc706 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101b9c0:	dac02317 	ldw	r11,140(sp)
 101b9c4:	00c00044 	movi	r3,1
 101b9c8:	d8c02015 	stw	r3,128(sp)
 101b9cc:	58800017 	ldw	r2,0(r11)
 101b9d0:	5ac00104 	addi	r11,r11,4
 101b9d4:	d8001d85 	stb	zero,118(sp)
 101b9d8:	d8801005 	stb	r2,64(sp)
 101b9dc:	dac02315 	stw	r11,140(sp)
 101b9e0:	d8c02115 	stw	r3,132(sp)
 101b9e4:	dc401004 	addi	r17,sp,64
 101b9e8:	0021883a 	mov	r16,zero
 101b9ec:	90c0008c 	andi	r3,r18,2
 101b9f0:	d8c02215 	stw	r3,136(sp)
 101b9f4:	18000326 	beq	r3,zero,101ba04 <___svfiprintf_internal_r+0x598>
 101b9f8:	dac02017 	ldw	r11,128(sp)
 101b9fc:	5ac00084 	addi	r11,r11,2
 101ba00:	dac02015 	stw	r11,128(sp)
 101ba04:	90c0210c 	andi	r3,r18,132
 101ba08:	d8c02615 	stw	r3,152(sp)
 101ba0c:	1801131e 	bne	r3,zero,101be5c <___svfiprintf_internal_r+0x9f0>
 101ba10:	dac02417 	ldw	r11,144(sp)
 101ba14:	d8c02017 	ldw	r3,128(sp)
 101ba18:	58f9c83a 	sub	fp,r11,r3
 101ba1c:	07010f0e 	bge	zero,fp,101be5c <___svfiprintf_internal_r+0x9f0>
 101ba20:	02400404 	movi	r9,16
 101ba24:	d8c01c17 	ldw	r3,112(sp)
 101ba28:	d8801b17 	ldw	r2,108(sp)
 101ba2c:	4f02d60e 	bge	r9,fp,101c588 <___svfiprintf_internal_r+0x111c>
 101ba30:	014040b4 	movhi	r5,258
 101ba34:	295a2d04 	addi	r5,r5,26804
 101ba38:	d9402815 	stw	r5,160(sp)
 101ba3c:	028001c4 	movi	r10,7
 101ba40:	00000306 	br	101ba50 <___svfiprintf_internal_r+0x5e4>
 101ba44:	e73ffc04 	addi	fp,fp,-16
 101ba48:	42000204 	addi	r8,r8,8
 101ba4c:	4f00150e 	bge	r9,fp,101baa4 <___svfiprintf_internal_r+0x638>
 101ba50:	18c00404 	addi	r3,r3,16
 101ba54:	10800044 	addi	r2,r2,1
 101ba58:	45800015 	stw	r22,0(r8)
 101ba5c:	42400115 	stw	r9,4(r8)
 101ba60:	d8c01c15 	stw	r3,112(sp)
 101ba64:	d8801b15 	stw	r2,108(sp)
 101ba68:	50bff60e 	bge	r10,r2,101ba44 <__alt_data_end+0xff01ba44>
 101ba6c:	d9801a04 	addi	r6,sp,104
 101ba70:	b80b883a 	mov	r5,r23
 101ba74:	a809883a 	mov	r4,r21
 101ba78:	da402c15 	stw	r9,176(sp)
 101ba7c:	da802d15 	stw	r10,180(sp)
 101ba80:	101b29c0 	call	101b29c <__ssprint_r>
 101ba84:	da402c17 	ldw	r9,176(sp)
 101ba88:	da802d17 	ldw	r10,180(sp)
 101ba8c:	1001851e 	bne	r2,zero,101c0a4 <___svfiprintf_internal_r+0xc38>
 101ba90:	e73ffc04 	addi	fp,fp,-16
 101ba94:	d8c01c17 	ldw	r3,112(sp)
 101ba98:	d8801b17 	ldw	r2,108(sp)
 101ba9c:	d811883a 	mov	r8,sp
 101baa0:	4f3feb16 	blt	r9,fp,101ba50 <__alt_data_end+0xff01ba50>
 101baa4:	dac02817 	ldw	r11,160(sp)
 101baa8:	e0c7883a 	add	r3,fp,r3
 101baac:	10800044 	addi	r2,r2,1
 101bab0:	42c00015 	stw	r11,0(r8)
 101bab4:	47000115 	stw	fp,4(r8)
 101bab8:	d8c01c15 	stw	r3,112(sp)
 101babc:	d8801b15 	stw	r2,108(sp)
 101bac0:	010001c4 	movi	r4,7
 101bac4:	2081ee16 	blt	r4,r2,101c280 <___svfiprintf_internal_r+0xe14>
 101bac8:	42000204 	addi	r8,r8,8
 101bacc:	0000e506 	br	101be64 <___svfiprintf_internal_r+0x9f8>
 101bad0:	21003fcc 	andi	r4,r4,255
 101bad4:	2002dd1e 	bne	r4,zero,101c64c <___svfiprintf_internal_r+0x11e0>
 101bad8:	008040b4 	movhi	r2,258
 101badc:	1099c404 	addi	r2,r2,26384
 101bae0:	d8802915 	stw	r2,164(sp)
 101bae4:	9080080c 	andi	r2,r18,32
 101bae8:	103f461e 	bne	r2,zero,101b804 <__alt_data_end+0xff01b804>
 101baec:	9080040c 	andi	r2,r18,16
 101baf0:	10022e1e 	bne	r2,zero,101c3ac <___svfiprintf_internal_r+0xf40>
 101baf4:	9080100c 	andi	r2,r18,64
 101baf8:	dac02317 	ldw	r11,140(sp)
 101bafc:	10027326 	beq	r2,zero,101c4cc <___svfiprintf_internal_r+0x1060>
 101bb00:	5f00000b 	ldhu	fp,0(r11)
 101bb04:	5ac00104 	addi	r11,r11,4
 101bb08:	0013883a 	mov	r9,zero
 101bb0c:	dac02315 	stw	r11,140(sp)
 101bb10:	003f4106 	br	101b818 <__alt_data_end+0xff01b818>
 101bb14:	21003fcc 	andi	r4,r4,255
 101bb18:	2002e11e 	bne	r4,zero,101c6a0 <___svfiprintf_internal_r+0x1234>
 101bb1c:	9080080c 	andi	r2,r18,32
 101bb20:	1002011e 	bne	r2,zero,101c328 <___svfiprintf_internal_r+0xebc>
 101bb24:	9080040c 	andi	r2,r18,16
 101bb28:	10023e1e 	bne	r2,zero,101c424 <___svfiprintf_internal_r+0xfb8>
 101bb2c:	9480100c 	andi	r18,r18,64
 101bb30:	90023c26 	beq	r18,zero,101c424 <___svfiprintf_internal_r+0xfb8>
 101bb34:	dac02317 	ldw	r11,140(sp)
 101bb38:	58800017 	ldw	r2,0(r11)
 101bb3c:	5ac00104 	addi	r11,r11,4
 101bb40:	dac02315 	stw	r11,140(sp)
 101bb44:	dac02517 	ldw	r11,148(sp)
 101bb48:	12c0000d 	sth	r11,0(r2)
 101bb4c:	003e6e06 	br	101b508 <__alt_data_end+0xff01b508>
 101bb50:	98c00007 	ldb	r3,0(r19)
 101bb54:	1a422926 	beq	r3,r9,101c3fc <___svfiprintf_internal_r+0xf90>
 101bb58:	94800414 	ori	r18,r18,16
 101bb5c:	003e9206 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101bb60:	94801014 	ori	r18,r18,64
 101bb64:	98c00007 	ldb	r3,0(r19)
 101bb68:	003e8f06 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101bb6c:	21003fcc 	andi	r4,r4,255
 101bb70:	2002c71e 	bne	r4,zero,101c690 <___svfiprintf_internal_r+0x1224>
 101bb74:	9080080c 	andi	r2,r18,32
 101bb78:	10004926 	beq	r2,zero,101bca0 <___svfiprintf_internal_r+0x834>
 101bb7c:	dac02317 	ldw	r11,140(sp)
 101bb80:	58800117 	ldw	r2,4(r11)
 101bb84:	5f000017 	ldw	fp,0(r11)
 101bb88:	5ac00204 	addi	r11,r11,8
 101bb8c:	dac02315 	stw	r11,140(sp)
 101bb90:	1013883a 	mov	r9,r2
 101bb94:	10004b16 	blt	r2,zero,101bcc4 <___svfiprintf_internal_r+0x858>
 101bb98:	da801d83 	ldbu	r10,118(sp)
 101bb9c:	8001cb16 	blt	r16,zero,101c2cc <___svfiprintf_internal_r+0xe60>
 101bba0:	00ffdfc4 	movi	r3,-129
 101bba4:	e244b03a 	or	r2,fp,r9
 101bba8:	90e4703a 	and	r18,r18,r3
 101bbac:	103f4726 	beq	r2,zero,101b8cc <__alt_data_end+0xff01b8cc>
 101bbb0:	48008c26 	beq	r9,zero,101bde4 <___svfiprintf_internal_r+0x978>
 101bbb4:	dc802015 	stw	r18,128(sp)
 101bbb8:	dc002115 	stw	r16,132(sp)
 101bbbc:	dc401a04 	addi	r17,sp,104
 101bbc0:	e021883a 	mov	r16,fp
 101bbc4:	da002215 	stw	r8,136(sp)
 101bbc8:	5039883a 	mov	fp,r10
 101bbcc:	4825883a 	mov	r18,r9
 101bbd0:	8009883a 	mov	r4,r16
 101bbd4:	900b883a 	mov	r5,r18
 101bbd8:	01800284 	movi	r6,10
 101bbdc:	000f883a 	mov	r7,zero
 101bbe0:	101f5880 	call	101f588 <__umoddi3>
 101bbe4:	10800c04 	addi	r2,r2,48
 101bbe8:	8c7fffc4 	addi	r17,r17,-1
 101bbec:	8009883a 	mov	r4,r16
 101bbf0:	900b883a 	mov	r5,r18
 101bbf4:	88800005 	stb	r2,0(r17)
 101bbf8:	01800284 	movi	r6,10
 101bbfc:	000f883a 	mov	r7,zero
 101bc00:	101f0100 	call	101f010 <__udivdi3>
 101bc04:	1021883a 	mov	r16,r2
 101bc08:	10c4b03a 	or	r2,r2,r3
 101bc0c:	1825883a 	mov	r18,r3
 101bc10:	103fef1e 	bne	r2,zero,101bbd0 <__alt_data_end+0xff01bbd0>
 101bc14:	dc802017 	ldw	r18,128(sp)
 101bc18:	dc002117 	ldw	r16,132(sp)
 101bc1c:	da002217 	ldw	r8,136(sp)
 101bc20:	e015883a 	mov	r10,fp
 101bc24:	d8c01e17 	ldw	r3,120(sp)
 101bc28:	1c47c83a 	sub	r3,r3,r17
 101bc2c:	d8c02115 	stw	r3,132(sp)
 101bc30:	003f2a06 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101bc34:	dac02317 	ldw	r11,140(sp)
 101bc38:	d8001d85 	stb	zero,118(sp)
 101bc3c:	5c400017 	ldw	r17,0(r11)
 101bc40:	5f000104 	addi	fp,r11,4
 101bc44:	88022f26 	beq	r17,zero,101c504 <___svfiprintf_internal_r+0x1098>
 101bc48:	80022516 	blt	r16,zero,101c4e0 <___svfiprintf_internal_r+0x1074>
 101bc4c:	800d883a 	mov	r6,r16
 101bc50:	000b883a 	mov	r5,zero
 101bc54:	8809883a 	mov	r4,r17
 101bc58:	da002c15 	stw	r8,176(sp)
 101bc5c:	10195f40 	call	10195f4 <memchr>
 101bc60:	da002c17 	ldw	r8,176(sp)
 101bc64:	10026426 	beq	r2,zero,101c5f8 <___svfiprintf_internal_r+0x118c>
 101bc68:	1445c83a 	sub	r2,r2,r17
 101bc6c:	d8802115 	stw	r2,132(sp)
 101bc70:	da801d83 	ldbu	r10,118(sp)
 101bc74:	df002315 	stw	fp,140(sp)
 101bc78:	0021883a 	mov	r16,zero
 101bc7c:	003f1706 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101bc80:	94800814 	ori	r18,r18,32
 101bc84:	98c00007 	ldb	r3,0(r19)
 101bc88:	003e4706 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101bc8c:	21003fcc 	andi	r4,r4,255
 101bc90:	2002701e 	bne	r4,zero,101c654 <___svfiprintf_internal_r+0x11e8>
 101bc94:	94800414 	ori	r18,r18,16
 101bc98:	9080080c 	andi	r2,r18,32
 101bc9c:	103fb71e 	bne	r2,zero,101bb7c <__alt_data_end+0xff01bb7c>
 101bca0:	9080040c 	andi	r2,r18,16
 101bca4:	1001ab26 	beq	r2,zero,101c354 <___svfiprintf_internal_r+0xee8>
 101bca8:	dac02317 	ldw	r11,140(sp)
 101bcac:	5f000017 	ldw	fp,0(r11)
 101bcb0:	5ac00104 	addi	r11,r11,4
 101bcb4:	dac02315 	stw	r11,140(sp)
 101bcb8:	e013d7fa 	srai	r9,fp,31
 101bcbc:	4805883a 	mov	r2,r9
 101bcc0:	103fb50e 	bge	r2,zero,101bb98 <__alt_data_end+0xff01bb98>
 101bcc4:	0739c83a 	sub	fp,zero,fp
 101bcc8:	02800b44 	movi	r10,45
 101bccc:	e004c03a 	cmpne	r2,fp,zero
 101bcd0:	0253c83a 	sub	r9,zero,r9
 101bcd4:	da801d85 	stb	r10,118(sp)
 101bcd8:	4893c83a 	sub	r9,r9,r2
 101bcdc:	80023016 	blt	r16,zero,101c5a0 <___svfiprintf_internal_r+0x1134>
 101bce0:	00bfdfc4 	movi	r2,-129
 101bce4:	90a4703a 	and	r18,r18,r2
 101bce8:	483fb21e 	bne	r9,zero,101bbb4 <__alt_data_end+0xff01bbb4>
 101bcec:	00003d06 	br	101bde4 <___svfiprintf_internal_r+0x978>
 101bcf0:	9817883a 	mov	r11,r19
 101bcf4:	d8002415 	stw	zero,144(sp)
 101bcf8:	18bff404 	addi	r2,r3,-48
 101bcfc:	0019883a 	mov	r12,zero
 101bd00:	58c00007 	ldb	r3,0(r11)
 101bd04:	630002a4 	muli	r12,r12,10
 101bd08:	9cc00044 	addi	r19,r19,1
 101bd0c:	9817883a 	mov	r11,r19
 101bd10:	1319883a 	add	r12,r2,r12
 101bd14:	18bff404 	addi	r2,r3,-48
 101bd18:	30bff92e 	bgeu	r6,r2,101bd00 <__alt_data_end+0xff01bd00>
 101bd1c:	db002415 	stw	r12,144(sp)
 101bd20:	18bff804 	addi	r2,r3,-32
 101bd24:	28be232e 	bgeu	r5,r2,101b5b4 <__alt_data_end+0xff01b5b4>
 101bd28:	21003fcc 	andi	r4,r4,255
 101bd2c:	20024b1e 	bne	r4,zero,101c65c <___svfiprintf_internal_r+0x11f0>
 101bd30:	1800d626 	beq	r3,zero,101c08c <___svfiprintf_internal_r+0xc20>
 101bd34:	02c00044 	movi	r11,1
 101bd38:	dac02015 	stw	r11,128(sp)
 101bd3c:	d8c01005 	stb	r3,64(sp)
 101bd40:	d8001d85 	stb	zero,118(sp)
 101bd44:	dac02115 	stw	r11,132(sp)
 101bd48:	dc401004 	addi	r17,sp,64
 101bd4c:	003f2606 	br	101b9e8 <__alt_data_end+0xff01b9e8>
 101bd50:	94802014 	ori	r18,r18,128
 101bd54:	98c00007 	ldb	r3,0(r19)
 101bd58:	003e1306 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101bd5c:	98c00007 	ldb	r3,0(r19)
 101bd60:	9ac00044 	addi	r11,r19,1
 101bd64:	1a822b26 	beq	r3,r10,101c614 <___svfiprintf_internal_r+0x11a8>
 101bd68:	18bff404 	addi	r2,r3,-48
 101bd6c:	0021883a 	mov	r16,zero
 101bd70:	30821e36 	bltu	r6,r2,101c5ec <___svfiprintf_internal_r+0x1180>
 101bd74:	58c00007 	ldb	r3,0(r11)
 101bd78:	840002a4 	muli	r16,r16,10
 101bd7c:	5cc00044 	addi	r19,r11,1
 101bd80:	9817883a 	mov	r11,r19
 101bd84:	80a1883a 	add	r16,r16,r2
 101bd88:	18bff404 	addi	r2,r3,-48
 101bd8c:	30bff92e 	bgeu	r6,r2,101bd74 <__alt_data_end+0xff01bd74>
 101bd90:	803e060e 	bge	r16,zero,101b5ac <__alt_data_end+0xff01b5ac>
 101bd94:	043fffc4 	movi	r16,-1
 101bd98:	003e0406 	br	101b5ac <__alt_data_end+0xff01b5ac>
 101bd9c:	21003fcc 	andi	r4,r4,255
 101bda0:	2002371e 	bne	r4,zero,101c680 <___svfiprintf_internal_r+0x1214>
 101bda4:	94800414 	ori	r18,r18,16
 101bda8:	9080080c 	andi	r2,r18,32
 101bdac:	103ebb1e 	bne	r2,zero,101b89c <__alt_data_end+0xff01b89c>
 101bdb0:	9080040c 	andi	r2,r18,16
 101bdb4:	10013b26 	beq	r2,zero,101c2a4 <___svfiprintf_internal_r+0xe38>
 101bdb8:	dac02317 	ldw	r11,140(sp)
 101bdbc:	d8001d85 	stb	zero,118(sp)
 101bdc0:	0013883a 	mov	r9,zero
 101bdc4:	58800104 	addi	r2,r11,4
 101bdc8:	5f000017 	ldw	fp,0(r11)
 101bdcc:	80013d16 	blt	r16,zero,101c2c4 <___svfiprintf_internal_r+0xe58>
 101bdd0:	00ffdfc4 	movi	r3,-129
 101bdd4:	d8802315 	stw	r2,140(sp)
 101bdd8:	90e4703a 	and	r18,r18,r3
 101bddc:	0015883a 	mov	r10,zero
 101bde0:	e03eba26 	beq	fp,zero,101b8cc <__alt_data_end+0xff01b8cc>
 101bde4:	00800244 	movi	r2,9
 101bde8:	173f7236 	bltu	r2,fp,101bbb4 <__alt_data_end+0xff01bbb4>
 101bdec:	dac02b17 	ldw	r11,172(sp)
 101bdf0:	e7000c04 	addi	fp,fp,48
 101bdf4:	df0019c5 	stb	fp,103(sp)
 101bdf8:	dac02115 	stw	r11,132(sp)
 101bdfc:	dc4019c4 	addi	r17,sp,103
 101be00:	003eb606 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101be04:	21003fcc 	andi	r4,r4,255
 101be08:	20021f1e 	bne	r4,zero,101c688 <___svfiprintf_internal_r+0x121c>
 101be0c:	94800414 	ori	r18,r18,16
 101be10:	9080080c 	andi	r2,r18,32
 101be14:	103ec51e 	bne	r2,zero,101b92c <__alt_data_end+0xff01b92c>
 101be18:	9080040c 	andi	r2,r18,16
 101be1c:	10016926 	beq	r2,zero,101c3c4 <___svfiprintf_internal_r+0xf58>
 101be20:	dac02317 	ldw	r11,140(sp)
 101be24:	d8001d85 	stb	zero,118(sp)
 101be28:	0013883a 	mov	r9,zero
 101be2c:	58800104 	addi	r2,r11,4
 101be30:	5f000017 	ldw	fp,0(r11)
 101be34:	80016b16 	blt	r16,zero,101c3e4 <___svfiprintf_internal_r+0xf78>
 101be38:	00ffdfc4 	movi	r3,-129
 101be3c:	d8802315 	stw	r2,140(sp)
 101be40:	90e4703a 	and	r18,r18,r3
 101be44:	e03ec41e 	bne	fp,zero,101b958 <__alt_data_end+0xff01b958>
 101be48:	0015883a 	mov	r10,zero
 101be4c:	8001c226 	beq	r16,zero,101c558 <___svfiprintf_internal_r+0x10ec>
 101be50:	0039883a 	mov	fp,zero
 101be54:	0013883a 	mov	r9,zero
 101be58:	003ec006 	br	101b95c <__alt_data_end+0xff01b95c>
 101be5c:	d8c01c17 	ldw	r3,112(sp)
 101be60:	d8801b17 	ldw	r2,108(sp)
 101be64:	d9001d87 	ldb	r4,118(sp)
 101be68:	20000b26 	beq	r4,zero,101be98 <___svfiprintf_internal_r+0xa2c>
 101be6c:	d9001d84 	addi	r4,sp,118
 101be70:	18c00044 	addi	r3,r3,1
 101be74:	10800044 	addi	r2,r2,1
 101be78:	41000015 	stw	r4,0(r8)
 101be7c:	01000044 	movi	r4,1
 101be80:	41000115 	stw	r4,4(r8)
 101be84:	d8c01c15 	stw	r3,112(sp)
 101be88:	d8801b15 	stw	r2,108(sp)
 101be8c:	010001c4 	movi	r4,7
 101be90:	2080e116 	blt	r4,r2,101c218 <___svfiprintf_internal_r+0xdac>
 101be94:	42000204 	addi	r8,r8,8
 101be98:	dac02217 	ldw	r11,136(sp)
 101be9c:	58000b26 	beq	r11,zero,101becc <___svfiprintf_internal_r+0xa60>
 101bea0:	d9001d04 	addi	r4,sp,116
 101bea4:	18c00084 	addi	r3,r3,2
 101bea8:	10800044 	addi	r2,r2,1
 101beac:	41000015 	stw	r4,0(r8)
 101beb0:	01000084 	movi	r4,2
 101beb4:	41000115 	stw	r4,4(r8)
 101beb8:	d8c01c15 	stw	r3,112(sp)
 101bebc:	d8801b15 	stw	r2,108(sp)
 101bec0:	010001c4 	movi	r4,7
 101bec4:	2080dd16 	blt	r4,r2,101c23c <___svfiprintf_internal_r+0xdd0>
 101bec8:	42000204 	addi	r8,r8,8
 101becc:	dac02617 	ldw	r11,152(sp)
 101bed0:	01002004 	movi	r4,128
 101bed4:	59008426 	beq	r11,r4,101c0e8 <___svfiprintf_internal_r+0xc7c>
 101bed8:	dac02117 	ldw	r11,132(sp)
 101bedc:	82e1c83a 	sub	r16,r16,r11
 101bee0:	0400270e 	bge	zero,r16,101bf80 <___svfiprintf_internal_r+0xb14>
 101bee4:	01c00404 	movi	r7,16
 101bee8:	3c016a0e 	bge	r7,r16,101c494 <___svfiprintf_internal_r+0x1028>
 101beec:	014040b4 	movhi	r5,258
 101bef0:	295a2904 	addi	r5,r5,26788
 101bef4:	d9402215 	stw	r5,136(sp)
 101bef8:	070001c4 	movi	fp,7
 101befc:	00000306 	br	101bf0c <___svfiprintf_internal_r+0xaa0>
 101bf00:	843ffc04 	addi	r16,r16,-16
 101bf04:	42000204 	addi	r8,r8,8
 101bf08:	3c00130e 	bge	r7,r16,101bf58 <___svfiprintf_internal_r+0xaec>
 101bf0c:	18c00404 	addi	r3,r3,16
 101bf10:	10800044 	addi	r2,r2,1
 101bf14:	45000015 	stw	r20,0(r8)
 101bf18:	41c00115 	stw	r7,4(r8)
 101bf1c:	d8c01c15 	stw	r3,112(sp)
 101bf20:	d8801b15 	stw	r2,108(sp)
 101bf24:	e0bff60e 	bge	fp,r2,101bf00 <__alt_data_end+0xff01bf00>
 101bf28:	d9801a04 	addi	r6,sp,104
 101bf2c:	b80b883a 	mov	r5,r23
 101bf30:	a809883a 	mov	r4,r21
 101bf34:	d9c02c15 	stw	r7,176(sp)
 101bf38:	101b29c0 	call	101b29c <__ssprint_r>
 101bf3c:	d9c02c17 	ldw	r7,176(sp)
 101bf40:	1000581e 	bne	r2,zero,101c0a4 <___svfiprintf_internal_r+0xc38>
 101bf44:	843ffc04 	addi	r16,r16,-16
 101bf48:	d8c01c17 	ldw	r3,112(sp)
 101bf4c:	d8801b17 	ldw	r2,108(sp)
 101bf50:	d811883a 	mov	r8,sp
 101bf54:	3c3fed16 	blt	r7,r16,101bf0c <__alt_data_end+0xff01bf0c>
 101bf58:	dac02217 	ldw	r11,136(sp)
 101bf5c:	1c07883a 	add	r3,r3,r16
 101bf60:	10800044 	addi	r2,r2,1
 101bf64:	42c00015 	stw	r11,0(r8)
 101bf68:	44000115 	stw	r16,4(r8)
 101bf6c:	d8c01c15 	stw	r3,112(sp)
 101bf70:	d8801b15 	stw	r2,108(sp)
 101bf74:	010001c4 	movi	r4,7
 101bf78:	20809e16 	blt	r4,r2,101c1f4 <___svfiprintf_internal_r+0xd88>
 101bf7c:	42000204 	addi	r8,r8,8
 101bf80:	dac02117 	ldw	r11,132(sp)
 101bf84:	10800044 	addi	r2,r2,1
 101bf88:	44400015 	stw	r17,0(r8)
 101bf8c:	58c7883a 	add	r3,r11,r3
 101bf90:	42c00115 	stw	r11,4(r8)
 101bf94:	d8c01c15 	stw	r3,112(sp)
 101bf98:	d8801b15 	stw	r2,108(sp)
 101bf9c:	010001c4 	movi	r4,7
 101bfa0:	20807f16 	blt	r4,r2,101c1a0 <___svfiprintf_internal_r+0xd34>
 101bfa4:	42000204 	addi	r8,r8,8
 101bfa8:	9480010c 	andi	r18,r18,4
 101bfac:	90002926 	beq	r18,zero,101c054 <___svfiprintf_internal_r+0xbe8>
 101bfb0:	dac02417 	ldw	r11,144(sp)
 101bfb4:	d8802017 	ldw	r2,128(sp)
 101bfb8:	58a1c83a 	sub	r16,r11,r2
 101bfbc:	0400250e 	bge	zero,r16,101c054 <___svfiprintf_internal_r+0xbe8>
 101bfc0:	04400404 	movi	r17,16
 101bfc4:	d8801b17 	ldw	r2,108(sp)
 101bfc8:	8c017c0e 	bge	r17,r16,101c5bc <___svfiprintf_internal_r+0x1150>
 101bfcc:	014040b4 	movhi	r5,258
 101bfd0:	295a2d04 	addi	r5,r5,26804
 101bfd4:	d9402815 	stw	r5,160(sp)
 101bfd8:	048001c4 	movi	r18,7
 101bfdc:	00000306 	br	101bfec <___svfiprintf_internal_r+0xb80>
 101bfe0:	843ffc04 	addi	r16,r16,-16
 101bfe4:	42000204 	addi	r8,r8,8
 101bfe8:	8c00110e 	bge	r17,r16,101c030 <___svfiprintf_internal_r+0xbc4>
 101bfec:	18c00404 	addi	r3,r3,16
 101bff0:	10800044 	addi	r2,r2,1
 101bff4:	45800015 	stw	r22,0(r8)
 101bff8:	44400115 	stw	r17,4(r8)
 101bffc:	d8c01c15 	stw	r3,112(sp)
 101c000:	d8801b15 	stw	r2,108(sp)
 101c004:	90bff60e 	bge	r18,r2,101bfe0 <__alt_data_end+0xff01bfe0>
 101c008:	d9801a04 	addi	r6,sp,104
 101c00c:	b80b883a 	mov	r5,r23
 101c010:	a809883a 	mov	r4,r21
 101c014:	101b29c0 	call	101b29c <__ssprint_r>
 101c018:	1000221e 	bne	r2,zero,101c0a4 <___svfiprintf_internal_r+0xc38>
 101c01c:	843ffc04 	addi	r16,r16,-16
 101c020:	d8c01c17 	ldw	r3,112(sp)
 101c024:	d8801b17 	ldw	r2,108(sp)
 101c028:	d811883a 	mov	r8,sp
 101c02c:	8c3fef16 	blt	r17,r16,101bfec <__alt_data_end+0xff01bfec>
 101c030:	dac02817 	ldw	r11,160(sp)
 101c034:	1c07883a 	add	r3,r3,r16
 101c038:	10800044 	addi	r2,r2,1
 101c03c:	42c00015 	stw	r11,0(r8)
 101c040:	44000115 	stw	r16,4(r8)
 101c044:	d8c01c15 	stw	r3,112(sp)
 101c048:	d8801b15 	stw	r2,108(sp)
 101c04c:	010001c4 	movi	r4,7
 101c050:	2080aa16 	blt	r4,r2,101c2fc <___svfiprintf_internal_r+0xe90>
 101c054:	d8802417 	ldw	r2,144(sp)
 101c058:	dac02017 	ldw	r11,128(sp)
 101c05c:	12c0010e 	bge	r2,r11,101c064 <___svfiprintf_internal_r+0xbf8>
 101c060:	5805883a 	mov	r2,r11
 101c064:	dac02517 	ldw	r11,148(sp)
 101c068:	5897883a 	add	r11,r11,r2
 101c06c:	dac02515 	stw	r11,148(sp)
 101c070:	1800531e 	bne	r3,zero,101c1c0 <___svfiprintf_internal_r+0xd54>
 101c074:	98800007 	ldb	r2,0(r19)
 101c078:	d8001b15 	stw	zero,108(sp)
 101c07c:	d811883a 	mov	r8,sp
 101c080:	103d231e 	bne	r2,zero,101b510 <__alt_data_end+0xff01b510>
 101c084:	9823883a 	mov	r17,r19
 101c088:	003d3906 	br	101b570 <__alt_data_end+0xff01b570>
 101c08c:	d8801c17 	ldw	r2,112(sp)
 101c090:	10000426 	beq	r2,zero,101c0a4 <___svfiprintf_internal_r+0xc38>
 101c094:	d9402717 	ldw	r5,156(sp)
 101c098:	d9002a17 	ldw	r4,168(sp)
 101c09c:	d9801a04 	addi	r6,sp,104
 101c0a0:	101b29c0 	call	101b29c <__ssprint_r>
 101c0a4:	dac02717 	ldw	r11,156(sp)
 101c0a8:	d8802517 	ldw	r2,148(sp)
 101c0ac:	58c0030b 	ldhu	r3,12(r11)
 101c0b0:	18c0100c 	andi	r3,r3,64
 101c0b4:	1801381e 	bne	r3,zero,101c598 <___svfiprintf_internal_r+0x112c>
 101c0b8:	dfc03717 	ldw	ra,220(sp)
 101c0bc:	df003617 	ldw	fp,216(sp)
 101c0c0:	ddc03517 	ldw	r23,212(sp)
 101c0c4:	dd803417 	ldw	r22,208(sp)
 101c0c8:	dd403317 	ldw	r21,204(sp)
 101c0cc:	dd003217 	ldw	r20,200(sp)
 101c0d0:	dcc03117 	ldw	r19,196(sp)
 101c0d4:	dc803017 	ldw	r18,192(sp)
 101c0d8:	dc402f17 	ldw	r17,188(sp)
 101c0dc:	dc002e17 	ldw	r16,184(sp)
 101c0e0:	dec03804 	addi	sp,sp,224
 101c0e4:	f800283a 	ret
 101c0e8:	dac02417 	ldw	r11,144(sp)
 101c0ec:	d9002017 	ldw	r4,128(sp)
 101c0f0:	5939c83a 	sub	fp,r11,r4
 101c0f4:	073f780e 	bge	zero,fp,101bed8 <__alt_data_end+0xff01bed8>
 101c0f8:	02400404 	movi	r9,16
 101c0fc:	4f01370e 	bge	r9,fp,101c5dc <___svfiprintf_internal_r+0x1170>
 101c100:	02c040b4 	movhi	r11,258
 101c104:	5ada2904 	addi	r11,r11,26788
 101c108:	dac02215 	stw	r11,136(sp)
 101c10c:	028001c4 	movi	r10,7
 101c110:	00000306 	br	101c120 <___svfiprintf_internal_r+0xcb4>
 101c114:	e73ffc04 	addi	fp,fp,-16
 101c118:	42000204 	addi	r8,r8,8
 101c11c:	4f00150e 	bge	r9,fp,101c174 <___svfiprintf_internal_r+0xd08>
 101c120:	18c00404 	addi	r3,r3,16
 101c124:	10800044 	addi	r2,r2,1
 101c128:	45000015 	stw	r20,0(r8)
 101c12c:	42400115 	stw	r9,4(r8)
 101c130:	d8c01c15 	stw	r3,112(sp)
 101c134:	d8801b15 	stw	r2,108(sp)
 101c138:	50bff60e 	bge	r10,r2,101c114 <__alt_data_end+0xff01c114>
 101c13c:	d9801a04 	addi	r6,sp,104
 101c140:	b80b883a 	mov	r5,r23
 101c144:	a809883a 	mov	r4,r21
 101c148:	da402c15 	stw	r9,176(sp)
 101c14c:	da802d15 	stw	r10,180(sp)
 101c150:	101b29c0 	call	101b29c <__ssprint_r>
 101c154:	da402c17 	ldw	r9,176(sp)
 101c158:	da802d17 	ldw	r10,180(sp)
 101c15c:	103fd11e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c160:	e73ffc04 	addi	fp,fp,-16
 101c164:	d8c01c17 	ldw	r3,112(sp)
 101c168:	d8801b17 	ldw	r2,108(sp)
 101c16c:	d811883a 	mov	r8,sp
 101c170:	4f3feb16 	blt	r9,fp,101c120 <__alt_data_end+0xff01c120>
 101c174:	dac02217 	ldw	r11,136(sp)
 101c178:	1f07883a 	add	r3,r3,fp
 101c17c:	10800044 	addi	r2,r2,1
 101c180:	42c00015 	stw	r11,0(r8)
 101c184:	47000115 	stw	fp,4(r8)
 101c188:	d8c01c15 	stw	r3,112(sp)
 101c18c:	d8801b15 	stw	r2,108(sp)
 101c190:	010001c4 	movi	r4,7
 101c194:	2080b616 	blt	r4,r2,101c470 <___svfiprintf_internal_r+0x1004>
 101c198:	42000204 	addi	r8,r8,8
 101c19c:	003f4e06 	br	101bed8 <__alt_data_end+0xff01bed8>
 101c1a0:	d9801a04 	addi	r6,sp,104
 101c1a4:	b80b883a 	mov	r5,r23
 101c1a8:	a809883a 	mov	r4,r21
 101c1ac:	101b29c0 	call	101b29c <__ssprint_r>
 101c1b0:	103fbc1e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c1b4:	d8c01c17 	ldw	r3,112(sp)
 101c1b8:	d811883a 	mov	r8,sp
 101c1bc:	003f7a06 	br	101bfa8 <__alt_data_end+0xff01bfa8>
 101c1c0:	d9801a04 	addi	r6,sp,104
 101c1c4:	b80b883a 	mov	r5,r23
 101c1c8:	a809883a 	mov	r4,r21
 101c1cc:	101b29c0 	call	101b29c <__ssprint_r>
 101c1d0:	103fa826 	beq	r2,zero,101c074 <__alt_data_end+0xff01c074>
 101c1d4:	003fb306 	br	101c0a4 <__alt_data_end+0xff01c0a4>
 101c1d8:	d9801a04 	addi	r6,sp,104
 101c1dc:	b80b883a 	mov	r5,r23
 101c1e0:	a809883a 	mov	r4,r21
 101c1e4:	101b29c0 	call	101b29c <__ssprint_r>
 101c1e8:	103fae1e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c1ec:	d811883a 	mov	r8,sp
 101c1f0:	003cdc06 	br	101b564 <__alt_data_end+0xff01b564>
 101c1f4:	d9801a04 	addi	r6,sp,104
 101c1f8:	b80b883a 	mov	r5,r23
 101c1fc:	a809883a 	mov	r4,r21
 101c200:	101b29c0 	call	101b29c <__ssprint_r>
 101c204:	103fa71e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c208:	d8c01c17 	ldw	r3,112(sp)
 101c20c:	d8801b17 	ldw	r2,108(sp)
 101c210:	d811883a 	mov	r8,sp
 101c214:	003f5a06 	br	101bf80 <__alt_data_end+0xff01bf80>
 101c218:	d9801a04 	addi	r6,sp,104
 101c21c:	b80b883a 	mov	r5,r23
 101c220:	a809883a 	mov	r4,r21
 101c224:	101b29c0 	call	101b29c <__ssprint_r>
 101c228:	103f9e1e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c22c:	d8c01c17 	ldw	r3,112(sp)
 101c230:	d8801b17 	ldw	r2,108(sp)
 101c234:	d811883a 	mov	r8,sp
 101c238:	003f1706 	br	101be98 <__alt_data_end+0xff01be98>
 101c23c:	d9801a04 	addi	r6,sp,104
 101c240:	b80b883a 	mov	r5,r23
 101c244:	a809883a 	mov	r4,r21
 101c248:	101b29c0 	call	101b29c <__ssprint_r>
 101c24c:	103f951e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c250:	d8c01c17 	ldw	r3,112(sp)
 101c254:	d8801b17 	ldw	r2,108(sp)
 101c258:	d811883a 	mov	r8,sp
 101c25c:	003f1b06 	br	101becc <__alt_data_end+0xff01becc>
 101c260:	d8001d85 	stb	zero,118(sp)
 101c264:	80007b16 	blt	r16,zero,101c454 <___svfiprintf_internal_r+0xfe8>
 101c268:	00ffdfc4 	movi	r3,-129
 101c26c:	e244b03a 	or	r2,fp,r9
 101c270:	90e4703a 	and	r18,r18,r3
 101c274:	103d7026 	beq	r2,zero,101b838 <__alt_data_end+0xff01b838>
 101c278:	0015883a 	mov	r10,zero
 101c27c:	003d7206 	br	101b848 <__alt_data_end+0xff01b848>
 101c280:	d9801a04 	addi	r6,sp,104
 101c284:	b80b883a 	mov	r5,r23
 101c288:	a809883a 	mov	r4,r21
 101c28c:	101b29c0 	call	101b29c <__ssprint_r>
 101c290:	103f841e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c294:	d8c01c17 	ldw	r3,112(sp)
 101c298:	d8801b17 	ldw	r2,108(sp)
 101c29c:	d811883a 	mov	r8,sp
 101c2a0:	003ef006 	br	101be64 <__alt_data_end+0xff01be64>
 101c2a4:	9080100c 	andi	r2,r18,64
 101c2a8:	d8001d85 	stb	zero,118(sp)
 101c2ac:	dac02317 	ldw	r11,140(sp)
 101c2b0:	10008126 	beq	r2,zero,101c4b8 <___svfiprintf_internal_r+0x104c>
 101c2b4:	58800104 	addi	r2,r11,4
 101c2b8:	5f00000b 	ldhu	fp,0(r11)
 101c2bc:	0013883a 	mov	r9,zero
 101c2c0:	803ec30e 	bge	r16,zero,101bdd0 <__alt_data_end+0xff01bdd0>
 101c2c4:	d8802315 	stw	r2,140(sp)
 101c2c8:	0015883a 	mov	r10,zero
 101c2cc:	e244b03a 	or	r2,fp,r9
 101c2d0:	103e371e 	bne	r2,zero,101bbb0 <__alt_data_end+0xff01bbb0>
 101c2d4:	00800044 	movi	r2,1
 101c2d8:	10803fcc 	andi	r2,r2,255
 101c2dc:	00c00044 	movi	r3,1
 101c2e0:	10c06126 	beq	r2,r3,101c468 <___svfiprintf_internal_r+0xffc>
 101c2e4:	00c00084 	movi	r3,2
 101c2e8:	10fd5526 	beq	r2,r3,101b840 <__alt_data_end+0xff01b840>
 101c2ec:	003ed806 	br	101be50 <__alt_data_end+0xff01be50>
 101c2f0:	d8802315 	stw	r2,140(sp)
 101c2f4:	98c00007 	ldb	r3,0(r19)
 101c2f8:	003cab06 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101c2fc:	d9801a04 	addi	r6,sp,104
 101c300:	b80b883a 	mov	r5,r23
 101c304:	a809883a 	mov	r4,r21
 101c308:	101b29c0 	call	101b29c <__ssprint_r>
 101c30c:	103f651e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c310:	d8c01c17 	ldw	r3,112(sp)
 101c314:	003f4f06 	br	101c054 <__alt_data_end+0xff01c054>
 101c318:	008040b4 	movhi	r2,258
 101c31c:	1099c904 	addi	r2,r2,26404
 101c320:	d8802915 	stw	r2,164(sp)
 101c324:	003d4406 	br	101b838 <__alt_data_end+0xff01b838>
 101c328:	dac02317 	ldw	r11,140(sp)
 101c32c:	58800017 	ldw	r2,0(r11)
 101c330:	dac02517 	ldw	r11,148(sp)
 101c334:	5807d7fa 	srai	r3,r11,31
 101c338:	dac02317 	ldw	r11,140(sp)
 101c33c:	10c00115 	stw	r3,4(r2)
 101c340:	5ac00104 	addi	r11,r11,4
 101c344:	dac02315 	stw	r11,140(sp)
 101c348:	dac02517 	ldw	r11,148(sp)
 101c34c:	12c00015 	stw	r11,0(r2)
 101c350:	003c6d06 	br	101b508 <__alt_data_end+0xff01b508>
 101c354:	9080100c 	andi	r2,r18,64
 101c358:	dac02317 	ldw	r11,140(sp)
 101c35c:	103e5326 	beq	r2,zero,101bcac <__alt_data_end+0xff01bcac>
 101c360:	5f00000f 	ldh	fp,0(r11)
 101c364:	5ac00104 	addi	r11,r11,4
 101c368:	dac02315 	stw	r11,140(sp)
 101c36c:	e013d7fa 	srai	r9,fp,31
 101c370:	4805883a 	mov	r2,r9
 101c374:	003e0706 	br	101bb94 <__alt_data_end+0xff01bb94>
 101c378:	00800c04 	movi	r2,48
 101c37c:	d8801d05 	stb	r2,116(sp)
 101c380:	d8c01d45 	stb	r3,117(sp)
 101c384:	d8001d85 	stb	zero,118(sp)
 101c388:	90800094 	ori	r2,r18,2
 101c38c:	80008f16 	blt	r16,zero,101c5cc <___svfiprintf_internal_r+0x1160>
 101c390:	00bfdfc4 	movi	r2,-129
 101c394:	90a4703a 	and	r18,r18,r2
 101c398:	94800094 	ori	r18,r18,2
 101c39c:	0015883a 	mov	r10,zero
 101c3a0:	003d2906 	br	101b848 <__alt_data_end+0xff01b848>
 101c3a4:	98c00007 	ldb	r3,0(r19)
 101c3a8:	003c7f06 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101c3ac:	dac02317 	ldw	r11,140(sp)
 101c3b0:	0013883a 	mov	r9,zero
 101c3b4:	5f000017 	ldw	fp,0(r11)
 101c3b8:	5ac00104 	addi	r11,r11,4
 101c3bc:	dac02315 	stw	r11,140(sp)
 101c3c0:	003d1506 	br	101b818 <__alt_data_end+0xff01b818>
 101c3c4:	9080100c 	andi	r2,r18,64
 101c3c8:	d8001d85 	stb	zero,118(sp)
 101c3cc:	dac02317 	ldw	r11,140(sp)
 101c3d0:	10003426 	beq	r2,zero,101c4a4 <___svfiprintf_internal_r+0x1038>
 101c3d4:	58800104 	addi	r2,r11,4
 101c3d8:	5f00000b 	ldhu	fp,0(r11)
 101c3dc:	0013883a 	mov	r9,zero
 101c3e0:	803e950e 	bge	r16,zero,101be38 <__alt_data_end+0xff01be38>
 101c3e4:	e246b03a 	or	r3,fp,r9
 101c3e8:	d8802315 	stw	r2,140(sp)
 101c3ec:	183d5a1e 	bne	r3,zero,101b958 <__alt_data_end+0xff01b958>
 101c3f0:	0015883a 	mov	r10,zero
 101c3f4:	0005883a 	mov	r2,zero
 101c3f8:	003fb706 	br	101c2d8 <__alt_data_end+0xff01c2d8>
 101c3fc:	98c00043 	ldbu	r3,1(r19)
 101c400:	94800814 	ori	r18,r18,32
 101c404:	9cc00044 	addi	r19,r19,1
 101c408:	18c03fcc 	andi	r3,r3,255
 101c40c:	18c0201c 	xori	r3,r3,128
 101c410:	18ffe004 	addi	r3,r3,-128
 101c414:	003c6406 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101c418:	d8c02315 	stw	r3,140(sp)
 101c41c:	0015883a 	mov	r10,zero
 101c420:	003faa06 	br	101c2cc <__alt_data_end+0xff01c2cc>
 101c424:	dac02317 	ldw	r11,140(sp)
 101c428:	58800017 	ldw	r2,0(r11)
 101c42c:	5ac00104 	addi	r11,r11,4
 101c430:	dac02315 	stw	r11,140(sp)
 101c434:	dac02517 	ldw	r11,148(sp)
 101c438:	12c00015 	stw	r11,0(r2)
 101c43c:	003c3206 	br	101b508 <__alt_data_end+0xff01b508>
 101c440:	010040b4 	movhi	r4,258
 101c444:	2119c904 	addi	r4,r4,26404
 101c448:	d9002915 	stw	r4,164(sp)
 101c44c:	d8c02315 	stw	r3,140(sp)
 101c450:	1025883a 	mov	r18,r2
 101c454:	e244b03a 	or	r2,fp,r9
 101c458:	103f871e 	bne	r2,zero,101c278 <__alt_data_end+0xff01c278>
 101c45c:	0015883a 	mov	r10,zero
 101c460:	00800084 	movi	r2,2
 101c464:	003f9c06 	br	101c2d8 <__alt_data_end+0xff01c2d8>
 101c468:	0039883a 	mov	fp,zero
 101c46c:	003e5f06 	br	101bdec <__alt_data_end+0xff01bdec>
 101c470:	d9801a04 	addi	r6,sp,104
 101c474:	b80b883a 	mov	r5,r23
 101c478:	a809883a 	mov	r4,r21
 101c47c:	101b29c0 	call	101b29c <__ssprint_r>
 101c480:	103f081e 	bne	r2,zero,101c0a4 <__alt_data_end+0xff01c0a4>
 101c484:	d8c01c17 	ldw	r3,112(sp)
 101c488:	d8801b17 	ldw	r2,108(sp)
 101c48c:	d811883a 	mov	r8,sp
 101c490:	003e9106 	br	101bed8 <__alt_data_end+0xff01bed8>
 101c494:	010040b4 	movhi	r4,258
 101c498:	211a2904 	addi	r4,r4,26788
 101c49c:	d9002215 	stw	r4,136(sp)
 101c4a0:	003ead06 	br	101bf58 <__alt_data_end+0xff01bf58>
 101c4a4:	58800104 	addi	r2,r11,4
 101c4a8:	5f000017 	ldw	fp,0(r11)
 101c4ac:	0013883a 	mov	r9,zero
 101c4b0:	803e610e 	bge	r16,zero,101be38 <__alt_data_end+0xff01be38>
 101c4b4:	003fcb06 	br	101c3e4 <__alt_data_end+0xff01c3e4>
 101c4b8:	58800104 	addi	r2,r11,4
 101c4bc:	5f000017 	ldw	fp,0(r11)
 101c4c0:	0013883a 	mov	r9,zero
 101c4c4:	803e420e 	bge	r16,zero,101bdd0 <__alt_data_end+0xff01bdd0>
 101c4c8:	003f7e06 	br	101c2c4 <__alt_data_end+0xff01c2c4>
 101c4cc:	5f000017 	ldw	fp,0(r11)
 101c4d0:	5ac00104 	addi	r11,r11,4
 101c4d4:	0013883a 	mov	r9,zero
 101c4d8:	dac02315 	stw	r11,140(sp)
 101c4dc:	003cce06 	br	101b818 <__alt_data_end+0xff01b818>
 101c4e0:	8809883a 	mov	r4,r17
 101c4e4:	da002c15 	stw	r8,176(sp)
 101c4e8:	101463c0 	call	101463c <strlen>
 101c4ec:	d8802115 	stw	r2,132(sp)
 101c4f0:	da801d83 	ldbu	r10,118(sp)
 101c4f4:	df002315 	stw	fp,140(sp)
 101c4f8:	0021883a 	mov	r16,zero
 101c4fc:	da002c17 	ldw	r8,176(sp)
 101c500:	003cf606 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101c504:	00800184 	movi	r2,6
 101c508:	1400012e 	bgeu	r2,r16,101c510 <___svfiprintf_internal_r+0x10a4>
 101c50c:	1021883a 	mov	r16,r2
 101c510:	dc002115 	stw	r16,132(sp)
 101c514:	8005883a 	mov	r2,r16
 101c518:	80003c16 	blt	r16,zero,101c60c <___svfiprintf_internal_r+0x11a0>
 101c51c:	044040b4 	movhi	r17,258
 101c520:	d8802015 	stw	r2,128(sp)
 101c524:	df002315 	stw	fp,140(sp)
 101c528:	8c59ce04 	addi	r17,r17,26424
 101c52c:	003d2e06 	br	101b9e8 <__alt_data_end+0xff01b9e8>
 101c530:	04001004 	movi	r16,64
 101c534:	800b883a 	mov	r5,r16
 101c538:	1018de80 	call	1018de8 <_malloc_r>
 101c53c:	dac02717 	ldw	r11,156(sp)
 101c540:	58800015 	stw	r2,0(r11)
 101c544:	58800415 	stw	r2,16(r11)
 101c548:	10004826 	beq	r2,zero,101c66c <___svfiprintf_internal_r+0x1200>
 101c54c:	dac02717 	ldw	r11,156(sp)
 101c550:	5c000515 	stw	r16,20(r11)
 101c554:	003bd906 	br	101b4bc <__alt_data_end+0xff01b4bc>
 101c558:	9080004c 	andi	r2,r18,1
 101c55c:	0015883a 	mov	r10,zero
 101c560:	10000626 	beq	r2,zero,101c57c <___svfiprintf_internal_r+0x1110>
 101c564:	dac02b17 	ldw	r11,172(sp)
 101c568:	00800c04 	movi	r2,48
 101c56c:	d88019c5 	stb	r2,103(sp)
 101c570:	dac02115 	stw	r11,132(sp)
 101c574:	dc4019c4 	addi	r17,sp,103
 101c578:	003cd806 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101c57c:	d8002115 	stw	zero,132(sp)
 101c580:	dc401a04 	addi	r17,sp,104
 101c584:	003cd506 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101c588:	010040b4 	movhi	r4,258
 101c58c:	211a2d04 	addi	r4,r4,26804
 101c590:	d9002815 	stw	r4,160(sp)
 101c594:	003d4306 	br	101baa4 <__alt_data_end+0xff01baa4>
 101c598:	00bfffc4 	movi	r2,-1
 101c59c:	003ec606 	br	101c0b8 <__alt_data_end+0xff01c0b8>
 101c5a0:	00800044 	movi	r2,1
 101c5a4:	10803fcc 	andi	r2,r2,255
 101c5a8:	00c00044 	movi	r3,1
 101c5ac:	10fd8026 	beq	r2,r3,101bbb0 <__alt_data_end+0xff01bbb0>
 101c5b0:	00c00084 	movi	r3,2
 101c5b4:	10fca426 	beq	r2,r3,101b848 <__alt_data_end+0xff01b848>
 101c5b8:	003ce806 	br	101b95c <__alt_data_end+0xff01b95c>
 101c5bc:	010040b4 	movhi	r4,258
 101c5c0:	211a2d04 	addi	r4,r4,26804
 101c5c4:	d9002815 	stw	r4,160(sp)
 101c5c8:	003e9906 	br	101c030 <__alt_data_end+0xff01c030>
 101c5cc:	1025883a 	mov	r18,r2
 101c5d0:	0015883a 	mov	r10,zero
 101c5d4:	00800084 	movi	r2,2
 101c5d8:	003ff206 	br	101c5a4 <__alt_data_end+0xff01c5a4>
 101c5dc:	014040b4 	movhi	r5,258
 101c5e0:	295a2904 	addi	r5,r5,26788
 101c5e4:	d9402215 	stw	r5,136(sp)
 101c5e8:	003ee206 	br	101c174 <__alt_data_end+0xff01c174>
 101c5ec:	5827883a 	mov	r19,r11
 101c5f0:	0021883a 	mov	r16,zero
 101c5f4:	003bed06 	br	101b5ac <__alt_data_end+0xff01b5ac>
 101c5f8:	dc002115 	stw	r16,132(sp)
 101c5fc:	da801d83 	ldbu	r10,118(sp)
 101c600:	df002315 	stw	fp,140(sp)
 101c604:	0021883a 	mov	r16,zero
 101c608:	003cb406 	br	101b8dc <__alt_data_end+0xff01b8dc>
 101c60c:	0005883a 	mov	r2,zero
 101c610:	003fc206 	br	101c51c <__alt_data_end+0xff01c51c>
 101c614:	d8802317 	ldw	r2,140(sp)
 101c618:	98c00043 	ldbu	r3,1(r19)
 101c61c:	5827883a 	mov	r19,r11
 101c620:	14000017 	ldw	r16,0(r2)
 101c624:	10800104 	addi	r2,r2,4
 101c628:	d8802315 	stw	r2,140(sp)
 101c62c:	803f760e 	bge	r16,zero,101c408 <__alt_data_end+0xff01c408>
 101c630:	18c03fcc 	andi	r3,r3,255
 101c634:	18c0201c 	xori	r3,r3,128
 101c638:	043fffc4 	movi	r16,-1
 101c63c:	18ffe004 	addi	r3,r3,-128
 101c640:	003bd906 	br	101b5a8 <__alt_data_end+0xff01b5a8>
 101c644:	d9c01d85 	stb	r7,118(sp)
 101c648:	003cb606 	br	101b924 <__alt_data_end+0xff01b924>
 101c64c:	d9c01d85 	stb	r7,118(sp)
 101c650:	003d2106 	br	101bad8 <__alt_data_end+0xff01bad8>
 101c654:	d9c01d85 	stb	r7,118(sp)
 101c658:	003d8e06 	br	101bc94 <__alt_data_end+0xff01bc94>
 101c65c:	d9c01d85 	stb	r7,118(sp)
 101c660:	003db306 	br	101bd30 <__alt_data_end+0xff01bd30>
 101c664:	d9c01d85 	stb	r7,118(sp)
 101c668:	003c8a06 	br	101b894 <__alt_data_end+0xff01b894>
 101c66c:	dac02a17 	ldw	r11,168(sp)
 101c670:	00800304 	movi	r2,12
 101c674:	58800015 	stw	r2,0(r11)
 101c678:	00bfffc4 	movi	r2,-1
 101c67c:	003e8e06 	br	101c0b8 <__alt_data_end+0xff01c0b8>
 101c680:	d9c01d85 	stb	r7,118(sp)
 101c684:	003dc706 	br	101bda4 <__alt_data_end+0xff01bda4>
 101c688:	d9c01d85 	stb	r7,118(sp)
 101c68c:	003ddf06 	br	101be0c <__alt_data_end+0xff01be0c>
 101c690:	d9c01d85 	stb	r7,118(sp)
 101c694:	003d3706 	br	101bb74 <__alt_data_end+0xff01bb74>
 101c698:	d9c01d85 	stb	r7,118(sp)
 101c69c:	003c5406 	br	101b7f0 <__alt_data_end+0xff01b7f0>
 101c6a0:	d9c01d85 	stb	r7,118(sp)
 101c6a4:	003d1d06 	br	101bb1c <__alt_data_end+0xff01bb1c>

0101c6a8 <__sprint_r.part.0>:
 101c6a8:	28801917 	ldw	r2,100(r5)
 101c6ac:	defff604 	addi	sp,sp,-40
 101c6b0:	dd400515 	stw	r21,20(sp)
 101c6b4:	dfc00915 	stw	ra,36(sp)
 101c6b8:	df000815 	stw	fp,32(sp)
 101c6bc:	ddc00715 	stw	r23,28(sp)
 101c6c0:	dd800615 	stw	r22,24(sp)
 101c6c4:	dd000415 	stw	r20,16(sp)
 101c6c8:	dcc00315 	stw	r19,12(sp)
 101c6cc:	dc800215 	stw	r18,8(sp)
 101c6d0:	dc400115 	stw	r17,4(sp)
 101c6d4:	dc000015 	stw	r16,0(sp)
 101c6d8:	1088000c 	andi	r2,r2,8192
 101c6dc:	302b883a 	mov	r21,r6
 101c6e0:	10002e26 	beq	r2,zero,101c79c <__sprint_r.part.0+0xf4>
 101c6e4:	30800217 	ldw	r2,8(r6)
 101c6e8:	35800017 	ldw	r22,0(r6)
 101c6ec:	10002926 	beq	r2,zero,101c794 <__sprint_r.part.0+0xec>
 101c6f0:	2827883a 	mov	r19,r5
 101c6f4:	2029883a 	mov	r20,r4
 101c6f8:	b5c00104 	addi	r23,r22,4
 101c6fc:	04bfffc4 	movi	r18,-1
 101c700:	bc400017 	ldw	r17,0(r23)
 101c704:	b4000017 	ldw	r16,0(r22)
 101c708:	0039883a 	mov	fp,zero
 101c70c:	8822d0ba 	srli	r17,r17,2
 101c710:	8800031e 	bne	r17,zero,101c720 <__sprint_r.part.0+0x78>
 101c714:	00001806 	br	101c778 <__sprint_r.part.0+0xd0>
 101c718:	84000104 	addi	r16,r16,4
 101c71c:	8f001526 	beq	r17,fp,101c774 <__sprint_r.part.0+0xcc>
 101c720:	81400017 	ldw	r5,0(r16)
 101c724:	980d883a 	mov	r6,r19
 101c728:	a009883a 	mov	r4,r20
 101c72c:	101e4cc0 	call	101e4cc <_fputwc_r>
 101c730:	e7000044 	addi	fp,fp,1
 101c734:	14bff81e 	bne	r2,r18,101c718 <__alt_data_end+0xff01c718>
 101c738:	9005883a 	mov	r2,r18
 101c73c:	a8000215 	stw	zero,8(r21)
 101c740:	a8000115 	stw	zero,4(r21)
 101c744:	dfc00917 	ldw	ra,36(sp)
 101c748:	df000817 	ldw	fp,32(sp)
 101c74c:	ddc00717 	ldw	r23,28(sp)
 101c750:	dd800617 	ldw	r22,24(sp)
 101c754:	dd400517 	ldw	r21,20(sp)
 101c758:	dd000417 	ldw	r20,16(sp)
 101c75c:	dcc00317 	ldw	r19,12(sp)
 101c760:	dc800217 	ldw	r18,8(sp)
 101c764:	dc400117 	ldw	r17,4(sp)
 101c768:	dc000017 	ldw	r16,0(sp)
 101c76c:	dec00a04 	addi	sp,sp,40
 101c770:	f800283a 	ret
 101c774:	a8800217 	ldw	r2,8(r21)
 101c778:	8c63883a 	add	r17,r17,r17
 101c77c:	8c63883a 	add	r17,r17,r17
 101c780:	1445c83a 	sub	r2,r2,r17
 101c784:	a8800215 	stw	r2,8(r21)
 101c788:	b5800204 	addi	r22,r22,8
 101c78c:	bdc00204 	addi	r23,r23,8
 101c790:	103fdb1e 	bne	r2,zero,101c700 <__alt_data_end+0xff01c700>
 101c794:	0005883a 	mov	r2,zero
 101c798:	003fe806 	br	101c73c <__alt_data_end+0xff01c73c>
 101c79c:	10186c80 	call	10186c8 <__sfvwrite_r>
 101c7a0:	003fe606 	br	101c73c <__alt_data_end+0xff01c73c>

0101c7a4 <__sprint_r>:
 101c7a4:	30c00217 	ldw	r3,8(r6)
 101c7a8:	18000126 	beq	r3,zero,101c7b0 <__sprint_r+0xc>
 101c7ac:	101c6a81 	jmpi	101c6a8 <__sprint_r.part.0>
 101c7b0:	30000115 	stw	zero,4(r6)
 101c7b4:	0005883a 	mov	r2,zero
 101c7b8:	f800283a 	ret

0101c7bc <___vfiprintf_internal_r>:
 101c7bc:	deffc904 	addi	sp,sp,-220
 101c7c0:	df003515 	stw	fp,212(sp)
 101c7c4:	dd003115 	stw	r20,196(sp)
 101c7c8:	dfc03615 	stw	ra,216(sp)
 101c7cc:	ddc03415 	stw	r23,208(sp)
 101c7d0:	dd803315 	stw	r22,204(sp)
 101c7d4:	dd403215 	stw	r21,200(sp)
 101c7d8:	dcc03015 	stw	r19,192(sp)
 101c7dc:	dc802f15 	stw	r18,188(sp)
 101c7e0:	dc402e15 	stw	r17,184(sp)
 101c7e4:	dc002d15 	stw	r16,180(sp)
 101c7e8:	d9002015 	stw	r4,128(sp)
 101c7ec:	d9c02215 	stw	r7,136(sp)
 101c7f0:	2829883a 	mov	r20,r5
 101c7f4:	3039883a 	mov	fp,r6
 101c7f8:	20000226 	beq	r4,zero,101c804 <___vfiprintf_internal_r+0x48>
 101c7fc:	20800e17 	ldw	r2,56(r4)
 101c800:	1000cf26 	beq	r2,zero,101cb40 <___vfiprintf_internal_r+0x384>
 101c804:	a080030b 	ldhu	r2,12(r20)
 101c808:	10c8000c 	andi	r3,r2,8192
 101c80c:	1800061e 	bne	r3,zero,101c828 <___vfiprintf_internal_r+0x6c>
 101c810:	a1001917 	ldw	r4,100(r20)
 101c814:	00f7ffc4 	movi	r3,-8193
 101c818:	10880014 	ori	r2,r2,8192
 101c81c:	20c6703a 	and	r3,r4,r3
 101c820:	a080030d 	sth	r2,12(r20)
 101c824:	a0c01915 	stw	r3,100(r20)
 101c828:	10c0020c 	andi	r3,r2,8
 101c82c:	1800a926 	beq	r3,zero,101cad4 <___vfiprintf_internal_r+0x318>
 101c830:	a0c00417 	ldw	r3,16(r20)
 101c834:	1800a726 	beq	r3,zero,101cad4 <___vfiprintf_internal_r+0x318>
 101c838:	1080068c 	andi	r2,r2,26
 101c83c:	00c00284 	movi	r3,10
 101c840:	10c0ac26 	beq	r2,r3,101caf4 <___vfiprintf_internal_r+0x338>
 101c844:	da801a04 	addi	r10,sp,104
 101c848:	da801e15 	stw	r10,120(sp)
 101c84c:	d8801e17 	ldw	r2,120(sp)
 101c850:	da8019c4 	addi	r10,sp,103
 101c854:	058040b4 	movhi	r22,258
 101c858:	05c040b4 	movhi	r23,258
 101c85c:	da801f15 	stw	r10,124(sp)
 101c860:	1295c83a 	sub	r10,r2,r10
 101c864:	b59a3504 	addi	r22,r22,26836
 101c868:	bdda3104 	addi	r23,r23,26820
 101c86c:	dec01a15 	stw	sp,104(sp)
 101c870:	d8001c15 	stw	zero,112(sp)
 101c874:	d8001b15 	stw	zero,108(sp)
 101c878:	d8002615 	stw	zero,152(sp)
 101c87c:	d8002315 	stw	zero,140(sp)
 101c880:	da802715 	stw	r10,156(sp)
 101c884:	d811883a 	mov	r8,sp
 101c888:	dd002115 	stw	r20,132(sp)
 101c88c:	e021883a 	mov	r16,fp
 101c890:	80800007 	ldb	r2,0(r16)
 101c894:	1003ea26 	beq	r2,zero,101d840 <___vfiprintf_internal_r+0x1084>
 101c898:	00c00944 	movi	r3,37
 101c89c:	8025883a 	mov	r18,r16
 101c8a0:	10c0021e 	bne	r2,r3,101c8ac <___vfiprintf_internal_r+0xf0>
 101c8a4:	00001606 	br	101c900 <___vfiprintf_internal_r+0x144>
 101c8a8:	10c00326 	beq	r2,r3,101c8b8 <___vfiprintf_internal_r+0xfc>
 101c8ac:	94800044 	addi	r18,r18,1
 101c8b0:	90800007 	ldb	r2,0(r18)
 101c8b4:	103ffc1e 	bne	r2,zero,101c8a8 <__alt_data_end+0xff01c8a8>
 101c8b8:	9423c83a 	sub	r17,r18,r16
 101c8bc:	88001026 	beq	r17,zero,101c900 <___vfiprintf_internal_r+0x144>
 101c8c0:	d8c01c17 	ldw	r3,112(sp)
 101c8c4:	d8801b17 	ldw	r2,108(sp)
 101c8c8:	44000015 	stw	r16,0(r8)
 101c8cc:	88c7883a 	add	r3,r17,r3
 101c8d0:	10800044 	addi	r2,r2,1
 101c8d4:	44400115 	stw	r17,4(r8)
 101c8d8:	d8c01c15 	stw	r3,112(sp)
 101c8dc:	d8801b15 	stw	r2,108(sp)
 101c8e0:	010001c4 	movi	r4,7
 101c8e4:	2080760e 	bge	r4,r2,101cac0 <___vfiprintf_internal_r+0x304>
 101c8e8:	1803821e 	bne	r3,zero,101d6f4 <___vfiprintf_internal_r+0xf38>
 101c8ec:	da802317 	ldw	r10,140(sp)
 101c8f0:	d8001b15 	stw	zero,108(sp)
 101c8f4:	d811883a 	mov	r8,sp
 101c8f8:	5455883a 	add	r10,r10,r17
 101c8fc:	da802315 	stw	r10,140(sp)
 101c900:	90800007 	ldb	r2,0(r18)
 101c904:	10044626 	beq	r2,zero,101da20 <___vfiprintf_internal_r+0x1264>
 101c908:	90c00047 	ldb	r3,1(r18)
 101c90c:	94000044 	addi	r16,r18,1
 101c910:	d8001d85 	stb	zero,118(sp)
 101c914:	0009883a 	mov	r4,zero
 101c918:	000f883a 	mov	r7,zero
 101c91c:	027fffc4 	movi	r9,-1
 101c920:	0023883a 	mov	r17,zero
 101c924:	0029883a 	mov	r20,zero
 101c928:	01401604 	movi	r5,88
 101c92c:	01800244 	movi	r6,9
 101c930:	03400a84 	movi	r13,42
 101c934:	03001b04 	movi	r12,108
 101c938:	84000044 	addi	r16,r16,1
 101c93c:	18bff804 	addi	r2,r3,-32
 101c940:	28827336 	bltu	r5,r2,101d310 <___vfiprintf_internal_r+0xb54>
 101c944:	100490ba 	slli	r2,r2,2
 101c948:	028040b4 	movhi	r10,258
 101c94c:	52b25704 	addi	r10,r10,-13988
 101c950:	1285883a 	add	r2,r2,r10
 101c954:	10800017 	ldw	r2,0(r2)
 101c958:	1000683a 	jmp	r2
 101c95c:	0101d044 	movi	r4,1857
 101c960:	0101d310 	cmplti	r4,zero,1868
 101c964:	0101d310 	cmplti	r4,zero,1868
 101c968:	0101d064 	muli	r4,zero,1857
 101c96c:	0101d310 	cmplti	r4,zero,1868
 101c970:	0101d310 	cmplti	r4,zero,1868
 101c974:	0101d310 	cmplti	r4,zero,1868
 101c978:	0101d310 	cmplti	r4,zero,1868
 101c97c:	0101d310 	cmplti	r4,zero,1868
 101c980:	0101d310 	cmplti	r4,zero,1868
 101c984:	0101d24c 	andi	r4,zero,1865
 101c988:	0101d268 	cmpgeui	r4,zero,1865
 101c98c:	0101d310 	cmplti	r4,zero,1868
 101c990:	0101cb50 	cmplti	r4,zero,1837
 101c994:	0101d278 	rdprs	r4,zero,1865
 101c998:	0101d310 	cmplti	r4,zero,1868
 101c99c:	0101d070 	cmpltui	r4,zero,1857
 101c9a0:	0101d07c 	xorhi	r4,zero,1857
 101c9a4:	0101d07c 	xorhi	r4,zero,1857
 101c9a8:	0101d07c 	xorhi	r4,zero,1857
 101c9ac:	0101d07c 	xorhi	r4,zero,1857
 101c9b0:	0101d07c 	xorhi	r4,zero,1857
 101c9b4:	0101d07c 	xorhi	r4,zero,1857
 101c9b8:	0101d07c 	xorhi	r4,zero,1857
 101c9bc:	0101d07c 	xorhi	r4,zero,1857
 101c9c0:	0101d07c 	xorhi	r4,zero,1857
 101c9c4:	0101d310 	cmplti	r4,zero,1868
 101c9c8:	0101d310 	cmplti	r4,zero,1868
 101c9cc:	0101d310 	cmplti	r4,zero,1868
 101c9d0:	0101d310 	cmplti	r4,zero,1868
 101c9d4:	0101d310 	cmplti	r4,zero,1868
 101c9d8:	0101d310 	cmplti	r4,zero,1868
 101c9dc:	0101d310 	cmplti	r4,zero,1868
 101c9e0:	0101d310 	cmplti	r4,zero,1868
 101c9e4:	0101d310 	cmplti	r4,zero,1868
 101c9e8:	0101d310 	cmplti	r4,zero,1868
 101c9ec:	0101d0a8 	cmpgeui	r4,zero,1858
 101c9f0:	0101d310 	cmplti	r4,zero,1868
 101c9f4:	0101d310 	cmplti	r4,zero,1868
 101c9f8:	0101d310 	cmplti	r4,zero,1868
 101c9fc:	0101d310 	cmplti	r4,zero,1868
 101ca00:	0101d310 	cmplti	r4,zero,1868
 101ca04:	0101d310 	cmplti	r4,zero,1868
 101ca08:	0101d310 	cmplti	r4,zero,1868
 101ca0c:	0101d310 	cmplti	r4,zero,1868
 101ca10:	0101d310 	cmplti	r4,zero,1868
 101ca14:	0101d310 	cmplti	r4,zero,1868
 101ca18:	0101d0e0 	cmpeqi	r4,zero,1859
 101ca1c:	0101d310 	cmplti	r4,zero,1868
 101ca20:	0101d310 	cmplti	r4,zero,1868
 101ca24:	0101d310 	cmplti	r4,zero,1868
 101ca28:	0101d310 	cmplti	r4,zero,1868
 101ca2c:	0101d310 	cmplti	r4,zero,1868
 101ca30:	0101d138 	rdprs	r4,zero,1860
 101ca34:	0101d310 	cmplti	r4,zero,1868
 101ca38:	0101d310 	cmplti	r4,zero,1868
 101ca3c:	0101d1a8 	cmpgeui	r4,zero,1862
 101ca40:	0101d310 	cmplti	r4,zero,1868
 101ca44:	0101d310 	cmplti	r4,zero,1868
 101ca48:	0101d310 	cmplti	r4,zero,1868
 101ca4c:	0101d310 	cmplti	r4,zero,1868
 101ca50:	0101d310 	cmplti	r4,zero,1868
 101ca54:	0101d310 	cmplti	r4,zero,1868
 101ca58:	0101d310 	cmplti	r4,zero,1868
 101ca5c:	0101d310 	cmplti	r4,zero,1868
 101ca60:	0101d310 	cmplti	r4,zero,1868
 101ca64:	0101d310 	cmplti	r4,zero,1868
 101ca68:	0101cf54 	movui	r4,1853
 101ca6c:	0101cf80 	call	101cf8 <__alt_mem_sdram-0xefe308>
 101ca70:	0101d310 	cmplti	r4,zero,1868
 101ca74:	0101d310 	cmplti	r4,zero,1868
 101ca78:	0101d310 	cmplti	r4,zero,1868
 101ca7c:	0101d2b8 	rdprs	r4,zero,1866
 101ca80:	0101cf80 	call	101cf8 <__alt_mem_sdram-0xefe308>
 101ca84:	0101d310 	cmplti	r4,zero,1868
 101ca88:	0101d310 	cmplti	r4,zero,1868
 101ca8c:	0101ce14 	movui	r4,1848
 101ca90:	0101d310 	cmplti	r4,zero,1868
 101ca94:	0101ce24 	muli	r4,zero,1848
 101ca98:	0101ce60 	cmpeqi	r4,zero,1849
 101ca9c:	0101cb5c 	xori	r4,zero,1837
 101caa0:	0101ce08 	cmpgei	r4,zero,1848
 101caa4:	0101d310 	cmplti	r4,zero,1868
 101caa8:	0101d1e4 	muli	r4,zero,1863
 101caac:	0101d310 	cmplti	r4,zero,1868
 101cab0:	0101d23c 	xorhi	r4,zero,1864
 101cab4:	0101d310 	cmplti	r4,zero,1868
 101cab8:	0101d310 	cmplti	r4,zero,1868
 101cabc:	0101cf00 	call	101cf0 <__alt_mem_sdram-0xefe310>
 101cac0:	42000204 	addi	r8,r8,8
 101cac4:	da802317 	ldw	r10,140(sp)
 101cac8:	5455883a 	add	r10,r10,r17
 101cacc:	da802315 	stw	r10,140(sp)
 101cad0:	003f8b06 	br	101c900 <__alt_data_end+0xff01c900>
 101cad4:	d9002017 	ldw	r4,128(sp)
 101cad8:	a00b883a 	mov	r5,r20
 101cadc:	101dd500 	call	101dd50 <__swsetup_r>
 101cae0:	1003b11e 	bne	r2,zero,101d9a8 <___vfiprintf_internal_r+0x11ec>
 101cae4:	a080030b 	ldhu	r2,12(r20)
 101cae8:	00c00284 	movi	r3,10
 101caec:	1080068c 	andi	r2,r2,26
 101caf0:	10ff541e 	bne	r2,r3,101c844 <__alt_data_end+0xff01c844>
 101caf4:	a080038f 	ldh	r2,14(r20)
 101caf8:	103f5216 	blt	r2,zero,101c844 <__alt_data_end+0xff01c844>
 101cafc:	d9c02217 	ldw	r7,136(sp)
 101cb00:	d9002017 	ldw	r4,128(sp)
 101cb04:	e00d883a 	mov	r6,fp
 101cb08:	a00b883a 	mov	r5,r20
 101cb0c:	101dc340 	call	101dc34 <__sbprintf>
 101cb10:	dfc03617 	ldw	ra,216(sp)
 101cb14:	df003517 	ldw	fp,212(sp)
 101cb18:	ddc03417 	ldw	r23,208(sp)
 101cb1c:	dd803317 	ldw	r22,204(sp)
 101cb20:	dd403217 	ldw	r21,200(sp)
 101cb24:	dd003117 	ldw	r20,196(sp)
 101cb28:	dcc03017 	ldw	r19,192(sp)
 101cb2c:	dc802f17 	ldw	r18,188(sp)
 101cb30:	dc402e17 	ldw	r17,184(sp)
 101cb34:	dc002d17 	ldw	r16,180(sp)
 101cb38:	dec03704 	addi	sp,sp,220
 101cb3c:	f800283a 	ret
 101cb40:	10186780 	call	1018678 <__sinit>
 101cb44:	003f2f06 	br	101c804 <__alt_data_end+0xff01c804>
 101cb48:	0463c83a 	sub	r17,zero,r17
 101cb4c:	d8802215 	stw	r2,136(sp)
 101cb50:	a5000114 	ori	r20,r20,4
 101cb54:	80c00007 	ldb	r3,0(r16)
 101cb58:	003f7706 	br	101c938 <__alt_data_end+0xff01c938>
 101cb5c:	00800c04 	movi	r2,48
 101cb60:	da802217 	ldw	r10,136(sp)
 101cb64:	d8801d05 	stb	r2,116(sp)
 101cb68:	00801e04 	movi	r2,120
 101cb6c:	d8801d45 	stb	r2,117(sp)
 101cb70:	d8001d85 	stb	zero,118(sp)
 101cb74:	50c00104 	addi	r3,r10,4
 101cb78:	54800017 	ldw	r18,0(r10)
 101cb7c:	0027883a 	mov	r19,zero
 101cb80:	a0800094 	ori	r2,r20,2
 101cb84:	48030b16 	blt	r9,zero,101d7b4 <___vfiprintf_internal_r+0xff8>
 101cb88:	00bfdfc4 	movi	r2,-129
 101cb8c:	a096703a 	and	r11,r20,r2
 101cb90:	d8c02215 	stw	r3,136(sp)
 101cb94:	5d000094 	ori	r20,r11,2
 101cb98:	90032b1e 	bne	r18,zero,101d848 <___vfiprintf_internal_r+0x108c>
 101cb9c:	008040b4 	movhi	r2,258
 101cba0:	1099c904 	addi	r2,r2,26404
 101cba4:	d8802615 	stw	r2,152(sp)
 101cba8:	0039883a 	mov	fp,zero
 101cbac:	48017b1e 	bne	r9,zero,101d19c <___vfiprintf_internal_r+0x9e0>
 101cbb0:	0013883a 	mov	r9,zero
 101cbb4:	0027883a 	mov	r19,zero
 101cbb8:	dd401a04 	addi	r21,sp,104
 101cbbc:	4825883a 	mov	r18,r9
 101cbc0:	4cc0010e 	bge	r9,r19,101cbc8 <___vfiprintf_internal_r+0x40c>
 101cbc4:	9825883a 	mov	r18,r19
 101cbc8:	e7003fcc 	andi	fp,fp,255
 101cbcc:	e700201c 	xori	fp,fp,128
 101cbd0:	e73fe004 	addi	fp,fp,-128
 101cbd4:	e0000126 	beq	fp,zero,101cbdc <___vfiprintf_internal_r+0x420>
 101cbd8:	94800044 	addi	r18,r18,1
 101cbdc:	a380008c 	andi	r14,r20,2
 101cbe0:	70000126 	beq	r14,zero,101cbe8 <___vfiprintf_internal_r+0x42c>
 101cbe4:	94800084 	addi	r18,r18,2
 101cbe8:	a700210c 	andi	fp,r20,132
 101cbec:	e001df1e 	bne	fp,zero,101d36c <___vfiprintf_internal_r+0xbb0>
 101cbf0:	8c87c83a 	sub	r3,r17,r18
 101cbf4:	00c1dd0e 	bge	zero,r3,101d36c <___vfiprintf_internal_r+0xbb0>
 101cbf8:	01c00404 	movi	r7,16
 101cbfc:	d8801c17 	ldw	r2,112(sp)
 101cc00:	38c3ad0e 	bge	r7,r3,101dab8 <___vfiprintf_internal_r+0x12fc>
 101cc04:	028040b4 	movhi	r10,258
 101cc08:	529a3504 	addi	r10,r10,26836
 101cc0c:	dc002915 	stw	r16,164(sp)
 101cc10:	d9801b17 	ldw	r6,108(sp)
 101cc14:	da802415 	stw	r10,144(sp)
 101cc18:	03c001c4 	movi	r15,7
 101cc1c:	da402515 	stw	r9,148(sp)
 101cc20:	db802815 	stw	r14,160(sp)
 101cc24:	1821883a 	mov	r16,r3
 101cc28:	00000506 	br	101cc40 <___vfiprintf_internal_r+0x484>
 101cc2c:	31400084 	addi	r5,r6,2
 101cc30:	42000204 	addi	r8,r8,8
 101cc34:	200d883a 	mov	r6,r4
 101cc38:	843ffc04 	addi	r16,r16,-16
 101cc3c:	3c000d0e 	bge	r7,r16,101cc74 <___vfiprintf_internal_r+0x4b8>
 101cc40:	10800404 	addi	r2,r2,16
 101cc44:	31000044 	addi	r4,r6,1
 101cc48:	45800015 	stw	r22,0(r8)
 101cc4c:	41c00115 	stw	r7,4(r8)
 101cc50:	d8801c15 	stw	r2,112(sp)
 101cc54:	d9001b15 	stw	r4,108(sp)
 101cc58:	793ff40e 	bge	r15,r4,101cc2c <__alt_data_end+0xff01cc2c>
 101cc5c:	1001b51e 	bne	r2,zero,101d334 <___vfiprintf_internal_r+0xb78>
 101cc60:	843ffc04 	addi	r16,r16,-16
 101cc64:	000d883a 	mov	r6,zero
 101cc68:	01400044 	movi	r5,1
 101cc6c:	d811883a 	mov	r8,sp
 101cc70:	3c3ff316 	blt	r7,r16,101cc40 <__alt_data_end+0xff01cc40>
 101cc74:	8007883a 	mov	r3,r16
 101cc78:	da402517 	ldw	r9,148(sp)
 101cc7c:	db802817 	ldw	r14,160(sp)
 101cc80:	dc002917 	ldw	r16,164(sp)
 101cc84:	da802417 	ldw	r10,144(sp)
 101cc88:	1885883a 	add	r2,r3,r2
 101cc8c:	40c00115 	stw	r3,4(r8)
 101cc90:	42800015 	stw	r10,0(r8)
 101cc94:	d8801c15 	stw	r2,112(sp)
 101cc98:	d9401b15 	stw	r5,108(sp)
 101cc9c:	00c001c4 	movi	r3,7
 101cca0:	19426016 	blt	r3,r5,101d624 <___vfiprintf_internal_r+0xe68>
 101cca4:	d8c01d87 	ldb	r3,118(sp)
 101cca8:	42000204 	addi	r8,r8,8
 101ccac:	29000044 	addi	r4,r5,1
 101ccb0:	1801b31e 	bne	r3,zero,101d380 <___vfiprintf_internal_r+0xbc4>
 101ccb4:	7001c026 	beq	r14,zero,101d3b8 <___vfiprintf_internal_r+0xbfc>
 101ccb8:	d8c01d04 	addi	r3,sp,116
 101ccbc:	10800084 	addi	r2,r2,2
 101ccc0:	40c00015 	stw	r3,0(r8)
 101ccc4:	00c00084 	movi	r3,2
 101ccc8:	40c00115 	stw	r3,4(r8)
 101cccc:	d8801c15 	stw	r2,112(sp)
 101ccd0:	d9001b15 	stw	r4,108(sp)
 101ccd4:	00c001c4 	movi	r3,7
 101ccd8:	1902650e 	bge	r3,r4,101d670 <___vfiprintf_internal_r+0xeb4>
 101ccdc:	10029a1e 	bne	r2,zero,101d748 <___vfiprintf_internal_r+0xf8c>
 101cce0:	00c02004 	movi	r3,128
 101cce4:	01000044 	movi	r4,1
 101cce8:	000b883a 	mov	r5,zero
 101ccec:	d811883a 	mov	r8,sp
 101ccf0:	e0c1b31e 	bne	fp,r3,101d3c0 <___vfiprintf_internal_r+0xc04>
 101ccf4:	8cb9c83a 	sub	fp,r17,r18
 101ccf8:	0701b10e 	bge	zero,fp,101d3c0 <___vfiprintf_internal_r+0xc04>
 101ccfc:	01c00404 	movi	r7,16
 101cd00:	3f03890e 	bge	r7,fp,101db28 <___vfiprintf_internal_r+0x136c>
 101cd04:	00c040b4 	movhi	r3,258
 101cd08:	18da3104 	addi	r3,r3,26820
 101cd0c:	d8c02415 	stw	r3,144(sp)
 101cd10:	8007883a 	mov	r3,r16
 101cd14:	034001c4 	movi	r13,7
 101cd18:	e021883a 	mov	r16,fp
 101cd1c:	da402515 	stw	r9,148(sp)
 101cd20:	1839883a 	mov	fp,r3
 101cd24:	00000506 	br	101cd3c <___vfiprintf_internal_r+0x580>
 101cd28:	29800084 	addi	r6,r5,2
 101cd2c:	42000204 	addi	r8,r8,8
 101cd30:	180b883a 	mov	r5,r3
 101cd34:	843ffc04 	addi	r16,r16,-16
 101cd38:	3c000d0e 	bge	r7,r16,101cd70 <___vfiprintf_internal_r+0x5b4>
 101cd3c:	10800404 	addi	r2,r2,16
 101cd40:	28c00044 	addi	r3,r5,1
 101cd44:	45c00015 	stw	r23,0(r8)
 101cd48:	41c00115 	stw	r7,4(r8)
 101cd4c:	d8801c15 	stw	r2,112(sp)
 101cd50:	d8c01b15 	stw	r3,108(sp)
 101cd54:	68fff40e 	bge	r13,r3,101cd28 <__alt_data_end+0xff01cd28>
 101cd58:	1002241e 	bne	r2,zero,101d5ec <___vfiprintf_internal_r+0xe30>
 101cd5c:	843ffc04 	addi	r16,r16,-16
 101cd60:	01800044 	movi	r6,1
 101cd64:	000b883a 	mov	r5,zero
 101cd68:	d811883a 	mov	r8,sp
 101cd6c:	3c3ff316 	blt	r7,r16,101cd3c <__alt_data_end+0xff01cd3c>
 101cd70:	da402517 	ldw	r9,148(sp)
 101cd74:	e007883a 	mov	r3,fp
 101cd78:	8039883a 	mov	fp,r16
 101cd7c:	1821883a 	mov	r16,r3
 101cd80:	d8c02417 	ldw	r3,144(sp)
 101cd84:	1705883a 	add	r2,r2,fp
 101cd88:	47000115 	stw	fp,4(r8)
 101cd8c:	40c00015 	stw	r3,0(r8)
 101cd90:	d8801c15 	stw	r2,112(sp)
 101cd94:	d9801b15 	stw	r6,108(sp)
 101cd98:	00c001c4 	movi	r3,7
 101cd9c:	19827616 	blt	r3,r6,101d778 <___vfiprintf_internal_r+0xfbc>
 101cda0:	4cf9c83a 	sub	fp,r9,r19
 101cda4:	42000204 	addi	r8,r8,8
 101cda8:	31000044 	addi	r4,r6,1
 101cdac:	300b883a 	mov	r5,r6
 101cdb0:	07018516 	blt	zero,fp,101d3c8 <___vfiprintf_internal_r+0xc0c>
 101cdb4:	9885883a 	add	r2,r19,r2
 101cdb8:	45400015 	stw	r21,0(r8)
 101cdbc:	44c00115 	stw	r19,4(r8)
 101cdc0:	d8801c15 	stw	r2,112(sp)
 101cdc4:	d9001b15 	stw	r4,108(sp)
 101cdc8:	00c001c4 	movi	r3,7
 101cdcc:	1901dd0e 	bge	r3,r4,101d544 <___vfiprintf_internal_r+0xd88>
 101cdd0:	1002401e 	bne	r2,zero,101d6d4 <___vfiprintf_internal_r+0xf18>
 101cdd4:	d8001b15 	stw	zero,108(sp)
 101cdd8:	a2c0010c 	andi	r11,r20,4
 101cddc:	58000226 	beq	r11,zero,101cde8 <___vfiprintf_internal_r+0x62c>
 101cde0:	8ca7c83a 	sub	r19,r17,r18
 101cde4:	04c2f216 	blt	zero,r19,101d9b0 <___vfiprintf_internal_r+0x11f4>
 101cde8:	8c80010e 	bge	r17,r18,101cdf0 <___vfiprintf_internal_r+0x634>
 101cdec:	9023883a 	mov	r17,r18
 101cdf0:	da802317 	ldw	r10,140(sp)
 101cdf4:	5455883a 	add	r10,r10,r17
 101cdf8:	da802315 	stw	r10,140(sp)
 101cdfc:	d8001b15 	stw	zero,108(sp)
 101ce00:	d811883a 	mov	r8,sp
 101ce04:	003ea206 	br	101c890 <__alt_data_end+0xff01c890>
 101ce08:	a5000814 	ori	r20,r20,32
 101ce0c:	80c00007 	ldb	r3,0(r16)
 101ce10:	003ec906 	br	101c938 <__alt_data_end+0xff01c938>
 101ce14:	80c00007 	ldb	r3,0(r16)
 101ce18:	1b030926 	beq	r3,r12,101da40 <___vfiprintf_internal_r+0x1284>
 101ce1c:	a5000414 	ori	r20,r20,16
 101ce20:	003ec506 	br	101c938 <__alt_data_end+0xff01c938>
 101ce24:	21003fcc 	andi	r4,r4,255
 101ce28:	20035e1e 	bne	r4,zero,101dba4 <___vfiprintf_internal_r+0x13e8>
 101ce2c:	a080080c 	andi	r2,r20,32
 101ce30:	1002a526 	beq	r2,zero,101d8c8 <___vfiprintf_internal_r+0x110c>
 101ce34:	da802217 	ldw	r10,136(sp)
 101ce38:	50800017 	ldw	r2,0(r10)
 101ce3c:	da802317 	ldw	r10,140(sp)
 101ce40:	5007d7fa 	srai	r3,r10,31
 101ce44:	da802217 	ldw	r10,136(sp)
 101ce48:	10c00115 	stw	r3,4(r2)
 101ce4c:	52800104 	addi	r10,r10,4
 101ce50:	da802215 	stw	r10,136(sp)
 101ce54:	da802317 	ldw	r10,140(sp)
 101ce58:	12800015 	stw	r10,0(r2)
 101ce5c:	003e8c06 	br	101c890 <__alt_data_end+0xff01c890>
 101ce60:	21003fcc 	andi	r4,r4,255
 101ce64:	2003511e 	bne	r4,zero,101dbac <___vfiprintf_internal_r+0x13f0>
 101ce68:	a080080c 	andi	r2,r20,32
 101ce6c:	1000a126 	beq	r2,zero,101d0f4 <___vfiprintf_internal_r+0x938>
 101ce70:	da802217 	ldw	r10,136(sp)
 101ce74:	d8001d85 	stb	zero,118(sp)
 101ce78:	50800204 	addi	r2,r10,8
 101ce7c:	54800017 	ldw	r18,0(r10)
 101ce80:	54c00117 	ldw	r19,4(r10)
 101ce84:	4802b416 	blt	r9,zero,101d958 <___vfiprintf_internal_r+0x119c>
 101ce88:	013fdfc4 	movi	r4,-129
 101ce8c:	94c6b03a 	or	r3,r18,r19
 101ce90:	d8802215 	stw	r2,136(sp)
 101ce94:	a128703a 	and	r20,r20,r4
 101ce98:	1800a226 	beq	r3,zero,101d124 <___vfiprintf_internal_r+0x968>
 101ce9c:	0039883a 	mov	fp,zero
 101cea0:	dd401a04 	addi	r21,sp,104
 101cea4:	9006d0fa 	srli	r3,r18,3
 101cea8:	9808977a 	slli	r4,r19,29
 101ceac:	9826d0fa 	srli	r19,r19,3
 101ceb0:	948001cc 	andi	r18,r18,7
 101ceb4:	90800c04 	addi	r2,r18,48
 101ceb8:	ad7fffc4 	addi	r21,r21,-1
 101cebc:	20e4b03a 	or	r18,r4,r3
 101cec0:	a8800005 	stb	r2,0(r21)
 101cec4:	94c6b03a 	or	r3,r18,r19
 101cec8:	183ff61e 	bne	r3,zero,101cea4 <__alt_data_end+0xff01cea4>
 101cecc:	a0c0004c 	andi	r3,r20,1
 101ced0:	18005926 	beq	r3,zero,101d038 <___vfiprintf_internal_r+0x87c>
 101ced4:	10803fcc 	andi	r2,r2,255
 101ced8:	1080201c 	xori	r2,r2,128
 101cedc:	10bfe004 	addi	r2,r2,-128
 101cee0:	00c00c04 	movi	r3,48
 101cee4:	10c05426 	beq	r2,r3,101d038 <___vfiprintf_internal_r+0x87c>
 101cee8:	da801e17 	ldw	r10,120(sp)
 101ceec:	a8bfffc4 	addi	r2,r21,-1
 101cef0:	a8ffffc5 	stb	r3,-1(r21)
 101cef4:	50a7c83a 	sub	r19,r10,r2
 101cef8:	102b883a 	mov	r21,r2
 101cefc:	003f2f06 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101cf00:	21003fcc 	andi	r4,r4,255
 101cf04:	2003421e 	bne	r4,zero,101dc10 <___vfiprintf_internal_r+0x1454>
 101cf08:	008040b4 	movhi	r2,258
 101cf0c:	1099c904 	addi	r2,r2,26404
 101cf10:	d8802615 	stw	r2,152(sp)
 101cf14:	a080080c 	andi	r2,r20,32
 101cf18:	1000aa26 	beq	r2,zero,101d1c4 <___vfiprintf_internal_r+0xa08>
 101cf1c:	da802217 	ldw	r10,136(sp)
 101cf20:	54800017 	ldw	r18,0(r10)
 101cf24:	54c00117 	ldw	r19,4(r10)
 101cf28:	52800204 	addi	r10,r10,8
 101cf2c:	da802215 	stw	r10,136(sp)
 101cf30:	a080004c 	andi	r2,r20,1
 101cf34:	1001d226 	beq	r2,zero,101d680 <___vfiprintf_internal_r+0xec4>
 101cf38:	94c4b03a 	or	r2,r18,r19
 101cf3c:	1002351e 	bne	r2,zero,101d814 <___vfiprintf_internal_r+0x1058>
 101cf40:	d8001d85 	stb	zero,118(sp)
 101cf44:	48022216 	blt	r9,zero,101d7d0 <___vfiprintf_internal_r+0x1014>
 101cf48:	00bfdfc4 	movi	r2,-129
 101cf4c:	a0a8703a 	and	r20,r20,r2
 101cf50:	003f1506 	br	101cba8 <__alt_data_end+0xff01cba8>
 101cf54:	da802217 	ldw	r10,136(sp)
 101cf58:	04800044 	movi	r18,1
 101cf5c:	d8001d85 	stb	zero,118(sp)
 101cf60:	50800017 	ldw	r2,0(r10)
 101cf64:	52800104 	addi	r10,r10,4
 101cf68:	da802215 	stw	r10,136(sp)
 101cf6c:	d8801005 	stb	r2,64(sp)
 101cf70:	9027883a 	mov	r19,r18
 101cf74:	dd401004 	addi	r21,sp,64
 101cf78:	0013883a 	mov	r9,zero
 101cf7c:	003f1706 	br	101cbdc <__alt_data_end+0xff01cbdc>
 101cf80:	21003fcc 	andi	r4,r4,255
 101cf84:	2003201e 	bne	r4,zero,101dc08 <___vfiprintf_internal_r+0x144c>
 101cf88:	a080080c 	andi	r2,r20,32
 101cf8c:	10004b26 	beq	r2,zero,101d0bc <___vfiprintf_internal_r+0x900>
 101cf90:	da802217 	ldw	r10,136(sp)
 101cf94:	50800117 	ldw	r2,4(r10)
 101cf98:	54800017 	ldw	r18,0(r10)
 101cf9c:	52800204 	addi	r10,r10,8
 101cfa0:	da802215 	stw	r10,136(sp)
 101cfa4:	1027883a 	mov	r19,r2
 101cfa8:	10022c16 	blt	r2,zero,101d85c <___vfiprintf_internal_r+0x10a0>
 101cfac:	df001d83 	ldbu	fp,118(sp)
 101cfb0:	48007216 	blt	r9,zero,101d17c <___vfiprintf_internal_r+0x9c0>
 101cfb4:	00ffdfc4 	movi	r3,-129
 101cfb8:	94c4b03a 	or	r2,r18,r19
 101cfbc:	a0e8703a 	and	r20,r20,r3
 101cfc0:	1000cc26 	beq	r2,zero,101d2f4 <___vfiprintf_internal_r+0xb38>
 101cfc4:	98021026 	beq	r19,zero,101d808 <___vfiprintf_internal_r+0x104c>
 101cfc8:	dc402415 	stw	r17,144(sp)
 101cfcc:	dc002515 	stw	r16,148(sp)
 101cfd0:	9823883a 	mov	r17,r19
 101cfd4:	9021883a 	mov	r16,r18
 101cfd8:	dd401a04 	addi	r21,sp,104
 101cfdc:	4825883a 	mov	r18,r9
 101cfe0:	4027883a 	mov	r19,r8
 101cfe4:	8009883a 	mov	r4,r16
 101cfe8:	880b883a 	mov	r5,r17
 101cfec:	01800284 	movi	r6,10
 101cff0:	000f883a 	mov	r7,zero
 101cff4:	101f5880 	call	101f588 <__umoddi3>
 101cff8:	10800c04 	addi	r2,r2,48
 101cffc:	ad7fffc4 	addi	r21,r21,-1
 101d000:	8009883a 	mov	r4,r16
 101d004:	880b883a 	mov	r5,r17
 101d008:	a8800005 	stb	r2,0(r21)
 101d00c:	01800284 	movi	r6,10
 101d010:	000f883a 	mov	r7,zero
 101d014:	101f0100 	call	101f010 <__udivdi3>
 101d018:	1021883a 	mov	r16,r2
 101d01c:	10c4b03a 	or	r2,r2,r3
 101d020:	1823883a 	mov	r17,r3
 101d024:	103fef1e 	bne	r2,zero,101cfe4 <__alt_data_end+0xff01cfe4>
 101d028:	dc402417 	ldw	r17,144(sp)
 101d02c:	dc002517 	ldw	r16,148(sp)
 101d030:	9013883a 	mov	r9,r18
 101d034:	9811883a 	mov	r8,r19
 101d038:	da801e17 	ldw	r10,120(sp)
 101d03c:	5567c83a 	sub	r19,r10,r21
 101d040:	003ede06 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101d044:	38803fcc 	andi	r2,r7,255
 101d048:	1080201c 	xori	r2,r2,128
 101d04c:	10bfe004 	addi	r2,r2,-128
 101d050:	1002371e 	bne	r2,zero,101d930 <___vfiprintf_internal_r+0x1174>
 101d054:	01000044 	movi	r4,1
 101d058:	01c00804 	movi	r7,32
 101d05c:	80c00007 	ldb	r3,0(r16)
 101d060:	003e3506 	br	101c938 <__alt_data_end+0xff01c938>
 101d064:	a5000054 	ori	r20,r20,1
 101d068:	80c00007 	ldb	r3,0(r16)
 101d06c:	003e3206 	br	101c938 <__alt_data_end+0xff01c938>
 101d070:	a5002014 	ori	r20,r20,128
 101d074:	80c00007 	ldb	r3,0(r16)
 101d078:	003e2f06 	br	101c938 <__alt_data_end+0xff01c938>
 101d07c:	8015883a 	mov	r10,r16
 101d080:	0023883a 	mov	r17,zero
 101d084:	18bff404 	addi	r2,r3,-48
 101d088:	50c00007 	ldb	r3,0(r10)
 101d08c:	8c4002a4 	muli	r17,r17,10
 101d090:	84000044 	addi	r16,r16,1
 101d094:	8015883a 	mov	r10,r16
 101d098:	1463883a 	add	r17,r2,r17
 101d09c:	18bff404 	addi	r2,r3,-48
 101d0a0:	30bff92e 	bgeu	r6,r2,101d088 <__alt_data_end+0xff01d088>
 101d0a4:	003e2506 	br	101c93c <__alt_data_end+0xff01c93c>
 101d0a8:	21003fcc 	andi	r4,r4,255
 101d0ac:	2002d41e 	bne	r4,zero,101dc00 <___vfiprintf_internal_r+0x1444>
 101d0b0:	a5000414 	ori	r20,r20,16
 101d0b4:	a080080c 	andi	r2,r20,32
 101d0b8:	103fb51e 	bne	r2,zero,101cf90 <__alt_data_end+0xff01cf90>
 101d0bc:	a080040c 	andi	r2,r20,16
 101d0c0:	1001f826 	beq	r2,zero,101d8a4 <___vfiprintf_internal_r+0x10e8>
 101d0c4:	da802217 	ldw	r10,136(sp)
 101d0c8:	54800017 	ldw	r18,0(r10)
 101d0cc:	52800104 	addi	r10,r10,4
 101d0d0:	da802215 	stw	r10,136(sp)
 101d0d4:	9027d7fa 	srai	r19,r18,31
 101d0d8:	9805883a 	mov	r2,r19
 101d0dc:	003fb206 	br	101cfa8 <__alt_data_end+0xff01cfa8>
 101d0e0:	21003fcc 	andi	r4,r4,255
 101d0e4:	2002c41e 	bne	r4,zero,101dbf8 <___vfiprintf_internal_r+0x143c>
 101d0e8:	a5000414 	ori	r20,r20,16
 101d0ec:	a080080c 	andi	r2,r20,32
 101d0f0:	103f5f1e 	bne	r2,zero,101ce70 <__alt_data_end+0xff01ce70>
 101d0f4:	a080040c 	andi	r2,r20,16
 101d0f8:	10020f26 	beq	r2,zero,101d938 <___vfiprintf_internal_r+0x117c>
 101d0fc:	da802217 	ldw	r10,136(sp)
 101d100:	d8001d85 	stb	zero,118(sp)
 101d104:	0027883a 	mov	r19,zero
 101d108:	50800104 	addi	r2,r10,4
 101d10c:	54800017 	ldw	r18,0(r10)
 101d110:	48021116 	blt	r9,zero,101d958 <___vfiprintf_internal_r+0x119c>
 101d114:	00ffdfc4 	movi	r3,-129
 101d118:	d8802215 	stw	r2,136(sp)
 101d11c:	a0e8703a 	and	r20,r20,r3
 101d120:	903f5e1e 	bne	r18,zero,101ce9c <__alt_data_end+0xff01ce9c>
 101d124:	0039883a 	mov	fp,zero
 101d128:	4802a626 	beq	r9,zero,101dbc4 <___vfiprintf_internal_r+0x1408>
 101d12c:	0025883a 	mov	r18,zero
 101d130:	0027883a 	mov	r19,zero
 101d134:	003f5a06 	br	101cea0 <__alt_data_end+0xff01cea0>
 101d138:	21003fcc 	andi	r4,r4,255
 101d13c:	20029f1e 	bne	r4,zero,101dbbc <___vfiprintf_internal_r+0x1400>
 101d140:	a5000414 	ori	r20,r20,16
 101d144:	a080080c 	andi	r2,r20,32
 101d148:	10005e1e 	bne	r2,zero,101d2c4 <___vfiprintf_internal_r+0xb08>
 101d14c:	a080040c 	andi	r2,r20,16
 101d150:	1001a21e 	bne	r2,zero,101d7dc <___vfiprintf_internal_r+0x1020>
 101d154:	a080100c 	andi	r2,r20,64
 101d158:	d8001d85 	stb	zero,118(sp)
 101d15c:	da802217 	ldw	r10,136(sp)
 101d160:	1002231e 	bne	r2,zero,101d9f0 <___vfiprintf_internal_r+0x1234>
 101d164:	50800104 	addi	r2,r10,4
 101d168:	54800017 	ldw	r18,0(r10)
 101d16c:	0027883a 	mov	r19,zero
 101d170:	4801a00e 	bge	r9,zero,101d7f4 <___vfiprintf_internal_r+0x1038>
 101d174:	d8802215 	stw	r2,136(sp)
 101d178:	0039883a 	mov	fp,zero
 101d17c:	94c4b03a 	or	r2,r18,r19
 101d180:	103f901e 	bne	r2,zero,101cfc4 <__alt_data_end+0xff01cfc4>
 101d184:	00800044 	movi	r2,1
 101d188:	10803fcc 	andi	r2,r2,255
 101d18c:	00c00044 	movi	r3,1
 101d190:	10c05926 	beq	r2,r3,101d2f8 <___vfiprintf_internal_r+0xb3c>
 101d194:	00c00084 	movi	r3,2
 101d198:	10ffe41e 	bne	r2,r3,101d12c <__alt_data_end+0xff01d12c>
 101d19c:	0025883a 	mov	r18,zero
 101d1a0:	0027883a 	mov	r19,zero
 101d1a4:	00013d06 	br	101d69c <___vfiprintf_internal_r+0xee0>
 101d1a8:	21003fcc 	andi	r4,r4,255
 101d1ac:	2002811e 	bne	r4,zero,101dbb4 <___vfiprintf_internal_r+0x13f8>
 101d1b0:	008040b4 	movhi	r2,258
 101d1b4:	1099c404 	addi	r2,r2,26384
 101d1b8:	d8802615 	stw	r2,152(sp)
 101d1bc:	a080080c 	andi	r2,r20,32
 101d1c0:	103f561e 	bne	r2,zero,101cf1c <__alt_data_end+0xff01cf1c>
 101d1c4:	a080040c 	andi	r2,r20,16
 101d1c8:	1001d126 	beq	r2,zero,101d910 <___vfiprintf_internal_r+0x1154>
 101d1cc:	da802217 	ldw	r10,136(sp)
 101d1d0:	0027883a 	mov	r19,zero
 101d1d4:	54800017 	ldw	r18,0(r10)
 101d1d8:	52800104 	addi	r10,r10,4
 101d1dc:	da802215 	stw	r10,136(sp)
 101d1e0:	003f5306 	br	101cf30 <__alt_data_end+0xff01cf30>
 101d1e4:	da802217 	ldw	r10,136(sp)
 101d1e8:	d8001d85 	stb	zero,118(sp)
 101d1ec:	55400017 	ldw	r21,0(r10)
 101d1f0:	50c00104 	addi	r3,r10,4
 101d1f4:	a8024226 	beq	r21,zero,101db00 <___vfiprintf_internal_r+0x1344>
 101d1f8:	48021816 	blt	r9,zero,101da5c <___vfiprintf_internal_r+0x12a0>
 101d1fc:	480d883a 	mov	r6,r9
 101d200:	000b883a 	mov	r5,zero
 101d204:	a809883a 	mov	r4,r21
 101d208:	d8c02a15 	stw	r3,168(sp)
 101d20c:	da002b15 	stw	r8,172(sp)
 101d210:	da402c15 	stw	r9,176(sp)
 101d214:	10195f40 	call	10195f4 <memchr>
 101d218:	d8c02a17 	ldw	r3,168(sp)
 101d21c:	da002b17 	ldw	r8,172(sp)
 101d220:	da402c17 	ldw	r9,176(sp)
 101d224:	10024826 	beq	r2,zero,101db48 <___vfiprintf_internal_r+0x138c>
 101d228:	1567c83a 	sub	r19,r2,r21
 101d22c:	df001d83 	ldbu	fp,118(sp)
 101d230:	d8c02215 	stw	r3,136(sp)
 101d234:	0013883a 	mov	r9,zero
 101d238:	003e6006 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101d23c:	21003fcc 	andi	r4,r4,255
 101d240:	203fc026 	beq	r4,zero,101d144 <__alt_data_end+0xff01d144>
 101d244:	d9c01d85 	stb	r7,118(sp)
 101d248:	003fbe06 	br	101d144 <__alt_data_end+0xff01d144>
 101d24c:	da802217 	ldw	r10,136(sp)
 101d250:	54400017 	ldw	r17,0(r10)
 101d254:	50800104 	addi	r2,r10,4
 101d258:	883e3b16 	blt	r17,zero,101cb48 <__alt_data_end+0xff01cb48>
 101d25c:	d8802215 	stw	r2,136(sp)
 101d260:	80c00007 	ldb	r3,0(r16)
 101d264:	003db406 	br	101c938 <__alt_data_end+0xff01c938>
 101d268:	01000044 	movi	r4,1
 101d26c:	01c00ac4 	movi	r7,43
 101d270:	80c00007 	ldb	r3,0(r16)
 101d274:	003db006 	br	101c938 <__alt_data_end+0xff01c938>
 101d278:	80c00007 	ldb	r3,0(r16)
 101d27c:	82800044 	addi	r10,r16,1
 101d280:	1b423c26 	beq	r3,r13,101db74 <___vfiprintf_internal_r+0x13b8>
 101d284:	18bff404 	addi	r2,r3,-48
 101d288:	0013883a 	mov	r9,zero
 101d28c:	30822b36 	bltu	r6,r2,101db3c <___vfiprintf_internal_r+0x1380>
 101d290:	50c00007 	ldb	r3,0(r10)
 101d294:	4a4002a4 	muli	r9,r9,10
 101d298:	54000044 	addi	r16,r10,1
 101d29c:	8015883a 	mov	r10,r16
 101d2a0:	4893883a 	add	r9,r9,r2
 101d2a4:	18bff404 	addi	r2,r3,-48
 101d2a8:	30bff92e 	bgeu	r6,r2,101d290 <__alt_data_end+0xff01d290>
 101d2ac:	483da30e 	bge	r9,zero,101c93c <__alt_data_end+0xff01c93c>
 101d2b0:	027fffc4 	movi	r9,-1
 101d2b4:	003da106 	br	101c93c <__alt_data_end+0xff01c93c>
 101d2b8:	a5001014 	ori	r20,r20,64
 101d2bc:	80c00007 	ldb	r3,0(r16)
 101d2c0:	003d9d06 	br	101c938 <__alt_data_end+0xff01c938>
 101d2c4:	da802217 	ldw	r10,136(sp)
 101d2c8:	d8001d85 	stb	zero,118(sp)
 101d2cc:	50c00204 	addi	r3,r10,8
 101d2d0:	54800017 	ldw	r18,0(r10)
 101d2d4:	54c00117 	ldw	r19,4(r10)
 101d2d8:	4801ca16 	blt	r9,zero,101da04 <___vfiprintf_internal_r+0x1248>
 101d2dc:	013fdfc4 	movi	r4,-129
 101d2e0:	94c4b03a 	or	r2,r18,r19
 101d2e4:	d8c02215 	stw	r3,136(sp)
 101d2e8:	a128703a 	and	r20,r20,r4
 101d2ec:	0039883a 	mov	fp,zero
 101d2f0:	103f341e 	bne	r2,zero,101cfc4 <__alt_data_end+0xff01cfc4>
 101d2f4:	483e2e26 	beq	r9,zero,101cbb0 <__alt_data_end+0xff01cbb0>
 101d2f8:	0025883a 	mov	r18,zero
 101d2fc:	94800c04 	addi	r18,r18,48
 101d300:	dc8019c5 	stb	r18,103(sp)
 101d304:	dcc02717 	ldw	r19,156(sp)
 101d308:	dd4019c4 	addi	r21,sp,103
 101d30c:	003e2b06 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101d310:	21003fcc 	andi	r4,r4,255
 101d314:	2002361e 	bne	r4,zero,101dbf0 <___vfiprintf_internal_r+0x1434>
 101d318:	1801c126 	beq	r3,zero,101da20 <___vfiprintf_internal_r+0x1264>
 101d31c:	04800044 	movi	r18,1
 101d320:	d8c01005 	stb	r3,64(sp)
 101d324:	d8001d85 	stb	zero,118(sp)
 101d328:	9027883a 	mov	r19,r18
 101d32c:	dd401004 	addi	r21,sp,64
 101d330:	003f1106 	br	101cf78 <__alt_data_end+0xff01cf78>
 101d334:	d9402117 	ldw	r5,132(sp)
 101d338:	d9002017 	ldw	r4,128(sp)
 101d33c:	d9801a04 	addi	r6,sp,104
 101d340:	d9c02b15 	stw	r7,172(sp)
 101d344:	dbc02a15 	stw	r15,168(sp)
 101d348:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d34c:	d9c02b17 	ldw	r7,172(sp)
 101d350:	dbc02a17 	ldw	r15,168(sp)
 101d354:	10006d1e 	bne	r2,zero,101d50c <___vfiprintf_internal_r+0xd50>
 101d358:	d9801b17 	ldw	r6,108(sp)
 101d35c:	d8801c17 	ldw	r2,112(sp)
 101d360:	d811883a 	mov	r8,sp
 101d364:	31400044 	addi	r5,r6,1
 101d368:	003e3306 	br	101cc38 <__alt_data_end+0xff01cc38>
 101d36c:	d9401b17 	ldw	r5,108(sp)
 101d370:	d8801c17 	ldw	r2,112(sp)
 101d374:	29000044 	addi	r4,r5,1
 101d378:	d8c01d87 	ldb	r3,118(sp)
 101d37c:	183e4d26 	beq	r3,zero,101ccb4 <__alt_data_end+0xff01ccb4>
 101d380:	00c00044 	movi	r3,1
 101d384:	d9401d84 	addi	r5,sp,118
 101d388:	10c5883a 	add	r2,r2,r3
 101d38c:	41400015 	stw	r5,0(r8)
 101d390:	40c00115 	stw	r3,4(r8)
 101d394:	d8801c15 	stw	r2,112(sp)
 101d398:	d9001b15 	stw	r4,108(sp)
 101d39c:	014001c4 	movi	r5,7
 101d3a0:	2900a90e 	bge	r5,r4,101d648 <___vfiprintf_internal_r+0xe8c>
 101d3a4:	1000da1e 	bne	r2,zero,101d710 <___vfiprintf_internal_r+0xf54>
 101d3a8:	7000ab1e 	bne	r14,zero,101d658 <___vfiprintf_internal_r+0xe9c>
 101d3ac:	000b883a 	mov	r5,zero
 101d3b0:	1809883a 	mov	r4,r3
 101d3b4:	d811883a 	mov	r8,sp
 101d3b8:	00c02004 	movi	r3,128
 101d3bc:	e0fe4d26 	beq	fp,r3,101ccf4 <__alt_data_end+0xff01ccf4>
 101d3c0:	4cf9c83a 	sub	fp,r9,r19
 101d3c4:	073e7b0e 	bge	zero,fp,101cdb4 <__alt_data_end+0xff01cdb4>
 101d3c8:	01c00404 	movi	r7,16
 101d3cc:	3f01900e 	bge	r7,fp,101da10 <___vfiprintf_internal_r+0x1254>
 101d3d0:	00c040b4 	movhi	r3,258
 101d3d4:	18da3104 	addi	r3,r3,26820
 101d3d8:	d8c02415 	stw	r3,144(sp)
 101d3dc:	034001c4 	movi	r13,7
 101d3e0:	00000506 	br	101d3f8 <___vfiprintf_internal_r+0xc3c>
 101d3e4:	29000084 	addi	r4,r5,2
 101d3e8:	42000204 	addi	r8,r8,8
 101d3ec:	180b883a 	mov	r5,r3
 101d3f0:	e73ffc04 	addi	fp,fp,-16
 101d3f4:	3f000d0e 	bge	r7,fp,101d42c <___vfiprintf_internal_r+0xc70>
 101d3f8:	10800404 	addi	r2,r2,16
 101d3fc:	28c00044 	addi	r3,r5,1
 101d400:	45c00015 	stw	r23,0(r8)
 101d404:	41c00115 	stw	r7,4(r8)
 101d408:	d8801c15 	stw	r2,112(sp)
 101d40c:	d8c01b15 	stw	r3,108(sp)
 101d410:	68fff40e 	bge	r13,r3,101d3e4 <__alt_data_end+0xff01d3e4>
 101d414:	1000101e 	bne	r2,zero,101d458 <___vfiprintf_internal_r+0xc9c>
 101d418:	e73ffc04 	addi	fp,fp,-16
 101d41c:	01000044 	movi	r4,1
 101d420:	000b883a 	mov	r5,zero
 101d424:	d811883a 	mov	r8,sp
 101d428:	3f3ff316 	blt	r7,fp,101d3f8 <__alt_data_end+0xff01d3f8>
 101d42c:	da802417 	ldw	r10,144(sp)
 101d430:	1705883a 	add	r2,r2,fp
 101d434:	47000115 	stw	fp,4(r8)
 101d438:	42800015 	stw	r10,0(r8)
 101d43c:	d8801c15 	stw	r2,112(sp)
 101d440:	d9001b15 	stw	r4,108(sp)
 101d444:	00c001c4 	movi	r3,7
 101d448:	19003616 	blt	r3,r4,101d524 <___vfiprintf_internal_r+0xd68>
 101d44c:	42000204 	addi	r8,r8,8
 101d450:	21000044 	addi	r4,r4,1
 101d454:	003e5706 	br	101cdb4 <__alt_data_end+0xff01cdb4>
 101d458:	d9402117 	ldw	r5,132(sp)
 101d45c:	d9002017 	ldw	r4,128(sp)
 101d460:	d9801a04 	addi	r6,sp,104
 101d464:	d9c02b15 	stw	r7,172(sp)
 101d468:	db402a15 	stw	r13,168(sp)
 101d46c:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d470:	d9c02b17 	ldw	r7,172(sp)
 101d474:	db402a17 	ldw	r13,168(sp)
 101d478:	1000241e 	bne	r2,zero,101d50c <___vfiprintf_internal_r+0xd50>
 101d47c:	d9401b17 	ldw	r5,108(sp)
 101d480:	d8801c17 	ldw	r2,112(sp)
 101d484:	d811883a 	mov	r8,sp
 101d488:	29000044 	addi	r4,r5,1
 101d48c:	003fd806 	br	101d3f0 <__alt_data_end+0xff01d3f0>
 101d490:	d9401b17 	ldw	r5,108(sp)
 101d494:	00c040b4 	movhi	r3,258
 101d498:	18da3504 	addi	r3,r3,26836
 101d49c:	d8c02415 	stw	r3,144(sp)
 101d4a0:	29400044 	addi	r5,r5,1
 101d4a4:	d8c02417 	ldw	r3,144(sp)
 101d4a8:	14c5883a 	add	r2,r2,r19
 101d4ac:	44c00115 	stw	r19,4(r8)
 101d4b0:	40c00015 	stw	r3,0(r8)
 101d4b4:	d8801c15 	stw	r2,112(sp)
 101d4b8:	d9401b15 	stw	r5,108(sp)
 101d4bc:	00c001c4 	movi	r3,7
 101d4c0:	1940070e 	bge	r3,r5,101d4e0 <___vfiprintf_internal_r+0xd24>
 101d4c4:	103e4826 	beq	r2,zero,101cde8 <__alt_data_end+0xff01cde8>
 101d4c8:	d9402117 	ldw	r5,132(sp)
 101d4cc:	d9002017 	ldw	r4,128(sp)
 101d4d0:	d9801a04 	addi	r6,sp,104
 101d4d4:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d4d8:	10000c1e 	bne	r2,zero,101d50c <___vfiprintf_internal_r+0xd50>
 101d4dc:	d8801c17 	ldw	r2,112(sp)
 101d4e0:	8c80010e 	bge	r17,r18,101d4e8 <___vfiprintf_internal_r+0xd2c>
 101d4e4:	9023883a 	mov	r17,r18
 101d4e8:	da802317 	ldw	r10,140(sp)
 101d4ec:	5455883a 	add	r10,r10,r17
 101d4f0:	da802315 	stw	r10,140(sp)
 101d4f4:	103e4126 	beq	r2,zero,101cdfc <__alt_data_end+0xff01cdfc>
 101d4f8:	d9402117 	ldw	r5,132(sp)
 101d4fc:	d9002017 	ldw	r4,128(sp)
 101d500:	d9801a04 	addi	r6,sp,104
 101d504:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d508:	103e3c26 	beq	r2,zero,101cdfc <__alt_data_end+0xff01cdfc>
 101d50c:	dd002117 	ldw	r20,132(sp)
 101d510:	a080030b 	ldhu	r2,12(r20)
 101d514:	1080100c 	andi	r2,r2,64
 101d518:	1001231e 	bne	r2,zero,101d9a8 <___vfiprintf_internal_r+0x11ec>
 101d51c:	d8802317 	ldw	r2,140(sp)
 101d520:	003d7b06 	br	101cb10 <__alt_data_end+0xff01cb10>
 101d524:	1000991e 	bne	r2,zero,101d78c <___vfiprintf_internal_r+0xfd0>
 101d528:	00c00044 	movi	r3,1
 101d52c:	9805883a 	mov	r2,r19
 101d530:	dd400015 	stw	r21,0(sp)
 101d534:	dcc00115 	stw	r19,4(sp)
 101d538:	dcc01c15 	stw	r19,112(sp)
 101d53c:	d8c01b15 	stw	r3,108(sp)
 101d540:	d811883a 	mov	r8,sp
 101d544:	42000204 	addi	r8,r8,8
 101d548:	a2c0010c 	andi	r11,r20,4
 101d54c:	583fe426 	beq	r11,zero,101d4e0 <__alt_data_end+0xff01d4e0>
 101d550:	8ca7c83a 	sub	r19,r17,r18
 101d554:	04ffe20e 	bge	zero,r19,101d4e0 <__alt_data_end+0xff01d4e0>
 101d558:	01c00404 	movi	r7,16
 101d55c:	3cffcc0e 	bge	r7,r19,101d490 <__alt_data_end+0xff01d490>
 101d560:	028040b4 	movhi	r10,258
 101d564:	529a3504 	addi	r10,r10,26836
 101d568:	d9001b17 	ldw	r4,108(sp)
 101d56c:	da802415 	stw	r10,144(sp)
 101d570:	382b883a 	mov	r21,r7
 101d574:	050001c4 	movi	r20,7
 101d578:	df002017 	ldw	fp,128(sp)
 101d57c:	00000506 	br	101d594 <___vfiprintf_internal_r+0xdd8>
 101d580:	21400084 	addi	r5,r4,2
 101d584:	42000204 	addi	r8,r8,8
 101d588:	1809883a 	mov	r4,r3
 101d58c:	9cfffc04 	addi	r19,r19,-16
 101d590:	acffc40e 	bge	r21,r19,101d4a4 <__alt_data_end+0xff01d4a4>
 101d594:	10800404 	addi	r2,r2,16
 101d598:	20c00044 	addi	r3,r4,1
 101d59c:	45800015 	stw	r22,0(r8)
 101d5a0:	45400115 	stw	r21,4(r8)
 101d5a4:	d8801c15 	stw	r2,112(sp)
 101d5a8:	d8c01b15 	stw	r3,108(sp)
 101d5ac:	a0fff40e 	bge	r20,r3,101d580 <__alt_data_end+0xff01d580>
 101d5b0:	1000041e 	bne	r2,zero,101d5c4 <___vfiprintf_internal_r+0xe08>
 101d5b4:	01400044 	movi	r5,1
 101d5b8:	0009883a 	mov	r4,zero
 101d5bc:	d811883a 	mov	r8,sp
 101d5c0:	003ff206 	br	101d58c <__alt_data_end+0xff01d58c>
 101d5c4:	d9402117 	ldw	r5,132(sp)
 101d5c8:	d9801a04 	addi	r6,sp,104
 101d5cc:	e009883a 	mov	r4,fp
 101d5d0:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d5d4:	103fcd1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d5d8:	d9001b17 	ldw	r4,108(sp)
 101d5dc:	d8801c17 	ldw	r2,112(sp)
 101d5e0:	d811883a 	mov	r8,sp
 101d5e4:	21400044 	addi	r5,r4,1
 101d5e8:	003fe806 	br	101d58c <__alt_data_end+0xff01d58c>
 101d5ec:	d9402117 	ldw	r5,132(sp)
 101d5f0:	d9002017 	ldw	r4,128(sp)
 101d5f4:	d9801a04 	addi	r6,sp,104
 101d5f8:	d9c02b15 	stw	r7,172(sp)
 101d5fc:	db402a15 	stw	r13,168(sp)
 101d600:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d604:	d9c02b17 	ldw	r7,172(sp)
 101d608:	db402a17 	ldw	r13,168(sp)
 101d60c:	103fbf1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d610:	d9401b17 	ldw	r5,108(sp)
 101d614:	d8801c17 	ldw	r2,112(sp)
 101d618:	d811883a 	mov	r8,sp
 101d61c:	29800044 	addi	r6,r5,1
 101d620:	003dc406 	br	101cd34 <__alt_data_end+0xff01cd34>
 101d624:	1000d21e 	bne	r2,zero,101d970 <___vfiprintf_internal_r+0x11b4>
 101d628:	d8c01d87 	ldb	r3,118(sp)
 101d62c:	18009526 	beq	r3,zero,101d884 <___vfiprintf_internal_r+0x10c8>
 101d630:	00800044 	movi	r2,1
 101d634:	d8c01d84 	addi	r3,sp,118
 101d638:	1009883a 	mov	r4,r2
 101d63c:	d8c00015 	stw	r3,0(sp)
 101d640:	d8800115 	stw	r2,4(sp)
 101d644:	d811883a 	mov	r8,sp
 101d648:	200b883a 	mov	r5,r4
 101d64c:	42000204 	addi	r8,r8,8
 101d650:	21000044 	addi	r4,r4,1
 101d654:	003d9706 	br	101ccb4 <__alt_data_end+0xff01ccb4>
 101d658:	d9001d04 	addi	r4,sp,116
 101d65c:	00800084 	movi	r2,2
 101d660:	d9000015 	stw	r4,0(sp)
 101d664:	d8800115 	stw	r2,4(sp)
 101d668:	1809883a 	mov	r4,r3
 101d66c:	d811883a 	mov	r8,sp
 101d670:	200b883a 	mov	r5,r4
 101d674:	42000204 	addi	r8,r8,8
 101d678:	21000044 	addi	r4,r4,1
 101d67c:	003f4e06 	br	101d3b8 <__alt_data_end+0xff01d3b8>
 101d680:	d8001d85 	stb	zero,118(sp)
 101d684:	48005016 	blt	r9,zero,101d7c8 <___vfiprintf_internal_r+0x100c>
 101d688:	00ffdfc4 	movi	r3,-129
 101d68c:	94c4b03a 	or	r2,r18,r19
 101d690:	a0e8703a 	and	r20,r20,r3
 101d694:	103d4426 	beq	r2,zero,101cba8 <__alt_data_end+0xff01cba8>
 101d698:	0039883a 	mov	fp,zero
 101d69c:	d9002617 	ldw	r4,152(sp)
 101d6a0:	dd401a04 	addi	r21,sp,104
 101d6a4:	908003cc 	andi	r2,r18,15
 101d6a8:	9806973a 	slli	r3,r19,28
 101d6ac:	2085883a 	add	r2,r4,r2
 101d6b0:	9024d13a 	srli	r18,r18,4
 101d6b4:	10800003 	ldbu	r2,0(r2)
 101d6b8:	9826d13a 	srli	r19,r19,4
 101d6bc:	ad7fffc4 	addi	r21,r21,-1
 101d6c0:	1ca4b03a 	or	r18,r3,r18
 101d6c4:	a8800005 	stb	r2,0(r21)
 101d6c8:	94c4b03a 	or	r2,r18,r19
 101d6cc:	103ff51e 	bne	r2,zero,101d6a4 <__alt_data_end+0xff01d6a4>
 101d6d0:	003e5906 	br	101d038 <__alt_data_end+0xff01d038>
 101d6d4:	d9402117 	ldw	r5,132(sp)
 101d6d8:	d9002017 	ldw	r4,128(sp)
 101d6dc:	d9801a04 	addi	r6,sp,104
 101d6e0:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d6e4:	103f891e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d6e8:	d8801c17 	ldw	r2,112(sp)
 101d6ec:	d811883a 	mov	r8,sp
 101d6f0:	003f9506 	br	101d548 <__alt_data_end+0xff01d548>
 101d6f4:	d9402117 	ldw	r5,132(sp)
 101d6f8:	d9002017 	ldw	r4,128(sp)
 101d6fc:	d9801a04 	addi	r6,sp,104
 101d700:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d704:	103f811e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d708:	d811883a 	mov	r8,sp
 101d70c:	003ced06 	br	101cac4 <__alt_data_end+0xff01cac4>
 101d710:	d9402117 	ldw	r5,132(sp)
 101d714:	d9002017 	ldw	r4,128(sp)
 101d718:	d9801a04 	addi	r6,sp,104
 101d71c:	da402c15 	stw	r9,176(sp)
 101d720:	db802a15 	stw	r14,168(sp)
 101d724:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d728:	da402c17 	ldw	r9,176(sp)
 101d72c:	db802a17 	ldw	r14,168(sp)
 101d730:	103f761e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d734:	d9401b17 	ldw	r5,108(sp)
 101d738:	d8801c17 	ldw	r2,112(sp)
 101d73c:	d811883a 	mov	r8,sp
 101d740:	29000044 	addi	r4,r5,1
 101d744:	003d5b06 	br	101ccb4 <__alt_data_end+0xff01ccb4>
 101d748:	d9402117 	ldw	r5,132(sp)
 101d74c:	d9002017 	ldw	r4,128(sp)
 101d750:	d9801a04 	addi	r6,sp,104
 101d754:	da402c15 	stw	r9,176(sp)
 101d758:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d75c:	da402c17 	ldw	r9,176(sp)
 101d760:	103f6a1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d764:	d9401b17 	ldw	r5,108(sp)
 101d768:	d8801c17 	ldw	r2,112(sp)
 101d76c:	d811883a 	mov	r8,sp
 101d770:	29000044 	addi	r4,r5,1
 101d774:	003f1006 	br	101d3b8 <__alt_data_end+0xff01d3b8>
 101d778:	1000c31e 	bne	r2,zero,101da88 <___vfiprintf_internal_r+0x12cc>
 101d77c:	01000044 	movi	r4,1
 101d780:	000b883a 	mov	r5,zero
 101d784:	d811883a 	mov	r8,sp
 101d788:	003f0d06 	br	101d3c0 <__alt_data_end+0xff01d3c0>
 101d78c:	d9402117 	ldw	r5,132(sp)
 101d790:	d9002017 	ldw	r4,128(sp)
 101d794:	d9801a04 	addi	r6,sp,104
 101d798:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d79c:	103f5b1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d7a0:	d9001b17 	ldw	r4,108(sp)
 101d7a4:	d8801c17 	ldw	r2,112(sp)
 101d7a8:	d811883a 	mov	r8,sp
 101d7ac:	21000044 	addi	r4,r4,1
 101d7b0:	003d8006 	br	101cdb4 <__alt_data_end+0xff01cdb4>
 101d7b4:	010040b4 	movhi	r4,258
 101d7b8:	2119c904 	addi	r4,r4,26404
 101d7bc:	d9002615 	stw	r4,152(sp)
 101d7c0:	d8c02215 	stw	r3,136(sp)
 101d7c4:	1029883a 	mov	r20,r2
 101d7c8:	94c4b03a 	or	r2,r18,r19
 101d7cc:	103fb21e 	bne	r2,zero,101d698 <__alt_data_end+0xff01d698>
 101d7d0:	0039883a 	mov	fp,zero
 101d7d4:	00800084 	movi	r2,2
 101d7d8:	003e6b06 	br	101d188 <__alt_data_end+0xff01d188>
 101d7dc:	da802217 	ldw	r10,136(sp)
 101d7e0:	d8001d85 	stb	zero,118(sp)
 101d7e4:	0027883a 	mov	r19,zero
 101d7e8:	50800104 	addi	r2,r10,4
 101d7ec:	54800017 	ldw	r18,0(r10)
 101d7f0:	483e6016 	blt	r9,zero,101d174 <__alt_data_end+0xff01d174>
 101d7f4:	00ffdfc4 	movi	r3,-129
 101d7f8:	d8802215 	stw	r2,136(sp)
 101d7fc:	a0e8703a 	and	r20,r20,r3
 101d800:	0039883a 	mov	fp,zero
 101d804:	903ebb26 	beq	r18,zero,101d2f4 <__alt_data_end+0xff01d2f4>
 101d808:	00800244 	movi	r2,9
 101d80c:	14bdee36 	bltu	r2,r18,101cfc8 <__alt_data_end+0xff01cfc8>
 101d810:	003eba06 	br	101d2fc <__alt_data_end+0xff01d2fc>
 101d814:	00800c04 	movi	r2,48
 101d818:	d8c01d45 	stb	r3,117(sp)
 101d81c:	d8801d05 	stb	r2,116(sp)
 101d820:	d8001d85 	stb	zero,118(sp)
 101d824:	a0c00094 	ori	r3,r20,2
 101d828:	4800a916 	blt	r9,zero,101dad0 <___vfiprintf_internal_r+0x1314>
 101d82c:	00bfdfc4 	movi	r2,-129
 101d830:	a096703a 	and	r11,r20,r2
 101d834:	5d000094 	ori	r20,r11,2
 101d838:	0039883a 	mov	fp,zero
 101d83c:	003f9706 	br	101d69c <__alt_data_end+0xff01d69c>
 101d840:	8025883a 	mov	r18,r16
 101d844:	003c2e06 	br	101c900 <__alt_data_end+0xff01c900>
 101d848:	008040b4 	movhi	r2,258
 101d84c:	1099c904 	addi	r2,r2,26404
 101d850:	0039883a 	mov	fp,zero
 101d854:	d8802615 	stw	r2,152(sp)
 101d858:	003f9006 	br	101d69c <__alt_data_end+0xff01d69c>
 101d85c:	04a5c83a 	sub	r18,zero,r18
 101d860:	07000b44 	movi	fp,45
 101d864:	9004c03a 	cmpne	r2,r18,zero
 101d868:	04e7c83a 	sub	r19,zero,r19
 101d86c:	df001d85 	stb	fp,118(sp)
 101d870:	98a7c83a 	sub	r19,r19,r2
 101d874:	48009f16 	blt	r9,zero,101daf4 <___vfiprintf_internal_r+0x1338>
 101d878:	00bfdfc4 	movi	r2,-129
 101d87c:	a0a8703a 	and	r20,r20,r2
 101d880:	003dd006 	br	101cfc4 <__alt_data_end+0xff01cfc4>
 101d884:	70004c26 	beq	r14,zero,101d9b8 <___vfiprintf_internal_r+0x11fc>
 101d888:	00800084 	movi	r2,2
 101d88c:	d8c01d04 	addi	r3,sp,116
 101d890:	d8c00015 	stw	r3,0(sp)
 101d894:	d8800115 	stw	r2,4(sp)
 101d898:	01000044 	movi	r4,1
 101d89c:	d811883a 	mov	r8,sp
 101d8a0:	003f7306 	br	101d670 <__alt_data_end+0xff01d670>
 101d8a4:	a080100c 	andi	r2,r20,64
 101d8a8:	da802217 	ldw	r10,136(sp)
 101d8ac:	103e0626 	beq	r2,zero,101d0c8 <__alt_data_end+0xff01d0c8>
 101d8b0:	5480000f 	ldh	r18,0(r10)
 101d8b4:	52800104 	addi	r10,r10,4
 101d8b8:	da802215 	stw	r10,136(sp)
 101d8bc:	9027d7fa 	srai	r19,r18,31
 101d8c0:	9805883a 	mov	r2,r19
 101d8c4:	003db806 	br	101cfa8 <__alt_data_end+0xff01cfa8>
 101d8c8:	a080040c 	andi	r2,r20,16
 101d8cc:	1000091e 	bne	r2,zero,101d8f4 <___vfiprintf_internal_r+0x1138>
 101d8d0:	a2c0100c 	andi	r11,r20,64
 101d8d4:	58000726 	beq	r11,zero,101d8f4 <___vfiprintf_internal_r+0x1138>
 101d8d8:	da802217 	ldw	r10,136(sp)
 101d8dc:	50800017 	ldw	r2,0(r10)
 101d8e0:	52800104 	addi	r10,r10,4
 101d8e4:	da802215 	stw	r10,136(sp)
 101d8e8:	da802317 	ldw	r10,140(sp)
 101d8ec:	1280000d 	sth	r10,0(r2)
 101d8f0:	003be706 	br	101c890 <__alt_data_end+0xff01c890>
 101d8f4:	da802217 	ldw	r10,136(sp)
 101d8f8:	50800017 	ldw	r2,0(r10)
 101d8fc:	52800104 	addi	r10,r10,4
 101d900:	da802215 	stw	r10,136(sp)
 101d904:	da802317 	ldw	r10,140(sp)
 101d908:	12800015 	stw	r10,0(r2)
 101d90c:	003be006 	br	101c890 <__alt_data_end+0xff01c890>
 101d910:	a080100c 	andi	r2,r20,64
 101d914:	da802217 	ldw	r10,136(sp)
 101d918:	10003026 	beq	r2,zero,101d9dc <___vfiprintf_internal_r+0x1220>
 101d91c:	5480000b 	ldhu	r18,0(r10)
 101d920:	52800104 	addi	r10,r10,4
 101d924:	0027883a 	mov	r19,zero
 101d928:	da802215 	stw	r10,136(sp)
 101d92c:	003d8006 	br	101cf30 <__alt_data_end+0xff01cf30>
 101d930:	80c00007 	ldb	r3,0(r16)
 101d934:	003c0006 	br	101c938 <__alt_data_end+0xff01c938>
 101d938:	a080100c 	andi	r2,r20,64
 101d93c:	d8001d85 	stb	zero,118(sp)
 101d940:	da802217 	ldw	r10,136(sp)
 101d944:	1000201e 	bne	r2,zero,101d9c8 <___vfiprintf_internal_r+0x120c>
 101d948:	50800104 	addi	r2,r10,4
 101d94c:	54800017 	ldw	r18,0(r10)
 101d950:	0027883a 	mov	r19,zero
 101d954:	483def0e 	bge	r9,zero,101d114 <__alt_data_end+0xff01d114>
 101d958:	94c6b03a 	or	r3,r18,r19
 101d95c:	d8802215 	stw	r2,136(sp)
 101d960:	183d4e1e 	bne	r3,zero,101ce9c <__alt_data_end+0xff01ce9c>
 101d964:	0039883a 	mov	fp,zero
 101d968:	0005883a 	mov	r2,zero
 101d96c:	003e0606 	br	101d188 <__alt_data_end+0xff01d188>
 101d970:	d9402117 	ldw	r5,132(sp)
 101d974:	d9002017 	ldw	r4,128(sp)
 101d978:	d9801a04 	addi	r6,sp,104
 101d97c:	da402c15 	stw	r9,176(sp)
 101d980:	db802a15 	stw	r14,168(sp)
 101d984:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101d988:	da402c17 	ldw	r9,176(sp)
 101d98c:	db802a17 	ldw	r14,168(sp)
 101d990:	103ede1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101d994:	d9401b17 	ldw	r5,108(sp)
 101d998:	d8801c17 	ldw	r2,112(sp)
 101d99c:	d811883a 	mov	r8,sp
 101d9a0:	29000044 	addi	r4,r5,1
 101d9a4:	003e7406 	br	101d378 <__alt_data_end+0xff01d378>
 101d9a8:	00bfffc4 	movi	r2,-1
 101d9ac:	003c5806 	br	101cb10 <__alt_data_end+0xff01cb10>
 101d9b0:	d811883a 	mov	r8,sp
 101d9b4:	003ee806 	br	101d558 <__alt_data_end+0xff01d558>
 101d9b8:	000b883a 	mov	r5,zero
 101d9bc:	01000044 	movi	r4,1
 101d9c0:	d811883a 	mov	r8,sp
 101d9c4:	003e7c06 	br	101d3b8 <__alt_data_end+0xff01d3b8>
 101d9c8:	50800104 	addi	r2,r10,4
 101d9cc:	5480000b 	ldhu	r18,0(r10)
 101d9d0:	0027883a 	mov	r19,zero
 101d9d4:	483dcf0e 	bge	r9,zero,101d114 <__alt_data_end+0xff01d114>
 101d9d8:	003fdf06 	br	101d958 <__alt_data_end+0xff01d958>
 101d9dc:	54800017 	ldw	r18,0(r10)
 101d9e0:	52800104 	addi	r10,r10,4
 101d9e4:	0027883a 	mov	r19,zero
 101d9e8:	da802215 	stw	r10,136(sp)
 101d9ec:	003d5006 	br	101cf30 <__alt_data_end+0xff01cf30>
 101d9f0:	50800104 	addi	r2,r10,4
 101d9f4:	5480000b 	ldhu	r18,0(r10)
 101d9f8:	0027883a 	mov	r19,zero
 101d9fc:	483f7d0e 	bge	r9,zero,101d7f4 <__alt_data_end+0xff01d7f4>
 101da00:	003ddc06 	br	101d174 <__alt_data_end+0xff01d174>
 101da04:	d8c02215 	stw	r3,136(sp)
 101da08:	0039883a 	mov	fp,zero
 101da0c:	003ddb06 	br	101d17c <__alt_data_end+0xff01d17c>
 101da10:	028040b4 	movhi	r10,258
 101da14:	529a3104 	addi	r10,r10,26820
 101da18:	da802415 	stw	r10,144(sp)
 101da1c:	003e8306 	br	101d42c <__alt_data_end+0xff01d42c>
 101da20:	d8801c17 	ldw	r2,112(sp)
 101da24:	dd002117 	ldw	r20,132(sp)
 101da28:	103eb926 	beq	r2,zero,101d510 <__alt_data_end+0xff01d510>
 101da2c:	d9002017 	ldw	r4,128(sp)
 101da30:	d9801a04 	addi	r6,sp,104
 101da34:	a00b883a 	mov	r5,r20
 101da38:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101da3c:	003eb406 	br	101d510 <__alt_data_end+0xff01d510>
 101da40:	80c00043 	ldbu	r3,1(r16)
 101da44:	a5000814 	ori	r20,r20,32
 101da48:	84000044 	addi	r16,r16,1
 101da4c:	18c03fcc 	andi	r3,r3,255
 101da50:	18c0201c 	xori	r3,r3,128
 101da54:	18ffe004 	addi	r3,r3,-128
 101da58:	003bb706 	br	101c938 <__alt_data_end+0xff01c938>
 101da5c:	a809883a 	mov	r4,r21
 101da60:	d8c02a15 	stw	r3,168(sp)
 101da64:	da002b15 	stw	r8,172(sp)
 101da68:	101463c0 	call	101463c <strlen>
 101da6c:	d8c02a17 	ldw	r3,168(sp)
 101da70:	1027883a 	mov	r19,r2
 101da74:	df001d83 	ldbu	fp,118(sp)
 101da78:	d8c02215 	stw	r3,136(sp)
 101da7c:	0013883a 	mov	r9,zero
 101da80:	da002b17 	ldw	r8,172(sp)
 101da84:	003c4d06 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101da88:	d9402117 	ldw	r5,132(sp)
 101da8c:	d9002017 	ldw	r4,128(sp)
 101da90:	d9801a04 	addi	r6,sp,104
 101da94:	da402c15 	stw	r9,176(sp)
 101da98:	101c6a80 	call	101c6a8 <__sprint_r.part.0>
 101da9c:	da402c17 	ldw	r9,176(sp)
 101daa0:	103e9a1e 	bne	r2,zero,101d50c <__alt_data_end+0xff01d50c>
 101daa4:	d9401b17 	ldw	r5,108(sp)
 101daa8:	d8801c17 	ldw	r2,112(sp)
 101daac:	d811883a 	mov	r8,sp
 101dab0:	29000044 	addi	r4,r5,1
 101dab4:	003e4206 	br	101d3c0 <__alt_data_end+0xff01d3c0>
 101dab8:	d9401b17 	ldw	r5,108(sp)
 101dabc:	010040b4 	movhi	r4,258
 101dac0:	211a3504 	addi	r4,r4,26836
 101dac4:	d9002415 	stw	r4,144(sp)
 101dac8:	29400044 	addi	r5,r5,1
 101dacc:	003c6d06 	br	101cc84 <__alt_data_end+0xff01cc84>
 101dad0:	0039883a 	mov	fp,zero
 101dad4:	00800084 	movi	r2,2
 101dad8:	10803fcc 	andi	r2,r2,255
 101dadc:	01000044 	movi	r4,1
 101dae0:	11001e26 	beq	r2,r4,101db5c <___vfiprintf_internal_r+0x13a0>
 101dae4:	01000084 	movi	r4,2
 101dae8:	11001e1e 	bne	r2,r4,101db64 <___vfiprintf_internal_r+0x13a8>
 101daec:	1829883a 	mov	r20,r3
 101daf0:	003eea06 	br	101d69c <__alt_data_end+0xff01d69c>
 101daf4:	a007883a 	mov	r3,r20
 101daf8:	00800044 	movi	r2,1
 101dafc:	003ff606 	br	101dad8 <__alt_data_end+0xff01dad8>
 101db00:	00800184 	movi	r2,6
 101db04:	1240012e 	bgeu	r2,r9,101db0c <___vfiprintf_internal_r+0x1350>
 101db08:	1013883a 	mov	r9,r2
 101db0c:	4827883a 	mov	r19,r9
 101db10:	4825883a 	mov	r18,r9
 101db14:	48001516 	blt	r9,zero,101db6c <___vfiprintf_internal_r+0x13b0>
 101db18:	054040b4 	movhi	r21,258
 101db1c:	d8c02215 	stw	r3,136(sp)
 101db20:	ad59ce04 	addi	r21,r21,26424
 101db24:	003d1406 	br	101cf78 <__alt_data_end+0xff01cf78>
 101db28:	028040b4 	movhi	r10,258
 101db2c:	529a3104 	addi	r10,r10,26820
 101db30:	da802415 	stw	r10,144(sp)
 101db34:	200d883a 	mov	r6,r4
 101db38:	003c9106 	br	101cd80 <__alt_data_end+0xff01cd80>
 101db3c:	5021883a 	mov	r16,r10
 101db40:	0013883a 	mov	r9,zero
 101db44:	003b7d06 	br	101c93c <__alt_data_end+0xff01c93c>
 101db48:	4827883a 	mov	r19,r9
 101db4c:	df001d83 	ldbu	fp,118(sp)
 101db50:	d8c02215 	stw	r3,136(sp)
 101db54:	0013883a 	mov	r9,zero
 101db58:	003c1806 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101db5c:	1829883a 	mov	r20,r3
 101db60:	003d1806 	br	101cfc4 <__alt_data_end+0xff01cfc4>
 101db64:	1829883a 	mov	r20,r3
 101db68:	003ccd06 	br	101cea0 <__alt_data_end+0xff01cea0>
 101db6c:	0025883a 	mov	r18,zero
 101db70:	003fe906 	br	101db18 <__alt_data_end+0xff01db18>
 101db74:	d8802217 	ldw	r2,136(sp)
 101db78:	80c00043 	ldbu	r3,1(r16)
 101db7c:	5021883a 	mov	r16,r10
 101db80:	12400017 	ldw	r9,0(r2)
 101db84:	10800104 	addi	r2,r2,4
 101db88:	d8802215 	stw	r2,136(sp)
 101db8c:	483faf0e 	bge	r9,zero,101da4c <__alt_data_end+0xff01da4c>
 101db90:	18c03fcc 	andi	r3,r3,255
 101db94:	18c0201c 	xori	r3,r3,128
 101db98:	027fffc4 	movi	r9,-1
 101db9c:	18ffe004 	addi	r3,r3,-128
 101dba0:	003b6506 	br	101c938 <__alt_data_end+0xff01c938>
 101dba4:	d9c01d85 	stb	r7,118(sp)
 101dba8:	003ca006 	br	101ce2c <__alt_data_end+0xff01ce2c>
 101dbac:	d9c01d85 	stb	r7,118(sp)
 101dbb0:	003cad06 	br	101ce68 <__alt_data_end+0xff01ce68>
 101dbb4:	d9c01d85 	stb	r7,118(sp)
 101dbb8:	003d7d06 	br	101d1b0 <__alt_data_end+0xff01d1b0>
 101dbbc:	d9c01d85 	stb	r7,118(sp)
 101dbc0:	003d5f06 	br	101d140 <__alt_data_end+0xff01d140>
 101dbc4:	a080004c 	andi	r2,r20,1
 101dbc8:	0039883a 	mov	fp,zero
 101dbcc:	10000526 	beq	r2,zero,101dbe4 <___vfiprintf_internal_r+0x1428>
 101dbd0:	00800c04 	movi	r2,48
 101dbd4:	d88019c5 	stb	r2,103(sp)
 101dbd8:	dcc02717 	ldw	r19,156(sp)
 101dbdc:	dd4019c4 	addi	r21,sp,103
 101dbe0:	003bf606 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101dbe4:	0027883a 	mov	r19,zero
 101dbe8:	dd401a04 	addi	r21,sp,104
 101dbec:	003bf306 	br	101cbbc <__alt_data_end+0xff01cbbc>
 101dbf0:	d9c01d85 	stb	r7,118(sp)
 101dbf4:	003dc806 	br	101d318 <__alt_data_end+0xff01d318>
 101dbf8:	d9c01d85 	stb	r7,118(sp)
 101dbfc:	003d3a06 	br	101d0e8 <__alt_data_end+0xff01d0e8>
 101dc00:	d9c01d85 	stb	r7,118(sp)
 101dc04:	003d2a06 	br	101d0b0 <__alt_data_end+0xff01d0b0>
 101dc08:	d9c01d85 	stb	r7,118(sp)
 101dc0c:	003cde06 	br	101cf88 <__alt_data_end+0xff01cf88>
 101dc10:	d9c01d85 	stb	r7,118(sp)
 101dc14:	003cbc06 	br	101cf08 <__alt_data_end+0xff01cf08>

0101dc18 <__vfiprintf_internal>:
 101dc18:	008040f4 	movhi	r2,259
 101dc1c:	10a17104 	addi	r2,r2,-31292
 101dc20:	300f883a 	mov	r7,r6
 101dc24:	280d883a 	mov	r6,r5
 101dc28:	200b883a 	mov	r5,r4
 101dc2c:	11000017 	ldw	r4,0(r2)
 101dc30:	101c7bc1 	jmpi	101c7bc <___vfiprintf_internal_r>

0101dc34 <__sbprintf>:
 101dc34:	2880030b 	ldhu	r2,12(r5)
 101dc38:	2ac01917 	ldw	r11,100(r5)
 101dc3c:	2a80038b 	ldhu	r10,14(r5)
 101dc40:	2a400717 	ldw	r9,28(r5)
 101dc44:	2a000917 	ldw	r8,36(r5)
 101dc48:	defee204 	addi	sp,sp,-1144
 101dc4c:	00c10004 	movi	r3,1024
 101dc50:	dc011a15 	stw	r16,1128(sp)
 101dc54:	10bfff4c 	andi	r2,r2,65533
 101dc58:	2821883a 	mov	r16,r5
 101dc5c:	d8cb883a 	add	r5,sp,r3
 101dc60:	dc811c15 	stw	r18,1136(sp)
 101dc64:	dc411b15 	stw	r17,1132(sp)
 101dc68:	dfc11d15 	stw	ra,1140(sp)
 101dc6c:	2025883a 	mov	r18,r4
 101dc70:	d881030d 	sth	r2,1036(sp)
 101dc74:	dac11915 	stw	r11,1124(sp)
 101dc78:	da81038d 	sth	r10,1038(sp)
 101dc7c:	da410715 	stw	r9,1052(sp)
 101dc80:	da010915 	stw	r8,1060(sp)
 101dc84:	dec10015 	stw	sp,1024(sp)
 101dc88:	dec10415 	stw	sp,1040(sp)
 101dc8c:	d8c10215 	stw	r3,1032(sp)
 101dc90:	d8c10515 	stw	r3,1044(sp)
 101dc94:	d8010615 	stw	zero,1048(sp)
 101dc98:	101c7bc0 	call	101c7bc <___vfiprintf_internal_r>
 101dc9c:	1023883a 	mov	r17,r2
 101dca0:	10000416 	blt	r2,zero,101dcb4 <__sbprintf+0x80>
 101dca4:	d9410004 	addi	r5,sp,1024
 101dca8:	9009883a 	mov	r4,r18
 101dcac:	101e2dc0 	call	101e2dc <_fflush_r>
 101dcb0:	10000d1e 	bne	r2,zero,101dce8 <__sbprintf+0xb4>
 101dcb4:	d881030b 	ldhu	r2,1036(sp)
 101dcb8:	1080100c 	andi	r2,r2,64
 101dcbc:	10000326 	beq	r2,zero,101dccc <__sbprintf+0x98>
 101dcc0:	8080030b 	ldhu	r2,12(r16)
 101dcc4:	10801014 	ori	r2,r2,64
 101dcc8:	8080030d 	sth	r2,12(r16)
 101dccc:	8805883a 	mov	r2,r17
 101dcd0:	dfc11d17 	ldw	ra,1140(sp)
 101dcd4:	dc811c17 	ldw	r18,1136(sp)
 101dcd8:	dc411b17 	ldw	r17,1132(sp)
 101dcdc:	dc011a17 	ldw	r16,1128(sp)
 101dce0:	dec11e04 	addi	sp,sp,1144
 101dce4:	f800283a 	ret
 101dce8:	047fffc4 	movi	r17,-1
 101dcec:	003ff106 	br	101dcb4 <__alt_data_end+0xff01dcb4>

0101dcf0 <_write_r>:
 101dcf0:	defffd04 	addi	sp,sp,-12
 101dcf4:	2805883a 	mov	r2,r5
 101dcf8:	dc000015 	stw	r16,0(sp)
 101dcfc:	040040f4 	movhi	r16,259
 101dd00:	dc400115 	stw	r17,4(sp)
 101dd04:	300b883a 	mov	r5,r6
 101dd08:	84289604 	addi	r16,r16,-23976
 101dd0c:	2023883a 	mov	r17,r4
 101dd10:	380d883a 	mov	r6,r7
 101dd14:	1009883a 	mov	r4,r2
 101dd18:	dfc00215 	stw	ra,8(sp)
 101dd1c:	80000015 	stw	zero,0(r16)
 101dd20:	1022e880 	call	1022e88 <write>
 101dd24:	00ffffc4 	movi	r3,-1
 101dd28:	10c00526 	beq	r2,r3,101dd40 <_write_r+0x50>
 101dd2c:	dfc00217 	ldw	ra,8(sp)
 101dd30:	dc400117 	ldw	r17,4(sp)
 101dd34:	dc000017 	ldw	r16,0(sp)
 101dd38:	dec00304 	addi	sp,sp,12
 101dd3c:	f800283a 	ret
 101dd40:	80c00017 	ldw	r3,0(r16)
 101dd44:	183ff926 	beq	r3,zero,101dd2c <__alt_data_end+0xff01dd2c>
 101dd48:	88c00015 	stw	r3,0(r17)
 101dd4c:	003ff706 	br	101dd2c <__alt_data_end+0xff01dd2c>

0101dd50 <__swsetup_r>:
 101dd50:	008040f4 	movhi	r2,259
 101dd54:	defffd04 	addi	sp,sp,-12
 101dd58:	10a17104 	addi	r2,r2,-31292
 101dd5c:	dc400115 	stw	r17,4(sp)
 101dd60:	2023883a 	mov	r17,r4
 101dd64:	11000017 	ldw	r4,0(r2)
 101dd68:	dc000015 	stw	r16,0(sp)
 101dd6c:	dfc00215 	stw	ra,8(sp)
 101dd70:	2821883a 	mov	r16,r5
 101dd74:	20000226 	beq	r4,zero,101dd80 <__swsetup_r+0x30>
 101dd78:	20800e17 	ldw	r2,56(r4)
 101dd7c:	10003126 	beq	r2,zero,101de44 <__swsetup_r+0xf4>
 101dd80:	8080030b 	ldhu	r2,12(r16)
 101dd84:	10c0020c 	andi	r3,r2,8
 101dd88:	1009883a 	mov	r4,r2
 101dd8c:	18000f26 	beq	r3,zero,101ddcc <__swsetup_r+0x7c>
 101dd90:	80c00417 	ldw	r3,16(r16)
 101dd94:	18001526 	beq	r3,zero,101ddec <__swsetup_r+0x9c>
 101dd98:	1100004c 	andi	r4,r2,1
 101dd9c:	20001c1e 	bne	r4,zero,101de10 <__swsetup_r+0xc0>
 101dda0:	1080008c 	andi	r2,r2,2
 101dda4:	1000291e 	bne	r2,zero,101de4c <__swsetup_r+0xfc>
 101dda8:	80800517 	ldw	r2,20(r16)
 101ddac:	80800215 	stw	r2,8(r16)
 101ddb0:	18001c26 	beq	r3,zero,101de24 <__swsetup_r+0xd4>
 101ddb4:	0005883a 	mov	r2,zero
 101ddb8:	dfc00217 	ldw	ra,8(sp)
 101ddbc:	dc400117 	ldw	r17,4(sp)
 101ddc0:	dc000017 	ldw	r16,0(sp)
 101ddc4:	dec00304 	addi	sp,sp,12
 101ddc8:	f800283a 	ret
 101ddcc:	2080040c 	andi	r2,r4,16
 101ddd0:	10002e26 	beq	r2,zero,101de8c <__swsetup_r+0x13c>
 101ddd4:	2080010c 	andi	r2,r4,4
 101ddd8:	10001e1e 	bne	r2,zero,101de54 <__swsetup_r+0x104>
 101dddc:	80c00417 	ldw	r3,16(r16)
 101dde0:	20800214 	ori	r2,r4,8
 101dde4:	8080030d 	sth	r2,12(r16)
 101dde8:	183feb1e 	bne	r3,zero,101dd98 <__alt_data_end+0xff01dd98>
 101ddec:	1100a00c 	andi	r4,r2,640
 101ddf0:	01408004 	movi	r5,512
 101ddf4:	217fe826 	beq	r4,r5,101dd98 <__alt_data_end+0xff01dd98>
 101ddf8:	800b883a 	mov	r5,r16
 101ddfc:	8809883a 	mov	r4,r17
 101de00:	101ea040 	call	101ea04 <__smakebuf_r>
 101de04:	8080030b 	ldhu	r2,12(r16)
 101de08:	80c00417 	ldw	r3,16(r16)
 101de0c:	003fe206 	br	101dd98 <__alt_data_end+0xff01dd98>
 101de10:	80800517 	ldw	r2,20(r16)
 101de14:	80000215 	stw	zero,8(r16)
 101de18:	0085c83a 	sub	r2,zero,r2
 101de1c:	80800615 	stw	r2,24(r16)
 101de20:	183fe41e 	bne	r3,zero,101ddb4 <__alt_data_end+0xff01ddb4>
 101de24:	80c0030b 	ldhu	r3,12(r16)
 101de28:	0005883a 	mov	r2,zero
 101de2c:	1900200c 	andi	r4,r3,128
 101de30:	203fe126 	beq	r4,zero,101ddb8 <__alt_data_end+0xff01ddb8>
 101de34:	18c01014 	ori	r3,r3,64
 101de38:	80c0030d 	sth	r3,12(r16)
 101de3c:	00bfffc4 	movi	r2,-1
 101de40:	003fdd06 	br	101ddb8 <__alt_data_end+0xff01ddb8>
 101de44:	10186780 	call	1018678 <__sinit>
 101de48:	003fcd06 	br	101dd80 <__alt_data_end+0xff01dd80>
 101de4c:	0005883a 	mov	r2,zero
 101de50:	003fd606 	br	101ddac <__alt_data_end+0xff01ddac>
 101de54:	81400c17 	ldw	r5,48(r16)
 101de58:	28000626 	beq	r5,zero,101de74 <__swsetup_r+0x124>
 101de5c:	80801004 	addi	r2,r16,64
 101de60:	28800326 	beq	r5,r2,101de70 <__swsetup_r+0x120>
 101de64:	8809883a 	mov	r4,r17
 101de68:	101e6940 	call	101e694 <_free_r>
 101de6c:	8100030b 	ldhu	r4,12(r16)
 101de70:	80000c15 	stw	zero,48(r16)
 101de74:	80c00417 	ldw	r3,16(r16)
 101de78:	00bff6c4 	movi	r2,-37
 101de7c:	1108703a 	and	r4,r2,r4
 101de80:	80000115 	stw	zero,4(r16)
 101de84:	80c00015 	stw	r3,0(r16)
 101de88:	003fd506 	br	101dde0 <__alt_data_end+0xff01dde0>
 101de8c:	00800244 	movi	r2,9
 101de90:	88800015 	stw	r2,0(r17)
 101de94:	20801014 	ori	r2,r4,64
 101de98:	8080030d 	sth	r2,12(r16)
 101de9c:	00bfffc4 	movi	r2,-1
 101dea0:	003fc506 	br	101ddb8 <__alt_data_end+0xff01ddb8>

0101dea4 <_close_r>:
 101dea4:	defffd04 	addi	sp,sp,-12
 101dea8:	dc000015 	stw	r16,0(sp)
 101deac:	040040f4 	movhi	r16,259
 101deb0:	dc400115 	stw	r17,4(sp)
 101deb4:	84289604 	addi	r16,r16,-23976
 101deb8:	2023883a 	mov	r17,r4
 101debc:	2809883a 	mov	r4,r5
 101dec0:	dfc00215 	stw	ra,8(sp)
 101dec4:	80000015 	stw	zero,0(r16)
 101dec8:	10223180 	call	1022318 <close>
 101decc:	00ffffc4 	movi	r3,-1
 101ded0:	10c00526 	beq	r2,r3,101dee8 <_close_r+0x44>
 101ded4:	dfc00217 	ldw	ra,8(sp)
 101ded8:	dc400117 	ldw	r17,4(sp)
 101dedc:	dc000017 	ldw	r16,0(sp)
 101dee0:	dec00304 	addi	sp,sp,12
 101dee4:	f800283a 	ret
 101dee8:	80c00017 	ldw	r3,0(r16)
 101deec:	183ff926 	beq	r3,zero,101ded4 <__alt_data_end+0xff01ded4>
 101def0:	88c00015 	stw	r3,0(r17)
 101def4:	003ff706 	br	101ded4 <__alt_data_end+0xff01ded4>

0101def8 <_calloc_r>:
 101def8:	298b383a 	mul	r5,r5,r6
 101defc:	defffe04 	addi	sp,sp,-8
 101df00:	dfc00115 	stw	ra,4(sp)
 101df04:	dc000015 	stw	r16,0(sp)
 101df08:	1018de80 	call	1018de8 <_malloc_r>
 101df0c:	10002926 	beq	r2,zero,101dfb4 <_calloc_r+0xbc>
 101df10:	11bfff17 	ldw	r6,-4(r2)
 101df14:	1021883a 	mov	r16,r2
 101df18:	00bfff04 	movi	r2,-4
 101df1c:	308c703a 	and	r6,r6,r2
 101df20:	00c00904 	movi	r3,36
 101df24:	308d883a 	add	r6,r6,r2
 101df28:	19801636 	bltu	r3,r6,101df84 <_calloc_r+0x8c>
 101df2c:	008004c4 	movi	r2,19
 101df30:	11800b2e 	bgeu	r2,r6,101df60 <_calloc_r+0x68>
 101df34:	80000015 	stw	zero,0(r16)
 101df38:	80000115 	stw	zero,4(r16)
 101df3c:	008006c4 	movi	r2,27
 101df40:	11801a2e 	bgeu	r2,r6,101dfac <_calloc_r+0xb4>
 101df44:	80000215 	stw	zero,8(r16)
 101df48:	80000315 	stw	zero,12(r16)
 101df4c:	30c0151e 	bne	r6,r3,101dfa4 <_calloc_r+0xac>
 101df50:	80000415 	stw	zero,16(r16)
 101df54:	80800604 	addi	r2,r16,24
 101df58:	80000515 	stw	zero,20(r16)
 101df5c:	00000106 	br	101df64 <_calloc_r+0x6c>
 101df60:	8005883a 	mov	r2,r16
 101df64:	10000015 	stw	zero,0(r2)
 101df68:	10000115 	stw	zero,4(r2)
 101df6c:	10000215 	stw	zero,8(r2)
 101df70:	8005883a 	mov	r2,r16
 101df74:	dfc00117 	ldw	ra,4(sp)
 101df78:	dc000017 	ldw	r16,0(sp)
 101df7c:	dec00204 	addi	sp,sp,8
 101df80:	f800283a 	ret
 101df84:	000b883a 	mov	r5,zero
 101df88:	8009883a 	mov	r4,r16
 101df8c:	1013b300 	call	1013b30 <memset>
 101df90:	8005883a 	mov	r2,r16
 101df94:	dfc00117 	ldw	ra,4(sp)
 101df98:	dc000017 	ldw	r16,0(sp)
 101df9c:	dec00204 	addi	sp,sp,8
 101dfa0:	f800283a 	ret
 101dfa4:	80800404 	addi	r2,r16,16
 101dfa8:	003fee06 	br	101df64 <__alt_data_end+0xff01df64>
 101dfac:	80800204 	addi	r2,r16,8
 101dfb0:	003fec06 	br	101df64 <__alt_data_end+0xff01df64>
 101dfb4:	0005883a 	mov	r2,zero
 101dfb8:	003fee06 	br	101df74 <__alt_data_end+0xff01df74>

0101dfbc <_fclose_r>:
 101dfbc:	28003926 	beq	r5,zero,101e0a4 <_fclose_r+0xe8>
 101dfc0:	defffc04 	addi	sp,sp,-16
 101dfc4:	dc400115 	stw	r17,4(sp)
 101dfc8:	dc000015 	stw	r16,0(sp)
 101dfcc:	dfc00315 	stw	ra,12(sp)
 101dfd0:	dc800215 	stw	r18,8(sp)
 101dfd4:	2023883a 	mov	r17,r4
 101dfd8:	2821883a 	mov	r16,r5
 101dfdc:	20000226 	beq	r4,zero,101dfe8 <_fclose_r+0x2c>
 101dfe0:	20800e17 	ldw	r2,56(r4)
 101dfe4:	10002726 	beq	r2,zero,101e084 <_fclose_r+0xc8>
 101dfe8:	8080030f 	ldh	r2,12(r16)
 101dfec:	1000071e 	bne	r2,zero,101e00c <_fclose_r+0x50>
 101dff0:	0005883a 	mov	r2,zero
 101dff4:	dfc00317 	ldw	ra,12(sp)
 101dff8:	dc800217 	ldw	r18,8(sp)
 101dffc:	dc400117 	ldw	r17,4(sp)
 101e000:	dc000017 	ldw	r16,0(sp)
 101e004:	dec00404 	addi	sp,sp,16
 101e008:	f800283a 	ret
 101e00c:	800b883a 	mov	r5,r16
 101e010:	8809883a 	mov	r4,r17
 101e014:	101e0c00 	call	101e0c0 <__sflush_r>
 101e018:	1025883a 	mov	r18,r2
 101e01c:	80800b17 	ldw	r2,44(r16)
 101e020:	10000426 	beq	r2,zero,101e034 <_fclose_r+0x78>
 101e024:	81400717 	ldw	r5,28(r16)
 101e028:	8809883a 	mov	r4,r17
 101e02c:	103ee83a 	callr	r2
 101e030:	10001616 	blt	r2,zero,101e08c <_fclose_r+0xd0>
 101e034:	8080030b 	ldhu	r2,12(r16)
 101e038:	1080200c 	andi	r2,r2,128
 101e03c:	1000151e 	bne	r2,zero,101e094 <_fclose_r+0xd8>
 101e040:	81400c17 	ldw	r5,48(r16)
 101e044:	28000526 	beq	r5,zero,101e05c <_fclose_r+0xa0>
 101e048:	80801004 	addi	r2,r16,64
 101e04c:	28800226 	beq	r5,r2,101e058 <_fclose_r+0x9c>
 101e050:	8809883a 	mov	r4,r17
 101e054:	101e6940 	call	101e694 <_free_r>
 101e058:	80000c15 	stw	zero,48(r16)
 101e05c:	81401117 	ldw	r5,68(r16)
 101e060:	28000326 	beq	r5,zero,101e070 <_fclose_r+0xb4>
 101e064:	8809883a 	mov	r4,r17
 101e068:	101e6940 	call	101e694 <_free_r>
 101e06c:	80001115 	stw	zero,68(r16)
 101e070:	10186880 	call	1018688 <__sfp_lock_acquire>
 101e074:	8000030d 	sth	zero,12(r16)
 101e078:	101868c0 	call	101868c <__sfp_lock_release>
 101e07c:	9005883a 	mov	r2,r18
 101e080:	003fdc06 	br	101dff4 <__alt_data_end+0xff01dff4>
 101e084:	10186780 	call	1018678 <__sinit>
 101e088:	003fd706 	br	101dfe8 <__alt_data_end+0xff01dfe8>
 101e08c:	04bfffc4 	movi	r18,-1
 101e090:	003fe806 	br	101e034 <__alt_data_end+0xff01e034>
 101e094:	81400417 	ldw	r5,16(r16)
 101e098:	8809883a 	mov	r4,r17
 101e09c:	101e6940 	call	101e694 <_free_r>
 101e0a0:	003fe706 	br	101e040 <__alt_data_end+0xff01e040>
 101e0a4:	0005883a 	mov	r2,zero
 101e0a8:	f800283a 	ret

0101e0ac <fclose>:
 101e0ac:	008040f4 	movhi	r2,259
 101e0b0:	10a17104 	addi	r2,r2,-31292
 101e0b4:	200b883a 	mov	r5,r4
 101e0b8:	11000017 	ldw	r4,0(r2)
 101e0bc:	101dfbc1 	jmpi	101dfbc <_fclose_r>

0101e0c0 <__sflush_r>:
 101e0c0:	2880030b 	ldhu	r2,12(r5)
 101e0c4:	defffb04 	addi	sp,sp,-20
 101e0c8:	dcc00315 	stw	r19,12(sp)
 101e0cc:	dc400115 	stw	r17,4(sp)
 101e0d0:	dfc00415 	stw	ra,16(sp)
 101e0d4:	dc800215 	stw	r18,8(sp)
 101e0d8:	dc000015 	stw	r16,0(sp)
 101e0dc:	10c0020c 	andi	r3,r2,8
 101e0e0:	2823883a 	mov	r17,r5
 101e0e4:	2027883a 	mov	r19,r4
 101e0e8:	1800311e 	bne	r3,zero,101e1b0 <__sflush_r+0xf0>
 101e0ec:	28c00117 	ldw	r3,4(r5)
 101e0f0:	10820014 	ori	r2,r2,2048
 101e0f4:	2880030d 	sth	r2,12(r5)
 101e0f8:	00c04b0e 	bge	zero,r3,101e228 <__sflush_r+0x168>
 101e0fc:	8a000a17 	ldw	r8,40(r17)
 101e100:	40002326 	beq	r8,zero,101e190 <__sflush_r+0xd0>
 101e104:	9c000017 	ldw	r16,0(r19)
 101e108:	10c4000c 	andi	r3,r2,4096
 101e10c:	98000015 	stw	zero,0(r19)
 101e110:	18004826 	beq	r3,zero,101e234 <__sflush_r+0x174>
 101e114:	89801417 	ldw	r6,80(r17)
 101e118:	10c0010c 	andi	r3,r2,4
 101e11c:	18000626 	beq	r3,zero,101e138 <__sflush_r+0x78>
 101e120:	88c00117 	ldw	r3,4(r17)
 101e124:	88800c17 	ldw	r2,48(r17)
 101e128:	30cdc83a 	sub	r6,r6,r3
 101e12c:	10000226 	beq	r2,zero,101e138 <__sflush_r+0x78>
 101e130:	88800f17 	ldw	r2,60(r17)
 101e134:	308dc83a 	sub	r6,r6,r2
 101e138:	89400717 	ldw	r5,28(r17)
 101e13c:	000f883a 	mov	r7,zero
 101e140:	9809883a 	mov	r4,r19
 101e144:	403ee83a 	callr	r8
 101e148:	00ffffc4 	movi	r3,-1
 101e14c:	10c04426 	beq	r2,r3,101e260 <__sflush_r+0x1a0>
 101e150:	88c0030b 	ldhu	r3,12(r17)
 101e154:	89000417 	ldw	r4,16(r17)
 101e158:	88000115 	stw	zero,4(r17)
 101e15c:	197dffcc 	andi	r5,r3,63487
 101e160:	8940030d 	sth	r5,12(r17)
 101e164:	89000015 	stw	r4,0(r17)
 101e168:	18c4000c 	andi	r3,r3,4096
 101e16c:	18002c1e 	bne	r3,zero,101e220 <__sflush_r+0x160>
 101e170:	89400c17 	ldw	r5,48(r17)
 101e174:	9c000015 	stw	r16,0(r19)
 101e178:	28000526 	beq	r5,zero,101e190 <__sflush_r+0xd0>
 101e17c:	88801004 	addi	r2,r17,64
 101e180:	28800226 	beq	r5,r2,101e18c <__sflush_r+0xcc>
 101e184:	9809883a 	mov	r4,r19
 101e188:	101e6940 	call	101e694 <_free_r>
 101e18c:	88000c15 	stw	zero,48(r17)
 101e190:	0005883a 	mov	r2,zero
 101e194:	dfc00417 	ldw	ra,16(sp)
 101e198:	dcc00317 	ldw	r19,12(sp)
 101e19c:	dc800217 	ldw	r18,8(sp)
 101e1a0:	dc400117 	ldw	r17,4(sp)
 101e1a4:	dc000017 	ldw	r16,0(sp)
 101e1a8:	dec00504 	addi	sp,sp,20
 101e1ac:	f800283a 	ret
 101e1b0:	2c800417 	ldw	r18,16(r5)
 101e1b4:	903ff626 	beq	r18,zero,101e190 <__alt_data_end+0xff01e190>
 101e1b8:	2c000017 	ldw	r16,0(r5)
 101e1bc:	108000cc 	andi	r2,r2,3
 101e1c0:	2c800015 	stw	r18,0(r5)
 101e1c4:	84a1c83a 	sub	r16,r16,r18
 101e1c8:	1000131e 	bne	r2,zero,101e218 <__sflush_r+0x158>
 101e1cc:	28800517 	ldw	r2,20(r5)
 101e1d0:	88800215 	stw	r2,8(r17)
 101e1d4:	04000316 	blt	zero,r16,101e1e4 <__sflush_r+0x124>
 101e1d8:	003fed06 	br	101e190 <__alt_data_end+0xff01e190>
 101e1dc:	90a5883a 	add	r18,r18,r2
 101e1e0:	043feb0e 	bge	zero,r16,101e190 <__alt_data_end+0xff01e190>
 101e1e4:	88800917 	ldw	r2,36(r17)
 101e1e8:	89400717 	ldw	r5,28(r17)
 101e1ec:	800f883a 	mov	r7,r16
 101e1f0:	900d883a 	mov	r6,r18
 101e1f4:	9809883a 	mov	r4,r19
 101e1f8:	103ee83a 	callr	r2
 101e1fc:	80a1c83a 	sub	r16,r16,r2
 101e200:	00bff616 	blt	zero,r2,101e1dc <__alt_data_end+0xff01e1dc>
 101e204:	88c0030b 	ldhu	r3,12(r17)
 101e208:	00bfffc4 	movi	r2,-1
 101e20c:	18c01014 	ori	r3,r3,64
 101e210:	88c0030d 	sth	r3,12(r17)
 101e214:	003fdf06 	br	101e194 <__alt_data_end+0xff01e194>
 101e218:	0005883a 	mov	r2,zero
 101e21c:	003fec06 	br	101e1d0 <__alt_data_end+0xff01e1d0>
 101e220:	88801415 	stw	r2,80(r17)
 101e224:	003fd206 	br	101e170 <__alt_data_end+0xff01e170>
 101e228:	28c00f17 	ldw	r3,60(r5)
 101e22c:	00ffb316 	blt	zero,r3,101e0fc <__alt_data_end+0xff01e0fc>
 101e230:	003fd706 	br	101e190 <__alt_data_end+0xff01e190>
 101e234:	89400717 	ldw	r5,28(r17)
 101e238:	000d883a 	mov	r6,zero
 101e23c:	01c00044 	movi	r7,1
 101e240:	9809883a 	mov	r4,r19
 101e244:	403ee83a 	callr	r8
 101e248:	100d883a 	mov	r6,r2
 101e24c:	00bfffc4 	movi	r2,-1
 101e250:	30801426 	beq	r6,r2,101e2a4 <__sflush_r+0x1e4>
 101e254:	8880030b 	ldhu	r2,12(r17)
 101e258:	8a000a17 	ldw	r8,40(r17)
 101e25c:	003fae06 	br	101e118 <__alt_data_end+0xff01e118>
 101e260:	98c00017 	ldw	r3,0(r19)
 101e264:	183fba26 	beq	r3,zero,101e150 <__alt_data_end+0xff01e150>
 101e268:	01000744 	movi	r4,29
 101e26c:	19000626 	beq	r3,r4,101e288 <__sflush_r+0x1c8>
 101e270:	01000584 	movi	r4,22
 101e274:	19000426 	beq	r3,r4,101e288 <__sflush_r+0x1c8>
 101e278:	88c0030b 	ldhu	r3,12(r17)
 101e27c:	18c01014 	ori	r3,r3,64
 101e280:	88c0030d 	sth	r3,12(r17)
 101e284:	003fc306 	br	101e194 <__alt_data_end+0xff01e194>
 101e288:	8880030b 	ldhu	r2,12(r17)
 101e28c:	88c00417 	ldw	r3,16(r17)
 101e290:	88000115 	stw	zero,4(r17)
 101e294:	10bdffcc 	andi	r2,r2,63487
 101e298:	8880030d 	sth	r2,12(r17)
 101e29c:	88c00015 	stw	r3,0(r17)
 101e2a0:	003fb306 	br	101e170 <__alt_data_end+0xff01e170>
 101e2a4:	98800017 	ldw	r2,0(r19)
 101e2a8:	103fea26 	beq	r2,zero,101e254 <__alt_data_end+0xff01e254>
 101e2ac:	00c00744 	movi	r3,29
 101e2b0:	10c00226 	beq	r2,r3,101e2bc <__sflush_r+0x1fc>
 101e2b4:	00c00584 	movi	r3,22
 101e2b8:	10c0031e 	bne	r2,r3,101e2c8 <__sflush_r+0x208>
 101e2bc:	9c000015 	stw	r16,0(r19)
 101e2c0:	0005883a 	mov	r2,zero
 101e2c4:	003fb306 	br	101e194 <__alt_data_end+0xff01e194>
 101e2c8:	88c0030b 	ldhu	r3,12(r17)
 101e2cc:	3005883a 	mov	r2,r6
 101e2d0:	18c01014 	ori	r3,r3,64
 101e2d4:	88c0030d 	sth	r3,12(r17)
 101e2d8:	003fae06 	br	101e194 <__alt_data_end+0xff01e194>

0101e2dc <_fflush_r>:
 101e2dc:	defffd04 	addi	sp,sp,-12
 101e2e0:	dc000115 	stw	r16,4(sp)
 101e2e4:	dfc00215 	stw	ra,8(sp)
 101e2e8:	2021883a 	mov	r16,r4
 101e2ec:	20000226 	beq	r4,zero,101e2f8 <_fflush_r+0x1c>
 101e2f0:	20800e17 	ldw	r2,56(r4)
 101e2f4:	10000c26 	beq	r2,zero,101e328 <_fflush_r+0x4c>
 101e2f8:	2880030f 	ldh	r2,12(r5)
 101e2fc:	1000051e 	bne	r2,zero,101e314 <_fflush_r+0x38>
 101e300:	0005883a 	mov	r2,zero
 101e304:	dfc00217 	ldw	ra,8(sp)
 101e308:	dc000117 	ldw	r16,4(sp)
 101e30c:	dec00304 	addi	sp,sp,12
 101e310:	f800283a 	ret
 101e314:	8009883a 	mov	r4,r16
 101e318:	dfc00217 	ldw	ra,8(sp)
 101e31c:	dc000117 	ldw	r16,4(sp)
 101e320:	dec00304 	addi	sp,sp,12
 101e324:	101e0c01 	jmpi	101e0c0 <__sflush_r>
 101e328:	d9400015 	stw	r5,0(sp)
 101e32c:	10186780 	call	1018678 <__sinit>
 101e330:	d9400017 	ldw	r5,0(sp)
 101e334:	003ff006 	br	101e2f8 <__alt_data_end+0xff01e2f8>

0101e338 <fflush>:
 101e338:	20000526 	beq	r4,zero,101e350 <fflush+0x18>
 101e33c:	008040f4 	movhi	r2,259
 101e340:	10a17104 	addi	r2,r2,-31292
 101e344:	200b883a 	mov	r5,r4
 101e348:	11000017 	ldw	r4,0(r2)
 101e34c:	101e2dc1 	jmpi	101e2dc <_fflush_r>
 101e350:	008040f4 	movhi	r2,259
 101e354:	10a17004 	addi	r2,r2,-31296
 101e358:	11000017 	ldw	r4,0(r2)
 101e35c:	014040b4 	movhi	r5,258
 101e360:	2978b704 	addi	r5,r5,-7460
 101e364:	1018c481 	jmpi	1018c48 <_fwalk_reent>

0101e368 <__fputwc>:
 101e368:	defff804 	addi	sp,sp,-32
 101e36c:	dcc00415 	stw	r19,16(sp)
 101e370:	dc800315 	stw	r18,12(sp)
 101e374:	dc000115 	stw	r16,4(sp)
 101e378:	dfc00715 	stw	ra,28(sp)
 101e37c:	dd400615 	stw	r21,24(sp)
 101e380:	dd000515 	stw	r20,20(sp)
 101e384:	dc400215 	stw	r17,8(sp)
 101e388:	2027883a 	mov	r19,r4
 101e38c:	2825883a 	mov	r18,r5
 101e390:	3021883a 	mov	r16,r6
 101e394:	1018d940 	call	1018d94 <__locale_mb_cur_max>
 101e398:	00c00044 	movi	r3,1
 101e39c:	10c03e26 	beq	r2,r3,101e498 <__fputwc+0x130>
 101e3a0:	81c01704 	addi	r7,r16,92
 101e3a4:	900d883a 	mov	r6,r18
 101e3a8:	d80b883a 	mov	r5,sp
 101e3ac:	9809883a 	mov	r4,r19
 101e3b0:	101ed780 	call	101ed78 <_wcrtomb_r>
 101e3b4:	1029883a 	mov	r20,r2
 101e3b8:	00bfffc4 	movi	r2,-1
 101e3bc:	a0802026 	beq	r20,r2,101e440 <__fputwc+0xd8>
 101e3c0:	d9400003 	ldbu	r5,0(sp)
 101e3c4:	a0001c26 	beq	r20,zero,101e438 <__fputwc+0xd0>
 101e3c8:	0023883a 	mov	r17,zero
 101e3cc:	05400284 	movi	r21,10
 101e3d0:	00000906 	br	101e3f8 <__fputwc+0x90>
 101e3d4:	80800017 	ldw	r2,0(r16)
 101e3d8:	11400005 	stb	r5,0(r2)
 101e3dc:	80c00017 	ldw	r3,0(r16)
 101e3e0:	18c00044 	addi	r3,r3,1
 101e3e4:	80c00015 	stw	r3,0(r16)
 101e3e8:	8c400044 	addi	r17,r17,1
 101e3ec:	dc45883a 	add	r2,sp,r17
 101e3f0:	8d00112e 	bgeu	r17,r20,101e438 <__fputwc+0xd0>
 101e3f4:	11400003 	ldbu	r5,0(r2)
 101e3f8:	80c00217 	ldw	r3,8(r16)
 101e3fc:	18ffffc4 	addi	r3,r3,-1
 101e400:	80c00215 	stw	r3,8(r16)
 101e404:	183ff30e 	bge	r3,zero,101e3d4 <__alt_data_end+0xff01e3d4>
 101e408:	80800617 	ldw	r2,24(r16)
 101e40c:	18801916 	blt	r3,r2,101e474 <__fputwc+0x10c>
 101e410:	80800017 	ldw	r2,0(r16)
 101e414:	11400005 	stb	r5,0(r2)
 101e418:	80800017 	ldw	r2,0(r16)
 101e41c:	10c00003 	ldbu	r3,0(r2)
 101e420:	10800044 	addi	r2,r2,1
 101e424:	1d402326 	beq	r3,r21,101e4b4 <__fputwc+0x14c>
 101e428:	80800015 	stw	r2,0(r16)
 101e42c:	8c400044 	addi	r17,r17,1
 101e430:	dc45883a 	add	r2,sp,r17
 101e434:	8d3fef36 	bltu	r17,r20,101e3f4 <__alt_data_end+0xff01e3f4>
 101e438:	9005883a 	mov	r2,r18
 101e43c:	00000406 	br	101e450 <__fputwc+0xe8>
 101e440:	80c0030b 	ldhu	r3,12(r16)
 101e444:	a005883a 	mov	r2,r20
 101e448:	18c01014 	ori	r3,r3,64
 101e44c:	80c0030d 	sth	r3,12(r16)
 101e450:	dfc00717 	ldw	ra,28(sp)
 101e454:	dd400617 	ldw	r21,24(sp)
 101e458:	dd000517 	ldw	r20,20(sp)
 101e45c:	dcc00417 	ldw	r19,16(sp)
 101e460:	dc800317 	ldw	r18,12(sp)
 101e464:	dc400217 	ldw	r17,8(sp)
 101e468:	dc000117 	ldw	r16,4(sp)
 101e46c:	dec00804 	addi	sp,sp,32
 101e470:	f800283a 	ret
 101e474:	800d883a 	mov	r6,r16
 101e478:	29403fcc 	andi	r5,r5,255
 101e47c:	9809883a 	mov	r4,r19
 101e480:	101ec200 	call	101ec20 <__swbuf_r>
 101e484:	10bfffe0 	cmpeqi	r2,r2,-1
 101e488:	10803fcc 	andi	r2,r2,255
 101e48c:	103fd626 	beq	r2,zero,101e3e8 <__alt_data_end+0xff01e3e8>
 101e490:	00bfffc4 	movi	r2,-1
 101e494:	003fee06 	br	101e450 <__alt_data_end+0xff01e450>
 101e498:	90ffffc4 	addi	r3,r18,-1
 101e49c:	01003f84 	movi	r4,254
 101e4a0:	20ffbf36 	bltu	r4,r3,101e3a0 <__alt_data_end+0xff01e3a0>
 101e4a4:	900b883a 	mov	r5,r18
 101e4a8:	dc800005 	stb	r18,0(sp)
 101e4ac:	1029883a 	mov	r20,r2
 101e4b0:	003fc506 	br	101e3c8 <__alt_data_end+0xff01e3c8>
 101e4b4:	800d883a 	mov	r6,r16
 101e4b8:	a80b883a 	mov	r5,r21
 101e4bc:	9809883a 	mov	r4,r19
 101e4c0:	101ec200 	call	101ec20 <__swbuf_r>
 101e4c4:	10bfffe0 	cmpeqi	r2,r2,-1
 101e4c8:	003fef06 	br	101e488 <__alt_data_end+0xff01e488>

0101e4cc <_fputwc_r>:
 101e4cc:	3080030b 	ldhu	r2,12(r6)
 101e4d0:	10c8000c 	andi	r3,r2,8192
 101e4d4:	1800051e 	bne	r3,zero,101e4ec <_fputwc_r+0x20>
 101e4d8:	30c01917 	ldw	r3,100(r6)
 101e4dc:	10880014 	ori	r2,r2,8192
 101e4e0:	3080030d 	sth	r2,12(r6)
 101e4e4:	18880014 	ori	r2,r3,8192
 101e4e8:	30801915 	stw	r2,100(r6)
 101e4ec:	101e3681 	jmpi	101e368 <__fputwc>

0101e4f0 <fputwc>:
 101e4f0:	008040f4 	movhi	r2,259
 101e4f4:	defffc04 	addi	sp,sp,-16
 101e4f8:	10a17104 	addi	r2,r2,-31292
 101e4fc:	dc000115 	stw	r16,4(sp)
 101e500:	14000017 	ldw	r16,0(r2)
 101e504:	dc400215 	stw	r17,8(sp)
 101e508:	dfc00315 	stw	ra,12(sp)
 101e50c:	2023883a 	mov	r17,r4
 101e510:	80000226 	beq	r16,zero,101e51c <fputwc+0x2c>
 101e514:	80800e17 	ldw	r2,56(r16)
 101e518:	10001026 	beq	r2,zero,101e55c <fputwc+0x6c>
 101e51c:	2880030b 	ldhu	r2,12(r5)
 101e520:	10c8000c 	andi	r3,r2,8192
 101e524:	1800051e 	bne	r3,zero,101e53c <fputwc+0x4c>
 101e528:	28c01917 	ldw	r3,100(r5)
 101e52c:	10880014 	ori	r2,r2,8192
 101e530:	2880030d 	sth	r2,12(r5)
 101e534:	18880014 	ori	r2,r3,8192
 101e538:	28801915 	stw	r2,100(r5)
 101e53c:	280d883a 	mov	r6,r5
 101e540:	8009883a 	mov	r4,r16
 101e544:	880b883a 	mov	r5,r17
 101e548:	dfc00317 	ldw	ra,12(sp)
 101e54c:	dc400217 	ldw	r17,8(sp)
 101e550:	dc000117 	ldw	r16,4(sp)
 101e554:	dec00404 	addi	sp,sp,16
 101e558:	101e3681 	jmpi	101e368 <__fputwc>
 101e55c:	8009883a 	mov	r4,r16
 101e560:	d9400015 	stw	r5,0(sp)
 101e564:	10186780 	call	1018678 <__sinit>
 101e568:	d9400017 	ldw	r5,0(sp)
 101e56c:	003feb06 	br	101e51c <__alt_data_end+0xff01e51c>

0101e570 <_malloc_trim_r>:
 101e570:	defffb04 	addi	sp,sp,-20
 101e574:	dcc00315 	stw	r19,12(sp)
 101e578:	04c040b4 	movhi	r19,258
 101e57c:	dc800215 	stw	r18,8(sp)
 101e580:	dc400115 	stw	r17,4(sp)
 101e584:	dc000015 	stw	r16,0(sp)
 101e588:	dfc00415 	stw	ra,16(sp)
 101e58c:	2821883a 	mov	r16,r5
 101e590:	9cdbde04 	addi	r19,r19,28536
 101e594:	2025883a 	mov	r18,r4
 101e598:	1022b880 	call	1022b88 <__malloc_lock>
 101e59c:	98800217 	ldw	r2,8(r19)
 101e5a0:	14400117 	ldw	r17,4(r2)
 101e5a4:	00bfff04 	movi	r2,-4
 101e5a8:	88a2703a 	and	r17,r17,r2
 101e5ac:	8c21c83a 	sub	r16,r17,r16
 101e5b0:	8403fbc4 	addi	r16,r16,4079
 101e5b4:	8020d33a 	srli	r16,r16,12
 101e5b8:	0083ffc4 	movi	r2,4095
 101e5bc:	843fffc4 	addi	r16,r16,-1
 101e5c0:	8020933a 	slli	r16,r16,12
 101e5c4:	1400060e 	bge	r2,r16,101e5e0 <_malloc_trim_r+0x70>
 101e5c8:	000b883a 	mov	r5,zero
 101e5cc:	9009883a 	mov	r4,r18
 101e5d0:	101ae080 	call	101ae08 <_sbrk_r>
 101e5d4:	98c00217 	ldw	r3,8(r19)
 101e5d8:	1c47883a 	add	r3,r3,r17
 101e5dc:	10c00a26 	beq	r2,r3,101e608 <_malloc_trim_r+0x98>
 101e5e0:	9009883a 	mov	r4,r18
 101e5e4:	1022bac0 	call	1022bac <__malloc_unlock>
 101e5e8:	0005883a 	mov	r2,zero
 101e5ec:	dfc00417 	ldw	ra,16(sp)
 101e5f0:	dcc00317 	ldw	r19,12(sp)
 101e5f4:	dc800217 	ldw	r18,8(sp)
 101e5f8:	dc400117 	ldw	r17,4(sp)
 101e5fc:	dc000017 	ldw	r16,0(sp)
 101e600:	dec00504 	addi	sp,sp,20
 101e604:	f800283a 	ret
 101e608:	040bc83a 	sub	r5,zero,r16
 101e60c:	9009883a 	mov	r4,r18
 101e610:	101ae080 	call	101ae08 <_sbrk_r>
 101e614:	00ffffc4 	movi	r3,-1
 101e618:	10c00d26 	beq	r2,r3,101e650 <_malloc_trim_r+0xe0>
 101e61c:	00c060f4 	movhi	r3,387
 101e620:	18e97004 	addi	r3,r3,-23104
 101e624:	18800017 	ldw	r2,0(r3)
 101e628:	99000217 	ldw	r4,8(r19)
 101e62c:	8c23c83a 	sub	r17,r17,r16
 101e630:	8c400054 	ori	r17,r17,1
 101e634:	1421c83a 	sub	r16,r2,r16
 101e638:	24400115 	stw	r17,4(r4)
 101e63c:	9009883a 	mov	r4,r18
 101e640:	1c000015 	stw	r16,0(r3)
 101e644:	1022bac0 	call	1022bac <__malloc_unlock>
 101e648:	00800044 	movi	r2,1
 101e64c:	003fe706 	br	101e5ec <__alt_data_end+0xff01e5ec>
 101e650:	000b883a 	mov	r5,zero
 101e654:	9009883a 	mov	r4,r18
 101e658:	101ae080 	call	101ae08 <_sbrk_r>
 101e65c:	99000217 	ldw	r4,8(r19)
 101e660:	014003c4 	movi	r5,15
 101e664:	1107c83a 	sub	r3,r2,r4
 101e668:	28ffdd0e 	bge	r5,r3,101e5e0 <__alt_data_end+0xff01e5e0>
 101e66c:	014040f4 	movhi	r5,259
 101e670:	29617304 	addi	r5,r5,-31284
 101e674:	29400017 	ldw	r5,0(r5)
 101e678:	18c00054 	ori	r3,r3,1
 101e67c:	20c00115 	stw	r3,4(r4)
 101e680:	00c060f4 	movhi	r3,387
 101e684:	1145c83a 	sub	r2,r2,r5
 101e688:	18e97004 	addi	r3,r3,-23104
 101e68c:	18800015 	stw	r2,0(r3)
 101e690:	003fd306 	br	101e5e0 <__alt_data_end+0xff01e5e0>

0101e694 <_free_r>:
 101e694:	28004126 	beq	r5,zero,101e79c <_free_r+0x108>
 101e698:	defffd04 	addi	sp,sp,-12
 101e69c:	dc400115 	stw	r17,4(sp)
 101e6a0:	dc000015 	stw	r16,0(sp)
 101e6a4:	2023883a 	mov	r17,r4
 101e6a8:	2821883a 	mov	r16,r5
 101e6ac:	dfc00215 	stw	ra,8(sp)
 101e6b0:	1022b880 	call	1022b88 <__malloc_lock>
 101e6b4:	81ffff17 	ldw	r7,-4(r16)
 101e6b8:	00bfff84 	movi	r2,-2
 101e6bc:	010040b4 	movhi	r4,258
 101e6c0:	81bffe04 	addi	r6,r16,-8
 101e6c4:	3884703a 	and	r2,r7,r2
 101e6c8:	211bde04 	addi	r4,r4,28536
 101e6cc:	308b883a 	add	r5,r6,r2
 101e6d0:	2a400117 	ldw	r9,4(r5)
 101e6d4:	22000217 	ldw	r8,8(r4)
 101e6d8:	00ffff04 	movi	r3,-4
 101e6dc:	48c6703a 	and	r3,r9,r3
 101e6e0:	2a005726 	beq	r5,r8,101e840 <_free_r+0x1ac>
 101e6e4:	28c00115 	stw	r3,4(r5)
 101e6e8:	39c0004c 	andi	r7,r7,1
 101e6ec:	3800091e 	bne	r7,zero,101e714 <_free_r+0x80>
 101e6f0:	823ffe17 	ldw	r8,-8(r16)
 101e6f4:	22400204 	addi	r9,r4,8
 101e6f8:	320dc83a 	sub	r6,r6,r8
 101e6fc:	31c00217 	ldw	r7,8(r6)
 101e700:	1205883a 	add	r2,r2,r8
 101e704:	3a406526 	beq	r7,r9,101e89c <_free_r+0x208>
 101e708:	32000317 	ldw	r8,12(r6)
 101e70c:	3a000315 	stw	r8,12(r7)
 101e710:	41c00215 	stw	r7,8(r8)
 101e714:	28cf883a 	add	r7,r5,r3
 101e718:	39c00117 	ldw	r7,4(r7)
 101e71c:	39c0004c 	andi	r7,r7,1
 101e720:	38003a26 	beq	r7,zero,101e80c <_free_r+0x178>
 101e724:	10c00054 	ori	r3,r2,1
 101e728:	30c00115 	stw	r3,4(r6)
 101e72c:	3087883a 	add	r3,r6,r2
 101e730:	18800015 	stw	r2,0(r3)
 101e734:	00c07fc4 	movi	r3,511
 101e738:	18801936 	bltu	r3,r2,101e7a0 <_free_r+0x10c>
 101e73c:	1004d0fa 	srli	r2,r2,3
 101e740:	01c00044 	movi	r7,1
 101e744:	21400117 	ldw	r5,4(r4)
 101e748:	10c00044 	addi	r3,r2,1
 101e74c:	18c7883a 	add	r3,r3,r3
 101e750:	1005d0ba 	srai	r2,r2,2
 101e754:	18c7883a 	add	r3,r3,r3
 101e758:	18c7883a 	add	r3,r3,r3
 101e75c:	1907883a 	add	r3,r3,r4
 101e760:	3884983a 	sll	r2,r7,r2
 101e764:	19c00017 	ldw	r7,0(r3)
 101e768:	1a3ffe04 	addi	r8,r3,-8
 101e76c:	1144b03a 	or	r2,r2,r5
 101e770:	32000315 	stw	r8,12(r6)
 101e774:	31c00215 	stw	r7,8(r6)
 101e778:	20800115 	stw	r2,4(r4)
 101e77c:	19800015 	stw	r6,0(r3)
 101e780:	39800315 	stw	r6,12(r7)
 101e784:	8809883a 	mov	r4,r17
 101e788:	dfc00217 	ldw	ra,8(sp)
 101e78c:	dc400117 	ldw	r17,4(sp)
 101e790:	dc000017 	ldw	r16,0(sp)
 101e794:	dec00304 	addi	sp,sp,12
 101e798:	1022bac1 	jmpi	1022bac <__malloc_unlock>
 101e79c:	f800283a 	ret
 101e7a0:	100ad27a 	srli	r5,r2,9
 101e7a4:	00c00104 	movi	r3,4
 101e7a8:	19404a36 	bltu	r3,r5,101e8d4 <_free_r+0x240>
 101e7ac:	100ad1ba 	srli	r5,r2,6
 101e7b0:	28c00e44 	addi	r3,r5,57
 101e7b4:	18c7883a 	add	r3,r3,r3
 101e7b8:	29400e04 	addi	r5,r5,56
 101e7bc:	18c7883a 	add	r3,r3,r3
 101e7c0:	18c7883a 	add	r3,r3,r3
 101e7c4:	1909883a 	add	r4,r3,r4
 101e7c8:	20c00017 	ldw	r3,0(r4)
 101e7cc:	01c040b4 	movhi	r7,258
 101e7d0:	213ffe04 	addi	r4,r4,-8
 101e7d4:	39dbde04 	addi	r7,r7,28536
 101e7d8:	20c04426 	beq	r4,r3,101e8ec <_free_r+0x258>
 101e7dc:	01ffff04 	movi	r7,-4
 101e7e0:	19400117 	ldw	r5,4(r3)
 101e7e4:	29ca703a 	and	r5,r5,r7
 101e7e8:	1140022e 	bgeu	r2,r5,101e7f4 <_free_r+0x160>
 101e7ec:	18c00217 	ldw	r3,8(r3)
 101e7f0:	20fffb1e 	bne	r4,r3,101e7e0 <__alt_data_end+0xff01e7e0>
 101e7f4:	19000317 	ldw	r4,12(r3)
 101e7f8:	31000315 	stw	r4,12(r6)
 101e7fc:	30c00215 	stw	r3,8(r6)
 101e800:	21800215 	stw	r6,8(r4)
 101e804:	19800315 	stw	r6,12(r3)
 101e808:	003fde06 	br	101e784 <__alt_data_end+0xff01e784>
 101e80c:	29c00217 	ldw	r7,8(r5)
 101e810:	10c5883a 	add	r2,r2,r3
 101e814:	00c040b4 	movhi	r3,258
 101e818:	18dbe004 	addi	r3,r3,28544
 101e81c:	38c03b26 	beq	r7,r3,101e90c <_free_r+0x278>
 101e820:	2a000317 	ldw	r8,12(r5)
 101e824:	11400054 	ori	r5,r2,1
 101e828:	3087883a 	add	r3,r6,r2
 101e82c:	3a000315 	stw	r8,12(r7)
 101e830:	41c00215 	stw	r7,8(r8)
 101e834:	31400115 	stw	r5,4(r6)
 101e838:	18800015 	stw	r2,0(r3)
 101e83c:	003fbd06 	br	101e734 <__alt_data_end+0xff01e734>
 101e840:	39c0004c 	andi	r7,r7,1
 101e844:	10c5883a 	add	r2,r2,r3
 101e848:	3800071e 	bne	r7,zero,101e868 <_free_r+0x1d4>
 101e84c:	81fffe17 	ldw	r7,-8(r16)
 101e850:	31cdc83a 	sub	r6,r6,r7
 101e854:	30c00317 	ldw	r3,12(r6)
 101e858:	31400217 	ldw	r5,8(r6)
 101e85c:	11c5883a 	add	r2,r2,r7
 101e860:	28c00315 	stw	r3,12(r5)
 101e864:	19400215 	stw	r5,8(r3)
 101e868:	10c00054 	ori	r3,r2,1
 101e86c:	30c00115 	stw	r3,4(r6)
 101e870:	00c040f4 	movhi	r3,259
 101e874:	18e17404 	addi	r3,r3,-31280
 101e878:	18c00017 	ldw	r3,0(r3)
 101e87c:	21800215 	stw	r6,8(r4)
 101e880:	10ffc036 	bltu	r2,r3,101e784 <__alt_data_end+0xff01e784>
 101e884:	008040f4 	movhi	r2,259
 101e888:	10a89504 	addi	r2,r2,-23980
 101e88c:	11400017 	ldw	r5,0(r2)
 101e890:	8809883a 	mov	r4,r17
 101e894:	101e5700 	call	101e570 <_malloc_trim_r>
 101e898:	003fba06 	br	101e784 <__alt_data_end+0xff01e784>
 101e89c:	28c9883a 	add	r4,r5,r3
 101e8a0:	21000117 	ldw	r4,4(r4)
 101e8a4:	2100004c 	andi	r4,r4,1
 101e8a8:	2000391e 	bne	r4,zero,101e990 <_free_r+0x2fc>
 101e8ac:	29c00217 	ldw	r7,8(r5)
 101e8b0:	29000317 	ldw	r4,12(r5)
 101e8b4:	1885883a 	add	r2,r3,r2
 101e8b8:	10c00054 	ori	r3,r2,1
 101e8bc:	39000315 	stw	r4,12(r7)
 101e8c0:	21c00215 	stw	r7,8(r4)
 101e8c4:	30c00115 	stw	r3,4(r6)
 101e8c8:	308d883a 	add	r6,r6,r2
 101e8cc:	30800015 	stw	r2,0(r6)
 101e8d0:	003fac06 	br	101e784 <__alt_data_end+0xff01e784>
 101e8d4:	00c00504 	movi	r3,20
 101e8d8:	19401536 	bltu	r3,r5,101e930 <_free_r+0x29c>
 101e8dc:	28c01704 	addi	r3,r5,92
 101e8e0:	18c7883a 	add	r3,r3,r3
 101e8e4:	294016c4 	addi	r5,r5,91
 101e8e8:	003fb406 	br	101e7bc <__alt_data_end+0xff01e7bc>
 101e8ec:	280bd0ba 	srai	r5,r5,2
 101e8f0:	00c00044 	movi	r3,1
 101e8f4:	38800117 	ldw	r2,4(r7)
 101e8f8:	194a983a 	sll	r5,r3,r5
 101e8fc:	2007883a 	mov	r3,r4
 101e900:	2884b03a 	or	r2,r5,r2
 101e904:	38800115 	stw	r2,4(r7)
 101e908:	003fbb06 	br	101e7f8 <__alt_data_end+0xff01e7f8>
 101e90c:	21800515 	stw	r6,20(r4)
 101e910:	21800415 	stw	r6,16(r4)
 101e914:	10c00054 	ori	r3,r2,1
 101e918:	31c00315 	stw	r7,12(r6)
 101e91c:	31c00215 	stw	r7,8(r6)
 101e920:	30c00115 	stw	r3,4(r6)
 101e924:	308d883a 	add	r6,r6,r2
 101e928:	30800015 	stw	r2,0(r6)
 101e92c:	003f9506 	br	101e784 <__alt_data_end+0xff01e784>
 101e930:	00c01504 	movi	r3,84
 101e934:	19400536 	bltu	r3,r5,101e94c <_free_r+0x2b8>
 101e938:	100ad33a 	srli	r5,r2,12
 101e93c:	28c01bc4 	addi	r3,r5,111
 101e940:	18c7883a 	add	r3,r3,r3
 101e944:	29401b84 	addi	r5,r5,110
 101e948:	003f9c06 	br	101e7bc <__alt_data_end+0xff01e7bc>
 101e94c:	00c05504 	movi	r3,340
 101e950:	19400536 	bltu	r3,r5,101e968 <_free_r+0x2d4>
 101e954:	100ad3fa 	srli	r5,r2,15
 101e958:	28c01e04 	addi	r3,r5,120
 101e95c:	18c7883a 	add	r3,r3,r3
 101e960:	29401dc4 	addi	r5,r5,119
 101e964:	003f9506 	br	101e7bc <__alt_data_end+0xff01e7bc>
 101e968:	00c15504 	movi	r3,1364
 101e96c:	19400536 	bltu	r3,r5,101e984 <_free_r+0x2f0>
 101e970:	100ad4ba 	srli	r5,r2,18
 101e974:	28c01f44 	addi	r3,r5,125
 101e978:	18c7883a 	add	r3,r3,r3
 101e97c:	29401f04 	addi	r5,r5,124
 101e980:	003f8e06 	br	101e7bc <__alt_data_end+0xff01e7bc>
 101e984:	00c03f84 	movi	r3,254
 101e988:	01401f84 	movi	r5,126
 101e98c:	003f8b06 	br	101e7bc <__alt_data_end+0xff01e7bc>
 101e990:	10c00054 	ori	r3,r2,1
 101e994:	30c00115 	stw	r3,4(r6)
 101e998:	308d883a 	add	r6,r6,r2
 101e99c:	30800015 	stw	r2,0(r6)
 101e9a0:	003f7806 	br	101e784 <__alt_data_end+0xff01e784>

0101e9a4 <_lseek_r>:
 101e9a4:	defffd04 	addi	sp,sp,-12
 101e9a8:	2805883a 	mov	r2,r5
 101e9ac:	dc000015 	stw	r16,0(sp)
 101e9b0:	040040f4 	movhi	r16,259
 101e9b4:	dc400115 	stw	r17,4(sp)
 101e9b8:	300b883a 	mov	r5,r6
 101e9bc:	84289604 	addi	r16,r16,-23976
 101e9c0:	2023883a 	mov	r17,r4
 101e9c4:	380d883a 	mov	r6,r7
 101e9c8:	1009883a 	mov	r4,r2
 101e9cc:	dfc00215 	stw	ra,8(sp)
 101e9d0:	80000015 	stw	zero,0(r16)
 101e9d4:	1022a380 	call	1022a38 <lseek>
 101e9d8:	00ffffc4 	movi	r3,-1
 101e9dc:	10c00526 	beq	r2,r3,101e9f4 <_lseek_r+0x50>
 101e9e0:	dfc00217 	ldw	ra,8(sp)
 101e9e4:	dc400117 	ldw	r17,4(sp)
 101e9e8:	dc000017 	ldw	r16,0(sp)
 101e9ec:	dec00304 	addi	sp,sp,12
 101e9f0:	f800283a 	ret
 101e9f4:	80c00017 	ldw	r3,0(r16)
 101e9f8:	183ff926 	beq	r3,zero,101e9e0 <__alt_data_end+0xff01e9e0>
 101e9fc:	88c00015 	stw	r3,0(r17)
 101ea00:	003ff706 	br	101e9e0 <__alt_data_end+0xff01e9e0>

0101ea04 <__smakebuf_r>:
 101ea04:	2880030b 	ldhu	r2,12(r5)
 101ea08:	10c0008c 	andi	r3,r2,2
 101ea0c:	1800411e 	bne	r3,zero,101eb14 <__smakebuf_r+0x110>
 101ea10:	deffec04 	addi	sp,sp,-80
 101ea14:	dc000f15 	stw	r16,60(sp)
 101ea18:	2821883a 	mov	r16,r5
 101ea1c:	2940038f 	ldh	r5,14(r5)
 101ea20:	dc401015 	stw	r17,64(sp)
 101ea24:	dfc01315 	stw	ra,76(sp)
 101ea28:	dcc01215 	stw	r19,72(sp)
 101ea2c:	dc801115 	stw	r18,68(sp)
 101ea30:	2023883a 	mov	r17,r4
 101ea34:	28001c16 	blt	r5,zero,101eaa8 <__smakebuf_r+0xa4>
 101ea38:	d80d883a 	mov	r6,sp
 101ea3c:	101ef600 	call	101ef60 <_fstat_r>
 101ea40:	10001816 	blt	r2,zero,101eaa4 <__smakebuf_r+0xa0>
 101ea44:	d8800117 	ldw	r2,4(sp)
 101ea48:	00e00014 	movui	r3,32768
 101ea4c:	10bc000c 	andi	r2,r2,61440
 101ea50:	14c80020 	cmpeqi	r19,r2,8192
 101ea54:	10c03726 	beq	r2,r3,101eb34 <__smakebuf_r+0x130>
 101ea58:	80c0030b 	ldhu	r3,12(r16)
 101ea5c:	18c20014 	ori	r3,r3,2048
 101ea60:	80c0030d 	sth	r3,12(r16)
 101ea64:	00c80004 	movi	r3,8192
 101ea68:	10c0521e 	bne	r2,r3,101ebb4 <__smakebuf_r+0x1b0>
 101ea6c:	8140038f 	ldh	r5,14(r16)
 101ea70:	8809883a 	mov	r4,r17
 101ea74:	101efbc0 	call	101efbc <_isatty_r>
 101ea78:	10004c26 	beq	r2,zero,101ebac <__smakebuf_r+0x1a8>
 101ea7c:	8080030b 	ldhu	r2,12(r16)
 101ea80:	80c010c4 	addi	r3,r16,67
 101ea84:	80c00015 	stw	r3,0(r16)
 101ea88:	10800054 	ori	r2,r2,1
 101ea8c:	8080030d 	sth	r2,12(r16)
 101ea90:	00800044 	movi	r2,1
 101ea94:	80c00415 	stw	r3,16(r16)
 101ea98:	80800515 	stw	r2,20(r16)
 101ea9c:	04810004 	movi	r18,1024
 101eaa0:	00000706 	br	101eac0 <__smakebuf_r+0xbc>
 101eaa4:	8080030b 	ldhu	r2,12(r16)
 101eaa8:	10c0200c 	andi	r3,r2,128
 101eaac:	18001f1e 	bne	r3,zero,101eb2c <__smakebuf_r+0x128>
 101eab0:	04810004 	movi	r18,1024
 101eab4:	10820014 	ori	r2,r2,2048
 101eab8:	8080030d 	sth	r2,12(r16)
 101eabc:	0027883a 	mov	r19,zero
 101eac0:	900b883a 	mov	r5,r18
 101eac4:	8809883a 	mov	r4,r17
 101eac8:	1018de80 	call	1018de8 <_malloc_r>
 101eacc:	10002c26 	beq	r2,zero,101eb80 <__smakebuf_r+0x17c>
 101ead0:	80c0030b 	ldhu	r3,12(r16)
 101ead4:	010040b4 	movhi	r4,258
 101ead8:	2120cc04 	addi	r4,r4,-31952
 101eadc:	89000f15 	stw	r4,60(r17)
 101eae0:	18c02014 	ori	r3,r3,128
 101eae4:	80c0030d 	sth	r3,12(r16)
 101eae8:	80800015 	stw	r2,0(r16)
 101eaec:	80800415 	stw	r2,16(r16)
 101eaf0:	84800515 	stw	r18,20(r16)
 101eaf4:	98001a1e 	bne	r19,zero,101eb60 <__smakebuf_r+0x15c>
 101eaf8:	dfc01317 	ldw	ra,76(sp)
 101eafc:	dcc01217 	ldw	r19,72(sp)
 101eb00:	dc801117 	ldw	r18,68(sp)
 101eb04:	dc401017 	ldw	r17,64(sp)
 101eb08:	dc000f17 	ldw	r16,60(sp)
 101eb0c:	dec01404 	addi	sp,sp,80
 101eb10:	f800283a 	ret
 101eb14:	288010c4 	addi	r2,r5,67
 101eb18:	28800015 	stw	r2,0(r5)
 101eb1c:	28800415 	stw	r2,16(r5)
 101eb20:	00800044 	movi	r2,1
 101eb24:	28800515 	stw	r2,20(r5)
 101eb28:	f800283a 	ret
 101eb2c:	04801004 	movi	r18,64
 101eb30:	003fe006 	br	101eab4 <__alt_data_end+0xff01eab4>
 101eb34:	81000a17 	ldw	r4,40(r16)
 101eb38:	00c040b4 	movhi	r3,258
 101eb3c:	18ec8e04 	addi	r3,r3,-19912
 101eb40:	20ffc51e 	bne	r4,r3,101ea58 <__alt_data_end+0xff01ea58>
 101eb44:	8080030b 	ldhu	r2,12(r16)
 101eb48:	04810004 	movi	r18,1024
 101eb4c:	84801315 	stw	r18,76(r16)
 101eb50:	1484b03a 	or	r2,r2,r18
 101eb54:	8080030d 	sth	r2,12(r16)
 101eb58:	0027883a 	mov	r19,zero
 101eb5c:	003fd806 	br	101eac0 <__alt_data_end+0xff01eac0>
 101eb60:	8140038f 	ldh	r5,14(r16)
 101eb64:	8809883a 	mov	r4,r17
 101eb68:	101efbc0 	call	101efbc <_isatty_r>
 101eb6c:	103fe226 	beq	r2,zero,101eaf8 <__alt_data_end+0xff01eaf8>
 101eb70:	8080030b 	ldhu	r2,12(r16)
 101eb74:	10800054 	ori	r2,r2,1
 101eb78:	8080030d 	sth	r2,12(r16)
 101eb7c:	003fde06 	br	101eaf8 <__alt_data_end+0xff01eaf8>
 101eb80:	8080030b 	ldhu	r2,12(r16)
 101eb84:	10c0800c 	andi	r3,r2,512
 101eb88:	183fdb1e 	bne	r3,zero,101eaf8 <__alt_data_end+0xff01eaf8>
 101eb8c:	10800094 	ori	r2,r2,2
 101eb90:	80c010c4 	addi	r3,r16,67
 101eb94:	8080030d 	sth	r2,12(r16)
 101eb98:	00800044 	movi	r2,1
 101eb9c:	80c00015 	stw	r3,0(r16)
 101eba0:	80c00415 	stw	r3,16(r16)
 101eba4:	80800515 	stw	r2,20(r16)
 101eba8:	003fd306 	br	101eaf8 <__alt_data_end+0xff01eaf8>
 101ebac:	04810004 	movi	r18,1024
 101ebb0:	003fc306 	br	101eac0 <__alt_data_end+0xff01eac0>
 101ebb4:	0027883a 	mov	r19,zero
 101ebb8:	04810004 	movi	r18,1024
 101ebbc:	003fc006 	br	101eac0 <__alt_data_end+0xff01eac0>

0101ebc0 <_read_r>:
 101ebc0:	defffd04 	addi	sp,sp,-12
 101ebc4:	2805883a 	mov	r2,r5
 101ebc8:	dc000015 	stw	r16,0(sp)
 101ebcc:	040040f4 	movhi	r16,259
 101ebd0:	dc400115 	stw	r17,4(sp)
 101ebd4:	300b883a 	mov	r5,r6
 101ebd8:	84289604 	addi	r16,r16,-23976
 101ebdc:	2023883a 	mov	r17,r4
 101ebe0:	380d883a 	mov	r6,r7
 101ebe4:	1009883a 	mov	r4,r2
 101ebe8:	dfc00215 	stw	ra,8(sp)
 101ebec:	80000015 	stw	zero,0(r16)
 101ebf0:	1022c0c0 	call	1022c0c <read>
 101ebf4:	00ffffc4 	movi	r3,-1
 101ebf8:	10c00526 	beq	r2,r3,101ec10 <_read_r+0x50>
 101ebfc:	dfc00217 	ldw	ra,8(sp)
 101ec00:	dc400117 	ldw	r17,4(sp)
 101ec04:	dc000017 	ldw	r16,0(sp)
 101ec08:	dec00304 	addi	sp,sp,12
 101ec0c:	f800283a 	ret
 101ec10:	80c00017 	ldw	r3,0(r16)
 101ec14:	183ff926 	beq	r3,zero,101ebfc <__alt_data_end+0xff01ebfc>
 101ec18:	88c00015 	stw	r3,0(r17)
 101ec1c:	003ff706 	br	101ebfc <__alt_data_end+0xff01ebfc>

0101ec20 <__swbuf_r>:
 101ec20:	defffb04 	addi	sp,sp,-20
 101ec24:	dcc00315 	stw	r19,12(sp)
 101ec28:	dc800215 	stw	r18,8(sp)
 101ec2c:	dc000015 	stw	r16,0(sp)
 101ec30:	dfc00415 	stw	ra,16(sp)
 101ec34:	dc400115 	stw	r17,4(sp)
 101ec38:	2025883a 	mov	r18,r4
 101ec3c:	2827883a 	mov	r19,r5
 101ec40:	3021883a 	mov	r16,r6
 101ec44:	20000226 	beq	r4,zero,101ec50 <__swbuf_r+0x30>
 101ec48:	20800e17 	ldw	r2,56(r4)
 101ec4c:	10004226 	beq	r2,zero,101ed58 <__swbuf_r+0x138>
 101ec50:	80800617 	ldw	r2,24(r16)
 101ec54:	8100030b 	ldhu	r4,12(r16)
 101ec58:	80800215 	stw	r2,8(r16)
 101ec5c:	2080020c 	andi	r2,r4,8
 101ec60:	10003626 	beq	r2,zero,101ed3c <__swbuf_r+0x11c>
 101ec64:	80c00417 	ldw	r3,16(r16)
 101ec68:	18003426 	beq	r3,zero,101ed3c <__swbuf_r+0x11c>
 101ec6c:	2088000c 	andi	r2,r4,8192
 101ec70:	9c403fcc 	andi	r17,r19,255
 101ec74:	10001a26 	beq	r2,zero,101ece0 <__swbuf_r+0xc0>
 101ec78:	80800017 	ldw	r2,0(r16)
 101ec7c:	81000517 	ldw	r4,20(r16)
 101ec80:	10c7c83a 	sub	r3,r2,r3
 101ec84:	1900200e 	bge	r3,r4,101ed08 <__swbuf_r+0xe8>
 101ec88:	18c00044 	addi	r3,r3,1
 101ec8c:	81000217 	ldw	r4,8(r16)
 101ec90:	11400044 	addi	r5,r2,1
 101ec94:	81400015 	stw	r5,0(r16)
 101ec98:	213fffc4 	addi	r4,r4,-1
 101ec9c:	81000215 	stw	r4,8(r16)
 101eca0:	14c00005 	stb	r19,0(r2)
 101eca4:	80800517 	ldw	r2,20(r16)
 101eca8:	10c01e26 	beq	r2,r3,101ed24 <__swbuf_r+0x104>
 101ecac:	8080030b 	ldhu	r2,12(r16)
 101ecb0:	1080004c 	andi	r2,r2,1
 101ecb4:	10000226 	beq	r2,zero,101ecc0 <__swbuf_r+0xa0>
 101ecb8:	00800284 	movi	r2,10
 101ecbc:	88801926 	beq	r17,r2,101ed24 <__swbuf_r+0x104>
 101ecc0:	8805883a 	mov	r2,r17
 101ecc4:	dfc00417 	ldw	ra,16(sp)
 101ecc8:	dcc00317 	ldw	r19,12(sp)
 101eccc:	dc800217 	ldw	r18,8(sp)
 101ecd0:	dc400117 	ldw	r17,4(sp)
 101ecd4:	dc000017 	ldw	r16,0(sp)
 101ecd8:	dec00504 	addi	sp,sp,20
 101ecdc:	f800283a 	ret
 101ece0:	81401917 	ldw	r5,100(r16)
 101ece4:	00b7ffc4 	movi	r2,-8193
 101ece8:	21080014 	ori	r4,r4,8192
 101ecec:	2884703a 	and	r2,r5,r2
 101ecf0:	80801915 	stw	r2,100(r16)
 101ecf4:	80800017 	ldw	r2,0(r16)
 101ecf8:	8100030d 	sth	r4,12(r16)
 101ecfc:	81000517 	ldw	r4,20(r16)
 101ed00:	10c7c83a 	sub	r3,r2,r3
 101ed04:	193fe016 	blt	r3,r4,101ec88 <__alt_data_end+0xff01ec88>
 101ed08:	800b883a 	mov	r5,r16
 101ed0c:	9009883a 	mov	r4,r18
 101ed10:	101e2dc0 	call	101e2dc <_fflush_r>
 101ed14:	1000071e 	bne	r2,zero,101ed34 <__swbuf_r+0x114>
 101ed18:	80800017 	ldw	r2,0(r16)
 101ed1c:	00c00044 	movi	r3,1
 101ed20:	003fda06 	br	101ec8c <__alt_data_end+0xff01ec8c>
 101ed24:	800b883a 	mov	r5,r16
 101ed28:	9009883a 	mov	r4,r18
 101ed2c:	101e2dc0 	call	101e2dc <_fflush_r>
 101ed30:	103fe326 	beq	r2,zero,101ecc0 <__alt_data_end+0xff01ecc0>
 101ed34:	00bfffc4 	movi	r2,-1
 101ed38:	003fe206 	br	101ecc4 <__alt_data_end+0xff01ecc4>
 101ed3c:	800b883a 	mov	r5,r16
 101ed40:	9009883a 	mov	r4,r18
 101ed44:	101dd500 	call	101dd50 <__swsetup_r>
 101ed48:	103ffa1e 	bne	r2,zero,101ed34 <__alt_data_end+0xff01ed34>
 101ed4c:	8100030b 	ldhu	r4,12(r16)
 101ed50:	80c00417 	ldw	r3,16(r16)
 101ed54:	003fc506 	br	101ec6c <__alt_data_end+0xff01ec6c>
 101ed58:	10186780 	call	1018678 <__sinit>
 101ed5c:	003fbc06 	br	101ec50 <__alt_data_end+0xff01ec50>

0101ed60 <__swbuf>:
 101ed60:	008040f4 	movhi	r2,259
 101ed64:	10a17104 	addi	r2,r2,-31292
 101ed68:	280d883a 	mov	r6,r5
 101ed6c:	200b883a 	mov	r5,r4
 101ed70:	11000017 	ldw	r4,0(r2)
 101ed74:	101ec201 	jmpi	101ec20 <__swbuf_r>

0101ed78 <_wcrtomb_r>:
 101ed78:	defff604 	addi	sp,sp,-40
 101ed7c:	008040f4 	movhi	r2,259
 101ed80:	dc800815 	stw	r18,32(sp)
 101ed84:	dc400715 	stw	r17,28(sp)
 101ed88:	dc000615 	stw	r16,24(sp)
 101ed8c:	10a17504 	addi	r2,r2,-31276
 101ed90:	dfc00915 	stw	ra,36(sp)
 101ed94:	2021883a 	mov	r16,r4
 101ed98:	3823883a 	mov	r17,r7
 101ed9c:	14800017 	ldw	r18,0(r2)
 101eda0:	28001426 	beq	r5,zero,101edf4 <_wcrtomb_r+0x7c>
 101eda4:	d9400415 	stw	r5,16(sp)
 101eda8:	d9800515 	stw	r6,20(sp)
 101edac:	1018d880 	call	1018d88 <__locale_charset>
 101edb0:	d9800517 	ldw	r6,20(sp)
 101edb4:	d9400417 	ldw	r5,16(sp)
 101edb8:	100f883a 	mov	r7,r2
 101edbc:	dc400015 	stw	r17,0(sp)
 101edc0:	8009883a 	mov	r4,r16
 101edc4:	903ee83a 	callr	r18
 101edc8:	00ffffc4 	movi	r3,-1
 101edcc:	10c0031e 	bne	r2,r3,101eddc <_wcrtomb_r+0x64>
 101edd0:	88000015 	stw	zero,0(r17)
 101edd4:	00c02284 	movi	r3,138
 101edd8:	80c00015 	stw	r3,0(r16)
 101eddc:	dfc00917 	ldw	ra,36(sp)
 101ede0:	dc800817 	ldw	r18,32(sp)
 101ede4:	dc400717 	ldw	r17,28(sp)
 101ede8:	dc000617 	ldw	r16,24(sp)
 101edec:	dec00a04 	addi	sp,sp,40
 101edf0:	f800283a 	ret
 101edf4:	1018d880 	call	1018d88 <__locale_charset>
 101edf8:	100f883a 	mov	r7,r2
 101edfc:	dc400015 	stw	r17,0(sp)
 101ee00:	000d883a 	mov	r6,zero
 101ee04:	d9400104 	addi	r5,sp,4
 101ee08:	8009883a 	mov	r4,r16
 101ee0c:	903ee83a 	callr	r18
 101ee10:	003fed06 	br	101edc8 <__alt_data_end+0xff01edc8>

0101ee14 <wcrtomb>:
 101ee14:	defff604 	addi	sp,sp,-40
 101ee18:	008040f4 	movhi	r2,259
 101ee1c:	dc800615 	stw	r18,24(sp)
 101ee20:	dc400515 	stw	r17,20(sp)
 101ee24:	10a17104 	addi	r2,r2,-31292
 101ee28:	dfc00915 	stw	ra,36(sp)
 101ee2c:	dd000815 	stw	r20,32(sp)
 101ee30:	dcc00715 	stw	r19,28(sp)
 101ee34:	dc000415 	stw	r16,16(sp)
 101ee38:	3025883a 	mov	r18,r6
 101ee3c:	14400017 	ldw	r17,0(r2)
 101ee40:	20001926 	beq	r4,zero,101eea8 <wcrtomb+0x94>
 101ee44:	008040f4 	movhi	r2,259
 101ee48:	10a17504 	addi	r2,r2,-31276
 101ee4c:	15000017 	ldw	r20,0(r2)
 101ee50:	2021883a 	mov	r16,r4
 101ee54:	2827883a 	mov	r19,r5
 101ee58:	1018d880 	call	1018d88 <__locale_charset>
 101ee5c:	100f883a 	mov	r7,r2
 101ee60:	dc800015 	stw	r18,0(sp)
 101ee64:	980d883a 	mov	r6,r19
 101ee68:	800b883a 	mov	r5,r16
 101ee6c:	8809883a 	mov	r4,r17
 101ee70:	a03ee83a 	callr	r20
 101ee74:	00ffffc4 	movi	r3,-1
 101ee78:	10c0031e 	bne	r2,r3,101ee88 <wcrtomb+0x74>
 101ee7c:	90000015 	stw	zero,0(r18)
 101ee80:	00c02284 	movi	r3,138
 101ee84:	88c00015 	stw	r3,0(r17)
 101ee88:	dfc00917 	ldw	ra,36(sp)
 101ee8c:	dd000817 	ldw	r20,32(sp)
 101ee90:	dcc00717 	ldw	r19,28(sp)
 101ee94:	dc800617 	ldw	r18,24(sp)
 101ee98:	dc400517 	ldw	r17,20(sp)
 101ee9c:	dc000417 	ldw	r16,16(sp)
 101eea0:	dec00a04 	addi	sp,sp,40
 101eea4:	f800283a 	ret
 101eea8:	008040f4 	movhi	r2,259
 101eeac:	10a17504 	addi	r2,r2,-31276
 101eeb0:	14000017 	ldw	r16,0(r2)
 101eeb4:	1018d880 	call	1018d88 <__locale_charset>
 101eeb8:	100f883a 	mov	r7,r2
 101eebc:	dc800015 	stw	r18,0(sp)
 101eec0:	000d883a 	mov	r6,zero
 101eec4:	d9400104 	addi	r5,sp,4
 101eec8:	8809883a 	mov	r4,r17
 101eecc:	803ee83a 	callr	r16
 101eed0:	003fe806 	br	101ee74 <__alt_data_end+0xff01ee74>

0101eed4 <__ascii_wctomb>:
 101eed4:	28000526 	beq	r5,zero,101eeec <__ascii_wctomb+0x18>
 101eed8:	00803fc4 	movi	r2,255
 101eedc:	11800536 	bltu	r2,r6,101eef4 <__ascii_wctomb+0x20>
 101eee0:	29800005 	stb	r6,0(r5)
 101eee4:	00800044 	movi	r2,1
 101eee8:	f800283a 	ret
 101eeec:	0005883a 	mov	r2,zero
 101eef0:	f800283a 	ret
 101eef4:	00802284 	movi	r2,138
 101eef8:	20800015 	stw	r2,0(r4)
 101eefc:	00bfffc4 	movi	r2,-1
 101ef00:	f800283a 	ret

0101ef04 <_wctomb_r>:
 101ef04:	008040f4 	movhi	r2,259
 101ef08:	defff904 	addi	sp,sp,-28
 101ef0c:	10a17504 	addi	r2,r2,-31276
 101ef10:	dfc00615 	stw	ra,24(sp)
 101ef14:	dc400515 	stw	r17,20(sp)
 101ef18:	dc000415 	stw	r16,16(sp)
 101ef1c:	3823883a 	mov	r17,r7
 101ef20:	14000017 	ldw	r16,0(r2)
 101ef24:	d9000115 	stw	r4,4(sp)
 101ef28:	d9400215 	stw	r5,8(sp)
 101ef2c:	d9800315 	stw	r6,12(sp)
 101ef30:	1018d880 	call	1018d88 <__locale_charset>
 101ef34:	d9800317 	ldw	r6,12(sp)
 101ef38:	d9400217 	ldw	r5,8(sp)
 101ef3c:	d9000117 	ldw	r4,4(sp)
 101ef40:	100f883a 	mov	r7,r2
 101ef44:	dc400015 	stw	r17,0(sp)
 101ef48:	803ee83a 	callr	r16
 101ef4c:	dfc00617 	ldw	ra,24(sp)
 101ef50:	dc400517 	ldw	r17,20(sp)
 101ef54:	dc000417 	ldw	r16,16(sp)
 101ef58:	dec00704 	addi	sp,sp,28
 101ef5c:	f800283a 	ret

0101ef60 <_fstat_r>:
 101ef60:	defffd04 	addi	sp,sp,-12
 101ef64:	2805883a 	mov	r2,r5
 101ef68:	dc000015 	stw	r16,0(sp)
 101ef6c:	040040f4 	movhi	r16,259
 101ef70:	dc400115 	stw	r17,4(sp)
 101ef74:	84289604 	addi	r16,r16,-23976
 101ef78:	2023883a 	mov	r17,r4
 101ef7c:	300b883a 	mov	r5,r6
 101ef80:	1009883a 	mov	r4,r2
 101ef84:	dfc00215 	stw	ra,8(sp)
 101ef88:	80000015 	stw	zero,0(r16)
 101ef8c:	10224840 	call	1022484 <fstat>
 101ef90:	00ffffc4 	movi	r3,-1
 101ef94:	10c00526 	beq	r2,r3,101efac <_fstat_r+0x4c>
 101ef98:	dfc00217 	ldw	ra,8(sp)
 101ef9c:	dc400117 	ldw	r17,4(sp)
 101efa0:	dc000017 	ldw	r16,0(sp)
 101efa4:	dec00304 	addi	sp,sp,12
 101efa8:	f800283a 	ret
 101efac:	80c00017 	ldw	r3,0(r16)
 101efb0:	183ff926 	beq	r3,zero,101ef98 <__alt_data_end+0xff01ef98>
 101efb4:	88c00015 	stw	r3,0(r17)
 101efb8:	003ff706 	br	101ef98 <__alt_data_end+0xff01ef98>

0101efbc <_isatty_r>:
 101efbc:	defffd04 	addi	sp,sp,-12
 101efc0:	dc000015 	stw	r16,0(sp)
 101efc4:	040040f4 	movhi	r16,259
 101efc8:	dc400115 	stw	r17,4(sp)
 101efcc:	84289604 	addi	r16,r16,-23976
 101efd0:	2023883a 	mov	r17,r4
 101efd4:	2809883a 	mov	r4,r5
 101efd8:	dfc00215 	stw	ra,8(sp)
 101efdc:	80000015 	stw	zero,0(r16)
 101efe0:	10227000 	call	1022700 <isatty>
 101efe4:	00ffffc4 	movi	r3,-1
 101efe8:	10c00526 	beq	r2,r3,101f000 <_isatty_r+0x44>
 101efec:	dfc00217 	ldw	ra,8(sp)
 101eff0:	dc400117 	ldw	r17,4(sp)
 101eff4:	dc000017 	ldw	r16,0(sp)
 101eff8:	dec00304 	addi	sp,sp,12
 101effc:	f800283a 	ret
 101f000:	80c00017 	ldw	r3,0(r16)
 101f004:	183ff926 	beq	r3,zero,101efec <__alt_data_end+0xff01efec>
 101f008:	88c00015 	stw	r3,0(r17)
 101f00c:	003ff706 	br	101efec <__alt_data_end+0xff01efec>

0101f010 <__udivdi3>:
 101f010:	defff504 	addi	sp,sp,-44
 101f014:	dcc00415 	stw	r19,16(sp)
 101f018:	dc000115 	stw	r16,4(sp)
 101f01c:	dfc00a15 	stw	ra,40(sp)
 101f020:	df000915 	stw	fp,36(sp)
 101f024:	ddc00815 	stw	r23,32(sp)
 101f028:	dd800715 	stw	r22,28(sp)
 101f02c:	dd400615 	stw	r21,24(sp)
 101f030:	dd000515 	stw	r20,20(sp)
 101f034:	dc800315 	stw	r18,12(sp)
 101f038:	dc400215 	stw	r17,8(sp)
 101f03c:	2027883a 	mov	r19,r4
 101f040:	2821883a 	mov	r16,r5
 101f044:	3800411e 	bne	r7,zero,101f14c <__udivdi3+0x13c>
 101f048:	3023883a 	mov	r17,r6
 101f04c:	2025883a 	mov	r18,r4
 101f050:	2980522e 	bgeu	r5,r6,101f19c <__udivdi3+0x18c>
 101f054:	00bfffd4 	movui	r2,65535
 101f058:	282d883a 	mov	r22,r5
 101f05c:	1180a836 	bltu	r2,r6,101f300 <__udivdi3+0x2f0>
 101f060:	00803fc4 	movi	r2,255
 101f064:	1185803a 	cmpltu	r2,r2,r6
 101f068:	100490fa 	slli	r2,r2,3
 101f06c:	3086d83a 	srl	r3,r6,r2
 101f070:	010040b4 	movhi	r4,258
 101f074:	211a3904 	addi	r4,r4,26852
 101f078:	20c7883a 	add	r3,r4,r3
 101f07c:	18c00003 	ldbu	r3,0(r3)
 101f080:	1885883a 	add	r2,r3,r2
 101f084:	00c00804 	movi	r3,32
 101f088:	1887c83a 	sub	r3,r3,r2
 101f08c:	18000526 	beq	r3,zero,101f0a4 <__udivdi3+0x94>
 101f090:	80e0983a 	sll	r16,r16,r3
 101f094:	9884d83a 	srl	r2,r19,r2
 101f098:	30e2983a 	sll	r17,r6,r3
 101f09c:	98e4983a 	sll	r18,r19,r3
 101f0a0:	142cb03a 	or	r22,r2,r16
 101f0a4:	882ad43a 	srli	r21,r17,16
 101f0a8:	b009883a 	mov	r4,r22
 101f0ac:	8d3fffcc 	andi	r20,r17,65535
 101f0b0:	a80b883a 	mov	r5,r21
 101f0b4:	101fc1c0 	call	101fc1c <__umodsi3>
 101f0b8:	b009883a 	mov	r4,r22
 101f0bc:	a80b883a 	mov	r5,r21
 101f0c0:	1027883a 	mov	r19,r2
 101f0c4:	101fbb80 	call	101fbb8 <__udivsi3>
 101f0c8:	102d883a 	mov	r22,r2
 101f0cc:	9826943a 	slli	r19,r19,16
 101f0d0:	9004d43a 	srli	r2,r18,16
 101f0d4:	a5a1383a 	mul	r16,r20,r22
 101f0d8:	14c4b03a 	or	r2,r2,r19
 101f0dc:	1400052e 	bgeu	r2,r16,101f0f4 <__udivdi3+0xe4>
 101f0e0:	1445883a 	add	r2,r2,r17
 101f0e4:	b0ffffc4 	addi	r3,r22,-1
 101f0e8:	14400136 	bltu	r2,r17,101f0f0 <__udivdi3+0xe0>
 101f0ec:	14012336 	bltu	r2,r16,101f57c <__udivdi3+0x56c>
 101f0f0:	182d883a 	mov	r22,r3
 101f0f4:	1421c83a 	sub	r16,r2,r16
 101f0f8:	a80b883a 	mov	r5,r21
 101f0fc:	8009883a 	mov	r4,r16
 101f100:	101fc1c0 	call	101fc1c <__umodsi3>
 101f104:	1027883a 	mov	r19,r2
 101f108:	a80b883a 	mov	r5,r21
 101f10c:	8009883a 	mov	r4,r16
 101f110:	101fbb80 	call	101fbb8 <__udivsi3>
 101f114:	9826943a 	slli	r19,r19,16
 101f118:	a0a9383a 	mul	r20,r20,r2
 101f11c:	94bfffcc 	andi	r18,r18,65535
 101f120:	94e4b03a 	or	r18,r18,r19
 101f124:	9500052e 	bgeu	r18,r20,101f13c <__udivdi3+0x12c>
 101f128:	8ca5883a 	add	r18,r17,r18
 101f12c:	10ffffc4 	addi	r3,r2,-1
 101f130:	9440f136 	bltu	r18,r17,101f4f8 <__udivdi3+0x4e8>
 101f134:	9500f02e 	bgeu	r18,r20,101f4f8 <__udivdi3+0x4e8>
 101f138:	10bfff84 	addi	r2,r2,-2
 101f13c:	b00c943a 	slli	r6,r22,16
 101f140:	0007883a 	mov	r3,zero
 101f144:	3084b03a 	or	r2,r6,r2
 101f148:	00005906 	br	101f2b0 <__udivdi3+0x2a0>
 101f14c:	29c05636 	bltu	r5,r7,101f2a8 <__udivdi3+0x298>
 101f150:	00bfffd4 	movui	r2,65535
 101f154:	11c0622e 	bgeu	r2,r7,101f2e0 <__udivdi3+0x2d0>
 101f158:	00804034 	movhi	r2,256
 101f15c:	10bfffc4 	addi	r2,r2,-1
 101f160:	11c0ee36 	bltu	r2,r7,101f51c <__udivdi3+0x50c>
 101f164:	00800404 	movi	r2,16
 101f168:	3886d83a 	srl	r3,r7,r2
 101f16c:	010040b4 	movhi	r4,258
 101f170:	211a3904 	addi	r4,r4,26852
 101f174:	20c7883a 	add	r3,r4,r3
 101f178:	18c00003 	ldbu	r3,0(r3)
 101f17c:	05400804 	movi	r21,32
 101f180:	1885883a 	add	r2,r3,r2
 101f184:	a8abc83a 	sub	r21,r21,r2
 101f188:	a800621e 	bne	r21,zero,101f314 <__udivdi3+0x304>
 101f18c:	3c00e936 	bltu	r7,r16,101f534 <__udivdi3+0x524>
 101f190:	9985403a 	cmpgeu	r2,r19,r6
 101f194:	0007883a 	mov	r3,zero
 101f198:	00004506 	br	101f2b0 <__udivdi3+0x2a0>
 101f19c:	3000041e 	bne	r6,zero,101f1b0 <__udivdi3+0x1a0>
 101f1a0:	000b883a 	mov	r5,zero
 101f1a4:	01000044 	movi	r4,1
 101f1a8:	101fbb80 	call	101fbb8 <__udivsi3>
 101f1ac:	1023883a 	mov	r17,r2
 101f1b0:	00bfffd4 	movui	r2,65535
 101f1b4:	14404e2e 	bgeu	r2,r17,101f2f0 <__udivdi3+0x2e0>
 101f1b8:	00804034 	movhi	r2,256
 101f1bc:	10bfffc4 	addi	r2,r2,-1
 101f1c0:	1440d836 	bltu	r2,r17,101f524 <__udivdi3+0x514>
 101f1c4:	00800404 	movi	r2,16
 101f1c8:	8886d83a 	srl	r3,r17,r2
 101f1cc:	010040b4 	movhi	r4,258
 101f1d0:	211a3904 	addi	r4,r4,26852
 101f1d4:	20c7883a 	add	r3,r4,r3
 101f1d8:	18c00003 	ldbu	r3,0(r3)
 101f1dc:	1885883a 	add	r2,r3,r2
 101f1e0:	00c00804 	movi	r3,32
 101f1e4:	1887c83a 	sub	r3,r3,r2
 101f1e8:	18008f1e 	bne	r3,zero,101f428 <__udivdi3+0x418>
 101f1ec:	882ad43a 	srli	r21,r17,16
 101f1f0:	8461c83a 	sub	r16,r16,r17
 101f1f4:	8d3fffcc 	andi	r20,r17,65535
 101f1f8:	00c00044 	movi	r3,1
 101f1fc:	8009883a 	mov	r4,r16
 101f200:	a80b883a 	mov	r5,r21
 101f204:	d8c00015 	stw	r3,0(sp)
 101f208:	101fc1c0 	call	101fc1c <__umodsi3>
 101f20c:	8009883a 	mov	r4,r16
 101f210:	a80b883a 	mov	r5,r21
 101f214:	1027883a 	mov	r19,r2
 101f218:	101fbb80 	call	101fbb8 <__udivsi3>
 101f21c:	9826943a 	slli	r19,r19,16
 101f220:	9008d43a 	srli	r4,r18,16
 101f224:	1521383a 	mul	r16,r2,r20
 101f228:	102d883a 	mov	r22,r2
 101f22c:	24c8b03a 	or	r4,r4,r19
 101f230:	d8c00017 	ldw	r3,0(sp)
 101f234:	2400052e 	bgeu	r4,r16,101f24c <__udivdi3+0x23c>
 101f238:	2449883a 	add	r4,r4,r17
 101f23c:	b0bfffc4 	addi	r2,r22,-1
 101f240:	24400136 	bltu	r4,r17,101f248 <__udivdi3+0x238>
 101f244:	2400ca36 	bltu	r4,r16,101f570 <__udivdi3+0x560>
 101f248:	102d883a 	mov	r22,r2
 101f24c:	2421c83a 	sub	r16,r4,r16
 101f250:	a80b883a 	mov	r5,r21
 101f254:	8009883a 	mov	r4,r16
 101f258:	d8c00015 	stw	r3,0(sp)
 101f25c:	101fc1c0 	call	101fc1c <__umodsi3>
 101f260:	1027883a 	mov	r19,r2
 101f264:	a80b883a 	mov	r5,r21
 101f268:	8009883a 	mov	r4,r16
 101f26c:	101fbb80 	call	101fbb8 <__udivsi3>
 101f270:	9826943a 	slli	r19,r19,16
 101f274:	1529383a 	mul	r20,r2,r20
 101f278:	94bfffcc 	andi	r18,r18,65535
 101f27c:	94e4b03a 	or	r18,r18,r19
 101f280:	d8c00017 	ldw	r3,0(sp)
 101f284:	9500052e 	bgeu	r18,r20,101f29c <__udivdi3+0x28c>
 101f288:	8ca5883a 	add	r18,r17,r18
 101f28c:	113fffc4 	addi	r4,r2,-1
 101f290:	94409736 	bltu	r18,r17,101f4f0 <__udivdi3+0x4e0>
 101f294:	9500962e 	bgeu	r18,r20,101f4f0 <__udivdi3+0x4e0>
 101f298:	10bfff84 	addi	r2,r2,-2
 101f29c:	b00c943a 	slli	r6,r22,16
 101f2a0:	3084b03a 	or	r2,r6,r2
 101f2a4:	00000206 	br	101f2b0 <__udivdi3+0x2a0>
 101f2a8:	0007883a 	mov	r3,zero
 101f2ac:	0005883a 	mov	r2,zero
 101f2b0:	dfc00a17 	ldw	ra,40(sp)
 101f2b4:	df000917 	ldw	fp,36(sp)
 101f2b8:	ddc00817 	ldw	r23,32(sp)
 101f2bc:	dd800717 	ldw	r22,28(sp)
 101f2c0:	dd400617 	ldw	r21,24(sp)
 101f2c4:	dd000517 	ldw	r20,20(sp)
 101f2c8:	dcc00417 	ldw	r19,16(sp)
 101f2cc:	dc800317 	ldw	r18,12(sp)
 101f2d0:	dc400217 	ldw	r17,8(sp)
 101f2d4:	dc000117 	ldw	r16,4(sp)
 101f2d8:	dec00b04 	addi	sp,sp,44
 101f2dc:	f800283a 	ret
 101f2e0:	00803fc4 	movi	r2,255
 101f2e4:	11c5803a 	cmpltu	r2,r2,r7
 101f2e8:	100490fa 	slli	r2,r2,3
 101f2ec:	003f9e06 	br	101f168 <__alt_data_end+0xff01f168>
 101f2f0:	00803fc4 	movi	r2,255
 101f2f4:	1445803a 	cmpltu	r2,r2,r17
 101f2f8:	100490fa 	slli	r2,r2,3
 101f2fc:	003fb206 	br	101f1c8 <__alt_data_end+0xff01f1c8>
 101f300:	00804034 	movhi	r2,256
 101f304:	10bfffc4 	addi	r2,r2,-1
 101f308:	11808836 	bltu	r2,r6,101f52c <__udivdi3+0x51c>
 101f30c:	00800404 	movi	r2,16
 101f310:	003f5606 	br	101f06c <__alt_data_end+0xff01f06c>
 101f314:	30aed83a 	srl	r23,r6,r2
 101f318:	3d4e983a 	sll	r7,r7,r21
 101f31c:	80acd83a 	srl	r22,r16,r2
 101f320:	9884d83a 	srl	r2,r19,r2
 101f324:	3deeb03a 	or	r23,r7,r23
 101f328:	b824d43a 	srli	r18,r23,16
 101f32c:	8560983a 	sll	r16,r16,r21
 101f330:	b009883a 	mov	r4,r22
 101f334:	900b883a 	mov	r5,r18
 101f338:	3568983a 	sll	r20,r6,r21
 101f33c:	1420b03a 	or	r16,r2,r16
 101f340:	101fc1c0 	call	101fc1c <__umodsi3>
 101f344:	b009883a 	mov	r4,r22
 101f348:	900b883a 	mov	r5,r18
 101f34c:	1023883a 	mov	r17,r2
 101f350:	101fbb80 	call	101fbb8 <__udivsi3>
 101f354:	8808943a 	slli	r4,r17,16
 101f358:	bf3fffcc 	andi	fp,r23,65535
 101f35c:	8006d43a 	srli	r3,r16,16
 101f360:	e0a3383a 	mul	r17,fp,r2
 101f364:	100d883a 	mov	r6,r2
 101f368:	1906b03a 	or	r3,r3,r4
 101f36c:	1c40042e 	bgeu	r3,r17,101f380 <__udivdi3+0x370>
 101f370:	1dc7883a 	add	r3,r3,r23
 101f374:	10bfffc4 	addi	r2,r2,-1
 101f378:	1dc0752e 	bgeu	r3,r23,101f550 <__udivdi3+0x540>
 101f37c:	100d883a 	mov	r6,r2
 101f380:	1c63c83a 	sub	r17,r3,r17
 101f384:	900b883a 	mov	r5,r18
 101f388:	8809883a 	mov	r4,r17
 101f38c:	d9800015 	stw	r6,0(sp)
 101f390:	101fc1c0 	call	101fc1c <__umodsi3>
 101f394:	102d883a 	mov	r22,r2
 101f398:	8809883a 	mov	r4,r17
 101f39c:	900b883a 	mov	r5,r18
 101f3a0:	101fbb80 	call	101fbb8 <__udivsi3>
 101f3a4:	b02c943a 	slli	r22,r22,16
 101f3a8:	e089383a 	mul	r4,fp,r2
 101f3ac:	843fffcc 	andi	r16,r16,65535
 101f3b0:	85a0b03a 	or	r16,r16,r22
 101f3b4:	d9800017 	ldw	r6,0(sp)
 101f3b8:	8100042e 	bgeu	r16,r4,101f3cc <__udivdi3+0x3bc>
 101f3bc:	85e1883a 	add	r16,r16,r23
 101f3c0:	10ffffc4 	addi	r3,r2,-1
 101f3c4:	85c05e2e 	bgeu	r16,r23,101f540 <__udivdi3+0x530>
 101f3c8:	1805883a 	mov	r2,r3
 101f3cc:	300c943a 	slli	r6,r6,16
 101f3d0:	a17fffcc 	andi	r5,r20,65535
 101f3d4:	a028d43a 	srli	r20,r20,16
 101f3d8:	3084b03a 	or	r2,r6,r2
 101f3dc:	10ffffcc 	andi	r3,r2,65535
 101f3e0:	100cd43a 	srli	r6,r2,16
 101f3e4:	194f383a 	mul	r7,r3,r5
 101f3e8:	1d07383a 	mul	r3,r3,r20
 101f3ec:	314b383a 	mul	r5,r6,r5
 101f3f0:	3810d43a 	srli	r8,r7,16
 101f3f4:	8121c83a 	sub	r16,r16,r4
 101f3f8:	1947883a 	add	r3,r3,r5
 101f3fc:	40c7883a 	add	r3,r8,r3
 101f400:	350d383a 	mul	r6,r6,r20
 101f404:	1940022e 	bgeu	r3,r5,101f410 <__udivdi3+0x400>
 101f408:	01000074 	movhi	r4,1
 101f40c:	310d883a 	add	r6,r6,r4
 101f410:	1828d43a 	srli	r20,r3,16
 101f414:	a18d883a 	add	r6,r20,r6
 101f418:	81803e36 	bltu	r16,r6,101f514 <__udivdi3+0x504>
 101f41c:	81803826 	beq	r16,r6,101f500 <__udivdi3+0x4f0>
 101f420:	0007883a 	mov	r3,zero
 101f424:	003fa206 	br	101f2b0 <__alt_data_end+0xff01f2b0>
 101f428:	88e2983a 	sll	r17,r17,r3
 101f42c:	80a8d83a 	srl	r20,r16,r2
 101f430:	80e0983a 	sll	r16,r16,r3
 101f434:	882ad43a 	srli	r21,r17,16
 101f438:	9884d83a 	srl	r2,r19,r2
 101f43c:	a009883a 	mov	r4,r20
 101f440:	a80b883a 	mov	r5,r21
 101f444:	142eb03a 	or	r23,r2,r16
 101f448:	98e4983a 	sll	r18,r19,r3
 101f44c:	101fc1c0 	call	101fc1c <__umodsi3>
 101f450:	a009883a 	mov	r4,r20
 101f454:	a80b883a 	mov	r5,r21
 101f458:	1021883a 	mov	r16,r2
 101f45c:	101fbb80 	call	101fbb8 <__udivsi3>
 101f460:	1039883a 	mov	fp,r2
 101f464:	8d3fffcc 	andi	r20,r17,65535
 101f468:	8020943a 	slli	r16,r16,16
 101f46c:	b804d43a 	srli	r2,r23,16
 101f470:	a72d383a 	mul	r22,r20,fp
 101f474:	1404b03a 	or	r2,r2,r16
 101f478:	1580062e 	bgeu	r2,r22,101f494 <__udivdi3+0x484>
 101f47c:	1445883a 	add	r2,r2,r17
 101f480:	e0ffffc4 	addi	r3,fp,-1
 101f484:	14403836 	bltu	r2,r17,101f568 <__udivdi3+0x558>
 101f488:	1580372e 	bgeu	r2,r22,101f568 <__udivdi3+0x558>
 101f48c:	e73fff84 	addi	fp,fp,-2
 101f490:	1445883a 	add	r2,r2,r17
 101f494:	15adc83a 	sub	r22,r2,r22
 101f498:	a80b883a 	mov	r5,r21
 101f49c:	b009883a 	mov	r4,r22
 101f4a0:	101fc1c0 	call	101fc1c <__umodsi3>
 101f4a4:	1027883a 	mov	r19,r2
 101f4a8:	b009883a 	mov	r4,r22
 101f4ac:	a80b883a 	mov	r5,r21
 101f4b0:	101fbb80 	call	101fbb8 <__udivsi3>
 101f4b4:	9826943a 	slli	r19,r19,16
 101f4b8:	a0a1383a 	mul	r16,r20,r2
 101f4bc:	b93fffcc 	andi	r4,r23,65535
 101f4c0:	24c8b03a 	or	r4,r4,r19
 101f4c4:	2400062e 	bgeu	r4,r16,101f4e0 <__udivdi3+0x4d0>
 101f4c8:	2449883a 	add	r4,r4,r17
 101f4cc:	10ffffc4 	addi	r3,r2,-1
 101f4d0:	24402336 	bltu	r4,r17,101f560 <__udivdi3+0x550>
 101f4d4:	2400222e 	bgeu	r4,r16,101f560 <__udivdi3+0x550>
 101f4d8:	10bfff84 	addi	r2,r2,-2
 101f4dc:	2449883a 	add	r4,r4,r17
 101f4e0:	e038943a 	slli	fp,fp,16
 101f4e4:	2421c83a 	sub	r16,r4,r16
 101f4e8:	e086b03a 	or	r3,fp,r2
 101f4ec:	003f4306 	br	101f1fc <__alt_data_end+0xff01f1fc>
 101f4f0:	2005883a 	mov	r2,r4
 101f4f4:	003f6906 	br	101f29c <__alt_data_end+0xff01f29c>
 101f4f8:	1805883a 	mov	r2,r3
 101f4fc:	003f0f06 	br	101f13c <__alt_data_end+0xff01f13c>
 101f500:	1806943a 	slli	r3,r3,16
 101f504:	9d66983a 	sll	r19,r19,r21
 101f508:	39ffffcc 	andi	r7,r7,65535
 101f50c:	19c7883a 	add	r3,r3,r7
 101f510:	98ffc32e 	bgeu	r19,r3,101f420 <__alt_data_end+0xff01f420>
 101f514:	10bfffc4 	addi	r2,r2,-1
 101f518:	003fc106 	br	101f420 <__alt_data_end+0xff01f420>
 101f51c:	00800604 	movi	r2,24
 101f520:	003f1106 	br	101f168 <__alt_data_end+0xff01f168>
 101f524:	00800604 	movi	r2,24
 101f528:	003f2706 	br	101f1c8 <__alt_data_end+0xff01f1c8>
 101f52c:	00800604 	movi	r2,24
 101f530:	003ece06 	br	101f06c <__alt_data_end+0xff01f06c>
 101f534:	0007883a 	mov	r3,zero
 101f538:	00800044 	movi	r2,1
 101f53c:	003f5c06 	br	101f2b0 <__alt_data_end+0xff01f2b0>
 101f540:	813fa12e 	bgeu	r16,r4,101f3c8 <__alt_data_end+0xff01f3c8>
 101f544:	10bfff84 	addi	r2,r2,-2
 101f548:	85e1883a 	add	r16,r16,r23
 101f54c:	003f9f06 	br	101f3cc <__alt_data_end+0xff01f3cc>
 101f550:	1c7f8a2e 	bgeu	r3,r17,101f37c <__alt_data_end+0xff01f37c>
 101f554:	31bfff84 	addi	r6,r6,-2
 101f558:	1dc7883a 	add	r3,r3,r23
 101f55c:	003f8806 	br	101f380 <__alt_data_end+0xff01f380>
 101f560:	1805883a 	mov	r2,r3
 101f564:	003fde06 	br	101f4e0 <__alt_data_end+0xff01f4e0>
 101f568:	1839883a 	mov	fp,r3
 101f56c:	003fc906 	br	101f494 <__alt_data_end+0xff01f494>
 101f570:	b5bfff84 	addi	r22,r22,-2
 101f574:	2449883a 	add	r4,r4,r17
 101f578:	003f3406 	br	101f24c <__alt_data_end+0xff01f24c>
 101f57c:	b5bfff84 	addi	r22,r22,-2
 101f580:	1445883a 	add	r2,r2,r17
 101f584:	003edb06 	br	101f0f4 <__alt_data_end+0xff01f0f4>

0101f588 <__umoddi3>:
 101f588:	defff404 	addi	sp,sp,-48
 101f58c:	df000a15 	stw	fp,40(sp)
 101f590:	dc400315 	stw	r17,12(sp)
 101f594:	dc000215 	stw	r16,8(sp)
 101f598:	dfc00b15 	stw	ra,44(sp)
 101f59c:	ddc00915 	stw	r23,36(sp)
 101f5a0:	dd800815 	stw	r22,32(sp)
 101f5a4:	dd400715 	stw	r21,28(sp)
 101f5a8:	dd000615 	stw	r20,24(sp)
 101f5ac:	dcc00515 	stw	r19,20(sp)
 101f5b0:	dc800415 	stw	r18,16(sp)
 101f5b4:	2021883a 	mov	r16,r4
 101f5b8:	2823883a 	mov	r17,r5
 101f5bc:	2839883a 	mov	fp,r5
 101f5c0:	38003c1e 	bne	r7,zero,101f6b4 <__umoddi3+0x12c>
 101f5c4:	3027883a 	mov	r19,r6
 101f5c8:	2029883a 	mov	r20,r4
 101f5cc:	2980512e 	bgeu	r5,r6,101f714 <__umoddi3+0x18c>
 101f5d0:	00bfffd4 	movui	r2,65535
 101f5d4:	11809a36 	bltu	r2,r6,101f840 <__umoddi3+0x2b8>
 101f5d8:	01003fc4 	movi	r4,255
 101f5dc:	2189803a 	cmpltu	r4,r4,r6
 101f5e0:	200890fa 	slli	r4,r4,3
 101f5e4:	3104d83a 	srl	r2,r6,r4
 101f5e8:	00c040b4 	movhi	r3,258
 101f5ec:	18da3904 	addi	r3,r3,26852
 101f5f0:	1885883a 	add	r2,r3,r2
 101f5f4:	10c00003 	ldbu	r3,0(r2)
 101f5f8:	00800804 	movi	r2,32
 101f5fc:	1909883a 	add	r4,r3,r4
 101f600:	1125c83a 	sub	r18,r2,r4
 101f604:	90000526 	beq	r18,zero,101f61c <__umoddi3+0x94>
 101f608:	8ca2983a 	sll	r17,r17,r18
 101f60c:	8108d83a 	srl	r4,r16,r4
 101f610:	34a6983a 	sll	r19,r6,r18
 101f614:	84a8983a 	sll	r20,r16,r18
 101f618:	2478b03a 	or	fp,r4,r17
 101f61c:	982ed43a 	srli	r23,r19,16
 101f620:	e009883a 	mov	r4,fp
 101f624:	9dbfffcc 	andi	r22,r19,65535
 101f628:	b80b883a 	mov	r5,r23
 101f62c:	101fc1c0 	call	101fc1c <__umodsi3>
 101f630:	e009883a 	mov	r4,fp
 101f634:	b80b883a 	mov	r5,r23
 101f638:	102b883a 	mov	r21,r2
 101f63c:	101fbb80 	call	101fbb8 <__udivsi3>
 101f640:	a806943a 	slli	r3,r21,16
 101f644:	a008d43a 	srli	r4,r20,16
 101f648:	b085383a 	mul	r2,r22,r2
 101f64c:	20c8b03a 	or	r4,r4,r3
 101f650:	2080032e 	bgeu	r4,r2,101f660 <__umoddi3+0xd8>
 101f654:	24c9883a 	add	r4,r4,r19
 101f658:	24c00136 	bltu	r4,r19,101f660 <__umoddi3+0xd8>
 101f65c:	20811036 	bltu	r4,r2,101faa0 <__umoddi3+0x518>
 101f660:	20abc83a 	sub	r21,r4,r2
 101f664:	b80b883a 	mov	r5,r23
 101f668:	a809883a 	mov	r4,r21
 101f66c:	101fc1c0 	call	101fc1c <__umodsi3>
 101f670:	1023883a 	mov	r17,r2
 101f674:	b80b883a 	mov	r5,r23
 101f678:	a809883a 	mov	r4,r21
 101f67c:	101fbb80 	call	101fbb8 <__udivsi3>
 101f680:	8822943a 	slli	r17,r17,16
 101f684:	b085383a 	mul	r2,r22,r2
 101f688:	a0ffffcc 	andi	r3,r20,65535
 101f68c:	1c46b03a 	or	r3,r3,r17
 101f690:	1880042e 	bgeu	r3,r2,101f6a4 <__umoddi3+0x11c>
 101f694:	1cc7883a 	add	r3,r3,r19
 101f698:	1cc00236 	bltu	r3,r19,101f6a4 <__umoddi3+0x11c>
 101f69c:	1880012e 	bgeu	r3,r2,101f6a4 <__umoddi3+0x11c>
 101f6a0:	1cc7883a 	add	r3,r3,r19
 101f6a4:	1885c83a 	sub	r2,r3,r2
 101f6a8:	1484d83a 	srl	r2,r2,r18
 101f6ac:	0007883a 	mov	r3,zero
 101f6b0:	00004f06 	br	101f7f0 <__umoddi3+0x268>
 101f6b4:	29c04c36 	bltu	r5,r7,101f7e8 <__umoddi3+0x260>
 101f6b8:	00bfffd4 	movui	r2,65535
 101f6bc:	11c0582e 	bgeu	r2,r7,101f820 <__umoddi3+0x298>
 101f6c0:	00804034 	movhi	r2,256
 101f6c4:	10bfffc4 	addi	r2,r2,-1
 101f6c8:	11c0e736 	bltu	r2,r7,101fa68 <__umoddi3+0x4e0>
 101f6cc:	01000404 	movi	r4,16
 101f6d0:	3904d83a 	srl	r2,r7,r4
 101f6d4:	00c040b4 	movhi	r3,258
 101f6d8:	18da3904 	addi	r3,r3,26852
 101f6dc:	1885883a 	add	r2,r3,r2
 101f6e0:	14c00003 	ldbu	r19,0(r2)
 101f6e4:	00c00804 	movi	r3,32
 101f6e8:	9927883a 	add	r19,r19,r4
 101f6ec:	1ce9c83a 	sub	r20,r3,r19
 101f6f0:	a000581e 	bne	r20,zero,101f854 <__umoddi3+0x2cc>
 101f6f4:	3c400136 	bltu	r7,r17,101f6fc <__umoddi3+0x174>
 101f6f8:	8180eb36 	bltu	r16,r6,101faa8 <__umoddi3+0x520>
 101f6fc:	8185c83a 	sub	r2,r16,r6
 101f700:	89e3c83a 	sub	r17,r17,r7
 101f704:	8089803a 	cmpltu	r4,r16,r2
 101f708:	8939c83a 	sub	fp,r17,r4
 101f70c:	e007883a 	mov	r3,fp
 101f710:	00003706 	br	101f7f0 <__umoddi3+0x268>
 101f714:	3000041e 	bne	r6,zero,101f728 <__umoddi3+0x1a0>
 101f718:	000b883a 	mov	r5,zero
 101f71c:	01000044 	movi	r4,1
 101f720:	101fbb80 	call	101fbb8 <__udivsi3>
 101f724:	1027883a 	mov	r19,r2
 101f728:	00bfffd4 	movui	r2,65535
 101f72c:	14c0402e 	bgeu	r2,r19,101f830 <__umoddi3+0x2a8>
 101f730:	00804034 	movhi	r2,256
 101f734:	10bfffc4 	addi	r2,r2,-1
 101f738:	14c0cd36 	bltu	r2,r19,101fa70 <__umoddi3+0x4e8>
 101f73c:	00800404 	movi	r2,16
 101f740:	9886d83a 	srl	r3,r19,r2
 101f744:	010040b4 	movhi	r4,258
 101f748:	211a3904 	addi	r4,r4,26852
 101f74c:	20c7883a 	add	r3,r4,r3
 101f750:	18c00003 	ldbu	r3,0(r3)
 101f754:	1887883a 	add	r3,r3,r2
 101f758:	00800804 	movi	r2,32
 101f75c:	10e5c83a 	sub	r18,r2,r3
 101f760:	9000901e 	bne	r18,zero,101f9a4 <__umoddi3+0x41c>
 101f764:	982cd43a 	srli	r22,r19,16
 101f768:	8ce3c83a 	sub	r17,r17,r19
 101f76c:	9d7fffcc 	andi	r21,r19,65535
 101f770:	b00b883a 	mov	r5,r22
 101f774:	8809883a 	mov	r4,r17
 101f778:	101fc1c0 	call	101fc1c <__umodsi3>
 101f77c:	8809883a 	mov	r4,r17
 101f780:	b00b883a 	mov	r5,r22
 101f784:	1021883a 	mov	r16,r2
 101f788:	101fbb80 	call	101fbb8 <__udivsi3>
 101f78c:	8006943a 	slli	r3,r16,16
 101f790:	a008d43a 	srli	r4,r20,16
 101f794:	1545383a 	mul	r2,r2,r21
 101f798:	20c8b03a 	or	r4,r4,r3
 101f79c:	2080042e 	bgeu	r4,r2,101f7b0 <__umoddi3+0x228>
 101f7a0:	24c9883a 	add	r4,r4,r19
 101f7a4:	24c00236 	bltu	r4,r19,101f7b0 <__umoddi3+0x228>
 101f7a8:	2080012e 	bgeu	r4,r2,101f7b0 <__umoddi3+0x228>
 101f7ac:	24c9883a 	add	r4,r4,r19
 101f7b0:	20a1c83a 	sub	r16,r4,r2
 101f7b4:	b00b883a 	mov	r5,r22
 101f7b8:	8009883a 	mov	r4,r16
 101f7bc:	101fc1c0 	call	101fc1c <__umodsi3>
 101f7c0:	1023883a 	mov	r17,r2
 101f7c4:	b00b883a 	mov	r5,r22
 101f7c8:	8009883a 	mov	r4,r16
 101f7cc:	101fbb80 	call	101fbb8 <__udivsi3>
 101f7d0:	8822943a 	slli	r17,r17,16
 101f7d4:	1545383a 	mul	r2,r2,r21
 101f7d8:	a53fffcc 	andi	r20,r20,65535
 101f7dc:	a446b03a 	or	r3,r20,r17
 101f7e0:	18bfb02e 	bgeu	r3,r2,101f6a4 <__alt_data_end+0xff01f6a4>
 101f7e4:	003fab06 	br	101f694 <__alt_data_end+0xff01f694>
 101f7e8:	2005883a 	mov	r2,r4
 101f7ec:	2807883a 	mov	r3,r5
 101f7f0:	dfc00b17 	ldw	ra,44(sp)
 101f7f4:	df000a17 	ldw	fp,40(sp)
 101f7f8:	ddc00917 	ldw	r23,36(sp)
 101f7fc:	dd800817 	ldw	r22,32(sp)
 101f800:	dd400717 	ldw	r21,28(sp)
 101f804:	dd000617 	ldw	r20,24(sp)
 101f808:	dcc00517 	ldw	r19,20(sp)
 101f80c:	dc800417 	ldw	r18,16(sp)
 101f810:	dc400317 	ldw	r17,12(sp)
 101f814:	dc000217 	ldw	r16,8(sp)
 101f818:	dec00c04 	addi	sp,sp,48
 101f81c:	f800283a 	ret
 101f820:	04c03fc4 	movi	r19,255
 101f824:	99c9803a 	cmpltu	r4,r19,r7
 101f828:	200890fa 	slli	r4,r4,3
 101f82c:	003fa806 	br	101f6d0 <__alt_data_end+0xff01f6d0>
 101f830:	00803fc4 	movi	r2,255
 101f834:	14c5803a 	cmpltu	r2,r2,r19
 101f838:	100490fa 	slli	r2,r2,3
 101f83c:	003fc006 	br	101f740 <__alt_data_end+0xff01f740>
 101f840:	00804034 	movhi	r2,256
 101f844:	10bfffc4 	addi	r2,r2,-1
 101f848:	11808b36 	bltu	r2,r6,101fa78 <__umoddi3+0x4f0>
 101f84c:	01000404 	movi	r4,16
 101f850:	003f6406 	br	101f5e4 <__alt_data_end+0xff01f5e4>
 101f854:	34c4d83a 	srl	r2,r6,r19
 101f858:	3d0e983a 	sll	r7,r7,r20
 101f85c:	8cf8d83a 	srl	fp,r17,r19
 101f860:	8d10983a 	sll	r8,r17,r20
 101f864:	38aab03a 	or	r21,r7,r2
 101f868:	a82cd43a 	srli	r22,r21,16
 101f86c:	84e2d83a 	srl	r17,r16,r19
 101f870:	e009883a 	mov	r4,fp
 101f874:	b00b883a 	mov	r5,r22
 101f878:	8a22b03a 	or	r17,r17,r8
 101f87c:	3524983a 	sll	r18,r6,r20
 101f880:	101fc1c0 	call	101fc1c <__umodsi3>
 101f884:	e009883a 	mov	r4,fp
 101f888:	b00b883a 	mov	r5,r22
 101f88c:	102f883a 	mov	r23,r2
 101f890:	101fbb80 	call	101fbb8 <__udivsi3>
 101f894:	100d883a 	mov	r6,r2
 101f898:	b808943a 	slli	r4,r23,16
 101f89c:	aa3fffcc 	andi	r8,r21,65535
 101f8a0:	8804d43a 	srli	r2,r17,16
 101f8a4:	41af383a 	mul	r23,r8,r6
 101f8a8:	8520983a 	sll	r16,r16,r20
 101f8ac:	1104b03a 	or	r2,r2,r4
 101f8b0:	15c0042e 	bgeu	r2,r23,101f8c4 <__umoddi3+0x33c>
 101f8b4:	1545883a 	add	r2,r2,r21
 101f8b8:	30ffffc4 	addi	r3,r6,-1
 101f8bc:	1540742e 	bgeu	r2,r21,101fa90 <__umoddi3+0x508>
 101f8c0:	180d883a 	mov	r6,r3
 101f8c4:	15efc83a 	sub	r23,r2,r23
 101f8c8:	b00b883a 	mov	r5,r22
 101f8cc:	b809883a 	mov	r4,r23
 101f8d0:	d9800115 	stw	r6,4(sp)
 101f8d4:	da000015 	stw	r8,0(sp)
 101f8d8:	101fc1c0 	call	101fc1c <__umodsi3>
 101f8dc:	b00b883a 	mov	r5,r22
 101f8e0:	b809883a 	mov	r4,r23
 101f8e4:	1039883a 	mov	fp,r2
 101f8e8:	101fbb80 	call	101fbb8 <__udivsi3>
 101f8ec:	da000017 	ldw	r8,0(sp)
 101f8f0:	e038943a 	slli	fp,fp,16
 101f8f4:	100b883a 	mov	r5,r2
 101f8f8:	4089383a 	mul	r4,r8,r2
 101f8fc:	8a3fffcc 	andi	r8,r17,65535
 101f900:	4710b03a 	or	r8,r8,fp
 101f904:	d9800117 	ldw	r6,4(sp)
 101f908:	4100042e 	bgeu	r8,r4,101f91c <__umoddi3+0x394>
 101f90c:	4551883a 	add	r8,r8,r21
 101f910:	10bfffc4 	addi	r2,r2,-1
 101f914:	45405a2e 	bgeu	r8,r21,101fa80 <__umoddi3+0x4f8>
 101f918:	100b883a 	mov	r5,r2
 101f91c:	300c943a 	slli	r6,r6,16
 101f920:	91ffffcc 	andi	r7,r18,65535
 101f924:	9004d43a 	srli	r2,r18,16
 101f928:	314cb03a 	or	r6,r6,r5
 101f92c:	317fffcc 	andi	r5,r6,65535
 101f930:	300cd43a 	srli	r6,r6,16
 101f934:	29d3383a 	mul	r9,r5,r7
 101f938:	288b383a 	mul	r5,r5,r2
 101f93c:	31cf383a 	mul	r7,r6,r7
 101f940:	4806d43a 	srli	r3,r9,16
 101f944:	4111c83a 	sub	r8,r8,r4
 101f948:	29cb883a 	add	r5,r5,r7
 101f94c:	194b883a 	add	r5,r3,r5
 101f950:	3085383a 	mul	r2,r6,r2
 101f954:	29c0022e 	bgeu	r5,r7,101f960 <__umoddi3+0x3d8>
 101f958:	00c00074 	movhi	r3,1
 101f95c:	10c5883a 	add	r2,r2,r3
 101f960:	2808d43a 	srli	r4,r5,16
 101f964:	280a943a 	slli	r5,r5,16
 101f968:	4a7fffcc 	andi	r9,r9,65535
 101f96c:	2085883a 	add	r2,r4,r2
 101f970:	2a4b883a 	add	r5,r5,r9
 101f974:	40803636 	bltu	r8,r2,101fa50 <__umoddi3+0x4c8>
 101f978:	40804d26 	beq	r8,r2,101fab0 <__umoddi3+0x528>
 101f97c:	4089c83a 	sub	r4,r8,r2
 101f980:	280f883a 	mov	r7,r5
 101f984:	81cfc83a 	sub	r7,r16,r7
 101f988:	81c7803a 	cmpltu	r3,r16,r7
 101f98c:	20c7c83a 	sub	r3,r4,r3
 101f990:	1cc4983a 	sll	r2,r3,r19
 101f994:	3d0ed83a 	srl	r7,r7,r20
 101f998:	1d06d83a 	srl	r3,r3,r20
 101f99c:	11c4b03a 	or	r2,r2,r7
 101f9a0:	003f9306 	br	101f7f0 <__alt_data_end+0xff01f7f0>
 101f9a4:	9ca6983a 	sll	r19,r19,r18
 101f9a8:	88e8d83a 	srl	r20,r17,r3
 101f9ac:	80c4d83a 	srl	r2,r16,r3
 101f9b0:	982cd43a 	srli	r22,r19,16
 101f9b4:	8ca2983a 	sll	r17,r17,r18
 101f9b8:	a009883a 	mov	r4,r20
 101f9bc:	b00b883a 	mov	r5,r22
 101f9c0:	1478b03a 	or	fp,r2,r17
 101f9c4:	101fc1c0 	call	101fc1c <__umodsi3>
 101f9c8:	a009883a 	mov	r4,r20
 101f9cc:	b00b883a 	mov	r5,r22
 101f9d0:	1023883a 	mov	r17,r2
 101f9d4:	101fbb80 	call	101fbb8 <__udivsi3>
 101f9d8:	9d7fffcc 	andi	r21,r19,65535
 101f9dc:	880a943a 	slli	r5,r17,16
 101f9e0:	e008d43a 	srli	r4,fp,16
 101f9e4:	a885383a 	mul	r2,r21,r2
 101f9e8:	84a8983a 	sll	r20,r16,r18
 101f9ec:	2148b03a 	or	r4,r4,r5
 101f9f0:	2080042e 	bgeu	r4,r2,101fa04 <__umoddi3+0x47c>
 101f9f4:	24c9883a 	add	r4,r4,r19
 101f9f8:	24c00236 	bltu	r4,r19,101fa04 <__umoddi3+0x47c>
 101f9fc:	2080012e 	bgeu	r4,r2,101fa04 <__umoddi3+0x47c>
 101fa00:	24c9883a 	add	r4,r4,r19
 101fa04:	20a3c83a 	sub	r17,r4,r2
 101fa08:	b00b883a 	mov	r5,r22
 101fa0c:	8809883a 	mov	r4,r17
 101fa10:	101fc1c0 	call	101fc1c <__umodsi3>
 101fa14:	102f883a 	mov	r23,r2
 101fa18:	8809883a 	mov	r4,r17
 101fa1c:	b00b883a 	mov	r5,r22
 101fa20:	101fbb80 	call	101fbb8 <__udivsi3>
 101fa24:	b82e943a 	slli	r23,r23,16
 101fa28:	a885383a 	mul	r2,r21,r2
 101fa2c:	e13fffcc 	andi	r4,fp,65535
 101fa30:	25c8b03a 	or	r4,r4,r23
 101fa34:	2080042e 	bgeu	r4,r2,101fa48 <__umoddi3+0x4c0>
 101fa38:	24c9883a 	add	r4,r4,r19
 101fa3c:	24c00236 	bltu	r4,r19,101fa48 <__umoddi3+0x4c0>
 101fa40:	2080012e 	bgeu	r4,r2,101fa48 <__umoddi3+0x4c0>
 101fa44:	24c9883a 	add	r4,r4,r19
 101fa48:	20a3c83a 	sub	r17,r4,r2
 101fa4c:	003f4806 	br	101f770 <__alt_data_end+0xff01f770>
 101fa50:	2c8fc83a 	sub	r7,r5,r18
 101fa54:	1545c83a 	sub	r2,r2,r21
 101fa58:	29cb803a 	cmpltu	r5,r5,r7
 101fa5c:	1145c83a 	sub	r2,r2,r5
 101fa60:	4089c83a 	sub	r4,r8,r2
 101fa64:	003fc706 	br	101f984 <__alt_data_end+0xff01f984>
 101fa68:	01000604 	movi	r4,24
 101fa6c:	003f1806 	br	101f6d0 <__alt_data_end+0xff01f6d0>
 101fa70:	00800604 	movi	r2,24
 101fa74:	003f3206 	br	101f740 <__alt_data_end+0xff01f740>
 101fa78:	01000604 	movi	r4,24
 101fa7c:	003ed906 	br	101f5e4 <__alt_data_end+0xff01f5e4>
 101fa80:	413fa52e 	bgeu	r8,r4,101f918 <__alt_data_end+0xff01f918>
 101fa84:	297fff84 	addi	r5,r5,-2
 101fa88:	4551883a 	add	r8,r8,r21
 101fa8c:	003fa306 	br	101f91c <__alt_data_end+0xff01f91c>
 101fa90:	15ff8b2e 	bgeu	r2,r23,101f8c0 <__alt_data_end+0xff01f8c0>
 101fa94:	31bfff84 	addi	r6,r6,-2
 101fa98:	1545883a 	add	r2,r2,r21
 101fa9c:	003f8906 	br	101f8c4 <__alt_data_end+0xff01f8c4>
 101faa0:	24c9883a 	add	r4,r4,r19
 101faa4:	003eee06 	br	101f660 <__alt_data_end+0xff01f660>
 101faa8:	8005883a 	mov	r2,r16
 101faac:	003f1706 	br	101f70c <__alt_data_end+0xff01f70c>
 101fab0:	817fe736 	bltu	r16,r5,101fa50 <__alt_data_end+0xff01fa50>
 101fab4:	280f883a 	mov	r7,r5
 101fab8:	0009883a 	mov	r4,zero
 101fabc:	003fb106 	br	101f984 <__alt_data_end+0xff01f984>

0101fac0 <__divsi3>:
 101fac0:	20001b16 	blt	r4,zero,101fb30 <__divsi3+0x70>
 101fac4:	000f883a 	mov	r7,zero
 101fac8:	28001616 	blt	r5,zero,101fb24 <__divsi3+0x64>
 101facc:	200d883a 	mov	r6,r4
 101fad0:	29001a2e 	bgeu	r5,r4,101fb3c <__divsi3+0x7c>
 101fad4:	00800804 	movi	r2,32
 101fad8:	00c00044 	movi	r3,1
 101fadc:	00000106 	br	101fae4 <__divsi3+0x24>
 101fae0:	10000d26 	beq	r2,zero,101fb18 <__divsi3+0x58>
 101fae4:	294b883a 	add	r5,r5,r5
 101fae8:	10bfffc4 	addi	r2,r2,-1
 101faec:	18c7883a 	add	r3,r3,r3
 101faf0:	293ffb36 	bltu	r5,r4,101fae0 <__alt_data_end+0xff01fae0>
 101faf4:	0005883a 	mov	r2,zero
 101faf8:	18000726 	beq	r3,zero,101fb18 <__divsi3+0x58>
 101fafc:	0005883a 	mov	r2,zero
 101fb00:	31400236 	bltu	r6,r5,101fb0c <__divsi3+0x4c>
 101fb04:	314dc83a 	sub	r6,r6,r5
 101fb08:	10c4b03a 	or	r2,r2,r3
 101fb0c:	1806d07a 	srli	r3,r3,1
 101fb10:	280ad07a 	srli	r5,r5,1
 101fb14:	183ffa1e 	bne	r3,zero,101fb00 <__alt_data_end+0xff01fb00>
 101fb18:	38000126 	beq	r7,zero,101fb20 <__divsi3+0x60>
 101fb1c:	0085c83a 	sub	r2,zero,r2
 101fb20:	f800283a 	ret
 101fb24:	014bc83a 	sub	r5,zero,r5
 101fb28:	39c0005c 	xori	r7,r7,1
 101fb2c:	003fe706 	br	101facc <__alt_data_end+0xff01facc>
 101fb30:	0109c83a 	sub	r4,zero,r4
 101fb34:	01c00044 	movi	r7,1
 101fb38:	003fe306 	br	101fac8 <__alt_data_end+0xff01fac8>
 101fb3c:	00c00044 	movi	r3,1
 101fb40:	003fee06 	br	101fafc <__alt_data_end+0xff01fafc>

0101fb44 <__modsi3>:
 101fb44:	20001716 	blt	r4,zero,101fba4 <__modsi3+0x60>
 101fb48:	000f883a 	mov	r7,zero
 101fb4c:	2005883a 	mov	r2,r4
 101fb50:	28001216 	blt	r5,zero,101fb9c <__modsi3+0x58>
 101fb54:	2900162e 	bgeu	r5,r4,101fbb0 <__modsi3+0x6c>
 101fb58:	01800804 	movi	r6,32
 101fb5c:	00c00044 	movi	r3,1
 101fb60:	00000106 	br	101fb68 <__modsi3+0x24>
 101fb64:	30000a26 	beq	r6,zero,101fb90 <__modsi3+0x4c>
 101fb68:	294b883a 	add	r5,r5,r5
 101fb6c:	31bfffc4 	addi	r6,r6,-1
 101fb70:	18c7883a 	add	r3,r3,r3
 101fb74:	293ffb36 	bltu	r5,r4,101fb64 <__alt_data_end+0xff01fb64>
 101fb78:	18000526 	beq	r3,zero,101fb90 <__modsi3+0x4c>
 101fb7c:	1806d07a 	srli	r3,r3,1
 101fb80:	11400136 	bltu	r2,r5,101fb88 <__modsi3+0x44>
 101fb84:	1145c83a 	sub	r2,r2,r5
 101fb88:	280ad07a 	srli	r5,r5,1
 101fb8c:	183ffb1e 	bne	r3,zero,101fb7c <__alt_data_end+0xff01fb7c>
 101fb90:	38000126 	beq	r7,zero,101fb98 <__modsi3+0x54>
 101fb94:	0085c83a 	sub	r2,zero,r2
 101fb98:	f800283a 	ret
 101fb9c:	014bc83a 	sub	r5,zero,r5
 101fba0:	003fec06 	br	101fb54 <__alt_data_end+0xff01fb54>
 101fba4:	0109c83a 	sub	r4,zero,r4
 101fba8:	01c00044 	movi	r7,1
 101fbac:	003fe706 	br	101fb4c <__alt_data_end+0xff01fb4c>
 101fbb0:	00c00044 	movi	r3,1
 101fbb4:	003ff106 	br	101fb7c <__alt_data_end+0xff01fb7c>

0101fbb8 <__udivsi3>:
 101fbb8:	200d883a 	mov	r6,r4
 101fbbc:	2900152e 	bgeu	r5,r4,101fc14 <__udivsi3+0x5c>
 101fbc0:	28001416 	blt	r5,zero,101fc14 <__udivsi3+0x5c>
 101fbc4:	00800804 	movi	r2,32
 101fbc8:	00c00044 	movi	r3,1
 101fbcc:	00000206 	br	101fbd8 <__udivsi3+0x20>
 101fbd0:	10000e26 	beq	r2,zero,101fc0c <__udivsi3+0x54>
 101fbd4:	28000516 	blt	r5,zero,101fbec <__udivsi3+0x34>
 101fbd8:	294b883a 	add	r5,r5,r5
 101fbdc:	10bfffc4 	addi	r2,r2,-1
 101fbe0:	18c7883a 	add	r3,r3,r3
 101fbe4:	293ffa36 	bltu	r5,r4,101fbd0 <__alt_data_end+0xff01fbd0>
 101fbe8:	18000826 	beq	r3,zero,101fc0c <__udivsi3+0x54>
 101fbec:	0005883a 	mov	r2,zero
 101fbf0:	31400236 	bltu	r6,r5,101fbfc <__udivsi3+0x44>
 101fbf4:	314dc83a 	sub	r6,r6,r5
 101fbf8:	10c4b03a 	or	r2,r2,r3
 101fbfc:	1806d07a 	srli	r3,r3,1
 101fc00:	280ad07a 	srli	r5,r5,1
 101fc04:	183ffa1e 	bne	r3,zero,101fbf0 <__alt_data_end+0xff01fbf0>
 101fc08:	f800283a 	ret
 101fc0c:	0005883a 	mov	r2,zero
 101fc10:	f800283a 	ret
 101fc14:	00c00044 	movi	r3,1
 101fc18:	003ff406 	br	101fbec <__alt_data_end+0xff01fbec>

0101fc1c <__umodsi3>:
 101fc1c:	2005883a 	mov	r2,r4
 101fc20:	2900122e 	bgeu	r5,r4,101fc6c <__umodsi3+0x50>
 101fc24:	28001116 	blt	r5,zero,101fc6c <__umodsi3+0x50>
 101fc28:	01800804 	movi	r6,32
 101fc2c:	00c00044 	movi	r3,1
 101fc30:	00000206 	br	101fc3c <__umodsi3+0x20>
 101fc34:	30000c26 	beq	r6,zero,101fc68 <__umodsi3+0x4c>
 101fc38:	28000516 	blt	r5,zero,101fc50 <__umodsi3+0x34>
 101fc3c:	294b883a 	add	r5,r5,r5
 101fc40:	31bfffc4 	addi	r6,r6,-1
 101fc44:	18c7883a 	add	r3,r3,r3
 101fc48:	293ffa36 	bltu	r5,r4,101fc34 <__alt_data_end+0xff01fc34>
 101fc4c:	18000626 	beq	r3,zero,101fc68 <__umodsi3+0x4c>
 101fc50:	1806d07a 	srli	r3,r3,1
 101fc54:	11400136 	bltu	r2,r5,101fc5c <__umodsi3+0x40>
 101fc58:	1145c83a 	sub	r2,r2,r5
 101fc5c:	280ad07a 	srli	r5,r5,1
 101fc60:	183ffb1e 	bne	r3,zero,101fc50 <__alt_data_end+0xff01fc50>
 101fc64:	f800283a 	ret
 101fc68:	f800283a 	ret
 101fc6c:	00c00044 	movi	r3,1
 101fc70:	003ff706 	br	101fc50 <__alt_data_end+0xff01fc50>

0101fc74 <__adddf3>:
 101fc74:	02c00434 	movhi	r11,16
 101fc78:	5affffc4 	addi	r11,r11,-1
 101fc7c:	2806d7fa 	srli	r3,r5,31
 101fc80:	2ad4703a 	and	r10,r5,r11
 101fc84:	3ad2703a 	and	r9,r7,r11
 101fc88:	3804d53a 	srli	r2,r7,20
 101fc8c:	3018d77a 	srli	r12,r6,29
 101fc90:	280ad53a 	srli	r5,r5,20
 101fc94:	501490fa 	slli	r10,r10,3
 101fc98:	2010d77a 	srli	r8,r4,29
 101fc9c:	481290fa 	slli	r9,r9,3
 101fca0:	380ed7fa 	srli	r7,r7,31
 101fca4:	defffb04 	addi	sp,sp,-20
 101fca8:	dc800215 	stw	r18,8(sp)
 101fcac:	dc400115 	stw	r17,4(sp)
 101fcb0:	dc000015 	stw	r16,0(sp)
 101fcb4:	dfc00415 	stw	ra,16(sp)
 101fcb8:	dcc00315 	stw	r19,12(sp)
 101fcbc:	1c803fcc 	andi	r18,r3,255
 101fcc0:	2c01ffcc 	andi	r16,r5,2047
 101fcc4:	5210b03a 	or	r8,r10,r8
 101fcc8:	202290fa 	slli	r17,r4,3
 101fccc:	1081ffcc 	andi	r2,r2,2047
 101fcd0:	4b12b03a 	or	r9,r9,r12
 101fcd4:	300c90fa 	slli	r6,r6,3
 101fcd8:	91c07526 	beq	r18,r7,101feb0 <__adddf3+0x23c>
 101fcdc:	8087c83a 	sub	r3,r16,r2
 101fce0:	00c0ab0e 	bge	zero,r3,101ff90 <__adddf3+0x31c>
 101fce4:	10002a1e 	bne	r2,zero,101fd90 <__adddf3+0x11c>
 101fce8:	4984b03a 	or	r2,r9,r6
 101fcec:	1000961e 	bne	r2,zero,101ff48 <__adddf3+0x2d4>
 101fcf0:	888001cc 	andi	r2,r17,7
 101fcf4:	10000726 	beq	r2,zero,101fd14 <__adddf3+0xa0>
 101fcf8:	888003cc 	andi	r2,r17,15
 101fcfc:	00c00104 	movi	r3,4
 101fd00:	10c00426 	beq	r2,r3,101fd14 <__adddf3+0xa0>
 101fd04:	88c7883a 	add	r3,r17,r3
 101fd08:	1c63803a 	cmpltu	r17,r3,r17
 101fd0c:	4451883a 	add	r8,r8,r17
 101fd10:	1823883a 	mov	r17,r3
 101fd14:	4080202c 	andhi	r2,r8,128
 101fd18:	10005926 	beq	r2,zero,101fe80 <__adddf3+0x20c>
 101fd1c:	84000044 	addi	r16,r16,1
 101fd20:	0081ffc4 	movi	r2,2047
 101fd24:	8080ba26 	beq	r16,r2,1020010 <__adddf3+0x39c>
 101fd28:	00bfe034 	movhi	r2,65408
 101fd2c:	10bfffc4 	addi	r2,r2,-1
 101fd30:	4090703a 	and	r8,r8,r2
 101fd34:	4004977a 	slli	r2,r8,29
 101fd38:	4010927a 	slli	r8,r8,9
 101fd3c:	8822d0fa 	srli	r17,r17,3
 101fd40:	8401ffcc 	andi	r16,r16,2047
 101fd44:	4010d33a 	srli	r8,r8,12
 101fd48:	9007883a 	mov	r3,r18
 101fd4c:	1444b03a 	or	r2,r2,r17
 101fd50:	8401ffcc 	andi	r16,r16,2047
 101fd54:	8020953a 	slli	r16,r16,20
 101fd58:	18c03fcc 	andi	r3,r3,255
 101fd5c:	01000434 	movhi	r4,16
 101fd60:	213fffc4 	addi	r4,r4,-1
 101fd64:	180697fa 	slli	r3,r3,31
 101fd68:	4110703a 	and	r8,r8,r4
 101fd6c:	4410b03a 	or	r8,r8,r16
 101fd70:	40c6b03a 	or	r3,r8,r3
 101fd74:	dfc00417 	ldw	ra,16(sp)
 101fd78:	dcc00317 	ldw	r19,12(sp)
 101fd7c:	dc800217 	ldw	r18,8(sp)
 101fd80:	dc400117 	ldw	r17,4(sp)
 101fd84:	dc000017 	ldw	r16,0(sp)
 101fd88:	dec00504 	addi	sp,sp,20
 101fd8c:	f800283a 	ret
 101fd90:	0081ffc4 	movi	r2,2047
 101fd94:	80bfd626 	beq	r16,r2,101fcf0 <__alt_data_end+0xff01fcf0>
 101fd98:	4a402034 	orhi	r9,r9,128
 101fd9c:	00800e04 	movi	r2,56
 101fda0:	10c09f16 	blt	r2,r3,1020020 <__adddf3+0x3ac>
 101fda4:	008007c4 	movi	r2,31
 101fda8:	10c0c216 	blt	r2,r3,10200b4 <__adddf3+0x440>
 101fdac:	00800804 	movi	r2,32
 101fdb0:	10c5c83a 	sub	r2,r2,r3
 101fdb4:	488a983a 	sll	r5,r9,r2
 101fdb8:	30c8d83a 	srl	r4,r6,r3
 101fdbc:	3084983a 	sll	r2,r6,r2
 101fdc0:	48c6d83a 	srl	r3,r9,r3
 101fdc4:	290cb03a 	or	r6,r5,r4
 101fdc8:	1004c03a 	cmpne	r2,r2,zero
 101fdcc:	308cb03a 	or	r6,r6,r2
 101fdd0:	898dc83a 	sub	r6,r17,r6
 101fdd4:	89a3803a 	cmpltu	r17,r17,r6
 101fdd8:	40d1c83a 	sub	r8,r8,r3
 101fddc:	4451c83a 	sub	r8,r8,r17
 101fde0:	3023883a 	mov	r17,r6
 101fde4:	4080202c 	andhi	r2,r8,128
 101fde8:	10002326 	beq	r2,zero,101fe78 <__adddf3+0x204>
 101fdec:	04c02034 	movhi	r19,128
 101fdf0:	9cffffc4 	addi	r19,r19,-1
 101fdf4:	44e6703a 	and	r19,r8,r19
 101fdf8:	98007626 	beq	r19,zero,101ffd4 <__adddf3+0x360>
 101fdfc:	9809883a 	mov	r4,r19
 101fe00:	10222780 	call	1022278 <__clzsi2>
 101fe04:	10fffe04 	addi	r3,r2,-8
 101fe08:	010007c4 	movi	r4,31
 101fe0c:	20c07716 	blt	r4,r3,101ffec <__adddf3+0x378>
 101fe10:	00800804 	movi	r2,32
 101fe14:	10c5c83a 	sub	r2,r2,r3
 101fe18:	8884d83a 	srl	r2,r17,r2
 101fe1c:	98d0983a 	sll	r8,r19,r3
 101fe20:	88e2983a 	sll	r17,r17,r3
 101fe24:	1204b03a 	or	r2,r2,r8
 101fe28:	1c007416 	blt	r3,r16,101fffc <__adddf3+0x388>
 101fe2c:	1c21c83a 	sub	r16,r3,r16
 101fe30:	82000044 	addi	r8,r16,1
 101fe34:	00c007c4 	movi	r3,31
 101fe38:	1a009116 	blt	r3,r8,1020080 <__adddf3+0x40c>
 101fe3c:	00c00804 	movi	r3,32
 101fe40:	1a07c83a 	sub	r3,r3,r8
 101fe44:	8a08d83a 	srl	r4,r17,r8
 101fe48:	88e2983a 	sll	r17,r17,r3
 101fe4c:	10c6983a 	sll	r3,r2,r3
 101fe50:	1210d83a 	srl	r8,r2,r8
 101fe54:	8804c03a 	cmpne	r2,r17,zero
 101fe58:	1906b03a 	or	r3,r3,r4
 101fe5c:	18a2b03a 	or	r17,r3,r2
 101fe60:	0021883a 	mov	r16,zero
 101fe64:	003fa206 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 101fe68:	1890b03a 	or	r8,r3,r2
 101fe6c:	40017d26 	beq	r8,zero,1020464 <__adddf3+0x7f0>
 101fe70:	1011883a 	mov	r8,r2
 101fe74:	1823883a 	mov	r17,r3
 101fe78:	888001cc 	andi	r2,r17,7
 101fe7c:	103f9e1e 	bne	r2,zero,101fcf8 <__alt_data_end+0xff01fcf8>
 101fe80:	4004977a 	slli	r2,r8,29
 101fe84:	8822d0fa 	srli	r17,r17,3
 101fe88:	4010d0fa 	srli	r8,r8,3
 101fe8c:	9007883a 	mov	r3,r18
 101fe90:	1444b03a 	or	r2,r2,r17
 101fe94:	0101ffc4 	movi	r4,2047
 101fe98:	81002426 	beq	r16,r4,101ff2c <__adddf3+0x2b8>
 101fe9c:	8120703a 	and	r16,r16,r4
 101fea0:	01000434 	movhi	r4,16
 101fea4:	213fffc4 	addi	r4,r4,-1
 101fea8:	4110703a 	and	r8,r8,r4
 101feac:	003fa806 	br	101fd50 <__alt_data_end+0xff01fd50>
 101feb0:	8089c83a 	sub	r4,r16,r2
 101feb4:	01005e0e 	bge	zero,r4,1020030 <__adddf3+0x3bc>
 101feb8:	10002b26 	beq	r2,zero,101ff68 <__adddf3+0x2f4>
 101febc:	0081ffc4 	movi	r2,2047
 101fec0:	80bf8b26 	beq	r16,r2,101fcf0 <__alt_data_end+0xff01fcf0>
 101fec4:	4a402034 	orhi	r9,r9,128
 101fec8:	00800e04 	movi	r2,56
 101fecc:	1100a40e 	bge	r2,r4,1020160 <__adddf3+0x4ec>
 101fed0:	498cb03a 	or	r6,r9,r6
 101fed4:	300ac03a 	cmpne	r5,r6,zero
 101fed8:	0013883a 	mov	r9,zero
 101fedc:	2c4b883a 	add	r5,r5,r17
 101fee0:	2c63803a 	cmpltu	r17,r5,r17
 101fee4:	4a11883a 	add	r8,r9,r8
 101fee8:	8a11883a 	add	r8,r17,r8
 101feec:	2823883a 	mov	r17,r5
 101fef0:	4080202c 	andhi	r2,r8,128
 101fef4:	103fe026 	beq	r2,zero,101fe78 <__alt_data_end+0xff01fe78>
 101fef8:	84000044 	addi	r16,r16,1
 101fefc:	0081ffc4 	movi	r2,2047
 101ff00:	8080d226 	beq	r16,r2,102024c <__adddf3+0x5d8>
 101ff04:	00bfe034 	movhi	r2,65408
 101ff08:	10bfffc4 	addi	r2,r2,-1
 101ff0c:	4090703a 	and	r8,r8,r2
 101ff10:	880ad07a 	srli	r5,r17,1
 101ff14:	400897fa 	slli	r4,r8,31
 101ff18:	88c0004c 	andi	r3,r17,1
 101ff1c:	28e2b03a 	or	r17,r5,r3
 101ff20:	4010d07a 	srli	r8,r8,1
 101ff24:	2462b03a 	or	r17,r4,r17
 101ff28:	003f7106 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 101ff2c:	4088b03a 	or	r4,r8,r2
 101ff30:	20014526 	beq	r4,zero,1020448 <__adddf3+0x7d4>
 101ff34:	01000434 	movhi	r4,16
 101ff38:	42000234 	orhi	r8,r8,8
 101ff3c:	213fffc4 	addi	r4,r4,-1
 101ff40:	4110703a 	and	r8,r8,r4
 101ff44:	003f8206 	br	101fd50 <__alt_data_end+0xff01fd50>
 101ff48:	18ffffc4 	addi	r3,r3,-1
 101ff4c:	1800491e 	bne	r3,zero,1020074 <__adddf3+0x400>
 101ff50:	898bc83a 	sub	r5,r17,r6
 101ff54:	8963803a 	cmpltu	r17,r17,r5
 101ff58:	4251c83a 	sub	r8,r8,r9
 101ff5c:	4451c83a 	sub	r8,r8,r17
 101ff60:	2823883a 	mov	r17,r5
 101ff64:	003f9f06 	br	101fde4 <__alt_data_end+0xff01fde4>
 101ff68:	4984b03a 	or	r2,r9,r6
 101ff6c:	103f6026 	beq	r2,zero,101fcf0 <__alt_data_end+0xff01fcf0>
 101ff70:	213fffc4 	addi	r4,r4,-1
 101ff74:	2000931e 	bne	r4,zero,10201c4 <__adddf3+0x550>
 101ff78:	898d883a 	add	r6,r17,r6
 101ff7c:	3463803a 	cmpltu	r17,r6,r17
 101ff80:	4251883a 	add	r8,r8,r9
 101ff84:	8a11883a 	add	r8,r17,r8
 101ff88:	3023883a 	mov	r17,r6
 101ff8c:	003fd806 	br	101fef0 <__alt_data_end+0xff01fef0>
 101ff90:	1800541e 	bne	r3,zero,10200e4 <__adddf3+0x470>
 101ff94:	80800044 	addi	r2,r16,1
 101ff98:	1081ffcc 	andi	r2,r2,2047
 101ff9c:	00c00044 	movi	r3,1
 101ffa0:	1880a00e 	bge	r3,r2,1020224 <__adddf3+0x5b0>
 101ffa4:	8989c83a 	sub	r4,r17,r6
 101ffa8:	8905803a 	cmpltu	r2,r17,r4
 101ffac:	4267c83a 	sub	r19,r8,r9
 101ffb0:	98a7c83a 	sub	r19,r19,r2
 101ffb4:	9880202c 	andhi	r2,r19,128
 101ffb8:	10006326 	beq	r2,zero,1020148 <__adddf3+0x4d4>
 101ffbc:	3463c83a 	sub	r17,r6,r17
 101ffc0:	4a07c83a 	sub	r3,r9,r8
 101ffc4:	344d803a 	cmpltu	r6,r6,r17
 101ffc8:	19a7c83a 	sub	r19,r3,r6
 101ffcc:	3825883a 	mov	r18,r7
 101ffd0:	983f8a1e 	bne	r19,zero,101fdfc <__alt_data_end+0xff01fdfc>
 101ffd4:	8809883a 	mov	r4,r17
 101ffd8:	10222780 	call	1022278 <__clzsi2>
 101ffdc:	10800804 	addi	r2,r2,32
 101ffe0:	10fffe04 	addi	r3,r2,-8
 101ffe4:	010007c4 	movi	r4,31
 101ffe8:	20ff890e 	bge	r4,r3,101fe10 <__alt_data_end+0xff01fe10>
 101ffec:	10bff604 	addi	r2,r2,-40
 101fff0:	8884983a 	sll	r2,r17,r2
 101fff4:	0023883a 	mov	r17,zero
 101fff8:	1c3f8c0e 	bge	r3,r16,101fe2c <__alt_data_end+0xff01fe2c>
 101fffc:	023fe034 	movhi	r8,65408
 1020000:	423fffc4 	addi	r8,r8,-1
 1020004:	80e1c83a 	sub	r16,r16,r3
 1020008:	1210703a 	and	r8,r2,r8
 102000c:	003f3806 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020010:	9007883a 	mov	r3,r18
 1020014:	0011883a 	mov	r8,zero
 1020018:	0005883a 	mov	r2,zero
 102001c:	003f4c06 	br	101fd50 <__alt_data_end+0xff01fd50>
 1020020:	498cb03a 	or	r6,r9,r6
 1020024:	300cc03a 	cmpne	r6,r6,zero
 1020028:	0007883a 	mov	r3,zero
 102002c:	003f6806 	br	101fdd0 <__alt_data_end+0xff01fdd0>
 1020030:	20009c1e 	bne	r4,zero,10202a4 <__adddf3+0x630>
 1020034:	80800044 	addi	r2,r16,1
 1020038:	1141ffcc 	andi	r5,r2,2047
 102003c:	01000044 	movi	r4,1
 1020040:	2140670e 	bge	r4,r5,10201e0 <__adddf3+0x56c>
 1020044:	0101ffc4 	movi	r4,2047
 1020048:	11007f26 	beq	r2,r4,1020248 <__adddf3+0x5d4>
 102004c:	898d883a 	add	r6,r17,r6
 1020050:	4247883a 	add	r3,r8,r9
 1020054:	3451803a 	cmpltu	r8,r6,r17
 1020058:	40d1883a 	add	r8,r8,r3
 102005c:	402297fa 	slli	r17,r8,31
 1020060:	300cd07a 	srli	r6,r6,1
 1020064:	4010d07a 	srli	r8,r8,1
 1020068:	1021883a 	mov	r16,r2
 102006c:	89a2b03a 	or	r17,r17,r6
 1020070:	003f1f06 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020074:	0081ffc4 	movi	r2,2047
 1020078:	80bf481e 	bne	r16,r2,101fd9c <__alt_data_end+0xff01fd9c>
 102007c:	003f1c06 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020080:	843ff844 	addi	r16,r16,-31
 1020084:	01000804 	movi	r4,32
 1020088:	1406d83a 	srl	r3,r2,r16
 102008c:	41005026 	beq	r8,r4,10201d0 <__adddf3+0x55c>
 1020090:	01001004 	movi	r4,64
 1020094:	2211c83a 	sub	r8,r4,r8
 1020098:	1204983a 	sll	r2,r2,r8
 102009c:	88a2b03a 	or	r17,r17,r2
 10200a0:	8822c03a 	cmpne	r17,r17,zero
 10200a4:	1c62b03a 	or	r17,r3,r17
 10200a8:	0011883a 	mov	r8,zero
 10200ac:	0021883a 	mov	r16,zero
 10200b0:	003f7106 	br	101fe78 <__alt_data_end+0xff01fe78>
 10200b4:	193ff804 	addi	r4,r3,-32
 10200b8:	00800804 	movi	r2,32
 10200bc:	4908d83a 	srl	r4,r9,r4
 10200c0:	18804526 	beq	r3,r2,10201d8 <__adddf3+0x564>
 10200c4:	00801004 	movi	r2,64
 10200c8:	10c5c83a 	sub	r2,r2,r3
 10200cc:	4886983a 	sll	r3,r9,r2
 10200d0:	198cb03a 	or	r6,r3,r6
 10200d4:	300cc03a 	cmpne	r6,r6,zero
 10200d8:	218cb03a 	or	r6,r4,r6
 10200dc:	0007883a 	mov	r3,zero
 10200e0:	003f3b06 	br	101fdd0 <__alt_data_end+0xff01fdd0>
 10200e4:	80002a26 	beq	r16,zero,1020190 <__adddf3+0x51c>
 10200e8:	0101ffc4 	movi	r4,2047
 10200ec:	11006826 	beq	r2,r4,1020290 <__adddf3+0x61c>
 10200f0:	00c7c83a 	sub	r3,zero,r3
 10200f4:	42002034 	orhi	r8,r8,128
 10200f8:	01000e04 	movi	r4,56
 10200fc:	20c07c16 	blt	r4,r3,10202f0 <__adddf3+0x67c>
 1020100:	010007c4 	movi	r4,31
 1020104:	20c0da16 	blt	r4,r3,1020470 <__adddf3+0x7fc>
 1020108:	01000804 	movi	r4,32
 102010c:	20c9c83a 	sub	r4,r4,r3
 1020110:	4114983a 	sll	r10,r8,r4
 1020114:	88cad83a 	srl	r5,r17,r3
 1020118:	8908983a 	sll	r4,r17,r4
 102011c:	40c6d83a 	srl	r3,r8,r3
 1020120:	5162b03a 	or	r17,r10,r5
 1020124:	2008c03a 	cmpne	r4,r4,zero
 1020128:	8922b03a 	or	r17,r17,r4
 102012c:	3463c83a 	sub	r17,r6,r17
 1020130:	48c7c83a 	sub	r3,r9,r3
 1020134:	344d803a 	cmpltu	r6,r6,r17
 1020138:	1991c83a 	sub	r8,r3,r6
 102013c:	1021883a 	mov	r16,r2
 1020140:	3825883a 	mov	r18,r7
 1020144:	003f2706 	br	101fde4 <__alt_data_end+0xff01fde4>
 1020148:	24d0b03a 	or	r8,r4,r19
 102014c:	40001b1e 	bne	r8,zero,10201bc <__adddf3+0x548>
 1020150:	0005883a 	mov	r2,zero
 1020154:	0007883a 	mov	r3,zero
 1020158:	0021883a 	mov	r16,zero
 102015c:	003f4d06 	br	101fe94 <__alt_data_end+0xff01fe94>
 1020160:	008007c4 	movi	r2,31
 1020164:	11003c16 	blt	r2,r4,1020258 <__adddf3+0x5e4>
 1020168:	00800804 	movi	r2,32
 102016c:	1105c83a 	sub	r2,r2,r4
 1020170:	488e983a 	sll	r7,r9,r2
 1020174:	310ad83a 	srl	r5,r6,r4
 1020178:	3084983a 	sll	r2,r6,r2
 102017c:	4912d83a 	srl	r9,r9,r4
 1020180:	394ab03a 	or	r5,r7,r5
 1020184:	1004c03a 	cmpne	r2,r2,zero
 1020188:	288ab03a 	or	r5,r5,r2
 102018c:	003f5306 	br	101fedc <__alt_data_end+0xff01fedc>
 1020190:	4448b03a 	or	r4,r8,r17
 1020194:	20003e26 	beq	r4,zero,1020290 <__adddf3+0x61c>
 1020198:	00c6303a 	nor	r3,zero,r3
 102019c:	18003a1e 	bne	r3,zero,1020288 <__adddf3+0x614>
 10201a0:	3463c83a 	sub	r17,r6,r17
 10201a4:	4a07c83a 	sub	r3,r9,r8
 10201a8:	344d803a 	cmpltu	r6,r6,r17
 10201ac:	1991c83a 	sub	r8,r3,r6
 10201b0:	1021883a 	mov	r16,r2
 10201b4:	3825883a 	mov	r18,r7
 10201b8:	003f0a06 	br	101fde4 <__alt_data_end+0xff01fde4>
 10201bc:	2023883a 	mov	r17,r4
 10201c0:	003f0d06 	br	101fdf8 <__alt_data_end+0xff01fdf8>
 10201c4:	0081ffc4 	movi	r2,2047
 10201c8:	80bf3f1e 	bne	r16,r2,101fec8 <__alt_data_end+0xff01fec8>
 10201cc:	003ec806 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10201d0:	0005883a 	mov	r2,zero
 10201d4:	003fb106 	br	102009c <__alt_data_end+0xff02009c>
 10201d8:	0007883a 	mov	r3,zero
 10201dc:	003fbc06 	br	10200d0 <__alt_data_end+0xff0200d0>
 10201e0:	4444b03a 	or	r2,r8,r17
 10201e4:	8000871e 	bne	r16,zero,1020404 <__adddf3+0x790>
 10201e8:	1000ba26 	beq	r2,zero,10204d4 <__adddf3+0x860>
 10201ec:	4984b03a 	or	r2,r9,r6
 10201f0:	103ebf26 	beq	r2,zero,101fcf0 <__alt_data_end+0xff01fcf0>
 10201f4:	8985883a 	add	r2,r17,r6
 10201f8:	4247883a 	add	r3,r8,r9
 10201fc:	1451803a 	cmpltu	r8,r2,r17
 1020200:	40d1883a 	add	r8,r8,r3
 1020204:	40c0202c 	andhi	r3,r8,128
 1020208:	1023883a 	mov	r17,r2
 102020c:	183f1a26 	beq	r3,zero,101fe78 <__alt_data_end+0xff01fe78>
 1020210:	00bfe034 	movhi	r2,65408
 1020214:	10bfffc4 	addi	r2,r2,-1
 1020218:	2021883a 	mov	r16,r4
 102021c:	4090703a 	and	r8,r8,r2
 1020220:	003eb306 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020224:	4444b03a 	or	r2,r8,r17
 1020228:	8000291e 	bne	r16,zero,10202d0 <__adddf3+0x65c>
 102022c:	10004b1e 	bne	r2,zero,102035c <__adddf3+0x6e8>
 1020230:	4990b03a 	or	r8,r9,r6
 1020234:	40008b26 	beq	r8,zero,1020464 <__adddf3+0x7f0>
 1020238:	4811883a 	mov	r8,r9
 102023c:	3023883a 	mov	r17,r6
 1020240:	3825883a 	mov	r18,r7
 1020244:	003eaa06 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020248:	1021883a 	mov	r16,r2
 102024c:	0011883a 	mov	r8,zero
 1020250:	0005883a 	mov	r2,zero
 1020254:	003f0f06 	br	101fe94 <__alt_data_end+0xff01fe94>
 1020258:	217ff804 	addi	r5,r4,-32
 102025c:	00800804 	movi	r2,32
 1020260:	494ad83a 	srl	r5,r9,r5
 1020264:	20807d26 	beq	r4,r2,102045c <__adddf3+0x7e8>
 1020268:	00801004 	movi	r2,64
 102026c:	1109c83a 	sub	r4,r2,r4
 1020270:	4912983a 	sll	r9,r9,r4
 1020274:	498cb03a 	or	r6,r9,r6
 1020278:	300cc03a 	cmpne	r6,r6,zero
 102027c:	298ab03a 	or	r5,r5,r6
 1020280:	0013883a 	mov	r9,zero
 1020284:	003f1506 	br	101fedc <__alt_data_end+0xff01fedc>
 1020288:	0101ffc4 	movi	r4,2047
 102028c:	113f9a1e 	bne	r2,r4,10200f8 <__alt_data_end+0xff0200f8>
 1020290:	4811883a 	mov	r8,r9
 1020294:	3023883a 	mov	r17,r6
 1020298:	1021883a 	mov	r16,r2
 102029c:	3825883a 	mov	r18,r7
 10202a0:	003e9306 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10202a4:	8000161e 	bne	r16,zero,1020300 <__adddf3+0x68c>
 10202a8:	444ab03a 	or	r5,r8,r17
 10202ac:	28005126 	beq	r5,zero,10203f4 <__adddf3+0x780>
 10202b0:	0108303a 	nor	r4,zero,r4
 10202b4:	20004d1e 	bne	r4,zero,10203ec <__adddf3+0x778>
 10202b8:	89a3883a 	add	r17,r17,r6
 10202bc:	4253883a 	add	r9,r8,r9
 10202c0:	898d803a 	cmpltu	r6,r17,r6
 10202c4:	3251883a 	add	r8,r6,r9
 10202c8:	1021883a 	mov	r16,r2
 10202cc:	003f0806 	br	101fef0 <__alt_data_end+0xff01fef0>
 10202d0:	1000301e 	bne	r2,zero,1020394 <__adddf3+0x720>
 10202d4:	4984b03a 	or	r2,r9,r6
 10202d8:	10007126 	beq	r2,zero,10204a0 <__adddf3+0x82c>
 10202dc:	4811883a 	mov	r8,r9
 10202e0:	3023883a 	mov	r17,r6
 10202e4:	3825883a 	mov	r18,r7
 10202e8:	0401ffc4 	movi	r16,2047
 10202ec:	003e8006 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10202f0:	4462b03a 	or	r17,r8,r17
 10202f4:	8822c03a 	cmpne	r17,r17,zero
 10202f8:	0007883a 	mov	r3,zero
 10202fc:	003f8b06 	br	102012c <__alt_data_end+0xff02012c>
 1020300:	0141ffc4 	movi	r5,2047
 1020304:	11403b26 	beq	r2,r5,10203f4 <__adddf3+0x780>
 1020308:	0109c83a 	sub	r4,zero,r4
 102030c:	42002034 	orhi	r8,r8,128
 1020310:	01400e04 	movi	r5,56
 1020314:	29006716 	blt	r5,r4,10204b4 <__adddf3+0x840>
 1020318:	014007c4 	movi	r5,31
 102031c:	29007016 	blt	r5,r4,10204e0 <__adddf3+0x86c>
 1020320:	01400804 	movi	r5,32
 1020324:	290bc83a 	sub	r5,r5,r4
 1020328:	4154983a 	sll	r10,r8,r5
 102032c:	890ed83a 	srl	r7,r17,r4
 1020330:	894a983a 	sll	r5,r17,r5
 1020334:	4108d83a 	srl	r4,r8,r4
 1020338:	51e2b03a 	or	r17,r10,r7
 102033c:	280ac03a 	cmpne	r5,r5,zero
 1020340:	8962b03a 	or	r17,r17,r5
 1020344:	89a3883a 	add	r17,r17,r6
 1020348:	2253883a 	add	r9,r4,r9
 102034c:	898d803a 	cmpltu	r6,r17,r6
 1020350:	3251883a 	add	r8,r6,r9
 1020354:	1021883a 	mov	r16,r2
 1020358:	003ee506 	br	101fef0 <__alt_data_end+0xff01fef0>
 102035c:	4984b03a 	or	r2,r9,r6
 1020360:	103e6326 	beq	r2,zero,101fcf0 <__alt_data_end+0xff01fcf0>
 1020364:	8987c83a 	sub	r3,r17,r6
 1020368:	88c9803a 	cmpltu	r4,r17,r3
 102036c:	4245c83a 	sub	r2,r8,r9
 1020370:	1105c83a 	sub	r2,r2,r4
 1020374:	1100202c 	andhi	r4,r2,128
 1020378:	203ebb26 	beq	r4,zero,101fe68 <__alt_data_end+0xff01fe68>
 102037c:	3463c83a 	sub	r17,r6,r17
 1020380:	4a07c83a 	sub	r3,r9,r8
 1020384:	344d803a 	cmpltu	r6,r6,r17
 1020388:	1991c83a 	sub	r8,r3,r6
 102038c:	3825883a 	mov	r18,r7
 1020390:	003e5706 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020394:	4984b03a 	or	r2,r9,r6
 1020398:	10002e26 	beq	r2,zero,1020454 <__adddf3+0x7e0>
 102039c:	4004d0fa 	srli	r2,r8,3
 10203a0:	8822d0fa 	srli	r17,r17,3
 10203a4:	4010977a 	slli	r8,r8,29
 10203a8:	10c0022c 	andhi	r3,r2,8
 10203ac:	4462b03a 	or	r17,r8,r17
 10203b0:	18000826 	beq	r3,zero,10203d4 <__adddf3+0x760>
 10203b4:	4808d0fa 	srli	r4,r9,3
 10203b8:	20c0022c 	andhi	r3,r4,8
 10203bc:	1800051e 	bne	r3,zero,10203d4 <__adddf3+0x760>
 10203c0:	300cd0fa 	srli	r6,r6,3
 10203c4:	4806977a 	slli	r3,r9,29
 10203c8:	2005883a 	mov	r2,r4
 10203cc:	3825883a 	mov	r18,r7
 10203d0:	19a2b03a 	or	r17,r3,r6
 10203d4:	8810d77a 	srli	r8,r17,29
 10203d8:	100490fa 	slli	r2,r2,3
 10203dc:	882290fa 	slli	r17,r17,3
 10203e0:	0401ffc4 	movi	r16,2047
 10203e4:	4090b03a 	or	r8,r8,r2
 10203e8:	003e4106 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10203ec:	0141ffc4 	movi	r5,2047
 10203f0:	117fc71e 	bne	r2,r5,1020310 <__alt_data_end+0xff020310>
 10203f4:	4811883a 	mov	r8,r9
 10203f8:	3023883a 	mov	r17,r6
 10203fc:	1021883a 	mov	r16,r2
 1020400:	003e3b06 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 1020404:	10002f26 	beq	r2,zero,10204c4 <__adddf3+0x850>
 1020408:	4984b03a 	or	r2,r9,r6
 102040c:	10001126 	beq	r2,zero,1020454 <__adddf3+0x7e0>
 1020410:	4004d0fa 	srli	r2,r8,3
 1020414:	8822d0fa 	srli	r17,r17,3
 1020418:	4010977a 	slli	r8,r8,29
 102041c:	10c0022c 	andhi	r3,r2,8
 1020420:	4462b03a 	or	r17,r8,r17
 1020424:	183feb26 	beq	r3,zero,10203d4 <__alt_data_end+0xff0203d4>
 1020428:	4808d0fa 	srli	r4,r9,3
 102042c:	20c0022c 	andhi	r3,r4,8
 1020430:	183fe81e 	bne	r3,zero,10203d4 <__alt_data_end+0xff0203d4>
 1020434:	300cd0fa 	srli	r6,r6,3
 1020438:	4806977a 	slli	r3,r9,29
 102043c:	2005883a 	mov	r2,r4
 1020440:	19a2b03a 	or	r17,r3,r6
 1020444:	003fe306 	br	10203d4 <__alt_data_end+0xff0203d4>
 1020448:	0011883a 	mov	r8,zero
 102044c:	0005883a 	mov	r2,zero
 1020450:	003e3f06 	br	101fd50 <__alt_data_end+0xff01fd50>
 1020454:	0401ffc4 	movi	r16,2047
 1020458:	003e2506 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 102045c:	0013883a 	mov	r9,zero
 1020460:	003f8406 	br	1020274 <__alt_data_end+0xff020274>
 1020464:	0005883a 	mov	r2,zero
 1020468:	0007883a 	mov	r3,zero
 102046c:	003e8906 	br	101fe94 <__alt_data_end+0xff01fe94>
 1020470:	197ff804 	addi	r5,r3,-32
 1020474:	01000804 	movi	r4,32
 1020478:	414ad83a 	srl	r5,r8,r5
 102047c:	19002426 	beq	r3,r4,1020510 <__adddf3+0x89c>
 1020480:	01001004 	movi	r4,64
 1020484:	20c7c83a 	sub	r3,r4,r3
 1020488:	40c6983a 	sll	r3,r8,r3
 102048c:	1c46b03a 	or	r3,r3,r17
 1020490:	1806c03a 	cmpne	r3,r3,zero
 1020494:	28e2b03a 	or	r17,r5,r3
 1020498:	0007883a 	mov	r3,zero
 102049c:	003f2306 	br	102012c <__alt_data_end+0xff02012c>
 10204a0:	0007883a 	mov	r3,zero
 10204a4:	5811883a 	mov	r8,r11
 10204a8:	00bfffc4 	movi	r2,-1
 10204ac:	0401ffc4 	movi	r16,2047
 10204b0:	003e7806 	br	101fe94 <__alt_data_end+0xff01fe94>
 10204b4:	4462b03a 	or	r17,r8,r17
 10204b8:	8822c03a 	cmpne	r17,r17,zero
 10204bc:	0009883a 	mov	r4,zero
 10204c0:	003fa006 	br	1020344 <__alt_data_end+0xff020344>
 10204c4:	4811883a 	mov	r8,r9
 10204c8:	3023883a 	mov	r17,r6
 10204cc:	0401ffc4 	movi	r16,2047
 10204d0:	003e0706 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10204d4:	4811883a 	mov	r8,r9
 10204d8:	3023883a 	mov	r17,r6
 10204dc:	003e0406 	br	101fcf0 <__alt_data_end+0xff01fcf0>
 10204e0:	21fff804 	addi	r7,r4,-32
 10204e4:	01400804 	movi	r5,32
 10204e8:	41ced83a 	srl	r7,r8,r7
 10204ec:	21400a26 	beq	r4,r5,1020518 <__adddf3+0x8a4>
 10204f0:	01401004 	movi	r5,64
 10204f4:	2909c83a 	sub	r4,r5,r4
 10204f8:	4108983a 	sll	r4,r8,r4
 10204fc:	2448b03a 	or	r4,r4,r17
 1020500:	2008c03a 	cmpne	r4,r4,zero
 1020504:	3922b03a 	or	r17,r7,r4
 1020508:	0009883a 	mov	r4,zero
 102050c:	003f8d06 	br	1020344 <__alt_data_end+0xff020344>
 1020510:	0007883a 	mov	r3,zero
 1020514:	003fdd06 	br	102048c <__alt_data_end+0xff02048c>
 1020518:	0009883a 	mov	r4,zero
 102051c:	003ff706 	br	10204fc <__alt_data_end+0xff0204fc>

01020520 <__divdf3>:
 1020520:	defff204 	addi	sp,sp,-56
 1020524:	dd400915 	stw	r21,36(sp)
 1020528:	282ad53a 	srli	r21,r5,20
 102052c:	dd000815 	stw	r20,32(sp)
 1020530:	2828d7fa 	srli	r20,r5,31
 1020534:	dc000415 	stw	r16,16(sp)
 1020538:	04000434 	movhi	r16,16
 102053c:	df000c15 	stw	fp,48(sp)
 1020540:	843fffc4 	addi	r16,r16,-1
 1020544:	dfc00d15 	stw	ra,52(sp)
 1020548:	ddc00b15 	stw	r23,44(sp)
 102054c:	dd800a15 	stw	r22,40(sp)
 1020550:	dcc00715 	stw	r19,28(sp)
 1020554:	dc800615 	stw	r18,24(sp)
 1020558:	dc400515 	stw	r17,20(sp)
 102055c:	ad41ffcc 	andi	r21,r21,2047
 1020560:	2c20703a 	and	r16,r5,r16
 1020564:	a7003fcc 	andi	fp,r20,255
 1020568:	a8006126 	beq	r21,zero,10206f0 <__divdf3+0x1d0>
 102056c:	0081ffc4 	movi	r2,2047
 1020570:	2025883a 	mov	r18,r4
 1020574:	a8803726 	beq	r21,r2,1020654 <__divdf3+0x134>
 1020578:	80800434 	orhi	r2,r16,16
 102057c:	100490fa 	slli	r2,r2,3
 1020580:	2020d77a 	srli	r16,r4,29
 1020584:	202490fa 	slli	r18,r4,3
 1020588:	ad7f0044 	addi	r21,r21,-1023
 102058c:	80a0b03a 	or	r16,r16,r2
 1020590:	0027883a 	mov	r19,zero
 1020594:	0013883a 	mov	r9,zero
 1020598:	3804d53a 	srli	r2,r7,20
 102059c:	382cd7fa 	srli	r22,r7,31
 10205a0:	04400434 	movhi	r17,16
 10205a4:	8c7fffc4 	addi	r17,r17,-1
 10205a8:	1081ffcc 	andi	r2,r2,2047
 10205ac:	3011883a 	mov	r8,r6
 10205b0:	3c62703a 	and	r17,r7,r17
 10205b4:	b5c03fcc 	andi	r23,r22,255
 10205b8:	10006c26 	beq	r2,zero,102076c <__divdf3+0x24c>
 10205bc:	00c1ffc4 	movi	r3,2047
 10205c0:	10c06426 	beq	r2,r3,1020754 <__divdf3+0x234>
 10205c4:	88c00434 	orhi	r3,r17,16
 10205c8:	180690fa 	slli	r3,r3,3
 10205cc:	3022d77a 	srli	r17,r6,29
 10205d0:	301090fa 	slli	r8,r6,3
 10205d4:	10bf0044 	addi	r2,r2,-1023
 10205d8:	88e2b03a 	or	r17,r17,r3
 10205dc:	000f883a 	mov	r7,zero
 10205e0:	a58cf03a 	xor	r6,r20,r22
 10205e4:	3cc8b03a 	or	r4,r7,r19
 10205e8:	a8abc83a 	sub	r21,r21,r2
 10205ec:	008003c4 	movi	r2,15
 10205f0:	3007883a 	mov	r3,r6
 10205f4:	34c03fcc 	andi	r19,r6,255
 10205f8:	11009036 	bltu	r2,r4,102083c <__divdf3+0x31c>
 10205fc:	200890ba 	slli	r4,r4,2
 1020600:	008040b4 	movhi	r2,258
 1020604:	10818504 	addi	r2,r2,1556
 1020608:	2089883a 	add	r4,r4,r2
 102060c:	20800017 	ldw	r2,0(r4)
 1020610:	1000683a 	jmp	r2
 1020614:	0102083c 	xorhi	r4,zero,2080
 1020618:	0102068c 	andi	r4,zero,2074
 102061c:	0102082c 	andhi	r4,zero,2080
 1020620:	01020680 	call	102068 <__alt_mem_sdram-0xefdf98>
 1020624:	0102082c 	andhi	r4,zero,2080
 1020628:	01020800 	call	102080 <__alt_mem_sdram-0xefdf80>
 102062c:	0102082c 	andhi	r4,zero,2080
 1020630:	01020680 	call	102068 <__alt_mem_sdram-0xefdf98>
 1020634:	0102068c 	andi	r4,zero,2074
 1020638:	0102068c 	andi	r4,zero,2074
 102063c:	01020800 	call	102080 <__alt_mem_sdram-0xefdf80>
 1020640:	01020680 	call	102068 <__alt_mem_sdram-0xefdf98>
 1020644:	01020670 	cmpltui	r4,zero,2073
 1020648:	01020670 	cmpltui	r4,zero,2073
 102064c:	01020670 	cmpltui	r4,zero,2073
 1020650:	01020b20 	cmpeqi	r4,zero,2092
 1020654:	2404b03a 	or	r2,r4,r16
 1020658:	1000661e 	bne	r2,zero,10207f4 <__divdf3+0x2d4>
 102065c:	04c00204 	movi	r19,8
 1020660:	0021883a 	mov	r16,zero
 1020664:	0025883a 	mov	r18,zero
 1020668:	02400084 	movi	r9,2
 102066c:	003fca06 	br	1020598 <__alt_data_end+0xff020598>
 1020670:	8023883a 	mov	r17,r16
 1020674:	9011883a 	mov	r8,r18
 1020678:	e02f883a 	mov	r23,fp
 102067c:	480f883a 	mov	r7,r9
 1020680:	00800084 	movi	r2,2
 1020684:	3881311e 	bne	r7,r2,1020b4c <__divdf3+0x62c>
 1020688:	b827883a 	mov	r19,r23
 102068c:	98c0004c 	andi	r3,r19,1
 1020690:	0081ffc4 	movi	r2,2047
 1020694:	000b883a 	mov	r5,zero
 1020698:	0025883a 	mov	r18,zero
 102069c:	1004953a 	slli	r2,r2,20
 10206a0:	18c03fcc 	andi	r3,r3,255
 10206a4:	04400434 	movhi	r17,16
 10206a8:	8c7fffc4 	addi	r17,r17,-1
 10206ac:	180697fa 	slli	r3,r3,31
 10206b0:	2c4a703a 	and	r5,r5,r17
 10206b4:	288ab03a 	or	r5,r5,r2
 10206b8:	28c6b03a 	or	r3,r5,r3
 10206bc:	9005883a 	mov	r2,r18
 10206c0:	dfc00d17 	ldw	ra,52(sp)
 10206c4:	df000c17 	ldw	fp,48(sp)
 10206c8:	ddc00b17 	ldw	r23,44(sp)
 10206cc:	dd800a17 	ldw	r22,40(sp)
 10206d0:	dd400917 	ldw	r21,36(sp)
 10206d4:	dd000817 	ldw	r20,32(sp)
 10206d8:	dcc00717 	ldw	r19,28(sp)
 10206dc:	dc800617 	ldw	r18,24(sp)
 10206e0:	dc400517 	ldw	r17,20(sp)
 10206e4:	dc000417 	ldw	r16,16(sp)
 10206e8:	dec00e04 	addi	sp,sp,56
 10206ec:	f800283a 	ret
 10206f0:	2404b03a 	or	r2,r4,r16
 10206f4:	2027883a 	mov	r19,r4
 10206f8:	10003926 	beq	r2,zero,10207e0 <__divdf3+0x2c0>
 10206fc:	80012e26 	beq	r16,zero,1020bb8 <__divdf3+0x698>
 1020700:	8009883a 	mov	r4,r16
 1020704:	d9800315 	stw	r6,12(sp)
 1020708:	d9c00215 	stw	r7,8(sp)
 102070c:	10222780 	call	1022278 <__clzsi2>
 1020710:	d9800317 	ldw	r6,12(sp)
 1020714:	d9c00217 	ldw	r7,8(sp)
 1020718:	113ffd44 	addi	r4,r2,-11
 102071c:	00c00704 	movi	r3,28
 1020720:	19012116 	blt	r3,r4,1020ba8 <__divdf3+0x688>
 1020724:	00c00744 	movi	r3,29
 1020728:	147ffe04 	addi	r17,r2,-8
 102072c:	1907c83a 	sub	r3,r3,r4
 1020730:	8460983a 	sll	r16,r16,r17
 1020734:	98c6d83a 	srl	r3,r19,r3
 1020738:	9c64983a 	sll	r18,r19,r17
 102073c:	1c20b03a 	or	r16,r3,r16
 1020740:	1080fcc4 	addi	r2,r2,1011
 1020744:	00abc83a 	sub	r21,zero,r2
 1020748:	0027883a 	mov	r19,zero
 102074c:	0013883a 	mov	r9,zero
 1020750:	003f9106 	br	1020598 <__alt_data_end+0xff020598>
 1020754:	3446b03a 	or	r3,r6,r17
 1020758:	18001f1e 	bne	r3,zero,10207d8 <__divdf3+0x2b8>
 102075c:	0023883a 	mov	r17,zero
 1020760:	0011883a 	mov	r8,zero
 1020764:	01c00084 	movi	r7,2
 1020768:	003f9d06 	br	10205e0 <__alt_data_end+0xff0205e0>
 102076c:	3446b03a 	or	r3,r6,r17
 1020770:	18001526 	beq	r3,zero,10207c8 <__divdf3+0x2a8>
 1020774:	88011b26 	beq	r17,zero,1020be4 <__divdf3+0x6c4>
 1020778:	8809883a 	mov	r4,r17
 102077c:	d9800315 	stw	r6,12(sp)
 1020780:	da400115 	stw	r9,4(sp)
 1020784:	10222780 	call	1022278 <__clzsi2>
 1020788:	d9800317 	ldw	r6,12(sp)
 102078c:	da400117 	ldw	r9,4(sp)
 1020790:	113ffd44 	addi	r4,r2,-11
 1020794:	00c00704 	movi	r3,28
 1020798:	19010e16 	blt	r3,r4,1020bd4 <__divdf3+0x6b4>
 102079c:	00c00744 	movi	r3,29
 10207a0:	123ffe04 	addi	r8,r2,-8
 10207a4:	1907c83a 	sub	r3,r3,r4
 10207a8:	8a22983a 	sll	r17,r17,r8
 10207ac:	30c6d83a 	srl	r3,r6,r3
 10207b0:	3210983a 	sll	r8,r6,r8
 10207b4:	1c62b03a 	or	r17,r3,r17
 10207b8:	1080fcc4 	addi	r2,r2,1011
 10207bc:	0085c83a 	sub	r2,zero,r2
 10207c0:	000f883a 	mov	r7,zero
 10207c4:	003f8606 	br	10205e0 <__alt_data_end+0xff0205e0>
 10207c8:	0023883a 	mov	r17,zero
 10207cc:	0011883a 	mov	r8,zero
 10207d0:	01c00044 	movi	r7,1
 10207d4:	003f8206 	br	10205e0 <__alt_data_end+0xff0205e0>
 10207d8:	01c000c4 	movi	r7,3
 10207dc:	003f8006 	br	10205e0 <__alt_data_end+0xff0205e0>
 10207e0:	04c00104 	movi	r19,4
 10207e4:	0021883a 	mov	r16,zero
 10207e8:	0025883a 	mov	r18,zero
 10207ec:	02400044 	movi	r9,1
 10207f0:	003f6906 	br	1020598 <__alt_data_end+0xff020598>
 10207f4:	04c00304 	movi	r19,12
 10207f8:	024000c4 	movi	r9,3
 10207fc:	003f6606 	br	1020598 <__alt_data_end+0xff020598>
 1020800:	01400434 	movhi	r5,16
 1020804:	0007883a 	mov	r3,zero
 1020808:	297fffc4 	addi	r5,r5,-1
 102080c:	04bfffc4 	movi	r18,-1
 1020810:	0081ffc4 	movi	r2,2047
 1020814:	003fa106 	br	102069c <__alt_data_end+0xff02069c>
 1020818:	00c00044 	movi	r3,1
 102081c:	1887c83a 	sub	r3,r3,r2
 1020820:	01000e04 	movi	r4,56
 1020824:	20c1210e 	bge	r4,r3,1020cac <__divdf3+0x78c>
 1020828:	98c0004c 	andi	r3,r19,1
 102082c:	0005883a 	mov	r2,zero
 1020830:	000b883a 	mov	r5,zero
 1020834:	0025883a 	mov	r18,zero
 1020838:	003f9806 	br	102069c <__alt_data_end+0xff02069c>
 102083c:	8c00fd36 	bltu	r17,r16,1020c34 <__divdf3+0x714>
 1020840:	8440fb26 	beq	r16,r17,1020c30 <__divdf3+0x710>
 1020844:	8007883a 	mov	r3,r16
 1020848:	ad7fffc4 	addi	r21,r21,-1
 102084c:	0021883a 	mov	r16,zero
 1020850:	4004d63a 	srli	r2,r8,24
 1020854:	8822923a 	slli	r17,r17,8
 1020858:	1809883a 	mov	r4,r3
 102085c:	402c923a 	slli	r22,r8,8
 1020860:	88b8b03a 	or	fp,r17,r2
 1020864:	e028d43a 	srli	r20,fp,16
 1020868:	d8c00015 	stw	r3,0(sp)
 102086c:	e5ffffcc 	andi	r23,fp,65535
 1020870:	a00b883a 	mov	r5,r20
 1020874:	101fbb80 	call	101fbb8 <__udivsi3>
 1020878:	d8c00017 	ldw	r3,0(sp)
 102087c:	a00b883a 	mov	r5,r20
 1020880:	d8800315 	stw	r2,12(sp)
 1020884:	1809883a 	mov	r4,r3
 1020888:	101fc1c0 	call	101fc1c <__umodsi3>
 102088c:	d9800317 	ldw	r6,12(sp)
 1020890:	1006943a 	slli	r3,r2,16
 1020894:	9004d43a 	srli	r2,r18,16
 1020898:	b9a3383a 	mul	r17,r23,r6
 102089c:	10c4b03a 	or	r2,r2,r3
 10208a0:	1440062e 	bgeu	r2,r17,10208bc <__divdf3+0x39c>
 10208a4:	1705883a 	add	r2,r2,fp
 10208a8:	30ffffc4 	addi	r3,r6,-1
 10208ac:	1700ee36 	bltu	r2,fp,1020c68 <__divdf3+0x748>
 10208b0:	1440ed2e 	bgeu	r2,r17,1020c68 <__divdf3+0x748>
 10208b4:	31bfff84 	addi	r6,r6,-2
 10208b8:	1705883a 	add	r2,r2,fp
 10208bc:	1463c83a 	sub	r17,r2,r17
 10208c0:	a00b883a 	mov	r5,r20
 10208c4:	8809883a 	mov	r4,r17
 10208c8:	d9800315 	stw	r6,12(sp)
 10208cc:	101fbb80 	call	101fbb8 <__udivsi3>
 10208d0:	a00b883a 	mov	r5,r20
 10208d4:	8809883a 	mov	r4,r17
 10208d8:	d8800215 	stw	r2,8(sp)
 10208dc:	101fc1c0 	call	101fc1c <__umodsi3>
 10208e0:	d9c00217 	ldw	r7,8(sp)
 10208e4:	1004943a 	slli	r2,r2,16
 10208e8:	94bfffcc 	andi	r18,r18,65535
 10208ec:	b9d1383a 	mul	r8,r23,r7
 10208f0:	90a4b03a 	or	r18,r18,r2
 10208f4:	d9800317 	ldw	r6,12(sp)
 10208f8:	9200062e 	bgeu	r18,r8,1020914 <__divdf3+0x3f4>
 10208fc:	9725883a 	add	r18,r18,fp
 1020900:	38bfffc4 	addi	r2,r7,-1
 1020904:	9700d636 	bltu	r18,fp,1020c60 <__divdf3+0x740>
 1020908:	9200d52e 	bgeu	r18,r8,1020c60 <__divdf3+0x740>
 102090c:	39ffff84 	addi	r7,r7,-2
 1020910:	9725883a 	add	r18,r18,fp
 1020914:	3004943a 	slli	r2,r6,16
 1020918:	b012d43a 	srli	r9,r22,16
 102091c:	b1bfffcc 	andi	r6,r22,65535
 1020920:	11e2b03a 	or	r17,r2,r7
 1020924:	8806d43a 	srli	r3,r17,16
 1020928:	893fffcc 	andi	r4,r17,65535
 102092c:	218b383a 	mul	r5,r4,r6
 1020930:	30c5383a 	mul	r2,r6,r3
 1020934:	2249383a 	mul	r4,r4,r9
 1020938:	280ed43a 	srli	r7,r5,16
 102093c:	9225c83a 	sub	r18,r18,r8
 1020940:	2089883a 	add	r4,r4,r2
 1020944:	3909883a 	add	r4,r7,r4
 1020948:	1a47383a 	mul	r3,r3,r9
 102094c:	2080022e 	bgeu	r4,r2,1020958 <__divdf3+0x438>
 1020950:	00800074 	movhi	r2,1
 1020954:	1887883a 	add	r3,r3,r2
 1020958:	2004d43a 	srli	r2,r4,16
 102095c:	2008943a 	slli	r4,r4,16
 1020960:	297fffcc 	andi	r5,r5,65535
 1020964:	10c7883a 	add	r3,r2,r3
 1020968:	2149883a 	add	r4,r4,r5
 102096c:	90c0a536 	bltu	r18,r3,1020c04 <__divdf3+0x6e4>
 1020970:	90c0bf26 	beq	r18,r3,1020c70 <__divdf3+0x750>
 1020974:	90c7c83a 	sub	r3,r18,r3
 1020978:	810fc83a 	sub	r7,r16,r4
 102097c:	81e5803a 	cmpltu	r18,r16,r7
 1020980:	1ca5c83a 	sub	r18,r3,r18
 1020984:	e480c126 	beq	fp,r18,1020c8c <__divdf3+0x76c>
 1020988:	a00b883a 	mov	r5,r20
 102098c:	9009883a 	mov	r4,r18
 1020990:	d9800315 	stw	r6,12(sp)
 1020994:	d9c00215 	stw	r7,8(sp)
 1020998:	da400115 	stw	r9,4(sp)
 102099c:	101fbb80 	call	101fbb8 <__udivsi3>
 10209a0:	a00b883a 	mov	r5,r20
 10209a4:	9009883a 	mov	r4,r18
 10209a8:	d8800015 	stw	r2,0(sp)
 10209ac:	101fc1c0 	call	101fc1c <__umodsi3>
 10209b0:	d9c00217 	ldw	r7,8(sp)
 10209b4:	da000017 	ldw	r8,0(sp)
 10209b8:	1006943a 	slli	r3,r2,16
 10209bc:	3804d43a 	srli	r2,r7,16
 10209c0:	ba21383a 	mul	r16,r23,r8
 10209c4:	d9800317 	ldw	r6,12(sp)
 10209c8:	10c4b03a 	or	r2,r2,r3
 10209cc:	da400117 	ldw	r9,4(sp)
 10209d0:	1400062e 	bgeu	r2,r16,10209ec <__divdf3+0x4cc>
 10209d4:	1705883a 	add	r2,r2,fp
 10209d8:	40ffffc4 	addi	r3,r8,-1
 10209dc:	1700ad36 	bltu	r2,fp,1020c94 <__divdf3+0x774>
 10209e0:	1400ac2e 	bgeu	r2,r16,1020c94 <__divdf3+0x774>
 10209e4:	423fff84 	addi	r8,r8,-2
 10209e8:	1705883a 	add	r2,r2,fp
 10209ec:	1421c83a 	sub	r16,r2,r16
 10209f0:	a00b883a 	mov	r5,r20
 10209f4:	8009883a 	mov	r4,r16
 10209f8:	d9800315 	stw	r6,12(sp)
 10209fc:	d9c00215 	stw	r7,8(sp)
 1020a00:	da000015 	stw	r8,0(sp)
 1020a04:	da400115 	stw	r9,4(sp)
 1020a08:	101fbb80 	call	101fbb8 <__udivsi3>
 1020a0c:	8009883a 	mov	r4,r16
 1020a10:	a00b883a 	mov	r5,r20
 1020a14:	1025883a 	mov	r18,r2
 1020a18:	101fc1c0 	call	101fc1c <__umodsi3>
 1020a1c:	d9c00217 	ldw	r7,8(sp)
 1020a20:	1004943a 	slli	r2,r2,16
 1020a24:	bcaf383a 	mul	r23,r23,r18
 1020a28:	393fffcc 	andi	r4,r7,65535
 1020a2c:	2088b03a 	or	r4,r4,r2
 1020a30:	d9800317 	ldw	r6,12(sp)
 1020a34:	da000017 	ldw	r8,0(sp)
 1020a38:	da400117 	ldw	r9,4(sp)
 1020a3c:	25c0062e 	bgeu	r4,r23,1020a58 <__divdf3+0x538>
 1020a40:	2709883a 	add	r4,r4,fp
 1020a44:	90bfffc4 	addi	r2,r18,-1
 1020a48:	27009436 	bltu	r4,fp,1020c9c <__divdf3+0x77c>
 1020a4c:	25c0932e 	bgeu	r4,r23,1020c9c <__divdf3+0x77c>
 1020a50:	94bfff84 	addi	r18,r18,-2
 1020a54:	2709883a 	add	r4,r4,fp
 1020a58:	4004943a 	slli	r2,r8,16
 1020a5c:	25efc83a 	sub	r23,r4,r23
 1020a60:	1490b03a 	or	r8,r2,r18
 1020a64:	4008d43a 	srli	r4,r8,16
 1020a68:	40ffffcc 	andi	r3,r8,65535
 1020a6c:	30c5383a 	mul	r2,r6,r3
 1020a70:	1a47383a 	mul	r3,r3,r9
 1020a74:	310d383a 	mul	r6,r6,r4
 1020a78:	100ad43a 	srli	r5,r2,16
 1020a7c:	4913383a 	mul	r9,r9,r4
 1020a80:	1987883a 	add	r3,r3,r6
 1020a84:	28c7883a 	add	r3,r5,r3
 1020a88:	1980022e 	bgeu	r3,r6,1020a94 <__divdf3+0x574>
 1020a8c:	01000074 	movhi	r4,1
 1020a90:	4913883a 	add	r9,r9,r4
 1020a94:	1808d43a 	srli	r4,r3,16
 1020a98:	1806943a 	slli	r3,r3,16
 1020a9c:	10bfffcc 	andi	r2,r2,65535
 1020aa0:	2253883a 	add	r9,r4,r9
 1020aa4:	1887883a 	add	r3,r3,r2
 1020aa8:	ba403836 	bltu	r23,r9,1020b8c <__divdf3+0x66c>
 1020aac:	ba403626 	beq	r23,r9,1020b88 <__divdf3+0x668>
 1020ab0:	42000054 	ori	r8,r8,1
 1020ab4:	a880ffc4 	addi	r2,r21,1023
 1020ab8:	00bf570e 	bge	zero,r2,1020818 <__alt_data_end+0xff020818>
 1020abc:	40c001cc 	andi	r3,r8,7
 1020ac0:	18000726 	beq	r3,zero,1020ae0 <__divdf3+0x5c0>
 1020ac4:	40c003cc 	andi	r3,r8,15
 1020ac8:	01000104 	movi	r4,4
 1020acc:	19000426 	beq	r3,r4,1020ae0 <__divdf3+0x5c0>
 1020ad0:	4107883a 	add	r3,r8,r4
 1020ad4:	1a11803a 	cmpltu	r8,r3,r8
 1020ad8:	8a23883a 	add	r17,r17,r8
 1020adc:	1811883a 	mov	r8,r3
 1020ae0:	88c0402c 	andhi	r3,r17,256
 1020ae4:	18000426 	beq	r3,zero,1020af8 <__divdf3+0x5d8>
 1020ae8:	00ffc034 	movhi	r3,65280
 1020aec:	18ffffc4 	addi	r3,r3,-1
 1020af0:	a8810004 	addi	r2,r21,1024
 1020af4:	88e2703a 	and	r17,r17,r3
 1020af8:	00c1ff84 	movi	r3,2046
 1020afc:	18bee316 	blt	r3,r2,102068c <__alt_data_end+0xff02068c>
 1020b00:	8824977a 	slli	r18,r17,29
 1020b04:	4010d0fa 	srli	r8,r8,3
 1020b08:	8822927a 	slli	r17,r17,9
 1020b0c:	1081ffcc 	andi	r2,r2,2047
 1020b10:	9224b03a 	or	r18,r18,r8
 1020b14:	880ad33a 	srli	r5,r17,12
 1020b18:	98c0004c 	andi	r3,r19,1
 1020b1c:	003edf06 	br	102069c <__alt_data_end+0xff02069c>
 1020b20:	8080022c 	andhi	r2,r16,8
 1020b24:	10001226 	beq	r2,zero,1020b70 <__divdf3+0x650>
 1020b28:	8880022c 	andhi	r2,r17,8
 1020b2c:	1000101e 	bne	r2,zero,1020b70 <__divdf3+0x650>
 1020b30:	00800434 	movhi	r2,16
 1020b34:	89400234 	orhi	r5,r17,8
 1020b38:	10bfffc4 	addi	r2,r2,-1
 1020b3c:	b007883a 	mov	r3,r22
 1020b40:	288a703a 	and	r5,r5,r2
 1020b44:	4025883a 	mov	r18,r8
 1020b48:	003f3106 	br	1020810 <__alt_data_end+0xff020810>
 1020b4c:	008000c4 	movi	r2,3
 1020b50:	3880a626 	beq	r7,r2,1020dec <__divdf3+0x8cc>
 1020b54:	00800044 	movi	r2,1
 1020b58:	3880521e 	bne	r7,r2,1020ca4 <__divdf3+0x784>
 1020b5c:	b807883a 	mov	r3,r23
 1020b60:	0005883a 	mov	r2,zero
 1020b64:	000b883a 	mov	r5,zero
 1020b68:	0025883a 	mov	r18,zero
 1020b6c:	003ecb06 	br	102069c <__alt_data_end+0xff02069c>
 1020b70:	00800434 	movhi	r2,16
 1020b74:	81400234 	orhi	r5,r16,8
 1020b78:	10bfffc4 	addi	r2,r2,-1
 1020b7c:	a007883a 	mov	r3,r20
 1020b80:	288a703a 	and	r5,r5,r2
 1020b84:	003f2206 	br	1020810 <__alt_data_end+0xff020810>
 1020b88:	183fca26 	beq	r3,zero,1020ab4 <__alt_data_end+0xff020ab4>
 1020b8c:	e5ef883a 	add	r23,fp,r23
 1020b90:	40bfffc4 	addi	r2,r8,-1
 1020b94:	bf00392e 	bgeu	r23,fp,1020c7c <__divdf3+0x75c>
 1020b98:	1011883a 	mov	r8,r2
 1020b9c:	ba7fc41e 	bne	r23,r9,1020ab0 <__alt_data_end+0xff020ab0>
 1020ba0:	b0ffc31e 	bne	r22,r3,1020ab0 <__alt_data_end+0xff020ab0>
 1020ba4:	003fc306 	br	1020ab4 <__alt_data_end+0xff020ab4>
 1020ba8:	143ff604 	addi	r16,r2,-40
 1020bac:	9c20983a 	sll	r16,r19,r16
 1020bb0:	0025883a 	mov	r18,zero
 1020bb4:	003ee206 	br	1020740 <__alt_data_end+0xff020740>
 1020bb8:	d9800315 	stw	r6,12(sp)
 1020bbc:	d9c00215 	stw	r7,8(sp)
 1020bc0:	10222780 	call	1022278 <__clzsi2>
 1020bc4:	10800804 	addi	r2,r2,32
 1020bc8:	d9c00217 	ldw	r7,8(sp)
 1020bcc:	d9800317 	ldw	r6,12(sp)
 1020bd0:	003ed106 	br	1020718 <__alt_data_end+0xff020718>
 1020bd4:	147ff604 	addi	r17,r2,-40
 1020bd8:	3462983a 	sll	r17,r6,r17
 1020bdc:	0011883a 	mov	r8,zero
 1020be0:	003ef506 	br	10207b8 <__alt_data_end+0xff0207b8>
 1020be4:	3009883a 	mov	r4,r6
 1020be8:	d9800315 	stw	r6,12(sp)
 1020bec:	da400115 	stw	r9,4(sp)
 1020bf0:	10222780 	call	1022278 <__clzsi2>
 1020bf4:	10800804 	addi	r2,r2,32
 1020bf8:	da400117 	ldw	r9,4(sp)
 1020bfc:	d9800317 	ldw	r6,12(sp)
 1020c00:	003ee306 	br	1020790 <__alt_data_end+0xff020790>
 1020c04:	85a1883a 	add	r16,r16,r22
 1020c08:	8585803a 	cmpltu	r2,r16,r22
 1020c0c:	1705883a 	add	r2,r2,fp
 1020c10:	14a5883a 	add	r18,r2,r18
 1020c14:	88bfffc4 	addi	r2,r17,-1
 1020c18:	e4800c2e 	bgeu	fp,r18,1020c4c <__divdf3+0x72c>
 1020c1c:	90c03e36 	bltu	r18,r3,1020d18 <__divdf3+0x7f8>
 1020c20:	1c806926 	beq	r3,r18,1020dc8 <__divdf3+0x8a8>
 1020c24:	90c7c83a 	sub	r3,r18,r3
 1020c28:	1023883a 	mov	r17,r2
 1020c2c:	003f5206 	br	1020978 <__alt_data_end+0xff020978>
 1020c30:	923f0436 	bltu	r18,r8,1020844 <__alt_data_end+0xff020844>
 1020c34:	800897fa 	slli	r4,r16,31
 1020c38:	9004d07a 	srli	r2,r18,1
 1020c3c:	8006d07a 	srli	r3,r16,1
 1020c40:	902097fa 	slli	r16,r18,31
 1020c44:	20a4b03a 	or	r18,r4,r2
 1020c48:	003f0106 	br	1020850 <__alt_data_end+0xff020850>
 1020c4c:	e4bff51e 	bne	fp,r18,1020c24 <__alt_data_end+0xff020c24>
 1020c50:	85bff22e 	bgeu	r16,r22,1020c1c <__alt_data_end+0xff020c1c>
 1020c54:	e0c7c83a 	sub	r3,fp,r3
 1020c58:	1023883a 	mov	r17,r2
 1020c5c:	003f4606 	br	1020978 <__alt_data_end+0xff020978>
 1020c60:	100f883a 	mov	r7,r2
 1020c64:	003f2b06 	br	1020914 <__alt_data_end+0xff020914>
 1020c68:	180d883a 	mov	r6,r3
 1020c6c:	003f1306 	br	10208bc <__alt_data_end+0xff0208bc>
 1020c70:	813fe436 	bltu	r16,r4,1020c04 <__alt_data_end+0xff020c04>
 1020c74:	0007883a 	mov	r3,zero
 1020c78:	003f3f06 	br	1020978 <__alt_data_end+0xff020978>
 1020c7c:	ba402c36 	bltu	r23,r9,1020d30 <__divdf3+0x810>
 1020c80:	4dc05426 	beq	r9,r23,1020dd4 <__divdf3+0x8b4>
 1020c84:	1011883a 	mov	r8,r2
 1020c88:	003f8906 	br	1020ab0 <__alt_data_end+0xff020ab0>
 1020c8c:	023fffc4 	movi	r8,-1
 1020c90:	003f8806 	br	1020ab4 <__alt_data_end+0xff020ab4>
 1020c94:	1811883a 	mov	r8,r3
 1020c98:	003f5406 	br	10209ec <__alt_data_end+0xff0209ec>
 1020c9c:	1025883a 	mov	r18,r2
 1020ca0:	003f6d06 	br	1020a58 <__alt_data_end+0xff020a58>
 1020ca4:	b827883a 	mov	r19,r23
 1020ca8:	003f8206 	br	1020ab4 <__alt_data_end+0xff020ab4>
 1020cac:	010007c4 	movi	r4,31
 1020cb0:	20c02616 	blt	r4,r3,1020d4c <__divdf3+0x82c>
 1020cb4:	00800804 	movi	r2,32
 1020cb8:	10c5c83a 	sub	r2,r2,r3
 1020cbc:	888a983a 	sll	r5,r17,r2
 1020cc0:	40c8d83a 	srl	r4,r8,r3
 1020cc4:	4084983a 	sll	r2,r8,r2
 1020cc8:	88e2d83a 	srl	r17,r17,r3
 1020ccc:	2906b03a 	or	r3,r5,r4
 1020cd0:	1004c03a 	cmpne	r2,r2,zero
 1020cd4:	1886b03a 	or	r3,r3,r2
 1020cd8:	188001cc 	andi	r2,r3,7
 1020cdc:	10000726 	beq	r2,zero,1020cfc <__divdf3+0x7dc>
 1020ce0:	188003cc 	andi	r2,r3,15
 1020ce4:	01000104 	movi	r4,4
 1020ce8:	11000426 	beq	r2,r4,1020cfc <__divdf3+0x7dc>
 1020cec:	1805883a 	mov	r2,r3
 1020cf0:	10c00104 	addi	r3,r2,4
 1020cf4:	1885803a 	cmpltu	r2,r3,r2
 1020cf8:	88a3883a 	add	r17,r17,r2
 1020cfc:	8880202c 	andhi	r2,r17,128
 1020d00:	10002726 	beq	r2,zero,1020da0 <__divdf3+0x880>
 1020d04:	98c0004c 	andi	r3,r19,1
 1020d08:	00800044 	movi	r2,1
 1020d0c:	000b883a 	mov	r5,zero
 1020d10:	0025883a 	mov	r18,zero
 1020d14:	003e6106 	br	102069c <__alt_data_end+0xff02069c>
 1020d18:	85a1883a 	add	r16,r16,r22
 1020d1c:	8585803a 	cmpltu	r2,r16,r22
 1020d20:	1705883a 	add	r2,r2,fp
 1020d24:	14a5883a 	add	r18,r2,r18
 1020d28:	8c7fff84 	addi	r17,r17,-2
 1020d2c:	003f1106 	br	1020974 <__alt_data_end+0xff020974>
 1020d30:	b589883a 	add	r4,r22,r22
 1020d34:	25ad803a 	cmpltu	r22,r4,r22
 1020d38:	b739883a 	add	fp,r22,fp
 1020d3c:	40bfff84 	addi	r2,r8,-2
 1020d40:	bf2f883a 	add	r23,r23,fp
 1020d44:	202d883a 	mov	r22,r4
 1020d48:	003f9306 	br	1020b98 <__alt_data_end+0xff020b98>
 1020d4c:	013ff844 	movi	r4,-31
 1020d50:	2085c83a 	sub	r2,r4,r2
 1020d54:	8888d83a 	srl	r4,r17,r2
 1020d58:	00800804 	movi	r2,32
 1020d5c:	18802126 	beq	r3,r2,1020de4 <__divdf3+0x8c4>
 1020d60:	00801004 	movi	r2,64
 1020d64:	10c5c83a 	sub	r2,r2,r3
 1020d68:	8884983a 	sll	r2,r17,r2
 1020d6c:	1204b03a 	or	r2,r2,r8
 1020d70:	1004c03a 	cmpne	r2,r2,zero
 1020d74:	2084b03a 	or	r2,r4,r2
 1020d78:	144001cc 	andi	r17,r2,7
 1020d7c:	88000d1e 	bne	r17,zero,1020db4 <__divdf3+0x894>
 1020d80:	000b883a 	mov	r5,zero
 1020d84:	1024d0fa 	srli	r18,r2,3
 1020d88:	98c0004c 	andi	r3,r19,1
 1020d8c:	0005883a 	mov	r2,zero
 1020d90:	9464b03a 	or	r18,r18,r17
 1020d94:	003e4106 	br	102069c <__alt_data_end+0xff02069c>
 1020d98:	1007883a 	mov	r3,r2
 1020d9c:	0023883a 	mov	r17,zero
 1020da0:	880a927a 	slli	r5,r17,9
 1020da4:	1805883a 	mov	r2,r3
 1020da8:	8822977a 	slli	r17,r17,29
 1020dac:	280ad33a 	srli	r5,r5,12
 1020db0:	003ff406 	br	1020d84 <__alt_data_end+0xff020d84>
 1020db4:	10c003cc 	andi	r3,r2,15
 1020db8:	01000104 	movi	r4,4
 1020dbc:	193ff626 	beq	r3,r4,1020d98 <__alt_data_end+0xff020d98>
 1020dc0:	0023883a 	mov	r17,zero
 1020dc4:	003fca06 	br	1020cf0 <__alt_data_end+0xff020cf0>
 1020dc8:	813fd336 	bltu	r16,r4,1020d18 <__alt_data_end+0xff020d18>
 1020dcc:	1023883a 	mov	r17,r2
 1020dd0:	003fa806 	br	1020c74 <__alt_data_end+0xff020c74>
 1020dd4:	b0ffd636 	bltu	r22,r3,1020d30 <__alt_data_end+0xff020d30>
 1020dd8:	1011883a 	mov	r8,r2
 1020ddc:	b0ff341e 	bne	r22,r3,1020ab0 <__alt_data_end+0xff020ab0>
 1020de0:	003f3406 	br	1020ab4 <__alt_data_end+0xff020ab4>
 1020de4:	0005883a 	mov	r2,zero
 1020de8:	003fe006 	br	1020d6c <__alt_data_end+0xff020d6c>
 1020dec:	00800434 	movhi	r2,16
 1020df0:	89400234 	orhi	r5,r17,8
 1020df4:	10bfffc4 	addi	r2,r2,-1
 1020df8:	b807883a 	mov	r3,r23
 1020dfc:	288a703a 	and	r5,r5,r2
 1020e00:	4025883a 	mov	r18,r8
 1020e04:	003e8206 	br	1020810 <__alt_data_end+0xff020810>

01020e08 <__eqdf2>:
 1020e08:	2804d53a 	srli	r2,r5,20
 1020e0c:	3806d53a 	srli	r3,r7,20
 1020e10:	02000434 	movhi	r8,16
 1020e14:	423fffc4 	addi	r8,r8,-1
 1020e18:	1081ffcc 	andi	r2,r2,2047
 1020e1c:	0281ffc4 	movi	r10,2047
 1020e20:	2a12703a 	and	r9,r5,r8
 1020e24:	18c1ffcc 	andi	r3,r3,2047
 1020e28:	3a10703a 	and	r8,r7,r8
 1020e2c:	280ad7fa 	srli	r5,r5,31
 1020e30:	380ed7fa 	srli	r7,r7,31
 1020e34:	12801026 	beq	r2,r10,1020e78 <__eqdf2+0x70>
 1020e38:	0281ffc4 	movi	r10,2047
 1020e3c:	1a800a26 	beq	r3,r10,1020e68 <__eqdf2+0x60>
 1020e40:	10c00226 	beq	r2,r3,1020e4c <__eqdf2+0x44>
 1020e44:	00800044 	movi	r2,1
 1020e48:	f800283a 	ret
 1020e4c:	4a3ffd1e 	bne	r9,r8,1020e44 <__alt_data_end+0xff020e44>
 1020e50:	21bffc1e 	bne	r4,r6,1020e44 <__alt_data_end+0xff020e44>
 1020e54:	29c00c26 	beq	r5,r7,1020e88 <__eqdf2+0x80>
 1020e58:	103ffa1e 	bne	r2,zero,1020e44 <__alt_data_end+0xff020e44>
 1020e5c:	2244b03a 	or	r2,r4,r9
 1020e60:	1004c03a 	cmpne	r2,r2,zero
 1020e64:	f800283a 	ret
 1020e68:	3214b03a 	or	r10,r6,r8
 1020e6c:	503ff426 	beq	r10,zero,1020e40 <__alt_data_end+0xff020e40>
 1020e70:	00800044 	movi	r2,1
 1020e74:	f800283a 	ret
 1020e78:	2254b03a 	or	r10,r4,r9
 1020e7c:	503fee26 	beq	r10,zero,1020e38 <__alt_data_end+0xff020e38>
 1020e80:	00800044 	movi	r2,1
 1020e84:	f800283a 	ret
 1020e88:	0005883a 	mov	r2,zero
 1020e8c:	f800283a 	ret

01020e90 <__gedf2>:
 1020e90:	2804d53a 	srli	r2,r5,20
 1020e94:	3806d53a 	srli	r3,r7,20
 1020e98:	02000434 	movhi	r8,16
 1020e9c:	423fffc4 	addi	r8,r8,-1
 1020ea0:	1081ffcc 	andi	r2,r2,2047
 1020ea4:	0241ffc4 	movi	r9,2047
 1020ea8:	2a14703a 	and	r10,r5,r8
 1020eac:	18c1ffcc 	andi	r3,r3,2047
 1020eb0:	3a10703a 	and	r8,r7,r8
 1020eb4:	280ad7fa 	srli	r5,r5,31
 1020eb8:	380ed7fa 	srli	r7,r7,31
 1020ebc:	12401d26 	beq	r2,r9,1020f34 <__gedf2+0xa4>
 1020ec0:	0241ffc4 	movi	r9,2047
 1020ec4:	1a401226 	beq	r3,r9,1020f10 <__gedf2+0x80>
 1020ec8:	1000081e 	bne	r2,zero,1020eec <__gedf2+0x5c>
 1020ecc:	2296b03a 	or	r11,r4,r10
 1020ed0:	5813003a 	cmpeq	r9,r11,zero
 1020ed4:	1800091e 	bne	r3,zero,1020efc <__gedf2+0x6c>
 1020ed8:	3218b03a 	or	r12,r6,r8
 1020edc:	6000071e 	bne	r12,zero,1020efc <__gedf2+0x6c>
 1020ee0:	0005883a 	mov	r2,zero
 1020ee4:	5800101e 	bne	r11,zero,1020f28 <__gedf2+0x98>
 1020ee8:	f800283a 	ret
 1020eec:	18000c1e 	bne	r3,zero,1020f20 <__gedf2+0x90>
 1020ef0:	3212b03a 	or	r9,r6,r8
 1020ef4:	48000c26 	beq	r9,zero,1020f28 <__gedf2+0x98>
 1020ef8:	0013883a 	mov	r9,zero
 1020efc:	39c03fcc 	andi	r7,r7,255
 1020f00:	48000826 	beq	r9,zero,1020f24 <__gedf2+0x94>
 1020f04:	38000926 	beq	r7,zero,1020f2c <__gedf2+0x9c>
 1020f08:	00800044 	movi	r2,1
 1020f0c:	f800283a 	ret
 1020f10:	3212b03a 	or	r9,r6,r8
 1020f14:	483fec26 	beq	r9,zero,1020ec8 <__alt_data_end+0xff020ec8>
 1020f18:	00bfff84 	movi	r2,-2
 1020f1c:	f800283a 	ret
 1020f20:	39c03fcc 	andi	r7,r7,255
 1020f24:	29c00626 	beq	r5,r7,1020f40 <__gedf2+0xb0>
 1020f28:	283ff726 	beq	r5,zero,1020f08 <__alt_data_end+0xff020f08>
 1020f2c:	00bfffc4 	movi	r2,-1
 1020f30:	f800283a 	ret
 1020f34:	2292b03a 	or	r9,r4,r10
 1020f38:	483fe126 	beq	r9,zero,1020ec0 <__alt_data_end+0xff020ec0>
 1020f3c:	003ff606 	br	1020f18 <__alt_data_end+0xff020f18>
 1020f40:	18bff916 	blt	r3,r2,1020f28 <__alt_data_end+0xff020f28>
 1020f44:	10c00316 	blt	r2,r3,1020f54 <__gedf2+0xc4>
 1020f48:	42bff736 	bltu	r8,r10,1020f28 <__alt_data_end+0xff020f28>
 1020f4c:	52000326 	beq	r10,r8,1020f5c <__gedf2+0xcc>
 1020f50:	5200042e 	bgeu	r10,r8,1020f64 <__gedf2+0xd4>
 1020f54:	283fec1e 	bne	r5,zero,1020f08 <__alt_data_end+0xff020f08>
 1020f58:	003ff406 	br	1020f2c <__alt_data_end+0xff020f2c>
 1020f5c:	313ff236 	bltu	r6,r4,1020f28 <__alt_data_end+0xff020f28>
 1020f60:	21bffc36 	bltu	r4,r6,1020f54 <__alt_data_end+0xff020f54>
 1020f64:	0005883a 	mov	r2,zero
 1020f68:	f800283a 	ret

01020f6c <__ledf2>:
 1020f6c:	2804d53a 	srli	r2,r5,20
 1020f70:	3810d53a 	srli	r8,r7,20
 1020f74:	00c00434 	movhi	r3,16
 1020f78:	18ffffc4 	addi	r3,r3,-1
 1020f7c:	1081ffcc 	andi	r2,r2,2047
 1020f80:	0241ffc4 	movi	r9,2047
 1020f84:	28d4703a 	and	r10,r5,r3
 1020f88:	4201ffcc 	andi	r8,r8,2047
 1020f8c:	38c6703a 	and	r3,r7,r3
 1020f90:	280ad7fa 	srli	r5,r5,31
 1020f94:	380ed7fa 	srli	r7,r7,31
 1020f98:	12401f26 	beq	r2,r9,1021018 <__ledf2+0xac>
 1020f9c:	0241ffc4 	movi	r9,2047
 1020fa0:	42401426 	beq	r8,r9,1020ff4 <__ledf2+0x88>
 1020fa4:	1000091e 	bne	r2,zero,1020fcc <__ledf2+0x60>
 1020fa8:	2296b03a 	or	r11,r4,r10
 1020fac:	5813003a 	cmpeq	r9,r11,zero
 1020fb0:	29403fcc 	andi	r5,r5,255
 1020fb4:	40000a1e 	bne	r8,zero,1020fe0 <__ledf2+0x74>
 1020fb8:	30d8b03a 	or	r12,r6,r3
 1020fbc:	6000081e 	bne	r12,zero,1020fe0 <__ledf2+0x74>
 1020fc0:	0005883a 	mov	r2,zero
 1020fc4:	5800111e 	bne	r11,zero,102100c <__ledf2+0xa0>
 1020fc8:	f800283a 	ret
 1020fcc:	29403fcc 	andi	r5,r5,255
 1020fd0:	40000c1e 	bne	r8,zero,1021004 <__ledf2+0x98>
 1020fd4:	30d2b03a 	or	r9,r6,r3
 1020fd8:	48000c26 	beq	r9,zero,102100c <__ledf2+0xa0>
 1020fdc:	0013883a 	mov	r9,zero
 1020fe0:	39c03fcc 	andi	r7,r7,255
 1020fe4:	48000826 	beq	r9,zero,1021008 <__ledf2+0x9c>
 1020fe8:	38001126 	beq	r7,zero,1021030 <__ledf2+0xc4>
 1020fec:	00800044 	movi	r2,1
 1020ff0:	f800283a 	ret
 1020ff4:	30d2b03a 	or	r9,r6,r3
 1020ff8:	483fea26 	beq	r9,zero,1020fa4 <__alt_data_end+0xff020fa4>
 1020ffc:	00800084 	movi	r2,2
 1021000:	f800283a 	ret
 1021004:	39c03fcc 	andi	r7,r7,255
 1021008:	39400726 	beq	r7,r5,1021028 <__ledf2+0xbc>
 102100c:	2800081e 	bne	r5,zero,1021030 <__ledf2+0xc4>
 1021010:	00800044 	movi	r2,1
 1021014:	f800283a 	ret
 1021018:	2292b03a 	or	r9,r4,r10
 102101c:	483fdf26 	beq	r9,zero,1020f9c <__alt_data_end+0xff020f9c>
 1021020:	00800084 	movi	r2,2
 1021024:	f800283a 	ret
 1021028:	4080030e 	bge	r8,r2,1021038 <__ledf2+0xcc>
 102102c:	383fef26 	beq	r7,zero,1020fec <__alt_data_end+0xff020fec>
 1021030:	00bfffc4 	movi	r2,-1
 1021034:	f800283a 	ret
 1021038:	123feb16 	blt	r2,r8,1020fe8 <__alt_data_end+0xff020fe8>
 102103c:	1abff336 	bltu	r3,r10,102100c <__alt_data_end+0xff02100c>
 1021040:	50c00326 	beq	r10,r3,1021050 <__ledf2+0xe4>
 1021044:	50c0042e 	bgeu	r10,r3,1021058 <__ledf2+0xec>
 1021048:	283fe81e 	bne	r5,zero,1020fec <__alt_data_end+0xff020fec>
 102104c:	003ff806 	br	1021030 <__alt_data_end+0xff021030>
 1021050:	313fee36 	bltu	r6,r4,102100c <__alt_data_end+0xff02100c>
 1021054:	21bffc36 	bltu	r4,r6,1021048 <__alt_data_end+0xff021048>
 1021058:	0005883a 	mov	r2,zero
 102105c:	f800283a 	ret

01021060 <__muldf3>:
 1021060:	defff304 	addi	sp,sp,-52
 1021064:	2804d53a 	srli	r2,r5,20
 1021068:	dd800915 	stw	r22,36(sp)
 102106c:	282cd7fa 	srli	r22,r5,31
 1021070:	dc000315 	stw	r16,12(sp)
 1021074:	04000434 	movhi	r16,16
 1021078:	dd400815 	stw	r21,32(sp)
 102107c:	dc800515 	stw	r18,20(sp)
 1021080:	843fffc4 	addi	r16,r16,-1
 1021084:	dfc00c15 	stw	ra,48(sp)
 1021088:	df000b15 	stw	fp,44(sp)
 102108c:	ddc00a15 	stw	r23,40(sp)
 1021090:	dd000715 	stw	r20,28(sp)
 1021094:	dcc00615 	stw	r19,24(sp)
 1021098:	dc400415 	stw	r17,16(sp)
 102109c:	1481ffcc 	andi	r18,r2,2047
 10210a0:	2c20703a 	and	r16,r5,r16
 10210a4:	b02b883a 	mov	r21,r22
 10210a8:	b2403fcc 	andi	r9,r22,255
 10210ac:	90006026 	beq	r18,zero,1021230 <__muldf3+0x1d0>
 10210b0:	0081ffc4 	movi	r2,2047
 10210b4:	2029883a 	mov	r20,r4
 10210b8:	90803626 	beq	r18,r2,1021194 <__muldf3+0x134>
 10210bc:	80800434 	orhi	r2,r16,16
 10210c0:	100490fa 	slli	r2,r2,3
 10210c4:	2020d77a 	srli	r16,r4,29
 10210c8:	202890fa 	slli	r20,r4,3
 10210cc:	94bf0044 	addi	r18,r18,-1023
 10210d0:	80a0b03a 	or	r16,r16,r2
 10210d4:	0027883a 	mov	r19,zero
 10210d8:	0039883a 	mov	fp,zero
 10210dc:	3804d53a 	srli	r2,r7,20
 10210e0:	382ed7fa 	srli	r23,r7,31
 10210e4:	04400434 	movhi	r17,16
 10210e8:	8c7fffc4 	addi	r17,r17,-1
 10210ec:	1081ffcc 	andi	r2,r2,2047
 10210f0:	3011883a 	mov	r8,r6
 10210f4:	3c62703a 	and	r17,r7,r17
 10210f8:	ba803fcc 	andi	r10,r23,255
 10210fc:	10006d26 	beq	r2,zero,10212b4 <__muldf3+0x254>
 1021100:	00c1ffc4 	movi	r3,2047
 1021104:	10c06526 	beq	r2,r3,102129c <__muldf3+0x23c>
 1021108:	88c00434 	orhi	r3,r17,16
 102110c:	180690fa 	slli	r3,r3,3
 1021110:	3022d77a 	srli	r17,r6,29
 1021114:	301090fa 	slli	r8,r6,3
 1021118:	10bf0044 	addi	r2,r2,-1023
 102111c:	88e2b03a 	or	r17,r17,r3
 1021120:	000b883a 	mov	r5,zero
 1021124:	9085883a 	add	r2,r18,r2
 1021128:	2cc8b03a 	or	r4,r5,r19
 102112c:	00c003c4 	movi	r3,15
 1021130:	bdacf03a 	xor	r22,r23,r22
 1021134:	12c00044 	addi	r11,r2,1
 1021138:	19009936 	bltu	r3,r4,10213a0 <__muldf3+0x340>
 102113c:	200890ba 	slli	r4,r4,2
 1021140:	00c040b4 	movhi	r3,258
 1021144:	18c45504 	addi	r3,r3,4436
 1021148:	20c9883a 	add	r4,r4,r3
 102114c:	20c00017 	ldw	r3,0(r4)
 1021150:	1800683a 	jmp	r3
 1021154:	010213a0 	cmpeqi	r4,zero,2126
 1021158:	010211b4 	movhi	r4,2118
 102115c:	010211b4 	movhi	r4,2118
 1021160:	010211b0 	cmpltui	r4,zero,2118
 1021164:	0102137c 	xorhi	r4,zero,2125
 1021168:	0102137c 	xorhi	r4,zero,2125
 102116c:	01021364 	muli	r4,zero,2125
 1021170:	010211b0 	cmpltui	r4,zero,2118
 1021174:	0102137c 	xorhi	r4,zero,2125
 1021178:	01021364 	muli	r4,zero,2125
 102117c:	0102137c 	xorhi	r4,zero,2125
 1021180:	010211b0 	cmpltui	r4,zero,2118
 1021184:	0102138c 	andi	r4,zero,2126
 1021188:	0102138c 	andi	r4,zero,2126
 102118c:	0102138c 	andi	r4,zero,2126
 1021190:	010215a8 	cmpgeui	r4,zero,2134
 1021194:	2404b03a 	or	r2,r4,r16
 1021198:	10006f1e 	bne	r2,zero,1021358 <__muldf3+0x2f8>
 102119c:	04c00204 	movi	r19,8
 10211a0:	0021883a 	mov	r16,zero
 10211a4:	0029883a 	mov	r20,zero
 10211a8:	07000084 	movi	fp,2
 10211ac:	003fcb06 	br	10210dc <__alt_data_end+0xff0210dc>
 10211b0:	502d883a 	mov	r22,r10
 10211b4:	00800084 	movi	r2,2
 10211b8:	28805726 	beq	r5,r2,1021318 <__muldf3+0x2b8>
 10211bc:	008000c4 	movi	r2,3
 10211c0:	28816626 	beq	r5,r2,102175c <__muldf3+0x6fc>
 10211c4:	00800044 	movi	r2,1
 10211c8:	2881411e 	bne	r5,r2,10216d0 <__muldf3+0x670>
 10211cc:	b02b883a 	mov	r21,r22
 10211d0:	0005883a 	mov	r2,zero
 10211d4:	000b883a 	mov	r5,zero
 10211d8:	0029883a 	mov	r20,zero
 10211dc:	1004953a 	slli	r2,r2,20
 10211e0:	a8c03fcc 	andi	r3,r21,255
 10211e4:	04400434 	movhi	r17,16
 10211e8:	8c7fffc4 	addi	r17,r17,-1
 10211ec:	180697fa 	slli	r3,r3,31
 10211f0:	2c4a703a 	and	r5,r5,r17
 10211f4:	288ab03a 	or	r5,r5,r2
 10211f8:	28c6b03a 	or	r3,r5,r3
 10211fc:	a005883a 	mov	r2,r20
 1021200:	dfc00c17 	ldw	ra,48(sp)
 1021204:	df000b17 	ldw	fp,44(sp)
 1021208:	ddc00a17 	ldw	r23,40(sp)
 102120c:	dd800917 	ldw	r22,36(sp)
 1021210:	dd400817 	ldw	r21,32(sp)
 1021214:	dd000717 	ldw	r20,28(sp)
 1021218:	dcc00617 	ldw	r19,24(sp)
 102121c:	dc800517 	ldw	r18,20(sp)
 1021220:	dc400417 	ldw	r17,16(sp)
 1021224:	dc000317 	ldw	r16,12(sp)
 1021228:	dec00d04 	addi	sp,sp,52
 102122c:	f800283a 	ret
 1021230:	2404b03a 	or	r2,r4,r16
 1021234:	2027883a 	mov	r19,r4
 1021238:	10004226 	beq	r2,zero,1021344 <__muldf3+0x2e4>
 102123c:	8000fc26 	beq	r16,zero,1021630 <__muldf3+0x5d0>
 1021240:	8009883a 	mov	r4,r16
 1021244:	d9800215 	stw	r6,8(sp)
 1021248:	d9c00015 	stw	r7,0(sp)
 102124c:	da400115 	stw	r9,4(sp)
 1021250:	10222780 	call	1022278 <__clzsi2>
 1021254:	d9800217 	ldw	r6,8(sp)
 1021258:	d9c00017 	ldw	r7,0(sp)
 102125c:	da400117 	ldw	r9,4(sp)
 1021260:	113ffd44 	addi	r4,r2,-11
 1021264:	00c00704 	movi	r3,28
 1021268:	1900ed16 	blt	r3,r4,1021620 <__muldf3+0x5c0>
 102126c:	00c00744 	movi	r3,29
 1021270:	147ffe04 	addi	r17,r2,-8
 1021274:	1907c83a 	sub	r3,r3,r4
 1021278:	8460983a 	sll	r16,r16,r17
 102127c:	98c6d83a 	srl	r3,r19,r3
 1021280:	9c68983a 	sll	r20,r19,r17
 1021284:	1c20b03a 	or	r16,r3,r16
 1021288:	1080fcc4 	addi	r2,r2,1011
 102128c:	00a5c83a 	sub	r18,zero,r2
 1021290:	0027883a 	mov	r19,zero
 1021294:	0039883a 	mov	fp,zero
 1021298:	003f9006 	br	10210dc <__alt_data_end+0xff0210dc>
 102129c:	3446b03a 	or	r3,r6,r17
 10212a0:	1800261e 	bne	r3,zero,102133c <__muldf3+0x2dc>
 10212a4:	0023883a 	mov	r17,zero
 10212a8:	0011883a 	mov	r8,zero
 10212ac:	01400084 	movi	r5,2
 10212b0:	003f9c06 	br	1021124 <__alt_data_end+0xff021124>
 10212b4:	3446b03a 	or	r3,r6,r17
 10212b8:	18001c26 	beq	r3,zero,102132c <__muldf3+0x2cc>
 10212bc:	8800ce26 	beq	r17,zero,10215f8 <__muldf3+0x598>
 10212c0:	8809883a 	mov	r4,r17
 10212c4:	d9800215 	stw	r6,8(sp)
 10212c8:	da400115 	stw	r9,4(sp)
 10212cc:	da800015 	stw	r10,0(sp)
 10212d0:	10222780 	call	1022278 <__clzsi2>
 10212d4:	d9800217 	ldw	r6,8(sp)
 10212d8:	da400117 	ldw	r9,4(sp)
 10212dc:	da800017 	ldw	r10,0(sp)
 10212e0:	113ffd44 	addi	r4,r2,-11
 10212e4:	00c00704 	movi	r3,28
 10212e8:	1900bf16 	blt	r3,r4,10215e8 <__muldf3+0x588>
 10212ec:	00c00744 	movi	r3,29
 10212f0:	123ffe04 	addi	r8,r2,-8
 10212f4:	1907c83a 	sub	r3,r3,r4
 10212f8:	8a22983a 	sll	r17,r17,r8
 10212fc:	30c6d83a 	srl	r3,r6,r3
 1021300:	3210983a 	sll	r8,r6,r8
 1021304:	1c62b03a 	or	r17,r3,r17
 1021308:	1080fcc4 	addi	r2,r2,1011
 102130c:	0085c83a 	sub	r2,zero,r2
 1021310:	000b883a 	mov	r5,zero
 1021314:	003f8306 	br	1021124 <__alt_data_end+0xff021124>
 1021318:	b02b883a 	mov	r21,r22
 102131c:	0081ffc4 	movi	r2,2047
 1021320:	000b883a 	mov	r5,zero
 1021324:	0029883a 	mov	r20,zero
 1021328:	003fac06 	br	10211dc <__alt_data_end+0xff0211dc>
 102132c:	0023883a 	mov	r17,zero
 1021330:	0011883a 	mov	r8,zero
 1021334:	01400044 	movi	r5,1
 1021338:	003f7a06 	br	1021124 <__alt_data_end+0xff021124>
 102133c:	014000c4 	movi	r5,3
 1021340:	003f7806 	br	1021124 <__alt_data_end+0xff021124>
 1021344:	04c00104 	movi	r19,4
 1021348:	0021883a 	mov	r16,zero
 102134c:	0029883a 	mov	r20,zero
 1021350:	07000044 	movi	fp,1
 1021354:	003f6106 	br	10210dc <__alt_data_end+0xff0210dc>
 1021358:	04c00304 	movi	r19,12
 102135c:	070000c4 	movi	fp,3
 1021360:	003f5e06 	br	10210dc <__alt_data_end+0xff0210dc>
 1021364:	01400434 	movhi	r5,16
 1021368:	002b883a 	mov	r21,zero
 102136c:	297fffc4 	addi	r5,r5,-1
 1021370:	053fffc4 	movi	r20,-1
 1021374:	0081ffc4 	movi	r2,2047
 1021378:	003f9806 	br	10211dc <__alt_data_end+0xff0211dc>
 102137c:	8023883a 	mov	r17,r16
 1021380:	a011883a 	mov	r8,r20
 1021384:	e00b883a 	mov	r5,fp
 1021388:	003f8a06 	br	10211b4 <__alt_data_end+0xff0211b4>
 102138c:	8023883a 	mov	r17,r16
 1021390:	a011883a 	mov	r8,r20
 1021394:	482d883a 	mov	r22,r9
 1021398:	e00b883a 	mov	r5,fp
 102139c:	003f8506 	br	10211b4 <__alt_data_end+0xff0211b4>
 10213a0:	a00ad43a 	srli	r5,r20,16
 10213a4:	401ad43a 	srli	r13,r8,16
 10213a8:	a53fffcc 	andi	r20,r20,65535
 10213ac:	423fffcc 	andi	r8,r8,65535
 10213b0:	4519383a 	mul	r12,r8,r20
 10213b4:	4147383a 	mul	r3,r8,r5
 10213b8:	6d09383a 	mul	r4,r13,r20
 10213bc:	600cd43a 	srli	r6,r12,16
 10213c0:	2b5d383a 	mul	r14,r5,r13
 10213c4:	20c9883a 	add	r4,r4,r3
 10213c8:	310d883a 	add	r6,r6,r4
 10213cc:	30c0022e 	bgeu	r6,r3,10213d8 <__muldf3+0x378>
 10213d0:	00c00074 	movhi	r3,1
 10213d4:	70dd883a 	add	r14,r14,r3
 10213d8:	8826d43a 	srli	r19,r17,16
 10213dc:	8bffffcc 	andi	r15,r17,65535
 10213e0:	7d23383a 	mul	r17,r15,r20
 10213e4:	7949383a 	mul	r4,r15,r5
 10213e8:	9d29383a 	mul	r20,r19,r20
 10213ec:	8814d43a 	srli	r10,r17,16
 10213f0:	3012943a 	slli	r9,r6,16
 10213f4:	a129883a 	add	r20,r20,r4
 10213f8:	633fffcc 	andi	r12,r12,65535
 10213fc:	5515883a 	add	r10,r10,r20
 1021400:	3006d43a 	srli	r3,r6,16
 1021404:	4b13883a 	add	r9,r9,r12
 1021408:	2ccb383a 	mul	r5,r5,r19
 102140c:	5100022e 	bgeu	r10,r4,1021418 <__muldf3+0x3b8>
 1021410:	01000074 	movhi	r4,1
 1021414:	290b883a 	add	r5,r5,r4
 1021418:	802ad43a 	srli	r21,r16,16
 102141c:	843fffcc 	andi	r16,r16,65535
 1021420:	440d383a 	mul	r6,r8,r16
 1021424:	4565383a 	mul	r18,r8,r21
 1021428:	8349383a 	mul	r4,r16,r13
 102142c:	500e943a 	slli	r7,r10,16
 1021430:	3010d43a 	srli	r8,r6,16
 1021434:	5028d43a 	srli	r20,r10,16
 1021438:	2489883a 	add	r4,r4,r18
 102143c:	8abfffcc 	andi	r10,r17,65535
 1021440:	3a95883a 	add	r10,r7,r10
 1021444:	4119883a 	add	r12,r8,r4
 1021448:	a169883a 	add	r20,r20,r5
 102144c:	1a87883a 	add	r3,r3,r10
 1021450:	6d5b383a 	mul	r13,r13,r21
 1021454:	6480022e 	bgeu	r12,r18,1021460 <__muldf3+0x400>
 1021458:	01000074 	movhi	r4,1
 102145c:	691b883a 	add	r13,r13,r4
 1021460:	7c25383a 	mul	r18,r15,r16
 1021464:	7d4b383a 	mul	r5,r15,r21
 1021468:	84cf383a 	mul	r7,r16,r19
 102146c:	901ed43a 	srli	r15,r18,16
 1021470:	6008d43a 	srli	r4,r12,16
 1021474:	6010943a 	slli	r8,r12,16
 1021478:	394f883a 	add	r7,r7,r5
 102147c:	333fffcc 	andi	r12,r6,65535
 1021480:	79df883a 	add	r15,r15,r7
 1021484:	235b883a 	add	r13,r4,r13
 1021488:	9d63383a 	mul	r17,r19,r21
 102148c:	4309883a 	add	r4,r8,r12
 1021490:	7940022e 	bgeu	r15,r5,102149c <__muldf3+0x43c>
 1021494:	01400074 	movhi	r5,1
 1021498:	8963883a 	add	r17,r17,r5
 102149c:	780a943a 	slli	r5,r15,16
 10214a0:	91bfffcc 	andi	r6,r18,65535
 10214a4:	70c7883a 	add	r3,r14,r3
 10214a8:	298d883a 	add	r6,r5,r6
 10214ac:	1a8f803a 	cmpltu	r7,r3,r10
 10214b0:	350b883a 	add	r5,r6,r20
 10214b4:	20c7883a 	add	r3,r4,r3
 10214b8:	3955883a 	add	r10,r7,r5
 10214bc:	1909803a 	cmpltu	r4,r3,r4
 10214c0:	6a91883a 	add	r8,r13,r10
 10214c4:	780cd43a 	srli	r6,r15,16
 10214c8:	2219883a 	add	r12,r4,r8
 10214cc:	2d0b803a 	cmpltu	r5,r5,r20
 10214d0:	51cf803a 	cmpltu	r7,r10,r7
 10214d4:	29ceb03a 	or	r7,r5,r7
 10214d8:	4351803a 	cmpltu	r8,r8,r13
 10214dc:	610b803a 	cmpltu	r5,r12,r4
 10214e0:	4148b03a 	or	r4,r8,r5
 10214e4:	398f883a 	add	r7,r7,r6
 10214e8:	3909883a 	add	r4,r7,r4
 10214ec:	1810927a 	slli	r8,r3,9
 10214f0:	2449883a 	add	r4,r4,r17
 10214f4:	2008927a 	slli	r4,r4,9
 10214f8:	6022d5fa 	srli	r17,r12,23
 10214fc:	1806d5fa 	srli	r3,r3,23
 1021500:	4252b03a 	or	r9,r8,r9
 1021504:	600a927a 	slli	r5,r12,9
 1021508:	4810c03a 	cmpne	r8,r9,zero
 102150c:	2462b03a 	or	r17,r4,r17
 1021510:	40c6b03a 	or	r3,r8,r3
 1021514:	8900402c 	andhi	r4,r17,256
 1021518:	1950b03a 	or	r8,r3,r5
 102151c:	20000726 	beq	r4,zero,102153c <__muldf3+0x4dc>
 1021520:	4006d07a 	srli	r3,r8,1
 1021524:	880497fa 	slli	r2,r17,31
 1021528:	4200004c 	andi	r8,r8,1
 102152c:	8822d07a 	srli	r17,r17,1
 1021530:	1a10b03a 	or	r8,r3,r8
 1021534:	1210b03a 	or	r8,r2,r8
 1021538:	5805883a 	mov	r2,r11
 102153c:	1140ffc4 	addi	r5,r2,1023
 1021540:	0140440e 	bge	zero,r5,1021654 <__muldf3+0x5f4>
 1021544:	40c001cc 	andi	r3,r8,7
 1021548:	18000726 	beq	r3,zero,1021568 <__muldf3+0x508>
 102154c:	40c003cc 	andi	r3,r8,15
 1021550:	01000104 	movi	r4,4
 1021554:	19000426 	beq	r3,r4,1021568 <__muldf3+0x508>
 1021558:	4107883a 	add	r3,r8,r4
 102155c:	1a11803a 	cmpltu	r8,r3,r8
 1021560:	8a23883a 	add	r17,r17,r8
 1021564:	1811883a 	mov	r8,r3
 1021568:	88c0402c 	andhi	r3,r17,256
 102156c:	18000426 	beq	r3,zero,1021580 <__muldf3+0x520>
 1021570:	11410004 	addi	r5,r2,1024
 1021574:	00bfc034 	movhi	r2,65280
 1021578:	10bfffc4 	addi	r2,r2,-1
 102157c:	88a2703a 	and	r17,r17,r2
 1021580:	0081ff84 	movi	r2,2046
 1021584:	117f6416 	blt	r2,r5,1021318 <__alt_data_end+0xff021318>
 1021588:	8828977a 	slli	r20,r17,29
 102158c:	4010d0fa 	srli	r8,r8,3
 1021590:	8822927a 	slli	r17,r17,9
 1021594:	2881ffcc 	andi	r2,r5,2047
 1021598:	a228b03a 	or	r20,r20,r8
 102159c:	880ad33a 	srli	r5,r17,12
 10215a0:	b02b883a 	mov	r21,r22
 10215a4:	003f0d06 	br	10211dc <__alt_data_end+0xff0211dc>
 10215a8:	8080022c 	andhi	r2,r16,8
 10215ac:	10000926 	beq	r2,zero,10215d4 <__muldf3+0x574>
 10215b0:	8880022c 	andhi	r2,r17,8
 10215b4:	1000071e 	bne	r2,zero,10215d4 <__muldf3+0x574>
 10215b8:	00800434 	movhi	r2,16
 10215bc:	89400234 	orhi	r5,r17,8
 10215c0:	10bfffc4 	addi	r2,r2,-1
 10215c4:	b82b883a 	mov	r21,r23
 10215c8:	288a703a 	and	r5,r5,r2
 10215cc:	4029883a 	mov	r20,r8
 10215d0:	003f6806 	br	1021374 <__alt_data_end+0xff021374>
 10215d4:	00800434 	movhi	r2,16
 10215d8:	81400234 	orhi	r5,r16,8
 10215dc:	10bfffc4 	addi	r2,r2,-1
 10215e0:	288a703a 	and	r5,r5,r2
 10215e4:	003f6306 	br	1021374 <__alt_data_end+0xff021374>
 10215e8:	147ff604 	addi	r17,r2,-40
 10215ec:	3462983a 	sll	r17,r6,r17
 10215f0:	0011883a 	mov	r8,zero
 10215f4:	003f4406 	br	1021308 <__alt_data_end+0xff021308>
 10215f8:	3009883a 	mov	r4,r6
 10215fc:	d9800215 	stw	r6,8(sp)
 1021600:	da400115 	stw	r9,4(sp)
 1021604:	da800015 	stw	r10,0(sp)
 1021608:	10222780 	call	1022278 <__clzsi2>
 102160c:	10800804 	addi	r2,r2,32
 1021610:	da800017 	ldw	r10,0(sp)
 1021614:	da400117 	ldw	r9,4(sp)
 1021618:	d9800217 	ldw	r6,8(sp)
 102161c:	003f3006 	br	10212e0 <__alt_data_end+0xff0212e0>
 1021620:	143ff604 	addi	r16,r2,-40
 1021624:	9c20983a 	sll	r16,r19,r16
 1021628:	0029883a 	mov	r20,zero
 102162c:	003f1606 	br	1021288 <__alt_data_end+0xff021288>
 1021630:	d9800215 	stw	r6,8(sp)
 1021634:	d9c00015 	stw	r7,0(sp)
 1021638:	da400115 	stw	r9,4(sp)
 102163c:	10222780 	call	1022278 <__clzsi2>
 1021640:	10800804 	addi	r2,r2,32
 1021644:	da400117 	ldw	r9,4(sp)
 1021648:	d9c00017 	ldw	r7,0(sp)
 102164c:	d9800217 	ldw	r6,8(sp)
 1021650:	003f0306 	br	1021260 <__alt_data_end+0xff021260>
 1021654:	00c00044 	movi	r3,1
 1021658:	1947c83a 	sub	r3,r3,r5
 102165c:	00800e04 	movi	r2,56
 1021660:	10feda16 	blt	r2,r3,10211cc <__alt_data_end+0xff0211cc>
 1021664:	008007c4 	movi	r2,31
 1021668:	10c01b16 	blt	r2,r3,10216d8 <__muldf3+0x678>
 102166c:	00800804 	movi	r2,32
 1021670:	10c5c83a 	sub	r2,r2,r3
 1021674:	888a983a 	sll	r5,r17,r2
 1021678:	40c8d83a 	srl	r4,r8,r3
 102167c:	4084983a 	sll	r2,r8,r2
 1021680:	88e2d83a 	srl	r17,r17,r3
 1021684:	2906b03a 	or	r3,r5,r4
 1021688:	1004c03a 	cmpne	r2,r2,zero
 102168c:	1886b03a 	or	r3,r3,r2
 1021690:	188001cc 	andi	r2,r3,7
 1021694:	10000726 	beq	r2,zero,10216b4 <__muldf3+0x654>
 1021698:	188003cc 	andi	r2,r3,15
 102169c:	01000104 	movi	r4,4
 10216a0:	11000426 	beq	r2,r4,10216b4 <__muldf3+0x654>
 10216a4:	1805883a 	mov	r2,r3
 10216a8:	10c00104 	addi	r3,r2,4
 10216ac:	1885803a 	cmpltu	r2,r3,r2
 10216b0:	88a3883a 	add	r17,r17,r2
 10216b4:	8880202c 	andhi	r2,r17,128
 10216b8:	10001c26 	beq	r2,zero,102172c <__muldf3+0x6cc>
 10216bc:	b02b883a 	mov	r21,r22
 10216c0:	00800044 	movi	r2,1
 10216c4:	000b883a 	mov	r5,zero
 10216c8:	0029883a 	mov	r20,zero
 10216cc:	003ec306 	br	10211dc <__alt_data_end+0xff0211dc>
 10216d0:	5805883a 	mov	r2,r11
 10216d4:	003f9906 	br	102153c <__alt_data_end+0xff02153c>
 10216d8:	00bff844 	movi	r2,-31
 10216dc:	1145c83a 	sub	r2,r2,r5
 10216e0:	8888d83a 	srl	r4,r17,r2
 10216e4:	00800804 	movi	r2,32
 10216e8:	18801a26 	beq	r3,r2,1021754 <__muldf3+0x6f4>
 10216ec:	00801004 	movi	r2,64
 10216f0:	10c5c83a 	sub	r2,r2,r3
 10216f4:	8884983a 	sll	r2,r17,r2
 10216f8:	1204b03a 	or	r2,r2,r8
 10216fc:	1004c03a 	cmpne	r2,r2,zero
 1021700:	2084b03a 	or	r2,r4,r2
 1021704:	144001cc 	andi	r17,r2,7
 1021708:	88000d1e 	bne	r17,zero,1021740 <__muldf3+0x6e0>
 102170c:	000b883a 	mov	r5,zero
 1021710:	1028d0fa 	srli	r20,r2,3
 1021714:	b02b883a 	mov	r21,r22
 1021718:	0005883a 	mov	r2,zero
 102171c:	a468b03a 	or	r20,r20,r17
 1021720:	003eae06 	br	10211dc <__alt_data_end+0xff0211dc>
 1021724:	1007883a 	mov	r3,r2
 1021728:	0023883a 	mov	r17,zero
 102172c:	880a927a 	slli	r5,r17,9
 1021730:	1805883a 	mov	r2,r3
 1021734:	8822977a 	slli	r17,r17,29
 1021738:	280ad33a 	srli	r5,r5,12
 102173c:	003ff406 	br	1021710 <__alt_data_end+0xff021710>
 1021740:	10c003cc 	andi	r3,r2,15
 1021744:	01000104 	movi	r4,4
 1021748:	193ff626 	beq	r3,r4,1021724 <__alt_data_end+0xff021724>
 102174c:	0023883a 	mov	r17,zero
 1021750:	003fd506 	br	10216a8 <__alt_data_end+0xff0216a8>
 1021754:	0005883a 	mov	r2,zero
 1021758:	003fe706 	br	10216f8 <__alt_data_end+0xff0216f8>
 102175c:	00800434 	movhi	r2,16
 1021760:	89400234 	orhi	r5,r17,8
 1021764:	10bfffc4 	addi	r2,r2,-1
 1021768:	b02b883a 	mov	r21,r22
 102176c:	288a703a 	and	r5,r5,r2
 1021770:	4029883a 	mov	r20,r8
 1021774:	003eff06 	br	1021374 <__alt_data_end+0xff021374>

01021778 <__subdf3>:
 1021778:	02000434 	movhi	r8,16
 102177c:	423fffc4 	addi	r8,r8,-1
 1021780:	defffb04 	addi	sp,sp,-20
 1021784:	2a14703a 	and	r10,r5,r8
 1021788:	3812d53a 	srli	r9,r7,20
 102178c:	3a10703a 	and	r8,r7,r8
 1021790:	2006d77a 	srli	r3,r4,29
 1021794:	3004d77a 	srli	r2,r6,29
 1021798:	dc000015 	stw	r16,0(sp)
 102179c:	501490fa 	slli	r10,r10,3
 10217a0:	2820d53a 	srli	r16,r5,20
 10217a4:	401090fa 	slli	r8,r8,3
 10217a8:	dc800215 	stw	r18,8(sp)
 10217ac:	dc400115 	stw	r17,4(sp)
 10217b0:	dfc00415 	stw	ra,16(sp)
 10217b4:	202290fa 	slli	r17,r4,3
 10217b8:	dcc00315 	stw	r19,12(sp)
 10217bc:	4a41ffcc 	andi	r9,r9,2047
 10217c0:	0101ffc4 	movi	r4,2047
 10217c4:	2824d7fa 	srli	r18,r5,31
 10217c8:	8401ffcc 	andi	r16,r16,2047
 10217cc:	50c6b03a 	or	r3,r10,r3
 10217d0:	380ed7fa 	srli	r7,r7,31
 10217d4:	408ab03a 	or	r5,r8,r2
 10217d8:	300c90fa 	slli	r6,r6,3
 10217dc:	49009626 	beq	r9,r4,1021a38 <__subdf3+0x2c0>
 10217e0:	39c0005c 	xori	r7,r7,1
 10217e4:	8245c83a 	sub	r2,r16,r9
 10217e8:	3c807426 	beq	r7,r18,10219bc <__subdf3+0x244>
 10217ec:	0080af0e 	bge	zero,r2,1021aac <__subdf3+0x334>
 10217f0:	48002a1e 	bne	r9,zero,102189c <__subdf3+0x124>
 10217f4:	2988b03a 	or	r4,r5,r6
 10217f8:	20009a1e 	bne	r4,zero,1021a64 <__subdf3+0x2ec>
 10217fc:	888001cc 	andi	r2,r17,7
 1021800:	10000726 	beq	r2,zero,1021820 <__subdf3+0xa8>
 1021804:	888003cc 	andi	r2,r17,15
 1021808:	01000104 	movi	r4,4
 102180c:	11000426 	beq	r2,r4,1021820 <__subdf3+0xa8>
 1021810:	890b883a 	add	r5,r17,r4
 1021814:	2c63803a 	cmpltu	r17,r5,r17
 1021818:	1c47883a 	add	r3,r3,r17
 102181c:	2823883a 	mov	r17,r5
 1021820:	1880202c 	andhi	r2,r3,128
 1021824:	10005926 	beq	r2,zero,102198c <__subdf3+0x214>
 1021828:	84000044 	addi	r16,r16,1
 102182c:	0081ffc4 	movi	r2,2047
 1021830:	8080be26 	beq	r16,r2,1021b2c <__subdf3+0x3b4>
 1021834:	017fe034 	movhi	r5,65408
 1021838:	297fffc4 	addi	r5,r5,-1
 102183c:	1946703a 	and	r3,r3,r5
 1021840:	1804977a 	slli	r2,r3,29
 1021844:	1806927a 	slli	r3,r3,9
 1021848:	8822d0fa 	srli	r17,r17,3
 102184c:	8401ffcc 	andi	r16,r16,2047
 1021850:	180ad33a 	srli	r5,r3,12
 1021854:	9100004c 	andi	r4,r18,1
 1021858:	1444b03a 	or	r2,r2,r17
 102185c:	80c1ffcc 	andi	r3,r16,2047
 1021860:	1820953a 	slli	r16,r3,20
 1021864:	20c03fcc 	andi	r3,r4,255
 1021868:	180897fa 	slli	r4,r3,31
 102186c:	00c00434 	movhi	r3,16
 1021870:	18ffffc4 	addi	r3,r3,-1
 1021874:	28c6703a 	and	r3,r5,r3
 1021878:	1c06b03a 	or	r3,r3,r16
 102187c:	1906b03a 	or	r3,r3,r4
 1021880:	dfc00417 	ldw	ra,16(sp)
 1021884:	dcc00317 	ldw	r19,12(sp)
 1021888:	dc800217 	ldw	r18,8(sp)
 102188c:	dc400117 	ldw	r17,4(sp)
 1021890:	dc000017 	ldw	r16,0(sp)
 1021894:	dec00504 	addi	sp,sp,20
 1021898:	f800283a 	ret
 102189c:	0101ffc4 	movi	r4,2047
 10218a0:	813fd626 	beq	r16,r4,10217fc <__alt_data_end+0xff0217fc>
 10218a4:	29402034 	orhi	r5,r5,128
 10218a8:	01000e04 	movi	r4,56
 10218ac:	2080a316 	blt	r4,r2,1021b3c <__subdf3+0x3c4>
 10218b0:	010007c4 	movi	r4,31
 10218b4:	2080c616 	blt	r4,r2,1021bd0 <__subdf3+0x458>
 10218b8:	01000804 	movi	r4,32
 10218bc:	2089c83a 	sub	r4,r4,r2
 10218c0:	2910983a 	sll	r8,r5,r4
 10218c4:	308ed83a 	srl	r7,r6,r2
 10218c8:	3108983a 	sll	r4,r6,r4
 10218cc:	2884d83a 	srl	r2,r5,r2
 10218d0:	41ccb03a 	or	r6,r8,r7
 10218d4:	2008c03a 	cmpne	r4,r4,zero
 10218d8:	310cb03a 	or	r6,r6,r4
 10218dc:	898dc83a 	sub	r6,r17,r6
 10218e0:	89a3803a 	cmpltu	r17,r17,r6
 10218e4:	1887c83a 	sub	r3,r3,r2
 10218e8:	1c47c83a 	sub	r3,r3,r17
 10218ec:	3023883a 	mov	r17,r6
 10218f0:	1880202c 	andhi	r2,r3,128
 10218f4:	10002326 	beq	r2,zero,1021984 <__subdf3+0x20c>
 10218f8:	04c02034 	movhi	r19,128
 10218fc:	9cffffc4 	addi	r19,r19,-1
 1021900:	1ce6703a 	and	r19,r3,r19
 1021904:	98007a26 	beq	r19,zero,1021af0 <__subdf3+0x378>
 1021908:	9809883a 	mov	r4,r19
 102190c:	10222780 	call	1022278 <__clzsi2>
 1021910:	113ffe04 	addi	r4,r2,-8
 1021914:	00c007c4 	movi	r3,31
 1021918:	19007b16 	blt	r3,r4,1021b08 <__subdf3+0x390>
 102191c:	00800804 	movi	r2,32
 1021920:	1105c83a 	sub	r2,r2,r4
 1021924:	8884d83a 	srl	r2,r17,r2
 1021928:	9906983a 	sll	r3,r19,r4
 102192c:	8922983a 	sll	r17,r17,r4
 1021930:	10c4b03a 	or	r2,r2,r3
 1021934:	24007816 	blt	r4,r16,1021b18 <__subdf3+0x3a0>
 1021938:	2421c83a 	sub	r16,r4,r16
 102193c:	80c00044 	addi	r3,r16,1
 1021940:	010007c4 	movi	r4,31
 1021944:	20c09516 	blt	r4,r3,1021b9c <__subdf3+0x424>
 1021948:	01400804 	movi	r5,32
 102194c:	28cbc83a 	sub	r5,r5,r3
 1021950:	88c8d83a 	srl	r4,r17,r3
 1021954:	8962983a 	sll	r17,r17,r5
 1021958:	114a983a 	sll	r5,r2,r5
 102195c:	10c6d83a 	srl	r3,r2,r3
 1021960:	8804c03a 	cmpne	r2,r17,zero
 1021964:	290ab03a 	or	r5,r5,r4
 1021968:	28a2b03a 	or	r17,r5,r2
 102196c:	0021883a 	mov	r16,zero
 1021970:	003fa206 	br	10217fc <__alt_data_end+0xff0217fc>
 1021974:	2090b03a 	or	r8,r4,r2
 1021978:	40018e26 	beq	r8,zero,1021fb4 <__subdf3+0x83c>
 102197c:	1007883a 	mov	r3,r2
 1021980:	2023883a 	mov	r17,r4
 1021984:	888001cc 	andi	r2,r17,7
 1021988:	103f9e1e 	bne	r2,zero,1021804 <__alt_data_end+0xff021804>
 102198c:	1804977a 	slli	r2,r3,29
 1021990:	8822d0fa 	srli	r17,r17,3
 1021994:	1810d0fa 	srli	r8,r3,3
 1021998:	9100004c 	andi	r4,r18,1
 102199c:	1444b03a 	or	r2,r2,r17
 10219a0:	00c1ffc4 	movi	r3,2047
 10219a4:	80c02826 	beq	r16,r3,1021a48 <__subdf3+0x2d0>
 10219a8:	01400434 	movhi	r5,16
 10219ac:	297fffc4 	addi	r5,r5,-1
 10219b0:	80e0703a 	and	r16,r16,r3
 10219b4:	414a703a 	and	r5,r8,r5
 10219b8:	003fa806 	br	102185c <__alt_data_end+0xff02185c>
 10219bc:	0080630e 	bge	zero,r2,1021b4c <__subdf3+0x3d4>
 10219c0:	48003026 	beq	r9,zero,1021a84 <__subdf3+0x30c>
 10219c4:	0101ffc4 	movi	r4,2047
 10219c8:	813f8c26 	beq	r16,r4,10217fc <__alt_data_end+0xff0217fc>
 10219cc:	29402034 	orhi	r5,r5,128
 10219d0:	01000e04 	movi	r4,56
 10219d4:	2080a90e 	bge	r4,r2,1021c7c <__subdf3+0x504>
 10219d8:	298cb03a 	or	r6,r5,r6
 10219dc:	3012c03a 	cmpne	r9,r6,zero
 10219e0:	0005883a 	mov	r2,zero
 10219e4:	4c53883a 	add	r9,r9,r17
 10219e8:	4c63803a 	cmpltu	r17,r9,r17
 10219ec:	10c7883a 	add	r3,r2,r3
 10219f0:	88c7883a 	add	r3,r17,r3
 10219f4:	4823883a 	mov	r17,r9
 10219f8:	1880202c 	andhi	r2,r3,128
 10219fc:	1000d026 	beq	r2,zero,1021d40 <__subdf3+0x5c8>
 1021a00:	84000044 	addi	r16,r16,1
 1021a04:	0081ffc4 	movi	r2,2047
 1021a08:	8080fe26 	beq	r16,r2,1021e04 <__subdf3+0x68c>
 1021a0c:	00bfe034 	movhi	r2,65408
 1021a10:	10bfffc4 	addi	r2,r2,-1
 1021a14:	1886703a 	and	r3,r3,r2
 1021a18:	880ad07a 	srli	r5,r17,1
 1021a1c:	180497fa 	slli	r2,r3,31
 1021a20:	8900004c 	andi	r4,r17,1
 1021a24:	2922b03a 	or	r17,r5,r4
 1021a28:	1806d07a 	srli	r3,r3,1
 1021a2c:	1462b03a 	or	r17,r2,r17
 1021a30:	3825883a 	mov	r18,r7
 1021a34:	003f7106 	br	10217fc <__alt_data_end+0xff0217fc>
 1021a38:	2984b03a 	or	r2,r5,r6
 1021a3c:	103f6826 	beq	r2,zero,10217e0 <__alt_data_end+0xff0217e0>
 1021a40:	39c03fcc 	andi	r7,r7,255
 1021a44:	003f6706 	br	10217e4 <__alt_data_end+0xff0217e4>
 1021a48:	4086b03a 	or	r3,r8,r2
 1021a4c:	18015226 	beq	r3,zero,1021f98 <__subdf3+0x820>
 1021a50:	00c00434 	movhi	r3,16
 1021a54:	41400234 	orhi	r5,r8,8
 1021a58:	18ffffc4 	addi	r3,r3,-1
 1021a5c:	28ca703a 	and	r5,r5,r3
 1021a60:	003f7e06 	br	102185c <__alt_data_end+0xff02185c>
 1021a64:	10bfffc4 	addi	r2,r2,-1
 1021a68:	1000491e 	bne	r2,zero,1021b90 <__subdf3+0x418>
 1021a6c:	898fc83a 	sub	r7,r17,r6
 1021a70:	89e3803a 	cmpltu	r17,r17,r7
 1021a74:	1947c83a 	sub	r3,r3,r5
 1021a78:	1c47c83a 	sub	r3,r3,r17
 1021a7c:	3823883a 	mov	r17,r7
 1021a80:	003f9b06 	br	10218f0 <__alt_data_end+0xff0218f0>
 1021a84:	2988b03a 	or	r4,r5,r6
 1021a88:	203f5c26 	beq	r4,zero,10217fc <__alt_data_end+0xff0217fc>
 1021a8c:	10bfffc4 	addi	r2,r2,-1
 1021a90:	1000931e 	bne	r2,zero,1021ce0 <__subdf3+0x568>
 1021a94:	898d883a 	add	r6,r17,r6
 1021a98:	3463803a 	cmpltu	r17,r6,r17
 1021a9c:	1947883a 	add	r3,r3,r5
 1021aa0:	88c7883a 	add	r3,r17,r3
 1021aa4:	3023883a 	mov	r17,r6
 1021aa8:	003fd306 	br	10219f8 <__alt_data_end+0xff0219f8>
 1021aac:	1000541e 	bne	r2,zero,1021c00 <__subdf3+0x488>
 1021ab0:	80800044 	addi	r2,r16,1
 1021ab4:	1081ffcc 	andi	r2,r2,2047
 1021ab8:	01000044 	movi	r4,1
 1021abc:	2080a20e 	bge	r4,r2,1021d48 <__subdf3+0x5d0>
 1021ac0:	8989c83a 	sub	r4,r17,r6
 1021ac4:	8905803a 	cmpltu	r2,r17,r4
 1021ac8:	1967c83a 	sub	r19,r3,r5
 1021acc:	98a7c83a 	sub	r19,r19,r2
 1021ad0:	9880202c 	andhi	r2,r19,128
 1021ad4:	10006326 	beq	r2,zero,1021c64 <__subdf3+0x4ec>
 1021ad8:	3463c83a 	sub	r17,r6,r17
 1021adc:	28c7c83a 	sub	r3,r5,r3
 1021ae0:	344d803a 	cmpltu	r6,r6,r17
 1021ae4:	19a7c83a 	sub	r19,r3,r6
 1021ae8:	3825883a 	mov	r18,r7
 1021aec:	983f861e 	bne	r19,zero,1021908 <__alt_data_end+0xff021908>
 1021af0:	8809883a 	mov	r4,r17
 1021af4:	10222780 	call	1022278 <__clzsi2>
 1021af8:	10800804 	addi	r2,r2,32
 1021afc:	113ffe04 	addi	r4,r2,-8
 1021b00:	00c007c4 	movi	r3,31
 1021b04:	193f850e 	bge	r3,r4,102191c <__alt_data_end+0xff02191c>
 1021b08:	10bff604 	addi	r2,r2,-40
 1021b0c:	8884983a 	sll	r2,r17,r2
 1021b10:	0023883a 	mov	r17,zero
 1021b14:	243f880e 	bge	r4,r16,1021938 <__alt_data_end+0xff021938>
 1021b18:	00ffe034 	movhi	r3,65408
 1021b1c:	18ffffc4 	addi	r3,r3,-1
 1021b20:	8121c83a 	sub	r16,r16,r4
 1021b24:	10c6703a 	and	r3,r2,r3
 1021b28:	003f3406 	br	10217fc <__alt_data_end+0xff0217fc>
 1021b2c:	9100004c 	andi	r4,r18,1
 1021b30:	000b883a 	mov	r5,zero
 1021b34:	0005883a 	mov	r2,zero
 1021b38:	003f4806 	br	102185c <__alt_data_end+0xff02185c>
 1021b3c:	298cb03a 	or	r6,r5,r6
 1021b40:	300cc03a 	cmpne	r6,r6,zero
 1021b44:	0005883a 	mov	r2,zero
 1021b48:	003f6406 	br	10218dc <__alt_data_end+0xff0218dc>
 1021b4c:	10009a1e 	bne	r2,zero,1021db8 <__subdf3+0x640>
 1021b50:	82400044 	addi	r9,r16,1
 1021b54:	4881ffcc 	andi	r2,r9,2047
 1021b58:	02800044 	movi	r10,1
 1021b5c:	5080670e 	bge	r10,r2,1021cfc <__subdf3+0x584>
 1021b60:	0081ffc4 	movi	r2,2047
 1021b64:	4880af26 	beq	r9,r2,1021e24 <__subdf3+0x6ac>
 1021b68:	898d883a 	add	r6,r17,r6
 1021b6c:	1945883a 	add	r2,r3,r5
 1021b70:	3447803a 	cmpltu	r3,r6,r17
 1021b74:	1887883a 	add	r3,r3,r2
 1021b78:	182297fa 	slli	r17,r3,31
 1021b7c:	300cd07a 	srli	r6,r6,1
 1021b80:	1806d07a 	srli	r3,r3,1
 1021b84:	4821883a 	mov	r16,r9
 1021b88:	89a2b03a 	or	r17,r17,r6
 1021b8c:	003f1b06 	br	10217fc <__alt_data_end+0xff0217fc>
 1021b90:	0101ffc4 	movi	r4,2047
 1021b94:	813f441e 	bne	r16,r4,10218a8 <__alt_data_end+0xff0218a8>
 1021b98:	003f1806 	br	10217fc <__alt_data_end+0xff0217fc>
 1021b9c:	843ff844 	addi	r16,r16,-31
 1021ba0:	01400804 	movi	r5,32
 1021ba4:	1408d83a 	srl	r4,r2,r16
 1021ba8:	19405026 	beq	r3,r5,1021cec <__subdf3+0x574>
 1021bac:	01401004 	movi	r5,64
 1021bb0:	28c7c83a 	sub	r3,r5,r3
 1021bb4:	10c4983a 	sll	r2,r2,r3
 1021bb8:	88a2b03a 	or	r17,r17,r2
 1021bbc:	8822c03a 	cmpne	r17,r17,zero
 1021bc0:	2462b03a 	or	r17,r4,r17
 1021bc4:	0007883a 	mov	r3,zero
 1021bc8:	0021883a 	mov	r16,zero
 1021bcc:	003f6d06 	br	1021984 <__alt_data_end+0xff021984>
 1021bd0:	11fff804 	addi	r7,r2,-32
 1021bd4:	01000804 	movi	r4,32
 1021bd8:	29ced83a 	srl	r7,r5,r7
 1021bdc:	11004526 	beq	r2,r4,1021cf4 <__subdf3+0x57c>
 1021be0:	01001004 	movi	r4,64
 1021be4:	2089c83a 	sub	r4,r4,r2
 1021be8:	2904983a 	sll	r2,r5,r4
 1021bec:	118cb03a 	or	r6,r2,r6
 1021bf0:	300cc03a 	cmpne	r6,r6,zero
 1021bf4:	398cb03a 	or	r6,r7,r6
 1021bf8:	0005883a 	mov	r2,zero
 1021bfc:	003f3706 	br	10218dc <__alt_data_end+0xff0218dc>
 1021c00:	80002a26 	beq	r16,zero,1021cac <__subdf3+0x534>
 1021c04:	0101ffc4 	movi	r4,2047
 1021c08:	49006626 	beq	r9,r4,1021da4 <__subdf3+0x62c>
 1021c0c:	0085c83a 	sub	r2,zero,r2
 1021c10:	18c02034 	orhi	r3,r3,128
 1021c14:	01000e04 	movi	r4,56
 1021c18:	20807e16 	blt	r4,r2,1021e14 <__subdf3+0x69c>
 1021c1c:	010007c4 	movi	r4,31
 1021c20:	2080e716 	blt	r4,r2,1021fc0 <__subdf3+0x848>
 1021c24:	01000804 	movi	r4,32
 1021c28:	2089c83a 	sub	r4,r4,r2
 1021c2c:	1914983a 	sll	r10,r3,r4
 1021c30:	8890d83a 	srl	r8,r17,r2
 1021c34:	8908983a 	sll	r4,r17,r4
 1021c38:	1884d83a 	srl	r2,r3,r2
 1021c3c:	5222b03a 	or	r17,r10,r8
 1021c40:	2006c03a 	cmpne	r3,r4,zero
 1021c44:	88e2b03a 	or	r17,r17,r3
 1021c48:	3463c83a 	sub	r17,r6,r17
 1021c4c:	2885c83a 	sub	r2,r5,r2
 1021c50:	344d803a 	cmpltu	r6,r6,r17
 1021c54:	1187c83a 	sub	r3,r2,r6
 1021c58:	4821883a 	mov	r16,r9
 1021c5c:	3825883a 	mov	r18,r7
 1021c60:	003f2306 	br	10218f0 <__alt_data_end+0xff0218f0>
 1021c64:	24d0b03a 	or	r8,r4,r19
 1021c68:	40001b1e 	bne	r8,zero,1021cd8 <__subdf3+0x560>
 1021c6c:	0005883a 	mov	r2,zero
 1021c70:	0009883a 	mov	r4,zero
 1021c74:	0021883a 	mov	r16,zero
 1021c78:	003f4906 	br	10219a0 <__alt_data_end+0xff0219a0>
 1021c7c:	010007c4 	movi	r4,31
 1021c80:	20803a16 	blt	r4,r2,1021d6c <__subdf3+0x5f4>
 1021c84:	01000804 	movi	r4,32
 1021c88:	2089c83a 	sub	r4,r4,r2
 1021c8c:	2912983a 	sll	r9,r5,r4
 1021c90:	3090d83a 	srl	r8,r6,r2
 1021c94:	3108983a 	sll	r4,r6,r4
 1021c98:	2884d83a 	srl	r2,r5,r2
 1021c9c:	4a12b03a 	or	r9,r9,r8
 1021ca0:	2008c03a 	cmpne	r4,r4,zero
 1021ca4:	4912b03a 	or	r9,r9,r4
 1021ca8:	003f4e06 	br	10219e4 <__alt_data_end+0xff0219e4>
 1021cac:	1c48b03a 	or	r4,r3,r17
 1021cb0:	20003c26 	beq	r4,zero,1021da4 <__subdf3+0x62c>
 1021cb4:	0084303a 	nor	r2,zero,r2
 1021cb8:	1000381e 	bne	r2,zero,1021d9c <__subdf3+0x624>
 1021cbc:	3463c83a 	sub	r17,r6,r17
 1021cc0:	28c5c83a 	sub	r2,r5,r3
 1021cc4:	344d803a 	cmpltu	r6,r6,r17
 1021cc8:	1187c83a 	sub	r3,r2,r6
 1021ccc:	4821883a 	mov	r16,r9
 1021cd0:	3825883a 	mov	r18,r7
 1021cd4:	003f0606 	br	10218f0 <__alt_data_end+0xff0218f0>
 1021cd8:	2023883a 	mov	r17,r4
 1021cdc:	003f0906 	br	1021904 <__alt_data_end+0xff021904>
 1021ce0:	0101ffc4 	movi	r4,2047
 1021ce4:	813f3a1e 	bne	r16,r4,10219d0 <__alt_data_end+0xff0219d0>
 1021ce8:	003ec406 	br	10217fc <__alt_data_end+0xff0217fc>
 1021cec:	0005883a 	mov	r2,zero
 1021cf0:	003fb106 	br	1021bb8 <__alt_data_end+0xff021bb8>
 1021cf4:	0005883a 	mov	r2,zero
 1021cf8:	003fbc06 	br	1021bec <__alt_data_end+0xff021bec>
 1021cfc:	1c44b03a 	or	r2,r3,r17
 1021d00:	80008e1e 	bne	r16,zero,1021f3c <__subdf3+0x7c4>
 1021d04:	1000c826 	beq	r2,zero,1022028 <__subdf3+0x8b0>
 1021d08:	2984b03a 	or	r2,r5,r6
 1021d0c:	103ebb26 	beq	r2,zero,10217fc <__alt_data_end+0xff0217fc>
 1021d10:	8989883a 	add	r4,r17,r6
 1021d14:	1945883a 	add	r2,r3,r5
 1021d18:	2447803a 	cmpltu	r3,r4,r17
 1021d1c:	1887883a 	add	r3,r3,r2
 1021d20:	1880202c 	andhi	r2,r3,128
 1021d24:	2023883a 	mov	r17,r4
 1021d28:	103f1626 	beq	r2,zero,1021984 <__alt_data_end+0xff021984>
 1021d2c:	00bfe034 	movhi	r2,65408
 1021d30:	10bfffc4 	addi	r2,r2,-1
 1021d34:	5021883a 	mov	r16,r10
 1021d38:	1886703a 	and	r3,r3,r2
 1021d3c:	003eaf06 	br	10217fc <__alt_data_end+0xff0217fc>
 1021d40:	3825883a 	mov	r18,r7
 1021d44:	003f0f06 	br	1021984 <__alt_data_end+0xff021984>
 1021d48:	1c44b03a 	or	r2,r3,r17
 1021d4c:	8000251e 	bne	r16,zero,1021de4 <__subdf3+0x66c>
 1021d50:	1000661e 	bne	r2,zero,1021eec <__subdf3+0x774>
 1021d54:	2990b03a 	or	r8,r5,r6
 1021d58:	40009626 	beq	r8,zero,1021fb4 <__subdf3+0x83c>
 1021d5c:	2807883a 	mov	r3,r5
 1021d60:	3023883a 	mov	r17,r6
 1021d64:	3825883a 	mov	r18,r7
 1021d68:	003ea406 	br	10217fc <__alt_data_end+0xff0217fc>
 1021d6c:	127ff804 	addi	r9,r2,-32
 1021d70:	01000804 	movi	r4,32
 1021d74:	2a52d83a 	srl	r9,r5,r9
 1021d78:	11008c26 	beq	r2,r4,1021fac <__subdf3+0x834>
 1021d7c:	01001004 	movi	r4,64
 1021d80:	2085c83a 	sub	r2,r4,r2
 1021d84:	2884983a 	sll	r2,r5,r2
 1021d88:	118cb03a 	or	r6,r2,r6
 1021d8c:	300cc03a 	cmpne	r6,r6,zero
 1021d90:	4992b03a 	or	r9,r9,r6
 1021d94:	0005883a 	mov	r2,zero
 1021d98:	003f1206 	br	10219e4 <__alt_data_end+0xff0219e4>
 1021d9c:	0101ffc4 	movi	r4,2047
 1021da0:	493f9c1e 	bne	r9,r4,1021c14 <__alt_data_end+0xff021c14>
 1021da4:	2807883a 	mov	r3,r5
 1021da8:	3023883a 	mov	r17,r6
 1021dac:	4821883a 	mov	r16,r9
 1021db0:	3825883a 	mov	r18,r7
 1021db4:	003e9106 	br	10217fc <__alt_data_end+0xff0217fc>
 1021db8:	80001f1e 	bne	r16,zero,1021e38 <__subdf3+0x6c0>
 1021dbc:	1c48b03a 	or	r4,r3,r17
 1021dc0:	20005a26 	beq	r4,zero,1021f2c <__subdf3+0x7b4>
 1021dc4:	0084303a 	nor	r2,zero,r2
 1021dc8:	1000561e 	bne	r2,zero,1021f24 <__subdf3+0x7ac>
 1021dcc:	89a3883a 	add	r17,r17,r6
 1021dd0:	1945883a 	add	r2,r3,r5
 1021dd4:	898d803a 	cmpltu	r6,r17,r6
 1021dd8:	3087883a 	add	r3,r6,r2
 1021ddc:	4821883a 	mov	r16,r9
 1021de0:	003f0506 	br	10219f8 <__alt_data_end+0xff0219f8>
 1021de4:	10002b1e 	bne	r2,zero,1021e94 <__subdf3+0x71c>
 1021de8:	2984b03a 	or	r2,r5,r6
 1021dec:	10008026 	beq	r2,zero,1021ff0 <__subdf3+0x878>
 1021df0:	2807883a 	mov	r3,r5
 1021df4:	3023883a 	mov	r17,r6
 1021df8:	3825883a 	mov	r18,r7
 1021dfc:	0401ffc4 	movi	r16,2047
 1021e00:	003e7e06 	br	10217fc <__alt_data_end+0xff0217fc>
 1021e04:	3809883a 	mov	r4,r7
 1021e08:	0011883a 	mov	r8,zero
 1021e0c:	0005883a 	mov	r2,zero
 1021e10:	003ee306 	br	10219a0 <__alt_data_end+0xff0219a0>
 1021e14:	1c62b03a 	or	r17,r3,r17
 1021e18:	8822c03a 	cmpne	r17,r17,zero
 1021e1c:	0005883a 	mov	r2,zero
 1021e20:	003f8906 	br	1021c48 <__alt_data_end+0xff021c48>
 1021e24:	3809883a 	mov	r4,r7
 1021e28:	4821883a 	mov	r16,r9
 1021e2c:	0011883a 	mov	r8,zero
 1021e30:	0005883a 	mov	r2,zero
 1021e34:	003eda06 	br	10219a0 <__alt_data_end+0xff0219a0>
 1021e38:	0101ffc4 	movi	r4,2047
 1021e3c:	49003b26 	beq	r9,r4,1021f2c <__subdf3+0x7b4>
 1021e40:	0085c83a 	sub	r2,zero,r2
 1021e44:	18c02034 	orhi	r3,r3,128
 1021e48:	01000e04 	movi	r4,56
 1021e4c:	20806e16 	blt	r4,r2,1022008 <__subdf3+0x890>
 1021e50:	010007c4 	movi	r4,31
 1021e54:	20807716 	blt	r4,r2,1022034 <__subdf3+0x8bc>
 1021e58:	01000804 	movi	r4,32
 1021e5c:	2089c83a 	sub	r4,r4,r2
 1021e60:	1914983a 	sll	r10,r3,r4
 1021e64:	8890d83a 	srl	r8,r17,r2
 1021e68:	8908983a 	sll	r4,r17,r4
 1021e6c:	1884d83a 	srl	r2,r3,r2
 1021e70:	5222b03a 	or	r17,r10,r8
 1021e74:	2006c03a 	cmpne	r3,r4,zero
 1021e78:	88e2b03a 	or	r17,r17,r3
 1021e7c:	89a3883a 	add	r17,r17,r6
 1021e80:	1145883a 	add	r2,r2,r5
 1021e84:	898d803a 	cmpltu	r6,r17,r6
 1021e88:	3087883a 	add	r3,r6,r2
 1021e8c:	4821883a 	mov	r16,r9
 1021e90:	003ed906 	br	10219f8 <__alt_data_end+0xff0219f8>
 1021e94:	2984b03a 	or	r2,r5,r6
 1021e98:	10004226 	beq	r2,zero,1021fa4 <__subdf3+0x82c>
 1021e9c:	1808d0fa 	srli	r4,r3,3
 1021ea0:	8822d0fa 	srli	r17,r17,3
 1021ea4:	1806977a 	slli	r3,r3,29
 1021ea8:	2080022c 	andhi	r2,r4,8
 1021eac:	1c62b03a 	or	r17,r3,r17
 1021eb0:	10000826 	beq	r2,zero,1021ed4 <__subdf3+0x75c>
 1021eb4:	2812d0fa 	srli	r9,r5,3
 1021eb8:	4880022c 	andhi	r2,r9,8
 1021ebc:	1000051e 	bne	r2,zero,1021ed4 <__subdf3+0x75c>
 1021ec0:	300cd0fa 	srli	r6,r6,3
 1021ec4:	2804977a 	slli	r2,r5,29
 1021ec8:	4809883a 	mov	r4,r9
 1021ecc:	3825883a 	mov	r18,r7
 1021ed0:	11a2b03a 	or	r17,r2,r6
 1021ed4:	8806d77a 	srli	r3,r17,29
 1021ed8:	200890fa 	slli	r4,r4,3
 1021edc:	882290fa 	slli	r17,r17,3
 1021ee0:	0401ffc4 	movi	r16,2047
 1021ee4:	1906b03a 	or	r3,r3,r4
 1021ee8:	003e4406 	br	10217fc <__alt_data_end+0xff0217fc>
 1021eec:	2984b03a 	or	r2,r5,r6
 1021ef0:	103e4226 	beq	r2,zero,10217fc <__alt_data_end+0xff0217fc>
 1021ef4:	8989c83a 	sub	r4,r17,r6
 1021ef8:	8911803a 	cmpltu	r8,r17,r4
 1021efc:	1945c83a 	sub	r2,r3,r5
 1021f00:	1205c83a 	sub	r2,r2,r8
 1021f04:	1200202c 	andhi	r8,r2,128
 1021f08:	403e9a26 	beq	r8,zero,1021974 <__alt_data_end+0xff021974>
 1021f0c:	3463c83a 	sub	r17,r6,r17
 1021f10:	28c5c83a 	sub	r2,r5,r3
 1021f14:	344d803a 	cmpltu	r6,r6,r17
 1021f18:	1187c83a 	sub	r3,r2,r6
 1021f1c:	3825883a 	mov	r18,r7
 1021f20:	003e3606 	br	10217fc <__alt_data_end+0xff0217fc>
 1021f24:	0101ffc4 	movi	r4,2047
 1021f28:	493fc71e 	bne	r9,r4,1021e48 <__alt_data_end+0xff021e48>
 1021f2c:	2807883a 	mov	r3,r5
 1021f30:	3023883a 	mov	r17,r6
 1021f34:	4821883a 	mov	r16,r9
 1021f38:	003e3006 	br	10217fc <__alt_data_end+0xff0217fc>
 1021f3c:	10003626 	beq	r2,zero,1022018 <__subdf3+0x8a0>
 1021f40:	2984b03a 	or	r2,r5,r6
 1021f44:	10001726 	beq	r2,zero,1021fa4 <__subdf3+0x82c>
 1021f48:	1808d0fa 	srli	r4,r3,3
 1021f4c:	8822d0fa 	srli	r17,r17,3
 1021f50:	1806977a 	slli	r3,r3,29
 1021f54:	2080022c 	andhi	r2,r4,8
 1021f58:	1c62b03a 	or	r17,r3,r17
 1021f5c:	10000726 	beq	r2,zero,1021f7c <__subdf3+0x804>
 1021f60:	2812d0fa 	srli	r9,r5,3
 1021f64:	4880022c 	andhi	r2,r9,8
 1021f68:	1000041e 	bne	r2,zero,1021f7c <__subdf3+0x804>
 1021f6c:	300cd0fa 	srli	r6,r6,3
 1021f70:	2804977a 	slli	r2,r5,29
 1021f74:	4809883a 	mov	r4,r9
 1021f78:	11a2b03a 	or	r17,r2,r6
 1021f7c:	8806d77a 	srli	r3,r17,29
 1021f80:	200890fa 	slli	r4,r4,3
 1021f84:	882290fa 	slli	r17,r17,3
 1021f88:	3825883a 	mov	r18,r7
 1021f8c:	1906b03a 	or	r3,r3,r4
 1021f90:	0401ffc4 	movi	r16,2047
 1021f94:	003e1906 	br	10217fc <__alt_data_end+0xff0217fc>
 1021f98:	000b883a 	mov	r5,zero
 1021f9c:	0005883a 	mov	r2,zero
 1021fa0:	003e2e06 	br	102185c <__alt_data_end+0xff02185c>
 1021fa4:	0401ffc4 	movi	r16,2047
 1021fa8:	003e1406 	br	10217fc <__alt_data_end+0xff0217fc>
 1021fac:	0005883a 	mov	r2,zero
 1021fb0:	003f7506 	br	1021d88 <__alt_data_end+0xff021d88>
 1021fb4:	0005883a 	mov	r2,zero
 1021fb8:	0009883a 	mov	r4,zero
 1021fbc:	003e7806 	br	10219a0 <__alt_data_end+0xff0219a0>
 1021fc0:	123ff804 	addi	r8,r2,-32
 1021fc4:	01000804 	movi	r4,32
 1021fc8:	1a10d83a 	srl	r8,r3,r8
 1021fcc:	11002526 	beq	r2,r4,1022064 <__subdf3+0x8ec>
 1021fd0:	01001004 	movi	r4,64
 1021fd4:	2085c83a 	sub	r2,r4,r2
 1021fd8:	1884983a 	sll	r2,r3,r2
 1021fdc:	1444b03a 	or	r2,r2,r17
 1021fe0:	1004c03a 	cmpne	r2,r2,zero
 1021fe4:	40a2b03a 	or	r17,r8,r2
 1021fe8:	0005883a 	mov	r2,zero
 1021fec:	003f1606 	br	1021c48 <__alt_data_end+0xff021c48>
 1021ff0:	02000434 	movhi	r8,16
 1021ff4:	0009883a 	mov	r4,zero
 1021ff8:	423fffc4 	addi	r8,r8,-1
 1021ffc:	00bfffc4 	movi	r2,-1
 1022000:	0401ffc4 	movi	r16,2047
 1022004:	003e6606 	br	10219a0 <__alt_data_end+0xff0219a0>
 1022008:	1c62b03a 	or	r17,r3,r17
 102200c:	8822c03a 	cmpne	r17,r17,zero
 1022010:	0005883a 	mov	r2,zero
 1022014:	003f9906 	br	1021e7c <__alt_data_end+0xff021e7c>
 1022018:	2807883a 	mov	r3,r5
 102201c:	3023883a 	mov	r17,r6
 1022020:	0401ffc4 	movi	r16,2047
 1022024:	003df506 	br	10217fc <__alt_data_end+0xff0217fc>
 1022028:	2807883a 	mov	r3,r5
 102202c:	3023883a 	mov	r17,r6
 1022030:	003df206 	br	10217fc <__alt_data_end+0xff0217fc>
 1022034:	123ff804 	addi	r8,r2,-32
 1022038:	01000804 	movi	r4,32
 102203c:	1a10d83a 	srl	r8,r3,r8
 1022040:	11000a26 	beq	r2,r4,102206c <__subdf3+0x8f4>
 1022044:	01001004 	movi	r4,64
 1022048:	2085c83a 	sub	r2,r4,r2
 102204c:	1884983a 	sll	r2,r3,r2
 1022050:	1444b03a 	or	r2,r2,r17
 1022054:	1004c03a 	cmpne	r2,r2,zero
 1022058:	40a2b03a 	or	r17,r8,r2
 102205c:	0005883a 	mov	r2,zero
 1022060:	003f8606 	br	1021e7c <__alt_data_end+0xff021e7c>
 1022064:	0005883a 	mov	r2,zero
 1022068:	003fdc06 	br	1021fdc <__alt_data_end+0xff021fdc>
 102206c:	0005883a 	mov	r2,zero
 1022070:	003ff706 	br	1022050 <__alt_data_end+0xff022050>

01022074 <__fixdfsi>:
 1022074:	280cd53a 	srli	r6,r5,20
 1022078:	00c00434 	movhi	r3,16
 102207c:	18ffffc4 	addi	r3,r3,-1
 1022080:	3181ffcc 	andi	r6,r6,2047
 1022084:	01c0ff84 	movi	r7,1022
 1022088:	28c6703a 	and	r3,r5,r3
 102208c:	280ad7fa 	srli	r5,r5,31
 1022090:	3980120e 	bge	r7,r6,10220dc <__fixdfsi+0x68>
 1022094:	00810744 	movi	r2,1053
 1022098:	11800c16 	blt	r2,r6,10220cc <__fixdfsi+0x58>
 102209c:	00810cc4 	movi	r2,1075
 10220a0:	1185c83a 	sub	r2,r2,r6
 10220a4:	01c007c4 	movi	r7,31
 10220a8:	18c00434 	orhi	r3,r3,16
 10220ac:	38800d16 	blt	r7,r2,10220e4 <__fixdfsi+0x70>
 10220b0:	31befb44 	addi	r6,r6,-1043
 10220b4:	2084d83a 	srl	r2,r4,r2
 10220b8:	1986983a 	sll	r3,r3,r6
 10220bc:	1884b03a 	or	r2,r3,r2
 10220c0:	28000726 	beq	r5,zero,10220e0 <__fixdfsi+0x6c>
 10220c4:	0085c83a 	sub	r2,zero,r2
 10220c8:	f800283a 	ret
 10220cc:	00a00034 	movhi	r2,32768
 10220d0:	10bfffc4 	addi	r2,r2,-1
 10220d4:	2885883a 	add	r2,r5,r2
 10220d8:	f800283a 	ret
 10220dc:	0005883a 	mov	r2,zero
 10220e0:	f800283a 	ret
 10220e4:	008104c4 	movi	r2,1043
 10220e8:	1185c83a 	sub	r2,r2,r6
 10220ec:	1884d83a 	srl	r2,r3,r2
 10220f0:	003ff306 	br	10220c0 <__alt_data_end+0xff0220c0>

010220f4 <__floatsidf>:
 10220f4:	defffd04 	addi	sp,sp,-12
 10220f8:	dfc00215 	stw	ra,8(sp)
 10220fc:	dc400115 	stw	r17,4(sp)
 1022100:	dc000015 	stw	r16,0(sp)
 1022104:	20002b26 	beq	r4,zero,10221b4 <__floatsidf+0xc0>
 1022108:	2023883a 	mov	r17,r4
 102210c:	2020d7fa 	srli	r16,r4,31
 1022110:	20002d16 	blt	r4,zero,10221c8 <__floatsidf+0xd4>
 1022114:	8809883a 	mov	r4,r17
 1022118:	10222780 	call	1022278 <__clzsi2>
 102211c:	01410784 	movi	r5,1054
 1022120:	288bc83a 	sub	r5,r5,r2
 1022124:	01010cc4 	movi	r4,1075
 1022128:	2149c83a 	sub	r4,r4,r5
 102212c:	00c007c4 	movi	r3,31
 1022130:	1900160e 	bge	r3,r4,102218c <__floatsidf+0x98>
 1022134:	00c104c4 	movi	r3,1043
 1022138:	1947c83a 	sub	r3,r3,r5
 102213c:	88c6983a 	sll	r3,r17,r3
 1022140:	00800434 	movhi	r2,16
 1022144:	10bfffc4 	addi	r2,r2,-1
 1022148:	1886703a 	and	r3,r3,r2
 102214c:	2941ffcc 	andi	r5,r5,2047
 1022150:	800d883a 	mov	r6,r16
 1022154:	0005883a 	mov	r2,zero
 1022158:	280a953a 	slli	r5,r5,20
 102215c:	31803fcc 	andi	r6,r6,255
 1022160:	01000434 	movhi	r4,16
 1022164:	300c97fa 	slli	r6,r6,31
 1022168:	213fffc4 	addi	r4,r4,-1
 102216c:	1906703a 	and	r3,r3,r4
 1022170:	1946b03a 	or	r3,r3,r5
 1022174:	1986b03a 	or	r3,r3,r6
 1022178:	dfc00217 	ldw	ra,8(sp)
 102217c:	dc400117 	ldw	r17,4(sp)
 1022180:	dc000017 	ldw	r16,0(sp)
 1022184:	dec00304 	addi	sp,sp,12
 1022188:	f800283a 	ret
 102218c:	00c002c4 	movi	r3,11
 1022190:	1887c83a 	sub	r3,r3,r2
 1022194:	88c6d83a 	srl	r3,r17,r3
 1022198:	8904983a 	sll	r2,r17,r4
 102219c:	01000434 	movhi	r4,16
 10221a0:	213fffc4 	addi	r4,r4,-1
 10221a4:	2941ffcc 	andi	r5,r5,2047
 10221a8:	1906703a 	and	r3,r3,r4
 10221ac:	800d883a 	mov	r6,r16
 10221b0:	003fe906 	br	1022158 <__alt_data_end+0xff022158>
 10221b4:	000d883a 	mov	r6,zero
 10221b8:	000b883a 	mov	r5,zero
 10221bc:	0007883a 	mov	r3,zero
 10221c0:	0005883a 	mov	r2,zero
 10221c4:	003fe406 	br	1022158 <__alt_data_end+0xff022158>
 10221c8:	0123c83a 	sub	r17,zero,r4
 10221cc:	003fd106 	br	1022114 <__alt_data_end+0xff022114>

010221d0 <__floatunsidf>:
 10221d0:	defffe04 	addi	sp,sp,-8
 10221d4:	dc000015 	stw	r16,0(sp)
 10221d8:	dfc00115 	stw	ra,4(sp)
 10221dc:	2021883a 	mov	r16,r4
 10221e0:	20002226 	beq	r4,zero,102226c <__floatunsidf+0x9c>
 10221e4:	10222780 	call	1022278 <__clzsi2>
 10221e8:	01010784 	movi	r4,1054
 10221ec:	2089c83a 	sub	r4,r4,r2
 10221f0:	01810cc4 	movi	r6,1075
 10221f4:	310dc83a 	sub	r6,r6,r4
 10221f8:	00c007c4 	movi	r3,31
 10221fc:	1980120e 	bge	r3,r6,1022248 <__floatunsidf+0x78>
 1022200:	00c104c4 	movi	r3,1043
 1022204:	1907c83a 	sub	r3,r3,r4
 1022208:	80ca983a 	sll	r5,r16,r3
 102220c:	00800434 	movhi	r2,16
 1022210:	10bfffc4 	addi	r2,r2,-1
 1022214:	2101ffcc 	andi	r4,r4,2047
 1022218:	0021883a 	mov	r16,zero
 102221c:	288a703a 	and	r5,r5,r2
 1022220:	2008953a 	slli	r4,r4,20
 1022224:	00c00434 	movhi	r3,16
 1022228:	18ffffc4 	addi	r3,r3,-1
 102222c:	28c6703a 	and	r3,r5,r3
 1022230:	8005883a 	mov	r2,r16
 1022234:	1906b03a 	or	r3,r3,r4
 1022238:	dfc00117 	ldw	ra,4(sp)
 102223c:	dc000017 	ldw	r16,0(sp)
 1022240:	dec00204 	addi	sp,sp,8
 1022244:	f800283a 	ret
 1022248:	00c002c4 	movi	r3,11
 102224c:	188bc83a 	sub	r5,r3,r2
 1022250:	814ad83a 	srl	r5,r16,r5
 1022254:	00c00434 	movhi	r3,16
 1022258:	18ffffc4 	addi	r3,r3,-1
 102225c:	81a0983a 	sll	r16,r16,r6
 1022260:	2101ffcc 	andi	r4,r4,2047
 1022264:	28ca703a 	and	r5,r5,r3
 1022268:	003fed06 	br	1022220 <__alt_data_end+0xff022220>
 102226c:	0009883a 	mov	r4,zero
 1022270:	000b883a 	mov	r5,zero
 1022274:	003fea06 	br	1022220 <__alt_data_end+0xff022220>

01022278 <__clzsi2>:
 1022278:	00bfffd4 	movui	r2,65535
 102227c:	11000536 	bltu	r2,r4,1022294 <__clzsi2+0x1c>
 1022280:	00803fc4 	movi	r2,255
 1022284:	11000f36 	bltu	r2,r4,10222c4 <__clzsi2+0x4c>
 1022288:	00800804 	movi	r2,32
 102228c:	0007883a 	mov	r3,zero
 1022290:	00000506 	br	10222a8 <__clzsi2+0x30>
 1022294:	00804034 	movhi	r2,256
 1022298:	10bfffc4 	addi	r2,r2,-1
 102229c:	11000c2e 	bgeu	r2,r4,10222d0 <__clzsi2+0x58>
 10222a0:	00800204 	movi	r2,8
 10222a4:	00c00604 	movi	r3,24
 10222a8:	20c8d83a 	srl	r4,r4,r3
 10222ac:	00c040b4 	movhi	r3,258
 10222b0:	18da3904 	addi	r3,r3,26852
 10222b4:	1909883a 	add	r4,r3,r4
 10222b8:	20c00003 	ldbu	r3,0(r4)
 10222bc:	10c5c83a 	sub	r2,r2,r3
 10222c0:	f800283a 	ret
 10222c4:	00800604 	movi	r2,24
 10222c8:	00c00204 	movi	r3,8
 10222cc:	003ff606 	br	10222a8 <__alt_data_end+0xff0222a8>
 10222d0:	00800404 	movi	r2,16
 10222d4:	1007883a 	mov	r3,r2
 10222d8:	003ff306 	br	10222a8 <__alt_data_end+0xff0222a8>

010222dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10222dc:	defffe04 	addi	sp,sp,-8
 10222e0:	dfc00115 	stw	ra,4(sp)
 10222e4:	df000015 	stw	fp,0(sp)
 10222e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10222ec:	d0a01517 	ldw	r2,-32684(gp)
 10222f0:	10000326 	beq	r2,zero,1022300 <alt_get_errno+0x24>
 10222f4:	d0a01517 	ldw	r2,-32684(gp)
 10222f8:	103ee83a 	callr	r2
 10222fc:	00000106 	br	1022304 <alt_get_errno+0x28>
 1022300:	d0a73004 	addi	r2,gp,-25408
}
 1022304:	e037883a 	mov	sp,fp
 1022308:	dfc00117 	ldw	ra,4(sp)
 102230c:	df000017 	ldw	fp,0(sp)
 1022310:	dec00204 	addi	sp,sp,8
 1022314:	f800283a 	ret

01022318 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1022318:	defffb04 	addi	sp,sp,-20
 102231c:	dfc00415 	stw	ra,16(sp)
 1022320:	df000315 	stw	fp,12(sp)
 1022324:	df000304 	addi	fp,sp,12
 1022328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 102232c:	e0bfff17 	ldw	r2,-4(fp)
 1022330:	10000616 	blt	r2,zero,102234c <close+0x34>
 1022334:	e0bfff17 	ldw	r2,-4(fp)
 1022338:	10c00324 	muli	r3,r2,12
 102233c:	008040b4 	movhi	r2,258
 1022340:	109cea04 	addi	r2,r2,29608
 1022344:	1885883a 	add	r2,r3,r2
 1022348:	00000106 	br	1022350 <close+0x38>
 102234c:	0005883a 	mov	r2,zero
 1022350:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1022354:	e0bffd17 	ldw	r2,-12(fp)
 1022358:	10001926 	beq	r2,zero,10223c0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 102235c:	e0bffd17 	ldw	r2,-12(fp)
 1022360:	10800017 	ldw	r2,0(r2)
 1022364:	10800417 	ldw	r2,16(r2)
 1022368:	10000626 	beq	r2,zero,1022384 <close+0x6c>
 102236c:	e0bffd17 	ldw	r2,-12(fp)
 1022370:	10800017 	ldw	r2,0(r2)
 1022374:	10800417 	ldw	r2,16(r2)
 1022378:	e13ffd17 	ldw	r4,-12(fp)
 102237c:	103ee83a 	callr	r2
 1022380:	00000106 	br	1022388 <close+0x70>
 1022384:	0005883a 	mov	r2,zero
 1022388:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 102238c:	e13fff17 	ldw	r4,-4(fp)
 1022390:	1022d080 	call	1022d08 <alt_release_fd>
    if (rval < 0)
 1022394:	e0bffe17 	ldw	r2,-8(fp)
 1022398:	1000070e 	bge	r2,zero,10223b8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 102239c:	10222dc0 	call	10222dc <alt_get_errno>
 10223a0:	1007883a 	mov	r3,r2
 10223a4:	e0bffe17 	ldw	r2,-8(fp)
 10223a8:	0085c83a 	sub	r2,zero,r2
 10223ac:	18800015 	stw	r2,0(r3)
      return -1;
 10223b0:	00bfffc4 	movi	r2,-1
 10223b4:	00000706 	br	10223d4 <close+0xbc>
    }
    return 0;
 10223b8:	0005883a 	mov	r2,zero
 10223bc:	00000506 	br	10223d4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10223c0:	10222dc0 	call	10222dc <alt_get_errno>
 10223c4:	1007883a 	mov	r3,r2
 10223c8:	00801444 	movi	r2,81
 10223cc:	18800015 	stw	r2,0(r3)
    return -1;
 10223d0:	00bfffc4 	movi	r2,-1
  }
}
 10223d4:	e037883a 	mov	sp,fp
 10223d8:	dfc00117 	ldw	ra,4(sp)
 10223dc:	df000017 	ldw	fp,0(sp)
 10223e0:	dec00204 	addi	sp,sp,8
 10223e4:	f800283a 	ret

010223e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10223e8:	defffc04 	addi	sp,sp,-16
 10223ec:	df000315 	stw	fp,12(sp)
 10223f0:	df000304 	addi	fp,sp,12
 10223f4:	e13ffd15 	stw	r4,-12(fp)
 10223f8:	e17ffe15 	stw	r5,-8(fp)
 10223fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1022400:	e0bfff17 	ldw	r2,-4(fp)
}
 1022404:	e037883a 	mov	sp,fp
 1022408:	df000017 	ldw	fp,0(sp)
 102240c:	dec00104 	addi	sp,sp,4
 1022410:	f800283a 	ret

01022414 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1022414:	defffd04 	addi	sp,sp,-12
 1022418:	df000215 	stw	fp,8(sp)
 102241c:	df000204 	addi	fp,sp,8
 1022420:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1022424:	0001883a 	nop
 1022428:	e0bfff17 	ldw	r2,-4(fp)
 102242c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1022430:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1022434:	10000226 	beq	r2,zero,1022440 <_exit+0x2c>
    ALT_SIM_FAIL();
 1022438:	002af070 	cmpltui	zero,zero,43969
 102243c:	00000106 	br	1022444 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1022440:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1022444:	003fff06 	br	1022444 <__alt_data_end+0xff022444>

01022448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022448:	defffe04 	addi	sp,sp,-8
 102244c:	dfc00115 	stw	ra,4(sp)
 1022450:	df000015 	stw	fp,0(sp)
 1022454:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1022458:	d0a01517 	ldw	r2,-32684(gp)
 102245c:	10000326 	beq	r2,zero,102246c <alt_get_errno+0x24>
 1022460:	d0a01517 	ldw	r2,-32684(gp)
 1022464:	103ee83a 	callr	r2
 1022468:	00000106 	br	1022470 <alt_get_errno+0x28>
 102246c:	d0a73004 	addi	r2,gp,-25408
}
 1022470:	e037883a 	mov	sp,fp
 1022474:	dfc00117 	ldw	ra,4(sp)
 1022478:	df000017 	ldw	fp,0(sp)
 102247c:	dec00204 	addi	sp,sp,8
 1022480:	f800283a 	ret

01022484 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1022484:	defffb04 	addi	sp,sp,-20
 1022488:	dfc00415 	stw	ra,16(sp)
 102248c:	df000315 	stw	fp,12(sp)
 1022490:	df000304 	addi	fp,sp,12
 1022494:	e13ffe15 	stw	r4,-8(fp)
 1022498:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102249c:	e0bffe17 	ldw	r2,-8(fp)
 10224a0:	10000616 	blt	r2,zero,10224bc <fstat+0x38>
 10224a4:	e0bffe17 	ldw	r2,-8(fp)
 10224a8:	10c00324 	muli	r3,r2,12
 10224ac:	008040b4 	movhi	r2,258
 10224b0:	109cea04 	addi	r2,r2,29608
 10224b4:	1885883a 	add	r2,r3,r2
 10224b8:	00000106 	br	10224c0 <fstat+0x3c>
 10224bc:	0005883a 	mov	r2,zero
 10224c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 10224c4:	e0bffd17 	ldw	r2,-12(fp)
 10224c8:	10001026 	beq	r2,zero,102250c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10224cc:	e0bffd17 	ldw	r2,-12(fp)
 10224d0:	10800017 	ldw	r2,0(r2)
 10224d4:	10800817 	ldw	r2,32(r2)
 10224d8:	10000726 	beq	r2,zero,10224f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 10224dc:	e0bffd17 	ldw	r2,-12(fp)
 10224e0:	10800017 	ldw	r2,0(r2)
 10224e4:	10800817 	ldw	r2,32(r2)
 10224e8:	e17fff17 	ldw	r5,-4(fp)
 10224ec:	e13ffd17 	ldw	r4,-12(fp)
 10224f0:	103ee83a 	callr	r2
 10224f4:	00000a06 	br	1022520 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10224f8:	e0bfff17 	ldw	r2,-4(fp)
 10224fc:	00c80004 	movi	r3,8192
 1022500:	10c00115 	stw	r3,4(r2)
      return 0;
 1022504:	0005883a 	mov	r2,zero
 1022508:	00000506 	br	1022520 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 102250c:	10224480 	call	1022448 <alt_get_errno>
 1022510:	1007883a 	mov	r3,r2
 1022514:	00801444 	movi	r2,81
 1022518:	18800015 	stw	r2,0(r3)
    return -1;
 102251c:	00bfffc4 	movi	r2,-1
  }
}
 1022520:	e037883a 	mov	sp,fp
 1022524:	dfc00117 	ldw	ra,4(sp)
 1022528:	df000017 	ldw	fp,0(sp)
 102252c:	dec00204 	addi	sp,sp,8
 1022530:	f800283a 	ret

01022534 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1022534:	deffff04 	addi	sp,sp,-4
 1022538:	df000015 	stw	fp,0(sp)
 102253c:	d839883a 	mov	fp,sp
  return 0;
 1022540:	0005883a 	mov	r2,zero
}
 1022544:	e037883a 	mov	sp,fp
 1022548:	df000017 	ldw	fp,0(sp)
 102254c:	dec00104 	addi	sp,sp,4
 1022550:	f800283a 	ret

01022554 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1022554:	defff104 	addi	sp,sp,-60
 1022558:	df000e15 	stw	fp,56(sp)
 102255c:	df000e04 	addi	fp,sp,56
 1022560:	e13ffd15 	stw	r4,-12(fp)
 1022564:	e17ffe15 	stw	r5,-8(fp)
 1022568:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 102256c:	00bffa84 	movi	r2,-22
 1022570:	e0bff215 	stw	r2,-56(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1022574:	e0bffd17 	ldw	r2,-12(fp)
 1022578:	10800828 	cmpgeui	r2,r2,32
 102257c:	10004c1e 	bne	r2,zero,10226b0 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1022580:	0005303a 	rdctl	r2,status
 1022584:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022588:	e0fff617 	ldw	r3,-40(fp)
 102258c:	00bfff84 	movi	r2,-2
 1022590:	1884703a 	and	r2,r3,r2
 1022594:	1001703a 	wrctl	status,r2
  
  return context;
 1022598:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 102259c:	e0bff415 	stw	r2,-48(fp)

    alt_irq[id].handler = handler;
 10225a0:	008060f4 	movhi	r2,387
 10225a4:	10a98204 	addi	r2,r2,-23032
 10225a8:	e0fffd17 	ldw	r3,-12(fp)
 10225ac:	180690fa 	slli	r3,r3,3
 10225b0:	10c5883a 	add	r2,r2,r3
 10225b4:	e0ffff17 	ldw	r3,-4(fp)
 10225b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 10225bc:	008060f4 	movhi	r2,387
 10225c0:	10a98204 	addi	r2,r2,-23032
 10225c4:	e0fffd17 	ldw	r3,-12(fp)
 10225c8:	180690fa 	slli	r3,r3,3
 10225cc:	10c5883a 	add	r2,r2,r3
 10225d0:	10800104 	addi	r2,r2,4
 10225d4:	e0fffe17 	ldw	r3,-8(fp)
 10225d8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 10225dc:	e0bfff17 	ldw	r2,-4(fp)
 10225e0:	10001926 	beq	r2,zero,1022648 <alt_irq_register+0xf4>
 10225e4:	e0bffd17 	ldw	r2,-12(fp)
 10225e8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10225ec:	0005303a 	rdctl	r2,status
 10225f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10225f4:	e0fff717 	ldw	r3,-36(fp)
 10225f8:	00bfff84 	movi	r2,-2
 10225fc:	1884703a 	and	r2,r3,r2
 1022600:	1001703a 	wrctl	status,r2
  
  return context;
 1022604:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1022608:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 102260c:	00c00044 	movi	r3,1
 1022610:	e0bff317 	ldw	r2,-52(fp)
 1022614:	1884983a 	sll	r2,r3,r2
 1022618:	1007883a 	mov	r3,r2
 102261c:	d0a73117 	ldw	r2,-25404(gp)
 1022620:	1884b03a 	or	r2,r3,r2
 1022624:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1022628:	d0a73117 	ldw	r2,-25404(gp)
 102262c:	100170fa 	wrctl	ienable,r2
 1022630:	e0bff817 	ldw	r2,-32(fp)
 1022634:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022638:	e0bff917 	ldw	r2,-28(fp)
 102263c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1022640:	0005883a 	mov	r2,zero
 1022644:	00001906 	br	10226ac <alt_irq_register+0x158>
 1022648:	e0bffd17 	ldw	r2,-12(fp)
 102264c:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1022650:	0005303a 	rdctl	r2,status
 1022654:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022658:	e0fffa17 	ldw	r3,-24(fp)
 102265c:	00bfff84 	movi	r2,-2
 1022660:	1884703a 	and	r2,r3,r2
 1022664:	1001703a 	wrctl	status,r2
  
  return context;
 1022668:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 102266c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1022670:	00c00044 	movi	r3,1
 1022674:	e0bff517 	ldw	r2,-44(fp)
 1022678:	1884983a 	sll	r2,r3,r2
 102267c:	0084303a 	nor	r2,zero,r2
 1022680:	1007883a 	mov	r3,r2
 1022684:	d0a73117 	ldw	r2,-25404(gp)
 1022688:	1884703a 	and	r2,r3,r2
 102268c:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1022690:	d0a73117 	ldw	r2,-25404(gp)
 1022694:	100170fa 	wrctl	ienable,r2
 1022698:	e0bffb17 	ldw	r2,-20(fp)
 102269c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10226a0:	e0bffc17 	ldw	r2,-16(fp)
 10226a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10226a8:	0005883a 	mov	r2,zero
 10226ac:	e0bff215 	stw	r2,-56(fp)

    //alt_irq_enable_all(status);
  }
  return rc; 
 10226b0:	e0bff217 	ldw	r2,-56(fp)
}
 10226b4:	e037883a 	mov	sp,fp
 10226b8:	df000017 	ldw	fp,0(sp)
 10226bc:	dec00104 	addi	sp,sp,4
 10226c0:	f800283a 	ret

010226c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10226c4:	defffe04 	addi	sp,sp,-8
 10226c8:	dfc00115 	stw	ra,4(sp)
 10226cc:	df000015 	stw	fp,0(sp)
 10226d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10226d4:	d0a01517 	ldw	r2,-32684(gp)
 10226d8:	10000326 	beq	r2,zero,10226e8 <alt_get_errno+0x24>
 10226dc:	d0a01517 	ldw	r2,-32684(gp)
 10226e0:	103ee83a 	callr	r2
 10226e4:	00000106 	br	10226ec <alt_get_errno+0x28>
 10226e8:	d0a73004 	addi	r2,gp,-25408
}
 10226ec:	e037883a 	mov	sp,fp
 10226f0:	dfc00117 	ldw	ra,4(sp)
 10226f4:	df000017 	ldw	fp,0(sp)
 10226f8:	dec00204 	addi	sp,sp,8
 10226fc:	f800283a 	ret

01022700 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1022700:	deffed04 	addi	sp,sp,-76
 1022704:	dfc01215 	stw	ra,72(sp)
 1022708:	df001115 	stw	fp,68(sp)
 102270c:	df001104 	addi	fp,sp,68
 1022710:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1022714:	e0bfff17 	ldw	r2,-4(fp)
 1022718:	10000616 	blt	r2,zero,1022734 <isatty+0x34>
 102271c:	e0bfff17 	ldw	r2,-4(fp)
 1022720:	10c00324 	muli	r3,r2,12
 1022724:	008040b4 	movhi	r2,258
 1022728:	109cea04 	addi	r2,r2,29608
 102272c:	1885883a 	add	r2,r3,r2
 1022730:	00000106 	br	1022738 <isatty+0x38>
 1022734:	0005883a 	mov	r2,zero
 1022738:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 102273c:	e0bfef17 	ldw	r2,-68(fp)
 1022740:	10000e26 	beq	r2,zero,102277c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1022744:	e0bfef17 	ldw	r2,-68(fp)
 1022748:	10800017 	ldw	r2,0(r2)
 102274c:	10800817 	ldw	r2,32(r2)
 1022750:	1000021e 	bne	r2,zero,102275c <isatty+0x5c>
    {
      return 1;
 1022754:	00800044 	movi	r2,1
 1022758:	00000d06 	br	1022790 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 102275c:	e0bff004 	addi	r2,fp,-64
 1022760:	100b883a 	mov	r5,r2
 1022764:	e13fff17 	ldw	r4,-4(fp)
 1022768:	10224840 	call	1022484 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 102276c:	e0bff117 	ldw	r2,-60(fp)
 1022770:	10880020 	cmpeqi	r2,r2,8192
 1022774:	10803fcc 	andi	r2,r2,255
 1022778:	00000506 	br	1022790 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 102277c:	10226c40 	call	10226c4 <alt_get_errno>
 1022780:	1007883a 	mov	r3,r2
 1022784:	00801444 	movi	r2,81
 1022788:	18800015 	stw	r2,0(r3)
    return 0;
 102278c:	0005883a 	mov	r2,zero
  }
}
 1022790:	e037883a 	mov	sp,fp
 1022794:	dfc00117 	ldw	ra,4(sp)
 1022798:	df000017 	ldw	fp,0(sp)
 102279c:	dec00204 	addi	sp,sp,8
 10227a0:	f800283a 	ret

010227a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10227a4:	defffe04 	addi	sp,sp,-8
 10227a8:	dfc00115 	stw	ra,4(sp)
 10227ac:	df000015 	stw	fp,0(sp)
 10227b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10227b4:	d0a01517 	ldw	r2,-32684(gp)
 10227b8:	10000326 	beq	r2,zero,10227c8 <alt_get_errno+0x24>
 10227bc:	d0a01517 	ldw	r2,-32684(gp)
 10227c0:	103ee83a 	callr	r2
 10227c4:	00000106 	br	10227cc <alt_get_errno+0x28>
 10227c8:	d0a73004 	addi	r2,gp,-25408
}
 10227cc:	e037883a 	mov	sp,fp
 10227d0:	dfc00117 	ldw	ra,4(sp)
 10227d4:	df000017 	ldw	fp,0(sp)
 10227d8:	dec00204 	addi	sp,sp,8
 10227dc:	f800283a 	ret

010227e0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 10227e0:	defffb04 	addi	sp,sp,-20
 10227e4:	dfc00415 	stw	ra,16(sp)
 10227e8:	df000315 	stw	fp,12(sp)
 10227ec:	df000304 	addi	fp,sp,12
 10227f0:	e13ffe15 	stw	r4,-8(fp)
 10227f4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 10227f8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 10227fc:	e0bffe17 	ldw	r2,-8(fp)
 1022800:	00802f16 	blt	zero,r2,10228c0 <kill+0xe0>
  {
    switch (sig)
 1022804:	e0bfff17 	ldw	r2,-4(fp)
 1022808:	10800828 	cmpgeui	r2,r2,32
 102280c:	1000291e 	bne	r2,zero,10228b4 <kill+0xd4>
 1022810:	e0bfff17 	ldw	r2,-4(fp)
 1022814:	100690ba 	slli	r3,r2,2
 1022818:	008040b4 	movhi	r2,258
 102281c:	108a0b04 	addi	r2,r2,10284
 1022820:	1885883a 	add	r2,r3,r2
 1022824:	10800017 	ldw	r2,0(r2)
 1022828:	1000683a 	jmp	r2
 102282c:	010228d4 	movui	r4,2211
 1022830:	010228b4 	movhi	r4,2210
 1022834:	010228b4 	movhi	r4,2210
 1022838:	010228ac 	andhi	r4,zero,2210
 102283c:	010228ac 	andhi	r4,zero,2210
 1022840:	010228ac 	andhi	r4,zero,2210
 1022844:	010228ac 	andhi	r4,zero,2210
 1022848:	010228b4 	movhi	r4,2210
 102284c:	010228ac 	andhi	r4,zero,2210
 1022850:	010228ac 	andhi	r4,zero,2210
 1022854:	010228ac 	andhi	r4,zero,2210
 1022858:	010228ac 	andhi	r4,zero,2210
 102285c:	010228ac 	andhi	r4,zero,2210
 1022860:	010228ac 	andhi	r4,zero,2210
 1022864:	010228ac 	andhi	r4,zero,2210
 1022868:	010228ac 	andhi	r4,zero,2210
 102286c:	010228d4 	movui	r4,2211
 1022870:	010228b4 	movhi	r4,2210
 1022874:	010228b4 	movhi	r4,2210
 1022878:	010228b4 	movhi	r4,2210
 102287c:	010228d4 	movui	r4,2211
 1022880:	010228b4 	movhi	r4,2210
 1022884:	010228b4 	movhi	r4,2210
 1022888:	010228ac 	andhi	r4,zero,2210
 102288c:	010228ac 	andhi	r4,zero,2210
 1022890:	010228ac 	andhi	r4,zero,2210
 1022894:	010228ac 	andhi	r4,zero,2210
 1022898:	010228ac 	andhi	r4,zero,2210
 102289c:	010228b4 	movhi	r4,2210
 10228a0:	010228b4 	movhi	r4,2210
 10228a4:	010228ac 	andhi	r4,zero,2210
 10228a8:	010228ac 	andhi	r4,zero,2210
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 10228ac:	0009883a 	mov	r4,zero
 10228b0:	10224140 	call	1022414 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 10228b4:	00800584 	movi	r2,22
 10228b8:	e0bffd15 	stw	r2,-12(fp)
 10228bc:	00000606 	br	10228d8 <kill+0xf8>
    }
  }

  else if (pid > 0)
 10228c0:	e0bffe17 	ldw	r2,-8(fp)
 10228c4:	0080040e 	bge	zero,r2,10228d8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 10228c8:	008000c4 	movi	r2,3
 10228cc:	e0bffd15 	stw	r2,-12(fp)
 10228d0:	00000106 	br	10228d8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 10228d4:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 10228d8:	e0bffd17 	ldw	r2,-12(fp)
 10228dc:	10000626 	beq	r2,zero,10228f8 <kill+0x118>
  {
    ALT_ERRNO = status;
 10228e0:	10227a40 	call	10227a4 <alt_get_errno>
 10228e4:	1007883a 	mov	r3,r2
 10228e8:	e0bffd17 	ldw	r2,-12(fp)
 10228ec:	18800015 	stw	r2,0(r3)
    return -1;
 10228f0:	00bfffc4 	movi	r2,-1
 10228f4:	00000106 	br	10228fc <kill+0x11c>
  }

  return 0;
 10228f8:	0005883a 	mov	r2,zero
}
 10228fc:	e037883a 	mov	sp,fp
 1022900:	dfc00117 	ldw	ra,4(sp)
 1022904:	df000017 	ldw	fp,0(sp)
 1022908:	dec00204 	addi	sp,sp,8
 102290c:	f800283a 	ret

01022910 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1022910:	defffc04 	addi	sp,sp,-16
 1022914:	df000315 	stw	fp,12(sp)
 1022918:	df000304 	addi	fp,sp,12
 102291c:	e13ffd15 	stw	r4,-12(fp)
 1022920:	e17ffe15 	stw	r5,-8(fp)
 1022924:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1022928:	e0fffe17 	ldw	r3,-8(fp)
 102292c:	e0bffd17 	ldw	r2,-12(fp)
 1022930:	18800c26 	beq	r3,r2,1022964 <alt_load_section+0x54>
  {
    while( to != end )
 1022934:	00000806 	br	1022958 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1022938:	e0bffe17 	ldw	r2,-8(fp)
 102293c:	10c00104 	addi	r3,r2,4
 1022940:	e0fffe15 	stw	r3,-8(fp)
 1022944:	e0fffd17 	ldw	r3,-12(fp)
 1022948:	19000104 	addi	r4,r3,4
 102294c:	e13ffd15 	stw	r4,-12(fp)
 1022950:	18c00017 	ldw	r3,0(r3)
 1022954:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1022958:	e0fffe17 	ldw	r3,-8(fp)
 102295c:	e0bfff17 	ldw	r2,-4(fp)
 1022960:	18bff51e 	bne	r3,r2,1022938 <__alt_data_end+0xff022938>
    {
      *to++ = *from++;
    }
  }
}
 1022964:	0001883a 	nop
 1022968:	e037883a 	mov	sp,fp
 102296c:	df000017 	ldw	fp,0(sp)
 1022970:	dec00104 	addi	sp,sp,4
 1022974:	f800283a 	ret

01022978 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1022978:	defffe04 	addi	sp,sp,-8
 102297c:	dfc00115 	stw	ra,4(sp)
 1022980:	df000015 	stw	fp,0(sp)
 1022984:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1022988:	018040f4 	movhi	r6,259
 102298c:	31a18204 	addi	r6,r6,-31224
 1022990:	014040b4 	movhi	r5,258
 1022994:	295a8a04 	addi	r5,r5,27176
 1022998:	010040f4 	movhi	r4,259
 102299c:	21218204 	addi	r4,r4,-31224
 10229a0:	10229100 	call	1022910 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10229a4:	01804034 	movhi	r6,256
 10229a8:	3180e804 	addi	r6,r6,928
 10229ac:	01404034 	movhi	r5,256
 10229b0:	29400804 	addi	r5,r5,32
 10229b4:	01004034 	movhi	r4,256
 10229b8:	21000804 	addi	r4,r4,32
 10229bc:	10229100 	call	1022910 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10229c0:	018040b4 	movhi	r6,258
 10229c4:	319a8a04 	addi	r6,r6,27176
 10229c8:	014040b4 	movhi	r5,258
 10229cc:	29548704 	addi	r5,r5,21020
 10229d0:	010040b4 	movhi	r4,258
 10229d4:	21148704 	addi	r4,r4,21020
 10229d8:	10229100 	call	1022910 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10229dc:	10241a40 	call	10241a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10229e0:	102441c0 	call	102441c <alt_icache_flush_all>
}
 10229e4:	0001883a 	nop
 10229e8:	e037883a 	mov	sp,fp
 10229ec:	dfc00117 	ldw	ra,4(sp)
 10229f0:	df000017 	ldw	fp,0(sp)
 10229f4:	dec00204 	addi	sp,sp,8
 10229f8:	f800283a 	ret

010229fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10229fc:	defffe04 	addi	sp,sp,-8
 1022a00:	dfc00115 	stw	ra,4(sp)
 1022a04:	df000015 	stw	fp,0(sp)
 1022a08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1022a0c:	d0a01517 	ldw	r2,-32684(gp)
 1022a10:	10000326 	beq	r2,zero,1022a20 <alt_get_errno+0x24>
 1022a14:	d0a01517 	ldw	r2,-32684(gp)
 1022a18:	103ee83a 	callr	r2
 1022a1c:	00000106 	br	1022a24 <alt_get_errno+0x28>
 1022a20:	d0a73004 	addi	r2,gp,-25408
}
 1022a24:	e037883a 	mov	sp,fp
 1022a28:	dfc00117 	ldw	ra,4(sp)
 1022a2c:	df000017 	ldw	fp,0(sp)
 1022a30:	dec00204 	addi	sp,sp,8
 1022a34:	f800283a 	ret

01022a38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1022a38:	defff904 	addi	sp,sp,-28
 1022a3c:	dfc00615 	stw	ra,24(sp)
 1022a40:	df000515 	stw	fp,20(sp)
 1022a44:	df000504 	addi	fp,sp,20
 1022a48:	e13ffd15 	stw	r4,-12(fp)
 1022a4c:	e17ffe15 	stw	r5,-8(fp)
 1022a50:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1022a54:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1022a58:	e0bffd17 	ldw	r2,-12(fp)
 1022a5c:	10000616 	blt	r2,zero,1022a78 <lseek+0x40>
 1022a60:	e0bffd17 	ldw	r2,-12(fp)
 1022a64:	10c00324 	muli	r3,r2,12
 1022a68:	008040b4 	movhi	r2,258
 1022a6c:	109cea04 	addi	r2,r2,29608
 1022a70:	1885883a 	add	r2,r3,r2
 1022a74:	00000106 	br	1022a7c <lseek+0x44>
 1022a78:	0005883a 	mov	r2,zero
 1022a7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1022a80:	e0bffc17 	ldw	r2,-16(fp)
 1022a84:	10001026 	beq	r2,zero,1022ac8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1022a88:	e0bffc17 	ldw	r2,-16(fp)
 1022a8c:	10800017 	ldw	r2,0(r2)
 1022a90:	10800717 	ldw	r2,28(r2)
 1022a94:	10000926 	beq	r2,zero,1022abc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1022a98:	e0bffc17 	ldw	r2,-16(fp)
 1022a9c:	10800017 	ldw	r2,0(r2)
 1022aa0:	10800717 	ldw	r2,28(r2)
 1022aa4:	e1bfff17 	ldw	r6,-4(fp)
 1022aa8:	e17ffe17 	ldw	r5,-8(fp)
 1022aac:	e13ffc17 	ldw	r4,-16(fp)
 1022ab0:	103ee83a 	callr	r2
 1022ab4:	e0bffb15 	stw	r2,-20(fp)
 1022ab8:	00000506 	br	1022ad0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1022abc:	00bfde84 	movi	r2,-134
 1022ac0:	e0bffb15 	stw	r2,-20(fp)
 1022ac4:	00000206 	br	1022ad0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1022ac8:	00bfebc4 	movi	r2,-81
 1022acc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1022ad0:	e0bffb17 	ldw	r2,-20(fp)
 1022ad4:	1000070e 	bge	r2,zero,1022af4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1022ad8:	10229fc0 	call	10229fc <alt_get_errno>
 1022adc:	1007883a 	mov	r3,r2
 1022ae0:	e0bffb17 	ldw	r2,-20(fp)
 1022ae4:	0085c83a 	sub	r2,zero,r2
 1022ae8:	18800015 	stw	r2,0(r3)
    rc = -1;
 1022aec:	00bfffc4 	movi	r2,-1
 1022af0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1022af4:	e0bffb17 	ldw	r2,-20(fp)
}
 1022af8:	e037883a 	mov	sp,fp
 1022afc:	dfc00117 	ldw	ra,4(sp)
 1022b00:	df000017 	ldw	fp,0(sp)
 1022b04:	dec00204 	addi	sp,sp,8
 1022b08:	f800283a 	ret

01022b0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1022b0c:	defffd04 	addi	sp,sp,-12
 1022b10:	dfc00215 	stw	ra,8(sp)
 1022b14:	df000115 	stw	fp,4(sp)
 1022b18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1022b1c:	0009883a 	mov	r4,zero
 1022b20:	10230580 	call	1023058 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1022b24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1022b28:	10230900 	call	1023090 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1022b2c:	018040b4 	movhi	r6,258
 1022b30:	319a7c04 	addi	r6,r6,27120
 1022b34:	014040b4 	movhi	r5,258
 1022b38:	295a7c04 	addi	r5,r5,27120
 1022b3c:	010040b4 	movhi	r4,258
 1022b40:	211a7c04 	addi	r4,r4,27120
 1022b44:	10247b40 	call	10247b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1022b48:	10242cc0 	call	10242cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1022b4c:	010040b4 	movhi	r4,258
 1022b50:	2110cb04 	addi	r4,r4,17196
 1022b54:	1024f240 	call	1024f24 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1022b58:	d0a73217 	ldw	r2,-25400(gp)
 1022b5c:	d0e73317 	ldw	r3,-25396(gp)
 1022b60:	d1273417 	ldw	r4,-25392(gp)
 1022b64:	200d883a 	mov	r6,r4
 1022b68:	180b883a 	mov	r5,r3
 1022b6c:	1009883a 	mov	r4,r2
 1022b70:	1005b540 	call	1005b54 <main>
 1022b74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1022b78:	01000044 	movi	r4,1
 1022b7c:	10223180 	call	1022318 <close>
  exit (result);
 1022b80:	e13fff17 	ldw	r4,-4(fp)
 1022b84:	1024f380 	call	1024f38 <exit>

01022b88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1022b88:	defffe04 	addi	sp,sp,-8
 1022b8c:	df000115 	stw	fp,4(sp)
 1022b90:	df000104 	addi	fp,sp,4
 1022b94:	e13fff15 	stw	r4,-4(fp)
}
 1022b98:	0001883a 	nop
 1022b9c:	e037883a 	mov	sp,fp
 1022ba0:	df000017 	ldw	fp,0(sp)
 1022ba4:	dec00104 	addi	sp,sp,4
 1022ba8:	f800283a 	ret

01022bac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1022bac:	defffe04 	addi	sp,sp,-8
 1022bb0:	df000115 	stw	fp,4(sp)
 1022bb4:	df000104 	addi	fp,sp,4
 1022bb8:	e13fff15 	stw	r4,-4(fp)
}
 1022bbc:	0001883a 	nop
 1022bc0:	e037883a 	mov	sp,fp
 1022bc4:	df000017 	ldw	fp,0(sp)
 1022bc8:	dec00104 	addi	sp,sp,4
 1022bcc:	f800283a 	ret

01022bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022bd0:	defffe04 	addi	sp,sp,-8
 1022bd4:	dfc00115 	stw	ra,4(sp)
 1022bd8:	df000015 	stw	fp,0(sp)
 1022bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1022be0:	d0a01517 	ldw	r2,-32684(gp)
 1022be4:	10000326 	beq	r2,zero,1022bf4 <alt_get_errno+0x24>
 1022be8:	d0a01517 	ldw	r2,-32684(gp)
 1022bec:	103ee83a 	callr	r2
 1022bf0:	00000106 	br	1022bf8 <alt_get_errno+0x28>
 1022bf4:	d0a73004 	addi	r2,gp,-25408
}
 1022bf8:	e037883a 	mov	sp,fp
 1022bfc:	dfc00117 	ldw	ra,4(sp)
 1022c00:	df000017 	ldw	fp,0(sp)
 1022c04:	dec00204 	addi	sp,sp,8
 1022c08:	f800283a 	ret

01022c0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1022c0c:	defff904 	addi	sp,sp,-28
 1022c10:	dfc00615 	stw	ra,24(sp)
 1022c14:	df000515 	stw	fp,20(sp)
 1022c18:	df000504 	addi	fp,sp,20
 1022c1c:	e13ffd15 	stw	r4,-12(fp)
 1022c20:	e17ffe15 	stw	r5,-8(fp)
 1022c24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1022c28:	e0bffd17 	ldw	r2,-12(fp)
 1022c2c:	10000616 	blt	r2,zero,1022c48 <read+0x3c>
 1022c30:	e0bffd17 	ldw	r2,-12(fp)
 1022c34:	10c00324 	muli	r3,r2,12
 1022c38:	008040b4 	movhi	r2,258
 1022c3c:	109cea04 	addi	r2,r2,29608
 1022c40:	1885883a 	add	r2,r3,r2
 1022c44:	00000106 	br	1022c4c <read+0x40>
 1022c48:	0005883a 	mov	r2,zero
 1022c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1022c50:	e0bffb17 	ldw	r2,-20(fp)
 1022c54:	10002226 	beq	r2,zero,1022ce0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1022c58:	e0bffb17 	ldw	r2,-20(fp)
 1022c5c:	10800217 	ldw	r2,8(r2)
 1022c60:	108000cc 	andi	r2,r2,3
 1022c64:	10800060 	cmpeqi	r2,r2,1
 1022c68:	1000181e 	bne	r2,zero,1022ccc <read+0xc0>
        (fd->dev->read))
 1022c6c:	e0bffb17 	ldw	r2,-20(fp)
 1022c70:	10800017 	ldw	r2,0(r2)
 1022c74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1022c78:	10001426 	beq	r2,zero,1022ccc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1022c7c:	e0bffb17 	ldw	r2,-20(fp)
 1022c80:	10800017 	ldw	r2,0(r2)
 1022c84:	10800517 	ldw	r2,20(r2)
 1022c88:	e0ffff17 	ldw	r3,-4(fp)
 1022c8c:	180d883a 	mov	r6,r3
 1022c90:	e17ffe17 	ldw	r5,-8(fp)
 1022c94:	e13ffb17 	ldw	r4,-20(fp)
 1022c98:	103ee83a 	callr	r2
 1022c9c:	e0bffc15 	stw	r2,-16(fp)
 1022ca0:	e0bffc17 	ldw	r2,-16(fp)
 1022ca4:	1000070e 	bge	r2,zero,1022cc4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1022ca8:	1022bd00 	call	1022bd0 <alt_get_errno>
 1022cac:	1007883a 	mov	r3,r2
 1022cb0:	e0bffc17 	ldw	r2,-16(fp)
 1022cb4:	0085c83a 	sub	r2,zero,r2
 1022cb8:	18800015 	stw	r2,0(r3)
          return -1;
 1022cbc:	00bfffc4 	movi	r2,-1
 1022cc0:	00000c06 	br	1022cf4 <read+0xe8>
        }
        return rval;
 1022cc4:	e0bffc17 	ldw	r2,-16(fp)
 1022cc8:	00000a06 	br	1022cf4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1022ccc:	1022bd00 	call	1022bd0 <alt_get_errno>
 1022cd0:	1007883a 	mov	r3,r2
 1022cd4:	00800344 	movi	r2,13
 1022cd8:	18800015 	stw	r2,0(r3)
 1022cdc:	00000406 	br	1022cf0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1022ce0:	1022bd00 	call	1022bd0 <alt_get_errno>
 1022ce4:	1007883a 	mov	r3,r2
 1022ce8:	00801444 	movi	r2,81
 1022cec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1022cf0:	00bfffc4 	movi	r2,-1
}
 1022cf4:	e037883a 	mov	sp,fp
 1022cf8:	dfc00117 	ldw	ra,4(sp)
 1022cfc:	df000017 	ldw	fp,0(sp)
 1022d00:	dec00204 	addi	sp,sp,8
 1022d04:	f800283a 	ret

01022d08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1022d08:	defffe04 	addi	sp,sp,-8
 1022d0c:	df000115 	stw	fp,4(sp)
 1022d10:	df000104 	addi	fp,sp,4
 1022d14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1022d18:	e0bfff17 	ldw	r2,-4(fp)
 1022d1c:	108000d0 	cmplti	r2,r2,3
 1022d20:	10000d1e 	bne	r2,zero,1022d58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1022d24:	008040b4 	movhi	r2,258
 1022d28:	109cea04 	addi	r2,r2,29608
 1022d2c:	e0ffff17 	ldw	r3,-4(fp)
 1022d30:	18c00324 	muli	r3,r3,12
 1022d34:	10c5883a 	add	r2,r2,r3
 1022d38:	10800204 	addi	r2,r2,8
 1022d3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1022d40:	008040b4 	movhi	r2,258
 1022d44:	109cea04 	addi	r2,r2,29608
 1022d48:	e0ffff17 	ldw	r3,-4(fp)
 1022d4c:	18c00324 	muli	r3,r3,12
 1022d50:	10c5883a 	add	r2,r2,r3
 1022d54:	10000015 	stw	zero,0(r2)
  }
}
 1022d58:	0001883a 	nop
 1022d5c:	e037883a 	mov	sp,fp
 1022d60:	df000017 	ldw	fp,0(sp)
 1022d64:	dec00104 	addi	sp,sp,4
 1022d68:	f800283a 	ret

01022d6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1022d6c:	defff904 	addi	sp,sp,-28
 1022d70:	df000615 	stw	fp,24(sp)
 1022d74:	df000604 	addi	fp,sp,24
 1022d78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1022d7c:	0005303a 	rdctl	r2,status
 1022d80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1022d84:	e0fffe17 	ldw	r3,-8(fp)
 1022d88:	00bfff84 	movi	r2,-2
 1022d8c:	1884703a 	and	r2,r3,r2
 1022d90:	1001703a 	wrctl	status,r2
  
  return context;
 1022d94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1022d98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1022d9c:	d0a01717 	ldw	r2,-32676(gp)
 1022da0:	10c000c4 	addi	r3,r2,3
 1022da4:	00bfff04 	movi	r2,-4
 1022da8:	1884703a 	and	r2,r3,r2
 1022dac:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1022db0:	d0e01717 	ldw	r3,-32676(gp)
 1022db4:	e0bfff17 	ldw	r2,-4(fp)
 1022db8:	1887883a 	add	r3,r3,r2
 1022dbc:	00808034 	movhi	r2,512
 1022dc0:	10800004 	addi	r2,r2,0
 1022dc4:	10c0062e 	bgeu	r2,r3,1022de0 <sbrk+0x74>
 1022dc8:	e0bffb17 	ldw	r2,-20(fp)
 1022dcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1022dd0:	e0bffa17 	ldw	r2,-24(fp)
 1022dd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1022dd8:	00bfffc4 	movi	r2,-1
 1022ddc:	00000b06 	br	1022e0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1022de0:	d0a01717 	ldw	r2,-32676(gp)
 1022de4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1022de8:	d0e01717 	ldw	r3,-32676(gp)
 1022dec:	e0bfff17 	ldw	r2,-4(fp)
 1022df0:	1885883a 	add	r2,r3,r2
 1022df4:	d0a01715 	stw	r2,-32676(gp)
 1022df8:	e0bffb17 	ldw	r2,-20(fp)
 1022dfc:	e0bffc15 	stw	r2,-16(fp)
 1022e00:	e0bffc17 	ldw	r2,-16(fp)
 1022e04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1022e08:	e0bffd17 	ldw	r2,-12(fp)
} 
 1022e0c:	e037883a 	mov	sp,fp
 1022e10:	df000017 	ldw	fp,0(sp)
 1022e14:	dec00104 	addi	sp,sp,4
 1022e18:	f800283a 	ret

01022e1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1022e1c:	defffd04 	addi	sp,sp,-12
 1022e20:	dfc00215 	stw	ra,8(sp)
 1022e24:	df000115 	stw	fp,4(sp)
 1022e28:	df000104 	addi	fp,sp,4
 1022e2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1022e30:	e13fff17 	ldw	r4,-4(fp)
 1022e34:	102404c0 	call	102404c <alt_busy_sleep>
}
 1022e38:	e037883a 	mov	sp,fp
 1022e3c:	dfc00117 	ldw	ra,4(sp)
 1022e40:	df000017 	ldw	fp,0(sp)
 1022e44:	dec00204 	addi	sp,sp,8
 1022e48:	f800283a 	ret

01022e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022e4c:	defffe04 	addi	sp,sp,-8
 1022e50:	dfc00115 	stw	ra,4(sp)
 1022e54:	df000015 	stw	fp,0(sp)
 1022e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1022e5c:	d0a01517 	ldw	r2,-32684(gp)
 1022e60:	10000326 	beq	r2,zero,1022e70 <alt_get_errno+0x24>
 1022e64:	d0a01517 	ldw	r2,-32684(gp)
 1022e68:	103ee83a 	callr	r2
 1022e6c:	00000106 	br	1022e74 <alt_get_errno+0x28>
 1022e70:	d0a73004 	addi	r2,gp,-25408
}
 1022e74:	e037883a 	mov	sp,fp
 1022e78:	dfc00117 	ldw	ra,4(sp)
 1022e7c:	df000017 	ldw	fp,0(sp)
 1022e80:	dec00204 	addi	sp,sp,8
 1022e84:	f800283a 	ret

01022e88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1022e88:	defff904 	addi	sp,sp,-28
 1022e8c:	dfc00615 	stw	ra,24(sp)
 1022e90:	df000515 	stw	fp,20(sp)
 1022e94:	df000504 	addi	fp,sp,20
 1022e98:	e13ffd15 	stw	r4,-12(fp)
 1022e9c:	e17ffe15 	stw	r5,-8(fp)
 1022ea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1022ea4:	e0bffd17 	ldw	r2,-12(fp)
 1022ea8:	10000616 	blt	r2,zero,1022ec4 <write+0x3c>
 1022eac:	e0bffd17 	ldw	r2,-12(fp)
 1022eb0:	10c00324 	muli	r3,r2,12
 1022eb4:	008040b4 	movhi	r2,258
 1022eb8:	109cea04 	addi	r2,r2,29608
 1022ebc:	1885883a 	add	r2,r3,r2
 1022ec0:	00000106 	br	1022ec8 <write+0x40>
 1022ec4:	0005883a 	mov	r2,zero
 1022ec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1022ecc:	e0bffb17 	ldw	r2,-20(fp)
 1022ed0:	10002126 	beq	r2,zero,1022f58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1022ed4:	e0bffb17 	ldw	r2,-20(fp)
 1022ed8:	10800217 	ldw	r2,8(r2)
 1022edc:	108000cc 	andi	r2,r2,3
 1022ee0:	10001826 	beq	r2,zero,1022f44 <write+0xbc>
 1022ee4:	e0bffb17 	ldw	r2,-20(fp)
 1022ee8:	10800017 	ldw	r2,0(r2)
 1022eec:	10800617 	ldw	r2,24(r2)
 1022ef0:	10001426 	beq	r2,zero,1022f44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1022ef4:	e0bffb17 	ldw	r2,-20(fp)
 1022ef8:	10800017 	ldw	r2,0(r2)
 1022efc:	10800617 	ldw	r2,24(r2)
 1022f00:	e0ffff17 	ldw	r3,-4(fp)
 1022f04:	180d883a 	mov	r6,r3
 1022f08:	e17ffe17 	ldw	r5,-8(fp)
 1022f0c:	e13ffb17 	ldw	r4,-20(fp)
 1022f10:	103ee83a 	callr	r2
 1022f14:	e0bffc15 	stw	r2,-16(fp)
 1022f18:	e0bffc17 	ldw	r2,-16(fp)
 1022f1c:	1000070e 	bge	r2,zero,1022f3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1022f20:	1022e4c0 	call	1022e4c <alt_get_errno>
 1022f24:	1007883a 	mov	r3,r2
 1022f28:	e0bffc17 	ldw	r2,-16(fp)
 1022f2c:	0085c83a 	sub	r2,zero,r2
 1022f30:	18800015 	stw	r2,0(r3)
        return -1;
 1022f34:	00bfffc4 	movi	r2,-1
 1022f38:	00000c06 	br	1022f6c <write+0xe4>
      }
      return rval;
 1022f3c:	e0bffc17 	ldw	r2,-16(fp)
 1022f40:	00000a06 	br	1022f6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1022f44:	1022e4c0 	call	1022e4c <alt_get_errno>
 1022f48:	1007883a 	mov	r3,r2
 1022f4c:	00800344 	movi	r2,13
 1022f50:	18800015 	stw	r2,0(r3)
 1022f54:	00000406 	br	1022f68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1022f58:	1022e4c0 	call	1022e4c <alt_get_errno>
 1022f5c:	1007883a 	mov	r3,r2
 1022f60:	00801444 	movi	r2,81
 1022f64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1022f68:	00bfffc4 	movi	r2,-1
}
 1022f6c:	e037883a 	mov	sp,fp
 1022f70:	dfc00117 	ldw	ra,4(sp)
 1022f74:	df000017 	ldw	fp,0(sp)
 1022f78:	dec00204 	addi	sp,sp,8
 1022f7c:	f800283a 	ret

01022f80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1022f80:	defffd04 	addi	sp,sp,-12
 1022f84:	dfc00215 	stw	ra,8(sp)
 1022f88:	df000115 	stw	fp,4(sp)
 1022f8c:	df000104 	addi	fp,sp,4
 1022f90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1022f94:	d1601204 	addi	r5,gp,-32696
 1022f98:	e13fff17 	ldw	r4,-4(fp)
 1022f9c:	10242280 	call	1024228 <alt_dev_llist_insert>
}
 1022fa0:	e037883a 	mov	sp,fp
 1022fa4:	dfc00117 	ldw	ra,4(sp)
 1022fa8:	df000017 	ldw	fp,0(sp)
 1022fac:	dec00204 	addi	sp,sp,8
 1022fb0:	f800283a 	ret

01022fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1022fb4:	defffe04 	addi	sp,sp,-8
 1022fb8:	dfc00115 	stw	ra,4(sp)
 1022fbc:	df000015 	stw	fp,0(sp)
 1022fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1022fc4:	d0a01517 	ldw	r2,-32684(gp)
 1022fc8:	10000326 	beq	r2,zero,1022fd8 <alt_get_errno+0x24>
 1022fcc:	d0a01517 	ldw	r2,-32684(gp)
 1022fd0:	103ee83a 	callr	r2
 1022fd4:	00000106 	br	1022fdc <alt_get_errno+0x28>
 1022fd8:	d0a73004 	addi	r2,gp,-25408
}
 1022fdc:	e037883a 	mov	sp,fp
 1022fe0:	dfc00117 	ldw	ra,4(sp)
 1022fe4:	df000017 	ldw	fp,0(sp)
 1022fe8:	dec00204 	addi	sp,sp,8
 1022fec:	f800283a 	ret

01022ff0 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 1022ff0:	defffc04 	addi	sp,sp,-16
 1022ff4:	dfc00315 	stw	ra,12(sp)
 1022ff8:	df000215 	stw	fp,8(sp)
 1022ffc:	df000204 	addi	fp,sp,8
 1023000:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 1023004:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 1023008:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 102300c:	e0bffe17 	ldw	r2,-8(fp)
 1023010:	1000051e 	bne	r2,zero,1023028 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 1023014:	d1601804 	addi	r5,gp,-32672
 1023018:	e13fff17 	ldw	r4,-4(fp)
 102301c:	10242280 	call	1024228 <alt_dev_llist_insert>
 1023020:	e0bffe15 	stw	r2,-8(fp)
 1023024:	00000606 	br	1023040 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 1023028:	1022fb40 	call	1022fb4 <alt_get_errno>
 102302c:	1007883a 	mov	r3,r2
 1023030:	00800304 	movi	r2,12
 1023034:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 1023038:	00bffd04 	movi	r2,-12
 102303c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 1023040:	e0bffe17 	ldw	r2,-8(fp)
}
 1023044:	e037883a 	mov	sp,fp
 1023048:	dfc00117 	ldw	ra,4(sp)
 102304c:	df000017 	ldw	fp,0(sp)
 1023050:	dec00204 	addi	sp,sp,8
 1023054:	f800283a 	ret

01023058 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1023058:	defffd04 	addi	sp,sp,-12
 102305c:	dfc00215 	stw	ra,8(sp)
 1023060:	df000115 	stw	fp,4(sp)
 1023064:	df000104 	addi	fp,sp,4
 1023068:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU_1, nios_cpu_1);
 102306c:	1024c280 	call	1024c28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1023070:	00800044 	movi	r2,1
 1023074:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1023078:	0001883a 	nop
 102307c:	e037883a 	mov	sp,fp
 1023080:	dfc00117 	ldw	ra,4(sp)
 1023084:	df000017 	ldw	fp,0(sp)
 1023088:	dec00204 	addi	sp,sp,8
 102308c:	f800283a 	ret

01023090 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1023090:	defffe04 	addi	sp,sp,-8
 1023094:	dfc00115 	stw	ra,4(sp)
 1023098:	df000015 	stw	fp,0(sp)
 102309c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10230a0:	01c0fa04 	movi	r7,1000
 10230a4:	01800044 	movi	r6,1
 10230a8:	000b883a 	mov	r5,zero
 10230ac:	01000804 	movi	r4,32
 10230b0:	1023ea40 	call	1023ea4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10230b4:	000d883a 	mov	r6,zero
 10230b8:	000b883a 	mov	r5,zero
 10230bc:	010040b4 	movhi	r4,258
 10230c0:	211d5404 	addi	r4,r4,30032
 10230c4:	102325c0 	call	102325c <altera_avalon_jtag_uart_init>
 10230c8:	010040b4 	movhi	r4,258
 10230cc:	211d4a04 	addi	r4,r4,29992
 10230d0:	1022f800 	call	1022f80 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 10230d4:	010040f4 	movhi	r4,259
 10230d8:	21216204 	addi	r4,r4,-31352
 10230dc:	1022ff00 	call	1022ff0 <alt_avalon_mutex_reg>
}
 10230e0:	0001883a 	nop
 10230e4:	e037883a 	mov	sp,fp
 10230e8:	dfc00117 	ldw	ra,4(sp)
 10230ec:	df000017 	ldw	fp,0(sp)
 10230f0:	dec00204 	addi	sp,sp,8
 10230f4:	f800283a 	ret

010230f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10230f8:	defffa04 	addi	sp,sp,-24
 10230fc:	dfc00515 	stw	ra,20(sp)
 1023100:	df000415 	stw	fp,16(sp)
 1023104:	df000404 	addi	fp,sp,16
 1023108:	e13ffd15 	stw	r4,-12(fp)
 102310c:	e17ffe15 	stw	r5,-8(fp)
 1023110:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1023114:	e0bffd17 	ldw	r2,-12(fp)
 1023118:	10800017 	ldw	r2,0(r2)
 102311c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1023120:	e0bffc17 	ldw	r2,-16(fp)
 1023124:	10c00a04 	addi	r3,r2,40
 1023128:	e0bffd17 	ldw	r2,-12(fp)
 102312c:	10800217 	ldw	r2,8(r2)
 1023130:	100f883a 	mov	r7,r2
 1023134:	e1bfff17 	ldw	r6,-4(fp)
 1023138:	e17ffe17 	ldw	r5,-8(fp)
 102313c:	1809883a 	mov	r4,r3
 1023140:	10237200 	call	1023720 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1023144:	e037883a 	mov	sp,fp
 1023148:	dfc00117 	ldw	ra,4(sp)
 102314c:	df000017 	ldw	fp,0(sp)
 1023150:	dec00204 	addi	sp,sp,8
 1023154:	f800283a 	ret

01023158 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1023158:	defffa04 	addi	sp,sp,-24
 102315c:	dfc00515 	stw	ra,20(sp)
 1023160:	df000415 	stw	fp,16(sp)
 1023164:	df000404 	addi	fp,sp,16
 1023168:	e13ffd15 	stw	r4,-12(fp)
 102316c:	e17ffe15 	stw	r5,-8(fp)
 1023170:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1023174:	e0bffd17 	ldw	r2,-12(fp)
 1023178:	10800017 	ldw	r2,0(r2)
 102317c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1023180:	e0bffc17 	ldw	r2,-16(fp)
 1023184:	10c00a04 	addi	r3,r2,40
 1023188:	e0bffd17 	ldw	r2,-12(fp)
 102318c:	10800217 	ldw	r2,8(r2)
 1023190:	100f883a 	mov	r7,r2
 1023194:	e1bfff17 	ldw	r6,-4(fp)
 1023198:	e17ffe17 	ldw	r5,-8(fp)
 102319c:	1809883a 	mov	r4,r3
 10231a0:	102393c0 	call	102393c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10231a4:	e037883a 	mov	sp,fp
 10231a8:	dfc00117 	ldw	ra,4(sp)
 10231ac:	df000017 	ldw	fp,0(sp)
 10231b0:	dec00204 	addi	sp,sp,8
 10231b4:	f800283a 	ret

010231b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10231b8:	defffc04 	addi	sp,sp,-16
 10231bc:	dfc00315 	stw	ra,12(sp)
 10231c0:	df000215 	stw	fp,8(sp)
 10231c4:	df000204 	addi	fp,sp,8
 10231c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10231cc:	e0bfff17 	ldw	r2,-4(fp)
 10231d0:	10800017 	ldw	r2,0(r2)
 10231d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10231d8:	e0bffe17 	ldw	r2,-8(fp)
 10231dc:	10c00a04 	addi	r3,r2,40
 10231e0:	e0bfff17 	ldw	r2,-4(fp)
 10231e4:	10800217 	ldw	r2,8(r2)
 10231e8:	100b883a 	mov	r5,r2
 10231ec:	1809883a 	mov	r4,r3
 10231f0:	10235c80 	call	10235c8 <altera_avalon_jtag_uart_close>
}
 10231f4:	e037883a 	mov	sp,fp
 10231f8:	dfc00117 	ldw	ra,4(sp)
 10231fc:	df000017 	ldw	fp,0(sp)
 1023200:	dec00204 	addi	sp,sp,8
 1023204:	f800283a 	ret

01023208 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1023208:	defffa04 	addi	sp,sp,-24
 102320c:	dfc00515 	stw	ra,20(sp)
 1023210:	df000415 	stw	fp,16(sp)
 1023214:	df000404 	addi	fp,sp,16
 1023218:	e13ffd15 	stw	r4,-12(fp)
 102321c:	e17ffe15 	stw	r5,-8(fp)
 1023220:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1023224:	e0bffd17 	ldw	r2,-12(fp)
 1023228:	10800017 	ldw	r2,0(r2)
 102322c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1023230:	e0bffc17 	ldw	r2,-16(fp)
 1023234:	10800a04 	addi	r2,r2,40
 1023238:	e1bfff17 	ldw	r6,-4(fp)
 102323c:	e17ffe17 	ldw	r5,-8(fp)
 1023240:	1009883a 	mov	r4,r2
 1023244:	10236300 	call	1023630 <altera_avalon_jtag_uart_ioctl>
}
 1023248:	e037883a 	mov	sp,fp
 102324c:	dfc00117 	ldw	ra,4(sp)
 1023250:	df000017 	ldw	fp,0(sp)
 1023254:	dec00204 	addi	sp,sp,8
 1023258:	f800283a 	ret

0102325c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 102325c:	defffa04 	addi	sp,sp,-24
 1023260:	dfc00515 	stw	ra,20(sp)
 1023264:	df000415 	stw	fp,16(sp)
 1023268:	df000404 	addi	fp,sp,16
 102326c:	e13ffd15 	stw	r4,-12(fp)
 1023270:	e17ffe15 	stw	r5,-8(fp)
 1023274:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1023278:	e0bffd17 	ldw	r2,-12(fp)
 102327c:	00c00044 	movi	r3,1
 1023280:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1023284:	e0bffd17 	ldw	r2,-12(fp)
 1023288:	10800017 	ldw	r2,0(r2)
 102328c:	10800104 	addi	r2,r2,4
 1023290:	1007883a 	mov	r3,r2
 1023294:	e0bffd17 	ldw	r2,-12(fp)
 1023298:	10800817 	ldw	r2,32(r2)
 102329c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10232a0:	e0bffe17 	ldw	r2,-8(fp)
 10232a4:	e0ffff17 	ldw	r3,-4(fp)
 10232a8:	d8000015 	stw	zero,0(sp)
 10232ac:	e1fffd17 	ldw	r7,-12(fp)
 10232b0:	018040b4 	movhi	r6,258
 10232b4:	318cc704 	addi	r6,r6,13084
 10232b8:	180b883a 	mov	r5,r3
 10232bc:	1009883a 	mov	r4,r2
 10232c0:	10244500 	call	1024450 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10232c4:	e0bffd17 	ldw	r2,-12(fp)
 10232c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10232cc:	e0bffd17 	ldw	r2,-12(fp)
 10232d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10232d4:	d0e73517 	ldw	r3,-25388(gp)
 10232d8:	e1fffd17 	ldw	r7,-12(fp)
 10232dc:	018040b4 	movhi	r6,258
 10232e0:	318d4a04 	addi	r6,r6,13608
 10232e4:	180b883a 	mov	r5,r3
 10232e8:	1009883a 	mov	r4,r2
 10232ec:	1023f200 	call	1023f20 <alt_alarm_start>
 10232f0:	1000040e 	bge	r2,zero,1023304 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10232f4:	e0fffd17 	ldw	r3,-12(fp)
 10232f8:	00a00034 	movhi	r2,32768
 10232fc:	10bfffc4 	addi	r2,r2,-1
 1023300:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1023304:	0001883a 	nop
 1023308:	e037883a 	mov	sp,fp
 102330c:	dfc00117 	ldw	ra,4(sp)
 1023310:	df000017 	ldw	fp,0(sp)
 1023314:	dec00204 	addi	sp,sp,8
 1023318:	f800283a 	ret

0102331c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 102331c:	defff804 	addi	sp,sp,-32
 1023320:	df000715 	stw	fp,28(sp)
 1023324:	df000704 	addi	fp,sp,28
 1023328:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 102332c:	e0bfff17 	ldw	r2,-4(fp)
 1023330:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1023334:	e0bffb17 	ldw	r2,-20(fp)
 1023338:	10800017 	ldw	r2,0(r2)
 102333c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1023340:	e0bffc17 	ldw	r2,-16(fp)
 1023344:	10800104 	addi	r2,r2,4
 1023348:	10800037 	ldwio	r2,0(r2)
 102334c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1023350:	e0bffd17 	ldw	r2,-12(fp)
 1023354:	1080c00c 	andi	r2,r2,768
 1023358:	10006d26 	beq	r2,zero,1023510 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 102335c:	e0bffd17 	ldw	r2,-12(fp)
 1023360:	1080400c 	andi	r2,r2,256
 1023364:	10003526 	beq	r2,zero,102343c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1023368:	00800074 	movhi	r2,1
 102336c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1023370:	e0bffb17 	ldw	r2,-20(fp)
 1023374:	10800a17 	ldw	r2,40(r2)
 1023378:	10800044 	addi	r2,r2,1
 102337c:	1081ffcc 	andi	r2,r2,2047
 1023380:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1023384:	e0bffb17 	ldw	r2,-20(fp)
 1023388:	10c00b17 	ldw	r3,44(r2)
 102338c:	e0bffe17 	ldw	r2,-8(fp)
 1023390:	18801526 	beq	r3,r2,10233e8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1023394:	e0bffc17 	ldw	r2,-16(fp)
 1023398:	10800037 	ldwio	r2,0(r2)
 102339c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10233a0:	e0bff917 	ldw	r2,-28(fp)
 10233a4:	10a0000c 	andi	r2,r2,32768
 10233a8:	10001126 	beq	r2,zero,10233f0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10233ac:	e0bffb17 	ldw	r2,-20(fp)
 10233b0:	10800a17 	ldw	r2,40(r2)
 10233b4:	e0fff917 	ldw	r3,-28(fp)
 10233b8:	1809883a 	mov	r4,r3
 10233bc:	e0fffb17 	ldw	r3,-20(fp)
 10233c0:	1885883a 	add	r2,r3,r2
 10233c4:	10800e04 	addi	r2,r2,56
 10233c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10233cc:	e0bffb17 	ldw	r2,-20(fp)
 10233d0:	10800a17 	ldw	r2,40(r2)
 10233d4:	10800044 	addi	r2,r2,1
 10233d8:	10c1ffcc 	andi	r3,r2,2047
 10233dc:	e0bffb17 	ldw	r2,-20(fp)
 10233e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10233e4:	003fe206 	br	1023370 <__alt_data_end+0xff023370>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10233e8:	0001883a 	nop
 10233ec:	00000106 	br	10233f4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10233f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10233f4:	e0bff917 	ldw	r2,-28(fp)
 10233f8:	10bfffec 	andhi	r2,r2,65535
 10233fc:	10000f26 	beq	r2,zero,102343c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1023400:	e0bffb17 	ldw	r2,-20(fp)
 1023404:	10c00817 	ldw	r3,32(r2)
 1023408:	00bfff84 	movi	r2,-2
 102340c:	1886703a 	and	r3,r3,r2
 1023410:	e0bffb17 	ldw	r2,-20(fp)
 1023414:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1023418:	e0bffc17 	ldw	r2,-16(fp)
 102341c:	10800104 	addi	r2,r2,4
 1023420:	1007883a 	mov	r3,r2
 1023424:	e0bffb17 	ldw	r2,-20(fp)
 1023428:	10800817 	ldw	r2,32(r2)
 102342c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1023430:	e0bffc17 	ldw	r2,-16(fp)
 1023434:	10800104 	addi	r2,r2,4
 1023438:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 102343c:	e0bffd17 	ldw	r2,-12(fp)
 1023440:	1080800c 	andi	r2,r2,512
 1023444:	103fbe26 	beq	r2,zero,1023340 <__alt_data_end+0xff023340>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1023448:	e0bffd17 	ldw	r2,-12(fp)
 102344c:	1004d43a 	srli	r2,r2,16
 1023450:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1023454:	00001406 	br	10234a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1023458:	e0bffc17 	ldw	r2,-16(fp)
 102345c:	e0fffb17 	ldw	r3,-20(fp)
 1023460:	18c00d17 	ldw	r3,52(r3)
 1023464:	e13ffb17 	ldw	r4,-20(fp)
 1023468:	20c7883a 	add	r3,r4,r3
 102346c:	18c20e04 	addi	r3,r3,2104
 1023470:	18c00003 	ldbu	r3,0(r3)
 1023474:	18c03fcc 	andi	r3,r3,255
 1023478:	18c0201c 	xori	r3,r3,128
 102347c:	18ffe004 	addi	r3,r3,-128
 1023480:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1023484:	e0bffb17 	ldw	r2,-20(fp)
 1023488:	10800d17 	ldw	r2,52(r2)
 102348c:	10800044 	addi	r2,r2,1
 1023490:	10c1ffcc 	andi	r3,r2,2047
 1023494:	e0bffb17 	ldw	r2,-20(fp)
 1023498:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 102349c:	e0bffa17 	ldw	r2,-24(fp)
 10234a0:	10bfffc4 	addi	r2,r2,-1
 10234a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10234a8:	e0bffa17 	ldw	r2,-24(fp)
 10234ac:	10000526 	beq	r2,zero,10234c4 <altera_avalon_jtag_uart_irq+0x1a8>
 10234b0:	e0bffb17 	ldw	r2,-20(fp)
 10234b4:	10c00d17 	ldw	r3,52(r2)
 10234b8:	e0bffb17 	ldw	r2,-20(fp)
 10234bc:	10800c17 	ldw	r2,48(r2)
 10234c0:	18bfe51e 	bne	r3,r2,1023458 <__alt_data_end+0xff023458>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10234c4:	e0bffa17 	ldw	r2,-24(fp)
 10234c8:	103f9d26 	beq	r2,zero,1023340 <__alt_data_end+0xff023340>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10234cc:	e0bffb17 	ldw	r2,-20(fp)
 10234d0:	10c00817 	ldw	r3,32(r2)
 10234d4:	00bfff44 	movi	r2,-3
 10234d8:	1886703a 	and	r3,r3,r2
 10234dc:	e0bffb17 	ldw	r2,-20(fp)
 10234e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10234e4:	e0bffb17 	ldw	r2,-20(fp)
 10234e8:	10800017 	ldw	r2,0(r2)
 10234ec:	10800104 	addi	r2,r2,4
 10234f0:	1007883a 	mov	r3,r2
 10234f4:	e0bffb17 	ldw	r2,-20(fp)
 10234f8:	10800817 	ldw	r2,32(r2)
 10234fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1023500:	e0bffc17 	ldw	r2,-16(fp)
 1023504:	10800104 	addi	r2,r2,4
 1023508:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 102350c:	003f8c06 	br	1023340 <__alt_data_end+0xff023340>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1023510:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1023514:	0001883a 	nop
 1023518:	e037883a 	mov	sp,fp
 102351c:	df000017 	ldw	fp,0(sp)
 1023520:	dec00104 	addi	sp,sp,4
 1023524:	f800283a 	ret

01023528 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1023528:	defff804 	addi	sp,sp,-32
 102352c:	df000715 	stw	fp,28(sp)
 1023530:	df000704 	addi	fp,sp,28
 1023534:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1023538:	e0bffb17 	ldw	r2,-20(fp)
 102353c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1023540:	e0bff917 	ldw	r2,-28(fp)
 1023544:	10800017 	ldw	r2,0(r2)
 1023548:	10800104 	addi	r2,r2,4
 102354c:	10800037 	ldwio	r2,0(r2)
 1023550:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1023554:	e0bffa17 	ldw	r2,-24(fp)
 1023558:	1081000c 	andi	r2,r2,1024
 102355c:	10000b26 	beq	r2,zero,102358c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1023560:	e0bff917 	ldw	r2,-28(fp)
 1023564:	10800017 	ldw	r2,0(r2)
 1023568:	10800104 	addi	r2,r2,4
 102356c:	1007883a 	mov	r3,r2
 1023570:	e0bff917 	ldw	r2,-28(fp)
 1023574:	10800817 	ldw	r2,32(r2)
 1023578:	10810014 	ori	r2,r2,1024
 102357c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1023580:	e0bff917 	ldw	r2,-28(fp)
 1023584:	10000915 	stw	zero,36(r2)
 1023588:	00000a06 	br	10235b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 102358c:	e0bff917 	ldw	r2,-28(fp)
 1023590:	10c00917 	ldw	r3,36(r2)
 1023594:	00a00034 	movhi	r2,32768
 1023598:	10bfff04 	addi	r2,r2,-4
 102359c:	10c00536 	bltu	r2,r3,10235b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10235a0:	e0bff917 	ldw	r2,-28(fp)
 10235a4:	10800917 	ldw	r2,36(r2)
 10235a8:	10c00044 	addi	r3,r2,1
 10235ac:	e0bff917 	ldw	r2,-28(fp)
 10235b0:	10c00915 	stw	r3,36(r2)
 10235b4:	d0a73517 	ldw	r2,-25388(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10235b8:	e037883a 	mov	sp,fp
 10235bc:	df000017 	ldw	fp,0(sp)
 10235c0:	dec00104 	addi	sp,sp,4
 10235c4:	f800283a 	ret

010235c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10235c8:	defffd04 	addi	sp,sp,-12
 10235cc:	df000215 	stw	fp,8(sp)
 10235d0:	df000204 	addi	fp,sp,8
 10235d4:	e13ffe15 	stw	r4,-8(fp)
 10235d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10235dc:	00000506 	br	10235f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 10235e0:	e0bfff17 	ldw	r2,-4(fp)
 10235e4:	1090000c 	andi	r2,r2,16384
 10235e8:	10000226 	beq	r2,zero,10235f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10235ec:	00bffd44 	movi	r2,-11
 10235f0:	00000b06 	br	1023620 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10235f4:	e0bffe17 	ldw	r2,-8(fp)
 10235f8:	10c00d17 	ldw	r3,52(r2)
 10235fc:	e0bffe17 	ldw	r2,-8(fp)
 1023600:	10800c17 	ldw	r2,48(r2)
 1023604:	18800526 	beq	r3,r2,102361c <altera_avalon_jtag_uart_close+0x54>
 1023608:	e0bffe17 	ldw	r2,-8(fp)
 102360c:	10c00917 	ldw	r3,36(r2)
 1023610:	e0bffe17 	ldw	r2,-8(fp)
 1023614:	10800117 	ldw	r2,4(r2)
 1023618:	18bff136 	bltu	r3,r2,10235e0 <__alt_data_end+0xff0235e0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 102361c:	0005883a 	mov	r2,zero
}
 1023620:	e037883a 	mov	sp,fp
 1023624:	df000017 	ldw	fp,0(sp)
 1023628:	dec00104 	addi	sp,sp,4
 102362c:	f800283a 	ret

01023630 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1023630:	defffa04 	addi	sp,sp,-24
 1023634:	df000515 	stw	fp,20(sp)
 1023638:	df000504 	addi	fp,sp,20
 102363c:	e13ffd15 	stw	r4,-12(fp)
 1023640:	e17ffe15 	stw	r5,-8(fp)
 1023644:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1023648:	00bff9c4 	movi	r2,-25
 102364c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1023650:	e0bffe17 	ldw	r2,-8(fp)
 1023654:	10da8060 	cmpeqi	r3,r2,27137
 1023658:	1800031e 	bne	r3,zero,1023668 <altera_avalon_jtag_uart_ioctl+0x38>
 102365c:	109a80a0 	cmpeqi	r2,r2,27138
 1023660:	1000181e 	bne	r2,zero,10236c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1023664:	00002906 	br	102370c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1023668:	e0bffd17 	ldw	r2,-12(fp)
 102366c:	10c00117 	ldw	r3,4(r2)
 1023670:	00a00034 	movhi	r2,32768
 1023674:	10bfffc4 	addi	r2,r2,-1
 1023678:	18802126 	beq	r3,r2,1023700 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 102367c:	e0bfff17 	ldw	r2,-4(fp)
 1023680:	10800017 	ldw	r2,0(r2)
 1023684:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1023688:	e0bffc17 	ldw	r2,-16(fp)
 102368c:	10800090 	cmplti	r2,r2,2
 1023690:	1000061e 	bne	r2,zero,10236ac <altera_avalon_jtag_uart_ioctl+0x7c>
 1023694:	e0fffc17 	ldw	r3,-16(fp)
 1023698:	00a00034 	movhi	r2,32768
 102369c:	10bfffc4 	addi	r2,r2,-1
 10236a0:	18800226 	beq	r3,r2,10236ac <altera_avalon_jtag_uart_ioctl+0x7c>
 10236a4:	e0bffc17 	ldw	r2,-16(fp)
 10236a8:	00000206 	br	10236b4 <altera_avalon_jtag_uart_ioctl+0x84>
 10236ac:	00a00034 	movhi	r2,32768
 10236b0:	10bfff84 	addi	r2,r2,-2
 10236b4:	e0fffd17 	ldw	r3,-12(fp)
 10236b8:	18800115 	stw	r2,4(r3)
      rc = 0;
 10236bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10236c0:	00000f06 	br	1023700 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10236c4:	e0bffd17 	ldw	r2,-12(fp)
 10236c8:	10c00117 	ldw	r3,4(r2)
 10236cc:	00a00034 	movhi	r2,32768
 10236d0:	10bfffc4 	addi	r2,r2,-1
 10236d4:	18800c26 	beq	r3,r2,1023708 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10236d8:	e0bffd17 	ldw	r2,-12(fp)
 10236dc:	10c00917 	ldw	r3,36(r2)
 10236e0:	e0bffd17 	ldw	r2,-12(fp)
 10236e4:	10800117 	ldw	r2,4(r2)
 10236e8:	1885803a 	cmpltu	r2,r3,r2
 10236ec:	10c03fcc 	andi	r3,r2,255
 10236f0:	e0bfff17 	ldw	r2,-4(fp)
 10236f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 10236f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10236fc:	00000206 	br	1023708 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1023700:	0001883a 	nop
 1023704:	00000106 	br	102370c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1023708:	0001883a 	nop

  default:
    break;
  }

  return rc;
 102370c:	e0bffb17 	ldw	r2,-20(fp)
}
 1023710:	e037883a 	mov	sp,fp
 1023714:	df000017 	ldw	fp,0(sp)
 1023718:	dec00104 	addi	sp,sp,4
 102371c:	f800283a 	ret

01023720 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1023720:	defff304 	addi	sp,sp,-52
 1023724:	dfc00c15 	stw	ra,48(sp)
 1023728:	df000b15 	stw	fp,44(sp)
 102372c:	df000b04 	addi	fp,sp,44
 1023730:	e13ffc15 	stw	r4,-16(fp)
 1023734:	e17ffd15 	stw	r5,-12(fp)
 1023738:	e1bffe15 	stw	r6,-8(fp)
 102373c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1023740:	e0bffd17 	ldw	r2,-12(fp)
 1023744:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1023748:	00004706 	br	1023868 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 102374c:	e0bffc17 	ldw	r2,-16(fp)
 1023750:	10800a17 	ldw	r2,40(r2)
 1023754:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1023758:	e0bffc17 	ldw	r2,-16(fp)
 102375c:	10800b17 	ldw	r2,44(r2)
 1023760:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1023764:	e0fff717 	ldw	r3,-36(fp)
 1023768:	e0bff817 	ldw	r2,-32(fp)
 102376c:	18800536 	bltu	r3,r2,1023784 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1023770:	e0fff717 	ldw	r3,-36(fp)
 1023774:	e0bff817 	ldw	r2,-32(fp)
 1023778:	1885c83a 	sub	r2,r3,r2
 102377c:	e0bff615 	stw	r2,-40(fp)
 1023780:	00000406 	br	1023794 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1023784:	00c20004 	movi	r3,2048
 1023788:	e0bff817 	ldw	r2,-32(fp)
 102378c:	1885c83a 	sub	r2,r3,r2
 1023790:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1023794:	e0bff617 	ldw	r2,-40(fp)
 1023798:	10001e26 	beq	r2,zero,1023814 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 102379c:	e0fffe17 	ldw	r3,-8(fp)
 10237a0:	e0bff617 	ldw	r2,-40(fp)
 10237a4:	1880022e 	bgeu	r3,r2,10237b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 10237a8:	e0bffe17 	ldw	r2,-8(fp)
 10237ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10237b0:	e0bffc17 	ldw	r2,-16(fp)
 10237b4:	10c00e04 	addi	r3,r2,56
 10237b8:	e0bff817 	ldw	r2,-32(fp)
 10237bc:	1885883a 	add	r2,r3,r2
 10237c0:	e1bff617 	ldw	r6,-40(fp)
 10237c4:	100b883a 	mov	r5,r2
 10237c8:	e13ff517 	ldw	r4,-44(fp)
 10237cc:	10139e80 	call	10139e8 <memcpy>
      ptr   += n;
 10237d0:	e0fff517 	ldw	r3,-44(fp)
 10237d4:	e0bff617 	ldw	r2,-40(fp)
 10237d8:	1885883a 	add	r2,r3,r2
 10237dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 10237e0:	e0fffe17 	ldw	r3,-8(fp)
 10237e4:	e0bff617 	ldw	r2,-40(fp)
 10237e8:	1885c83a 	sub	r2,r3,r2
 10237ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10237f0:	e0fff817 	ldw	r3,-32(fp)
 10237f4:	e0bff617 	ldw	r2,-40(fp)
 10237f8:	1885883a 	add	r2,r3,r2
 10237fc:	10c1ffcc 	andi	r3,r2,2047
 1023800:	e0bffc17 	ldw	r2,-16(fp)
 1023804:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1023808:	e0bffe17 	ldw	r2,-8(fp)
 102380c:	00bfcf16 	blt	zero,r2,102374c <__alt_data_end+0xff02374c>
 1023810:	00000106 	br	1023818 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1023814:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1023818:	e0fff517 	ldw	r3,-44(fp)
 102381c:	e0bffd17 	ldw	r2,-12(fp)
 1023820:	1880141e 	bne	r3,r2,1023874 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1023824:	e0bfff17 	ldw	r2,-4(fp)
 1023828:	1090000c 	andi	r2,r2,16384
 102382c:	1000131e 	bne	r2,zero,102387c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1023830:	0001883a 	nop
 1023834:	e0bffc17 	ldw	r2,-16(fp)
 1023838:	10c00a17 	ldw	r3,40(r2)
 102383c:	e0bff717 	ldw	r2,-36(fp)
 1023840:	1880051e 	bne	r3,r2,1023858 <altera_avalon_jtag_uart_read+0x138>
 1023844:	e0bffc17 	ldw	r2,-16(fp)
 1023848:	10c00917 	ldw	r3,36(r2)
 102384c:	e0bffc17 	ldw	r2,-16(fp)
 1023850:	10800117 	ldw	r2,4(r2)
 1023854:	18bff736 	bltu	r3,r2,1023834 <__alt_data_end+0xff023834>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1023858:	e0bffc17 	ldw	r2,-16(fp)
 102385c:	10c00a17 	ldw	r3,40(r2)
 1023860:	e0bff717 	ldw	r2,-36(fp)
 1023864:	18800726 	beq	r3,r2,1023884 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1023868:	e0bffe17 	ldw	r2,-8(fp)
 102386c:	00bfb716 	blt	zero,r2,102374c <__alt_data_end+0xff02374c>
 1023870:	00000506 	br	1023888 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1023874:	0001883a 	nop
 1023878:	00000306 	br	1023888 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 102387c:	0001883a 	nop
 1023880:	00000106 	br	1023888 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1023884:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1023888:	e0fff517 	ldw	r3,-44(fp)
 102388c:	e0bffd17 	ldw	r2,-12(fp)
 1023890:	18801826 	beq	r3,r2,10238f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023894:	0005303a 	rdctl	r2,status
 1023898:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102389c:	e0fffb17 	ldw	r3,-20(fp)
 10238a0:	00bfff84 	movi	r2,-2
 10238a4:	1884703a 	and	r2,r3,r2
 10238a8:	1001703a 	wrctl	status,r2
  
  return context;
 10238ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10238b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10238b4:	e0bffc17 	ldw	r2,-16(fp)
 10238b8:	10800817 	ldw	r2,32(r2)
 10238bc:	10c00054 	ori	r3,r2,1
 10238c0:	e0bffc17 	ldw	r2,-16(fp)
 10238c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10238c8:	e0bffc17 	ldw	r2,-16(fp)
 10238cc:	10800017 	ldw	r2,0(r2)
 10238d0:	10800104 	addi	r2,r2,4
 10238d4:	1007883a 	mov	r3,r2
 10238d8:	e0bffc17 	ldw	r2,-16(fp)
 10238dc:	10800817 	ldw	r2,32(r2)
 10238e0:	18800035 	stwio	r2,0(r3)
 10238e4:	e0bffa17 	ldw	r2,-24(fp)
 10238e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10238ec:	e0bff917 	ldw	r2,-28(fp)
 10238f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10238f4:	e0fff517 	ldw	r3,-44(fp)
 10238f8:	e0bffd17 	ldw	r2,-12(fp)
 10238fc:	18800426 	beq	r3,r2,1023910 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1023900:	e0fff517 	ldw	r3,-44(fp)
 1023904:	e0bffd17 	ldw	r2,-12(fp)
 1023908:	1885c83a 	sub	r2,r3,r2
 102390c:	00000606 	br	1023928 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1023910:	e0bfff17 	ldw	r2,-4(fp)
 1023914:	1090000c 	andi	r2,r2,16384
 1023918:	10000226 	beq	r2,zero,1023924 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 102391c:	00bffd44 	movi	r2,-11
 1023920:	00000106 	br	1023928 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1023924:	00bffec4 	movi	r2,-5
}
 1023928:	e037883a 	mov	sp,fp
 102392c:	dfc00117 	ldw	ra,4(sp)
 1023930:	df000017 	ldw	fp,0(sp)
 1023934:	dec00204 	addi	sp,sp,8
 1023938:	f800283a 	ret

0102393c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 102393c:	defff304 	addi	sp,sp,-52
 1023940:	dfc00c15 	stw	ra,48(sp)
 1023944:	df000b15 	stw	fp,44(sp)
 1023948:	df000b04 	addi	fp,sp,44
 102394c:	e13ffc15 	stw	r4,-16(fp)
 1023950:	e17ffd15 	stw	r5,-12(fp)
 1023954:	e1bffe15 	stw	r6,-8(fp)
 1023958:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 102395c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1023960:	e0bffd17 	ldw	r2,-12(fp)
 1023964:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1023968:	00003706 	br	1023a48 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 102396c:	e0bffc17 	ldw	r2,-16(fp)
 1023970:	10800c17 	ldw	r2,48(r2)
 1023974:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1023978:	e0bffc17 	ldw	r2,-16(fp)
 102397c:	10800d17 	ldw	r2,52(r2)
 1023980:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1023984:	e0fff917 	ldw	r3,-28(fp)
 1023988:	e0bff517 	ldw	r2,-44(fp)
 102398c:	1880062e 	bgeu	r3,r2,10239a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1023990:	e0fff517 	ldw	r3,-44(fp)
 1023994:	e0bff917 	ldw	r2,-28(fp)
 1023998:	1885c83a 	sub	r2,r3,r2
 102399c:	10bfffc4 	addi	r2,r2,-1
 10239a0:	e0bff615 	stw	r2,-40(fp)
 10239a4:	00000b06 	br	10239d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10239a8:	e0bff517 	ldw	r2,-44(fp)
 10239ac:	10000526 	beq	r2,zero,10239c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10239b0:	00c20004 	movi	r3,2048
 10239b4:	e0bff917 	ldw	r2,-28(fp)
 10239b8:	1885c83a 	sub	r2,r3,r2
 10239bc:	e0bff615 	stw	r2,-40(fp)
 10239c0:	00000406 	br	10239d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10239c4:	00c1ffc4 	movi	r3,2047
 10239c8:	e0bff917 	ldw	r2,-28(fp)
 10239cc:	1885c83a 	sub	r2,r3,r2
 10239d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10239d4:	e0bff617 	ldw	r2,-40(fp)
 10239d8:	10001e26 	beq	r2,zero,1023a54 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 10239dc:	e0fffe17 	ldw	r3,-8(fp)
 10239e0:	e0bff617 	ldw	r2,-40(fp)
 10239e4:	1880022e 	bgeu	r3,r2,10239f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 10239e8:	e0bffe17 	ldw	r2,-8(fp)
 10239ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10239f0:	e0bffc17 	ldw	r2,-16(fp)
 10239f4:	10c20e04 	addi	r3,r2,2104
 10239f8:	e0bff917 	ldw	r2,-28(fp)
 10239fc:	1885883a 	add	r2,r3,r2
 1023a00:	e1bff617 	ldw	r6,-40(fp)
 1023a04:	e17ffd17 	ldw	r5,-12(fp)
 1023a08:	1009883a 	mov	r4,r2
 1023a0c:	10139e80 	call	10139e8 <memcpy>
      ptr   += n;
 1023a10:	e0fffd17 	ldw	r3,-12(fp)
 1023a14:	e0bff617 	ldw	r2,-40(fp)
 1023a18:	1885883a 	add	r2,r3,r2
 1023a1c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1023a20:	e0fffe17 	ldw	r3,-8(fp)
 1023a24:	e0bff617 	ldw	r2,-40(fp)
 1023a28:	1885c83a 	sub	r2,r3,r2
 1023a2c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1023a30:	e0fff917 	ldw	r3,-28(fp)
 1023a34:	e0bff617 	ldw	r2,-40(fp)
 1023a38:	1885883a 	add	r2,r3,r2
 1023a3c:	10c1ffcc 	andi	r3,r2,2047
 1023a40:	e0bffc17 	ldw	r2,-16(fp)
 1023a44:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1023a48:	e0bffe17 	ldw	r2,-8(fp)
 1023a4c:	00bfc716 	blt	zero,r2,102396c <__alt_data_end+0xff02396c>
 1023a50:	00000106 	br	1023a58 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1023a54:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023a58:	0005303a 	rdctl	r2,status
 1023a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023a60:	e0fffb17 	ldw	r3,-20(fp)
 1023a64:	00bfff84 	movi	r2,-2
 1023a68:	1884703a 	and	r2,r3,r2
 1023a6c:	1001703a 	wrctl	status,r2
  
  return context;
 1023a70:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1023a74:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1023a78:	e0bffc17 	ldw	r2,-16(fp)
 1023a7c:	10800817 	ldw	r2,32(r2)
 1023a80:	10c00094 	ori	r3,r2,2
 1023a84:	e0bffc17 	ldw	r2,-16(fp)
 1023a88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1023a8c:	e0bffc17 	ldw	r2,-16(fp)
 1023a90:	10800017 	ldw	r2,0(r2)
 1023a94:	10800104 	addi	r2,r2,4
 1023a98:	1007883a 	mov	r3,r2
 1023a9c:	e0bffc17 	ldw	r2,-16(fp)
 1023aa0:	10800817 	ldw	r2,32(r2)
 1023aa4:	18800035 	stwio	r2,0(r3)
 1023aa8:	e0bffa17 	ldw	r2,-24(fp)
 1023aac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1023ab0:	e0bff817 	ldw	r2,-32(fp)
 1023ab4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1023ab8:	e0bffe17 	ldw	r2,-8(fp)
 1023abc:	0080100e 	bge	zero,r2,1023b00 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1023ac0:	e0bfff17 	ldw	r2,-4(fp)
 1023ac4:	1090000c 	andi	r2,r2,16384
 1023ac8:	1000101e 	bne	r2,zero,1023b0c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1023acc:	0001883a 	nop
 1023ad0:	e0bffc17 	ldw	r2,-16(fp)
 1023ad4:	10c00d17 	ldw	r3,52(r2)
 1023ad8:	e0bff517 	ldw	r2,-44(fp)
 1023adc:	1880051e 	bne	r3,r2,1023af4 <altera_avalon_jtag_uart_write+0x1b8>
 1023ae0:	e0bffc17 	ldw	r2,-16(fp)
 1023ae4:	10c00917 	ldw	r3,36(r2)
 1023ae8:	e0bffc17 	ldw	r2,-16(fp)
 1023aec:	10800117 	ldw	r2,4(r2)
 1023af0:	18bff736 	bltu	r3,r2,1023ad0 <__alt_data_end+0xff023ad0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1023af4:	e0bffc17 	ldw	r2,-16(fp)
 1023af8:	10800917 	ldw	r2,36(r2)
 1023afc:	1000051e 	bne	r2,zero,1023b14 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1023b00:	e0bffe17 	ldw	r2,-8(fp)
 1023b04:	00bfd016 	blt	zero,r2,1023a48 <__alt_data_end+0xff023a48>
 1023b08:	00000306 	br	1023b18 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1023b0c:	0001883a 	nop
 1023b10:	00000106 	br	1023b18 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1023b14:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1023b18:	e0fffd17 	ldw	r3,-12(fp)
 1023b1c:	e0bff717 	ldw	r2,-36(fp)
 1023b20:	18800426 	beq	r3,r2,1023b34 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1023b24:	e0fffd17 	ldw	r3,-12(fp)
 1023b28:	e0bff717 	ldw	r2,-36(fp)
 1023b2c:	1885c83a 	sub	r2,r3,r2
 1023b30:	00000606 	br	1023b4c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1023b34:	e0bfff17 	ldw	r2,-4(fp)
 1023b38:	1090000c 	andi	r2,r2,16384
 1023b3c:	10000226 	beq	r2,zero,1023b48 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1023b40:	00bffd44 	movi	r2,-11
 1023b44:	00000106 	br	1023b4c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1023b48:	00bffec4 	movi	r2,-5
}
 1023b4c:	e037883a 	mov	sp,fp
 1023b50:	dfc00117 	ldw	ra,4(sp)
 1023b54:	df000017 	ldw	fp,0(sp)
 1023b58:	dec00204 	addi	sp,sp,8
 1023b5c:	f800283a 	ret

01023b60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1023b60:	defffe04 	addi	sp,sp,-8
 1023b64:	dfc00115 	stw	ra,4(sp)
 1023b68:	df000015 	stw	fp,0(sp)
 1023b6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1023b70:	d0a01517 	ldw	r2,-32684(gp)
 1023b74:	10000326 	beq	r2,zero,1023b84 <alt_get_errno+0x24>
 1023b78:	d0a01517 	ldw	r2,-32684(gp)
 1023b7c:	103ee83a 	callr	r2
 1023b80:	00000106 	br	1023b88 <alt_get_errno+0x28>
 1023b84:	d0a73004 	addi	r2,gp,-25408
}
 1023b88:	e037883a 	mov	sp,fp
 1023b8c:	dfc00117 	ldw	ra,4(sp)
 1023b90:	df000017 	ldw	fp,0(sp)
 1023b94:	dec00204 	addi	sp,sp,8
 1023b98:	f800283a 	ret

01023b9c <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1023b9c:	defff904 	addi	sp,sp,-28
 1023ba0:	df000615 	stw	fp,24(sp)
 1023ba4:	df000604 	addi	fp,sp,24
 1023ba8:	e13ffe15 	stw	r4,-8(fp)
 1023bac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 1023bb0:	00bfffc4 	movi	r2,-1
 1023bb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 1023bb8:	0005317a 	rdctl	r2,cpuid
 1023bbc:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 1023bc0:	e0bffb17 	ldw	r2,-20(fp)
 1023bc4:	1006943a 	slli	r3,r2,16
 1023bc8:	e0bfff17 	ldw	r2,-4(fp)
 1023bcc:	1884b03a 	or	r2,r3,r2
 1023bd0:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 1023bd4:	e0bffe17 	ldw	r2,-8(fp)
 1023bd8:	10800317 	ldw	r2,12(r2)
 1023bdc:	e0fffc17 	ldw	r3,-16(fp)
 1023be0:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1023be4:	e0bffe17 	ldw	r2,-8(fp)
 1023be8:	10800317 	ldw	r2,12(r2)
 1023bec:	10800037 	ldwio	r2,0(r2)
 1023bf0:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 1023bf4:	e0fffd17 	ldw	r3,-12(fp)
 1023bf8:	e0bffc17 	ldw	r2,-16(fp)
 1023bfc:	1880011e 	bne	r3,r2,1023c04 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 1023c00:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 1023c04:	e0bffa17 	ldw	r2,-24(fp)
}
 1023c08:	e037883a 	mov	sp,fp
 1023c0c:	df000017 	ldw	fp,0(sp)
 1023c10:	dec00104 	addi	sp,sp,4
 1023c14:	f800283a 	ret

01023c18 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 1023c18:	defffc04 	addi	sp,sp,-16
 1023c1c:	dfc00315 	stw	ra,12(sp)
 1023c20:	df000215 	stw	fp,8(sp)
 1023c24:	df000204 	addi	fp,sp,8
 1023c28:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 1023c2c:	d1601804 	addi	r5,gp,-32672
 1023c30:	e13fff17 	ldw	r4,-4(fp)
 1023c34:	102438c0 	call	102438c <alt_find_dev>
 1023c38:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 1023c3c:	e0bffe17 	ldw	r2,-8(fp)
 1023c40:	1000041e 	bne	r2,zero,1023c54 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 1023c44:	1023b600 	call	1023b60 <alt_get_errno>
 1023c48:	1007883a 	mov	r3,r2
 1023c4c:	008004c4 	movi	r2,19
 1023c50:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1023c54:	e0bffe17 	ldw	r2,-8(fp)
}
 1023c58:	e037883a 	mov	sp,fp
 1023c5c:	dfc00117 	ldw	ra,4(sp)
 1023c60:	df000017 	ldw	fp,0(sp)
 1023c64:	dec00204 	addi	sp,sp,8
 1023c68:	f800283a 	ret

01023c6c <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 1023c6c:	defffe04 	addi	sp,sp,-8
 1023c70:	df000115 	stw	fp,4(sp)
 1023c74:	df000104 	addi	fp,sp,4
 1023c78:	e13fff15 	stw	r4,-4(fp)
  return;
 1023c7c:	0001883a 	nop
}
 1023c80:	e037883a 	mov	sp,fp
 1023c84:	df000017 	ldw	fp,0(sp)
 1023c88:	dec00104 	addi	sp,sp,4
 1023c8c:	f800283a 	ret

01023c90 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 1023c90:	defffc04 	addi	sp,sp,-16
 1023c94:	dfc00315 	stw	ra,12(sp)
 1023c98:	df000215 	stw	fp,8(sp)
 1023c9c:	df000204 	addi	fp,sp,8
 1023ca0:	e13ffe15 	stw	r4,-8(fp)
 1023ca4:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 1023ca8:	0001883a 	nop
 1023cac:	e17fff17 	ldw	r5,-4(fp)
 1023cb0:	e13ffe17 	ldw	r4,-8(fp)
 1023cb4:	1023b9c0 	call	1023b9c <alt_mutex_trylock>
 1023cb8:	103ffc1e 	bne	r2,zero,1023cac <__alt_data_end+0xff023cac>
}
 1023cbc:	0001883a 	nop
 1023cc0:	e037883a 	mov	sp,fp
 1023cc4:	dfc00117 	ldw	ra,4(sp)
 1023cc8:	df000017 	ldw	fp,0(sp)
 1023ccc:	dec00204 	addi	sp,sp,8
 1023cd0:	f800283a 	ret

01023cd4 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1023cd4:	defffa04 	addi	sp,sp,-24
 1023cd8:	dfc00515 	stw	ra,20(sp)
 1023cdc:	df000415 	stw	fp,16(sp)
 1023ce0:	df000404 	addi	fp,sp,16
 1023ce4:	e13ffd15 	stw	r4,-12(fp)
 1023ce8:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 1023cec:	e17ffe17 	ldw	r5,-8(fp)
 1023cf0:	e13ffd17 	ldw	r4,-12(fp)
 1023cf4:	1023b9c0 	call	1023b9c <alt_mutex_trylock>
 1023cf8:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 1023cfc:	e0bffc17 	ldw	r2,-16(fp)
}
 1023d00:	e037883a 	mov	sp,fp
 1023d04:	dfc00117 	ldw	ra,4(sp)
 1023d08:	df000017 	ldw	fp,0(sp)
 1023d0c:	dec00204 	addi	sp,sp,8
 1023d10:	f800283a 	ret

01023d14 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 1023d14:	defffd04 	addi	sp,sp,-12
 1023d18:	df000215 	stw	fp,8(sp)
 1023d1c:	df000204 	addi	fp,sp,8
 1023d20:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 1023d24:	0005317a 	rdctl	r2,cpuid
 1023d28:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 1023d2c:	e0bfff17 	ldw	r2,-4(fp)
 1023d30:	10800317 	ldw	r2,12(r2)
 1023d34:	10800104 	addi	r2,r2,4
 1023d38:	00c00044 	movi	r3,1
 1023d3c:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 1023d40:	e0bfff17 	ldw	r2,-4(fp)
 1023d44:	10800317 	ldw	r2,12(r2)
 1023d48:	e0fffe17 	ldw	r3,-8(fp)
 1023d4c:	1806943a 	slli	r3,r3,16
 1023d50:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 1023d54:	0001883a 	nop
 1023d58:	e037883a 	mov	sp,fp
 1023d5c:	df000017 	ldw	fp,0(sp)
 1023d60:	dec00104 	addi	sp,sp,4
 1023d64:	f800283a 	ret

01023d68 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 1023d68:	defff904 	addi	sp,sp,-28
 1023d6c:	df000615 	stw	fp,24(sp)
 1023d70:	df000604 	addi	fp,sp,24
 1023d74:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 1023d78:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 1023d7c:	0005317a 	rdctl	r2,cpuid
 1023d80:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1023d84:	e0bfff17 	ldw	r2,-4(fp)
 1023d88:	10800317 	ldw	r2,12(r2)
 1023d8c:	10800037 	ldwio	r2,0(r2)
 1023d90:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 1023d94:	e0bffc17 	ldw	r2,-16(fp)
 1023d98:	1004d43a 	srli	r2,r2,16
 1023d9c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 1023da0:	e0fffd17 	ldw	r3,-12(fp)
 1023da4:	e0bffb17 	ldw	r2,-20(fp)
 1023da8:	1880071e 	bne	r3,r2,1023dc8 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 1023dac:	e0bffc17 	ldw	r2,-16(fp)
 1023db0:	10bfffcc 	andi	r2,r2,65535
 1023db4:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 1023db8:	e0bffe17 	ldw	r2,-8(fp)
 1023dbc:	10000226 	beq	r2,zero,1023dc8 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 1023dc0:	00800044 	movi	r2,1
 1023dc4:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 1023dc8:	e0bffa17 	ldw	r2,-24(fp)
}
 1023dcc:	e037883a 	mov	sp,fp
 1023dd0:	df000017 	ldw	fp,0(sp)
 1023dd4:	dec00104 	addi	sp,sp,4
 1023dd8:	f800283a 	ret

01023ddc <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 1023ddc:	defffc04 	addi	sp,sp,-16
 1023de0:	df000315 	stw	fp,12(sp)
 1023de4:	df000304 	addi	fp,sp,12
 1023de8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 1023dec:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 1023df0:	e0bfff17 	ldw	r2,-4(fp)
 1023df4:	10800317 	ldw	r2,12(r2)
 1023df8:	10800104 	addi	r2,r2,4
 1023dfc:	10800037 	ldwio	r2,0(r2)
 1023e00:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 1023e04:	e0bffe17 	ldw	r2,-8(fp)
 1023e08:	1080004c 	andi	r2,r2,1
 1023e0c:	10000226 	beq	r2,zero,1023e18 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 1023e10:	00800044 	movi	r2,1
 1023e14:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 1023e18:	e0bffd17 	ldw	r2,-12(fp)
}
 1023e1c:	e037883a 	mov	sp,fp
 1023e20:	df000017 	ldw	fp,0(sp)
 1023e24:	dec00104 	addi	sp,sp,4
 1023e28:	f800283a 	ret

01023e2c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1023e2c:	defffa04 	addi	sp,sp,-24
 1023e30:	dfc00515 	stw	ra,20(sp)
 1023e34:	df000415 	stw	fp,16(sp)
 1023e38:	df000404 	addi	fp,sp,16
 1023e3c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1023e40:	0007883a 	mov	r3,zero
 1023e44:	e0bfff17 	ldw	r2,-4(fp)
 1023e48:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1023e4c:	e0bfff17 	ldw	r2,-4(fp)
 1023e50:	10800104 	addi	r2,r2,4
 1023e54:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023e58:	0005303a 	rdctl	r2,status
 1023e5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023e60:	e0fffd17 	ldw	r3,-12(fp)
 1023e64:	00bfff84 	movi	r2,-2
 1023e68:	1884703a 	and	r2,r3,r2
 1023e6c:	1001703a 	wrctl	status,r2
  
  return context;
 1023e70:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1023e74:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1023e78:	1024b200 	call	1024b20 <alt_tick>
 1023e7c:	e0bffc17 	ldw	r2,-16(fp)
 1023e80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1023e84:	e0bffe17 	ldw	r2,-8(fp)
 1023e88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1023e8c:	0001883a 	nop
 1023e90:	e037883a 	mov	sp,fp
 1023e94:	dfc00117 	ldw	ra,4(sp)
 1023e98:	df000017 	ldw	fp,0(sp)
 1023e9c:	dec00204 	addi	sp,sp,8
 1023ea0:	f800283a 	ret

01023ea4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1023ea4:	defff804 	addi	sp,sp,-32
 1023ea8:	dfc00715 	stw	ra,28(sp)
 1023eac:	df000615 	stw	fp,24(sp)
 1023eb0:	df000604 	addi	fp,sp,24
 1023eb4:	e13ffc15 	stw	r4,-16(fp)
 1023eb8:	e17ffd15 	stw	r5,-12(fp)
 1023ebc:	e1bffe15 	stw	r6,-8(fp)
 1023ec0:	e1ffff15 	stw	r7,-4(fp)
 1023ec4:	e0bfff17 	ldw	r2,-4(fp)
 1023ec8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1023ecc:	d0a73517 	ldw	r2,-25388(gp)
 1023ed0:	1000021e 	bne	r2,zero,1023edc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1023ed4:	e0bffb17 	ldw	r2,-20(fp)
 1023ed8:	d0a73515 	stw	r2,-25388(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1023edc:	e0bffc17 	ldw	r2,-16(fp)
 1023ee0:	10800104 	addi	r2,r2,4
 1023ee4:	00c001c4 	movi	r3,7
 1023ee8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1023eec:	d8000015 	stw	zero,0(sp)
 1023ef0:	e1fffc17 	ldw	r7,-16(fp)
 1023ef4:	018040b4 	movhi	r6,258
 1023ef8:	318f8b04 	addi	r6,r6,15916
 1023efc:	e17ffe17 	ldw	r5,-8(fp)
 1023f00:	e13ffd17 	ldw	r4,-12(fp)
 1023f04:	10244500 	call	1024450 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1023f08:	0001883a 	nop
 1023f0c:	e037883a 	mov	sp,fp
 1023f10:	dfc00117 	ldw	ra,4(sp)
 1023f14:	df000017 	ldw	fp,0(sp)
 1023f18:	dec00204 	addi	sp,sp,8
 1023f1c:	f800283a 	ret

01023f20 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1023f20:	defff504 	addi	sp,sp,-44
 1023f24:	df000a15 	stw	fp,40(sp)
 1023f28:	df000a04 	addi	fp,sp,40
 1023f2c:	e13ffc15 	stw	r4,-16(fp)
 1023f30:	e17ffd15 	stw	r5,-12(fp)
 1023f34:	e1bffe15 	stw	r6,-8(fp)
 1023f38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1023f3c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1023f40:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
 1023f44:	10003c26 	beq	r2,zero,1024038 <alt_alarm_start+0x118>
  {
    if (alarm)
 1023f48:	e0bffc17 	ldw	r2,-16(fp)
 1023f4c:	10003826 	beq	r2,zero,1024030 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1023f50:	e0bffc17 	ldw	r2,-16(fp)
 1023f54:	e0fffe17 	ldw	r3,-8(fp)
 1023f58:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1023f5c:	e0bffc17 	ldw	r2,-16(fp)
 1023f60:	e0ffff17 	ldw	r3,-4(fp)
 1023f64:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1023f68:	0005303a 	rdctl	r2,status
 1023f6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1023f70:	e0fff917 	ldw	r3,-28(fp)
 1023f74:	00bfff84 	movi	r2,-2
 1023f78:	1884703a 	and	r2,r3,r2
 1023f7c:	1001703a 	wrctl	status,r2
  
  return context;
 1023f80:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1023f84:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1023f88:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
 1023f8c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1023f90:	e0fffd17 	ldw	r3,-12(fp)
 1023f94:	e0bff617 	ldw	r2,-40(fp)
 1023f98:	1885883a 	add	r2,r3,r2
 1023f9c:	10c00044 	addi	r3,r2,1
 1023fa0:	e0bffc17 	ldw	r2,-16(fp)
 1023fa4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1023fa8:	e0bffc17 	ldw	r2,-16(fp)
 1023fac:	10c00217 	ldw	r3,8(r2)
 1023fb0:	e0bff617 	ldw	r2,-40(fp)
 1023fb4:	1880042e 	bgeu	r3,r2,1023fc8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1023fb8:	e0bffc17 	ldw	r2,-16(fp)
 1023fbc:	00c00044 	movi	r3,1
 1023fc0:	10c00405 	stb	r3,16(r2)
 1023fc4:	00000206 	br	1023fd0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1023fc8:	e0bffc17 	ldw	r2,-16(fp)
 1023fcc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1023fd0:	e0bffc17 	ldw	r2,-16(fp)
 1023fd4:	d0e01a04 	addi	r3,gp,-32664
 1023fd8:	e0fffa15 	stw	r3,-24(fp)
 1023fdc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1023fe0:	e0bffb17 	ldw	r2,-20(fp)
 1023fe4:	e0fffa17 	ldw	r3,-24(fp)
 1023fe8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1023fec:	e0bffa17 	ldw	r2,-24(fp)
 1023ff0:	10c00017 	ldw	r3,0(r2)
 1023ff4:	e0bffb17 	ldw	r2,-20(fp)
 1023ff8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1023ffc:	e0bffa17 	ldw	r2,-24(fp)
 1024000:	10800017 	ldw	r2,0(r2)
 1024004:	e0fffb17 	ldw	r3,-20(fp)
 1024008:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 102400c:	e0bffa17 	ldw	r2,-24(fp)
 1024010:	e0fffb17 	ldw	r3,-20(fp)
 1024014:	10c00015 	stw	r3,0(r2)
 1024018:	e0bff817 	ldw	r2,-32(fp)
 102401c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024020:	e0bff717 	ldw	r2,-36(fp)
 1024024:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1024028:	0005883a 	mov	r2,zero
 102402c:	00000306 	br	102403c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1024030:	00bffa84 	movi	r2,-22
 1024034:	00000106 	br	102403c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1024038:	00bfde84 	movi	r2,-134
  }
}
 102403c:	e037883a 	mov	sp,fp
 1024040:	df000017 	ldw	fp,0(sp)
 1024044:	dec00104 	addi	sp,sp,4
 1024048:	f800283a 	ret

0102404c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 102404c:	defffa04 	addi	sp,sp,-24
 1024050:	dfc00515 	stw	ra,20(sp)
 1024054:	df000415 	stw	fp,16(sp)
 1024058:	df000404 	addi	fp,sp,16
 102405c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1024060:	008000c4 	movi	r2,3
 1024064:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1024068:	e0fffd17 	ldw	r3,-12(fp)
 102406c:	008003f4 	movhi	r2,15
 1024070:	10909004 	addi	r2,r2,16960
 1024074:	1885383a 	mul	r2,r3,r2
 1024078:	100b883a 	mov	r5,r2
 102407c:	0100bef4 	movhi	r4,763
 1024080:	213c2004 	addi	r4,r4,-3968
 1024084:	101fbb80 	call	101fbb8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1024088:	100b883a 	mov	r5,r2
 102408c:	01200034 	movhi	r4,32768
 1024090:	213fffc4 	addi	r4,r4,-1
 1024094:	101fbb80 	call	101fbb8 <__udivsi3>
 1024098:	100b883a 	mov	r5,r2
 102409c:	e13fff17 	ldw	r4,-4(fp)
 10240a0:	101fbb80 	call	101fbb8 <__udivsi3>
 10240a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 10240a8:	e0bffe17 	ldw	r2,-8(fp)
 10240ac:	10002a26 	beq	r2,zero,1024158 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 10240b0:	e03ffc15 	stw	zero,-16(fp)
 10240b4:	00001706 	br	1024114 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 10240b8:	00a00034 	movhi	r2,32768
 10240bc:	10bfffc4 	addi	r2,r2,-1
 10240c0:	10bfffc4 	addi	r2,r2,-1
 10240c4:	103ffe1e 	bne	r2,zero,10240c0 <__alt_data_end+0xff0240c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 10240c8:	e0fffd17 	ldw	r3,-12(fp)
 10240cc:	008003f4 	movhi	r2,15
 10240d0:	10909004 	addi	r2,r2,16960
 10240d4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 10240d8:	100b883a 	mov	r5,r2
 10240dc:	0100bef4 	movhi	r4,763
 10240e0:	213c2004 	addi	r4,r4,-3968
 10240e4:	101fbb80 	call	101fbb8 <__udivsi3>
 10240e8:	100b883a 	mov	r5,r2
 10240ec:	01200034 	movhi	r4,32768
 10240f0:	213fffc4 	addi	r4,r4,-1
 10240f4:	101fbb80 	call	101fbb8 <__udivsi3>
 10240f8:	1007883a 	mov	r3,r2
 10240fc:	e0bfff17 	ldw	r2,-4(fp)
 1024100:	10c5c83a 	sub	r2,r2,r3
 1024104:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1024108:	e0bffc17 	ldw	r2,-16(fp)
 102410c:	10800044 	addi	r2,r2,1
 1024110:	e0bffc15 	stw	r2,-16(fp)
 1024114:	e0fffc17 	ldw	r3,-16(fp)
 1024118:	e0bffe17 	ldw	r2,-8(fp)
 102411c:	18bfe616 	blt	r3,r2,10240b8 <__alt_data_end+0xff0240b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1024120:	e0fffd17 	ldw	r3,-12(fp)
 1024124:	008003f4 	movhi	r2,15
 1024128:	10909004 	addi	r2,r2,16960
 102412c:	1885383a 	mul	r2,r3,r2
 1024130:	100b883a 	mov	r5,r2
 1024134:	0100bef4 	movhi	r4,763
 1024138:	213c2004 	addi	r4,r4,-3968
 102413c:	101fbb80 	call	101fbb8 <__udivsi3>
 1024140:	1007883a 	mov	r3,r2
 1024144:	e0bfff17 	ldw	r2,-4(fp)
 1024148:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 102414c:	10bfffc4 	addi	r2,r2,-1
 1024150:	103ffe1e 	bne	r2,zero,102414c <__alt_data_end+0xff02414c>
 1024154:	00000d06 	br	102418c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1024158:	e0fffd17 	ldw	r3,-12(fp)
 102415c:	008003f4 	movhi	r2,15
 1024160:	10909004 	addi	r2,r2,16960
 1024164:	1885383a 	mul	r2,r3,r2
 1024168:	100b883a 	mov	r5,r2
 102416c:	0100bef4 	movhi	r4,763
 1024170:	213c2004 	addi	r4,r4,-3968
 1024174:	101fbb80 	call	101fbb8 <__udivsi3>
 1024178:	1007883a 	mov	r3,r2
 102417c:	e0bfff17 	ldw	r2,-4(fp)
 1024180:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1024184:	10bfffc4 	addi	r2,r2,-1
 1024188:	00bffe16 	blt	zero,r2,1024184 <__alt_data_end+0xff024184>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 102418c:	0005883a 	mov	r2,zero
}
 1024190:	e037883a 	mov	sp,fp
 1024194:	dfc00117 	ldw	ra,4(sp)
 1024198:	df000017 	ldw	fp,0(sp)
 102419c:	dec00204 	addi	sp,sp,8
 10241a0:	f800283a 	ret

010241a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10241a4:	defffe04 	addi	sp,sp,-8
 10241a8:	df000115 	stw	fp,4(sp)
 10241ac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10241b0:	e03fff15 	stw	zero,-4(fp)
 10241b4:	00000506 	br	10241cc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10241b8:	e0bfff17 	ldw	r2,-4(fp)
 10241bc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10241c0:	e0bfff17 	ldw	r2,-4(fp)
 10241c4:	10800804 	addi	r2,r2,32
 10241c8:	e0bfff15 	stw	r2,-4(fp)
 10241cc:	e0bfff17 	ldw	r2,-4(fp)
 10241d0:	10820030 	cmpltui	r2,r2,2048
 10241d4:	103ff81e 	bne	r2,zero,10241b8 <__alt_data_end+0xff0241b8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10241d8:	0001883a 	nop
 10241dc:	e037883a 	mov	sp,fp
 10241e0:	df000017 	ldw	fp,0(sp)
 10241e4:	dec00104 	addi	sp,sp,4
 10241e8:	f800283a 	ret

010241ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10241ec:	defffe04 	addi	sp,sp,-8
 10241f0:	dfc00115 	stw	ra,4(sp)
 10241f4:	df000015 	stw	fp,0(sp)
 10241f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10241fc:	d0a01517 	ldw	r2,-32684(gp)
 1024200:	10000326 	beq	r2,zero,1024210 <alt_get_errno+0x24>
 1024204:	d0a01517 	ldw	r2,-32684(gp)
 1024208:	103ee83a 	callr	r2
 102420c:	00000106 	br	1024214 <alt_get_errno+0x28>
 1024210:	d0a73004 	addi	r2,gp,-25408
}
 1024214:	e037883a 	mov	sp,fp
 1024218:	dfc00117 	ldw	ra,4(sp)
 102421c:	df000017 	ldw	fp,0(sp)
 1024220:	dec00204 	addi	sp,sp,8
 1024224:	f800283a 	ret

01024228 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1024228:	defffa04 	addi	sp,sp,-24
 102422c:	dfc00515 	stw	ra,20(sp)
 1024230:	df000415 	stw	fp,16(sp)
 1024234:	df000404 	addi	fp,sp,16
 1024238:	e13ffe15 	stw	r4,-8(fp)
 102423c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1024240:	e0bffe17 	ldw	r2,-8(fp)
 1024244:	10000326 	beq	r2,zero,1024254 <alt_dev_llist_insert+0x2c>
 1024248:	e0bffe17 	ldw	r2,-8(fp)
 102424c:	10800217 	ldw	r2,8(r2)
 1024250:	1000061e 	bne	r2,zero,102426c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1024254:	10241ec0 	call	10241ec <alt_get_errno>
 1024258:	1007883a 	mov	r3,r2
 102425c:	00800584 	movi	r2,22
 1024260:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1024264:	00bffa84 	movi	r2,-22
 1024268:	00001306 	br	10242b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 102426c:	e0bffe17 	ldw	r2,-8(fp)
 1024270:	e0ffff17 	ldw	r3,-4(fp)
 1024274:	e0fffc15 	stw	r3,-16(fp)
 1024278:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 102427c:	e0bffd17 	ldw	r2,-12(fp)
 1024280:	e0fffc17 	ldw	r3,-16(fp)
 1024284:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1024288:	e0bffc17 	ldw	r2,-16(fp)
 102428c:	10c00017 	ldw	r3,0(r2)
 1024290:	e0bffd17 	ldw	r2,-12(fp)
 1024294:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1024298:	e0bffc17 	ldw	r2,-16(fp)
 102429c:	10800017 	ldw	r2,0(r2)
 10242a0:	e0fffd17 	ldw	r3,-12(fp)
 10242a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10242a8:	e0bffc17 	ldw	r2,-16(fp)
 10242ac:	e0fffd17 	ldw	r3,-12(fp)
 10242b0:	10c00015 	stw	r3,0(r2)

  return 0;  
 10242b4:	0005883a 	mov	r2,zero
}
 10242b8:	e037883a 	mov	sp,fp
 10242bc:	dfc00117 	ldw	ra,4(sp)
 10242c0:	df000017 	ldw	fp,0(sp)
 10242c4:	dec00204 	addi	sp,sp,8
 10242c8:	f800283a 	ret

010242cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10242cc:	defffd04 	addi	sp,sp,-12
 10242d0:	dfc00215 	stw	ra,8(sp)
 10242d4:	df000115 	stw	fp,4(sp)
 10242d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10242dc:	008040b4 	movhi	r2,258
 10242e0:	10948604 	addi	r2,r2,21016
 10242e4:	e0bfff15 	stw	r2,-4(fp)
 10242e8:	00000606 	br	1024304 <_do_ctors+0x38>
        (*ctor) (); 
 10242ec:	e0bfff17 	ldw	r2,-4(fp)
 10242f0:	10800017 	ldw	r2,0(r2)
 10242f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10242f8:	e0bfff17 	ldw	r2,-4(fp)
 10242fc:	10bfff04 	addi	r2,r2,-4
 1024300:	e0bfff15 	stw	r2,-4(fp)
 1024304:	e0ffff17 	ldw	r3,-4(fp)
 1024308:	008040b4 	movhi	r2,258
 102430c:	10948204 	addi	r2,r2,21000
 1024310:	18bff62e 	bgeu	r3,r2,10242ec <__alt_data_end+0xff0242ec>
        (*ctor) (); 
}
 1024314:	0001883a 	nop
 1024318:	e037883a 	mov	sp,fp
 102431c:	dfc00117 	ldw	ra,4(sp)
 1024320:	df000017 	ldw	fp,0(sp)
 1024324:	dec00204 	addi	sp,sp,8
 1024328:	f800283a 	ret

0102432c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 102432c:	defffd04 	addi	sp,sp,-12
 1024330:	dfc00215 	stw	ra,8(sp)
 1024334:	df000115 	stw	fp,4(sp)
 1024338:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102433c:	008040b4 	movhi	r2,258
 1024340:	10948604 	addi	r2,r2,21016
 1024344:	e0bfff15 	stw	r2,-4(fp)
 1024348:	00000606 	br	1024364 <_do_dtors+0x38>
        (*dtor) (); 
 102434c:	e0bfff17 	ldw	r2,-4(fp)
 1024350:	10800017 	ldw	r2,0(r2)
 1024354:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1024358:	e0bfff17 	ldw	r2,-4(fp)
 102435c:	10bfff04 	addi	r2,r2,-4
 1024360:	e0bfff15 	stw	r2,-4(fp)
 1024364:	e0ffff17 	ldw	r3,-4(fp)
 1024368:	008040b4 	movhi	r2,258
 102436c:	10948704 	addi	r2,r2,21020
 1024370:	18bff62e 	bgeu	r3,r2,102434c <__alt_data_end+0xff02434c>
        (*dtor) (); 
}
 1024374:	0001883a 	nop
 1024378:	e037883a 	mov	sp,fp
 102437c:	dfc00117 	ldw	ra,4(sp)
 1024380:	df000017 	ldw	fp,0(sp)
 1024384:	dec00204 	addi	sp,sp,8
 1024388:	f800283a 	ret

0102438c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 102438c:	defffa04 	addi	sp,sp,-24
 1024390:	dfc00515 	stw	ra,20(sp)
 1024394:	df000415 	stw	fp,16(sp)
 1024398:	df000404 	addi	fp,sp,16
 102439c:	e13ffe15 	stw	r4,-8(fp)
 10243a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10243a4:	e0bfff17 	ldw	r2,-4(fp)
 10243a8:	10800017 	ldw	r2,0(r2)
 10243ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10243b0:	e13ffe17 	ldw	r4,-8(fp)
 10243b4:	101463c0 	call	101463c <strlen>
 10243b8:	10800044 	addi	r2,r2,1
 10243bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10243c0:	00000d06 	br	10243f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10243c4:	e0bffc17 	ldw	r2,-16(fp)
 10243c8:	10800217 	ldw	r2,8(r2)
 10243cc:	e0fffd17 	ldw	r3,-12(fp)
 10243d0:	180d883a 	mov	r6,r3
 10243d4:	e17ffe17 	ldw	r5,-8(fp)
 10243d8:	1009883a 	mov	r4,r2
 10243dc:	101396c0 	call	101396c <memcmp>
 10243e0:	1000021e 	bne	r2,zero,10243ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10243e4:	e0bffc17 	ldw	r2,-16(fp)
 10243e8:	00000706 	br	1024408 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10243ec:	e0bffc17 	ldw	r2,-16(fp)
 10243f0:	10800017 	ldw	r2,0(r2)
 10243f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10243f8:	e0fffc17 	ldw	r3,-16(fp)
 10243fc:	e0bfff17 	ldw	r2,-4(fp)
 1024400:	18bff01e 	bne	r3,r2,10243c4 <__alt_data_end+0xff0243c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1024404:	0005883a 	mov	r2,zero
}
 1024408:	e037883a 	mov	sp,fp
 102440c:	dfc00117 	ldw	ra,4(sp)
 1024410:	df000017 	ldw	fp,0(sp)
 1024414:	dec00204 	addi	sp,sp,8
 1024418:	f800283a 	ret

0102441c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 102441c:	defffe04 	addi	sp,sp,-8
 1024420:	dfc00115 	stw	ra,4(sp)
 1024424:	df000015 	stw	fp,0(sp)
 1024428:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 102442c:	01420004 	movi	r5,2048
 1024430:	0009883a 	mov	r4,zero
 1024434:	1024df80 	call	1024df8 <alt_icache_flush>
#endif
}
 1024438:	0001883a 	nop
 102443c:	e037883a 	mov	sp,fp
 1024440:	dfc00117 	ldw	ra,4(sp)
 1024444:	df000017 	ldw	fp,0(sp)
 1024448:	dec00204 	addi	sp,sp,8
 102444c:	f800283a 	ret

01024450 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1024450:	defff904 	addi	sp,sp,-28
 1024454:	dfc00615 	stw	ra,24(sp)
 1024458:	df000515 	stw	fp,20(sp)
 102445c:	df000504 	addi	fp,sp,20
 1024460:	e13ffc15 	stw	r4,-16(fp)
 1024464:	e17ffd15 	stw	r5,-12(fp)
 1024468:	e1bffe15 	stw	r6,-8(fp)
 102446c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1024470:	e0800217 	ldw	r2,8(fp)
 1024474:	d8800015 	stw	r2,0(sp)
 1024478:	e1ffff17 	ldw	r7,-4(fp)
 102447c:	e1bffe17 	ldw	r6,-8(fp)
 1024480:	e17ffd17 	ldw	r5,-12(fp)
 1024484:	e13ffc17 	ldw	r4,-16(fp)
 1024488:	10246000 	call	1024600 <alt_iic_isr_register>
}  
 102448c:	e037883a 	mov	sp,fp
 1024490:	dfc00117 	ldw	ra,4(sp)
 1024494:	df000017 	ldw	fp,0(sp)
 1024498:	dec00204 	addi	sp,sp,8
 102449c:	f800283a 	ret

010244a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10244a0:	defff904 	addi	sp,sp,-28
 10244a4:	df000615 	stw	fp,24(sp)
 10244a8:	df000604 	addi	fp,sp,24
 10244ac:	e13ffe15 	stw	r4,-8(fp)
 10244b0:	e17fff15 	stw	r5,-4(fp)
 10244b4:	e0bfff17 	ldw	r2,-4(fp)
 10244b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10244bc:	0005303a 	rdctl	r2,status
 10244c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10244c4:	e0fffb17 	ldw	r3,-20(fp)
 10244c8:	00bfff84 	movi	r2,-2
 10244cc:	1884703a 	and	r2,r3,r2
 10244d0:	1001703a 	wrctl	status,r2
  
  return context;
 10244d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10244d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 10244dc:	00c00044 	movi	r3,1
 10244e0:	e0bffa17 	ldw	r2,-24(fp)
 10244e4:	1884983a 	sll	r2,r3,r2
 10244e8:	1007883a 	mov	r3,r2
 10244ec:	d0a73117 	ldw	r2,-25404(gp)
 10244f0:	1884b03a 	or	r2,r3,r2
 10244f4:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10244f8:	d0a73117 	ldw	r2,-25404(gp)
 10244fc:	100170fa 	wrctl	ienable,r2
 1024500:	e0bffc17 	ldw	r2,-16(fp)
 1024504:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024508:	e0bffd17 	ldw	r2,-12(fp)
 102450c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1024510:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1024514:	0001883a 	nop
}
 1024518:	e037883a 	mov	sp,fp
 102451c:	df000017 	ldw	fp,0(sp)
 1024520:	dec00104 	addi	sp,sp,4
 1024524:	f800283a 	ret

01024528 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1024528:	defff904 	addi	sp,sp,-28
 102452c:	df000615 	stw	fp,24(sp)
 1024530:	df000604 	addi	fp,sp,24
 1024534:	e13ffe15 	stw	r4,-8(fp)
 1024538:	e17fff15 	stw	r5,-4(fp)
 102453c:	e0bfff17 	ldw	r2,-4(fp)
 1024540:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024544:	0005303a 	rdctl	r2,status
 1024548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102454c:	e0fffb17 	ldw	r3,-20(fp)
 1024550:	00bfff84 	movi	r2,-2
 1024554:	1884703a 	and	r2,r3,r2
 1024558:	1001703a 	wrctl	status,r2
  
  return context;
 102455c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1024560:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1024564:	00c00044 	movi	r3,1
 1024568:	e0bffa17 	ldw	r2,-24(fp)
 102456c:	1884983a 	sll	r2,r3,r2
 1024570:	0084303a 	nor	r2,zero,r2
 1024574:	1007883a 	mov	r3,r2
 1024578:	d0a73117 	ldw	r2,-25404(gp)
 102457c:	1884703a 	and	r2,r3,r2
 1024580:	d0a73115 	stw	r2,-25404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1024584:	d0a73117 	ldw	r2,-25404(gp)
 1024588:	100170fa 	wrctl	ienable,r2
 102458c:	e0bffc17 	ldw	r2,-16(fp)
 1024590:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024594:	e0bffd17 	ldw	r2,-12(fp)
 1024598:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 102459c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10245a0:	0001883a 	nop
}
 10245a4:	e037883a 	mov	sp,fp
 10245a8:	df000017 	ldw	fp,0(sp)
 10245ac:	dec00104 	addi	sp,sp,4
 10245b0:	f800283a 	ret

010245b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10245b4:	defffc04 	addi	sp,sp,-16
 10245b8:	df000315 	stw	fp,12(sp)
 10245bc:	df000304 	addi	fp,sp,12
 10245c0:	e13ffe15 	stw	r4,-8(fp)
 10245c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10245c8:	000530fa 	rdctl	r2,ienable
 10245cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10245d0:	00c00044 	movi	r3,1
 10245d4:	e0bfff17 	ldw	r2,-4(fp)
 10245d8:	1884983a 	sll	r2,r3,r2
 10245dc:	1007883a 	mov	r3,r2
 10245e0:	e0bffd17 	ldw	r2,-12(fp)
 10245e4:	1884703a 	and	r2,r3,r2
 10245e8:	1004c03a 	cmpne	r2,r2,zero
 10245ec:	10803fcc 	andi	r2,r2,255
}
 10245f0:	e037883a 	mov	sp,fp
 10245f4:	df000017 	ldw	fp,0(sp)
 10245f8:	dec00104 	addi	sp,sp,4
 10245fc:	f800283a 	ret

01024600 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1024600:	defff504 	addi	sp,sp,-44
 1024604:	dfc00a15 	stw	ra,40(sp)
 1024608:	df000915 	stw	fp,36(sp)
 102460c:	df000904 	addi	fp,sp,36
 1024610:	e13ffc15 	stw	r4,-16(fp)
 1024614:	e17ffd15 	stw	r5,-12(fp)
 1024618:	e1bffe15 	stw	r6,-8(fp)
 102461c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1024620:	00bffa84 	movi	r2,-22
 1024624:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1024628:	e0bffd17 	ldw	r2,-12(fp)
 102462c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1024630:	e0bff817 	ldw	r2,-32(fp)
 1024634:	10800808 	cmpgei	r2,r2,32
 1024638:	1000271e 	bne	r2,zero,10246d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 102463c:	0005303a 	rdctl	r2,status
 1024640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024644:	e0fffb17 	ldw	r3,-20(fp)
 1024648:	00bfff84 	movi	r2,-2
 102464c:	1884703a 	and	r2,r3,r2
 1024650:	1001703a 	wrctl	status,r2
  
  return context;
 1024654:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1024658:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 102465c:	008060f4 	movhi	r2,387
 1024660:	10a98204 	addi	r2,r2,-23032
 1024664:	e0fff817 	ldw	r3,-32(fp)
 1024668:	180690fa 	slli	r3,r3,3
 102466c:	10c5883a 	add	r2,r2,r3
 1024670:	e0fffe17 	ldw	r3,-8(fp)
 1024674:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1024678:	008060f4 	movhi	r2,387
 102467c:	10a98204 	addi	r2,r2,-23032
 1024680:	e0fff817 	ldw	r3,-32(fp)
 1024684:	180690fa 	slli	r3,r3,3
 1024688:	10c5883a 	add	r2,r2,r3
 102468c:	10800104 	addi	r2,r2,4
 1024690:	e0ffff17 	ldw	r3,-4(fp)
 1024694:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1024698:	e0bffe17 	ldw	r2,-8(fp)
 102469c:	10000526 	beq	r2,zero,10246b4 <alt_iic_isr_register+0xb4>
 10246a0:	e0bff817 	ldw	r2,-32(fp)
 10246a4:	100b883a 	mov	r5,r2
 10246a8:	e13ffc17 	ldw	r4,-16(fp)
 10246ac:	10244a00 	call	10244a0 <alt_ic_irq_enable>
 10246b0:	00000406 	br	10246c4 <alt_iic_isr_register+0xc4>
 10246b4:	e0bff817 	ldw	r2,-32(fp)
 10246b8:	100b883a 	mov	r5,r2
 10246bc:	e13ffc17 	ldw	r4,-16(fp)
 10246c0:	10245280 	call	1024528 <alt_ic_irq_disable>
 10246c4:	e0bff715 	stw	r2,-36(fp)
 10246c8:	e0bffa17 	ldw	r2,-24(fp)
 10246cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10246d0:	e0bff917 	ldw	r2,-28(fp)
 10246d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10246d8:	e0bff717 	ldw	r2,-36(fp)
}
 10246dc:	e037883a 	mov	sp,fp
 10246e0:	dfc00117 	ldw	ra,4(sp)
 10246e4:	df000017 	ldw	fp,0(sp)
 10246e8:	dec00204 	addi	sp,sp,8
 10246ec:	f800283a 	ret

010246f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10246f0:	defff904 	addi	sp,sp,-28
 10246f4:	dfc00615 	stw	ra,24(sp)
 10246f8:	df000515 	stw	fp,20(sp)
 10246fc:	df000504 	addi	fp,sp,20
 1024700:	e13ffc15 	stw	r4,-16(fp)
 1024704:	e17ffd15 	stw	r5,-12(fp)
 1024708:	e1bffe15 	stw	r6,-8(fp)
 102470c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1024710:	e1bfff17 	ldw	r6,-4(fp)
 1024714:	e17ffe17 	ldw	r5,-8(fp)
 1024718:	e13ffd17 	ldw	r4,-12(fp)
 102471c:	10249300 	call	1024930 <open>
 1024720:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1024724:	e0bffb17 	ldw	r2,-20(fp)
 1024728:	10001c16 	blt	r2,zero,102479c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 102472c:	008040b4 	movhi	r2,258
 1024730:	109cea04 	addi	r2,r2,29608
 1024734:	e0fffb17 	ldw	r3,-20(fp)
 1024738:	18c00324 	muli	r3,r3,12
 102473c:	10c5883a 	add	r2,r2,r3
 1024740:	10c00017 	ldw	r3,0(r2)
 1024744:	e0bffc17 	ldw	r2,-16(fp)
 1024748:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 102474c:	008040b4 	movhi	r2,258
 1024750:	109cea04 	addi	r2,r2,29608
 1024754:	e0fffb17 	ldw	r3,-20(fp)
 1024758:	18c00324 	muli	r3,r3,12
 102475c:	10c5883a 	add	r2,r2,r3
 1024760:	10800104 	addi	r2,r2,4
 1024764:	10c00017 	ldw	r3,0(r2)
 1024768:	e0bffc17 	ldw	r2,-16(fp)
 102476c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1024770:	008040b4 	movhi	r2,258
 1024774:	109cea04 	addi	r2,r2,29608
 1024778:	e0fffb17 	ldw	r3,-20(fp)
 102477c:	18c00324 	muli	r3,r3,12
 1024780:	10c5883a 	add	r2,r2,r3
 1024784:	10800204 	addi	r2,r2,8
 1024788:	10c00017 	ldw	r3,0(r2)
 102478c:	e0bffc17 	ldw	r2,-16(fp)
 1024790:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1024794:	e13ffb17 	ldw	r4,-20(fp)
 1024798:	1022d080 	call	1022d08 <alt_release_fd>
  }
} 
 102479c:	0001883a 	nop
 10247a0:	e037883a 	mov	sp,fp
 10247a4:	dfc00117 	ldw	ra,4(sp)
 10247a8:	df000017 	ldw	fp,0(sp)
 10247ac:	dec00204 	addi	sp,sp,8
 10247b0:	f800283a 	ret

010247b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10247b4:	defffb04 	addi	sp,sp,-20
 10247b8:	dfc00415 	stw	ra,16(sp)
 10247bc:	df000315 	stw	fp,12(sp)
 10247c0:	df000304 	addi	fp,sp,12
 10247c4:	e13ffd15 	stw	r4,-12(fp)
 10247c8:	e17ffe15 	stw	r5,-8(fp)
 10247cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10247d0:	01c07fc4 	movi	r7,511
 10247d4:	01800044 	movi	r6,1
 10247d8:	e17ffd17 	ldw	r5,-12(fp)
 10247dc:	010040b4 	movhi	r4,258
 10247e0:	211ced04 	addi	r4,r4,29620
 10247e4:	10246f00 	call	10246f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10247e8:	01c07fc4 	movi	r7,511
 10247ec:	000d883a 	mov	r6,zero
 10247f0:	e17ffe17 	ldw	r5,-8(fp)
 10247f4:	010040b4 	movhi	r4,258
 10247f8:	211cea04 	addi	r4,r4,29608
 10247fc:	10246f00 	call	10246f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1024800:	01c07fc4 	movi	r7,511
 1024804:	01800044 	movi	r6,1
 1024808:	e17fff17 	ldw	r5,-4(fp)
 102480c:	010040b4 	movhi	r4,258
 1024810:	211cf004 	addi	r4,r4,29632
 1024814:	10246f00 	call	10246f0 <alt_open_fd>
}  
 1024818:	0001883a 	nop
 102481c:	e037883a 	mov	sp,fp
 1024820:	dfc00117 	ldw	ra,4(sp)
 1024824:	df000017 	ldw	fp,0(sp)
 1024828:	dec00204 	addi	sp,sp,8
 102482c:	f800283a 	ret

01024830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1024830:	defffe04 	addi	sp,sp,-8
 1024834:	dfc00115 	stw	ra,4(sp)
 1024838:	df000015 	stw	fp,0(sp)
 102483c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1024840:	d0a01517 	ldw	r2,-32684(gp)
 1024844:	10000326 	beq	r2,zero,1024854 <alt_get_errno+0x24>
 1024848:	d0a01517 	ldw	r2,-32684(gp)
 102484c:	103ee83a 	callr	r2
 1024850:	00000106 	br	1024858 <alt_get_errno+0x28>
 1024854:	d0a73004 	addi	r2,gp,-25408
}
 1024858:	e037883a 	mov	sp,fp
 102485c:	dfc00117 	ldw	ra,4(sp)
 1024860:	df000017 	ldw	fp,0(sp)
 1024864:	dec00204 	addi	sp,sp,8
 1024868:	f800283a 	ret

0102486c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 102486c:	defffd04 	addi	sp,sp,-12
 1024870:	df000215 	stw	fp,8(sp)
 1024874:	df000204 	addi	fp,sp,8
 1024878:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 102487c:	e0bfff17 	ldw	r2,-4(fp)
 1024880:	10800217 	ldw	r2,8(r2)
 1024884:	10d00034 	orhi	r3,r2,16384
 1024888:	e0bfff17 	ldw	r2,-4(fp)
 102488c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1024890:	e03ffe15 	stw	zero,-8(fp)
 1024894:	00001d06 	br	102490c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1024898:	008040b4 	movhi	r2,258
 102489c:	109cea04 	addi	r2,r2,29608
 10248a0:	e0fffe17 	ldw	r3,-8(fp)
 10248a4:	18c00324 	muli	r3,r3,12
 10248a8:	10c5883a 	add	r2,r2,r3
 10248ac:	10c00017 	ldw	r3,0(r2)
 10248b0:	e0bfff17 	ldw	r2,-4(fp)
 10248b4:	10800017 	ldw	r2,0(r2)
 10248b8:	1880111e 	bne	r3,r2,1024900 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10248bc:	008040b4 	movhi	r2,258
 10248c0:	109cea04 	addi	r2,r2,29608
 10248c4:	e0fffe17 	ldw	r3,-8(fp)
 10248c8:	18c00324 	muli	r3,r3,12
 10248cc:	10c5883a 	add	r2,r2,r3
 10248d0:	10800204 	addi	r2,r2,8
 10248d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10248d8:	1000090e 	bge	r2,zero,1024900 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 10248dc:	e0bffe17 	ldw	r2,-8(fp)
 10248e0:	10c00324 	muli	r3,r2,12
 10248e4:	008040b4 	movhi	r2,258
 10248e8:	109cea04 	addi	r2,r2,29608
 10248ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10248f0:	e0bfff17 	ldw	r2,-4(fp)
 10248f4:	18800226 	beq	r3,r2,1024900 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10248f8:	00bffcc4 	movi	r2,-13
 10248fc:	00000806 	br	1024920 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1024900:	e0bffe17 	ldw	r2,-8(fp)
 1024904:	10800044 	addi	r2,r2,1
 1024908:	e0bffe15 	stw	r2,-8(fp)
 102490c:	d0a01417 	ldw	r2,-32688(gp)
 1024910:	1007883a 	mov	r3,r2
 1024914:	e0bffe17 	ldw	r2,-8(fp)
 1024918:	18bfdf2e 	bgeu	r3,r2,1024898 <__alt_data_end+0xff024898>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 102491c:	0005883a 	mov	r2,zero
}
 1024920:	e037883a 	mov	sp,fp
 1024924:	df000017 	ldw	fp,0(sp)
 1024928:	dec00104 	addi	sp,sp,4
 102492c:	f800283a 	ret

01024930 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1024930:	defff604 	addi	sp,sp,-40
 1024934:	dfc00915 	stw	ra,36(sp)
 1024938:	df000815 	stw	fp,32(sp)
 102493c:	df000804 	addi	fp,sp,32
 1024940:	e13ffd15 	stw	r4,-12(fp)
 1024944:	e17ffe15 	stw	r5,-8(fp)
 1024948:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 102494c:	00bfffc4 	movi	r2,-1
 1024950:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1024954:	00bffb44 	movi	r2,-19
 1024958:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 102495c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1024960:	d1601204 	addi	r5,gp,-32696
 1024964:	e13ffd17 	ldw	r4,-12(fp)
 1024968:	102438c0 	call	102438c <alt_find_dev>
 102496c:	e0bff815 	stw	r2,-32(fp)
 1024970:	e0bff817 	ldw	r2,-32(fp)
 1024974:	1000051e 	bne	r2,zero,102498c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1024978:	e13ffd17 	ldw	r4,-12(fp)
 102497c:	1024c4c0 	call	1024c4c <alt_find_file>
 1024980:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1024984:	00800044 	movi	r2,1
 1024988:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 102498c:	e0bff817 	ldw	r2,-32(fp)
 1024990:	10002926 	beq	r2,zero,1024a38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1024994:	e13ff817 	ldw	r4,-32(fp)
 1024998:	1024d540 	call	1024d54 <alt_get_fd>
 102499c:	e0bff915 	stw	r2,-28(fp)
 10249a0:	e0bff917 	ldw	r2,-28(fp)
 10249a4:	1000030e 	bge	r2,zero,10249b4 <open+0x84>
    {
      status = index;
 10249a8:	e0bff917 	ldw	r2,-28(fp)
 10249ac:	e0bffa15 	stw	r2,-24(fp)
 10249b0:	00002306 	br	1024a40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 10249b4:	e0bff917 	ldw	r2,-28(fp)
 10249b8:	10c00324 	muli	r3,r2,12
 10249bc:	008040b4 	movhi	r2,258
 10249c0:	109cea04 	addi	r2,r2,29608
 10249c4:	1885883a 	add	r2,r3,r2
 10249c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10249cc:	e0fffe17 	ldw	r3,-8(fp)
 10249d0:	00900034 	movhi	r2,16384
 10249d4:	10bfffc4 	addi	r2,r2,-1
 10249d8:	1886703a 	and	r3,r3,r2
 10249dc:	e0bffc17 	ldw	r2,-16(fp)
 10249e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10249e4:	e0bffb17 	ldw	r2,-20(fp)
 10249e8:	1000051e 	bne	r2,zero,1024a00 <open+0xd0>
 10249ec:	e13ffc17 	ldw	r4,-16(fp)
 10249f0:	102486c0 	call	102486c <alt_file_locked>
 10249f4:	e0bffa15 	stw	r2,-24(fp)
 10249f8:	e0bffa17 	ldw	r2,-24(fp)
 10249fc:	10001016 	blt	r2,zero,1024a40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1024a00:	e0bff817 	ldw	r2,-32(fp)
 1024a04:	10800317 	ldw	r2,12(r2)
 1024a08:	10000826 	beq	r2,zero,1024a2c <open+0xfc>
 1024a0c:	e0bff817 	ldw	r2,-32(fp)
 1024a10:	10800317 	ldw	r2,12(r2)
 1024a14:	e1ffff17 	ldw	r7,-4(fp)
 1024a18:	e1bffe17 	ldw	r6,-8(fp)
 1024a1c:	e17ffd17 	ldw	r5,-12(fp)
 1024a20:	e13ffc17 	ldw	r4,-16(fp)
 1024a24:	103ee83a 	callr	r2
 1024a28:	00000106 	br	1024a30 <open+0x100>
 1024a2c:	0005883a 	mov	r2,zero
 1024a30:	e0bffa15 	stw	r2,-24(fp)
 1024a34:	00000206 	br	1024a40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1024a38:	00bffb44 	movi	r2,-19
 1024a3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1024a40:	e0bffa17 	ldw	r2,-24(fp)
 1024a44:	1000090e 	bge	r2,zero,1024a6c <open+0x13c>
  {
    alt_release_fd (index);  
 1024a48:	e13ff917 	ldw	r4,-28(fp)
 1024a4c:	1022d080 	call	1022d08 <alt_release_fd>
    ALT_ERRNO = -status;
 1024a50:	10248300 	call	1024830 <alt_get_errno>
 1024a54:	1007883a 	mov	r3,r2
 1024a58:	e0bffa17 	ldw	r2,-24(fp)
 1024a5c:	0085c83a 	sub	r2,zero,r2
 1024a60:	18800015 	stw	r2,0(r3)
    return -1;
 1024a64:	00bfffc4 	movi	r2,-1
 1024a68:	00000106 	br	1024a70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1024a6c:	e0bff917 	ldw	r2,-28(fp)
}
 1024a70:	e037883a 	mov	sp,fp
 1024a74:	dfc00117 	ldw	ra,4(sp)
 1024a78:	df000017 	ldw	fp,0(sp)
 1024a7c:	dec00204 	addi	sp,sp,8
 1024a80:	f800283a 	ret

01024a84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1024a84:	defffa04 	addi	sp,sp,-24
 1024a88:	df000515 	stw	fp,20(sp)
 1024a8c:	df000504 	addi	fp,sp,20
 1024a90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1024a94:	0005303a 	rdctl	r2,status
 1024a98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1024a9c:	e0fffc17 	ldw	r3,-16(fp)
 1024aa0:	00bfff84 	movi	r2,-2
 1024aa4:	1884703a 	and	r2,r3,r2
 1024aa8:	1001703a 	wrctl	status,r2
  
  return context;
 1024aac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1024ab0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1024ab4:	e0bfff17 	ldw	r2,-4(fp)
 1024ab8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1024abc:	e0bffd17 	ldw	r2,-12(fp)
 1024ac0:	10800017 	ldw	r2,0(r2)
 1024ac4:	e0fffd17 	ldw	r3,-12(fp)
 1024ac8:	18c00117 	ldw	r3,4(r3)
 1024acc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1024ad0:	e0bffd17 	ldw	r2,-12(fp)
 1024ad4:	10800117 	ldw	r2,4(r2)
 1024ad8:	e0fffd17 	ldw	r3,-12(fp)
 1024adc:	18c00017 	ldw	r3,0(r3)
 1024ae0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1024ae4:	e0bffd17 	ldw	r2,-12(fp)
 1024ae8:	e0fffd17 	ldw	r3,-12(fp)
 1024aec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1024af0:	e0bffd17 	ldw	r2,-12(fp)
 1024af4:	e0fffd17 	ldw	r3,-12(fp)
 1024af8:	10c00015 	stw	r3,0(r2)
 1024afc:	e0bffb17 	ldw	r2,-20(fp)
 1024b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1024b04:	e0bffe17 	ldw	r2,-8(fp)
 1024b08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1024b0c:	0001883a 	nop
 1024b10:	e037883a 	mov	sp,fp
 1024b14:	df000017 	ldw	fp,0(sp)
 1024b18:	dec00104 	addi	sp,sp,4
 1024b1c:	f800283a 	ret

01024b20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1024b20:	defffb04 	addi	sp,sp,-20
 1024b24:	dfc00415 	stw	ra,16(sp)
 1024b28:	df000315 	stw	fp,12(sp)
 1024b2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1024b30:	d0a01a17 	ldw	r2,-32664(gp)
 1024b34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1024b38:	d0a73617 	ldw	r2,-25384(gp)
 1024b3c:	10800044 	addi	r2,r2,1
 1024b40:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1024b44:	00002e06 	br	1024c00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1024b48:	e0bffd17 	ldw	r2,-12(fp)
 1024b4c:	10800017 	ldw	r2,0(r2)
 1024b50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1024b54:	e0bffd17 	ldw	r2,-12(fp)
 1024b58:	10800403 	ldbu	r2,16(r2)
 1024b5c:	10803fcc 	andi	r2,r2,255
 1024b60:	10000426 	beq	r2,zero,1024b74 <alt_tick+0x54>
 1024b64:	d0a73617 	ldw	r2,-25384(gp)
 1024b68:	1000021e 	bne	r2,zero,1024b74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1024b6c:	e0bffd17 	ldw	r2,-12(fp)
 1024b70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1024b74:	e0bffd17 	ldw	r2,-12(fp)
 1024b78:	10800217 	ldw	r2,8(r2)
 1024b7c:	d0e73617 	ldw	r3,-25384(gp)
 1024b80:	18801d36 	bltu	r3,r2,1024bf8 <alt_tick+0xd8>
 1024b84:	e0bffd17 	ldw	r2,-12(fp)
 1024b88:	10800403 	ldbu	r2,16(r2)
 1024b8c:	10803fcc 	andi	r2,r2,255
 1024b90:	1000191e 	bne	r2,zero,1024bf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1024b94:	e0bffd17 	ldw	r2,-12(fp)
 1024b98:	10800317 	ldw	r2,12(r2)
 1024b9c:	e0fffd17 	ldw	r3,-12(fp)
 1024ba0:	18c00517 	ldw	r3,20(r3)
 1024ba4:	1809883a 	mov	r4,r3
 1024ba8:	103ee83a 	callr	r2
 1024bac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1024bb0:	e0bfff17 	ldw	r2,-4(fp)
 1024bb4:	1000031e 	bne	r2,zero,1024bc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1024bb8:	e13ffd17 	ldw	r4,-12(fp)
 1024bbc:	1024a840 	call	1024a84 <alt_alarm_stop>
 1024bc0:	00000d06 	br	1024bf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1024bc4:	e0bffd17 	ldw	r2,-12(fp)
 1024bc8:	10c00217 	ldw	r3,8(r2)
 1024bcc:	e0bfff17 	ldw	r2,-4(fp)
 1024bd0:	1887883a 	add	r3,r3,r2
 1024bd4:	e0bffd17 	ldw	r2,-12(fp)
 1024bd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1024bdc:	e0bffd17 	ldw	r2,-12(fp)
 1024be0:	10c00217 	ldw	r3,8(r2)
 1024be4:	d0a73617 	ldw	r2,-25384(gp)
 1024be8:	1880032e 	bgeu	r3,r2,1024bf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1024bec:	e0bffd17 	ldw	r2,-12(fp)
 1024bf0:	00c00044 	movi	r3,1
 1024bf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1024bf8:	e0bffe17 	ldw	r2,-8(fp)
 1024bfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1024c00:	e0fffd17 	ldw	r3,-12(fp)
 1024c04:	d0a01a04 	addi	r2,gp,-32664
 1024c08:	18bfcf1e 	bne	r3,r2,1024b48 <__alt_data_end+0xff024b48>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1024c0c:	0001883a 	nop
}
 1024c10:	0001883a 	nop
 1024c14:	e037883a 	mov	sp,fp
 1024c18:	dfc00117 	ldw	ra,4(sp)
 1024c1c:	df000017 	ldw	fp,0(sp)
 1024c20:	dec00204 	addi	sp,sp,8
 1024c24:	f800283a 	ret

01024c28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1024c28:	deffff04 	addi	sp,sp,-4
 1024c2c:	df000015 	stw	fp,0(sp)
 1024c30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1024c34:	000170fa 	wrctl	ienable,zero
}
 1024c38:	0001883a 	nop
 1024c3c:	e037883a 	mov	sp,fp
 1024c40:	df000017 	ldw	fp,0(sp)
 1024c44:	dec00104 	addi	sp,sp,4
 1024c48:	f800283a 	ret

01024c4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1024c4c:	defffb04 	addi	sp,sp,-20
 1024c50:	dfc00415 	stw	ra,16(sp)
 1024c54:	df000315 	stw	fp,12(sp)
 1024c58:	df000304 	addi	fp,sp,12
 1024c5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1024c60:	d0a01017 	ldw	r2,-32704(gp)
 1024c64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1024c68:	00003106 	br	1024d30 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1024c6c:	e0bffd17 	ldw	r2,-12(fp)
 1024c70:	10800217 	ldw	r2,8(r2)
 1024c74:	1009883a 	mov	r4,r2
 1024c78:	101463c0 	call	101463c <strlen>
 1024c7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1024c80:	e0bffd17 	ldw	r2,-12(fp)
 1024c84:	10c00217 	ldw	r3,8(r2)
 1024c88:	e0bffe17 	ldw	r2,-8(fp)
 1024c8c:	10bfffc4 	addi	r2,r2,-1
 1024c90:	1885883a 	add	r2,r3,r2
 1024c94:	10800003 	ldbu	r2,0(r2)
 1024c98:	10803fcc 	andi	r2,r2,255
 1024c9c:	1080201c 	xori	r2,r2,128
 1024ca0:	10bfe004 	addi	r2,r2,-128
 1024ca4:	10800bd8 	cmpnei	r2,r2,47
 1024ca8:	1000031e 	bne	r2,zero,1024cb8 <alt_find_file+0x6c>
    {
      len -= 1;
 1024cac:	e0bffe17 	ldw	r2,-8(fp)
 1024cb0:	10bfffc4 	addi	r2,r2,-1
 1024cb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1024cb8:	e0bffe17 	ldw	r2,-8(fp)
 1024cbc:	e0ffff17 	ldw	r3,-4(fp)
 1024cc0:	1885883a 	add	r2,r3,r2
 1024cc4:	10800003 	ldbu	r2,0(r2)
 1024cc8:	10803fcc 	andi	r2,r2,255
 1024ccc:	1080201c 	xori	r2,r2,128
 1024cd0:	10bfe004 	addi	r2,r2,-128
 1024cd4:	10800be0 	cmpeqi	r2,r2,47
 1024cd8:	1000081e 	bne	r2,zero,1024cfc <alt_find_file+0xb0>
 1024cdc:	e0bffe17 	ldw	r2,-8(fp)
 1024ce0:	e0ffff17 	ldw	r3,-4(fp)
 1024ce4:	1885883a 	add	r2,r3,r2
 1024ce8:	10800003 	ldbu	r2,0(r2)
 1024cec:	10803fcc 	andi	r2,r2,255
 1024cf0:	1080201c 	xori	r2,r2,128
 1024cf4:	10bfe004 	addi	r2,r2,-128
 1024cf8:	10000a1e 	bne	r2,zero,1024d24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1024cfc:	e0bffd17 	ldw	r2,-12(fp)
 1024d00:	10800217 	ldw	r2,8(r2)
 1024d04:	e0fffe17 	ldw	r3,-8(fp)
 1024d08:	180d883a 	mov	r6,r3
 1024d0c:	e17fff17 	ldw	r5,-4(fp)
 1024d10:	1009883a 	mov	r4,r2
 1024d14:	101396c0 	call	101396c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1024d18:	1000021e 	bne	r2,zero,1024d24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1024d1c:	e0bffd17 	ldw	r2,-12(fp)
 1024d20:	00000706 	br	1024d40 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1024d24:	e0bffd17 	ldw	r2,-12(fp)
 1024d28:	10800017 	ldw	r2,0(r2)
 1024d2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1024d30:	e0fffd17 	ldw	r3,-12(fp)
 1024d34:	d0a01004 	addi	r2,gp,-32704
 1024d38:	18bfcc1e 	bne	r3,r2,1024c6c <__alt_data_end+0xff024c6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1024d3c:	0005883a 	mov	r2,zero
}
 1024d40:	e037883a 	mov	sp,fp
 1024d44:	dfc00117 	ldw	ra,4(sp)
 1024d48:	df000017 	ldw	fp,0(sp)
 1024d4c:	dec00204 	addi	sp,sp,8
 1024d50:	f800283a 	ret

01024d54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1024d54:	defffc04 	addi	sp,sp,-16
 1024d58:	df000315 	stw	fp,12(sp)
 1024d5c:	df000304 	addi	fp,sp,12
 1024d60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1024d64:	00bffa04 	movi	r2,-24
 1024d68:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1024d6c:	e03ffd15 	stw	zero,-12(fp)
 1024d70:	00001906 	br	1024dd8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1024d74:	008040b4 	movhi	r2,258
 1024d78:	109cea04 	addi	r2,r2,29608
 1024d7c:	e0fffd17 	ldw	r3,-12(fp)
 1024d80:	18c00324 	muli	r3,r3,12
 1024d84:	10c5883a 	add	r2,r2,r3
 1024d88:	10800017 	ldw	r2,0(r2)
 1024d8c:	10000f1e 	bne	r2,zero,1024dcc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1024d90:	008040b4 	movhi	r2,258
 1024d94:	109cea04 	addi	r2,r2,29608
 1024d98:	e0fffd17 	ldw	r3,-12(fp)
 1024d9c:	18c00324 	muli	r3,r3,12
 1024da0:	10c5883a 	add	r2,r2,r3
 1024da4:	e0ffff17 	ldw	r3,-4(fp)
 1024da8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1024dac:	d0e01417 	ldw	r3,-32688(gp)
 1024db0:	e0bffd17 	ldw	r2,-12(fp)
 1024db4:	1880020e 	bge	r3,r2,1024dc0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1024db8:	e0bffd17 	ldw	r2,-12(fp)
 1024dbc:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
 1024dc0:	e0bffd17 	ldw	r2,-12(fp)
 1024dc4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1024dc8:	00000606 	br	1024de4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1024dcc:	e0bffd17 	ldw	r2,-12(fp)
 1024dd0:	10800044 	addi	r2,r2,1
 1024dd4:	e0bffd15 	stw	r2,-12(fp)
 1024dd8:	e0bffd17 	ldw	r2,-12(fp)
 1024ddc:	10800810 	cmplti	r2,r2,32
 1024de0:	103fe41e 	bne	r2,zero,1024d74 <__alt_data_end+0xff024d74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1024de4:	e0bffe17 	ldw	r2,-8(fp)
}
 1024de8:	e037883a 	mov	sp,fp
 1024dec:	df000017 	ldw	fp,0(sp)
 1024df0:	dec00104 	addi	sp,sp,4
 1024df4:	f800283a 	ret

01024df8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1024df8:	defffb04 	addi	sp,sp,-20
 1024dfc:	df000415 	stw	fp,16(sp)
 1024e00:	df000404 	addi	fp,sp,16
 1024e04:	e13ffe15 	stw	r4,-8(fp)
 1024e08:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1024e0c:	e0bfff17 	ldw	r2,-4(fp)
 1024e10:	10820070 	cmpltui	r2,r2,2049
 1024e14:	1000021e 	bne	r2,zero,1024e20 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1024e18:	00820004 	movi	r2,2048
 1024e1c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1024e20:	e0fffe17 	ldw	r3,-8(fp)
 1024e24:	e0bfff17 	ldw	r2,-4(fp)
 1024e28:	1885883a 	add	r2,r3,r2
 1024e2c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1024e30:	e0bffe17 	ldw	r2,-8(fp)
 1024e34:	e0bffc15 	stw	r2,-16(fp)
 1024e38:	00000506 	br	1024e50 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1024e3c:	e0bffc17 	ldw	r2,-16(fp)
 1024e40:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1024e44:	e0bffc17 	ldw	r2,-16(fp)
 1024e48:	10800804 	addi	r2,r2,32
 1024e4c:	e0bffc15 	stw	r2,-16(fp)
 1024e50:	e0fffc17 	ldw	r3,-16(fp)
 1024e54:	e0bffd17 	ldw	r2,-12(fp)
 1024e58:	18bff836 	bltu	r3,r2,1024e3c <__alt_data_end+0xff024e3c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1024e5c:	e0bffe17 	ldw	r2,-8(fp)
 1024e60:	108007cc 	andi	r2,r2,31
 1024e64:	10000226 	beq	r2,zero,1024e70 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1024e68:	e0bffc17 	ldw	r2,-16(fp)
 1024e6c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1024e70:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1024e74:	0001883a 	nop
 1024e78:	e037883a 	mov	sp,fp
 1024e7c:	df000017 	ldw	fp,0(sp)
 1024e80:	dec00104 	addi	sp,sp,4
 1024e84:	f800283a 	ret

01024e88 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1024e88:	defffe04 	addi	sp,sp,-8
 1024e8c:	df000115 	stw	fp,4(sp)
 1024e90:	df000104 	addi	fp,sp,4
 1024e94:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1024e98:	e0bfff17 	ldw	r2,-4(fp)
 1024e9c:	10bffe84 	addi	r2,r2,-6
 1024ea0:	10c00428 	cmpgeui	r3,r2,16
 1024ea4:	18001a1e 	bne	r3,zero,1024f10 <alt_exception_cause_generated_bad_addr+0x88>
 1024ea8:	100690ba 	slli	r3,r2,2
 1024eac:	008040b4 	movhi	r2,258
 1024eb0:	1093b004 	addi	r2,r2,20160
 1024eb4:	1885883a 	add	r2,r3,r2
 1024eb8:	10800017 	ldw	r2,0(r2)
 1024ebc:	1000683a 	jmp	r2
 1024ec0:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ec4:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ec8:	01024f10 	cmplti	r4,zero,2364
 1024ecc:	01024f10 	cmplti	r4,zero,2364
 1024ed0:	01024f10 	cmplti	r4,zero,2364
 1024ed4:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ed8:	01024f08 	cmpgei	r4,zero,2364
 1024edc:	01024f10 	cmplti	r4,zero,2364
 1024ee0:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ee4:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ee8:	01024f10 	cmplti	r4,zero,2364
 1024eec:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
 1024ef0:	01024f08 	cmpgei	r4,zero,2364
 1024ef4:	01024f10 	cmplti	r4,zero,2364
 1024ef8:	01024f10 	cmplti	r4,zero,2364
 1024efc:	01024f00 	call	1024f0 <__alt_mem_sdram-0xefdb10>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1024f00:	00800044 	movi	r2,1
 1024f04:	00000306 	br	1024f14 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1024f08:	0005883a 	mov	r2,zero
 1024f0c:	00000106 	br	1024f14 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1024f10:	0005883a 	mov	r2,zero
  }
}
 1024f14:	e037883a 	mov	sp,fp
 1024f18:	df000017 	ldw	fp,0(sp)
 1024f1c:	dec00104 	addi	sp,sp,4
 1024f20:	f800283a 	ret

01024f24 <atexit>:
 1024f24:	200b883a 	mov	r5,r4
 1024f28:	000f883a 	mov	r7,zero
 1024f2c:	000d883a 	mov	r6,zero
 1024f30:	0009883a 	mov	r4,zero
 1024f34:	1024f701 	jmpi	1024f70 <__register_exitproc>

01024f38 <exit>:
 1024f38:	defffe04 	addi	sp,sp,-8
 1024f3c:	000b883a 	mov	r5,zero
 1024f40:	dc000015 	stw	r16,0(sp)
 1024f44:	dfc00115 	stw	ra,4(sp)
 1024f48:	2021883a 	mov	r16,r4
 1024f4c:	10250880 	call	1025088 <__call_exitprocs>
 1024f50:	008040f4 	movhi	r2,259
 1024f54:	10a17004 	addi	r2,r2,-31296
 1024f58:	11000017 	ldw	r4,0(r2)
 1024f5c:	20800f17 	ldw	r2,60(r4)
 1024f60:	10000126 	beq	r2,zero,1024f68 <exit+0x30>
 1024f64:	103ee83a 	callr	r2
 1024f68:	8009883a 	mov	r4,r16
 1024f6c:	10224140 	call	1022414 <_exit>

01024f70 <__register_exitproc>:
 1024f70:	defffa04 	addi	sp,sp,-24
 1024f74:	dc000315 	stw	r16,12(sp)
 1024f78:	040040f4 	movhi	r16,259
 1024f7c:	84217004 	addi	r16,r16,-31296
 1024f80:	80c00017 	ldw	r3,0(r16)
 1024f84:	dc400415 	stw	r17,16(sp)
 1024f88:	dfc00515 	stw	ra,20(sp)
 1024f8c:	18805217 	ldw	r2,328(r3)
 1024f90:	2023883a 	mov	r17,r4
 1024f94:	10003726 	beq	r2,zero,1025074 <__register_exitproc+0x104>
 1024f98:	10c00117 	ldw	r3,4(r2)
 1024f9c:	010007c4 	movi	r4,31
 1024fa0:	20c00e16 	blt	r4,r3,1024fdc <__register_exitproc+0x6c>
 1024fa4:	1a000044 	addi	r8,r3,1
 1024fa8:	8800221e 	bne	r17,zero,1025034 <__register_exitproc+0xc4>
 1024fac:	18c00084 	addi	r3,r3,2
 1024fb0:	18c7883a 	add	r3,r3,r3
 1024fb4:	18c7883a 	add	r3,r3,r3
 1024fb8:	12000115 	stw	r8,4(r2)
 1024fbc:	10c7883a 	add	r3,r2,r3
 1024fc0:	19400015 	stw	r5,0(r3)
 1024fc4:	0005883a 	mov	r2,zero
 1024fc8:	dfc00517 	ldw	ra,20(sp)
 1024fcc:	dc400417 	ldw	r17,16(sp)
 1024fd0:	dc000317 	ldw	r16,12(sp)
 1024fd4:	dec00604 	addi	sp,sp,24
 1024fd8:	f800283a 	ret
 1024fdc:	00800034 	movhi	r2,0
 1024fe0:	10800004 	addi	r2,r2,0
 1024fe4:	10002626 	beq	r2,zero,1025080 <__register_exitproc+0x110>
 1024fe8:	01006404 	movi	r4,400
 1024fec:	d9400015 	stw	r5,0(sp)
 1024ff0:	d9800115 	stw	r6,4(sp)
 1024ff4:	d9c00215 	stw	r7,8(sp)
 1024ff8:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 1024ffc:	d9400017 	ldw	r5,0(sp)
 1025000:	d9800117 	ldw	r6,4(sp)
 1025004:	d9c00217 	ldw	r7,8(sp)
 1025008:	10001d26 	beq	r2,zero,1025080 <__register_exitproc+0x110>
 102500c:	81000017 	ldw	r4,0(r16)
 1025010:	10000115 	stw	zero,4(r2)
 1025014:	02000044 	movi	r8,1
 1025018:	22405217 	ldw	r9,328(r4)
 102501c:	0007883a 	mov	r3,zero
 1025020:	12400015 	stw	r9,0(r2)
 1025024:	20805215 	stw	r2,328(r4)
 1025028:	10006215 	stw	zero,392(r2)
 102502c:	10006315 	stw	zero,396(r2)
 1025030:	883fde26 	beq	r17,zero,1024fac <__alt_data_end+0xff024fac>
 1025034:	18c9883a 	add	r4,r3,r3
 1025038:	2109883a 	add	r4,r4,r4
 102503c:	1109883a 	add	r4,r2,r4
 1025040:	21802215 	stw	r6,136(r4)
 1025044:	01800044 	movi	r6,1
 1025048:	12406217 	ldw	r9,392(r2)
 102504c:	30cc983a 	sll	r6,r6,r3
 1025050:	4992b03a 	or	r9,r9,r6
 1025054:	12406215 	stw	r9,392(r2)
 1025058:	21c04215 	stw	r7,264(r4)
 102505c:	01000084 	movi	r4,2
 1025060:	893fd21e 	bne	r17,r4,1024fac <__alt_data_end+0xff024fac>
 1025064:	11006317 	ldw	r4,396(r2)
 1025068:	218cb03a 	or	r6,r4,r6
 102506c:	11806315 	stw	r6,396(r2)
 1025070:	003fce06 	br	1024fac <__alt_data_end+0xff024fac>
 1025074:	18805304 	addi	r2,r3,332
 1025078:	18805215 	stw	r2,328(r3)
 102507c:	003fc606 	br	1024f98 <__alt_data_end+0xff024f98>
 1025080:	00bfffc4 	movi	r2,-1
 1025084:	003fd006 	br	1024fc8 <__alt_data_end+0xff024fc8>

01025088 <__call_exitprocs>:
 1025088:	defff504 	addi	sp,sp,-44
 102508c:	df000915 	stw	fp,36(sp)
 1025090:	dd400615 	stw	r21,24(sp)
 1025094:	dc800315 	stw	r18,12(sp)
 1025098:	dfc00a15 	stw	ra,40(sp)
 102509c:	ddc00815 	stw	r23,32(sp)
 10250a0:	dd800715 	stw	r22,28(sp)
 10250a4:	dd000515 	stw	r20,20(sp)
 10250a8:	dcc00415 	stw	r19,16(sp)
 10250ac:	dc400215 	stw	r17,8(sp)
 10250b0:	dc000115 	stw	r16,4(sp)
 10250b4:	d9000015 	stw	r4,0(sp)
 10250b8:	2839883a 	mov	fp,r5
 10250bc:	04800044 	movi	r18,1
 10250c0:	057fffc4 	movi	r21,-1
 10250c4:	008040f4 	movhi	r2,259
 10250c8:	10a17004 	addi	r2,r2,-31296
 10250cc:	12000017 	ldw	r8,0(r2)
 10250d0:	45005217 	ldw	r20,328(r8)
 10250d4:	44c05204 	addi	r19,r8,328
 10250d8:	a0001c26 	beq	r20,zero,102514c <__call_exitprocs+0xc4>
 10250dc:	a0800117 	ldw	r2,4(r20)
 10250e0:	15ffffc4 	addi	r23,r2,-1
 10250e4:	b8000d16 	blt	r23,zero,102511c <__call_exitprocs+0x94>
 10250e8:	14000044 	addi	r16,r2,1
 10250ec:	8421883a 	add	r16,r16,r16
 10250f0:	8421883a 	add	r16,r16,r16
 10250f4:	84402004 	addi	r17,r16,128
 10250f8:	a463883a 	add	r17,r20,r17
 10250fc:	a421883a 	add	r16,r20,r16
 1025100:	e0001e26 	beq	fp,zero,102517c <__call_exitprocs+0xf4>
 1025104:	80804017 	ldw	r2,256(r16)
 1025108:	e0801c26 	beq	fp,r2,102517c <__call_exitprocs+0xf4>
 102510c:	bdffffc4 	addi	r23,r23,-1
 1025110:	843fff04 	addi	r16,r16,-4
 1025114:	8c7fff04 	addi	r17,r17,-4
 1025118:	bd7ff91e 	bne	r23,r21,1025100 <__alt_data_end+0xff025100>
 102511c:	00800034 	movhi	r2,0
 1025120:	10800004 	addi	r2,r2,0
 1025124:	10000926 	beq	r2,zero,102514c <__call_exitprocs+0xc4>
 1025128:	a0800117 	ldw	r2,4(r20)
 102512c:	1000301e 	bne	r2,zero,10251f0 <__call_exitprocs+0x168>
 1025130:	a0800017 	ldw	r2,0(r20)
 1025134:	10003226 	beq	r2,zero,1025200 <__call_exitprocs+0x178>
 1025138:	a009883a 	mov	r4,r20
 102513c:	98800015 	stw	r2,0(r19)
 1025140:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 1025144:	9d000017 	ldw	r20,0(r19)
 1025148:	a03fe41e 	bne	r20,zero,10250dc <__alt_data_end+0xff0250dc>
 102514c:	dfc00a17 	ldw	ra,40(sp)
 1025150:	df000917 	ldw	fp,36(sp)
 1025154:	ddc00817 	ldw	r23,32(sp)
 1025158:	dd800717 	ldw	r22,28(sp)
 102515c:	dd400617 	ldw	r21,24(sp)
 1025160:	dd000517 	ldw	r20,20(sp)
 1025164:	dcc00417 	ldw	r19,16(sp)
 1025168:	dc800317 	ldw	r18,12(sp)
 102516c:	dc400217 	ldw	r17,8(sp)
 1025170:	dc000117 	ldw	r16,4(sp)
 1025174:	dec00b04 	addi	sp,sp,44
 1025178:	f800283a 	ret
 102517c:	a0800117 	ldw	r2,4(r20)
 1025180:	80c00017 	ldw	r3,0(r16)
 1025184:	10bfffc4 	addi	r2,r2,-1
 1025188:	15c01426 	beq	r2,r23,10251dc <__call_exitprocs+0x154>
 102518c:	80000015 	stw	zero,0(r16)
 1025190:	183fde26 	beq	r3,zero,102510c <__alt_data_end+0xff02510c>
 1025194:	95c8983a 	sll	r4,r18,r23
 1025198:	a0806217 	ldw	r2,392(r20)
 102519c:	a5800117 	ldw	r22,4(r20)
 10251a0:	2084703a 	and	r2,r4,r2
 10251a4:	10000b26 	beq	r2,zero,10251d4 <__call_exitprocs+0x14c>
 10251a8:	a0806317 	ldw	r2,396(r20)
 10251ac:	2088703a 	and	r4,r4,r2
 10251b0:	20000c1e 	bne	r4,zero,10251e4 <__call_exitprocs+0x15c>
 10251b4:	89400017 	ldw	r5,0(r17)
 10251b8:	d9000017 	ldw	r4,0(sp)
 10251bc:	183ee83a 	callr	r3
 10251c0:	a0800117 	ldw	r2,4(r20)
 10251c4:	15bfbf1e 	bne	r2,r22,10250c4 <__alt_data_end+0xff0250c4>
 10251c8:	98800017 	ldw	r2,0(r19)
 10251cc:	153fcf26 	beq	r2,r20,102510c <__alt_data_end+0xff02510c>
 10251d0:	003fbc06 	br	10250c4 <__alt_data_end+0xff0250c4>
 10251d4:	183ee83a 	callr	r3
 10251d8:	003ff906 	br	10251c0 <__alt_data_end+0xff0251c0>
 10251dc:	a5c00115 	stw	r23,4(r20)
 10251e0:	003feb06 	br	1025190 <__alt_data_end+0xff025190>
 10251e4:	89000017 	ldw	r4,0(r17)
 10251e8:	183ee83a 	callr	r3
 10251ec:	003ff406 	br	10251c0 <__alt_data_end+0xff0251c0>
 10251f0:	a0800017 	ldw	r2,0(r20)
 10251f4:	a027883a 	mov	r19,r20
 10251f8:	1029883a 	mov	r20,r2
 10251fc:	003fb606 	br	10250d8 <__alt_data_end+0xff0250d8>
 1025200:	0005883a 	mov	r2,zero
 1025204:	003ffb06 	br	10251f4 <__alt_data_end+0xff0251f4>
 1025208:	010069e4 	muli	r4,zero,423
 102520c:	01006b48 	cmpgei	r4,zero,429
 1025210:	01006f58 	cmpnei	r4,zero,445
 1025214:	010071f0 	cmpltui	r4,zero,455
 1025218:	01007410 	cmplti	r4,zero,464
