
FreeRTOS_OneCPU.elf:     file format elf32-littlenios2
FreeRTOS_OneCPU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010003a0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001b164 memsz 0x0001b164 flags r-x
    LOAD off    0x0001c184 vaddr 0x0101b184 paddr 0x0101cd4c align 2**12
         filesz 0x00001bc8 memsz 0x00001bc8 flags rw-
    LOAD off    0x0001e914 vaddr 0x0101e914 paddr 0x0101e914 align 2**12
         filesz 0x00000000 memsz 0x0080051c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000380  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a0b4  010003a0  010003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d30  0101a454  0101a454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc8  0101b184  0101cd4c  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          008005a2  0101e914  0101e914  0001e914  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0181ee30  0181ee30  0001dd4c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001dd4c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000014f8  00000000  00000000  0001dd70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003199c  00000000  00000000  0001f268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c918  00000000  00000000  00050c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010a25  00000000  00000000  0005d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004ac4  00000000  00000000  0006df44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000641f  00000000  00000000  00072a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a3f5  00000000  00000000  00078e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009321c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a70  00000000  00000000  00093280  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009ac3a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0009ac3d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009ac47  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009ac48  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009ac49  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009ac54  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009ac5f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0009ac6a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  0009ac76  2**0
                  CONTENTS, READONLY
 26 .jdi          0000494a  00000000  00000000  0009ac92  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027948b  00000000  00000000  0009f5dc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010003a0 l    d  .text	00000000 .text
0101a454 l    d  .rodata	00000000 .rodata
0101b184 l    d  .rwdata	00000000 .rwdata
0101e914 l    d  .bss	00000000 .bss
0181ee30 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_OneCPU_bsp//obj/HAL/src/crt0.o
010003e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/Source/portable/GCC/NiosII/port_asm.o
01000020 l       .exceptions	00000000 save_context
0100009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
01000100 l       .exceptions	00000000 hw_irq_test
010001c4 l       .exceptions	00000000 soft_exceptions
01000124 l       .exceptions	00000000 hw_irq_handler
0100013c l       .exceptions	00000000 restore_context
010001e0 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 event_groups.c
01000a7c l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
01000d7c l     F .text	0000002c prvReadGp
01000ee0 l     F .text	00000088 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0101e9a0 l     O .bss	00800000 ucHeap
0101ccdc l     O .rwdata	00000002 heapSTRUCT_SIZE
0101e914 l     O .bss	00000008 xStart
0101e91c l     O .bss	00000008 xEnd
0101cce0 l     O .rwdata	00000004 xFreeBytesRemaining
0101e924 l     O .bss	00000004 xHeapHasBeenInitialised.2596
01001290 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
010014c0 l     F .text	00000084 prvInitialiseNewQueue
01001544 l     F .text	00000060 prvInitialiseMutex
0100231c l     F .text	0000018c prvCopyDataToQueue
010026d0 l     F .text	00000058 prvIsQueueFull
01002544 l     F .text	000000f4 prvUnlockQueue
010024a8 l     F .text	0000009c prvCopyDataFromQueue
01002638 l     F .text	00000050 prvIsQueueEmpty
010022cc l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 stream_buffer.c
0100359c l     F .text	00000080 prvInitialiseNewStreamBuffer
01003528 l     F .text	00000074 prvBytesInBuffer
01002cd0 l     F .text	000000d4 prvWriteMessageToBuffer
01003320 l     F .text	000000f4 prvWriteBytesToBuffer
01003088 l     F .text	000000bc prvReadMessageFromBuffer
01003414 l     F .text	00000114 prvReadBytesFromBuffer
00000000 l    df *ABS*	00000000 tasks.c
0181e9a0 l     O .bss	00000064 pxReadyTasksLists
0181ea04 l     O .bss	00000014 xDelayedTaskList1
0181ea18 l     O .bss	00000014 xDelayedTaskList2
0101e92c l     O .bss	00000004 pxDelayedTaskList
0101e930 l     O .bss	00000004 pxOverflowDelayedTaskList
0181ea2c l     O .bss	00000014 xPendingReadyList
0181ea40 l     O .bss	00000014 xTasksWaitingTermination
0101e934 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0181ea54 l     O .bss	00000014 xSuspendedTaskList
0101e938 l     O .bss	00000004 uxCurrentNumberOfTasks
0101e93c l     O .bss	00000004 xTickCount
0101e940 l     O .bss	00000004 uxTopReadyPriority
0101e944 l     O .bss	00000004 xSchedulerRunning
0101e948 l     O .bss	00000004 uxPendedTicks
0101e94c l     O .bss	00000004 xYieldPending
0101e950 l     O .bss	00000004 xNumOfOverflows
0101e954 l     O .bss	00000004 uxTaskNumber
0101e958 l     O .bss	00000004 xNextTaskUnblockTime
0101e95c l     O .bss	00000004 xIdleTaskHandle
0101e960 l     O .bss	00000004 uxSchedulerSuspended
01003704 l     F .text	000001e4 prvInitialiseNewTask
010038e8 l     F .text	000000fc prvAddNewTaskToReadyList
01004c38 l     F .text	000000b8 prvInitialiseTaskLists
01004e34 l     F .text	00000044 prvDeleteTCB
01004e78 l     F .text	00000054 prvResetNextTaskUnblockTime
01005a6c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0100406c l     F .text	0000006c prvTaskIsTaskSuspended
01004c1c l     F .text	0000001c prvIdleTask
01004cf0 l     F .text	00000080 prvCheckTasksWaitingTermination
01004d70 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 metal-test.c
01005b88 l     F .text	00000064 metal_list_add_before
01005bec l     F .text	0000003c metal_list_add_tail
0101cce4 l     O .rwdata	00000008 test_cases
00000000 l    df *ABS*	00000000 device.c
01005e84 l     F .text	00000040 metal_list_init
01005ec4 l     F .text	00000064 metal_list_add_before
01005f28 l     F .text	0000003c metal_list_add_tail
01005f64 l     F .text	00000068 metal_list_del
01005fcc l     F .text	0000003c __metal_cache_flush
01006008 l     F .text	0000003c __metal_cache_invalidate
01006044 l     F .text	0000003c metal_cache_flush
01006080 l     F .text	0000003c metal_cache_invalidate
0101a538 l     O .rodata	00000013 __func__.2760
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 alloc.c
01006880 l     F .text	00000030 metal_allocate_memory
010068b0 l     F .text	00000034 metal_free_memory
0101ccec l     O .rwdata	00000004 test_count
010068e4 l     F .text	000000b8 alloc_thread
0100699c l     F .text	00000048 alloc
010069e4 l     F .text	00000034 metal_test_alloc
0101b1b0 l     O .rwdata	00000010 metal_test_alloc.2863
00000000 l    df *ABS*	00000000 atomic.c
0101ccf0 l     O .rwdata	00000004 atomic_test_count
01006a18 l     F .text	00000060 atomic_thread
01006a78 l     F .text	000000d0 atomic
01006b48 l     F .text	00000034 metal_test_atomic
0101b1c0 l     O .rwdata	00000010 metal_test_atomic.2316
00000000 l    df *ABS*	00000000 condition.c
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 io.c
00000000 l    df *ABS*	00000000 irq.c
01006d80 l     F .text	0000003c metal_irq_unregister
01006dbc l     F .text	00000028 irq_handler
01006de4 l     F .text	00000174 irq
01006f58 l     F .text	00000034 metal_test_irq
0101b1d0 l     O .rwdata	00000010 metal_test_irq.2402
00000000 l    df *ABS*	00000000 mutex.c
01006f8c l     F .text	00000030 __metal_mutex_init
01006fbc l     F .text	00000024 __metal_mutex_deinit
01006fe0 l     F .text	00000040 __metal_mutex_acquire
01007020 l     F .text	00000030 __metal_mutex_release
01007050 l     F .text	00000034 metal_mutex_init
01007084 l     F .text	00000034 metal_mutex_deinit
010070b8 l     F .text	00000034 metal_mutex_acquire
010070ec l     F .text	00000034 metal_mutex_release
0101ccf4 l     O .rwdata	00000004 mutex_test_count
01007120 l     F .text	0000006c mutex_thread
0100718c l     F .text	00000064 mutex
010071f0 l     F .text	00000034 metal_test_mutex
0101b1e0 l     O .rwdata	00000010 metal_test_mutex.2608
00000000 l    df *ABS*	00000000 sys.c
00000000 l    df *ABS*	00000000 shmem.c
00000000 l    df *ABS*	00000000 sleep.c
010072e4 l     F .text	0000003c __metal_sleep_usec
01007320 l     F .text	00000030 metal_sleep_usec
01007350 l     F .text	000000c0 sleep
01007410 l     F .text	00000034 metal_test_sleep
0101b1f0 l     O .rwdata	00000010 metal_test_sleep.2855
00000000 l    df *ABS*	00000000 threads.c
01007444 l     F .text	0000005c thread_wrapper
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 init.c
010078e4 l     F .text	00000040 metal_list_init
00000000 l    df *ABS*	00000000 io.c
01007a10 l     F .text	0000005c metal_io_virt
00000000 l    df *ABS*	00000000 irq.c
010080fc l     F .text	00000064 metal_list_add_before
01008160 l     F .text	0000003c metal_list_add_tail
0101ccf8 l     O .rwdata	00000008 irq_cntrs
0100819c l     F .text	000000f4 metal_irq_allocate
0100835c l     F .text	00000094 metal_irq_get_controller
010083f0 l     F .text	00000060 _metal_irq_set_enable
00000000 l    df *ABS*	00000000 log.c
00000000 l    df *ABS*	00000000 shmem.c
0100867c l     F .text	00000064 metal_list_add_before
010086e0 l     F .text	0000003c metal_list_add_tail
0100871c l     F .text	00000028 metal_io_region_size
0101a6d4 l     O .rodata	0000001d __func__.2650
00000000 l    df *ABS*	00000000 softirq.c
010088c4 l     F .text	00000064 metal_irq_handle
0101e964 l     O .bss	00000004 metal_softirq_avail
0101cd00 l     O .rwdata	00000004 metal_softirq_num
0181ea68 l     O .bss	00000200 metal_softirqs
0181ec68 l     O .bss	00000040 metal_softirq_pending
0181eca8 l     O .bss	00000040 metal_softirq_enabled
01008928 l     F .text	000000b4 metal_softirq_set_enable
0101b200 l     O .rwdata	00000020 metal_softirq_cntr
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0101b220 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0101ae9e l     O .rodata	00000010 zeroes.4389
0101aeae l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
0100bc5c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 findfp.c
0100d4e4 l     F .text	00000008 __fp_unlock
0100d4f8 l     F .text	0000019c __sinit.part.1
0100d694 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0101b664 l     O .rwdata	00000020 lc_ctype_charset
0101b644 l     O .rwdata	00000020 lc_message_charset
0101b684 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0101aedc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0101b010 l     O .rodata	00000010 blanks.4332
0101b000 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
01011864 l     F .text	000000fc __sprint_r.part.0
0101b030 l     O .rodata	00000010 blanks.4348
0101b020 l     O .rodata	00000010 zeroes.4349
01012df0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
01017498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010175a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01017604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01017880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01017960 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01017acc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01017bb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01017d8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0101cd38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01018008 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101813c l     F .text	00000034 alt_dev_reg
01018170 l     F .text	0000003c alt_get_errno
010181ac l     F .text	00000068 alt_avalon_mutex_reg
0101bc6c l     O .rwdata	00001060 jtag_uart_0
0101cccc l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010184d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
010186e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
01018d1c l     F .text	0000003c alt_get_errno
01018d58 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01018fe8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010193a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010198ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
010199ec l     F .text	0000003c alt_get_errno
01019a28 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101e99c g     O .bss	00000004 alt_instruction_exception_handler
0100f874 g     F .text	00000074 _mprec_log10
0100f960 g     F .text	0000008c __any_on
01006258 g     F .text	000000a4 metal_bus_find
01014178 g     F .text	00000054 _isatty_r
0101aee8 g     O .rodata	00000028 __mprec_tinytens
01017cc8 g     F .text	0000007c alt_main
01008fd0 g     F .text	000000c0 _puts_r
0181ed30 g     O .bss	00000100 alt_irq
0181ed10 g     O .bss	00000020 _metal
01013b60 g     F .text	00000060 _lseek_r
0100012c g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0100486c g     F .text	00000064 vTaskPlaceOnUnorderedEventList
01001250 g     F .text	00000020 xPortGetFreeHeapSize
010007d4 g     F .text	0000003c xEventGroupGetBitsFromISR
0101cd4c g       *ABS*	00000000 __flash_rwdata_start
01015fc4 g     F .text	00000088 .hidden __eqdf2
0181ee30 g       *ABS*	00000000 __alt_heap_start
01003d28 g     F .text	00000058 uxTaskPriorityGet
010102bc g     F .text	0000005c _kill_r
01013f34 g     F .text	0000009c _wcrtomb_r
01010084 g     F .text	00000084 _signal_r
010103f4 g     F .text	0000005c __sseek
0100d834 g     F .text	00000010 __sinit
01013ddc g     F .text	00000140 __swbuf_r
0100dec8 g     F .text	0000007c _setlocale_r
0100d69c g     F .text	00000068 __sfmoreglue
01008654 g     F .text	00000028 metal_get_log_level
01002da4 g     F .text	00000158 xStreamBufferReceive
01017d68 g     F .text	00000024 __malloc_unlock
01009998 g     F .text	0000001c strerror
01008744 g     F .text	000000b8 metal_shmem_register_generic
01000440 g     F .text	00000184 xEventGroupSync
0100e894 g     F .text	0000015c memmove
010072a4 g     F .text	00000040 metal_shmem_open
01005270 g     F .text	00000054 vTaskEnterCritical
0100d81c g     F .text	00000018 _cleanup
0100917c g     F .text	000000e4 snprintf
01001938 g     F .text	000000e8 xQueueGenericSendFromISR
01004554 g     F .text	00000040 pcTaskGetName
01018e90 g     F .text	00000040 altera_avalon_mutex_trylock
0100e9f0 g     F .text	000000a8 _Balloc
01002990 g     F .text	00000088 xStreamBufferSpacesAvailable
01008620 g     F .text	00000034 metal_set_log_level
0101604c g     F .text	000000dc .hidden __gtdf2
01019de4 g     F .text	00000024 altera_nios2_gen2_irq_init
01002888 g     F .text	0000009c xStreamBufferReset
01000000 g     F .entry	0000001c __reset
01001600 g     F .text	00000090 xQueueGiveMutexRecursive
0101e928 g     O .bss	00000004 pxCurrentTCB
01018f24 g     F .text	00000074 altera_avalon_mutex_is_mine
01006c60 g     F .text	00000034 metal_sys_finish
01000020 g       *ABS*	00000000 __flash_exceptions_start
0101411c g     F .text	0000005c _fstat_r
01007a6c g     F .text	00000168 metal_io_init
0101e980 g     O .bss	00000004 errno
01010370 g     F .text	00000008 __seofread
01010628 g     F .text	0000123c ___svfiprintf_internal_r
01007274 g     F .text	00000030 metal_machine_io_mem_map
01002be0 g     F .text	000000f0 xStreamBufferSendFromISR
0100650c g     F .text	000000a4 metal_generic_dev_open
0101e98c g     O .bss	00000004 alt_argv
01024cdc g       *ABS*	00000000 _gp
01017fd8 g     F .text	00000030 usleep
010087fc g     F .text	000000c8 metal_shmem_open_generic
01006698 g     F .text	00000088 metal_generic_dev_dma_unmap
01003dcc g     F .text	000001a4 vTaskPrioritySet
010176f0 g     F .text	00000020 getpid
01004ad8 g     F .text	0000003c vTaskInternalSetTimeOutState
010063e8 g     F .text	00000090 metal_device_close
010005c4 g     F .text	000001a8 xEventGroupWaitBits
0101baec g     O .rwdata	00000180 alt_fd_list
01000e88 g     F .text	00000038 xPortStartScheduler
01004314 g     F .text	00000048 vTaskEndScheduler
01019548 g     F .text	00000090 alt_find_dev
01008d60 g     F .text	00000148 memcpy
0100481c g     F .text	00000050 vTaskPlaceOnEventList
010049c4 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
0100d4ec g     F .text	0000000c _cleanup_r
010172b0 g     F .text	000000dc .hidden __floatsidf
01019970 g     F .text	0000007c alt_io_redirect
01016128 g     F .text	000000f4 .hidden __ltdf2
01002148 g     F .text	0000007c xQueuePeekFromISR
0101a454 g       *ABS*	00000000 __DTOR_END__
01006ba4 g     F .text	00000084 metal_generic_dev_sys_open
01009090 g     F .text	00000014 puts
0101a044 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01001184 g     F .text	000000cc vPortFree
0100933c g     F .text	0000065c _strerror_r
0100ff50 g     F .text	00000074 __fpclassifyd
0100f7d0 g     F .text	000000a4 __ratio
01012dd4 g     F .text	0000001c __vfiprintf_internal
01001ca4 g     F .text	00000210 xQueueSemaphoreTake
010188dc g     F .text	0000021c altera_avalon_jtag_uart_read
01014d74 g     F .text	00000064 .hidden __udivsi3
010178bc g     F .text	000000a4 isatty
01010108 g     F .text	000000bc _raise_r
01008c88 g     F .text	00000068 __assert_func
0101af38 g     O .rodata	000000c8 __mprec_tens
01004dd4 g     F .text	00000060 uxTaskGetStackHighWaterMark
010074a0 g     F .text	00000100 metal_run
0100df44 g     F .text	0000000c __locale_charset
01000b80 g     F .text	0000008c vListInsertEnd
01019fb4 g     F .text	00000090 alt_icache_flush
0101e97c g     O .bss	00000004 __malloc_top_pad
01010318 g     F .text	00000004 _getpid_r
010003ec g     F .text	00000054 xEventGroupCreate
0101cd0c g     O .rwdata	00000004 __mb_cur_max
0100df74 g     F .text	0000000c _localeconv_r
0100edfc g     F .text	0000003c __i2b
0100d884 g     F .text	000004bc __sfvwrite_r
010101c4 g     F .text	000000a8 __sigtramp_r
0100ffc4 g     F .text	00000054 _sbrk_r
010085c4 g     F .text	00000034 metal_set_log_handler
01000a04 g     F .text	0000003c vEventGroupSetBitsCallback
010041a4 g     F .text	000000e0 xTaskResumeFromISR
01007924 g     F .text	000000ac metal_init
01013d7c g     F .text	00000060 _read_r
01000b54 g     F .text	0000002c vListInitialiseItem
0101cd2c g     O .rwdata	00000004 alt_max_fd
01000f68 g     F .text	00000048 vPortSysTickHandler
01013178 g     F .text	000000f0 _fclose_r
01001afc g     F .text	000001a8 xQueueReceive
010134f4 g     F .text	00000030 fflush
0101e978 g     O .bss	00000004 __malloc_max_sbrked_mem
01007bd4 g     F .text	000001b4 metal_io_block_read
01003d80 g     F .text	0000004c uxTaskPriorityGetFromISR
01017710 g     F .text	00000170 alt_irq_register
01014e30 g     F .text	000008ac .hidden __adddf3
0100f578 g     F .text	0000010c __b2d
01014744 g     F .text	00000538 .hidden __umoddi3
01017bf4 g     F .text	000000d4 lseek
01018f98 g     F .text	00000050 altera_avalon_mutex_first_lock
0101cd04 g     O .rwdata	00000004 _global_impure_ptr
01000810 g     F .text	00000180 xEventGroupSetBits
0100f9ec g     F .text	00000564 _realloc_r
0181ee30 g       *ABS*	00000000 __bss_end
010197bc g     F .text	000000f0 alt_iic_isr_register
01019cdc g     F .text	00000108 alt_tick
010141cc g     F .text	00000578 .hidden __udivdi3
01013688 g     F .text	00000024 _fputwc_r
0101af10 g     O .rodata	00000028 __mprec_bigtens
0100ebe0 g     F .text	00000104 __s2b
0100bc44 g     F .text	00000018 abort
0101738c g     F .text	000000a8 .hidden __floatunsidf
01006b7c g     F .text	00000028 metal_condition_wait
0100f2b8 g     F .text	00000060 __mcmp
01000fb0 g     F .text	000001d4 pvPortMalloc
0100851c g     F .text	0000003c metal_irq_enable
0100d854 g     F .text	00000018 __fp_lock_all
01019770 g     F .text	0000004c alt_ic_irq_enabled
01002290 g     F .text	0000003c vQueueDelete
010060bc g     F .text	000000f8 metal_bus_register
01000ec0 g     F .text	00000020 vPortEndScheduler
01000aec g     F .text	00000068 vListInitialise
01003144 g     F .text	00000058 xStreamBufferIsEmpty
01019c40 g     F .text	0000009c alt_alarm_stop
0101e984 g     O .bss	00000004 alt_irq_active
01000258 g     F .exceptions	000000d4 alt_irq_handler
0101bac4 g     O .rwdata	00000028 alt_dev_null
010044e0 g     F .text	00000028 xTaskGetTickCount
01001784 g     F .text	000001b4 xQueueGenericSend
01018dd4 g     F .text	00000054 altera_avalon_mutex_open
01002a58 g     F .text	00000188 xStreamBufferSend
0100329c g     F .text	00000084 xStreamBufferReceiveCompletedFromISR
01019360 g     F .text	00000048 alt_dcache_flush_all
0100ece4 g     F .text	00000068 __hi0bits
01017230 g     F .text	00000080 .hidden __fixdfsi
01002efc g     F .text	000000a8 xStreamBufferNextMessageLengthBytes
01005034 g     F .text	000000fc xTaskPriorityDisinherit
01008a6c g     F .text	00000030 metal_softirq_init
0101cd4c g       *ABS*	00000000 __ram_rwdata_end
0101cd24 g     O .rwdata	00000008 alt_dev_list
01018044 g     F .text	000000f8 write
010048d0 g     F .text	000000f4 xTaskRemoveFromEventList
0101cd3c g     O .rwdata	00000008 alt_mutex_list
0101b184 g       *ABS*	00000000 __ram_rodata_end
01017640 g     F .text	000000b0 fstat
0100076c g     F .text	00000068 xEventGroupClearBits
0101799c g     F .text	00000130 kill
01016128 g     F .text	000000f4 .hidden __ledf2
01001eb4 g     F .text	000001b0 xQueuePeek
0100f030 g     F .text	00000140 __pow5mult
0101e970 g     O .bss	00000004 __nlocale_changed
01011978 g     F .text	0000145c ___vfiprintf_internal_r
01014dd8 g     F .text	00000058 .hidden __umodsi3
010089dc g     F .text	00000090 metal_softirq_set
01008558 g     F .text	0000003c metal_irq_disable
0181ee30 g       *ABS*	00000000 end
01002fa4 g     F .text	000000e4 xStreamBufferReceiveFromISR
010039e4 g     F .text	000000e8 vTaskDelete
01018418 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100032c g     F .exceptions	00000074 alt_instruction_exception_entry
01005368 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0101a440 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01019060 g     F .text	0000007c alt_avalon_timer_sc_init
01017434 g     F .text	00000064 .hidden __clzsi2
010090a4 g     F .text	000000d8 _snprintf_r
01018af8 g     F .text	00000224 altera_avalon_jtag_uart_write
01007894 g     F .text	00000050 metal_get_timestamp
0100d844 g     F .text	00000004 __sfp_lock_acquire
0100e7b0 g     F .text	000000e4 memchr
01004b14 g     F .text	000000e0 xTaskCheckForTimeOut
01013850 g     F .text	00000310 _free_r
01004ef4 g     F .text	00000140 xTaskPriorityInherit
0100df50 g     F .text	00000010 __locale_mb_cur_max
0101a2c0 g     F .text	00000180 __call_exitprocs
01002824 g     F .text	00000064 vStreamBufferDelete
0101e96c g     O .bss	00000004 __mlocale_changed
010053a0 g     F .text	000000b0 ulTaskNotifyTake
0101cd10 g     O .rwdata	00000004 __malloc_sbrk_base
010003a0 g     F .text	0000004c _start
0101e994 g     O .bss	00000004 _alt_tick_rate
0100435c g     F .text	0000002c vTaskSuspendAll
01003c18 g     F .text	00000110 eTaskGetState
0100319c g     F .text	0000007c xStreamBufferIsFull
01004508 g     F .text	0000002c xTaskGetTickCountFromISR
0100bc24 g     F .text	00000008 _user_strerror
010062fc g     F .text	000000ec metal_device_open
0100f170 g     F .text	00000148 __lshift
0101e998 g     O .bss	00000004 _alt_nticks
01010280 g     F .text	00000018 signal
01017dc8 g     F .text	000000fc read
0101824c g     F .text	00000068 alt_sys_init
010075a0 g     F .text	00000214 metal_run_noblock
01010458 g     F .text	000001d0 __ssprint_r
01000ce4 g     F .text	00000098 uxListRemove
0101a1a8 g     F .text	00000118 __register_exitproc
01018ed0 g     F .text	00000054 altera_avalon_mutex_unlock
01002778 g     F .text	000000ac xStreamBufferGenericCreate
0100ee38 g     F .text	000001f8 __multiply
01018784 g     F .text	00000068 altera_avalon_jtag_uart_close
0101b184 g       *ABS*	00000000 __ram_rwdata_start
0101a454 g       *ABS*	00000000 __ram_rodata_start
0181ece8 g     O .bss	00000028 __malloc_current_mallinfo
010059f4 g     F .text	00000078 xTaskNotifyStateClear
010040d8 g     F .text	000000cc vTaskResume
0100f684 g     F .text	0000014c __d2b
01004744 g     F .text	000000d8 vTaskSwitchContext
010182b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01019f10 g     F .text	000000a4 alt_get_fd
01019208 g     F .text	00000158 alt_busy_sleep
01013060 g     F .text	00000054 _close_r
01005450 g     F .text	000000f4 xTaskNotifyWait
0101a12c g     F .text	0000007c memcmp
01018374 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0181ee30 g       *ABS*	00000000 __alt_stack_base
010183c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01005c28 g     F .text	0000003c metal_add_test_case
01012f0c g     F .text	00000154 __swsetup_r
01003f70 g     F .text	000000fc vTaskSuspend
010156dc g     F .text	000008e8 .hidden __divdf3
0100d704 g     F .text	00000118 __sfp
0100f8e8 g     F .text	00000078 __copybits
01004534 g     F .text	00000020 uxTaskGetNumberOfTasks
0101b6bc g     O .rwdata	00000408 __malloc_av_
0100d850 g     F .text	00000004 __sinit_lock_release
01007d88 g     F .text	000001b0 metal_io_block_write
0101621c g     F .text	00000718 .hidden __muldf3
0101031c g     F .text	00000054 __sread
01019e08 g     F .text	00000108 alt_find_file
010193e4 g     F .text	000000a4 alt_dev_llist_insert
01017d44 g     F .text	00000024 __malloc_lock
01017f28 g     F .text	000000b0 sbrk
01009a4c g     F .text	000021d8 ___svfprintf_internal_r
01001690 g     F .text	0000009c xQueueTakeMutexRecursive
01006478 g     F .text	00000094 metal_register_generic_device
01008a9c g     F .text	000000bc metal_softirq_allocate
01013498 g     F .text	0000005c _fflush_r
01000990 g     F .text	00000074 vEventGroupDelete
01006720 g     F .text	000000c0 metal_dma_map
010130b4 g     F .text	000000c4 _calloc_r
01005544 g     F .text	000001ac xTaskGenericNotify
0101e914 g       *ABS*	00000000 __bss_start
01008ea8 g     F .text	00000128 memset
01005b54 g     F .text	00000034 main
0101e990 g     O .bss	00000004 alt_envp
0101e974 g     O .bss	00000004 __malloc_max_total_mem
01007224 g     F .text	00000028 metal_machine_cache_flush
01018314 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01013f1c g     F .text	00000018 __swbuf
01008594 g     F .text	00000030 metal_default_log_handler
01000c0c g     F .text	000000d8 vListInsert
01010450 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01013268 g     F .text	00000014 fclose
01018e4c g     F .text	00000044 altera_avalon_mutex_lock
0100be5c g     F .text	00001688 _dtoa_r
0100dfa4 g     F .text	0000080c _malloc_r
01014090 g     F .text	00000030 __ascii_wctomb
0101cd30 g     O .rwdata	00000004 alt_errno
01003acc g     F .text	000000f0 vTaskDelayUntil
01008d04 g     F .text	00000020 _fiprintf_r
01010298 g     F .text	00000010 _init_signal
010067e0 g     F .text	000000a0 metal_dma_unmap
0100dd40 g     F .text	000000c4 _fwalk
01006c94 g     F .text	000000ec metal_sys_io_mem_map
01002064 g     F .text	000000e4 xQueueReceiveFromISR
01004ecc g     F .text	00000028 xTaskGetCurrentTaskHandle
01014c7c g     F .text	00000084 .hidden __divsi3
01001418 g     F .text	000000a8 xQueueGenericCreate
0101372c g     F .text	00000124 _malloc_trim_r
0101a454 g       *ABS*	00000000 __CTOR_END__
01009260 g     F .text	000000dc strcmp
0100172c g     F .text	00000058 xQueueCreateCountingSemaphore
0101a454 g       *ABS*	00000000 __flash_rodata_start
0101a454 g       *ABS*	00000000 __DTOR_LIST__
01002924 g     F .text	0000006c xStreamBufferSetTriggerLevel
010077b4 g     F .text	000000e0 metal_finish_threads
010056f0 g     F .text	000001e4 xTaskGenericNotifyFromISR
01015fc4 g     F .text	00000088 .hidden __nedf2
01018214 g     F .text	00000038 alt_irq_init
01017ec4 g     F .text	00000064 alt_release_fd
01004388 g     F .text	00000158 xTaskResumeAll
01002204 g     F .text	00000054 uxQueueSpacesAvailable
0101b040 g     O .rodata	00000100 .hidden __clz_tab
01004284 g     F .text	00000090 vTaskStartScheduler
0101e968 g     O .bss	00000004 _PathLocale
01008290 g     F .text	000000cc metal_irq_register_controller
0101a0e0 g     F .text	00000014 atexit
01012eac g     F .text	00000060 _write_r
0100df80 g     F .text	00000018 setlocale
01002728 g     F .text	00000050 xQueueIsQueueFullFromISR
0101cd08 g     O .rwdata	00000004 _impure_ptr
0101e988 g     O .bss	00000004 alt_argc
0101327c g     F .text	0000021c __sflush_r
010194e8 g     F .text	00000060 _do_dtors
0100df6c g     F .text	00000008 __locale_cjk_lang
01000020 g       .exceptions	00000000 alt_irq_entry
0100f514 g     F .text	00000064 __ulp
0100d86c g     F .text	00000018 __fp_unlock_all
01004bf4 g     F .text	00000028 vTaskMissedYield
0101cd1c g     O .rwdata	00000008 alt_fs_list
010021c4 g     F .text	00000040 uxQueueMessagesWaiting
0101b184  w    O .rwdata	0000002c metal_generic_bus
01004594 g     F .text	000001b0 xTaskIncrementTick
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100724c g     F .text	00000028 metal_machine_cache_invalidate
0100df98 g     F .text	0000000c localeconv
010079d0 g     F .text	00000040 metal_finish
010065b0 g     F .text	000000e8 metal_generic_dev_dma_map
0101960c g     F .text	00000050 alt_ic_isr_register
01001304 g     F .text	00000114 xQueueGenericReset
0101cd4c g       *ABS*	00000000 _edata
0181ee30 g       *ABS*	00000000 _end
01013524 g     F .text	00000164 __fputwc
010003a0 g       *ABS*	00000000 __ram_exceptions_end
01007f38 g     F .text	000001c4 metal_io_block_set
010187ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01006c28 g     F .text	00000038 metal_sys_init
0100361c g     F .text	000000e8 xTaskCreate
01001270 g     F .text	00000020 vPortInitialiseBlocks
010196e4 g     F .text	0000008c alt_ic_irq_disable
01010378 g     F .text	0000007c __swrite
0101cd14 g     O .rwdata	00000004 __malloc_trim_threshold
0100df60 g     F .text	0000000c __locale_msgcharset
0101a0f4 g     F .text	00000038 exit
01008d24 g     F .text	0000003c fiprintf
0100bc2c g     F .text	00000018 _vfiprintf_r
0100de04 g     F .text	000000c4 _fwalk_reent
0100f318 g     F .text	000001fc __mdiff
01014d00 g     F .text	00000074 .hidden __modsi3
01003bbc g     F .text	0000005c vTaskDelay
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100d848 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01008b58 g     F .text	00000130 metal_softirq_dispatch
01005130 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
01008450 g     F .text	000000cc metal_irq_register
010175d0 g     F .text	00000034 _exit
010190dc g     F .text	0000012c alt_alarm_start
01013bc0 g     F .text	000001bc __smakebuf_r
010052c4 g     F .text	00000060 vTaskExitCritical
010099b4 g     F .text	00000098 strlen
01000da8 g     F .text	000000e0 pxPortInitialiseStack
01010018 g     F .text	0000006c _init_signal_r
01019aec g     F .text	00000154 open
0101604c g     F .text	000000dc .hidden __gedf2
01008cf0 g     F .text	00000014 __assert
010061b4 g     F .text	000000a4 metal_bus_unregister
0101cd18 g     O .rwdata	00000004 __wctomb
010085f8 g     F .text	00000028 metal_get_log_handler
01011960 g     F .text	00000018 __sprint_r
010195d8 g     F .text	00000034 alt_icache_flush_all
01004a8c g     F .text	0000004c vTaskSetTimeOutState
0101cd34 g     O .rwdata	00000004 alt_priority_mask
0101965c g     F .text	00000088 alt_ic_irq_enable
01018e28 g     F .text	00000024 altera_avalon_mutex_close
010140c0 g     F .text	0000005c _wctomb_r
01002258 g     F .text	00000038 uxQueueMessagesWaitingFromISR
01002688 g     F .text	00000048 xQueueIsQueueEmptyFromISR
01002a18 g     F .text	00000040 xStreamBufferBytesAvailable
01016934 g     F .text	000008fc .hidden __subdf3
0100ed4c g     F .text	000000b0 __lo0bits
0101cd44 g     O .rwdata	00000008 alt_alarm_list
01019488 g     F .text	00000060 _do_ctors
010102a8 g     F .text	00000014 __sigtramp
01005324 g     F .text	00000044 uxTaskResetEventItemValue
01013fd0 g     F .text	000000c0 wcrtomb
010015a4 g     F .text	0000005c xQueueCreateMutex
010174d4 g     F .text	000000d0 close
010058d4 g     F .text	00000120 vTaskNotifyGiveFromISR
01017b34 g     F .text	00000084 alt_load
01000a40 g     F .text	0000003c vEventGroupClearBitsCallback
01003218 g     F .text	00000084 xStreamBufferSendCompletedFromISR
01001a20 g     F .text	000000dc xQueueGiveFromISR
010136ac g     F .text	00000080 fputwc
0101026c g     F .text	00000014 raise
0100d84c g     F .text	00000004 __sinit_lock_acquire
01005c64 g     F .text	00000220 metal_tests_run
0100eac0 g     F .text	00000120 __multadd
0100ea98 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	0840e814 	ori	at,at,928
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_sdram-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 1000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 1000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 1000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 100002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 1000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 1000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 1000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 100003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 1000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 1000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 1000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 100004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 1000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 100006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 1000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 1000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 1000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 100007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 1000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 1000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 1000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 100008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 1000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 1000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 1000098:	df001c15 	stw	fp,112(sp)

0100009c <save_sp_to_pxCurrentTCB>:
 100009c:	060040b4 	movhi	et,258

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 10000a0:	c63a4a04 	addi	et,et,-5848
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 10000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 10000a8:	c6c00015 	stw	sp,0(et)

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 10000ac:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 10000b0:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 10000b4:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 10000b8:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 10000bc:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 10000c0:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 10000c4:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 10000c8:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 10000cc:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 10000d0:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 10000d4:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 10000d8:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 10000dc:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 10000e0:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 10000e4:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 10000e8:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 10000ec:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 10000f0:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 10000f4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 10000f8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000fc:	dbc01215 	stw	r15,72(sp)

01000100 <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 1000100:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 1000104:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 1000108:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 100010c:	10002d26 	beq	r2,zero,10001c4 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 1000110:	20002c26 	beq	r4,zero,10001c4 <soft_exceptions>
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000114:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000118:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100011c:	10002726 	beq	r2,zero,10001bc <restore_context+0x80>
        beq   r4, zero, .Lnot_irq
 1000120:	20002626 	beq	r4,zero,10001bc <restore_context+0x80>

01000124 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 1000124:	10002580 	call	1000258 <alt_irq_handler>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000128:	10002580 	call	1000258 <alt_irq_handler>

0100012c <restore_sp_from_pxCurrentTCB>:
 100012c:	060040b4 	movhi	et,258

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 1000130:	c63a4a04 	addi	et,et,-5848
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 1000134:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 1000138:	c6c00017 	ldw	sp,0(et)

0100013c <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 100013c:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 1000140:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 1000144:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 1000148:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 100014c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 1000150:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 1000154:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 1000158:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 100015c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 1000160:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 1000164:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 1000168:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 100016c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 1000170:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 1000174:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 1000178:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 100017c:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 1000180:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 1000184:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 1000188:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 100018c:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 1000190:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 1000194:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 1000198:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 100019c:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 10001a0:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 10001a4:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 10001a8:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 10001ac:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 10001b0:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 10001b4:	ef80083a 	eret

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 10001b8:	00001206 	br	1000204 <call_scheduler+0x24>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 10001bc:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 10001c0:	e8bfff17 	ldw	r2,-4(ea)

010001c4 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 10001c4:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 10001c8:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 10001cc:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 10001d0:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 10001d4:	c0000226 	beq	et,zero,10001e0 <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 10001d8:	003da03a 	break	0
  	br		restore_context			# its something else
 10001dc:	003fd706 	br	100013c <__alt_data_end+0xff00013c>

010001e0 <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 10001e0:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 10001e4:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 10001e8:	10047440 	call	1004744 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 10001ec:	003fcf06 	br	100012c <__alt_data_end+0xff00012c>
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 10001f0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 10001f4:	100032c0 	call	100032c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 10001f8:	1000021e 	bne	r2,zero,1000204 <call_scheduler+0x24>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10001fc:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000200:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000204:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 1000208:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 100020c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 1000210:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 1000214:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 1000218:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 100021c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 1000220:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 1000224:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 1000228:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 100022c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 1000230:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 1000234:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 1000238:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 100023c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 1000240:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 1000244:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 1000248:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100024c:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 1000250:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 1000254:	ef80083a 	eret

01000258 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 1000258:	defff904 	addi	sp,sp,-28
 100025c:	dfc00615 	stw	ra,24(sp)
 1000260:	df000515 	stw	fp,20(sp)
 1000264:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 1000268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100026c:	0005313a 	rdctl	r2,ipending
 1000270:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000274:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000278:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 100027c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000280:	00800044 	movi	r2,1
 1000284:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000288:	e0fffb17 	ldw	r3,-20(fp)
 100028c:	e0bffc17 	ldw	r2,-16(fp)
 1000290:	1884703a 	and	r2,r3,r2
 1000294:	10001426 	beq	r2,zero,10002e8 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000298:	008060b4 	movhi	r2,386
 100029c:	10bb4c04 	addi	r2,r2,-4816
 10002a0:	e0fffd17 	ldw	r3,-12(fp)
 10002a4:	180690fa 	slli	r3,r3,3
 10002a8:	10c5883a 	add	r2,r2,r3
 10002ac:	10c00017 	ldw	r3,0(r2)
 10002b0:	008060b4 	movhi	r2,386
 10002b4:	10bb4c04 	addi	r2,r2,-4816
 10002b8:	e13ffd17 	ldw	r4,-12(fp)
 10002bc:	200890fa 	slli	r4,r4,3
 10002c0:	1105883a 	add	r2,r2,r4
 10002c4:	10800104 	addi	r2,r2,4
 10002c8:	10800017 	ldw	r2,0(r2)
 10002cc:	1009883a 	mov	r4,r2
 10002d0:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 10002d4:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10002d8:	0005313a 	rdctl	r2,ipending
 10002dc:	e0bfff15 	stw	r2,-4(fp)

  return active;
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	00000706 	br	1000304 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 10002e8:	e0bffc17 	ldw	r2,-16(fp)
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	10800044 	addi	r2,r2,1
 10002fc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000300:	003fe106 	br	1000288 <__alt_data_end+0xff000288>

    active = alt_irq_pending ();
 1000304:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1000308:	e0bffb17 	ldw	r2,-20(fp)
 100030c:	103fdb1e 	bne	r2,zero,100027c <__alt_data_end+0xff00027c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1000310:	0001883a 	nop
}
 1000314:	0001883a 	nop
 1000318:	e037883a 	mov	sp,fp
 100031c:	dfc00117 	ldw	ra,4(sp)
 1000320:	df000017 	ldw	fp,0(sp)
 1000324:	dec00204 	addi	sp,sp,8
 1000328:	f800283a 	ret

0100032c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 100032c:	defffb04 	addi	sp,sp,-20
 1000330:	dfc00415 	stw	ra,16(sp)
 1000334:	df000315 	stw	fp,12(sp)
 1000338:	df000304 	addi	fp,sp,12
 100033c:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1000340:	000531fa 	rdctl	r2,exception
 1000344:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1000348:	e0bffd17 	ldw	r2,-12(fp)
 100034c:	10801f0c 	andi	r2,r2,124
 1000350:	1004d0ba 	srli	r2,r2,2
 1000354:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1000358:	0005333a 	rdctl	r2,badaddr
 100035c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000360:	d0a73017 	ldw	r2,-25408(gp)
 1000364:	10000726 	beq	r2,zero,1000384 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1000368:	d0a73017 	ldw	r2,-25408(gp)
 100036c:	e0fffd17 	ldw	r3,-12(fp)
 1000370:	e1bffe17 	ldw	r6,-8(fp)
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	1809883a 	mov	r4,r3
 100037c:	103ee83a 	callr	r2
 1000380:	00000206 	br	100038c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000384:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000388:	0005883a 	mov	r2,zero
}
 100038c:	e037883a 	mov	sp,fp
 1000390:	dfc00117 	ldw	ra,4(sp)
 1000394:	df000017 	ldw	fp,0(sp)
 1000398:	dec00204 	addi	sp,sp,8
 100039c:	f800283a 	ret

Disassembly of section .text:

010003a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10003a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10003a4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10003a8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10003ac:	00bffd16 	blt	zero,r2,10003a4 <__alt_data_end+0xff0003a4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10003b0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10003b4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10003b8:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10003bc:	d6933714 	ori	gp,gp,19676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10003c0:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10003c4:	10ba4514 	ori	r2,r2,59668

    movhi r3, %hi(__bss_end)
 10003c8:	00c06074 	movhi	r3,385
    ori r3, r3, %lo(__bss_end)
 10003cc:	18fb8c14 	ori	r3,r3,60976

    beq r2, r3, 1f
 10003d0:	10c00326 	beq	r2,r3,10003e0 <_start+0x40>

0:
    stw zero, (r2)
 10003d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10003d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10003dc:	10fffd36 	bltu	r2,r3,10003d4 <__alt_data_end+0xff0003d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10003e0:	1017b340 	call	1017b34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10003e4:	1017cc80 	call	1017cc8 <alt_main>

010003e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10003e8:	003fff06 	br	10003e8 <__alt_data_end+0xff0003e8>

010003ec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 10003ec:	defffd04 	addi	sp,sp,-12
 10003f0:	dfc00215 	stw	ra,8(sp)
 10003f4:	df000115 	stw	fp,4(sp)
 10003f8:	df000104 	addi	fp,sp,4
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 10003fc:	01000604 	movi	r4,24
 1000400:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1000404:	e0bfff15 	stw	r2,-4(fp)

		if( pxEventBits != NULL )
 1000408:	e0bfff17 	ldw	r2,-4(fp)
 100040c:	10000626 	beq	r2,zero,1000428 <xEventGroupCreate+0x3c>
		{
			pxEventBits->uxEventBits = 0;
 1000410:	e0bfff17 	ldw	r2,-4(fp)
 1000414:	10000015 	stw	zero,0(r2)
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 1000418:	e0bfff17 	ldw	r2,-4(fp)
 100041c:	10800104 	addi	r2,r2,4
 1000420:	1009883a 	mov	r4,r2
 1000424:	1000aec0 	call	1000aec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 1000428:	e0bfff17 	ldw	r2,-4(fp)
	}
 100042c:	e037883a 	mov	sp,fp
 1000430:	dfc00117 	ldw	ra,4(sp)
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00204 	addi	sp,sp,8
 100043c:	f800283a 	ret

01000440 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 1000440:	defff504 	addi	sp,sp,-44
 1000444:	dfc00a15 	stw	ra,40(sp)
 1000448:	df000915 	stw	fp,36(sp)
 100044c:	df000904 	addi	fp,sp,36
 1000450:	e13ffc15 	stw	r4,-16(fp)
 1000454:	e17ffd15 	stw	r5,-12(fp)
 1000458:	e1bffe15 	stw	r6,-8(fp)
 100045c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 1000460:	e0bffc17 	ldw	r2,-16(fp)
 1000464:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 1000468:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 100046c:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 1000470:	e0bff817 	ldw	r2,-32(fp)
 1000474:	10800017 	ldw	r2,0(r2)
 1000478:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 100047c:	e17ffd17 	ldw	r5,-12(fp)
 1000480:	e13ffc17 	ldw	r4,-16(fp)
 1000484:	10008100 	call	1000810 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000488:	e0fffa17 	ldw	r3,-24(fp)
 100048c:	e0bffd17 	ldw	r2,-12(fp)
 1000490:	1886b03a 	or	r3,r3,r2
 1000494:	e0bffe17 	ldw	r2,-8(fp)
 1000498:	1886703a 	and	r3,r3,r2
 100049c:	e0bffe17 	ldw	r2,-8(fp)
 10004a0:	18800d1e 	bne	r3,r2,10004d8 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 10004a4:	e0fffa17 	ldw	r3,-24(fp)
 10004a8:	e0bffd17 	ldw	r2,-12(fp)
 10004ac:	1884b03a 	or	r2,r3,r2
 10004b0:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 10004b4:	e0bff817 	ldw	r2,-32(fp)
 10004b8:	10c00017 	ldw	r3,0(r2)
 10004bc:	e0bffe17 	ldw	r2,-8(fp)
 10004c0:	0084303a 	nor	r2,zero,r2
 10004c4:	1886703a 	and	r3,r3,r2
 10004c8:	e0bff817 	ldw	r2,-32(fp)
 10004cc:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
 10004d0:	e03fff15 	stw	zero,-4(fp)
 10004d4:	00001106 	br	100051c <xEventGroupSync+0xdc>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 10004d8:	e0bfff17 	ldw	r2,-4(fp)
 10004dc:	10000a26 	beq	r2,zero,1000508 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 10004e0:	e0bff817 	ldw	r2,-32(fp)
 10004e4:	10c00104 	addi	r3,r2,4
 10004e8:	e0bffe17 	ldw	r2,-8(fp)
 10004ec:	10814034 	orhi	r2,r2,1280
 10004f0:	e1bfff17 	ldw	r6,-4(fp)
 10004f4:	100b883a 	mov	r5,r2
 10004f8:	1809883a 	mov	r4,r3
 10004fc:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 1000500:	e03ff715 	stw	zero,-36(fp)
 1000504:	00000506 	br	100051c <xEventGroupSync+0xdc>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 1000508:	e0bff817 	ldw	r2,-32(fp)
 100050c:	10800017 	ldw	r2,0(r2)
 1000510:	e0bff715 	stw	r2,-36(fp)
				xTimeoutOccurred = pdTRUE;
 1000514:	00800044 	movi	r2,1
 1000518:	e0bff915 	stw	r2,-28(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 100051c:	10043880 	call	1004388 <xTaskResumeAll>
 1000520:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10002026 	beq	r2,zero,10005ac <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
 100052c:	e0bffb17 	ldw	r2,-20(fp)
 1000530:	1000011e 	bne	r2,zero,1000538 <xEventGroupSync+0xf8>
		{
			portYIELD_WITHIN_API();
 1000534:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 1000538:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 100053c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 1000540:	e0bff717 	ldw	r2,-36(fp)
 1000544:	1080802c 	andhi	r2,r2,512
 1000548:	1000131e 	bne	r2,zero,1000598 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 100054c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 1000550:	e0bff817 	ldw	r2,-32(fp)
 1000554:	10800017 	ldw	r2,0(r2)
 1000558:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 100055c:	e0fff717 	ldw	r3,-36(fp)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	1886703a 	and	r3,r3,r2
 1000568:	e0bffe17 	ldw	r2,-8(fp)
 100056c:	1880071e 	bne	r3,r2,100058c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000570:	e0bff817 	ldw	r2,-32(fp)
 1000574:	10c00017 	ldw	r3,0(r2)
 1000578:	e0bffe17 	ldw	r2,-8(fp)
 100057c:	0084303a 	nor	r2,zero,r2
 1000580:	1886703a 	and	r3,r3,r2
 1000584:	e0bff817 	ldw	r2,-32(fp)
 1000588:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 100058c:	10052c40 	call	10052c4 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
 1000590:	00800044 	movi	r2,1
 1000594:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000598:	e0fff717 	ldw	r3,-36(fp)
 100059c:	00804034 	movhi	r2,256
 10005a0:	10bfffc4 	addi	r2,r2,-1
 10005a4:	1884703a 	and	r2,r3,r2
 10005a8:	e0bff715 	stw	r2,-36(fp)
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 10005ac:	e0bff717 	ldw	r2,-36(fp)
}
 10005b0:	e037883a 	mov	sp,fp
 10005b4:	dfc00117 	ldw	ra,4(sp)
 10005b8:	df000017 	ldw	fp,0(sp)
 10005bc:	dec00204 	addi	sp,sp,8
 10005c0:	f800283a 	ret

010005c4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 10005c4:	defff304 	addi	sp,sp,-52
 10005c8:	dfc00c15 	stw	ra,48(sp)
 10005cc:	df000b15 	stw	fp,44(sp)
 10005d0:	df000b04 	addi	fp,sp,44
 10005d4:	e13ffc15 	stw	r4,-16(fp)
 10005d8:	e17ffd15 	stw	r5,-12(fp)
 10005dc:	e1bffe15 	stw	r6,-8(fp)
 10005e0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10005e4:	e0bffc17 	ldw	r2,-16(fp)
 10005e8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
 10005ec:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 10005f0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 10005f4:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 10005f8:	e0bff717 	ldw	r2,-36(fp)
 10005fc:	10800017 	ldw	r2,0(r2)
 1000600:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 1000604:	e1bfff17 	ldw	r6,-4(fp)
 1000608:	e17ffd17 	ldw	r5,-12(fp)
 100060c:	e13ff917 	ldw	r4,-28(fp)
 1000610:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 1000614:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
 1000618:	e0bffa17 	ldw	r2,-24(fp)
 100061c:	10000d26 	beq	r2,zero,1000654 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 1000620:	e0bff917 	ldw	r2,-28(fp)
 1000624:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
 1000628:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	10002226 	beq	r2,zero,10006bc <xEventGroupWaitBits+0xf8>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000634:	e0bff717 	ldw	r2,-36(fp)
 1000638:	10c00017 	ldw	r3,0(r2)
 100063c:	e0bffd17 	ldw	r2,-12(fp)
 1000640:	0084303a 	nor	r2,zero,r2
 1000644:	1886703a 	and	r3,r3,r2
 1000648:	e0bff717 	ldw	r2,-36(fp)
 100064c:	10c00015 	stw	r3,0(r2)
 1000650:	00001a06 	br	10006bc <xEventGroupWaitBits+0xf8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 1000654:	e0800217 	ldw	r2,8(fp)
 1000658:	1000051e 	bne	r2,zero,1000670 <xEventGroupWaitBits+0xac>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 100065c:	e0bff917 	ldw	r2,-28(fp)
 1000660:	e0bff515 	stw	r2,-44(fp)
			xTimeoutOccurred = pdTRUE;
 1000664:	00800044 	movi	r2,1
 1000668:	e0bff815 	stw	r2,-32(fp)
 100066c:	00001306 	br	10006bc <xEventGroupWaitBits+0xf8>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 1000670:	e0bffe17 	ldw	r2,-8(fp)
 1000674:	10000326 	beq	r2,zero,1000684 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 1000678:	e0bff617 	ldw	r2,-40(fp)
 100067c:	10804034 	orhi	r2,r2,256
 1000680:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 1000684:	e0bfff17 	ldw	r2,-4(fp)
 1000688:	10000326 	beq	r2,zero,1000698 <xEventGroupWaitBits+0xd4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 100068c:	e0bff617 	ldw	r2,-40(fp)
 1000690:	10810034 	orhi	r2,r2,1024
 1000694:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 1000698:	e0bff717 	ldw	r2,-36(fp)
 100069c:	11000104 	addi	r4,r2,4
 10006a0:	e0fffd17 	ldw	r3,-12(fp)
 10006a4:	e0bff617 	ldw	r2,-40(fp)
 10006a8:	1884b03a 	or	r2,r3,r2
 10006ac:	e1800217 	ldw	r6,8(fp)
 10006b0:	100b883a 	mov	r5,r2
 10006b4:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 10006b8:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 10006bc:	10043880 	call	1004388 <xTaskResumeAll>
 10006c0:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 10006c4:	e0800217 	ldw	r2,8(fp)
 10006c8:	10002226 	beq	r2,zero,1000754 <xEventGroupWaitBits+0x190>
	{
		if( xAlreadyYielded == pdFALSE )
 10006cc:	e0bffb17 	ldw	r2,-20(fp)
 10006d0:	1000011e 	bne	r2,zero,10006d8 <xEventGroupWaitBits+0x114>
		{
			portYIELD_WITHIN_API();
 10006d4:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 10006d8:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 10006dc:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 10006e0:	e0bff517 	ldw	r2,-44(fp)
 10006e4:	1080802c 	andhi	r2,r2,512
 10006e8:	1000151e 	bne	r2,zero,1000740 <xEventGroupWaitBits+0x17c>
		{
			taskENTER_CRITICAL();
 10006ec:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 10006f0:	e0bff717 	ldw	r2,-36(fp)
 10006f4:	10800017 	ldw	r2,0(r2)
 10006f8:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 10006fc:	e1bfff17 	ldw	r6,-4(fp)
 1000700:	e17ffd17 	ldw	r5,-12(fp)
 1000704:	e13ff517 	ldw	r4,-44(fp)
 1000708:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 100070c:	10000926 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
				{
					if( xClearOnExit != pdFALSE )
 1000710:	e0bffe17 	ldw	r2,-8(fp)
 1000714:	10000726 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000718:	e0bff717 	ldw	r2,-36(fp)
 100071c:	10c00017 	ldw	r3,0(r2)
 1000720:	e0bffd17 	ldw	r2,-12(fp)
 1000724:	0084303a 	nor	r2,zero,r2
 1000728:	1886703a 	and	r3,r3,r2
 100072c:	e0bff717 	ldw	r2,-36(fp)
 1000730:	10c00015 	stw	r3,0(r2)
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 1000734:	00800044 	movi	r2,1
 1000738:	e0bff815 	stw	r2,-32(fp)
			}
			taskEXIT_CRITICAL();
 100073c:	10052c40 	call	10052c4 <vTaskExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000740:	e0fff517 	ldw	r3,-44(fp)
 1000744:	00804034 	movhi	r2,256
 1000748:	10bfffc4 	addi	r2,r2,-1
 100074c:	1884703a 	and	r2,r3,r2
 1000750:	e0bff515 	stw	r2,-44(fp)
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 1000754:	e0bff517 	ldw	r2,-44(fp)
}
 1000758:	e037883a 	mov	sp,fp
 100075c:	dfc00117 	ldw	ra,4(sp)
 1000760:	df000017 	ldw	fp,0(sp)
 1000764:	dec00204 	addi	sp,sp,8
 1000768:	f800283a 	ret

0100076c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 100076c:	defffa04 	addi	sp,sp,-24
 1000770:	dfc00515 	stw	ra,20(sp)
 1000774:	df000415 	stw	fp,16(sp)
 1000778:	df000404 	addi	fp,sp,16
 100077c:	e13ffe15 	stw	r4,-8(fp)
 1000780:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 1000784:	e0bffe17 	ldw	r2,-8(fp)
 1000788:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
 100078c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 1000790:	e0bffc17 	ldw	r2,-16(fp)
 1000794:	10800017 	ldw	r2,0(r2)
 1000798:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 100079c:	e0bffc17 	ldw	r2,-16(fp)
 10007a0:	10c00017 	ldw	r3,0(r2)
 10007a4:	e0bfff17 	ldw	r2,-4(fp)
 10007a8:	0084303a 	nor	r2,zero,r2
 10007ac:	1886703a 	and	r3,r3,r2
 10007b0:	e0bffc17 	ldw	r2,-16(fp)
 10007b4:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
 10007b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10007bc:	e0bffd17 	ldw	r2,-12(fp)
}
 10007c0:	e037883a 	mov	sp,fp
 10007c4:	dfc00117 	ldw	ra,4(sp)
 10007c8:	df000017 	ldw	fp,0(sp)
 10007cc:	dec00204 	addi	sp,sp,8
 10007d0:	f800283a 	ret

010007d4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 10007d4:	defffb04 	addi	sp,sp,-20
 10007d8:	df000415 	stw	fp,16(sp)
 10007dc:	df000404 	addi	fp,sp,16
 10007e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 10007e4:	e0bfff17 	ldw	r2,-4(fp)
 10007e8:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10007ec:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
 10007f0:	e0bffc17 	ldw	r2,-16(fp)
 10007f4:	10800017 	ldw	r2,0(r2)
 10007f8:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 10007fc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 1000800:	e037883a 	mov	sp,fp
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00104 	addi	sp,sp,4
 100080c:	f800283a 	ret

01000810 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 1000810:	defff304 	addi	sp,sp,-52
 1000814:	dfc00c15 	stw	ra,48(sp)
 1000818:	df000b15 	stw	fp,44(sp)
 100081c:	df000b04 	addi	fp,sp,44
 1000820:	e13ffe15 	stw	r4,-8(fp)
 1000824:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1000828:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = xEventGroup;
 100082c:	e0bffe17 	ldw	r2,-8(fp)
 1000830:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
 1000834:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
 1000838:	e0bff817 	ldw	r2,-32(fp)
 100083c:	10800104 	addi	r2,r2,4
 1000840:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000844:	e0bff917 	ldw	r2,-28(fp)
 1000848:	10800204 	addi	r2,r2,8
 100084c:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
 1000850:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 1000854:	e0bff917 	ldw	r2,-28(fp)
 1000858:	10800317 	ldw	r2,12(r2)
 100085c:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 1000860:	e0bff817 	ldw	r2,-32(fp)
 1000864:	10c00017 	ldw	r3,0(r2)
 1000868:	e0bfff17 	ldw	r2,-4(fp)
 100086c:	1886b03a 	or	r3,r3,r2
 1000870:	e0bff817 	ldw	r2,-32(fp)
 1000874:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000878:	00003306 	br	1000948 <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
 100087c:	e0bff517 	ldw	r2,-44(fp)
 1000880:	10800117 	ldw	r2,4(r2)
 1000884:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1000888:	e0bff517 	ldw	r2,-44(fp)
 100088c:	10800017 	ldw	r2,0(r2)
 1000890:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
 1000894:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1000898:	e0bffc17 	ldw	r2,-16(fp)
 100089c:	10bfc02c 	andhi	r2,r2,65280
 10008a0:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 10008a4:	e0fffc17 	ldw	r3,-16(fp)
 10008a8:	00804034 	movhi	r2,256
 10008ac:	10bfffc4 	addi	r2,r2,-1
 10008b0:	1884703a 	and	r2,r3,r2
 10008b4:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 10008b8:	e0bffd17 	ldw	r2,-12(fp)
 10008bc:	1081002c 	andhi	r2,r2,1024
 10008c0:	1000081e 	bne	r2,zero,10008e4 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 10008c4:	e0bff817 	ldw	r2,-32(fp)
 10008c8:	10c00017 	ldw	r3,0(r2)
 10008cc:	e0bffc17 	ldw	r2,-16(fp)
 10008d0:	1884703a 	and	r2,r3,r2
 10008d4:	10000b26 	beq	r2,zero,1000904 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
 10008d8:	00800044 	movi	r2,1
 10008dc:	e0bff715 	stw	r2,-36(fp)
 10008e0:	00000806 	br	1000904 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 10008e4:	e0bff817 	ldw	r2,-32(fp)
 10008e8:	10c00017 	ldw	r3,0(r2)
 10008ec:	e0bffc17 	ldw	r2,-16(fp)
 10008f0:	1886703a 	and	r3,r3,r2
 10008f4:	e0bffc17 	ldw	r2,-16(fp)
 10008f8:	1880021e 	bne	r3,r2,1000904 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 10008fc:	00800044 	movi	r2,1
 1000900:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 1000904:	e0bff717 	ldw	r2,-36(fp)
 1000908:	10000d26 	beq	r2,zero,1000940 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 100090c:	e0bffd17 	ldw	r2,-12(fp)
 1000910:	1080402c 	andhi	r2,r2,256
 1000914:	10000426 	beq	r2,zero,1000928 <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 1000918:	e0fff617 	ldw	r3,-40(fp)
 100091c:	e0bffc17 	ldw	r2,-16(fp)
 1000920:	1884b03a 	or	r2,r3,r2
 1000924:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 1000928:	e0bff817 	ldw	r2,-32(fp)
 100092c:	10800017 	ldw	r2,0(r2)
 1000930:	10808034 	orhi	r2,r2,512
 1000934:	100b883a 	mov	r5,r2
 1000938:	e13ff517 	ldw	r4,-44(fp)
 100093c:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 1000940:	e0bffb17 	ldw	r2,-20(fp)
 1000944:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000948:	e0fff517 	ldw	r3,-44(fp)
 100094c:	e0bffa17 	ldw	r2,-24(fp)
 1000950:	18bfca1e 	bne	r3,r2,100087c <__alt_data_end+0xff00087c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1000954:	e0bff817 	ldw	r2,-32(fp)
 1000958:	10c00017 	ldw	r3,0(r2)
 100095c:	e0bff617 	ldw	r2,-40(fp)
 1000960:	0084303a 	nor	r2,zero,r2
 1000964:	1886703a 	and	r3,r3,r2
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
 1000970:	10043880 	call	1004388 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 1000974:	e0bff817 	ldw	r2,-32(fp)
 1000978:	10800017 	ldw	r2,0(r2)
}
 100097c:	e037883a 	mov	sp,fp
 1000980:	dfc00117 	ldw	ra,4(sp)
 1000984:	df000017 	ldw	fp,0(sp)
 1000988:	dec00204 	addi	sp,sp,8
 100098c:	f800283a 	ret

01000990 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 1000990:	defffb04 	addi	sp,sp,-20
 1000994:	dfc00415 	stw	ra,16(sp)
 1000998:	df000315 	stw	fp,12(sp)
 100099c:	df000304 	addi	fp,sp,12
 10009a0:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10009a4:	e0bfff17 	ldw	r2,-4(fp)
 10009a8:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 10009ac:	e0bffd17 	ldw	r2,-12(fp)
 10009b0:	10800104 	addi	r2,r2,4
 10009b4:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
 10009b8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009bc:	00000506 	br	10009d4 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 10009c0:	e0bffe17 	ldw	r2,-8(fp)
 10009c4:	10800317 	ldw	r2,12(r2)
 10009c8:	01408034 	movhi	r5,512
 10009cc:	1009883a 	mov	r4,r2
 10009d0:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009d4:	e0bffe17 	ldw	r2,-8(fp)
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	103ff81e 	bne	r2,zero,10009c0 <__alt_data_end+0xff0009c0>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 10009e0:	e13ffd17 	ldw	r4,-12(fp)
 10009e4:	10011840 	call	1001184 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 10009e8:	10043880 	call	1004388 <xTaskResumeAll>
}
 10009ec:	0001883a 	nop
 10009f0:	e037883a 	mov	sp,fp
 10009f4:	dfc00117 	ldw	ra,4(sp)
 10009f8:	df000017 	ldw	fp,0(sp)
 10009fc:	dec00204 	addi	sp,sp,8
 1000a00:	f800283a 	ret

01000a04 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 1000a04:	defffc04 	addi	sp,sp,-16
 1000a08:	dfc00315 	stw	ra,12(sp)
 1000a0c:	df000215 	stw	fp,8(sp)
 1000a10:	df000204 	addi	fp,sp,8
 1000a14:	e13ffe15 	stw	r4,-8(fp)
 1000a18:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a1c:	e17fff17 	ldw	r5,-4(fp)
 1000a20:	e13ffe17 	ldw	r4,-8(fp)
 1000a24:	10008100 	call	1000810 <xEventGroupSetBits>
}
 1000a28:	0001883a 	nop
 1000a2c:	e037883a 	mov	sp,fp
 1000a30:	dfc00117 	ldw	ra,4(sp)
 1000a34:	df000017 	ldw	fp,0(sp)
 1000a38:	dec00204 	addi	sp,sp,8
 1000a3c:	f800283a 	ret

01000a40 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 1000a40:	defffc04 	addi	sp,sp,-16
 1000a44:	dfc00315 	stw	ra,12(sp)
 1000a48:	df000215 	stw	fp,8(sp)
 1000a4c:	df000204 	addi	fp,sp,8
 1000a50:	e13ffe15 	stw	r4,-8(fp)
 1000a54:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a58:	e17fff17 	ldw	r5,-4(fp)
 1000a5c:	e13ffe17 	ldw	r4,-8(fp)
 1000a60:	100076c0 	call	100076c <xEventGroupClearBits>
}
 1000a64:	0001883a 	nop
 1000a68:	e037883a 	mov	sp,fp
 1000a6c:	dfc00117 	ldw	ra,4(sp)
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00204 	addi	sp,sp,8
 1000a78:	f800283a 	ret

01000a7c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 1000a7c:	defffb04 	addi	sp,sp,-20
 1000a80:	df000415 	stw	fp,16(sp)
 1000a84:	df000404 	addi	fp,sp,16
 1000a88:	e13ffd15 	stw	r4,-12(fp)
 1000a8c:	e17ffe15 	stw	r5,-8(fp)
 1000a90:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
 1000a94:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
 1000a98:	e0bfff17 	ldw	r2,-4(fp)
 1000a9c:	1000071e 	bne	r2,zero,1000abc <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1000aa0:	e0fffd17 	ldw	r3,-12(fp)
 1000aa4:	e0bffe17 	ldw	r2,-8(fp)
 1000aa8:	1884703a 	and	r2,r3,r2
 1000aac:	10000a26 	beq	r2,zero,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ab0:	00800044 	movi	r2,1
 1000ab4:	e0bffc15 	stw	r2,-16(fp)
 1000ab8:	00000706 	br	1000ad8 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000abc:	e0fffd17 	ldw	r3,-12(fp)
 1000ac0:	e0bffe17 	ldw	r2,-8(fp)
 1000ac4:	1886703a 	and	r3,r3,r2
 1000ac8:	e0bffe17 	ldw	r2,-8(fp)
 1000acc:	1880021e 	bne	r3,r2,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ad0:	00800044 	movi	r2,1
 1000ad4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 1000ad8:	e0bffc17 	ldw	r2,-16(fp)
}
 1000adc:	e037883a 	mov	sp,fp
 1000ae0:	df000017 	ldw	fp,0(sp)
 1000ae4:	dec00104 	addi	sp,sp,4
 1000ae8:	f800283a 	ret

01000aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1000aec:	defffe04 	addi	sp,sp,-8
 1000af0:	df000115 	stw	fp,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000afc:	e0bfff17 	ldw	r2,-4(fp)
 1000b00:	10c00204 	addi	r3,r2,8
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1000b0c:	e0bfff17 	ldw	r2,-4(fp)
 1000b10:	00ffffc4 	movi	r3,-1
 1000b14:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b18:	e0bfff17 	ldw	r2,-4(fp)
 1000b1c:	10c00204 	addi	r3,r2,8
 1000b20:	e0bfff17 	ldw	r2,-4(fp)
 1000b24:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b28:	e0bfff17 	ldw	r2,-4(fp)
 1000b2c:	10c00204 	addi	r3,r2,8
 1000b30:	e0bfff17 	ldw	r2,-4(fp)
 1000b34:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1000b38:	e0bfff17 	ldw	r2,-4(fp)
 1000b3c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 1000b40:	0001883a 	nop
 1000b44:	e037883a 	mov	sp,fp
 1000b48:	df000017 	ldw	fp,0(sp)
 1000b4c:	dec00104 	addi	sp,sp,4
 1000b50:	f800283a 	ret

01000b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 1000b54:	defffe04 	addi	sp,sp,-8
 1000b58:	df000115 	stw	fp,4(sp)
 1000b5c:	df000104 	addi	fp,sp,4
 1000b60:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1000b64:	e0bfff17 	ldw	r2,-4(fp)
 1000b68:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 1000b6c:	0001883a 	nop
 1000b70:	e037883a 	mov	sp,fp
 1000b74:	df000017 	ldw	fp,0(sp)
 1000b78:	dec00104 	addi	sp,sp,4
 1000b7c:	f800283a 	ret

01000b80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000b80:	defffc04 	addi	sp,sp,-16
 1000b84:	df000315 	stw	fp,12(sp)
 1000b88:	df000304 	addi	fp,sp,12
 1000b8c:	e13ffe15 	stw	r4,-8(fp)
 1000b90:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 1000b94:	e0bffe17 	ldw	r2,-8(fp)
 1000b98:	10800117 	ldw	r2,4(r2)
 1000b9c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1000ba0:	e0bfff17 	ldw	r2,-4(fp)
 1000ba4:	e0fffd17 	ldw	r3,-12(fp)
 1000ba8:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1000bac:	e0bffd17 	ldw	r2,-12(fp)
 1000bb0:	10c00217 	ldw	r3,8(r2)
 1000bb4:	e0bfff17 	ldw	r2,-4(fp)
 1000bb8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1000bbc:	e0bffd17 	ldw	r2,-12(fp)
 1000bc0:	10800217 	ldw	r2,8(r2)
 1000bc4:	e0ffff17 	ldw	r3,-4(fp)
 1000bc8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 1000bcc:	e0bffd17 	ldw	r2,-12(fp)
 1000bd0:	e0ffff17 	ldw	r3,-4(fp)
 1000bd4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1000bd8:	e0bfff17 	ldw	r2,-4(fp)
 1000bdc:	e0fffe17 	ldw	r3,-8(fp)
 1000be0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000be4:	e0bffe17 	ldw	r2,-8(fp)
 1000be8:	10800017 	ldw	r2,0(r2)
 1000bec:	10c00044 	addi	r3,r2,1
 1000bf0:	e0bffe17 	ldw	r2,-8(fp)
 1000bf4:	10c00015 	stw	r3,0(r2)
}
 1000bf8:	0001883a 	nop
 1000bfc:	e037883a 	mov	sp,fp
 1000c00:	df000017 	ldw	fp,0(sp)
 1000c04:	dec00104 	addi	sp,sp,4
 1000c08:	f800283a 	ret

01000c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000c0c:	defffb04 	addi	sp,sp,-20
 1000c10:	df000415 	stw	fp,16(sp)
 1000c14:	df000404 	addi	fp,sp,16
 1000c18:	e13ffe15 	stw	r4,-8(fp)
 1000c1c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1000c20:	e0bfff17 	ldw	r2,-4(fp)
 1000c24:	10800017 	ldw	r2,0(r2)
 1000c28:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1000c2c:	e0bffd17 	ldw	r2,-12(fp)
 1000c30:	10bfffd8 	cmpnei	r2,r2,-1
 1000c34:	1000041e 	bne	r2,zero,1000c48 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1000c38:	e0bffe17 	ldw	r2,-8(fp)
 1000c3c:	10800417 	ldw	r2,16(r2)
 1000c40:	e0bffc15 	stw	r2,-16(fp)
 1000c44:	00000c06 	br	1000c78 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1000c48:	e0bffe17 	ldw	r2,-8(fp)
 1000c4c:	10800204 	addi	r2,r2,8
 1000c50:	e0bffc15 	stw	r2,-16(fp)
 1000c54:	00000306 	br	1000c64 <vListInsert+0x58>
 1000c58:	e0bffc17 	ldw	r2,-16(fp)
 1000c5c:	10800117 	ldw	r2,4(r2)
 1000c60:	e0bffc15 	stw	r2,-16(fp)
 1000c64:	e0bffc17 	ldw	r2,-16(fp)
 1000c68:	10800117 	ldw	r2,4(r2)
 1000c6c:	10800017 	ldw	r2,0(r2)
 1000c70:	e0fffd17 	ldw	r3,-12(fp)
 1000c74:	18bff82e 	bgeu	r3,r2,1000c58 <__alt_data_end+0xff000c58>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1000c78:	e0bffc17 	ldw	r2,-16(fp)
 1000c7c:	10c00117 	ldw	r3,4(r2)
 1000c80:	e0bfff17 	ldw	r2,-4(fp)
 1000c84:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1000c88:	e0bfff17 	ldw	r2,-4(fp)
 1000c8c:	10800117 	ldw	r2,4(r2)
 1000c90:	e0ffff17 	ldw	r3,-4(fp)
 1000c94:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 1000c98:	e0bfff17 	ldw	r2,-4(fp)
 1000c9c:	e0fffc17 	ldw	r3,-16(fp)
 1000ca0:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 1000ca4:	e0bffc17 	ldw	r2,-16(fp)
 1000ca8:	e0ffff17 	ldw	r3,-4(fp)
 1000cac:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1000cb0:	e0bfff17 	ldw	r2,-4(fp)
 1000cb4:	e0fffe17 	ldw	r3,-8(fp)
 1000cb8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000cbc:	e0bffe17 	ldw	r2,-8(fp)
 1000cc0:	10800017 	ldw	r2,0(r2)
 1000cc4:	10c00044 	addi	r3,r2,1
 1000cc8:	e0bffe17 	ldw	r2,-8(fp)
 1000ccc:	10c00015 	stw	r3,0(r2)
}
 1000cd0:	0001883a 	nop
 1000cd4:	e037883a 	mov	sp,fp
 1000cd8:	df000017 	ldw	fp,0(sp)
 1000cdc:	dec00104 	addi	sp,sp,4
 1000ce0:	f800283a 	ret

01000ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1000ce4:	defffd04 	addi	sp,sp,-12
 1000ce8:	df000215 	stw	fp,8(sp)
 1000cec:	df000204 	addi	fp,sp,8
 1000cf0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1000cf4:	e0bfff17 	ldw	r2,-4(fp)
 1000cf8:	10800417 	ldw	r2,16(r2)
 1000cfc:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1000d00:	e0bfff17 	ldw	r2,-4(fp)
 1000d04:	10800117 	ldw	r2,4(r2)
 1000d08:	e0ffff17 	ldw	r3,-4(fp)
 1000d0c:	18c00217 	ldw	r3,8(r3)
 1000d10:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1000d14:	e0bfff17 	ldw	r2,-4(fp)
 1000d18:	10800217 	ldw	r2,8(r2)
 1000d1c:	e0ffff17 	ldw	r3,-4(fp)
 1000d20:	18c00117 	ldw	r3,4(r3)
 1000d24:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1000d28:	e0bffe17 	ldw	r2,-8(fp)
 1000d2c:	10c00117 	ldw	r3,4(r2)
 1000d30:	e0bfff17 	ldw	r2,-4(fp)
 1000d34:	1880041e 	bne	r3,r2,1000d48 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 1000d38:	e0bfff17 	ldw	r2,-4(fp)
 1000d3c:	10c00217 	ldw	r3,8(r2)
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 1000d48:	e0bfff17 	ldw	r2,-4(fp)
 1000d4c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 1000d50:	e0bffe17 	ldw	r2,-8(fp)
 1000d54:	10800017 	ldw	r2,0(r2)
 1000d58:	10ffffc4 	addi	r3,r2,-1
 1000d5c:	e0bffe17 	ldw	r2,-8(fp)
 1000d60:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 1000d64:	e0bffe17 	ldw	r2,-8(fp)
 1000d68:	10800017 	ldw	r2,0(r2)
}
 1000d6c:	e037883a 	mov	sp,fp
 1000d70:	df000017 	ldw	fp,0(sp)
 1000d74:	dec00104 	addi	sp,sp,4
 1000d78:	f800283a 	ret

01000d7c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 1000d7c:	defffe04 	addi	sp,sp,-8
 1000d80:	df000115 	stw	fp,4(sp)
 1000d84:	df000104 	addi	fp,sp,4
 1000d88:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	16800015 	stw	gp,0(r2)
}
 1000d94:	0001883a 	nop
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 1000da8:	defff904 	addi	sp,sp,-28
 1000dac:	dfc00615 	stw	ra,24(sp)
 1000db0:	df000515 	stw	fp,20(sp)
 1000db4:	df000504 	addi	fp,sp,20
 1000db8:	e13ffd15 	stw	r4,-12(fp)
 1000dbc:	e17ffe15 	stw	r5,-8(fp)
 1000dc0:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 1000dc4:	e0bffd17 	ldw	r2,-12(fp)
 1000dc8:	10bfff04 	addi	r2,r2,-4
 1000dcc:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 1000dd0:	e0bffc04 	addi	r2,fp,-16
 1000dd4:	1009883a 	mov	r4,r2
 1000dd8:	1000d7c0 	call	1000d7c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 1000ddc:	e0fffd17 	ldw	r3,-12(fp)
 1000de0:	00b7abb4 	movhi	r2,57006
 1000de4:	10afbbc4 	addi	r2,r2,-16657
 1000de8:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 1000dec:	e0bffd17 	ldw	r2,-12(fp)
 1000df0:	10bfff04 	addi	r2,r2,-4
 1000df4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 1000df8:	e0fffb17 	ldw	r3,-20(fp)
 1000dfc:	e0bffd17 	ldw	r2,-12(fp)
 1000e00:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e04:	e0bffd17 	ldw	r2,-12(fp)
 1000e08:	10bfff04 	addi	r2,r2,-4
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 1000e10:	e0fffc17 	ldw	r3,-16(fp)
 1000e14:	e0bffd17 	ldw	r2,-12(fp)
 1000e18:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 1000e1c:	e0bffd17 	ldw	r2,-12(fp)
 1000e20:	10bff704 	addi	r2,r2,-36
 1000e24:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 1000e28:	e0fffe17 	ldw	r3,-8(fp)
 1000e2c:	e0bffd17 	ldw	r2,-12(fp)
 1000e30:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e34:	e0bffd17 	ldw	r2,-12(fp)
 1000e38:	10bfff04 	addi	r2,r2,-4
 1000e3c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 1000e40:	e0bffd17 	ldw	r2,-12(fp)
 1000e44:	00c00044 	movi	r3,1
 1000e48:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 1000e4c:	e0bffd17 	ldw	r2,-12(fp)
 1000e50:	10bff404 	addi	r2,r2,-48
 1000e54:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 1000e58:	e0ffff17 	ldw	r3,-4(fp)
 1000e5c:	e0bffd17 	ldw	r2,-12(fp)
 1000e60:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 1000e64:	e0bffd17 	ldw	r2,-12(fp)
 1000e68:	10bffb04 	addi	r2,r2,-20
 1000e6c:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 1000e70:	e0bffd17 	ldw	r2,-12(fp)
}
 1000e74:	e037883a 	mov	sp,fp
 1000e78:	dfc00117 	ldw	ra,4(sp)
 1000e7c:	df000017 	ldw	fp,0(sp)
 1000e80:	dec00204 	addi	sp,sp,8
 1000e84:	f800283a 	ret

01000e88 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 1000e88:	defffe04 	addi	sp,sp,-8
 1000e8c:	dfc00115 	stw	ra,4(sp)
 1000e90:	df000015 	stw	fp,0(sp)
 1000e94:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 1000e98:	1000ee00 	call	1000ee0 <prvSetupTimerInterrupt>
 1000e9c:	00804034 	movhi	r2,256
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 1000ea0:	10804b04 	addi	r2,r2,300
 1000ea4:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 1000ea8:	0005883a 	mov	r2,zero
}
 1000eac:	e037883a 	mov	sp,fp
 1000eb0:	dfc00117 	ldw	ra,4(sp)
 1000eb4:	df000017 	ldw	fp,0(sp)
 1000eb8:	dec00204 	addi	sp,sp,8
 1000ebc:	f800283a 	ret

01000ec0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1000ec0:	deffff04 	addi	sp,sp,-4
 1000ec4:	df000015 	stw	fp,0(sp)
 1000ec8:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 1000ecc:	0001883a 	nop
 1000ed0:	e037883a 	mov	sp,fp
 1000ed4:	df000017 	ldw	fp,0(sp)
 1000ed8:	dec00104 	addi	sp,sp,4
 1000edc:	f800283a 	ret

01000ee0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 1000ee0:	defffe04 	addi	sp,sp,-8
 1000ee4:	dfc00115 	stw	ra,4(sp)
 1000ee8:	df000015 	stw	fp,0(sp)
 1000eec:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
 1000ef0:	01804034 	movhi	r6,256
 1000ef4:	3183da04 	addi	r6,r6,3944
 1000ef8:	000b883a 	mov	r5,zero
 1000efc:	01000044 	movi	r4,1
 1000f00:	10177100 	call	1017710 <alt_irq_register>
 1000f04:	10bffa98 	cmpnei	r2,r2,-22
 1000f08:	1000021e 	bne	r2,zero,1000f14 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 1000f0c:	003da03a 	break	0
 1000f10:	00000c06 	br	1000f44 <prvSetupTimerInterrupt+0x64>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 1000f14:	00c00204 	movi	r3,8
 1000f18:	00800904 	movi	r2,36
 1000f1c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 1000f20:	00f0d414 	movui	r3,50000
 1000f24:	00800a04 	movi	r2,40
 1000f28:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 1000f2c:	0007883a 	mov	r3,zero
 1000f30:	00800b04 	movi	r2,44
 1000f34:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 1000f38:	00c001c4 	movi	r3,7
 1000f3c:	00800904 	movi	r2,36
 1000f40:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f44:	00ffff84 	movi	r3,-2
 1000f48:	00800804 	movi	r2,32
 1000f4c:	10c00035 	stwio	r3,0(r2)
}
 1000f50:	0001883a 	nop
 1000f54:	e037883a 	mov	sp,fp
 1000f58:	dfc00117 	ldw	ra,4(sp)
 1000f5c:	df000017 	ldw	fp,0(sp)
 1000f60:	dec00204 	addi	sp,sp,8
 1000f64:	f800283a 	ret

01000f68 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 1000f68:	defffc04 	addi	sp,sp,-16
 1000f6c:	dfc00315 	stw	ra,12(sp)
 1000f70:	df000215 	stw	fp,8(sp)
 1000f74:	df000204 	addi	fp,sp,8
 1000f78:	e13ffe15 	stw	r4,-8(fp)
 1000f7c:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 1000f80:	10045940 	call	1004594 <xTaskIncrementTick>
 1000f84:	10000126 	beq	r2,zero,1000f8c <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 1000f88:	10047440 	call	1004744 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f8c:	00ffff84 	movi	r3,-2
 1000f90:	00800804 	movi	r2,32
 1000f94:	10c00035 	stwio	r3,0(r2)
}
 1000f98:	0001883a 	nop
 1000f9c:	e037883a 	mov	sp,fp
 1000fa0:	dfc00117 	ldw	ra,4(sp)
 1000fa4:	df000017 	ldw	fp,0(sp)
 1000fa8:	dec00204 	addi	sp,sp,8
 1000fac:	f800283a 	ret

01000fb0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 1000fb0:	defff704 	addi	sp,sp,-36
 1000fb4:	dfc00815 	stw	ra,32(sp)
 1000fb8:	df000715 	stw	fp,28(sp)
 1000fbc:	df000704 	addi	fp,sp,28
 1000fc0:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 1000fc4:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 1000fc8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 1000fcc:	d0a71217 	ldw	r2,-25528(gp)
 1000fd0:	1000031e 	bne	r2,zero,1000fe0 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 1000fd4:	10012900 	call	1001290 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 1000fd8:	00800044 	movi	r2,1
 1000fdc:	d0a71215 	stw	r2,-25528(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 1000fe0:	e0bfff17 	ldw	r2,-4(fp)
 1000fe4:	10000d26 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 1000fe8:	00800204 	movi	r2,8
 1000fec:	10bfffcc 	andi	r2,r2,65535
 1000ff0:	e0ffff17 	ldw	r3,-4(fp)
 1000ff4:	1885883a 	add	r2,r3,r2
 1000ff8:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 1000ffc:	e0bfff17 	ldw	r2,-4(fp)
 1001000:	108000cc 	andi	r2,r2,3
 1001004:	10000526 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 1001008:	e0ffff17 	ldw	r3,-4(fp)
 100100c:	00bfff04 	movi	r2,-4
 1001010:	1884703a 	and	r2,r3,r2
 1001014:	10800104 	addi	r2,r2,4
 1001018:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 100101c:	e0bfff17 	ldw	r2,-4(fp)
 1001020:	10005126 	beq	r2,zero,1001168 <pvPortMalloc+0x1b8>
 1001024:	e0ffff17 	ldw	r3,-4(fp)
 1001028:	00802034 	movhi	r2,128
 100102c:	10bffec4 	addi	r2,r2,-5
 1001030:	10c04d36 	bltu	r2,r3,1001168 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 1001034:	d0a70e04 	addi	r2,gp,-25544
 1001038:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 100103c:	d0a70e17 	ldw	r2,-25544(gp)
 1001040:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 1001044:	00000506 	br	100105c <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 1001048:	e0bff917 	ldw	r2,-28(fp)
 100104c:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 1001050:	e0bff917 	ldw	r2,-28(fp)
 1001054:	10800017 	ldw	r2,0(r2)
 1001058:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 100105c:	e0bff917 	ldw	r2,-28(fp)
 1001060:	10c00117 	ldw	r3,4(r2)
 1001064:	e0bfff17 	ldw	r2,-4(fp)
 1001068:	1880032e 	bgeu	r3,r2,1001078 <pvPortMalloc+0xc8>
 100106c:	e0bff917 	ldw	r2,-28(fp)
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	103ff41e 	bne	r2,zero,1001048 <__alt_data_end+0xff001048>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 1001078:	e0fff917 	ldw	r3,-28(fp)
 100107c:	d0a71004 	addi	r2,gp,-25536
 1001080:	18803926 	beq	r3,r2,1001168 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 1001084:	e0bffa17 	ldw	r2,-24(fp)
 1001088:	10c00017 	ldw	r3,0(r2)
 100108c:	00800204 	movi	r2,8
 1001090:	10bfffcc 	andi	r2,r2,65535
 1001094:	1885883a 	add	r2,r3,r2
 1001098:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 100109c:	e0bff917 	ldw	r2,-28(fp)
 10010a0:	10c00017 	ldw	r3,0(r2)
 10010a4:	e0bffa17 	ldw	r2,-24(fp)
 10010a8:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 10010ac:	e0bff917 	ldw	r2,-28(fp)
 10010b0:	10c00117 	ldw	r3,4(r2)
 10010b4:	e0bfff17 	ldw	r2,-4(fp)
 10010b8:	1887c83a 	sub	r3,r3,r2
 10010bc:	00800204 	movi	r2,8
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1085883a 	add	r2,r2,r2
 10010c8:	10c0222e 	bgeu	r2,r3,1001154 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 10010cc:	e0fff917 	ldw	r3,-28(fp)
 10010d0:	e0bfff17 	ldw	r2,-4(fp)
 10010d4:	1885883a 	add	r2,r3,r2
 10010d8:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 10010dc:	e0bff917 	ldw	r2,-28(fp)
 10010e0:	10c00117 	ldw	r3,4(r2)
 10010e4:	e0bfff17 	ldw	r2,-4(fp)
 10010e8:	1887c83a 	sub	r3,r3,r2
 10010ec:	e0bffd17 	ldw	r2,-12(fp)
 10010f0:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 10010f4:	e0bff917 	ldw	r2,-28(fp)
 10010f8:	e0ffff17 	ldw	r3,-4(fp)
 10010fc:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 1001100:	e0bffd17 	ldw	r2,-12(fp)
 1001104:	10800117 	ldw	r2,4(r2)
 1001108:	e0bffe15 	stw	r2,-8(fp)
 100110c:	d0a70e04 	addi	r2,gp,-25544
 1001110:	e0bffc15 	stw	r2,-16(fp)
 1001114:	00000306 	br	1001124 <pvPortMalloc+0x174>
 1001118:	e0bffc17 	ldw	r2,-16(fp)
 100111c:	10800017 	ldw	r2,0(r2)
 1001120:	e0bffc15 	stw	r2,-16(fp)
 1001124:	e0bffc17 	ldw	r2,-16(fp)
 1001128:	10800017 	ldw	r2,0(r2)
 100112c:	10c00117 	ldw	r3,4(r2)
 1001130:	e0bffe17 	ldw	r2,-8(fp)
 1001134:	18bff836 	bltu	r3,r2,1001118 <__alt_data_end+0xff001118>
 1001138:	e0bffc17 	ldw	r2,-16(fp)
 100113c:	10c00017 	ldw	r3,0(r2)
 1001140:	e0bffd17 	ldw	r2,-12(fp)
 1001144:	10c00015 	stw	r3,0(r2)
 1001148:	e0bffc17 	ldw	r2,-16(fp)
 100114c:	e0fffd17 	ldw	r3,-12(fp)
 1001150:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 1001154:	d0e00117 	ldw	r3,-32764(gp)
 1001158:	e0bff917 	ldw	r2,-28(fp)
 100115c:	10800117 	ldw	r2,4(r2)
 1001160:	1885c83a 	sub	r2,r3,r2
 1001164:	d0a00115 	stw	r2,-32764(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1001168:	10043880 	call	1004388 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 100116c:	e0bffb17 	ldw	r2,-20(fp)
}
 1001170:	e037883a 	mov	sp,fp
 1001174:	dfc00117 	ldw	ra,4(sp)
 1001178:	df000017 	ldw	fp,0(sp)
 100117c:	dec00204 	addi	sp,sp,8
 1001180:	f800283a 	ret

01001184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1001184:	defff904 	addi	sp,sp,-28
 1001188:	dfc00615 	stw	ra,24(sp)
 100118c:	df000515 	stw	fp,20(sp)
 1001190:	df000504 	addi	fp,sp,20
 1001194:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 1001198:	e0bfff17 	ldw	r2,-4(fp)
 100119c:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10002426 	beq	r2,zero,1001238 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 10011a8:	00800204 	movi	r2,8
 10011ac:	10bfffcc 	andi	r2,r2,65535
 10011b0:	0085c83a 	sub	r2,zero,r2
 10011b4:	e0fffc17 	ldw	r3,-16(fp)
 10011b8:	1885883a 	add	r2,r3,r2
 10011bc:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 10011c0:	e0bffc17 	ldw	r2,-16(fp)
 10011c4:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 10011c8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 10011cc:	e0bffd17 	ldw	r2,-12(fp)
 10011d0:	10800117 	ldw	r2,4(r2)
 10011d4:	e0bffe15 	stw	r2,-8(fp)
 10011d8:	d0a70e04 	addi	r2,gp,-25544
 10011dc:	e0bffb15 	stw	r2,-20(fp)
 10011e0:	00000306 	br	10011f0 <vPortFree+0x6c>
 10011e4:	e0bffb17 	ldw	r2,-20(fp)
 10011e8:	10800017 	ldw	r2,0(r2)
 10011ec:	e0bffb15 	stw	r2,-20(fp)
 10011f0:	e0bffb17 	ldw	r2,-20(fp)
 10011f4:	10800017 	ldw	r2,0(r2)
 10011f8:	10c00117 	ldw	r3,4(r2)
 10011fc:	e0bffe17 	ldw	r2,-8(fp)
 1001200:	18bff836 	bltu	r3,r2,10011e4 <__alt_data_end+0xff0011e4>
 1001204:	e0bffb17 	ldw	r2,-20(fp)
 1001208:	10c00017 	ldw	r3,0(r2)
 100120c:	e0bffd17 	ldw	r2,-12(fp)
 1001210:	10c00015 	stw	r3,0(r2)
 1001214:	e0bffb17 	ldw	r2,-20(fp)
 1001218:	e0fffd17 	ldw	r3,-12(fp)
 100121c:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 1001220:	e0bffd17 	ldw	r2,-12(fp)
 1001224:	10c00117 	ldw	r3,4(r2)
 1001228:	d0a00117 	ldw	r2,-32764(gp)
 100122c:	1885883a 	add	r2,r3,r2
 1001230:	d0a00115 	stw	r2,-32764(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 1001234:	10043880 	call	1004388 <xTaskResumeAll>
	}
}
 1001238:	0001883a 	nop
 100123c:	e037883a 	mov	sp,fp
 1001240:	dfc00117 	ldw	ra,4(sp)
 1001244:	df000017 	ldw	fp,0(sp)
 1001248:	dec00204 	addi	sp,sp,8
 100124c:	f800283a 	ret

01001250 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 1001250:	deffff04 	addi	sp,sp,-4
 1001254:	df000015 	stw	fp,0(sp)
 1001258:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 100125c:	d0a00117 	ldw	r2,-32764(gp)
}
 1001260:	e037883a 	mov	sp,fp
 1001264:	df000017 	ldw	fp,0(sp)
 1001268:	dec00104 	addi	sp,sp,4
 100126c:	f800283a 	ret

01001270 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 1001270:	deffff04 	addi	sp,sp,-4
 1001274:	df000015 	stw	fp,0(sp)
 1001278:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 100127c:	0001883a 	nop
 1001280:	e037883a 	mov	sp,fp
 1001284:	df000017 	ldw	fp,0(sp)
 1001288:	dec00104 	addi	sp,sp,4
 100128c:	f800283a 	ret

01001290 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 1001290:	defffd04 	addi	sp,sp,-12
 1001294:	df000215 	stw	fp,8(sp)
 1001298:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 100129c:	008040b4 	movhi	r2,258
 10012a0:	10ba6904 	addi	r2,r2,-5724
 10012a4:	00ffff04 	movi	r3,-4
 10012a8:	10c4703a 	and	r2,r2,r3
 10012ac:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 10012b0:	e0bffe17 	ldw	r2,-8(fp)
 10012b4:	d0a70e15 	stw	r2,-25544(gp)
	xStart.xBlockSize = ( size_t ) 0;
 10012b8:	d0270f15 	stw	zero,-25540(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 10012bc:	00802034 	movhi	r2,128
 10012c0:	10bfff04 	addi	r2,r2,-4
 10012c4:	d0a71115 	stw	r2,-25532(gp)
	xEnd.pxNextFreeBlock = NULL;
 10012c8:	d0271015 	stw	zero,-25536(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 10012d4:	e0ffff17 	ldw	r3,-4(fp)
 10012d8:	00802034 	movhi	r2,128
 10012dc:	10bfff04 	addi	r2,r2,-4
 10012e0:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 10012e4:	e0bfff17 	ldw	r2,-4(fp)
 10012e8:	d0e71004 	addi	r3,gp,-25536
 10012ec:	10c00015 	stw	r3,0(r2)
}
 10012f0:	0001883a 	nop
 10012f4:	e037883a 	mov	sp,fp
 10012f8:	df000017 	ldw	fp,0(sp)
 10012fc:	dec00104 	addi	sp,sp,4
 1001300:	f800283a 	ret

01001304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 1001304:	defffb04 	addi	sp,sp,-20
 1001308:	dfc00415 	stw	ra,16(sp)
 100130c:	df000315 	stw	fp,12(sp)
 1001310:	df000304 	addi	fp,sp,12
 1001314:	e13ffe15 	stw	r4,-8(fp)
 1001318:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 100131c:	e0bffe17 	ldw	r2,-8(fp)
 1001320:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1001324:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001328:	e0bffd17 	ldw	r2,-12(fp)
 100132c:	10c00017 	ldw	r3,0(r2)
 1001330:	e0bffd17 	ldw	r2,-12(fp)
 1001334:	11000f17 	ldw	r4,60(r2)
 1001338:	e0bffd17 	ldw	r2,-12(fp)
 100133c:	10801017 	ldw	r2,64(r2)
 1001340:	2085383a 	mul	r2,r4,r2
 1001344:	1887883a 	add	r3,r3,r2
 1001348:	e0bffd17 	ldw	r2,-12(fp)
 100134c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1001350:	e0bffd17 	ldw	r2,-12(fp)
 1001354:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 1001358:	e0bffd17 	ldw	r2,-12(fp)
 100135c:	10c00017 	ldw	r3,0(r2)
 1001360:	e0bffd17 	ldw	r2,-12(fp)
 1001364:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001368:	e0bffd17 	ldw	r2,-12(fp)
 100136c:	10c00017 	ldw	r3,0(r2)
 1001370:	e0bffd17 	ldw	r2,-12(fp)
 1001374:	10800f17 	ldw	r2,60(r2)
 1001378:	113fffc4 	addi	r4,r2,-1
 100137c:	e0bffd17 	ldw	r2,-12(fp)
 1001380:	10801017 	ldw	r2,64(r2)
 1001384:	2085383a 	mul	r2,r4,r2
 1001388:	1887883a 	add	r3,r3,r2
 100138c:	e0bffd17 	ldw	r2,-12(fp)
 1001390:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 1001394:	e0bffd17 	ldw	r2,-12(fp)
 1001398:	00ffffc4 	movi	r3,-1
 100139c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 10013a0:	e0bffd17 	ldw	r2,-12(fp)
 10013a4:	00ffffc4 	movi	r3,-1
 10013a8:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 10013ac:	e0bfff17 	ldw	r2,-4(fp)
 10013b0:	10000a1e 	bne	r2,zero,10013dc <xQueueGenericReset+0xd8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10013b4:	e0bffd17 	ldw	r2,-12(fp)
 10013b8:	10800417 	ldw	r2,16(r2)
 10013bc:	10000f26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10013c0:	e0bffd17 	ldw	r2,-12(fp)
 10013c4:	10800404 	addi	r2,r2,16
 10013c8:	1009883a 	mov	r4,r2
 10013cc:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10013d0:	10000a26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
 10013d4:	003b683a 	trap	0
 10013d8:	00000806 	br	10013fc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 10013dc:	e0bffd17 	ldw	r2,-12(fp)
 10013e0:	10800404 	addi	r2,r2,16
 10013e4:	1009883a 	mov	r4,r2
 10013e8:	1000aec0 	call	1000aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 10013ec:	e0bffd17 	ldw	r2,-12(fp)
 10013f0:	10800904 	addi	r2,r2,36
 10013f4:	1009883a 	mov	r4,r2
 10013f8:	1000aec0 	call	1000aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 10013fc:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 1001400:	00800044 	movi	r2,1
}
 1001404:	e037883a 	mov	sp,fp
 1001408:	dfc00117 	ldw	ra,4(sp)
 100140c:	df000017 	ldw	fp,0(sp)
 1001410:	dec00204 	addi	sp,sp,8
 1001414:	f800283a 	ret

01001418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 1001418:	defff704 	addi	sp,sp,-36
 100141c:	dfc00815 	stw	ra,32(sp)
 1001420:	df000715 	stw	fp,28(sp)
 1001424:	df000704 	addi	fp,sp,28
 1001428:	e13ffd15 	stw	r4,-12(fp)
 100142c:	e17ffe15 	stw	r5,-8(fp)
 1001430:	3005883a 	mov	r2,r6
 1001434:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 1001438:	e0bffe17 	ldw	r2,-8(fp)
 100143c:	1000021e 	bne	r2,zero,1001448 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 1001440:	e03ffa15 	stw	zero,-24(fp)
 1001444:	00000406 	br	1001458 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1001448:	e0fffd17 	ldw	r3,-12(fp)
 100144c:	e0bffe17 	ldw	r2,-8(fp)
 1001450:	1885383a 	mul	r2,r3,r2
 1001454:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 1001458:	e0bffa17 	ldw	r2,-24(fp)
 100145c:	10801204 	addi	r2,r2,72
 1001460:	1009883a 	mov	r4,r2
 1001464:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1001468:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 100146c:	e0bffb17 	ldw	r2,-20(fp)
 1001470:	10000d26 	beq	r2,zero,10014a8 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 1001474:	e0bffb17 	ldw	r2,-20(fp)
 1001478:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 100147c:	e0bffc17 	ldw	r2,-16(fp)
 1001480:	10801204 	addi	r2,r2,72
 1001484:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 1001488:	e0ffff03 	ldbu	r3,-4(fp)
 100148c:	e0bffb17 	ldw	r2,-20(fp)
 1001490:	d8800015 	stw	r2,0(sp)
 1001494:	180f883a 	mov	r7,r3
 1001498:	e1bffc17 	ldw	r6,-16(fp)
 100149c:	e17ffe17 	ldw	r5,-8(fp)
 10014a0:	e13ffd17 	ldw	r4,-12(fp)
 10014a4:	10014c00 	call	10014c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 10014a8:	e0bffb17 	ldw	r2,-20(fp)
	}
 10014ac:	e037883a 	mov	sp,fp
 10014b0:	dfc00117 	ldw	ra,4(sp)
 10014b4:	df000017 	ldw	fp,0(sp)
 10014b8:	dec00204 	addi	sp,sp,8
 10014bc:	f800283a 	ret

010014c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 10014c0:	defffa04 	addi	sp,sp,-24
 10014c4:	dfc00515 	stw	ra,20(sp)
 10014c8:	df000415 	stw	fp,16(sp)
 10014cc:	df000404 	addi	fp,sp,16
 10014d0:	e13ffc15 	stw	r4,-16(fp)
 10014d4:	e17ffd15 	stw	r5,-12(fp)
 10014d8:	e1bffe15 	stw	r6,-8(fp)
 10014dc:	3805883a 	mov	r2,r7
 10014e0:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 10014e4:	e0bffd17 	ldw	r2,-12(fp)
 10014e8:	1000041e 	bne	r2,zero,10014fc <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 10014ec:	e0800217 	ldw	r2,8(fp)
 10014f0:	e0c00217 	ldw	r3,8(fp)
 10014f4:	10c00015 	stw	r3,0(r2)
 10014f8:	00000306 	br	1001508 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 10014fc:	e0800217 	ldw	r2,8(fp)
 1001500:	e0fffe17 	ldw	r3,-8(fp)
 1001504:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 1001508:	e0800217 	ldw	r2,8(fp)
 100150c:	e0fffc17 	ldw	r3,-16(fp)
 1001510:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 1001514:	e0800217 	ldw	r2,8(fp)
 1001518:	e0fffd17 	ldw	r3,-12(fp)
 100151c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1001520:	01400044 	movi	r5,1
 1001524:	e1000217 	ldw	r4,8(fp)
 1001528:	10013040 	call	1001304 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 100152c:	0001883a 	nop
 1001530:	e037883a 	mov	sp,fp
 1001534:	dfc00117 	ldw	ra,4(sp)
 1001538:	df000017 	ldw	fp,0(sp)
 100153c:	dec00204 	addi	sp,sp,8
 1001540:	f800283a 	ret

01001544 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 1001544:	defffd04 	addi	sp,sp,-12
 1001548:	dfc00215 	stw	ra,8(sp)
 100154c:	df000115 	stw	fp,4(sp)
 1001550:	df000104 	addi	fp,sp,4
 1001554:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	10000b26 	beq	r2,zero,100158c <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 1001560:	e0bfff17 	ldw	r2,-4(fp)
 1001564:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1001568:	e0bfff17 	ldw	r2,-4(fp)
 100156c:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 1001570:	e0bfff17 	ldw	r2,-4(fp)
 1001574:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 1001578:	000f883a 	mov	r7,zero
 100157c:	000d883a 	mov	r6,zero
 1001580:	000b883a 	mov	r5,zero
 1001584:	e13fff17 	ldw	r4,-4(fp)
 1001588:	10017840 	call	1001784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 100158c:	0001883a 	nop
 1001590:	e037883a 	mov	sp,fp
 1001594:	dfc00117 	ldw	ra,4(sp)
 1001598:	df000017 	ldw	fp,0(sp)
 100159c:	dec00204 	addi	sp,sp,8
 10015a0:	f800283a 	ret

010015a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 10015a4:	defffa04 	addi	sp,sp,-24
 10015a8:	dfc00515 	stw	ra,20(sp)
 10015ac:	df000415 	stw	fp,16(sp)
 10015b0:	df000404 	addi	fp,sp,16
 10015b4:	2005883a 	mov	r2,r4
 10015b8:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 10015bc:	00800044 	movi	r2,1
 10015c0:	e0bffc15 	stw	r2,-16(fp)
 10015c4:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 10015c8:	e0bfff03 	ldbu	r2,-4(fp)
 10015cc:	100d883a 	mov	r6,r2
 10015d0:	e17ffd17 	ldw	r5,-12(fp)
 10015d4:	e13ffc17 	ldw	r4,-16(fp)
 10015d8:	10014180 	call	1001418 <xQueueGenericCreate>
 10015dc:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 10015e0:	e13ffe17 	ldw	r4,-8(fp)
 10015e4:	10015440 	call	1001544 <prvInitialiseMutex>

		return xNewQueue;
 10015e8:	e0bffe17 	ldw	r2,-8(fp)
	}
 10015ec:	e037883a 	mov	sp,fp
 10015f0:	dfc00117 	ldw	ra,4(sp)
 10015f4:	df000017 	ldw	fp,0(sp)
 10015f8:	dec00204 	addi	sp,sp,8
 10015fc:	f800283a 	ret

01001600 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 1001600:	defffa04 	addi	sp,sp,-24
 1001604:	dfc00515 	stw	ra,20(sp)
 1001608:	df000415 	stw	fp,16(sp)
 100160c:	dc000315 	stw	r16,12(sp)
 1001610:	df000404 	addi	fp,sp,16
 1001614:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1001618:	e0bffe17 	ldw	r2,-8(fp)
 100161c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 1001620:	e0bffd17 	ldw	r2,-12(fp)
 1001624:	14000217 	ldw	r16,8(r2)
 1001628:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 100162c:	8080101e 	bne	r16,r2,1001670 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 1001630:	e0bffd17 	ldw	r2,-12(fp)
 1001634:	10800317 	ldw	r2,12(r2)
 1001638:	10ffffc4 	addi	r3,r2,-1
 100163c:	e0bffd17 	ldw	r2,-12(fp)
 1001640:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 1001644:	e0bffd17 	ldw	r2,-12(fp)
 1001648:	10800317 	ldw	r2,12(r2)
 100164c:	1000051e 	bne	r2,zero,1001664 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 1001650:	000f883a 	mov	r7,zero
 1001654:	000d883a 	mov	r6,zero
 1001658:	000b883a 	mov	r5,zero
 100165c:	e13ffd17 	ldw	r4,-12(fp)
 1001660:	10017840 	call	1001784 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 1001664:	00800044 	movi	r2,1
 1001668:	e0bffc15 	stw	r2,-16(fp)
 100166c:	00000106 	br	1001674 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 1001670:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 1001674:	e0bffc17 	ldw	r2,-16(fp)
	}
 1001678:	e6ffff04 	addi	sp,fp,-4
 100167c:	dfc00217 	ldw	ra,8(sp)
 1001680:	df000117 	ldw	fp,4(sp)
 1001684:	dc000017 	ldw	r16,0(sp)
 1001688:	dec00304 	addi	sp,sp,12
 100168c:	f800283a 	ret

01001690 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 1001690:	defff904 	addi	sp,sp,-28
 1001694:	dfc00615 	stw	ra,24(sp)
 1001698:	df000515 	stw	fp,20(sp)
 100169c:	dc000415 	stw	r16,16(sp)
 10016a0:	df000504 	addi	fp,sp,20
 10016a4:	e13ffd15 	stw	r4,-12(fp)
 10016a8:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 10016ac:	e0bffd17 	ldw	r2,-12(fp)
 10016b0:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 10016b4:	e0bffc17 	ldw	r2,-16(fp)
 10016b8:	14000217 	ldw	r16,8(r2)
 10016bc:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 10016c0:	8080081e 	bne	r16,r2,10016e4 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016c4:	e0bffc17 	ldw	r2,-16(fp)
 10016c8:	10800317 	ldw	r2,12(r2)
 10016cc:	10c00044 	addi	r3,r2,1
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 10016d8:	00800044 	movi	r2,1
 10016dc:	e0bffb15 	stw	r2,-20(fp)
 10016e0:	00000b06 	br	1001710 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 10016e4:	e17ffe17 	ldw	r5,-8(fp)
 10016e8:	e13ffc17 	ldw	r4,-16(fp)
 10016ec:	1001ca40 	call	1001ca4 <xQueueSemaphoreTake>
 10016f0:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 10016f4:	e0bffb17 	ldw	r2,-20(fp)
 10016f8:	10000526 	beq	r2,zero,1001710 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016fc:	e0bffc17 	ldw	r2,-16(fp)
 1001700:	10800317 	ldw	r2,12(r2)
 1001704:	10c00044 	addi	r3,r2,1
 1001708:	e0bffc17 	ldw	r2,-16(fp)
 100170c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 1001710:	e0bffb17 	ldw	r2,-20(fp)
	}
 1001714:	e6ffff04 	addi	sp,fp,-4
 1001718:	dfc00217 	ldw	ra,8(sp)
 100171c:	df000117 	ldw	fp,4(sp)
 1001720:	dc000017 	ldw	r16,0(sp)
 1001724:	dec00304 	addi	sp,sp,12
 1001728:	f800283a 	ret

0100172c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 100172c:	defffb04 	addi	sp,sp,-20
 1001730:	dfc00415 	stw	ra,16(sp)
 1001734:	df000315 	stw	fp,12(sp)
 1001738:	df000304 	addi	fp,sp,12
 100173c:	e13ffe15 	stw	r4,-8(fp)
 1001740:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 1001744:	01800084 	movi	r6,2
 1001748:	000b883a 	mov	r5,zero
 100174c:	e13ffe17 	ldw	r4,-8(fp)
 1001750:	10014180 	call	1001418 <xQueueGenericCreate>
 1001754:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 1001758:	e0bffd17 	ldw	r2,-12(fp)
 100175c:	10000326 	beq	r2,zero,100176c <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1001760:	e0bffd17 	ldw	r2,-12(fp)
 1001764:	e0ffff17 	ldw	r3,-4(fp)
 1001768:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 100176c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1001770:	e037883a 	mov	sp,fp
 1001774:	dfc00117 	ldw	ra,4(sp)
 1001778:	df000017 	ldw	fp,0(sp)
 100177c:	dec00204 	addi	sp,sp,8
 1001780:	f800283a 	ret

01001784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 1001784:	defff504 	addi	sp,sp,-44
 1001788:	dfc00a15 	stw	ra,40(sp)
 100178c:	df000915 	stw	fp,36(sp)
 1001790:	df000904 	addi	fp,sp,36
 1001794:	e13ffc15 	stw	r4,-16(fp)
 1001798:	e17ffd15 	stw	r5,-12(fp)
 100179c:	e1bffe15 	stw	r6,-8(fp)
 10017a0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 10017a4:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 10017a8:	e0bffc17 	ldw	r2,-16(fp)
 10017ac:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 10017b0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 10017b4:	e0bff817 	ldw	r2,-32(fp)
 10017b8:	10c00e17 	ldw	r3,56(r2)
 10017bc:	e0bff817 	ldw	r2,-32(fp)
 10017c0:	10800f17 	ldw	r2,60(r2)
 10017c4:	18800336 	bltu	r3,r2,10017d4 <xQueueGenericSend+0x50>
 10017c8:	e0bfff17 	ldw	r2,-4(fp)
 10017cc:	10800098 	cmpnei	r2,r2,2
 10017d0:	1000151e 	bne	r2,zero,1001828 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 10017d4:	e1bfff17 	ldw	r6,-4(fp)
 10017d8:	e17ffd17 	ldw	r5,-12(fp)
 10017dc:	e13ff817 	ldw	r4,-32(fp)
 10017e0:	100231c0 	call	100231c <prvCopyDataToQueue>
 10017e4:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10017e8:	e0bff817 	ldw	r2,-32(fp)
 10017ec:	10800917 	ldw	r2,36(r2)
 10017f0:	10000726 	beq	r2,zero,1001810 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10017f4:	e0bff817 	ldw	r2,-32(fp)
 10017f8:	10800904 	addi	r2,r2,36
 10017fc:	1009883a 	mov	r4,r2
 1001800:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001804:	10000526 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 1001808:	003b683a 	trap	0
 100180c:	00000306 	br	100181c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 1001810:	e0bff917 	ldw	r2,-28(fp)
 1001814:	10000126 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 1001818:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 100181c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001820:	00800044 	movi	r2,1
 1001824:	00003f06 	br	1001924 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001828:	e0bffe17 	ldw	r2,-8(fp)
 100182c:	1000031e 	bne	r2,zero,100183c <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001830:	10052c40 	call	10052c4 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1001834:	0005883a 	mov	r2,zero
 1001838:	00003a06 	br	1001924 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 100183c:	e0bff717 	ldw	r2,-36(fp)
 1001840:	1000051e 	bne	r2,zero,1001858 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001844:	e0bffa04 	addi	r2,fp,-24
 1001848:	1009883a 	mov	r4,r2
 100184c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001850:	00800044 	movi	r2,1
 1001854:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001858:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 100185c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001860:	10052700 	call	1005270 <vTaskEnterCritical>
 1001864:	e0bff817 	ldw	r2,-32(fp)
 1001868:	10801103 	ldbu	r2,68(r2)
 100186c:	10803fcc 	andi	r2,r2,255
 1001870:	1080201c 	xori	r2,r2,128
 1001874:	10bfe004 	addi	r2,r2,-128
 1001878:	10bfffd8 	cmpnei	r2,r2,-1
 100187c:	1000021e 	bne	r2,zero,1001888 <xQueueGenericSend+0x104>
 1001880:	e0bff817 	ldw	r2,-32(fp)
 1001884:	10001105 	stb	zero,68(r2)
 1001888:	e0bff817 	ldw	r2,-32(fp)
 100188c:	10801143 	ldbu	r2,69(r2)
 1001890:	10803fcc 	andi	r2,r2,255
 1001894:	1080201c 	xori	r2,r2,128
 1001898:	10bfe004 	addi	r2,r2,-128
 100189c:	10bfffd8 	cmpnei	r2,r2,-1
 10018a0:	1000021e 	bne	r2,zero,10018ac <xQueueGenericSend+0x128>
 10018a4:	e0bff817 	ldw	r2,-32(fp)
 10018a8:	10001145 	stb	zero,69(r2)
 10018ac:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 10018b0:	e0fffe04 	addi	r3,fp,-8
 10018b4:	e0bffa04 	addi	r2,fp,-24
 10018b8:	180b883a 	mov	r5,r3
 10018bc:	1009883a 	mov	r4,r2
 10018c0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 10018c4:	1000131e 	bne	r2,zero,1001914 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 10018c8:	e13ff817 	ldw	r4,-32(fp)
 10018cc:	10026d00 	call	10026d0 <prvIsQueueFull>
 10018d0:	10000c26 	beq	r2,zero,1001904 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 10018d4:	e0bff817 	ldw	r2,-32(fp)
 10018d8:	10800404 	addi	r2,r2,16
 10018dc:	e0fffe17 	ldw	r3,-8(fp)
 10018e0:	180b883a 	mov	r5,r3
 10018e4:	1009883a 	mov	r4,r2
 10018e8:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 10018ec:	e13ff817 	ldw	r4,-32(fp)
 10018f0:	10025440 	call	1002544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 10018f4:	10043880 	call	1004388 <xTaskResumeAll>
 10018f8:	103fad1e 	bne	r2,zero,10017b0 <__alt_data_end+0xff0017b0>
				{
					portYIELD_WITHIN_API();
 10018fc:	003b683a 	trap	0
 1001900:	003fab06 	br	10017b0 <__alt_data_end+0xff0017b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1001904:	e13ff817 	ldw	r4,-32(fp)
 1001908:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100190c:	10043880 	call	1004388 <xTaskResumeAll>
 1001910:	003fa706 	br	10017b0 <__alt_data_end+0xff0017b0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 1001914:	e13ff817 	ldw	r4,-32(fp)
 1001918:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100191c:	10043880 	call	1004388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 1001920:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 1001924:	e037883a 	mov	sp,fp
 1001928:	dfc00117 	ldw	ra,4(sp)
 100192c:	df000017 	ldw	fp,0(sp)
 1001930:	dec00204 	addi	sp,sp,8
 1001934:	f800283a 	ret

01001938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 1001938:	defff604 	addi	sp,sp,-40
 100193c:	dfc00915 	stw	ra,36(sp)
 1001940:	df000815 	stw	fp,32(sp)
 1001944:	df000804 	addi	fp,sp,32
 1001948:	e13ffc15 	stw	r4,-16(fp)
 100194c:	e17ffd15 	stw	r5,-12(fp)
 1001950:	e1bffe15 	stw	r6,-8(fp)
 1001954:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001958:	e0bffc17 	ldw	r2,-16(fp)
 100195c:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001960:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1001964:	e0bff917 	ldw	r2,-28(fp)
 1001968:	10c00e17 	ldw	r3,56(r2)
 100196c:	e0bff917 	ldw	r2,-28(fp)
 1001970:	10800f17 	ldw	r2,60(r2)
 1001974:	18800336 	bltu	r3,r2,1001984 <xQueueGenericSendFromISR+0x4c>
 1001978:	e0bfff17 	ldw	r2,-4(fp)
 100197c:	10800098 	cmpnei	r2,r2,2
 1001980:	1000201e 	bne	r2,zero,1001a04 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001984:	e0bff917 	ldw	r2,-28(fp)
 1001988:	10801143 	ldbu	r2,69(r2)
 100198c:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1001990:	e1bfff17 	ldw	r6,-4(fp)
 1001994:	e17ffd17 	ldw	r5,-12(fp)
 1001998:	e13ff917 	ldw	r4,-28(fp)
 100199c:	100231c0 	call	100231c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 10019a0:	e0bffb07 	ldb	r2,-20(fp)
 10019a4:	10bfffd8 	cmpnei	r2,r2,-1
 10019a8:	10000e1e 	bne	r2,zero,10019e4 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10019ac:	e0bff917 	ldw	r2,-28(fp)
 10019b0:	10800917 	ldw	r2,36(r2)
 10019b4:	10001026 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10019b8:	e0bff917 	ldw	r2,-28(fp)
 10019bc:	10800904 	addi	r2,r2,36
 10019c0:	1009883a 	mov	r4,r2
 10019c4:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10019c8:	10000b26 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 10019cc:	e0bffe17 	ldw	r2,-8(fp)
 10019d0:	10000926 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 10019d4:	e0bffe17 	ldw	r2,-8(fp)
 10019d8:	00c00044 	movi	r3,1
 10019dc:	10c00015 	stw	r3,0(r2)
 10019e0:	00000506 	br	10019f8 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 10019e4:	e0bffb03 	ldbu	r2,-20(fp)
 10019e8:	10800044 	addi	r2,r2,1
 10019ec:	1007883a 	mov	r3,r2
 10019f0:	e0bff917 	ldw	r2,-28(fp)
 10019f4:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 10019f8:	00800044 	movi	r2,1
 10019fc:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 1001a00:	00000106 	br	1001a08 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001a04:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001a08:	e0bff817 	ldw	r2,-32(fp)
}
 1001a0c:	e037883a 	mov	sp,fp
 1001a10:	dfc00117 	ldw	ra,4(sp)
 1001a14:	df000017 	ldw	fp,0(sp)
 1001a18:	dec00204 	addi	sp,sp,8
 1001a1c:	f800283a 	ret

01001a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1001a20:	defff704 	addi	sp,sp,-36
 1001a24:	dfc00815 	stw	ra,32(sp)
 1001a28:	df000715 	stw	fp,28(sp)
 1001a2c:	df000704 	addi	fp,sp,28
 1001a30:	e13ffe15 	stw	r4,-8(fp)
 1001a34:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001a38:	e0bffe17 	ldw	r2,-8(fp)
 1001a3c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001a40:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001a44:	e0bffa17 	ldw	r2,-24(fp)
 1001a48:	10800e17 	ldw	r2,56(r2)
 1001a4c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 1001a50:	e0bffa17 	ldw	r2,-24(fp)
 1001a54:	10800f17 	ldw	r2,60(r2)
 1001a58:	e0fffc17 	ldw	r3,-16(fp)
 1001a5c:	1880202e 	bgeu	r3,r2,1001ae0 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001a60:	e0bffa17 	ldw	r2,-24(fp)
 1001a64:	10801143 	ldbu	r2,69(r2)
 1001a68:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1001a6c:	e0bffc17 	ldw	r2,-16(fp)
 1001a70:	10c00044 	addi	r3,r2,1
 1001a74:	e0bffa17 	ldw	r2,-24(fp)
 1001a78:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 1001a7c:	e0bffd07 	ldb	r2,-12(fp)
 1001a80:	10bfffd8 	cmpnei	r2,r2,-1
 1001a84:	10000e1e 	bne	r2,zero,1001ac0 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001a88:	e0bffa17 	ldw	r2,-24(fp)
 1001a8c:	10800917 	ldw	r2,36(r2)
 1001a90:	10001026 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001a94:	e0bffa17 	ldw	r2,-24(fp)
 1001a98:	10800904 	addi	r2,r2,36
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001aa4:	10000b26 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 1001aa8:	e0bfff17 	ldw	r2,-4(fp)
 1001aac:	10000926 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 1001ab0:	e0bfff17 	ldw	r2,-4(fp)
 1001ab4:	00c00044 	movi	r3,1
 1001ab8:	10c00015 	stw	r3,0(r2)
 1001abc:	00000506 	br	1001ad4 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1001ac0:	e0bffd03 	ldbu	r2,-12(fp)
 1001ac4:	10800044 	addi	r2,r2,1
 1001ac8:	1007883a 	mov	r3,r2
 1001acc:	e0bffa17 	ldw	r2,-24(fp)
 1001ad0:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 1001ad4:	00800044 	movi	r2,1
 1001ad8:	e0bff915 	stw	r2,-28(fp)
 1001adc:	00000106 	br	1001ae4 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001ae0:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001ae4:	e0bff917 	ldw	r2,-28(fp)
}
 1001ae8:	e037883a 	mov	sp,fp
 1001aec:	dfc00117 	ldw	ra,4(sp)
 1001af0:	df000017 	ldw	fp,0(sp)
 1001af4:	dec00204 	addi	sp,sp,8
 1001af8:	f800283a 	ret

01001afc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001afc:	defff604 	addi	sp,sp,-40
 1001b00:	dfc00915 	stw	ra,36(sp)
 1001b04:	df000815 	stw	fp,32(sp)
 1001b08:	df000804 	addi	fp,sp,32
 1001b0c:	e13ffd15 	stw	r4,-12(fp)
 1001b10:	e17ffe15 	stw	r5,-8(fp)
 1001b14:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001b18:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001b1c:	e0bffd17 	ldw	r2,-12(fp)
 1001b20:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001b24:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001b28:	e0bff917 	ldw	r2,-28(fp)
 1001b2c:	10800e17 	ldw	r2,56(r2)
 1001b30:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001b34:	e0bffa17 	ldw	r2,-24(fp)
 1001b38:	10001326 	beq	r2,zero,1001b88 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001b3c:	e17ffe17 	ldw	r5,-8(fp)
 1001b40:	e13ff917 	ldw	r4,-28(fp)
 1001b44:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1001b48:	e0bffa17 	ldw	r2,-24(fp)
 1001b4c:	10ffffc4 	addi	r3,r2,-1
 1001b50:	e0bff917 	ldw	r2,-28(fp)
 1001b54:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001b58:	e0bff917 	ldw	r2,-28(fp)
 1001b5c:	10800417 	ldw	r2,16(r2)
 1001b60:	10000626 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001b64:	e0bff917 	ldw	r2,-28(fp)
 1001b68:	10800404 	addi	r2,r2,16
 1001b6c:	1009883a 	mov	r4,r2
 1001b70:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001b74:	10000126 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001b78:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001b7c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001b80:	00800044 	movi	r2,1
 1001b84:	00004206 	br	1001c90 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001b88:	e0bfff17 	ldw	r2,-4(fp)
 1001b8c:	1000031e 	bne	r2,zero,1001b9c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001b90:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001b94:	0005883a 	mov	r2,zero
 1001b98:	00003d06 	br	1001c90 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001b9c:	e0bff817 	ldw	r2,-32(fp)
 1001ba0:	1000051e 	bne	r2,zero,1001bb8 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001ba4:	e0bffb04 	addi	r2,fp,-20
 1001ba8:	1009883a 	mov	r4,r2
 1001bac:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001bb0:	00800044 	movi	r2,1
 1001bb4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001bb8:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001bbc:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001bc0:	10052700 	call	1005270 <vTaskEnterCritical>
 1001bc4:	e0bff917 	ldw	r2,-28(fp)
 1001bc8:	10801103 	ldbu	r2,68(r2)
 1001bcc:	10803fcc 	andi	r2,r2,255
 1001bd0:	1080201c 	xori	r2,r2,128
 1001bd4:	10bfe004 	addi	r2,r2,-128
 1001bd8:	10bfffd8 	cmpnei	r2,r2,-1
 1001bdc:	1000021e 	bne	r2,zero,1001be8 <xQueueReceive+0xec>
 1001be0:	e0bff917 	ldw	r2,-28(fp)
 1001be4:	10001105 	stb	zero,68(r2)
 1001be8:	e0bff917 	ldw	r2,-28(fp)
 1001bec:	10801143 	ldbu	r2,69(r2)
 1001bf0:	10803fcc 	andi	r2,r2,255
 1001bf4:	1080201c 	xori	r2,r2,128
 1001bf8:	10bfe004 	addi	r2,r2,-128
 1001bfc:	10bfffd8 	cmpnei	r2,r2,-1
 1001c00:	1000021e 	bne	r2,zero,1001c0c <xQueueReceive+0x110>
 1001c04:	e0bff917 	ldw	r2,-28(fp)
 1001c08:	10001145 	stb	zero,69(r2)
 1001c0c:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001c10:	e0ffff04 	addi	r3,fp,-4
 1001c14:	e0bffb04 	addi	r2,fp,-20
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	1009883a 	mov	r4,r2
 1001c20:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001c24:	1000131e 	bne	r2,zero,1001c74 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c28:	e13ff917 	ldw	r4,-28(fp)
 1001c2c:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c30:	10000c26 	beq	r2,zero,1001c64 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001c34:	e0bff917 	ldw	r2,-28(fp)
 1001c38:	10800904 	addi	r2,r2,36
 1001c3c:	e0ffff17 	ldw	r3,-4(fp)
 1001c40:	180b883a 	mov	r5,r3
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001c4c:	e13ff917 	ldw	r4,-28(fp)
 1001c50:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001c54:	10043880 	call	1004388 <xTaskResumeAll>
 1001c58:	103fb21e 	bne	r2,zero,1001b24 <__alt_data_end+0xff001b24>
				{
					portYIELD_WITHIN_API();
 1001c5c:	003b683a 	trap	0
 1001c60:	003fb006 	br	1001b24 <__alt_data_end+0xff001b24>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 1001c64:	e13ff917 	ldw	r4,-28(fp)
 1001c68:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001c6c:	10043880 	call	1004388 <xTaskResumeAll>
 1001c70:	003fac06 	br	1001b24 <__alt_data_end+0xff001b24>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 1001c74:	e13ff917 	ldw	r4,-28(fp)
 1001c78:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001c7c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c80:	e13ff917 	ldw	r4,-28(fp)
 1001c84:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c88:	103fa626 	beq	r2,zero,1001b24 <__alt_data_end+0xff001b24>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001c8c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001c90:	e037883a 	mov	sp,fp
 1001c94:	dfc00117 	ldw	ra,4(sp)
 1001c98:	df000017 	ldw	fp,0(sp)
 1001c9c:	dec00204 	addi	sp,sp,8
 1001ca0:	f800283a 	ret

01001ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 1001ca4:	defff504 	addi	sp,sp,-44
 1001ca8:	dfc00a15 	stw	ra,40(sp)
 1001cac:	df000915 	stw	fp,36(sp)
 1001cb0:	df000904 	addi	fp,sp,36
 1001cb4:	e13ffe15 	stw	r4,-8(fp)
 1001cb8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001cbc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001cc0:	e0bffe17 	ldw	r2,-8(fp)
 1001cc4:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 1001cc8:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001ccc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1001cd0:	e0bff917 	ldw	r2,-28(fp)
 1001cd4:	10800e17 	ldw	r2,56(r2)
 1001cd8:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1001cdc:	e0bffa17 	ldw	r2,-24(fp)
 1001ce0:	10001726 	beq	r2,zero,1001d40 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1001ce4:	e0bffa17 	ldw	r2,-24(fp)
 1001ce8:	10ffffc4 	addi	r3,r2,-1
 1001cec:	e0bff917 	ldw	r2,-28(fp)
 1001cf0:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001cf4:	e0bff917 	ldw	r2,-28(fp)
 1001cf8:	10800017 	ldw	r2,0(r2)
 1001cfc:	1000041e 	bne	r2,zero,1001d10 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 1001d00:	10053680 	call	1005368 <pvTaskIncrementMutexHeldCount>
 1001d04:	1007883a 	mov	r3,r2
 1001d08:	e0bff917 	ldw	r2,-28(fp)
 1001d0c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001d10:	e0bff917 	ldw	r2,-28(fp)
 1001d14:	10800417 	ldw	r2,16(r2)
 1001d18:	10000626 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001d1c:	e0bff917 	ldw	r2,-28(fp)
 1001d20:	10800404 	addi	r2,r2,16
 1001d24:	1009883a 	mov	r4,r2
 1001d28:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001d2c:	10000126 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001d30:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001d34:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001d38:	00800044 	movi	r2,1
 1001d3c:	00005806 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001d40:	e0bfff17 	ldw	r2,-4(fp)
 1001d44:	1000031e 	bne	r2,zero,1001d54 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 1001d48:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001d4c:	0005883a 	mov	r2,zero
 1001d50:	00005306 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001d54:	e0bff717 	ldw	r2,-36(fp)
 1001d58:	1000051e 	bne	r2,zero,1001d70 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001d5c:	e0bffc04 	addi	r2,fp,-16
 1001d60:	1009883a 	mov	r4,r2
 1001d64:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001d68:	00800044 	movi	r2,1
 1001d6c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001d70:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001d74:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001d78:	10052700 	call	1005270 <vTaskEnterCritical>
 1001d7c:	e0bff917 	ldw	r2,-28(fp)
 1001d80:	10801103 	ldbu	r2,68(r2)
 1001d84:	10803fcc 	andi	r2,r2,255
 1001d88:	1080201c 	xori	r2,r2,128
 1001d8c:	10bfe004 	addi	r2,r2,-128
 1001d90:	10bfffd8 	cmpnei	r2,r2,-1
 1001d94:	1000021e 	bne	r2,zero,1001da0 <xQueueSemaphoreTake+0xfc>
 1001d98:	e0bff917 	ldw	r2,-28(fp)
 1001d9c:	10001105 	stb	zero,68(r2)
 1001da0:	e0bff917 	ldw	r2,-28(fp)
 1001da4:	10801143 	ldbu	r2,69(r2)
 1001da8:	10803fcc 	andi	r2,r2,255
 1001dac:	1080201c 	xori	r2,r2,128
 1001db0:	10bfe004 	addi	r2,r2,-128
 1001db4:	10bfffd8 	cmpnei	r2,r2,-1
 1001db8:	1000021e 	bne	r2,zero,1001dc4 <xQueueSemaphoreTake+0x120>
 1001dbc:	e0bff917 	ldw	r2,-28(fp)
 1001dc0:	10001145 	stb	zero,69(r2)
 1001dc4:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001dc8:	e0ffff04 	addi	r3,fp,-4
 1001dcc:	e0bffc04 	addi	r2,fp,-16
 1001dd0:	180b883a 	mov	r5,r3
 1001dd4:	1009883a 	mov	r4,r2
 1001dd8:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001ddc:	10001d1e 	bne	r2,zero,1001e54 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001de0:	e13ff917 	ldw	r4,-28(fp)
 1001de4:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001de8:	10001626 	beq	r2,zero,1001e44 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001dec:	e0bff917 	ldw	r2,-28(fp)
 1001df0:	10800017 	ldw	r2,0(r2)
 1001df4:	1000071e 	bne	r2,zero,1001e14 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 1001df8:	10052700 	call	1005270 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 1001dfc:	e0bff917 	ldw	r2,-28(fp)
 1001e00:	10800217 	ldw	r2,8(r2)
 1001e04:	1009883a 	mov	r4,r2
 1001e08:	1004ef40 	call	1004ef4 <xTaskPriorityInherit>
 1001e0c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 1001e10:	10052c40 	call	10052c4 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001e14:	e0bff917 	ldw	r2,-28(fp)
 1001e18:	10800904 	addi	r2,r2,36
 1001e1c:	e0ffff17 	ldw	r3,-4(fp)
 1001e20:	180b883a 	mov	r5,r3
 1001e24:	1009883a 	mov	r4,r2
 1001e28:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001e2c:	e13ff917 	ldw	r4,-28(fp)
 1001e30:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001e34:	10043880 	call	1004388 <xTaskResumeAll>
 1001e38:	103fa41e 	bne	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				{
					portYIELD_WITHIN_API();
 1001e3c:	003b683a 	trap	0
 1001e40:	003fa206 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 1001e44:	e13ff917 	ldw	r4,-28(fp)
 1001e48:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001e4c:	10043880 	call	1004388 <xTaskResumeAll>
 1001e50:	003f9e06 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 1001e54:	e13ff917 	ldw	r4,-28(fp)
 1001e58:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001e5c:	10043880 	call	1004388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001e60:	e13ff917 	ldw	r4,-28(fp)
 1001e64:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001e68:	103f9826 	beq	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 1001e6c:	e0bff817 	ldw	r2,-32(fp)
 1001e70:	10000a26 	beq	r2,zero,1001e9c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 1001e74:	10052700 	call	1005270 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1001e78:	e13ff917 	ldw	r4,-28(fp)
 1001e7c:	10022cc0 	call	10022cc <prvGetDisinheritPriorityAfterTimeout>
 1001e80:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 1001e84:	e0bff917 	ldw	r2,-28(fp)
 1001e88:	10800217 	ldw	r2,8(r2)
 1001e8c:	e17ffb17 	ldw	r5,-20(fp)
 1001e90:	1009883a 	mov	r4,r2
 1001e94:	10051300 	call	1005130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 1001e98:	10052c40 	call	10052c4 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001e9c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001ea0:	e037883a 	mov	sp,fp
 1001ea4:	dfc00117 	ldw	ra,4(sp)
 1001ea8:	df000017 	ldw	fp,0(sp)
 1001eac:	dec00204 	addi	sp,sp,8
 1001eb0:	f800283a 	ret

01001eb4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001eb4:	defff504 	addi	sp,sp,-44
 1001eb8:	dfc00a15 	stw	ra,40(sp)
 1001ebc:	df000915 	stw	fp,36(sp)
 1001ec0:	df000904 	addi	fp,sp,36
 1001ec4:	e13ffd15 	stw	r4,-12(fp)
 1001ec8:	e17ffe15 	stw	r5,-8(fp)
 1001ecc:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001ed0:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1001ed4:	e0bffd17 	ldw	r2,-12(fp)
 1001ed8:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001edc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001ee0:	e0bff817 	ldw	r2,-32(fp)
 1001ee4:	10800e17 	ldw	r2,56(r2)
 1001ee8:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001eec:	e0bff917 	ldw	r2,-28(fp)
 1001ef0:	10001526 	beq	r2,zero,1001f48 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1001ef4:	e0bff817 	ldw	r2,-32(fp)
 1001ef8:	10800317 	ldw	r2,12(r2)
 1001efc:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001f00:	e17ffe17 	ldw	r5,-8(fp)
 1001f04:	e13ff817 	ldw	r4,-32(fp)
 1001f08:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1001f0c:	e0bff817 	ldw	r2,-32(fp)
 1001f10:	e0fffa17 	ldw	r3,-24(fp)
 1001f14:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001f18:	e0bff817 	ldw	r2,-32(fp)
 1001f1c:	10800917 	ldw	r2,36(r2)
 1001f20:	10000626 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001f24:	e0bff817 	ldw	r2,-32(fp)
 1001f28:	10800904 	addi	r2,r2,36
 1001f2c:	1009883a 	mov	r4,r2
 1001f30:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001f34:	10000126 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 1001f38:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001f3c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001f40:	00800044 	movi	r2,1
 1001f44:	00004206 	br	1002050 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001f48:	e0bfff17 	ldw	r2,-4(fp)
 1001f4c:	1000031e 	bne	r2,zero,1001f5c <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001f50:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001f54:	0005883a 	mov	r2,zero
 1001f58:	00003d06 	br	1002050 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001f5c:	e0bff717 	ldw	r2,-36(fp)
 1001f60:	1000051e 	bne	r2,zero,1001f78 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001f64:	e0bffb04 	addi	r2,fp,-20
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001f70:	00800044 	movi	r2,1
 1001f74:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001f78:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001f7c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001f80:	10052700 	call	1005270 <vTaskEnterCritical>
 1001f84:	e0bff817 	ldw	r2,-32(fp)
 1001f88:	10801103 	ldbu	r2,68(r2)
 1001f8c:	10803fcc 	andi	r2,r2,255
 1001f90:	1080201c 	xori	r2,r2,128
 1001f94:	10bfe004 	addi	r2,r2,-128
 1001f98:	10bfffd8 	cmpnei	r2,r2,-1
 1001f9c:	1000021e 	bne	r2,zero,1001fa8 <xQueuePeek+0xf4>
 1001fa0:	e0bff817 	ldw	r2,-32(fp)
 1001fa4:	10001105 	stb	zero,68(r2)
 1001fa8:	e0bff817 	ldw	r2,-32(fp)
 1001fac:	10801143 	ldbu	r2,69(r2)
 1001fb0:	10803fcc 	andi	r2,r2,255
 1001fb4:	1080201c 	xori	r2,r2,128
 1001fb8:	10bfe004 	addi	r2,r2,-128
 1001fbc:	10bfffd8 	cmpnei	r2,r2,-1
 1001fc0:	1000021e 	bne	r2,zero,1001fcc <xQueuePeek+0x118>
 1001fc4:	e0bff817 	ldw	r2,-32(fp)
 1001fc8:	10001145 	stb	zero,69(r2)
 1001fcc:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001fd0:	e0ffff04 	addi	r3,fp,-4
 1001fd4:	e0bffb04 	addi	r2,fp,-20
 1001fd8:	180b883a 	mov	r5,r3
 1001fdc:	1009883a 	mov	r4,r2
 1001fe0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001fe4:	1000131e 	bne	r2,zero,1002034 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001fe8:	e13ff817 	ldw	r4,-32(fp)
 1001fec:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001ff0:	10000c26 	beq	r2,zero,1002024 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001ff4:	e0bff817 	ldw	r2,-32(fp)
 1001ff8:	10800904 	addi	r2,r2,36
 1001ffc:	e0ffff17 	ldw	r3,-4(fp)
 1002000:	180b883a 	mov	r5,r3
 1002004:	1009883a 	mov	r4,r2
 1002008:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 100200c:	e13ff817 	ldw	r4,-32(fp)
 1002010:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1002014:	10043880 	call	1004388 <xTaskResumeAll>
 1002018:	103fb01e 	bne	r2,zero,1001edc <__alt_data_end+0xff001edc>
				{
					portYIELD_WITHIN_API();
 100201c:	003b683a 	trap	0
 1002020:	003fae06 	br	1001edc <__alt_data_end+0xff001edc>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 1002024:	e13ff817 	ldw	r4,-32(fp)
 1002028:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100202c:	10043880 	call	1004388 <xTaskResumeAll>
 1002030:	003faa06 	br	1001edc <__alt_data_end+0xff001edc>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 1002034:	e13ff817 	ldw	r4,-32(fp)
 1002038:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100203c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1002040:	e13ff817 	ldw	r4,-32(fp)
 1002044:	10026380 	call	1002638 <prvIsQueueEmpty>
 1002048:	103fa426 	beq	r2,zero,1001edc <__alt_data_end+0xff001edc>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 100204c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1002050:	e037883a 	mov	sp,fp
 1002054:	dfc00117 	ldw	ra,4(sp)
 1002058:	df000017 	ldw	fp,0(sp)
 100205c:	dec00204 	addi	sp,sp,8
 1002060:	f800283a 	ret

01002064 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002064:	defff604 	addi	sp,sp,-40
 1002068:	dfc00915 	stw	ra,36(sp)
 100206c:	df000815 	stw	fp,32(sp)
 1002070:	df000804 	addi	fp,sp,32
 1002074:	e13ffd15 	stw	r4,-12(fp)
 1002078:	e17ffe15 	stw	r5,-8(fp)
 100207c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1002080:	e0bffd17 	ldw	r2,-12(fp)
 1002084:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002088:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100208c:	e0bff917 	ldw	r2,-28(fp)
 1002090:	10800e17 	ldw	r2,56(r2)
 1002094:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1002098:	e0bffb17 	ldw	r2,-20(fp)
 100209c:	10002326 	beq	r2,zero,100212c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 10020a0:	e0bff917 	ldw	r2,-28(fp)
 10020a4:	10801103 	ldbu	r2,68(r2)
 10020a8:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 10020ac:	e17ffe17 	ldw	r5,-8(fp)
 10020b0:	e13ff917 	ldw	r4,-28(fp)
 10020b4:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 10020b8:	e0bffb17 	ldw	r2,-20(fp)
 10020bc:	10ffffc4 	addi	r3,r2,-1
 10020c0:	e0bff917 	ldw	r2,-28(fp)
 10020c4:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 10020c8:	e0bffc07 	ldb	r2,-16(fp)
 10020cc:	10bfffd8 	cmpnei	r2,r2,-1
 10020d0:	10000e1e 	bne	r2,zero,100210c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10020d4:	e0bff917 	ldw	r2,-28(fp)
 10020d8:	10800417 	ldw	r2,16(r2)
 10020dc:	10001026 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10020e0:	e0bff917 	ldw	r2,-28(fp)
 10020e4:	10800404 	addi	r2,r2,16
 10020e8:	1009883a 	mov	r4,r2
 10020ec:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10020f0:	10000b26 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 10020f4:	e0bfff17 	ldw	r2,-4(fp)
 10020f8:	10000926 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 10020fc:	e0bfff17 	ldw	r2,-4(fp)
 1002100:	00c00044 	movi	r3,1
 1002104:	10c00015 	stw	r3,0(r2)
 1002108:	00000506 	br	1002120 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 100210c:	e0bffc03 	ldbu	r2,-16(fp)
 1002110:	10800044 	addi	r2,r2,1
 1002114:	1007883a 	mov	r3,r2
 1002118:	e0bff917 	ldw	r2,-28(fp)
 100211c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 1002120:	00800044 	movi	r2,1
 1002124:	e0bff815 	stw	r2,-32(fp)
 1002128:	00000106 	br	1002130 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 100212c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1002130:	e0bff817 	ldw	r2,-32(fp)
}
 1002134:	e037883a 	mov	sp,fp
 1002138:	dfc00117 	ldw	ra,4(sp)
 100213c:	df000017 	ldw	fp,0(sp)
 1002140:	dec00204 	addi	sp,sp,8
 1002144:	f800283a 	ret

01002148 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 1002148:	defff804 	addi	sp,sp,-32
 100214c:	dfc00715 	stw	ra,28(sp)
 1002150:	df000615 	stw	fp,24(sp)
 1002154:	df000604 	addi	fp,sp,24
 1002158:	e13ffe15 	stw	r4,-8(fp)
 100215c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1002160:	e0bffe17 	ldw	r2,-8(fp)
 1002164:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002168:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 100216c:	e0bffb17 	ldw	r2,-20(fp)
 1002170:	10800e17 	ldw	r2,56(r2)
 1002174:	10000c26 	beq	r2,zero,10021a8 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1002178:	e0bffb17 	ldw	r2,-20(fp)
 100217c:	10800317 	ldw	r2,12(r2)
 1002180:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1002184:	e17fff17 	ldw	r5,-4(fp)
 1002188:	e13ffb17 	ldw	r4,-20(fp)
 100218c:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1002190:	e0bffb17 	ldw	r2,-20(fp)
 1002194:	e0fffd17 	ldw	r3,-12(fp)
 1002198:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 100219c:	00800044 	movi	r2,1
 10021a0:	e0bffa15 	stw	r2,-24(fp)
 10021a4:	00000106 	br	10021ac <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 10021a8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 10021ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10021b0:	e037883a 	mov	sp,fp
 10021b4:	dfc00117 	ldw	ra,4(sp)
 10021b8:	df000017 	ldw	fp,0(sp)
 10021bc:	dec00204 	addi	sp,sp,8
 10021c0:	f800283a 	ret

010021c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 10021c4:	defffc04 	addi	sp,sp,-16
 10021c8:	dfc00315 	stw	ra,12(sp)
 10021cc:	df000215 	stw	fp,8(sp)
 10021d0:	df000204 	addi	fp,sp,8
 10021d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 10021d8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 10021dc:	e0bfff17 	ldw	r2,-4(fp)
 10021e0:	10800e17 	ldw	r2,56(r2)
 10021e4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 10021e8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10021ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 10021f0:	e037883a 	mov	sp,fp
 10021f4:	dfc00117 	ldw	ra,4(sp)
 10021f8:	df000017 	ldw	fp,0(sp)
 10021fc:	dec00204 	addi	sp,sp,8
 1002200:	f800283a 	ret

01002204 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 1002204:	defffb04 	addi	sp,sp,-20
 1002208:	dfc00415 	stw	ra,16(sp)
 100220c:	df000315 	stw	fp,12(sp)
 1002210:	df000304 	addi	fp,sp,12
 1002214:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002218:	e0bfff17 	ldw	r2,-4(fp)
 100221c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1002220:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 1002224:	e0bffd17 	ldw	r2,-12(fp)
 1002228:	10c00f17 	ldw	r3,60(r2)
 100222c:	e0bffd17 	ldw	r2,-12(fp)
 1002230:	10800e17 	ldw	r2,56(r2)
 1002234:	1885c83a 	sub	r2,r3,r2
 1002238:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 100223c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 1002240:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002244:	e037883a 	mov	sp,fp
 1002248:	dfc00117 	ldw	ra,4(sp)
 100224c:	df000017 	ldw	fp,0(sp)
 1002250:	dec00204 	addi	sp,sp,8
 1002254:	f800283a 	ret

01002258 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 1002258:	defffc04 	addi	sp,sp,-16
 100225c:	df000315 	stw	fp,12(sp)
 1002260:	df000304 	addi	fp,sp,12
 1002264:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002268:	e0bfff17 	ldw	r2,-4(fp)
 100226c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 1002270:	e0bffd17 	ldw	r2,-12(fp)
 1002274:	10800e17 	ldw	r2,56(r2)
 1002278:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 100227c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002280:	e037883a 	mov	sp,fp
 1002284:	df000017 	ldw	fp,0(sp)
 1002288:	dec00104 	addi	sp,sp,4
 100228c:	f800283a 	ret

01002290 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 1002290:	defffc04 	addi	sp,sp,-16
 1002294:	dfc00315 	stw	ra,12(sp)
 1002298:	df000215 	stw	fp,8(sp)
 100229c:	df000204 	addi	fp,sp,8
 10022a0:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 10022a4:	e0bfff17 	ldw	r2,-4(fp)
 10022a8:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 10022ac:	e13ffe17 	ldw	r4,-8(fp)
 10022b0:	10011840 	call	1001184 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 10022b4:	0001883a 	nop
 10022b8:	e037883a 	mov	sp,fp
 10022bc:	dfc00117 	ldw	ra,4(sp)
 10022c0:	df000017 	ldw	fp,0(sp)
 10022c4:	dec00204 	addi	sp,sp,8
 10022c8:	f800283a 	ret

010022cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 10022cc:	defffd04 	addi	sp,sp,-12
 10022d0:	df000215 	stw	fp,8(sp)
 10022d4:	df000204 	addi	fp,sp,8
 10022d8:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 10022dc:	e0bfff17 	ldw	r2,-4(fp)
 10022e0:	10800917 	ldw	r2,36(r2)
 10022e4:	10000726 	beq	r2,zero,1002304 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 10022e8:	e0bfff17 	ldw	r2,-4(fp)
 10022ec:	10800c17 	ldw	r2,48(r2)
 10022f0:	10800017 	ldw	r2,0(r2)
 10022f4:	00c00144 	movi	r3,5
 10022f8:	1885c83a 	sub	r2,r3,r2
 10022fc:	e0bffe15 	stw	r2,-8(fp)
 1002300:	00000106 	br	1002308 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 1002304:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 1002308:	e0bffe17 	ldw	r2,-8(fp)
	}
 100230c:	e037883a 	mov	sp,fp
 1002310:	df000017 	ldw	fp,0(sp)
 1002314:	dec00104 	addi	sp,sp,4
 1002318:	f800283a 	ret

0100231c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 100231c:	defff904 	addi	sp,sp,-28
 1002320:	dfc00615 	stw	ra,24(sp)
 1002324:	df000515 	stw	fp,20(sp)
 1002328:	df000504 	addi	fp,sp,20
 100232c:	e13ffd15 	stw	r4,-12(fp)
 1002330:	e17ffe15 	stw	r5,-8(fp)
 1002334:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 1002338:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100233c:	e0bffd17 	ldw	r2,-12(fp)
 1002340:	10800e17 	ldw	r2,56(r2)
 1002344:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 1002348:	e0bffd17 	ldw	r2,-12(fp)
 100234c:	10801017 	ldw	r2,64(r2)
 1002350:	10000b1e 	bne	r2,zero,1002380 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1002354:	e0bffd17 	ldw	r2,-12(fp)
 1002358:	10800017 	ldw	r2,0(r2)
 100235c:	1000481e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 1002360:	e0bffd17 	ldw	r2,-12(fp)
 1002364:	10800217 	ldw	r2,8(r2)
 1002368:	1009883a 	mov	r4,r2
 100236c:	10050340 	call	1005034 <xTaskPriorityDisinherit>
 1002370:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 1002374:	e0bffd17 	ldw	r2,-12(fp)
 1002378:	10000215 	stw	zero,8(r2)
 100237c:	00004006 	br	1002480 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 1002380:	e0bfff17 	ldw	r2,-4(fp)
 1002384:	1000191e 	bne	r2,zero,10023ec <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 1002388:	e0bffd17 	ldw	r2,-12(fp)
 100238c:	10c00117 	ldw	r3,4(r2)
 1002390:	e0bffd17 	ldw	r2,-12(fp)
 1002394:	10801017 	ldw	r2,64(r2)
 1002398:	100d883a 	mov	r6,r2
 100239c:	e17ffe17 	ldw	r5,-8(fp)
 10023a0:	1809883a 	mov	r4,r3
 10023a4:	1008d600 	call	1008d60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10023a8:	e0bffd17 	ldw	r2,-12(fp)
 10023ac:	10c00117 	ldw	r3,4(r2)
 10023b0:	e0bffd17 	ldw	r2,-12(fp)
 10023b4:	10801017 	ldw	r2,64(r2)
 10023b8:	1887883a 	add	r3,r3,r2
 10023bc:	e0bffd17 	ldw	r2,-12(fp)
 10023c0:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 10023c4:	e0bffd17 	ldw	r2,-12(fp)
 10023c8:	10c00117 	ldw	r3,4(r2)
 10023cc:	e0bffd17 	ldw	r2,-12(fp)
 10023d0:	10800217 	ldw	r2,8(r2)
 10023d4:	18802a36 	bltu	r3,r2,1002480 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 10023d8:	e0bffd17 	ldw	r2,-12(fp)
 10023dc:	10c00017 	ldw	r3,0(r2)
 10023e0:	e0bffd17 	ldw	r2,-12(fp)
 10023e4:	10c00115 	stw	r3,4(r2)
 10023e8:	00002506 	br	1002480 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 10023ec:	e0bffd17 	ldw	r2,-12(fp)
 10023f0:	10c00317 	ldw	r3,12(r2)
 10023f4:	e0bffd17 	ldw	r2,-12(fp)
 10023f8:	10801017 	ldw	r2,64(r2)
 10023fc:	100d883a 	mov	r6,r2
 1002400:	e17ffe17 	ldw	r5,-8(fp)
 1002404:	1809883a 	mov	r4,r3
 1002408:	1008d600 	call	1008d60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 100240c:	e0bffd17 	ldw	r2,-12(fp)
 1002410:	10c00317 	ldw	r3,12(r2)
 1002414:	e0bffd17 	ldw	r2,-12(fp)
 1002418:	10801017 	ldw	r2,64(r2)
 100241c:	0085c83a 	sub	r2,zero,r2
 1002420:	1887883a 	add	r3,r3,r2
 1002424:	e0bffd17 	ldw	r2,-12(fp)
 1002428:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 100242c:	e0bffd17 	ldw	r2,-12(fp)
 1002430:	10c00317 	ldw	r3,12(r2)
 1002434:	e0bffd17 	ldw	r2,-12(fp)
 1002438:	10800017 	ldw	r2,0(r2)
 100243c:	1880082e 	bgeu	r3,r2,1002460 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 1002440:	e0bffd17 	ldw	r2,-12(fp)
 1002444:	10c00217 	ldw	r3,8(r2)
 1002448:	e0bffd17 	ldw	r2,-12(fp)
 100244c:	10801017 	ldw	r2,64(r2)
 1002450:	0085c83a 	sub	r2,zero,r2
 1002454:	1887883a 	add	r3,r3,r2
 1002458:	e0bffd17 	ldw	r2,-12(fp)
 100245c:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 1002460:	e0bfff17 	ldw	r2,-4(fp)
 1002464:	10800098 	cmpnei	r2,r2,2
 1002468:	1000051e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 100246c:	e0bffc17 	ldw	r2,-16(fp)
 1002470:	10000326 	beq	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 1002474:	e0bffc17 	ldw	r2,-16(fp)
 1002478:	10bfffc4 	addi	r2,r2,-1
 100247c:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1002480:	e0bffc17 	ldw	r2,-16(fp)
 1002484:	10c00044 	addi	r3,r2,1
 1002488:	e0bffd17 	ldw	r2,-12(fp)
 100248c:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 1002490:	e0bffb17 	ldw	r2,-20(fp)
}
 1002494:	e037883a 	mov	sp,fp
 1002498:	dfc00117 	ldw	ra,4(sp)
 100249c:	df000017 	ldw	fp,0(sp)
 10024a0:	dec00204 	addi	sp,sp,8
 10024a4:	f800283a 	ret

010024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 10024a8:	defffc04 	addi	sp,sp,-16
 10024ac:	dfc00315 	stw	ra,12(sp)
 10024b0:	df000215 	stw	fp,8(sp)
 10024b4:	df000204 	addi	fp,sp,8
 10024b8:	e13ffe15 	stw	r4,-8(fp)
 10024bc:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 10024c0:	e0bffe17 	ldw	r2,-8(fp)
 10024c4:	10801017 	ldw	r2,64(r2)
 10024c8:	10001826 	beq	r2,zero,100252c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10024cc:	e0bffe17 	ldw	r2,-8(fp)
 10024d0:	10c00317 	ldw	r3,12(r2)
 10024d4:	e0bffe17 	ldw	r2,-8(fp)
 10024d8:	10801017 	ldw	r2,64(r2)
 10024dc:	1887883a 	add	r3,r3,r2
 10024e0:	e0bffe17 	ldw	r2,-8(fp)
 10024e4:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 10024e8:	e0bffe17 	ldw	r2,-8(fp)
 10024ec:	10c00317 	ldw	r3,12(r2)
 10024f0:	e0bffe17 	ldw	r2,-8(fp)
 10024f4:	10800217 	ldw	r2,8(r2)
 10024f8:	18800436 	bltu	r3,r2,100250c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 10024fc:	e0bffe17 	ldw	r2,-8(fp)
 1002500:	10c00017 	ldw	r3,0(r2)
 1002504:	e0bffe17 	ldw	r2,-8(fp)
 1002508:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 100250c:	e0bffe17 	ldw	r2,-8(fp)
 1002510:	10c00317 	ldw	r3,12(r2)
 1002514:	e0bffe17 	ldw	r2,-8(fp)
 1002518:	10801017 	ldw	r2,64(r2)
 100251c:	100d883a 	mov	r6,r2
 1002520:	180b883a 	mov	r5,r3
 1002524:	e13fff17 	ldw	r4,-4(fp)
 1002528:	1008d600 	call	1008d60 <memcpy>
	}
}
 100252c:	0001883a 	nop
 1002530:	e037883a 	mov	sp,fp
 1002534:	dfc00117 	ldw	ra,4(sp)
 1002538:	df000017 	ldw	fp,0(sp)
 100253c:	dec00204 	addi	sp,sp,8
 1002540:	f800283a 	ret

01002544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 1002544:	defffc04 	addi	sp,sp,-16
 1002548:	dfc00315 	stw	ra,12(sp)
 100254c:	df000215 	stw	fp,8(sp)
 1002550:	df000204 	addi	fp,sp,8
 1002554:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 1002558:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 100255c:	e0bfff17 	ldw	r2,-4(fp)
 1002560:	10801143 	ldbu	r2,69(r2)
 1002564:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 1002568:	00000c06 	br	100259c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 100256c:	e0bfff17 	ldw	r2,-4(fp)
 1002570:	10800917 	ldw	r2,36(r2)
 1002574:	10000c26 	beq	r2,zero,10025a8 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1002578:	e0bfff17 	ldw	r2,-4(fp)
 100257c:	10800904 	addi	r2,r2,36
 1002580:	1009883a 	mov	r4,r2
 1002584:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1002588:	10000126 	beq	r2,zero,1002590 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 100258c:	1004bf40 	call	1004bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 1002590:	e0bffe03 	ldbu	r2,-8(fp)
 1002594:	10bfffc4 	addi	r2,r2,-1
 1002598:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 100259c:	e0bffe07 	ldb	r2,-8(fp)
 10025a0:	00bff216 	blt	zero,r2,100256c <__alt_data_end+0xff00256c>
 10025a4:	00000106 	br	10025ac <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 10025a8:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 10025ac:	e0bfff17 	ldw	r2,-4(fp)
 10025b0:	00ffffc4 	movi	r3,-1
 10025b4:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 10025b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 10025bc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 10025c0:	e0bfff17 	ldw	r2,-4(fp)
 10025c4:	10801103 	ldbu	r2,68(r2)
 10025c8:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 10025cc:	00000c06 	br	1002600 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10025d0:	e0bfff17 	ldw	r2,-4(fp)
 10025d4:	10800417 	ldw	r2,16(r2)
 10025d8:	10000c26 	beq	r2,zero,100260c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10025dc:	e0bfff17 	ldw	r2,-4(fp)
 10025e0:	10800404 	addi	r2,r2,16
 10025e4:	1009883a 	mov	r4,r2
 10025e8:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10025ec:	10000126 	beq	r2,zero,10025f4 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 10025f0:	1004bf40 	call	1004bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 10025f4:	e0bffe43 	ldbu	r2,-7(fp)
 10025f8:	10bfffc4 	addi	r2,r2,-1
 10025fc:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 1002600:	e0bffe47 	ldb	r2,-7(fp)
 1002604:	00bff216 	blt	zero,r2,10025d0 <__alt_data_end+0xff0025d0>
 1002608:	00000106 	br	1002610 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 100260c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 1002610:	e0bfff17 	ldw	r2,-4(fp)
 1002614:	00ffffc4 	movi	r3,-1
 1002618:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 100261c:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1002620:	0001883a 	nop
 1002624:	e037883a 	mov	sp,fp
 1002628:	dfc00117 	ldw	ra,4(sp)
 100262c:	df000017 	ldw	fp,0(sp)
 1002630:	dec00204 	addi	sp,sp,8
 1002634:	f800283a 	ret

01002638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 1002638:	defffc04 	addi	sp,sp,-16
 100263c:	dfc00315 	stw	ra,12(sp)
 1002640:	df000215 	stw	fp,8(sp)
 1002644:	df000204 	addi	fp,sp,8
 1002648:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 100264c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 1002650:	e0bfff17 	ldw	r2,-4(fp)
 1002654:	10800e17 	ldw	r2,56(r2)
 1002658:	1000031e 	bne	r2,zero,1002668 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 100265c:	00800044 	movi	r2,1
 1002660:	e0bffe15 	stw	r2,-8(fp)
 1002664:	00000106 	br	100266c <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 1002668:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100266c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002670:	e0bffe17 	ldw	r2,-8(fp)
}
 1002674:	e037883a 	mov	sp,fp
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	df000017 	ldw	fp,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret

01002688 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 1002688:	defffc04 	addi	sp,sp,-16
 100268c:	df000315 	stw	fp,12(sp)
 1002690:	df000304 	addi	fp,sp,12
 1002694:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002698:	e0bfff17 	ldw	r2,-4(fp)
 100269c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 10026a0:	e0bffe17 	ldw	r2,-8(fp)
 10026a4:	10800e17 	ldw	r2,56(r2)
 10026a8:	1000031e 	bne	r2,zero,10026b8 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 10026ac:	00800044 	movi	r2,1
 10026b0:	e0bffd15 	stw	r2,-12(fp)
 10026b4:	00000106 	br	10026bc <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 10026b8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10026bc:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 10026c0:	e037883a 	mov	sp,fp
 10026c4:	df000017 	ldw	fp,0(sp)
 10026c8:	dec00104 	addi	sp,sp,4
 10026cc:	f800283a 	ret

010026d0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 10026d0:	defffc04 	addi	sp,sp,-16
 10026d4:	dfc00315 	stw	ra,12(sp)
 10026d8:	df000215 	stw	fp,8(sp)
 10026dc:	df000204 	addi	fp,sp,8
 10026e0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 10026e4:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 10026e8:	e0bfff17 	ldw	r2,-4(fp)
 10026ec:	10c00e17 	ldw	r3,56(r2)
 10026f0:	e0bfff17 	ldw	r2,-4(fp)
 10026f4:	10800f17 	ldw	r2,60(r2)
 10026f8:	1880031e 	bne	r3,r2,1002708 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 10026fc:	00800044 	movi	r2,1
 1002700:	e0bffe15 	stw	r2,-8(fp)
 1002704:	00000106 	br	100270c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 1002708:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100270c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002710:	e0bffe17 	ldw	r2,-8(fp)
}
 1002714:	e037883a 	mov	sp,fp
 1002718:	dfc00117 	ldw	ra,4(sp)
 100271c:	df000017 	ldw	fp,0(sp)
 1002720:	dec00204 	addi	sp,sp,8
 1002724:	f800283a 	ret

01002728 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 1002728:	defffc04 	addi	sp,sp,-16
 100272c:	df000315 	stw	fp,12(sp)
 1002730:	df000304 	addi	fp,sp,12
 1002734:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002738:	e0bfff17 	ldw	r2,-4(fp)
 100273c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1002740:	e0bffe17 	ldw	r2,-8(fp)
 1002744:	10c00e17 	ldw	r3,56(r2)
 1002748:	e0bffe17 	ldw	r2,-8(fp)
 100274c:	10800f17 	ldw	r2,60(r2)
 1002750:	1880031e 	bne	r3,r2,1002760 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 1002754:	00800044 	movi	r2,1
 1002758:	e0bffd15 	stw	r2,-12(fp)
 100275c:	00000106 	br	1002764 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 1002760:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 1002764:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1002768:	e037883a 	mov	sp,fp
 100276c:	df000017 	ldw	fp,0(sp)
 1002770:	dec00104 	addi	sp,sp,4
 1002774:	f800283a 	ret

01002778 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 1002778:	defff804 	addi	sp,sp,-32
 100277c:	dfc00715 	stw	ra,28(sp)
 1002780:	df000615 	stw	fp,24(sp)
 1002784:	df000604 	addi	fp,sp,24
 1002788:	e13ffd15 	stw	r4,-12(fp)
 100278c:	e17ffe15 	stw	r5,-8(fp)
 1002790:	e1bfff15 	stw	r6,-4(fp)

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 1002794:	e0bfff17 	ldw	r2,-4(fp)
 1002798:	10800058 	cmpnei	r2,r2,1
 100279c:	1000031e 	bne	r2,zero,10027ac <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 10027a0:	00800044 	movi	r2,1
 10027a4:	e0bffb05 	stb	r2,-20(fp)
 10027a8:	00000106 	br	10027b0 <xStreamBufferGenericCreate+0x38>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 10027ac:	e03ffb05 	stb	zero,-20(fp)
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 10027b0:	e0bffe17 	ldw	r2,-8(fp)
 10027b4:	1000021e 	bne	r2,zero,10027c0 <xStreamBufferGenericCreate+0x48>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 10027b8:	00800044 	movi	r2,1
 10027bc:	e0bffe15 	stw	r2,-8(fp)
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 10027c0:	e0bffd17 	ldw	r2,-12(fp)
 10027c4:	10800044 	addi	r2,r2,1
 10027c8:	e0bffd15 	stw	r2,-12(fp)
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 10027cc:	e0bffd17 	ldw	r2,-12(fp)
 10027d0:	10800804 	addi	r2,r2,32
 10027d4:	1009883a 	mov	r4,r2
 10027d8:	1000fb00 	call	1000fb0 <pvPortMalloc>
 10027dc:	e0bffc15 	stw	r2,-16(fp)

		if( pucAllocatedMemory != NULL )
 10027e0:	e0bffc17 	ldw	r2,-16(fp)
 10027e4:	10000926 	beq	r2,zero,100280c <xStreamBufferGenericCreate+0x94>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 10027e8:	e0bffc17 	ldw	r2,-16(fp)
 10027ec:	10c00804 	addi	r3,r2,32
 10027f0:	e0bffb03 	ldbu	r2,-20(fp)
 10027f4:	d8800015 	stw	r2,0(sp)
 10027f8:	e1fffe17 	ldw	r7,-8(fp)
 10027fc:	e1bffd17 	ldw	r6,-12(fp)
 1002800:	180b883a 	mov	r5,r3
 1002804:	e13ffc17 	ldw	r4,-16(fp)
 1002808:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 100280c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1002810:	e037883a 	mov	sp,fp
 1002814:	dfc00117 	ldw	ra,4(sp)
 1002818:	df000017 	ldw	fp,0(sp)
 100281c:	dec00204 	addi	sp,sp,8
 1002820:	f800283a 	ret

01002824 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 1002824:	defffc04 	addi	sp,sp,-16
 1002828:	dfc00315 	stw	ra,12(sp)
 100282c:	df000215 	stw	fp,8(sp)
 1002830:	df000204 	addi	fp,sp,8
 1002834:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 1002838:	e0bfff17 	ldw	r2,-4(fp)
 100283c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 1002840:	e0bffe17 	ldw	r2,-8(fp)
 1002844:	10800703 	ldbu	r2,28(r2)
 1002848:	10803fcc 	andi	r2,r2,255
 100284c:	1080008c 	andi	r2,r2,2
 1002850:	1000031e 	bne	r2,zero,1002860 <vStreamBufferDelete+0x3c>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 1002854:	e13ffe17 	ldw	r4,-8(fp)
 1002858:	10011840 	call	1001184 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 100285c:	00000406 	br	1002870 <vStreamBufferDelete+0x4c>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 1002860:	01800804 	movi	r6,32
 1002864:	000b883a 	mov	r5,zero
 1002868:	e13ffe17 	ldw	r4,-8(fp)
 100286c:	1008ea80 	call	1008ea8 <memset>
	}
}
 1002870:	0001883a 	nop
 1002874:	e037883a 	mov	sp,fp
 1002878:	dfc00117 	ldw	ra,4(sp)
 100287c:	df000017 	ldw	fp,0(sp)
 1002880:	dec00204 	addi	sp,sp,8
 1002884:	f800283a 	ret

01002888 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 1002888:	defffa04 	addi	sp,sp,-24
 100288c:	dfc00515 	stw	ra,20(sp)
 1002890:	df000415 	stw	fp,16(sp)
 1002894:	df000404 	addi	fp,sp,16
 1002898:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 100289c:	e0bfff17 	ldw	r2,-4(fp)
 10028a0:	e0bffe15 	stw	r2,-8(fp)
BaseType_t xReturn = pdFAIL;
 10028a4:	e03ffd15 	stw	zero,-12(fp)
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 10028a8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 10028ac:	e0bffe17 	ldw	r2,-8(fp)
 10028b0:	10800417 	ldw	r2,16(r2)
 10028b4:	1000141e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 10028b8:	e0bffe17 	ldw	r2,-8(fp)
 10028bc:	10800517 	ldw	r2,20(r2)
 10028c0:	1000111e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028c4:	e0bffe17 	ldw	r2,-8(fp)
 10028c8:	10c00617 	ldw	r3,24(r2)
 10028cc:	e0bffe17 	ldw	r2,-8(fp)
 10028d0:	11000217 	ldw	r4,8(r2)
 10028d4:	e0bffe17 	ldw	r2,-8(fp)
 10028d8:	11400317 	ldw	r5,12(r2)
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
 10028dc:	e0bffe17 	ldw	r2,-8(fp)
 10028e0:	10800703 	ldbu	r2,28(r2)
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028e4:	10803fcc 	andi	r2,r2,255
 10028e8:	d8800015 	stw	r2,0(sp)
 10028ec:	280f883a 	mov	r7,r5
 10028f0:	200d883a 	mov	r6,r4
 10028f4:	180b883a 	mov	r5,r3
 10028f8:	e13ffe17 	ldw	r4,-8(fp)
 10028fc:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 1002900:	00800044 	movi	r2,1
 1002904:	e0bffd15 	stw	r2,-12(fp)

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 1002908:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 100290c:	e0bffd17 	ldw	r2,-12(fp)
}
 1002910:	e037883a 	mov	sp,fp
 1002914:	dfc00117 	ldw	ra,4(sp)
 1002918:	df000017 	ldw	fp,0(sp)
 100291c:	dec00204 	addi	sp,sp,8
 1002920:	f800283a 	ret

01002924 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 1002924:	defffb04 	addi	sp,sp,-20
 1002928:	df000415 	stw	fp,16(sp)
 100292c:	df000404 	addi	fp,sp,16
 1002930:	e13ffe15 	stw	r4,-8(fp)
 1002934:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002938:	e0bffe17 	ldw	r2,-8(fp)
 100293c:	e0bffd15 	stw	r2,-12(fp)
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 1002940:	e0bfff17 	ldw	r2,-4(fp)
 1002944:	1000021e 	bne	r2,zero,1002950 <xStreamBufferSetTriggerLevel+0x2c>
	{
		xTriggerLevel = ( size_t ) 1;
 1002948:	00800044 	movi	r2,1
 100294c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 1002950:	e0bffd17 	ldw	r2,-12(fp)
 1002954:	10c00217 	ldw	r3,8(r2)
 1002958:	e0bfff17 	ldw	r2,-4(fp)
 100295c:	18800636 	bltu	r3,r2,1002978 <xStreamBufferSetTriggerLevel+0x54>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 1002960:	e0bffd17 	ldw	r2,-12(fp)
 1002964:	e0ffff17 	ldw	r3,-4(fp)
 1002968:	10c00315 	stw	r3,12(r2)
		xReturn = pdPASS;
 100296c:	00800044 	movi	r2,1
 1002970:	e0bffc15 	stw	r2,-16(fp)
 1002974:	00000106 	br	100297c <xStreamBufferSetTriggerLevel+0x58>
	}
	else
	{
		xReturn = pdFALSE;
 1002978:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 100297c:	e0bffc17 	ldw	r2,-16(fp)
}
 1002980:	e037883a 	mov	sp,fp
 1002984:	df000017 	ldw	fp,0(sp)
 1002988:	dec00104 	addi	sp,sp,4
 100298c:	f800283a 	ret

01002990 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002990:	defffc04 	addi	sp,sp,-16
 1002994:	df000315 	stw	fp,12(sp)
 1002998:	df000304 	addi	fp,sp,12
 100299c:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10029a0:	e0bfff17 	ldw	r2,-4(fp)
 10029a4:	e0bffe15 	stw	r2,-8(fp)
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 10029a8:	e0bffe17 	ldw	r2,-8(fp)
 10029ac:	10c00217 	ldw	r3,8(r2)
 10029b0:	e0bffe17 	ldw	r2,-8(fp)
 10029b4:	10800017 	ldw	r2,0(r2)
 10029b8:	1885883a 	add	r2,r3,r2
 10029bc:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= pxStreamBuffer->xHead;
 10029c0:	e0bffe17 	ldw	r2,-8(fp)
 10029c4:	10800117 	ldw	r2,4(r2)
 10029c8:	e0fffd17 	ldw	r3,-12(fp)
 10029cc:	1885c83a 	sub	r2,r3,r2
 10029d0:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= ( size_t ) 1;
 10029d4:	e0bffd17 	ldw	r2,-12(fp)
 10029d8:	10bfffc4 	addi	r2,r2,-1
 10029dc:	e0bffd15 	stw	r2,-12(fp)

	if( xSpace >= pxStreamBuffer->xLength )
 10029e0:	e0bffe17 	ldw	r2,-8(fp)
 10029e4:	10800217 	ldw	r2,8(r2)
 10029e8:	e0fffd17 	ldw	r3,-12(fp)
 10029ec:	18800536 	bltu	r3,r2,1002a04 <xStreamBufferSpacesAvailable+0x74>
	{
		xSpace -= pxStreamBuffer->xLength;
 10029f0:	e0bffe17 	ldw	r2,-8(fp)
 10029f4:	10800217 	ldw	r2,8(r2)
 10029f8:	e0fffd17 	ldw	r3,-12(fp)
 10029fc:	1885c83a 	sub	r2,r3,r2
 1002a00:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 1002a04:	e0bffd17 	ldw	r2,-12(fp)
}
 1002a08:	e037883a 	mov	sp,fp
 1002a0c:	df000017 	ldw	fp,0(sp)
 1002a10:	dec00104 	addi	sp,sp,4
 1002a14:	f800283a 	ret

01002a18 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002a18:	defffb04 	addi	sp,sp,-20
 1002a1c:	dfc00415 	stw	ra,16(sp)
 1002a20:	df000315 	stw	fp,12(sp)
 1002a24:	df000304 	addi	fp,sp,12
 1002a28:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a2c:	e0bfff17 	ldw	r2,-4(fp)
 1002a30:	e0bffd15 	stw	r2,-12(fp)
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 1002a34:	e13ffd17 	ldw	r4,-12(fp)
 1002a38:	10035280 	call	1003528 <prvBytesInBuffer>
 1002a3c:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1002a40:	e0bffe17 	ldw	r2,-8(fp)
}
 1002a44:	e037883a 	mov	sp,fp
 1002a48:	dfc00117 	ldw	ra,4(sp)
 1002a4c:	df000017 	ldw	fp,0(sp)
 1002a50:	dec00204 	addi	sp,sp,8
 1002a54:	f800283a 	ret

01002a58 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 1002a58:	defff304 	addi	sp,sp,-52
 1002a5c:	dfc00c15 	stw	ra,48(sp)
 1002a60:	df000b15 	stw	fp,44(sp)
 1002a64:	df000b04 	addi	fp,sp,44
 1002a68:	e13ffc15 	stw	r4,-16(fp)
 1002a6c:	e17ffd15 	stw	r5,-12(fp)
 1002a70:	e1bffe15 	stw	r6,-8(fp)
 1002a74:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a78:	e0bffc17 	ldw	r2,-16(fp)
 1002a7c:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace = 0;
 1002a80:	e03ff615 	stw	zero,-40(fp)
size_t xRequiredSpace = xDataLengthBytes;
 1002a84:	e0bffe17 	ldw	r2,-8(fp)
 1002a88:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002a8c:	e0bff817 	ldw	r2,-32(fp)
 1002a90:	10800703 	ldbu	r2,28(r2)
 1002a94:	10803fcc 	andi	r2,r2,255
 1002a98:	1080004c 	andi	r2,r2,1
 1002a9c:	10000326 	beq	r2,zero,1002aac <xStreamBufferSend+0x54>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002aa0:	e0bff717 	ldw	r2,-36(fp)
 1002aa4:	10800104 	addi	r2,r2,4
 1002aa8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002aac:	e0bfff17 	ldw	r2,-4(fp)
 1002ab0:	10002226 	beq	r2,zero,1002b3c <xStreamBufferSend+0xe4>
	{
		vTaskSetTimeOutState( &xTimeOut );
 1002ab4:	e0bffa04 	addi	r2,fp,-24
 1002ab8:	1009883a 	mov	r4,r2
 1002abc:	1004a8c0 	call	1004a8c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 1002ac0:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002ac4:	e13ff817 	ldw	r4,-32(fp)
 1002ac8:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002acc:	e0bff615 	stw	r2,-40(fp)

				if( xSpace < xRequiredSpace )
 1002ad0:	e0fff617 	ldw	r3,-40(fp)
 1002ad4:	e0bff717 	ldw	r2,-36(fp)
 1002ad8:	1880072e 	bgeu	r3,r2,1002af8 <xStreamBufferSend+0xa0>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 1002adc:	0009883a 	mov	r4,zero
 1002ae0:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 1002ae4:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002ae8:	1007883a 	mov	r3,r2
 1002aec:	e0bff817 	ldw	r2,-32(fp)
 1002af0:	10c00515 	stw	r3,20(r2)
 1002af4:	00000206 	br	1002b00 <xStreamBufferSend+0xa8>
				}
				else
				{
					taskEXIT_CRITICAL();
 1002af8:	10052c40 	call	10052c4 <vTaskExitCritical>
					break;
 1002afc:	00000f06 	br	1002b3c <xStreamBufferSend+0xe4>
				}
			}
			taskEXIT_CRITICAL();
 1002b00:	10052c40 	call	10052c4 <vTaskExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002b04:	e0bfff17 	ldw	r2,-4(fp)
 1002b08:	100f883a 	mov	r7,r2
 1002b0c:	000d883a 	mov	r6,zero
 1002b10:	000b883a 	mov	r5,zero
 1002b14:	0009883a 	mov	r4,zero
 1002b18:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 1002b1c:	e0bff817 	ldw	r2,-32(fp)
 1002b20:	10000515 	stw	zero,20(r2)

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 1002b24:	e0ffff04 	addi	r3,fp,-4
 1002b28:	e0bffa04 	addi	r2,fp,-24
 1002b2c:	180b883a 	mov	r5,r3
 1002b30:	1009883a 	mov	r4,r2
 1002b34:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1002b38:	103fe126 	beq	r2,zero,1002ac0 <__alt_data_end+0xff002ac0>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 1002b3c:	e0bff617 	ldw	r2,-40(fp)
 1002b40:	1000031e 	bne	r2,zero,1002b50 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002b44:	e13ff817 	ldw	r4,-32(fp)
 1002b48:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002b4c:	e0bff615 	stw	r2,-40(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002b50:	e0bff717 	ldw	r2,-36(fp)
 1002b54:	d8800015 	stw	r2,0(sp)
 1002b58:	e1fff617 	ldw	r7,-40(fp)
 1002b5c:	e1bffe17 	ldw	r6,-8(fp)
 1002b60:	e17ffd17 	ldw	r5,-12(fp)
 1002b64:	e13ff817 	ldw	r4,-32(fp)
 1002b68:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002b6c:	e0bff915 	stw	r2,-28(fp)

	if( xReturn > ( size_t ) 0 )
 1002b70:	e0bff917 	ldw	r2,-28(fp)
 1002b74:	10001426 	beq	r2,zero,1002bc8 <xStreamBufferSend+0x170>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002b78:	e13ff817 	ldw	r4,-32(fp)
 1002b7c:	10035280 	call	1003528 <prvBytesInBuffer>
 1002b80:	1007883a 	mov	r3,r2
 1002b84:	e0bff817 	ldw	r2,-32(fp)
 1002b88:	10800317 	ldw	r2,12(r2)
 1002b8c:	18800e36 	bltu	r3,r2,1002bc8 <xStreamBufferSend+0x170>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 1002b90:	100435c0 	call	100435c <vTaskSuspendAll>
 1002b94:	e0bff817 	ldw	r2,-32(fp)
 1002b98:	10800417 	ldw	r2,16(r2)
 1002b9c:	10000926 	beq	r2,zero,1002bc4 <xStreamBufferSend+0x16c>
 1002ba0:	e0bff817 	ldw	r2,-32(fp)
 1002ba4:	10800417 	ldw	r2,16(r2)
 1002ba8:	000f883a 	mov	r7,zero
 1002bac:	000d883a 	mov	r6,zero
 1002bb0:	000b883a 	mov	r5,zero
 1002bb4:	1009883a 	mov	r4,r2
 1002bb8:	10055440 	call	1005544 <xTaskGenericNotify>
 1002bbc:	e0bff817 	ldw	r2,-32(fp)
 1002bc0:	10000415 	stw	zero,16(r2)
 1002bc4:	10043880 	call	1004388 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 1002bc8:	e0bff917 	ldw	r2,-28(fp)
}
 1002bcc:	e037883a 	mov	sp,fp
 1002bd0:	dfc00117 	ldw	ra,4(sp)
 1002bd4:	df000017 	ldw	fp,0(sp)
 1002bd8:	dec00204 	addi	sp,sp,8
 1002bdc:	f800283a 	ret

01002be0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002be0:	defff404 	addi	sp,sp,-48
 1002be4:	dfc00b15 	stw	ra,44(sp)
 1002be8:	df000a15 	stw	fp,40(sp)
 1002bec:	df000a04 	addi	fp,sp,40
 1002bf0:	e13ffc15 	stw	r4,-16(fp)
 1002bf4:	e17ffd15 	stw	r5,-12(fp)
 1002bf8:	e1bffe15 	stw	r6,-8(fp)
 1002bfc:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002c00:	e0bffc17 	ldw	r2,-16(fp)
 1002c04:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 1002c08:	e0bffe17 	ldw	r2,-8(fp)
 1002c0c:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002c10:	e0bff817 	ldw	r2,-32(fp)
 1002c14:	10800703 	ldbu	r2,28(r2)
 1002c18:	10803fcc 	andi	r2,r2,255
 1002c1c:	1080004c 	andi	r2,r2,1
 1002c20:	10000326 	beq	r2,zero,1002c30 <xStreamBufferSendFromISR+0x50>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002c24:	e0bff717 	ldw	r2,-36(fp)
 1002c28:	10800104 	addi	r2,r2,4
 1002c2c:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002c30:	e13ff817 	ldw	r4,-32(fp)
 1002c34:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002c38:	e0bff915 	stw	r2,-28(fp)
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002c3c:	e0bff717 	ldw	r2,-36(fp)
 1002c40:	d8800015 	stw	r2,0(sp)
 1002c44:	e1fff917 	ldw	r7,-28(fp)
 1002c48:	e1bffe17 	ldw	r6,-8(fp)
 1002c4c:	e17ffd17 	ldw	r5,-12(fp)
 1002c50:	e13ff817 	ldw	r4,-32(fp)
 1002c54:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002c58:	e0bffa15 	stw	r2,-24(fp)

	if( xReturn > ( size_t ) 0 )
 1002c5c:	e0bffa17 	ldw	r2,-24(fp)
 1002c60:	10001526 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002c64:	e13ff817 	ldw	r4,-32(fp)
 1002c68:	10035280 	call	1003528 <prvBytesInBuffer>
 1002c6c:	1007883a 	mov	r3,r2
 1002c70:	e0bff817 	ldw	r2,-32(fp)
 1002c74:	10800317 	ldw	r2,12(r2)
 1002c78:	18800f36 	bltu	r3,r2,1002cb8 <xStreamBufferSendFromISR+0xd8>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1002c7c:	e03ffb15 	stw	zero,-20(fp)
 1002c80:	e0bff817 	ldw	r2,-32(fp)
 1002c84:	10800417 	ldw	r2,16(r2)
 1002c88:	10000b26 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
 1002c8c:	e0bff817 	ldw	r2,-32(fp)
 1002c90:	10c00417 	ldw	r3,16(r2)
 1002c94:	e0bfff17 	ldw	r2,-4(fp)
 1002c98:	d8800015 	stw	r2,0(sp)
 1002c9c:	000f883a 	mov	r7,zero
 1002ca0:	000d883a 	mov	r6,zero
 1002ca4:	000b883a 	mov	r5,zero
 1002ca8:	1809883a 	mov	r4,r3
 1002cac:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1002cb0:	e0bff817 	ldw	r2,-32(fp)
 1002cb4:	10000415 	stw	zero,16(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 1002cb8:	e0bffa17 	ldw	r2,-24(fp)
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	dfc00117 	ldw	ra,4(sp)
 1002cc4:	df000017 	ldw	fp,0(sp)
 1002cc8:	dec00204 	addi	sp,sp,8
 1002ccc:	f800283a 	ret

01002cd0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 1002cd0:	defff804 	addi	sp,sp,-32
 1002cd4:	dfc00715 	stw	ra,28(sp)
 1002cd8:	df000615 	stw	fp,24(sp)
 1002cdc:	df000604 	addi	fp,sp,24
 1002ce0:	e13ffc15 	stw	r4,-16(fp)
 1002ce4:	e17ffd15 	stw	r5,-12(fp)
 1002ce8:	e1bffe15 	stw	r6,-8(fp)
 1002cec:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 1002cf0:	e0bfff17 	ldw	r2,-4(fp)
 1002cf4:	1000021e 	bne	r2,zero,1002d00 <prvWriteMessageToBuffer+0x30>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 1002cf8:	e03ffa15 	stw	zero,-24(fp)
 1002cfc:	00001906 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 1002d00:	e0bffc17 	ldw	r2,-16(fp)
 1002d04:	10800703 	ldbu	r2,28(r2)
 1002d08:	10803fcc 	andi	r2,r2,255
 1002d0c:	1080004c 	andi	r2,r2,1
 1002d10:	1000081e 	bne	r2,zero,1002d34 <prvWriteMessageToBuffer+0x64>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 1002d14:	00800044 	movi	r2,1
 1002d18:	e0bffa15 	stw	r2,-24(fp)
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 1002d1c:	e0fffe17 	ldw	r3,-8(fp)
 1002d20:	e0bfff17 	ldw	r2,-4(fp)
 1002d24:	1880012e 	bgeu	r3,r2,1002d2c <prvWriteMessageToBuffer+0x5c>
 1002d28:	1805883a 	mov	r2,r3
 1002d2c:	e0bffe15 	stw	r2,-8(fp)
 1002d30:	00000c06 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( xSpace >= xRequiredSpace )
 1002d34:	e0ffff17 	ldw	r3,-4(fp)
 1002d38:	e0800217 	ldw	r2,8(fp)
 1002d3c:	18800836 	bltu	r3,r2,1002d60 <prvWriteMessageToBuffer+0x90>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 1002d40:	00800044 	movi	r2,1
 1002d44:	e0bffa15 	stw	r2,-24(fp)
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 1002d48:	e0bffe04 	addi	r2,fp,-8
 1002d4c:	01800104 	movi	r6,4
 1002d50:	100b883a 	mov	r5,r2
 1002d54:	e13ffc17 	ldw	r4,-16(fp)
 1002d58:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d5c:	00000106 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 1002d60:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xShouldWrite != pdFALSE )
 1002d64:	e0bffa17 	ldw	r2,-24(fp)
 1002d68:	10000726 	beq	r2,zero,1002d88 <prvWriteMessageToBuffer+0xb8>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 1002d6c:	e0bffe17 	ldw	r2,-8(fp)
 1002d70:	100d883a 	mov	r6,r2
 1002d74:	e17ffd17 	ldw	r5,-12(fp)
 1002d78:	e13ffc17 	ldw	r4,-16(fp)
 1002d7c:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d80:	e0bffb15 	stw	r2,-20(fp)
 1002d84:	00000106 	br	1002d8c <prvWriteMessageToBuffer+0xbc>
	}
	else
	{
		xReturn = 0;
 1002d88:	e03ffb15 	stw	zero,-20(fp)
	}

	return xReturn;
 1002d8c:	e0bffb17 	ldw	r2,-20(fp)
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	dfc00117 	ldw	ra,4(sp)
 1002d98:	df000017 	ldw	fp,0(sp)
 1002d9c:	dec00204 	addi	sp,sp,8
 1002da0:	f800283a 	ret

01002da4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 1002da4:	defff504 	addi	sp,sp,-44
 1002da8:	dfc00a15 	stw	ra,40(sp)
 1002dac:	df000915 	stw	fp,36(sp)
 1002db0:	df000904 	addi	fp,sp,36
 1002db4:	e13ffc15 	stw	r4,-16(fp)
 1002db8:	e17ffd15 	stw	r5,-12(fp)
 1002dbc:	e1bffe15 	stw	r6,-8(fp)
 1002dc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002dc4:	e0bffc17 	ldw	r2,-16(fp)
 1002dc8:	e0bffb15 	stw	r2,-20(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002dcc:	e03ff815 	stw	zero,-32(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002dd0:	e0bffb17 	ldw	r2,-20(fp)
 1002dd4:	10800703 	ldbu	r2,28(r2)
 1002dd8:	10803fcc 	andi	r2,r2,255
 1002ddc:	1080004c 	andi	r2,r2,1
 1002de0:	10000326 	beq	r2,zero,1002df0 <xStreamBufferReceive+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002de4:	00800104 	movi	r2,4
 1002de8:	e0bffa15 	stw	r2,-24(fp)
 1002dec:	00000106 	br	1002df4 <xStreamBufferReceive+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002df0:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002df4:	e0bfff17 	ldw	r2,-4(fp)
 1002df8:	10001c26 	beq	r2,zero,1002e6c <xStreamBufferReceive+0xc8>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 1002dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e00:	e13ffb17 	ldw	r4,-20(fp)
 1002e04:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e08:	e0bff915 	stw	r2,-28(fp)
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e0c:	e0bff917 	ldw	r2,-28(fp)
 1002e10:	e0fffa17 	ldw	r3,-24(fp)
 1002e14:	18800636 	bltu	r3,r2,1002e30 <xStreamBufferReceive+0x8c>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 1002e18:	0009883a 	mov	r4,zero
 1002e1c:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1002e20:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002e24:	1007883a 	mov	r3,r2
 1002e28:	e0bffb17 	ldw	r2,-20(fp)
 1002e2c:	10c00415 	stw	r3,16(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1002e30:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e34:	e0bff917 	ldw	r2,-28(fp)
 1002e38:	e0fffa17 	ldw	r3,-24(fp)
 1002e3c:	18800e36 	bltu	r3,r2,1002e78 <xStreamBufferReceive+0xd4>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002e40:	e1ffff17 	ldw	r7,-4(fp)
 1002e44:	000d883a 	mov	r6,zero
 1002e48:	000b883a 	mov	r5,zero
 1002e4c:	0009883a 	mov	r4,zero
 1002e50:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1002e54:	e0bffb17 	ldw	r2,-20(fp)
 1002e58:	10000415 	stw	zero,16(r2)

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e5c:	e13ffb17 	ldw	r4,-20(fp)
 1002e60:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e64:	e0bff915 	stw	r2,-28(fp)
 1002e68:	00000306 	br	1002e78 <xStreamBufferReceive+0xd4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e6c:	e13ffb17 	ldw	r4,-20(fp)
 1002e70:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e74:	e0bff915 	stw	r2,-28(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1002e78:	e0bff917 	ldw	r2,-28(fp)
 1002e7c:	e0fffa17 	ldw	r3,-24(fp)
 1002e80:	1880182e 	bgeu	r3,r2,1002ee4 <xStreamBufferReceive+0x140>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 1002e84:	e0bffa17 	ldw	r2,-24(fp)
 1002e88:	d8800015 	stw	r2,0(sp)
 1002e8c:	e1fff917 	ldw	r7,-28(fp)
 1002e90:	e1bffe17 	ldw	r6,-8(fp)
 1002e94:	e17ffd17 	ldw	r5,-12(fp)
 1002e98:	e13ffb17 	ldw	r4,-20(fp)
 1002e9c:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1002ea0:	e0bff815 	stw	r2,-32(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 1002ea4:	e0bff817 	ldw	r2,-32(fp)
 1002ea8:	10000e26 	beq	r2,zero,1002ee4 <xStreamBufferReceive+0x140>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 1002eac:	100435c0 	call	100435c <vTaskSuspendAll>
 1002eb0:	e0bffb17 	ldw	r2,-20(fp)
 1002eb4:	10800517 	ldw	r2,20(r2)
 1002eb8:	10000926 	beq	r2,zero,1002ee0 <xStreamBufferReceive+0x13c>
 1002ebc:	e0bffb17 	ldw	r2,-20(fp)
 1002ec0:	10800517 	ldw	r2,20(r2)
 1002ec4:	000f883a 	mov	r7,zero
 1002ec8:	000d883a 	mov	r6,zero
 1002ecc:	000b883a 	mov	r5,zero
 1002ed0:	1009883a 	mov	r4,r2
 1002ed4:	10055440 	call	1005544 <xTaskGenericNotify>
 1002ed8:	e0bffb17 	ldw	r2,-20(fp)
 1002edc:	10000515 	stw	zero,20(r2)
 1002ee0:	10043880 	call	1004388 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 1002ee4:	e0bff817 	ldw	r2,-32(fp)
}
 1002ee8:	e037883a 	mov	sp,fp
 1002eec:	dfc00117 	ldw	ra,4(sp)
 1002ef0:	df000017 	ldw	fp,0(sp)
 1002ef4:	dec00204 	addi	sp,sp,8
 1002ef8:	f800283a 	ret

01002efc <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 1002efc:	defff804 	addi	sp,sp,-32
 1002f00:	dfc00715 	stw	ra,28(sp)
 1002f04:	df000615 	stw	fp,24(sp)
 1002f08:	df000604 	addi	fp,sp,24
 1002f0c:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002f10:	e0bfff17 	ldw	r2,-4(fp)
 1002f14:	e0bffb15 	stw	r2,-20(fp)
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002f18:	e0bffb17 	ldw	r2,-20(fp)
 1002f1c:	10800703 	ldbu	r2,28(r2)
 1002f20:	10803fcc 	andi	r2,r2,255
 1002f24:	1080004c 	andi	r2,r2,1
 1002f28:	10001726 	beq	r2,zero,1002f88 <xStreamBufferNextMessageLengthBytes+0x8c>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002f2c:	e13ffb17 	ldw	r4,-20(fp)
 1002f30:	10035280 	call	1003528 <prvBytesInBuffer>
 1002f34:	e0bffc15 	stw	r2,-16(fp)
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 1002f38:	e0bffc17 	ldw	r2,-16(fp)
 1002f3c:	10800170 	cmpltui	r2,r2,5
 1002f40:	10000f1e 	bne	r2,zero,1002f80 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 1002f44:	e0bffb17 	ldw	r2,-20(fp)
 1002f48:	10800017 	ldw	r2,0(r2)
 1002f4c:	e0bffd15 	stw	r2,-12(fp)
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 1002f50:	e0bffe04 	addi	r2,fp,-8
 1002f54:	e1fffc17 	ldw	r7,-16(fp)
 1002f58:	01800104 	movi	r6,4
 1002f5c:	100b883a 	mov	r5,r2
 1002f60:	e13ffb17 	ldw	r4,-20(fp)
 1002f64:	10034140 	call	1003414 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 1002f68:	e0bffe17 	ldw	r2,-8(fp)
 1002f6c:	e0bffa15 	stw	r2,-24(fp)
			pxStreamBuffer->xTail = xOriginalTail;
 1002f70:	e0bffb17 	ldw	r2,-20(fp)
 1002f74:	e0fffd17 	ldw	r3,-12(fp)
 1002f78:	10c00015 	stw	r3,0(r2)
 1002f7c:	00000306 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
 1002f80:	e03ffa15 	stw	zero,-24(fp)
 1002f84:	00000106 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
		}
	}
	else
	{
		xReturn = 0;
 1002f88:	e03ffa15 	stw	zero,-24(fp)
	}

	return xReturn;
 1002f8c:	e0bffa17 	ldw	r2,-24(fp)
}
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002fa4:	defff404 	addi	sp,sp,-48
 1002fa8:	dfc00b15 	stw	ra,44(sp)
 1002fac:	df000a15 	stw	fp,40(sp)
 1002fb0:	df000a04 	addi	fp,sp,40
 1002fb4:	e13ffc15 	stw	r4,-16(fp)
 1002fb8:	e17ffd15 	stw	r5,-12(fp)
 1002fbc:	e1bffe15 	stw	r6,-8(fp)
 1002fc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002fc4:	e0bffc17 	ldw	r2,-16(fp)
 1002fc8:	e0bff915 	stw	r2,-28(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002fcc:	e03ff715 	stw	zero,-36(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002fd0:	e0bff917 	ldw	r2,-28(fp)
 1002fd4:	10800703 	ldbu	r2,28(r2)
 1002fd8:	10803fcc 	andi	r2,r2,255
 1002fdc:	1080004c 	andi	r2,r2,1
 1002fe0:	10000326 	beq	r2,zero,1002ff0 <xStreamBufferReceiveFromISR+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002fe4:	00800104 	movi	r2,4
 1002fe8:	e0bff815 	stw	r2,-32(fp)
 1002fec:	00000106 	br	1002ff4 <xStreamBufferReceiveFromISR+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002ff0:	e03ff815 	stw	zero,-32(fp)
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002ff4:	e13ff917 	ldw	r4,-28(fp)
 1002ff8:	10035280 	call	1003528 <prvBytesInBuffer>
 1002ffc:	e0bffa15 	stw	r2,-24(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1003000:	e0bffa17 	ldw	r2,-24(fp)
 1003004:	e0fff817 	ldw	r3,-32(fp)
 1003008:	1880192e 	bgeu	r3,r2,1003070 <xStreamBufferReceiveFromISR+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 100300c:	e0bff817 	ldw	r2,-32(fp)
 1003010:	d8800015 	stw	r2,0(sp)
 1003014:	e1fffa17 	ldw	r7,-24(fp)
 1003018:	e1bffe17 	ldw	r6,-8(fp)
 100301c:	e17ffd17 	ldw	r5,-12(fp)
 1003020:	e13ff917 	ldw	r4,-28(fp)
 1003024:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1003028:	e0bff715 	stw	r2,-36(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 100302c:	e0bff717 	ldw	r2,-36(fp)
 1003030:	10000f26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1003034:	e03ffb15 	stw	zero,-20(fp)
 1003038:	e0bff917 	ldw	r2,-28(fp)
 100303c:	10800517 	ldw	r2,20(r2)
 1003040:	10000b26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
 1003044:	e0bff917 	ldw	r2,-28(fp)
 1003048:	10c00517 	ldw	r3,20(r2)
 100304c:	e0bfff17 	ldw	r2,-4(fp)
 1003050:	d8800015 	stw	r2,0(sp)
 1003054:	000f883a 	mov	r7,zero
 1003058:	000d883a 	mov	r6,zero
 100305c:	000b883a 	mov	r5,zero
 1003060:	1809883a 	mov	r4,r3
 1003064:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1003068:	e0bff917 	ldw	r2,-28(fp)
 100306c:	10000515 	stw	zero,20(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 1003070:	e0bff717 	ldw	r2,-36(fp)
}
 1003074:	e037883a 	mov	sp,fp
 1003078:	dfc00117 	ldw	ra,4(sp)
 100307c:	df000017 	ldw	fp,0(sp)
 1003080:	dec00204 	addi	sp,sp,8
 1003084:	f800283a 	ret

01003088 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 1003088:	defff604 	addi	sp,sp,-40
 100308c:	dfc00915 	stw	ra,36(sp)
 1003090:	df000815 	stw	fp,32(sp)
 1003094:	df000804 	addi	fp,sp,32
 1003098:	e13ffc15 	stw	r4,-16(fp)
 100309c:	e17ffd15 	stw	r5,-12(fp)
 10030a0:	e1bffe15 	stw	r6,-8(fp)
 10030a4:	e1ffff15 	stw	r7,-4(fp)
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 10030a8:	e0800217 	ldw	r2,8(fp)
 10030ac:	10001726 	beq	r2,zero,100310c <prvReadMessageFromBuffer+0x84>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 10030b0:	e0bffc17 	ldw	r2,-16(fp)
 10030b4:	10800017 	ldw	r2,0(r2)
 10030b8:	e0bff915 	stw	r2,-28(fp)
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 10030bc:	e0bffb04 	addi	r2,fp,-20
 10030c0:	e1ffff17 	ldw	r7,-4(fp)
 10030c4:	e1800217 	ldw	r6,8(fp)
 10030c8:	100b883a 	mov	r5,r2
 10030cc:	e13ffc17 	ldw	r4,-16(fp)
 10030d0:	10034140 	call	1003414 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 10030d4:	e0bffb17 	ldw	r2,-20(fp)
 10030d8:	e0bff815 	stw	r2,-32(fp)

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 10030dc:	e0ffff17 	ldw	r3,-4(fp)
 10030e0:	e0800217 	ldw	r2,8(fp)
 10030e4:	1885c83a 	sub	r2,r3,r2
 10030e8:	e0bfff15 	stw	r2,-4(fp)

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 10030ec:	e0bff817 	ldw	r2,-32(fp)
 10030f0:	e0fffe17 	ldw	r3,-8(fp)
 10030f4:	1880072e 	bgeu	r3,r2,1003114 <prvReadMessageFromBuffer+0x8c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 10030f8:	e0bffc17 	ldw	r2,-16(fp)
 10030fc:	e0fff917 	ldw	r3,-28(fp)
 1003100:	10c00015 	stw	r3,0(r2)
			xNextMessageLength = 0;
 1003104:	e03ff815 	stw	zero,-32(fp)
 1003108:	00000206 	br	1003114 <prvReadMessageFromBuffer+0x8c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 100310c:	e0bffe17 	ldw	r2,-8(fp)
 1003110:	e0bff815 	stw	r2,-32(fp)
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 1003114:	e1ffff17 	ldw	r7,-4(fp)
 1003118:	e1bff817 	ldw	r6,-32(fp)
 100311c:	e17ffd17 	ldw	r5,-12(fp)
 1003120:	e13ffc17 	ldw	r4,-16(fp)
 1003124:	10034140 	call	1003414 <prvReadBytesFromBuffer>
 1003128:	e0bffa15 	stw	r2,-24(fp)

	return xReceivedLength;
 100312c:	e0bffa17 	ldw	r2,-24(fp)
}
 1003130:	e037883a 	mov	sp,fp
 1003134:	dfc00117 	ldw	ra,4(sp)
 1003138:	df000017 	ldw	fp,0(sp)
 100313c:	dec00204 	addi	sp,sp,8
 1003140:	f800283a 	ret

01003144 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 1003144:	defffb04 	addi	sp,sp,-20
 1003148:	df000415 	stw	fp,16(sp)
 100314c:	df000404 	addi	fp,sp,16
 1003150:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003154:	e0bfff17 	ldw	r2,-4(fp)
 1003158:	e0bffd15 	stw	r2,-12(fp)
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 100315c:	e0bffd17 	ldw	r2,-12(fp)
 1003160:	10800017 	ldw	r2,0(r2)
 1003164:	e0bffe15 	stw	r2,-8(fp)
	if( pxStreamBuffer->xHead == xTail )
 1003168:	e0bffd17 	ldw	r2,-12(fp)
 100316c:	10c00117 	ldw	r3,4(r2)
 1003170:	e0bffe17 	ldw	r2,-8(fp)
 1003174:	1880031e 	bne	r3,r2,1003184 <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 1003178:	00800044 	movi	r2,1
 100317c:	e0bffc15 	stw	r2,-16(fp)
 1003180:	00000106 	br	1003188 <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 1003184:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003188:	e0bffc17 	ldw	r2,-16(fp)
}
 100318c:	e037883a 	mov	sp,fp
 1003190:	df000017 	ldw	fp,0(sp)
 1003194:	dec00104 	addi	sp,sp,4
 1003198:	f800283a 	ret

0100319c <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 100319c:	defffa04 	addi	sp,sp,-24
 10031a0:	dfc00515 	stw	ra,20(sp)
 10031a4:	df000415 	stw	fp,16(sp)
 10031a8:	df000404 	addi	fp,sp,16
 10031ac:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10031b0:	e0bfff17 	ldw	r2,-4(fp)
 10031b4:	e0bffe15 	stw	r2,-8(fp)

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 10031b8:	e0bffe17 	ldw	r2,-8(fp)
 10031bc:	10800703 	ldbu	r2,28(r2)
 10031c0:	10803fcc 	andi	r2,r2,255
 10031c4:	1080004c 	andi	r2,r2,1
 10031c8:	10000326 	beq	r2,zero,10031d8 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 10031cc:	00800104 	movi	r2,4
 10031d0:	e0bffd15 	stw	r2,-12(fp)
 10031d4:	00000106 	br	10031dc <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 10031d8:	e03ffd15 	stw	zero,-12(fp)
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 10031dc:	e13fff17 	ldw	r4,-4(fp)
 10031e0:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 10031e4:	1007883a 	mov	r3,r2
 10031e8:	e0bffd17 	ldw	r2,-12(fp)
 10031ec:	10c00336 	bltu	r2,r3,10031fc <xStreamBufferIsFull+0x60>
	{
		xReturn = pdTRUE;
 10031f0:	00800044 	movi	r2,1
 10031f4:	e0bffc15 	stw	r2,-16(fp)
 10031f8:	00000106 	br	1003200 <xStreamBufferIsFull+0x64>
	}
	else
	{
		xReturn = pdFALSE;
 10031fc:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003200:	e0bffc17 	ldw	r2,-16(fp)
}
 1003204:	e037883a 	mov	sp,fp
 1003208:	dfc00117 	ldw	ra,4(sp)
 100320c:	df000017 	ldw	fp,0(sp)
 1003210:	dec00204 	addi	sp,sp,8
 1003214:	f800283a 	ret

01003218 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 1003218:	defff804 	addi	sp,sp,-32
 100321c:	dfc00715 	stw	ra,28(sp)
 1003220:	df000615 	stw	fp,24(sp)
 1003224:	df000604 	addi	fp,sp,24
 1003228:	e13ffe15 	stw	r4,-8(fp)
 100322c:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003230:	e0bffe17 	ldw	r2,-8(fp)
 1003234:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1003238:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 100323c:	e0bffc17 	ldw	r2,-16(fp)
 1003240:	10800417 	ldw	r2,16(r2)
 1003244:	10000e26 	beq	r2,zero,1003280 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1003248:	e0bffc17 	ldw	r2,-16(fp)
 100324c:	10c00417 	ldw	r3,16(r2)
 1003250:	e0bfff17 	ldw	r2,-4(fp)
 1003254:	d8800015 	stw	r2,0(sp)
 1003258:	000f883a 	mov	r7,zero
 100325c:	000d883a 	mov	r6,zero
 1003260:	000b883a 	mov	r5,zero
 1003264:	1809883a 	mov	r4,r3
 1003268:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 100326c:	e0bffc17 	ldw	r2,-16(fp)
 1003270:	10000415 	stw	zero,16(r2)
			xReturn = pdTRUE;
 1003274:	00800044 	movi	r2,1
 1003278:	e0bffb15 	stw	r2,-20(fp)
 100327c:	00000106 	br	1003284 <xStreamBufferSendCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003280:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003284:	e0bffb17 	ldw	r2,-20(fp)
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 100329c:	defff804 	addi	sp,sp,-32
 10032a0:	dfc00715 	stw	ra,28(sp)
 10032a4:	df000615 	stw	fp,24(sp)
 10032a8:	df000604 	addi	fp,sp,24
 10032ac:	e13ffe15 	stw	r4,-8(fp)
 10032b0:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10032b4:	e0bffe17 	ldw	r2,-8(fp)
 10032b8:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 10032bc:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 10032c0:	e0bffc17 	ldw	r2,-16(fp)
 10032c4:	10800517 	ldw	r2,20(r2)
 10032c8:	10000e26 	beq	r2,zero,1003304 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 10032cc:	e0bffc17 	ldw	r2,-16(fp)
 10032d0:	10c00517 	ldw	r3,20(r2)
 10032d4:	e0bfff17 	ldw	r2,-4(fp)
 10032d8:	d8800015 	stw	r2,0(sp)
 10032dc:	000f883a 	mov	r7,zero
 10032e0:	000d883a 	mov	r6,zero
 10032e4:	000b883a 	mov	r5,zero
 10032e8:	1809883a 	mov	r4,r3
 10032ec:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 10032f0:	e0bffc17 	ldw	r2,-16(fp)
 10032f4:	10000515 	stw	zero,20(r2)
			xReturn = pdTRUE;
 10032f8:	00800044 	movi	r2,1
 10032fc:	e0bffb15 	stw	r2,-20(fp)
 1003300:	00000106 	br	1003308 <xStreamBufferReceiveCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003304:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003308:	e0bffb17 	ldw	r2,-20(fp)
}
 100330c:	e037883a 	mov	sp,fp
 1003310:	dfc00117 	ldw	ra,4(sp)
 1003314:	df000017 	ldw	fp,0(sp)
 1003318:	dec00204 	addi	sp,sp,8
 100331c:	f800283a 	ret

01003320 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 1003320:	defff904 	addi	sp,sp,-28
 1003324:	dfc00615 	stw	ra,24(sp)
 1003328:	df000515 	stw	fp,20(sp)
 100332c:	df000504 	addi	fp,sp,20
 1003330:	e13ffd15 	stw	r4,-12(fp)
 1003334:	e17ffe15 	stw	r5,-8(fp)
 1003338:	e1bfff15 	stw	r6,-4(fp)
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
 100333c:	e0bffd17 	ldw	r2,-12(fp)
 1003340:	10800117 	ldw	r2,4(r2)
 1003344:	e0bffb15 	stw	r2,-20(fp)

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1003348:	e0bffd17 	ldw	r2,-12(fp)
 100334c:	10c00217 	ldw	r3,8(r2)
 1003350:	e0bffb17 	ldw	r2,-20(fp)
 1003354:	1885c83a 	sub	r2,r3,r2
 1003358:	e0ffff17 	ldw	r3,-4(fp)
 100335c:	1880012e 	bgeu	r3,r2,1003364 <prvWriteBytesToBuffer+0x44>
 1003360:	1805883a 	mov	r2,r3
 1003364:	e0bffc15 	stw	r2,-16(fp)

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003368:	e0bffd17 	ldw	r2,-12(fp)
 100336c:	10c00617 	ldw	r3,24(r2)
 1003370:	e0bffb17 	ldw	r2,-20(fp)
 1003374:	1885883a 	add	r2,r3,r2
 1003378:	e1bffc17 	ldw	r6,-16(fp)
 100337c:	e17ffe17 	ldw	r5,-8(fp)
 1003380:	1009883a 	mov	r4,r2
 1003384:	1008d600 	call	1008d60 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 1003388:	e0bfff17 	ldw	r2,-4(fp)
 100338c:	e0fffc17 	ldw	r3,-16(fp)
 1003390:	18800a2e 	bgeu	r3,r2,10033bc <prvWriteBytesToBuffer+0x9c>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003394:	e0bffd17 	ldw	r2,-12(fp)
 1003398:	11000617 	ldw	r4,24(r2)
 100339c:	e0fffe17 	ldw	r3,-8(fp)
 10033a0:	e0bffc17 	ldw	r2,-16(fp)
 10033a4:	188b883a 	add	r5,r3,r2
 10033a8:	e0ffff17 	ldw	r3,-4(fp)
 10033ac:	e0bffc17 	ldw	r2,-16(fp)
 10033b0:	1885c83a 	sub	r2,r3,r2
 10033b4:	100d883a 	mov	r6,r2
 10033b8:	1008d600 	call	1008d60 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 10033bc:	e0fffb17 	ldw	r3,-20(fp)
 10033c0:	e0bfff17 	ldw	r2,-4(fp)
 10033c4:	1885883a 	add	r2,r3,r2
 10033c8:	e0bffb15 	stw	r2,-20(fp)
	if( xNextHead >= pxStreamBuffer->xLength )
 10033cc:	e0bffd17 	ldw	r2,-12(fp)
 10033d0:	10800217 	ldw	r2,8(r2)
 10033d4:	e0fffb17 	ldw	r3,-20(fp)
 10033d8:	18800536 	bltu	r3,r2,10033f0 <prvWriteBytesToBuffer+0xd0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 10033dc:	e0bffd17 	ldw	r2,-12(fp)
 10033e0:	10800217 	ldw	r2,8(r2)
 10033e4:	e0fffb17 	ldw	r3,-20(fp)
 10033e8:	1885c83a 	sub	r2,r3,r2
 10033ec:	e0bffb15 	stw	r2,-20(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 10033f0:	e0bffd17 	ldw	r2,-12(fp)
 10033f4:	e0fffb17 	ldw	r3,-20(fp)
 10033f8:	10c00115 	stw	r3,4(r2)

	return xCount;
 10033fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003400:	e037883a 	mov	sp,fp
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	df000017 	ldw	fp,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 1003414:	defff704 	addi	sp,sp,-36
 1003418:	dfc00815 	stw	ra,32(sp)
 100341c:	df000715 	stw	fp,28(sp)
 1003420:	df000704 	addi	fp,sp,28
 1003424:	e13ffc15 	stw	r4,-16(fp)
 1003428:	e17ffd15 	stw	r5,-12(fp)
 100342c:	e1bffe15 	stw	r6,-8(fp)
 1003430:	e1ffff15 	stw	r7,-4(fp)
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 1003434:	e0ffff17 	ldw	r3,-4(fp)
 1003438:	e0bffe17 	ldw	r2,-8(fp)
 100343c:	1880012e 	bgeu	r3,r2,1003444 <prvReadBytesFromBuffer+0x30>
 1003440:	1805883a 	mov	r2,r3
 1003444:	e0bffa15 	stw	r2,-24(fp)

	if( xCount > ( size_t ) 0 )
 1003448:	e0bffa17 	ldw	r2,-24(fp)
 100344c:	10003026 	beq	r2,zero,1003510 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 1003450:	e0bffc17 	ldw	r2,-16(fp)
 1003454:	10800017 	ldw	r2,0(r2)
 1003458:	e0bff915 	stw	r2,-28(fp)

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 100345c:	e0bffc17 	ldw	r2,-16(fp)
 1003460:	10c00217 	ldw	r3,8(r2)
 1003464:	e0bff917 	ldw	r2,-28(fp)
 1003468:	1885c83a 	sub	r2,r3,r2
 100346c:	e0fffa17 	ldw	r3,-24(fp)
 1003470:	1880012e 	bgeu	r3,r2,1003478 <prvReadBytesFromBuffer+0x64>
 1003474:	1805883a 	mov	r2,r3
 1003478:	e0bffb15 	stw	r2,-20(fp)

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 100347c:	e0bffc17 	ldw	r2,-16(fp)
 1003480:	10c00617 	ldw	r3,24(r2)
 1003484:	e0bff917 	ldw	r2,-28(fp)
 1003488:	1885883a 	add	r2,r3,r2
 100348c:	e1bffb17 	ldw	r6,-20(fp)
 1003490:	100b883a 	mov	r5,r2
 1003494:	e13ffd17 	ldw	r4,-12(fp)
 1003498:	1008d600 	call	1008d60 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 100349c:	e0bffa17 	ldw	r2,-24(fp)
 10034a0:	e0fffb17 	ldw	r3,-20(fp)
 10034a4:	18800a2e 	bgeu	r3,r2,10034d0 <prvReadBytesFromBuffer+0xbc>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 10034a8:	e0fffd17 	ldw	r3,-12(fp)
 10034ac:	e0bffb17 	ldw	r2,-20(fp)
 10034b0:	1889883a 	add	r4,r3,r2
 10034b4:	e0bffc17 	ldw	r2,-16(fp)
 10034b8:	11400617 	ldw	r5,24(r2)
 10034bc:	e0fffa17 	ldw	r3,-24(fp)
 10034c0:	e0bffb17 	ldw	r2,-20(fp)
 10034c4:	1885c83a 	sub	r2,r3,r2
 10034c8:	100d883a 	mov	r6,r2
 10034cc:	1008d600 	call	1008d60 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 10034d0:	e0fff917 	ldw	r3,-28(fp)
 10034d4:	e0bffa17 	ldw	r2,-24(fp)
 10034d8:	1885883a 	add	r2,r3,r2
 10034dc:	e0bff915 	stw	r2,-28(fp)

		if( xNextTail >= pxStreamBuffer->xLength )
 10034e0:	e0bffc17 	ldw	r2,-16(fp)
 10034e4:	10800217 	ldw	r2,8(r2)
 10034e8:	e0fff917 	ldw	r3,-28(fp)
 10034ec:	18800536 	bltu	r3,r2,1003504 <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 10034f0:	e0bffc17 	ldw	r2,-16(fp)
 10034f4:	10800217 	ldw	r2,8(r2)
 10034f8:	e0fff917 	ldw	r3,-28(fp)
 10034fc:	1885c83a 	sub	r2,r3,r2
 1003500:	e0bff915 	stw	r2,-28(fp)
		}

		pxStreamBuffer->xTail = xNextTail;
 1003504:	e0bffc17 	ldw	r2,-16(fp)
 1003508:	e0fff917 	ldw	r3,-28(fp)
 100350c:	10c00015 	stw	r3,0(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003510:	e0bffa17 	ldw	r2,-24(fp)
}
 1003514:	e037883a 	mov	sp,fp
 1003518:	dfc00117 	ldw	ra,4(sp)
 100351c:	df000017 	ldw	fp,0(sp)
 1003520:	dec00204 	addi	sp,sp,8
 1003524:	f800283a 	ret

01003528 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 1003528:	defffd04 	addi	sp,sp,-12
 100352c:	df000215 	stw	fp,8(sp)
 1003530:	df000204 	addi	fp,sp,8
 1003534:	e13fff15 	stw	r4,-4(fp)
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1003538:	e0bfff17 	ldw	r2,-4(fp)
 100353c:	10c00217 	ldw	r3,8(r2)
 1003540:	e0bfff17 	ldw	r2,-4(fp)
 1003544:	10800117 	ldw	r2,4(r2)
 1003548:	1885883a 	add	r2,r3,r2
 100354c:	e0bffe15 	stw	r2,-8(fp)
	xCount -= pxStreamBuffer->xTail;
 1003550:	e0bfff17 	ldw	r2,-4(fp)
 1003554:	10800017 	ldw	r2,0(r2)
 1003558:	e0fffe17 	ldw	r3,-8(fp)
 100355c:	1885c83a 	sub	r2,r3,r2
 1003560:	e0bffe15 	stw	r2,-8(fp)
	if ( xCount >= pxStreamBuffer->xLength )
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	10800217 	ldw	r2,8(r2)
 100356c:	e0fffe17 	ldw	r3,-8(fp)
 1003570:	18800536 	bltu	r3,r2,1003588 <prvBytesInBuffer+0x60>
	{
		xCount -= pxStreamBuffer->xLength;
 1003574:	e0bfff17 	ldw	r2,-4(fp)
 1003578:	10800217 	ldw	r2,8(r2)
 100357c:	e0fffe17 	ldw	r3,-8(fp)
 1003580:	1885c83a 	sub	r2,r3,r2
 1003584:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003588:	e0bffe17 	ldw	r2,-8(fp)
}
 100358c:	e037883a 	mov	sp,fp
 1003590:	df000017 	ldw	fp,0(sp)
 1003594:	dec00104 	addi	sp,sp,4
 1003598:	f800283a 	ret

0100359c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 100359c:	defff904 	addi	sp,sp,-28
 10035a0:	dfc00615 	stw	ra,24(sp)
 10035a4:	df000515 	stw	fp,20(sp)
 10035a8:	df000504 	addi	fp,sp,20
 10035ac:	e13ffb15 	stw	r4,-20(fp)
 10035b0:	e17ffc15 	stw	r5,-16(fp)
 10035b4:	e1bffd15 	stw	r6,-12(fp)
 10035b8:	e1fffe15 	stw	r7,-8(fp)
 10035bc:	e0800217 	ldw	r2,8(fp)
 10035c0:	e0bfff05 	stb	r2,-4(fp)
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 10035c4:	01800804 	movi	r6,32
 10035c8:	000b883a 	mov	r5,zero
 10035cc:	e13ffb17 	ldw	r4,-20(fp)
 10035d0:	1008ea80 	call	1008ea8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 10035d4:	e0bffb17 	ldw	r2,-20(fp)
 10035d8:	e0fffc17 	ldw	r3,-16(fp)
 10035dc:	10c00615 	stw	r3,24(r2)
	pxStreamBuffer->xLength = xBufferSizeBytes;
 10035e0:	e0bffb17 	ldw	r2,-20(fp)
 10035e4:	e0fffd17 	ldw	r3,-12(fp)
 10035e8:	10c00215 	stw	r3,8(r2)
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 10035ec:	e0bffb17 	ldw	r2,-20(fp)
 10035f0:	e0fffe17 	ldw	r3,-8(fp)
 10035f4:	10c00315 	stw	r3,12(r2)
	pxStreamBuffer->ucFlags = ucFlags;
 10035f8:	e0bffb17 	ldw	r2,-20(fp)
 10035fc:	e0ffff03 	ldbu	r3,-4(fp)
 1003600:	10c00705 	stb	r3,28(r2)
}
 1003604:	0001883a 	nop
 1003608:	e037883a 	mov	sp,fp
 100360c:	dfc00117 	ldw	ra,4(sp)
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00204 	addi	sp,sp,8
 1003618:	f800283a 	ret

0100361c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 100361c:	defff304 	addi	sp,sp,-52
 1003620:	dfc00c15 	stw	ra,48(sp)
 1003624:	df000b15 	stw	fp,44(sp)
 1003628:	df000b04 	addi	fp,sp,44
 100362c:	e13ffc15 	stw	r4,-16(fp)
 1003630:	e17ffd15 	stw	r5,-12(fp)
 1003634:	3005883a 	mov	r2,r6
 1003638:	e1ffff15 	stw	r7,-4(fp)
 100363c:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 1003640:	e0bffe0b 	ldhu	r2,-8(fp)
 1003644:	1085883a 	add	r2,r2,r2
 1003648:	1085883a 	add	r2,r2,r2
 100364c:	1009883a 	mov	r4,r2
 1003650:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003654:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 1003658:	e0bffb17 	ldw	r2,-20(fp)
 100365c:	10000c26 	beq	r2,zero,1003690 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 1003660:	01001404 	movi	r4,80
 1003664:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003668:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 100366c:	e0bff917 	ldw	r2,-28(fp)
 1003670:	10000426 	beq	r2,zero,1003684 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 1003674:	e0bff917 	ldw	r2,-28(fp)
 1003678:	e0fffb17 	ldw	r3,-20(fp)
 100367c:	10c00c15 	stw	r3,48(r2)
 1003680:	00000406 	br	1003694 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 1003684:	e13ffb17 	ldw	r4,-20(fp)
 1003688:	10011840 	call	1001184 <vPortFree>
 100368c:	00000106 	br	1003694 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 1003690:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 1003694:	e0bff917 	ldw	r2,-28(fp)
 1003698:	10001226 	beq	r2,zero,10036e4 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 100369c:	e0fffe0b 	ldhu	r3,-8(fp)
 10036a0:	d8000315 	stw	zero,12(sp)
 10036a4:	e0bff917 	ldw	r2,-28(fp)
 10036a8:	d8800215 	stw	r2,8(sp)
 10036ac:	e0800317 	ldw	r2,12(fp)
 10036b0:	d8800115 	stw	r2,4(sp)
 10036b4:	e0800217 	ldw	r2,8(fp)
 10036b8:	d8800015 	stw	r2,0(sp)
 10036bc:	e1ffff17 	ldw	r7,-4(fp)
 10036c0:	180d883a 	mov	r6,r3
 10036c4:	e17ffd17 	ldw	r5,-12(fp)
 10036c8:	e13ffc17 	ldw	r4,-16(fp)
 10036cc:	10037040 	call	1003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 10036d0:	e13ff917 	ldw	r4,-28(fp)
 10036d4:	10038e80 	call	10038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 10036d8:	00800044 	movi	r2,1
 10036dc:	e0bffa15 	stw	r2,-24(fp)
 10036e0:	00000206 	br	10036ec <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 10036e4:	00bfffc4 	movi	r2,-1
 10036e8:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 10036ec:	e0bffa17 	ldw	r2,-24(fp)
	}
 10036f0:	e037883a 	mov	sp,fp
 10036f4:	dfc00117 	ldw	ra,4(sp)
 10036f8:	df000017 	ldw	fp,0(sp)
 10036fc:	dec00204 	addi	sp,sp,8
 1003700:	f800283a 	ret

01003704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 1003704:	defff804 	addi	sp,sp,-32
 1003708:	dfc00715 	stw	ra,28(sp)
 100370c:	df000615 	stw	fp,24(sp)
 1003710:	df000604 	addi	fp,sp,24
 1003714:	e13ffc15 	stw	r4,-16(fp)
 1003718:	e17ffd15 	stw	r5,-12(fp)
 100371c:	e1bffe15 	stw	r6,-8(fp)
 1003720:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 1003724:	e0800417 	ldw	r2,16(fp)
 1003728:	10c00c17 	ldw	r3,48(r2)
 100372c:	e0bffe17 	ldw	r2,-8(fp)
 1003730:	1085883a 	add	r2,r2,r2
 1003734:	1085883a 	add	r2,r2,r2
 1003738:	100d883a 	mov	r6,r2
 100373c:	01402944 	movi	r5,165
 1003740:	1809883a 	mov	r4,r3
 1003744:	1008ea80 	call	1008ea8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 1003748:	e0800417 	ldw	r2,16(fp)
 100374c:	10c00c17 	ldw	r3,48(r2)
 1003750:	e13ffe17 	ldw	r4,-8(fp)
 1003754:	00900034 	movhi	r2,16384
 1003758:	10bfffc4 	addi	r2,r2,-1
 100375c:	2085883a 	add	r2,r4,r2
 1003760:	1085883a 	add	r2,r2,r2
 1003764:	1085883a 	add	r2,r2,r2
 1003768:	1885883a 	add	r2,r3,r2
 100376c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 1003770:	e0fffb17 	ldw	r3,-20(fp)
 1003774:	00bfff04 	movi	r2,-4
 1003778:	1884703a 	and	r2,r3,r2
 100377c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 1003780:	e0bffd17 	ldw	r2,-12(fp)
 1003784:	10001e26 	beq	r2,zero,1003800 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 1003788:	e03ffa15 	stw	zero,-24(fp)
 100378c:	00001406 	br	10037e0 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 1003790:	e0fffd17 	ldw	r3,-12(fp)
 1003794:	e0bffa17 	ldw	r2,-24(fp)
 1003798:	1885883a 	add	r2,r3,r2
 100379c:	10c00003 	ldbu	r3,0(r2)
 10037a0:	e1000417 	ldw	r4,16(fp)
 10037a4:	e0bffa17 	ldw	r2,-24(fp)
 10037a8:	2085883a 	add	r2,r4,r2
 10037ac:	10800d04 	addi	r2,r2,52
 10037b0:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 10037b4:	e0fffd17 	ldw	r3,-12(fp)
 10037b8:	e0bffa17 	ldw	r2,-24(fp)
 10037bc:	1885883a 	add	r2,r3,r2
 10037c0:	10800003 	ldbu	r2,0(r2)
 10037c4:	10803fcc 	andi	r2,r2,255
 10037c8:	1080201c 	xori	r2,r2,128
 10037cc:	10bfe004 	addi	r2,r2,-128
 10037d0:	10000726 	beq	r2,zero,10037f0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 10037d4:	e0bffa17 	ldw	r2,-24(fp)
 10037d8:	10800044 	addi	r2,r2,1
 10037dc:	e0bffa15 	stw	r2,-24(fp)
 10037e0:	e0bffa17 	ldw	r2,-24(fp)
 10037e4:	10800230 	cmpltui	r2,r2,8
 10037e8:	103fe91e 	bne	r2,zero,1003790 <__alt_data_end+0xff003790>
 10037ec:	00000106 	br	10037f4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 10037f0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 10037f4:	e0800417 	ldw	r2,16(fp)
 10037f8:	10000ec5 	stb	zero,59(r2)
 10037fc:	00000206 	br	1003808 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 1003800:	e0800417 	ldw	r2,16(fp)
 1003804:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003808:	e0800217 	ldw	r2,8(fp)
 100380c:	10800170 	cmpltui	r2,r2,5
 1003810:	1000021e 	bne	r2,zero,100381c <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003814:	00800104 	movi	r2,4
 1003818:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 100381c:	e0800417 	ldw	r2,16(fp)
 1003820:	e0c00217 	ldw	r3,8(fp)
 1003824:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 1003828:	e0800417 	ldw	r2,16(fp)
 100382c:	e0c00217 	ldw	r3,8(fp)
 1003830:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 1003834:	e0800417 	ldw	r2,16(fp)
 1003838:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 100383c:	e0800417 	ldw	r2,16(fp)
 1003840:	10800104 	addi	r2,r2,4
 1003844:	1009883a 	mov	r4,r2
 1003848:	1000b540 	call	1000b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 100384c:	e0800417 	ldw	r2,16(fp)
 1003850:	10800604 	addi	r2,r2,24
 1003854:	1009883a 	mov	r4,r2
 1003858:	1000b540 	call	1000b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 100385c:	e0800417 	ldw	r2,16(fp)
 1003860:	e0c00417 	ldw	r3,16(fp)
 1003864:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003868:	00c00144 	movi	r3,5
 100386c:	e0800217 	ldw	r2,8(fp)
 1003870:	1887c83a 	sub	r3,r3,r2
 1003874:	e0800417 	ldw	r2,16(fp)
 1003878:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 100387c:	e0800417 	ldw	r2,16(fp)
 1003880:	e0c00417 	ldw	r3,16(fp)
 1003884:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 1003888:	e0800417 	ldw	r2,16(fp)
 100388c:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 1003890:	e0800417 	ldw	r2,16(fp)
 1003894:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003898:	e0800417 	ldw	r2,16(fp)
 100389c:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 10038a0:	e1bfff17 	ldw	r6,-4(fp)
 10038a4:	e17ffc17 	ldw	r5,-16(fp)
 10038a8:	e13ffb17 	ldw	r4,-20(fp)
 10038ac:	1000da80 	call	1000da8 <pxPortInitialiseStack>
 10038b0:	1007883a 	mov	r3,r2
 10038b4:	e0800417 	ldw	r2,16(fp)
 10038b8:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 10038bc:	e0800317 	ldw	r2,12(fp)
 10038c0:	10000326 	beq	r2,zero,10038d0 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 10038c4:	e0800317 	ldw	r2,12(fp)
 10038c8:	e0c00417 	ldw	r3,16(fp)
 10038cc:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10038d0:	0001883a 	nop
 10038d4:	e037883a 	mov	sp,fp
 10038d8:	dfc00117 	ldw	ra,4(sp)
 10038dc:	df000017 	ldw	fp,0(sp)
 10038e0:	dec00204 	addi	sp,sp,8
 10038e4:	f800283a 	ret

010038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 10038e8:	defffd04 	addi	sp,sp,-12
 10038ec:	dfc00215 	stw	ra,8(sp)
 10038f0:	df000115 	stw	fp,4(sp)
 10038f4:	df000104 	addi	fp,sp,4
 10038f8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 10038fc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 1003900:	d0a71717 	ldw	r2,-25508(gp)
 1003904:	10800044 	addi	r2,r2,1
 1003908:	d0a71715 	stw	r2,-25508(gp)
		if( pxCurrentTCB == NULL )
 100390c:	d0a71317 	ldw	r2,-25524(gp)
 1003910:	1000071e 	bne	r2,zero,1003930 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 1003914:	e0bfff17 	ldw	r2,-4(fp)
 1003918:	d0a71315 	stw	r2,-25524(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 100391c:	d0a71717 	ldw	r2,-25508(gp)
 1003920:	10800058 	cmpnei	r2,r2,1
 1003924:	10000b1e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 1003928:	1004c380 	call	1004c38 <prvInitialiseTaskLists>
 100392c:	00000906 	br	1003954 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 1003930:	d0a71a17 	ldw	r2,-25496(gp)
 1003934:	1000071e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 1003938:	d0a71317 	ldw	r2,-25524(gp)
 100393c:	10800b17 	ldw	r2,44(r2)
 1003940:	e0ffff17 	ldw	r3,-4(fp)
 1003944:	18c00b17 	ldw	r3,44(r3)
 1003948:	18800236 	bltu	r3,r2,1003954 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 100394c:	e0bfff17 	ldw	r2,-4(fp)
 1003950:	d0a71315 	stw	r2,-25524(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 1003954:	d0a71e17 	ldw	r2,-25480(gp)
 1003958:	10800044 	addi	r2,r2,1
 100395c:	d0a71e15 	stw	r2,-25480(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 1003960:	e0bfff17 	ldw	r2,-4(fp)
 1003964:	10800b17 	ldw	r2,44(r2)
 1003968:	d0e71917 	ldw	r3,-25500(gp)
 100396c:	1880032e 	bgeu	r3,r2,100397c <prvAddNewTaskToReadyList+0x94>
 1003970:	e0bfff17 	ldw	r2,-4(fp)
 1003974:	10800b17 	ldw	r2,44(r2)
 1003978:	d0a71915 	stw	r2,-25500(gp)
 100397c:	e0bfff17 	ldw	r2,-4(fp)
 1003980:	10800b17 	ldw	r2,44(r2)
 1003984:	10c00524 	muli	r3,r2,20
 1003988:	008060b4 	movhi	r2,386
 100398c:	10ba6804 	addi	r2,r2,-5728
 1003990:	1887883a 	add	r3,r3,r2
 1003994:	e0bfff17 	ldw	r2,-4(fp)
 1003998:	10800104 	addi	r2,r2,4
 100399c:	100b883a 	mov	r5,r2
 10039a0:	1809883a 	mov	r4,r3
 10039a4:	1000b800 	call	1000b80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 10039a8:	10052c40 	call	10052c4 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 10039ac:	d0a71a17 	ldw	r2,-25496(gp)
 10039b0:	10000626 	beq	r2,zero,10039cc <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 10039b4:	d0a71317 	ldw	r2,-25524(gp)
 10039b8:	10c00b17 	ldw	r3,44(r2)
 10039bc:	e0bfff17 	ldw	r2,-4(fp)
 10039c0:	10800b17 	ldw	r2,44(r2)
 10039c4:	1880012e 	bgeu	r3,r2,10039cc <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 10039c8:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10039cc:	0001883a 	nop
 10039d0:	e037883a 	mov	sp,fp
 10039d4:	dfc00117 	ldw	ra,4(sp)
 10039d8:	df000017 	ldw	fp,0(sp)
 10039dc:	dec00204 	addi	sp,sp,8
 10039e0:	f800283a 	ret

010039e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 10039e4:	defffc04 	addi	sp,sp,-16
 10039e8:	dfc00315 	stw	ra,12(sp)
 10039ec:	df000215 	stw	fp,8(sp)
 10039f0:	df000204 	addi	fp,sp,8
 10039f4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 10039f8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 10039fc:	e0bfff17 	ldw	r2,-4(fp)
 1003a00:	1000021e 	bne	r2,zero,1003a0c <vTaskDelete+0x28>
 1003a04:	d0a71317 	ldw	r2,-25524(gp)
 1003a08:	00000106 	br	1003a10 <vTaskDelete+0x2c>
 1003a0c:	e0bfff17 	ldw	r2,-4(fp)
 1003a10:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003a14:	e0bffe17 	ldw	r2,-8(fp)
 1003a18:	10800104 	addi	r2,r2,4
 1003a1c:	1009883a 	mov	r4,r2
 1003a20:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003a24:	e0bffe17 	ldw	r2,-8(fp)
 1003a28:	10800a17 	ldw	r2,40(r2)
 1003a2c:	10000426 	beq	r2,zero,1003a40 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003a30:	e0bffe17 	ldw	r2,-8(fp)
 1003a34:	10800604 	addi	r2,r2,24
 1003a38:	1009883a 	mov	r4,r2
 1003a3c:	1000ce40 	call	1000ce4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 1003a40:	d0a71e17 	ldw	r2,-25480(gp)
 1003a44:	10800044 	addi	r2,r2,1
 1003a48:	d0a71e15 	stw	r2,-25480(gp)

			if( pxTCB == pxCurrentTCB )
 1003a4c:	d0a71317 	ldw	r2,-25524(gp)
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	18800a1e 	bne	r3,r2,1003a80 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 1003a58:	e0bffe17 	ldw	r2,-8(fp)
 1003a5c:	10800104 	addi	r2,r2,4
 1003a60:	100b883a 	mov	r5,r2
 1003a64:	010060b4 	movhi	r4,386
 1003a68:	213a9004 	addi	r4,r4,-5568
 1003a6c:	1000b800 	call	1000b80 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 1003a70:	d0a71617 	ldw	r2,-25512(gp)
 1003a74:	10800044 	addi	r2,r2,1
 1003a78:	d0a71615 	stw	r2,-25512(gp)
 1003a7c:	00000606 	br	1003a98 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 1003a80:	d0a71717 	ldw	r2,-25508(gp)
 1003a84:	10bfffc4 	addi	r2,r2,-1
 1003a88:	d0a71715 	stw	r2,-25508(gp)
				prvDeleteTCB( pxTCB );
 1003a8c:	e13ffe17 	ldw	r4,-8(fp)
 1003a90:	1004e340 	call	1004e34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 1003a94:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 1003a98:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 1003a9c:	d0a71a17 	ldw	r2,-25496(gp)
 1003aa0:	10000426 	beq	r2,zero,1003ab4 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 1003aa4:	d0a71317 	ldw	r2,-25524(gp)
 1003aa8:	e0fffe17 	ldw	r3,-8(fp)
 1003aac:	1880011e 	bne	r3,r2,1003ab4 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 1003ab0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 1003ab4:	0001883a 	nop
 1003ab8:	e037883a 	mov	sp,fp
 1003abc:	dfc00117 	ldw	ra,4(sp)
 1003ac0:	df000017 	ldw	fp,0(sp)
 1003ac4:	dec00204 	addi	sp,sp,8
 1003ac8:	f800283a 	ret

01003acc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 1003acc:	defff804 	addi	sp,sp,-32
 1003ad0:	dfc00715 	stw	ra,28(sp)
 1003ad4:	df000615 	stw	fp,24(sp)
 1003ad8:	df000604 	addi	fp,sp,24
 1003adc:	e13ffe15 	stw	r4,-8(fp)
 1003ae0:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1003ae4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 1003ae8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 1003aec:	d0a71817 	ldw	r2,-25504(gp)
 1003af0:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1003af4:	e0bffe17 	ldw	r2,-8(fp)
 1003af8:	10c00017 	ldw	r3,0(r2)
 1003afc:	e0bfff17 	ldw	r2,-4(fp)
 1003b00:	1885883a 	add	r2,r3,r2
 1003b04:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 1003b08:	e0bffe17 	ldw	r2,-8(fp)
 1003b0c:	10800017 	ldw	r2,0(r2)
 1003b10:	e0fffb17 	ldw	r3,-20(fp)
 1003b14:	18800a2e 	bgeu	r3,r2,1003b40 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1003b18:	e0bffe17 	ldw	r2,-8(fp)
 1003b1c:	10800017 	ldw	r2,0(r2)
 1003b20:	e0fffc17 	ldw	r3,-16(fp)
 1003b24:	18800f2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
 1003b28:	e0bffc17 	ldw	r2,-16(fp)
 1003b2c:	e0fffb17 	ldw	r3,-20(fp)
 1003b30:	18800c2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b34:	00800044 	movi	r2,1
 1003b38:	e0bffa15 	stw	r2,-24(fp)
 1003b3c:	00000906 	br	1003b64 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1003b40:	e0bffe17 	ldw	r2,-8(fp)
 1003b44:	10800017 	ldw	r2,0(r2)
 1003b48:	e0fffc17 	ldw	r3,-16(fp)
 1003b4c:	18800336 	bltu	r3,r2,1003b5c <vTaskDelayUntil+0x90>
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	e0fffb17 	ldw	r3,-20(fp)
 1003b58:	1880022e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b5c:	00800044 	movi	r2,1
 1003b60:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 1003b64:	e0bffe17 	ldw	r2,-8(fp)
 1003b68:	e0fffc17 	ldw	r3,-16(fp)
 1003b6c:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 1003b70:	e0bffa17 	ldw	r2,-24(fp)
 1003b74:	10000626 	beq	r2,zero,1003b90 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1003b78:	e0fffc17 	ldw	r3,-16(fp)
 1003b7c:	e0bffb17 	ldw	r2,-20(fp)
 1003b80:	1885c83a 	sub	r2,r3,r2
 1003b84:	000b883a 	mov	r5,zero
 1003b88:	1009883a 	mov	r4,r2
 1003b8c:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 1003b90:	10043880 	call	1004388 <xTaskResumeAll>
 1003b94:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003b98:	e0bffd17 	ldw	r2,-12(fp)
 1003b9c:	1000011e 	bne	r2,zero,1003ba4 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 1003ba0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003ba4:	0001883a 	nop
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	dfc00117 	ldw	ra,4(sp)
 1003bb0:	df000017 	ldw	fp,0(sp)
 1003bb4:	dec00204 	addi	sp,sp,8
 1003bb8:	f800283a 	ret

01003bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 1003bbc:	defffc04 	addi	sp,sp,-16
 1003bc0:	dfc00315 	stw	ra,12(sp)
 1003bc4:	df000215 	stw	fp,8(sp)
 1003bc8:	df000204 	addi	fp,sp,8
 1003bcc:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 1003bd0:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 1003bd4:	e0bfff17 	ldw	r2,-4(fp)
 1003bd8:	10000626 	beq	r2,zero,1003bf4 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 1003bdc:	100435c0 	call	100435c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1003be0:	000b883a 	mov	r5,zero
 1003be4:	e13fff17 	ldw	r4,-4(fp)
 1003be8:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 1003bec:	10043880 	call	1004388 <xTaskResumeAll>
 1003bf0:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003bf4:	e0bffe17 	ldw	r2,-8(fp)
 1003bf8:	1000011e 	bne	r2,zero,1003c00 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 1003bfc:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003c00:	0001883a 	nop
 1003c04:	e037883a 	mov	sp,fp
 1003c08:	dfc00117 	ldw	ra,4(sp)
 1003c0c:	df000017 	ldw	fp,0(sp)
 1003c10:	dec00204 	addi	sp,sp,8
 1003c14:	f800283a 	ret

01003c18 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 1003c18:	defff804 	addi	sp,sp,-32
 1003c1c:	dfc00715 	stw	ra,28(sp)
 1003c20:	df000615 	stw	fp,24(sp)
 1003c24:	df000604 	addi	fp,sp,24
 1003c28:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 1003c2c:	e0bfff17 	ldw	r2,-4(fp)
 1003c30:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 1003c34:	d0a71317 	ldw	r2,-25524(gp)
 1003c38:	e0fffb17 	ldw	r3,-20(fp)
 1003c3c:	1880021e 	bne	r3,r2,1003c48 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 1003c40:	e03ffa15 	stw	zero,-24(fp)
 1003c44:	00003206 	br	1003d10 <eTaskGetState+0xf8>
		}
		else
		{
			taskENTER_CRITICAL();
 1003c48:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1003c4c:	e0bffb17 	ldw	r2,-20(fp)
 1003c50:	10800517 	ldw	r2,20(r2)
 1003c54:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 1003c58:	d0a71417 	ldw	r2,-25520(gp)
 1003c5c:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1003c60:	d0a71517 	ldw	r2,-25516(gp)
 1003c64:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 1003c68:	10052c40 	call	10052c4 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1003c6c:	e0fffc17 	ldw	r3,-16(fp)
 1003c70:	e0bffd17 	ldw	r2,-12(fp)
 1003c74:	18800326 	beq	r3,r2,1003c84 <eTaskGetState+0x6c>
 1003c78:	e0fffc17 	ldw	r3,-16(fp)
 1003c7c:	e0bffe17 	ldw	r2,-8(fp)
 1003c80:	1880031e 	bne	r3,r2,1003c90 <eTaskGetState+0x78>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 1003c84:	00800084 	movi	r2,2
 1003c88:	e0bffa15 	stw	r2,-24(fp)
 1003c8c:	00002006 	br	1003d10 <eTaskGetState+0xf8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 1003c90:	e0fffc17 	ldw	r3,-16(fp)
 1003c94:	008060b4 	movhi	r2,386
 1003c98:	10ba9504 	addi	r2,r2,-5548
 1003c9c:	1880111e 	bne	r3,r2,1003ce4 <eTaskGetState+0xcc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1003ca0:	e0bffb17 	ldw	r2,-20(fp)
 1003ca4:	10800a17 	ldw	r2,40(r2)
 1003ca8:	10000b1e 	bne	r2,zero,1003cd8 <eTaskGetState+0xc0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003cac:	e0bffb17 	ldw	r2,-20(fp)
 1003cb0:	10801303 	ldbu	r2,76(r2)
 1003cb4:	10803fcc 	andi	r2,r2,255
 1003cb8:	10800058 	cmpnei	r2,r2,1
 1003cbc:	1000031e 	bne	r2,zero,1003ccc <eTaskGetState+0xb4>
							{
								eReturn = eBlocked;
 1003cc0:	00800084 	movi	r2,2
 1003cc4:	e0bffa15 	stw	r2,-24(fp)
 1003cc8:	00001106 	br	1003d10 <eTaskGetState+0xf8>
							}
							else
							{
								eReturn = eSuspended;
 1003ccc:	008000c4 	movi	r2,3
 1003cd0:	e0bffa15 	stw	r2,-24(fp)
 1003cd4:	00000e06 	br	1003d10 <eTaskGetState+0xf8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 1003cd8:	00800084 	movi	r2,2
 1003cdc:	e0bffa15 	stw	r2,-24(fp)
 1003ce0:	00000b06 	br	1003d10 <eTaskGetState+0xf8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1003ce4:	e0fffc17 	ldw	r3,-16(fp)
 1003ce8:	008060b4 	movhi	r2,386
 1003cec:	10ba9004 	addi	r2,r2,-5568
 1003cf0:	18800226 	beq	r3,r2,1003cfc <eTaskGetState+0xe4>
 1003cf4:	e0bffc17 	ldw	r2,-16(fp)
 1003cf8:	1000031e 	bne	r2,zero,1003d08 <eTaskGetState+0xf0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 1003cfc:	00800104 	movi	r2,4
 1003d00:	e0bffa15 	stw	r2,-24(fp)
 1003d04:	00000206 	br	1003d10 <eTaskGetState+0xf8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 1003d08:	00800044 	movi	r2,1
 1003d0c:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 1003d10:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1003d14:	e037883a 	mov	sp,fp
 1003d18:	dfc00117 	ldw	ra,4(sp)
 1003d1c:	df000017 	ldw	fp,0(sp)
 1003d20:	dec00204 	addi	sp,sp,8
 1003d24:	f800283a 	ret

01003d28 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 1003d28:	defffb04 	addi	sp,sp,-20
 1003d2c:	dfc00415 	stw	ra,16(sp)
 1003d30:	df000315 	stw	fp,12(sp)
 1003d34:	df000304 	addi	fp,sp,12
 1003d38:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 1003d3c:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d40:	e0bfff17 	ldw	r2,-4(fp)
 1003d44:	1000021e 	bne	r2,zero,1003d50 <uxTaskPriorityGet+0x28>
 1003d48:	d0a71317 	ldw	r2,-25524(gp)
 1003d4c:	00000106 	br	1003d54 <uxTaskPriorityGet+0x2c>
 1003d50:	e0bfff17 	ldw	r2,-4(fp)
 1003d54:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003d58:	e0bffd17 	ldw	r2,-12(fp)
 1003d5c:	10800b17 	ldw	r2,44(r2)
 1003d60:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 1003d64:	10052c40 	call	10052c4 <vTaskExitCritical>

		return uxReturn;
 1003d68:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003d6c:	e037883a 	mov	sp,fp
 1003d70:	dfc00117 	ldw	ra,4(sp)
 1003d74:	df000017 	ldw	fp,0(sp)
 1003d78:	dec00204 	addi	sp,sp,8
 1003d7c:	f800283a 	ret

01003d80 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 1003d80:	defffb04 	addi	sp,sp,-20
 1003d84:	df000415 	stw	fp,16(sp)
 1003d88:	df000404 	addi	fp,sp,16
 1003d8c:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1003d90:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d94:	e0bfff17 	ldw	r2,-4(fp)
 1003d98:	1000021e 	bne	r2,zero,1003da4 <uxTaskPriorityGetFromISR+0x24>
 1003d9c:	d0a71317 	ldw	r2,-25524(gp)
 1003da0:	00000106 	br	1003da8 <uxTaskPriorityGetFromISR+0x28>
 1003da4:	e0bfff17 	ldw	r2,-4(fp)
 1003da8:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003dac:	e0bffd17 	ldw	r2,-12(fp)
 1003db0:	10800b17 	ldw	r2,44(r2)
 1003db4:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 1003db8:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003dbc:	e037883a 	mov	sp,fp
 1003dc0:	df000017 	ldw	fp,0(sp)
 1003dc4:	dec00104 	addi	sp,sp,4
 1003dc8:	f800283a 	ret

01003dcc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 1003dcc:	defff804 	addi	sp,sp,-32
 1003dd0:	dfc00715 	stw	ra,28(sp)
 1003dd4:	df000615 	stw	fp,24(sp)
 1003dd8:	df000604 	addi	fp,sp,24
 1003ddc:	e13ffe15 	stw	r4,-8(fp)
 1003de0:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 1003de4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003de8:	e0bfff17 	ldw	r2,-4(fp)
 1003dec:	10800170 	cmpltui	r2,r2,5
 1003df0:	1000021e 	bne	r2,zero,1003dfc <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003df4:	00800104 	movi	r2,4
 1003df8:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 1003dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003e00:	e0bffe17 	ldw	r2,-8(fp)
 1003e04:	1000021e 	bne	r2,zero,1003e10 <vTaskPrioritySet+0x44>
 1003e08:	d0a71317 	ldw	r2,-25524(gp)
 1003e0c:	00000106 	br	1003e14 <vTaskPrioritySet+0x48>
 1003e10:	e0bffe17 	ldw	r2,-8(fp)
 1003e14:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1003e18:	e0bffb17 	ldw	r2,-20(fp)
 1003e1c:	10801017 	ldw	r2,64(r2)
 1003e20:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 1003e24:	e0fffc17 	ldw	r3,-16(fp)
 1003e28:	e0bfff17 	ldw	r2,-4(fp)
 1003e2c:	18804926 	beq	r3,r2,1003f54 <vTaskPrioritySet+0x188>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 1003e30:	e0bfff17 	ldw	r2,-4(fp)
 1003e34:	e0fffc17 	ldw	r3,-16(fp)
 1003e38:	18800a2e 	bgeu	r3,r2,1003e64 <vTaskPrioritySet+0x98>
				{
					if( pxTCB != pxCurrentTCB )
 1003e3c:	d0a71317 	ldw	r2,-25524(gp)
 1003e40:	e0fffb17 	ldw	r3,-20(fp)
 1003e44:	18800c26 	beq	r3,r2,1003e78 <vTaskPrioritySet+0xac>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1003e48:	d0a71317 	ldw	r2,-25524(gp)
 1003e4c:	10800b17 	ldw	r2,44(r2)
 1003e50:	e0ffff17 	ldw	r3,-4(fp)
 1003e54:	18800836 	bltu	r3,r2,1003e78 <vTaskPrioritySet+0xac>
						{
							xYieldRequired = pdTRUE;
 1003e58:	00800044 	movi	r2,1
 1003e5c:	e0bffa15 	stw	r2,-24(fp)
 1003e60:	00000506 	br	1003e78 <vTaskPrioritySet+0xac>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 1003e64:	d0a71317 	ldw	r2,-25524(gp)
 1003e68:	e0fffb17 	ldw	r3,-20(fp)
 1003e6c:	1880021e 	bne	r3,r2,1003e78 <vTaskPrioritySet+0xac>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 1003e70:	00800044 	movi	r2,1
 1003e74:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1003e78:	e0bffb17 	ldw	r2,-20(fp)
 1003e7c:	10800b17 	ldw	r2,44(r2)
 1003e80:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1003e84:	e0bffb17 	ldw	r2,-20(fp)
 1003e88:	10c01017 	ldw	r3,64(r2)
 1003e8c:	e0bffb17 	ldw	r2,-20(fp)
 1003e90:	10800b17 	ldw	r2,44(r2)
 1003e94:	1880031e 	bne	r3,r2,1003ea4 <vTaskPrioritySet+0xd8>
					{
						pxTCB->uxPriority = uxNewPriority;
 1003e98:	e0bffb17 	ldw	r2,-20(fp)
 1003e9c:	e0ffff17 	ldw	r3,-4(fp)
 1003ea0:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 1003ea4:	e0bffb17 	ldw	r2,-20(fp)
 1003ea8:	e0ffff17 	ldw	r3,-4(fp)
 1003eac:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1003eb0:	e0bffb17 	ldw	r2,-20(fp)
 1003eb4:	10800617 	ldw	r2,24(r2)
 1003eb8:	10000516 	blt	r2,zero,1003ed0 <vTaskPrioritySet+0x104>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003ebc:	00c00144 	movi	r3,5
 1003ec0:	e0bfff17 	ldw	r2,-4(fp)
 1003ec4:	1887c83a 	sub	r3,r3,r2
 1003ec8:	e0bffb17 	ldw	r2,-20(fp)
 1003ecc:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1003ed0:	e0bffb17 	ldw	r2,-20(fp)
 1003ed4:	10c00517 	ldw	r3,20(r2)
 1003ed8:	e0bffd17 	ldw	r2,-12(fp)
 1003edc:	11000524 	muli	r4,r2,20
 1003ee0:	008060b4 	movhi	r2,386
 1003ee4:	10ba6804 	addi	r2,r2,-5728
 1003ee8:	2085883a 	add	r2,r4,r2
 1003eec:	1880161e 	bne	r3,r2,1003f48 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003ef0:	e0bffb17 	ldw	r2,-20(fp)
 1003ef4:	10800104 	addi	r2,r2,4
 1003ef8:	1009883a 	mov	r4,r2
 1003efc:	1000ce40 	call	1000ce4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 1003f00:	e0bffb17 	ldw	r2,-20(fp)
 1003f04:	10800b17 	ldw	r2,44(r2)
 1003f08:	d0e71917 	ldw	r3,-25500(gp)
 1003f0c:	1880032e 	bgeu	r3,r2,1003f1c <vTaskPrioritySet+0x150>
 1003f10:	e0bffb17 	ldw	r2,-20(fp)
 1003f14:	10800b17 	ldw	r2,44(r2)
 1003f18:	d0a71915 	stw	r2,-25500(gp)
 1003f1c:	e0bffb17 	ldw	r2,-20(fp)
 1003f20:	10800b17 	ldw	r2,44(r2)
 1003f24:	10c00524 	muli	r3,r2,20
 1003f28:	008060b4 	movhi	r2,386
 1003f2c:	10ba6804 	addi	r2,r2,-5728
 1003f30:	1887883a 	add	r3,r3,r2
 1003f34:	e0bffb17 	ldw	r2,-20(fp)
 1003f38:	10800104 	addi	r2,r2,4
 1003f3c:	100b883a 	mov	r5,r2
 1003f40:	1809883a 	mov	r4,r3
 1003f44:	1000b800 	call	1000b80 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 1003f48:	e0bffa17 	ldw	r2,-24(fp)
 1003f4c:	10000126 	beq	r2,zero,1003f54 <vTaskPrioritySet+0x188>
				{
					taskYIELD_IF_USING_PREEMPTION();
 1003f50:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 1003f54:	10052c40 	call	10052c4 <vTaskExitCritical>
	}
 1003f58:	0001883a 	nop
 1003f5c:	e037883a 	mov	sp,fp
 1003f60:	dfc00117 	ldw	ra,4(sp)
 1003f64:	df000017 	ldw	fp,0(sp)
 1003f68:	dec00204 	addi	sp,sp,8
 1003f6c:	f800283a 	ret

01003f70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 1003f70:	defffc04 	addi	sp,sp,-16
 1003f74:	dfc00315 	stw	ra,12(sp)
 1003f78:	df000215 	stw	fp,8(sp)
 1003f7c:	df000204 	addi	fp,sp,8
 1003f80:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 1003f84:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1003f88:	e0bfff17 	ldw	r2,-4(fp)
 1003f8c:	1000021e 	bne	r2,zero,1003f98 <vTaskSuspend+0x28>
 1003f90:	d0a71317 	ldw	r2,-25524(gp)
 1003f94:	00000106 	br	1003f9c <vTaskSuspend+0x2c>
 1003f98:	e0bfff17 	ldw	r2,-4(fp)
 1003f9c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003fa0:	e0bffe17 	ldw	r2,-8(fp)
 1003fa4:	10800104 	addi	r2,r2,4
 1003fa8:	1009883a 	mov	r4,r2
 1003fac:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003fb0:	e0bffe17 	ldw	r2,-8(fp)
 1003fb4:	10800a17 	ldw	r2,40(r2)
 1003fb8:	10000426 	beq	r2,zero,1003fcc <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003fbc:	e0bffe17 	ldw	r2,-8(fp)
 1003fc0:	10800604 	addi	r2,r2,24
 1003fc4:	1009883a 	mov	r4,r2
 1003fc8:	1000ce40 	call	1000ce4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1003fcc:	e0bffe17 	ldw	r2,-8(fp)
 1003fd0:	10800104 	addi	r2,r2,4
 1003fd4:	100b883a 	mov	r5,r2
 1003fd8:	010060b4 	movhi	r4,386
 1003fdc:	213a9504 	addi	r4,r4,-5548
 1003fe0:	1000b800 	call	1000b80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003fe4:	e0bffe17 	ldw	r2,-8(fp)
 1003fe8:	10801303 	ldbu	r2,76(r2)
 1003fec:	10803fcc 	andi	r2,r2,255
 1003ff0:	10800058 	cmpnei	r2,r2,1
 1003ff4:	1000021e 	bne	r2,zero,1004000 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003ff8:	e0bffe17 	ldw	r2,-8(fp)
 1003ffc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 1004000:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 1004004:	d0a71a17 	ldw	r2,-25496(gp)
 1004008:	10000326 	beq	r2,zero,1004018 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 100400c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 1004010:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 1004014:	10052c40 	call	10052c4 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 1004018:	d0a71317 	ldw	r2,-25524(gp)
 100401c:	e0fffe17 	ldw	r3,-8(fp)
 1004020:	18800c1e 	bne	r3,r2,1004054 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 1004024:	d0a71a17 	ldw	r2,-25496(gp)
 1004028:	10000226 	beq	r2,zero,1004034 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 100402c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004030:	00000806 	br	1004054 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 1004034:	008060b4 	movhi	r2,386
 1004038:	10ba9504 	addi	r2,r2,-5548
 100403c:	10c00017 	ldw	r3,0(r2)
 1004040:	d0a71717 	ldw	r2,-25508(gp)
 1004044:	1880021e 	bne	r3,r2,1004050 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 1004048:	d0271315 	stw	zero,-25524(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100404c:	00000106 	br	1004054 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 1004050:	10047440 	call	1004744 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004054:	0001883a 	nop
 1004058:	e037883a 	mov	sp,fp
 100405c:	dfc00117 	ldw	ra,4(sp)
 1004060:	df000017 	ldw	fp,0(sp)
 1004064:	dec00204 	addi	sp,sp,8
 1004068:	f800283a 	ret

0100406c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 100406c:	defffc04 	addi	sp,sp,-16
 1004070:	df000315 	stw	fp,12(sp)
 1004074:	df000304 	addi	fp,sp,12
 1004078:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 100407c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 1004080:	e0bfff17 	ldw	r2,-4(fp)
 1004084:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1004088:	e0bffe17 	ldw	r2,-8(fp)
 100408c:	10c00517 	ldw	r3,20(r2)
 1004090:	008060b4 	movhi	r2,386
 1004094:	10ba9504 	addi	r2,r2,-5548
 1004098:	18800a1e 	bne	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 100409c:	e0bffe17 	ldw	r2,-8(fp)
 10040a0:	10c00a17 	ldw	r3,40(r2)
 10040a4:	008060b4 	movhi	r2,386
 10040a8:	10ba8b04 	addi	r2,r2,-5588
 10040ac:	18800526 	beq	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 10040b0:	e0bffe17 	ldw	r2,-8(fp)
 10040b4:	10800a17 	ldw	r2,40(r2)
 10040b8:	1000021e 	bne	r2,zero,10040c4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 10040bc:	00800044 	movi	r2,1
 10040c0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 10040c4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 10040c8:	e037883a 	mov	sp,fp
 10040cc:	df000017 	ldw	fp,0(sp)
 10040d0:	dec00104 	addi	sp,sp,4
 10040d4:	f800283a 	ret

010040d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 10040d8:	defffc04 	addi	sp,sp,-16
 10040dc:	dfc00315 	stw	ra,12(sp)
 10040e0:	df000215 	stw	fp,8(sp)
 10040e4:	df000204 	addi	fp,sp,8
 10040e8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10040ec:	e0bfff17 	ldw	r2,-4(fp)
 10040f0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 10040f4:	d0a71317 	ldw	r2,-25524(gp)
 10040f8:	e0fffe17 	ldw	r3,-8(fp)
 10040fc:	18802326 	beq	r3,r2,100418c <vTaskResume+0xb4>
 1004100:	e0bffe17 	ldw	r2,-8(fp)
 1004104:	10002126 	beq	r2,zero,100418c <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 1004108:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 100410c:	e13ffe17 	ldw	r4,-8(fp)
 1004110:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 1004114:	10001c26 	beq	r2,zero,1004188 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1004118:	e0bffe17 	ldw	r2,-8(fp)
 100411c:	10800104 	addi	r2,r2,4
 1004120:	1009883a 	mov	r4,r2
 1004124:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004128:	e0bffe17 	ldw	r2,-8(fp)
 100412c:	10800b17 	ldw	r2,44(r2)
 1004130:	d0e71917 	ldw	r3,-25500(gp)
 1004134:	1880032e 	bgeu	r3,r2,1004144 <vTaskResume+0x6c>
 1004138:	e0bffe17 	ldw	r2,-8(fp)
 100413c:	10800b17 	ldw	r2,44(r2)
 1004140:	d0a71915 	stw	r2,-25500(gp)
 1004144:	e0bffe17 	ldw	r2,-8(fp)
 1004148:	10800b17 	ldw	r2,44(r2)
 100414c:	10c00524 	muli	r3,r2,20
 1004150:	008060b4 	movhi	r2,386
 1004154:	10ba6804 	addi	r2,r2,-5728
 1004158:	1887883a 	add	r3,r3,r2
 100415c:	e0bffe17 	ldw	r2,-8(fp)
 1004160:	10800104 	addi	r2,r2,4
 1004164:	100b883a 	mov	r5,r2
 1004168:	1809883a 	mov	r4,r3
 100416c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004170:	e0bffe17 	ldw	r2,-8(fp)
 1004174:	10c00b17 	ldw	r3,44(r2)
 1004178:	d0a71317 	ldw	r2,-25524(gp)
 100417c:	10800b17 	ldw	r2,44(r2)
 1004180:	18800136 	bltu	r3,r2,1004188 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 1004184:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 1004188:	10052c40 	call	10052c4 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100418c:	0001883a 	nop
 1004190:	e037883a 	mov	sp,fp
 1004194:	dfc00117 	ldw	ra,4(sp)
 1004198:	df000017 	ldw	fp,0(sp)
 100419c:	dec00204 	addi	sp,sp,8
 10041a0:	f800283a 	ret

010041a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 10041a4:	defffa04 	addi	sp,sp,-24
 10041a8:	dfc00515 	stw	ra,20(sp)
 10041ac:	df000415 	stw	fp,16(sp)
 10041b0:	df000404 	addi	fp,sp,16
 10041b4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 10041b8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10041bc:	e0bfff17 	ldw	r2,-4(fp)
 10041c0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10041c4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 10041c8:	e13ffd17 	ldw	r4,-12(fp)
 10041cc:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 10041d0:	10002626 	beq	r2,zero,100426c <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10041d4:	d0a72117 	ldw	r2,-25468(gp)
 10041d8:	10001e1e 	bne	r2,zero,1004254 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10041dc:	e0bffd17 	ldw	r2,-12(fp)
 10041e0:	10c00b17 	ldw	r3,44(r2)
 10041e4:	d0a71317 	ldw	r2,-25524(gp)
 10041e8:	10800b17 	ldw	r2,44(r2)
 10041ec:	18800236 	bltu	r3,r2,10041f8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 10041f0:	00800044 	movi	r2,1
 10041f4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10041f8:	e0bffd17 	ldw	r2,-12(fp)
 10041fc:	10800104 	addi	r2,r2,4
 1004200:	1009883a 	mov	r4,r2
 1004204:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004208:	e0bffd17 	ldw	r2,-12(fp)
 100420c:	10800b17 	ldw	r2,44(r2)
 1004210:	d0e71917 	ldw	r3,-25500(gp)
 1004214:	1880032e 	bgeu	r3,r2,1004224 <xTaskResumeFromISR+0x80>
 1004218:	e0bffd17 	ldw	r2,-12(fp)
 100421c:	10800b17 	ldw	r2,44(r2)
 1004220:	d0a71915 	stw	r2,-25500(gp)
 1004224:	e0bffd17 	ldw	r2,-12(fp)
 1004228:	10800b17 	ldw	r2,44(r2)
 100422c:	10c00524 	muli	r3,r2,20
 1004230:	008060b4 	movhi	r2,386
 1004234:	10ba6804 	addi	r2,r2,-5728
 1004238:	1887883a 	add	r3,r3,r2
 100423c:	e0bffd17 	ldw	r2,-12(fp)
 1004240:	10800104 	addi	r2,r2,4
 1004244:	100b883a 	mov	r5,r2
 1004248:	1809883a 	mov	r4,r3
 100424c:	1000b800 	call	1000b80 <vListInsertEnd>
 1004250:	00000606 	br	100426c <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1004254:	e0bffd17 	ldw	r2,-12(fp)
 1004258:	10800604 	addi	r2,r2,24
 100425c:	100b883a 	mov	r5,r2
 1004260:	010060b4 	movhi	r4,386
 1004264:	213a8b04 	addi	r4,r4,-5588
 1004268:	1000b800 	call	1000b80 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 100426c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1004270:	e037883a 	mov	sp,fp
 1004274:	dfc00117 	ldw	ra,4(sp)
 1004278:	df000017 	ldw	fp,0(sp)
 100427c:	dec00204 	addi	sp,sp,8
 1004280:	f800283a 	ret

01004284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 1004284:	defffa04 	addi	sp,sp,-24
 1004288:	dfc00515 	stw	ra,20(sp)
 100428c:	df000415 	stw	fp,16(sp)
 1004290:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 1004294:	d0a72004 	addi	r2,gp,-25472
 1004298:	d8800115 	stw	r2,4(sp)
 100429c:	d8000015 	stw	zero,0(sp)
 10042a0:	000f883a 	mov	r7,zero
 10042a4:	01810004 	movi	r6,1024
 10042a8:	014040b4 	movhi	r5,258
 10042ac:	29691504 	addi	r5,r5,-23468
 10042b0:	01004034 	movhi	r4,256
 10042b4:	21130704 	addi	r4,r4,19484
 10042b8:	100361c0 	call	100361c <xTaskCreate>
 10042bc:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 10042c0:	e0bffe17 	ldw	r2,-8(fp)
 10042c4:	10800058 	cmpnei	r2,r2,1
 10042c8:	10000c1e 	bne	r2,zero,10042fc <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10042cc:	0005303a 	rdctl	r2,status
 10042d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10042d4:	e0ffff17 	ldw	r3,-4(fp)
 10042d8:	00bfff84 	movi	r2,-2
 10042dc:	1884703a 	and	r2,r3,r2
 10042e0:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 10042e4:	00bfffc4 	movi	r2,-1
 10042e8:	d0a71f15 	stw	r2,-25476(gp)
		xSchedulerRunning = pdTRUE;
 10042ec:	00800044 	movi	r2,1
 10042f0:	d0a71a15 	stw	r2,-25496(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 10042f4:	d0271815 	stw	zero,-25504(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 10042f8:	1000e880 	call	1000e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 10042fc:	0001883a 	nop
 1004300:	e037883a 	mov	sp,fp
 1004304:	dfc00117 	ldw	ra,4(sp)
 1004308:	df000017 	ldw	fp,0(sp)
 100430c:	dec00204 	addi	sp,sp,8
 1004310:	f800283a 	ret

01004314 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 1004314:	defffd04 	addi	sp,sp,-12
 1004318:	dfc00215 	stw	ra,8(sp)
 100431c:	df000115 	stw	fp,4(sp)
 1004320:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004324:	0005303a 	rdctl	r2,status
 1004328:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100432c:	e0ffff17 	ldw	r3,-4(fp)
 1004330:	00bfff84 	movi	r2,-2
 1004334:	1884703a 	and	r2,r3,r2
 1004338:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 100433c:	d0271a15 	stw	zero,-25496(gp)
	vPortEndScheduler();
 1004340:	1000ec00 	call	1000ec0 <vPortEndScheduler>
}
 1004344:	0001883a 	nop
 1004348:	e037883a 	mov	sp,fp
 100434c:	dfc00117 	ldw	ra,4(sp)
 1004350:	df000017 	ldw	fp,0(sp)
 1004354:	dec00204 	addi	sp,sp,8
 1004358:	f800283a 	ret

0100435c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 100435c:	deffff04 	addi	sp,sp,-4
 1004360:	df000015 	stw	fp,0(sp)
 1004364:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 1004368:	d0a72117 	ldw	r2,-25468(gp)
 100436c:	10800044 	addi	r2,r2,1
 1004370:	d0a72115 	stw	r2,-25468(gp)
	portMEMORY_BARRIER();
}
 1004374:	0001883a 	nop
 1004378:	e037883a 	mov	sp,fp
 100437c:	df000017 	ldw	fp,0(sp)
 1004380:	dec00104 	addi	sp,sp,4
 1004384:	f800283a 	ret

01004388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 1004388:	defffb04 	addi	sp,sp,-20
 100438c:	dfc00415 	stw	ra,16(sp)
 1004390:	df000315 	stw	fp,12(sp)
 1004394:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 1004398:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 100439c:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 10043a0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 10043a4:	d0a72117 	ldw	r2,-25468(gp)
 10043a8:	10bfffc4 	addi	r2,r2,-1
 10043ac:	d0a72115 	stw	r2,-25468(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10043b0:	d0a72117 	ldw	r2,-25468(gp)
 10043b4:	1000431e 	bne	r2,zero,10044c4 <xTaskResumeAll+0x13c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 10043b8:	d0a71717 	ldw	r2,-25508(gp)
 10043bc:	10004126 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 10043c0:	00002606 	br	100445c <xTaskResumeAll+0xd4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10043c4:	008060b4 	movhi	r2,386
 10043c8:	10ba8b04 	addi	r2,r2,-5588
 10043cc:	10800317 	ldw	r2,12(r2)
 10043d0:	10800317 	ldw	r2,12(r2)
 10043d4:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 10043d8:	e0bffd17 	ldw	r2,-12(fp)
 10043dc:	10800604 	addi	r2,r2,24
 10043e0:	1009883a 	mov	r4,r2
 10043e4:	1000ce40 	call	1000ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10043e8:	e0bffd17 	ldw	r2,-12(fp)
 10043ec:	10800104 	addi	r2,r2,4
 10043f0:	1009883a 	mov	r4,r2
 10043f4:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 10043f8:	e0bffd17 	ldw	r2,-12(fp)
 10043fc:	10800b17 	ldw	r2,44(r2)
 1004400:	d0e71917 	ldw	r3,-25500(gp)
 1004404:	1880032e 	bgeu	r3,r2,1004414 <xTaskResumeAll+0x8c>
 1004408:	e0bffd17 	ldw	r2,-12(fp)
 100440c:	10800b17 	ldw	r2,44(r2)
 1004410:	d0a71915 	stw	r2,-25500(gp)
 1004414:	e0bffd17 	ldw	r2,-12(fp)
 1004418:	10800b17 	ldw	r2,44(r2)
 100441c:	10c00524 	muli	r3,r2,20
 1004420:	008060b4 	movhi	r2,386
 1004424:	10ba6804 	addi	r2,r2,-5728
 1004428:	1887883a 	add	r3,r3,r2
 100442c:	e0bffd17 	ldw	r2,-12(fp)
 1004430:	10800104 	addi	r2,r2,4
 1004434:	100b883a 	mov	r5,r2
 1004438:	1809883a 	mov	r4,r3
 100443c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004440:	e0bffd17 	ldw	r2,-12(fp)
 1004444:	10c00b17 	ldw	r3,44(r2)
 1004448:	d0a71317 	ldw	r2,-25524(gp)
 100444c:	10800b17 	ldw	r2,44(r2)
 1004450:	18800236 	bltu	r3,r2,100445c <xTaskResumeAll+0xd4>
					{
						xYieldPending = pdTRUE;
 1004454:	00800044 	movi	r2,1
 1004458:	d0a71c15 	stw	r2,-25488(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 100445c:	008060b4 	movhi	r2,386
 1004460:	10ba8b04 	addi	r2,r2,-5588
 1004464:	10800017 	ldw	r2,0(r2)
 1004468:	103fd61e 	bne	r2,zero,10043c4 <__alt_data_end+0xff0043c4>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 100446c:	e0bffd17 	ldw	r2,-12(fp)
 1004470:	10000126 	beq	r2,zero,1004478 <xTaskResumeAll+0xf0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 1004474:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 1004478:	d0a71b17 	ldw	r2,-25492(gp)
 100447c:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 1004480:	e0bfff17 	ldw	r2,-4(fp)
 1004484:	10000a26 	beq	r2,zero,10044b0 <xTaskResumeAll+0x128>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 1004488:	10045940 	call	1004594 <xTaskIncrementTick>
 100448c:	10000226 	beq	r2,zero,1004498 <xTaskResumeAll+0x110>
							{
								xYieldPending = pdTRUE;
 1004490:	00800044 	movi	r2,1
 1004494:	d0a71c15 	stw	r2,-25488(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 1004498:	e0bfff17 	ldw	r2,-4(fp)
 100449c:	10bfffc4 	addi	r2,r2,-1
 10044a0:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 10044a4:	e0bfff17 	ldw	r2,-4(fp)
 10044a8:	103ff71e 	bne	r2,zero,1004488 <__alt_data_end+0xff004488>

						uxPendedTicks = 0;
 10044ac:	d0271b15 	stw	zero,-25492(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 10044b0:	d0a71c17 	ldw	r2,-25488(gp)
 10044b4:	10000326 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 10044b8:	00800044 	movi	r2,1
 10044bc:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 10044c0:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 10044c4:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xAlreadyYielded;
 10044c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10044cc:	e037883a 	mov	sp,fp
 10044d0:	dfc00117 	ldw	ra,4(sp)
 10044d4:	df000017 	ldw	fp,0(sp)
 10044d8:	dec00204 	addi	sp,sp,8
 10044dc:	f800283a 	ret

010044e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 10044e0:	defffe04 	addi	sp,sp,-8
 10044e4:	df000115 	stw	fp,4(sp)
 10044e8:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 10044ec:	d0a71817 	ldw	r2,-25504(gp)
 10044f0:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 10044f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10044f8:	e037883a 	mov	sp,fp
 10044fc:	df000017 	ldw	fp,0(sp)
 1004500:	dec00104 	addi	sp,sp,4
 1004504:	f800283a 	ret

01004508 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 1004508:	defffd04 	addi	sp,sp,-12
 100450c:	df000215 	stw	fp,8(sp)
 1004510:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 1004514:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 1004518:	d0a71817 	ldw	r2,-25504(gp)
 100451c:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1004520:	e0bfff17 	ldw	r2,-4(fp)
}
 1004524:	e037883a 	mov	sp,fp
 1004528:	df000017 	ldw	fp,0(sp)
 100452c:	dec00104 	addi	sp,sp,4
 1004530:	f800283a 	ret

01004534 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 1004534:	deffff04 	addi	sp,sp,-4
 1004538:	df000015 	stw	fp,0(sp)
 100453c:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 1004540:	d0a71717 	ldw	r2,-25508(gp)
}
 1004544:	e037883a 	mov	sp,fp
 1004548:	df000017 	ldw	fp,0(sp)
 100454c:	dec00104 	addi	sp,sp,4
 1004550:	f800283a 	ret

01004554 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1004554:	defffd04 	addi	sp,sp,-12
 1004558:	df000215 	stw	fp,8(sp)
 100455c:	df000204 	addi	fp,sp,8
 1004560:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 1004564:	e0bfff17 	ldw	r2,-4(fp)
 1004568:	1000021e 	bne	r2,zero,1004574 <pcTaskGetName+0x20>
 100456c:	d0a71317 	ldw	r2,-25524(gp)
 1004570:	00000106 	br	1004578 <pcTaskGetName+0x24>
 1004574:	e0bfff17 	ldw	r2,-4(fp)
 1004578:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 100457c:	e0bffe17 	ldw	r2,-8(fp)
 1004580:	10800d04 	addi	r2,r2,52
}
 1004584:	e037883a 	mov	sp,fp
 1004588:	df000017 	ldw	fp,0(sp)
 100458c:	dec00104 	addi	sp,sp,4
 1004590:	f800283a 	ret

01004594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 1004594:	defff904 	addi	sp,sp,-28
 1004598:	dfc00615 	stw	ra,24(sp)
 100459c:	df000515 	stw	fp,20(sp)
 10045a0:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 10045a4:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10045a8:	d0a72117 	ldw	r2,-25468(gp)
 10045ac:	1000581e 	bne	r2,zero,1004710 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 10045b0:	d0a71817 	ldw	r2,-25504(gp)
 10045b4:	10800044 	addi	r2,r2,1
 10045b8:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 10045bc:	e0bffc17 	ldw	r2,-16(fp)
 10045c0:	d0a71815 	stw	r2,-25504(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 10045c4:	e0bffc17 	ldw	r2,-16(fp)
 10045c8:	10000a1e 	bne	r2,zero,10045f4 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 10045cc:	d0a71417 	ldw	r2,-25520(gp)
 10045d0:	e0bffd15 	stw	r2,-12(fp)
 10045d4:	d0a71517 	ldw	r2,-25516(gp)
 10045d8:	d0a71415 	stw	r2,-25520(gp)
 10045dc:	e0bffd17 	ldw	r2,-12(fp)
 10045e0:	d0a71515 	stw	r2,-25516(gp)
 10045e4:	d0a71d17 	ldw	r2,-25484(gp)
 10045e8:	10800044 	addi	r2,r2,1
 10045ec:	d0a71d15 	stw	r2,-25484(gp)
 10045f0:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 10045f4:	d0a71f17 	ldw	r2,-25476(gp)
 10045f8:	e0fffc17 	ldw	r3,-16(fp)
 10045fc:	18803836 	bltu	r3,r2,10046e0 <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004600:	d0a71417 	ldw	r2,-25520(gp)
 1004604:	10800017 	ldw	r2,0(r2)
 1004608:	1000031e 	bne	r2,zero,1004618 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100460c:	00bfffc4 	movi	r2,-1
 1004610:	d0a71f15 	stw	r2,-25476(gp)
					break;
 1004614:	00003206 	br	10046e0 <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004618:	d0a71417 	ldw	r2,-25520(gp)
 100461c:	10800317 	ldw	r2,12(r2)
 1004620:	10800317 	ldw	r2,12(r2)
 1004624:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1004628:	e0bffe17 	ldw	r2,-8(fp)
 100462c:	10800117 	ldw	r2,4(r2)
 1004630:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 1004634:	e0fffc17 	ldw	r3,-16(fp)
 1004638:	e0bfff17 	ldw	r2,-4(fp)
 100463c:	1880032e 	bgeu	r3,r2,100464c <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 1004640:	e0bfff17 	ldw	r2,-4(fp)
 1004644:	d0a71f15 	stw	r2,-25476(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 1004648:	00002506 	br	10046e0 <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 100464c:	e0bffe17 	ldw	r2,-8(fp)
 1004650:	10800104 	addi	r2,r2,4
 1004654:	1009883a 	mov	r4,r2
 1004658:	1000ce40 	call	1000ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 100465c:	e0bffe17 	ldw	r2,-8(fp)
 1004660:	10800a17 	ldw	r2,40(r2)
 1004664:	10000426 	beq	r2,zero,1004678 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1004668:	e0bffe17 	ldw	r2,-8(fp)
 100466c:	10800604 	addi	r2,r2,24
 1004670:	1009883a 	mov	r4,r2
 1004674:	1000ce40 	call	1000ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 1004678:	e0bffe17 	ldw	r2,-8(fp)
 100467c:	10800b17 	ldw	r2,44(r2)
 1004680:	d0e71917 	ldw	r3,-25500(gp)
 1004684:	1880032e 	bgeu	r3,r2,1004694 <xTaskIncrementTick+0x100>
 1004688:	e0bffe17 	ldw	r2,-8(fp)
 100468c:	10800b17 	ldw	r2,44(r2)
 1004690:	d0a71915 	stw	r2,-25500(gp)
 1004694:	e0bffe17 	ldw	r2,-8(fp)
 1004698:	10800b17 	ldw	r2,44(r2)
 100469c:	10c00524 	muli	r3,r2,20
 10046a0:	008060b4 	movhi	r2,386
 10046a4:	10ba6804 	addi	r2,r2,-5728
 10046a8:	1887883a 	add	r3,r3,r2
 10046ac:	e0bffe17 	ldw	r2,-8(fp)
 10046b0:	10800104 	addi	r2,r2,4
 10046b4:	100b883a 	mov	r5,r2
 10046b8:	1809883a 	mov	r4,r3
 10046bc:	1000b800 	call	1000b80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10046c0:	e0bffe17 	ldw	r2,-8(fp)
 10046c4:	10c00b17 	ldw	r3,44(r2)
 10046c8:	d0a71317 	ldw	r2,-25524(gp)
 10046cc:	10800b17 	ldw	r2,44(r2)
 10046d0:	18bfcb36 	bltu	r3,r2,1004600 <__alt_data_end+0xff004600>
						{
							xSwitchRequired = pdTRUE;
 10046d4:	00800044 	movi	r2,1
 10046d8:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 10046dc:	003fc806 	br	1004600 <__alt_data_end+0xff004600>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 10046e0:	d0a71317 	ldw	r2,-25524(gp)
 10046e4:	10c00b17 	ldw	r3,44(r2)
 10046e8:	008060b4 	movhi	r2,386
 10046ec:	10ba6804 	addi	r2,r2,-5728
 10046f0:	18c00524 	muli	r3,r3,20
 10046f4:	10c5883a 	add	r2,r2,r3
 10046f8:	10800017 	ldw	r2,0(r2)
 10046fc:	108000b0 	cmpltui	r2,r2,2
 1004700:	1000061e 	bne	r2,zero,100471c <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 1004704:	00800044 	movi	r2,1
 1004708:	e0bffb15 	stw	r2,-20(fp)
 100470c:	00000306 	br	100471c <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 1004710:	d0a71b17 	ldw	r2,-25492(gp)
 1004714:	10800044 	addi	r2,r2,1
 1004718:	d0a71b15 	stw	r2,-25492(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 100471c:	d0a71c17 	ldw	r2,-25488(gp)
 1004720:	10000226 	beq	r2,zero,100472c <xTaskIncrementTick+0x198>
		{
			xSwitchRequired = pdTRUE;
 1004724:	00800044 	movi	r2,1
 1004728:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 100472c:	e0bffb17 	ldw	r2,-20(fp)
}
 1004730:	e037883a 	mov	sp,fp
 1004734:	dfc00117 	ldw	ra,4(sp)
 1004738:	df000017 	ldw	fp,0(sp)
 100473c:	dec00204 	addi	sp,sp,8
 1004740:	f800283a 	ret

01004744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 1004744:	defffd04 	addi	sp,sp,-12
 1004748:	df000215 	stw	fp,8(sp)
 100474c:	df000204 	addi	fp,sp,8
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 1004750:	d0a72117 	ldw	r2,-25468(gp)
 1004754:	10000326 	beq	r2,zero,1004764 <vTaskSwitchContext+0x20>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 1004758:	00800044 	movi	r2,1
 100475c:	d0a71c15 	stw	r2,-25488(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004760:	00002906 	br	1004808 <vTaskSwitchContext+0xc4>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 1004764:	d0271c15 	stw	zero,-25488(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004768:	d0a71917 	ldw	r2,-25500(gp)
 100476c:	e0bffe15 	stw	r2,-8(fp)
 1004770:	00000306 	br	1004780 <vTaskSwitchContext+0x3c>
 1004774:	e0bffe17 	ldw	r2,-8(fp)
 1004778:	10bfffc4 	addi	r2,r2,-1
 100477c:	e0bffe15 	stw	r2,-8(fp)
 1004780:	008060b4 	movhi	r2,386
 1004784:	10ba6804 	addi	r2,r2,-5728
 1004788:	e0fffe17 	ldw	r3,-8(fp)
 100478c:	18c00524 	muli	r3,r3,20
 1004790:	10c5883a 	add	r2,r2,r3
 1004794:	10800017 	ldw	r2,0(r2)
 1004798:	103ff626 	beq	r2,zero,1004774 <__alt_data_end+0xff004774>
 100479c:	e0bffe17 	ldw	r2,-8(fp)
 10047a0:	10c00524 	muli	r3,r2,20
 10047a4:	008060b4 	movhi	r2,386
 10047a8:	10ba6804 	addi	r2,r2,-5728
 10047ac:	1885883a 	add	r2,r3,r2
 10047b0:	e0bfff15 	stw	r2,-4(fp)
 10047b4:	e0bfff17 	ldw	r2,-4(fp)
 10047b8:	10800117 	ldw	r2,4(r2)
 10047bc:	10c00117 	ldw	r3,4(r2)
 10047c0:	e0bfff17 	ldw	r2,-4(fp)
 10047c4:	10c00115 	stw	r3,4(r2)
 10047c8:	e0bfff17 	ldw	r2,-4(fp)
 10047cc:	10c00117 	ldw	r3,4(r2)
 10047d0:	e0bfff17 	ldw	r2,-4(fp)
 10047d4:	10800204 	addi	r2,r2,8
 10047d8:	1880051e 	bne	r3,r2,10047f0 <vTaskSwitchContext+0xac>
 10047dc:	e0bfff17 	ldw	r2,-4(fp)
 10047e0:	10800117 	ldw	r2,4(r2)
 10047e4:	10c00117 	ldw	r3,4(r2)
 10047e8:	e0bfff17 	ldw	r2,-4(fp)
 10047ec:	10c00115 	stw	r3,4(r2)
 10047f0:	e0bfff17 	ldw	r2,-4(fp)
 10047f4:	10800117 	ldw	r2,4(r2)
 10047f8:	10800317 	ldw	r2,12(r2)
 10047fc:	d0a71315 	stw	r2,-25524(gp)
 1004800:	e0bffe17 	ldw	r2,-8(fp)
 1004804:	d0a71915 	stw	r2,-25500(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004808:	0001883a 	nop
 100480c:	e037883a 	mov	sp,fp
 1004810:	df000017 	ldw	fp,0(sp)
 1004814:	dec00104 	addi	sp,sp,4
 1004818:	f800283a 	ret

0100481c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 100481c:	defffc04 	addi	sp,sp,-16
 1004820:	dfc00315 	stw	ra,12(sp)
 1004824:	df000215 	stw	fp,8(sp)
 1004828:	df000204 	addi	fp,sp,8
 100482c:	e13ffe15 	stw	r4,-8(fp)
 1004830:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004834:	d0a71317 	ldw	r2,-25524(gp)
 1004838:	10800604 	addi	r2,r2,24
 100483c:	100b883a 	mov	r5,r2
 1004840:	e13ffe17 	ldw	r4,-8(fp)
 1004844:	1000c0c0 	call	1000c0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1004848:	01400044 	movi	r5,1
 100484c:	e13fff17 	ldw	r4,-4(fp)
 1004850:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 1004854:	0001883a 	nop
 1004858:	e037883a 	mov	sp,fp
 100485c:	dfc00117 	ldw	ra,4(sp)
 1004860:	df000017 	ldw	fp,0(sp)
 1004864:	dec00204 	addi	sp,sp,8
 1004868:	f800283a 	ret

0100486c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 100486c:	defffb04 	addi	sp,sp,-20
 1004870:	dfc00415 	stw	ra,16(sp)
 1004874:	df000315 	stw	fp,12(sp)
 1004878:	df000304 	addi	fp,sp,12
 100487c:	e13ffd15 	stw	r4,-12(fp)
 1004880:	e17ffe15 	stw	r5,-8(fp)
 1004884:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1004888:	d0a71317 	ldw	r2,-25524(gp)
 100488c:	e0fffe17 	ldw	r3,-8(fp)
 1004890:	18e00034 	orhi	r3,r3,32768
 1004894:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004898:	d0a71317 	ldw	r2,-25524(gp)
 100489c:	10800604 	addi	r2,r2,24
 10048a0:	100b883a 	mov	r5,r2
 10048a4:	e13ffd17 	ldw	r4,-12(fp)
 10048a8:	1000b800 	call	1000b80 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10048ac:	01400044 	movi	r5,1
 10048b0:	e13fff17 	ldw	r4,-4(fp)
 10048b4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 10048b8:	0001883a 	nop
 10048bc:	e037883a 	mov	sp,fp
 10048c0:	dfc00117 	ldw	ra,4(sp)
 10048c4:	df000017 	ldw	fp,0(sp)
 10048c8:	dec00204 	addi	sp,sp,8
 10048cc:	f800283a 	ret

010048d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 10048d0:	defffb04 	addi	sp,sp,-20
 10048d4:	dfc00415 	stw	ra,16(sp)
 10048d8:	df000315 	stw	fp,12(sp)
 10048dc:	df000304 	addi	fp,sp,12
 10048e0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10048e4:	e0bfff17 	ldw	r2,-4(fp)
 10048e8:	10800317 	ldw	r2,12(r2)
 10048ec:	10800317 	ldw	r2,12(r2)
 10048f0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 10048f4:	e0bffe17 	ldw	r2,-8(fp)
 10048f8:	10800604 	addi	r2,r2,24
 10048fc:	1009883a 	mov	r4,r2
 1004900:	1000ce40 	call	1000ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1004904:	d0a72117 	ldw	r2,-25468(gp)
 1004908:	1000171e 	bne	r2,zero,1004968 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 100490c:	e0bffe17 	ldw	r2,-8(fp)
 1004910:	10800104 	addi	r2,r2,4
 1004914:	1009883a 	mov	r4,r2
 1004918:	1000ce40 	call	1000ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 100491c:	e0bffe17 	ldw	r2,-8(fp)
 1004920:	10800b17 	ldw	r2,44(r2)
 1004924:	d0e71917 	ldw	r3,-25500(gp)
 1004928:	1880032e 	bgeu	r3,r2,1004938 <xTaskRemoveFromEventList+0x68>
 100492c:	e0bffe17 	ldw	r2,-8(fp)
 1004930:	10800b17 	ldw	r2,44(r2)
 1004934:	d0a71915 	stw	r2,-25500(gp)
 1004938:	e0bffe17 	ldw	r2,-8(fp)
 100493c:	10800b17 	ldw	r2,44(r2)
 1004940:	10c00524 	muli	r3,r2,20
 1004944:	008060b4 	movhi	r2,386
 1004948:	10ba6804 	addi	r2,r2,-5728
 100494c:	1887883a 	add	r3,r3,r2
 1004950:	e0bffe17 	ldw	r2,-8(fp)
 1004954:	10800104 	addi	r2,r2,4
 1004958:	100b883a 	mov	r5,r2
 100495c:	1809883a 	mov	r4,r3
 1004960:	1000b800 	call	1000b80 <vListInsertEnd>
 1004964:	00000606 	br	1004980 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 1004968:	e0bffe17 	ldw	r2,-8(fp)
 100496c:	10800604 	addi	r2,r2,24
 1004970:	100b883a 	mov	r5,r2
 1004974:	010060b4 	movhi	r4,386
 1004978:	213a8b04 	addi	r4,r4,-5588
 100497c:	1000b800 	call	1000b80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004980:	e0bffe17 	ldw	r2,-8(fp)
 1004984:	10800b17 	ldw	r2,44(r2)
 1004988:	d0e71317 	ldw	r3,-25524(gp)
 100498c:	18c00b17 	ldw	r3,44(r3)
 1004990:	1880052e 	bgeu	r3,r2,10049a8 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 1004994:	00800044 	movi	r2,1
 1004998:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 100499c:	00800044 	movi	r2,1
 10049a0:	d0a71c15 	stw	r2,-25488(gp)
 10049a4:	00000106 	br	10049ac <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 10049a8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10049ac:	e0bffd17 	ldw	r2,-12(fp)
}
 10049b0:	e037883a 	mov	sp,fp
 10049b4:	dfc00117 	ldw	ra,4(sp)
 10049b8:	df000017 	ldw	fp,0(sp)
 10049bc:	dec00204 	addi	sp,sp,8
 10049c0:	f800283a 	ret

010049c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 10049c4:	defffb04 	addi	sp,sp,-20
 10049c8:	dfc00415 	stw	ra,16(sp)
 10049cc:	df000315 	stw	fp,12(sp)
 10049d0:	df000304 	addi	fp,sp,12
 10049d4:	e13ffe15 	stw	r4,-8(fp)
 10049d8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 10049dc:	e0bfff17 	ldw	r2,-4(fp)
 10049e0:	10e00034 	orhi	r3,r2,32768
 10049e4:	e0bffe17 	ldw	r2,-8(fp)
 10049e8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10049ec:	e0bffe17 	ldw	r2,-8(fp)
 10049f0:	10800317 	ldw	r2,12(r2)
 10049f4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 10049f8:	e13ffe17 	ldw	r4,-8(fp)
 10049fc:	1000ce40 	call	1000ce4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1004a00:	e0bffd17 	ldw	r2,-12(fp)
 1004a04:	10800104 	addi	r2,r2,4
 1004a08:	1009883a 	mov	r4,r2
 1004a0c:	1000ce40 	call	1000ce4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1004a10:	e0bffd17 	ldw	r2,-12(fp)
 1004a14:	10800b17 	ldw	r2,44(r2)
 1004a18:	d0e71917 	ldw	r3,-25500(gp)
 1004a1c:	1880032e 	bgeu	r3,r2,1004a2c <vTaskRemoveFromUnorderedEventList+0x68>
 1004a20:	e0bffd17 	ldw	r2,-12(fp)
 1004a24:	10800b17 	ldw	r2,44(r2)
 1004a28:	d0a71915 	stw	r2,-25500(gp)
 1004a2c:	e0bffd17 	ldw	r2,-12(fp)
 1004a30:	10800b17 	ldw	r2,44(r2)
 1004a34:	10c00524 	muli	r3,r2,20
 1004a38:	008060b4 	movhi	r2,386
 1004a3c:	10ba6804 	addi	r2,r2,-5728
 1004a40:	1887883a 	add	r3,r3,r2
 1004a44:	e0bffd17 	ldw	r2,-12(fp)
 1004a48:	10800104 	addi	r2,r2,4
 1004a4c:	100b883a 	mov	r5,r2
 1004a50:	1809883a 	mov	r4,r3
 1004a54:	1000b800 	call	1000b80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004a58:	e0bffd17 	ldw	r2,-12(fp)
 1004a5c:	10800b17 	ldw	r2,44(r2)
 1004a60:	d0e71317 	ldw	r3,-25524(gp)
 1004a64:	18c00b17 	ldw	r3,44(r3)
 1004a68:	1880022e 	bgeu	r3,r2,1004a74 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 1004a6c:	00800044 	movi	r2,1
 1004a70:	d0a71c15 	stw	r2,-25488(gp)
	}
}
 1004a74:	0001883a 	nop
 1004a78:	e037883a 	mov	sp,fp
 1004a7c:	dfc00117 	ldw	ra,4(sp)
 1004a80:	df000017 	ldw	fp,0(sp)
 1004a84:	dec00204 	addi	sp,sp,8
 1004a88:	f800283a 	ret

01004a8c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004a8c:	defffd04 	addi	sp,sp,-12
 1004a90:	dfc00215 	stw	ra,8(sp)
 1004a94:	df000115 	stw	fp,4(sp)
 1004a98:	df000104 	addi	fp,sp,4
 1004a9c:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 1004aa0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004aa4:	d0e71d17 	ldw	r3,-25484(gp)
 1004aa8:	e0bfff17 	ldw	r2,-4(fp)
 1004aac:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 1004ab0:	d0e71817 	ldw	r3,-25504(gp)
 1004ab4:	e0bfff17 	ldw	r2,-4(fp)
 1004ab8:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 1004abc:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1004ac0:	0001883a 	nop
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	dfc00117 	ldw	ra,4(sp)
 1004acc:	df000017 	ldw	fp,0(sp)
 1004ad0:	dec00204 	addi	sp,sp,8
 1004ad4:	f800283a 	ret

01004ad8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004ad8:	defffe04 	addi	sp,sp,-8
 1004adc:	df000115 	stw	fp,4(sp)
 1004ae0:	df000104 	addi	fp,sp,4
 1004ae4:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004ae8:	d0e71d17 	ldw	r3,-25484(gp)
 1004aec:	e0bfff17 	ldw	r2,-4(fp)
 1004af0:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 1004af4:	d0e71817 	ldw	r3,-25504(gp)
 1004af8:	e0bfff17 	ldw	r2,-4(fp)
 1004afc:	10c00115 	stw	r3,4(r2)
}
 1004b00:	0001883a 	nop
 1004b04:	e037883a 	mov	sp,fp
 1004b08:	df000017 	ldw	fp,0(sp)
 1004b0c:	dec00104 	addi	sp,sp,4
 1004b10:	f800283a 	ret

01004b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1004b14:	defff904 	addi	sp,sp,-28
 1004b18:	dfc00615 	stw	ra,24(sp)
 1004b1c:	df000515 	stw	fp,20(sp)
 1004b20:	df000504 	addi	fp,sp,20
 1004b24:	e13ffe15 	stw	r4,-8(fp)
 1004b28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1004b2c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 1004b30:	d0a71817 	ldw	r2,-25504(gp)
 1004b34:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 1004b38:	e0bffe17 	ldw	r2,-8(fp)
 1004b3c:	10800117 	ldw	r2,4(r2)
 1004b40:	e0fffc17 	ldw	r3,-16(fp)
 1004b44:	1885c83a 	sub	r2,r3,r2
 1004b48:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 1004b4c:	e0bfff17 	ldw	r2,-4(fp)
 1004b50:	10800017 	ldw	r2,0(r2)
 1004b54:	10bfffd8 	cmpnei	r2,r2,-1
 1004b58:	1000021e 	bne	r2,zero,1004b64 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 1004b5c:	e03ffb15 	stw	zero,-20(fp)
 1004b60:	00001d06 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 1004b64:	e0bffe17 	ldw	r2,-8(fp)
 1004b68:	10c00017 	ldw	r3,0(r2)
 1004b6c:	d0a71d17 	ldw	r2,-25484(gp)
 1004b70:	18800726 	beq	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
 1004b74:	e0bffe17 	ldw	r2,-8(fp)
 1004b78:	10800117 	ldw	r2,4(r2)
 1004b7c:	e0fffc17 	ldw	r3,-16(fp)
 1004b80:	18800336 	bltu	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 1004b84:	00800044 	movi	r2,1
 1004b88:	e0bffb15 	stw	r2,-20(fp)
 1004b8c:	00001206 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 1004b90:	e0bfff17 	ldw	r2,-4(fp)
 1004b94:	10800017 	ldw	r2,0(r2)
 1004b98:	e0fffd17 	ldw	r3,-12(fp)
 1004b9c:	18800a2e 	bgeu	r3,r2,1004bc8 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 1004ba0:	e0bfff17 	ldw	r2,-4(fp)
 1004ba4:	10c00017 	ldw	r3,0(r2)
 1004ba8:	e0bffd17 	ldw	r2,-12(fp)
 1004bac:	1887c83a 	sub	r3,r3,r2
 1004bb0:	e0bfff17 	ldw	r2,-4(fp)
 1004bb4:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 1004bb8:	e13ffe17 	ldw	r4,-8(fp)
 1004bbc:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 1004bc0:	e03ffb15 	stw	zero,-20(fp)
 1004bc4:	00000406 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 1004bc8:	e0bfff17 	ldw	r2,-4(fp)
 1004bcc:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 1004bd0:	00800044 	movi	r2,1
 1004bd4:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 1004bd8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1004bdc:	e0bffb17 	ldw	r2,-20(fp)
}
 1004be0:	e037883a 	mov	sp,fp
 1004be4:	dfc00117 	ldw	ra,4(sp)
 1004be8:	df000017 	ldw	fp,0(sp)
 1004bec:	dec00204 	addi	sp,sp,8
 1004bf0:	f800283a 	ret

01004bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1004bf4:	deffff04 	addi	sp,sp,-4
 1004bf8:	df000015 	stw	fp,0(sp)
 1004bfc:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1004c00:	00800044 	movi	r2,1
 1004c04:	d0a71c15 	stw	r2,-25488(gp)
}
 1004c08:	0001883a 	nop
 1004c0c:	e037883a 	mov	sp,fp
 1004c10:	df000017 	ldw	fp,0(sp)
 1004c14:	dec00104 	addi	sp,sp,4
 1004c18:	f800283a 	ret

01004c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 1004c1c:	defffd04 	addi	sp,sp,-12
 1004c20:	dfc00215 	stw	ra,8(sp)
 1004c24:	df000115 	stw	fp,4(sp)
 1004c28:	df000104 	addi	fp,sp,4
 1004c2c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 1004c30:	1004cf00 	call	1004cf0 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1004c34:	003ffe06 	br	1004c30 <__alt_data_end+0xff004c30>

01004c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 1004c38:	defffd04 	addi	sp,sp,-12
 1004c3c:	dfc00215 	stw	ra,8(sp)
 1004c40:	df000115 	stw	fp,4(sp)
 1004c44:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c48:	e03fff15 	stw	zero,-4(fp)
 1004c4c:	00000a06 	br	1004c78 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 1004c50:	e0bfff17 	ldw	r2,-4(fp)
 1004c54:	10c00524 	muli	r3,r2,20
 1004c58:	008060b4 	movhi	r2,386
 1004c5c:	10ba6804 	addi	r2,r2,-5728
 1004c60:	1885883a 	add	r2,r3,r2
 1004c64:	1009883a 	mov	r4,r2
 1004c68:	1000aec0 	call	1000aec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c6c:	e0bfff17 	ldw	r2,-4(fp)
 1004c70:	10800044 	addi	r2,r2,1
 1004c74:	e0bfff15 	stw	r2,-4(fp)
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10800170 	cmpltui	r2,r2,5
 1004c80:	103ff31e 	bne	r2,zero,1004c50 <__alt_data_end+0xff004c50>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1004c84:	010060b4 	movhi	r4,386
 1004c88:	213a8104 	addi	r4,r4,-5628
 1004c8c:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 1004c90:	010060b4 	movhi	r4,386
 1004c94:	213a8604 	addi	r4,r4,-5608
 1004c98:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 1004c9c:	010060b4 	movhi	r4,386
 1004ca0:	213a8b04 	addi	r4,r4,-5588
 1004ca4:	1000aec0 	call	1000aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 1004ca8:	010060b4 	movhi	r4,386
 1004cac:	213a9004 	addi	r4,r4,-5568
 1004cb0:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 1004cb4:	010060b4 	movhi	r4,386
 1004cb8:	213a9504 	addi	r4,r4,-5548
 1004cbc:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 1004cc0:	008060b4 	movhi	r2,386
 1004cc4:	10ba8104 	addi	r2,r2,-5628
 1004cc8:	d0a71415 	stw	r2,-25520(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 1004ccc:	008060b4 	movhi	r2,386
 1004cd0:	10ba8604 	addi	r2,r2,-5608
 1004cd4:	d0a71515 	stw	r2,-25516(gp)
}
 1004cd8:	0001883a 	nop
 1004cdc:	e037883a 	mov	sp,fp
 1004ce0:	dfc00117 	ldw	ra,4(sp)
 1004ce4:	df000017 	ldw	fp,0(sp)
 1004ce8:	dec00204 	addi	sp,sp,8
 1004cec:	f800283a 	ret

01004cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 1004cf0:	defffd04 	addi	sp,sp,-12
 1004cf4:	dfc00215 	stw	ra,8(sp)
 1004cf8:	df000115 	stw	fp,4(sp)
 1004cfc:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d00:	00001306 	br	1004d50 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 1004d04:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004d08:	008060b4 	movhi	r2,386
 1004d0c:	10ba9004 	addi	r2,r2,-5568
 1004d10:	10800317 	ldw	r2,12(r2)
 1004d14:	10800317 	ldw	r2,12(r2)
 1004d18:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1004d1c:	e0bfff17 	ldw	r2,-4(fp)
 1004d20:	10800104 	addi	r2,r2,4
 1004d24:	1009883a 	mov	r4,r2
 1004d28:	1000ce40 	call	1000ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 1004d2c:	d0a71717 	ldw	r2,-25508(gp)
 1004d30:	10bfffc4 	addi	r2,r2,-1
 1004d34:	d0a71715 	stw	r2,-25508(gp)
				--uxDeletedTasksWaitingCleanUp;
 1004d38:	d0a71617 	ldw	r2,-25512(gp)
 1004d3c:	10bfffc4 	addi	r2,r2,-1
 1004d40:	d0a71615 	stw	r2,-25512(gp)
			}
			taskEXIT_CRITICAL();
 1004d44:	10052c40 	call	10052c4 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 1004d48:	e13fff17 	ldw	r4,-4(fp)
 1004d4c:	1004e340 	call	1004e34 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d50:	d0a71617 	ldw	r2,-25512(gp)
 1004d54:	103feb1e 	bne	r2,zero,1004d04 <__alt_data_end+0xff004d04>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1004d58:	0001883a 	nop
 1004d5c:	e037883a 	mov	sp,fp
 1004d60:	dfc00117 	ldw	ra,4(sp)
 1004d64:	df000017 	ldw	fp,0(sp)
 1004d68:	dec00204 	addi	sp,sp,8
 1004d6c:	f800283a 	ret

01004d70 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 1004d70:	defffd04 	addi	sp,sp,-12
 1004d74:	df000215 	stw	fp,8(sp)
 1004d78:	df000204 	addi	fp,sp,8
 1004d7c:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 1004d80:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004d84:	00000606 	br	1004da0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 1004d88:	e0bfff17 	ldw	r2,-4(fp)
 1004d8c:	10800044 	addi	r2,r2,1
 1004d90:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 1004d94:	e0bffe17 	ldw	r2,-8(fp)
 1004d98:	10800044 	addi	r2,r2,1
 1004d9c:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004da0:	e0bfff17 	ldw	r2,-4(fp)
 1004da4:	10800003 	ldbu	r2,0(r2)
 1004da8:	10803fcc 	andi	r2,r2,255
 1004dac:	10802960 	cmpeqi	r2,r2,165
 1004db0:	103ff51e 	bne	r2,zero,1004d88 <__alt_data_end+0xff004d88>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 1004db4:	e0bffe17 	ldw	r2,-8(fp)
 1004db8:	1004d0ba 	srli	r2,r2,2
 1004dbc:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 1004dc0:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004dc4:	e037883a 	mov	sp,fp
 1004dc8:	df000017 	ldw	fp,0(sp)
 1004dcc:	dec00104 	addi	sp,sp,4
 1004dd0:	f800283a 	ret

01004dd4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1004dd4:	defffa04 	addi	sp,sp,-24
 1004dd8:	dfc00515 	stw	ra,20(sp)
 1004ddc:	df000415 	stw	fp,16(sp)
 1004de0:	df000404 	addi	fp,sp,16
 1004de4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1004de8:	e0bfff17 	ldw	r2,-4(fp)
 1004dec:	1000021e 	bne	r2,zero,1004df8 <uxTaskGetStackHighWaterMark+0x24>
 1004df0:	d0a71317 	ldw	r2,-25524(gp)
 1004df4:	00000106 	br	1004dfc <uxTaskGetStackHighWaterMark+0x28>
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 1004e00:	e0bffc17 	ldw	r2,-16(fp)
 1004e04:	10800c17 	ldw	r2,48(r2)
 1004e08:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1004e0c:	e13ffd17 	ldw	r4,-12(fp)
 1004e10:	1004d700 	call	1004d70 <prvTaskCheckFreeStackSpace>
 1004e14:	10bfffcc 	andi	r2,r2,65535
 1004e18:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1004e1c:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004e20:	e037883a 	mov	sp,fp
 1004e24:	dfc00117 	ldw	ra,4(sp)
 1004e28:	df000017 	ldw	fp,0(sp)
 1004e2c:	dec00204 	addi	sp,sp,8
 1004e30:	f800283a 	ret

01004e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 1004e34:	defffd04 	addi	sp,sp,-12
 1004e38:	dfc00215 	stw	ra,8(sp)
 1004e3c:	df000115 	stw	fp,4(sp)
 1004e40:	df000104 	addi	fp,sp,4
 1004e44:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1004e48:	e0bfff17 	ldw	r2,-4(fp)
 1004e4c:	10800c17 	ldw	r2,48(r2)
 1004e50:	1009883a 	mov	r4,r2
 1004e54:	10011840 	call	1001184 <vPortFree>
			vPortFree( pxTCB );
 1004e58:	e13fff17 	ldw	r4,-4(fp)
 1004e5c:	10011840 	call	1001184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1004e60:	0001883a 	nop
 1004e64:	e037883a 	mov	sp,fp
 1004e68:	dfc00117 	ldw	ra,4(sp)
 1004e6c:	df000017 	ldw	fp,0(sp)
 1004e70:	dec00204 	addi	sp,sp,8
 1004e74:	f800283a 	ret

01004e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 1004e78:	defffe04 	addi	sp,sp,-8
 1004e7c:	df000115 	stw	fp,4(sp)
 1004e80:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004e84:	d0a71417 	ldw	r2,-25520(gp)
 1004e88:	10800017 	ldw	r2,0(r2)
 1004e8c:	1000031e 	bne	r2,zero,1004e9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 1004e90:	00bfffc4 	movi	r2,-1
 1004e94:	d0a71f15 	stw	r2,-25476(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 1004e98:	00000706 	br	1004eb8 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004e9c:	d0a71417 	ldw	r2,-25520(gp)
 1004ea0:	10800317 	ldw	r2,12(r2)
 1004ea4:	10800317 	ldw	r2,12(r2)
 1004ea8:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1004eac:	e0bfff17 	ldw	r2,-4(fp)
 1004eb0:	10800117 	ldw	r2,4(r2)
 1004eb4:	d0a71f15 	stw	r2,-25476(gp)
	}
}
 1004eb8:	0001883a 	nop
 1004ebc:	e037883a 	mov	sp,fp
 1004ec0:	df000017 	ldw	fp,0(sp)
 1004ec4:	dec00104 	addi	sp,sp,4
 1004ec8:	f800283a 	ret

01004ecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 1004ecc:	defffe04 	addi	sp,sp,-8
 1004ed0:	df000115 	stw	fp,4(sp)
 1004ed4:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1004ed8:	d0a71317 	ldw	r2,-25524(gp)
 1004edc:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1004ee0:	e0bfff17 	ldw	r2,-4(fp)
	}
 1004ee4:	e037883a 	mov	sp,fp
 1004ee8:	df000017 	ldw	fp,0(sp)
 1004eec:	dec00104 	addi	sp,sp,4
 1004ef0:	f800283a 	ret

01004ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1004ef4:	defffb04 	addi	sp,sp,-20
 1004ef8:	dfc00415 	stw	ra,16(sp)
 1004efc:	df000315 	stw	fp,12(sp)
 1004f00:	df000304 	addi	fp,sp,12
 1004f04:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1004f08:	e0bfff17 	ldw	r2,-4(fp)
 1004f0c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1004f10:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1004f14:	e0bfff17 	ldw	r2,-4(fp)
 1004f18:	10004026 	beq	r2,zero,100501c <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1004f1c:	e0bffe17 	ldw	r2,-8(fp)
 1004f20:	10c00b17 	ldw	r3,44(r2)
 1004f24:	d0a71317 	ldw	r2,-25524(gp)
 1004f28:	10800b17 	ldw	r2,44(r2)
 1004f2c:	1880342e 	bgeu	r3,r2,1005000 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1004f30:	e0bffe17 	ldw	r2,-8(fp)
 1004f34:	10800617 	ldw	r2,24(r2)
 1004f38:	10000616 	blt	r2,zero,1004f54 <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1004f3c:	d0a71317 	ldw	r2,-25524(gp)
 1004f40:	10800b17 	ldw	r2,44(r2)
 1004f44:	00c00144 	movi	r3,5
 1004f48:	1887c83a 	sub	r3,r3,r2
 1004f4c:	e0bffe17 	ldw	r2,-8(fp)
 1004f50:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1004f54:	e0bffe17 	ldw	r2,-8(fp)
 1004f58:	10c00517 	ldw	r3,20(r2)
 1004f5c:	e0bffe17 	ldw	r2,-8(fp)
 1004f60:	10800b17 	ldw	r2,44(r2)
 1004f64:	11000524 	muli	r4,r2,20
 1004f68:	008060b4 	movhi	r2,386
 1004f6c:	10ba6804 	addi	r2,r2,-5728
 1004f70:	2085883a 	add	r2,r4,r2
 1004f74:	18801b1e 	bne	r3,r2,1004fe4 <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1004f78:	e0bffe17 	ldw	r2,-8(fp)
 1004f7c:	10800104 	addi	r2,r2,4
 1004f80:	1009883a 	mov	r4,r2
 1004f84:	1000ce40 	call	1000ce4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004f88:	d0a71317 	ldw	r2,-25524(gp)
 1004f8c:	10c00b17 	ldw	r3,44(r2)
 1004f90:	e0bffe17 	ldw	r2,-8(fp)
 1004f94:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1004f98:	e0bffe17 	ldw	r2,-8(fp)
 1004f9c:	10800b17 	ldw	r2,44(r2)
 1004fa0:	d0e71917 	ldw	r3,-25500(gp)
 1004fa4:	1880032e 	bgeu	r3,r2,1004fb4 <xTaskPriorityInherit+0xc0>
 1004fa8:	e0bffe17 	ldw	r2,-8(fp)
 1004fac:	10800b17 	ldw	r2,44(r2)
 1004fb0:	d0a71915 	stw	r2,-25500(gp)
 1004fb4:	e0bffe17 	ldw	r2,-8(fp)
 1004fb8:	10800b17 	ldw	r2,44(r2)
 1004fbc:	10c00524 	muli	r3,r2,20
 1004fc0:	008060b4 	movhi	r2,386
 1004fc4:	10ba6804 	addi	r2,r2,-5728
 1004fc8:	1887883a 	add	r3,r3,r2
 1004fcc:	e0bffe17 	ldw	r2,-8(fp)
 1004fd0:	10800104 	addi	r2,r2,4
 1004fd4:	100b883a 	mov	r5,r2
 1004fd8:	1809883a 	mov	r4,r3
 1004fdc:	1000b800 	call	1000b80 <vListInsertEnd>
 1004fe0:	00000406 	br	1004ff4 <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004fe4:	d0a71317 	ldw	r2,-25524(gp)
 1004fe8:	10c00b17 	ldw	r3,44(r2)
 1004fec:	e0bffe17 	ldw	r2,-8(fp)
 1004ff0:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1004ff4:	00800044 	movi	r2,1
 1004ff8:	e0bffd15 	stw	r2,-12(fp)
 1004ffc:	00000706 	br	100501c <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1005000:	e0bffe17 	ldw	r2,-8(fp)
 1005004:	10c01017 	ldw	r3,64(r2)
 1005008:	d0a71317 	ldw	r2,-25524(gp)
 100500c:	10800b17 	ldw	r2,44(r2)
 1005010:	1880022e 	bgeu	r3,r2,100501c <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1005014:	00800044 	movi	r2,1
 1005018:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 100501c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005020:	e037883a 	mov	sp,fp
 1005024:	dfc00117 	ldw	ra,4(sp)
 1005028:	df000017 	ldw	fp,0(sp)
 100502c:	dec00204 	addi	sp,sp,8
 1005030:	f800283a 	ret

01005034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1005034:	defffb04 	addi	sp,sp,-20
 1005038:	dfc00415 	stw	ra,16(sp)
 100503c:	df000315 	stw	fp,12(sp)
 1005040:	df000304 	addi	fp,sp,12
 1005044:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005048:	e0bfff17 	ldw	r2,-4(fp)
 100504c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1005050:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1005054:	e0bfff17 	ldw	r2,-4(fp)
 1005058:	10002f26 	beq	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 100505c:	e0bffe17 	ldw	r2,-8(fp)
 1005060:	10801117 	ldw	r2,68(r2)
 1005064:	10ffffc4 	addi	r3,r2,-1
 1005068:	e0bffe17 	ldw	r2,-8(fp)
 100506c:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1005070:	e0bffe17 	ldw	r2,-8(fp)
 1005074:	10c00b17 	ldw	r3,44(r2)
 1005078:	e0bffe17 	ldw	r2,-8(fp)
 100507c:	10801017 	ldw	r2,64(r2)
 1005080:	18802526 	beq	r3,r2,1005118 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1005084:	e0bffe17 	ldw	r2,-8(fp)
 1005088:	10801117 	ldw	r2,68(r2)
 100508c:	1000221e 	bne	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005090:	e0bffe17 	ldw	r2,-8(fp)
 1005094:	10800104 	addi	r2,r2,4
 1005098:	1009883a 	mov	r4,r2
 100509c:	1000ce40 	call	1000ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 10050a0:	e0bffe17 	ldw	r2,-8(fp)
 10050a4:	10c01017 	ldw	r3,64(r2)
 10050a8:	e0bffe17 	ldw	r2,-8(fp)
 10050ac:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10050b0:	e0bffe17 	ldw	r2,-8(fp)
 10050b4:	10800b17 	ldw	r2,44(r2)
 10050b8:	00c00144 	movi	r3,5
 10050bc:	1887c83a 	sub	r3,r3,r2
 10050c0:	e0bffe17 	ldw	r2,-8(fp)
 10050c4:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 10050c8:	e0bffe17 	ldw	r2,-8(fp)
 10050cc:	10800b17 	ldw	r2,44(r2)
 10050d0:	d0e71917 	ldw	r3,-25500(gp)
 10050d4:	1880032e 	bgeu	r3,r2,10050e4 <xTaskPriorityDisinherit+0xb0>
 10050d8:	e0bffe17 	ldw	r2,-8(fp)
 10050dc:	10800b17 	ldw	r2,44(r2)
 10050e0:	d0a71915 	stw	r2,-25500(gp)
 10050e4:	e0bffe17 	ldw	r2,-8(fp)
 10050e8:	10800b17 	ldw	r2,44(r2)
 10050ec:	10c00524 	muli	r3,r2,20
 10050f0:	008060b4 	movhi	r2,386
 10050f4:	10ba6804 	addi	r2,r2,-5728
 10050f8:	1887883a 	add	r3,r3,r2
 10050fc:	e0bffe17 	ldw	r2,-8(fp)
 1005100:	10800104 	addi	r2,r2,4
 1005104:	100b883a 	mov	r5,r2
 1005108:	1809883a 	mov	r4,r3
 100510c:	1000b800 	call	1000b80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1005110:	00800044 	movi	r2,1
 1005114:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1005118:	e0bffd17 	ldw	r2,-12(fp)
	}
 100511c:	e037883a 	mov	sp,fp
 1005120:	dfc00117 	ldw	ra,4(sp)
 1005124:	df000017 	ldw	fp,0(sp)
 1005128:	dec00204 	addi	sp,sp,8
 100512c:	f800283a 	ret

01005130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1005130:	defff804 	addi	sp,sp,-32
 1005134:	dfc00715 	stw	ra,28(sp)
 1005138:	df000615 	stw	fp,24(sp)
 100513c:	df000604 	addi	fp,sp,24
 1005140:	e13ffe15 	stw	r4,-8(fp)
 1005144:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005148:	e0bffe17 	ldw	r2,-8(fp)
 100514c:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1005150:	00800044 	movi	r2,1
 1005154:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1005158:	e0bffe17 	ldw	r2,-8(fp)
 100515c:	10003e26 	beq	r2,zero,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1005160:	e0bffb17 	ldw	r2,-20(fp)
 1005164:	10c01017 	ldw	r3,64(r2)
 1005168:	e0bfff17 	ldw	r2,-4(fp)
 100516c:	1880032e 	bgeu	r3,r2,100517c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1005170:	e0bfff17 	ldw	r2,-4(fp)
 1005174:	e0bffa15 	stw	r2,-24(fp)
 1005178:	00000306 	br	1005188 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 100517c:	e0bffb17 	ldw	r2,-20(fp)
 1005180:	10801017 	ldw	r2,64(r2)
 1005184:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1005188:	e0bffb17 	ldw	r2,-20(fp)
 100518c:	10c00b17 	ldw	r3,44(r2)
 1005190:	e0bffa17 	ldw	r2,-24(fp)
 1005194:	18803026 	beq	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1005198:	e0bffb17 	ldw	r2,-20(fp)
 100519c:	10c01117 	ldw	r3,68(r2)
 10051a0:	e0bffc17 	ldw	r2,-16(fp)
 10051a4:	18802c1e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 10051a8:	e0bffb17 	ldw	r2,-20(fp)
 10051ac:	10800b17 	ldw	r2,44(r2)
 10051b0:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 10051b4:	e0bffb17 	ldw	r2,-20(fp)
 10051b8:	e0fffa17 	ldw	r3,-24(fp)
 10051bc:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 10051c0:	e0bffb17 	ldw	r2,-20(fp)
 10051c4:	10800617 	ldw	r2,24(r2)
 10051c8:	10000516 	blt	r2,zero,10051e0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10051cc:	00c00144 	movi	r3,5
 10051d0:	e0bffa17 	ldw	r2,-24(fp)
 10051d4:	1887c83a 	sub	r3,r3,r2
 10051d8:	e0bffb17 	ldw	r2,-20(fp)
 10051dc:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 10051e0:	e0bffb17 	ldw	r2,-20(fp)
 10051e4:	10c00517 	ldw	r3,20(r2)
 10051e8:	e0bffd17 	ldw	r2,-12(fp)
 10051ec:	11000524 	muli	r4,r2,20
 10051f0:	008060b4 	movhi	r2,386
 10051f4:	10ba6804 	addi	r2,r2,-5728
 10051f8:	2085883a 	add	r2,r4,r2
 10051fc:	1880161e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005200:	e0bffb17 	ldw	r2,-20(fp)
 1005204:	10800104 	addi	r2,r2,4
 1005208:	1009883a 	mov	r4,r2
 100520c:	1000ce40 	call	1000ce4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1005210:	e0bffb17 	ldw	r2,-20(fp)
 1005214:	10800b17 	ldw	r2,44(r2)
 1005218:	d0e71917 	ldw	r3,-25500(gp)
 100521c:	1880032e 	bgeu	r3,r2,100522c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1005220:	e0bffb17 	ldw	r2,-20(fp)
 1005224:	10800b17 	ldw	r2,44(r2)
 1005228:	d0a71915 	stw	r2,-25500(gp)
 100522c:	e0bffb17 	ldw	r2,-20(fp)
 1005230:	10800b17 	ldw	r2,44(r2)
 1005234:	10c00524 	muli	r3,r2,20
 1005238:	008060b4 	movhi	r2,386
 100523c:	10ba6804 	addi	r2,r2,-5728
 1005240:	1887883a 	add	r3,r3,r2
 1005244:	e0bffb17 	ldw	r2,-20(fp)
 1005248:	10800104 	addi	r2,r2,4
 100524c:	100b883a 	mov	r5,r2
 1005250:	1809883a 	mov	r4,r3
 1005254:	1000b800 	call	1000b80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005258:	0001883a 	nop
 100525c:	e037883a 	mov	sp,fp
 1005260:	dfc00117 	ldw	ra,4(sp)
 1005264:	df000017 	ldw	fp,0(sp)
 1005268:	dec00204 	addi	sp,sp,8
 100526c:	f800283a 	ret

01005270 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1005270:	defffe04 	addi	sp,sp,-8
 1005274:	df000115 	stw	fp,4(sp)
 1005278:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100527c:	0005303a 	rdctl	r2,status
 1005280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005284:	e0ffff17 	ldw	r3,-4(fp)
 1005288:	00bfff84 	movi	r2,-2
 100528c:	1884703a 	and	r2,r3,r2
 1005290:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 1005294:	d0a71a17 	ldw	r2,-25496(gp)
 1005298:	10000526 	beq	r2,zero,10052b0 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 100529c:	d0a71317 	ldw	r2,-25524(gp)
 10052a0:	10c00f17 	ldw	r3,60(r2)
 10052a4:	18c00044 	addi	r3,r3,1
 10052a8:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 10052ac:	d0a71317 	ldw	r2,-25524(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 10052b0:	0001883a 	nop
 10052b4:	e037883a 	mov	sp,fp
 10052b8:	df000017 	ldw	fp,0(sp)
 10052bc:	dec00104 	addi	sp,sp,4
 10052c0:	f800283a 	ret

010052c4 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 10052c4:	defffe04 	addi	sp,sp,-8
 10052c8:	df000115 	stw	fp,4(sp)
 10052cc:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 10052d0:	d0a71a17 	ldw	r2,-25496(gp)
 10052d4:	10000e26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 10052d8:	d0a71317 	ldw	r2,-25524(gp)
 10052dc:	10800f17 	ldw	r2,60(r2)
 10052e0:	10000b26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 10052e4:	d0a71317 	ldw	r2,-25524(gp)
 10052e8:	10c00f17 	ldw	r3,60(r2)
 10052ec:	18ffffc4 	addi	r3,r3,-1
 10052f0:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 10052f4:	d0a71317 	ldw	r2,-25524(gp)
 10052f8:	10800f17 	ldw	r2,60(r2)
 10052fc:	1000041e 	bne	r2,zero,1005310 <vTaskExitCritical+0x4c>
 1005300:	00800044 	movi	r2,1
 1005304:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005308:	e0bfff17 	ldw	r2,-4(fp)
 100530c:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005310:	0001883a 	nop
 1005314:	e037883a 	mov	sp,fp
 1005318:	df000017 	ldw	fp,0(sp)
 100531c:	dec00104 	addi	sp,sp,4
 1005320:	f800283a 	ret

01005324 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1005324:	defffe04 	addi	sp,sp,-8
 1005328:	df000115 	stw	fp,4(sp)
 100532c:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1005330:	d0a71317 	ldw	r2,-25524(gp)
 1005334:	10800617 	ldw	r2,24(r2)
 1005338:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100533c:	d0a71317 	ldw	r2,-25524(gp)
 1005340:	d0e71317 	ldw	r3,-25524(gp)
 1005344:	18c00b17 	ldw	r3,44(r3)
 1005348:	01000144 	movi	r4,5
 100534c:	20c7c83a 	sub	r3,r4,r3
 1005350:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 1005354:	e0bfff17 	ldw	r2,-4(fp)
}
 1005358:	e037883a 	mov	sp,fp
 100535c:	df000017 	ldw	fp,0(sp)
 1005360:	dec00104 	addi	sp,sp,4
 1005364:	f800283a 	ret

01005368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1005368:	deffff04 	addi	sp,sp,-4
 100536c:	df000015 	stw	fp,0(sp)
 1005370:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 1005374:	d0a71317 	ldw	r2,-25524(gp)
 1005378:	10000426 	beq	r2,zero,100538c <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 100537c:	d0a71317 	ldw	r2,-25524(gp)
 1005380:	10c01117 	ldw	r3,68(r2)
 1005384:	18c00044 	addi	r3,r3,1
 1005388:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 100538c:	d0a71317 	ldw	r2,-25524(gp)
	}
 1005390:	e037883a 	mov	sp,fp
 1005394:	df000017 	ldw	fp,0(sp)
 1005398:	dec00104 	addi	sp,sp,4
 100539c:	f800283a 	ret

010053a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 10053a0:	defffb04 	addi	sp,sp,-20
 10053a4:	dfc00415 	stw	ra,16(sp)
 10053a8:	df000315 	stw	fp,12(sp)
 10053ac:	df000304 	addi	fp,sp,12
 10053b0:	e13ffe15 	stw	r4,-8(fp)
 10053b4:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 10053b8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 10053bc:	d0a71317 	ldw	r2,-25524(gp)
 10053c0:	10801217 	ldw	r2,72(r2)
 10053c4:	1000091e 	bne	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10053c8:	d0a71317 	ldw	r2,-25524(gp)
 10053cc:	00c00044 	movi	r3,1
 10053d0:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10053d4:	e0bfff17 	ldw	r2,-4(fp)
 10053d8:	10000426 	beq	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10053dc:	01400044 	movi	r5,1
 10053e0:	e13fff17 	ldw	r4,-4(fp)
 10053e4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10053e8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10053ec:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10053f0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 10053f4:	d0a71317 	ldw	r2,-25524(gp)
 10053f8:	10801217 	ldw	r2,72(r2)
 10053fc:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 1005400:	e0bffd17 	ldw	r2,-12(fp)
 1005404:	10000926 	beq	r2,zero,100542c <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 1005408:	e0bffe17 	ldw	r2,-8(fp)
 100540c:	10000326 	beq	r2,zero,100541c <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 1005410:	d0a71317 	ldw	r2,-25524(gp)
 1005414:	10001215 	stw	zero,72(r2)
 1005418:	00000406 	br	100542c <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 100541c:	d0a71317 	ldw	r2,-25524(gp)
 1005420:	e0fffd17 	ldw	r3,-12(fp)
 1005424:	18ffffc4 	addi	r3,r3,-1
 1005428:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 100542c:	d0a71317 	ldw	r2,-25524(gp)
 1005430:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005434:	10052c40 	call	10052c4 <vTaskExitCritical>

		return ulReturn;
 1005438:	e0bffd17 	ldw	r2,-12(fp)
	}
 100543c:	e037883a 	mov	sp,fp
 1005440:	dfc00117 	ldw	ra,4(sp)
 1005444:	df000017 	ldw	fp,0(sp)
 1005448:	dec00204 	addi	sp,sp,8
 100544c:	f800283a 	ret

01005450 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1005450:	defff904 	addi	sp,sp,-28
 1005454:	dfc00615 	stw	ra,24(sp)
 1005458:	df000515 	stw	fp,20(sp)
 100545c:	df000504 	addi	fp,sp,20
 1005460:	e13ffc15 	stw	r4,-16(fp)
 1005464:	e17ffd15 	stw	r5,-12(fp)
 1005468:	e1bffe15 	stw	r6,-8(fp)
 100546c:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1005470:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1005474:	d0a71317 	ldw	r2,-25524(gp)
 1005478:	10801303 	ldbu	r2,76(r2)
 100547c:	10803fcc 	andi	r2,r2,255
 1005480:	108000a0 	cmpeqi	r2,r2,2
 1005484:	10000f1e 	bne	r2,zero,10054c4 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1005488:	d0a71317 	ldw	r2,-25524(gp)
 100548c:	11001217 	ldw	r4,72(r2)
 1005490:	e0fffc17 	ldw	r3,-16(fp)
 1005494:	00c6303a 	nor	r3,zero,r3
 1005498:	20c6703a 	and	r3,r4,r3
 100549c:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10054a0:	d0a71317 	ldw	r2,-25524(gp)
 10054a4:	00c00044 	movi	r3,1
 10054a8:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10054ac:	e0bfff17 	ldw	r2,-4(fp)
 10054b0:	10000426 	beq	r2,zero,10054c4 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10054b4:	01400044 	movi	r5,1
 10054b8:	e13fff17 	ldw	r4,-4(fp)
 10054bc:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10054c0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10054c4:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10054c8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 10054cc:	e0bffe17 	ldw	r2,-8(fp)
 10054d0:	10000426 	beq	r2,zero,10054e4 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 10054d4:	d0a71317 	ldw	r2,-25524(gp)
 10054d8:	10c01217 	ldw	r3,72(r2)
 10054dc:	e0bffe17 	ldw	r2,-8(fp)
 10054e0:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 10054e4:	d0a71317 	ldw	r2,-25524(gp)
 10054e8:	10801303 	ldbu	r2,76(r2)
 10054ec:	10803fcc 	andi	r2,r2,255
 10054f0:	108000a0 	cmpeqi	r2,r2,2
 10054f4:	1000021e 	bne	r2,zero,1005500 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 10054f8:	e03ffb15 	stw	zero,-20(fp)
 10054fc:	00000806 	br	1005520 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 1005500:	d0a71317 	ldw	r2,-25524(gp)
 1005504:	11001217 	ldw	r4,72(r2)
 1005508:	e0fffd17 	ldw	r3,-12(fp)
 100550c:	00c6303a 	nor	r3,zero,r3
 1005510:	20c6703a 	and	r3,r4,r3
 1005514:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 1005518:	00800044 	movi	r2,1
 100551c:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005520:	d0a71317 	ldw	r2,-25524(gp)
 1005524:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005528:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 100552c:	e0bffb17 	ldw	r2,-20(fp)
	}
 1005530:	e037883a 	mov	sp,fp
 1005534:	dfc00117 	ldw	ra,4(sp)
 1005538:	df000017 	ldw	fp,0(sp)
 100553c:	dec00204 	addi	sp,sp,8
 1005540:	f800283a 	ret

01005544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 1005544:	defff704 	addi	sp,sp,-36
 1005548:	dfc00815 	stw	ra,32(sp)
 100554c:	df000715 	stw	fp,28(sp)
 1005550:	df000704 	addi	fp,sp,28
 1005554:	e13ffc15 	stw	r4,-16(fp)
 1005558:	e17ffd15 	stw	r5,-12(fp)
 100555c:	e1bffe15 	stw	r6,-8(fp)
 1005560:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 1005564:	00800044 	movi	r2,1
 1005568:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 100556c:	e0bffc17 	ldw	r2,-16(fp)
 1005570:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 1005574:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 1005578:	e0bfff17 	ldw	r2,-4(fp)
 100557c:	10000426 	beq	r2,zero,1005590 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1005580:	e0bffa17 	ldw	r2,-24(fp)
 1005584:	10c01217 	ldw	r3,72(r2)
 1005588:	e0bfff17 	ldw	r2,-4(fp)
 100558c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1005590:	e0bffa17 	ldw	r2,-24(fp)
 1005594:	10801303 	ldbu	r2,76(r2)
 1005598:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 100559c:	e0bffa17 	ldw	r2,-24(fp)
 10055a0:	00c00084 	movi	r3,2
 10055a4:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 10055a8:	e0bffe17 	ldw	r2,-8(fp)
 10055ac:	10800168 	cmpgeui	r2,r2,5
 10055b0:	1000261e 	bne	r2,zero,100564c <xTaskGenericNotify+0x108>
 10055b4:	e0bffe17 	ldw	r2,-8(fp)
 10055b8:	100690ba 	slli	r3,r2,2
 10055bc:	00804034 	movhi	r2,256
 10055c0:	10957404 	addi	r2,r2,21968
 10055c4:	1885883a 	add	r2,r3,r2
 10055c8:	10800017 	ldw	r2,0(r2)
 10055cc:	1000683a 	jmp	r2
 10055d0:	01005654 	movui	r4,345
 10055d4:	010055e4 	muli	r4,zero,343
 10055d8:	01005600 	call	100560 <__alt_mem_sdram-0xeffaa0>
 10055dc:	01005618 	cmpnei	r4,zero,344
 10055e0:	01005628 	cmpgeui	r4,zero,344
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 10055e4:	e0bffa17 	ldw	r2,-24(fp)
 10055e8:	10c01217 	ldw	r3,72(r2)
 10055ec:	e0bffd17 	ldw	r2,-12(fp)
 10055f0:	1886b03a 	or	r3,r3,r2
 10055f4:	e0bffa17 	ldw	r2,-24(fp)
 10055f8:	10c01215 	stw	r3,72(r2)
					break;
 10055fc:	00001606 	br	1005658 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1005600:	e0bffa17 	ldw	r2,-24(fp)
 1005604:	10801217 	ldw	r2,72(r2)
 1005608:	10c00044 	addi	r3,r2,1
 100560c:	e0bffa17 	ldw	r2,-24(fp)
 1005610:	10c01215 	stw	r3,72(r2)
					break;
 1005614:	00001006 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1005618:	e0bffa17 	ldw	r2,-24(fp)
 100561c:	e0fffd17 	ldw	r3,-12(fp)
 1005620:	10c01215 	stw	r3,72(r2)
					break;
 1005624:	00000c06 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1005628:	e0bffb03 	ldbu	r2,-20(fp)
 100562c:	108000a0 	cmpeqi	r2,r2,2
 1005630:	1000041e 	bne	r2,zero,1005644 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1005634:	e0bffa17 	ldw	r2,-24(fp)
 1005638:	e0fffd17 	ldw	r3,-12(fp)
 100563c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1005640:	00000506 	br	1005658 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1005644:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 1005648:	00000306 	br	1005658 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 100564c:	0001883a 	nop
 1005650:	00000106 	br	1005658 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005654:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005658:	e0bffb03 	ldbu	r2,-20(fp)
 100565c:	10800058 	cmpnei	r2,r2,1
 1005660:	10001c1e 	bne	r2,zero,10056d4 <xTaskGenericNotify+0x190>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005664:	e0bffa17 	ldw	r2,-24(fp)
 1005668:	10800104 	addi	r2,r2,4
 100566c:	1009883a 	mov	r4,r2
 1005670:	1000ce40 	call	1000ce4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 1005674:	e0bffa17 	ldw	r2,-24(fp)
 1005678:	10800b17 	ldw	r2,44(r2)
 100567c:	d0e71917 	ldw	r3,-25500(gp)
 1005680:	1880032e 	bgeu	r3,r2,1005690 <xTaskGenericNotify+0x14c>
 1005684:	e0bffa17 	ldw	r2,-24(fp)
 1005688:	10800b17 	ldw	r2,44(r2)
 100568c:	d0a71915 	stw	r2,-25500(gp)
 1005690:	e0bffa17 	ldw	r2,-24(fp)
 1005694:	10800b17 	ldw	r2,44(r2)
 1005698:	10c00524 	muli	r3,r2,20
 100569c:	008060b4 	movhi	r2,386
 10056a0:	10ba6804 	addi	r2,r2,-5728
 10056a4:	1887883a 	add	r3,r3,r2
 10056a8:	e0bffa17 	ldw	r2,-24(fp)
 10056ac:	10800104 	addi	r2,r2,4
 10056b0:	100b883a 	mov	r5,r2
 10056b4:	1809883a 	mov	r4,r3
 10056b8:	1000b800 	call	1000b80 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10056bc:	e0bffa17 	ldw	r2,-24(fp)
 10056c0:	10800b17 	ldw	r2,44(r2)
 10056c4:	d0e71317 	ldw	r3,-25524(gp)
 10056c8:	18c00b17 	ldw	r3,44(r3)
 10056cc:	1880012e 	bgeu	r3,r2,10056d4 <xTaskGenericNotify+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 10056d0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10056d4:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 10056d8:	e0bff917 	ldw	r2,-28(fp)
	}
 10056dc:	e037883a 	mov	sp,fp
 10056e0:	dfc00117 	ldw	ra,4(sp)
 10056e4:	df000017 	ldw	fp,0(sp)
 10056e8:	dec00204 	addi	sp,sp,8
 10056ec:	f800283a 	ret

010056f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10056f0:	defff604 	addi	sp,sp,-40
 10056f4:	dfc00915 	stw	ra,36(sp)
 10056f8:	df000815 	stw	fp,32(sp)
 10056fc:	df000804 	addi	fp,sp,32
 1005700:	e13ffc15 	stw	r4,-16(fp)
 1005704:	e17ffd15 	stw	r5,-12(fp)
 1005708:	e1bffe15 	stw	r6,-8(fp)
 100570c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1005710:	00800044 	movi	r2,1
 1005714:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1005718:	e0bffc17 	ldw	r2,-16(fp)
 100571c:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1005720:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 1005724:	e0bfff17 	ldw	r2,-4(fp)
 1005728:	10000426 	beq	r2,zero,100573c <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 100572c:	e0bff917 	ldw	r2,-28(fp)
 1005730:	10c01217 	ldw	r3,72(r2)
 1005734:	e0bfff17 	ldw	r2,-4(fp)
 1005738:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 100573c:	e0bff917 	ldw	r2,-28(fp)
 1005740:	10801303 	ldbu	r2,76(r2)
 1005744:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005748:	e0bff917 	ldw	r2,-28(fp)
 100574c:	00c00084 	movi	r3,2
 1005750:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 1005754:	e0bffe17 	ldw	r2,-8(fp)
 1005758:	10800168 	cmpgeui	r2,r2,5
 100575c:	1000261e 	bne	r2,zero,10057f8 <xTaskGenericNotifyFromISR+0x108>
 1005760:	e0bffe17 	ldw	r2,-8(fp)
 1005764:	100690ba 	slli	r3,r2,2
 1005768:	00804034 	movhi	r2,256
 100576c:	1095df04 	addi	r2,r2,22396
 1005770:	1885883a 	add	r2,r3,r2
 1005774:	10800017 	ldw	r2,0(r2)
 1005778:	1000683a 	jmp	r2
 100577c:	01005800 	call	100580 <__alt_mem_sdram-0xeffa80>
 1005780:	01005790 	cmplti	r4,zero,350
 1005784:	010057ac 	andhi	r4,zero,350
 1005788:	010057c4 	movi	r4,351
 100578c:	010057d4 	movui	r4,351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1005790:	e0bff917 	ldw	r2,-28(fp)
 1005794:	10c01217 	ldw	r3,72(r2)
 1005798:	e0bffd17 	ldw	r2,-12(fp)
 100579c:	1886b03a 	or	r3,r3,r2
 10057a0:	e0bff917 	ldw	r2,-28(fp)
 10057a4:	10c01215 	stw	r3,72(r2)
					break;
 10057a8:	00001606 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 10057ac:	e0bff917 	ldw	r2,-28(fp)
 10057b0:	10801217 	ldw	r2,72(r2)
 10057b4:	10c00044 	addi	r3,r2,1
 10057b8:	e0bff917 	ldw	r2,-28(fp)
 10057bc:	10c01215 	stw	r3,72(r2)
					break;
 10057c0:	00001006 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 10057c4:	e0bff917 	ldw	r2,-28(fp)
 10057c8:	e0fffd17 	ldw	r3,-12(fp)
 10057cc:	10c01215 	stw	r3,72(r2)
					break;
 10057d0:	00000c06 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 10057d4:	e0bffb03 	ldbu	r2,-20(fp)
 10057d8:	108000a0 	cmpeqi	r2,r2,2
 10057dc:	1000041e 	bne	r2,zero,10057f0 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 10057e0:	e0bff917 	ldw	r2,-28(fp)
 10057e4:	e0fffd17 	ldw	r3,-12(fp)
 10057e8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 10057ec:	00000506 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 10057f0:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 10057f4:	00000306 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 10057f8:	0001883a 	nop
 10057fc:	00000106 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005800:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005804:	e0bffb03 	ldbu	r2,-20(fp)
 1005808:	10800058 	cmpnei	r2,r2,1
 100580c:	10002b1e 	bne	r2,zero,10058bc <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005810:	d0a72117 	ldw	r2,-25468(gp)
 1005814:	1000171e 	bne	r2,zero,1005874 <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005818:	e0bff917 	ldw	r2,-28(fp)
 100581c:	10800104 	addi	r2,r2,4
 1005820:	1009883a 	mov	r4,r2
 1005824:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005828:	e0bff917 	ldw	r2,-28(fp)
 100582c:	10800b17 	ldw	r2,44(r2)
 1005830:	d0e71917 	ldw	r3,-25500(gp)
 1005834:	1880032e 	bgeu	r3,r2,1005844 <xTaskGenericNotifyFromISR+0x154>
 1005838:	e0bff917 	ldw	r2,-28(fp)
 100583c:	10800b17 	ldw	r2,44(r2)
 1005840:	d0a71915 	stw	r2,-25500(gp)
 1005844:	e0bff917 	ldw	r2,-28(fp)
 1005848:	10800b17 	ldw	r2,44(r2)
 100584c:	10c00524 	muli	r3,r2,20
 1005850:	008060b4 	movhi	r2,386
 1005854:	10ba6804 	addi	r2,r2,-5728
 1005858:	1887883a 	add	r3,r3,r2
 100585c:	e0bff917 	ldw	r2,-28(fp)
 1005860:	10800104 	addi	r2,r2,4
 1005864:	100b883a 	mov	r5,r2
 1005868:	1809883a 	mov	r4,r3
 100586c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005870:	00000606 	br	100588c <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005874:	e0bff917 	ldw	r2,-28(fp)
 1005878:	10800604 	addi	r2,r2,24
 100587c:	100b883a 	mov	r5,r2
 1005880:	010060b4 	movhi	r4,386
 1005884:	213a8b04 	addi	r4,r4,-5588
 1005888:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 100588c:	e0bff917 	ldw	r2,-28(fp)
 1005890:	10800b17 	ldw	r2,44(r2)
 1005894:	d0e71317 	ldw	r3,-25524(gp)
 1005898:	18c00b17 	ldw	r3,44(r3)
 100589c:	1880072e 	bgeu	r3,r2,10058bc <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10058a0:	e0800217 	ldw	r2,8(fp)
 10058a4:	10000326 	beq	r2,zero,10058b4 <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10058a8:	e0800217 	ldw	r2,8(fp)
 10058ac:	00c00044 	movi	r3,1
 10058b0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10058b4:	00800044 	movi	r2,1
 10058b8:	d0a71c15 	stw	r2,-25488(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 10058bc:	e0bff817 	ldw	r2,-32(fp)
	}
 10058c0:	e037883a 	mov	sp,fp
 10058c4:	dfc00117 	ldw	ra,4(sp)
 10058c8:	df000017 	ldw	fp,0(sp)
 10058cc:	dec00204 	addi	sp,sp,8
 10058d0:	f800283a 	ret

010058d4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10058d4:	defff904 	addi	sp,sp,-28
 10058d8:	dfc00615 	stw	ra,24(sp)
 10058dc:	df000515 	stw	fp,20(sp)
 10058e0:	df000504 	addi	fp,sp,20
 10058e4:	e13ffe15 	stw	r4,-8(fp)
 10058e8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 10058ec:	e0bffe17 	ldw	r2,-8(fp)
 10058f0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10058f4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 10058f8:	e0bffb17 	ldw	r2,-20(fp)
 10058fc:	10801303 	ldbu	r2,76(r2)
 1005900:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005904:	e0bffb17 	ldw	r2,-20(fp)
 1005908:	00c00084 	movi	r3,2
 100590c:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1005910:	e0bffb17 	ldw	r2,-20(fp)
 1005914:	10801217 	ldw	r2,72(r2)
 1005918:	10c00044 	addi	r3,r2,1
 100591c:	e0bffb17 	ldw	r2,-20(fp)
 1005920:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005924:	e0bffd03 	ldbu	r2,-12(fp)
 1005928:	10800058 	cmpnei	r2,r2,1
 100592c:	10002b1e 	bne	r2,zero,10059dc <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005930:	d0a72117 	ldw	r2,-25468(gp)
 1005934:	1000171e 	bne	r2,zero,1005994 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005938:	e0bffb17 	ldw	r2,-20(fp)
 100593c:	10800104 	addi	r2,r2,4
 1005940:	1009883a 	mov	r4,r2
 1005944:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005948:	e0bffb17 	ldw	r2,-20(fp)
 100594c:	10800b17 	ldw	r2,44(r2)
 1005950:	d0e71917 	ldw	r3,-25500(gp)
 1005954:	1880032e 	bgeu	r3,r2,1005964 <vTaskNotifyGiveFromISR+0x90>
 1005958:	e0bffb17 	ldw	r2,-20(fp)
 100595c:	10800b17 	ldw	r2,44(r2)
 1005960:	d0a71915 	stw	r2,-25500(gp)
 1005964:	e0bffb17 	ldw	r2,-20(fp)
 1005968:	10800b17 	ldw	r2,44(r2)
 100596c:	10c00524 	muli	r3,r2,20
 1005970:	008060b4 	movhi	r2,386
 1005974:	10ba6804 	addi	r2,r2,-5728
 1005978:	1887883a 	add	r3,r3,r2
 100597c:	e0bffb17 	ldw	r2,-20(fp)
 1005980:	10800104 	addi	r2,r2,4
 1005984:	100b883a 	mov	r5,r2
 1005988:	1809883a 	mov	r4,r3
 100598c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005990:	00000606 	br	10059ac <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005994:	e0bffb17 	ldw	r2,-20(fp)
 1005998:	10800604 	addi	r2,r2,24
 100599c:	100b883a 	mov	r5,r2
 10059a0:	010060b4 	movhi	r4,386
 10059a4:	213a8b04 	addi	r4,r4,-5588
 10059a8:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10059ac:	e0bffb17 	ldw	r2,-20(fp)
 10059b0:	10800b17 	ldw	r2,44(r2)
 10059b4:	d0e71317 	ldw	r3,-25524(gp)
 10059b8:	18c00b17 	ldw	r3,44(r3)
 10059bc:	1880072e 	bgeu	r3,r2,10059dc <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10059c0:	e0bfff17 	ldw	r2,-4(fp)
 10059c4:	10000326 	beq	r2,zero,10059d4 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10059c8:	e0bfff17 	ldw	r2,-4(fp)
 10059cc:	00c00044 	movi	r3,1
 10059d0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10059d4:	00800044 	movi	r2,1
 10059d8:	d0a71c15 	stw	r2,-25488(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 10059dc:	0001883a 	nop
 10059e0:	e037883a 	mov	sp,fp
 10059e4:	dfc00117 	ldw	ra,4(sp)
 10059e8:	df000017 	ldw	fp,0(sp)
 10059ec:	dec00204 	addi	sp,sp,8
 10059f0:	f800283a 	ret

010059f4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 10059f4:	defffb04 	addi	sp,sp,-20
 10059f8:	dfc00415 	stw	ra,16(sp)
 10059fc:	df000315 	stw	fp,12(sp)
 1005a00:	df000304 	addi	fp,sp,12
 1005a04:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 1005a08:	e0bfff17 	ldw	r2,-4(fp)
 1005a0c:	1000021e 	bne	r2,zero,1005a18 <xTaskNotifyStateClear+0x24>
 1005a10:	d0a71317 	ldw	r2,-25524(gp)
 1005a14:	00000106 	br	1005a1c <xTaskNotifyStateClear+0x28>
 1005a18:	e0bfff17 	ldw	r2,-4(fp)
 1005a1c:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1005a20:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1005a24:	e0bffe17 	ldw	r2,-8(fp)
 1005a28:	10801303 	ldbu	r2,76(r2)
 1005a2c:	10803fcc 	andi	r2,r2,255
 1005a30:	10800098 	cmpnei	r2,r2,2
 1005a34:	1000051e 	bne	r2,zero,1005a4c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005a38:	e0bffe17 	ldw	r2,-8(fp)
 1005a3c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 1005a40:	00800044 	movi	r2,1
 1005a44:	e0bffd15 	stw	r2,-12(fp)
 1005a48:	00000106 	br	1005a50 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 1005a4c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 1005a50:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 1005a54:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005a58:	e037883a 	mov	sp,fp
 1005a5c:	dfc00117 	ldw	ra,4(sp)
 1005a60:	df000017 	ldw	fp,0(sp)
 1005a64:	dec00204 	addi	sp,sp,8
 1005a68:	f800283a 	ret

01005a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 1005a6c:	defffa04 	addi	sp,sp,-24
 1005a70:	dfc00515 	stw	ra,20(sp)
 1005a74:	df000415 	stw	fp,16(sp)
 1005a78:	df000404 	addi	fp,sp,16
 1005a7c:	e13ffe15 	stw	r4,-8(fp)
 1005a80:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1005a84:	d0a71817 	ldw	r2,-25504(gp)
 1005a88:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005a8c:	d0a71317 	ldw	r2,-25524(gp)
 1005a90:	10800104 	addi	r2,r2,4
 1005a94:	1009883a 	mov	r4,r2
 1005a98:	1000ce40 	call	1000ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1005a9c:	e0bffe17 	ldw	r2,-8(fp)
 1005aa0:	10bfffd8 	cmpnei	r2,r2,-1
 1005aa4:	1000091e 	bne	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
 1005aa8:	e0bfff17 	ldw	r2,-4(fp)
 1005aac:	10000726 	beq	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005ab0:	d0a71317 	ldw	r2,-25524(gp)
 1005ab4:	10800104 	addi	r2,r2,4
 1005ab8:	100b883a 	mov	r5,r2
 1005abc:	010060b4 	movhi	r4,386
 1005ac0:	213a9504 	addi	r4,r4,-5548
 1005ac4:	1000b800 	call	1000b80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005ac8:	00001c06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 1005acc:	e0fffc17 	ldw	r3,-16(fp)
 1005ad0:	e0bffe17 	ldw	r2,-8(fp)
 1005ad4:	1885883a 	add	r2,r3,r2
 1005ad8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 1005adc:	d0a71317 	ldw	r2,-25524(gp)
 1005ae0:	e0fffd17 	ldw	r3,-12(fp)
 1005ae4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 1005ae8:	e0fffd17 	ldw	r3,-12(fp)
 1005aec:	e0bffc17 	ldw	r2,-16(fp)
 1005af0:	1880072e 	bgeu	r3,r2,1005b10 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005af4:	d0e71517 	ldw	r3,-25516(gp)
 1005af8:	d0a71317 	ldw	r2,-25524(gp)
 1005afc:	10800104 	addi	r2,r2,4
 1005b00:	100b883a 	mov	r5,r2
 1005b04:	1809883a 	mov	r4,r3
 1005b08:	1000c0c0 	call	1000c0c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b0c:	00000b06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005b10:	d0e71417 	ldw	r3,-25520(gp)
 1005b14:	d0a71317 	ldw	r2,-25524(gp)
 1005b18:	10800104 	addi	r2,r2,4
 1005b1c:	100b883a 	mov	r5,r2
 1005b20:	1809883a 	mov	r4,r3
 1005b24:	1000c0c0 	call	1000c0c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 1005b28:	d0a71f17 	ldw	r2,-25476(gp)
 1005b2c:	e0fffd17 	ldw	r3,-12(fp)
 1005b30:	1880022e 	bgeu	r3,r2,1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 1005b34:	e0bffd17 	ldw	r2,-12(fp)
 1005b38:	d0a71f15 	stw	r2,-25476(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b3c:	0001883a 	nop
 1005b40:	e037883a 	mov	sp,fp
 1005b44:	dfc00117 	ldw	ra,4(sp)
 1005b48:	df000017 	ldw	fp,0(sp)
 1005b4c:	dec00204 	addi	sp,sp,8
 1005b50:	f800283a 	ret

01005b54 <main>:
 */

#include <stdio.h>

int main()
{
 1005b54:	defffe04 	addi	sp,sp,-8
 1005b58:	dfc00115 	stw	ra,4(sp)
 1005b5c:	df000015 	stw	fp,0(sp)
 1005b60:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 1005b64:	010040b4 	movhi	r4,258
 1005b68:	21291704 	addi	r4,r4,-23460
 1005b6c:	10090900 	call	1009090 <puts>

  return 0;
 1005b70:	0005883a 	mov	r2,zero
}
 1005b74:	e037883a 	mov	sp,fp
 1005b78:	dfc00117 	ldw	ra,4(sp)
 1005b7c:	df000017 	ldw	fp,0(sp)
 1005b80:	dec00204 	addi	sp,sp,8
 1005b84:	f800283a 	ret

01005b88 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1005b88:	defffd04 	addi	sp,sp,-12
 1005b8c:	df000215 	stw	fp,8(sp)
 1005b90:	df000204 	addi	fp,sp,8
 1005b94:	e13ffe15 	stw	r4,-8(fp)
 1005b98:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1005b9c:	e0bffe17 	ldw	r2,-8(fp)
 1005ba0:	10c00117 	ldw	r3,4(r2)
 1005ba4:	e0bfff17 	ldw	r2,-4(fp)
 1005ba8:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1005bac:	e0bfff17 	ldw	r2,-4(fp)
 1005bb0:	e0fffe17 	ldw	r3,-8(fp)
 1005bb4:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1005bb8:	e0bfff17 	ldw	r2,-4(fp)
 1005bbc:	10800017 	ldw	r2,0(r2)
 1005bc0:	e0ffff17 	ldw	r3,-4(fp)
 1005bc4:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1005bc8:	e0bfff17 	ldw	r2,-4(fp)
 1005bcc:	10800117 	ldw	r2,4(r2)
 1005bd0:	e0ffff17 	ldw	r3,-4(fp)
 1005bd4:	10c00015 	stw	r3,0(r2)
}
 1005bd8:	0001883a 	nop
 1005bdc:	e037883a 	mov	sp,fp
 1005be0:	df000017 	ldw	fp,0(sp)
 1005be4:	dec00104 	addi	sp,sp,4
 1005be8:	f800283a 	ret

01005bec <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1005bec:	defffc04 	addi	sp,sp,-16
 1005bf0:	dfc00315 	stw	ra,12(sp)
 1005bf4:	df000215 	stw	fp,8(sp)
 1005bf8:	df000204 	addi	fp,sp,8
 1005bfc:	e13ffe15 	stw	r4,-8(fp)
 1005c00:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1005c04:	e17fff17 	ldw	r5,-4(fp)
 1005c08:	e13ffe17 	ldw	r4,-8(fp)
 1005c0c:	1005b880 	call	1005b88 <metal_list_add_before>
}
 1005c10:	0001883a 	nop
 1005c14:	e037883a 	mov	sp,fp
 1005c18:	dfc00117 	ldw	ra,4(sp)
 1005c1c:	df000017 	ldw	fp,0(sp)
 1005c20:	dec00204 	addi	sp,sp,8
 1005c24:	f800283a 	ret

01005c28 <metal_add_test_case>:
	return errstr;
}
#endif

void metal_add_test_case(struct metal_test_case *test_case)
{
 1005c28:	defffd04 	addi	sp,sp,-12
 1005c2c:	dfc00215 	stw	ra,8(sp)
 1005c30:	df000115 	stw	fp,4(sp)
 1005c34:	df000104 	addi	fp,sp,4
 1005c38:	e13fff15 	stw	r4,-4(fp)
	metal_list_add_tail(&test_cases, &test_case->node);
 1005c3c:	e0bfff17 	ldw	r2,-4(fp)
 1005c40:	100b883a 	mov	r5,r2
 1005c44:	d1200204 	addi	r4,gp,-32760
 1005c48:	1005bec0 	call	1005bec <metal_list_add_tail>
}
 1005c4c:	0001883a 	nop
 1005c50:	e037883a 	mov	sp,fp
 1005c54:	dfc00117 	ldw	ra,4(sp)
 1005c58:	df000017 	ldw	fp,0(sp)
 1005c5c:	dec00204 	addi	sp,sp,8
 1005c60:	f800283a 	ret

01005c64 <metal_tests_run>:

int metal_tests_run(struct metal_init_params *params)
{
 1005c64:	deffee04 	addi	sp,sp,-72
 1005c68:	dfc01115 	stw	ra,68(sp)
 1005c6c:	df001015 	stw	fp,64(sp)
 1005c70:	dcc00f15 	stw	r19,60(sp)
 1005c74:	dc800e15 	stw	r18,56(sp)
 1005c78:	dc400d15 	stw	r17,52(sp)
 1005c7c:	dc000c15 	stw	r16,48(sp)
 1005c80:	df001004 	addi	fp,sp,64
 1005c84:	e13ffb15 	stw	r4,-20(fp)
	struct metal_init_params dparams = METAL_INIT_DEFAULTS;
 1005c88:	00804074 	movhi	r2,257
 1005c8c:	10a16504 	addi	r2,r2,-31340
 1005c90:	e0bff915 	stw	r2,-28(fp)
 1005c94:	00800184 	movi	r2,6
 1005c98:	e0bffa15 	stw	r2,-24(fp)
	struct metal_test_case *test_case;
	struct metal_list *node;
	int error, errors = 0;
 1005c9c:	e03ff415 	stw	zero,-48(fp)
	const char *dots = "..................................";
 1005ca0:	008040b4 	movhi	r2,258
 1005ca4:	10a91c04 	addi	r2,r2,-23440
 1005ca8:	e0bff515 	stw	r2,-44(fp)
	const char *pad;

	if (!params)
 1005cac:	e0bffb17 	ldw	r2,-20(fp)
 1005cb0:	1000021e 	bne	r2,zero,1005cbc <metal_tests_run+0x58>
		params = &dparams;
 1005cb4:	e0bff904 	addi	r2,fp,-28
 1005cb8:	e0bffb15 	stw	r2,-20(fp)

	params->log_level = METAL_LOG_DEBUG;
 1005cbc:	e0bffb17 	ldw	r2,-20(fp)
 1005cc0:	00c001c4 	movi	r3,7
 1005cc4:	10c00115 	stw	r3,4(r2)
	error = metal_init(params);
 1005cc8:	e13ffb17 	ldw	r4,-20(fp)
 1005ccc:	10079240 	call	1007924 <metal_init>
 1005cd0:	e0bff615 	stw	r2,-40(fp)
	if (error)
 1005cd4:	e0bff617 	ldw	r2,-40(fp)
 1005cd8:	10000226 	beq	r2,zero,1005ce4 <metal_tests_run+0x80>
		return error;
 1005cdc:	e0bff617 	ldw	r2,-40(fp)
 1005ce0:	00005f06 	br	1005e60 <metal_tests_run+0x1fc>

	metal_list_for_each(&test_cases, node) {
 1005ce4:	d0a00217 	ldw	r2,-32760(gp)
 1005ce8:	e0bff315 	stw	r2,-52(fp)
 1005cec:	00005706 	br	1005e4c <metal_tests_run+0x1e8>
		test_case = metal_container_of(node, struct metal_test_case,
 1005cf0:	e0bff317 	ldw	r2,-52(fp)
 1005cf4:	e0bff715 	stw	r2,-36(fp)
					       node);
		pad = dots + strlen(test_case->name);
 1005cf8:	e0bff717 	ldw	r2,-36(fp)
 1005cfc:	10800217 	ldw	r2,8(r2)
 1005d00:	1009883a 	mov	r4,r2
 1005d04:	10099b40 	call	10099b4 <strlen>
 1005d08:	1007883a 	mov	r3,r2
 1005d0c:	e0bff517 	ldw	r2,-44(fp)
 1005d10:	10c5883a 	add	r2,r2,r3
 1005d14:	e0bff815 	stw	r2,-32(fp)
		metal_log(METAL_LOG_INFO,"running [%s]\n", test_case->name);
 1005d18:	008060b4 	movhi	r2,386
 1005d1c:	10bb4404 	addi	r2,r2,-4848
 1005d20:	10800017 	ldw	r2,0(r2)
 1005d24:	108001b0 	cmpltui	r2,r2,6
 1005d28:	10000e1e 	bne	r2,zero,1005d64 <metal_tests_run+0x100>
 1005d2c:	008060b4 	movhi	r2,386
 1005d30:	10bb4404 	addi	r2,r2,-4848
 1005d34:	10800117 	ldw	r2,4(r2)
 1005d38:	10000a26 	beq	r2,zero,1005d64 <metal_tests_run+0x100>
 1005d3c:	008060b4 	movhi	r2,386
 1005d40:	10bb4404 	addi	r2,r2,-4848
 1005d44:	10800117 	ldw	r2,4(r2)
 1005d48:	e0fff717 	ldw	r3,-36(fp)
 1005d4c:	18c00217 	ldw	r3,8(r3)
 1005d50:	180d883a 	mov	r6,r3
 1005d54:	014040b4 	movhi	r5,258
 1005d58:	29692504 	addi	r5,r5,-23404
 1005d5c:	01000184 	movi	r4,6
 1005d60:	103ee83a 	callr	r2
		error = test_case->test();
 1005d64:	e0bff717 	ldw	r2,-36(fp)
 1005d68:	10800317 	ldw	r2,12(r2)
 1005d6c:	103ee83a 	callr	r2
 1005d70:	e0bff615 	stw	r2,-40(fp)
		metal_log(METAL_LOG_INFO,"result [%s]%s %s%s%s\n",
 1005d74:	008060b4 	movhi	r2,386
 1005d78:	10bb4404 	addi	r2,r2,-4848
 1005d7c:	10800017 	ldw	r2,0(r2)
 1005d80:	108001b0 	cmpltui	r2,r2,6
 1005d84:	1000291e 	bne	r2,zero,1005e2c <metal_tests_run+0x1c8>
 1005d88:	008060b4 	movhi	r2,386
 1005d8c:	10bb4404 	addi	r2,r2,-4848
 1005d90:	10800117 	ldw	r2,4(r2)
 1005d94:	10002526 	beq	r2,zero,1005e2c <metal_tests_run+0x1c8>
 1005d98:	008060b4 	movhi	r2,386
 1005d9c:	10bb4404 	addi	r2,r2,-4848
 1005da0:	14800117 	ldw	r18,4(r2)
 1005da4:	e0bff717 	ldw	r2,-36(fp)
 1005da8:	14c00217 	ldw	r19,8(r2)
 1005dac:	e0bff617 	ldw	r2,-40(fp)
 1005db0:	10000326 	beq	r2,zero,1005dc0 <metal_tests_run+0x15c>
 1005db4:	040040b4 	movhi	r16,258
 1005db8:	84292904 	addi	r16,r16,-23388
 1005dbc:	00000206 	br	1005dc8 <metal_tests_run+0x164>
 1005dc0:	040040b4 	movhi	r16,258
 1005dc4:	84292b04 	addi	r16,r16,-23380
 1005dc8:	e0bff617 	ldw	r2,-40(fp)
 1005dcc:	10000326 	beq	r2,zero,1005ddc <metal_tests_run+0x178>
 1005dd0:	044040b4 	movhi	r17,258
 1005dd4:	8c692d04 	addi	r17,r17,-23372
 1005dd8:	00000206 	br	1005de4 <metal_tests_run+0x180>
 1005ddc:	044040b4 	movhi	r17,258
 1005de0:	8c693004 	addi	r17,r17,-23360
 1005de4:	e0bff617 	ldw	r2,-40(fp)
 1005de8:	10000526 	beq	r2,zero,1005e00 <metal_tests_run+0x19c>
 1005dec:	e0bff617 	ldw	r2,-40(fp)
 1005df0:	0085c83a 	sub	r2,zero,r2
 1005df4:	1009883a 	mov	r4,r2
 1005df8:	10099980 	call	1009998 <strerror>
 1005dfc:	00000206 	br	1005e08 <metal_tests_run+0x1a4>
 1005e00:	008040b4 	movhi	r2,258
 1005e04:	10a93004 	addi	r2,r2,-23360
 1005e08:	d8800215 	stw	r2,8(sp)
 1005e0c:	dc400115 	stw	r17,4(sp)
 1005e10:	dc000015 	stw	r16,0(sp)
 1005e14:	e1fff817 	ldw	r7,-32(fp)
 1005e18:	980d883a 	mov	r6,r19
 1005e1c:	014040b4 	movhi	r5,258
 1005e20:	29693104 	addi	r5,r5,-23356
 1005e24:	01000184 	movi	r4,6
 1005e28:	903ee83a 	callr	r18
		       test_case->name, pad,
		       error ? "fail" : "pass",
		       error ? " - error: " : "",
		       error ? strerror(-error) : "");
		if (error)
 1005e2c:	e0bff617 	ldw	r2,-40(fp)
 1005e30:	10000326 	beq	r2,zero,1005e40 <metal_tests_run+0x1dc>
			errors++;
 1005e34:	e0bff417 	ldw	r2,-48(fp)
 1005e38:	10800044 	addi	r2,r2,1
 1005e3c:	e0bff415 	stw	r2,-48(fp)
	params->log_level = METAL_LOG_DEBUG;
	error = metal_init(params);
	if (error)
		return error;

	metal_list_for_each(&test_cases, node) {
 1005e40:	e0bff317 	ldw	r2,-52(fp)
 1005e44:	10800017 	ldw	r2,0(r2)
 1005e48:	e0bff315 	stw	r2,-52(fp)
 1005e4c:	e0fff317 	ldw	r3,-52(fp)
 1005e50:	d0a00204 	addi	r2,gp,-32760
 1005e54:	18bfa61e 	bne	r3,r2,1005cf0 <__alt_data_end+0xff005cf0>
		       error ? strerror(-error) : "");
		if (error)
			errors++;
	}

	metal_finish();
 1005e58:	10079d00 	call	10079d0 <metal_finish>

	return errors;
 1005e5c:	e0bff417 	ldw	r2,-48(fp)
}
 1005e60:	e6fffc04 	addi	sp,fp,-16
 1005e64:	dfc00517 	ldw	ra,20(sp)
 1005e68:	df000417 	ldw	fp,16(sp)
 1005e6c:	dcc00317 	ldw	r19,12(sp)
 1005e70:	dc800217 	ldw	r18,8(sp)
 1005e74:	dc400117 	ldw	r17,4(sp)
 1005e78:	dc000017 	ldw	r16,0(sp)
 1005e7c:	dec00604 	addi	sp,sp,24
 1005e80:	f800283a 	ret

01005e84 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 1005e84:	defffe04 	addi	sp,sp,-8
 1005e88:	df000115 	stw	fp,4(sp)
 1005e8c:	df000104 	addi	fp,sp,4
 1005e90:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 1005e94:	e0bfff17 	ldw	r2,-4(fp)
 1005e98:	e0ffff17 	ldw	r3,-4(fp)
 1005e9c:	10c00115 	stw	r3,4(r2)
 1005ea0:	e0bfff17 	ldw	r2,-4(fp)
 1005ea4:	10c00117 	ldw	r3,4(r2)
 1005ea8:	e0bfff17 	ldw	r2,-4(fp)
 1005eac:	10c00015 	stw	r3,0(r2)
}
 1005eb0:	0001883a 	nop
 1005eb4:	e037883a 	mov	sp,fp
 1005eb8:	df000017 	ldw	fp,0(sp)
 1005ebc:	dec00104 	addi	sp,sp,4
 1005ec0:	f800283a 	ret

01005ec4 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1005ec4:	defffd04 	addi	sp,sp,-12
 1005ec8:	df000215 	stw	fp,8(sp)
 1005ecc:	df000204 	addi	fp,sp,8
 1005ed0:	e13ffe15 	stw	r4,-8(fp)
 1005ed4:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1005ed8:	e0bffe17 	ldw	r2,-8(fp)
 1005edc:	10c00117 	ldw	r3,4(r2)
 1005ee0:	e0bfff17 	ldw	r2,-4(fp)
 1005ee4:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1005ee8:	e0bfff17 	ldw	r2,-4(fp)
 1005eec:	e0fffe17 	ldw	r3,-8(fp)
 1005ef0:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1005ef4:	e0bfff17 	ldw	r2,-4(fp)
 1005ef8:	10800017 	ldw	r2,0(r2)
 1005efc:	e0ffff17 	ldw	r3,-4(fp)
 1005f00:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1005f04:	e0bfff17 	ldw	r2,-4(fp)
 1005f08:	10800117 	ldw	r2,4(r2)
 1005f0c:	e0ffff17 	ldw	r3,-4(fp)
 1005f10:	10c00015 	stw	r3,0(r2)
}
 1005f14:	0001883a 	nop
 1005f18:	e037883a 	mov	sp,fp
 1005f1c:	df000017 	ldw	fp,0(sp)
 1005f20:	dec00104 	addi	sp,sp,4
 1005f24:	f800283a 	ret

01005f28 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1005f28:	defffc04 	addi	sp,sp,-16
 1005f2c:	dfc00315 	stw	ra,12(sp)
 1005f30:	df000215 	stw	fp,8(sp)
 1005f34:	df000204 	addi	fp,sp,8
 1005f38:	e13ffe15 	stw	r4,-8(fp)
 1005f3c:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1005f40:	e17fff17 	ldw	r5,-4(fp)
 1005f44:	e13ffe17 	ldw	r4,-8(fp)
 1005f48:	1005ec40 	call	1005ec4 <metal_list_add_before>
}
 1005f4c:	0001883a 	nop
 1005f50:	e037883a 	mov	sp,fp
 1005f54:	dfc00117 	ldw	ra,4(sp)
 1005f58:	df000017 	ldw	fp,0(sp)
 1005f5c:	dec00204 	addi	sp,sp,8
 1005f60:	f800283a 	ret

01005f64 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 1005f64:	defffe04 	addi	sp,sp,-8
 1005f68:	df000115 	stw	fp,4(sp)
 1005f6c:	df000104 	addi	fp,sp,4
 1005f70:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 1005f74:	e0bfff17 	ldw	r2,-4(fp)
 1005f78:	10800017 	ldw	r2,0(r2)
 1005f7c:	e0ffff17 	ldw	r3,-4(fp)
 1005f80:	18c00117 	ldw	r3,4(r3)
 1005f84:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 1005f88:	e0bfff17 	ldw	r2,-4(fp)
 1005f8c:	10800117 	ldw	r2,4(r2)
 1005f90:	e0ffff17 	ldw	r3,-4(fp)
 1005f94:	18c00017 	ldw	r3,0(r3)
 1005f98:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 1005f9c:	e0bfff17 	ldw	r2,-4(fp)
 1005fa0:	e0ffff17 	ldw	r3,-4(fp)
 1005fa4:	10c00115 	stw	r3,4(r2)
 1005fa8:	e0bfff17 	ldw	r2,-4(fp)
 1005fac:	10c00117 	ldw	r3,4(r2)
 1005fb0:	e0bfff17 	ldw	r2,-4(fp)
 1005fb4:	10c00015 	stw	r3,0(r2)
}
 1005fb8:	0001883a 	nop
 1005fbc:	e037883a 	mov	sp,fp
 1005fc0:	df000017 	ldw	fp,0(sp)
 1005fc4:	dec00104 	addi	sp,sp,4
 1005fc8:	f800283a 	ret

01005fcc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 1005fcc:	defffc04 	addi	sp,sp,-16
 1005fd0:	dfc00315 	stw	ra,12(sp)
 1005fd4:	df000215 	stw	fp,8(sp)
 1005fd8:	df000204 	addi	fp,sp,8
 1005fdc:	e13ffe15 	stw	r4,-8(fp)
 1005fe0:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_flush(addr, len);
 1005fe4:	e17fff17 	ldw	r5,-4(fp)
 1005fe8:	e13ffe17 	ldw	r4,-8(fp)
 1005fec:	10072240 	call	1007224 <metal_machine_cache_flush>
}
 1005ff0:	0001883a 	nop
 1005ff4:	e037883a 	mov	sp,fp
 1005ff8:	dfc00117 	ldw	ra,4(sp)
 1005ffc:	df000017 	ldw	fp,0(sp)
 1006000:	dec00204 	addi	sp,sp,8
 1006004:	f800283a 	ret

01006008 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 1006008:	defffc04 	addi	sp,sp,-16
 100600c:	dfc00315 	stw	ra,12(sp)
 1006010:	df000215 	stw	fp,8(sp)
 1006014:	df000204 	addi	fp,sp,8
 1006018:	e13ffe15 	stw	r4,-8(fp)
 100601c:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_invalidate(addr, len);
 1006020:	e17fff17 	ldw	r5,-4(fp)
 1006024:	e13ffe17 	ldw	r4,-8(fp)
 1006028:	100724c0 	call	100724c <metal_machine_cache_invalidate>
}
 100602c:	0001883a 	nop
 1006030:	e037883a 	mov	sp,fp
 1006034:	dfc00117 	ldw	ra,4(sp)
 1006038:	df000017 	ldw	fp,0(sp)
 100603c:	dec00204 	addi	sp,sp,8
 1006040:	f800283a 	ret

01006044 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 1006044:	defffc04 	addi	sp,sp,-16
 1006048:	dfc00315 	stw	ra,12(sp)
 100604c:	df000215 	stw	fp,8(sp)
 1006050:	df000204 	addi	fp,sp,8
 1006054:	e13ffe15 	stw	r4,-8(fp)
 1006058:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_flush(addr, len);
 100605c:	e17fff17 	ldw	r5,-4(fp)
 1006060:	e13ffe17 	ldw	r4,-8(fp)
 1006064:	1005fcc0 	call	1005fcc <__metal_cache_flush>
}
 1006068:	0001883a 	nop
 100606c:	e037883a 	mov	sp,fp
 1006070:	dfc00117 	ldw	ra,4(sp)
 1006074:	df000017 	ldw	fp,0(sp)
 1006078:	dec00204 	addi	sp,sp,8
 100607c:	f800283a 	ret

01006080 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 1006080:	defffc04 	addi	sp,sp,-16
 1006084:	dfc00315 	stw	ra,12(sp)
 1006088:	df000215 	stw	fp,8(sp)
 100608c:	df000204 	addi	fp,sp,8
 1006090:	e13ffe15 	stw	r4,-8(fp)
 1006094:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_invalidate(addr, len);
 1006098:	e17fff17 	ldw	r5,-4(fp)
 100609c:	e13ffe17 	ldw	r4,-8(fp)
 10060a0:	10060080 	call	1006008 <__metal_cache_invalidate>
}
 10060a4:	0001883a 	nop
 10060a8:	e037883a 	mov	sp,fp
 10060ac:	dfc00117 	ldw	ra,4(sp)
 10060b0:	df000017 	ldw	fp,0(sp)
 10060b4:	dec00204 	addi	sp,sp,8
 10060b8:	f800283a 	ret

010060bc <metal_bus_register>:
#include <utilities.h>
#include <dma.h>
#include <cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 10060bc:	defffd04 	addi	sp,sp,-12
 10060c0:	dfc00215 	stw	ra,8(sp)
 10060c4:	df000115 	stw	fp,4(sp)
 10060c8:	df000104 	addi	fp,sp,4
 10060cc:	e13fff15 	stw	r4,-4(fp)
	if (!bus || !bus->name || !strlen(bus->name))
 10060d0:	e0bfff17 	ldw	r2,-4(fp)
 10060d4:	10000a26 	beq	r2,zero,1006100 <metal_bus_register+0x44>
 10060d8:	e0bfff17 	ldw	r2,-4(fp)
 10060dc:	10800017 	ldw	r2,0(r2)
 10060e0:	10000726 	beq	r2,zero,1006100 <metal_bus_register+0x44>
 10060e4:	e0bfff17 	ldw	r2,-4(fp)
 10060e8:	10800017 	ldw	r2,0(r2)
 10060ec:	10800003 	ldbu	r2,0(r2)
 10060f0:	10803fcc 	andi	r2,r2,255
 10060f4:	1080201c 	xori	r2,r2,128
 10060f8:	10bfe004 	addi	r2,r2,-128
 10060fc:	1000021e 	bne	r2,zero,1006108 <metal_bus_register+0x4c>
		return -EINVAL;
 1006100:	00bffa84 	movi	r2,-22
 1006104:	00002606 	br	10061a0 <metal_bus_register+0xe4>
	if (metal_bus_find(bus->name, NULL) == 0)
 1006108:	e0bfff17 	ldw	r2,-4(fp)
 100610c:	10800017 	ldw	r2,0(r2)
 1006110:	000b883a 	mov	r5,zero
 1006114:	1009883a 	mov	r4,r2
 1006118:	10062580 	call	1006258 <metal_bus_find>
 100611c:	1000021e 	bne	r2,zero,1006128 <metal_bus_register+0x6c>
		return -EEXIST;
 1006120:	00bffbc4 	movi	r2,-17
 1006124:	00001e06 	br	10061a0 <metal_bus_register+0xe4>
	metal_list_init(&bus->devices);
 1006128:	e0bfff17 	ldw	r2,-4(fp)
 100612c:	10800704 	addi	r2,r2,28
 1006130:	1009883a 	mov	r4,r2
 1006134:	1005e840 	call	1005e84 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 1006138:	e0bfff17 	ldw	r2,-4(fp)
 100613c:	10800904 	addi	r2,r2,36
 1006140:	100b883a 	mov	r5,r2
 1006144:	010060b4 	movhi	r4,386
 1006148:	213b4604 	addi	r4,r4,-4840
 100614c:	1005f280 	call	1005f28 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 1006150:	008060b4 	movhi	r2,386
 1006154:	10bb4404 	addi	r2,r2,-4848
 1006158:	10800017 	ldw	r2,0(r2)
 100615c:	108001f0 	cmpltui	r2,r2,7
 1006160:	10000e1e 	bne	r2,zero,100619c <metal_bus_register+0xe0>
 1006164:	008060b4 	movhi	r2,386
 1006168:	10bb4404 	addi	r2,r2,-4848
 100616c:	10800117 	ldw	r2,4(r2)
 1006170:	10000a26 	beq	r2,zero,100619c <metal_bus_register+0xe0>
 1006174:	008060b4 	movhi	r2,386
 1006178:	10bb4404 	addi	r2,r2,-4848
 100617c:	10800117 	ldw	r2,4(r2)
 1006180:	e0ffff17 	ldw	r3,-4(fp)
 1006184:	18c00017 	ldw	r3,0(r3)
 1006188:	180d883a 	mov	r6,r3
 100618c:	014040b4 	movhi	r5,258
 1006190:	29693704 	addi	r5,r5,-23332
 1006194:	010001c4 	movi	r4,7
 1006198:	103ee83a 	callr	r2
	return 0;
 100619c:	0005883a 	mov	r2,zero
}
 10061a0:	e037883a 	mov	sp,fp
 10061a4:	dfc00117 	ldw	ra,4(sp)
 10061a8:	df000017 	ldw	fp,0(sp)
 10061ac:	dec00204 	addi	sp,sp,8
 10061b0:	f800283a 	ret

010061b4 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 10061b4:	defffd04 	addi	sp,sp,-12
 10061b8:	dfc00215 	stw	ra,8(sp)
 10061bc:	df000115 	stw	fp,4(sp)
 10061c0:	df000104 	addi	fp,sp,4
 10061c4:	e13fff15 	stw	r4,-4(fp)
	metal_list_del(&bus->node);
 10061c8:	e0bfff17 	ldw	r2,-4(fp)
 10061cc:	10800904 	addi	r2,r2,36
 10061d0:	1009883a 	mov	r4,r2
 10061d4:	1005f640 	call	1005f64 <metal_list_del>
	if (bus->ops.bus_close)
 10061d8:	e0bfff17 	ldw	r2,-4(fp)
 10061dc:	10800117 	ldw	r2,4(r2)
 10061e0:	10000426 	beq	r2,zero,10061f4 <metal_bus_unregister+0x40>
		bus->ops.bus_close(bus);
 10061e4:	e0bfff17 	ldw	r2,-4(fp)
 10061e8:	10800117 	ldw	r2,4(r2)
 10061ec:	e13fff17 	ldw	r4,-4(fp)
 10061f0:	103ee83a 	callr	r2
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 10061f4:	008060b4 	movhi	r2,386
 10061f8:	10bb4404 	addi	r2,r2,-4848
 10061fc:	10800017 	ldw	r2,0(r2)
 1006200:	108001f0 	cmpltui	r2,r2,7
 1006204:	10000e1e 	bne	r2,zero,1006240 <metal_bus_unregister+0x8c>
 1006208:	008060b4 	movhi	r2,386
 100620c:	10bb4404 	addi	r2,r2,-4848
 1006210:	10800117 	ldw	r2,4(r2)
 1006214:	10000a26 	beq	r2,zero,1006240 <metal_bus_unregister+0x8c>
 1006218:	008060b4 	movhi	r2,386
 100621c:	10bb4404 	addi	r2,r2,-4848
 1006220:	10800117 	ldw	r2,4(r2)
 1006224:	e0ffff17 	ldw	r3,-4(fp)
 1006228:	18c00017 	ldw	r3,0(r3)
 100622c:	180d883a 	mov	r6,r3
 1006230:	014040b4 	movhi	r5,258
 1006234:	29693c04 	addi	r5,r5,-23312
 1006238:	010001c4 	movi	r4,7
 100623c:	103ee83a 	callr	r2
	return 0;
 1006240:	0005883a 	mov	r2,zero
}
 1006244:	e037883a 	mov	sp,fp
 1006248:	dfc00117 	ldw	ra,4(sp)
 100624c:	df000017 	ldw	fp,0(sp)
 1006250:	dec00204 	addi	sp,sp,8
 1006254:	f800283a 	ret

01006258 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 1006258:	defffa04 	addi	sp,sp,-24
 100625c:	dfc00515 	stw	ra,20(sp)
 1006260:	df000415 	stw	fp,16(sp)
 1006264:	df000404 	addi	fp,sp,16
 1006268:	e13ffe15 	stw	r4,-8(fp)
 100626c:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 1006270:	008060b4 	movhi	r2,386
 1006274:	10bb4404 	addi	r2,r2,-4848
 1006278:	10800217 	ldw	r2,8(r2)
 100627c:	e0bffc15 	stw	r2,-16(fp)
 1006280:	00001406 	br	10062d4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
 1006284:	e0bffc17 	ldw	r2,-16(fp)
 1006288:	10bff704 	addi	r2,r2,-36
 100628c:	e0bffd15 	stw	r2,-12(fp)
		if (strcmp(bus->name, name) != 0)
 1006290:	e0bffd17 	ldw	r2,-12(fp)
 1006294:	10800017 	ldw	r2,0(r2)
 1006298:	e17ffe17 	ldw	r5,-8(fp)
 100629c:	1009883a 	mov	r4,r2
 10062a0:	10092600 	call	1009260 <strcmp>
 10062a4:	10000426 	beq	r2,zero,10062b8 <metal_bus_find+0x60>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10062a8:	e0bffc17 	ldw	r2,-16(fp)
 10062ac:	10800017 	ldw	r2,0(r2)
 10062b0:	e0bffc15 	stw	r2,-16(fp)
 10062b4:	00000706 	br	10062d4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
		if (strcmp(bus->name, name) != 0)
			continue;
		if (result)
 10062b8:	e0bfff17 	ldw	r2,-4(fp)
 10062bc:	10000326 	beq	r2,zero,10062cc <metal_bus_find+0x74>
			*result = bus;
 10062c0:	e0bfff17 	ldw	r2,-4(fp)
 10062c4:	e0fffd17 	ldw	r3,-12(fp)
 10062c8:	10c00015 	stw	r3,0(r2)
		return 0;
 10062cc:	0005883a 	mov	r2,zero
 10062d0:	00000506 	br	10062e8 <metal_bus_find+0x90>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10062d4:	e0fffc17 	ldw	r3,-16(fp)
 10062d8:	008060b4 	movhi	r2,386
 10062dc:	10bb4604 	addi	r2,r2,-4840
 10062e0:	18bfe81e 	bne	r3,r2,1006284 <__alt_data_end+0xff006284>
			continue;
		if (result)
			*result = bus;
		return 0;
	}
	return -ENOENT;
 10062e4:	00bfff84 	movi	r2,-2
}
 10062e8:	e037883a 	mov	sp,fp
 10062ec:	dfc00117 	ldw	ra,4(sp)
 10062f0:	df000017 	ldw	fp,0(sp)
 10062f4:	dec00204 	addi	sp,sp,8
 10062f8:	f800283a 	ret

010062fc <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 10062fc:	defff904 	addi	sp,sp,-28
 1006300:	dfc00615 	stw	ra,24(sp)
 1006304:	df000515 	stw	fp,20(sp)
 1006308:	df000504 	addi	fp,sp,20
 100630c:	e13ffd15 	stw	r4,-12(fp)
 1006310:	e17ffe15 	stw	r5,-8(fp)
 1006314:	e1bfff15 	stw	r6,-4(fp)
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 1006318:	e0bffd17 	ldw	r2,-12(fp)
 100631c:	10001026 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006320:	e0bffd17 	ldw	r2,-12(fp)
 1006324:	10800003 	ldbu	r2,0(r2)
 1006328:	10803fcc 	andi	r2,r2,255
 100632c:	1080201c 	xori	r2,r2,128
 1006330:	10bfe004 	addi	r2,r2,-128
 1006334:	10000a26 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006338:	e0bffe17 	ldw	r2,-8(fp)
 100633c:	10000826 	beq	r2,zero,1006360 <metal_device_open+0x64>
	    !dev_name || !strlen(dev_name) ||
 1006340:	e0bffe17 	ldw	r2,-8(fp)
 1006344:	10800003 	ldbu	r2,0(r2)
 1006348:	10803fcc 	andi	r2,r2,255
 100634c:	1080201c 	xori	r2,r2,128
 1006350:	10bfe004 	addi	r2,r2,-128
 1006354:	10000226 	beq	r2,zero,1006360 <metal_device_open+0x64>
 1006358:	e0bfff17 	ldw	r2,-4(fp)
 100635c:	1000021e 	bne	r2,zero,1006368 <metal_device_open+0x6c>
	    !device)
		return -EINVAL;
 1006360:	00bffa84 	movi	r2,-22
 1006364:	00001b06 	br	10063d4 <metal_device_open+0xd8>

	error = metal_bus_find(bus_name, &bus);
 1006368:	e0bffc04 	addi	r2,fp,-16
 100636c:	100b883a 	mov	r5,r2
 1006370:	e13ffd17 	ldw	r4,-12(fp)
 1006374:	10062580 	call	1006258 <metal_bus_find>
 1006378:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 100637c:	e0bffb17 	ldw	r2,-20(fp)
 1006380:	10000226 	beq	r2,zero,100638c <metal_device_open+0x90>
		return error;
 1006384:	e0bffb17 	ldw	r2,-20(fp)
 1006388:	00001206 	br	10063d4 <metal_device_open+0xd8>

	if (!bus->ops.dev_open)
 100638c:	e0bffc17 	ldw	r2,-16(fp)
 1006390:	10800217 	ldw	r2,8(r2)
 1006394:	1000021e 	bne	r2,zero,10063a0 <metal_device_open+0xa4>
		return -ENODEV;
 1006398:	00bffb44 	movi	r2,-19
 100639c:	00000d06 	br	10063d4 <metal_device_open+0xd8>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 10063a0:	e0bffc17 	ldw	r2,-16(fp)
 10063a4:	10800217 	ldw	r2,8(r2)
 10063a8:	e0fffc17 	ldw	r3,-16(fp)
 10063ac:	e1bfff17 	ldw	r6,-4(fp)
 10063b0:	e17ffe17 	ldw	r5,-8(fp)
 10063b4:	1809883a 	mov	r4,r3
 10063b8:	103ee83a 	callr	r2
 10063bc:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 10063c0:	e0bffb17 	ldw	r2,-20(fp)
 10063c4:	10000226 	beq	r2,zero,10063d0 <metal_device_open+0xd4>
		return error;
 10063c8:	e0bffb17 	ldw	r2,-20(fp)
 10063cc:	00000106 	br	10063d4 <metal_device_open+0xd8>

	return 0;
 10063d0:	0005883a 	mov	r2,zero
}
 10063d4:	e037883a 	mov	sp,fp
 10063d8:	dfc00117 	ldw	ra,4(sp)
 10063dc:	df000017 	ldw	fp,0(sp)
 10063e0:	dec00204 	addi	sp,sp,8
 10063e4:	f800283a 	ret

010063e8 <metal_device_close>:

void metal_device_close(struct metal_device *device)
{
 10063e8:	defffd04 	addi	sp,sp,-12
 10063ec:	dfc00215 	stw	ra,8(sp)
 10063f0:	df000115 	stw	fp,4(sp)
 10063f4:	df000104 	addi	fp,sp,4
 10063f8:	e13fff15 	stw	r4,-4(fp)
	metal_assert(device && device->bus);
 10063fc:	e0bfff17 	ldw	r2,-4(fp)
 1006400:	10000326 	beq	r2,zero,1006410 <metal_device_close+0x28>
 1006404:	e0bfff17 	ldw	r2,-4(fp)
 1006408:	10800117 	ldw	r2,4(r2)
 100640c:	1000081e 	bne	r2,zero,1006430 <metal_device_close+0x48>
 1006410:	01c040b4 	movhi	r7,258
 1006414:	39e94204 	addi	r7,r7,-23288
 1006418:	018040b4 	movhi	r6,258
 100641c:	31a94e04 	addi	r6,r6,-23240
 1006420:	014014c4 	movi	r5,83
 1006424:	010040b4 	movhi	r4,258
 1006428:	21294804 	addi	r4,r4,-23264
 100642c:	1008c880 	call	1008c88 <__assert_func>
	if (device->bus->ops.dev_close)
 1006430:	e0bfff17 	ldw	r2,-4(fp)
 1006434:	10800117 	ldw	r2,4(r2)
 1006438:	10800317 	ldw	r2,12(r2)
 100643c:	10000826 	beq	r2,zero,1006460 <metal_device_close+0x78>
		device->bus->ops.dev_close(device->bus, device);
 1006440:	e0bfff17 	ldw	r2,-4(fp)
 1006444:	10800117 	ldw	r2,4(r2)
 1006448:	10800317 	ldw	r2,12(r2)
 100644c:	e0ffff17 	ldw	r3,-4(fp)
 1006450:	18c00117 	ldw	r3,4(r3)
 1006454:	e17fff17 	ldw	r5,-4(fp)
 1006458:	1809883a 	mov	r4,r3
 100645c:	103ee83a 	callr	r2
}
 1006460:	0001883a 	nop
 1006464:	e037883a 	mov	sp,fp
 1006468:	dfc00117 	ldw	ra,4(sp)
 100646c:	df000017 	ldw	fp,0(sp)
 1006470:	dec00204 	addi	sp,sp,8
 1006474:	f800283a 	ret

01006478 <metal_register_generic_device>:

int metal_register_generic_device(struct metal_device *device)
{
 1006478:	defffd04 	addi	sp,sp,-12
 100647c:	dfc00215 	stw	ra,8(sp)
 1006480:	df000115 	stw	fp,4(sp)
 1006484:	df000104 	addi	fp,sp,4
 1006488:	e13fff15 	stw	r4,-4(fp)
	if (!device->name || !strlen(device->name) ||
 100648c:	e0bfff17 	ldw	r2,-4(fp)
 1006490:	10800017 	ldw	r2,0(r2)
 1006494:	10000b26 	beq	r2,zero,10064c4 <metal_register_generic_device+0x4c>
 1006498:	e0bfff17 	ldw	r2,-4(fp)
 100649c:	10800017 	ldw	r2,0(r2)
 10064a0:	10800003 	ldbu	r2,0(r2)
 10064a4:	10803fcc 	andi	r2,r2,255
 10064a8:	1080201c 	xori	r2,r2,128
 10064ac:	10bfe004 	addi	r2,r2,-128
 10064b0:	10000426 	beq	r2,zero,10064c4 <metal_register_generic_device+0x4c>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 10064b4:	e0bfff17 	ldw	r2,-4(fp)
 10064b8:	10800217 	ldw	r2,8(r2)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
	if (!device->name || !strlen(device->name) ||
 10064bc:	108000b0 	cmpltui	r2,r2,2
 10064c0:	1000021e 	bne	r2,zero,10064cc <metal_register_generic_device+0x54>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
		return -EINVAL;
 10064c4:	00bffa84 	movi	r2,-22
 10064c8:	00000b06 	br	10064f8 <metal_register_generic_device+0x80>

	device->bus = &metal_generic_bus;
 10064cc:	e0ffff17 	ldw	r3,-4(fp)
 10064d0:	008040b4 	movhi	r2,258
 10064d4:	10ac6104 	addi	r2,r2,-20092
 10064d8:	18800115 	stw	r2,4(r3)
	metal_list_add_tail(&_metal.common.generic_device_list,
 10064dc:	e0bfff17 	ldw	r2,-4(fp)
 10064e0:	10801104 	addi	r2,r2,68
 10064e4:	100b883a 	mov	r5,r2
 10064e8:	010060b4 	movhi	r4,386
 10064ec:	213b4a04 	addi	r4,r4,-4824
 10064f0:	1005f280 	call	1005f28 <metal_list_add_tail>
			    &device->node);
	return 0;
 10064f4:	0005883a 	mov	r2,zero
}
 10064f8:	e037883a 	mov	sp,fp
 10064fc:	dfc00117 	ldw	ra,4(sp)
 1006500:	df000017 	ldw	fp,0(sp)
 1006504:	dec00204 	addi	sp,sp,8
 1006508:	f800283a 	ret

0100650c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 100650c:	defff904 	addi	sp,sp,-28
 1006510:	dfc00615 	stw	ra,24(sp)
 1006514:	df000515 	stw	fp,20(sp)
 1006518:	df000504 	addi	fp,sp,20
 100651c:	e13ffd15 	stw	r4,-12(fp)
 1006520:	e17ffe15 	stw	r5,-8(fp)
 1006524:	e1bfff15 	stw	r6,-4(fp)
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006528:	008060b4 	movhi	r2,386
 100652c:	10bb4404 	addi	r2,r2,-4848
 1006530:	10800617 	ldw	r2,24(r2)
 1006534:	e0bffb15 	stw	r2,-20(fp)
 1006538:	00001306 	br	1006588 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
 100653c:	e0bffb17 	ldw	r2,-20(fp)
 1006540:	10bfef04 	addi	r2,r2,-68
 1006544:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(dev->name, dev_name) != 0)
 1006548:	e0bffc17 	ldw	r2,-16(fp)
 100654c:	10800017 	ldw	r2,0(r2)
 1006550:	e17ffe17 	ldw	r5,-8(fp)
 1006554:	1009883a 	mov	r4,r2
 1006558:	10092600 	call	1009260 <strcmp>
 100655c:	10000426 	beq	r2,zero,1006570 <metal_generic_dev_open+0x64>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006560:	e0bffb17 	ldw	r2,-20(fp)
 1006564:	10800017 	ldw	r2,0(r2)
 1006568:	e0bffb15 	stw	r2,-20(fp)
 100656c:	00000606 	br	1006588 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
		if (strcmp(dev->name, dev_name) != 0)
			continue;
		*device = dev;
 1006570:	e0bfff17 	ldw	r2,-4(fp)
 1006574:	e0fffc17 	ldw	r3,-16(fp)
 1006578:	10c00015 	stw	r3,0(r2)
		return metal_generic_dev_sys_open(dev);
 100657c:	e13ffc17 	ldw	r4,-16(fp)
 1006580:	1006ba40 	call	1006ba4 <metal_generic_dev_sys_open>
 1006584:	00000506 	br	100659c <metal_generic_dev_open+0x90>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006588:	e0fffb17 	ldw	r3,-20(fp)
 100658c:	008060b4 	movhi	r2,386
 1006590:	10bb4a04 	addi	r2,r2,-4824
 1006594:	18bfe91e 	bne	r3,r2,100653c <__alt_data_end+0xff00653c>
			continue;
		*device = dev;
		return metal_generic_dev_sys_open(dev);
	}

	return -ENODEV;
 1006598:	00bffb44 	movi	r2,-19
}
 100659c:	e037883a 	mov	sp,fp
 10065a0:	dfc00117 	ldw	ra,4(sp)
 10065a4:	df000017 	ldw	fp,0(sp)
 10065a8:	dec00204 	addi	sp,sp,8
 10065ac:	f800283a 	ret

010065b0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 10065b0:	defff904 	addi	sp,sp,-28
 10065b4:	dfc00615 	stw	ra,24(sp)
 10065b8:	df000515 	stw	fp,20(sp)
 10065bc:	df000504 	addi	fp,sp,20
 10065c0:	e13ffc15 	stw	r4,-16(fp)
 10065c4:	e17ffd15 	stw	r5,-12(fp)
 10065c8:	e1bffe15 	stw	r6,-8(fp)
 10065cc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
 10065d0:	e0c00317 	ldw	r3,12(fp)
 10065d4:	e0bfff17 	ldw	r2,-4(fp)
 10065d8:	18800626 	beq	r3,r2,10065f4 <metal_generic_dev_dma_map+0x44>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 10065dc:	e0800217 	ldw	r2,8(fp)
 10065e0:	10800324 	muli	r2,r2,12
 10065e4:	100d883a 	mov	r6,r2
 10065e8:	e17fff17 	ldw	r5,-4(fp)
 10065ec:	e1000317 	ldw	r4,12(fp)
 10065f0:	1008d600 	call	1008d60 <memcpy>
	for (i = 0; i < nents_in; i++) {
 10065f4:	e03ffb15 	stw	zero,-20(fp)
 10065f8:	00001e06 	br	1006674 <metal_generic_dev_dma_map+0xc4>
		if (dir == METAL_DMA_DEV_W) {
 10065fc:	e0bffe17 	ldw	r2,-8(fp)
 1006600:	10800098 	cmpnei	r2,r2,2
 1006604:	10000c1e 	bne	r2,zero,1006638 <metal_generic_dev_dma_map+0x88>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 1006608:	e0bffb17 	ldw	r2,-20(fp)
 100660c:	10800324 	muli	r2,r2,12
 1006610:	e0c00317 	ldw	r3,12(fp)
 1006614:	1885883a 	add	r2,r3,r2
 1006618:	11000017 	ldw	r4,0(r2)
 100661c:	e0bffb17 	ldw	r2,-20(fp)
 1006620:	10800324 	muli	r2,r2,12
 1006624:	e0c00317 	ldw	r3,12(fp)
 1006628:	1885883a 	add	r2,r3,r2
 100662c:	10800217 	ldw	r2,8(r2)
 1006630:	100b883a 	mov	r5,r2
 1006634:	10060440 	call	1006044 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 1006638:	e0bffb17 	ldw	r2,-20(fp)
 100663c:	10800324 	muli	r2,r2,12
 1006640:	e0c00317 	ldw	r3,12(fp)
 1006644:	1885883a 	add	r2,r3,r2
 1006648:	11000017 	ldw	r4,0(r2)
 100664c:	e0bffb17 	ldw	r2,-20(fp)
 1006650:	10800324 	muli	r2,r2,12
 1006654:	e0c00317 	ldw	r3,12(fp)
 1006658:	1885883a 	add	r2,r3,r2
 100665c:	10800217 	ldw	r2,8(r2)
 1006660:	100b883a 	mov	r5,r2
 1006664:	10060800 	call	1006080 <metal_cache_invalidate>
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
	for (i = 0; i < nents_in; i++) {
 1006668:	e0bffb17 	ldw	r2,-20(fp)
 100666c:	10800044 	addi	r2,r2,1
 1006670:	e0bffb15 	stw	r2,-20(fp)
 1006674:	e0fffb17 	ldw	r3,-20(fp)
 1006678:	e0800217 	ldw	r2,8(fp)
 100667c:	18bfdf16 	blt	r3,r2,10065fc <__alt_data_end+0xff0065fc>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
	}

	return nents_in;
 1006680:	e0800217 	ldw	r2,8(fp)
}
 1006684:	e037883a 	mov	sp,fp
 1006688:	dfc00117 	ldw	ra,4(sp)
 100668c:	df000017 	ldw	fp,0(sp)
 1006690:	dec00204 	addi	sp,sp,8
 1006694:	f800283a 	ret

01006698 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 1006698:	defff904 	addi	sp,sp,-28
 100669c:	dfc00615 	stw	ra,24(sp)
 10066a0:	df000515 	stw	fp,20(sp)
 10066a4:	df000504 	addi	fp,sp,20
 10066a8:	e13ffc15 	stw	r4,-16(fp)
 10066ac:	e17ffd15 	stw	r5,-12(fp)
 10066b0:	e1bffe15 	stw	r6,-8(fp)
 10066b4:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 10066b8:	e03ffb15 	stw	zero,-20(fp)
 10066bc:	00000f06 	br	10066fc <metal_generic_dev_dma_unmap+0x64>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 10066c0:	e0bffb17 	ldw	r2,-20(fp)
 10066c4:	10800324 	muli	r2,r2,12
 10066c8:	e0ffff17 	ldw	r3,-4(fp)
 10066cc:	1885883a 	add	r2,r3,r2
 10066d0:	11000017 	ldw	r4,0(r2)
 10066d4:	e0bffb17 	ldw	r2,-20(fp)
 10066d8:	10800324 	muli	r2,r2,12
 10066dc:	e0ffff17 	ldw	r3,-4(fp)
 10066e0:	1885883a 	add	r2,r3,r2
 10066e4:	10800217 	ldw	r2,8(r2)
 10066e8:	100b883a 	mov	r5,r2
 10066ec:	10060800 	call	1006080 <metal_cache_invalidate>
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 10066f0:	e0bffb17 	ldw	r2,-20(fp)
 10066f4:	10800044 	addi	r2,r2,1
 10066f8:	e0bffb15 	stw	r2,-20(fp)
 10066fc:	e0fffb17 	ldw	r3,-20(fp)
 1006700:	e0800217 	ldw	r2,8(fp)
 1006704:	18bfee16 	blt	r3,r2,10066c0 <__alt_data_end+0xff0066c0>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
	}
}
 1006708:	0001883a 	nop
 100670c:	e037883a 	mov	sp,fp
 1006710:	dfc00117 	ldw	ra,4(sp)
 1006714:	df000017 	ldw	fp,0(sp)
 1006718:	dec00204 	addi	sp,sp,8
 100671c:	f800283a 	ret

01006720 <metal_dma_map>:
int metal_dma_map(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg_in,
		  int nents_in,
		  struct metal_sg *sg_out)
{
 1006720:	defff704 	addi	sp,sp,-36
 1006724:	dfc00815 	stw	ra,32(sp)
 1006728:	df000715 	stw	fp,28(sp)
 100672c:	df000704 	addi	fp,sp,28
 1006730:	e13ffc15 	stw	r4,-16(fp)
 1006734:	e17ffd15 	stw	r5,-12(fp)
 1006738:	e1bffe15 	stw	r6,-8(fp)
 100673c:	e1ffff15 	stw	r7,-4(fp)
	int nents_out;

	if (!dev || !sg_in || !sg_out)
 1006740:	e0bffc17 	ldw	r2,-16(fp)
 1006744:	10000426 	beq	r2,zero,1006758 <metal_dma_map+0x38>
 1006748:	e0bffe17 	ldw	r2,-8(fp)
 100674c:	10000226 	beq	r2,zero,1006758 <metal_dma_map+0x38>
 1006750:	e0800217 	ldw	r2,8(fp)
 1006754:	1000021e 	bne	r2,zero,1006760 <metal_dma_map+0x40>
		return -EINVAL;
 1006758:	00bffa84 	movi	r2,-22
 100675c:	00001b06 	br	10067cc <metal_dma_map+0xac>
	if (!dev->bus->ops.dev_dma_map)
 1006760:	e0bffc17 	ldw	r2,-16(fp)
 1006764:	10800117 	ldw	r2,4(r2)
 1006768:	10800517 	ldw	r2,20(r2)
 100676c:	1000021e 	bne	r2,zero,1006778 <metal_dma_map+0x58>
		return -ENODEV;
 1006770:	00bffb44 	movi	r2,-19
 1006774:	00001506 	br	10067cc <metal_dma_map+0xac>

	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006778:	e0bffd17 	ldw	r2,-12(fp)
 100677c:	10800058 	cmpnei	r2,r2,1
 1006780:	1000021e 	bne	r2,zero,100678c <metal_dma_map+0x6c>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 1006784:	0001b03a 	sync
 1006788:	00000106 	br	1006790 <metal_dma_map+0x70>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 100678c:	0001b03a 	sync
	nents_out = dev->bus->ops.dev_dma_map(dev->bus,
 1006790:	e0bffc17 	ldw	r2,-16(fp)
 1006794:	10800117 	ldw	r2,4(r2)
 1006798:	10800517 	ldw	r2,20(r2)
 100679c:	e0fffc17 	ldw	r3,-16(fp)
 10067a0:	19000117 	ldw	r4,4(r3)
 10067a4:	e0c00217 	ldw	r3,8(fp)
 10067a8:	d8c00115 	stw	r3,4(sp)
 10067ac:	e0ffff17 	ldw	r3,-4(fp)
 10067b0:	d8c00015 	stw	r3,0(sp)
 10067b4:	e1fffe17 	ldw	r7,-8(fp)
 10067b8:	e1bffd17 	ldw	r6,-12(fp)
 10067bc:	e17ffc17 	ldw	r5,-16(fp)
 10067c0:	103ee83a 	callr	r2
 10067c4:	e0bffb15 	stw	r2,-20(fp)
			dev, dir, sg_in, nents_in, sg_out);
	return nents_out;
 10067c8:	e0bffb17 	ldw	r2,-20(fp)
}
 10067cc:	e037883a 	mov	sp,fp
 10067d0:	dfc00117 	ldw	ra,4(sp)
 10067d4:	df000017 	ldw	fp,0(sp)
 10067d8:	dec00204 	addi	sp,sp,8
 10067dc:	f800283a 	ret

010067e0 <metal_dma_unmap>:

void metal_dma_unmap(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg,
		  int nents)
{
 10067e0:	defff904 	addi	sp,sp,-28
 10067e4:	dfc00615 	stw	ra,24(sp)
 10067e8:	df000515 	stw	fp,20(sp)
 10067ec:	df000504 	addi	fp,sp,20
 10067f0:	e13ffc15 	stw	r4,-16(fp)
 10067f4:	e17ffd15 	stw	r5,-12(fp)
 10067f8:	e1bffe15 	stw	r6,-8(fp)
 10067fc:	e1ffff15 	stw	r7,-4(fp)
	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006800:	e0bffd17 	ldw	r2,-12(fp)
 1006804:	10800058 	cmpnei	r2,r2,1
 1006808:	1000021e 	bne	r2,zero,1006814 <metal_dma_unmap+0x34>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 100680c:	0001b03a 	sync
 1006810:	00000106 	br	1006818 <metal_dma_unmap+0x38>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 1006814:	0001b03a 	sync

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
 1006818:	e0bffc17 	ldw	r2,-16(fp)
 100681c:	10001226 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
 1006820:	e0bffc17 	ldw	r2,-16(fp)
 1006824:	10800117 	ldw	r2,4(r2)
 1006828:	10800617 	ldw	r2,24(r2)
 100682c:	10000e26 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
 1006830:	e0bffe17 	ldw	r2,-8(fp)
 1006834:	10000c26 	beq	r2,zero,1006868 <metal_dma_unmap+0x88>
		return;
	dev->bus->ops.dev_dma_unmap(dev->bus,
 1006838:	e0bffc17 	ldw	r2,-16(fp)
 100683c:	10800117 	ldw	r2,4(r2)
 1006840:	10800617 	ldw	r2,24(r2)
 1006844:	e0fffc17 	ldw	r3,-16(fp)
 1006848:	19000117 	ldw	r4,4(r3)
 100684c:	e0ffff17 	ldw	r3,-4(fp)
 1006850:	d8c00015 	stw	r3,0(sp)
 1006854:	e1fffe17 	ldw	r7,-8(fp)
 1006858:	e1bffd17 	ldw	r6,-12(fp)
 100685c:	e17ffc17 	ldw	r5,-16(fp)
 1006860:	103ee83a 	callr	r2
 1006864:	00000106 	br	100686c <metal_dma_unmap+0x8c>
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
		return;
 1006868:	0001883a 	nop
	dev->bus->ops.dev_dma_unmap(dev->bus,
			dev, dir, sg, nents);
}
 100686c:	e037883a 	mov	sp,fp
 1006870:	dfc00117 	ldw	ra,4(sp)
 1006874:	df000017 	ldw	fp,0(sp)
 1006878:	dec00204 	addi	sp,sp,8
 100687c:	f800283a 	ret

01006880 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1006880:	defffd04 	addi	sp,sp,-12
 1006884:	dfc00215 	stw	ra,8(sp)
 1006888:	df000115 	stw	fp,4(sp)
 100688c:	df000104 	addi	fp,sp,4
 1006890:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 1006894:	e13fff17 	ldw	r4,-4(fp)
 1006898:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100689c:	e037883a 	mov	sp,fp
 10068a0:	dfc00117 	ldw	ra,4(sp)
 10068a4:	df000017 	ldw	fp,0(sp)
 10068a8:	dec00204 	addi	sp,sp,8
 10068ac:	f800283a 	ret

010068b0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 10068b0:	defffd04 	addi	sp,sp,-12
 10068b4:	dfc00215 	stw	ra,8(sp)
 10068b8:	df000115 	stw	fp,4(sp)
 10068bc:	df000104 	addi	fp,sp,4
 10068c0:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 10068c4:	e13fff17 	ldw	r4,-4(fp)
 10068c8:	10011840 	call	1001184 <vPortFree>
}
 10068cc:	0001883a 	nop
 10068d0:	e037883a 	mov	sp,fp
 10068d4:	dfc00117 	ldw	ra,4(sp)
 10068d8:	df000017 	ldw	fp,0(sp)
 10068dc:	dec00204 	addi	sp,sp,8
 10068e0:	f800283a 	ret

010068e4 <alloc_thread>:
#include <sys.h>

static const int test_count = 10;

static void *alloc_thread(void *arg)
{
 10068e4:	defffa04 	addi	sp,sp,-24
 10068e8:	dfc00515 	stw	ra,20(sp)
 10068ec:	df000415 	stw	fp,16(sp)
 10068f0:	df000404 	addi	fp,sp,16
 10068f4:	e13fff15 	stw	r4,-4(fp)
	int i;
	void *ptr;
	void *rv = 0;
 10068f8:	e03ffd15 	stw	zero,-12(fp)

	(void)arg;

	for (i = 0; i < test_count; i++) {
 10068fc:	e03ffc15 	stw	zero,-16(fp)
 1006900:	00001d06 	br	1006978 <alloc_thread+0x94>
		/* expecting the implementation to be thread safe */
		ptr = metal_allocate_memory(256 /*10*i*/);
 1006904:	01004004 	movi	r4,256
 1006908:	10068800 	call	1006880 <metal_allocate_memory>
 100690c:	e0bffe15 	stw	r2,-8(fp)
		if (!ptr) {
 1006910:	e0bffe17 	ldw	r2,-8(fp)
 1006914:	1000131e 	bne	r2,zero,1006964 <alloc_thread+0x80>
			metal_log(METAL_LOG_DEBUG, "failed to allocate memmory\n");
 1006918:	008060b4 	movhi	r2,386
 100691c:	10bb4404 	addi	r2,r2,-4848
 1006920:	10800017 	ldw	r2,0(r2)
 1006924:	108001f0 	cmpltui	r2,r2,7
 1006928:	10000b1e 	bne	r2,zero,1006958 <alloc_thread+0x74>
 100692c:	008060b4 	movhi	r2,386
 1006930:	10bb4404 	addi	r2,r2,-4848
 1006934:	10800117 	ldw	r2,4(r2)
 1006938:	10000726 	beq	r2,zero,1006958 <alloc_thread+0x74>
 100693c:	008060b4 	movhi	r2,386
 1006940:	10bb4404 	addi	r2,r2,-4848
 1006944:	10800117 	ldw	r2,4(r2)
 1006948:	014040b4 	movhi	r5,258
 100694c:	29695304 	addi	r5,r5,-23220
 1006950:	010001c4 	movi	r4,7
 1006954:	103ee83a 	callr	r2
		        rv = (void *)-ENOMEM;
 1006958:	00bffd04 	movi	r2,-12
 100695c:	e0bffd15 	stw	r2,-12(fp)
			break;
 1006960:	00000806 	br	1006984 <alloc_thread+0xa0>
		}

		metal_free_memory(ptr);
 1006964:	e13ffe17 	ldw	r4,-8(fp)
 1006968:	10068b00 	call	10068b0 <metal_free_memory>
	void *ptr;
	void *rv = 0;

	(void)arg;

	for (i = 0; i < test_count; i++) {
 100696c:	e0bffc17 	ldw	r2,-16(fp)
 1006970:	10800044 	addi	r2,r2,1
 1006974:	e0bffc15 	stw	r2,-16(fp)
 1006978:	00800284 	movi	r2,10
 100697c:	e0fffc17 	ldw	r3,-16(fp)
 1006980:	18bfe016 	blt	r3,r2,1006904 <__alt_data_end+0xff006904>
		}

		metal_free_memory(ptr);
	}

	return rv;
 1006984:	e0bffd17 	ldw	r2,-12(fp)
}
 1006988:	e037883a 	mov	sp,fp
 100698c:	dfc00117 	ldw	ra,4(sp)
 1006990:	df000017 	ldw	fp,0(sp)
 1006994:	dec00204 	addi	sp,sp,8
 1006998:	f800283a 	ret

0100699c <alloc>:

static int alloc(void)
{
 100699c:	defffc04 	addi	sp,sp,-16
 10069a0:	dfc00315 	stw	ra,12(sp)
 10069a4:	df000215 	stw	fp,8(sp)
 10069a8:	df000204 	addi	fp,sp,8
	const int threads = 10;
 10069ac:	00800284 	movi	r2,10
 10069b0:	e0bffe15 	stw	r2,-8(fp)
	int rc;

	rc =  metal_run(threads, alloc_thread, NULL);
 10069b4:	000d883a 	mov	r6,zero
 10069b8:	01404034 	movhi	r5,256
 10069bc:	295a3904 	addi	r5,r5,26852
 10069c0:	e13ffe17 	ldw	r4,-8(fp)
 10069c4:	10074a00 	call	10074a0 <metal_run>
 10069c8:	e0bfff15 	stw	r2,-4(fp)

	return rc;
 10069cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10069d0:	e037883a 	mov	sp,fp
 10069d4:	dfc00117 	ldw	ra,4(sp)
 10069d8:	df000017 	ldw	fp,0(sp)
 10069dc:	dec00204 	addi	sp,sp,8
 10069e0:	f800283a 	ret

010069e4 <metal_test_alloc>:
METAL_ADD_TEST(alloc);
 10069e4:	defffe04 	addi	sp,sp,-8
 10069e8:	dfc00115 	stw	ra,4(sp)
 10069ec:	df000015 	stw	fp,0(sp)
 10069f0:	d839883a 	mov	fp,sp
 10069f4:	010040b4 	movhi	r4,258
 10069f8:	212c6c04 	addi	r4,r4,-20048
 10069fc:	1005c280 	call	1005c28 <metal_add_test_case>
 1006a00:	0001883a 	nop
 1006a04:	e037883a 	mov	sp,fp
 1006a08:	dfc00117 	ldw	ra,4(sp)
 1006a0c:	df000017 	ldw	fp,0(sp)
 1006a10:	dec00204 	addi	sp,sp,8
 1006a14:	f800283a 	ret

01006a18 <atomic_thread>:
#include <sys.h>

static const int atomic_test_count = 1000;

static void *atomic_thread(void *arg)
{
 1006a18:	defffc04 	addi	sp,sp,-16
 1006a1c:	df000315 	stw	fp,12(sp)
 1006a20:	df000304 	addi	fp,sp,12
 1006a24:	e13fff15 	stw	r4,-4(fp)
	atomic_int *c = arg;
 1006a28:	e0bfff17 	ldw	r2,-4(fp)
 1006a2c:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < atomic_test_count; i++)
 1006a30:	e03ffd15 	stw	zero,-12(fp)
 1006a34:	00000806 	br	1006a58 <atomic_thread+0x40>
		atomic_fetch_add(c, 1);
 1006a38:	e0bffe17 	ldw	r2,-8(fp)
 1006a3c:	10800017 	ldw	r2,0(r2)
 1006a40:	10c00044 	addi	r3,r2,1
 1006a44:	e0bffe17 	ldw	r2,-8(fp)
 1006a48:	10c00015 	stw	r3,0(r2)
static void *atomic_thread(void *arg)
{
	atomic_int *c = arg;
	int i;

	for (i = 0; i < atomic_test_count; i++)
 1006a4c:	e0bffd17 	ldw	r2,-12(fp)
 1006a50:	10800044 	addi	r2,r2,1
 1006a54:	e0bffd15 	stw	r2,-12(fp)
 1006a58:	0080fa04 	movi	r2,1000
 1006a5c:	e0fffd17 	ldw	r3,-12(fp)
 1006a60:	18bff516 	blt	r3,r2,1006a38 <__alt_data_end+0xff006a38>
		atomic_fetch_add(c, 1);

	return NULL;
 1006a64:	0005883a 	mov	r2,zero
}
 1006a68:	e037883a 	mov	sp,fp
 1006a6c:	df000017 	ldw	fp,0(sp)
 1006a70:	dec00104 	addi	sp,sp,4
 1006a74:	f800283a 	ret

01006a78 <atomic>:

static int atomic(void)
{
 1006a78:	defffa04 	addi	sp,sp,-24
 1006a7c:	dfc00515 	stw	ra,20(sp)
 1006a80:	df000415 	stw	fp,16(sp)
 1006a84:	df000404 	addi	fp,sp,16
	const int threads = 10;
 1006a88:	00800284 	movi	r2,10
 1006a8c:	e0bffd15 	stw	r2,-12(fp)
	atomic_int counter = ATOMIC_VAR_INIT(0);
 1006a90:	e03fff15 	stw	zero,-4(fp)
	int value, error;

	error = metal_run(threads, atomic_thread, &counter);
 1006a94:	e0bfff04 	addi	r2,fp,-4
 1006a98:	100d883a 	mov	r6,r2
 1006a9c:	01404034 	movhi	r5,256
 1006aa0:	295a8604 	addi	r5,r5,27160
 1006aa4:	e13ffd17 	ldw	r4,-12(fp)
 1006aa8:	10074a00 	call	10074a0 <metal_run>
 1006aac:	e0bffc15 	stw	r2,-16(fp)
	if (!error) {
 1006ab0:	e0bffc17 	ldw	r2,-16(fp)
 1006ab4:	10001e1e 	bne	r2,zero,1006b30 <atomic+0xb8>
		value = atomic_load(&counter);
 1006ab8:	0001b03a 	sync
 1006abc:	e0bfff17 	ldw	r2,-4(fp)
 1006ac0:	e0bffe15 	stw	r2,-8(fp)
		value -= atomic_test_count * threads;
 1006ac4:	00c0fa04 	movi	r3,1000
 1006ac8:	e0bffd17 	ldw	r2,-12(fp)
 1006acc:	1885383a 	mul	r2,r3,r2
 1006ad0:	e0fffe17 	ldw	r3,-8(fp)
 1006ad4:	1885c83a 	sub	r2,r3,r2
 1006ad8:	e0bffe15 	stw	r2,-8(fp)
		if (value) {
 1006adc:	e0bffe17 	ldw	r2,-8(fp)
 1006ae0:	10001326 	beq	r2,zero,1006b30 <atomic+0xb8>
			metal_log(METAL_LOG_DEBUG, "counter mismatch, delta = %d\n",
 1006ae4:	008060b4 	movhi	r2,386
 1006ae8:	10bb4404 	addi	r2,r2,-4848
 1006aec:	10800017 	ldw	r2,0(r2)
 1006af0:	108001f0 	cmpltui	r2,r2,7
 1006af4:	10000c1e 	bne	r2,zero,1006b28 <atomic+0xb0>
 1006af8:	008060b4 	movhi	r2,386
 1006afc:	10bb4404 	addi	r2,r2,-4848
 1006b00:	10800117 	ldw	r2,4(r2)
 1006b04:	10000826 	beq	r2,zero,1006b28 <atomic+0xb0>
 1006b08:	008060b4 	movhi	r2,386
 1006b0c:	10bb4404 	addi	r2,r2,-4848
 1006b10:	10800117 	ldw	r2,4(r2)
 1006b14:	e1bffe17 	ldw	r6,-8(fp)
 1006b18:	014040b4 	movhi	r5,258
 1006b1c:	29695c04 	addi	r5,r5,-23184
 1006b20:	010001c4 	movi	r4,7
 1006b24:	103ee83a 	callr	r2
				  value);
			error = -EINVAL;
 1006b28:	00bffa84 	movi	r2,-22
 1006b2c:	e0bffc15 	stw	r2,-16(fp)
		}
	}

	return error;
 1006b30:	e0bffc17 	ldw	r2,-16(fp)
}
 1006b34:	e037883a 	mov	sp,fp
 1006b38:	dfc00117 	ldw	ra,4(sp)
 1006b3c:	df000017 	ldw	fp,0(sp)
 1006b40:	dec00204 	addi	sp,sp,8
 1006b44:	f800283a 	ret

01006b48 <metal_test_atomic>:
METAL_ADD_TEST(atomic);
 1006b48:	defffe04 	addi	sp,sp,-8
 1006b4c:	dfc00115 	stw	ra,4(sp)
 1006b50:	df000015 	stw	fp,0(sp)
 1006b54:	d839883a 	mov	fp,sp
 1006b58:	010040b4 	movhi	r4,258
 1006b5c:	212c7004 	addi	r4,r4,-20032
 1006b60:	1005c280 	call	1005c28 <metal_add_test_case>
 1006b64:	0001883a 	nop
 1006b68:	e037883a 	mov	sp,fp
 1006b6c:	dfc00117 	ldw	ra,4(sp)
 1006b70:	df000017 	ldw	fp,0(sp)
 1006b74:	dec00204 	addi	sp,sp,8
 1006b78:	f800283a 	ret

01006b7c <metal_condition_wait>:

#include <condition.h>

int metal_condition_wait(struct metal_condition *cv,
			 metal_mutex_t *m)
{
 1006b7c:	defffd04 	addi	sp,sp,-12
 1006b80:	df000215 	stw	fp,8(sp)
 1006b84:	df000204 	addi	fp,sp,8
 1006b88:	e13ffe15 	stw	r4,-8(fp)
 1006b8c:	e17fff15 	stw	r5,-4(fp)
	/* TODO: Implement condition variable for FreeRTOS */
	(void)cv;
	(void)m;
	return 0;
 1006b90:	0005883a 	mov	r2,zero
}
 1006b94:	e037883a 	mov	sp,fp
 1006b98:	df000017 	ldw	fp,0(sp)
 1006b9c:	dec00104 	addi	sp,sp,4
 1006ba0:	f800283a 	ret

01006ba4 <metal_generic_dev_sys_open>:
#include <device.h>
#include <sys.h>
#include <utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 1006ba4:	defffb04 	addi	sp,sp,-20
 1006ba8:	dfc00415 	stw	ra,16(sp)
 1006bac:	df000315 	stw	fp,12(sp)
 1006bb0:	df000304 	addi	fp,sp,12
 1006bb4:	e13fff15 	stw	r4,-4(fp)
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006bb8:	e03ffd15 	stw	zero,-12(fp)
 1006bbc:	00000e06 	br	1006bf8 <metal_generic_dev_sys_open+0x54>
		io = &dev->regions[i];
 1006bc0:	e0bffd17 	ldw	r2,-12(fp)
 1006bc4:	10800e24 	muli	r2,r2,56
 1006bc8:	10800304 	addi	r2,r2,12
 1006bcc:	e0ffff17 	ldw	r3,-4(fp)
 1006bd0:	1885883a 	add	r2,r3,r2
 1006bd4:	e0bffe15 	stw	r2,-8(fp)
		if (!io->size)
 1006bd8:	e0bffe17 	ldw	r2,-8(fp)
 1006bdc:	10800217 	ldw	r2,8(r2)
 1006be0:	10000a26 	beq	r2,zero,1006c0c <metal_generic_dev_sys_open+0x68>
			break;
		metal_sys_io_mem_map(io);
 1006be4:	e13ffe17 	ldw	r4,-8(fp)
 1006be8:	1006c940 	call	1006c94 <metal_sys_io_mem_map>
{
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006bec:	e0bffd17 	ldw	r2,-12(fp)
 1006bf0:	10800044 	addi	r2,r2,1
 1006bf4:	e0bffd15 	stw	r2,-12(fp)
 1006bf8:	e0bfff17 	ldw	r2,-4(fp)
 1006bfc:	10800217 	ldw	r2,8(r2)
 1006c00:	e0fffd17 	ldw	r3,-12(fp)
 1006c04:	18bfee36 	bltu	r3,r2,1006bc0 <__alt_data_end+0xff006bc0>
 1006c08:	00000106 	br	1006c10 <metal_generic_dev_sys_open+0x6c>
		io = &dev->regions[i];
		if (!io->size)
			break;
 1006c0c:	0001883a 	nop
		metal_sys_io_mem_map(io);
	}

	return 0;
 1006c10:	0005883a 	mov	r2,zero
}
 1006c14:	e037883a 	mov	sp,fp
 1006c18:	dfc00117 	ldw	ra,4(sp)
 1006c1c:	df000017 	ldw	fp,0(sp)
 1006c20:	dec00204 	addi	sp,sp,8
 1006c24:	f800283a 	ret

01006c28 <metal_sys_init>:
#include <device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 1006c28:	defffd04 	addi	sp,sp,-12
 1006c2c:	dfc00215 	stw	ra,8(sp)
 1006c30:	df000115 	stw	fp,4(sp)
 1006c34:	df000104 	addi	fp,sp,4
 1006c38:	e13fff15 	stw	r4,-4(fp)
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 1006c3c:	010040b4 	movhi	r4,258
 1006c40:	212c6104 	addi	r4,r4,-20092
 1006c44:	10060bc0 	call	10060bc <metal_bus_register>
	return 0;
 1006c48:	0005883a 	mov	r2,zero
}
 1006c4c:	e037883a 	mov	sp,fp
 1006c50:	dfc00117 	ldw	ra,4(sp)
 1006c54:	df000017 	ldw	fp,0(sp)
 1006c58:	dec00204 	addi	sp,sp,8
 1006c5c:	f800283a 	ret

01006c60 <metal_sys_finish>:

void metal_sys_finish(void)
{
 1006c60:	defffe04 	addi	sp,sp,-8
 1006c64:	dfc00115 	stw	ra,4(sp)
 1006c68:	df000015 	stw	fp,0(sp)
 1006c6c:	d839883a 	mov	fp,sp
	metal_bus_unregister(&metal_generic_bus);
 1006c70:	010040b4 	movhi	r4,258
 1006c74:	212c6104 	addi	r4,r4,-20092
 1006c78:	10061b40 	call	10061b4 <metal_bus_unregister>
}
 1006c7c:	0001883a 	nop
 1006c80:	e037883a 	mov	sp,fp
 1006c84:	dfc00117 	ldw	ra,4(sp)
 1006c88:	df000017 	ldw	fp,0(sp)
 1006c8c:	dec00204 	addi	sp,sp,8
 1006c90:	f800283a 	ret

01006c94 <metal_sys_io_mem_map>:
 */

#include <metal_io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 1006c94:	defffa04 	addi	sp,sp,-24
 1006c98:	dfc00515 	stw	ra,20(sp)
 1006c9c:	df000415 	stw	fp,16(sp)
 1006ca0:	df000404 	addi	fp,sp,16
 1006ca4:	e13fff15 	stw	r4,-4(fp)
	unsigned long p;
	size_t psize;
	void *va;

	va = io->virt;
 1006ca8:	e0bfff17 	ldw	r2,-4(fp)
 1006cac:	10800017 	ldw	r2,0(r2)
 1006cb0:	e0bffe15 	stw	r2,-8(fp)
	psize = io->size;
 1006cb4:	e0bfff17 	ldw	r2,-4(fp)
 1006cb8:	10800217 	ldw	r2,8(r2)
 1006cbc:	e0bffd15 	stw	r2,-12(fp)
	if (psize) {
 1006cc0:	e0bffd17 	ldw	r2,-12(fp)
 1006cc4:	10002826 	beq	r2,zero,1006d68 <metal_sys_io_mem_map+0xd4>
		if (psize >> io->page_shift)
 1006cc8:	e0bfff17 	ldw	r2,-4(fp)
 1006ccc:	10800317 	ldw	r2,12(r2)
 1006cd0:	e0fffd17 	ldw	r3,-12(fp)
 1006cd4:	1884d83a 	srl	r2,r3,r2
 1006cd8:	10000526 	beq	r2,zero,1006cf0 <metal_sys_io_mem_map+0x5c>
			psize = (size_t)1 << io->page_shift;
 1006cdc:	e0bfff17 	ldw	r2,-4(fp)
 1006ce0:	10800317 	ldw	r2,12(r2)
 1006ce4:	00c00044 	movi	r3,1
 1006ce8:	1884983a 	sll	r2,r3,r2
 1006cec:	e0bffd15 	stw	r2,-12(fp)
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 1006cf0:	e03ffc15 	stw	zero,-16(fp)
 1006cf4:	00001506 	br	1006d4c <metal_sys_io_mem_map+0xb8>
			metal_machine_io_mem_map(va, io->physmap[p],
 1006cf8:	e0bfff17 	ldw	r2,-4(fp)
 1006cfc:	10c00117 	ldw	r3,4(r2)
 1006d00:	e0bffc17 	ldw	r2,-16(fp)
 1006d04:	1085883a 	add	r2,r2,r2
 1006d08:	1085883a 	add	r2,r2,r2
 1006d0c:	1885883a 	add	r2,r3,r2
 1006d10:	10c00017 	ldw	r3,0(r2)
 1006d14:	e0bfff17 	ldw	r2,-4(fp)
 1006d18:	10800517 	ldw	r2,20(r2)
 1006d1c:	100f883a 	mov	r7,r2
 1006d20:	e1bffd17 	ldw	r6,-12(fp)
 1006d24:	180b883a 	mov	r5,r3
 1006d28:	e13ffe17 	ldw	r4,-8(fp)
 1006d2c:	10072740 	call	1007274 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 1006d30:	e0fffe17 	ldw	r3,-8(fp)
 1006d34:	e0bffd17 	ldw	r2,-12(fp)
 1006d38:	1885883a 	add	r2,r3,r2
 1006d3c:	e0bffe15 	stw	r2,-8(fp)
	va = io->virt;
	psize = io->size;
	if (psize) {
		if (psize >> io->page_shift)
			psize = (size_t)1 << io->page_shift;
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 1006d40:	e0bffc17 	ldw	r2,-16(fp)
 1006d44:	10800044 	addi	r2,r2,1
 1006d48:	e0bffc15 	stw	r2,-16(fp)
 1006d4c:	e0bfff17 	ldw	r2,-4(fp)
 1006d50:	10c00217 	ldw	r3,8(r2)
 1006d54:	e0bfff17 	ldw	r2,-4(fp)
 1006d58:	10800317 	ldw	r2,12(r2)
 1006d5c:	1886d83a 	srl	r3,r3,r2
 1006d60:	e0bffc17 	ldw	r2,-16(fp)
 1006d64:	18bfe42e 	bgeu	r3,r2,1006cf8 <__alt_data_end+0xff006cf8>
			metal_machine_io_mem_map(va, io->physmap[p],
						 psize, io->mem_flags);
			va += psize;
		}
	}
}
 1006d68:	0001883a 	nop
 1006d6c:	e037883a 	mov	sp,fp
 1006d70:	dfc00117 	ldw	ra,4(sp)
 1006d74:	df000017 	ldw	fp,0(sp)
 1006d78:	dec00204 	addi	sp,sp,8
 1006d7c:	f800283a 	ret

01006d80 <metal_irq_unregister>:
 *
 * @param[in]  irq         interrupt id
 */
static inline
void metal_irq_unregister(int irq)
{
 1006d80:	defffd04 	addi	sp,sp,-12
 1006d84:	dfc00215 	stw	ra,8(sp)
 1006d88:	df000115 	stw	fp,4(sp)
 1006d8c:	df000104 	addi	fp,sp,4
 1006d90:	e13fff15 	stw	r4,-4(fp)
	metal_irq_register(irq, 0, NULL);
 1006d94:	000d883a 	mov	r6,zero
 1006d98:	000b883a 	mov	r5,zero
 1006d9c:	e13fff17 	ldw	r4,-4(fp)
 1006da0:	10084500 	call	1008450 <metal_irq_register>
}
 1006da4:	0001883a 	nop
 1006da8:	e037883a 	mov	sp,fp
 1006dac:	dfc00117 	ldw	ra,4(sp)
 1006db0:	df000017 	ldw	fp,0(sp)
 1006db4:	dec00204 	addi	sp,sp,8
 1006db8:	f800283a 	ret

01006dbc <irq_handler>:
#include <sys.h>
#include <metal_list.h>
#include <utilities.h>

static int irq_handler(int irq, void *priv)
{
 1006dbc:	defffd04 	addi	sp,sp,-12
 1006dc0:	df000215 	stw	fp,8(sp)
 1006dc4:	df000204 	addi	fp,sp,8
 1006dc8:	e13ffe15 	stw	r4,-8(fp)
 1006dcc:	e17fff15 	stw	r5,-4(fp)
	(void)irq;
	(void)priv;

	return 0;
 1006dd0:	0005883a 	mov	r2,zero
}
 1006dd4:	e037883a 	mov	sp,fp
 1006dd8:	df000017 	ldw	fp,0(sp)
 1006ddc:	dec00104 	addi	sp,sp,4
 1006de0:	f800283a 	ret

01006de4 <irq>:

static int irq(void)
{
 1006de4:	defffb04 	addi	sp,sp,-20
 1006de8:	dfc00415 	stw	ra,16(sp)
 1006dec:	df000315 	stw	fp,12(sp)
 1006df0:	df000304 	addi	fp,sp,12
	int rc = 0;
 1006df4:	e03ffd15 	stw	zero,-12(fp)
	char *err_msg="";
 1006df8:	008040b4 	movhi	r2,258
 1006dfc:	10a96604 	addi	r2,r2,-23144
 1006e00:	e0bffe15 	stw	r2,-8(fp)
	enum metal_log_level mll= metal_get_log_level();
 1006e04:	10086540 	call	1008654 <metal_get_log_level>
 1006e08:	e0bfff15 	stw	r2,-4(fp)

	/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */
	metal_set_log_level(METAL_LOG_CRITICAL);
 1006e0c:	01000084 	movi	r4,2
 1006e10:	10086200 	call	1008620 <metal_set_log_level>

	rc = metal_irq_register(1, irq_handler, (void *)1);
 1006e14:	01800044 	movi	r6,1
 1006e18:	01404034 	movhi	r5,256
 1006e1c:	295b6f04 	addi	r5,r5,28092
 1006e20:	01000044 	movi	r4,1
 1006e24:	10084500 	call	1008450 <metal_irq_register>
 1006e28:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e2c:	e0bffd17 	ldw	r2,-12(fp)
 1006e30:	10000426 	beq	r2,zero,1006e44 <irq+0x60>
		err_msg = "register irq 0 fail drv_id 1\n";
 1006e34:	008040b4 	movhi	r2,258
 1006e38:	10a96704 	addi	r2,r2,-23140
 1006e3c:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006e40:	00002006 	br	1006ec4 <irq+0xe0>
	}
	rc = metal_irq_register(2, irq_handler, (void *)1);
 1006e44:	01800044 	movi	r6,1
 1006e48:	01404034 	movhi	r5,256
 1006e4c:	295b6f04 	addi	r5,r5,28092
 1006e50:	01000084 	movi	r4,2
 1006e54:	10084500 	call	1008450 <metal_irq_register>
 1006e58:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e5c:	e0bffd17 	ldw	r2,-12(fp)
 1006e60:	10000426 	beq	r2,zero,1006e74 <irq+0x90>
		err_msg = "register irq 1 fail drv_id 1\n";
 1006e64:	008040b4 	movhi	r2,258
 1006e68:	10a96f04 	addi	r2,r2,-23108
 1006e6c:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006e70:	00001406 	br	1006ec4 <irq+0xe0>
	}

	metal_irq_unregister(1);
 1006e74:	01000044 	movi	r4,1
 1006e78:	1006d800 	call	1006d80 <metal_irq_unregister>
	rc = metal_irq_register(1, irq_handler, (void *)1);
 1006e7c:	01800044 	movi	r6,1
 1006e80:	01404034 	movhi	r5,256
 1006e84:	295b6f04 	addi	r5,r5,28092
 1006e88:	01000044 	movi	r4,1
 1006e8c:	10084500 	call	1008450 <metal_irq_register>
 1006e90:	e0bffd15 	stw	r2,-12(fp)
	if (rc) {
 1006e94:	e0bffd17 	ldw	r2,-12(fp)
 1006e98:	10000426 	beq	r2,zero,1006eac <irq+0xc8>
		err_msg = "register irq 0 after unregistering failed\n";
 1006e9c:	008040b4 	movhi	r2,258
 1006ea0:	10a97704 	addi	r2,r2,-23076
 1006ea4:	e0bffe15 	stw	r2,-8(fp)
		goto out;
 1006ea8:	00000606 	br	1006ec4 <irq+0xe0>
	}
	metal_irq_unregister(1);
 1006eac:	01000044 	movi	r4,1
 1006eb0:	1006d800 	call	1006d80 <metal_irq_unregister>
	metal_irq_unregister(2);
 1006eb4:	01000084 	movi	r4,2
 1006eb8:	1006d800 	call	1006d80 <metal_irq_unregister>

	return 0;
 1006ebc:	0005883a 	mov	r2,zero
 1006ec0:	00002006 	br	1006f44 <irq+0x160>
out:
	metal_set_log_level(mll);
 1006ec4:	e13fff17 	ldw	r4,-4(fp)
 1006ec8:	10086200 	call	1008620 <metal_set_log_level>
	if ((err_msg[0] != '\0') && (!rc))
 1006ecc:	e0bffe17 	ldw	r2,-8(fp)
 1006ed0:	10800003 	ldbu	r2,0(r2)
 1006ed4:	10803fcc 	andi	r2,r2,255
 1006ed8:	1080201c 	xori	r2,r2,128
 1006edc:	10bfe004 	addi	r2,r2,-128
 1006ee0:	10000426 	beq	r2,zero,1006ef4 <irq+0x110>
 1006ee4:	e0bffd17 	ldw	r2,-12(fp)
 1006ee8:	1000021e 	bne	r2,zero,1006ef4 <irq+0x110>
		rc = -EINVAL;
 1006eec:	00bffa84 	movi	r2,-22
 1006ef0:	e0bffd15 	stw	r2,-12(fp)
	if (rc) metal_log(METAL_LOG_ERROR, "%s", err_msg);
 1006ef4:	e0bffd17 	ldw	r2,-12(fp)
 1006ef8:	10001126 	beq	r2,zero,1006f40 <irq+0x15c>
 1006efc:	008060b4 	movhi	r2,386
 1006f00:	10bb4404 	addi	r2,r2,-4848
 1006f04:	10800017 	ldw	r2,0(r2)
 1006f08:	108000f0 	cmpltui	r2,r2,3
 1006f0c:	10000c1e 	bne	r2,zero,1006f40 <irq+0x15c>
 1006f10:	008060b4 	movhi	r2,386
 1006f14:	10bb4404 	addi	r2,r2,-4848
 1006f18:	10800117 	ldw	r2,4(r2)
 1006f1c:	10000826 	beq	r2,zero,1006f40 <irq+0x15c>
 1006f20:	008060b4 	movhi	r2,386
 1006f24:	10bb4404 	addi	r2,r2,-4848
 1006f28:	10800117 	ldw	r2,4(r2)
 1006f2c:	e1bffe17 	ldw	r6,-8(fp)
 1006f30:	014040b4 	movhi	r5,258
 1006f34:	29698204 	addi	r5,r5,-23032
 1006f38:	010000c4 	movi	r4,3
 1006f3c:	103ee83a 	callr	r2
	return rc;
 1006f40:	e0bffd17 	ldw	r2,-12(fp)
}
 1006f44:	e037883a 	mov	sp,fp
 1006f48:	dfc00117 	ldw	ra,4(sp)
 1006f4c:	df000017 	ldw	fp,0(sp)
 1006f50:	dec00204 	addi	sp,sp,8
 1006f54:	f800283a 	ret

01006f58 <metal_test_irq>:

METAL_ADD_TEST(irq);
 1006f58:	defffe04 	addi	sp,sp,-8
 1006f5c:	dfc00115 	stw	ra,4(sp)
 1006f60:	df000015 	stw	fp,0(sp)
 1006f64:	d839883a 	mov	fp,sp
 1006f68:	010040b4 	movhi	r4,258
 1006f6c:	212c7404 	addi	r4,r4,-20016
 1006f70:	1005c280 	call	1005c28 <metal_add_test_case>
 1006f74:	0001883a 	nop
 1006f78:	e037883a 	mov	sp,fp
 1006f7c:	dfc00117 	ldw	ra,4(sp)
 1006f80:	df000017 	ldw	fp,0(sp)
 1006f84:	dec00204 	addi	sp,sp,8
 1006f88:	f800283a 	ret

01006f8c <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1006f8c:	defffe04 	addi	sp,sp,-8
 1006f90:	df000115 	stw	fp,4(sp)
 1006f94:	df000104 	addi	fp,sp,4
 1006f98:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1006f9c:	e0bfff17 	ldw	r2,-4(fp)
 1006fa0:	10000015 	stw	zero,0(r2)
 1006fa4:	0001b03a 	sync
}
 1006fa8:	0001883a 	nop
 1006fac:	e037883a 	mov	sp,fp
 1006fb0:	df000017 	ldw	fp,0(sp)
 1006fb4:	dec00104 	addi	sp,sp,4
 1006fb8:	f800283a 	ret

01006fbc <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1006fbc:	defffe04 	addi	sp,sp,-8
 1006fc0:	df000115 	stw	fp,4(sp)
 1006fc4:	df000104 	addi	fp,sp,4
 1006fc8:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1006fcc:	0001883a 	nop
 1006fd0:	e037883a 	mov	sp,fp
 1006fd4:	df000017 	ldw	fp,0(sp)
 1006fd8:	dec00104 	addi	sp,sp,4
 1006fdc:	f800283a 	ret

01006fe0 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1006fe0:	defffe04 	addi	sp,sp,-8
 1006fe4:	df000115 	stw	fp,4(sp)
 1006fe8:	df000104 	addi	fp,sp,4
 1006fec:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1006ff0:	0001883a 	nop
 1006ff4:	e0bfff17 	ldw	r2,-4(fp)
 1006ff8:	00c00044 	movi	r3,1
 1006ffc:	10c00015 	stw	r3,0(r2)
 1007000:	e0bfff17 	ldw	r2,-4(fp)
 1007004:	10800017 	ldw	r2,0(r2)
 1007008:	103ffa1e 	bne	r2,zero,1006ff4 <__alt_data_end+0xff006ff4>
		;
	}
}
 100700c:	0001883a 	nop
 1007010:	e037883a 	mov	sp,fp
 1007014:	df000017 	ldw	fp,0(sp)
 1007018:	dec00104 	addi	sp,sp,4
 100701c:	f800283a 	ret

01007020 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1007020:	defffe04 	addi	sp,sp,-8
 1007024:	df000115 	stw	fp,4(sp)
 1007028:	df000104 	addi	fp,sp,4
 100702c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1007030:	e0bfff17 	ldw	r2,-4(fp)
 1007034:	0001b03a 	sync
 1007038:	10000015 	stw	zero,0(r2)
}
 100703c:	0001883a 	nop
 1007040:	e037883a 	mov	sp,fp
 1007044:	df000017 	ldw	fp,0(sp)
 1007048:	dec00104 	addi	sp,sp,4
 100704c:	f800283a 	ret

01007050 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1007050:	defffd04 	addi	sp,sp,-12
 1007054:	dfc00215 	stw	ra,8(sp)
 1007058:	df000115 	stw	fp,4(sp)
 100705c:	df000104 	addi	fp,sp,4
 1007060:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1007064:	e13fff17 	ldw	r4,-4(fp)
 1007068:	1006f8c0 	call	1006f8c <__metal_mutex_init>
}
 100706c:	0001883a 	nop
 1007070:	e037883a 	mov	sp,fp
 1007074:	dfc00117 	ldw	ra,4(sp)
 1007078:	df000017 	ldw	fp,0(sp)
 100707c:	dec00204 	addi	sp,sp,8
 1007080:	f800283a 	ret

01007084 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1007084:	defffd04 	addi	sp,sp,-12
 1007088:	dfc00215 	stw	ra,8(sp)
 100708c:	df000115 	stw	fp,4(sp)
 1007090:	df000104 	addi	fp,sp,4
 1007094:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1007098:	e13fff17 	ldw	r4,-4(fp)
 100709c:	1006fbc0 	call	1006fbc <__metal_mutex_deinit>
}
 10070a0:	0001883a 	nop
 10070a4:	e037883a 	mov	sp,fp
 10070a8:	dfc00117 	ldw	ra,4(sp)
 10070ac:	df000017 	ldw	fp,0(sp)
 10070b0:	dec00204 	addi	sp,sp,8
 10070b4:	f800283a 	ret

010070b8 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 10070b8:	defffd04 	addi	sp,sp,-12
 10070bc:	dfc00215 	stw	ra,8(sp)
 10070c0:	df000115 	stw	fp,4(sp)
 10070c4:	df000104 	addi	fp,sp,4
 10070c8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 10070cc:	e13fff17 	ldw	r4,-4(fp)
 10070d0:	1006fe00 	call	1006fe0 <__metal_mutex_acquire>
}
 10070d4:	0001883a 	nop
 10070d8:	e037883a 	mov	sp,fp
 10070dc:	dfc00117 	ldw	ra,4(sp)
 10070e0:	df000017 	ldw	fp,0(sp)
 10070e4:	dec00204 	addi	sp,sp,8
 10070e8:	f800283a 	ret

010070ec <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 10070ec:	defffd04 	addi	sp,sp,-12
 10070f0:	dfc00215 	stw	ra,8(sp)
 10070f4:	df000115 	stw	fp,4(sp)
 10070f8:	df000104 	addi	fp,sp,4
 10070fc:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1007100:	e13fff17 	ldw	r4,-4(fp)
 1007104:	10070200 	call	1007020 <__metal_mutex_release>
}
 1007108:	0001883a 	nop
 100710c:	e037883a 	mov	sp,fp
 1007110:	dfc00117 	ldw	ra,4(sp)
 1007114:	df000017 	ldw	fp,0(sp)
 1007118:	dec00204 	addi	sp,sp,8
 100711c:	f800283a 	ret

01007120 <mutex_thread>:
#include <mutex.h>

static const int mutex_test_count = 1000;

static void *mutex_thread(void *arg)
{
 1007120:	defffb04 	addi	sp,sp,-20
 1007124:	dfc00415 	stw	ra,16(sp)
 1007128:	df000315 	stw	fp,12(sp)
 100712c:	df000304 	addi	fp,sp,12
 1007130:	e13fff15 	stw	r4,-4(fp)
	metal_mutex_t *l = arg;
 1007134:	e0bfff17 	ldw	r2,-4(fp)
 1007138:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 100713c:	e03ffd15 	stw	zero,-12(fp)
 1007140:	00000906 	br	1007168 <mutex_thread+0x48>
		metal_mutex_acquire(l);
 1007144:	e13ffe17 	ldw	r4,-8(fp)
 1007148:	10070b80 	call	10070b8 <metal_mutex_acquire>
		usleep(1);
 100714c:	01000044 	movi	r4,1
 1007150:	1017fd80 	call	1017fd8 <usleep>
		metal_mutex_release(l);
 1007154:	e13ffe17 	ldw	r4,-8(fp)
 1007158:	10070ec0 	call	10070ec <metal_mutex_release>
static void *mutex_thread(void *arg)
{
	metal_mutex_t *l = arg;
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 100715c:	e0bffd17 	ldw	r2,-12(fp)
 1007160:	10800044 	addi	r2,r2,1
 1007164:	e0bffd15 	stw	r2,-12(fp)
 1007168:	0080fa04 	movi	r2,1000
 100716c:	e0fffd17 	ldw	r3,-12(fp)
 1007170:	18bff416 	blt	r3,r2,1007144 <__alt_data_end+0xff007144>
		metal_mutex_acquire(l);
		usleep(1);
		metal_mutex_release(l);
	}

	return NULL;
 1007174:	0005883a 	mov	r2,zero
}
 1007178:	e037883a 	mov	sp,fp
 100717c:	dfc00117 	ldw	ra,4(sp)
 1007180:	df000017 	ldw	fp,0(sp)
 1007184:	dec00204 	addi	sp,sp,8
 1007188:	f800283a 	ret

0100718c <mutex>:

static int mutex(void)
{
 100718c:	defffb04 	addi	sp,sp,-20
 1007190:	dfc00415 	stw	ra,16(sp)
 1007194:	df000315 	stw	fp,12(sp)
 1007198:	df000304 	addi	fp,sp,12
	metal_mutex_t lock;
	const int threads = 10;
 100719c:	00800284 	movi	r2,10
 10071a0:	e0bffd15 	stw	r2,-12(fp)
	int rc;

	metal_mutex_init(&lock);
 10071a4:	e0bfff04 	addi	r2,fp,-4
 10071a8:	1009883a 	mov	r4,r2
 10071ac:	10070500 	call	1007050 <metal_mutex_init>

	rc = metal_run(threads, mutex_thread, &lock);
 10071b0:	e0bfff04 	addi	r2,fp,-4
 10071b4:	100d883a 	mov	r6,r2
 10071b8:	01404034 	movhi	r5,256
 10071bc:	295c4804 	addi	r5,r5,28960
 10071c0:	e13ffd17 	ldw	r4,-12(fp)
 10071c4:	10074a00 	call	10074a0 <metal_run>
 10071c8:	e0bffe15 	stw	r2,-8(fp)

	metal_mutex_deinit(&lock);
 10071cc:	e0bfff04 	addi	r2,fp,-4
 10071d0:	1009883a 	mov	r4,r2
 10071d4:	10070840 	call	1007084 <metal_mutex_deinit>
	return rc;
 10071d8:	e0bffe17 	ldw	r2,-8(fp)
}
 10071dc:	e037883a 	mov	sp,fp
 10071e0:	dfc00117 	ldw	ra,4(sp)
 10071e4:	df000017 	ldw	fp,0(sp)
 10071e8:	dec00204 	addi	sp,sp,8
 10071ec:	f800283a 	ret

010071f0 <metal_test_mutex>:
METAL_ADD_TEST(mutex);
 10071f0:	defffe04 	addi	sp,sp,-8
 10071f4:	dfc00115 	stw	ra,4(sp)
 10071f8:	df000015 	stw	fp,0(sp)
 10071fc:	d839883a 	mov	fp,sp
 1007200:	010040b4 	movhi	r4,258
 1007204:	212c7804 	addi	r4,r4,-20000
 1007208:	1005c280 	call	1005c28 <metal_add_test_case>
 100720c:	0001883a 	nop
 1007210:	e037883a 	mov	sp,fp
 1007214:	dfc00117 	ldw	ra,4(sp)
 1007218:	df000017 	ldw	fp,0(sp)
 100721c:	dec00204 	addi	sp,sp,8
 1007220:	f800283a 	ret

01007224 <metal_machine_cache_flush>:
	}
	return state;
}*/

void metal_machine_cache_flush(void *addr, unsigned int len)
{/*
 1007224:	defffd04 	addi	sp,sp,-12
 1007228:	df000215 	stw	fp,8(sp)
 100722c:	df000204 	addi	fp,sp,8
 1007230:	e13ffe15 	stw	r4,-8(fp)
 1007234:	e17fff15 	stw	r5,-4(fp)
	if (!addr && !len)
		Xil_DCacheFlush();
	else
		Xil_DCacheFlushRange((intptr_t)addr, len);*/
}
 1007238:	0001883a 	nop
 100723c:	e037883a 	mov	sp,fp
 1007240:	df000017 	ldw	fp,0(sp)
 1007244:	dec00104 	addi	sp,sp,4
 1007248:	f800283a 	ret

0100724c <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 100724c:	defffd04 	addi	sp,sp,-12
 1007250:	df000215 	stw	fp,8(sp)
 1007254:	df000204 	addi	fp,sp,8
 1007258:	e13ffe15 	stw	r4,-8(fp)
 100725c:	e17fff15 	stw	r5,-4(fp)
	/*if (!addr && !len)
		Xil_DCacheInvalidate();
	else
		Xil_DCacheInvalidateRange((intptr_t)addr, len);*/
}
 1007260:	0001883a 	nop
 1007264:	e037883a 	mov	sp,fp
 1007268:	df000017 	ldw	fp,0(sp)
 100726c:	dec00104 	addi	sp,sp,4
 1007270:	f800283a 	ret

01007274 <metal_machine_io_mem_map>:
	asm volatile("wfi");
}*/

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
				      size_t size, unsigned int flags)
{
 1007274:	defffb04 	addi	sp,sp,-20
 1007278:	df000415 	stw	fp,16(sp)
 100727c:	df000404 	addi	fp,sp,16
 1007280:	e13ffc15 	stw	r4,-16(fp)
 1007284:	e17ffd15 	stw	r5,-12(fp)
 1007288:	e1bffe15 	stw	r6,-8(fp)
 100728c:	e1ffff15 	stw	r7,-4(fp)

		/* Write translation table entry value to entry address */
		/*Xil_SetTlbAttributes(ttb_addr, flags);
	}*/

	return va;
 1007290:	e0bffc17 	ldw	r2,-16(fp)
}
 1007294:	e037883a 	mov	sp,fp
 1007298:	df000017 	ldw	fp,0(sp)
 100729c:	dec00104 	addi	sp,sp,4
 10072a0:	f800283a 	ret

010072a4 <metal_shmem_open>:

#include <shmem.h>

int metal_shmem_open(const char *name, size_t size,
		     struct metal_io_region **io)
{
 10072a4:	defffb04 	addi	sp,sp,-20
 10072a8:	dfc00415 	stw	ra,16(sp)
 10072ac:	df000315 	stw	fp,12(sp)
 10072b0:	df000304 	addi	fp,sp,12
 10072b4:	e13ffd15 	stw	r4,-12(fp)
 10072b8:	e17ffe15 	stw	r5,-8(fp)
 10072bc:	e1bfff15 	stw	r6,-4(fp)
	return metal_shmem_open_generic(name, size, io);
 10072c0:	e1bfff17 	ldw	r6,-4(fp)
 10072c4:	e17ffe17 	ldw	r5,-8(fp)
 10072c8:	e13ffd17 	ldw	r4,-12(fp)
 10072cc:	10087fc0 	call	10087fc <metal_shmem_open_generic>
}
 10072d0:	e037883a 	mov	sp,fp
 10072d4:	dfc00117 	ldw	ra,4(sp)
 10072d8:	df000017 	ldw	fp,0(sp)
 10072dc:	dec00204 	addi	sp,sp,8
 10072e0:	f800283a 	ret

010072e4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 10072e4:	defffc04 	addi	sp,sp,-16
 10072e8:	dfc00315 	stw	ra,12(sp)
 10072ec:	df000215 	stw	fp,8(sp)
 10072f0:	df000204 	addi	fp,sp,8
 10072f4:	e13fff15 	stw	r4,-4(fp)
	const TickType_t xDelay = usec / portTICK_PERIOD_MS;
 10072f8:	e0bfff17 	ldw	r2,-4(fp)
 10072fc:	e0bffe15 	stw	r2,-8(fp)
	vTaskDelay(xDelay);
 1007300:	e13ffe17 	ldw	r4,-8(fp)
 1007304:	1003bbc0 	call	1003bbc <vTaskDelay>
	return 0;
 1007308:	0005883a 	mov	r2,zero
}
 100730c:	e037883a 	mov	sp,fp
 1007310:	dfc00117 	ldw	ra,4(sp)
 1007314:	df000017 	ldw	fp,0(sp)
 1007318:	dec00204 	addi	sp,sp,8
 100731c:	f800283a 	ret

01007320 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 1007320:	defffd04 	addi	sp,sp,-12
 1007324:	dfc00215 	stw	ra,8(sp)
 1007328:	df000115 	stw	fp,4(sp)
 100732c:	df000104 	addi	fp,sp,4
 1007330:	e13fff15 	stw	r4,-4(fp)
	return __metal_sleep_usec(usec);
 1007334:	e13fff17 	ldw	r4,-4(fp)
 1007338:	10072e40 	call	10072e4 <__metal_sleep_usec>
}
 100733c:	e037883a 	mov	sp,fp
 1007340:	dfc00117 	ldw	ra,4(sp)
 1007344:	df000017 	ldw	fp,0(sp)
 1007348:	dec00204 	addi	sp,sp,8
 100734c:	f800283a 	ret

01007350 <sleep>:
#include <sleep.h>
#include <log.h>
#include <sys.h>

static int sleep(void)
{
 1007350:	defff404 	addi	sp,sp,-48
 1007354:	dfc00b15 	stw	ra,44(sp)
 1007358:	df000a15 	stw	fp,40(sp)
 100735c:	dc400915 	stw	r17,36(sp)
 1007360:	dc000815 	stw	r16,32(sp)
 1007364:	df000a04 	addi	fp,sp,40
	int rc;
	unsigned int usec = 3;
 1007368:	008000c4 	movi	r2,3
 100736c:	e0bff715 	stw	r2,-36(fp)
	unsigned long long tstart, tend, tdelayed;

	tstart = metal_get_timestamp();
 1007370:	10078940 	call	1007894 <metal_get_timestamp>
 1007374:	e0bff815 	stw	r2,-32(fp)
 1007378:	e0fff915 	stw	r3,-28(fp)
	metal_sleep_usec((usec/portTICK_PERIOD_MS));
 100737c:	e13ff717 	ldw	r4,-36(fp)
 1007380:	10073200 	call	1007320 <metal_sleep_usec>
	tend = metal_get_timestamp();
 1007384:	10078940 	call	1007894 <metal_get_timestamp>
 1007388:	e0bffa15 	stw	r2,-24(fp)
 100738c:	e0fffb15 	stw	r3,-20(fp)
	tdelayed = tend - tstart;
 1007390:	e13ffa17 	ldw	r4,-24(fp)
 1007394:	e17ffb17 	ldw	r5,-20(fp)
 1007398:	e1bff817 	ldw	r6,-32(fp)
 100739c:	e1fff917 	ldw	r7,-28(fp)
 10073a0:	2185c83a 	sub	r2,r4,r6
 10073a4:	2091803a 	cmpltu	r8,r4,r2
 10073a8:	29c7c83a 	sub	r3,r5,r7
 10073ac:	1a09c83a 	sub	r4,r3,r8
 10073b0:	2007883a 	mov	r3,r4
 10073b4:	e0bffc15 	stw	r2,-16(fp)
 10073b8:	e0fffd15 	stw	r3,-12(fp)
	if (tdelayed > (usec/portTICK_PERIOD_MS))
 10073bc:	e0bff717 	ldw	r2,-36(fp)
 10073c0:	1021883a 	mov	r16,r2
 10073c4:	0023883a 	mov	r17,zero
 10073c8:	e0bffd17 	ldw	r2,-12(fp)
 10073cc:	88800436 	bltu	r17,r2,10073e0 <sleep+0x90>
 10073d0:	e0bffd17 	ldw	r2,-12(fp)
 10073d4:	1440051e 	bne	r2,r17,10073ec <sleep+0x9c>
 10073d8:	e0bffc17 	ldw	r2,-16(fp)
 10073dc:	8080032e 	bgeu	r16,r2,10073ec <sleep+0x9c>
		rc = -1;
 10073e0:	00bfffc4 	movi	r2,-1
 10073e4:	e0bff615 	stw	r2,-40(fp)
 10073e8:	00000106 	br	10073f0 <sleep+0xa0>
	else
		rc = 0;
 10073ec:	e03ff615 	stw	zero,-40(fp)

	return rc;
 10073f0:	e0bff617 	ldw	r2,-40(fp)
}
 10073f4:	e6fffe04 	addi	sp,fp,-8
 10073f8:	dfc00317 	ldw	ra,12(sp)
 10073fc:	df000217 	ldw	fp,8(sp)
 1007400:	dc400117 	ldw	r17,4(sp)
 1007404:	dc000017 	ldw	r16,0(sp)
 1007408:	dec00404 	addi	sp,sp,16
 100740c:	f800283a 	ret

01007410 <metal_test_sleep>:
METAL_ADD_TEST(sleep);
 1007410:	defffe04 	addi	sp,sp,-8
 1007414:	dfc00115 	stw	ra,4(sp)
 1007418:	df000015 	stw	fp,0(sp)
 100741c:	d839883a 	mov	fp,sp
 1007420:	010040b4 	movhi	r4,258
 1007424:	212c7c04 	addi	r4,r4,-19984
 1007428:	1005c280 	call	1005c28 <metal_add_test_case>
 100742c:	0001883a 	nop
 1007430:	e037883a 	mov	sp,fp
 1007434:	dfc00117 	ldw	ra,4(sp)
 1007438:	df000017 	ldw	fp,0(sp)
 100743c:	dec00204 	addi	sp,sp,8
 1007440:	f800283a 	ret

01007444 <thread_wrapper>:
		metal_thread_t thread_func;
		void *arg;
	} thread_wrap_arg_t;

static void thread_wrapper(void *arg)
{
 1007444:	defffc04 	addi	sp,sp,-16
 1007448:	dfc00315 	stw	ra,12(sp)
 100744c:	df000215 	stw	fp,8(sp)
 1007450:	df000204 	addi	fp,sp,8
 1007454:	e13fff15 	stw	r4,-4(fp)
	thread_wrap_arg_t *wrap_p = (thread_wrap_arg_t *)arg;
 1007458:	e0bfff17 	ldw	r2,-4(fp)
 100745c:	e0bffe15 	stw	r2,-8(fp)
	(void)wrap_p->thread_func(wrap_p->arg);
 1007460:	e0bffe17 	ldw	r2,-8(fp)
 1007464:	10800017 	ldw	r2,0(r2)
 1007468:	e0fffe17 	ldw	r3,-8(fp)
 100746c:	18c00117 	ldw	r3,4(r3)
 1007470:	1809883a 	mov	r4,r3
 1007474:	103ee83a 	callr	r2
	vPortFree(wrap_p);
 1007478:	e13ffe17 	ldw	r4,-8(fp)
 100747c:	10011840 	call	1001184 <vPortFree>
	vTaskDelete(NULL);
 1007480:	0009883a 	mov	r4,zero
 1007484:	10039e40 	call	10039e4 <vTaskDelete>
}       
 1007488:	0001883a 	nop
 100748c:	e037883a 	mov	sp,fp
 1007490:	dfc00117 	ldw	ra,4(sp)
 1007494:	df000017 	ldw	fp,0(sp)
 1007498:	dec00204 	addi	sp,sp,8
 100749c:	f800283a 	ret

010074a0 <metal_run>:

int metal_run(int threads, metal_thread_t child, void *arg)
{
 10074a0:	defff504 	addi	sp,sp,-44
 10074a4:	dfc00a15 	stw	ra,40(sp)
 10074a8:	df000915 	stw	fp,36(sp)
 10074ac:	dc000815 	stw	r16,32(sp)
 10074b0:	df000904 	addi	fp,sp,36
 10074b4:	e13ffc15 	stw	r4,-16(fp)
 10074b8:	e17ffd15 	stw	r5,-12(fp)
 10074bc:	e1bffe15 	stw	r6,-8(fp)
 10074c0:	d809883a 	mov	r4,sp
 10074c4:	2021883a 	mov	r16,r4
	TaskHandle_t tids[threads];
 10074c8:	e13ffc17 	ldw	r4,-16(fp)
 10074cc:	217fffc4 	addi	r5,r4,-1
 10074d0:	e17ff815 	stw	r5,-32(fp)
 10074d4:	200b883a 	mov	r5,r4
 10074d8:	2817883a 	mov	r11,r5
 10074dc:	0019883a 	mov	r12,zero
 10074e0:	580ad6fa 	srli	r5,r11,27
 10074e4:	6010917a 	slli	r8,r12,5
 10074e8:	2a10b03a 	or	r8,r5,r8
 10074ec:	580e917a 	slli	r7,r11,5
 10074f0:	200b883a 	mov	r5,r4
 10074f4:	2813883a 	mov	r9,r5
 10074f8:	0015883a 	mov	r10,zero
 10074fc:	480ad6fa 	srli	r5,r9,27
 1007500:	5006917a 	slli	r3,r10,5
 1007504:	28c6b03a 	or	r3,r5,r3
 1007508:	4804917a 	slli	r2,r9,5
 100750c:	2005883a 	mov	r2,r4
 1007510:	1085883a 	add	r2,r2,r2
 1007514:	1085883a 	add	r2,r2,r2
 1007518:	108000c4 	addi	r2,r2,3
 100751c:	108000c4 	addi	r2,r2,3
 1007520:	1004d0ba 	srli	r2,r2,2
 1007524:	1085883a 	add	r2,r2,r2
 1007528:	1085883a 	add	r2,r2,r2
 100752c:	d8b7c83a 	sub	sp,sp,r2
 1007530:	d8800104 	addi	r2,sp,4
 1007534:	108000c4 	addi	r2,r2,3
 1007538:	1004d0ba 	srli	r2,r2,2
 100753c:	1085883a 	add	r2,r2,r2
 1007540:	1085883a 	add	r2,r2,r2
 1007544:	e0bff915 	stw	r2,-28(fp)
	int error, ts_created;

	error = metal_run_noblock(threads, child, arg, (void *)tids, &ts_created);
 1007548:	e0fff917 	ldw	r3,-28(fp)
 100754c:	e0bffb04 	addi	r2,fp,-20
 1007550:	d8800015 	stw	r2,0(sp)
 1007554:	180f883a 	mov	r7,r3
 1007558:	e1bffe17 	ldw	r6,-8(fp)
 100755c:	e17ffd17 	ldw	r5,-12(fp)
 1007560:	e13ffc17 	ldw	r4,-16(fp)
 1007564:	10075a00 	call	10075a0 <metal_run_noblock>
 1007568:	e0bffa15 	stw	r2,-24(fp)

	metal_finish_threads(ts_created, (void *)tids);
 100756c:	e0bffb17 	ldw	r2,-20(fp)
 1007570:	e0fff917 	ldw	r3,-28(fp)
 1007574:	180b883a 	mov	r5,r3
 1007578:	1009883a 	mov	r4,r2
 100757c:	10077b40 	call	10077b4 <metal_finish_threads>

	return error;
 1007580:	e0bffa17 	ldw	r2,-24(fp)
 1007584:	8037883a 	mov	sp,r16
}
 1007588:	e6ffff04 	addi	sp,fp,-4
 100758c:	dfc00217 	ldw	ra,8(sp)
 1007590:	df000117 	ldw	fp,4(sp)
 1007594:	dc000017 	ldw	r16,0(sp)
 1007598:	dec00304 	addi	sp,sp,12
 100759c:	f800283a 	ret

010075a0 <metal_run_noblock>:


int metal_run_noblock(int threads, metal_thread_t child,
		     void *arg, void *tids, int *threads_out)
{
 10075a0:	defff004 	addi	sp,sp,-64
 10075a4:	dfc00f15 	stw	ra,60(sp)
 10075a8:	df000e15 	stw	fp,56(sp)
 10075ac:	df000e04 	addi	fp,sp,56
 10075b0:	e13ffc15 	stw	r4,-16(fp)
 10075b4:	e17ffd15 	stw	r5,-12(fp)
 10075b8:	e1bffe15 	stw	r6,-8(fp)
 10075bc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 10075c0:	e0bfff17 	ldw	r2,-4(fp)
 10075c4:	e0bff615 	stw	r2,-40(fp)
	BaseType_t stat = pdPASS;
 10075c8:	00800044 	movi	r2,1
 10075cc:	e0bff515 	stw	r2,-44(fp)
	char tn[15];
	thread_wrap_arg_t *wrap_p;

	if (!tids) {
 10075d0:	e0bfff17 	ldw	r2,-4(fp)
 10075d4:	1000121e 	bne	r2,zero,1007620 <metal_run_noblock+0x80>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 10075d8:	008060b4 	movhi	r2,386
 10075dc:	10bb4404 	addi	r2,r2,-4848
 10075e0:	10800017 	ldw	r2,0(r2)
 10075e4:	108000f0 	cmpltui	r2,r2,3
 10075e8:	10000b1e 	bne	r2,zero,1007618 <metal_run_noblock+0x78>
 10075ec:	008060b4 	movhi	r2,386
 10075f0:	10bb4404 	addi	r2,r2,-4848
 10075f4:	10800117 	ldw	r2,4(r2)
 10075f8:	10000726 	beq	r2,zero,1007618 <metal_run_noblock+0x78>
 10075fc:	008060b4 	movhi	r2,386
 1007600:	10bb4404 	addi	r2,r2,-4848
 1007604:	10800117 	ldw	r2,4(r2)
 1007608:	014040b4 	movhi	r5,258
 100760c:	29698804 	addi	r5,r5,-23008
 1007610:	010000c4 	movi	r4,3
 1007614:	103ee83a 	callr	r2
		return -EINVAL;
 1007618:	00bffa84 	movi	r2,-22
 100761c:	00006006 	br	10077a0 <metal_run_noblock+0x200>
	}

	for (i = 0; i < threads; i++) {
 1007620:	e03ff415 	stw	zero,-48(fp)
 1007624:	00004f06 	br	1007764 <metal_run_noblock+0x1c4>
		snprintf(tn, metal_dim(tn), "%d", i);
 1007628:	e0bff804 	addi	r2,fp,-32
 100762c:	e1fff417 	ldw	r7,-48(fp)
 1007630:	018040b4 	movhi	r6,258
 1007634:	31a99104 	addi	r6,r6,-22972
 1007638:	014003c4 	movi	r5,15
 100763c:	1009883a 	mov	r4,r2
 1007640:	100917c0 	call	100917c <snprintf>
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
 1007644:	01000204 	movi	r4,8
 1007648:	1000fb00 	call	1000fb0 <pvPortMalloc>
 100764c:	e0bff715 	stw	r2,-36(fp)
		if (!wrap_p) {
 1007650:	e0bff717 	ldw	r2,-36(fp)
 1007654:	1000121e 	bne	r2,zero,10076a0 <metal_run_noblock+0x100>
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
 1007658:	008060b4 	movhi	r2,386
 100765c:	10bb4404 	addi	r2,r2,-4848
 1007660:	10800017 	ldw	r2,0(r2)
 1007664:	108000f0 	cmpltui	r2,r2,3
 1007668:	1000421e 	bne	r2,zero,1007774 <metal_run_noblock+0x1d4>
 100766c:	008060b4 	movhi	r2,386
 1007670:	10bb4404 	addi	r2,r2,-4848
 1007674:	10800117 	ldw	r2,4(r2)
 1007678:	10003e26 	beq	r2,zero,1007774 <metal_run_noblock+0x1d4>
 100767c:	008060b4 	movhi	r2,386
 1007680:	10bb4404 	addi	r2,r2,-4848
 1007684:	10800117 	ldw	r2,4(r2)
 1007688:	e1bff417 	ldw	r6,-48(fp)
 100768c:	014040b4 	movhi	r5,258
 1007690:	29699204 	addi	r5,r5,-22968
 1007694:	010000c4 	movi	r4,3
 1007698:	103ee83a 	callr	r2
			break;
 100769c:	00003506 	br	1007774 <metal_run_noblock+0x1d4>
		}
			
		wrap_p->thread_func = child;
 10076a0:	e0bff717 	ldw	r2,-36(fp)
 10076a4:	e0fffd17 	ldw	r3,-12(fp)
 10076a8:	10c00015 	stw	r3,0(r2)
		wrap_p->arg = arg;
 10076ac:	e0bff717 	ldw	r2,-36(fp)
 10076b0:	e0fffe17 	ldw	r3,-8(fp)
 10076b4:	10c00115 	stw	r3,4(r2)
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 10076b8:	e0bff417 	ldw	r2,-48(fp)
				   wrap_p, 2, &tid_p[i]);
 10076bc:	1085883a 	add	r2,r2,r2
 10076c0:	1085883a 	add	r2,r2,r2
 10076c4:	1007883a 	mov	r3,r2
			break;
		}
			
		wrap_p->thread_func = child;
		wrap_p->arg = arg;
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 10076c8:	e0bff617 	ldw	r2,-40(fp)
 10076cc:	10c5883a 	add	r2,r2,r3
 10076d0:	e0fff804 	addi	r3,fp,-32
 10076d4:	d8800115 	stw	r2,4(sp)
 10076d8:	00800084 	movi	r2,2
 10076dc:	d8800015 	stw	r2,0(sp)
 10076e0:	e1fff717 	ldw	r7,-36(fp)
 10076e4:	01802004 	movi	r6,128
 10076e8:	180b883a 	mov	r5,r3
 10076ec:	01004034 	movhi	r4,256
 10076f0:	211d1104 	addi	r4,r4,29764
 10076f4:	100361c0 	call	100361c <xTaskCreate>
 10076f8:	e0bff515 	stw	r2,-44(fp)
				   wrap_p, 2, &tid_p[i]);
		if (stat != pdPASS) {
 10076fc:	e0bff517 	ldw	r2,-44(fp)
 1007700:	10800060 	cmpeqi	r2,r2,1
 1007704:	1000141e 	bne	r2,zero,1007758 <metal_run_noblock+0x1b8>
			metal_log(METAL_LOG_ERROR, "failed to create thread %d\n", i);
 1007708:	008060b4 	movhi	r2,386
 100770c:	10bb4404 	addi	r2,r2,-4848
 1007710:	10800017 	ldw	r2,0(r2)
 1007714:	108000f0 	cmpltui	r2,r2,3
 1007718:	10000c1e 	bne	r2,zero,100774c <metal_run_noblock+0x1ac>
 100771c:	008060b4 	movhi	r2,386
 1007720:	10bb4404 	addi	r2,r2,-4848
 1007724:	10800117 	ldw	r2,4(r2)
 1007728:	10000826 	beq	r2,zero,100774c <metal_run_noblock+0x1ac>
 100772c:	008060b4 	movhi	r2,386
 1007730:	10bb4404 	addi	r2,r2,-4848
 1007734:	10800117 	ldw	r2,4(r2)
 1007738:	e1bff417 	ldw	r6,-48(fp)
 100773c:	014040b4 	movhi	r5,258
 1007740:	29699a04 	addi	r5,r5,-22936
 1007744:	010000c4 	movi	r4,3
 1007748:	103ee83a 	callr	r2
			vPortFree(wrap_p);
 100774c:	e13ff717 	ldw	r4,-36(fp)
 1007750:	10011840 	call	1001184 <vPortFree>
			break;
 1007754:	00000806 	br	1007778 <metal_run_noblock+0x1d8>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return -EINVAL;
	}

	for (i = 0; i < threads; i++) {
 1007758:	e0bff417 	ldw	r2,-48(fp)
 100775c:	10800044 	addi	r2,r2,1
 1007760:	e0bff415 	stw	r2,-48(fp)
 1007764:	e0fff417 	ldw	r3,-48(fp)
 1007768:	e0bffc17 	ldw	r2,-16(fp)
 100776c:	18bfae16 	blt	r3,r2,1007628 <__alt_data_end+0xff007628>
 1007770:	00000106 	br	1007778 <metal_run_noblock+0x1d8>
		snprintf(tn, metal_dim(tn), "%d", i);
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
		if (!wrap_p) {
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
			break;
 1007774:	0001883a 	nop
			vPortFree(wrap_p);
			break;
		}
	}

	*threads_out = i;
 1007778:	e0800217 	ldw	r2,8(fp)
 100777c:	e0fff417 	ldw	r3,-48(fp)
 1007780:	10c00015 	stw	r3,0(r2)
	return pdPASS == stat ? 0 : -ENOMEM;
 1007784:	e0bff517 	ldw	r2,-44(fp)
 1007788:	10800058 	cmpnei	r2,r2,1
 100778c:	1000021e 	bne	r2,zero,1007798 <metal_run_noblock+0x1f8>
 1007790:	0005883a 	mov	r2,zero
 1007794:	00000206 	br	10077a0 <metal_run_noblock+0x200>
 1007798:	00bffd04 	movi	r2,-12
 100779c:	0001883a 	nop
}
 10077a0:	e037883a 	mov	sp,fp
 10077a4:	dfc00117 	ldw	ra,4(sp)
 10077a8:	df000017 	ldw	fp,0(sp)
 10077ac:	dec00204 	addi	sp,sp,8
 10077b0:	f800283a 	ret

010077b4 <metal_finish_threads>:


void metal_finish_threads(int threads, void *tids)
{
 10077b4:	defff904 	addi	sp,sp,-28
 10077b8:	dfc00615 	stw	ra,24(sp)
 10077bc:	df000515 	stw	fp,20(sp)
 10077c0:	df000504 	addi	fp,sp,20
 10077c4:	e13ffe15 	stw	r4,-8(fp)
 10077c8:	e17fff15 	stw	r5,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 10077cc:	e0bfff17 	ldw	r2,-4(fp)
 10077d0:	e0bffc15 	stw	r2,-16(fp)

	if (!tids) {
 10077d4:	e0bfff17 	ldw	r2,-4(fp)
 10077d8:	1000111e 	bne	r2,zero,1007820 <metal_finish_threads+0x6c>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 10077dc:	008060b4 	movhi	r2,386
 10077e0:	10bb4404 	addi	r2,r2,-4848
 10077e4:	10800017 	ldw	r2,0(r2)
 10077e8:	108000f0 	cmpltui	r2,r2,3
 10077ec:	1000231e 	bne	r2,zero,100787c <metal_finish_threads+0xc8>
 10077f0:	008060b4 	movhi	r2,386
 10077f4:	10bb4404 	addi	r2,r2,-4848
 10077f8:	10800117 	ldw	r2,4(r2)
 10077fc:	10001f26 	beq	r2,zero,100787c <metal_finish_threads+0xc8>
 1007800:	008060b4 	movhi	r2,386
 1007804:	10bb4404 	addi	r2,r2,-4848
 1007808:	10800117 	ldw	r2,4(r2)
 100780c:	014040b4 	movhi	r5,258
 1007810:	29698804 	addi	r5,r5,-23008
 1007814:	010000c4 	movi	r4,3
 1007818:	103ee83a 	callr	r2
		return;
 100781c:	00001706 	br	100787c <metal_finish_threads+0xc8>
	}

	for (i = 0; i < threads; i++) {
 1007820:	e03ffb15 	stw	zero,-20(fp)
 1007824:	00001106 	br	100786c <metal_finish_threads+0xb8>
		eTaskState ts;
		do {
			taskYIELD();
 1007828:	003b683a 	trap	0
			ts=eTaskGetState(tid_p[i]);
 100782c:	e0bffb17 	ldw	r2,-20(fp)
 1007830:	1085883a 	add	r2,r2,r2
 1007834:	1085883a 	add	r2,r2,r2
 1007838:	1007883a 	mov	r3,r2
 100783c:	e0bffc17 	ldw	r2,-16(fp)
 1007840:	10c5883a 	add	r2,r2,r3
 1007844:	10800017 	ldw	r2,0(r2)
 1007848:	1009883a 	mov	r4,r2
 100784c:	1003c180 	call	1003c18 <eTaskGetState>
 1007850:	e0bffd15 	stw	r2,-12(fp)
		} while (ts != eDeleted);
 1007854:	e0bffd17 	ldw	r2,-12(fp)
 1007858:	10800118 	cmpnei	r2,r2,4
 100785c:	103ff21e 	bne	r2,zero,1007828 <__alt_data_end+0xff007828>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
	}

	for (i = 0; i < threads; i++) {
 1007860:	e0bffb17 	ldw	r2,-20(fp)
 1007864:	10800044 	addi	r2,r2,1
 1007868:	e0bffb15 	stw	r2,-20(fp)
 100786c:	e0fffb17 	ldw	r3,-20(fp)
 1007870:	e0bffe17 	ldw	r2,-8(fp)
 1007874:	18bfec16 	blt	r3,r2,1007828 <__alt_data_end+0xff007828>
 1007878:	00000106 	br	1007880 <metal_finish_threads+0xcc>
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;

	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
 100787c:	0001883a 	nop
		do {
			taskYIELD();
			ts=eTaskGetState(tid_p[i]);
		} while (ts != eDeleted);
	}
}
 1007880:	e037883a 	mov	sp,fp
 1007884:	dfc00117 	ldw	ra,4(sp)
 1007888:	df000017 	ldw	fp,0(sp)
 100788c:	dec00204 	addi	sp,sp,8
 1007890:	f800283a 	ret

01007894 <metal_get_timestamp>:
#include <task.h>

#include <time.h>

unsigned long long metal_get_timestamp(void)
{
 1007894:	defffc04 	addi	sp,sp,-16
 1007898:	dfc00315 	stw	ra,12(sp)
 100789c:	df000215 	stw	fp,8(sp)
 10078a0:	dc400115 	stw	r17,4(sp)
 10078a4:	dc000015 	stw	r16,0(sp)
 10078a8:	df000204 	addi	fp,sp,8
	return (unsigned long long)xTaskGetTickCount();
 10078ac:	10044e00 	call	10044e0 <xTaskGetTickCount>
 10078b0:	1021883a 	mov	r16,r2
 10078b4:	0023883a 	mov	r17,zero
 10078b8:	8007883a 	mov	r3,r16
 10078bc:	8809883a 	mov	r4,r17
}
 10078c0:	1805883a 	mov	r2,r3
 10078c4:	2007883a 	mov	r3,r4
 10078c8:	e6fffe04 	addi	sp,fp,-8
 10078cc:	dfc00317 	ldw	ra,12(sp)
 10078d0:	df000217 	ldw	fp,8(sp)
 10078d4:	dc400117 	ldw	r17,4(sp)
 10078d8:	dc000017 	ldw	r16,0(sp)
 10078dc:	dec00404 	addi	sp,sp,16
 10078e0:	f800283a 	ret

010078e4 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 10078e4:	defffe04 	addi	sp,sp,-8
 10078e8:	df000115 	stw	fp,4(sp)
 10078ec:	df000104 	addi	fp,sp,4
 10078f0:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 10078f4:	e0bfff17 	ldw	r2,-4(fp)
 10078f8:	e0ffff17 	ldw	r3,-4(fp)
 10078fc:	10c00115 	stw	r3,4(r2)
 1007900:	e0bfff17 	ldw	r2,-4(fp)
 1007904:	10c00117 	ldw	r3,4(r2)
 1007908:	e0bfff17 	ldw	r2,-4(fp)
 100790c:	10c00015 	stw	r3,0(r2)
}
 1007910:	0001883a 	nop
 1007914:	e037883a 	mov	sp,fp
 1007918:	df000017 	ldw	fp,0(sp)
 100791c:	dec00104 	addi	sp,sp,4
 1007920:	f800283a 	ret

01007924 <metal_init>:
#include <string.h>

#include <sys.h>

int metal_init(const struct metal_init_params *params)
{
 1007924:	defffc04 	addi	sp,sp,-16
 1007928:	dfc00315 	stw	ra,12(sp)
 100792c:	df000215 	stw	fp,8(sp)
 1007930:	df000204 	addi	fp,sp,8
 1007934:	e13fff15 	stw	r4,-4(fp)
	int error = 0;
 1007938:	e03ffe15 	stw	zero,-8(fp)

	memset(&_metal, 0, sizeof(_metal));
 100793c:	01800804 	movi	r6,32
 1007940:	000b883a 	mov	r5,zero
 1007944:	010060b4 	movhi	r4,386
 1007948:	213b4404 	addi	r4,r4,-4848
 100794c:	1008ea80 	call	1008ea8 <memset>

	_metal.common.log_handler   = params->log_handler;
 1007950:	e0bfff17 	ldw	r2,-4(fp)
 1007954:	10c00017 	ldw	r3,0(r2)
 1007958:	008060b4 	movhi	r2,386
 100795c:	10bb4404 	addi	r2,r2,-4848
 1007960:	10c00115 	stw	r3,4(r2)
	_metal.common.log_level     = params->log_level;
 1007964:	e0bfff17 	ldw	r2,-4(fp)
 1007968:	10c00117 	ldw	r3,4(r2)
 100796c:	008060b4 	movhi	r2,386
 1007970:	10bb4404 	addi	r2,r2,-4848
 1007974:	10c00015 	stw	r3,0(r2)

	metal_list_init(&_metal.common.bus_list);
 1007978:	010060b4 	movhi	r4,386
 100797c:	213b4604 	addi	r4,r4,-4840
 1007980:	10078e40 	call	10078e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 1007984:	010060b4 	movhi	r4,386
 1007988:	213b4804 	addi	r4,r4,-4832
 100798c:	10078e40 	call	10078e4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 1007990:	010060b4 	movhi	r4,386
 1007994:	213b4a04 	addi	r4,r4,-4824
 1007998:	10078e40 	call	10078e4 <metal_list_init>

	error = metal_sys_init(params);
 100799c:	e13fff17 	ldw	r4,-4(fp)
 10079a0:	1006c280 	call	1006c28 <metal_sys_init>
 10079a4:	e0bffe15 	stw	r2,-8(fp)
	if (error)
 10079a8:	e0bffe17 	ldw	r2,-8(fp)
 10079ac:	10000226 	beq	r2,zero,10079b8 <metal_init+0x94>
		return error;
 10079b0:	e0bffe17 	ldw	r2,-8(fp)
 10079b4:	00000106 	br	10079bc <metal_init+0x98>

	return error;
 10079b8:	e0bffe17 	ldw	r2,-8(fp)
}
 10079bc:	e037883a 	mov	sp,fp
 10079c0:	dfc00117 	ldw	ra,4(sp)
 10079c4:	df000017 	ldw	fp,0(sp)
 10079c8:	dec00204 	addi	sp,sp,8
 10079cc:	f800283a 	ret

010079d0 <metal_finish>:

void metal_finish(void)
{
 10079d0:	defffe04 	addi	sp,sp,-8
 10079d4:	dfc00115 	stw	ra,4(sp)
 10079d8:	df000015 	stw	fp,0(sp)
 10079dc:	d839883a 	mov	fp,sp
	metal_sys_finish();
 10079e0:	1006c600 	call	1006c60 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 10079e4:	01800804 	movi	r6,32
 10079e8:	000b883a 	mov	r5,zero
 10079ec:	010060b4 	movhi	r4,386
 10079f0:	213b4404 	addi	r4,r4,-4848
 10079f4:	1008ea80 	call	1008ea8 <memset>
}
 10079f8:	0001883a 	nop
 10079fc:	e037883a 	mov	sp,fp
 1007a00:	dfc00117 	ldw	ra,4(sp)
 1007a04:	df000017 	ldw	fp,0(sp)
 1007a08:	dec00204 	addi	sp,sp,8
 1007a0c:	f800283a 	ret

01007a10 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1007a10:	defffd04 	addi	sp,sp,-12
 1007a14:	df000215 	stw	fp,8(sp)
 1007a18:	df000204 	addi	fp,sp,8
 1007a1c:	e13ffe15 	stw	r4,-8(fp)
 1007a20:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007a24:	e0bffe17 	ldw	r2,-8(fp)
 1007a28:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1007a2c:	10bfffe0 	cmpeqi	r2,r2,-1
 1007a30:	1000091e 	bne	r2,zero,1007a58 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007a34:	e0bffe17 	ldw	r2,-8(fp)
 1007a38:	10800217 	ldw	r2,8(r2)
 1007a3c:	e0ffff17 	ldw	r3,-4(fp)
 1007a40:	1880052e 	bgeu	r3,r2,1007a58 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1007a44:	e0bffe17 	ldw	r2,-8(fp)
 1007a48:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1007a4c:	e0bfff17 	ldw	r2,-4(fp)
 1007a50:	1885883a 	add	r2,r3,r2
 1007a54:	00000106 	br	1007a5c <metal_io_virt+0x4c>
 1007a58:	0005883a 	mov	r2,zero
}
 1007a5c:	e037883a 	mov	sp,fp
 1007a60:	df000017 	ldw	fp,0(sp)
 1007a64:	dec00104 	addi	sp,sp,4
 1007a68:	f800283a 	ret

01007a6c <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 1007a6c:	defff204 	addi	sp,sp,-56
 1007a70:	dfc00d15 	stw	ra,52(sp)
 1007a74:	df000c15 	stw	fp,48(sp)
 1007a78:	df000c04 	addi	fp,sp,48
 1007a7c:	e13ffc15 	stw	r4,-16(fp)
 1007a80:	e17ffd15 	stw	r5,-12(fp)
 1007a84:	e1bffe15 	stw	r6,-8(fp)
 1007a88:	e1ffff15 	stw	r7,-4(fp)
	const struct metal_io_ops nops = {
 1007a8c:	e03ff415 	stw	zero,-48(fp)
 1007a90:	e03ff515 	stw	zero,-44(fp)
 1007a94:	e03ff615 	stw	zero,-40(fp)
 1007a98:	e03ff715 	stw	zero,-36(fp)
 1007a9c:	e03ff815 	stw	zero,-32(fp)
 1007aa0:	e03ff915 	stw	zero,-28(fp)
 1007aa4:	e03ffa15 	stw	zero,-24(fp)
 1007aa8:	e03ffb15 	stw	zero,-20(fp)
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
 1007aac:	e0bffc17 	ldw	r2,-16(fp)
 1007ab0:	e0fffd17 	ldw	r3,-12(fp)
 1007ab4:	10c00015 	stw	r3,0(r2)
	io->physmap = physmap;
 1007ab8:	e0bffc17 	ldw	r2,-16(fp)
 1007abc:	e0fffe17 	ldw	r3,-8(fp)
 1007ac0:	10c00115 	stw	r3,4(r2)
	io->size = size;
 1007ac4:	e0bffc17 	ldw	r2,-16(fp)
 1007ac8:	e0ffff17 	ldw	r3,-4(fp)
 1007acc:	10c00215 	stw	r3,8(r2)
	io->page_shift = page_shift;
 1007ad0:	e0bffc17 	ldw	r2,-16(fp)
 1007ad4:	e0c00217 	ldw	r3,8(fp)
 1007ad8:	10c00315 	stw	r3,12(r2)
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 1007adc:	e0800217 	ldw	r2,8(fp)
 1007ae0:	10800830 	cmpltui	r2,r2,32
 1007ae4:	1000041e 	bne	r2,zero,1007af8 <metal_io_init+0x8c>
		/* avoid overflow */
		io->page_mask = -1UL;
 1007ae8:	e0bffc17 	ldw	r2,-16(fp)
 1007aec:	00ffffc4 	movi	r3,-1
 1007af0:	10c00415 	stw	r3,16(r2)
 1007af4:	00000606 	br	1007b10 <metal_io_init+0xa4>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 1007af8:	00c00044 	movi	r3,1
 1007afc:	e0800217 	ldw	r2,8(fp)
 1007b00:	1884983a 	sll	r2,r3,r2
 1007b04:	10ffffc4 	addi	r3,r2,-1
 1007b08:	e0bffc17 	ldw	r2,-16(fp)
 1007b0c:	10c00415 	stw	r3,16(r2)
	io->mem_flags = mem_flags;
 1007b10:	e0bffc17 	ldw	r2,-16(fp)
 1007b14:	e0c00317 	ldw	r3,12(fp)
 1007b18:	10c00515 	stw	r3,20(r2)
	io->ops = ops ? *ops : nops;
 1007b1c:	e0800417 	ldw	r2,16(fp)
 1007b20:	10001326 	beq	r2,zero,1007b70 <metal_io_init+0x104>
 1007b24:	e0bffc17 	ldw	r2,-16(fp)
 1007b28:	e0c00417 	ldw	r3,16(fp)
 1007b2c:	19000017 	ldw	r4,0(r3)
 1007b30:	11000615 	stw	r4,24(r2)
 1007b34:	19000117 	ldw	r4,4(r3)
 1007b38:	11000715 	stw	r4,28(r2)
 1007b3c:	19000217 	ldw	r4,8(r3)
 1007b40:	11000815 	stw	r4,32(r2)
 1007b44:	19000317 	ldw	r4,12(r3)
 1007b48:	11000915 	stw	r4,36(r2)
 1007b4c:	19000417 	ldw	r4,16(r3)
 1007b50:	11000a15 	stw	r4,40(r2)
 1007b54:	19000517 	ldw	r4,20(r3)
 1007b58:	11000b15 	stw	r4,44(r2)
 1007b5c:	19000617 	ldw	r4,24(r3)
 1007b60:	11000c15 	stw	r4,48(r2)
 1007b64:	18c00717 	ldw	r3,28(r3)
 1007b68:	10c00d15 	stw	r3,52(r2)
 1007b6c:	00001106 	br	1007bb4 <metal_io_init+0x148>
 1007b70:	e0bffc17 	ldw	r2,-16(fp)
 1007b74:	e0fff417 	ldw	r3,-48(fp)
 1007b78:	10c00615 	stw	r3,24(r2)
 1007b7c:	e0fff517 	ldw	r3,-44(fp)
 1007b80:	10c00715 	stw	r3,28(r2)
 1007b84:	e0fff617 	ldw	r3,-40(fp)
 1007b88:	10c00815 	stw	r3,32(r2)
 1007b8c:	e0fff717 	ldw	r3,-36(fp)
 1007b90:	10c00915 	stw	r3,36(r2)
 1007b94:	e0fff817 	ldw	r3,-32(fp)
 1007b98:	10c00a15 	stw	r3,40(r2)
 1007b9c:	e0fff917 	ldw	r3,-28(fp)
 1007ba0:	10c00b15 	stw	r3,44(r2)
 1007ba4:	e0fffa17 	ldw	r3,-24(fp)
 1007ba8:	10c00c15 	stw	r3,48(r2)
 1007bac:	e0fffb17 	ldw	r3,-20(fp)
 1007bb0:	10c00d15 	stw	r3,52(r2)
	metal_sys_io_mem_map(io);
 1007bb4:	e13ffc17 	ldw	r4,-16(fp)
 1007bb8:	1006c940 	call	1006c94 <metal_sys_io_mem_map>
}
 1007bbc:	0001883a 	nop
 1007bc0:	e037883a 	mov	sp,fp
 1007bc4:	dfc00117 	ldw	ra,4(sp)
 1007bc8:	df000017 	ldw	fp,0(sp)
 1007bcc:	dec00204 	addi	sp,sp,8
 1007bd0:	f800283a 	ret

01007bd4 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 1007bd4:	defff604 	addi	sp,sp,-40
 1007bd8:	dfc00915 	stw	ra,36(sp)
 1007bdc:	df000815 	stw	fp,32(sp)
 1007be0:	df000804 	addi	fp,sp,32
 1007be4:	e13ffc15 	stw	r4,-16(fp)
 1007be8:	e17ffd15 	stw	r5,-12(fp)
 1007bec:	e1bffe15 	stw	r6,-8(fp)
 1007bf0:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007bf4:	e17ffd17 	ldw	r5,-12(fp)
 1007bf8:	e13ffc17 	ldw	r4,-16(fp)
 1007bfc:	1007a100 	call	1007a10 <metal_io_virt>
 1007c00:	e0bff915 	stw	r2,-28(fp)
	unsigned char *dest = dst;
 1007c04:	e0bffe17 	ldw	r2,-8(fp)
 1007c08:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 1007c0c:	e0bffc17 	ldw	r2,-16(fp)
 1007c10:	10800217 	ldw	r2,8(r2)
 1007c14:	e0fffd17 	ldw	r3,-12(fp)
 1007c18:	18800236 	bltu	r3,r2,1007c24 <metal_io_block_read+0x50>
		return -ERANGE;
 1007c1c:	00bff784 	movi	r2,-34
 1007c20:	00005406 	br	1007d74 <metal_io_block_read+0x1a0>
	if ((offset + len) > io->size)
 1007c24:	e0ffff17 	ldw	r3,-4(fp)
 1007c28:	e0bffd17 	ldw	r2,-12(fp)
 1007c2c:	1885883a 	add	r2,r3,r2
 1007c30:	e0fffc17 	ldw	r3,-16(fp)
 1007c34:	18c00217 	ldw	r3,8(r3)
 1007c38:	1880052e 	bgeu	r3,r2,1007c50 <metal_io_block_read+0x7c>
		len = io->size - offset;
 1007c3c:	e0bffc17 	ldw	r2,-16(fp)
 1007c40:	10c00217 	ldw	r3,8(r2)
 1007c44:	e0bffd17 	ldw	r2,-12(fp)
 1007c48:	1885c83a 	sub	r2,r3,r2
 1007c4c:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007c50:	e0bfff17 	ldw	r2,-4(fp)
 1007c54:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_read) {
 1007c58:	e0bffc17 	ldw	r2,-16(fp)
 1007c5c:	10800817 	ldw	r2,32(r2)
 1007c60:	10000b26 	beq	r2,zero,1007c90 <metal_io_block_read+0xbc>
		retlen = (*io->ops.block_read)(
 1007c64:	e0bffc17 	ldw	r2,-16(fp)
 1007c68:	10800817 	ldw	r2,32(r2)
 1007c6c:	e0ffff17 	ldw	r3,-4(fp)
 1007c70:	d8c00015 	stw	r3,0(sp)
 1007c74:	01c00144 	movi	r7,5
 1007c78:	e1bffe17 	ldw	r6,-8(fp)
 1007c7c:	e17ffd17 	ldw	r5,-12(fp)
 1007c80:	e13ffc17 	ldw	r4,-16(fp)
 1007c84:	103ee83a 	callr	r2
 1007c88:	e0bffb15 	stw	r2,-20(fp)
 1007c8c:	00003806 	br	1007d70 <metal_io_block_read+0x19c>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 1007c90:	0001b03a 	sync
		while ( len && (
 1007c94:	00000d06 	br	1007ccc <metal_io_block_read+0xf8>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 1007c98:	e0bff917 	ldw	r2,-28(fp)
 1007c9c:	10c00003 	ldbu	r3,0(r2)
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
 1007ca0:	e0bffa17 	ldw	r2,-24(fp)
 1007ca4:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
 1007ca8:	e0bffa17 	ldw	r2,-24(fp)
 1007cac:	10800044 	addi	r2,r2,1
 1007cb0:	e0bffa15 	stw	r2,-24(fp)
			ptr++;
 1007cb4:	e0bff917 	ldw	r2,-28(fp)
 1007cb8:	10800044 	addi	r2,r2,1
 1007cbc:	e0bff915 	stw	r2,-28(fp)
			len--;
 1007cc0:	e0bfff17 	ldw	r2,-4(fp)
 1007cc4:	10bfffc4 	addi	r2,r2,-1
 1007cc8:	e0bfff15 	stw	r2,-4(fp)
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 1007ccc:	e0bfff17 	ldw	r2,-4(fp)
 1007cd0:	10001426 	beq	r2,zero,1007d24 <metal_io_block_read+0x150>
			((uintptr_t)dest % sizeof(int)) ||
 1007cd4:	e0bffa17 	ldw	r2,-24(fp)
 1007cd8:	108000cc 	andi	r2,r2,3
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 1007cdc:	103fee1e 	bne	r2,zero,1007c98 <__alt_data_end+0xff007c98>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
 1007ce0:	e0bff917 	ldw	r2,-28(fp)
 1007ce4:	108000cc 	andi	r2,r2,3
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
 1007ce8:	103feb1e 	bne	r2,zero,1007c98 <__alt_data_end+0xff007c98>
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007cec:	00000d06 	br	1007d24 <metal_io_block_read+0x150>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 1007cf0:	e0bff917 	ldw	r2,-28(fp)
 1007cf4:	10c00017 	ldw	r3,0(r2)
 1007cf8:	e0bffa17 	ldw	r2,-24(fp)
 1007cfc:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007d00:	e0bffa17 	ldw	r2,-24(fp)
 1007d04:	10800104 	addi	r2,r2,4
 1007d08:	e0bffa15 	stw	r2,-24(fp)
					ptr += sizeof(int),
 1007d0c:	e0bff917 	ldw	r2,-28(fp)
 1007d10:	10800104 	addi	r2,r2,4
 1007d14:	e0bff915 	stw	r2,-28(fp)
					len -= sizeof(int))
 1007d18:	e0bfff17 	ldw	r2,-4(fp)
 1007d1c:	10bfff04 	addi	r2,r2,-4
 1007d20:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1007d24:	e0bfff17 	ldw	r2,-4(fp)
 1007d28:	10800108 	cmpgei	r2,r2,4
 1007d2c:	103ff01e 	bne	r2,zero,1007cf0 <__alt_data_end+0xff007cf0>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1007d30:	00000d06 	br	1007d68 <metal_io_block_read+0x194>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 1007d34:	e0bff917 	ldw	r2,-28(fp)
 1007d38:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
 1007d3c:	e0bffa17 	ldw	r2,-24(fp)
 1007d40:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1007d44:	e0bffa17 	ldw	r2,-24(fp)
 1007d48:	10800044 	addi	r2,r2,1
 1007d4c:	e0bffa15 	stw	r2,-24(fp)
 1007d50:	e0bff917 	ldw	r2,-28(fp)
 1007d54:	10800044 	addi	r2,r2,1
 1007d58:	e0bff915 	stw	r2,-28(fp)
 1007d5c:	e0bfff17 	ldw	r2,-4(fp)
 1007d60:	10bfffc4 	addi	r2,r2,-1
 1007d64:	e0bfff15 	stw	r2,-4(fp)
 1007d68:	e0bfff17 	ldw	r2,-4(fp)
 1007d6c:	103ff11e 	bne	r2,zero,1007d34 <__alt_data_end+0xff007d34>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
 1007d70:	e0bffb17 	ldw	r2,-20(fp)
}
 1007d74:	e037883a 	mov	sp,fp
 1007d78:	dfc00117 	ldw	ra,4(sp)
 1007d7c:	df000017 	ldw	fp,0(sp)
 1007d80:	dec00204 	addi	sp,sp,8
 1007d84:	f800283a 	ret

01007d88 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 1007d88:	defff604 	addi	sp,sp,-40
 1007d8c:	dfc00915 	stw	ra,36(sp)
 1007d90:	df000815 	stw	fp,32(sp)
 1007d94:	df000804 	addi	fp,sp,32
 1007d98:	e13ffc15 	stw	r4,-16(fp)
 1007d9c:	e17ffd15 	stw	r5,-12(fp)
 1007da0:	e1bffe15 	stw	r6,-8(fp)
 1007da4:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007da8:	e17ffd17 	ldw	r5,-12(fp)
 1007dac:	e13ffc17 	ldw	r4,-16(fp)
 1007db0:	1007a100 	call	1007a10 <metal_io_virt>
 1007db4:	e0bff915 	stw	r2,-28(fp)
	const unsigned char *source = src;
 1007db8:	e0bffe17 	ldw	r2,-8(fp)
 1007dbc:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 1007dc0:	e0bffc17 	ldw	r2,-16(fp)
 1007dc4:	10800217 	ldw	r2,8(r2)
 1007dc8:	e0fffd17 	ldw	r3,-12(fp)
 1007dcc:	18800236 	bltu	r3,r2,1007dd8 <metal_io_block_write+0x50>
		return -ERANGE;
 1007dd0:	00bff784 	movi	r2,-34
 1007dd4:	00005306 	br	1007f24 <metal_io_block_write+0x19c>
	if ((offset + len) > io->size)
 1007dd8:	e0ffff17 	ldw	r3,-4(fp)
 1007ddc:	e0bffd17 	ldw	r2,-12(fp)
 1007de0:	1885883a 	add	r2,r3,r2
 1007de4:	e0fffc17 	ldw	r3,-16(fp)
 1007de8:	18c00217 	ldw	r3,8(r3)
 1007dec:	1880052e 	bgeu	r3,r2,1007e04 <metal_io_block_write+0x7c>
		len = io->size - offset;
 1007df0:	e0bffc17 	ldw	r2,-16(fp)
 1007df4:	10c00217 	ldw	r3,8(r2)
 1007df8:	e0bffd17 	ldw	r2,-12(fp)
 1007dfc:	1885c83a 	sub	r2,r3,r2
 1007e00:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007e04:	e0bfff17 	ldw	r2,-4(fp)
 1007e08:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_write) {
 1007e0c:	e0bffc17 	ldw	r2,-16(fp)
 1007e10:	10800917 	ldw	r2,36(r2)
 1007e14:	10001826 	beq	r2,zero,1007e78 <metal_io_block_write+0xf0>
		retlen = (*io->ops.block_write)(
 1007e18:	e0bffc17 	ldw	r2,-16(fp)
 1007e1c:	10800917 	ldw	r2,36(r2)
 1007e20:	e0ffff17 	ldw	r3,-4(fp)
 1007e24:	d8c00015 	stw	r3,0(sp)
 1007e28:	01c00144 	movi	r7,5
 1007e2c:	e1bffe17 	ldw	r6,-8(fp)
 1007e30:	e17ffd17 	ldw	r5,-12(fp)
 1007e34:	e13ffc17 	ldw	r4,-16(fp)
 1007e38:	103ee83a 	callr	r2
 1007e3c:	e0bffb15 	stw	r2,-20(fp)
 1007e40:	00003706 	br	1007f20 <metal_io_block_write+0x198>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 1007e44:	e0bffa17 	ldw	r2,-24(fp)
 1007e48:	10c00003 	ldbu	r3,0(r2)
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
 1007e4c:	e0bff917 	ldw	r2,-28(fp)
 1007e50:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
 1007e54:	e0bff917 	ldw	r2,-28(fp)
 1007e58:	10800044 	addi	r2,r2,1
 1007e5c:	e0bff915 	stw	r2,-28(fp)
			source++;
 1007e60:	e0bffa17 	ldw	r2,-24(fp)
 1007e64:	10800044 	addi	r2,r2,1
 1007e68:	e0bffa15 	stw	r2,-24(fp)
			len--;
 1007e6c:	e0bfff17 	ldw	r2,-4(fp)
 1007e70:	10bfffc4 	addi	r2,r2,-1
 1007e74:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 1007e78:	e0bfff17 	ldw	r2,-4(fp)
 1007e7c:	10001426 	beq	r2,zero,1007ed0 <metal_io_block_write+0x148>
			((uintptr_t)ptr % sizeof(int)) ||
 1007e80:	e0bff917 	ldw	r2,-28(fp)
 1007e84:	108000cc 	andi	r2,r2,3
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 1007e88:	103fee1e 	bne	r2,zero,1007e44 <__alt_data_end+0xff007e44>
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
 1007e8c:	e0bffa17 	ldw	r2,-24(fp)
 1007e90:	108000cc 	andi	r2,r2,3
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
 1007e94:	103feb1e 	bne	r2,zero,1007e44 <__alt_data_end+0xff007e44>
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007e98:	00000d06 	br	1007ed0 <metal_io_block_write+0x148>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 1007e9c:	e0bffa17 	ldw	r2,-24(fp)
 1007ea0:	10c00017 	ldw	r3,0(r2)
 1007ea4:	e0bff917 	ldw	r2,-28(fp)
 1007ea8:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007eac:	e0bff917 	ldw	r2,-28(fp)
 1007eb0:	10800104 	addi	r2,r2,4
 1007eb4:	e0bff915 	stw	r2,-28(fp)
					source += sizeof(int),
 1007eb8:	e0bffa17 	ldw	r2,-24(fp)
 1007ebc:	10800104 	addi	r2,r2,4
 1007ec0:	e0bffa15 	stw	r2,-24(fp)
					len -= sizeof(int))
 1007ec4:	e0bfff17 	ldw	r2,-4(fp)
 1007ec8:	10bfff04 	addi	r2,r2,-4
 1007ecc:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1007ed0:	e0bfff17 	ldw	r2,-4(fp)
 1007ed4:	10800108 	cmpgei	r2,r2,4
 1007ed8:	103ff01e 	bne	r2,zero,1007e9c <__alt_data_end+0xff007e9c>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 1007edc:	00000d06 	br	1007f14 <metal_io_block_write+0x18c>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 1007ee0:	e0bffa17 	ldw	r2,-24(fp)
 1007ee4:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
 1007ee8:	e0bff917 	ldw	r2,-28(fp)
 1007eec:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 1007ef0:	e0bff917 	ldw	r2,-28(fp)
 1007ef4:	10800044 	addi	r2,r2,1
 1007ef8:	e0bff915 	stw	r2,-28(fp)
 1007efc:	e0bffa17 	ldw	r2,-24(fp)
 1007f00:	10800044 	addi	r2,r2,1
 1007f04:	e0bffa15 	stw	r2,-24(fp)
 1007f08:	e0bfff17 	ldw	r2,-4(fp)
 1007f0c:	10bfffc4 	addi	r2,r2,-1
 1007f10:	e0bfff15 	stw	r2,-4(fp)
 1007f14:	e0bfff17 	ldw	r2,-4(fp)
 1007f18:	103ff11e 	bne	r2,zero,1007ee0 <__alt_data_end+0xff007ee0>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
 1007f1c:	0001b03a 	sync
	}
	return retlen;
 1007f20:	e0bffb17 	ldw	r2,-20(fp)
}
 1007f24:	e037883a 	mov	sp,fp
 1007f28:	dfc00117 	ldw	ra,4(sp)
 1007f2c:	df000017 	ldw	fp,0(sp)
 1007f30:	dec00204 	addi	sp,sp,8
 1007f34:	f800283a 	ret

01007f38 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 1007f38:	defff504 	addi	sp,sp,-44
 1007f3c:	dfc00a15 	stw	ra,40(sp)
 1007f40:	df000915 	stw	fp,36(sp)
 1007f44:	df000904 	addi	fp,sp,36
 1007f48:	e13ffc15 	stw	r4,-16(fp)
 1007f4c:	e17ffd15 	stw	r5,-12(fp)
 1007f50:	3005883a 	mov	r2,r6
 1007f54:	e1ffff15 	stw	r7,-4(fp)
 1007f58:	e0bffe05 	stb	r2,-8(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1007f5c:	e17ffd17 	ldw	r5,-12(fp)
 1007f60:	e13ffc17 	ldw	r4,-16(fp)
 1007f64:	1007a100 	call	1007a10 <metal_io_virt>
 1007f68:	e0bff815 	stw	r2,-32(fp)
	int retlen = len;
 1007f6c:	e0bfff17 	ldw	r2,-4(fp)
 1007f70:	e0bffb15 	stw	r2,-20(fp)

	if (offset >= io->size)
 1007f74:	e0bffc17 	ldw	r2,-16(fp)
 1007f78:	10800217 	ldw	r2,8(r2)
 1007f7c:	e0fffd17 	ldw	r3,-12(fp)
 1007f80:	18800236 	bltu	r3,r2,1007f8c <metal_io_block_set+0x54>
		return -ERANGE;
 1007f84:	00bff784 	movi	r2,-34
 1007f88:	00005706 	br	10080e8 <metal_io_block_set+0x1b0>
	if ((offset + len) > io->size)
 1007f8c:	e0ffff17 	ldw	r3,-4(fp)
 1007f90:	e0bffd17 	ldw	r2,-12(fp)
 1007f94:	1885883a 	add	r2,r3,r2
 1007f98:	e0fffc17 	ldw	r3,-16(fp)
 1007f9c:	18c00217 	ldw	r3,8(r3)
 1007fa0:	1880052e 	bgeu	r3,r2,1007fb8 <metal_io_block_set+0x80>
		len = io->size - offset;
 1007fa4:	e0bffc17 	ldw	r2,-16(fp)
 1007fa8:	10c00217 	ldw	r3,8(r2)
 1007fac:	e0bffd17 	ldw	r2,-12(fp)
 1007fb0:	1885c83a 	sub	r2,r3,r2
 1007fb4:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1007fb8:	e0bfff17 	ldw	r2,-4(fp)
 1007fbc:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_set) {
 1007fc0:	e0bffc17 	ldw	r2,-16(fp)
 1007fc4:	10800a17 	ldw	r2,40(r2)
 1007fc8:	10000b26 	beq	r2,zero,1007ff8 <metal_io_block_set+0xc0>
		(*io->ops.block_set)(
 1007fcc:	e0bffc17 	ldw	r2,-16(fp)
 1007fd0:	10800a17 	ldw	r2,40(r2)
 1007fd4:	e13ffe03 	ldbu	r4,-8(fp)
 1007fd8:	e0ffff17 	ldw	r3,-4(fp)
 1007fdc:	d8c00015 	stw	r3,0(sp)
 1007fe0:	01c00144 	movi	r7,5
 1007fe4:	200d883a 	mov	r6,r4
 1007fe8:	e17ffd17 	ldw	r5,-12(fp)
 1007fec:	e13ffc17 	ldw	r4,-16(fp)
 1007ff0:	103ee83a 	callr	r2
 1007ff4:	00003b06 	br	10080e4 <metal_io_block_set+0x1ac>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 1007ff8:	e0bffe03 	ldbu	r2,-8(fp)
 1007ffc:	e0bff915 	stw	r2,-28(fp)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 1008000:	00800044 	movi	r2,1
 1008004:	e0bffa15 	stw	r2,-24(fp)
 1008008:	00000a06 	br	1008034 <metal_io_block_set+0xfc>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
 100800c:	e0fffe03 	ldbu	r3,-8(fp)
 1008010:	e0bffa17 	ldw	r2,-24(fp)
 1008014:	100490fa 	slli	r2,r2,3
 1008018:	1884983a 	sll	r2,r3,r2
 100801c:	e0fff917 	ldw	r3,-28(fp)
 1008020:	1884b03a 	or	r2,r3,r2
 1008024:	e0bff915 	stw	r2,-28(fp)
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 1008028:	e0bffa17 	ldw	r2,-24(fp)
 100802c:	10800044 	addi	r2,r2,1
 1008030:	e0bffa15 	stw	r2,-24(fp)
 1008034:	e0bffa17 	ldw	r2,-24(fp)
 1008038:	10800130 	cmpltui	r2,r2,4
 100803c:	103ff31e 	bne	r2,zero,100800c <__alt_data_end+0xff00800c>
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008040:	00000906 	br	1008068 <metal_io_block_set+0x130>
			*(unsigned char *)ptr = (unsigned char) value;
 1008044:	e0bff817 	ldw	r2,-32(fp)
 1008048:	e0fffe03 	ldbu	r3,-8(fp)
 100804c:	10c00005 	stb	r3,0(r2)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008050:	e0bff817 	ldw	r2,-32(fp)
 1008054:	10800044 	addi	r2,r2,1
 1008058:	e0bff815 	stw	r2,-32(fp)
 100805c:	e0bfff17 	ldw	r2,-4(fp)
 1008060:	10bfffc4 	addi	r2,r2,-1
 1008064:	e0bfff15 	stw	r2,-4(fp)
 1008068:	e0bfff17 	ldw	r2,-4(fp)
 100806c:	10000d26 	beq	r2,zero,10080a4 <metal_io_block_set+0x16c>
 1008070:	e0bff817 	ldw	r2,-32(fp)
 1008074:	108000cc 	andi	r2,r2,3
 1008078:	103ff21e 	bne	r2,zero,1008044 <__alt_data_end+0xff008044>
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100807c:	00000906 	br	10080a4 <metal_io_block_set+0x16c>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 1008080:	e0bff817 	ldw	r2,-32(fp)
 1008084:	e0fff917 	ldw	r3,-28(fp)
 1008088:	10c00015 	stw	r3,0(r2)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 100808c:	e0bff817 	ldw	r2,-32(fp)
 1008090:	10800104 	addi	r2,r2,4
 1008094:	e0bff815 	stw	r2,-32(fp)
						len -= sizeof(int))
 1008098:	e0bfff17 	ldw	r2,-4(fp)
 100809c:	10bfff04 	addi	r2,r2,-4
 10080a0:	e0bfff15 	stw	r2,-4(fp)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10080a4:	e0bfff17 	ldw	r2,-4(fp)
 10080a8:	10800108 	cmpgei	r2,r2,4
 10080ac:	103ff41e 	bne	r2,zero,1008080 <__alt_data_end+0xff008080>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10080b0:	00000906 	br	10080d8 <metal_io_block_set+0x1a0>
			*(unsigned char *)ptr = (unsigned char) value;
 10080b4:	e0bff817 	ldw	r2,-32(fp)
 10080b8:	e0fffe03 	ldbu	r3,-8(fp)
 10080bc:	10c00005 	stb	r3,0(r2)
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10080c0:	e0bff817 	ldw	r2,-32(fp)
 10080c4:	10800044 	addi	r2,r2,1
 10080c8:	e0bff815 	stw	r2,-32(fp)
 10080cc:	e0bfff17 	ldw	r2,-4(fp)
 10080d0:	10bfffc4 	addi	r2,r2,-1
 10080d4:	e0bfff15 	stw	r2,-4(fp)
 10080d8:	e0bfff17 	ldw	r2,-4(fp)
 10080dc:	103ff51e 	bne	r2,zero,10080b4 <__alt_data_end+0xff0080b4>
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
 10080e0:	0001b03a 	sync
	}
	return retlen;
 10080e4:	e0bffb17 	ldw	r2,-20(fp)
}
 10080e8:	e037883a 	mov	sp,fp
 10080ec:	dfc00117 	ldw	ra,4(sp)
 10080f0:	df000017 	ldw	fp,0(sp)
 10080f4:	dec00204 	addi	sp,sp,8
 10080f8:	f800283a 	ret

010080fc <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 10080fc:	defffd04 	addi	sp,sp,-12
 1008100:	df000215 	stw	fp,8(sp)
 1008104:	df000204 	addi	fp,sp,8
 1008108:	e13ffe15 	stw	r4,-8(fp)
 100810c:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008110:	e0bffe17 	ldw	r2,-8(fp)
 1008114:	10c00117 	ldw	r3,4(r2)
 1008118:	e0bfff17 	ldw	r2,-4(fp)
 100811c:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1008120:	e0bfff17 	ldw	r2,-4(fp)
 1008124:	e0fffe17 	ldw	r3,-8(fp)
 1008128:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 100812c:	e0bfff17 	ldw	r2,-4(fp)
 1008130:	10800017 	ldw	r2,0(r2)
 1008134:	e0ffff17 	ldw	r3,-4(fp)
 1008138:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 100813c:	e0bfff17 	ldw	r2,-4(fp)
 1008140:	10800117 	ldw	r2,4(r2)
 1008144:	e0ffff17 	ldw	r3,-4(fp)
 1008148:	10c00015 	stw	r3,0(r2)
}
 100814c:	0001883a 	nop
 1008150:	e037883a 	mov	sp,fp
 1008154:	df000017 	ldw	fp,0(sp)
 1008158:	dec00104 	addi	sp,sp,4
 100815c:	f800283a 	ret

01008160 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1008160:	defffc04 	addi	sp,sp,-16
 1008164:	dfc00315 	stw	ra,12(sp)
 1008168:	df000215 	stw	fp,8(sp)
 100816c:	df000204 	addi	fp,sp,8
 1008170:	e13ffe15 	stw	r4,-8(fp)
 1008174:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1008178:	e17fff17 	ldw	r5,-4(fp)
 100817c:	e13ffe17 	ldw	r4,-8(fp)
 1008180:	10080fc0 	call	10080fc <metal_list_add_before>
}
 1008184:	0001883a 	nop
 1008188:	e037883a 	mov	sp,fp
 100818c:	dfc00117 	ldw	ra,4(sp)
 1008190:	df000017 	ldw	fp,0(sp)
 1008194:	dec00204 	addi	sp,sp,8
 1008198:	f800283a 	ret

0100819c <metal_irq_allocate>:

/** List of registered IRQ controller */
static METAL_DECLARE_LIST(irq_cntrs);

static int metal_irq_allocate(int irq_base, int irq_num)
{
 100819c:	defff704 	addi	sp,sp,-36
 10081a0:	df000815 	stw	fp,32(sp)
 10081a4:	df000804 	addi	fp,sp,32
 10081a8:	e13ffe15 	stw	r4,-8(fp)
 10081ac:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;
	int irq_tocheck = irq_base, irq_end_tocheck;
 10081b0:	e0bffe17 	ldw	r2,-8(fp)
 10081b4:	e0bff915 	stw	r2,-28(fp)

	if (irq_num == 0) {
 10081b8:	e0bfff17 	ldw	r2,-4(fp)
 10081bc:	1000021e 	bne	r2,zero,10081c8 <metal_irq_allocate+0x2c>
		return METAL_IRQ_ANY;
 10081c0:	00bfffc4 	movi	r2,-1
 10081c4:	00002e06 	br	1008280 <metal_irq_allocate+0xe4>
	}
	if (irq_tocheck == METAL_IRQ_ANY) {
 10081c8:	e0bff917 	ldw	r2,-28(fp)
 10081cc:	10bfffd8 	cmpnei	r2,r2,-1
 10081d0:	1000011e 	bne	r2,zero,10081d8 <metal_irq_allocate+0x3c>
		irq_tocheck = 0;
 10081d4:	e03ff915 	stw	zero,-28(fp)
	}
	irq_end_tocheck = irq_tocheck + irq_num;
 10081d8:	e0fff917 	ldw	r3,-28(fp)
 10081dc:	e0bfff17 	ldw	r2,-4(fp)
 10081e0:	1885883a 	add	r2,r3,r2
 10081e4:	e0bffa15 	stw	r2,-24(fp)

	metal_list_for_each(&irq_cntrs, node) {
 10081e8:	d0a00717 	ldw	r2,-32740(gp)
 10081ec:	e0bff815 	stw	r2,-32(fp)
 10081f0:	00001f06 	br	1008270 <metal_irq_allocate+0xd4>
		int cntr_irq_base, cntr_irq_end;

		cntr = metal_container_of(node,
 10081f4:	e0bff817 	ldw	r2,-32(fp)
 10081f8:	10bffb04 	addi	r2,r2,-20
 10081fc:	e0bffb15 	stw	r2,-20(fp)
					  struct metal_irq_controller, node);
		cntr_irq_base = cntr->irq_base;
 1008200:	e0bffb17 	ldw	r2,-20(fp)
 1008204:	10800017 	ldw	r2,0(r2)
 1008208:	e0bffc15 	stw	r2,-16(fp)
		cntr_irq_end = cntr_irq_base + cntr->irq_num;
 100820c:	e0bffb17 	ldw	r2,-20(fp)
 1008210:	10c00117 	ldw	r3,4(r2)
 1008214:	e0bffc17 	ldw	r2,-16(fp)
 1008218:	1885883a 	add	r2,r3,r2
 100821c:	e0bffd15 	stw	r2,-12(fp)
		if (irq_tocheck < cntr_irq_end &&
 1008220:	e0fff917 	ldw	r3,-28(fp)
 1008224:	e0bffd17 	ldw	r2,-12(fp)
 1008228:	18800e0e 	bge	r3,r2,1008264 <metal_irq_allocate+0xc8>
 100822c:	e0bffa17 	ldw	r2,-24(fp)
 1008230:	e0fffc17 	ldw	r3,-16(fp)
 1008234:	18800b0e 	bge	r3,r2,1008264 <metal_irq_allocate+0xc8>
		    irq_end_tocheck > cntr_irq_base) {
			if (irq_base != METAL_IRQ_ANY) {
 1008238:	e0bffe17 	ldw	r2,-8(fp)
 100823c:	10bfffe0 	cmpeqi	r2,r2,-1
 1008240:	1000021e 	bne	r2,zero,100824c <metal_irq_allocate+0xb0>
				/* IRQ has been allocated */
				return METAL_IRQ_ANY;
 1008244:	00bfffc4 	movi	r2,-1
 1008248:	00000d06 	br	1008280 <metal_irq_allocate+0xe4>
			}
			irq_tocheck = cntr_irq_end;
 100824c:	e0bffd17 	ldw	r2,-12(fp)
 1008250:	e0bff915 	stw	r2,-28(fp)
			irq_end_tocheck = irq_tocheck + irq_num;
 1008254:	e0fff917 	ldw	r3,-28(fp)
 1008258:	e0bfff17 	ldw	r2,-4(fp)
 100825c:	1885883a 	add	r2,r3,r2
 1008260:	e0bffa15 	stw	r2,-24(fp)
	if (irq_tocheck == METAL_IRQ_ANY) {
		irq_tocheck = 0;
	}
	irq_end_tocheck = irq_tocheck + irq_num;

	metal_list_for_each(&irq_cntrs, node) {
 1008264:	e0bff817 	ldw	r2,-32(fp)
 1008268:	10800017 	ldw	r2,0(r2)
 100826c:	e0bff815 	stw	r2,-32(fp)
 1008270:	e0fff817 	ldw	r3,-32(fp)
 1008274:	d0a00704 	addi	r2,gp,-32740
 1008278:	18bfde1e 	bne	r3,r2,10081f4 <__alt_data_end+0xff0081f4>
			}
			irq_tocheck = cntr_irq_end;
			irq_end_tocheck = irq_tocheck + irq_num;
		}
	}
	return irq_tocheck;
 100827c:	e0bff917 	ldw	r2,-28(fp)
}
 1008280:	e037883a 	mov	sp,fp
 1008284:	df000017 	ldw	fp,0(sp)
 1008288:	dec00104 	addi	sp,sp,4
 100828c:	f800283a 	ret

01008290 <metal_irq_register_controller>:

int metal_irq_register_controller(struct metal_irq_controller *cntr)
{
 1008290:	defffb04 	addi	sp,sp,-20
 1008294:	dfc00415 	stw	ra,16(sp)
 1008298:	df000315 	stw	fp,12(sp)
 100829c:	df000304 	addi	fp,sp,12
 10082a0:	e13fff15 	stw	r4,-4(fp)
	int irq_base;
	struct metal_list *node;

	if (cntr == NULL) {
 10082a4:	e0bfff17 	ldw	r2,-4(fp)
 10082a8:	1000021e 	bne	r2,zero,10082b4 <metal_irq_register_controller+0x24>
		return -EINVAL;
 10082ac:	00bffa84 	movi	r2,-22
 10082b0:	00002506 	br	1008348 <metal_irq_register_controller+0xb8>
	}
	metal_list_for_each(&irq_cntrs, node) {
 10082b4:	d0a00717 	ldw	r2,-32740(gp)
 10082b8:	e0bffd15 	stw	r2,-12(fp)
 10082bc:	00000906 	br	10082e4 <metal_irq_register_controller+0x54>
		if (node == &cntr->node) {
 10082c0:	e0bfff17 	ldw	r2,-4(fp)
 10082c4:	10c00504 	addi	r3,r2,20
 10082c8:	e0bffd17 	ldw	r2,-12(fp)
 10082cc:	1880021e 	bne	r3,r2,10082d8 <metal_irq_register_controller+0x48>
			return 0;
 10082d0:	0005883a 	mov	r2,zero
 10082d4:	00001c06 	br	1008348 <metal_irq_register_controller+0xb8>
	struct metal_list *node;

	if (cntr == NULL) {
		return -EINVAL;
	}
	metal_list_for_each(&irq_cntrs, node) {
 10082d8:	e0bffd17 	ldw	r2,-12(fp)
 10082dc:	10800017 	ldw	r2,0(r2)
 10082e0:	e0bffd15 	stw	r2,-12(fp)
 10082e4:	e0fffd17 	ldw	r3,-12(fp)
 10082e8:	d0a00704 	addi	r2,gp,-32740
 10082ec:	18bff41e 	bne	r3,r2,10082c0 <__alt_data_end+0xff0082c0>
		}
	}

	/* Allocate IRQ numbers which are not yet used by any IRQ
	 * controllers.*/
	irq_base = metal_irq_allocate(cntr->irq_base , cntr->irq_num);
 10082f0:	e0bfff17 	ldw	r2,-4(fp)
 10082f4:	10c00017 	ldw	r3,0(r2)
 10082f8:	e0bfff17 	ldw	r2,-4(fp)
 10082fc:	10800117 	ldw	r2,4(r2)
 1008300:	100b883a 	mov	r5,r2
 1008304:	1809883a 	mov	r4,r3
 1008308:	100819c0 	call	100819c <metal_irq_allocate>
 100830c:	e0bffe15 	stw	r2,-8(fp)
	if (irq_base == METAL_IRQ_ANY) {
 1008310:	e0bffe17 	ldw	r2,-8(fp)
 1008314:	10bfffd8 	cmpnei	r2,r2,-1
 1008318:	1000021e 	bne	r2,zero,1008324 <metal_irq_register_controller+0x94>
		return -EINVAL;
 100831c:	00bffa84 	movi	r2,-22
 1008320:	00000906 	br	1008348 <metal_irq_register_controller+0xb8>
	}
	cntr->irq_base = irq_base;
 1008324:	e0bfff17 	ldw	r2,-4(fp)
 1008328:	e0fffe17 	ldw	r3,-8(fp)
 100832c:	10c00015 	stw	r3,0(r2)

	metal_list_add_tail(&irq_cntrs, &cntr->node);
 1008330:	e0bfff17 	ldw	r2,-4(fp)
 1008334:	10800504 	addi	r2,r2,20
 1008338:	100b883a 	mov	r5,r2
 100833c:	d1200704 	addi	r4,gp,-32740
 1008340:	10081600 	call	1008160 <metal_list_add_tail>
	return 0;
 1008344:	0005883a 	mov	r2,zero
}
 1008348:	e037883a 	mov	sp,fp
 100834c:	dfc00117 	ldw	ra,4(sp)
 1008350:	df000017 	ldw	fp,0(sp)
 1008354:	dec00204 	addi	sp,sp,8
 1008358:	f800283a 	ret

0100835c <metal_irq_get_controller>:

static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
 100835c:	defffa04 	addi	sp,sp,-24
 1008360:	df000515 	stw	fp,20(sp)
 1008364:	df000504 	addi	fp,sp,20
 1008368:	e13fff15 	stw	r4,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 100836c:	d0a00717 	ldw	r2,-32740(gp)
 1008370:	e0bffb15 	stw	r2,-20(fp)
 1008374:	00001606 	br	10083d0 <metal_irq_get_controller+0x74>
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
		       metal_container_of(node, struct metal_irq_controller,
 1008378:	e0bffb17 	ldw	r2,-20(fp)
 100837c:	10bffb04 	addi	r2,r2,-20
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
 1008380:	e0bffc15 	stw	r2,-16(fp)
		       metal_container_of(node, struct metal_irq_controller,
				          node);
		irq_base = cntr->irq_base;
 1008384:	e0bffc17 	ldw	r2,-16(fp)
 1008388:	10800017 	ldw	r2,0(r2)
 100838c:	e0bffd15 	stw	r2,-12(fp)
		irq_end = irq_base + cntr->irq_num;
 1008390:	e0bffc17 	ldw	r2,-16(fp)
 1008394:	10c00117 	ldw	r3,4(r2)
 1008398:	e0bffd17 	ldw	r2,-12(fp)
 100839c:	1885883a 	add	r2,r3,r2
 10083a0:	e0bffe15 	stw	r2,-8(fp)
		if (irq >= irq_base && irq < irq_end) {
 10083a4:	e0ffff17 	ldw	r3,-4(fp)
 10083a8:	e0bffd17 	ldw	r2,-12(fp)
 10083ac:	18800516 	blt	r3,r2,10083c4 <metal_irq_get_controller+0x68>
 10083b0:	e0ffff17 	ldw	r3,-4(fp)
 10083b4:	e0bffe17 	ldw	r2,-8(fp)
 10083b8:	1880020e 	bge	r3,r2,10083c4 <metal_irq_get_controller+0x68>
		       return cntr;
 10083bc:	e0bffc17 	ldw	r2,-16(fp)
 10083c0:	00000706 	br	10083e0 <metal_irq_get_controller+0x84>
static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 10083c4:	e0bffb17 	ldw	r2,-20(fp)
 10083c8:	10800017 	ldw	r2,0(r2)
 10083cc:	e0bffb15 	stw	r2,-20(fp)
 10083d0:	e0fffb17 	ldw	r3,-20(fp)
 10083d4:	d0a00704 	addi	r2,gp,-32740
 10083d8:	18bfe71e 	bne	r3,r2,1008378 <__alt_data_end+0xff008378>
		irq_end = irq_base + cntr->irq_num;
		if (irq >= irq_base && irq < irq_end) {
		       return cntr;
		}
	}
	return NULL;
 10083dc:	0005883a 	mov	r2,zero
}
 10083e0:	e037883a 	mov	sp,fp
 10083e4:	df000017 	ldw	fp,0(sp)
 10083e8:	dec00104 	addi	sp,sp,4
 10083ec:	f800283a 	ret

010083f0 <_metal_irq_set_enable>:

static void _metal_irq_set_enable(int irq, unsigned int state)
{
 10083f0:	defffb04 	addi	sp,sp,-20
 10083f4:	dfc00415 	stw	ra,16(sp)
 10083f8:	df000315 	stw	fp,12(sp)
 10083fc:	df000304 	addi	fp,sp,12
 1008400:	e13ffe15 	stw	r4,-8(fp)
 1008404:	e17fff15 	stw	r5,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
 1008408:	e13ffe17 	ldw	r4,-8(fp)
 100840c:	100835c0 	call	100835c <metal_irq_get_controller>
 1008410:	e0bffd15 	stw	r2,-12(fp)
	if (cntr == NULL) {
 1008414:	e0bffd17 	ldw	r2,-12(fp)
 1008418:	10000726 	beq	r2,zero,1008438 <_metal_irq_set_enable+0x48>
		return;
	}
	cntr->irq_set_enable(cntr, irq, state);
 100841c:	e0bffd17 	ldw	r2,-12(fp)
 1008420:	10800317 	ldw	r2,12(r2)
 1008424:	e1bfff17 	ldw	r6,-4(fp)
 1008428:	e17ffe17 	ldw	r5,-8(fp)
 100842c:	e13ffd17 	ldw	r4,-12(fp)
 1008430:	103ee83a 	callr	r2
 1008434:	00000106 	br	100843c <_metal_irq_set_enable+0x4c>
{
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
	if (cntr == NULL) {
		return;
 1008438:	0001883a 	nop
	}
	cntr->irq_set_enable(cntr, irq, state);
}
 100843c:	e037883a 	mov	sp,fp
 1008440:	dfc00117 	ldw	ra,4(sp)
 1008444:	df000017 	ldw	fp,0(sp)
 1008448:	dec00204 	addi	sp,sp,8
 100844c:	f800283a 	ret

01008450 <metal_irq_register>:

int metal_irq_register(int irq,
		       metal_irq_handler irq_handler,
		       void *arg)
{
 1008450:	defff904 	addi	sp,sp,-28
 1008454:	dfc00615 	stw	ra,24(sp)
 1008458:	df000515 	stw	fp,20(sp)
 100845c:	df000504 	addi	fp,sp,20
 1008460:	e13ffd15 	stw	r4,-12(fp)
 1008464:	e17ffe15 	stw	r5,-8(fp)
 1008468:	e1bfff15 	stw	r6,-4(fp)
	struct metal_irq_controller *cntr;
	struct metal_irq *irq_data;

	cntr = metal_irq_get_controller(irq);
 100846c:	e13ffd17 	ldw	r4,-12(fp)
 1008470:	100835c0 	call	100835c <metal_irq_get_controller>
 1008474:	e0bffb15 	stw	r2,-20(fp)
	if (cntr == NULL) {
 1008478:	e0bffb17 	ldw	r2,-20(fp)
 100847c:	1000021e 	bne	r2,zero,1008488 <metal_irq_register+0x38>
		return -EINVAL;
 1008480:	00bffa84 	movi	r2,-22
 1008484:	00002006 	br	1008508 <metal_irq_register+0xb8>
	}
	if (cntr->irq_register != NULL) {
 1008488:	e0bffb17 	ldw	r2,-20(fp)
 100848c:	10800417 	ldw	r2,16(r2)
 1008490:	10000826 	beq	r2,zero,10084b4 <metal_irq_register+0x64>
		return cntr->irq_register(cntr, irq, irq_handler, arg);
 1008494:	e0bffb17 	ldw	r2,-20(fp)
 1008498:	10800417 	ldw	r2,16(r2)
 100849c:	e1ffff17 	ldw	r7,-4(fp)
 10084a0:	e1bffe17 	ldw	r6,-8(fp)
 10084a4:	e17ffd17 	ldw	r5,-12(fp)
 10084a8:	e13ffb17 	ldw	r4,-20(fp)
 10084ac:	103ee83a 	callr	r2
 10084b0:	00001506 	br	1008508 <metal_irq_register+0xb8>
	}
	if (cntr->irqs == NULL) {
 10084b4:	e0bffb17 	ldw	r2,-20(fp)
 10084b8:	10800717 	ldw	r2,28(r2)
 10084bc:	1000021e 	bne	r2,zero,10084c8 <metal_irq_register+0x78>
		return -EINVAL;
 10084c0:	00bffa84 	movi	r2,-22
 10084c4:	00001006 	br	1008508 <metal_irq_register+0xb8>
	}
	irq_data = &cntr->irqs[irq - cntr->irq_base];
 10084c8:	e0bffb17 	ldw	r2,-20(fp)
 10084cc:	10c00717 	ldw	r3,28(r2)
 10084d0:	e0bffb17 	ldw	r2,-20(fp)
 10084d4:	10800017 	ldw	r2,0(r2)
 10084d8:	e13ffd17 	ldw	r4,-12(fp)
 10084dc:	2085c83a 	sub	r2,r4,r2
 10084e0:	100490fa 	slli	r2,r2,3
 10084e4:	1885883a 	add	r2,r3,r2
 10084e8:	e0bffc15 	stw	r2,-16(fp)
	irq_data->hd = irq_handler;
 10084ec:	e0bffc17 	ldw	r2,-16(fp)
 10084f0:	e0fffe17 	ldw	r3,-8(fp)
 10084f4:	10c00015 	stw	r3,0(r2)
	irq_data->arg = arg;
 10084f8:	e0bffc17 	ldw	r2,-16(fp)
 10084fc:	e0ffff17 	ldw	r3,-4(fp)
 1008500:	10c00115 	stw	r3,4(r2)
	return 0;
 1008504:	0005883a 	mov	r2,zero
}
 1008508:	e037883a 	mov	sp,fp
 100850c:	dfc00117 	ldw	ra,4(sp)
 1008510:	df000017 	ldw	fp,0(sp)
 1008514:	dec00204 	addi	sp,sp,8
 1008518:	f800283a 	ret

0100851c <metal_irq_enable>:

void metal_irq_enable(unsigned int vector)
{
 100851c:	defffd04 	addi	sp,sp,-12
 1008520:	dfc00215 	stw	ra,8(sp)
 1008524:	df000115 	stw	fp,4(sp)
 1008528:	df000104 	addi	fp,sp,4
 100852c:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_ENABLE);
 1008530:	e0bfff17 	ldw	r2,-4(fp)
 1008534:	01400044 	movi	r5,1
 1008538:	1009883a 	mov	r4,r2
 100853c:	10083f00 	call	10083f0 <_metal_irq_set_enable>
}
 1008540:	0001883a 	nop
 1008544:	e037883a 	mov	sp,fp
 1008548:	dfc00117 	ldw	ra,4(sp)
 100854c:	df000017 	ldw	fp,0(sp)
 1008550:	dec00204 	addi	sp,sp,8
 1008554:	f800283a 	ret

01008558 <metal_irq_disable>:

void metal_irq_disable(unsigned int vector)
{
 1008558:	defffd04 	addi	sp,sp,-12
 100855c:	dfc00215 	stw	ra,8(sp)
 1008560:	df000115 	stw	fp,4(sp)
 1008564:	df000104 	addi	fp,sp,4
 1008568:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_DISABLE);
 100856c:	e0bfff17 	ldw	r2,-4(fp)
 1008570:	000b883a 	mov	r5,zero
 1008574:	1009883a 	mov	r4,r2
 1008578:	10083f00 	call	10083f0 <_metal_irq_set_enable>
}
 100857c:	0001883a 	nop
 1008580:	e037883a 	mov	sp,fp
 1008584:	dfc00117 	ldw	ra,4(sp)
 1008588:	df000017 	ldw	fp,0(sp)
 100858c:	dec00204 	addi	sp,sp,8
 1008590:	f800283a 	ret

01008594 <metal_default_log_handler>:
#include <log.h>
#include <sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 1008594:	defffb04 	addi	sp,sp,-20
 1008598:	df000215 	stw	fp,8(sp)
 100859c:	df000204 	addi	fp,sp,8
 10085a0:	e13ffe15 	stw	r4,-8(fp)
 10085a4:	e17fff15 	stw	r5,-4(fp)
 10085a8:	e1800115 	stw	r6,4(fp)
 10085ac:	e1c00215 	stw	r7,8(fp)
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 10085b0:	0001883a 	nop
 10085b4:	e037883a 	mov	sp,fp
 10085b8:	df000017 	ldw	fp,0(sp)
 10085bc:	dec00304 	addi	sp,sp,12
 10085c0:	f800283a 	ret

010085c4 <metal_set_log_handler>:

void metal_set_log_handler(metal_log_handler handler)
{
 10085c4:	defffe04 	addi	sp,sp,-8
 10085c8:	df000115 	stw	fp,4(sp)
 10085cc:	df000104 	addi	fp,sp,4
 10085d0:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_handler = handler;
 10085d4:	008060b4 	movhi	r2,386
 10085d8:	10bb4404 	addi	r2,r2,-4848
 10085dc:	e0ffff17 	ldw	r3,-4(fp)
 10085e0:	10c00115 	stw	r3,4(r2)
}
 10085e4:	0001883a 	nop
 10085e8:	e037883a 	mov	sp,fp
 10085ec:	df000017 	ldw	fp,0(sp)
 10085f0:	dec00104 	addi	sp,sp,4
 10085f4:	f800283a 	ret

010085f8 <metal_get_log_handler>:

metal_log_handler metal_get_log_handler(void)
{
 10085f8:	deffff04 	addi	sp,sp,-4
 10085fc:	df000015 	stw	fp,0(sp)
 1008600:	d839883a 	mov	fp,sp
	return _metal.common.log_handler;
 1008604:	008060b4 	movhi	r2,386
 1008608:	10bb4404 	addi	r2,r2,-4848
 100860c:	10800117 	ldw	r2,4(r2)
}
 1008610:	e037883a 	mov	sp,fp
 1008614:	df000017 	ldw	fp,0(sp)
 1008618:	dec00104 	addi	sp,sp,4
 100861c:	f800283a 	ret

01008620 <metal_set_log_level>:

void metal_set_log_level(enum metal_log_level level)
{
 1008620:	defffe04 	addi	sp,sp,-8
 1008624:	df000115 	stw	fp,4(sp)
 1008628:	df000104 	addi	fp,sp,4
 100862c:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_level = level;
 1008630:	008060b4 	movhi	r2,386
 1008634:	10bb4404 	addi	r2,r2,-4848
 1008638:	e0ffff17 	ldw	r3,-4(fp)
 100863c:	10c00015 	stw	r3,0(r2)
}
 1008640:	0001883a 	nop
 1008644:	e037883a 	mov	sp,fp
 1008648:	df000017 	ldw	fp,0(sp)
 100864c:	dec00104 	addi	sp,sp,4
 1008650:	f800283a 	ret

01008654 <metal_get_log_level>:

enum metal_log_level metal_get_log_level(void)
{
 1008654:	deffff04 	addi	sp,sp,-4
 1008658:	df000015 	stw	fp,0(sp)
 100865c:	d839883a 	mov	fp,sp
	return _metal.common.log_level;
 1008660:	008060b4 	movhi	r2,386
 1008664:	10bb4404 	addi	r2,r2,-4848
 1008668:	10800017 	ldw	r2,0(r2)
}
 100866c:	e037883a 	mov	sp,fp
 1008670:	df000017 	ldw	fp,0(sp)
 1008674:	dec00104 	addi	sp,sp,4
 1008678:	f800283a 	ret

0100867c <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 100867c:	defffd04 	addi	sp,sp,-12
 1008680:	df000215 	stw	fp,8(sp)
 1008684:	df000204 	addi	fp,sp,8
 1008688:	e13ffe15 	stw	r4,-8(fp)
 100868c:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008690:	e0bffe17 	ldw	r2,-8(fp)
 1008694:	10c00117 	ldw	r3,4(r2)
 1008698:	e0bfff17 	ldw	r2,-4(fp)
 100869c:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 10086a0:	e0bfff17 	ldw	r2,-4(fp)
 10086a4:	e0fffe17 	ldw	r3,-8(fp)
 10086a8:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 10086ac:	e0bfff17 	ldw	r2,-4(fp)
 10086b0:	10800017 	ldw	r2,0(r2)
 10086b4:	e0ffff17 	ldw	r3,-4(fp)
 10086b8:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 10086bc:	e0bfff17 	ldw	r2,-4(fp)
 10086c0:	10800117 	ldw	r2,4(r2)
 10086c4:	e0ffff17 	ldw	r3,-4(fp)
 10086c8:	10c00015 	stw	r3,0(r2)
}
 10086cc:	0001883a 	nop
 10086d0:	e037883a 	mov	sp,fp
 10086d4:	df000017 	ldw	fp,0(sp)
 10086d8:	dec00104 	addi	sp,sp,4
 10086dc:	f800283a 	ret

010086e0 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 10086e0:	defffc04 	addi	sp,sp,-16
 10086e4:	dfc00315 	stw	ra,12(sp)
 10086e8:	df000215 	stw	fp,8(sp)
 10086ec:	df000204 	addi	fp,sp,8
 10086f0:	e13ffe15 	stw	r4,-8(fp)
 10086f4:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 10086f8:	e17fff17 	ldw	r5,-4(fp)
 10086fc:	e13ffe17 	ldw	r4,-8(fp)
 1008700:	100867c0 	call	100867c <metal_list_add_before>
}
 1008704:	0001883a 	nop
 1008708:	e037883a 	mov	sp,fp
 100870c:	dfc00117 	ldw	ra,4(sp)
 1008710:	df000017 	ldw	fp,0(sp)
 1008714:	dec00204 	addi	sp,sp,8
 1008718:	f800283a 	ret

0100871c <metal_io_region_size>:
 *
 * @param[in]	io	I/O region handle.
 * @return	Size of I/O region.
 */
static inline size_t metal_io_region_size(struct metal_io_region *io)
{
 100871c:	defffe04 	addi	sp,sp,-8
 1008720:	df000115 	stw	fp,4(sp)
 1008724:	df000104 	addi	fp,sp,4
 1008728:	e13fff15 	stw	r4,-4(fp)
	return io->size;
 100872c:	e0bfff17 	ldw	r2,-4(fp)
 1008730:	10800217 	ldw	r2,8(r2)
}
 1008734:	e037883a 	mov	sp,fp
 1008738:	df000017 	ldw	fp,0(sp)
 100873c:	dec00104 	addi	sp,sp,4
 1008740:	f800283a 	ret

01008744 <metal_shmem_register_generic>:
#include <shmem.h>
#include <sys.h>
#include <utilities.h>

int metal_shmem_register_generic(struct metal_generic_shmem *shmem)
{
 1008744:	defffd04 	addi	sp,sp,-12
 1008748:	dfc00215 	stw	ra,8(sp)
 100874c:	df000115 	stw	fp,4(sp)
 1008750:	df000104 	addi	fp,sp,4
 1008754:	e13fff15 	stw	r4,-4(fp)
	/* Make sure that we can be found. */
	metal_assert(shmem->name && strlen(shmem->name) != 0);
 1008758:	e0bfff17 	ldw	r2,-4(fp)
 100875c:	10800017 	ldw	r2,0(r2)
 1008760:	10000726 	beq	r2,zero,1008780 <metal_shmem_register_generic+0x3c>
 1008764:	e0bfff17 	ldw	r2,-4(fp)
 1008768:	10800017 	ldw	r2,0(r2)
 100876c:	10800003 	ldbu	r2,0(r2)
 1008770:	10803fcc 	andi	r2,r2,255
 1008774:	1080201c 	xori	r2,r2,128
 1008778:	10bfe004 	addi	r2,r2,-128
 100877c:	1000081e 	bne	r2,zero,10087a0 <metal_shmem_register_generic+0x5c>
 1008780:	01c040b4 	movhi	r7,258
 1008784:	39e9a104 	addi	r7,r7,-22908
 1008788:	018040b4 	movhi	r6,258
 100878c:	31a9b504 	addi	r6,r6,-22828
 1008790:	01400584 	movi	r5,22
 1008794:	010040b4 	movhi	r4,258
 1008798:	2129ab04 	addi	r4,r4,-22868
 100879c:	1008c880 	call	1008c88 <__assert_func>

	/* Statically registered shmem regions cannot have a destructor. */
	metal_assert(!shmem->io.ops.close);
 10087a0:	e0bfff17 	ldw	r2,-4(fp)
 10087a4:	10800c17 	ldw	r2,48(r2)
 10087a8:	10000826 	beq	r2,zero,10087cc <metal_shmem_register_generic+0x88>
 10087ac:	01c040b4 	movhi	r7,258
 10087b0:	39e9af04 	addi	r7,r7,-22852
 10087b4:	018040b4 	movhi	r6,258
 10087b8:	31a9b504 	addi	r6,r6,-22828
 10087bc:	01400644 	movi	r5,25
 10087c0:	010040b4 	movhi	r4,258
 10087c4:	2129ab04 	addi	r4,r4,-22868
 10087c8:	1008c880 	call	1008c88 <__assert_func>

	metal_list_add_tail(&_metal.common.generic_shmem_list,
 10087cc:	e0bfff17 	ldw	r2,-4(fp)
 10087d0:	10800f04 	addi	r2,r2,60
 10087d4:	100b883a 	mov	r5,r2
 10087d8:	010060b4 	movhi	r4,386
 10087dc:	213b4804 	addi	r4,r4,-4832
 10087e0:	10086e00 	call	10086e0 <metal_list_add_tail>
			    &shmem->node);
	return 0;
 10087e4:	0005883a 	mov	r2,zero
}
 10087e8:	e037883a 	mov	sp,fp
 10087ec:	dfc00117 	ldw	ra,4(sp)
 10087f0:	df000017 	ldw	fp,0(sp)
 10087f4:	dec00204 	addi	sp,sp,8
 10087f8:	f800283a 	ret

010087fc <metal_shmem_open_generic>:

int metal_shmem_open_generic(const char *name, size_t size,
			     struct metal_io_region **result)
{
 10087fc:	defff904 	addi	sp,sp,-28
 1008800:	dfc00615 	stw	ra,24(sp)
 1008804:	df000515 	stw	fp,20(sp)
 1008808:	df000504 	addi	fp,sp,20
 100880c:	e13ffd15 	stw	r4,-12(fp)
 1008810:	e17ffe15 	stw	r5,-8(fp)
 1008814:	e1bfff15 	stw	r6,-4(fp)
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008818:	008060b4 	movhi	r2,386
 100881c:	10bb4404 	addi	r2,r2,-4848
 1008820:	10800417 	ldw	r2,16(r2)
 1008824:	e0bffb15 	stw	r2,-20(fp)
 1008828:	00001c06 	br	100889c <metal_shmem_open_generic+0xa0>
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
 100882c:	e0bffb17 	ldw	r2,-20(fp)
 1008830:	10bff104 	addi	r2,r2,-60
 1008834:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(shmem->name, name) != 0)
 1008838:	e0bffc17 	ldw	r2,-16(fp)
 100883c:	10800017 	ldw	r2,0(r2)
 1008840:	e17ffd17 	ldw	r5,-12(fp)
 1008844:	1009883a 	mov	r4,r2
 1008848:	10092600 	call	1009260 <strcmp>
 100884c:	10000d1e 	bne	r2,zero,1008884 <metal_shmem_open_generic+0x88>
			continue;
		if (size > metal_io_region_size(&shmem->io))
 1008850:	e0bffc17 	ldw	r2,-16(fp)
 1008854:	10800104 	addi	r2,r2,4
 1008858:	1009883a 	mov	r4,r2
 100885c:	100871c0 	call	100871c <metal_io_region_size>
 1008860:	1007883a 	mov	r3,r2
 1008864:	e0bffe17 	ldw	r2,-8(fp)
 1008868:	18800836 	bltu	r3,r2,100888c <metal_shmem_open_generic+0x90>
			continue;
		*result = &shmem->io;
 100886c:	e0bffc17 	ldw	r2,-16(fp)
 1008870:	10c00104 	addi	r3,r2,4
 1008874:	e0bfff17 	ldw	r2,-4(fp)
 1008878:	10c00015 	stw	r3,0(r2)
		return 0;
 100887c:	0005883a 	mov	r2,zero
 1008880:	00000b06 	br	10088b0 <metal_shmem_open_generic+0xb4>
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
		if (strcmp(shmem->name, name) != 0)
			continue;
 1008884:	0001883a 	nop
 1008888:	00000106 	br	1008890 <metal_shmem_open_generic+0x94>
		if (size > metal_io_region_size(&shmem->io))
			continue;
 100888c:	0001883a 	nop
			     struct metal_io_region **result)
{
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008890:	e0bffb17 	ldw	r2,-20(fp)
 1008894:	10800017 	ldw	r2,0(r2)
 1008898:	e0bffb15 	stw	r2,-20(fp)
 100889c:	e0fffb17 	ldw	r3,-20(fp)
 10088a0:	008060b4 	movhi	r2,386
 10088a4:	10bb4804 	addi	r2,r2,-4832
 10088a8:	18bfe01e 	bne	r3,r2,100882c <__alt_data_end+0xff00882c>
			continue;
		*result = &shmem->io;
		return 0;
	}

	return -ENOENT;
 10088ac:	00bfff84 	movi	r2,-2
}
 10088b0:	e037883a 	mov	sp,fp
 10088b4:	dfc00117 	ldw	ra,4(sp)
 10088b8:	df000017 	ldw	fp,0(sp)
 10088bc:	dec00204 	addi	sp,sp,8
 10088c0:	f800283a 	ret

010088c4 <metal_irq_handle>:
 * @param[in] irq IRQ id which will be passed to handler
 * @return IRQ handler status
 */
static inline
int metal_irq_handle(struct metal_irq *irq_data, int irq)
{
 10088c4:	defffc04 	addi	sp,sp,-16
 10088c8:	dfc00315 	stw	ra,12(sp)
 10088cc:	df000215 	stw	fp,8(sp)
 10088d0:	df000204 	addi	fp,sp,8
 10088d4:	e13ffe15 	stw	r4,-8(fp)
 10088d8:	e17fff15 	stw	r5,-4(fp)
	if (irq_data != NULL && irq_data->hd != NULL) {
 10088dc:	e0bffe17 	ldw	r2,-8(fp)
 10088e0:	10000b26 	beq	r2,zero,1008910 <metal_irq_handle+0x4c>
 10088e4:	e0bffe17 	ldw	r2,-8(fp)
 10088e8:	10800017 	ldw	r2,0(r2)
 10088ec:	10000826 	beq	r2,zero,1008910 <metal_irq_handle+0x4c>
		return irq_data->hd(irq, irq_data->arg);
 10088f0:	e0bffe17 	ldw	r2,-8(fp)
 10088f4:	10800017 	ldw	r2,0(r2)
 10088f8:	e0fffe17 	ldw	r3,-8(fp)
 10088fc:	18c00117 	ldw	r3,4(r3)
 1008900:	180b883a 	mov	r5,r3
 1008904:	e13fff17 	ldw	r4,-4(fp)
 1008908:	103ee83a 	callr	r2
 100890c:	00000106 	br	1008914 <metal_irq_handle+0x50>
	} else {
		return METAL_IRQ_NOT_HANDLED;
 1008910:	0005883a 	mov	r2,zero
	}
}
 1008914:	e037883a 	mov	sp,fp
 1008918:	dfc00117 	ldw	ra,4(sp)
 100891c:	df000017 	ldw	fp,0(sp)
 1008920:	dec00204 	addi	sp,sp,8
 1008924:	f800283a 	ret

01008928 <metal_softirq_set_enable>:
static int metal_softirq_avail = 0;
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
 1008928:	defffc04 	addi	sp,sp,-16
 100892c:	df000315 	stw	fp,12(sp)
 1008930:	df000304 	addi	fp,sp,12
 1008934:	e13ffd15 	stw	r4,-12(fp)
 1008938:	e17ffe15 	stw	r5,-8(fp)
 100893c:	e1bfff15 	stw	r6,-4(fp)
	if (irq < cntr->irq_base ||
 1008940:	e0bffd17 	ldw	r2,-12(fp)
 1008944:	10800017 	ldw	r2,0(r2)
 1008948:	e0fffe17 	ldw	r3,-8(fp)
 100894c:	18801e16 	blt	r3,r2,10089c8 <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008950:	e0bffd17 	ldw	r2,-12(fp)
 1008954:	10c00017 	ldw	r3,0(r2)
 1008958:	e0bffd17 	ldw	r2,-12(fp)
 100895c:	10800117 	ldw	r2,4(r2)
 1008960:	1885883a 	add	r2,r3,r2
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
 1008964:	e0fffe17 	ldw	r3,-8(fp)
 1008968:	1880170e 	bge	r3,r2,10089c8 <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 100896c:	e0bffd17 	ldw	r2,-12(fp)
 1008970:	10800017 	ldw	r2,0(r2)
 1008974:	e0fffe17 	ldw	r3,-8(fp)
 1008978:	1885c83a 	sub	r2,r3,r2
 100897c:	e0bffe15 	stw	r2,-8(fp)
	if (enable ==  METAL_IRQ_ENABLE) {
 1008980:	e0bfff17 	ldw	r2,-4(fp)
 1008984:	10800058 	cmpnei	r2,r2,1
 1008988:	1000081e 	bne	r2,zero,10089ac <metal_softirq_set_enable+0x84>
		atomic_store(&metal_softirq_enabled[irq], 1);
 100898c:	008060b4 	movhi	r2,386
 1008990:	10bb2a04 	addi	r2,r2,-4952
 1008994:	e0fffe17 	ldw	r3,-8(fp)
 1008998:	10c5883a 	add	r2,r2,r3
 100899c:	00c00044 	movi	r3,1
 10089a0:	10c00005 	stb	r3,0(r2)
 10089a4:	0001b03a 	sync
 10089a8:	00000806 	br	10089cc <metal_softirq_set_enable+0xa4>
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
 10089ac:	008060b4 	movhi	r2,386
 10089b0:	10bb2a04 	addi	r2,r2,-4952
 10089b4:	e0fffe17 	ldw	r3,-8(fp)
 10089b8:	10c5883a 	add	r2,r2,r3
 10089bc:	10000005 	stb	zero,0(r2)
 10089c0:	0001b03a 	sync
 10089c4:	00000106 	br	10089cc <metal_softirq_set_enable+0xa4>
static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 10089c8:	0001883a 	nop
	if (enable ==  METAL_IRQ_ENABLE) {
		atomic_store(&metal_softirq_enabled[irq], 1);
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
	}
}
 10089cc:	e037883a 	mov	sp,fp
 10089d0:	df000017 	ldw	fp,0(sp)
 10089d4:	dec00104 	addi	sp,sp,4
 10089d8:	f800283a 	ret

010089dc <metal_softirq_set>:
				    NULL,
				    metal_softirq_set_enable, NULL,
				    metal_softirqs)

void metal_softirq_set(int irq)
{
 10089dc:	defffd04 	addi	sp,sp,-12
 10089e0:	df000215 	stw	fp,8(sp)
 10089e4:	df000204 	addi	fp,sp,8
 10089e8:	e13fff15 	stw	r4,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;
 10089ec:	008040b4 	movhi	r2,258
 10089f0:	10ac8004 	addi	r2,r2,-19968
 10089f4:	e0bffe15 	stw	r2,-8(fp)

	if (irq < cntr->irq_base ||
 10089f8:	e0bffe17 	ldw	r2,-8(fp)
 10089fc:	10800017 	ldw	r2,0(r2)
 1008a00:	e0ffff17 	ldw	r3,-4(fp)
 1008a04:	18801416 	blt	r3,r2,1008a58 <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008a08:	e0bffe17 	ldw	r2,-8(fp)
 1008a0c:	10c00017 	ldw	r3,0(r2)
 1008a10:	e0bffe17 	ldw	r2,-8(fp)
 1008a14:	10800117 	ldw	r2,4(r2)
 1008a18:	1885883a 	add	r2,r3,r2
{
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
 1008a1c:	e0ffff17 	ldw	r3,-4(fp)
 1008a20:	18800d0e 	bge	r3,r2,1008a58 <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 1008a24:	e0bffe17 	ldw	r2,-8(fp)
 1008a28:	10800017 	ldw	r2,0(r2)
 1008a2c:	e0ffff17 	ldw	r3,-4(fp)
 1008a30:	1885c83a 	sub	r2,r3,r2
 1008a34:	e0bfff15 	stw	r2,-4(fp)
	atomic_store(&metal_softirq_pending[irq], 1);
 1008a38:	008060b4 	movhi	r2,386
 1008a3c:	10bb1a04 	addi	r2,r2,-5016
 1008a40:	e0ffff17 	ldw	r3,-4(fp)
 1008a44:	10c5883a 	add	r2,r2,r3
 1008a48:	00c00044 	movi	r3,1
 1008a4c:	10c00005 	stb	r3,0(r2)
 1008a50:	0001b03a 	sync
 1008a54:	00000106 	br	1008a5c <metal_softirq_set+0x80>

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 1008a58:	0001883a 	nop
	}

	irq -= cntr->irq_base;
	atomic_store(&metal_softirq_pending[irq], 1);
}
 1008a5c:	e037883a 	mov	sp,fp
 1008a60:	df000017 	ldw	fp,0(sp)
 1008a64:	dec00104 	addi	sp,sp,4
 1008a68:	f800283a 	ret

01008a6c <metal_softirq_init>:

int metal_softirq_init()
{
 1008a6c:	defffe04 	addi	sp,sp,-8
 1008a70:	dfc00115 	stw	ra,4(sp)
 1008a74:	df000015 	stw	fp,0(sp)
 1008a78:	d839883a 	mov	fp,sp
	return metal_irq_register_controller(&metal_softirq_cntr);
 1008a7c:	010040b4 	movhi	r4,258
 1008a80:	212c8004 	addi	r4,r4,-19968
 1008a84:	10082900 	call	1008290 <metal_irq_register_controller>
}
 1008a88:	e037883a 	mov	sp,fp
 1008a8c:	dfc00117 	ldw	ra,4(sp)
 1008a90:	df000017 	ldw	fp,0(sp)
 1008a94:	dec00204 	addi	sp,sp,8
 1008a98:	f800283a 	ret

01008a9c <metal_softirq_allocate>:

int metal_softirq_allocate(int num)
{
 1008a9c:	defffc04 	addi	sp,sp,-16
 1008aa0:	dfc00315 	stw	ra,12(sp)
 1008aa4:	df000215 	stw	fp,8(sp)
 1008aa8:	df000204 	addi	fp,sp,8
 1008aac:	e13fff15 	stw	r4,-4(fp)
	int irq_base;

	if ((metal_softirq_avail + num) >= metal_softirq_num) {
 1008ab0:	d0e72217 	ldw	r3,-25464(gp)
 1008ab4:	e0bfff17 	ldw	r2,-4(fp)
 1008ab8:	1887883a 	add	r3,r3,r2
 1008abc:	00801004 	movi	r2,64
 1008ac0:	18801316 	blt	r3,r2,1008b10 <metal_softirq_allocate+0x74>
		metal_log(METAL_LOG_ERROR, "No %d available soft irqs.\r\n",
 1008ac4:	008060b4 	movhi	r2,386
 1008ac8:	10bb4404 	addi	r2,r2,-4848
 1008acc:	10800017 	ldw	r2,0(r2)
 1008ad0:	108000f0 	cmpltui	r2,r2,3
 1008ad4:	10000c1e 	bne	r2,zero,1008b08 <metal_softirq_allocate+0x6c>
 1008ad8:	008060b4 	movhi	r2,386
 1008adc:	10bb4404 	addi	r2,r2,-4848
 1008ae0:	10800117 	ldw	r2,4(r2)
 1008ae4:	10000826 	beq	r2,zero,1008b08 <metal_softirq_allocate+0x6c>
 1008ae8:	008060b4 	movhi	r2,386
 1008aec:	10bb4404 	addi	r2,r2,-4848
 1008af0:	10800117 	ldw	r2,4(r2)
 1008af4:	e1bfff17 	ldw	r6,-4(fp)
 1008af8:	014040b4 	movhi	r5,258
 1008afc:	2969bd04 	addi	r5,r5,-22796
 1008b00:	010000c4 	movi	r4,3
 1008b04:	103ee83a 	callr	r2
			  num);
		return -EINVAL;
 1008b08:	00bffa84 	movi	r2,-22
 1008b0c:	00000d06 	br	1008b44 <metal_softirq_allocate+0xa8>
	}
	irq_base = metal_softirq_avail;
 1008b10:	d0a72217 	ldw	r2,-25464(gp)
 1008b14:	e0bffe15 	stw	r2,-8(fp)
	irq_base += metal_softirq_cntr.irq_base;
 1008b18:	008040b4 	movhi	r2,258
 1008b1c:	10ac8004 	addi	r2,r2,-19968
 1008b20:	10800017 	ldw	r2,0(r2)
 1008b24:	e0fffe17 	ldw	r3,-8(fp)
 1008b28:	1885883a 	add	r2,r3,r2
 1008b2c:	e0bffe15 	stw	r2,-8(fp)
	metal_softirq_avail += num;
 1008b30:	d0e72217 	ldw	r3,-25464(gp)
 1008b34:	e0bfff17 	ldw	r2,-4(fp)
 1008b38:	1885883a 	add	r2,r3,r2
 1008b3c:	d0a72215 	stw	r2,-25464(gp)
	return irq_base;
 1008b40:	e0bffe17 	ldw	r2,-8(fp)
}
 1008b44:	e037883a 	mov	sp,fp
 1008b48:	dfc00117 	ldw	ra,4(sp)
 1008b4c:	df000017 	ldw	fp,0(sp)
 1008b50:	dec00204 	addi	sp,sp,8
 1008b54:	f800283a 	ret

01008b58 <metal_softirq_dispatch>:

void metal_softirq_dispatch()
{
 1008b58:	defff804 	addi	sp,sp,-32
 1008b5c:	dfc00715 	stw	ra,28(sp)
 1008b60:	df000615 	stw	fp,24(sp)
 1008b64:	df000604 	addi	fp,sp,24
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 1008b68:	e03ffa15 	stw	zero,-24(fp)
 1008b6c:	00003d06 	br	1008c64 <metal_softirq_dispatch+0x10c>
		struct metal_irq *irq;
		char is_pending = 1;
 1008b70:	00800044 	movi	r2,1
 1008b74:	e0bfff05 	stb	r2,-4(fp)

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
 1008b78:	0001b03a 	sync
 1008b7c:	008060b4 	movhi	r2,386
 1008b80:	10bb2a04 	addi	r2,r2,-4952
 1008b84:	e0fffa17 	ldw	r3,-24(fp)
 1008b88:	10c5883a 	add	r2,r2,r3
 1008b8c:	10800003 	ldbu	r2,0(r2)
 1008b90:	10803fcc 	andi	r2,r2,255
 1008b94:	1080201c 	xori	r2,r2,128
 1008b98:	10bfe004 	addi	r2,r2,-128
 1008b9c:	10002e26 	beq	r2,zero,1008c58 <metal_softirq_dispatch+0x100>
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
 1008ba0:	e0fffa17 	ldw	r3,-24(fp)
 1008ba4:	008060b4 	movhi	r2,386
 1008ba8:	10bb1a04 	addi	r2,r2,-5016
 1008bac:	1885883a 	add	r2,r3,r2
 1008bb0:	e0bffb15 	stw	r2,-20(fp)
 1008bb4:	e0bfff04 	addi	r2,fp,-4
 1008bb8:	e0bffc15 	stw	r2,-16(fp)
 1008bbc:	e0bffc17 	ldw	r2,-16(fp)
 1008bc0:	10800003 	ldbu	r2,0(r2)
 1008bc4:	e0bffd05 	stb	r2,-12(fp)
 1008bc8:	e0bffb17 	ldw	r2,-20(fp)
 1008bcc:	10800003 	ldbu	r2,0(r2)
 1008bd0:	10c03fcc 	andi	r3,r2,255
 1008bd4:	18c0201c 	xori	r3,r3,128
 1008bd8:	18ffe004 	addi	r3,r3,-128
 1008bdc:	e0bffd07 	ldb	r2,-12(fp)
 1008be0:	1880041e 	bne	r3,r2,1008bf4 <metal_softirq_dispatch+0x9c>
 1008be4:	e0bffb17 	ldw	r2,-20(fp)
 1008be8:	10000005 	stb	zero,0(r2)
 1008bec:	0005883a 	mov	r2,zero
 1008bf0:	00000206 	br	1008bfc <metal_softirq_dispatch+0xa4>
 1008bf4:	e0bffb17 	ldw	r2,-20(fp)
 1008bf8:	10800003 	ldbu	r2,0(r2)
 1008bfc:	e0bffd45 	stb	r2,-11(fp)
 1008c00:	e0bffc17 	ldw	r2,-16(fp)
 1008c04:	e0fffd43 	ldbu	r3,-11(fp)
 1008c08:	10c00005 	stb	r3,0(r2)
 1008c0c:	e0fffd47 	ldb	r3,-11(fp)
 1008c10:	e0bffd07 	ldb	r2,-12(fp)
 1008c14:	1885003a 	cmpeq	r2,r3,r2
 1008c18:	10803fcc 	andi	r2,r2,255

	for (i = 0; i < metal_softirq_num; i++) {
		struct metal_irq *irq;
		char is_pending = 1;

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
 1008c1c:	10000e26 	beq	r2,zero,1008c58 <metal_softirq_dispatch+0x100>
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
						   &is_pending, 0)) {
			irq = &metal_softirqs[i];
 1008c20:	e0bffa17 	ldw	r2,-24(fp)
 1008c24:	100690fa 	slli	r3,r2,3
 1008c28:	008060b4 	movhi	r2,386
 1008c2c:	10ba9a04 	addi	r2,r2,-5528
 1008c30:	1885883a 	add	r2,r3,r2
 1008c34:	e0bffe15 	stw	r2,-8(fp)
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
 1008c38:	008040b4 	movhi	r2,258
 1008c3c:	10ac8004 	addi	r2,r2,-19968
 1008c40:	10c00017 	ldw	r3,0(r2)

		if (atomic_load(&metal_softirq_enabled[i]) != 0 &&
		    atomic_compare_exchange_strong(&metal_softirq_pending[i],
						   &is_pending, 0)) {
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
 1008c44:	e0bffa17 	ldw	r2,-24(fp)
 1008c48:	1885883a 	add	r2,r3,r2
 1008c4c:	100b883a 	mov	r5,r2
 1008c50:	e13ffe17 	ldw	r4,-8(fp)
 1008c54:	10088c40 	call	10088c4 <metal_irq_handle>

void metal_softirq_dispatch()
{
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 1008c58:	e0bffa17 	ldw	r2,-24(fp)
 1008c5c:	10800044 	addi	r2,r2,1
 1008c60:	e0bffa15 	stw	r2,-24(fp)
 1008c64:	00801004 	movi	r2,64
 1008c68:	e0fffa17 	ldw	r3,-24(fp)
 1008c6c:	18bfc016 	blt	r3,r2,1008b70 <__alt_data_end+0xff008b70>
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
		}
	}
}
 1008c70:	0001883a 	nop
 1008c74:	e037883a 	mov	sp,fp
 1008c78:	dfc00117 	ldw	ra,4(sp)
 1008c7c:	df000017 	ldw	fp,0(sp)
 1008c80:	dec00204 	addi	sp,sp,8
 1008c84:	f800283a 	ret

01008c88 <__assert_func>:
 1008c88:	008040b4 	movhi	r2,258
 1008c8c:	10b34204 	addi	r2,r2,-13048
 1008c90:	10800017 	ldw	r2,0(r2)
 1008c94:	defffc04 	addi	sp,sp,-16
 1008c98:	dfc00315 	stw	ra,12(sp)
 1008c9c:	2015883a 	mov	r10,r4
 1008ca0:	2811883a 	mov	r8,r5
 1008ca4:	3813883a 	mov	r9,r7
 1008ca8:	11000317 	ldw	r4,12(r2)
 1008cac:	30000c26 	beq	r6,zero,1008ce0 <__assert_func+0x58>
 1008cb0:	00c040b4 	movhi	r3,258
 1008cb4:	18e9c504 	addi	r3,r3,-22764
 1008cb8:	3005883a 	mov	r2,r6
 1008cbc:	014040b4 	movhi	r5,258
 1008cc0:	2969c904 	addi	r5,r5,-22748
 1008cc4:	500f883a 	mov	r7,r10
 1008cc8:	480d883a 	mov	r6,r9
 1008ccc:	d8c00115 	stw	r3,4(sp)
 1008cd0:	da000015 	stw	r8,0(sp)
 1008cd4:	d8800215 	stw	r2,8(sp)
 1008cd8:	1008d240 	call	1008d24 <fiprintf>
 1008cdc:	100bc440 	call	100bc44 <abort>
 1008ce0:	00c040b4 	movhi	r3,258
 1008ce4:	18e9c804 	addi	r3,r3,-22752
 1008ce8:	1805883a 	mov	r2,r3
 1008cec:	003ff306 	br	1008cbc <__alt_data_end+0xff008cbc>

01008cf0 <__assert>:
 1008cf0:	deffff04 	addi	sp,sp,-4
 1008cf4:	300f883a 	mov	r7,r6
 1008cf8:	000d883a 	mov	r6,zero
 1008cfc:	dfc00015 	stw	ra,0(sp)
 1008d00:	1008c880 	call	1008c88 <__assert_func>

01008d04 <_fiprintf_r>:
 1008d04:	defffe04 	addi	sp,sp,-8
 1008d08:	dfc00015 	stw	ra,0(sp)
 1008d0c:	d9c00115 	stw	r7,4(sp)
 1008d10:	d9c00104 	addi	r7,sp,4
 1008d14:	100bc2c0 	call	100bc2c <_vfiprintf_r>
 1008d18:	dfc00017 	ldw	ra,0(sp)
 1008d1c:	dec00204 	addi	sp,sp,8
 1008d20:	f800283a 	ret

01008d24 <fiprintf>:
 1008d24:	defffd04 	addi	sp,sp,-12
 1008d28:	2005883a 	mov	r2,r4
 1008d2c:	dfc00015 	stw	ra,0(sp)
 1008d30:	d9800115 	stw	r6,4(sp)
 1008d34:	d9c00215 	stw	r7,8(sp)
 1008d38:	00c040b4 	movhi	r3,258
 1008d3c:	18f34204 	addi	r3,r3,-13048
 1008d40:	19000017 	ldw	r4,0(r3)
 1008d44:	280d883a 	mov	r6,r5
 1008d48:	d9c00104 	addi	r7,sp,4
 1008d4c:	100b883a 	mov	r5,r2
 1008d50:	100bc2c0 	call	100bc2c <_vfiprintf_r>
 1008d54:	dfc00017 	ldw	ra,0(sp)
 1008d58:	dec00304 	addi	sp,sp,12
 1008d5c:	f800283a 	ret

01008d60 <memcpy>:
 1008d60:	defffd04 	addi	sp,sp,-12
 1008d64:	dfc00215 	stw	ra,8(sp)
 1008d68:	dc400115 	stw	r17,4(sp)
 1008d6c:	dc000015 	stw	r16,0(sp)
 1008d70:	00c003c4 	movi	r3,15
 1008d74:	2005883a 	mov	r2,r4
 1008d78:	1980452e 	bgeu	r3,r6,1008e90 <memcpy+0x130>
 1008d7c:	2906b03a 	or	r3,r5,r4
 1008d80:	18c000cc 	andi	r3,r3,3
 1008d84:	1800441e 	bne	r3,zero,1008e98 <memcpy+0x138>
 1008d88:	347ffc04 	addi	r17,r6,-16
 1008d8c:	8822d13a 	srli	r17,r17,4
 1008d90:	28c00104 	addi	r3,r5,4
 1008d94:	23400104 	addi	r13,r4,4
 1008d98:	8820913a 	slli	r16,r17,4
 1008d9c:	2b000204 	addi	r12,r5,8
 1008da0:	22c00204 	addi	r11,r4,8
 1008da4:	84000504 	addi	r16,r16,20
 1008da8:	2a800304 	addi	r10,r5,12
 1008dac:	22400304 	addi	r9,r4,12
 1008db0:	2c21883a 	add	r16,r5,r16
 1008db4:	2811883a 	mov	r8,r5
 1008db8:	200f883a 	mov	r7,r4
 1008dbc:	41000017 	ldw	r4,0(r8)
 1008dc0:	1fc00017 	ldw	ra,0(r3)
 1008dc4:	63c00017 	ldw	r15,0(r12)
 1008dc8:	39000015 	stw	r4,0(r7)
 1008dcc:	53800017 	ldw	r14,0(r10)
 1008dd0:	6fc00015 	stw	ra,0(r13)
 1008dd4:	5bc00015 	stw	r15,0(r11)
 1008dd8:	4b800015 	stw	r14,0(r9)
 1008ddc:	18c00404 	addi	r3,r3,16
 1008de0:	39c00404 	addi	r7,r7,16
 1008de4:	42000404 	addi	r8,r8,16
 1008de8:	6b400404 	addi	r13,r13,16
 1008dec:	63000404 	addi	r12,r12,16
 1008df0:	5ac00404 	addi	r11,r11,16
 1008df4:	52800404 	addi	r10,r10,16
 1008df8:	4a400404 	addi	r9,r9,16
 1008dfc:	1c3fef1e 	bne	r3,r16,1008dbc <__alt_data_end+0xff008dbc>
 1008e00:	89c00044 	addi	r7,r17,1
 1008e04:	380e913a 	slli	r7,r7,4
 1008e08:	310003cc 	andi	r4,r6,15
 1008e0c:	02c000c4 	movi	r11,3
 1008e10:	11c7883a 	add	r3,r2,r7
 1008e14:	29cb883a 	add	r5,r5,r7
 1008e18:	5900212e 	bgeu	r11,r4,1008ea0 <memcpy+0x140>
 1008e1c:	1813883a 	mov	r9,r3
 1008e20:	2811883a 	mov	r8,r5
 1008e24:	200f883a 	mov	r7,r4
 1008e28:	42800017 	ldw	r10,0(r8)
 1008e2c:	4a400104 	addi	r9,r9,4
 1008e30:	39ffff04 	addi	r7,r7,-4
 1008e34:	4abfff15 	stw	r10,-4(r9)
 1008e38:	42000104 	addi	r8,r8,4
 1008e3c:	59fffa36 	bltu	r11,r7,1008e28 <__alt_data_end+0xff008e28>
 1008e40:	213fff04 	addi	r4,r4,-4
 1008e44:	2008d0ba 	srli	r4,r4,2
 1008e48:	318000cc 	andi	r6,r6,3
 1008e4c:	21000044 	addi	r4,r4,1
 1008e50:	2109883a 	add	r4,r4,r4
 1008e54:	2109883a 	add	r4,r4,r4
 1008e58:	1907883a 	add	r3,r3,r4
 1008e5c:	290b883a 	add	r5,r5,r4
 1008e60:	30000626 	beq	r6,zero,1008e7c <memcpy+0x11c>
 1008e64:	198d883a 	add	r6,r3,r6
 1008e68:	29c00003 	ldbu	r7,0(r5)
 1008e6c:	18c00044 	addi	r3,r3,1
 1008e70:	29400044 	addi	r5,r5,1
 1008e74:	19ffffc5 	stb	r7,-1(r3)
 1008e78:	19bffb1e 	bne	r3,r6,1008e68 <__alt_data_end+0xff008e68>
 1008e7c:	dfc00217 	ldw	ra,8(sp)
 1008e80:	dc400117 	ldw	r17,4(sp)
 1008e84:	dc000017 	ldw	r16,0(sp)
 1008e88:	dec00304 	addi	sp,sp,12
 1008e8c:	f800283a 	ret
 1008e90:	2007883a 	mov	r3,r4
 1008e94:	003ff206 	br	1008e60 <__alt_data_end+0xff008e60>
 1008e98:	2007883a 	mov	r3,r4
 1008e9c:	003ff106 	br	1008e64 <__alt_data_end+0xff008e64>
 1008ea0:	200d883a 	mov	r6,r4
 1008ea4:	003fee06 	br	1008e60 <__alt_data_end+0xff008e60>

01008ea8 <memset>:
 1008ea8:	20c000cc 	andi	r3,r4,3
 1008eac:	2005883a 	mov	r2,r4
 1008eb0:	18004426 	beq	r3,zero,1008fc4 <memset+0x11c>
 1008eb4:	31ffffc4 	addi	r7,r6,-1
 1008eb8:	30004026 	beq	r6,zero,1008fbc <memset+0x114>
 1008ebc:	2813883a 	mov	r9,r5
 1008ec0:	200d883a 	mov	r6,r4
 1008ec4:	2007883a 	mov	r3,r4
 1008ec8:	00000406 	br	1008edc <memset+0x34>
 1008ecc:	3a3fffc4 	addi	r8,r7,-1
 1008ed0:	31800044 	addi	r6,r6,1
 1008ed4:	38003926 	beq	r7,zero,1008fbc <memset+0x114>
 1008ed8:	400f883a 	mov	r7,r8
 1008edc:	18c00044 	addi	r3,r3,1
 1008ee0:	32400005 	stb	r9,0(r6)
 1008ee4:	1a0000cc 	andi	r8,r3,3
 1008ee8:	403ff81e 	bne	r8,zero,1008ecc <__alt_data_end+0xff008ecc>
 1008eec:	010000c4 	movi	r4,3
 1008ef0:	21c02d2e 	bgeu	r4,r7,1008fa8 <memset+0x100>
 1008ef4:	29003fcc 	andi	r4,r5,255
 1008ef8:	200c923a 	slli	r6,r4,8
 1008efc:	3108b03a 	or	r4,r6,r4
 1008f00:	200c943a 	slli	r6,r4,16
 1008f04:	218cb03a 	or	r6,r4,r6
 1008f08:	010003c4 	movi	r4,15
 1008f0c:	21c0182e 	bgeu	r4,r7,1008f70 <memset+0xc8>
 1008f10:	3b3ffc04 	addi	r12,r7,-16
 1008f14:	6018d13a 	srli	r12,r12,4
 1008f18:	1a000104 	addi	r8,r3,4
 1008f1c:	1ac00204 	addi	r11,r3,8
 1008f20:	6008913a 	slli	r4,r12,4
 1008f24:	1a800304 	addi	r10,r3,12
 1008f28:	1813883a 	mov	r9,r3
 1008f2c:	21000504 	addi	r4,r4,20
 1008f30:	1909883a 	add	r4,r3,r4
 1008f34:	49800015 	stw	r6,0(r9)
 1008f38:	41800015 	stw	r6,0(r8)
 1008f3c:	59800015 	stw	r6,0(r11)
 1008f40:	51800015 	stw	r6,0(r10)
 1008f44:	42000404 	addi	r8,r8,16
 1008f48:	4a400404 	addi	r9,r9,16
 1008f4c:	5ac00404 	addi	r11,r11,16
 1008f50:	52800404 	addi	r10,r10,16
 1008f54:	413ff71e 	bne	r8,r4,1008f34 <__alt_data_end+0xff008f34>
 1008f58:	63000044 	addi	r12,r12,1
 1008f5c:	6018913a 	slli	r12,r12,4
 1008f60:	39c003cc 	andi	r7,r7,15
 1008f64:	010000c4 	movi	r4,3
 1008f68:	1b07883a 	add	r3,r3,r12
 1008f6c:	21c00e2e 	bgeu	r4,r7,1008fa8 <memset+0x100>
 1008f70:	1813883a 	mov	r9,r3
 1008f74:	3811883a 	mov	r8,r7
 1008f78:	010000c4 	movi	r4,3
 1008f7c:	49800015 	stw	r6,0(r9)
 1008f80:	423fff04 	addi	r8,r8,-4
 1008f84:	4a400104 	addi	r9,r9,4
 1008f88:	223ffc36 	bltu	r4,r8,1008f7c <__alt_data_end+0xff008f7c>
 1008f8c:	393fff04 	addi	r4,r7,-4
 1008f90:	2008d0ba 	srli	r4,r4,2
 1008f94:	39c000cc 	andi	r7,r7,3
 1008f98:	21000044 	addi	r4,r4,1
 1008f9c:	2109883a 	add	r4,r4,r4
 1008fa0:	2109883a 	add	r4,r4,r4
 1008fa4:	1907883a 	add	r3,r3,r4
 1008fa8:	38000526 	beq	r7,zero,1008fc0 <memset+0x118>
 1008fac:	19cf883a 	add	r7,r3,r7
 1008fb0:	19400005 	stb	r5,0(r3)
 1008fb4:	18c00044 	addi	r3,r3,1
 1008fb8:	38fffd1e 	bne	r7,r3,1008fb0 <__alt_data_end+0xff008fb0>
 1008fbc:	f800283a 	ret
 1008fc0:	f800283a 	ret
 1008fc4:	2007883a 	mov	r3,r4
 1008fc8:	300f883a 	mov	r7,r6
 1008fcc:	003fc706 	br	1008eec <__alt_data_end+0xff008eec>

01008fd0 <_puts_r>:
 1008fd0:	defff604 	addi	sp,sp,-40
 1008fd4:	dc000715 	stw	r16,28(sp)
 1008fd8:	2021883a 	mov	r16,r4
 1008fdc:	2809883a 	mov	r4,r5
 1008fe0:	dc400815 	stw	r17,32(sp)
 1008fe4:	dfc00915 	stw	ra,36(sp)
 1008fe8:	2823883a 	mov	r17,r5
 1008fec:	10099b40 	call	10099b4 <strlen>
 1008ff0:	10c00044 	addi	r3,r2,1
 1008ff4:	d8800115 	stw	r2,4(sp)
 1008ff8:	008040b4 	movhi	r2,258
 1008ffc:	10a9d604 	addi	r2,r2,-22696
 1009000:	d8800215 	stw	r2,8(sp)
 1009004:	00800044 	movi	r2,1
 1009008:	d8800315 	stw	r2,12(sp)
 100900c:	00800084 	movi	r2,2
 1009010:	dc400015 	stw	r17,0(sp)
 1009014:	d8c00615 	stw	r3,24(sp)
 1009018:	dec00415 	stw	sp,16(sp)
 100901c:	d8800515 	stw	r2,20(sp)
 1009020:	80000226 	beq	r16,zero,100902c <_puts_r+0x5c>
 1009024:	80800e17 	ldw	r2,56(r16)
 1009028:	10001426 	beq	r2,zero,100907c <_puts_r+0xac>
 100902c:	81400217 	ldw	r5,8(r16)
 1009030:	2880030b 	ldhu	r2,12(r5)
 1009034:	10c8000c 	andi	r3,r2,8192
 1009038:	1800061e 	bne	r3,zero,1009054 <_puts_r+0x84>
 100903c:	29001917 	ldw	r4,100(r5)
 1009040:	00f7ffc4 	movi	r3,-8193
 1009044:	10880014 	ori	r2,r2,8192
 1009048:	20c6703a 	and	r3,r4,r3
 100904c:	2880030d 	sth	r2,12(r5)
 1009050:	28c01915 	stw	r3,100(r5)
 1009054:	d9800404 	addi	r6,sp,16
 1009058:	8009883a 	mov	r4,r16
 100905c:	100d8840 	call	100d884 <__sfvwrite_r>
 1009060:	1000091e 	bne	r2,zero,1009088 <_puts_r+0xb8>
 1009064:	00800284 	movi	r2,10
 1009068:	dfc00917 	ldw	ra,36(sp)
 100906c:	dc400817 	ldw	r17,32(sp)
 1009070:	dc000717 	ldw	r16,28(sp)
 1009074:	dec00a04 	addi	sp,sp,40
 1009078:	f800283a 	ret
 100907c:	8009883a 	mov	r4,r16
 1009080:	100d8340 	call	100d834 <__sinit>
 1009084:	003fe906 	br	100902c <__alt_data_end+0xff00902c>
 1009088:	00bfffc4 	movi	r2,-1
 100908c:	003ff606 	br	1009068 <__alt_data_end+0xff009068>

01009090 <puts>:
 1009090:	008040b4 	movhi	r2,258
 1009094:	10b34204 	addi	r2,r2,-13048
 1009098:	200b883a 	mov	r5,r4
 100909c:	11000017 	ldw	r4,0(r2)
 10090a0:	1008fd01 	jmpi	1008fd0 <_puts_r>

010090a4 <_snprintf_r>:
 10090a4:	30003116 	blt	r6,zero,100916c <_snprintf_r+0xc8>
 10090a8:	deffe404 	addi	sp,sp,-112
 10090ac:	00c08204 	movi	r3,520
 10090b0:	dc001a15 	stw	r16,104(sp)
 10090b4:	3005883a 	mov	r2,r6
 10090b8:	dfc01b15 	stw	ra,108(sp)
 10090bc:	d8c0030d 	sth	r3,12(sp)
 10090c0:	d9400015 	stw	r5,0(sp)
 10090c4:	d9400415 	stw	r5,16(sp)
 10090c8:	380d883a 	mov	r6,r7
 10090cc:	2021883a 	mov	r16,r4
 10090d0:	10001026 	beq	r2,zero,1009114 <_snprintf_r+0x70>
 10090d4:	10bfffc4 	addi	r2,r2,-1
 10090d8:	d8800215 	stw	r2,8(sp)
 10090dc:	d8800515 	stw	r2,20(sp)
 10090e0:	d9c01c04 	addi	r7,sp,112
 10090e4:	00bfffc4 	movi	r2,-1
 10090e8:	d80b883a 	mov	r5,sp
 10090ec:	d880038d 	sth	r2,14(sp)
 10090f0:	1009a4c0 	call	1009a4c <___svfprintf_internal_r>
 10090f4:	00ffffc4 	movi	r3,-1
 10090f8:	10c01316 	blt	r2,r3,1009148 <_snprintf_r+0xa4>
 10090fc:	d8c00017 	ldw	r3,0(sp)
 1009100:	18000005 	stb	zero,0(r3)
 1009104:	dfc01b17 	ldw	ra,108(sp)
 1009108:	dc001a17 	ldw	r16,104(sp)
 100910c:	dec01c04 	addi	sp,sp,112
 1009110:	f800283a 	ret
 1009114:	00bfffc4 	movi	r2,-1
 1009118:	d9c01c04 	addi	r7,sp,112
 100911c:	d80b883a 	mov	r5,sp
 1009120:	d8000215 	stw	zero,8(sp)
 1009124:	d8000515 	stw	zero,20(sp)
 1009128:	d880038d 	sth	r2,14(sp)
 100912c:	1009a4c0 	call	1009a4c <___svfprintf_internal_r>
 1009130:	00ffffc4 	movi	r3,-1
 1009134:	10c00716 	blt	r2,r3,1009154 <_snprintf_r+0xb0>
 1009138:	dfc01b17 	ldw	ra,108(sp)
 100913c:	dc001a17 	ldw	r16,104(sp)
 1009140:	dec01c04 	addi	sp,sp,112
 1009144:	f800283a 	ret
 1009148:	00c022c4 	movi	r3,139
 100914c:	80c00015 	stw	r3,0(r16)
 1009150:	003fea06 	br	10090fc <__alt_data_end+0xff0090fc>
 1009154:	00c022c4 	movi	r3,139
 1009158:	80c00015 	stw	r3,0(r16)
 100915c:	dfc01b17 	ldw	ra,108(sp)
 1009160:	dc001a17 	ldw	r16,104(sp)
 1009164:	dec01c04 	addi	sp,sp,112
 1009168:	f800283a 	ret
 100916c:	008022c4 	movi	r2,139
 1009170:	20800015 	stw	r2,0(r4)
 1009174:	00bfffc4 	movi	r2,-1
 1009178:	f800283a 	ret

0100917c <snprintf>:
 100917c:	deffe304 	addi	sp,sp,-116
 1009180:	dfc01b15 	stw	ra,108(sp)
 1009184:	dc001a15 	stw	r16,104(sp)
 1009188:	d9c01c15 	stw	r7,112(sp)
 100918c:	008040b4 	movhi	r2,258
 1009190:	10b34204 	addi	r2,r2,-13048
 1009194:	14000017 	ldw	r16,0(r2)
 1009198:	28002d16 	blt	r5,zero,1009250 <snprintf+0xd4>
 100919c:	00808204 	movi	r2,520
 10091a0:	d880030d 	sth	r2,12(sp)
 10091a4:	d9000015 	stw	r4,0(sp)
 10091a8:	d9000415 	stw	r4,16(sp)
 10091ac:	28001126 	beq	r5,zero,10091f4 <snprintf+0x78>
 10091b0:	28bfffc4 	addi	r2,r5,-1
 10091b4:	d8800215 	stw	r2,8(sp)
 10091b8:	d8800515 	stw	r2,20(sp)
 10091bc:	d9c01c04 	addi	r7,sp,112
 10091c0:	00bfffc4 	movi	r2,-1
 10091c4:	d80b883a 	mov	r5,sp
 10091c8:	8009883a 	mov	r4,r16
 10091cc:	d880038d 	sth	r2,14(sp)
 10091d0:	1009a4c0 	call	1009a4c <___svfprintf_internal_r>
 10091d4:	00ffffc4 	movi	r3,-1
 10091d8:	10c01416 	blt	r2,r3,100922c <snprintf+0xb0>
 10091dc:	d8c00017 	ldw	r3,0(sp)
 10091e0:	18000005 	stb	zero,0(r3)
 10091e4:	dfc01b17 	ldw	ra,108(sp)
 10091e8:	dc001a17 	ldw	r16,104(sp)
 10091ec:	dec01d04 	addi	sp,sp,116
 10091f0:	f800283a 	ret
 10091f4:	00bfffc4 	movi	r2,-1
 10091f8:	d9c01c04 	addi	r7,sp,112
 10091fc:	d80b883a 	mov	r5,sp
 1009200:	8009883a 	mov	r4,r16
 1009204:	d8000215 	stw	zero,8(sp)
 1009208:	d8000515 	stw	zero,20(sp)
 100920c:	d880038d 	sth	r2,14(sp)
 1009210:	1009a4c0 	call	1009a4c <___svfprintf_internal_r>
 1009214:	00ffffc4 	movi	r3,-1
 1009218:	10c00716 	blt	r2,r3,1009238 <snprintf+0xbc>
 100921c:	dfc01b17 	ldw	ra,108(sp)
 1009220:	dc001a17 	ldw	r16,104(sp)
 1009224:	dec01d04 	addi	sp,sp,116
 1009228:	f800283a 	ret
 100922c:	00c022c4 	movi	r3,139
 1009230:	80c00015 	stw	r3,0(r16)
 1009234:	003fe906 	br	10091dc <__alt_data_end+0xff0091dc>
 1009238:	00c022c4 	movi	r3,139
 100923c:	80c00015 	stw	r3,0(r16)
 1009240:	dfc01b17 	ldw	ra,108(sp)
 1009244:	dc001a17 	ldw	r16,104(sp)
 1009248:	dec01d04 	addi	sp,sp,116
 100924c:	f800283a 	ret
 1009250:	008022c4 	movi	r2,139
 1009254:	80800015 	stw	r2,0(r16)
 1009258:	00bfffc4 	movi	r2,-1
 100925c:	003fef06 	br	100921c <__alt_data_end+0xff00921c>

01009260 <strcmp>:
 1009260:	2144b03a 	or	r2,r4,r5
 1009264:	108000cc 	andi	r2,r2,3
 1009268:	1000171e 	bne	r2,zero,10092c8 <strcmp+0x68>
 100926c:	20800017 	ldw	r2,0(r4)
 1009270:	28c00017 	ldw	r3,0(r5)
 1009274:	10c0141e 	bne	r2,r3,10092c8 <strcmp+0x68>
 1009278:	027fbff4 	movhi	r9,65279
 100927c:	4a7fbfc4 	addi	r9,r9,-257
 1009280:	0086303a 	nor	r3,zero,r2
 1009284:	02202074 	movhi	r8,32897
 1009288:	1245883a 	add	r2,r2,r9
 100928c:	42202004 	addi	r8,r8,-32640
 1009290:	10c4703a 	and	r2,r2,r3
 1009294:	1204703a 	and	r2,r2,r8
 1009298:	10000226 	beq	r2,zero,10092a4 <strcmp+0x44>
 100929c:	00002306 	br	100932c <strcmp+0xcc>
 10092a0:	1000221e 	bne	r2,zero,100932c <strcmp+0xcc>
 10092a4:	21000104 	addi	r4,r4,4
 10092a8:	20c00017 	ldw	r3,0(r4)
 10092ac:	29400104 	addi	r5,r5,4
 10092b0:	29800017 	ldw	r6,0(r5)
 10092b4:	1a4f883a 	add	r7,r3,r9
 10092b8:	00c4303a 	nor	r2,zero,r3
 10092bc:	3884703a 	and	r2,r7,r2
 10092c0:	1204703a 	and	r2,r2,r8
 10092c4:	19bff626 	beq	r3,r6,10092a0 <__alt_data_end+0xff0092a0>
 10092c8:	20800003 	ldbu	r2,0(r4)
 10092cc:	10c03fcc 	andi	r3,r2,255
 10092d0:	18c0201c 	xori	r3,r3,128
 10092d4:	18ffe004 	addi	r3,r3,-128
 10092d8:	18000c26 	beq	r3,zero,100930c <strcmp+0xac>
 10092dc:	29800007 	ldb	r6,0(r5)
 10092e0:	19800326 	beq	r3,r6,10092f0 <strcmp+0x90>
 10092e4:	00001306 	br	1009334 <strcmp+0xd4>
 10092e8:	29800007 	ldb	r6,0(r5)
 10092ec:	11800b1e 	bne	r2,r6,100931c <strcmp+0xbc>
 10092f0:	21000044 	addi	r4,r4,1
 10092f4:	20c00003 	ldbu	r3,0(r4)
 10092f8:	29400044 	addi	r5,r5,1
 10092fc:	18803fcc 	andi	r2,r3,255
 1009300:	1080201c 	xori	r2,r2,128
 1009304:	10bfe004 	addi	r2,r2,-128
 1009308:	103ff71e 	bne	r2,zero,10092e8 <__alt_data_end+0xff0092e8>
 100930c:	0007883a 	mov	r3,zero
 1009310:	28800003 	ldbu	r2,0(r5)
 1009314:	1885c83a 	sub	r2,r3,r2
 1009318:	f800283a 	ret
 100931c:	28800003 	ldbu	r2,0(r5)
 1009320:	18c03fcc 	andi	r3,r3,255
 1009324:	1885c83a 	sub	r2,r3,r2
 1009328:	f800283a 	ret
 100932c:	0005883a 	mov	r2,zero
 1009330:	f800283a 	ret
 1009334:	10c03fcc 	andi	r3,r2,255
 1009338:	003ff506 	br	1009310 <__alt_data_end+0xff009310>

0100933c <_strerror_r>:
 100933c:	deffff04 	addi	sp,sp,-4
 1009340:	2807883a 	mov	r3,r5
 1009344:	dfc00015 	stw	ra,0(sp)
 1009348:	00802384 	movi	r2,142
 100934c:	300b883a 	mov	r5,r6
 1009350:	10c18736 	bltu	r2,r3,1009970 <_strerror_r+0x634>
 1009354:	181090ba 	slli	r8,r3,2
 1009358:	00804074 	movhi	r2,257
 100935c:	10a4db04 	addi	r2,r2,-27796
 1009360:	4085883a 	add	r2,r8,r2
 1009364:	10800017 	ldw	r2,0(r2)
 1009368:	1000683a 	jmp	r2
 100936c:	010095a8 	cmpgeui	r4,zero,598
 1009370:	01009964 	muli	r4,zero,613
 1009374:	01009958 	cmpnei	r4,zero,613
 1009378:	0100994c 	andi	r4,zero,613
 100937c:	01009940 	call	100994 <__alt_mem_sdram-0xeff66c>
 1009380:	01009934 	movhi	r4,612
 1009384:	01009928 	cmpgeui	r4,zero,612
 1009388:	0100991c 	xori	r4,zero,612
 100938c:	01009910 	cmplti	r4,zero,612
 1009390:	01009904 	movi	r4,612
 1009394:	010098f8 	rdprs	r4,zero,611
 1009398:	010098ec 	andhi	r4,zero,611
 100939c:	010098e0 	cmpeqi	r4,zero,611
 10093a0:	010098d4 	movui	r4,611
 10093a4:	010098c8 	cmpgei	r4,zero,611
 10093a8:	01009970 	cmpltui	r4,zero,613
 10093ac:	010098bc 	xorhi	r4,zero,610
 10093b0:	010098b0 	cmpltui	r4,zero,610
 10093b4:	010098a4 	muli	r4,zero,610
 10093b8:	01009898 	cmpnei	r4,zero,610
 10093bc:	0100988c 	andi	r4,zero,610
 10093c0:	01009880 	call	100988 <__alt_mem_sdram-0xeff678>
 10093c4:	01009874 	movhi	r4,609
 10093c8:	01009868 	cmpgeui	r4,zero,609
 10093cc:	0100985c 	xori	r4,zero,609
 10093d0:	01009850 	cmplti	r4,zero,609
 10093d4:	01009844 	movi	r4,609
 10093d8:	01009838 	rdprs	r4,zero,608
 10093dc:	0100982c 	andhi	r4,zero,608
 10093e0:	01009820 	cmpeqi	r4,zero,608
 10093e4:	01009814 	movui	r4,608
 10093e8:	01009808 	cmpgei	r4,zero,608
 10093ec:	010097fc 	xorhi	r4,zero,607
 10093f0:	010097f0 	cmpltui	r4,zero,607
 10093f4:	010097e4 	muli	r4,zero,607
 10093f8:	010097d8 	cmpnei	r4,zero,607
 10093fc:	010097cc 	andi	r4,zero,607
 1009400:	01009970 	cmpltui	r4,zero,613
 1009404:	01009970 	cmpltui	r4,zero,613
 1009408:	01009970 	cmpltui	r4,zero,613
 100940c:	01009970 	cmpltui	r4,zero,613
 1009410:	01009970 	cmpltui	r4,zero,613
 1009414:	01009970 	cmpltui	r4,zero,613
 1009418:	01009970 	cmpltui	r4,zero,613
 100941c:	01009970 	cmpltui	r4,zero,613
 1009420:	010097c0 	call	10097c <__alt_mem_sdram-0xeff684>
 1009424:	010097b4 	movhi	r4,606
 1009428:	01009970 	cmpltui	r4,zero,613
 100942c:	01009970 	cmpltui	r4,zero,613
 1009430:	01009970 	cmpltui	r4,zero,613
 1009434:	01009970 	cmpltui	r4,zero,613
 1009438:	01009970 	cmpltui	r4,zero,613
 100943c:	01009970 	cmpltui	r4,zero,613
 1009440:	01009970 	cmpltui	r4,zero,613
 1009444:	01009970 	cmpltui	r4,zero,613
 1009448:	01009970 	cmpltui	r4,zero,613
 100944c:	01009970 	cmpltui	r4,zero,613
 1009450:	01009970 	cmpltui	r4,zero,613
 1009454:	01009970 	cmpltui	r4,zero,613
 1009458:	01009970 	cmpltui	r4,zero,613
 100945c:	010097a8 	cmpgeui	r4,zero,606
 1009460:	0100979c 	xori	r4,zero,606
 1009464:	01009790 	cmplti	r4,zero,606
 1009468:	01009784 	movi	r4,606
 100946c:	01009970 	cmpltui	r4,zero,613
 1009470:	01009970 	cmpltui	r4,zero,613
 1009474:	01009970 	cmpltui	r4,zero,613
 1009478:	01009778 	rdprs	r4,zero,605
 100947c:	01009970 	cmpltui	r4,zero,613
 1009480:	01009970 	cmpltui	r4,zero,613
 1009484:	01009970 	cmpltui	r4,zero,613
 1009488:	0100976c 	andhi	r4,zero,605
 100948c:	01009970 	cmpltui	r4,zero,613
 1009490:	01009970 	cmpltui	r4,zero,613
 1009494:	01009760 	cmpeqi	r4,zero,605
 1009498:	01009970 	cmpltui	r4,zero,613
 100949c:	01009970 	cmpltui	r4,zero,613
 10094a0:	01009754 	movui	r4,605
 10094a4:	01009970 	cmpltui	r4,zero,613
 10094a8:	01009970 	cmpltui	r4,zero,613
 10094ac:	01009970 	cmpltui	r4,zero,613
 10094b0:	01009970 	cmpltui	r4,zero,613
 10094b4:	01009970 	cmpltui	r4,zero,613
 10094b8:	01009970 	cmpltui	r4,zero,613
 10094bc:	01009970 	cmpltui	r4,zero,613
 10094c0:	01009970 	cmpltui	r4,zero,613
 10094c4:	01009970 	cmpltui	r4,zero,613
 10094c8:	01009970 	cmpltui	r4,zero,613
 10094cc:	01009748 	cmpgei	r4,zero,605
 10094d0:	01009970 	cmpltui	r4,zero,613
 10094d4:	0100973c 	xorhi	r4,zero,604
 10094d8:	01009730 	cmpltui	r4,zero,604
 10094dc:	01009724 	muli	r4,zero,604
 10094e0:	01009970 	cmpltui	r4,zero,613
 10094e4:	01009970 	cmpltui	r4,zero,613
 10094e8:	01009718 	cmpnei	r4,zero,604
 10094ec:	01009970 	cmpltui	r4,zero,613
 10094f0:	01009970 	cmpltui	r4,zero,613
 10094f4:	01009970 	cmpltui	r4,zero,613
 10094f8:	01009970 	cmpltui	r4,zero,613
 10094fc:	01009970 	cmpltui	r4,zero,613
 1009500:	01009970 	cmpltui	r4,zero,613
 1009504:	01009970 	cmpltui	r4,zero,613
 1009508:	01009970 	cmpltui	r4,zero,613
 100950c:	0100970c 	andi	r4,zero,604
 1009510:	01009700 	call	100970 <__alt_mem_sdram-0xeff690>
 1009514:	010096f4 	movhi	r4,603
 1009518:	010096e8 	cmpgeui	r4,zero,603
 100951c:	010096dc 	xori	r4,zero,603
 1009520:	010096d0 	cmplti	r4,zero,603
 1009524:	01009970 	cmpltui	r4,zero,613
 1009528:	010096c4 	movi	r4,603
 100952c:	010096b8 	rdprs	r4,zero,602
 1009530:	010096ac 	andhi	r4,zero,602
 1009534:	010096a0 	cmpeqi	r4,zero,602
 1009538:	01009694 	movui	r4,602
 100953c:	01009688 	cmpgei	r4,zero,602
 1009540:	0100967c 	xorhi	r4,zero,601
 1009544:	01009670 	cmpltui	r4,zero,601
 1009548:	01009664 	muli	r4,zero,601
 100954c:	01009658 	cmpnei	r4,zero,601
 1009550:	0100964c 	andi	r4,zero,601
 1009554:	01009640 	call	100964 <__alt_mem_sdram-0xeff69c>
 1009558:	01009634 	movhi	r4,600
 100955c:	01009970 	cmpltui	r4,zero,613
 1009560:	01009628 	cmpgeui	r4,zero,600
 1009564:	0100961c 	xori	r4,zero,600
 1009568:	01009610 	cmplti	r4,zero,600
 100956c:	01009604 	movi	r4,600
 1009570:	01009970 	cmpltui	r4,zero,613
 1009574:	01009970 	cmpltui	r4,zero,613
 1009578:	01009970 	cmpltui	r4,zero,613
 100957c:	01009970 	cmpltui	r4,zero,613
 1009580:	01009970 	cmpltui	r4,zero,613
 1009584:	010095f8 	rdprs	r4,zero,599
 1009588:	01009970 	cmpltui	r4,zero,613
 100958c:	01009970 	cmpltui	r4,zero,613
 1009590:	01009970 	cmpltui	r4,zero,613
 1009594:	010095ec 	andhi	r4,zero,599
 1009598:	010095e0 	cmpeqi	r4,zero,599
 100959c:	010095d4 	movui	r4,599
 10095a0:	010095c8 	cmpgei	r4,zero,599
 10095a4:	010095bc 	xorhi	r4,zero,598
 10095a8:	008040b4 	movhi	r2,258
 10095ac:	10a9d704 	addi	r2,r2,-22692
 10095b0:	dfc00017 	ldw	ra,0(sp)
 10095b4:	dec00104 	addi	sp,sp,4
 10095b8:	f800283a 	ret
 10095bc:	008040b4 	movhi	r2,258
 10095c0:	10ab7404 	addi	r2,r2,-21040
 10095c4:	003ffa06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10095c8:	008040b4 	movhi	r2,258
 10095cc:	10ab6e04 	addi	r2,r2,-21064
 10095d0:	003ff706 	br	10095b0 <__alt_data_end+0xff0095b0>
 10095d4:	008040b4 	movhi	r2,258
 10095d8:	10ab6904 	addi	r2,r2,-21084
 10095dc:	003ff406 	br	10095b0 <__alt_data_end+0xff0095b0>
 10095e0:	008040b4 	movhi	r2,258
 10095e4:	10ab8204 	addi	r2,r2,-20984
 10095e8:	003ff106 	br	10095b0 <__alt_data_end+0xff0095b0>
 10095ec:	008040b4 	movhi	r2,258
 10095f0:	10aac004 	addi	r2,r2,-21760
 10095f4:	003fee06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10095f8:	008040b4 	movhi	r2,258
 10095fc:	10aa8e04 	addi	r2,r2,-21960
 1009600:	003feb06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009604:	008040b4 	movhi	r2,258
 1009608:	10ab5c04 	addi	r2,r2,-21136
 100960c:	003fe806 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009610:	008040b4 	movhi	r2,258
 1009614:	10ab6204 	addi	r2,r2,-21112
 1009618:	003fe506 	br	10095b0 <__alt_data_end+0xff0095b0>
 100961c:	008040b4 	movhi	r2,258
 1009620:	10aa5d04 	addi	r2,r2,-22156
 1009624:	003fe206 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009628:	008040b4 	movhi	r2,258
 100962c:	10ab4d04 	addi	r2,r2,-21196
 1009630:	003fdf06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009634:	008040b4 	movhi	r2,258
 1009638:	10aaea04 	addi	r2,r2,-21592
 100963c:	003fdc06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009640:	008040b4 	movhi	r2,258
 1009644:	10ab8c04 	addi	r2,r2,-20944
 1009648:	003fd906 	br	10095b0 <__alt_data_end+0xff0095b0>
 100964c:	008040b4 	movhi	r2,258
 1009650:	10aa0f04 	addi	r2,r2,-22468
 1009654:	003fd606 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009658:	008040b4 	movhi	r2,258
 100965c:	10aa0104 	addi	r2,r2,-22524
 1009660:	003fd306 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009664:	008040b4 	movhi	r2,258
 1009668:	10aa4304 	addi	r2,r2,-22260
 100966c:	003fd006 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009670:	008040b4 	movhi	r2,258
 1009674:	10aa8304 	addi	r2,r2,-22004
 1009678:	003fcd06 	br	10095b0 <__alt_data_end+0xff0095b0>
 100967c:	008040b4 	movhi	r2,258
 1009680:	10aa3f04 	addi	r2,r2,-22276
 1009684:	003fca06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009688:	008040b4 	movhi	r2,258
 100968c:	10ab9104 	addi	r2,r2,-20924
 1009690:	003fc706 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009694:	008040b4 	movhi	r2,258
 1009698:	10aa5404 	addi	r2,r2,-22192
 100969c:	003fc406 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096a0:	008040b4 	movhi	r2,258
 10096a4:	10aac904 	addi	r2,r2,-21724
 10096a8:	003fc106 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096ac:	008040b4 	movhi	r2,258
 10096b0:	10ab5304 	addi	r2,r2,-21172
 10096b4:	003fbe06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096b8:	008040b4 	movhi	r2,258
 10096bc:	10ab4704 	addi	r2,r2,-21220
 10096c0:	003fbb06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096c4:	008040b4 	movhi	r2,258
 10096c8:	10ab3b04 	addi	r2,r2,-21268
 10096cc:	003fb806 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096d0:	008040b4 	movhi	r2,258
 10096d4:	10ab3504 	addi	r2,r2,-21292
 10096d8:	003fb506 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096dc:	008040b4 	movhi	r2,258
 10096e0:	10ab2d04 	addi	r2,r2,-21324
 10096e4:	003fb206 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096e8:	008040b4 	movhi	r2,258
 10096ec:	10ab2504 	addi	r2,r2,-21356
 10096f0:	003faf06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10096f4:	008040b4 	movhi	r2,258
 10096f8:	10ab1904 	addi	r2,r2,-21404
 10096fc:	003fac06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009700:	008040b4 	movhi	r2,258
 1009704:	10ab1004 	addi	r2,r2,-21440
 1009708:	003fa906 	br	10095b0 <__alt_data_end+0xff0095b0>
 100970c:	008040b4 	movhi	r2,258
 1009710:	10ab4004 	addi	r2,r2,-21248
 1009714:	003fa606 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009718:	008040b4 	movhi	r2,258
 100971c:	10ab7904 	addi	r2,r2,-21020
 1009720:	003fa306 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009724:	008040b4 	movhi	r2,258
 1009728:	10ab0a04 	addi	r2,r2,-21464
 100972c:	003fa006 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009730:	008040b4 	movhi	r2,258
 1009734:	10ab0304 	addi	r2,r2,-21492
 1009738:	003f9d06 	br	10095b0 <__alt_data_end+0xff0095b0>
 100973c:	008040b4 	movhi	r2,258
 1009740:	10aafe04 	addi	r2,r2,-21512
 1009744:	003f9a06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009748:	008040b4 	movhi	r2,258
 100974c:	10aaf704 	addi	r2,r2,-21540
 1009750:	003f9706 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009754:	008040b4 	movhi	r2,258
 1009758:	10aaf404 	addi	r2,r2,-21552
 100975c:	003f9406 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009760:	008040b4 	movhi	r2,258
 1009764:	10aaef04 	addi	r2,r2,-21572
 1009768:	003f9106 	br	10095b0 <__alt_data_end+0xff0095b0>
 100976c:	008040b4 	movhi	r2,258
 1009770:	10aae604 	addi	r2,r2,-21608
 1009774:	003f8e06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009778:	008040b4 	movhi	r2,258
 100977c:	10aae004 	addi	r2,r2,-21632
 1009780:	003f8b06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009784:	008040b4 	movhi	r2,258
 1009788:	10aadb04 	addi	r2,r2,-21652
 100978c:	003f8806 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009790:	008040b4 	movhi	r2,258
 1009794:	10aad504 	addi	r2,r2,-21676
 1009798:	003f8506 	br	10095b0 <__alt_data_end+0xff0095b0>
 100979c:	008040b4 	movhi	r2,258
 10097a0:	10ab1704 	addi	r2,r2,-21412
 10097a4:	003f8206 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097a8:	008040b4 	movhi	r2,258
 10097ac:	10aad104 	addi	r2,r2,-21692
 10097b0:	003f7f06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097b4:	008040b4 	movhi	r2,258
 10097b8:	10aacf04 	addi	r2,r2,-21700
 10097bc:	003f7c06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097c0:	008040b4 	movhi	r2,258
 10097c4:	10aac604 	addi	r2,r2,-21736
 10097c8:	003f7906 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097cc:	008040b4 	movhi	r2,258
 10097d0:	10aabb04 	addi	r2,r2,-21780
 10097d4:	003f7606 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097d8:	008040b4 	movhi	r2,258
 10097dc:	10aab404 	addi	r2,r2,-21808
 10097e0:	003f7306 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097e4:	008040b4 	movhi	r2,258
 10097e8:	10aaaf04 	addi	r2,r2,-21828
 10097ec:	003f7006 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097f0:	008040b4 	movhi	r2,258
 10097f4:	10aaa304 	addi	r2,r2,-21876
 10097f8:	003f6d06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10097fc:	008040b4 	movhi	r2,258
 1009800:	10aaa004 	addi	r2,r2,-21888
 1009804:	003f6a06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009808:	008040b4 	movhi	r2,258
 100980c:	10aa9c04 	addi	r2,r2,-21904
 1009810:	003f6706 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009814:	008040b4 	movhi	r2,258
 1009818:	10aa9604 	addi	r2,r2,-21928
 100981c:	003f6406 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009820:	008040b4 	movhi	r2,258
 1009824:	10aa9204 	addi	r2,r2,-21944
 1009828:	003f6106 	br	10095b0 <__alt_data_end+0xff0095b0>
 100982c:	008040b4 	movhi	r2,258
 1009830:	10aa8804 	addi	r2,r2,-21984
 1009834:	003f5e06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009838:	008040b4 	movhi	r2,258
 100983c:	10aa7f04 	addi	r2,r2,-22020
 1009840:	003f5b06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009844:	008040b4 	movhi	r2,258
 1009848:	10aa7b04 	addi	r2,r2,-22036
 100984c:	003f5806 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009850:	008040b4 	movhi	r2,258
 1009854:	10aa7504 	addi	r2,r2,-22060
 1009858:	003f5506 	br	10095b0 <__alt_data_end+0xff0095b0>
 100985c:	008040b4 	movhi	r2,258
 1009860:	10aa6d04 	addi	r2,r2,-22092
 1009864:	003f5206 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009868:	008040b4 	movhi	r2,258
 100986c:	10aa6504 	addi	r2,r2,-22124
 1009870:	003f4f06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009874:	008040b4 	movhi	r2,258
 1009878:	10aa4f04 	addi	r2,r2,-22212
 100987c:	003f4c06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009880:	008040b4 	movhi	r2,258
 1009884:	10aa4b04 	addi	r2,r2,-22228
 1009888:	003f4906 	br	10095b0 <__alt_data_end+0xff0095b0>
 100988c:	008040b4 	movhi	r2,258
 1009890:	10aa3b04 	addi	r2,r2,-22292
 1009894:	003f4606 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009898:	008040b4 	movhi	r2,258
 100989c:	10aa3704 	addi	r2,r2,-22308
 10098a0:	003f4306 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098a4:	008040b4 	movhi	r2,258
 10098a8:	10aa3204 	addi	r2,r2,-22328
 10098ac:	003f4006 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098b0:	008040b4 	movhi	r2,258
 10098b4:	10aa2f04 	addi	r2,r2,-22340
 10098b8:	003f3d06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098bc:	008040b4 	movhi	r2,258
 10098c0:	10aa2904 	addi	r2,r2,-22364
 10098c4:	003f3a06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098c8:	008040b4 	movhi	r2,258
 10098cc:	10aa2604 	addi	r2,r2,-22376
 10098d0:	003f3706 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098d4:	008040b4 	movhi	r2,258
 10098d8:	10aa2104 	addi	r2,r2,-22396
 10098dc:	003f3406 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098e0:	008040b4 	movhi	r2,258
 10098e4:	10aa1c04 	addi	r2,r2,-22416
 10098e8:	003f3106 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098ec:	008040b4 	movhi	r2,258
 10098f0:	10aa1704 	addi	r2,r2,-22436
 10098f4:	003f2e06 	br	10095b0 <__alt_data_end+0xff0095b0>
 10098f8:	008040b4 	movhi	r2,258
 10098fc:	10aa0c04 	addi	r2,r2,-22480
 1009900:	003f2b06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009904:	008040b4 	movhi	r2,258
 1009908:	10aa0804 	addi	r2,r2,-22496
 100990c:	003f2806 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009910:	008040b4 	movhi	r2,258
 1009914:	10a9fc04 	addi	r2,r2,-22544
 1009918:	003f2506 	br	10095b0 <__alt_data_end+0xff0095b0>
 100991c:	008040b4 	movhi	r2,258
 1009920:	10a9f704 	addi	r2,r2,-22564
 1009924:	003f2206 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009928:	008040b4 	movhi	r2,258
 100992c:	10a9f004 	addi	r2,r2,-22592
 1009930:	003f1f06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009934:	008040b4 	movhi	r2,258
 1009938:	10a9ed04 	addi	r2,r2,-22604
 100993c:	003f1c06 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009940:	008040b4 	movhi	r2,258
 1009944:	10a9e704 	addi	r2,r2,-22628
 1009948:	003f1906 	br	10095b0 <__alt_data_end+0xff0095b0>
 100994c:	008040b4 	movhi	r2,258
 1009950:	10a9e304 	addi	r2,r2,-22644
 1009954:	003f1606 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009958:	008040b4 	movhi	r2,258
 100995c:	10a9dc04 	addi	r2,r2,-22672
 1009960:	003f1306 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009964:	008040b4 	movhi	r2,258
 1009968:	10a9d904 	addi	r2,r2,-22684
 100996c:	003f1006 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009970:	38000726 	beq	r7,zero,1009990 <_strerror_r+0x654>
 1009974:	380d883a 	mov	r6,r7
 1009978:	1809883a 	mov	r4,r3
 100997c:	100bc240 	call	100bc24 <_user_strerror>
 1009980:	103f0b1e 	bne	r2,zero,10095b0 <__alt_data_end+0xff0095b0>
 1009984:	008040b4 	movhi	r2,258
 1009988:	10a9c804 	addi	r2,r2,-22752
 100998c:	003f0806 	br	10095b0 <__alt_data_end+0xff0095b0>
 1009990:	200f883a 	mov	r7,r4
 1009994:	003ff706 	br	1009974 <__alt_data_end+0xff009974>

01009998 <strerror>:
 1009998:	008040b4 	movhi	r2,258
 100999c:	10b34204 	addi	r2,r2,-13048
 10099a0:	200b883a 	mov	r5,r4
 10099a4:	11000017 	ldw	r4,0(r2)
 10099a8:	000f883a 	mov	r7,zero
 10099ac:	000d883a 	mov	r6,zero
 10099b0:	100933c1 	jmpi	100933c <_strerror_r>

010099b4 <strlen>:
 10099b4:	208000cc 	andi	r2,r4,3
 10099b8:	10002026 	beq	r2,zero,1009a3c <strlen+0x88>
 10099bc:	20800007 	ldb	r2,0(r4)
 10099c0:	10002026 	beq	r2,zero,1009a44 <strlen+0x90>
 10099c4:	2005883a 	mov	r2,r4
 10099c8:	00000206 	br	10099d4 <strlen+0x20>
 10099cc:	10c00007 	ldb	r3,0(r2)
 10099d0:	18001826 	beq	r3,zero,1009a34 <strlen+0x80>
 10099d4:	10800044 	addi	r2,r2,1
 10099d8:	10c000cc 	andi	r3,r2,3
 10099dc:	183ffb1e 	bne	r3,zero,10099cc <__alt_data_end+0xff0099cc>
 10099e0:	10c00017 	ldw	r3,0(r2)
 10099e4:	01ffbff4 	movhi	r7,65279
 10099e8:	39ffbfc4 	addi	r7,r7,-257
 10099ec:	00ca303a 	nor	r5,zero,r3
 10099f0:	01a02074 	movhi	r6,32897
 10099f4:	19c7883a 	add	r3,r3,r7
 10099f8:	31a02004 	addi	r6,r6,-32640
 10099fc:	1946703a 	and	r3,r3,r5
 1009a00:	1986703a 	and	r3,r3,r6
 1009a04:	1800091e 	bne	r3,zero,1009a2c <strlen+0x78>
 1009a08:	10800104 	addi	r2,r2,4
 1009a0c:	10c00017 	ldw	r3,0(r2)
 1009a10:	19cb883a 	add	r5,r3,r7
 1009a14:	00c6303a 	nor	r3,zero,r3
 1009a18:	28c6703a 	and	r3,r5,r3
 1009a1c:	1986703a 	and	r3,r3,r6
 1009a20:	183ff926 	beq	r3,zero,1009a08 <__alt_data_end+0xff009a08>
 1009a24:	00000106 	br	1009a2c <strlen+0x78>
 1009a28:	10800044 	addi	r2,r2,1
 1009a2c:	10c00007 	ldb	r3,0(r2)
 1009a30:	183ffd1e 	bne	r3,zero,1009a28 <__alt_data_end+0xff009a28>
 1009a34:	1105c83a 	sub	r2,r2,r4
 1009a38:	f800283a 	ret
 1009a3c:	2005883a 	mov	r2,r4
 1009a40:	003fe706 	br	10099e0 <__alt_data_end+0xff0099e0>
 1009a44:	0005883a 	mov	r2,zero
 1009a48:	f800283a 	ret

01009a4c <___svfprintf_internal_r>:
 1009a4c:	deffb704 	addi	sp,sp,-292
 1009a50:	dfc04815 	stw	ra,288(sp)
 1009a54:	ddc04615 	stw	r23,280(sp)
 1009a58:	d9402c15 	stw	r5,176(sp)
 1009a5c:	d9003915 	stw	r4,228(sp)
 1009a60:	302f883a 	mov	r23,r6
 1009a64:	d9c02d15 	stw	r7,180(sp)
 1009a68:	df004715 	stw	fp,284(sp)
 1009a6c:	dd804515 	stw	r22,276(sp)
 1009a70:	dd404415 	stw	r21,272(sp)
 1009a74:	dd004315 	stw	r20,268(sp)
 1009a78:	dcc04215 	stw	r19,264(sp)
 1009a7c:	dc804115 	stw	r18,260(sp)
 1009a80:	dc404015 	stw	r17,256(sp)
 1009a84:	dc003f15 	stw	r16,252(sp)
 1009a88:	100df740 	call	100df74 <_localeconv_r>
 1009a8c:	10800017 	ldw	r2,0(r2)
 1009a90:	1009883a 	mov	r4,r2
 1009a94:	d8803415 	stw	r2,208(sp)
 1009a98:	10099b40 	call	10099b4 <strlen>
 1009a9c:	d8c02c17 	ldw	r3,176(sp)
 1009aa0:	d8803815 	stw	r2,224(sp)
 1009aa4:	1880030b 	ldhu	r2,12(r3)
 1009aa8:	1080200c 	andi	r2,r2,128
 1009aac:	10000226 	beq	r2,zero,1009ab8 <___svfprintf_internal_r+0x6c>
 1009ab0:	18800417 	ldw	r2,16(r3)
 1009ab4:	10067f26 	beq	r2,zero,100b4b4 <___svfprintf_internal_r+0x1a68>
 1009ab8:	dcc03917 	ldw	r19,228(sp)
 1009abc:	d8c00404 	addi	r3,sp,16
 1009ac0:	054040b4 	movhi	r21,258
 1009ac4:	d9001e04 	addi	r4,sp,120
 1009ac8:	ad6ba784 	addi	r21,r21,-20834
 1009acc:	d8c01e15 	stw	r3,120(sp)
 1009ad0:	d8002015 	stw	zero,128(sp)
 1009ad4:	d8001f15 	stw	zero,124(sp)
 1009ad8:	d8003315 	stw	zero,204(sp)
 1009adc:	d8003615 	stw	zero,216(sp)
 1009ae0:	d8003715 	stw	zero,220(sp)
 1009ae4:	1811883a 	mov	r8,r3
 1009ae8:	d8003a15 	stw	zero,232(sp)
 1009aec:	d8003b15 	stw	zero,236(sp)
 1009af0:	d8002f15 	stw	zero,188(sp)
 1009af4:	d9002815 	stw	r4,160(sp)
 1009af8:	b8800007 	ldb	r2,0(r23)
 1009afc:	10026726 	beq	r2,zero,100a49c <___svfprintf_internal_r+0xa50>
 1009b00:	00c00944 	movi	r3,37
 1009b04:	b821883a 	mov	r16,r23
 1009b08:	10c0021e 	bne	r2,r3,1009b14 <___svfprintf_internal_r+0xc8>
 1009b0c:	00001406 	br	1009b60 <___svfprintf_internal_r+0x114>
 1009b10:	10c00326 	beq	r2,r3,1009b20 <___svfprintf_internal_r+0xd4>
 1009b14:	84000044 	addi	r16,r16,1
 1009b18:	80800007 	ldb	r2,0(r16)
 1009b1c:	103ffc1e 	bne	r2,zero,1009b10 <__alt_data_end+0xff009b10>
 1009b20:	85e3c83a 	sub	r17,r16,r23
 1009b24:	88000e26 	beq	r17,zero,1009b60 <___svfprintf_internal_r+0x114>
 1009b28:	d8c02017 	ldw	r3,128(sp)
 1009b2c:	d8801f17 	ldw	r2,124(sp)
 1009b30:	45c00015 	stw	r23,0(r8)
 1009b34:	1c47883a 	add	r3,r3,r17
 1009b38:	10800044 	addi	r2,r2,1
 1009b3c:	d8c02015 	stw	r3,128(sp)
 1009b40:	44400115 	stw	r17,4(r8)
 1009b44:	d8801f15 	stw	r2,124(sp)
 1009b48:	00c001c4 	movi	r3,7
 1009b4c:	18809716 	blt	r3,r2,1009dac <___svfprintf_internal_r+0x360>
 1009b50:	42000204 	addi	r8,r8,8
 1009b54:	d9402f17 	ldw	r5,188(sp)
 1009b58:	2c4b883a 	add	r5,r5,r17
 1009b5c:	d9402f15 	stw	r5,188(sp)
 1009b60:	80800007 	ldb	r2,0(r16)
 1009b64:	10009826 	beq	r2,zero,1009dc8 <___svfprintf_internal_r+0x37c>
 1009b68:	84400047 	ldb	r17,1(r16)
 1009b6c:	00bfffc4 	movi	r2,-1
 1009b70:	85c00044 	addi	r23,r16,1
 1009b74:	d8002785 	stb	zero,158(sp)
 1009b78:	0007883a 	mov	r3,zero
 1009b7c:	000f883a 	mov	r7,zero
 1009b80:	d8802915 	stw	r2,164(sp)
 1009b84:	d8003115 	stw	zero,196(sp)
 1009b88:	0025883a 	mov	r18,zero
 1009b8c:	01401604 	movi	r5,88
 1009b90:	01800244 	movi	r6,9
 1009b94:	02800a84 	movi	r10,42
 1009b98:	02401b04 	movi	r9,108
 1009b9c:	bdc00044 	addi	r23,r23,1
 1009ba0:	88bff804 	addi	r2,r17,-32
 1009ba4:	2882f036 	bltu	r5,r2,100a768 <___svfprintf_internal_r+0xd1c>
 1009ba8:	100490ba 	slli	r2,r2,2
 1009bac:	01004074 	movhi	r4,257
 1009bb0:	2126f004 	addi	r4,r4,-25664
 1009bb4:	1105883a 	add	r2,r2,r4
 1009bb8:	10800017 	ldw	r2,0(r2)
 1009bbc:	1000683a 	jmp	r2
 1009bc0:	0100a6d0 	cmplti	r4,zero,667
 1009bc4:	0100a768 	cmpgeui	r4,zero,669
 1009bc8:	0100a768 	cmpgeui	r4,zero,669
 1009bcc:	0100a6c4 	movi	r4,667
 1009bd0:	0100a768 	cmpgeui	r4,zero,669
 1009bd4:	0100a768 	cmpgeui	r4,zero,669
 1009bd8:	0100a768 	cmpgeui	r4,zero,669
 1009bdc:	0100a768 	cmpgeui	r4,zero,669
 1009be0:	0100a768 	cmpgeui	r4,zero,669
 1009be4:	0100a768 	cmpgeui	r4,zero,669
 1009be8:	01009e24 	muli	r4,zero,632
 1009bec:	0100a600 	call	100a60 <__alt_mem_sdram-0xeff5a0>
 1009bf0:	0100a768 	cmpgeui	r4,zero,669
 1009bf4:	01009d34 	movhi	r4,628
 1009bf8:	01009e4c 	andi	r4,zero,633
 1009bfc:	0100a768 	cmpgeui	r4,zero,669
 1009c00:	01009ec0 	call	1009ec <__alt_mem_sdram-0xeff614>
 1009c04:	01009e8c 	andi	r4,zero,634
 1009c08:	01009e8c 	andi	r4,zero,634
 1009c0c:	01009e8c 	andi	r4,zero,634
 1009c10:	01009e8c 	andi	r4,zero,634
 1009c14:	01009e8c 	andi	r4,zero,634
 1009c18:	01009e8c 	andi	r4,zero,634
 1009c1c:	01009e8c 	andi	r4,zero,634
 1009c20:	01009e8c 	andi	r4,zero,634
 1009c24:	01009e8c 	andi	r4,zero,634
 1009c28:	0100a768 	cmpgeui	r4,zero,669
 1009c2c:	0100a768 	cmpgeui	r4,zero,669
 1009c30:	0100a768 	cmpgeui	r4,zero,669
 1009c34:	0100a768 	cmpgeui	r4,zero,669
 1009c38:	0100a768 	cmpgeui	r4,zero,669
 1009c3c:	0100a768 	cmpgeui	r4,zero,669
 1009c40:	0100a768 	cmpgeui	r4,zero,669
 1009c44:	0100a768 	cmpgeui	r4,zero,669
 1009c48:	0100a768 	cmpgeui	r4,zero,669
 1009c4c:	0100a768 	cmpgeui	r4,zero,669
 1009c50:	01009f78 	rdprs	r4,zero,637
 1009c54:	01009ecc 	andi	r4,zero,635
 1009c58:	0100a768 	cmpgeui	r4,zero,669
 1009c5c:	01009ecc 	andi	r4,zero,635
 1009c60:	0100a768 	cmpgeui	r4,zero,669
 1009c64:	0100a768 	cmpgeui	r4,zero,669
 1009c68:	0100a768 	cmpgeui	r4,zero,669
 1009c6c:	0100a768 	cmpgeui	r4,zero,669
 1009c70:	01009f6c 	andhi	r4,zero,637
 1009c74:	0100a768 	cmpgeui	r4,zero,669
 1009c78:	0100a768 	cmpgeui	r4,zero,669
 1009c7c:	0100a034 	movhi	r4,640
 1009c80:	0100a768 	cmpgeui	r4,zero,669
 1009c84:	0100a768 	cmpgeui	r4,zero,669
 1009c88:	0100a768 	cmpgeui	r4,zero,669
 1009c8c:	0100a768 	cmpgeui	r4,zero,669
 1009c90:	0100a768 	cmpgeui	r4,zero,669
 1009c94:	0100a4a4 	muli	r4,zero,658
 1009c98:	0100a768 	cmpgeui	r4,zero,669
 1009c9c:	0100a768 	cmpgeui	r4,zero,669
 1009ca0:	0100a504 	movi	r4,660
 1009ca4:	0100a768 	cmpgeui	r4,zero,669
 1009ca8:	0100a768 	cmpgeui	r4,zero,669
 1009cac:	0100a768 	cmpgeui	r4,zero,669
 1009cb0:	0100a768 	cmpgeui	r4,zero,669
 1009cb4:	0100a768 	cmpgeui	r4,zero,669
 1009cb8:	0100a768 	cmpgeui	r4,zero,669
 1009cbc:	0100a768 	cmpgeui	r4,zero,669
 1009cc0:	0100a768 	cmpgeui	r4,zero,669
 1009cc4:	0100a768 	cmpgeui	r4,zero,669
 1009cc8:	0100a768 	cmpgeui	r4,zero,669
 1009ccc:	0100a5b4 	movhi	r4,662
 1009cd0:	0100a6f0 	cmpltui	r4,zero,667
 1009cd4:	01009ecc 	andi	r4,zero,635
 1009cd8:	01009ecc 	andi	r4,zero,635
 1009cdc:	01009ecc 	andi	r4,zero,635
 1009ce0:	0100a744 	movi	r4,669
 1009ce4:	0100a6f0 	cmpltui	r4,zero,667
 1009ce8:	0100a768 	cmpgeui	r4,zero,669
 1009cec:	0100a768 	cmpgeui	r4,zero,669
 1009cf0:	0100a700 	call	100a70 <__alt_mem_sdram-0xeff590>
 1009cf4:	0100a768 	cmpgeui	r4,zero,669
 1009cf8:	0100a710 	cmplti	r4,zero,668
 1009cfc:	0100a5f0 	cmpltui	r4,zero,663
 1009d00:	01009d40 	call	1009d4 <__alt_mem_sdram-0xeff62c>
 1009d04:	0100a610 	cmplti	r4,zero,664
 1009d08:	0100a768 	cmpgeui	r4,zero,669
 1009d0c:	0100a61c 	xori	r4,zero,664
 1009d10:	0100a768 	cmpgeui	r4,zero,669
 1009d14:	0100a678 	rdprs	r4,zero,665
 1009d18:	0100a768 	cmpgeui	r4,zero,669
 1009d1c:	0100a768 	cmpgeui	r4,zero,669
 1009d20:	0100a688 	cmpgei	r4,zero,666
 1009d24:	d9003117 	ldw	r4,196(sp)
 1009d28:	d8802d15 	stw	r2,180(sp)
 1009d2c:	0109c83a 	sub	r4,zero,r4
 1009d30:	d9003115 	stw	r4,196(sp)
 1009d34:	94800114 	ori	r18,r18,4
 1009d38:	bc400007 	ldb	r17,0(r23)
 1009d3c:	003f9706 	br	1009b9c <__alt_data_end+0xff009b9c>
 1009d40:	00800c04 	movi	r2,48
 1009d44:	d9002d17 	ldw	r4,180(sp)
 1009d48:	d9402917 	ldw	r5,164(sp)
 1009d4c:	d8802705 	stb	r2,156(sp)
 1009d50:	00801e04 	movi	r2,120
 1009d54:	d8802745 	stb	r2,157(sp)
 1009d58:	d8002785 	stb	zero,158(sp)
 1009d5c:	20c00104 	addi	r3,r4,4
 1009d60:	25000017 	ldw	r20,0(r4)
 1009d64:	002d883a 	mov	r22,zero
 1009d68:	90800094 	ori	r2,r18,2
 1009d6c:	28028616 	blt	r5,zero,100a788 <___svfprintf_internal_r+0xd3c>
 1009d70:	00bfdfc4 	movi	r2,-129
 1009d74:	90a4703a 	and	r18,r18,r2
 1009d78:	d8c02d15 	stw	r3,180(sp)
 1009d7c:	94800094 	ori	r18,r18,2
 1009d80:	a002731e 	bne	r20,zero,100a750 <___svfprintf_internal_r+0xd04>
 1009d84:	008040b4 	movhi	r2,258
 1009d88:	10aba004 	addi	r2,r2,-20864
 1009d8c:	d8803a15 	stw	r2,232(sp)
 1009d90:	04401e04 	movi	r17,120
 1009d94:	d8c02917 	ldw	r3,164(sp)
 1009d98:	0039883a 	mov	fp,zero
 1009d9c:	1801d526 	beq	r3,zero,100a4f4 <___svfprintf_internal_r+0xaa8>
 1009da0:	0029883a 	mov	r20,zero
 1009da4:	002d883a 	mov	r22,zero
 1009da8:	0001f106 	br	100a570 <___svfprintf_internal_r+0xb24>
 1009dac:	d9402c17 	ldw	r5,176(sp)
 1009db0:	d9801e04 	addi	r6,sp,120
 1009db4:	9809883a 	mov	r4,r19
 1009db8:	10104580 	call	1010458 <__ssprint_r>
 1009dbc:	1000081e 	bne	r2,zero,1009de0 <___svfprintf_internal_r+0x394>
 1009dc0:	da000404 	addi	r8,sp,16
 1009dc4:	003f6306 	br	1009b54 <__alt_data_end+0xff009b54>
 1009dc8:	d8802017 	ldw	r2,128(sp)
 1009dcc:	10000426 	beq	r2,zero,1009de0 <___svfprintf_internal_r+0x394>
 1009dd0:	d9402c17 	ldw	r5,176(sp)
 1009dd4:	d9003917 	ldw	r4,228(sp)
 1009dd8:	d9801e04 	addi	r6,sp,120
 1009ddc:	10104580 	call	1010458 <__ssprint_r>
 1009de0:	d8802c17 	ldw	r2,176(sp)
 1009de4:	10c0030b 	ldhu	r3,12(r2)
 1009de8:	d8802f17 	ldw	r2,188(sp)
 1009dec:	18c0100c 	andi	r3,r3,64
 1009df0:	1805f51e 	bne	r3,zero,100b5c8 <___svfprintf_internal_r+0x1b7c>
 1009df4:	dfc04817 	ldw	ra,288(sp)
 1009df8:	df004717 	ldw	fp,284(sp)
 1009dfc:	ddc04617 	ldw	r23,280(sp)
 1009e00:	dd804517 	ldw	r22,276(sp)
 1009e04:	dd404417 	ldw	r21,272(sp)
 1009e08:	dd004317 	ldw	r20,268(sp)
 1009e0c:	dcc04217 	ldw	r19,264(sp)
 1009e10:	dc804117 	ldw	r18,260(sp)
 1009e14:	dc404017 	ldw	r17,256(sp)
 1009e18:	dc003f17 	ldw	r16,252(sp)
 1009e1c:	dec04904 	addi	sp,sp,292
 1009e20:	f800283a 	ret
 1009e24:	d8802d17 	ldw	r2,180(sp)
 1009e28:	d9002d17 	ldw	r4,180(sp)
 1009e2c:	10800017 	ldw	r2,0(r2)
 1009e30:	d8803115 	stw	r2,196(sp)
 1009e34:	20800104 	addi	r2,r4,4
 1009e38:	d9003117 	ldw	r4,196(sp)
 1009e3c:	203fb916 	blt	r4,zero,1009d24 <__alt_data_end+0xff009d24>
 1009e40:	d8802d15 	stw	r2,180(sp)
 1009e44:	bc400007 	ldb	r17,0(r23)
 1009e48:	003f5406 	br	1009b9c <__alt_data_end+0xff009b9c>
 1009e4c:	bc400007 	ldb	r17,0(r23)
 1009e50:	bac00044 	addi	r11,r23,1
 1009e54:	8a873926 	beq	r17,r10,100bb3c <___svfprintf_internal_r+0x20f0>
 1009e58:	88bff404 	addi	r2,r17,-48
 1009e5c:	0009883a 	mov	r4,zero
 1009e60:	30868836 	bltu	r6,r2,100b884 <___svfprintf_internal_r+0x1e38>
 1009e64:	5c400007 	ldb	r17,0(r11)
 1009e68:	210002a4 	muli	r4,r4,10
 1009e6c:	5dc00044 	addi	r23,r11,1
 1009e70:	b817883a 	mov	r11,r23
 1009e74:	2089883a 	add	r4,r4,r2
 1009e78:	88bff404 	addi	r2,r17,-48
 1009e7c:	30bff92e 	bgeu	r6,r2,1009e64 <__alt_data_end+0xff009e64>
 1009e80:	2005d716 	blt	r4,zero,100b5e0 <___svfprintf_internal_r+0x1b94>
 1009e84:	d9002915 	stw	r4,164(sp)
 1009e88:	003f4506 	br	1009ba0 <__alt_data_end+0xff009ba0>
 1009e8c:	b809883a 	mov	r4,r23
 1009e90:	d8003115 	stw	zero,196(sp)
 1009e94:	88bff404 	addi	r2,r17,-48
 1009e98:	0017883a 	mov	r11,zero
 1009e9c:	24400007 	ldb	r17,0(r4)
 1009ea0:	5ac002a4 	muli	r11,r11,10
 1009ea4:	bdc00044 	addi	r23,r23,1
 1009ea8:	b809883a 	mov	r4,r23
 1009eac:	12d7883a 	add	r11,r2,r11
 1009eb0:	88bff404 	addi	r2,r17,-48
 1009eb4:	30bff92e 	bgeu	r6,r2,1009e9c <__alt_data_end+0xff009e9c>
 1009eb8:	dac03115 	stw	r11,196(sp)
 1009ebc:	003f3806 	br	1009ba0 <__alt_data_end+0xff009ba0>
 1009ec0:	94802014 	ori	r18,r18,128
 1009ec4:	bc400007 	ldb	r17,0(r23)
 1009ec8:	003f3406 	br	1009b9c <__alt_data_end+0xff009b9c>
 1009ecc:	18c03fcc 	andi	r3,r3,255
 1009ed0:	1807471e 	bne	r3,zero,100bbf0 <___svfprintf_internal_r+0x21a4>
 1009ed4:	9080020c 	andi	r2,r18,8
 1009ed8:	10047d26 	beq	r2,zero,100b0d0 <___svfprintf_internal_r+0x1684>
 1009edc:	d8c02d17 	ldw	r3,180(sp)
 1009ee0:	d9002d17 	ldw	r4,180(sp)
 1009ee4:	d9402d17 	ldw	r5,180(sp)
 1009ee8:	18c00017 	ldw	r3,0(r3)
 1009eec:	21000117 	ldw	r4,4(r4)
 1009ef0:	29400204 	addi	r5,r5,8
 1009ef4:	d8c03615 	stw	r3,216(sp)
 1009ef8:	d9003715 	stw	r4,220(sp)
 1009efc:	d9402d15 	stw	r5,180(sp)
 1009f00:	d9003617 	ldw	r4,216(sp)
 1009f04:	d9403717 	ldw	r5,220(sp)
 1009f08:	da003e15 	stw	r8,248(sp)
 1009f0c:	04000044 	movi	r16,1
 1009f10:	100ff500 	call	100ff50 <__fpclassifyd>
 1009f14:	da003e17 	ldw	r8,248(sp)
 1009f18:	14044b1e 	bne	r2,r16,100b048 <___svfprintf_internal_r+0x15fc>
 1009f1c:	d9003617 	ldw	r4,216(sp)
 1009f20:	d9403717 	ldw	r5,220(sp)
 1009f24:	000d883a 	mov	r6,zero
 1009f28:	000f883a 	mov	r7,zero
 1009f2c:	10161280 	call	1016128 <__ledf2>
 1009f30:	da003e17 	ldw	r8,248(sp)
 1009f34:	1005f316 	blt	r2,zero,100b704 <___svfprintf_internal_r+0x1cb8>
 1009f38:	df002783 	ldbu	fp,158(sp)
 1009f3c:	008011c4 	movi	r2,71
 1009f40:	1445590e 	bge	r2,r17,100b4a8 <___svfprintf_internal_r+0x1a5c>
 1009f44:	040040b4 	movhi	r16,258
 1009f48:	842b9804 	addi	r16,r16,-20896
 1009f4c:	00c000c4 	movi	r3,3
 1009f50:	00bfdfc4 	movi	r2,-129
 1009f54:	d8c02a15 	stw	r3,168(sp)
 1009f58:	90a4703a 	and	r18,r18,r2
 1009f5c:	d8c02e15 	stw	r3,184(sp)
 1009f60:	d8002915 	stw	zero,164(sp)
 1009f64:	d8003215 	stw	zero,200(sp)
 1009f68:	00006606 	br	100a104 <___svfprintf_internal_r+0x6b8>
 1009f6c:	94800214 	ori	r18,r18,8
 1009f70:	bc400007 	ldb	r17,0(r23)
 1009f74:	003f0906 	br	1009b9c <__alt_data_end+0xff009b9c>
 1009f78:	18c03fcc 	andi	r3,r3,255
 1009f7c:	1807181e 	bne	r3,zero,100bbe0 <___svfprintf_internal_r+0x2194>
 1009f80:	94800414 	ori	r18,r18,16
 1009f84:	9080080c 	andi	r2,r18,32
 1009f88:	10039626 	beq	r2,zero,100ade4 <___svfprintf_internal_r+0x1398>
 1009f8c:	d9402d17 	ldw	r5,180(sp)
 1009f90:	28800117 	ldw	r2,4(r5)
 1009f94:	2d000017 	ldw	r20,0(r5)
 1009f98:	29400204 	addi	r5,r5,8
 1009f9c:	d9402d15 	stw	r5,180(sp)
 1009fa0:	102d883a 	mov	r22,r2
 1009fa4:	10039816 	blt	r2,zero,100ae08 <___svfprintf_internal_r+0x13bc>
 1009fa8:	d9402917 	ldw	r5,164(sp)
 1009fac:	df002783 	ldbu	fp,158(sp)
 1009fb0:	2803ab16 	blt	r5,zero,100ae60 <___svfprintf_internal_r+0x1414>
 1009fb4:	00ffdfc4 	movi	r3,-129
 1009fb8:	a584b03a 	or	r2,r20,r22
 1009fbc:	90e4703a 	and	r18,r18,r3
 1009fc0:	10014a26 	beq	r2,zero,100a4ec <___svfprintf_internal_r+0xaa0>
 1009fc4:	b0034b26 	beq	r22,zero,100acf4 <___svfprintf_internal_r+0x12a8>
 1009fc8:	dc402a15 	stw	r17,168(sp)
 1009fcc:	dc001e04 	addi	r16,sp,120
 1009fd0:	b023883a 	mov	r17,r22
 1009fd4:	402d883a 	mov	r22,r8
 1009fd8:	a009883a 	mov	r4,r20
 1009fdc:	880b883a 	mov	r5,r17
 1009fe0:	01800284 	movi	r6,10
 1009fe4:	000f883a 	mov	r7,zero
 1009fe8:	10147440 	call	1014744 <__umoddi3>
 1009fec:	10800c04 	addi	r2,r2,48
 1009ff0:	843fffc4 	addi	r16,r16,-1
 1009ff4:	a009883a 	mov	r4,r20
 1009ff8:	880b883a 	mov	r5,r17
 1009ffc:	80800005 	stb	r2,0(r16)
 100a000:	01800284 	movi	r6,10
 100a004:	000f883a 	mov	r7,zero
 100a008:	10141cc0 	call	10141cc <__udivdi3>
 100a00c:	1029883a 	mov	r20,r2
 100a010:	10c4b03a 	or	r2,r2,r3
 100a014:	1823883a 	mov	r17,r3
 100a018:	103fef1e 	bne	r2,zero,1009fd8 <__alt_data_end+0xff009fd8>
 100a01c:	d8c02817 	ldw	r3,160(sp)
 100a020:	dc402a17 	ldw	r17,168(sp)
 100a024:	b011883a 	mov	r8,r22
 100a028:	1c07c83a 	sub	r3,r3,r16
 100a02c:	d8c02e15 	stw	r3,184(sp)
 100a030:	00002e06 	br	100a0ec <___svfprintf_internal_r+0x6a0>
 100a034:	18c03fcc 	andi	r3,r3,255
 100a038:	1806e71e 	bne	r3,zero,100bbd8 <___svfprintf_internal_r+0x218c>
 100a03c:	94800414 	ori	r18,r18,16
 100a040:	9080080c 	andi	r2,r18,32
 100a044:	1002d426 	beq	r2,zero,100ab98 <___svfprintf_internal_r+0x114c>
 100a048:	d9402d17 	ldw	r5,180(sp)
 100a04c:	d8c02917 	ldw	r3,164(sp)
 100a050:	d8002785 	stb	zero,158(sp)
 100a054:	28800204 	addi	r2,r5,8
 100a058:	2d000017 	ldw	r20,0(r5)
 100a05c:	2d800117 	ldw	r22,4(r5)
 100a060:	18041516 	blt	r3,zero,100b0b8 <___svfprintf_internal_r+0x166c>
 100a064:	013fdfc4 	movi	r4,-129
 100a068:	a586b03a 	or	r3,r20,r22
 100a06c:	d8802d15 	stw	r2,180(sp)
 100a070:	9124703a 	and	r18,r18,r4
 100a074:	1802d51e 	bne	r3,zero,100abcc <___svfprintf_internal_r+0x1180>
 100a078:	d9402917 	ldw	r5,164(sp)
 100a07c:	0039883a 	mov	fp,zero
 100a080:	2806be26 	beq	r5,zero,100bb7c <___svfprintf_internal_r+0x2130>
 100a084:	0029883a 	mov	r20,zero
 100a088:	002d883a 	mov	r22,zero
 100a08c:	dc001e04 	addi	r16,sp,120
 100a090:	a006d0fa 	srli	r3,r20,3
 100a094:	b008977a 	slli	r4,r22,29
 100a098:	b02cd0fa 	srli	r22,r22,3
 100a09c:	a50001cc 	andi	r20,r20,7
 100a0a0:	a0800c04 	addi	r2,r20,48
 100a0a4:	843fffc4 	addi	r16,r16,-1
 100a0a8:	20e8b03a 	or	r20,r4,r3
 100a0ac:	80800005 	stb	r2,0(r16)
 100a0b0:	a586b03a 	or	r3,r20,r22
 100a0b4:	183ff61e 	bne	r3,zero,100a090 <__alt_data_end+0xff00a090>
 100a0b8:	90c0004c 	andi	r3,r18,1
 100a0bc:	18013926 	beq	r3,zero,100a5a4 <___svfprintf_internal_r+0xb58>
 100a0c0:	10803fcc 	andi	r2,r2,255
 100a0c4:	1080201c 	xori	r2,r2,128
 100a0c8:	10bfe004 	addi	r2,r2,-128
 100a0cc:	00c00c04 	movi	r3,48
 100a0d0:	10c13426 	beq	r2,r3,100a5a4 <___svfprintf_internal_r+0xb58>
 100a0d4:	80ffffc5 	stb	r3,-1(r16)
 100a0d8:	d8c02817 	ldw	r3,160(sp)
 100a0dc:	80bfffc4 	addi	r2,r16,-1
 100a0e0:	1021883a 	mov	r16,r2
 100a0e4:	1887c83a 	sub	r3,r3,r2
 100a0e8:	d8c02e15 	stw	r3,184(sp)
 100a0ec:	d8802e17 	ldw	r2,184(sp)
 100a0f0:	d9002917 	ldw	r4,164(sp)
 100a0f4:	1100010e 	bge	r2,r4,100a0fc <___svfprintf_internal_r+0x6b0>
 100a0f8:	2005883a 	mov	r2,r4
 100a0fc:	d8802a15 	stw	r2,168(sp)
 100a100:	d8003215 	stw	zero,200(sp)
 100a104:	e7003fcc 	andi	fp,fp,255
 100a108:	e700201c 	xori	fp,fp,128
 100a10c:	e73fe004 	addi	fp,fp,-128
 100a110:	e0000326 	beq	fp,zero,100a120 <___svfprintf_internal_r+0x6d4>
 100a114:	d8c02a17 	ldw	r3,168(sp)
 100a118:	18c00044 	addi	r3,r3,1
 100a11c:	d8c02a15 	stw	r3,168(sp)
 100a120:	90c0008c 	andi	r3,r18,2
 100a124:	d8c02b15 	stw	r3,172(sp)
 100a128:	18000326 	beq	r3,zero,100a138 <___svfprintf_internal_r+0x6ec>
 100a12c:	d8c02a17 	ldw	r3,168(sp)
 100a130:	18c00084 	addi	r3,r3,2
 100a134:	d8c02a15 	stw	r3,168(sp)
 100a138:	90c0210c 	andi	r3,r18,132
 100a13c:	d8c03015 	stw	r3,192(sp)
 100a140:	1801a11e 	bne	r3,zero,100a7c8 <___svfprintf_internal_r+0xd7c>
 100a144:	d9003117 	ldw	r4,196(sp)
 100a148:	d8c02a17 	ldw	r3,168(sp)
 100a14c:	20e9c83a 	sub	r20,r4,r3
 100a150:	05019d0e 	bge	zero,r20,100a7c8 <___svfprintf_internal_r+0xd7c>
 100a154:	02400404 	movi	r9,16
 100a158:	d8c02017 	ldw	r3,128(sp)
 100a15c:	d8801f17 	ldw	r2,124(sp)
 100a160:	4d051b0e 	bge	r9,r20,100b5d0 <___svfprintf_internal_r+0x1b84>
 100a164:	014040b4 	movhi	r5,258
 100a168:	296bab84 	addi	r5,r5,-20818
 100a16c:	dc403c15 	stw	r17,240(sp)
 100a170:	d9403515 	stw	r5,212(sp)
 100a174:	a023883a 	mov	r17,r20
 100a178:	482d883a 	mov	r22,r9
 100a17c:	9029883a 	mov	r20,r18
 100a180:	070001c4 	movi	fp,7
 100a184:	8025883a 	mov	r18,r16
 100a188:	dc002c17 	ldw	r16,176(sp)
 100a18c:	00000306 	br	100a19c <___svfprintf_internal_r+0x750>
 100a190:	8c7ffc04 	addi	r17,r17,-16
 100a194:	42000204 	addi	r8,r8,8
 100a198:	b440130e 	bge	r22,r17,100a1e8 <___svfprintf_internal_r+0x79c>
 100a19c:	010040b4 	movhi	r4,258
 100a1a0:	18c00404 	addi	r3,r3,16
 100a1a4:	10800044 	addi	r2,r2,1
 100a1a8:	212bab84 	addi	r4,r4,-20818
 100a1ac:	41000015 	stw	r4,0(r8)
 100a1b0:	45800115 	stw	r22,4(r8)
 100a1b4:	d8c02015 	stw	r3,128(sp)
 100a1b8:	d8801f15 	stw	r2,124(sp)
 100a1bc:	e0bff40e 	bge	fp,r2,100a190 <__alt_data_end+0xff00a190>
 100a1c0:	d9801e04 	addi	r6,sp,120
 100a1c4:	800b883a 	mov	r5,r16
 100a1c8:	9809883a 	mov	r4,r19
 100a1cc:	10104580 	call	1010458 <__ssprint_r>
 100a1d0:	103f031e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a1d4:	8c7ffc04 	addi	r17,r17,-16
 100a1d8:	d8c02017 	ldw	r3,128(sp)
 100a1dc:	d8801f17 	ldw	r2,124(sp)
 100a1e0:	da000404 	addi	r8,sp,16
 100a1e4:	b47fed16 	blt	r22,r17,100a19c <__alt_data_end+0xff00a19c>
 100a1e8:	9021883a 	mov	r16,r18
 100a1ec:	a025883a 	mov	r18,r20
 100a1f0:	8829883a 	mov	r20,r17
 100a1f4:	dc403c17 	ldw	r17,240(sp)
 100a1f8:	d9403517 	ldw	r5,212(sp)
 100a1fc:	a0c7883a 	add	r3,r20,r3
 100a200:	10800044 	addi	r2,r2,1
 100a204:	41400015 	stw	r5,0(r8)
 100a208:	45000115 	stw	r20,4(r8)
 100a20c:	d8c02015 	stw	r3,128(sp)
 100a210:	d8801f15 	stw	r2,124(sp)
 100a214:	010001c4 	movi	r4,7
 100a218:	20829f16 	blt	r4,r2,100ac98 <___svfprintf_internal_r+0x124c>
 100a21c:	df002787 	ldb	fp,158(sp)
 100a220:	42000204 	addi	r8,r8,8
 100a224:	e0000c26 	beq	fp,zero,100a258 <___svfprintf_internal_r+0x80c>
 100a228:	d8801f17 	ldw	r2,124(sp)
 100a22c:	d9002784 	addi	r4,sp,158
 100a230:	18c00044 	addi	r3,r3,1
 100a234:	10800044 	addi	r2,r2,1
 100a238:	41000015 	stw	r4,0(r8)
 100a23c:	01000044 	movi	r4,1
 100a240:	41000115 	stw	r4,4(r8)
 100a244:	d8c02015 	stw	r3,128(sp)
 100a248:	d8801f15 	stw	r2,124(sp)
 100a24c:	010001c4 	movi	r4,7
 100a250:	20823816 	blt	r4,r2,100ab34 <___svfprintf_internal_r+0x10e8>
 100a254:	42000204 	addi	r8,r8,8
 100a258:	d8802b17 	ldw	r2,172(sp)
 100a25c:	10000c26 	beq	r2,zero,100a290 <___svfprintf_internal_r+0x844>
 100a260:	d8801f17 	ldw	r2,124(sp)
 100a264:	d9002704 	addi	r4,sp,156
 100a268:	18c00084 	addi	r3,r3,2
 100a26c:	10800044 	addi	r2,r2,1
 100a270:	41000015 	stw	r4,0(r8)
 100a274:	01000084 	movi	r4,2
 100a278:	41000115 	stw	r4,4(r8)
 100a27c:	d8c02015 	stw	r3,128(sp)
 100a280:	d8801f15 	stw	r2,124(sp)
 100a284:	010001c4 	movi	r4,7
 100a288:	20823216 	blt	r4,r2,100ab54 <___svfprintf_internal_r+0x1108>
 100a28c:	42000204 	addi	r8,r8,8
 100a290:	d9003017 	ldw	r4,192(sp)
 100a294:	00802004 	movi	r2,128
 100a298:	20819726 	beq	r4,r2,100a8f8 <___svfprintf_internal_r+0xeac>
 100a29c:	d9402917 	ldw	r5,164(sp)
 100a2a0:	d8802e17 	ldw	r2,184(sp)
 100a2a4:	28adc83a 	sub	r22,r5,r2
 100a2a8:	05802f0e 	bge	zero,r22,100a368 <___svfprintf_internal_r+0x91c>
 100a2ac:	07000404 	movi	fp,16
 100a2b0:	d8801f17 	ldw	r2,124(sp)
 100a2b4:	e583c00e 	bge	fp,r22,100b1b8 <___svfprintf_internal_r+0x176c>
 100a2b8:	014040b4 	movhi	r5,258
 100a2bc:	296ba784 	addi	r5,r5,-20834
 100a2c0:	dc402915 	stw	r17,164(sp)
 100a2c4:	d9402b15 	stw	r5,172(sp)
 100a2c8:	b023883a 	mov	r17,r22
 100a2cc:	050001c4 	movi	r20,7
 100a2d0:	902d883a 	mov	r22,r18
 100a2d4:	8025883a 	mov	r18,r16
 100a2d8:	dc002c17 	ldw	r16,176(sp)
 100a2dc:	00000306 	br	100a2ec <___svfprintf_internal_r+0x8a0>
 100a2e0:	8c7ffc04 	addi	r17,r17,-16
 100a2e4:	42000204 	addi	r8,r8,8
 100a2e8:	e440110e 	bge	fp,r17,100a330 <___svfprintf_internal_r+0x8e4>
 100a2ec:	18c00404 	addi	r3,r3,16
 100a2f0:	10800044 	addi	r2,r2,1
 100a2f4:	45400015 	stw	r21,0(r8)
 100a2f8:	47000115 	stw	fp,4(r8)
 100a2fc:	d8c02015 	stw	r3,128(sp)
 100a300:	d8801f15 	stw	r2,124(sp)
 100a304:	a0bff60e 	bge	r20,r2,100a2e0 <__alt_data_end+0xff00a2e0>
 100a308:	d9801e04 	addi	r6,sp,120
 100a30c:	800b883a 	mov	r5,r16
 100a310:	9809883a 	mov	r4,r19
 100a314:	10104580 	call	1010458 <__ssprint_r>
 100a318:	103eb11e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a31c:	8c7ffc04 	addi	r17,r17,-16
 100a320:	d8c02017 	ldw	r3,128(sp)
 100a324:	d8801f17 	ldw	r2,124(sp)
 100a328:	da000404 	addi	r8,sp,16
 100a32c:	e47fef16 	blt	fp,r17,100a2ec <__alt_data_end+0xff00a2ec>
 100a330:	9021883a 	mov	r16,r18
 100a334:	b025883a 	mov	r18,r22
 100a338:	882d883a 	mov	r22,r17
 100a33c:	dc402917 	ldw	r17,164(sp)
 100a340:	d9002b17 	ldw	r4,172(sp)
 100a344:	1d87883a 	add	r3,r3,r22
 100a348:	10800044 	addi	r2,r2,1
 100a34c:	41000015 	stw	r4,0(r8)
 100a350:	45800115 	stw	r22,4(r8)
 100a354:	d8c02015 	stw	r3,128(sp)
 100a358:	d8801f15 	stw	r2,124(sp)
 100a35c:	010001c4 	movi	r4,7
 100a360:	2081ec16 	blt	r4,r2,100ab14 <___svfprintf_internal_r+0x10c8>
 100a364:	42000204 	addi	r8,r8,8
 100a368:	9080400c 	andi	r2,r18,256
 100a36c:	1001181e 	bne	r2,zero,100a7d0 <___svfprintf_internal_r+0xd84>
 100a370:	d9402e17 	ldw	r5,184(sp)
 100a374:	d8801f17 	ldw	r2,124(sp)
 100a378:	44000015 	stw	r16,0(r8)
 100a37c:	1947883a 	add	r3,r3,r5
 100a380:	10800044 	addi	r2,r2,1
 100a384:	41400115 	stw	r5,4(r8)
 100a388:	d8c02015 	stw	r3,128(sp)
 100a38c:	d8801f15 	stw	r2,124(sp)
 100a390:	010001c4 	movi	r4,7
 100a394:	2081d116 	blt	r4,r2,100aadc <___svfprintf_internal_r+0x1090>
 100a398:	42000204 	addi	r8,r8,8
 100a39c:	9480010c 	andi	r18,r18,4
 100a3a0:	90003226 	beq	r18,zero,100a46c <___svfprintf_internal_r+0xa20>
 100a3a4:	d9403117 	ldw	r5,196(sp)
 100a3a8:	d8802a17 	ldw	r2,168(sp)
 100a3ac:	28a1c83a 	sub	r16,r5,r2
 100a3b0:	04002e0e 	bge	zero,r16,100a46c <___svfprintf_internal_r+0xa20>
 100a3b4:	04400404 	movi	r17,16
 100a3b8:	d8801f17 	ldw	r2,124(sp)
 100a3bc:	8c04b90e 	bge	r17,r16,100b6a4 <___svfprintf_internal_r+0x1c58>
 100a3c0:	014040b4 	movhi	r5,258
 100a3c4:	296bab84 	addi	r5,r5,-20818
 100a3c8:	d9403515 	stw	r5,212(sp)
 100a3cc:	048001c4 	movi	r18,7
 100a3d0:	dd002c17 	ldw	r20,176(sp)
 100a3d4:	00000306 	br	100a3e4 <___svfprintf_internal_r+0x998>
 100a3d8:	843ffc04 	addi	r16,r16,-16
 100a3dc:	42000204 	addi	r8,r8,8
 100a3e0:	8c00130e 	bge	r17,r16,100a430 <___svfprintf_internal_r+0x9e4>
 100a3e4:	010040b4 	movhi	r4,258
 100a3e8:	18c00404 	addi	r3,r3,16
 100a3ec:	10800044 	addi	r2,r2,1
 100a3f0:	212bab84 	addi	r4,r4,-20818
 100a3f4:	41000015 	stw	r4,0(r8)
 100a3f8:	44400115 	stw	r17,4(r8)
 100a3fc:	d8c02015 	stw	r3,128(sp)
 100a400:	d8801f15 	stw	r2,124(sp)
 100a404:	90bff40e 	bge	r18,r2,100a3d8 <__alt_data_end+0xff00a3d8>
 100a408:	d9801e04 	addi	r6,sp,120
 100a40c:	a00b883a 	mov	r5,r20
 100a410:	9809883a 	mov	r4,r19
 100a414:	10104580 	call	1010458 <__ssprint_r>
 100a418:	103e711e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a41c:	843ffc04 	addi	r16,r16,-16
 100a420:	d8c02017 	ldw	r3,128(sp)
 100a424:	d8801f17 	ldw	r2,124(sp)
 100a428:	da000404 	addi	r8,sp,16
 100a42c:	8c3fed16 	blt	r17,r16,100a3e4 <__alt_data_end+0xff00a3e4>
 100a430:	d9403517 	ldw	r5,212(sp)
 100a434:	1c07883a 	add	r3,r3,r16
 100a438:	10800044 	addi	r2,r2,1
 100a43c:	41400015 	stw	r5,0(r8)
 100a440:	44000115 	stw	r16,4(r8)
 100a444:	d8c02015 	stw	r3,128(sp)
 100a448:	d8801f15 	stw	r2,124(sp)
 100a44c:	010001c4 	movi	r4,7
 100a450:	2080060e 	bge	r4,r2,100a46c <___svfprintf_internal_r+0xa20>
 100a454:	d9402c17 	ldw	r5,176(sp)
 100a458:	d9801e04 	addi	r6,sp,120
 100a45c:	9809883a 	mov	r4,r19
 100a460:	10104580 	call	1010458 <__ssprint_r>
 100a464:	103e5e1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a468:	d8c02017 	ldw	r3,128(sp)
 100a46c:	d8803117 	ldw	r2,196(sp)
 100a470:	d9002a17 	ldw	r4,168(sp)
 100a474:	1100010e 	bge	r2,r4,100a47c <___svfprintf_internal_r+0xa30>
 100a478:	2005883a 	mov	r2,r4
 100a47c:	d9402f17 	ldw	r5,188(sp)
 100a480:	288b883a 	add	r5,r5,r2
 100a484:	d9402f15 	stw	r5,188(sp)
 100a488:	18019c1e 	bne	r3,zero,100aafc <___svfprintf_internal_r+0x10b0>
 100a48c:	b8800007 	ldb	r2,0(r23)
 100a490:	d8001f15 	stw	zero,124(sp)
 100a494:	da000404 	addi	r8,sp,16
 100a498:	103d991e 	bne	r2,zero,1009b00 <__alt_data_end+0xff009b00>
 100a49c:	b821883a 	mov	r16,r23
 100a4a0:	003daf06 	br	1009b60 <__alt_data_end+0xff009b60>
 100a4a4:	18c03fcc 	andi	r3,r3,255
 100a4a8:	1805c71e 	bne	r3,zero,100bbc8 <___svfprintf_internal_r+0x217c>
 100a4ac:	94800414 	ori	r18,r18,16
 100a4b0:	9080080c 	andi	r2,r18,32
 100a4b4:	10020126 	beq	r2,zero,100acbc <___svfprintf_internal_r+0x1270>
 100a4b8:	d8802d17 	ldw	r2,180(sp)
 100a4bc:	d9002917 	ldw	r4,164(sp)
 100a4c0:	d8002785 	stb	zero,158(sp)
 100a4c4:	10c00204 	addi	r3,r2,8
 100a4c8:	15000017 	ldw	r20,0(r2)
 100a4cc:	15800117 	ldw	r22,4(r2)
 100a4d0:	20038e16 	blt	r4,zero,100b30c <___svfprintf_internal_r+0x18c0>
 100a4d4:	013fdfc4 	movi	r4,-129
 100a4d8:	a584b03a 	or	r2,r20,r22
 100a4dc:	d8c02d15 	stw	r3,180(sp)
 100a4e0:	9124703a 	and	r18,r18,r4
 100a4e4:	0039883a 	mov	fp,zero
 100a4e8:	103eb61e 	bne	r2,zero,1009fc4 <__alt_data_end+0xff009fc4>
 100a4ec:	d8802917 	ldw	r2,164(sp)
 100a4f0:	1002c81e 	bne	r2,zero,100b014 <___svfprintf_internal_r+0x15c8>
 100a4f4:	d8002915 	stw	zero,164(sp)
 100a4f8:	d8002e15 	stw	zero,184(sp)
 100a4fc:	dc001e04 	addi	r16,sp,120
 100a500:	003efa06 	br	100a0ec <__alt_data_end+0xff00a0ec>
 100a504:	18c03fcc 	andi	r3,r3,255
 100a508:	1805ad1e 	bne	r3,zero,100bbc0 <___svfprintf_internal_r+0x2174>
 100a50c:	014040b4 	movhi	r5,258
 100a510:	296b9b04 	addi	r5,r5,-20884
 100a514:	d9403a15 	stw	r5,232(sp)
 100a518:	9080080c 	andi	r2,r18,32
 100a51c:	10006126 	beq	r2,zero,100a6a4 <___svfprintf_internal_r+0xc58>
 100a520:	d8802d17 	ldw	r2,180(sp)
 100a524:	15000017 	ldw	r20,0(r2)
 100a528:	15800117 	ldw	r22,4(r2)
 100a52c:	10800204 	addi	r2,r2,8
 100a530:	d8802d15 	stw	r2,180(sp)
 100a534:	9080004c 	andi	r2,r18,1
 100a538:	10018e26 	beq	r2,zero,100ab74 <___svfprintf_internal_r+0x1128>
 100a53c:	a584b03a 	or	r2,r20,r22
 100a540:	10030926 	beq	r2,zero,100b168 <___svfprintf_internal_r+0x171c>
 100a544:	d8c02917 	ldw	r3,164(sp)
 100a548:	00800c04 	movi	r2,48
 100a54c:	d8802705 	stb	r2,156(sp)
 100a550:	dc402745 	stb	r17,157(sp)
 100a554:	d8002785 	stb	zero,158(sp)
 100a558:	90800094 	ori	r2,r18,2
 100a55c:	18048716 	blt	r3,zero,100b77c <___svfprintf_internal_r+0x1d30>
 100a560:	00bfdfc4 	movi	r2,-129
 100a564:	90a4703a 	and	r18,r18,r2
 100a568:	94800094 	ori	r18,r18,2
 100a56c:	0039883a 	mov	fp,zero
 100a570:	d9003a17 	ldw	r4,232(sp)
 100a574:	dc001e04 	addi	r16,sp,120
 100a578:	a08003cc 	andi	r2,r20,15
 100a57c:	b006973a 	slli	r3,r22,28
 100a580:	2085883a 	add	r2,r4,r2
 100a584:	a028d13a 	srli	r20,r20,4
 100a588:	10800003 	ldbu	r2,0(r2)
 100a58c:	b02cd13a 	srli	r22,r22,4
 100a590:	843fffc4 	addi	r16,r16,-1
 100a594:	1d28b03a 	or	r20,r3,r20
 100a598:	80800005 	stb	r2,0(r16)
 100a59c:	a584b03a 	or	r2,r20,r22
 100a5a0:	103ff51e 	bne	r2,zero,100a578 <__alt_data_end+0xff00a578>
 100a5a4:	d8c02817 	ldw	r3,160(sp)
 100a5a8:	1c07c83a 	sub	r3,r3,r16
 100a5ac:	d8c02e15 	stw	r3,184(sp)
 100a5b0:	003ece06 	br	100a0ec <__alt_data_end+0xff00a0ec>
 100a5b4:	d8c02d17 	ldw	r3,180(sp)
 100a5b8:	d9002d17 	ldw	r4,180(sp)
 100a5bc:	d8002785 	stb	zero,158(sp)
 100a5c0:	18800017 	ldw	r2,0(r3)
 100a5c4:	21000104 	addi	r4,r4,4
 100a5c8:	00c00044 	movi	r3,1
 100a5cc:	d8c02a15 	stw	r3,168(sp)
 100a5d0:	d8801405 	stb	r2,80(sp)
 100a5d4:	d9002d15 	stw	r4,180(sp)
 100a5d8:	d8c02e15 	stw	r3,184(sp)
 100a5dc:	d8002915 	stw	zero,164(sp)
 100a5e0:	d8003215 	stw	zero,200(sp)
 100a5e4:	dc001404 	addi	r16,sp,80
 100a5e8:	0039883a 	mov	fp,zero
 100a5ec:	003ecc06 	br	100a120 <__alt_data_end+0xff00a120>
 100a5f0:	18c03fcc 	andi	r3,r3,255
 100a5f4:	183e9226 	beq	r3,zero,100a040 <__alt_data_end+0xff00a040>
 100a5f8:	d9c02785 	stb	r7,158(sp)
 100a5fc:	003e9006 	br	100a040 <__alt_data_end+0xff00a040>
 100a600:	00c00044 	movi	r3,1
 100a604:	01c00ac4 	movi	r7,43
 100a608:	bc400007 	ldb	r17,0(r23)
 100a60c:	003d6306 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a610:	94800814 	ori	r18,r18,32
 100a614:	bc400007 	ldb	r17,0(r23)
 100a618:	003d6006 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a61c:	d8c02d17 	ldw	r3,180(sp)
 100a620:	d8002785 	stb	zero,158(sp)
 100a624:	1c000017 	ldw	r16,0(r3)
 100a628:	1d000104 	addi	r20,r3,4
 100a62c:	80040f26 	beq	r16,zero,100b66c <___svfprintf_internal_r+0x1c20>
 100a630:	d9002917 	ldw	r4,164(sp)
 100a634:	2003dc16 	blt	r4,zero,100b5a8 <___svfprintf_internal_r+0x1b5c>
 100a638:	200d883a 	mov	r6,r4
 100a63c:	000b883a 	mov	r5,zero
 100a640:	8009883a 	mov	r4,r16
 100a644:	da003e15 	stw	r8,248(sp)
 100a648:	100e7b00 	call	100e7b0 <memchr>
 100a64c:	da003e17 	ldw	r8,248(sp)
 100a650:	10045826 	beq	r2,zero,100b7b4 <___svfprintf_internal_r+0x1d68>
 100a654:	1405c83a 	sub	r2,r2,r16
 100a658:	d8802e15 	stw	r2,184(sp)
 100a65c:	1003d816 	blt	r2,zero,100b5c0 <___svfprintf_internal_r+0x1b74>
 100a660:	df002783 	ldbu	fp,158(sp)
 100a664:	d8802a15 	stw	r2,168(sp)
 100a668:	dd002d15 	stw	r20,180(sp)
 100a66c:	d8002915 	stw	zero,164(sp)
 100a670:	d8003215 	stw	zero,200(sp)
 100a674:	003ea306 	br	100a104 <__alt_data_end+0xff00a104>
 100a678:	18c03fcc 	andi	r3,r3,255
 100a67c:	183f8c26 	beq	r3,zero,100a4b0 <__alt_data_end+0xff00a4b0>
 100a680:	d9c02785 	stb	r7,158(sp)
 100a684:	003f8a06 	br	100a4b0 <__alt_data_end+0xff00a4b0>
 100a688:	18c03fcc 	andi	r3,r3,255
 100a68c:	1805631e 	bne	r3,zero,100bc1c <___svfprintf_internal_r+0x21d0>
 100a690:	014040b4 	movhi	r5,258
 100a694:	296ba004 	addi	r5,r5,-20864
 100a698:	d9403a15 	stw	r5,232(sp)
 100a69c:	9080080c 	andi	r2,r18,32
 100a6a0:	103f9f1e 	bne	r2,zero,100a520 <__alt_data_end+0xff00a520>
 100a6a4:	9080040c 	andi	r2,r18,16
 100a6a8:	10029c26 	beq	r2,zero,100b11c <___svfprintf_internal_r+0x16d0>
 100a6ac:	d8c02d17 	ldw	r3,180(sp)
 100a6b0:	002d883a 	mov	r22,zero
 100a6b4:	1d000017 	ldw	r20,0(r3)
 100a6b8:	18c00104 	addi	r3,r3,4
 100a6bc:	d8c02d15 	stw	r3,180(sp)
 100a6c0:	003f9c06 	br	100a534 <__alt_data_end+0xff00a534>
 100a6c4:	94800054 	ori	r18,r18,1
 100a6c8:	bc400007 	ldb	r17,0(r23)
 100a6cc:	003d3306 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a6d0:	38803fcc 	andi	r2,r7,255
 100a6d4:	1080201c 	xori	r2,r2,128
 100a6d8:	10bfe004 	addi	r2,r2,-128
 100a6dc:	1002971e 	bne	r2,zero,100b13c <___svfprintf_internal_r+0x16f0>
 100a6e0:	00c00044 	movi	r3,1
 100a6e4:	01c00804 	movi	r7,32
 100a6e8:	bc400007 	ldb	r17,0(r23)
 100a6ec:	003d2b06 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a6f0:	18c03fcc 	andi	r3,r3,255
 100a6f4:	183e2326 	beq	r3,zero,1009f84 <__alt_data_end+0xff009f84>
 100a6f8:	d9c02785 	stb	r7,158(sp)
 100a6fc:	003e2106 	br	1009f84 <__alt_data_end+0xff009f84>
 100a700:	bc400007 	ldb	r17,0(r23)
 100a704:	8a430426 	beq	r17,r9,100b318 <___svfprintf_internal_r+0x18cc>
 100a708:	94800414 	ori	r18,r18,16
 100a70c:	003d2306 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a710:	18c03fcc 	andi	r3,r3,255
 100a714:	18053f1e 	bne	r3,zero,100bc14 <___svfprintf_internal_r+0x21c8>
 100a718:	9080080c 	andi	r2,r18,32
 100a71c:	10028926 	beq	r2,zero,100b144 <___svfprintf_internal_r+0x16f8>
 100a720:	d9402d17 	ldw	r5,180(sp)
 100a724:	d9002f17 	ldw	r4,188(sp)
 100a728:	28800017 	ldw	r2,0(r5)
 100a72c:	2007d7fa 	srai	r3,r4,31
 100a730:	29400104 	addi	r5,r5,4
 100a734:	d9402d15 	stw	r5,180(sp)
 100a738:	11000015 	stw	r4,0(r2)
 100a73c:	10c00115 	stw	r3,4(r2)
 100a740:	003ced06 	br	1009af8 <__alt_data_end+0xff009af8>
 100a744:	94801014 	ori	r18,r18,64
 100a748:	bc400007 	ldb	r17,0(r23)
 100a74c:	003d1306 	br	1009b9c <__alt_data_end+0xff009b9c>
 100a750:	010040b4 	movhi	r4,258
 100a754:	212ba004 	addi	r4,r4,-20864
 100a758:	0039883a 	mov	fp,zero
 100a75c:	d9003a15 	stw	r4,232(sp)
 100a760:	04401e04 	movi	r17,120
 100a764:	003f8206 	br	100a570 <__alt_data_end+0xff00a570>
 100a768:	18c03fcc 	andi	r3,r3,255
 100a76c:	1805221e 	bne	r3,zero,100bbf8 <___svfprintf_internal_r+0x21ac>
 100a770:	883d9526 	beq	r17,zero,1009dc8 <__alt_data_end+0xff009dc8>
 100a774:	00c00044 	movi	r3,1
 100a778:	d8c02a15 	stw	r3,168(sp)
 100a77c:	dc401405 	stb	r17,80(sp)
 100a780:	d8002785 	stb	zero,158(sp)
 100a784:	003f9406 	br	100a5d8 <__alt_data_end+0xff00a5d8>
 100a788:	010040b4 	movhi	r4,258
 100a78c:	212ba004 	addi	r4,r4,-20864
 100a790:	d9003a15 	stw	r4,232(sp)
 100a794:	d8c02d15 	stw	r3,180(sp)
 100a798:	1025883a 	mov	r18,r2
 100a79c:	04401e04 	movi	r17,120
 100a7a0:	a584b03a 	or	r2,r20,r22
 100a7a4:	1000fa1e 	bne	r2,zero,100ab90 <___svfprintf_internal_r+0x1144>
 100a7a8:	0039883a 	mov	fp,zero
 100a7ac:	00800084 	movi	r2,2
 100a7b0:	10803fcc 	andi	r2,r2,255
 100a7b4:	00c00044 	movi	r3,1
 100a7b8:	10c21626 	beq	r2,r3,100b014 <___svfprintf_internal_r+0x15c8>
 100a7bc:	00c00084 	movi	r3,2
 100a7c0:	10fe301e 	bne	r2,r3,100a084 <__alt_data_end+0xff00a084>
 100a7c4:	003d7606 	br	1009da0 <__alt_data_end+0xff009da0>
 100a7c8:	d8c02017 	ldw	r3,128(sp)
 100a7cc:	003e9506 	br	100a224 <__alt_data_end+0xff00a224>
 100a7d0:	00801944 	movi	r2,101
 100a7d4:	14407c0e 	bge	r2,r17,100a9c8 <___svfprintf_internal_r+0xf7c>
 100a7d8:	d9003617 	ldw	r4,216(sp)
 100a7dc:	d9403717 	ldw	r5,220(sp)
 100a7e0:	000d883a 	mov	r6,zero
 100a7e4:	000f883a 	mov	r7,zero
 100a7e8:	d8c03d15 	stw	r3,244(sp)
 100a7ec:	da003e15 	stw	r8,248(sp)
 100a7f0:	1015fc40 	call	1015fc4 <__eqdf2>
 100a7f4:	d8c03d17 	ldw	r3,244(sp)
 100a7f8:	da003e17 	ldw	r8,248(sp)
 100a7fc:	1000f51e 	bne	r2,zero,100abd4 <___svfprintf_internal_r+0x1188>
 100a800:	d8801f17 	ldw	r2,124(sp)
 100a804:	010040b4 	movhi	r4,258
 100a808:	212ba704 	addi	r4,r4,-20836
 100a80c:	18c00044 	addi	r3,r3,1
 100a810:	10800044 	addi	r2,r2,1
 100a814:	41000015 	stw	r4,0(r8)
 100a818:	01000044 	movi	r4,1
 100a81c:	41000115 	stw	r4,4(r8)
 100a820:	d8c02015 	stw	r3,128(sp)
 100a824:	d8801f15 	stw	r2,124(sp)
 100a828:	010001c4 	movi	r4,7
 100a82c:	20826616 	blt	r4,r2,100b1c8 <___svfprintf_internal_r+0x177c>
 100a830:	42000204 	addi	r8,r8,8
 100a834:	d8802617 	ldw	r2,152(sp)
 100a838:	d9403317 	ldw	r5,204(sp)
 100a83c:	11400216 	blt	r2,r5,100a848 <___svfprintf_internal_r+0xdfc>
 100a840:	9080004c 	andi	r2,r18,1
 100a844:	103ed526 	beq	r2,zero,100a39c <__alt_data_end+0xff00a39c>
 100a848:	d8803817 	ldw	r2,224(sp)
 100a84c:	d9003417 	ldw	r4,208(sp)
 100a850:	d9403817 	ldw	r5,224(sp)
 100a854:	1887883a 	add	r3,r3,r2
 100a858:	d8801f17 	ldw	r2,124(sp)
 100a85c:	41000015 	stw	r4,0(r8)
 100a860:	41400115 	stw	r5,4(r8)
 100a864:	10800044 	addi	r2,r2,1
 100a868:	d8c02015 	stw	r3,128(sp)
 100a86c:	d8801f15 	stw	r2,124(sp)
 100a870:	010001c4 	movi	r4,7
 100a874:	2082af16 	blt	r4,r2,100b334 <___svfprintf_internal_r+0x18e8>
 100a878:	42000204 	addi	r8,r8,8
 100a87c:	d8803317 	ldw	r2,204(sp)
 100a880:	143fffc4 	addi	r16,r2,-1
 100a884:	043ec50e 	bge	zero,r16,100a39c <__alt_data_end+0xff00a39c>
 100a888:	04400404 	movi	r17,16
 100a88c:	d8801f17 	ldw	r2,124(sp)
 100a890:	8c00860e 	bge	r17,r16,100aaac <___svfprintf_internal_r+0x1060>
 100a894:	014040b4 	movhi	r5,258
 100a898:	296ba784 	addi	r5,r5,-20834
 100a89c:	d9402b15 	stw	r5,172(sp)
 100a8a0:	058001c4 	movi	r22,7
 100a8a4:	dd002c17 	ldw	r20,176(sp)
 100a8a8:	00000306 	br	100a8b8 <___svfprintf_internal_r+0xe6c>
 100a8ac:	42000204 	addi	r8,r8,8
 100a8b0:	843ffc04 	addi	r16,r16,-16
 100a8b4:	8c00800e 	bge	r17,r16,100aab8 <___svfprintf_internal_r+0x106c>
 100a8b8:	18c00404 	addi	r3,r3,16
 100a8bc:	10800044 	addi	r2,r2,1
 100a8c0:	45400015 	stw	r21,0(r8)
 100a8c4:	44400115 	stw	r17,4(r8)
 100a8c8:	d8c02015 	stw	r3,128(sp)
 100a8cc:	d8801f15 	stw	r2,124(sp)
 100a8d0:	b0bff60e 	bge	r22,r2,100a8ac <__alt_data_end+0xff00a8ac>
 100a8d4:	d9801e04 	addi	r6,sp,120
 100a8d8:	a00b883a 	mov	r5,r20
 100a8dc:	9809883a 	mov	r4,r19
 100a8e0:	10104580 	call	1010458 <__ssprint_r>
 100a8e4:	103d3e1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a8e8:	d8c02017 	ldw	r3,128(sp)
 100a8ec:	d8801f17 	ldw	r2,124(sp)
 100a8f0:	da000404 	addi	r8,sp,16
 100a8f4:	003fee06 	br	100a8b0 <__alt_data_end+0xff00a8b0>
 100a8f8:	d9403117 	ldw	r5,196(sp)
 100a8fc:	d8802a17 	ldw	r2,168(sp)
 100a900:	28adc83a 	sub	r22,r5,r2
 100a904:	05be650e 	bge	zero,r22,100a29c <__alt_data_end+0xff00a29c>
 100a908:	07000404 	movi	fp,16
 100a90c:	d8801f17 	ldw	r2,124(sp)
 100a910:	e583a20e 	bge	fp,r22,100b79c <___svfprintf_internal_r+0x1d50>
 100a914:	014040b4 	movhi	r5,258
 100a918:	296ba784 	addi	r5,r5,-20834
 100a91c:	dc403015 	stw	r17,192(sp)
 100a920:	d9402b15 	stw	r5,172(sp)
 100a924:	b023883a 	mov	r17,r22
 100a928:	050001c4 	movi	r20,7
 100a92c:	902d883a 	mov	r22,r18
 100a930:	8025883a 	mov	r18,r16
 100a934:	dc002c17 	ldw	r16,176(sp)
 100a938:	00000306 	br	100a948 <___svfprintf_internal_r+0xefc>
 100a93c:	8c7ffc04 	addi	r17,r17,-16
 100a940:	42000204 	addi	r8,r8,8
 100a944:	e440110e 	bge	fp,r17,100a98c <___svfprintf_internal_r+0xf40>
 100a948:	18c00404 	addi	r3,r3,16
 100a94c:	10800044 	addi	r2,r2,1
 100a950:	45400015 	stw	r21,0(r8)
 100a954:	47000115 	stw	fp,4(r8)
 100a958:	d8c02015 	stw	r3,128(sp)
 100a95c:	d8801f15 	stw	r2,124(sp)
 100a960:	a0bff60e 	bge	r20,r2,100a93c <__alt_data_end+0xff00a93c>
 100a964:	d9801e04 	addi	r6,sp,120
 100a968:	800b883a 	mov	r5,r16
 100a96c:	9809883a 	mov	r4,r19
 100a970:	10104580 	call	1010458 <__ssprint_r>
 100a974:	103d1a1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100a978:	8c7ffc04 	addi	r17,r17,-16
 100a97c:	d8c02017 	ldw	r3,128(sp)
 100a980:	d8801f17 	ldw	r2,124(sp)
 100a984:	da000404 	addi	r8,sp,16
 100a988:	e47fef16 	blt	fp,r17,100a948 <__alt_data_end+0xff00a948>
 100a98c:	9021883a 	mov	r16,r18
 100a990:	b025883a 	mov	r18,r22
 100a994:	882d883a 	mov	r22,r17
 100a998:	dc403017 	ldw	r17,192(sp)
 100a99c:	d9002b17 	ldw	r4,172(sp)
 100a9a0:	1d87883a 	add	r3,r3,r22
 100a9a4:	10800044 	addi	r2,r2,1
 100a9a8:	41000015 	stw	r4,0(r8)
 100a9ac:	45800115 	stw	r22,4(r8)
 100a9b0:	d8c02015 	stw	r3,128(sp)
 100a9b4:	d8801f15 	stw	r2,124(sp)
 100a9b8:	010001c4 	movi	r4,7
 100a9bc:	20819a16 	blt	r4,r2,100b028 <___svfprintf_internal_r+0x15dc>
 100a9c0:	42000204 	addi	r8,r8,8
 100a9c4:	003e3506 	br	100a29c <__alt_data_end+0xff00a29c>
 100a9c8:	d9403317 	ldw	r5,204(sp)
 100a9cc:	00800044 	movi	r2,1
 100a9d0:	18c00044 	addi	r3,r3,1
 100a9d4:	1141710e 	bge	r2,r5,100af9c <___svfprintf_internal_r+0x1550>
 100a9d8:	dc401f17 	ldw	r17,124(sp)
 100a9dc:	00800044 	movi	r2,1
 100a9e0:	40800115 	stw	r2,4(r8)
 100a9e4:	8c400044 	addi	r17,r17,1
 100a9e8:	44000015 	stw	r16,0(r8)
 100a9ec:	d8c02015 	stw	r3,128(sp)
 100a9f0:	dc401f15 	stw	r17,124(sp)
 100a9f4:	008001c4 	movi	r2,7
 100a9f8:	14417416 	blt	r2,r17,100afcc <___svfprintf_internal_r+0x1580>
 100a9fc:	42000204 	addi	r8,r8,8
 100aa00:	d8803817 	ldw	r2,224(sp)
 100aa04:	d9003417 	ldw	r4,208(sp)
 100aa08:	8c400044 	addi	r17,r17,1
 100aa0c:	10c7883a 	add	r3,r2,r3
 100aa10:	40800115 	stw	r2,4(r8)
 100aa14:	41000015 	stw	r4,0(r8)
 100aa18:	d8c02015 	stw	r3,128(sp)
 100aa1c:	dc401f15 	stw	r17,124(sp)
 100aa20:	008001c4 	movi	r2,7
 100aa24:	14417216 	blt	r2,r17,100aff0 <___svfprintf_internal_r+0x15a4>
 100aa28:	45800204 	addi	r22,r8,8
 100aa2c:	d9003617 	ldw	r4,216(sp)
 100aa30:	d9403717 	ldw	r5,220(sp)
 100aa34:	000d883a 	mov	r6,zero
 100aa38:	000f883a 	mov	r7,zero
 100aa3c:	d8c03d15 	stw	r3,244(sp)
 100aa40:	1015fc40 	call	1015fc4 <__eqdf2>
 100aa44:	d8c03d17 	ldw	r3,244(sp)
 100aa48:	1000b326 	beq	r2,zero,100ad18 <___svfprintf_internal_r+0x12cc>
 100aa4c:	d9403317 	ldw	r5,204(sp)
 100aa50:	84000044 	addi	r16,r16,1
 100aa54:	8c400044 	addi	r17,r17,1
 100aa58:	28bfffc4 	addi	r2,r5,-1
 100aa5c:	1887883a 	add	r3,r3,r2
 100aa60:	b0800115 	stw	r2,4(r22)
 100aa64:	b4000015 	stw	r16,0(r22)
 100aa68:	d8c02015 	stw	r3,128(sp)
 100aa6c:	dc401f15 	stw	r17,124(sp)
 100aa70:	008001c4 	movi	r2,7
 100aa74:	1440d216 	blt	r2,r17,100adc0 <___svfprintf_internal_r+0x1374>
 100aa78:	b5800204 	addi	r22,r22,8
 100aa7c:	d9003b17 	ldw	r4,236(sp)
 100aa80:	df0022c4 	addi	fp,sp,139
 100aa84:	8c400044 	addi	r17,r17,1
 100aa88:	20c7883a 	add	r3,r4,r3
 100aa8c:	b7000015 	stw	fp,0(r22)
 100aa90:	b1000115 	stw	r4,4(r22)
 100aa94:	d8c02015 	stw	r3,128(sp)
 100aa98:	dc401f15 	stw	r17,124(sp)
 100aa9c:	008001c4 	movi	r2,7
 100aaa0:	14400e16 	blt	r2,r17,100aadc <___svfprintf_internal_r+0x1090>
 100aaa4:	b2000204 	addi	r8,r22,8
 100aaa8:	003e3c06 	br	100a39c <__alt_data_end+0xff00a39c>
 100aaac:	010040b4 	movhi	r4,258
 100aab0:	212ba784 	addi	r4,r4,-20834
 100aab4:	d9002b15 	stw	r4,172(sp)
 100aab8:	d9002b17 	ldw	r4,172(sp)
 100aabc:	1c07883a 	add	r3,r3,r16
 100aac0:	44000115 	stw	r16,4(r8)
 100aac4:	41000015 	stw	r4,0(r8)
 100aac8:	10800044 	addi	r2,r2,1
 100aacc:	d8c02015 	stw	r3,128(sp)
 100aad0:	d8801f15 	stw	r2,124(sp)
 100aad4:	010001c4 	movi	r4,7
 100aad8:	20be2f0e 	bge	r4,r2,100a398 <__alt_data_end+0xff00a398>
 100aadc:	d9402c17 	ldw	r5,176(sp)
 100aae0:	d9801e04 	addi	r6,sp,120
 100aae4:	9809883a 	mov	r4,r19
 100aae8:	10104580 	call	1010458 <__ssprint_r>
 100aaec:	103cbc1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100aaf0:	d8c02017 	ldw	r3,128(sp)
 100aaf4:	da000404 	addi	r8,sp,16
 100aaf8:	003e2806 	br	100a39c <__alt_data_end+0xff00a39c>
 100aafc:	d9402c17 	ldw	r5,176(sp)
 100ab00:	d9801e04 	addi	r6,sp,120
 100ab04:	9809883a 	mov	r4,r19
 100ab08:	10104580 	call	1010458 <__ssprint_r>
 100ab0c:	103e5f26 	beq	r2,zero,100a48c <__alt_data_end+0xff00a48c>
 100ab10:	003cb306 	br	1009de0 <__alt_data_end+0xff009de0>
 100ab14:	d9402c17 	ldw	r5,176(sp)
 100ab18:	d9801e04 	addi	r6,sp,120
 100ab1c:	9809883a 	mov	r4,r19
 100ab20:	10104580 	call	1010458 <__ssprint_r>
 100ab24:	103cae1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ab28:	d8c02017 	ldw	r3,128(sp)
 100ab2c:	da000404 	addi	r8,sp,16
 100ab30:	003e0d06 	br	100a368 <__alt_data_end+0xff00a368>
 100ab34:	d9402c17 	ldw	r5,176(sp)
 100ab38:	d9801e04 	addi	r6,sp,120
 100ab3c:	9809883a 	mov	r4,r19
 100ab40:	10104580 	call	1010458 <__ssprint_r>
 100ab44:	103ca61e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ab48:	d8c02017 	ldw	r3,128(sp)
 100ab4c:	da000404 	addi	r8,sp,16
 100ab50:	003dc106 	br	100a258 <__alt_data_end+0xff00a258>
 100ab54:	d9402c17 	ldw	r5,176(sp)
 100ab58:	d9801e04 	addi	r6,sp,120
 100ab5c:	9809883a 	mov	r4,r19
 100ab60:	10104580 	call	1010458 <__ssprint_r>
 100ab64:	103c9e1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ab68:	d8c02017 	ldw	r3,128(sp)
 100ab6c:	da000404 	addi	r8,sp,16
 100ab70:	003dc706 	br	100a290 <__alt_data_end+0xff00a290>
 100ab74:	d8802917 	ldw	r2,164(sp)
 100ab78:	d8002785 	stb	zero,158(sp)
 100ab7c:	103f0816 	blt	r2,zero,100a7a0 <__alt_data_end+0xff00a7a0>
 100ab80:	00ffdfc4 	movi	r3,-129
 100ab84:	a584b03a 	or	r2,r20,r22
 100ab88:	90e4703a 	and	r18,r18,r3
 100ab8c:	103c8126 	beq	r2,zero,1009d94 <__alt_data_end+0xff009d94>
 100ab90:	0039883a 	mov	fp,zero
 100ab94:	003e7606 	br	100a570 <__alt_data_end+0xff00a570>
 100ab98:	9080040c 	andi	r2,r18,16
 100ab9c:	10013d26 	beq	r2,zero,100b094 <___svfprintf_internal_r+0x1648>
 100aba0:	d9002d17 	ldw	r4,180(sp)
 100aba4:	d9402917 	ldw	r5,164(sp)
 100aba8:	d8002785 	stb	zero,158(sp)
 100abac:	20800104 	addi	r2,r4,4
 100abb0:	25000017 	ldw	r20,0(r4)
 100abb4:	002d883a 	mov	r22,zero
 100abb8:	28013f16 	blt	r5,zero,100b0b8 <___svfprintf_internal_r+0x166c>
 100abbc:	00ffdfc4 	movi	r3,-129
 100abc0:	d8802d15 	stw	r2,180(sp)
 100abc4:	90e4703a 	and	r18,r18,r3
 100abc8:	a03d2b26 	beq	r20,zero,100a078 <__alt_data_end+0xff00a078>
 100abcc:	0039883a 	mov	fp,zero
 100abd0:	003d2e06 	br	100a08c <__alt_data_end+0xff00a08c>
 100abd4:	dc402617 	ldw	r17,152(sp)
 100abd8:	0441830e 	bge	zero,r17,100b1e8 <___svfprintf_internal_r+0x179c>
 100abdc:	dc403217 	ldw	r17,200(sp)
 100abe0:	d8803317 	ldw	r2,204(sp)
 100abe4:	1440010e 	bge	r2,r17,100abec <___svfprintf_internal_r+0x11a0>
 100abe8:	1023883a 	mov	r17,r2
 100abec:	04400a0e 	bge	zero,r17,100ac18 <___svfprintf_internal_r+0x11cc>
 100abf0:	d8801f17 	ldw	r2,124(sp)
 100abf4:	1c47883a 	add	r3,r3,r17
 100abf8:	44000015 	stw	r16,0(r8)
 100abfc:	10800044 	addi	r2,r2,1
 100ac00:	44400115 	stw	r17,4(r8)
 100ac04:	d8c02015 	stw	r3,128(sp)
 100ac08:	d8801f15 	stw	r2,124(sp)
 100ac0c:	010001c4 	movi	r4,7
 100ac10:	20827516 	blt	r4,r2,100b5e8 <___svfprintf_internal_r+0x1b9c>
 100ac14:	42000204 	addi	r8,r8,8
 100ac18:	88027b16 	blt	r17,zero,100b608 <___svfprintf_internal_r+0x1bbc>
 100ac1c:	d9003217 	ldw	r4,200(sp)
 100ac20:	2463c83a 	sub	r17,r4,r17
 100ac24:	0440990e 	bge	zero,r17,100ae8c <___svfprintf_internal_r+0x1440>
 100ac28:	05800404 	movi	r22,16
 100ac2c:	d8801f17 	ldw	r2,124(sp)
 100ac30:	b441530e 	bge	r22,r17,100b180 <___svfprintf_internal_r+0x1734>
 100ac34:	010040b4 	movhi	r4,258
 100ac38:	212ba784 	addi	r4,r4,-20834
 100ac3c:	d9002b15 	stw	r4,172(sp)
 100ac40:	070001c4 	movi	fp,7
 100ac44:	dd002c17 	ldw	r20,176(sp)
 100ac48:	00000306 	br	100ac58 <___svfprintf_internal_r+0x120c>
 100ac4c:	42000204 	addi	r8,r8,8
 100ac50:	8c7ffc04 	addi	r17,r17,-16
 100ac54:	b4414d0e 	bge	r22,r17,100b18c <___svfprintf_internal_r+0x1740>
 100ac58:	18c00404 	addi	r3,r3,16
 100ac5c:	10800044 	addi	r2,r2,1
 100ac60:	45400015 	stw	r21,0(r8)
 100ac64:	45800115 	stw	r22,4(r8)
 100ac68:	d8c02015 	stw	r3,128(sp)
 100ac6c:	d8801f15 	stw	r2,124(sp)
 100ac70:	e0bff60e 	bge	fp,r2,100ac4c <__alt_data_end+0xff00ac4c>
 100ac74:	d9801e04 	addi	r6,sp,120
 100ac78:	a00b883a 	mov	r5,r20
 100ac7c:	9809883a 	mov	r4,r19
 100ac80:	10104580 	call	1010458 <__ssprint_r>
 100ac84:	103c561e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ac88:	d8c02017 	ldw	r3,128(sp)
 100ac8c:	d8801f17 	ldw	r2,124(sp)
 100ac90:	da000404 	addi	r8,sp,16
 100ac94:	003fee06 	br	100ac50 <__alt_data_end+0xff00ac50>
 100ac98:	d9402c17 	ldw	r5,176(sp)
 100ac9c:	d9801e04 	addi	r6,sp,120
 100aca0:	9809883a 	mov	r4,r19
 100aca4:	10104580 	call	1010458 <__ssprint_r>
 100aca8:	103c4d1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100acac:	d8c02017 	ldw	r3,128(sp)
 100acb0:	df002787 	ldb	fp,158(sp)
 100acb4:	da000404 	addi	r8,sp,16
 100acb8:	003d5a06 	br	100a224 <__alt_data_end+0xff00a224>
 100acbc:	9080040c 	andi	r2,r18,16
 100acc0:	10005c26 	beq	r2,zero,100ae34 <___svfprintf_internal_r+0x13e8>
 100acc4:	d9402d17 	ldw	r5,180(sp)
 100acc8:	d8c02917 	ldw	r3,164(sp)
 100accc:	d8002785 	stb	zero,158(sp)
 100acd0:	28800104 	addi	r2,r5,4
 100acd4:	2d000017 	ldw	r20,0(r5)
 100acd8:	002d883a 	mov	r22,zero
 100acdc:	18005e16 	blt	r3,zero,100ae58 <___svfprintf_internal_r+0x140c>
 100ace0:	00ffdfc4 	movi	r3,-129
 100ace4:	d8802d15 	stw	r2,180(sp)
 100ace8:	90e4703a 	and	r18,r18,r3
 100acec:	0039883a 	mov	fp,zero
 100acf0:	a03dfe26 	beq	r20,zero,100a4ec <__alt_data_end+0xff00a4ec>
 100acf4:	00800244 	movi	r2,9
 100acf8:	153cb336 	bltu	r2,r20,1009fc8 <__alt_data_end+0xff009fc8>
 100acfc:	a5000c04 	addi	r20,r20,48
 100ad00:	dc001dc4 	addi	r16,sp,119
 100ad04:	dd001dc5 	stb	r20,119(sp)
 100ad08:	d8c02817 	ldw	r3,160(sp)
 100ad0c:	1c07c83a 	sub	r3,r3,r16
 100ad10:	d8c02e15 	stw	r3,184(sp)
 100ad14:	003cf506 	br	100a0ec <__alt_data_end+0xff00a0ec>
 100ad18:	d8803317 	ldw	r2,204(sp)
 100ad1c:	143fffc4 	addi	r16,r2,-1
 100ad20:	043f560e 	bge	zero,r16,100aa7c <__alt_data_end+0xff00aa7c>
 100ad24:	07000404 	movi	fp,16
 100ad28:	e403530e 	bge	fp,r16,100ba78 <___svfprintf_internal_r+0x202c>
 100ad2c:	014040b4 	movhi	r5,258
 100ad30:	296ba784 	addi	r5,r5,-20834
 100ad34:	d9402b15 	stw	r5,172(sp)
 100ad38:	01c001c4 	movi	r7,7
 100ad3c:	dd002c17 	ldw	r20,176(sp)
 100ad40:	00000306 	br	100ad50 <___svfprintf_internal_r+0x1304>
 100ad44:	843ffc04 	addi	r16,r16,-16
 100ad48:	b5800204 	addi	r22,r22,8
 100ad4c:	e400130e 	bge	fp,r16,100ad9c <___svfprintf_internal_r+0x1350>
 100ad50:	18c00404 	addi	r3,r3,16
 100ad54:	8c400044 	addi	r17,r17,1
 100ad58:	b5400015 	stw	r21,0(r22)
 100ad5c:	b7000115 	stw	fp,4(r22)
 100ad60:	d8c02015 	stw	r3,128(sp)
 100ad64:	dc401f15 	stw	r17,124(sp)
 100ad68:	3c7ff60e 	bge	r7,r17,100ad44 <__alt_data_end+0xff00ad44>
 100ad6c:	d9801e04 	addi	r6,sp,120
 100ad70:	a00b883a 	mov	r5,r20
 100ad74:	9809883a 	mov	r4,r19
 100ad78:	d9c03d15 	stw	r7,244(sp)
 100ad7c:	10104580 	call	1010458 <__ssprint_r>
 100ad80:	d9c03d17 	ldw	r7,244(sp)
 100ad84:	103c161e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ad88:	843ffc04 	addi	r16,r16,-16
 100ad8c:	d8c02017 	ldw	r3,128(sp)
 100ad90:	dc401f17 	ldw	r17,124(sp)
 100ad94:	dd800404 	addi	r22,sp,16
 100ad98:	e43fed16 	blt	fp,r16,100ad50 <__alt_data_end+0xff00ad50>
 100ad9c:	d8802b17 	ldw	r2,172(sp)
 100ada0:	1c07883a 	add	r3,r3,r16
 100ada4:	8c400044 	addi	r17,r17,1
 100ada8:	b0800015 	stw	r2,0(r22)
 100adac:	b4000115 	stw	r16,4(r22)
 100adb0:	d8c02015 	stw	r3,128(sp)
 100adb4:	dc401f15 	stw	r17,124(sp)
 100adb8:	008001c4 	movi	r2,7
 100adbc:	147f2e0e 	bge	r2,r17,100aa78 <__alt_data_end+0xff00aa78>
 100adc0:	d9402c17 	ldw	r5,176(sp)
 100adc4:	d9801e04 	addi	r6,sp,120
 100adc8:	9809883a 	mov	r4,r19
 100adcc:	10104580 	call	1010458 <__ssprint_r>
 100add0:	103c031e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100add4:	d8c02017 	ldw	r3,128(sp)
 100add8:	dc401f17 	ldw	r17,124(sp)
 100addc:	dd800404 	addi	r22,sp,16
 100ade0:	003f2606 	br	100aa7c <__alt_data_end+0xff00aa7c>
 100ade4:	9080040c 	andi	r2,r18,16
 100ade8:	1000c326 	beq	r2,zero,100b0f8 <___svfprintf_internal_r+0x16ac>
 100adec:	d8802d17 	ldw	r2,180(sp)
 100adf0:	15000017 	ldw	r20,0(r2)
 100adf4:	10800104 	addi	r2,r2,4
 100adf8:	d8802d15 	stw	r2,180(sp)
 100adfc:	a02dd7fa 	srai	r22,r20,31
 100ae00:	b005883a 	mov	r2,r22
 100ae04:	103c680e 	bge	r2,zero,1009fa8 <__alt_data_end+0xff009fa8>
 100ae08:	0529c83a 	sub	r20,zero,r20
 100ae0c:	a004c03a 	cmpne	r2,r20,zero
 100ae10:	05adc83a 	sub	r22,zero,r22
 100ae14:	b0adc83a 	sub	r22,r22,r2
 100ae18:	d8802917 	ldw	r2,164(sp)
 100ae1c:	07000b44 	movi	fp,45
 100ae20:	df002785 	stb	fp,158(sp)
 100ae24:	10022e16 	blt	r2,zero,100b6e0 <___svfprintf_internal_r+0x1c94>
 100ae28:	00bfdfc4 	movi	r2,-129
 100ae2c:	90a4703a 	and	r18,r18,r2
 100ae30:	003c6406 	br	1009fc4 <__alt_data_end+0xff009fc4>
 100ae34:	9080100c 	andi	r2,r18,64
 100ae38:	d8002785 	stb	zero,158(sp)
 100ae3c:	10012526 	beq	r2,zero,100b2d4 <___svfprintf_internal_r+0x1888>
 100ae40:	d9002d17 	ldw	r4,180(sp)
 100ae44:	d9402917 	ldw	r5,164(sp)
 100ae48:	002d883a 	mov	r22,zero
 100ae4c:	20800104 	addi	r2,r4,4
 100ae50:	2500000b 	ldhu	r20,0(r4)
 100ae54:	283fa20e 	bge	r5,zero,100ace0 <__alt_data_end+0xff00ace0>
 100ae58:	d8802d15 	stw	r2,180(sp)
 100ae5c:	0039883a 	mov	fp,zero
 100ae60:	a584b03a 	or	r2,r20,r22
 100ae64:	103c571e 	bne	r2,zero,1009fc4 <__alt_data_end+0xff009fc4>
 100ae68:	00800044 	movi	r2,1
 100ae6c:	003e5006 	br	100a7b0 <__alt_data_end+0xff00a7b0>
 100ae70:	d9402c17 	ldw	r5,176(sp)
 100ae74:	d9801e04 	addi	r6,sp,120
 100ae78:	9809883a 	mov	r4,r19
 100ae7c:	10104580 	call	1010458 <__ssprint_r>
 100ae80:	103bd71e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100ae84:	d8c02017 	ldw	r3,128(sp)
 100ae88:	da000404 	addi	r8,sp,16
 100ae8c:	d9003217 	ldw	r4,200(sp)
 100ae90:	d8802617 	ldw	r2,152(sp)
 100ae94:	d9403317 	ldw	r5,204(sp)
 100ae98:	8123883a 	add	r17,r16,r4
 100ae9c:	11400216 	blt	r2,r5,100aea8 <___svfprintf_internal_r+0x145c>
 100aea0:	9100004c 	andi	r4,r18,1
 100aea4:	20000d26 	beq	r4,zero,100aedc <___svfprintf_internal_r+0x1490>
 100aea8:	d9003817 	ldw	r4,224(sp)
 100aeac:	d9403417 	ldw	r5,208(sp)
 100aeb0:	1907883a 	add	r3,r3,r4
 100aeb4:	d9001f17 	ldw	r4,124(sp)
 100aeb8:	41400015 	stw	r5,0(r8)
 100aebc:	d9403817 	ldw	r5,224(sp)
 100aec0:	21000044 	addi	r4,r4,1
 100aec4:	d8c02015 	stw	r3,128(sp)
 100aec8:	41400115 	stw	r5,4(r8)
 100aecc:	d9001f15 	stw	r4,124(sp)
 100aed0:	014001c4 	movi	r5,7
 100aed4:	2901dc16 	blt	r5,r4,100b648 <___svfprintf_internal_r+0x1bfc>
 100aed8:	42000204 	addi	r8,r8,8
 100aedc:	d9003317 	ldw	r4,204(sp)
 100aee0:	8121883a 	add	r16,r16,r4
 100aee4:	2085c83a 	sub	r2,r4,r2
 100aee8:	8461c83a 	sub	r16,r16,r17
 100aeec:	1400010e 	bge	r2,r16,100aef4 <___svfprintf_internal_r+0x14a8>
 100aef0:	1021883a 	mov	r16,r2
 100aef4:	04000a0e 	bge	zero,r16,100af20 <___svfprintf_internal_r+0x14d4>
 100aef8:	d9001f17 	ldw	r4,124(sp)
 100aefc:	1c07883a 	add	r3,r3,r16
 100af00:	44400015 	stw	r17,0(r8)
 100af04:	21000044 	addi	r4,r4,1
 100af08:	44000115 	stw	r16,4(r8)
 100af0c:	d8c02015 	stw	r3,128(sp)
 100af10:	d9001f15 	stw	r4,124(sp)
 100af14:	014001c4 	movi	r5,7
 100af18:	2901e616 	blt	r5,r4,100b6b4 <___svfprintf_internal_r+0x1c68>
 100af1c:	42000204 	addi	r8,r8,8
 100af20:	8001f616 	blt	r16,zero,100b6fc <___svfprintf_internal_r+0x1cb0>
 100af24:	1421c83a 	sub	r16,r2,r16
 100af28:	043d1c0e 	bge	zero,r16,100a39c <__alt_data_end+0xff00a39c>
 100af2c:	04400404 	movi	r17,16
 100af30:	d8801f17 	ldw	r2,124(sp)
 100af34:	8c3edd0e 	bge	r17,r16,100aaac <__alt_data_end+0xff00aaac>
 100af38:	014040b4 	movhi	r5,258
 100af3c:	296ba784 	addi	r5,r5,-20834
 100af40:	d9402b15 	stw	r5,172(sp)
 100af44:	058001c4 	movi	r22,7
 100af48:	dd002c17 	ldw	r20,176(sp)
 100af4c:	00000306 	br	100af5c <___svfprintf_internal_r+0x1510>
 100af50:	42000204 	addi	r8,r8,8
 100af54:	843ffc04 	addi	r16,r16,-16
 100af58:	8c3ed70e 	bge	r17,r16,100aab8 <__alt_data_end+0xff00aab8>
 100af5c:	18c00404 	addi	r3,r3,16
 100af60:	10800044 	addi	r2,r2,1
 100af64:	45400015 	stw	r21,0(r8)
 100af68:	44400115 	stw	r17,4(r8)
 100af6c:	d8c02015 	stw	r3,128(sp)
 100af70:	d8801f15 	stw	r2,124(sp)
 100af74:	b0bff60e 	bge	r22,r2,100af50 <__alt_data_end+0xff00af50>
 100af78:	d9801e04 	addi	r6,sp,120
 100af7c:	a00b883a 	mov	r5,r20
 100af80:	9809883a 	mov	r4,r19
 100af84:	10104580 	call	1010458 <__ssprint_r>
 100af88:	103b951e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100af8c:	d8c02017 	ldw	r3,128(sp)
 100af90:	d8801f17 	ldw	r2,124(sp)
 100af94:	da000404 	addi	r8,sp,16
 100af98:	003fee06 	br	100af54 <__alt_data_end+0xff00af54>
 100af9c:	9088703a 	and	r4,r18,r2
 100afa0:	203e8d1e 	bne	r4,zero,100a9d8 <__alt_data_end+0xff00a9d8>
 100afa4:	dc401f17 	ldw	r17,124(sp)
 100afa8:	40800115 	stw	r2,4(r8)
 100afac:	44000015 	stw	r16,0(r8)
 100afb0:	8c400044 	addi	r17,r17,1
 100afb4:	d8c02015 	stw	r3,128(sp)
 100afb8:	dc401f15 	stw	r17,124(sp)
 100afbc:	008001c4 	movi	r2,7
 100afc0:	147f7f16 	blt	r2,r17,100adc0 <__alt_data_end+0xff00adc0>
 100afc4:	45800204 	addi	r22,r8,8
 100afc8:	003eac06 	br	100aa7c <__alt_data_end+0xff00aa7c>
 100afcc:	d9402c17 	ldw	r5,176(sp)
 100afd0:	d9801e04 	addi	r6,sp,120
 100afd4:	9809883a 	mov	r4,r19
 100afd8:	10104580 	call	1010458 <__ssprint_r>
 100afdc:	103b801e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100afe0:	d8c02017 	ldw	r3,128(sp)
 100afe4:	dc401f17 	ldw	r17,124(sp)
 100afe8:	da000404 	addi	r8,sp,16
 100afec:	003e8406 	br	100aa00 <__alt_data_end+0xff00aa00>
 100aff0:	d9402c17 	ldw	r5,176(sp)
 100aff4:	d9801e04 	addi	r6,sp,120
 100aff8:	9809883a 	mov	r4,r19
 100affc:	10104580 	call	1010458 <__ssprint_r>
 100b000:	103b771e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b004:	d8c02017 	ldw	r3,128(sp)
 100b008:	dc401f17 	ldw	r17,124(sp)
 100b00c:	dd800404 	addi	r22,sp,16
 100b010:	003e8606 	br	100aa2c <__alt_data_end+0xff00aa2c>
 100b014:	0029883a 	mov	r20,zero
 100b018:	a5000c04 	addi	r20,r20,48
 100b01c:	dc001dc4 	addi	r16,sp,119
 100b020:	dd001dc5 	stb	r20,119(sp)
 100b024:	003f3806 	br	100ad08 <__alt_data_end+0xff00ad08>
 100b028:	d9402c17 	ldw	r5,176(sp)
 100b02c:	d9801e04 	addi	r6,sp,120
 100b030:	9809883a 	mov	r4,r19
 100b034:	10104580 	call	1010458 <__ssprint_r>
 100b038:	103b691e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b03c:	d8c02017 	ldw	r3,128(sp)
 100b040:	da000404 	addi	r8,sp,16
 100b044:	003c9506 	br	100a29c <__alt_data_end+0xff00a29c>
 100b048:	d9003617 	ldw	r4,216(sp)
 100b04c:	d9403717 	ldw	r5,220(sp)
 100b050:	da003e15 	stw	r8,248(sp)
 100b054:	100ff500 	call	100ff50 <__fpclassifyd>
 100b058:	da003e17 	ldw	r8,248(sp)
 100b05c:	1000bd1e 	bne	r2,zero,100b354 <___svfprintf_internal_r+0x1908>
 100b060:	008011c4 	movi	r2,71
 100b064:	14411e0e 	bge	r2,r17,100b4e0 <___svfprintf_internal_r+0x1a94>
 100b068:	040040b4 	movhi	r16,258
 100b06c:	842b9a04 	addi	r16,r16,-20888
 100b070:	00c000c4 	movi	r3,3
 100b074:	00bfdfc4 	movi	r2,-129
 100b078:	d8c02a15 	stw	r3,168(sp)
 100b07c:	90a4703a 	and	r18,r18,r2
 100b080:	df002783 	ldbu	fp,158(sp)
 100b084:	d8c02e15 	stw	r3,184(sp)
 100b088:	d8002915 	stw	zero,164(sp)
 100b08c:	d8003215 	stw	zero,200(sp)
 100b090:	003c1c06 	br	100a104 <__alt_data_end+0xff00a104>
 100b094:	9080100c 	andi	r2,r18,64
 100b098:	d8002785 	stb	zero,158(sp)
 100b09c:	10009426 	beq	r2,zero,100b2f0 <___svfprintf_internal_r+0x18a4>
 100b0a0:	d8c02d17 	ldw	r3,180(sp)
 100b0a4:	d9002917 	ldw	r4,164(sp)
 100b0a8:	002d883a 	mov	r22,zero
 100b0ac:	18800104 	addi	r2,r3,4
 100b0b0:	1d00000b 	ldhu	r20,0(r3)
 100b0b4:	203ec10e 	bge	r4,zero,100abbc <__alt_data_end+0xff00abbc>
 100b0b8:	a586b03a 	or	r3,r20,r22
 100b0bc:	d8802d15 	stw	r2,180(sp)
 100b0c0:	183ec21e 	bne	r3,zero,100abcc <__alt_data_end+0xff00abcc>
 100b0c4:	0039883a 	mov	fp,zero
 100b0c8:	0005883a 	mov	r2,zero
 100b0cc:	003db806 	br	100a7b0 <__alt_data_end+0xff00a7b0>
 100b0d0:	d8802d17 	ldw	r2,180(sp)
 100b0d4:	d8c02d17 	ldw	r3,180(sp)
 100b0d8:	d9002d17 	ldw	r4,180(sp)
 100b0dc:	10800017 	ldw	r2,0(r2)
 100b0e0:	18c00117 	ldw	r3,4(r3)
 100b0e4:	21000204 	addi	r4,r4,8
 100b0e8:	d8803615 	stw	r2,216(sp)
 100b0ec:	d8c03715 	stw	r3,220(sp)
 100b0f0:	d9002d15 	stw	r4,180(sp)
 100b0f4:	003b8206 	br	1009f00 <__alt_data_end+0xff009f00>
 100b0f8:	9080100c 	andi	r2,r18,64
 100b0fc:	10010726 	beq	r2,zero,100b51c <___svfprintf_internal_r+0x1ad0>
 100b100:	d8c02d17 	ldw	r3,180(sp)
 100b104:	1d00000f 	ldh	r20,0(r3)
 100b108:	18c00104 	addi	r3,r3,4
 100b10c:	d8c02d15 	stw	r3,180(sp)
 100b110:	a02dd7fa 	srai	r22,r20,31
 100b114:	b005883a 	mov	r2,r22
 100b118:	003ba206 	br	1009fa4 <__alt_data_end+0xff009fa4>
 100b11c:	9080100c 	andi	r2,r18,64
 100b120:	10010526 	beq	r2,zero,100b538 <___svfprintf_internal_r+0x1aec>
 100b124:	d9002d17 	ldw	r4,180(sp)
 100b128:	002d883a 	mov	r22,zero
 100b12c:	2500000b 	ldhu	r20,0(r4)
 100b130:	21000104 	addi	r4,r4,4
 100b134:	d9002d15 	stw	r4,180(sp)
 100b138:	003cfe06 	br	100a534 <__alt_data_end+0xff00a534>
 100b13c:	bc400007 	ldb	r17,0(r23)
 100b140:	003a9606 	br	1009b9c <__alt_data_end+0xff009b9c>
 100b144:	9080040c 	andi	r2,r18,16
 100b148:	10010126 	beq	r2,zero,100b550 <___svfprintf_internal_r+0x1b04>
 100b14c:	d9402d17 	ldw	r5,180(sp)
 100b150:	d8c02f17 	ldw	r3,188(sp)
 100b154:	28800017 	ldw	r2,0(r5)
 100b158:	29400104 	addi	r5,r5,4
 100b15c:	d9402d15 	stw	r5,180(sp)
 100b160:	10c00015 	stw	r3,0(r2)
 100b164:	003a6406 	br	1009af8 <__alt_data_end+0xff009af8>
 100b168:	d9002917 	ldw	r4,164(sp)
 100b16c:	d8002785 	stb	zero,158(sp)
 100b170:	203d8d16 	blt	r4,zero,100a7a8 <__alt_data_end+0xff00a7a8>
 100b174:	00bfdfc4 	movi	r2,-129
 100b178:	90a4703a 	and	r18,r18,r2
 100b17c:	003b0506 	br	1009d94 <__alt_data_end+0xff009d94>
 100b180:	014040b4 	movhi	r5,258
 100b184:	296ba784 	addi	r5,r5,-20834
 100b188:	d9402b15 	stw	r5,172(sp)
 100b18c:	d9402b17 	ldw	r5,172(sp)
 100b190:	1c47883a 	add	r3,r3,r17
 100b194:	10800044 	addi	r2,r2,1
 100b198:	41400015 	stw	r5,0(r8)
 100b19c:	44400115 	stw	r17,4(r8)
 100b1a0:	d8c02015 	stw	r3,128(sp)
 100b1a4:	d8801f15 	stw	r2,124(sp)
 100b1a8:	010001c4 	movi	r4,7
 100b1ac:	20bf3016 	blt	r4,r2,100ae70 <__alt_data_end+0xff00ae70>
 100b1b0:	42000204 	addi	r8,r8,8
 100b1b4:	003f3506 	br	100ae8c <__alt_data_end+0xff00ae8c>
 100b1b8:	010040b4 	movhi	r4,258
 100b1bc:	212ba784 	addi	r4,r4,-20834
 100b1c0:	d9002b15 	stw	r4,172(sp)
 100b1c4:	003c5e06 	br	100a340 <__alt_data_end+0xff00a340>
 100b1c8:	d9402c17 	ldw	r5,176(sp)
 100b1cc:	d9801e04 	addi	r6,sp,120
 100b1d0:	9809883a 	mov	r4,r19
 100b1d4:	10104580 	call	1010458 <__ssprint_r>
 100b1d8:	103b011e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b1dc:	d8c02017 	ldw	r3,128(sp)
 100b1e0:	da000404 	addi	r8,sp,16
 100b1e4:	003d9306 	br	100a834 <__alt_data_end+0xff00a834>
 100b1e8:	d8801f17 	ldw	r2,124(sp)
 100b1ec:	014040b4 	movhi	r5,258
 100b1f0:	01000044 	movi	r4,1
 100b1f4:	18c00044 	addi	r3,r3,1
 100b1f8:	10800044 	addi	r2,r2,1
 100b1fc:	296ba704 	addi	r5,r5,-20836
 100b200:	41000115 	stw	r4,4(r8)
 100b204:	41400015 	stw	r5,0(r8)
 100b208:	d8c02015 	stw	r3,128(sp)
 100b20c:	d8801f15 	stw	r2,124(sp)
 100b210:	010001c4 	movi	r4,7
 100b214:	2080b516 	blt	r4,r2,100b4ec <___svfprintf_internal_r+0x1aa0>
 100b218:	42000204 	addi	r8,r8,8
 100b21c:	8800041e 	bne	r17,zero,100b230 <___svfprintf_internal_r+0x17e4>
 100b220:	d8803317 	ldw	r2,204(sp)
 100b224:	1000021e 	bne	r2,zero,100b230 <___svfprintf_internal_r+0x17e4>
 100b228:	9080004c 	andi	r2,r18,1
 100b22c:	103c5b26 	beq	r2,zero,100a39c <__alt_data_end+0xff00a39c>
 100b230:	d9003817 	ldw	r4,224(sp)
 100b234:	d8801f17 	ldw	r2,124(sp)
 100b238:	d9403417 	ldw	r5,208(sp)
 100b23c:	20c7883a 	add	r3,r4,r3
 100b240:	10800044 	addi	r2,r2,1
 100b244:	41000115 	stw	r4,4(r8)
 100b248:	41400015 	stw	r5,0(r8)
 100b24c:	d8c02015 	stw	r3,128(sp)
 100b250:	d8801f15 	stw	r2,124(sp)
 100b254:	010001c4 	movi	r4,7
 100b258:	20818016 	blt	r4,r2,100b85c <___svfprintf_internal_r+0x1e10>
 100b25c:	42000204 	addi	r8,r8,8
 100b260:	0463c83a 	sub	r17,zero,r17
 100b264:	0440cb0e 	bge	zero,r17,100b594 <___svfprintf_internal_r+0x1b48>
 100b268:	05800404 	movi	r22,16
 100b26c:	b440e80e 	bge	r22,r17,100b610 <___svfprintf_internal_r+0x1bc4>
 100b270:	014040b4 	movhi	r5,258
 100b274:	296ba784 	addi	r5,r5,-20834
 100b278:	d9402b15 	stw	r5,172(sp)
 100b27c:	070001c4 	movi	fp,7
 100b280:	dd002c17 	ldw	r20,176(sp)
 100b284:	00000306 	br	100b294 <___svfprintf_internal_r+0x1848>
 100b288:	42000204 	addi	r8,r8,8
 100b28c:	8c7ffc04 	addi	r17,r17,-16
 100b290:	b440e20e 	bge	r22,r17,100b61c <___svfprintf_internal_r+0x1bd0>
 100b294:	18c00404 	addi	r3,r3,16
 100b298:	10800044 	addi	r2,r2,1
 100b29c:	45400015 	stw	r21,0(r8)
 100b2a0:	45800115 	stw	r22,4(r8)
 100b2a4:	d8c02015 	stw	r3,128(sp)
 100b2a8:	d8801f15 	stw	r2,124(sp)
 100b2ac:	e0bff60e 	bge	fp,r2,100b288 <__alt_data_end+0xff00b288>
 100b2b0:	d9801e04 	addi	r6,sp,120
 100b2b4:	a00b883a 	mov	r5,r20
 100b2b8:	9809883a 	mov	r4,r19
 100b2bc:	10104580 	call	1010458 <__ssprint_r>
 100b2c0:	103ac71e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b2c4:	d8c02017 	ldw	r3,128(sp)
 100b2c8:	d8801f17 	ldw	r2,124(sp)
 100b2cc:	da000404 	addi	r8,sp,16
 100b2d0:	003fee06 	br	100b28c <__alt_data_end+0xff00b28c>
 100b2d4:	d8c02d17 	ldw	r3,180(sp)
 100b2d8:	d9002917 	ldw	r4,164(sp)
 100b2dc:	002d883a 	mov	r22,zero
 100b2e0:	18800104 	addi	r2,r3,4
 100b2e4:	1d000017 	ldw	r20,0(r3)
 100b2e8:	203e7d0e 	bge	r4,zero,100ace0 <__alt_data_end+0xff00ace0>
 100b2ec:	003eda06 	br	100ae58 <__alt_data_end+0xff00ae58>
 100b2f0:	d9402d17 	ldw	r5,180(sp)
 100b2f4:	d8c02917 	ldw	r3,164(sp)
 100b2f8:	002d883a 	mov	r22,zero
 100b2fc:	28800104 	addi	r2,r5,4
 100b300:	2d000017 	ldw	r20,0(r5)
 100b304:	183e2d0e 	bge	r3,zero,100abbc <__alt_data_end+0xff00abbc>
 100b308:	003f6b06 	br	100b0b8 <__alt_data_end+0xff00b0b8>
 100b30c:	d8c02d15 	stw	r3,180(sp)
 100b310:	0039883a 	mov	fp,zero
 100b314:	003ed206 	br	100ae60 <__alt_data_end+0xff00ae60>
 100b318:	bc400043 	ldbu	r17,1(r23)
 100b31c:	94800814 	ori	r18,r18,32
 100b320:	bdc00044 	addi	r23,r23,1
 100b324:	8c403fcc 	andi	r17,r17,255
 100b328:	8c40201c 	xori	r17,r17,128
 100b32c:	8c7fe004 	addi	r17,r17,-128
 100b330:	003a1a06 	br	1009b9c <__alt_data_end+0xff009b9c>
 100b334:	d9402c17 	ldw	r5,176(sp)
 100b338:	d9801e04 	addi	r6,sp,120
 100b33c:	9809883a 	mov	r4,r19
 100b340:	10104580 	call	1010458 <__ssprint_r>
 100b344:	103aa61e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b348:	d8c02017 	ldw	r3,128(sp)
 100b34c:	da000404 	addi	r8,sp,16
 100b350:	003d4a06 	br	100a87c <__alt_data_end+0xff00a87c>
 100b354:	d9002917 	ldw	r4,164(sp)
 100b358:	05bff7c4 	movi	r22,-33
 100b35c:	00bfffc4 	movi	r2,-1
 100b360:	8dac703a 	and	r22,r17,r22
 100b364:	20806a26 	beq	r4,r2,100b510 <___svfprintf_internal_r+0x1ac4>
 100b368:	008011c4 	movi	r2,71
 100b36c:	b0813726 	beq	r22,r2,100b84c <___svfprintf_internal_r+0x1e00>
 100b370:	d9003717 	ldw	r4,220(sp)
 100b374:	90c04014 	ori	r3,r18,256
 100b378:	d8c02b15 	stw	r3,172(sp)
 100b37c:	20015d16 	blt	r4,zero,100b8f4 <___svfprintf_internal_r+0x1ea8>
 100b380:	dd003717 	ldw	r20,220(sp)
 100b384:	d8002a05 	stb	zero,168(sp)
 100b388:	00801984 	movi	r2,102
 100b38c:	88814026 	beq	r17,r2,100b890 <___svfprintf_internal_r+0x1e44>
 100b390:	00801184 	movi	r2,70
 100b394:	88817126 	beq	r17,r2,100b95c <___svfprintf_internal_r+0x1f10>
 100b398:	00801144 	movi	r2,69
 100b39c:	b0816226 	beq	r22,r2,100b928 <___svfprintf_internal_r+0x1edc>
 100b3a0:	d8c02917 	ldw	r3,164(sp)
 100b3a4:	d8802104 	addi	r2,sp,132
 100b3a8:	d8800315 	stw	r2,12(sp)
 100b3ac:	d9403617 	ldw	r5,216(sp)
 100b3b0:	d8802504 	addi	r2,sp,148
 100b3b4:	d8800215 	stw	r2,8(sp)
 100b3b8:	d8802604 	addi	r2,sp,152
 100b3bc:	d8c00015 	stw	r3,0(sp)
 100b3c0:	d8800115 	stw	r2,4(sp)
 100b3c4:	01c00084 	movi	r7,2
 100b3c8:	a00d883a 	mov	r6,r20
 100b3cc:	9809883a 	mov	r4,r19
 100b3d0:	d8c03d15 	stw	r3,244(sp)
 100b3d4:	da003e15 	stw	r8,248(sp)
 100b3d8:	100be5c0 	call	100be5c <_dtoa_r>
 100b3dc:	1021883a 	mov	r16,r2
 100b3e0:	008019c4 	movi	r2,103
 100b3e4:	d8c03d17 	ldw	r3,244(sp)
 100b3e8:	da003e17 	ldw	r8,248(sp)
 100b3ec:	8880e726 	beq	r17,r2,100b78c <___svfprintf_internal_r+0x1d40>
 100b3f0:	008011c4 	movi	r2,71
 100b3f4:	8880d426 	beq	r17,r2,100b748 <___svfprintf_internal_r+0x1cfc>
 100b3f8:	80f9883a 	add	fp,r16,r3
 100b3fc:	d9003617 	ldw	r4,216(sp)
 100b400:	000d883a 	mov	r6,zero
 100b404:	000f883a 	mov	r7,zero
 100b408:	a00b883a 	mov	r5,r20
 100b40c:	da003e15 	stw	r8,248(sp)
 100b410:	1015fc40 	call	1015fc4 <__eqdf2>
 100b414:	da003e17 	ldw	r8,248(sp)
 100b418:	1000e426 	beq	r2,zero,100b7ac <___svfprintf_internal_r+0x1d60>
 100b41c:	d8802117 	ldw	r2,132(sp)
 100b420:	1700062e 	bgeu	r2,fp,100b43c <___svfprintf_internal_r+0x19f0>
 100b424:	01000c04 	movi	r4,48
 100b428:	10c00044 	addi	r3,r2,1
 100b42c:	d8c02115 	stw	r3,132(sp)
 100b430:	11000005 	stb	r4,0(r2)
 100b434:	d8802117 	ldw	r2,132(sp)
 100b438:	173ffb36 	bltu	r2,fp,100b428 <__alt_data_end+0xff00b428>
 100b43c:	1405c83a 	sub	r2,r2,r16
 100b440:	d8803315 	stw	r2,204(sp)
 100b444:	008011c4 	movi	r2,71
 100b448:	b080c526 	beq	r22,r2,100b760 <___svfprintf_internal_r+0x1d14>
 100b44c:	00801944 	movi	r2,101
 100b450:	1441d90e 	bge	r2,r17,100bbb8 <___svfprintf_internal_r+0x216c>
 100b454:	d8c02617 	ldw	r3,152(sp)
 100b458:	00801984 	movi	r2,102
 100b45c:	d8c03215 	stw	r3,200(sp)
 100b460:	88813426 	beq	r17,r2,100b934 <___svfprintf_internal_r+0x1ee8>
 100b464:	d8c03217 	ldw	r3,200(sp)
 100b468:	d9003317 	ldw	r4,204(sp)
 100b46c:	19012516 	blt	r3,r4,100b904 <___svfprintf_internal_r+0x1eb8>
 100b470:	9480004c 	andi	r18,r18,1
 100b474:	9001841e 	bne	r18,zero,100ba88 <___svfprintf_internal_r+0x203c>
 100b478:	1805883a 	mov	r2,r3
 100b47c:	1801cc16 	blt	r3,zero,100bbb0 <___svfprintf_internal_r+0x2164>
 100b480:	d8c03217 	ldw	r3,200(sp)
 100b484:	044019c4 	movi	r17,103
 100b488:	d8c02e15 	stw	r3,184(sp)
 100b48c:	df002a07 	ldb	fp,168(sp)
 100b490:	e000a61e 	bne	fp,zero,100b72c <___svfprintf_internal_r+0x1ce0>
 100b494:	df002783 	ldbu	fp,158(sp)
 100b498:	d8802a15 	stw	r2,168(sp)
 100b49c:	dc802b17 	ldw	r18,172(sp)
 100b4a0:	d8002915 	stw	zero,164(sp)
 100b4a4:	003b1706 	br	100a104 <__alt_data_end+0xff00a104>
 100b4a8:	040040b4 	movhi	r16,258
 100b4ac:	842b9704 	addi	r16,r16,-20900
 100b4b0:	003aa606 	br	1009f4c <__alt_data_end+0xff009f4c>
 100b4b4:	d9003917 	ldw	r4,228(sp)
 100b4b8:	04001004 	movi	r16,64
 100b4bc:	800b883a 	mov	r5,r16
 100b4c0:	100dfa40 	call	100dfa4 <_malloc_r>
 100b4c4:	d9002c17 	ldw	r4,176(sp)
 100b4c8:	20800015 	stw	r2,0(r4)
 100b4cc:	20800415 	stw	r2,16(r4)
 100b4d0:	1001cb26 	beq	r2,zero,100bc00 <___svfprintf_internal_r+0x21b4>
 100b4d4:	d8802c17 	ldw	r2,176(sp)
 100b4d8:	14000515 	stw	r16,20(r2)
 100b4dc:	00397606 	br	1009ab8 <__alt_data_end+0xff009ab8>
 100b4e0:	040040b4 	movhi	r16,258
 100b4e4:	842b9904 	addi	r16,r16,-20892
 100b4e8:	003ee106 	br	100b070 <__alt_data_end+0xff00b070>
 100b4ec:	d9402c17 	ldw	r5,176(sp)
 100b4f0:	d9801e04 	addi	r6,sp,120
 100b4f4:	9809883a 	mov	r4,r19
 100b4f8:	10104580 	call	1010458 <__ssprint_r>
 100b4fc:	103a381e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b500:	dc402617 	ldw	r17,152(sp)
 100b504:	d8c02017 	ldw	r3,128(sp)
 100b508:	da000404 	addi	r8,sp,16
 100b50c:	003f4306 	br	100b21c <__alt_data_end+0xff00b21c>
 100b510:	01400184 	movi	r5,6
 100b514:	d9402915 	stw	r5,164(sp)
 100b518:	003f9506 	br	100b370 <__alt_data_end+0xff00b370>
 100b51c:	d9002d17 	ldw	r4,180(sp)
 100b520:	25000017 	ldw	r20,0(r4)
 100b524:	21000104 	addi	r4,r4,4
 100b528:	d9002d15 	stw	r4,180(sp)
 100b52c:	a02dd7fa 	srai	r22,r20,31
 100b530:	b005883a 	mov	r2,r22
 100b534:	003a9b06 	br	1009fa4 <__alt_data_end+0xff009fa4>
 100b538:	d9402d17 	ldw	r5,180(sp)
 100b53c:	002d883a 	mov	r22,zero
 100b540:	2d000017 	ldw	r20,0(r5)
 100b544:	29400104 	addi	r5,r5,4
 100b548:	d9402d15 	stw	r5,180(sp)
 100b54c:	003bf906 	br	100a534 <__alt_data_end+0xff00a534>
 100b550:	9480100c 	andi	r18,r18,64
 100b554:	90006e26 	beq	r18,zero,100b710 <___svfprintf_internal_r+0x1cc4>
 100b558:	d9002d17 	ldw	r4,180(sp)
 100b55c:	d9402f17 	ldw	r5,188(sp)
 100b560:	20800017 	ldw	r2,0(r4)
 100b564:	21000104 	addi	r4,r4,4
 100b568:	d9002d15 	stw	r4,180(sp)
 100b56c:	1140000d 	sth	r5,0(r2)
 100b570:	00396106 	br	1009af8 <__alt_data_end+0xff009af8>
 100b574:	d9402c17 	ldw	r5,176(sp)
 100b578:	d9801e04 	addi	r6,sp,120
 100b57c:	9809883a 	mov	r4,r19
 100b580:	10104580 	call	1010458 <__ssprint_r>
 100b584:	103a161e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b588:	d8c02017 	ldw	r3,128(sp)
 100b58c:	d8801f17 	ldw	r2,124(sp)
 100b590:	da000404 	addi	r8,sp,16
 100b594:	d9403317 	ldw	r5,204(sp)
 100b598:	10800044 	addi	r2,r2,1
 100b59c:	44000015 	stw	r16,0(r8)
 100b5a0:	28c7883a 	add	r3,r5,r3
 100b5a4:	003b7706 	br	100a384 <__alt_data_end+0xff00a384>
 100b5a8:	8009883a 	mov	r4,r16
 100b5ac:	da003e15 	stw	r8,248(sp)
 100b5b0:	10099b40 	call	10099b4 <strlen>
 100b5b4:	d8802e15 	stw	r2,184(sp)
 100b5b8:	da003e17 	ldw	r8,248(sp)
 100b5bc:	103c280e 	bge	r2,zero,100a660 <__alt_data_end+0xff00a660>
 100b5c0:	0005883a 	mov	r2,zero
 100b5c4:	003c2606 	br	100a660 <__alt_data_end+0xff00a660>
 100b5c8:	00bfffc4 	movi	r2,-1
 100b5cc:	003a0906 	br	1009df4 <__alt_data_end+0xff009df4>
 100b5d0:	010040b4 	movhi	r4,258
 100b5d4:	212bab84 	addi	r4,r4,-20818
 100b5d8:	d9003515 	stw	r4,212(sp)
 100b5dc:	003b0606 	br	100a1f8 <__alt_data_end+0xff00a1f8>
 100b5e0:	013fffc4 	movi	r4,-1
 100b5e4:	003a2706 	br	1009e84 <__alt_data_end+0xff009e84>
 100b5e8:	d9402c17 	ldw	r5,176(sp)
 100b5ec:	d9801e04 	addi	r6,sp,120
 100b5f0:	9809883a 	mov	r4,r19
 100b5f4:	10104580 	call	1010458 <__ssprint_r>
 100b5f8:	1039f91e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b5fc:	d8c02017 	ldw	r3,128(sp)
 100b600:	da000404 	addi	r8,sp,16
 100b604:	003d8406 	br	100ac18 <__alt_data_end+0xff00ac18>
 100b608:	0023883a 	mov	r17,zero
 100b60c:	003d8306 	br	100ac1c <__alt_data_end+0xff00ac1c>
 100b610:	010040b4 	movhi	r4,258
 100b614:	212ba784 	addi	r4,r4,-20834
 100b618:	d9002b15 	stw	r4,172(sp)
 100b61c:	d9002b17 	ldw	r4,172(sp)
 100b620:	1c47883a 	add	r3,r3,r17
 100b624:	10800044 	addi	r2,r2,1
 100b628:	41000015 	stw	r4,0(r8)
 100b62c:	44400115 	stw	r17,4(r8)
 100b630:	d8c02015 	stw	r3,128(sp)
 100b634:	d8801f15 	stw	r2,124(sp)
 100b638:	010001c4 	movi	r4,7
 100b63c:	20bfcd16 	blt	r4,r2,100b574 <__alt_data_end+0xff00b574>
 100b640:	42000204 	addi	r8,r8,8
 100b644:	003fd306 	br	100b594 <__alt_data_end+0xff00b594>
 100b648:	d9402c17 	ldw	r5,176(sp)
 100b64c:	d9801e04 	addi	r6,sp,120
 100b650:	9809883a 	mov	r4,r19
 100b654:	10104580 	call	1010458 <__ssprint_r>
 100b658:	1039e11e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b65c:	d8802617 	ldw	r2,152(sp)
 100b660:	d8c02017 	ldw	r3,128(sp)
 100b664:	da000404 	addi	r8,sp,16
 100b668:	003e1c06 	br	100aedc <__alt_data_end+0xff00aedc>
 100b66c:	d8802917 	ldw	r2,164(sp)
 100b670:	00c00184 	movi	r3,6
 100b674:	1880012e 	bgeu	r3,r2,100b67c <___svfprintf_internal_r+0x1c30>
 100b678:	1805883a 	mov	r2,r3
 100b67c:	d8802e15 	stw	r2,184(sp)
 100b680:	1000f316 	blt	r2,zero,100ba50 <___svfprintf_internal_r+0x2004>
 100b684:	040040b4 	movhi	r16,258
 100b688:	d8802a15 	stw	r2,168(sp)
 100b68c:	dd002d15 	stw	r20,180(sp)
 100b690:	d8002915 	stw	zero,164(sp)
 100b694:	d8003215 	stw	zero,200(sp)
 100b698:	842ba504 	addi	r16,r16,-20844
 100b69c:	0039883a 	mov	fp,zero
 100b6a0:	003a9f06 	br	100a120 <__alt_data_end+0xff00a120>
 100b6a4:	010040b4 	movhi	r4,258
 100b6a8:	212bab84 	addi	r4,r4,-20818
 100b6ac:	d9003515 	stw	r4,212(sp)
 100b6b0:	003b5f06 	br	100a430 <__alt_data_end+0xff00a430>
 100b6b4:	d9402c17 	ldw	r5,176(sp)
 100b6b8:	d9801e04 	addi	r6,sp,120
 100b6bc:	9809883a 	mov	r4,r19
 100b6c0:	10104580 	call	1010458 <__ssprint_r>
 100b6c4:	1039c61e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b6c8:	d8802617 	ldw	r2,152(sp)
 100b6cc:	d9403317 	ldw	r5,204(sp)
 100b6d0:	d8c02017 	ldw	r3,128(sp)
 100b6d4:	da000404 	addi	r8,sp,16
 100b6d8:	2885c83a 	sub	r2,r5,r2
 100b6dc:	003e1006 	br	100af20 <__alt_data_end+0xff00af20>
 100b6e0:	00800044 	movi	r2,1
 100b6e4:	10803fcc 	andi	r2,r2,255
 100b6e8:	00c00044 	movi	r3,1
 100b6ec:	10fa3526 	beq	r2,r3,1009fc4 <__alt_data_end+0xff009fc4>
 100b6f0:	00c00084 	movi	r3,2
 100b6f4:	10fb9e26 	beq	r2,r3,100a570 <__alt_data_end+0xff00a570>
 100b6f8:	003a6406 	br	100a08c <__alt_data_end+0xff00a08c>
 100b6fc:	0021883a 	mov	r16,zero
 100b700:	003e0806 	br	100af24 <__alt_data_end+0xff00af24>
 100b704:	07000b44 	movi	fp,45
 100b708:	df002785 	stb	fp,158(sp)
 100b70c:	003a0b06 	br	1009f3c <__alt_data_end+0xff009f3c>
 100b710:	d8c02d17 	ldw	r3,180(sp)
 100b714:	d9002f17 	ldw	r4,188(sp)
 100b718:	18800017 	ldw	r2,0(r3)
 100b71c:	18c00104 	addi	r3,r3,4
 100b720:	d8c02d15 	stw	r3,180(sp)
 100b724:	11000015 	stw	r4,0(r2)
 100b728:	0038f306 	br	1009af8 <__alt_data_end+0xff009af8>
 100b72c:	00c00b44 	movi	r3,45
 100b730:	d8c02785 	stb	r3,158(sp)
 100b734:	d8802a15 	stw	r2,168(sp)
 100b738:	dc802b17 	ldw	r18,172(sp)
 100b73c:	d8002915 	stw	zero,164(sp)
 100b740:	07000b44 	movi	fp,45
 100b744:	003a7306 	br	100a114 <__alt_data_end+0xff00a114>
 100b748:	9080004c 	andi	r2,r18,1
 100b74c:	1000941e 	bne	r2,zero,100b9a0 <___svfprintf_internal_r+0x1f54>
 100b750:	d8802117 	ldw	r2,132(sp)
 100b754:	1405c83a 	sub	r2,r2,r16
 100b758:	d8803315 	stw	r2,204(sp)
 100b75c:	b441161e 	bne	r22,r17,100bbb8 <___svfprintf_internal_r+0x216c>
 100b760:	dd802617 	ldw	r22,152(sp)
 100b764:	00bfff44 	movi	r2,-3
 100b768:	b0801a16 	blt	r22,r2,100b7d4 <___svfprintf_internal_r+0x1d88>
 100b76c:	d9402917 	ldw	r5,164(sp)
 100b770:	2d801816 	blt	r5,r22,100b7d4 <___svfprintf_internal_r+0x1d88>
 100b774:	dd803215 	stw	r22,200(sp)
 100b778:	003f3a06 	br	100b464 <__alt_data_end+0xff00b464>
 100b77c:	1025883a 	mov	r18,r2
 100b780:	0039883a 	mov	fp,zero
 100b784:	00800084 	movi	r2,2
 100b788:	003fd606 	br	100b6e4 <__alt_data_end+0xff00b6e4>
 100b78c:	9080004c 	andi	r2,r18,1
 100b790:	103f191e 	bne	r2,zero,100b3f8 <__alt_data_end+0xff00b3f8>
 100b794:	d8802117 	ldw	r2,132(sp)
 100b798:	003f2806 	br	100b43c <__alt_data_end+0xff00b43c>
 100b79c:	010040b4 	movhi	r4,258
 100b7a0:	212ba784 	addi	r4,r4,-20834
 100b7a4:	d9002b15 	stw	r4,172(sp)
 100b7a8:	003c7c06 	br	100a99c <__alt_data_end+0xff00a99c>
 100b7ac:	e005883a 	mov	r2,fp
 100b7b0:	003f2206 	br	100b43c <__alt_data_end+0xff00b43c>
 100b7b4:	d9402917 	ldw	r5,164(sp)
 100b7b8:	df002783 	ldbu	fp,158(sp)
 100b7bc:	dd002d15 	stw	r20,180(sp)
 100b7c0:	d9402a15 	stw	r5,168(sp)
 100b7c4:	d9402e15 	stw	r5,184(sp)
 100b7c8:	d8002915 	stw	zero,164(sp)
 100b7cc:	d8003215 	stw	zero,200(sp)
 100b7d0:	003a4c06 	br	100a104 <__alt_data_end+0xff00a104>
 100b7d4:	8c7fff84 	addi	r17,r17,-2
 100b7d8:	b5bfffc4 	addi	r22,r22,-1
 100b7dc:	dd802615 	stw	r22,152(sp)
 100b7e0:	dc4022c5 	stb	r17,139(sp)
 100b7e4:	b000c316 	blt	r22,zero,100baf4 <___svfprintf_internal_r+0x20a8>
 100b7e8:	00800ac4 	movi	r2,43
 100b7ec:	d8802305 	stb	r2,140(sp)
 100b7f0:	00800244 	movi	r2,9
 100b7f4:	15806e16 	blt	r2,r22,100b9b0 <___svfprintf_internal_r+0x1f64>
 100b7f8:	00800c04 	movi	r2,48
 100b7fc:	b5800c04 	addi	r22,r22,48
 100b800:	d8802345 	stb	r2,141(sp)
 100b804:	dd802385 	stb	r22,142(sp)
 100b808:	d88023c4 	addi	r2,sp,143
 100b80c:	df0022c4 	addi	fp,sp,139
 100b810:	d8c03317 	ldw	r3,204(sp)
 100b814:	1739c83a 	sub	fp,r2,fp
 100b818:	d9003317 	ldw	r4,204(sp)
 100b81c:	e0c7883a 	add	r3,fp,r3
 100b820:	df003b15 	stw	fp,236(sp)
 100b824:	d8c02e15 	stw	r3,184(sp)
 100b828:	00800044 	movi	r2,1
 100b82c:	1100b70e 	bge	r2,r4,100bb0c <___svfprintf_internal_r+0x20c0>
 100b830:	d8c02e17 	ldw	r3,184(sp)
 100b834:	18c00044 	addi	r3,r3,1
 100b838:	d8c02e15 	stw	r3,184(sp)
 100b83c:	1805883a 	mov	r2,r3
 100b840:	1800b016 	blt	r3,zero,100bb04 <___svfprintf_internal_r+0x20b8>
 100b844:	d8003215 	stw	zero,200(sp)
 100b848:	003f1006 	br	100b48c <__alt_data_end+0xff00b48c>
 100b84c:	d8802917 	ldw	r2,164(sp)
 100b850:	103ec71e 	bne	r2,zero,100b370 <__alt_data_end+0xff00b370>
 100b854:	dc002915 	stw	r16,164(sp)
 100b858:	003ec506 	br	100b370 <__alt_data_end+0xff00b370>
 100b85c:	d9402c17 	ldw	r5,176(sp)
 100b860:	d9801e04 	addi	r6,sp,120
 100b864:	9809883a 	mov	r4,r19
 100b868:	10104580 	call	1010458 <__ssprint_r>
 100b86c:	10395c1e 	bne	r2,zero,1009de0 <__alt_data_end+0xff009de0>
 100b870:	dc402617 	ldw	r17,152(sp)
 100b874:	d8c02017 	ldw	r3,128(sp)
 100b878:	d8801f17 	ldw	r2,124(sp)
 100b87c:	da000404 	addi	r8,sp,16
 100b880:	003e7706 	br	100b260 <__alt_data_end+0xff00b260>
 100b884:	582f883a 	mov	r23,r11
 100b888:	d8002915 	stw	zero,164(sp)
 100b88c:	0038c406 	br	1009ba0 <__alt_data_end+0xff009ba0>
 100b890:	d8c02917 	ldw	r3,164(sp)
 100b894:	d8802104 	addi	r2,sp,132
 100b898:	d8800315 	stw	r2,12(sp)
 100b89c:	d9403617 	ldw	r5,216(sp)
 100b8a0:	d8802504 	addi	r2,sp,148
 100b8a4:	d8800215 	stw	r2,8(sp)
 100b8a8:	d8802604 	addi	r2,sp,152
 100b8ac:	d8c00015 	stw	r3,0(sp)
 100b8b0:	9809883a 	mov	r4,r19
 100b8b4:	d8800115 	stw	r2,4(sp)
 100b8b8:	01c000c4 	movi	r7,3
 100b8bc:	a00d883a 	mov	r6,r20
 100b8c0:	da003e15 	stw	r8,248(sp)
 100b8c4:	100be5c0 	call	100be5c <_dtoa_r>
 100b8c8:	d9002917 	ldw	r4,164(sp)
 100b8cc:	da003e17 	ldw	r8,248(sp)
 100b8d0:	1021883a 	mov	r16,r2
 100b8d4:	1139883a 	add	fp,r2,r4
 100b8d8:	2007883a 	mov	r3,r4
 100b8dc:	81000007 	ldb	r4,0(r16)
 100b8e0:	00800c04 	movi	r2,48
 100b8e4:	20806f26 	beq	r4,r2,100baa4 <___svfprintf_internal_r+0x2058>
 100b8e8:	d8c02617 	ldw	r3,152(sp)
 100b8ec:	e0f9883a 	add	fp,fp,r3
 100b8f0:	003ec206 	br	100b3fc <__alt_data_end+0xff00b3fc>
 100b8f4:	00c00b44 	movi	r3,45
 100b8f8:	2520003c 	xorhi	r20,r4,32768
 100b8fc:	d8c02a05 	stb	r3,168(sp)
 100b900:	003ea106 	br	100b388 <__alt_data_end+0xff00b388>
 100b904:	d8c03217 	ldw	r3,200(sp)
 100b908:	00c0890e 	bge	zero,r3,100bb30 <___svfprintf_internal_r+0x20e4>
 100b90c:	00800044 	movi	r2,1
 100b910:	d9003317 	ldw	r4,204(sp)
 100b914:	1105883a 	add	r2,r2,r4
 100b918:	d8802e15 	stw	r2,184(sp)
 100b91c:	10005f16 	blt	r2,zero,100ba9c <___svfprintf_internal_r+0x2050>
 100b920:	044019c4 	movi	r17,103
 100b924:	003ed906 	br	100b48c <__alt_data_end+0xff00b48c>
 100b928:	d9002917 	ldw	r4,164(sp)
 100b92c:	20c00044 	addi	r3,r4,1
 100b930:	003e9c06 	br	100b3a4 <__alt_data_end+0xff00b3a4>
 100b934:	d9002917 	ldw	r4,164(sp)
 100b938:	00c0680e 	bge	zero,r3,100badc <___svfprintf_internal_r+0x2090>
 100b93c:	2000461e 	bne	r4,zero,100ba58 <___svfprintf_internal_r+0x200c>
 100b940:	9480004c 	andi	r18,r18,1
 100b944:	9000441e 	bne	r18,zero,100ba58 <___svfprintf_internal_r+0x200c>
 100b948:	1805883a 	mov	r2,r3
 100b94c:	1800a016 	blt	r3,zero,100bbd0 <___svfprintf_internal_r+0x2184>
 100b950:	d8c03217 	ldw	r3,200(sp)
 100b954:	d8c02e15 	stw	r3,184(sp)
 100b958:	003ecc06 	br	100b48c <__alt_data_end+0xff00b48c>
 100b95c:	d9402917 	ldw	r5,164(sp)
 100b960:	d8802104 	addi	r2,sp,132
 100b964:	d8800315 	stw	r2,12(sp)
 100b968:	d9400015 	stw	r5,0(sp)
 100b96c:	d8802504 	addi	r2,sp,148
 100b970:	d9403617 	ldw	r5,216(sp)
 100b974:	d8800215 	stw	r2,8(sp)
 100b978:	d8802604 	addi	r2,sp,152
 100b97c:	d8800115 	stw	r2,4(sp)
 100b980:	01c000c4 	movi	r7,3
 100b984:	a00d883a 	mov	r6,r20
 100b988:	9809883a 	mov	r4,r19
 100b98c:	da003e15 	stw	r8,248(sp)
 100b990:	100be5c0 	call	100be5c <_dtoa_r>
 100b994:	d8c02917 	ldw	r3,164(sp)
 100b998:	da003e17 	ldw	r8,248(sp)
 100b99c:	1021883a 	mov	r16,r2
 100b9a0:	00801184 	movi	r2,70
 100b9a4:	80f9883a 	add	fp,r16,r3
 100b9a8:	88bfcc26 	beq	r17,r2,100b8dc <__alt_data_end+0xff00b8dc>
 100b9ac:	003e9306 	br	100b3fc <__alt_data_end+0xff00b3fc>
 100b9b0:	df0022c4 	addi	fp,sp,139
 100b9b4:	dc002915 	stw	r16,164(sp)
 100b9b8:	9829883a 	mov	r20,r19
 100b9bc:	e021883a 	mov	r16,fp
 100b9c0:	4027883a 	mov	r19,r8
 100b9c4:	b009883a 	mov	r4,r22
 100b9c8:	01400284 	movi	r5,10
 100b9cc:	1014d000 	call	1014d00 <__modsi3>
 100b9d0:	10800c04 	addi	r2,r2,48
 100b9d4:	843fffc4 	addi	r16,r16,-1
 100b9d8:	b009883a 	mov	r4,r22
 100b9dc:	01400284 	movi	r5,10
 100b9e0:	80800005 	stb	r2,0(r16)
 100b9e4:	1014c7c0 	call	1014c7c <__divsi3>
 100b9e8:	102d883a 	mov	r22,r2
 100b9ec:	00800244 	movi	r2,9
 100b9f0:	15bff416 	blt	r2,r22,100b9c4 <__alt_data_end+0xff00b9c4>
 100b9f4:	9811883a 	mov	r8,r19
 100b9f8:	b0800c04 	addi	r2,r22,48
 100b9fc:	a027883a 	mov	r19,r20
 100ba00:	8029883a 	mov	r20,r16
 100ba04:	a17fffc4 	addi	r5,r20,-1
 100ba08:	a0bfffc5 	stb	r2,-1(r20)
 100ba0c:	dc002917 	ldw	r16,164(sp)
 100ba10:	2f00752e 	bgeu	r5,fp,100bbe8 <___svfprintf_internal_r+0x219c>
 100ba14:	d9c02384 	addi	r7,sp,142
 100ba18:	3d0fc83a 	sub	r7,r7,r20
 100ba1c:	d9002344 	addi	r4,sp,141
 100ba20:	e1cf883a 	add	r7,fp,r7
 100ba24:	00000106 	br	100ba2c <___svfprintf_internal_r+0x1fe0>
 100ba28:	28800003 	ldbu	r2,0(r5)
 100ba2c:	20800005 	stb	r2,0(r4)
 100ba30:	21000044 	addi	r4,r4,1
 100ba34:	29400044 	addi	r5,r5,1
 100ba38:	21fffb1e 	bne	r4,r7,100ba28 <__alt_data_end+0xff00ba28>
 100ba3c:	d8802304 	addi	r2,sp,140
 100ba40:	1505c83a 	sub	r2,r2,r20
 100ba44:	d8c02344 	addi	r3,sp,141
 100ba48:	1885883a 	add	r2,r3,r2
 100ba4c:	003f7006 	br	100b810 <__alt_data_end+0xff00b810>
 100ba50:	0005883a 	mov	r2,zero
 100ba54:	003f0b06 	br	100b684 <__alt_data_end+0xff00b684>
 100ba58:	d9002917 	ldw	r4,164(sp)
 100ba5c:	d8c03217 	ldw	r3,200(sp)
 100ba60:	20800044 	addi	r2,r4,1
 100ba64:	1885883a 	add	r2,r3,r2
 100ba68:	d8802e15 	stw	r2,184(sp)
 100ba6c:	103e870e 	bge	r2,zero,100b48c <__alt_data_end+0xff00b48c>
 100ba70:	0005883a 	mov	r2,zero
 100ba74:	003e8506 	br	100b48c <__alt_data_end+0xff00b48c>
 100ba78:	010040b4 	movhi	r4,258
 100ba7c:	212ba784 	addi	r4,r4,-20834
 100ba80:	d9002b15 	stw	r4,172(sp)
 100ba84:	003cc506 	br	100ad9c <__alt_data_end+0xff00ad9c>
 100ba88:	d8c03217 	ldw	r3,200(sp)
 100ba8c:	18c00044 	addi	r3,r3,1
 100ba90:	d8c02e15 	stw	r3,184(sp)
 100ba94:	1805883a 	mov	r2,r3
 100ba98:	183fa10e 	bge	r3,zero,100b920 <__alt_data_end+0xff00b920>
 100ba9c:	0005883a 	mov	r2,zero
 100baa0:	003f9f06 	br	100b920 <__alt_data_end+0xff00b920>
 100baa4:	d9003617 	ldw	r4,216(sp)
 100baa8:	000d883a 	mov	r6,zero
 100baac:	000f883a 	mov	r7,zero
 100bab0:	a00b883a 	mov	r5,r20
 100bab4:	d8c03d15 	stw	r3,244(sp)
 100bab8:	da003e15 	stw	r8,248(sp)
 100babc:	1015fc40 	call	1015fc4 <__eqdf2>
 100bac0:	d8c03d17 	ldw	r3,244(sp)
 100bac4:	da003e17 	ldw	r8,248(sp)
 100bac8:	103f8726 	beq	r2,zero,100b8e8 <__alt_data_end+0xff00b8e8>
 100bacc:	00800044 	movi	r2,1
 100bad0:	10c7c83a 	sub	r3,r2,r3
 100bad4:	d8c02615 	stw	r3,152(sp)
 100bad8:	003f8406 	br	100b8ec <__alt_data_end+0xff00b8ec>
 100badc:	20000e1e 	bne	r4,zero,100bb18 <___svfprintf_internal_r+0x20cc>
 100bae0:	9480004c 	andi	r18,r18,1
 100bae4:	90000c1e 	bne	r18,zero,100bb18 <___svfprintf_internal_r+0x20cc>
 100bae8:	00800044 	movi	r2,1
 100baec:	d8802e15 	stw	r2,184(sp)
 100baf0:	003e6606 	br	100b48c <__alt_data_end+0xff00b48c>
 100baf4:	00800b44 	movi	r2,45
 100baf8:	05adc83a 	sub	r22,zero,r22
 100bafc:	d8802305 	stb	r2,140(sp)
 100bb00:	003f3b06 	br	100b7f0 <__alt_data_end+0xff00b7f0>
 100bb04:	0005883a 	mov	r2,zero
 100bb08:	003f4e06 	br	100b844 <__alt_data_end+0xff00b844>
 100bb0c:	90a4703a 	and	r18,r18,r2
 100bb10:	903f4a26 	beq	r18,zero,100b83c <__alt_data_end+0xff00b83c>
 100bb14:	003f4606 	br	100b830 <__alt_data_end+0xff00b830>
 100bb18:	d8c02917 	ldw	r3,164(sp)
 100bb1c:	18c00084 	addi	r3,r3,2
 100bb20:	d8c02e15 	stw	r3,184(sp)
 100bb24:	1805883a 	mov	r2,r3
 100bb28:	183e580e 	bge	r3,zero,100b48c <__alt_data_end+0xff00b48c>
 100bb2c:	003fd006 	br	100ba70 <__alt_data_end+0xff00ba70>
 100bb30:	00800084 	movi	r2,2
 100bb34:	10c5c83a 	sub	r2,r2,r3
 100bb38:	003f7506 	br	100b910 <__alt_data_end+0xff00b910>
 100bb3c:	d8802d17 	ldw	r2,180(sp)
 100bb40:	d9002d17 	ldw	r4,180(sp)
 100bb44:	bc400043 	ldbu	r17,1(r23)
 100bb48:	10800017 	ldw	r2,0(r2)
 100bb4c:	582f883a 	mov	r23,r11
 100bb50:	d8802915 	stw	r2,164(sp)
 100bb54:	20800104 	addi	r2,r4,4
 100bb58:	d9002917 	ldw	r4,164(sp)
 100bb5c:	d8802d15 	stw	r2,180(sp)
 100bb60:	203df00e 	bge	r4,zero,100b324 <__alt_data_end+0xff00b324>
 100bb64:	8c403fcc 	andi	r17,r17,255
 100bb68:	00bfffc4 	movi	r2,-1
 100bb6c:	8c40201c 	xori	r17,r17,128
 100bb70:	d8802915 	stw	r2,164(sp)
 100bb74:	8c7fe004 	addi	r17,r17,-128
 100bb78:	00380806 	br	1009b9c <__alt_data_end+0xff009b9c>
 100bb7c:	9080004c 	andi	r2,r18,1
 100bb80:	0039883a 	mov	fp,zero
 100bb84:	10000726 	beq	r2,zero,100bba4 <___svfprintf_internal_r+0x2158>
 100bb88:	d8c02817 	ldw	r3,160(sp)
 100bb8c:	dc001dc4 	addi	r16,sp,119
 100bb90:	00800c04 	movi	r2,48
 100bb94:	1c07c83a 	sub	r3,r3,r16
 100bb98:	d8801dc5 	stb	r2,119(sp)
 100bb9c:	d8c02e15 	stw	r3,184(sp)
 100bba0:	00395206 	br	100a0ec <__alt_data_end+0xff00a0ec>
 100bba4:	d8002e15 	stw	zero,184(sp)
 100bba8:	dc001e04 	addi	r16,sp,120
 100bbac:	00394f06 	br	100a0ec <__alt_data_end+0xff00a0ec>
 100bbb0:	0005883a 	mov	r2,zero
 100bbb4:	003e3206 	br	100b480 <__alt_data_end+0xff00b480>
 100bbb8:	dd802617 	ldw	r22,152(sp)
 100bbbc:	003f0606 	br	100b7d8 <__alt_data_end+0xff00b7d8>
 100bbc0:	d9c02785 	stb	r7,158(sp)
 100bbc4:	003a5106 	br	100a50c <__alt_data_end+0xff00a50c>
 100bbc8:	d9c02785 	stb	r7,158(sp)
 100bbcc:	003a3706 	br	100a4ac <__alt_data_end+0xff00a4ac>
 100bbd0:	0005883a 	mov	r2,zero
 100bbd4:	003f5e06 	br	100b950 <__alt_data_end+0xff00b950>
 100bbd8:	d9c02785 	stb	r7,158(sp)
 100bbdc:	00391706 	br	100a03c <__alt_data_end+0xff00a03c>
 100bbe0:	d9c02785 	stb	r7,158(sp)
 100bbe4:	0038e606 	br	1009f80 <__alt_data_end+0xff009f80>
 100bbe8:	d8802344 	addi	r2,sp,141
 100bbec:	003f0806 	br	100b810 <__alt_data_end+0xff00b810>
 100bbf0:	d9c02785 	stb	r7,158(sp)
 100bbf4:	0038b706 	br	1009ed4 <__alt_data_end+0xff009ed4>
 100bbf8:	d9c02785 	stb	r7,158(sp)
 100bbfc:	003adc06 	br	100a770 <__alt_data_end+0xff00a770>
 100bc00:	d9403917 	ldw	r5,228(sp)
 100bc04:	00800304 	movi	r2,12
 100bc08:	28800015 	stw	r2,0(r5)
 100bc0c:	00bfffc4 	movi	r2,-1
 100bc10:	00387806 	br	1009df4 <__alt_data_end+0xff009df4>
 100bc14:	d9c02785 	stb	r7,158(sp)
 100bc18:	003abf06 	br	100a718 <__alt_data_end+0xff00a718>
 100bc1c:	d9c02785 	stb	r7,158(sp)
 100bc20:	003a9b06 	br	100a690 <__alt_data_end+0xff00a690>

0100bc24 <_user_strerror>:
 100bc24:	0005883a 	mov	r2,zero
 100bc28:	f800283a 	ret

0100bc2c <_vfiprintf_r>:
 100bc2c:	deffff04 	addi	sp,sp,-4
 100bc30:	dfc00015 	stw	ra,0(sp)
 100bc34:	10119780 	call	1011978 <___vfiprintf_internal_r>
 100bc38:	dfc00017 	ldw	ra,0(sp)
 100bc3c:	dec00104 	addi	sp,sp,4
 100bc40:	f800283a 	ret

0100bc44 <abort>:
 100bc44:	deffff04 	addi	sp,sp,-4
 100bc48:	01000184 	movi	r4,6
 100bc4c:	dfc00015 	stw	ra,0(sp)
 100bc50:	101026c0 	call	101026c <raise>
 100bc54:	01000044 	movi	r4,1
 100bc58:	10175d00 	call	10175d0 <_exit>

0100bc5c <quorem>:
 100bc5c:	defff704 	addi	sp,sp,-36
 100bc60:	dc800215 	stw	r18,8(sp)
 100bc64:	20800417 	ldw	r2,16(r4)
 100bc68:	2c800417 	ldw	r18,16(r5)
 100bc6c:	dfc00815 	stw	ra,32(sp)
 100bc70:	ddc00715 	stw	r23,28(sp)
 100bc74:	dd800615 	stw	r22,24(sp)
 100bc78:	dd400515 	stw	r21,20(sp)
 100bc7c:	dd000415 	stw	r20,16(sp)
 100bc80:	dcc00315 	stw	r19,12(sp)
 100bc84:	dc400115 	stw	r17,4(sp)
 100bc88:	dc000015 	stw	r16,0(sp)
 100bc8c:	14807116 	blt	r2,r18,100be54 <quorem+0x1f8>
 100bc90:	94bfffc4 	addi	r18,r18,-1
 100bc94:	94ad883a 	add	r22,r18,r18
 100bc98:	b5ad883a 	add	r22,r22,r22
 100bc9c:	2c400504 	addi	r17,r5,20
 100bca0:	8da9883a 	add	r20,r17,r22
 100bca4:	25400504 	addi	r21,r4,20
 100bca8:	282f883a 	mov	r23,r5
 100bcac:	adad883a 	add	r22,r21,r22
 100bcb0:	a1400017 	ldw	r5,0(r20)
 100bcb4:	2021883a 	mov	r16,r4
 100bcb8:	b1000017 	ldw	r4,0(r22)
 100bcbc:	29400044 	addi	r5,r5,1
 100bcc0:	1014d740 	call	1014d74 <__udivsi3>
 100bcc4:	1027883a 	mov	r19,r2
 100bcc8:	10002c26 	beq	r2,zero,100bd7c <quorem+0x120>
 100bccc:	a813883a 	mov	r9,r21
 100bcd0:	880b883a 	mov	r5,r17
 100bcd4:	0009883a 	mov	r4,zero
 100bcd8:	000d883a 	mov	r6,zero
 100bcdc:	2a000017 	ldw	r8,0(r5)
 100bce0:	49c00017 	ldw	r7,0(r9)
 100bce4:	29400104 	addi	r5,r5,4
 100bce8:	40bfffcc 	andi	r2,r8,65535
 100bcec:	14c5383a 	mul	r2,r2,r19
 100bcf0:	4010d43a 	srli	r8,r8,16
 100bcf4:	38ffffcc 	andi	r3,r7,65535
 100bcf8:	1105883a 	add	r2,r2,r4
 100bcfc:	1008d43a 	srli	r4,r2,16
 100bd00:	44d1383a 	mul	r8,r8,r19
 100bd04:	198d883a 	add	r6,r3,r6
 100bd08:	10ffffcc 	andi	r3,r2,65535
 100bd0c:	30c7c83a 	sub	r3,r6,r3
 100bd10:	380ed43a 	srli	r7,r7,16
 100bd14:	4105883a 	add	r2,r8,r4
 100bd18:	180dd43a 	srai	r6,r3,16
 100bd1c:	113fffcc 	andi	r4,r2,65535
 100bd20:	390fc83a 	sub	r7,r7,r4
 100bd24:	398d883a 	add	r6,r7,r6
 100bd28:	300e943a 	slli	r7,r6,16
 100bd2c:	18ffffcc 	andi	r3,r3,65535
 100bd30:	1008d43a 	srli	r4,r2,16
 100bd34:	38ceb03a 	or	r7,r7,r3
 100bd38:	49c00015 	stw	r7,0(r9)
 100bd3c:	300dd43a 	srai	r6,r6,16
 100bd40:	4a400104 	addi	r9,r9,4
 100bd44:	a17fe52e 	bgeu	r20,r5,100bcdc <__alt_data_end+0xff00bcdc>
 100bd48:	b0800017 	ldw	r2,0(r22)
 100bd4c:	10000b1e 	bne	r2,zero,100bd7c <quorem+0x120>
 100bd50:	b0bfff04 	addi	r2,r22,-4
 100bd54:	a880082e 	bgeu	r21,r2,100bd78 <quorem+0x11c>
 100bd58:	b0ffff17 	ldw	r3,-4(r22)
 100bd5c:	18000326 	beq	r3,zero,100bd6c <quorem+0x110>
 100bd60:	00000506 	br	100bd78 <quorem+0x11c>
 100bd64:	10c00017 	ldw	r3,0(r2)
 100bd68:	1800031e 	bne	r3,zero,100bd78 <quorem+0x11c>
 100bd6c:	10bfff04 	addi	r2,r2,-4
 100bd70:	94bfffc4 	addi	r18,r18,-1
 100bd74:	a8bffb36 	bltu	r21,r2,100bd64 <__alt_data_end+0xff00bd64>
 100bd78:	84800415 	stw	r18,16(r16)
 100bd7c:	b80b883a 	mov	r5,r23
 100bd80:	8009883a 	mov	r4,r16
 100bd84:	100f2b80 	call	100f2b8 <__mcmp>
 100bd88:	10002616 	blt	r2,zero,100be24 <quorem+0x1c8>
 100bd8c:	9cc00044 	addi	r19,r19,1
 100bd90:	a805883a 	mov	r2,r21
 100bd94:	000b883a 	mov	r5,zero
 100bd98:	11000017 	ldw	r4,0(r2)
 100bd9c:	89800017 	ldw	r6,0(r17)
 100bda0:	10800104 	addi	r2,r2,4
 100bda4:	20ffffcc 	andi	r3,r4,65535
 100bda8:	194b883a 	add	r5,r3,r5
 100bdac:	30ffffcc 	andi	r3,r6,65535
 100bdb0:	28c7c83a 	sub	r3,r5,r3
 100bdb4:	300cd43a 	srli	r6,r6,16
 100bdb8:	2008d43a 	srli	r4,r4,16
 100bdbc:	180bd43a 	srai	r5,r3,16
 100bdc0:	18ffffcc 	andi	r3,r3,65535
 100bdc4:	2189c83a 	sub	r4,r4,r6
 100bdc8:	2149883a 	add	r4,r4,r5
 100bdcc:	200c943a 	slli	r6,r4,16
 100bdd0:	8c400104 	addi	r17,r17,4
 100bdd4:	200bd43a 	srai	r5,r4,16
 100bdd8:	30c6b03a 	or	r3,r6,r3
 100bddc:	10ffff15 	stw	r3,-4(r2)
 100bde0:	a47fed2e 	bgeu	r20,r17,100bd98 <__alt_data_end+0xff00bd98>
 100bde4:	9485883a 	add	r2,r18,r18
 100bde8:	1085883a 	add	r2,r2,r2
 100bdec:	a887883a 	add	r3,r21,r2
 100bdf0:	18800017 	ldw	r2,0(r3)
 100bdf4:	10000b1e 	bne	r2,zero,100be24 <quorem+0x1c8>
 100bdf8:	18bfff04 	addi	r2,r3,-4
 100bdfc:	a880082e 	bgeu	r21,r2,100be20 <quorem+0x1c4>
 100be00:	18ffff17 	ldw	r3,-4(r3)
 100be04:	18000326 	beq	r3,zero,100be14 <quorem+0x1b8>
 100be08:	00000506 	br	100be20 <quorem+0x1c4>
 100be0c:	10c00017 	ldw	r3,0(r2)
 100be10:	1800031e 	bne	r3,zero,100be20 <quorem+0x1c4>
 100be14:	10bfff04 	addi	r2,r2,-4
 100be18:	94bfffc4 	addi	r18,r18,-1
 100be1c:	a8bffb36 	bltu	r21,r2,100be0c <__alt_data_end+0xff00be0c>
 100be20:	84800415 	stw	r18,16(r16)
 100be24:	9805883a 	mov	r2,r19
 100be28:	dfc00817 	ldw	ra,32(sp)
 100be2c:	ddc00717 	ldw	r23,28(sp)
 100be30:	dd800617 	ldw	r22,24(sp)
 100be34:	dd400517 	ldw	r21,20(sp)
 100be38:	dd000417 	ldw	r20,16(sp)
 100be3c:	dcc00317 	ldw	r19,12(sp)
 100be40:	dc800217 	ldw	r18,8(sp)
 100be44:	dc400117 	ldw	r17,4(sp)
 100be48:	dc000017 	ldw	r16,0(sp)
 100be4c:	dec00904 	addi	sp,sp,36
 100be50:	f800283a 	ret
 100be54:	0005883a 	mov	r2,zero
 100be58:	003ff306 	br	100be28 <__alt_data_end+0xff00be28>

0100be5c <_dtoa_r>:
 100be5c:	20801017 	ldw	r2,64(r4)
 100be60:	deffde04 	addi	sp,sp,-136
 100be64:	df002015 	stw	fp,128(sp)
 100be68:	dcc01b15 	stw	r19,108(sp)
 100be6c:	dc801a15 	stw	r18,104(sp)
 100be70:	dc401915 	stw	r17,100(sp)
 100be74:	dc001815 	stw	r16,96(sp)
 100be78:	dfc02115 	stw	ra,132(sp)
 100be7c:	ddc01f15 	stw	r23,124(sp)
 100be80:	dd801e15 	stw	r22,120(sp)
 100be84:	dd401d15 	stw	r21,116(sp)
 100be88:	dd001c15 	stw	r20,112(sp)
 100be8c:	d9c00315 	stw	r7,12(sp)
 100be90:	2039883a 	mov	fp,r4
 100be94:	3023883a 	mov	r17,r6
 100be98:	2825883a 	mov	r18,r5
 100be9c:	dc002417 	ldw	r16,144(sp)
 100bea0:	3027883a 	mov	r19,r6
 100bea4:	10000826 	beq	r2,zero,100bec8 <_dtoa_r+0x6c>
 100bea8:	21801117 	ldw	r6,68(r4)
 100beac:	00c00044 	movi	r3,1
 100beb0:	100b883a 	mov	r5,r2
 100beb4:	1986983a 	sll	r3,r3,r6
 100beb8:	11800115 	stw	r6,4(r2)
 100bebc:	10c00215 	stw	r3,8(r2)
 100bec0:	100ea980 	call	100ea98 <_Bfree>
 100bec4:	e0001015 	stw	zero,64(fp)
 100bec8:	88002e16 	blt	r17,zero,100bf84 <_dtoa_r+0x128>
 100becc:	80000015 	stw	zero,0(r16)
 100bed0:	889ffc2c 	andhi	r2,r17,32752
 100bed4:	00dffc34 	movhi	r3,32752
 100bed8:	10c01c26 	beq	r2,r3,100bf4c <_dtoa_r+0xf0>
 100bedc:	000d883a 	mov	r6,zero
 100bee0:	000f883a 	mov	r7,zero
 100bee4:	9009883a 	mov	r4,r18
 100bee8:	980b883a 	mov	r5,r19
 100beec:	1015fc40 	call	1015fc4 <__eqdf2>
 100bef0:	10002b1e 	bne	r2,zero,100bfa0 <_dtoa_r+0x144>
 100bef4:	d9c02317 	ldw	r7,140(sp)
 100bef8:	00800044 	movi	r2,1
 100befc:	38800015 	stw	r2,0(r7)
 100bf00:	d8802517 	ldw	r2,148(sp)
 100bf04:	10019e26 	beq	r2,zero,100c580 <_dtoa_r+0x724>
 100bf08:	d8c02517 	ldw	r3,148(sp)
 100bf0c:	008040b4 	movhi	r2,258
 100bf10:	10aba744 	addi	r2,r2,-20835
 100bf14:	18800015 	stw	r2,0(r3)
 100bf18:	10bfffc4 	addi	r2,r2,-1
 100bf1c:	dfc02117 	ldw	ra,132(sp)
 100bf20:	df002017 	ldw	fp,128(sp)
 100bf24:	ddc01f17 	ldw	r23,124(sp)
 100bf28:	dd801e17 	ldw	r22,120(sp)
 100bf2c:	dd401d17 	ldw	r21,116(sp)
 100bf30:	dd001c17 	ldw	r20,112(sp)
 100bf34:	dcc01b17 	ldw	r19,108(sp)
 100bf38:	dc801a17 	ldw	r18,104(sp)
 100bf3c:	dc401917 	ldw	r17,100(sp)
 100bf40:	dc001817 	ldw	r16,96(sp)
 100bf44:	dec02204 	addi	sp,sp,136
 100bf48:	f800283a 	ret
 100bf4c:	d8c02317 	ldw	r3,140(sp)
 100bf50:	0089c3c4 	movi	r2,9999
 100bf54:	18800015 	stw	r2,0(r3)
 100bf58:	90017726 	beq	r18,zero,100c538 <_dtoa_r+0x6dc>
 100bf5c:	008040b4 	movhi	r2,258
 100bf60:	10abb304 	addi	r2,r2,-20788
 100bf64:	d9002517 	ldw	r4,148(sp)
 100bf68:	203fec26 	beq	r4,zero,100bf1c <__alt_data_end+0xff00bf1c>
 100bf6c:	10c000c7 	ldb	r3,3(r2)
 100bf70:	1801781e 	bne	r3,zero,100c554 <_dtoa_r+0x6f8>
 100bf74:	10c000c4 	addi	r3,r2,3
 100bf78:	d9802517 	ldw	r6,148(sp)
 100bf7c:	30c00015 	stw	r3,0(r6)
 100bf80:	003fe606 	br	100bf1c <__alt_data_end+0xff00bf1c>
 100bf84:	04e00034 	movhi	r19,32768
 100bf88:	9cffffc4 	addi	r19,r19,-1
 100bf8c:	00800044 	movi	r2,1
 100bf90:	8ce6703a 	and	r19,r17,r19
 100bf94:	80800015 	stw	r2,0(r16)
 100bf98:	9823883a 	mov	r17,r19
 100bf9c:	003fcc06 	br	100bed0 <__alt_data_end+0xff00bed0>
 100bfa0:	d8800204 	addi	r2,sp,8
 100bfa4:	d8800015 	stw	r2,0(sp)
 100bfa8:	d9c00104 	addi	r7,sp,4
 100bfac:	900b883a 	mov	r5,r18
 100bfb0:	980d883a 	mov	r6,r19
 100bfb4:	e009883a 	mov	r4,fp
 100bfb8:	8820d53a 	srli	r16,r17,20
 100bfbc:	100f6840 	call	100f684 <__d2b>
 100bfc0:	d8800915 	stw	r2,36(sp)
 100bfc4:	8001651e 	bne	r16,zero,100c55c <_dtoa_r+0x700>
 100bfc8:	dd800217 	ldw	r22,8(sp)
 100bfcc:	dc000117 	ldw	r16,4(sp)
 100bfd0:	00800804 	movi	r2,32
 100bfd4:	b421883a 	add	r16,r22,r16
 100bfd8:	80c10c84 	addi	r3,r16,1074
 100bfdc:	10c2d10e 	bge	r2,r3,100cb24 <_dtoa_r+0xcc8>
 100bfe0:	00801004 	movi	r2,64
 100bfe4:	81010484 	addi	r4,r16,1042
 100bfe8:	10c7c83a 	sub	r3,r2,r3
 100bfec:	9108d83a 	srl	r4,r18,r4
 100bff0:	88e2983a 	sll	r17,r17,r3
 100bff4:	2448b03a 	or	r4,r4,r17
 100bff8:	101738c0 	call	101738c <__floatunsidf>
 100bffc:	017f8434 	movhi	r5,65040
 100c000:	01800044 	movi	r6,1
 100c004:	1009883a 	mov	r4,r2
 100c008:	194b883a 	add	r5,r3,r5
 100c00c:	843fffc4 	addi	r16,r16,-1
 100c010:	d9801115 	stw	r6,68(sp)
 100c014:	000d883a 	mov	r6,zero
 100c018:	01cffe34 	movhi	r7,16376
 100c01c:	10169340 	call	1016934 <__subdf3>
 100c020:	0198dbf4 	movhi	r6,25455
 100c024:	01cff4f4 	movhi	r7,16339
 100c028:	3190d844 	addi	r6,r6,17249
 100c02c:	39e1e9c4 	addi	r7,r7,-30809
 100c030:	1009883a 	mov	r4,r2
 100c034:	180b883a 	mov	r5,r3
 100c038:	101621c0 	call	101621c <__muldf3>
 100c03c:	01a2d874 	movhi	r6,35681
 100c040:	01cff1f4 	movhi	r7,16327
 100c044:	31b22cc4 	addi	r6,r6,-14157
 100c048:	39e28a04 	addi	r7,r7,-30168
 100c04c:	180b883a 	mov	r5,r3
 100c050:	1009883a 	mov	r4,r2
 100c054:	1014e300 	call	1014e30 <__adddf3>
 100c058:	8009883a 	mov	r4,r16
 100c05c:	1029883a 	mov	r20,r2
 100c060:	1823883a 	mov	r17,r3
 100c064:	10172b00 	call	10172b0 <__floatsidf>
 100c068:	019427f4 	movhi	r6,20639
 100c06c:	01cff4f4 	movhi	r7,16339
 100c070:	319e7ec4 	addi	r6,r6,31227
 100c074:	39d104c4 	addi	r7,r7,17427
 100c078:	1009883a 	mov	r4,r2
 100c07c:	180b883a 	mov	r5,r3
 100c080:	101621c0 	call	101621c <__muldf3>
 100c084:	100d883a 	mov	r6,r2
 100c088:	180f883a 	mov	r7,r3
 100c08c:	a009883a 	mov	r4,r20
 100c090:	880b883a 	mov	r5,r17
 100c094:	1014e300 	call	1014e30 <__adddf3>
 100c098:	1009883a 	mov	r4,r2
 100c09c:	180b883a 	mov	r5,r3
 100c0a0:	1029883a 	mov	r20,r2
 100c0a4:	1823883a 	mov	r17,r3
 100c0a8:	10172300 	call	1017230 <__fixdfsi>
 100c0ac:	000d883a 	mov	r6,zero
 100c0b0:	000f883a 	mov	r7,zero
 100c0b4:	a009883a 	mov	r4,r20
 100c0b8:	880b883a 	mov	r5,r17
 100c0bc:	d8800515 	stw	r2,20(sp)
 100c0c0:	10161280 	call	1016128 <__ledf2>
 100c0c4:	10028716 	blt	r2,zero,100cae4 <_dtoa_r+0xc88>
 100c0c8:	d8c00517 	ldw	r3,20(sp)
 100c0cc:	00800584 	movi	r2,22
 100c0d0:	10c27536 	bltu	r2,r3,100caa8 <_dtoa_r+0xc4c>
 100c0d4:	180490fa 	slli	r2,r3,3
 100c0d8:	00c040b4 	movhi	r3,258
 100c0dc:	18ebce04 	addi	r3,r3,-20680
 100c0e0:	1885883a 	add	r2,r3,r2
 100c0e4:	11000017 	ldw	r4,0(r2)
 100c0e8:	11400117 	ldw	r5,4(r2)
 100c0ec:	900d883a 	mov	r6,r18
 100c0f0:	980f883a 	mov	r7,r19
 100c0f4:	101604c0 	call	101604c <__gedf2>
 100c0f8:	00828d0e 	bge	zero,r2,100cb30 <_dtoa_r+0xcd4>
 100c0fc:	d9000517 	ldw	r4,20(sp)
 100c100:	d8000e15 	stw	zero,56(sp)
 100c104:	213fffc4 	addi	r4,r4,-1
 100c108:	d9000515 	stw	r4,20(sp)
 100c10c:	b42dc83a 	sub	r22,r22,r16
 100c110:	b5bfffc4 	addi	r22,r22,-1
 100c114:	b0026f16 	blt	r22,zero,100cad4 <_dtoa_r+0xc78>
 100c118:	d8000815 	stw	zero,32(sp)
 100c11c:	d9c00517 	ldw	r7,20(sp)
 100c120:	38026416 	blt	r7,zero,100cab4 <_dtoa_r+0xc58>
 100c124:	b1ed883a 	add	r22,r22,r7
 100c128:	d9c00d15 	stw	r7,52(sp)
 100c12c:	d8000a15 	stw	zero,40(sp)
 100c130:	d9800317 	ldw	r6,12(sp)
 100c134:	00800244 	movi	r2,9
 100c138:	11811436 	bltu	r2,r6,100c58c <_dtoa_r+0x730>
 100c13c:	00800144 	movi	r2,5
 100c140:	1184e10e 	bge	r2,r6,100d4c8 <_dtoa_r+0x166c>
 100c144:	31bfff04 	addi	r6,r6,-4
 100c148:	d9800315 	stw	r6,12(sp)
 100c14c:	0023883a 	mov	r17,zero
 100c150:	d9800317 	ldw	r6,12(sp)
 100c154:	008000c4 	movi	r2,3
 100c158:	30836726 	beq	r6,r2,100cef8 <_dtoa_r+0x109c>
 100c15c:	1183410e 	bge	r2,r6,100ce64 <_dtoa_r+0x1008>
 100c160:	d9c00317 	ldw	r7,12(sp)
 100c164:	00800104 	movi	r2,4
 100c168:	38827c26 	beq	r7,r2,100cb5c <_dtoa_r+0xd00>
 100c16c:	00800144 	movi	r2,5
 100c170:	3884c41e 	bne	r7,r2,100d484 <_dtoa_r+0x1628>
 100c174:	00800044 	movi	r2,1
 100c178:	d8800b15 	stw	r2,44(sp)
 100c17c:	d8c00517 	ldw	r3,20(sp)
 100c180:	d9002217 	ldw	r4,136(sp)
 100c184:	1907883a 	add	r3,r3,r4
 100c188:	19800044 	addi	r6,r3,1
 100c18c:	d8c00c15 	stw	r3,48(sp)
 100c190:	d9800615 	stw	r6,24(sp)
 100c194:	0183a40e 	bge	zero,r6,100d028 <_dtoa_r+0x11cc>
 100c198:	d9800617 	ldw	r6,24(sp)
 100c19c:	3021883a 	mov	r16,r6
 100c1a0:	e0001115 	stw	zero,68(fp)
 100c1a4:	008005c4 	movi	r2,23
 100c1a8:	1184c92e 	bgeu	r2,r6,100d4d0 <_dtoa_r+0x1674>
 100c1ac:	00c00044 	movi	r3,1
 100c1b0:	00800104 	movi	r2,4
 100c1b4:	1085883a 	add	r2,r2,r2
 100c1b8:	11000504 	addi	r4,r2,20
 100c1bc:	180b883a 	mov	r5,r3
 100c1c0:	18c00044 	addi	r3,r3,1
 100c1c4:	313ffb2e 	bgeu	r6,r4,100c1b4 <__alt_data_end+0xff00c1b4>
 100c1c8:	e1401115 	stw	r5,68(fp)
 100c1cc:	e009883a 	mov	r4,fp
 100c1d0:	100e9f00 	call	100e9f0 <_Balloc>
 100c1d4:	d8800715 	stw	r2,28(sp)
 100c1d8:	e0801015 	stw	r2,64(fp)
 100c1dc:	00800384 	movi	r2,14
 100c1e0:	1400f736 	bltu	r2,r16,100c5c0 <_dtoa_r+0x764>
 100c1e4:	8800f626 	beq	r17,zero,100c5c0 <_dtoa_r+0x764>
 100c1e8:	d9c00517 	ldw	r7,20(sp)
 100c1ec:	01c39a0e 	bge	zero,r7,100d058 <_dtoa_r+0x11fc>
 100c1f0:	388003cc 	andi	r2,r7,15
 100c1f4:	100490fa 	slli	r2,r2,3
 100c1f8:	382bd13a 	srai	r21,r7,4
 100c1fc:	00c040b4 	movhi	r3,258
 100c200:	18ebce04 	addi	r3,r3,-20680
 100c204:	1885883a 	add	r2,r3,r2
 100c208:	a8c0040c 	andi	r3,r21,16
 100c20c:	12400017 	ldw	r9,0(r2)
 100c210:	12000117 	ldw	r8,4(r2)
 100c214:	18037926 	beq	r3,zero,100cffc <_dtoa_r+0x11a0>
 100c218:	008040b4 	movhi	r2,258
 100c21c:	10abc404 	addi	r2,r2,-20720
 100c220:	11800817 	ldw	r6,32(r2)
 100c224:	11c00917 	ldw	r7,36(r2)
 100c228:	9009883a 	mov	r4,r18
 100c22c:	980b883a 	mov	r5,r19
 100c230:	da001715 	stw	r8,92(sp)
 100c234:	da401615 	stw	r9,88(sp)
 100c238:	10156dc0 	call	10156dc <__divdf3>
 100c23c:	da001717 	ldw	r8,92(sp)
 100c240:	da401617 	ldw	r9,88(sp)
 100c244:	ad4003cc 	andi	r21,r21,15
 100c248:	040000c4 	movi	r16,3
 100c24c:	1023883a 	mov	r17,r2
 100c250:	1829883a 	mov	r20,r3
 100c254:	a8001126 	beq	r21,zero,100c29c <_dtoa_r+0x440>
 100c258:	05c040b4 	movhi	r23,258
 100c25c:	bdebc404 	addi	r23,r23,-20720
 100c260:	4805883a 	mov	r2,r9
 100c264:	4007883a 	mov	r3,r8
 100c268:	a980004c 	andi	r6,r21,1
 100c26c:	1009883a 	mov	r4,r2
 100c270:	a82bd07a 	srai	r21,r21,1
 100c274:	180b883a 	mov	r5,r3
 100c278:	30000426 	beq	r6,zero,100c28c <_dtoa_r+0x430>
 100c27c:	b9800017 	ldw	r6,0(r23)
 100c280:	b9c00117 	ldw	r7,4(r23)
 100c284:	84000044 	addi	r16,r16,1
 100c288:	101621c0 	call	101621c <__muldf3>
 100c28c:	bdc00204 	addi	r23,r23,8
 100c290:	a83ff51e 	bne	r21,zero,100c268 <__alt_data_end+0xff00c268>
 100c294:	1013883a 	mov	r9,r2
 100c298:	1811883a 	mov	r8,r3
 100c29c:	480d883a 	mov	r6,r9
 100c2a0:	400f883a 	mov	r7,r8
 100c2a4:	8809883a 	mov	r4,r17
 100c2a8:	a00b883a 	mov	r5,r20
 100c2ac:	10156dc0 	call	10156dc <__divdf3>
 100c2b0:	d8800f15 	stw	r2,60(sp)
 100c2b4:	d8c01015 	stw	r3,64(sp)
 100c2b8:	d8c00e17 	ldw	r3,56(sp)
 100c2bc:	18000626 	beq	r3,zero,100c2d8 <_dtoa_r+0x47c>
 100c2c0:	d9000f17 	ldw	r4,60(sp)
 100c2c4:	d9401017 	ldw	r5,64(sp)
 100c2c8:	000d883a 	mov	r6,zero
 100c2cc:	01cffc34 	movhi	r7,16368
 100c2d0:	10161280 	call	1016128 <__ledf2>
 100c2d4:	10040b16 	blt	r2,zero,100d304 <_dtoa_r+0x14a8>
 100c2d8:	8009883a 	mov	r4,r16
 100c2dc:	10172b00 	call	10172b0 <__floatsidf>
 100c2e0:	d9800f17 	ldw	r6,60(sp)
 100c2e4:	d9c01017 	ldw	r7,64(sp)
 100c2e8:	1009883a 	mov	r4,r2
 100c2ec:	180b883a 	mov	r5,r3
 100c2f0:	101621c0 	call	101621c <__muldf3>
 100c2f4:	000d883a 	mov	r6,zero
 100c2f8:	01d00734 	movhi	r7,16412
 100c2fc:	1009883a 	mov	r4,r2
 100c300:	180b883a 	mov	r5,r3
 100c304:	1014e300 	call	1014e30 <__adddf3>
 100c308:	1021883a 	mov	r16,r2
 100c30c:	d8800617 	ldw	r2,24(sp)
 100c310:	047f3034 	movhi	r17,64704
 100c314:	1c63883a 	add	r17,r3,r17
 100c318:	10031826 	beq	r2,zero,100cf7c <_dtoa_r+0x1120>
 100c31c:	d8c00517 	ldw	r3,20(sp)
 100c320:	db000617 	ldw	r12,24(sp)
 100c324:	d8c01315 	stw	r3,76(sp)
 100c328:	d9000b17 	ldw	r4,44(sp)
 100c32c:	20038f26 	beq	r4,zero,100d16c <_dtoa_r+0x1310>
 100c330:	60bfffc4 	addi	r2,r12,-1
 100c334:	100490fa 	slli	r2,r2,3
 100c338:	00c040b4 	movhi	r3,258
 100c33c:	18ebce04 	addi	r3,r3,-20680
 100c340:	1885883a 	add	r2,r3,r2
 100c344:	11800017 	ldw	r6,0(r2)
 100c348:	11c00117 	ldw	r7,4(r2)
 100c34c:	d8800717 	ldw	r2,28(sp)
 100c350:	0009883a 	mov	r4,zero
 100c354:	014ff834 	movhi	r5,16352
 100c358:	db001615 	stw	r12,88(sp)
 100c35c:	15c00044 	addi	r23,r2,1
 100c360:	10156dc0 	call	10156dc <__divdf3>
 100c364:	800d883a 	mov	r6,r16
 100c368:	880f883a 	mov	r7,r17
 100c36c:	1009883a 	mov	r4,r2
 100c370:	180b883a 	mov	r5,r3
 100c374:	10169340 	call	1016934 <__subdf3>
 100c378:	d9401017 	ldw	r5,64(sp)
 100c37c:	d9000f17 	ldw	r4,60(sp)
 100c380:	102b883a 	mov	r21,r2
 100c384:	d8c01215 	stw	r3,72(sp)
 100c388:	10172300 	call	1017230 <__fixdfsi>
 100c38c:	1009883a 	mov	r4,r2
 100c390:	1029883a 	mov	r20,r2
 100c394:	10172b00 	call	10172b0 <__floatsidf>
 100c398:	d9000f17 	ldw	r4,60(sp)
 100c39c:	d9401017 	ldw	r5,64(sp)
 100c3a0:	100d883a 	mov	r6,r2
 100c3a4:	180f883a 	mov	r7,r3
 100c3a8:	10169340 	call	1016934 <__subdf3>
 100c3ac:	1823883a 	mov	r17,r3
 100c3b0:	d8c00717 	ldw	r3,28(sp)
 100c3b4:	d9401217 	ldw	r5,72(sp)
 100c3b8:	a2000c04 	addi	r8,r20,48
 100c3bc:	1021883a 	mov	r16,r2
 100c3c0:	1a000005 	stb	r8,0(r3)
 100c3c4:	800d883a 	mov	r6,r16
 100c3c8:	880f883a 	mov	r7,r17
 100c3cc:	a809883a 	mov	r4,r21
 100c3d0:	4029883a 	mov	r20,r8
 100c3d4:	101604c0 	call	101604c <__gedf2>
 100c3d8:	00841d16 	blt	zero,r2,100d450 <_dtoa_r+0x15f4>
 100c3dc:	800d883a 	mov	r6,r16
 100c3e0:	880f883a 	mov	r7,r17
 100c3e4:	0009883a 	mov	r4,zero
 100c3e8:	014ffc34 	movhi	r5,16368
 100c3ec:	10169340 	call	1016934 <__subdf3>
 100c3f0:	d9401217 	ldw	r5,72(sp)
 100c3f4:	100d883a 	mov	r6,r2
 100c3f8:	180f883a 	mov	r7,r3
 100c3fc:	a809883a 	mov	r4,r21
 100c400:	101604c0 	call	101604c <__gedf2>
 100c404:	db001617 	ldw	r12,88(sp)
 100c408:	00840e16 	blt	zero,r2,100d444 <_dtoa_r+0x15e8>
 100c40c:	00800044 	movi	r2,1
 100c410:	13006b0e 	bge	r2,r12,100c5c0 <_dtoa_r+0x764>
 100c414:	d9000717 	ldw	r4,28(sp)
 100c418:	dd800f15 	stw	r22,60(sp)
 100c41c:	dcc01015 	stw	r19,64(sp)
 100c420:	2319883a 	add	r12,r4,r12
 100c424:	dcc01217 	ldw	r19,72(sp)
 100c428:	602d883a 	mov	r22,r12
 100c42c:	dc801215 	stw	r18,72(sp)
 100c430:	b825883a 	mov	r18,r23
 100c434:	00000906 	br	100c45c <_dtoa_r+0x600>
 100c438:	10169340 	call	1016934 <__subdf3>
 100c43c:	a80d883a 	mov	r6,r21
 100c440:	980f883a 	mov	r7,r19
 100c444:	1009883a 	mov	r4,r2
 100c448:	180b883a 	mov	r5,r3
 100c44c:	10161280 	call	1016128 <__ledf2>
 100c450:	1003e816 	blt	r2,zero,100d3f4 <_dtoa_r+0x1598>
 100c454:	b825883a 	mov	r18,r23
 100c458:	bd83e926 	beq	r23,r22,100d400 <_dtoa_r+0x15a4>
 100c45c:	a809883a 	mov	r4,r21
 100c460:	980b883a 	mov	r5,r19
 100c464:	000d883a 	mov	r6,zero
 100c468:	01d00934 	movhi	r7,16420
 100c46c:	101621c0 	call	101621c <__muldf3>
 100c470:	000d883a 	mov	r6,zero
 100c474:	01d00934 	movhi	r7,16420
 100c478:	8009883a 	mov	r4,r16
 100c47c:	880b883a 	mov	r5,r17
 100c480:	102b883a 	mov	r21,r2
 100c484:	1827883a 	mov	r19,r3
 100c488:	101621c0 	call	101621c <__muldf3>
 100c48c:	180b883a 	mov	r5,r3
 100c490:	1009883a 	mov	r4,r2
 100c494:	1821883a 	mov	r16,r3
 100c498:	1023883a 	mov	r17,r2
 100c49c:	10172300 	call	1017230 <__fixdfsi>
 100c4a0:	1009883a 	mov	r4,r2
 100c4a4:	1029883a 	mov	r20,r2
 100c4a8:	10172b00 	call	10172b0 <__floatsidf>
 100c4ac:	8809883a 	mov	r4,r17
 100c4b0:	800b883a 	mov	r5,r16
 100c4b4:	100d883a 	mov	r6,r2
 100c4b8:	180f883a 	mov	r7,r3
 100c4bc:	10169340 	call	1016934 <__subdf3>
 100c4c0:	a5000c04 	addi	r20,r20,48
 100c4c4:	a80d883a 	mov	r6,r21
 100c4c8:	980f883a 	mov	r7,r19
 100c4cc:	1009883a 	mov	r4,r2
 100c4d0:	180b883a 	mov	r5,r3
 100c4d4:	95000005 	stb	r20,0(r18)
 100c4d8:	1021883a 	mov	r16,r2
 100c4dc:	1823883a 	mov	r17,r3
 100c4e0:	10161280 	call	1016128 <__ledf2>
 100c4e4:	bdc00044 	addi	r23,r23,1
 100c4e8:	800d883a 	mov	r6,r16
 100c4ec:	880f883a 	mov	r7,r17
 100c4f0:	0009883a 	mov	r4,zero
 100c4f4:	014ffc34 	movhi	r5,16368
 100c4f8:	103fcf0e 	bge	r2,zero,100c438 <__alt_data_end+0xff00c438>
 100c4fc:	d8c01317 	ldw	r3,76(sp)
 100c500:	d8c00515 	stw	r3,20(sp)
 100c504:	d9400917 	ldw	r5,36(sp)
 100c508:	e009883a 	mov	r4,fp
 100c50c:	100ea980 	call	100ea98 <_Bfree>
 100c510:	d9000517 	ldw	r4,20(sp)
 100c514:	d9802317 	ldw	r6,140(sp)
 100c518:	d9c02517 	ldw	r7,148(sp)
 100c51c:	b8000005 	stb	zero,0(r23)
 100c520:	20800044 	addi	r2,r4,1
 100c524:	30800015 	stw	r2,0(r6)
 100c528:	3802aa26 	beq	r7,zero,100cfd4 <_dtoa_r+0x1178>
 100c52c:	3dc00015 	stw	r23,0(r7)
 100c530:	d8800717 	ldw	r2,28(sp)
 100c534:	003e7906 	br	100bf1c <__alt_data_end+0xff00bf1c>
 100c538:	00800434 	movhi	r2,16
 100c53c:	10bfffc4 	addi	r2,r2,-1
 100c540:	88a2703a 	and	r17,r17,r2
 100c544:	883e851e 	bne	r17,zero,100bf5c <__alt_data_end+0xff00bf5c>
 100c548:	008040b4 	movhi	r2,258
 100c54c:	10abb004 	addi	r2,r2,-20800
 100c550:	003e8406 	br	100bf64 <__alt_data_end+0xff00bf64>
 100c554:	10c00204 	addi	r3,r2,8
 100c558:	003e8706 	br	100bf78 <__alt_data_end+0xff00bf78>
 100c55c:	01400434 	movhi	r5,16
 100c560:	297fffc4 	addi	r5,r5,-1
 100c564:	994a703a 	and	r5,r19,r5
 100c568:	9009883a 	mov	r4,r18
 100c56c:	843f0044 	addi	r16,r16,-1023
 100c570:	294ffc34 	orhi	r5,r5,16368
 100c574:	dd800217 	ldw	r22,8(sp)
 100c578:	d8001115 	stw	zero,68(sp)
 100c57c:	003ea506 	br	100c014 <__alt_data_end+0xff00c014>
 100c580:	008040b4 	movhi	r2,258
 100c584:	10aba704 	addi	r2,r2,-20836
 100c588:	003e6406 	br	100bf1c <__alt_data_end+0xff00bf1c>
 100c58c:	e0001115 	stw	zero,68(fp)
 100c590:	000b883a 	mov	r5,zero
 100c594:	e009883a 	mov	r4,fp
 100c598:	100e9f00 	call	100e9f0 <_Balloc>
 100c59c:	01bfffc4 	movi	r6,-1
 100c5a0:	01c00044 	movi	r7,1
 100c5a4:	d8800715 	stw	r2,28(sp)
 100c5a8:	d9800c15 	stw	r6,48(sp)
 100c5ac:	e0801015 	stw	r2,64(fp)
 100c5b0:	d8000315 	stw	zero,12(sp)
 100c5b4:	d9c00b15 	stw	r7,44(sp)
 100c5b8:	d9800615 	stw	r6,24(sp)
 100c5bc:	d8002215 	stw	zero,136(sp)
 100c5c0:	d8800117 	ldw	r2,4(sp)
 100c5c4:	10008916 	blt	r2,zero,100c7ec <_dtoa_r+0x990>
 100c5c8:	d9000517 	ldw	r4,20(sp)
 100c5cc:	00c00384 	movi	r3,14
 100c5d0:	19008616 	blt	r3,r4,100c7ec <_dtoa_r+0x990>
 100c5d4:	200490fa 	slli	r2,r4,3
 100c5d8:	00c040b4 	movhi	r3,258
 100c5dc:	d9802217 	ldw	r6,136(sp)
 100c5e0:	18ebce04 	addi	r3,r3,-20680
 100c5e4:	1885883a 	add	r2,r3,r2
 100c5e8:	14000017 	ldw	r16,0(r2)
 100c5ec:	14400117 	ldw	r17,4(r2)
 100c5f0:	30016316 	blt	r6,zero,100cb80 <_dtoa_r+0xd24>
 100c5f4:	800d883a 	mov	r6,r16
 100c5f8:	880f883a 	mov	r7,r17
 100c5fc:	9009883a 	mov	r4,r18
 100c600:	980b883a 	mov	r5,r19
 100c604:	10156dc0 	call	10156dc <__divdf3>
 100c608:	180b883a 	mov	r5,r3
 100c60c:	1009883a 	mov	r4,r2
 100c610:	10172300 	call	1017230 <__fixdfsi>
 100c614:	1009883a 	mov	r4,r2
 100c618:	102b883a 	mov	r21,r2
 100c61c:	10172b00 	call	10172b0 <__floatsidf>
 100c620:	800d883a 	mov	r6,r16
 100c624:	880f883a 	mov	r7,r17
 100c628:	1009883a 	mov	r4,r2
 100c62c:	180b883a 	mov	r5,r3
 100c630:	101621c0 	call	101621c <__muldf3>
 100c634:	100d883a 	mov	r6,r2
 100c638:	180f883a 	mov	r7,r3
 100c63c:	9009883a 	mov	r4,r18
 100c640:	980b883a 	mov	r5,r19
 100c644:	10169340 	call	1016934 <__subdf3>
 100c648:	d9c00717 	ldw	r7,28(sp)
 100c64c:	1009883a 	mov	r4,r2
 100c650:	a8800c04 	addi	r2,r21,48
 100c654:	38800005 	stb	r2,0(r7)
 100c658:	3dc00044 	addi	r23,r7,1
 100c65c:	d9c00617 	ldw	r7,24(sp)
 100c660:	01800044 	movi	r6,1
 100c664:	180b883a 	mov	r5,r3
 100c668:	2005883a 	mov	r2,r4
 100c66c:	39803826 	beq	r7,r6,100c750 <_dtoa_r+0x8f4>
 100c670:	000d883a 	mov	r6,zero
 100c674:	01d00934 	movhi	r7,16420
 100c678:	101621c0 	call	101621c <__muldf3>
 100c67c:	000d883a 	mov	r6,zero
 100c680:	000f883a 	mov	r7,zero
 100c684:	1009883a 	mov	r4,r2
 100c688:	180b883a 	mov	r5,r3
 100c68c:	1025883a 	mov	r18,r2
 100c690:	1827883a 	mov	r19,r3
 100c694:	1015fc40 	call	1015fc4 <__eqdf2>
 100c698:	103f9a26 	beq	r2,zero,100c504 <__alt_data_end+0xff00c504>
 100c69c:	d9c00617 	ldw	r7,24(sp)
 100c6a0:	d8c00717 	ldw	r3,28(sp)
 100c6a4:	b829883a 	mov	r20,r23
 100c6a8:	38bfffc4 	addi	r2,r7,-1
 100c6ac:	18ad883a 	add	r22,r3,r2
 100c6b0:	00000a06 	br	100c6dc <_dtoa_r+0x880>
 100c6b4:	101621c0 	call	101621c <__muldf3>
 100c6b8:	000d883a 	mov	r6,zero
 100c6bc:	000f883a 	mov	r7,zero
 100c6c0:	1009883a 	mov	r4,r2
 100c6c4:	180b883a 	mov	r5,r3
 100c6c8:	1025883a 	mov	r18,r2
 100c6cc:	1827883a 	mov	r19,r3
 100c6d0:	b829883a 	mov	r20,r23
 100c6d4:	1015fc40 	call	1015fc4 <__eqdf2>
 100c6d8:	103f8a26 	beq	r2,zero,100c504 <__alt_data_end+0xff00c504>
 100c6dc:	800d883a 	mov	r6,r16
 100c6e0:	880f883a 	mov	r7,r17
 100c6e4:	9009883a 	mov	r4,r18
 100c6e8:	980b883a 	mov	r5,r19
 100c6ec:	10156dc0 	call	10156dc <__divdf3>
 100c6f0:	180b883a 	mov	r5,r3
 100c6f4:	1009883a 	mov	r4,r2
 100c6f8:	10172300 	call	1017230 <__fixdfsi>
 100c6fc:	1009883a 	mov	r4,r2
 100c700:	102b883a 	mov	r21,r2
 100c704:	10172b00 	call	10172b0 <__floatsidf>
 100c708:	800d883a 	mov	r6,r16
 100c70c:	880f883a 	mov	r7,r17
 100c710:	1009883a 	mov	r4,r2
 100c714:	180b883a 	mov	r5,r3
 100c718:	101621c0 	call	101621c <__muldf3>
 100c71c:	100d883a 	mov	r6,r2
 100c720:	180f883a 	mov	r7,r3
 100c724:	9009883a 	mov	r4,r18
 100c728:	980b883a 	mov	r5,r19
 100c72c:	10169340 	call	1016934 <__subdf3>
 100c730:	aa000c04 	addi	r8,r21,48
 100c734:	a2000005 	stb	r8,0(r20)
 100c738:	000d883a 	mov	r6,zero
 100c73c:	01d00934 	movhi	r7,16420
 100c740:	1009883a 	mov	r4,r2
 100c744:	180b883a 	mov	r5,r3
 100c748:	a5c00044 	addi	r23,r20,1
 100c74c:	b53fd91e 	bne	r22,r20,100c6b4 <__alt_data_end+0xff00c6b4>
 100c750:	100d883a 	mov	r6,r2
 100c754:	180f883a 	mov	r7,r3
 100c758:	1009883a 	mov	r4,r2
 100c75c:	180b883a 	mov	r5,r3
 100c760:	1014e300 	call	1014e30 <__adddf3>
 100c764:	100d883a 	mov	r6,r2
 100c768:	180f883a 	mov	r7,r3
 100c76c:	8009883a 	mov	r4,r16
 100c770:	880b883a 	mov	r5,r17
 100c774:	1027883a 	mov	r19,r2
 100c778:	1825883a 	mov	r18,r3
 100c77c:	10161280 	call	1016128 <__ledf2>
 100c780:	10000816 	blt	r2,zero,100c7a4 <_dtoa_r+0x948>
 100c784:	980d883a 	mov	r6,r19
 100c788:	900f883a 	mov	r7,r18
 100c78c:	8009883a 	mov	r4,r16
 100c790:	880b883a 	mov	r5,r17
 100c794:	1015fc40 	call	1015fc4 <__eqdf2>
 100c798:	103f5a1e 	bne	r2,zero,100c504 <__alt_data_end+0xff00c504>
 100c79c:	ad40004c 	andi	r21,r21,1
 100c7a0:	a83f5826 	beq	r21,zero,100c504 <__alt_data_end+0xff00c504>
 100c7a4:	bd3fffc3 	ldbu	r20,-1(r23)
 100c7a8:	b8bfffc4 	addi	r2,r23,-1
 100c7ac:	1007883a 	mov	r3,r2
 100c7b0:	01400e44 	movi	r5,57
 100c7b4:	d9800717 	ldw	r6,28(sp)
 100c7b8:	00000506 	br	100c7d0 <_dtoa_r+0x974>
 100c7bc:	18ffffc4 	addi	r3,r3,-1
 100c7c0:	11824726 	beq	r2,r6,100d0e0 <_dtoa_r+0x1284>
 100c7c4:	1d000003 	ldbu	r20,0(r3)
 100c7c8:	102f883a 	mov	r23,r2
 100c7cc:	10bfffc4 	addi	r2,r2,-1
 100c7d0:	a1003fcc 	andi	r4,r20,255
 100c7d4:	2100201c 	xori	r4,r4,128
 100c7d8:	213fe004 	addi	r4,r4,-128
 100c7dc:	217ff726 	beq	r4,r5,100c7bc <__alt_data_end+0xff00c7bc>
 100c7e0:	a2000044 	addi	r8,r20,1
 100c7e4:	12000005 	stb	r8,0(r2)
 100c7e8:	003f4606 	br	100c504 <__alt_data_end+0xff00c504>
 100c7ec:	d9000b17 	ldw	r4,44(sp)
 100c7f0:	2000c826 	beq	r4,zero,100cb14 <_dtoa_r+0xcb8>
 100c7f4:	d9800317 	ldw	r6,12(sp)
 100c7f8:	00c00044 	movi	r3,1
 100c7fc:	1980f90e 	bge	r3,r6,100cbe4 <_dtoa_r+0xd88>
 100c800:	d8800617 	ldw	r2,24(sp)
 100c804:	d8c00a17 	ldw	r3,40(sp)
 100c808:	157fffc4 	addi	r21,r2,-1
 100c80c:	1d41f316 	blt	r3,r21,100cfdc <_dtoa_r+0x1180>
 100c810:	1d6bc83a 	sub	r21,r3,r21
 100c814:	d9c00617 	ldw	r7,24(sp)
 100c818:	3802aa16 	blt	r7,zero,100d2c4 <_dtoa_r+0x1468>
 100c81c:	dd000817 	ldw	r20,32(sp)
 100c820:	d8800617 	ldw	r2,24(sp)
 100c824:	d8c00817 	ldw	r3,32(sp)
 100c828:	01400044 	movi	r5,1
 100c82c:	e009883a 	mov	r4,fp
 100c830:	1887883a 	add	r3,r3,r2
 100c834:	d8c00815 	stw	r3,32(sp)
 100c838:	b0ad883a 	add	r22,r22,r2
 100c83c:	100edfc0 	call	100edfc <__i2b>
 100c840:	1023883a 	mov	r17,r2
 100c844:	a0000826 	beq	r20,zero,100c868 <_dtoa_r+0xa0c>
 100c848:	0580070e 	bge	zero,r22,100c868 <_dtoa_r+0xa0c>
 100c84c:	a005883a 	mov	r2,r20
 100c850:	b500b916 	blt	r22,r20,100cb38 <_dtoa_r+0xcdc>
 100c854:	d9000817 	ldw	r4,32(sp)
 100c858:	a0a9c83a 	sub	r20,r20,r2
 100c85c:	b0adc83a 	sub	r22,r22,r2
 100c860:	2089c83a 	sub	r4,r4,r2
 100c864:	d9000815 	stw	r4,32(sp)
 100c868:	d9800a17 	ldw	r6,40(sp)
 100c86c:	0181810e 	bge	zero,r6,100ce74 <_dtoa_r+0x1018>
 100c870:	d9c00b17 	ldw	r7,44(sp)
 100c874:	3800b326 	beq	r7,zero,100cb44 <_dtoa_r+0xce8>
 100c878:	a800b226 	beq	r21,zero,100cb44 <_dtoa_r+0xce8>
 100c87c:	880b883a 	mov	r5,r17
 100c880:	a80d883a 	mov	r6,r21
 100c884:	e009883a 	mov	r4,fp
 100c888:	100f0300 	call	100f030 <__pow5mult>
 100c88c:	d9800917 	ldw	r6,36(sp)
 100c890:	100b883a 	mov	r5,r2
 100c894:	e009883a 	mov	r4,fp
 100c898:	1023883a 	mov	r17,r2
 100c89c:	100ee380 	call	100ee38 <__multiply>
 100c8a0:	1021883a 	mov	r16,r2
 100c8a4:	d8800a17 	ldw	r2,40(sp)
 100c8a8:	d9400917 	ldw	r5,36(sp)
 100c8ac:	e009883a 	mov	r4,fp
 100c8b0:	1545c83a 	sub	r2,r2,r21
 100c8b4:	d8800a15 	stw	r2,40(sp)
 100c8b8:	100ea980 	call	100ea98 <_Bfree>
 100c8bc:	d8c00a17 	ldw	r3,40(sp)
 100c8c0:	18009f1e 	bne	r3,zero,100cb40 <_dtoa_r+0xce4>
 100c8c4:	05c00044 	movi	r23,1
 100c8c8:	e009883a 	mov	r4,fp
 100c8cc:	b80b883a 	mov	r5,r23
 100c8d0:	100edfc0 	call	100edfc <__i2b>
 100c8d4:	d9000d17 	ldw	r4,52(sp)
 100c8d8:	102b883a 	mov	r21,r2
 100c8dc:	2000ce26 	beq	r4,zero,100cc18 <_dtoa_r+0xdbc>
 100c8e0:	200d883a 	mov	r6,r4
 100c8e4:	100b883a 	mov	r5,r2
 100c8e8:	e009883a 	mov	r4,fp
 100c8ec:	100f0300 	call	100f030 <__pow5mult>
 100c8f0:	d9800317 	ldw	r6,12(sp)
 100c8f4:	102b883a 	mov	r21,r2
 100c8f8:	b981810e 	bge	r23,r6,100cf00 <_dtoa_r+0x10a4>
 100c8fc:	0027883a 	mov	r19,zero
 100c900:	a8800417 	ldw	r2,16(r21)
 100c904:	05c00804 	movi	r23,32
 100c908:	10800104 	addi	r2,r2,4
 100c90c:	1085883a 	add	r2,r2,r2
 100c910:	1085883a 	add	r2,r2,r2
 100c914:	a885883a 	add	r2,r21,r2
 100c918:	11000017 	ldw	r4,0(r2)
 100c91c:	100ece40 	call	100ece4 <__hi0bits>
 100c920:	b885c83a 	sub	r2,r23,r2
 100c924:	1585883a 	add	r2,r2,r22
 100c928:	108007cc 	andi	r2,r2,31
 100c92c:	1000b326 	beq	r2,zero,100cbfc <_dtoa_r+0xda0>
 100c930:	00c00804 	movi	r3,32
 100c934:	1887c83a 	sub	r3,r3,r2
 100c938:	01000104 	movi	r4,4
 100c93c:	20c2cd0e 	bge	r4,r3,100d474 <_dtoa_r+0x1618>
 100c940:	00c00704 	movi	r3,28
 100c944:	1885c83a 	sub	r2,r3,r2
 100c948:	d8c00817 	ldw	r3,32(sp)
 100c94c:	a0a9883a 	add	r20,r20,r2
 100c950:	b0ad883a 	add	r22,r22,r2
 100c954:	1887883a 	add	r3,r3,r2
 100c958:	d8c00815 	stw	r3,32(sp)
 100c95c:	d9800817 	ldw	r6,32(sp)
 100c960:	0180040e 	bge	zero,r6,100c974 <_dtoa_r+0xb18>
 100c964:	800b883a 	mov	r5,r16
 100c968:	e009883a 	mov	r4,fp
 100c96c:	100f1700 	call	100f170 <__lshift>
 100c970:	1021883a 	mov	r16,r2
 100c974:	0580050e 	bge	zero,r22,100c98c <_dtoa_r+0xb30>
 100c978:	a80b883a 	mov	r5,r21
 100c97c:	b00d883a 	mov	r6,r22
 100c980:	e009883a 	mov	r4,fp
 100c984:	100f1700 	call	100f170 <__lshift>
 100c988:	102b883a 	mov	r21,r2
 100c98c:	d9c00e17 	ldw	r7,56(sp)
 100c990:	3801211e 	bne	r7,zero,100ce18 <_dtoa_r+0xfbc>
 100c994:	d9800617 	ldw	r6,24(sp)
 100c998:	0181380e 	bge	zero,r6,100ce7c <_dtoa_r+0x1020>
 100c99c:	d8c00b17 	ldw	r3,44(sp)
 100c9a0:	1800ab1e 	bne	r3,zero,100cc50 <_dtoa_r+0xdf4>
 100c9a4:	dc800717 	ldw	r18,28(sp)
 100c9a8:	dcc00617 	ldw	r19,24(sp)
 100c9ac:	9029883a 	mov	r20,r18
 100c9b0:	00000206 	br	100c9bc <_dtoa_r+0xb60>
 100c9b4:	100eac00 	call	100eac0 <__multadd>
 100c9b8:	1021883a 	mov	r16,r2
 100c9bc:	a80b883a 	mov	r5,r21
 100c9c0:	8009883a 	mov	r4,r16
 100c9c4:	100bc5c0 	call	100bc5c <quorem>
 100c9c8:	10800c04 	addi	r2,r2,48
 100c9cc:	90800005 	stb	r2,0(r18)
 100c9d0:	94800044 	addi	r18,r18,1
 100c9d4:	9507c83a 	sub	r3,r18,r20
 100c9d8:	000f883a 	mov	r7,zero
 100c9dc:	01800284 	movi	r6,10
 100c9e0:	800b883a 	mov	r5,r16
 100c9e4:	e009883a 	mov	r4,fp
 100c9e8:	1cfff216 	blt	r3,r19,100c9b4 <__alt_data_end+0xff00c9b4>
 100c9ec:	1011883a 	mov	r8,r2
 100c9f0:	d8800617 	ldw	r2,24(sp)
 100c9f4:	0082370e 	bge	zero,r2,100d2d4 <_dtoa_r+0x1478>
 100c9f8:	d9000717 	ldw	r4,28(sp)
 100c9fc:	0025883a 	mov	r18,zero
 100ca00:	20af883a 	add	r23,r4,r2
 100ca04:	01800044 	movi	r6,1
 100ca08:	800b883a 	mov	r5,r16
 100ca0c:	e009883a 	mov	r4,fp
 100ca10:	da001715 	stw	r8,92(sp)
 100ca14:	100f1700 	call	100f170 <__lshift>
 100ca18:	a80b883a 	mov	r5,r21
 100ca1c:	1009883a 	mov	r4,r2
 100ca20:	d8800915 	stw	r2,36(sp)
 100ca24:	100f2b80 	call	100f2b8 <__mcmp>
 100ca28:	da001717 	ldw	r8,92(sp)
 100ca2c:	0081800e 	bge	zero,r2,100d030 <_dtoa_r+0x11d4>
 100ca30:	b93fffc3 	ldbu	r4,-1(r23)
 100ca34:	b8bfffc4 	addi	r2,r23,-1
 100ca38:	1007883a 	mov	r3,r2
 100ca3c:	01800e44 	movi	r6,57
 100ca40:	d9c00717 	ldw	r7,28(sp)
 100ca44:	00000506 	br	100ca5c <_dtoa_r+0xc00>
 100ca48:	18ffffc4 	addi	r3,r3,-1
 100ca4c:	11c12326 	beq	r2,r7,100cedc <_dtoa_r+0x1080>
 100ca50:	19000003 	ldbu	r4,0(r3)
 100ca54:	102f883a 	mov	r23,r2
 100ca58:	10bfffc4 	addi	r2,r2,-1
 100ca5c:	21403fcc 	andi	r5,r4,255
 100ca60:	2940201c 	xori	r5,r5,128
 100ca64:	297fe004 	addi	r5,r5,-128
 100ca68:	29bff726 	beq	r5,r6,100ca48 <__alt_data_end+0xff00ca48>
 100ca6c:	21000044 	addi	r4,r4,1
 100ca70:	11000005 	stb	r4,0(r2)
 100ca74:	a80b883a 	mov	r5,r21
 100ca78:	e009883a 	mov	r4,fp
 100ca7c:	100ea980 	call	100ea98 <_Bfree>
 100ca80:	883ea026 	beq	r17,zero,100c504 <__alt_data_end+0xff00c504>
 100ca84:	90000426 	beq	r18,zero,100ca98 <_dtoa_r+0xc3c>
 100ca88:	94400326 	beq	r18,r17,100ca98 <_dtoa_r+0xc3c>
 100ca8c:	900b883a 	mov	r5,r18
 100ca90:	e009883a 	mov	r4,fp
 100ca94:	100ea980 	call	100ea98 <_Bfree>
 100ca98:	880b883a 	mov	r5,r17
 100ca9c:	e009883a 	mov	r4,fp
 100caa0:	100ea980 	call	100ea98 <_Bfree>
 100caa4:	003e9706 	br	100c504 <__alt_data_end+0xff00c504>
 100caa8:	01800044 	movi	r6,1
 100caac:	d9800e15 	stw	r6,56(sp)
 100cab0:	003d9606 	br	100c10c <__alt_data_end+0xff00c10c>
 100cab4:	d8800817 	ldw	r2,32(sp)
 100cab8:	d8c00517 	ldw	r3,20(sp)
 100cabc:	d8000d15 	stw	zero,52(sp)
 100cac0:	10c5c83a 	sub	r2,r2,r3
 100cac4:	00c9c83a 	sub	r4,zero,r3
 100cac8:	d8800815 	stw	r2,32(sp)
 100cacc:	d9000a15 	stw	r4,40(sp)
 100cad0:	003d9706 	br	100c130 <__alt_data_end+0xff00c130>
 100cad4:	05adc83a 	sub	r22,zero,r22
 100cad8:	dd800815 	stw	r22,32(sp)
 100cadc:	002d883a 	mov	r22,zero
 100cae0:	003d8e06 	br	100c11c <__alt_data_end+0xff00c11c>
 100cae4:	d9000517 	ldw	r4,20(sp)
 100cae8:	10172b00 	call	10172b0 <__floatsidf>
 100caec:	100d883a 	mov	r6,r2
 100caf0:	180f883a 	mov	r7,r3
 100caf4:	a009883a 	mov	r4,r20
 100caf8:	880b883a 	mov	r5,r17
 100cafc:	1015fc40 	call	1015fc4 <__eqdf2>
 100cb00:	103d7126 	beq	r2,zero,100c0c8 <__alt_data_end+0xff00c0c8>
 100cb04:	d9c00517 	ldw	r7,20(sp)
 100cb08:	39ffffc4 	addi	r7,r7,-1
 100cb0c:	d9c00515 	stw	r7,20(sp)
 100cb10:	003d6d06 	br	100c0c8 <__alt_data_end+0xff00c0c8>
 100cb14:	dd400a17 	ldw	r21,40(sp)
 100cb18:	dd000817 	ldw	r20,32(sp)
 100cb1c:	0023883a 	mov	r17,zero
 100cb20:	003f4806 	br	100c844 <__alt_data_end+0xff00c844>
 100cb24:	10e3c83a 	sub	r17,r2,r3
 100cb28:	9448983a 	sll	r4,r18,r17
 100cb2c:	003d3206 	br	100bff8 <__alt_data_end+0xff00bff8>
 100cb30:	d8000e15 	stw	zero,56(sp)
 100cb34:	003d7506 	br	100c10c <__alt_data_end+0xff00c10c>
 100cb38:	b005883a 	mov	r2,r22
 100cb3c:	003f4506 	br	100c854 <__alt_data_end+0xff00c854>
 100cb40:	dc000915 	stw	r16,36(sp)
 100cb44:	d9800a17 	ldw	r6,40(sp)
 100cb48:	d9400917 	ldw	r5,36(sp)
 100cb4c:	e009883a 	mov	r4,fp
 100cb50:	100f0300 	call	100f030 <__pow5mult>
 100cb54:	1021883a 	mov	r16,r2
 100cb58:	003f5a06 	br	100c8c4 <__alt_data_end+0xff00c8c4>
 100cb5c:	01c00044 	movi	r7,1
 100cb60:	d9c00b15 	stw	r7,44(sp)
 100cb64:	d8802217 	ldw	r2,136(sp)
 100cb68:	0081280e 	bge	zero,r2,100d00c <_dtoa_r+0x11b0>
 100cb6c:	100d883a 	mov	r6,r2
 100cb70:	1021883a 	mov	r16,r2
 100cb74:	d8800c15 	stw	r2,48(sp)
 100cb78:	d8800615 	stw	r2,24(sp)
 100cb7c:	003d8806 	br	100c1a0 <__alt_data_end+0xff00c1a0>
 100cb80:	d8800617 	ldw	r2,24(sp)
 100cb84:	00be9b16 	blt	zero,r2,100c5f4 <__alt_data_end+0xff00c5f4>
 100cb88:	10010f1e 	bne	r2,zero,100cfc8 <_dtoa_r+0x116c>
 100cb8c:	880b883a 	mov	r5,r17
 100cb90:	000d883a 	mov	r6,zero
 100cb94:	01d00534 	movhi	r7,16404
 100cb98:	8009883a 	mov	r4,r16
 100cb9c:	101621c0 	call	101621c <__muldf3>
 100cba0:	900d883a 	mov	r6,r18
 100cba4:	980f883a 	mov	r7,r19
 100cba8:	1009883a 	mov	r4,r2
 100cbac:	180b883a 	mov	r5,r3
 100cbb0:	101604c0 	call	101604c <__gedf2>
 100cbb4:	002b883a 	mov	r21,zero
 100cbb8:	0023883a 	mov	r17,zero
 100cbbc:	1000bf16 	blt	r2,zero,100cebc <_dtoa_r+0x1060>
 100cbc0:	d9802217 	ldw	r6,136(sp)
 100cbc4:	ddc00717 	ldw	r23,28(sp)
 100cbc8:	018c303a 	nor	r6,zero,r6
 100cbcc:	d9800515 	stw	r6,20(sp)
 100cbd0:	a80b883a 	mov	r5,r21
 100cbd4:	e009883a 	mov	r4,fp
 100cbd8:	100ea980 	call	100ea98 <_Bfree>
 100cbdc:	883e4926 	beq	r17,zero,100c504 <__alt_data_end+0xff00c504>
 100cbe0:	003fad06 	br	100ca98 <__alt_data_end+0xff00ca98>
 100cbe4:	d9c01117 	ldw	r7,68(sp)
 100cbe8:	3801bc26 	beq	r7,zero,100d2dc <_dtoa_r+0x1480>
 100cbec:	10810cc4 	addi	r2,r2,1075
 100cbf0:	dd400a17 	ldw	r21,40(sp)
 100cbf4:	dd000817 	ldw	r20,32(sp)
 100cbf8:	003f0a06 	br	100c824 <__alt_data_end+0xff00c824>
 100cbfc:	00800704 	movi	r2,28
 100cc00:	d9000817 	ldw	r4,32(sp)
 100cc04:	a0a9883a 	add	r20,r20,r2
 100cc08:	b0ad883a 	add	r22,r22,r2
 100cc0c:	2089883a 	add	r4,r4,r2
 100cc10:	d9000815 	stw	r4,32(sp)
 100cc14:	003f5106 	br	100c95c <__alt_data_end+0xff00c95c>
 100cc18:	d8c00317 	ldw	r3,12(sp)
 100cc1c:	b8c1fc0e 	bge	r23,r3,100d410 <_dtoa_r+0x15b4>
 100cc20:	0027883a 	mov	r19,zero
 100cc24:	b805883a 	mov	r2,r23
 100cc28:	003f3e06 	br	100c924 <__alt_data_end+0xff00c924>
 100cc2c:	880b883a 	mov	r5,r17
 100cc30:	e009883a 	mov	r4,fp
 100cc34:	000f883a 	mov	r7,zero
 100cc38:	01800284 	movi	r6,10
 100cc3c:	100eac00 	call	100eac0 <__multadd>
 100cc40:	d9000c17 	ldw	r4,48(sp)
 100cc44:	1023883a 	mov	r17,r2
 100cc48:	0102040e 	bge	zero,r4,100d45c <_dtoa_r+0x1600>
 100cc4c:	d9000615 	stw	r4,24(sp)
 100cc50:	0500050e 	bge	zero,r20,100cc68 <_dtoa_r+0xe0c>
 100cc54:	880b883a 	mov	r5,r17
 100cc58:	a00d883a 	mov	r6,r20
 100cc5c:	e009883a 	mov	r4,fp
 100cc60:	100f1700 	call	100f170 <__lshift>
 100cc64:	1023883a 	mov	r17,r2
 100cc68:	9801241e 	bne	r19,zero,100d0fc <_dtoa_r+0x12a0>
 100cc6c:	8829883a 	mov	r20,r17
 100cc70:	d9000617 	ldw	r4,24(sp)
 100cc74:	dcc00717 	ldw	r19,28(sp)
 100cc78:	9480004c 	andi	r18,r18,1
 100cc7c:	20bfffc4 	addi	r2,r4,-1
 100cc80:	9885883a 	add	r2,r19,r2
 100cc84:	d8800415 	stw	r2,16(sp)
 100cc88:	dc800615 	stw	r18,24(sp)
 100cc8c:	a80b883a 	mov	r5,r21
 100cc90:	8009883a 	mov	r4,r16
 100cc94:	100bc5c0 	call	100bc5c <quorem>
 100cc98:	880b883a 	mov	r5,r17
 100cc9c:	8009883a 	mov	r4,r16
 100cca0:	102f883a 	mov	r23,r2
 100cca4:	100f2b80 	call	100f2b8 <__mcmp>
 100cca8:	a80b883a 	mov	r5,r21
 100ccac:	a00d883a 	mov	r6,r20
 100ccb0:	e009883a 	mov	r4,fp
 100ccb4:	102d883a 	mov	r22,r2
 100ccb8:	100f3180 	call	100f318 <__mdiff>
 100ccbc:	1007883a 	mov	r3,r2
 100ccc0:	10800317 	ldw	r2,12(r2)
 100ccc4:	bc800c04 	addi	r18,r23,48
 100ccc8:	180b883a 	mov	r5,r3
 100cccc:	10004e1e 	bne	r2,zero,100ce08 <_dtoa_r+0xfac>
 100ccd0:	8009883a 	mov	r4,r16
 100ccd4:	d8c01615 	stw	r3,88(sp)
 100ccd8:	100f2b80 	call	100f2b8 <__mcmp>
 100ccdc:	d8c01617 	ldw	r3,88(sp)
 100cce0:	e009883a 	mov	r4,fp
 100cce4:	d8801615 	stw	r2,88(sp)
 100cce8:	180b883a 	mov	r5,r3
 100ccec:	100ea980 	call	100ea98 <_Bfree>
 100ccf0:	d8801617 	ldw	r2,88(sp)
 100ccf4:	1000041e 	bne	r2,zero,100cd08 <_dtoa_r+0xeac>
 100ccf8:	d9800317 	ldw	r6,12(sp)
 100ccfc:	3000021e 	bne	r6,zero,100cd08 <_dtoa_r+0xeac>
 100cd00:	d8c00617 	ldw	r3,24(sp)
 100cd04:	18003726 	beq	r3,zero,100cde4 <_dtoa_r+0xf88>
 100cd08:	b0002016 	blt	r22,zero,100cd8c <_dtoa_r+0xf30>
 100cd0c:	b000041e 	bne	r22,zero,100cd20 <_dtoa_r+0xec4>
 100cd10:	d9000317 	ldw	r4,12(sp)
 100cd14:	2000021e 	bne	r4,zero,100cd20 <_dtoa_r+0xec4>
 100cd18:	d8c00617 	ldw	r3,24(sp)
 100cd1c:	18001b26 	beq	r3,zero,100cd8c <_dtoa_r+0xf30>
 100cd20:	00810716 	blt	zero,r2,100d140 <_dtoa_r+0x12e4>
 100cd24:	d8c00417 	ldw	r3,16(sp)
 100cd28:	9d800044 	addi	r22,r19,1
 100cd2c:	9c800005 	stb	r18,0(r19)
 100cd30:	b02f883a 	mov	r23,r22
 100cd34:	98c10626 	beq	r19,r3,100d150 <_dtoa_r+0x12f4>
 100cd38:	800b883a 	mov	r5,r16
 100cd3c:	000f883a 	mov	r7,zero
 100cd40:	01800284 	movi	r6,10
 100cd44:	e009883a 	mov	r4,fp
 100cd48:	100eac00 	call	100eac0 <__multadd>
 100cd4c:	1021883a 	mov	r16,r2
 100cd50:	000f883a 	mov	r7,zero
 100cd54:	01800284 	movi	r6,10
 100cd58:	880b883a 	mov	r5,r17
 100cd5c:	e009883a 	mov	r4,fp
 100cd60:	8d002526 	beq	r17,r20,100cdf8 <_dtoa_r+0xf9c>
 100cd64:	100eac00 	call	100eac0 <__multadd>
 100cd68:	a00b883a 	mov	r5,r20
 100cd6c:	000f883a 	mov	r7,zero
 100cd70:	01800284 	movi	r6,10
 100cd74:	e009883a 	mov	r4,fp
 100cd78:	1023883a 	mov	r17,r2
 100cd7c:	100eac00 	call	100eac0 <__multadd>
 100cd80:	1029883a 	mov	r20,r2
 100cd84:	b027883a 	mov	r19,r22
 100cd88:	003fc006 	br	100cc8c <__alt_data_end+0xff00cc8c>
 100cd8c:	9011883a 	mov	r8,r18
 100cd90:	00800e0e 	bge	zero,r2,100cdcc <_dtoa_r+0xf70>
 100cd94:	800b883a 	mov	r5,r16
 100cd98:	01800044 	movi	r6,1
 100cd9c:	e009883a 	mov	r4,fp
 100cda0:	da001715 	stw	r8,92(sp)
 100cda4:	100f1700 	call	100f170 <__lshift>
 100cda8:	a80b883a 	mov	r5,r21
 100cdac:	1009883a 	mov	r4,r2
 100cdb0:	1021883a 	mov	r16,r2
 100cdb4:	100f2b80 	call	100f2b8 <__mcmp>
 100cdb8:	da001717 	ldw	r8,92(sp)
 100cdbc:	0081960e 	bge	zero,r2,100d418 <_dtoa_r+0x15bc>
 100cdc0:	00800e44 	movi	r2,57
 100cdc4:	40817026 	beq	r8,r2,100d388 <_dtoa_r+0x152c>
 100cdc8:	ba000c44 	addi	r8,r23,49
 100cdcc:	8825883a 	mov	r18,r17
 100cdd0:	9dc00044 	addi	r23,r19,1
 100cdd4:	9a000005 	stb	r8,0(r19)
 100cdd8:	a023883a 	mov	r17,r20
 100cddc:	dc000915 	stw	r16,36(sp)
 100cde0:	003f2406 	br	100ca74 <__alt_data_end+0xff00ca74>
 100cde4:	00800e44 	movi	r2,57
 100cde8:	9011883a 	mov	r8,r18
 100cdec:	90816626 	beq	r18,r2,100d388 <_dtoa_r+0x152c>
 100cdf0:	05bff516 	blt	zero,r22,100cdc8 <__alt_data_end+0xff00cdc8>
 100cdf4:	003ff506 	br	100cdcc <__alt_data_end+0xff00cdcc>
 100cdf8:	100eac00 	call	100eac0 <__multadd>
 100cdfc:	1023883a 	mov	r17,r2
 100ce00:	1029883a 	mov	r20,r2
 100ce04:	003fdf06 	br	100cd84 <__alt_data_end+0xff00cd84>
 100ce08:	e009883a 	mov	r4,fp
 100ce0c:	100ea980 	call	100ea98 <_Bfree>
 100ce10:	00800044 	movi	r2,1
 100ce14:	003fbc06 	br	100cd08 <__alt_data_end+0xff00cd08>
 100ce18:	a80b883a 	mov	r5,r21
 100ce1c:	8009883a 	mov	r4,r16
 100ce20:	100f2b80 	call	100f2b8 <__mcmp>
 100ce24:	103edb0e 	bge	r2,zero,100c994 <__alt_data_end+0xff00c994>
 100ce28:	800b883a 	mov	r5,r16
 100ce2c:	000f883a 	mov	r7,zero
 100ce30:	01800284 	movi	r6,10
 100ce34:	e009883a 	mov	r4,fp
 100ce38:	100eac00 	call	100eac0 <__multadd>
 100ce3c:	1021883a 	mov	r16,r2
 100ce40:	d8800517 	ldw	r2,20(sp)
 100ce44:	d8c00b17 	ldw	r3,44(sp)
 100ce48:	10bfffc4 	addi	r2,r2,-1
 100ce4c:	d8800515 	stw	r2,20(sp)
 100ce50:	183f761e 	bne	r3,zero,100cc2c <__alt_data_end+0xff00cc2c>
 100ce54:	d9000c17 	ldw	r4,48(sp)
 100ce58:	0101730e 	bge	zero,r4,100d428 <_dtoa_r+0x15cc>
 100ce5c:	d9000615 	stw	r4,24(sp)
 100ce60:	003ed006 	br	100c9a4 <__alt_data_end+0xff00c9a4>
 100ce64:	00800084 	movi	r2,2
 100ce68:	3081861e 	bne	r6,r2,100d484 <_dtoa_r+0x1628>
 100ce6c:	d8000b15 	stw	zero,44(sp)
 100ce70:	003f3c06 	br	100cb64 <__alt_data_end+0xff00cb64>
 100ce74:	dc000917 	ldw	r16,36(sp)
 100ce78:	003e9206 	br	100c8c4 <__alt_data_end+0xff00c8c4>
 100ce7c:	d9c00317 	ldw	r7,12(sp)
 100ce80:	00800084 	movi	r2,2
 100ce84:	11fec50e 	bge	r2,r7,100c99c <__alt_data_end+0xff00c99c>
 100ce88:	d9000617 	ldw	r4,24(sp)
 100ce8c:	20013c1e 	bne	r4,zero,100d380 <_dtoa_r+0x1524>
 100ce90:	a80b883a 	mov	r5,r21
 100ce94:	000f883a 	mov	r7,zero
 100ce98:	01800144 	movi	r6,5
 100ce9c:	e009883a 	mov	r4,fp
 100cea0:	100eac00 	call	100eac0 <__multadd>
 100cea4:	100b883a 	mov	r5,r2
 100cea8:	8009883a 	mov	r4,r16
 100ceac:	102b883a 	mov	r21,r2
 100ceb0:	100f2b80 	call	100f2b8 <__mcmp>
 100ceb4:	dc000915 	stw	r16,36(sp)
 100ceb8:	00bf410e 	bge	zero,r2,100cbc0 <__alt_data_end+0xff00cbc0>
 100cebc:	d9c00717 	ldw	r7,28(sp)
 100cec0:	00800c44 	movi	r2,49
 100cec4:	38800005 	stb	r2,0(r7)
 100cec8:	d8800517 	ldw	r2,20(sp)
 100cecc:	3dc00044 	addi	r23,r7,1
 100ced0:	10800044 	addi	r2,r2,1
 100ced4:	d8800515 	stw	r2,20(sp)
 100ced8:	003f3d06 	br	100cbd0 <__alt_data_end+0xff00cbd0>
 100cedc:	d9800517 	ldw	r6,20(sp)
 100cee0:	d9c00717 	ldw	r7,28(sp)
 100cee4:	00800c44 	movi	r2,49
 100cee8:	31800044 	addi	r6,r6,1
 100ceec:	d9800515 	stw	r6,20(sp)
 100cef0:	38800005 	stb	r2,0(r7)
 100cef4:	003edf06 	br	100ca74 <__alt_data_end+0xff00ca74>
 100cef8:	d8000b15 	stw	zero,44(sp)
 100cefc:	003c9f06 	br	100c17c <__alt_data_end+0xff00c17c>
 100cf00:	903e7e1e 	bne	r18,zero,100c8fc <__alt_data_end+0xff00c8fc>
 100cf04:	00800434 	movhi	r2,16
 100cf08:	10bfffc4 	addi	r2,r2,-1
 100cf0c:	9884703a 	and	r2,r19,r2
 100cf10:	1000ea1e 	bne	r2,zero,100d2bc <_dtoa_r+0x1460>
 100cf14:	9cdffc2c 	andhi	r19,r19,32752
 100cf18:	9800e826 	beq	r19,zero,100d2bc <_dtoa_r+0x1460>
 100cf1c:	d9c00817 	ldw	r7,32(sp)
 100cf20:	b5800044 	addi	r22,r22,1
 100cf24:	04c00044 	movi	r19,1
 100cf28:	39c00044 	addi	r7,r7,1
 100cf2c:	d9c00815 	stw	r7,32(sp)
 100cf30:	d8800d17 	ldw	r2,52(sp)
 100cf34:	103e721e 	bne	r2,zero,100c900 <__alt_data_end+0xff00c900>
 100cf38:	00800044 	movi	r2,1
 100cf3c:	003e7906 	br	100c924 <__alt_data_end+0xff00c924>
 100cf40:	8009883a 	mov	r4,r16
 100cf44:	10172b00 	call	10172b0 <__floatsidf>
 100cf48:	d9800f17 	ldw	r6,60(sp)
 100cf4c:	d9c01017 	ldw	r7,64(sp)
 100cf50:	1009883a 	mov	r4,r2
 100cf54:	180b883a 	mov	r5,r3
 100cf58:	101621c0 	call	101621c <__muldf3>
 100cf5c:	000d883a 	mov	r6,zero
 100cf60:	01d00734 	movhi	r7,16412
 100cf64:	1009883a 	mov	r4,r2
 100cf68:	180b883a 	mov	r5,r3
 100cf6c:	1014e300 	call	1014e30 <__adddf3>
 100cf70:	047f3034 	movhi	r17,64704
 100cf74:	1021883a 	mov	r16,r2
 100cf78:	1c63883a 	add	r17,r3,r17
 100cf7c:	d9000f17 	ldw	r4,60(sp)
 100cf80:	d9401017 	ldw	r5,64(sp)
 100cf84:	000d883a 	mov	r6,zero
 100cf88:	01d00534 	movhi	r7,16404
 100cf8c:	10169340 	call	1016934 <__subdf3>
 100cf90:	800d883a 	mov	r6,r16
 100cf94:	880f883a 	mov	r7,r17
 100cf98:	1009883a 	mov	r4,r2
 100cf9c:	180b883a 	mov	r5,r3
 100cfa0:	102b883a 	mov	r21,r2
 100cfa4:	1829883a 	mov	r20,r3
 100cfa8:	101604c0 	call	101604c <__gedf2>
 100cfac:	00806c16 	blt	zero,r2,100d160 <_dtoa_r+0x1304>
 100cfb0:	89e0003c 	xorhi	r7,r17,32768
 100cfb4:	800d883a 	mov	r6,r16
 100cfb8:	a809883a 	mov	r4,r21
 100cfbc:	a00b883a 	mov	r5,r20
 100cfc0:	10161280 	call	1016128 <__ledf2>
 100cfc4:	103d7e0e 	bge	r2,zero,100c5c0 <__alt_data_end+0xff00c5c0>
 100cfc8:	002b883a 	mov	r21,zero
 100cfcc:	0023883a 	mov	r17,zero
 100cfd0:	003efb06 	br	100cbc0 <__alt_data_end+0xff00cbc0>
 100cfd4:	d8800717 	ldw	r2,28(sp)
 100cfd8:	003bd006 	br	100bf1c <__alt_data_end+0xff00bf1c>
 100cfdc:	d9000a17 	ldw	r4,40(sp)
 100cfe0:	d9800d17 	ldw	r6,52(sp)
 100cfe4:	dd400a15 	stw	r21,40(sp)
 100cfe8:	a905c83a 	sub	r2,r21,r4
 100cfec:	308d883a 	add	r6,r6,r2
 100cff0:	d9800d15 	stw	r6,52(sp)
 100cff4:	002b883a 	mov	r21,zero
 100cff8:	003e0606 	br	100c814 <__alt_data_end+0xff00c814>
 100cffc:	9023883a 	mov	r17,r18
 100d000:	9829883a 	mov	r20,r19
 100d004:	04000084 	movi	r16,2
 100d008:	003c9206 	br	100c254 <__alt_data_end+0xff00c254>
 100d00c:	04000044 	movi	r16,1
 100d010:	dc000c15 	stw	r16,48(sp)
 100d014:	dc000615 	stw	r16,24(sp)
 100d018:	dc002215 	stw	r16,136(sp)
 100d01c:	e0001115 	stw	zero,68(fp)
 100d020:	000b883a 	mov	r5,zero
 100d024:	003c6906 	br	100c1cc <__alt_data_end+0xff00c1cc>
 100d028:	3021883a 	mov	r16,r6
 100d02c:	003ffb06 	br	100d01c <__alt_data_end+0xff00d01c>
 100d030:	1000021e 	bne	r2,zero,100d03c <_dtoa_r+0x11e0>
 100d034:	4200004c 	andi	r8,r8,1
 100d038:	403e7d1e 	bne	r8,zero,100ca30 <__alt_data_end+0xff00ca30>
 100d03c:	01000c04 	movi	r4,48
 100d040:	00000106 	br	100d048 <_dtoa_r+0x11ec>
 100d044:	102f883a 	mov	r23,r2
 100d048:	b8bfffc4 	addi	r2,r23,-1
 100d04c:	10c00007 	ldb	r3,0(r2)
 100d050:	193ffc26 	beq	r3,r4,100d044 <__alt_data_end+0xff00d044>
 100d054:	003e8706 	br	100ca74 <__alt_data_end+0xff00ca74>
 100d058:	d8800517 	ldw	r2,20(sp)
 100d05c:	00a3c83a 	sub	r17,zero,r2
 100d060:	8800a426 	beq	r17,zero,100d2f4 <_dtoa_r+0x1498>
 100d064:	888003cc 	andi	r2,r17,15
 100d068:	100490fa 	slli	r2,r2,3
 100d06c:	00c040b4 	movhi	r3,258
 100d070:	18ebce04 	addi	r3,r3,-20680
 100d074:	1885883a 	add	r2,r3,r2
 100d078:	11800017 	ldw	r6,0(r2)
 100d07c:	11c00117 	ldw	r7,4(r2)
 100d080:	9009883a 	mov	r4,r18
 100d084:	980b883a 	mov	r5,r19
 100d088:	8823d13a 	srai	r17,r17,4
 100d08c:	101621c0 	call	101621c <__muldf3>
 100d090:	d8800f15 	stw	r2,60(sp)
 100d094:	d8c01015 	stw	r3,64(sp)
 100d098:	8800e826 	beq	r17,zero,100d43c <_dtoa_r+0x15e0>
 100d09c:	050040b4 	movhi	r20,258
 100d0a0:	a52bc404 	addi	r20,r20,-20720
 100d0a4:	04000084 	movi	r16,2
 100d0a8:	8980004c 	andi	r6,r17,1
 100d0ac:	1009883a 	mov	r4,r2
 100d0b0:	8823d07a 	srai	r17,r17,1
 100d0b4:	180b883a 	mov	r5,r3
 100d0b8:	30000426 	beq	r6,zero,100d0cc <_dtoa_r+0x1270>
 100d0bc:	a1800017 	ldw	r6,0(r20)
 100d0c0:	a1c00117 	ldw	r7,4(r20)
 100d0c4:	84000044 	addi	r16,r16,1
 100d0c8:	101621c0 	call	101621c <__muldf3>
 100d0cc:	a5000204 	addi	r20,r20,8
 100d0d0:	883ff51e 	bne	r17,zero,100d0a8 <__alt_data_end+0xff00d0a8>
 100d0d4:	d8800f15 	stw	r2,60(sp)
 100d0d8:	d8c01015 	stw	r3,64(sp)
 100d0dc:	003c7606 	br	100c2b8 <__alt_data_end+0xff00c2b8>
 100d0e0:	00c00c04 	movi	r3,48
 100d0e4:	10c00005 	stb	r3,0(r2)
 100d0e8:	d8c00517 	ldw	r3,20(sp)
 100d0ec:	bd3fffc3 	ldbu	r20,-1(r23)
 100d0f0:	18c00044 	addi	r3,r3,1
 100d0f4:	d8c00515 	stw	r3,20(sp)
 100d0f8:	003db906 	br	100c7e0 <__alt_data_end+0xff00c7e0>
 100d0fc:	89400117 	ldw	r5,4(r17)
 100d100:	e009883a 	mov	r4,fp
 100d104:	100e9f00 	call	100e9f0 <_Balloc>
 100d108:	89800417 	ldw	r6,16(r17)
 100d10c:	89400304 	addi	r5,r17,12
 100d110:	11000304 	addi	r4,r2,12
 100d114:	31800084 	addi	r6,r6,2
 100d118:	318d883a 	add	r6,r6,r6
 100d11c:	318d883a 	add	r6,r6,r6
 100d120:	1027883a 	mov	r19,r2
 100d124:	1008d600 	call	1008d60 <memcpy>
 100d128:	01800044 	movi	r6,1
 100d12c:	980b883a 	mov	r5,r19
 100d130:	e009883a 	mov	r4,fp
 100d134:	100f1700 	call	100f170 <__lshift>
 100d138:	1029883a 	mov	r20,r2
 100d13c:	003ecc06 	br	100cc70 <__alt_data_end+0xff00cc70>
 100d140:	00800e44 	movi	r2,57
 100d144:	90809026 	beq	r18,r2,100d388 <_dtoa_r+0x152c>
 100d148:	92000044 	addi	r8,r18,1
 100d14c:	003f1f06 	br	100cdcc <__alt_data_end+0xff00cdcc>
 100d150:	9011883a 	mov	r8,r18
 100d154:	8825883a 	mov	r18,r17
 100d158:	a023883a 	mov	r17,r20
 100d15c:	003e2906 	br	100ca04 <__alt_data_end+0xff00ca04>
 100d160:	002b883a 	mov	r21,zero
 100d164:	0023883a 	mov	r17,zero
 100d168:	003f5406 	br	100cebc <__alt_data_end+0xff00cebc>
 100d16c:	61bfffc4 	addi	r6,r12,-1
 100d170:	300490fa 	slli	r2,r6,3
 100d174:	00c040b4 	movhi	r3,258
 100d178:	18ebce04 	addi	r3,r3,-20680
 100d17c:	1885883a 	add	r2,r3,r2
 100d180:	11000017 	ldw	r4,0(r2)
 100d184:	11400117 	ldw	r5,4(r2)
 100d188:	d8800717 	ldw	r2,28(sp)
 100d18c:	880f883a 	mov	r7,r17
 100d190:	d9801215 	stw	r6,72(sp)
 100d194:	800d883a 	mov	r6,r16
 100d198:	db001615 	stw	r12,88(sp)
 100d19c:	15c00044 	addi	r23,r2,1
 100d1a0:	101621c0 	call	101621c <__muldf3>
 100d1a4:	d9401017 	ldw	r5,64(sp)
 100d1a8:	d9000f17 	ldw	r4,60(sp)
 100d1ac:	d8c01515 	stw	r3,84(sp)
 100d1b0:	d8801415 	stw	r2,80(sp)
 100d1b4:	10172300 	call	1017230 <__fixdfsi>
 100d1b8:	1009883a 	mov	r4,r2
 100d1bc:	1021883a 	mov	r16,r2
 100d1c0:	10172b00 	call	10172b0 <__floatsidf>
 100d1c4:	d9000f17 	ldw	r4,60(sp)
 100d1c8:	d9401017 	ldw	r5,64(sp)
 100d1cc:	100d883a 	mov	r6,r2
 100d1d0:	180f883a 	mov	r7,r3
 100d1d4:	10169340 	call	1016934 <__subdf3>
 100d1d8:	1829883a 	mov	r20,r3
 100d1dc:	d8c00717 	ldw	r3,28(sp)
 100d1e0:	84000c04 	addi	r16,r16,48
 100d1e4:	1023883a 	mov	r17,r2
 100d1e8:	1c000005 	stb	r16,0(r3)
 100d1ec:	db001617 	ldw	r12,88(sp)
 100d1f0:	00800044 	movi	r2,1
 100d1f4:	60802226 	beq	r12,r2,100d280 <_dtoa_r+0x1424>
 100d1f8:	d9c00717 	ldw	r7,28(sp)
 100d1fc:	8805883a 	mov	r2,r17
 100d200:	b82b883a 	mov	r21,r23
 100d204:	3b19883a 	add	r12,r7,r12
 100d208:	6023883a 	mov	r17,r12
 100d20c:	a007883a 	mov	r3,r20
 100d210:	dc800f15 	stw	r18,60(sp)
 100d214:	000d883a 	mov	r6,zero
 100d218:	01d00934 	movhi	r7,16420
 100d21c:	1009883a 	mov	r4,r2
 100d220:	180b883a 	mov	r5,r3
 100d224:	101621c0 	call	101621c <__muldf3>
 100d228:	180b883a 	mov	r5,r3
 100d22c:	1009883a 	mov	r4,r2
 100d230:	1829883a 	mov	r20,r3
 100d234:	1025883a 	mov	r18,r2
 100d238:	10172300 	call	1017230 <__fixdfsi>
 100d23c:	1009883a 	mov	r4,r2
 100d240:	1021883a 	mov	r16,r2
 100d244:	10172b00 	call	10172b0 <__floatsidf>
 100d248:	100d883a 	mov	r6,r2
 100d24c:	180f883a 	mov	r7,r3
 100d250:	9009883a 	mov	r4,r18
 100d254:	a00b883a 	mov	r5,r20
 100d258:	84000c04 	addi	r16,r16,48
 100d25c:	10169340 	call	1016934 <__subdf3>
 100d260:	ad400044 	addi	r21,r21,1
 100d264:	ac3fffc5 	stb	r16,-1(r21)
 100d268:	ac7fea1e 	bne	r21,r17,100d214 <__alt_data_end+0xff00d214>
 100d26c:	1023883a 	mov	r17,r2
 100d270:	d8801217 	ldw	r2,72(sp)
 100d274:	dc800f17 	ldw	r18,60(sp)
 100d278:	1829883a 	mov	r20,r3
 100d27c:	b8af883a 	add	r23,r23,r2
 100d280:	d9001417 	ldw	r4,80(sp)
 100d284:	d9401517 	ldw	r5,84(sp)
 100d288:	000d883a 	mov	r6,zero
 100d28c:	01cff834 	movhi	r7,16352
 100d290:	1014e300 	call	1014e30 <__adddf3>
 100d294:	880d883a 	mov	r6,r17
 100d298:	a00f883a 	mov	r7,r20
 100d29c:	1009883a 	mov	r4,r2
 100d2a0:	180b883a 	mov	r5,r3
 100d2a4:	10161280 	call	1016128 <__ledf2>
 100d2a8:	10003e0e 	bge	r2,zero,100d3a4 <_dtoa_r+0x1548>
 100d2ac:	d9001317 	ldw	r4,76(sp)
 100d2b0:	bd3fffc3 	ldbu	r20,-1(r23)
 100d2b4:	d9000515 	stw	r4,20(sp)
 100d2b8:	003d3b06 	br	100c7a8 <__alt_data_end+0xff00c7a8>
 100d2bc:	0027883a 	mov	r19,zero
 100d2c0:	003f1b06 	br	100cf30 <__alt_data_end+0xff00cf30>
 100d2c4:	d8800817 	ldw	r2,32(sp)
 100d2c8:	11e9c83a 	sub	r20,r2,r7
 100d2cc:	0005883a 	mov	r2,zero
 100d2d0:	003d5406 	br	100c824 <__alt_data_end+0xff00c824>
 100d2d4:	00800044 	movi	r2,1
 100d2d8:	003dc706 	br	100c9f8 <__alt_data_end+0xff00c9f8>
 100d2dc:	d8c00217 	ldw	r3,8(sp)
 100d2e0:	00800d84 	movi	r2,54
 100d2e4:	dd400a17 	ldw	r21,40(sp)
 100d2e8:	10c5c83a 	sub	r2,r2,r3
 100d2ec:	dd000817 	ldw	r20,32(sp)
 100d2f0:	003d4c06 	br	100c824 <__alt_data_end+0xff00c824>
 100d2f4:	dc800f15 	stw	r18,60(sp)
 100d2f8:	dcc01015 	stw	r19,64(sp)
 100d2fc:	04000084 	movi	r16,2
 100d300:	003bed06 	br	100c2b8 <__alt_data_end+0xff00c2b8>
 100d304:	d9000617 	ldw	r4,24(sp)
 100d308:	203f0d26 	beq	r4,zero,100cf40 <__alt_data_end+0xff00cf40>
 100d30c:	d9800c17 	ldw	r6,48(sp)
 100d310:	01bcab0e 	bge	zero,r6,100c5c0 <__alt_data_end+0xff00c5c0>
 100d314:	d9401017 	ldw	r5,64(sp)
 100d318:	d9000f17 	ldw	r4,60(sp)
 100d31c:	000d883a 	mov	r6,zero
 100d320:	01d00934 	movhi	r7,16420
 100d324:	101621c0 	call	101621c <__muldf3>
 100d328:	81000044 	addi	r4,r16,1
 100d32c:	d8800f15 	stw	r2,60(sp)
 100d330:	d8c01015 	stw	r3,64(sp)
 100d334:	10172b00 	call	10172b0 <__floatsidf>
 100d338:	d9800f17 	ldw	r6,60(sp)
 100d33c:	d9c01017 	ldw	r7,64(sp)
 100d340:	1009883a 	mov	r4,r2
 100d344:	180b883a 	mov	r5,r3
 100d348:	101621c0 	call	101621c <__muldf3>
 100d34c:	01d00734 	movhi	r7,16412
 100d350:	000d883a 	mov	r6,zero
 100d354:	1009883a 	mov	r4,r2
 100d358:	180b883a 	mov	r5,r3
 100d35c:	1014e300 	call	1014e30 <__adddf3>
 100d360:	d9c00517 	ldw	r7,20(sp)
 100d364:	047f3034 	movhi	r17,64704
 100d368:	1021883a 	mov	r16,r2
 100d36c:	39ffffc4 	addi	r7,r7,-1
 100d370:	d9c01315 	stw	r7,76(sp)
 100d374:	1c63883a 	add	r17,r3,r17
 100d378:	db000c17 	ldw	r12,48(sp)
 100d37c:	003bea06 	br	100c328 <__alt_data_end+0xff00c328>
 100d380:	dc000915 	stw	r16,36(sp)
 100d384:	003e0e06 	br	100cbc0 <__alt_data_end+0xff00cbc0>
 100d388:	01000e44 	movi	r4,57
 100d38c:	8825883a 	mov	r18,r17
 100d390:	9dc00044 	addi	r23,r19,1
 100d394:	99000005 	stb	r4,0(r19)
 100d398:	a023883a 	mov	r17,r20
 100d39c:	dc000915 	stw	r16,36(sp)
 100d3a0:	003da406 	br	100ca34 <__alt_data_end+0xff00ca34>
 100d3a4:	d9801417 	ldw	r6,80(sp)
 100d3a8:	d9c01517 	ldw	r7,84(sp)
 100d3ac:	0009883a 	mov	r4,zero
 100d3b0:	014ff834 	movhi	r5,16352
 100d3b4:	10169340 	call	1016934 <__subdf3>
 100d3b8:	880d883a 	mov	r6,r17
 100d3bc:	a00f883a 	mov	r7,r20
 100d3c0:	1009883a 	mov	r4,r2
 100d3c4:	180b883a 	mov	r5,r3
 100d3c8:	101604c0 	call	101604c <__gedf2>
 100d3cc:	00bc7c0e 	bge	zero,r2,100c5c0 <__alt_data_end+0xff00c5c0>
 100d3d0:	01000c04 	movi	r4,48
 100d3d4:	00000106 	br	100d3dc <_dtoa_r+0x1580>
 100d3d8:	102f883a 	mov	r23,r2
 100d3dc:	b8bfffc4 	addi	r2,r23,-1
 100d3e0:	10c00007 	ldb	r3,0(r2)
 100d3e4:	193ffc26 	beq	r3,r4,100d3d8 <__alt_data_end+0xff00d3d8>
 100d3e8:	d9801317 	ldw	r6,76(sp)
 100d3ec:	d9800515 	stw	r6,20(sp)
 100d3f0:	003c4406 	br	100c504 <__alt_data_end+0xff00c504>
 100d3f4:	d9801317 	ldw	r6,76(sp)
 100d3f8:	d9800515 	stw	r6,20(sp)
 100d3fc:	003cea06 	br	100c7a8 <__alt_data_end+0xff00c7a8>
 100d400:	dd800f17 	ldw	r22,60(sp)
 100d404:	dcc01017 	ldw	r19,64(sp)
 100d408:	dc801217 	ldw	r18,72(sp)
 100d40c:	003c6c06 	br	100c5c0 <__alt_data_end+0xff00c5c0>
 100d410:	903e031e 	bne	r18,zero,100cc20 <__alt_data_end+0xff00cc20>
 100d414:	003ebb06 	br	100cf04 <__alt_data_end+0xff00cf04>
 100d418:	103e6c1e 	bne	r2,zero,100cdcc <__alt_data_end+0xff00cdcc>
 100d41c:	4080004c 	andi	r2,r8,1
 100d420:	103e6a26 	beq	r2,zero,100cdcc <__alt_data_end+0xff00cdcc>
 100d424:	003e6606 	br	100cdc0 <__alt_data_end+0xff00cdc0>
 100d428:	d8c00317 	ldw	r3,12(sp)
 100d42c:	00800084 	movi	r2,2
 100d430:	10c02916 	blt	r2,r3,100d4d8 <_dtoa_r+0x167c>
 100d434:	d9000c17 	ldw	r4,48(sp)
 100d438:	003e8806 	br	100ce5c <__alt_data_end+0xff00ce5c>
 100d43c:	04000084 	movi	r16,2
 100d440:	003b9d06 	br	100c2b8 <__alt_data_end+0xff00c2b8>
 100d444:	d9001317 	ldw	r4,76(sp)
 100d448:	d9000515 	stw	r4,20(sp)
 100d44c:	003cd606 	br	100c7a8 <__alt_data_end+0xff00c7a8>
 100d450:	d8801317 	ldw	r2,76(sp)
 100d454:	d8800515 	stw	r2,20(sp)
 100d458:	003c2a06 	br	100c504 <__alt_data_end+0xff00c504>
 100d45c:	d9800317 	ldw	r6,12(sp)
 100d460:	00800084 	movi	r2,2
 100d464:	11801516 	blt	r2,r6,100d4bc <_dtoa_r+0x1660>
 100d468:	d9c00c17 	ldw	r7,48(sp)
 100d46c:	d9c00615 	stw	r7,24(sp)
 100d470:	003df706 	br	100cc50 <__alt_data_end+0xff00cc50>
 100d474:	193d3926 	beq	r3,r4,100c95c <__alt_data_end+0xff00c95c>
 100d478:	00c00f04 	movi	r3,60
 100d47c:	1885c83a 	sub	r2,r3,r2
 100d480:	003ddf06 	br	100cc00 <__alt_data_end+0xff00cc00>
 100d484:	e009883a 	mov	r4,fp
 100d488:	e0001115 	stw	zero,68(fp)
 100d48c:	000b883a 	mov	r5,zero
 100d490:	100e9f00 	call	100e9f0 <_Balloc>
 100d494:	d8800715 	stw	r2,28(sp)
 100d498:	d8c00717 	ldw	r3,28(sp)
 100d49c:	00bfffc4 	movi	r2,-1
 100d4a0:	01000044 	movi	r4,1
 100d4a4:	d8800c15 	stw	r2,48(sp)
 100d4a8:	e0c01015 	stw	r3,64(fp)
 100d4ac:	d9000b15 	stw	r4,44(sp)
 100d4b0:	d8800615 	stw	r2,24(sp)
 100d4b4:	d8002215 	stw	zero,136(sp)
 100d4b8:	003c4106 	br	100c5c0 <__alt_data_end+0xff00c5c0>
 100d4bc:	d8c00c17 	ldw	r3,48(sp)
 100d4c0:	d8c00615 	stw	r3,24(sp)
 100d4c4:	003e7006 	br	100ce88 <__alt_data_end+0xff00ce88>
 100d4c8:	04400044 	movi	r17,1
 100d4cc:	003b2006 	br	100c150 <__alt_data_end+0xff00c150>
 100d4d0:	000b883a 	mov	r5,zero
 100d4d4:	003b3d06 	br	100c1cc <__alt_data_end+0xff00c1cc>
 100d4d8:	d8800c17 	ldw	r2,48(sp)
 100d4dc:	d8800615 	stw	r2,24(sp)
 100d4e0:	003e6906 	br	100ce88 <__alt_data_end+0xff00ce88>

0100d4e4 <__fp_unlock>:
 100d4e4:	0005883a 	mov	r2,zero
 100d4e8:	f800283a 	ret

0100d4ec <_cleanup_r>:
 100d4ec:	01404074 	movhi	r5,257
 100d4f0:	294c5e04 	addi	r5,r5,12664
 100d4f4:	100de041 	jmpi	100de04 <_fwalk_reent>

0100d4f8 <__sinit.part.1>:
 100d4f8:	defff704 	addi	sp,sp,-36
 100d4fc:	00c04074 	movhi	r3,257
 100d500:	dfc00815 	stw	ra,32(sp)
 100d504:	ddc00715 	stw	r23,28(sp)
 100d508:	dd800615 	stw	r22,24(sp)
 100d50c:	dd400515 	stw	r21,20(sp)
 100d510:	dd000415 	stw	r20,16(sp)
 100d514:	dcc00315 	stw	r19,12(sp)
 100d518:	dc800215 	stw	r18,8(sp)
 100d51c:	dc400115 	stw	r17,4(sp)
 100d520:	dc000015 	stw	r16,0(sp)
 100d524:	18f53b04 	addi	r3,r3,-11028
 100d528:	24000117 	ldw	r16,4(r4)
 100d52c:	20c00f15 	stw	r3,60(r4)
 100d530:	2080bb04 	addi	r2,r4,748
 100d534:	00c000c4 	movi	r3,3
 100d538:	20c0b915 	stw	r3,740(r4)
 100d53c:	2080ba15 	stw	r2,744(r4)
 100d540:	2000b815 	stw	zero,736(r4)
 100d544:	05c00204 	movi	r23,8
 100d548:	00800104 	movi	r2,4
 100d54c:	2025883a 	mov	r18,r4
 100d550:	b80d883a 	mov	r6,r23
 100d554:	81001704 	addi	r4,r16,92
 100d558:	000b883a 	mov	r5,zero
 100d55c:	80000015 	stw	zero,0(r16)
 100d560:	80000115 	stw	zero,4(r16)
 100d564:	80000215 	stw	zero,8(r16)
 100d568:	8080030d 	sth	r2,12(r16)
 100d56c:	80001915 	stw	zero,100(r16)
 100d570:	8000038d 	sth	zero,14(r16)
 100d574:	80000415 	stw	zero,16(r16)
 100d578:	80000515 	stw	zero,20(r16)
 100d57c:	80000615 	stw	zero,24(r16)
 100d580:	1008ea80 	call	1008ea8 <memset>
 100d584:	05804074 	movhi	r22,257
 100d588:	94400217 	ldw	r17,8(r18)
 100d58c:	05404074 	movhi	r21,257
 100d590:	05004074 	movhi	r20,257
 100d594:	04c04074 	movhi	r19,257
 100d598:	b580c704 	addi	r22,r22,796
 100d59c:	ad40de04 	addi	r21,r21,888
 100d5a0:	a500fd04 	addi	r20,r20,1012
 100d5a4:	9cc11404 	addi	r19,r19,1104
 100d5a8:	85800815 	stw	r22,32(r16)
 100d5ac:	85400915 	stw	r21,36(r16)
 100d5b0:	85000a15 	stw	r20,40(r16)
 100d5b4:	84c00b15 	stw	r19,44(r16)
 100d5b8:	84000715 	stw	r16,28(r16)
 100d5bc:	00800284 	movi	r2,10
 100d5c0:	8880030d 	sth	r2,12(r17)
 100d5c4:	00800044 	movi	r2,1
 100d5c8:	b80d883a 	mov	r6,r23
 100d5cc:	89001704 	addi	r4,r17,92
 100d5d0:	000b883a 	mov	r5,zero
 100d5d4:	88000015 	stw	zero,0(r17)
 100d5d8:	88000115 	stw	zero,4(r17)
 100d5dc:	88000215 	stw	zero,8(r17)
 100d5e0:	88001915 	stw	zero,100(r17)
 100d5e4:	8880038d 	sth	r2,14(r17)
 100d5e8:	88000415 	stw	zero,16(r17)
 100d5ec:	88000515 	stw	zero,20(r17)
 100d5f0:	88000615 	stw	zero,24(r17)
 100d5f4:	1008ea80 	call	1008ea8 <memset>
 100d5f8:	94000317 	ldw	r16,12(r18)
 100d5fc:	00800484 	movi	r2,18
 100d600:	8c400715 	stw	r17,28(r17)
 100d604:	8d800815 	stw	r22,32(r17)
 100d608:	8d400915 	stw	r21,36(r17)
 100d60c:	8d000a15 	stw	r20,40(r17)
 100d610:	8cc00b15 	stw	r19,44(r17)
 100d614:	8080030d 	sth	r2,12(r16)
 100d618:	00800084 	movi	r2,2
 100d61c:	80000015 	stw	zero,0(r16)
 100d620:	80000115 	stw	zero,4(r16)
 100d624:	80000215 	stw	zero,8(r16)
 100d628:	80001915 	stw	zero,100(r16)
 100d62c:	8080038d 	sth	r2,14(r16)
 100d630:	80000415 	stw	zero,16(r16)
 100d634:	80000515 	stw	zero,20(r16)
 100d638:	80000615 	stw	zero,24(r16)
 100d63c:	b80d883a 	mov	r6,r23
 100d640:	000b883a 	mov	r5,zero
 100d644:	81001704 	addi	r4,r16,92
 100d648:	1008ea80 	call	1008ea8 <memset>
 100d64c:	00800044 	movi	r2,1
 100d650:	84000715 	stw	r16,28(r16)
 100d654:	85800815 	stw	r22,32(r16)
 100d658:	85400915 	stw	r21,36(r16)
 100d65c:	85000a15 	stw	r20,40(r16)
 100d660:	84c00b15 	stw	r19,44(r16)
 100d664:	90800e15 	stw	r2,56(r18)
 100d668:	dfc00817 	ldw	ra,32(sp)
 100d66c:	ddc00717 	ldw	r23,28(sp)
 100d670:	dd800617 	ldw	r22,24(sp)
 100d674:	dd400517 	ldw	r21,20(sp)
 100d678:	dd000417 	ldw	r20,16(sp)
 100d67c:	dcc00317 	ldw	r19,12(sp)
 100d680:	dc800217 	ldw	r18,8(sp)
 100d684:	dc400117 	ldw	r17,4(sp)
 100d688:	dc000017 	ldw	r16,0(sp)
 100d68c:	dec00904 	addi	sp,sp,36
 100d690:	f800283a 	ret

0100d694 <__fp_lock>:
 100d694:	0005883a 	mov	r2,zero
 100d698:	f800283a 	ret

0100d69c <__sfmoreglue>:
 100d69c:	defffc04 	addi	sp,sp,-16
 100d6a0:	dc400115 	stw	r17,4(sp)
 100d6a4:	2c7fffc4 	addi	r17,r5,-1
 100d6a8:	8c401a24 	muli	r17,r17,104
 100d6ac:	dc800215 	stw	r18,8(sp)
 100d6b0:	2825883a 	mov	r18,r5
 100d6b4:	89401d04 	addi	r5,r17,116
 100d6b8:	dc000015 	stw	r16,0(sp)
 100d6bc:	dfc00315 	stw	ra,12(sp)
 100d6c0:	100dfa40 	call	100dfa4 <_malloc_r>
 100d6c4:	1021883a 	mov	r16,r2
 100d6c8:	10000726 	beq	r2,zero,100d6e8 <__sfmoreglue+0x4c>
 100d6cc:	11000304 	addi	r4,r2,12
 100d6d0:	10000015 	stw	zero,0(r2)
 100d6d4:	14800115 	stw	r18,4(r2)
 100d6d8:	11000215 	stw	r4,8(r2)
 100d6dc:	89801a04 	addi	r6,r17,104
 100d6e0:	000b883a 	mov	r5,zero
 100d6e4:	1008ea80 	call	1008ea8 <memset>
 100d6e8:	8005883a 	mov	r2,r16
 100d6ec:	dfc00317 	ldw	ra,12(sp)
 100d6f0:	dc800217 	ldw	r18,8(sp)
 100d6f4:	dc400117 	ldw	r17,4(sp)
 100d6f8:	dc000017 	ldw	r16,0(sp)
 100d6fc:	dec00404 	addi	sp,sp,16
 100d700:	f800283a 	ret

0100d704 <__sfp>:
 100d704:	defffb04 	addi	sp,sp,-20
 100d708:	dc000015 	stw	r16,0(sp)
 100d70c:	040040b4 	movhi	r16,258
 100d710:	84334104 	addi	r16,r16,-13052
 100d714:	dcc00315 	stw	r19,12(sp)
 100d718:	2027883a 	mov	r19,r4
 100d71c:	81000017 	ldw	r4,0(r16)
 100d720:	dfc00415 	stw	ra,16(sp)
 100d724:	dc800215 	stw	r18,8(sp)
 100d728:	20800e17 	ldw	r2,56(r4)
 100d72c:	dc400115 	stw	r17,4(sp)
 100d730:	1000021e 	bne	r2,zero,100d73c <__sfp+0x38>
 100d734:	100d4f80 	call	100d4f8 <__sinit.part.1>
 100d738:	81000017 	ldw	r4,0(r16)
 100d73c:	2480b804 	addi	r18,r4,736
 100d740:	047fffc4 	movi	r17,-1
 100d744:	91000117 	ldw	r4,4(r18)
 100d748:	94000217 	ldw	r16,8(r18)
 100d74c:	213fffc4 	addi	r4,r4,-1
 100d750:	20000a16 	blt	r4,zero,100d77c <__sfp+0x78>
 100d754:	8080030f 	ldh	r2,12(r16)
 100d758:	10000c26 	beq	r2,zero,100d78c <__sfp+0x88>
 100d75c:	80c01d04 	addi	r3,r16,116
 100d760:	00000206 	br	100d76c <__sfp+0x68>
 100d764:	18bfe60f 	ldh	r2,-104(r3)
 100d768:	10000826 	beq	r2,zero,100d78c <__sfp+0x88>
 100d76c:	213fffc4 	addi	r4,r4,-1
 100d770:	1c3ffd04 	addi	r16,r3,-12
 100d774:	18c01a04 	addi	r3,r3,104
 100d778:	247ffa1e 	bne	r4,r17,100d764 <__alt_data_end+0xff00d764>
 100d77c:	90800017 	ldw	r2,0(r18)
 100d780:	10001d26 	beq	r2,zero,100d7f8 <__sfp+0xf4>
 100d784:	1025883a 	mov	r18,r2
 100d788:	003fee06 	br	100d744 <__alt_data_end+0xff00d744>
 100d78c:	00bfffc4 	movi	r2,-1
 100d790:	8080038d 	sth	r2,14(r16)
 100d794:	00800044 	movi	r2,1
 100d798:	8080030d 	sth	r2,12(r16)
 100d79c:	80001915 	stw	zero,100(r16)
 100d7a0:	80000015 	stw	zero,0(r16)
 100d7a4:	80000215 	stw	zero,8(r16)
 100d7a8:	80000115 	stw	zero,4(r16)
 100d7ac:	80000415 	stw	zero,16(r16)
 100d7b0:	80000515 	stw	zero,20(r16)
 100d7b4:	80000615 	stw	zero,24(r16)
 100d7b8:	01800204 	movi	r6,8
 100d7bc:	000b883a 	mov	r5,zero
 100d7c0:	81001704 	addi	r4,r16,92
 100d7c4:	1008ea80 	call	1008ea8 <memset>
 100d7c8:	8005883a 	mov	r2,r16
 100d7cc:	80000c15 	stw	zero,48(r16)
 100d7d0:	80000d15 	stw	zero,52(r16)
 100d7d4:	80001115 	stw	zero,68(r16)
 100d7d8:	80001215 	stw	zero,72(r16)
 100d7dc:	dfc00417 	ldw	ra,16(sp)
 100d7e0:	dcc00317 	ldw	r19,12(sp)
 100d7e4:	dc800217 	ldw	r18,8(sp)
 100d7e8:	dc400117 	ldw	r17,4(sp)
 100d7ec:	dc000017 	ldw	r16,0(sp)
 100d7f0:	dec00504 	addi	sp,sp,20
 100d7f4:	f800283a 	ret
 100d7f8:	01400104 	movi	r5,4
 100d7fc:	9809883a 	mov	r4,r19
 100d800:	100d69c0 	call	100d69c <__sfmoreglue>
 100d804:	90800015 	stw	r2,0(r18)
 100d808:	103fde1e 	bne	r2,zero,100d784 <__alt_data_end+0xff00d784>
 100d80c:	00800304 	movi	r2,12
 100d810:	98800015 	stw	r2,0(r19)
 100d814:	0005883a 	mov	r2,zero
 100d818:	003ff006 	br	100d7dc <__alt_data_end+0xff00d7dc>

0100d81c <_cleanup>:
 100d81c:	008040b4 	movhi	r2,258
 100d820:	10b34104 	addi	r2,r2,-13052
 100d824:	11000017 	ldw	r4,0(r2)
 100d828:	01404074 	movhi	r5,257
 100d82c:	294c5e04 	addi	r5,r5,12664
 100d830:	100de041 	jmpi	100de04 <_fwalk_reent>

0100d834 <__sinit>:
 100d834:	20800e17 	ldw	r2,56(r4)
 100d838:	10000126 	beq	r2,zero,100d840 <__sinit+0xc>
 100d83c:	f800283a 	ret
 100d840:	100d4f81 	jmpi	100d4f8 <__sinit.part.1>

0100d844 <__sfp_lock_acquire>:
 100d844:	f800283a 	ret

0100d848 <__sfp_lock_release>:
 100d848:	f800283a 	ret

0100d84c <__sinit_lock_acquire>:
 100d84c:	f800283a 	ret

0100d850 <__sinit_lock_release>:
 100d850:	f800283a 	ret

0100d854 <__fp_lock_all>:
 100d854:	008040b4 	movhi	r2,258
 100d858:	10b34204 	addi	r2,r2,-13048
 100d85c:	11000017 	ldw	r4,0(r2)
 100d860:	01404074 	movhi	r5,257
 100d864:	2975a504 	addi	r5,r5,-10604
 100d868:	100dd401 	jmpi	100dd40 <_fwalk>

0100d86c <__fp_unlock_all>:
 100d86c:	008040b4 	movhi	r2,258
 100d870:	10b34204 	addi	r2,r2,-13048
 100d874:	11000017 	ldw	r4,0(r2)
 100d878:	01404074 	movhi	r5,257
 100d87c:	29753904 	addi	r5,r5,-11036
 100d880:	100dd401 	jmpi	100dd40 <_fwalk>

0100d884 <__sfvwrite_r>:
 100d884:	30800217 	ldw	r2,8(r6)
 100d888:	10006726 	beq	r2,zero,100da28 <__sfvwrite_r+0x1a4>
 100d88c:	28c0030b 	ldhu	r3,12(r5)
 100d890:	defff404 	addi	sp,sp,-48
 100d894:	dd400715 	stw	r21,28(sp)
 100d898:	dd000615 	stw	r20,24(sp)
 100d89c:	dc000215 	stw	r16,8(sp)
 100d8a0:	dfc00b15 	stw	ra,44(sp)
 100d8a4:	df000a15 	stw	fp,40(sp)
 100d8a8:	ddc00915 	stw	r23,36(sp)
 100d8ac:	dd800815 	stw	r22,32(sp)
 100d8b0:	dcc00515 	stw	r19,20(sp)
 100d8b4:	dc800415 	stw	r18,16(sp)
 100d8b8:	dc400315 	stw	r17,12(sp)
 100d8bc:	1880020c 	andi	r2,r3,8
 100d8c0:	2821883a 	mov	r16,r5
 100d8c4:	202b883a 	mov	r21,r4
 100d8c8:	3029883a 	mov	r20,r6
 100d8cc:	10002726 	beq	r2,zero,100d96c <__sfvwrite_r+0xe8>
 100d8d0:	28800417 	ldw	r2,16(r5)
 100d8d4:	10002526 	beq	r2,zero,100d96c <__sfvwrite_r+0xe8>
 100d8d8:	1880008c 	andi	r2,r3,2
 100d8dc:	a4400017 	ldw	r17,0(r20)
 100d8e0:	10002a26 	beq	r2,zero,100d98c <__sfvwrite_r+0x108>
 100d8e4:	05a00034 	movhi	r22,32768
 100d8e8:	0027883a 	mov	r19,zero
 100d8ec:	0025883a 	mov	r18,zero
 100d8f0:	b5bf0004 	addi	r22,r22,-1024
 100d8f4:	980d883a 	mov	r6,r19
 100d8f8:	a809883a 	mov	r4,r21
 100d8fc:	90004626 	beq	r18,zero,100da18 <__sfvwrite_r+0x194>
 100d900:	900f883a 	mov	r7,r18
 100d904:	b480022e 	bgeu	r22,r18,100d910 <__sfvwrite_r+0x8c>
 100d908:	01e00034 	movhi	r7,32768
 100d90c:	39ff0004 	addi	r7,r7,-1024
 100d910:	80800917 	ldw	r2,36(r16)
 100d914:	81400717 	ldw	r5,28(r16)
 100d918:	103ee83a 	callr	r2
 100d91c:	0080570e 	bge	zero,r2,100da7c <__sfvwrite_r+0x1f8>
 100d920:	a0c00217 	ldw	r3,8(r20)
 100d924:	98a7883a 	add	r19,r19,r2
 100d928:	90a5c83a 	sub	r18,r18,r2
 100d92c:	1885c83a 	sub	r2,r3,r2
 100d930:	a0800215 	stw	r2,8(r20)
 100d934:	103fef1e 	bne	r2,zero,100d8f4 <__alt_data_end+0xff00d8f4>
 100d938:	0005883a 	mov	r2,zero
 100d93c:	dfc00b17 	ldw	ra,44(sp)
 100d940:	df000a17 	ldw	fp,40(sp)
 100d944:	ddc00917 	ldw	r23,36(sp)
 100d948:	dd800817 	ldw	r22,32(sp)
 100d94c:	dd400717 	ldw	r21,28(sp)
 100d950:	dd000617 	ldw	r20,24(sp)
 100d954:	dcc00517 	ldw	r19,20(sp)
 100d958:	dc800417 	ldw	r18,16(sp)
 100d95c:	dc400317 	ldw	r17,12(sp)
 100d960:	dc000217 	ldw	r16,8(sp)
 100d964:	dec00c04 	addi	sp,sp,48
 100d968:	f800283a 	ret
 100d96c:	800b883a 	mov	r5,r16
 100d970:	a809883a 	mov	r4,r21
 100d974:	1012f0c0 	call	1012f0c <__swsetup_r>
 100d978:	1000eb1e 	bne	r2,zero,100dd28 <__sfvwrite_r+0x4a4>
 100d97c:	80c0030b 	ldhu	r3,12(r16)
 100d980:	a4400017 	ldw	r17,0(r20)
 100d984:	1880008c 	andi	r2,r3,2
 100d988:	103fd61e 	bne	r2,zero,100d8e4 <__alt_data_end+0xff00d8e4>
 100d98c:	1880004c 	andi	r2,r3,1
 100d990:	10003f1e 	bne	r2,zero,100da90 <__sfvwrite_r+0x20c>
 100d994:	0039883a 	mov	fp,zero
 100d998:	0025883a 	mov	r18,zero
 100d99c:	90001a26 	beq	r18,zero,100da08 <__sfvwrite_r+0x184>
 100d9a0:	1880800c 	andi	r2,r3,512
 100d9a4:	84c00217 	ldw	r19,8(r16)
 100d9a8:	10002126 	beq	r2,zero,100da30 <__sfvwrite_r+0x1ac>
 100d9ac:	982f883a 	mov	r23,r19
 100d9b0:	94c09336 	bltu	r18,r19,100dc00 <__sfvwrite_r+0x37c>
 100d9b4:	1881200c 	andi	r2,r3,1152
 100d9b8:	10009e1e 	bne	r2,zero,100dc34 <__sfvwrite_r+0x3b0>
 100d9bc:	81000017 	ldw	r4,0(r16)
 100d9c0:	b80d883a 	mov	r6,r23
 100d9c4:	e00b883a 	mov	r5,fp
 100d9c8:	100e8940 	call	100e894 <memmove>
 100d9cc:	80c00217 	ldw	r3,8(r16)
 100d9d0:	81000017 	ldw	r4,0(r16)
 100d9d4:	9005883a 	mov	r2,r18
 100d9d8:	1ce7c83a 	sub	r19,r3,r19
 100d9dc:	25cf883a 	add	r7,r4,r23
 100d9e0:	84c00215 	stw	r19,8(r16)
 100d9e4:	81c00015 	stw	r7,0(r16)
 100d9e8:	a0c00217 	ldw	r3,8(r20)
 100d9ec:	e0b9883a 	add	fp,fp,r2
 100d9f0:	90a5c83a 	sub	r18,r18,r2
 100d9f4:	18a7c83a 	sub	r19,r3,r2
 100d9f8:	a4c00215 	stw	r19,8(r20)
 100d9fc:	983fce26 	beq	r19,zero,100d938 <__alt_data_end+0xff00d938>
 100da00:	80c0030b 	ldhu	r3,12(r16)
 100da04:	903fe61e 	bne	r18,zero,100d9a0 <__alt_data_end+0xff00d9a0>
 100da08:	8f000017 	ldw	fp,0(r17)
 100da0c:	8c800117 	ldw	r18,4(r17)
 100da10:	8c400204 	addi	r17,r17,8
 100da14:	003fe106 	br	100d99c <__alt_data_end+0xff00d99c>
 100da18:	8cc00017 	ldw	r19,0(r17)
 100da1c:	8c800117 	ldw	r18,4(r17)
 100da20:	8c400204 	addi	r17,r17,8
 100da24:	003fb306 	br	100d8f4 <__alt_data_end+0xff00d8f4>
 100da28:	0005883a 	mov	r2,zero
 100da2c:	f800283a 	ret
 100da30:	81000017 	ldw	r4,0(r16)
 100da34:	80800417 	ldw	r2,16(r16)
 100da38:	11005736 	bltu	r2,r4,100db98 <__sfvwrite_r+0x314>
 100da3c:	85c00517 	ldw	r23,20(r16)
 100da40:	95c05536 	bltu	r18,r23,100db98 <__sfvwrite_r+0x314>
 100da44:	00a00034 	movhi	r2,32768
 100da48:	10bfffc4 	addi	r2,r2,-1
 100da4c:	9009883a 	mov	r4,r18
 100da50:	1480012e 	bgeu	r2,r18,100da58 <__sfvwrite_r+0x1d4>
 100da54:	1009883a 	mov	r4,r2
 100da58:	b80b883a 	mov	r5,r23
 100da5c:	1014c7c0 	call	1014c7c <__divsi3>
 100da60:	15cf383a 	mul	r7,r2,r23
 100da64:	81400717 	ldw	r5,28(r16)
 100da68:	80800917 	ldw	r2,36(r16)
 100da6c:	e00d883a 	mov	r6,fp
 100da70:	a809883a 	mov	r4,r21
 100da74:	103ee83a 	callr	r2
 100da78:	00bfdb16 	blt	zero,r2,100d9e8 <__alt_data_end+0xff00d9e8>
 100da7c:	8080030b 	ldhu	r2,12(r16)
 100da80:	10801014 	ori	r2,r2,64
 100da84:	8080030d 	sth	r2,12(r16)
 100da88:	00bfffc4 	movi	r2,-1
 100da8c:	003fab06 	br	100d93c <__alt_data_end+0xff00d93c>
 100da90:	0027883a 	mov	r19,zero
 100da94:	0011883a 	mov	r8,zero
 100da98:	0039883a 	mov	fp,zero
 100da9c:	0025883a 	mov	r18,zero
 100daa0:	90001f26 	beq	r18,zero,100db20 <__sfvwrite_r+0x29c>
 100daa4:	40005a26 	beq	r8,zero,100dc10 <__sfvwrite_r+0x38c>
 100daa8:	982d883a 	mov	r22,r19
 100daac:	94c0012e 	bgeu	r18,r19,100dab4 <__sfvwrite_r+0x230>
 100dab0:	902d883a 	mov	r22,r18
 100dab4:	81000017 	ldw	r4,0(r16)
 100dab8:	80800417 	ldw	r2,16(r16)
 100dabc:	b02f883a 	mov	r23,r22
 100dac0:	81c00517 	ldw	r7,20(r16)
 100dac4:	1100032e 	bgeu	r2,r4,100dad4 <__sfvwrite_r+0x250>
 100dac8:	80c00217 	ldw	r3,8(r16)
 100dacc:	38c7883a 	add	r3,r7,r3
 100dad0:	1d801816 	blt	r3,r22,100db34 <__sfvwrite_r+0x2b0>
 100dad4:	b1c03e16 	blt	r22,r7,100dbd0 <__sfvwrite_r+0x34c>
 100dad8:	80800917 	ldw	r2,36(r16)
 100dadc:	81400717 	ldw	r5,28(r16)
 100dae0:	e00d883a 	mov	r6,fp
 100dae4:	da000115 	stw	r8,4(sp)
 100dae8:	a809883a 	mov	r4,r21
 100daec:	103ee83a 	callr	r2
 100daf0:	102f883a 	mov	r23,r2
 100daf4:	da000117 	ldw	r8,4(sp)
 100daf8:	00bfe00e 	bge	zero,r2,100da7c <__alt_data_end+0xff00da7c>
 100dafc:	9de7c83a 	sub	r19,r19,r23
 100db00:	98001f26 	beq	r19,zero,100db80 <__sfvwrite_r+0x2fc>
 100db04:	a0800217 	ldw	r2,8(r20)
 100db08:	e5f9883a 	add	fp,fp,r23
 100db0c:	95e5c83a 	sub	r18,r18,r23
 100db10:	15efc83a 	sub	r23,r2,r23
 100db14:	a5c00215 	stw	r23,8(r20)
 100db18:	b83f8726 	beq	r23,zero,100d938 <__alt_data_end+0xff00d938>
 100db1c:	903fe11e 	bne	r18,zero,100daa4 <__alt_data_end+0xff00daa4>
 100db20:	8f000017 	ldw	fp,0(r17)
 100db24:	8c800117 	ldw	r18,4(r17)
 100db28:	0011883a 	mov	r8,zero
 100db2c:	8c400204 	addi	r17,r17,8
 100db30:	003fdb06 	br	100daa0 <__alt_data_end+0xff00daa0>
 100db34:	180d883a 	mov	r6,r3
 100db38:	e00b883a 	mov	r5,fp
 100db3c:	da000115 	stw	r8,4(sp)
 100db40:	d8c00015 	stw	r3,0(sp)
 100db44:	100e8940 	call	100e894 <memmove>
 100db48:	d8c00017 	ldw	r3,0(sp)
 100db4c:	80800017 	ldw	r2,0(r16)
 100db50:	800b883a 	mov	r5,r16
 100db54:	a809883a 	mov	r4,r21
 100db58:	10c5883a 	add	r2,r2,r3
 100db5c:	80800015 	stw	r2,0(r16)
 100db60:	d8c00015 	stw	r3,0(sp)
 100db64:	10134980 	call	1013498 <_fflush_r>
 100db68:	d8c00017 	ldw	r3,0(sp)
 100db6c:	da000117 	ldw	r8,4(sp)
 100db70:	103fc21e 	bne	r2,zero,100da7c <__alt_data_end+0xff00da7c>
 100db74:	182f883a 	mov	r23,r3
 100db78:	9de7c83a 	sub	r19,r19,r23
 100db7c:	983fe11e 	bne	r19,zero,100db04 <__alt_data_end+0xff00db04>
 100db80:	800b883a 	mov	r5,r16
 100db84:	a809883a 	mov	r4,r21
 100db88:	10134980 	call	1013498 <_fflush_r>
 100db8c:	103fbb1e 	bne	r2,zero,100da7c <__alt_data_end+0xff00da7c>
 100db90:	0011883a 	mov	r8,zero
 100db94:	003fdb06 	br	100db04 <__alt_data_end+0xff00db04>
 100db98:	94c0012e 	bgeu	r18,r19,100dba0 <__sfvwrite_r+0x31c>
 100db9c:	9027883a 	mov	r19,r18
 100dba0:	980d883a 	mov	r6,r19
 100dba4:	e00b883a 	mov	r5,fp
 100dba8:	100e8940 	call	100e894 <memmove>
 100dbac:	80800217 	ldw	r2,8(r16)
 100dbb0:	80c00017 	ldw	r3,0(r16)
 100dbb4:	14c5c83a 	sub	r2,r2,r19
 100dbb8:	1cc7883a 	add	r3,r3,r19
 100dbbc:	80800215 	stw	r2,8(r16)
 100dbc0:	80c00015 	stw	r3,0(r16)
 100dbc4:	10004326 	beq	r2,zero,100dcd4 <__sfvwrite_r+0x450>
 100dbc8:	9805883a 	mov	r2,r19
 100dbcc:	003f8606 	br	100d9e8 <__alt_data_end+0xff00d9e8>
 100dbd0:	b00d883a 	mov	r6,r22
 100dbd4:	e00b883a 	mov	r5,fp
 100dbd8:	da000115 	stw	r8,4(sp)
 100dbdc:	100e8940 	call	100e894 <memmove>
 100dbe0:	80800217 	ldw	r2,8(r16)
 100dbe4:	80c00017 	ldw	r3,0(r16)
 100dbe8:	da000117 	ldw	r8,4(sp)
 100dbec:	1585c83a 	sub	r2,r2,r22
 100dbf0:	1dad883a 	add	r22,r3,r22
 100dbf4:	80800215 	stw	r2,8(r16)
 100dbf8:	85800015 	stw	r22,0(r16)
 100dbfc:	003fbf06 	br	100dafc <__alt_data_end+0xff00dafc>
 100dc00:	81000017 	ldw	r4,0(r16)
 100dc04:	9027883a 	mov	r19,r18
 100dc08:	902f883a 	mov	r23,r18
 100dc0c:	003f6c06 	br	100d9c0 <__alt_data_end+0xff00d9c0>
 100dc10:	900d883a 	mov	r6,r18
 100dc14:	01400284 	movi	r5,10
 100dc18:	e009883a 	mov	r4,fp
 100dc1c:	100e7b00 	call	100e7b0 <memchr>
 100dc20:	10003e26 	beq	r2,zero,100dd1c <__sfvwrite_r+0x498>
 100dc24:	10800044 	addi	r2,r2,1
 100dc28:	1727c83a 	sub	r19,r2,fp
 100dc2c:	02000044 	movi	r8,1
 100dc30:	003f9d06 	br	100daa8 <__alt_data_end+0xff00daa8>
 100dc34:	80800517 	ldw	r2,20(r16)
 100dc38:	81400417 	ldw	r5,16(r16)
 100dc3c:	81c00017 	ldw	r7,0(r16)
 100dc40:	10a7883a 	add	r19,r2,r2
 100dc44:	9885883a 	add	r2,r19,r2
 100dc48:	1026d7fa 	srli	r19,r2,31
 100dc4c:	396dc83a 	sub	r22,r7,r5
 100dc50:	b1000044 	addi	r4,r22,1
 100dc54:	9885883a 	add	r2,r19,r2
 100dc58:	1027d07a 	srai	r19,r2,1
 100dc5c:	2485883a 	add	r2,r4,r18
 100dc60:	980d883a 	mov	r6,r19
 100dc64:	9880022e 	bgeu	r19,r2,100dc70 <__sfvwrite_r+0x3ec>
 100dc68:	1027883a 	mov	r19,r2
 100dc6c:	100d883a 	mov	r6,r2
 100dc70:	18c1000c 	andi	r3,r3,1024
 100dc74:	18001c26 	beq	r3,zero,100dce8 <__sfvwrite_r+0x464>
 100dc78:	300b883a 	mov	r5,r6
 100dc7c:	a809883a 	mov	r4,r21
 100dc80:	100dfa40 	call	100dfa4 <_malloc_r>
 100dc84:	102f883a 	mov	r23,r2
 100dc88:	10002926 	beq	r2,zero,100dd30 <__sfvwrite_r+0x4ac>
 100dc8c:	81400417 	ldw	r5,16(r16)
 100dc90:	b00d883a 	mov	r6,r22
 100dc94:	1009883a 	mov	r4,r2
 100dc98:	1008d600 	call	1008d60 <memcpy>
 100dc9c:	8080030b 	ldhu	r2,12(r16)
 100dca0:	00fedfc4 	movi	r3,-1153
 100dca4:	10c4703a 	and	r2,r2,r3
 100dca8:	10802014 	ori	r2,r2,128
 100dcac:	8080030d 	sth	r2,12(r16)
 100dcb0:	bd89883a 	add	r4,r23,r22
 100dcb4:	9d8fc83a 	sub	r7,r19,r22
 100dcb8:	85c00415 	stw	r23,16(r16)
 100dcbc:	84c00515 	stw	r19,20(r16)
 100dcc0:	81000015 	stw	r4,0(r16)
 100dcc4:	9027883a 	mov	r19,r18
 100dcc8:	81c00215 	stw	r7,8(r16)
 100dccc:	902f883a 	mov	r23,r18
 100dcd0:	003f3b06 	br	100d9c0 <__alt_data_end+0xff00d9c0>
 100dcd4:	800b883a 	mov	r5,r16
 100dcd8:	a809883a 	mov	r4,r21
 100dcdc:	10134980 	call	1013498 <_fflush_r>
 100dce0:	103fb926 	beq	r2,zero,100dbc8 <__alt_data_end+0xff00dbc8>
 100dce4:	003f6506 	br	100da7c <__alt_data_end+0xff00da7c>
 100dce8:	a809883a 	mov	r4,r21
 100dcec:	100f9ec0 	call	100f9ec <_realloc_r>
 100dcf0:	102f883a 	mov	r23,r2
 100dcf4:	103fee1e 	bne	r2,zero,100dcb0 <__alt_data_end+0xff00dcb0>
 100dcf8:	81400417 	ldw	r5,16(r16)
 100dcfc:	a809883a 	mov	r4,r21
 100dd00:	10138500 	call	1013850 <_free_r>
 100dd04:	8080030b 	ldhu	r2,12(r16)
 100dd08:	00ffdfc4 	movi	r3,-129
 100dd0c:	1884703a 	and	r2,r3,r2
 100dd10:	00c00304 	movi	r3,12
 100dd14:	a8c00015 	stw	r3,0(r21)
 100dd18:	003f5906 	br	100da80 <__alt_data_end+0xff00da80>
 100dd1c:	94c00044 	addi	r19,r18,1
 100dd20:	02000044 	movi	r8,1
 100dd24:	003f6006 	br	100daa8 <__alt_data_end+0xff00daa8>
 100dd28:	00bfffc4 	movi	r2,-1
 100dd2c:	003f0306 	br	100d93c <__alt_data_end+0xff00d93c>
 100dd30:	00800304 	movi	r2,12
 100dd34:	a8800015 	stw	r2,0(r21)
 100dd38:	8080030b 	ldhu	r2,12(r16)
 100dd3c:	003f5006 	br	100da80 <__alt_data_end+0xff00da80>

0100dd40 <_fwalk>:
 100dd40:	defff704 	addi	sp,sp,-36
 100dd44:	dd000415 	stw	r20,16(sp)
 100dd48:	dfc00815 	stw	ra,32(sp)
 100dd4c:	ddc00715 	stw	r23,28(sp)
 100dd50:	dd800615 	stw	r22,24(sp)
 100dd54:	dd400515 	stw	r21,20(sp)
 100dd58:	dcc00315 	stw	r19,12(sp)
 100dd5c:	dc800215 	stw	r18,8(sp)
 100dd60:	dc400115 	stw	r17,4(sp)
 100dd64:	dc000015 	stw	r16,0(sp)
 100dd68:	2500b804 	addi	r20,r4,736
 100dd6c:	a0002326 	beq	r20,zero,100ddfc <_fwalk+0xbc>
 100dd70:	282b883a 	mov	r21,r5
 100dd74:	002f883a 	mov	r23,zero
 100dd78:	05800044 	movi	r22,1
 100dd7c:	04ffffc4 	movi	r19,-1
 100dd80:	a4400117 	ldw	r17,4(r20)
 100dd84:	a4800217 	ldw	r18,8(r20)
 100dd88:	8c7fffc4 	addi	r17,r17,-1
 100dd8c:	88000d16 	blt	r17,zero,100ddc4 <_fwalk+0x84>
 100dd90:	94000304 	addi	r16,r18,12
 100dd94:	94800384 	addi	r18,r18,14
 100dd98:	8080000b 	ldhu	r2,0(r16)
 100dd9c:	8c7fffc4 	addi	r17,r17,-1
 100dda0:	813ffd04 	addi	r4,r16,-12
 100dda4:	b080042e 	bgeu	r22,r2,100ddb8 <_fwalk+0x78>
 100dda8:	9080000f 	ldh	r2,0(r18)
 100ddac:	14c00226 	beq	r2,r19,100ddb8 <_fwalk+0x78>
 100ddb0:	a83ee83a 	callr	r21
 100ddb4:	b8aeb03a 	or	r23,r23,r2
 100ddb8:	84001a04 	addi	r16,r16,104
 100ddbc:	94801a04 	addi	r18,r18,104
 100ddc0:	8cfff51e 	bne	r17,r19,100dd98 <__alt_data_end+0xff00dd98>
 100ddc4:	a5000017 	ldw	r20,0(r20)
 100ddc8:	a03fed1e 	bne	r20,zero,100dd80 <__alt_data_end+0xff00dd80>
 100ddcc:	b805883a 	mov	r2,r23
 100ddd0:	dfc00817 	ldw	ra,32(sp)
 100ddd4:	ddc00717 	ldw	r23,28(sp)
 100ddd8:	dd800617 	ldw	r22,24(sp)
 100dddc:	dd400517 	ldw	r21,20(sp)
 100dde0:	dd000417 	ldw	r20,16(sp)
 100dde4:	dcc00317 	ldw	r19,12(sp)
 100dde8:	dc800217 	ldw	r18,8(sp)
 100ddec:	dc400117 	ldw	r17,4(sp)
 100ddf0:	dc000017 	ldw	r16,0(sp)
 100ddf4:	dec00904 	addi	sp,sp,36
 100ddf8:	f800283a 	ret
 100ddfc:	002f883a 	mov	r23,zero
 100de00:	003ff206 	br	100ddcc <__alt_data_end+0xff00ddcc>

0100de04 <_fwalk_reent>:
 100de04:	defff704 	addi	sp,sp,-36
 100de08:	dd000415 	stw	r20,16(sp)
 100de0c:	dfc00815 	stw	ra,32(sp)
 100de10:	ddc00715 	stw	r23,28(sp)
 100de14:	dd800615 	stw	r22,24(sp)
 100de18:	dd400515 	stw	r21,20(sp)
 100de1c:	dcc00315 	stw	r19,12(sp)
 100de20:	dc800215 	stw	r18,8(sp)
 100de24:	dc400115 	stw	r17,4(sp)
 100de28:	dc000015 	stw	r16,0(sp)
 100de2c:	2500b804 	addi	r20,r4,736
 100de30:	a0002326 	beq	r20,zero,100dec0 <_fwalk_reent+0xbc>
 100de34:	282b883a 	mov	r21,r5
 100de38:	2027883a 	mov	r19,r4
 100de3c:	002f883a 	mov	r23,zero
 100de40:	05800044 	movi	r22,1
 100de44:	04bfffc4 	movi	r18,-1
 100de48:	a4400117 	ldw	r17,4(r20)
 100de4c:	a4000217 	ldw	r16,8(r20)
 100de50:	8c7fffc4 	addi	r17,r17,-1
 100de54:	88000c16 	blt	r17,zero,100de88 <_fwalk_reent+0x84>
 100de58:	84000304 	addi	r16,r16,12
 100de5c:	8080000b 	ldhu	r2,0(r16)
 100de60:	8c7fffc4 	addi	r17,r17,-1
 100de64:	817ffd04 	addi	r5,r16,-12
 100de68:	b080052e 	bgeu	r22,r2,100de80 <_fwalk_reent+0x7c>
 100de6c:	8080008f 	ldh	r2,2(r16)
 100de70:	9809883a 	mov	r4,r19
 100de74:	14800226 	beq	r2,r18,100de80 <_fwalk_reent+0x7c>
 100de78:	a83ee83a 	callr	r21
 100de7c:	b8aeb03a 	or	r23,r23,r2
 100de80:	84001a04 	addi	r16,r16,104
 100de84:	8cbff51e 	bne	r17,r18,100de5c <__alt_data_end+0xff00de5c>
 100de88:	a5000017 	ldw	r20,0(r20)
 100de8c:	a03fee1e 	bne	r20,zero,100de48 <__alt_data_end+0xff00de48>
 100de90:	b805883a 	mov	r2,r23
 100de94:	dfc00817 	ldw	ra,32(sp)
 100de98:	ddc00717 	ldw	r23,28(sp)
 100de9c:	dd800617 	ldw	r22,24(sp)
 100dea0:	dd400517 	ldw	r21,20(sp)
 100dea4:	dd000417 	ldw	r20,16(sp)
 100dea8:	dcc00317 	ldw	r19,12(sp)
 100deac:	dc800217 	ldw	r18,8(sp)
 100deb0:	dc400117 	ldw	r17,4(sp)
 100deb4:	dc000017 	ldw	r16,0(sp)
 100deb8:	dec00904 	addi	sp,sp,36
 100debc:	f800283a 	ret
 100dec0:	002f883a 	mov	r23,zero
 100dec4:	003ff206 	br	100de90 <__alt_data_end+0xff00de90>

0100dec8 <_setlocale_r>:
 100dec8:	30001b26 	beq	r6,zero,100df38 <_setlocale_r+0x70>
 100decc:	014040b4 	movhi	r5,258
 100ded0:	defffe04 	addi	sp,sp,-8
 100ded4:	296bb404 	addi	r5,r5,-20784
 100ded8:	3009883a 	mov	r4,r6
 100dedc:	dc000015 	stw	r16,0(sp)
 100dee0:	dfc00115 	stw	ra,4(sp)
 100dee4:	3021883a 	mov	r16,r6
 100dee8:	10092600 	call	1009260 <strcmp>
 100deec:	1000061e 	bne	r2,zero,100df08 <_setlocale_r+0x40>
 100def0:	008040b4 	movhi	r2,258
 100def4:	10a9d504 	addi	r2,r2,-22700
 100def8:	dfc00117 	ldw	ra,4(sp)
 100defc:	dc000017 	ldw	r16,0(sp)
 100df00:	dec00204 	addi	sp,sp,8
 100df04:	f800283a 	ret
 100df08:	014040b4 	movhi	r5,258
 100df0c:	2969d504 	addi	r5,r5,-22700
 100df10:	8009883a 	mov	r4,r16
 100df14:	10092600 	call	1009260 <strcmp>
 100df18:	103ff526 	beq	r2,zero,100def0 <__alt_data_end+0xff00def0>
 100df1c:	014040b4 	movhi	r5,258
 100df20:	2969c804 	addi	r5,r5,-22752
 100df24:	8009883a 	mov	r4,r16
 100df28:	10092600 	call	1009260 <strcmp>
 100df2c:	103ff026 	beq	r2,zero,100def0 <__alt_data_end+0xff00def0>
 100df30:	0005883a 	mov	r2,zero
 100df34:	003ff006 	br	100def8 <__alt_data_end+0xff00def8>
 100df38:	008040b4 	movhi	r2,258
 100df3c:	10a9d504 	addi	r2,r2,-22700
 100df40:	f800283a 	ret

0100df44 <__locale_charset>:
 100df44:	008040b4 	movhi	r2,258
 100df48:	10ad9904 	addi	r2,r2,-18844
 100df4c:	f800283a 	ret

0100df50 <__locale_mb_cur_max>:
 100df50:	008040b4 	movhi	r2,258
 100df54:	10b34304 	addi	r2,r2,-13044
 100df58:	10800017 	ldw	r2,0(r2)
 100df5c:	f800283a 	ret

0100df60 <__locale_msgcharset>:
 100df60:	008040b4 	movhi	r2,258
 100df64:	10ad9104 	addi	r2,r2,-18876
 100df68:	f800283a 	ret

0100df6c <__locale_cjk_lang>:
 100df6c:	0005883a 	mov	r2,zero
 100df70:	f800283a 	ret

0100df74 <_localeconv_r>:
 100df74:	008040b4 	movhi	r2,258
 100df78:	10ada104 	addi	r2,r2,-18812
 100df7c:	f800283a 	ret

0100df80 <setlocale>:
 100df80:	008040b4 	movhi	r2,258
 100df84:	10b34204 	addi	r2,r2,-13048
 100df88:	280d883a 	mov	r6,r5
 100df8c:	200b883a 	mov	r5,r4
 100df90:	11000017 	ldw	r4,0(r2)
 100df94:	100dec81 	jmpi	100dec8 <_setlocale_r>

0100df98 <localeconv>:
 100df98:	008040b4 	movhi	r2,258
 100df9c:	10ada104 	addi	r2,r2,-18812
 100dfa0:	f800283a 	ret

0100dfa4 <_malloc_r>:
 100dfa4:	defff504 	addi	sp,sp,-44
 100dfa8:	dc800315 	stw	r18,12(sp)
 100dfac:	dfc00a15 	stw	ra,40(sp)
 100dfb0:	df000915 	stw	fp,36(sp)
 100dfb4:	ddc00815 	stw	r23,32(sp)
 100dfb8:	dd800715 	stw	r22,28(sp)
 100dfbc:	dd400615 	stw	r21,24(sp)
 100dfc0:	dd000515 	stw	r20,20(sp)
 100dfc4:	dcc00415 	stw	r19,16(sp)
 100dfc8:	dc400215 	stw	r17,8(sp)
 100dfcc:	dc000115 	stw	r16,4(sp)
 100dfd0:	288002c4 	addi	r2,r5,11
 100dfd4:	00c00584 	movi	r3,22
 100dfd8:	2025883a 	mov	r18,r4
 100dfdc:	18807f2e 	bgeu	r3,r2,100e1dc <_malloc_r+0x238>
 100dfe0:	047ffe04 	movi	r17,-8
 100dfe4:	1462703a 	and	r17,r2,r17
 100dfe8:	8800a316 	blt	r17,zero,100e278 <_malloc_r+0x2d4>
 100dfec:	8940a236 	bltu	r17,r5,100e278 <_malloc_r+0x2d4>
 100dff0:	1017d440 	call	1017d44 <__malloc_lock>
 100dff4:	00807dc4 	movi	r2,503
 100dff8:	1441e92e 	bgeu	r2,r17,100e7a0 <_malloc_r+0x7fc>
 100dffc:	8804d27a 	srli	r2,r17,9
 100e000:	1000a126 	beq	r2,zero,100e288 <_malloc_r+0x2e4>
 100e004:	00c00104 	movi	r3,4
 100e008:	18811e36 	bltu	r3,r2,100e484 <_malloc_r+0x4e0>
 100e00c:	8804d1ba 	srli	r2,r17,6
 100e010:	12000e44 	addi	r8,r2,57
 100e014:	11c00e04 	addi	r7,r2,56
 100e018:	4209883a 	add	r4,r8,r8
 100e01c:	04c040b4 	movhi	r19,258
 100e020:	2109883a 	add	r4,r4,r4
 100e024:	9cedaf04 	addi	r19,r19,-18756
 100e028:	2109883a 	add	r4,r4,r4
 100e02c:	9909883a 	add	r4,r19,r4
 100e030:	24000117 	ldw	r16,4(r4)
 100e034:	213ffe04 	addi	r4,r4,-8
 100e038:	24009726 	beq	r4,r16,100e298 <_malloc_r+0x2f4>
 100e03c:	80800117 	ldw	r2,4(r16)
 100e040:	01bfff04 	movi	r6,-4
 100e044:	014003c4 	movi	r5,15
 100e048:	1184703a 	and	r2,r2,r6
 100e04c:	1447c83a 	sub	r3,r2,r17
 100e050:	28c00716 	blt	r5,r3,100e070 <_malloc_r+0xcc>
 100e054:	1800920e 	bge	r3,zero,100e2a0 <_malloc_r+0x2fc>
 100e058:	84000317 	ldw	r16,12(r16)
 100e05c:	24008e26 	beq	r4,r16,100e298 <_malloc_r+0x2f4>
 100e060:	80800117 	ldw	r2,4(r16)
 100e064:	1184703a 	and	r2,r2,r6
 100e068:	1447c83a 	sub	r3,r2,r17
 100e06c:	28fff90e 	bge	r5,r3,100e054 <__alt_data_end+0xff00e054>
 100e070:	3809883a 	mov	r4,r7
 100e074:	018040b4 	movhi	r6,258
 100e078:	9c000417 	ldw	r16,16(r19)
 100e07c:	31adaf04 	addi	r6,r6,-18756
 100e080:	32000204 	addi	r8,r6,8
 100e084:	82013426 	beq	r16,r8,100e558 <_malloc_r+0x5b4>
 100e088:	80c00117 	ldw	r3,4(r16)
 100e08c:	00bfff04 	movi	r2,-4
 100e090:	188e703a 	and	r7,r3,r2
 100e094:	3c45c83a 	sub	r2,r7,r17
 100e098:	00c003c4 	movi	r3,15
 100e09c:	18811f16 	blt	r3,r2,100e51c <_malloc_r+0x578>
 100e0a0:	32000515 	stw	r8,20(r6)
 100e0a4:	32000415 	stw	r8,16(r6)
 100e0a8:	10007f0e 	bge	r2,zero,100e2a8 <_malloc_r+0x304>
 100e0ac:	00807fc4 	movi	r2,511
 100e0b0:	11c0fd36 	bltu	r2,r7,100e4a8 <_malloc_r+0x504>
 100e0b4:	3806d0fa 	srli	r3,r7,3
 100e0b8:	01c00044 	movi	r7,1
 100e0bc:	30800117 	ldw	r2,4(r6)
 100e0c0:	19400044 	addi	r5,r3,1
 100e0c4:	294b883a 	add	r5,r5,r5
 100e0c8:	1807d0ba 	srai	r3,r3,2
 100e0cc:	294b883a 	add	r5,r5,r5
 100e0d0:	294b883a 	add	r5,r5,r5
 100e0d4:	298b883a 	add	r5,r5,r6
 100e0d8:	38c6983a 	sll	r3,r7,r3
 100e0dc:	29c00017 	ldw	r7,0(r5)
 100e0e0:	2a7ffe04 	addi	r9,r5,-8
 100e0e4:	1886b03a 	or	r3,r3,r2
 100e0e8:	82400315 	stw	r9,12(r16)
 100e0ec:	81c00215 	stw	r7,8(r16)
 100e0f0:	30c00115 	stw	r3,4(r6)
 100e0f4:	2c000015 	stw	r16,0(r5)
 100e0f8:	3c000315 	stw	r16,12(r7)
 100e0fc:	2005d0ba 	srai	r2,r4,2
 100e100:	01400044 	movi	r5,1
 100e104:	288a983a 	sll	r5,r5,r2
 100e108:	19406f36 	bltu	r3,r5,100e2c8 <_malloc_r+0x324>
 100e10c:	28c4703a 	and	r2,r5,r3
 100e110:	10000a1e 	bne	r2,zero,100e13c <_malloc_r+0x198>
 100e114:	00bfff04 	movi	r2,-4
 100e118:	294b883a 	add	r5,r5,r5
 100e11c:	2088703a 	and	r4,r4,r2
 100e120:	28c4703a 	and	r2,r5,r3
 100e124:	21000104 	addi	r4,r4,4
 100e128:	1000041e 	bne	r2,zero,100e13c <_malloc_r+0x198>
 100e12c:	294b883a 	add	r5,r5,r5
 100e130:	28c4703a 	and	r2,r5,r3
 100e134:	21000104 	addi	r4,r4,4
 100e138:	103ffc26 	beq	r2,zero,100e12c <__alt_data_end+0xff00e12c>
 100e13c:	02bfff04 	movi	r10,-4
 100e140:	024003c4 	movi	r9,15
 100e144:	21800044 	addi	r6,r4,1
 100e148:	318d883a 	add	r6,r6,r6
 100e14c:	318d883a 	add	r6,r6,r6
 100e150:	318d883a 	add	r6,r6,r6
 100e154:	998d883a 	add	r6,r19,r6
 100e158:	333ffe04 	addi	r12,r6,-8
 100e15c:	2017883a 	mov	r11,r4
 100e160:	31800104 	addi	r6,r6,4
 100e164:	34000017 	ldw	r16,0(r6)
 100e168:	31fffd04 	addi	r7,r6,-12
 100e16c:	81c0041e 	bne	r16,r7,100e180 <_malloc_r+0x1dc>
 100e170:	0000fb06 	br	100e560 <_malloc_r+0x5bc>
 100e174:	1801030e 	bge	r3,zero,100e584 <_malloc_r+0x5e0>
 100e178:	84000317 	ldw	r16,12(r16)
 100e17c:	81c0f826 	beq	r16,r7,100e560 <_malloc_r+0x5bc>
 100e180:	80800117 	ldw	r2,4(r16)
 100e184:	1284703a 	and	r2,r2,r10
 100e188:	1447c83a 	sub	r3,r2,r17
 100e18c:	48fff90e 	bge	r9,r3,100e174 <__alt_data_end+0xff00e174>
 100e190:	80800317 	ldw	r2,12(r16)
 100e194:	81000217 	ldw	r4,8(r16)
 100e198:	89400054 	ori	r5,r17,1
 100e19c:	81400115 	stw	r5,4(r16)
 100e1a0:	20800315 	stw	r2,12(r4)
 100e1a4:	11000215 	stw	r4,8(r2)
 100e1a8:	8463883a 	add	r17,r16,r17
 100e1ac:	9c400515 	stw	r17,20(r19)
 100e1b0:	9c400415 	stw	r17,16(r19)
 100e1b4:	18800054 	ori	r2,r3,1
 100e1b8:	88800115 	stw	r2,4(r17)
 100e1bc:	8a000315 	stw	r8,12(r17)
 100e1c0:	8a000215 	stw	r8,8(r17)
 100e1c4:	88e3883a 	add	r17,r17,r3
 100e1c8:	88c00015 	stw	r3,0(r17)
 100e1cc:	9009883a 	mov	r4,r18
 100e1d0:	1017d680 	call	1017d68 <__malloc_unlock>
 100e1d4:	80800204 	addi	r2,r16,8
 100e1d8:	00001b06 	br	100e248 <_malloc_r+0x2a4>
 100e1dc:	04400404 	movi	r17,16
 100e1e0:	89402536 	bltu	r17,r5,100e278 <_malloc_r+0x2d4>
 100e1e4:	1017d440 	call	1017d44 <__malloc_lock>
 100e1e8:	00800184 	movi	r2,6
 100e1ec:	01000084 	movi	r4,2
 100e1f0:	04c040b4 	movhi	r19,258
 100e1f4:	1085883a 	add	r2,r2,r2
 100e1f8:	9cedaf04 	addi	r19,r19,-18756
 100e1fc:	1085883a 	add	r2,r2,r2
 100e200:	9885883a 	add	r2,r19,r2
 100e204:	14000117 	ldw	r16,4(r2)
 100e208:	10fffe04 	addi	r3,r2,-8
 100e20c:	80c0d926 	beq	r16,r3,100e574 <_malloc_r+0x5d0>
 100e210:	80c00117 	ldw	r3,4(r16)
 100e214:	81000317 	ldw	r4,12(r16)
 100e218:	00bfff04 	movi	r2,-4
 100e21c:	1884703a 	and	r2,r3,r2
 100e220:	81400217 	ldw	r5,8(r16)
 100e224:	8085883a 	add	r2,r16,r2
 100e228:	10c00117 	ldw	r3,4(r2)
 100e22c:	29000315 	stw	r4,12(r5)
 100e230:	21400215 	stw	r5,8(r4)
 100e234:	18c00054 	ori	r3,r3,1
 100e238:	10c00115 	stw	r3,4(r2)
 100e23c:	9009883a 	mov	r4,r18
 100e240:	1017d680 	call	1017d68 <__malloc_unlock>
 100e244:	80800204 	addi	r2,r16,8
 100e248:	dfc00a17 	ldw	ra,40(sp)
 100e24c:	df000917 	ldw	fp,36(sp)
 100e250:	ddc00817 	ldw	r23,32(sp)
 100e254:	dd800717 	ldw	r22,28(sp)
 100e258:	dd400617 	ldw	r21,24(sp)
 100e25c:	dd000517 	ldw	r20,20(sp)
 100e260:	dcc00417 	ldw	r19,16(sp)
 100e264:	dc800317 	ldw	r18,12(sp)
 100e268:	dc400217 	ldw	r17,8(sp)
 100e26c:	dc000117 	ldw	r16,4(sp)
 100e270:	dec00b04 	addi	sp,sp,44
 100e274:	f800283a 	ret
 100e278:	00800304 	movi	r2,12
 100e27c:	90800015 	stw	r2,0(r18)
 100e280:	0005883a 	mov	r2,zero
 100e284:	003ff006 	br	100e248 <__alt_data_end+0xff00e248>
 100e288:	01002004 	movi	r4,128
 100e28c:	02001004 	movi	r8,64
 100e290:	01c00fc4 	movi	r7,63
 100e294:	003f6106 	br	100e01c <__alt_data_end+0xff00e01c>
 100e298:	4009883a 	mov	r4,r8
 100e29c:	003f7506 	br	100e074 <__alt_data_end+0xff00e074>
 100e2a0:	81000317 	ldw	r4,12(r16)
 100e2a4:	003fde06 	br	100e220 <__alt_data_end+0xff00e220>
 100e2a8:	81c5883a 	add	r2,r16,r7
 100e2ac:	11400117 	ldw	r5,4(r2)
 100e2b0:	9009883a 	mov	r4,r18
 100e2b4:	29400054 	ori	r5,r5,1
 100e2b8:	11400115 	stw	r5,4(r2)
 100e2bc:	1017d680 	call	1017d68 <__malloc_unlock>
 100e2c0:	80800204 	addi	r2,r16,8
 100e2c4:	003fe006 	br	100e248 <__alt_data_end+0xff00e248>
 100e2c8:	9c000217 	ldw	r16,8(r19)
 100e2cc:	00bfff04 	movi	r2,-4
 100e2d0:	85800117 	ldw	r22,4(r16)
 100e2d4:	b0ac703a 	and	r22,r22,r2
 100e2d8:	b4400336 	bltu	r22,r17,100e2e8 <_malloc_r+0x344>
 100e2dc:	b445c83a 	sub	r2,r22,r17
 100e2e0:	00c003c4 	movi	r3,15
 100e2e4:	18805d16 	blt	r3,r2,100e45c <_malloc_r+0x4b8>
 100e2e8:	05c040b4 	movhi	r23,258
 100e2ec:	008040b4 	movhi	r2,258
 100e2f0:	10ba5f04 	addi	r2,r2,-5764
 100e2f4:	bdf34404 	addi	r23,r23,-13040
 100e2f8:	15400017 	ldw	r21,0(r2)
 100e2fc:	b8c00017 	ldw	r3,0(r23)
 100e300:	00bfffc4 	movi	r2,-1
 100e304:	858d883a 	add	r6,r16,r22
 100e308:	8d6b883a 	add	r21,r17,r21
 100e30c:	1880ea26 	beq	r3,r2,100e6b8 <_malloc_r+0x714>
 100e310:	ad4403c4 	addi	r21,r21,4111
 100e314:	00bc0004 	movi	r2,-4096
 100e318:	a8aa703a 	and	r21,r21,r2
 100e31c:	a80b883a 	mov	r5,r21
 100e320:	9009883a 	mov	r4,r18
 100e324:	d9800015 	stw	r6,0(sp)
 100e328:	100ffc40 	call	100ffc4 <_sbrk_r>
 100e32c:	1029883a 	mov	r20,r2
 100e330:	00bfffc4 	movi	r2,-1
 100e334:	d9800017 	ldw	r6,0(sp)
 100e338:	a080e826 	beq	r20,r2,100e6dc <_malloc_r+0x738>
 100e33c:	a180a636 	bltu	r20,r6,100e5d8 <_malloc_r+0x634>
 100e340:	070060b4 	movhi	fp,386
 100e344:	e73b3a04 	addi	fp,fp,-4888
 100e348:	e0800017 	ldw	r2,0(fp)
 100e34c:	a887883a 	add	r3,r21,r2
 100e350:	e0c00015 	stw	r3,0(fp)
 100e354:	3500e626 	beq	r6,r20,100e6f0 <_malloc_r+0x74c>
 100e358:	b9000017 	ldw	r4,0(r23)
 100e35c:	00bfffc4 	movi	r2,-1
 100e360:	2080ee26 	beq	r4,r2,100e71c <_malloc_r+0x778>
 100e364:	a185c83a 	sub	r2,r20,r6
 100e368:	10c5883a 	add	r2,r2,r3
 100e36c:	e0800015 	stw	r2,0(fp)
 100e370:	a0c001cc 	andi	r3,r20,7
 100e374:	1800bc26 	beq	r3,zero,100e668 <_malloc_r+0x6c4>
 100e378:	a0e9c83a 	sub	r20,r20,r3
 100e37c:	00840204 	movi	r2,4104
 100e380:	a5000204 	addi	r20,r20,8
 100e384:	10c7c83a 	sub	r3,r2,r3
 100e388:	a545883a 	add	r2,r20,r21
 100e38c:	1083ffcc 	andi	r2,r2,4095
 100e390:	18abc83a 	sub	r21,r3,r2
 100e394:	a80b883a 	mov	r5,r21
 100e398:	9009883a 	mov	r4,r18
 100e39c:	100ffc40 	call	100ffc4 <_sbrk_r>
 100e3a0:	00ffffc4 	movi	r3,-1
 100e3a4:	10c0e126 	beq	r2,r3,100e72c <_malloc_r+0x788>
 100e3a8:	1505c83a 	sub	r2,r2,r20
 100e3ac:	1545883a 	add	r2,r2,r21
 100e3b0:	10800054 	ori	r2,r2,1
 100e3b4:	e0c00017 	ldw	r3,0(fp)
 100e3b8:	9d000215 	stw	r20,8(r19)
 100e3bc:	a0800115 	stw	r2,4(r20)
 100e3c0:	a8c7883a 	add	r3,r21,r3
 100e3c4:	e0c00015 	stw	r3,0(fp)
 100e3c8:	84c00e26 	beq	r16,r19,100e404 <_malloc_r+0x460>
 100e3cc:	018003c4 	movi	r6,15
 100e3d0:	3580a72e 	bgeu	r6,r22,100e670 <_malloc_r+0x6cc>
 100e3d4:	81400117 	ldw	r5,4(r16)
 100e3d8:	013ffe04 	movi	r4,-8
 100e3dc:	b0bffd04 	addi	r2,r22,-12
 100e3e0:	1104703a 	and	r2,r2,r4
 100e3e4:	2900004c 	andi	r4,r5,1
 100e3e8:	2088b03a 	or	r4,r4,r2
 100e3ec:	81000115 	stw	r4,4(r16)
 100e3f0:	01400144 	movi	r5,5
 100e3f4:	8089883a 	add	r4,r16,r2
 100e3f8:	21400115 	stw	r5,4(r4)
 100e3fc:	21400215 	stw	r5,8(r4)
 100e400:	3080cd36 	bltu	r6,r2,100e738 <_malloc_r+0x794>
 100e404:	008040b4 	movhi	r2,258
 100e408:	10ba5e04 	addi	r2,r2,-5768
 100e40c:	11000017 	ldw	r4,0(r2)
 100e410:	20c0012e 	bgeu	r4,r3,100e418 <_malloc_r+0x474>
 100e414:	10c00015 	stw	r3,0(r2)
 100e418:	008040b4 	movhi	r2,258
 100e41c:	10ba5d04 	addi	r2,r2,-5772
 100e420:	11000017 	ldw	r4,0(r2)
 100e424:	9c000217 	ldw	r16,8(r19)
 100e428:	20c0012e 	bgeu	r4,r3,100e430 <_malloc_r+0x48c>
 100e42c:	10c00015 	stw	r3,0(r2)
 100e430:	80c00117 	ldw	r3,4(r16)
 100e434:	00bfff04 	movi	r2,-4
 100e438:	1886703a 	and	r3,r3,r2
 100e43c:	1c45c83a 	sub	r2,r3,r17
 100e440:	1c400236 	bltu	r3,r17,100e44c <_malloc_r+0x4a8>
 100e444:	00c003c4 	movi	r3,15
 100e448:	18800416 	blt	r3,r2,100e45c <_malloc_r+0x4b8>
 100e44c:	9009883a 	mov	r4,r18
 100e450:	1017d680 	call	1017d68 <__malloc_unlock>
 100e454:	0005883a 	mov	r2,zero
 100e458:	003f7b06 	br	100e248 <__alt_data_end+0xff00e248>
 100e45c:	88c00054 	ori	r3,r17,1
 100e460:	80c00115 	stw	r3,4(r16)
 100e464:	8463883a 	add	r17,r16,r17
 100e468:	10800054 	ori	r2,r2,1
 100e46c:	9c400215 	stw	r17,8(r19)
 100e470:	88800115 	stw	r2,4(r17)
 100e474:	9009883a 	mov	r4,r18
 100e478:	1017d680 	call	1017d68 <__malloc_unlock>
 100e47c:	80800204 	addi	r2,r16,8
 100e480:	003f7106 	br	100e248 <__alt_data_end+0xff00e248>
 100e484:	00c00504 	movi	r3,20
 100e488:	18804a2e 	bgeu	r3,r2,100e5b4 <_malloc_r+0x610>
 100e48c:	00c01504 	movi	r3,84
 100e490:	18806e36 	bltu	r3,r2,100e64c <_malloc_r+0x6a8>
 100e494:	8804d33a 	srli	r2,r17,12
 100e498:	12001bc4 	addi	r8,r2,111
 100e49c:	11c01b84 	addi	r7,r2,110
 100e4a0:	4209883a 	add	r4,r8,r8
 100e4a4:	003edd06 	br	100e01c <__alt_data_end+0xff00e01c>
 100e4a8:	3804d27a 	srli	r2,r7,9
 100e4ac:	00c00104 	movi	r3,4
 100e4b0:	1880442e 	bgeu	r3,r2,100e5c4 <_malloc_r+0x620>
 100e4b4:	00c00504 	movi	r3,20
 100e4b8:	18808136 	bltu	r3,r2,100e6c0 <_malloc_r+0x71c>
 100e4bc:	11401704 	addi	r5,r2,92
 100e4c0:	10c016c4 	addi	r3,r2,91
 100e4c4:	294b883a 	add	r5,r5,r5
 100e4c8:	294b883a 	add	r5,r5,r5
 100e4cc:	294b883a 	add	r5,r5,r5
 100e4d0:	994b883a 	add	r5,r19,r5
 100e4d4:	28800017 	ldw	r2,0(r5)
 100e4d8:	018040b4 	movhi	r6,258
 100e4dc:	297ffe04 	addi	r5,r5,-8
 100e4e0:	31adaf04 	addi	r6,r6,-18756
 100e4e4:	28806526 	beq	r5,r2,100e67c <_malloc_r+0x6d8>
 100e4e8:	01bfff04 	movi	r6,-4
 100e4ec:	10c00117 	ldw	r3,4(r2)
 100e4f0:	1986703a 	and	r3,r3,r6
 100e4f4:	38c0022e 	bgeu	r7,r3,100e500 <_malloc_r+0x55c>
 100e4f8:	10800217 	ldw	r2,8(r2)
 100e4fc:	28bffb1e 	bne	r5,r2,100e4ec <__alt_data_end+0xff00e4ec>
 100e500:	11400317 	ldw	r5,12(r2)
 100e504:	98c00117 	ldw	r3,4(r19)
 100e508:	81400315 	stw	r5,12(r16)
 100e50c:	80800215 	stw	r2,8(r16)
 100e510:	2c000215 	stw	r16,8(r5)
 100e514:	14000315 	stw	r16,12(r2)
 100e518:	003ef806 	br	100e0fc <__alt_data_end+0xff00e0fc>
 100e51c:	88c00054 	ori	r3,r17,1
 100e520:	80c00115 	stw	r3,4(r16)
 100e524:	8463883a 	add	r17,r16,r17
 100e528:	34400515 	stw	r17,20(r6)
 100e52c:	34400415 	stw	r17,16(r6)
 100e530:	10c00054 	ori	r3,r2,1
 100e534:	8a000315 	stw	r8,12(r17)
 100e538:	8a000215 	stw	r8,8(r17)
 100e53c:	88c00115 	stw	r3,4(r17)
 100e540:	88a3883a 	add	r17,r17,r2
 100e544:	88800015 	stw	r2,0(r17)
 100e548:	9009883a 	mov	r4,r18
 100e54c:	1017d680 	call	1017d68 <__malloc_unlock>
 100e550:	80800204 	addi	r2,r16,8
 100e554:	003f3c06 	br	100e248 <__alt_data_end+0xff00e248>
 100e558:	30c00117 	ldw	r3,4(r6)
 100e55c:	003ee706 	br	100e0fc <__alt_data_end+0xff00e0fc>
 100e560:	5ac00044 	addi	r11,r11,1
 100e564:	588000cc 	andi	r2,r11,3
 100e568:	31800204 	addi	r6,r6,8
 100e56c:	103efd1e 	bne	r2,zero,100e164 <__alt_data_end+0xff00e164>
 100e570:	00002406 	br	100e604 <_malloc_r+0x660>
 100e574:	14000317 	ldw	r16,12(r2)
 100e578:	143f251e 	bne	r2,r16,100e210 <__alt_data_end+0xff00e210>
 100e57c:	21000084 	addi	r4,r4,2
 100e580:	003ebc06 	br	100e074 <__alt_data_end+0xff00e074>
 100e584:	8085883a 	add	r2,r16,r2
 100e588:	10c00117 	ldw	r3,4(r2)
 100e58c:	81000317 	ldw	r4,12(r16)
 100e590:	81400217 	ldw	r5,8(r16)
 100e594:	18c00054 	ori	r3,r3,1
 100e598:	10c00115 	stw	r3,4(r2)
 100e59c:	29000315 	stw	r4,12(r5)
 100e5a0:	21400215 	stw	r5,8(r4)
 100e5a4:	9009883a 	mov	r4,r18
 100e5a8:	1017d680 	call	1017d68 <__malloc_unlock>
 100e5ac:	80800204 	addi	r2,r16,8
 100e5b0:	003f2506 	br	100e248 <__alt_data_end+0xff00e248>
 100e5b4:	12001704 	addi	r8,r2,92
 100e5b8:	11c016c4 	addi	r7,r2,91
 100e5bc:	4209883a 	add	r4,r8,r8
 100e5c0:	003e9606 	br	100e01c <__alt_data_end+0xff00e01c>
 100e5c4:	3804d1ba 	srli	r2,r7,6
 100e5c8:	11400e44 	addi	r5,r2,57
 100e5cc:	10c00e04 	addi	r3,r2,56
 100e5d0:	294b883a 	add	r5,r5,r5
 100e5d4:	003fbc06 	br	100e4c8 <__alt_data_end+0xff00e4c8>
 100e5d8:	84ff5926 	beq	r16,r19,100e340 <__alt_data_end+0xff00e340>
 100e5dc:	008040b4 	movhi	r2,258
 100e5e0:	10adaf04 	addi	r2,r2,-18756
 100e5e4:	14000217 	ldw	r16,8(r2)
 100e5e8:	00bfff04 	movi	r2,-4
 100e5ec:	80c00117 	ldw	r3,4(r16)
 100e5f0:	1886703a 	and	r3,r3,r2
 100e5f4:	003f9106 	br	100e43c <__alt_data_end+0xff00e43c>
 100e5f8:	60800217 	ldw	r2,8(r12)
 100e5fc:	213fffc4 	addi	r4,r4,-1
 100e600:	1300651e 	bne	r2,r12,100e798 <_malloc_r+0x7f4>
 100e604:	208000cc 	andi	r2,r4,3
 100e608:	633ffe04 	addi	r12,r12,-8
 100e60c:	103ffa1e 	bne	r2,zero,100e5f8 <__alt_data_end+0xff00e5f8>
 100e610:	98800117 	ldw	r2,4(r19)
 100e614:	0146303a 	nor	r3,zero,r5
 100e618:	1884703a 	and	r2,r3,r2
 100e61c:	98800115 	stw	r2,4(r19)
 100e620:	294b883a 	add	r5,r5,r5
 100e624:	117f2836 	bltu	r2,r5,100e2c8 <__alt_data_end+0xff00e2c8>
 100e628:	283f2726 	beq	r5,zero,100e2c8 <__alt_data_end+0xff00e2c8>
 100e62c:	2886703a 	and	r3,r5,r2
 100e630:	5809883a 	mov	r4,r11
 100e634:	183ec31e 	bne	r3,zero,100e144 <__alt_data_end+0xff00e144>
 100e638:	294b883a 	add	r5,r5,r5
 100e63c:	2886703a 	and	r3,r5,r2
 100e640:	21000104 	addi	r4,r4,4
 100e644:	183ffc26 	beq	r3,zero,100e638 <__alt_data_end+0xff00e638>
 100e648:	003ebe06 	br	100e144 <__alt_data_end+0xff00e144>
 100e64c:	00c05504 	movi	r3,340
 100e650:	18801236 	bltu	r3,r2,100e69c <_malloc_r+0x6f8>
 100e654:	8804d3fa 	srli	r2,r17,15
 100e658:	12001e04 	addi	r8,r2,120
 100e65c:	11c01dc4 	addi	r7,r2,119
 100e660:	4209883a 	add	r4,r8,r8
 100e664:	003e6d06 	br	100e01c <__alt_data_end+0xff00e01c>
 100e668:	00c40004 	movi	r3,4096
 100e66c:	003f4606 	br	100e388 <__alt_data_end+0xff00e388>
 100e670:	00800044 	movi	r2,1
 100e674:	a0800115 	stw	r2,4(r20)
 100e678:	003f7406 	br	100e44c <__alt_data_end+0xff00e44c>
 100e67c:	1805d0ba 	srai	r2,r3,2
 100e680:	01c00044 	movi	r7,1
 100e684:	30c00117 	ldw	r3,4(r6)
 100e688:	388e983a 	sll	r7,r7,r2
 100e68c:	2805883a 	mov	r2,r5
 100e690:	38c6b03a 	or	r3,r7,r3
 100e694:	30c00115 	stw	r3,4(r6)
 100e698:	003f9b06 	br	100e508 <__alt_data_end+0xff00e508>
 100e69c:	00c15504 	movi	r3,1364
 100e6a0:	18801a36 	bltu	r3,r2,100e70c <_malloc_r+0x768>
 100e6a4:	8804d4ba 	srli	r2,r17,18
 100e6a8:	12001f44 	addi	r8,r2,125
 100e6ac:	11c01f04 	addi	r7,r2,124
 100e6b0:	4209883a 	add	r4,r8,r8
 100e6b4:	003e5906 	br	100e01c <__alt_data_end+0xff00e01c>
 100e6b8:	ad400404 	addi	r21,r21,16
 100e6bc:	003f1706 	br	100e31c <__alt_data_end+0xff00e31c>
 100e6c0:	00c01504 	movi	r3,84
 100e6c4:	18802336 	bltu	r3,r2,100e754 <_malloc_r+0x7b0>
 100e6c8:	3804d33a 	srli	r2,r7,12
 100e6cc:	11401bc4 	addi	r5,r2,111
 100e6d0:	10c01b84 	addi	r3,r2,110
 100e6d4:	294b883a 	add	r5,r5,r5
 100e6d8:	003f7b06 	br	100e4c8 <__alt_data_end+0xff00e4c8>
 100e6dc:	9c000217 	ldw	r16,8(r19)
 100e6e0:	00bfff04 	movi	r2,-4
 100e6e4:	80c00117 	ldw	r3,4(r16)
 100e6e8:	1886703a 	and	r3,r3,r2
 100e6ec:	003f5306 	br	100e43c <__alt_data_end+0xff00e43c>
 100e6f0:	3083ffcc 	andi	r2,r6,4095
 100e6f4:	103f181e 	bne	r2,zero,100e358 <__alt_data_end+0xff00e358>
 100e6f8:	99000217 	ldw	r4,8(r19)
 100e6fc:	b545883a 	add	r2,r22,r21
 100e700:	10800054 	ori	r2,r2,1
 100e704:	20800115 	stw	r2,4(r4)
 100e708:	003f3e06 	br	100e404 <__alt_data_end+0xff00e404>
 100e70c:	01003f84 	movi	r4,254
 100e710:	02001fc4 	movi	r8,127
 100e714:	01c01f84 	movi	r7,126
 100e718:	003e4006 	br	100e01c <__alt_data_end+0xff00e01c>
 100e71c:	008040b4 	movhi	r2,258
 100e720:	10b34404 	addi	r2,r2,-13040
 100e724:	15000015 	stw	r20,0(r2)
 100e728:	003f1106 	br	100e370 <__alt_data_end+0xff00e370>
 100e72c:	00800044 	movi	r2,1
 100e730:	002b883a 	mov	r21,zero
 100e734:	003f1f06 	br	100e3b4 <__alt_data_end+0xff00e3b4>
 100e738:	81400204 	addi	r5,r16,8
 100e73c:	9009883a 	mov	r4,r18
 100e740:	10138500 	call	1013850 <_free_r>
 100e744:	008060b4 	movhi	r2,386
 100e748:	10bb3a04 	addi	r2,r2,-4888
 100e74c:	10c00017 	ldw	r3,0(r2)
 100e750:	003f2c06 	br	100e404 <__alt_data_end+0xff00e404>
 100e754:	00c05504 	movi	r3,340
 100e758:	18800536 	bltu	r3,r2,100e770 <_malloc_r+0x7cc>
 100e75c:	3804d3fa 	srli	r2,r7,15
 100e760:	11401e04 	addi	r5,r2,120
 100e764:	10c01dc4 	addi	r3,r2,119
 100e768:	294b883a 	add	r5,r5,r5
 100e76c:	003f5606 	br	100e4c8 <__alt_data_end+0xff00e4c8>
 100e770:	00c15504 	movi	r3,1364
 100e774:	18800536 	bltu	r3,r2,100e78c <_malloc_r+0x7e8>
 100e778:	3804d4ba 	srli	r2,r7,18
 100e77c:	11401f44 	addi	r5,r2,125
 100e780:	10c01f04 	addi	r3,r2,124
 100e784:	294b883a 	add	r5,r5,r5
 100e788:	003f4f06 	br	100e4c8 <__alt_data_end+0xff00e4c8>
 100e78c:	01403f84 	movi	r5,254
 100e790:	00c01f84 	movi	r3,126
 100e794:	003f4c06 	br	100e4c8 <__alt_data_end+0xff00e4c8>
 100e798:	98800117 	ldw	r2,4(r19)
 100e79c:	003fa006 	br	100e620 <__alt_data_end+0xff00e620>
 100e7a0:	8808d0fa 	srli	r4,r17,3
 100e7a4:	20800044 	addi	r2,r4,1
 100e7a8:	1085883a 	add	r2,r2,r2
 100e7ac:	003e9006 	br	100e1f0 <__alt_data_end+0xff00e1f0>

0100e7b0 <memchr>:
 100e7b0:	208000cc 	andi	r2,r4,3
 100e7b4:	280f883a 	mov	r7,r5
 100e7b8:	10003426 	beq	r2,zero,100e88c <memchr+0xdc>
 100e7bc:	30bfffc4 	addi	r2,r6,-1
 100e7c0:	30001a26 	beq	r6,zero,100e82c <memchr+0x7c>
 100e7c4:	20c00003 	ldbu	r3,0(r4)
 100e7c8:	29803fcc 	andi	r6,r5,255
 100e7cc:	30c0051e 	bne	r6,r3,100e7e4 <memchr+0x34>
 100e7d0:	00001806 	br	100e834 <memchr+0x84>
 100e7d4:	10001526 	beq	r2,zero,100e82c <memchr+0x7c>
 100e7d8:	20c00003 	ldbu	r3,0(r4)
 100e7dc:	10bfffc4 	addi	r2,r2,-1
 100e7e0:	30c01426 	beq	r6,r3,100e834 <memchr+0x84>
 100e7e4:	21000044 	addi	r4,r4,1
 100e7e8:	20c000cc 	andi	r3,r4,3
 100e7ec:	183ff91e 	bne	r3,zero,100e7d4 <__alt_data_end+0xff00e7d4>
 100e7f0:	020000c4 	movi	r8,3
 100e7f4:	40801136 	bltu	r8,r2,100e83c <memchr+0x8c>
 100e7f8:	10000c26 	beq	r2,zero,100e82c <memchr+0x7c>
 100e7fc:	20c00003 	ldbu	r3,0(r4)
 100e800:	29403fcc 	andi	r5,r5,255
 100e804:	28c00b26 	beq	r5,r3,100e834 <memchr+0x84>
 100e808:	20c00044 	addi	r3,r4,1
 100e80c:	39803fcc 	andi	r6,r7,255
 100e810:	2089883a 	add	r4,r4,r2
 100e814:	00000306 	br	100e824 <memchr+0x74>
 100e818:	18c00044 	addi	r3,r3,1
 100e81c:	197fffc3 	ldbu	r5,-1(r3)
 100e820:	31400526 	beq	r6,r5,100e838 <memchr+0x88>
 100e824:	1805883a 	mov	r2,r3
 100e828:	20fffb1e 	bne	r4,r3,100e818 <__alt_data_end+0xff00e818>
 100e82c:	0005883a 	mov	r2,zero
 100e830:	f800283a 	ret
 100e834:	2005883a 	mov	r2,r4
 100e838:	f800283a 	ret
 100e83c:	28c03fcc 	andi	r3,r5,255
 100e840:	1812923a 	slli	r9,r3,8
 100e844:	02ffbff4 	movhi	r11,65279
 100e848:	02a02074 	movhi	r10,32897
 100e84c:	48d2b03a 	or	r9,r9,r3
 100e850:	4806943a 	slli	r3,r9,16
 100e854:	5affbfc4 	addi	r11,r11,-257
 100e858:	52a02004 	addi	r10,r10,-32640
 100e85c:	48d2b03a 	or	r9,r9,r3
 100e860:	20c00017 	ldw	r3,0(r4)
 100e864:	48c6f03a 	xor	r3,r9,r3
 100e868:	1acd883a 	add	r6,r3,r11
 100e86c:	00c6303a 	nor	r3,zero,r3
 100e870:	30c6703a 	and	r3,r6,r3
 100e874:	1a86703a 	and	r3,r3,r10
 100e878:	183fe01e 	bne	r3,zero,100e7fc <__alt_data_end+0xff00e7fc>
 100e87c:	10bfff04 	addi	r2,r2,-4
 100e880:	21000104 	addi	r4,r4,4
 100e884:	40bff636 	bltu	r8,r2,100e860 <__alt_data_end+0xff00e860>
 100e888:	003fdb06 	br	100e7f8 <__alt_data_end+0xff00e7f8>
 100e88c:	3005883a 	mov	r2,r6
 100e890:	003fd706 	br	100e7f0 <__alt_data_end+0xff00e7f0>

0100e894 <memmove>:
 100e894:	2005883a 	mov	r2,r4
 100e898:	29000b2e 	bgeu	r5,r4,100e8c8 <memmove+0x34>
 100e89c:	298f883a 	add	r7,r5,r6
 100e8a0:	21c0092e 	bgeu	r4,r7,100e8c8 <memmove+0x34>
 100e8a4:	2187883a 	add	r3,r4,r6
 100e8a8:	198bc83a 	sub	r5,r3,r6
 100e8ac:	30004826 	beq	r6,zero,100e9d0 <memmove+0x13c>
 100e8b0:	39ffffc4 	addi	r7,r7,-1
 100e8b4:	39000003 	ldbu	r4,0(r7)
 100e8b8:	18ffffc4 	addi	r3,r3,-1
 100e8bc:	19000005 	stb	r4,0(r3)
 100e8c0:	28fffb1e 	bne	r5,r3,100e8b0 <__alt_data_end+0xff00e8b0>
 100e8c4:	f800283a 	ret
 100e8c8:	00c003c4 	movi	r3,15
 100e8cc:	1980412e 	bgeu	r3,r6,100e9d4 <memmove+0x140>
 100e8d0:	2886b03a 	or	r3,r5,r2
 100e8d4:	18c000cc 	andi	r3,r3,3
 100e8d8:	1800401e 	bne	r3,zero,100e9dc <memmove+0x148>
 100e8dc:	33fffc04 	addi	r15,r6,-16
 100e8e0:	781ed13a 	srli	r15,r15,4
 100e8e4:	28c00104 	addi	r3,r5,4
 100e8e8:	13400104 	addi	r13,r2,4
 100e8ec:	781c913a 	slli	r14,r15,4
 100e8f0:	2b000204 	addi	r12,r5,8
 100e8f4:	12c00204 	addi	r11,r2,8
 100e8f8:	73800504 	addi	r14,r14,20
 100e8fc:	2a800304 	addi	r10,r5,12
 100e900:	12400304 	addi	r9,r2,12
 100e904:	2b9d883a 	add	r14,r5,r14
 100e908:	2811883a 	mov	r8,r5
 100e90c:	100f883a 	mov	r7,r2
 100e910:	41000017 	ldw	r4,0(r8)
 100e914:	39c00404 	addi	r7,r7,16
 100e918:	18c00404 	addi	r3,r3,16
 100e91c:	393ffc15 	stw	r4,-16(r7)
 100e920:	193ffc17 	ldw	r4,-16(r3)
 100e924:	6b400404 	addi	r13,r13,16
 100e928:	5ac00404 	addi	r11,r11,16
 100e92c:	693ffc15 	stw	r4,-16(r13)
 100e930:	61000017 	ldw	r4,0(r12)
 100e934:	4a400404 	addi	r9,r9,16
 100e938:	42000404 	addi	r8,r8,16
 100e93c:	593ffc15 	stw	r4,-16(r11)
 100e940:	51000017 	ldw	r4,0(r10)
 100e944:	63000404 	addi	r12,r12,16
 100e948:	52800404 	addi	r10,r10,16
 100e94c:	493ffc15 	stw	r4,-16(r9)
 100e950:	1bbfef1e 	bne	r3,r14,100e910 <__alt_data_end+0xff00e910>
 100e954:	79000044 	addi	r4,r15,1
 100e958:	2008913a 	slli	r4,r4,4
 100e95c:	328003cc 	andi	r10,r6,15
 100e960:	02c000c4 	movi	r11,3
 100e964:	1107883a 	add	r3,r2,r4
 100e968:	290b883a 	add	r5,r5,r4
 100e96c:	5a801e2e 	bgeu	r11,r10,100e9e8 <memmove+0x154>
 100e970:	1813883a 	mov	r9,r3
 100e974:	2811883a 	mov	r8,r5
 100e978:	500f883a 	mov	r7,r10
 100e97c:	41000017 	ldw	r4,0(r8)
 100e980:	4a400104 	addi	r9,r9,4
 100e984:	39ffff04 	addi	r7,r7,-4
 100e988:	493fff15 	stw	r4,-4(r9)
 100e98c:	42000104 	addi	r8,r8,4
 100e990:	59fffa36 	bltu	r11,r7,100e97c <__alt_data_end+0xff00e97c>
 100e994:	513fff04 	addi	r4,r10,-4
 100e998:	2008d0ba 	srli	r4,r4,2
 100e99c:	318000cc 	andi	r6,r6,3
 100e9a0:	21000044 	addi	r4,r4,1
 100e9a4:	2109883a 	add	r4,r4,r4
 100e9a8:	2109883a 	add	r4,r4,r4
 100e9ac:	1907883a 	add	r3,r3,r4
 100e9b0:	290b883a 	add	r5,r5,r4
 100e9b4:	30000b26 	beq	r6,zero,100e9e4 <memmove+0x150>
 100e9b8:	198d883a 	add	r6,r3,r6
 100e9bc:	29c00003 	ldbu	r7,0(r5)
 100e9c0:	18c00044 	addi	r3,r3,1
 100e9c4:	29400044 	addi	r5,r5,1
 100e9c8:	19ffffc5 	stb	r7,-1(r3)
 100e9cc:	19bffb1e 	bne	r3,r6,100e9bc <__alt_data_end+0xff00e9bc>
 100e9d0:	f800283a 	ret
 100e9d4:	1007883a 	mov	r3,r2
 100e9d8:	003ff606 	br	100e9b4 <__alt_data_end+0xff00e9b4>
 100e9dc:	1007883a 	mov	r3,r2
 100e9e0:	003ff506 	br	100e9b8 <__alt_data_end+0xff00e9b8>
 100e9e4:	f800283a 	ret
 100e9e8:	500d883a 	mov	r6,r10
 100e9ec:	003ff106 	br	100e9b4 <__alt_data_end+0xff00e9b4>

0100e9f0 <_Balloc>:
 100e9f0:	20801317 	ldw	r2,76(r4)
 100e9f4:	defffc04 	addi	sp,sp,-16
 100e9f8:	dc400115 	stw	r17,4(sp)
 100e9fc:	dc000015 	stw	r16,0(sp)
 100ea00:	dfc00315 	stw	ra,12(sp)
 100ea04:	dc800215 	stw	r18,8(sp)
 100ea08:	2023883a 	mov	r17,r4
 100ea0c:	2821883a 	mov	r16,r5
 100ea10:	10000f26 	beq	r2,zero,100ea50 <_Balloc+0x60>
 100ea14:	8407883a 	add	r3,r16,r16
 100ea18:	18c7883a 	add	r3,r3,r3
 100ea1c:	10c7883a 	add	r3,r2,r3
 100ea20:	18800017 	ldw	r2,0(r3)
 100ea24:	10001126 	beq	r2,zero,100ea6c <_Balloc+0x7c>
 100ea28:	11000017 	ldw	r4,0(r2)
 100ea2c:	19000015 	stw	r4,0(r3)
 100ea30:	10000415 	stw	zero,16(r2)
 100ea34:	10000315 	stw	zero,12(r2)
 100ea38:	dfc00317 	ldw	ra,12(sp)
 100ea3c:	dc800217 	ldw	r18,8(sp)
 100ea40:	dc400117 	ldw	r17,4(sp)
 100ea44:	dc000017 	ldw	r16,0(sp)
 100ea48:	dec00404 	addi	sp,sp,16
 100ea4c:	f800283a 	ret
 100ea50:	01800844 	movi	r6,33
 100ea54:	01400104 	movi	r5,4
 100ea58:	10130b40 	call	10130b4 <_calloc_r>
 100ea5c:	88801315 	stw	r2,76(r17)
 100ea60:	103fec1e 	bne	r2,zero,100ea14 <__alt_data_end+0xff00ea14>
 100ea64:	0005883a 	mov	r2,zero
 100ea68:	003ff306 	br	100ea38 <__alt_data_end+0xff00ea38>
 100ea6c:	01400044 	movi	r5,1
 100ea70:	2c24983a 	sll	r18,r5,r16
 100ea74:	8809883a 	mov	r4,r17
 100ea78:	91800144 	addi	r6,r18,5
 100ea7c:	318d883a 	add	r6,r6,r6
 100ea80:	318d883a 	add	r6,r6,r6
 100ea84:	10130b40 	call	10130b4 <_calloc_r>
 100ea88:	103ff626 	beq	r2,zero,100ea64 <__alt_data_end+0xff00ea64>
 100ea8c:	14000115 	stw	r16,4(r2)
 100ea90:	14800215 	stw	r18,8(r2)
 100ea94:	003fe606 	br	100ea30 <__alt_data_end+0xff00ea30>

0100ea98 <_Bfree>:
 100ea98:	28000826 	beq	r5,zero,100eabc <_Bfree+0x24>
 100ea9c:	28c00117 	ldw	r3,4(r5)
 100eaa0:	20801317 	ldw	r2,76(r4)
 100eaa4:	18c7883a 	add	r3,r3,r3
 100eaa8:	18c7883a 	add	r3,r3,r3
 100eaac:	10c5883a 	add	r2,r2,r3
 100eab0:	10c00017 	ldw	r3,0(r2)
 100eab4:	28c00015 	stw	r3,0(r5)
 100eab8:	11400015 	stw	r5,0(r2)
 100eabc:	f800283a 	ret

0100eac0 <__multadd>:
 100eac0:	defffa04 	addi	sp,sp,-24
 100eac4:	dc800315 	stw	r18,12(sp)
 100eac8:	dc400215 	stw	r17,8(sp)
 100eacc:	dc000115 	stw	r16,4(sp)
 100ead0:	2823883a 	mov	r17,r5
 100ead4:	2c000417 	ldw	r16,16(r5)
 100ead8:	dfc00515 	stw	ra,20(sp)
 100eadc:	dcc00415 	stw	r19,16(sp)
 100eae0:	2025883a 	mov	r18,r4
 100eae4:	29400504 	addi	r5,r5,20
 100eae8:	0011883a 	mov	r8,zero
 100eaec:	28c00017 	ldw	r3,0(r5)
 100eaf0:	29400104 	addi	r5,r5,4
 100eaf4:	42000044 	addi	r8,r8,1
 100eaf8:	18bfffcc 	andi	r2,r3,65535
 100eafc:	1185383a 	mul	r2,r2,r6
 100eb00:	1806d43a 	srli	r3,r3,16
 100eb04:	11cf883a 	add	r7,r2,r7
 100eb08:	3808d43a 	srli	r4,r7,16
 100eb0c:	1987383a 	mul	r3,r3,r6
 100eb10:	38bfffcc 	andi	r2,r7,65535
 100eb14:	1907883a 	add	r3,r3,r4
 100eb18:	1808943a 	slli	r4,r3,16
 100eb1c:	180ed43a 	srli	r7,r3,16
 100eb20:	2085883a 	add	r2,r4,r2
 100eb24:	28bfff15 	stw	r2,-4(r5)
 100eb28:	443ff016 	blt	r8,r16,100eaec <__alt_data_end+0xff00eaec>
 100eb2c:	38000926 	beq	r7,zero,100eb54 <__multadd+0x94>
 100eb30:	88800217 	ldw	r2,8(r17)
 100eb34:	80800f0e 	bge	r16,r2,100eb74 <__multadd+0xb4>
 100eb38:	80800144 	addi	r2,r16,5
 100eb3c:	1085883a 	add	r2,r2,r2
 100eb40:	1085883a 	add	r2,r2,r2
 100eb44:	8885883a 	add	r2,r17,r2
 100eb48:	11c00015 	stw	r7,0(r2)
 100eb4c:	84000044 	addi	r16,r16,1
 100eb50:	8c000415 	stw	r16,16(r17)
 100eb54:	8805883a 	mov	r2,r17
 100eb58:	dfc00517 	ldw	ra,20(sp)
 100eb5c:	dcc00417 	ldw	r19,16(sp)
 100eb60:	dc800317 	ldw	r18,12(sp)
 100eb64:	dc400217 	ldw	r17,8(sp)
 100eb68:	dc000117 	ldw	r16,4(sp)
 100eb6c:	dec00604 	addi	sp,sp,24
 100eb70:	f800283a 	ret
 100eb74:	89400117 	ldw	r5,4(r17)
 100eb78:	9009883a 	mov	r4,r18
 100eb7c:	d9c00015 	stw	r7,0(sp)
 100eb80:	29400044 	addi	r5,r5,1
 100eb84:	100e9f00 	call	100e9f0 <_Balloc>
 100eb88:	89800417 	ldw	r6,16(r17)
 100eb8c:	89400304 	addi	r5,r17,12
 100eb90:	11000304 	addi	r4,r2,12
 100eb94:	31800084 	addi	r6,r6,2
 100eb98:	318d883a 	add	r6,r6,r6
 100eb9c:	318d883a 	add	r6,r6,r6
 100eba0:	1027883a 	mov	r19,r2
 100eba4:	1008d600 	call	1008d60 <memcpy>
 100eba8:	d9c00017 	ldw	r7,0(sp)
 100ebac:	88000a26 	beq	r17,zero,100ebd8 <__multadd+0x118>
 100ebb0:	88c00117 	ldw	r3,4(r17)
 100ebb4:	90801317 	ldw	r2,76(r18)
 100ebb8:	18c7883a 	add	r3,r3,r3
 100ebbc:	18c7883a 	add	r3,r3,r3
 100ebc0:	10c5883a 	add	r2,r2,r3
 100ebc4:	10c00017 	ldw	r3,0(r2)
 100ebc8:	88c00015 	stw	r3,0(r17)
 100ebcc:	14400015 	stw	r17,0(r2)
 100ebd0:	9823883a 	mov	r17,r19
 100ebd4:	003fd806 	br	100eb38 <__alt_data_end+0xff00eb38>
 100ebd8:	9823883a 	mov	r17,r19
 100ebdc:	003fd606 	br	100eb38 <__alt_data_end+0xff00eb38>

0100ebe0 <__s2b>:
 100ebe0:	defff904 	addi	sp,sp,-28
 100ebe4:	dc400115 	stw	r17,4(sp)
 100ebe8:	dc000015 	stw	r16,0(sp)
 100ebec:	2023883a 	mov	r17,r4
 100ebf0:	2821883a 	mov	r16,r5
 100ebf4:	39000204 	addi	r4,r7,8
 100ebf8:	01400244 	movi	r5,9
 100ebfc:	dcc00315 	stw	r19,12(sp)
 100ec00:	dc800215 	stw	r18,8(sp)
 100ec04:	dfc00615 	stw	ra,24(sp)
 100ec08:	dd400515 	stw	r21,20(sp)
 100ec0c:	dd000415 	stw	r20,16(sp)
 100ec10:	3825883a 	mov	r18,r7
 100ec14:	3027883a 	mov	r19,r6
 100ec18:	1014c7c0 	call	1014c7c <__divsi3>
 100ec1c:	00c00044 	movi	r3,1
 100ec20:	000b883a 	mov	r5,zero
 100ec24:	1880030e 	bge	r3,r2,100ec34 <__s2b+0x54>
 100ec28:	18c7883a 	add	r3,r3,r3
 100ec2c:	29400044 	addi	r5,r5,1
 100ec30:	18bffd16 	blt	r3,r2,100ec28 <__alt_data_end+0xff00ec28>
 100ec34:	8809883a 	mov	r4,r17
 100ec38:	100e9f00 	call	100e9f0 <_Balloc>
 100ec3c:	d8c00717 	ldw	r3,28(sp)
 100ec40:	10c00515 	stw	r3,20(r2)
 100ec44:	00c00044 	movi	r3,1
 100ec48:	10c00415 	stw	r3,16(r2)
 100ec4c:	00c00244 	movi	r3,9
 100ec50:	1cc0210e 	bge	r3,r19,100ecd8 <__s2b+0xf8>
 100ec54:	80eb883a 	add	r21,r16,r3
 100ec58:	a829883a 	mov	r20,r21
 100ec5c:	84e1883a 	add	r16,r16,r19
 100ec60:	a1c00007 	ldb	r7,0(r20)
 100ec64:	01800284 	movi	r6,10
 100ec68:	a5000044 	addi	r20,r20,1
 100ec6c:	100b883a 	mov	r5,r2
 100ec70:	39fff404 	addi	r7,r7,-48
 100ec74:	8809883a 	mov	r4,r17
 100ec78:	100eac00 	call	100eac0 <__multadd>
 100ec7c:	a43ff81e 	bne	r20,r16,100ec60 <__alt_data_end+0xff00ec60>
 100ec80:	ace1883a 	add	r16,r21,r19
 100ec84:	843ffe04 	addi	r16,r16,-8
 100ec88:	9c800a0e 	bge	r19,r18,100ecb4 <__s2b+0xd4>
 100ec8c:	94e5c83a 	sub	r18,r18,r19
 100ec90:	84a5883a 	add	r18,r16,r18
 100ec94:	81c00007 	ldb	r7,0(r16)
 100ec98:	01800284 	movi	r6,10
 100ec9c:	84000044 	addi	r16,r16,1
 100eca0:	100b883a 	mov	r5,r2
 100eca4:	39fff404 	addi	r7,r7,-48
 100eca8:	8809883a 	mov	r4,r17
 100ecac:	100eac00 	call	100eac0 <__multadd>
 100ecb0:	84bff81e 	bne	r16,r18,100ec94 <__alt_data_end+0xff00ec94>
 100ecb4:	dfc00617 	ldw	ra,24(sp)
 100ecb8:	dd400517 	ldw	r21,20(sp)
 100ecbc:	dd000417 	ldw	r20,16(sp)
 100ecc0:	dcc00317 	ldw	r19,12(sp)
 100ecc4:	dc800217 	ldw	r18,8(sp)
 100ecc8:	dc400117 	ldw	r17,4(sp)
 100eccc:	dc000017 	ldw	r16,0(sp)
 100ecd0:	dec00704 	addi	sp,sp,28
 100ecd4:	f800283a 	ret
 100ecd8:	84000284 	addi	r16,r16,10
 100ecdc:	1827883a 	mov	r19,r3
 100ece0:	003fe906 	br	100ec88 <__alt_data_end+0xff00ec88>

0100ece4 <__hi0bits>:
 100ece4:	20bfffec 	andhi	r2,r4,65535
 100ece8:	1000141e 	bne	r2,zero,100ed3c <__hi0bits+0x58>
 100ecec:	2008943a 	slli	r4,r4,16
 100ecf0:	00800404 	movi	r2,16
 100ecf4:	20ffc02c 	andhi	r3,r4,65280
 100ecf8:	1800021e 	bne	r3,zero,100ed04 <__hi0bits+0x20>
 100ecfc:	2008923a 	slli	r4,r4,8
 100ed00:	10800204 	addi	r2,r2,8
 100ed04:	20fc002c 	andhi	r3,r4,61440
 100ed08:	1800021e 	bne	r3,zero,100ed14 <__hi0bits+0x30>
 100ed0c:	2008913a 	slli	r4,r4,4
 100ed10:	10800104 	addi	r2,r2,4
 100ed14:	20f0002c 	andhi	r3,r4,49152
 100ed18:	1800031e 	bne	r3,zero,100ed28 <__hi0bits+0x44>
 100ed1c:	2109883a 	add	r4,r4,r4
 100ed20:	10800084 	addi	r2,r2,2
 100ed24:	2109883a 	add	r4,r4,r4
 100ed28:	20000316 	blt	r4,zero,100ed38 <__hi0bits+0x54>
 100ed2c:	2110002c 	andhi	r4,r4,16384
 100ed30:	2000041e 	bne	r4,zero,100ed44 <__hi0bits+0x60>
 100ed34:	00800804 	movi	r2,32
 100ed38:	f800283a 	ret
 100ed3c:	0005883a 	mov	r2,zero
 100ed40:	003fec06 	br	100ecf4 <__alt_data_end+0xff00ecf4>
 100ed44:	10800044 	addi	r2,r2,1
 100ed48:	f800283a 	ret

0100ed4c <__lo0bits>:
 100ed4c:	20c00017 	ldw	r3,0(r4)
 100ed50:	188001cc 	andi	r2,r3,7
 100ed54:	10000826 	beq	r2,zero,100ed78 <__lo0bits+0x2c>
 100ed58:	1880004c 	andi	r2,r3,1
 100ed5c:	1000211e 	bne	r2,zero,100ede4 <__lo0bits+0x98>
 100ed60:	1880008c 	andi	r2,r3,2
 100ed64:	1000211e 	bne	r2,zero,100edec <__lo0bits+0xa0>
 100ed68:	1806d0ba 	srli	r3,r3,2
 100ed6c:	00800084 	movi	r2,2
 100ed70:	20c00015 	stw	r3,0(r4)
 100ed74:	f800283a 	ret
 100ed78:	18bfffcc 	andi	r2,r3,65535
 100ed7c:	10001326 	beq	r2,zero,100edcc <__lo0bits+0x80>
 100ed80:	0005883a 	mov	r2,zero
 100ed84:	19403fcc 	andi	r5,r3,255
 100ed88:	2800021e 	bne	r5,zero,100ed94 <__lo0bits+0x48>
 100ed8c:	1806d23a 	srli	r3,r3,8
 100ed90:	10800204 	addi	r2,r2,8
 100ed94:	194003cc 	andi	r5,r3,15
 100ed98:	2800021e 	bne	r5,zero,100eda4 <__lo0bits+0x58>
 100ed9c:	1806d13a 	srli	r3,r3,4
 100eda0:	10800104 	addi	r2,r2,4
 100eda4:	194000cc 	andi	r5,r3,3
 100eda8:	2800021e 	bne	r5,zero,100edb4 <__lo0bits+0x68>
 100edac:	1806d0ba 	srli	r3,r3,2
 100edb0:	10800084 	addi	r2,r2,2
 100edb4:	1940004c 	andi	r5,r3,1
 100edb8:	2800081e 	bne	r5,zero,100eddc <__lo0bits+0x90>
 100edbc:	1806d07a 	srli	r3,r3,1
 100edc0:	1800051e 	bne	r3,zero,100edd8 <__lo0bits+0x8c>
 100edc4:	00800804 	movi	r2,32
 100edc8:	f800283a 	ret
 100edcc:	1806d43a 	srli	r3,r3,16
 100edd0:	00800404 	movi	r2,16
 100edd4:	003feb06 	br	100ed84 <__alt_data_end+0xff00ed84>
 100edd8:	10800044 	addi	r2,r2,1
 100eddc:	20c00015 	stw	r3,0(r4)
 100ede0:	f800283a 	ret
 100ede4:	0005883a 	mov	r2,zero
 100ede8:	f800283a 	ret
 100edec:	1806d07a 	srli	r3,r3,1
 100edf0:	00800044 	movi	r2,1
 100edf4:	20c00015 	stw	r3,0(r4)
 100edf8:	f800283a 	ret

0100edfc <__i2b>:
 100edfc:	defffd04 	addi	sp,sp,-12
 100ee00:	dc000015 	stw	r16,0(sp)
 100ee04:	04000044 	movi	r16,1
 100ee08:	dc400115 	stw	r17,4(sp)
 100ee0c:	2823883a 	mov	r17,r5
 100ee10:	800b883a 	mov	r5,r16
 100ee14:	dfc00215 	stw	ra,8(sp)
 100ee18:	100e9f00 	call	100e9f0 <_Balloc>
 100ee1c:	14400515 	stw	r17,20(r2)
 100ee20:	14000415 	stw	r16,16(r2)
 100ee24:	dfc00217 	ldw	ra,8(sp)
 100ee28:	dc400117 	ldw	r17,4(sp)
 100ee2c:	dc000017 	ldw	r16,0(sp)
 100ee30:	dec00304 	addi	sp,sp,12
 100ee34:	f800283a 	ret

0100ee38 <__multiply>:
 100ee38:	defffa04 	addi	sp,sp,-24
 100ee3c:	dcc00315 	stw	r19,12(sp)
 100ee40:	dc800215 	stw	r18,8(sp)
 100ee44:	34c00417 	ldw	r19,16(r6)
 100ee48:	2c800417 	ldw	r18,16(r5)
 100ee4c:	dd000415 	stw	r20,16(sp)
 100ee50:	dc400115 	stw	r17,4(sp)
 100ee54:	dfc00515 	stw	ra,20(sp)
 100ee58:	dc000015 	stw	r16,0(sp)
 100ee5c:	2829883a 	mov	r20,r5
 100ee60:	3023883a 	mov	r17,r6
 100ee64:	94c0050e 	bge	r18,r19,100ee7c <__multiply+0x44>
 100ee68:	9007883a 	mov	r3,r18
 100ee6c:	3029883a 	mov	r20,r6
 100ee70:	9825883a 	mov	r18,r19
 100ee74:	2823883a 	mov	r17,r5
 100ee78:	1827883a 	mov	r19,r3
 100ee7c:	a0800217 	ldw	r2,8(r20)
 100ee80:	94e1883a 	add	r16,r18,r19
 100ee84:	a1400117 	ldw	r5,4(r20)
 100ee88:	1400010e 	bge	r2,r16,100ee90 <__multiply+0x58>
 100ee8c:	29400044 	addi	r5,r5,1
 100ee90:	100e9f00 	call	100e9f0 <_Balloc>
 100ee94:	8415883a 	add	r10,r16,r16
 100ee98:	12c00504 	addi	r11,r2,20
 100ee9c:	5295883a 	add	r10,r10,r10
 100eea0:	5a95883a 	add	r10,r11,r10
 100eea4:	5807883a 	mov	r3,r11
 100eea8:	5a80032e 	bgeu	r11,r10,100eeb8 <__multiply+0x80>
 100eeac:	18000015 	stw	zero,0(r3)
 100eeb0:	18c00104 	addi	r3,r3,4
 100eeb4:	1abffd36 	bltu	r3,r10,100eeac <__alt_data_end+0xff00eeac>
 100eeb8:	9ce7883a 	add	r19,r19,r19
 100eebc:	94a5883a 	add	r18,r18,r18
 100eec0:	89800504 	addi	r6,r17,20
 100eec4:	9ce7883a 	add	r19,r19,r19
 100eec8:	a3400504 	addi	r13,r20,20
 100eecc:	94a5883a 	add	r18,r18,r18
 100eed0:	34d9883a 	add	r12,r6,r19
 100eed4:	6c93883a 	add	r9,r13,r18
 100eed8:	3300422e 	bgeu	r6,r12,100efe4 <__multiply+0x1ac>
 100eedc:	37c00017 	ldw	ra,0(r6)
 100eee0:	fbffffcc 	andi	r15,ra,65535
 100eee4:	78001b26 	beq	r15,zero,100ef54 <__multiply+0x11c>
 100eee8:	5811883a 	mov	r8,r11
 100eeec:	681d883a 	mov	r14,r13
 100eef0:	000f883a 	mov	r7,zero
 100eef4:	71000017 	ldw	r4,0(r14)
 100eef8:	40c00017 	ldw	r3,0(r8)
 100eefc:	73800104 	addi	r14,r14,4
 100ef00:	217fffcc 	andi	r5,r4,65535
 100ef04:	2bcb383a 	mul	r5,r5,r15
 100ef08:	2008d43a 	srli	r4,r4,16
 100ef0c:	1c7fffcc 	andi	r17,r3,65535
 100ef10:	2c4b883a 	add	r5,r5,r17
 100ef14:	29cb883a 	add	r5,r5,r7
 100ef18:	23c9383a 	mul	r4,r4,r15
 100ef1c:	1806d43a 	srli	r3,r3,16
 100ef20:	280ed43a 	srli	r7,r5,16
 100ef24:	297fffcc 	andi	r5,r5,65535
 100ef28:	20c7883a 	add	r3,r4,r3
 100ef2c:	19c7883a 	add	r3,r3,r7
 100ef30:	1808943a 	slli	r4,r3,16
 100ef34:	4023883a 	mov	r17,r8
 100ef38:	180ed43a 	srli	r7,r3,16
 100ef3c:	214ab03a 	or	r5,r4,r5
 100ef40:	41400015 	stw	r5,0(r8)
 100ef44:	42000104 	addi	r8,r8,4
 100ef48:	727fea36 	bltu	r14,r9,100eef4 <__alt_data_end+0xff00eef4>
 100ef4c:	89c00115 	stw	r7,4(r17)
 100ef50:	37c00017 	ldw	ra,0(r6)
 100ef54:	f83ed43a 	srli	ra,ra,16
 100ef58:	f8001f26 	beq	ra,zero,100efd8 <__multiply+0x1a0>
 100ef5c:	58c00017 	ldw	r3,0(r11)
 100ef60:	681d883a 	mov	r14,r13
 100ef64:	581f883a 	mov	r15,r11
 100ef68:	1811883a 	mov	r8,r3
 100ef6c:	5825883a 	mov	r18,r11
 100ef70:	000f883a 	mov	r7,zero
 100ef74:	00000106 	br	100ef7c <__multiply+0x144>
 100ef78:	8825883a 	mov	r18,r17
 100ef7c:	7140000b 	ldhu	r5,0(r14)
 100ef80:	4010d43a 	srli	r8,r8,16
 100ef84:	193fffcc 	andi	r4,r3,65535
 100ef88:	2fcb383a 	mul	r5,r5,ra
 100ef8c:	7bc00104 	addi	r15,r15,4
 100ef90:	73800104 	addi	r14,r14,4
 100ef94:	2a0b883a 	add	r5,r5,r8
 100ef98:	29cb883a 	add	r5,r5,r7
 100ef9c:	2806943a 	slli	r3,r5,16
 100efa0:	94400104 	addi	r17,r18,4
 100efa4:	280ad43a 	srli	r5,r5,16
 100efa8:	1908b03a 	or	r4,r3,r4
 100efac:	793fff15 	stw	r4,-4(r15)
 100efb0:	70ffff17 	ldw	r3,-4(r14)
 100efb4:	8a000017 	ldw	r8,0(r17)
 100efb8:	1806d43a 	srli	r3,r3,16
 100efbc:	413fffcc 	andi	r4,r8,65535
 100efc0:	1fc7383a 	mul	r3,r3,ra
 100efc4:	1907883a 	add	r3,r3,r4
 100efc8:	1947883a 	add	r3,r3,r5
 100efcc:	180ed43a 	srli	r7,r3,16
 100efd0:	727fe936 	bltu	r14,r9,100ef78 <__alt_data_end+0xff00ef78>
 100efd4:	90c00115 	stw	r3,4(r18)
 100efd8:	31800104 	addi	r6,r6,4
 100efdc:	5ac00104 	addi	r11,r11,4
 100efe0:	333fbe36 	bltu	r6,r12,100eedc <__alt_data_end+0xff00eedc>
 100efe4:	0400090e 	bge	zero,r16,100f00c <__multiply+0x1d4>
 100efe8:	50ffff17 	ldw	r3,-4(r10)
 100efec:	52bfff04 	addi	r10,r10,-4
 100eff0:	18000326 	beq	r3,zero,100f000 <__multiply+0x1c8>
 100eff4:	00000506 	br	100f00c <__multiply+0x1d4>
 100eff8:	50c00017 	ldw	r3,0(r10)
 100effc:	1800031e 	bne	r3,zero,100f00c <__multiply+0x1d4>
 100f000:	843fffc4 	addi	r16,r16,-1
 100f004:	52bfff04 	addi	r10,r10,-4
 100f008:	803ffb1e 	bne	r16,zero,100eff8 <__alt_data_end+0xff00eff8>
 100f00c:	14000415 	stw	r16,16(r2)
 100f010:	dfc00517 	ldw	ra,20(sp)
 100f014:	dd000417 	ldw	r20,16(sp)
 100f018:	dcc00317 	ldw	r19,12(sp)
 100f01c:	dc800217 	ldw	r18,8(sp)
 100f020:	dc400117 	ldw	r17,4(sp)
 100f024:	dc000017 	ldw	r16,0(sp)
 100f028:	dec00604 	addi	sp,sp,24
 100f02c:	f800283a 	ret

0100f030 <__pow5mult>:
 100f030:	defffa04 	addi	sp,sp,-24
 100f034:	dcc00315 	stw	r19,12(sp)
 100f038:	dc000015 	stw	r16,0(sp)
 100f03c:	dfc00515 	stw	ra,20(sp)
 100f040:	dd000415 	stw	r20,16(sp)
 100f044:	dc800215 	stw	r18,8(sp)
 100f048:	dc400115 	stw	r17,4(sp)
 100f04c:	308000cc 	andi	r2,r6,3
 100f050:	3021883a 	mov	r16,r6
 100f054:	2027883a 	mov	r19,r4
 100f058:	10002f1e 	bne	r2,zero,100f118 <__pow5mult+0xe8>
 100f05c:	2825883a 	mov	r18,r5
 100f060:	8021d0ba 	srai	r16,r16,2
 100f064:	80001a26 	beq	r16,zero,100f0d0 <__pow5mult+0xa0>
 100f068:	9c401217 	ldw	r17,72(r19)
 100f06c:	8800061e 	bne	r17,zero,100f088 <__pow5mult+0x58>
 100f070:	00003406 	br	100f144 <__pow5mult+0x114>
 100f074:	8021d07a 	srai	r16,r16,1
 100f078:	80001526 	beq	r16,zero,100f0d0 <__pow5mult+0xa0>
 100f07c:	88800017 	ldw	r2,0(r17)
 100f080:	10001c26 	beq	r2,zero,100f0f4 <__pow5mult+0xc4>
 100f084:	1023883a 	mov	r17,r2
 100f088:	8080004c 	andi	r2,r16,1
 100f08c:	103ff926 	beq	r2,zero,100f074 <__alt_data_end+0xff00f074>
 100f090:	880d883a 	mov	r6,r17
 100f094:	900b883a 	mov	r5,r18
 100f098:	9809883a 	mov	r4,r19
 100f09c:	100ee380 	call	100ee38 <__multiply>
 100f0a0:	90001b26 	beq	r18,zero,100f110 <__pow5mult+0xe0>
 100f0a4:	91000117 	ldw	r4,4(r18)
 100f0a8:	98c01317 	ldw	r3,76(r19)
 100f0ac:	8021d07a 	srai	r16,r16,1
 100f0b0:	2109883a 	add	r4,r4,r4
 100f0b4:	2109883a 	add	r4,r4,r4
 100f0b8:	1907883a 	add	r3,r3,r4
 100f0bc:	19000017 	ldw	r4,0(r3)
 100f0c0:	91000015 	stw	r4,0(r18)
 100f0c4:	1c800015 	stw	r18,0(r3)
 100f0c8:	1025883a 	mov	r18,r2
 100f0cc:	803feb1e 	bne	r16,zero,100f07c <__alt_data_end+0xff00f07c>
 100f0d0:	9005883a 	mov	r2,r18
 100f0d4:	dfc00517 	ldw	ra,20(sp)
 100f0d8:	dd000417 	ldw	r20,16(sp)
 100f0dc:	dcc00317 	ldw	r19,12(sp)
 100f0e0:	dc800217 	ldw	r18,8(sp)
 100f0e4:	dc400117 	ldw	r17,4(sp)
 100f0e8:	dc000017 	ldw	r16,0(sp)
 100f0ec:	dec00604 	addi	sp,sp,24
 100f0f0:	f800283a 	ret
 100f0f4:	880d883a 	mov	r6,r17
 100f0f8:	880b883a 	mov	r5,r17
 100f0fc:	9809883a 	mov	r4,r19
 100f100:	100ee380 	call	100ee38 <__multiply>
 100f104:	88800015 	stw	r2,0(r17)
 100f108:	10000015 	stw	zero,0(r2)
 100f10c:	003fdd06 	br	100f084 <__alt_data_end+0xff00f084>
 100f110:	1025883a 	mov	r18,r2
 100f114:	003fd706 	br	100f074 <__alt_data_end+0xff00f074>
 100f118:	10bfffc4 	addi	r2,r2,-1
 100f11c:	1085883a 	add	r2,r2,r2
 100f120:	00c040b4 	movhi	r3,258
 100f124:	18ebb704 	addi	r3,r3,-20772
 100f128:	1085883a 	add	r2,r2,r2
 100f12c:	1885883a 	add	r2,r3,r2
 100f130:	11800017 	ldw	r6,0(r2)
 100f134:	000f883a 	mov	r7,zero
 100f138:	100eac00 	call	100eac0 <__multadd>
 100f13c:	1025883a 	mov	r18,r2
 100f140:	003fc706 	br	100f060 <__alt_data_end+0xff00f060>
 100f144:	05000044 	movi	r20,1
 100f148:	a00b883a 	mov	r5,r20
 100f14c:	9809883a 	mov	r4,r19
 100f150:	100e9f00 	call	100e9f0 <_Balloc>
 100f154:	1023883a 	mov	r17,r2
 100f158:	00809c44 	movi	r2,625
 100f15c:	88800515 	stw	r2,20(r17)
 100f160:	8d000415 	stw	r20,16(r17)
 100f164:	9c401215 	stw	r17,72(r19)
 100f168:	88000015 	stw	zero,0(r17)
 100f16c:	003fc606 	br	100f088 <__alt_data_end+0xff00f088>

0100f170 <__lshift>:
 100f170:	defff904 	addi	sp,sp,-28
 100f174:	dd400515 	stw	r21,20(sp)
 100f178:	dcc00315 	stw	r19,12(sp)
 100f17c:	302bd17a 	srai	r21,r6,5
 100f180:	2cc00417 	ldw	r19,16(r5)
 100f184:	28800217 	ldw	r2,8(r5)
 100f188:	dd000415 	stw	r20,16(sp)
 100f18c:	ace7883a 	add	r19,r21,r19
 100f190:	dc800215 	stw	r18,8(sp)
 100f194:	dc400115 	stw	r17,4(sp)
 100f198:	dc000015 	stw	r16,0(sp)
 100f19c:	dfc00615 	stw	ra,24(sp)
 100f1a0:	9c000044 	addi	r16,r19,1
 100f1a4:	2823883a 	mov	r17,r5
 100f1a8:	3029883a 	mov	r20,r6
 100f1ac:	2025883a 	mov	r18,r4
 100f1b0:	29400117 	ldw	r5,4(r5)
 100f1b4:	1400030e 	bge	r2,r16,100f1c4 <__lshift+0x54>
 100f1b8:	1085883a 	add	r2,r2,r2
 100f1bc:	29400044 	addi	r5,r5,1
 100f1c0:	143ffd16 	blt	r2,r16,100f1b8 <__alt_data_end+0xff00f1b8>
 100f1c4:	9009883a 	mov	r4,r18
 100f1c8:	100e9f00 	call	100e9f0 <_Balloc>
 100f1cc:	10c00504 	addi	r3,r2,20
 100f1d0:	0540070e 	bge	zero,r21,100f1f0 <__lshift+0x80>
 100f1d4:	ad6b883a 	add	r21,r21,r21
 100f1d8:	ad6b883a 	add	r21,r21,r21
 100f1dc:	1809883a 	mov	r4,r3
 100f1e0:	1d47883a 	add	r3,r3,r21
 100f1e4:	20000015 	stw	zero,0(r4)
 100f1e8:	21000104 	addi	r4,r4,4
 100f1ec:	193ffd1e 	bne	r3,r4,100f1e4 <__alt_data_end+0xff00f1e4>
 100f1f0:	8a000417 	ldw	r8,16(r17)
 100f1f4:	89000504 	addi	r4,r17,20
 100f1f8:	a18007cc 	andi	r6,r20,31
 100f1fc:	4211883a 	add	r8,r8,r8
 100f200:	4211883a 	add	r8,r8,r8
 100f204:	2211883a 	add	r8,r4,r8
 100f208:	30002326 	beq	r6,zero,100f298 <__lshift+0x128>
 100f20c:	02400804 	movi	r9,32
 100f210:	4993c83a 	sub	r9,r9,r6
 100f214:	000b883a 	mov	r5,zero
 100f218:	21c00017 	ldw	r7,0(r4)
 100f21c:	1815883a 	mov	r10,r3
 100f220:	18c00104 	addi	r3,r3,4
 100f224:	398e983a 	sll	r7,r7,r6
 100f228:	21000104 	addi	r4,r4,4
 100f22c:	394ab03a 	or	r5,r7,r5
 100f230:	197fff15 	stw	r5,-4(r3)
 100f234:	217fff17 	ldw	r5,-4(r4)
 100f238:	2a4ad83a 	srl	r5,r5,r9
 100f23c:	223ff636 	bltu	r4,r8,100f218 <__alt_data_end+0xff00f218>
 100f240:	51400115 	stw	r5,4(r10)
 100f244:	28001a1e 	bne	r5,zero,100f2b0 <__lshift+0x140>
 100f248:	843fffc4 	addi	r16,r16,-1
 100f24c:	14000415 	stw	r16,16(r2)
 100f250:	88000826 	beq	r17,zero,100f274 <__lshift+0x104>
 100f254:	89000117 	ldw	r4,4(r17)
 100f258:	90c01317 	ldw	r3,76(r18)
 100f25c:	2109883a 	add	r4,r4,r4
 100f260:	2109883a 	add	r4,r4,r4
 100f264:	1907883a 	add	r3,r3,r4
 100f268:	19000017 	ldw	r4,0(r3)
 100f26c:	89000015 	stw	r4,0(r17)
 100f270:	1c400015 	stw	r17,0(r3)
 100f274:	dfc00617 	ldw	ra,24(sp)
 100f278:	dd400517 	ldw	r21,20(sp)
 100f27c:	dd000417 	ldw	r20,16(sp)
 100f280:	dcc00317 	ldw	r19,12(sp)
 100f284:	dc800217 	ldw	r18,8(sp)
 100f288:	dc400117 	ldw	r17,4(sp)
 100f28c:	dc000017 	ldw	r16,0(sp)
 100f290:	dec00704 	addi	sp,sp,28
 100f294:	f800283a 	ret
 100f298:	21400017 	ldw	r5,0(r4)
 100f29c:	18c00104 	addi	r3,r3,4
 100f2a0:	21000104 	addi	r4,r4,4
 100f2a4:	197fff15 	stw	r5,-4(r3)
 100f2a8:	223ffb36 	bltu	r4,r8,100f298 <__alt_data_end+0xff00f298>
 100f2ac:	003fe606 	br	100f248 <__alt_data_end+0xff00f248>
 100f2b0:	9c000084 	addi	r16,r19,2
 100f2b4:	003fe406 	br	100f248 <__alt_data_end+0xff00f248>

0100f2b8 <__mcmp>:
 100f2b8:	20800417 	ldw	r2,16(r4)
 100f2bc:	28c00417 	ldw	r3,16(r5)
 100f2c0:	10c5c83a 	sub	r2,r2,r3
 100f2c4:	1000111e 	bne	r2,zero,100f30c <__mcmp+0x54>
 100f2c8:	18c7883a 	add	r3,r3,r3
 100f2cc:	18c7883a 	add	r3,r3,r3
 100f2d0:	21000504 	addi	r4,r4,20
 100f2d4:	29400504 	addi	r5,r5,20
 100f2d8:	20c5883a 	add	r2,r4,r3
 100f2dc:	28cb883a 	add	r5,r5,r3
 100f2e0:	00000106 	br	100f2e8 <__mcmp+0x30>
 100f2e4:	20800a2e 	bgeu	r4,r2,100f310 <__mcmp+0x58>
 100f2e8:	10bfff04 	addi	r2,r2,-4
 100f2ec:	297fff04 	addi	r5,r5,-4
 100f2f0:	11800017 	ldw	r6,0(r2)
 100f2f4:	28c00017 	ldw	r3,0(r5)
 100f2f8:	30fffa26 	beq	r6,r3,100f2e4 <__alt_data_end+0xff00f2e4>
 100f2fc:	30c00236 	bltu	r6,r3,100f308 <__mcmp+0x50>
 100f300:	00800044 	movi	r2,1
 100f304:	f800283a 	ret
 100f308:	00bfffc4 	movi	r2,-1
 100f30c:	f800283a 	ret
 100f310:	0005883a 	mov	r2,zero
 100f314:	f800283a 	ret

0100f318 <__mdiff>:
 100f318:	28c00417 	ldw	r3,16(r5)
 100f31c:	30800417 	ldw	r2,16(r6)
 100f320:	defffa04 	addi	sp,sp,-24
 100f324:	dcc00315 	stw	r19,12(sp)
 100f328:	dc800215 	stw	r18,8(sp)
 100f32c:	dfc00515 	stw	ra,20(sp)
 100f330:	dd000415 	stw	r20,16(sp)
 100f334:	dc400115 	stw	r17,4(sp)
 100f338:	dc000015 	stw	r16,0(sp)
 100f33c:	1887c83a 	sub	r3,r3,r2
 100f340:	2825883a 	mov	r18,r5
 100f344:	3027883a 	mov	r19,r6
 100f348:	1800141e 	bne	r3,zero,100f39c <__mdiff+0x84>
 100f34c:	1085883a 	add	r2,r2,r2
 100f350:	1085883a 	add	r2,r2,r2
 100f354:	2a000504 	addi	r8,r5,20
 100f358:	34000504 	addi	r16,r6,20
 100f35c:	4087883a 	add	r3,r8,r2
 100f360:	8085883a 	add	r2,r16,r2
 100f364:	00000106 	br	100f36c <__mdiff+0x54>
 100f368:	40c0592e 	bgeu	r8,r3,100f4d0 <__mdiff+0x1b8>
 100f36c:	18ffff04 	addi	r3,r3,-4
 100f370:	10bfff04 	addi	r2,r2,-4
 100f374:	19c00017 	ldw	r7,0(r3)
 100f378:	11400017 	ldw	r5,0(r2)
 100f37c:	397ffa26 	beq	r7,r5,100f368 <__alt_data_end+0xff00f368>
 100f380:	3940592e 	bgeu	r7,r5,100f4e8 <__mdiff+0x1d0>
 100f384:	9005883a 	mov	r2,r18
 100f388:	4023883a 	mov	r17,r8
 100f38c:	9825883a 	mov	r18,r19
 100f390:	05000044 	movi	r20,1
 100f394:	1027883a 	mov	r19,r2
 100f398:	00000406 	br	100f3ac <__mdiff+0x94>
 100f39c:	18005616 	blt	r3,zero,100f4f8 <__mdiff+0x1e0>
 100f3a0:	34400504 	addi	r17,r6,20
 100f3a4:	2c000504 	addi	r16,r5,20
 100f3a8:	0029883a 	mov	r20,zero
 100f3ac:	91400117 	ldw	r5,4(r18)
 100f3b0:	100e9f00 	call	100e9f0 <_Balloc>
 100f3b4:	92400417 	ldw	r9,16(r18)
 100f3b8:	9b000417 	ldw	r12,16(r19)
 100f3bc:	12c00504 	addi	r11,r2,20
 100f3c0:	4a51883a 	add	r8,r9,r9
 100f3c4:	6319883a 	add	r12,r12,r12
 100f3c8:	4211883a 	add	r8,r8,r8
 100f3cc:	6319883a 	add	r12,r12,r12
 100f3d0:	15000315 	stw	r20,12(r2)
 100f3d4:	8211883a 	add	r8,r16,r8
 100f3d8:	8b19883a 	add	r12,r17,r12
 100f3dc:	0007883a 	mov	r3,zero
 100f3e0:	81400017 	ldw	r5,0(r16)
 100f3e4:	89c00017 	ldw	r7,0(r17)
 100f3e8:	59800104 	addi	r6,r11,4
 100f3ec:	293fffcc 	andi	r4,r5,65535
 100f3f0:	20c7883a 	add	r3,r4,r3
 100f3f4:	393fffcc 	andi	r4,r7,65535
 100f3f8:	1909c83a 	sub	r4,r3,r4
 100f3fc:	280ad43a 	srli	r5,r5,16
 100f400:	380ed43a 	srli	r7,r7,16
 100f404:	2007d43a 	srai	r3,r4,16
 100f408:	213fffcc 	andi	r4,r4,65535
 100f40c:	29cbc83a 	sub	r5,r5,r7
 100f410:	28c7883a 	add	r3,r5,r3
 100f414:	180a943a 	slli	r5,r3,16
 100f418:	8c400104 	addi	r17,r17,4
 100f41c:	84000104 	addi	r16,r16,4
 100f420:	2908b03a 	or	r4,r5,r4
 100f424:	59000015 	stw	r4,0(r11)
 100f428:	1807d43a 	srai	r3,r3,16
 100f42c:	3015883a 	mov	r10,r6
 100f430:	3017883a 	mov	r11,r6
 100f434:	8b3fea36 	bltu	r17,r12,100f3e0 <__alt_data_end+0xff00f3e0>
 100f438:	8200162e 	bgeu	r16,r8,100f494 <__mdiff+0x17c>
 100f43c:	8017883a 	mov	r11,r16
 100f440:	59400017 	ldw	r5,0(r11)
 100f444:	31800104 	addi	r6,r6,4
 100f448:	5ac00104 	addi	r11,r11,4
 100f44c:	293fffcc 	andi	r4,r5,65535
 100f450:	20c7883a 	add	r3,r4,r3
 100f454:	280ed43a 	srli	r7,r5,16
 100f458:	180bd43a 	srai	r5,r3,16
 100f45c:	193fffcc 	andi	r4,r3,65535
 100f460:	3947883a 	add	r3,r7,r5
 100f464:	180a943a 	slli	r5,r3,16
 100f468:	1807d43a 	srai	r3,r3,16
 100f46c:	2908b03a 	or	r4,r5,r4
 100f470:	313fff15 	stw	r4,-4(r6)
 100f474:	5a3ff236 	bltu	r11,r8,100f440 <__alt_data_end+0xff00f440>
 100f478:	0406303a 	nor	r3,zero,r16
 100f47c:	1a07883a 	add	r3,r3,r8
 100f480:	1806d0ba 	srli	r3,r3,2
 100f484:	18c00044 	addi	r3,r3,1
 100f488:	18c7883a 	add	r3,r3,r3
 100f48c:	18c7883a 	add	r3,r3,r3
 100f490:	50d5883a 	add	r10,r10,r3
 100f494:	50ffff04 	addi	r3,r10,-4
 100f498:	2000041e 	bne	r4,zero,100f4ac <__mdiff+0x194>
 100f49c:	18ffff04 	addi	r3,r3,-4
 100f4a0:	19000017 	ldw	r4,0(r3)
 100f4a4:	4a7fffc4 	addi	r9,r9,-1
 100f4a8:	203ffc26 	beq	r4,zero,100f49c <__alt_data_end+0xff00f49c>
 100f4ac:	12400415 	stw	r9,16(r2)
 100f4b0:	dfc00517 	ldw	ra,20(sp)
 100f4b4:	dd000417 	ldw	r20,16(sp)
 100f4b8:	dcc00317 	ldw	r19,12(sp)
 100f4bc:	dc800217 	ldw	r18,8(sp)
 100f4c0:	dc400117 	ldw	r17,4(sp)
 100f4c4:	dc000017 	ldw	r16,0(sp)
 100f4c8:	dec00604 	addi	sp,sp,24
 100f4cc:	f800283a 	ret
 100f4d0:	000b883a 	mov	r5,zero
 100f4d4:	100e9f00 	call	100e9f0 <_Balloc>
 100f4d8:	00c00044 	movi	r3,1
 100f4dc:	10c00415 	stw	r3,16(r2)
 100f4e0:	10000515 	stw	zero,20(r2)
 100f4e4:	003ff206 	br	100f4b0 <__alt_data_end+0xff00f4b0>
 100f4e8:	8023883a 	mov	r17,r16
 100f4ec:	0029883a 	mov	r20,zero
 100f4f0:	4021883a 	mov	r16,r8
 100f4f4:	003fad06 	br	100f3ac <__alt_data_end+0xff00f3ac>
 100f4f8:	9005883a 	mov	r2,r18
 100f4fc:	94400504 	addi	r17,r18,20
 100f500:	9c000504 	addi	r16,r19,20
 100f504:	9825883a 	mov	r18,r19
 100f508:	05000044 	movi	r20,1
 100f50c:	1027883a 	mov	r19,r2
 100f510:	003fa606 	br	100f3ac <__alt_data_end+0xff00f3ac>

0100f514 <__ulp>:
 100f514:	295ffc2c 	andhi	r5,r5,32752
 100f518:	00bf3034 	movhi	r2,64704
 100f51c:	2887883a 	add	r3,r5,r2
 100f520:	00c0020e 	bge	zero,r3,100f52c <__ulp+0x18>
 100f524:	0005883a 	mov	r2,zero
 100f528:	f800283a 	ret
 100f52c:	00c7c83a 	sub	r3,zero,r3
 100f530:	1807d53a 	srai	r3,r3,20
 100f534:	008004c4 	movi	r2,19
 100f538:	10c00b0e 	bge	r2,r3,100f568 <__ulp+0x54>
 100f53c:	18bffb04 	addi	r2,r3,-20
 100f540:	01000784 	movi	r4,30
 100f544:	0007883a 	mov	r3,zero
 100f548:	20800516 	blt	r4,r2,100f560 <__ulp+0x4c>
 100f54c:	010007c4 	movi	r4,31
 100f550:	2089c83a 	sub	r4,r4,r2
 100f554:	00800044 	movi	r2,1
 100f558:	1104983a 	sll	r2,r2,r4
 100f55c:	f800283a 	ret
 100f560:	00800044 	movi	r2,1
 100f564:	f800283a 	ret
 100f568:	01400234 	movhi	r5,8
 100f56c:	28c7d83a 	sra	r3,r5,r3
 100f570:	0005883a 	mov	r2,zero
 100f574:	f800283a 	ret

0100f578 <__b2d>:
 100f578:	defffa04 	addi	sp,sp,-24
 100f57c:	dc000015 	stw	r16,0(sp)
 100f580:	24000417 	ldw	r16,16(r4)
 100f584:	dc400115 	stw	r17,4(sp)
 100f588:	24400504 	addi	r17,r4,20
 100f58c:	8421883a 	add	r16,r16,r16
 100f590:	8421883a 	add	r16,r16,r16
 100f594:	8c21883a 	add	r16,r17,r16
 100f598:	dc800215 	stw	r18,8(sp)
 100f59c:	84bfff17 	ldw	r18,-4(r16)
 100f5a0:	dd000415 	stw	r20,16(sp)
 100f5a4:	dcc00315 	stw	r19,12(sp)
 100f5a8:	9009883a 	mov	r4,r18
 100f5ac:	2829883a 	mov	r20,r5
 100f5b0:	dfc00515 	stw	ra,20(sp)
 100f5b4:	100ece40 	call	100ece4 <__hi0bits>
 100f5b8:	00c00804 	movi	r3,32
 100f5bc:	1889c83a 	sub	r4,r3,r2
 100f5c0:	a1000015 	stw	r4,0(r20)
 100f5c4:	01000284 	movi	r4,10
 100f5c8:	84ffff04 	addi	r19,r16,-4
 100f5cc:	20801216 	blt	r4,r2,100f618 <__b2d+0xa0>
 100f5d0:	018002c4 	movi	r6,11
 100f5d4:	308dc83a 	sub	r6,r6,r2
 100f5d8:	9186d83a 	srl	r3,r18,r6
 100f5dc:	18cffc34 	orhi	r3,r3,16368
 100f5e0:	8cc0212e 	bgeu	r17,r19,100f668 <__b2d+0xf0>
 100f5e4:	813ffe17 	ldw	r4,-8(r16)
 100f5e8:	218cd83a 	srl	r6,r4,r6
 100f5ec:	10800544 	addi	r2,r2,21
 100f5f0:	9084983a 	sll	r2,r18,r2
 100f5f4:	1184b03a 	or	r2,r2,r6
 100f5f8:	dfc00517 	ldw	ra,20(sp)
 100f5fc:	dd000417 	ldw	r20,16(sp)
 100f600:	dcc00317 	ldw	r19,12(sp)
 100f604:	dc800217 	ldw	r18,8(sp)
 100f608:	dc400117 	ldw	r17,4(sp)
 100f60c:	dc000017 	ldw	r16,0(sp)
 100f610:	dec00604 	addi	sp,sp,24
 100f614:	f800283a 	ret
 100f618:	8cc00f2e 	bgeu	r17,r19,100f658 <__b2d+0xe0>
 100f61c:	117ffd44 	addi	r5,r2,-11
 100f620:	80bffe17 	ldw	r2,-8(r16)
 100f624:	28000e26 	beq	r5,zero,100f660 <__b2d+0xe8>
 100f628:	1949c83a 	sub	r4,r3,r5
 100f62c:	9164983a 	sll	r18,r18,r5
 100f630:	1106d83a 	srl	r3,r2,r4
 100f634:	81bffe04 	addi	r6,r16,-8
 100f638:	948ffc34 	orhi	r18,r18,16368
 100f63c:	90c6b03a 	or	r3,r18,r3
 100f640:	89800e2e 	bgeu	r17,r6,100f67c <__b2d+0x104>
 100f644:	81bffd17 	ldw	r6,-12(r16)
 100f648:	1144983a 	sll	r2,r2,r5
 100f64c:	310ad83a 	srl	r5,r6,r4
 100f650:	2884b03a 	or	r2,r5,r2
 100f654:	003fe806 	br	100f5f8 <__alt_data_end+0xff00f5f8>
 100f658:	10bffd44 	addi	r2,r2,-11
 100f65c:	1000041e 	bne	r2,zero,100f670 <__b2d+0xf8>
 100f660:	90cffc34 	orhi	r3,r18,16368
 100f664:	003fe406 	br	100f5f8 <__alt_data_end+0xff00f5f8>
 100f668:	000d883a 	mov	r6,zero
 100f66c:	003fdf06 	br	100f5ec <__alt_data_end+0xff00f5ec>
 100f670:	90a4983a 	sll	r18,r18,r2
 100f674:	0005883a 	mov	r2,zero
 100f678:	003ff906 	br	100f660 <__alt_data_end+0xff00f660>
 100f67c:	1144983a 	sll	r2,r2,r5
 100f680:	003fdd06 	br	100f5f8 <__alt_data_end+0xff00f5f8>

0100f684 <__d2b>:
 100f684:	defff804 	addi	sp,sp,-32
 100f688:	dc000215 	stw	r16,8(sp)
 100f68c:	3021883a 	mov	r16,r6
 100f690:	dc400315 	stw	r17,12(sp)
 100f694:	8022907a 	slli	r17,r16,1
 100f698:	dd000615 	stw	r20,24(sp)
 100f69c:	2829883a 	mov	r20,r5
 100f6a0:	01400044 	movi	r5,1
 100f6a4:	dcc00515 	stw	r19,20(sp)
 100f6a8:	dc800415 	stw	r18,16(sp)
 100f6ac:	dfc00715 	stw	ra,28(sp)
 100f6b0:	3825883a 	mov	r18,r7
 100f6b4:	8822d57a 	srli	r17,r17,21
 100f6b8:	100e9f00 	call	100e9f0 <_Balloc>
 100f6bc:	1027883a 	mov	r19,r2
 100f6c0:	00800434 	movhi	r2,16
 100f6c4:	10bfffc4 	addi	r2,r2,-1
 100f6c8:	808c703a 	and	r6,r16,r2
 100f6cc:	88000126 	beq	r17,zero,100f6d4 <__d2b+0x50>
 100f6d0:	31800434 	orhi	r6,r6,16
 100f6d4:	d9800015 	stw	r6,0(sp)
 100f6d8:	a0002426 	beq	r20,zero,100f76c <__d2b+0xe8>
 100f6dc:	d9000104 	addi	r4,sp,4
 100f6e0:	dd000115 	stw	r20,4(sp)
 100f6e4:	100ed4c0 	call	100ed4c <__lo0bits>
 100f6e8:	d8c00017 	ldw	r3,0(sp)
 100f6ec:	10002f1e 	bne	r2,zero,100f7ac <__d2b+0x128>
 100f6f0:	d9000117 	ldw	r4,4(sp)
 100f6f4:	99000515 	stw	r4,20(r19)
 100f6f8:	1821003a 	cmpeq	r16,r3,zero
 100f6fc:	01000084 	movi	r4,2
 100f700:	2421c83a 	sub	r16,r4,r16
 100f704:	98c00615 	stw	r3,24(r19)
 100f708:	9c000415 	stw	r16,16(r19)
 100f70c:	88001f1e 	bne	r17,zero,100f78c <__d2b+0x108>
 100f710:	10bef384 	addi	r2,r2,-1074
 100f714:	90800015 	stw	r2,0(r18)
 100f718:	00900034 	movhi	r2,16384
 100f71c:	10bfffc4 	addi	r2,r2,-1
 100f720:	8085883a 	add	r2,r16,r2
 100f724:	1085883a 	add	r2,r2,r2
 100f728:	1085883a 	add	r2,r2,r2
 100f72c:	9885883a 	add	r2,r19,r2
 100f730:	11000517 	ldw	r4,20(r2)
 100f734:	8020917a 	slli	r16,r16,5
 100f738:	100ece40 	call	100ece4 <__hi0bits>
 100f73c:	d8c00817 	ldw	r3,32(sp)
 100f740:	8085c83a 	sub	r2,r16,r2
 100f744:	18800015 	stw	r2,0(r3)
 100f748:	9805883a 	mov	r2,r19
 100f74c:	dfc00717 	ldw	ra,28(sp)
 100f750:	dd000617 	ldw	r20,24(sp)
 100f754:	dcc00517 	ldw	r19,20(sp)
 100f758:	dc800417 	ldw	r18,16(sp)
 100f75c:	dc400317 	ldw	r17,12(sp)
 100f760:	dc000217 	ldw	r16,8(sp)
 100f764:	dec00804 	addi	sp,sp,32
 100f768:	f800283a 	ret
 100f76c:	d809883a 	mov	r4,sp
 100f770:	100ed4c0 	call	100ed4c <__lo0bits>
 100f774:	d8c00017 	ldw	r3,0(sp)
 100f778:	04000044 	movi	r16,1
 100f77c:	9c000415 	stw	r16,16(r19)
 100f780:	98c00515 	stw	r3,20(r19)
 100f784:	10800804 	addi	r2,r2,32
 100f788:	883fe126 	beq	r17,zero,100f710 <__alt_data_end+0xff00f710>
 100f78c:	00c00d44 	movi	r3,53
 100f790:	8c7ef344 	addi	r17,r17,-1075
 100f794:	88a3883a 	add	r17,r17,r2
 100f798:	1885c83a 	sub	r2,r3,r2
 100f79c:	d8c00817 	ldw	r3,32(sp)
 100f7a0:	94400015 	stw	r17,0(r18)
 100f7a4:	18800015 	stw	r2,0(r3)
 100f7a8:	003fe706 	br	100f748 <__alt_data_end+0xff00f748>
 100f7ac:	01000804 	movi	r4,32
 100f7b0:	2089c83a 	sub	r4,r4,r2
 100f7b4:	1908983a 	sll	r4,r3,r4
 100f7b8:	d9400117 	ldw	r5,4(sp)
 100f7bc:	1886d83a 	srl	r3,r3,r2
 100f7c0:	2148b03a 	or	r4,r4,r5
 100f7c4:	99000515 	stw	r4,20(r19)
 100f7c8:	d8c00015 	stw	r3,0(sp)
 100f7cc:	003fca06 	br	100f6f8 <__alt_data_end+0xff00f6f8>

0100f7d0 <__ratio>:
 100f7d0:	defff904 	addi	sp,sp,-28
 100f7d4:	dc400315 	stw	r17,12(sp)
 100f7d8:	2823883a 	mov	r17,r5
 100f7dc:	d9400104 	addi	r5,sp,4
 100f7e0:	dfc00615 	stw	ra,24(sp)
 100f7e4:	dcc00515 	stw	r19,20(sp)
 100f7e8:	dc800415 	stw	r18,16(sp)
 100f7ec:	2027883a 	mov	r19,r4
 100f7f0:	dc000215 	stw	r16,8(sp)
 100f7f4:	100f5780 	call	100f578 <__b2d>
 100f7f8:	d80b883a 	mov	r5,sp
 100f7fc:	8809883a 	mov	r4,r17
 100f800:	1025883a 	mov	r18,r2
 100f804:	1821883a 	mov	r16,r3
 100f808:	100f5780 	call	100f578 <__b2d>
 100f80c:	8a000417 	ldw	r8,16(r17)
 100f810:	99000417 	ldw	r4,16(r19)
 100f814:	d9400117 	ldw	r5,4(sp)
 100f818:	2209c83a 	sub	r4,r4,r8
 100f81c:	2010917a 	slli	r8,r4,5
 100f820:	d9000017 	ldw	r4,0(sp)
 100f824:	2909c83a 	sub	r4,r5,r4
 100f828:	4109883a 	add	r4,r8,r4
 100f82c:	01000e0e 	bge	zero,r4,100f868 <__ratio+0x98>
 100f830:	2008953a 	slli	r4,r4,20
 100f834:	2421883a 	add	r16,r4,r16
 100f838:	100d883a 	mov	r6,r2
 100f83c:	180f883a 	mov	r7,r3
 100f840:	9009883a 	mov	r4,r18
 100f844:	800b883a 	mov	r5,r16
 100f848:	10156dc0 	call	10156dc <__divdf3>
 100f84c:	dfc00617 	ldw	ra,24(sp)
 100f850:	dcc00517 	ldw	r19,20(sp)
 100f854:	dc800417 	ldw	r18,16(sp)
 100f858:	dc400317 	ldw	r17,12(sp)
 100f85c:	dc000217 	ldw	r16,8(sp)
 100f860:	dec00704 	addi	sp,sp,28
 100f864:	f800283a 	ret
 100f868:	2008953a 	slli	r4,r4,20
 100f86c:	1907c83a 	sub	r3,r3,r4
 100f870:	003ff106 	br	100f838 <__alt_data_end+0xff00f838>

0100f874 <_mprec_log10>:
 100f874:	defffe04 	addi	sp,sp,-8
 100f878:	dc000015 	stw	r16,0(sp)
 100f87c:	dfc00115 	stw	ra,4(sp)
 100f880:	008005c4 	movi	r2,23
 100f884:	2021883a 	mov	r16,r4
 100f888:	11000d0e 	bge	r2,r4,100f8c0 <_mprec_log10+0x4c>
 100f88c:	0005883a 	mov	r2,zero
 100f890:	00cffc34 	movhi	r3,16368
 100f894:	843fffc4 	addi	r16,r16,-1
 100f898:	000d883a 	mov	r6,zero
 100f89c:	01d00934 	movhi	r7,16420
 100f8a0:	1009883a 	mov	r4,r2
 100f8a4:	180b883a 	mov	r5,r3
 100f8a8:	101621c0 	call	101621c <__muldf3>
 100f8ac:	803ff91e 	bne	r16,zero,100f894 <__alt_data_end+0xff00f894>
 100f8b0:	dfc00117 	ldw	ra,4(sp)
 100f8b4:	dc000017 	ldw	r16,0(sp)
 100f8b8:	dec00204 	addi	sp,sp,8
 100f8bc:	f800283a 	ret
 100f8c0:	202090fa 	slli	r16,r4,3
 100f8c4:	008040b4 	movhi	r2,258
 100f8c8:	10abce04 	addi	r2,r2,-20680
 100f8cc:	1421883a 	add	r16,r2,r16
 100f8d0:	80800017 	ldw	r2,0(r16)
 100f8d4:	80c00117 	ldw	r3,4(r16)
 100f8d8:	dfc00117 	ldw	ra,4(sp)
 100f8dc:	dc000017 	ldw	r16,0(sp)
 100f8e0:	dec00204 	addi	sp,sp,8
 100f8e4:	f800283a 	ret

0100f8e8 <__copybits>:
 100f8e8:	297fffc4 	addi	r5,r5,-1
 100f8ec:	280fd17a 	srai	r7,r5,5
 100f8f0:	30c00417 	ldw	r3,16(r6)
 100f8f4:	30800504 	addi	r2,r6,20
 100f8f8:	39c00044 	addi	r7,r7,1
 100f8fc:	18c7883a 	add	r3,r3,r3
 100f900:	39cf883a 	add	r7,r7,r7
 100f904:	18c7883a 	add	r3,r3,r3
 100f908:	39cf883a 	add	r7,r7,r7
 100f90c:	10c7883a 	add	r3,r2,r3
 100f910:	21cf883a 	add	r7,r4,r7
 100f914:	10c00d2e 	bgeu	r2,r3,100f94c <__copybits+0x64>
 100f918:	200b883a 	mov	r5,r4
 100f91c:	12000017 	ldw	r8,0(r2)
 100f920:	29400104 	addi	r5,r5,4
 100f924:	10800104 	addi	r2,r2,4
 100f928:	2a3fff15 	stw	r8,-4(r5)
 100f92c:	10fffb36 	bltu	r2,r3,100f91c <__alt_data_end+0xff00f91c>
 100f930:	1985c83a 	sub	r2,r3,r6
 100f934:	10bffac4 	addi	r2,r2,-21
 100f938:	1004d0ba 	srli	r2,r2,2
 100f93c:	10800044 	addi	r2,r2,1
 100f940:	1085883a 	add	r2,r2,r2
 100f944:	1085883a 	add	r2,r2,r2
 100f948:	2089883a 	add	r4,r4,r2
 100f94c:	21c0032e 	bgeu	r4,r7,100f95c <__copybits+0x74>
 100f950:	20000015 	stw	zero,0(r4)
 100f954:	21000104 	addi	r4,r4,4
 100f958:	21fffd36 	bltu	r4,r7,100f950 <__alt_data_end+0xff00f950>
 100f95c:	f800283a 	ret

0100f960 <__any_on>:
 100f960:	20c00417 	ldw	r3,16(r4)
 100f964:	2805d17a 	srai	r2,r5,5
 100f968:	21000504 	addi	r4,r4,20
 100f96c:	18800d0e 	bge	r3,r2,100f9a4 <__any_on+0x44>
 100f970:	18c7883a 	add	r3,r3,r3
 100f974:	18c7883a 	add	r3,r3,r3
 100f978:	20c7883a 	add	r3,r4,r3
 100f97c:	20c0192e 	bgeu	r4,r3,100f9e4 <__any_on+0x84>
 100f980:	18bfff17 	ldw	r2,-4(r3)
 100f984:	18ffff04 	addi	r3,r3,-4
 100f988:	1000041e 	bne	r2,zero,100f99c <__any_on+0x3c>
 100f98c:	20c0142e 	bgeu	r4,r3,100f9e0 <__any_on+0x80>
 100f990:	18ffff04 	addi	r3,r3,-4
 100f994:	19400017 	ldw	r5,0(r3)
 100f998:	283ffc26 	beq	r5,zero,100f98c <__alt_data_end+0xff00f98c>
 100f99c:	00800044 	movi	r2,1
 100f9a0:	f800283a 	ret
 100f9a4:	10c00a0e 	bge	r2,r3,100f9d0 <__any_on+0x70>
 100f9a8:	1085883a 	add	r2,r2,r2
 100f9ac:	1085883a 	add	r2,r2,r2
 100f9b0:	294007cc 	andi	r5,r5,31
 100f9b4:	2087883a 	add	r3,r4,r2
 100f9b8:	283ff026 	beq	r5,zero,100f97c <__alt_data_end+0xff00f97c>
 100f9bc:	19800017 	ldw	r6,0(r3)
 100f9c0:	3144d83a 	srl	r2,r6,r5
 100f9c4:	114a983a 	sll	r5,r2,r5
 100f9c8:	317ff41e 	bne	r6,r5,100f99c <__alt_data_end+0xff00f99c>
 100f9cc:	003feb06 	br	100f97c <__alt_data_end+0xff00f97c>
 100f9d0:	1085883a 	add	r2,r2,r2
 100f9d4:	1085883a 	add	r2,r2,r2
 100f9d8:	2087883a 	add	r3,r4,r2
 100f9dc:	003fe706 	br	100f97c <__alt_data_end+0xff00f97c>
 100f9e0:	f800283a 	ret
 100f9e4:	0005883a 	mov	r2,zero
 100f9e8:	f800283a 	ret

0100f9ec <_realloc_r>:
 100f9ec:	defff604 	addi	sp,sp,-40
 100f9f0:	dc800215 	stw	r18,8(sp)
 100f9f4:	dfc00915 	stw	ra,36(sp)
 100f9f8:	df000815 	stw	fp,32(sp)
 100f9fc:	ddc00715 	stw	r23,28(sp)
 100fa00:	dd800615 	stw	r22,24(sp)
 100fa04:	dd400515 	stw	r21,20(sp)
 100fa08:	dd000415 	stw	r20,16(sp)
 100fa0c:	dcc00315 	stw	r19,12(sp)
 100fa10:	dc400115 	stw	r17,4(sp)
 100fa14:	dc000015 	stw	r16,0(sp)
 100fa18:	3025883a 	mov	r18,r6
 100fa1c:	2800b726 	beq	r5,zero,100fcfc <_realloc_r+0x310>
 100fa20:	282b883a 	mov	r21,r5
 100fa24:	2029883a 	mov	r20,r4
 100fa28:	1017d440 	call	1017d44 <__malloc_lock>
 100fa2c:	a8bfff17 	ldw	r2,-4(r21)
 100fa30:	043fff04 	movi	r16,-4
 100fa34:	90c002c4 	addi	r3,r18,11
 100fa38:	01000584 	movi	r4,22
 100fa3c:	acfffe04 	addi	r19,r21,-8
 100fa40:	1420703a 	and	r16,r2,r16
 100fa44:	20c0332e 	bgeu	r4,r3,100fb14 <_realloc_r+0x128>
 100fa48:	047ffe04 	movi	r17,-8
 100fa4c:	1c62703a 	and	r17,r3,r17
 100fa50:	8807883a 	mov	r3,r17
 100fa54:	88005816 	blt	r17,zero,100fbb8 <_realloc_r+0x1cc>
 100fa58:	8c805736 	bltu	r17,r18,100fbb8 <_realloc_r+0x1cc>
 100fa5c:	80c0300e 	bge	r16,r3,100fb20 <_realloc_r+0x134>
 100fa60:	070040b4 	movhi	fp,258
 100fa64:	e72daf04 	addi	fp,fp,-18756
 100fa68:	e1c00217 	ldw	r7,8(fp)
 100fa6c:	9c09883a 	add	r4,r19,r16
 100fa70:	22000117 	ldw	r8,4(r4)
 100fa74:	21c06326 	beq	r4,r7,100fc04 <_realloc_r+0x218>
 100fa78:	017fff84 	movi	r5,-2
 100fa7c:	414a703a 	and	r5,r8,r5
 100fa80:	214b883a 	add	r5,r4,r5
 100fa84:	29800117 	ldw	r6,4(r5)
 100fa88:	3180004c 	andi	r6,r6,1
 100fa8c:	30003f26 	beq	r6,zero,100fb8c <_realloc_r+0x1a0>
 100fa90:	1080004c 	andi	r2,r2,1
 100fa94:	10008326 	beq	r2,zero,100fca4 <_realloc_r+0x2b8>
 100fa98:	900b883a 	mov	r5,r18
 100fa9c:	a009883a 	mov	r4,r20
 100faa0:	100dfa40 	call	100dfa4 <_malloc_r>
 100faa4:	1025883a 	mov	r18,r2
 100faa8:	10011e26 	beq	r2,zero,100ff24 <_realloc_r+0x538>
 100faac:	a93fff17 	ldw	r4,-4(r21)
 100fab0:	10fffe04 	addi	r3,r2,-8
 100fab4:	00bfff84 	movi	r2,-2
 100fab8:	2084703a 	and	r2,r4,r2
 100fabc:	9885883a 	add	r2,r19,r2
 100fac0:	1880ee26 	beq	r3,r2,100fe7c <_realloc_r+0x490>
 100fac4:	81bfff04 	addi	r6,r16,-4
 100fac8:	00800904 	movi	r2,36
 100facc:	1180b836 	bltu	r2,r6,100fdb0 <_realloc_r+0x3c4>
 100fad0:	00c004c4 	movi	r3,19
 100fad4:	19809636 	bltu	r3,r6,100fd30 <_realloc_r+0x344>
 100fad8:	9005883a 	mov	r2,r18
 100fadc:	a807883a 	mov	r3,r21
 100fae0:	19000017 	ldw	r4,0(r3)
 100fae4:	11000015 	stw	r4,0(r2)
 100fae8:	19000117 	ldw	r4,4(r3)
 100faec:	11000115 	stw	r4,4(r2)
 100faf0:	18c00217 	ldw	r3,8(r3)
 100faf4:	10c00215 	stw	r3,8(r2)
 100faf8:	a80b883a 	mov	r5,r21
 100fafc:	a009883a 	mov	r4,r20
 100fb00:	10138500 	call	1013850 <_free_r>
 100fb04:	a009883a 	mov	r4,r20
 100fb08:	1017d680 	call	1017d68 <__malloc_unlock>
 100fb0c:	9005883a 	mov	r2,r18
 100fb10:	00001206 	br	100fb5c <_realloc_r+0x170>
 100fb14:	00c00404 	movi	r3,16
 100fb18:	1823883a 	mov	r17,r3
 100fb1c:	003fce06 	br	100fa58 <__alt_data_end+0xff00fa58>
 100fb20:	a825883a 	mov	r18,r21
 100fb24:	8445c83a 	sub	r2,r16,r17
 100fb28:	00c003c4 	movi	r3,15
 100fb2c:	18802636 	bltu	r3,r2,100fbc8 <_realloc_r+0x1dc>
 100fb30:	99800117 	ldw	r6,4(r19)
 100fb34:	9c07883a 	add	r3,r19,r16
 100fb38:	3180004c 	andi	r6,r6,1
 100fb3c:	3420b03a 	or	r16,r6,r16
 100fb40:	9c000115 	stw	r16,4(r19)
 100fb44:	18800117 	ldw	r2,4(r3)
 100fb48:	10800054 	ori	r2,r2,1
 100fb4c:	18800115 	stw	r2,4(r3)
 100fb50:	a009883a 	mov	r4,r20
 100fb54:	1017d680 	call	1017d68 <__malloc_unlock>
 100fb58:	9005883a 	mov	r2,r18
 100fb5c:	dfc00917 	ldw	ra,36(sp)
 100fb60:	df000817 	ldw	fp,32(sp)
 100fb64:	ddc00717 	ldw	r23,28(sp)
 100fb68:	dd800617 	ldw	r22,24(sp)
 100fb6c:	dd400517 	ldw	r21,20(sp)
 100fb70:	dd000417 	ldw	r20,16(sp)
 100fb74:	dcc00317 	ldw	r19,12(sp)
 100fb78:	dc800217 	ldw	r18,8(sp)
 100fb7c:	dc400117 	ldw	r17,4(sp)
 100fb80:	dc000017 	ldw	r16,0(sp)
 100fb84:	dec00a04 	addi	sp,sp,40
 100fb88:	f800283a 	ret
 100fb8c:	017fff04 	movi	r5,-4
 100fb90:	414a703a 	and	r5,r8,r5
 100fb94:	814d883a 	add	r6,r16,r5
 100fb98:	30c01f16 	blt	r6,r3,100fc18 <_realloc_r+0x22c>
 100fb9c:	20800317 	ldw	r2,12(r4)
 100fba0:	20c00217 	ldw	r3,8(r4)
 100fba4:	a825883a 	mov	r18,r21
 100fba8:	3021883a 	mov	r16,r6
 100fbac:	18800315 	stw	r2,12(r3)
 100fbb0:	10c00215 	stw	r3,8(r2)
 100fbb4:	003fdb06 	br	100fb24 <__alt_data_end+0xff00fb24>
 100fbb8:	00800304 	movi	r2,12
 100fbbc:	a0800015 	stw	r2,0(r20)
 100fbc0:	0005883a 	mov	r2,zero
 100fbc4:	003fe506 	br	100fb5c <__alt_data_end+0xff00fb5c>
 100fbc8:	98c00117 	ldw	r3,4(r19)
 100fbcc:	9c4b883a 	add	r5,r19,r17
 100fbd0:	11000054 	ori	r4,r2,1
 100fbd4:	18c0004c 	andi	r3,r3,1
 100fbd8:	1c62b03a 	or	r17,r3,r17
 100fbdc:	9c400115 	stw	r17,4(r19)
 100fbe0:	29000115 	stw	r4,4(r5)
 100fbe4:	2885883a 	add	r2,r5,r2
 100fbe8:	10c00117 	ldw	r3,4(r2)
 100fbec:	29400204 	addi	r5,r5,8
 100fbf0:	a009883a 	mov	r4,r20
 100fbf4:	18c00054 	ori	r3,r3,1
 100fbf8:	10c00115 	stw	r3,4(r2)
 100fbfc:	10138500 	call	1013850 <_free_r>
 100fc00:	003fd306 	br	100fb50 <__alt_data_end+0xff00fb50>
 100fc04:	017fff04 	movi	r5,-4
 100fc08:	414a703a 	and	r5,r8,r5
 100fc0c:	89800404 	addi	r6,r17,16
 100fc10:	8151883a 	add	r8,r16,r5
 100fc14:	4180590e 	bge	r8,r6,100fd7c <_realloc_r+0x390>
 100fc18:	1080004c 	andi	r2,r2,1
 100fc1c:	103f9e1e 	bne	r2,zero,100fa98 <__alt_data_end+0xff00fa98>
 100fc20:	adbffe17 	ldw	r22,-8(r21)
 100fc24:	00bfff04 	movi	r2,-4
 100fc28:	9dadc83a 	sub	r22,r19,r22
 100fc2c:	b1800117 	ldw	r6,4(r22)
 100fc30:	3084703a 	and	r2,r6,r2
 100fc34:	20002026 	beq	r4,zero,100fcb8 <_realloc_r+0x2cc>
 100fc38:	80af883a 	add	r23,r16,r2
 100fc3c:	b96f883a 	add	r23,r23,r5
 100fc40:	21c05f26 	beq	r4,r7,100fdc0 <_realloc_r+0x3d4>
 100fc44:	b8c01c16 	blt	r23,r3,100fcb8 <_realloc_r+0x2cc>
 100fc48:	20800317 	ldw	r2,12(r4)
 100fc4c:	20c00217 	ldw	r3,8(r4)
 100fc50:	81bfff04 	addi	r6,r16,-4
 100fc54:	01000904 	movi	r4,36
 100fc58:	18800315 	stw	r2,12(r3)
 100fc5c:	10c00215 	stw	r3,8(r2)
 100fc60:	b0c00217 	ldw	r3,8(r22)
 100fc64:	b0800317 	ldw	r2,12(r22)
 100fc68:	b4800204 	addi	r18,r22,8
 100fc6c:	18800315 	stw	r2,12(r3)
 100fc70:	10c00215 	stw	r3,8(r2)
 100fc74:	21801b36 	bltu	r4,r6,100fce4 <_realloc_r+0x2f8>
 100fc78:	008004c4 	movi	r2,19
 100fc7c:	1180352e 	bgeu	r2,r6,100fd54 <_realloc_r+0x368>
 100fc80:	a8800017 	ldw	r2,0(r21)
 100fc84:	b0800215 	stw	r2,8(r22)
 100fc88:	a8800117 	ldw	r2,4(r21)
 100fc8c:	b0800315 	stw	r2,12(r22)
 100fc90:	008006c4 	movi	r2,27
 100fc94:	11807f36 	bltu	r2,r6,100fe94 <_realloc_r+0x4a8>
 100fc98:	b0800404 	addi	r2,r22,16
 100fc9c:	ad400204 	addi	r21,r21,8
 100fca0:	00002d06 	br	100fd58 <_realloc_r+0x36c>
 100fca4:	adbffe17 	ldw	r22,-8(r21)
 100fca8:	00bfff04 	movi	r2,-4
 100fcac:	9dadc83a 	sub	r22,r19,r22
 100fcb0:	b1000117 	ldw	r4,4(r22)
 100fcb4:	2084703a 	and	r2,r4,r2
 100fcb8:	b03f7726 	beq	r22,zero,100fa98 <__alt_data_end+0xff00fa98>
 100fcbc:	80af883a 	add	r23,r16,r2
 100fcc0:	b8ff7516 	blt	r23,r3,100fa98 <__alt_data_end+0xff00fa98>
 100fcc4:	b0800317 	ldw	r2,12(r22)
 100fcc8:	b0c00217 	ldw	r3,8(r22)
 100fccc:	81bfff04 	addi	r6,r16,-4
 100fcd0:	01000904 	movi	r4,36
 100fcd4:	18800315 	stw	r2,12(r3)
 100fcd8:	10c00215 	stw	r3,8(r2)
 100fcdc:	b4800204 	addi	r18,r22,8
 100fce0:	21bfe52e 	bgeu	r4,r6,100fc78 <__alt_data_end+0xff00fc78>
 100fce4:	a80b883a 	mov	r5,r21
 100fce8:	9009883a 	mov	r4,r18
 100fcec:	100e8940 	call	100e894 <memmove>
 100fcf0:	b821883a 	mov	r16,r23
 100fcf4:	b027883a 	mov	r19,r22
 100fcf8:	003f8a06 	br	100fb24 <__alt_data_end+0xff00fb24>
 100fcfc:	300b883a 	mov	r5,r6
 100fd00:	dfc00917 	ldw	ra,36(sp)
 100fd04:	df000817 	ldw	fp,32(sp)
 100fd08:	ddc00717 	ldw	r23,28(sp)
 100fd0c:	dd800617 	ldw	r22,24(sp)
 100fd10:	dd400517 	ldw	r21,20(sp)
 100fd14:	dd000417 	ldw	r20,16(sp)
 100fd18:	dcc00317 	ldw	r19,12(sp)
 100fd1c:	dc800217 	ldw	r18,8(sp)
 100fd20:	dc400117 	ldw	r17,4(sp)
 100fd24:	dc000017 	ldw	r16,0(sp)
 100fd28:	dec00a04 	addi	sp,sp,40
 100fd2c:	100dfa41 	jmpi	100dfa4 <_malloc_r>
 100fd30:	a8c00017 	ldw	r3,0(r21)
 100fd34:	90c00015 	stw	r3,0(r18)
 100fd38:	a8c00117 	ldw	r3,4(r21)
 100fd3c:	90c00115 	stw	r3,4(r18)
 100fd40:	00c006c4 	movi	r3,27
 100fd44:	19804536 	bltu	r3,r6,100fe5c <_realloc_r+0x470>
 100fd48:	90800204 	addi	r2,r18,8
 100fd4c:	a8c00204 	addi	r3,r21,8
 100fd50:	003f6306 	br	100fae0 <__alt_data_end+0xff00fae0>
 100fd54:	9005883a 	mov	r2,r18
 100fd58:	a8c00017 	ldw	r3,0(r21)
 100fd5c:	b821883a 	mov	r16,r23
 100fd60:	b027883a 	mov	r19,r22
 100fd64:	10c00015 	stw	r3,0(r2)
 100fd68:	a8c00117 	ldw	r3,4(r21)
 100fd6c:	10c00115 	stw	r3,4(r2)
 100fd70:	a8c00217 	ldw	r3,8(r21)
 100fd74:	10c00215 	stw	r3,8(r2)
 100fd78:	003f6a06 	br	100fb24 <__alt_data_end+0xff00fb24>
 100fd7c:	9c67883a 	add	r19,r19,r17
 100fd80:	4445c83a 	sub	r2,r8,r17
 100fd84:	e4c00215 	stw	r19,8(fp)
 100fd88:	10800054 	ori	r2,r2,1
 100fd8c:	98800115 	stw	r2,4(r19)
 100fd90:	a8bfff17 	ldw	r2,-4(r21)
 100fd94:	a009883a 	mov	r4,r20
 100fd98:	1080004c 	andi	r2,r2,1
 100fd9c:	1462b03a 	or	r17,r2,r17
 100fda0:	ac7fff15 	stw	r17,-4(r21)
 100fda4:	1017d680 	call	1017d68 <__malloc_unlock>
 100fda8:	a805883a 	mov	r2,r21
 100fdac:	003f6b06 	br	100fb5c <__alt_data_end+0xff00fb5c>
 100fdb0:	a80b883a 	mov	r5,r21
 100fdb4:	9009883a 	mov	r4,r18
 100fdb8:	100e8940 	call	100e894 <memmove>
 100fdbc:	003f4e06 	br	100faf8 <__alt_data_end+0xff00faf8>
 100fdc0:	89000404 	addi	r4,r17,16
 100fdc4:	b93fbc16 	blt	r23,r4,100fcb8 <__alt_data_end+0xff00fcb8>
 100fdc8:	b0800317 	ldw	r2,12(r22)
 100fdcc:	b0c00217 	ldw	r3,8(r22)
 100fdd0:	81bfff04 	addi	r6,r16,-4
 100fdd4:	01000904 	movi	r4,36
 100fdd8:	18800315 	stw	r2,12(r3)
 100fddc:	10c00215 	stw	r3,8(r2)
 100fde0:	b4800204 	addi	r18,r22,8
 100fde4:	21804336 	bltu	r4,r6,100fef4 <_realloc_r+0x508>
 100fde8:	008004c4 	movi	r2,19
 100fdec:	11803f2e 	bgeu	r2,r6,100feec <_realloc_r+0x500>
 100fdf0:	a8800017 	ldw	r2,0(r21)
 100fdf4:	b0800215 	stw	r2,8(r22)
 100fdf8:	a8800117 	ldw	r2,4(r21)
 100fdfc:	b0800315 	stw	r2,12(r22)
 100fe00:	008006c4 	movi	r2,27
 100fe04:	11803f36 	bltu	r2,r6,100ff04 <_realloc_r+0x518>
 100fe08:	b0800404 	addi	r2,r22,16
 100fe0c:	ad400204 	addi	r21,r21,8
 100fe10:	a8c00017 	ldw	r3,0(r21)
 100fe14:	10c00015 	stw	r3,0(r2)
 100fe18:	a8c00117 	ldw	r3,4(r21)
 100fe1c:	10c00115 	stw	r3,4(r2)
 100fe20:	a8c00217 	ldw	r3,8(r21)
 100fe24:	10c00215 	stw	r3,8(r2)
 100fe28:	b447883a 	add	r3,r22,r17
 100fe2c:	bc45c83a 	sub	r2,r23,r17
 100fe30:	e0c00215 	stw	r3,8(fp)
 100fe34:	10800054 	ori	r2,r2,1
 100fe38:	18800115 	stw	r2,4(r3)
 100fe3c:	b0800117 	ldw	r2,4(r22)
 100fe40:	a009883a 	mov	r4,r20
 100fe44:	1080004c 	andi	r2,r2,1
 100fe48:	1462b03a 	or	r17,r2,r17
 100fe4c:	b4400115 	stw	r17,4(r22)
 100fe50:	1017d680 	call	1017d68 <__malloc_unlock>
 100fe54:	9005883a 	mov	r2,r18
 100fe58:	003f4006 	br	100fb5c <__alt_data_end+0xff00fb5c>
 100fe5c:	a8c00217 	ldw	r3,8(r21)
 100fe60:	90c00215 	stw	r3,8(r18)
 100fe64:	a8c00317 	ldw	r3,12(r21)
 100fe68:	90c00315 	stw	r3,12(r18)
 100fe6c:	30801126 	beq	r6,r2,100feb4 <_realloc_r+0x4c8>
 100fe70:	90800404 	addi	r2,r18,16
 100fe74:	a8c00404 	addi	r3,r21,16
 100fe78:	003f1906 	br	100fae0 <__alt_data_end+0xff00fae0>
 100fe7c:	90ffff17 	ldw	r3,-4(r18)
 100fe80:	00bfff04 	movi	r2,-4
 100fe84:	a825883a 	mov	r18,r21
 100fe88:	1884703a 	and	r2,r3,r2
 100fe8c:	80a1883a 	add	r16,r16,r2
 100fe90:	003f2406 	br	100fb24 <__alt_data_end+0xff00fb24>
 100fe94:	a8800217 	ldw	r2,8(r21)
 100fe98:	b0800415 	stw	r2,16(r22)
 100fe9c:	a8800317 	ldw	r2,12(r21)
 100fea0:	b0800515 	stw	r2,20(r22)
 100fea4:	31000a26 	beq	r6,r4,100fed0 <_realloc_r+0x4e4>
 100fea8:	b0800604 	addi	r2,r22,24
 100feac:	ad400404 	addi	r21,r21,16
 100feb0:	003fa906 	br	100fd58 <__alt_data_end+0xff00fd58>
 100feb4:	a9000417 	ldw	r4,16(r21)
 100feb8:	90800604 	addi	r2,r18,24
 100febc:	a8c00604 	addi	r3,r21,24
 100fec0:	91000415 	stw	r4,16(r18)
 100fec4:	a9000517 	ldw	r4,20(r21)
 100fec8:	91000515 	stw	r4,20(r18)
 100fecc:	003f0406 	br	100fae0 <__alt_data_end+0xff00fae0>
 100fed0:	a8c00417 	ldw	r3,16(r21)
 100fed4:	ad400604 	addi	r21,r21,24
 100fed8:	b0800804 	addi	r2,r22,32
 100fedc:	b0c00615 	stw	r3,24(r22)
 100fee0:	a8ffff17 	ldw	r3,-4(r21)
 100fee4:	b0c00715 	stw	r3,28(r22)
 100fee8:	003f9b06 	br	100fd58 <__alt_data_end+0xff00fd58>
 100feec:	9005883a 	mov	r2,r18
 100fef0:	003fc706 	br	100fe10 <__alt_data_end+0xff00fe10>
 100fef4:	a80b883a 	mov	r5,r21
 100fef8:	9009883a 	mov	r4,r18
 100fefc:	100e8940 	call	100e894 <memmove>
 100ff00:	003fc906 	br	100fe28 <__alt_data_end+0xff00fe28>
 100ff04:	a8800217 	ldw	r2,8(r21)
 100ff08:	b0800415 	stw	r2,16(r22)
 100ff0c:	a8800317 	ldw	r2,12(r21)
 100ff10:	b0800515 	stw	r2,20(r22)
 100ff14:	31000726 	beq	r6,r4,100ff34 <_realloc_r+0x548>
 100ff18:	b0800604 	addi	r2,r22,24
 100ff1c:	ad400404 	addi	r21,r21,16
 100ff20:	003fbb06 	br	100fe10 <__alt_data_end+0xff00fe10>
 100ff24:	a009883a 	mov	r4,r20
 100ff28:	1017d680 	call	1017d68 <__malloc_unlock>
 100ff2c:	0005883a 	mov	r2,zero
 100ff30:	003f0a06 	br	100fb5c <__alt_data_end+0xff00fb5c>
 100ff34:	a8c00417 	ldw	r3,16(r21)
 100ff38:	ad400604 	addi	r21,r21,24
 100ff3c:	b0800804 	addi	r2,r22,32
 100ff40:	b0c00615 	stw	r3,24(r22)
 100ff44:	a8ffff17 	ldw	r3,-4(r21)
 100ff48:	b0c00715 	stw	r3,28(r22)
 100ff4c:	003fb006 	br	100fe10 <__alt_data_end+0xff00fe10>

0100ff50 <__fpclassifyd>:
 100ff50:	00a00034 	movhi	r2,32768
 100ff54:	10bfffc4 	addi	r2,r2,-1
 100ff58:	2884703a 	and	r2,r5,r2
 100ff5c:	10000726 	beq	r2,zero,100ff7c <__fpclassifyd+0x2c>
 100ff60:	00fffc34 	movhi	r3,65520
 100ff64:	019ff834 	movhi	r6,32736
 100ff68:	28c7883a 	add	r3,r5,r3
 100ff6c:	31bfffc4 	addi	r6,r6,-1
 100ff70:	30c00536 	bltu	r6,r3,100ff88 <__fpclassifyd+0x38>
 100ff74:	00800104 	movi	r2,4
 100ff78:	f800283a 	ret
 100ff7c:	2000021e 	bne	r4,zero,100ff88 <__fpclassifyd+0x38>
 100ff80:	00800084 	movi	r2,2
 100ff84:	f800283a 	ret
 100ff88:	00dffc34 	movhi	r3,32752
 100ff8c:	019ff834 	movhi	r6,32736
 100ff90:	28cb883a 	add	r5,r5,r3
 100ff94:	31bfffc4 	addi	r6,r6,-1
 100ff98:	317ff62e 	bgeu	r6,r5,100ff74 <__alt_data_end+0xff00ff74>
 100ff9c:	01400434 	movhi	r5,16
 100ffa0:	297fffc4 	addi	r5,r5,-1
 100ffa4:	28800236 	bltu	r5,r2,100ffb0 <__fpclassifyd+0x60>
 100ffa8:	008000c4 	movi	r2,3
 100ffac:	f800283a 	ret
 100ffb0:	10c00226 	beq	r2,r3,100ffbc <__fpclassifyd+0x6c>
 100ffb4:	0005883a 	mov	r2,zero
 100ffb8:	f800283a 	ret
 100ffbc:	2005003a 	cmpeq	r2,r4,zero
 100ffc0:	f800283a 	ret

0100ffc4 <_sbrk_r>:
 100ffc4:	defffd04 	addi	sp,sp,-12
 100ffc8:	dc000015 	stw	r16,0(sp)
 100ffcc:	040040b4 	movhi	r16,258
 100ffd0:	dc400115 	stw	r17,4(sp)
 100ffd4:	843a6004 	addi	r16,r16,-5760
 100ffd8:	2023883a 	mov	r17,r4
 100ffdc:	2809883a 	mov	r4,r5
 100ffe0:	dfc00215 	stw	ra,8(sp)
 100ffe4:	80000015 	stw	zero,0(r16)
 100ffe8:	1017f280 	call	1017f28 <sbrk>
 100ffec:	00ffffc4 	movi	r3,-1
 100fff0:	10c00526 	beq	r2,r3,1010008 <_sbrk_r+0x44>
 100fff4:	dfc00217 	ldw	ra,8(sp)
 100fff8:	dc400117 	ldw	r17,4(sp)
 100fffc:	dc000017 	ldw	r16,0(sp)
 1010000:	dec00304 	addi	sp,sp,12
 1010004:	f800283a 	ret
 1010008:	80c00017 	ldw	r3,0(r16)
 101000c:	183ff926 	beq	r3,zero,100fff4 <__alt_data_end+0xff00fff4>
 1010010:	88c00015 	stw	r3,0(r17)
 1010014:	003ff706 	br	100fff4 <__alt_data_end+0xff00fff4>

01010018 <_init_signal_r>:
 1010018:	2080b717 	ldw	r2,732(r4)
 101001c:	10000226 	beq	r2,zero,1010028 <_init_signal_r+0x10>
 1010020:	0005883a 	mov	r2,zero
 1010024:	f800283a 	ret
 1010028:	defffe04 	addi	sp,sp,-8
 101002c:	01402004 	movi	r5,128
 1010030:	dc000015 	stw	r16,0(sp)
 1010034:	dfc00115 	stw	ra,4(sp)
 1010038:	2021883a 	mov	r16,r4
 101003c:	100dfa40 	call	100dfa4 <_malloc_r>
 1010040:	8080b715 	stw	r2,732(r16)
 1010044:	10000d26 	beq	r2,zero,101007c <_init_signal_r+0x64>
 1010048:	0007883a 	mov	r3,zero
 101004c:	01002004 	movi	r4,128
 1010050:	00000106 	br	1010058 <_init_signal_r+0x40>
 1010054:	8080b717 	ldw	r2,732(r16)
 1010058:	10c5883a 	add	r2,r2,r3
 101005c:	10000015 	stw	zero,0(r2)
 1010060:	18c00104 	addi	r3,r3,4
 1010064:	193ffb1e 	bne	r3,r4,1010054 <__alt_data_end+0xff010054>
 1010068:	0005883a 	mov	r2,zero
 101006c:	dfc00117 	ldw	ra,4(sp)
 1010070:	dc000017 	ldw	r16,0(sp)
 1010074:	dec00204 	addi	sp,sp,8
 1010078:	f800283a 	ret
 101007c:	00bfffc4 	movi	r2,-1
 1010080:	003ffa06 	br	101006c <__alt_data_end+0xff01006c>

01010084 <_signal_r>:
 1010084:	00c007c4 	movi	r3,31
 1010088:	19401536 	bltu	r3,r5,10100e0 <_signal_r+0x5c>
 101008c:	2080b717 	ldw	r2,732(r4)
 1010090:	defffc04 	addi	sp,sp,-16
 1010094:	dc800215 	stw	r18,8(sp)
 1010098:	dc400115 	stw	r17,4(sp)
 101009c:	dc000015 	stw	r16,0(sp)
 10100a0:	dfc00315 	stw	ra,12(sp)
 10100a4:	3023883a 	mov	r17,r6
 10100a8:	2021883a 	mov	r16,r4
 10100ac:	2825883a 	mov	r18,r5
 10100b0:	10000f26 	beq	r2,zero,10100f0 <_signal_r+0x6c>
 10100b4:	948b883a 	add	r5,r18,r18
 10100b8:	294b883a 	add	r5,r5,r5
 10100bc:	114b883a 	add	r5,r2,r5
 10100c0:	28800017 	ldw	r2,0(r5)
 10100c4:	2c400015 	stw	r17,0(r5)
 10100c8:	dfc00317 	ldw	ra,12(sp)
 10100cc:	dc800217 	ldw	r18,8(sp)
 10100d0:	dc400117 	ldw	r17,4(sp)
 10100d4:	dc000017 	ldw	r16,0(sp)
 10100d8:	dec00404 	addi	sp,sp,16
 10100dc:	f800283a 	ret
 10100e0:	00c00584 	movi	r3,22
 10100e4:	20c00015 	stw	r3,0(r4)
 10100e8:	00bfffc4 	movi	r2,-1
 10100ec:	f800283a 	ret
 10100f0:	10100180 	call	1010018 <_init_signal_r>
 10100f4:	1000021e 	bne	r2,zero,1010100 <_signal_r+0x7c>
 10100f8:	8080b717 	ldw	r2,732(r16)
 10100fc:	003fed06 	br	10100b4 <__alt_data_end+0xff0100b4>
 1010100:	00bfffc4 	movi	r2,-1
 1010104:	003ff006 	br	10100c8 <__alt_data_end+0xff0100c8>

01010108 <_raise_r>:
 1010108:	008007c4 	movi	r2,31
 101010c:	11402936 	bltu	r2,r5,10101b4 <_raise_r+0xac>
 1010110:	20c0b717 	ldw	r3,732(r4)
 1010114:	defffd04 	addi	sp,sp,-12
 1010118:	dc400115 	stw	r17,4(sp)
 101011c:	dc000015 	stw	r16,0(sp)
 1010120:	dfc00215 	stw	ra,8(sp)
 1010124:	2021883a 	mov	r16,r4
 1010128:	2823883a 	mov	r17,r5
 101012c:	18001726 	beq	r3,zero,101018c <_raise_r+0x84>
 1010130:	2945883a 	add	r2,r5,r5
 1010134:	1085883a 	add	r2,r2,r2
 1010138:	1887883a 	add	r3,r3,r2
 101013c:	19800017 	ldw	r6,0(r3)
 1010140:	30001226 	beq	r6,zero,101018c <_raise_r+0x84>
 1010144:	00800044 	movi	r2,1
 1010148:	30800e26 	beq	r6,r2,1010184 <_raise_r+0x7c>
 101014c:	013fffc4 	movi	r4,-1
 1010150:	31000926 	beq	r6,r4,1010178 <_raise_r+0x70>
 1010154:	18000015 	stw	zero,0(r3)
 1010158:	2809883a 	mov	r4,r5
 101015c:	303ee83a 	callr	r6
 1010160:	0005883a 	mov	r2,zero
 1010164:	dfc00217 	ldw	ra,8(sp)
 1010168:	dc400117 	ldw	r17,4(sp)
 101016c:	dc000017 	ldw	r16,0(sp)
 1010170:	dec00304 	addi	sp,sp,12
 1010174:	f800283a 	ret
 1010178:	00c00584 	movi	r3,22
 101017c:	80c00015 	stw	r3,0(r16)
 1010180:	003ff806 	br	1010164 <__alt_data_end+0xff010164>
 1010184:	0005883a 	mov	r2,zero
 1010188:	003ff606 	br	1010164 <__alt_data_end+0xff010164>
 101018c:	8009883a 	mov	r4,r16
 1010190:	10103180 	call	1010318 <_getpid_r>
 1010194:	880d883a 	mov	r6,r17
 1010198:	100b883a 	mov	r5,r2
 101019c:	8009883a 	mov	r4,r16
 10101a0:	dfc00217 	ldw	ra,8(sp)
 10101a4:	dc400117 	ldw	r17,4(sp)
 10101a8:	dc000017 	ldw	r16,0(sp)
 10101ac:	dec00304 	addi	sp,sp,12
 10101b0:	10102bc1 	jmpi	10102bc <_kill_r>
 10101b4:	00800584 	movi	r2,22
 10101b8:	20800015 	stw	r2,0(r4)
 10101bc:	00bfffc4 	movi	r2,-1
 10101c0:	f800283a 	ret

010101c4 <__sigtramp_r>:
 10101c4:	008007c4 	movi	r2,31
 10101c8:	11402436 	bltu	r2,r5,101025c <__sigtramp_r+0x98>
 10101cc:	20c0b717 	ldw	r3,732(r4)
 10101d0:	defffd04 	addi	sp,sp,-12
 10101d4:	dc400115 	stw	r17,4(sp)
 10101d8:	dc000015 	stw	r16,0(sp)
 10101dc:	dfc00215 	stw	ra,8(sp)
 10101e0:	2021883a 	mov	r16,r4
 10101e4:	2823883a 	mov	r17,r5
 10101e8:	18001826 	beq	r3,zero,101024c <__sigtramp_r+0x88>
 10101ec:	8c45883a 	add	r2,r17,r17
 10101f0:	1085883a 	add	r2,r2,r2
 10101f4:	1885883a 	add	r2,r3,r2
 10101f8:	10c00017 	ldw	r3,0(r2)
 10101fc:	18001126 	beq	r3,zero,1010244 <__sigtramp_r+0x80>
 1010200:	013fffc4 	movi	r4,-1
 1010204:	19000d26 	beq	r3,r4,101023c <__sigtramp_r+0x78>
 1010208:	01000044 	movi	r4,1
 101020c:	19000926 	beq	r3,r4,1010234 <__sigtramp_r+0x70>
 1010210:	10000015 	stw	zero,0(r2)
 1010214:	8809883a 	mov	r4,r17
 1010218:	183ee83a 	callr	r3
 101021c:	0005883a 	mov	r2,zero
 1010220:	dfc00217 	ldw	ra,8(sp)
 1010224:	dc400117 	ldw	r17,4(sp)
 1010228:	dc000017 	ldw	r16,0(sp)
 101022c:	dec00304 	addi	sp,sp,12
 1010230:	f800283a 	ret
 1010234:	008000c4 	movi	r2,3
 1010238:	003ff906 	br	1010220 <__alt_data_end+0xff010220>
 101023c:	00800084 	movi	r2,2
 1010240:	003ff706 	br	1010220 <__alt_data_end+0xff010220>
 1010244:	00800044 	movi	r2,1
 1010248:	003ff506 	br	1010220 <__alt_data_end+0xff010220>
 101024c:	10100180 	call	1010018 <_init_signal_r>
 1010250:	1000041e 	bne	r2,zero,1010264 <__sigtramp_r+0xa0>
 1010254:	80c0b717 	ldw	r3,732(r16)
 1010258:	003fe406 	br	10101ec <__alt_data_end+0xff0101ec>
 101025c:	00bfffc4 	movi	r2,-1
 1010260:	f800283a 	ret
 1010264:	00bfffc4 	movi	r2,-1
 1010268:	003fed06 	br	1010220 <__alt_data_end+0xff010220>

0101026c <raise>:
 101026c:	008040b4 	movhi	r2,258
 1010270:	10b34204 	addi	r2,r2,-13048
 1010274:	200b883a 	mov	r5,r4
 1010278:	11000017 	ldw	r4,0(r2)
 101027c:	10101081 	jmpi	1010108 <_raise_r>

01010280 <signal>:
 1010280:	008040b4 	movhi	r2,258
 1010284:	10b34204 	addi	r2,r2,-13048
 1010288:	280d883a 	mov	r6,r5
 101028c:	200b883a 	mov	r5,r4
 1010290:	11000017 	ldw	r4,0(r2)
 1010294:	10100841 	jmpi	1010084 <_signal_r>

01010298 <_init_signal>:
 1010298:	008040b4 	movhi	r2,258
 101029c:	10b34204 	addi	r2,r2,-13048
 10102a0:	11000017 	ldw	r4,0(r2)
 10102a4:	10100181 	jmpi	1010018 <_init_signal_r>

010102a8 <__sigtramp>:
 10102a8:	008040b4 	movhi	r2,258
 10102ac:	10b34204 	addi	r2,r2,-13048
 10102b0:	200b883a 	mov	r5,r4
 10102b4:	11000017 	ldw	r4,0(r2)
 10102b8:	10101c41 	jmpi	10101c4 <__sigtramp_r>

010102bc <_kill_r>:
 10102bc:	defffd04 	addi	sp,sp,-12
 10102c0:	2805883a 	mov	r2,r5
 10102c4:	dc000015 	stw	r16,0(sp)
 10102c8:	040040b4 	movhi	r16,258
 10102cc:	dc400115 	stw	r17,4(sp)
 10102d0:	843a6004 	addi	r16,r16,-5760
 10102d4:	2023883a 	mov	r17,r4
 10102d8:	300b883a 	mov	r5,r6
 10102dc:	1009883a 	mov	r4,r2
 10102e0:	dfc00215 	stw	ra,8(sp)
 10102e4:	80000015 	stw	zero,0(r16)
 10102e8:	101799c0 	call	101799c <kill>
 10102ec:	00ffffc4 	movi	r3,-1
 10102f0:	10c00526 	beq	r2,r3,1010308 <_kill_r+0x4c>
 10102f4:	dfc00217 	ldw	ra,8(sp)
 10102f8:	dc400117 	ldw	r17,4(sp)
 10102fc:	dc000017 	ldw	r16,0(sp)
 1010300:	dec00304 	addi	sp,sp,12
 1010304:	f800283a 	ret
 1010308:	80c00017 	ldw	r3,0(r16)
 101030c:	183ff926 	beq	r3,zero,10102f4 <__alt_data_end+0xff0102f4>
 1010310:	88c00015 	stw	r3,0(r17)
 1010314:	003ff706 	br	10102f4 <__alt_data_end+0xff0102f4>

01010318 <_getpid_r>:
 1010318:	10176f01 	jmpi	10176f0 <getpid>

0101031c <__sread>:
 101031c:	defffe04 	addi	sp,sp,-8
 1010320:	dc000015 	stw	r16,0(sp)
 1010324:	2821883a 	mov	r16,r5
 1010328:	2940038f 	ldh	r5,14(r5)
 101032c:	dfc00115 	stw	ra,4(sp)
 1010330:	1013d7c0 	call	1013d7c <_read_r>
 1010334:	10000716 	blt	r2,zero,1010354 <__sread+0x38>
 1010338:	80c01417 	ldw	r3,80(r16)
 101033c:	1887883a 	add	r3,r3,r2
 1010340:	80c01415 	stw	r3,80(r16)
 1010344:	dfc00117 	ldw	ra,4(sp)
 1010348:	dc000017 	ldw	r16,0(sp)
 101034c:	dec00204 	addi	sp,sp,8
 1010350:	f800283a 	ret
 1010354:	80c0030b 	ldhu	r3,12(r16)
 1010358:	18fbffcc 	andi	r3,r3,61439
 101035c:	80c0030d 	sth	r3,12(r16)
 1010360:	dfc00117 	ldw	ra,4(sp)
 1010364:	dc000017 	ldw	r16,0(sp)
 1010368:	dec00204 	addi	sp,sp,8
 101036c:	f800283a 	ret

01010370 <__seofread>:
 1010370:	0005883a 	mov	r2,zero
 1010374:	f800283a 	ret

01010378 <__swrite>:
 1010378:	2880030b 	ldhu	r2,12(r5)
 101037c:	defffb04 	addi	sp,sp,-20
 1010380:	dcc00315 	stw	r19,12(sp)
 1010384:	dc800215 	stw	r18,8(sp)
 1010388:	dc400115 	stw	r17,4(sp)
 101038c:	dc000015 	stw	r16,0(sp)
 1010390:	dfc00415 	stw	ra,16(sp)
 1010394:	10c0400c 	andi	r3,r2,256
 1010398:	2821883a 	mov	r16,r5
 101039c:	2023883a 	mov	r17,r4
 10103a0:	3025883a 	mov	r18,r6
 10103a4:	3827883a 	mov	r19,r7
 10103a8:	18000526 	beq	r3,zero,10103c0 <__swrite+0x48>
 10103ac:	2940038f 	ldh	r5,14(r5)
 10103b0:	01c00084 	movi	r7,2
 10103b4:	000d883a 	mov	r6,zero
 10103b8:	1013b600 	call	1013b60 <_lseek_r>
 10103bc:	8080030b 	ldhu	r2,12(r16)
 10103c0:	8140038f 	ldh	r5,14(r16)
 10103c4:	10bbffcc 	andi	r2,r2,61439
 10103c8:	980f883a 	mov	r7,r19
 10103cc:	900d883a 	mov	r6,r18
 10103d0:	8809883a 	mov	r4,r17
 10103d4:	8080030d 	sth	r2,12(r16)
 10103d8:	dfc00417 	ldw	ra,16(sp)
 10103dc:	dcc00317 	ldw	r19,12(sp)
 10103e0:	dc800217 	ldw	r18,8(sp)
 10103e4:	dc400117 	ldw	r17,4(sp)
 10103e8:	dc000017 	ldw	r16,0(sp)
 10103ec:	dec00504 	addi	sp,sp,20
 10103f0:	1012eac1 	jmpi	1012eac <_write_r>

010103f4 <__sseek>:
 10103f4:	defffe04 	addi	sp,sp,-8
 10103f8:	dc000015 	stw	r16,0(sp)
 10103fc:	2821883a 	mov	r16,r5
 1010400:	2940038f 	ldh	r5,14(r5)
 1010404:	dfc00115 	stw	ra,4(sp)
 1010408:	1013b600 	call	1013b60 <_lseek_r>
 101040c:	00ffffc4 	movi	r3,-1
 1010410:	10c00826 	beq	r2,r3,1010434 <__sseek+0x40>
 1010414:	80c0030b 	ldhu	r3,12(r16)
 1010418:	80801415 	stw	r2,80(r16)
 101041c:	18c40014 	ori	r3,r3,4096
 1010420:	80c0030d 	sth	r3,12(r16)
 1010424:	dfc00117 	ldw	ra,4(sp)
 1010428:	dc000017 	ldw	r16,0(sp)
 101042c:	dec00204 	addi	sp,sp,8
 1010430:	f800283a 	ret
 1010434:	80c0030b 	ldhu	r3,12(r16)
 1010438:	18fbffcc 	andi	r3,r3,61439
 101043c:	80c0030d 	sth	r3,12(r16)
 1010440:	dfc00117 	ldw	ra,4(sp)
 1010444:	dc000017 	ldw	r16,0(sp)
 1010448:	dec00204 	addi	sp,sp,8
 101044c:	f800283a 	ret

01010450 <__sclose>:
 1010450:	2940038f 	ldh	r5,14(r5)
 1010454:	10130601 	jmpi	1013060 <_close_r>

01010458 <__ssprint_r>:
 1010458:	30800217 	ldw	r2,8(r6)
 101045c:	defff604 	addi	sp,sp,-40
 1010460:	dc800215 	stw	r18,8(sp)
 1010464:	dfc00915 	stw	ra,36(sp)
 1010468:	df000815 	stw	fp,32(sp)
 101046c:	ddc00715 	stw	r23,28(sp)
 1010470:	dd800615 	stw	r22,24(sp)
 1010474:	dd400515 	stw	r21,20(sp)
 1010478:	dd000415 	stw	r20,16(sp)
 101047c:	dcc00315 	stw	r19,12(sp)
 1010480:	dc400115 	stw	r17,4(sp)
 1010484:	dc000015 	stw	r16,0(sp)
 1010488:	3025883a 	mov	r18,r6
 101048c:	10005826 	beq	r2,zero,10105f0 <__ssprint_r+0x198>
 1010490:	2027883a 	mov	r19,r4
 1010494:	35c00017 	ldw	r23,0(r6)
 1010498:	29000017 	ldw	r4,0(r5)
 101049c:	28800217 	ldw	r2,8(r5)
 10104a0:	2823883a 	mov	r17,r5
 10104a4:	0039883a 	mov	fp,zero
 10104a8:	0021883a 	mov	r16,zero
 10104ac:	80003926 	beq	r16,zero,1010594 <__ssprint_r+0x13c>
 10104b0:	102b883a 	mov	r21,r2
 10104b4:	102d883a 	mov	r22,r2
 10104b8:	80803a36 	bltu	r16,r2,10105a4 <__ssprint_r+0x14c>
 10104bc:	88c0030b 	ldhu	r3,12(r17)
 10104c0:	1881200c 	andi	r2,r3,1152
 10104c4:	10002626 	beq	r2,zero,1010560 <__ssprint_r+0x108>
 10104c8:	88800517 	ldw	r2,20(r17)
 10104cc:	89400417 	ldw	r5,16(r17)
 10104d0:	81800044 	addi	r6,r16,1
 10104d4:	108f883a 	add	r7,r2,r2
 10104d8:	3885883a 	add	r2,r7,r2
 10104dc:	100ed7fa 	srli	r7,r2,31
 10104e0:	216dc83a 	sub	r22,r4,r5
 10104e4:	3589883a 	add	r4,r6,r22
 10104e8:	3885883a 	add	r2,r7,r2
 10104ec:	102bd07a 	srai	r21,r2,1
 10104f0:	a80d883a 	mov	r6,r21
 10104f4:	a900022e 	bgeu	r21,r4,1010500 <__ssprint_r+0xa8>
 10104f8:	202b883a 	mov	r21,r4
 10104fc:	200d883a 	mov	r6,r4
 1010500:	18c1000c 	andi	r3,r3,1024
 1010504:	18002a26 	beq	r3,zero,10105b0 <__ssprint_r+0x158>
 1010508:	300b883a 	mov	r5,r6
 101050c:	9809883a 	mov	r4,r19
 1010510:	100dfa40 	call	100dfa4 <_malloc_r>
 1010514:	1029883a 	mov	r20,r2
 1010518:	10002c26 	beq	r2,zero,10105cc <__ssprint_r+0x174>
 101051c:	89400417 	ldw	r5,16(r17)
 1010520:	b00d883a 	mov	r6,r22
 1010524:	1009883a 	mov	r4,r2
 1010528:	1008d600 	call	1008d60 <memcpy>
 101052c:	8880030b 	ldhu	r2,12(r17)
 1010530:	00fedfc4 	movi	r3,-1153
 1010534:	10c4703a 	and	r2,r2,r3
 1010538:	10802014 	ori	r2,r2,128
 101053c:	8880030d 	sth	r2,12(r17)
 1010540:	a589883a 	add	r4,r20,r22
 1010544:	adadc83a 	sub	r22,r21,r22
 1010548:	8d400515 	stw	r21,20(r17)
 101054c:	8d800215 	stw	r22,8(r17)
 1010550:	8d000415 	stw	r20,16(r17)
 1010554:	89000015 	stw	r4,0(r17)
 1010558:	802b883a 	mov	r21,r16
 101055c:	802d883a 	mov	r22,r16
 1010560:	b00d883a 	mov	r6,r22
 1010564:	e00b883a 	mov	r5,fp
 1010568:	100e8940 	call	100e894 <memmove>
 101056c:	88800217 	ldw	r2,8(r17)
 1010570:	89000017 	ldw	r4,0(r17)
 1010574:	90c00217 	ldw	r3,8(r18)
 1010578:	1545c83a 	sub	r2,r2,r21
 101057c:	2589883a 	add	r4,r4,r22
 1010580:	88800215 	stw	r2,8(r17)
 1010584:	89000015 	stw	r4,0(r17)
 1010588:	1c21c83a 	sub	r16,r3,r16
 101058c:	94000215 	stw	r16,8(r18)
 1010590:	80001726 	beq	r16,zero,10105f0 <__ssprint_r+0x198>
 1010594:	bf000017 	ldw	fp,0(r23)
 1010598:	bc000117 	ldw	r16,4(r23)
 101059c:	bdc00204 	addi	r23,r23,8
 10105a0:	003fc206 	br	10104ac <__alt_data_end+0xff0104ac>
 10105a4:	802b883a 	mov	r21,r16
 10105a8:	802d883a 	mov	r22,r16
 10105ac:	003fec06 	br	1010560 <__alt_data_end+0xff010560>
 10105b0:	9809883a 	mov	r4,r19
 10105b4:	100f9ec0 	call	100f9ec <_realloc_r>
 10105b8:	1029883a 	mov	r20,r2
 10105bc:	103fe01e 	bne	r2,zero,1010540 <__alt_data_end+0xff010540>
 10105c0:	89400417 	ldw	r5,16(r17)
 10105c4:	9809883a 	mov	r4,r19
 10105c8:	10138500 	call	1013850 <_free_r>
 10105cc:	88c0030b 	ldhu	r3,12(r17)
 10105d0:	00800304 	movi	r2,12
 10105d4:	98800015 	stw	r2,0(r19)
 10105d8:	18c01014 	ori	r3,r3,64
 10105dc:	88c0030d 	sth	r3,12(r17)
 10105e0:	00bfffc4 	movi	r2,-1
 10105e4:	90000215 	stw	zero,8(r18)
 10105e8:	90000115 	stw	zero,4(r18)
 10105ec:	00000206 	br	10105f8 <__ssprint_r+0x1a0>
 10105f0:	90000115 	stw	zero,4(r18)
 10105f4:	0005883a 	mov	r2,zero
 10105f8:	dfc00917 	ldw	ra,36(sp)
 10105fc:	df000817 	ldw	fp,32(sp)
 1010600:	ddc00717 	ldw	r23,28(sp)
 1010604:	dd800617 	ldw	r22,24(sp)
 1010608:	dd400517 	ldw	r21,20(sp)
 101060c:	dd000417 	ldw	r20,16(sp)
 1010610:	dcc00317 	ldw	r19,12(sp)
 1010614:	dc800217 	ldw	r18,8(sp)
 1010618:	dc400117 	ldw	r17,4(sp)
 101061c:	dc000017 	ldw	r16,0(sp)
 1010620:	dec00a04 	addi	sp,sp,40
 1010624:	f800283a 	ret

01010628 <___svfiprintf_internal_r>:
 1010628:	2880030b 	ldhu	r2,12(r5)
 101062c:	deffc804 	addi	sp,sp,-224
 1010630:	dcc03115 	stw	r19,196(sp)
 1010634:	dfc03715 	stw	ra,220(sp)
 1010638:	df003615 	stw	fp,216(sp)
 101063c:	ddc03515 	stw	r23,212(sp)
 1010640:	dd803415 	stw	r22,208(sp)
 1010644:	dd403315 	stw	r21,204(sp)
 1010648:	dd003215 	stw	r20,200(sp)
 101064c:	dc803015 	stw	r18,192(sp)
 1010650:	dc402f15 	stw	r17,188(sp)
 1010654:	dc002e15 	stw	r16,184(sp)
 1010658:	d9402715 	stw	r5,156(sp)
 101065c:	d9002a15 	stw	r4,168(sp)
 1010660:	1080200c 	andi	r2,r2,128
 1010664:	d9c02315 	stw	r7,140(sp)
 1010668:	3027883a 	mov	r19,r6
 101066c:	10000226 	beq	r2,zero,1010678 <___svfiprintf_internal_r+0x50>
 1010670:	28800417 	ldw	r2,16(r5)
 1010674:	10041d26 	beq	r2,zero,10116ec <___svfiprintf_internal_r+0x10c4>
 1010678:	dac01a04 	addi	r11,sp,104
 101067c:	dac01e15 	stw	r11,120(sp)
 1010680:	d8801e17 	ldw	r2,120(sp)
 1010684:	dac019c4 	addi	r11,sp,103
 1010688:	dd402a17 	ldw	r21,168(sp)
 101068c:	ddc02717 	ldw	r23,156(sp)
 1010690:	058040b4 	movhi	r22,258
 1010694:	050040b4 	movhi	r20,258
 1010698:	dac01f15 	stw	r11,124(sp)
 101069c:	12d7c83a 	sub	r11,r2,r11
 10106a0:	b5ac0404 	addi	r22,r22,-20464
 10106a4:	a52c0004 	addi	r20,r20,-20480
 10106a8:	dec01a15 	stw	sp,104(sp)
 10106ac:	d8001c15 	stw	zero,112(sp)
 10106b0:	d8001b15 	stw	zero,108(sp)
 10106b4:	d811883a 	mov	r8,sp
 10106b8:	d8002915 	stw	zero,164(sp)
 10106bc:	d8002515 	stw	zero,148(sp)
 10106c0:	dac02b15 	stw	r11,172(sp)
 10106c4:	98800007 	ldb	r2,0(r19)
 10106c8:	1002dd26 	beq	r2,zero,1011240 <___svfiprintf_internal_r+0xc18>
 10106cc:	00c00944 	movi	r3,37
 10106d0:	9823883a 	mov	r17,r19
 10106d4:	10c0021e 	bne	r2,r3,10106e0 <___svfiprintf_internal_r+0xb8>
 10106d8:	00001406 	br	101072c <___svfiprintf_internal_r+0x104>
 10106dc:	10c00326 	beq	r2,r3,10106ec <___svfiprintf_internal_r+0xc4>
 10106e0:	8c400044 	addi	r17,r17,1
 10106e4:	88800007 	ldb	r2,0(r17)
 10106e8:	103ffc1e 	bne	r2,zero,10106dc <__alt_data_end+0xff0106dc>
 10106ec:	8ce1c83a 	sub	r16,r17,r19
 10106f0:	80000e26 	beq	r16,zero,101072c <___svfiprintf_internal_r+0x104>
 10106f4:	d8c01c17 	ldw	r3,112(sp)
 10106f8:	d8801b17 	ldw	r2,108(sp)
 10106fc:	44c00015 	stw	r19,0(r8)
 1010700:	1c07883a 	add	r3,r3,r16
 1010704:	10800044 	addi	r2,r2,1
 1010708:	d8c01c15 	stw	r3,112(sp)
 101070c:	44000115 	stw	r16,4(r8)
 1010710:	d8801b15 	stw	r2,108(sp)
 1010714:	00c001c4 	movi	r3,7
 1010718:	18831e16 	blt	r3,r2,1011394 <___svfiprintf_internal_r+0xd6c>
 101071c:	42000204 	addi	r8,r8,8
 1010720:	dac02517 	ldw	r11,148(sp)
 1010724:	5c17883a 	add	r11,r11,r16
 1010728:	dac02515 	stw	r11,148(sp)
 101072c:	88800007 	ldb	r2,0(r17)
 1010730:	1002c526 	beq	r2,zero,1011248 <___svfiprintf_internal_r+0xc20>
 1010734:	88c00047 	ldb	r3,1(r17)
 1010738:	8cc00044 	addi	r19,r17,1
 101073c:	d8001d85 	stb	zero,118(sp)
 1010740:	0009883a 	mov	r4,zero
 1010744:	000f883a 	mov	r7,zero
 1010748:	043fffc4 	movi	r16,-1
 101074c:	d8002415 	stw	zero,144(sp)
 1010750:	0025883a 	mov	r18,zero
 1010754:	01401604 	movi	r5,88
 1010758:	01800244 	movi	r6,9
 101075c:	02800a84 	movi	r10,42
 1010760:	02401b04 	movi	r9,108
 1010764:	9cc00044 	addi	r19,r19,1
 1010768:	18bff804 	addi	r2,r3,-32
 101076c:	2881dd36 	bltu	r5,r2,1010ee4 <___svfiprintf_internal_r+0x8bc>
 1010770:	100490ba 	slli	r2,r2,2
 1010774:	02c04074 	movhi	r11,257
 1010778:	5ac1e204 	addi	r11,r11,1928
 101077c:	12c5883a 	add	r2,r2,r11
 1010780:	10800017 	ldw	r2,0(r2)
 1010784:	1000683a 	jmp	r2
 1010788:	01010984 	movi	r4,1062
 101078c:	01010ee4 	muli	r4,zero,1083
 1010790:	01010ee4 	muli	r4,zero,1083
 1010794:	01010978 	rdprs	r4,zero,1061
 1010798:	01010ee4 	muli	r4,zero,1083
 101079c:	01010ee4 	muli	r4,zero,1083
 10107a0:	01010ee4 	muli	r4,zero,1083
 10107a4:	01010ee4 	muli	r4,zero,1083
 10107a8:	01010ee4 	muli	r4,zero,1083
 10107ac:	01010ee4 	muli	r4,zero,1083
 10107b0:	010108ec 	andhi	r4,zero,1059
 10107b4:	01010ac8 	cmpgei	r4,zero,1067
 10107b8:	01010ee4 	muli	r4,zero,1083
 10107bc:	01010918 	cmpnei	r4,zero,1060
 10107c0:	01010f18 	cmpnei	r4,zero,1084
 10107c4:	01010ee4 	muli	r4,zero,1083
 10107c8:	01010f0c 	andi	r4,zero,1084
 10107cc:	01010eac 	andhi	r4,zero,1082
 10107d0:	01010eac 	andhi	r4,zero,1082
 10107d4:	01010eac 	andhi	r4,zero,1082
 10107d8:	01010eac 	andhi	r4,zero,1082
 10107dc:	01010eac 	andhi	r4,zero,1082
 10107e0:	01010eac 	andhi	r4,zero,1082
 10107e4:	01010eac 	andhi	r4,zero,1082
 10107e8:	01010eac 	andhi	r4,zero,1082
 10107ec:	01010eac 	andhi	r4,zero,1082
 10107f0:	01010ee4 	muli	r4,zero,1083
 10107f4:	01010ee4 	muli	r4,zero,1083
 10107f8:	01010ee4 	muli	r4,zero,1083
 10107fc:	01010ee4 	muli	r4,zero,1083
 1010800:	01010ee4 	muli	r4,zero,1083
 1010804:	01010ee4 	muli	r4,zero,1083
 1010808:	01010ee4 	muli	r4,zero,1083
 101080c:	01010ee4 	muli	r4,zero,1083
 1010810:	01010ee4 	muli	r4,zero,1083
 1010814:	01010ee4 	muli	r4,zero,1083
 1010818:	01010e48 	cmpgei	r4,zero,1081
 101081c:	01010ee4 	muli	r4,zero,1083
 1010820:	01010ee4 	muli	r4,zero,1083
 1010824:	01010ee4 	muli	r4,zero,1083
 1010828:	01010ee4 	muli	r4,zero,1083
 101082c:	01010ee4 	muli	r4,zero,1083
 1010830:	01010ee4 	muli	r4,zero,1083
 1010834:	01010ee4 	muli	r4,zero,1083
 1010838:	01010ee4 	muli	r4,zero,1083
 101083c:	01010ee4 	muli	r4,zero,1083
 1010840:	01010ee4 	muli	r4,zero,1083
 1010844:	01010fc0 	call	1010fc <__alt_mem_sdram-0xefef04>
 1010848:	01010ee4 	muli	r4,zero,1083
 101084c:	01010ee4 	muli	r4,zero,1083
 1010850:	01010ee4 	muli	r4,zero,1083
 1010854:	01010ee4 	muli	r4,zero,1083
 1010858:	01010ee4 	muli	r4,zero,1083
 101085c:	01010f58 	cmpnei	r4,zero,1085
 1010860:	01010ee4 	muli	r4,zero,1083
 1010864:	01010ee4 	muli	r4,zero,1083
 1010868:	01010c8c 	andi	r4,zero,1074
 101086c:	01010ee4 	muli	r4,zero,1083
 1010870:	01010ee4 	muli	r4,zero,1083
 1010874:	01010ee4 	muli	r4,zero,1083
 1010878:	01010ee4 	muli	r4,zero,1083
 101087c:	01010ee4 	muli	r4,zero,1083
 1010880:	01010ee4 	muli	r4,zero,1083
 1010884:	01010ee4 	muli	r4,zero,1083
 1010888:	01010ee4 	muli	r4,zero,1083
 101088c:	01010ee4 	muli	r4,zero,1083
 1010890:	01010ee4 	muli	r4,zero,1083
 1010894:	01010b7c 	xorhi	r4,zero,1069
 1010898:	01010d28 	cmpgeui	r4,zero,1076
 101089c:	01010ee4 	muli	r4,zero,1083
 10108a0:	01010ee4 	muli	r4,zero,1083
 10108a4:	01010ee4 	muli	r4,zero,1083
 10108a8:	01010d1c 	xori	r4,zero,1076
 10108ac:	01010d28 	cmpgeui	r4,zero,1076
 10108b0:	01010ee4 	muli	r4,zero,1083
 10108b4:	01010ee4 	muli	r4,zero,1083
 10108b8:	01010d0c 	andi	r4,zero,1076
 10108bc:	01010ee4 	muli	r4,zero,1083
 10108c0:	01010cd0 	cmplti	r4,zero,1075
 10108c4:	01010ad8 	cmpnei	r4,zero,1067
 10108c8:	01010924 	muli	r4,zero,1060
 10108cc:	01010e3c 	xorhi	r4,zero,1080
 10108d0:	01010ee4 	muli	r4,zero,1083
 10108d4:	01010df0 	cmpltui	r4,zero,1079
 10108d8:	01010ee4 	muli	r4,zero,1083
 10108dc:	01010a48 	cmpgei	r4,zero,1065
 10108e0:	01010ee4 	muli	r4,zero,1083
 10108e4:	01010ee4 	muli	r4,zero,1083
 10108e8:	010109a4 	muli	r4,zero,1062
 10108ec:	dac02317 	ldw	r11,140(sp)
 10108f0:	5ac00017 	ldw	r11,0(r11)
 10108f4:	dac02415 	stw	r11,144(sp)
 10108f8:	dac02317 	ldw	r11,140(sp)
 10108fc:	58800104 	addi	r2,r11,4
 1010900:	dac02417 	ldw	r11,144(sp)
 1010904:	5802e90e 	bge	r11,zero,10114ac <___svfiprintf_internal_r+0xe84>
 1010908:	dac02417 	ldw	r11,144(sp)
 101090c:	d8802315 	stw	r2,140(sp)
 1010910:	02d7c83a 	sub	r11,zero,r11
 1010914:	dac02415 	stw	r11,144(sp)
 1010918:	94800114 	ori	r18,r18,4
 101091c:	98c00007 	ldb	r3,0(r19)
 1010920:	003f9006 	br	1010764 <__alt_data_end+0xff010764>
 1010924:	00800c04 	movi	r2,48
 1010928:	dac02317 	ldw	r11,140(sp)
 101092c:	d8801d05 	stb	r2,116(sp)
 1010930:	00801e04 	movi	r2,120
 1010934:	d8801d45 	stb	r2,117(sp)
 1010938:	d8001d85 	stb	zero,118(sp)
 101093c:	58c00104 	addi	r3,r11,4
 1010940:	5f000017 	ldw	fp,0(r11)
 1010944:	0013883a 	mov	r9,zero
 1010948:	90800094 	ori	r2,r18,2
 101094c:	80032b16 	blt	r16,zero,10115fc <___svfiprintf_internal_r+0xfd4>
 1010950:	00bfdfc4 	movi	r2,-129
 1010954:	90a4703a 	and	r18,r18,r2
 1010958:	d8c02315 	stw	r3,140(sp)
 101095c:	94800094 	ori	r18,r18,2
 1010960:	e002dc26 	beq	fp,zero,10114d4 <___svfiprintf_internal_r+0xeac>
 1010964:	010040b4 	movhi	r4,258
 1010968:	212ba004 	addi	r4,r4,-20864
 101096c:	0015883a 	mov	r10,zero
 1010970:	d9002915 	stw	r4,164(sp)
 1010974:	00002306 	br	1010a04 <___svfiprintf_internal_r+0x3dc>
 1010978:	94800054 	ori	r18,r18,1
 101097c:	98c00007 	ldb	r3,0(r19)
 1010980:	003f7806 	br	1010764 <__alt_data_end+0xff010764>
 1010984:	38803fcc 	andi	r2,r7,255
 1010988:	1080201c 	xori	r2,r2,128
 101098c:	10bfe004 	addi	r2,r2,-128
 1010990:	1002f31e 	bne	r2,zero,1011560 <___svfiprintf_internal_r+0xf38>
 1010994:	01000044 	movi	r4,1
 1010998:	01c00804 	movi	r7,32
 101099c:	98c00007 	ldb	r3,0(r19)
 10109a0:	003f7006 	br	1010764 <__alt_data_end+0xff010764>
 10109a4:	21003fcc 	andi	r4,r4,255
 10109a8:	2003aa1e 	bne	r4,zero,1011854 <___svfiprintf_internal_r+0x122c>
 10109ac:	008040b4 	movhi	r2,258
 10109b0:	10aba004 	addi	r2,r2,-20864
 10109b4:	d8802915 	stw	r2,164(sp)
 10109b8:	9080080c 	andi	r2,r18,32
 10109bc:	1000ba26 	beq	r2,zero,1010ca8 <___svfiprintf_internal_r+0x680>
 10109c0:	dac02317 	ldw	r11,140(sp)
 10109c4:	5f000017 	ldw	fp,0(r11)
 10109c8:	5a400117 	ldw	r9,4(r11)
 10109cc:	5ac00204 	addi	r11,r11,8
 10109d0:	dac02315 	stw	r11,140(sp)
 10109d4:	9080004c 	andi	r2,r18,1
 10109d8:	10029026 	beq	r2,zero,101141c <___svfiprintf_internal_r+0xdf4>
 10109dc:	e244b03a 	or	r2,fp,r9
 10109e0:	1002d41e 	bne	r2,zero,1011534 <___svfiprintf_internal_r+0xf0c>
 10109e4:	d8001d85 	stb	zero,118(sp)
 10109e8:	80030b16 	blt	r16,zero,1011618 <___svfiprintf_internal_r+0xff0>
 10109ec:	00bfdfc4 	movi	r2,-129
 10109f0:	90a4703a 	and	r18,r18,r2
 10109f4:	0015883a 	mov	r10,zero
 10109f8:	80002426 	beq	r16,zero,1010a8c <___svfiprintf_internal_r+0x464>
 10109fc:	0039883a 	mov	fp,zero
 1010a00:	0013883a 	mov	r9,zero
 1010a04:	d9002917 	ldw	r4,164(sp)
 1010a08:	dc401a04 	addi	r17,sp,104
 1010a0c:	e08003cc 	andi	r2,fp,15
 1010a10:	4806973a 	slli	r3,r9,28
 1010a14:	2085883a 	add	r2,r4,r2
 1010a18:	e038d13a 	srli	fp,fp,4
 1010a1c:	10800003 	ldbu	r2,0(r2)
 1010a20:	4812d13a 	srli	r9,r9,4
 1010a24:	8c7fffc4 	addi	r17,r17,-1
 1010a28:	1f38b03a 	or	fp,r3,fp
 1010a2c:	88800005 	stb	r2,0(r17)
 1010a30:	e244b03a 	or	r2,fp,r9
 1010a34:	103ff51e 	bne	r2,zero,1010a0c <__alt_data_end+0xff010a0c>
 1010a38:	dac01e17 	ldw	r11,120(sp)
 1010a3c:	5c57c83a 	sub	r11,r11,r17
 1010a40:	dac02115 	stw	r11,132(sp)
 1010a44:	00001406 	br	1010a98 <___svfiprintf_internal_r+0x470>
 1010a48:	21003fcc 	andi	r4,r4,255
 1010a4c:	2003741e 	bne	r4,zero,1011820 <___svfiprintf_internal_r+0x11f8>
 1010a50:	9080080c 	andi	r2,r18,32
 1010a54:	10014526 	beq	r2,zero,1010f6c <___svfiprintf_internal_r+0x944>
 1010a58:	dac02317 	ldw	r11,140(sp)
 1010a5c:	d8001d85 	stb	zero,118(sp)
 1010a60:	58c00204 	addi	r3,r11,8
 1010a64:	5f000017 	ldw	fp,0(r11)
 1010a68:	5a400117 	ldw	r9,4(r11)
 1010a6c:	8002d916 	blt	r16,zero,10115d4 <___svfiprintf_internal_r+0xfac>
 1010a70:	013fdfc4 	movi	r4,-129
 1010a74:	e244b03a 	or	r2,fp,r9
 1010a78:	d8c02315 	stw	r3,140(sp)
 1010a7c:	9124703a 	and	r18,r18,r4
 1010a80:	0015883a 	mov	r10,zero
 1010a84:	1000b91e 	bne	r2,zero,1010d6c <___svfiprintf_internal_r+0x744>
 1010a88:	8002e61e 	bne	r16,zero,1011624 <___svfiprintf_internal_r+0xffc>
 1010a8c:	0021883a 	mov	r16,zero
 1010a90:	d8002115 	stw	zero,132(sp)
 1010a94:	dc401a04 	addi	r17,sp,104
 1010a98:	d8c02117 	ldw	r3,132(sp)
 1010a9c:	dc002015 	stw	r16,128(sp)
 1010aa0:	80c0010e 	bge	r16,r3,1010aa8 <___svfiprintf_internal_r+0x480>
 1010aa4:	d8c02015 	stw	r3,128(sp)
 1010aa8:	52803fcc 	andi	r10,r10,255
 1010aac:	5280201c 	xori	r10,r10,128
 1010ab0:	52bfe004 	addi	r10,r10,-128
 1010ab4:	50003c26 	beq	r10,zero,1010ba8 <___svfiprintf_internal_r+0x580>
 1010ab8:	dac02017 	ldw	r11,128(sp)
 1010abc:	5ac00044 	addi	r11,r11,1
 1010ac0:	dac02015 	stw	r11,128(sp)
 1010ac4:	00003806 	br	1010ba8 <___svfiprintf_internal_r+0x580>
 1010ac8:	01000044 	movi	r4,1
 1010acc:	01c00ac4 	movi	r7,43
 1010ad0:	98c00007 	ldb	r3,0(r19)
 1010ad4:	003f2306 	br	1010764 <__alt_data_end+0xff010764>
 1010ad8:	21003fcc 	andi	r4,r4,255
 1010adc:	2003481e 	bne	r4,zero,1011800 <___svfiprintf_internal_r+0x11d8>
 1010ae0:	9080080c 	andi	r2,r18,32
 1010ae4:	10013b26 	beq	r2,zero,1010fd4 <___svfiprintf_internal_r+0x9ac>
 1010ae8:	dac02317 	ldw	r11,140(sp)
 1010aec:	d8001d85 	stb	zero,118(sp)
 1010af0:	58800204 	addi	r2,r11,8
 1010af4:	5f000017 	ldw	fp,0(r11)
 1010af8:	5a400117 	ldw	r9,4(r11)
 1010afc:	8002a816 	blt	r16,zero,10115a0 <___svfiprintf_internal_r+0xf78>
 1010b00:	013fdfc4 	movi	r4,-129
 1010b04:	e246b03a 	or	r3,fp,r9
 1010b08:	d8802315 	stw	r2,140(sp)
 1010b0c:	9124703a 	and	r18,r18,r4
 1010b10:	18013c26 	beq	r3,zero,1011004 <___svfiprintf_internal_r+0x9dc>
 1010b14:	0015883a 	mov	r10,zero
 1010b18:	dc401a04 	addi	r17,sp,104
 1010b1c:	e006d0fa 	srli	r3,fp,3
 1010b20:	4808977a 	slli	r4,r9,29
 1010b24:	4812d0fa 	srli	r9,r9,3
 1010b28:	e70001cc 	andi	fp,fp,7
 1010b2c:	e0800c04 	addi	r2,fp,48
 1010b30:	8c7fffc4 	addi	r17,r17,-1
 1010b34:	20f8b03a 	or	fp,r4,r3
 1010b38:	88800005 	stb	r2,0(r17)
 1010b3c:	e246b03a 	or	r3,fp,r9
 1010b40:	183ff61e 	bne	r3,zero,1010b1c <__alt_data_end+0xff010b1c>
 1010b44:	90c0004c 	andi	r3,r18,1
 1010b48:	1800a526 	beq	r3,zero,1010de0 <___svfiprintf_internal_r+0x7b8>
 1010b4c:	10803fcc 	andi	r2,r2,255
 1010b50:	1080201c 	xori	r2,r2,128
 1010b54:	10bfe004 	addi	r2,r2,-128
 1010b58:	00c00c04 	movi	r3,48
 1010b5c:	10ffb626 	beq	r2,r3,1010a38 <__alt_data_end+0xff010a38>
 1010b60:	88ffffc5 	stb	r3,-1(r17)
 1010b64:	d8c01e17 	ldw	r3,120(sp)
 1010b68:	88bfffc4 	addi	r2,r17,-1
 1010b6c:	1023883a 	mov	r17,r2
 1010b70:	1887c83a 	sub	r3,r3,r2
 1010b74:	d8c02115 	stw	r3,132(sp)
 1010b78:	003fc706 	br	1010a98 <__alt_data_end+0xff010a98>
 1010b7c:	dac02317 	ldw	r11,140(sp)
 1010b80:	00c00044 	movi	r3,1
 1010b84:	d8c02015 	stw	r3,128(sp)
 1010b88:	58800017 	ldw	r2,0(r11)
 1010b8c:	5ac00104 	addi	r11,r11,4
 1010b90:	d8001d85 	stb	zero,118(sp)
 1010b94:	d8801005 	stb	r2,64(sp)
 1010b98:	dac02315 	stw	r11,140(sp)
 1010b9c:	d8c02115 	stw	r3,132(sp)
 1010ba0:	dc401004 	addi	r17,sp,64
 1010ba4:	0021883a 	mov	r16,zero
 1010ba8:	90c0008c 	andi	r3,r18,2
 1010bac:	d8c02215 	stw	r3,136(sp)
 1010bb0:	18000326 	beq	r3,zero,1010bc0 <___svfiprintf_internal_r+0x598>
 1010bb4:	dac02017 	ldw	r11,128(sp)
 1010bb8:	5ac00084 	addi	r11,r11,2
 1010bbc:	dac02015 	stw	r11,128(sp)
 1010bc0:	90c0210c 	andi	r3,r18,132
 1010bc4:	d8c02615 	stw	r3,152(sp)
 1010bc8:	1801131e 	bne	r3,zero,1011018 <___svfiprintf_internal_r+0x9f0>
 1010bcc:	dac02417 	ldw	r11,144(sp)
 1010bd0:	d8c02017 	ldw	r3,128(sp)
 1010bd4:	58f9c83a 	sub	fp,r11,r3
 1010bd8:	07010f0e 	bge	zero,fp,1011018 <___svfiprintf_internal_r+0x9f0>
 1010bdc:	02400404 	movi	r9,16
 1010be0:	d8c01c17 	ldw	r3,112(sp)
 1010be4:	d8801b17 	ldw	r2,108(sp)
 1010be8:	4f02d60e 	bge	r9,fp,1011744 <___svfiprintf_internal_r+0x111c>
 1010bec:	014040b4 	movhi	r5,258
 1010bf0:	296c0404 	addi	r5,r5,-20464
 1010bf4:	d9402815 	stw	r5,160(sp)
 1010bf8:	028001c4 	movi	r10,7
 1010bfc:	00000306 	br	1010c0c <___svfiprintf_internal_r+0x5e4>
 1010c00:	e73ffc04 	addi	fp,fp,-16
 1010c04:	42000204 	addi	r8,r8,8
 1010c08:	4f00150e 	bge	r9,fp,1010c60 <___svfiprintf_internal_r+0x638>
 1010c0c:	18c00404 	addi	r3,r3,16
 1010c10:	10800044 	addi	r2,r2,1
 1010c14:	45800015 	stw	r22,0(r8)
 1010c18:	42400115 	stw	r9,4(r8)
 1010c1c:	d8c01c15 	stw	r3,112(sp)
 1010c20:	d8801b15 	stw	r2,108(sp)
 1010c24:	50bff60e 	bge	r10,r2,1010c00 <__alt_data_end+0xff010c00>
 1010c28:	d9801a04 	addi	r6,sp,104
 1010c2c:	b80b883a 	mov	r5,r23
 1010c30:	a809883a 	mov	r4,r21
 1010c34:	da402c15 	stw	r9,176(sp)
 1010c38:	da802d15 	stw	r10,180(sp)
 1010c3c:	10104580 	call	1010458 <__ssprint_r>
 1010c40:	da402c17 	ldw	r9,176(sp)
 1010c44:	da802d17 	ldw	r10,180(sp)
 1010c48:	1001851e 	bne	r2,zero,1011260 <___svfiprintf_internal_r+0xc38>
 1010c4c:	e73ffc04 	addi	fp,fp,-16
 1010c50:	d8c01c17 	ldw	r3,112(sp)
 1010c54:	d8801b17 	ldw	r2,108(sp)
 1010c58:	d811883a 	mov	r8,sp
 1010c5c:	4f3feb16 	blt	r9,fp,1010c0c <__alt_data_end+0xff010c0c>
 1010c60:	dac02817 	ldw	r11,160(sp)
 1010c64:	e0c7883a 	add	r3,fp,r3
 1010c68:	10800044 	addi	r2,r2,1
 1010c6c:	42c00015 	stw	r11,0(r8)
 1010c70:	47000115 	stw	fp,4(r8)
 1010c74:	d8c01c15 	stw	r3,112(sp)
 1010c78:	d8801b15 	stw	r2,108(sp)
 1010c7c:	010001c4 	movi	r4,7
 1010c80:	2081ee16 	blt	r4,r2,101143c <___svfiprintf_internal_r+0xe14>
 1010c84:	42000204 	addi	r8,r8,8
 1010c88:	0000e506 	br	1011020 <___svfiprintf_internal_r+0x9f8>
 1010c8c:	21003fcc 	andi	r4,r4,255
 1010c90:	2002dd1e 	bne	r4,zero,1011808 <___svfiprintf_internal_r+0x11e0>
 1010c94:	008040b4 	movhi	r2,258
 1010c98:	10ab9b04 	addi	r2,r2,-20884
 1010c9c:	d8802915 	stw	r2,164(sp)
 1010ca0:	9080080c 	andi	r2,r18,32
 1010ca4:	103f461e 	bne	r2,zero,10109c0 <__alt_data_end+0xff0109c0>
 1010ca8:	9080040c 	andi	r2,r18,16
 1010cac:	10022e1e 	bne	r2,zero,1011568 <___svfiprintf_internal_r+0xf40>
 1010cb0:	9080100c 	andi	r2,r18,64
 1010cb4:	dac02317 	ldw	r11,140(sp)
 1010cb8:	10027326 	beq	r2,zero,1011688 <___svfiprintf_internal_r+0x1060>
 1010cbc:	5f00000b 	ldhu	fp,0(r11)
 1010cc0:	5ac00104 	addi	r11,r11,4
 1010cc4:	0013883a 	mov	r9,zero
 1010cc8:	dac02315 	stw	r11,140(sp)
 1010ccc:	003f4106 	br	10109d4 <__alt_data_end+0xff0109d4>
 1010cd0:	21003fcc 	andi	r4,r4,255
 1010cd4:	2002e11e 	bne	r4,zero,101185c <___svfiprintf_internal_r+0x1234>
 1010cd8:	9080080c 	andi	r2,r18,32
 1010cdc:	1002011e 	bne	r2,zero,10114e4 <___svfiprintf_internal_r+0xebc>
 1010ce0:	9080040c 	andi	r2,r18,16
 1010ce4:	10023e1e 	bne	r2,zero,10115e0 <___svfiprintf_internal_r+0xfb8>
 1010ce8:	9480100c 	andi	r18,r18,64
 1010cec:	90023c26 	beq	r18,zero,10115e0 <___svfiprintf_internal_r+0xfb8>
 1010cf0:	dac02317 	ldw	r11,140(sp)
 1010cf4:	58800017 	ldw	r2,0(r11)
 1010cf8:	5ac00104 	addi	r11,r11,4
 1010cfc:	dac02315 	stw	r11,140(sp)
 1010d00:	dac02517 	ldw	r11,148(sp)
 1010d04:	12c0000d 	sth	r11,0(r2)
 1010d08:	003e6e06 	br	10106c4 <__alt_data_end+0xff0106c4>
 1010d0c:	98c00007 	ldb	r3,0(r19)
 1010d10:	1a422926 	beq	r3,r9,10115b8 <___svfiprintf_internal_r+0xf90>
 1010d14:	94800414 	ori	r18,r18,16
 1010d18:	003e9206 	br	1010764 <__alt_data_end+0xff010764>
 1010d1c:	94801014 	ori	r18,r18,64
 1010d20:	98c00007 	ldb	r3,0(r19)
 1010d24:	003e8f06 	br	1010764 <__alt_data_end+0xff010764>
 1010d28:	21003fcc 	andi	r4,r4,255
 1010d2c:	2002c71e 	bne	r4,zero,101184c <___svfiprintf_internal_r+0x1224>
 1010d30:	9080080c 	andi	r2,r18,32
 1010d34:	10004926 	beq	r2,zero,1010e5c <___svfiprintf_internal_r+0x834>
 1010d38:	dac02317 	ldw	r11,140(sp)
 1010d3c:	58800117 	ldw	r2,4(r11)
 1010d40:	5f000017 	ldw	fp,0(r11)
 1010d44:	5ac00204 	addi	r11,r11,8
 1010d48:	dac02315 	stw	r11,140(sp)
 1010d4c:	1013883a 	mov	r9,r2
 1010d50:	10004b16 	blt	r2,zero,1010e80 <___svfiprintf_internal_r+0x858>
 1010d54:	da801d83 	ldbu	r10,118(sp)
 1010d58:	8001cb16 	blt	r16,zero,1011488 <___svfiprintf_internal_r+0xe60>
 1010d5c:	00ffdfc4 	movi	r3,-129
 1010d60:	e244b03a 	or	r2,fp,r9
 1010d64:	90e4703a 	and	r18,r18,r3
 1010d68:	103f4726 	beq	r2,zero,1010a88 <__alt_data_end+0xff010a88>
 1010d6c:	48008c26 	beq	r9,zero,1010fa0 <___svfiprintf_internal_r+0x978>
 1010d70:	dc802015 	stw	r18,128(sp)
 1010d74:	dc002115 	stw	r16,132(sp)
 1010d78:	dc401a04 	addi	r17,sp,104
 1010d7c:	e021883a 	mov	r16,fp
 1010d80:	da002215 	stw	r8,136(sp)
 1010d84:	5039883a 	mov	fp,r10
 1010d88:	4825883a 	mov	r18,r9
 1010d8c:	8009883a 	mov	r4,r16
 1010d90:	900b883a 	mov	r5,r18
 1010d94:	01800284 	movi	r6,10
 1010d98:	000f883a 	mov	r7,zero
 1010d9c:	10147440 	call	1014744 <__umoddi3>
 1010da0:	10800c04 	addi	r2,r2,48
 1010da4:	8c7fffc4 	addi	r17,r17,-1
 1010da8:	8009883a 	mov	r4,r16
 1010dac:	900b883a 	mov	r5,r18
 1010db0:	88800005 	stb	r2,0(r17)
 1010db4:	01800284 	movi	r6,10
 1010db8:	000f883a 	mov	r7,zero
 1010dbc:	10141cc0 	call	10141cc <__udivdi3>
 1010dc0:	1021883a 	mov	r16,r2
 1010dc4:	10c4b03a 	or	r2,r2,r3
 1010dc8:	1825883a 	mov	r18,r3
 1010dcc:	103fef1e 	bne	r2,zero,1010d8c <__alt_data_end+0xff010d8c>
 1010dd0:	dc802017 	ldw	r18,128(sp)
 1010dd4:	dc002117 	ldw	r16,132(sp)
 1010dd8:	da002217 	ldw	r8,136(sp)
 1010ddc:	e015883a 	mov	r10,fp
 1010de0:	d8c01e17 	ldw	r3,120(sp)
 1010de4:	1c47c83a 	sub	r3,r3,r17
 1010de8:	d8c02115 	stw	r3,132(sp)
 1010dec:	003f2a06 	br	1010a98 <__alt_data_end+0xff010a98>
 1010df0:	dac02317 	ldw	r11,140(sp)
 1010df4:	d8001d85 	stb	zero,118(sp)
 1010df8:	5c400017 	ldw	r17,0(r11)
 1010dfc:	5f000104 	addi	fp,r11,4
 1010e00:	88022f26 	beq	r17,zero,10116c0 <___svfiprintf_internal_r+0x1098>
 1010e04:	80022516 	blt	r16,zero,101169c <___svfiprintf_internal_r+0x1074>
 1010e08:	800d883a 	mov	r6,r16
 1010e0c:	000b883a 	mov	r5,zero
 1010e10:	8809883a 	mov	r4,r17
 1010e14:	da002c15 	stw	r8,176(sp)
 1010e18:	100e7b00 	call	100e7b0 <memchr>
 1010e1c:	da002c17 	ldw	r8,176(sp)
 1010e20:	10026426 	beq	r2,zero,10117b4 <___svfiprintf_internal_r+0x118c>
 1010e24:	1445c83a 	sub	r2,r2,r17
 1010e28:	d8802115 	stw	r2,132(sp)
 1010e2c:	da801d83 	ldbu	r10,118(sp)
 1010e30:	df002315 	stw	fp,140(sp)
 1010e34:	0021883a 	mov	r16,zero
 1010e38:	003f1706 	br	1010a98 <__alt_data_end+0xff010a98>
 1010e3c:	94800814 	ori	r18,r18,32
 1010e40:	98c00007 	ldb	r3,0(r19)
 1010e44:	003e4706 	br	1010764 <__alt_data_end+0xff010764>
 1010e48:	21003fcc 	andi	r4,r4,255
 1010e4c:	2002701e 	bne	r4,zero,1011810 <___svfiprintf_internal_r+0x11e8>
 1010e50:	94800414 	ori	r18,r18,16
 1010e54:	9080080c 	andi	r2,r18,32
 1010e58:	103fb71e 	bne	r2,zero,1010d38 <__alt_data_end+0xff010d38>
 1010e5c:	9080040c 	andi	r2,r18,16
 1010e60:	1001ab26 	beq	r2,zero,1011510 <___svfiprintf_internal_r+0xee8>
 1010e64:	dac02317 	ldw	r11,140(sp)
 1010e68:	5f000017 	ldw	fp,0(r11)
 1010e6c:	5ac00104 	addi	r11,r11,4
 1010e70:	dac02315 	stw	r11,140(sp)
 1010e74:	e013d7fa 	srai	r9,fp,31
 1010e78:	4805883a 	mov	r2,r9
 1010e7c:	103fb50e 	bge	r2,zero,1010d54 <__alt_data_end+0xff010d54>
 1010e80:	0739c83a 	sub	fp,zero,fp
 1010e84:	02800b44 	movi	r10,45
 1010e88:	e004c03a 	cmpne	r2,fp,zero
 1010e8c:	0253c83a 	sub	r9,zero,r9
 1010e90:	da801d85 	stb	r10,118(sp)
 1010e94:	4893c83a 	sub	r9,r9,r2
 1010e98:	80023016 	blt	r16,zero,101175c <___svfiprintf_internal_r+0x1134>
 1010e9c:	00bfdfc4 	movi	r2,-129
 1010ea0:	90a4703a 	and	r18,r18,r2
 1010ea4:	483fb21e 	bne	r9,zero,1010d70 <__alt_data_end+0xff010d70>
 1010ea8:	00003d06 	br	1010fa0 <___svfiprintf_internal_r+0x978>
 1010eac:	9817883a 	mov	r11,r19
 1010eb0:	d8002415 	stw	zero,144(sp)
 1010eb4:	18bff404 	addi	r2,r3,-48
 1010eb8:	0019883a 	mov	r12,zero
 1010ebc:	58c00007 	ldb	r3,0(r11)
 1010ec0:	630002a4 	muli	r12,r12,10
 1010ec4:	9cc00044 	addi	r19,r19,1
 1010ec8:	9817883a 	mov	r11,r19
 1010ecc:	1319883a 	add	r12,r2,r12
 1010ed0:	18bff404 	addi	r2,r3,-48
 1010ed4:	30bff92e 	bgeu	r6,r2,1010ebc <__alt_data_end+0xff010ebc>
 1010ed8:	db002415 	stw	r12,144(sp)
 1010edc:	18bff804 	addi	r2,r3,-32
 1010ee0:	28be232e 	bgeu	r5,r2,1010770 <__alt_data_end+0xff010770>
 1010ee4:	21003fcc 	andi	r4,r4,255
 1010ee8:	20024b1e 	bne	r4,zero,1011818 <___svfiprintf_internal_r+0x11f0>
 1010eec:	1800d626 	beq	r3,zero,1011248 <___svfiprintf_internal_r+0xc20>
 1010ef0:	02c00044 	movi	r11,1
 1010ef4:	dac02015 	stw	r11,128(sp)
 1010ef8:	d8c01005 	stb	r3,64(sp)
 1010efc:	d8001d85 	stb	zero,118(sp)
 1010f00:	dac02115 	stw	r11,132(sp)
 1010f04:	dc401004 	addi	r17,sp,64
 1010f08:	003f2606 	br	1010ba4 <__alt_data_end+0xff010ba4>
 1010f0c:	94802014 	ori	r18,r18,128
 1010f10:	98c00007 	ldb	r3,0(r19)
 1010f14:	003e1306 	br	1010764 <__alt_data_end+0xff010764>
 1010f18:	98c00007 	ldb	r3,0(r19)
 1010f1c:	9ac00044 	addi	r11,r19,1
 1010f20:	1a822b26 	beq	r3,r10,10117d0 <___svfiprintf_internal_r+0x11a8>
 1010f24:	18bff404 	addi	r2,r3,-48
 1010f28:	0021883a 	mov	r16,zero
 1010f2c:	30821e36 	bltu	r6,r2,10117a8 <___svfiprintf_internal_r+0x1180>
 1010f30:	58c00007 	ldb	r3,0(r11)
 1010f34:	840002a4 	muli	r16,r16,10
 1010f38:	5cc00044 	addi	r19,r11,1
 1010f3c:	9817883a 	mov	r11,r19
 1010f40:	80a1883a 	add	r16,r16,r2
 1010f44:	18bff404 	addi	r2,r3,-48
 1010f48:	30bff92e 	bgeu	r6,r2,1010f30 <__alt_data_end+0xff010f30>
 1010f4c:	803e060e 	bge	r16,zero,1010768 <__alt_data_end+0xff010768>
 1010f50:	043fffc4 	movi	r16,-1
 1010f54:	003e0406 	br	1010768 <__alt_data_end+0xff010768>
 1010f58:	21003fcc 	andi	r4,r4,255
 1010f5c:	2002371e 	bne	r4,zero,101183c <___svfiprintf_internal_r+0x1214>
 1010f60:	94800414 	ori	r18,r18,16
 1010f64:	9080080c 	andi	r2,r18,32
 1010f68:	103ebb1e 	bne	r2,zero,1010a58 <__alt_data_end+0xff010a58>
 1010f6c:	9080040c 	andi	r2,r18,16
 1010f70:	10013b26 	beq	r2,zero,1011460 <___svfiprintf_internal_r+0xe38>
 1010f74:	dac02317 	ldw	r11,140(sp)
 1010f78:	d8001d85 	stb	zero,118(sp)
 1010f7c:	0013883a 	mov	r9,zero
 1010f80:	58800104 	addi	r2,r11,4
 1010f84:	5f000017 	ldw	fp,0(r11)
 1010f88:	80013d16 	blt	r16,zero,1011480 <___svfiprintf_internal_r+0xe58>
 1010f8c:	00ffdfc4 	movi	r3,-129
 1010f90:	d8802315 	stw	r2,140(sp)
 1010f94:	90e4703a 	and	r18,r18,r3
 1010f98:	0015883a 	mov	r10,zero
 1010f9c:	e03eba26 	beq	fp,zero,1010a88 <__alt_data_end+0xff010a88>
 1010fa0:	00800244 	movi	r2,9
 1010fa4:	173f7236 	bltu	r2,fp,1010d70 <__alt_data_end+0xff010d70>
 1010fa8:	dac02b17 	ldw	r11,172(sp)
 1010fac:	e7000c04 	addi	fp,fp,48
 1010fb0:	df0019c5 	stb	fp,103(sp)
 1010fb4:	dac02115 	stw	r11,132(sp)
 1010fb8:	dc4019c4 	addi	r17,sp,103
 1010fbc:	003eb606 	br	1010a98 <__alt_data_end+0xff010a98>
 1010fc0:	21003fcc 	andi	r4,r4,255
 1010fc4:	20021f1e 	bne	r4,zero,1011844 <___svfiprintf_internal_r+0x121c>
 1010fc8:	94800414 	ori	r18,r18,16
 1010fcc:	9080080c 	andi	r2,r18,32
 1010fd0:	103ec51e 	bne	r2,zero,1010ae8 <__alt_data_end+0xff010ae8>
 1010fd4:	9080040c 	andi	r2,r18,16
 1010fd8:	10016926 	beq	r2,zero,1011580 <___svfiprintf_internal_r+0xf58>
 1010fdc:	dac02317 	ldw	r11,140(sp)
 1010fe0:	d8001d85 	stb	zero,118(sp)
 1010fe4:	0013883a 	mov	r9,zero
 1010fe8:	58800104 	addi	r2,r11,4
 1010fec:	5f000017 	ldw	fp,0(r11)
 1010ff0:	80016b16 	blt	r16,zero,10115a0 <___svfiprintf_internal_r+0xf78>
 1010ff4:	00ffdfc4 	movi	r3,-129
 1010ff8:	d8802315 	stw	r2,140(sp)
 1010ffc:	90e4703a 	and	r18,r18,r3
 1011000:	e03ec41e 	bne	fp,zero,1010b14 <__alt_data_end+0xff010b14>
 1011004:	0015883a 	mov	r10,zero
 1011008:	8001c226 	beq	r16,zero,1011714 <___svfiprintf_internal_r+0x10ec>
 101100c:	0039883a 	mov	fp,zero
 1011010:	0013883a 	mov	r9,zero
 1011014:	003ec006 	br	1010b18 <__alt_data_end+0xff010b18>
 1011018:	d8c01c17 	ldw	r3,112(sp)
 101101c:	d8801b17 	ldw	r2,108(sp)
 1011020:	d9001d87 	ldb	r4,118(sp)
 1011024:	20000b26 	beq	r4,zero,1011054 <___svfiprintf_internal_r+0xa2c>
 1011028:	d9001d84 	addi	r4,sp,118
 101102c:	18c00044 	addi	r3,r3,1
 1011030:	10800044 	addi	r2,r2,1
 1011034:	41000015 	stw	r4,0(r8)
 1011038:	01000044 	movi	r4,1
 101103c:	41000115 	stw	r4,4(r8)
 1011040:	d8c01c15 	stw	r3,112(sp)
 1011044:	d8801b15 	stw	r2,108(sp)
 1011048:	010001c4 	movi	r4,7
 101104c:	2080e116 	blt	r4,r2,10113d4 <___svfiprintf_internal_r+0xdac>
 1011050:	42000204 	addi	r8,r8,8
 1011054:	dac02217 	ldw	r11,136(sp)
 1011058:	58000b26 	beq	r11,zero,1011088 <___svfiprintf_internal_r+0xa60>
 101105c:	d9001d04 	addi	r4,sp,116
 1011060:	18c00084 	addi	r3,r3,2
 1011064:	10800044 	addi	r2,r2,1
 1011068:	41000015 	stw	r4,0(r8)
 101106c:	01000084 	movi	r4,2
 1011070:	41000115 	stw	r4,4(r8)
 1011074:	d8c01c15 	stw	r3,112(sp)
 1011078:	d8801b15 	stw	r2,108(sp)
 101107c:	010001c4 	movi	r4,7
 1011080:	2080dd16 	blt	r4,r2,10113f8 <___svfiprintf_internal_r+0xdd0>
 1011084:	42000204 	addi	r8,r8,8
 1011088:	dac02617 	ldw	r11,152(sp)
 101108c:	01002004 	movi	r4,128
 1011090:	59008426 	beq	r11,r4,10112a4 <___svfiprintf_internal_r+0xc7c>
 1011094:	dac02117 	ldw	r11,132(sp)
 1011098:	82e1c83a 	sub	r16,r16,r11
 101109c:	0400270e 	bge	zero,r16,101113c <___svfiprintf_internal_r+0xb14>
 10110a0:	01c00404 	movi	r7,16
 10110a4:	3c016a0e 	bge	r7,r16,1011650 <___svfiprintf_internal_r+0x1028>
 10110a8:	014040b4 	movhi	r5,258
 10110ac:	296c0004 	addi	r5,r5,-20480
 10110b0:	d9402215 	stw	r5,136(sp)
 10110b4:	070001c4 	movi	fp,7
 10110b8:	00000306 	br	10110c8 <___svfiprintf_internal_r+0xaa0>
 10110bc:	843ffc04 	addi	r16,r16,-16
 10110c0:	42000204 	addi	r8,r8,8
 10110c4:	3c00130e 	bge	r7,r16,1011114 <___svfiprintf_internal_r+0xaec>
 10110c8:	18c00404 	addi	r3,r3,16
 10110cc:	10800044 	addi	r2,r2,1
 10110d0:	45000015 	stw	r20,0(r8)
 10110d4:	41c00115 	stw	r7,4(r8)
 10110d8:	d8c01c15 	stw	r3,112(sp)
 10110dc:	d8801b15 	stw	r2,108(sp)
 10110e0:	e0bff60e 	bge	fp,r2,10110bc <__alt_data_end+0xff0110bc>
 10110e4:	d9801a04 	addi	r6,sp,104
 10110e8:	b80b883a 	mov	r5,r23
 10110ec:	a809883a 	mov	r4,r21
 10110f0:	d9c02c15 	stw	r7,176(sp)
 10110f4:	10104580 	call	1010458 <__ssprint_r>
 10110f8:	d9c02c17 	ldw	r7,176(sp)
 10110fc:	1000581e 	bne	r2,zero,1011260 <___svfiprintf_internal_r+0xc38>
 1011100:	843ffc04 	addi	r16,r16,-16
 1011104:	d8c01c17 	ldw	r3,112(sp)
 1011108:	d8801b17 	ldw	r2,108(sp)
 101110c:	d811883a 	mov	r8,sp
 1011110:	3c3fed16 	blt	r7,r16,10110c8 <__alt_data_end+0xff0110c8>
 1011114:	dac02217 	ldw	r11,136(sp)
 1011118:	1c07883a 	add	r3,r3,r16
 101111c:	10800044 	addi	r2,r2,1
 1011120:	42c00015 	stw	r11,0(r8)
 1011124:	44000115 	stw	r16,4(r8)
 1011128:	d8c01c15 	stw	r3,112(sp)
 101112c:	d8801b15 	stw	r2,108(sp)
 1011130:	010001c4 	movi	r4,7
 1011134:	20809e16 	blt	r4,r2,10113b0 <___svfiprintf_internal_r+0xd88>
 1011138:	42000204 	addi	r8,r8,8
 101113c:	dac02117 	ldw	r11,132(sp)
 1011140:	10800044 	addi	r2,r2,1
 1011144:	44400015 	stw	r17,0(r8)
 1011148:	58c7883a 	add	r3,r11,r3
 101114c:	42c00115 	stw	r11,4(r8)
 1011150:	d8c01c15 	stw	r3,112(sp)
 1011154:	d8801b15 	stw	r2,108(sp)
 1011158:	010001c4 	movi	r4,7
 101115c:	20807f16 	blt	r4,r2,101135c <___svfiprintf_internal_r+0xd34>
 1011160:	42000204 	addi	r8,r8,8
 1011164:	9480010c 	andi	r18,r18,4
 1011168:	90002926 	beq	r18,zero,1011210 <___svfiprintf_internal_r+0xbe8>
 101116c:	dac02417 	ldw	r11,144(sp)
 1011170:	d8802017 	ldw	r2,128(sp)
 1011174:	58a1c83a 	sub	r16,r11,r2
 1011178:	0400250e 	bge	zero,r16,1011210 <___svfiprintf_internal_r+0xbe8>
 101117c:	04400404 	movi	r17,16
 1011180:	d8801b17 	ldw	r2,108(sp)
 1011184:	8c017c0e 	bge	r17,r16,1011778 <___svfiprintf_internal_r+0x1150>
 1011188:	014040b4 	movhi	r5,258
 101118c:	296c0404 	addi	r5,r5,-20464
 1011190:	d9402815 	stw	r5,160(sp)
 1011194:	048001c4 	movi	r18,7
 1011198:	00000306 	br	10111a8 <___svfiprintf_internal_r+0xb80>
 101119c:	843ffc04 	addi	r16,r16,-16
 10111a0:	42000204 	addi	r8,r8,8
 10111a4:	8c00110e 	bge	r17,r16,10111ec <___svfiprintf_internal_r+0xbc4>
 10111a8:	18c00404 	addi	r3,r3,16
 10111ac:	10800044 	addi	r2,r2,1
 10111b0:	45800015 	stw	r22,0(r8)
 10111b4:	44400115 	stw	r17,4(r8)
 10111b8:	d8c01c15 	stw	r3,112(sp)
 10111bc:	d8801b15 	stw	r2,108(sp)
 10111c0:	90bff60e 	bge	r18,r2,101119c <__alt_data_end+0xff01119c>
 10111c4:	d9801a04 	addi	r6,sp,104
 10111c8:	b80b883a 	mov	r5,r23
 10111cc:	a809883a 	mov	r4,r21
 10111d0:	10104580 	call	1010458 <__ssprint_r>
 10111d4:	1000221e 	bne	r2,zero,1011260 <___svfiprintf_internal_r+0xc38>
 10111d8:	843ffc04 	addi	r16,r16,-16
 10111dc:	d8c01c17 	ldw	r3,112(sp)
 10111e0:	d8801b17 	ldw	r2,108(sp)
 10111e4:	d811883a 	mov	r8,sp
 10111e8:	8c3fef16 	blt	r17,r16,10111a8 <__alt_data_end+0xff0111a8>
 10111ec:	dac02817 	ldw	r11,160(sp)
 10111f0:	1c07883a 	add	r3,r3,r16
 10111f4:	10800044 	addi	r2,r2,1
 10111f8:	42c00015 	stw	r11,0(r8)
 10111fc:	44000115 	stw	r16,4(r8)
 1011200:	d8c01c15 	stw	r3,112(sp)
 1011204:	d8801b15 	stw	r2,108(sp)
 1011208:	010001c4 	movi	r4,7
 101120c:	2080aa16 	blt	r4,r2,10114b8 <___svfiprintf_internal_r+0xe90>
 1011210:	d8802417 	ldw	r2,144(sp)
 1011214:	dac02017 	ldw	r11,128(sp)
 1011218:	12c0010e 	bge	r2,r11,1011220 <___svfiprintf_internal_r+0xbf8>
 101121c:	5805883a 	mov	r2,r11
 1011220:	dac02517 	ldw	r11,148(sp)
 1011224:	5897883a 	add	r11,r11,r2
 1011228:	dac02515 	stw	r11,148(sp)
 101122c:	1800531e 	bne	r3,zero,101137c <___svfiprintf_internal_r+0xd54>
 1011230:	98800007 	ldb	r2,0(r19)
 1011234:	d8001b15 	stw	zero,108(sp)
 1011238:	d811883a 	mov	r8,sp
 101123c:	103d231e 	bne	r2,zero,10106cc <__alt_data_end+0xff0106cc>
 1011240:	9823883a 	mov	r17,r19
 1011244:	003d3906 	br	101072c <__alt_data_end+0xff01072c>
 1011248:	d8801c17 	ldw	r2,112(sp)
 101124c:	10000426 	beq	r2,zero,1011260 <___svfiprintf_internal_r+0xc38>
 1011250:	d9402717 	ldw	r5,156(sp)
 1011254:	d9002a17 	ldw	r4,168(sp)
 1011258:	d9801a04 	addi	r6,sp,104
 101125c:	10104580 	call	1010458 <__ssprint_r>
 1011260:	dac02717 	ldw	r11,156(sp)
 1011264:	d8802517 	ldw	r2,148(sp)
 1011268:	58c0030b 	ldhu	r3,12(r11)
 101126c:	18c0100c 	andi	r3,r3,64
 1011270:	1801381e 	bne	r3,zero,1011754 <___svfiprintf_internal_r+0x112c>
 1011274:	dfc03717 	ldw	ra,220(sp)
 1011278:	df003617 	ldw	fp,216(sp)
 101127c:	ddc03517 	ldw	r23,212(sp)
 1011280:	dd803417 	ldw	r22,208(sp)
 1011284:	dd403317 	ldw	r21,204(sp)
 1011288:	dd003217 	ldw	r20,200(sp)
 101128c:	dcc03117 	ldw	r19,196(sp)
 1011290:	dc803017 	ldw	r18,192(sp)
 1011294:	dc402f17 	ldw	r17,188(sp)
 1011298:	dc002e17 	ldw	r16,184(sp)
 101129c:	dec03804 	addi	sp,sp,224
 10112a0:	f800283a 	ret
 10112a4:	dac02417 	ldw	r11,144(sp)
 10112a8:	d9002017 	ldw	r4,128(sp)
 10112ac:	5939c83a 	sub	fp,r11,r4
 10112b0:	073f780e 	bge	zero,fp,1011094 <__alt_data_end+0xff011094>
 10112b4:	02400404 	movi	r9,16
 10112b8:	4f01370e 	bge	r9,fp,1011798 <___svfiprintf_internal_r+0x1170>
 10112bc:	02c040b4 	movhi	r11,258
 10112c0:	5aec0004 	addi	r11,r11,-20480
 10112c4:	dac02215 	stw	r11,136(sp)
 10112c8:	028001c4 	movi	r10,7
 10112cc:	00000306 	br	10112dc <___svfiprintf_internal_r+0xcb4>
 10112d0:	e73ffc04 	addi	fp,fp,-16
 10112d4:	42000204 	addi	r8,r8,8
 10112d8:	4f00150e 	bge	r9,fp,1011330 <___svfiprintf_internal_r+0xd08>
 10112dc:	18c00404 	addi	r3,r3,16
 10112e0:	10800044 	addi	r2,r2,1
 10112e4:	45000015 	stw	r20,0(r8)
 10112e8:	42400115 	stw	r9,4(r8)
 10112ec:	d8c01c15 	stw	r3,112(sp)
 10112f0:	d8801b15 	stw	r2,108(sp)
 10112f4:	50bff60e 	bge	r10,r2,10112d0 <__alt_data_end+0xff0112d0>
 10112f8:	d9801a04 	addi	r6,sp,104
 10112fc:	b80b883a 	mov	r5,r23
 1011300:	a809883a 	mov	r4,r21
 1011304:	da402c15 	stw	r9,176(sp)
 1011308:	da802d15 	stw	r10,180(sp)
 101130c:	10104580 	call	1010458 <__ssprint_r>
 1011310:	da402c17 	ldw	r9,176(sp)
 1011314:	da802d17 	ldw	r10,180(sp)
 1011318:	103fd11e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 101131c:	e73ffc04 	addi	fp,fp,-16
 1011320:	d8c01c17 	ldw	r3,112(sp)
 1011324:	d8801b17 	ldw	r2,108(sp)
 1011328:	d811883a 	mov	r8,sp
 101132c:	4f3feb16 	blt	r9,fp,10112dc <__alt_data_end+0xff0112dc>
 1011330:	dac02217 	ldw	r11,136(sp)
 1011334:	1f07883a 	add	r3,r3,fp
 1011338:	10800044 	addi	r2,r2,1
 101133c:	42c00015 	stw	r11,0(r8)
 1011340:	47000115 	stw	fp,4(r8)
 1011344:	d8c01c15 	stw	r3,112(sp)
 1011348:	d8801b15 	stw	r2,108(sp)
 101134c:	010001c4 	movi	r4,7
 1011350:	2080b616 	blt	r4,r2,101162c <___svfiprintf_internal_r+0x1004>
 1011354:	42000204 	addi	r8,r8,8
 1011358:	003f4e06 	br	1011094 <__alt_data_end+0xff011094>
 101135c:	d9801a04 	addi	r6,sp,104
 1011360:	b80b883a 	mov	r5,r23
 1011364:	a809883a 	mov	r4,r21
 1011368:	10104580 	call	1010458 <__ssprint_r>
 101136c:	103fbc1e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 1011370:	d8c01c17 	ldw	r3,112(sp)
 1011374:	d811883a 	mov	r8,sp
 1011378:	003f7a06 	br	1011164 <__alt_data_end+0xff011164>
 101137c:	d9801a04 	addi	r6,sp,104
 1011380:	b80b883a 	mov	r5,r23
 1011384:	a809883a 	mov	r4,r21
 1011388:	10104580 	call	1010458 <__ssprint_r>
 101138c:	103fa826 	beq	r2,zero,1011230 <__alt_data_end+0xff011230>
 1011390:	003fb306 	br	1011260 <__alt_data_end+0xff011260>
 1011394:	d9801a04 	addi	r6,sp,104
 1011398:	b80b883a 	mov	r5,r23
 101139c:	a809883a 	mov	r4,r21
 10113a0:	10104580 	call	1010458 <__ssprint_r>
 10113a4:	103fae1e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 10113a8:	d811883a 	mov	r8,sp
 10113ac:	003cdc06 	br	1010720 <__alt_data_end+0xff010720>
 10113b0:	d9801a04 	addi	r6,sp,104
 10113b4:	b80b883a 	mov	r5,r23
 10113b8:	a809883a 	mov	r4,r21
 10113bc:	10104580 	call	1010458 <__ssprint_r>
 10113c0:	103fa71e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 10113c4:	d8c01c17 	ldw	r3,112(sp)
 10113c8:	d8801b17 	ldw	r2,108(sp)
 10113cc:	d811883a 	mov	r8,sp
 10113d0:	003f5a06 	br	101113c <__alt_data_end+0xff01113c>
 10113d4:	d9801a04 	addi	r6,sp,104
 10113d8:	b80b883a 	mov	r5,r23
 10113dc:	a809883a 	mov	r4,r21
 10113e0:	10104580 	call	1010458 <__ssprint_r>
 10113e4:	103f9e1e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 10113e8:	d8c01c17 	ldw	r3,112(sp)
 10113ec:	d8801b17 	ldw	r2,108(sp)
 10113f0:	d811883a 	mov	r8,sp
 10113f4:	003f1706 	br	1011054 <__alt_data_end+0xff011054>
 10113f8:	d9801a04 	addi	r6,sp,104
 10113fc:	b80b883a 	mov	r5,r23
 1011400:	a809883a 	mov	r4,r21
 1011404:	10104580 	call	1010458 <__ssprint_r>
 1011408:	103f951e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 101140c:	d8c01c17 	ldw	r3,112(sp)
 1011410:	d8801b17 	ldw	r2,108(sp)
 1011414:	d811883a 	mov	r8,sp
 1011418:	003f1b06 	br	1011088 <__alt_data_end+0xff011088>
 101141c:	d8001d85 	stb	zero,118(sp)
 1011420:	80007b16 	blt	r16,zero,1011610 <___svfiprintf_internal_r+0xfe8>
 1011424:	00ffdfc4 	movi	r3,-129
 1011428:	e244b03a 	or	r2,fp,r9
 101142c:	90e4703a 	and	r18,r18,r3
 1011430:	103d7026 	beq	r2,zero,10109f4 <__alt_data_end+0xff0109f4>
 1011434:	0015883a 	mov	r10,zero
 1011438:	003d7206 	br	1010a04 <__alt_data_end+0xff010a04>
 101143c:	d9801a04 	addi	r6,sp,104
 1011440:	b80b883a 	mov	r5,r23
 1011444:	a809883a 	mov	r4,r21
 1011448:	10104580 	call	1010458 <__ssprint_r>
 101144c:	103f841e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 1011450:	d8c01c17 	ldw	r3,112(sp)
 1011454:	d8801b17 	ldw	r2,108(sp)
 1011458:	d811883a 	mov	r8,sp
 101145c:	003ef006 	br	1011020 <__alt_data_end+0xff011020>
 1011460:	9080100c 	andi	r2,r18,64
 1011464:	d8001d85 	stb	zero,118(sp)
 1011468:	dac02317 	ldw	r11,140(sp)
 101146c:	10008126 	beq	r2,zero,1011674 <___svfiprintf_internal_r+0x104c>
 1011470:	58800104 	addi	r2,r11,4
 1011474:	5f00000b 	ldhu	fp,0(r11)
 1011478:	0013883a 	mov	r9,zero
 101147c:	803ec30e 	bge	r16,zero,1010f8c <__alt_data_end+0xff010f8c>
 1011480:	d8802315 	stw	r2,140(sp)
 1011484:	0015883a 	mov	r10,zero
 1011488:	e244b03a 	or	r2,fp,r9
 101148c:	103e371e 	bne	r2,zero,1010d6c <__alt_data_end+0xff010d6c>
 1011490:	00800044 	movi	r2,1
 1011494:	10803fcc 	andi	r2,r2,255
 1011498:	00c00044 	movi	r3,1
 101149c:	10c06126 	beq	r2,r3,1011624 <___svfiprintf_internal_r+0xffc>
 10114a0:	00c00084 	movi	r3,2
 10114a4:	10fd5526 	beq	r2,r3,10109fc <__alt_data_end+0xff0109fc>
 10114a8:	003ed806 	br	101100c <__alt_data_end+0xff01100c>
 10114ac:	d8802315 	stw	r2,140(sp)
 10114b0:	98c00007 	ldb	r3,0(r19)
 10114b4:	003cab06 	br	1010764 <__alt_data_end+0xff010764>
 10114b8:	d9801a04 	addi	r6,sp,104
 10114bc:	b80b883a 	mov	r5,r23
 10114c0:	a809883a 	mov	r4,r21
 10114c4:	10104580 	call	1010458 <__ssprint_r>
 10114c8:	103f651e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 10114cc:	d8c01c17 	ldw	r3,112(sp)
 10114d0:	003f4f06 	br	1011210 <__alt_data_end+0xff011210>
 10114d4:	008040b4 	movhi	r2,258
 10114d8:	10aba004 	addi	r2,r2,-20864
 10114dc:	d8802915 	stw	r2,164(sp)
 10114e0:	003d4406 	br	10109f4 <__alt_data_end+0xff0109f4>
 10114e4:	dac02317 	ldw	r11,140(sp)
 10114e8:	58800017 	ldw	r2,0(r11)
 10114ec:	dac02517 	ldw	r11,148(sp)
 10114f0:	5807d7fa 	srai	r3,r11,31
 10114f4:	dac02317 	ldw	r11,140(sp)
 10114f8:	10c00115 	stw	r3,4(r2)
 10114fc:	5ac00104 	addi	r11,r11,4
 1011500:	dac02315 	stw	r11,140(sp)
 1011504:	dac02517 	ldw	r11,148(sp)
 1011508:	12c00015 	stw	r11,0(r2)
 101150c:	003c6d06 	br	10106c4 <__alt_data_end+0xff0106c4>
 1011510:	9080100c 	andi	r2,r18,64
 1011514:	dac02317 	ldw	r11,140(sp)
 1011518:	103e5326 	beq	r2,zero,1010e68 <__alt_data_end+0xff010e68>
 101151c:	5f00000f 	ldh	fp,0(r11)
 1011520:	5ac00104 	addi	r11,r11,4
 1011524:	dac02315 	stw	r11,140(sp)
 1011528:	e013d7fa 	srai	r9,fp,31
 101152c:	4805883a 	mov	r2,r9
 1011530:	003e0706 	br	1010d50 <__alt_data_end+0xff010d50>
 1011534:	00800c04 	movi	r2,48
 1011538:	d8801d05 	stb	r2,116(sp)
 101153c:	d8c01d45 	stb	r3,117(sp)
 1011540:	d8001d85 	stb	zero,118(sp)
 1011544:	90800094 	ori	r2,r18,2
 1011548:	80008f16 	blt	r16,zero,1011788 <___svfiprintf_internal_r+0x1160>
 101154c:	00bfdfc4 	movi	r2,-129
 1011550:	90a4703a 	and	r18,r18,r2
 1011554:	94800094 	ori	r18,r18,2
 1011558:	0015883a 	mov	r10,zero
 101155c:	003d2906 	br	1010a04 <__alt_data_end+0xff010a04>
 1011560:	98c00007 	ldb	r3,0(r19)
 1011564:	003c7f06 	br	1010764 <__alt_data_end+0xff010764>
 1011568:	dac02317 	ldw	r11,140(sp)
 101156c:	0013883a 	mov	r9,zero
 1011570:	5f000017 	ldw	fp,0(r11)
 1011574:	5ac00104 	addi	r11,r11,4
 1011578:	dac02315 	stw	r11,140(sp)
 101157c:	003d1506 	br	10109d4 <__alt_data_end+0xff0109d4>
 1011580:	9080100c 	andi	r2,r18,64
 1011584:	d8001d85 	stb	zero,118(sp)
 1011588:	dac02317 	ldw	r11,140(sp)
 101158c:	10003426 	beq	r2,zero,1011660 <___svfiprintf_internal_r+0x1038>
 1011590:	58800104 	addi	r2,r11,4
 1011594:	5f00000b 	ldhu	fp,0(r11)
 1011598:	0013883a 	mov	r9,zero
 101159c:	803e950e 	bge	r16,zero,1010ff4 <__alt_data_end+0xff010ff4>
 10115a0:	e246b03a 	or	r3,fp,r9
 10115a4:	d8802315 	stw	r2,140(sp)
 10115a8:	183d5a1e 	bne	r3,zero,1010b14 <__alt_data_end+0xff010b14>
 10115ac:	0015883a 	mov	r10,zero
 10115b0:	0005883a 	mov	r2,zero
 10115b4:	003fb706 	br	1011494 <__alt_data_end+0xff011494>
 10115b8:	98c00043 	ldbu	r3,1(r19)
 10115bc:	94800814 	ori	r18,r18,32
 10115c0:	9cc00044 	addi	r19,r19,1
 10115c4:	18c03fcc 	andi	r3,r3,255
 10115c8:	18c0201c 	xori	r3,r3,128
 10115cc:	18ffe004 	addi	r3,r3,-128
 10115d0:	003c6406 	br	1010764 <__alt_data_end+0xff010764>
 10115d4:	d8c02315 	stw	r3,140(sp)
 10115d8:	0015883a 	mov	r10,zero
 10115dc:	003faa06 	br	1011488 <__alt_data_end+0xff011488>
 10115e0:	dac02317 	ldw	r11,140(sp)
 10115e4:	58800017 	ldw	r2,0(r11)
 10115e8:	5ac00104 	addi	r11,r11,4
 10115ec:	dac02315 	stw	r11,140(sp)
 10115f0:	dac02517 	ldw	r11,148(sp)
 10115f4:	12c00015 	stw	r11,0(r2)
 10115f8:	003c3206 	br	10106c4 <__alt_data_end+0xff0106c4>
 10115fc:	010040b4 	movhi	r4,258
 1011600:	212ba004 	addi	r4,r4,-20864
 1011604:	d9002915 	stw	r4,164(sp)
 1011608:	d8c02315 	stw	r3,140(sp)
 101160c:	1025883a 	mov	r18,r2
 1011610:	e244b03a 	or	r2,fp,r9
 1011614:	103f871e 	bne	r2,zero,1011434 <__alt_data_end+0xff011434>
 1011618:	0015883a 	mov	r10,zero
 101161c:	00800084 	movi	r2,2
 1011620:	003f9c06 	br	1011494 <__alt_data_end+0xff011494>
 1011624:	0039883a 	mov	fp,zero
 1011628:	003e5f06 	br	1010fa8 <__alt_data_end+0xff010fa8>
 101162c:	d9801a04 	addi	r6,sp,104
 1011630:	b80b883a 	mov	r5,r23
 1011634:	a809883a 	mov	r4,r21
 1011638:	10104580 	call	1010458 <__ssprint_r>
 101163c:	103f081e 	bne	r2,zero,1011260 <__alt_data_end+0xff011260>
 1011640:	d8c01c17 	ldw	r3,112(sp)
 1011644:	d8801b17 	ldw	r2,108(sp)
 1011648:	d811883a 	mov	r8,sp
 101164c:	003e9106 	br	1011094 <__alt_data_end+0xff011094>
 1011650:	010040b4 	movhi	r4,258
 1011654:	212c0004 	addi	r4,r4,-20480
 1011658:	d9002215 	stw	r4,136(sp)
 101165c:	003ead06 	br	1011114 <__alt_data_end+0xff011114>
 1011660:	58800104 	addi	r2,r11,4
 1011664:	5f000017 	ldw	fp,0(r11)
 1011668:	0013883a 	mov	r9,zero
 101166c:	803e610e 	bge	r16,zero,1010ff4 <__alt_data_end+0xff010ff4>
 1011670:	003fcb06 	br	10115a0 <__alt_data_end+0xff0115a0>
 1011674:	58800104 	addi	r2,r11,4
 1011678:	5f000017 	ldw	fp,0(r11)
 101167c:	0013883a 	mov	r9,zero
 1011680:	803e420e 	bge	r16,zero,1010f8c <__alt_data_end+0xff010f8c>
 1011684:	003f7e06 	br	1011480 <__alt_data_end+0xff011480>
 1011688:	5f000017 	ldw	fp,0(r11)
 101168c:	5ac00104 	addi	r11,r11,4
 1011690:	0013883a 	mov	r9,zero
 1011694:	dac02315 	stw	r11,140(sp)
 1011698:	003cce06 	br	10109d4 <__alt_data_end+0xff0109d4>
 101169c:	8809883a 	mov	r4,r17
 10116a0:	da002c15 	stw	r8,176(sp)
 10116a4:	10099b40 	call	10099b4 <strlen>
 10116a8:	d8802115 	stw	r2,132(sp)
 10116ac:	da801d83 	ldbu	r10,118(sp)
 10116b0:	df002315 	stw	fp,140(sp)
 10116b4:	0021883a 	mov	r16,zero
 10116b8:	da002c17 	ldw	r8,176(sp)
 10116bc:	003cf606 	br	1010a98 <__alt_data_end+0xff010a98>
 10116c0:	00800184 	movi	r2,6
 10116c4:	1400012e 	bgeu	r2,r16,10116cc <___svfiprintf_internal_r+0x10a4>
 10116c8:	1021883a 	mov	r16,r2
 10116cc:	dc002115 	stw	r16,132(sp)
 10116d0:	8005883a 	mov	r2,r16
 10116d4:	80003c16 	blt	r16,zero,10117c8 <___svfiprintf_internal_r+0x11a0>
 10116d8:	044040b4 	movhi	r17,258
 10116dc:	d8802015 	stw	r2,128(sp)
 10116e0:	df002315 	stw	fp,140(sp)
 10116e4:	8c6ba504 	addi	r17,r17,-20844
 10116e8:	003d2e06 	br	1010ba4 <__alt_data_end+0xff010ba4>
 10116ec:	04001004 	movi	r16,64
 10116f0:	800b883a 	mov	r5,r16
 10116f4:	100dfa40 	call	100dfa4 <_malloc_r>
 10116f8:	dac02717 	ldw	r11,156(sp)
 10116fc:	58800015 	stw	r2,0(r11)
 1011700:	58800415 	stw	r2,16(r11)
 1011704:	10004826 	beq	r2,zero,1011828 <___svfiprintf_internal_r+0x1200>
 1011708:	dac02717 	ldw	r11,156(sp)
 101170c:	5c000515 	stw	r16,20(r11)
 1011710:	003bd906 	br	1010678 <__alt_data_end+0xff010678>
 1011714:	9080004c 	andi	r2,r18,1
 1011718:	0015883a 	mov	r10,zero
 101171c:	10000626 	beq	r2,zero,1011738 <___svfiprintf_internal_r+0x1110>
 1011720:	dac02b17 	ldw	r11,172(sp)
 1011724:	00800c04 	movi	r2,48
 1011728:	d88019c5 	stb	r2,103(sp)
 101172c:	dac02115 	stw	r11,132(sp)
 1011730:	dc4019c4 	addi	r17,sp,103
 1011734:	003cd806 	br	1010a98 <__alt_data_end+0xff010a98>
 1011738:	d8002115 	stw	zero,132(sp)
 101173c:	dc401a04 	addi	r17,sp,104
 1011740:	003cd506 	br	1010a98 <__alt_data_end+0xff010a98>
 1011744:	010040b4 	movhi	r4,258
 1011748:	212c0404 	addi	r4,r4,-20464
 101174c:	d9002815 	stw	r4,160(sp)
 1011750:	003d4306 	br	1010c60 <__alt_data_end+0xff010c60>
 1011754:	00bfffc4 	movi	r2,-1
 1011758:	003ec606 	br	1011274 <__alt_data_end+0xff011274>
 101175c:	00800044 	movi	r2,1
 1011760:	10803fcc 	andi	r2,r2,255
 1011764:	00c00044 	movi	r3,1
 1011768:	10fd8026 	beq	r2,r3,1010d6c <__alt_data_end+0xff010d6c>
 101176c:	00c00084 	movi	r3,2
 1011770:	10fca426 	beq	r2,r3,1010a04 <__alt_data_end+0xff010a04>
 1011774:	003ce806 	br	1010b18 <__alt_data_end+0xff010b18>
 1011778:	010040b4 	movhi	r4,258
 101177c:	212c0404 	addi	r4,r4,-20464
 1011780:	d9002815 	stw	r4,160(sp)
 1011784:	003e9906 	br	10111ec <__alt_data_end+0xff0111ec>
 1011788:	1025883a 	mov	r18,r2
 101178c:	0015883a 	mov	r10,zero
 1011790:	00800084 	movi	r2,2
 1011794:	003ff206 	br	1011760 <__alt_data_end+0xff011760>
 1011798:	014040b4 	movhi	r5,258
 101179c:	296c0004 	addi	r5,r5,-20480
 10117a0:	d9402215 	stw	r5,136(sp)
 10117a4:	003ee206 	br	1011330 <__alt_data_end+0xff011330>
 10117a8:	5827883a 	mov	r19,r11
 10117ac:	0021883a 	mov	r16,zero
 10117b0:	003bed06 	br	1010768 <__alt_data_end+0xff010768>
 10117b4:	dc002115 	stw	r16,132(sp)
 10117b8:	da801d83 	ldbu	r10,118(sp)
 10117bc:	df002315 	stw	fp,140(sp)
 10117c0:	0021883a 	mov	r16,zero
 10117c4:	003cb406 	br	1010a98 <__alt_data_end+0xff010a98>
 10117c8:	0005883a 	mov	r2,zero
 10117cc:	003fc206 	br	10116d8 <__alt_data_end+0xff0116d8>
 10117d0:	d8802317 	ldw	r2,140(sp)
 10117d4:	98c00043 	ldbu	r3,1(r19)
 10117d8:	5827883a 	mov	r19,r11
 10117dc:	14000017 	ldw	r16,0(r2)
 10117e0:	10800104 	addi	r2,r2,4
 10117e4:	d8802315 	stw	r2,140(sp)
 10117e8:	803f760e 	bge	r16,zero,10115c4 <__alt_data_end+0xff0115c4>
 10117ec:	18c03fcc 	andi	r3,r3,255
 10117f0:	18c0201c 	xori	r3,r3,128
 10117f4:	043fffc4 	movi	r16,-1
 10117f8:	18ffe004 	addi	r3,r3,-128
 10117fc:	003bd906 	br	1010764 <__alt_data_end+0xff010764>
 1011800:	d9c01d85 	stb	r7,118(sp)
 1011804:	003cb606 	br	1010ae0 <__alt_data_end+0xff010ae0>
 1011808:	d9c01d85 	stb	r7,118(sp)
 101180c:	003d2106 	br	1010c94 <__alt_data_end+0xff010c94>
 1011810:	d9c01d85 	stb	r7,118(sp)
 1011814:	003d8e06 	br	1010e50 <__alt_data_end+0xff010e50>
 1011818:	d9c01d85 	stb	r7,118(sp)
 101181c:	003db306 	br	1010eec <__alt_data_end+0xff010eec>
 1011820:	d9c01d85 	stb	r7,118(sp)
 1011824:	003c8a06 	br	1010a50 <__alt_data_end+0xff010a50>
 1011828:	dac02a17 	ldw	r11,168(sp)
 101182c:	00800304 	movi	r2,12
 1011830:	58800015 	stw	r2,0(r11)
 1011834:	00bfffc4 	movi	r2,-1
 1011838:	003e8e06 	br	1011274 <__alt_data_end+0xff011274>
 101183c:	d9c01d85 	stb	r7,118(sp)
 1011840:	003dc706 	br	1010f60 <__alt_data_end+0xff010f60>
 1011844:	d9c01d85 	stb	r7,118(sp)
 1011848:	003ddf06 	br	1010fc8 <__alt_data_end+0xff010fc8>
 101184c:	d9c01d85 	stb	r7,118(sp)
 1011850:	003d3706 	br	1010d30 <__alt_data_end+0xff010d30>
 1011854:	d9c01d85 	stb	r7,118(sp)
 1011858:	003c5406 	br	10109ac <__alt_data_end+0xff0109ac>
 101185c:	d9c01d85 	stb	r7,118(sp)
 1011860:	003d1d06 	br	1010cd8 <__alt_data_end+0xff010cd8>

01011864 <__sprint_r.part.0>:
 1011864:	28801917 	ldw	r2,100(r5)
 1011868:	defff604 	addi	sp,sp,-40
 101186c:	dd400515 	stw	r21,20(sp)
 1011870:	dfc00915 	stw	ra,36(sp)
 1011874:	df000815 	stw	fp,32(sp)
 1011878:	ddc00715 	stw	r23,28(sp)
 101187c:	dd800615 	stw	r22,24(sp)
 1011880:	dd000415 	stw	r20,16(sp)
 1011884:	dcc00315 	stw	r19,12(sp)
 1011888:	dc800215 	stw	r18,8(sp)
 101188c:	dc400115 	stw	r17,4(sp)
 1011890:	dc000015 	stw	r16,0(sp)
 1011894:	1088000c 	andi	r2,r2,8192
 1011898:	302b883a 	mov	r21,r6
 101189c:	10002e26 	beq	r2,zero,1011958 <__sprint_r.part.0+0xf4>
 10118a0:	30800217 	ldw	r2,8(r6)
 10118a4:	35800017 	ldw	r22,0(r6)
 10118a8:	10002926 	beq	r2,zero,1011950 <__sprint_r.part.0+0xec>
 10118ac:	2827883a 	mov	r19,r5
 10118b0:	2029883a 	mov	r20,r4
 10118b4:	b5c00104 	addi	r23,r22,4
 10118b8:	04bfffc4 	movi	r18,-1
 10118bc:	bc400017 	ldw	r17,0(r23)
 10118c0:	b4000017 	ldw	r16,0(r22)
 10118c4:	0039883a 	mov	fp,zero
 10118c8:	8822d0ba 	srli	r17,r17,2
 10118cc:	8800031e 	bne	r17,zero,10118dc <__sprint_r.part.0+0x78>
 10118d0:	00001806 	br	1011934 <__sprint_r.part.0+0xd0>
 10118d4:	84000104 	addi	r16,r16,4
 10118d8:	8f001526 	beq	r17,fp,1011930 <__sprint_r.part.0+0xcc>
 10118dc:	81400017 	ldw	r5,0(r16)
 10118e0:	980d883a 	mov	r6,r19
 10118e4:	a009883a 	mov	r4,r20
 10118e8:	10136880 	call	1013688 <_fputwc_r>
 10118ec:	e7000044 	addi	fp,fp,1
 10118f0:	14bff81e 	bne	r2,r18,10118d4 <__alt_data_end+0xff0118d4>
 10118f4:	9005883a 	mov	r2,r18
 10118f8:	a8000215 	stw	zero,8(r21)
 10118fc:	a8000115 	stw	zero,4(r21)
 1011900:	dfc00917 	ldw	ra,36(sp)
 1011904:	df000817 	ldw	fp,32(sp)
 1011908:	ddc00717 	ldw	r23,28(sp)
 101190c:	dd800617 	ldw	r22,24(sp)
 1011910:	dd400517 	ldw	r21,20(sp)
 1011914:	dd000417 	ldw	r20,16(sp)
 1011918:	dcc00317 	ldw	r19,12(sp)
 101191c:	dc800217 	ldw	r18,8(sp)
 1011920:	dc400117 	ldw	r17,4(sp)
 1011924:	dc000017 	ldw	r16,0(sp)
 1011928:	dec00a04 	addi	sp,sp,40
 101192c:	f800283a 	ret
 1011930:	a8800217 	ldw	r2,8(r21)
 1011934:	8c63883a 	add	r17,r17,r17
 1011938:	8c63883a 	add	r17,r17,r17
 101193c:	1445c83a 	sub	r2,r2,r17
 1011940:	a8800215 	stw	r2,8(r21)
 1011944:	b5800204 	addi	r22,r22,8
 1011948:	bdc00204 	addi	r23,r23,8
 101194c:	103fdb1e 	bne	r2,zero,10118bc <__alt_data_end+0xff0118bc>
 1011950:	0005883a 	mov	r2,zero
 1011954:	003fe806 	br	10118f8 <__alt_data_end+0xff0118f8>
 1011958:	100d8840 	call	100d884 <__sfvwrite_r>
 101195c:	003fe606 	br	10118f8 <__alt_data_end+0xff0118f8>

01011960 <__sprint_r>:
 1011960:	30c00217 	ldw	r3,8(r6)
 1011964:	18000126 	beq	r3,zero,101196c <__sprint_r+0xc>
 1011968:	10118641 	jmpi	1011864 <__sprint_r.part.0>
 101196c:	30000115 	stw	zero,4(r6)
 1011970:	0005883a 	mov	r2,zero
 1011974:	f800283a 	ret

01011978 <___vfiprintf_internal_r>:
 1011978:	deffc904 	addi	sp,sp,-220
 101197c:	df003515 	stw	fp,212(sp)
 1011980:	dd003115 	stw	r20,196(sp)
 1011984:	dfc03615 	stw	ra,216(sp)
 1011988:	ddc03415 	stw	r23,208(sp)
 101198c:	dd803315 	stw	r22,204(sp)
 1011990:	dd403215 	stw	r21,200(sp)
 1011994:	dcc03015 	stw	r19,192(sp)
 1011998:	dc802f15 	stw	r18,188(sp)
 101199c:	dc402e15 	stw	r17,184(sp)
 10119a0:	dc002d15 	stw	r16,180(sp)
 10119a4:	d9002015 	stw	r4,128(sp)
 10119a8:	d9c02215 	stw	r7,136(sp)
 10119ac:	2829883a 	mov	r20,r5
 10119b0:	3039883a 	mov	fp,r6
 10119b4:	20000226 	beq	r4,zero,10119c0 <___vfiprintf_internal_r+0x48>
 10119b8:	20800e17 	ldw	r2,56(r4)
 10119bc:	1000cf26 	beq	r2,zero,1011cfc <___vfiprintf_internal_r+0x384>
 10119c0:	a080030b 	ldhu	r2,12(r20)
 10119c4:	10c8000c 	andi	r3,r2,8192
 10119c8:	1800061e 	bne	r3,zero,10119e4 <___vfiprintf_internal_r+0x6c>
 10119cc:	a1001917 	ldw	r4,100(r20)
 10119d0:	00f7ffc4 	movi	r3,-8193
 10119d4:	10880014 	ori	r2,r2,8192
 10119d8:	20c6703a 	and	r3,r4,r3
 10119dc:	a080030d 	sth	r2,12(r20)
 10119e0:	a0c01915 	stw	r3,100(r20)
 10119e4:	10c0020c 	andi	r3,r2,8
 10119e8:	1800a926 	beq	r3,zero,1011c90 <___vfiprintf_internal_r+0x318>
 10119ec:	a0c00417 	ldw	r3,16(r20)
 10119f0:	1800a726 	beq	r3,zero,1011c90 <___vfiprintf_internal_r+0x318>
 10119f4:	1080068c 	andi	r2,r2,26
 10119f8:	00c00284 	movi	r3,10
 10119fc:	10c0ac26 	beq	r2,r3,1011cb0 <___vfiprintf_internal_r+0x338>
 1011a00:	da801a04 	addi	r10,sp,104
 1011a04:	da801e15 	stw	r10,120(sp)
 1011a08:	d8801e17 	ldw	r2,120(sp)
 1011a0c:	da8019c4 	addi	r10,sp,103
 1011a10:	058040b4 	movhi	r22,258
 1011a14:	05c040b4 	movhi	r23,258
 1011a18:	da801f15 	stw	r10,124(sp)
 1011a1c:	1295c83a 	sub	r10,r2,r10
 1011a20:	b5ac0c04 	addi	r22,r22,-20432
 1011a24:	bdec0804 	addi	r23,r23,-20448
 1011a28:	dec01a15 	stw	sp,104(sp)
 1011a2c:	d8001c15 	stw	zero,112(sp)
 1011a30:	d8001b15 	stw	zero,108(sp)
 1011a34:	d8002615 	stw	zero,152(sp)
 1011a38:	d8002315 	stw	zero,140(sp)
 1011a3c:	da802715 	stw	r10,156(sp)
 1011a40:	d811883a 	mov	r8,sp
 1011a44:	dd002115 	stw	r20,132(sp)
 1011a48:	e021883a 	mov	r16,fp
 1011a4c:	80800007 	ldb	r2,0(r16)
 1011a50:	1003ea26 	beq	r2,zero,10129fc <___vfiprintf_internal_r+0x1084>
 1011a54:	00c00944 	movi	r3,37
 1011a58:	8025883a 	mov	r18,r16
 1011a5c:	10c0021e 	bne	r2,r3,1011a68 <___vfiprintf_internal_r+0xf0>
 1011a60:	00001606 	br	1011abc <___vfiprintf_internal_r+0x144>
 1011a64:	10c00326 	beq	r2,r3,1011a74 <___vfiprintf_internal_r+0xfc>
 1011a68:	94800044 	addi	r18,r18,1
 1011a6c:	90800007 	ldb	r2,0(r18)
 1011a70:	103ffc1e 	bne	r2,zero,1011a64 <__alt_data_end+0xff011a64>
 1011a74:	9423c83a 	sub	r17,r18,r16
 1011a78:	88001026 	beq	r17,zero,1011abc <___vfiprintf_internal_r+0x144>
 1011a7c:	d8c01c17 	ldw	r3,112(sp)
 1011a80:	d8801b17 	ldw	r2,108(sp)
 1011a84:	44000015 	stw	r16,0(r8)
 1011a88:	88c7883a 	add	r3,r17,r3
 1011a8c:	10800044 	addi	r2,r2,1
 1011a90:	44400115 	stw	r17,4(r8)
 1011a94:	d8c01c15 	stw	r3,112(sp)
 1011a98:	d8801b15 	stw	r2,108(sp)
 1011a9c:	010001c4 	movi	r4,7
 1011aa0:	2080760e 	bge	r4,r2,1011c7c <___vfiprintf_internal_r+0x304>
 1011aa4:	1803821e 	bne	r3,zero,10128b0 <___vfiprintf_internal_r+0xf38>
 1011aa8:	da802317 	ldw	r10,140(sp)
 1011aac:	d8001b15 	stw	zero,108(sp)
 1011ab0:	d811883a 	mov	r8,sp
 1011ab4:	5455883a 	add	r10,r10,r17
 1011ab8:	da802315 	stw	r10,140(sp)
 1011abc:	90800007 	ldb	r2,0(r18)
 1011ac0:	10044626 	beq	r2,zero,1012bdc <___vfiprintf_internal_r+0x1264>
 1011ac4:	90c00047 	ldb	r3,1(r18)
 1011ac8:	94000044 	addi	r16,r18,1
 1011acc:	d8001d85 	stb	zero,118(sp)
 1011ad0:	0009883a 	mov	r4,zero
 1011ad4:	000f883a 	mov	r7,zero
 1011ad8:	027fffc4 	movi	r9,-1
 1011adc:	0023883a 	mov	r17,zero
 1011ae0:	0029883a 	mov	r20,zero
 1011ae4:	01401604 	movi	r5,88
 1011ae8:	01800244 	movi	r6,9
 1011aec:	03400a84 	movi	r13,42
 1011af0:	03001b04 	movi	r12,108
 1011af4:	84000044 	addi	r16,r16,1
 1011af8:	18bff804 	addi	r2,r3,-32
 1011afc:	28827336 	bltu	r5,r2,10124cc <___vfiprintf_internal_r+0xb54>
 1011b00:	100490ba 	slli	r2,r2,2
 1011b04:	02804074 	movhi	r10,257
 1011b08:	5286c604 	addi	r10,r10,6936
 1011b0c:	1285883a 	add	r2,r2,r10
 1011b10:	10800017 	ldw	r2,0(r2)
 1011b14:	1000683a 	jmp	r2
 1011b18:	01012200 	call	101220 <__alt_mem_sdram-0xefede0>
 1011b1c:	010124cc 	andi	r4,zero,1171
 1011b20:	010124cc 	andi	r4,zero,1171
 1011b24:	01012220 	cmpeqi	r4,zero,1160
 1011b28:	010124cc 	andi	r4,zero,1171
 1011b2c:	010124cc 	andi	r4,zero,1171
 1011b30:	010124cc 	andi	r4,zero,1171
 1011b34:	010124cc 	andi	r4,zero,1171
 1011b38:	010124cc 	andi	r4,zero,1171
 1011b3c:	010124cc 	andi	r4,zero,1171
 1011b40:	01012408 	cmpgei	r4,zero,1168
 1011b44:	01012424 	muli	r4,zero,1168
 1011b48:	010124cc 	andi	r4,zero,1171
 1011b4c:	01011d0c 	andi	r4,zero,1140
 1011b50:	01012434 	movhi	r4,1168
 1011b54:	010124cc 	andi	r4,zero,1171
 1011b58:	0101222c 	andhi	r4,zero,1160
 1011b5c:	01012238 	rdprs	r4,zero,1160
 1011b60:	01012238 	rdprs	r4,zero,1160
 1011b64:	01012238 	rdprs	r4,zero,1160
 1011b68:	01012238 	rdprs	r4,zero,1160
 1011b6c:	01012238 	rdprs	r4,zero,1160
 1011b70:	01012238 	rdprs	r4,zero,1160
 1011b74:	01012238 	rdprs	r4,zero,1160
 1011b78:	01012238 	rdprs	r4,zero,1160
 1011b7c:	01012238 	rdprs	r4,zero,1160
 1011b80:	010124cc 	andi	r4,zero,1171
 1011b84:	010124cc 	andi	r4,zero,1171
 1011b88:	010124cc 	andi	r4,zero,1171
 1011b8c:	010124cc 	andi	r4,zero,1171
 1011b90:	010124cc 	andi	r4,zero,1171
 1011b94:	010124cc 	andi	r4,zero,1171
 1011b98:	010124cc 	andi	r4,zero,1171
 1011b9c:	010124cc 	andi	r4,zero,1171
 1011ba0:	010124cc 	andi	r4,zero,1171
 1011ba4:	010124cc 	andi	r4,zero,1171
 1011ba8:	01012264 	muli	r4,zero,1161
 1011bac:	010124cc 	andi	r4,zero,1171
 1011bb0:	010124cc 	andi	r4,zero,1171
 1011bb4:	010124cc 	andi	r4,zero,1171
 1011bb8:	010124cc 	andi	r4,zero,1171
 1011bbc:	010124cc 	andi	r4,zero,1171
 1011bc0:	010124cc 	andi	r4,zero,1171
 1011bc4:	010124cc 	andi	r4,zero,1171
 1011bc8:	010124cc 	andi	r4,zero,1171
 1011bcc:	010124cc 	andi	r4,zero,1171
 1011bd0:	010124cc 	andi	r4,zero,1171
 1011bd4:	0101229c 	xori	r4,zero,1162
 1011bd8:	010124cc 	andi	r4,zero,1171
 1011bdc:	010124cc 	andi	r4,zero,1171
 1011be0:	010124cc 	andi	r4,zero,1171
 1011be4:	010124cc 	andi	r4,zero,1171
 1011be8:	010124cc 	andi	r4,zero,1171
 1011bec:	010122f4 	movhi	r4,1163
 1011bf0:	010124cc 	andi	r4,zero,1171
 1011bf4:	010124cc 	andi	r4,zero,1171
 1011bf8:	01012364 	muli	r4,zero,1165
 1011bfc:	010124cc 	andi	r4,zero,1171
 1011c00:	010124cc 	andi	r4,zero,1171
 1011c04:	010124cc 	andi	r4,zero,1171
 1011c08:	010124cc 	andi	r4,zero,1171
 1011c0c:	010124cc 	andi	r4,zero,1171
 1011c10:	010124cc 	andi	r4,zero,1171
 1011c14:	010124cc 	andi	r4,zero,1171
 1011c18:	010124cc 	andi	r4,zero,1171
 1011c1c:	010124cc 	andi	r4,zero,1171
 1011c20:	010124cc 	andi	r4,zero,1171
 1011c24:	01012110 	cmplti	r4,zero,1156
 1011c28:	0101213c 	xorhi	r4,zero,1156
 1011c2c:	010124cc 	andi	r4,zero,1171
 1011c30:	010124cc 	andi	r4,zero,1171
 1011c34:	010124cc 	andi	r4,zero,1171
 1011c38:	01012474 	movhi	r4,1169
 1011c3c:	0101213c 	xorhi	r4,zero,1156
 1011c40:	010124cc 	andi	r4,zero,1171
 1011c44:	010124cc 	andi	r4,zero,1171
 1011c48:	01011fd0 	cmplti	r4,zero,1151
 1011c4c:	010124cc 	andi	r4,zero,1171
 1011c50:	01011fe0 	cmpeqi	r4,zero,1151
 1011c54:	0101201c 	xori	r4,zero,1152
 1011c58:	01011d18 	cmpnei	r4,zero,1140
 1011c5c:	01011fc4 	movi	r4,1151
 1011c60:	010124cc 	andi	r4,zero,1171
 1011c64:	010123a0 	cmpeqi	r4,zero,1166
 1011c68:	010124cc 	andi	r4,zero,1171
 1011c6c:	010123f8 	rdprs	r4,zero,1167
 1011c70:	010124cc 	andi	r4,zero,1171
 1011c74:	010124cc 	andi	r4,zero,1171
 1011c78:	010120bc 	xorhi	r4,zero,1154
 1011c7c:	42000204 	addi	r8,r8,8
 1011c80:	da802317 	ldw	r10,140(sp)
 1011c84:	5455883a 	add	r10,r10,r17
 1011c88:	da802315 	stw	r10,140(sp)
 1011c8c:	003f8b06 	br	1011abc <__alt_data_end+0xff011abc>
 1011c90:	d9002017 	ldw	r4,128(sp)
 1011c94:	a00b883a 	mov	r5,r20
 1011c98:	1012f0c0 	call	1012f0c <__swsetup_r>
 1011c9c:	1003b11e 	bne	r2,zero,1012b64 <___vfiprintf_internal_r+0x11ec>
 1011ca0:	a080030b 	ldhu	r2,12(r20)
 1011ca4:	00c00284 	movi	r3,10
 1011ca8:	1080068c 	andi	r2,r2,26
 1011cac:	10ff541e 	bne	r2,r3,1011a00 <__alt_data_end+0xff011a00>
 1011cb0:	a080038f 	ldh	r2,14(r20)
 1011cb4:	103f5216 	blt	r2,zero,1011a00 <__alt_data_end+0xff011a00>
 1011cb8:	d9c02217 	ldw	r7,136(sp)
 1011cbc:	d9002017 	ldw	r4,128(sp)
 1011cc0:	e00d883a 	mov	r6,fp
 1011cc4:	a00b883a 	mov	r5,r20
 1011cc8:	1012df00 	call	1012df0 <__sbprintf>
 1011ccc:	dfc03617 	ldw	ra,216(sp)
 1011cd0:	df003517 	ldw	fp,212(sp)
 1011cd4:	ddc03417 	ldw	r23,208(sp)
 1011cd8:	dd803317 	ldw	r22,204(sp)
 1011cdc:	dd403217 	ldw	r21,200(sp)
 1011ce0:	dd003117 	ldw	r20,196(sp)
 1011ce4:	dcc03017 	ldw	r19,192(sp)
 1011ce8:	dc802f17 	ldw	r18,188(sp)
 1011cec:	dc402e17 	ldw	r17,184(sp)
 1011cf0:	dc002d17 	ldw	r16,180(sp)
 1011cf4:	dec03704 	addi	sp,sp,220
 1011cf8:	f800283a 	ret
 1011cfc:	100d8340 	call	100d834 <__sinit>
 1011d00:	003f2f06 	br	10119c0 <__alt_data_end+0xff0119c0>
 1011d04:	0463c83a 	sub	r17,zero,r17
 1011d08:	d8802215 	stw	r2,136(sp)
 1011d0c:	a5000114 	ori	r20,r20,4
 1011d10:	80c00007 	ldb	r3,0(r16)
 1011d14:	003f7706 	br	1011af4 <__alt_data_end+0xff011af4>
 1011d18:	00800c04 	movi	r2,48
 1011d1c:	da802217 	ldw	r10,136(sp)
 1011d20:	d8801d05 	stb	r2,116(sp)
 1011d24:	00801e04 	movi	r2,120
 1011d28:	d8801d45 	stb	r2,117(sp)
 1011d2c:	d8001d85 	stb	zero,118(sp)
 1011d30:	50c00104 	addi	r3,r10,4
 1011d34:	54800017 	ldw	r18,0(r10)
 1011d38:	0027883a 	mov	r19,zero
 1011d3c:	a0800094 	ori	r2,r20,2
 1011d40:	48030b16 	blt	r9,zero,1012970 <___vfiprintf_internal_r+0xff8>
 1011d44:	00bfdfc4 	movi	r2,-129
 1011d48:	a096703a 	and	r11,r20,r2
 1011d4c:	d8c02215 	stw	r3,136(sp)
 1011d50:	5d000094 	ori	r20,r11,2
 1011d54:	90032b1e 	bne	r18,zero,1012a04 <___vfiprintf_internal_r+0x108c>
 1011d58:	008040b4 	movhi	r2,258
 1011d5c:	10aba004 	addi	r2,r2,-20864
 1011d60:	d8802615 	stw	r2,152(sp)
 1011d64:	0039883a 	mov	fp,zero
 1011d68:	48017b1e 	bne	r9,zero,1012358 <___vfiprintf_internal_r+0x9e0>
 1011d6c:	0013883a 	mov	r9,zero
 1011d70:	0027883a 	mov	r19,zero
 1011d74:	dd401a04 	addi	r21,sp,104
 1011d78:	4825883a 	mov	r18,r9
 1011d7c:	4cc0010e 	bge	r9,r19,1011d84 <___vfiprintf_internal_r+0x40c>
 1011d80:	9825883a 	mov	r18,r19
 1011d84:	e7003fcc 	andi	fp,fp,255
 1011d88:	e700201c 	xori	fp,fp,128
 1011d8c:	e73fe004 	addi	fp,fp,-128
 1011d90:	e0000126 	beq	fp,zero,1011d98 <___vfiprintf_internal_r+0x420>
 1011d94:	94800044 	addi	r18,r18,1
 1011d98:	a380008c 	andi	r14,r20,2
 1011d9c:	70000126 	beq	r14,zero,1011da4 <___vfiprintf_internal_r+0x42c>
 1011da0:	94800084 	addi	r18,r18,2
 1011da4:	a700210c 	andi	fp,r20,132
 1011da8:	e001df1e 	bne	fp,zero,1012528 <___vfiprintf_internal_r+0xbb0>
 1011dac:	8c87c83a 	sub	r3,r17,r18
 1011db0:	00c1dd0e 	bge	zero,r3,1012528 <___vfiprintf_internal_r+0xbb0>
 1011db4:	01c00404 	movi	r7,16
 1011db8:	d8801c17 	ldw	r2,112(sp)
 1011dbc:	38c3ad0e 	bge	r7,r3,1012c74 <___vfiprintf_internal_r+0x12fc>
 1011dc0:	028040b4 	movhi	r10,258
 1011dc4:	52ac0c04 	addi	r10,r10,-20432
 1011dc8:	dc002915 	stw	r16,164(sp)
 1011dcc:	d9801b17 	ldw	r6,108(sp)
 1011dd0:	da802415 	stw	r10,144(sp)
 1011dd4:	03c001c4 	movi	r15,7
 1011dd8:	da402515 	stw	r9,148(sp)
 1011ddc:	db802815 	stw	r14,160(sp)
 1011de0:	1821883a 	mov	r16,r3
 1011de4:	00000506 	br	1011dfc <___vfiprintf_internal_r+0x484>
 1011de8:	31400084 	addi	r5,r6,2
 1011dec:	42000204 	addi	r8,r8,8
 1011df0:	200d883a 	mov	r6,r4
 1011df4:	843ffc04 	addi	r16,r16,-16
 1011df8:	3c000d0e 	bge	r7,r16,1011e30 <___vfiprintf_internal_r+0x4b8>
 1011dfc:	10800404 	addi	r2,r2,16
 1011e00:	31000044 	addi	r4,r6,1
 1011e04:	45800015 	stw	r22,0(r8)
 1011e08:	41c00115 	stw	r7,4(r8)
 1011e0c:	d8801c15 	stw	r2,112(sp)
 1011e10:	d9001b15 	stw	r4,108(sp)
 1011e14:	793ff40e 	bge	r15,r4,1011de8 <__alt_data_end+0xff011de8>
 1011e18:	1001b51e 	bne	r2,zero,10124f0 <___vfiprintf_internal_r+0xb78>
 1011e1c:	843ffc04 	addi	r16,r16,-16
 1011e20:	000d883a 	mov	r6,zero
 1011e24:	01400044 	movi	r5,1
 1011e28:	d811883a 	mov	r8,sp
 1011e2c:	3c3ff316 	blt	r7,r16,1011dfc <__alt_data_end+0xff011dfc>
 1011e30:	8007883a 	mov	r3,r16
 1011e34:	da402517 	ldw	r9,148(sp)
 1011e38:	db802817 	ldw	r14,160(sp)
 1011e3c:	dc002917 	ldw	r16,164(sp)
 1011e40:	da802417 	ldw	r10,144(sp)
 1011e44:	1885883a 	add	r2,r3,r2
 1011e48:	40c00115 	stw	r3,4(r8)
 1011e4c:	42800015 	stw	r10,0(r8)
 1011e50:	d8801c15 	stw	r2,112(sp)
 1011e54:	d9401b15 	stw	r5,108(sp)
 1011e58:	00c001c4 	movi	r3,7
 1011e5c:	19426016 	blt	r3,r5,10127e0 <___vfiprintf_internal_r+0xe68>
 1011e60:	d8c01d87 	ldb	r3,118(sp)
 1011e64:	42000204 	addi	r8,r8,8
 1011e68:	29000044 	addi	r4,r5,1
 1011e6c:	1801b31e 	bne	r3,zero,101253c <___vfiprintf_internal_r+0xbc4>
 1011e70:	7001c026 	beq	r14,zero,1012574 <___vfiprintf_internal_r+0xbfc>
 1011e74:	d8c01d04 	addi	r3,sp,116
 1011e78:	10800084 	addi	r2,r2,2
 1011e7c:	40c00015 	stw	r3,0(r8)
 1011e80:	00c00084 	movi	r3,2
 1011e84:	40c00115 	stw	r3,4(r8)
 1011e88:	d8801c15 	stw	r2,112(sp)
 1011e8c:	d9001b15 	stw	r4,108(sp)
 1011e90:	00c001c4 	movi	r3,7
 1011e94:	1902650e 	bge	r3,r4,101282c <___vfiprintf_internal_r+0xeb4>
 1011e98:	10029a1e 	bne	r2,zero,1012904 <___vfiprintf_internal_r+0xf8c>
 1011e9c:	00c02004 	movi	r3,128
 1011ea0:	01000044 	movi	r4,1
 1011ea4:	000b883a 	mov	r5,zero
 1011ea8:	d811883a 	mov	r8,sp
 1011eac:	e0c1b31e 	bne	fp,r3,101257c <___vfiprintf_internal_r+0xc04>
 1011eb0:	8cb9c83a 	sub	fp,r17,r18
 1011eb4:	0701b10e 	bge	zero,fp,101257c <___vfiprintf_internal_r+0xc04>
 1011eb8:	01c00404 	movi	r7,16
 1011ebc:	3f03890e 	bge	r7,fp,1012ce4 <___vfiprintf_internal_r+0x136c>
 1011ec0:	00c040b4 	movhi	r3,258
 1011ec4:	18ec0804 	addi	r3,r3,-20448
 1011ec8:	d8c02415 	stw	r3,144(sp)
 1011ecc:	8007883a 	mov	r3,r16
 1011ed0:	034001c4 	movi	r13,7
 1011ed4:	e021883a 	mov	r16,fp
 1011ed8:	da402515 	stw	r9,148(sp)
 1011edc:	1839883a 	mov	fp,r3
 1011ee0:	00000506 	br	1011ef8 <___vfiprintf_internal_r+0x580>
 1011ee4:	29800084 	addi	r6,r5,2
 1011ee8:	42000204 	addi	r8,r8,8
 1011eec:	180b883a 	mov	r5,r3
 1011ef0:	843ffc04 	addi	r16,r16,-16
 1011ef4:	3c000d0e 	bge	r7,r16,1011f2c <___vfiprintf_internal_r+0x5b4>
 1011ef8:	10800404 	addi	r2,r2,16
 1011efc:	28c00044 	addi	r3,r5,1
 1011f00:	45c00015 	stw	r23,0(r8)
 1011f04:	41c00115 	stw	r7,4(r8)
 1011f08:	d8801c15 	stw	r2,112(sp)
 1011f0c:	d8c01b15 	stw	r3,108(sp)
 1011f10:	68fff40e 	bge	r13,r3,1011ee4 <__alt_data_end+0xff011ee4>
 1011f14:	1002241e 	bne	r2,zero,10127a8 <___vfiprintf_internal_r+0xe30>
 1011f18:	843ffc04 	addi	r16,r16,-16
 1011f1c:	01800044 	movi	r6,1
 1011f20:	000b883a 	mov	r5,zero
 1011f24:	d811883a 	mov	r8,sp
 1011f28:	3c3ff316 	blt	r7,r16,1011ef8 <__alt_data_end+0xff011ef8>
 1011f2c:	da402517 	ldw	r9,148(sp)
 1011f30:	e007883a 	mov	r3,fp
 1011f34:	8039883a 	mov	fp,r16
 1011f38:	1821883a 	mov	r16,r3
 1011f3c:	d8c02417 	ldw	r3,144(sp)
 1011f40:	1705883a 	add	r2,r2,fp
 1011f44:	47000115 	stw	fp,4(r8)
 1011f48:	40c00015 	stw	r3,0(r8)
 1011f4c:	d8801c15 	stw	r2,112(sp)
 1011f50:	d9801b15 	stw	r6,108(sp)
 1011f54:	00c001c4 	movi	r3,7
 1011f58:	19827616 	blt	r3,r6,1012934 <___vfiprintf_internal_r+0xfbc>
 1011f5c:	4cf9c83a 	sub	fp,r9,r19
 1011f60:	42000204 	addi	r8,r8,8
 1011f64:	31000044 	addi	r4,r6,1
 1011f68:	300b883a 	mov	r5,r6
 1011f6c:	07018516 	blt	zero,fp,1012584 <___vfiprintf_internal_r+0xc0c>
 1011f70:	9885883a 	add	r2,r19,r2
 1011f74:	45400015 	stw	r21,0(r8)
 1011f78:	44c00115 	stw	r19,4(r8)
 1011f7c:	d8801c15 	stw	r2,112(sp)
 1011f80:	d9001b15 	stw	r4,108(sp)
 1011f84:	00c001c4 	movi	r3,7
 1011f88:	1901dd0e 	bge	r3,r4,1012700 <___vfiprintf_internal_r+0xd88>
 1011f8c:	1002401e 	bne	r2,zero,1012890 <___vfiprintf_internal_r+0xf18>
 1011f90:	d8001b15 	stw	zero,108(sp)
 1011f94:	a2c0010c 	andi	r11,r20,4
 1011f98:	58000226 	beq	r11,zero,1011fa4 <___vfiprintf_internal_r+0x62c>
 1011f9c:	8ca7c83a 	sub	r19,r17,r18
 1011fa0:	04c2f216 	blt	zero,r19,1012b6c <___vfiprintf_internal_r+0x11f4>
 1011fa4:	8c80010e 	bge	r17,r18,1011fac <___vfiprintf_internal_r+0x634>
 1011fa8:	9023883a 	mov	r17,r18
 1011fac:	da802317 	ldw	r10,140(sp)
 1011fb0:	5455883a 	add	r10,r10,r17
 1011fb4:	da802315 	stw	r10,140(sp)
 1011fb8:	d8001b15 	stw	zero,108(sp)
 1011fbc:	d811883a 	mov	r8,sp
 1011fc0:	003ea206 	br	1011a4c <__alt_data_end+0xff011a4c>
 1011fc4:	a5000814 	ori	r20,r20,32
 1011fc8:	80c00007 	ldb	r3,0(r16)
 1011fcc:	003ec906 	br	1011af4 <__alt_data_end+0xff011af4>
 1011fd0:	80c00007 	ldb	r3,0(r16)
 1011fd4:	1b030926 	beq	r3,r12,1012bfc <___vfiprintf_internal_r+0x1284>
 1011fd8:	a5000414 	ori	r20,r20,16
 1011fdc:	003ec506 	br	1011af4 <__alt_data_end+0xff011af4>
 1011fe0:	21003fcc 	andi	r4,r4,255
 1011fe4:	20035e1e 	bne	r4,zero,1012d60 <___vfiprintf_internal_r+0x13e8>
 1011fe8:	a080080c 	andi	r2,r20,32
 1011fec:	1002a526 	beq	r2,zero,1012a84 <___vfiprintf_internal_r+0x110c>
 1011ff0:	da802217 	ldw	r10,136(sp)
 1011ff4:	50800017 	ldw	r2,0(r10)
 1011ff8:	da802317 	ldw	r10,140(sp)
 1011ffc:	5007d7fa 	srai	r3,r10,31
 1012000:	da802217 	ldw	r10,136(sp)
 1012004:	10c00115 	stw	r3,4(r2)
 1012008:	52800104 	addi	r10,r10,4
 101200c:	da802215 	stw	r10,136(sp)
 1012010:	da802317 	ldw	r10,140(sp)
 1012014:	12800015 	stw	r10,0(r2)
 1012018:	003e8c06 	br	1011a4c <__alt_data_end+0xff011a4c>
 101201c:	21003fcc 	andi	r4,r4,255
 1012020:	2003511e 	bne	r4,zero,1012d68 <___vfiprintf_internal_r+0x13f0>
 1012024:	a080080c 	andi	r2,r20,32
 1012028:	1000a126 	beq	r2,zero,10122b0 <___vfiprintf_internal_r+0x938>
 101202c:	da802217 	ldw	r10,136(sp)
 1012030:	d8001d85 	stb	zero,118(sp)
 1012034:	50800204 	addi	r2,r10,8
 1012038:	54800017 	ldw	r18,0(r10)
 101203c:	54c00117 	ldw	r19,4(r10)
 1012040:	4802b416 	blt	r9,zero,1012b14 <___vfiprintf_internal_r+0x119c>
 1012044:	013fdfc4 	movi	r4,-129
 1012048:	94c6b03a 	or	r3,r18,r19
 101204c:	d8802215 	stw	r2,136(sp)
 1012050:	a128703a 	and	r20,r20,r4
 1012054:	1800a226 	beq	r3,zero,10122e0 <___vfiprintf_internal_r+0x968>
 1012058:	0039883a 	mov	fp,zero
 101205c:	dd401a04 	addi	r21,sp,104
 1012060:	9006d0fa 	srli	r3,r18,3
 1012064:	9808977a 	slli	r4,r19,29
 1012068:	9826d0fa 	srli	r19,r19,3
 101206c:	948001cc 	andi	r18,r18,7
 1012070:	90800c04 	addi	r2,r18,48
 1012074:	ad7fffc4 	addi	r21,r21,-1
 1012078:	20e4b03a 	or	r18,r4,r3
 101207c:	a8800005 	stb	r2,0(r21)
 1012080:	94c6b03a 	or	r3,r18,r19
 1012084:	183ff61e 	bne	r3,zero,1012060 <__alt_data_end+0xff012060>
 1012088:	a0c0004c 	andi	r3,r20,1
 101208c:	18005926 	beq	r3,zero,10121f4 <___vfiprintf_internal_r+0x87c>
 1012090:	10803fcc 	andi	r2,r2,255
 1012094:	1080201c 	xori	r2,r2,128
 1012098:	10bfe004 	addi	r2,r2,-128
 101209c:	00c00c04 	movi	r3,48
 10120a0:	10c05426 	beq	r2,r3,10121f4 <___vfiprintf_internal_r+0x87c>
 10120a4:	da801e17 	ldw	r10,120(sp)
 10120a8:	a8bfffc4 	addi	r2,r21,-1
 10120ac:	a8ffffc5 	stb	r3,-1(r21)
 10120b0:	50a7c83a 	sub	r19,r10,r2
 10120b4:	102b883a 	mov	r21,r2
 10120b8:	003f2f06 	br	1011d78 <__alt_data_end+0xff011d78>
 10120bc:	21003fcc 	andi	r4,r4,255
 10120c0:	2003421e 	bne	r4,zero,1012dcc <___vfiprintf_internal_r+0x1454>
 10120c4:	008040b4 	movhi	r2,258
 10120c8:	10aba004 	addi	r2,r2,-20864
 10120cc:	d8802615 	stw	r2,152(sp)
 10120d0:	a080080c 	andi	r2,r20,32
 10120d4:	1000aa26 	beq	r2,zero,1012380 <___vfiprintf_internal_r+0xa08>
 10120d8:	da802217 	ldw	r10,136(sp)
 10120dc:	54800017 	ldw	r18,0(r10)
 10120e0:	54c00117 	ldw	r19,4(r10)
 10120e4:	52800204 	addi	r10,r10,8
 10120e8:	da802215 	stw	r10,136(sp)
 10120ec:	a080004c 	andi	r2,r20,1
 10120f0:	1001d226 	beq	r2,zero,101283c <___vfiprintf_internal_r+0xec4>
 10120f4:	94c4b03a 	or	r2,r18,r19
 10120f8:	1002351e 	bne	r2,zero,10129d0 <___vfiprintf_internal_r+0x1058>
 10120fc:	d8001d85 	stb	zero,118(sp)
 1012100:	48022216 	blt	r9,zero,101298c <___vfiprintf_internal_r+0x1014>
 1012104:	00bfdfc4 	movi	r2,-129
 1012108:	a0a8703a 	and	r20,r20,r2
 101210c:	003f1506 	br	1011d64 <__alt_data_end+0xff011d64>
 1012110:	da802217 	ldw	r10,136(sp)
 1012114:	04800044 	movi	r18,1
 1012118:	d8001d85 	stb	zero,118(sp)
 101211c:	50800017 	ldw	r2,0(r10)
 1012120:	52800104 	addi	r10,r10,4
 1012124:	da802215 	stw	r10,136(sp)
 1012128:	d8801005 	stb	r2,64(sp)
 101212c:	9027883a 	mov	r19,r18
 1012130:	dd401004 	addi	r21,sp,64
 1012134:	0013883a 	mov	r9,zero
 1012138:	003f1706 	br	1011d98 <__alt_data_end+0xff011d98>
 101213c:	21003fcc 	andi	r4,r4,255
 1012140:	2003201e 	bne	r4,zero,1012dc4 <___vfiprintf_internal_r+0x144c>
 1012144:	a080080c 	andi	r2,r20,32
 1012148:	10004b26 	beq	r2,zero,1012278 <___vfiprintf_internal_r+0x900>
 101214c:	da802217 	ldw	r10,136(sp)
 1012150:	50800117 	ldw	r2,4(r10)
 1012154:	54800017 	ldw	r18,0(r10)
 1012158:	52800204 	addi	r10,r10,8
 101215c:	da802215 	stw	r10,136(sp)
 1012160:	1027883a 	mov	r19,r2
 1012164:	10022c16 	blt	r2,zero,1012a18 <___vfiprintf_internal_r+0x10a0>
 1012168:	df001d83 	ldbu	fp,118(sp)
 101216c:	48007216 	blt	r9,zero,1012338 <___vfiprintf_internal_r+0x9c0>
 1012170:	00ffdfc4 	movi	r3,-129
 1012174:	94c4b03a 	or	r2,r18,r19
 1012178:	a0e8703a 	and	r20,r20,r3
 101217c:	1000cc26 	beq	r2,zero,10124b0 <___vfiprintf_internal_r+0xb38>
 1012180:	98021026 	beq	r19,zero,10129c4 <___vfiprintf_internal_r+0x104c>
 1012184:	dc402415 	stw	r17,144(sp)
 1012188:	dc002515 	stw	r16,148(sp)
 101218c:	9823883a 	mov	r17,r19
 1012190:	9021883a 	mov	r16,r18
 1012194:	dd401a04 	addi	r21,sp,104
 1012198:	4825883a 	mov	r18,r9
 101219c:	4027883a 	mov	r19,r8
 10121a0:	8009883a 	mov	r4,r16
 10121a4:	880b883a 	mov	r5,r17
 10121a8:	01800284 	movi	r6,10
 10121ac:	000f883a 	mov	r7,zero
 10121b0:	10147440 	call	1014744 <__umoddi3>
 10121b4:	10800c04 	addi	r2,r2,48
 10121b8:	ad7fffc4 	addi	r21,r21,-1
 10121bc:	8009883a 	mov	r4,r16
 10121c0:	880b883a 	mov	r5,r17
 10121c4:	a8800005 	stb	r2,0(r21)
 10121c8:	01800284 	movi	r6,10
 10121cc:	000f883a 	mov	r7,zero
 10121d0:	10141cc0 	call	10141cc <__udivdi3>
 10121d4:	1021883a 	mov	r16,r2
 10121d8:	10c4b03a 	or	r2,r2,r3
 10121dc:	1823883a 	mov	r17,r3
 10121e0:	103fef1e 	bne	r2,zero,10121a0 <__alt_data_end+0xff0121a0>
 10121e4:	dc402417 	ldw	r17,144(sp)
 10121e8:	dc002517 	ldw	r16,148(sp)
 10121ec:	9013883a 	mov	r9,r18
 10121f0:	9811883a 	mov	r8,r19
 10121f4:	da801e17 	ldw	r10,120(sp)
 10121f8:	5567c83a 	sub	r19,r10,r21
 10121fc:	003ede06 	br	1011d78 <__alt_data_end+0xff011d78>
 1012200:	38803fcc 	andi	r2,r7,255
 1012204:	1080201c 	xori	r2,r2,128
 1012208:	10bfe004 	addi	r2,r2,-128
 101220c:	1002371e 	bne	r2,zero,1012aec <___vfiprintf_internal_r+0x1174>
 1012210:	01000044 	movi	r4,1
 1012214:	01c00804 	movi	r7,32
 1012218:	80c00007 	ldb	r3,0(r16)
 101221c:	003e3506 	br	1011af4 <__alt_data_end+0xff011af4>
 1012220:	a5000054 	ori	r20,r20,1
 1012224:	80c00007 	ldb	r3,0(r16)
 1012228:	003e3206 	br	1011af4 <__alt_data_end+0xff011af4>
 101222c:	a5002014 	ori	r20,r20,128
 1012230:	80c00007 	ldb	r3,0(r16)
 1012234:	003e2f06 	br	1011af4 <__alt_data_end+0xff011af4>
 1012238:	8015883a 	mov	r10,r16
 101223c:	0023883a 	mov	r17,zero
 1012240:	18bff404 	addi	r2,r3,-48
 1012244:	50c00007 	ldb	r3,0(r10)
 1012248:	8c4002a4 	muli	r17,r17,10
 101224c:	84000044 	addi	r16,r16,1
 1012250:	8015883a 	mov	r10,r16
 1012254:	1463883a 	add	r17,r2,r17
 1012258:	18bff404 	addi	r2,r3,-48
 101225c:	30bff92e 	bgeu	r6,r2,1012244 <__alt_data_end+0xff012244>
 1012260:	003e2506 	br	1011af8 <__alt_data_end+0xff011af8>
 1012264:	21003fcc 	andi	r4,r4,255
 1012268:	2002d41e 	bne	r4,zero,1012dbc <___vfiprintf_internal_r+0x1444>
 101226c:	a5000414 	ori	r20,r20,16
 1012270:	a080080c 	andi	r2,r20,32
 1012274:	103fb51e 	bne	r2,zero,101214c <__alt_data_end+0xff01214c>
 1012278:	a080040c 	andi	r2,r20,16
 101227c:	1001f826 	beq	r2,zero,1012a60 <___vfiprintf_internal_r+0x10e8>
 1012280:	da802217 	ldw	r10,136(sp)
 1012284:	54800017 	ldw	r18,0(r10)
 1012288:	52800104 	addi	r10,r10,4
 101228c:	da802215 	stw	r10,136(sp)
 1012290:	9027d7fa 	srai	r19,r18,31
 1012294:	9805883a 	mov	r2,r19
 1012298:	003fb206 	br	1012164 <__alt_data_end+0xff012164>
 101229c:	21003fcc 	andi	r4,r4,255
 10122a0:	2002c41e 	bne	r4,zero,1012db4 <___vfiprintf_internal_r+0x143c>
 10122a4:	a5000414 	ori	r20,r20,16
 10122a8:	a080080c 	andi	r2,r20,32
 10122ac:	103f5f1e 	bne	r2,zero,101202c <__alt_data_end+0xff01202c>
 10122b0:	a080040c 	andi	r2,r20,16
 10122b4:	10020f26 	beq	r2,zero,1012af4 <___vfiprintf_internal_r+0x117c>
 10122b8:	da802217 	ldw	r10,136(sp)
 10122bc:	d8001d85 	stb	zero,118(sp)
 10122c0:	0027883a 	mov	r19,zero
 10122c4:	50800104 	addi	r2,r10,4
 10122c8:	54800017 	ldw	r18,0(r10)
 10122cc:	48021116 	blt	r9,zero,1012b14 <___vfiprintf_internal_r+0x119c>
 10122d0:	00ffdfc4 	movi	r3,-129
 10122d4:	d8802215 	stw	r2,136(sp)
 10122d8:	a0e8703a 	and	r20,r20,r3
 10122dc:	903f5e1e 	bne	r18,zero,1012058 <__alt_data_end+0xff012058>
 10122e0:	0039883a 	mov	fp,zero
 10122e4:	4802a626 	beq	r9,zero,1012d80 <___vfiprintf_internal_r+0x1408>
 10122e8:	0025883a 	mov	r18,zero
 10122ec:	0027883a 	mov	r19,zero
 10122f0:	003f5a06 	br	101205c <__alt_data_end+0xff01205c>
 10122f4:	21003fcc 	andi	r4,r4,255
 10122f8:	20029f1e 	bne	r4,zero,1012d78 <___vfiprintf_internal_r+0x1400>
 10122fc:	a5000414 	ori	r20,r20,16
 1012300:	a080080c 	andi	r2,r20,32
 1012304:	10005e1e 	bne	r2,zero,1012480 <___vfiprintf_internal_r+0xb08>
 1012308:	a080040c 	andi	r2,r20,16
 101230c:	1001a21e 	bne	r2,zero,1012998 <___vfiprintf_internal_r+0x1020>
 1012310:	a080100c 	andi	r2,r20,64
 1012314:	d8001d85 	stb	zero,118(sp)
 1012318:	da802217 	ldw	r10,136(sp)
 101231c:	1002231e 	bne	r2,zero,1012bac <___vfiprintf_internal_r+0x1234>
 1012320:	50800104 	addi	r2,r10,4
 1012324:	54800017 	ldw	r18,0(r10)
 1012328:	0027883a 	mov	r19,zero
 101232c:	4801a00e 	bge	r9,zero,10129b0 <___vfiprintf_internal_r+0x1038>
 1012330:	d8802215 	stw	r2,136(sp)
 1012334:	0039883a 	mov	fp,zero
 1012338:	94c4b03a 	or	r2,r18,r19
 101233c:	103f901e 	bne	r2,zero,1012180 <__alt_data_end+0xff012180>
 1012340:	00800044 	movi	r2,1
 1012344:	10803fcc 	andi	r2,r2,255
 1012348:	00c00044 	movi	r3,1
 101234c:	10c05926 	beq	r2,r3,10124b4 <___vfiprintf_internal_r+0xb3c>
 1012350:	00c00084 	movi	r3,2
 1012354:	10ffe41e 	bne	r2,r3,10122e8 <__alt_data_end+0xff0122e8>
 1012358:	0025883a 	mov	r18,zero
 101235c:	0027883a 	mov	r19,zero
 1012360:	00013d06 	br	1012858 <___vfiprintf_internal_r+0xee0>
 1012364:	21003fcc 	andi	r4,r4,255
 1012368:	2002811e 	bne	r4,zero,1012d70 <___vfiprintf_internal_r+0x13f8>
 101236c:	008040b4 	movhi	r2,258
 1012370:	10ab9b04 	addi	r2,r2,-20884
 1012374:	d8802615 	stw	r2,152(sp)
 1012378:	a080080c 	andi	r2,r20,32
 101237c:	103f561e 	bne	r2,zero,10120d8 <__alt_data_end+0xff0120d8>
 1012380:	a080040c 	andi	r2,r20,16
 1012384:	1001d126 	beq	r2,zero,1012acc <___vfiprintf_internal_r+0x1154>
 1012388:	da802217 	ldw	r10,136(sp)
 101238c:	0027883a 	mov	r19,zero
 1012390:	54800017 	ldw	r18,0(r10)
 1012394:	52800104 	addi	r10,r10,4
 1012398:	da802215 	stw	r10,136(sp)
 101239c:	003f5306 	br	10120ec <__alt_data_end+0xff0120ec>
 10123a0:	da802217 	ldw	r10,136(sp)
 10123a4:	d8001d85 	stb	zero,118(sp)
 10123a8:	55400017 	ldw	r21,0(r10)
 10123ac:	50c00104 	addi	r3,r10,4
 10123b0:	a8024226 	beq	r21,zero,1012cbc <___vfiprintf_internal_r+0x1344>
 10123b4:	48021816 	blt	r9,zero,1012c18 <___vfiprintf_internal_r+0x12a0>
 10123b8:	480d883a 	mov	r6,r9
 10123bc:	000b883a 	mov	r5,zero
 10123c0:	a809883a 	mov	r4,r21
 10123c4:	d8c02a15 	stw	r3,168(sp)
 10123c8:	da002b15 	stw	r8,172(sp)
 10123cc:	da402c15 	stw	r9,176(sp)
 10123d0:	100e7b00 	call	100e7b0 <memchr>
 10123d4:	d8c02a17 	ldw	r3,168(sp)
 10123d8:	da002b17 	ldw	r8,172(sp)
 10123dc:	da402c17 	ldw	r9,176(sp)
 10123e0:	10024826 	beq	r2,zero,1012d04 <___vfiprintf_internal_r+0x138c>
 10123e4:	1567c83a 	sub	r19,r2,r21
 10123e8:	df001d83 	ldbu	fp,118(sp)
 10123ec:	d8c02215 	stw	r3,136(sp)
 10123f0:	0013883a 	mov	r9,zero
 10123f4:	003e6006 	br	1011d78 <__alt_data_end+0xff011d78>
 10123f8:	21003fcc 	andi	r4,r4,255
 10123fc:	203fc026 	beq	r4,zero,1012300 <__alt_data_end+0xff012300>
 1012400:	d9c01d85 	stb	r7,118(sp)
 1012404:	003fbe06 	br	1012300 <__alt_data_end+0xff012300>
 1012408:	da802217 	ldw	r10,136(sp)
 101240c:	54400017 	ldw	r17,0(r10)
 1012410:	50800104 	addi	r2,r10,4
 1012414:	883e3b16 	blt	r17,zero,1011d04 <__alt_data_end+0xff011d04>
 1012418:	d8802215 	stw	r2,136(sp)
 101241c:	80c00007 	ldb	r3,0(r16)
 1012420:	003db406 	br	1011af4 <__alt_data_end+0xff011af4>
 1012424:	01000044 	movi	r4,1
 1012428:	01c00ac4 	movi	r7,43
 101242c:	80c00007 	ldb	r3,0(r16)
 1012430:	003db006 	br	1011af4 <__alt_data_end+0xff011af4>
 1012434:	80c00007 	ldb	r3,0(r16)
 1012438:	82800044 	addi	r10,r16,1
 101243c:	1b423c26 	beq	r3,r13,1012d30 <___vfiprintf_internal_r+0x13b8>
 1012440:	18bff404 	addi	r2,r3,-48
 1012444:	0013883a 	mov	r9,zero
 1012448:	30822b36 	bltu	r6,r2,1012cf8 <___vfiprintf_internal_r+0x1380>
 101244c:	50c00007 	ldb	r3,0(r10)
 1012450:	4a4002a4 	muli	r9,r9,10
 1012454:	54000044 	addi	r16,r10,1
 1012458:	8015883a 	mov	r10,r16
 101245c:	4893883a 	add	r9,r9,r2
 1012460:	18bff404 	addi	r2,r3,-48
 1012464:	30bff92e 	bgeu	r6,r2,101244c <__alt_data_end+0xff01244c>
 1012468:	483da30e 	bge	r9,zero,1011af8 <__alt_data_end+0xff011af8>
 101246c:	027fffc4 	movi	r9,-1
 1012470:	003da106 	br	1011af8 <__alt_data_end+0xff011af8>
 1012474:	a5001014 	ori	r20,r20,64
 1012478:	80c00007 	ldb	r3,0(r16)
 101247c:	003d9d06 	br	1011af4 <__alt_data_end+0xff011af4>
 1012480:	da802217 	ldw	r10,136(sp)
 1012484:	d8001d85 	stb	zero,118(sp)
 1012488:	50c00204 	addi	r3,r10,8
 101248c:	54800017 	ldw	r18,0(r10)
 1012490:	54c00117 	ldw	r19,4(r10)
 1012494:	4801ca16 	blt	r9,zero,1012bc0 <___vfiprintf_internal_r+0x1248>
 1012498:	013fdfc4 	movi	r4,-129
 101249c:	94c4b03a 	or	r2,r18,r19
 10124a0:	d8c02215 	stw	r3,136(sp)
 10124a4:	a128703a 	and	r20,r20,r4
 10124a8:	0039883a 	mov	fp,zero
 10124ac:	103f341e 	bne	r2,zero,1012180 <__alt_data_end+0xff012180>
 10124b0:	483e2e26 	beq	r9,zero,1011d6c <__alt_data_end+0xff011d6c>
 10124b4:	0025883a 	mov	r18,zero
 10124b8:	94800c04 	addi	r18,r18,48
 10124bc:	dc8019c5 	stb	r18,103(sp)
 10124c0:	dcc02717 	ldw	r19,156(sp)
 10124c4:	dd4019c4 	addi	r21,sp,103
 10124c8:	003e2b06 	br	1011d78 <__alt_data_end+0xff011d78>
 10124cc:	21003fcc 	andi	r4,r4,255
 10124d0:	2002361e 	bne	r4,zero,1012dac <___vfiprintf_internal_r+0x1434>
 10124d4:	1801c126 	beq	r3,zero,1012bdc <___vfiprintf_internal_r+0x1264>
 10124d8:	04800044 	movi	r18,1
 10124dc:	d8c01005 	stb	r3,64(sp)
 10124e0:	d8001d85 	stb	zero,118(sp)
 10124e4:	9027883a 	mov	r19,r18
 10124e8:	dd401004 	addi	r21,sp,64
 10124ec:	003f1106 	br	1012134 <__alt_data_end+0xff012134>
 10124f0:	d9402117 	ldw	r5,132(sp)
 10124f4:	d9002017 	ldw	r4,128(sp)
 10124f8:	d9801a04 	addi	r6,sp,104
 10124fc:	d9c02b15 	stw	r7,172(sp)
 1012500:	dbc02a15 	stw	r15,168(sp)
 1012504:	10118640 	call	1011864 <__sprint_r.part.0>
 1012508:	d9c02b17 	ldw	r7,172(sp)
 101250c:	dbc02a17 	ldw	r15,168(sp)
 1012510:	10006d1e 	bne	r2,zero,10126c8 <___vfiprintf_internal_r+0xd50>
 1012514:	d9801b17 	ldw	r6,108(sp)
 1012518:	d8801c17 	ldw	r2,112(sp)
 101251c:	d811883a 	mov	r8,sp
 1012520:	31400044 	addi	r5,r6,1
 1012524:	003e3306 	br	1011df4 <__alt_data_end+0xff011df4>
 1012528:	d9401b17 	ldw	r5,108(sp)
 101252c:	d8801c17 	ldw	r2,112(sp)
 1012530:	29000044 	addi	r4,r5,1
 1012534:	d8c01d87 	ldb	r3,118(sp)
 1012538:	183e4d26 	beq	r3,zero,1011e70 <__alt_data_end+0xff011e70>
 101253c:	00c00044 	movi	r3,1
 1012540:	d9401d84 	addi	r5,sp,118
 1012544:	10c5883a 	add	r2,r2,r3
 1012548:	41400015 	stw	r5,0(r8)
 101254c:	40c00115 	stw	r3,4(r8)
 1012550:	d8801c15 	stw	r2,112(sp)
 1012554:	d9001b15 	stw	r4,108(sp)
 1012558:	014001c4 	movi	r5,7
 101255c:	2900a90e 	bge	r5,r4,1012804 <___vfiprintf_internal_r+0xe8c>
 1012560:	1000da1e 	bne	r2,zero,10128cc <___vfiprintf_internal_r+0xf54>
 1012564:	7000ab1e 	bne	r14,zero,1012814 <___vfiprintf_internal_r+0xe9c>
 1012568:	000b883a 	mov	r5,zero
 101256c:	1809883a 	mov	r4,r3
 1012570:	d811883a 	mov	r8,sp
 1012574:	00c02004 	movi	r3,128
 1012578:	e0fe4d26 	beq	fp,r3,1011eb0 <__alt_data_end+0xff011eb0>
 101257c:	4cf9c83a 	sub	fp,r9,r19
 1012580:	073e7b0e 	bge	zero,fp,1011f70 <__alt_data_end+0xff011f70>
 1012584:	01c00404 	movi	r7,16
 1012588:	3f01900e 	bge	r7,fp,1012bcc <___vfiprintf_internal_r+0x1254>
 101258c:	00c040b4 	movhi	r3,258
 1012590:	18ec0804 	addi	r3,r3,-20448
 1012594:	d8c02415 	stw	r3,144(sp)
 1012598:	034001c4 	movi	r13,7
 101259c:	00000506 	br	10125b4 <___vfiprintf_internal_r+0xc3c>
 10125a0:	29000084 	addi	r4,r5,2
 10125a4:	42000204 	addi	r8,r8,8
 10125a8:	180b883a 	mov	r5,r3
 10125ac:	e73ffc04 	addi	fp,fp,-16
 10125b0:	3f000d0e 	bge	r7,fp,10125e8 <___vfiprintf_internal_r+0xc70>
 10125b4:	10800404 	addi	r2,r2,16
 10125b8:	28c00044 	addi	r3,r5,1
 10125bc:	45c00015 	stw	r23,0(r8)
 10125c0:	41c00115 	stw	r7,4(r8)
 10125c4:	d8801c15 	stw	r2,112(sp)
 10125c8:	d8c01b15 	stw	r3,108(sp)
 10125cc:	68fff40e 	bge	r13,r3,10125a0 <__alt_data_end+0xff0125a0>
 10125d0:	1000101e 	bne	r2,zero,1012614 <___vfiprintf_internal_r+0xc9c>
 10125d4:	e73ffc04 	addi	fp,fp,-16
 10125d8:	01000044 	movi	r4,1
 10125dc:	000b883a 	mov	r5,zero
 10125e0:	d811883a 	mov	r8,sp
 10125e4:	3f3ff316 	blt	r7,fp,10125b4 <__alt_data_end+0xff0125b4>
 10125e8:	da802417 	ldw	r10,144(sp)
 10125ec:	1705883a 	add	r2,r2,fp
 10125f0:	47000115 	stw	fp,4(r8)
 10125f4:	42800015 	stw	r10,0(r8)
 10125f8:	d8801c15 	stw	r2,112(sp)
 10125fc:	d9001b15 	stw	r4,108(sp)
 1012600:	00c001c4 	movi	r3,7
 1012604:	19003616 	blt	r3,r4,10126e0 <___vfiprintf_internal_r+0xd68>
 1012608:	42000204 	addi	r8,r8,8
 101260c:	21000044 	addi	r4,r4,1
 1012610:	003e5706 	br	1011f70 <__alt_data_end+0xff011f70>
 1012614:	d9402117 	ldw	r5,132(sp)
 1012618:	d9002017 	ldw	r4,128(sp)
 101261c:	d9801a04 	addi	r6,sp,104
 1012620:	d9c02b15 	stw	r7,172(sp)
 1012624:	db402a15 	stw	r13,168(sp)
 1012628:	10118640 	call	1011864 <__sprint_r.part.0>
 101262c:	d9c02b17 	ldw	r7,172(sp)
 1012630:	db402a17 	ldw	r13,168(sp)
 1012634:	1000241e 	bne	r2,zero,10126c8 <___vfiprintf_internal_r+0xd50>
 1012638:	d9401b17 	ldw	r5,108(sp)
 101263c:	d8801c17 	ldw	r2,112(sp)
 1012640:	d811883a 	mov	r8,sp
 1012644:	29000044 	addi	r4,r5,1
 1012648:	003fd806 	br	10125ac <__alt_data_end+0xff0125ac>
 101264c:	d9401b17 	ldw	r5,108(sp)
 1012650:	00c040b4 	movhi	r3,258
 1012654:	18ec0c04 	addi	r3,r3,-20432
 1012658:	d8c02415 	stw	r3,144(sp)
 101265c:	29400044 	addi	r5,r5,1
 1012660:	d8c02417 	ldw	r3,144(sp)
 1012664:	14c5883a 	add	r2,r2,r19
 1012668:	44c00115 	stw	r19,4(r8)
 101266c:	40c00015 	stw	r3,0(r8)
 1012670:	d8801c15 	stw	r2,112(sp)
 1012674:	d9401b15 	stw	r5,108(sp)
 1012678:	00c001c4 	movi	r3,7
 101267c:	1940070e 	bge	r3,r5,101269c <___vfiprintf_internal_r+0xd24>
 1012680:	103e4826 	beq	r2,zero,1011fa4 <__alt_data_end+0xff011fa4>
 1012684:	d9402117 	ldw	r5,132(sp)
 1012688:	d9002017 	ldw	r4,128(sp)
 101268c:	d9801a04 	addi	r6,sp,104
 1012690:	10118640 	call	1011864 <__sprint_r.part.0>
 1012694:	10000c1e 	bne	r2,zero,10126c8 <___vfiprintf_internal_r+0xd50>
 1012698:	d8801c17 	ldw	r2,112(sp)
 101269c:	8c80010e 	bge	r17,r18,10126a4 <___vfiprintf_internal_r+0xd2c>
 10126a0:	9023883a 	mov	r17,r18
 10126a4:	da802317 	ldw	r10,140(sp)
 10126a8:	5455883a 	add	r10,r10,r17
 10126ac:	da802315 	stw	r10,140(sp)
 10126b0:	103e4126 	beq	r2,zero,1011fb8 <__alt_data_end+0xff011fb8>
 10126b4:	d9402117 	ldw	r5,132(sp)
 10126b8:	d9002017 	ldw	r4,128(sp)
 10126bc:	d9801a04 	addi	r6,sp,104
 10126c0:	10118640 	call	1011864 <__sprint_r.part.0>
 10126c4:	103e3c26 	beq	r2,zero,1011fb8 <__alt_data_end+0xff011fb8>
 10126c8:	dd002117 	ldw	r20,132(sp)
 10126cc:	a080030b 	ldhu	r2,12(r20)
 10126d0:	1080100c 	andi	r2,r2,64
 10126d4:	1001231e 	bne	r2,zero,1012b64 <___vfiprintf_internal_r+0x11ec>
 10126d8:	d8802317 	ldw	r2,140(sp)
 10126dc:	003d7b06 	br	1011ccc <__alt_data_end+0xff011ccc>
 10126e0:	1000991e 	bne	r2,zero,1012948 <___vfiprintf_internal_r+0xfd0>
 10126e4:	00c00044 	movi	r3,1
 10126e8:	9805883a 	mov	r2,r19
 10126ec:	dd400015 	stw	r21,0(sp)
 10126f0:	dcc00115 	stw	r19,4(sp)
 10126f4:	dcc01c15 	stw	r19,112(sp)
 10126f8:	d8c01b15 	stw	r3,108(sp)
 10126fc:	d811883a 	mov	r8,sp
 1012700:	42000204 	addi	r8,r8,8
 1012704:	a2c0010c 	andi	r11,r20,4
 1012708:	583fe426 	beq	r11,zero,101269c <__alt_data_end+0xff01269c>
 101270c:	8ca7c83a 	sub	r19,r17,r18
 1012710:	04ffe20e 	bge	zero,r19,101269c <__alt_data_end+0xff01269c>
 1012714:	01c00404 	movi	r7,16
 1012718:	3cffcc0e 	bge	r7,r19,101264c <__alt_data_end+0xff01264c>
 101271c:	028040b4 	movhi	r10,258
 1012720:	52ac0c04 	addi	r10,r10,-20432
 1012724:	d9001b17 	ldw	r4,108(sp)
 1012728:	da802415 	stw	r10,144(sp)
 101272c:	382b883a 	mov	r21,r7
 1012730:	050001c4 	movi	r20,7
 1012734:	df002017 	ldw	fp,128(sp)
 1012738:	00000506 	br	1012750 <___vfiprintf_internal_r+0xdd8>
 101273c:	21400084 	addi	r5,r4,2
 1012740:	42000204 	addi	r8,r8,8
 1012744:	1809883a 	mov	r4,r3
 1012748:	9cfffc04 	addi	r19,r19,-16
 101274c:	acffc40e 	bge	r21,r19,1012660 <__alt_data_end+0xff012660>
 1012750:	10800404 	addi	r2,r2,16
 1012754:	20c00044 	addi	r3,r4,1
 1012758:	45800015 	stw	r22,0(r8)
 101275c:	45400115 	stw	r21,4(r8)
 1012760:	d8801c15 	stw	r2,112(sp)
 1012764:	d8c01b15 	stw	r3,108(sp)
 1012768:	a0fff40e 	bge	r20,r3,101273c <__alt_data_end+0xff01273c>
 101276c:	1000041e 	bne	r2,zero,1012780 <___vfiprintf_internal_r+0xe08>
 1012770:	01400044 	movi	r5,1
 1012774:	0009883a 	mov	r4,zero
 1012778:	d811883a 	mov	r8,sp
 101277c:	003ff206 	br	1012748 <__alt_data_end+0xff012748>
 1012780:	d9402117 	ldw	r5,132(sp)
 1012784:	d9801a04 	addi	r6,sp,104
 1012788:	e009883a 	mov	r4,fp
 101278c:	10118640 	call	1011864 <__sprint_r.part.0>
 1012790:	103fcd1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 1012794:	d9001b17 	ldw	r4,108(sp)
 1012798:	d8801c17 	ldw	r2,112(sp)
 101279c:	d811883a 	mov	r8,sp
 10127a0:	21400044 	addi	r5,r4,1
 10127a4:	003fe806 	br	1012748 <__alt_data_end+0xff012748>
 10127a8:	d9402117 	ldw	r5,132(sp)
 10127ac:	d9002017 	ldw	r4,128(sp)
 10127b0:	d9801a04 	addi	r6,sp,104
 10127b4:	d9c02b15 	stw	r7,172(sp)
 10127b8:	db402a15 	stw	r13,168(sp)
 10127bc:	10118640 	call	1011864 <__sprint_r.part.0>
 10127c0:	d9c02b17 	ldw	r7,172(sp)
 10127c4:	db402a17 	ldw	r13,168(sp)
 10127c8:	103fbf1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 10127cc:	d9401b17 	ldw	r5,108(sp)
 10127d0:	d8801c17 	ldw	r2,112(sp)
 10127d4:	d811883a 	mov	r8,sp
 10127d8:	29800044 	addi	r6,r5,1
 10127dc:	003dc406 	br	1011ef0 <__alt_data_end+0xff011ef0>
 10127e0:	1000d21e 	bne	r2,zero,1012b2c <___vfiprintf_internal_r+0x11b4>
 10127e4:	d8c01d87 	ldb	r3,118(sp)
 10127e8:	18009526 	beq	r3,zero,1012a40 <___vfiprintf_internal_r+0x10c8>
 10127ec:	00800044 	movi	r2,1
 10127f0:	d8c01d84 	addi	r3,sp,118
 10127f4:	1009883a 	mov	r4,r2
 10127f8:	d8c00015 	stw	r3,0(sp)
 10127fc:	d8800115 	stw	r2,4(sp)
 1012800:	d811883a 	mov	r8,sp
 1012804:	200b883a 	mov	r5,r4
 1012808:	42000204 	addi	r8,r8,8
 101280c:	21000044 	addi	r4,r4,1
 1012810:	003d9706 	br	1011e70 <__alt_data_end+0xff011e70>
 1012814:	d9001d04 	addi	r4,sp,116
 1012818:	00800084 	movi	r2,2
 101281c:	d9000015 	stw	r4,0(sp)
 1012820:	d8800115 	stw	r2,4(sp)
 1012824:	1809883a 	mov	r4,r3
 1012828:	d811883a 	mov	r8,sp
 101282c:	200b883a 	mov	r5,r4
 1012830:	42000204 	addi	r8,r8,8
 1012834:	21000044 	addi	r4,r4,1
 1012838:	003f4e06 	br	1012574 <__alt_data_end+0xff012574>
 101283c:	d8001d85 	stb	zero,118(sp)
 1012840:	48005016 	blt	r9,zero,1012984 <___vfiprintf_internal_r+0x100c>
 1012844:	00ffdfc4 	movi	r3,-129
 1012848:	94c4b03a 	or	r2,r18,r19
 101284c:	a0e8703a 	and	r20,r20,r3
 1012850:	103d4426 	beq	r2,zero,1011d64 <__alt_data_end+0xff011d64>
 1012854:	0039883a 	mov	fp,zero
 1012858:	d9002617 	ldw	r4,152(sp)
 101285c:	dd401a04 	addi	r21,sp,104
 1012860:	908003cc 	andi	r2,r18,15
 1012864:	9806973a 	slli	r3,r19,28
 1012868:	2085883a 	add	r2,r4,r2
 101286c:	9024d13a 	srli	r18,r18,4
 1012870:	10800003 	ldbu	r2,0(r2)
 1012874:	9826d13a 	srli	r19,r19,4
 1012878:	ad7fffc4 	addi	r21,r21,-1
 101287c:	1ca4b03a 	or	r18,r3,r18
 1012880:	a8800005 	stb	r2,0(r21)
 1012884:	94c4b03a 	or	r2,r18,r19
 1012888:	103ff51e 	bne	r2,zero,1012860 <__alt_data_end+0xff012860>
 101288c:	003e5906 	br	10121f4 <__alt_data_end+0xff0121f4>
 1012890:	d9402117 	ldw	r5,132(sp)
 1012894:	d9002017 	ldw	r4,128(sp)
 1012898:	d9801a04 	addi	r6,sp,104
 101289c:	10118640 	call	1011864 <__sprint_r.part.0>
 10128a0:	103f891e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 10128a4:	d8801c17 	ldw	r2,112(sp)
 10128a8:	d811883a 	mov	r8,sp
 10128ac:	003f9506 	br	1012704 <__alt_data_end+0xff012704>
 10128b0:	d9402117 	ldw	r5,132(sp)
 10128b4:	d9002017 	ldw	r4,128(sp)
 10128b8:	d9801a04 	addi	r6,sp,104
 10128bc:	10118640 	call	1011864 <__sprint_r.part.0>
 10128c0:	103f811e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 10128c4:	d811883a 	mov	r8,sp
 10128c8:	003ced06 	br	1011c80 <__alt_data_end+0xff011c80>
 10128cc:	d9402117 	ldw	r5,132(sp)
 10128d0:	d9002017 	ldw	r4,128(sp)
 10128d4:	d9801a04 	addi	r6,sp,104
 10128d8:	da402c15 	stw	r9,176(sp)
 10128dc:	db802a15 	stw	r14,168(sp)
 10128e0:	10118640 	call	1011864 <__sprint_r.part.0>
 10128e4:	da402c17 	ldw	r9,176(sp)
 10128e8:	db802a17 	ldw	r14,168(sp)
 10128ec:	103f761e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 10128f0:	d9401b17 	ldw	r5,108(sp)
 10128f4:	d8801c17 	ldw	r2,112(sp)
 10128f8:	d811883a 	mov	r8,sp
 10128fc:	29000044 	addi	r4,r5,1
 1012900:	003d5b06 	br	1011e70 <__alt_data_end+0xff011e70>
 1012904:	d9402117 	ldw	r5,132(sp)
 1012908:	d9002017 	ldw	r4,128(sp)
 101290c:	d9801a04 	addi	r6,sp,104
 1012910:	da402c15 	stw	r9,176(sp)
 1012914:	10118640 	call	1011864 <__sprint_r.part.0>
 1012918:	da402c17 	ldw	r9,176(sp)
 101291c:	103f6a1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 1012920:	d9401b17 	ldw	r5,108(sp)
 1012924:	d8801c17 	ldw	r2,112(sp)
 1012928:	d811883a 	mov	r8,sp
 101292c:	29000044 	addi	r4,r5,1
 1012930:	003f1006 	br	1012574 <__alt_data_end+0xff012574>
 1012934:	1000c31e 	bne	r2,zero,1012c44 <___vfiprintf_internal_r+0x12cc>
 1012938:	01000044 	movi	r4,1
 101293c:	000b883a 	mov	r5,zero
 1012940:	d811883a 	mov	r8,sp
 1012944:	003f0d06 	br	101257c <__alt_data_end+0xff01257c>
 1012948:	d9402117 	ldw	r5,132(sp)
 101294c:	d9002017 	ldw	r4,128(sp)
 1012950:	d9801a04 	addi	r6,sp,104
 1012954:	10118640 	call	1011864 <__sprint_r.part.0>
 1012958:	103f5b1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 101295c:	d9001b17 	ldw	r4,108(sp)
 1012960:	d8801c17 	ldw	r2,112(sp)
 1012964:	d811883a 	mov	r8,sp
 1012968:	21000044 	addi	r4,r4,1
 101296c:	003d8006 	br	1011f70 <__alt_data_end+0xff011f70>
 1012970:	010040b4 	movhi	r4,258
 1012974:	212ba004 	addi	r4,r4,-20864
 1012978:	d9002615 	stw	r4,152(sp)
 101297c:	d8c02215 	stw	r3,136(sp)
 1012980:	1029883a 	mov	r20,r2
 1012984:	94c4b03a 	or	r2,r18,r19
 1012988:	103fb21e 	bne	r2,zero,1012854 <__alt_data_end+0xff012854>
 101298c:	0039883a 	mov	fp,zero
 1012990:	00800084 	movi	r2,2
 1012994:	003e6b06 	br	1012344 <__alt_data_end+0xff012344>
 1012998:	da802217 	ldw	r10,136(sp)
 101299c:	d8001d85 	stb	zero,118(sp)
 10129a0:	0027883a 	mov	r19,zero
 10129a4:	50800104 	addi	r2,r10,4
 10129a8:	54800017 	ldw	r18,0(r10)
 10129ac:	483e6016 	blt	r9,zero,1012330 <__alt_data_end+0xff012330>
 10129b0:	00ffdfc4 	movi	r3,-129
 10129b4:	d8802215 	stw	r2,136(sp)
 10129b8:	a0e8703a 	and	r20,r20,r3
 10129bc:	0039883a 	mov	fp,zero
 10129c0:	903ebb26 	beq	r18,zero,10124b0 <__alt_data_end+0xff0124b0>
 10129c4:	00800244 	movi	r2,9
 10129c8:	14bdee36 	bltu	r2,r18,1012184 <__alt_data_end+0xff012184>
 10129cc:	003eba06 	br	10124b8 <__alt_data_end+0xff0124b8>
 10129d0:	00800c04 	movi	r2,48
 10129d4:	d8c01d45 	stb	r3,117(sp)
 10129d8:	d8801d05 	stb	r2,116(sp)
 10129dc:	d8001d85 	stb	zero,118(sp)
 10129e0:	a0c00094 	ori	r3,r20,2
 10129e4:	4800a916 	blt	r9,zero,1012c8c <___vfiprintf_internal_r+0x1314>
 10129e8:	00bfdfc4 	movi	r2,-129
 10129ec:	a096703a 	and	r11,r20,r2
 10129f0:	5d000094 	ori	r20,r11,2
 10129f4:	0039883a 	mov	fp,zero
 10129f8:	003f9706 	br	1012858 <__alt_data_end+0xff012858>
 10129fc:	8025883a 	mov	r18,r16
 1012a00:	003c2e06 	br	1011abc <__alt_data_end+0xff011abc>
 1012a04:	008040b4 	movhi	r2,258
 1012a08:	10aba004 	addi	r2,r2,-20864
 1012a0c:	0039883a 	mov	fp,zero
 1012a10:	d8802615 	stw	r2,152(sp)
 1012a14:	003f9006 	br	1012858 <__alt_data_end+0xff012858>
 1012a18:	04a5c83a 	sub	r18,zero,r18
 1012a1c:	07000b44 	movi	fp,45
 1012a20:	9004c03a 	cmpne	r2,r18,zero
 1012a24:	04e7c83a 	sub	r19,zero,r19
 1012a28:	df001d85 	stb	fp,118(sp)
 1012a2c:	98a7c83a 	sub	r19,r19,r2
 1012a30:	48009f16 	blt	r9,zero,1012cb0 <___vfiprintf_internal_r+0x1338>
 1012a34:	00bfdfc4 	movi	r2,-129
 1012a38:	a0a8703a 	and	r20,r20,r2
 1012a3c:	003dd006 	br	1012180 <__alt_data_end+0xff012180>
 1012a40:	70004c26 	beq	r14,zero,1012b74 <___vfiprintf_internal_r+0x11fc>
 1012a44:	00800084 	movi	r2,2
 1012a48:	d8c01d04 	addi	r3,sp,116
 1012a4c:	d8c00015 	stw	r3,0(sp)
 1012a50:	d8800115 	stw	r2,4(sp)
 1012a54:	01000044 	movi	r4,1
 1012a58:	d811883a 	mov	r8,sp
 1012a5c:	003f7306 	br	101282c <__alt_data_end+0xff01282c>
 1012a60:	a080100c 	andi	r2,r20,64
 1012a64:	da802217 	ldw	r10,136(sp)
 1012a68:	103e0626 	beq	r2,zero,1012284 <__alt_data_end+0xff012284>
 1012a6c:	5480000f 	ldh	r18,0(r10)
 1012a70:	52800104 	addi	r10,r10,4
 1012a74:	da802215 	stw	r10,136(sp)
 1012a78:	9027d7fa 	srai	r19,r18,31
 1012a7c:	9805883a 	mov	r2,r19
 1012a80:	003db806 	br	1012164 <__alt_data_end+0xff012164>
 1012a84:	a080040c 	andi	r2,r20,16
 1012a88:	1000091e 	bne	r2,zero,1012ab0 <___vfiprintf_internal_r+0x1138>
 1012a8c:	a2c0100c 	andi	r11,r20,64
 1012a90:	58000726 	beq	r11,zero,1012ab0 <___vfiprintf_internal_r+0x1138>
 1012a94:	da802217 	ldw	r10,136(sp)
 1012a98:	50800017 	ldw	r2,0(r10)
 1012a9c:	52800104 	addi	r10,r10,4
 1012aa0:	da802215 	stw	r10,136(sp)
 1012aa4:	da802317 	ldw	r10,140(sp)
 1012aa8:	1280000d 	sth	r10,0(r2)
 1012aac:	003be706 	br	1011a4c <__alt_data_end+0xff011a4c>
 1012ab0:	da802217 	ldw	r10,136(sp)
 1012ab4:	50800017 	ldw	r2,0(r10)
 1012ab8:	52800104 	addi	r10,r10,4
 1012abc:	da802215 	stw	r10,136(sp)
 1012ac0:	da802317 	ldw	r10,140(sp)
 1012ac4:	12800015 	stw	r10,0(r2)
 1012ac8:	003be006 	br	1011a4c <__alt_data_end+0xff011a4c>
 1012acc:	a080100c 	andi	r2,r20,64
 1012ad0:	da802217 	ldw	r10,136(sp)
 1012ad4:	10003026 	beq	r2,zero,1012b98 <___vfiprintf_internal_r+0x1220>
 1012ad8:	5480000b 	ldhu	r18,0(r10)
 1012adc:	52800104 	addi	r10,r10,4
 1012ae0:	0027883a 	mov	r19,zero
 1012ae4:	da802215 	stw	r10,136(sp)
 1012ae8:	003d8006 	br	10120ec <__alt_data_end+0xff0120ec>
 1012aec:	80c00007 	ldb	r3,0(r16)
 1012af0:	003c0006 	br	1011af4 <__alt_data_end+0xff011af4>
 1012af4:	a080100c 	andi	r2,r20,64
 1012af8:	d8001d85 	stb	zero,118(sp)
 1012afc:	da802217 	ldw	r10,136(sp)
 1012b00:	1000201e 	bne	r2,zero,1012b84 <___vfiprintf_internal_r+0x120c>
 1012b04:	50800104 	addi	r2,r10,4
 1012b08:	54800017 	ldw	r18,0(r10)
 1012b0c:	0027883a 	mov	r19,zero
 1012b10:	483def0e 	bge	r9,zero,10122d0 <__alt_data_end+0xff0122d0>
 1012b14:	94c6b03a 	or	r3,r18,r19
 1012b18:	d8802215 	stw	r2,136(sp)
 1012b1c:	183d4e1e 	bne	r3,zero,1012058 <__alt_data_end+0xff012058>
 1012b20:	0039883a 	mov	fp,zero
 1012b24:	0005883a 	mov	r2,zero
 1012b28:	003e0606 	br	1012344 <__alt_data_end+0xff012344>
 1012b2c:	d9402117 	ldw	r5,132(sp)
 1012b30:	d9002017 	ldw	r4,128(sp)
 1012b34:	d9801a04 	addi	r6,sp,104
 1012b38:	da402c15 	stw	r9,176(sp)
 1012b3c:	db802a15 	stw	r14,168(sp)
 1012b40:	10118640 	call	1011864 <__sprint_r.part.0>
 1012b44:	da402c17 	ldw	r9,176(sp)
 1012b48:	db802a17 	ldw	r14,168(sp)
 1012b4c:	103ede1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 1012b50:	d9401b17 	ldw	r5,108(sp)
 1012b54:	d8801c17 	ldw	r2,112(sp)
 1012b58:	d811883a 	mov	r8,sp
 1012b5c:	29000044 	addi	r4,r5,1
 1012b60:	003e7406 	br	1012534 <__alt_data_end+0xff012534>
 1012b64:	00bfffc4 	movi	r2,-1
 1012b68:	003c5806 	br	1011ccc <__alt_data_end+0xff011ccc>
 1012b6c:	d811883a 	mov	r8,sp
 1012b70:	003ee806 	br	1012714 <__alt_data_end+0xff012714>
 1012b74:	000b883a 	mov	r5,zero
 1012b78:	01000044 	movi	r4,1
 1012b7c:	d811883a 	mov	r8,sp
 1012b80:	003e7c06 	br	1012574 <__alt_data_end+0xff012574>
 1012b84:	50800104 	addi	r2,r10,4
 1012b88:	5480000b 	ldhu	r18,0(r10)
 1012b8c:	0027883a 	mov	r19,zero
 1012b90:	483dcf0e 	bge	r9,zero,10122d0 <__alt_data_end+0xff0122d0>
 1012b94:	003fdf06 	br	1012b14 <__alt_data_end+0xff012b14>
 1012b98:	54800017 	ldw	r18,0(r10)
 1012b9c:	52800104 	addi	r10,r10,4
 1012ba0:	0027883a 	mov	r19,zero
 1012ba4:	da802215 	stw	r10,136(sp)
 1012ba8:	003d5006 	br	10120ec <__alt_data_end+0xff0120ec>
 1012bac:	50800104 	addi	r2,r10,4
 1012bb0:	5480000b 	ldhu	r18,0(r10)
 1012bb4:	0027883a 	mov	r19,zero
 1012bb8:	483f7d0e 	bge	r9,zero,10129b0 <__alt_data_end+0xff0129b0>
 1012bbc:	003ddc06 	br	1012330 <__alt_data_end+0xff012330>
 1012bc0:	d8c02215 	stw	r3,136(sp)
 1012bc4:	0039883a 	mov	fp,zero
 1012bc8:	003ddb06 	br	1012338 <__alt_data_end+0xff012338>
 1012bcc:	028040b4 	movhi	r10,258
 1012bd0:	52ac0804 	addi	r10,r10,-20448
 1012bd4:	da802415 	stw	r10,144(sp)
 1012bd8:	003e8306 	br	10125e8 <__alt_data_end+0xff0125e8>
 1012bdc:	d8801c17 	ldw	r2,112(sp)
 1012be0:	dd002117 	ldw	r20,132(sp)
 1012be4:	103eb926 	beq	r2,zero,10126cc <__alt_data_end+0xff0126cc>
 1012be8:	d9002017 	ldw	r4,128(sp)
 1012bec:	d9801a04 	addi	r6,sp,104
 1012bf0:	a00b883a 	mov	r5,r20
 1012bf4:	10118640 	call	1011864 <__sprint_r.part.0>
 1012bf8:	003eb406 	br	10126cc <__alt_data_end+0xff0126cc>
 1012bfc:	80c00043 	ldbu	r3,1(r16)
 1012c00:	a5000814 	ori	r20,r20,32
 1012c04:	84000044 	addi	r16,r16,1
 1012c08:	18c03fcc 	andi	r3,r3,255
 1012c0c:	18c0201c 	xori	r3,r3,128
 1012c10:	18ffe004 	addi	r3,r3,-128
 1012c14:	003bb706 	br	1011af4 <__alt_data_end+0xff011af4>
 1012c18:	a809883a 	mov	r4,r21
 1012c1c:	d8c02a15 	stw	r3,168(sp)
 1012c20:	da002b15 	stw	r8,172(sp)
 1012c24:	10099b40 	call	10099b4 <strlen>
 1012c28:	d8c02a17 	ldw	r3,168(sp)
 1012c2c:	1027883a 	mov	r19,r2
 1012c30:	df001d83 	ldbu	fp,118(sp)
 1012c34:	d8c02215 	stw	r3,136(sp)
 1012c38:	0013883a 	mov	r9,zero
 1012c3c:	da002b17 	ldw	r8,172(sp)
 1012c40:	003c4d06 	br	1011d78 <__alt_data_end+0xff011d78>
 1012c44:	d9402117 	ldw	r5,132(sp)
 1012c48:	d9002017 	ldw	r4,128(sp)
 1012c4c:	d9801a04 	addi	r6,sp,104
 1012c50:	da402c15 	stw	r9,176(sp)
 1012c54:	10118640 	call	1011864 <__sprint_r.part.0>
 1012c58:	da402c17 	ldw	r9,176(sp)
 1012c5c:	103e9a1e 	bne	r2,zero,10126c8 <__alt_data_end+0xff0126c8>
 1012c60:	d9401b17 	ldw	r5,108(sp)
 1012c64:	d8801c17 	ldw	r2,112(sp)
 1012c68:	d811883a 	mov	r8,sp
 1012c6c:	29000044 	addi	r4,r5,1
 1012c70:	003e4206 	br	101257c <__alt_data_end+0xff01257c>
 1012c74:	d9401b17 	ldw	r5,108(sp)
 1012c78:	010040b4 	movhi	r4,258
 1012c7c:	212c0c04 	addi	r4,r4,-20432
 1012c80:	d9002415 	stw	r4,144(sp)
 1012c84:	29400044 	addi	r5,r5,1
 1012c88:	003c6d06 	br	1011e40 <__alt_data_end+0xff011e40>
 1012c8c:	0039883a 	mov	fp,zero
 1012c90:	00800084 	movi	r2,2
 1012c94:	10803fcc 	andi	r2,r2,255
 1012c98:	01000044 	movi	r4,1
 1012c9c:	11001e26 	beq	r2,r4,1012d18 <___vfiprintf_internal_r+0x13a0>
 1012ca0:	01000084 	movi	r4,2
 1012ca4:	11001e1e 	bne	r2,r4,1012d20 <___vfiprintf_internal_r+0x13a8>
 1012ca8:	1829883a 	mov	r20,r3
 1012cac:	003eea06 	br	1012858 <__alt_data_end+0xff012858>
 1012cb0:	a007883a 	mov	r3,r20
 1012cb4:	00800044 	movi	r2,1
 1012cb8:	003ff606 	br	1012c94 <__alt_data_end+0xff012c94>
 1012cbc:	00800184 	movi	r2,6
 1012cc0:	1240012e 	bgeu	r2,r9,1012cc8 <___vfiprintf_internal_r+0x1350>
 1012cc4:	1013883a 	mov	r9,r2
 1012cc8:	4827883a 	mov	r19,r9
 1012ccc:	4825883a 	mov	r18,r9
 1012cd0:	48001516 	blt	r9,zero,1012d28 <___vfiprintf_internal_r+0x13b0>
 1012cd4:	054040b4 	movhi	r21,258
 1012cd8:	d8c02215 	stw	r3,136(sp)
 1012cdc:	ad6ba504 	addi	r21,r21,-20844
 1012ce0:	003d1406 	br	1012134 <__alt_data_end+0xff012134>
 1012ce4:	028040b4 	movhi	r10,258
 1012ce8:	52ac0804 	addi	r10,r10,-20448
 1012cec:	da802415 	stw	r10,144(sp)
 1012cf0:	200d883a 	mov	r6,r4
 1012cf4:	003c9106 	br	1011f3c <__alt_data_end+0xff011f3c>
 1012cf8:	5021883a 	mov	r16,r10
 1012cfc:	0013883a 	mov	r9,zero
 1012d00:	003b7d06 	br	1011af8 <__alt_data_end+0xff011af8>
 1012d04:	4827883a 	mov	r19,r9
 1012d08:	df001d83 	ldbu	fp,118(sp)
 1012d0c:	d8c02215 	stw	r3,136(sp)
 1012d10:	0013883a 	mov	r9,zero
 1012d14:	003c1806 	br	1011d78 <__alt_data_end+0xff011d78>
 1012d18:	1829883a 	mov	r20,r3
 1012d1c:	003d1806 	br	1012180 <__alt_data_end+0xff012180>
 1012d20:	1829883a 	mov	r20,r3
 1012d24:	003ccd06 	br	101205c <__alt_data_end+0xff01205c>
 1012d28:	0025883a 	mov	r18,zero
 1012d2c:	003fe906 	br	1012cd4 <__alt_data_end+0xff012cd4>
 1012d30:	d8802217 	ldw	r2,136(sp)
 1012d34:	80c00043 	ldbu	r3,1(r16)
 1012d38:	5021883a 	mov	r16,r10
 1012d3c:	12400017 	ldw	r9,0(r2)
 1012d40:	10800104 	addi	r2,r2,4
 1012d44:	d8802215 	stw	r2,136(sp)
 1012d48:	483faf0e 	bge	r9,zero,1012c08 <__alt_data_end+0xff012c08>
 1012d4c:	18c03fcc 	andi	r3,r3,255
 1012d50:	18c0201c 	xori	r3,r3,128
 1012d54:	027fffc4 	movi	r9,-1
 1012d58:	18ffe004 	addi	r3,r3,-128
 1012d5c:	003b6506 	br	1011af4 <__alt_data_end+0xff011af4>
 1012d60:	d9c01d85 	stb	r7,118(sp)
 1012d64:	003ca006 	br	1011fe8 <__alt_data_end+0xff011fe8>
 1012d68:	d9c01d85 	stb	r7,118(sp)
 1012d6c:	003cad06 	br	1012024 <__alt_data_end+0xff012024>
 1012d70:	d9c01d85 	stb	r7,118(sp)
 1012d74:	003d7d06 	br	101236c <__alt_data_end+0xff01236c>
 1012d78:	d9c01d85 	stb	r7,118(sp)
 1012d7c:	003d5f06 	br	10122fc <__alt_data_end+0xff0122fc>
 1012d80:	a080004c 	andi	r2,r20,1
 1012d84:	0039883a 	mov	fp,zero
 1012d88:	10000526 	beq	r2,zero,1012da0 <___vfiprintf_internal_r+0x1428>
 1012d8c:	00800c04 	movi	r2,48
 1012d90:	d88019c5 	stb	r2,103(sp)
 1012d94:	dcc02717 	ldw	r19,156(sp)
 1012d98:	dd4019c4 	addi	r21,sp,103
 1012d9c:	003bf606 	br	1011d78 <__alt_data_end+0xff011d78>
 1012da0:	0027883a 	mov	r19,zero
 1012da4:	dd401a04 	addi	r21,sp,104
 1012da8:	003bf306 	br	1011d78 <__alt_data_end+0xff011d78>
 1012dac:	d9c01d85 	stb	r7,118(sp)
 1012db0:	003dc806 	br	10124d4 <__alt_data_end+0xff0124d4>
 1012db4:	d9c01d85 	stb	r7,118(sp)
 1012db8:	003d3a06 	br	10122a4 <__alt_data_end+0xff0122a4>
 1012dbc:	d9c01d85 	stb	r7,118(sp)
 1012dc0:	003d2a06 	br	101226c <__alt_data_end+0xff01226c>
 1012dc4:	d9c01d85 	stb	r7,118(sp)
 1012dc8:	003cde06 	br	1012144 <__alt_data_end+0xff012144>
 1012dcc:	d9c01d85 	stb	r7,118(sp)
 1012dd0:	003cbc06 	br	10120c4 <__alt_data_end+0xff0120c4>

01012dd4 <__vfiprintf_internal>:
 1012dd4:	008040b4 	movhi	r2,258
 1012dd8:	10b34204 	addi	r2,r2,-13048
 1012ddc:	300f883a 	mov	r7,r6
 1012de0:	280d883a 	mov	r6,r5
 1012de4:	200b883a 	mov	r5,r4
 1012de8:	11000017 	ldw	r4,0(r2)
 1012dec:	10119781 	jmpi	1011978 <___vfiprintf_internal_r>

01012df0 <__sbprintf>:
 1012df0:	2880030b 	ldhu	r2,12(r5)
 1012df4:	2ac01917 	ldw	r11,100(r5)
 1012df8:	2a80038b 	ldhu	r10,14(r5)
 1012dfc:	2a400717 	ldw	r9,28(r5)
 1012e00:	2a000917 	ldw	r8,36(r5)
 1012e04:	defee204 	addi	sp,sp,-1144
 1012e08:	00c10004 	movi	r3,1024
 1012e0c:	dc011a15 	stw	r16,1128(sp)
 1012e10:	10bfff4c 	andi	r2,r2,65533
 1012e14:	2821883a 	mov	r16,r5
 1012e18:	d8cb883a 	add	r5,sp,r3
 1012e1c:	dc811c15 	stw	r18,1136(sp)
 1012e20:	dc411b15 	stw	r17,1132(sp)
 1012e24:	dfc11d15 	stw	ra,1140(sp)
 1012e28:	2025883a 	mov	r18,r4
 1012e2c:	d881030d 	sth	r2,1036(sp)
 1012e30:	dac11915 	stw	r11,1124(sp)
 1012e34:	da81038d 	sth	r10,1038(sp)
 1012e38:	da410715 	stw	r9,1052(sp)
 1012e3c:	da010915 	stw	r8,1060(sp)
 1012e40:	dec10015 	stw	sp,1024(sp)
 1012e44:	dec10415 	stw	sp,1040(sp)
 1012e48:	d8c10215 	stw	r3,1032(sp)
 1012e4c:	d8c10515 	stw	r3,1044(sp)
 1012e50:	d8010615 	stw	zero,1048(sp)
 1012e54:	10119780 	call	1011978 <___vfiprintf_internal_r>
 1012e58:	1023883a 	mov	r17,r2
 1012e5c:	10000416 	blt	r2,zero,1012e70 <__sbprintf+0x80>
 1012e60:	d9410004 	addi	r5,sp,1024
 1012e64:	9009883a 	mov	r4,r18
 1012e68:	10134980 	call	1013498 <_fflush_r>
 1012e6c:	10000d1e 	bne	r2,zero,1012ea4 <__sbprintf+0xb4>
 1012e70:	d881030b 	ldhu	r2,1036(sp)
 1012e74:	1080100c 	andi	r2,r2,64
 1012e78:	10000326 	beq	r2,zero,1012e88 <__sbprintf+0x98>
 1012e7c:	8080030b 	ldhu	r2,12(r16)
 1012e80:	10801014 	ori	r2,r2,64
 1012e84:	8080030d 	sth	r2,12(r16)
 1012e88:	8805883a 	mov	r2,r17
 1012e8c:	dfc11d17 	ldw	ra,1140(sp)
 1012e90:	dc811c17 	ldw	r18,1136(sp)
 1012e94:	dc411b17 	ldw	r17,1132(sp)
 1012e98:	dc011a17 	ldw	r16,1128(sp)
 1012e9c:	dec11e04 	addi	sp,sp,1144
 1012ea0:	f800283a 	ret
 1012ea4:	047fffc4 	movi	r17,-1
 1012ea8:	003ff106 	br	1012e70 <__alt_data_end+0xff012e70>

01012eac <_write_r>:
 1012eac:	defffd04 	addi	sp,sp,-12
 1012eb0:	2805883a 	mov	r2,r5
 1012eb4:	dc000015 	stw	r16,0(sp)
 1012eb8:	040040b4 	movhi	r16,258
 1012ebc:	dc400115 	stw	r17,4(sp)
 1012ec0:	300b883a 	mov	r5,r6
 1012ec4:	843a6004 	addi	r16,r16,-5760
 1012ec8:	2023883a 	mov	r17,r4
 1012ecc:	380d883a 	mov	r6,r7
 1012ed0:	1009883a 	mov	r4,r2
 1012ed4:	dfc00215 	stw	ra,8(sp)
 1012ed8:	80000015 	stw	zero,0(r16)
 1012edc:	10180440 	call	1018044 <write>
 1012ee0:	00ffffc4 	movi	r3,-1
 1012ee4:	10c00526 	beq	r2,r3,1012efc <_write_r+0x50>
 1012ee8:	dfc00217 	ldw	ra,8(sp)
 1012eec:	dc400117 	ldw	r17,4(sp)
 1012ef0:	dc000017 	ldw	r16,0(sp)
 1012ef4:	dec00304 	addi	sp,sp,12
 1012ef8:	f800283a 	ret
 1012efc:	80c00017 	ldw	r3,0(r16)
 1012f00:	183ff926 	beq	r3,zero,1012ee8 <__alt_data_end+0xff012ee8>
 1012f04:	88c00015 	stw	r3,0(r17)
 1012f08:	003ff706 	br	1012ee8 <__alt_data_end+0xff012ee8>

01012f0c <__swsetup_r>:
 1012f0c:	008040b4 	movhi	r2,258
 1012f10:	defffd04 	addi	sp,sp,-12
 1012f14:	10b34204 	addi	r2,r2,-13048
 1012f18:	dc400115 	stw	r17,4(sp)
 1012f1c:	2023883a 	mov	r17,r4
 1012f20:	11000017 	ldw	r4,0(r2)
 1012f24:	dc000015 	stw	r16,0(sp)
 1012f28:	dfc00215 	stw	ra,8(sp)
 1012f2c:	2821883a 	mov	r16,r5
 1012f30:	20000226 	beq	r4,zero,1012f3c <__swsetup_r+0x30>
 1012f34:	20800e17 	ldw	r2,56(r4)
 1012f38:	10003126 	beq	r2,zero,1013000 <__swsetup_r+0xf4>
 1012f3c:	8080030b 	ldhu	r2,12(r16)
 1012f40:	10c0020c 	andi	r3,r2,8
 1012f44:	1009883a 	mov	r4,r2
 1012f48:	18000f26 	beq	r3,zero,1012f88 <__swsetup_r+0x7c>
 1012f4c:	80c00417 	ldw	r3,16(r16)
 1012f50:	18001526 	beq	r3,zero,1012fa8 <__swsetup_r+0x9c>
 1012f54:	1100004c 	andi	r4,r2,1
 1012f58:	20001c1e 	bne	r4,zero,1012fcc <__swsetup_r+0xc0>
 1012f5c:	1080008c 	andi	r2,r2,2
 1012f60:	1000291e 	bne	r2,zero,1013008 <__swsetup_r+0xfc>
 1012f64:	80800517 	ldw	r2,20(r16)
 1012f68:	80800215 	stw	r2,8(r16)
 1012f6c:	18001c26 	beq	r3,zero,1012fe0 <__swsetup_r+0xd4>
 1012f70:	0005883a 	mov	r2,zero
 1012f74:	dfc00217 	ldw	ra,8(sp)
 1012f78:	dc400117 	ldw	r17,4(sp)
 1012f7c:	dc000017 	ldw	r16,0(sp)
 1012f80:	dec00304 	addi	sp,sp,12
 1012f84:	f800283a 	ret
 1012f88:	2080040c 	andi	r2,r4,16
 1012f8c:	10002e26 	beq	r2,zero,1013048 <__swsetup_r+0x13c>
 1012f90:	2080010c 	andi	r2,r4,4
 1012f94:	10001e1e 	bne	r2,zero,1013010 <__swsetup_r+0x104>
 1012f98:	80c00417 	ldw	r3,16(r16)
 1012f9c:	20800214 	ori	r2,r4,8
 1012fa0:	8080030d 	sth	r2,12(r16)
 1012fa4:	183feb1e 	bne	r3,zero,1012f54 <__alt_data_end+0xff012f54>
 1012fa8:	1100a00c 	andi	r4,r2,640
 1012fac:	01408004 	movi	r5,512
 1012fb0:	217fe826 	beq	r4,r5,1012f54 <__alt_data_end+0xff012f54>
 1012fb4:	800b883a 	mov	r5,r16
 1012fb8:	8809883a 	mov	r4,r17
 1012fbc:	1013bc00 	call	1013bc0 <__smakebuf_r>
 1012fc0:	8080030b 	ldhu	r2,12(r16)
 1012fc4:	80c00417 	ldw	r3,16(r16)
 1012fc8:	003fe206 	br	1012f54 <__alt_data_end+0xff012f54>
 1012fcc:	80800517 	ldw	r2,20(r16)
 1012fd0:	80000215 	stw	zero,8(r16)
 1012fd4:	0085c83a 	sub	r2,zero,r2
 1012fd8:	80800615 	stw	r2,24(r16)
 1012fdc:	183fe41e 	bne	r3,zero,1012f70 <__alt_data_end+0xff012f70>
 1012fe0:	80c0030b 	ldhu	r3,12(r16)
 1012fe4:	0005883a 	mov	r2,zero
 1012fe8:	1900200c 	andi	r4,r3,128
 1012fec:	203fe126 	beq	r4,zero,1012f74 <__alt_data_end+0xff012f74>
 1012ff0:	18c01014 	ori	r3,r3,64
 1012ff4:	80c0030d 	sth	r3,12(r16)
 1012ff8:	00bfffc4 	movi	r2,-1
 1012ffc:	003fdd06 	br	1012f74 <__alt_data_end+0xff012f74>
 1013000:	100d8340 	call	100d834 <__sinit>
 1013004:	003fcd06 	br	1012f3c <__alt_data_end+0xff012f3c>
 1013008:	0005883a 	mov	r2,zero
 101300c:	003fd606 	br	1012f68 <__alt_data_end+0xff012f68>
 1013010:	81400c17 	ldw	r5,48(r16)
 1013014:	28000626 	beq	r5,zero,1013030 <__swsetup_r+0x124>
 1013018:	80801004 	addi	r2,r16,64
 101301c:	28800326 	beq	r5,r2,101302c <__swsetup_r+0x120>
 1013020:	8809883a 	mov	r4,r17
 1013024:	10138500 	call	1013850 <_free_r>
 1013028:	8100030b 	ldhu	r4,12(r16)
 101302c:	80000c15 	stw	zero,48(r16)
 1013030:	80c00417 	ldw	r3,16(r16)
 1013034:	00bff6c4 	movi	r2,-37
 1013038:	1108703a 	and	r4,r2,r4
 101303c:	80000115 	stw	zero,4(r16)
 1013040:	80c00015 	stw	r3,0(r16)
 1013044:	003fd506 	br	1012f9c <__alt_data_end+0xff012f9c>
 1013048:	00800244 	movi	r2,9
 101304c:	88800015 	stw	r2,0(r17)
 1013050:	20801014 	ori	r2,r4,64
 1013054:	8080030d 	sth	r2,12(r16)
 1013058:	00bfffc4 	movi	r2,-1
 101305c:	003fc506 	br	1012f74 <__alt_data_end+0xff012f74>

01013060 <_close_r>:
 1013060:	defffd04 	addi	sp,sp,-12
 1013064:	dc000015 	stw	r16,0(sp)
 1013068:	040040b4 	movhi	r16,258
 101306c:	dc400115 	stw	r17,4(sp)
 1013070:	843a6004 	addi	r16,r16,-5760
 1013074:	2023883a 	mov	r17,r4
 1013078:	2809883a 	mov	r4,r5
 101307c:	dfc00215 	stw	ra,8(sp)
 1013080:	80000015 	stw	zero,0(r16)
 1013084:	10174d40 	call	10174d4 <close>
 1013088:	00ffffc4 	movi	r3,-1
 101308c:	10c00526 	beq	r2,r3,10130a4 <_close_r+0x44>
 1013090:	dfc00217 	ldw	ra,8(sp)
 1013094:	dc400117 	ldw	r17,4(sp)
 1013098:	dc000017 	ldw	r16,0(sp)
 101309c:	dec00304 	addi	sp,sp,12
 10130a0:	f800283a 	ret
 10130a4:	80c00017 	ldw	r3,0(r16)
 10130a8:	183ff926 	beq	r3,zero,1013090 <__alt_data_end+0xff013090>
 10130ac:	88c00015 	stw	r3,0(r17)
 10130b0:	003ff706 	br	1013090 <__alt_data_end+0xff013090>

010130b4 <_calloc_r>:
 10130b4:	298b383a 	mul	r5,r5,r6
 10130b8:	defffe04 	addi	sp,sp,-8
 10130bc:	dfc00115 	stw	ra,4(sp)
 10130c0:	dc000015 	stw	r16,0(sp)
 10130c4:	100dfa40 	call	100dfa4 <_malloc_r>
 10130c8:	10002926 	beq	r2,zero,1013170 <_calloc_r+0xbc>
 10130cc:	11bfff17 	ldw	r6,-4(r2)
 10130d0:	1021883a 	mov	r16,r2
 10130d4:	00bfff04 	movi	r2,-4
 10130d8:	308c703a 	and	r6,r6,r2
 10130dc:	00c00904 	movi	r3,36
 10130e0:	308d883a 	add	r6,r6,r2
 10130e4:	19801636 	bltu	r3,r6,1013140 <_calloc_r+0x8c>
 10130e8:	008004c4 	movi	r2,19
 10130ec:	11800b2e 	bgeu	r2,r6,101311c <_calloc_r+0x68>
 10130f0:	80000015 	stw	zero,0(r16)
 10130f4:	80000115 	stw	zero,4(r16)
 10130f8:	008006c4 	movi	r2,27
 10130fc:	11801a2e 	bgeu	r2,r6,1013168 <_calloc_r+0xb4>
 1013100:	80000215 	stw	zero,8(r16)
 1013104:	80000315 	stw	zero,12(r16)
 1013108:	30c0151e 	bne	r6,r3,1013160 <_calloc_r+0xac>
 101310c:	80000415 	stw	zero,16(r16)
 1013110:	80800604 	addi	r2,r16,24
 1013114:	80000515 	stw	zero,20(r16)
 1013118:	00000106 	br	1013120 <_calloc_r+0x6c>
 101311c:	8005883a 	mov	r2,r16
 1013120:	10000015 	stw	zero,0(r2)
 1013124:	10000115 	stw	zero,4(r2)
 1013128:	10000215 	stw	zero,8(r2)
 101312c:	8005883a 	mov	r2,r16
 1013130:	dfc00117 	ldw	ra,4(sp)
 1013134:	dc000017 	ldw	r16,0(sp)
 1013138:	dec00204 	addi	sp,sp,8
 101313c:	f800283a 	ret
 1013140:	000b883a 	mov	r5,zero
 1013144:	8009883a 	mov	r4,r16
 1013148:	1008ea80 	call	1008ea8 <memset>
 101314c:	8005883a 	mov	r2,r16
 1013150:	dfc00117 	ldw	ra,4(sp)
 1013154:	dc000017 	ldw	r16,0(sp)
 1013158:	dec00204 	addi	sp,sp,8
 101315c:	f800283a 	ret
 1013160:	80800404 	addi	r2,r16,16
 1013164:	003fee06 	br	1013120 <__alt_data_end+0xff013120>
 1013168:	80800204 	addi	r2,r16,8
 101316c:	003fec06 	br	1013120 <__alt_data_end+0xff013120>
 1013170:	0005883a 	mov	r2,zero
 1013174:	003fee06 	br	1013130 <__alt_data_end+0xff013130>

01013178 <_fclose_r>:
 1013178:	28003926 	beq	r5,zero,1013260 <_fclose_r+0xe8>
 101317c:	defffc04 	addi	sp,sp,-16
 1013180:	dc400115 	stw	r17,4(sp)
 1013184:	dc000015 	stw	r16,0(sp)
 1013188:	dfc00315 	stw	ra,12(sp)
 101318c:	dc800215 	stw	r18,8(sp)
 1013190:	2023883a 	mov	r17,r4
 1013194:	2821883a 	mov	r16,r5
 1013198:	20000226 	beq	r4,zero,10131a4 <_fclose_r+0x2c>
 101319c:	20800e17 	ldw	r2,56(r4)
 10131a0:	10002726 	beq	r2,zero,1013240 <_fclose_r+0xc8>
 10131a4:	8080030f 	ldh	r2,12(r16)
 10131a8:	1000071e 	bne	r2,zero,10131c8 <_fclose_r+0x50>
 10131ac:	0005883a 	mov	r2,zero
 10131b0:	dfc00317 	ldw	ra,12(sp)
 10131b4:	dc800217 	ldw	r18,8(sp)
 10131b8:	dc400117 	ldw	r17,4(sp)
 10131bc:	dc000017 	ldw	r16,0(sp)
 10131c0:	dec00404 	addi	sp,sp,16
 10131c4:	f800283a 	ret
 10131c8:	800b883a 	mov	r5,r16
 10131cc:	8809883a 	mov	r4,r17
 10131d0:	101327c0 	call	101327c <__sflush_r>
 10131d4:	1025883a 	mov	r18,r2
 10131d8:	80800b17 	ldw	r2,44(r16)
 10131dc:	10000426 	beq	r2,zero,10131f0 <_fclose_r+0x78>
 10131e0:	81400717 	ldw	r5,28(r16)
 10131e4:	8809883a 	mov	r4,r17
 10131e8:	103ee83a 	callr	r2
 10131ec:	10001616 	blt	r2,zero,1013248 <_fclose_r+0xd0>
 10131f0:	8080030b 	ldhu	r2,12(r16)
 10131f4:	1080200c 	andi	r2,r2,128
 10131f8:	1000151e 	bne	r2,zero,1013250 <_fclose_r+0xd8>
 10131fc:	81400c17 	ldw	r5,48(r16)
 1013200:	28000526 	beq	r5,zero,1013218 <_fclose_r+0xa0>
 1013204:	80801004 	addi	r2,r16,64
 1013208:	28800226 	beq	r5,r2,1013214 <_fclose_r+0x9c>
 101320c:	8809883a 	mov	r4,r17
 1013210:	10138500 	call	1013850 <_free_r>
 1013214:	80000c15 	stw	zero,48(r16)
 1013218:	81401117 	ldw	r5,68(r16)
 101321c:	28000326 	beq	r5,zero,101322c <_fclose_r+0xb4>
 1013220:	8809883a 	mov	r4,r17
 1013224:	10138500 	call	1013850 <_free_r>
 1013228:	80001115 	stw	zero,68(r16)
 101322c:	100d8440 	call	100d844 <__sfp_lock_acquire>
 1013230:	8000030d 	sth	zero,12(r16)
 1013234:	100d8480 	call	100d848 <__sfp_lock_release>
 1013238:	9005883a 	mov	r2,r18
 101323c:	003fdc06 	br	10131b0 <__alt_data_end+0xff0131b0>
 1013240:	100d8340 	call	100d834 <__sinit>
 1013244:	003fd706 	br	10131a4 <__alt_data_end+0xff0131a4>
 1013248:	04bfffc4 	movi	r18,-1
 101324c:	003fe806 	br	10131f0 <__alt_data_end+0xff0131f0>
 1013250:	81400417 	ldw	r5,16(r16)
 1013254:	8809883a 	mov	r4,r17
 1013258:	10138500 	call	1013850 <_free_r>
 101325c:	003fe706 	br	10131fc <__alt_data_end+0xff0131fc>
 1013260:	0005883a 	mov	r2,zero
 1013264:	f800283a 	ret

01013268 <fclose>:
 1013268:	008040b4 	movhi	r2,258
 101326c:	10b34204 	addi	r2,r2,-13048
 1013270:	200b883a 	mov	r5,r4
 1013274:	11000017 	ldw	r4,0(r2)
 1013278:	10131781 	jmpi	1013178 <_fclose_r>

0101327c <__sflush_r>:
 101327c:	2880030b 	ldhu	r2,12(r5)
 1013280:	defffb04 	addi	sp,sp,-20
 1013284:	dcc00315 	stw	r19,12(sp)
 1013288:	dc400115 	stw	r17,4(sp)
 101328c:	dfc00415 	stw	ra,16(sp)
 1013290:	dc800215 	stw	r18,8(sp)
 1013294:	dc000015 	stw	r16,0(sp)
 1013298:	10c0020c 	andi	r3,r2,8
 101329c:	2823883a 	mov	r17,r5
 10132a0:	2027883a 	mov	r19,r4
 10132a4:	1800311e 	bne	r3,zero,101336c <__sflush_r+0xf0>
 10132a8:	28c00117 	ldw	r3,4(r5)
 10132ac:	10820014 	ori	r2,r2,2048
 10132b0:	2880030d 	sth	r2,12(r5)
 10132b4:	00c04b0e 	bge	zero,r3,10133e4 <__sflush_r+0x168>
 10132b8:	8a000a17 	ldw	r8,40(r17)
 10132bc:	40002326 	beq	r8,zero,101334c <__sflush_r+0xd0>
 10132c0:	9c000017 	ldw	r16,0(r19)
 10132c4:	10c4000c 	andi	r3,r2,4096
 10132c8:	98000015 	stw	zero,0(r19)
 10132cc:	18004826 	beq	r3,zero,10133f0 <__sflush_r+0x174>
 10132d0:	89801417 	ldw	r6,80(r17)
 10132d4:	10c0010c 	andi	r3,r2,4
 10132d8:	18000626 	beq	r3,zero,10132f4 <__sflush_r+0x78>
 10132dc:	88c00117 	ldw	r3,4(r17)
 10132e0:	88800c17 	ldw	r2,48(r17)
 10132e4:	30cdc83a 	sub	r6,r6,r3
 10132e8:	10000226 	beq	r2,zero,10132f4 <__sflush_r+0x78>
 10132ec:	88800f17 	ldw	r2,60(r17)
 10132f0:	308dc83a 	sub	r6,r6,r2
 10132f4:	89400717 	ldw	r5,28(r17)
 10132f8:	000f883a 	mov	r7,zero
 10132fc:	9809883a 	mov	r4,r19
 1013300:	403ee83a 	callr	r8
 1013304:	00ffffc4 	movi	r3,-1
 1013308:	10c04426 	beq	r2,r3,101341c <__sflush_r+0x1a0>
 101330c:	88c0030b 	ldhu	r3,12(r17)
 1013310:	89000417 	ldw	r4,16(r17)
 1013314:	88000115 	stw	zero,4(r17)
 1013318:	197dffcc 	andi	r5,r3,63487
 101331c:	8940030d 	sth	r5,12(r17)
 1013320:	89000015 	stw	r4,0(r17)
 1013324:	18c4000c 	andi	r3,r3,4096
 1013328:	18002c1e 	bne	r3,zero,10133dc <__sflush_r+0x160>
 101332c:	89400c17 	ldw	r5,48(r17)
 1013330:	9c000015 	stw	r16,0(r19)
 1013334:	28000526 	beq	r5,zero,101334c <__sflush_r+0xd0>
 1013338:	88801004 	addi	r2,r17,64
 101333c:	28800226 	beq	r5,r2,1013348 <__sflush_r+0xcc>
 1013340:	9809883a 	mov	r4,r19
 1013344:	10138500 	call	1013850 <_free_r>
 1013348:	88000c15 	stw	zero,48(r17)
 101334c:	0005883a 	mov	r2,zero
 1013350:	dfc00417 	ldw	ra,16(sp)
 1013354:	dcc00317 	ldw	r19,12(sp)
 1013358:	dc800217 	ldw	r18,8(sp)
 101335c:	dc400117 	ldw	r17,4(sp)
 1013360:	dc000017 	ldw	r16,0(sp)
 1013364:	dec00504 	addi	sp,sp,20
 1013368:	f800283a 	ret
 101336c:	2c800417 	ldw	r18,16(r5)
 1013370:	903ff626 	beq	r18,zero,101334c <__alt_data_end+0xff01334c>
 1013374:	2c000017 	ldw	r16,0(r5)
 1013378:	108000cc 	andi	r2,r2,3
 101337c:	2c800015 	stw	r18,0(r5)
 1013380:	84a1c83a 	sub	r16,r16,r18
 1013384:	1000131e 	bne	r2,zero,10133d4 <__sflush_r+0x158>
 1013388:	28800517 	ldw	r2,20(r5)
 101338c:	88800215 	stw	r2,8(r17)
 1013390:	04000316 	blt	zero,r16,10133a0 <__sflush_r+0x124>
 1013394:	003fed06 	br	101334c <__alt_data_end+0xff01334c>
 1013398:	90a5883a 	add	r18,r18,r2
 101339c:	043feb0e 	bge	zero,r16,101334c <__alt_data_end+0xff01334c>
 10133a0:	88800917 	ldw	r2,36(r17)
 10133a4:	89400717 	ldw	r5,28(r17)
 10133a8:	800f883a 	mov	r7,r16
 10133ac:	900d883a 	mov	r6,r18
 10133b0:	9809883a 	mov	r4,r19
 10133b4:	103ee83a 	callr	r2
 10133b8:	80a1c83a 	sub	r16,r16,r2
 10133bc:	00bff616 	blt	zero,r2,1013398 <__alt_data_end+0xff013398>
 10133c0:	88c0030b 	ldhu	r3,12(r17)
 10133c4:	00bfffc4 	movi	r2,-1
 10133c8:	18c01014 	ori	r3,r3,64
 10133cc:	88c0030d 	sth	r3,12(r17)
 10133d0:	003fdf06 	br	1013350 <__alt_data_end+0xff013350>
 10133d4:	0005883a 	mov	r2,zero
 10133d8:	003fec06 	br	101338c <__alt_data_end+0xff01338c>
 10133dc:	88801415 	stw	r2,80(r17)
 10133e0:	003fd206 	br	101332c <__alt_data_end+0xff01332c>
 10133e4:	28c00f17 	ldw	r3,60(r5)
 10133e8:	00ffb316 	blt	zero,r3,10132b8 <__alt_data_end+0xff0132b8>
 10133ec:	003fd706 	br	101334c <__alt_data_end+0xff01334c>
 10133f0:	89400717 	ldw	r5,28(r17)
 10133f4:	000d883a 	mov	r6,zero
 10133f8:	01c00044 	movi	r7,1
 10133fc:	9809883a 	mov	r4,r19
 1013400:	403ee83a 	callr	r8
 1013404:	100d883a 	mov	r6,r2
 1013408:	00bfffc4 	movi	r2,-1
 101340c:	30801426 	beq	r6,r2,1013460 <__sflush_r+0x1e4>
 1013410:	8880030b 	ldhu	r2,12(r17)
 1013414:	8a000a17 	ldw	r8,40(r17)
 1013418:	003fae06 	br	10132d4 <__alt_data_end+0xff0132d4>
 101341c:	98c00017 	ldw	r3,0(r19)
 1013420:	183fba26 	beq	r3,zero,101330c <__alt_data_end+0xff01330c>
 1013424:	01000744 	movi	r4,29
 1013428:	19000626 	beq	r3,r4,1013444 <__sflush_r+0x1c8>
 101342c:	01000584 	movi	r4,22
 1013430:	19000426 	beq	r3,r4,1013444 <__sflush_r+0x1c8>
 1013434:	88c0030b 	ldhu	r3,12(r17)
 1013438:	18c01014 	ori	r3,r3,64
 101343c:	88c0030d 	sth	r3,12(r17)
 1013440:	003fc306 	br	1013350 <__alt_data_end+0xff013350>
 1013444:	8880030b 	ldhu	r2,12(r17)
 1013448:	88c00417 	ldw	r3,16(r17)
 101344c:	88000115 	stw	zero,4(r17)
 1013450:	10bdffcc 	andi	r2,r2,63487
 1013454:	8880030d 	sth	r2,12(r17)
 1013458:	88c00015 	stw	r3,0(r17)
 101345c:	003fb306 	br	101332c <__alt_data_end+0xff01332c>
 1013460:	98800017 	ldw	r2,0(r19)
 1013464:	103fea26 	beq	r2,zero,1013410 <__alt_data_end+0xff013410>
 1013468:	00c00744 	movi	r3,29
 101346c:	10c00226 	beq	r2,r3,1013478 <__sflush_r+0x1fc>
 1013470:	00c00584 	movi	r3,22
 1013474:	10c0031e 	bne	r2,r3,1013484 <__sflush_r+0x208>
 1013478:	9c000015 	stw	r16,0(r19)
 101347c:	0005883a 	mov	r2,zero
 1013480:	003fb306 	br	1013350 <__alt_data_end+0xff013350>
 1013484:	88c0030b 	ldhu	r3,12(r17)
 1013488:	3005883a 	mov	r2,r6
 101348c:	18c01014 	ori	r3,r3,64
 1013490:	88c0030d 	sth	r3,12(r17)
 1013494:	003fae06 	br	1013350 <__alt_data_end+0xff013350>

01013498 <_fflush_r>:
 1013498:	defffd04 	addi	sp,sp,-12
 101349c:	dc000115 	stw	r16,4(sp)
 10134a0:	dfc00215 	stw	ra,8(sp)
 10134a4:	2021883a 	mov	r16,r4
 10134a8:	20000226 	beq	r4,zero,10134b4 <_fflush_r+0x1c>
 10134ac:	20800e17 	ldw	r2,56(r4)
 10134b0:	10000c26 	beq	r2,zero,10134e4 <_fflush_r+0x4c>
 10134b4:	2880030f 	ldh	r2,12(r5)
 10134b8:	1000051e 	bne	r2,zero,10134d0 <_fflush_r+0x38>
 10134bc:	0005883a 	mov	r2,zero
 10134c0:	dfc00217 	ldw	ra,8(sp)
 10134c4:	dc000117 	ldw	r16,4(sp)
 10134c8:	dec00304 	addi	sp,sp,12
 10134cc:	f800283a 	ret
 10134d0:	8009883a 	mov	r4,r16
 10134d4:	dfc00217 	ldw	ra,8(sp)
 10134d8:	dc000117 	ldw	r16,4(sp)
 10134dc:	dec00304 	addi	sp,sp,12
 10134e0:	101327c1 	jmpi	101327c <__sflush_r>
 10134e4:	d9400015 	stw	r5,0(sp)
 10134e8:	100d8340 	call	100d834 <__sinit>
 10134ec:	d9400017 	ldw	r5,0(sp)
 10134f0:	003ff006 	br	10134b4 <__alt_data_end+0xff0134b4>

010134f4 <fflush>:
 10134f4:	20000526 	beq	r4,zero,101350c <fflush+0x18>
 10134f8:	008040b4 	movhi	r2,258
 10134fc:	10b34204 	addi	r2,r2,-13048
 1013500:	200b883a 	mov	r5,r4
 1013504:	11000017 	ldw	r4,0(r2)
 1013508:	10134981 	jmpi	1013498 <_fflush_r>
 101350c:	008040b4 	movhi	r2,258
 1013510:	10b34104 	addi	r2,r2,-13052
 1013514:	11000017 	ldw	r4,0(r2)
 1013518:	01404074 	movhi	r5,257
 101351c:	294d2604 	addi	r5,r5,13464
 1013520:	100de041 	jmpi	100de04 <_fwalk_reent>

01013524 <__fputwc>:
 1013524:	defff804 	addi	sp,sp,-32
 1013528:	dcc00415 	stw	r19,16(sp)
 101352c:	dc800315 	stw	r18,12(sp)
 1013530:	dc000115 	stw	r16,4(sp)
 1013534:	dfc00715 	stw	ra,28(sp)
 1013538:	dd400615 	stw	r21,24(sp)
 101353c:	dd000515 	stw	r20,20(sp)
 1013540:	dc400215 	stw	r17,8(sp)
 1013544:	2027883a 	mov	r19,r4
 1013548:	2825883a 	mov	r18,r5
 101354c:	3021883a 	mov	r16,r6
 1013550:	100df500 	call	100df50 <__locale_mb_cur_max>
 1013554:	00c00044 	movi	r3,1
 1013558:	10c03e26 	beq	r2,r3,1013654 <__fputwc+0x130>
 101355c:	81c01704 	addi	r7,r16,92
 1013560:	900d883a 	mov	r6,r18
 1013564:	d80b883a 	mov	r5,sp
 1013568:	9809883a 	mov	r4,r19
 101356c:	1013f340 	call	1013f34 <_wcrtomb_r>
 1013570:	1029883a 	mov	r20,r2
 1013574:	00bfffc4 	movi	r2,-1
 1013578:	a0802026 	beq	r20,r2,10135fc <__fputwc+0xd8>
 101357c:	d9400003 	ldbu	r5,0(sp)
 1013580:	a0001c26 	beq	r20,zero,10135f4 <__fputwc+0xd0>
 1013584:	0023883a 	mov	r17,zero
 1013588:	05400284 	movi	r21,10
 101358c:	00000906 	br	10135b4 <__fputwc+0x90>
 1013590:	80800017 	ldw	r2,0(r16)
 1013594:	11400005 	stb	r5,0(r2)
 1013598:	80c00017 	ldw	r3,0(r16)
 101359c:	18c00044 	addi	r3,r3,1
 10135a0:	80c00015 	stw	r3,0(r16)
 10135a4:	8c400044 	addi	r17,r17,1
 10135a8:	dc45883a 	add	r2,sp,r17
 10135ac:	8d00112e 	bgeu	r17,r20,10135f4 <__fputwc+0xd0>
 10135b0:	11400003 	ldbu	r5,0(r2)
 10135b4:	80c00217 	ldw	r3,8(r16)
 10135b8:	18ffffc4 	addi	r3,r3,-1
 10135bc:	80c00215 	stw	r3,8(r16)
 10135c0:	183ff30e 	bge	r3,zero,1013590 <__alt_data_end+0xff013590>
 10135c4:	80800617 	ldw	r2,24(r16)
 10135c8:	18801916 	blt	r3,r2,1013630 <__fputwc+0x10c>
 10135cc:	80800017 	ldw	r2,0(r16)
 10135d0:	11400005 	stb	r5,0(r2)
 10135d4:	80800017 	ldw	r2,0(r16)
 10135d8:	10c00003 	ldbu	r3,0(r2)
 10135dc:	10800044 	addi	r2,r2,1
 10135e0:	1d402326 	beq	r3,r21,1013670 <__fputwc+0x14c>
 10135e4:	80800015 	stw	r2,0(r16)
 10135e8:	8c400044 	addi	r17,r17,1
 10135ec:	dc45883a 	add	r2,sp,r17
 10135f0:	8d3fef36 	bltu	r17,r20,10135b0 <__alt_data_end+0xff0135b0>
 10135f4:	9005883a 	mov	r2,r18
 10135f8:	00000406 	br	101360c <__fputwc+0xe8>
 10135fc:	80c0030b 	ldhu	r3,12(r16)
 1013600:	a005883a 	mov	r2,r20
 1013604:	18c01014 	ori	r3,r3,64
 1013608:	80c0030d 	sth	r3,12(r16)
 101360c:	dfc00717 	ldw	ra,28(sp)
 1013610:	dd400617 	ldw	r21,24(sp)
 1013614:	dd000517 	ldw	r20,20(sp)
 1013618:	dcc00417 	ldw	r19,16(sp)
 101361c:	dc800317 	ldw	r18,12(sp)
 1013620:	dc400217 	ldw	r17,8(sp)
 1013624:	dc000117 	ldw	r16,4(sp)
 1013628:	dec00804 	addi	sp,sp,32
 101362c:	f800283a 	ret
 1013630:	800d883a 	mov	r6,r16
 1013634:	29403fcc 	andi	r5,r5,255
 1013638:	9809883a 	mov	r4,r19
 101363c:	1013ddc0 	call	1013ddc <__swbuf_r>
 1013640:	10bfffe0 	cmpeqi	r2,r2,-1
 1013644:	10803fcc 	andi	r2,r2,255
 1013648:	103fd626 	beq	r2,zero,10135a4 <__alt_data_end+0xff0135a4>
 101364c:	00bfffc4 	movi	r2,-1
 1013650:	003fee06 	br	101360c <__alt_data_end+0xff01360c>
 1013654:	90ffffc4 	addi	r3,r18,-1
 1013658:	01003f84 	movi	r4,254
 101365c:	20ffbf36 	bltu	r4,r3,101355c <__alt_data_end+0xff01355c>
 1013660:	900b883a 	mov	r5,r18
 1013664:	dc800005 	stb	r18,0(sp)
 1013668:	1029883a 	mov	r20,r2
 101366c:	003fc506 	br	1013584 <__alt_data_end+0xff013584>
 1013670:	800d883a 	mov	r6,r16
 1013674:	a80b883a 	mov	r5,r21
 1013678:	9809883a 	mov	r4,r19
 101367c:	1013ddc0 	call	1013ddc <__swbuf_r>
 1013680:	10bfffe0 	cmpeqi	r2,r2,-1
 1013684:	003fef06 	br	1013644 <__alt_data_end+0xff013644>

01013688 <_fputwc_r>:
 1013688:	3080030b 	ldhu	r2,12(r6)
 101368c:	10c8000c 	andi	r3,r2,8192
 1013690:	1800051e 	bne	r3,zero,10136a8 <_fputwc_r+0x20>
 1013694:	30c01917 	ldw	r3,100(r6)
 1013698:	10880014 	ori	r2,r2,8192
 101369c:	3080030d 	sth	r2,12(r6)
 10136a0:	18880014 	ori	r2,r3,8192
 10136a4:	30801915 	stw	r2,100(r6)
 10136a8:	10135241 	jmpi	1013524 <__fputwc>

010136ac <fputwc>:
 10136ac:	008040b4 	movhi	r2,258
 10136b0:	defffc04 	addi	sp,sp,-16
 10136b4:	10b34204 	addi	r2,r2,-13048
 10136b8:	dc000115 	stw	r16,4(sp)
 10136bc:	14000017 	ldw	r16,0(r2)
 10136c0:	dc400215 	stw	r17,8(sp)
 10136c4:	dfc00315 	stw	ra,12(sp)
 10136c8:	2023883a 	mov	r17,r4
 10136cc:	80000226 	beq	r16,zero,10136d8 <fputwc+0x2c>
 10136d0:	80800e17 	ldw	r2,56(r16)
 10136d4:	10001026 	beq	r2,zero,1013718 <fputwc+0x6c>
 10136d8:	2880030b 	ldhu	r2,12(r5)
 10136dc:	10c8000c 	andi	r3,r2,8192
 10136e0:	1800051e 	bne	r3,zero,10136f8 <fputwc+0x4c>
 10136e4:	28c01917 	ldw	r3,100(r5)
 10136e8:	10880014 	ori	r2,r2,8192
 10136ec:	2880030d 	sth	r2,12(r5)
 10136f0:	18880014 	ori	r2,r3,8192
 10136f4:	28801915 	stw	r2,100(r5)
 10136f8:	280d883a 	mov	r6,r5
 10136fc:	8009883a 	mov	r4,r16
 1013700:	880b883a 	mov	r5,r17
 1013704:	dfc00317 	ldw	ra,12(sp)
 1013708:	dc400217 	ldw	r17,8(sp)
 101370c:	dc000117 	ldw	r16,4(sp)
 1013710:	dec00404 	addi	sp,sp,16
 1013714:	10135241 	jmpi	1013524 <__fputwc>
 1013718:	8009883a 	mov	r4,r16
 101371c:	d9400015 	stw	r5,0(sp)
 1013720:	100d8340 	call	100d834 <__sinit>
 1013724:	d9400017 	ldw	r5,0(sp)
 1013728:	003feb06 	br	10136d8 <__alt_data_end+0xff0136d8>

0101372c <_malloc_trim_r>:
 101372c:	defffb04 	addi	sp,sp,-20
 1013730:	dcc00315 	stw	r19,12(sp)
 1013734:	04c040b4 	movhi	r19,258
 1013738:	dc800215 	stw	r18,8(sp)
 101373c:	dc400115 	stw	r17,4(sp)
 1013740:	dc000015 	stw	r16,0(sp)
 1013744:	dfc00415 	stw	ra,16(sp)
 1013748:	2821883a 	mov	r16,r5
 101374c:	9cedaf04 	addi	r19,r19,-18756
 1013750:	2025883a 	mov	r18,r4
 1013754:	1017d440 	call	1017d44 <__malloc_lock>
 1013758:	98800217 	ldw	r2,8(r19)
 101375c:	14400117 	ldw	r17,4(r2)
 1013760:	00bfff04 	movi	r2,-4
 1013764:	88a2703a 	and	r17,r17,r2
 1013768:	8c21c83a 	sub	r16,r17,r16
 101376c:	8403fbc4 	addi	r16,r16,4079
 1013770:	8020d33a 	srli	r16,r16,12
 1013774:	0083ffc4 	movi	r2,4095
 1013778:	843fffc4 	addi	r16,r16,-1
 101377c:	8020933a 	slli	r16,r16,12
 1013780:	1400060e 	bge	r2,r16,101379c <_malloc_trim_r+0x70>
 1013784:	000b883a 	mov	r5,zero
 1013788:	9009883a 	mov	r4,r18
 101378c:	100ffc40 	call	100ffc4 <_sbrk_r>
 1013790:	98c00217 	ldw	r3,8(r19)
 1013794:	1c47883a 	add	r3,r3,r17
 1013798:	10c00a26 	beq	r2,r3,10137c4 <_malloc_trim_r+0x98>
 101379c:	9009883a 	mov	r4,r18
 10137a0:	1017d680 	call	1017d68 <__malloc_unlock>
 10137a4:	0005883a 	mov	r2,zero
 10137a8:	dfc00417 	ldw	ra,16(sp)
 10137ac:	dcc00317 	ldw	r19,12(sp)
 10137b0:	dc800217 	ldw	r18,8(sp)
 10137b4:	dc400117 	ldw	r17,4(sp)
 10137b8:	dc000017 	ldw	r16,0(sp)
 10137bc:	dec00504 	addi	sp,sp,20
 10137c0:	f800283a 	ret
 10137c4:	040bc83a 	sub	r5,zero,r16
 10137c8:	9009883a 	mov	r4,r18
 10137cc:	100ffc40 	call	100ffc4 <_sbrk_r>
 10137d0:	00ffffc4 	movi	r3,-1
 10137d4:	10c00d26 	beq	r2,r3,101380c <_malloc_trim_r+0xe0>
 10137d8:	00c060b4 	movhi	r3,386
 10137dc:	18fb3a04 	addi	r3,r3,-4888
 10137e0:	18800017 	ldw	r2,0(r3)
 10137e4:	99000217 	ldw	r4,8(r19)
 10137e8:	8c23c83a 	sub	r17,r17,r16
 10137ec:	8c400054 	ori	r17,r17,1
 10137f0:	1421c83a 	sub	r16,r2,r16
 10137f4:	24400115 	stw	r17,4(r4)
 10137f8:	9009883a 	mov	r4,r18
 10137fc:	1c000015 	stw	r16,0(r3)
 1013800:	1017d680 	call	1017d68 <__malloc_unlock>
 1013804:	00800044 	movi	r2,1
 1013808:	003fe706 	br	10137a8 <__alt_data_end+0xff0137a8>
 101380c:	000b883a 	mov	r5,zero
 1013810:	9009883a 	mov	r4,r18
 1013814:	100ffc40 	call	100ffc4 <_sbrk_r>
 1013818:	99000217 	ldw	r4,8(r19)
 101381c:	014003c4 	movi	r5,15
 1013820:	1107c83a 	sub	r3,r2,r4
 1013824:	28ffdd0e 	bge	r5,r3,101379c <__alt_data_end+0xff01379c>
 1013828:	014040b4 	movhi	r5,258
 101382c:	29734404 	addi	r5,r5,-13040
 1013830:	29400017 	ldw	r5,0(r5)
 1013834:	18c00054 	ori	r3,r3,1
 1013838:	20c00115 	stw	r3,4(r4)
 101383c:	00c060b4 	movhi	r3,386
 1013840:	1145c83a 	sub	r2,r2,r5
 1013844:	18fb3a04 	addi	r3,r3,-4888
 1013848:	18800015 	stw	r2,0(r3)
 101384c:	003fd306 	br	101379c <__alt_data_end+0xff01379c>

01013850 <_free_r>:
 1013850:	28004126 	beq	r5,zero,1013958 <_free_r+0x108>
 1013854:	defffd04 	addi	sp,sp,-12
 1013858:	dc400115 	stw	r17,4(sp)
 101385c:	dc000015 	stw	r16,0(sp)
 1013860:	2023883a 	mov	r17,r4
 1013864:	2821883a 	mov	r16,r5
 1013868:	dfc00215 	stw	ra,8(sp)
 101386c:	1017d440 	call	1017d44 <__malloc_lock>
 1013870:	81ffff17 	ldw	r7,-4(r16)
 1013874:	00bfff84 	movi	r2,-2
 1013878:	010040b4 	movhi	r4,258
 101387c:	81bffe04 	addi	r6,r16,-8
 1013880:	3884703a 	and	r2,r7,r2
 1013884:	212daf04 	addi	r4,r4,-18756
 1013888:	308b883a 	add	r5,r6,r2
 101388c:	2a400117 	ldw	r9,4(r5)
 1013890:	22000217 	ldw	r8,8(r4)
 1013894:	00ffff04 	movi	r3,-4
 1013898:	48c6703a 	and	r3,r9,r3
 101389c:	2a005726 	beq	r5,r8,10139fc <_free_r+0x1ac>
 10138a0:	28c00115 	stw	r3,4(r5)
 10138a4:	39c0004c 	andi	r7,r7,1
 10138a8:	3800091e 	bne	r7,zero,10138d0 <_free_r+0x80>
 10138ac:	823ffe17 	ldw	r8,-8(r16)
 10138b0:	22400204 	addi	r9,r4,8
 10138b4:	320dc83a 	sub	r6,r6,r8
 10138b8:	31c00217 	ldw	r7,8(r6)
 10138bc:	1205883a 	add	r2,r2,r8
 10138c0:	3a406526 	beq	r7,r9,1013a58 <_free_r+0x208>
 10138c4:	32000317 	ldw	r8,12(r6)
 10138c8:	3a000315 	stw	r8,12(r7)
 10138cc:	41c00215 	stw	r7,8(r8)
 10138d0:	28cf883a 	add	r7,r5,r3
 10138d4:	39c00117 	ldw	r7,4(r7)
 10138d8:	39c0004c 	andi	r7,r7,1
 10138dc:	38003a26 	beq	r7,zero,10139c8 <_free_r+0x178>
 10138e0:	10c00054 	ori	r3,r2,1
 10138e4:	30c00115 	stw	r3,4(r6)
 10138e8:	3087883a 	add	r3,r6,r2
 10138ec:	18800015 	stw	r2,0(r3)
 10138f0:	00c07fc4 	movi	r3,511
 10138f4:	18801936 	bltu	r3,r2,101395c <_free_r+0x10c>
 10138f8:	1004d0fa 	srli	r2,r2,3
 10138fc:	01c00044 	movi	r7,1
 1013900:	21400117 	ldw	r5,4(r4)
 1013904:	10c00044 	addi	r3,r2,1
 1013908:	18c7883a 	add	r3,r3,r3
 101390c:	1005d0ba 	srai	r2,r2,2
 1013910:	18c7883a 	add	r3,r3,r3
 1013914:	18c7883a 	add	r3,r3,r3
 1013918:	1907883a 	add	r3,r3,r4
 101391c:	3884983a 	sll	r2,r7,r2
 1013920:	19c00017 	ldw	r7,0(r3)
 1013924:	1a3ffe04 	addi	r8,r3,-8
 1013928:	1144b03a 	or	r2,r2,r5
 101392c:	32000315 	stw	r8,12(r6)
 1013930:	31c00215 	stw	r7,8(r6)
 1013934:	20800115 	stw	r2,4(r4)
 1013938:	19800015 	stw	r6,0(r3)
 101393c:	39800315 	stw	r6,12(r7)
 1013940:	8809883a 	mov	r4,r17
 1013944:	dfc00217 	ldw	ra,8(sp)
 1013948:	dc400117 	ldw	r17,4(sp)
 101394c:	dc000017 	ldw	r16,0(sp)
 1013950:	dec00304 	addi	sp,sp,12
 1013954:	1017d681 	jmpi	1017d68 <__malloc_unlock>
 1013958:	f800283a 	ret
 101395c:	100ad27a 	srli	r5,r2,9
 1013960:	00c00104 	movi	r3,4
 1013964:	19404a36 	bltu	r3,r5,1013a90 <_free_r+0x240>
 1013968:	100ad1ba 	srli	r5,r2,6
 101396c:	28c00e44 	addi	r3,r5,57
 1013970:	18c7883a 	add	r3,r3,r3
 1013974:	29400e04 	addi	r5,r5,56
 1013978:	18c7883a 	add	r3,r3,r3
 101397c:	18c7883a 	add	r3,r3,r3
 1013980:	1909883a 	add	r4,r3,r4
 1013984:	20c00017 	ldw	r3,0(r4)
 1013988:	01c040b4 	movhi	r7,258
 101398c:	213ffe04 	addi	r4,r4,-8
 1013990:	39edaf04 	addi	r7,r7,-18756
 1013994:	20c04426 	beq	r4,r3,1013aa8 <_free_r+0x258>
 1013998:	01ffff04 	movi	r7,-4
 101399c:	19400117 	ldw	r5,4(r3)
 10139a0:	29ca703a 	and	r5,r5,r7
 10139a4:	1140022e 	bgeu	r2,r5,10139b0 <_free_r+0x160>
 10139a8:	18c00217 	ldw	r3,8(r3)
 10139ac:	20fffb1e 	bne	r4,r3,101399c <__alt_data_end+0xff01399c>
 10139b0:	19000317 	ldw	r4,12(r3)
 10139b4:	31000315 	stw	r4,12(r6)
 10139b8:	30c00215 	stw	r3,8(r6)
 10139bc:	21800215 	stw	r6,8(r4)
 10139c0:	19800315 	stw	r6,12(r3)
 10139c4:	003fde06 	br	1013940 <__alt_data_end+0xff013940>
 10139c8:	29c00217 	ldw	r7,8(r5)
 10139cc:	10c5883a 	add	r2,r2,r3
 10139d0:	00c040b4 	movhi	r3,258
 10139d4:	18edb104 	addi	r3,r3,-18748
 10139d8:	38c03b26 	beq	r7,r3,1013ac8 <_free_r+0x278>
 10139dc:	2a000317 	ldw	r8,12(r5)
 10139e0:	11400054 	ori	r5,r2,1
 10139e4:	3087883a 	add	r3,r6,r2
 10139e8:	3a000315 	stw	r8,12(r7)
 10139ec:	41c00215 	stw	r7,8(r8)
 10139f0:	31400115 	stw	r5,4(r6)
 10139f4:	18800015 	stw	r2,0(r3)
 10139f8:	003fbd06 	br	10138f0 <__alt_data_end+0xff0138f0>
 10139fc:	39c0004c 	andi	r7,r7,1
 1013a00:	10c5883a 	add	r2,r2,r3
 1013a04:	3800071e 	bne	r7,zero,1013a24 <_free_r+0x1d4>
 1013a08:	81fffe17 	ldw	r7,-8(r16)
 1013a0c:	31cdc83a 	sub	r6,r6,r7
 1013a10:	30c00317 	ldw	r3,12(r6)
 1013a14:	31400217 	ldw	r5,8(r6)
 1013a18:	11c5883a 	add	r2,r2,r7
 1013a1c:	28c00315 	stw	r3,12(r5)
 1013a20:	19400215 	stw	r5,8(r3)
 1013a24:	10c00054 	ori	r3,r2,1
 1013a28:	30c00115 	stw	r3,4(r6)
 1013a2c:	00c040b4 	movhi	r3,258
 1013a30:	18f34504 	addi	r3,r3,-13036
 1013a34:	18c00017 	ldw	r3,0(r3)
 1013a38:	21800215 	stw	r6,8(r4)
 1013a3c:	10ffc036 	bltu	r2,r3,1013940 <__alt_data_end+0xff013940>
 1013a40:	008040b4 	movhi	r2,258
 1013a44:	10ba5f04 	addi	r2,r2,-5764
 1013a48:	11400017 	ldw	r5,0(r2)
 1013a4c:	8809883a 	mov	r4,r17
 1013a50:	101372c0 	call	101372c <_malloc_trim_r>
 1013a54:	003fba06 	br	1013940 <__alt_data_end+0xff013940>
 1013a58:	28c9883a 	add	r4,r5,r3
 1013a5c:	21000117 	ldw	r4,4(r4)
 1013a60:	2100004c 	andi	r4,r4,1
 1013a64:	2000391e 	bne	r4,zero,1013b4c <_free_r+0x2fc>
 1013a68:	29c00217 	ldw	r7,8(r5)
 1013a6c:	29000317 	ldw	r4,12(r5)
 1013a70:	1885883a 	add	r2,r3,r2
 1013a74:	10c00054 	ori	r3,r2,1
 1013a78:	39000315 	stw	r4,12(r7)
 1013a7c:	21c00215 	stw	r7,8(r4)
 1013a80:	30c00115 	stw	r3,4(r6)
 1013a84:	308d883a 	add	r6,r6,r2
 1013a88:	30800015 	stw	r2,0(r6)
 1013a8c:	003fac06 	br	1013940 <__alt_data_end+0xff013940>
 1013a90:	00c00504 	movi	r3,20
 1013a94:	19401536 	bltu	r3,r5,1013aec <_free_r+0x29c>
 1013a98:	28c01704 	addi	r3,r5,92
 1013a9c:	18c7883a 	add	r3,r3,r3
 1013aa0:	294016c4 	addi	r5,r5,91
 1013aa4:	003fb406 	br	1013978 <__alt_data_end+0xff013978>
 1013aa8:	280bd0ba 	srai	r5,r5,2
 1013aac:	00c00044 	movi	r3,1
 1013ab0:	38800117 	ldw	r2,4(r7)
 1013ab4:	194a983a 	sll	r5,r3,r5
 1013ab8:	2007883a 	mov	r3,r4
 1013abc:	2884b03a 	or	r2,r5,r2
 1013ac0:	38800115 	stw	r2,4(r7)
 1013ac4:	003fbb06 	br	10139b4 <__alt_data_end+0xff0139b4>
 1013ac8:	21800515 	stw	r6,20(r4)
 1013acc:	21800415 	stw	r6,16(r4)
 1013ad0:	10c00054 	ori	r3,r2,1
 1013ad4:	31c00315 	stw	r7,12(r6)
 1013ad8:	31c00215 	stw	r7,8(r6)
 1013adc:	30c00115 	stw	r3,4(r6)
 1013ae0:	308d883a 	add	r6,r6,r2
 1013ae4:	30800015 	stw	r2,0(r6)
 1013ae8:	003f9506 	br	1013940 <__alt_data_end+0xff013940>
 1013aec:	00c01504 	movi	r3,84
 1013af0:	19400536 	bltu	r3,r5,1013b08 <_free_r+0x2b8>
 1013af4:	100ad33a 	srli	r5,r2,12
 1013af8:	28c01bc4 	addi	r3,r5,111
 1013afc:	18c7883a 	add	r3,r3,r3
 1013b00:	29401b84 	addi	r5,r5,110
 1013b04:	003f9c06 	br	1013978 <__alt_data_end+0xff013978>
 1013b08:	00c05504 	movi	r3,340
 1013b0c:	19400536 	bltu	r3,r5,1013b24 <_free_r+0x2d4>
 1013b10:	100ad3fa 	srli	r5,r2,15
 1013b14:	28c01e04 	addi	r3,r5,120
 1013b18:	18c7883a 	add	r3,r3,r3
 1013b1c:	29401dc4 	addi	r5,r5,119
 1013b20:	003f9506 	br	1013978 <__alt_data_end+0xff013978>
 1013b24:	00c15504 	movi	r3,1364
 1013b28:	19400536 	bltu	r3,r5,1013b40 <_free_r+0x2f0>
 1013b2c:	100ad4ba 	srli	r5,r2,18
 1013b30:	28c01f44 	addi	r3,r5,125
 1013b34:	18c7883a 	add	r3,r3,r3
 1013b38:	29401f04 	addi	r5,r5,124
 1013b3c:	003f8e06 	br	1013978 <__alt_data_end+0xff013978>
 1013b40:	00c03f84 	movi	r3,254
 1013b44:	01401f84 	movi	r5,126
 1013b48:	003f8b06 	br	1013978 <__alt_data_end+0xff013978>
 1013b4c:	10c00054 	ori	r3,r2,1
 1013b50:	30c00115 	stw	r3,4(r6)
 1013b54:	308d883a 	add	r6,r6,r2
 1013b58:	30800015 	stw	r2,0(r6)
 1013b5c:	003f7806 	br	1013940 <__alt_data_end+0xff013940>

01013b60 <_lseek_r>:
 1013b60:	defffd04 	addi	sp,sp,-12
 1013b64:	2805883a 	mov	r2,r5
 1013b68:	dc000015 	stw	r16,0(sp)
 1013b6c:	040040b4 	movhi	r16,258
 1013b70:	dc400115 	stw	r17,4(sp)
 1013b74:	300b883a 	mov	r5,r6
 1013b78:	843a6004 	addi	r16,r16,-5760
 1013b7c:	2023883a 	mov	r17,r4
 1013b80:	380d883a 	mov	r6,r7
 1013b84:	1009883a 	mov	r4,r2
 1013b88:	dfc00215 	stw	ra,8(sp)
 1013b8c:	80000015 	stw	zero,0(r16)
 1013b90:	1017bf40 	call	1017bf4 <lseek>
 1013b94:	00ffffc4 	movi	r3,-1
 1013b98:	10c00526 	beq	r2,r3,1013bb0 <_lseek_r+0x50>
 1013b9c:	dfc00217 	ldw	ra,8(sp)
 1013ba0:	dc400117 	ldw	r17,4(sp)
 1013ba4:	dc000017 	ldw	r16,0(sp)
 1013ba8:	dec00304 	addi	sp,sp,12
 1013bac:	f800283a 	ret
 1013bb0:	80c00017 	ldw	r3,0(r16)
 1013bb4:	183ff926 	beq	r3,zero,1013b9c <__alt_data_end+0xff013b9c>
 1013bb8:	88c00015 	stw	r3,0(r17)
 1013bbc:	003ff706 	br	1013b9c <__alt_data_end+0xff013b9c>

01013bc0 <__smakebuf_r>:
 1013bc0:	2880030b 	ldhu	r2,12(r5)
 1013bc4:	10c0008c 	andi	r3,r2,2
 1013bc8:	1800411e 	bne	r3,zero,1013cd0 <__smakebuf_r+0x110>
 1013bcc:	deffec04 	addi	sp,sp,-80
 1013bd0:	dc000f15 	stw	r16,60(sp)
 1013bd4:	2821883a 	mov	r16,r5
 1013bd8:	2940038f 	ldh	r5,14(r5)
 1013bdc:	dc401015 	stw	r17,64(sp)
 1013be0:	dfc01315 	stw	ra,76(sp)
 1013be4:	dcc01215 	stw	r19,72(sp)
 1013be8:	dc801115 	stw	r18,68(sp)
 1013bec:	2023883a 	mov	r17,r4
 1013bf0:	28001c16 	blt	r5,zero,1013c64 <__smakebuf_r+0xa4>
 1013bf4:	d80d883a 	mov	r6,sp
 1013bf8:	101411c0 	call	101411c <_fstat_r>
 1013bfc:	10001816 	blt	r2,zero,1013c60 <__smakebuf_r+0xa0>
 1013c00:	d8800117 	ldw	r2,4(sp)
 1013c04:	00e00014 	movui	r3,32768
 1013c08:	10bc000c 	andi	r2,r2,61440
 1013c0c:	14c80020 	cmpeqi	r19,r2,8192
 1013c10:	10c03726 	beq	r2,r3,1013cf0 <__smakebuf_r+0x130>
 1013c14:	80c0030b 	ldhu	r3,12(r16)
 1013c18:	18c20014 	ori	r3,r3,2048
 1013c1c:	80c0030d 	sth	r3,12(r16)
 1013c20:	00c80004 	movi	r3,8192
 1013c24:	10c0521e 	bne	r2,r3,1013d70 <__smakebuf_r+0x1b0>
 1013c28:	8140038f 	ldh	r5,14(r16)
 1013c2c:	8809883a 	mov	r4,r17
 1013c30:	10141780 	call	1014178 <_isatty_r>
 1013c34:	10004c26 	beq	r2,zero,1013d68 <__smakebuf_r+0x1a8>
 1013c38:	8080030b 	ldhu	r2,12(r16)
 1013c3c:	80c010c4 	addi	r3,r16,67
 1013c40:	80c00015 	stw	r3,0(r16)
 1013c44:	10800054 	ori	r2,r2,1
 1013c48:	8080030d 	sth	r2,12(r16)
 1013c4c:	00800044 	movi	r2,1
 1013c50:	80c00415 	stw	r3,16(r16)
 1013c54:	80800515 	stw	r2,20(r16)
 1013c58:	04810004 	movi	r18,1024
 1013c5c:	00000706 	br	1013c7c <__smakebuf_r+0xbc>
 1013c60:	8080030b 	ldhu	r2,12(r16)
 1013c64:	10c0200c 	andi	r3,r2,128
 1013c68:	18001f1e 	bne	r3,zero,1013ce8 <__smakebuf_r+0x128>
 1013c6c:	04810004 	movi	r18,1024
 1013c70:	10820014 	ori	r2,r2,2048
 1013c74:	8080030d 	sth	r2,12(r16)
 1013c78:	0027883a 	mov	r19,zero
 1013c7c:	900b883a 	mov	r5,r18
 1013c80:	8809883a 	mov	r4,r17
 1013c84:	100dfa40 	call	100dfa4 <_malloc_r>
 1013c88:	10002c26 	beq	r2,zero,1013d3c <__smakebuf_r+0x17c>
 1013c8c:	80c0030b 	ldhu	r3,12(r16)
 1013c90:	01004074 	movhi	r4,257
 1013c94:	21353b04 	addi	r4,r4,-11028
 1013c98:	89000f15 	stw	r4,60(r17)
 1013c9c:	18c02014 	ori	r3,r3,128
 1013ca0:	80c0030d 	sth	r3,12(r16)
 1013ca4:	80800015 	stw	r2,0(r16)
 1013ca8:	80800415 	stw	r2,16(r16)
 1013cac:	84800515 	stw	r18,20(r16)
 1013cb0:	98001a1e 	bne	r19,zero,1013d1c <__smakebuf_r+0x15c>
 1013cb4:	dfc01317 	ldw	ra,76(sp)
 1013cb8:	dcc01217 	ldw	r19,72(sp)
 1013cbc:	dc801117 	ldw	r18,68(sp)
 1013cc0:	dc401017 	ldw	r17,64(sp)
 1013cc4:	dc000f17 	ldw	r16,60(sp)
 1013cc8:	dec01404 	addi	sp,sp,80
 1013ccc:	f800283a 	ret
 1013cd0:	288010c4 	addi	r2,r5,67
 1013cd4:	28800015 	stw	r2,0(r5)
 1013cd8:	28800415 	stw	r2,16(r5)
 1013cdc:	00800044 	movi	r2,1
 1013ce0:	28800515 	stw	r2,20(r5)
 1013ce4:	f800283a 	ret
 1013ce8:	04801004 	movi	r18,64
 1013cec:	003fe006 	br	1013c70 <__alt_data_end+0xff013c70>
 1013cf0:	81000a17 	ldw	r4,40(r16)
 1013cf4:	00c04074 	movhi	r3,257
 1013cf8:	18c0fd04 	addi	r3,r3,1012
 1013cfc:	20ffc51e 	bne	r4,r3,1013c14 <__alt_data_end+0xff013c14>
 1013d00:	8080030b 	ldhu	r2,12(r16)
 1013d04:	04810004 	movi	r18,1024
 1013d08:	84801315 	stw	r18,76(r16)
 1013d0c:	1484b03a 	or	r2,r2,r18
 1013d10:	8080030d 	sth	r2,12(r16)
 1013d14:	0027883a 	mov	r19,zero
 1013d18:	003fd806 	br	1013c7c <__alt_data_end+0xff013c7c>
 1013d1c:	8140038f 	ldh	r5,14(r16)
 1013d20:	8809883a 	mov	r4,r17
 1013d24:	10141780 	call	1014178 <_isatty_r>
 1013d28:	103fe226 	beq	r2,zero,1013cb4 <__alt_data_end+0xff013cb4>
 1013d2c:	8080030b 	ldhu	r2,12(r16)
 1013d30:	10800054 	ori	r2,r2,1
 1013d34:	8080030d 	sth	r2,12(r16)
 1013d38:	003fde06 	br	1013cb4 <__alt_data_end+0xff013cb4>
 1013d3c:	8080030b 	ldhu	r2,12(r16)
 1013d40:	10c0800c 	andi	r3,r2,512
 1013d44:	183fdb1e 	bne	r3,zero,1013cb4 <__alt_data_end+0xff013cb4>
 1013d48:	10800094 	ori	r2,r2,2
 1013d4c:	80c010c4 	addi	r3,r16,67
 1013d50:	8080030d 	sth	r2,12(r16)
 1013d54:	00800044 	movi	r2,1
 1013d58:	80c00015 	stw	r3,0(r16)
 1013d5c:	80c00415 	stw	r3,16(r16)
 1013d60:	80800515 	stw	r2,20(r16)
 1013d64:	003fd306 	br	1013cb4 <__alt_data_end+0xff013cb4>
 1013d68:	04810004 	movi	r18,1024
 1013d6c:	003fc306 	br	1013c7c <__alt_data_end+0xff013c7c>
 1013d70:	0027883a 	mov	r19,zero
 1013d74:	04810004 	movi	r18,1024
 1013d78:	003fc006 	br	1013c7c <__alt_data_end+0xff013c7c>

01013d7c <_read_r>:
 1013d7c:	defffd04 	addi	sp,sp,-12
 1013d80:	2805883a 	mov	r2,r5
 1013d84:	dc000015 	stw	r16,0(sp)
 1013d88:	040040b4 	movhi	r16,258
 1013d8c:	dc400115 	stw	r17,4(sp)
 1013d90:	300b883a 	mov	r5,r6
 1013d94:	843a6004 	addi	r16,r16,-5760
 1013d98:	2023883a 	mov	r17,r4
 1013d9c:	380d883a 	mov	r6,r7
 1013da0:	1009883a 	mov	r4,r2
 1013da4:	dfc00215 	stw	ra,8(sp)
 1013da8:	80000015 	stw	zero,0(r16)
 1013dac:	1017dc80 	call	1017dc8 <read>
 1013db0:	00ffffc4 	movi	r3,-1
 1013db4:	10c00526 	beq	r2,r3,1013dcc <_read_r+0x50>
 1013db8:	dfc00217 	ldw	ra,8(sp)
 1013dbc:	dc400117 	ldw	r17,4(sp)
 1013dc0:	dc000017 	ldw	r16,0(sp)
 1013dc4:	dec00304 	addi	sp,sp,12
 1013dc8:	f800283a 	ret
 1013dcc:	80c00017 	ldw	r3,0(r16)
 1013dd0:	183ff926 	beq	r3,zero,1013db8 <__alt_data_end+0xff013db8>
 1013dd4:	88c00015 	stw	r3,0(r17)
 1013dd8:	003ff706 	br	1013db8 <__alt_data_end+0xff013db8>

01013ddc <__swbuf_r>:
 1013ddc:	defffb04 	addi	sp,sp,-20
 1013de0:	dcc00315 	stw	r19,12(sp)
 1013de4:	dc800215 	stw	r18,8(sp)
 1013de8:	dc000015 	stw	r16,0(sp)
 1013dec:	dfc00415 	stw	ra,16(sp)
 1013df0:	dc400115 	stw	r17,4(sp)
 1013df4:	2025883a 	mov	r18,r4
 1013df8:	2827883a 	mov	r19,r5
 1013dfc:	3021883a 	mov	r16,r6
 1013e00:	20000226 	beq	r4,zero,1013e0c <__swbuf_r+0x30>
 1013e04:	20800e17 	ldw	r2,56(r4)
 1013e08:	10004226 	beq	r2,zero,1013f14 <__swbuf_r+0x138>
 1013e0c:	80800617 	ldw	r2,24(r16)
 1013e10:	8100030b 	ldhu	r4,12(r16)
 1013e14:	80800215 	stw	r2,8(r16)
 1013e18:	2080020c 	andi	r2,r4,8
 1013e1c:	10003626 	beq	r2,zero,1013ef8 <__swbuf_r+0x11c>
 1013e20:	80c00417 	ldw	r3,16(r16)
 1013e24:	18003426 	beq	r3,zero,1013ef8 <__swbuf_r+0x11c>
 1013e28:	2088000c 	andi	r2,r4,8192
 1013e2c:	9c403fcc 	andi	r17,r19,255
 1013e30:	10001a26 	beq	r2,zero,1013e9c <__swbuf_r+0xc0>
 1013e34:	80800017 	ldw	r2,0(r16)
 1013e38:	81000517 	ldw	r4,20(r16)
 1013e3c:	10c7c83a 	sub	r3,r2,r3
 1013e40:	1900200e 	bge	r3,r4,1013ec4 <__swbuf_r+0xe8>
 1013e44:	18c00044 	addi	r3,r3,1
 1013e48:	81000217 	ldw	r4,8(r16)
 1013e4c:	11400044 	addi	r5,r2,1
 1013e50:	81400015 	stw	r5,0(r16)
 1013e54:	213fffc4 	addi	r4,r4,-1
 1013e58:	81000215 	stw	r4,8(r16)
 1013e5c:	14c00005 	stb	r19,0(r2)
 1013e60:	80800517 	ldw	r2,20(r16)
 1013e64:	10c01e26 	beq	r2,r3,1013ee0 <__swbuf_r+0x104>
 1013e68:	8080030b 	ldhu	r2,12(r16)
 1013e6c:	1080004c 	andi	r2,r2,1
 1013e70:	10000226 	beq	r2,zero,1013e7c <__swbuf_r+0xa0>
 1013e74:	00800284 	movi	r2,10
 1013e78:	88801926 	beq	r17,r2,1013ee0 <__swbuf_r+0x104>
 1013e7c:	8805883a 	mov	r2,r17
 1013e80:	dfc00417 	ldw	ra,16(sp)
 1013e84:	dcc00317 	ldw	r19,12(sp)
 1013e88:	dc800217 	ldw	r18,8(sp)
 1013e8c:	dc400117 	ldw	r17,4(sp)
 1013e90:	dc000017 	ldw	r16,0(sp)
 1013e94:	dec00504 	addi	sp,sp,20
 1013e98:	f800283a 	ret
 1013e9c:	81401917 	ldw	r5,100(r16)
 1013ea0:	00b7ffc4 	movi	r2,-8193
 1013ea4:	21080014 	ori	r4,r4,8192
 1013ea8:	2884703a 	and	r2,r5,r2
 1013eac:	80801915 	stw	r2,100(r16)
 1013eb0:	80800017 	ldw	r2,0(r16)
 1013eb4:	8100030d 	sth	r4,12(r16)
 1013eb8:	81000517 	ldw	r4,20(r16)
 1013ebc:	10c7c83a 	sub	r3,r2,r3
 1013ec0:	193fe016 	blt	r3,r4,1013e44 <__alt_data_end+0xff013e44>
 1013ec4:	800b883a 	mov	r5,r16
 1013ec8:	9009883a 	mov	r4,r18
 1013ecc:	10134980 	call	1013498 <_fflush_r>
 1013ed0:	1000071e 	bne	r2,zero,1013ef0 <__swbuf_r+0x114>
 1013ed4:	80800017 	ldw	r2,0(r16)
 1013ed8:	00c00044 	movi	r3,1
 1013edc:	003fda06 	br	1013e48 <__alt_data_end+0xff013e48>
 1013ee0:	800b883a 	mov	r5,r16
 1013ee4:	9009883a 	mov	r4,r18
 1013ee8:	10134980 	call	1013498 <_fflush_r>
 1013eec:	103fe326 	beq	r2,zero,1013e7c <__alt_data_end+0xff013e7c>
 1013ef0:	00bfffc4 	movi	r2,-1
 1013ef4:	003fe206 	br	1013e80 <__alt_data_end+0xff013e80>
 1013ef8:	800b883a 	mov	r5,r16
 1013efc:	9009883a 	mov	r4,r18
 1013f00:	1012f0c0 	call	1012f0c <__swsetup_r>
 1013f04:	103ffa1e 	bne	r2,zero,1013ef0 <__alt_data_end+0xff013ef0>
 1013f08:	8100030b 	ldhu	r4,12(r16)
 1013f0c:	80c00417 	ldw	r3,16(r16)
 1013f10:	003fc506 	br	1013e28 <__alt_data_end+0xff013e28>
 1013f14:	100d8340 	call	100d834 <__sinit>
 1013f18:	003fbc06 	br	1013e0c <__alt_data_end+0xff013e0c>

01013f1c <__swbuf>:
 1013f1c:	008040b4 	movhi	r2,258
 1013f20:	10b34204 	addi	r2,r2,-13048
 1013f24:	280d883a 	mov	r6,r5
 1013f28:	200b883a 	mov	r5,r4
 1013f2c:	11000017 	ldw	r4,0(r2)
 1013f30:	1013ddc1 	jmpi	1013ddc <__swbuf_r>

01013f34 <_wcrtomb_r>:
 1013f34:	defff604 	addi	sp,sp,-40
 1013f38:	008040b4 	movhi	r2,258
 1013f3c:	dc800815 	stw	r18,32(sp)
 1013f40:	dc400715 	stw	r17,28(sp)
 1013f44:	dc000615 	stw	r16,24(sp)
 1013f48:	10b34604 	addi	r2,r2,-13032
 1013f4c:	dfc00915 	stw	ra,36(sp)
 1013f50:	2021883a 	mov	r16,r4
 1013f54:	3823883a 	mov	r17,r7
 1013f58:	14800017 	ldw	r18,0(r2)
 1013f5c:	28001426 	beq	r5,zero,1013fb0 <_wcrtomb_r+0x7c>
 1013f60:	d9400415 	stw	r5,16(sp)
 1013f64:	d9800515 	stw	r6,20(sp)
 1013f68:	100df440 	call	100df44 <__locale_charset>
 1013f6c:	d9800517 	ldw	r6,20(sp)
 1013f70:	d9400417 	ldw	r5,16(sp)
 1013f74:	100f883a 	mov	r7,r2
 1013f78:	dc400015 	stw	r17,0(sp)
 1013f7c:	8009883a 	mov	r4,r16
 1013f80:	903ee83a 	callr	r18
 1013f84:	00ffffc4 	movi	r3,-1
 1013f88:	10c0031e 	bne	r2,r3,1013f98 <_wcrtomb_r+0x64>
 1013f8c:	88000015 	stw	zero,0(r17)
 1013f90:	00c02284 	movi	r3,138
 1013f94:	80c00015 	stw	r3,0(r16)
 1013f98:	dfc00917 	ldw	ra,36(sp)
 1013f9c:	dc800817 	ldw	r18,32(sp)
 1013fa0:	dc400717 	ldw	r17,28(sp)
 1013fa4:	dc000617 	ldw	r16,24(sp)
 1013fa8:	dec00a04 	addi	sp,sp,40
 1013fac:	f800283a 	ret
 1013fb0:	100df440 	call	100df44 <__locale_charset>
 1013fb4:	100f883a 	mov	r7,r2
 1013fb8:	dc400015 	stw	r17,0(sp)
 1013fbc:	000d883a 	mov	r6,zero
 1013fc0:	d9400104 	addi	r5,sp,4
 1013fc4:	8009883a 	mov	r4,r16
 1013fc8:	903ee83a 	callr	r18
 1013fcc:	003fed06 	br	1013f84 <__alt_data_end+0xff013f84>

01013fd0 <wcrtomb>:
 1013fd0:	defff604 	addi	sp,sp,-40
 1013fd4:	008040b4 	movhi	r2,258
 1013fd8:	dc800615 	stw	r18,24(sp)
 1013fdc:	dc400515 	stw	r17,20(sp)
 1013fe0:	10b34204 	addi	r2,r2,-13048
 1013fe4:	dfc00915 	stw	ra,36(sp)
 1013fe8:	dd000815 	stw	r20,32(sp)
 1013fec:	dcc00715 	stw	r19,28(sp)
 1013ff0:	dc000415 	stw	r16,16(sp)
 1013ff4:	3025883a 	mov	r18,r6
 1013ff8:	14400017 	ldw	r17,0(r2)
 1013ffc:	20001926 	beq	r4,zero,1014064 <wcrtomb+0x94>
 1014000:	008040b4 	movhi	r2,258
 1014004:	10b34604 	addi	r2,r2,-13032
 1014008:	15000017 	ldw	r20,0(r2)
 101400c:	2021883a 	mov	r16,r4
 1014010:	2827883a 	mov	r19,r5
 1014014:	100df440 	call	100df44 <__locale_charset>
 1014018:	100f883a 	mov	r7,r2
 101401c:	dc800015 	stw	r18,0(sp)
 1014020:	980d883a 	mov	r6,r19
 1014024:	800b883a 	mov	r5,r16
 1014028:	8809883a 	mov	r4,r17
 101402c:	a03ee83a 	callr	r20
 1014030:	00ffffc4 	movi	r3,-1
 1014034:	10c0031e 	bne	r2,r3,1014044 <wcrtomb+0x74>
 1014038:	90000015 	stw	zero,0(r18)
 101403c:	00c02284 	movi	r3,138
 1014040:	88c00015 	stw	r3,0(r17)
 1014044:	dfc00917 	ldw	ra,36(sp)
 1014048:	dd000817 	ldw	r20,32(sp)
 101404c:	dcc00717 	ldw	r19,28(sp)
 1014050:	dc800617 	ldw	r18,24(sp)
 1014054:	dc400517 	ldw	r17,20(sp)
 1014058:	dc000417 	ldw	r16,16(sp)
 101405c:	dec00a04 	addi	sp,sp,40
 1014060:	f800283a 	ret
 1014064:	008040b4 	movhi	r2,258
 1014068:	10b34604 	addi	r2,r2,-13032
 101406c:	14000017 	ldw	r16,0(r2)
 1014070:	100df440 	call	100df44 <__locale_charset>
 1014074:	100f883a 	mov	r7,r2
 1014078:	dc800015 	stw	r18,0(sp)
 101407c:	000d883a 	mov	r6,zero
 1014080:	d9400104 	addi	r5,sp,4
 1014084:	8809883a 	mov	r4,r17
 1014088:	803ee83a 	callr	r16
 101408c:	003fe806 	br	1014030 <__alt_data_end+0xff014030>

01014090 <__ascii_wctomb>:
 1014090:	28000526 	beq	r5,zero,10140a8 <__ascii_wctomb+0x18>
 1014094:	00803fc4 	movi	r2,255
 1014098:	11800536 	bltu	r2,r6,10140b0 <__ascii_wctomb+0x20>
 101409c:	29800005 	stb	r6,0(r5)
 10140a0:	00800044 	movi	r2,1
 10140a4:	f800283a 	ret
 10140a8:	0005883a 	mov	r2,zero
 10140ac:	f800283a 	ret
 10140b0:	00802284 	movi	r2,138
 10140b4:	20800015 	stw	r2,0(r4)
 10140b8:	00bfffc4 	movi	r2,-1
 10140bc:	f800283a 	ret

010140c0 <_wctomb_r>:
 10140c0:	008040b4 	movhi	r2,258
 10140c4:	defff904 	addi	sp,sp,-28
 10140c8:	10b34604 	addi	r2,r2,-13032
 10140cc:	dfc00615 	stw	ra,24(sp)
 10140d0:	dc400515 	stw	r17,20(sp)
 10140d4:	dc000415 	stw	r16,16(sp)
 10140d8:	3823883a 	mov	r17,r7
 10140dc:	14000017 	ldw	r16,0(r2)
 10140e0:	d9000115 	stw	r4,4(sp)
 10140e4:	d9400215 	stw	r5,8(sp)
 10140e8:	d9800315 	stw	r6,12(sp)
 10140ec:	100df440 	call	100df44 <__locale_charset>
 10140f0:	d9800317 	ldw	r6,12(sp)
 10140f4:	d9400217 	ldw	r5,8(sp)
 10140f8:	d9000117 	ldw	r4,4(sp)
 10140fc:	100f883a 	mov	r7,r2
 1014100:	dc400015 	stw	r17,0(sp)
 1014104:	803ee83a 	callr	r16
 1014108:	dfc00617 	ldw	ra,24(sp)
 101410c:	dc400517 	ldw	r17,20(sp)
 1014110:	dc000417 	ldw	r16,16(sp)
 1014114:	dec00704 	addi	sp,sp,28
 1014118:	f800283a 	ret

0101411c <_fstat_r>:
 101411c:	defffd04 	addi	sp,sp,-12
 1014120:	2805883a 	mov	r2,r5
 1014124:	dc000015 	stw	r16,0(sp)
 1014128:	040040b4 	movhi	r16,258
 101412c:	dc400115 	stw	r17,4(sp)
 1014130:	843a6004 	addi	r16,r16,-5760
 1014134:	2023883a 	mov	r17,r4
 1014138:	300b883a 	mov	r5,r6
 101413c:	1009883a 	mov	r4,r2
 1014140:	dfc00215 	stw	ra,8(sp)
 1014144:	80000015 	stw	zero,0(r16)
 1014148:	10176400 	call	1017640 <fstat>
 101414c:	00ffffc4 	movi	r3,-1
 1014150:	10c00526 	beq	r2,r3,1014168 <_fstat_r+0x4c>
 1014154:	dfc00217 	ldw	ra,8(sp)
 1014158:	dc400117 	ldw	r17,4(sp)
 101415c:	dc000017 	ldw	r16,0(sp)
 1014160:	dec00304 	addi	sp,sp,12
 1014164:	f800283a 	ret
 1014168:	80c00017 	ldw	r3,0(r16)
 101416c:	183ff926 	beq	r3,zero,1014154 <__alt_data_end+0xff014154>
 1014170:	88c00015 	stw	r3,0(r17)
 1014174:	003ff706 	br	1014154 <__alt_data_end+0xff014154>

01014178 <_isatty_r>:
 1014178:	defffd04 	addi	sp,sp,-12
 101417c:	dc000015 	stw	r16,0(sp)
 1014180:	040040b4 	movhi	r16,258
 1014184:	dc400115 	stw	r17,4(sp)
 1014188:	843a6004 	addi	r16,r16,-5760
 101418c:	2023883a 	mov	r17,r4
 1014190:	2809883a 	mov	r4,r5
 1014194:	dfc00215 	stw	ra,8(sp)
 1014198:	80000015 	stw	zero,0(r16)
 101419c:	10178bc0 	call	10178bc <isatty>
 10141a0:	00ffffc4 	movi	r3,-1
 10141a4:	10c00526 	beq	r2,r3,10141bc <_isatty_r+0x44>
 10141a8:	dfc00217 	ldw	ra,8(sp)
 10141ac:	dc400117 	ldw	r17,4(sp)
 10141b0:	dc000017 	ldw	r16,0(sp)
 10141b4:	dec00304 	addi	sp,sp,12
 10141b8:	f800283a 	ret
 10141bc:	80c00017 	ldw	r3,0(r16)
 10141c0:	183ff926 	beq	r3,zero,10141a8 <__alt_data_end+0xff0141a8>
 10141c4:	88c00015 	stw	r3,0(r17)
 10141c8:	003ff706 	br	10141a8 <__alt_data_end+0xff0141a8>

010141cc <__udivdi3>:
 10141cc:	defff504 	addi	sp,sp,-44
 10141d0:	dcc00415 	stw	r19,16(sp)
 10141d4:	dc000115 	stw	r16,4(sp)
 10141d8:	dfc00a15 	stw	ra,40(sp)
 10141dc:	df000915 	stw	fp,36(sp)
 10141e0:	ddc00815 	stw	r23,32(sp)
 10141e4:	dd800715 	stw	r22,28(sp)
 10141e8:	dd400615 	stw	r21,24(sp)
 10141ec:	dd000515 	stw	r20,20(sp)
 10141f0:	dc800315 	stw	r18,12(sp)
 10141f4:	dc400215 	stw	r17,8(sp)
 10141f8:	2027883a 	mov	r19,r4
 10141fc:	2821883a 	mov	r16,r5
 1014200:	3800411e 	bne	r7,zero,1014308 <__udivdi3+0x13c>
 1014204:	3023883a 	mov	r17,r6
 1014208:	2025883a 	mov	r18,r4
 101420c:	2980522e 	bgeu	r5,r6,1014358 <__udivdi3+0x18c>
 1014210:	00bfffd4 	movui	r2,65535
 1014214:	282d883a 	mov	r22,r5
 1014218:	1180a836 	bltu	r2,r6,10144bc <__udivdi3+0x2f0>
 101421c:	00803fc4 	movi	r2,255
 1014220:	1185803a 	cmpltu	r2,r2,r6
 1014224:	100490fa 	slli	r2,r2,3
 1014228:	3086d83a 	srl	r3,r6,r2
 101422c:	010040b4 	movhi	r4,258
 1014230:	212c1004 	addi	r4,r4,-20416
 1014234:	20c7883a 	add	r3,r4,r3
 1014238:	18c00003 	ldbu	r3,0(r3)
 101423c:	1885883a 	add	r2,r3,r2
 1014240:	00c00804 	movi	r3,32
 1014244:	1887c83a 	sub	r3,r3,r2
 1014248:	18000526 	beq	r3,zero,1014260 <__udivdi3+0x94>
 101424c:	80e0983a 	sll	r16,r16,r3
 1014250:	9884d83a 	srl	r2,r19,r2
 1014254:	30e2983a 	sll	r17,r6,r3
 1014258:	98e4983a 	sll	r18,r19,r3
 101425c:	142cb03a 	or	r22,r2,r16
 1014260:	882ad43a 	srli	r21,r17,16
 1014264:	b009883a 	mov	r4,r22
 1014268:	8d3fffcc 	andi	r20,r17,65535
 101426c:	a80b883a 	mov	r5,r21
 1014270:	1014dd80 	call	1014dd8 <__umodsi3>
 1014274:	b009883a 	mov	r4,r22
 1014278:	a80b883a 	mov	r5,r21
 101427c:	1027883a 	mov	r19,r2
 1014280:	1014d740 	call	1014d74 <__udivsi3>
 1014284:	102d883a 	mov	r22,r2
 1014288:	9826943a 	slli	r19,r19,16
 101428c:	9004d43a 	srli	r2,r18,16
 1014290:	a5a1383a 	mul	r16,r20,r22
 1014294:	14c4b03a 	or	r2,r2,r19
 1014298:	1400052e 	bgeu	r2,r16,10142b0 <__udivdi3+0xe4>
 101429c:	1445883a 	add	r2,r2,r17
 10142a0:	b0ffffc4 	addi	r3,r22,-1
 10142a4:	14400136 	bltu	r2,r17,10142ac <__udivdi3+0xe0>
 10142a8:	14012336 	bltu	r2,r16,1014738 <__udivdi3+0x56c>
 10142ac:	182d883a 	mov	r22,r3
 10142b0:	1421c83a 	sub	r16,r2,r16
 10142b4:	a80b883a 	mov	r5,r21
 10142b8:	8009883a 	mov	r4,r16
 10142bc:	1014dd80 	call	1014dd8 <__umodsi3>
 10142c0:	1027883a 	mov	r19,r2
 10142c4:	a80b883a 	mov	r5,r21
 10142c8:	8009883a 	mov	r4,r16
 10142cc:	1014d740 	call	1014d74 <__udivsi3>
 10142d0:	9826943a 	slli	r19,r19,16
 10142d4:	a0a9383a 	mul	r20,r20,r2
 10142d8:	94bfffcc 	andi	r18,r18,65535
 10142dc:	94e4b03a 	or	r18,r18,r19
 10142e0:	9500052e 	bgeu	r18,r20,10142f8 <__udivdi3+0x12c>
 10142e4:	8ca5883a 	add	r18,r17,r18
 10142e8:	10ffffc4 	addi	r3,r2,-1
 10142ec:	9440f136 	bltu	r18,r17,10146b4 <__udivdi3+0x4e8>
 10142f0:	9500f02e 	bgeu	r18,r20,10146b4 <__udivdi3+0x4e8>
 10142f4:	10bfff84 	addi	r2,r2,-2
 10142f8:	b00c943a 	slli	r6,r22,16
 10142fc:	0007883a 	mov	r3,zero
 1014300:	3084b03a 	or	r2,r6,r2
 1014304:	00005906 	br	101446c <__udivdi3+0x2a0>
 1014308:	29c05636 	bltu	r5,r7,1014464 <__udivdi3+0x298>
 101430c:	00bfffd4 	movui	r2,65535
 1014310:	11c0622e 	bgeu	r2,r7,101449c <__udivdi3+0x2d0>
 1014314:	00804034 	movhi	r2,256
 1014318:	10bfffc4 	addi	r2,r2,-1
 101431c:	11c0ee36 	bltu	r2,r7,10146d8 <__udivdi3+0x50c>
 1014320:	00800404 	movi	r2,16
 1014324:	3886d83a 	srl	r3,r7,r2
 1014328:	010040b4 	movhi	r4,258
 101432c:	212c1004 	addi	r4,r4,-20416
 1014330:	20c7883a 	add	r3,r4,r3
 1014334:	18c00003 	ldbu	r3,0(r3)
 1014338:	05400804 	movi	r21,32
 101433c:	1885883a 	add	r2,r3,r2
 1014340:	a8abc83a 	sub	r21,r21,r2
 1014344:	a800621e 	bne	r21,zero,10144d0 <__udivdi3+0x304>
 1014348:	3c00e936 	bltu	r7,r16,10146f0 <__udivdi3+0x524>
 101434c:	9985403a 	cmpgeu	r2,r19,r6
 1014350:	0007883a 	mov	r3,zero
 1014354:	00004506 	br	101446c <__udivdi3+0x2a0>
 1014358:	3000041e 	bne	r6,zero,101436c <__udivdi3+0x1a0>
 101435c:	000b883a 	mov	r5,zero
 1014360:	01000044 	movi	r4,1
 1014364:	1014d740 	call	1014d74 <__udivsi3>
 1014368:	1023883a 	mov	r17,r2
 101436c:	00bfffd4 	movui	r2,65535
 1014370:	14404e2e 	bgeu	r2,r17,10144ac <__udivdi3+0x2e0>
 1014374:	00804034 	movhi	r2,256
 1014378:	10bfffc4 	addi	r2,r2,-1
 101437c:	1440d836 	bltu	r2,r17,10146e0 <__udivdi3+0x514>
 1014380:	00800404 	movi	r2,16
 1014384:	8886d83a 	srl	r3,r17,r2
 1014388:	010040b4 	movhi	r4,258
 101438c:	212c1004 	addi	r4,r4,-20416
 1014390:	20c7883a 	add	r3,r4,r3
 1014394:	18c00003 	ldbu	r3,0(r3)
 1014398:	1885883a 	add	r2,r3,r2
 101439c:	00c00804 	movi	r3,32
 10143a0:	1887c83a 	sub	r3,r3,r2
 10143a4:	18008f1e 	bne	r3,zero,10145e4 <__udivdi3+0x418>
 10143a8:	882ad43a 	srli	r21,r17,16
 10143ac:	8461c83a 	sub	r16,r16,r17
 10143b0:	8d3fffcc 	andi	r20,r17,65535
 10143b4:	00c00044 	movi	r3,1
 10143b8:	8009883a 	mov	r4,r16
 10143bc:	a80b883a 	mov	r5,r21
 10143c0:	d8c00015 	stw	r3,0(sp)
 10143c4:	1014dd80 	call	1014dd8 <__umodsi3>
 10143c8:	8009883a 	mov	r4,r16
 10143cc:	a80b883a 	mov	r5,r21
 10143d0:	1027883a 	mov	r19,r2
 10143d4:	1014d740 	call	1014d74 <__udivsi3>
 10143d8:	9826943a 	slli	r19,r19,16
 10143dc:	9008d43a 	srli	r4,r18,16
 10143e0:	1521383a 	mul	r16,r2,r20
 10143e4:	102d883a 	mov	r22,r2
 10143e8:	24c8b03a 	or	r4,r4,r19
 10143ec:	d8c00017 	ldw	r3,0(sp)
 10143f0:	2400052e 	bgeu	r4,r16,1014408 <__udivdi3+0x23c>
 10143f4:	2449883a 	add	r4,r4,r17
 10143f8:	b0bfffc4 	addi	r2,r22,-1
 10143fc:	24400136 	bltu	r4,r17,1014404 <__udivdi3+0x238>
 1014400:	2400ca36 	bltu	r4,r16,101472c <__udivdi3+0x560>
 1014404:	102d883a 	mov	r22,r2
 1014408:	2421c83a 	sub	r16,r4,r16
 101440c:	a80b883a 	mov	r5,r21
 1014410:	8009883a 	mov	r4,r16
 1014414:	d8c00015 	stw	r3,0(sp)
 1014418:	1014dd80 	call	1014dd8 <__umodsi3>
 101441c:	1027883a 	mov	r19,r2
 1014420:	a80b883a 	mov	r5,r21
 1014424:	8009883a 	mov	r4,r16
 1014428:	1014d740 	call	1014d74 <__udivsi3>
 101442c:	9826943a 	slli	r19,r19,16
 1014430:	1529383a 	mul	r20,r2,r20
 1014434:	94bfffcc 	andi	r18,r18,65535
 1014438:	94e4b03a 	or	r18,r18,r19
 101443c:	d8c00017 	ldw	r3,0(sp)
 1014440:	9500052e 	bgeu	r18,r20,1014458 <__udivdi3+0x28c>
 1014444:	8ca5883a 	add	r18,r17,r18
 1014448:	113fffc4 	addi	r4,r2,-1
 101444c:	94409736 	bltu	r18,r17,10146ac <__udivdi3+0x4e0>
 1014450:	9500962e 	bgeu	r18,r20,10146ac <__udivdi3+0x4e0>
 1014454:	10bfff84 	addi	r2,r2,-2
 1014458:	b00c943a 	slli	r6,r22,16
 101445c:	3084b03a 	or	r2,r6,r2
 1014460:	00000206 	br	101446c <__udivdi3+0x2a0>
 1014464:	0007883a 	mov	r3,zero
 1014468:	0005883a 	mov	r2,zero
 101446c:	dfc00a17 	ldw	ra,40(sp)
 1014470:	df000917 	ldw	fp,36(sp)
 1014474:	ddc00817 	ldw	r23,32(sp)
 1014478:	dd800717 	ldw	r22,28(sp)
 101447c:	dd400617 	ldw	r21,24(sp)
 1014480:	dd000517 	ldw	r20,20(sp)
 1014484:	dcc00417 	ldw	r19,16(sp)
 1014488:	dc800317 	ldw	r18,12(sp)
 101448c:	dc400217 	ldw	r17,8(sp)
 1014490:	dc000117 	ldw	r16,4(sp)
 1014494:	dec00b04 	addi	sp,sp,44
 1014498:	f800283a 	ret
 101449c:	00803fc4 	movi	r2,255
 10144a0:	11c5803a 	cmpltu	r2,r2,r7
 10144a4:	100490fa 	slli	r2,r2,3
 10144a8:	003f9e06 	br	1014324 <__alt_data_end+0xff014324>
 10144ac:	00803fc4 	movi	r2,255
 10144b0:	1445803a 	cmpltu	r2,r2,r17
 10144b4:	100490fa 	slli	r2,r2,3
 10144b8:	003fb206 	br	1014384 <__alt_data_end+0xff014384>
 10144bc:	00804034 	movhi	r2,256
 10144c0:	10bfffc4 	addi	r2,r2,-1
 10144c4:	11808836 	bltu	r2,r6,10146e8 <__udivdi3+0x51c>
 10144c8:	00800404 	movi	r2,16
 10144cc:	003f5606 	br	1014228 <__alt_data_end+0xff014228>
 10144d0:	30aed83a 	srl	r23,r6,r2
 10144d4:	3d4e983a 	sll	r7,r7,r21
 10144d8:	80acd83a 	srl	r22,r16,r2
 10144dc:	9884d83a 	srl	r2,r19,r2
 10144e0:	3deeb03a 	or	r23,r7,r23
 10144e4:	b824d43a 	srli	r18,r23,16
 10144e8:	8560983a 	sll	r16,r16,r21
 10144ec:	b009883a 	mov	r4,r22
 10144f0:	900b883a 	mov	r5,r18
 10144f4:	3568983a 	sll	r20,r6,r21
 10144f8:	1420b03a 	or	r16,r2,r16
 10144fc:	1014dd80 	call	1014dd8 <__umodsi3>
 1014500:	b009883a 	mov	r4,r22
 1014504:	900b883a 	mov	r5,r18
 1014508:	1023883a 	mov	r17,r2
 101450c:	1014d740 	call	1014d74 <__udivsi3>
 1014510:	8808943a 	slli	r4,r17,16
 1014514:	bf3fffcc 	andi	fp,r23,65535
 1014518:	8006d43a 	srli	r3,r16,16
 101451c:	e0a3383a 	mul	r17,fp,r2
 1014520:	100d883a 	mov	r6,r2
 1014524:	1906b03a 	or	r3,r3,r4
 1014528:	1c40042e 	bgeu	r3,r17,101453c <__udivdi3+0x370>
 101452c:	1dc7883a 	add	r3,r3,r23
 1014530:	10bfffc4 	addi	r2,r2,-1
 1014534:	1dc0752e 	bgeu	r3,r23,101470c <__udivdi3+0x540>
 1014538:	100d883a 	mov	r6,r2
 101453c:	1c63c83a 	sub	r17,r3,r17
 1014540:	900b883a 	mov	r5,r18
 1014544:	8809883a 	mov	r4,r17
 1014548:	d9800015 	stw	r6,0(sp)
 101454c:	1014dd80 	call	1014dd8 <__umodsi3>
 1014550:	102d883a 	mov	r22,r2
 1014554:	8809883a 	mov	r4,r17
 1014558:	900b883a 	mov	r5,r18
 101455c:	1014d740 	call	1014d74 <__udivsi3>
 1014560:	b02c943a 	slli	r22,r22,16
 1014564:	e089383a 	mul	r4,fp,r2
 1014568:	843fffcc 	andi	r16,r16,65535
 101456c:	85a0b03a 	or	r16,r16,r22
 1014570:	d9800017 	ldw	r6,0(sp)
 1014574:	8100042e 	bgeu	r16,r4,1014588 <__udivdi3+0x3bc>
 1014578:	85e1883a 	add	r16,r16,r23
 101457c:	10ffffc4 	addi	r3,r2,-1
 1014580:	85c05e2e 	bgeu	r16,r23,10146fc <__udivdi3+0x530>
 1014584:	1805883a 	mov	r2,r3
 1014588:	300c943a 	slli	r6,r6,16
 101458c:	a17fffcc 	andi	r5,r20,65535
 1014590:	a028d43a 	srli	r20,r20,16
 1014594:	3084b03a 	or	r2,r6,r2
 1014598:	10ffffcc 	andi	r3,r2,65535
 101459c:	100cd43a 	srli	r6,r2,16
 10145a0:	194f383a 	mul	r7,r3,r5
 10145a4:	1d07383a 	mul	r3,r3,r20
 10145a8:	314b383a 	mul	r5,r6,r5
 10145ac:	3810d43a 	srli	r8,r7,16
 10145b0:	8121c83a 	sub	r16,r16,r4
 10145b4:	1947883a 	add	r3,r3,r5
 10145b8:	40c7883a 	add	r3,r8,r3
 10145bc:	350d383a 	mul	r6,r6,r20
 10145c0:	1940022e 	bgeu	r3,r5,10145cc <__udivdi3+0x400>
 10145c4:	01000074 	movhi	r4,1
 10145c8:	310d883a 	add	r6,r6,r4
 10145cc:	1828d43a 	srli	r20,r3,16
 10145d0:	a18d883a 	add	r6,r20,r6
 10145d4:	81803e36 	bltu	r16,r6,10146d0 <__udivdi3+0x504>
 10145d8:	81803826 	beq	r16,r6,10146bc <__udivdi3+0x4f0>
 10145dc:	0007883a 	mov	r3,zero
 10145e0:	003fa206 	br	101446c <__alt_data_end+0xff01446c>
 10145e4:	88e2983a 	sll	r17,r17,r3
 10145e8:	80a8d83a 	srl	r20,r16,r2
 10145ec:	80e0983a 	sll	r16,r16,r3
 10145f0:	882ad43a 	srli	r21,r17,16
 10145f4:	9884d83a 	srl	r2,r19,r2
 10145f8:	a009883a 	mov	r4,r20
 10145fc:	a80b883a 	mov	r5,r21
 1014600:	142eb03a 	or	r23,r2,r16
 1014604:	98e4983a 	sll	r18,r19,r3
 1014608:	1014dd80 	call	1014dd8 <__umodsi3>
 101460c:	a009883a 	mov	r4,r20
 1014610:	a80b883a 	mov	r5,r21
 1014614:	1021883a 	mov	r16,r2
 1014618:	1014d740 	call	1014d74 <__udivsi3>
 101461c:	1039883a 	mov	fp,r2
 1014620:	8d3fffcc 	andi	r20,r17,65535
 1014624:	8020943a 	slli	r16,r16,16
 1014628:	b804d43a 	srli	r2,r23,16
 101462c:	a72d383a 	mul	r22,r20,fp
 1014630:	1404b03a 	or	r2,r2,r16
 1014634:	1580062e 	bgeu	r2,r22,1014650 <__udivdi3+0x484>
 1014638:	1445883a 	add	r2,r2,r17
 101463c:	e0ffffc4 	addi	r3,fp,-1
 1014640:	14403836 	bltu	r2,r17,1014724 <__udivdi3+0x558>
 1014644:	1580372e 	bgeu	r2,r22,1014724 <__udivdi3+0x558>
 1014648:	e73fff84 	addi	fp,fp,-2
 101464c:	1445883a 	add	r2,r2,r17
 1014650:	15adc83a 	sub	r22,r2,r22
 1014654:	a80b883a 	mov	r5,r21
 1014658:	b009883a 	mov	r4,r22
 101465c:	1014dd80 	call	1014dd8 <__umodsi3>
 1014660:	1027883a 	mov	r19,r2
 1014664:	b009883a 	mov	r4,r22
 1014668:	a80b883a 	mov	r5,r21
 101466c:	1014d740 	call	1014d74 <__udivsi3>
 1014670:	9826943a 	slli	r19,r19,16
 1014674:	a0a1383a 	mul	r16,r20,r2
 1014678:	b93fffcc 	andi	r4,r23,65535
 101467c:	24c8b03a 	or	r4,r4,r19
 1014680:	2400062e 	bgeu	r4,r16,101469c <__udivdi3+0x4d0>
 1014684:	2449883a 	add	r4,r4,r17
 1014688:	10ffffc4 	addi	r3,r2,-1
 101468c:	24402336 	bltu	r4,r17,101471c <__udivdi3+0x550>
 1014690:	2400222e 	bgeu	r4,r16,101471c <__udivdi3+0x550>
 1014694:	10bfff84 	addi	r2,r2,-2
 1014698:	2449883a 	add	r4,r4,r17
 101469c:	e038943a 	slli	fp,fp,16
 10146a0:	2421c83a 	sub	r16,r4,r16
 10146a4:	e086b03a 	or	r3,fp,r2
 10146a8:	003f4306 	br	10143b8 <__alt_data_end+0xff0143b8>
 10146ac:	2005883a 	mov	r2,r4
 10146b0:	003f6906 	br	1014458 <__alt_data_end+0xff014458>
 10146b4:	1805883a 	mov	r2,r3
 10146b8:	003f0f06 	br	10142f8 <__alt_data_end+0xff0142f8>
 10146bc:	1806943a 	slli	r3,r3,16
 10146c0:	9d66983a 	sll	r19,r19,r21
 10146c4:	39ffffcc 	andi	r7,r7,65535
 10146c8:	19c7883a 	add	r3,r3,r7
 10146cc:	98ffc32e 	bgeu	r19,r3,10145dc <__alt_data_end+0xff0145dc>
 10146d0:	10bfffc4 	addi	r2,r2,-1
 10146d4:	003fc106 	br	10145dc <__alt_data_end+0xff0145dc>
 10146d8:	00800604 	movi	r2,24
 10146dc:	003f1106 	br	1014324 <__alt_data_end+0xff014324>
 10146e0:	00800604 	movi	r2,24
 10146e4:	003f2706 	br	1014384 <__alt_data_end+0xff014384>
 10146e8:	00800604 	movi	r2,24
 10146ec:	003ece06 	br	1014228 <__alt_data_end+0xff014228>
 10146f0:	0007883a 	mov	r3,zero
 10146f4:	00800044 	movi	r2,1
 10146f8:	003f5c06 	br	101446c <__alt_data_end+0xff01446c>
 10146fc:	813fa12e 	bgeu	r16,r4,1014584 <__alt_data_end+0xff014584>
 1014700:	10bfff84 	addi	r2,r2,-2
 1014704:	85e1883a 	add	r16,r16,r23
 1014708:	003f9f06 	br	1014588 <__alt_data_end+0xff014588>
 101470c:	1c7f8a2e 	bgeu	r3,r17,1014538 <__alt_data_end+0xff014538>
 1014710:	31bfff84 	addi	r6,r6,-2
 1014714:	1dc7883a 	add	r3,r3,r23
 1014718:	003f8806 	br	101453c <__alt_data_end+0xff01453c>
 101471c:	1805883a 	mov	r2,r3
 1014720:	003fde06 	br	101469c <__alt_data_end+0xff01469c>
 1014724:	1839883a 	mov	fp,r3
 1014728:	003fc906 	br	1014650 <__alt_data_end+0xff014650>
 101472c:	b5bfff84 	addi	r22,r22,-2
 1014730:	2449883a 	add	r4,r4,r17
 1014734:	003f3406 	br	1014408 <__alt_data_end+0xff014408>
 1014738:	b5bfff84 	addi	r22,r22,-2
 101473c:	1445883a 	add	r2,r2,r17
 1014740:	003edb06 	br	10142b0 <__alt_data_end+0xff0142b0>

01014744 <__umoddi3>:
 1014744:	defff404 	addi	sp,sp,-48
 1014748:	df000a15 	stw	fp,40(sp)
 101474c:	dc400315 	stw	r17,12(sp)
 1014750:	dc000215 	stw	r16,8(sp)
 1014754:	dfc00b15 	stw	ra,44(sp)
 1014758:	ddc00915 	stw	r23,36(sp)
 101475c:	dd800815 	stw	r22,32(sp)
 1014760:	dd400715 	stw	r21,28(sp)
 1014764:	dd000615 	stw	r20,24(sp)
 1014768:	dcc00515 	stw	r19,20(sp)
 101476c:	dc800415 	stw	r18,16(sp)
 1014770:	2021883a 	mov	r16,r4
 1014774:	2823883a 	mov	r17,r5
 1014778:	2839883a 	mov	fp,r5
 101477c:	38003c1e 	bne	r7,zero,1014870 <__umoddi3+0x12c>
 1014780:	3027883a 	mov	r19,r6
 1014784:	2029883a 	mov	r20,r4
 1014788:	2980512e 	bgeu	r5,r6,10148d0 <__umoddi3+0x18c>
 101478c:	00bfffd4 	movui	r2,65535
 1014790:	11809a36 	bltu	r2,r6,10149fc <__umoddi3+0x2b8>
 1014794:	01003fc4 	movi	r4,255
 1014798:	2189803a 	cmpltu	r4,r4,r6
 101479c:	200890fa 	slli	r4,r4,3
 10147a0:	3104d83a 	srl	r2,r6,r4
 10147a4:	00c040b4 	movhi	r3,258
 10147a8:	18ec1004 	addi	r3,r3,-20416
 10147ac:	1885883a 	add	r2,r3,r2
 10147b0:	10c00003 	ldbu	r3,0(r2)
 10147b4:	00800804 	movi	r2,32
 10147b8:	1909883a 	add	r4,r3,r4
 10147bc:	1125c83a 	sub	r18,r2,r4
 10147c0:	90000526 	beq	r18,zero,10147d8 <__umoddi3+0x94>
 10147c4:	8ca2983a 	sll	r17,r17,r18
 10147c8:	8108d83a 	srl	r4,r16,r4
 10147cc:	34a6983a 	sll	r19,r6,r18
 10147d0:	84a8983a 	sll	r20,r16,r18
 10147d4:	2478b03a 	or	fp,r4,r17
 10147d8:	982ed43a 	srli	r23,r19,16
 10147dc:	e009883a 	mov	r4,fp
 10147e0:	9dbfffcc 	andi	r22,r19,65535
 10147e4:	b80b883a 	mov	r5,r23
 10147e8:	1014dd80 	call	1014dd8 <__umodsi3>
 10147ec:	e009883a 	mov	r4,fp
 10147f0:	b80b883a 	mov	r5,r23
 10147f4:	102b883a 	mov	r21,r2
 10147f8:	1014d740 	call	1014d74 <__udivsi3>
 10147fc:	a806943a 	slli	r3,r21,16
 1014800:	a008d43a 	srli	r4,r20,16
 1014804:	b085383a 	mul	r2,r22,r2
 1014808:	20c8b03a 	or	r4,r4,r3
 101480c:	2080032e 	bgeu	r4,r2,101481c <__umoddi3+0xd8>
 1014810:	24c9883a 	add	r4,r4,r19
 1014814:	24c00136 	bltu	r4,r19,101481c <__umoddi3+0xd8>
 1014818:	20811036 	bltu	r4,r2,1014c5c <__umoddi3+0x518>
 101481c:	20abc83a 	sub	r21,r4,r2
 1014820:	b80b883a 	mov	r5,r23
 1014824:	a809883a 	mov	r4,r21
 1014828:	1014dd80 	call	1014dd8 <__umodsi3>
 101482c:	1023883a 	mov	r17,r2
 1014830:	b80b883a 	mov	r5,r23
 1014834:	a809883a 	mov	r4,r21
 1014838:	1014d740 	call	1014d74 <__udivsi3>
 101483c:	8822943a 	slli	r17,r17,16
 1014840:	b085383a 	mul	r2,r22,r2
 1014844:	a0ffffcc 	andi	r3,r20,65535
 1014848:	1c46b03a 	or	r3,r3,r17
 101484c:	1880042e 	bgeu	r3,r2,1014860 <__umoddi3+0x11c>
 1014850:	1cc7883a 	add	r3,r3,r19
 1014854:	1cc00236 	bltu	r3,r19,1014860 <__umoddi3+0x11c>
 1014858:	1880012e 	bgeu	r3,r2,1014860 <__umoddi3+0x11c>
 101485c:	1cc7883a 	add	r3,r3,r19
 1014860:	1885c83a 	sub	r2,r3,r2
 1014864:	1484d83a 	srl	r2,r2,r18
 1014868:	0007883a 	mov	r3,zero
 101486c:	00004f06 	br	10149ac <__umoddi3+0x268>
 1014870:	29c04c36 	bltu	r5,r7,10149a4 <__umoddi3+0x260>
 1014874:	00bfffd4 	movui	r2,65535
 1014878:	11c0582e 	bgeu	r2,r7,10149dc <__umoddi3+0x298>
 101487c:	00804034 	movhi	r2,256
 1014880:	10bfffc4 	addi	r2,r2,-1
 1014884:	11c0e736 	bltu	r2,r7,1014c24 <__umoddi3+0x4e0>
 1014888:	01000404 	movi	r4,16
 101488c:	3904d83a 	srl	r2,r7,r4
 1014890:	00c040b4 	movhi	r3,258
 1014894:	18ec1004 	addi	r3,r3,-20416
 1014898:	1885883a 	add	r2,r3,r2
 101489c:	14c00003 	ldbu	r19,0(r2)
 10148a0:	00c00804 	movi	r3,32
 10148a4:	9927883a 	add	r19,r19,r4
 10148a8:	1ce9c83a 	sub	r20,r3,r19
 10148ac:	a000581e 	bne	r20,zero,1014a10 <__umoddi3+0x2cc>
 10148b0:	3c400136 	bltu	r7,r17,10148b8 <__umoddi3+0x174>
 10148b4:	8180eb36 	bltu	r16,r6,1014c64 <__umoddi3+0x520>
 10148b8:	8185c83a 	sub	r2,r16,r6
 10148bc:	89e3c83a 	sub	r17,r17,r7
 10148c0:	8089803a 	cmpltu	r4,r16,r2
 10148c4:	8939c83a 	sub	fp,r17,r4
 10148c8:	e007883a 	mov	r3,fp
 10148cc:	00003706 	br	10149ac <__umoddi3+0x268>
 10148d0:	3000041e 	bne	r6,zero,10148e4 <__umoddi3+0x1a0>
 10148d4:	000b883a 	mov	r5,zero
 10148d8:	01000044 	movi	r4,1
 10148dc:	1014d740 	call	1014d74 <__udivsi3>
 10148e0:	1027883a 	mov	r19,r2
 10148e4:	00bfffd4 	movui	r2,65535
 10148e8:	14c0402e 	bgeu	r2,r19,10149ec <__umoddi3+0x2a8>
 10148ec:	00804034 	movhi	r2,256
 10148f0:	10bfffc4 	addi	r2,r2,-1
 10148f4:	14c0cd36 	bltu	r2,r19,1014c2c <__umoddi3+0x4e8>
 10148f8:	00800404 	movi	r2,16
 10148fc:	9886d83a 	srl	r3,r19,r2
 1014900:	010040b4 	movhi	r4,258
 1014904:	212c1004 	addi	r4,r4,-20416
 1014908:	20c7883a 	add	r3,r4,r3
 101490c:	18c00003 	ldbu	r3,0(r3)
 1014910:	1887883a 	add	r3,r3,r2
 1014914:	00800804 	movi	r2,32
 1014918:	10e5c83a 	sub	r18,r2,r3
 101491c:	9000901e 	bne	r18,zero,1014b60 <__umoddi3+0x41c>
 1014920:	982cd43a 	srli	r22,r19,16
 1014924:	8ce3c83a 	sub	r17,r17,r19
 1014928:	9d7fffcc 	andi	r21,r19,65535
 101492c:	b00b883a 	mov	r5,r22
 1014930:	8809883a 	mov	r4,r17
 1014934:	1014dd80 	call	1014dd8 <__umodsi3>
 1014938:	8809883a 	mov	r4,r17
 101493c:	b00b883a 	mov	r5,r22
 1014940:	1021883a 	mov	r16,r2
 1014944:	1014d740 	call	1014d74 <__udivsi3>
 1014948:	8006943a 	slli	r3,r16,16
 101494c:	a008d43a 	srli	r4,r20,16
 1014950:	1545383a 	mul	r2,r2,r21
 1014954:	20c8b03a 	or	r4,r4,r3
 1014958:	2080042e 	bgeu	r4,r2,101496c <__umoddi3+0x228>
 101495c:	24c9883a 	add	r4,r4,r19
 1014960:	24c00236 	bltu	r4,r19,101496c <__umoddi3+0x228>
 1014964:	2080012e 	bgeu	r4,r2,101496c <__umoddi3+0x228>
 1014968:	24c9883a 	add	r4,r4,r19
 101496c:	20a1c83a 	sub	r16,r4,r2
 1014970:	b00b883a 	mov	r5,r22
 1014974:	8009883a 	mov	r4,r16
 1014978:	1014dd80 	call	1014dd8 <__umodsi3>
 101497c:	1023883a 	mov	r17,r2
 1014980:	b00b883a 	mov	r5,r22
 1014984:	8009883a 	mov	r4,r16
 1014988:	1014d740 	call	1014d74 <__udivsi3>
 101498c:	8822943a 	slli	r17,r17,16
 1014990:	1545383a 	mul	r2,r2,r21
 1014994:	a53fffcc 	andi	r20,r20,65535
 1014998:	a446b03a 	or	r3,r20,r17
 101499c:	18bfb02e 	bgeu	r3,r2,1014860 <__alt_data_end+0xff014860>
 10149a0:	003fab06 	br	1014850 <__alt_data_end+0xff014850>
 10149a4:	2005883a 	mov	r2,r4
 10149a8:	2807883a 	mov	r3,r5
 10149ac:	dfc00b17 	ldw	ra,44(sp)
 10149b0:	df000a17 	ldw	fp,40(sp)
 10149b4:	ddc00917 	ldw	r23,36(sp)
 10149b8:	dd800817 	ldw	r22,32(sp)
 10149bc:	dd400717 	ldw	r21,28(sp)
 10149c0:	dd000617 	ldw	r20,24(sp)
 10149c4:	dcc00517 	ldw	r19,20(sp)
 10149c8:	dc800417 	ldw	r18,16(sp)
 10149cc:	dc400317 	ldw	r17,12(sp)
 10149d0:	dc000217 	ldw	r16,8(sp)
 10149d4:	dec00c04 	addi	sp,sp,48
 10149d8:	f800283a 	ret
 10149dc:	04c03fc4 	movi	r19,255
 10149e0:	99c9803a 	cmpltu	r4,r19,r7
 10149e4:	200890fa 	slli	r4,r4,3
 10149e8:	003fa806 	br	101488c <__alt_data_end+0xff01488c>
 10149ec:	00803fc4 	movi	r2,255
 10149f0:	14c5803a 	cmpltu	r2,r2,r19
 10149f4:	100490fa 	slli	r2,r2,3
 10149f8:	003fc006 	br	10148fc <__alt_data_end+0xff0148fc>
 10149fc:	00804034 	movhi	r2,256
 1014a00:	10bfffc4 	addi	r2,r2,-1
 1014a04:	11808b36 	bltu	r2,r6,1014c34 <__umoddi3+0x4f0>
 1014a08:	01000404 	movi	r4,16
 1014a0c:	003f6406 	br	10147a0 <__alt_data_end+0xff0147a0>
 1014a10:	34c4d83a 	srl	r2,r6,r19
 1014a14:	3d0e983a 	sll	r7,r7,r20
 1014a18:	8cf8d83a 	srl	fp,r17,r19
 1014a1c:	8d10983a 	sll	r8,r17,r20
 1014a20:	38aab03a 	or	r21,r7,r2
 1014a24:	a82cd43a 	srli	r22,r21,16
 1014a28:	84e2d83a 	srl	r17,r16,r19
 1014a2c:	e009883a 	mov	r4,fp
 1014a30:	b00b883a 	mov	r5,r22
 1014a34:	8a22b03a 	or	r17,r17,r8
 1014a38:	3524983a 	sll	r18,r6,r20
 1014a3c:	1014dd80 	call	1014dd8 <__umodsi3>
 1014a40:	e009883a 	mov	r4,fp
 1014a44:	b00b883a 	mov	r5,r22
 1014a48:	102f883a 	mov	r23,r2
 1014a4c:	1014d740 	call	1014d74 <__udivsi3>
 1014a50:	100d883a 	mov	r6,r2
 1014a54:	b808943a 	slli	r4,r23,16
 1014a58:	aa3fffcc 	andi	r8,r21,65535
 1014a5c:	8804d43a 	srli	r2,r17,16
 1014a60:	41af383a 	mul	r23,r8,r6
 1014a64:	8520983a 	sll	r16,r16,r20
 1014a68:	1104b03a 	or	r2,r2,r4
 1014a6c:	15c0042e 	bgeu	r2,r23,1014a80 <__umoddi3+0x33c>
 1014a70:	1545883a 	add	r2,r2,r21
 1014a74:	30ffffc4 	addi	r3,r6,-1
 1014a78:	1540742e 	bgeu	r2,r21,1014c4c <__umoddi3+0x508>
 1014a7c:	180d883a 	mov	r6,r3
 1014a80:	15efc83a 	sub	r23,r2,r23
 1014a84:	b00b883a 	mov	r5,r22
 1014a88:	b809883a 	mov	r4,r23
 1014a8c:	d9800115 	stw	r6,4(sp)
 1014a90:	da000015 	stw	r8,0(sp)
 1014a94:	1014dd80 	call	1014dd8 <__umodsi3>
 1014a98:	b00b883a 	mov	r5,r22
 1014a9c:	b809883a 	mov	r4,r23
 1014aa0:	1039883a 	mov	fp,r2
 1014aa4:	1014d740 	call	1014d74 <__udivsi3>
 1014aa8:	da000017 	ldw	r8,0(sp)
 1014aac:	e038943a 	slli	fp,fp,16
 1014ab0:	100b883a 	mov	r5,r2
 1014ab4:	4089383a 	mul	r4,r8,r2
 1014ab8:	8a3fffcc 	andi	r8,r17,65535
 1014abc:	4710b03a 	or	r8,r8,fp
 1014ac0:	d9800117 	ldw	r6,4(sp)
 1014ac4:	4100042e 	bgeu	r8,r4,1014ad8 <__umoddi3+0x394>
 1014ac8:	4551883a 	add	r8,r8,r21
 1014acc:	10bfffc4 	addi	r2,r2,-1
 1014ad0:	45405a2e 	bgeu	r8,r21,1014c3c <__umoddi3+0x4f8>
 1014ad4:	100b883a 	mov	r5,r2
 1014ad8:	300c943a 	slli	r6,r6,16
 1014adc:	91ffffcc 	andi	r7,r18,65535
 1014ae0:	9004d43a 	srli	r2,r18,16
 1014ae4:	314cb03a 	or	r6,r6,r5
 1014ae8:	317fffcc 	andi	r5,r6,65535
 1014aec:	300cd43a 	srli	r6,r6,16
 1014af0:	29d3383a 	mul	r9,r5,r7
 1014af4:	288b383a 	mul	r5,r5,r2
 1014af8:	31cf383a 	mul	r7,r6,r7
 1014afc:	4806d43a 	srli	r3,r9,16
 1014b00:	4111c83a 	sub	r8,r8,r4
 1014b04:	29cb883a 	add	r5,r5,r7
 1014b08:	194b883a 	add	r5,r3,r5
 1014b0c:	3085383a 	mul	r2,r6,r2
 1014b10:	29c0022e 	bgeu	r5,r7,1014b1c <__umoddi3+0x3d8>
 1014b14:	00c00074 	movhi	r3,1
 1014b18:	10c5883a 	add	r2,r2,r3
 1014b1c:	2808d43a 	srli	r4,r5,16
 1014b20:	280a943a 	slli	r5,r5,16
 1014b24:	4a7fffcc 	andi	r9,r9,65535
 1014b28:	2085883a 	add	r2,r4,r2
 1014b2c:	2a4b883a 	add	r5,r5,r9
 1014b30:	40803636 	bltu	r8,r2,1014c0c <__umoddi3+0x4c8>
 1014b34:	40804d26 	beq	r8,r2,1014c6c <__umoddi3+0x528>
 1014b38:	4089c83a 	sub	r4,r8,r2
 1014b3c:	280f883a 	mov	r7,r5
 1014b40:	81cfc83a 	sub	r7,r16,r7
 1014b44:	81c7803a 	cmpltu	r3,r16,r7
 1014b48:	20c7c83a 	sub	r3,r4,r3
 1014b4c:	1cc4983a 	sll	r2,r3,r19
 1014b50:	3d0ed83a 	srl	r7,r7,r20
 1014b54:	1d06d83a 	srl	r3,r3,r20
 1014b58:	11c4b03a 	or	r2,r2,r7
 1014b5c:	003f9306 	br	10149ac <__alt_data_end+0xff0149ac>
 1014b60:	9ca6983a 	sll	r19,r19,r18
 1014b64:	88e8d83a 	srl	r20,r17,r3
 1014b68:	80c4d83a 	srl	r2,r16,r3
 1014b6c:	982cd43a 	srli	r22,r19,16
 1014b70:	8ca2983a 	sll	r17,r17,r18
 1014b74:	a009883a 	mov	r4,r20
 1014b78:	b00b883a 	mov	r5,r22
 1014b7c:	1478b03a 	or	fp,r2,r17
 1014b80:	1014dd80 	call	1014dd8 <__umodsi3>
 1014b84:	a009883a 	mov	r4,r20
 1014b88:	b00b883a 	mov	r5,r22
 1014b8c:	1023883a 	mov	r17,r2
 1014b90:	1014d740 	call	1014d74 <__udivsi3>
 1014b94:	9d7fffcc 	andi	r21,r19,65535
 1014b98:	880a943a 	slli	r5,r17,16
 1014b9c:	e008d43a 	srli	r4,fp,16
 1014ba0:	a885383a 	mul	r2,r21,r2
 1014ba4:	84a8983a 	sll	r20,r16,r18
 1014ba8:	2148b03a 	or	r4,r4,r5
 1014bac:	2080042e 	bgeu	r4,r2,1014bc0 <__umoddi3+0x47c>
 1014bb0:	24c9883a 	add	r4,r4,r19
 1014bb4:	24c00236 	bltu	r4,r19,1014bc0 <__umoddi3+0x47c>
 1014bb8:	2080012e 	bgeu	r4,r2,1014bc0 <__umoddi3+0x47c>
 1014bbc:	24c9883a 	add	r4,r4,r19
 1014bc0:	20a3c83a 	sub	r17,r4,r2
 1014bc4:	b00b883a 	mov	r5,r22
 1014bc8:	8809883a 	mov	r4,r17
 1014bcc:	1014dd80 	call	1014dd8 <__umodsi3>
 1014bd0:	102f883a 	mov	r23,r2
 1014bd4:	8809883a 	mov	r4,r17
 1014bd8:	b00b883a 	mov	r5,r22
 1014bdc:	1014d740 	call	1014d74 <__udivsi3>
 1014be0:	b82e943a 	slli	r23,r23,16
 1014be4:	a885383a 	mul	r2,r21,r2
 1014be8:	e13fffcc 	andi	r4,fp,65535
 1014bec:	25c8b03a 	or	r4,r4,r23
 1014bf0:	2080042e 	bgeu	r4,r2,1014c04 <__umoddi3+0x4c0>
 1014bf4:	24c9883a 	add	r4,r4,r19
 1014bf8:	24c00236 	bltu	r4,r19,1014c04 <__umoddi3+0x4c0>
 1014bfc:	2080012e 	bgeu	r4,r2,1014c04 <__umoddi3+0x4c0>
 1014c00:	24c9883a 	add	r4,r4,r19
 1014c04:	20a3c83a 	sub	r17,r4,r2
 1014c08:	003f4806 	br	101492c <__alt_data_end+0xff01492c>
 1014c0c:	2c8fc83a 	sub	r7,r5,r18
 1014c10:	1545c83a 	sub	r2,r2,r21
 1014c14:	29cb803a 	cmpltu	r5,r5,r7
 1014c18:	1145c83a 	sub	r2,r2,r5
 1014c1c:	4089c83a 	sub	r4,r8,r2
 1014c20:	003fc706 	br	1014b40 <__alt_data_end+0xff014b40>
 1014c24:	01000604 	movi	r4,24
 1014c28:	003f1806 	br	101488c <__alt_data_end+0xff01488c>
 1014c2c:	00800604 	movi	r2,24
 1014c30:	003f3206 	br	10148fc <__alt_data_end+0xff0148fc>
 1014c34:	01000604 	movi	r4,24
 1014c38:	003ed906 	br	10147a0 <__alt_data_end+0xff0147a0>
 1014c3c:	413fa52e 	bgeu	r8,r4,1014ad4 <__alt_data_end+0xff014ad4>
 1014c40:	297fff84 	addi	r5,r5,-2
 1014c44:	4551883a 	add	r8,r8,r21
 1014c48:	003fa306 	br	1014ad8 <__alt_data_end+0xff014ad8>
 1014c4c:	15ff8b2e 	bgeu	r2,r23,1014a7c <__alt_data_end+0xff014a7c>
 1014c50:	31bfff84 	addi	r6,r6,-2
 1014c54:	1545883a 	add	r2,r2,r21
 1014c58:	003f8906 	br	1014a80 <__alt_data_end+0xff014a80>
 1014c5c:	24c9883a 	add	r4,r4,r19
 1014c60:	003eee06 	br	101481c <__alt_data_end+0xff01481c>
 1014c64:	8005883a 	mov	r2,r16
 1014c68:	003f1706 	br	10148c8 <__alt_data_end+0xff0148c8>
 1014c6c:	817fe736 	bltu	r16,r5,1014c0c <__alt_data_end+0xff014c0c>
 1014c70:	280f883a 	mov	r7,r5
 1014c74:	0009883a 	mov	r4,zero
 1014c78:	003fb106 	br	1014b40 <__alt_data_end+0xff014b40>

01014c7c <__divsi3>:
 1014c7c:	20001b16 	blt	r4,zero,1014cec <__divsi3+0x70>
 1014c80:	000f883a 	mov	r7,zero
 1014c84:	28001616 	blt	r5,zero,1014ce0 <__divsi3+0x64>
 1014c88:	200d883a 	mov	r6,r4
 1014c8c:	29001a2e 	bgeu	r5,r4,1014cf8 <__divsi3+0x7c>
 1014c90:	00800804 	movi	r2,32
 1014c94:	00c00044 	movi	r3,1
 1014c98:	00000106 	br	1014ca0 <__divsi3+0x24>
 1014c9c:	10000d26 	beq	r2,zero,1014cd4 <__divsi3+0x58>
 1014ca0:	294b883a 	add	r5,r5,r5
 1014ca4:	10bfffc4 	addi	r2,r2,-1
 1014ca8:	18c7883a 	add	r3,r3,r3
 1014cac:	293ffb36 	bltu	r5,r4,1014c9c <__alt_data_end+0xff014c9c>
 1014cb0:	0005883a 	mov	r2,zero
 1014cb4:	18000726 	beq	r3,zero,1014cd4 <__divsi3+0x58>
 1014cb8:	0005883a 	mov	r2,zero
 1014cbc:	31400236 	bltu	r6,r5,1014cc8 <__divsi3+0x4c>
 1014cc0:	314dc83a 	sub	r6,r6,r5
 1014cc4:	10c4b03a 	or	r2,r2,r3
 1014cc8:	1806d07a 	srli	r3,r3,1
 1014ccc:	280ad07a 	srli	r5,r5,1
 1014cd0:	183ffa1e 	bne	r3,zero,1014cbc <__alt_data_end+0xff014cbc>
 1014cd4:	38000126 	beq	r7,zero,1014cdc <__divsi3+0x60>
 1014cd8:	0085c83a 	sub	r2,zero,r2
 1014cdc:	f800283a 	ret
 1014ce0:	014bc83a 	sub	r5,zero,r5
 1014ce4:	39c0005c 	xori	r7,r7,1
 1014ce8:	003fe706 	br	1014c88 <__alt_data_end+0xff014c88>
 1014cec:	0109c83a 	sub	r4,zero,r4
 1014cf0:	01c00044 	movi	r7,1
 1014cf4:	003fe306 	br	1014c84 <__alt_data_end+0xff014c84>
 1014cf8:	00c00044 	movi	r3,1
 1014cfc:	003fee06 	br	1014cb8 <__alt_data_end+0xff014cb8>

01014d00 <__modsi3>:
 1014d00:	20001716 	blt	r4,zero,1014d60 <__modsi3+0x60>
 1014d04:	000f883a 	mov	r7,zero
 1014d08:	2005883a 	mov	r2,r4
 1014d0c:	28001216 	blt	r5,zero,1014d58 <__modsi3+0x58>
 1014d10:	2900162e 	bgeu	r5,r4,1014d6c <__modsi3+0x6c>
 1014d14:	01800804 	movi	r6,32
 1014d18:	00c00044 	movi	r3,1
 1014d1c:	00000106 	br	1014d24 <__modsi3+0x24>
 1014d20:	30000a26 	beq	r6,zero,1014d4c <__modsi3+0x4c>
 1014d24:	294b883a 	add	r5,r5,r5
 1014d28:	31bfffc4 	addi	r6,r6,-1
 1014d2c:	18c7883a 	add	r3,r3,r3
 1014d30:	293ffb36 	bltu	r5,r4,1014d20 <__alt_data_end+0xff014d20>
 1014d34:	18000526 	beq	r3,zero,1014d4c <__modsi3+0x4c>
 1014d38:	1806d07a 	srli	r3,r3,1
 1014d3c:	11400136 	bltu	r2,r5,1014d44 <__modsi3+0x44>
 1014d40:	1145c83a 	sub	r2,r2,r5
 1014d44:	280ad07a 	srli	r5,r5,1
 1014d48:	183ffb1e 	bne	r3,zero,1014d38 <__alt_data_end+0xff014d38>
 1014d4c:	38000126 	beq	r7,zero,1014d54 <__modsi3+0x54>
 1014d50:	0085c83a 	sub	r2,zero,r2
 1014d54:	f800283a 	ret
 1014d58:	014bc83a 	sub	r5,zero,r5
 1014d5c:	003fec06 	br	1014d10 <__alt_data_end+0xff014d10>
 1014d60:	0109c83a 	sub	r4,zero,r4
 1014d64:	01c00044 	movi	r7,1
 1014d68:	003fe706 	br	1014d08 <__alt_data_end+0xff014d08>
 1014d6c:	00c00044 	movi	r3,1
 1014d70:	003ff106 	br	1014d38 <__alt_data_end+0xff014d38>

01014d74 <__udivsi3>:
 1014d74:	200d883a 	mov	r6,r4
 1014d78:	2900152e 	bgeu	r5,r4,1014dd0 <__udivsi3+0x5c>
 1014d7c:	28001416 	blt	r5,zero,1014dd0 <__udivsi3+0x5c>
 1014d80:	00800804 	movi	r2,32
 1014d84:	00c00044 	movi	r3,1
 1014d88:	00000206 	br	1014d94 <__udivsi3+0x20>
 1014d8c:	10000e26 	beq	r2,zero,1014dc8 <__udivsi3+0x54>
 1014d90:	28000516 	blt	r5,zero,1014da8 <__udivsi3+0x34>
 1014d94:	294b883a 	add	r5,r5,r5
 1014d98:	10bfffc4 	addi	r2,r2,-1
 1014d9c:	18c7883a 	add	r3,r3,r3
 1014da0:	293ffa36 	bltu	r5,r4,1014d8c <__alt_data_end+0xff014d8c>
 1014da4:	18000826 	beq	r3,zero,1014dc8 <__udivsi3+0x54>
 1014da8:	0005883a 	mov	r2,zero
 1014dac:	31400236 	bltu	r6,r5,1014db8 <__udivsi3+0x44>
 1014db0:	314dc83a 	sub	r6,r6,r5
 1014db4:	10c4b03a 	or	r2,r2,r3
 1014db8:	1806d07a 	srli	r3,r3,1
 1014dbc:	280ad07a 	srli	r5,r5,1
 1014dc0:	183ffa1e 	bne	r3,zero,1014dac <__alt_data_end+0xff014dac>
 1014dc4:	f800283a 	ret
 1014dc8:	0005883a 	mov	r2,zero
 1014dcc:	f800283a 	ret
 1014dd0:	00c00044 	movi	r3,1
 1014dd4:	003ff406 	br	1014da8 <__alt_data_end+0xff014da8>

01014dd8 <__umodsi3>:
 1014dd8:	2005883a 	mov	r2,r4
 1014ddc:	2900122e 	bgeu	r5,r4,1014e28 <__umodsi3+0x50>
 1014de0:	28001116 	blt	r5,zero,1014e28 <__umodsi3+0x50>
 1014de4:	01800804 	movi	r6,32
 1014de8:	00c00044 	movi	r3,1
 1014dec:	00000206 	br	1014df8 <__umodsi3+0x20>
 1014df0:	30000c26 	beq	r6,zero,1014e24 <__umodsi3+0x4c>
 1014df4:	28000516 	blt	r5,zero,1014e0c <__umodsi3+0x34>
 1014df8:	294b883a 	add	r5,r5,r5
 1014dfc:	31bfffc4 	addi	r6,r6,-1
 1014e00:	18c7883a 	add	r3,r3,r3
 1014e04:	293ffa36 	bltu	r5,r4,1014df0 <__alt_data_end+0xff014df0>
 1014e08:	18000626 	beq	r3,zero,1014e24 <__umodsi3+0x4c>
 1014e0c:	1806d07a 	srli	r3,r3,1
 1014e10:	11400136 	bltu	r2,r5,1014e18 <__umodsi3+0x40>
 1014e14:	1145c83a 	sub	r2,r2,r5
 1014e18:	280ad07a 	srli	r5,r5,1
 1014e1c:	183ffb1e 	bne	r3,zero,1014e0c <__alt_data_end+0xff014e0c>
 1014e20:	f800283a 	ret
 1014e24:	f800283a 	ret
 1014e28:	00c00044 	movi	r3,1
 1014e2c:	003ff706 	br	1014e0c <__alt_data_end+0xff014e0c>

01014e30 <__adddf3>:
 1014e30:	02c00434 	movhi	r11,16
 1014e34:	5affffc4 	addi	r11,r11,-1
 1014e38:	2806d7fa 	srli	r3,r5,31
 1014e3c:	2ad4703a 	and	r10,r5,r11
 1014e40:	3ad2703a 	and	r9,r7,r11
 1014e44:	3804d53a 	srli	r2,r7,20
 1014e48:	3018d77a 	srli	r12,r6,29
 1014e4c:	280ad53a 	srli	r5,r5,20
 1014e50:	501490fa 	slli	r10,r10,3
 1014e54:	2010d77a 	srli	r8,r4,29
 1014e58:	481290fa 	slli	r9,r9,3
 1014e5c:	380ed7fa 	srli	r7,r7,31
 1014e60:	defffb04 	addi	sp,sp,-20
 1014e64:	dc800215 	stw	r18,8(sp)
 1014e68:	dc400115 	stw	r17,4(sp)
 1014e6c:	dc000015 	stw	r16,0(sp)
 1014e70:	dfc00415 	stw	ra,16(sp)
 1014e74:	dcc00315 	stw	r19,12(sp)
 1014e78:	1c803fcc 	andi	r18,r3,255
 1014e7c:	2c01ffcc 	andi	r16,r5,2047
 1014e80:	5210b03a 	or	r8,r10,r8
 1014e84:	202290fa 	slli	r17,r4,3
 1014e88:	1081ffcc 	andi	r2,r2,2047
 1014e8c:	4b12b03a 	or	r9,r9,r12
 1014e90:	300c90fa 	slli	r6,r6,3
 1014e94:	91c07526 	beq	r18,r7,101506c <__adddf3+0x23c>
 1014e98:	8087c83a 	sub	r3,r16,r2
 1014e9c:	00c0ab0e 	bge	zero,r3,101514c <__adddf3+0x31c>
 1014ea0:	10002a1e 	bne	r2,zero,1014f4c <__adddf3+0x11c>
 1014ea4:	4984b03a 	or	r2,r9,r6
 1014ea8:	1000961e 	bne	r2,zero,1015104 <__adddf3+0x2d4>
 1014eac:	888001cc 	andi	r2,r17,7
 1014eb0:	10000726 	beq	r2,zero,1014ed0 <__adddf3+0xa0>
 1014eb4:	888003cc 	andi	r2,r17,15
 1014eb8:	00c00104 	movi	r3,4
 1014ebc:	10c00426 	beq	r2,r3,1014ed0 <__adddf3+0xa0>
 1014ec0:	88c7883a 	add	r3,r17,r3
 1014ec4:	1c63803a 	cmpltu	r17,r3,r17
 1014ec8:	4451883a 	add	r8,r8,r17
 1014ecc:	1823883a 	mov	r17,r3
 1014ed0:	4080202c 	andhi	r2,r8,128
 1014ed4:	10005926 	beq	r2,zero,101503c <__adddf3+0x20c>
 1014ed8:	84000044 	addi	r16,r16,1
 1014edc:	0081ffc4 	movi	r2,2047
 1014ee0:	8080ba26 	beq	r16,r2,10151cc <__adddf3+0x39c>
 1014ee4:	00bfe034 	movhi	r2,65408
 1014ee8:	10bfffc4 	addi	r2,r2,-1
 1014eec:	4090703a 	and	r8,r8,r2
 1014ef0:	4004977a 	slli	r2,r8,29
 1014ef4:	4010927a 	slli	r8,r8,9
 1014ef8:	8822d0fa 	srli	r17,r17,3
 1014efc:	8401ffcc 	andi	r16,r16,2047
 1014f00:	4010d33a 	srli	r8,r8,12
 1014f04:	9007883a 	mov	r3,r18
 1014f08:	1444b03a 	or	r2,r2,r17
 1014f0c:	8401ffcc 	andi	r16,r16,2047
 1014f10:	8020953a 	slli	r16,r16,20
 1014f14:	18c03fcc 	andi	r3,r3,255
 1014f18:	01000434 	movhi	r4,16
 1014f1c:	213fffc4 	addi	r4,r4,-1
 1014f20:	180697fa 	slli	r3,r3,31
 1014f24:	4110703a 	and	r8,r8,r4
 1014f28:	4410b03a 	or	r8,r8,r16
 1014f2c:	40c6b03a 	or	r3,r8,r3
 1014f30:	dfc00417 	ldw	ra,16(sp)
 1014f34:	dcc00317 	ldw	r19,12(sp)
 1014f38:	dc800217 	ldw	r18,8(sp)
 1014f3c:	dc400117 	ldw	r17,4(sp)
 1014f40:	dc000017 	ldw	r16,0(sp)
 1014f44:	dec00504 	addi	sp,sp,20
 1014f48:	f800283a 	ret
 1014f4c:	0081ffc4 	movi	r2,2047
 1014f50:	80bfd626 	beq	r16,r2,1014eac <__alt_data_end+0xff014eac>
 1014f54:	4a402034 	orhi	r9,r9,128
 1014f58:	00800e04 	movi	r2,56
 1014f5c:	10c09f16 	blt	r2,r3,10151dc <__adddf3+0x3ac>
 1014f60:	008007c4 	movi	r2,31
 1014f64:	10c0c216 	blt	r2,r3,1015270 <__adddf3+0x440>
 1014f68:	00800804 	movi	r2,32
 1014f6c:	10c5c83a 	sub	r2,r2,r3
 1014f70:	488a983a 	sll	r5,r9,r2
 1014f74:	30c8d83a 	srl	r4,r6,r3
 1014f78:	3084983a 	sll	r2,r6,r2
 1014f7c:	48c6d83a 	srl	r3,r9,r3
 1014f80:	290cb03a 	or	r6,r5,r4
 1014f84:	1004c03a 	cmpne	r2,r2,zero
 1014f88:	308cb03a 	or	r6,r6,r2
 1014f8c:	898dc83a 	sub	r6,r17,r6
 1014f90:	89a3803a 	cmpltu	r17,r17,r6
 1014f94:	40d1c83a 	sub	r8,r8,r3
 1014f98:	4451c83a 	sub	r8,r8,r17
 1014f9c:	3023883a 	mov	r17,r6
 1014fa0:	4080202c 	andhi	r2,r8,128
 1014fa4:	10002326 	beq	r2,zero,1015034 <__adddf3+0x204>
 1014fa8:	04c02034 	movhi	r19,128
 1014fac:	9cffffc4 	addi	r19,r19,-1
 1014fb0:	44e6703a 	and	r19,r8,r19
 1014fb4:	98007626 	beq	r19,zero,1015190 <__adddf3+0x360>
 1014fb8:	9809883a 	mov	r4,r19
 1014fbc:	10174340 	call	1017434 <__clzsi2>
 1014fc0:	10fffe04 	addi	r3,r2,-8
 1014fc4:	010007c4 	movi	r4,31
 1014fc8:	20c07716 	blt	r4,r3,10151a8 <__adddf3+0x378>
 1014fcc:	00800804 	movi	r2,32
 1014fd0:	10c5c83a 	sub	r2,r2,r3
 1014fd4:	8884d83a 	srl	r2,r17,r2
 1014fd8:	98d0983a 	sll	r8,r19,r3
 1014fdc:	88e2983a 	sll	r17,r17,r3
 1014fe0:	1204b03a 	or	r2,r2,r8
 1014fe4:	1c007416 	blt	r3,r16,10151b8 <__adddf3+0x388>
 1014fe8:	1c21c83a 	sub	r16,r3,r16
 1014fec:	82000044 	addi	r8,r16,1
 1014ff0:	00c007c4 	movi	r3,31
 1014ff4:	1a009116 	blt	r3,r8,101523c <__adddf3+0x40c>
 1014ff8:	00c00804 	movi	r3,32
 1014ffc:	1a07c83a 	sub	r3,r3,r8
 1015000:	8a08d83a 	srl	r4,r17,r8
 1015004:	88e2983a 	sll	r17,r17,r3
 1015008:	10c6983a 	sll	r3,r2,r3
 101500c:	1210d83a 	srl	r8,r2,r8
 1015010:	8804c03a 	cmpne	r2,r17,zero
 1015014:	1906b03a 	or	r3,r3,r4
 1015018:	18a2b03a 	or	r17,r3,r2
 101501c:	0021883a 	mov	r16,zero
 1015020:	003fa206 	br	1014eac <__alt_data_end+0xff014eac>
 1015024:	1890b03a 	or	r8,r3,r2
 1015028:	40017d26 	beq	r8,zero,1015620 <__adddf3+0x7f0>
 101502c:	1011883a 	mov	r8,r2
 1015030:	1823883a 	mov	r17,r3
 1015034:	888001cc 	andi	r2,r17,7
 1015038:	103f9e1e 	bne	r2,zero,1014eb4 <__alt_data_end+0xff014eb4>
 101503c:	4004977a 	slli	r2,r8,29
 1015040:	8822d0fa 	srli	r17,r17,3
 1015044:	4010d0fa 	srli	r8,r8,3
 1015048:	9007883a 	mov	r3,r18
 101504c:	1444b03a 	or	r2,r2,r17
 1015050:	0101ffc4 	movi	r4,2047
 1015054:	81002426 	beq	r16,r4,10150e8 <__adddf3+0x2b8>
 1015058:	8120703a 	and	r16,r16,r4
 101505c:	01000434 	movhi	r4,16
 1015060:	213fffc4 	addi	r4,r4,-1
 1015064:	4110703a 	and	r8,r8,r4
 1015068:	003fa806 	br	1014f0c <__alt_data_end+0xff014f0c>
 101506c:	8089c83a 	sub	r4,r16,r2
 1015070:	01005e0e 	bge	zero,r4,10151ec <__adddf3+0x3bc>
 1015074:	10002b26 	beq	r2,zero,1015124 <__adddf3+0x2f4>
 1015078:	0081ffc4 	movi	r2,2047
 101507c:	80bf8b26 	beq	r16,r2,1014eac <__alt_data_end+0xff014eac>
 1015080:	4a402034 	orhi	r9,r9,128
 1015084:	00800e04 	movi	r2,56
 1015088:	1100a40e 	bge	r2,r4,101531c <__adddf3+0x4ec>
 101508c:	498cb03a 	or	r6,r9,r6
 1015090:	300ac03a 	cmpne	r5,r6,zero
 1015094:	0013883a 	mov	r9,zero
 1015098:	2c4b883a 	add	r5,r5,r17
 101509c:	2c63803a 	cmpltu	r17,r5,r17
 10150a0:	4a11883a 	add	r8,r9,r8
 10150a4:	8a11883a 	add	r8,r17,r8
 10150a8:	2823883a 	mov	r17,r5
 10150ac:	4080202c 	andhi	r2,r8,128
 10150b0:	103fe026 	beq	r2,zero,1015034 <__alt_data_end+0xff015034>
 10150b4:	84000044 	addi	r16,r16,1
 10150b8:	0081ffc4 	movi	r2,2047
 10150bc:	8080d226 	beq	r16,r2,1015408 <__adddf3+0x5d8>
 10150c0:	00bfe034 	movhi	r2,65408
 10150c4:	10bfffc4 	addi	r2,r2,-1
 10150c8:	4090703a 	and	r8,r8,r2
 10150cc:	880ad07a 	srli	r5,r17,1
 10150d0:	400897fa 	slli	r4,r8,31
 10150d4:	88c0004c 	andi	r3,r17,1
 10150d8:	28e2b03a 	or	r17,r5,r3
 10150dc:	4010d07a 	srli	r8,r8,1
 10150e0:	2462b03a 	or	r17,r4,r17
 10150e4:	003f7106 	br	1014eac <__alt_data_end+0xff014eac>
 10150e8:	4088b03a 	or	r4,r8,r2
 10150ec:	20014526 	beq	r4,zero,1015604 <__adddf3+0x7d4>
 10150f0:	01000434 	movhi	r4,16
 10150f4:	42000234 	orhi	r8,r8,8
 10150f8:	213fffc4 	addi	r4,r4,-1
 10150fc:	4110703a 	and	r8,r8,r4
 1015100:	003f8206 	br	1014f0c <__alt_data_end+0xff014f0c>
 1015104:	18ffffc4 	addi	r3,r3,-1
 1015108:	1800491e 	bne	r3,zero,1015230 <__adddf3+0x400>
 101510c:	898bc83a 	sub	r5,r17,r6
 1015110:	8963803a 	cmpltu	r17,r17,r5
 1015114:	4251c83a 	sub	r8,r8,r9
 1015118:	4451c83a 	sub	r8,r8,r17
 101511c:	2823883a 	mov	r17,r5
 1015120:	003f9f06 	br	1014fa0 <__alt_data_end+0xff014fa0>
 1015124:	4984b03a 	or	r2,r9,r6
 1015128:	103f6026 	beq	r2,zero,1014eac <__alt_data_end+0xff014eac>
 101512c:	213fffc4 	addi	r4,r4,-1
 1015130:	2000931e 	bne	r4,zero,1015380 <__adddf3+0x550>
 1015134:	898d883a 	add	r6,r17,r6
 1015138:	3463803a 	cmpltu	r17,r6,r17
 101513c:	4251883a 	add	r8,r8,r9
 1015140:	8a11883a 	add	r8,r17,r8
 1015144:	3023883a 	mov	r17,r6
 1015148:	003fd806 	br	10150ac <__alt_data_end+0xff0150ac>
 101514c:	1800541e 	bne	r3,zero,10152a0 <__adddf3+0x470>
 1015150:	80800044 	addi	r2,r16,1
 1015154:	1081ffcc 	andi	r2,r2,2047
 1015158:	00c00044 	movi	r3,1
 101515c:	1880a00e 	bge	r3,r2,10153e0 <__adddf3+0x5b0>
 1015160:	8989c83a 	sub	r4,r17,r6
 1015164:	8905803a 	cmpltu	r2,r17,r4
 1015168:	4267c83a 	sub	r19,r8,r9
 101516c:	98a7c83a 	sub	r19,r19,r2
 1015170:	9880202c 	andhi	r2,r19,128
 1015174:	10006326 	beq	r2,zero,1015304 <__adddf3+0x4d4>
 1015178:	3463c83a 	sub	r17,r6,r17
 101517c:	4a07c83a 	sub	r3,r9,r8
 1015180:	344d803a 	cmpltu	r6,r6,r17
 1015184:	19a7c83a 	sub	r19,r3,r6
 1015188:	3825883a 	mov	r18,r7
 101518c:	983f8a1e 	bne	r19,zero,1014fb8 <__alt_data_end+0xff014fb8>
 1015190:	8809883a 	mov	r4,r17
 1015194:	10174340 	call	1017434 <__clzsi2>
 1015198:	10800804 	addi	r2,r2,32
 101519c:	10fffe04 	addi	r3,r2,-8
 10151a0:	010007c4 	movi	r4,31
 10151a4:	20ff890e 	bge	r4,r3,1014fcc <__alt_data_end+0xff014fcc>
 10151a8:	10bff604 	addi	r2,r2,-40
 10151ac:	8884983a 	sll	r2,r17,r2
 10151b0:	0023883a 	mov	r17,zero
 10151b4:	1c3f8c0e 	bge	r3,r16,1014fe8 <__alt_data_end+0xff014fe8>
 10151b8:	023fe034 	movhi	r8,65408
 10151bc:	423fffc4 	addi	r8,r8,-1
 10151c0:	80e1c83a 	sub	r16,r16,r3
 10151c4:	1210703a 	and	r8,r2,r8
 10151c8:	003f3806 	br	1014eac <__alt_data_end+0xff014eac>
 10151cc:	9007883a 	mov	r3,r18
 10151d0:	0011883a 	mov	r8,zero
 10151d4:	0005883a 	mov	r2,zero
 10151d8:	003f4c06 	br	1014f0c <__alt_data_end+0xff014f0c>
 10151dc:	498cb03a 	or	r6,r9,r6
 10151e0:	300cc03a 	cmpne	r6,r6,zero
 10151e4:	0007883a 	mov	r3,zero
 10151e8:	003f6806 	br	1014f8c <__alt_data_end+0xff014f8c>
 10151ec:	20009c1e 	bne	r4,zero,1015460 <__adddf3+0x630>
 10151f0:	80800044 	addi	r2,r16,1
 10151f4:	1141ffcc 	andi	r5,r2,2047
 10151f8:	01000044 	movi	r4,1
 10151fc:	2140670e 	bge	r4,r5,101539c <__adddf3+0x56c>
 1015200:	0101ffc4 	movi	r4,2047
 1015204:	11007f26 	beq	r2,r4,1015404 <__adddf3+0x5d4>
 1015208:	898d883a 	add	r6,r17,r6
 101520c:	4247883a 	add	r3,r8,r9
 1015210:	3451803a 	cmpltu	r8,r6,r17
 1015214:	40d1883a 	add	r8,r8,r3
 1015218:	402297fa 	slli	r17,r8,31
 101521c:	300cd07a 	srli	r6,r6,1
 1015220:	4010d07a 	srli	r8,r8,1
 1015224:	1021883a 	mov	r16,r2
 1015228:	89a2b03a 	or	r17,r17,r6
 101522c:	003f1f06 	br	1014eac <__alt_data_end+0xff014eac>
 1015230:	0081ffc4 	movi	r2,2047
 1015234:	80bf481e 	bne	r16,r2,1014f58 <__alt_data_end+0xff014f58>
 1015238:	003f1c06 	br	1014eac <__alt_data_end+0xff014eac>
 101523c:	843ff844 	addi	r16,r16,-31
 1015240:	01000804 	movi	r4,32
 1015244:	1406d83a 	srl	r3,r2,r16
 1015248:	41005026 	beq	r8,r4,101538c <__adddf3+0x55c>
 101524c:	01001004 	movi	r4,64
 1015250:	2211c83a 	sub	r8,r4,r8
 1015254:	1204983a 	sll	r2,r2,r8
 1015258:	88a2b03a 	or	r17,r17,r2
 101525c:	8822c03a 	cmpne	r17,r17,zero
 1015260:	1c62b03a 	or	r17,r3,r17
 1015264:	0011883a 	mov	r8,zero
 1015268:	0021883a 	mov	r16,zero
 101526c:	003f7106 	br	1015034 <__alt_data_end+0xff015034>
 1015270:	193ff804 	addi	r4,r3,-32
 1015274:	00800804 	movi	r2,32
 1015278:	4908d83a 	srl	r4,r9,r4
 101527c:	18804526 	beq	r3,r2,1015394 <__adddf3+0x564>
 1015280:	00801004 	movi	r2,64
 1015284:	10c5c83a 	sub	r2,r2,r3
 1015288:	4886983a 	sll	r3,r9,r2
 101528c:	198cb03a 	or	r6,r3,r6
 1015290:	300cc03a 	cmpne	r6,r6,zero
 1015294:	218cb03a 	or	r6,r4,r6
 1015298:	0007883a 	mov	r3,zero
 101529c:	003f3b06 	br	1014f8c <__alt_data_end+0xff014f8c>
 10152a0:	80002a26 	beq	r16,zero,101534c <__adddf3+0x51c>
 10152a4:	0101ffc4 	movi	r4,2047
 10152a8:	11006826 	beq	r2,r4,101544c <__adddf3+0x61c>
 10152ac:	00c7c83a 	sub	r3,zero,r3
 10152b0:	42002034 	orhi	r8,r8,128
 10152b4:	01000e04 	movi	r4,56
 10152b8:	20c07c16 	blt	r4,r3,10154ac <__adddf3+0x67c>
 10152bc:	010007c4 	movi	r4,31
 10152c0:	20c0da16 	blt	r4,r3,101562c <__adddf3+0x7fc>
 10152c4:	01000804 	movi	r4,32
 10152c8:	20c9c83a 	sub	r4,r4,r3
 10152cc:	4114983a 	sll	r10,r8,r4
 10152d0:	88cad83a 	srl	r5,r17,r3
 10152d4:	8908983a 	sll	r4,r17,r4
 10152d8:	40c6d83a 	srl	r3,r8,r3
 10152dc:	5162b03a 	or	r17,r10,r5
 10152e0:	2008c03a 	cmpne	r4,r4,zero
 10152e4:	8922b03a 	or	r17,r17,r4
 10152e8:	3463c83a 	sub	r17,r6,r17
 10152ec:	48c7c83a 	sub	r3,r9,r3
 10152f0:	344d803a 	cmpltu	r6,r6,r17
 10152f4:	1991c83a 	sub	r8,r3,r6
 10152f8:	1021883a 	mov	r16,r2
 10152fc:	3825883a 	mov	r18,r7
 1015300:	003f2706 	br	1014fa0 <__alt_data_end+0xff014fa0>
 1015304:	24d0b03a 	or	r8,r4,r19
 1015308:	40001b1e 	bne	r8,zero,1015378 <__adddf3+0x548>
 101530c:	0005883a 	mov	r2,zero
 1015310:	0007883a 	mov	r3,zero
 1015314:	0021883a 	mov	r16,zero
 1015318:	003f4d06 	br	1015050 <__alt_data_end+0xff015050>
 101531c:	008007c4 	movi	r2,31
 1015320:	11003c16 	blt	r2,r4,1015414 <__adddf3+0x5e4>
 1015324:	00800804 	movi	r2,32
 1015328:	1105c83a 	sub	r2,r2,r4
 101532c:	488e983a 	sll	r7,r9,r2
 1015330:	310ad83a 	srl	r5,r6,r4
 1015334:	3084983a 	sll	r2,r6,r2
 1015338:	4912d83a 	srl	r9,r9,r4
 101533c:	394ab03a 	or	r5,r7,r5
 1015340:	1004c03a 	cmpne	r2,r2,zero
 1015344:	288ab03a 	or	r5,r5,r2
 1015348:	003f5306 	br	1015098 <__alt_data_end+0xff015098>
 101534c:	4448b03a 	or	r4,r8,r17
 1015350:	20003e26 	beq	r4,zero,101544c <__adddf3+0x61c>
 1015354:	00c6303a 	nor	r3,zero,r3
 1015358:	18003a1e 	bne	r3,zero,1015444 <__adddf3+0x614>
 101535c:	3463c83a 	sub	r17,r6,r17
 1015360:	4a07c83a 	sub	r3,r9,r8
 1015364:	344d803a 	cmpltu	r6,r6,r17
 1015368:	1991c83a 	sub	r8,r3,r6
 101536c:	1021883a 	mov	r16,r2
 1015370:	3825883a 	mov	r18,r7
 1015374:	003f0a06 	br	1014fa0 <__alt_data_end+0xff014fa0>
 1015378:	2023883a 	mov	r17,r4
 101537c:	003f0d06 	br	1014fb4 <__alt_data_end+0xff014fb4>
 1015380:	0081ffc4 	movi	r2,2047
 1015384:	80bf3f1e 	bne	r16,r2,1015084 <__alt_data_end+0xff015084>
 1015388:	003ec806 	br	1014eac <__alt_data_end+0xff014eac>
 101538c:	0005883a 	mov	r2,zero
 1015390:	003fb106 	br	1015258 <__alt_data_end+0xff015258>
 1015394:	0007883a 	mov	r3,zero
 1015398:	003fbc06 	br	101528c <__alt_data_end+0xff01528c>
 101539c:	4444b03a 	or	r2,r8,r17
 10153a0:	8000871e 	bne	r16,zero,10155c0 <__adddf3+0x790>
 10153a4:	1000ba26 	beq	r2,zero,1015690 <__adddf3+0x860>
 10153a8:	4984b03a 	or	r2,r9,r6
 10153ac:	103ebf26 	beq	r2,zero,1014eac <__alt_data_end+0xff014eac>
 10153b0:	8985883a 	add	r2,r17,r6
 10153b4:	4247883a 	add	r3,r8,r9
 10153b8:	1451803a 	cmpltu	r8,r2,r17
 10153bc:	40d1883a 	add	r8,r8,r3
 10153c0:	40c0202c 	andhi	r3,r8,128
 10153c4:	1023883a 	mov	r17,r2
 10153c8:	183f1a26 	beq	r3,zero,1015034 <__alt_data_end+0xff015034>
 10153cc:	00bfe034 	movhi	r2,65408
 10153d0:	10bfffc4 	addi	r2,r2,-1
 10153d4:	2021883a 	mov	r16,r4
 10153d8:	4090703a 	and	r8,r8,r2
 10153dc:	003eb306 	br	1014eac <__alt_data_end+0xff014eac>
 10153e0:	4444b03a 	or	r2,r8,r17
 10153e4:	8000291e 	bne	r16,zero,101548c <__adddf3+0x65c>
 10153e8:	10004b1e 	bne	r2,zero,1015518 <__adddf3+0x6e8>
 10153ec:	4990b03a 	or	r8,r9,r6
 10153f0:	40008b26 	beq	r8,zero,1015620 <__adddf3+0x7f0>
 10153f4:	4811883a 	mov	r8,r9
 10153f8:	3023883a 	mov	r17,r6
 10153fc:	3825883a 	mov	r18,r7
 1015400:	003eaa06 	br	1014eac <__alt_data_end+0xff014eac>
 1015404:	1021883a 	mov	r16,r2
 1015408:	0011883a 	mov	r8,zero
 101540c:	0005883a 	mov	r2,zero
 1015410:	003f0f06 	br	1015050 <__alt_data_end+0xff015050>
 1015414:	217ff804 	addi	r5,r4,-32
 1015418:	00800804 	movi	r2,32
 101541c:	494ad83a 	srl	r5,r9,r5
 1015420:	20807d26 	beq	r4,r2,1015618 <__adddf3+0x7e8>
 1015424:	00801004 	movi	r2,64
 1015428:	1109c83a 	sub	r4,r2,r4
 101542c:	4912983a 	sll	r9,r9,r4
 1015430:	498cb03a 	or	r6,r9,r6
 1015434:	300cc03a 	cmpne	r6,r6,zero
 1015438:	298ab03a 	or	r5,r5,r6
 101543c:	0013883a 	mov	r9,zero
 1015440:	003f1506 	br	1015098 <__alt_data_end+0xff015098>
 1015444:	0101ffc4 	movi	r4,2047
 1015448:	113f9a1e 	bne	r2,r4,10152b4 <__alt_data_end+0xff0152b4>
 101544c:	4811883a 	mov	r8,r9
 1015450:	3023883a 	mov	r17,r6
 1015454:	1021883a 	mov	r16,r2
 1015458:	3825883a 	mov	r18,r7
 101545c:	003e9306 	br	1014eac <__alt_data_end+0xff014eac>
 1015460:	8000161e 	bne	r16,zero,10154bc <__adddf3+0x68c>
 1015464:	444ab03a 	or	r5,r8,r17
 1015468:	28005126 	beq	r5,zero,10155b0 <__adddf3+0x780>
 101546c:	0108303a 	nor	r4,zero,r4
 1015470:	20004d1e 	bne	r4,zero,10155a8 <__adddf3+0x778>
 1015474:	89a3883a 	add	r17,r17,r6
 1015478:	4253883a 	add	r9,r8,r9
 101547c:	898d803a 	cmpltu	r6,r17,r6
 1015480:	3251883a 	add	r8,r6,r9
 1015484:	1021883a 	mov	r16,r2
 1015488:	003f0806 	br	10150ac <__alt_data_end+0xff0150ac>
 101548c:	1000301e 	bne	r2,zero,1015550 <__adddf3+0x720>
 1015490:	4984b03a 	or	r2,r9,r6
 1015494:	10007126 	beq	r2,zero,101565c <__adddf3+0x82c>
 1015498:	4811883a 	mov	r8,r9
 101549c:	3023883a 	mov	r17,r6
 10154a0:	3825883a 	mov	r18,r7
 10154a4:	0401ffc4 	movi	r16,2047
 10154a8:	003e8006 	br	1014eac <__alt_data_end+0xff014eac>
 10154ac:	4462b03a 	or	r17,r8,r17
 10154b0:	8822c03a 	cmpne	r17,r17,zero
 10154b4:	0007883a 	mov	r3,zero
 10154b8:	003f8b06 	br	10152e8 <__alt_data_end+0xff0152e8>
 10154bc:	0141ffc4 	movi	r5,2047
 10154c0:	11403b26 	beq	r2,r5,10155b0 <__adddf3+0x780>
 10154c4:	0109c83a 	sub	r4,zero,r4
 10154c8:	42002034 	orhi	r8,r8,128
 10154cc:	01400e04 	movi	r5,56
 10154d0:	29006716 	blt	r5,r4,1015670 <__adddf3+0x840>
 10154d4:	014007c4 	movi	r5,31
 10154d8:	29007016 	blt	r5,r4,101569c <__adddf3+0x86c>
 10154dc:	01400804 	movi	r5,32
 10154e0:	290bc83a 	sub	r5,r5,r4
 10154e4:	4154983a 	sll	r10,r8,r5
 10154e8:	890ed83a 	srl	r7,r17,r4
 10154ec:	894a983a 	sll	r5,r17,r5
 10154f0:	4108d83a 	srl	r4,r8,r4
 10154f4:	51e2b03a 	or	r17,r10,r7
 10154f8:	280ac03a 	cmpne	r5,r5,zero
 10154fc:	8962b03a 	or	r17,r17,r5
 1015500:	89a3883a 	add	r17,r17,r6
 1015504:	2253883a 	add	r9,r4,r9
 1015508:	898d803a 	cmpltu	r6,r17,r6
 101550c:	3251883a 	add	r8,r6,r9
 1015510:	1021883a 	mov	r16,r2
 1015514:	003ee506 	br	10150ac <__alt_data_end+0xff0150ac>
 1015518:	4984b03a 	or	r2,r9,r6
 101551c:	103e6326 	beq	r2,zero,1014eac <__alt_data_end+0xff014eac>
 1015520:	8987c83a 	sub	r3,r17,r6
 1015524:	88c9803a 	cmpltu	r4,r17,r3
 1015528:	4245c83a 	sub	r2,r8,r9
 101552c:	1105c83a 	sub	r2,r2,r4
 1015530:	1100202c 	andhi	r4,r2,128
 1015534:	203ebb26 	beq	r4,zero,1015024 <__alt_data_end+0xff015024>
 1015538:	3463c83a 	sub	r17,r6,r17
 101553c:	4a07c83a 	sub	r3,r9,r8
 1015540:	344d803a 	cmpltu	r6,r6,r17
 1015544:	1991c83a 	sub	r8,r3,r6
 1015548:	3825883a 	mov	r18,r7
 101554c:	003e5706 	br	1014eac <__alt_data_end+0xff014eac>
 1015550:	4984b03a 	or	r2,r9,r6
 1015554:	10002e26 	beq	r2,zero,1015610 <__adddf3+0x7e0>
 1015558:	4004d0fa 	srli	r2,r8,3
 101555c:	8822d0fa 	srli	r17,r17,3
 1015560:	4010977a 	slli	r8,r8,29
 1015564:	10c0022c 	andhi	r3,r2,8
 1015568:	4462b03a 	or	r17,r8,r17
 101556c:	18000826 	beq	r3,zero,1015590 <__adddf3+0x760>
 1015570:	4808d0fa 	srli	r4,r9,3
 1015574:	20c0022c 	andhi	r3,r4,8
 1015578:	1800051e 	bne	r3,zero,1015590 <__adddf3+0x760>
 101557c:	300cd0fa 	srli	r6,r6,3
 1015580:	4806977a 	slli	r3,r9,29
 1015584:	2005883a 	mov	r2,r4
 1015588:	3825883a 	mov	r18,r7
 101558c:	19a2b03a 	or	r17,r3,r6
 1015590:	8810d77a 	srli	r8,r17,29
 1015594:	100490fa 	slli	r2,r2,3
 1015598:	882290fa 	slli	r17,r17,3
 101559c:	0401ffc4 	movi	r16,2047
 10155a0:	4090b03a 	or	r8,r8,r2
 10155a4:	003e4106 	br	1014eac <__alt_data_end+0xff014eac>
 10155a8:	0141ffc4 	movi	r5,2047
 10155ac:	117fc71e 	bne	r2,r5,10154cc <__alt_data_end+0xff0154cc>
 10155b0:	4811883a 	mov	r8,r9
 10155b4:	3023883a 	mov	r17,r6
 10155b8:	1021883a 	mov	r16,r2
 10155bc:	003e3b06 	br	1014eac <__alt_data_end+0xff014eac>
 10155c0:	10002f26 	beq	r2,zero,1015680 <__adddf3+0x850>
 10155c4:	4984b03a 	or	r2,r9,r6
 10155c8:	10001126 	beq	r2,zero,1015610 <__adddf3+0x7e0>
 10155cc:	4004d0fa 	srli	r2,r8,3
 10155d0:	8822d0fa 	srli	r17,r17,3
 10155d4:	4010977a 	slli	r8,r8,29
 10155d8:	10c0022c 	andhi	r3,r2,8
 10155dc:	4462b03a 	or	r17,r8,r17
 10155e0:	183feb26 	beq	r3,zero,1015590 <__alt_data_end+0xff015590>
 10155e4:	4808d0fa 	srli	r4,r9,3
 10155e8:	20c0022c 	andhi	r3,r4,8
 10155ec:	183fe81e 	bne	r3,zero,1015590 <__alt_data_end+0xff015590>
 10155f0:	300cd0fa 	srli	r6,r6,3
 10155f4:	4806977a 	slli	r3,r9,29
 10155f8:	2005883a 	mov	r2,r4
 10155fc:	19a2b03a 	or	r17,r3,r6
 1015600:	003fe306 	br	1015590 <__alt_data_end+0xff015590>
 1015604:	0011883a 	mov	r8,zero
 1015608:	0005883a 	mov	r2,zero
 101560c:	003e3f06 	br	1014f0c <__alt_data_end+0xff014f0c>
 1015610:	0401ffc4 	movi	r16,2047
 1015614:	003e2506 	br	1014eac <__alt_data_end+0xff014eac>
 1015618:	0013883a 	mov	r9,zero
 101561c:	003f8406 	br	1015430 <__alt_data_end+0xff015430>
 1015620:	0005883a 	mov	r2,zero
 1015624:	0007883a 	mov	r3,zero
 1015628:	003e8906 	br	1015050 <__alt_data_end+0xff015050>
 101562c:	197ff804 	addi	r5,r3,-32
 1015630:	01000804 	movi	r4,32
 1015634:	414ad83a 	srl	r5,r8,r5
 1015638:	19002426 	beq	r3,r4,10156cc <__adddf3+0x89c>
 101563c:	01001004 	movi	r4,64
 1015640:	20c7c83a 	sub	r3,r4,r3
 1015644:	40c6983a 	sll	r3,r8,r3
 1015648:	1c46b03a 	or	r3,r3,r17
 101564c:	1806c03a 	cmpne	r3,r3,zero
 1015650:	28e2b03a 	or	r17,r5,r3
 1015654:	0007883a 	mov	r3,zero
 1015658:	003f2306 	br	10152e8 <__alt_data_end+0xff0152e8>
 101565c:	0007883a 	mov	r3,zero
 1015660:	5811883a 	mov	r8,r11
 1015664:	00bfffc4 	movi	r2,-1
 1015668:	0401ffc4 	movi	r16,2047
 101566c:	003e7806 	br	1015050 <__alt_data_end+0xff015050>
 1015670:	4462b03a 	or	r17,r8,r17
 1015674:	8822c03a 	cmpne	r17,r17,zero
 1015678:	0009883a 	mov	r4,zero
 101567c:	003fa006 	br	1015500 <__alt_data_end+0xff015500>
 1015680:	4811883a 	mov	r8,r9
 1015684:	3023883a 	mov	r17,r6
 1015688:	0401ffc4 	movi	r16,2047
 101568c:	003e0706 	br	1014eac <__alt_data_end+0xff014eac>
 1015690:	4811883a 	mov	r8,r9
 1015694:	3023883a 	mov	r17,r6
 1015698:	003e0406 	br	1014eac <__alt_data_end+0xff014eac>
 101569c:	21fff804 	addi	r7,r4,-32
 10156a0:	01400804 	movi	r5,32
 10156a4:	41ced83a 	srl	r7,r8,r7
 10156a8:	21400a26 	beq	r4,r5,10156d4 <__adddf3+0x8a4>
 10156ac:	01401004 	movi	r5,64
 10156b0:	2909c83a 	sub	r4,r5,r4
 10156b4:	4108983a 	sll	r4,r8,r4
 10156b8:	2448b03a 	or	r4,r4,r17
 10156bc:	2008c03a 	cmpne	r4,r4,zero
 10156c0:	3922b03a 	or	r17,r7,r4
 10156c4:	0009883a 	mov	r4,zero
 10156c8:	003f8d06 	br	1015500 <__alt_data_end+0xff015500>
 10156cc:	0007883a 	mov	r3,zero
 10156d0:	003fdd06 	br	1015648 <__alt_data_end+0xff015648>
 10156d4:	0009883a 	mov	r4,zero
 10156d8:	003ff706 	br	10156b8 <__alt_data_end+0xff0156b8>

010156dc <__divdf3>:
 10156dc:	defff204 	addi	sp,sp,-56
 10156e0:	dd400915 	stw	r21,36(sp)
 10156e4:	282ad53a 	srli	r21,r5,20
 10156e8:	dd000815 	stw	r20,32(sp)
 10156ec:	2828d7fa 	srli	r20,r5,31
 10156f0:	dc000415 	stw	r16,16(sp)
 10156f4:	04000434 	movhi	r16,16
 10156f8:	df000c15 	stw	fp,48(sp)
 10156fc:	843fffc4 	addi	r16,r16,-1
 1015700:	dfc00d15 	stw	ra,52(sp)
 1015704:	ddc00b15 	stw	r23,44(sp)
 1015708:	dd800a15 	stw	r22,40(sp)
 101570c:	dcc00715 	stw	r19,28(sp)
 1015710:	dc800615 	stw	r18,24(sp)
 1015714:	dc400515 	stw	r17,20(sp)
 1015718:	ad41ffcc 	andi	r21,r21,2047
 101571c:	2c20703a 	and	r16,r5,r16
 1015720:	a7003fcc 	andi	fp,r20,255
 1015724:	a8006126 	beq	r21,zero,10158ac <__divdf3+0x1d0>
 1015728:	0081ffc4 	movi	r2,2047
 101572c:	2025883a 	mov	r18,r4
 1015730:	a8803726 	beq	r21,r2,1015810 <__divdf3+0x134>
 1015734:	80800434 	orhi	r2,r16,16
 1015738:	100490fa 	slli	r2,r2,3
 101573c:	2020d77a 	srli	r16,r4,29
 1015740:	202490fa 	slli	r18,r4,3
 1015744:	ad7f0044 	addi	r21,r21,-1023
 1015748:	80a0b03a 	or	r16,r16,r2
 101574c:	0027883a 	mov	r19,zero
 1015750:	0013883a 	mov	r9,zero
 1015754:	3804d53a 	srli	r2,r7,20
 1015758:	382cd7fa 	srli	r22,r7,31
 101575c:	04400434 	movhi	r17,16
 1015760:	8c7fffc4 	addi	r17,r17,-1
 1015764:	1081ffcc 	andi	r2,r2,2047
 1015768:	3011883a 	mov	r8,r6
 101576c:	3c62703a 	and	r17,r7,r17
 1015770:	b5c03fcc 	andi	r23,r22,255
 1015774:	10006c26 	beq	r2,zero,1015928 <__divdf3+0x24c>
 1015778:	00c1ffc4 	movi	r3,2047
 101577c:	10c06426 	beq	r2,r3,1015910 <__divdf3+0x234>
 1015780:	88c00434 	orhi	r3,r17,16
 1015784:	180690fa 	slli	r3,r3,3
 1015788:	3022d77a 	srli	r17,r6,29
 101578c:	301090fa 	slli	r8,r6,3
 1015790:	10bf0044 	addi	r2,r2,-1023
 1015794:	88e2b03a 	or	r17,r17,r3
 1015798:	000f883a 	mov	r7,zero
 101579c:	a58cf03a 	xor	r6,r20,r22
 10157a0:	3cc8b03a 	or	r4,r7,r19
 10157a4:	a8abc83a 	sub	r21,r21,r2
 10157a8:	008003c4 	movi	r2,15
 10157ac:	3007883a 	mov	r3,r6
 10157b0:	34c03fcc 	andi	r19,r6,255
 10157b4:	11009036 	bltu	r2,r4,10159f8 <__divdf3+0x31c>
 10157b8:	200890ba 	slli	r4,r4,2
 10157bc:	00804074 	movhi	r2,257
 10157c0:	1095f404 	addi	r2,r2,22480
 10157c4:	2089883a 	add	r4,r4,r2
 10157c8:	20800017 	ldw	r2,0(r4)
 10157cc:	1000683a 	jmp	r2
 10157d0:	010159f8 	rdprs	r4,zero,1383
 10157d4:	01015848 	cmpgei	r4,zero,1377
 10157d8:	010159e8 	cmpgeui	r4,zero,1383
 10157dc:	0101583c 	xorhi	r4,zero,1376
 10157e0:	010159e8 	cmpgeui	r4,zero,1383
 10157e4:	010159bc 	xorhi	r4,zero,1382
 10157e8:	010159e8 	cmpgeui	r4,zero,1383
 10157ec:	0101583c 	xorhi	r4,zero,1376
 10157f0:	01015848 	cmpgei	r4,zero,1377
 10157f4:	01015848 	cmpgei	r4,zero,1377
 10157f8:	010159bc 	xorhi	r4,zero,1382
 10157fc:	0101583c 	xorhi	r4,zero,1376
 1015800:	0101582c 	andhi	r4,zero,1376
 1015804:	0101582c 	andhi	r4,zero,1376
 1015808:	0101582c 	andhi	r4,zero,1376
 101580c:	01015cdc 	xori	r4,zero,1395
 1015810:	2404b03a 	or	r2,r4,r16
 1015814:	1000661e 	bne	r2,zero,10159b0 <__divdf3+0x2d4>
 1015818:	04c00204 	movi	r19,8
 101581c:	0021883a 	mov	r16,zero
 1015820:	0025883a 	mov	r18,zero
 1015824:	02400084 	movi	r9,2
 1015828:	003fca06 	br	1015754 <__alt_data_end+0xff015754>
 101582c:	8023883a 	mov	r17,r16
 1015830:	9011883a 	mov	r8,r18
 1015834:	e02f883a 	mov	r23,fp
 1015838:	480f883a 	mov	r7,r9
 101583c:	00800084 	movi	r2,2
 1015840:	3881311e 	bne	r7,r2,1015d08 <__divdf3+0x62c>
 1015844:	b827883a 	mov	r19,r23
 1015848:	98c0004c 	andi	r3,r19,1
 101584c:	0081ffc4 	movi	r2,2047
 1015850:	000b883a 	mov	r5,zero
 1015854:	0025883a 	mov	r18,zero
 1015858:	1004953a 	slli	r2,r2,20
 101585c:	18c03fcc 	andi	r3,r3,255
 1015860:	04400434 	movhi	r17,16
 1015864:	8c7fffc4 	addi	r17,r17,-1
 1015868:	180697fa 	slli	r3,r3,31
 101586c:	2c4a703a 	and	r5,r5,r17
 1015870:	288ab03a 	or	r5,r5,r2
 1015874:	28c6b03a 	or	r3,r5,r3
 1015878:	9005883a 	mov	r2,r18
 101587c:	dfc00d17 	ldw	ra,52(sp)
 1015880:	df000c17 	ldw	fp,48(sp)
 1015884:	ddc00b17 	ldw	r23,44(sp)
 1015888:	dd800a17 	ldw	r22,40(sp)
 101588c:	dd400917 	ldw	r21,36(sp)
 1015890:	dd000817 	ldw	r20,32(sp)
 1015894:	dcc00717 	ldw	r19,28(sp)
 1015898:	dc800617 	ldw	r18,24(sp)
 101589c:	dc400517 	ldw	r17,20(sp)
 10158a0:	dc000417 	ldw	r16,16(sp)
 10158a4:	dec00e04 	addi	sp,sp,56
 10158a8:	f800283a 	ret
 10158ac:	2404b03a 	or	r2,r4,r16
 10158b0:	2027883a 	mov	r19,r4
 10158b4:	10003926 	beq	r2,zero,101599c <__divdf3+0x2c0>
 10158b8:	80012e26 	beq	r16,zero,1015d74 <__divdf3+0x698>
 10158bc:	8009883a 	mov	r4,r16
 10158c0:	d9800315 	stw	r6,12(sp)
 10158c4:	d9c00215 	stw	r7,8(sp)
 10158c8:	10174340 	call	1017434 <__clzsi2>
 10158cc:	d9800317 	ldw	r6,12(sp)
 10158d0:	d9c00217 	ldw	r7,8(sp)
 10158d4:	113ffd44 	addi	r4,r2,-11
 10158d8:	00c00704 	movi	r3,28
 10158dc:	19012116 	blt	r3,r4,1015d64 <__divdf3+0x688>
 10158e0:	00c00744 	movi	r3,29
 10158e4:	147ffe04 	addi	r17,r2,-8
 10158e8:	1907c83a 	sub	r3,r3,r4
 10158ec:	8460983a 	sll	r16,r16,r17
 10158f0:	98c6d83a 	srl	r3,r19,r3
 10158f4:	9c64983a 	sll	r18,r19,r17
 10158f8:	1c20b03a 	or	r16,r3,r16
 10158fc:	1080fcc4 	addi	r2,r2,1011
 1015900:	00abc83a 	sub	r21,zero,r2
 1015904:	0027883a 	mov	r19,zero
 1015908:	0013883a 	mov	r9,zero
 101590c:	003f9106 	br	1015754 <__alt_data_end+0xff015754>
 1015910:	3446b03a 	or	r3,r6,r17
 1015914:	18001f1e 	bne	r3,zero,1015994 <__divdf3+0x2b8>
 1015918:	0023883a 	mov	r17,zero
 101591c:	0011883a 	mov	r8,zero
 1015920:	01c00084 	movi	r7,2
 1015924:	003f9d06 	br	101579c <__alt_data_end+0xff01579c>
 1015928:	3446b03a 	or	r3,r6,r17
 101592c:	18001526 	beq	r3,zero,1015984 <__divdf3+0x2a8>
 1015930:	88011b26 	beq	r17,zero,1015da0 <__divdf3+0x6c4>
 1015934:	8809883a 	mov	r4,r17
 1015938:	d9800315 	stw	r6,12(sp)
 101593c:	da400115 	stw	r9,4(sp)
 1015940:	10174340 	call	1017434 <__clzsi2>
 1015944:	d9800317 	ldw	r6,12(sp)
 1015948:	da400117 	ldw	r9,4(sp)
 101594c:	113ffd44 	addi	r4,r2,-11
 1015950:	00c00704 	movi	r3,28
 1015954:	19010e16 	blt	r3,r4,1015d90 <__divdf3+0x6b4>
 1015958:	00c00744 	movi	r3,29
 101595c:	123ffe04 	addi	r8,r2,-8
 1015960:	1907c83a 	sub	r3,r3,r4
 1015964:	8a22983a 	sll	r17,r17,r8
 1015968:	30c6d83a 	srl	r3,r6,r3
 101596c:	3210983a 	sll	r8,r6,r8
 1015970:	1c62b03a 	or	r17,r3,r17
 1015974:	1080fcc4 	addi	r2,r2,1011
 1015978:	0085c83a 	sub	r2,zero,r2
 101597c:	000f883a 	mov	r7,zero
 1015980:	003f8606 	br	101579c <__alt_data_end+0xff01579c>
 1015984:	0023883a 	mov	r17,zero
 1015988:	0011883a 	mov	r8,zero
 101598c:	01c00044 	movi	r7,1
 1015990:	003f8206 	br	101579c <__alt_data_end+0xff01579c>
 1015994:	01c000c4 	movi	r7,3
 1015998:	003f8006 	br	101579c <__alt_data_end+0xff01579c>
 101599c:	04c00104 	movi	r19,4
 10159a0:	0021883a 	mov	r16,zero
 10159a4:	0025883a 	mov	r18,zero
 10159a8:	02400044 	movi	r9,1
 10159ac:	003f6906 	br	1015754 <__alt_data_end+0xff015754>
 10159b0:	04c00304 	movi	r19,12
 10159b4:	024000c4 	movi	r9,3
 10159b8:	003f6606 	br	1015754 <__alt_data_end+0xff015754>
 10159bc:	01400434 	movhi	r5,16
 10159c0:	0007883a 	mov	r3,zero
 10159c4:	297fffc4 	addi	r5,r5,-1
 10159c8:	04bfffc4 	movi	r18,-1
 10159cc:	0081ffc4 	movi	r2,2047
 10159d0:	003fa106 	br	1015858 <__alt_data_end+0xff015858>
 10159d4:	00c00044 	movi	r3,1
 10159d8:	1887c83a 	sub	r3,r3,r2
 10159dc:	01000e04 	movi	r4,56
 10159e0:	20c1210e 	bge	r4,r3,1015e68 <__divdf3+0x78c>
 10159e4:	98c0004c 	andi	r3,r19,1
 10159e8:	0005883a 	mov	r2,zero
 10159ec:	000b883a 	mov	r5,zero
 10159f0:	0025883a 	mov	r18,zero
 10159f4:	003f9806 	br	1015858 <__alt_data_end+0xff015858>
 10159f8:	8c00fd36 	bltu	r17,r16,1015df0 <__divdf3+0x714>
 10159fc:	8440fb26 	beq	r16,r17,1015dec <__divdf3+0x710>
 1015a00:	8007883a 	mov	r3,r16
 1015a04:	ad7fffc4 	addi	r21,r21,-1
 1015a08:	0021883a 	mov	r16,zero
 1015a0c:	4004d63a 	srli	r2,r8,24
 1015a10:	8822923a 	slli	r17,r17,8
 1015a14:	1809883a 	mov	r4,r3
 1015a18:	402c923a 	slli	r22,r8,8
 1015a1c:	88b8b03a 	or	fp,r17,r2
 1015a20:	e028d43a 	srli	r20,fp,16
 1015a24:	d8c00015 	stw	r3,0(sp)
 1015a28:	e5ffffcc 	andi	r23,fp,65535
 1015a2c:	a00b883a 	mov	r5,r20
 1015a30:	1014d740 	call	1014d74 <__udivsi3>
 1015a34:	d8c00017 	ldw	r3,0(sp)
 1015a38:	a00b883a 	mov	r5,r20
 1015a3c:	d8800315 	stw	r2,12(sp)
 1015a40:	1809883a 	mov	r4,r3
 1015a44:	1014dd80 	call	1014dd8 <__umodsi3>
 1015a48:	d9800317 	ldw	r6,12(sp)
 1015a4c:	1006943a 	slli	r3,r2,16
 1015a50:	9004d43a 	srli	r2,r18,16
 1015a54:	b9a3383a 	mul	r17,r23,r6
 1015a58:	10c4b03a 	or	r2,r2,r3
 1015a5c:	1440062e 	bgeu	r2,r17,1015a78 <__divdf3+0x39c>
 1015a60:	1705883a 	add	r2,r2,fp
 1015a64:	30ffffc4 	addi	r3,r6,-1
 1015a68:	1700ee36 	bltu	r2,fp,1015e24 <__divdf3+0x748>
 1015a6c:	1440ed2e 	bgeu	r2,r17,1015e24 <__divdf3+0x748>
 1015a70:	31bfff84 	addi	r6,r6,-2
 1015a74:	1705883a 	add	r2,r2,fp
 1015a78:	1463c83a 	sub	r17,r2,r17
 1015a7c:	a00b883a 	mov	r5,r20
 1015a80:	8809883a 	mov	r4,r17
 1015a84:	d9800315 	stw	r6,12(sp)
 1015a88:	1014d740 	call	1014d74 <__udivsi3>
 1015a8c:	a00b883a 	mov	r5,r20
 1015a90:	8809883a 	mov	r4,r17
 1015a94:	d8800215 	stw	r2,8(sp)
 1015a98:	1014dd80 	call	1014dd8 <__umodsi3>
 1015a9c:	d9c00217 	ldw	r7,8(sp)
 1015aa0:	1004943a 	slli	r2,r2,16
 1015aa4:	94bfffcc 	andi	r18,r18,65535
 1015aa8:	b9d1383a 	mul	r8,r23,r7
 1015aac:	90a4b03a 	or	r18,r18,r2
 1015ab0:	d9800317 	ldw	r6,12(sp)
 1015ab4:	9200062e 	bgeu	r18,r8,1015ad0 <__divdf3+0x3f4>
 1015ab8:	9725883a 	add	r18,r18,fp
 1015abc:	38bfffc4 	addi	r2,r7,-1
 1015ac0:	9700d636 	bltu	r18,fp,1015e1c <__divdf3+0x740>
 1015ac4:	9200d52e 	bgeu	r18,r8,1015e1c <__divdf3+0x740>
 1015ac8:	39ffff84 	addi	r7,r7,-2
 1015acc:	9725883a 	add	r18,r18,fp
 1015ad0:	3004943a 	slli	r2,r6,16
 1015ad4:	b012d43a 	srli	r9,r22,16
 1015ad8:	b1bfffcc 	andi	r6,r22,65535
 1015adc:	11e2b03a 	or	r17,r2,r7
 1015ae0:	8806d43a 	srli	r3,r17,16
 1015ae4:	893fffcc 	andi	r4,r17,65535
 1015ae8:	218b383a 	mul	r5,r4,r6
 1015aec:	30c5383a 	mul	r2,r6,r3
 1015af0:	2249383a 	mul	r4,r4,r9
 1015af4:	280ed43a 	srli	r7,r5,16
 1015af8:	9225c83a 	sub	r18,r18,r8
 1015afc:	2089883a 	add	r4,r4,r2
 1015b00:	3909883a 	add	r4,r7,r4
 1015b04:	1a47383a 	mul	r3,r3,r9
 1015b08:	2080022e 	bgeu	r4,r2,1015b14 <__divdf3+0x438>
 1015b0c:	00800074 	movhi	r2,1
 1015b10:	1887883a 	add	r3,r3,r2
 1015b14:	2004d43a 	srli	r2,r4,16
 1015b18:	2008943a 	slli	r4,r4,16
 1015b1c:	297fffcc 	andi	r5,r5,65535
 1015b20:	10c7883a 	add	r3,r2,r3
 1015b24:	2149883a 	add	r4,r4,r5
 1015b28:	90c0a536 	bltu	r18,r3,1015dc0 <__divdf3+0x6e4>
 1015b2c:	90c0bf26 	beq	r18,r3,1015e2c <__divdf3+0x750>
 1015b30:	90c7c83a 	sub	r3,r18,r3
 1015b34:	810fc83a 	sub	r7,r16,r4
 1015b38:	81e5803a 	cmpltu	r18,r16,r7
 1015b3c:	1ca5c83a 	sub	r18,r3,r18
 1015b40:	e480c126 	beq	fp,r18,1015e48 <__divdf3+0x76c>
 1015b44:	a00b883a 	mov	r5,r20
 1015b48:	9009883a 	mov	r4,r18
 1015b4c:	d9800315 	stw	r6,12(sp)
 1015b50:	d9c00215 	stw	r7,8(sp)
 1015b54:	da400115 	stw	r9,4(sp)
 1015b58:	1014d740 	call	1014d74 <__udivsi3>
 1015b5c:	a00b883a 	mov	r5,r20
 1015b60:	9009883a 	mov	r4,r18
 1015b64:	d8800015 	stw	r2,0(sp)
 1015b68:	1014dd80 	call	1014dd8 <__umodsi3>
 1015b6c:	d9c00217 	ldw	r7,8(sp)
 1015b70:	da000017 	ldw	r8,0(sp)
 1015b74:	1006943a 	slli	r3,r2,16
 1015b78:	3804d43a 	srli	r2,r7,16
 1015b7c:	ba21383a 	mul	r16,r23,r8
 1015b80:	d9800317 	ldw	r6,12(sp)
 1015b84:	10c4b03a 	or	r2,r2,r3
 1015b88:	da400117 	ldw	r9,4(sp)
 1015b8c:	1400062e 	bgeu	r2,r16,1015ba8 <__divdf3+0x4cc>
 1015b90:	1705883a 	add	r2,r2,fp
 1015b94:	40ffffc4 	addi	r3,r8,-1
 1015b98:	1700ad36 	bltu	r2,fp,1015e50 <__divdf3+0x774>
 1015b9c:	1400ac2e 	bgeu	r2,r16,1015e50 <__divdf3+0x774>
 1015ba0:	423fff84 	addi	r8,r8,-2
 1015ba4:	1705883a 	add	r2,r2,fp
 1015ba8:	1421c83a 	sub	r16,r2,r16
 1015bac:	a00b883a 	mov	r5,r20
 1015bb0:	8009883a 	mov	r4,r16
 1015bb4:	d9800315 	stw	r6,12(sp)
 1015bb8:	d9c00215 	stw	r7,8(sp)
 1015bbc:	da000015 	stw	r8,0(sp)
 1015bc0:	da400115 	stw	r9,4(sp)
 1015bc4:	1014d740 	call	1014d74 <__udivsi3>
 1015bc8:	8009883a 	mov	r4,r16
 1015bcc:	a00b883a 	mov	r5,r20
 1015bd0:	1025883a 	mov	r18,r2
 1015bd4:	1014dd80 	call	1014dd8 <__umodsi3>
 1015bd8:	d9c00217 	ldw	r7,8(sp)
 1015bdc:	1004943a 	slli	r2,r2,16
 1015be0:	bcaf383a 	mul	r23,r23,r18
 1015be4:	393fffcc 	andi	r4,r7,65535
 1015be8:	2088b03a 	or	r4,r4,r2
 1015bec:	d9800317 	ldw	r6,12(sp)
 1015bf0:	da000017 	ldw	r8,0(sp)
 1015bf4:	da400117 	ldw	r9,4(sp)
 1015bf8:	25c0062e 	bgeu	r4,r23,1015c14 <__divdf3+0x538>
 1015bfc:	2709883a 	add	r4,r4,fp
 1015c00:	90bfffc4 	addi	r2,r18,-1
 1015c04:	27009436 	bltu	r4,fp,1015e58 <__divdf3+0x77c>
 1015c08:	25c0932e 	bgeu	r4,r23,1015e58 <__divdf3+0x77c>
 1015c0c:	94bfff84 	addi	r18,r18,-2
 1015c10:	2709883a 	add	r4,r4,fp
 1015c14:	4004943a 	slli	r2,r8,16
 1015c18:	25efc83a 	sub	r23,r4,r23
 1015c1c:	1490b03a 	or	r8,r2,r18
 1015c20:	4008d43a 	srli	r4,r8,16
 1015c24:	40ffffcc 	andi	r3,r8,65535
 1015c28:	30c5383a 	mul	r2,r6,r3
 1015c2c:	1a47383a 	mul	r3,r3,r9
 1015c30:	310d383a 	mul	r6,r6,r4
 1015c34:	100ad43a 	srli	r5,r2,16
 1015c38:	4913383a 	mul	r9,r9,r4
 1015c3c:	1987883a 	add	r3,r3,r6
 1015c40:	28c7883a 	add	r3,r5,r3
 1015c44:	1980022e 	bgeu	r3,r6,1015c50 <__divdf3+0x574>
 1015c48:	01000074 	movhi	r4,1
 1015c4c:	4913883a 	add	r9,r9,r4
 1015c50:	1808d43a 	srli	r4,r3,16
 1015c54:	1806943a 	slli	r3,r3,16
 1015c58:	10bfffcc 	andi	r2,r2,65535
 1015c5c:	2253883a 	add	r9,r4,r9
 1015c60:	1887883a 	add	r3,r3,r2
 1015c64:	ba403836 	bltu	r23,r9,1015d48 <__divdf3+0x66c>
 1015c68:	ba403626 	beq	r23,r9,1015d44 <__divdf3+0x668>
 1015c6c:	42000054 	ori	r8,r8,1
 1015c70:	a880ffc4 	addi	r2,r21,1023
 1015c74:	00bf570e 	bge	zero,r2,10159d4 <__alt_data_end+0xff0159d4>
 1015c78:	40c001cc 	andi	r3,r8,7
 1015c7c:	18000726 	beq	r3,zero,1015c9c <__divdf3+0x5c0>
 1015c80:	40c003cc 	andi	r3,r8,15
 1015c84:	01000104 	movi	r4,4
 1015c88:	19000426 	beq	r3,r4,1015c9c <__divdf3+0x5c0>
 1015c8c:	4107883a 	add	r3,r8,r4
 1015c90:	1a11803a 	cmpltu	r8,r3,r8
 1015c94:	8a23883a 	add	r17,r17,r8
 1015c98:	1811883a 	mov	r8,r3
 1015c9c:	88c0402c 	andhi	r3,r17,256
 1015ca0:	18000426 	beq	r3,zero,1015cb4 <__divdf3+0x5d8>
 1015ca4:	00ffc034 	movhi	r3,65280
 1015ca8:	18ffffc4 	addi	r3,r3,-1
 1015cac:	a8810004 	addi	r2,r21,1024
 1015cb0:	88e2703a 	and	r17,r17,r3
 1015cb4:	00c1ff84 	movi	r3,2046
 1015cb8:	18bee316 	blt	r3,r2,1015848 <__alt_data_end+0xff015848>
 1015cbc:	8824977a 	slli	r18,r17,29
 1015cc0:	4010d0fa 	srli	r8,r8,3
 1015cc4:	8822927a 	slli	r17,r17,9
 1015cc8:	1081ffcc 	andi	r2,r2,2047
 1015ccc:	9224b03a 	or	r18,r18,r8
 1015cd0:	880ad33a 	srli	r5,r17,12
 1015cd4:	98c0004c 	andi	r3,r19,1
 1015cd8:	003edf06 	br	1015858 <__alt_data_end+0xff015858>
 1015cdc:	8080022c 	andhi	r2,r16,8
 1015ce0:	10001226 	beq	r2,zero,1015d2c <__divdf3+0x650>
 1015ce4:	8880022c 	andhi	r2,r17,8
 1015ce8:	1000101e 	bne	r2,zero,1015d2c <__divdf3+0x650>
 1015cec:	00800434 	movhi	r2,16
 1015cf0:	89400234 	orhi	r5,r17,8
 1015cf4:	10bfffc4 	addi	r2,r2,-1
 1015cf8:	b007883a 	mov	r3,r22
 1015cfc:	288a703a 	and	r5,r5,r2
 1015d00:	4025883a 	mov	r18,r8
 1015d04:	003f3106 	br	10159cc <__alt_data_end+0xff0159cc>
 1015d08:	008000c4 	movi	r2,3
 1015d0c:	3880a626 	beq	r7,r2,1015fa8 <__divdf3+0x8cc>
 1015d10:	00800044 	movi	r2,1
 1015d14:	3880521e 	bne	r7,r2,1015e60 <__divdf3+0x784>
 1015d18:	b807883a 	mov	r3,r23
 1015d1c:	0005883a 	mov	r2,zero
 1015d20:	000b883a 	mov	r5,zero
 1015d24:	0025883a 	mov	r18,zero
 1015d28:	003ecb06 	br	1015858 <__alt_data_end+0xff015858>
 1015d2c:	00800434 	movhi	r2,16
 1015d30:	81400234 	orhi	r5,r16,8
 1015d34:	10bfffc4 	addi	r2,r2,-1
 1015d38:	a007883a 	mov	r3,r20
 1015d3c:	288a703a 	and	r5,r5,r2
 1015d40:	003f2206 	br	10159cc <__alt_data_end+0xff0159cc>
 1015d44:	183fca26 	beq	r3,zero,1015c70 <__alt_data_end+0xff015c70>
 1015d48:	e5ef883a 	add	r23,fp,r23
 1015d4c:	40bfffc4 	addi	r2,r8,-1
 1015d50:	bf00392e 	bgeu	r23,fp,1015e38 <__divdf3+0x75c>
 1015d54:	1011883a 	mov	r8,r2
 1015d58:	ba7fc41e 	bne	r23,r9,1015c6c <__alt_data_end+0xff015c6c>
 1015d5c:	b0ffc31e 	bne	r22,r3,1015c6c <__alt_data_end+0xff015c6c>
 1015d60:	003fc306 	br	1015c70 <__alt_data_end+0xff015c70>
 1015d64:	143ff604 	addi	r16,r2,-40
 1015d68:	9c20983a 	sll	r16,r19,r16
 1015d6c:	0025883a 	mov	r18,zero
 1015d70:	003ee206 	br	10158fc <__alt_data_end+0xff0158fc>
 1015d74:	d9800315 	stw	r6,12(sp)
 1015d78:	d9c00215 	stw	r7,8(sp)
 1015d7c:	10174340 	call	1017434 <__clzsi2>
 1015d80:	10800804 	addi	r2,r2,32
 1015d84:	d9c00217 	ldw	r7,8(sp)
 1015d88:	d9800317 	ldw	r6,12(sp)
 1015d8c:	003ed106 	br	10158d4 <__alt_data_end+0xff0158d4>
 1015d90:	147ff604 	addi	r17,r2,-40
 1015d94:	3462983a 	sll	r17,r6,r17
 1015d98:	0011883a 	mov	r8,zero
 1015d9c:	003ef506 	br	1015974 <__alt_data_end+0xff015974>
 1015da0:	3009883a 	mov	r4,r6
 1015da4:	d9800315 	stw	r6,12(sp)
 1015da8:	da400115 	stw	r9,4(sp)
 1015dac:	10174340 	call	1017434 <__clzsi2>
 1015db0:	10800804 	addi	r2,r2,32
 1015db4:	da400117 	ldw	r9,4(sp)
 1015db8:	d9800317 	ldw	r6,12(sp)
 1015dbc:	003ee306 	br	101594c <__alt_data_end+0xff01594c>
 1015dc0:	85a1883a 	add	r16,r16,r22
 1015dc4:	8585803a 	cmpltu	r2,r16,r22
 1015dc8:	1705883a 	add	r2,r2,fp
 1015dcc:	14a5883a 	add	r18,r2,r18
 1015dd0:	88bfffc4 	addi	r2,r17,-1
 1015dd4:	e4800c2e 	bgeu	fp,r18,1015e08 <__divdf3+0x72c>
 1015dd8:	90c03e36 	bltu	r18,r3,1015ed4 <__divdf3+0x7f8>
 1015ddc:	1c806926 	beq	r3,r18,1015f84 <__divdf3+0x8a8>
 1015de0:	90c7c83a 	sub	r3,r18,r3
 1015de4:	1023883a 	mov	r17,r2
 1015de8:	003f5206 	br	1015b34 <__alt_data_end+0xff015b34>
 1015dec:	923f0436 	bltu	r18,r8,1015a00 <__alt_data_end+0xff015a00>
 1015df0:	800897fa 	slli	r4,r16,31
 1015df4:	9004d07a 	srli	r2,r18,1
 1015df8:	8006d07a 	srli	r3,r16,1
 1015dfc:	902097fa 	slli	r16,r18,31
 1015e00:	20a4b03a 	or	r18,r4,r2
 1015e04:	003f0106 	br	1015a0c <__alt_data_end+0xff015a0c>
 1015e08:	e4bff51e 	bne	fp,r18,1015de0 <__alt_data_end+0xff015de0>
 1015e0c:	85bff22e 	bgeu	r16,r22,1015dd8 <__alt_data_end+0xff015dd8>
 1015e10:	e0c7c83a 	sub	r3,fp,r3
 1015e14:	1023883a 	mov	r17,r2
 1015e18:	003f4606 	br	1015b34 <__alt_data_end+0xff015b34>
 1015e1c:	100f883a 	mov	r7,r2
 1015e20:	003f2b06 	br	1015ad0 <__alt_data_end+0xff015ad0>
 1015e24:	180d883a 	mov	r6,r3
 1015e28:	003f1306 	br	1015a78 <__alt_data_end+0xff015a78>
 1015e2c:	813fe436 	bltu	r16,r4,1015dc0 <__alt_data_end+0xff015dc0>
 1015e30:	0007883a 	mov	r3,zero
 1015e34:	003f3f06 	br	1015b34 <__alt_data_end+0xff015b34>
 1015e38:	ba402c36 	bltu	r23,r9,1015eec <__divdf3+0x810>
 1015e3c:	4dc05426 	beq	r9,r23,1015f90 <__divdf3+0x8b4>
 1015e40:	1011883a 	mov	r8,r2
 1015e44:	003f8906 	br	1015c6c <__alt_data_end+0xff015c6c>
 1015e48:	023fffc4 	movi	r8,-1
 1015e4c:	003f8806 	br	1015c70 <__alt_data_end+0xff015c70>
 1015e50:	1811883a 	mov	r8,r3
 1015e54:	003f5406 	br	1015ba8 <__alt_data_end+0xff015ba8>
 1015e58:	1025883a 	mov	r18,r2
 1015e5c:	003f6d06 	br	1015c14 <__alt_data_end+0xff015c14>
 1015e60:	b827883a 	mov	r19,r23
 1015e64:	003f8206 	br	1015c70 <__alt_data_end+0xff015c70>
 1015e68:	010007c4 	movi	r4,31
 1015e6c:	20c02616 	blt	r4,r3,1015f08 <__divdf3+0x82c>
 1015e70:	00800804 	movi	r2,32
 1015e74:	10c5c83a 	sub	r2,r2,r3
 1015e78:	888a983a 	sll	r5,r17,r2
 1015e7c:	40c8d83a 	srl	r4,r8,r3
 1015e80:	4084983a 	sll	r2,r8,r2
 1015e84:	88e2d83a 	srl	r17,r17,r3
 1015e88:	2906b03a 	or	r3,r5,r4
 1015e8c:	1004c03a 	cmpne	r2,r2,zero
 1015e90:	1886b03a 	or	r3,r3,r2
 1015e94:	188001cc 	andi	r2,r3,7
 1015e98:	10000726 	beq	r2,zero,1015eb8 <__divdf3+0x7dc>
 1015e9c:	188003cc 	andi	r2,r3,15
 1015ea0:	01000104 	movi	r4,4
 1015ea4:	11000426 	beq	r2,r4,1015eb8 <__divdf3+0x7dc>
 1015ea8:	1805883a 	mov	r2,r3
 1015eac:	10c00104 	addi	r3,r2,4
 1015eb0:	1885803a 	cmpltu	r2,r3,r2
 1015eb4:	88a3883a 	add	r17,r17,r2
 1015eb8:	8880202c 	andhi	r2,r17,128
 1015ebc:	10002726 	beq	r2,zero,1015f5c <__divdf3+0x880>
 1015ec0:	98c0004c 	andi	r3,r19,1
 1015ec4:	00800044 	movi	r2,1
 1015ec8:	000b883a 	mov	r5,zero
 1015ecc:	0025883a 	mov	r18,zero
 1015ed0:	003e6106 	br	1015858 <__alt_data_end+0xff015858>
 1015ed4:	85a1883a 	add	r16,r16,r22
 1015ed8:	8585803a 	cmpltu	r2,r16,r22
 1015edc:	1705883a 	add	r2,r2,fp
 1015ee0:	14a5883a 	add	r18,r2,r18
 1015ee4:	8c7fff84 	addi	r17,r17,-2
 1015ee8:	003f1106 	br	1015b30 <__alt_data_end+0xff015b30>
 1015eec:	b589883a 	add	r4,r22,r22
 1015ef0:	25ad803a 	cmpltu	r22,r4,r22
 1015ef4:	b739883a 	add	fp,r22,fp
 1015ef8:	40bfff84 	addi	r2,r8,-2
 1015efc:	bf2f883a 	add	r23,r23,fp
 1015f00:	202d883a 	mov	r22,r4
 1015f04:	003f9306 	br	1015d54 <__alt_data_end+0xff015d54>
 1015f08:	013ff844 	movi	r4,-31
 1015f0c:	2085c83a 	sub	r2,r4,r2
 1015f10:	8888d83a 	srl	r4,r17,r2
 1015f14:	00800804 	movi	r2,32
 1015f18:	18802126 	beq	r3,r2,1015fa0 <__divdf3+0x8c4>
 1015f1c:	00801004 	movi	r2,64
 1015f20:	10c5c83a 	sub	r2,r2,r3
 1015f24:	8884983a 	sll	r2,r17,r2
 1015f28:	1204b03a 	or	r2,r2,r8
 1015f2c:	1004c03a 	cmpne	r2,r2,zero
 1015f30:	2084b03a 	or	r2,r4,r2
 1015f34:	144001cc 	andi	r17,r2,7
 1015f38:	88000d1e 	bne	r17,zero,1015f70 <__divdf3+0x894>
 1015f3c:	000b883a 	mov	r5,zero
 1015f40:	1024d0fa 	srli	r18,r2,3
 1015f44:	98c0004c 	andi	r3,r19,1
 1015f48:	0005883a 	mov	r2,zero
 1015f4c:	9464b03a 	or	r18,r18,r17
 1015f50:	003e4106 	br	1015858 <__alt_data_end+0xff015858>
 1015f54:	1007883a 	mov	r3,r2
 1015f58:	0023883a 	mov	r17,zero
 1015f5c:	880a927a 	slli	r5,r17,9
 1015f60:	1805883a 	mov	r2,r3
 1015f64:	8822977a 	slli	r17,r17,29
 1015f68:	280ad33a 	srli	r5,r5,12
 1015f6c:	003ff406 	br	1015f40 <__alt_data_end+0xff015f40>
 1015f70:	10c003cc 	andi	r3,r2,15
 1015f74:	01000104 	movi	r4,4
 1015f78:	193ff626 	beq	r3,r4,1015f54 <__alt_data_end+0xff015f54>
 1015f7c:	0023883a 	mov	r17,zero
 1015f80:	003fca06 	br	1015eac <__alt_data_end+0xff015eac>
 1015f84:	813fd336 	bltu	r16,r4,1015ed4 <__alt_data_end+0xff015ed4>
 1015f88:	1023883a 	mov	r17,r2
 1015f8c:	003fa806 	br	1015e30 <__alt_data_end+0xff015e30>
 1015f90:	b0ffd636 	bltu	r22,r3,1015eec <__alt_data_end+0xff015eec>
 1015f94:	1011883a 	mov	r8,r2
 1015f98:	b0ff341e 	bne	r22,r3,1015c6c <__alt_data_end+0xff015c6c>
 1015f9c:	003f3406 	br	1015c70 <__alt_data_end+0xff015c70>
 1015fa0:	0005883a 	mov	r2,zero
 1015fa4:	003fe006 	br	1015f28 <__alt_data_end+0xff015f28>
 1015fa8:	00800434 	movhi	r2,16
 1015fac:	89400234 	orhi	r5,r17,8
 1015fb0:	10bfffc4 	addi	r2,r2,-1
 1015fb4:	b807883a 	mov	r3,r23
 1015fb8:	288a703a 	and	r5,r5,r2
 1015fbc:	4025883a 	mov	r18,r8
 1015fc0:	003e8206 	br	10159cc <__alt_data_end+0xff0159cc>

01015fc4 <__eqdf2>:
 1015fc4:	2804d53a 	srli	r2,r5,20
 1015fc8:	3806d53a 	srli	r3,r7,20
 1015fcc:	02000434 	movhi	r8,16
 1015fd0:	423fffc4 	addi	r8,r8,-1
 1015fd4:	1081ffcc 	andi	r2,r2,2047
 1015fd8:	0281ffc4 	movi	r10,2047
 1015fdc:	2a12703a 	and	r9,r5,r8
 1015fe0:	18c1ffcc 	andi	r3,r3,2047
 1015fe4:	3a10703a 	and	r8,r7,r8
 1015fe8:	280ad7fa 	srli	r5,r5,31
 1015fec:	380ed7fa 	srli	r7,r7,31
 1015ff0:	12801026 	beq	r2,r10,1016034 <__eqdf2+0x70>
 1015ff4:	0281ffc4 	movi	r10,2047
 1015ff8:	1a800a26 	beq	r3,r10,1016024 <__eqdf2+0x60>
 1015ffc:	10c00226 	beq	r2,r3,1016008 <__eqdf2+0x44>
 1016000:	00800044 	movi	r2,1
 1016004:	f800283a 	ret
 1016008:	4a3ffd1e 	bne	r9,r8,1016000 <__alt_data_end+0xff016000>
 101600c:	21bffc1e 	bne	r4,r6,1016000 <__alt_data_end+0xff016000>
 1016010:	29c00c26 	beq	r5,r7,1016044 <__eqdf2+0x80>
 1016014:	103ffa1e 	bne	r2,zero,1016000 <__alt_data_end+0xff016000>
 1016018:	2244b03a 	or	r2,r4,r9
 101601c:	1004c03a 	cmpne	r2,r2,zero
 1016020:	f800283a 	ret
 1016024:	3214b03a 	or	r10,r6,r8
 1016028:	503ff426 	beq	r10,zero,1015ffc <__alt_data_end+0xff015ffc>
 101602c:	00800044 	movi	r2,1
 1016030:	f800283a 	ret
 1016034:	2254b03a 	or	r10,r4,r9
 1016038:	503fee26 	beq	r10,zero,1015ff4 <__alt_data_end+0xff015ff4>
 101603c:	00800044 	movi	r2,1
 1016040:	f800283a 	ret
 1016044:	0005883a 	mov	r2,zero
 1016048:	f800283a 	ret

0101604c <__gedf2>:
 101604c:	2804d53a 	srli	r2,r5,20
 1016050:	3806d53a 	srli	r3,r7,20
 1016054:	02000434 	movhi	r8,16
 1016058:	423fffc4 	addi	r8,r8,-1
 101605c:	1081ffcc 	andi	r2,r2,2047
 1016060:	0241ffc4 	movi	r9,2047
 1016064:	2a14703a 	and	r10,r5,r8
 1016068:	18c1ffcc 	andi	r3,r3,2047
 101606c:	3a10703a 	and	r8,r7,r8
 1016070:	280ad7fa 	srli	r5,r5,31
 1016074:	380ed7fa 	srli	r7,r7,31
 1016078:	12401d26 	beq	r2,r9,10160f0 <__gedf2+0xa4>
 101607c:	0241ffc4 	movi	r9,2047
 1016080:	1a401226 	beq	r3,r9,10160cc <__gedf2+0x80>
 1016084:	1000081e 	bne	r2,zero,10160a8 <__gedf2+0x5c>
 1016088:	2296b03a 	or	r11,r4,r10
 101608c:	5813003a 	cmpeq	r9,r11,zero
 1016090:	1800091e 	bne	r3,zero,10160b8 <__gedf2+0x6c>
 1016094:	3218b03a 	or	r12,r6,r8
 1016098:	6000071e 	bne	r12,zero,10160b8 <__gedf2+0x6c>
 101609c:	0005883a 	mov	r2,zero
 10160a0:	5800101e 	bne	r11,zero,10160e4 <__gedf2+0x98>
 10160a4:	f800283a 	ret
 10160a8:	18000c1e 	bne	r3,zero,10160dc <__gedf2+0x90>
 10160ac:	3212b03a 	or	r9,r6,r8
 10160b0:	48000c26 	beq	r9,zero,10160e4 <__gedf2+0x98>
 10160b4:	0013883a 	mov	r9,zero
 10160b8:	39c03fcc 	andi	r7,r7,255
 10160bc:	48000826 	beq	r9,zero,10160e0 <__gedf2+0x94>
 10160c0:	38000926 	beq	r7,zero,10160e8 <__gedf2+0x9c>
 10160c4:	00800044 	movi	r2,1
 10160c8:	f800283a 	ret
 10160cc:	3212b03a 	or	r9,r6,r8
 10160d0:	483fec26 	beq	r9,zero,1016084 <__alt_data_end+0xff016084>
 10160d4:	00bfff84 	movi	r2,-2
 10160d8:	f800283a 	ret
 10160dc:	39c03fcc 	andi	r7,r7,255
 10160e0:	29c00626 	beq	r5,r7,10160fc <__gedf2+0xb0>
 10160e4:	283ff726 	beq	r5,zero,10160c4 <__alt_data_end+0xff0160c4>
 10160e8:	00bfffc4 	movi	r2,-1
 10160ec:	f800283a 	ret
 10160f0:	2292b03a 	or	r9,r4,r10
 10160f4:	483fe126 	beq	r9,zero,101607c <__alt_data_end+0xff01607c>
 10160f8:	003ff606 	br	10160d4 <__alt_data_end+0xff0160d4>
 10160fc:	18bff916 	blt	r3,r2,10160e4 <__alt_data_end+0xff0160e4>
 1016100:	10c00316 	blt	r2,r3,1016110 <__gedf2+0xc4>
 1016104:	42bff736 	bltu	r8,r10,10160e4 <__alt_data_end+0xff0160e4>
 1016108:	52000326 	beq	r10,r8,1016118 <__gedf2+0xcc>
 101610c:	5200042e 	bgeu	r10,r8,1016120 <__gedf2+0xd4>
 1016110:	283fec1e 	bne	r5,zero,10160c4 <__alt_data_end+0xff0160c4>
 1016114:	003ff406 	br	10160e8 <__alt_data_end+0xff0160e8>
 1016118:	313ff236 	bltu	r6,r4,10160e4 <__alt_data_end+0xff0160e4>
 101611c:	21bffc36 	bltu	r4,r6,1016110 <__alt_data_end+0xff016110>
 1016120:	0005883a 	mov	r2,zero
 1016124:	f800283a 	ret

01016128 <__ledf2>:
 1016128:	2804d53a 	srli	r2,r5,20
 101612c:	3810d53a 	srli	r8,r7,20
 1016130:	00c00434 	movhi	r3,16
 1016134:	18ffffc4 	addi	r3,r3,-1
 1016138:	1081ffcc 	andi	r2,r2,2047
 101613c:	0241ffc4 	movi	r9,2047
 1016140:	28d4703a 	and	r10,r5,r3
 1016144:	4201ffcc 	andi	r8,r8,2047
 1016148:	38c6703a 	and	r3,r7,r3
 101614c:	280ad7fa 	srli	r5,r5,31
 1016150:	380ed7fa 	srli	r7,r7,31
 1016154:	12401f26 	beq	r2,r9,10161d4 <__ledf2+0xac>
 1016158:	0241ffc4 	movi	r9,2047
 101615c:	42401426 	beq	r8,r9,10161b0 <__ledf2+0x88>
 1016160:	1000091e 	bne	r2,zero,1016188 <__ledf2+0x60>
 1016164:	2296b03a 	or	r11,r4,r10
 1016168:	5813003a 	cmpeq	r9,r11,zero
 101616c:	29403fcc 	andi	r5,r5,255
 1016170:	40000a1e 	bne	r8,zero,101619c <__ledf2+0x74>
 1016174:	30d8b03a 	or	r12,r6,r3
 1016178:	6000081e 	bne	r12,zero,101619c <__ledf2+0x74>
 101617c:	0005883a 	mov	r2,zero
 1016180:	5800111e 	bne	r11,zero,10161c8 <__ledf2+0xa0>
 1016184:	f800283a 	ret
 1016188:	29403fcc 	andi	r5,r5,255
 101618c:	40000c1e 	bne	r8,zero,10161c0 <__ledf2+0x98>
 1016190:	30d2b03a 	or	r9,r6,r3
 1016194:	48000c26 	beq	r9,zero,10161c8 <__ledf2+0xa0>
 1016198:	0013883a 	mov	r9,zero
 101619c:	39c03fcc 	andi	r7,r7,255
 10161a0:	48000826 	beq	r9,zero,10161c4 <__ledf2+0x9c>
 10161a4:	38001126 	beq	r7,zero,10161ec <__ledf2+0xc4>
 10161a8:	00800044 	movi	r2,1
 10161ac:	f800283a 	ret
 10161b0:	30d2b03a 	or	r9,r6,r3
 10161b4:	483fea26 	beq	r9,zero,1016160 <__alt_data_end+0xff016160>
 10161b8:	00800084 	movi	r2,2
 10161bc:	f800283a 	ret
 10161c0:	39c03fcc 	andi	r7,r7,255
 10161c4:	39400726 	beq	r7,r5,10161e4 <__ledf2+0xbc>
 10161c8:	2800081e 	bne	r5,zero,10161ec <__ledf2+0xc4>
 10161cc:	00800044 	movi	r2,1
 10161d0:	f800283a 	ret
 10161d4:	2292b03a 	or	r9,r4,r10
 10161d8:	483fdf26 	beq	r9,zero,1016158 <__alt_data_end+0xff016158>
 10161dc:	00800084 	movi	r2,2
 10161e0:	f800283a 	ret
 10161e4:	4080030e 	bge	r8,r2,10161f4 <__ledf2+0xcc>
 10161e8:	383fef26 	beq	r7,zero,10161a8 <__alt_data_end+0xff0161a8>
 10161ec:	00bfffc4 	movi	r2,-1
 10161f0:	f800283a 	ret
 10161f4:	123feb16 	blt	r2,r8,10161a4 <__alt_data_end+0xff0161a4>
 10161f8:	1abff336 	bltu	r3,r10,10161c8 <__alt_data_end+0xff0161c8>
 10161fc:	50c00326 	beq	r10,r3,101620c <__ledf2+0xe4>
 1016200:	50c0042e 	bgeu	r10,r3,1016214 <__ledf2+0xec>
 1016204:	283fe81e 	bne	r5,zero,10161a8 <__alt_data_end+0xff0161a8>
 1016208:	003ff806 	br	10161ec <__alt_data_end+0xff0161ec>
 101620c:	313fee36 	bltu	r6,r4,10161c8 <__alt_data_end+0xff0161c8>
 1016210:	21bffc36 	bltu	r4,r6,1016204 <__alt_data_end+0xff016204>
 1016214:	0005883a 	mov	r2,zero
 1016218:	f800283a 	ret

0101621c <__muldf3>:
 101621c:	defff304 	addi	sp,sp,-52
 1016220:	2804d53a 	srli	r2,r5,20
 1016224:	dd800915 	stw	r22,36(sp)
 1016228:	282cd7fa 	srli	r22,r5,31
 101622c:	dc000315 	stw	r16,12(sp)
 1016230:	04000434 	movhi	r16,16
 1016234:	dd400815 	stw	r21,32(sp)
 1016238:	dc800515 	stw	r18,20(sp)
 101623c:	843fffc4 	addi	r16,r16,-1
 1016240:	dfc00c15 	stw	ra,48(sp)
 1016244:	df000b15 	stw	fp,44(sp)
 1016248:	ddc00a15 	stw	r23,40(sp)
 101624c:	dd000715 	stw	r20,28(sp)
 1016250:	dcc00615 	stw	r19,24(sp)
 1016254:	dc400415 	stw	r17,16(sp)
 1016258:	1481ffcc 	andi	r18,r2,2047
 101625c:	2c20703a 	and	r16,r5,r16
 1016260:	b02b883a 	mov	r21,r22
 1016264:	b2403fcc 	andi	r9,r22,255
 1016268:	90006026 	beq	r18,zero,10163ec <__muldf3+0x1d0>
 101626c:	0081ffc4 	movi	r2,2047
 1016270:	2029883a 	mov	r20,r4
 1016274:	90803626 	beq	r18,r2,1016350 <__muldf3+0x134>
 1016278:	80800434 	orhi	r2,r16,16
 101627c:	100490fa 	slli	r2,r2,3
 1016280:	2020d77a 	srli	r16,r4,29
 1016284:	202890fa 	slli	r20,r4,3
 1016288:	94bf0044 	addi	r18,r18,-1023
 101628c:	80a0b03a 	or	r16,r16,r2
 1016290:	0027883a 	mov	r19,zero
 1016294:	0039883a 	mov	fp,zero
 1016298:	3804d53a 	srli	r2,r7,20
 101629c:	382ed7fa 	srli	r23,r7,31
 10162a0:	04400434 	movhi	r17,16
 10162a4:	8c7fffc4 	addi	r17,r17,-1
 10162a8:	1081ffcc 	andi	r2,r2,2047
 10162ac:	3011883a 	mov	r8,r6
 10162b0:	3c62703a 	and	r17,r7,r17
 10162b4:	ba803fcc 	andi	r10,r23,255
 10162b8:	10006d26 	beq	r2,zero,1016470 <__muldf3+0x254>
 10162bc:	00c1ffc4 	movi	r3,2047
 10162c0:	10c06526 	beq	r2,r3,1016458 <__muldf3+0x23c>
 10162c4:	88c00434 	orhi	r3,r17,16
 10162c8:	180690fa 	slli	r3,r3,3
 10162cc:	3022d77a 	srli	r17,r6,29
 10162d0:	301090fa 	slli	r8,r6,3
 10162d4:	10bf0044 	addi	r2,r2,-1023
 10162d8:	88e2b03a 	or	r17,r17,r3
 10162dc:	000b883a 	mov	r5,zero
 10162e0:	9085883a 	add	r2,r18,r2
 10162e4:	2cc8b03a 	or	r4,r5,r19
 10162e8:	00c003c4 	movi	r3,15
 10162ec:	bdacf03a 	xor	r22,r23,r22
 10162f0:	12c00044 	addi	r11,r2,1
 10162f4:	19009936 	bltu	r3,r4,101655c <__muldf3+0x340>
 10162f8:	200890ba 	slli	r4,r4,2
 10162fc:	00c04074 	movhi	r3,257
 1016300:	18d8c404 	addi	r3,r3,25360
 1016304:	20c9883a 	add	r4,r4,r3
 1016308:	20c00017 	ldw	r3,0(r4)
 101630c:	1800683a 	jmp	r3
 1016310:	0101655c 	xori	r4,zero,1429
 1016314:	01016370 	cmpltui	r4,zero,1421
 1016318:	01016370 	cmpltui	r4,zero,1421
 101631c:	0101636c 	andhi	r4,zero,1421
 1016320:	01016538 	rdprs	r4,zero,1428
 1016324:	01016538 	rdprs	r4,zero,1428
 1016328:	01016520 	cmpeqi	r4,zero,1428
 101632c:	0101636c 	andhi	r4,zero,1421
 1016330:	01016538 	rdprs	r4,zero,1428
 1016334:	01016520 	cmpeqi	r4,zero,1428
 1016338:	01016538 	rdprs	r4,zero,1428
 101633c:	0101636c 	andhi	r4,zero,1421
 1016340:	01016548 	cmpgei	r4,zero,1429
 1016344:	01016548 	cmpgei	r4,zero,1429
 1016348:	01016548 	cmpgei	r4,zero,1429
 101634c:	01016764 	muli	r4,zero,1437
 1016350:	2404b03a 	or	r2,r4,r16
 1016354:	10006f1e 	bne	r2,zero,1016514 <__muldf3+0x2f8>
 1016358:	04c00204 	movi	r19,8
 101635c:	0021883a 	mov	r16,zero
 1016360:	0029883a 	mov	r20,zero
 1016364:	07000084 	movi	fp,2
 1016368:	003fcb06 	br	1016298 <__alt_data_end+0xff016298>
 101636c:	502d883a 	mov	r22,r10
 1016370:	00800084 	movi	r2,2
 1016374:	28805726 	beq	r5,r2,10164d4 <__muldf3+0x2b8>
 1016378:	008000c4 	movi	r2,3
 101637c:	28816626 	beq	r5,r2,1016918 <__muldf3+0x6fc>
 1016380:	00800044 	movi	r2,1
 1016384:	2881411e 	bne	r5,r2,101688c <__muldf3+0x670>
 1016388:	b02b883a 	mov	r21,r22
 101638c:	0005883a 	mov	r2,zero
 1016390:	000b883a 	mov	r5,zero
 1016394:	0029883a 	mov	r20,zero
 1016398:	1004953a 	slli	r2,r2,20
 101639c:	a8c03fcc 	andi	r3,r21,255
 10163a0:	04400434 	movhi	r17,16
 10163a4:	8c7fffc4 	addi	r17,r17,-1
 10163a8:	180697fa 	slli	r3,r3,31
 10163ac:	2c4a703a 	and	r5,r5,r17
 10163b0:	288ab03a 	or	r5,r5,r2
 10163b4:	28c6b03a 	or	r3,r5,r3
 10163b8:	a005883a 	mov	r2,r20
 10163bc:	dfc00c17 	ldw	ra,48(sp)
 10163c0:	df000b17 	ldw	fp,44(sp)
 10163c4:	ddc00a17 	ldw	r23,40(sp)
 10163c8:	dd800917 	ldw	r22,36(sp)
 10163cc:	dd400817 	ldw	r21,32(sp)
 10163d0:	dd000717 	ldw	r20,28(sp)
 10163d4:	dcc00617 	ldw	r19,24(sp)
 10163d8:	dc800517 	ldw	r18,20(sp)
 10163dc:	dc400417 	ldw	r17,16(sp)
 10163e0:	dc000317 	ldw	r16,12(sp)
 10163e4:	dec00d04 	addi	sp,sp,52
 10163e8:	f800283a 	ret
 10163ec:	2404b03a 	or	r2,r4,r16
 10163f0:	2027883a 	mov	r19,r4
 10163f4:	10004226 	beq	r2,zero,1016500 <__muldf3+0x2e4>
 10163f8:	8000fc26 	beq	r16,zero,10167ec <__muldf3+0x5d0>
 10163fc:	8009883a 	mov	r4,r16
 1016400:	d9800215 	stw	r6,8(sp)
 1016404:	d9c00015 	stw	r7,0(sp)
 1016408:	da400115 	stw	r9,4(sp)
 101640c:	10174340 	call	1017434 <__clzsi2>
 1016410:	d9800217 	ldw	r6,8(sp)
 1016414:	d9c00017 	ldw	r7,0(sp)
 1016418:	da400117 	ldw	r9,4(sp)
 101641c:	113ffd44 	addi	r4,r2,-11
 1016420:	00c00704 	movi	r3,28
 1016424:	1900ed16 	blt	r3,r4,10167dc <__muldf3+0x5c0>
 1016428:	00c00744 	movi	r3,29
 101642c:	147ffe04 	addi	r17,r2,-8
 1016430:	1907c83a 	sub	r3,r3,r4
 1016434:	8460983a 	sll	r16,r16,r17
 1016438:	98c6d83a 	srl	r3,r19,r3
 101643c:	9c68983a 	sll	r20,r19,r17
 1016440:	1c20b03a 	or	r16,r3,r16
 1016444:	1080fcc4 	addi	r2,r2,1011
 1016448:	00a5c83a 	sub	r18,zero,r2
 101644c:	0027883a 	mov	r19,zero
 1016450:	0039883a 	mov	fp,zero
 1016454:	003f9006 	br	1016298 <__alt_data_end+0xff016298>
 1016458:	3446b03a 	or	r3,r6,r17
 101645c:	1800261e 	bne	r3,zero,10164f8 <__muldf3+0x2dc>
 1016460:	0023883a 	mov	r17,zero
 1016464:	0011883a 	mov	r8,zero
 1016468:	01400084 	movi	r5,2
 101646c:	003f9c06 	br	10162e0 <__alt_data_end+0xff0162e0>
 1016470:	3446b03a 	or	r3,r6,r17
 1016474:	18001c26 	beq	r3,zero,10164e8 <__muldf3+0x2cc>
 1016478:	8800ce26 	beq	r17,zero,10167b4 <__muldf3+0x598>
 101647c:	8809883a 	mov	r4,r17
 1016480:	d9800215 	stw	r6,8(sp)
 1016484:	da400115 	stw	r9,4(sp)
 1016488:	da800015 	stw	r10,0(sp)
 101648c:	10174340 	call	1017434 <__clzsi2>
 1016490:	d9800217 	ldw	r6,8(sp)
 1016494:	da400117 	ldw	r9,4(sp)
 1016498:	da800017 	ldw	r10,0(sp)
 101649c:	113ffd44 	addi	r4,r2,-11
 10164a0:	00c00704 	movi	r3,28
 10164a4:	1900bf16 	blt	r3,r4,10167a4 <__muldf3+0x588>
 10164a8:	00c00744 	movi	r3,29
 10164ac:	123ffe04 	addi	r8,r2,-8
 10164b0:	1907c83a 	sub	r3,r3,r4
 10164b4:	8a22983a 	sll	r17,r17,r8
 10164b8:	30c6d83a 	srl	r3,r6,r3
 10164bc:	3210983a 	sll	r8,r6,r8
 10164c0:	1c62b03a 	or	r17,r3,r17
 10164c4:	1080fcc4 	addi	r2,r2,1011
 10164c8:	0085c83a 	sub	r2,zero,r2
 10164cc:	000b883a 	mov	r5,zero
 10164d0:	003f8306 	br	10162e0 <__alt_data_end+0xff0162e0>
 10164d4:	b02b883a 	mov	r21,r22
 10164d8:	0081ffc4 	movi	r2,2047
 10164dc:	000b883a 	mov	r5,zero
 10164e0:	0029883a 	mov	r20,zero
 10164e4:	003fac06 	br	1016398 <__alt_data_end+0xff016398>
 10164e8:	0023883a 	mov	r17,zero
 10164ec:	0011883a 	mov	r8,zero
 10164f0:	01400044 	movi	r5,1
 10164f4:	003f7a06 	br	10162e0 <__alt_data_end+0xff0162e0>
 10164f8:	014000c4 	movi	r5,3
 10164fc:	003f7806 	br	10162e0 <__alt_data_end+0xff0162e0>
 1016500:	04c00104 	movi	r19,4
 1016504:	0021883a 	mov	r16,zero
 1016508:	0029883a 	mov	r20,zero
 101650c:	07000044 	movi	fp,1
 1016510:	003f6106 	br	1016298 <__alt_data_end+0xff016298>
 1016514:	04c00304 	movi	r19,12
 1016518:	070000c4 	movi	fp,3
 101651c:	003f5e06 	br	1016298 <__alt_data_end+0xff016298>
 1016520:	01400434 	movhi	r5,16
 1016524:	002b883a 	mov	r21,zero
 1016528:	297fffc4 	addi	r5,r5,-1
 101652c:	053fffc4 	movi	r20,-1
 1016530:	0081ffc4 	movi	r2,2047
 1016534:	003f9806 	br	1016398 <__alt_data_end+0xff016398>
 1016538:	8023883a 	mov	r17,r16
 101653c:	a011883a 	mov	r8,r20
 1016540:	e00b883a 	mov	r5,fp
 1016544:	003f8a06 	br	1016370 <__alt_data_end+0xff016370>
 1016548:	8023883a 	mov	r17,r16
 101654c:	a011883a 	mov	r8,r20
 1016550:	482d883a 	mov	r22,r9
 1016554:	e00b883a 	mov	r5,fp
 1016558:	003f8506 	br	1016370 <__alt_data_end+0xff016370>
 101655c:	a00ad43a 	srli	r5,r20,16
 1016560:	401ad43a 	srli	r13,r8,16
 1016564:	a53fffcc 	andi	r20,r20,65535
 1016568:	423fffcc 	andi	r8,r8,65535
 101656c:	4519383a 	mul	r12,r8,r20
 1016570:	4147383a 	mul	r3,r8,r5
 1016574:	6d09383a 	mul	r4,r13,r20
 1016578:	600cd43a 	srli	r6,r12,16
 101657c:	2b5d383a 	mul	r14,r5,r13
 1016580:	20c9883a 	add	r4,r4,r3
 1016584:	310d883a 	add	r6,r6,r4
 1016588:	30c0022e 	bgeu	r6,r3,1016594 <__muldf3+0x378>
 101658c:	00c00074 	movhi	r3,1
 1016590:	70dd883a 	add	r14,r14,r3
 1016594:	8826d43a 	srli	r19,r17,16
 1016598:	8bffffcc 	andi	r15,r17,65535
 101659c:	7d23383a 	mul	r17,r15,r20
 10165a0:	7949383a 	mul	r4,r15,r5
 10165a4:	9d29383a 	mul	r20,r19,r20
 10165a8:	8814d43a 	srli	r10,r17,16
 10165ac:	3012943a 	slli	r9,r6,16
 10165b0:	a129883a 	add	r20,r20,r4
 10165b4:	633fffcc 	andi	r12,r12,65535
 10165b8:	5515883a 	add	r10,r10,r20
 10165bc:	3006d43a 	srli	r3,r6,16
 10165c0:	4b13883a 	add	r9,r9,r12
 10165c4:	2ccb383a 	mul	r5,r5,r19
 10165c8:	5100022e 	bgeu	r10,r4,10165d4 <__muldf3+0x3b8>
 10165cc:	01000074 	movhi	r4,1
 10165d0:	290b883a 	add	r5,r5,r4
 10165d4:	802ad43a 	srli	r21,r16,16
 10165d8:	843fffcc 	andi	r16,r16,65535
 10165dc:	440d383a 	mul	r6,r8,r16
 10165e0:	4565383a 	mul	r18,r8,r21
 10165e4:	8349383a 	mul	r4,r16,r13
 10165e8:	500e943a 	slli	r7,r10,16
 10165ec:	3010d43a 	srli	r8,r6,16
 10165f0:	5028d43a 	srli	r20,r10,16
 10165f4:	2489883a 	add	r4,r4,r18
 10165f8:	8abfffcc 	andi	r10,r17,65535
 10165fc:	3a95883a 	add	r10,r7,r10
 1016600:	4119883a 	add	r12,r8,r4
 1016604:	a169883a 	add	r20,r20,r5
 1016608:	1a87883a 	add	r3,r3,r10
 101660c:	6d5b383a 	mul	r13,r13,r21
 1016610:	6480022e 	bgeu	r12,r18,101661c <__muldf3+0x400>
 1016614:	01000074 	movhi	r4,1
 1016618:	691b883a 	add	r13,r13,r4
 101661c:	7c25383a 	mul	r18,r15,r16
 1016620:	7d4b383a 	mul	r5,r15,r21
 1016624:	84cf383a 	mul	r7,r16,r19
 1016628:	901ed43a 	srli	r15,r18,16
 101662c:	6008d43a 	srli	r4,r12,16
 1016630:	6010943a 	slli	r8,r12,16
 1016634:	394f883a 	add	r7,r7,r5
 1016638:	333fffcc 	andi	r12,r6,65535
 101663c:	79df883a 	add	r15,r15,r7
 1016640:	235b883a 	add	r13,r4,r13
 1016644:	9d63383a 	mul	r17,r19,r21
 1016648:	4309883a 	add	r4,r8,r12
 101664c:	7940022e 	bgeu	r15,r5,1016658 <__muldf3+0x43c>
 1016650:	01400074 	movhi	r5,1
 1016654:	8963883a 	add	r17,r17,r5
 1016658:	780a943a 	slli	r5,r15,16
 101665c:	91bfffcc 	andi	r6,r18,65535
 1016660:	70c7883a 	add	r3,r14,r3
 1016664:	298d883a 	add	r6,r5,r6
 1016668:	1a8f803a 	cmpltu	r7,r3,r10
 101666c:	350b883a 	add	r5,r6,r20
 1016670:	20c7883a 	add	r3,r4,r3
 1016674:	3955883a 	add	r10,r7,r5
 1016678:	1909803a 	cmpltu	r4,r3,r4
 101667c:	6a91883a 	add	r8,r13,r10
 1016680:	780cd43a 	srli	r6,r15,16
 1016684:	2219883a 	add	r12,r4,r8
 1016688:	2d0b803a 	cmpltu	r5,r5,r20
 101668c:	51cf803a 	cmpltu	r7,r10,r7
 1016690:	29ceb03a 	or	r7,r5,r7
 1016694:	4351803a 	cmpltu	r8,r8,r13
 1016698:	610b803a 	cmpltu	r5,r12,r4
 101669c:	4148b03a 	or	r4,r8,r5
 10166a0:	398f883a 	add	r7,r7,r6
 10166a4:	3909883a 	add	r4,r7,r4
 10166a8:	1810927a 	slli	r8,r3,9
 10166ac:	2449883a 	add	r4,r4,r17
 10166b0:	2008927a 	slli	r4,r4,9
 10166b4:	6022d5fa 	srli	r17,r12,23
 10166b8:	1806d5fa 	srli	r3,r3,23
 10166bc:	4252b03a 	or	r9,r8,r9
 10166c0:	600a927a 	slli	r5,r12,9
 10166c4:	4810c03a 	cmpne	r8,r9,zero
 10166c8:	2462b03a 	or	r17,r4,r17
 10166cc:	40c6b03a 	or	r3,r8,r3
 10166d0:	8900402c 	andhi	r4,r17,256
 10166d4:	1950b03a 	or	r8,r3,r5
 10166d8:	20000726 	beq	r4,zero,10166f8 <__muldf3+0x4dc>
 10166dc:	4006d07a 	srli	r3,r8,1
 10166e0:	880497fa 	slli	r2,r17,31
 10166e4:	4200004c 	andi	r8,r8,1
 10166e8:	8822d07a 	srli	r17,r17,1
 10166ec:	1a10b03a 	or	r8,r3,r8
 10166f0:	1210b03a 	or	r8,r2,r8
 10166f4:	5805883a 	mov	r2,r11
 10166f8:	1140ffc4 	addi	r5,r2,1023
 10166fc:	0140440e 	bge	zero,r5,1016810 <__muldf3+0x5f4>
 1016700:	40c001cc 	andi	r3,r8,7
 1016704:	18000726 	beq	r3,zero,1016724 <__muldf3+0x508>
 1016708:	40c003cc 	andi	r3,r8,15
 101670c:	01000104 	movi	r4,4
 1016710:	19000426 	beq	r3,r4,1016724 <__muldf3+0x508>
 1016714:	4107883a 	add	r3,r8,r4
 1016718:	1a11803a 	cmpltu	r8,r3,r8
 101671c:	8a23883a 	add	r17,r17,r8
 1016720:	1811883a 	mov	r8,r3
 1016724:	88c0402c 	andhi	r3,r17,256
 1016728:	18000426 	beq	r3,zero,101673c <__muldf3+0x520>
 101672c:	11410004 	addi	r5,r2,1024
 1016730:	00bfc034 	movhi	r2,65280
 1016734:	10bfffc4 	addi	r2,r2,-1
 1016738:	88a2703a 	and	r17,r17,r2
 101673c:	0081ff84 	movi	r2,2046
 1016740:	117f6416 	blt	r2,r5,10164d4 <__alt_data_end+0xff0164d4>
 1016744:	8828977a 	slli	r20,r17,29
 1016748:	4010d0fa 	srli	r8,r8,3
 101674c:	8822927a 	slli	r17,r17,9
 1016750:	2881ffcc 	andi	r2,r5,2047
 1016754:	a228b03a 	or	r20,r20,r8
 1016758:	880ad33a 	srli	r5,r17,12
 101675c:	b02b883a 	mov	r21,r22
 1016760:	003f0d06 	br	1016398 <__alt_data_end+0xff016398>
 1016764:	8080022c 	andhi	r2,r16,8
 1016768:	10000926 	beq	r2,zero,1016790 <__muldf3+0x574>
 101676c:	8880022c 	andhi	r2,r17,8
 1016770:	1000071e 	bne	r2,zero,1016790 <__muldf3+0x574>
 1016774:	00800434 	movhi	r2,16
 1016778:	89400234 	orhi	r5,r17,8
 101677c:	10bfffc4 	addi	r2,r2,-1
 1016780:	b82b883a 	mov	r21,r23
 1016784:	288a703a 	and	r5,r5,r2
 1016788:	4029883a 	mov	r20,r8
 101678c:	003f6806 	br	1016530 <__alt_data_end+0xff016530>
 1016790:	00800434 	movhi	r2,16
 1016794:	81400234 	orhi	r5,r16,8
 1016798:	10bfffc4 	addi	r2,r2,-1
 101679c:	288a703a 	and	r5,r5,r2
 10167a0:	003f6306 	br	1016530 <__alt_data_end+0xff016530>
 10167a4:	147ff604 	addi	r17,r2,-40
 10167a8:	3462983a 	sll	r17,r6,r17
 10167ac:	0011883a 	mov	r8,zero
 10167b0:	003f4406 	br	10164c4 <__alt_data_end+0xff0164c4>
 10167b4:	3009883a 	mov	r4,r6
 10167b8:	d9800215 	stw	r6,8(sp)
 10167bc:	da400115 	stw	r9,4(sp)
 10167c0:	da800015 	stw	r10,0(sp)
 10167c4:	10174340 	call	1017434 <__clzsi2>
 10167c8:	10800804 	addi	r2,r2,32
 10167cc:	da800017 	ldw	r10,0(sp)
 10167d0:	da400117 	ldw	r9,4(sp)
 10167d4:	d9800217 	ldw	r6,8(sp)
 10167d8:	003f3006 	br	101649c <__alt_data_end+0xff01649c>
 10167dc:	143ff604 	addi	r16,r2,-40
 10167e0:	9c20983a 	sll	r16,r19,r16
 10167e4:	0029883a 	mov	r20,zero
 10167e8:	003f1606 	br	1016444 <__alt_data_end+0xff016444>
 10167ec:	d9800215 	stw	r6,8(sp)
 10167f0:	d9c00015 	stw	r7,0(sp)
 10167f4:	da400115 	stw	r9,4(sp)
 10167f8:	10174340 	call	1017434 <__clzsi2>
 10167fc:	10800804 	addi	r2,r2,32
 1016800:	da400117 	ldw	r9,4(sp)
 1016804:	d9c00017 	ldw	r7,0(sp)
 1016808:	d9800217 	ldw	r6,8(sp)
 101680c:	003f0306 	br	101641c <__alt_data_end+0xff01641c>
 1016810:	00c00044 	movi	r3,1
 1016814:	1947c83a 	sub	r3,r3,r5
 1016818:	00800e04 	movi	r2,56
 101681c:	10feda16 	blt	r2,r3,1016388 <__alt_data_end+0xff016388>
 1016820:	008007c4 	movi	r2,31
 1016824:	10c01b16 	blt	r2,r3,1016894 <__muldf3+0x678>
 1016828:	00800804 	movi	r2,32
 101682c:	10c5c83a 	sub	r2,r2,r3
 1016830:	888a983a 	sll	r5,r17,r2
 1016834:	40c8d83a 	srl	r4,r8,r3
 1016838:	4084983a 	sll	r2,r8,r2
 101683c:	88e2d83a 	srl	r17,r17,r3
 1016840:	2906b03a 	or	r3,r5,r4
 1016844:	1004c03a 	cmpne	r2,r2,zero
 1016848:	1886b03a 	or	r3,r3,r2
 101684c:	188001cc 	andi	r2,r3,7
 1016850:	10000726 	beq	r2,zero,1016870 <__muldf3+0x654>
 1016854:	188003cc 	andi	r2,r3,15
 1016858:	01000104 	movi	r4,4
 101685c:	11000426 	beq	r2,r4,1016870 <__muldf3+0x654>
 1016860:	1805883a 	mov	r2,r3
 1016864:	10c00104 	addi	r3,r2,4
 1016868:	1885803a 	cmpltu	r2,r3,r2
 101686c:	88a3883a 	add	r17,r17,r2
 1016870:	8880202c 	andhi	r2,r17,128
 1016874:	10001c26 	beq	r2,zero,10168e8 <__muldf3+0x6cc>
 1016878:	b02b883a 	mov	r21,r22
 101687c:	00800044 	movi	r2,1
 1016880:	000b883a 	mov	r5,zero
 1016884:	0029883a 	mov	r20,zero
 1016888:	003ec306 	br	1016398 <__alt_data_end+0xff016398>
 101688c:	5805883a 	mov	r2,r11
 1016890:	003f9906 	br	10166f8 <__alt_data_end+0xff0166f8>
 1016894:	00bff844 	movi	r2,-31
 1016898:	1145c83a 	sub	r2,r2,r5
 101689c:	8888d83a 	srl	r4,r17,r2
 10168a0:	00800804 	movi	r2,32
 10168a4:	18801a26 	beq	r3,r2,1016910 <__muldf3+0x6f4>
 10168a8:	00801004 	movi	r2,64
 10168ac:	10c5c83a 	sub	r2,r2,r3
 10168b0:	8884983a 	sll	r2,r17,r2
 10168b4:	1204b03a 	or	r2,r2,r8
 10168b8:	1004c03a 	cmpne	r2,r2,zero
 10168bc:	2084b03a 	or	r2,r4,r2
 10168c0:	144001cc 	andi	r17,r2,7
 10168c4:	88000d1e 	bne	r17,zero,10168fc <__muldf3+0x6e0>
 10168c8:	000b883a 	mov	r5,zero
 10168cc:	1028d0fa 	srli	r20,r2,3
 10168d0:	b02b883a 	mov	r21,r22
 10168d4:	0005883a 	mov	r2,zero
 10168d8:	a468b03a 	or	r20,r20,r17
 10168dc:	003eae06 	br	1016398 <__alt_data_end+0xff016398>
 10168e0:	1007883a 	mov	r3,r2
 10168e4:	0023883a 	mov	r17,zero
 10168e8:	880a927a 	slli	r5,r17,9
 10168ec:	1805883a 	mov	r2,r3
 10168f0:	8822977a 	slli	r17,r17,29
 10168f4:	280ad33a 	srli	r5,r5,12
 10168f8:	003ff406 	br	10168cc <__alt_data_end+0xff0168cc>
 10168fc:	10c003cc 	andi	r3,r2,15
 1016900:	01000104 	movi	r4,4
 1016904:	193ff626 	beq	r3,r4,10168e0 <__alt_data_end+0xff0168e0>
 1016908:	0023883a 	mov	r17,zero
 101690c:	003fd506 	br	1016864 <__alt_data_end+0xff016864>
 1016910:	0005883a 	mov	r2,zero
 1016914:	003fe706 	br	10168b4 <__alt_data_end+0xff0168b4>
 1016918:	00800434 	movhi	r2,16
 101691c:	89400234 	orhi	r5,r17,8
 1016920:	10bfffc4 	addi	r2,r2,-1
 1016924:	b02b883a 	mov	r21,r22
 1016928:	288a703a 	and	r5,r5,r2
 101692c:	4029883a 	mov	r20,r8
 1016930:	003eff06 	br	1016530 <__alt_data_end+0xff016530>

01016934 <__subdf3>:
 1016934:	02000434 	movhi	r8,16
 1016938:	423fffc4 	addi	r8,r8,-1
 101693c:	defffb04 	addi	sp,sp,-20
 1016940:	2a14703a 	and	r10,r5,r8
 1016944:	3812d53a 	srli	r9,r7,20
 1016948:	3a10703a 	and	r8,r7,r8
 101694c:	2006d77a 	srli	r3,r4,29
 1016950:	3004d77a 	srli	r2,r6,29
 1016954:	dc000015 	stw	r16,0(sp)
 1016958:	501490fa 	slli	r10,r10,3
 101695c:	2820d53a 	srli	r16,r5,20
 1016960:	401090fa 	slli	r8,r8,3
 1016964:	dc800215 	stw	r18,8(sp)
 1016968:	dc400115 	stw	r17,4(sp)
 101696c:	dfc00415 	stw	ra,16(sp)
 1016970:	202290fa 	slli	r17,r4,3
 1016974:	dcc00315 	stw	r19,12(sp)
 1016978:	4a41ffcc 	andi	r9,r9,2047
 101697c:	0101ffc4 	movi	r4,2047
 1016980:	2824d7fa 	srli	r18,r5,31
 1016984:	8401ffcc 	andi	r16,r16,2047
 1016988:	50c6b03a 	or	r3,r10,r3
 101698c:	380ed7fa 	srli	r7,r7,31
 1016990:	408ab03a 	or	r5,r8,r2
 1016994:	300c90fa 	slli	r6,r6,3
 1016998:	49009626 	beq	r9,r4,1016bf4 <__subdf3+0x2c0>
 101699c:	39c0005c 	xori	r7,r7,1
 10169a0:	8245c83a 	sub	r2,r16,r9
 10169a4:	3c807426 	beq	r7,r18,1016b78 <__subdf3+0x244>
 10169a8:	0080af0e 	bge	zero,r2,1016c68 <__subdf3+0x334>
 10169ac:	48002a1e 	bne	r9,zero,1016a58 <__subdf3+0x124>
 10169b0:	2988b03a 	or	r4,r5,r6
 10169b4:	20009a1e 	bne	r4,zero,1016c20 <__subdf3+0x2ec>
 10169b8:	888001cc 	andi	r2,r17,7
 10169bc:	10000726 	beq	r2,zero,10169dc <__subdf3+0xa8>
 10169c0:	888003cc 	andi	r2,r17,15
 10169c4:	01000104 	movi	r4,4
 10169c8:	11000426 	beq	r2,r4,10169dc <__subdf3+0xa8>
 10169cc:	890b883a 	add	r5,r17,r4
 10169d0:	2c63803a 	cmpltu	r17,r5,r17
 10169d4:	1c47883a 	add	r3,r3,r17
 10169d8:	2823883a 	mov	r17,r5
 10169dc:	1880202c 	andhi	r2,r3,128
 10169e0:	10005926 	beq	r2,zero,1016b48 <__subdf3+0x214>
 10169e4:	84000044 	addi	r16,r16,1
 10169e8:	0081ffc4 	movi	r2,2047
 10169ec:	8080be26 	beq	r16,r2,1016ce8 <__subdf3+0x3b4>
 10169f0:	017fe034 	movhi	r5,65408
 10169f4:	297fffc4 	addi	r5,r5,-1
 10169f8:	1946703a 	and	r3,r3,r5
 10169fc:	1804977a 	slli	r2,r3,29
 1016a00:	1806927a 	slli	r3,r3,9
 1016a04:	8822d0fa 	srli	r17,r17,3
 1016a08:	8401ffcc 	andi	r16,r16,2047
 1016a0c:	180ad33a 	srli	r5,r3,12
 1016a10:	9100004c 	andi	r4,r18,1
 1016a14:	1444b03a 	or	r2,r2,r17
 1016a18:	80c1ffcc 	andi	r3,r16,2047
 1016a1c:	1820953a 	slli	r16,r3,20
 1016a20:	20c03fcc 	andi	r3,r4,255
 1016a24:	180897fa 	slli	r4,r3,31
 1016a28:	00c00434 	movhi	r3,16
 1016a2c:	18ffffc4 	addi	r3,r3,-1
 1016a30:	28c6703a 	and	r3,r5,r3
 1016a34:	1c06b03a 	or	r3,r3,r16
 1016a38:	1906b03a 	or	r3,r3,r4
 1016a3c:	dfc00417 	ldw	ra,16(sp)
 1016a40:	dcc00317 	ldw	r19,12(sp)
 1016a44:	dc800217 	ldw	r18,8(sp)
 1016a48:	dc400117 	ldw	r17,4(sp)
 1016a4c:	dc000017 	ldw	r16,0(sp)
 1016a50:	dec00504 	addi	sp,sp,20
 1016a54:	f800283a 	ret
 1016a58:	0101ffc4 	movi	r4,2047
 1016a5c:	813fd626 	beq	r16,r4,10169b8 <__alt_data_end+0xff0169b8>
 1016a60:	29402034 	orhi	r5,r5,128
 1016a64:	01000e04 	movi	r4,56
 1016a68:	2080a316 	blt	r4,r2,1016cf8 <__subdf3+0x3c4>
 1016a6c:	010007c4 	movi	r4,31
 1016a70:	2080c616 	blt	r4,r2,1016d8c <__subdf3+0x458>
 1016a74:	01000804 	movi	r4,32
 1016a78:	2089c83a 	sub	r4,r4,r2
 1016a7c:	2910983a 	sll	r8,r5,r4
 1016a80:	308ed83a 	srl	r7,r6,r2
 1016a84:	3108983a 	sll	r4,r6,r4
 1016a88:	2884d83a 	srl	r2,r5,r2
 1016a8c:	41ccb03a 	or	r6,r8,r7
 1016a90:	2008c03a 	cmpne	r4,r4,zero
 1016a94:	310cb03a 	or	r6,r6,r4
 1016a98:	898dc83a 	sub	r6,r17,r6
 1016a9c:	89a3803a 	cmpltu	r17,r17,r6
 1016aa0:	1887c83a 	sub	r3,r3,r2
 1016aa4:	1c47c83a 	sub	r3,r3,r17
 1016aa8:	3023883a 	mov	r17,r6
 1016aac:	1880202c 	andhi	r2,r3,128
 1016ab0:	10002326 	beq	r2,zero,1016b40 <__subdf3+0x20c>
 1016ab4:	04c02034 	movhi	r19,128
 1016ab8:	9cffffc4 	addi	r19,r19,-1
 1016abc:	1ce6703a 	and	r19,r3,r19
 1016ac0:	98007a26 	beq	r19,zero,1016cac <__subdf3+0x378>
 1016ac4:	9809883a 	mov	r4,r19
 1016ac8:	10174340 	call	1017434 <__clzsi2>
 1016acc:	113ffe04 	addi	r4,r2,-8
 1016ad0:	00c007c4 	movi	r3,31
 1016ad4:	19007b16 	blt	r3,r4,1016cc4 <__subdf3+0x390>
 1016ad8:	00800804 	movi	r2,32
 1016adc:	1105c83a 	sub	r2,r2,r4
 1016ae0:	8884d83a 	srl	r2,r17,r2
 1016ae4:	9906983a 	sll	r3,r19,r4
 1016ae8:	8922983a 	sll	r17,r17,r4
 1016aec:	10c4b03a 	or	r2,r2,r3
 1016af0:	24007816 	blt	r4,r16,1016cd4 <__subdf3+0x3a0>
 1016af4:	2421c83a 	sub	r16,r4,r16
 1016af8:	80c00044 	addi	r3,r16,1
 1016afc:	010007c4 	movi	r4,31
 1016b00:	20c09516 	blt	r4,r3,1016d58 <__subdf3+0x424>
 1016b04:	01400804 	movi	r5,32
 1016b08:	28cbc83a 	sub	r5,r5,r3
 1016b0c:	88c8d83a 	srl	r4,r17,r3
 1016b10:	8962983a 	sll	r17,r17,r5
 1016b14:	114a983a 	sll	r5,r2,r5
 1016b18:	10c6d83a 	srl	r3,r2,r3
 1016b1c:	8804c03a 	cmpne	r2,r17,zero
 1016b20:	290ab03a 	or	r5,r5,r4
 1016b24:	28a2b03a 	or	r17,r5,r2
 1016b28:	0021883a 	mov	r16,zero
 1016b2c:	003fa206 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016b30:	2090b03a 	or	r8,r4,r2
 1016b34:	40018e26 	beq	r8,zero,1017170 <__subdf3+0x83c>
 1016b38:	1007883a 	mov	r3,r2
 1016b3c:	2023883a 	mov	r17,r4
 1016b40:	888001cc 	andi	r2,r17,7
 1016b44:	103f9e1e 	bne	r2,zero,10169c0 <__alt_data_end+0xff0169c0>
 1016b48:	1804977a 	slli	r2,r3,29
 1016b4c:	8822d0fa 	srli	r17,r17,3
 1016b50:	1810d0fa 	srli	r8,r3,3
 1016b54:	9100004c 	andi	r4,r18,1
 1016b58:	1444b03a 	or	r2,r2,r17
 1016b5c:	00c1ffc4 	movi	r3,2047
 1016b60:	80c02826 	beq	r16,r3,1016c04 <__subdf3+0x2d0>
 1016b64:	01400434 	movhi	r5,16
 1016b68:	297fffc4 	addi	r5,r5,-1
 1016b6c:	80e0703a 	and	r16,r16,r3
 1016b70:	414a703a 	and	r5,r8,r5
 1016b74:	003fa806 	br	1016a18 <__alt_data_end+0xff016a18>
 1016b78:	0080630e 	bge	zero,r2,1016d08 <__subdf3+0x3d4>
 1016b7c:	48003026 	beq	r9,zero,1016c40 <__subdf3+0x30c>
 1016b80:	0101ffc4 	movi	r4,2047
 1016b84:	813f8c26 	beq	r16,r4,10169b8 <__alt_data_end+0xff0169b8>
 1016b88:	29402034 	orhi	r5,r5,128
 1016b8c:	01000e04 	movi	r4,56
 1016b90:	2080a90e 	bge	r4,r2,1016e38 <__subdf3+0x504>
 1016b94:	298cb03a 	or	r6,r5,r6
 1016b98:	3012c03a 	cmpne	r9,r6,zero
 1016b9c:	0005883a 	mov	r2,zero
 1016ba0:	4c53883a 	add	r9,r9,r17
 1016ba4:	4c63803a 	cmpltu	r17,r9,r17
 1016ba8:	10c7883a 	add	r3,r2,r3
 1016bac:	88c7883a 	add	r3,r17,r3
 1016bb0:	4823883a 	mov	r17,r9
 1016bb4:	1880202c 	andhi	r2,r3,128
 1016bb8:	1000d026 	beq	r2,zero,1016efc <__subdf3+0x5c8>
 1016bbc:	84000044 	addi	r16,r16,1
 1016bc0:	0081ffc4 	movi	r2,2047
 1016bc4:	8080fe26 	beq	r16,r2,1016fc0 <__subdf3+0x68c>
 1016bc8:	00bfe034 	movhi	r2,65408
 1016bcc:	10bfffc4 	addi	r2,r2,-1
 1016bd0:	1886703a 	and	r3,r3,r2
 1016bd4:	880ad07a 	srli	r5,r17,1
 1016bd8:	180497fa 	slli	r2,r3,31
 1016bdc:	8900004c 	andi	r4,r17,1
 1016be0:	2922b03a 	or	r17,r5,r4
 1016be4:	1806d07a 	srli	r3,r3,1
 1016be8:	1462b03a 	or	r17,r2,r17
 1016bec:	3825883a 	mov	r18,r7
 1016bf0:	003f7106 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016bf4:	2984b03a 	or	r2,r5,r6
 1016bf8:	103f6826 	beq	r2,zero,101699c <__alt_data_end+0xff01699c>
 1016bfc:	39c03fcc 	andi	r7,r7,255
 1016c00:	003f6706 	br	10169a0 <__alt_data_end+0xff0169a0>
 1016c04:	4086b03a 	or	r3,r8,r2
 1016c08:	18015226 	beq	r3,zero,1017154 <__subdf3+0x820>
 1016c0c:	00c00434 	movhi	r3,16
 1016c10:	41400234 	orhi	r5,r8,8
 1016c14:	18ffffc4 	addi	r3,r3,-1
 1016c18:	28ca703a 	and	r5,r5,r3
 1016c1c:	003f7e06 	br	1016a18 <__alt_data_end+0xff016a18>
 1016c20:	10bfffc4 	addi	r2,r2,-1
 1016c24:	1000491e 	bne	r2,zero,1016d4c <__subdf3+0x418>
 1016c28:	898fc83a 	sub	r7,r17,r6
 1016c2c:	89e3803a 	cmpltu	r17,r17,r7
 1016c30:	1947c83a 	sub	r3,r3,r5
 1016c34:	1c47c83a 	sub	r3,r3,r17
 1016c38:	3823883a 	mov	r17,r7
 1016c3c:	003f9b06 	br	1016aac <__alt_data_end+0xff016aac>
 1016c40:	2988b03a 	or	r4,r5,r6
 1016c44:	203f5c26 	beq	r4,zero,10169b8 <__alt_data_end+0xff0169b8>
 1016c48:	10bfffc4 	addi	r2,r2,-1
 1016c4c:	1000931e 	bne	r2,zero,1016e9c <__subdf3+0x568>
 1016c50:	898d883a 	add	r6,r17,r6
 1016c54:	3463803a 	cmpltu	r17,r6,r17
 1016c58:	1947883a 	add	r3,r3,r5
 1016c5c:	88c7883a 	add	r3,r17,r3
 1016c60:	3023883a 	mov	r17,r6
 1016c64:	003fd306 	br	1016bb4 <__alt_data_end+0xff016bb4>
 1016c68:	1000541e 	bne	r2,zero,1016dbc <__subdf3+0x488>
 1016c6c:	80800044 	addi	r2,r16,1
 1016c70:	1081ffcc 	andi	r2,r2,2047
 1016c74:	01000044 	movi	r4,1
 1016c78:	2080a20e 	bge	r4,r2,1016f04 <__subdf3+0x5d0>
 1016c7c:	8989c83a 	sub	r4,r17,r6
 1016c80:	8905803a 	cmpltu	r2,r17,r4
 1016c84:	1967c83a 	sub	r19,r3,r5
 1016c88:	98a7c83a 	sub	r19,r19,r2
 1016c8c:	9880202c 	andhi	r2,r19,128
 1016c90:	10006326 	beq	r2,zero,1016e20 <__subdf3+0x4ec>
 1016c94:	3463c83a 	sub	r17,r6,r17
 1016c98:	28c7c83a 	sub	r3,r5,r3
 1016c9c:	344d803a 	cmpltu	r6,r6,r17
 1016ca0:	19a7c83a 	sub	r19,r3,r6
 1016ca4:	3825883a 	mov	r18,r7
 1016ca8:	983f861e 	bne	r19,zero,1016ac4 <__alt_data_end+0xff016ac4>
 1016cac:	8809883a 	mov	r4,r17
 1016cb0:	10174340 	call	1017434 <__clzsi2>
 1016cb4:	10800804 	addi	r2,r2,32
 1016cb8:	113ffe04 	addi	r4,r2,-8
 1016cbc:	00c007c4 	movi	r3,31
 1016cc0:	193f850e 	bge	r3,r4,1016ad8 <__alt_data_end+0xff016ad8>
 1016cc4:	10bff604 	addi	r2,r2,-40
 1016cc8:	8884983a 	sll	r2,r17,r2
 1016ccc:	0023883a 	mov	r17,zero
 1016cd0:	243f880e 	bge	r4,r16,1016af4 <__alt_data_end+0xff016af4>
 1016cd4:	00ffe034 	movhi	r3,65408
 1016cd8:	18ffffc4 	addi	r3,r3,-1
 1016cdc:	8121c83a 	sub	r16,r16,r4
 1016ce0:	10c6703a 	and	r3,r2,r3
 1016ce4:	003f3406 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016ce8:	9100004c 	andi	r4,r18,1
 1016cec:	000b883a 	mov	r5,zero
 1016cf0:	0005883a 	mov	r2,zero
 1016cf4:	003f4806 	br	1016a18 <__alt_data_end+0xff016a18>
 1016cf8:	298cb03a 	or	r6,r5,r6
 1016cfc:	300cc03a 	cmpne	r6,r6,zero
 1016d00:	0005883a 	mov	r2,zero
 1016d04:	003f6406 	br	1016a98 <__alt_data_end+0xff016a98>
 1016d08:	10009a1e 	bne	r2,zero,1016f74 <__subdf3+0x640>
 1016d0c:	82400044 	addi	r9,r16,1
 1016d10:	4881ffcc 	andi	r2,r9,2047
 1016d14:	02800044 	movi	r10,1
 1016d18:	5080670e 	bge	r10,r2,1016eb8 <__subdf3+0x584>
 1016d1c:	0081ffc4 	movi	r2,2047
 1016d20:	4880af26 	beq	r9,r2,1016fe0 <__subdf3+0x6ac>
 1016d24:	898d883a 	add	r6,r17,r6
 1016d28:	1945883a 	add	r2,r3,r5
 1016d2c:	3447803a 	cmpltu	r3,r6,r17
 1016d30:	1887883a 	add	r3,r3,r2
 1016d34:	182297fa 	slli	r17,r3,31
 1016d38:	300cd07a 	srli	r6,r6,1
 1016d3c:	1806d07a 	srli	r3,r3,1
 1016d40:	4821883a 	mov	r16,r9
 1016d44:	89a2b03a 	or	r17,r17,r6
 1016d48:	003f1b06 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016d4c:	0101ffc4 	movi	r4,2047
 1016d50:	813f441e 	bne	r16,r4,1016a64 <__alt_data_end+0xff016a64>
 1016d54:	003f1806 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016d58:	843ff844 	addi	r16,r16,-31
 1016d5c:	01400804 	movi	r5,32
 1016d60:	1408d83a 	srl	r4,r2,r16
 1016d64:	19405026 	beq	r3,r5,1016ea8 <__subdf3+0x574>
 1016d68:	01401004 	movi	r5,64
 1016d6c:	28c7c83a 	sub	r3,r5,r3
 1016d70:	10c4983a 	sll	r2,r2,r3
 1016d74:	88a2b03a 	or	r17,r17,r2
 1016d78:	8822c03a 	cmpne	r17,r17,zero
 1016d7c:	2462b03a 	or	r17,r4,r17
 1016d80:	0007883a 	mov	r3,zero
 1016d84:	0021883a 	mov	r16,zero
 1016d88:	003f6d06 	br	1016b40 <__alt_data_end+0xff016b40>
 1016d8c:	11fff804 	addi	r7,r2,-32
 1016d90:	01000804 	movi	r4,32
 1016d94:	29ced83a 	srl	r7,r5,r7
 1016d98:	11004526 	beq	r2,r4,1016eb0 <__subdf3+0x57c>
 1016d9c:	01001004 	movi	r4,64
 1016da0:	2089c83a 	sub	r4,r4,r2
 1016da4:	2904983a 	sll	r2,r5,r4
 1016da8:	118cb03a 	or	r6,r2,r6
 1016dac:	300cc03a 	cmpne	r6,r6,zero
 1016db0:	398cb03a 	or	r6,r7,r6
 1016db4:	0005883a 	mov	r2,zero
 1016db8:	003f3706 	br	1016a98 <__alt_data_end+0xff016a98>
 1016dbc:	80002a26 	beq	r16,zero,1016e68 <__subdf3+0x534>
 1016dc0:	0101ffc4 	movi	r4,2047
 1016dc4:	49006626 	beq	r9,r4,1016f60 <__subdf3+0x62c>
 1016dc8:	0085c83a 	sub	r2,zero,r2
 1016dcc:	18c02034 	orhi	r3,r3,128
 1016dd0:	01000e04 	movi	r4,56
 1016dd4:	20807e16 	blt	r4,r2,1016fd0 <__subdf3+0x69c>
 1016dd8:	010007c4 	movi	r4,31
 1016ddc:	2080e716 	blt	r4,r2,101717c <__subdf3+0x848>
 1016de0:	01000804 	movi	r4,32
 1016de4:	2089c83a 	sub	r4,r4,r2
 1016de8:	1914983a 	sll	r10,r3,r4
 1016dec:	8890d83a 	srl	r8,r17,r2
 1016df0:	8908983a 	sll	r4,r17,r4
 1016df4:	1884d83a 	srl	r2,r3,r2
 1016df8:	5222b03a 	or	r17,r10,r8
 1016dfc:	2006c03a 	cmpne	r3,r4,zero
 1016e00:	88e2b03a 	or	r17,r17,r3
 1016e04:	3463c83a 	sub	r17,r6,r17
 1016e08:	2885c83a 	sub	r2,r5,r2
 1016e0c:	344d803a 	cmpltu	r6,r6,r17
 1016e10:	1187c83a 	sub	r3,r2,r6
 1016e14:	4821883a 	mov	r16,r9
 1016e18:	3825883a 	mov	r18,r7
 1016e1c:	003f2306 	br	1016aac <__alt_data_end+0xff016aac>
 1016e20:	24d0b03a 	or	r8,r4,r19
 1016e24:	40001b1e 	bne	r8,zero,1016e94 <__subdf3+0x560>
 1016e28:	0005883a 	mov	r2,zero
 1016e2c:	0009883a 	mov	r4,zero
 1016e30:	0021883a 	mov	r16,zero
 1016e34:	003f4906 	br	1016b5c <__alt_data_end+0xff016b5c>
 1016e38:	010007c4 	movi	r4,31
 1016e3c:	20803a16 	blt	r4,r2,1016f28 <__subdf3+0x5f4>
 1016e40:	01000804 	movi	r4,32
 1016e44:	2089c83a 	sub	r4,r4,r2
 1016e48:	2912983a 	sll	r9,r5,r4
 1016e4c:	3090d83a 	srl	r8,r6,r2
 1016e50:	3108983a 	sll	r4,r6,r4
 1016e54:	2884d83a 	srl	r2,r5,r2
 1016e58:	4a12b03a 	or	r9,r9,r8
 1016e5c:	2008c03a 	cmpne	r4,r4,zero
 1016e60:	4912b03a 	or	r9,r9,r4
 1016e64:	003f4e06 	br	1016ba0 <__alt_data_end+0xff016ba0>
 1016e68:	1c48b03a 	or	r4,r3,r17
 1016e6c:	20003c26 	beq	r4,zero,1016f60 <__subdf3+0x62c>
 1016e70:	0084303a 	nor	r2,zero,r2
 1016e74:	1000381e 	bne	r2,zero,1016f58 <__subdf3+0x624>
 1016e78:	3463c83a 	sub	r17,r6,r17
 1016e7c:	28c5c83a 	sub	r2,r5,r3
 1016e80:	344d803a 	cmpltu	r6,r6,r17
 1016e84:	1187c83a 	sub	r3,r2,r6
 1016e88:	4821883a 	mov	r16,r9
 1016e8c:	3825883a 	mov	r18,r7
 1016e90:	003f0606 	br	1016aac <__alt_data_end+0xff016aac>
 1016e94:	2023883a 	mov	r17,r4
 1016e98:	003f0906 	br	1016ac0 <__alt_data_end+0xff016ac0>
 1016e9c:	0101ffc4 	movi	r4,2047
 1016ea0:	813f3a1e 	bne	r16,r4,1016b8c <__alt_data_end+0xff016b8c>
 1016ea4:	003ec406 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016ea8:	0005883a 	mov	r2,zero
 1016eac:	003fb106 	br	1016d74 <__alt_data_end+0xff016d74>
 1016eb0:	0005883a 	mov	r2,zero
 1016eb4:	003fbc06 	br	1016da8 <__alt_data_end+0xff016da8>
 1016eb8:	1c44b03a 	or	r2,r3,r17
 1016ebc:	80008e1e 	bne	r16,zero,10170f8 <__subdf3+0x7c4>
 1016ec0:	1000c826 	beq	r2,zero,10171e4 <__subdf3+0x8b0>
 1016ec4:	2984b03a 	or	r2,r5,r6
 1016ec8:	103ebb26 	beq	r2,zero,10169b8 <__alt_data_end+0xff0169b8>
 1016ecc:	8989883a 	add	r4,r17,r6
 1016ed0:	1945883a 	add	r2,r3,r5
 1016ed4:	2447803a 	cmpltu	r3,r4,r17
 1016ed8:	1887883a 	add	r3,r3,r2
 1016edc:	1880202c 	andhi	r2,r3,128
 1016ee0:	2023883a 	mov	r17,r4
 1016ee4:	103f1626 	beq	r2,zero,1016b40 <__alt_data_end+0xff016b40>
 1016ee8:	00bfe034 	movhi	r2,65408
 1016eec:	10bfffc4 	addi	r2,r2,-1
 1016ef0:	5021883a 	mov	r16,r10
 1016ef4:	1886703a 	and	r3,r3,r2
 1016ef8:	003eaf06 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016efc:	3825883a 	mov	r18,r7
 1016f00:	003f0f06 	br	1016b40 <__alt_data_end+0xff016b40>
 1016f04:	1c44b03a 	or	r2,r3,r17
 1016f08:	8000251e 	bne	r16,zero,1016fa0 <__subdf3+0x66c>
 1016f0c:	1000661e 	bne	r2,zero,10170a8 <__subdf3+0x774>
 1016f10:	2990b03a 	or	r8,r5,r6
 1016f14:	40009626 	beq	r8,zero,1017170 <__subdf3+0x83c>
 1016f18:	2807883a 	mov	r3,r5
 1016f1c:	3023883a 	mov	r17,r6
 1016f20:	3825883a 	mov	r18,r7
 1016f24:	003ea406 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016f28:	127ff804 	addi	r9,r2,-32
 1016f2c:	01000804 	movi	r4,32
 1016f30:	2a52d83a 	srl	r9,r5,r9
 1016f34:	11008c26 	beq	r2,r4,1017168 <__subdf3+0x834>
 1016f38:	01001004 	movi	r4,64
 1016f3c:	2085c83a 	sub	r2,r4,r2
 1016f40:	2884983a 	sll	r2,r5,r2
 1016f44:	118cb03a 	or	r6,r2,r6
 1016f48:	300cc03a 	cmpne	r6,r6,zero
 1016f4c:	4992b03a 	or	r9,r9,r6
 1016f50:	0005883a 	mov	r2,zero
 1016f54:	003f1206 	br	1016ba0 <__alt_data_end+0xff016ba0>
 1016f58:	0101ffc4 	movi	r4,2047
 1016f5c:	493f9c1e 	bne	r9,r4,1016dd0 <__alt_data_end+0xff016dd0>
 1016f60:	2807883a 	mov	r3,r5
 1016f64:	3023883a 	mov	r17,r6
 1016f68:	4821883a 	mov	r16,r9
 1016f6c:	3825883a 	mov	r18,r7
 1016f70:	003e9106 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016f74:	80001f1e 	bne	r16,zero,1016ff4 <__subdf3+0x6c0>
 1016f78:	1c48b03a 	or	r4,r3,r17
 1016f7c:	20005a26 	beq	r4,zero,10170e8 <__subdf3+0x7b4>
 1016f80:	0084303a 	nor	r2,zero,r2
 1016f84:	1000561e 	bne	r2,zero,10170e0 <__subdf3+0x7ac>
 1016f88:	89a3883a 	add	r17,r17,r6
 1016f8c:	1945883a 	add	r2,r3,r5
 1016f90:	898d803a 	cmpltu	r6,r17,r6
 1016f94:	3087883a 	add	r3,r6,r2
 1016f98:	4821883a 	mov	r16,r9
 1016f9c:	003f0506 	br	1016bb4 <__alt_data_end+0xff016bb4>
 1016fa0:	10002b1e 	bne	r2,zero,1017050 <__subdf3+0x71c>
 1016fa4:	2984b03a 	or	r2,r5,r6
 1016fa8:	10008026 	beq	r2,zero,10171ac <__subdf3+0x878>
 1016fac:	2807883a 	mov	r3,r5
 1016fb0:	3023883a 	mov	r17,r6
 1016fb4:	3825883a 	mov	r18,r7
 1016fb8:	0401ffc4 	movi	r16,2047
 1016fbc:	003e7e06 	br	10169b8 <__alt_data_end+0xff0169b8>
 1016fc0:	3809883a 	mov	r4,r7
 1016fc4:	0011883a 	mov	r8,zero
 1016fc8:	0005883a 	mov	r2,zero
 1016fcc:	003ee306 	br	1016b5c <__alt_data_end+0xff016b5c>
 1016fd0:	1c62b03a 	or	r17,r3,r17
 1016fd4:	8822c03a 	cmpne	r17,r17,zero
 1016fd8:	0005883a 	mov	r2,zero
 1016fdc:	003f8906 	br	1016e04 <__alt_data_end+0xff016e04>
 1016fe0:	3809883a 	mov	r4,r7
 1016fe4:	4821883a 	mov	r16,r9
 1016fe8:	0011883a 	mov	r8,zero
 1016fec:	0005883a 	mov	r2,zero
 1016ff0:	003eda06 	br	1016b5c <__alt_data_end+0xff016b5c>
 1016ff4:	0101ffc4 	movi	r4,2047
 1016ff8:	49003b26 	beq	r9,r4,10170e8 <__subdf3+0x7b4>
 1016ffc:	0085c83a 	sub	r2,zero,r2
 1017000:	18c02034 	orhi	r3,r3,128
 1017004:	01000e04 	movi	r4,56
 1017008:	20806e16 	blt	r4,r2,10171c4 <__subdf3+0x890>
 101700c:	010007c4 	movi	r4,31
 1017010:	20807716 	blt	r4,r2,10171f0 <__subdf3+0x8bc>
 1017014:	01000804 	movi	r4,32
 1017018:	2089c83a 	sub	r4,r4,r2
 101701c:	1914983a 	sll	r10,r3,r4
 1017020:	8890d83a 	srl	r8,r17,r2
 1017024:	8908983a 	sll	r4,r17,r4
 1017028:	1884d83a 	srl	r2,r3,r2
 101702c:	5222b03a 	or	r17,r10,r8
 1017030:	2006c03a 	cmpne	r3,r4,zero
 1017034:	88e2b03a 	or	r17,r17,r3
 1017038:	89a3883a 	add	r17,r17,r6
 101703c:	1145883a 	add	r2,r2,r5
 1017040:	898d803a 	cmpltu	r6,r17,r6
 1017044:	3087883a 	add	r3,r6,r2
 1017048:	4821883a 	mov	r16,r9
 101704c:	003ed906 	br	1016bb4 <__alt_data_end+0xff016bb4>
 1017050:	2984b03a 	or	r2,r5,r6
 1017054:	10004226 	beq	r2,zero,1017160 <__subdf3+0x82c>
 1017058:	1808d0fa 	srli	r4,r3,3
 101705c:	8822d0fa 	srli	r17,r17,3
 1017060:	1806977a 	slli	r3,r3,29
 1017064:	2080022c 	andhi	r2,r4,8
 1017068:	1c62b03a 	or	r17,r3,r17
 101706c:	10000826 	beq	r2,zero,1017090 <__subdf3+0x75c>
 1017070:	2812d0fa 	srli	r9,r5,3
 1017074:	4880022c 	andhi	r2,r9,8
 1017078:	1000051e 	bne	r2,zero,1017090 <__subdf3+0x75c>
 101707c:	300cd0fa 	srli	r6,r6,3
 1017080:	2804977a 	slli	r2,r5,29
 1017084:	4809883a 	mov	r4,r9
 1017088:	3825883a 	mov	r18,r7
 101708c:	11a2b03a 	or	r17,r2,r6
 1017090:	8806d77a 	srli	r3,r17,29
 1017094:	200890fa 	slli	r4,r4,3
 1017098:	882290fa 	slli	r17,r17,3
 101709c:	0401ffc4 	movi	r16,2047
 10170a0:	1906b03a 	or	r3,r3,r4
 10170a4:	003e4406 	br	10169b8 <__alt_data_end+0xff0169b8>
 10170a8:	2984b03a 	or	r2,r5,r6
 10170ac:	103e4226 	beq	r2,zero,10169b8 <__alt_data_end+0xff0169b8>
 10170b0:	8989c83a 	sub	r4,r17,r6
 10170b4:	8911803a 	cmpltu	r8,r17,r4
 10170b8:	1945c83a 	sub	r2,r3,r5
 10170bc:	1205c83a 	sub	r2,r2,r8
 10170c0:	1200202c 	andhi	r8,r2,128
 10170c4:	403e9a26 	beq	r8,zero,1016b30 <__alt_data_end+0xff016b30>
 10170c8:	3463c83a 	sub	r17,r6,r17
 10170cc:	28c5c83a 	sub	r2,r5,r3
 10170d0:	344d803a 	cmpltu	r6,r6,r17
 10170d4:	1187c83a 	sub	r3,r2,r6
 10170d8:	3825883a 	mov	r18,r7
 10170dc:	003e3606 	br	10169b8 <__alt_data_end+0xff0169b8>
 10170e0:	0101ffc4 	movi	r4,2047
 10170e4:	493fc71e 	bne	r9,r4,1017004 <__alt_data_end+0xff017004>
 10170e8:	2807883a 	mov	r3,r5
 10170ec:	3023883a 	mov	r17,r6
 10170f0:	4821883a 	mov	r16,r9
 10170f4:	003e3006 	br	10169b8 <__alt_data_end+0xff0169b8>
 10170f8:	10003626 	beq	r2,zero,10171d4 <__subdf3+0x8a0>
 10170fc:	2984b03a 	or	r2,r5,r6
 1017100:	10001726 	beq	r2,zero,1017160 <__subdf3+0x82c>
 1017104:	1808d0fa 	srli	r4,r3,3
 1017108:	8822d0fa 	srli	r17,r17,3
 101710c:	1806977a 	slli	r3,r3,29
 1017110:	2080022c 	andhi	r2,r4,8
 1017114:	1c62b03a 	or	r17,r3,r17
 1017118:	10000726 	beq	r2,zero,1017138 <__subdf3+0x804>
 101711c:	2812d0fa 	srli	r9,r5,3
 1017120:	4880022c 	andhi	r2,r9,8
 1017124:	1000041e 	bne	r2,zero,1017138 <__subdf3+0x804>
 1017128:	300cd0fa 	srli	r6,r6,3
 101712c:	2804977a 	slli	r2,r5,29
 1017130:	4809883a 	mov	r4,r9
 1017134:	11a2b03a 	or	r17,r2,r6
 1017138:	8806d77a 	srli	r3,r17,29
 101713c:	200890fa 	slli	r4,r4,3
 1017140:	882290fa 	slli	r17,r17,3
 1017144:	3825883a 	mov	r18,r7
 1017148:	1906b03a 	or	r3,r3,r4
 101714c:	0401ffc4 	movi	r16,2047
 1017150:	003e1906 	br	10169b8 <__alt_data_end+0xff0169b8>
 1017154:	000b883a 	mov	r5,zero
 1017158:	0005883a 	mov	r2,zero
 101715c:	003e2e06 	br	1016a18 <__alt_data_end+0xff016a18>
 1017160:	0401ffc4 	movi	r16,2047
 1017164:	003e1406 	br	10169b8 <__alt_data_end+0xff0169b8>
 1017168:	0005883a 	mov	r2,zero
 101716c:	003f7506 	br	1016f44 <__alt_data_end+0xff016f44>
 1017170:	0005883a 	mov	r2,zero
 1017174:	0009883a 	mov	r4,zero
 1017178:	003e7806 	br	1016b5c <__alt_data_end+0xff016b5c>
 101717c:	123ff804 	addi	r8,r2,-32
 1017180:	01000804 	movi	r4,32
 1017184:	1a10d83a 	srl	r8,r3,r8
 1017188:	11002526 	beq	r2,r4,1017220 <__subdf3+0x8ec>
 101718c:	01001004 	movi	r4,64
 1017190:	2085c83a 	sub	r2,r4,r2
 1017194:	1884983a 	sll	r2,r3,r2
 1017198:	1444b03a 	or	r2,r2,r17
 101719c:	1004c03a 	cmpne	r2,r2,zero
 10171a0:	40a2b03a 	or	r17,r8,r2
 10171a4:	0005883a 	mov	r2,zero
 10171a8:	003f1606 	br	1016e04 <__alt_data_end+0xff016e04>
 10171ac:	02000434 	movhi	r8,16
 10171b0:	0009883a 	mov	r4,zero
 10171b4:	423fffc4 	addi	r8,r8,-1
 10171b8:	00bfffc4 	movi	r2,-1
 10171bc:	0401ffc4 	movi	r16,2047
 10171c0:	003e6606 	br	1016b5c <__alt_data_end+0xff016b5c>
 10171c4:	1c62b03a 	or	r17,r3,r17
 10171c8:	8822c03a 	cmpne	r17,r17,zero
 10171cc:	0005883a 	mov	r2,zero
 10171d0:	003f9906 	br	1017038 <__alt_data_end+0xff017038>
 10171d4:	2807883a 	mov	r3,r5
 10171d8:	3023883a 	mov	r17,r6
 10171dc:	0401ffc4 	movi	r16,2047
 10171e0:	003df506 	br	10169b8 <__alt_data_end+0xff0169b8>
 10171e4:	2807883a 	mov	r3,r5
 10171e8:	3023883a 	mov	r17,r6
 10171ec:	003df206 	br	10169b8 <__alt_data_end+0xff0169b8>
 10171f0:	123ff804 	addi	r8,r2,-32
 10171f4:	01000804 	movi	r4,32
 10171f8:	1a10d83a 	srl	r8,r3,r8
 10171fc:	11000a26 	beq	r2,r4,1017228 <__subdf3+0x8f4>
 1017200:	01001004 	movi	r4,64
 1017204:	2085c83a 	sub	r2,r4,r2
 1017208:	1884983a 	sll	r2,r3,r2
 101720c:	1444b03a 	or	r2,r2,r17
 1017210:	1004c03a 	cmpne	r2,r2,zero
 1017214:	40a2b03a 	or	r17,r8,r2
 1017218:	0005883a 	mov	r2,zero
 101721c:	003f8606 	br	1017038 <__alt_data_end+0xff017038>
 1017220:	0005883a 	mov	r2,zero
 1017224:	003fdc06 	br	1017198 <__alt_data_end+0xff017198>
 1017228:	0005883a 	mov	r2,zero
 101722c:	003ff706 	br	101720c <__alt_data_end+0xff01720c>

01017230 <__fixdfsi>:
 1017230:	280cd53a 	srli	r6,r5,20
 1017234:	00c00434 	movhi	r3,16
 1017238:	18ffffc4 	addi	r3,r3,-1
 101723c:	3181ffcc 	andi	r6,r6,2047
 1017240:	01c0ff84 	movi	r7,1022
 1017244:	28c6703a 	and	r3,r5,r3
 1017248:	280ad7fa 	srli	r5,r5,31
 101724c:	3980120e 	bge	r7,r6,1017298 <__fixdfsi+0x68>
 1017250:	00810744 	movi	r2,1053
 1017254:	11800c16 	blt	r2,r6,1017288 <__fixdfsi+0x58>
 1017258:	00810cc4 	movi	r2,1075
 101725c:	1185c83a 	sub	r2,r2,r6
 1017260:	01c007c4 	movi	r7,31
 1017264:	18c00434 	orhi	r3,r3,16
 1017268:	38800d16 	blt	r7,r2,10172a0 <__fixdfsi+0x70>
 101726c:	31befb44 	addi	r6,r6,-1043
 1017270:	2084d83a 	srl	r2,r4,r2
 1017274:	1986983a 	sll	r3,r3,r6
 1017278:	1884b03a 	or	r2,r3,r2
 101727c:	28000726 	beq	r5,zero,101729c <__fixdfsi+0x6c>
 1017280:	0085c83a 	sub	r2,zero,r2
 1017284:	f800283a 	ret
 1017288:	00a00034 	movhi	r2,32768
 101728c:	10bfffc4 	addi	r2,r2,-1
 1017290:	2885883a 	add	r2,r5,r2
 1017294:	f800283a 	ret
 1017298:	0005883a 	mov	r2,zero
 101729c:	f800283a 	ret
 10172a0:	008104c4 	movi	r2,1043
 10172a4:	1185c83a 	sub	r2,r2,r6
 10172a8:	1884d83a 	srl	r2,r3,r2
 10172ac:	003ff306 	br	101727c <__alt_data_end+0xff01727c>

010172b0 <__floatsidf>:
 10172b0:	defffd04 	addi	sp,sp,-12
 10172b4:	dfc00215 	stw	ra,8(sp)
 10172b8:	dc400115 	stw	r17,4(sp)
 10172bc:	dc000015 	stw	r16,0(sp)
 10172c0:	20002b26 	beq	r4,zero,1017370 <__floatsidf+0xc0>
 10172c4:	2023883a 	mov	r17,r4
 10172c8:	2020d7fa 	srli	r16,r4,31
 10172cc:	20002d16 	blt	r4,zero,1017384 <__floatsidf+0xd4>
 10172d0:	8809883a 	mov	r4,r17
 10172d4:	10174340 	call	1017434 <__clzsi2>
 10172d8:	01410784 	movi	r5,1054
 10172dc:	288bc83a 	sub	r5,r5,r2
 10172e0:	01010cc4 	movi	r4,1075
 10172e4:	2149c83a 	sub	r4,r4,r5
 10172e8:	00c007c4 	movi	r3,31
 10172ec:	1900160e 	bge	r3,r4,1017348 <__floatsidf+0x98>
 10172f0:	00c104c4 	movi	r3,1043
 10172f4:	1947c83a 	sub	r3,r3,r5
 10172f8:	88c6983a 	sll	r3,r17,r3
 10172fc:	00800434 	movhi	r2,16
 1017300:	10bfffc4 	addi	r2,r2,-1
 1017304:	1886703a 	and	r3,r3,r2
 1017308:	2941ffcc 	andi	r5,r5,2047
 101730c:	800d883a 	mov	r6,r16
 1017310:	0005883a 	mov	r2,zero
 1017314:	280a953a 	slli	r5,r5,20
 1017318:	31803fcc 	andi	r6,r6,255
 101731c:	01000434 	movhi	r4,16
 1017320:	300c97fa 	slli	r6,r6,31
 1017324:	213fffc4 	addi	r4,r4,-1
 1017328:	1906703a 	and	r3,r3,r4
 101732c:	1946b03a 	or	r3,r3,r5
 1017330:	1986b03a 	or	r3,r3,r6
 1017334:	dfc00217 	ldw	ra,8(sp)
 1017338:	dc400117 	ldw	r17,4(sp)
 101733c:	dc000017 	ldw	r16,0(sp)
 1017340:	dec00304 	addi	sp,sp,12
 1017344:	f800283a 	ret
 1017348:	00c002c4 	movi	r3,11
 101734c:	1887c83a 	sub	r3,r3,r2
 1017350:	88c6d83a 	srl	r3,r17,r3
 1017354:	8904983a 	sll	r2,r17,r4
 1017358:	01000434 	movhi	r4,16
 101735c:	213fffc4 	addi	r4,r4,-1
 1017360:	2941ffcc 	andi	r5,r5,2047
 1017364:	1906703a 	and	r3,r3,r4
 1017368:	800d883a 	mov	r6,r16
 101736c:	003fe906 	br	1017314 <__alt_data_end+0xff017314>
 1017370:	000d883a 	mov	r6,zero
 1017374:	000b883a 	mov	r5,zero
 1017378:	0007883a 	mov	r3,zero
 101737c:	0005883a 	mov	r2,zero
 1017380:	003fe406 	br	1017314 <__alt_data_end+0xff017314>
 1017384:	0123c83a 	sub	r17,zero,r4
 1017388:	003fd106 	br	10172d0 <__alt_data_end+0xff0172d0>

0101738c <__floatunsidf>:
 101738c:	defffe04 	addi	sp,sp,-8
 1017390:	dc000015 	stw	r16,0(sp)
 1017394:	dfc00115 	stw	ra,4(sp)
 1017398:	2021883a 	mov	r16,r4
 101739c:	20002226 	beq	r4,zero,1017428 <__floatunsidf+0x9c>
 10173a0:	10174340 	call	1017434 <__clzsi2>
 10173a4:	01010784 	movi	r4,1054
 10173a8:	2089c83a 	sub	r4,r4,r2
 10173ac:	01810cc4 	movi	r6,1075
 10173b0:	310dc83a 	sub	r6,r6,r4
 10173b4:	00c007c4 	movi	r3,31
 10173b8:	1980120e 	bge	r3,r6,1017404 <__floatunsidf+0x78>
 10173bc:	00c104c4 	movi	r3,1043
 10173c0:	1907c83a 	sub	r3,r3,r4
 10173c4:	80ca983a 	sll	r5,r16,r3
 10173c8:	00800434 	movhi	r2,16
 10173cc:	10bfffc4 	addi	r2,r2,-1
 10173d0:	2101ffcc 	andi	r4,r4,2047
 10173d4:	0021883a 	mov	r16,zero
 10173d8:	288a703a 	and	r5,r5,r2
 10173dc:	2008953a 	slli	r4,r4,20
 10173e0:	00c00434 	movhi	r3,16
 10173e4:	18ffffc4 	addi	r3,r3,-1
 10173e8:	28c6703a 	and	r3,r5,r3
 10173ec:	8005883a 	mov	r2,r16
 10173f0:	1906b03a 	or	r3,r3,r4
 10173f4:	dfc00117 	ldw	ra,4(sp)
 10173f8:	dc000017 	ldw	r16,0(sp)
 10173fc:	dec00204 	addi	sp,sp,8
 1017400:	f800283a 	ret
 1017404:	00c002c4 	movi	r3,11
 1017408:	188bc83a 	sub	r5,r3,r2
 101740c:	814ad83a 	srl	r5,r16,r5
 1017410:	00c00434 	movhi	r3,16
 1017414:	18ffffc4 	addi	r3,r3,-1
 1017418:	81a0983a 	sll	r16,r16,r6
 101741c:	2101ffcc 	andi	r4,r4,2047
 1017420:	28ca703a 	and	r5,r5,r3
 1017424:	003fed06 	br	10173dc <__alt_data_end+0xff0173dc>
 1017428:	0009883a 	mov	r4,zero
 101742c:	000b883a 	mov	r5,zero
 1017430:	003fea06 	br	10173dc <__alt_data_end+0xff0173dc>

01017434 <__clzsi2>:
 1017434:	00bfffd4 	movui	r2,65535
 1017438:	11000536 	bltu	r2,r4,1017450 <__clzsi2+0x1c>
 101743c:	00803fc4 	movi	r2,255
 1017440:	11000f36 	bltu	r2,r4,1017480 <__clzsi2+0x4c>
 1017444:	00800804 	movi	r2,32
 1017448:	0007883a 	mov	r3,zero
 101744c:	00000506 	br	1017464 <__clzsi2+0x30>
 1017450:	00804034 	movhi	r2,256
 1017454:	10bfffc4 	addi	r2,r2,-1
 1017458:	11000c2e 	bgeu	r2,r4,101748c <__clzsi2+0x58>
 101745c:	00800204 	movi	r2,8
 1017460:	00c00604 	movi	r3,24
 1017464:	20c8d83a 	srl	r4,r4,r3
 1017468:	00c040b4 	movhi	r3,258
 101746c:	18ec1004 	addi	r3,r3,-20416
 1017470:	1909883a 	add	r4,r3,r4
 1017474:	20c00003 	ldbu	r3,0(r4)
 1017478:	10c5c83a 	sub	r2,r2,r3
 101747c:	f800283a 	ret
 1017480:	00800604 	movi	r2,24
 1017484:	00c00204 	movi	r3,8
 1017488:	003ff606 	br	1017464 <__alt_data_end+0xff017464>
 101748c:	00800404 	movi	r2,16
 1017490:	1007883a 	mov	r3,r2
 1017494:	003ff306 	br	1017464 <__alt_data_end+0xff017464>

01017498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017498:	defffe04 	addi	sp,sp,-8
 101749c:	dfc00115 	stw	ra,4(sp)
 10174a0:	df000015 	stw	fp,0(sp)
 10174a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10174a8:	d0a01517 	ldw	r2,-32684(gp)
 10174ac:	10000326 	beq	r2,zero,10174bc <alt_get_errno+0x24>
 10174b0:	d0a01517 	ldw	r2,-32684(gp)
 10174b4:	103ee83a 	callr	r2
 10174b8:	00000106 	br	10174c0 <alt_get_errno+0x28>
 10174bc:	d0a72904 	addi	r2,gp,-25436
}
 10174c0:	e037883a 	mov	sp,fp
 10174c4:	dfc00117 	ldw	ra,4(sp)
 10174c8:	df000017 	ldw	fp,0(sp)
 10174cc:	dec00204 	addi	sp,sp,8
 10174d0:	f800283a 	ret

010174d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10174d4:	defffb04 	addi	sp,sp,-20
 10174d8:	dfc00415 	stw	ra,16(sp)
 10174dc:	df000315 	stw	fp,12(sp)
 10174e0:	df000304 	addi	fp,sp,12
 10174e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10174e8:	e0bfff17 	ldw	r2,-4(fp)
 10174ec:	10000616 	blt	r2,zero,1017508 <close+0x34>
 10174f0:	e0bfff17 	ldw	r2,-4(fp)
 10174f4:	10c00324 	muli	r3,r2,12
 10174f8:	008040b4 	movhi	r2,258
 10174fc:	10aebb04 	addi	r2,r2,-17684
 1017500:	1885883a 	add	r2,r3,r2
 1017504:	00000106 	br	101750c <close+0x38>
 1017508:	0005883a 	mov	r2,zero
 101750c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1017510:	e0bffd17 	ldw	r2,-12(fp)
 1017514:	10001926 	beq	r2,zero,101757c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1017518:	e0bffd17 	ldw	r2,-12(fp)
 101751c:	10800017 	ldw	r2,0(r2)
 1017520:	10800417 	ldw	r2,16(r2)
 1017524:	10000626 	beq	r2,zero,1017540 <close+0x6c>
 1017528:	e0bffd17 	ldw	r2,-12(fp)
 101752c:	10800017 	ldw	r2,0(r2)
 1017530:	10800417 	ldw	r2,16(r2)
 1017534:	e13ffd17 	ldw	r4,-12(fp)
 1017538:	103ee83a 	callr	r2
 101753c:	00000106 	br	1017544 <close+0x70>
 1017540:	0005883a 	mov	r2,zero
 1017544:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1017548:	e13fff17 	ldw	r4,-4(fp)
 101754c:	1017ec40 	call	1017ec4 <alt_release_fd>
    if (rval < 0)
 1017550:	e0bffe17 	ldw	r2,-8(fp)
 1017554:	1000070e 	bge	r2,zero,1017574 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1017558:	10174980 	call	1017498 <alt_get_errno>
 101755c:	1007883a 	mov	r3,r2
 1017560:	e0bffe17 	ldw	r2,-8(fp)
 1017564:	0085c83a 	sub	r2,zero,r2
 1017568:	18800015 	stw	r2,0(r3)
      return -1;
 101756c:	00bfffc4 	movi	r2,-1
 1017570:	00000706 	br	1017590 <close+0xbc>
    }
    return 0;
 1017574:	0005883a 	mov	r2,zero
 1017578:	00000506 	br	1017590 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101757c:	10174980 	call	1017498 <alt_get_errno>
 1017580:	1007883a 	mov	r3,r2
 1017584:	00801444 	movi	r2,81
 1017588:	18800015 	stw	r2,0(r3)
    return -1;
 101758c:	00bfffc4 	movi	r2,-1
  }
}
 1017590:	e037883a 	mov	sp,fp
 1017594:	dfc00117 	ldw	ra,4(sp)
 1017598:	df000017 	ldw	fp,0(sp)
 101759c:	dec00204 	addi	sp,sp,8
 10175a0:	f800283a 	ret

010175a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10175a4:	defffc04 	addi	sp,sp,-16
 10175a8:	df000315 	stw	fp,12(sp)
 10175ac:	df000304 	addi	fp,sp,12
 10175b0:	e13ffd15 	stw	r4,-12(fp)
 10175b4:	e17ffe15 	stw	r5,-8(fp)
 10175b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10175bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10175c0:	e037883a 	mov	sp,fp
 10175c4:	df000017 	ldw	fp,0(sp)
 10175c8:	dec00104 	addi	sp,sp,4
 10175cc:	f800283a 	ret

010175d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10175d0:	defffd04 	addi	sp,sp,-12
 10175d4:	df000215 	stw	fp,8(sp)
 10175d8:	df000204 	addi	fp,sp,8
 10175dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10175e0:	0001883a 	nop
 10175e4:	e0bfff17 	ldw	r2,-4(fp)
 10175e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10175ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10175f0:	10000226 	beq	r2,zero,10175fc <_exit+0x2c>
    ALT_SIM_FAIL();
 10175f4:	002af070 	cmpltui	zero,zero,43969
 10175f8:	00000106 	br	1017600 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10175fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1017600:	003fff06 	br	1017600 <__alt_data_end+0xff017600>

01017604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017604:	defffe04 	addi	sp,sp,-8
 1017608:	dfc00115 	stw	ra,4(sp)
 101760c:	df000015 	stw	fp,0(sp)
 1017610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1017614:	d0a01517 	ldw	r2,-32684(gp)
 1017618:	10000326 	beq	r2,zero,1017628 <alt_get_errno+0x24>
 101761c:	d0a01517 	ldw	r2,-32684(gp)
 1017620:	103ee83a 	callr	r2
 1017624:	00000106 	br	101762c <alt_get_errno+0x28>
 1017628:	d0a72904 	addi	r2,gp,-25436
}
 101762c:	e037883a 	mov	sp,fp
 1017630:	dfc00117 	ldw	ra,4(sp)
 1017634:	df000017 	ldw	fp,0(sp)
 1017638:	dec00204 	addi	sp,sp,8
 101763c:	f800283a 	ret

01017640 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1017640:	defffb04 	addi	sp,sp,-20
 1017644:	dfc00415 	stw	ra,16(sp)
 1017648:	df000315 	stw	fp,12(sp)
 101764c:	df000304 	addi	fp,sp,12
 1017650:	e13ffe15 	stw	r4,-8(fp)
 1017654:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1017658:	e0bffe17 	ldw	r2,-8(fp)
 101765c:	10000616 	blt	r2,zero,1017678 <fstat+0x38>
 1017660:	e0bffe17 	ldw	r2,-8(fp)
 1017664:	10c00324 	muli	r3,r2,12
 1017668:	008040b4 	movhi	r2,258
 101766c:	10aebb04 	addi	r2,r2,-17684
 1017670:	1885883a 	add	r2,r3,r2
 1017674:	00000106 	br	101767c <fstat+0x3c>
 1017678:	0005883a 	mov	r2,zero
 101767c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1017680:	e0bffd17 	ldw	r2,-12(fp)
 1017684:	10001026 	beq	r2,zero,10176c8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1017688:	e0bffd17 	ldw	r2,-12(fp)
 101768c:	10800017 	ldw	r2,0(r2)
 1017690:	10800817 	ldw	r2,32(r2)
 1017694:	10000726 	beq	r2,zero,10176b4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1017698:	e0bffd17 	ldw	r2,-12(fp)
 101769c:	10800017 	ldw	r2,0(r2)
 10176a0:	10800817 	ldw	r2,32(r2)
 10176a4:	e17fff17 	ldw	r5,-4(fp)
 10176a8:	e13ffd17 	ldw	r4,-12(fp)
 10176ac:	103ee83a 	callr	r2
 10176b0:	00000a06 	br	10176dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 10176b4:	e0bfff17 	ldw	r2,-4(fp)
 10176b8:	00c80004 	movi	r3,8192
 10176bc:	10c00115 	stw	r3,4(r2)
      return 0;
 10176c0:	0005883a 	mov	r2,zero
 10176c4:	00000506 	br	10176dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10176c8:	10176040 	call	1017604 <alt_get_errno>
 10176cc:	1007883a 	mov	r3,r2
 10176d0:	00801444 	movi	r2,81
 10176d4:	18800015 	stw	r2,0(r3)
    return -1;
 10176d8:	00bfffc4 	movi	r2,-1
  }
}
 10176dc:	e037883a 	mov	sp,fp
 10176e0:	dfc00117 	ldw	ra,4(sp)
 10176e4:	df000017 	ldw	fp,0(sp)
 10176e8:	dec00204 	addi	sp,sp,8
 10176ec:	f800283a 	ret

010176f0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 10176f0:	deffff04 	addi	sp,sp,-4
 10176f4:	df000015 	stw	fp,0(sp)
 10176f8:	d839883a 	mov	fp,sp
  return 0;
 10176fc:	0005883a 	mov	r2,zero
}
 1017700:	e037883a 	mov	sp,fp
 1017704:	df000017 	ldw	fp,0(sp)
 1017708:	dec00104 	addi	sp,sp,4
 101770c:	f800283a 	ret

01017710 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1017710:	defff104 	addi	sp,sp,-60
 1017714:	df000e15 	stw	fp,56(sp)
 1017718:	df000e04 	addi	fp,sp,56
 101771c:	e13ffd15 	stw	r4,-12(fp)
 1017720:	e17ffe15 	stw	r5,-8(fp)
 1017724:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1017728:	00bffa84 	movi	r2,-22
 101772c:	e0bff215 	stw	r2,-56(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1017730:	e0bffd17 	ldw	r2,-12(fp)
 1017734:	10800828 	cmpgeui	r2,r2,32
 1017738:	10004c1e 	bne	r2,zero,101786c <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101773c:	0005303a 	rdctl	r2,status
 1017740:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017744:	e0fff617 	ldw	r3,-40(fp)
 1017748:	00bfff84 	movi	r2,-2
 101774c:	1884703a 	and	r2,r3,r2
 1017750:	1001703a 	wrctl	status,r2
  
  return context;
 1017754:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1017758:	e0bff415 	stw	r2,-48(fp)

    alt_irq[id].handler = handler;
 101775c:	008060b4 	movhi	r2,386
 1017760:	10bb4c04 	addi	r2,r2,-4816
 1017764:	e0fffd17 	ldw	r3,-12(fp)
 1017768:	180690fa 	slli	r3,r3,3
 101776c:	10c5883a 	add	r2,r2,r3
 1017770:	e0ffff17 	ldw	r3,-4(fp)
 1017774:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1017778:	008060b4 	movhi	r2,386
 101777c:	10bb4c04 	addi	r2,r2,-4816
 1017780:	e0fffd17 	ldw	r3,-12(fp)
 1017784:	180690fa 	slli	r3,r3,3
 1017788:	10c5883a 	add	r2,r2,r3
 101778c:	10800104 	addi	r2,r2,4
 1017790:	e0fffe17 	ldw	r3,-8(fp)
 1017794:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1017798:	e0bfff17 	ldw	r2,-4(fp)
 101779c:	10001926 	beq	r2,zero,1017804 <alt_irq_register+0xf4>
 10177a0:	e0bffd17 	ldw	r2,-12(fp)
 10177a4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10177a8:	0005303a 	rdctl	r2,status
 10177ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10177b0:	e0fff717 	ldw	r3,-36(fp)
 10177b4:	00bfff84 	movi	r2,-2
 10177b8:	1884703a 	and	r2,r3,r2
 10177bc:	1001703a 	wrctl	status,r2
  
  return context;
 10177c0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10177c4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 10177c8:	00c00044 	movi	r3,1
 10177cc:	e0bff317 	ldw	r2,-52(fp)
 10177d0:	1884983a 	sll	r2,r3,r2
 10177d4:	1007883a 	mov	r3,r2
 10177d8:	d0a72a17 	ldw	r2,-25432(gp)
 10177dc:	1884b03a 	or	r2,r3,r2
 10177e0:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10177e4:	d0a72a17 	ldw	r2,-25432(gp)
 10177e8:	100170fa 	wrctl	ienable,r2
 10177ec:	e0bff817 	ldw	r2,-32(fp)
 10177f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10177f4:	e0bff917 	ldw	r2,-28(fp)
 10177f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10177fc:	0005883a 	mov	r2,zero
 1017800:	00001906 	br	1017868 <alt_irq_register+0x158>
 1017804:	e0bffd17 	ldw	r2,-12(fp)
 1017808:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101780c:	0005303a 	rdctl	r2,status
 1017810:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017814:	e0fffa17 	ldw	r3,-24(fp)
 1017818:	00bfff84 	movi	r2,-2
 101781c:	1884703a 	and	r2,r3,r2
 1017820:	1001703a 	wrctl	status,r2
  
  return context;
 1017824:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1017828:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 101782c:	00c00044 	movi	r3,1
 1017830:	e0bff517 	ldw	r2,-44(fp)
 1017834:	1884983a 	sll	r2,r3,r2
 1017838:	0084303a 	nor	r2,zero,r2
 101783c:	1007883a 	mov	r3,r2
 1017840:	d0a72a17 	ldw	r2,-25432(gp)
 1017844:	1884703a 	and	r2,r3,r2
 1017848:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 101784c:	d0a72a17 	ldw	r2,-25432(gp)
 1017850:	100170fa 	wrctl	ienable,r2
 1017854:	e0bffb17 	ldw	r2,-20(fp)
 1017858:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101785c:	e0bffc17 	ldw	r2,-16(fp)
 1017860:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1017864:	0005883a 	mov	r2,zero
 1017868:	e0bff215 	stw	r2,-56(fp)

    //alt_irq_enable_all(status);
  }
  return rc; 
 101786c:	e0bff217 	ldw	r2,-56(fp)
}
 1017870:	e037883a 	mov	sp,fp
 1017874:	df000017 	ldw	fp,0(sp)
 1017878:	dec00104 	addi	sp,sp,4
 101787c:	f800283a 	ret

01017880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017880:	defffe04 	addi	sp,sp,-8
 1017884:	dfc00115 	stw	ra,4(sp)
 1017888:	df000015 	stw	fp,0(sp)
 101788c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1017890:	d0a01517 	ldw	r2,-32684(gp)
 1017894:	10000326 	beq	r2,zero,10178a4 <alt_get_errno+0x24>
 1017898:	d0a01517 	ldw	r2,-32684(gp)
 101789c:	103ee83a 	callr	r2
 10178a0:	00000106 	br	10178a8 <alt_get_errno+0x28>
 10178a4:	d0a72904 	addi	r2,gp,-25436
}
 10178a8:	e037883a 	mov	sp,fp
 10178ac:	dfc00117 	ldw	ra,4(sp)
 10178b0:	df000017 	ldw	fp,0(sp)
 10178b4:	dec00204 	addi	sp,sp,8
 10178b8:	f800283a 	ret

010178bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10178bc:	deffed04 	addi	sp,sp,-76
 10178c0:	dfc01215 	stw	ra,72(sp)
 10178c4:	df001115 	stw	fp,68(sp)
 10178c8:	df001104 	addi	fp,sp,68
 10178cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10178d0:	e0bfff17 	ldw	r2,-4(fp)
 10178d4:	10000616 	blt	r2,zero,10178f0 <isatty+0x34>
 10178d8:	e0bfff17 	ldw	r2,-4(fp)
 10178dc:	10c00324 	muli	r3,r2,12
 10178e0:	008040b4 	movhi	r2,258
 10178e4:	10aebb04 	addi	r2,r2,-17684
 10178e8:	1885883a 	add	r2,r3,r2
 10178ec:	00000106 	br	10178f4 <isatty+0x38>
 10178f0:	0005883a 	mov	r2,zero
 10178f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 10178f8:	e0bfef17 	ldw	r2,-68(fp)
 10178fc:	10000e26 	beq	r2,zero,1017938 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1017900:	e0bfef17 	ldw	r2,-68(fp)
 1017904:	10800017 	ldw	r2,0(r2)
 1017908:	10800817 	ldw	r2,32(r2)
 101790c:	1000021e 	bne	r2,zero,1017918 <isatty+0x5c>
    {
      return 1;
 1017910:	00800044 	movi	r2,1
 1017914:	00000d06 	br	101794c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1017918:	e0bff004 	addi	r2,fp,-64
 101791c:	100b883a 	mov	r5,r2
 1017920:	e13fff17 	ldw	r4,-4(fp)
 1017924:	10176400 	call	1017640 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1017928:	e0bff117 	ldw	r2,-60(fp)
 101792c:	10880020 	cmpeqi	r2,r2,8192
 1017930:	10803fcc 	andi	r2,r2,255
 1017934:	00000506 	br	101794c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1017938:	10178800 	call	1017880 <alt_get_errno>
 101793c:	1007883a 	mov	r3,r2
 1017940:	00801444 	movi	r2,81
 1017944:	18800015 	stw	r2,0(r3)
    return 0;
 1017948:	0005883a 	mov	r2,zero
  }
}
 101794c:	e037883a 	mov	sp,fp
 1017950:	dfc00117 	ldw	ra,4(sp)
 1017954:	df000017 	ldw	fp,0(sp)
 1017958:	dec00204 	addi	sp,sp,8
 101795c:	f800283a 	ret

01017960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017960:	defffe04 	addi	sp,sp,-8
 1017964:	dfc00115 	stw	ra,4(sp)
 1017968:	df000015 	stw	fp,0(sp)
 101796c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1017970:	d0a01517 	ldw	r2,-32684(gp)
 1017974:	10000326 	beq	r2,zero,1017984 <alt_get_errno+0x24>
 1017978:	d0a01517 	ldw	r2,-32684(gp)
 101797c:	103ee83a 	callr	r2
 1017980:	00000106 	br	1017988 <alt_get_errno+0x28>
 1017984:	d0a72904 	addi	r2,gp,-25436
}
 1017988:	e037883a 	mov	sp,fp
 101798c:	dfc00117 	ldw	ra,4(sp)
 1017990:	df000017 	ldw	fp,0(sp)
 1017994:	dec00204 	addi	sp,sp,8
 1017998:	f800283a 	ret

0101799c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 101799c:	defffb04 	addi	sp,sp,-20
 10179a0:	dfc00415 	stw	ra,16(sp)
 10179a4:	df000315 	stw	fp,12(sp)
 10179a8:	df000304 	addi	fp,sp,12
 10179ac:	e13ffe15 	stw	r4,-8(fp)
 10179b0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 10179b4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 10179b8:	e0bffe17 	ldw	r2,-8(fp)
 10179bc:	00802f16 	blt	zero,r2,1017a7c <kill+0xe0>
  {
    switch (sig)
 10179c0:	e0bfff17 	ldw	r2,-4(fp)
 10179c4:	10800828 	cmpgeui	r2,r2,32
 10179c8:	1000291e 	bne	r2,zero,1017a70 <kill+0xd4>
 10179cc:	e0bfff17 	ldw	r2,-4(fp)
 10179d0:	100690ba 	slli	r3,r2,2
 10179d4:	00804074 	movhi	r2,257
 10179d8:	109e7a04 	addi	r2,r2,31208
 10179dc:	1885883a 	add	r2,r3,r2
 10179e0:	10800017 	ldw	r2,0(r2)
 10179e4:	1000683a 	jmp	r2
 10179e8:	01017a90 	cmplti	r4,zero,1514
 10179ec:	01017a70 	cmpltui	r4,zero,1513
 10179f0:	01017a70 	cmpltui	r4,zero,1513
 10179f4:	01017a68 	cmpgeui	r4,zero,1513
 10179f8:	01017a68 	cmpgeui	r4,zero,1513
 10179fc:	01017a68 	cmpgeui	r4,zero,1513
 1017a00:	01017a68 	cmpgeui	r4,zero,1513
 1017a04:	01017a70 	cmpltui	r4,zero,1513
 1017a08:	01017a68 	cmpgeui	r4,zero,1513
 1017a0c:	01017a68 	cmpgeui	r4,zero,1513
 1017a10:	01017a68 	cmpgeui	r4,zero,1513
 1017a14:	01017a68 	cmpgeui	r4,zero,1513
 1017a18:	01017a68 	cmpgeui	r4,zero,1513
 1017a1c:	01017a68 	cmpgeui	r4,zero,1513
 1017a20:	01017a68 	cmpgeui	r4,zero,1513
 1017a24:	01017a68 	cmpgeui	r4,zero,1513
 1017a28:	01017a90 	cmplti	r4,zero,1514
 1017a2c:	01017a70 	cmpltui	r4,zero,1513
 1017a30:	01017a70 	cmpltui	r4,zero,1513
 1017a34:	01017a70 	cmpltui	r4,zero,1513
 1017a38:	01017a90 	cmplti	r4,zero,1514
 1017a3c:	01017a70 	cmpltui	r4,zero,1513
 1017a40:	01017a70 	cmpltui	r4,zero,1513
 1017a44:	01017a68 	cmpgeui	r4,zero,1513
 1017a48:	01017a68 	cmpgeui	r4,zero,1513
 1017a4c:	01017a68 	cmpgeui	r4,zero,1513
 1017a50:	01017a68 	cmpgeui	r4,zero,1513
 1017a54:	01017a68 	cmpgeui	r4,zero,1513
 1017a58:	01017a70 	cmpltui	r4,zero,1513
 1017a5c:	01017a70 	cmpltui	r4,zero,1513
 1017a60:	01017a68 	cmpgeui	r4,zero,1513
 1017a64:	01017a68 	cmpgeui	r4,zero,1513
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1017a68:	0009883a 	mov	r4,zero
 1017a6c:	10175d00 	call	10175d0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1017a70:	00800584 	movi	r2,22
 1017a74:	e0bffd15 	stw	r2,-12(fp)
 1017a78:	00000606 	br	1017a94 <kill+0xf8>
    }
  }

  else if (pid > 0)
 1017a7c:	e0bffe17 	ldw	r2,-8(fp)
 1017a80:	0080040e 	bge	zero,r2,1017a94 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1017a84:	008000c4 	movi	r2,3
 1017a88:	e0bffd15 	stw	r2,-12(fp)
 1017a8c:	00000106 	br	1017a94 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 1017a90:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 1017a94:	e0bffd17 	ldw	r2,-12(fp)
 1017a98:	10000626 	beq	r2,zero,1017ab4 <kill+0x118>
  {
    ALT_ERRNO = status;
 1017a9c:	10179600 	call	1017960 <alt_get_errno>
 1017aa0:	1007883a 	mov	r3,r2
 1017aa4:	e0bffd17 	ldw	r2,-12(fp)
 1017aa8:	18800015 	stw	r2,0(r3)
    return -1;
 1017aac:	00bfffc4 	movi	r2,-1
 1017ab0:	00000106 	br	1017ab8 <kill+0x11c>
  }

  return 0;
 1017ab4:	0005883a 	mov	r2,zero
}
 1017ab8:	e037883a 	mov	sp,fp
 1017abc:	dfc00117 	ldw	ra,4(sp)
 1017ac0:	df000017 	ldw	fp,0(sp)
 1017ac4:	dec00204 	addi	sp,sp,8
 1017ac8:	f800283a 	ret

01017acc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1017acc:	defffc04 	addi	sp,sp,-16
 1017ad0:	df000315 	stw	fp,12(sp)
 1017ad4:	df000304 	addi	fp,sp,12
 1017ad8:	e13ffd15 	stw	r4,-12(fp)
 1017adc:	e17ffe15 	stw	r5,-8(fp)
 1017ae0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1017ae4:	e0fffe17 	ldw	r3,-8(fp)
 1017ae8:	e0bffd17 	ldw	r2,-12(fp)
 1017aec:	18800c26 	beq	r3,r2,1017b20 <alt_load_section+0x54>
  {
    while( to != end )
 1017af0:	00000806 	br	1017b14 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1017af4:	e0bffe17 	ldw	r2,-8(fp)
 1017af8:	10c00104 	addi	r3,r2,4
 1017afc:	e0fffe15 	stw	r3,-8(fp)
 1017b00:	e0fffd17 	ldw	r3,-12(fp)
 1017b04:	19000104 	addi	r4,r3,4
 1017b08:	e13ffd15 	stw	r4,-12(fp)
 1017b0c:	18c00017 	ldw	r3,0(r3)
 1017b10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1017b14:	e0fffe17 	ldw	r3,-8(fp)
 1017b18:	e0bfff17 	ldw	r2,-4(fp)
 1017b1c:	18bff51e 	bne	r3,r2,1017af4 <__alt_data_end+0xff017af4>
    {
      *to++ = *from++;
    }
  }
}
 1017b20:	0001883a 	nop
 1017b24:	e037883a 	mov	sp,fp
 1017b28:	df000017 	ldw	fp,0(sp)
 1017b2c:	dec00104 	addi	sp,sp,4
 1017b30:	f800283a 	ret

01017b34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1017b34:	defffe04 	addi	sp,sp,-8
 1017b38:	dfc00115 	stw	ra,4(sp)
 1017b3c:	df000015 	stw	fp,0(sp)
 1017b40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1017b44:	018040b4 	movhi	r6,258
 1017b48:	31b35304 	addi	r6,r6,-12980
 1017b4c:	014040b4 	movhi	r5,258
 1017b50:	296c6104 	addi	r5,r5,-20092
 1017b54:	010040b4 	movhi	r4,258
 1017b58:	21335304 	addi	r4,r4,-12980
 1017b5c:	1017acc0 	call	1017acc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1017b60:	01804034 	movhi	r6,256
 1017b64:	3180e804 	addi	r6,r6,928
 1017b68:	01404034 	movhi	r5,256
 1017b6c:	29400804 	addi	r5,r5,32
 1017b70:	01004034 	movhi	r4,256
 1017b74:	21000804 	addi	r4,r4,32
 1017b78:	1017acc0 	call	1017acc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1017b7c:	018040b4 	movhi	r6,258
 1017b80:	31ac6104 	addi	r6,r6,-20092
 1017b84:	014040b4 	movhi	r5,258
 1017b88:	29691504 	addi	r5,r5,-23468
 1017b8c:	010040b4 	movhi	r4,258
 1017b90:	21291504 	addi	r4,r4,-23468
 1017b94:	1017acc0 	call	1017acc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1017b98:	10193600 	call	1019360 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1017b9c:	10195d80 	call	10195d8 <alt_icache_flush_all>
}
 1017ba0:	0001883a 	nop
 1017ba4:	e037883a 	mov	sp,fp
 1017ba8:	dfc00117 	ldw	ra,4(sp)
 1017bac:	df000017 	ldw	fp,0(sp)
 1017bb0:	dec00204 	addi	sp,sp,8
 1017bb4:	f800283a 	ret

01017bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017bb8:	defffe04 	addi	sp,sp,-8
 1017bbc:	dfc00115 	stw	ra,4(sp)
 1017bc0:	df000015 	stw	fp,0(sp)
 1017bc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1017bc8:	d0a01517 	ldw	r2,-32684(gp)
 1017bcc:	10000326 	beq	r2,zero,1017bdc <alt_get_errno+0x24>
 1017bd0:	d0a01517 	ldw	r2,-32684(gp)
 1017bd4:	103ee83a 	callr	r2
 1017bd8:	00000106 	br	1017be0 <alt_get_errno+0x28>
 1017bdc:	d0a72904 	addi	r2,gp,-25436
}
 1017be0:	e037883a 	mov	sp,fp
 1017be4:	dfc00117 	ldw	ra,4(sp)
 1017be8:	df000017 	ldw	fp,0(sp)
 1017bec:	dec00204 	addi	sp,sp,8
 1017bf0:	f800283a 	ret

01017bf4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1017bf4:	defff904 	addi	sp,sp,-28
 1017bf8:	dfc00615 	stw	ra,24(sp)
 1017bfc:	df000515 	stw	fp,20(sp)
 1017c00:	df000504 	addi	fp,sp,20
 1017c04:	e13ffd15 	stw	r4,-12(fp)
 1017c08:	e17ffe15 	stw	r5,-8(fp)
 1017c0c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1017c10:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1017c14:	e0bffd17 	ldw	r2,-12(fp)
 1017c18:	10000616 	blt	r2,zero,1017c34 <lseek+0x40>
 1017c1c:	e0bffd17 	ldw	r2,-12(fp)
 1017c20:	10c00324 	muli	r3,r2,12
 1017c24:	008040b4 	movhi	r2,258
 1017c28:	10aebb04 	addi	r2,r2,-17684
 1017c2c:	1885883a 	add	r2,r3,r2
 1017c30:	00000106 	br	1017c38 <lseek+0x44>
 1017c34:	0005883a 	mov	r2,zero
 1017c38:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1017c3c:	e0bffc17 	ldw	r2,-16(fp)
 1017c40:	10001026 	beq	r2,zero,1017c84 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1017c44:	e0bffc17 	ldw	r2,-16(fp)
 1017c48:	10800017 	ldw	r2,0(r2)
 1017c4c:	10800717 	ldw	r2,28(r2)
 1017c50:	10000926 	beq	r2,zero,1017c78 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1017c54:	e0bffc17 	ldw	r2,-16(fp)
 1017c58:	10800017 	ldw	r2,0(r2)
 1017c5c:	10800717 	ldw	r2,28(r2)
 1017c60:	e1bfff17 	ldw	r6,-4(fp)
 1017c64:	e17ffe17 	ldw	r5,-8(fp)
 1017c68:	e13ffc17 	ldw	r4,-16(fp)
 1017c6c:	103ee83a 	callr	r2
 1017c70:	e0bffb15 	stw	r2,-20(fp)
 1017c74:	00000506 	br	1017c8c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1017c78:	00bfde84 	movi	r2,-134
 1017c7c:	e0bffb15 	stw	r2,-20(fp)
 1017c80:	00000206 	br	1017c8c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1017c84:	00bfebc4 	movi	r2,-81
 1017c88:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1017c8c:	e0bffb17 	ldw	r2,-20(fp)
 1017c90:	1000070e 	bge	r2,zero,1017cb0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1017c94:	1017bb80 	call	1017bb8 <alt_get_errno>
 1017c98:	1007883a 	mov	r3,r2
 1017c9c:	e0bffb17 	ldw	r2,-20(fp)
 1017ca0:	0085c83a 	sub	r2,zero,r2
 1017ca4:	18800015 	stw	r2,0(r3)
    rc = -1;
 1017ca8:	00bfffc4 	movi	r2,-1
 1017cac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1017cb0:	e0bffb17 	ldw	r2,-20(fp)
}
 1017cb4:	e037883a 	mov	sp,fp
 1017cb8:	dfc00117 	ldw	ra,4(sp)
 1017cbc:	df000017 	ldw	fp,0(sp)
 1017cc0:	dec00204 	addi	sp,sp,8
 1017cc4:	f800283a 	ret

01017cc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1017cc8:	defffd04 	addi	sp,sp,-12
 1017ccc:	dfc00215 	stw	ra,8(sp)
 1017cd0:	df000115 	stw	fp,4(sp)
 1017cd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1017cd8:	0009883a 	mov	r4,zero
 1017cdc:	10182140 	call	1018214 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1017ce0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1017ce4:	101824c0 	call	101824c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1017ce8:	018040b4 	movhi	r6,258
 1017cec:	31ac5304 	addi	r6,r6,-20148
 1017cf0:	014040b4 	movhi	r5,258
 1017cf4:	296c5304 	addi	r5,r5,-20148
 1017cf8:	010040b4 	movhi	r4,258
 1017cfc:	212c5304 	addi	r4,r4,-20148
 1017d00:	10199700 	call	1019970 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1017d04:	10194880 	call	1019488 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1017d08:	010040b4 	movhi	r4,258
 1017d0c:	21253a04 	addi	r4,r4,-27416
 1017d10:	101a0e00 	call	101a0e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1017d14:	d0a72b17 	ldw	r2,-25428(gp)
 1017d18:	d0e72c17 	ldw	r3,-25424(gp)
 1017d1c:	d1272d17 	ldw	r4,-25420(gp)
 1017d20:	200d883a 	mov	r6,r4
 1017d24:	180b883a 	mov	r5,r3
 1017d28:	1009883a 	mov	r4,r2
 1017d2c:	1005b540 	call	1005b54 <main>
 1017d30:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1017d34:	01000044 	movi	r4,1
 1017d38:	10174d40 	call	10174d4 <close>
  exit (result);
 1017d3c:	e13fff17 	ldw	r4,-4(fp)
 1017d40:	101a0f40 	call	101a0f4 <exit>

01017d44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1017d44:	defffe04 	addi	sp,sp,-8
 1017d48:	df000115 	stw	fp,4(sp)
 1017d4c:	df000104 	addi	fp,sp,4
 1017d50:	e13fff15 	stw	r4,-4(fp)
}
 1017d54:	0001883a 	nop
 1017d58:	e037883a 	mov	sp,fp
 1017d5c:	df000017 	ldw	fp,0(sp)
 1017d60:	dec00104 	addi	sp,sp,4
 1017d64:	f800283a 	ret

01017d68 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1017d68:	defffe04 	addi	sp,sp,-8
 1017d6c:	df000115 	stw	fp,4(sp)
 1017d70:	df000104 	addi	fp,sp,4
 1017d74:	e13fff15 	stw	r4,-4(fp)
}
 1017d78:	0001883a 	nop
 1017d7c:	e037883a 	mov	sp,fp
 1017d80:	df000017 	ldw	fp,0(sp)
 1017d84:	dec00104 	addi	sp,sp,4
 1017d88:	f800283a 	ret

01017d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017d8c:	defffe04 	addi	sp,sp,-8
 1017d90:	dfc00115 	stw	ra,4(sp)
 1017d94:	df000015 	stw	fp,0(sp)
 1017d98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1017d9c:	d0a01517 	ldw	r2,-32684(gp)
 1017da0:	10000326 	beq	r2,zero,1017db0 <alt_get_errno+0x24>
 1017da4:	d0a01517 	ldw	r2,-32684(gp)
 1017da8:	103ee83a 	callr	r2
 1017dac:	00000106 	br	1017db4 <alt_get_errno+0x28>
 1017db0:	d0a72904 	addi	r2,gp,-25436
}
 1017db4:	e037883a 	mov	sp,fp
 1017db8:	dfc00117 	ldw	ra,4(sp)
 1017dbc:	df000017 	ldw	fp,0(sp)
 1017dc0:	dec00204 	addi	sp,sp,8
 1017dc4:	f800283a 	ret

01017dc8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1017dc8:	defff904 	addi	sp,sp,-28
 1017dcc:	dfc00615 	stw	ra,24(sp)
 1017dd0:	df000515 	stw	fp,20(sp)
 1017dd4:	df000504 	addi	fp,sp,20
 1017dd8:	e13ffd15 	stw	r4,-12(fp)
 1017ddc:	e17ffe15 	stw	r5,-8(fp)
 1017de0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1017de4:	e0bffd17 	ldw	r2,-12(fp)
 1017de8:	10000616 	blt	r2,zero,1017e04 <read+0x3c>
 1017dec:	e0bffd17 	ldw	r2,-12(fp)
 1017df0:	10c00324 	muli	r3,r2,12
 1017df4:	008040b4 	movhi	r2,258
 1017df8:	10aebb04 	addi	r2,r2,-17684
 1017dfc:	1885883a 	add	r2,r3,r2
 1017e00:	00000106 	br	1017e08 <read+0x40>
 1017e04:	0005883a 	mov	r2,zero
 1017e08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1017e0c:	e0bffb17 	ldw	r2,-20(fp)
 1017e10:	10002226 	beq	r2,zero,1017e9c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1017e14:	e0bffb17 	ldw	r2,-20(fp)
 1017e18:	10800217 	ldw	r2,8(r2)
 1017e1c:	108000cc 	andi	r2,r2,3
 1017e20:	10800060 	cmpeqi	r2,r2,1
 1017e24:	1000181e 	bne	r2,zero,1017e88 <read+0xc0>
        (fd->dev->read))
 1017e28:	e0bffb17 	ldw	r2,-20(fp)
 1017e2c:	10800017 	ldw	r2,0(r2)
 1017e30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1017e34:	10001426 	beq	r2,zero,1017e88 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1017e38:	e0bffb17 	ldw	r2,-20(fp)
 1017e3c:	10800017 	ldw	r2,0(r2)
 1017e40:	10800517 	ldw	r2,20(r2)
 1017e44:	e0ffff17 	ldw	r3,-4(fp)
 1017e48:	180d883a 	mov	r6,r3
 1017e4c:	e17ffe17 	ldw	r5,-8(fp)
 1017e50:	e13ffb17 	ldw	r4,-20(fp)
 1017e54:	103ee83a 	callr	r2
 1017e58:	e0bffc15 	stw	r2,-16(fp)
 1017e5c:	e0bffc17 	ldw	r2,-16(fp)
 1017e60:	1000070e 	bge	r2,zero,1017e80 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1017e64:	1017d8c0 	call	1017d8c <alt_get_errno>
 1017e68:	1007883a 	mov	r3,r2
 1017e6c:	e0bffc17 	ldw	r2,-16(fp)
 1017e70:	0085c83a 	sub	r2,zero,r2
 1017e74:	18800015 	stw	r2,0(r3)
          return -1;
 1017e78:	00bfffc4 	movi	r2,-1
 1017e7c:	00000c06 	br	1017eb0 <read+0xe8>
        }
        return rval;
 1017e80:	e0bffc17 	ldw	r2,-16(fp)
 1017e84:	00000a06 	br	1017eb0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1017e88:	1017d8c0 	call	1017d8c <alt_get_errno>
 1017e8c:	1007883a 	mov	r3,r2
 1017e90:	00800344 	movi	r2,13
 1017e94:	18800015 	stw	r2,0(r3)
 1017e98:	00000406 	br	1017eac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1017e9c:	1017d8c0 	call	1017d8c <alt_get_errno>
 1017ea0:	1007883a 	mov	r3,r2
 1017ea4:	00801444 	movi	r2,81
 1017ea8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1017eac:	00bfffc4 	movi	r2,-1
}
 1017eb0:	e037883a 	mov	sp,fp
 1017eb4:	dfc00117 	ldw	ra,4(sp)
 1017eb8:	df000017 	ldw	fp,0(sp)
 1017ebc:	dec00204 	addi	sp,sp,8
 1017ec0:	f800283a 	ret

01017ec4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1017ec4:	defffe04 	addi	sp,sp,-8
 1017ec8:	df000115 	stw	fp,4(sp)
 1017ecc:	df000104 	addi	fp,sp,4
 1017ed0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1017ed4:	e0bfff17 	ldw	r2,-4(fp)
 1017ed8:	108000d0 	cmplti	r2,r2,3
 1017edc:	10000d1e 	bne	r2,zero,1017f14 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1017ee0:	008040b4 	movhi	r2,258
 1017ee4:	10aebb04 	addi	r2,r2,-17684
 1017ee8:	e0ffff17 	ldw	r3,-4(fp)
 1017eec:	18c00324 	muli	r3,r3,12
 1017ef0:	10c5883a 	add	r2,r2,r3
 1017ef4:	10800204 	addi	r2,r2,8
 1017ef8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1017efc:	008040b4 	movhi	r2,258
 1017f00:	10aebb04 	addi	r2,r2,-17684
 1017f04:	e0ffff17 	ldw	r3,-4(fp)
 1017f08:	18c00324 	muli	r3,r3,12
 1017f0c:	10c5883a 	add	r2,r2,r3
 1017f10:	10000015 	stw	zero,0(r2)
  }
}
 1017f14:	0001883a 	nop
 1017f18:	e037883a 	mov	sp,fp
 1017f1c:	df000017 	ldw	fp,0(sp)
 1017f20:	dec00104 	addi	sp,sp,4
 1017f24:	f800283a 	ret

01017f28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1017f28:	defff904 	addi	sp,sp,-28
 1017f2c:	df000615 	stw	fp,24(sp)
 1017f30:	df000604 	addi	fp,sp,24
 1017f34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017f38:	0005303a 	rdctl	r2,status
 1017f3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017f40:	e0fffe17 	ldw	r3,-8(fp)
 1017f44:	00bfff84 	movi	r2,-2
 1017f48:	1884703a 	and	r2,r3,r2
 1017f4c:	1001703a 	wrctl	status,r2
  
  return context;
 1017f50:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1017f54:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1017f58:	d0a01717 	ldw	r2,-32676(gp)
 1017f5c:	10c000c4 	addi	r3,r2,3
 1017f60:	00bfff04 	movi	r2,-4
 1017f64:	1884703a 	and	r2,r3,r2
 1017f68:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1017f6c:	d0e01717 	ldw	r3,-32676(gp)
 1017f70:	e0bfff17 	ldw	r2,-4(fp)
 1017f74:	1887883a 	add	r3,r3,r2
 1017f78:	00808034 	movhi	r2,512
 1017f7c:	10800004 	addi	r2,r2,0
 1017f80:	10c0062e 	bgeu	r2,r3,1017f9c <sbrk+0x74>
 1017f84:	e0bffb17 	ldw	r2,-20(fp)
 1017f88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017f8c:	e0bffa17 	ldw	r2,-24(fp)
 1017f90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1017f94:	00bfffc4 	movi	r2,-1
 1017f98:	00000b06 	br	1017fc8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1017f9c:	d0a01717 	ldw	r2,-32676(gp)
 1017fa0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1017fa4:	d0e01717 	ldw	r3,-32676(gp)
 1017fa8:	e0bfff17 	ldw	r2,-4(fp)
 1017fac:	1885883a 	add	r2,r3,r2
 1017fb0:	d0a01715 	stw	r2,-32676(gp)
 1017fb4:	e0bffb17 	ldw	r2,-20(fp)
 1017fb8:	e0bffc15 	stw	r2,-16(fp)
 1017fbc:	e0bffc17 	ldw	r2,-16(fp)
 1017fc0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1017fc4:	e0bffd17 	ldw	r2,-12(fp)
} 
 1017fc8:	e037883a 	mov	sp,fp
 1017fcc:	df000017 	ldw	fp,0(sp)
 1017fd0:	dec00104 	addi	sp,sp,4
 1017fd4:	f800283a 	ret

01017fd8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1017fd8:	defffd04 	addi	sp,sp,-12
 1017fdc:	dfc00215 	stw	ra,8(sp)
 1017fe0:	df000115 	stw	fp,4(sp)
 1017fe4:	df000104 	addi	fp,sp,4
 1017fe8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1017fec:	e13fff17 	ldw	r4,-4(fp)
 1017ff0:	10192080 	call	1019208 <alt_busy_sleep>
}
 1017ff4:	e037883a 	mov	sp,fp
 1017ff8:	dfc00117 	ldw	ra,4(sp)
 1017ffc:	df000017 	ldw	fp,0(sp)
 1018000:	dec00204 	addi	sp,sp,8
 1018004:	f800283a 	ret

01018008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018008:	defffe04 	addi	sp,sp,-8
 101800c:	dfc00115 	stw	ra,4(sp)
 1018010:	df000015 	stw	fp,0(sp)
 1018014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1018018:	d0a01517 	ldw	r2,-32684(gp)
 101801c:	10000326 	beq	r2,zero,101802c <alt_get_errno+0x24>
 1018020:	d0a01517 	ldw	r2,-32684(gp)
 1018024:	103ee83a 	callr	r2
 1018028:	00000106 	br	1018030 <alt_get_errno+0x28>
 101802c:	d0a72904 	addi	r2,gp,-25436
}
 1018030:	e037883a 	mov	sp,fp
 1018034:	dfc00117 	ldw	ra,4(sp)
 1018038:	df000017 	ldw	fp,0(sp)
 101803c:	dec00204 	addi	sp,sp,8
 1018040:	f800283a 	ret

01018044 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1018044:	defff904 	addi	sp,sp,-28
 1018048:	dfc00615 	stw	ra,24(sp)
 101804c:	df000515 	stw	fp,20(sp)
 1018050:	df000504 	addi	fp,sp,20
 1018054:	e13ffd15 	stw	r4,-12(fp)
 1018058:	e17ffe15 	stw	r5,-8(fp)
 101805c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1018060:	e0bffd17 	ldw	r2,-12(fp)
 1018064:	10000616 	blt	r2,zero,1018080 <write+0x3c>
 1018068:	e0bffd17 	ldw	r2,-12(fp)
 101806c:	10c00324 	muli	r3,r2,12
 1018070:	008040b4 	movhi	r2,258
 1018074:	10aebb04 	addi	r2,r2,-17684
 1018078:	1885883a 	add	r2,r3,r2
 101807c:	00000106 	br	1018084 <write+0x40>
 1018080:	0005883a 	mov	r2,zero
 1018084:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1018088:	e0bffb17 	ldw	r2,-20(fp)
 101808c:	10002126 	beq	r2,zero,1018114 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1018090:	e0bffb17 	ldw	r2,-20(fp)
 1018094:	10800217 	ldw	r2,8(r2)
 1018098:	108000cc 	andi	r2,r2,3
 101809c:	10001826 	beq	r2,zero,1018100 <write+0xbc>
 10180a0:	e0bffb17 	ldw	r2,-20(fp)
 10180a4:	10800017 	ldw	r2,0(r2)
 10180a8:	10800617 	ldw	r2,24(r2)
 10180ac:	10001426 	beq	r2,zero,1018100 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10180b0:	e0bffb17 	ldw	r2,-20(fp)
 10180b4:	10800017 	ldw	r2,0(r2)
 10180b8:	10800617 	ldw	r2,24(r2)
 10180bc:	e0ffff17 	ldw	r3,-4(fp)
 10180c0:	180d883a 	mov	r6,r3
 10180c4:	e17ffe17 	ldw	r5,-8(fp)
 10180c8:	e13ffb17 	ldw	r4,-20(fp)
 10180cc:	103ee83a 	callr	r2
 10180d0:	e0bffc15 	stw	r2,-16(fp)
 10180d4:	e0bffc17 	ldw	r2,-16(fp)
 10180d8:	1000070e 	bge	r2,zero,10180f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 10180dc:	10180080 	call	1018008 <alt_get_errno>
 10180e0:	1007883a 	mov	r3,r2
 10180e4:	e0bffc17 	ldw	r2,-16(fp)
 10180e8:	0085c83a 	sub	r2,zero,r2
 10180ec:	18800015 	stw	r2,0(r3)
        return -1;
 10180f0:	00bfffc4 	movi	r2,-1
 10180f4:	00000c06 	br	1018128 <write+0xe4>
      }
      return rval;
 10180f8:	e0bffc17 	ldw	r2,-16(fp)
 10180fc:	00000a06 	br	1018128 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1018100:	10180080 	call	1018008 <alt_get_errno>
 1018104:	1007883a 	mov	r3,r2
 1018108:	00800344 	movi	r2,13
 101810c:	18800015 	stw	r2,0(r3)
 1018110:	00000406 	br	1018124 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1018114:	10180080 	call	1018008 <alt_get_errno>
 1018118:	1007883a 	mov	r3,r2
 101811c:	00801444 	movi	r2,81
 1018120:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1018124:	00bfffc4 	movi	r2,-1
}
 1018128:	e037883a 	mov	sp,fp
 101812c:	dfc00117 	ldw	ra,4(sp)
 1018130:	df000017 	ldw	fp,0(sp)
 1018134:	dec00204 	addi	sp,sp,8
 1018138:	f800283a 	ret

0101813c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 101813c:	defffd04 	addi	sp,sp,-12
 1018140:	dfc00215 	stw	ra,8(sp)
 1018144:	df000115 	stw	fp,4(sp)
 1018148:	df000104 	addi	fp,sp,4
 101814c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1018150:	d1601204 	addi	r5,gp,-32696
 1018154:	e13fff17 	ldw	r4,-4(fp)
 1018158:	10193e40 	call	10193e4 <alt_dev_llist_insert>
}
 101815c:	e037883a 	mov	sp,fp
 1018160:	dfc00117 	ldw	ra,4(sp)
 1018164:	df000017 	ldw	fp,0(sp)
 1018168:	dec00204 	addi	sp,sp,8
 101816c:	f800283a 	ret

01018170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018170:	defffe04 	addi	sp,sp,-8
 1018174:	dfc00115 	stw	ra,4(sp)
 1018178:	df000015 	stw	fp,0(sp)
 101817c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1018180:	d0a01517 	ldw	r2,-32684(gp)
 1018184:	10000326 	beq	r2,zero,1018194 <alt_get_errno+0x24>
 1018188:	d0a01517 	ldw	r2,-32684(gp)
 101818c:	103ee83a 	callr	r2
 1018190:	00000106 	br	1018198 <alt_get_errno+0x28>
 1018194:	d0a72904 	addi	r2,gp,-25436
}
 1018198:	e037883a 	mov	sp,fp
 101819c:	dfc00117 	ldw	ra,4(sp)
 10181a0:	df000017 	ldw	fp,0(sp)
 10181a4:	dec00204 	addi	sp,sp,8
 10181a8:	f800283a 	ret

010181ac <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 10181ac:	defffc04 	addi	sp,sp,-16
 10181b0:	dfc00315 	stw	ra,12(sp)
 10181b4:	df000215 	stw	fp,8(sp)
 10181b8:	df000204 	addi	fp,sp,8
 10181bc:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 10181c0:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 10181c4:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 10181c8:	e0bffe17 	ldw	r2,-8(fp)
 10181cc:	1000051e 	bne	r2,zero,10181e4 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 10181d0:	d1601804 	addi	r5,gp,-32672
 10181d4:	e13fff17 	ldw	r4,-4(fp)
 10181d8:	10193e40 	call	10193e4 <alt_dev_llist_insert>
 10181dc:	e0bffe15 	stw	r2,-8(fp)
 10181e0:	00000606 	br	10181fc <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 10181e4:	10181700 	call	1018170 <alt_get_errno>
 10181e8:	1007883a 	mov	r3,r2
 10181ec:	00800304 	movi	r2,12
 10181f0:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 10181f4:	00bffd04 	movi	r2,-12
 10181f8:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 10181fc:	e0bffe17 	ldw	r2,-8(fp)
}
 1018200:	e037883a 	mov	sp,fp
 1018204:	dfc00117 	ldw	ra,4(sp)
 1018208:	df000017 	ldw	fp,0(sp)
 101820c:	dec00204 	addi	sp,sp,8
 1018210:	f800283a 	ret

01018214 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1018214:	defffd04 	addi	sp,sp,-12
 1018218:	dfc00215 	stw	ra,8(sp)
 101821c:	df000115 	stw	fp,4(sp)
 1018220:	df000104 	addi	fp,sp,4
 1018224:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU_1, nios_cpu_1);
 1018228:	1019de40 	call	1019de4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 101822c:	00800044 	movi	r2,1
 1018230:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1018234:	0001883a 	nop
 1018238:	e037883a 	mov	sp,fp
 101823c:	dfc00117 	ldw	ra,4(sp)
 1018240:	df000017 	ldw	fp,0(sp)
 1018244:	dec00204 	addi	sp,sp,8
 1018248:	f800283a 	ret

0101824c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 101824c:	defffe04 	addi	sp,sp,-8
 1018250:	dfc00115 	stw	ra,4(sp)
 1018254:	df000015 	stw	fp,0(sp)
 1018258:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 101825c:	01c0fa04 	movi	r7,1000
 1018260:	01800044 	movi	r6,1
 1018264:	000b883a 	mov	r5,zero
 1018268:	01000804 	movi	r4,32
 101826c:	10190600 	call	1019060 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1018270:	000d883a 	mov	r6,zero
 1018274:	000b883a 	mov	r5,zero
 1018278:	010040b4 	movhi	r4,258
 101827c:	212f2504 	addi	r4,r4,-17260
 1018280:	10184180 	call	1018418 <altera_avalon_jtag_uart_init>
 1018284:	010040b4 	movhi	r4,258
 1018288:	212f1b04 	addi	r4,r4,-17300
 101828c:	101813c0 	call	101813c <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 1018290:	010040b4 	movhi	r4,258
 1018294:	21333304 	addi	r4,r4,-13108
 1018298:	10181ac0 	call	10181ac <alt_avalon_mutex_reg>
}
 101829c:	0001883a 	nop
 10182a0:	e037883a 	mov	sp,fp
 10182a4:	dfc00117 	ldw	ra,4(sp)
 10182a8:	df000017 	ldw	fp,0(sp)
 10182ac:	dec00204 	addi	sp,sp,8
 10182b0:	f800283a 	ret

010182b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10182b4:	defffa04 	addi	sp,sp,-24
 10182b8:	dfc00515 	stw	ra,20(sp)
 10182bc:	df000415 	stw	fp,16(sp)
 10182c0:	df000404 	addi	fp,sp,16
 10182c4:	e13ffd15 	stw	r4,-12(fp)
 10182c8:	e17ffe15 	stw	r5,-8(fp)
 10182cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10182d0:	e0bffd17 	ldw	r2,-12(fp)
 10182d4:	10800017 	ldw	r2,0(r2)
 10182d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10182dc:	e0bffc17 	ldw	r2,-16(fp)
 10182e0:	10c00a04 	addi	r3,r2,40
 10182e4:	e0bffd17 	ldw	r2,-12(fp)
 10182e8:	10800217 	ldw	r2,8(r2)
 10182ec:	100f883a 	mov	r7,r2
 10182f0:	e1bfff17 	ldw	r6,-4(fp)
 10182f4:	e17ffe17 	ldw	r5,-8(fp)
 10182f8:	1809883a 	mov	r4,r3
 10182fc:	10188dc0 	call	10188dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1018300:	e037883a 	mov	sp,fp
 1018304:	dfc00117 	ldw	ra,4(sp)
 1018308:	df000017 	ldw	fp,0(sp)
 101830c:	dec00204 	addi	sp,sp,8
 1018310:	f800283a 	ret

01018314 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1018314:	defffa04 	addi	sp,sp,-24
 1018318:	dfc00515 	stw	ra,20(sp)
 101831c:	df000415 	stw	fp,16(sp)
 1018320:	df000404 	addi	fp,sp,16
 1018324:	e13ffd15 	stw	r4,-12(fp)
 1018328:	e17ffe15 	stw	r5,-8(fp)
 101832c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1018330:	e0bffd17 	ldw	r2,-12(fp)
 1018334:	10800017 	ldw	r2,0(r2)
 1018338:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 101833c:	e0bffc17 	ldw	r2,-16(fp)
 1018340:	10c00a04 	addi	r3,r2,40
 1018344:	e0bffd17 	ldw	r2,-12(fp)
 1018348:	10800217 	ldw	r2,8(r2)
 101834c:	100f883a 	mov	r7,r2
 1018350:	e1bfff17 	ldw	r6,-4(fp)
 1018354:	e17ffe17 	ldw	r5,-8(fp)
 1018358:	1809883a 	mov	r4,r3
 101835c:	1018af80 	call	1018af8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1018360:	e037883a 	mov	sp,fp
 1018364:	dfc00117 	ldw	ra,4(sp)
 1018368:	df000017 	ldw	fp,0(sp)
 101836c:	dec00204 	addi	sp,sp,8
 1018370:	f800283a 	ret

01018374 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1018374:	defffc04 	addi	sp,sp,-16
 1018378:	dfc00315 	stw	ra,12(sp)
 101837c:	df000215 	stw	fp,8(sp)
 1018380:	df000204 	addi	fp,sp,8
 1018384:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1018388:	e0bfff17 	ldw	r2,-4(fp)
 101838c:	10800017 	ldw	r2,0(r2)
 1018390:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1018394:	e0bffe17 	ldw	r2,-8(fp)
 1018398:	10c00a04 	addi	r3,r2,40
 101839c:	e0bfff17 	ldw	r2,-4(fp)
 10183a0:	10800217 	ldw	r2,8(r2)
 10183a4:	100b883a 	mov	r5,r2
 10183a8:	1809883a 	mov	r4,r3
 10183ac:	10187840 	call	1018784 <altera_avalon_jtag_uart_close>
}
 10183b0:	e037883a 	mov	sp,fp
 10183b4:	dfc00117 	ldw	ra,4(sp)
 10183b8:	df000017 	ldw	fp,0(sp)
 10183bc:	dec00204 	addi	sp,sp,8
 10183c0:	f800283a 	ret

010183c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10183c4:	defffa04 	addi	sp,sp,-24
 10183c8:	dfc00515 	stw	ra,20(sp)
 10183cc:	df000415 	stw	fp,16(sp)
 10183d0:	df000404 	addi	fp,sp,16
 10183d4:	e13ffd15 	stw	r4,-12(fp)
 10183d8:	e17ffe15 	stw	r5,-8(fp)
 10183dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10183e0:	e0bffd17 	ldw	r2,-12(fp)
 10183e4:	10800017 	ldw	r2,0(r2)
 10183e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10183ec:	e0bffc17 	ldw	r2,-16(fp)
 10183f0:	10800a04 	addi	r2,r2,40
 10183f4:	e1bfff17 	ldw	r6,-4(fp)
 10183f8:	e17ffe17 	ldw	r5,-8(fp)
 10183fc:	1009883a 	mov	r4,r2
 1018400:	10187ec0 	call	10187ec <altera_avalon_jtag_uart_ioctl>
}
 1018404:	e037883a 	mov	sp,fp
 1018408:	dfc00117 	ldw	ra,4(sp)
 101840c:	df000017 	ldw	fp,0(sp)
 1018410:	dec00204 	addi	sp,sp,8
 1018414:	f800283a 	ret

01018418 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1018418:	defffa04 	addi	sp,sp,-24
 101841c:	dfc00515 	stw	ra,20(sp)
 1018420:	df000415 	stw	fp,16(sp)
 1018424:	df000404 	addi	fp,sp,16
 1018428:	e13ffd15 	stw	r4,-12(fp)
 101842c:	e17ffe15 	stw	r5,-8(fp)
 1018430:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1018434:	e0bffd17 	ldw	r2,-12(fp)
 1018438:	00c00044 	movi	r3,1
 101843c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1018440:	e0bffd17 	ldw	r2,-12(fp)
 1018444:	10800017 	ldw	r2,0(r2)
 1018448:	10800104 	addi	r2,r2,4
 101844c:	1007883a 	mov	r3,r2
 1018450:	e0bffd17 	ldw	r2,-12(fp)
 1018454:	10800817 	ldw	r2,32(r2)
 1018458:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 101845c:	e0bffe17 	ldw	r2,-8(fp)
 1018460:	e0ffff17 	ldw	r3,-4(fp)
 1018464:	d8000015 	stw	zero,0(sp)
 1018468:	e1fffd17 	ldw	r7,-12(fp)
 101846c:	018040b4 	movhi	r6,258
 1018470:	31a13604 	addi	r6,r6,-31528
 1018474:	180b883a 	mov	r5,r3
 1018478:	1009883a 	mov	r4,r2
 101847c:	101960c0 	call	101960c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1018480:	e0bffd17 	ldw	r2,-12(fp)
 1018484:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1018488:	e0bffd17 	ldw	r2,-12(fp)
 101848c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1018490:	d0e72e17 	ldw	r3,-25416(gp)
 1018494:	e1fffd17 	ldw	r7,-12(fp)
 1018498:	018040b4 	movhi	r6,258
 101849c:	31a1b904 	addi	r6,r6,-31004
 10184a0:	180b883a 	mov	r5,r3
 10184a4:	1009883a 	mov	r4,r2
 10184a8:	10190dc0 	call	10190dc <alt_alarm_start>
 10184ac:	1000040e 	bge	r2,zero,10184c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10184b0:	e0fffd17 	ldw	r3,-12(fp)
 10184b4:	00a00034 	movhi	r2,32768
 10184b8:	10bfffc4 	addi	r2,r2,-1
 10184bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10184c0:	0001883a 	nop
 10184c4:	e037883a 	mov	sp,fp
 10184c8:	dfc00117 	ldw	ra,4(sp)
 10184cc:	df000017 	ldw	fp,0(sp)
 10184d0:	dec00204 	addi	sp,sp,8
 10184d4:	f800283a 	ret

010184d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10184d8:	defff804 	addi	sp,sp,-32
 10184dc:	df000715 	stw	fp,28(sp)
 10184e0:	df000704 	addi	fp,sp,28
 10184e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10184e8:	e0bfff17 	ldw	r2,-4(fp)
 10184ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10184f0:	e0bffb17 	ldw	r2,-20(fp)
 10184f4:	10800017 	ldw	r2,0(r2)
 10184f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10184fc:	e0bffc17 	ldw	r2,-16(fp)
 1018500:	10800104 	addi	r2,r2,4
 1018504:	10800037 	ldwio	r2,0(r2)
 1018508:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 101850c:	e0bffd17 	ldw	r2,-12(fp)
 1018510:	1080c00c 	andi	r2,r2,768
 1018514:	10006d26 	beq	r2,zero,10186cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1018518:	e0bffd17 	ldw	r2,-12(fp)
 101851c:	1080400c 	andi	r2,r2,256
 1018520:	10003526 	beq	r2,zero,10185f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1018524:	00800074 	movhi	r2,1
 1018528:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101852c:	e0bffb17 	ldw	r2,-20(fp)
 1018530:	10800a17 	ldw	r2,40(r2)
 1018534:	10800044 	addi	r2,r2,1
 1018538:	1081ffcc 	andi	r2,r2,2047
 101853c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1018540:	e0bffb17 	ldw	r2,-20(fp)
 1018544:	10c00b17 	ldw	r3,44(r2)
 1018548:	e0bffe17 	ldw	r2,-8(fp)
 101854c:	18801526 	beq	r3,r2,10185a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1018550:	e0bffc17 	ldw	r2,-16(fp)
 1018554:	10800037 	ldwio	r2,0(r2)
 1018558:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101855c:	e0bff917 	ldw	r2,-28(fp)
 1018560:	10a0000c 	andi	r2,r2,32768
 1018564:	10001126 	beq	r2,zero,10185ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1018568:	e0bffb17 	ldw	r2,-20(fp)
 101856c:	10800a17 	ldw	r2,40(r2)
 1018570:	e0fff917 	ldw	r3,-28(fp)
 1018574:	1809883a 	mov	r4,r3
 1018578:	e0fffb17 	ldw	r3,-20(fp)
 101857c:	1885883a 	add	r2,r3,r2
 1018580:	10800e04 	addi	r2,r2,56
 1018584:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1018588:	e0bffb17 	ldw	r2,-20(fp)
 101858c:	10800a17 	ldw	r2,40(r2)
 1018590:	10800044 	addi	r2,r2,1
 1018594:	10c1ffcc 	andi	r3,r2,2047
 1018598:	e0bffb17 	ldw	r2,-20(fp)
 101859c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10185a0:	003fe206 	br	101852c <__alt_data_end+0xff01852c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10185a4:	0001883a 	nop
 10185a8:	00000106 	br	10185b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10185ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10185b0:	e0bff917 	ldw	r2,-28(fp)
 10185b4:	10bfffec 	andhi	r2,r2,65535
 10185b8:	10000f26 	beq	r2,zero,10185f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10185bc:	e0bffb17 	ldw	r2,-20(fp)
 10185c0:	10c00817 	ldw	r3,32(r2)
 10185c4:	00bfff84 	movi	r2,-2
 10185c8:	1886703a 	and	r3,r3,r2
 10185cc:	e0bffb17 	ldw	r2,-20(fp)
 10185d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10185d4:	e0bffc17 	ldw	r2,-16(fp)
 10185d8:	10800104 	addi	r2,r2,4
 10185dc:	1007883a 	mov	r3,r2
 10185e0:	e0bffb17 	ldw	r2,-20(fp)
 10185e4:	10800817 	ldw	r2,32(r2)
 10185e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10185ec:	e0bffc17 	ldw	r2,-16(fp)
 10185f0:	10800104 	addi	r2,r2,4
 10185f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10185f8:	e0bffd17 	ldw	r2,-12(fp)
 10185fc:	1080800c 	andi	r2,r2,512
 1018600:	103fbe26 	beq	r2,zero,10184fc <__alt_data_end+0xff0184fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1018604:	e0bffd17 	ldw	r2,-12(fp)
 1018608:	1004d43a 	srli	r2,r2,16
 101860c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1018610:	00001406 	br	1018664 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1018614:	e0bffc17 	ldw	r2,-16(fp)
 1018618:	e0fffb17 	ldw	r3,-20(fp)
 101861c:	18c00d17 	ldw	r3,52(r3)
 1018620:	e13ffb17 	ldw	r4,-20(fp)
 1018624:	20c7883a 	add	r3,r4,r3
 1018628:	18c20e04 	addi	r3,r3,2104
 101862c:	18c00003 	ldbu	r3,0(r3)
 1018630:	18c03fcc 	andi	r3,r3,255
 1018634:	18c0201c 	xori	r3,r3,128
 1018638:	18ffe004 	addi	r3,r3,-128
 101863c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1018640:	e0bffb17 	ldw	r2,-20(fp)
 1018644:	10800d17 	ldw	r2,52(r2)
 1018648:	10800044 	addi	r2,r2,1
 101864c:	10c1ffcc 	andi	r3,r2,2047
 1018650:	e0bffb17 	ldw	r2,-20(fp)
 1018654:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1018658:	e0bffa17 	ldw	r2,-24(fp)
 101865c:	10bfffc4 	addi	r2,r2,-1
 1018660:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1018664:	e0bffa17 	ldw	r2,-24(fp)
 1018668:	10000526 	beq	r2,zero,1018680 <altera_avalon_jtag_uart_irq+0x1a8>
 101866c:	e0bffb17 	ldw	r2,-20(fp)
 1018670:	10c00d17 	ldw	r3,52(r2)
 1018674:	e0bffb17 	ldw	r2,-20(fp)
 1018678:	10800c17 	ldw	r2,48(r2)
 101867c:	18bfe51e 	bne	r3,r2,1018614 <__alt_data_end+0xff018614>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1018680:	e0bffa17 	ldw	r2,-24(fp)
 1018684:	103f9d26 	beq	r2,zero,10184fc <__alt_data_end+0xff0184fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1018688:	e0bffb17 	ldw	r2,-20(fp)
 101868c:	10c00817 	ldw	r3,32(r2)
 1018690:	00bfff44 	movi	r2,-3
 1018694:	1886703a 	and	r3,r3,r2
 1018698:	e0bffb17 	ldw	r2,-20(fp)
 101869c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10186a0:	e0bffb17 	ldw	r2,-20(fp)
 10186a4:	10800017 	ldw	r2,0(r2)
 10186a8:	10800104 	addi	r2,r2,4
 10186ac:	1007883a 	mov	r3,r2
 10186b0:	e0bffb17 	ldw	r2,-20(fp)
 10186b4:	10800817 	ldw	r2,32(r2)
 10186b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10186bc:	e0bffc17 	ldw	r2,-16(fp)
 10186c0:	10800104 	addi	r2,r2,4
 10186c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10186c8:	003f8c06 	br	10184fc <__alt_data_end+0xff0184fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 10186cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 10186d0:	0001883a 	nop
 10186d4:	e037883a 	mov	sp,fp
 10186d8:	df000017 	ldw	fp,0(sp)
 10186dc:	dec00104 	addi	sp,sp,4
 10186e0:	f800283a 	ret

010186e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10186e4:	defff804 	addi	sp,sp,-32
 10186e8:	df000715 	stw	fp,28(sp)
 10186ec:	df000704 	addi	fp,sp,28
 10186f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10186f4:	e0bffb17 	ldw	r2,-20(fp)
 10186f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10186fc:	e0bff917 	ldw	r2,-28(fp)
 1018700:	10800017 	ldw	r2,0(r2)
 1018704:	10800104 	addi	r2,r2,4
 1018708:	10800037 	ldwio	r2,0(r2)
 101870c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1018710:	e0bffa17 	ldw	r2,-24(fp)
 1018714:	1081000c 	andi	r2,r2,1024
 1018718:	10000b26 	beq	r2,zero,1018748 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 101871c:	e0bff917 	ldw	r2,-28(fp)
 1018720:	10800017 	ldw	r2,0(r2)
 1018724:	10800104 	addi	r2,r2,4
 1018728:	1007883a 	mov	r3,r2
 101872c:	e0bff917 	ldw	r2,-28(fp)
 1018730:	10800817 	ldw	r2,32(r2)
 1018734:	10810014 	ori	r2,r2,1024
 1018738:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 101873c:	e0bff917 	ldw	r2,-28(fp)
 1018740:	10000915 	stw	zero,36(r2)
 1018744:	00000a06 	br	1018770 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1018748:	e0bff917 	ldw	r2,-28(fp)
 101874c:	10c00917 	ldw	r3,36(r2)
 1018750:	00a00034 	movhi	r2,32768
 1018754:	10bfff04 	addi	r2,r2,-4
 1018758:	10c00536 	bltu	r2,r3,1018770 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 101875c:	e0bff917 	ldw	r2,-28(fp)
 1018760:	10800917 	ldw	r2,36(r2)
 1018764:	10c00044 	addi	r3,r2,1
 1018768:	e0bff917 	ldw	r2,-28(fp)
 101876c:	10c00915 	stw	r3,36(r2)
 1018770:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1018774:	e037883a 	mov	sp,fp
 1018778:	df000017 	ldw	fp,0(sp)
 101877c:	dec00104 	addi	sp,sp,4
 1018780:	f800283a 	ret

01018784 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1018784:	defffd04 	addi	sp,sp,-12
 1018788:	df000215 	stw	fp,8(sp)
 101878c:	df000204 	addi	fp,sp,8
 1018790:	e13ffe15 	stw	r4,-8(fp)
 1018794:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1018798:	00000506 	br	10187b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 101879c:	e0bfff17 	ldw	r2,-4(fp)
 10187a0:	1090000c 	andi	r2,r2,16384
 10187a4:	10000226 	beq	r2,zero,10187b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10187a8:	00bffd44 	movi	r2,-11
 10187ac:	00000b06 	br	10187dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10187b0:	e0bffe17 	ldw	r2,-8(fp)
 10187b4:	10c00d17 	ldw	r3,52(r2)
 10187b8:	e0bffe17 	ldw	r2,-8(fp)
 10187bc:	10800c17 	ldw	r2,48(r2)
 10187c0:	18800526 	beq	r3,r2,10187d8 <altera_avalon_jtag_uart_close+0x54>
 10187c4:	e0bffe17 	ldw	r2,-8(fp)
 10187c8:	10c00917 	ldw	r3,36(r2)
 10187cc:	e0bffe17 	ldw	r2,-8(fp)
 10187d0:	10800117 	ldw	r2,4(r2)
 10187d4:	18bff136 	bltu	r3,r2,101879c <__alt_data_end+0xff01879c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10187d8:	0005883a 	mov	r2,zero
}
 10187dc:	e037883a 	mov	sp,fp
 10187e0:	df000017 	ldw	fp,0(sp)
 10187e4:	dec00104 	addi	sp,sp,4
 10187e8:	f800283a 	ret

010187ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10187ec:	defffa04 	addi	sp,sp,-24
 10187f0:	df000515 	stw	fp,20(sp)
 10187f4:	df000504 	addi	fp,sp,20
 10187f8:	e13ffd15 	stw	r4,-12(fp)
 10187fc:	e17ffe15 	stw	r5,-8(fp)
 1018800:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1018804:	00bff9c4 	movi	r2,-25
 1018808:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 101880c:	e0bffe17 	ldw	r2,-8(fp)
 1018810:	10da8060 	cmpeqi	r3,r2,27137
 1018814:	1800031e 	bne	r3,zero,1018824 <altera_avalon_jtag_uart_ioctl+0x38>
 1018818:	109a80a0 	cmpeqi	r2,r2,27138
 101881c:	1000181e 	bne	r2,zero,1018880 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1018820:	00002906 	br	10188c8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1018824:	e0bffd17 	ldw	r2,-12(fp)
 1018828:	10c00117 	ldw	r3,4(r2)
 101882c:	00a00034 	movhi	r2,32768
 1018830:	10bfffc4 	addi	r2,r2,-1
 1018834:	18802126 	beq	r3,r2,10188bc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1018838:	e0bfff17 	ldw	r2,-4(fp)
 101883c:	10800017 	ldw	r2,0(r2)
 1018840:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1018844:	e0bffc17 	ldw	r2,-16(fp)
 1018848:	10800090 	cmplti	r2,r2,2
 101884c:	1000061e 	bne	r2,zero,1018868 <altera_avalon_jtag_uart_ioctl+0x7c>
 1018850:	e0fffc17 	ldw	r3,-16(fp)
 1018854:	00a00034 	movhi	r2,32768
 1018858:	10bfffc4 	addi	r2,r2,-1
 101885c:	18800226 	beq	r3,r2,1018868 <altera_avalon_jtag_uart_ioctl+0x7c>
 1018860:	e0bffc17 	ldw	r2,-16(fp)
 1018864:	00000206 	br	1018870 <altera_avalon_jtag_uart_ioctl+0x84>
 1018868:	00a00034 	movhi	r2,32768
 101886c:	10bfff84 	addi	r2,r2,-2
 1018870:	e0fffd17 	ldw	r3,-12(fp)
 1018874:	18800115 	stw	r2,4(r3)
      rc = 0;
 1018878:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 101887c:	00000f06 	br	10188bc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1018880:	e0bffd17 	ldw	r2,-12(fp)
 1018884:	10c00117 	ldw	r3,4(r2)
 1018888:	00a00034 	movhi	r2,32768
 101888c:	10bfffc4 	addi	r2,r2,-1
 1018890:	18800c26 	beq	r3,r2,10188c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1018894:	e0bffd17 	ldw	r2,-12(fp)
 1018898:	10c00917 	ldw	r3,36(r2)
 101889c:	e0bffd17 	ldw	r2,-12(fp)
 10188a0:	10800117 	ldw	r2,4(r2)
 10188a4:	1885803a 	cmpltu	r2,r3,r2
 10188a8:	10c03fcc 	andi	r3,r2,255
 10188ac:	e0bfff17 	ldw	r2,-4(fp)
 10188b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 10188b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10188b8:	00000206 	br	10188c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 10188bc:	0001883a 	nop
 10188c0:	00000106 	br	10188c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 10188c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 10188c8:	e0bffb17 	ldw	r2,-20(fp)
}
 10188cc:	e037883a 	mov	sp,fp
 10188d0:	df000017 	ldw	fp,0(sp)
 10188d4:	dec00104 	addi	sp,sp,4
 10188d8:	f800283a 	ret

010188dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10188dc:	defff304 	addi	sp,sp,-52
 10188e0:	dfc00c15 	stw	ra,48(sp)
 10188e4:	df000b15 	stw	fp,44(sp)
 10188e8:	df000b04 	addi	fp,sp,44
 10188ec:	e13ffc15 	stw	r4,-16(fp)
 10188f0:	e17ffd15 	stw	r5,-12(fp)
 10188f4:	e1bffe15 	stw	r6,-8(fp)
 10188f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 10188fc:	e0bffd17 	ldw	r2,-12(fp)
 1018900:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1018904:	00004706 	br	1018a24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1018908:	e0bffc17 	ldw	r2,-16(fp)
 101890c:	10800a17 	ldw	r2,40(r2)
 1018910:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1018914:	e0bffc17 	ldw	r2,-16(fp)
 1018918:	10800b17 	ldw	r2,44(r2)
 101891c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1018920:	e0fff717 	ldw	r3,-36(fp)
 1018924:	e0bff817 	ldw	r2,-32(fp)
 1018928:	18800536 	bltu	r3,r2,1018940 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 101892c:	e0fff717 	ldw	r3,-36(fp)
 1018930:	e0bff817 	ldw	r2,-32(fp)
 1018934:	1885c83a 	sub	r2,r3,r2
 1018938:	e0bff615 	stw	r2,-40(fp)
 101893c:	00000406 	br	1018950 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1018940:	00c20004 	movi	r3,2048
 1018944:	e0bff817 	ldw	r2,-32(fp)
 1018948:	1885c83a 	sub	r2,r3,r2
 101894c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1018950:	e0bff617 	ldw	r2,-40(fp)
 1018954:	10001e26 	beq	r2,zero,10189d0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1018958:	e0fffe17 	ldw	r3,-8(fp)
 101895c:	e0bff617 	ldw	r2,-40(fp)
 1018960:	1880022e 	bgeu	r3,r2,101896c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1018964:	e0bffe17 	ldw	r2,-8(fp)
 1018968:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101896c:	e0bffc17 	ldw	r2,-16(fp)
 1018970:	10c00e04 	addi	r3,r2,56
 1018974:	e0bff817 	ldw	r2,-32(fp)
 1018978:	1885883a 	add	r2,r3,r2
 101897c:	e1bff617 	ldw	r6,-40(fp)
 1018980:	100b883a 	mov	r5,r2
 1018984:	e13ff517 	ldw	r4,-44(fp)
 1018988:	1008d600 	call	1008d60 <memcpy>
      ptr   += n;
 101898c:	e0fff517 	ldw	r3,-44(fp)
 1018990:	e0bff617 	ldw	r2,-40(fp)
 1018994:	1885883a 	add	r2,r3,r2
 1018998:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 101899c:	e0fffe17 	ldw	r3,-8(fp)
 10189a0:	e0bff617 	ldw	r2,-40(fp)
 10189a4:	1885c83a 	sub	r2,r3,r2
 10189a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10189ac:	e0fff817 	ldw	r3,-32(fp)
 10189b0:	e0bff617 	ldw	r2,-40(fp)
 10189b4:	1885883a 	add	r2,r3,r2
 10189b8:	10c1ffcc 	andi	r3,r2,2047
 10189bc:	e0bffc17 	ldw	r2,-16(fp)
 10189c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10189c4:	e0bffe17 	ldw	r2,-8(fp)
 10189c8:	00bfcf16 	blt	zero,r2,1018908 <__alt_data_end+0xff018908>
 10189cc:	00000106 	br	10189d4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 10189d0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 10189d4:	e0fff517 	ldw	r3,-44(fp)
 10189d8:	e0bffd17 	ldw	r2,-12(fp)
 10189dc:	1880141e 	bne	r3,r2,1018a30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10189e0:	e0bfff17 	ldw	r2,-4(fp)
 10189e4:	1090000c 	andi	r2,r2,16384
 10189e8:	1000131e 	bne	r2,zero,1018a38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10189ec:	0001883a 	nop
 10189f0:	e0bffc17 	ldw	r2,-16(fp)
 10189f4:	10c00a17 	ldw	r3,40(r2)
 10189f8:	e0bff717 	ldw	r2,-36(fp)
 10189fc:	1880051e 	bne	r3,r2,1018a14 <altera_avalon_jtag_uart_read+0x138>
 1018a00:	e0bffc17 	ldw	r2,-16(fp)
 1018a04:	10c00917 	ldw	r3,36(r2)
 1018a08:	e0bffc17 	ldw	r2,-16(fp)
 1018a0c:	10800117 	ldw	r2,4(r2)
 1018a10:	18bff736 	bltu	r3,r2,10189f0 <__alt_data_end+0xff0189f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1018a14:	e0bffc17 	ldw	r2,-16(fp)
 1018a18:	10c00a17 	ldw	r3,40(r2)
 1018a1c:	e0bff717 	ldw	r2,-36(fp)
 1018a20:	18800726 	beq	r3,r2,1018a40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1018a24:	e0bffe17 	ldw	r2,-8(fp)
 1018a28:	00bfb716 	blt	zero,r2,1018908 <__alt_data_end+0xff018908>
 1018a2c:	00000506 	br	1018a44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1018a30:	0001883a 	nop
 1018a34:	00000306 	br	1018a44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1018a38:	0001883a 	nop
 1018a3c:	00000106 	br	1018a44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1018a40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1018a44:	e0fff517 	ldw	r3,-44(fp)
 1018a48:	e0bffd17 	ldw	r2,-12(fp)
 1018a4c:	18801826 	beq	r3,r2,1018ab0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018a50:	0005303a 	rdctl	r2,status
 1018a54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018a58:	e0fffb17 	ldw	r3,-20(fp)
 1018a5c:	00bfff84 	movi	r2,-2
 1018a60:	1884703a 	and	r2,r3,r2
 1018a64:	1001703a 	wrctl	status,r2
  
  return context;
 1018a68:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1018a6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1018a70:	e0bffc17 	ldw	r2,-16(fp)
 1018a74:	10800817 	ldw	r2,32(r2)
 1018a78:	10c00054 	ori	r3,r2,1
 1018a7c:	e0bffc17 	ldw	r2,-16(fp)
 1018a80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1018a84:	e0bffc17 	ldw	r2,-16(fp)
 1018a88:	10800017 	ldw	r2,0(r2)
 1018a8c:	10800104 	addi	r2,r2,4
 1018a90:	1007883a 	mov	r3,r2
 1018a94:	e0bffc17 	ldw	r2,-16(fp)
 1018a98:	10800817 	ldw	r2,32(r2)
 1018a9c:	18800035 	stwio	r2,0(r3)
 1018aa0:	e0bffa17 	ldw	r2,-24(fp)
 1018aa4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018aa8:	e0bff917 	ldw	r2,-28(fp)
 1018aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1018ab0:	e0fff517 	ldw	r3,-44(fp)
 1018ab4:	e0bffd17 	ldw	r2,-12(fp)
 1018ab8:	18800426 	beq	r3,r2,1018acc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1018abc:	e0fff517 	ldw	r3,-44(fp)
 1018ac0:	e0bffd17 	ldw	r2,-12(fp)
 1018ac4:	1885c83a 	sub	r2,r3,r2
 1018ac8:	00000606 	br	1018ae4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1018acc:	e0bfff17 	ldw	r2,-4(fp)
 1018ad0:	1090000c 	andi	r2,r2,16384
 1018ad4:	10000226 	beq	r2,zero,1018ae0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1018ad8:	00bffd44 	movi	r2,-11
 1018adc:	00000106 	br	1018ae4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1018ae0:	00bffec4 	movi	r2,-5
}
 1018ae4:	e037883a 	mov	sp,fp
 1018ae8:	dfc00117 	ldw	ra,4(sp)
 1018aec:	df000017 	ldw	fp,0(sp)
 1018af0:	dec00204 	addi	sp,sp,8
 1018af4:	f800283a 	ret

01018af8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1018af8:	defff304 	addi	sp,sp,-52
 1018afc:	dfc00c15 	stw	ra,48(sp)
 1018b00:	df000b15 	stw	fp,44(sp)
 1018b04:	df000b04 	addi	fp,sp,44
 1018b08:	e13ffc15 	stw	r4,-16(fp)
 1018b0c:	e17ffd15 	stw	r5,-12(fp)
 1018b10:	e1bffe15 	stw	r6,-8(fp)
 1018b14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1018b18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1018b1c:	e0bffd17 	ldw	r2,-12(fp)
 1018b20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1018b24:	00003706 	br	1018c04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1018b28:	e0bffc17 	ldw	r2,-16(fp)
 1018b2c:	10800c17 	ldw	r2,48(r2)
 1018b30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1018b34:	e0bffc17 	ldw	r2,-16(fp)
 1018b38:	10800d17 	ldw	r2,52(r2)
 1018b3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1018b40:	e0fff917 	ldw	r3,-28(fp)
 1018b44:	e0bff517 	ldw	r2,-44(fp)
 1018b48:	1880062e 	bgeu	r3,r2,1018b64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1018b4c:	e0fff517 	ldw	r3,-44(fp)
 1018b50:	e0bff917 	ldw	r2,-28(fp)
 1018b54:	1885c83a 	sub	r2,r3,r2
 1018b58:	10bfffc4 	addi	r2,r2,-1
 1018b5c:	e0bff615 	stw	r2,-40(fp)
 1018b60:	00000b06 	br	1018b90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1018b64:	e0bff517 	ldw	r2,-44(fp)
 1018b68:	10000526 	beq	r2,zero,1018b80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1018b6c:	00c20004 	movi	r3,2048
 1018b70:	e0bff917 	ldw	r2,-28(fp)
 1018b74:	1885c83a 	sub	r2,r3,r2
 1018b78:	e0bff615 	stw	r2,-40(fp)
 1018b7c:	00000406 	br	1018b90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1018b80:	00c1ffc4 	movi	r3,2047
 1018b84:	e0bff917 	ldw	r2,-28(fp)
 1018b88:	1885c83a 	sub	r2,r3,r2
 1018b8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1018b90:	e0bff617 	ldw	r2,-40(fp)
 1018b94:	10001e26 	beq	r2,zero,1018c10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1018b98:	e0fffe17 	ldw	r3,-8(fp)
 1018b9c:	e0bff617 	ldw	r2,-40(fp)
 1018ba0:	1880022e 	bgeu	r3,r2,1018bac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1018ba4:	e0bffe17 	ldw	r2,-8(fp)
 1018ba8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1018bac:	e0bffc17 	ldw	r2,-16(fp)
 1018bb0:	10c20e04 	addi	r3,r2,2104
 1018bb4:	e0bff917 	ldw	r2,-28(fp)
 1018bb8:	1885883a 	add	r2,r3,r2
 1018bbc:	e1bff617 	ldw	r6,-40(fp)
 1018bc0:	e17ffd17 	ldw	r5,-12(fp)
 1018bc4:	1009883a 	mov	r4,r2
 1018bc8:	1008d600 	call	1008d60 <memcpy>
      ptr   += n;
 1018bcc:	e0fffd17 	ldw	r3,-12(fp)
 1018bd0:	e0bff617 	ldw	r2,-40(fp)
 1018bd4:	1885883a 	add	r2,r3,r2
 1018bd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1018bdc:	e0fffe17 	ldw	r3,-8(fp)
 1018be0:	e0bff617 	ldw	r2,-40(fp)
 1018be4:	1885c83a 	sub	r2,r3,r2
 1018be8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1018bec:	e0fff917 	ldw	r3,-28(fp)
 1018bf0:	e0bff617 	ldw	r2,-40(fp)
 1018bf4:	1885883a 	add	r2,r3,r2
 1018bf8:	10c1ffcc 	andi	r3,r2,2047
 1018bfc:	e0bffc17 	ldw	r2,-16(fp)
 1018c00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1018c04:	e0bffe17 	ldw	r2,-8(fp)
 1018c08:	00bfc716 	blt	zero,r2,1018b28 <__alt_data_end+0xff018b28>
 1018c0c:	00000106 	br	1018c14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1018c10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018c14:	0005303a 	rdctl	r2,status
 1018c18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018c1c:	e0fffb17 	ldw	r3,-20(fp)
 1018c20:	00bfff84 	movi	r2,-2
 1018c24:	1884703a 	and	r2,r3,r2
 1018c28:	1001703a 	wrctl	status,r2
  
  return context;
 1018c2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1018c30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1018c34:	e0bffc17 	ldw	r2,-16(fp)
 1018c38:	10800817 	ldw	r2,32(r2)
 1018c3c:	10c00094 	ori	r3,r2,2
 1018c40:	e0bffc17 	ldw	r2,-16(fp)
 1018c44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1018c48:	e0bffc17 	ldw	r2,-16(fp)
 1018c4c:	10800017 	ldw	r2,0(r2)
 1018c50:	10800104 	addi	r2,r2,4
 1018c54:	1007883a 	mov	r3,r2
 1018c58:	e0bffc17 	ldw	r2,-16(fp)
 1018c5c:	10800817 	ldw	r2,32(r2)
 1018c60:	18800035 	stwio	r2,0(r3)
 1018c64:	e0bffa17 	ldw	r2,-24(fp)
 1018c68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018c6c:	e0bff817 	ldw	r2,-32(fp)
 1018c70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1018c74:	e0bffe17 	ldw	r2,-8(fp)
 1018c78:	0080100e 	bge	zero,r2,1018cbc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1018c7c:	e0bfff17 	ldw	r2,-4(fp)
 1018c80:	1090000c 	andi	r2,r2,16384
 1018c84:	1000101e 	bne	r2,zero,1018cc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1018c88:	0001883a 	nop
 1018c8c:	e0bffc17 	ldw	r2,-16(fp)
 1018c90:	10c00d17 	ldw	r3,52(r2)
 1018c94:	e0bff517 	ldw	r2,-44(fp)
 1018c98:	1880051e 	bne	r3,r2,1018cb0 <altera_avalon_jtag_uart_write+0x1b8>
 1018c9c:	e0bffc17 	ldw	r2,-16(fp)
 1018ca0:	10c00917 	ldw	r3,36(r2)
 1018ca4:	e0bffc17 	ldw	r2,-16(fp)
 1018ca8:	10800117 	ldw	r2,4(r2)
 1018cac:	18bff736 	bltu	r3,r2,1018c8c <__alt_data_end+0xff018c8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1018cb0:	e0bffc17 	ldw	r2,-16(fp)
 1018cb4:	10800917 	ldw	r2,36(r2)
 1018cb8:	1000051e 	bne	r2,zero,1018cd0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1018cbc:	e0bffe17 	ldw	r2,-8(fp)
 1018cc0:	00bfd016 	blt	zero,r2,1018c04 <__alt_data_end+0xff018c04>
 1018cc4:	00000306 	br	1018cd4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1018cc8:	0001883a 	nop
 1018ccc:	00000106 	br	1018cd4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1018cd0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1018cd4:	e0fffd17 	ldw	r3,-12(fp)
 1018cd8:	e0bff717 	ldw	r2,-36(fp)
 1018cdc:	18800426 	beq	r3,r2,1018cf0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1018ce0:	e0fffd17 	ldw	r3,-12(fp)
 1018ce4:	e0bff717 	ldw	r2,-36(fp)
 1018ce8:	1885c83a 	sub	r2,r3,r2
 1018cec:	00000606 	br	1018d08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1018cf0:	e0bfff17 	ldw	r2,-4(fp)
 1018cf4:	1090000c 	andi	r2,r2,16384
 1018cf8:	10000226 	beq	r2,zero,1018d04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1018cfc:	00bffd44 	movi	r2,-11
 1018d00:	00000106 	br	1018d08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1018d04:	00bffec4 	movi	r2,-5
}
 1018d08:	e037883a 	mov	sp,fp
 1018d0c:	dfc00117 	ldw	ra,4(sp)
 1018d10:	df000017 	ldw	fp,0(sp)
 1018d14:	dec00204 	addi	sp,sp,8
 1018d18:	f800283a 	ret

01018d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018d1c:	defffe04 	addi	sp,sp,-8
 1018d20:	dfc00115 	stw	ra,4(sp)
 1018d24:	df000015 	stw	fp,0(sp)
 1018d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1018d2c:	d0a01517 	ldw	r2,-32684(gp)
 1018d30:	10000326 	beq	r2,zero,1018d40 <alt_get_errno+0x24>
 1018d34:	d0a01517 	ldw	r2,-32684(gp)
 1018d38:	103ee83a 	callr	r2
 1018d3c:	00000106 	br	1018d44 <alt_get_errno+0x28>
 1018d40:	d0a72904 	addi	r2,gp,-25436
}
 1018d44:	e037883a 	mov	sp,fp
 1018d48:	dfc00117 	ldw	ra,4(sp)
 1018d4c:	df000017 	ldw	fp,0(sp)
 1018d50:	dec00204 	addi	sp,sp,8
 1018d54:	f800283a 	ret

01018d58 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1018d58:	defff904 	addi	sp,sp,-28
 1018d5c:	df000615 	stw	fp,24(sp)
 1018d60:	df000604 	addi	fp,sp,24
 1018d64:	e13ffe15 	stw	r4,-8(fp)
 1018d68:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 1018d6c:	00bfffc4 	movi	r2,-1
 1018d70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 1018d74:	0005317a 	rdctl	r2,cpuid
 1018d78:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 1018d7c:	e0bffb17 	ldw	r2,-20(fp)
 1018d80:	1006943a 	slli	r3,r2,16
 1018d84:	e0bfff17 	ldw	r2,-4(fp)
 1018d88:	1884b03a 	or	r2,r3,r2
 1018d8c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 1018d90:	e0bffe17 	ldw	r2,-8(fp)
 1018d94:	10800317 	ldw	r2,12(r2)
 1018d98:	e0fffc17 	ldw	r3,-16(fp)
 1018d9c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1018da0:	e0bffe17 	ldw	r2,-8(fp)
 1018da4:	10800317 	ldw	r2,12(r2)
 1018da8:	10800037 	ldwio	r2,0(r2)
 1018dac:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 1018db0:	e0fffd17 	ldw	r3,-12(fp)
 1018db4:	e0bffc17 	ldw	r2,-16(fp)
 1018db8:	1880011e 	bne	r3,r2,1018dc0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 1018dbc:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 1018dc0:	e0bffa17 	ldw	r2,-24(fp)
}
 1018dc4:	e037883a 	mov	sp,fp
 1018dc8:	df000017 	ldw	fp,0(sp)
 1018dcc:	dec00104 	addi	sp,sp,4
 1018dd0:	f800283a 	ret

01018dd4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 1018dd4:	defffc04 	addi	sp,sp,-16
 1018dd8:	dfc00315 	stw	ra,12(sp)
 1018ddc:	df000215 	stw	fp,8(sp)
 1018de0:	df000204 	addi	fp,sp,8
 1018de4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 1018de8:	d1601804 	addi	r5,gp,-32672
 1018dec:	e13fff17 	ldw	r4,-4(fp)
 1018df0:	10195480 	call	1019548 <alt_find_dev>
 1018df4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 1018df8:	e0bffe17 	ldw	r2,-8(fp)
 1018dfc:	1000041e 	bne	r2,zero,1018e10 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 1018e00:	1018d1c0 	call	1018d1c <alt_get_errno>
 1018e04:	1007883a 	mov	r3,r2
 1018e08:	008004c4 	movi	r2,19
 1018e0c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1018e10:	e0bffe17 	ldw	r2,-8(fp)
}
 1018e14:	e037883a 	mov	sp,fp
 1018e18:	dfc00117 	ldw	ra,4(sp)
 1018e1c:	df000017 	ldw	fp,0(sp)
 1018e20:	dec00204 	addi	sp,sp,8
 1018e24:	f800283a 	ret

01018e28 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 1018e28:	defffe04 	addi	sp,sp,-8
 1018e2c:	df000115 	stw	fp,4(sp)
 1018e30:	df000104 	addi	fp,sp,4
 1018e34:	e13fff15 	stw	r4,-4(fp)
  return;
 1018e38:	0001883a 	nop
}
 1018e3c:	e037883a 	mov	sp,fp
 1018e40:	df000017 	ldw	fp,0(sp)
 1018e44:	dec00104 	addi	sp,sp,4
 1018e48:	f800283a 	ret

01018e4c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 1018e4c:	defffc04 	addi	sp,sp,-16
 1018e50:	dfc00315 	stw	ra,12(sp)
 1018e54:	df000215 	stw	fp,8(sp)
 1018e58:	df000204 	addi	fp,sp,8
 1018e5c:	e13ffe15 	stw	r4,-8(fp)
 1018e60:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 1018e64:	0001883a 	nop
 1018e68:	e17fff17 	ldw	r5,-4(fp)
 1018e6c:	e13ffe17 	ldw	r4,-8(fp)
 1018e70:	1018d580 	call	1018d58 <alt_mutex_trylock>
 1018e74:	103ffc1e 	bne	r2,zero,1018e68 <__alt_data_end+0xff018e68>
}
 1018e78:	0001883a 	nop
 1018e7c:	e037883a 	mov	sp,fp
 1018e80:	dfc00117 	ldw	ra,4(sp)
 1018e84:	df000017 	ldw	fp,0(sp)
 1018e88:	dec00204 	addi	sp,sp,8
 1018e8c:	f800283a 	ret

01018e90 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1018e90:	defffa04 	addi	sp,sp,-24
 1018e94:	dfc00515 	stw	ra,20(sp)
 1018e98:	df000415 	stw	fp,16(sp)
 1018e9c:	df000404 	addi	fp,sp,16
 1018ea0:	e13ffd15 	stw	r4,-12(fp)
 1018ea4:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 1018ea8:	e17ffe17 	ldw	r5,-8(fp)
 1018eac:	e13ffd17 	ldw	r4,-12(fp)
 1018eb0:	1018d580 	call	1018d58 <alt_mutex_trylock>
 1018eb4:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 1018eb8:	e0bffc17 	ldw	r2,-16(fp)
}
 1018ebc:	e037883a 	mov	sp,fp
 1018ec0:	dfc00117 	ldw	ra,4(sp)
 1018ec4:	df000017 	ldw	fp,0(sp)
 1018ec8:	dec00204 	addi	sp,sp,8
 1018ecc:	f800283a 	ret

01018ed0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 1018ed0:	defffd04 	addi	sp,sp,-12
 1018ed4:	df000215 	stw	fp,8(sp)
 1018ed8:	df000204 	addi	fp,sp,8
 1018edc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 1018ee0:	0005317a 	rdctl	r2,cpuid
 1018ee4:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 1018ee8:	e0bfff17 	ldw	r2,-4(fp)
 1018eec:	10800317 	ldw	r2,12(r2)
 1018ef0:	10800104 	addi	r2,r2,4
 1018ef4:	00c00044 	movi	r3,1
 1018ef8:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 1018efc:	e0bfff17 	ldw	r2,-4(fp)
 1018f00:	10800317 	ldw	r2,12(r2)
 1018f04:	e0fffe17 	ldw	r3,-8(fp)
 1018f08:	1806943a 	slli	r3,r3,16
 1018f0c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 1018f10:	0001883a 	nop
 1018f14:	e037883a 	mov	sp,fp
 1018f18:	df000017 	ldw	fp,0(sp)
 1018f1c:	dec00104 	addi	sp,sp,4
 1018f20:	f800283a 	ret

01018f24 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 1018f24:	defff904 	addi	sp,sp,-28
 1018f28:	df000615 	stw	fp,24(sp)
 1018f2c:	df000604 	addi	fp,sp,24
 1018f30:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 1018f34:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 1018f38:	0005317a 	rdctl	r2,cpuid
 1018f3c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1018f40:	e0bfff17 	ldw	r2,-4(fp)
 1018f44:	10800317 	ldw	r2,12(r2)
 1018f48:	10800037 	ldwio	r2,0(r2)
 1018f4c:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 1018f50:	e0bffc17 	ldw	r2,-16(fp)
 1018f54:	1004d43a 	srli	r2,r2,16
 1018f58:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 1018f5c:	e0fffd17 	ldw	r3,-12(fp)
 1018f60:	e0bffb17 	ldw	r2,-20(fp)
 1018f64:	1880071e 	bne	r3,r2,1018f84 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 1018f68:	e0bffc17 	ldw	r2,-16(fp)
 1018f6c:	10bfffcc 	andi	r2,r2,65535
 1018f70:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 1018f74:	e0bffe17 	ldw	r2,-8(fp)
 1018f78:	10000226 	beq	r2,zero,1018f84 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 1018f7c:	00800044 	movi	r2,1
 1018f80:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 1018f84:	e0bffa17 	ldw	r2,-24(fp)
}
 1018f88:	e037883a 	mov	sp,fp
 1018f8c:	df000017 	ldw	fp,0(sp)
 1018f90:	dec00104 	addi	sp,sp,4
 1018f94:	f800283a 	ret

01018f98 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 1018f98:	defffc04 	addi	sp,sp,-16
 1018f9c:	df000315 	stw	fp,12(sp)
 1018fa0:	df000304 	addi	fp,sp,12
 1018fa4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 1018fa8:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 1018fac:	e0bfff17 	ldw	r2,-4(fp)
 1018fb0:	10800317 	ldw	r2,12(r2)
 1018fb4:	10800104 	addi	r2,r2,4
 1018fb8:	10800037 	ldwio	r2,0(r2)
 1018fbc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 1018fc0:	e0bffe17 	ldw	r2,-8(fp)
 1018fc4:	1080004c 	andi	r2,r2,1
 1018fc8:	10000226 	beq	r2,zero,1018fd4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 1018fcc:	00800044 	movi	r2,1
 1018fd0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 1018fd4:	e0bffd17 	ldw	r2,-12(fp)
}
 1018fd8:	e037883a 	mov	sp,fp
 1018fdc:	df000017 	ldw	fp,0(sp)
 1018fe0:	dec00104 	addi	sp,sp,4
 1018fe4:	f800283a 	ret

01018fe8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1018fe8:	defffa04 	addi	sp,sp,-24
 1018fec:	dfc00515 	stw	ra,20(sp)
 1018ff0:	df000415 	stw	fp,16(sp)
 1018ff4:	df000404 	addi	fp,sp,16
 1018ff8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1018ffc:	0007883a 	mov	r3,zero
 1019000:	e0bfff17 	ldw	r2,-4(fp)
 1019004:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1019008:	e0bfff17 	ldw	r2,-4(fp)
 101900c:	10800104 	addi	r2,r2,4
 1019010:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019014:	0005303a 	rdctl	r2,status
 1019018:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101901c:	e0fffd17 	ldw	r3,-12(fp)
 1019020:	00bfff84 	movi	r2,-2
 1019024:	1884703a 	and	r2,r3,r2
 1019028:	1001703a 	wrctl	status,r2
  
  return context;
 101902c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1019030:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1019034:	1019cdc0 	call	1019cdc <alt_tick>
 1019038:	e0bffc17 	ldw	r2,-16(fp)
 101903c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019040:	e0bffe17 	ldw	r2,-8(fp)
 1019044:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1019048:	0001883a 	nop
 101904c:	e037883a 	mov	sp,fp
 1019050:	dfc00117 	ldw	ra,4(sp)
 1019054:	df000017 	ldw	fp,0(sp)
 1019058:	dec00204 	addi	sp,sp,8
 101905c:	f800283a 	ret

01019060 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1019060:	defff804 	addi	sp,sp,-32
 1019064:	dfc00715 	stw	ra,28(sp)
 1019068:	df000615 	stw	fp,24(sp)
 101906c:	df000604 	addi	fp,sp,24
 1019070:	e13ffc15 	stw	r4,-16(fp)
 1019074:	e17ffd15 	stw	r5,-12(fp)
 1019078:	e1bffe15 	stw	r6,-8(fp)
 101907c:	e1ffff15 	stw	r7,-4(fp)
 1019080:	e0bfff17 	ldw	r2,-4(fp)
 1019084:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1019088:	d0a72e17 	ldw	r2,-25416(gp)
 101908c:	1000021e 	bne	r2,zero,1019098 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1019090:	e0bffb17 	ldw	r2,-20(fp)
 1019094:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1019098:	e0bffc17 	ldw	r2,-16(fp)
 101909c:	10800104 	addi	r2,r2,4
 10190a0:	00c001c4 	movi	r3,7
 10190a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 10190a8:	d8000015 	stw	zero,0(sp)
 10190ac:	e1fffc17 	ldw	r7,-16(fp)
 10190b0:	018040b4 	movhi	r6,258
 10190b4:	31a3fa04 	addi	r6,r6,-28696
 10190b8:	e17ffe17 	ldw	r5,-8(fp)
 10190bc:	e13ffd17 	ldw	r4,-12(fp)
 10190c0:	101960c0 	call	101960c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10190c4:	0001883a 	nop
 10190c8:	e037883a 	mov	sp,fp
 10190cc:	dfc00117 	ldw	ra,4(sp)
 10190d0:	df000017 	ldw	fp,0(sp)
 10190d4:	dec00204 	addi	sp,sp,8
 10190d8:	f800283a 	ret

010190dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10190dc:	defff504 	addi	sp,sp,-44
 10190e0:	df000a15 	stw	fp,40(sp)
 10190e4:	df000a04 	addi	fp,sp,40
 10190e8:	e13ffc15 	stw	r4,-16(fp)
 10190ec:	e17ffd15 	stw	r5,-12(fp)
 10190f0:	e1bffe15 	stw	r6,-8(fp)
 10190f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10190f8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10190fc:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
 1019100:	10003c26 	beq	r2,zero,10191f4 <alt_alarm_start+0x118>
  {
    if (alarm)
 1019104:	e0bffc17 	ldw	r2,-16(fp)
 1019108:	10003826 	beq	r2,zero,10191ec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 101910c:	e0bffc17 	ldw	r2,-16(fp)
 1019110:	e0fffe17 	ldw	r3,-8(fp)
 1019114:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1019118:	e0bffc17 	ldw	r2,-16(fp)
 101911c:	e0ffff17 	ldw	r3,-4(fp)
 1019120:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019124:	0005303a 	rdctl	r2,status
 1019128:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101912c:	e0fff917 	ldw	r3,-28(fp)
 1019130:	00bfff84 	movi	r2,-2
 1019134:	1884703a 	and	r2,r3,r2
 1019138:	1001703a 	wrctl	status,r2
  
  return context;
 101913c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1019140:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1019144:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
 1019148:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101914c:	e0fffd17 	ldw	r3,-12(fp)
 1019150:	e0bff617 	ldw	r2,-40(fp)
 1019154:	1885883a 	add	r2,r3,r2
 1019158:	10c00044 	addi	r3,r2,1
 101915c:	e0bffc17 	ldw	r2,-16(fp)
 1019160:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1019164:	e0bffc17 	ldw	r2,-16(fp)
 1019168:	10c00217 	ldw	r3,8(r2)
 101916c:	e0bff617 	ldw	r2,-40(fp)
 1019170:	1880042e 	bgeu	r3,r2,1019184 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1019174:	e0bffc17 	ldw	r2,-16(fp)
 1019178:	00c00044 	movi	r3,1
 101917c:	10c00405 	stb	r3,16(r2)
 1019180:	00000206 	br	101918c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1019184:	e0bffc17 	ldw	r2,-16(fp)
 1019188:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101918c:	e0bffc17 	ldw	r2,-16(fp)
 1019190:	d0e01a04 	addi	r3,gp,-32664
 1019194:	e0fffa15 	stw	r3,-24(fp)
 1019198:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101919c:	e0bffb17 	ldw	r2,-20(fp)
 10191a0:	e0fffa17 	ldw	r3,-24(fp)
 10191a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10191a8:	e0bffa17 	ldw	r2,-24(fp)
 10191ac:	10c00017 	ldw	r3,0(r2)
 10191b0:	e0bffb17 	ldw	r2,-20(fp)
 10191b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10191b8:	e0bffa17 	ldw	r2,-24(fp)
 10191bc:	10800017 	ldw	r2,0(r2)
 10191c0:	e0fffb17 	ldw	r3,-20(fp)
 10191c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10191c8:	e0bffa17 	ldw	r2,-24(fp)
 10191cc:	e0fffb17 	ldw	r3,-20(fp)
 10191d0:	10c00015 	stw	r3,0(r2)
 10191d4:	e0bff817 	ldw	r2,-32(fp)
 10191d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10191dc:	e0bff717 	ldw	r2,-36(fp)
 10191e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10191e4:	0005883a 	mov	r2,zero
 10191e8:	00000306 	br	10191f8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 10191ec:	00bffa84 	movi	r2,-22
 10191f0:	00000106 	br	10191f8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 10191f4:	00bfde84 	movi	r2,-134
  }
}
 10191f8:	e037883a 	mov	sp,fp
 10191fc:	df000017 	ldw	fp,0(sp)
 1019200:	dec00104 	addi	sp,sp,4
 1019204:	f800283a 	ret

01019208 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1019208:	defffa04 	addi	sp,sp,-24
 101920c:	dfc00515 	stw	ra,20(sp)
 1019210:	df000415 	stw	fp,16(sp)
 1019214:	df000404 	addi	fp,sp,16
 1019218:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 101921c:	008000c4 	movi	r2,3
 1019220:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1019224:	e0fffd17 	ldw	r3,-12(fp)
 1019228:	008003f4 	movhi	r2,15
 101922c:	10909004 	addi	r2,r2,16960
 1019230:	1885383a 	mul	r2,r3,r2
 1019234:	100b883a 	mov	r5,r2
 1019238:	0100bef4 	movhi	r4,763
 101923c:	213c2004 	addi	r4,r4,-3968
 1019240:	1014d740 	call	1014d74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1019244:	100b883a 	mov	r5,r2
 1019248:	01200034 	movhi	r4,32768
 101924c:	213fffc4 	addi	r4,r4,-1
 1019250:	1014d740 	call	1014d74 <__udivsi3>
 1019254:	100b883a 	mov	r5,r2
 1019258:	e13fff17 	ldw	r4,-4(fp)
 101925c:	1014d740 	call	1014d74 <__udivsi3>
 1019260:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1019264:	e0bffe17 	ldw	r2,-8(fp)
 1019268:	10002a26 	beq	r2,zero,1019314 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 101926c:	e03ffc15 	stw	zero,-16(fp)
 1019270:	00001706 	br	10192d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1019274:	00a00034 	movhi	r2,32768
 1019278:	10bfffc4 	addi	r2,r2,-1
 101927c:	10bfffc4 	addi	r2,r2,-1
 1019280:	103ffe1e 	bne	r2,zero,101927c <__alt_data_end+0xff01927c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1019284:	e0fffd17 	ldw	r3,-12(fp)
 1019288:	008003f4 	movhi	r2,15
 101928c:	10909004 	addi	r2,r2,16960
 1019290:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1019294:	100b883a 	mov	r5,r2
 1019298:	0100bef4 	movhi	r4,763
 101929c:	213c2004 	addi	r4,r4,-3968
 10192a0:	1014d740 	call	1014d74 <__udivsi3>
 10192a4:	100b883a 	mov	r5,r2
 10192a8:	01200034 	movhi	r4,32768
 10192ac:	213fffc4 	addi	r4,r4,-1
 10192b0:	1014d740 	call	1014d74 <__udivsi3>
 10192b4:	1007883a 	mov	r3,r2
 10192b8:	e0bfff17 	ldw	r2,-4(fp)
 10192bc:	10c5c83a 	sub	r2,r2,r3
 10192c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10192c4:	e0bffc17 	ldw	r2,-16(fp)
 10192c8:	10800044 	addi	r2,r2,1
 10192cc:	e0bffc15 	stw	r2,-16(fp)
 10192d0:	e0fffc17 	ldw	r3,-16(fp)
 10192d4:	e0bffe17 	ldw	r2,-8(fp)
 10192d8:	18bfe616 	blt	r3,r2,1019274 <__alt_data_end+0xff019274>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10192dc:	e0fffd17 	ldw	r3,-12(fp)
 10192e0:	008003f4 	movhi	r2,15
 10192e4:	10909004 	addi	r2,r2,16960
 10192e8:	1885383a 	mul	r2,r3,r2
 10192ec:	100b883a 	mov	r5,r2
 10192f0:	0100bef4 	movhi	r4,763
 10192f4:	213c2004 	addi	r4,r4,-3968
 10192f8:	1014d740 	call	1014d74 <__udivsi3>
 10192fc:	1007883a 	mov	r3,r2
 1019300:	e0bfff17 	ldw	r2,-4(fp)
 1019304:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1019308:	10bfffc4 	addi	r2,r2,-1
 101930c:	103ffe1e 	bne	r2,zero,1019308 <__alt_data_end+0xff019308>
 1019310:	00000d06 	br	1019348 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1019314:	e0fffd17 	ldw	r3,-12(fp)
 1019318:	008003f4 	movhi	r2,15
 101931c:	10909004 	addi	r2,r2,16960
 1019320:	1885383a 	mul	r2,r3,r2
 1019324:	100b883a 	mov	r5,r2
 1019328:	0100bef4 	movhi	r4,763
 101932c:	213c2004 	addi	r4,r4,-3968
 1019330:	1014d740 	call	1014d74 <__udivsi3>
 1019334:	1007883a 	mov	r3,r2
 1019338:	e0bfff17 	ldw	r2,-4(fp)
 101933c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1019340:	10bfffc4 	addi	r2,r2,-1
 1019344:	00bffe16 	blt	zero,r2,1019340 <__alt_data_end+0xff019340>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1019348:	0005883a 	mov	r2,zero
}
 101934c:	e037883a 	mov	sp,fp
 1019350:	dfc00117 	ldw	ra,4(sp)
 1019354:	df000017 	ldw	fp,0(sp)
 1019358:	dec00204 	addi	sp,sp,8
 101935c:	f800283a 	ret

01019360 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1019360:	defffe04 	addi	sp,sp,-8
 1019364:	df000115 	stw	fp,4(sp)
 1019368:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101936c:	e03fff15 	stw	zero,-4(fp)
 1019370:	00000506 	br	1019388 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1019374:	e0bfff17 	ldw	r2,-4(fp)
 1019378:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 101937c:	e0bfff17 	ldw	r2,-4(fp)
 1019380:	10800804 	addi	r2,r2,32
 1019384:	e0bfff15 	stw	r2,-4(fp)
 1019388:	e0bfff17 	ldw	r2,-4(fp)
 101938c:	10820030 	cmpltui	r2,r2,2048
 1019390:	103ff81e 	bne	r2,zero,1019374 <__alt_data_end+0xff019374>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1019394:	0001883a 	nop
 1019398:	e037883a 	mov	sp,fp
 101939c:	df000017 	ldw	fp,0(sp)
 10193a0:	dec00104 	addi	sp,sp,4
 10193a4:	f800283a 	ret

010193a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10193a8:	defffe04 	addi	sp,sp,-8
 10193ac:	dfc00115 	stw	ra,4(sp)
 10193b0:	df000015 	stw	fp,0(sp)
 10193b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10193b8:	d0a01517 	ldw	r2,-32684(gp)
 10193bc:	10000326 	beq	r2,zero,10193cc <alt_get_errno+0x24>
 10193c0:	d0a01517 	ldw	r2,-32684(gp)
 10193c4:	103ee83a 	callr	r2
 10193c8:	00000106 	br	10193d0 <alt_get_errno+0x28>
 10193cc:	d0a72904 	addi	r2,gp,-25436
}
 10193d0:	e037883a 	mov	sp,fp
 10193d4:	dfc00117 	ldw	ra,4(sp)
 10193d8:	df000017 	ldw	fp,0(sp)
 10193dc:	dec00204 	addi	sp,sp,8
 10193e0:	f800283a 	ret

010193e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10193e4:	defffa04 	addi	sp,sp,-24
 10193e8:	dfc00515 	stw	ra,20(sp)
 10193ec:	df000415 	stw	fp,16(sp)
 10193f0:	df000404 	addi	fp,sp,16
 10193f4:	e13ffe15 	stw	r4,-8(fp)
 10193f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10193fc:	e0bffe17 	ldw	r2,-8(fp)
 1019400:	10000326 	beq	r2,zero,1019410 <alt_dev_llist_insert+0x2c>
 1019404:	e0bffe17 	ldw	r2,-8(fp)
 1019408:	10800217 	ldw	r2,8(r2)
 101940c:	1000061e 	bne	r2,zero,1019428 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1019410:	10193a80 	call	10193a8 <alt_get_errno>
 1019414:	1007883a 	mov	r3,r2
 1019418:	00800584 	movi	r2,22
 101941c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1019420:	00bffa84 	movi	r2,-22
 1019424:	00001306 	br	1019474 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1019428:	e0bffe17 	ldw	r2,-8(fp)
 101942c:	e0ffff17 	ldw	r3,-4(fp)
 1019430:	e0fffc15 	stw	r3,-16(fp)
 1019434:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1019438:	e0bffd17 	ldw	r2,-12(fp)
 101943c:	e0fffc17 	ldw	r3,-16(fp)
 1019440:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1019444:	e0bffc17 	ldw	r2,-16(fp)
 1019448:	10c00017 	ldw	r3,0(r2)
 101944c:	e0bffd17 	ldw	r2,-12(fp)
 1019450:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1019454:	e0bffc17 	ldw	r2,-16(fp)
 1019458:	10800017 	ldw	r2,0(r2)
 101945c:	e0fffd17 	ldw	r3,-12(fp)
 1019460:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1019464:	e0bffc17 	ldw	r2,-16(fp)
 1019468:	e0fffd17 	ldw	r3,-12(fp)
 101946c:	10c00015 	stw	r3,0(r2)

  return 0;  
 1019470:	0005883a 	mov	r2,zero
}
 1019474:	e037883a 	mov	sp,fp
 1019478:	dfc00117 	ldw	ra,4(sp)
 101947c:	df000017 	ldw	fp,0(sp)
 1019480:	dec00204 	addi	sp,sp,8
 1019484:	f800283a 	ret

01019488 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1019488:	defffd04 	addi	sp,sp,-12
 101948c:	dfc00215 	stw	ra,8(sp)
 1019490:	df000115 	stw	fp,4(sp)
 1019494:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1019498:	008040b4 	movhi	r2,258
 101949c:	10a91404 	addi	r2,r2,-23472
 10194a0:	e0bfff15 	stw	r2,-4(fp)
 10194a4:	00000606 	br	10194c0 <_do_ctors+0x38>
        (*ctor) (); 
 10194a8:	e0bfff17 	ldw	r2,-4(fp)
 10194ac:	10800017 	ldw	r2,0(r2)
 10194b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10194b4:	e0bfff17 	ldw	r2,-4(fp)
 10194b8:	10bfff04 	addi	r2,r2,-4
 10194bc:	e0bfff15 	stw	r2,-4(fp)
 10194c0:	e0ffff17 	ldw	r3,-4(fp)
 10194c4:	008040b4 	movhi	r2,258
 10194c8:	10a91004 	addi	r2,r2,-23488
 10194cc:	18bff62e 	bgeu	r3,r2,10194a8 <__alt_data_end+0xff0194a8>
        (*ctor) (); 
}
 10194d0:	0001883a 	nop
 10194d4:	e037883a 	mov	sp,fp
 10194d8:	dfc00117 	ldw	ra,4(sp)
 10194dc:	df000017 	ldw	fp,0(sp)
 10194e0:	dec00204 	addi	sp,sp,8
 10194e4:	f800283a 	ret

010194e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10194e8:	defffd04 	addi	sp,sp,-12
 10194ec:	dfc00215 	stw	ra,8(sp)
 10194f0:	df000115 	stw	fp,4(sp)
 10194f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10194f8:	008040b4 	movhi	r2,258
 10194fc:	10a91404 	addi	r2,r2,-23472
 1019500:	e0bfff15 	stw	r2,-4(fp)
 1019504:	00000606 	br	1019520 <_do_dtors+0x38>
        (*dtor) (); 
 1019508:	e0bfff17 	ldw	r2,-4(fp)
 101950c:	10800017 	ldw	r2,0(r2)
 1019510:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1019514:	e0bfff17 	ldw	r2,-4(fp)
 1019518:	10bfff04 	addi	r2,r2,-4
 101951c:	e0bfff15 	stw	r2,-4(fp)
 1019520:	e0ffff17 	ldw	r3,-4(fp)
 1019524:	008040b4 	movhi	r2,258
 1019528:	10a91504 	addi	r2,r2,-23468
 101952c:	18bff62e 	bgeu	r3,r2,1019508 <__alt_data_end+0xff019508>
        (*dtor) (); 
}
 1019530:	0001883a 	nop
 1019534:	e037883a 	mov	sp,fp
 1019538:	dfc00117 	ldw	ra,4(sp)
 101953c:	df000017 	ldw	fp,0(sp)
 1019540:	dec00204 	addi	sp,sp,8
 1019544:	f800283a 	ret

01019548 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1019548:	defffa04 	addi	sp,sp,-24
 101954c:	dfc00515 	stw	ra,20(sp)
 1019550:	df000415 	stw	fp,16(sp)
 1019554:	df000404 	addi	fp,sp,16
 1019558:	e13ffe15 	stw	r4,-8(fp)
 101955c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1019560:	e0bfff17 	ldw	r2,-4(fp)
 1019564:	10800017 	ldw	r2,0(r2)
 1019568:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101956c:	e13ffe17 	ldw	r4,-8(fp)
 1019570:	10099b40 	call	10099b4 <strlen>
 1019574:	10800044 	addi	r2,r2,1
 1019578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101957c:	00000d06 	br	10195b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1019580:	e0bffc17 	ldw	r2,-16(fp)
 1019584:	10800217 	ldw	r2,8(r2)
 1019588:	e0fffd17 	ldw	r3,-12(fp)
 101958c:	180d883a 	mov	r6,r3
 1019590:	e17ffe17 	ldw	r5,-8(fp)
 1019594:	1009883a 	mov	r4,r2
 1019598:	101a12c0 	call	101a12c <memcmp>
 101959c:	1000021e 	bne	r2,zero,10195a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10195a0:	e0bffc17 	ldw	r2,-16(fp)
 10195a4:	00000706 	br	10195c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10195a8:	e0bffc17 	ldw	r2,-16(fp)
 10195ac:	10800017 	ldw	r2,0(r2)
 10195b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10195b4:	e0fffc17 	ldw	r3,-16(fp)
 10195b8:	e0bfff17 	ldw	r2,-4(fp)
 10195bc:	18bff01e 	bne	r3,r2,1019580 <__alt_data_end+0xff019580>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10195c0:	0005883a 	mov	r2,zero
}
 10195c4:	e037883a 	mov	sp,fp
 10195c8:	dfc00117 	ldw	ra,4(sp)
 10195cc:	df000017 	ldw	fp,0(sp)
 10195d0:	dec00204 	addi	sp,sp,8
 10195d4:	f800283a 	ret

010195d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10195d8:	defffe04 	addi	sp,sp,-8
 10195dc:	dfc00115 	stw	ra,4(sp)
 10195e0:	df000015 	stw	fp,0(sp)
 10195e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 10195e8:	01420004 	movi	r5,2048
 10195ec:	0009883a 	mov	r4,zero
 10195f0:	1019fb40 	call	1019fb4 <alt_icache_flush>
#endif
}
 10195f4:	0001883a 	nop
 10195f8:	e037883a 	mov	sp,fp
 10195fc:	dfc00117 	ldw	ra,4(sp)
 1019600:	df000017 	ldw	fp,0(sp)
 1019604:	dec00204 	addi	sp,sp,8
 1019608:	f800283a 	ret

0101960c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101960c:	defff904 	addi	sp,sp,-28
 1019610:	dfc00615 	stw	ra,24(sp)
 1019614:	df000515 	stw	fp,20(sp)
 1019618:	df000504 	addi	fp,sp,20
 101961c:	e13ffc15 	stw	r4,-16(fp)
 1019620:	e17ffd15 	stw	r5,-12(fp)
 1019624:	e1bffe15 	stw	r6,-8(fp)
 1019628:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 101962c:	e0800217 	ldw	r2,8(fp)
 1019630:	d8800015 	stw	r2,0(sp)
 1019634:	e1ffff17 	ldw	r7,-4(fp)
 1019638:	e1bffe17 	ldw	r6,-8(fp)
 101963c:	e17ffd17 	ldw	r5,-12(fp)
 1019640:	e13ffc17 	ldw	r4,-16(fp)
 1019644:	10197bc0 	call	10197bc <alt_iic_isr_register>
}  
 1019648:	e037883a 	mov	sp,fp
 101964c:	dfc00117 	ldw	ra,4(sp)
 1019650:	df000017 	ldw	fp,0(sp)
 1019654:	dec00204 	addi	sp,sp,8
 1019658:	f800283a 	ret

0101965c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 101965c:	defff904 	addi	sp,sp,-28
 1019660:	df000615 	stw	fp,24(sp)
 1019664:	df000604 	addi	fp,sp,24
 1019668:	e13ffe15 	stw	r4,-8(fp)
 101966c:	e17fff15 	stw	r5,-4(fp)
 1019670:	e0bfff17 	ldw	r2,-4(fp)
 1019674:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019678:	0005303a 	rdctl	r2,status
 101967c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019680:	e0fffb17 	ldw	r3,-20(fp)
 1019684:	00bfff84 	movi	r2,-2
 1019688:	1884703a 	and	r2,r3,r2
 101968c:	1001703a 	wrctl	status,r2
  
  return context;
 1019690:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1019694:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1019698:	00c00044 	movi	r3,1
 101969c:	e0bffa17 	ldw	r2,-24(fp)
 10196a0:	1884983a 	sll	r2,r3,r2
 10196a4:	1007883a 	mov	r3,r2
 10196a8:	d0a72a17 	ldw	r2,-25432(gp)
 10196ac:	1884b03a 	or	r2,r3,r2
 10196b0:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10196b4:	d0a72a17 	ldw	r2,-25432(gp)
 10196b8:	100170fa 	wrctl	ienable,r2
 10196bc:	e0bffc17 	ldw	r2,-16(fp)
 10196c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10196c4:	e0bffd17 	ldw	r2,-12(fp)
 10196c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10196cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 10196d0:	0001883a 	nop
}
 10196d4:	e037883a 	mov	sp,fp
 10196d8:	df000017 	ldw	fp,0(sp)
 10196dc:	dec00104 	addi	sp,sp,4
 10196e0:	f800283a 	ret

010196e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 10196e4:	defff904 	addi	sp,sp,-28
 10196e8:	df000615 	stw	fp,24(sp)
 10196ec:	df000604 	addi	fp,sp,24
 10196f0:	e13ffe15 	stw	r4,-8(fp)
 10196f4:	e17fff15 	stw	r5,-4(fp)
 10196f8:	e0bfff17 	ldw	r2,-4(fp)
 10196fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019700:	0005303a 	rdctl	r2,status
 1019704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019708:	e0fffb17 	ldw	r3,-20(fp)
 101970c:	00bfff84 	movi	r2,-2
 1019710:	1884703a 	and	r2,r3,r2
 1019714:	1001703a 	wrctl	status,r2
  
  return context;
 1019718:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 101971c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1019720:	00c00044 	movi	r3,1
 1019724:	e0bffa17 	ldw	r2,-24(fp)
 1019728:	1884983a 	sll	r2,r3,r2
 101972c:	0084303a 	nor	r2,zero,r2
 1019730:	1007883a 	mov	r3,r2
 1019734:	d0a72a17 	ldw	r2,-25432(gp)
 1019738:	1884703a 	and	r2,r3,r2
 101973c:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1019740:	d0a72a17 	ldw	r2,-25432(gp)
 1019744:	100170fa 	wrctl	ienable,r2
 1019748:	e0bffc17 	ldw	r2,-16(fp)
 101974c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019750:	e0bffd17 	ldw	r2,-12(fp)
 1019754:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1019758:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 101975c:	0001883a 	nop
}
 1019760:	e037883a 	mov	sp,fp
 1019764:	df000017 	ldw	fp,0(sp)
 1019768:	dec00104 	addi	sp,sp,4
 101976c:	f800283a 	ret

01019770 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1019770:	defffc04 	addi	sp,sp,-16
 1019774:	df000315 	stw	fp,12(sp)
 1019778:	df000304 	addi	fp,sp,12
 101977c:	e13ffe15 	stw	r4,-8(fp)
 1019780:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1019784:	000530fa 	rdctl	r2,ienable
 1019788:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 101978c:	00c00044 	movi	r3,1
 1019790:	e0bfff17 	ldw	r2,-4(fp)
 1019794:	1884983a 	sll	r2,r3,r2
 1019798:	1007883a 	mov	r3,r2
 101979c:	e0bffd17 	ldw	r2,-12(fp)
 10197a0:	1884703a 	and	r2,r3,r2
 10197a4:	1004c03a 	cmpne	r2,r2,zero
 10197a8:	10803fcc 	andi	r2,r2,255
}
 10197ac:	e037883a 	mov	sp,fp
 10197b0:	df000017 	ldw	fp,0(sp)
 10197b4:	dec00104 	addi	sp,sp,4
 10197b8:	f800283a 	ret

010197bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10197bc:	defff504 	addi	sp,sp,-44
 10197c0:	dfc00a15 	stw	ra,40(sp)
 10197c4:	df000915 	stw	fp,36(sp)
 10197c8:	df000904 	addi	fp,sp,36
 10197cc:	e13ffc15 	stw	r4,-16(fp)
 10197d0:	e17ffd15 	stw	r5,-12(fp)
 10197d4:	e1bffe15 	stw	r6,-8(fp)
 10197d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 10197dc:	00bffa84 	movi	r2,-22
 10197e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10197e4:	e0bffd17 	ldw	r2,-12(fp)
 10197e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10197ec:	e0bff817 	ldw	r2,-32(fp)
 10197f0:	10800808 	cmpgei	r2,r2,32
 10197f4:	1000271e 	bne	r2,zero,1019894 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10197f8:	0005303a 	rdctl	r2,status
 10197fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019800:	e0fffb17 	ldw	r3,-20(fp)
 1019804:	00bfff84 	movi	r2,-2
 1019808:	1884703a 	and	r2,r3,r2
 101980c:	1001703a 	wrctl	status,r2
  
  return context;
 1019810:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1019814:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1019818:	008060b4 	movhi	r2,386
 101981c:	10bb4c04 	addi	r2,r2,-4816
 1019820:	e0fff817 	ldw	r3,-32(fp)
 1019824:	180690fa 	slli	r3,r3,3
 1019828:	10c5883a 	add	r2,r2,r3
 101982c:	e0fffe17 	ldw	r3,-8(fp)
 1019830:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1019834:	008060b4 	movhi	r2,386
 1019838:	10bb4c04 	addi	r2,r2,-4816
 101983c:	e0fff817 	ldw	r3,-32(fp)
 1019840:	180690fa 	slli	r3,r3,3
 1019844:	10c5883a 	add	r2,r2,r3
 1019848:	10800104 	addi	r2,r2,4
 101984c:	e0ffff17 	ldw	r3,-4(fp)
 1019850:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1019854:	e0bffe17 	ldw	r2,-8(fp)
 1019858:	10000526 	beq	r2,zero,1019870 <alt_iic_isr_register+0xb4>
 101985c:	e0bff817 	ldw	r2,-32(fp)
 1019860:	100b883a 	mov	r5,r2
 1019864:	e13ffc17 	ldw	r4,-16(fp)
 1019868:	101965c0 	call	101965c <alt_ic_irq_enable>
 101986c:	00000406 	br	1019880 <alt_iic_isr_register+0xc4>
 1019870:	e0bff817 	ldw	r2,-32(fp)
 1019874:	100b883a 	mov	r5,r2
 1019878:	e13ffc17 	ldw	r4,-16(fp)
 101987c:	10196e40 	call	10196e4 <alt_ic_irq_disable>
 1019880:	e0bff715 	stw	r2,-36(fp)
 1019884:	e0bffa17 	ldw	r2,-24(fp)
 1019888:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101988c:	e0bff917 	ldw	r2,-28(fp)
 1019890:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1019894:	e0bff717 	ldw	r2,-36(fp)
}
 1019898:	e037883a 	mov	sp,fp
 101989c:	dfc00117 	ldw	ra,4(sp)
 10198a0:	df000017 	ldw	fp,0(sp)
 10198a4:	dec00204 	addi	sp,sp,8
 10198a8:	f800283a 	ret

010198ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10198ac:	defff904 	addi	sp,sp,-28
 10198b0:	dfc00615 	stw	ra,24(sp)
 10198b4:	df000515 	stw	fp,20(sp)
 10198b8:	df000504 	addi	fp,sp,20
 10198bc:	e13ffc15 	stw	r4,-16(fp)
 10198c0:	e17ffd15 	stw	r5,-12(fp)
 10198c4:	e1bffe15 	stw	r6,-8(fp)
 10198c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10198cc:	e1bfff17 	ldw	r6,-4(fp)
 10198d0:	e17ffe17 	ldw	r5,-8(fp)
 10198d4:	e13ffd17 	ldw	r4,-12(fp)
 10198d8:	1019aec0 	call	1019aec <open>
 10198dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10198e0:	e0bffb17 	ldw	r2,-20(fp)
 10198e4:	10001c16 	blt	r2,zero,1019958 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 10198e8:	008040b4 	movhi	r2,258
 10198ec:	10aebb04 	addi	r2,r2,-17684
 10198f0:	e0fffb17 	ldw	r3,-20(fp)
 10198f4:	18c00324 	muli	r3,r3,12
 10198f8:	10c5883a 	add	r2,r2,r3
 10198fc:	10c00017 	ldw	r3,0(r2)
 1019900:	e0bffc17 	ldw	r2,-16(fp)
 1019904:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1019908:	008040b4 	movhi	r2,258
 101990c:	10aebb04 	addi	r2,r2,-17684
 1019910:	e0fffb17 	ldw	r3,-20(fp)
 1019914:	18c00324 	muli	r3,r3,12
 1019918:	10c5883a 	add	r2,r2,r3
 101991c:	10800104 	addi	r2,r2,4
 1019920:	10c00017 	ldw	r3,0(r2)
 1019924:	e0bffc17 	ldw	r2,-16(fp)
 1019928:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 101992c:	008040b4 	movhi	r2,258
 1019930:	10aebb04 	addi	r2,r2,-17684
 1019934:	e0fffb17 	ldw	r3,-20(fp)
 1019938:	18c00324 	muli	r3,r3,12
 101993c:	10c5883a 	add	r2,r2,r3
 1019940:	10800204 	addi	r2,r2,8
 1019944:	10c00017 	ldw	r3,0(r2)
 1019948:	e0bffc17 	ldw	r2,-16(fp)
 101994c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1019950:	e13ffb17 	ldw	r4,-20(fp)
 1019954:	1017ec40 	call	1017ec4 <alt_release_fd>
  }
} 
 1019958:	0001883a 	nop
 101995c:	e037883a 	mov	sp,fp
 1019960:	dfc00117 	ldw	ra,4(sp)
 1019964:	df000017 	ldw	fp,0(sp)
 1019968:	dec00204 	addi	sp,sp,8
 101996c:	f800283a 	ret

01019970 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1019970:	defffb04 	addi	sp,sp,-20
 1019974:	dfc00415 	stw	ra,16(sp)
 1019978:	df000315 	stw	fp,12(sp)
 101997c:	df000304 	addi	fp,sp,12
 1019980:	e13ffd15 	stw	r4,-12(fp)
 1019984:	e17ffe15 	stw	r5,-8(fp)
 1019988:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101998c:	01c07fc4 	movi	r7,511
 1019990:	01800044 	movi	r6,1
 1019994:	e17ffd17 	ldw	r5,-12(fp)
 1019998:	010040b4 	movhi	r4,258
 101999c:	212ebe04 	addi	r4,r4,-17672
 10199a0:	10198ac0 	call	10198ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10199a4:	01c07fc4 	movi	r7,511
 10199a8:	000d883a 	mov	r6,zero
 10199ac:	e17ffe17 	ldw	r5,-8(fp)
 10199b0:	010040b4 	movhi	r4,258
 10199b4:	212ebb04 	addi	r4,r4,-17684
 10199b8:	10198ac0 	call	10198ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10199bc:	01c07fc4 	movi	r7,511
 10199c0:	01800044 	movi	r6,1
 10199c4:	e17fff17 	ldw	r5,-4(fp)
 10199c8:	010040b4 	movhi	r4,258
 10199cc:	212ec104 	addi	r4,r4,-17660
 10199d0:	10198ac0 	call	10198ac <alt_open_fd>
}  
 10199d4:	0001883a 	nop
 10199d8:	e037883a 	mov	sp,fp
 10199dc:	dfc00117 	ldw	ra,4(sp)
 10199e0:	df000017 	ldw	fp,0(sp)
 10199e4:	dec00204 	addi	sp,sp,8
 10199e8:	f800283a 	ret

010199ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10199ec:	defffe04 	addi	sp,sp,-8
 10199f0:	dfc00115 	stw	ra,4(sp)
 10199f4:	df000015 	stw	fp,0(sp)
 10199f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10199fc:	d0a01517 	ldw	r2,-32684(gp)
 1019a00:	10000326 	beq	r2,zero,1019a10 <alt_get_errno+0x24>
 1019a04:	d0a01517 	ldw	r2,-32684(gp)
 1019a08:	103ee83a 	callr	r2
 1019a0c:	00000106 	br	1019a14 <alt_get_errno+0x28>
 1019a10:	d0a72904 	addi	r2,gp,-25436
}
 1019a14:	e037883a 	mov	sp,fp
 1019a18:	dfc00117 	ldw	ra,4(sp)
 1019a1c:	df000017 	ldw	fp,0(sp)
 1019a20:	dec00204 	addi	sp,sp,8
 1019a24:	f800283a 	ret

01019a28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1019a28:	defffd04 	addi	sp,sp,-12
 1019a2c:	df000215 	stw	fp,8(sp)
 1019a30:	df000204 	addi	fp,sp,8
 1019a34:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1019a38:	e0bfff17 	ldw	r2,-4(fp)
 1019a3c:	10800217 	ldw	r2,8(r2)
 1019a40:	10d00034 	orhi	r3,r2,16384
 1019a44:	e0bfff17 	ldw	r2,-4(fp)
 1019a48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1019a4c:	e03ffe15 	stw	zero,-8(fp)
 1019a50:	00001d06 	br	1019ac8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1019a54:	008040b4 	movhi	r2,258
 1019a58:	10aebb04 	addi	r2,r2,-17684
 1019a5c:	e0fffe17 	ldw	r3,-8(fp)
 1019a60:	18c00324 	muli	r3,r3,12
 1019a64:	10c5883a 	add	r2,r2,r3
 1019a68:	10c00017 	ldw	r3,0(r2)
 1019a6c:	e0bfff17 	ldw	r2,-4(fp)
 1019a70:	10800017 	ldw	r2,0(r2)
 1019a74:	1880111e 	bne	r3,r2,1019abc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1019a78:	008040b4 	movhi	r2,258
 1019a7c:	10aebb04 	addi	r2,r2,-17684
 1019a80:	e0fffe17 	ldw	r3,-8(fp)
 1019a84:	18c00324 	muli	r3,r3,12
 1019a88:	10c5883a 	add	r2,r2,r3
 1019a8c:	10800204 	addi	r2,r2,8
 1019a90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1019a94:	1000090e 	bge	r2,zero,1019abc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1019a98:	e0bffe17 	ldw	r2,-8(fp)
 1019a9c:	10c00324 	muli	r3,r2,12
 1019aa0:	008040b4 	movhi	r2,258
 1019aa4:	10aebb04 	addi	r2,r2,-17684
 1019aa8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1019aac:	e0bfff17 	ldw	r2,-4(fp)
 1019ab0:	18800226 	beq	r3,r2,1019abc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1019ab4:	00bffcc4 	movi	r2,-13
 1019ab8:	00000806 	br	1019adc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1019abc:	e0bffe17 	ldw	r2,-8(fp)
 1019ac0:	10800044 	addi	r2,r2,1
 1019ac4:	e0bffe15 	stw	r2,-8(fp)
 1019ac8:	d0a01417 	ldw	r2,-32688(gp)
 1019acc:	1007883a 	mov	r3,r2
 1019ad0:	e0bffe17 	ldw	r2,-8(fp)
 1019ad4:	18bfdf2e 	bgeu	r3,r2,1019a54 <__alt_data_end+0xff019a54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1019ad8:	0005883a 	mov	r2,zero
}
 1019adc:	e037883a 	mov	sp,fp
 1019ae0:	df000017 	ldw	fp,0(sp)
 1019ae4:	dec00104 	addi	sp,sp,4
 1019ae8:	f800283a 	ret

01019aec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1019aec:	defff604 	addi	sp,sp,-40
 1019af0:	dfc00915 	stw	ra,36(sp)
 1019af4:	df000815 	stw	fp,32(sp)
 1019af8:	df000804 	addi	fp,sp,32
 1019afc:	e13ffd15 	stw	r4,-12(fp)
 1019b00:	e17ffe15 	stw	r5,-8(fp)
 1019b04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1019b08:	00bfffc4 	movi	r2,-1
 1019b0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1019b10:	00bffb44 	movi	r2,-19
 1019b14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1019b18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1019b1c:	d1601204 	addi	r5,gp,-32696
 1019b20:	e13ffd17 	ldw	r4,-12(fp)
 1019b24:	10195480 	call	1019548 <alt_find_dev>
 1019b28:	e0bff815 	stw	r2,-32(fp)
 1019b2c:	e0bff817 	ldw	r2,-32(fp)
 1019b30:	1000051e 	bne	r2,zero,1019b48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1019b34:	e13ffd17 	ldw	r4,-12(fp)
 1019b38:	1019e080 	call	1019e08 <alt_find_file>
 1019b3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1019b40:	00800044 	movi	r2,1
 1019b44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1019b48:	e0bff817 	ldw	r2,-32(fp)
 1019b4c:	10002926 	beq	r2,zero,1019bf4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1019b50:	e13ff817 	ldw	r4,-32(fp)
 1019b54:	1019f100 	call	1019f10 <alt_get_fd>
 1019b58:	e0bff915 	stw	r2,-28(fp)
 1019b5c:	e0bff917 	ldw	r2,-28(fp)
 1019b60:	1000030e 	bge	r2,zero,1019b70 <open+0x84>
    {
      status = index;
 1019b64:	e0bff917 	ldw	r2,-28(fp)
 1019b68:	e0bffa15 	stw	r2,-24(fp)
 1019b6c:	00002306 	br	1019bfc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1019b70:	e0bff917 	ldw	r2,-28(fp)
 1019b74:	10c00324 	muli	r3,r2,12
 1019b78:	008040b4 	movhi	r2,258
 1019b7c:	10aebb04 	addi	r2,r2,-17684
 1019b80:	1885883a 	add	r2,r3,r2
 1019b84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1019b88:	e0fffe17 	ldw	r3,-8(fp)
 1019b8c:	00900034 	movhi	r2,16384
 1019b90:	10bfffc4 	addi	r2,r2,-1
 1019b94:	1886703a 	and	r3,r3,r2
 1019b98:	e0bffc17 	ldw	r2,-16(fp)
 1019b9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1019ba0:	e0bffb17 	ldw	r2,-20(fp)
 1019ba4:	1000051e 	bne	r2,zero,1019bbc <open+0xd0>
 1019ba8:	e13ffc17 	ldw	r4,-16(fp)
 1019bac:	1019a280 	call	1019a28 <alt_file_locked>
 1019bb0:	e0bffa15 	stw	r2,-24(fp)
 1019bb4:	e0bffa17 	ldw	r2,-24(fp)
 1019bb8:	10001016 	blt	r2,zero,1019bfc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1019bbc:	e0bff817 	ldw	r2,-32(fp)
 1019bc0:	10800317 	ldw	r2,12(r2)
 1019bc4:	10000826 	beq	r2,zero,1019be8 <open+0xfc>
 1019bc8:	e0bff817 	ldw	r2,-32(fp)
 1019bcc:	10800317 	ldw	r2,12(r2)
 1019bd0:	e1ffff17 	ldw	r7,-4(fp)
 1019bd4:	e1bffe17 	ldw	r6,-8(fp)
 1019bd8:	e17ffd17 	ldw	r5,-12(fp)
 1019bdc:	e13ffc17 	ldw	r4,-16(fp)
 1019be0:	103ee83a 	callr	r2
 1019be4:	00000106 	br	1019bec <open+0x100>
 1019be8:	0005883a 	mov	r2,zero
 1019bec:	e0bffa15 	stw	r2,-24(fp)
 1019bf0:	00000206 	br	1019bfc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1019bf4:	00bffb44 	movi	r2,-19
 1019bf8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1019bfc:	e0bffa17 	ldw	r2,-24(fp)
 1019c00:	1000090e 	bge	r2,zero,1019c28 <open+0x13c>
  {
    alt_release_fd (index);  
 1019c04:	e13ff917 	ldw	r4,-28(fp)
 1019c08:	1017ec40 	call	1017ec4 <alt_release_fd>
    ALT_ERRNO = -status;
 1019c0c:	10199ec0 	call	10199ec <alt_get_errno>
 1019c10:	1007883a 	mov	r3,r2
 1019c14:	e0bffa17 	ldw	r2,-24(fp)
 1019c18:	0085c83a 	sub	r2,zero,r2
 1019c1c:	18800015 	stw	r2,0(r3)
    return -1;
 1019c20:	00bfffc4 	movi	r2,-1
 1019c24:	00000106 	br	1019c2c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1019c28:	e0bff917 	ldw	r2,-28(fp)
}
 1019c2c:	e037883a 	mov	sp,fp
 1019c30:	dfc00117 	ldw	ra,4(sp)
 1019c34:	df000017 	ldw	fp,0(sp)
 1019c38:	dec00204 	addi	sp,sp,8
 1019c3c:	f800283a 	ret

01019c40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1019c40:	defffa04 	addi	sp,sp,-24
 1019c44:	df000515 	stw	fp,20(sp)
 1019c48:	df000504 	addi	fp,sp,20
 1019c4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1019c50:	0005303a 	rdctl	r2,status
 1019c54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1019c58:	e0fffc17 	ldw	r3,-16(fp)
 1019c5c:	00bfff84 	movi	r2,-2
 1019c60:	1884703a 	and	r2,r3,r2
 1019c64:	1001703a 	wrctl	status,r2
  
  return context;
 1019c68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1019c6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1019c70:	e0bfff17 	ldw	r2,-4(fp)
 1019c74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1019c78:	e0bffd17 	ldw	r2,-12(fp)
 1019c7c:	10800017 	ldw	r2,0(r2)
 1019c80:	e0fffd17 	ldw	r3,-12(fp)
 1019c84:	18c00117 	ldw	r3,4(r3)
 1019c88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1019c8c:	e0bffd17 	ldw	r2,-12(fp)
 1019c90:	10800117 	ldw	r2,4(r2)
 1019c94:	e0fffd17 	ldw	r3,-12(fp)
 1019c98:	18c00017 	ldw	r3,0(r3)
 1019c9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1019ca0:	e0bffd17 	ldw	r2,-12(fp)
 1019ca4:	e0fffd17 	ldw	r3,-12(fp)
 1019ca8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1019cac:	e0bffd17 	ldw	r2,-12(fp)
 1019cb0:	e0fffd17 	ldw	r3,-12(fp)
 1019cb4:	10c00015 	stw	r3,0(r2)
 1019cb8:	e0bffb17 	ldw	r2,-20(fp)
 1019cbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019cc0:	e0bffe17 	ldw	r2,-8(fp)
 1019cc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1019cc8:	0001883a 	nop
 1019ccc:	e037883a 	mov	sp,fp
 1019cd0:	df000017 	ldw	fp,0(sp)
 1019cd4:	dec00104 	addi	sp,sp,4
 1019cd8:	f800283a 	ret

01019cdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1019cdc:	defffb04 	addi	sp,sp,-20
 1019ce0:	dfc00415 	stw	ra,16(sp)
 1019ce4:	df000315 	stw	fp,12(sp)
 1019ce8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1019cec:	d0a01a17 	ldw	r2,-32664(gp)
 1019cf0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1019cf4:	d0a72f17 	ldw	r2,-25412(gp)
 1019cf8:	10800044 	addi	r2,r2,1
 1019cfc:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1019d00:	00002e06 	br	1019dbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1019d04:	e0bffd17 	ldw	r2,-12(fp)
 1019d08:	10800017 	ldw	r2,0(r2)
 1019d0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1019d10:	e0bffd17 	ldw	r2,-12(fp)
 1019d14:	10800403 	ldbu	r2,16(r2)
 1019d18:	10803fcc 	andi	r2,r2,255
 1019d1c:	10000426 	beq	r2,zero,1019d30 <alt_tick+0x54>
 1019d20:	d0a72f17 	ldw	r2,-25412(gp)
 1019d24:	1000021e 	bne	r2,zero,1019d30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1019d28:	e0bffd17 	ldw	r2,-12(fp)
 1019d2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1019d30:	e0bffd17 	ldw	r2,-12(fp)
 1019d34:	10800217 	ldw	r2,8(r2)
 1019d38:	d0e72f17 	ldw	r3,-25412(gp)
 1019d3c:	18801d36 	bltu	r3,r2,1019db4 <alt_tick+0xd8>
 1019d40:	e0bffd17 	ldw	r2,-12(fp)
 1019d44:	10800403 	ldbu	r2,16(r2)
 1019d48:	10803fcc 	andi	r2,r2,255
 1019d4c:	1000191e 	bne	r2,zero,1019db4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1019d50:	e0bffd17 	ldw	r2,-12(fp)
 1019d54:	10800317 	ldw	r2,12(r2)
 1019d58:	e0fffd17 	ldw	r3,-12(fp)
 1019d5c:	18c00517 	ldw	r3,20(r3)
 1019d60:	1809883a 	mov	r4,r3
 1019d64:	103ee83a 	callr	r2
 1019d68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1019d6c:	e0bfff17 	ldw	r2,-4(fp)
 1019d70:	1000031e 	bne	r2,zero,1019d80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1019d74:	e13ffd17 	ldw	r4,-12(fp)
 1019d78:	1019c400 	call	1019c40 <alt_alarm_stop>
 1019d7c:	00000d06 	br	1019db4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1019d80:	e0bffd17 	ldw	r2,-12(fp)
 1019d84:	10c00217 	ldw	r3,8(r2)
 1019d88:	e0bfff17 	ldw	r2,-4(fp)
 1019d8c:	1887883a 	add	r3,r3,r2
 1019d90:	e0bffd17 	ldw	r2,-12(fp)
 1019d94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1019d98:	e0bffd17 	ldw	r2,-12(fp)
 1019d9c:	10c00217 	ldw	r3,8(r2)
 1019da0:	d0a72f17 	ldw	r2,-25412(gp)
 1019da4:	1880032e 	bgeu	r3,r2,1019db4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1019da8:	e0bffd17 	ldw	r2,-12(fp)
 1019dac:	00c00044 	movi	r3,1
 1019db0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1019db4:	e0bffe17 	ldw	r2,-8(fp)
 1019db8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1019dbc:	e0fffd17 	ldw	r3,-12(fp)
 1019dc0:	d0a01a04 	addi	r2,gp,-32664
 1019dc4:	18bfcf1e 	bne	r3,r2,1019d04 <__alt_data_end+0xff019d04>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1019dc8:	0001883a 	nop
}
 1019dcc:	0001883a 	nop
 1019dd0:	e037883a 	mov	sp,fp
 1019dd4:	dfc00117 	ldw	ra,4(sp)
 1019dd8:	df000017 	ldw	fp,0(sp)
 1019ddc:	dec00204 	addi	sp,sp,8
 1019de0:	f800283a 	ret

01019de4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1019de4:	deffff04 	addi	sp,sp,-4
 1019de8:	df000015 	stw	fp,0(sp)
 1019dec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1019df0:	000170fa 	wrctl	ienable,zero
}
 1019df4:	0001883a 	nop
 1019df8:	e037883a 	mov	sp,fp
 1019dfc:	df000017 	ldw	fp,0(sp)
 1019e00:	dec00104 	addi	sp,sp,4
 1019e04:	f800283a 	ret

01019e08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1019e08:	defffb04 	addi	sp,sp,-20
 1019e0c:	dfc00415 	stw	ra,16(sp)
 1019e10:	df000315 	stw	fp,12(sp)
 1019e14:	df000304 	addi	fp,sp,12
 1019e18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1019e1c:	d0a01017 	ldw	r2,-32704(gp)
 1019e20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019e24:	00003106 	br	1019eec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1019e28:	e0bffd17 	ldw	r2,-12(fp)
 1019e2c:	10800217 	ldw	r2,8(r2)
 1019e30:	1009883a 	mov	r4,r2
 1019e34:	10099b40 	call	10099b4 <strlen>
 1019e38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1019e3c:	e0bffd17 	ldw	r2,-12(fp)
 1019e40:	10c00217 	ldw	r3,8(r2)
 1019e44:	e0bffe17 	ldw	r2,-8(fp)
 1019e48:	10bfffc4 	addi	r2,r2,-1
 1019e4c:	1885883a 	add	r2,r3,r2
 1019e50:	10800003 	ldbu	r2,0(r2)
 1019e54:	10803fcc 	andi	r2,r2,255
 1019e58:	1080201c 	xori	r2,r2,128
 1019e5c:	10bfe004 	addi	r2,r2,-128
 1019e60:	10800bd8 	cmpnei	r2,r2,47
 1019e64:	1000031e 	bne	r2,zero,1019e74 <alt_find_file+0x6c>
    {
      len -= 1;
 1019e68:	e0bffe17 	ldw	r2,-8(fp)
 1019e6c:	10bfffc4 	addi	r2,r2,-1
 1019e70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1019e74:	e0bffe17 	ldw	r2,-8(fp)
 1019e78:	e0ffff17 	ldw	r3,-4(fp)
 1019e7c:	1885883a 	add	r2,r3,r2
 1019e80:	10800003 	ldbu	r2,0(r2)
 1019e84:	10803fcc 	andi	r2,r2,255
 1019e88:	1080201c 	xori	r2,r2,128
 1019e8c:	10bfe004 	addi	r2,r2,-128
 1019e90:	10800be0 	cmpeqi	r2,r2,47
 1019e94:	1000081e 	bne	r2,zero,1019eb8 <alt_find_file+0xb0>
 1019e98:	e0bffe17 	ldw	r2,-8(fp)
 1019e9c:	e0ffff17 	ldw	r3,-4(fp)
 1019ea0:	1885883a 	add	r2,r3,r2
 1019ea4:	10800003 	ldbu	r2,0(r2)
 1019ea8:	10803fcc 	andi	r2,r2,255
 1019eac:	1080201c 	xori	r2,r2,128
 1019eb0:	10bfe004 	addi	r2,r2,-128
 1019eb4:	10000a1e 	bne	r2,zero,1019ee0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1019eb8:	e0bffd17 	ldw	r2,-12(fp)
 1019ebc:	10800217 	ldw	r2,8(r2)
 1019ec0:	e0fffe17 	ldw	r3,-8(fp)
 1019ec4:	180d883a 	mov	r6,r3
 1019ec8:	e17fff17 	ldw	r5,-4(fp)
 1019ecc:	1009883a 	mov	r4,r2
 1019ed0:	101a12c0 	call	101a12c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1019ed4:	1000021e 	bne	r2,zero,1019ee0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1019ed8:	e0bffd17 	ldw	r2,-12(fp)
 1019edc:	00000706 	br	1019efc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1019ee0:	e0bffd17 	ldw	r2,-12(fp)
 1019ee4:	10800017 	ldw	r2,0(r2)
 1019ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019eec:	e0fffd17 	ldw	r3,-12(fp)
 1019ef0:	d0a01004 	addi	r2,gp,-32704
 1019ef4:	18bfcc1e 	bne	r3,r2,1019e28 <__alt_data_end+0xff019e28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1019ef8:	0005883a 	mov	r2,zero
}
 1019efc:	e037883a 	mov	sp,fp
 1019f00:	dfc00117 	ldw	ra,4(sp)
 1019f04:	df000017 	ldw	fp,0(sp)
 1019f08:	dec00204 	addi	sp,sp,8
 1019f0c:	f800283a 	ret

01019f10 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1019f10:	defffc04 	addi	sp,sp,-16
 1019f14:	df000315 	stw	fp,12(sp)
 1019f18:	df000304 	addi	fp,sp,12
 1019f1c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1019f20:	00bffa04 	movi	r2,-24
 1019f24:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1019f28:	e03ffd15 	stw	zero,-12(fp)
 1019f2c:	00001906 	br	1019f94 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1019f30:	008040b4 	movhi	r2,258
 1019f34:	10aebb04 	addi	r2,r2,-17684
 1019f38:	e0fffd17 	ldw	r3,-12(fp)
 1019f3c:	18c00324 	muli	r3,r3,12
 1019f40:	10c5883a 	add	r2,r2,r3
 1019f44:	10800017 	ldw	r2,0(r2)
 1019f48:	10000f1e 	bne	r2,zero,1019f88 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1019f4c:	008040b4 	movhi	r2,258
 1019f50:	10aebb04 	addi	r2,r2,-17684
 1019f54:	e0fffd17 	ldw	r3,-12(fp)
 1019f58:	18c00324 	muli	r3,r3,12
 1019f5c:	10c5883a 	add	r2,r2,r3
 1019f60:	e0ffff17 	ldw	r3,-4(fp)
 1019f64:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1019f68:	d0e01417 	ldw	r3,-32688(gp)
 1019f6c:	e0bffd17 	ldw	r2,-12(fp)
 1019f70:	1880020e 	bge	r3,r2,1019f7c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1019f74:	e0bffd17 	ldw	r2,-12(fp)
 1019f78:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
 1019f7c:	e0bffd17 	ldw	r2,-12(fp)
 1019f80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1019f84:	00000606 	br	1019fa0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1019f88:	e0bffd17 	ldw	r2,-12(fp)
 1019f8c:	10800044 	addi	r2,r2,1
 1019f90:	e0bffd15 	stw	r2,-12(fp)
 1019f94:	e0bffd17 	ldw	r2,-12(fp)
 1019f98:	10800810 	cmplti	r2,r2,32
 1019f9c:	103fe41e 	bne	r2,zero,1019f30 <__alt_data_end+0xff019f30>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1019fa0:	e0bffe17 	ldw	r2,-8(fp)
}
 1019fa4:	e037883a 	mov	sp,fp
 1019fa8:	df000017 	ldw	fp,0(sp)
 1019fac:	dec00104 	addi	sp,sp,4
 1019fb0:	f800283a 	ret

01019fb4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1019fb4:	defffb04 	addi	sp,sp,-20
 1019fb8:	df000415 	stw	fp,16(sp)
 1019fbc:	df000404 	addi	fp,sp,16
 1019fc0:	e13ffe15 	stw	r4,-8(fp)
 1019fc4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1019fc8:	e0bfff17 	ldw	r2,-4(fp)
 1019fcc:	10820070 	cmpltui	r2,r2,2049
 1019fd0:	1000021e 	bne	r2,zero,1019fdc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1019fd4:	00820004 	movi	r2,2048
 1019fd8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1019fdc:	e0fffe17 	ldw	r3,-8(fp)
 1019fe0:	e0bfff17 	ldw	r2,-4(fp)
 1019fe4:	1885883a 	add	r2,r3,r2
 1019fe8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1019fec:	e0bffe17 	ldw	r2,-8(fp)
 1019ff0:	e0bffc15 	stw	r2,-16(fp)
 1019ff4:	00000506 	br	101a00c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1019ff8:	e0bffc17 	ldw	r2,-16(fp)
 1019ffc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 101a000:	e0bffc17 	ldw	r2,-16(fp)
 101a004:	10800804 	addi	r2,r2,32
 101a008:	e0bffc15 	stw	r2,-16(fp)
 101a00c:	e0fffc17 	ldw	r3,-16(fp)
 101a010:	e0bffd17 	ldw	r2,-12(fp)
 101a014:	18bff836 	bltu	r3,r2,1019ff8 <__alt_data_end+0xff019ff8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101a018:	e0bffe17 	ldw	r2,-8(fp)
 101a01c:	108007cc 	andi	r2,r2,31
 101a020:	10000226 	beq	r2,zero,101a02c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101a024:	e0bffc17 	ldw	r2,-16(fp)
 101a028:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101a02c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 101a030:	0001883a 	nop
 101a034:	e037883a 	mov	sp,fp
 101a038:	df000017 	ldw	fp,0(sp)
 101a03c:	dec00104 	addi	sp,sp,4
 101a040:	f800283a 	ret

0101a044 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 101a044:	defffe04 	addi	sp,sp,-8
 101a048:	df000115 	stw	fp,4(sp)
 101a04c:	df000104 	addi	fp,sp,4
 101a050:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 101a054:	e0bfff17 	ldw	r2,-4(fp)
 101a058:	10bffe84 	addi	r2,r2,-6
 101a05c:	10c00428 	cmpgeui	r3,r2,16
 101a060:	18001a1e 	bne	r3,zero,101a0cc <alt_exception_cause_generated_bad_addr+0x88>
 101a064:	100690ba 	slli	r3,r2,2
 101a068:	008040b4 	movhi	r2,258
 101a06c:	10a81f04 	addi	r2,r2,-24452
 101a070:	1885883a 	add	r2,r3,r2
 101a074:	10800017 	ldw	r2,0(r2)
 101a078:	1000683a 	jmp	r2
 101a07c:	0101a0bc 	xorhi	r4,zero,1666
 101a080:	0101a0bc 	xorhi	r4,zero,1666
 101a084:	0101a0cc 	andi	r4,zero,1667
 101a088:	0101a0cc 	andi	r4,zero,1667
 101a08c:	0101a0cc 	andi	r4,zero,1667
 101a090:	0101a0bc 	xorhi	r4,zero,1666
 101a094:	0101a0c4 	movi	r4,1667
 101a098:	0101a0cc 	andi	r4,zero,1667
 101a09c:	0101a0bc 	xorhi	r4,zero,1666
 101a0a0:	0101a0bc 	xorhi	r4,zero,1666
 101a0a4:	0101a0cc 	andi	r4,zero,1667
 101a0a8:	0101a0bc 	xorhi	r4,zero,1666
 101a0ac:	0101a0c4 	movi	r4,1667
 101a0b0:	0101a0cc 	andi	r4,zero,1667
 101a0b4:	0101a0cc 	andi	r4,zero,1667
 101a0b8:	0101a0bc 	xorhi	r4,zero,1666
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 101a0bc:	00800044 	movi	r2,1
 101a0c0:	00000306 	br	101a0d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 101a0c4:	0005883a 	mov	r2,zero
 101a0c8:	00000106 	br	101a0d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 101a0cc:	0005883a 	mov	r2,zero
  }
}
 101a0d0:	e037883a 	mov	sp,fp
 101a0d4:	df000017 	ldw	fp,0(sp)
 101a0d8:	dec00104 	addi	sp,sp,4
 101a0dc:	f800283a 	ret

0101a0e0 <atexit>:
 101a0e0:	200b883a 	mov	r5,r4
 101a0e4:	000f883a 	mov	r7,zero
 101a0e8:	000d883a 	mov	r6,zero
 101a0ec:	0009883a 	mov	r4,zero
 101a0f0:	101a1a81 	jmpi	101a1a8 <__register_exitproc>

0101a0f4 <exit>:
 101a0f4:	defffe04 	addi	sp,sp,-8
 101a0f8:	000b883a 	mov	r5,zero
 101a0fc:	dc000015 	stw	r16,0(sp)
 101a100:	dfc00115 	stw	ra,4(sp)
 101a104:	2021883a 	mov	r16,r4
 101a108:	101a2c00 	call	101a2c0 <__call_exitprocs>
 101a10c:	008040b4 	movhi	r2,258
 101a110:	10b34104 	addi	r2,r2,-13052
 101a114:	11000017 	ldw	r4,0(r2)
 101a118:	20800f17 	ldw	r2,60(r4)
 101a11c:	10000126 	beq	r2,zero,101a124 <exit+0x30>
 101a120:	103ee83a 	callr	r2
 101a124:	8009883a 	mov	r4,r16
 101a128:	10175d00 	call	10175d0 <_exit>

0101a12c <memcmp>:
 101a12c:	01c000c4 	movi	r7,3
 101a130:	3980192e 	bgeu	r7,r6,101a198 <memcmp+0x6c>
 101a134:	2144b03a 	or	r2,r4,r5
 101a138:	11c4703a 	and	r2,r2,r7
 101a13c:	10000f26 	beq	r2,zero,101a17c <memcmp+0x50>
 101a140:	20800003 	ldbu	r2,0(r4)
 101a144:	28c00003 	ldbu	r3,0(r5)
 101a148:	10c0151e 	bne	r2,r3,101a1a0 <memcmp+0x74>
 101a14c:	31bfff84 	addi	r6,r6,-2
 101a150:	01ffffc4 	movi	r7,-1
 101a154:	00000406 	br	101a168 <memcmp+0x3c>
 101a158:	20800003 	ldbu	r2,0(r4)
 101a15c:	28c00003 	ldbu	r3,0(r5)
 101a160:	31bfffc4 	addi	r6,r6,-1
 101a164:	10c00e1e 	bne	r2,r3,101a1a0 <memcmp+0x74>
 101a168:	21000044 	addi	r4,r4,1
 101a16c:	29400044 	addi	r5,r5,1
 101a170:	31fff91e 	bne	r6,r7,101a158 <__alt_data_end+0xff01a158>
 101a174:	0005883a 	mov	r2,zero
 101a178:	f800283a 	ret
 101a17c:	20c00017 	ldw	r3,0(r4)
 101a180:	28800017 	ldw	r2,0(r5)
 101a184:	18bfee1e 	bne	r3,r2,101a140 <__alt_data_end+0xff01a140>
 101a188:	31bfff04 	addi	r6,r6,-4
 101a18c:	21000104 	addi	r4,r4,4
 101a190:	29400104 	addi	r5,r5,4
 101a194:	39bff936 	bltu	r7,r6,101a17c <__alt_data_end+0xff01a17c>
 101a198:	303fe91e 	bne	r6,zero,101a140 <__alt_data_end+0xff01a140>
 101a19c:	003ff506 	br	101a174 <__alt_data_end+0xff01a174>
 101a1a0:	10c5c83a 	sub	r2,r2,r3
 101a1a4:	f800283a 	ret

0101a1a8 <__register_exitproc>:
 101a1a8:	defffa04 	addi	sp,sp,-24
 101a1ac:	dc000315 	stw	r16,12(sp)
 101a1b0:	040040b4 	movhi	r16,258
 101a1b4:	84334104 	addi	r16,r16,-13052
 101a1b8:	80c00017 	ldw	r3,0(r16)
 101a1bc:	dc400415 	stw	r17,16(sp)
 101a1c0:	dfc00515 	stw	ra,20(sp)
 101a1c4:	18805217 	ldw	r2,328(r3)
 101a1c8:	2023883a 	mov	r17,r4
 101a1cc:	10003726 	beq	r2,zero,101a2ac <__register_exitproc+0x104>
 101a1d0:	10c00117 	ldw	r3,4(r2)
 101a1d4:	010007c4 	movi	r4,31
 101a1d8:	20c00e16 	blt	r4,r3,101a214 <__register_exitproc+0x6c>
 101a1dc:	1a000044 	addi	r8,r3,1
 101a1e0:	8800221e 	bne	r17,zero,101a26c <__register_exitproc+0xc4>
 101a1e4:	18c00084 	addi	r3,r3,2
 101a1e8:	18c7883a 	add	r3,r3,r3
 101a1ec:	18c7883a 	add	r3,r3,r3
 101a1f0:	12000115 	stw	r8,4(r2)
 101a1f4:	10c7883a 	add	r3,r2,r3
 101a1f8:	19400015 	stw	r5,0(r3)
 101a1fc:	0005883a 	mov	r2,zero
 101a200:	dfc00517 	ldw	ra,20(sp)
 101a204:	dc400417 	ldw	r17,16(sp)
 101a208:	dc000317 	ldw	r16,12(sp)
 101a20c:	dec00604 	addi	sp,sp,24
 101a210:	f800283a 	ret
 101a214:	00800034 	movhi	r2,0
 101a218:	10800004 	addi	r2,r2,0
 101a21c:	10002626 	beq	r2,zero,101a2b8 <__register_exitproc+0x110>
 101a220:	01006404 	movi	r4,400
 101a224:	d9400015 	stw	r5,0(sp)
 101a228:	d9800115 	stw	r6,4(sp)
 101a22c:	d9c00215 	stw	r7,8(sp)
 101a230:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 101a234:	d9400017 	ldw	r5,0(sp)
 101a238:	d9800117 	ldw	r6,4(sp)
 101a23c:	d9c00217 	ldw	r7,8(sp)
 101a240:	10001d26 	beq	r2,zero,101a2b8 <__register_exitproc+0x110>
 101a244:	81000017 	ldw	r4,0(r16)
 101a248:	10000115 	stw	zero,4(r2)
 101a24c:	02000044 	movi	r8,1
 101a250:	22405217 	ldw	r9,328(r4)
 101a254:	0007883a 	mov	r3,zero
 101a258:	12400015 	stw	r9,0(r2)
 101a25c:	20805215 	stw	r2,328(r4)
 101a260:	10006215 	stw	zero,392(r2)
 101a264:	10006315 	stw	zero,396(r2)
 101a268:	883fde26 	beq	r17,zero,101a1e4 <__alt_data_end+0xff01a1e4>
 101a26c:	18c9883a 	add	r4,r3,r3
 101a270:	2109883a 	add	r4,r4,r4
 101a274:	1109883a 	add	r4,r2,r4
 101a278:	21802215 	stw	r6,136(r4)
 101a27c:	01800044 	movi	r6,1
 101a280:	12406217 	ldw	r9,392(r2)
 101a284:	30cc983a 	sll	r6,r6,r3
 101a288:	4992b03a 	or	r9,r9,r6
 101a28c:	12406215 	stw	r9,392(r2)
 101a290:	21c04215 	stw	r7,264(r4)
 101a294:	01000084 	movi	r4,2
 101a298:	893fd21e 	bne	r17,r4,101a1e4 <__alt_data_end+0xff01a1e4>
 101a29c:	11006317 	ldw	r4,396(r2)
 101a2a0:	218cb03a 	or	r6,r4,r6
 101a2a4:	11806315 	stw	r6,396(r2)
 101a2a8:	003fce06 	br	101a1e4 <__alt_data_end+0xff01a1e4>
 101a2ac:	18805304 	addi	r2,r3,332
 101a2b0:	18805215 	stw	r2,328(r3)
 101a2b4:	003fc606 	br	101a1d0 <__alt_data_end+0xff01a1d0>
 101a2b8:	00bfffc4 	movi	r2,-1
 101a2bc:	003fd006 	br	101a200 <__alt_data_end+0xff01a200>

0101a2c0 <__call_exitprocs>:
 101a2c0:	defff504 	addi	sp,sp,-44
 101a2c4:	df000915 	stw	fp,36(sp)
 101a2c8:	dd400615 	stw	r21,24(sp)
 101a2cc:	dc800315 	stw	r18,12(sp)
 101a2d0:	dfc00a15 	stw	ra,40(sp)
 101a2d4:	ddc00815 	stw	r23,32(sp)
 101a2d8:	dd800715 	stw	r22,28(sp)
 101a2dc:	dd000515 	stw	r20,20(sp)
 101a2e0:	dcc00415 	stw	r19,16(sp)
 101a2e4:	dc400215 	stw	r17,8(sp)
 101a2e8:	dc000115 	stw	r16,4(sp)
 101a2ec:	d9000015 	stw	r4,0(sp)
 101a2f0:	2839883a 	mov	fp,r5
 101a2f4:	04800044 	movi	r18,1
 101a2f8:	057fffc4 	movi	r21,-1
 101a2fc:	008040b4 	movhi	r2,258
 101a300:	10b34104 	addi	r2,r2,-13052
 101a304:	12000017 	ldw	r8,0(r2)
 101a308:	45005217 	ldw	r20,328(r8)
 101a30c:	44c05204 	addi	r19,r8,328
 101a310:	a0001c26 	beq	r20,zero,101a384 <__call_exitprocs+0xc4>
 101a314:	a0800117 	ldw	r2,4(r20)
 101a318:	15ffffc4 	addi	r23,r2,-1
 101a31c:	b8000d16 	blt	r23,zero,101a354 <__call_exitprocs+0x94>
 101a320:	14000044 	addi	r16,r2,1
 101a324:	8421883a 	add	r16,r16,r16
 101a328:	8421883a 	add	r16,r16,r16
 101a32c:	84402004 	addi	r17,r16,128
 101a330:	a463883a 	add	r17,r20,r17
 101a334:	a421883a 	add	r16,r20,r16
 101a338:	e0001e26 	beq	fp,zero,101a3b4 <__call_exitprocs+0xf4>
 101a33c:	80804017 	ldw	r2,256(r16)
 101a340:	e0801c26 	beq	fp,r2,101a3b4 <__call_exitprocs+0xf4>
 101a344:	bdffffc4 	addi	r23,r23,-1
 101a348:	843fff04 	addi	r16,r16,-4
 101a34c:	8c7fff04 	addi	r17,r17,-4
 101a350:	bd7ff91e 	bne	r23,r21,101a338 <__alt_data_end+0xff01a338>
 101a354:	00800034 	movhi	r2,0
 101a358:	10800004 	addi	r2,r2,0
 101a35c:	10000926 	beq	r2,zero,101a384 <__call_exitprocs+0xc4>
 101a360:	a0800117 	ldw	r2,4(r20)
 101a364:	1000301e 	bne	r2,zero,101a428 <__call_exitprocs+0x168>
 101a368:	a0800017 	ldw	r2,0(r20)
 101a36c:	10003226 	beq	r2,zero,101a438 <__call_exitprocs+0x178>
 101a370:	a009883a 	mov	r4,r20
 101a374:	98800015 	stw	r2,0(r19)
 101a378:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 101a37c:	9d000017 	ldw	r20,0(r19)
 101a380:	a03fe41e 	bne	r20,zero,101a314 <__alt_data_end+0xff01a314>
 101a384:	dfc00a17 	ldw	ra,40(sp)
 101a388:	df000917 	ldw	fp,36(sp)
 101a38c:	ddc00817 	ldw	r23,32(sp)
 101a390:	dd800717 	ldw	r22,28(sp)
 101a394:	dd400617 	ldw	r21,24(sp)
 101a398:	dd000517 	ldw	r20,20(sp)
 101a39c:	dcc00417 	ldw	r19,16(sp)
 101a3a0:	dc800317 	ldw	r18,12(sp)
 101a3a4:	dc400217 	ldw	r17,8(sp)
 101a3a8:	dc000117 	ldw	r16,4(sp)
 101a3ac:	dec00b04 	addi	sp,sp,44
 101a3b0:	f800283a 	ret
 101a3b4:	a0800117 	ldw	r2,4(r20)
 101a3b8:	80c00017 	ldw	r3,0(r16)
 101a3bc:	10bfffc4 	addi	r2,r2,-1
 101a3c0:	15c01426 	beq	r2,r23,101a414 <__call_exitprocs+0x154>
 101a3c4:	80000015 	stw	zero,0(r16)
 101a3c8:	183fde26 	beq	r3,zero,101a344 <__alt_data_end+0xff01a344>
 101a3cc:	95c8983a 	sll	r4,r18,r23
 101a3d0:	a0806217 	ldw	r2,392(r20)
 101a3d4:	a5800117 	ldw	r22,4(r20)
 101a3d8:	2084703a 	and	r2,r4,r2
 101a3dc:	10000b26 	beq	r2,zero,101a40c <__call_exitprocs+0x14c>
 101a3e0:	a0806317 	ldw	r2,396(r20)
 101a3e4:	2088703a 	and	r4,r4,r2
 101a3e8:	20000c1e 	bne	r4,zero,101a41c <__call_exitprocs+0x15c>
 101a3ec:	89400017 	ldw	r5,0(r17)
 101a3f0:	d9000017 	ldw	r4,0(sp)
 101a3f4:	183ee83a 	callr	r3
 101a3f8:	a0800117 	ldw	r2,4(r20)
 101a3fc:	15bfbf1e 	bne	r2,r22,101a2fc <__alt_data_end+0xff01a2fc>
 101a400:	98800017 	ldw	r2,0(r19)
 101a404:	153fcf26 	beq	r2,r20,101a344 <__alt_data_end+0xff01a344>
 101a408:	003fbc06 	br	101a2fc <__alt_data_end+0xff01a2fc>
 101a40c:	183ee83a 	callr	r3
 101a410:	003ff906 	br	101a3f8 <__alt_data_end+0xff01a3f8>
 101a414:	a5c00115 	stw	r23,4(r20)
 101a418:	003feb06 	br	101a3c8 <__alt_data_end+0xff01a3c8>
 101a41c:	89000017 	ldw	r4,0(r17)
 101a420:	183ee83a 	callr	r3
 101a424:	003ff406 	br	101a3f8 <__alt_data_end+0xff01a3f8>
 101a428:	a0800017 	ldw	r2,0(r20)
 101a42c:	a027883a 	mov	r19,r20
 101a430:	1029883a 	mov	r20,r2
 101a434:	003fb606 	br	101a310 <__alt_data_end+0xff01a310>
 101a438:	0005883a 	mov	r2,zero
 101a43c:	003ffb06 	br	101a42c <__alt_data_end+0xff01a42c>
 101a440:	010069e4 	muli	r4,zero,423
 101a444:	01006b48 	cmpgei	r4,zero,429
 101a448:	01006f58 	cmpnei	r4,zero,445
 101a44c:	010071f0 	cmpltui	r4,zero,455
 101a450:	01007410 	cmplti	r4,zero,464
