
FreeRTOS_OneCPU.elf:     file format elf32-littlenios2
FreeRTOS_OneCPU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010003a0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0002af14 memsz 0x0002af14 flags r-x
    LOAD off    0x0002c000 vaddr 0x0102b000 paddr 0x0102b000 align 2**12
         filesz 0x00000100 memsz 0x00000100 flags rw-
    LOAD off    0x0002cf34 vaddr 0x0102af34 paddr 0x0102cbb4 align 2**12
         filesz 0x00001c80 memsz 0x00001c80 flags rw-
    LOAD off    0x0002f834 vaddr 0x0102e834 paddr 0x0102e834 align 2**12
         filesz 0x00000000 memsz 0x008006b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000380  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00029038  010003a0  010003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b5c  010293d8  010293d8  0002a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .resource_table 00000100  0102b000  0102b000  0002c000  2**8
                  CONTENTS, ALLOC, LOAD, DATA
  5 .rwdata       00001c80  0102af34  0102cbb4  0002cf34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          00800736  0102e834  0102e834  0002f834  2**2
                  ALLOC, SMALL_DATA
  7 .sdram        00000000  0182eee4  0182eee4  0002ebb4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002ebb4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001790  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00041110  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f0be  00000000  00000000  00071478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001553f  00000000  00000000  00080536  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007920  00000000  00000000  00095a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000841a  00000000  00000000  0009d398  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d823  00000000  00000000  000a57b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000c2fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c40  00000000  00000000  000c3038  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000cd4e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  000cd4e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000cd4f3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000cd4f4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000cd4f5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000cd500  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000cd50b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  000cd516  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001c  00000000  00000000  000cd522  2**0
                  CONTENTS, READONLY
 27 .jdi          0000494a  00000000  00000000  000cd53e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     002854d1  00000000  00000000  000d1e88  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010003a0 l    d  .text	00000000 .text
010293d8 l    d  .rodata	00000000 .rodata
0102b000 l    d  .resource_table	00000000 .resource_table
0102af34 l    d  .rwdata	00000000 .rwdata
0102e834 l    d  .bss	00000000 .bss
0182eee4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_OneCPU_bsp//obj/HAL/src/crt0.o
010003e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/Source/portable/GCC/NiosII/port_asm.o
01000020 l       .exceptions	00000000 save_context
0100009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
01000100 l       .exceptions	00000000 hw_irq_test
010001c4 l       .exceptions	00000000 soft_exceptions
01000124 l       .exceptions	00000000 hw_irq_handler
0100013c l       .exceptions	00000000 restore_context
010001e0 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 event_groups.c
01000a7c l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
01000d7c l     F .text	0000002c prvReadGp
01000ee0 l     F .text	00000088 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0102e8d0 l     O .bss	00800000 ucHeap
0102cb44 l     O .rwdata	00000002 heapSTRUCT_SIZE
0102e834 l     O .bss	00000008 xStart
0102e83c l     O .bss	00000008 xEnd
0102cb48 l     O .rwdata	00000004 xFreeBytesRemaining
0102e844 l     O .bss	00000004 xHeapHasBeenInitialised.2596
01001290 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
010014c0 l     F .text	00000084 prvInitialiseNewQueue
01001544 l     F .text	00000060 prvInitialiseMutex
0100231c l     F .text	0000018c prvCopyDataToQueue
010026d0 l     F .text	00000058 prvIsQueueFull
01002544 l     F .text	000000f4 prvUnlockQueue
010024a8 l     F .text	0000009c prvCopyDataFromQueue
01002638 l     F .text	00000050 prvIsQueueEmpty
010022cc l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 stream_buffer.c
0100359c l     F .text	00000080 prvInitialiseNewStreamBuffer
01003528 l     F .text	00000074 prvBytesInBuffer
01002cd0 l     F .text	000000d4 prvWriteMessageToBuffer
01003320 l     F .text	000000f4 prvWriteBytesToBuffer
01003088 l     F .text	000000bc prvReadMessageFromBuffer
01003414 l     F .text	00000114 prvReadBytesFromBuffer
00000000 l    df *ABS*	00000000 tasks.c
0182e8d0 l     O .bss	00000064 pxReadyTasksLists
0182e934 l     O .bss	00000014 xDelayedTaskList1
0182e948 l     O .bss	00000014 xDelayedTaskList2
0102e84c l     O .bss	00000004 pxDelayedTaskList
0102e850 l     O .bss	00000004 pxOverflowDelayedTaskList
0182e95c l     O .bss	00000014 xPendingReadyList
0182e970 l     O .bss	00000014 xTasksWaitingTermination
0102e854 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0182e984 l     O .bss	00000014 xSuspendedTaskList
0102e858 l     O .bss	00000004 uxCurrentNumberOfTasks
0102e85c l     O .bss	00000004 xTickCount
0102e860 l     O .bss	00000004 uxTopReadyPriority
0102e864 l     O .bss	00000004 xSchedulerRunning
0102e868 l     O .bss	00000004 uxPendedTicks
0102e86c l     O .bss	00000004 xYieldPending
0102e870 l     O .bss	00000004 xNumOfOverflows
0102e874 l     O .bss	00000004 uxTaskNumber
0102e878 l     O .bss	00000004 xNextTaskUnblockTime
0102e87c l     O .bss	00000004 xIdleTaskHandle
0102e880 l     O .bss	00000004 uxSchedulerSuspended
01003704 l     F .text	000001e4 prvInitialiseNewTask
010038e8 l     F .text	000000fc prvAddNewTaskToReadyList
01004c38 l     F .text	000000b8 prvInitialiseTaskLists
01004e34 l     F .text	00000044 prvDeleteTCB
01004e78 l     F .text	00000054 prvResetNextTaskUnblockTime
01005a6c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0100406c l     F .text	0000006c prvTaskIsTaskSuspended
01004c1c l     F .text	0000001c prvIdleTask
01004cf0 l     F .text	00000080 prvCheckTasksWaitingTermination
01004d70 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 atomic_mutex.c
01005b54 l     F .text	00000030 __metal_mutex_init
01005b84 l     F .text	00000024 __metal_mutex_deinit
01005ba8 l     F .text	00000058 __metal_mutex_acquire
01005c00 l     F .text	00000030 __metal_mutex_release
01005c30 l     F .text	00000034 metal_mutex_init
01005c64 l     F .text	00000034 metal_mutex_deinit
01005c98 l     F .text	00000034 metal_mutex_acquire
01005ccc l     F .text	00000034 metal_mutex_release
00000000 l    df *ABS*	00000000 helper.c
01005dd0 l     F .text	00000030 system_metal_logger
01029410 l     O .rodata	0000000c __func__.4223
00000000 l    df *ABS*	00000000 metal-test.c
01005e98 l     F .text	00000064 metal_list_add_before
01005efc l     F .text	0000003c metal_list_add_tail
0102cb4c l     O .rwdata	00000008 test_cases
00000000 l    df *ABS*	00000000 device.c
01006194 l     F .text	00000040 metal_list_init
010061d4 l     F .text	00000064 metal_list_add_before
01006238 l     F .text	0000003c metal_list_add_tail
01006274 l     F .text	00000068 metal_list_del
010062dc l     F .text	0000003c __metal_cache_flush
01006318 l     F .text	0000003c __metal_cache_invalidate
01006354 l     F .text	0000003c metal_cache_flush
01006390 l     F .text	0000003c metal_cache_invalidate
010294e4 l     O .rodata	00000013 __func__.2868
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 alloc.c
01006b90 l     F .text	00000030 metal_allocate_memory
01006bc0 l     F .text	00000034 metal_free_memory
0102cb54 l     O .rwdata	00000004 test_count
01006bf4 l     F .text	000000b8 alloc_thread
01006cac l     F .text	00000048 alloc
01006cf4 l     F .text	00000034 metal_test_alloc
0102af60 l     O .rwdata	00000010 metal_test_alloc.2899
00000000 l    df *ABS*	00000000 atomic.c
0102cb58 l     O .rwdata	00000004 atomic_test_count
01006d28 l     F .text	0000008c atomic_thread
01006db4 l     F .text	000000d0 atomic
01006e84 l     F .text	00000034 metal_test_atomic
0102af70 l     O .rwdata	00000010 metal_test_atomic.2410
00000000 l    df *ABS*	00000000 condition.c
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 io.c
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 mutex.c
01007118 l     F .text	00000030 __metal_mutex_init
01007148 l     F .text	00000024 __metal_mutex_deinit
0100716c l     F .text	00000058 __metal_mutex_acquire
010071c4 l     F .text	00000030 __metal_mutex_release
010071f4 l     F .text	00000034 metal_mutex_init
01007228 l     F .text	00000034 metal_mutex_deinit
0100725c l     F .text	00000034 metal_mutex_acquire
01007290 l     F .text	00000034 metal_mutex_release
0102cb5c l     O .rwdata	00000004 mutex_test_count
010072c4 l     F .text	0000006c mutex_thread
01007330 l     F .text	00000064 mutex
01007394 l     F .text	00000034 metal_test_mutex
0102af80 l     O .rwdata	00000010 metal_test_mutex.2703
00000000 l    df *ABS*	00000000 irq_common.c
010073c8 l     F .text	00000064 metal_irq_handle
0100742c l     F .text	00000038 sys_irq_enable
01007464 l     F .text	00000038 sys_irq_disable
0182e998 l     O .bss	00000100 irqs
0100749c l     F .text	000000dc metal_nios2_irq_set_enable
01029588 l     O .rodata	0000001b __func__.2615
0102af90 l     O .rwdata	00000020 nios2_irq_cntr
010295a4 l     O .rodata	00000015 __func__.2625
00000000 l    df *ABS*	00000000 sys.c
00000000 l    df *ABS*	00000000 shmem.c
00000000 l    df *ABS*	00000000 sleep.c
010077f8 l     F .text	0000003c __metal_sleep_usec
01007834 l     F .text	00000030 metal_sleep_usec
01007864 l     F .text	000000c0 sleep
01007924 l     F .text	00000034 metal_test_sleep
0102afb0 l     O .rwdata	00000010 metal_test_sleep.2891
00000000 l    df *ABS*	00000000 threads.c
01007958 l     F .text	0000005c thread_wrapper
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 init.c
01007df8 l     F .text	00000040 metal_list_init
00000000 l    df *ABS*	00000000 io.c
01007f24 l     F .text	0000005c metal_io_virt
00000000 l    df *ABS*	00000000 irq.c
01008610 l     F .text	00000064 metal_list_add_before
01008674 l     F .text	0000003c metal_list_add_tail
0102cb60 l     O .rwdata	00000008 irq_cntrs
010086b0 l     F .text	000000f4 metal_irq_allocate
01008870 l     F .text	00000094 metal_irq_get_controller
01008904 l     F .text	00000060 _metal_irq_set_enable
00000000 l    df *ABS*	00000000 log.c
00000000 l    df *ABS*	00000000 shmem.c
01008b90 l     F .text	00000064 metal_list_add_before
01008bf4 l     F .text	0000003c metal_list_add_tail
01008c30 l     F .text	00000028 metal_io_region_size
01029678 l     O .rodata	0000001d __func__.2743
00000000 l    df *ABS*	00000000 softirq.c
01008dd8 l     F .text	00000064 metal_irq_handle
0102e888 l     O .bss	00000004 metal_softirq_avail
0102cb68 l     O .rwdata	00000004 metal_softirq_num
0182ea98 l     O .bss	00000200 metal_softirqs
0182ec98 l     O .bss	00000040 metal_softirq_pending
0182ecd8 l     O .bss	00000040 metal_softirq_enabled
01008e3c l     F .text	000000b4 metal_softirq_set_enable
0102afc0 l     O .rwdata	00000020 metal_softirq_cntr
00000000 l    df *ABS*	00000000 rpmsg_retarget.c
010091a4 l     F .text	00000030 __metal_mutex_init
010091d4 l     F .text	00000024 __metal_mutex_deinit
010091f8 l     F .text	00000058 __metal_mutex_acquire
01009250 l     F .text	00000030 __metal_mutex_release
01009280 l     F .text	00000034 metal_mutex_init
010092b4 l     F .text	00000034 metal_mutex_deinit
010092e8 l     F .text	00000034 metal_mutex_acquire
0100931c l     F .text	00000034 metal_mutex_release
01009350 l     F .text	00000030 metal_spinlock_init
01009380 l     F .text	000000ac metal_spinlock_acquire
0100942c l     F .text	00000030 metal_spinlock_release
0100945c l     F .text	0000007c rpmsg_send
010094d8 l     F .text	0000004c is_rpmsg_ept_ready
0102e88c l     O .bss	00000004 rpmsg_default_rpc
01009524 l     F .text	000000f0 rpmsg_rpc_ept_cb
01009614 l     F .text	00000074 rpmsg_service_unbind
00000000 l    df *ABS*	00000000 elf_loader.c
01009edc l     F .text	00000030 metal_allocate_memory
01009f0c l     F .text	00000034 metal_free_memory
01009f40 l     F .text	0000004c elf_is_64
01009f8c l     F .text	00000050 elf_ehdr_size
01009fdc l     F .text	0000005c elf_phoff
0100a038 l     F .text	00000060 elf_phentsize
0100a098 l     F .text	00000060 elf_phnum
0100a0f8 l     F .text	0000005c elf_shoff
0100a154 l     F .text	00000060 elf_shentsize
0100a1b4 l     F .text	00000060 elf_shnum
0100a214 l     F .text	00000060 elf_shstrndx
0100a274 l     F .text	00000058 elf_phtable_ptr
0100a2cc l     F .text	00000058 elf_shtable_ptr
0100a324 l     F .text	00000058 elf_shstrtab_ptr
0100a37c l     F .text	00000058 elf_load_state
0100a3d4 l     F .text	000001a0 elf_parse_segment
0100a574 l     F .text	000000fc elf_get_segment_from_index
0100a670 l     F .text	00000180 elf_get_section_from_name
0100a7f0 l     F .text	00000104 elf_get_section_from_index
0100a8f4 l     F .text	00000238 elf_parse_section
0100ab2c l     F .text	000000d0 elf_next_load_segment
0100abfc l     F .text	00000040 elf_info_size
0102988c l     O .rodata	00000010 __func__.3420
0102989c l     O .rodata	00000009 __func__.3451
010298a8 l     O .rodata	00000015 __func__.3477
00000000 l    df *ABS*	00000000 remoteproc.c
0100baf4 l     F .text	00000030 metal_allocate_memory
0100bb24 l     F .text	00000034 metal_free_memory
0100bb58 l     F .text	00000074 metal_bitmap_set_bit
0100bbcc l     F .text	0000005c metal_bitmap_is_bit_set
0100bc28 l     F .text	00000040 metal_bitmap_is_bit_clear
0100bc68 l     F .text	0000006c metal_bitmap_next_clear_bit
0100bcd4 l     F .text	00000040 metal_list_init
0100bd14 l     F .text	00000064 metal_list_add_before
0100bd78 l     F .text	0000003c metal_list_add_tail
0100bdb4 l     F .text	00000068 metal_list_del
0100be1c l     F .text	0000005c metal_io_virt
0100be78 l     F .text	00000054 metal_io_virt_to_offset
0100becc l     F .text	000000d0 metal_io_phys
0100bf9c l     F .text	000000d8 metal_io_phys_to_offset
0100c074 l     F .text	00000044 metal_io_phys_to_virt
0100c0b8 l     F .text	00000030 __metal_mutex_init
0100c0e8 l     F .text	00000058 __metal_mutex_acquire
0100c140 l     F .text	00000030 __metal_mutex_release
0100c170 l     F .text	00000034 metal_mutex_init
0100c1a4 l     F .text	00000034 metal_mutex_acquire
0100c1d8 l     F .text	00000034 metal_mutex_release
0100c20c l     F .text	00000024 RPROC_ERR_PTR
0100c230 l     F .text	00000088 vring_size
0100c2b8 l     F .text	0000005c remoteproc_check_fw_format
0100c314 l     F .text	00000178 remoteproc_get_mem
0100c48c l     F .text	00000048 remoteproc_datopa
0100c4d4 l     F .text	00000048 remoteproc_patoda
0100c51c l     F .text	0000015c remoteproc_get_rsc_table
0100c678 l     F .text	00000054 remoteproc_parse_rsc_table
01029e3c l     O .rodata	00000010 __func__.3717
01029e4c l     O .rodata	00000018 __func__.3753
0100e74c l     F .text	0000004c remoteproc_virtio_notify
01029e64 l     O .rodata	00000019 __func__.3786
01029e80 l     O .rodata	00000019 __func__.3807
00000000 l    df *ABS*	00000000 remoteproc_virtio.c
0100ec3c l     F .text	0000005c metal_io_virt
0100ec98 l     F .text	00000054 metal_io_virt_to_offset
0100ecec l     F .text	00000198 metal_io_read
01029f40 l     O .rodata	0000000e __func__.2652
0100ee84 l     F .text	0000017c metal_io_write
01029f50 l     O .rodata	0000000f __func__.2661
0100f000 l     F .text	00000030 metal_allocate_memory
0100f030 l     F .text	00000034 metal_free_memory
0100f064 l     F .text	00000060 virtqueue_allocate
0100f0c4 l     F .text	000000bc rproc_virtio_virtqueue_notify
01029f20 l     O .rodata	0000001e __func__.3350
0100f180 l     F .text	00000084 rproc_virtio_get_status
0100f204 l     F .text	000000d4 rproc_virtio_set_status
0100f2d8 l     F .text	00000084 rproc_virtio_get_dfeatures
0100f35c l     F .text	00000098 rproc_virtio_get_features
0100f3f4 l     F .text	000000cc rproc_virtio_set_features
0100f4c0 l     F .text	00000054 rproc_virtio_negotiate_features
0100f514 l     F .text	00000030 rproc_virtio_read_config
0100f544 l     F .text	00000030 rproc_virtio_write_config
0100f574 l     F .text	00000044 rproc_virtio_reset_device
01029efc l     O .rodata	00000024 remoteproc_virtio_dispatch_funcs
00000000 l    df *ABS*	00000000 rsc_table_parser.c
0100faa4 l     F .text	00000054 metal_io_virt_to_offset
01029f60 l     O .rodata	00000010 rsc_handler_table
010102a0 l     F .text	00000028 handle_dummy_rsc
01029fa4 l     O .rodata	00000009 __func__.3038
00000000 l    df *ABS*	00000000 rpmsg.c
01010444 l     F .text	00000058 __metal_mutex_acquire
0101049c l     F .text	00000030 __metal_mutex_release
010104cc l     F .text	00000034 metal_mutex_acquire
01010500 l     F .text	00000034 metal_mutex_release
01010534 l     F .text	00000064 metal_list_add_before
01010598 l     F .text	0000003c metal_list_add_tail
010105d4 l     F .text	00000068 metal_list_del
0101063c l     F .text	00000074 metal_bitmap_set_bit
010106b0 l     F .text	0000005c metal_bitmap_is_bit_set
0101070c l     F .text	00000078 metal_bitmap_clear_bit
01010784 l     F .text	00000040 metal_bitmap_is_bit_clear
010107c4 l     F .text	0000006c metal_bitmap_next_clear_bit
01010830 l     F .text	00000094 rpmsg_init_ept
010108c4 l     F .text	00000074 rpmsg_get_address
01010938 l     F .text	0000004c rpmsg_release_address
01010984 l     F .text	00000050 rpmsg_is_address_set
010109d4 l     F .text	00000054 rpmsg_set_address
01010cb8 l     F .text	00000084 rpmsg_unregister_endpoint
00000000 l    df *ABS*	00000000 rpmsg_virtio.c
01010fc8 l     F .text	0000003c __metal_sleep_usec
01011004 l     F .text	00000030 metal_sleep_usec
01011034 l     F .text	00000040 metal_list_init
01011074 l     F .text	00000034 metal_list_is_empty
010110a8 l     F .text	00000054 metal_io_virt_to_offset
010110fc l     F .text	00000030 __metal_mutex_init
0101112c l     F .text	00000024 __metal_mutex_deinit
01011150 l     F .text	00000058 __metal_mutex_acquire
010111a8 l     F .text	00000030 __metal_mutex_release
010111d8 l     F .text	00000034 metal_mutex_init
0101120c l     F .text	00000034 metal_mutex_deinit
01011240 l     F .text	00000034 metal_mutex_acquire
01011274 l     F .text	00000034 metal_mutex_release
010112a8 l     F .text	00000094 rpmsg_init_ept
0101133c l     F .text	0000002c rpmsg_virtio_get_role
01011368 l     F .text	0000005c rpmsg_virtio_set_status
010113c4 l     F .text	00000048 rpmsg_virtio_get_status
0101140c l     F .text	00000048 rpmsg_virtio_get_features
01011454 l     F .text	0000005c rpmsg_virtio_create_virtqueues
010114b0 l     F .text	00000040 rpmsg_get_ept_from_addr
010115c8 l     F .text	000000b0 rpmsg_virtio_return_buffer
01011678 l     F .text	000000b8 rpmsg_virtio_enqueue_buffer
01011730 l     F .text	000000bc rpmsg_virtio_get_tx_buffer
010117ec l     F .text	00000090 rpmsg_virtio_get_rx_buffer
0101187c l     F .text	0000006c rpmsg_virtio_wait_remote_ready
010118e8 l     F .text	0000007c _rpmsg_virtio_get_buffer_size
01011964 l     F .text	0000021c rpmsg_virtio_send_offchannel_raw
01011b80 l     F .text	00000024 rpmsg_virtio_tx_callback
01011ba4 l     F .text	00000238 rpmsg_virtio_rx_callback
01011ddc l     F .text	000001dc rpmsg_virtio_ns_callback
00000000 l    df *ABS*	00000000 virtio.c
01012490 l     F .text	00000088 vring_size
01012518 l     F .text	00000054 metal_io_virt_to_offset
0102a018 l     O .rodata	00000048 virtio_ident_table
0102a098 l     O .rodata	00000028 virtio_common_feature_desc
010125dc l     F .text	0000012c virtio_feature_name
00000000 l    df *ABS*	00000000 virtqueue.c
010128cc l     F .text	000000a0 vring_init
0101296c l     F .text	00000060 vring_need_event
010129cc l     F .text	00000034 metal_free_memory
01012a00 l     F .text	0000005c metal_io_virt
01012a5c l     F .text	00000054 metal_io_virt_to_offset
01012ab0 l     F .text	000000d0 metal_io_phys
01012b80 l     F .text	000000d8 metal_io_phys_to_offset
01012c58 l     F .text	00000044 metal_io_phys_to_virt
01012c9c l     F .text	00000044 metal_io_virt_to_phys
01012ce0 l     F .text	00000044 virtqueue_phys_to_virt
01012d24 l     F .text	00000044 virtqueue_virt_to_phys
01013924 l     F .text	000000dc vq_ring_init
010136c4 l     F .text	0000014c vq_ring_add_buffer
01013a00 l     F .text	000000a0 vq_ring_update_avail
01013810 l     F .text	00000114 vq_ring_free_chain
01013aa0 l     F .text	000001a4 vq_ring_enable_interrupt
01013c90 l     F .text	000001b8 vq_ring_must_notify
01013e48 l     F .text	00000048 vq_ring_notify
01013e90 l     F .text	00000048 virtqueue_nused
01013ed8 l     F .text	00000048 virtqueue_navail
00000000 l    df *ABS*	00000000 platform_info.c
01013f20 l     F .text	0000005c metal_io_virt
01013f7c l     F .text	000000d0 metal_io_phys
0101404c l     F .text	000000d8 metal_io_phys_to_offset
01014124 l     F .text	00000044 metal_io_phys_to_virt
01014168 l     F .text	00000030 metal_allocate_memory
01014198 l     F .text	00000034 metal_free_memory
010141cc l     F .text	00000024 rpmsg_virtio_get_rpmsg_device
0102e890 l     O .bss	00000004 ipi_phys_addr
0102b04c l     O .rwdata	00000018 rproc_priv
0182ed18 l     O .bss	00000038 rproc_inst
0182ed50 l     O .bss	0000000c shpool
010141f0 l     F .text	0000013c platform_create_proc
00000000 l    df *ABS*	00000000 rpmsg-echo.c
0101463c l     F .text	0000007c rpmsg_send
0182ed5c l     O .bss	00000040 lept
0102e894 l     O .bss	00000004 shutdown_req
010146b8 l     F .text	0000008c rpmsg_endpoint_cb
01014744 l     F .text	00000040 rpmsg_service_unbind
00000000 l    df *ABS*	00000000 rsc_table.c
00000000 l    df *ABS*	00000000 zynqmp_r5_a53_rproc.c
01014964 l     F .text	00000064 metal_list_add_before
010149c8 l     F .text	0000003c metal_list_add_tail
01014a04 l     F .text	0000003c metal_irq_unregister
01014a40 l     F .text	0000005c metal_io_virt
01014a9c l     F .text	000000d0 metal_io_phys
01014b6c l     F .text	000000d8 metal_io_phys_to_offset
01014c44 l     F .text	00000044 metal_io_phys_to_virt
01014c88 l     F .text	00000198 metal_io_read
0102a484 l     O .rodata	0000000e __func__.3432
01014e20 l     F .text	0000017c metal_io_write
0102a494 l     O .rodata	0000000f __func__.3441
01014f9c l     F .text	00000050 metal_device_io_region
01014fec l     F .text	00000030 metal_allocate_memory
0101501c l     F .text	00000034 metal_free_memory
01015050 l     F .text	000000a0 remoteproc_init_mem
010150f0 l     F .text	00000060 remoteproc_add_mem
01015150 l     F .text	000000f4 zynqmp_r5_a53_proc_irq_handler
01015244 l     F .text	00000190 zynqmp_r5_a53_proc_init
010153d4 l     F .text	000000bc zynqmp_r5_a53_proc_remove
01015490 l     F .text	00000188 zynqmp_r5_a53_proc_mmap
01015618 l     F .text	00000088 zynqmp_r5_a53_proc_notify
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0102b088 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102ac2e l     O .rodata	00000010 zeroes.4389
0102ac3e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102ac4e l     O .rodata	00000010 zeroes.4404
0101ab14 l     F .text	000000bc __sbprintf
0102ac5e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
0101ad3c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0101c86c l     F .text	00000008 __fp_unlock
0101c880 l     F .text	0000019c __sinit.part.1
0101ca1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0102b4cc l     O .rwdata	00000020 lc_ctype_charset
0102b4ac l     O .rwdata	00000020 lc_message_charset
0102b4ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0102ac8c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0102adc0 l     O .rodata	00000010 blanks.4332
0102adb0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
010211dc l     F .text	000000fc __sprint_r.part.0
0102ade0 l     O .rodata	00000010 blanks.4348
0102add0 l     O .rodata	00000010 zeroes.4349
01022768 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
01026424 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
010265f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01026650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01026b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01026c4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01026db8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01026ea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01027078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0102cba0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
010272f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01027428 l     F .text	00000034 alt_dev_reg
0102745c l     F .text	0000003c alt_get_errno
01027498 l     F .text	00000068 alt_avalon_mutex_reg
0102bad4 l     O .rwdata	00001060 jtag_uart_0
0102cb34 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010277c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
010279d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
01028008 l     F .text	0000003c alt_get_errno
01028044 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010282d4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0102864c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0102894c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
01028a8c l     F .text	0000003c alt_get_errno
01028ac8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0102e8c4 g     O .bss	00000004 alt_instruction_exception_handler
0101f1ec g     F .text	00000074 _mprec_log10
01007578 g     F .text	00000068 metal_nios2_irq_isr
0100b924 g     F .text	00000080 elf_get_entry
0101f2d8 g     F .text	0000008c __any_on
01006568 g     F .text	000000a4 metal_bus_find
01022d04 g     F .text	00000054 _isatty_r
0102ac98 g     O .rodata	00000028 __mprec_tinytens
0101432c g     F .text	00000084 platform_init
01026fb4 g     F .text	0000007c alt_main
01015ad0 g     F .text	000000c0 _puts_r
01012f30 g     F .text	00000130 virtqueue_get_buffer
0182ede4 g     O .bss	00000100 alt_irq
0182edc4 g     O .bss	00000020 _metal
01022d58 g     F .text	00000060 _lseek_r
0100012c g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0100486c g     F .text	00000064 vTaskPlaceOnUnorderedEventList
01001250 g     F .text	00000020 xPortGetFreeHeapSize
010007d4 g     F .text	0000003c xEventGroupGetBitsFromISR
0102cbb4 g       *ABS*	00000000 __flash_rwdata_start
01024f50 g     F .text	00000088 .hidden __eqdf2
0182eee4 g       *ABS*	00000000 __alt_heap_start
01003d28 g     F .text	00000058 uxTaskPriorityGet
01013330 g     F .text	00000034 virtqueue_enable_cb
0101fc34 g     F .text	0000005c _kill_r
01005d68 g     F .text	00000034 atomic_mutex_acquire
01015a94 g     F .text	0000003c printf
01022f70 g     F .text	0000009c _wcrtomb_r
01010ad8 g     F .text	000000a0 rpmsg_send_ns_message
0101f9fc g     F .text	00000084 _signal_r
0101fd6c g     F .text	0000005c __sseek
0101cbbc g     F .text	00000010 __sinit
01022e18 g     F .text	00000140 __swbuf_r
0101d684 g     F .text	0000007c _setlocale_r
0101ca24 g     F .text	00000068 __sfmoreglue
01008b68 g     F .text	00000028 metal_get_log_level
01002da4 g     F .text	00000158 xStreamBufferReceive
01027054 g     F .text	00000024 __malloc_unlock
01016498 g     F .text	0000001c strerror
01008c58 g     F .text	000000b8 metal_shmem_register_generic
01000440 g     F .text	00000184 xEventGroupSync
0101e20c g     F .text	0000015c memmove
010077b8 g     F .text	00000040 metal_shmem_open
01005270 g     F .text	00000054 vTaskEnterCritical
0101cba4 g     F .text	00000018 _cleanup
01015c7c g     F .text	000000e4 snprintf
01001938 g     F .text	000000e8 xQueueGenericSendFromISR
01004554 g     F .text	00000040 pcTaskGetName
0102817c g     F .text	00000040 altera_avalon_mutex_trylock
0101e368 g     F .text	000000a8 _Balloc
01002990 g     F .text	00000088 xStreamBufferSpacesAvailable
01008b34 g     F .text	00000034 metal_set_log_level
01024fd8 g     F .text	000000dc .hidden __gtdf2
01028e84 g     F .text	00000024 altera_nios2_gen2_irq_init
01002888 g     F .text	0000009c xStreamBufferReset
0102e884 g     O .bss	00000004 atomic_mutex
01000000 g     F .entry	0000001c __reset
01001600 g     F .text	00000090 xQueueGiveMutexRecursive
0102e848 g     O .bss	00000004 pxCurrentTCB
01028210 g     F .text	00000074 altera_avalon_mutex_is_mine
01006f9c g     F .text	00000034 metal_sys_finish
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100c760 g     F .text	0000009c remoteproc_init
01022ca8 g     F .text	0000005c _fstat_r
01007f80 g     F .text	00000168 metal_io_init
0102e8b0 g     O .bss	00000004 errno
01007670 g     F .text	00000038 sys_irq_restore_enable
0101fce8 g     F .text	00000008 __seofread
0101ffa0 g     F .text	0000123c ___svfiprintf_internal_r
01007788 g     F .text	00000030 metal_machine_io_mem_map
01002be0 g     F .text	000000f0 xStreamBufferSendFromISR
0100681c g     F .text	000000a4 metal_generic_dev_open
0102e8bc g     O .bss	00000004 alt_argv
01034b44 g       *ABS*	00000000 _gp
010272c4 g     F .text	00000030 usleep
0102aff8 g     O .rwdata	00000054 ipi_device
01008d10 g     F .text	000000c8 metal_shmem_open_generic
010069a8 g     F .text	00000088 metal_generic_dev_dma_unmap
01003dcc g     F .text	000001a4 vTaskPrioritySet
0102673c g     F .text	00000020 getpid
01004ad8 g     F .text	0000003c vTaskInternalSetTimeOutState
010097d0 g     F .text	000000b4 rpmsg_rpc_release
010066f8 g     F .text	00000090 metal_device_close
010005c4 g     F .text	000001a8 xEventGroupWaitBits
0100cedc g     F .text	00000d80 remoteproc_load
010070bc g     F .text	00000028 metal_irq_save_disable
0100baa8 g     F .text	0000004c elf_get_load_state
0102b954 g     O .rwdata	00000180 alt_fd_list
0101274c g     F .text	00000180 virtio_create_virtqueues
01000e88 g     F .text	00000038 xPortStartScheduler
01004314 g     F .text	00000048 vTaskEndScheduler
010287ec g     F .text	00000090 alt_find_dev
010157f4 g     F .text	00000148 memcpy
0100481c g     F .text	00000050 vTaskPlaceOnEventList
010049c4 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
01007764  w    F .text	00000024 metal_generic_default_poll
0101c874 g     F .text	0000000c _cleanup_r
0102623c g     F .text	000000dc .hidden __floatsidf
01028a10 g     F .text	0000007c alt_io_redirect
010250b4 g     F .text	000000f4 .hidden __ltdf2
01002148 g     F .text	0000007c xQueuePeekFromISR
010293d8 g       *ABS*	00000000 __DTOR_END__
01006ee0 g     F .text	00000084 metal_generic_dev_sys_open
01015b90 g     F .text	00000014 puts
010288b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01001184 g     F .text	000000cc vPortFree
01015e3c g     F .text	0000065c _strerror_r
0101f8c8 g     F .text	00000074 __fpclassifyd
0101f148 g     F .text	000000a4 __ratio
0100f978 g     F .text	000000cc rproc_virtio_notified
0102274c g     F .text	0000001c __vfiprintf_internal
01009a1c g     F .text	00000038 rpmsg_set_default_rpc
01001ca4 g     F .text	00000210 xQueueSemaphoreTake
01027bc8 g     F .text	0000021c altera_avalon_jtag_uart_read
01015a64 g     F .text	00000030 _printf_r
01023d00 g     F .text	00000064 .hidden __udivsi3
01026ba8 g     F .text	000000a4 isatty
0101fa80 g     F .text	000000bc _raise_r
0101492c g     F .text	00000038 get_resource_table
010156a0 g     F .text	00000068 __assert_func
0102ace8 g     O .rodata	000000c8 __mprec_tens
01004dd4 g     F .text	00000060 uxTaskGetStackHighWaterMark
010079b4 g     F .text	00000100 metal_run
0101d700 g     F .text	0000000c __locale_charset
01000b80 g     F .text	0000008c vListInsertEnd
01029054 g     F .text	00000090 alt_icache_flush
0102e8ac g     O .bss	00000004 __malloc_top_pad
0101fc90 g     F .text	00000004 _getpid_r
0100ccac g     F .text	00000068 remoteproc_get_io_with_va
010003ec g     F .text	00000054 xEventGroupCreate
0102cb74 g     O .rwdata	00000004 __mb_cur_max
0101d730 g     F .text	0000000c _localeconv_r
0101e774 g     F .text	0000003c __i2b
0101d040 g     F .text	000004bc __sfvwrite_r
0101fb3c g     F .text	000000a8 __sigtramp_r
01012708 g     F .text	00000044 virtio_describe
0101f93c g     F .text	00000054 _sbrk_r
01008ad8 g     F .text	00000034 metal_set_log_handler
01000a04 g     F .text	0000003c vEventGroupSetBitsCallback
010041a4 g     F .text	000000e0 xTaskResumeFromISR
01007e38 g     F .text	000000ac metal_init
0100fa44 g     F .text	00000060 rproc_virtio_wait_remote_ready
01022db8 g     F .text	00000060 _read_r
01000b54 g     F .text	0000002c vListInitialiseItem
01026530 g     F .text	00000078 alt_dcache_flush
0102cb94 g     O .rwdata	00000004 alt_max_fd
01000f68 g     F .text	00000048 vPortSysTickHandler
0102299c g     F .text	000000f0 _fclose_r
0100cbb0 g     F .text	00000064 remoteproc_get_io_with_pa
01001afc g     F .text	000001a8 xQueueReceive
0101c83c g     F .text	00000030 fflush
0102e8a8 g     O .bss	00000004 __malloc_max_sbrked_mem
010080e8 g     F .text	000001b4 metal_io_block_read
01003d80 g     F .text	0000004c uxTaskPriorityGetFromISR
010269fc g     F .text	00000170 alt_irq_register
01013144 g     F .text	00000114 virtqueue_get_available_buffer
01023dbc g     F .text	000008ac .hidden __adddf3
0100dc5c g     F .text	00000a50 remoteproc_load_noblock
0101eef0 g     F .text	0000010c __b2d
010236d0 g     F .text	00000538 .hidden __umoddi3
01026ee0 g     F .text	000000d4 lseek
01028284 g     F .text	00000050 altera_avalon_mutex_first_lock
0100e798 g     F .text	00000390 remoteproc_create_virtio
0102cb6c g     O .rwdata	00000004 _global_impure_ptr
01000810 g     F .text	00000180 xEventGroupSetBits
0101f364 g     F .text	00000564 _realloc_r
0182eee4 g       *ABS*	00000000 __bss_end
0102690c g     F .text	000000f0 alt_iic_isr_register
01028d7c g     F .text	00000108 alt_tick
01023158 g     F .text	00000578 .hidden __udivdi3
01022c04 g     F .text	00000024 _fputwc_r
0102acc0 g     O .rodata	00000028 __mprec_bigtens
0101e558 g     F .text	00000104 __s2b
0101ad24 g     F .text	00000018 abort
01009a54 g     F .text	00000130 _open
01026318 g     F .text	000000a8 .hidden __floatunsidf
01006eb8 g     F .text	00000028 metal_condition_wait
0101ec30 g     F .text	00000060 __mcmp
01000fb0 g     F .text	000001d4 pvPortMalloc
01008a30 g     F .text	0000003c metal_irq_enable
0101cbdc g     F .text	00000018 __fp_lock_all
010268c0 g     F .text	0000004c alt_ic_irq_enabled
010076a8 g     F .text	00000040 sys_irq_save_disable
01002290 g     F .text	0000003c vQueueDelete
010063cc g     F .text	000000f8 metal_bus_register
01000ec0 g     F .text	00000020 vPortEndScheduler
01000aec g     F .text	00000068 vListInitialise
01003144 g     F .text	00000058 xStreamBufferIsEmpty
01028ce0 g     F .text	0000009c alt_alarm_stop
0102e8b4 g     O .bss	00000004 alt_irq_active
01009884 g     F .text	00000198 rpmsg_rpc_send
01000258 g     F .exceptions	000000d4 alt_irq_handler
0102b92c g     O .rwdata	00000028 alt_dev_null
01010b78 g     F .text	00000140 rpmsg_get_endpoint
010044e0 g     F .text	00000028 xTaskGetTickCount
01001784 g     F .text	000001b4 xQueueGenericSend
010280c0 g     F .text	00000054 altera_avalon_mutex_open
01002a58 g     F .text	00000188 xStreamBufferSend
0100329c g     F .text	00000084 xStreamBufferReceiveCompletedFromISR
010265a8 g     F .text	00000048 alt_dcache_flush_all
0101e65c g     F .text	00000068 __hi0bits
010261bc g     F .text	00000080 .hidden __fixdfsi
01002efc g     F .text	000000a8 xStreamBufferNextMessageLengthBytes
01005034 g     F .text	000000fc xTaskPriorityDisinherit
01008f80 g     F .text	00000030 metal_softirq_init
0102cbb4 g       *ABS*	00000000 __ram_rwdata_end
010114f0  w    F .text	0000007c rpmsg_virtio_shm_pool_get_buffer
0102cb8c g     O .rwdata	00000008 alt_dev_list
01027330 g     F .text	000000f8 write
010048d0 g     F .text	000000f4 xTaskRemoveFromEventList
0102cba4 g     O .rwdata	00000008 alt_mutex_list
0102af34 g       *ABS*	00000000 __ram_rodata_end
0102668c g     F .text	000000b0 fstat
0100076c g     F .text	00000068 xEventGroupClearBits
01026c88 g     F .text	00000130 kill
010250b4 g     F .text	000000f4 .hidden __ledf2
010070e4 g     F .text	00000034 metal_irq_restore_enable
01001eb4 g     F .text	000001b0 xQueuePeek
0101e9a8 g     F .text	00000140 __pow5mult
0102e8a0 g     O .bss	00000004 __nlocale_changed
010212f0 g     F .text	0000145c ___vfiprintf_internal_r
01023d64 g     F .text	00000058 .hidden __umodsi3
0100cd14 g     F .text	000001c8 remoteproc_mmap
01008ef0 g     F .text	00000090 metal_softirq_set
0100c7fc g     F .text	00000084 remoteproc_remove
0102b000 g     O .resource_table	00000100 resources
01008a6c g     F .text	0000003c metal_irq_disable
0182eee4 g       *ABS*	00000000 end
01002fa4 g     F .text	000000e4 xStreamBufferReceiveFromISR
010039e4 g     F .text	000000e8 vTaskDelete
01027704 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100032c g     F .exceptions	00000074 alt_instruction_exception_entry
01005368 g     F .text	00000038 pvTaskIncrementMutexHeldCount
010293c8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0102834c g     F .text	0000007c alt_avalon_timer_sc_init
010263c0 g     F .text	00000064 .hidden __clzsi2
01015ba4 g     F .text	000000d8 _snprintf_r
01027de4 g     F .text	00000224 altera_avalon_jtag_uart_write
01007da8 g     F .text	00000050 metal_get_timestamp
0101cbcc g     F .text	00000004 __sfp_lock_acquire
0101e128 g     F .text	000000e4 memchr
01018900 g     F .text	000021f8 ___vfprintf_internal_r
01004b14 g     F .text	000000e0 xTaskCheckForTimeOut
0101cd30 g     F .text	00000310 _free_r
01004ef4 g     F .text	00000140 xTaskPriorityInherit
0101d70c g     F .text	00000010 __locale_mb_cur_max
01029248 g     F .text	00000180 __call_exitprocs
01010f18 g     F .text	000000b0 rpmsg_destroy_ept
01002824 g     F .text	00000064 vStreamBufferDelete
0102e89c g     O .bss	00000004 __mlocale_changed
010053a0 g     F .text	000000b0 ulTaskNotifyTake
0102cb78 g     O .rwdata	00000004 __malloc_sbrk_base
010003a0 g     F .text	0000004c _start
0102e8c8 g     O .bss	00000004 _alt_tick_rate
0100435c g     F .text	0000002c vTaskSuspendAll
01003c18 g     F .text	00000110 eTaskGetState
0100319c g     F .text	0000007c xStreamBufferIsFull
01004508 g     F .text	0000002c xTaskGetTickCountFromISR
010188e0 g     F .text	00000008 _user_strerror
0100660c g     F .text	000000ec metal_device_open
0101eae8 g     F .text	00000148 __lshift
01013060 g     F .text	00000040 virtqueue_get_buffer_length
0102e8cc g     O .bss	00000004 _alt_nticks
0101fbf8 g     F .text	00000018 signal
010270b4 g     F .text	000000fc read
01027538 g     F .text	00000068 alt_sys_init
01007ab4 g     F .text	00000214 metal_run_noblock
0101fdd0 g     F .text	000001d0 __ssprint_r
01000ce4 g     F .text	00000098 uxListRemove
01029130 g     F .text	00000118 __register_exitproc
0101654c g     F .text	000000d0 strncmp
010281bc g     F .text	00000054 altera_avalon_mutex_unlock
01013364 g     F .text	0000013c virtqueue_disable_cb
01002778 g     F .text	000000ac xStreamBufferGenericCreate
0101e7b0 g     F .text	000001f8 __multiply
01027a70 g     F .text	00000068 altera_avalon_jtag_uart_close
0102af34 g       *ABS*	00000000 __ram_rwdata_start
010293d8 g       *ABS*	00000000 __ram_rodata_start
0101661c g     F .text	000000ec strncpy
0182ed9c g     O .bss	00000028 __malloc_current_mallinfo
010059f4 g     F .text	00000078 xTaskNotifyStateClear
010040d8 g     F .text	000000cc vTaskResume
0101effc g     F .text	0000014c __d2b
01005e6c g     F .text	0000002c cleanup_system
01004744 g     F .text	000000d8 vTaskSwitchContext
0100cc14 g     F .text	00000098 remoteproc_get_io_with_da
01009688 g     F .text	00000148 rpmsg_rpc_init
010275a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01028fb0 g     F .text	000000a4 alt_get_fd
010284f4 g     F .text	00000158 alt_busy_sleep
01022884 g     F .text	00000054 _close_r
010130a0 g     F .text	000000a4 virtqueue_free
0101156c g     F .text	0000005c rpmsg_virtio_init_shm_pool
01005450 g     F .text	000000f4 xTaskNotifyWait
01012028 g     F .text	000003e0 rpmsg_init_vdev
01015778 g     F .text	0000007c memcmp
01027660 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0182eee4 g       *ABS*	00000000 __alt_stack_base
010276b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0100ac3c g     F .text	0000006c elf_identify
01005f38 g     F .text	0000003c metal_add_test_case
0101abd0 g     F .text	00000154 __swsetup_r
0102b064 g     O .rwdata	00000024 zynqmp_r5_a53_proc_ops
01003f70 g     F .text	000000fc vTaskSuspend
01024668 g     F .text	000008e8 .hidden __divdf3
01010d90 g     F .text	00000188 rpmsg_create_ept
0101ca8c g     F .text	00000118 __sfp
0101f260 g     F .text	00000078 __copybits
01004534 g     F .text	00000020 uxTaskGetNumberOfTasks
0102b524 g     O .rwdata	00000408 __malloc_av_
0101cbd8 g     F .text	00000004 __sinit_lock_release
0100829c g     F .text	000001b0 metal_io_block_write
010251a8 g     F .text	00000718 .hidden __muldf3
0101fc94 g     F .text	00000054 __sread
01028ea8 g     F .text	00000108 alt_find_file
01028688 g     F .text	000000a4 alt_dev_llist_insert
01027030 g     F .text	00000024 __malloc_lock
01027214 g     F .text	000000b0 sbrk
01016708 g     F .text	000021d8 ___svfprintf_internal_r
01001690 g     F .text	0000009c xQueueTakeMutexRecursive
01006788 g     F .text	00000094 metal_register_generic_device
01008fb0 g     F .text	000000bc metal_softirq_allocate
0101c7e0 g     F .text	0000005c _fflush_r
01000990 g     F .text	00000074 vEventGroupDelete
01006a30 g     F .text	000000c0 metal_dma_map
010228d8 g     F .text	000000c4 _calloc_r
01013c44 g     F .text	0000004c virtqueue_notification
01005544 g     F .text	000001ac xTaskGenericNotify
01011fb8 g     F .text	00000070 rpmsg_virtio_get_buffer_size
0102e834 g       *ABS*	00000000 __bss_start
0101593c g     F .text	00000128 memset
0101484c g     F .text	000000e0 main
0102e8c0 g     O .bss	00000004 alt_envp
0102e8a4 g     O .bss	00000004 __malloc_max_total_mem
010076e8 g     F .text	00000054 metal_machine_cache_flush
01027600 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01022f58 g     F .text	00000018 __swbuf
010134ec g     F .text	00000124 virtqueue_dump
01008aa8 g     F .text	00000030 metal_default_log_handler
01000c0c g     F .text	000000d8 vListInsert
0101fdc8 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01022a8c g     F .text	00000014 fclose
01028138 g     F .text	00000044 altera_avalon_mutex_lock
0101af3c g     F .text	00001688 _dtoa_r
0101d91c g     F .text	0000080c _malloc_r
010230cc g     F .text	00000030 __ascii_wctomb
0100c6cc g     F .text	00000094 remoteproc_set_rsc_table
0102cb98 g     O .rwdata	00000004 alt_errno
01003acc g     F .text	000000f0 vTaskDelayUntil
0101571c g     F .text	00000020 _fiprintf_r
0101fc10 g     F .text	00000010 _init_signal
01006af0 g     F .text	000000a0 metal_dma_unmap
0101d4fc g     F .text	000000c4 _fwalk
0100e6ac g     F .text	000000a0 remoteproc_allocate_id
01012d68 g     F .text	000000c4 virtqueue_create
01006fd0 g     F .text	000000ec metal_sys_io_mem_map
01002064 g     F .text	000000e4 xQueueReceiveFromISR
01004ecc g     F .text	00000028 xTaskGetCurrentTaskHandle
01023c08 g     F .text	00000084 .hidden __divsi3
01001418 g     F .text	000000a8 xQueueGenericCreate
01013610 g     F .text	000000b4 virtqueue_get_desc_size
0101cc0c g     F .text	00000124 _malloc_trim_r
010293d8 g       *ABS*	00000000 __CTOR_END__
01015d60 g     F .text	000000dc strcmp
010145f4 g     F .text	00000048 platform_cleanup
0100172c g     F .text	00000058 xQueueCreateCountingSemaphore
010293d8 g       *ABS*	00000000 __flash_rodata_start
010293d8 g       *ABS*	00000000 __DTOR_LIST__
01002924 g     F .text	0000006c xStreamBufferSetTriggerLevel
01007cc8 g     F .text	000000e0 metal_finish_threads
0100c9c4 g     F .text	000000ac remoteproc_stop
010056f0 g     F .text	000001e4 xTaskGenericNotifyFromISR
01024f50 g     F .text	00000088 .hidden __nedf2
01027500 g     F .text	00000038 alt_irq_init
010271b0 g     F .text	00000064 alt_release_fd
01004388 g     F .text	00000158 xTaskResumeAll
01002204 g     F .text	00000054 uxQueueSpacesAvailable
0102adf0 g     O .rodata	00000100 .hidden __clz_tab
01004284 g     F .text	00000090 vTaskStartScheduler
0102e898 g     O .bss	00000004 _PathLocale
010087a4 g     F .text	000000cc metal_irq_register_controller
01010204 g     F .text	0000009c handle_trace_rsc
010290e4 g     F .text	00000014 atexit
01022824 g     F .text	00000060 _write_r
010102c8 g     F .text	0000017c find_rsc
0101d73c g     F .text	00000018 setlocale
01002728 g     F .text	00000050 xQueueIsQueueFullFromISR
0102cb70 g     O .rwdata	00000004 _impure_ptr
0102e8b8 g     O .bss	00000004 alt_argc
01010a28 g     F .text	000000b0 rpmsg_send_offchannel_raw
0101c5c4 g     F .text	0000021c __sflush_r
010134a0 g     F .text	0000004c virtqueue_kick
0102878c g     F .text	00000060 _do_dtors
0100ff1c g     F .text	000000a0 handle_vendor_rsc
0101d728 g     F .text	00000008 __locale_cjk_lang
0100ca70 g     F .text	000000dc remoteproc_shutdown
01000020 g       .exceptions	00000000 alt_irq_entry
0101ee8c g     F .text	00000064 __ulp
0101cbf4 g     F .text	00000018 __fp_unlock_all
01004bf4 g     F .text	00000028 vTaskMissedYield
0102cb84 g     O .rwdata	00000008 alt_fs_list
0100fda8 g     F .text	00000174 handle_carve_out_rsc
010021c4 g     F .text	00000040 uxQueueMessagesWaiting
0102af34  w    O .rwdata	0000002c metal_generic_bus
01004594 g     F .text	000001b0 xTaskIncrementTick
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100f8d0 g     F .text	000000a8 rproc_virtio_init_vring
0100773c g     F .text	00000028 metal_machine_cache_invalidate
0101d754 g     F .text	0000000c localeconv
01007ee4 g     F .text	00000040 metal_finish
010068c0 g     F .text	000000e8 metal_generic_dev_dma_map
01005e00 g     F .text	0000006c init_system
0102675c g     F .text	00000050 alt_ic_isr_register
0101256c g     F .text	00000070 virtio_dev_name
01001304 g     F .text	00000114 xQueueGenericReset
01009cc4 g     F .text	0000015c _write
0102cbb4 g       *ABS*	00000000 _edata
0182eee4 g       *ABS*	00000000 _end
01022aa0 g     F .text	00000164 __fputwc
010003a0 g       *ABS*	00000000 __ram_exceptions_end
0100844c g     F .text	000001c4 metal_io_block_set
01005d34 g     F .text	00000034 atomic_mutex_deinit
01027ad8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01006f64 g     F .text	00000038 metal_sys_init
0100361c g     F .text	000000e8 xTaskCreate
01001270 g     F .text	00000020 vPortInitialiseBlocks
01014784 g     F .text	000000c8 app
01026834 g     F .text	0000008c alt_ic_irq_disable
0100f5b8 g     F .text	0000026c rproc_virtio_create_vdev
0101fcf0 g     F .text	0000007c __swrite
0102cb7c g     O .rwdata	00000004 __malloc_trim_threshold
0101d71c g     F .text	0000000c __locale_msgcharset
0100b9a4 g     F .text	00000104 elf_locate_rsc_table
010290f8 g     F .text	00000038 exit
0101573c g     F .text	0000003c fiprintf
010188e8 g     F .text	00000018 _vfiprintf_r
0101d5c0 g     F .text	000000c4 _fwalk_reent
0101ec90 g     F .text	000001fc __mdiff
01023c8c g     F .text	00000074 .hidden __modsi3
01003bbc g     F .text	0000005c vTaskDelay
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0101cbd0 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100cb4c g     F .text	00000064 remoteproc_get_io_with_name
0101451c g     F .text	000000b4 platform_poll
0100906c g     F .text	00000138 metal_softirq_dispatch
01005130 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
01009b84 g     F .text	00000140 _read
01008964 g     F .text	000000cc metal_irq_register
01012408 g     F .text	00000088 rpmsg_deinit_vdev
0102661c g     F .text	00000034 _exit
010283c8 g     F .text	0000012c alt_alarm_start
010075e0 g     F .text	00000090 metal_nios2_irq_init
0101d760 g     F .text	000001bc __smakebuf_r
010052c4 g     F .text	00000060 vTaskExitCritical
010164b4 g     F .text	00000098 strlen
01000da8 g     F .text	000000e0 pxPortInitialiseStack
0101f990 g     F .text	0000006c _init_signal_r
01028b8c g     F .text	00000154 open
01024fd8 g     F .text	000000dc .hidden __gedf2
010143b0 g     F .text	0000016c platform_create_rpmsg_vdev
01015708 g     F .text	00000014 __assert
010064c4 g     F .text	000000a4 metal_bus_unregister
0102cb80 g     O .rwdata	00000004 __wctomb
01005d00 g     F .text	00000034 atomic_mutex_init
01008b0c g     F .text	00000028 metal_get_log_handler
010212d8 g     F .text	00000018 __sprint_r
0102887c g     F .text	00000034 alt_icache_flush_all
01004a8c g     F .text	0000004c vTaskSetTimeOutState
0100eb28 g     F .text	00000084 remoteproc_remove_virtio
0102cb9c g     O .rwdata	00000004 alt_priority_mask
01012e2c g     F .text	00000104 virtqueue_add_buffer
01005d9c g     F .text	00000034 atomic_mutex_release
010267ac g     F .text	00000088 alt_ic_irq_enable
0101aaf8 g     F .text	0000001c __vfprintf_internal
01010d3c g     F .text	00000054 rpmsg_register_endpoint
01028114 g     F .text	00000024 altera_avalon_mutex_close
010230fc g     F .text	0000005c _wctomb_r
01002258 g     F .text	00000038 uxQueueMessagesWaitingFromISR
01002688 g     F .text	00000048 xQueueIsQueueEmptyFromISR
01002a18 g     F .text	00000040 xStreamBufferBytesAvailable
0100c880 g     F .text	000000b0 remoteproc_config
0100b814 g     F .text	00000110 elf_release
010258c0 g     F .text	000008fc .hidden __subdf3
0102afe0 g     O .rwdata	00000018 elf_ops
010145d0 g     F .text	00000024 platform_release_rpmsg_vdev
0100ffbc g     F .text	00000248 handle_vdev_rsc
0101e6c4 g     F .text	000000b0 __lo0bits
0100b3d4 g     F .text	00000440 elf_load
0102cbac g     O .rwdata	00000008 alt_alarm_list
01013258 g     F .text	000000d8 virtqueue_add_consumed_buffer
0102872c g     F .text	00000060 _do_ctors
0101fc20 g     F .text	00000014 __sigtramp
0100c930 g     F .text	00000094 remoteproc_start
0100aca8 g     F .text	0000072c elf_load_header
01005324 g     F .text	00000044 uxTaskResetEventItemValue
0102300c g     F .text	000000c0 wcrtomb
010015a4 g     F .text	0000005c xQueueCreateMutex
01026460 g     F .text	000000d0 close
010058d4 g     F .text	00000120 vTaskNotifyGiveFromISR
0100f824 g     F .text	000000ac rproc_virtio_remove_vdev
01026e20 g     F .text	00000084 alt_load
0100faf8 g     F .text	000002b0 handle_rsc_table
01000a40 g     F .text	0000003c vEventGroupClearBitsCallback
01003218 g     F .text	00000084 xStreamBufferSendCompletedFromISR
01001a20 g     F .text	000000dc xQueueGiveFromISR
01022c28 g     F .text	00000080 fputwc
0101fbe4 g     F .text	00000014 raise
01009e20 g     F .text	000000bc _close
0100ebac g     F .text	00000090 remoteproc_get_notification
0101cbd4 g     F .text	00000004 __sinit_lock_acquire
01005f74 g     F .text	00000220 metal_tests_run
0101e438 g     F .text	00000120 __multadd
0101e410 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	0840e814 	ori	at,at,928
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_sdram-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 1000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 1000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 1000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 100002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 1000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 1000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 1000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 100003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 1000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 1000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 1000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 100004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 1000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 100006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 1000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 1000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 1000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 100007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 1000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 1000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 1000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 100008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 1000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 1000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 1000098:	df001c15 	stw	fp,112(sp)

0100009c <save_sp_to_pxCurrentTCB>:
 100009c:	060040f4 	movhi	et,259

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 10000a0:	c63a1204 	addi	et,et,-6072
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 10000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 10000a8:	c6c00015 	stw	sp,0(et)

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 10000ac:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 10000b0:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 10000b4:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 10000b8:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 10000bc:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 10000c0:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 10000c4:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 10000c8:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 10000cc:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 10000d0:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 10000d4:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 10000d8:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 10000dc:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 10000e0:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 10000e4:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 10000e8:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 10000ec:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 10000f0:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 10000f4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 10000f8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000fc:	dbc01215 	stw	r15,72(sp)

01000100 <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 1000100:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 1000104:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 1000108:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 100010c:	10002d26 	beq	r2,zero,10001c4 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 1000110:	20002c26 	beq	r4,zero,10001c4 <soft_exceptions>
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000114:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000118:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100011c:	10002726 	beq	r2,zero,10001bc <restore_context+0x80>
        beq   r4, zero, .Lnot_irq
 1000120:	20002626 	beq	r4,zero,10001bc <restore_context+0x80>

01000124 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 1000124:	10002580 	call	1000258 <alt_irq_handler>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000128:	10002580 	call	1000258 <alt_irq_handler>

0100012c <restore_sp_from_pxCurrentTCB>:
 100012c:	060040f4 	movhi	et,259

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 1000130:	c63a1204 	addi	et,et,-6072
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 1000134:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 1000138:	c6c00017 	ldw	sp,0(et)

0100013c <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 100013c:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 1000140:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 1000144:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 1000148:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 100014c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 1000150:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 1000154:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 1000158:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 100015c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 1000160:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 1000164:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 1000168:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 100016c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 1000170:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 1000174:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 1000178:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 100017c:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 1000180:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 1000184:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 1000188:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 100018c:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 1000190:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 1000194:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 1000198:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 100019c:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 10001a0:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 10001a4:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 10001a8:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 10001ac:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 10001b0:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 10001b4:	ef80083a 	eret

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 10001b8:	00001206 	br	1000204 <call_scheduler+0x24>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 10001bc:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 10001c0:	e8bfff17 	ldw	r2,-4(ea)

010001c4 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 10001c4:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 10001c8:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 10001cc:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 10001d0:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 10001d4:	c0000226 	beq	et,zero,10001e0 <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 10001d8:	003da03a 	break	0
  	br		restore_context			# its something else
 10001dc:	003fd706 	br	100013c <__alt_data_end+0xff00013c>

010001e0 <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 10001e0:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 10001e4:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 10001e8:	10047440 	call	1004744 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 10001ec:	003fcf06 	br	100012c <__alt_data_end+0xff00012c>
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 10001f0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 10001f4:	100032c0 	call	100032c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 10001f8:	1000021e 	bne	r2,zero,1000204 <call_scheduler+0x24>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10001fc:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000200:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000204:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 1000208:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 100020c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 1000210:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 1000214:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 1000218:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 100021c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 1000220:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 1000224:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 1000228:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 100022c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 1000230:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 1000234:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 1000238:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 100023c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 1000240:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 1000244:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 1000248:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100024c:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 1000250:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 1000254:	ef80083a 	eret

01000258 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 1000258:	defff904 	addi	sp,sp,-28
 100025c:	dfc00615 	stw	ra,24(sp)
 1000260:	df000515 	stw	fp,20(sp)
 1000264:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 1000268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100026c:	0005313a 	rdctl	r2,ipending
 1000270:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000274:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000278:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 100027c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000280:	00800044 	movi	r2,1
 1000284:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000288:	e0fffb17 	ldw	r3,-20(fp)
 100028c:	e0bffc17 	ldw	r2,-16(fp)
 1000290:	1884703a 	and	r2,r3,r2
 1000294:	10001426 	beq	r2,zero,10002e8 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000298:	008060f4 	movhi	r2,387
 100029c:	10bb7904 	addi	r2,r2,-4636
 10002a0:	e0fffd17 	ldw	r3,-12(fp)
 10002a4:	180690fa 	slli	r3,r3,3
 10002a8:	10c5883a 	add	r2,r2,r3
 10002ac:	10c00017 	ldw	r3,0(r2)
 10002b0:	008060f4 	movhi	r2,387
 10002b4:	10bb7904 	addi	r2,r2,-4636
 10002b8:	e13ffd17 	ldw	r4,-12(fp)
 10002bc:	200890fa 	slli	r4,r4,3
 10002c0:	1105883a 	add	r2,r2,r4
 10002c4:	10800104 	addi	r2,r2,4
 10002c8:	10800017 	ldw	r2,0(r2)
 10002cc:	1009883a 	mov	r4,r2
 10002d0:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 10002d4:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10002d8:	0005313a 	rdctl	r2,ipending
 10002dc:	e0bfff15 	stw	r2,-4(fp)

  return active;
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	00000706 	br	1000304 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 10002e8:	e0bffc17 	ldw	r2,-16(fp)
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	10800044 	addi	r2,r2,1
 10002fc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000300:	003fe106 	br	1000288 <__alt_data_end+0xff000288>

    active = alt_irq_pending ();
 1000304:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1000308:	e0bffb17 	ldw	r2,-20(fp)
 100030c:	103fdb1e 	bne	r2,zero,100027c <__alt_data_end+0xff00027c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1000310:	0001883a 	nop
}
 1000314:	0001883a 	nop
 1000318:	e037883a 	mov	sp,fp
 100031c:	dfc00117 	ldw	ra,4(sp)
 1000320:	df000017 	ldw	fp,0(sp)
 1000324:	dec00204 	addi	sp,sp,8
 1000328:	f800283a 	ret

0100032c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 100032c:	defffb04 	addi	sp,sp,-20
 1000330:	dfc00415 	stw	ra,16(sp)
 1000334:	df000315 	stw	fp,12(sp)
 1000338:	df000304 	addi	fp,sp,12
 100033c:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1000340:	000531fa 	rdctl	r2,exception
 1000344:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1000348:	e0bffd17 	ldw	r2,-12(fp)
 100034c:	10801f0c 	andi	r2,r2,124
 1000350:	1004d0ba 	srli	r2,r2,2
 1000354:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1000358:	0005333a 	rdctl	r2,badaddr
 100035c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000360:	d0a76017 	ldw	r2,-25216(gp)
 1000364:	10000726 	beq	r2,zero,1000384 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1000368:	d0a76017 	ldw	r2,-25216(gp)
 100036c:	e0fffd17 	ldw	r3,-12(fp)
 1000370:	e1bffe17 	ldw	r6,-8(fp)
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	1809883a 	mov	r4,r3
 100037c:	103ee83a 	callr	r2
 1000380:	00000206 	br	100038c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000384:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000388:	0005883a 	mov	r2,zero
}
 100038c:	e037883a 	mov	sp,fp
 1000390:	dfc00117 	ldw	ra,4(sp)
 1000394:	df000017 	ldw	fp,0(sp)
 1000398:	dec00204 	addi	sp,sp,8
 100039c:	f800283a 	ret

Disassembly of section .text:

010003a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10003a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10003a4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10003a8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10003ac:	00bffd16 	blt	zero,r2,10003a4 <__alt_data_end+0xff0003a4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10003b0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10003b4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10003b8:	068040f4 	movhi	gp,259
    ori gp, gp, %lo(_gp)
 10003bc:	d692d114 	ori	gp,gp,19268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10003c0:	008040b4 	movhi	r2,258
    ori r2, r2, %lo(__bss_start)
 10003c4:	10ba0d14 	ori	r2,r2,59444

    movhi r3, %hi(__bss_end)
 10003c8:	00c060b4 	movhi	r3,386
    ori r3, r3, %lo(__bss_end)
 10003cc:	18fbb914 	ori	r3,r3,61156

    beq r2, r3, 1f
 10003d0:	10c00326 	beq	r2,r3,10003e0 <_start+0x40>

0:
    stw zero, (r2)
 10003d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10003d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10003dc:	10fffd36 	bltu	r2,r3,10003d4 <__alt_data_end+0xff0003d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10003e0:	1026e200 	call	1026e20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10003e4:	1026fb40 	call	1026fb4 <alt_main>

010003e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10003e8:	003fff06 	br	10003e8 <__alt_data_end+0xff0003e8>

010003ec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 10003ec:	defffd04 	addi	sp,sp,-12
 10003f0:	dfc00215 	stw	ra,8(sp)
 10003f4:	df000115 	stw	fp,4(sp)
 10003f8:	df000104 	addi	fp,sp,4
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 10003fc:	01000604 	movi	r4,24
 1000400:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1000404:	e0bfff15 	stw	r2,-4(fp)

		if( pxEventBits != NULL )
 1000408:	e0bfff17 	ldw	r2,-4(fp)
 100040c:	10000626 	beq	r2,zero,1000428 <xEventGroupCreate+0x3c>
		{
			pxEventBits->uxEventBits = 0;
 1000410:	e0bfff17 	ldw	r2,-4(fp)
 1000414:	10000015 	stw	zero,0(r2)
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 1000418:	e0bfff17 	ldw	r2,-4(fp)
 100041c:	10800104 	addi	r2,r2,4
 1000420:	1009883a 	mov	r4,r2
 1000424:	1000aec0 	call	1000aec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 1000428:	e0bfff17 	ldw	r2,-4(fp)
	}
 100042c:	e037883a 	mov	sp,fp
 1000430:	dfc00117 	ldw	ra,4(sp)
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00204 	addi	sp,sp,8
 100043c:	f800283a 	ret

01000440 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 1000440:	defff504 	addi	sp,sp,-44
 1000444:	dfc00a15 	stw	ra,40(sp)
 1000448:	df000915 	stw	fp,36(sp)
 100044c:	df000904 	addi	fp,sp,36
 1000450:	e13ffc15 	stw	r4,-16(fp)
 1000454:	e17ffd15 	stw	r5,-12(fp)
 1000458:	e1bffe15 	stw	r6,-8(fp)
 100045c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 1000460:	e0bffc17 	ldw	r2,-16(fp)
 1000464:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 1000468:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 100046c:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 1000470:	e0bff817 	ldw	r2,-32(fp)
 1000474:	10800017 	ldw	r2,0(r2)
 1000478:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 100047c:	e17ffd17 	ldw	r5,-12(fp)
 1000480:	e13ffc17 	ldw	r4,-16(fp)
 1000484:	10008100 	call	1000810 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000488:	e0fffa17 	ldw	r3,-24(fp)
 100048c:	e0bffd17 	ldw	r2,-12(fp)
 1000490:	1886b03a 	or	r3,r3,r2
 1000494:	e0bffe17 	ldw	r2,-8(fp)
 1000498:	1886703a 	and	r3,r3,r2
 100049c:	e0bffe17 	ldw	r2,-8(fp)
 10004a0:	18800d1e 	bne	r3,r2,10004d8 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 10004a4:	e0fffa17 	ldw	r3,-24(fp)
 10004a8:	e0bffd17 	ldw	r2,-12(fp)
 10004ac:	1884b03a 	or	r2,r3,r2
 10004b0:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 10004b4:	e0bff817 	ldw	r2,-32(fp)
 10004b8:	10c00017 	ldw	r3,0(r2)
 10004bc:	e0bffe17 	ldw	r2,-8(fp)
 10004c0:	0084303a 	nor	r2,zero,r2
 10004c4:	1886703a 	and	r3,r3,r2
 10004c8:	e0bff817 	ldw	r2,-32(fp)
 10004cc:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
 10004d0:	e03fff15 	stw	zero,-4(fp)
 10004d4:	00001106 	br	100051c <xEventGroupSync+0xdc>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 10004d8:	e0bfff17 	ldw	r2,-4(fp)
 10004dc:	10000a26 	beq	r2,zero,1000508 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 10004e0:	e0bff817 	ldw	r2,-32(fp)
 10004e4:	10c00104 	addi	r3,r2,4
 10004e8:	e0bffe17 	ldw	r2,-8(fp)
 10004ec:	10814034 	orhi	r2,r2,1280
 10004f0:	e1bfff17 	ldw	r6,-4(fp)
 10004f4:	100b883a 	mov	r5,r2
 10004f8:	1809883a 	mov	r4,r3
 10004fc:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 1000500:	e03ff715 	stw	zero,-36(fp)
 1000504:	00000506 	br	100051c <xEventGroupSync+0xdc>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 1000508:	e0bff817 	ldw	r2,-32(fp)
 100050c:	10800017 	ldw	r2,0(r2)
 1000510:	e0bff715 	stw	r2,-36(fp)
				xTimeoutOccurred = pdTRUE;
 1000514:	00800044 	movi	r2,1
 1000518:	e0bff915 	stw	r2,-28(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 100051c:	10043880 	call	1004388 <xTaskResumeAll>
 1000520:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10002026 	beq	r2,zero,10005ac <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
 100052c:	e0bffb17 	ldw	r2,-20(fp)
 1000530:	1000011e 	bne	r2,zero,1000538 <xEventGroupSync+0xf8>
		{
			portYIELD_WITHIN_API();
 1000534:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 1000538:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 100053c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 1000540:	e0bff717 	ldw	r2,-36(fp)
 1000544:	1080802c 	andhi	r2,r2,512
 1000548:	1000131e 	bne	r2,zero,1000598 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 100054c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 1000550:	e0bff817 	ldw	r2,-32(fp)
 1000554:	10800017 	ldw	r2,0(r2)
 1000558:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 100055c:	e0fff717 	ldw	r3,-36(fp)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	1886703a 	and	r3,r3,r2
 1000568:	e0bffe17 	ldw	r2,-8(fp)
 100056c:	1880071e 	bne	r3,r2,100058c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000570:	e0bff817 	ldw	r2,-32(fp)
 1000574:	10c00017 	ldw	r3,0(r2)
 1000578:	e0bffe17 	ldw	r2,-8(fp)
 100057c:	0084303a 	nor	r2,zero,r2
 1000580:	1886703a 	and	r3,r3,r2
 1000584:	e0bff817 	ldw	r2,-32(fp)
 1000588:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 100058c:	10052c40 	call	10052c4 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
 1000590:	00800044 	movi	r2,1
 1000594:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000598:	e0fff717 	ldw	r3,-36(fp)
 100059c:	00804034 	movhi	r2,256
 10005a0:	10bfffc4 	addi	r2,r2,-1
 10005a4:	1884703a 	and	r2,r3,r2
 10005a8:	e0bff715 	stw	r2,-36(fp)
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 10005ac:	e0bff717 	ldw	r2,-36(fp)
}
 10005b0:	e037883a 	mov	sp,fp
 10005b4:	dfc00117 	ldw	ra,4(sp)
 10005b8:	df000017 	ldw	fp,0(sp)
 10005bc:	dec00204 	addi	sp,sp,8
 10005c0:	f800283a 	ret

010005c4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 10005c4:	defff304 	addi	sp,sp,-52
 10005c8:	dfc00c15 	stw	ra,48(sp)
 10005cc:	df000b15 	stw	fp,44(sp)
 10005d0:	df000b04 	addi	fp,sp,44
 10005d4:	e13ffc15 	stw	r4,-16(fp)
 10005d8:	e17ffd15 	stw	r5,-12(fp)
 10005dc:	e1bffe15 	stw	r6,-8(fp)
 10005e0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10005e4:	e0bffc17 	ldw	r2,-16(fp)
 10005e8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
 10005ec:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 10005f0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 10005f4:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 10005f8:	e0bff717 	ldw	r2,-36(fp)
 10005fc:	10800017 	ldw	r2,0(r2)
 1000600:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 1000604:	e1bfff17 	ldw	r6,-4(fp)
 1000608:	e17ffd17 	ldw	r5,-12(fp)
 100060c:	e13ff917 	ldw	r4,-28(fp)
 1000610:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 1000614:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
 1000618:	e0bffa17 	ldw	r2,-24(fp)
 100061c:	10000d26 	beq	r2,zero,1000654 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 1000620:	e0bff917 	ldw	r2,-28(fp)
 1000624:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
 1000628:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	10002226 	beq	r2,zero,10006bc <xEventGroupWaitBits+0xf8>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000634:	e0bff717 	ldw	r2,-36(fp)
 1000638:	10c00017 	ldw	r3,0(r2)
 100063c:	e0bffd17 	ldw	r2,-12(fp)
 1000640:	0084303a 	nor	r2,zero,r2
 1000644:	1886703a 	and	r3,r3,r2
 1000648:	e0bff717 	ldw	r2,-36(fp)
 100064c:	10c00015 	stw	r3,0(r2)
 1000650:	00001a06 	br	10006bc <xEventGroupWaitBits+0xf8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 1000654:	e0800217 	ldw	r2,8(fp)
 1000658:	1000051e 	bne	r2,zero,1000670 <xEventGroupWaitBits+0xac>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 100065c:	e0bff917 	ldw	r2,-28(fp)
 1000660:	e0bff515 	stw	r2,-44(fp)
			xTimeoutOccurred = pdTRUE;
 1000664:	00800044 	movi	r2,1
 1000668:	e0bff815 	stw	r2,-32(fp)
 100066c:	00001306 	br	10006bc <xEventGroupWaitBits+0xf8>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 1000670:	e0bffe17 	ldw	r2,-8(fp)
 1000674:	10000326 	beq	r2,zero,1000684 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 1000678:	e0bff617 	ldw	r2,-40(fp)
 100067c:	10804034 	orhi	r2,r2,256
 1000680:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 1000684:	e0bfff17 	ldw	r2,-4(fp)
 1000688:	10000326 	beq	r2,zero,1000698 <xEventGroupWaitBits+0xd4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 100068c:	e0bff617 	ldw	r2,-40(fp)
 1000690:	10810034 	orhi	r2,r2,1024
 1000694:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 1000698:	e0bff717 	ldw	r2,-36(fp)
 100069c:	11000104 	addi	r4,r2,4
 10006a0:	e0fffd17 	ldw	r3,-12(fp)
 10006a4:	e0bff617 	ldw	r2,-40(fp)
 10006a8:	1884b03a 	or	r2,r3,r2
 10006ac:	e1800217 	ldw	r6,8(fp)
 10006b0:	100b883a 	mov	r5,r2
 10006b4:	100486c0 	call	100486c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 10006b8:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 10006bc:	10043880 	call	1004388 <xTaskResumeAll>
 10006c0:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 10006c4:	e0800217 	ldw	r2,8(fp)
 10006c8:	10002226 	beq	r2,zero,1000754 <xEventGroupWaitBits+0x190>
	{
		if( xAlreadyYielded == pdFALSE )
 10006cc:	e0bffb17 	ldw	r2,-20(fp)
 10006d0:	1000011e 	bne	r2,zero,10006d8 <xEventGroupWaitBits+0x114>
		{
			portYIELD_WITHIN_API();
 10006d4:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 10006d8:	10053240 	call	1005324 <uxTaskResetEventItemValue>
 10006dc:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 10006e0:	e0bff517 	ldw	r2,-44(fp)
 10006e4:	1080802c 	andhi	r2,r2,512
 10006e8:	1000151e 	bne	r2,zero,1000740 <xEventGroupWaitBits+0x17c>
		{
			taskENTER_CRITICAL();
 10006ec:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 10006f0:	e0bff717 	ldw	r2,-36(fp)
 10006f4:	10800017 	ldw	r2,0(r2)
 10006f8:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 10006fc:	e1bfff17 	ldw	r6,-4(fp)
 1000700:	e17ffd17 	ldw	r5,-12(fp)
 1000704:	e13ff517 	ldw	r4,-44(fp)
 1000708:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 100070c:	10000926 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
				{
					if( xClearOnExit != pdFALSE )
 1000710:	e0bffe17 	ldw	r2,-8(fp)
 1000714:	10000726 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000718:	e0bff717 	ldw	r2,-36(fp)
 100071c:	10c00017 	ldw	r3,0(r2)
 1000720:	e0bffd17 	ldw	r2,-12(fp)
 1000724:	0084303a 	nor	r2,zero,r2
 1000728:	1886703a 	and	r3,r3,r2
 100072c:	e0bff717 	ldw	r2,-36(fp)
 1000730:	10c00015 	stw	r3,0(r2)
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 1000734:	00800044 	movi	r2,1
 1000738:	e0bff815 	stw	r2,-32(fp)
			}
			taskEXIT_CRITICAL();
 100073c:	10052c40 	call	10052c4 <vTaskExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000740:	e0fff517 	ldw	r3,-44(fp)
 1000744:	00804034 	movhi	r2,256
 1000748:	10bfffc4 	addi	r2,r2,-1
 100074c:	1884703a 	and	r2,r3,r2
 1000750:	e0bff515 	stw	r2,-44(fp)
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 1000754:	e0bff517 	ldw	r2,-44(fp)
}
 1000758:	e037883a 	mov	sp,fp
 100075c:	dfc00117 	ldw	ra,4(sp)
 1000760:	df000017 	ldw	fp,0(sp)
 1000764:	dec00204 	addi	sp,sp,8
 1000768:	f800283a 	ret

0100076c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 100076c:	defffa04 	addi	sp,sp,-24
 1000770:	dfc00515 	stw	ra,20(sp)
 1000774:	df000415 	stw	fp,16(sp)
 1000778:	df000404 	addi	fp,sp,16
 100077c:	e13ffe15 	stw	r4,-8(fp)
 1000780:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 1000784:	e0bffe17 	ldw	r2,-8(fp)
 1000788:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
 100078c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 1000790:	e0bffc17 	ldw	r2,-16(fp)
 1000794:	10800017 	ldw	r2,0(r2)
 1000798:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 100079c:	e0bffc17 	ldw	r2,-16(fp)
 10007a0:	10c00017 	ldw	r3,0(r2)
 10007a4:	e0bfff17 	ldw	r2,-4(fp)
 10007a8:	0084303a 	nor	r2,zero,r2
 10007ac:	1886703a 	and	r3,r3,r2
 10007b0:	e0bffc17 	ldw	r2,-16(fp)
 10007b4:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
 10007b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10007bc:	e0bffd17 	ldw	r2,-12(fp)
}
 10007c0:	e037883a 	mov	sp,fp
 10007c4:	dfc00117 	ldw	ra,4(sp)
 10007c8:	df000017 	ldw	fp,0(sp)
 10007cc:	dec00204 	addi	sp,sp,8
 10007d0:	f800283a 	ret

010007d4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 10007d4:	defffb04 	addi	sp,sp,-20
 10007d8:	df000415 	stw	fp,16(sp)
 10007dc:	df000404 	addi	fp,sp,16
 10007e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 10007e4:	e0bfff17 	ldw	r2,-4(fp)
 10007e8:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10007ec:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
 10007f0:	e0bffc17 	ldw	r2,-16(fp)
 10007f4:	10800017 	ldw	r2,0(r2)
 10007f8:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 10007fc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 1000800:	e037883a 	mov	sp,fp
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00104 	addi	sp,sp,4
 100080c:	f800283a 	ret

01000810 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 1000810:	defff304 	addi	sp,sp,-52
 1000814:	dfc00c15 	stw	ra,48(sp)
 1000818:	df000b15 	stw	fp,44(sp)
 100081c:	df000b04 	addi	fp,sp,44
 1000820:	e13ffe15 	stw	r4,-8(fp)
 1000824:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1000828:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = xEventGroup;
 100082c:	e0bffe17 	ldw	r2,-8(fp)
 1000830:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
 1000834:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
 1000838:	e0bff817 	ldw	r2,-32(fp)
 100083c:	10800104 	addi	r2,r2,4
 1000840:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000844:	e0bff917 	ldw	r2,-28(fp)
 1000848:	10800204 	addi	r2,r2,8
 100084c:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
 1000850:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 1000854:	e0bff917 	ldw	r2,-28(fp)
 1000858:	10800317 	ldw	r2,12(r2)
 100085c:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 1000860:	e0bff817 	ldw	r2,-32(fp)
 1000864:	10c00017 	ldw	r3,0(r2)
 1000868:	e0bfff17 	ldw	r2,-4(fp)
 100086c:	1886b03a 	or	r3,r3,r2
 1000870:	e0bff817 	ldw	r2,-32(fp)
 1000874:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000878:	00003306 	br	1000948 <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
 100087c:	e0bff517 	ldw	r2,-44(fp)
 1000880:	10800117 	ldw	r2,4(r2)
 1000884:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1000888:	e0bff517 	ldw	r2,-44(fp)
 100088c:	10800017 	ldw	r2,0(r2)
 1000890:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
 1000894:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1000898:	e0bffc17 	ldw	r2,-16(fp)
 100089c:	10bfc02c 	andhi	r2,r2,65280
 10008a0:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 10008a4:	e0fffc17 	ldw	r3,-16(fp)
 10008a8:	00804034 	movhi	r2,256
 10008ac:	10bfffc4 	addi	r2,r2,-1
 10008b0:	1884703a 	and	r2,r3,r2
 10008b4:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 10008b8:	e0bffd17 	ldw	r2,-12(fp)
 10008bc:	1081002c 	andhi	r2,r2,1024
 10008c0:	1000081e 	bne	r2,zero,10008e4 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 10008c4:	e0bff817 	ldw	r2,-32(fp)
 10008c8:	10c00017 	ldw	r3,0(r2)
 10008cc:	e0bffc17 	ldw	r2,-16(fp)
 10008d0:	1884703a 	and	r2,r3,r2
 10008d4:	10000b26 	beq	r2,zero,1000904 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
 10008d8:	00800044 	movi	r2,1
 10008dc:	e0bff715 	stw	r2,-36(fp)
 10008e0:	00000806 	br	1000904 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 10008e4:	e0bff817 	ldw	r2,-32(fp)
 10008e8:	10c00017 	ldw	r3,0(r2)
 10008ec:	e0bffc17 	ldw	r2,-16(fp)
 10008f0:	1886703a 	and	r3,r3,r2
 10008f4:	e0bffc17 	ldw	r2,-16(fp)
 10008f8:	1880021e 	bne	r3,r2,1000904 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 10008fc:	00800044 	movi	r2,1
 1000900:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 1000904:	e0bff717 	ldw	r2,-36(fp)
 1000908:	10000d26 	beq	r2,zero,1000940 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 100090c:	e0bffd17 	ldw	r2,-12(fp)
 1000910:	1080402c 	andhi	r2,r2,256
 1000914:	10000426 	beq	r2,zero,1000928 <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 1000918:	e0fff617 	ldw	r3,-40(fp)
 100091c:	e0bffc17 	ldw	r2,-16(fp)
 1000920:	1884b03a 	or	r2,r3,r2
 1000924:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 1000928:	e0bff817 	ldw	r2,-32(fp)
 100092c:	10800017 	ldw	r2,0(r2)
 1000930:	10808034 	orhi	r2,r2,512
 1000934:	100b883a 	mov	r5,r2
 1000938:	e13ff517 	ldw	r4,-44(fp)
 100093c:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 1000940:	e0bffb17 	ldw	r2,-20(fp)
 1000944:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000948:	e0fff517 	ldw	r3,-44(fp)
 100094c:	e0bffa17 	ldw	r2,-24(fp)
 1000950:	18bfca1e 	bne	r3,r2,100087c <__alt_data_end+0xff00087c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1000954:	e0bff817 	ldw	r2,-32(fp)
 1000958:	10c00017 	ldw	r3,0(r2)
 100095c:	e0bff617 	ldw	r2,-40(fp)
 1000960:	0084303a 	nor	r2,zero,r2
 1000964:	1886703a 	and	r3,r3,r2
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
 1000970:	10043880 	call	1004388 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 1000974:	e0bff817 	ldw	r2,-32(fp)
 1000978:	10800017 	ldw	r2,0(r2)
}
 100097c:	e037883a 	mov	sp,fp
 1000980:	dfc00117 	ldw	ra,4(sp)
 1000984:	df000017 	ldw	fp,0(sp)
 1000988:	dec00204 	addi	sp,sp,8
 100098c:	f800283a 	ret

01000990 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 1000990:	defffb04 	addi	sp,sp,-20
 1000994:	dfc00415 	stw	ra,16(sp)
 1000998:	df000315 	stw	fp,12(sp)
 100099c:	df000304 	addi	fp,sp,12
 10009a0:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10009a4:	e0bfff17 	ldw	r2,-4(fp)
 10009a8:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 10009ac:	e0bffd17 	ldw	r2,-12(fp)
 10009b0:	10800104 	addi	r2,r2,4
 10009b4:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
 10009b8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009bc:	00000506 	br	10009d4 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 10009c0:	e0bffe17 	ldw	r2,-8(fp)
 10009c4:	10800317 	ldw	r2,12(r2)
 10009c8:	01408034 	movhi	r5,512
 10009cc:	1009883a 	mov	r4,r2
 10009d0:	10049c40 	call	10049c4 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009d4:	e0bffe17 	ldw	r2,-8(fp)
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	103ff81e 	bne	r2,zero,10009c0 <__alt_data_end+0xff0009c0>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 10009e0:	e13ffd17 	ldw	r4,-12(fp)
 10009e4:	10011840 	call	1001184 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 10009e8:	10043880 	call	1004388 <xTaskResumeAll>
}
 10009ec:	0001883a 	nop
 10009f0:	e037883a 	mov	sp,fp
 10009f4:	dfc00117 	ldw	ra,4(sp)
 10009f8:	df000017 	ldw	fp,0(sp)
 10009fc:	dec00204 	addi	sp,sp,8
 1000a00:	f800283a 	ret

01000a04 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 1000a04:	defffc04 	addi	sp,sp,-16
 1000a08:	dfc00315 	stw	ra,12(sp)
 1000a0c:	df000215 	stw	fp,8(sp)
 1000a10:	df000204 	addi	fp,sp,8
 1000a14:	e13ffe15 	stw	r4,-8(fp)
 1000a18:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a1c:	e17fff17 	ldw	r5,-4(fp)
 1000a20:	e13ffe17 	ldw	r4,-8(fp)
 1000a24:	10008100 	call	1000810 <xEventGroupSetBits>
}
 1000a28:	0001883a 	nop
 1000a2c:	e037883a 	mov	sp,fp
 1000a30:	dfc00117 	ldw	ra,4(sp)
 1000a34:	df000017 	ldw	fp,0(sp)
 1000a38:	dec00204 	addi	sp,sp,8
 1000a3c:	f800283a 	ret

01000a40 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 1000a40:	defffc04 	addi	sp,sp,-16
 1000a44:	dfc00315 	stw	ra,12(sp)
 1000a48:	df000215 	stw	fp,8(sp)
 1000a4c:	df000204 	addi	fp,sp,8
 1000a50:	e13ffe15 	stw	r4,-8(fp)
 1000a54:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a58:	e17fff17 	ldw	r5,-4(fp)
 1000a5c:	e13ffe17 	ldw	r4,-8(fp)
 1000a60:	100076c0 	call	100076c <xEventGroupClearBits>
}
 1000a64:	0001883a 	nop
 1000a68:	e037883a 	mov	sp,fp
 1000a6c:	dfc00117 	ldw	ra,4(sp)
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00204 	addi	sp,sp,8
 1000a78:	f800283a 	ret

01000a7c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 1000a7c:	defffb04 	addi	sp,sp,-20
 1000a80:	df000415 	stw	fp,16(sp)
 1000a84:	df000404 	addi	fp,sp,16
 1000a88:	e13ffd15 	stw	r4,-12(fp)
 1000a8c:	e17ffe15 	stw	r5,-8(fp)
 1000a90:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
 1000a94:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
 1000a98:	e0bfff17 	ldw	r2,-4(fp)
 1000a9c:	1000071e 	bne	r2,zero,1000abc <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1000aa0:	e0fffd17 	ldw	r3,-12(fp)
 1000aa4:	e0bffe17 	ldw	r2,-8(fp)
 1000aa8:	1884703a 	and	r2,r3,r2
 1000aac:	10000a26 	beq	r2,zero,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ab0:	00800044 	movi	r2,1
 1000ab4:	e0bffc15 	stw	r2,-16(fp)
 1000ab8:	00000706 	br	1000ad8 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000abc:	e0fffd17 	ldw	r3,-12(fp)
 1000ac0:	e0bffe17 	ldw	r2,-8(fp)
 1000ac4:	1886703a 	and	r3,r3,r2
 1000ac8:	e0bffe17 	ldw	r2,-8(fp)
 1000acc:	1880021e 	bne	r3,r2,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ad0:	00800044 	movi	r2,1
 1000ad4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 1000ad8:	e0bffc17 	ldw	r2,-16(fp)
}
 1000adc:	e037883a 	mov	sp,fp
 1000ae0:	df000017 	ldw	fp,0(sp)
 1000ae4:	dec00104 	addi	sp,sp,4
 1000ae8:	f800283a 	ret

01000aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1000aec:	defffe04 	addi	sp,sp,-8
 1000af0:	df000115 	stw	fp,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000afc:	e0bfff17 	ldw	r2,-4(fp)
 1000b00:	10c00204 	addi	r3,r2,8
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1000b0c:	e0bfff17 	ldw	r2,-4(fp)
 1000b10:	00ffffc4 	movi	r3,-1
 1000b14:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b18:	e0bfff17 	ldw	r2,-4(fp)
 1000b1c:	10c00204 	addi	r3,r2,8
 1000b20:	e0bfff17 	ldw	r2,-4(fp)
 1000b24:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b28:	e0bfff17 	ldw	r2,-4(fp)
 1000b2c:	10c00204 	addi	r3,r2,8
 1000b30:	e0bfff17 	ldw	r2,-4(fp)
 1000b34:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1000b38:	e0bfff17 	ldw	r2,-4(fp)
 1000b3c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 1000b40:	0001883a 	nop
 1000b44:	e037883a 	mov	sp,fp
 1000b48:	df000017 	ldw	fp,0(sp)
 1000b4c:	dec00104 	addi	sp,sp,4
 1000b50:	f800283a 	ret

01000b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 1000b54:	defffe04 	addi	sp,sp,-8
 1000b58:	df000115 	stw	fp,4(sp)
 1000b5c:	df000104 	addi	fp,sp,4
 1000b60:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1000b64:	e0bfff17 	ldw	r2,-4(fp)
 1000b68:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 1000b6c:	0001883a 	nop
 1000b70:	e037883a 	mov	sp,fp
 1000b74:	df000017 	ldw	fp,0(sp)
 1000b78:	dec00104 	addi	sp,sp,4
 1000b7c:	f800283a 	ret

01000b80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000b80:	defffc04 	addi	sp,sp,-16
 1000b84:	df000315 	stw	fp,12(sp)
 1000b88:	df000304 	addi	fp,sp,12
 1000b8c:	e13ffe15 	stw	r4,-8(fp)
 1000b90:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 1000b94:	e0bffe17 	ldw	r2,-8(fp)
 1000b98:	10800117 	ldw	r2,4(r2)
 1000b9c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1000ba0:	e0bfff17 	ldw	r2,-4(fp)
 1000ba4:	e0fffd17 	ldw	r3,-12(fp)
 1000ba8:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1000bac:	e0bffd17 	ldw	r2,-12(fp)
 1000bb0:	10c00217 	ldw	r3,8(r2)
 1000bb4:	e0bfff17 	ldw	r2,-4(fp)
 1000bb8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1000bbc:	e0bffd17 	ldw	r2,-12(fp)
 1000bc0:	10800217 	ldw	r2,8(r2)
 1000bc4:	e0ffff17 	ldw	r3,-4(fp)
 1000bc8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 1000bcc:	e0bffd17 	ldw	r2,-12(fp)
 1000bd0:	e0ffff17 	ldw	r3,-4(fp)
 1000bd4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1000bd8:	e0bfff17 	ldw	r2,-4(fp)
 1000bdc:	e0fffe17 	ldw	r3,-8(fp)
 1000be0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000be4:	e0bffe17 	ldw	r2,-8(fp)
 1000be8:	10800017 	ldw	r2,0(r2)
 1000bec:	10c00044 	addi	r3,r2,1
 1000bf0:	e0bffe17 	ldw	r2,-8(fp)
 1000bf4:	10c00015 	stw	r3,0(r2)
}
 1000bf8:	0001883a 	nop
 1000bfc:	e037883a 	mov	sp,fp
 1000c00:	df000017 	ldw	fp,0(sp)
 1000c04:	dec00104 	addi	sp,sp,4
 1000c08:	f800283a 	ret

01000c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000c0c:	defffb04 	addi	sp,sp,-20
 1000c10:	df000415 	stw	fp,16(sp)
 1000c14:	df000404 	addi	fp,sp,16
 1000c18:	e13ffe15 	stw	r4,-8(fp)
 1000c1c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1000c20:	e0bfff17 	ldw	r2,-4(fp)
 1000c24:	10800017 	ldw	r2,0(r2)
 1000c28:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1000c2c:	e0bffd17 	ldw	r2,-12(fp)
 1000c30:	10bfffd8 	cmpnei	r2,r2,-1
 1000c34:	1000041e 	bne	r2,zero,1000c48 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1000c38:	e0bffe17 	ldw	r2,-8(fp)
 1000c3c:	10800417 	ldw	r2,16(r2)
 1000c40:	e0bffc15 	stw	r2,-16(fp)
 1000c44:	00000c06 	br	1000c78 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1000c48:	e0bffe17 	ldw	r2,-8(fp)
 1000c4c:	10800204 	addi	r2,r2,8
 1000c50:	e0bffc15 	stw	r2,-16(fp)
 1000c54:	00000306 	br	1000c64 <vListInsert+0x58>
 1000c58:	e0bffc17 	ldw	r2,-16(fp)
 1000c5c:	10800117 	ldw	r2,4(r2)
 1000c60:	e0bffc15 	stw	r2,-16(fp)
 1000c64:	e0bffc17 	ldw	r2,-16(fp)
 1000c68:	10800117 	ldw	r2,4(r2)
 1000c6c:	10800017 	ldw	r2,0(r2)
 1000c70:	e0fffd17 	ldw	r3,-12(fp)
 1000c74:	18bff82e 	bgeu	r3,r2,1000c58 <__alt_data_end+0xff000c58>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1000c78:	e0bffc17 	ldw	r2,-16(fp)
 1000c7c:	10c00117 	ldw	r3,4(r2)
 1000c80:	e0bfff17 	ldw	r2,-4(fp)
 1000c84:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1000c88:	e0bfff17 	ldw	r2,-4(fp)
 1000c8c:	10800117 	ldw	r2,4(r2)
 1000c90:	e0ffff17 	ldw	r3,-4(fp)
 1000c94:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 1000c98:	e0bfff17 	ldw	r2,-4(fp)
 1000c9c:	e0fffc17 	ldw	r3,-16(fp)
 1000ca0:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 1000ca4:	e0bffc17 	ldw	r2,-16(fp)
 1000ca8:	e0ffff17 	ldw	r3,-4(fp)
 1000cac:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1000cb0:	e0bfff17 	ldw	r2,-4(fp)
 1000cb4:	e0fffe17 	ldw	r3,-8(fp)
 1000cb8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000cbc:	e0bffe17 	ldw	r2,-8(fp)
 1000cc0:	10800017 	ldw	r2,0(r2)
 1000cc4:	10c00044 	addi	r3,r2,1
 1000cc8:	e0bffe17 	ldw	r2,-8(fp)
 1000ccc:	10c00015 	stw	r3,0(r2)
}
 1000cd0:	0001883a 	nop
 1000cd4:	e037883a 	mov	sp,fp
 1000cd8:	df000017 	ldw	fp,0(sp)
 1000cdc:	dec00104 	addi	sp,sp,4
 1000ce0:	f800283a 	ret

01000ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1000ce4:	defffd04 	addi	sp,sp,-12
 1000ce8:	df000215 	stw	fp,8(sp)
 1000cec:	df000204 	addi	fp,sp,8
 1000cf0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1000cf4:	e0bfff17 	ldw	r2,-4(fp)
 1000cf8:	10800417 	ldw	r2,16(r2)
 1000cfc:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1000d00:	e0bfff17 	ldw	r2,-4(fp)
 1000d04:	10800117 	ldw	r2,4(r2)
 1000d08:	e0ffff17 	ldw	r3,-4(fp)
 1000d0c:	18c00217 	ldw	r3,8(r3)
 1000d10:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1000d14:	e0bfff17 	ldw	r2,-4(fp)
 1000d18:	10800217 	ldw	r2,8(r2)
 1000d1c:	e0ffff17 	ldw	r3,-4(fp)
 1000d20:	18c00117 	ldw	r3,4(r3)
 1000d24:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1000d28:	e0bffe17 	ldw	r2,-8(fp)
 1000d2c:	10c00117 	ldw	r3,4(r2)
 1000d30:	e0bfff17 	ldw	r2,-4(fp)
 1000d34:	1880041e 	bne	r3,r2,1000d48 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 1000d38:	e0bfff17 	ldw	r2,-4(fp)
 1000d3c:	10c00217 	ldw	r3,8(r2)
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 1000d48:	e0bfff17 	ldw	r2,-4(fp)
 1000d4c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 1000d50:	e0bffe17 	ldw	r2,-8(fp)
 1000d54:	10800017 	ldw	r2,0(r2)
 1000d58:	10ffffc4 	addi	r3,r2,-1
 1000d5c:	e0bffe17 	ldw	r2,-8(fp)
 1000d60:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 1000d64:	e0bffe17 	ldw	r2,-8(fp)
 1000d68:	10800017 	ldw	r2,0(r2)
}
 1000d6c:	e037883a 	mov	sp,fp
 1000d70:	df000017 	ldw	fp,0(sp)
 1000d74:	dec00104 	addi	sp,sp,4
 1000d78:	f800283a 	ret

01000d7c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 1000d7c:	defffe04 	addi	sp,sp,-8
 1000d80:	df000115 	stw	fp,4(sp)
 1000d84:	df000104 	addi	fp,sp,4
 1000d88:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	16800015 	stw	gp,0(r2)
}
 1000d94:	0001883a 	nop
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 1000da8:	defff904 	addi	sp,sp,-28
 1000dac:	dfc00615 	stw	ra,24(sp)
 1000db0:	df000515 	stw	fp,20(sp)
 1000db4:	df000504 	addi	fp,sp,20
 1000db8:	e13ffd15 	stw	r4,-12(fp)
 1000dbc:	e17ffe15 	stw	r5,-8(fp)
 1000dc0:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 1000dc4:	e0bffd17 	ldw	r2,-12(fp)
 1000dc8:	10bfff04 	addi	r2,r2,-4
 1000dcc:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 1000dd0:	e0bffc04 	addi	r2,fp,-16
 1000dd4:	1009883a 	mov	r4,r2
 1000dd8:	1000d7c0 	call	1000d7c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 1000ddc:	e0fffd17 	ldw	r3,-12(fp)
 1000de0:	00b7abb4 	movhi	r2,57006
 1000de4:	10afbbc4 	addi	r2,r2,-16657
 1000de8:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 1000dec:	e0bffd17 	ldw	r2,-12(fp)
 1000df0:	10bfff04 	addi	r2,r2,-4
 1000df4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 1000df8:	e0fffb17 	ldw	r3,-20(fp)
 1000dfc:	e0bffd17 	ldw	r2,-12(fp)
 1000e00:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e04:	e0bffd17 	ldw	r2,-12(fp)
 1000e08:	10bfff04 	addi	r2,r2,-4
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 1000e10:	e0fffc17 	ldw	r3,-16(fp)
 1000e14:	e0bffd17 	ldw	r2,-12(fp)
 1000e18:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 1000e1c:	e0bffd17 	ldw	r2,-12(fp)
 1000e20:	10bff704 	addi	r2,r2,-36
 1000e24:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 1000e28:	e0fffe17 	ldw	r3,-8(fp)
 1000e2c:	e0bffd17 	ldw	r2,-12(fp)
 1000e30:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e34:	e0bffd17 	ldw	r2,-12(fp)
 1000e38:	10bfff04 	addi	r2,r2,-4
 1000e3c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 1000e40:	e0bffd17 	ldw	r2,-12(fp)
 1000e44:	00c00044 	movi	r3,1
 1000e48:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 1000e4c:	e0bffd17 	ldw	r2,-12(fp)
 1000e50:	10bff404 	addi	r2,r2,-48
 1000e54:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 1000e58:	e0ffff17 	ldw	r3,-4(fp)
 1000e5c:	e0bffd17 	ldw	r2,-12(fp)
 1000e60:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 1000e64:	e0bffd17 	ldw	r2,-12(fp)
 1000e68:	10bffb04 	addi	r2,r2,-20
 1000e6c:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 1000e70:	e0bffd17 	ldw	r2,-12(fp)
}
 1000e74:	e037883a 	mov	sp,fp
 1000e78:	dfc00117 	ldw	ra,4(sp)
 1000e7c:	df000017 	ldw	fp,0(sp)
 1000e80:	dec00204 	addi	sp,sp,8
 1000e84:	f800283a 	ret

01000e88 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 1000e88:	defffe04 	addi	sp,sp,-8
 1000e8c:	dfc00115 	stw	ra,4(sp)
 1000e90:	df000015 	stw	fp,0(sp)
 1000e94:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 1000e98:	1000ee00 	call	1000ee0 <prvSetupTimerInterrupt>
 1000e9c:	00804034 	movhi	r2,256
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 1000ea0:	10804b04 	addi	r2,r2,300
 1000ea4:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 1000ea8:	0005883a 	mov	r2,zero
}
 1000eac:	e037883a 	mov	sp,fp
 1000eb0:	dfc00117 	ldw	ra,4(sp)
 1000eb4:	df000017 	ldw	fp,0(sp)
 1000eb8:	dec00204 	addi	sp,sp,8
 1000ebc:	f800283a 	ret

01000ec0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1000ec0:	deffff04 	addi	sp,sp,-4
 1000ec4:	df000015 	stw	fp,0(sp)
 1000ec8:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 1000ecc:	0001883a 	nop
 1000ed0:	e037883a 	mov	sp,fp
 1000ed4:	df000017 	ldw	fp,0(sp)
 1000ed8:	dec00104 	addi	sp,sp,4
 1000edc:	f800283a 	ret

01000ee0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 1000ee0:	defffe04 	addi	sp,sp,-8
 1000ee4:	dfc00115 	stw	ra,4(sp)
 1000ee8:	df000015 	stw	fp,0(sp)
 1000eec:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
 1000ef0:	01804034 	movhi	r6,256
 1000ef4:	3183da04 	addi	r6,r6,3944
 1000ef8:	000b883a 	mov	r5,zero
 1000efc:	01000044 	movi	r4,1
 1000f00:	10269fc0 	call	10269fc <alt_irq_register>
 1000f04:	10bffa98 	cmpnei	r2,r2,-22
 1000f08:	1000021e 	bne	r2,zero,1000f14 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 1000f0c:	003da03a 	break	0
 1000f10:	00000c06 	br	1000f44 <prvSetupTimerInterrupt+0x64>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 1000f14:	00c00204 	movi	r3,8
 1000f18:	00800904 	movi	r2,36
 1000f1c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 1000f20:	00f0d414 	movui	r3,50000
 1000f24:	00800a04 	movi	r2,40
 1000f28:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 1000f2c:	0007883a 	mov	r3,zero
 1000f30:	00800b04 	movi	r2,44
 1000f34:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 1000f38:	00c001c4 	movi	r3,7
 1000f3c:	00800904 	movi	r2,36
 1000f40:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f44:	00ffff84 	movi	r3,-2
 1000f48:	00800804 	movi	r2,32
 1000f4c:	10c00035 	stwio	r3,0(r2)
}
 1000f50:	0001883a 	nop
 1000f54:	e037883a 	mov	sp,fp
 1000f58:	dfc00117 	ldw	ra,4(sp)
 1000f5c:	df000017 	ldw	fp,0(sp)
 1000f60:	dec00204 	addi	sp,sp,8
 1000f64:	f800283a 	ret

01000f68 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 1000f68:	defffc04 	addi	sp,sp,-16
 1000f6c:	dfc00315 	stw	ra,12(sp)
 1000f70:	df000215 	stw	fp,8(sp)
 1000f74:	df000204 	addi	fp,sp,8
 1000f78:	e13ffe15 	stw	r4,-8(fp)
 1000f7c:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 1000f80:	10045940 	call	1004594 <xTaskIncrementTick>
 1000f84:	10000126 	beq	r2,zero,1000f8c <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 1000f88:	10047440 	call	1004744 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f8c:	00ffff84 	movi	r3,-2
 1000f90:	00800804 	movi	r2,32
 1000f94:	10c00035 	stwio	r3,0(r2)
}
 1000f98:	0001883a 	nop
 1000f9c:	e037883a 	mov	sp,fp
 1000fa0:	dfc00117 	ldw	ra,4(sp)
 1000fa4:	df000017 	ldw	fp,0(sp)
 1000fa8:	dec00204 	addi	sp,sp,8
 1000fac:	f800283a 	ret

01000fb0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 1000fb0:	defff704 	addi	sp,sp,-36
 1000fb4:	dfc00815 	stw	ra,32(sp)
 1000fb8:	df000715 	stw	fp,28(sp)
 1000fbc:	df000704 	addi	fp,sp,28
 1000fc0:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 1000fc4:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 1000fc8:	100435c0 	call	100435c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 1000fcc:	d0a74017 	ldw	r2,-25344(gp)
 1000fd0:	1000031e 	bne	r2,zero,1000fe0 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 1000fd4:	10012900 	call	1001290 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 1000fd8:	00800044 	movi	r2,1
 1000fdc:	d0a74015 	stw	r2,-25344(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 1000fe0:	e0bfff17 	ldw	r2,-4(fp)
 1000fe4:	10000d26 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 1000fe8:	00800204 	movi	r2,8
 1000fec:	10bfffcc 	andi	r2,r2,65535
 1000ff0:	e0ffff17 	ldw	r3,-4(fp)
 1000ff4:	1885883a 	add	r2,r3,r2
 1000ff8:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 1000ffc:	e0bfff17 	ldw	r2,-4(fp)
 1001000:	108000cc 	andi	r2,r2,3
 1001004:	10000526 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 1001008:	e0ffff17 	ldw	r3,-4(fp)
 100100c:	00bfff04 	movi	r2,-4
 1001010:	1884703a 	and	r2,r3,r2
 1001014:	10800104 	addi	r2,r2,4
 1001018:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 100101c:	e0bfff17 	ldw	r2,-4(fp)
 1001020:	10005126 	beq	r2,zero,1001168 <pvPortMalloc+0x1b8>
 1001024:	e0ffff17 	ldw	r3,-4(fp)
 1001028:	00802034 	movhi	r2,128
 100102c:	10bffec4 	addi	r2,r2,-5
 1001030:	10c04d36 	bltu	r2,r3,1001168 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 1001034:	d0a73c04 	addi	r2,gp,-25360
 1001038:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 100103c:	d0a73c17 	ldw	r2,-25360(gp)
 1001040:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 1001044:	00000506 	br	100105c <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 1001048:	e0bff917 	ldw	r2,-28(fp)
 100104c:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 1001050:	e0bff917 	ldw	r2,-28(fp)
 1001054:	10800017 	ldw	r2,0(r2)
 1001058:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 100105c:	e0bff917 	ldw	r2,-28(fp)
 1001060:	10c00117 	ldw	r3,4(r2)
 1001064:	e0bfff17 	ldw	r2,-4(fp)
 1001068:	1880032e 	bgeu	r3,r2,1001078 <pvPortMalloc+0xc8>
 100106c:	e0bff917 	ldw	r2,-28(fp)
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	103ff41e 	bne	r2,zero,1001048 <__alt_data_end+0xff001048>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 1001078:	e0fff917 	ldw	r3,-28(fp)
 100107c:	d0a73e04 	addi	r2,gp,-25352
 1001080:	18803926 	beq	r3,r2,1001168 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 1001084:	e0bffa17 	ldw	r2,-24(fp)
 1001088:	10c00017 	ldw	r3,0(r2)
 100108c:	00800204 	movi	r2,8
 1001090:	10bfffcc 	andi	r2,r2,65535
 1001094:	1885883a 	add	r2,r3,r2
 1001098:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 100109c:	e0bff917 	ldw	r2,-28(fp)
 10010a0:	10c00017 	ldw	r3,0(r2)
 10010a4:	e0bffa17 	ldw	r2,-24(fp)
 10010a8:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 10010ac:	e0bff917 	ldw	r2,-28(fp)
 10010b0:	10c00117 	ldw	r3,4(r2)
 10010b4:	e0bfff17 	ldw	r2,-4(fp)
 10010b8:	1887c83a 	sub	r3,r3,r2
 10010bc:	00800204 	movi	r2,8
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1085883a 	add	r2,r2,r2
 10010c8:	10c0222e 	bgeu	r2,r3,1001154 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 10010cc:	e0fff917 	ldw	r3,-28(fp)
 10010d0:	e0bfff17 	ldw	r2,-4(fp)
 10010d4:	1885883a 	add	r2,r3,r2
 10010d8:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 10010dc:	e0bff917 	ldw	r2,-28(fp)
 10010e0:	10c00117 	ldw	r3,4(r2)
 10010e4:	e0bfff17 	ldw	r2,-4(fp)
 10010e8:	1887c83a 	sub	r3,r3,r2
 10010ec:	e0bffd17 	ldw	r2,-12(fp)
 10010f0:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 10010f4:	e0bff917 	ldw	r2,-28(fp)
 10010f8:	e0ffff17 	ldw	r3,-4(fp)
 10010fc:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 1001100:	e0bffd17 	ldw	r2,-12(fp)
 1001104:	10800117 	ldw	r2,4(r2)
 1001108:	e0bffe15 	stw	r2,-8(fp)
 100110c:	d0a73c04 	addi	r2,gp,-25360
 1001110:	e0bffc15 	stw	r2,-16(fp)
 1001114:	00000306 	br	1001124 <pvPortMalloc+0x174>
 1001118:	e0bffc17 	ldw	r2,-16(fp)
 100111c:	10800017 	ldw	r2,0(r2)
 1001120:	e0bffc15 	stw	r2,-16(fp)
 1001124:	e0bffc17 	ldw	r2,-16(fp)
 1001128:	10800017 	ldw	r2,0(r2)
 100112c:	10c00117 	ldw	r3,4(r2)
 1001130:	e0bffe17 	ldw	r2,-8(fp)
 1001134:	18bff836 	bltu	r3,r2,1001118 <__alt_data_end+0xff001118>
 1001138:	e0bffc17 	ldw	r2,-16(fp)
 100113c:	10c00017 	ldw	r3,0(r2)
 1001140:	e0bffd17 	ldw	r2,-12(fp)
 1001144:	10c00015 	stw	r3,0(r2)
 1001148:	e0bffc17 	ldw	r2,-16(fp)
 100114c:	e0fffd17 	ldw	r3,-12(fp)
 1001150:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 1001154:	d0e00117 	ldw	r3,-32764(gp)
 1001158:	e0bff917 	ldw	r2,-28(fp)
 100115c:	10800117 	ldw	r2,4(r2)
 1001160:	1885c83a 	sub	r2,r3,r2
 1001164:	d0a00115 	stw	r2,-32764(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1001168:	10043880 	call	1004388 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 100116c:	e0bffb17 	ldw	r2,-20(fp)
}
 1001170:	e037883a 	mov	sp,fp
 1001174:	dfc00117 	ldw	ra,4(sp)
 1001178:	df000017 	ldw	fp,0(sp)
 100117c:	dec00204 	addi	sp,sp,8
 1001180:	f800283a 	ret

01001184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1001184:	defff904 	addi	sp,sp,-28
 1001188:	dfc00615 	stw	ra,24(sp)
 100118c:	df000515 	stw	fp,20(sp)
 1001190:	df000504 	addi	fp,sp,20
 1001194:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 1001198:	e0bfff17 	ldw	r2,-4(fp)
 100119c:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10002426 	beq	r2,zero,1001238 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 10011a8:	00800204 	movi	r2,8
 10011ac:	10bfffcc 	andi	r2,r2,65535
 10011b0:	0085c83a 	sub	r2,zero,r2
 10011b4:	e0fffc17 	ldw	r3,-16(fp)
 10011b8:	1885883a 	add	r2,r3,r2
 10011bc:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 10011c0:	e0bffc17 	ldw	r2,-16(fp)
 10011c4:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 10011c8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 10011cc:	e0bffd17 	ldw	r2,-12(fp)
 10011d0:	10800117 	ldw	r2,4(r2)
 10011d4:	e0bffe15 	stw	r2,-8(fp)
 10011d8:	d0a73c04 	addi	r2,gp,-25360
 10011dc:	e0bffb15 	stw	r2,-20(fp)
 10011e0:	00000306 	br	10011f0 <vPortFree+0x6c>
 10011e4:	e0bffb17 	ldw	r2,-20(fp)
 10011e8:	10800017 	ldw	r2,0(r2)
 10011ec:	e0bffb15 	stw	r2,-20(fp)
 10011f0:	e0bffb17 	ldw	r2,-20(fp)
 10011f4:	10800017 	ldw	r2,0(r2)
 10011f8:	10c00117 	ldw	r3,4(r2)
 10011fc:	e0bffe17 	ldw	r2,-8(fp)
 1001200:	18bff836 	bltu	r3,r2,10011e4 <__alt_data_end+0xff0011e4>
 1001204:	e0bffb17 	ldw	r2,-20(fp)
 1001208:	10c00017 	ldw	r3,0(r2)
 100120c:	e0bffd17 	ldw	r2,-12(fp)
 1001210:	10c00015 	stw	r3,0(r2)
 1001214:	e0bffb17 	ldw	r2,-20(fp)
 1001218:	e0fffd17 	ldw	r3,-12(fp)
 100121c:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 1001220:	e0bffd17 	ldw	r2,-12(fp)
 1001224:	10c00117 	ldw	r3,4(r2)
 1001228:	d0a00117 	ldw	r2,-32764(gp)
 100122c:	1885883a 	add	r2,r3,r2
 1001230:	d0a00115 	stw	r2,-32764(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 1001234:	10043880 	call	1004388 <xTaskResumeAll>
	}
}
 1001238:	0001883a 	nop
 100123c:	e037883a 	mov	sp,fp
 1001240:	dfc00117 	ldw	ra,4(sp)
 1001244:	df000017 	ldw	fp,0(sp)
 1001248:	dec00204 	addi	sp,sp,8
 100124c:	f800283a 	ret

01001250 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 1001250:	deffff04 	addi	sp,sp,-4
 1001254:	df000015 	stw	fp,0(sp)
 1001258:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 100125c:	d0a00117 	ldw	r2,-32764(gp)
}
 1001260:	e037883a 	mov	sp,fp
 1001264:	df000017 	ldw	fp,0(sp)
 1001268:	dec00104 	addi	sp,sp,4
 100126c:	f800283a 	ret

01001270 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 1001270:	deffff04 	addi	sp,sp,-4
 1001274:	df000015 	stw	fp,0(sp)
 1001278:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 100127c:	0001883a 	nop
 1001280:	e037883a 	mov	sp,fp
 1001284:	df000017 	ldw	fp,0(sp)
 1001288:	dec00104 	addi	sp,sp,4
 100128c:	f800283a 	ret

01001290 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 1001290:	defffd04 	addi	sp,sp,-12
 1001294:	df000215 	stw	fp,8(sp)
 1001298:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 100129c:	008040f4 	movhi	r2,259
 10012a0:	10ba3504 	addi	r2,r2,-5932
 10012a4:	00ffff04 	movi	r3,-4
 10012a8:	10c4703a 	and	r2,r2,r3
 10012ac:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 10012b0:	e0bffe17 	ldw	r2,-8(fp)
 10012b4:	d0a73c15 	stw	r2,-25360(gp)
	xStart.xBlockSize = ( size_t ) 0;
 10012b8:	d0273d15 	stw	zero,-25356(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 10012bc:	00802034 	movhi	r2,128
 10012c0:	10bfff04 	addi	r2,r2,-4
 10012c4:	d0a73f15 	stw	r2,-25348(gp)
	xEnd.pxNextFreeBlock = NULL;
 10012c8:	d0273e15 	stw	zero,-25352(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 10012d4:	e0ffff17 	ldw	r3,-4(fp)
 10012d8:	00802034 	movhi	r2,128
 10012dc:	10bfff04 	addi	r2,r2,-4
 10012e0:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 10012e4:	e0bfff17 	ldw	r2,-4(fp)
 10012e8:	d0e73e04 	addi	r3,gp,-25352
 10012ec:	10c00015 	stw	r3,0(r2)
}
 10012f0:	0001883a 	nop
 10012f4:	e037883a 	mov	sp,fp
 10012f8:	df000017 	ldw	fp,0(sp)
 10012fc:	dec00104 	addi	sp,sp,4
 1001300:	f800283a 	ret

01001304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 1001304:	defffb04 	addi	sp,sp,-20
 1001308:	dfc00415 	stw	ra,16(sp)
 100130c:	df000315 	stw	fp,12(sp)
 1001310:	df000304 	addi	fp,sp,12
 1001314:	e13ffe15 	stw	r4,-8(fp)
 1001318:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 100131c:	e0bffe17 	ldw	r2,-8(fp)
 1001320:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1001324:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001328:	e0bffd17 	ldw	r2,-12(fp)
 100132c:	10c00017 	ldw	r3,0(r2)
 1001330:	e0bffd17 	ldw	r2,-12(fp)
 1001334:	11000f17 	ldw	r4,60(r2)
 1001338:	e0bffd17 	ldw	r2,-12(fp)
 100133c:	10801017 	ldw	r2,64(r2)
 1001340:	2085383a 	mul	r2,r4,r2
 1001344:	1887883a 	add	r3,r3,r2
 1001348:	e0bffd17 	ldw	r2,-12(fp)
 100134c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1001350:	e0bffd17 	ldw	r2,-12(fp)
 1001354:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 1001358:	e0bffd17 	ldw	r2,-12(fp)
 100135c:	10c00017 	ldw	r3,0(r2)
 1001360:	e0bffd17 	ldw	r2,-12(fp)
 1001364:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001368:	e0bffd17 	ldw	r2,-12(fp)
 100136c:	10c00017 	ldw	r3,0(r2)
 1001370:	e0bffd17 	ldw	r2,-12(fp)
 1001374:	10800f17 	ldw	r2,60(r2)
 1001378:	113fffc4 	addi	r4,r2,-1
 100137c:	e0bffd17 	ldw	r2,-12(fp)
 1001380:	10801017 	ldw	r2,64(r2)
 1001384:	2085383a 	mul	r2,r4,r2
 1001388:	1887883a 	add	r3,r3,r2
 100138c:	e0bffd17 	ldw	r2,-12(fp)
 1001390:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 1001394:	e0bffd17 	ldw	r2,-12(fp)
 1001398:	00ffffc4 	movi	r3,-1
 100139c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 10013a0:	e0bffd17 	ldw	r2,-12(fp)
 10013a4:	00ffffc4 	movi	r3,-1
 10013a8:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 10013ac:	e0bfff17 	ldw	r2,-4(fp)
 10013b0:	10000a1e 	bne	r2,zero,10013dc <xQueueGenericReset+0xd8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10013b4:	e0bffd17 	ldw	r2,-12(fp)
 10013b8:	10800417 	ldw	r2,16(r2)
 10013bc:	10000f26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10013c0:	e0bffd17 	ldw	r2,-12(fp)
 10013c4:	10800404 	addi	r2,r2,16
 10013c8:	1009883a 	mov	r4,r2
 10013cc:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10013d0:	10000a26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
 10013d4:	003b683a 	trap	0
 10013d8:	00000806 	br	10013fc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 10013dc:	e0bffd17 	ldw	r2,-12(fp)
 10013e0:	10800404 	addi	r2,r2,16
 10013e4:	1009883a 	mov	r4,r2
 10013e8:	1000aec0 	call	1000aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 10013ec:	e0bffd17 	ldw	r2,-12(fp)
 10013f0:	10800904 	addi	r2,r2,36
 10013f4:	1009883a 	mov	r4,r2
 10013f8:	1000aec0 	call	1000aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 10013fc:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 1001400:	00800044 	movi	r2,1
}
 1001404:	e037883a 	mov	sp,fp
 1001408:	dfc00117 	ldw	ra,4(sp)
 100140c:	df000017 	ldw	fp,0(sp)
 1001410:	dec00204 	addi	sp,sp,8
 1001414:	f800283a 	ret

01001418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 1001418:	defff704 	addi	sp,sp,-36
 100141c:	dfc00815 	stw	ra,32(sp)
 1001420:	df000715 	stw	fp,28(sp)
 1001424:	df000704 	addi	fp,sp,28
 1001428:	e13ffd15 	stw	r4,-12(fp)
 100142c:	e17ffe15 	stw	r5,-8(fp)
 1001430:	3005883a 	mov	r2,r6
 1001434:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 1001438:	e0bffe17 	ldw	r2,-8(fp)
 100143c:	1000021e 	bne	r2,zero,1001448 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 1001440:	e03ffa15 	stw	zero,-24(fp)
 1001444:	00000406 	br	1001458 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1001448:	e0fffd17 	ldw	r3,-12(fp)
 100144c:	e0bffe17 	ldw	r2,-8(fp)
 1001450:	1885383a 	mul	r2,r3,r2
 1001454:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 1001458:	e0bffa17 	ldw	r2,-24(fp)
 100145c:	10801204 	addi	r2,r2,72
 1001460:	1009883a 	mov	r4,r2
 1001464:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1001468:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 100146c:	e0bffb17 	ldw	r2,-20(fp)
 1001470:	10000d26 	beq	r2,zero,10014a8 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 1001474:	e0bffb17 	ldw	r2,-20(fp)
 1001478:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 100147c:	e0bffc17 	ldw	r2,-16(fp)
 1001480:	10801204 	addi	r2,r2,72
 1001484:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 1001488:	e0ffff03 	ldbu	r3,-4(fp)
 100148c:	e0bffb17 	ldw	r2,-20(fp)
 1001490:	d8800015 	stw	r2,0(sp)
 1001494:	180f883a 	mov	r7,r3
 1001498:	e1bffc17 	ldw	r6,-16(fp)
 100149c:	e17ffe17 	ldw	r5,-8(fp)
 10014a0:	e13ffd17 	ldw	r4,-12(fp)
 10014a4:	10014c00 	call	10014c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 10014a8:	e0bffb17 	ldw	r2,-20(fp)
	}
 10014ac:	e037883a 	mov	sp,fp
 10014b0:	dfc00117 	ldw	ra,4(sp)
 10014b4:	df000017 	ldw	fp,0(sp)
 10014b8:	dec00204 	addi	sp,sp,8
 10014bc:	f800283a 	ret

010014c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 10014c0:	defffa04 	addi	sp,sp,-24
 10014c4:	dfc00515 	stw	ra,20(sp)
 10014c8:	df000415 	stw	fp,16(sp)
 10014cc:	df000404 	addi	fp,sp,16
 10014d0:	e13ffc15 	stw	r4,-16(fp)
 10014d4:	e17ffd15 	stw	r5,-12(fp)
 10014d8:	e1bffe15 	stw	r6,-8(fp)
 10014dc:	3805883a 	mov	r2,r7
 10014e0:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 10014e4:	e0bffd17 	ldw	r2,-12(fp)
 10014e8:	1000041e 	bne	r2,zero,10014fc <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 10014ec:	e0800217 	ldw	r2,8(fp)
 10014f0:	e0c00217 	ldw	r3,8(fp)
 10014f4:	10c00015 	stw	r3,0(r2)
 10014f8:	00000306 	br	1001508 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 10014fc:	e0800217 	ldw	r2,8(fp)
 1001500:	e0fffe17 	ldw	r3,-8(fp)
 1001504:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 1001508:	e0800217 	ldw	r2,8(fp)
 100150c:	e0fffc17 	ldw	r3,-16(fp)
 1001510:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 1001514:	e0800217 	ldw	r2,8(fp)
 1001518:	e0fffd17 	ldw	r3,-12(fp)
 100151c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1001520:	01400044 	movi	r5,1
 1001524:	e1000217 	ldw	r4,8(fp)
 1001528:	10013040 	call	1001304 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 100152c:	0001883a 	nop
 1001530:	e037883a 	mov	sp,fp
 1001534:	dfc00117 	ldw	ra,4(sp)
 1001538:	df000017 	ldw	fp,0(sp)
 100153c:	dec00204 	addi	sp,sp,8
 1001540:	f800283a 	ret

01001544 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 1001544:	defffd04 	addi	sp,sp,-12
 1001548:	dfc00215 	stw	ra,8(sp)
 100154c:	df000115 	stw	fp,4(sp)
 1001550:	df000104 	addi	fp,sp,4
 1001554:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	10000b26 	beq	r2,zero,100158c <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 1001560:	e0bfff17 	ldw	r2,-4(fp)
 1001564:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1001568:	e0bfff17 	ldw	r2,-4(fp)
 100156c:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 1001570:	e0bfff17 	ldw	r2,-4(fp)
 1001574:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 1001578:	000f883a 	mov	r7,zero
 100157c:	000d883a 	mov	r6,zero
 1001580:	000b883a 	mov	r5,zero
 1001584:	e13fff17 	ldw	r4,-4(fp)
 1001588:	10017840 	call	1001784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 100158c:	0001883a 	nop
 1001590:	e037883a 	mov	sp,fp
 1001594:	dfc00117 	ldw	ra,4(sp)
 1001598:	df000017 	ldw	fp,0(sp)
 100159c:	dec00204 	addi	sp,sp,8
 10015a0:	f800283a 	ret

010015a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 10015a4:	defffa04 	addi	sp,sp,-24
 10015a8:	dfc00515 	stw	ra,20(sp)
 10015ac:	df000415 	stw	fp,16(sp)
 10015b0:	df000404 	addi	fp,sp,16
 10015b4:	2005883a 	mov	r2,r4
 10015b8:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 10015bc:	00800044 	movi	r2,1
 10015c0:	e0bffc15 	stw	r2,-16(fp)
 10015c4:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 10015c8:	e0bfff03 	ldbu	r2,-4(fp)
 10015cc:	100d883a 	mov	r6,r2
 10015d0:	e17ffd17 	ldw	r5,-12(fp)
 10015d4:	e13ffc17 	ldw	r4,-16(fp)
 10015d8:	10014180 	call	1001418 <xQueueGenericCreate>
 10015dc:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 10015e0:	e13ffe17 	ldw	r4,-8(fp)
 10015e4:	10015440 	call	1001544 <prvInitialiseMutex>

		return xNewQueue;
 10015e8:	e0bffe17 	ldw	r2,-8(fp)
	}
 10015ec:	e037883a 	mov	sp,fp
 10015f0:	dfc00117 	ldw	ra,4(sp)
 10015f4:	df000017 	ldw	fp,0(sp)
 10015f8:	dec00204 	addi	sp,sp,8
 10015fc:	f800283a 	ret

01001600 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 1001600:	defffa04 	addi	sp,sp,-24
 1001604:	dfc00515 	stw	ra,20(sp)
 1001608:	df000415 	stw	fp,16(sp)
 100160c:	dc000315 	stw	r16,12(sp)
 1001610:	df000404 	addi	fp,sp,16
 1001614:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1001618:	e0bffe17 	ldw	r2,-8(fp)
 100161c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 1001620:	e0bffd17 	ldw	r2,-12(fp)
 1001624:	14000217 	ldw	r16,8(r2)
 1001628:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 100162c:	8080101e 	bne	r16,r2,1001670 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 1001630:	e0bffd17 	ldw	r2,-12(fp)
 1001634:	10800317 	ldw	r2,12(r2)
 1001638:	10ffffc4 	addi	r3,r2,-1
 100163c:	e0bffd17 	ldw	r2,-12(fp)
 1001640:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 1001644:	e0bffd17 	ldw	r2,-12(fp)
 1001648:	10800317 	ldw	r2,12(r2)
 100164c:	1000051e 	bne	r2,zero,1001664 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 1001650:	000f883a 	mov	r7,zero
 1001654:	000d883a 	mov	r6,zero
 1001658:	000b883a 	mov	r5,zero
 100165c:	e13ffd17 	ldw	r4,-12(fp)
 1001660:	10017840 	call	1001784 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 1001664:	00800044 	movi	r2,1
 1001668:	e0bffc15 	stw	r2,-16(fp)
 100166c:	00000106 	br	1001674 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 1001670:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 1001674:	e0bffc17 	ldw	r2,-16(fp)
	}
 1001678:	e6ffff04 	addi	sp,fp,-4
 100167c:	dfc00217 	ldw	ra,8(sp)
 1001680:	df000117 	ldw	fp,4(sp)
 1001684:	dc000017 	ldw	r16,0(sp)
 1001688:	dec00304 	addi	sp,sp,12
 100168c:	f800283a 	ret

01001690 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 1001690:	defff904 	addi	sp,sp,-28
 1001694:	dfc00615 	stw	ra,24(sp)
 1001698:	df000515 	stw	fp,20(sp)
 100169c:	dc000415 	stw	r16,16(sp)
 10016a0:	df000504 	addi	fp,sp,20
 10016a4:	e13ffd15 	stw	r4,-12(fp)
 10016a8:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 10016ac:	e0bffd17 	ldw	r2,-12(fp)
 10016b0:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 10016b4:	e0bffc17 	ldw	r2,-16(fp)
 10016b8:	14000217 	ldw	r16,8(r2)
 10016bc:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 10016c0:	8080081e 	bne	r16,r2,10016e4 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016c4:	e0bffc17 	ldw	r2,-16(fp)
 10016c8:	10800317 	ldw	r2,12(r2)
 10016cc:	10c00044 	addi	r3,r2,1
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 10016d8:	00800044 	movi	r2,1
 10016dc:	e0bffb15 	stw	r2,-20(fp)
 10016e0:	00000b06 	br	1001710 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 10016e4:	e17ffe17 	ldw	r5,-8(fp)
 10016e8:	e13ffc17 	ldw	r4,-16(fp)
 10016ec:	1001ca40 	call	1001ca4 <xQueueSemaphoreTake>
 10016f0:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 10016f4:	e0bffb17 	ldw	r2,-20(fp)
 10016f8:	10000526 	beq	r2,zero,1001710 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016fc:	e0bffc17 	ldw	r2,-16(fp)
 1001700:	10800317 	ldw	r2,12(r2)
 1001704:	10c00044 	addi	r3,r2,1
 1001708:	e0bffc17 	ldw	r2,-16(fp)
 100170c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 1001710:	e0bffb17 	ldw	r2,-20(fp)
	}
 1001714:	e6ffff04 	addi	sp,fp,-4
 1001718:	dfc00217 	ldw	ra,8(sp)
 100171c:	df000117 	ldw	fp,4(sp)
 1001720:	dc000017 	ldw	r16,0(sp)
 1001724:	dec00304 	addi	sp,sp,12
 1001728:	f800283a 	ret

0100172c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 100172c:	defffb04 	addi	sp,sp,-20
 1001730:	dfc00415 	stw	ra,16(sp)
 1001734:	df000315 	stw	fp,12(sp)
 1001738:	df000304 	addi	fp,sp,12
 100173c:	e13ffe15 	stw	r4,-8(fp)
 1001740:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 1001744:	01800084 	movi	r6,2
 1001748:	000b883a 	mov	r5,zero
 100174c:	e13ffe17 	ldw	r4,-8(fp)
 1001750:	10014180 	call	1001418 <xQueueGenericCreate>
 1001754:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 1001758:	e0bffd17 	ldw	r2,-12(fp)
 100175c:	10000326 	beq	r2,zero,100176c <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1001760:	e0bffd17 	ldw	r2,-12(fp)
 1001764:	e0ffff17 	ldw	r3,-4(fp)
 1001768:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 100176c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1001770:	e037883a 	mov	sp,fp
 1001774:	dfc00117 	ldw	ra,4(sp)
 1001778:	df000017 	ldw	fp,0(sp)
 100177c:	dec00204 	addi	sp,sp,8
 1001780:	f800283a 	ret

01001784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 1001784:	defff504 	addi	sp,sp,-44
 1001788:	dfc00a15 	stw	ra,40(sp)
 100178c:	df000915 	stw	fp,36(sp)
 1001790:	df000904 	addi	fp,sp,36
 1001794:	e13ffc15 	stw	r4,-16(fp)
 1001798:	e17ffd15 	stw	r5,-12(fp)
 100179c:	e1bffe15 	stw	r6,-8(fp)
 10017a0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 10017a4:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 10017a8:	e0bffc17 	ldw	r2,-16(fp)
 10017ac:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 10017b0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 10017b4:	e0bff817 	ldw	r2,-32(fp)
 10017b8:	10c00e17 	ldw	r3,56(r2)
 10017bc:	e0bff817 	ldw	r2,-32(fp)
 10017c0:	10800f17 	ldw	r2,60(r2)
 10017c4:	18800336 	bltu	r3,r2,10017d4 <xQueueGenericSend+0x50>
 10017c8:	e0bfff17 	ldw	r2,-4(fp)
 10017cc:	10800098 	cmpnei	r2,r2,2
 10017d0:	1000151e 	bne	r2,zero,1001828 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 10017d4:	e1bfff17 	ldw	r6,-4(fp)
 10017d8:	e17ffd17 	ldw	r5,-12(fp)
 10017dc:	e13ff817 	ldw	r4,-32(fp)
 10017e0:	100231c0 	call	100231c <prvCopyDataToQueue>
 10017e4:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10017e8:	e0bff817 	ldw	r2,-32(fp)
 10017ec:	10800917 	ldw	r2,36(r2)
 10017f0:	10000726 	beq	r2,zero,1001810 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10017f4:	e0bff817 	ldw	r2,-32(fp)
 10017f8:	10800904 	addi	r2,r2,36
 10017fc:	1009883a 	mov	r4,r2
 1001800:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001804:	10000526 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 1001808:	003b683a 	trap	0
 100180c:	00000306 	br	100181c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 1001810:	e0bff917 	ldw	r2,-28(fp)
 1001814:	10000126 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 1001818:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 100181c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001820:	00800044 	movi	r2,1
 1001824:	00003f06 	br	1001924 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001828:	e0bffe17 	ldw	r2,-8(fp)
 100182c:	1000031e 	bne	r2,zero,100183c <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001830:	10052c40 	call	10052c4 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1001834:	0005883a 	mov	r2,zero
 1001838:	00003a06 	br	1001924 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 100183c:	e0bff717 	ldw	r2,-36(fp)
 1001840:	1000051e 	bne	r2,zero,1001858 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001844:	e0bffa04 	addi	r2,fp,-24
 1001848:	1009883a 	mov	r4,r2
 100184c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001850:	00800044 	movi	r2,1
 1001854:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001858:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 100185c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001860:	10052700 	call	1005270 <vTaskEnterCritical>
 1001864:	e0bff817 	ldw	r2,-32(fp)
 1001868:	10801103 	ldbu	r2,68(r2)
 100186c:	10803fcc 	andi	r2,r2,255
 1001870:	1080201c 	xori	r2,r2,128
 1001874:	10bfe004 	addi	r2,r2,-128
 1001878:	10bfffd8 	cmpnei	r2,r2,-1
 100187c:	1000021e 	bne	r2,zero,1001888 <xQueueGenericSend+0x104>
 1001880:	e0bff817 	ldw	r2,-32(fp)
 1001884:	10001105 	stb	zero,68(r2)
 1001888:	e0bff817 	ldw	r2,-32(fp)
 100188c:	10801143 	ldbu	r2,69(r2)
 1001890:	10803fcc 	andi	r2,r2,255
 1001894:	1080201c 	xori	r2,r2,128
 1001898:	10bfe004 	addi	r2,r2,-128
 100189c:	10bfffd8 	cmpnei	r2,r2,-1
 10018a0:	1000021e 	bne	r2,zero,10018ac <xQueueGenericSend+0x128>
 10018a4:	e0bff817 	ldw	r2,-32(fp)
 10018a8:	10001145 	stb	zero,69(r2)
 10018ac:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 10018b0:	e0fffe04 	addi	r3,fp,-8
 10018b4:	e0bffa04 	addi	r2,fp,-24
 10018b8:	180b883a 	mov	r5,r3
 10018bc:	1009883a 	mov	r4,r2
 10018c0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 10018c4:	1000131e 	bne	r2,zero,1001914 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 10018c8:	e13ff817 	ldw	r4,-32(fp)
 10018cc:	10026d00 	call	10026d0 <prvIsQueueFull>
 10018d0:	10000c26 	beq	r2,zero,1001904 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 10018d4:	e0bff817 	ldw	r2,-32(fp)
 10018d8:	10800404 	addi	r2,r2,16
 10018dc:	e0fffe17 	ldw	r3,-8(fp)
 10018e0:	180b883a 	mov	r5,r3
 10018e4:	1009883a 	mov	r4,r2
 10018e8:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 10018ec:	e13ff817 	ldw	r4,-32(fp)
 10018f0:	10025440 	call	1002544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 10018f4:	10043880 	call	1004388 <xTaskResumeAll>
 10018f8:	103fad1e 	bne	r2,zero,10017b0 <__alt_data_end+0xff0017b0>
				{
					portYIELD_WITHIN_API();
 10018fc:	003b683a 	trap	0
 1001900:	003fab06 	br	10017b0 <__alt_data_end+0xff0017b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1001904:	e13ff817 	ldw	r4,-32(fp)
 1001908:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100190c:	10043880 	call	1004388 <xTaskResumeAll>
 1001910:	003fa706 	br	10017b0 <__alt_data_end+0xff0017b0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 1001914:	e13ff817 	ldw	r4,-32(fp)
 1001918:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100191c:	10043880 	call	1004388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 1001920:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 1001924:	e037883a 	mov	sp,fp
 1001928:	dfc00117 	ldw	ra,4(sp)
 100192c:	df000017 	ldw	fp,0(sp)
 1001930:	dec00204 	addi	sp,sp,8
 1001934:	f800283a 	ret

01001938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 1001938:	defff604 	addi	sp,sp,-40
 100193c:	dfc00915 	stw	ra,36(sp)
 1001940:	df000815 	stw	fp,32(sp)
 1001944:	df000804 	addi	fp,sp,32
 1001948:	e13ffc15 	stw	r4,-16(fp)
 100194c:	e17ffd15 	stw	r5,-12(fp)
 1001950:	e1bffe15 	stw	r6,-8(fp)
 1001954:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001958:	e0bffc17 	ldw	r2,-16(fp)
 100195c:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001960:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1001964:	e0bff917 	ldw	r2,-28(fp)
 1001968:	10c00e17 	ldw	r3,56(r2)
 100196c:	e0bff917 	ldw	r2,-28(fp)
 1001970:	10800f17 	ldw	r2,60(r2)
 1001974:	18800336 	bltu	r3,r2,1001984 <xQueueGenericSendFromISR+0x4c>
 1001978:	e0bfff17 	ldw	r2,-4(fp)
 100197c:	10800098 	cmpnei	r2,r2,2
 1001980:	1000201e 	bne	r2,zero,1001a04 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001984:	e0bff917 	ldw	r2,-28(fp)
 1001988:	10801143 	ldbu	r2,69(r2)
 100198c:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1001990:	e1bfff17 	ldw	r6,-4(fp)
 1001994:	e17ffd17 	ldw	r5,-12(fp)
 1001998:	e13ff917 	ldw	r4,-28(fp)
 100199c:	100231c0 	call	100231c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 10019a0:	e0bffb07 	ldb	r2,-20(fp)
 10019a4:	10bfffd8 	cmpnei	r2,r2,-1
 10019a8:	10000e1e 	bne	r2,zero,10019e4 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10019ac:	e0bff917 	ldw	r2,-28(fp)
 10019b0:	10800917 	ldw	r2,36(r2)
 10019b4:	10001026 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10019b8:	e0bff917 	ldw	r2,-28(fp)
 10019bc:	10800904 	addi	r2,r2,36
 10019c0:	1009883a 	mov	r4,r2
 10019c4:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10019c8:	10000b26 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 10019cc:	e0bffe17 	ldw	r2,-8(fp)
 10019d0:	10000926 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 10019d4:	e0bffe17 	ldw	r2,-8(fp)
 10019d8:	00c00044 	movi	r3,1
 10019dc:	10c00015 	stw	r3,0(r2)
 10019e0:	00000506 	br	10019f8 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 10019e4:	e0bffb03 	ldbu	r2,-20(fp)
 10019e8:	10800044 	addi	r2,r2,1
 10019ec:	1007883a 	mov	r3,r2
 10019f0:	e0bff917 	ldw	r2,-28(fp)
 10019f4:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 10019f8:	00800044 	movi	r2,1
 10019fc:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 1001a00:	00000106 	br	1001a08 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001a04:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001a08:	e0bff817 	ldw	r2,-32(fp)
}
 1001a0c:	e037883a 	mov	sp,fp
 1001a10:	dfc00117 	ldw	ra,4(sp)
 1001a14:	df000017 	ldw	fp,0(sp)
 1001a18:	dec00204 	addi	sp,sp,8
 1001a1c:	f800283a 	ret

01001a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1001a20:	defff704 	addi	sp,sp,-36
 1001a24:	dfc00815 	stw	ra,32(sp)
 1001a28:	df000715 	stw	fp,28(sp)
 1001a2c:	df000704 	addi	fp,sp,28
 1001a30:	e13ffe15 	stw	r4,-8(fp)
 1001a34:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001a38:	e0bffe17 	ldw	r2,-8(fp)
 1001a3c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001a40:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001a44:	e0bffa17 	ldw	r2,-24(fp)
 1001a48:	10800e17 	ldw	r2,56(r2)
 1001a4c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 1001a50:	e0bffa17 	ldw	r2,-24(fp)
 1001a54:	10800f17 	ldw	r2,60(r2)
 1001a58:	e0fffc17 	ldw	r3,-16(fp)
 1001a5c:	1880202e 	bgeu	r3,r2,1001ae0 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001a60:	e0bffa17 	ldw	r2,-24(fp)
 1001a64:	10801143 	ldbu	r2,69(r2)
 1001a68:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1001a6c:	e0bffc17 	ldw	r2,-16(fp)
 1001a70:	10c00044 	addi	r3,r2,1
 1001a74:	e0bffa17 	ldw	r2,-24(fp)
 1001a78:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 1001a7c:	e0bffd07 	ldb	r2,-12(fp)
 1001a80:	10bfffd8 	cmpnei	r2,r2,-1
 1001a84:	10000e1e 	bne	r2,zero,1001ac0 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001a88:	e0bffa17 	ldw	r2,-24(fp)
 1001a8c:	10800917 	ldw	r2,36(r2)
 1001a90:	10001026 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001a94:	e0bffa17 	ldw	r2,-24(fp)
 1001a98:	10800904 	addi	r2,r2,36
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001aa4:	10000b26 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 1001aa8:	e0bfff17 	ldw	r2,-4(fp)
 1001aac:	10000926 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 1001ab0:	e0bfff17 	ldw	r2,-4(fp)
 1001ab4:	00c00044 	movi	r3,1
 1001ab8:	10c00015 	stw	r3,0(r2)
 1001abc:	00000506 	br	1001ad4 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1001ac0:	e0bffd03 	ldbu	r2,-12(fp)
 1001ac4:	10800044 	addi	r2,r2,1
 1001ac8:	1007883a 	mov	r3,r2
 1001acc:	e0bffa17 	ldw	r2,-24(fp)
 1001ad0:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 1001ad4:	00800044 	movi	r2,1
 1001ad8:	e0bff915 	stw	r2,-28(fp)
 1001adc:	00000106 	br	1001ae4 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001ae0:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001ae4:	e0bff917 	ldw	r2,-28(fp)
}
 1001ae8:	e037883a 	mov	sp,fp
 1001aec:	dfc00117 	ldw	ra,4(sp)
 1001af0:	df000017 	ldw	fp,0(sp)
 1001af4:	dec00204 	addi	sp,sp,8
 1001af8:	f800283a 	ret

01001afc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001afc:	defff604 	addi	sp,sp,-40
 1001b00:	dfc00915 	stw	ra,36(sp)
 1001b04:	df000815 	stw	fp,32(sp)
 1001b08:	df000804 	addi	fp,sp,32
 1001b0c:	e13ffd15 	stw	r4,-12(fp)
 1001b10:	e17ffe15 	stw	r5,-8(fp)
 1001b14:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001b18:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001b1c:	e0bffd17 	ldw	r2,-12(fp)
 1001b20:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001b24:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001b28:	e0bff917 	ldw	r2,-28(fp)
 1001b2c:	10800e17 	ldw	r2,56(r2)
 1001b30:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001b34:	e0bffa17 	ldw	r2,-24(fp)
 1001b38:	10001326 	beq	r2,zero,1001b88 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001b3c:	e17ffe17 	ldw	r5,-8(fp)
 1001b40:	e13ff917 	ldw	r4,-28(fp)
 1001b44:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1001b48:	e0bffa17 	ldw	r2,-24(fp)
 1001b4c:	10ffffc4 	addi	r3,r2,-1
 1001b50:	e0bff917 	ldw	r2,-28(fp)
 1001b54:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001b58:	e0bff917 	ldw	r2,-28(fp)
 1001b5c:	10800417 	ldw	r2,16(r2)
 1001b60:	10000626 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001b64:	e0bff917 	ldw	r2,-28(fp)
 1001b68:	10800404 	addi	r2,r2,16
 1001b6c:	1009883a 	mov	r4,r2
 1001b70:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001b74:	10000126 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001b78:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001b7c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001b80:	00800044 	movi	r2,1
 1001b84:	00004206 	br	1001c90 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001b88:	e0bfff17 	ldw	r2,-4(fp)
 1001b8c:	1000031e 	bne	r2,zero,1001b9c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001b90:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001b94:	0005883a 	mov	r2,zero
 1001b98:	00003d06 	br	1001c90 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001b9c:	e0bff817 	ldw	r2,-32(fp)
 1001ba0:	1000051e 	bne	r2,zero,1001bb8 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001ba4:	e0bffb04 	addi	r2,fp,-20
 1001ba8:	1009883a 	mov	r4,r2
 1001bac:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001bb0:	00800044 	movi	r2,1
 1001bb4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001bb8:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001bbc:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001bc0:	10052700 	call	1005270 <vTaskEnterCritical>
 1001bc4:	e0bff917 	ldw	r2,-28(fp)
 1001bc8:	10801103 	ldbu	r2,68(r2)
 1001bcc:	10803fcc 	andi	r2,r2,255
 1001bd0:	1080201c 	xori	r2,r2,128
 1001bd4:	10bfe004 	addi	r2,r2,-128
 1001bd8:	10bfffd8 	cmpnei	r2,r2,-1
 1001bdc:	1000021e 	bne	r2,zero,1001be8 <xQueueReceive+0xec>
 1001be0:	e0bff917 	ldw	r2,-28(fp)
 1001be4:	10001105 	stb	zero,68(r2)
 1001be8:	e0bff917 	ldw	r2,-28(fp)
 1001bec:	10801143 	ldbu	r2,69(r2)
 1001bf0:	10803fcc 	andi	r2,r2,255
 1001bf4:	1080201c 	xori	r2,r2,128
 1001bf8:	10bfe004 	addi	r2,r2,-128
 1001bfc:	10bfffd8 	cmpnei	r2,r2,-1
 1001c00:	1000021e 	bne	r2,zero,1001c0c <xQueueReceive+0x110>
 1001c04:	e0bff917 	ldw	r2,-28(fp)
 1001c08:	10001145 	stb	zero,69(r2)
 1001c0c:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001c10:	e0ffff04 	addi	r3,fp,-4
 1001c14:	e0bffb04 	addi	r2,fp,-20
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	1009883a 	mov	r4,r2
 1001c20:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001c24:	1000131e 	bne	r2,zero,1001c74 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c28:	e13ff917 	ldw	r4,-28(fp)
 1001c2c:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c30:	10000c26 	beq	r2,zero,1001c64 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001c34:	e0bff917 	ldw	r2,-28(fp)
 1001c38:	10800904 	addi	r2,r2,36
 1001c3c:	e0ffff17 	ldw	r3,-4(fp)
 1001c40:	180b883a 	mov	r5,r3
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001c4c:	e13ff917 	ldw	r4,-28(fp)
 1001c50:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001c54:	10043880 	call	1004388 <xTaskResumeAll>
 1001c58:	103fb21e 	bne	r2,zero,1001b24 <__alt_data_end+0xff001b24>
				{
					portYIELD_WITHIN_API();
 1001c5c:	003b683a 	trap	0
 1001c60:	003fb006 	br	1001b24 <__alt_data_end+0xff001b24>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 1001c64:	e13ff917 	ldw	r4,-28(fp)
 1001c68:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001c6c:	10043880 	call	1004388 <xTaskResumeAll>
 1001c70:	003fac06 	br	1001b24 <__alt_data_end+0xff001b24>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 1001c74:	e13ff917 	ldw	r4,-28(fp)
 1001c78:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001c7c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c80:	e13ff917 	ldw	r4,-28(fp)
 1001c84:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c88:	103fa626 	beq	r2,zero,1001b24 <__alt_data_end+0xff001b24>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001c8c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001c90:	e037883a 	mov	sp,fp
 1001c94:	dfc00117 	ldw	ra,4(sp)
 1001c98:	df000017 	ldw	fp,0(sp)
 1001c9c:	dec00204 	addi	sp,sp,8
 1001ca0:	f800283a 	ret

01001ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 1001ca4:	defff504 	addi	sp,sp,-44
 1001ca8:	dfc00a15 	stw	ra,40(sp)
 1001cac:	df000915 	stw	fp,36(sp)
 1001cb0:	df000904 	addi	fp,sp,36
 1001cb4:	e13ffe15 	stw	r4,-8(fp)
 1001cb8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001cbc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001cc0:	e0bffe17 	ldw	r2,-8(fp)
 1001cc4:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 1001cc8:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001ccc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1001cd0:	e0bff917 	ldw	r2,-28(fp)
 1001cd4:	10800e17 	ldw	r2,56(r2)
 1001cd8:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1001cdc:	e0bffa17 	ldw	r2,-24(fp)
 1001ce0:	10001726 	beq	r2,zero,1001d40 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1001ce4:	e0bffa17 	ldw	r2,-24(fp)
 1001ce8:	10ffffc4 	addi	r3,r2,-1
 1001cec:	e0bff917 	ldw	r2,-28(fp)
 1001cf0:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001cf4:	e0bff917 	ldw	r2,-28(fp)
 1001cf8:	10800017 	ldw	r2,0(r2)
 1001cfc:	1000041e 	bne	r2,zero,1001d10 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 1001d00:	10053680 	call	1005368 <pvTaskIncrementMutexHeldCount>
 1001d04:	1007883a 	mov	r3,r2
 1001d08:	e0bff917 	ldw	r2,-28(fp)
 1001d0c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001d10:	e0bff917 	ldw	r2,-28(fp)
 1001d14:	10800417 	ldw	r2,16(r2)
 1001d18:	10000626 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001d1c:	e0bff917 	ldw	r2,-28(fp)
 1001d20:	10800404 	addi	r2,r2,16
 1001d24:	1009883a 	mov	r4,r2
 1001d28:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001d2c:	10000126 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001d30:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001d34:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001d38:	00800044 	movi	r2,1
 1001d3c:	00005806 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001d40:	e0bfff17 	ldw	r2,-4(fp)
 1001d44:	1000031e 	bne	r2,zero,1001d54 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 1001d48:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001d4c:	0005883a 	mov	r2,zero
 1001d50:	00005306 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001d54:	e0bff717 	ldw	r2,-36(fp)
 1001d58:	1000051e 	bne	r2,zero,1001d70 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001d5c:	e0bffc04 	addi	r2,fp,-16
 1001d60:	1009883a 	mov	r4,r2
 1001d64:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001d68:	00800044 	movi	r2,1
 1001d6c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001d70:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001d74:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001d78:	10052700 	call	1005270 <vTaskEnterCritical>
 1001d7c:	e0bff917 	ldw	r2,-28(fp)
 1001d80:	10801103 	ldbu	r2,68(r2)
 1001d84:	10803fcc 	andi	r2,r2,255
 1001d88:	1080201c 	xori	r2,r2,128
 1001d8c:	10bfe004 	addi	r2,r2,-128
 1001d90:	10bfffd8 	cmpnei	r2,r2,-1
 1001d94:	1000021e 	bne	r2,zero,1001da0 <xQueueSemaphoreTake+0xfc>
 1001d98:	e0bff917 	ldw	r2,-28(fp)
 1001d9c:	10001105 	stb	zero,68(r2)
 1001da0:	e0bff917 	ldw	r2,-28(fp)
 1001da4:	10801143 	ldbu	r2,69(r2)
 1001da8:	10803fcc 	andi	r2,r2,255
 1001dac:	1080201c 	xori	r2,r2,128
 1001db0:	10bfe004 	addi	r2,r2,-128
 1001db4:	10bfffd8 	cmpnei	r2,r2,-1
 1001db8:	1000021e 	bne	r2,zero,1001dc4 <xQueueSemaphoreTake+0x120>
 1001dbc:	e0bff917 	ldw	r2,-28(fp)
 1001dc0:	10001145 	stb	zero,69(r2)
 1001dc4:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001dc8:	e0ffff04 	addi	r3,fp,-4
 1001dcc:	e0bffc04 	addi	r2,fp,-16
 1001dd0:	180b883a 	mov	r5,r3
 1001dd4:	1009883a 	mov	r4,r2
 1001dd8:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001ddc:	10001d1e 	bne	r2,zero,1001e54 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001de0:	e13ff917 	ldw	r4,-28(fp)
 1001de4:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001de8:	10001626 	beq	r2,zero,1001e44 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001dec:	e0bff917 	ldw	r2,-28(fp)
 1001df0:	10800017 	ldw	r2,0(r2)
 1001df4:	1000071e 	bne	r2,zero,1001e14 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 1001df8:	10052700 	call	1005270 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 1001dfc:	e0bff917 	ldw	r2,-28(fp)
 1001e00:	10800217 	ldw	r2,8(r2)
 1001e04:	1009883a 	mov	r4,r2
 1001e08:	1004ef40 	call	1004ef4 <xTaskPriorityInherit>
 1001e0c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 1001e10:	10052c40 	call	10052c4 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001e14:	e0bff917 	ldw	r2,-28(fp)
 1001e18:	10800904 	addi	r2,r2,36
 1001e1c:	e0ffff17 	ldw	r3,-4(fp)
 1001e20:	180b883a 	mov	r5,r3
 1001e24:	1009883a 	mov	r4,r2
 1001e28:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001e2c:	e13ff917 	ldw	r4,-28(fp)
 1001e30:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001e34:	10043880 	call	1004388 <xTaskResumeAll>
 1001e38:	103fa41e 	bne	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				{
					portYIELD_WITHIN_API();
 1001e3c:	003b683a 	trap	0
 1001e40:	003fa206 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 1001e44:	e13ff917 	ldw	r4,-28(fp)
 1001e48:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001e4c:	10043880 	call	1004388 <xTaskResumeAll>
 1001e50:	003f9e06 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 1001e54:	e13ff917 	ldw	r4,-28(fp)
 1001e58:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001e5c:	10043880 	call	1004388 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001e60:	e13ff917 	ldw	r4,-28(fp)
 1001e64:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001e68:	103f9826 	beq	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 1001e6c:	e0bff817 	ldw	r2,-32(fp)
 1001e70:	10000a26 	beq	r2,zero,1001e9c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 1001e74:	10052700 	call	1005270 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1001e78:	e13ff917 	ldw	r4,-28(fp)
 1001e7c:	10022cc0 	call	10022cc <prvGetDisinheritPriorityAfterTimeout>
 1001e80:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 1001e84:	e0bff917 	ldw	r2,-28(fp)
 1001e88:	10800217 	ldw	r2,8(r2)
 1001e8c:	e17ffb17 	ldw	r5,-20(fp)
 1001e90:	1009883a 	mov	r4,r2
 1001e94:	10051300 	call	1005130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 1001e98:	10052c40 	call	10052c4 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001e9c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001ea0:	e037883a 	mov	sp,fp
 1001ea4:	dfc00117 	ldw	ra,4(sp)
 1001ea8:	df000017 	ldw	fp,0(sp)
 1001eac:	dec00204 	addi	sp,sp,8
 1001eb0:	f800283a 	ret

01001eb4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001eb4:	defff504 	addi	sp,sp,-44
 1001eb8:	dfc00a15 	stw	ra,40(sp)
 1001ebc:	df000915 	stw	fp,36(sp)
 1001ec0:	df000904 	addi	fp,sp,36
 1001ec4:	e13ffd15 	stw	r4,-12(fp)
 1001ec8:	e17ffe15 	stw	r5,-8(fp)
 1001ecc:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001ed0:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1001ed4:	e0bffd17 	ldw	r2,-12(fp)
 1001ed8:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001edc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001ee0:	e0bff817 	ldw	r2,-32(fp)
 1001ee4:	10800e17 	ldw	r2,56(r2)
 1001ee8:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001eec:	e0bff917 	ldw	r2,-28(fp)
 1001ef0:	10001526 	beq	r2,zero,1001f48 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1001ef4:	e0bff817 	ldw	r2,-32(fp)
 1001ef8:	10800317 	ldw	r2,12(r2)
 1001efc:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001f00:	e17ffe17 	ldw	r5,-8(fp)
 1001f04:	e13ff817 	ldw	r4,-32(fp)
 1001f08:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1001f0c:	e0bff817 	ldw	r2,-32(fp)
 1001f10:	e0fffa17 	ldw	r3,-24(fp)
 1001f14:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001f18:	e0bff817 	ldw	r2,-32(fp)
 1001f1c:	10800917 	ldw	r2,36(r2)
 1001f20:	10000626 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001f24:	e0bff817 	ldw	r2,-32(fp)
 1001f28:	10800904 	addi	r2,r2,36
 1001f2c:	1009883a 	mov	r4,r2
 1001f30:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1001f34:	10000126 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 1001f38:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001f3c:	10052c40 	call	10052c4 <vTaskExitCritical>
				return pdPASS;
 1001f40:	00800044 	movi	r2,1
 1001f44:	00004206 	br	1002050 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001f48:	e0bfff17 	ldw	r2,-4(fp)
 1001f4c:	1000031e 	bne	r2,zero,1001f5c <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001f50:	10052c40 	call	10052c4 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001f54:	0005883a 	mov	r2,zero
 1001f58:	00003d06 	br	1002050 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001f5c:	e0bff717 	ldw	r2,-36(fp)
 1001f60:	1000051e 	bne	r2,zero,1001f78 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001f64:	e0bffb04 	addi	r2,fp,-20
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001f70:	00800044 	movi	r2,1
 1001f74:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001f78:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001f7c:	100435c0 	call	100435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001f80:	10052700 	call	1005270 <vTaskEnterCritical>
 1001f84:	e0bff817 	ldw	r2,-32(fp)
 1001f88:	10801103 	ldbu	r2,68(r2)
 1001f8c:	10803fcc 	andi	r2,r2,255
 1001f90:	1080201c 	xori	r2,r2,128
 1001f94:	10bfe004 	addi	r2,r2,-128
 1001f98:	10bfffd8 	cmpnei	r2,r2,-1
 1001f9c:	1000021e 	bne	r2,zero,1001fa8 <xQueuePeek+0xf4>
 1001fa0:	e0bff817 	ldw	r2,-32(fp)
 1001fa4:	10001105 	stb	zero,68(r2)
 1001fa8:	e0bff817 	ldw	r2,-32(fp)
 1001fac:	10801143 	ldbu	r2,69(r2)
 1001fb0:	10803fcc 	andi	r2,r2,255
 1001fb4:	1080201c 	xori	r2,r2,128
 1001fb8:	10bfe004 	addi	r2,r2,-128
 1001fbc:	10bfffd8 	cmpnei	r2,r2,-1
 1001fc0:	1000021e 	bne	r2,zero,1001fcc <xQueuePeek+0x118>
 1001fc4:	e0bff817 	ldw	r2,-32(fp)
 1001fc8:	10001145 	stb	zero,69(r2)
 1001fcc:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001fd0:	e0ffff04 	addi	r3,fp,-4
 1001fd4:	e0bffb04 	addi	r2,fp,-20
 1001fd8:	180b883a 	mov	r5,r3
 1001fdc:	1009883a 	mov	r4,r2
 1001fe0:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1001fe4:	1000131e 	bne	r2,zero,1002034 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001fe8:	e13ff817 	ldw	r4,-32(fp)
 1001fec:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001ff0:	10000c26 	beq	r2,zero,1002024 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001ff4:	e0bff817 	ldw	r2,-32(fp)
 1001ff8:	10800904 	addi	r2,r2,36
 1001ffc:	e0ffff17 	ldw	r3,-4(fp)
 1002000:	180b883a 	mov	r5,r3
 1002004:	1009883a 	mov	r4,r2
 1002008:	100481c0 	call	100481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 100200c:	e13ff817 	ldw	r4,-32(fp)
 1002010:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1002014:	10043880 	call	1004388 <xTaskResumeAll>
 1002018:	103fb01e 	bne	r2,zero,1001edc <__alt_data_end+0xff001edc>
				{
					portYIELD_WITHIN_API();
 100201c:	003b683a 	trap	0
 1002020:	003fae06 	br	1001edc <__alt_data_end+0xff001edc>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 1002024:	e13ff817 	ldw	r4,-32(fp)
 1002028:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100202c:	10043880 	call	1004388 <xTaskResumeAll>
 1002030:	003faa06 	br	1001edc <__alt_data_end+0xff001edc>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 1002034:	e13ff817 	ldw	r4,-32(fp)
 1002038:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100203c:	10043880 	call	1004388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1002040:	e13ff817 	ldw	r4,-32(fp)
 1002044:	10026380 	call	1002638 <prvIsQueueEmpty>
 1002048:	103fa426 	beq	r2,zero,1001edc <__alt_data_end+0xff001edc>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 100204c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1002050:	e037883a 	mov	sp,fp
 1002054:	dfc00117 	ldw	ra,4(sp)
 1002058:	df000017 	ldw	fp,0(sp)
 100205c:	dec00204 	addi	sp,sp,8
 1002060:	f800283a 	ret

01002064 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002064:	defff604 	addi	sp,sp,-40
 1002068:	dfc00915 	stw	ra,36(sp)
 100206c:	df000815 	stw	fp,32(sp)
 1002070:	df000804 	addi	fp,sp,32
 1002074:	e13ffd15 	stw	r4,-12(fp)
 1002078:	e17ffe15 	stw	r5,-8(fp)
 100207c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1002080:	e0bffd17 	ldw	r2,-12(fp)
 1002084:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002088:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100208c:	e0bff917 	ldw	r2,-28(fp)
 1002090:	10800e17 	ldw	r2,56(r2)
 1002094:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1002098:	e0bffb17 	ldw	r2,-20(fp)
 100209c:	10002326 	beq	r2,zero,100212c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 10020a0:	e0bff917 	ldw	r2,-28(fp)
 10020a4:	10801103 	ldbu	r2,68(r2)
 10020a8:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 10020ac:	e17ffe17 	ldw	r5,-8(fp)
 10020b0:	e13ff917 	ldw	r4,-28(fp)
 10020b4:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 10020b8:	e0bffb17 	ldw	r2,-20(fp)
 10020bc:	10ffffc4 	addi	r3,r2,-1
 10020c0:	e0bff917 	ldw	r2,-28(fp)
 10020c4:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 10020c8:	e0bffc07 	ldb	r2,-16(fp)
 10020cc:	10bfffd8 	cmpnei	r2,r2,-1
 10020d0:	10000e1e 	bne	r2,zero,100210c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10020d4:	e0bff917 	ldw	r2,-28(fp)
 10020d8:	10800417 	ldw	r2,16(r2)
 10020dc:	10001026 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10020e0:	e0bff917 	ldw	r2,-28(fp)
 10020e4:	10800404 	addi	r2,r2,16
 10020e8:	1009883a 	mov	r4,r2
 10020ec:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10020f0:	10000b26 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 10020f4:	e0bfff17 	ldw	r2,-4(fp)
 10020f8:	10000926 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 10020fc:	e0bfff17 	ldw	r2,-4(fp)
 1002100:	00c00044 	movi	r3,1
 1002104:	10c00015 	stw	r3,0(r2)
 1002108:	00000506 	br	1002120 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 100210c:	e0bffc03 	ldbu	r2,-16(fp)
 1002110:	10800044 	addi	r2,r2,1
 1002114:	1007883a 	mov	r3,r2
 1002118:	e0bff917 	ldw	r2,-28(fp)
 100211c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 1002120:	00800044 	movi	r2,1
 1002124:	e0bff815 	stw	r2,-32(fp)
 1002128:	00000106 	br	1002130 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 100212c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1002130:	e0bff817 	ldw	r2,-32(fp)
}
 1002134:	e037883a 	mov	sp,fp
 1002138:	dfc00117 	ldw	ra,4(sp)
 100213c:	df000017 	ldw	fp,0(sp)
 1002140:	dec00204 	addi	sp,sp,8
 1002144:	f800283a 	ret

01002148 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 1002148:	defff804 	addi	sp,sp,-32
 100214c:	dfc00715 	stw	ra,28(sp)
 1002150:	df000615 	stw	fp,24(sp)
 1002154:	df000604 	addi	fp,sp,24
 1002158:	e13ffe15 	stw	r4,-8(fp)
 100215c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1002160:	e0bffe17 	ldw	r2,-8(fp)
 1002164:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002168:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 100216c:	e0bffb17 	ldw	r2,-20(fp)
 1002170:	10800e17 	ldw	r2,56(r2)
 1002174:	10000c26 	beq	r2,zero,10021a8 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1002178:	e0bffb17 	ldw	r2,-20(fp)
 100217c:	10800317 	ldw	r2,12(r2)
 1002180:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1002184:	e17fff17 	ldw	r5,-4(fp)
 1002188:	e13ffb17 	ldw	r4,-20(fp)
 100218c:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1002190:	e0bffb17 	ldw	r2,-20(fp)
 1002194:	e0fffd17 	ldw	r3,-12(fp)
 1002198:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 100219c:	00800044 	movi	r2,1
 10021a0:	e0bffa15 	stw	r2,-24(fp)
 10021a4:	00000106 	br	10021ac <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 10021a8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 10021ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10021b0:	e037883a 	mov	sp,fp
 10021b4:	dfc00117 	ldw	ra,4(sp)
 10021b8:	df000017 	ldw	fp,0(sp)
 10021bc:	dec00204 	addi	sp,sp,8
 10021c0:	f800283a 	ret

010021c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 10021c4:	defffc04 	addi	sp,sp,-16
 10021c8:	dfc00315 	stw	ra,12(sp)
 10021cc:	df000215 	stw	fp,8(sp)
 10021d0:	df000204 	addi	fp,sp,8
 10021d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 10021d8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 10021dc:	e0bfff17 	ldw	r2,-4(fp)
 10021e0:	10800e17 	ldw	r2,56(r2)
 10021e4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 10021e8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 10021ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 10021f0:	e037883a 	mov	sp,fp
 10021f4:	dfc00117 	ldw	ra,4(sp)
 10021f8:	df000017 	ldw	fp,0(sp)
 10021fc:	dec00204 	addi	sp,sp,8
 1002200:	f800283a 	ret

01002204 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 1002204:	defffb04 	addi	sp,sp,-20
 1002208:	dfc00415 	stw	ra,16(sp)
 100220c:	df000315 	stw	fp,12(sp)
 1002210:	df000304 	addi	fp,sp,12
 1002214:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002218:	e0bfff17 	ldw	r2,-4(fp)
 100221c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1002220:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 1002224:	e0bffd17 	ldw	r2,-12(fp)
 1002228:	10c00f17 	ldw	r3,60(r2)
 100222c:	e0bffd17 	ldw	r2,-12(fp)
 1002230:	10800e17 	ldw	r2,56(r2)
 1002234:	1885c83a 	sub	r2,r3,r2
 1002238:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 100223c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return uxReturn;
 1002240:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002244:	e037883a 	mov	sp,fp
 1002248:	dfc00117 	ldw	ra,4(sp)
 100224c:	df000017 	ldw	fp,0(sp)
 1002250:	dec00204 	addi	sp,sp,8
 1002254:	f800283a 	ret

01002258 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 1002258:	defffc04 	addi	sp,sp,-16
 100225c:	df000315 	stw	fp,12(sp)
 1002260:	df000304 	addi	fp,sp,12
 1002264:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002268:	e0bfff17 	ldw	r2,-4(fp)
 100226c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 1002270:	e0bffd17 	ldw	r2,-12(fp)
 1002274:	10800e17 	ldw	r2,56(r2)
 1002278:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 100227c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002280:	e037883a 	mov	sp,fp
 1002284:	df000017 	ldw	fp,0(sp)
 1002288:	dec00104 	addi	sp,sp,4
 100228c:	f800283a 	ret

01002290 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 1002290:	defffc04 	addi	sp,sp,-16
 1002294:	dfc00315 	stw	ra,12(sp)
 1002298:	df000215 	stw	fp,8(sp)
 100229c:	df000204 	addi	fp,sp,8
 10022a0:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 10022a4:	e0bfff17 	ldw	r2,-4(fp)
 10022a8:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 10022ac:	e13ffe17 	ldw	r4,-8(fp)
 10022b0:	10011840 	call	1001184 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 10022b4:	0001883a 	nop
 10022b8:	e037883a 	mov	sp,fp
 10022bc:	dfc00117 	ldw	ra,4(sp)
 10022c0:	df000017 	ldw	fp,0(sp)
 10022c4:	dec00204 	addi	sp,sp,8
 10022c8:	f800283a 	ret

010022cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 10022cc:	defffd04 	addi	sp,sp,-12
 10022d0:	df000215 	stw	fp,8(sp)
 10022d4:	df000204 	addi	fp,sp,8
 10022d8:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 10022dc:	e0bfff17 	ldw	r2,-4(fp)
 10022e0:	10800917 	ldw	r2,36(r2)
 10022e4:	10000726 	beq	r2,zero,1002304 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 10022e8:	e0bfff17 	ldw	r2,-4(fp)
 10022ec:	10800c17 	ldw	r2,48(r2)
 10022f0:	10800017 	ldw	r2,0(r2)
 10022f4:	00c00144 	movi	r3,5
 10022f8:	1885c83a 	sub	r2,r3,r2
 10022fc:	e0bffe15 	stw	r2,-8(fp)
 1002300:	00000106 	br	1002308 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 1002304:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 1002308:	e0bffe17 	ldw	r2,-8(fp)
	}
 100230c:	e037883a 	mov	sp,fp
 1002310:	df000017 	ldw	fp,0(sp)
 1002314:	dec00104 	addi	sp,sp,4
 1002318:	f800283a 	ret

0100231c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 100231c:	defff904 	addi	sp,sp,-28
 1002320:	dfc00615 	stw	ra,24(sp)
 1002324:	df000515 	stw	fp,20(sp)
 1002328:	df000504 	addi	fp,sp,20
 100232c:	e13ffd15 	stw	r4,-12(fp)
 1002330:	e17ffe15 	stw	r5,-8(fp)
 1002334:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 1002338:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100233c:	e0bffd17 	ldw	r2,-12(fp)
 1002340:	10800e17 	ldw	r2,56(r2)
 1002344:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 1002348:	e0bffd17 	ldw	r2,-12(fp)
 100234c:	10801017 	ldw	r2,64(r2)
 1002350:	10000b1e 	bne	r2,zero,1002380 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1002354:	e0bffd17 	ldw	r2,-12(fp)
 1002358:	10800017 	ldw	r2,0(r2)
 100235c:	1000481e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 1002360:	e0bffd17 	ldw	r2,-12(fp)
 1002364:	10800217 	ldw	r2,8(r2)
 1002368:	1009883a 	mov	r4,r2
 100236c:	10050340 	call	1005034 <xTaskPriorityDisinherit>
 1002370:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 1002374:	e0bffd17 	ldw	r2,-12(fp)
 1002378:	10000215 	stw	zero,8(r2)
 100237c:	00004006 	br	1002480 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 1002380:	e0bfff17 	ldw	r2,-4(fp)
 1002384:	1000191e 	bne	r2,zero,10023ec <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 1002388:	e0bffd17 	ldw	r2,-12(fp)
 100238c:	10c00117 	ldw	r3,4(r2)
 1002390:	e0bffd17 	ldw	r2,-12(fp)
 1002394:	10801017 	ldw	r2,64(r2)
 1002398:	100d883a 	mov	r6,r2
 100239c:	e17ffe17 	ldw	r5,-8(fp)
 10023a0:	1809883a 	mov	r4,r3
 10023a4:	10157f40 	call	10157f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10023a8:	e0bffd17 	ldw	r2,-12(fp)
 10023ac:	10c00117 	ldw	r3,4(r2)
 10023b0:	e0bffd17 	ldw	r2,-12(fp)
 10023b4:	10801017 	ldw	r2,64(r2)
 10023b8:	1887883a 	add	r3,r3,r2
 10023bc:	e0bffd17 	ldw	r2,-12(fp)
 10023c0:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 10023c4:	e0bffd17 	ldw	r2,-12(fp)
 10023c8:	10c00117 	ldw	r3,4(r2)
 10023cc:	e0bffd17 	ldw	r2,-12(fp)
 10023d0:	10800217 	ldw	r2,8(r2)
 10023d4:	18802a36 	bltu	r3,r2,1002480 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 10023d8:	e0bffd17 	ldw	r2,-12(fp)
 10023dc:	10c00017 	ldw	r3,0(r2)
 10023e0:	e0bffd17 	ldw	r2,-12(fp)
 10023e4:	10c00115 	stw	r3,4(r2)
 10023e8:	00002506 	br	1002480 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 10023ec:	e0bffd17 	ldw	r2,-12(fp)
 10023f0:	10c00317 	ldw	r3,12(r2)
 10023f4:	e0bffd17 	ldw	r2,-12(fp)
 10023f8:	10801017 	ldw	r2,64(r2)
 10023fc:	100d883a 	mov	r6,r2
 1002400:	e17ffe17 	ldw	r5,-8(fp)
 1002404:	1809883a 	mov	r4,r3
 1002408:	10157f40 	call	10157f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 100240c:	e0bffd17 	ldw	r2,-12(fp)
 1002410:	10c00317 	ldw	r3,12(r2)
 1002414:	e0bffd17 	ldw	r2,-12(fp)
 1002418:	10801017 	ldw	r2,64(r2)
 100241c:	0085c83a 	sub	r2,zero,r2
 1002420:	1887883a 	add	r3,r3,r2
 1002424:	e0bffd17 	ldw	r2,-12(fp)
 1002428:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 100242c:	e0bffd17 	ldw	r2,-12(fp)
 1002430:	10c00317 	ldw	r3,12(r2)
 1002434:	e0bffd17 	ldw	r2,-12(fp)
 1002438:	10800017 	ldw	r2,0(r2)
 100243c:	1880082e 	bgeu	r3,r2,1002460 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 1002440:	e0bffd17 	ldw	r2,-12(fp)
 1002444:	10c00217 	ldw	r3,8(r2)
 1002448:	e0bffd17 	ldw	r2,-12(fp)
 100244c:	10801017 	ldw	r2,64(r2)
 1002450:	0085c83a 	sub	r2,zero,r2
 1002454:	1887883a 	add	r3,r3,r2
 1002458:	e0bffd17 	ldw	r2,-12(fp)
 100245c:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 1002460:	e0bfff17 	ldw	r2,-4(fp)
 1002464:	10800098 	cmpnei	r2,r2,2
 1002468:	1000051e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 100246c:	e0bffc17 	ldw	r2,-16(fp)
 1002470:	10000326 	beq	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 1002474:	e0bffc17 	ldw	r2,-16(fp)
 1002478:	10bfffc4 	addi	r2,r2,-1
 100247c:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1002480:	e0bffc17 	ldw	r2,-16(fp)
 1002484:	10c00044 	addi	r3,r2,1
 1002488:	e0bffd17 	ldw	r2,-12(fp)
 100248c:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 1002490:	e0bffb17 	ldw	r2,-20(fp)
}
 1002494:	e037883a 	mov	sp,fp
 1002498:	dfc00117 	ldw	ra,4(sp)
 100249c:	df000017 	ldw	fp,0(sp)
 10024a0:	dec00204 	addi	sp,sp,8
 10024a4:	f800283a 	ret

010024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 10024a8:	defffc04 	addi	sp,sp,-16
 10024ac:	dfc00315 	stw	ra,12(sp)
 10024b0:	df000215 	stw	fp,8(sp)
 10024b4:	df000204 	addi	fp,sp,8
 10024b8:	e13ffe15 	stw	r4,-8(fp)
 10024bc:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 10024c0:	e0bffe17 	ldw	r2,-8(fp)
 10024c4:	10801017 	ldw	r2,64(r2)
 10024c8:	10001826 	beq	r2,zero,100252c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10024cc:	e0bffe17 	ldw	r2,-8(fp)
 10024d0:	10c00317 	ldw	r3,12(r2)
 10024d4:	e0bffe17 	ldw	r2,-8(fp)
 10024d8:	10801017 	ldw	r2,64(r2)
 10024dc:	1887883a 	add	r3,r3,r2
 10024e0:	e0bffe17 	ldw	r2,-8(fp)
 10024e4:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 10024e8:	e0bffe17 	ldw	r2,-8(fp)
 10024ec:	10c00317 	ldw	r3,12(r2)
 10024f0:	e0bffe17 	ldw	r2,-8(fp)
 10024f4:	10800217 	ldw	r2,8(r2)
 10024f8:	18800436 	bltu	r3,r2,100250c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 10024fc:	e0bffe17 	ldw	r2,-8(fp)
 1002500:	10c00017 	ldw	r3,0(r2)
 1002504:	e0bffe17 	ldw	r2,-8(fp)
 1002508:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 100250c:	e0bffe17 	ldw	r2,-8(fp)
 1002510:	10c00317 	ldw	r3,12(r2)
 1002514:	e0bffe17 	ldw	r2,-8(fp)
 1002518:	10801017 	ldw	r2,64(r2)
 100251c:	100d883a 	mov	r6,r2
 1002520:	180b883a 	mov	r5,r3
 1002524:	e13fff17 	ldw	r4,-4(fp)
 1002528:	10157f40 	call	10157f4 <memcpy>
	}
}
 100252c:	0001883a 	nop
 1002530:	e037883a 	mov	sp,fp
 1002534:	dfc00117 	ldw	ra,4(sp)
 1002538:	df000017 	ldw	fp,0(sp)
 100253c:	dec00204 	addi	sp,sp,8
 1002540:	f800283a 	ret

01002544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 1002544:	defffc04 	addi	sp,sp,-16
 1002548:	dfc00315 	stw	ra,12(sp)
 100254c:	df000215 	stw	fp,8(sp)
 1002550:	df000204 	addi	fp,sp,8
 1002554:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 1002558:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 100255c:	e0bfff17 	ldw	r2,-4(fp)
 1002560:	10801143 	ldbu	r2,69(r2)
 1002564:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 1002568:	00000c06 	br	100259c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 100256c:	e0bfff17 	ldw	r2,-4(fp)
 1002570:	10800917 	ldw	r2,36(r2)
 1002574:	10000c26 	beq	r2,zero,10025a8 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1002578:	e0bfff17 	ldw	r2,-4(fp)
 100257c:	10800904 	addi	r2,r2,36
 1002580:	1009883a 	mov	r4,r2
 1002584:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 1002588:	10000126 	beq	r2,zero,1002590 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 100258c:	1004bf40 	call	1004bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 1002590:	e0bffe03 	ldbu	r2,-8(fp)
 1002594:	10bfffc4 	addi	r2,r2,-1
 1002598:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 100259c:	e0bffe07 	ldb	r2,-8(fp)
 10025a0:	00bff216 	blt	zero,r2,100256c <__alt_data_end+0xff00256c>
 10025a4:	00000106 	br	10025ac <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 10025a8:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 10025ac:	e0bfff17 	ldw	r2,-4(fp)
 10025b0:	00ffffc4 	movi	r3,-1
 10025b4:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 10025b8:	10052c40 	call	10052c4 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 10025bc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 10025c0:	e0bfff17 	ldw	r2,-4(fp)
 10025c4:	10801103 	ldbu	r2,68(r2)
 10025c8:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 10025cc:	00000c06 	br	1002600 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10025d0:	e0bfff17 	ldw	r2,-4(fp)
 10025d4:	10800417 	ldw	r2,16(r2)
 10025d8:	10000c26 	beq	r2,zero,100260c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10025dc:	e0bfff17 	ldw	r2,-4(fp)
 10025e0:	10800404 	addi	r2,r2,16
 10025e4:	1009883a 	mov	r4,r2
 10025e8:	10048d00 	call	10048d0 <xTaskRemoveFromEventList>
 10025ec:	10000126 	beq	r2,zero,10025f4 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 10025f0:	1004bf40 	call	1004bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 10025f4:	e0bffe43 	ldbu	r2,-7(fp)
 10025f8:	10bfffc4 	addi	r2,r2,-1
 10025fc:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 1002600:	e0bffe47 	ldb	r2,-7(fp)
 1002604:	00bff216 	blt	zero,r2,10025d0 <__alt_data_end+0xff0025d0>
 1002608:	00000106 	br	1002610 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 100260c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 1002610:	e0bfff17 	ldw	r2,-4(fp)
 1002614:	00ffffc4 	movi	r3,-1
 1002618:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 100261c:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1002620:	0001883a 	nop
 1002624:	e037883a 	mov	sp,fp
 1002628:	dfc00117 	ldw	ra,4(sp)
 100262c:	df000017 	ldw	fp,0(sp)
 1002630:	dec00204 	addi	sp,sp,8
 1002634:	f800283a 	ret

01002638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 1002638:	defffc04 	addi	sp,sp,-16
 100263c:	dfc00315 	stw	ra,12(sp)
 1002640:	df000215 	stw	fp,8(sp)
 1002644:	df000204 	addi	fp,sp,8
 1002648:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 100264c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 1002650:	e0bfff17 	ldw	r2,-4(fp)
 1002654:	10800e17 	ldw	r2,56(r2)
 1002658:	1000031e 	bne	r2,zero,1002668 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 100265c:	00800044 	movi	r2,1
 1002660:	e0bffe15 	stw	r2,-8(fp)
 1002664:	00000106 	br	100266c <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 1002668:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100266c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002670:	e0bffe17 	ldw	r2,-8(fp)
}
 1002674:	e037883a 	mov	sp,fp
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	df000017 	ldw	fp,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret

01002688 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 1002688:	defffc04 	addi	sp,sp,-16
 100268c:	df000315 	stw	fp,12(sp)
 1002690:	df000304 	addi	fp,sp,12
 1002694:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002698:	e0bfff17 	ldw	r2,-4(fp)
 100269c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 10026a0:	e0bffe17 	ldw	r2,-8(fp)
 10026a4:	10800e17 	ldw	r2,56(r2)
 10026a8:	1000031e 	bne	r2,zero,10026b8 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 10026ac:	00800044 	movi	r2,1
 10026b0:	e0bffd15 	stw	r2,-12(fp)
 10026b4:	00000106 	br	10026bc <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 10026b8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10026bc:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 10026c0:	e037883a 	mov	sp,fp
 10026c4:	df000017 	ldw	fp,0(sp)
 10026c8:	dec00104 	addi	sp,sp,4
 10026cc:	f800283a 	ret

010026d0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 10026d0:	defffc04 	addi	sp,sp,-16
 10026d4:	dfc00315 	stw	ra,12(sp)
 10026d8:	df000215 	stw	fp,8(sp)
 10026dc:	df000204 	addi	fp,sp,8
 10026e0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 10026e4:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 10026e8:	e0bfff17 	ldw	r2,-4(fp)
 10026ec:	10c00e17 	ldw	r3,56(r2)
 10026f0:	e0bfff17 	ldw	r2,-4(fp)
 10026f4:	10800f17 	ldw	r2,60(r2)
 10026f8:	1880031e 	bne	r3,r2,1002708 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 10026fc:	00800044 	movi	r2,1
 1002700:	e0bffe15 	stw	r2,-8(fp)
 1002704:	00000106 	br	100270c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 1002708:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100270c:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1002710:	e0bffe17 	ldw	r2,-8(fp)
}
 1002714:	e037883a 	mov	sp,fp
 1002718:	dfc00117 	ldw	ra,4(sp)
 100271c:	df000017 	ldw	fp,0(sp)
 1002720:	dec00204 	addi	sp,sp,8
 1002724:	f800283a 	ret

01002728 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 1002728:	defffc04 	addi	sp,sp,-16
 100272c:	df000315 	stw	fp,12(sp)
 1002730:	df000304 	addi	fp,sp,12
 1002734:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002738:	e0bfff17 	ldw	r2,-4(fp)
 100273c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1002740:	e0bffe17 	ldw	r2,-8(fp)
 1002744:	10c00e17 	ldw	r3,56(r2)
 1002748:	e0bffe17 	ldw	r2,-8(fp)
 100274c:	10800f17 	ldw	r2,60(r2)
 1002750:	1880031e 	bne	r3,r2,1002760 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 1002754:	00800044 	movi	r2,1
 1002758:	e0bffd15 	stw	r2,-12(fp)
 100275c:	00000106 	br	1002764 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 1002760:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 1002764:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1002768:	e037883a 	mov	sp,fp
 100276c:	df000017 	ldw	fp,0(sp)
 1002770:	dec00104 	addi	sp,sp,4
 1002774:	f800283a 	ret

01002778 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 1002778:	defff804 	addi	sp,sp,-32
 100277c:	dfc00715 	stw	ra,28(sp)
 1002780:	df000615 	stw	fp,24(sp)
 1002784:	df000604 	addi	fp,sp,24
 1002788:	e13ffd15 	stw	r4,-12(fp)
 100278c:	e17ffe15 	stw	r5,-8(fp)
 1002790:	e1bfff15 	stw	r6,-4(fp)

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 1002794:	e0bfff17 	ldw	r2,-4(fp)
 1002798:	10800058 	cmpnei	r2,r2,1
 100279c:	1000031e 	bne	r2,zero,10027ac <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 10027a0:	00800044 	movi	r2,1
 10027a4:	e0bffb05 	stb	r2,-20(fp)
 10027a8:	00000106 	br	10027b0 <xStreamBufferGenericCreate+0x38>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 10027ac:	e03ffb05 	stb	zero,-20(fp)
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 10027b0:	e0bffe17 	ldw	r2,-8(fp)
 10027b4:	1000021e 	bne	r2,zero,10027c0 <xStreamBufferGenericCreate+0x48>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 10027b8:	00800044 	movi	r2,1
 10027bc:	e0bffe15 	stw	r2,-8(fp)
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 10027c0:	e0bffd17 	ldw	r2,-12(fp)
 10027c4:	10800044 	addi	r2,r2,1
 10027c8:	e0bffd15 	stw	r2,-12(fp)
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 10027cc:	e0bffd17 	ldw	r2,-12(fp)
 10027d0:	10800804 	addi	r2,r2,32
 10027d4:	1009883a 	mov	r4,r2
 10027d8:	1000fb00 	call	1000fb0 <pvPortMalloc>
 10027dc:	e0bffc15 	stw	r2,-16(fp)

		if( pucAllocatedMemory != NULL )
 10027e0:	e0bffc17 	ldw	r2,-16(fp)
 10027e4:	10000926 	beq	r2,zero,100280c <xStreamBufferGenericCreate+0x94>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 10027e8:	e0bffc17 	ldw	r2,-16(fp)
 10027ec:	10c00804 	addi	r3,r2,32
 10027f0:	e0bffb03 	ldbu	r2,-20(fp)
 10027f4:	d8800015 	stw	r2,0(sp)
 10027f8:	e1fffe17 	ldw	r7,-8(fp)
 10027fc:	e1bffd17 	ldw	r6,-12(fp)
 1002800:	180b883a 	mov	r5,r3
 1002804:	e13ffc17 	ldw	r4,-16(fp)
 1002808:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 100280c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1002810:	e037883a 	mov	sp,fp
 1002814:	dfc00117 	ldw	ra,4(sp)
 1002818:	df000017 	ldw	fp,0(sp)
 100281c:	dec00204 	addi	sp,sp,8
 1002820:	f800283a 	ret

01002824 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 1002824:	defffc04 	addi	sp,sp,-16
 1002828:	dfc00315 	stw	ra,12(sp)
 100282c:	df000215 	stw	fp,8(sp)
 1002830:	df000204 	addi	fp,sp,8
 1002834:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 1002838:	e0bfff17 	ldw	r2,-4(fp)
 100283c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 1002840:	e0bffe17 	ldw	r2,-8(fp)
 1002844:	10800703 	ldbu	r2,28(r2)
 1002848:	10803fcc 	andi	r2,r2,255
 100284c:	1080008c 	andi	r2,r2,2
 1002850:	1000031e 	bne	r2,zero,1002860 <vStreamBufferDelete+0x3c>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 1002854:	e13ffe17 	ldw	r4,-8(fp)
 1002858:	10011840 	call	1001184 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 100285c:	00000406 	br	1002870 <vStreamBufferDelete+0x4c>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 1002860:	01800804 	movi	r6,32
 1002864:	000b883a 	mov	r5,zero
 1002868:	e13ffe17 	ldw	r4,-8(fp)
 100286c:	101593c0 	call	101593c <memset>
	}
}
 1002870:	0001883a 	nop
 1002874:	e037883a 	mov	sp,fp
 1002878:	dfc00117 	ldw	ra,4(sp)
 100287c:	df000017 	ldw	fp,0(sp)
 1002880:	dec00204 	addi	sp,sp,8
 1002884:	f800283a 	ret

01002888 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 1002888:	defffa04 	addi	sp,sp,-24
 100288c:	dfc00515 	stw	ra,20(sp)
 1002890:	df000415 	stw	fp,16(sp)
 1002894:	df000404 	addi	fp,sp,16
 1002898:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 100289c:	e0bfff17 	ldw	r2,-4(fp)
 10028a0:	e0bffe15 	stw	r2,-8(fp)
BaseType_t xReturn = pdFAIL;
 10028a4:	e03ffd15 	stw	zero,-12(fp)
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 10028a8:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 10028ac:	e0bffe17 	ldw	r2,-8(fp)
 10028b0:	10800417 	ldw	r2,16(r2)
 10028b4:	1000141e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 10028b8:	e0bffe17 	ldw	r2,-8(fp)
 10028bc:	10800517 	ldw	r2,20(r2)
 10028c0:	1000111e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028c4:	e0bffe17 	ldw	r2,-8(fp)
 10028c8:	10c00617 	ldw	r3,24(r2)
 10028cc:	e0bffe17 	ldw	r2,-8(fp)
 10028d0:	11000217 	ldw	r4,8(r2)
 10028d4:	e0bffe17 	ldw	r2,-8(fp)
 10028d8:	11400317 	ldw	r5,12(r2)
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
 10028dc:	e0bffe17 	ldw	r2,-8(fp)
 10028e0:	10800703 	ldbu	r2,28(r2)
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028e4:	10803fcc 	andi	r2,r2,255
 10028e8:	d8800015 	stw	r2,0(sp)
 10028ec:	280f883a 	mov	r7,r5
 10028f0:	200d883a 	mov	r6,r4
 10028f4:	180b883a 	mov	r5,r3
 10028f8:	e13ffe17 	ldw	r4,-8(fp)
 10028fc:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 1002900:	00800044 	movi	r2,1
 1002904:	e0bffd15 	stw	r2,-12(fp)

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 1002908:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 100290c:	e0bffd17 	ldw	r2,-12(fp)
}
 1002910:	e037883a 	mov	sp,fp
 1002914:	dfc00117 	ldw	ra,4(sp)
 1002918:	df000017 	ldw	fp,0(sp)
 100291c:	dec00204 	addi	sp,sp,8
 1002920:	f800283a 	ret

01002924 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 1002924:	defffb04 	addi	sp,sp,-20
 1002928:	df000415 	stw	fp,16(sp)
 100292c:	df000404 	addi	fp,sp,16
 1002930:	e13ffe15 	stw	r4,-8(fp)
 1002934:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002938:	e0bffe17 	ldw	r2,-8(fp)
 100293c:	e0bffd15 	stw	r2,-12(fp)
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 1002940:	e0bfff17 	ldw	r2,-4(fp)
 1002944:	1000021e 	bne	r2,zero,1002950 <xStreamBufferSetTriggerLevel+0x2c>
	{
		xTriggerLevel = ( size_t ) 1;
 1002948:	00800044 	movi	r2,1
 100294c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 1002950:	e0bffd17 	ldw	r2,-12(fp)
 1002954:	10c00217 	ldw	r3,8(r2)
 1002958:	e0bfff17 	ldw	r2,-4(fp)
 100295c:	18800636 	bltu	r3,r2,1002978 <xStreamBufferSetTriggerLevel+0x54>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 1002960:	e0bffd17 	ldw	r2,-12(fp)
 1002964:	e0ffff17 	ldw	r3,-4(fp)
 1002968:	10c00315 	stw	r3,12(r2)
		xReturn = pdPASS;
 100296c:	00800044 	movi	r2,1
 1002970:	e0bffc15 	stw	r2,-16(fp)
 1002974:	00000106 	br	100297c <xStreamBufferSetTriggerLevel+0x58>
	}
	else
	{
		xReturn = pdFALSE;
 1002978:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 100297c:	e0bffc17 	ldw	r2,-16(fp)
}
 1002980:	e037883a 	mov	sp,fp
 1002984:	df000017 	ldw	fp,0(sp)
 1002988:	dec00104 	addi	sp,sp,4
 100298c:	f800283a 	ret

01002990 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002990:	defffc04 	addi	sp,sp,-16
 1002994:	df000315 	stw	fp,12(sp)
 1002998:	df000304 	addi	fp,sp,12
 100299c:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10029a0:	e0bfff17 	ldw	r2,-4(fp)
 10029a4:	e0bffe15 	stw	r2,-8(fp)
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 10029a8:	e0bffe17 	ldw	r2,-8(fp)
 10029ac:	10c00217 	ldw	r3,8(r2)
 10029b0:	e0bffe17 	ldw	r2,-8(fp)
 10029b4:	10800017 	ldw	r2,0(r2)
 10029b8:	1885883a 	add	r2,r3,r2
 10029bc:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= pxStreamBuffer->xHead;
 10029c0:	e0bffe17 	ldw	r2,-8(fp)
 10029c4:	10800117 	ldw	r2,4(r2)
 10029c8:	e0fffd17 	ldw	r3,-12(fp)
 10029cc:	1885c83a 	sub	r2,r3,r2
 10029d0:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= ( size_t ) 1;
 10029d4:	e0bffd17 	ldw	r2,-12(fp)
 10029d8:	10bfffc4 	addi	r2,r2,-1
 10029dc:	e0bffd15 	stw	r2,-12(fp)

	if( xSpace >= pxStreamBuffer->xLength )
 10029e0:	e0bffe17 	ldw	r2,-8(fp)
 10029e4:	10800217 	ldw	r2,8(r2)
 10029e8:	e0fffd17 	ldw	r3,-12(fp)
 10029ec:	18800536 	bltu	r3,r2,1002a04 <xStreamBufferSpacesAvailable+0x74>
	{
		xSpace -= pxStreamBuffer->xLength;
 10029f0:	e0bffe17 	ldw	r2,-8(fp)
 10029f4:	10800217 	ldw	r2,8(r2)
 10029f8:	e0fffd17 	ldw	r3,-12(fp)
 10029fc:	1885c83a 	sub	r2,r3,r2
 1002a00:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 1002a04:	e0bffd17 	ldw	r2,-12(fp)
}
 1002a08:	e037883a 	mov	sp,fp
 1002a0c:	df000017 	ldw	fp,0(sp)
 1002a10:	dec00104 	addi	sp,sp,4
 1002a14:	f800283a 	ret

01002a18 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002a18:	defffb04 	addi	sp,sp,-20
 1002a1c:	dfc00415 	stw	ra,16(sp)
 1002a20:	df000315 	stw	fp,12(sp)
 1002a24:	df000304 	addi	fp,sp,12
 1002a28:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a2c:	e0bfff17 	ldw	r2,-4(fp)
 1002a30:	e0bffd15 	stw	r2,-12(fp)
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 1002a34:	e13ffd17 	ldw	r4,-12(fp)
 1002a38:	10035280 	call	1003528 <prvBytesInBuffer>
 1002a3c:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1002a40:	e0bffe17 	ldw	r2,-8(fp)
}
 1002a44:	e037883a 	mov	sp,fp
 1002a48:	dfc00117 	ldw	ra,4(sp)
 1002a4c:	df000017 	ldw	fp,0(sp)
 1002a50:	dec00204 	addi	sp,sp,8
 1002a54:	f800283a 	ret

01002a58 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 1002a58:	defff304 	addi	sp,sp,-52
 1002a5c:	dfc00c15 	stw	ra,48(sp)
 1002a60:	df000b15 	stw	fp,44(sp)
 1002a64:	df000b04 	addi	fp,sp,44
 1002a68:	e13ffc15 	stw	r4,-16(fp)
 1002a6c:	e17ffd15 	stw	r5,-12(fp)
 1002a70:	e1bffe15 	stw	r6,-8(fp)
 1002a74:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a78:	e0bffc17 	ldw	r2,-16(fp)
 1002a7c:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace = 0;
 1002a80:	e03ff615 	stw	zero,-40(fp)
size_t xRequiredSpace = xDataLengthBytes;
 1002a84:	e0bffe17 	ldw	r2,-8(fp)
 1002a88:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002a8c:	e0bff817 	ldw	r2,-32(fp)
 1002a90:	10800703 	ldbu	r2,28(r2)
 1002a94:	10803fcc 	andi	r2,r2,255
 1002a98:	1080004c 	andi	r2,r2,1
 1002a9c:	10000326 	beq	r2,zero,1002aac <xStreamBufferSend+0x54>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002aa0:	e0bff717 	ldw	r2,-36(fp)
 1002aa4:	10800104 	addi	r2,r2,4
 1002aa8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002aac:	e0bfff17 	ldw	r2,-4(fp)
 1002ab0:	10002226 	beq	r2,zero,1002b3c <xStreamBufferSend+0xe4>
	{
		vTaskSetTimeOutState( &xTimeOut );
 1002ab4:	e0bffa04 	addi	r2,fp,-24
 1002ab8:	1009883a 	mov	r4,r2
 1002abc:	1004a8c0 	call	1004a8c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 1002ac0:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002ac4:	e13ff817 	ldw	r4,-32(fp)
 1002ac8:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002acc:	e0bff615 	stw	r2,-40(fp)

				if( xSpace < xRequiredSpace )
 1002ad0:	e0fff617 	ldw	r3,-40(fp)
 1002ad4:	e0bff717 	ldw	r2,-36(fp)
 1002ad8:	1880072e 	bgeu	r3,r2,1002af8 <xStreamBufferSend+0xa0>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 1002adc:	0009883a 	mov	r4,zero
 1002ae0:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 1002ae4:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002ae8:	1007883a 	mov	r3,r2
 1002aec:	e0bff817 	ldw	r2,-32(fp)
 1002af0:	10c00515 	stw	r3,20(r2)
 1002af4:	00000206 	br	1002b00 <xStreamBufferSend+0xa8>
				}
				else
				{
					taskEXIT_CRITICAL();
 1002af8:	10052c40 	call	10052c4 <vTaskExitCritical>
					break;
 1002afc:	00000f06 	br	1002b3c <xStreamBufferSend+0xe4>
				}
			}
			taskEXIT_CRITICAL();
 1002b00:	10052c40 	call	10052c4 <vTaskExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002b04:	e0bfff17 	ldw	r2,-4(fp)
 1002b08:	100f883a 	mov	r7,r2
 1002b0c:	000d883a 	mov	r6,zero
 1002b10:	000b883a 	mov	r5,zero
 1002b14:	0009883a 	mov	r4,zero
 1002b18:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 1002b1c:	e0bff817 	ldw	r2,-32(fp)
 1002b20:	10000515 	stw	zero,20(r2)

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 1002b24:	e0ffff04 	addi	r3,fp,-4
 1002b28:	e0bffa04 	addi	r2,fp,-24
 1002b2c:	180b883a 	mov	r5,r3
 1002b30:	1009883a 	mov	r4,r2
 1002b34:	1004b140 	call	1004b14 <xTaskCheckForTimeOut>
 1002b38:	103fe126 	beq	r2,zero,1002ac0 <__alt_data_end+0xff002ac0>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 1002b3c:	e0bff617 	ldw	r2,-40(fp)
 1002b40:	1000031e 	bne	r2,zero,1002b50 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002b44:	e13ff817 	ldw	r4,-32(fp)
 1002b48:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002b4c:	e0bff615 	stw	r2,-40(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002b50:	e0bff717 	ldw	r2,-36(fp)
 1002b54:	d8800015 	stw	r2,0(sp)
 1002b58:	e1fff617 	ldw	r7,-40(fp)
 1002b5c:	e1bffe17 	ldw	r6,-8(fp)
 1002b60:	e17ffd17 	ldw	r5,-12(fp)
 1002b64:	e13ff817 	ldw	r4,-32(fp)
 1002b68:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002b6c:	e0bff915 	stw	r2,-28(fp)

	if( xReturn > ( size_t ) 0 )
 1002b70:	e0bff917 	ldw	r2,-28(fp)
 1002b74:	10001426 	beq	r2,zero,1002bc8 <xStreamBufferSend+0x170>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002b78:	e13ff817 	ldw	r4,-32(fp)
 1002b7c:	10035280 	call	1003528 <prvBytesInBuffer>
 1002b80:	1007883a 	mov	r3,r2
 1002b84:	e0bff817 	ldw	r2,-32(fp)
 1002b88:	10800317 	ldw	r2,12(r2)
 1002b8c:	18800e36 	bltu	r3,r2,1002bc8 <xStreamBufferSend+0x170>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 1002b90:	100435c0 	call	100435c <vTaskSuspendAll>
 1002b94:	e0bff817 	ldw	r2,-32(fp)
 1002b98:	10800417 	ldw	r2,16(r2)
 1002b9c:	10000926 	beq	r2,zero,1002bc4 <xStreamBufferSend+0x16c>
 1002ba0:	e0bff817 	ldw	r2,-32(fp)
 1002ba4:	10800417 	ldw	r2,16(r2)
 1002ba8:	000f883a 	mov	r7,zero
 1002bac:	000d883a 	mov	r6,zero
 1002bb0:	000b883a 	mov	r5,zero
 1002bb4:	1009883a 	mov	r4,r2
 1002bb8:	10055440 	call	1005544 <xTaskGenericNotify>
 1002bbc:	e0bff817 	ldw	r2,-32(fp)
 1002bc0:	10000415 	stw	zero,16(r2)
 1002bc4:	10043880 	call	1004388 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 1002bc8:	e0bff917 	ldw	r2,-28(fp)
}
 1002bcc:	e037883a 	mov	sp,fp
 1002bd0:	dfc00117 	ldw	ra,4(sp)
 1002bd4:	df000017 	ldw	fp,0(sp)
 1002bd8:	dec00204 	addi	sp,sp,8
 1002bdc:	f800283a 	ret

01002be0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002be0:	defff404 	addi	sp,sp,-48
 1002be4:	dfc00b15 	stw	ra,44(sp)
 1002be8:	df000a15 	stw	fp,40(sp)
 1002bec:	df000a04 	addi	fp,sp,40
 1002bf0:	e13ffc15 	stw	r4,-16(fp)
 1002bf4:	e17ffd15 	stw	r5,-12(fp)
 1002bf8:	e1bffe15 	stw	r6,-8(fp)
 1002bfc:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002c00:	e0bffc17 	ldw	r2,-16(fp)
 1002c04:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 1002c08:	e0bffe17 	ldw	r2,-8(fp)
 1002c0c:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002c10:	e0bff817 	ldw	r2,-32(fp)
 1002c14:	10800703 	ldbu	r2,28(r2)
 1002c18:	10803fcc 	andi	r2,r2,255
 1002c1c:	1080004c 	andi	r2,r2,1
 1002c20:	10000326 	beq	r2,zero,1002c30 <xStreamBufferSendFromISR+0x50>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002c24:	e0bff717 	ldw	r2,-36(fp)
 1002c28:	10800104 	addi	r2,r2,4
 1002c2c:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002c30:	e13ff817 	ldw	r4,-32(fp)
 1002c34:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002c38:	e0bff915 	stw	r2,-28(fp)
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002c3c:	e0bff717 	ldw	r2,-36(fp)
 1002c40:	d8800015 	stw	r2,0(sp)
 1002c44:	e1fff917 	ldw	r7,-28(fp)
 1002c48:	e1bffe17 	ldw	r6,-8(fp)
 1002c4c:	e17ffd17 	ldw	r5,-12(fp)
 1002c50:	e13ff817 	ldw	r4,-32(fp)
 1002c54:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002c58:	e0bffa15 	stw	r2,-24(fp)

	if( xReturn > ( size_t ) 0 )
 1002c5c:	e0bffa17 	ldw	r2,-24(fp)
 1002c60:	10001526 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002c64:	e13ff817 	ldw	r4,-32(fp)
 1002c68:	10035280 	call	1003528 <prvBytesInBuffer>
 1002c6c:	1007883a 	mov	r3,r2
 1002c70:	e0bff817 	ldw	r2,-32(fp)
 1002c74:	10800317 	ldw	r2,12(r2)
 1002c78:	18800f36 	bltu	r3,r2,1002cb8 <xStreamBufferSendFromISR+0xd8>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1002c7c:	e03ffb15 	stw	zero,-20(fp)
 1002c80:	e0bff817 	ldw	r2,-32(fp)
 1002c84:	10800417 	ldw	r2,16(r2)
 1002c88:	10000b26 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
 1002c8c:	e0bff817 	ldw	r2,-32(fp)
 1002c90:	10c00417 	ldw	r3,16(r2)
 1002c94:	e0bfff17 	ldw	r2,-4(fp)
 1002c98:	d8800015 	stw	r2,0(sp)
 1002c9c:	000f883a 	mov	r7,zero
 1002ca0:	000d883a 	mov	r6,zero
 1002ca4:	000b883a 	mov	r5,zero
 1002ca8:	1809883a 	mov	r4,r3
 1002cac:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1002cb0:	e0bff817 	ldw	r2,-32(fp)
 1002cb4:	10000415 	stw	zero,16(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 1002cb8:	e0bffa17 	ldw	r2,-24(fp)
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	dfc00117 	ldw	ra,4(sp)
 1002cc4:	df000017 	ldw	fp,0(sp)
 1002cc8:	dec00204 	addi	sp,sp,8
 1002ccc:	f800283a 	ret

01002cd0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 1002cd0:	defff804 	addi	sp,sp,-32
 1002cd4:	dfc00715 	stw	ra,28(sp)
 1002cd8:	df000615 	stw	fp,24(sp)
 1002cdc:	df000604 	addi	fp,sp,24
 1002ce0:	e13ffc15 	stw	r4,-16(fp)
 1002ce4:	e17ffd15 	stw	r5,-12(fp)
 1002ce8:	e1bffe15 	stw	r6,-8(fp)
 1002cec:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 1002cf0:	e0bfff17 	ldw	r2,-4(fp)
 1002cf4:	1000021e 	bne	r2,zero,1002d00 <prvWriteMessageToBuffer+0x30>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 1002cf8:	e03ffa15 	stw	zero,-24(fp)
 1002cfc:	00001906 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 1002d00:	e0bffc17 	ldw	r2,-16(fp)
 1002d04:	10800703 	ldbu	r2,28(r2)
 1002d08:	10803fcc 	andi	r2,r2,255
 1002d0c:	1080004c 	andi	r2,r2,1
 1002d10:	1000081e 	bne	r2,zero,1002d34 <prvWriteMessageToBuffer+0x64>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 1002d14:	00800044 	movi	r2,1
 1002d18:	e0bffa15 	stw	r2,-24(fp)
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 1002d1c:	e0fffe17 	ldw	r3,-8(fp)
 1002d20:	e0bfff17 	ldw	r2,-4(fp)
 1002d24:	1880012e 	bgeu	r3,r2,1002d2c <prvWriteMessageToBuffer+0x5c>
 1002d28:	1805883a 	mov	r2,r3
 1002d2c:	e0bffe15 	stw	r2,-8(fp)
 1002d30:	00000c06 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( xSpace >= xRequiredSpace )
 1002d34:	e0ffff17 	ldw	r3,-4(fp)
 1002d38:	e0800217 	ldw	r2,8(fp)
 1002d3c:	18800836 	bltu	r3,r2,1002d60 <prvWriteMessageToBuffer+0x90>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 1002d40:	00800044 	movi	r2,1
 1002d44:	e0bffa15 	stw	r2,-24(fp)
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 1002d48:	e0bffe04 	addi	r2,fp,-8
 1002d4c:	01800104 	movi	r6,4
 1002d50:	100b883a 	mov	r5,r2
 1002d54:	e13ffc17 	ldw	r4,-16(fp)
 1002d58:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d5c:	00000106 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 1002d60:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xShouldWrite != pdFALSE )
 1002d64:	e0bffa17 	ldw	r2,-24(fp)
 1002d68:	10000726 	beq	r2,zero,1002d88 <prvWriteMessageToBuffer+0xb8>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 1002d6c:	e0bffe17 	ldw	r2,-8(fp)
 1002d70:	100d883a 	mov	r6,r2
 1002d74:	e17ffd17 	ldw	r5,-12(fp)
 1002d78:	e13ffc17 	ldw	r4,-16(fp)
 1002d7c:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d80:	e0bffb15 	stw	r2,-20(fp)
 1002d84:	00000106 	br	1002d8c <prvWriteMessageToBuffer+0xbc>
	}
	else
	{
		xReturn = 0;
 1002d88:	e03ffb15 	stw	zero,-20(fp)
	}

	return xReturn;
 1002d8c:	e0bffb17 	ldw	r2,-20(fp)
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	dfc00117 	ldw	ra,4(sp)
 1002d98:	df000017 	ldw	fp,0(sp)
 1002d9c:	dec00204 	addi	sp,sp,8
 1002da0:	f800283a 	ret

01002da4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 1002da4:	defff504 	addi	sp,sp,-44
 1002da8:	dfc00a15 	stw	ra,40(sp)
 1002dac:	df000915 	stw	fp,36(sp)
 1002db0:	df000904 	addi	fp,sp,36
 1002db4:	e13ffc15 	stw	r4,-16(fp)
 1002db8:	e17ffd15 	stw	r5,-12(fp)
 1002dbc:	e1bffe15 	stw	r6,-8(fp)
 1002dc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002dc4:	e0bffc17 	ldw	r2,-16(fp)
 1002dc8:	e0bffb15 	stw	r2,-20(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002dcc:	e03ff815 	stw	zero,-32(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002dd0:	e0bffb17 	ldw	r2,-20(fp)
 1002dd4:	10800703 	ldbu	r2,28(r2)
 1002dd8:	10803fcc 	andi	r2,r2,255
 1002ddc:	1080004c 	andi	r2,r2,1
 1002de0:	10000326 	beq	r2,zero,1002df0 <xStreamBufferReceive+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002de4:	00800104 	movi	r2,4
 1002de8:	e0bffa15 	stw	r2,-24(fp)
 1002dec:	00000106 	br	1002df4 <xStreamBufferReceive+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002df0:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002df4:	e0bfff17 	ldw	r2,-4(fp)
 1002df8:	10001c26 	beq	r2,zero,1002e6c <xStreamBufferReceive+0xc8>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 1002dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e00:	e13ffb17 	ldw	r4,-20(fp)
 1002e04:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e08:	e0bff915 	stw	r2,-28(fp)
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e0c:	e0bff917 	ldw	r2,-28(fp)
 1002e10:	e0fffa17 	ldw	r3,-24(fp)
 1002e14:	18800636 	bltu	r3,r2,1002e30 <xStreamBufferReceive+0x8c>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 1002e18:	0009883a 	mov	r4,zero
 1002e1c:	10059f40 	call	10059f4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1002e20:	1004ecc0 	call	1004ecc <xTaskGetCurrentTaskHandle>
 1002e24:	1007883a 	mov	r3,r2
 1002e28:	e0bffb17 	ldw	r2,-20(fp)
 1002e2c:	10c00415 	stw	r3,16(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1002e30:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e34:	e0bff917 	ldw	r2,-28(fp)
 1002e38:	e0fffa17 	ldw	r3,-24(fp)
 1002e3c:	18800e36 	bltu	r3,r2,1002e78 <xStreamBufferReceive+0xd4>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002e40:	e1ffff17 	ldw	r7,-4(fp)
 1002e44:	000d883a 	mov	r6,zero
 1002e48:	000b883a 	mov	r5,zero
 1002e4c:	0009883a 	mov	r4,zero
 1002e50:	10054500 	call	1005450 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1002e54:	e0bffb17 	ldw	r2,-20(fp)
 1002e58:	10000415 	stw	zero,16(r2)

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e5c:	e13ffb17 	ldw	r4,-20(fp)
 1002e60:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e64:	e0bff915 	stw	r2,-28(fp)
 1002e68:	00000306 	br	1002e78 <xStreamBufferReceive+0xd4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e6c:	e13ffb17 	ldw	r4,-20(fp)
 1002e70:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e74:	e0bff915 	stw	r2,-28(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1002e78:	e0bff917 	ldw	r2,-28(fp)
 1002e7c:	e0fffa17 	ldw	r3,-24(fp)
 1002e80:	1880182e 	bgeu	r3,r2,1002ee4 <xStreamBufferReceive+0x140>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 1002e84:	e0bffa17 	ldw	r2,-24(fp)
 1002e88:	d8800015 	stw	r2,0(sp)
 1002e8c:	e1fff917 	ldw	r7,-28(fp)
 1002e90:	e1bffe17 	ldw	r6,-8(fp)
 1002e94:	e17ffd17 	ldw	r5,-12(fp)
 1002e98:	e13ffb17 	ldw	r4,-20(fp)
 1002e9c:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1002ea0:	e0bff815 	stw	r2,-32(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 1002ea4:	e0bff817 	ldw	r2,-32(fp)
 1002ea8:	10000e26 	beq	r2,zero,1002ee4 <xStreamBufferReceive+0x140>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 1002eac:	100435c0 	call	100435c <vTaskSuspendAll>
 1002eb0:	e0bffb17 	ldw	r2,-20(fp)
 1002eb4:	10800517 	ldw	r2,20(r2)
 1002eb8:	10000926 	beq	r2,zero,1002ee0 <xStreamBufferReceive+0x13c>
 1002ebc:	e0bffb17 	ldw	r2,-20(fp)
 1002ec0:	10800517 	ldw	r2,20(r2)
 1002ec4:	000f883a 	mov	r7,zero
 1002ec8:	000d883a 	mov	r6,zero
 1002ecc:	000b883a 	mov	r5,zero
 1002ed0:	1009883a 	mov	r4,r2
 1002ed4:	10055440 	call	1005544 <xTaskGenericNotify>
 1002ed8:	e0bffb17 	ldw	r2,-20(fp)
 1002edc:	10000515 	stw	zero,20(r2)
 1002ee0:	10043880 	call	1004388 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 1002ee4:	e0bff817 	ldw	r2,-32(fp)
}
 1002ee8:	e037883a 	mov	sp,fp
 1002eec:	dfc00117 	ldw	ra,4(sp)
 1002ef0:	df000017 	ldw	fp,0(sp)
 1002ef4:	dec00204 	addi	sp,sp,8
 1002ef8:	f800283a 	ret

01002efc <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 1002efc:	defff804 	addi	sp,sp,-32
 1002f00:	dfc00715 	stw	ra,28(sp)
 1002f04:	df000615 	stw	fp,24(sp)
 1002f08:	df000604 	addi	fp,sp,24
 1002f0c:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002f10:	e0bfff17 	ldw	r2,-4(fp)
 1002f14:	e0bffb15 	stw	r2,-20(fp)
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002f18:	e0bffb17 	ldw	r2,-20(fp)
 1002f1c:	10800703 	ldbu	r2,28(r2)
 1002f20:	10803fcc 	andi	r2,r2,255
 1002f24:	1080004c 	andi	r2,r2,1
 1002f28:	10001726 	beq	r2,zero,1002f88 <xStreamBufferNextMessageLengthBytes+0x8c>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002f2c:	e13ffb17 	ldw	r4,-20(fp)
 1002f30:	10035280 	call	1003528 <prvBytesInBuffer>
 1002f34:	e0bffc15 	stw	r2,-16(fp)
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 1002f38:	e0bffc17 	ldw	r2,-16(fp)
 1002f3c:	10800170 	cmpltui	r2,r2,5
 1002f40:	10000f1e 	bne	r2,zero,1002f80 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 1002f44:	e0bffb17 	ldw	r2,-20(fp)
 1002f48:	10800017 	ldw	r2,0(r2)
 1002f4c:	e0bffd15 	stw	r2,-12(fp)
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 1002f50:	e0bffe04 	addi	r2,fp,-8
 1002f54:	e1fffc17 	ldw	r7,-16(fp)
 1002f58:	01800104 	movi	r6,4
 1002f5c:	100b883a 	mov	r5,r2
 1002f60:	e13ffb17 	ldw	r4,-20(fp)
 1002f64:	10034140 	call	1003414 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 1002f68:	e0bffe17 	ldw	r2,-8(fp)
 1002f6c:	e0bffa15 	stw	r2,-24(fp)
			pxStreamBuffer->xTail = xOriginalTail;
 1002f70:	e0bffb17 	ldw	r2,-20(fp)
 1002f74:	e0fffd17 	ldw	r3,-12(fp)
 1002f78:	10c00015 	stw	r3,0(r2)
 1002f7c:	00000306 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
 1002f80:	e03ffa15 	stw	zero,-24(fp)
 1002f84:	00000106 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
		}
	}
	else
	{
		xReturn = 0;
 1002f88:	e03ffa15 	stw	zero,-24(fp)
	}

	return xReturn;
 1002f8c:	e0bffa17 	ldw	r2,-24(fp)
}
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002fa4:	defff404 	addi	sp,sp,-48
 1002fa8:	dfc00b15 	stw	ra,44(sp)
 1002fac:	df000a15 	stw	fp,40(sp)
 1002fb0:	df000a04 	addi	fp,sp,40
 1002fb4:	e13ffc15 	stw	r4,-16(fp)
 1002fb8:	e17ffd15 	stw	r5,-12(fp)
 1002fbc:	e1bffe15 	stw	r6,-8(fp)
 1002fc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002fc4:	e0bffc17 	ldw	r2,-16(fp)
 1002fc8:	e0bff915 	stw	r2,-28(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002fcc:	e03ff715 	stw	zero,-36(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002fd0:	e0bff917 	ldw	r2,-28(fp)
 1002fd4:	10800703 	ldbu	r2,28(r2)
 1002fd8:	10803fcc 	andi	r2,r2,255
 1002fdc:	1080004c 	andi	r2,r2,1
 1002fe0:	10000326 	beq	r2,zero,1002ff0 <xStreamBufferReceiveFromISR+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002fe4:	00800104 	movi	r2,4
 1002fe8:	e0bff815 	stw	r2,-32(fp)
 1002fec:	00000106 	br	1002ff4 <xStreamBufferReceiveFromISR+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002ff0:	e03ff815 	stw	zero,-32(fp)
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002ff4:	e13ff917 	ldw	r4,-28(fp)
 1002ff8:	10035280 	call	1003528 <prvBytesInBuffer>
 1002ffc:	e0bffa15 	stw	r2,-24(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1003000:	e0bffa17 	ldw	r2,-24(fp)
 1003004:	e0fff817 	ldw	r3,-32(fp)
 1003008:	1880192e 	bgeu	r3,r2,1003070 <xStreamBufferReceiveFromISR+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 100300c:	e0bff817 	ldw	r2,-32(fp)
 1003010:	d8800015 	stw	r2,0(sp)
 1003014:	e1fffa17 	ldw	r7,-24(fp)
 1003018:	e1bffe17 	ldw	r6,-8(fp)
 100301c:	e17ffd17 	ldw	r5,-12(fp)
 1003020:	e13ff917 	ldw	r4,-28(fp)
 1003024:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1003028:	e0bff715 	stw	r2,-36(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 100302c:	e0bff717 	ldw	r2,-36(fp)
 1003030:	10000f26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1003034:	e03ffb15 	stw	zero,-20(fp)
 1003038:	e0bff917 	ldw	r2,-28(fp)
 100303c:	10800517 	ldw	r2,20(r2)
 1003040:	10000b26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
 1003044:	e0bff917 	ldw	r2,-28(fp)
 1003048:	10c00517 	ldw	r3,20(r2)
 100304c:	e0bfff17 	ldw	r2,-4(fp)
 1003050:	d8800015 	stw	r2,0(sp)
 1003054:	000f883a 	mov	r7,zero
 1003058:	000d883a 	mov	r6,zero
 100305c:	000b883a 	mov	r5,zero
 1003060:	1809883a 	mov	r4,r3
 1003064:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
 1003068:	e0bff917 	ldw	r2,-28(fp)
 100306c:	10000515 	stw	zero,20(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 1003070:	e0bff717 	ldw	r2,-36(fp)
}
 1003074:	e037883a 	mov	sp,fp
 1003078:	dfc00117 	ldw	ra,4(sp)
 100307c:	df000017 	ldw	fp,0(sp)
 1003080:	dec00204 	addi	sp,sp,8
 1003084:	f800283a 	ret

01003088 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 1003088:	defff604 	addi	sp,sp,-40
 100308c:	dfc00915 	stw	ra,36(sp)
 1003090:	df000815 	stw	fp,32(sp)
 1003094:	df000804 	addi	fp,sp,32
 1003098:	e13ffc15 	stw	r4,-16(fp)
 100309c:	e17ffd15 	stw	r5,-12(fp)
 10030a0:	e1bffe15 	stw	r6,-8(fp)
 10030a4:	e1ffff15 	stw	r7,-4(fp)
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 10030a8:	e0800217 	ldw	r2,8(fp)
 10030ac:	10001726 	beq	r2,zero,100310c <prvReadMessageFromBuffer+0x84>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 10030b0:	e0bffc17 	ldw	r2,-16(fp)
 10030b4:	10800017 	ldw	r2,0(r2)
 10030b8:	e0bff915 	stw	r2,-28(fp)
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 10030bc:	e0bffb04 	addi	r2,fp,-20
 10030c0:	e1ffff17 	ldw	r7,-4(fp)
 10030c4:	e1800217 	ldw	r6,8(fp)
 10030c8:	100b883a 	mov	r5,r2
 10030cc:	e13ffc17 	ldw	r4,-16(fp)
 10030d0:	10034140 	call	1003414 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 10030d4:	e0bffb17 	ldw	r2,-20(fp)
 10030d8:	e0bff815 	stw	r2,-32(fp)

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 10030dc:	e0ffff17 	ldw	r3,-4(fp)
 10030e0:	e0800217 	ldw	r2,8(fp)
 10030e4:	1885c83a 	sub	r2,r3,r2
 10030e8:	e0bfff15 	stw	r2,-4(fp)

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 10030ec:	e0bff817 	ldw	r2,-32(fp)
 10030f0:	e0fffe17 	ldw	r3,-8(fp)
 10030f4:	1880072e 	bgeu	r3,r2,1003114 <prvReadMessageFromBuffer+0x8c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 10030f8:	e0bffc17 	ldw	r2,-16(fp)
 10030fc:	e0fff917 	ldw	r3,-28(fp)
 1003100:	10c00015 	stw	r3,0(r2)
			xNextMessageLength = 0;
 1003104:	e03ff815 	stw	zero,-32(fp)
 1003108:	00000206 	br	1003114 <prvReadMessageFromBuffer+0x8c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 100310c:	e0bffe17 	ldw	r2,-8(fp)
 1003110:	e0bff815 	stw	r2,-32(fp)
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 1003114:	e1ffff17 	ldw	r7,-4(fp)
 1003118:	e1bff817 	ldw	r6,-32(fp)
 100311c:	e17ffd17 	ldw	r5,-12(fp)
 1003120:	e13ffc17 	ldw	r4,-16(fp)
 1003124:	10034140 	call	1003414 <prvReadBytesFromBuffer>
 1003128:	e0bffa15 	stw	r2,-24(fp)

	return xReceivedLength;
 100312c:	e0bffa17 	ldw	r2,-24(fp)
}
 1003130:	e037883a 	mov	sp,fp
 1003134:	dfc00117 	ldw	ra,4(sp)
 1003138:	df000017 	ldw	fp,0(sp)
 100313c:	dec00204 	addi	sp,sp,8
 1003140:	f800283a 	ret

01003144 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 1003144:	defffb04 	addi	sp,sp,-20
 1003148:	df000415 	stw	fp,16(sp)
 100314c:	df000404 	addi	fp,sp,16
 1003150:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003154:	e0bfff17 	ldw	r2,-4(fp)
 1003158:	e0bffd15 	stw	r2,-12(fp)
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 100315c:	e0bffd17 	ldw	r2,-12(fp)
 1003160:	10800017 	ldw	r2,0(r2)
 1003164:	e0bffe15 	stw	r2,-8(fp)
	if( pxStreamBuffer->xHead == xTail )
 1003168:	e0bffd17 	ldw	r2,-12(fp)
 100316c:	10c00117 	ldw	r3,4(r2)
 1003170:	e0bffe17 	ldw	r2,-8(fp)
 1003174:	1880031e 	bne	r3,r2,1003184 <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 1003178:	00800044 	movi	r2,1
 100317c:	e0bffc15 	stw	r2,-16(fp)
 1003180:	00000106 	br	1003188 <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 1003184:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003188:	e0bffc17 	ldw	r2,-16(fp)
}
 100318c:	e037883a 	mov	sp,fp
 1003190:	df000017 	ldw	fp,0(sp)
 1003194:	dec00104 	addi	sp,sp,4
 1003198:	f800283a 	ret

0100319c <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 100319c:	defffa04 	addi	sp,sp,-24
 10031a0:	dfc00515 	stw	ra,20(sp)
 10031a4:	df000415 	stw	fp,16(sp)
 10031a8:	df000404 	addi	fp,sp,16
 10031ac:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10031b0:	e0bfff17 	ldw	r2,-4(fp)
 10031b4:	e0bffe15 	stw	r2,-8(fp)

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 10031b8:	e0bffe17 	ldw	r2,-8(fp)
 10031bc:	10800703 	ldbu	r2,28(r2)
 10031c0:	10803fcc 	andi	r2,r2,255
 10031c4:	1080004c 	andi	r2,r2,1
 10031c8:	10000326 	beq	r2,zero,10031d8 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 10031cc:	00800104 	movi	r2,4
 10031d0:	e0bffd15 	stw	r2,-12(fp)
 10031d4:	00000106 	br	10031dc <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 10031d8:	e03ffd15 	stw	zero,-12(fp)
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 10031dc:	e13fff17 	ldw	r4,-4(fp)
 10031e0:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 10031e4:	1007883a 	mov	r3,r2
 10031e8:	e0bffd17 	ldw	r2,-12(fp)
 10031ec:	10c00336 	bltu	r2,r3,10031fc <xStreamBufferIsFull+0x60>
	{
		xReturn = pdTRUE;
 10031f0:	00800044 	movi	r2,1
 10031f4:	e0bffc15 	stw	r2,-16(fp)
 10031f8:	00000106 	br	1003200 <xStreamBufferIsFull+0x64>
	}
	else
	{
		xReturn = pdFALSE;
 10031fc:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003200:	e0bffc17 	ldw	r2,-16(fp)
}
 1003204:	e037883a 	mov	sp,fp
 1003208:	dfc00117 	ldw	ra,4(sp)
 100320c:	df000017 	ldw	fp,0(sp)
 1003210:	dec00204 	addi	sp,sp,8
 1003214:	f800283a 	ret

01003218 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 1003218:	defff804 	addi	sp,sp,-32
 100321c:	dfc00715 	stw	ra,28(sp)
 1003220:	df000615 	stw	fp,24(sp)
 1003224:	df000604 	addi	fp,sp,24
 1003228:	e13ffe15 	stw	r4,-8(fp)
 100322c:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003230:	e0bffe17 	ldw	r2,-8(fp)
 1003234:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1003238:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 100323c:	e0bffc17 	ldw	r2,-16(fp)
 1003240:	10800417 	ldw	r2,16(r2)
 1003244:	10000e26 	beq	r2,zero,1003280 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1003248:	e0bffc17 	ldw	r2,-16(fp)
 100324c:	10c00417 	ldw	r3,16(r2)
 1003250:	e0bfff17 	ldw	r2,-4(fp)
 1003254:	d8800015 	stw	r2,0(sp)
 1003258:	000f883a 	mov	r7,zero
 100325c:	000d883a 	mov	r6,zero
 1003260:	000b883a 	mov	r5,zero
 1003264:	1809883a 	mov	r4,r3
 1003268:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 100326c:	e0bffc17 	ldw	r2,-16(fp)
 1003270:	10000415 	stw	zero,16(r2)
			xReturn = pdTRUE;
 1003274:	00800044 	movi	r2,1
 1003278:	e0bffb15 	stw	r2,-20(fp)
 100327c:	00000106 	br	1003284 <xStreamBufferSendCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003280:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003284:	e0bffb17 	ldw	r2,-20(fp)
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 100329c:	defff804 	addi	sp,sp,-32
 10032a0:	dfc00715 	stw	ra,28(sp)
 10032a4:	df000615 	stw	fp,24(sp)
 10032a8:	df000604 	addi	fp,sp,24
 10032ac:	e13ffe15 	stw	r4,-8(fp)
 10032b0:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10032b4:	e0bffe17 	ldw	r2,-8(fp)
 10032b8:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 10032bc:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 10032c0:	e0bffc17 	ldw	r2,-16(fp)
 10032c4:	10800517 	ldw	r2,20(r2)
 10032c8:	10000e26 	beq	r2,zero,1003304 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 10032cc:	e0bffc17 	ldw	r2,-16(fp)
 10032d0:	10c00517 	ldw	r3,20(r2)
 10032d4:	e0bfff17 	ldw	r2,-4(fp)
 10032d8:	d8800015 	stw	r2,0(sp)
 10032dc:	000f883a 	mov	r7,zero
 10032e0:	000d883a 	mov	r6,zero
 10032e4:	000b883a 	mov	r5,zero
 10032e8:	1809883a 	mov	r4,r3
 10032ec:	10056f00 	call	10056f0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 10032f0:	e0bffc17 	ldw	r2,-16(fp)
 10032f4:	10000515 	stw	zero,20(r2)
			xReturn = pdTRUE;
 10032f8:	00800044 	movi	r2,1
 10032fc:	e0bffb15 	stw	r2,-20(fp)
 1003300:	00000106 	br	1003308 <xStreamBufferReceiveCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003304:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003308:	e0bffb17 	ldw	r2,-20(fp)
}
 100330c:	e037883a 	mov	sp,fp
 1003310:	dfc00117 	ldw	ra,4(sp)
 1003314:	df000017 	ldw	fp,0(sp)
 1003318:	dec00204 	addi	sp,sp,8
 100331c:	f800283a 	ret

01003320 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 1003320:	defff904 	addi	sp,sp,-28
 1003324:	dfc00615 	stw	ra,24(sp)
 1003328:	df000515 	stw	fp,20(sp)
 100332c:	df000504 	addi	fp,sp,20
 1003330:	e13ffd15 	stw	r4,-12(fp)
 1003334:	e17ffe15 	stw	r5,-8(fp)
 1003338:	e1bfff15 	stw	r6,-4(fp)
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
 100333c:	e0bffd17 	ldw	r2,-12(fp)
 1003340:	10800117 	ldw	r2,4(r2)
 1003344:	e0bffb15 	stw	r2,-20(fp)

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1003348:	e0bffd17 	ldw	r2,-12(fp)
 100334c:	10c00217 	ldw	r3,8(r2)
 1003350:	e0bffb17 	ldw	r2,-20(fp)
 1003354:	1885c83a 	sub	r2,r3,r2
 1003358:	e0ffff17 	ldw	r3,-4(fp)
 100335c:	1880012e 	bgeu	r3,r2,1003364 <prvWriteBytesToBuffer+0x44>
 1003360:	1805883a 	mov	r2,r3
 1003364:	e0bffc15 	stw	r2,-16(fp)

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003368:	e0bffd17 	ldw	r2,-12(fp)
 100336c:	10c00617 	ldw	r3,24(r2)
 1003370:	e0bffb17 	ldw	r2,-20(fp)
 1003374:	1885883a 	add	r2,r3,r2
 1003378:	e1bffc17 	ldw	r6,-16(fp)
 100337c:	e17ffe17 	ldw	r5,-8(fp)
 1003380:	1009883a 	mov	r4,r2
 1003384:	10157f40 	call	10157f4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 1003388:	e0bfff17 	ldw	r2,-4(fp)
 100338c:	e0fffc17 	ldw	r3,-16(fp)
 1003390:	18800a2e 	bgeu	r3,r2,10033bc <prvWriteBytesToBuffer+0x9c>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003394:	e0bffd17 	ldw	r2,-12(fp)
 1003398:	11000617 	ldw	r4,24(r2)
 100339c:	e0fffe17 	ldw	r3,-8(fp)
 10033a0:	e0bffc17 	ldw	r2,-16(fp)
 10033a4:	188b883a 	add	r5,r3,r2
 10033a8:	e0ffff17 	ldw	r3,-4(fp)
 10033ac:	e0bffc17 	ldw	r2,-16(fp)
 10033b0:	1885c83a 	sub	r2,r3,r2
 10033b4:	100d883a 	mov	r6,r2
 10033b8:	10157f40 	call	10157f4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 10033bc:	e0fffb17 	ldw	r3,-20(fp)
 10033c0:	e0bfff17 	ldw	r2,-4(fp)
 10033c4:	1885883a 	add	r2,r3,r2
 10033c8:	e0bffb15 	stw	r2,-20(fp)
	if( xNextHead >= pxStreamBuffer->xLength )
 10033cc:	e0bffd17 	ldw	r2,-12(fp)
 10033d0:	10800217 	ldw	r2,8(r2)
 10033d4:	e0fffb17 	ldw	r3,-20(fp)
 10033d8:	18800536 	bltu	r3,r2,10033f0 <prvWriteBytesToBuffer+0xd0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 10033dc:	e0bffd17 	ldw	r2,-12(fp)
 10033e0:	10800217 	ldw	r2,8(r2)
 10033e4:	e0fffb17 	ldw	r3,-20(fp)
 10033e8:	1885c83a 	sub	r2,r3,r2
 10033ec:	e0bffb15 	stw	r2,-20(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 10033f0:	e0bffd17 	ldw	r2,-12(fp)
 10033f4:	e0fffb17 	ldw	r3,-20(fp)
 10033f8:	10c00115 	stw	r3,4(r2)

	return xCount;
 10033fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003400:	e037883a 	mov	sp,fp
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	df000017 	ldw	fp,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 1003414:	defff704 	addi	sp,sp,-36
 1003418:	dfc00815 	stw	ra,32(sp)
 100341c:	df000715 	stw	fp,28(sp)
 1003420:	df000704 	addi	fp,sp,28
 1003424:	e13ffc15 	stw	r4,-16(fp)
 1003428:	e17ffd15 	stw	r5,-12(fp)
 100342c:	e1bffe15 	stw	r6,-8(fp)
 1003430:	e1ffff15 	stw	r7,-4(fp)
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 1003434:	e0ffff17 	ldw	r3,-4(fp)
 1003438:	e0bffe17 	ldw	r2,-8(fp)
 100343c:	1880012e 	bgeu	r3,r2,1003444 <prvReadBytesFromBuffer+0x30>
 1003440:	1805883a 	mov	r2,r3
 1003444:	e0bffa15 	stw	r2,-24(fp)

	if( xCount > ( size_t ) 0 )
 1003448:	e0bffa17 	ldw	r2,-24(fp)
 100344c:	10003026 	beq	r2,zero,1003510 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 1003450:	e0bffc17 	ldw	r2,-16(fp)
 1003454:	10800017 	ldw	r2,0(r2)
 1003458:	e0bff915 	stw	r2,-28(fp)

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 100345c:	e0bffc17 	ldw	r2,-16(fp)
 1003460:	10c00217 	ldw	r3,8(r2)
 1003464:	e0bff917 	ldw	r2,-28(fp)
 1003468:	1885c83a 	sub	r2,r3,r2
 100346c:	e0fffa17 	ldw	r3,-24(fp)
 1003470:	1880012e 	bgeu	r3,r2,1003478 <prvReadBytesFromBuffer+0x64>
 1003474:	1805883a 	mov	r2,r3
 1003478:	e0bffb15 	stw	r2,-20(fp)

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 100347c:	e0bffc17 	ldw	r2,-16(fp)
 1003480:	10c00617 	ldw	r3,24(r2)
 1003484:	e0bff917 	ldw	r2,-28(fp)
 1003488:	1885883a 	add	r2,r3,r2
 100348c:	e1bffb17 	ldw	r6,-20(fp)
 1003490:	100b883a 	mov	r5,r2
 1003494:	e13ffd17 	ldw	r4,-12(fp)
 1003498:	10157f40 	call	10157f4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 100349c:	e0bffa17 	ldw	r2,-24(fp)
 10034a0:	e0fffb17 	ldw	r3,-20(fp)
 10034a4:	18800a2e 	bgeu	r3,r2,10034d0 <prvReadBytesFromBuffer+0xbc>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 10034a8:	e0fffd17 	ldw	r3,-12(fp)
 10034ac:	e0bffb17 	ldw	r2,-20(fp)
 10034b0:	1889883a 	add	r4,r3,r2
 10034b4:	e0bffc17 	ldw	r2,-16(fp)
 10034b8:	11400617 	ldw	r5,24(r2)
 10034bc:	e0fffa17 	ldw	r3,-24(fp)
 10034c0:	e0bffb17 	ldw	r2,-20(fp)
 10034c4:	1885c83a 	sub	r2,r3,r2
 10034c8:	100d883a 	mov	r6,r2
 10034cc:	10157f40 	call	10157f4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 10034d0:	e0fff917 	ldw	r3,-28(fp)
 10034d4:	e0bffa17 	ldw	r2,-24(fp)
 10034d8:	1885883a 	add	r2,r3,r2
 10034dc:	e0bff915 	stw	r2,-28(fp)

		if( xNextTail >= pxStreamBuffer->xLength )
 10034e0:	e0bffc17 	ldw	r2,-16(fp)
 10034e4:	10800217 	ldw	r2,8(r2)
 10034e8:	e0fff917 	ldw	r3,-28(fp)
 10034ec:	18800536 	bltu	r3,r2,1003504 <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 10034f0:	e0bffc17 	ldw	r2,-16(fp)
 10034f4:	10800217 	ldw	r2,8(r2)
 10034f8:	e0fff917 	ldw	r3,-28(fp)
 10034fc:	1885c83a 	sub	r2,r3,r2
 1003500:	e0bff915 	stw	r2,-28(fp)
		}

		pxStreamBuffer->xTail = xNextTail;
 1003504:	e0bffc17 	ldw	r2,-16(fp)
 1003508:	e0fff917 	ldw	r3,-28(fp)
 100350c:	10c00015 	stw	r3,0(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003510:	e0bffa17 	ldw	r2,-24(fp)
}
 1003514:	e037883a 	mov	sp,fp
 1003518:	dfc00117 	ldw	ra,4(sp)
 100351c:	df000017 	ldw	fp,0(sp)
 1003520:	dec00204 	addi	sp,sp,8
 1003524:	f800283a 	ret

01003528 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 1003528:	defffd04 	addi	sp,sp,-12
 100352c:	df000215 	stw	fp,8(sp)
 1003530:	df000204 	addi	fp,sp,8
 1003534:	e13fff15 	stw	r4,-4(fp)
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1003538:	e0bfff17 	ldw	r2,-4(fp)
 100353c:	10c00217 	ldw	r3,8(r2)
 1003540:	e0bfff17 	ldw	r2,-4(fp)
 1003544:	10800117 	ldw	r2,4(r2)
 1003548:	1885883a 	add	r2,r3,r2
 100354c:	e0bffe15 	stw	r2,-8(fp)
	xCount -= pxStreamBuffer->xTail;
 1003550:	e0bfff17 	ldw	r2,-4(fp)
 1003554:	10800017 	ldw	r2,0(r2)
 1003558:	e0fffe17 	ldw	r3,-8(fp)
 100355c:	1885c83a 	sub	r2,r3,r2
 1003560:	e0bffe15 	stw	r2,-8(fp)
	if ( xCount >= pxStreamBuffer->xLength )
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	10800217 	ldw	r2,8(r2)
 100356c:	e0fffe17 	ldw	r3,-8(fp)
 1003570:	18800536 	bltu	r3,r2,1003588 <prvBytesInBuffer+0x60>
	{
		xCount -= pxStreamBuffer->xLength;
 1003574:	e0bfff17 	ldw	r2,-4(fp)
 1003578:	10800217 	ldw	r2,8(r2)
 100357c:	e0fffe17 	ldw	r3,-8(fp)
 1003580:	1885c83a 	sub	r2,r3,r2
 1003584:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003588:	e0bffe17 	ldw	r2,-8(fp)
}
 100358c:	e037883a 	mov	sp,fp
 1003590:	df000017 	ldw	fp,0(sp)
 1003594:	dec00104 	addi	sp,sp,4
 1003598:	f800283a 	ret

0100359c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 100359c:	defff904 	addi	sp,sp,-28
 10035a0:	dfc00615 	stw	ra,24(sp)
 10035a4:	df000515 	stw	fp,20(sp)
 10035a8:	df000504 	addi	fp,sp,20
 10035ac:	e13ffb15 	stw	r4,-20(fp)
 10035b0:	e17ffc15 	stw	r5,-16(fp)
 10035b4:	e1bffd15 	stw	r6,-12(fp)
 10035b8:	e1fffe15 	stw	r7,-8(fp)
 10035bc:	e0800217 	ldw	r2,8(fp)
 10035c0:	e0bfff05 	stb	r2,-4(fp)
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 10035c4:	01800804 	movi	r6,32
 10035c8:	000b883a 	mov	r5,zero
 10035cc:	e13ffb17 	ldw	r4,-20(fp)
 10035d0:	101593c0 	call	101593c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 10035d4:	e0bffb17 	ldw	r2,-20(fp)
 10035d8:	e0fffc17 	ldw	r3,-16(fp)
 10035dc:	10c00615 	stw	r3,24(r2)
	pxStreamBuffer->xLength = xBufferSizeBytes;
 10035e0:	e0bffb17 	ldw	r2,-20(fp)
 10035e4:	e0fffd17 	ldw	r3,-12(fp)
 10035e8:	10c00215 	stw	r3,8(r2)
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 10035ec:	e0bffb17 	ldw	r2,-20(fp)
 10035f0:	e0fffe17 	ldw	r3,-8(fp)
 10035f4:	10c00315 	stw	r3,12(r2)
	pxStreamBuffer->ucFlags = ucFlags;
 10035f8:	e0bffb17 	ldw	r2,-20(fp)
 10035fc:	e0ffff03 	ldbu	r3,-4(fp)
 1003600:	10c00705 	stb	r3,28(r2)
}
 1003604:	0001883a 	nop
 1003608:	e037883a 	mov	sp,fp
 100360c:	dfc00117 	ldw	ra,4(sp)
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00204 	addi	sp,sp,8
 1003618:	f800283a 	ret

0100361c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 100361c:	defff304 	addi	sp,sp,-52
 1003620:	dfc00c15 	stw	ra,48(sp)
 1003624:	df000b15 	stw	fp,44(sp)
 1003628:	df000b04 	addi	fp,sp,44
 100362c:	e13ffc15 	stw	r4,-16(fp)
 1003630:	e17ffd15 	stw	r5,-12(fp)
 1003634:	3005883a 	mov	r2,r6
 1003638:	e1ffff15 	stw	r7,-4(fp)
 100363c:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 1003640:	e0bffe0b 	ldhu	r2,-8(fp)
 1003644:	1085883a 	add	r2,r2,r2
 1003648:	1085883a 	add	r2,r2,r2
 100364c:	1009883a 	mov	r4,r2
 1003650:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003654:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 1003658:	e0bffb17 	ldw	r2,-20(fp)
 100365c:	10000c26 	beq	r2,zero,1003690 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 1003660:	01001404 	movi	r4,80
 1003664:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003668:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 100366c:	e0bff917 	ldw	r2,-28(fp)
 1003670:	10000426 	beq	r2,zero,1003684 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 1003674:	e0bff917 	ldw	r2,-28(fp)
 1003678:	e0fffb17 	ldw	r3,-20(fp)
 100367c:	10c00c15 	stw	r3,48(r2)
 1003680:	00000406 	br	1003694 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 1003684:	e13ffb17 	ldw	r4,-20(fp)
 1003688:	10011840 	call	1001184 <vPortFree>
 100368c:	00000106 	br	1003694 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 1003690:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 1003694:	e0bff917 	ldw	r2,-28(fp)
 1003698:	10001226 	beq	r2,zero,10036e4 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 100369c:	e0fffe0b 	ldhu	r3,-8(fp)
 10036a0:	d8000315 	stw	zero,12(sp)
 10036a4:	e0bff917 	ldw	r2,-28(fp)
 10036a8:	d8800215 	stw	r2,8(sp)
 10036ac:	e0800317 	ldw	r2,12(fp)
 10036b0:	d8800115 	stw	r2,4(sp)
 10036b4:	e0800217 	ldw	r2,8(fp)
 10036b8:	d8800015 	stw	r2,0(sp)
 10036bc:	e1ffff17 	ldw	r7,-4(fp)
 10036c0:	180d883a 	mov	r6,r3
 10036c4:	e17ffd17 	ldw	r5,-12(fp)
 10036c8:	e13ffc17 	ldw	r4,-16(fp)
 10036cc:	10037040 	call	1003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 10036d0:	e13ff917 	ldw	r4,-28(fp)
 10036d4:	10038e80 	call	10038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 10036d8:	00800044 	movi	r2,1
 10036dc:	e0bffa15 	stw	r2,-24(fp)
 10036e0:	00000206 	br	10036ec <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 10036e4:	00bfffc4 	movi	r2,-1
 10036e8:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 10036ec:	e0bffa17 	ldw	r2,-24(fp)
	}
 10036f0:	e037883a 	mov	sp,fp
 10036f4:	dfc00117 	ldw	ra,4(sp)
 10036f8:	df000017 	ldw	fp,0(sp)
 10036fc:	dec00204 	addi	sp,sp,8
 1003700:	f800283a 	ret

01003704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 1003704:	defff804 	addi	sp,sp,-32
 1003708:	dfc00715 	stw	ra,28(sp)
 100370c:	df000615 	stw	fp,24(sp)
 1003710:	df000604 	addi	fp,sp,24
 1003714:	e13ffc15 	stw	r4,-16(fp)
 1003718:	e17ffd15 	stw	r5,-12(fp)
 100371c:	e1bffe15 	stw	r6,-8(fp)
 1003720:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 1003724:	e0800417 	ldw	r2,16(fp)
 1003728:	10c00c17 	ldw	r3,48(r2)
 100372c:	e0bffe17 	ldw	r2,-8(fp)
 1003730:	1085883a 	add	r2,r2,r2
 1003734:	1085883a 	add	r2,r2,r2
 1003738:	100d883a 	mov	r6,r2
 100373c:	01402944 	movi	r5,165
 1003740:	1809883a 	mov	r4,r3
 1003744:	101593c0 	call	101593c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 1003748:	e0800417 	ldw	r2,16(fp)
 100374c:	10c00c17 	ldw	r3,48(r2)
 1003750:	e13ffe17 	ldw	r4,-8(fp)
 1003754:	00900034 	movhi	r2,16384
 1003758:	10bfffc4 	addi	r2,r2,-1
 100375c:	2085883a 	add	r2,r4,r2
 1003760:	1085883a 	add	r2,r2,r2
 1003764:	1085883a 	add	r2,r2,r2
 1003768:	1885883a 	add	r2,r3,r2
 100376c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 1003770:	e0fffb17 	ldw	r3,-20(fp)
 1003774:	00bfff04 	movi	r2,-4
 1003778:	1884703a 	and	r2,r3,r2
 100377c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 1003780:	e0bffd17 	ldw	r2,-12(fp)
 1003784:	10001e26 	beq	r2,zero,1003800 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 1003788:	e03ffa15 	stw	zero,-24(fp)
 100378c:	00001406 	br	10037e0 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 1003790:	e0fffd17 	ldw	r3,-12(fp)
 1003794:	e0bffa17 	ldw	r2,-24(fp)
 1003798:	1885883a 	add	r2,r3,r2
 100379c:	10c00003 	ldbu	r3,0(r2)
 10037a0:	e1000417 	ldw	r4,16(fp)
 10037a4:	e0bffa17 	ldw	r2,-24(fp)
 10037a8:	2085883a 	add	r2,r4,r2
 10037ac:	10800d04 	addi	r2,r2,52
 10037b0:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 10037b4:	e0fffd17 	ldw	r3,-12(fp)
 10037b8:	e0bffa17 	ldw	r2,-24(fp)
 10037bc:	1885883a 	add	r2,r3,r2
 10037c0:	10800003 	ldbu	r2,0(r2)
 10037c4:	10803fcc 	andi	r2,r2,255
 10037c8:	1080201c 	xori	r2,r2,128
 10037cc:	10bfe004 	addi	r2,r2,-128
 10037d0:	10000726 	beq	r2,zero,10037f0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 10037d4:	e0bffa17 	ldw	r2,-24(fp)
 10037d8:	10800044 	addi	r2,r2,1
 10037dc:	e0bffa15 	stw	r2,-24(fp)
 10037e0:	e0bffa17 	ldw	r2,-24(fp)
 10037e4:	10800230 	cmpltui	r2,r2,8
 10037e8:	103fe91e 	bne	r2,zero,1003790 <__alt_data_end+0xff003790>
 10037ec:	00000106 	br	10037f4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 10037f0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 10037f4:	e0800417 	ldw	r2,16(fp)
 10037f8:	10000ec5 	stb	zero,59(r2)
 10037fc:	00000206 	br	1003808 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 1003800:	e0800417 	ldw	r2,16(fp)
 1003804:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003808:	e0800217 	ldw	r2,8(fp)
 100380c:	10800170 	cmpltui	r2,r2,5
 1003810:	1000021e 	bne	r2,zero,100381c <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003814:	00800104 	movi	r2,4
 1003818:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 100381c:	e0800417 	ldw	r2,16(fp)
 1003820:	e0c00217 	ldw	r3,8(fp)
 1003824:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 1003828:	e0800417 	ldw	r2,16(fp)
 100382c:	e0c00217 	ldw	r3,8(fp)
 1003830:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 1003834:	e0800417 	ldw	r2,16(fp)
 1003838:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 100383c:	e0800417 	ldw	r2,16(fp)
 1003840:	10800104 	addi	r2,r2,4
 1003844:	1009883a 	mov	r4,r2
 1003848:	1000b540 	call	1000b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 100384c:	e0800417 	ldw	r2,16(fp)
 1003850:	10800604 	addi	r2,r2,24
 1003854:	1009883a 	mov	r4,r2
 1003858:	1000b540 	call	1000b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 100385c:	e0800417 	ldw	r2,16(fp)
 1003860:	e0c00417 	ldw	r3,16(fp)
 1003864:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003868:	00c00144 	movi	r3,5
 100386c:	e0800217 	ldw	r2,8(fp)
 1003870:	1887c83a 	sub	r3,r3,r2
 1003874:	e0800417 	ldw	r2,16(fp)
 1003878:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 100387c:	e0800417 	ldw	r2,16(fp)
 1003880:	e0c00417 	ldw	r3,16(fp)
 1003884:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 1003888:	e0800417 	ldw	r2,16(fp)
 100388c:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 1003890:	e0800417 	ldw	r2,16(fp)
 1003894:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003898:	e0800417 	ldw	r2,16(fp)
 100389c:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 10038a0:	e1bfff17 	ldw	r6,-4(fp)
 10038a4:	e17ffc17 	ldw	r5,-16(fp)
 10038a8:	e13ffb17 	ldw	r4,-20(fp)
 10038ac:	1000da80 	call	1000da8 <pxPortInitialiseStack>
 10038b0:	1007883a 	mov	r3,r2
 10038b4:	e0800417 	ldw	r2,16(fp)
 10038b8:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 10038bc:	e0800317 	ldw	r2,12(fp)
 10038c0:	10000326 	beq	r2,zero,10038d0 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 10038c4:	e0800317 	ldw	r2,12(fp)
 10038c8:	e0c00417 	ldw	r3,16(fp)
 10038cc:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10038d0:	0001883a 	nop
 10038d4:	e037883a 	mov	sp,fp
 10038d8:	dfc00117 	ldw	ra,4(sp)
 10038dc:	df000017 	ldw	fp,0(sp)
 10038e0:	dec00204 	addi	sp,sp,8
 10038e4:	f800283a 	ret

010038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 10038e8:	defffd04 	addi	sp,sp,-12
 10038ec:	dfc00215 	stw	ra,8(sp)
 10038f0:	df000115 	stw	fp,4(sp)
 10038f4:	df000104 	addi	fp,sp,4
 10038f8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 10038fc:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 1003900:	d0a74517 	ldw	r2,-25324(gp)
 1003904:	10800044 	addi	r2,r2,1
 1003908:	d0a74515 	stw	r2,-25324(gp)
		if( pxCurrentTCB == NULL )
 100390c:	d0a74117 	ldw	r2,-25340(gp)
 1003910:	1000071e 	bne	r2,zero,1003930 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 1003914:	e0bfff17 	ldw	r2,-4(fp)
 1003918:	d0a74115 	stw	r2,-25340(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 100391c:	d0a74517 	ldw	r2,-25324(gp)
 1003920:	10800058 	cmpnei	r2,r2,1
 1003924:	10000b1e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 1003928:	1004c380 	call	1004c38 <prvInitialiseTaskLists>
 100392c:	00000906 	br	1003954 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 1003930:	d0a74817 	ldw	r2,-25312(gp)
 1003934:	1000071e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 1003938:	d0a74117 	ldw	r2,-25340(gp)
 100393c:	10800b17 	ldw	r2,44(r2)
 1003940:	e0ffff17 	ldw	r3,-4(fp)
 1003944:	18c00b17 	ldw	r3,44(r3)
 1003948:	18800236 	bltu	r3,r2,1003954 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 100394c:	e0bfff17 	ldw	r2,-4(fp)
 1003950:	d0a74115 	stw	r2,-25340(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 1003954:	d0a74c17 	ldw	r2,-25296(gp)
 1003958:	10800044 	addi	r2,r2,1
 100395c:	d0a74c15 	stw	r2,-25296(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 1003960:	e0bfff17 	ldw	r2,-4(fp)
 1003964:	10800b17 	ldw	r2,44(r2)
 1003968:	d0e74717 	ldw	r3,-25316(gp)
 100396c:	1880032e 	bgeu	r3,r2,100397c <prvAddNewTaskToReadyList+0x94>
 1003970:	e0bfff17 	ldw	r2,-4(fp)
 1003974:	10800b17 	ldw	r2,44(r2)
 1003978:	d0a74715 	stw	r2,-25316(gp)
 100397c:	e0bfff17 	ldw	r2,-4(fp)
 1003980:	10800b17 	ldw	r2,44(r2)
 1003984:	10c00524 	muli	r3,r2,20
 1003988:	008060f4 	movhi	r2,387
 100398c:	10ba3404 	addi	r2,r2,-5936
 1003990:	1887883a 	add	r3,r3,r2
 1003994:	e0bfff17 	ldw	r2,-4(fp)
 1003998:	10800104 	addi	r2,r2,4
 100399c:	100b883a 	mov	r5,r2
 10039a0:	1809883a 	mov	r4,r3
 10039a4:	1000b800 	call	1000b80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 10039a8:	10052c40 	call	10052c4 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 10039ac:	d0a74817 	ldw	r2,-25312(gp)
 10039b0:	10000626 	beq	r2,zero,10039cc <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 10039b4:	d0a74117 	ldw	r2,-25340(gp)
 10039b8:	10c00b17 	ldw	r3,44(r2)
 10039bc:	e0bfff17 	ldw	r2,-4(fp)
 10039c0:	10800b17 	ldw	r2,44(r2)
 10039c4:	1880012e 	bgeu	r3,r2,10039cc <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 10039c8:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10039cc:	0001883a 	nop
 10039d0:	e037883a 	mov	sp,fp
 10039d4:	dfc00117 	ldw	ra,4(sp)
 10039d8:	df000017 	ldw	fp,0(sp)
 10039dc:	dec00204 	addi	sp,sp,8
 10039e0:	f800283a 	ret

010039e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 10039e4:	defffc04 	addi	sp,sp,-16
 10039e8:	dfc00315 	stw	ra,12(sp)
 10039ec:	df000215 	stw	fp,8(sp)
 10039f0:	df000204 	addi	fp,sp,8
 10039f4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 10039f8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 10039fc:	e0bfff17 	ldw	r2,-4(fp)
 1003a00:	1000021e 	bne	r2,zero,1003a0c <vTaskDelete+0x28>
 1003a04:	d0a74117 	ldw	r2,-25340(gp)
 1003a08:	00000106 	br	1003a10 <vTaskDelete+0x2c>
 1003a0c:	e0bfff17 	ldw	r2,-4(fp)
 1003a10:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003a14:	e0bffe17 	ldw	r2,-8(fp)
 1003a18:	10800104 	addi	r2,r2,4
 1003a1c:	1009883a 	mov	r4,r2
 1003a20:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003a24:	e0bffe17 	ldw	r2,-8(fp)
 1003a28:	10800a17 	ldw	r2,40(r2)
 1003a2c:	10000426 	beq	r2,zero,1003a40 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003a30:	e0bffe17 	ldw	r2,-8(fp)
 1003a34:	10800604 	addi	r2,r2,24
 1003a38:	1009883a 	mov	r4,r2
 1003a3c:	1000ce40 	call	1000ce4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 1003a40:	d0a74c17 	ldw	r2,-25296(gp)
 1003a44:	10800044 	addi	r2,r2,1
 1003a48:	d0a74c15 	stw	r2,-25296(gp)

			if( pxTCB == pxCurrentTCB )
 1003a4c:	d0a74117 	ldw	r2,-25340(gp)
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	18800a1e 	bne	r3,r2,1003a80 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 1003a58:	e0bffe17 	ldw	r2,-8(fp)
 1003a5c:	10800104 	addi	r2,r2,4
 1003a60:	100b883a 	mov	r5,r2
 1003a64:	010060f4 	movhi	r4,387
 1003a68:	213a5c04 	addi	r4,r4,-5776
 1003a6c:	1000b800 	call	1000b80 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 1003a70:	d0a74417 	ldw	r2,-25328(gp)
 1003a74:	10800044 	addi	r2,r2,1
 1003a78:	d0a74415 	stw	r2,-25328(gp)
 1003a7c:	00000606 	br	1003a98 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 1003a80:	d0a74517 	ldw	r2,-25324(gp)
 1003a84:	10bfffc4 	addi	r2,r2,-1
 1003a88:	d0a74515 	stw	r2,-25324(gp)
				prvDeleteTCB( pxTCB );
 1003a8c:	e13ffe17 	ldw	r4,-8(fp)
 1003a90:	1004e340 	call	1004e34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 1003a94:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 1003a98:	10052c40 	call	10052c4 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 1003a9c:	d0a74817 	ldw	r2,-25312(gp)
 1003aa0:	10000426 	beq	r2,zero,1003ab4 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 1003aa4:	d0a74117 	ldw	r2,-25340(gp)
 1003aa8:	e0fffe17 	ldw	r3,-8(fp)
 1003aac:	1880011e 	bne	r3,r2,1003ab4 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 1003ab0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 1003ab4:	0001883a 	nop
 1003ab8:	e037883a 	mov	sp,fp
 1003abc:	dfc00117 	ldw	ra,4(sp)
 1003ac0:	df000017 	ldw	fp,0(sp)
 1003ac4:	dec00204 	addi	sp,sp,8
 1003ac8:	f800283a 	ret

01003acc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 1003acc:	defff804 	addi	sp,sp,-32
 1003ad0:	dfc00715 	stw	ra,28(sp)
 1003ad4:	df000615 	stw	fp,24(sp)
 1003ad8:	df000604 	addi	fp,sp,24
 1003adc:	e13ffe15 	stw	r4,-8(fp)
 1003ae0:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1003ae4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 1003ae8:	100435c0 	call	100435c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 1003aec:	d0a74617 	ldw	r2,-25320(gp)
 1003af0:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1003af4:	e0bffe17 	ldw	r2,-8(fp)
 1003af8:	10c00017 	ldw	r3,0(r2)
 1003afc:	e0bfff17 	ldw	r2,-4(fp)
 1003b00:	1885883a 	add	r2,r3,r2
 1003b04:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 1003b08:	e0bffe17 	ldw	r2,-8(fp)
 1003b0c:	10800017 	ldw	r2,0(r2)
 1003b10:	e0fffb17 	ldw	r3,-20(fp)
 1003b14:	18800a2e 	bgeu	r3,r2,1003b40 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1003b18:	e0bffe17 	ldw	r2,-8(fp)
 1003b1c:	10800017 	ldw	r2,0(r2)
 1003b20:	e0fffc17 	ldw	r3,-16(fp)
 1003b24:	18800f2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
 1003b28:	e0bffc17 	ldw	r2,-16(fp)
 1003b2c:	e0fffb17 	ldw	r3,-20(fp)
 1003b30:	18800c2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b34:	00800044 	movi	r2,1
 1003b38:	e0bffa15 	stw	r2,-24(fp)
 1003b3c:	00000906 	br	1003b64 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1003b40:	e0bffe17 	ldw	r2,-8(fp)
 1003b44:	10800017 	ldw	r2,0(r2)
 1003b48:	e0fffc17 	ldw	r3,-16(fp)
 1003b4c:	18800336 	bltu	r3,r2,1003b5c <vTaskDelayUntil+0x90>
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	e0fffb17 	ldw	r3,-20(fp)
 1003b58:	1880022e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b5c:	00800044 	movi	r2,1
 1003b60:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 1003b64:	e0bffe17 	ldw	r2,-8(fp)
 1003b68:	e0fffc17 	ldw	r3,-16(fp)
 1003b6c:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 1003b70:	e0bffa17 	ldw	r2,-24(fp)
 1003b74:	10000626 	beq	r2,zero,1003b90 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1003b78:	e0fffc17 	ldw	r3,-16(fp)
 1003b7c:	e0bffb17 	ldw	r2,-20(fp)
 1003b80:	1885c83a 	sub	r2,r3,r2
 1003b84:	000b883a 	mov	r5,zero
 1003b88:	1009883a 	mov	r4,r2
 1003b8c:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 1003b90:	10043880 	call	1004388 <xTaskResumeAll>
 1003b94:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003b98:	e0bffd17 	ldw	r2,-12(fp)
 1003b9c:	1000011e 	bne	r2,zero,1003ba4 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 1003ba0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003ba4:	0001883a 	nop
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	dfc00117 	ldw	ra,4(sp)
 1003bb0:	df000017 	ldw	fp,0(sp)
 1003bb4:	dec00204 	addi	sp,sp,8
 1003bb8:	f800283a 	ret

01003bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 1003bbc:	defffc04 	addi	sp,sp,-16
 1003bc0:	dfc00315 	stw	ra,12(sp)
 1003bc4:	df000215 	stw	fp,8(sp)
 1003bc8:	df000204 	addi	fp,sp,8
 1003bcc:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 1003bd0:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 1003bd4:	e0bfff17 	ldw	r2,-4(fp)
 1003bd8:	10000626 	beq	r2,zero,1003bf4 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 1003bdc:	100435c0 	call	100435c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1003be0:	000b883a 	mov	r5,zero
 1003be4:	e13fff17 	ldw	r4,-4(fp)
 1003be8:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 1003bec:	10043880 	call	1004388 <xTaskResumeAll>
 1003bf0:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003bf4:	e0bffe17 	ldw	r2,-8(fp)
 1003bf8:	1000011e 	bne	r2,zero,1003c00 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 1003bfc:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003c00:	0001883a 	nop
 1003c04:	e037883a 	mov	sp,fp
 1003c08:	dfc00117 	ldw	ra,4(sp)
 1003c0c:	df000017 	ldw	fp,0(sp)
 1003c10:	dec00204 	addi	sp,sp,8
 1003c14:	f800283a 	ret

01003c18 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 1003c18:	defff804 	addi	sp,sp,-32
 1003c1c:	dfc00715 	stw	ra,28(sp)
 1003c20:	df000615 	stw	fp,24(sp)
 1003c24:	df000604 	addi	fp,sp,24
 1003c28:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 1003c2c:	e0bfff17 	ldw	r2,-4(fp)
 1003c30:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 1003c34:	d0a74117 	ldw	r2,-25340(gp)
 1003c38:	e0fffb17 	ldw	r3,-20(fp)
 1003c3c:	1880021e 	bne	r3,r2,1003c48 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 1003c40:	e03ffa15 	stw	zero,-24(fp)
 1003c44:	00003206 	br	1003d10 <eTaskGetState+0xf8>
		}
		else
		{
			taskENTER_CRITICAL();
 1003c48:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1003c4c:	e0bffb17 	ldw	r2,-20(fp)
 1003c50:	10800517 	ldw	r2,20(r2)
 1003c54:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 1003c58:	d0a74217 	ldw	r2,-25336(gp)
 1003c5c:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1003c60:	d0a74317 	ldw	r2,-25332(gp)
 1003c64:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 1003c68:	10052c40 	call	10052c4 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1003c6c:	e0fffc17 	ldw	r3,-16(fp)
 1003c70:	e0bffd17 	ldw	r2,-12(fp)
 1003c74:	18800326 	beq	r3,r2,1003c84 <eTaskGetState+0x6c>
 1003c78:	e0fffc17 	ldw	r3,-16(fp)
 1003c7c:	e0bffe17 	ldw	r2,-8(fp)
 1003c80:	1880031e 	bne	r3,r2,1003c90 <eTaskGetState+0x78>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 1003c84:	00800084 	movi	r2,2
 1003c88:	e0bffa15 	stw	r2,-24(fp)
 1003c8c:	00002006 	br	1003d10 <eTaskGetState+0xf8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 1003c90:	e0fffc17 	ldw	r3,-16(fp)
 1003c94:	008060f4 	movhi	r2,387
 1003c98:	10ba6104 	addi	r2,r2,-5756
 1003c9c:	1880111e 	bne	r3,r2,1003ce4 <eTaskGetState+0xcc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1003ca0:	e0bffb17 	ldw	r2,-20(fp)
 1003ca4:	10800a17 	ldw	r2,40(r2)
 1003ca8:	10000b1e 	bne	r2,zero,1003cd8 <eTaskGetState+0xc0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003cac:	e0bffb17 	ldw	r2,-20(fp)
 1003cb0:	10801303 	ldbu	r2,76(r2)
 1003cb4:	10803fcc 	andi	r2,r2,255
 1003cb8:	10800058 	cmpnei	r2,r2,1
 1003cbc:	1000031e 	bne	r2,zero,1003ccc <eTaskGetState+0xb4>
							{
								eReturn = eBlocked;
 1003cc0:	00800084 	movi	r2,2
 1003cc4:	e0bffa15 	stw	r2,-24(fp)
 1003cc8:	00001106 	br	1003d10 <eTaskGetState+0xf8>
							}
							else
							{
								eReturn = eSuspended;
 1003ccc:	008000c4 	movi	r2,3
 1003cd0:	e0bffa15 	stw	r2,-24(fp)
 1003cd4:	00000e06 	br	1003d10 <eTaskGetState+0xf8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 1003cd8:	00800084 	movi	r2,2
 1003cdc:	e0bffa15 	stw	r2,-24(fp)
 1003ce0:	00000b06 	br	1003d10 <eTaskGetState+0xf8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1003ce4:	e0fffc17 	ldw	r3,-16(fp)
 1003ce8:	008060f4 	movhi	r2,387
 1003cec:	10ba5c04 	addi	r2,r2,-5776
 1003cf0:	18800226 	beq	r3,r2,1003cfc <eTaskGetState+0xe4>
 1003cf4:	e0bffc17 	ldw	r2,-16(fp)
 1003cf8:	1000031e 	bne	r2,zero,1003d08 <eTaskGetState+0xf0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 1003cfc:	00800104 	movi	r2,4
 1003d00:	e0bffa15 	stw	r2,-24(fp)
 1003d04:	00000206 	br	1003d10 <eTaskGetState+0xf8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 1003d08:	00800044 	movi	r2,1
 1003d0c:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 1003d10:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1003d14:	e037883a 	mov	sp,fp
 1003d18:	dfc00117 	ldw	ra,4(sp)
 1003d1c:	df000017 	ldw	fp,0(sp)
 1003d20:	dec00204 	addi	sp,sp,8
 1003d24:	f800283a 	ret

01003d28 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 1003d28:	defffb04 	addi	sp,sp,-20
 1003d2c:	dfc00415 	stw	ra,16(sp)
 1003d30:	df000315 	stw	fp,12(sp)
 1003d34:	df000304 	addi	fp,sp,12
 1003d38:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 1003d3c:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d40:	e0bfff17 	ldw	r2,-4(fp)
 1003d44:	1000021e 	bne	r2,zero,1003d50 <uxTaskPriorityGet+0x28>
 1003d48:	d0a74117 	ldw	r2,-25340(gp)
 1003d4c:	00000106 	br	1003d54 <uxTaskPriorityGet+0x2c>
 1003d50:	e0bfff17 	ldw	r2,-4(fp)
 1003d54:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003d58:	e0bffd17 	ldw	r2,-12(fp)
 1003d5c:	10800b17 	ldw	r2,44(r2)
 1003d60:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 1003d64:	10052c40 	call	10052c4 <vTaskExitCritical>

		return uxReturn;
 1003d68:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003d6c:	e037883a 	mov	sp,fp
 1003d70:	dfc00117 	ldw	ra,4(sp)
 1003d74:	df000017 	ldw	fp,0(sp)
 1003d78:	dec00204 	addi	sp,sp,8
 1003d7c:	f800283a 	ret

01003d80 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 1003d80:	defffb04 	addi	sp,sp,-20
 1003d84:	df000415 	stw	fp,16(sp)
 1003d88:	df000404 	addi	fp,sp,16
 1003d8c:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1003d90:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003d94:	e0bfff17 	ldw	r2,-4(fp)
 1003d98:	1000021e 	bne	r2,zero,1003da4 <uxTaskPriorityGetFromISR+0x24>
 1003d9c:	d0a74117 	ldw	r2,-25340(gp)
 1003da0:	00000106 	br	1003da8 <uxTaskPriorityGetFromISR+0x28>
 1003da4:	e0bfff17 	ldw	r2,-4(fp)
 1003da8:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003dac:	e0bffd17 	ldw	r2,-12(fp)
 1003db0:	10800b17 	ldw	r2,44(r2)
 1003db4:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 1003db8:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003dbc:	e037883a 	mov	sp,fp
 1003dc0:	df000017 	ldw	fp,0(sp)
 1003dc4:	dec00104 	addi	sp,sp,4
 1003dc8:	f800283a 	ret

01003dcc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 1003dcc:	defff804 	addi	sp,sp,-32
 1003dd0:	dfc00715 	stw	ra,28(sp)
 1003dd4:	df000615 	stw	fp,24(sp)
 1003dd8:	df000604 	addi	fp,sp,24
 1003ddc:	e13ffe15 	stw	r4,-8(fp)
 1003de0:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 1003de4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003de8:	e0bfff17 	ldw	r2,-4(fp)
 1003dec:	10800170 	cmpltui	r2,r2,5
 1003df0:	1000021e 	bne	r2,zero,1003dfc <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003df4:	00800104 	movi	r2,4
 1003df8:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 1003dfc:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003e00:	e0bffe17 	ldw	r2,-8(fp)
 1003e04:	1000021e 	bne	r2,zero,1003e10 <vTaskPrioritySet+0x44>
 1003e08:	d0a74117 	ldw	r2,-25340(gp)
 1003e0c:	00000106 	br	1003e14 <vTaskPrioritySet+0x48>
 1003e10:	e0bffe17 	ldw	r2,-8(fp)
 1003e14:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1003e18:	e0bffb17 	ldw	r2,-20(fp)
 1003e1c:	10801017 	ldw	r2,64(r2)
 1003e20:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 1003e24:	e0fffc17 	ldw	r3,-16(fp)
 1003e28:	e0bfff17 	ldw	r2,-4(fp)
 1003e2c:	18804926 	beq	r3,r2,1003f54 <vTaskPrioritySet+0x188>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 1003e30:	e0bfff17 	ldw	r2,-4(fp)
 1003e34:	e0fffc17 	ldw	r3,-16(fp)
 1003e38:	18800a2e 	bgeu	r3,r2,1003e64 <vTaskPrioritySet+0x98>
				{
					if( pxTCB != pxCurrentTCB )
 1003e3c:	d0a74117 	ldw	r2,-25340(gp)
 1003e40:	e0fffb17 	ldw	r3,-20(fp)
 1003e44:	18800c26 	beq	r3,r2,1003e78 <vTaskPrioritySet+0xac>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1003e48:	d0a74117 	ldw	r2,-25340(gp)
 1003e4c:	10800b17 	ldw	r2,44(r2)
 1003e50:	e0ffff17 	ldw	r3,-4(fp)
 1003e54:	18800836 	bltu	r3,r2,1003e78 <vTaskPrioritySet+0xac>
						{
							xYieldRequired = pdTRUE;
 1003e58:	00800044 	movi	r2,1
 1003e5c:	e0bffa15 	stw	r2,-24(fp)
 1003e60:	00000506 	br	1003e78 <vTaskPrioritySet+0xac>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 1003e64:	d0a74117 	ldw	r2,-25340(gp)
 1003e68:	e0fffb17 	ldw	r3,-20(fp)
 1003e6c:	1880021e 	bne	r3,r2,1003e78 <vTaskPrioritySet+0xac>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 1003e70:	00800044 	movi	r2,1
 1003e74:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1003e78:	e0bffb17 	ldw	r2,-20(fp)
 1003e7c:	10800b17 	ldw	r2,44(r2)
 1003e80:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1003e84:	e0bffb17 	ldw	r2,-20(fp)
 1003e88:	10c01017 	ldw	r3,64(r2)
 1003e8c:	e0bffb17 	ldw	r2,-20(fp)
 1003e90:	10800b17 	ldw	r2,44(r2)
 1003e94:	1880031e 	bne	r3,r2,1003ea4 <vTaskPrioritySet+0xd8>
					{
						pxTCB->uxPriority = uxNewPriority;
 1003e98:	e0bffb17 	ldw	r2,-20(fp)
 1003e9c:	e0ffff17 	ldw	r3,-4(fp)
 1003ea0:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 1003ea4:	e0bffb17 	ldw	r2,-20(fp)
 1003ea8:	e0ffff17 	ldw	r3,-4(fp)
 1003eac:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1003eb0:	e0bffb17 	ldw	r2,-20(fp)
 1003eb4:	10800617 	ldw	r2,24(r2)
 1003eb8:	10000516 	blt	r2,zero,1003ed0 <vTaskPrioritySet+0x104>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003ebc:	00c00144 	movi	r3,5
 1003ec0:	e0bfff17 	ldw	r2,-4(fp)
 1003ec4:	1887c83a 	sub	r3,r3,r2
 1003ec8:	e0bffb17 	ldw	r2,-20(fp)
 1003ecc:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1003ed0:	e0bffb17 	ldw	r2,-20(fp)
 1003ed4:	10c00517 	ldw	r3,20(r2)
 1003ed8:	e0bffd17 	ldw	r2,-12(fp)
 1003edc:	11000524 	muli	r4,r2,20
 1003ee0:	008060f4 	movhi	r2,387
 1003ee4:	10ba3404 	addi	r2,r2,-5936
 1003ee8:	2085883a 	add	r2,r4,r2
 1003eec:	1880161e 	bne	r3,r2,1003f48 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003ef0:	e0bffb17 	ldw	r2,-20(fp)
 1003ef4:	10800104 	addi	r2,r2,4
 1003ef8:	1009883a 	mov	r4,r2
 1003efc:	1000ce40 	call	1000ce4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 1003f00:	e0bffb17 	ldw	r2,-20(fp)
 1003f04:	10800b17 	ldw	r2,44(r2)
 1003f08:	d0e74717 	ldw	r3,-25316(gp)
 1003f0c:	1880032e 	bgeu	r3,r2,1003f1c <vTaskPrioritySet+0x150>
 1003f10:	e0bffb17 	ldw	r2,-20(fp)
 1003f14:	10800b17 	ldw	r2,44(r2)
 1003f18:	d0a74715 	stw	r2,-25316(gp)
 1003f1c:	e0bffb17 	ldw	r2,-20(fp)
 1003f20:	10800b17 	ldw	r2,44(r2)
 1003f24:	10c00524 	muli	r3,r2,20
 1003f28:	008060f4 	movhi	r2,387
 1003f2c:	10ba3404 	addi	r2,r2,-5936
 1003f30:	1887883a 	add	r3,r3,r2
 1003f34:	e0bffb17 	ldw	r2,-20(fp)
 1003f38:	10800104 	addi	r2,r2,4
 1003f3c:	100b883a 	mov	r5,r2
 1003f40:	1809883a 	mov	r4,r3
 1003f44:	1000b800 	call	1000b80 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 1003f48:	e0bffa17 	ldw	r2,-24(fp)
 1003f4c:	10000126 	beq	r2,zero,1003f54 <vTaskPrioritySet+0x188>
				{
					taskYIELD_IF_USING_PREEMPTION();
 1003f50:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 1003f54:	10052c40 	call	10052c4 <vTaskExitCritical>
	}
 1003f58:	0001883a 	nop
 1003f5c:	e037883a 	mov	sp,fp
 1003f60:	dfc00117 	ldw	ra,4(sp)
 1003f64:	df000017 	ldw	fp,0(sp)
 1003f68:	dec00204 	addi	sp,sp,8
 1003f6c:	f800283a 	ret

01003f70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 1003f70:	defffc04 	addi	sp,sp,-16
 1003f74:	dfc00315 	stw	ra,12(sp)
 1003f78:	df000215 	stw	fp,8(sp)
 1003f7c:	df000204 	addi	fp,sp,8
 1003f80:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 1003f84:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1003f88:	e0bfff17 	ldw	r2,-4(fp)
 1003f8c:	1000021e 	bne	r2,zero,1003f98 <vTaskSuspend+0x28>
 1003f90:	d0a74117 	ldw	r2,-25340(gp)
 1003f94:	00000106 	br	1003f9c <vTaskSuspend+0x2c>
 1003f98:	e0bfff17 	ldw	r2,-4(fp)
 1003f9c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003fa0:	e0bffe17 	ldw	r2,-8(fp)
 1003fa4:	10800104 	addi	r2,r2,4
 1003fa8:	1009883a 	mov	r4,r2
 1003fac:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003fb0:	e0bffe17 	ldw	r2,-8(fp)
 1003fb4:	10800a17 	ldw	r2,40(r2)
 1003fb8:	10000426 	beq	r2,zero,1003fcc <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003fbc:	e0bffe17 	ldw	r2,-8(fp)
 1003fc0:	10800604 	addi	r2,r2,24
 1003fc4:	1009883a 	mov	r4,r2
 1003fc8:	1000ce40 	call	1000ce4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1003fcc:	e0bffe17 	ldw	r2,-8(fp)
 1003fd0:	10800104 	addi	r2,r2,4
 1003fd4:	100b883a 	mov	r5,r2
 1003fd8:	010060f4 	movhi	r4,387
 1003fdc:	213a6104 	addi	r4,r4,-5756
 1003fe0:	1000b800 	call	1000b80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003fe4:	e0bffe17 	ldw	r2,-8(fp)
 1003fe8:	10801303 	ldbu	r2,76(r2)
 1003fec:	10803fcc 	andi	r2,r2,255
 1003ff0:	10800058 	cmpnei	r2,r2,1
 1003ff4:	1000021e 	bne	r2,zero,1004000 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003ff8:	e0bffe17 	ldw	r2,-8(fp)
 1003ffc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 1004000:	10052c40 	call	10052c4 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 1004004:	d0a74817 	ldw	r2,-25312(gp)
 1004008:	10000326 	beq	r2,zero,1004018 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 100400c:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 1004010:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 1004014:	10052c40 	call	10052c4 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 1004018:	d0a74117 	ldw	r2,-25340(gp)
 100401c:	e0fffe17 	ldw	r3,-8(fp)
 1004020:	18800c1e 	bne	r3,r2,1004054 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 1004024:	d0a74817 	ldw	r2,-25312(gp)
 1004028:	10000226 	beq	r2,zero,1004034 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 100402c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004030:	00000806 	br	1004054 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 1004034:	008060f4 	movhi	r2,387
 1004038:	10ba6104 	addi	r2,r2,-5756
 100403c:	10c00017 	ldw	r3,0(r2)
 1004040:	d0a74517 	ldw	r2,-25324(gp)
 1004044:	1880021e 	bne	r3,r2,1004050 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 1004048:	d0274115 	stw	zero,-25340(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100404c:	00000106 	br	1004054 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 1004050:	10047440 	call	1004744 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1004054:	0001883a 	nop
 1004058:	e037883a 	mov	sp,fp
 100405c:	dfc00117 	ldw	ra,4(sp)
 1004060:	df000017 	ldw	fp,0(sp)
 1004064:	dec00204 	addi	sp,sp,8
 1004068:	f800283a 	ret

0100406c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 100406c:	defffc04 	addi	sp,sp,-16
 1004070:	df000315 	stw	fp,12(sp)
 1004074:	df000304 	addi	fp,sp,12
 1004078:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 100407c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 1004080:	e0bfff17 	ldw	r2,-4(fp)
 1004084:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1004088:	e0bffe17 	ldw	r2,-8(fp)
 100408c:	10c00517 	ldw	r3,20(r2)
 1004090:	008060f4 	movhi	r2,387
 1004094:	10ba6104 	addi	r2,r2,-5756
 1004098:	18800a1e 	bne	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 100409c:	e0bffe17 	ldw	r2,-8(fp)
 10040a0:	10c00a17 	ldw	r3,40(r2)
 10040a4:	008060f4 	movhi	r2,387
 10040a8:	10ba5704 	addi	r2,r2,-5796
 10040ac:	18800526 	beq	r3,r2,10040c4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 10040b0:	e0bffe17 	ldw	r2,-8(fp)
 10040b4:	10800a17 	ldw	r2,40(r2)
 10040b8:	1000021e 	bne	r2,zero,10040c4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 10040bc:	00800044 	movi	r2,1
 10040c0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 10040c4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 10040c8:	e037883a 	mov	sp,fp
 10040cc:	df000017 	ldw	fp,0(sp)
 10040d0:	dec00104 	addi	sp,sp,4
 10040d4:	f800283a 	ret

010040d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 10040d8:	defffc04 	addi	sp,sp,-16
 10040dc:	dfc00315 	stw	ra,12(sp)
 10040e0:	df000215 	stw	fp,8(sp)
 10040e4:	df000204 	addi	fp,sp,8
 10040e8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10040ec:	e0bfff17 	ldw	r2,-4(fp)
 10040f0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 10040f4:	d0a74117 	ldw	r2,-25340(gp)
 10040f8:	e0fffe17 	ldw	r3,-8(fp)
 10040fc:	18802326 	beq	r3,r2,100418c <vTaskResume+0xb4>
 1004100:	e0bffe17 	ldw	r2,-8(fp)
 1004104:	10002126 	beq	r2,zero,100418c <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 1004108:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 100410c:	e13ffe17 	ldw	r4,-8(fp)
 1004110:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 1004114:	10001c26 	beq	r2,zero,1004188 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1004118:	e0bffe17 	ldw	r2,-8(fp)
 100411c:	10800104 	addi	r2,r2,4
 1004120:	1009883a 	mov	r4,r2
 1004124:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004128:	e0bffe17 	ldw	r2,-8(fp)
 100412c:	10800b17 	ldw	r2,44(r2)
 1004130:	d0e74717 	ldw	r3,-25316(gp)
 1004134:	1880032e 	bgeu	r3,r2,1004144 <vTaskResume+0x6c>
 1004138:	e0bffe17 	ldw	r2,-8(fp)
 100413c:	10800b17 	ldw	r2,44(r2)
 1004140:	d0a74715 	stw	r2,-25316(gp)
 1004144:	e0bffe17 	ldw	r2,-8(fp)
 1004148:	10800b17 	ldw	r2,44(r2)
 100414c:	10c00524 	muli	r3,r2,20
 1004150:	008060f4 	movhi	r2,387
 1004154:	10ba3404 	addi	r2,r2,-5936
 1004158:	1887883a 	add	r3,r3,r2
 100415c:	e0bffe17 	ldw	r2,-8(fp)
 1004160:	10800104 	addi	r2,r2,4
 1004164:	100b883a 	mov	r5,r2
 1004168:	1809883a 	mov	r4,r3
 100416c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004170:	e0bffe17 	ldw	r2,-8(fp)
 1004174:	10c00b17 	ldw	r3,44(r2)
 1004178:	d0a74117 	ldw	r2,-25340(gp)
 100417c:	10800b17 	ldw	r2,44(r2)
 1004180:	18800136 	bltu	r3,r2,1004188 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 1004184:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 1004188:	10052c40 	call	10052c4 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100418c:	0001883a 	nop
 1004190:	e037883a 	mov	sp,fp
 1004194:	dfc00117 	ldw	ra,4(sp)
 1004198:	df000017 	ldw	fp,0(sp)
 100419c:	dec00204 	addi	sp,sp,8
 10041a0:	f800283a 	ret

010041a4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 10041a4:	defffa04 	addi	sp,sp,-24
 10041a8:	dfc00515 	stw	ra,20(sp)
 10041ac:	df000415 	stw	fp,16(sp)
 10041b0:	df000404 	addi	fp,sp,16
 10041b4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 10041b8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10041bc:	e0bfff17 	ldw	r2,-4(fp)
 10041c0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10041c4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 10041c8:	e13ffd17 	ldw	r4,-12(fp)
 10041cc:	100406c0 	call	100406c <prvTaskIsTaskSuspended>
 10041d0:	10002626 	beq	r2,zero,100426c <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10041d4:	d0a74f17 	ldw	r2,-25284(gp)
 10041d8:	10001e1e 	bne	r2,zero,1004254 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10041dc:	e0bffd17 	ldw	r2,-12(fp)
 10041e0:	10c00b17 	ldw	r3,44(r2)
 10041e4:	d0a74117 	ldw	r2,-25340(gp)
 10041e8:	10800b17 	ldw	r2,44(r2)
 10041ec:	18800236 	bltu	r3,r2,10041f8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 10041f0:	00800044 	movi	r2,1
 10041f4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10041f8:	e0bffd17 	ldw	r2,-12(fp)
 10041fc:	10800104 	addi	r2,r2,4
 1004200:	1009883a 	mov	r4,r2
 1004204:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004208:	e0bffd17 	ldw	r2,-12(fp)
 100420c:	10800b17 	ldw	r2,44(r2)
 1004210:	d0e74717 	ldw	r3,-25316(gp)
 1004214:	1880032e 	bgeu	r3,r2,1004224 <xTaskResumeFromISR+0x80>
 1004218:	e0bffd17 	ldw	r2,-12(fp)
 100421c:	10800b17 	ldw	r2,44(r2)
 1004220:	d0a74715 	stw	r2,-25316(gp)
 1004224:	e0bffd17 	ldw	r2,-12(fp)
 1004228:	10800b17 	ldw	r2,44(r2)
 100422c:	10c00524 	muli	r3,r2,20
 1004230:	008060f4 	movhi	r2,387
 1004234:	10ba3404 	addi	r2,r2,-5936
 1004238:	1887883a 	add	r3,r3,r2
 100423c:	e0bffd17 	ldw	r2,-12(fp)
 1004240:	10800104 	addi	r2,r2,4
 1004244:	100b883a 	mov	r5,r2
 1004248:	1809883a 	mov	r4,r3
 100424c:	1000b800 	call	1000b80 <vListInsertEnd>
 1004250:	00000606 	br	100426c <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1004254:	e0bffd17 	ldw	r2,-12(fp)
 1004258:	10800604 	addi	r2,r2,24
 100425c:	100b883a 	mov	r5,r2
 1004260:	010060f4 	movhi	r4,387
 1004264:	213a5704 	addi	r4,r4,-5796
 1004268:	1000b800 	call	1000b80 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 100426c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1004270:	e037883a 	mov	sp,fp
 1004274:	dfc00117 	ldw	ra,4(sp)
 1004278:	df000017 	ldw	fp,0(sp)
 100427c:	dec00204 	addi	sp,sp,8
 1004280:	f800283a 	ret

01004284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 1004284:	defffa04 	addi	sp,sp,-24
 1004288:	dfc00515 	stw	ra,20(sp)
 100428c:	df000415 	stw	fp,16(sp)
 1004290:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 1004294:	d0a74e04 	addi	r2,gp,-25288
 1004298:	d8800115 	stw	r2,4(sp)
 100429c:	d8000015 	stw	zero,0(sp)
 10042a0:	000f883a 	mov	r7,zero
 10042a4:	01810004 	movi	r6,1024
 10042a8:	014040f4 	movhi	r5,259
 10042ac:	2964f604 	addi	r5,r5,-27688
 10042b0:	01004034 	movhi	r4,256
 10042b4:	21130704 	addi	r4,r4,19484
 10042b8:	100361c0 	call	100361c <xTaskCreate>
 10042bc:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 10042c0:	e0bffe17 	ldw	r2,-8(fp)
 10042c4:	10800058 	cmpnei	r2,r2,1
 10042c8:	10000c1e 	bne	r2,zero,10042fc <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10042cc:	0005303a 	rdctl	r2,status
 10042d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10042d4:	e0ffff17 	ldw	r3,-4(fp)
 10042d8:	00bfff84 	movi	r2,-2
 10042dc:	1884703a 	and	r2,r3,r2
 10042e0:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 10042e4:	00bfffc4 	movi	r2,-1
 10042e8:	d0a74d15 	stw	r2,-25292(gp)
		xSchedulerRunning = pdTRUE;
 10042ec:	00800044 	movi	r2,1
 10042f0:	d0a74815 	stw	r2,-25312(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 10042f4:	d0274615 	stw	zero,-25320(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 10042f8:	1000e880 	call	1000e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 10042fc:	0001883a 	nop
 1004300:	e037883a 	mov	sp,fp
 1004304:	dfc00117 	ldw	ra,4(sp)
 1004308:	df000017 	ldw	fp,0(sp)
 100430c:	dec00204 	addi	sp,sp,8
 1004310:	f800283a 	ret

01004314 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 1004314:	defffd04 	addi	sp,sp,-12
 1004318:	dfc00215 	stw	ra,8(sp)
 100431c:	df000115 	stw	fp,4(sp)
 1004320:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004324:	0005303a 	rdctl	r2,status
 1004328:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100432c:	e0ffff17 	ldw	r3,-4(fp)
 1004330:	00bfff84 	movi	r2,-2
 1004334:	1884703a 	and	r2,r3,r2
 1004338:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 100433c:	d0274815 	stw	zero,-25312(gp)
	vPortEndScheduler();
 1004340:	1000ec00 	call	1000ec0 <vPortEndScheduler>
}
 1004344:	0001883a 	nop
 1004348:	e037883a 	mov	sp,fp
 100434c:	dfc00117 	ldw	ra,4(sp)
 1004350:	df000017 	ldw	fp,0(sp)
 1004354:	dec00204 	addi	sp,sp,8
 1004358:	f800283a 	ret

0100435c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 100435c:	deffff04 	addi	sp,sp,-4
 1004360:	df000015 	stw	fp,0(sp)
 1004364:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 1004368:	d0a74f17 	ldw	r2,-25284(gp)
 100436c:	10800044 	addi	r2,r2,1
 1004370:	d0a74f15 	stw	r2,-25284(gp)
	portMEMORY_BARRIER();
}
 1004374:	0001883a 	nop
 1004378:	e037883a 	mov	sp,fp
 100437c:	df000017 	ldw	fp,0(sp)
 1004380:	dec00104 	addi	sp,sp,4
 1004384:	f800283a 	ret

01004388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 1004388:	defffb04 	addi	sp,sp,-20
 100438c:	dfc00415 	stw	ra,16(sp)
 1004390:	df000315 	stw	fp,12(sp)
 1004394:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 1004398:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 100439c:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 10043a0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 10043a4:	d0a74f17 	ldw	r2,-25284(gp)
 10043a8:	10bfffc4 	addi	r2,r2,-1
 10043ac:	d0a74f15 	stw	r2,-25284(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10043b0:	d0a74f17 	ldw	r2,-25284(gp)
 10043b4:	1000431e 	bne	r2,zero,10044c4 <xTaskResumeAll+0x13c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 10043b8:	d0a74517 	ldw	r2,-25324(gp)
 10043bc:	10004126 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 10043c0:	00002606 	br	100445c <xTaskResumeAll+0xd4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10043c4:	008060f4 	movhi	r2,387
 10043c8:	10ba5704 	addi	r2,r2,-5796
 10043cc:	10800317 	ldw	r2,12(r2)
 10043d0:	10800317 	ldw	r2,12(r2)
 10043d4:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 10043d8:	e0bffd17 	ldw	r2,-12(fp)
 10043dc:	10800604 	addi	r2,r2,24
 10043e0:	1009883a 	mov	r4,r2
 10043e4:	1000ce40 	call	1000ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10043e8:	e0bffd17 	ldw	r2,-12(fp)
 10043ec:	10800104 	addi	r2,r2,4
 10043f0:	1009883a 	mov	r4,r2
 10043f4:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 10043f8:	e0bffd17 	ldw	r2,-12(fp)
 10043fc:	10800b17 	ldw	r2,44(r2)
 1004400:	d0e74717 	ldw	r3,-25316(gp)
 1004404:	1880032e 	bgeu	r3,r2,1004414 <xTaskResumeAll+0x8c>
 1004408:	e0bffd17 	ldw	r2,-12(fp)
 100440c:	10800b17 	ldw	r2,44(r2)
 1004410:	d0a74715 	stw	r2,-25316(gp)
 1004414:	e0bffd17 	ldw	r2,-12(fp)
 1004418:	10800b17 	ldw	r2,44(r2)
 100441c:	10c00524 	muli	r3,r2,20
 1004420:	008060f4 	movhi	r2,387
 1004424:	10ba3404 	addi	r2,r2,-5936
 1004428:	1887883a 	add	r3,r3,r2
 100442c:	e0bffd17 	ldw	r2,-12(fp)
 1004430:	10800104 	addi	r2,r2,4
 1004434:	100b883a 	mov	r5,r2
 1004438:	1809883a 	mov	r4,r3
 100443c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004440:	e0bffd17 	ldw	r2,-12(fp)
 1004444:	10c00b17 	ldw	r3,44(r2)
 1004448:	d0a74117 	ldw	r2,-25340(gp)
 100444c:	10800b17 	ldw	r2,44(r2)
 1004450:	18800236 	bltu	r3,r2,100445c <xTaskResumeAll+0xd4>
					{
						xYieldPending = pdTRUE;
 1004454:	00800044 	movi	r2,1
 1004458:	d0a74a15 	stw	r2,-25304(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 100445c:	008060f4 	movhi	r2,387
 1004460:	10ba5704 	addi	r2,r2,-5796
 1004464:	10800017 	ldw	r2,0(r2)
 1004468:	103fd61e 	bne	r2,zero,10043c4 <__alt_data_end+0xff0043c4>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 100446c:	e0bffd17 	ldw	r2,-12(fp)
 1004470:	10000126 	beq	r2,zero,1004478 <xTaskResumeAll+0xf0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 1004474:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 1004478:	d0a74917 	ldw	r2,-25308(gp)
 100447c:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 1004480:	e0bfff17 	ldw	r2,-4(fp)
 1004484:	10000a26 	beq	r2,zero,10044b0 <xTaskResumeAll+0x128>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 1004488:	10045940 	call	1004594 <xTaskIncrementTick>
 100448c:	10000226 	beq	r2,zero,1004498 <xTaskResumeAll+0x110>
							{
								xYieldPending = pdTRUE;
 1004490:	00800044 	movi	r2,1
 1004494:	d0a74a15 	stw	r2,-25304(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 1004498:	e0bfff17 	ldw	r2,-4(fp)
 100449c:	10bfffc4 	addi	r2,r2,-1
 10044a0:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 10044a4:	e0bfff17 	ldw	r2,-4(fp)
 10044a8:	103ff71e 	bne	r2,zero,1004488 <__alt_data_end+0xff004488>

						uxPendedTicks = 0;
 10044ac:	d0274915 	stw	zero,-25308(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 10044b0:	d0a74a17 	ldw	r2,-25304(gp)
 10044b4:	10000326 	beq	r2,zero,10044c4 <xTaskResumeAll+0x13c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 10044b8:	00800044 	movi	r2,1
 10044bc:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 10044c0:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 10044c4:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xAlreadyYielded;
 10044c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10044cc:	e037883a 	mov	sp,fp
 10044d0:	dfc00117 	ldw	ra,4(sp)
 10044d4:	df000017 	ldw	fp,0(sp)
 10044d8:	dec00204 	addi	sp,sp,8
 10044dc:	f800283a 	ret

010044e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 10044e0:	defffe04 	addi	sp,sp,-8
 10044e4:	df000115 	stw	fp,4(sp)
 10044e8:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 10044ec:	d0a74617 	ldw	r2,-25320(gp)
 10044f0:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 10044f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10044f8:	e037883a 	mov	sp,fp
 10044fc:	df000017 	ldw	fp,0(sp)
 1004500:	dec00104 	addi	sp,sp,4
 1004504:	f800283a 	ret

01004508 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 1004508:	defffd04 	addi	sp,sp,-12
 100450c:	df000215 	stw	fp,8(sp)
 1004510:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 1004514:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 1004518:	d0a74617 	ldw	r2,-25320(gp)
 100451c:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1004520:	e0bfff17 	ldw	r2,-4(fp)
}
 1004524:	e037883a 	mov	sp,fp
 1004528:	df000017 	ldw	fp,0(sp)
 100452c:	dec00104 	addi	sp,sp,4
 1004530:	f800283a 	ret

01004534 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 1004534:	deffff04 	addi	sp,sp,-4
 1004538:	df000015 	stw	fp,0(sp)
 100453c:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 1004540:	d0a74517 	ldw	r2,-25324(gp)
}
 1004544:	e037883a 	mov	sp,fp
 1004548:	df000017 	ldw	fp,0(sp)
 100454c:	dec00104 	addi	sp,sp,4
 1004550:	f800283a 	ret

01004554 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1004554:	defffd04 	addi	sp,sp,-12
 1004558:	df000215 	stw	fp,8(sp)
 100455c:	df000204 	addi	fp,sp,8
 1004560:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 1004564:	e0bfff17 	ldw	r2,-4(fp)
 1004568:	1000021e 	bne	r2,zero,1004574 <pcTaskGetName+0x20>
 100456c:	d0a74117 	ldw	r2,-25340(gp)
 1004570:	00000106 	br	1004578 <pcTaskGetName+0x24>
 1004574:	e0bfff17 	ldw	r2,-4(fp)
 1004578:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 100457c:	e0bffe17 	ldw	r2,-8(fp)
 1004580:	10800d04 	addi	r2,r2,52
}
 1004584:	e037883a 	mov	sp,fp
 1004588:	df000017 	ldw	fp,0(sp)
 100458c:	dec00104 	addi	sp,sp,4
 1004590:	f800283a 	ret

01004594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 1004594:	defff904 	addi	sp,sp,-28
 1004598:	dfc00615 	stw	ra,24(sp)
 100459c:	df000515 	stw	fp,20(sp)
 10045a0:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 10045a4:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10045a8:	d0a74f17 	ldw	r2,-25284(gp)
 10045ac:	1000581e 	bne	r2,zero,1004710 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 10045b0:	d0a74617 	ldw	r2,-25320(gp)
 10045b4:	10800044 	addi	r2,r2,1
 10045b8:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 10045bc:	e0bffc17 	ldw	r2,-16(fp)
 10045c0:	d0a74615 	stw	r2,-25320(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 10045c4:	e0bffc17 	ldw	r2,-16(fp)
 10045c8:	10000a1e 	bne	r2,zero,10045f4 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 10045cc:	d0a74217 	ldw	r2,-25336(gp)
 10045d0:	e0bffd15 	stw	r2,-12(fp)
 10045d4:	d0a74317 	ldw	r2,-25332(gp)
 10045d8:	d0a74215 	stw	r2,-25336(gp)
 10045dc:	e0bffd17 	ldw	r2,-12(fp)
 10045e0:	d0a74315 	stw	r2,-25332(gp)
 10045e4:	d0a74b17 	ldw	r2,-25300(gp)
 10045e8:	10800044 	addi	r2,r2,1
 10045ec:	d0a74b15 	stw	r2,-25300(gp)
 10045f0:	1004e780 	call	1004e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 10045f4:	d0a74d17 	ldw	r2,-25292(gp)
 10045f8:	e0fffc17 	ldw	r3,-16(fp)
 10045fc:	18803836 	bltu	r3,r2,10046e0 <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004600:	d0a74217 	ldw	r2,-25336(gp)
 1004604:	10800017 	ldw	r2,0(r2)
 1004608:	1000031e 	bne	r2,zero,1004618 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100460c:	00bfffc4 	movi	r2,-1
 1004610:	d0a74d15 	stw	r2,-25292(gp)
					break;
 1004614:	00003206 	br	10046e0 <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004618:	d0a74217 	ldw	r2,-25336(gp)
 100461c:	10800317 	ldw	r2,12(r2)
 1004620:	10800317 	ldw	r2,12(r2)
 1004624:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1004628:	e0bffe17 	ldw	r2,-8(fp)
 100462c:	10800117 	ldw	r2,4(r2)
 1004630:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 1004634:	e0fffc17 	ldw	r3,-16(fp)
 1004638:	e0bfff17 	ldw	r2,-4(fp)
 100463c:	1880032e 	bgeu	r3,r2,100464c <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 1004640:	e0bfff17 	ldw	r2,-4(fp)
 1004644:	d0a74d15 	stw	r2,-25292(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 1004648:	00002506 	br	10046e0 <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 100464c:	e0bffe17 	ldw	r2,-8(fp)
 1004650:	10800104 	addi	r2,r2,4
 1004654:	1009883a 	mov	r4,r2
 1004658:	1000ce40 	call	1000ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 100465c:	e0bffe17 	ldw	r2,-8(fp)
 1004660:	10800a17 	ldw	r2,40(r2)
 1004664:	10000426 	beq	r2,zero,1004678 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1004668:	e0bffe17 	ldw	r2,-8(fp)
 100466c:	10800604 	addi	r2,r2,24
 1004670:	1009883a 	mov	r4,r2
 1004674:	1000ce40 	call	1000ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 1004678:	e0bffe17 	ldw	r2,-8(fp)
 100467c:	10800b17 	ldw	r2,44(r2)
 1004680:	d0e74717 	ldw	r3,-25316(gp)
 1004684:	1880032e 	bgeu	r3,r2,1004694 <xTaskIncrementTick+0x100>
 1004688:	e0bffe17 	ldw	r2,-8(fp)
 100468c:	10800b17 	ldw	r2,44(r2)
 1004690:	d0a74715 	stw	r2,-25316(gp)
 1004694:	e0bffe17 	ldw	r2,-8(fp)
 1004698:	10800b17 	ldw	r2,44(r2)
 100469c:	10c00524 	muli	r3,r2,20
 10046a0:	008060f4 	movhi	r2,387
 10046a4:	10ba3404 	addi	r2,r2,-5936
 10046a8:	1887883a 	add	r3,r3,r2
 10046ac:	e0bffe17 	ldw	r2,-8(fp)
 10046b0:	10800104 	addi	r2,r2,4
 10046b4:	100b883a 	mov	r5,r2
 10046b8:	1809883a 	mov	r4,r3
 10046bc:	1000b800 	call	1000b80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10046c0:	e0bffe17 	ldw	r2,-8(fp)
 10046c4:	10c00b17 	ldw	r3,44(r2)
 10046c8:	d0a74117 	ldw	r2,-25340(gp)
 10046cc:	10800b17 	ldw	r2,44(r2)
 10046d0:	18bfcb36 	bltu	r3,r2,1004600 <__alt_data_end+0xff004600>
						{
							xSwitchRequired = pdTRUE;
 10046d4:	00800044 	movi	r2,1
 10046d8:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 10046dc:	003fc806 	br	1004600 <__alt_data_end+0xff004600>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 10046e0:	d0a74117 	ldw	r2,-25340(gp)
 10046e4:	10c00b17 	ldw	r3,44(r2)
 10046e8:	008060f4 	movhi	r2,387
 10046ec:	10ba3404 	addi	r2,r2,-5936
 10046f0:	18c00524 	muli	r3,r3,20
 10046f4:	10c5883a 	add	r2,r2,r3
 10046f8:	10800017 	ldw	r2,0(r2)
 10046fc:	108000b0 	cmpltui	r2,r2,2
 1004700:	1000061e 	bne	r2,zero,100471c <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 1004704:	00800044 	movi	r2,1
 1004708:	e0bffb15 	stw	r2,-20(fp)
 100470c:	00000306 	br	100471c <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 1004710:	d0a74917 	ldw	r2,-25308(gp)
 1004714:	10800044 	addi	r2,r2,1
 1004718:	d0a74915 	stw	r2,-25308(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 100471c:	d0a74a17 	ldw	r2,-25304(gp)
 1004720:	10000226 	beq	r2,zero,100472c <xTaskIncrementTick+0x198>
		{
			xSwitchRequired = pdTRUE;
 1004724:	00800044 	movi	r2,1
 1004728:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 100472c:	e0bffb17 	ldw	r2,-20(fp)
}
 1004730:	e037883a 	mov	sp,fp
 1004734:	dfc00117 	ldw	ra,4(sp)
 1004738:	df000017 	ldw	fp,0(sp)
 100473c:	dec00204 	addi	sp,sp,8
 1004740:	f800283a 	ret

01004744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 1004744:	defffd04 	addi	sp,sp,-12
 1004748:	df000215 	stw	fp,8(sp)
 100474c:	df000204 	addi	fp,sp,8
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 1004750:	d0a74f17 	ldw	r2,-25284(gp)
 1004754:	10000326 	beq	r2,zero,1004764 <vTaskSwitchContext+0x20>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 1004758:	00800044 	movi	r2,1
 100475c:	d0a74a15 	stw	r2,-25304(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004760:	00002906 	br	1004808 <vTaskSwitchContext+0xc4>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 1004764:	d0274a15 	stw	zero,-25304(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004768:	d0a74717 	ldw	r2,-25316(gp)
 100476c:	e0bffe15 	stw	r2,-8(fp)
 1004770:	00000306 	br	1004780 <vTaskSwitchContext+0x3c>
 1004774:	e0bffe17 	ldw	r2,-8(fp)
 1004778:	10bfffc4 	addi	r2,r2,-1
 100477c:	e0bffe15 	stw	r2,-8(fp)
 1004780:	008060f4 	movhi	r2,387
 1004784:	10ba3404 	addi	r2,r2,-5936
 1004788:	e0fffe17 	ldw	r3,-8(fp)
 100478c:	18c00524 	muli	r3,r3,20
 1004790:	10c5883a 	add	r2,r2,r3
 1004794:	10800017 	ldw	r2,0(r2)
 1004798:	103ff626 	beq	r2,zero,1004774 <__alt_data_end+0xff004774>
 100479c:	e0bffe17 	ldw	r2,-8(fp)
 10047a0:	10c00524 	muli	r3,r2,20
 10047a4:	008060f4 	movhi	r2,387
 10047a8:	10ba3404 	addi	r2,r2,-5936
 10047ac:	1885883a 	add	r2,r3,r2
 10047b0:	e0bfff15 	stw	r2,-4(fp)
 10047b4:	e0bfff17 	ldw	r2,-4(fp)
 10047b8:	10800117 	ldw	r2,4(r2)
 10047bc:	10c00117 	ldw	r3,4(r2)
 10047c0:	e0bfff17 	ldw	r2,-4(fp)
 10047c4:	10c00115 	stw	r3,4(r2)
 10047c8:	e0bfff17 	ldw	r2,-4(fp)
 10047cc:	10c00117 	ldw	r3,4(r2)
 10047d0:	e0bfff17 	ldw	r2,-4(fp)
 10047d4:	10800204 	addi	r2,r2,8
 10047d8:	1880051e 	bne	r3,r2,10047f0 <vTaskSwitchContext+0xac>
 10047dc:	e0bfff17 	ldw	r2,-4(fp)
 10047e0:	10800117 	ldw	r2,4(r2)
 10047e4:	10c00117 	ldw	r3,4(r2)
 10047e8:	e0bfff17 	ldw	r2,-4(fp)
 10047ec:	10c00115 	stw	r3,4(r2)
 10047f0:	e0bfff17 	ldw	r2,-4(fp)
 10047f4:	10800117 	ldw	r2,4(r2)
 10047f8:	10800317 	ldw	r2,12(r2)
 10047fc:	d0a74115 	stw	r2,-25340(gp)
 1004800:	e0bffe17 	ldw	r2,-8(fp)
 1004804:	d0a74715 	stw	r2,-25316(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004808:	0001883a 	nop
 100480c:	e037883a 	mov	sp,fp
 1004810:	df000017 	ldw	fp,0(sp)
 1004814:	dec00104 	addi	sp,sp,4
 1004818:	f800283a 	ret

0100481c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 100481c:	defffc04 	addi	sp,sp,-16
 1004820:	dfc00315 	stw	ra,12(sp)
 1004824:	df000215 	stw	fp,8(sp)
 1004828:	df000204 	addi	fp,sp,8
 100482c:	e13ffe15 	stw	r4,-8(fp)
 1004830:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004834:	d0a74117 	ldw	r2,-25340(gp)
 1004838:	10800604 	addi	r2,r2,24
 100483c:	100b883a 	mov	r5,r2
 1004840:	e13ffe17 	ldw	r4,-8(fp)
 1004844:	1000c0c0 	call	1000c0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1004848:	01400044 	movi	r5,1
 100484c:	e13fff17 	ldw	r4,-4(fp)
 1004850:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 1004854:	0001883a 	nop
 1004858:	e037883a 	mov	sp,fp
 100485c:	dfc00117 	ldw	ra,4(sp)
 1004860:	df000017 	ldw	fp,0(sp)
 1004864:	dec00204 	addi	sp,sp,8
 1004868:	f800283a 	ret

0100486c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 100486c:	defffb04 	addi	sp,sp,-20
 1004870:	dfc00415 	stw	ra,16(sp)
 1004874:	df000315 	stw	fp,12(sp)
 1004878:	df000304 	addi	fp,sp,12
 100487c:	e13ffd15 	stw	r4,-12(fp)
 1004880:	e17ffe15 	stw	r5,-8(fp)
 1004884:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1004888:	d0a74117 	ldw	r2,-25340(gp)
 100488c:	e0fffe17 	ldw	r3,-8(fp)
 1004890:	18e00034 	orhi	r3,r3,32768
 1004894:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004898:	d0a74117 	ldw	r2,-25340(gp)
 100489c:	10800604 	addi	r2,r2,24
 10048a0:	100b883a 	mov	r5,r2
 10048a4:	e13ffd17 	ldw	r4,-12(fp)
 10048a8:	1000b800 	call	1000b80 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10048ac:	01400044 	movi	r5,1
 10048b0:	e13fff17 	ldw	r4,-4(fp)
 10048b4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>
}
 10048b8:	0001883a 	nop
 10048bc:	e037883a 	mov	sp,fp
 10048c0:	dfc00117 	ldw	ra,4(sp)
 10048c4:	df000017 	ldw	fp,0(sp)
 10048c8:	dec00204 	addi	sp,sp,8
 10048cc:	f800283a 	ret

010048d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 10048d0:	defffb04 	addi	sp,sp,-20
 10048d4:	dfc00415 	stw	ra,16(sp)
 10048d8:	df000315 	stw	fp,12(sp)
 10048dc:	df000304 	addi	fp,sp,12
 10048e0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10048e4:	e0bfff17 	ldw	r2,-4(fp)
 10048e8:	10800317 	ldw	r2,12(r2)
 10048ec:	10800317 	ldw	r2,12(r2)
 10048f0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 10048f4:	e0bffe17 	ldw	r2,-8(fp)
 10048f8:	10800604 	addi	r2,r2,24
 10048fc:	1009883a 	mov	r4,r2
 1004900:	1000ce40 	call	1000ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1004904:	d0a74f17 	ldw	r2,-25284(gp)
 1004908:	1000171e 	bne	r2,zero,1004968 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 100490c:	e0bffe17 	ldw	r2,-8(fp)
 1004910:	10800104 	addi	r2,r2,4
 1004914:	1009883a 	mov	r4,r2
 1004918:	1000ce40 	call	1000ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 100491c:	e0bffe17 	ldw	r2,-8(fp)
 1004920:	10800b17 	ldw	r2,44(r2)
 1004924:	d0e74717 	ldw	r3,-25316(gp)
 1004928:	1880032e 	bgeu	r3,r2,1004938 <xTaskRemoveFromEventList+0x68>
 100492c:	e0bffe17 	ldw	r2,-8(fp)
 1004930:	10800b17 	ldw	r2,44(r2)
 1004934:	d0a74715 	stw	r2,-25316(gp)
 1004938:	e0bffe17 	ldw	r2,-8(fp)
 100493c:	10800b17 	ldw	r2,44(r2)
 1004940:	10c00524 	muli	r3,r2,20
 1004944:	008060f4 	movhi	r2,387
 1004948:	10ba3404 	addi	r2,r2,-5936
 100494c:	1887883a 	add	r3,r3,r2
 1004950:	e0bffe17 	ldw	r2,-8(fp)
 1004954:	10800104 	addi	r2,r2,4
 1004958:	100b883a 	mov	r5,r2
 100495c:	1809883a 	mov	r4,r3
 1004960:	1000b800 	call	1000b80 <vListInsertEnd>
 1004964:	00000606 	br	1004980 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 1004968:	e0bffe17 	ldw	r2,-8(fp)
 100496c:	10800604 	addi	r2,r2,24
 1004970:	100b883a 	mov	r5,r2
 1004974:	010060f4 	movhi	r4,387
 1004978:	213a5704 	addi	r4,r4,-5796
 100497c:	1000b800 	call	1000b80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004980:	e0bffe17 	ldw	r2,-8(fp)
 1004984:	10800b17 	ldw	r2,44(r2)
 1004988:	d0e74117 	ldw	r3,-25340(gp)
 100498c:	18c00b17 	ldw	r3,44(r3)
 1004990:	1880052e 	bgeu	r3,r2,10049a8 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 1004994:	00800044 	movi	r2,1
 1004998:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 100499c:	00800044 	movi	r2,1
 10049a0:	d0a74a15 	stw	r2,-25304(gp)
 10049a4:	00000106 	br	10049ac <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 10049a8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10049ac:	e0bffd17 	ldw	r2,-12(fp)
}
 10049b0:	e037883a 	mov	sp,fp
 10049b4:	dfc00117 	ldw	ra,4(sp)
 10049b8:	df000017 	ldw	fp,0(sp)
 10049bc:	dec00204 	addi	sp,sp,8
 10049c0:	f800283a 	ret

010049c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 10049c4:	defffb04 	addi	sp,sp,-20
 10049c8:	dfc00415 	stw	ra,16(sp)
 10049cc:	df000315 	stw	fp,12(sp)
 10049d0:	df000304 	addi	fp,sp,12
 10049d4:	e13ffe15 	stw	r4,-8(fp)
 10049d8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 10049dc:	e0bfff17 	ldw	r2,-4(fp)
 10049e0:	10e00034 	orhi	r3,r2,32768
 10049e4:	e0bffe17 	ldw	r2,-8(fp)
 10049e8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10049ec:	e0bffe17 	ldw	r2,-8(fp)
 10049f0:	10800317 	ldw	r2,12(r2)
 10049f4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 10049f8:	e13ffe17 	ldw	r4,-8(fp)
 10049fc:	1000ce40 	call	1000ce4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1004a00:	e0bffd17 	ldw	r2,-12(fp)
 1004a04:	10800104 	addi	r2,r2,4
 1004a08:	1009883a 	mov	r4,r2
 1004a0c:	1000ce40 	call	1000ce4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1004a10:	e0bffd17 	ldw	r2,-12(fp)
 1004a14:	10800b17 	ldw	r2,44(r2)
 1004a18:	d0e74717 	ldw	r3,-25316(gp)
 1004a1c:	1880032e 	bgeu	r3,r2,1004a2c <vTaskRemoveFromUnorderedEventList+0x68>
 1004a20:	e0bffd17 	ldw	r2,-12(fp)
 1004a24:	10800b17 	ldw	r2,44(r2)
 1004a28:	d0a74715 	stw	r2,-25316(gp)
 1004a2c:	e0bffd17 	ldw	r2,-12(fp)
 1004a30:	10800b17 	ldw	r2,44(r2)
 1004a34:	10c00524 	muli	r3,r2,20
 1004a38:	008060f4 	movhi	r2,387
 1004a3c:	10ba3404 	addi	r2,r2,-5936
 1004a40:	1887883a 	add	r3,r3,r2
 1004a44:	e0bffd17 	ldw	r2,-12(fp)
 1004a48:	10800104 	addi	r2,r2,4
 1004a4c:	100b883a 	mov	r5,r2
 1004a50:	1809883a 	mov	r4,r3
 1004a54:	1000b800 	call	1000b80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004a58:	e0bffd17 	ldw	r2,-12(fp)
 1004a5c:	10800b17 	ldw	r2,44(r2)
 1004a60:	d0e74117 	ldw	r3,-25340(gp)
 1004a64:	18c00b17 	ldw	r3,44(r3)
 1004a68:	1880022e 	bgeu	r3,r2,1004a74 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 1004a6c:	00800044 	movi	r2,1
 1004a70:	d0a74a15 	stw	r2,-25304(gp)
	}
}
 1004a74:	0001883a 	nop
 1004a78:	e037883a 	mov	sp,fp
 1004a7c:	dfc00117 	ldw	ra,4(sp)
 1004a80:	df000017 	ldw	fp,0(sp)
 1004a84:	dec00204 	addi	sp,sp,8
 1004a88:	f800283a 	ret

01004a8c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004a8c:	defffd04 	addi	sp,sp,-12
 1004a90:	dfc00215 	stw	ra,8(sp)
 1004a94:	df000115 	stw	fp,4(sp)
 1004a98:	df000104 	addi	fp,sp,4
 1004a9c:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 1004aa0:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004aa4:	d0e74b17 	ldw	r3,-25300(gp)
 1004aa8:	e0bfff17 	ldw	r2,-4(fp)
 1004aac:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 1004ab0:	d0e74617 	ldw	r3,-25320(gp)
 1004ab4:	e0bfff17 	ldw	r2,-4(fp)
 1004ab8:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 1004abc:	10052c40 	call	10052c4 <vTaskExitCritical>
}
 1004ac0:	0001883a 	nop
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	dfc00117 	ldw	ra,4(sp)
 1004acc:	df000017 	ldw	fp,0(sp)
 1004ad0:	dec00204 	addi	sp,sp,8
 1004ad4:	f800283a 	ret

01004ad8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 1004ad8:	defffe04 	addi	sp,sp,-8
 1004adc:	df000115 	stw	fp,4(sp)
 1004ae0:	df000104 	addi	fp,sp,4
 1004ae4:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004ae8:	d0e74b17 	ldw	r3,-25300(gp)
 1004aec:	e0bfff17 	ldw	r2,-4(fp)
 1004af0:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 1004af4:	d0e74617 	ldw	r3,-25320(gp)
 1004af8:	e0bfff17 	ldw	r2,-4(fp)
 1004afc:	10c00115 	stw	r3,4(r2)
}
 1004b00:	0001883a 	nop
 1004b04:	e037883a 	mov	sp,fp
 1004b08:	df000017 	ldw	fp,0(sp)
 1004b0c:	dec00104 	addi	sp,sp,4
 1004b10:	f800283a 	ret

01004b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1004b14:	defff904 	addi	sp,sp,-28
 1004b18:	dfc00615 	stw	ra,24(sp)
 1004b1c:	df000515 	stw	fp,20(sp)
 1004b20:	df000504 	addi	fp,sp,20
 1004b24:	e13ffe15 	stw	r4,-8(fp)
 1004b28:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1004b2c:	10052700 	call	1005270 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 1004b30:	d0a74617 	ldw	r2,-25320(gp)
 1004b34:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 1004b38:	e0bffe17 	ldw	r2,-8(fp)
 1004b3c:	10800117 	ldw	r2,4(r2)
 1004b40:	e0fffc17 	ldw	r3,-16(fp)
 1004b44:	1885c83a 	sub	r2,r3,r2
 1004b48:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 1004b4c:	e0bfff17 	ldw	r2,-4(fp)
 1004b50:	10800017 	ldw	r2,0(r2)
 1004b54:	10bfffd8 	cmpnei	r2,r2,-1
 1004b58:	1000021e 	bne	r2,zero,1004b64 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 1004b5c:	e03ffb15 	stw	zero,-20(fp)
 1004b60:	00001d06 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 1004b64:	e0bffe17 	ldw	r2,-8(fp)
 1004b68:	10c00017 	ldw	r3,0(r2)
 1004b6c:	d0a74b17 	ldw	r2,-25300(gp)
 1004b70:	18800726 	beq	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
 1004b74:	e0bffe17 	ldw	r2,-8(fp)
 1004b78:	10800117 	ldw	r2,4(r2)
 1004b7c:	e0fffc17 	ldw	r3,-16(fp)
 1004b80:	18800336 	bltu	r3,r2,1004b90 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 1004b84:	00800044 	movi	r2,1
 1004b88:	e0bffb15 	stw	r2,-20(fp)
 1004b8c:	00001206 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 1004b90:	e0bfff17 	ldw	r2,-4(fp)
 1004b94:	10800017 	ldw	r2,0(r2)
 1004b98:	e0fffd17 	ldw	r3,-12(fp)
 1004b9c:	18800a2e 	bgeu	r3,r2,1004bc8 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 1004ba0:	e0bfff17 	ldw	r2,-4(fp)
 1004ba4:	10c00017 	ldw	r3,0(r2)
 1004ba8:	e0bffd17 	ldw	r2,-12(fp)
 1004bac:	1887c83a 	sub	r3,r3,r2
 1004bb0:	e0bfff17 	ldw	r2,-4(fp)
 1004bb4:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 1004bb8:	e13ffe17 	ldw	r4,-8(fp)
 1004bbc:	1004ad80 	call	1004ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 1004bc0:	e03ffb15 	stw	zero,-20(fp)
 1004bc4:	00000406 	br	1004bd8 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 1004bc8:	e0bfff17 	ldw	r2,-4(fp)
 1004bcc:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 1004bd0:	00800044 	movi	r2,1
 1004bd4:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 1004bd8:	10052c40 	call	10052c4 <vTaskExitCritical>

	return xReturn;
 1004bdc:	e0bffb17 	ldw	r2,-20(fp)
}
 1004be0:	e037883a 	mov	sp,fp
 1004be4:	dfc00117 	ldw	ra,4(sp)
 1004be8:	df000017 	ldw	fp,0(sp)
 1004bec:	dec00204 	addi	sp,sp,8
 1004bf0:	f800283a 	ret

01004bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1004bf4:	deffff04 	addi	sp,sp,-4
 1004bf8:	df000015 	stw	fp,0(sp)
 1004bfc:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1004c00:	00800044 	movi	r2,1
 1004c04:	d0a74a15 	stw	r2,-25304(gp)
}
 1004c08:	0001883a 	nop
 1004c0c:	e037883a 	mov	sp,fp
 1004c10:	df000017 	ldw	fp,0(sp)
 1004c14:	dec00104 	addi	sp,sp,4
 1004c18:	f800283a 	ret

01004c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 1004c1c:	defffd04 	addi	sp,sp,-12
 1004c20:	dfc00215 	stw	ra,8(sp)
 1004c24:	df000115 	stw	fp,4(sp)
 1004c28:	df000104 	addi	fp,sp,4
 1004c2c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 1004c30:	1004cf00 	call	1004cf0 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1004c34:	003ffe06 	br	1004c30 <__alt_data_end+0xff004c30>

01004c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 1004c38:	defffd04 	addi	sp,sp,-12
 1004c3c:	dfc00215 	stw	ra,8(sp)
 1004c40:	df000115 	stw	fp,4(sp)
 1004c44:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c48:	e03fff15 	stw	zero,-4(fp)
 1004c4c:	00000a06 	br	1004c78 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 1004c50:	e0bfff17 	ldw	r2,-4(fp)
 1004c54:	10c00524 	muli	r3,r2,20
 1004c58:	008060f4 	movhi	r2,387
 1004c5c:	10ba3404 	addi	r2,r2,-5936
 1004c60:	1885883a 	add	r2,r3,r2
 1004c64:	1009883a 	mov	r4,r2
 1004c68:	1000aec0 	call	1000aec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004c6c:	e0bfff17 	ldw	r2,-4(fp)
 1004c70:	10800044 	addi	r2,r2,1
 1004c74:	e0bfff15 	stw	r2,-4(fp)
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10800170 	cmpltui	r2,r2,5
 1004c80:	103ff31e 	bne	r2,zero,1004c50 <__alt_data_end+0xff004c50>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1004c84:	010060f4 	movhi	r4,387
 1004c88:	213a4d04 	addi	r4,r4,-5836
 1004c8c:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 1004c90:	010060f4 	movhi	r4,387
 1004c94:	213a5204 	addi	r4,r4,-5816
 1004c98:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 1004c9c:	010060f4 	movhi	r4,387
 1004ca0:	213a5704 	addi	r4,r4,-5796
 1004ca4:	1000aec0 	call	1000aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 1004ca8:	010060f4 	movhi	r4,387
 1004cac:	213a5c04 	addi	r4,r4,-5776
 1004cb0:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 1004cb4:	010060f4 	movhi	r4,387
 1004cb8:	213a6104 	addi	r4,r4,-5756
 1004cbc:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 1004cc0:	008060f4 	movhi	r2,387
 1004cc4:	10ba4d04 	addi	r2,r2,-5836
 1004cc8:	d0a74215 	stw	r2,-25336(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 1004ccc:	008060f4 	movhi	r2,387
 1004cd0:	10ba5204 	addi	r2,r2,-5816
 1004cd4:	d0a74315 	stw	r2,-25332(gp)
}
 1004cd8:	0001883a 	nop
 1004cdc:	e037883a 	mov	sp,fp
 1004ce0:	dfc00117 	ldw	ra,4(sp)
 1004ce4:	df000017 	ldw	fp,0(sp)
 1004ce8:	dec00204 	addi	sp,sp,8
 1004cec:	f800283a 	ret

01004cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 1004cf0:	defffd04 	addi	sp,sp,-12
 1004cf4:	dfc00215 	stw	ra,8(sp)
 1004cf8:	df000115 	stw	fp,4(sp)
 1004cfc:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d00:	00001306 	br	1004d50 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 1004d04:	10052700 	call	1005270 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004d08:	008060f4 	movhi	r2,387
 1004d0c:	10ba5c04 	addi	r2,r2,-5776
 1004d10:	10800317 	ldw	r2,12(r2)
 1004d14:	10800317 	ldw	r2,12(r2)
 1004d18:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1004d1c:	e0bfff17 	ldw	r2,-4(fp)
 1004d20:	10800104 	addi	r2,r2,4
 1004d24:	1009883a 	mov	r4,r2
 1004d28:	1000ce40 	call	1000ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 1004d2c:	d0a74517 	ldw	r2,-25324(gp)
 1004d30:	10bfffc4 	addi	r2,r2,-1
 1004d34:	d0a74515 	stw	r2,-25324(gp)
				--uxDeletedTasksWaitingCleanUp;
 1004d38:	d0a74417 	ldw	r2,-25328(gp)
 1004d3c:	10bfffc4 	addi	r2,r2,-1
 1004d40:	d0a74415 	stw	r2,-25328(gp)
			}
			taskEXIT_CRITICAL();
 1004d44:	10052c40 	call	10052c4 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 1004d48:	e13fff17 	ldw	r4,-4(fp)
 1004d4c:	1004e340 	call	1004e34 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004d50:	d0a74417 	ldw	r2,-25328(gp)
 1004d54:	103feb1e 	bne	r2,zero,1004d04 <__alt_data_end+0xff004d04>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1004d58:	0001883a 	nop
 1004d5c:	e037883a 	mov	sp,fp
 1004d60:	dfc00117 	ldw	ra,4(sp)
 1004d64:	df000017 	ldw	fp,0(sp)
 1004d68:	dec00204 	addi	sp,sp,8
 1004d6c:	f800283a 	ret

01004d70 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 1004d70:	defffd04 	addi	sp,sp,-12
 1004d74:	df000215 	stw	fp,8(sp)
 1004d78:	df000204 	addi	fp,sp,8
 1004d7c:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 1004d80:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004d84:	00000606 	br	1004da0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 1004d88:	e0bfff17 	ldw	r2,-4(fp)
 1004d8c:	10800044 	addi	r2,r2,1
 1004d90:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 1004d94:	e0bffe17 	ldw	r2,-8(fp)
 1004d98:	10800044 	addi	r2,r2,1
 1004d9c:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004da0:	e0bfff17 	ldw	r2,-4(fp)
 1004da4:	10800003 	ldbu	r2,0(r2)
 1004da8:	10803fcc 	andi	r2,r2,255
 1004dac:	10802960 	cmpeqi	r2,r2,165
 1004db0:	103ff51e 	bne	r2,zero,1004d88 <__alt_data_end+0xff004d88>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 1004db4:	e0bffe17 	ldw	r2,-8(fp)
 1004db8:	1004d0ba 	srli	r2,r2,2
 1004dbc:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 1004dc0:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004dc4:	e037883a 	mov	sp,fp
 1004dc8:	df000017 	ldw	fp,0(sp)
 1004dcc:	dec00104 	addi	sp,sp,4
 1004dd0:	f800283a 	ret

01004dd4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1004dd4:	defffa04 	addi	sp,sp,-24
 1004dd8:	dfc00515 	stw	ra,20(sp)
 1004ddc:	df000415 	stw	fp,16(sp)
 1004de0:	df000404 	addi	fp,sp,16
 1004de4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1004de8:	e0bfff17 	ldw	r2,-4(fp)
 1004dec:	1000021e 	bne	r2,zero,1004df8 <uxTaskGetStackHighWaterMark+0x24>
 1004df0:	d0a74117 	ldw	r2,-25340(gp)
 1004df4:	00000106 	br	1004dfc <uxTaskGetStackHighWaterMark+0x28>
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 1004e00:	e0bffc17 	ldw	r2,-16(fp)
 1004e04:	10800c17 	ldw	r2,48(r2)
 1004e08:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1004e0c:	e13ffd17 	ldw	r4,-12(fp)
 1004e10:	1004d700 	call	1004d70 <prvTaskCheckFreeStackSpace>
 1004e14:	10bfffcc 	andi	r2,r2,65535
 1004e18:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1004e1c:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004e20:	e037883a 	mov	sp,fp
 1004e24:	dfc00117 	ldw	ra,4(sp)
 1004e28:	df000017 	ldw	fp,0(sp)
 1004e2c:	dec00204 	addi	sp,sp,8
 1004e30:	f800283a 	ret

01004e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 1004e34:	defffd04 	addi	sp,sp,-12
 1004e38:	dfc00215 	stw	ra,8(sp)
 1004e3c:	df000115 	stw	fp,4(sp)
 1004e40:	df000104 	addi	fp,sp,4
 1004e44:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1004e48:	e0bfff17 	ldw	r2,-4(fp)
 1004e4c:	10800c17 	ldw	r2,48(r2)
 1004e50:	1009883a 	mov	r4,r2
 1004e54:	10011840 	call	1001184 <vPortFree>
			vPortFree( pxTCB );
 1004e58:	e13fff17 	ldw	r4,-4(fp)
 1004e5c:	10011840 	call	1001184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1004e60:	0001883a 	nop
 1004e64:	e037883a 	mov	sp,fp
 1004e68:	dfc00117 	ldw	ra,4(sp)
 1004e6c:	df000017 	ldw	fp,0(sp)
 1004e70:	dec00204 	addi	sp,sp,8
 1004e74:	f800283a 	ret

01004e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 1004e78:	defffe04 	addi	sp,sp,-8
 1004e7c:	df000115 	stw	fp,4(sp)
 1004e80:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004e84:	d0a74217 	ldw	r2,-25336(gp)
 1004e88:	10800017 	ldw	r2,0(r2)
 1004e8c:	1000031e 	bne	r2,zero,1004e9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 1004e90:	00bfffc4 	movi	r2,-1
 1004e94:	d0a74d15 	stw	r2,-25292(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 1004e98:	00000706 	br	1004eb8 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004e9c:	d0a74217 	ldw	r2,-25336(gp)
 1004ea0:	10800317 	ldw	r2,12(r2)
 1004ea4:	10800317 	ldw	r2,12(r2)
 1004ea8:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1004eac:	e0bfff17 	ldw	r2,-4(fp)
 1004eb0:	10800117 	ldw	r2,4(r2)
 1004eb4:	d0a74d15 	stw	r2,-25292(gp)
	}
}
 1004eb8:	0001883a 	nop
 1004ebc:	e037883a 	mov	sp,fp
 1004ec0:	df000017 	ldw	fp,0(sp)
 1004ec4:	dec00104 	addi	sp,sp,4
 1004ec8:	f800283a 	ret

01004ecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 1004ecc:	defffe04 	addi	sp,sp,-8
 1004ed0:	df000115 	stw	fp,4(sp)
 1004ed4:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1004ed8:	d0a74117 	ldw	r2,-25340(gp)
 1004edc:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1004ee0:	e0bfff17 	ldw	r2,-4(fp)
	}
 1004ee4:	e037883a 	mov	sp,fp
 1004ee8:	df000017 	ldw	fp,0(sp)
 1004eec:	dec00104 	addi	sp,sp,4
 1004ef0:	f800283a 	ret

01004ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1004ef4:	defffb04 	addi	sp,sp,-20
 1004ef8:	dfc00415 	stw	ra,16(sp)
 1004efc:	df000315 	stw	fp,12(sp)
 1004f00:	df000304 	addi	fp,sp,12
 1004f04:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1004f08:	e0bfff17 	ldw	r2,-4(fp)
 1004f0c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1004f10:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1004f14:	e0bfff17 	ldw	r2,-4(fp)
 1004f18:	10004026 	beq	r2,zero,100501c <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1004f1c:	e0bffe17 	ldw	r2,-8(fp)
 1004f20:	10c00b17 	ldw	r3,44(r2)
 1004f24:	d0a74117 	ldw	r2,-25340(gp)
 1004f28:	10800b17 	ldw	r2,44(r2)
 1004f2c:	1880342e 	bgeu	r3,r2,1005000 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1004f30:	e0bffe17 	ldw	r2,-8(fp)
 1004f34:	10800617 	ldw	r2,24(r2)
 1004f38:	10000616 	blt	r2,zero,1004f54 <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1004f3c:	d0a74117 	ldw	r2,-25340(gp)
 1004f40:	10800b17 	ldw	r2,44(r2)
 1004f44:	00c00144 	movi	r3,5
 1004f48:	1887c83a 	sub	r3,r3,r2
 1004f4c:	e0bffe17 	ldw	r2,-8(fp)
 1004f50:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1004f54:	e0bffe17 	ldw	r2,-8(fp)
 1004f58:	10c00517 	ldw	r3,20(r2)
 1004f5c:	e0bffe17 	ldw	r2,-8(fp)
 1004f60:	10800b17 	ldw	r2,44(r2)
 1004f64:	11000524 	muli	r4,r2,20
 1004f68:	008060f4 	movhi	r2,387
 1004f6c:	10ba3404 	addi	r2,r2,-5936
 1004f70:	2085883a 	add	r2,r4,r2
 1004f74:	18801b1e 	bne	r3,r2,1004fe4 <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1004f78:	e0bffe17 	ldw	r2,-8(fp)
 1004f7c:	10800104 	addi	r2,r2,4
 1004f80:	1009883a 	mov	r4,r2
 1004f84:	1000ce40 	call	1000ce4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004f88:	d0a74117 	ldw	r2,-25340(gp)
 1004f8c:	10c00b17 	ldw	r3,44(r2)
 1004f90:	e0bffe17 	ldw	r2,-8(fp)
 1004f94:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1004f98:	e0bffe17 	ldw	r2,-8(fp)
 1004f9c:	10800b17 	ldw	r2,44(r2)
 1004fa0:	d0e74717 	ldw	r3,-25316(gp)
 1004fa4:	1880032e 	bgeu	r3,r2,1004fb4 <xTaskPriorityInherit+0xc0>
 1004fa8:	e0bffe17 	ldw	r2,-8(fp)
 1004fac:	10800b17 	ldw	r2,44(r2)
 1004fb0:	d0a74715 	stw	r2,-25316(gp)
 1004fb4:	e0bffe17 	ldw	r2,-8(fp)
 1004fb8:	10800b17 	ldw	r2,44(r2)
 1004fbc:	10c00524 	muli	r3,r2,20
 1004fc0:	008060f4 	movhi	r2,387
 1004fc4:	10ba3404 	addi	r2,r2,-5936
 1004fc8:	1887883a 	add	r3,r3,r2
 1004fcc:	e0bffe17 	ldw	r2,-8(fp)
 1004fd0:	10800104 	addi	r2,r2,4
 1004fd4:	100b883a 	mov	r5,r2
 1004fd8:	1809883a 	mov	r4,r3
 1004fdc:	1000b800 	call	1000b80 <vListInsertEnd>
 1004fe0:	00000406 	br	1004ff4 <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004fe4:	d0a74117 	ldw	r2,-25340(gp)
 1004fe8:	10c00b17 	ldw	r3,44(r2)
 1004fec:	e0bffe17 	ldw	r2,-8(fp)
 1004ff0:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1004ff4:	00800044 	movi	r2,1
 1004ff8:	e0bffd15 	stw	r2,-12(fp)
 1004ffc:	00000706 	br	100501c <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1005000:	e0bffe17 	ldw	r2,-8(fp)
 1005004:	10c01017 	ldw	r3,64(r2)
 1005008:	d0a74117 	ldw	r2,-25340(gp)
 100500c:	10800b17 	ldw	r2,44(r2)
 1005010:	1880022e 	bgeu	r3,r2,100501c <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1005014:	00800044 	movi	r2,1
 1005018:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 100501c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005020:	e037883a 	mov	sp,fp
 1005024:	dfc00117 	ldw	ra,4(sp)
 1005028:	df000017 	ldw	fp,0(sp)
 100502c:	dec00204 	addi	sp,sp,8
 1005030:	f800283a 	ret

01005034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1005034:	defffb04 	addi	sp,sp,-20
 1005038:	dfc00415 	stw	ra,16(sp)
 100503c:	df000315 	stw	fp,12(sp)
 1005040:	df000304 	addi	fp,sp,12
 1005044:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005048:	e0bfff17 	ldw	r2,-4(fp)
 100504c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1005050:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1005054:	e0bfff17 	ldw	r2,-4(fp)
 1005058:	10002f26 	beq	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 100505c:	e0bffe17 	ldw	r2,-8(fp)
 1005060:	10801117 	ldw	r2,68(r2)
 1005064:	10ffffc4 	addi	r3,r2,-1
 1005068:	e0bffe17 	ldw	r2,-8(fp)
 100506c:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1005070:	e0bffe17 	ldw	r2,-8(fp)
 1005074:	10c00b17 	ldw	r3,44(r2)
 1005078:	e0bffe17 	ldw	r2,-8(fp)
 100507c:	10801017 	ldw	r2,64(r2)
 1005080:	18802526 	beq	r3,r2,1005118 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1005084:	e0bffe17 	ldw	r2,-8(fp)
 1005088:	10801117 	ldw	r2,68(r2)
 100508c:	1000221e 	bne	r2,zero,1005118 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005090:	e0bffe17 	ldw	r2,-8(fp)
 1005094:	10800104 	addi	r2,r2,4
 1005098:	1009883a 	mov	r4,r2
 100509c:	1000ce40 	call	1000ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 10050a0:	e0bffe17 	ldw	r2,-8(fp)
 10050a4:	10c01017 	ldw	r3,64(r2)
 10050a8:	e0bffe17 	ldw	r2,-8(fp)
 10050ac:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10050b0:	e0bffe17 	ldw	r2,-8(fp)
 10050b4:	10800b17 	ldw	r2,44(r2)
 10050b8:	00c00144 	movi	r3,5
 10050bc:	1887c83a 	sub	r3,r3,r2
 10050c0:	e0bffe17 	ldw	r2,-8(fp)
 10050c4:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 10050c8:	e0bffe17 	ldw	r2,-8(fp)
 10050cc:	10800b17 	ldw	r2,44(r2)
 10050d0:	d0e74717 	ldw	r3,-25316(gp)
 10050d4:	1880032e 	bgeu	r3,r2,10050e4 <xTaskPriorityDisinherit+0xb0>
 10050d8:	e0bffe17 	ldw	r2,-8(fp)
 10050dc:	10800b17 	ldw	r2,44(r2)
 10050e0:	d0a74715 	stw	r2,-25316(gp)
 10050e4:	e0bffe17 	ldw	r2,-8(fp)
 10050e8:	10800b17 	ldw	r2,44(r2)
 10050ec:	10c00524 	muli	r3,r2,20
 10050f0:	008060f4 	movhi	r2,387
 10050f4:	10ba3404 	addi	r2,r2,-5936
 10050f8:	1887883a 	add	r3,r3,r2
 10050fc:	e0bffe17 	ldw	r2,-8(fp)
 1005100:	10800104 	addi	r2,r2,4
 1005104:	100b883a 	mov	r5,r2
 1005108:	1809883a 	mov	r4,r3
 100510c:	1000b800 	call	1000b80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1005110:	00800044 	movi	r2,1
 1005114:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1005118:	e0bffd17 	ldw	r2,-12(fp)
	}
 100511c:	e037883a 	mov	sp,fp
 1005120:	dfc00117 	ldw	ra,4(sp)
 1005124:	df000017 	ldw	fp,0(sp)
 1005128:	dec00204 	addi	sp,sp,8
 100512c:	f800283a 	ret

01005130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1005130:	defff804 	addi	sp,sp,-32
 1005134:	dfc00715 	stw	ra,28(sp)
 1005138:	df000615 	stw	fp,24(sp)
 100513c:	df000604 	addi	fp,sp,24
 1005140:	e13ffe15 	stw	r4,-8(fp)
 1005144:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005148:	e0bffe17 	ldw	r2,-8(fp)
 100514c:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1005150:	00800044 	movi	r2,1
 1005154:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1005158:	e0bffe17 	ldw	r2,-8(fp)
 100515c:	10003e26 	beq	r2,zero,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1005160:	e0bffb17 	ldw	r2,-20(fp)
 1005164:	10c01017 	ldw	r3,64(r2)
 1005168:	e0bfff17 	ldw	r2,-4(fp)
 100516c:	1880032e 	bgeu	r3,r2,100517c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1005170:	e0bfff17 	ldw	r2,-4(fp)
 1005174:	e0bffa15 	stw	r2,-24(fp)
 1005178:	00000306 	br	1005188 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 100517c:	e0bffb17 	ldw	r2,-20(fp)
 1005180:	10801017 	ldw	r2,64(r2)
 1005184:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1005188:	e0bffb17 	ldw	r2,-20(fp)
 100518c:	10c00b17 	ldw	r3,44(r2)
 1005190:	e0bffa17 	ldw	r2,-24(fp)
 1005194:	18803026 	beq	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1005198:	e0bffb17 	ldw	r2,-20(fp)
 100519c:	10c01117 	ldw	r3,68(r2)
 10051a0:	e0bffc17 	ldw	r2,-16(fp)
 10051a4:	18802c1e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 10051a8:	e0bffb17 	ldw	r2,-20(fp)
 10051ac:	10800b17 	ldw	r2,44(r2)
 10051b0:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 10051b4:	e0bffb17 	ldw	r2,-20(fp)
 10051b8:	e0fffa17 	ldw	r3,-24(fp)
 10051bc:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 10051c0:	e0bffb17 	ldw	r2,-20(fp)
 10051c4:	10800617 	ldw	r2,24(r2)
 10051c8:	10000516 	blt	r2,zero,10051e0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10051cc:	00c00144 	movi	r3,5
 10051d0:	e0bffa17 	ldw	r2,-24(fp)
 10051d4:	1887c83a 	sub	r3,r3,r2
 10051d8:	e0bffb17 	ldw	r2,-20(fp)
 10051dc:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 10051e0:	e0bffb17 	ldw	r2,-20(fp)
 10051e4:	10c00517 	ldw	r3,20(r2)
 10051e8:	e0bffd17 	ldw	r2,-12(fp)
 10051ec:	11000524 	muli	r4,r2,20
 10051f0:	008060f4 	movhi	r2,387
 10051f4:	10ba3404 	addi	r2,r2,-5936
 10051f8:	2085883a 	add	r2,r4,r2
 10051fc:	1880161e 	bne	r3,r2,1005258 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005200:	e0bffb17 	ldw	r2,-20(fp)
 1005204:	10800104 	addi	r2,r2,4
 1005208:	1009883a 	mov	r4,r2
 100520c:	1000ce40 	call	1000ce4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1005210:	e0bffb17 	ldw	r2,-20(fp)
 1005214:	10800b17 	ldw	r2,44(r2)
 1005218:	d0e74717 	ldw	r3,-25316(gp)
 100521c:	1880032e 	bgeu	r3,r2,100522c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1005220:	e0bffb17 	ldw	r2,-20(fp)
 1005224:	10800b17 	ldw	r2,44(r2)
 1005228:	d0a74715 	stw	r2,-25316(gp)
 100522c:	e0bffb17 	ldw	r2,-20(fp)
 1005230:	10800b17 	ldw	r2,44(r2)
 1005234:	10c00524 	muli	r3,r2,20
 1005238:	008060f4 	movhi	r2,387
 100523c:	10ba3404 	addi	r2,r2,-5936
 1005240:	1887883a 	add	r3,r3,r2
 1005244:	e0bffb17 	ldw	r2,-20(fp)
 1005248:	10800104 	addi	r2,r2,4
 100524c:	100b883a 	mov	r5,r2
 1005250:	1809883a 	mov	r4,r3
 1005254:	1000b800 	call	1000b80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005258:	0001883a 	nop
 100525c:	e037883a 	mov	sp,fp
 1005260:	dfc00117 	ldw	ra,4(sp)
 1005264:	df000017 	ldw	fp,0(sp)
 1005268:	dec00204 	addi	sp,sp,8
 100526c:	f800283a 	ret

01005270 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1005270:	defffe04 	addi	sp,sp,-8
 1005274:	df000115 	stw	fp,4(sp)
 1005278:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100527c:	0005303a 	rdctl	r2,status
 1005280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005284:	e0ffff17 	ldw	r3,-4(fp)
 1005288:	00bfff84 	movi	r2,-2
 100528c:	1884703a 	and	r2,r3,r2
 1005290:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 1005294:	d0a74817 	ldw	r2,-25312(gp)
 1005298:	10000526 	beq	r2,zero,10052b0 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 100529c:	d0a74117 	ldw	r2,-25340(gp)
 10052a0:	10c00f17 	ldw	r3,60(r2)
 10052a4:	18c00044 	addi	r3,r3,1
 10052a8:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 10052ac:	d0a74117 	ldw	r2,-25340(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 10052b0:	0001883a 	nop
 10052b4:	e037883a 	mov	sp,fp
 10052b8:	df000017 	ldw	fp,0(sp)
 10052bc:	dec00104 	addi	sp,sp,4
 10052c0:	f800283a 	ret

010052c4 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 10052c4:	defffe04 	addi	sp,sp,-8
 10052c8:	df000115 	stw	fp,4(sp)
 10052cc:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 10052d0:	d0a74817 	ldw	r2,-25312(gp)
 10052d4:	10000e26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 10052d8:	d0a74117 	ldw	r2,-25340(gp)
 10052dc:	10800f17 	ldw	r2,60(r2)
 10052e0:	10000b26 	beq	r2,zero,1005310 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 10052e4:	d0a74117 	ldw	r2,-25340(gp)
 10052e8:	10c00f17 	ldw	r3,60(r2)
 10052ec:	18ffffc4 	addi	r3,r3,-1
 10052f0:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 10052f4:	d0a74117 	ldw	r2,-25340(gp)
 10052f8:	10800f17 	ldw	r2,60(r2)
 10052fc:	1000041e 	bne	r2,zero,1005310 <vTaskExitCritical+0x4c>
 1005300:	00800044 	movi	r2,1
 1005304:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005308:	e0bfff17 	ldw	r2,-4(fp)
 100530c:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005310:	0001883a 	nop
 1005314:	e037883a 	mov	sp,fp
 1005318:	df000017 	ldw	fp,0(sp)
 100531c:	dec00104 	addi	sp,sp,4
 1005320:	f800283a 	ret

01005324 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1005324:	defffe04 	addi	sp,sp,-8
 1005328:	df000115 	stw	fp,4(sp)
 100532c:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1005330:	d0a74117 	ldw	r2,-25340(gp)
 1005334:	10800617 	ldw	r2,24(r2)
 1005338:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100533c:	d0a74117 	ldw	r2,-25340(gp)
 1005340:	d0e74117 	ldw	r3,-25340(gp)
 1005344:	18c00b17 	ldw	r3,44(r3)
 1005348:	01000144 	movi	r4,5
 100534c:	20c7c83a 	sub	r3,r4,r3
 1005350:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 1005354:	e0bfff17 	ldw	r2,-4(fp)
}
 1005358:	e037883a 	mov	sp,fp
 100535c:	df000017 	ldw	fp,0(sp)
 1005360:	dec00104 	addi	sp,sp,4
 1005364:	f800283a 	ret

01005368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1005368:	deffff04 	addi	sp,sp,-4
 100536c:	df000015 	stw	fp,0(sp)
 1005370:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 1005374:	d0a74117 	ldw	r2,-25340(gp)
 1005378:	10000426 	beq	r2,zero,100538c <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 100537c:	d0a74117 	ldw	r2,-25340(gp)
 1005380:	10c01117 	ldw	r3,68(r2)
 1005384:	18c00044 	addi	r3,r3,1
 1005388:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 100538c:	d0a74117 	ldw	r2,-25340(gp)
	}
 1005390:	e037883a 	mov	sp,fp
 1005394:	df000017 	ldw	fp,0(sp)
 1005398:	dec00104 	addi	sp,sp,4
 100539c:	f800283a 	ret

010053a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 10053a0:	defffb04 	addi	sp,sp,-20
 10053a4:	dfc00415 	stw	ra,16(sp)
 10053a8:	df000315 	stw	fp,12(sp)
 10053ac:	df000304 	addi	fp,sp,12
 10053b0:	e13ffe15 	stw	r4,-8(fp)
 10053b4:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 10053b8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 10053bc:	d0a74117 	ldw	r2,-25340(gp)
 10053c0:	10801217 	ldw	r2,72(r2)
 10053c4:	1000091e 	bne	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10053c8:	d0a74117 	ldw	r2,-25340(gp)
 10053cc:	00c00044 	movi	r3,1
 10053d0:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10053d4:	e0bfff17 	ldw	r2,-4(fp)
 10053d8:	10000426 	beq	r2,zero,10053ec <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10053dc:	01400044 	movi	r5,1
 10053e0:	e13fff17 	ldw	r4,-4(fp)
 10053e4:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10053e8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10053ec:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10053f0:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 10053f4:	d0a74117 	ldw	r2,-25340(gp)
 10053f8:	10801217 	ldw	r2,72(r2)
 10053fc:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 1005400:	e0bffd17 	ldw	r2,-12(fp)
 1005404:	10000926 	beq	r2,zero,100542c <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 1005408:	e0bffe17 	ldw	r2,-8(fp)
 100540c:	10000326 	beq	r2,zero,100541c <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 1005410:	d0a74117 	ldw	r2,-25340(gp)
 1005414:	10001215 	stw	zero,72(r2)
 1005418:	00000406 	br	100542c <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 100541c:	d0a74117 	ldw	r2,-25340(gp)
 1005420:	e0fffd17 	ldw	r3,-12(fp)
 1005424:	18ffffc4 	addi	r3,r3,-1
 1005428:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 100542c:	d0a74117 	ldw	r2,-25340(gp)
 1005430:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005434:	10052c40 	call	10052c4 <vTaskExitCritical>

		return ulReturn;
 1005438:	e0bffd17 	ldw	r2,-12(fp)
	}
 100543c:	e037883a 	mov	sp,fp
 1005440:	dfc00117 	ldw	ra,4(sp)
 1005444:	df000017 	ldw	fp,0(sp)
 1005448:	dec00204 	addi	sp,sp,8
 100544c:	f800283a 	ret

01005450 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1005450:	defff904 	addi	sp,sp,-28
 1005454:	dfc00615 	stw	ra,24(sp)
 1005458:	df000515 	stw	fp,20(sp)
 100545c:	df000504 	addi	fp,sp,20
 1005460:	e13ffc15 	stw	r4,-16(fp)
 1005464:	e17ffd15 	stw	r5,-12(fp)
 1005468:	e1bffe15 	stw	r6,-8(fp)
 100546c:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1005470:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1005474:	d0a74117 	ldw	r2,-25340(gp)
 1005478:	10801303 	ldbu	r2,76(r2)
 100547c:	10803fcc 	andi	r2,r2,255
 1005480:	108000a0 	cmpeqi	r2,r2,2
 1005484:	10000f1e 	bne	r2,zero,10054c4 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1005488:	d0a74117 	ldw	r2,-25340(gp)
 100548c:	11001217 	ldw	r4,72(r2)
 1005490:	e0fffc17 	ldw	r3,-16(fp)
 1005494:	00c6303a 	nor	r3,zero,r3
 1005498:	20c6703a 	and	r3,r4,r3
 100549c:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10054a0:	d0a74117 	ldw	r2,-25340(gp)
 10054a4:	00c00044 	movi	r3,1
 10054a8:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10054ac:	e0bfff17 	ldw	r2,-4(fp)
 10054b0:	10000426 	beq	r2,zero,10054c4 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10054b4:	01400044 	movi	r5,1
 10054b8:	e13fff17 	ldw	r4,-4(fp)
 10054bc:	1005a6c0 	call	1005a6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10054c0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10054c4:	10052c40 	call	10052c4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10054c8:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 10054cc:	e0bffe17 	ldw	r2,-8(fp)
 10054d0:	10000426 	beq	r2,zero,10054e4 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 10054d4:	d0a74117 	ldw	r2,-25340(gp)
 10054d8:	10c01217 	ldw	r3,72(r2)
 10054dc:	e0bffe17 	ldw	r2,-8(fp)
 10054e0:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 10054e4:	d0a74117 	ldw	r2,-25340(gp)
 10054e8:	10801303 	ldbu	r2,76(r2)
 10054ec:	10803fcc 	andi	r2,r2,255
 10054f0:	108000a0 	cmpeqi	r2,r2,2
 10054f4:	1000021e 	bne	r2,zero,1005500 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 10054f8:	e03ffb15 	stw	zero,-20(fp)
 10054fc:	00000806 	br	1005520 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 1005500:	d0a74117 	ldw	r2,-25340(gp)
 1005504:	11001217 	ldw	r4,72(r2)
 1005508:	e0fffd17 	ldw	r3,-12(fp)
 100550c:	00c6303a 	nor	r3,zero,r3
 1005510:	20c6703a 	and	r3,r4,r3
 1005514:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 1005518:	00800044 	movi	r2,1
 100551c:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005520:	d0a74117 	ldw	r2,-25340(gp)
 1005524:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005528:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 100552c:	e0bffb17 	ldw	r2,-20(fp)
	}
 1005530:	e037883a 	mov	sp,fp
 1005534:	dfc00117 	ldw	ra,4(sp)
 1005538:	df000017 	ldw	fp,0(sp)
 100553c:	dec00204 	addi	sp,sp,8
 1005540:	f800283a 	ret

01005544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 1005544:	defff704 	addi	sp,sp,-36
 1005548:	dfc00815 	stw	ra,32(sp)
 100554c:	df000715 	stw	fp,28(sp)
 1005550:	df000704 	addi	fp,sp,28
 1005554:	e13ffc15 	stw	r4,-16(fp)
 1005558:	e17ffd15 	stw	r5,-12(fp)
 100555c:	e1bffe15 	stw	r6,-8(fp)
 1005560:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 1005564:	00800044 	movi	r2,1
 1005568:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 100556c:	e0bffc17 	ldw	r2,-16(fp)
 1005570:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 1005574:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 1005578:	e0bfff17 	ldw	r2,-4(fp)
 100557c:	10000426 	beq	r2,zero,1005590 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1005580:	e0bffa17 	ldw	r2,-24(fp)
 1005584:	10c01217 	ldw	r3,72(r2)
 1005588:	e0bfff17 	ldw	r2,-4(fp)
 100558c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1005590:	e0bffa17 	ldw	r2,-24(fp)
 1005594:	10801303 	ldbu	r2,76(r2)
 1005598:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 100559c:	e0bffa17 	ldw	r2,-24(fp)
 10055a0:	00c00084 	movi	r3,2
 10055a4:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 10055a8:	e0bffe17 	ldw	r2,-8(fp)
 10055ac:	10800168 	cmpgeui	r2,r2,5
 10055b0:	1000261e 	bne	r2,zero,100564c <xTaskGenericNotify+0x108>
 10055b4:	e0bffe17 	ldw	r2,-8(fp)
 10055b8:	100690ba 	slli	r3,r2,2
 10055bc:	00804034 	movhi	r2,256
 10055c0:	10957404 	addi	r2,r2,21968
 10055c4:	1885883a 	add	r2,r3,r2
 10055c8:	10800017 	ldw	r2,0(r2)
 10055cc:	1000683a 	jmp	r2
 10055d0:	01005654 	movui	r4,345
 10055d4:	010055e4 	muli	r4,zero,343
 10055d8:	01005600 	call	100560 <__alt_mem_sdram-0xeffaa0>
 10055dc:	01005618 	cmpnei	r4,zero,344
 10055e0:	01005628 	cmpgeui	r4,zero,344
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 10055e4:	e0bffa17 	ldw	r2,-24(fp)
 10055e8:	10c01217 	ldw	r3,72(r2)
 10055ec:	e0bffd17 	ldw	r2,-12(fp)
 10055f0:	1886b03a 	or	r3,r3,r2
 10055f4:	e0bffa17 	ldw	r2,-24(fp)
 10055f8:	10c01215 	stw	r3,72(r2)
					break;
 10055fc:	00001606 	br	1005658 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1005600:	e0bffa17 	ldw	r2,-24(fp)
 1005604:	10801217 	ldw	r2,72(r2)
 1005608:	10c00044 	addi	r3,r2,1
 100560c:	e0bffa17 	ldw	r2,-24(fp)
 1005610:	10c01215 	stw	r3,72(r2)
					break;
 1005614:	00001006 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1005618:	e0bffa17 	ldw	r2,-24(fp)
 100561c:	e0fffd17 	ldw	r3,-12(fp)
 1005620:	10c01215 	stw	r3,72(r2)
					break;
 1005624:	00000c06 	br	1005658 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1005628:	e0bffb03 	ldbu	r2,-20(fp)
 100562c:	108000a0 	cmpeqi	r2,r2,2
 1005630:	1000041e 	bne	r2,zero,1005644 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1005634:	e0bffa17 	ldw	r2,-24(fp)
 1005638:	e0fffd17 	ldw	r3,-12(fp)
 100563c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1005640:	00000506 	br	1005658 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1005644:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 1005648:	00000306 	br	1005658 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 100564c:	0001883a 	nop
 1005650:	00000106 	br	1005658 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005654:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005658:	e0bffb03 	ldbu	r2,-20(fp)
 100565c:	10800058 	cmpnei	r2,r2,1
 1005660:	10001c1e 	bne	r2,zero,10056d4 <xTaskGenericNotify+0x190>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005664:	e0bffa17 	ldw	r2,-24(fp)
 1005668:	10800104 	addi	r2,r2,4
 100566c:	1009883a 	mov	r4,r2
 1005670:	1000ce40 	call	1000ce4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 1005674:	e0bffa17 	ldw	r2,-24(fp)
 1005678:	10800b17 	ldw	r2,44(r2)
 100567c:	d0e74717 	ldw	r3,-25316(gp)
 1005680:	1880032e 	bgeu	r3,r2,1005690 <xTaskGenericNotify+0x14c>
 1005684:	e0bffa17 	ldw	r2,-24(fp)
 1005688:	10800b17 	ldw	r2,44(r2)
 100568c:	d0a74715 	stw	r2,-25316(gp)
 1005690:	e0bffa17 	ldw	r2,-24(fp)
 1005694:	10800b17 	ldw	r2,44(r2)
 1005698:	10c00524 	muli	r3,r2,20
 100569c:	008060f4 	movhi	r2,387
 10056a0:	10ba3404 	addi	r2,r2,-5936
 10056a4:	1887883a 	add	r3,r3,r2
 10056a8:	e0bffa17 	ldw	r2,-24(fp)
 10056ac:	10800104 	addi	r2,r2,4
 10056b0:	100b883a 	mov	r5,r2
 10056b4:	1809883a 	mov	r4,r3
 10056b8:	1000b800 	call	1000b80 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10056bc:	e0bffa17 	ldw	r2,-24(fp)
 10056c0:	10800b17 	ldw	r2,44(r2)
 10056c4:	d0e74117 	ldw	r3,-25340(gp)
 10056c8:	18c00b17 	ldw	r3,44(r3)
 10056cc:	1880012e 	bgeu	r3,r2,10056d4 <xTaskGenericNotify+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 10056d0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10056d4:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 10056d8:	e0bff917 	ldw	r2,-28(fp)
	}
 10056dc:	e037883a 	mov	sp,fp
 10056e0:	dfc00117 	ldw	ra,4(sp)
 10056e4:	df000017 	ldw	fp,0(sp)
 10056e8:	dec00204 	addi	sp,sp,8
 10056ec:	f800283a 	ret

010056f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10056f0:	defff604 	addi	sp,sp,-40
 10056f4:	dfc00915 	stw	ra,36(sp)
 10056f8:	df000815 	stw	fp,32(sp)
 10056fc:	df000804 	addi	fp,sp,32
 1005700:	e13ffc15 	stw	r4,-16(fp)
 1005704:	e17ffd15 	stw	r5,-12(fp)
 1005708:	e1bffe15 	stw	r6,-8(fp)
 100570c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1005710:	00800044 	movi	r2,1
 1005714:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1005718:	e0bffc17 	ldw	r2,-16(fp)
 100571c:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1005720:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 1005724:	e0bfff17 	ldw	r2,-4(fp)
 1005728:	10000426 	beq	r2,zero,100573c <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 100572c:	e0bff917 	ldw	r2,-28(fp)
 1005730:	10c01217 	ldw	r3,72(r2)
 1005734:	e0bfff17 	ldw	r2,-4(fp)
 1005738:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 100573c:	e0bff917 	ldw	r2,-28(fp)
 1005740:	10801303 	ldbu	r2,76(r2)
 1005744:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005748:	e0bff917 	ldw	r2,-28(fp)
 100574c:	00c00084 	movi	r3,2
 1005750:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 1005754:	e0bffe17 	ldw	r2,-8(fp)
 1005758:	10800168 	cmpgeui	r2,r2,5
 100575c:	1000261e 	bne	r2,zero,10057f8 <xTaskGenericNotifyFromISR+0x108>
 1005760:	e0bffe17 	ldw	r2,-8(fp)
 1005764:	100690ba 	slli	r3,r2,2
 1005768:	00804034 	movhi	r2,256
 100576c:	1095df04 	addi	r2,r2,22396
 1005770:	1885883a 	add	r2,r3,r2
 1005774:	10800017 	ldw	r2,0(r2)
 1005778:	1000683a 	jmp	r2
 100577c:	01005800 	call	100580 <__alt_mem_sdram-0xeffa80>
 1005780:	01005790 	cmplti	r4,zero,350
 1005784:	010057ac 	andhi	r4,zero,350
 1005788:	010057c4 	movi	r4,351
 100578c:	010057d4 	movui	r4,351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1005790:	e0bff917 	ldw	r2,-28(fp)
 1005794:	10c01217 	ldw	r3,72(r2)
 1005798:	e0bffd17 	ldw	r2,-12(fp)
 100579c:	1886b03a 	or	r3,r3,r2
 10057a0:	e0bff917 	ldw	r2,-28(fp)
 10057a4:	10c01215 	stw	r3,72(r2)
					break;
 10057a8:	00001606 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 10057ac:	e0bff917 	ldw	r2,-28(fp)
 10057b0:	10801217 	ldw	r2,72(r2)
 10057b4:	10c00044 	addi	r3,r2,1
 10057b8:	e0bff917 	ldw	r2,-28(fp)
 10057bc:	10c01215 	stw	r3,72(r2)
					break;
 10057c0:	00001006 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 10057c4:	e0bff917 	ldw	r2,-28(fp)
 10057c8:	e0fffd17 	ldw	r3,-12(fp)
 10057cc:	10c01215 	stw	r3,72(r2)
					break;
 10057d0:	00000c06 	br	1005804 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 10057d4:	e0bffb03 	ldbu	r2,-20(fp)
 10057d8:	108000a0 	cmpeqi	r2,r2,2
 10057dc:	1000041e 	bne	r2,zero,10057f0 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 10057e0:	e0bff917 	ldw	r2,-28(fp)
 10057e4:	e0fffd17 	ldw	r3,-12(fp)
 10057e8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 10057ec:	00000506 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 10057f0:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 10057f4:	00000306 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 10057f8:	0001883a 	nop
 10057fc:	00000106 	br	1005804 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005800:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005804:	e0bffb03 	ldbu	r2,-20(fp)
 1005808:	10800058 	cmpnei	r2,r2,1
 100580c:	10002b1e 	bne	r2,zero,10058bc <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005810:	d0a74f17 	ldw	r2,-25284(gp)
 1005814:	1000171e 	bne	r2,zero,1005874 <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005818:	e0bff917 	ldw	r2,-28(fp)
 100581c:	10800104 	addi	r2,r2,4
 1005820:	1009883a 	mov	r4,r2
 1005824:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005828:	e0bff917 	ldw	r2,-28(fp)
 100582c:	10800b17 	ldw	r2,44(r2)
 1005830:	d0e74717 	ldw	r3,-25316(gp)
 1005834:	1880032e 	bgeu	r3,r2,1005844 <xTaskGenericNotifyFromISR+0x154>
 1005838:	e0bff917 	ldw	r2,-28(fp)
 100583c:	10800b17 	ldw	r2,44(r2)
 1005840:	d0a74715 	stw	r2,-25316(gp)
 1005844:	e0bff917 	ldw	r2,-28(fp)
 1005848:	10800b17 	ldw	r2,44(r2)
 100584c:	10c00524 	muli	r3,r2,20
 1005850:	008060f4 	movhi	r2,387
 1005854:	10ba3404 	addi	r2,r2,-5936
 1005858:	1887883a 	add	r3,r3,r2
 100585c:	e0bff917 	ldw	r2,-28(fp)
 1005860:	10800104 	addi	r2,r2,4
 1005864:	100b883a 	mov	r5,r2
 1005868:	1809883a 	mov	r4,r3
 100586c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005870:	00000606 	br	100588c <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005874:	e0bff917 	ldw	r2,-28(fp)
 1005878:	10800604 	addi	r2,r2,24
 100587c:	100b883a 	mov	r5,r2
 1005880:	010060f4 	movhi	r4,387
 1005884:	213a5704 	addi	r4,r4,-5796
 1005888:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 100588c:	e0bff917 	ldw	r2,-28(fp)
 1005890:	10800b17 	ldw	r2,44(r2)
 1005894:	d0e74117 	ldw	r3,-25340(gp)
 1005898:	18c00b17 	ldw	r3,44(r3)
 100589c:	1880072e 	bgeu	r3,r2,10058bc <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10058a0:	e0800217 	ldw	r2,8(fp)
 10058a4:	10000326 	beq	r2,zero,10058b4 <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10058a8:	e0800217 	ldw	r2,8(fp)
 10058ac:	00c00044 	movi	r3,1
 10058b0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10058b4:	00800044 	movi	r2,1
 10058b8:	d0a74a15 	stw	r2,-25304(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 10058bc:	e0bff817 	ldw	r2,-32(fp)
	}
 10058c0:	e037883a 	mov	sp,fp
 10058c4:	dfc00117 	ldw	ra,4(sp)
 10058c8:	df000017 	ldw	fp,0(sp)
 10058cc:	dec00204 	addi	sp,sp,8
 10058d0:	f800283a 	ret

010058d4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10058d4:	defff904 	addi	sp,sp,-28
 10058d8:	dfc00615 	stw	ra,24(sp)
 10058dc:	df000515 	stw	fp,20(sp)
 10058e0:	df000504 	addi	fp,sp,20
 10058e4:	e13ffe15 	stw	r4,-8(fp)
 10058e8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 10058ec:	e0bffe17 	ldw	r2,-8(fp)
 10058f0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10058f4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 10058f8:	e0bffb17 	ldw	r2,-20(fp)
 10058fc:	10801303 	ldbu	r2,76(r2)
 1005900:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005904:	e0bffb17 	ldw	r2,-20(fp)
 1005908:	00c00084 	movi	r3,2
 100590c:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1005910:	e0bffb17 	ldw	r2,-20(fp)
 1005914:	10801217 	ldw	r2,72(r2)
 1005918:	10c00044 	addi	r3,r2,1
 100591c:	e0bffb17 	ldw	r2,-20(fp)
 1005920:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005924:	e0bffd03 	ldbu	r2,-12(fp)
 1005928:	10800058 	cmpnei	r2,r2,1
 100592c:	10002b1e 	bne	r2,zero,10059dc <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005930:	d0a74f17 	ldw	r2,-25284(gp)
 1005934:	1000171e 	bne	r2,zero,1005994 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005938:	e0bffb17 	ldw	r2,-20(fp)
 100593c:	10800104 	addi	r2,r2,4
 1005940:	1009883a 	mov	r4,r2
 1005944:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005948:	e0bffb17 	ldw	r2,-20(fp)
 100594c:	10800b17 	ldw	r2,44(r2)
 1005950:	d0e74717 	ldw	r3,-25316(gp)
 1005954:	1880032e 	bgeu	r3,r2,1005964 <vTaskNotifyGiveFromISR+0x90>
 1005958:	e0bffb17 	ldw	r2,-20(fp)
 100595c:	10800b17 	ldw	r2,44(r2)
 1005960:	d0a74715 	stw	r2,-25316(gp)
 1005964:	e0bffb17 	ldw	r2,-20(fp)
 1005968:	10800b17 	ldw	r2,44(r2)
 100596c:	10c00524 	muli	r3,r2,20
 1005970:	008060f4 	movhi	r2,387
 1005974:	10ba3404 	addi	r2,r2,-5936
 1005978:	1887883a 	add	r3,r3,r2
 100597c:	e0bffb17 	ldw	r2,-20(fp)
 1005980:	10800104 	addi	r2,r2,4
 1005984:	100b883a 	mov	r5,r2
 1005988:	1809883a 	mov	r4,r3
 100598c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005990:	00000606 	br	10059ac <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005994:	e0bffb17 	ldw	r2,-20(fp)
 1005998:	10800604 	addi	r2,r2,24
 100599c:	100b883a 	mov	r5,r2
 10059a0:	010060f4 	movhi	r4,387
 10059a4:	213a5704 	addi	r4,r4,-5796
 10059a8:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10059ac:	e0bffb17 	ldw	r2,-20(fp)
 10059b0:	10800b17 	ldw	r2,44(r2)
 10059b4:	d0e74117 	ldw	r3,-25340(gp)
 10059b8:	18c00b17 	ldw	r3,44(r3)
 10059bc:	1880072e 	bgeu	r3,r2,10059dc <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10059c0:	e0bfff17 	ldw	r2,-4(fp)
 10059c4:	10000326 	beq	r2,zero,10059d4 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10059c8:	e0bfff17 	ldw	r2,-4(fp)
 10059cc:	00c00044 	movi	r3,1
 10059d0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10059d4:	00800044 	movi	r2,1
 10059d8:	d0a74a15 	stw	r2,-25304(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 10059dc:	0001883a 	nop
 10059e0:	e037883a 	mov	sp,fp
 10059e4:	dfc00117 	ldw	ra,4(sp)
 10059e8:	df000017 	ldw	fp,0(sp)
 10059ec:	dec00204 	addi	sp,sp,8
 10059f0:	f800283a 	ret

010059f4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 10059f4:	defffb04 	addi	sp,sp,-20
 10059f8:	dfc00415 	stw	ra,16(sp)
 10059fc:	df000315 	stw	fp,12(sp)
 1005a00:	df000304 	addi	fp,sp,12
 1005a04:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 1005a08:	e0bfff17 	ldw	r2,-4(fp)
 1005a0c:	1000021e 	bne	r2,zero,1005a18 <xTaskNotifyStateClear+0x24>
 1005a10:	d0a74117 	ldw	r2,-25340(gp)
 1005a14:	00000106 	br	1005a1c <xTaskNotifyStateClear+0x28>
 1005a18:	e0bfff17 	ldw	r2,-4(fp)
 1005a1c:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1005a20:	10052700 	call	1005270 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1005a24:	e0bffe17 	ldw	r2,-8(fp)
 1005a28:	10801303 	ldbu	r2,76(r2)
 1005a2c:	10803fcc 	andi	r2,r2,255
 1005a30:	10800098 	cmpnei	r2,r2,2
 1005a34:	1000051e 	bne	r2,zero,1005a4c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005a38:	e0bffe17 	ldw	r2,-8(fp)
 1005a3c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 1005a40:	00800044 	movi	r2,1
 1005a44:	e0bffd15 	stw	r2,-12(fp)
 1005a48:	00000106 	br	1005a50 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 1005a4c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 1005a50:	10052c40 	call	10052c4 <vTaskExitCritical>

		return xReturn;
 1005a54:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005a58:	e037883a 	mov	sp,fp
 1005a5c:	dfc00117 	ldw	ra,4(sp)
 1005a60:	df000017 	ldw	fp,0(sp)
 1005a64:	dec00204 	addi	sp,sp,8
 1005a68:	f800283a 	ret

01005a6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 1005a6c:	defffa04 	addi	sp,sp,-24
 1005a70:	dfc00515 	stw	ra,20(sp)
 1005a74:	df000415 	stw	fp,16(sp)
 1005a78:	df000404 	addi	fp,sp,16
 1005a7c:	e13ffe15 	stw	r4,-8(fp)
 1005a80:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1005a84:	d0a74617 	ldw	r2,-25320(gp)
 1005a88:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1005a8c:	d0a74117 	ldw	r2,-25340(gp)
 1005a90:	10800104 	addi	r2,r2,4
 1005a94:	1009883a 	mov	r4,r2
 1005a98:	1000ce40 	call	1000ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1005a9c:	e0bffe17 	ldw	r2,-8(fp)
 1005aa0:	10bfffd8 	cmpnei	r2,r2,-1
 1005aa4:	1000091e 	bne	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
 1005aa8:	e0bfff17 	ldw	r2,-4(fp)
 1005aac:	10000726 	beq	r2,zero,1005acc <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005ab0:	d0a74117 	ldw	r2,-25340(gp)
 1005ab4:	10800104 	addi	r2,r2,4
 1005ab8:	100b883a 	mov	r5,r2
 1005abc:	010060f4 	movhi	r4,387
 1005ac0:	213a6104 	addi	r4,r4,-5756
 1005ac4:	1000b800 	call	1000b80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005ac8:	00001c06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 1005acc:	e0fffc17 	ldw	r3,-16(fp)
 1005ad0:	e0bffe17 	ldw	r2,-8(fp)
 1005ad4:	1885883a 	add	r2,r3,r2
 1005ad8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 1005adc:	d0a74117 	ldw	r2,-25340(gp)
 1005ae0:	e0fffd17 	ldw	r3,-12(fp)
 1005ae4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 1005ae8:	e0fffd17 	ldw	r3,-12(fp)
 1005aec:	e0bffc17 	ldw	r2,-16(fp)
 1005af0:	1880072e 	bgeu	r3,r2,1005b10 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005af4:	d0e74317 	ldw	r3,-25332(gp)
 1005af8:	d0a74117 	ldw	r2,-25340(gp)
 1005afc:	10800104 	addi	r2,r2,4
 1005b00:	100b883a 	mov	r5,r2
 1005b04:	1809883a 	mov	r4,r3
 1005b08:	1000c0c0 	call	1000c0c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b0c:	00000b06 	br	1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005b10:	d0e74217 	ldw	r3,-25336(gp)
 1005b14:	d0a74117 	ldw	r2,-25340(gp)
 1005b18:	10800104 	addi	r2,r2,4
 1005b1c:	100b883a 	mov	r5,r2
 1005b20:	1809883a 	mov	r4,r3
 1005b24:	1000c0c0 	call	1000c0c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 1005b28:	d0a74d17 	ldw	r2,-25292(gp)
 1005b2c:	e0fffd17 	ldw	r3,-12(fp)
 1005b30:	1880022e 	bgeu	r3,r2,1005b3c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 1005b34:	e0bffd17 	ldw	r2,-12(fp)
 1005b38:	d0a74d15 	stw	r2,-25292(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005b3c:	0001883a 	nop
 1005b40:	e037883a 	mov	sp,fp
 1005b44:	dfc00117 	ldw	ra,4(sp)
 1005b48:	df000017 	ldw	fp,0(sp)
 1005b4c:	dec00204 	addi	sp,sp,8
 1005b50:	f800283a 	ret

01005b54 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1005b54:	defffe04 	addi	sp,sp,-8
 1005b58:	df000115 	stw	fp,4(sp)
 1005b5c:	df000104 	addi	fp,sp,4
 1005b60:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1005b64:	e0bfff17 	ldw	r2,-4(fp)
 1005b68:	10000015 	stw	zero,0(r2)
 1005b6c:	0001b03a 	sync
}
 1005b70:	0001883a 	nop
 1005b74:	e037883a 	mov	sp,fp
 1005b78:	df000017 	ldw	fp,0(sp)
 1005b7c:	dec00104 	addi	sp,sp,4
 1005b80:	f800283a 	ret

01005b84 <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1005b84:	defffe04 	addi	sp,sp,-8
 1005b88:	df000115 	stw	fp,4(sp)
 1005b8c:	df000104 	addi	fp,sp,4
 1005b90:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1005b94:	0001883a 	nop
 1005b98:	e037883a 	mov	sp,fp
 1005b9c:	df000017 	ldw	fp,0(sp)
 1005ba0:	dec00104 	addi	sp,sp,4
 1005ba4:	f800283a 	ret

01005ba8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1005ba8:	defffb04 	addi	sp,sp,-20
 1005bac:	df000415 	stw	fp,16(sp)
 1005bb0:	df000404 	addi	fp,sp,16
 1005bb4:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1005bb8:	0001883a 	nop
 1005bbc:	e0bfff17 	ldw	r2,-4(fp)
 1005bc0:	e0bffc15 	stw	r2,-16(fp)
 1005bc4:	e0bffc17 	ldw	r2,-16(fp)
 1005bc8:	10800017 	ldw	r2,0(r2)
 1005bcc:	e0bffd15 	stw	r2,-12(fp)
 1005bd0:	00800044 	movi	r2,1
 1005bd4:	e0bffe15 	stw	r2,-8(fp)
 1005bd8:	e0bfff17 	ldw	r2,-4(fp)
 1005bdc:	e0fffe17 	ldw	r3,-8(fp)
 1005be0:	10c00015 	stw	r3,0(r2)
 1005be4:	e0bffd17 	ldw	r2,-12(fp)
 1005be8:	103ff41e 	bne	r2,zero,1005bbc <__alt_data_end+0xff005bbc>
		;
	}
}
 1005bec:	0001883a 	nop
 1005bf0:	e037883a 	mov	sp,fp
 1005bf4:	df000017 	ldw	fp,0(sp)
 1005bf8:	dec00104 	addi	sp,sp,4
 1005bfc:	f800283a 	ret

01005c00 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1005c00:	defffe04 	addi	sp,sp,-8
 1005c04:	df000115 	stw	fp,4(sp)
 1005c08:	df000104 	addi	fp,sp,4
 1005c0c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1005c10:	e0bfff17 	ldw	r2,-4(fp)
 1005c14:	0001b03a 	sync
 1005c18:	10000015 	stw	zero,0(r2)
}
 1005c1c:	0001883a 	nop
 1005c20:	e037883a 	mov	sp,fp
 1005c24:	df000017 	ldw	fp,0(sp)
 1005c28:	dec00104 	addi	sp,sp,4
 1005c2c:	f800283a 	ret

01005c30 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1005c30:	defffd04 	addi	sp,sp,-12
 1005c34:	dfc00215 	stw	ra,8(sp)
 1005c38:	df000115 	stw	fp,4(sp)
 1005c3c:	df000104 	addi	fp,sp,4
 1005c40:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1005c44:	e13fff17 	ldw	r4,-4(fp)
 1005c48:	1005b540 	call	1005b54 <__metal_mutex_init>
}
 1005c4c:	0001883a 	nop
 1005c50:	e037883a 	mov	sp,fp
 1005c54:	dfc00117 	ldw	ra,4(sp)
 1005c58:	df000017 	ldw	fp,0(sp)
 1005c5c:	dec00204 	addi	sp,sp,8
 1005c60:	f800283a 	ret

01005c64 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1005c64:	defffd04 	addi	sp,sp,-12
 1005c68:	dfc00215 	stw	ra,8(sp)
 1005c6c:	df000115 	stw	fp,4(sp)
 1005c70:	df000104 	addi	fp,sp,4
 1005c74:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1005c78:	e13fff17 	ldw	r4,-4(fp)
 1005c7c:	1005b840 	call	1005b84 <__metal_mutex_deinit>
}
 1005c80:	0001883a 	nop
 1005c84:	e037883a 	mov	sp,fp
 1005c88:	dfc00117 	ldw	ra,4(sp)
 1005c8c:	df000017 	ldw	fp,0(sp)
 1005c90:	dec00204 	addi	sp,sp,8
 1005c94:	f800283a 	ret

01005c98 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 1005c98:	defffd04 	addi	sp,sp,-12
 1005c9c:	dfc00215 	stw	ra,8(sp)
 1005ca0:	df000115 	stw	fp,4(sp)
 1005ca4:	df000104 	addi	fp,sp,4
 1005ca8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 1005cac:	e13fff17 	ldw	r4,-4(fp)
 1005cb0:	1005ba80 	call	1005ba8 <__metal_mutex_acquire>
}
 1005cb4:	0001883a 	nop
 1005cb8:	e037883a 	mov	sp,fp
 1005cbc:	dfc00117 	ldw	ra,4(sp)
 1005cc0:	df000017 	ldw	fp,0(sp)
 1005cc4:	dec00204 	addi	sp,sp,8
 1005cc8:	f800283a 	ret

01005ccc <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1005ccc:	defffd04 	addi	sp,sp,-12
 1005cd0:	dfc00215 	stw	ra,8(sp)
 1005cd4:	df000115 	stw	fp,4(sp)
 1005cd8:	df000104 	addi	fp,sp,4
 1005cdc:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1005ce0:	e13fff17 	ldw	r4,-4(fp)
 1005ce4:	1005c000 	call	1005c00 <__metal_mutex_release>
}
 1005ce8:	0001883a 	nop
 1005cec:	e037883a 	mov	sp,fp
 1005cf0:	dfc00117 	ldw	ra,4(sp)
 1005cf4:	df000017 	ldw	fp,0(sp)
 1005cf8:	dec00204 	addi	sp,sp,8
 1005cfc:	f800283a 	ret

01005d00 <atomic_mutex_init>:
#include <mutex.h>

metal_mutex_t *atomic_mutex;

void atomic_mutex_init(void)
{
 1005d00:	defffe04 	addi	sp,sp,-8
 1005d04:	dfc00115 	stw	ra,4(sp)
 1005d08:	df000015 	stw	fp,0(sp)
 1005d0c:	d839883a 	mov	fp,sp
	metal_mutex_init(atomic_mutex);
 1005d10:	d0a75017 	ldw	r2,-25280(gp)
 1005d14:	1009883a 	mov	r4,r2
 1005d18:	1005c300 	call	1005c30 <metal_mutex_init>
}
 1005d1c:	0001883a 	nop
 1005d20:	e037883a 	mov	sp,fp
 1005d24:	dfc00117 	ldw	ra,4(sp)
 1005d28:	df000017 	ldw	fp,0(sp)
 1005d2c:	dec00204 	addi	sp,sp,8
 1005d30:	f800283a 	ret

01005d34 <atomic_mutex_deinit>:

void atomic_mutex_deinit(void)
{
 1005d34:	defffe04 	addi	sp,sp,-8
 1005d38:	dfc00115 	stw	ra,4(sp)
 1005d3c:	df000015 	stw	fp,0(sp)
 1005d40:	d839883a 	mov	fp,sp
	metal_mutex_release(atomic_mutex);
 1005d44:	d0a75017 	ldw	r2,-25280(gp)
 1005d48:	1009883a 	mov	r4,r2
 1005d4c:	1005ccc0 	call	1005ccc <metal_mutex_release>
}
 1005d50:	0001883a 	nop
 1005d54:	e037883a 	mov	sp,fp
 1005d58:	dfc00117 	ldw	ra,4(sp)
 1005d5c:	df000017 	ldw	fp,0(sp)
 1005d60:	dec00204 	addi	sp,sp,8
 1005d64:	f800283a 	ret

01005d68 <atomic_mutex_acquire>:

void atomic_mutex_acquire(void)
{
 1005d68:	defffe04 	addi	sp,sp,-8
 1005d6c:	dfc00115 	stw	ra,4(sp)
 1005d70:	df000015 	stw	fp,0(sp)
 1005d74:	d839883a 	mov	fp,sp
	metal_mutex_acquire(atomic_mutex);
 1005d78:	d0a75017 	ldw	r2,-25280(gp)
 1005d7c:	1009883a 	mov	r4,r2
 1005d80:	1005c980 	call	1005c98 <metal_mutex_acquire>
}
 1005d84:	0001883a 	nop
 1005d88:	e037883a 	mov	sp,fp
 1005d8c:	dfc00117 	ldw	ra,4(sp)
 1005d90:	df000017 	ldw	fp,0(sp)
 1005d94:	dec00204 	addi	sp,sp,8
 1005d98:	f800283a 	ret

01005d9c <atomic_mutex_release>:

void atomic_mutex_release(void)
{
 1005d9c:	defffe04 	addi	sp,sp,-8
 1005da0:	dfc00115 	stw	ra,4(sp)
 1005da4:	df000015 	stw	fp,0(sp)
 1005da8:	d839883a 	mov	fp,sp
	metal_mutex_deinit(atomic_mutex);
 1005dac:	d0a75017 	ldw	r2,-25280(gp)
 1005db0:	1009883a 	mov	r4,r2
 1005db4:	1005c640 	call	1005c64 <metal_mutex_deinit>
}
 1005db8:	0001883a 	nop
 1005dbc:	e037883a 	mov	sp,fp
 1005dc0:	dfc00117 	ldw	ra,4(sp)
 1005dc4:	df000017 	ldw	fp,0(sp)
 1005dc8:	dec00204 	addi	sp,sp,8
 1005dcc:	f800283a 	ret

01005dd0 <system_metal_logger>:
	return 0;
}
*/
static void system_metal_logger(enum metal_log_level level,
			   const char *format, ...)
{
 1005dd0:	defffb04 	addi	sp,sp,-20
 1005dd4:	df000215 	stw	fp,8(sp)
 1005dd8:	df000204 	addi	fp,sp,8
 1005ddc:	e13ffe15 	stw	r4,-8(fp)
 1005de0:	e17fff15 	stw	r5,-4(fp)
 1005de4:	e1800115 	stw	r6,4(fp)
 1005de8:	e1c00215 	stw	r7,8(fp)
	(void)level;
	(void)format;
}
 1005dec:	0001883a 	nop
 1005df0:	e037883a 	mov	sp,fp
 1005df4:	df000017 	ldw	fp,0(sp)
 1005df8:	dec00304 	addi	sp,sp,12
 1005dfc:	f800283a 	ret

01005e00 <init_system>:


/* Main hw machinery initialization entry point, called from main()*/
/* return 0 on success */
int init_system(void)
{
 1005e00:	defffb04 	addi	sp,sp,-20
 1005e04:	dfc00415 	stw	ra,16(sp)
 1005e08:	df000315 	stw	fp,12(sp)
 1005e0c:	df000304 	addi	fp,sp,12
	int ret;
	struct metal_init_params metal_param = {
 1005e10:	00804034 	movhi	r2,256
 1005e14:	10977404 	addi	r2,r2,24016
 1005e18:	e0bffe15 	stw	r2,-8(fp)
 1005e1c:	00800184 	movi	r2,6
 1005e20:	e0bfff15 	stw	r2,-4(fp)
		.log_handler = system_metal_logger,
		.log_level = METAL_LOG_INFO,
	};

	/* Low level abstraction layer for openamp initialization */
	metal_init(&metal_param);
 1005e24:	e0bffe04 	addi	r2,fp,-8
 1005e28:	1009883a 	mov	r4,r2
 1005e2c:	1007e380 	call	1007e38 <metal_init>

	/* configure the global interrupt controller */
	//app_gic_initialize();

	/* Initialize metal Xilinx IRQ controller */
	ret = metal_nios2_irq_init();
 1005e30:	10075e00 	call	10075e0 <metal_nios2_irq_init>
 1005e34:	e0bffd15 	stw	r2,-12(fp)
	if (ret) {
 1005e38:	e0bffd17 	ldw	r2,-12(fp)
 1005e3c:	10000526 	beq	r2,zero,1005e54 <init_system+0x54>
		printf("%s: Nios metal IRQ controller init failed.\r\n",
 1005e40:	014040f4 	movhi	r5,259
 1005e44:	29650404 	addi	r5,r5,-27632
 1005e48:	010040f4 	movhi	r4,259
 1005e4c:	2124f804 	addi	r4,r4,-27680
 1005e50:	1015a940 	call	1015a94 <printf>
			__func__);
	}

	return ret;
 1005e54:	e0bffd17 	ldw	r2,-12(fp)
}
 1005e58:	e037883a 	mov	sp,fp
 1005e5c:	dfc00117 	ldw	ra,4(sp)
 1005e60:	df000017 	ldw	fp,0(sp)
 1005e64:	dec00204 	addi	sp,sp,8
 1005e68:	f800283a 	ret

01005e6c <cleanup_system>:

void cleanup_system()
{
 1005e6c:	defffe04 	addi	sp,sp,-8
 1005e70:	dfc00115 	stw	ra,4(sp)
 1005e74:	df000015 	stw	fp,0(sp)
 1005e78:	d839883a 	mov	fp,sp
	metal_finish();
 1005e7c:	1007ee40 	call	1007ee4 <metal_finish>

	/*Xil_DCacheDisable();
	Xil_ICacheDisable();
	Xil_DCacheInvalidate();
	Xil_ICacheInvalidate();*/
}
 1005e80:	0001883a 	nop
 1005e84:	e037883a 	mov	sp,fp
 1005e88:	dfc00117 	ldw	ra,4(sp)
 1005e8c:	df000017 	ldw	fp,0(sp)
 1005e90:	dec00204 	addi	sp,sp,8
 1005e94:	f800283a 	ret

01005e98 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1005e98:	defffd04 	addi	sp,sp,-12
 1005e9c:	df000215 	stw	fp,8(sp)
 1005ea0:	df000204 	addi	fp,sp,8
 1005ea4:	e13ffe15 	stw	r4,-8(fp)
 1005ea8:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1005eac:	e0bffe17 	ldw	r2,-8(fp)
 1005eb0:	10c00117 	ldw	r3,4(r2)
 1005eb4:	e0bfff17 	ldw	r2,-4(fp)
 1005eb8:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1005ebc:	e0bfff17 	ldw	r2,-4(fp)
 1005ec0:	e0fffe17 	ldw	r3,-8(fp)
 1005ec4:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1005ec8:	e0bfff17 	ldw	r2,-4(fp)
 1005ecc:	10800017 	ldw	r2,0(r2)
 1005ed0:	e0ffff17 	ldw	r3,-4(fp)
 1005ed4:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1005ed8:	e0bfff17 	ldw	r2,-4(fp)
 1005edc:	10800117 	ldw	r2,4(r2)
 1005ee0:	e0ffff17 	ldw	r3,-4(fp)
 1005ee4:	10c00015 	stw	r3,0(r2)
}
 1005ee8:	0001883a 	nop
 1005eec:	e037883a 	mov	sp,fp
 1005ef0:	df000017 	ldw	fp,0(sp)
 1005ef4:	dec00104 	addi	sp,sp,4
 1005ef8:	f800283a 	ret

01005efc <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1005efc:	defffc04 	addi	sp,sp,-16
 1005f00:	dfc00315 	stw	ra,12(sp)
 1005f04:	df000215 	stw	fp,8(sp)
 1005f08:	df000204 	addi	fp,sp,8
 1005f0c:	e13ffe15 	stw	r4,-8(fp)
 1005f10:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1005f14:	e17fff17 	ldw	r5,-4(fp)
 1005f18:	e13ffe17 	ldw	r4,-8(fp)
 1005f1c:	1005e980 	call	1005e98 <metal_list_add_before>
}
 1005f20:	0001883a 	nop
 1005f24:	e037883a 	mov	sp,fp
 1005f28:	dfc00117 	ldw	ra,4(sp)
 1005f2c:	df000017 	ldw	fp,0(sp)
 1005f30:	dec00204 	addi	sp,sp,8
 1005f34:	f800283a 	ret

01005f38 <metal_add_test_case>:
	return errstr;
}
#endif

void metal_add_test_case(struct metal_test_case *test_case)
{
 1005f38:	defffd04 	addi	sp,sp,-12
 1005f3c:	dfc00215 	stw	ra,8(sp)
 1005f40:	df000115 	stw	fp,4(sp)
 1005f44:	df000104 	addi	fp,sp,4
 1005f48:	e13fff15 	stw	r4,-4(fp)
	metal_list_add_tail(&test_cases, &test_case->node);
 1005f4c:	e0bfff17 	ldw	r2,-4(fp)
 1005f50:	100b883a 	mov	r5,r2
 1005f54:	d1200204 	addi	r4,gp,-32760
 1005f58:	1005efc0 	call	1005efc <metal_list_add_tail>
}
 1005f5c:	0001883a 	nop
 1005f60:	e037883a 	mov	sp,fp
 1005f64:	dfc00117 	ldw	ra,4(sp)
 1005f68:	df000017 	ldw	fp,0(sp)
 1005f6c:	dec00204 	addi	sp,sp,8
 1005f70:	f800283a 	ret

01005f74 <metal_tests_run>:

int metal_tests_run(struct metal_init_params *params)
{
 1005f74:	deffee04 	addi	sp,sp,-72
 1005f78:	dfc01115 	stw	ra,68(sp)
 1005f7c:	df001015 	stw	fp,64(sp)
 1005f80:	dcc00f15 	stw	r19,60(sp)
 1005f84:	dc800e15 	stw	r18,56(sp)
 1005f88:	dc400d15 	stw	r17,52(sp)
 1005f8c:	dc000c15 	stw	r16,48(sp)
 1005f90:	df001004 	addi	fp,sp,64
 1005f94:	e13ffb15 	stw	r4,-20(fp)
	struct metal_init_params dparams = METAL_INIT_DEFAULTS;
 1005f98:	00804074 	movhi	r2,257
 1005f9c:	10a2aa04 	addi	r2,r2,-30040
 1005fa0:	e0bff915 	stw	r2,-28(fp)
 1005fa4:	00800184 	movi	r2,6
 1005fa8:	e0bffa15 	stw	r2,-24(fp)
	struct metal_test_case *test_case;
	struct metal_list *node;
	int error, errors = 0;
 1005fac:	e03ff415 	stw	zero,-48(fp)
	const char *dots = "..................................";
 1005fb0:	008040f4 	movhi	r2,259
 1005fb4:	10a50704 	addi	r2,r2,-27620
 1005fb8:	e0bff515 	stw	r2,-44(fp)
	const char *pad;

	if (!params)
 1005fbc:	e0bffb17 	ldw	r2,-20(fp)
 1005fc0:	1000021e 	bne	r2,zero,1005fcc <metal_tests_run+0x58>
		params = &dparams;
 1005fc4:	e0bff904 	addi	r2,fp,-28
 1005fc8:	e0bffb15 	stw	r2,-20(fp)

	params->log_level = METAL_LOG_DEBUG;
 1005fcc:	e0bffb17 	ldw	r2,-20(fp)
 1005fd0:	00c001c4 	movi	r3,7
 1005fd4:	10c00115 	stw	r3,4(r2)
	error = metal_init(params);
 1005fd8:	e13ffb17 	ldw	r4,-20(fp)
 1005fdc:	1007e380 	call	1007e38 <metal_init>
 1005fe0:	e0bff615 	stw	r2,-40(fp)
	if (error)
 1005fe4:	e0bff617 	ldw	r2,-40(fp)
 1005fe8:	10000226 	beq	r2,zero,1005ff4 <metal_tests_run+0x80>
		return error;
 1005fec:	e0bff617 	ldw	r2,-40(fp)
 1005ff0:	00005f06 	br	1006170 <metal_tests_run+0x1fc>

	metal_list_for_each(&test_cases, node) {
 1005ff4:	d0a00217 	ldw	r2,-32760(gp)
 1005ff8:	e0bff315 	stw	r2,-52(fp)
 1005ffc:	00005706 	br	100615c <metal_tests_run+0x1e8>
		test_case = metal_container_of(node, struct metal_test_case,
 1006000:	e0bff317 	ldw	r2,-52(fp)
 1006004:	e0bff715 	stw	r2,-36(fp)
					       node);
		pad = dots + strlen(test_case->name);
 1006008:	e0bff717 	ldw	r2,-36(fp)
 100600c:	10800217 	ldw	r2,8(r2)
 1006010:	1009883a 	mov	r4,r2
 1006014:	10164b40 	call	10164b4 <strlen>
 1006018:	1007883a 	mov	r3,r2
 100601c:	e0bff517 	ldw	r2,-44(fp)
 1006020:	10c5883a 	add	r2,r2,r3
 1006024:	e0bff815 	stw	r2,-32(fp)
		metal_log(METAL_LOG_INFO,"running [%s]\n", test_case->name);
 1006028:	008060f4 	movhi	r2,387
 100602c:	10bb7104 	addi	r2,r2,-4668
 1006030:	10800017 	ldw	r2,0(r2)
 1006034:	108001b0 	cmpltui	r2,r2,6
 1006038:	10000e1e 	bne	r2,zero,1006074 <metal_tests_run+0x100>
 100603c:	008060f4 	movhi	r2,387
 1006040:	10bb7104 	addi	r2,r2,-4668
 1006044:	10800117 	ldw	r2,4(r2)
 1006048:	10000a26 	beq	r2,zero,1006074 <metal_tests_run+0x100>
 100604c:	008060f4 	movhi	r2,387
 1006050:	10bb7104 	addi	r2,r2,-4668
 1006054:	10800117 	ldw	r2,4(r2)
 1006058:	e0fff717 	ldw	r3,-36(fp)
 100605c:	18c00217 	ldw	r3,8(r3)
 1006060:	180d883a 	mov	r6,r3
 1006064:	014040f4 	movhi	r5,259
 1006068:	29651004 	addi	r5,r5,-27584
 100606c:	01000184 	movi	r4,6
 1006070:	103ee83a 	callr	r2
		error = test_case->test();
 1006074:	e0bff717 	ldw	r2,-36(fp)
 1006078:	10800317 	ldw	r2,12(r2)
 100607c:	103ee83a 	callr	r2
 1006080:	e0bff615 	stw	r2,-40(fp)
		metal_log(METAL_LOG_INFO,"result [%s]%s %s%s%s\n",
 1006084:	008060f4 	movhi	r2,387
 1006088:	10bb7104 	addi	r2,r2,-4668
 100608c:	10800017 	ldw	r2,0(r2)
 1006090:	108001b0 	cmpltui	r2,r2,6
 1006094:	1000291e 	bne	r2,zero,100613c <metal_tests_run+0x1c8>
 1006098:	008060f4 	movhi	r2,387
 100609c:	10bb7104 	addi	r2,r2,-4668
 10060a0:	10800117 	ldw	r2,4(r2)
 10060a4:	10002526 	beq	r2,zero,100613c <metal_tests_run+0x1c8>
 10060a8:	008060f4 	movhi	r2,387
 10060ac:	10bb7104 	addi	r2,r2,-4668
 10060b0:	14800117 	ldw	r18,4(r2)
 10060b4:	e0bff717 	ldw	r2,-36(fp)
 10060b8:	14c00217 	ldw	r19,8(r2)
 10060bc:	e0bff617 	ldw	r2,-40(fp)
 10060c0:	10000326 	beq	r2,zero,10060d0 <metal_tests_run+0x15c>
 10060c4:	040040f4 	movhi	r16,259
 10060c8:	84251404 	addi	r16,r16,-27568
 10060cc:	00000206 	br	10060d8 <metal_tests_run+0x164>
 10060d0:	040040f4 	movhi	r16,259
 10060d4:	84251604 	addi	r16,r16,-27560
 10060d8:	e0bff617 	ldw	r2,-40(fp)
 10060dc:	10000326 	beq	r2,zero,10060ec <metal_tests_run+0x178>
 10060e0:	044040f4 	movhi	r17,259
 10060e4:	8c651804 	addi	r17,r17,-27552
 10060e8:	00000206 	br	10060f4 <metal_tests_run+0x180>
 10060ec:	044040f4 	movhi	r17,259
 10060f0:	8c651b04 	addi	r17,r17,-27540
 10060f4:	e0bff617 	ldw	r2,-40(fp)
 10060f8:	10000526 	beq	r2,zero,1006110 <metal_tests_run+0x19c>
 10060fc:	e0bff617 	ldw	r2,-40(fp)
 1006100:	0085c83a 	sub	r2,zero,r2
 1006104:	1009883a 	mov	r4,r2
 1006108:	10164980 	call	1016498 <strerror>
 100610c:	00000206 	br	1006118 <metal_tests_run+0x1a4>
 1006110:	008040f4 	movhi	r2,259
 1006114:	10a51b04 	addi	r2,r2,-27540
 1006118:	d8800215 	stw	r2,8(sp)
 100611c:	dc400115 	stw	r17,4(sp)
 1006120:	dc000015 	stw	r16,0(sp)
 1006124:	e1fff817 	ldw	r7,-32(fp)
 1006128:	980d883a 	mov	r6,r19
 100612c:	014040f4 	movhi	r5,259
 1006130:	29651c04 	addi	r5,r5,-27536
 1006134:	01000184 	movi	r4,6
 1006138:	903ee83a 	callr	r18
		       test_case->name, pad,
		       error ? "fail" : "pass",
		       error ? " - error: " : "",
		       error ? strerror(-error) : "");
		if (error)
 100613c:	e0bff617 	ldw	r2,-40(fp)
 1006140:	10000326 	beq	r2,zero,1006150 <metal_tests_run+0x1dc>
			errors++;
 1006144:	e0bff417 	ldw	r2,-48(fp)
 1006148:	10800044 	addi	r2,r2,1
 100614c:	e0bff415 	stw	r2,-48(fp)
	params->log_level = METAL_LOG_DEBUG;
	error = metal_init(params);
	if (error)
		return error;

	metal_list_for_each(&test_cases, node) {
 1006150:	e0bff317 	ldw	r2,-52(fp)
 1006154:	10800017 	ldw	r2,0(r2)
 1006158:	e0bff315 	stw	r2,-52(fp)
 100615c:	e0fff317 	ldw	r3,-52(fp)
 1006160:	d0a00204 	addi	r2,gp,-32760
 1006164:	18bfa61e 	bne	r3,r2,1006000 <__alt_data_end+0xff006000>
		       error ? strerror(-error) : "");
		if (error)
			errors++;
	}

	metal_finish();
 1006168:	1007ee40 	call	1007ee4 <metal_finish>

	return errors;
 100616c:	e0bff417 	ldw	r2,-48(fp)
}
 1006170:	e6fffc04 	addi	sp,fp,-16
 1006174:	dfc00517 	ldw	ra,20(sp)
 1006178:	df000417 	ldw	fp,16(sp)
 100617c:	dcc00317 	ldw	r19,12(sp)
 1006180:	dc800217 	ldw	r18,8(sp)
 1006184:	dc400117 	ldw	r17,4(sp)
 1006188:	dc000017 	ldw	r16,0(sp)
 100618c:	dec00604 	addi	sp,sp,24
 1006190:	f800283a 	ret

01006194 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 1006194:	defffe04 	addi	sp,sp,-8
 1006198:	df000115 	stw	fp,4(sp)
 100619c:	df000104 	addi	fp,sp,4
 10061a0:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 10061a4:	e0bfff17 	ldw	r2,-4(fp)
 10061a8:	e0ffff17 	ldw	r3,-4(fp)
 10061ac:	10c00115 	stw	r3,4(r2)
 10061b0:	e0bfff17 	ldw	r2,-4(fp)
 10061b4:	10c00117 	ldw	r3,4(r2)
 10061b8:	e0bfff17 	ldw	r2,-4(fp)
 10061bc:	10c00015 	stw	r3,0(r2)
}
 10061c0:	0001883a 	nop
 10061c4:	e037883a 	mov	sp,fp
 10061c8:	df000017 	ldw	fp,0(sp)
 10061cc:	dec00104 	addi	sp,sp,4
 10061d0:	f800283a 	ret

010061d4 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 10061d4:	defffd04 	addi	sp,sp,-12
 10061d8:	df000215 	stw	fp,8(sp)
 10061dc:	df000204 	addi	fp,sp,8
 10061e0:	e13ffe15 	stw	r4,-8(fp)
 10061e4:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 10061e8:	e0bffe17 	ldw	r2,-8(fp)
 10061ec:	10c00117 	ldw	r3,4(r2)
 10061f0:	e0bfff17 	ldw	r2,-4(fp)
 10061f4:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 10061f8:	e0bfff17 	ldw	r2,-4(fp)
 10061fc:	e0fffe17 	ldw	r3,-8(fp)
 1006200:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1006204:	e0bfff17 	ldw	r2,-4(fp)
 1006208:	10800017 	ldw	r2,0(r2)
 100620c:	e0ffff17 	ldw	r3,-4(fp)
 1006210:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1006214:	e0bfff17 	ldw	r2,-4(fp)
 1006218:	10800117 	ldw	r2,4(r2)
 100621c:	e0ffff17 	ldw	r3,-4(fp)
 1006220:	10c00015 	stw	r3,0(r2)
}
 1006224:	0001883a 	nop
 1006228:	e037883a 	mov	sp,fp
 100622c:	df000017 	ldw	fp,0(sp)
 1006230:	dec00104 	addi	sp,sp,4
 1006234:	f800283a 	ret

01006238 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1006238:	defffc04 	addi	sp,sp,-16
 100623c:	dfc00315 	stw	ra,12(sp)
 1006240:	df000215 	stw	fp,8(sp)
 1006244:	df000204 	addi	fp,sp,8
 1006248:	e13ffe15 	stw	r4,-8(fp)
 100624c:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1006250:	e17fff17 	ldw	r5,-4(fp)
 1006254:	e13ffe17 	ldw	r4,-8(fp)
 1006258:	10061d40 	call	10061d4 <metal_list_add_before>
}
 100625c:	0001883a 	nop
 1006260:	e037883a 	mov	sp,fp
 1006264:	dfc00117 	ldw	ra,4(sp)
 1006268:	df000017 	ldw	fp,0(sp)
 100626c:	dec00204 	addi	sp,sp,8
 1006270:	f800283a 	ret

01006274 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 1006274:	defffe04 	addi	sp,sp,-8
 1006278:	df000115 	stw	fp,4(sp)
 100627c:	df000104 	addi	fp,sp,4
 1006280:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 1006284:	e0bfff17 	ldw	r2,-4(fp)
 1006288:	10800017 	ldw	r2,0(r2)
 100628c:	e0ffff17 	ldw	r3,-4(fp)
 1006290:	18c00117 	ldw	r3,4(r3)
 1006294:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 1006298:	e0bfff17 	ldw	r2,-4(fp)
 100629c:	10800117 	ldw	r2,4(r2)
 10062a0:	e0ffff17 	ldw	r3,-4(fp)
 10062a4:	18c00017 	ldw	r3,0(r3)
 10062a8:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 10062ac:	e0bfff17 	ldw	r2,-4(fp)
 10062b0:	e0ffff17 	ldw	r3,-4(fp)
 10062b4:	10c00115 	stw	r3,4(r2)
 10062b8:	e0bfff17 	ldw	r2,-4(fp)
 10062bc:	10c00117 	ldw	r3,4(r2)
 10062c0:	e0bfff17 	ldw	r2,-4(fp)
 10062c4:	10c00015 	stw	r3,0(r2)
}
 10062c8:	0001883a 	nop
 10062cc:	e037883a 	mov	sp,fp
 10062d0:	df000017 	ldw	fp,0(sp)
 10062d4:	dec00104 	addi	sp,sp,4
 10062d8:	f800283a 	ret

010062dc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 10062dc:	defffc04 	addi	sp,sp,-16
 10062e0:	dfc00315 	stw	ra,12(sp)
 10062e4:	df000215 	stw	fp,8(sp)
 10062e8:	df000204 	addi	fp,sp,8
 10062ec:	e13ffe15 	stw	r4,-8(fp)
 10062f0:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_flush(addr, len);
 10062f4:	e17fff17 	ldw	r5,-4(fp)
 10062f8:	e13ffe17 	ldw	r4,-8(fp)
 10062fc:	10076e80 	call	10076e8 <metal_machine_cache_flush>
}
 1006300:	0001883a 	nop
 1006304:	e037883a 	mov	sp,fp
 1006308:	dfc00117 	ldw	ra,4(sp)
 100630c:	df000017 	ldw	fp,0(sp)
 1006310:	dec00204 	addi	sp,sp,8
 1006314:	f800283a 	ret

01006318 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 1006318:	defffc04 	addi	sp,sp,-16
 100631c:	dfc00315 	stw	ra,12(sp)
 1006320:	df000215 	stw	fp,8(sp)
 1006324:	df000204 	addi	fp,sp,8
 1006328:	e13ffe15 	stw	r4,-8(fp)
 100632c:	e17fff15 	stw	r5,-4(fp)
	metal_machine_cache_invalidate(addr, len);
 1006330:	e17fff17 	ldw	r5,-4(fp)
 1006334:	e13ffe17 	ldw	r4,-8(fp)
 1006338:	100773c0 	call	100773c <metal_machine_cache_invalidate>
}
 100633c:	0001883a 	nop
 1006340:	e037883a 	mov	sp,fp
 1006344:	dfc00117 	ldw	ra,4(sp)
 1006348:	df000017 	ldw	fp,0(sp)
 100634c:	dec00204 	addi	sp,sp,8
 1006350:	f800283a 	ret

01006354 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 1006354:	defffc04 	addi	sp,sp,-16
 1006358:	dfc00315 	stw	ra,12(sp)
 100635c:	df000215 	stw	fp,8(sp)
 1006360:	df000204 	addi	fp,sp,8
 1006364:	e13ffe15 	stw	r4,-8(fp)
 1006368:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_flush(addr, len);
 100636c:	e17fff17 	ldw	r5,-4(fp)
 1006370:	e13ffe17 	ldw	r4,-8(fp)
 1006374:	10062dc0 	call	10062dc <__metal_cache_flush>
}
 1006378:	0001883a 	nop
 100637c:	e037883a 	mov	sp,fp
 1006380:	dfc00117 	ldw	ra,4(sp)
 1006384:	df000017 	ldw	fp,0(sp)
 1006388:	dec00204 	addi	sp,sp,8
 100638c:	f800283a 	ret

01006390 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 1006390:	defffc04 	addi	sp,sp,-16
 1006394:	dfc00315 	stw	ra,12(sp)
 1006398:	df000215 	stw	fp,8(sp)
 100639c:	df000204 	addi	fp,sp,8
 10063a0:	e13ffe15 	stw	r4,-8(fp)
 10063a4:	e17fff15 	stw	r5,-4(fp)
	__metal_cache_invalidate(addr, len);
 10063a8:	e17fff17 	ldw	r5,-4(fp)
 10063ac:	e13ffe17 	ldw	r4,-8(fp)
 10063b0:	10063180 	call	1006318 <__metal_cache_invalidate>
}
 10063b4:	0001883a 	nop
 10063b8:	e037883a 	mov	sp,fp
 10063bc:	dfc00117 	ldw	ra,4(sp)
 10063c0:	df000017 	ldw	fp,0(sp)
 10063c4:	dec00204 	addi	sp,sp,8
 10063c8:	f800283a 	ret

010063cc <metal_bus_register>:
#include <utilities.h>
#include <dma.h>
#include <cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 10063cc:	defffd04 	addi	sp,sp,-12
 10063d0:	dfc00215 	stw	ra,8(sp)
 10063d4:	df000115 	stw	fp,4(sp)
 10063d8:	df000104 	addi	fp,sp,4
 10063dc:	e13fff15 	stw	r4,-4(fp)
	if (!bus || !bus->name || !strlen(bus->name))
 10063e0:	e0bfff17 	ldw	r2,-4(fp)
 10063e4:	10000a26 	beq	r2,zero,1006410 <metal_bus_register+0x44>
 10063e8:	e0bfff17 	ldw	r2,-4(fp)
 10063ec:	10800017 	ldw	r2,0(r2)
 10063f0:	10000726 	beq	r2,zero,1006410 <metal_bus_register+0x44>
 10063f4:	e0bfff17 	ldw	r2,-4(fp)
 10063f8:	10800017 	ldw	r2,0(r2)
 10063fc:	10800003 	ldbu	r2,0(r2)
 1006400:	10803fcc 	andi	r2,r2,255
 1006404:	1080201c 	xori	r2,r2,128
 1006408:	10bfe004 	addi	r2,r2,-128
 100640c:	1000021e 	bne	r2,zero,1006418 <metal_bus_register+0x4c>
		return -EINVAL;
 1006410:	00bffa84 	movi	r2,-22
 1006414:	00002606 	br	10064b0 <metal_bus_register+0xe4>
	if (metal_bus_find(bus->name, NULL) == 0)
 1006418:	e0bfff17 	ldw	r2,-4(fp)
 100641c:	10800017 	ldw	r2,0(r2)
 1006420:	000b883a 	mov	r5,zero
 1006424:	1009883a 	mov	r4,r2
 1006428:	10065680 	call	1006568 <metal_bus_find>
 100642c:	1000021e 	bne	r2,zero,1006438 <metal_bus_register+0x6c>
		return -EEXIST;
 1006430:	00bffbc4 	movi	r2,-17
 1006434:	00001e06 	br	10064b0 <metal_bus_register+0xe4>
	metal_list_init(&bus->devices);
 1006438:	e0bfff17 	ldw	r2,-4(fp)
 100643c:	10800704 	addi	r2,r2,28
 1006440:	1009883a 	mov	r4,r2
 1006444:	10061940 	call	1006194 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 1006448:	e0bfff17 	ldw	r2,-4(fp)
 100644c:	10800904 	addi	r2,r2,36
 1006450:	100b883a 	mov	r5,r2
 1006454:	010060f4 	movhi	r4,387
 1006458:	213b7304 	addi	r4,r4,-4660
 100645c:	10062380 	call	1006238 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 1006460:	008060f4 	movhi	r2,387
 1006464:	10bb7104 	addi	r2,r2,-4668
 1006468:	10800017 	ldw	r2,0(r2)
 100646c:	108001f0 	cmpltui	r2,r2,7
 1006470:	10000e1e 	bne	r2,zero,10064ac <metal_bus_register+0xe0>
 1006474:	008060f4 	movhi	r2,387
 1006478:	10bb7104 	addi	r2,r2,-4668
 100647c:	10800117 	ldw	r2,4(r2)
 1006480:	10000a26 	beq	r2,zero,10064ac <metal_bus_register+0xe0>
 1006484:	008060f4 	movhi	r2,387
 1006488:	10bb7104 	addi	r2,r2,-4668
 100648c:	10800117 	ldw	r2,4(r2)
 1006490:	e0ffff17 	ldw	r3,-4(fp)
 1006494:	18c00017 	ldw	r3,0(r3)
 1006498:	180d883a 	mov	r6,r3
 100649c:	014040f4 	movhi	r5,259
 10064a0:	29652204 	addi	r5,r5,-27512
 10064a4:	010001c4 	movi	r4,7
 10064a8:	103ee83a 	callr	r2
	return 0;
 10064ac:	0005883a 	mov	r2,zero
}
 10064b0:	e037883a 	mov	sp,fp
 10064b4:	dfc00117 	ldw	ra,4(sp)
 10064b8:	df000017 	ldw	fp,0(sp)
 10064bc:	dec00204 	addi	sp,sp,8
 10064c0:	f800283a 	ret

010064c4 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 10064c4:	defffd04 	addi	sp,sp,-12
 10064c8:	dfc00215 	stw	ra,8(sp)
 10064cc:	df000115 	stw	fp,4(sp)
 10064d0:	df000104 	addi	fp,sp,4
 10064d4:	e13fff15 	stw	r4,-4(fp)
	metal_list_del(&bus->node);
 10064d8:	e0bfff17 	ldw	r2,-4(fp)
 10064dc:	10800904 	addi	r2,r2,36
 10064e0:	1009883a 	mov	r4,r2
 10064e4:	10062740 	call	1006274 <metal_list_del>
	if (bus->ops.bus_close)
 10064e8:	e0bfff17 	ldw	r2,-4(fp)
 10064ec:	10800117 	ldw	r2,4(r2)
 10064f0:	10000426 	beq	r2,zero,1006504 <metal_bus_unregister+0x40>
		bus->ops.bus_close(bus);
 10064f4:	e0bfff17 	ldw	r2,-4(fp)
 10064f8:	10800117 	ldw	r2,4(r2)
 10064fc:	e13fff17 	ldw	r4,-4(fp)
 1006500:	103ee83a 	callr	r2
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 1006504:	008060f4 	movhi	r2,387
 1006508:	10bb7104 	addi	r2,r2,-4668
 100650c:	10800017 	ldw	r2,0(r2)
 1006510:	108001f0 	cmpltui	r2,r2,7
 1006514:	10000e1e 	bne	r2,zero,1006550 <metal_bus_unregister+0x8c>
 1006518:	008060f4 	movhi	r2,387
 100651c:	10bb7104 	addi	r2,r2,-4668
 1006520:	10800117 	ldw	r2,4(r2)
 1006524:	10000a26 	beq	r2,zero,1006550 <metal_bus_unregister+0x8c>
 1006528:	008060f4 	movhi	r2,387
 100652c:	10bb7104 	addi	r2,r2,-4668
 1006530:	10800117 	ldw	r2,4(r2)
 1006534:	e0ffff17 	ldw	r3,-4(fp)
 1006538:	18c00017 	ldw	r3,0(r3)
 100653c:	180d883a 	mov	r6,r3
 1006540:	014040f4 	movhi	r5,259
 1006544:	29652704 	addi	r5,r5,-27492
 1006548:	010001c4 	movi	r4,7
 100654c:	103ee83a 	callr	r2
	return 0;
 1006550:	0005883a 	mov	r2,zero
}
 1006554:	e037883a 	mov	sp,fp
 1006558:	dfc00117 	ldw	ra,4(sp)
 100655c:	df000017 	ldw	fp,0(sp)
 1006560:	dec00204 	addi	sp,sp,8
 1006564:	f800283a 	ret

01006568 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 1006568:	defffa04 	addi	sp,sp,-24
 100656c:	dfc00515 	stw	ra,20(sp)
 1006570:	df000415 	stw	fp,16(sp)
 1006574:	df000404 	addi	fp,sp,16
 1006578:	e13ffe15 	stw	r4,-8(fp)
 100657c:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 1006580:	008060f4 	movhi	r2,387
 1006584:	10bb7104 	addi	r2,r2,-4668
 1006588:	10800217 	ldw	r2,8(r2)
 100658c:	e0bffc15 	stw	r2,-16(fp)
 1006590:	00001406 	br	10065e4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
 1006594:	e0bffc17 	ldw	r2,-16(fp)
 1006598:	10bff704 	addi	r2,r2,-36
 100659c:	e0bffd15 	stw	r2,-12(fp)
		if (strcmp(bus->name, name) != 0)
 10065a0:	e0bffd17 	ldw	r2,-12(fp)
 10065a4:	10800017 	ldw	r2,0(r2)
 10065a8:	e17ffe17 	ldw	r5,-8(fp)
 10065ac:	1009883a 	mov	r4,r2
 10065b0:	1015d600 	call	1015d60 <strcmp>
 10065b4:	10000426 	beq	r2,zero,10065c8 <metal_bus_find+0x60>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10065b8:	e0bffc17 	ldw	r2,-16(fp)
 10065bc:	10800017 	ldw	r2,0(r2)
 10065c0:	e0bffc15 	stw	r2,-16(fp)
 10065c4:	00000706 	br	10065e4 <metal_bus_find+0x7c>
		bus = metal_container_of(node, struct metal_bus, node);
		if (strcmp(bus->name, name) != 0)
			continue;
		if (result)
 10065c8:	e0bfff17 	ldw	r2,-4(fp)
 10065cc:	10000326 	beq	r2,zero,10065dc <metal_bus_find+0x74>
			*result = bus;
 10065d0:	e0bfff17 	ldw	r2,-4(fp)
 10065d4:	e0fffd17 	ldw	r3,-12(fp)
 10065d8:	10c00015 	stw	r3,0(r2)
		return 0;
 10065dc:	0005883a 	mov	r2,zero
 10065e0:	00000506 	br	10065f8 <metal_bus_find+0x90>
int metal_bus_find(const char *name, struct metal_bus **result)
{
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 10065e4:	e0fffc17 	ldw	r3,-16(fp)
 10065e8:	008060f4 	movhi	r2,387
 10065ec:	10bb7304 	addi	r2,r2,-4660
 10065f0:	18bfe81e 	bne	r3,r2,1006594 <__alt_data_end+0xff006594>
			continue;
		if (result)
			*result = bus;
		return 0;
	}
	return -ENOENT;
 10065f4:	00bfff84 	movi	r2,-2
}
 10065f8:	e037883a 	mov	sp,fp
 10065fc:	dfc00117 	ldw	ra,4(sp)
 1006600:	df000017 	ldw	fp,0(sp)
 1006604:	dec00204 	addi	sp,sp,8
 1006608:	f800283a 	ret

0100660c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 100660c:	defff904 	addi	sp,sp,-28
 1006610:	dfc00615 	stw	ra,24(sp)
 1006614:	df000515 	stw	fp,20(sp)
 1006618:	df000504 	addi	fp,sp,20
 100661c:	e13ffd15 	stw	r4,-12(fp)
 1006620:	e17ffe15 	stw	r5,-8(fp)
 1006624:	e1bfff15 	stw	r6,-4(fp)
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 1006628:	e0bffd17 	ldw	r2,-12(fp)
 100662c:	10001026 	beq	r2,zero,1006670 <metal_device_open+0x64>
 1006630:	e0bffd17 	ldw	r2,-12(fp)
 1006634:	10800003 	ldbu	r2,0(r2)
 1006638:	10803fcc 	andi	r2,r2,255
 100663c:	1080201c 	xori	r2,r2,128
 1006640:	10bfe004 	addi	r2,r2,-128
 1006644:	10000a26 	beq	r2,zero,1006670 <metal_device_open+0x64>
 1006648:	e0bffe17 	ldw	r2,-8(fp)
 100664c:	10000826 	beq	r2,zero,1006670 <metal_device_open+0x64>
	    !dev_name || !strlen(dev_name) ||
 1006650:	e0bffe17 	ldw	r2,-8(fp)
 1006654:	10800003 	ldbu	r2,0(r2)
 1006658:	10803fcc 	andi	r2,r2,255
 100665c:	1080201c 	xori	r2,r2,128
 1006660:	10bfe004 	addi	r2,r2,-128
 1006664:	10000226 	beq	r2,zero,1006670 <metal_device_open+0x64>
 1006668:	e0bfff17 	ldw	r2,-4(fp)
 100666c:	1000021e 	bne	r2,zero,1006678 <metal_device_open+0x6c>
	    !device)
		return -EINVAL;
 1006670:	00bffa84 	movi	r2,-22
 1006674:	00001b06 	br	10066e4 <metal_device_open+0xd8>

	error = metal_bus_find(bus_name, &bus);
 1006678:	e0bffc04 	addi	r2,fp,-16
 100667c:	100b883a 	mov	r5,r2
 1006680:	e13ffd17 	ldw	r4,-12(fp)
 1006684:	10065680 	call	1006568 <metal_bus_find>
 1006688:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 100668c:	e0bffb17 	ldw	r2,-20(fp)
 1006690:	10000226 	beq	r2,zero,100669c <metal_device_open+0x90>
		return error;
 1006694:	e0bffb17 	ldw	r2,-20(fp)
 1006698:	00001206 	br	10066e4 <metal_device_open+0xd8>

	if (!bus->ops.dev_open)
 100669c:	e0bffc17 	ldw	r2,-16(fp)
 10066a0:	10800217 	ldw	r2,8(r2)
 10066a4:	1000021e 	bne	r2,zero,10066b0 <metal_device_open+0xa4>
		return -ENODEV;
 10066a8:	00bffb44 	movi	r2,-19
 10066ac:	00000d06 	br	10066e4 <metal_device_open+0xd8>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 10066b0:	e0bffc17 	ldw	r2,-16(fp)
 10066b4:	10800217 	ldw	r2,8(r2)
 10066b8:	e0fffc17 	ldw	r3,-16(fp)
 10066bc:	e1bfff17 	ldw	r6,-4(fp)
 10066c0:	e17ffe17 	ldw	r5,-8(fp)
 10066c4:	1809883a 	mov	r4,r3
 10066c8:	103ee83a 	callr	r2
 10066cc:	e0bffb15 	stw	r2,-20(fp)
	if (error)
 10066d0:	e0bffb17 	ldw	r2,-20(fp)
 10066d4:	10000226 	beq	r2,zero,10066e0 <metal_device_open+0xd4>
		return error;
 10066d8:	e0bffb17 	ldw	r2,-20(fp)
 10066dc:	00000106 	br	10066e4 <metal_device_open+0xd8>

	return 0;
 10066e0:	0005883a 	mov	r2,zero
}
 10066e4:	e037883a 	mov	sp,fp
 10066e8:	dfc00117 	ldw	ra,4(sp)
 10066ec:	df000017 	ldw	fp,0(sp)
 10066f0:	dec00204 	addi	sp,sp,8
 10066f4:	f800283a 	ret

010066f8 <metal_device_close>:

void metal_device_close(struct metal_device *device)
{
 10066f8:	defffd04 	addi	sp,sp,-12
 10066fc:	dfc00215 	stw	ra,8(sp)
 1006700:	df000115 	stw	fp,4(sp)
 1006704:	df000104 	addi	fp,sp,4
 1006708:	e13fff15 	stw	r4,-4(fp)
	metal_assert(device && device->bus);
 100670c:	e0bfff17 	ldw	r2,-4(fp)
 1006710:	10000326 	beq	r2,zero,1006720 <metal_device_close+0x28>
 1006714:	e0bfff17 	ldw	r2,-4(fp)
 1006718:	10800117 	ldw	r2,4(r2)
 100671c:	1000081e 	bne	r2,zero,1006740 <metal_device_close+0x48>
 1006720:	01c040f4 	movhi	r7,259
 1006724:	39e52d04 	addi	r7,r7,-27468
 1006728:	018040f4 	movhi	r6,259
 100672c:	31a53904 	addi	r6,r6,-27420
 1006730:	014014c4 	movi	r5,83
 1006734:	010040f4 	movhi	r4,259
 1006738:	21253304 	addi	r4,r4,-27444
 100673c:	10156a00 	call	10156a0 <__assert_func>
	if (device->bus->ops.dev_close)
 1006740:	e0bfff17 	ldw	r2,-4(fp)
 1006744:	10800117 	ldw	r2,4(r2)
 1006748:	10800317 	ldw	r2,12(r2)
 100674c:	10000826 	beq	r2,zero,1006770 <metal_device_close+0x78>
		device->bus->ops.dev_close(device->bus, device);
 1006750:	e0bfff17 	ldw	r2,-4(fp)
 1006754:	10800117 	ldw	r2,4(r2)
 1006758:	10800317 	ldw	r2,12(r2)
 100675c:	e0ffff17 	ldw	r3,-4(fp)
 1006760:	18c00117 	ldw	r3,4(r3)
 1006764:	e17fff17 	ldw	r5,-4(fp)
 1006768:	1809883a 	mov	r4,r3
 100676c:	103ee83a 	callr	r2
}
 1006770:	0001883a 	nop
 1006774:	e037883a 	mov	sp,fp
 1006778:	dfc00117 	ldw	ra,4(sp)
 100677c:	df000017 	ldw	fp,0(sp)
 1006780:	dec00204 	addi	sp,sp,8
 1006784:	f800283a 	ret

01006788 <metal_register_generic_device>:

int metal_register_generic_device(struct metal_device *device)
{
 1006788:	defffd04 	addi	sp,sp,-12
 100678c:	dfc00215 	stw	ra,8(sp)
 1006790:	df000115 	stw	fp,4(sp)
 1006794:	df000104 	addi	fp,sp,4
 1006798:	e13fff15 	stw	r4,-4(fp)
	if (!device->name || !strlen(device->name) ||
 100679c:	e0bfff17 	ldw	r2,-4(fp)
 10067a0:	10800017 	ldw	r2,0(r2)
 10067a4:	10000b26 	beq	r2,zero,10067d4 <metal_register_generic_device+0x4c>
 10067a8:	e0bfff17 	ldw	r2,-4(fp)
 10067ac:	10800017 	ldw	r2,0(r2)
 10067b0:	10800003 	ldbu	r2,0(r2)
 10067b4:	10803fcc 	andi	r2,r2,255
 10067b8:	1080201c 	xori	r2,r2,128
 10067bc:	10bfe004 	addi	r2,r2,-128
 10067c0:	10000426 	beq	r2,zero,10067d4 <metal_register_generic_device+0x4c>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 10067c4:	e0bfff17 	ldw	r2,-4(fp)
 10067c8:	10800217 	ldw	r2,8(r2)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
	if (!device->name || !strlen(device->name) ||
 10067cc:	108000b0 	cmpltui	r2,r2,2
 10067d0:	1000021e 	bne	r2,zero,10067dc <metal_register_generic_device+0x54>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
		return -EINVAL;
 10067d4:	00bffa84 	movi	r2,-22
 10067d8:	00000b06 	br	1006808 <metal_register_generic_device+0x80>

	device->bus = &metal_generic_bus;
 10067dc:	e0ffff17 	ldw	r3,-4(fp)
 10067e0:	008040f4 	movhi	r2,259
 10067e4:	10abcd04 	addi	r2,r2,-20684
 10067e8:	18800115 	stw	r2,4(r3)
	metal_list_add_tail(&_metal.common.generic_device_list,
 10067ec:	e0bfff17 	ldw	r2,-4(fp)
 10067f0:	10801104 	addi	r2,r2,68
 10067f4:	100b883a 	mov	r5,r2
 10067f8:	010060f4 	movhi	r4,387
 10067fc:	213b7704 	addi	r4,r4,-4644
 1006800:	10062380 	call	1006238 <metal_list_add_tail>
			    &device->node);
	return 0;
 1006804:	0005883a 	mov	r2,zero
}
 1006808:	e037883a 	mov	sp,fp
 100680c:	dfc00117 	ldw	ra,4(sp)
 1006810:	df000017 	ldw	fp,0(sp)
 1006814:	dec00204 	addi	sp,sp,8
 1006818:	f800283a 	ret

0100681c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 100681c:	defff904 	addi	sp,sp,-28
 1006820:	dfc00615 	stw	ra,24(sp)
 1006824:	df000515 	stw	fp,20(sp)
 1006828:	df000504 	addi	fp,sp,20
 100682c:	e13ffd15 	stw	r4,-12(fp)
 1006830:	e17ffe15 	stw	r5,-8(fp)
 1006834:	e1bfff15 	stw	r6,-4(fp)
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006838:	008060f4 	movhi	r2,387
 100683c:	10bb7104 	addi	r2,r2,-4668
 1006840:	10800617 	ldw	r2,24(r2)
 1006844:	e0bffb15 	stw	r2,-20(fp)
 1006848:	00001306 	br	1006898 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
 100684c:	e0bffb17 	ldw	r2,-20(fp)
 1006850:	10bfef04 	addi	r2,r2,-68
 1006854:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(dev->name, dev_name) != 0)
 1006858:	e0bffc17 	ldw	r2,-16(fp)
 100685c:	10800017 	ldw	r2,0(r2)
 1006860:	e17ffe17 	ldw	r5,-8(fp)
 1006864:	1009883a 	mov	r4,r2
 1006868:	1015d600 	call	1015d60 <strcmp>
 100686c:	10000426 	beq	r2,zero,1006880 <metal_generic_dev_open+0x64>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006870:	e0bffb17 	ldw	r2,-20(fp)
 1006874:	10800017 	ldw	r2,0(r2)
 1006878:	e0bffb15 	stw	r2,-20(fp)
 100687c:	00000606 	br	1006898 <metal_generic_dev_open+0x7c>
		dev = metal_container_of(node, struct metal_device, node);
		if (strcmp(dev->name, dev_name) != 0)
			continue;
		*device = dev;
 1006880:	e0bfff17 	ldw	r2,-4(fp)
 1006884:	e0fffc17 	ldw	r3,-16(fp)
 1006888:	10c00015 	stw	r3,0(r2)
		return metal_generic_dev_sys_open(dev);
 100688c:	e13ffc17 	ldw	r4,-16(fp)
 1006890:	1006ee00 	call	1006ee0 <metal_generic_dev_sys_open>
 1006894:	00000506 	br	10068ac <metal_generic_dev_open+0x90>
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 1006898:	e0fffb17 	ldw	r3,-20(fp)
 100689c:	008060f4 	movhi	r2,387
 10068a0:	10bb7704 	addi	r2,r2,-4644
 10068a4:	18bfe91e 	bne	r3,r2,100684c <__alt_data_end+0xff00684c>
			continue;
		*device = dev;
		return metal_generic_dev_sys_open(dev);
	}

	return -ENODEV;
 10068a8:	00bffb44 	movi	r2,-19
}
 10068ac:	e037883a 	mov	sp,fp
 10068b0:	dfc00117 	ldw	ra,4(sp)
 10068b4:	df000017 	ldw	fp,0(sp)
 10068b8:	dec00204 	addi	sp,sp,8
 10068bc:	f800283a 	ret

010068c0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 10068c0:	defff904 	addi	sp,sp,-28
 10068c4:	dfc00615 	stw	ra,24(sp)
 10068c8:	df000515 	stw	fp,20(sp)
 10068cc:	df000504 	addi	fp,sp,20
 10068d0:	e13ffc15 	stw	r4,-16(fp)
 10068d4:	e17ffd15 	stw	r5,-12(fp)
 10068d8:	e1bffe15 	stw	r6,-8(fp)
 10068dc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
 10068e0:	e0c00317 	ldw	r3,12(fp)
 10068e4:	e0bfff17 	ldw	r2,-4(fp)
 10068e8:	18800626 	beq	r3,r2,1006904 <metal_generic_dev_dma_map+0x44>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 10068ec:	e0800217 	ldw	r2,8(fp)
 10068f0:	10800324 	muli	r2,r2,12
 10068f4:	100d883a 	mov	r6,r2
 10068f8:	e17fff17 	ldw	r5,-4(fp)
 10068fc:	e1000317 	ldw	r4,12(fp)
 1006900:	10157f40 	call	10157f4 <memcpy>
	for (i = 0; i < nents_in; i++) {
 1006904:	e03ffb15 	stw	zero,-20(fp)
 1006908:	00001e06 	br	1006984 <metal_generic_dev_dma_map+0xc4>
		if (dir == METAL_DMA_DEV_W) {
 100690c:	e0bffe17 	ldw	r2,-8(fp)
 1006910:	10800098 	cmpnei	r2,r2,2
 1006914:	10000c1e 	bne	r2,zero,1006948 <metal_generic_dev_dma_map+0x88>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 1006918:	e0bffb17 	ldw	r2,-20(fp)
 100691c:	10800324 	muli	r2,r2,12
 1006920:	e0c00317 	ldw	r3,12(fp)
 1006924:	1885883a 	add	r2,r3,r2
 1006928:	11000017 	ldw	r4,0(r2)
 100692c:	e0bffb17 	ldw	r2,-20(fp)
 1006930:	10800324 	muli	r2,r2,12
 1006934:	e0c00317 	ldw	r3,12(fp)
 1006938:	1885883a 	add	r2,r3,r2
 100693c:	10800217 	ldw	r2,8(r2)
 1006940:	100b883a 	mov	r5,r2
 1006944:	10063540 	call	1006354 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 1006948:	e0bffb17 	ldw	r2,-20(fp)
 100694c:	10800324 	muli	r2,r2,12
 1006950:	e0c00317 	ldw	r3,12(fp)
 1006954:	1885883a 	add	r2,r3,r2
 1006958:	11000017 	ldw	r4,0(r2)
 100695c:	e0bffb17 	ldw	r2,-20(fp)
 1006960:	10800324 	muli	r2,r2,12
 1006964:	e0c00317 	ldw	r3,12(fp)
 1006968:	1885883a 	add	r2,r3,r2
 100696c:	10800217 	ldw	r2,8(r2)
 1006970:	100b883a 	mov	r5,r2
 1006974:	10063900 	call	1006390 <metal_cache_invalidate>
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
	for (i = 0; i < nents_in; i++) {
 1006978:	e0bffb17 	ldw	r2,-20(fp)
 100697c:	10800044 	addi	r2,r2,1
 1006980:	e0bffb15 	stw	r2,-20(fp)
 1006984:	e0fffb17 	ldw	r3,-20(fp)
 1006988:	e0800217 	ldw	r2,8(fp)
 100698c:	18bfdf16 	blt	r3,r2,100690c <__alt_data_end+0xff00690c>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
	}

	return nents_in;
 1006990:	e0800217 	ldw	r2,8(fp)
}
 1006994:	e037883a 	mov	sp,fp
 1006998:	dfc00117 	ldw	ra,4(sp)
 100699c:	df000017 	ldw	fp,0(sp)
 10069a0:	dec00204 	addi	sp,sp,8
 10069a4:	f800283a 	ret

010069a8 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 10069a8:	defff904 	addi	sp,sp,-28
 10069ac:	dfc00615 	stw	ra,24(sp)
 10069b0:	df000515 	stw	fp,20(sp)
 10069b4:	df000504 	addi	fp,sp,20
 10069b8:	e13ffc15 	stw	r4,-16(fp)
 10069bc:	e17ffd15 	stw	r5,-12(fp)
 10069c0:	e1bffe15 	stw	r6,-8(fp)
 10069c4:	e1ffff15 	stw	r7,-4(fp)
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 10069c8:	e03ffb15 	stw	zero,-20(fp)
 10069cc:	00000f06 	br	1006a0c <metal_generic_dev_dma_unmap+0x64>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 10069d0:	e0bffb17 	ldw	r2,-20(fp)
 10069d4:	10800324 	muli	r2,r2,12
 10069d8:	e0ffff17 	ldw	r3,-4(fp)
 10069dc:	1885883a 	add	r2,r3,r2
 10069e0:	11000017 	ldw	r4,0(r2)
 10069e4:	e0bffb17 	ldw	r2,-20(fp)
 10069e8:	10800324 	muli	r2,r2,12
 10069ec:	e0ffff17 	ldw	r3,-4(fp)
 10069f0:	1885883a 	add	r2,r3,r2
 10069f4:	10800217 	ldw	r2,8(r2)
 10069f8:	100b883a 	mov	r5,r2
 10069fc:	10063900 	call	1006390 <metal_cache_invalidate>
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
 1006a00:	e0bffb17 	ldw	r2,-20(fp)
 1006a04:	10800044 	addi	r2,r2,1
 1006a08:	e0bffb15 	stw	r2,-20(fp)
 1006a0c:	e0fffb17 	ldw	r3,-20(fp)
 1006a10:	e0800217 	ldw	r2,8(fp)
 1006a14:	18bfee16 	blt	r3,r2,10069d0 <__alt_data_end+0xff0069d0>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
	}
}
 1006a18:	0001883a 	nop
 1006a1c:	e037883a 	mov	sp,fp
 1006a20:	dfc00117 	ldw	ra,4(sp)
 1006a24:	df000017 	ldw	fp,0(sp)
 1006a28:	dec00204 	addi	sp,sp,8
 1006a2c:	f800283a 	ret

01006a30 <metal_dma_map>:
int metal_dma_map(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg_in,
		  int nents_in,
		  struct metal_sg *sg_out)
{
 1006a30:	defff704 	addi	sp,sp,-36
 1006a34:	dfc00815 	stw	ra,32(sp)
 1006a38:	df000715 	stw	fp,28(sp)
 1006a3c:	df000704 	addi	fp,sp,28
 1006a40:	e13ffc15 	stw	r4,-16(fp)
 1006a44:	e17ffd15 	stw	r5,-12(fp)
 1006a48:	e1bffe15 	stw	r6,-8(fp)
 1006a4c:	e1ffff15 	stw	r7,-4(fp)
	int nents_out;

	if (!dev || !sg_in || !sg_out)
 1006a50:	e0bffc17 	ldw	r2,-16(fp)
 1006a54:	10000426 	beq	r2,zero,1006a68 <metal_dma_map+0x38>
 1006a58:	e0bffe17 	ldw	r2,-8(fp)
 1006a5c:	10000226 	beq	r2,zero,1006a68 <metal_dma_map+0x38>
 1006a60:	e0800217 	ldw	r2,8(fp)
 1006a64:	1000021e 	bne	r2,zero,1006a70 <metal_dma_map+0x40>
		return -EINVAL;
 1006a68:	00bffa84 	movi	r2,-22
 1006a6c:	00001b06 	br	1006adc <metal_dma_map+0xac>
	if (!dev->bus->ops.dev_dma_map)
 1006a70:	e0bffc17 	ldw	r2,-16(fp)
 1006a74:	10800117 	ldw	r2,4(r2)
 1006a78:	10800517 	ldw	r2,20(r2)
 1006a7c:	1000021e 	bne	r2,zero,1006a88 <metal_dma_map+0x58>
		return -ENODEV;
 1006a80:	00bffb44 	movi	r2,-19
 1006a84:	00001506 	br	1006adc <metal_dma_map+0xac>

	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006a88:	e0bffd17 	ldw	r2,-12(fp)
 1006a8c:	10800058 	cmpnei	r2,r2,1
 1006a90:	1000021e 	bne	r2,zero,1006a9c <metal_dma_map+0x6c>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 1006a94:	0001b03a 	sync
 1006a98:	00000106 	br	1006aa0 <metal_dma_map+0x70>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 1006a9c:	0001b03a 	sync
	nents_out = dev->bus->ops.dev_dma_map(dev->bus,
 1006aa0:	e0bffc17 	ldw	r2,-16(fp)
 1006aa4:	10800117 	ldw	r2,4(r2)
 1006aa8:	10800517 	ldw	r2,20(r2)
 1006aac:	e0fffc17 	ldw	r3,-16(fp)
 1006ab0:	19000117 	ldw	r4,4(r3)
 1006ab4:	e0c00217 	ldw	r3,8(fp)
 1006ab8:	d8c00115 	stw	r3,4(sp)
 1006abc:	e0ffff17 	ldw	r3,-4(fp)
 1006ac0:	d8c00015 	stw	r3,0(sp)
 1006ac4:	e1fffe17 	ldw	r7,-8(fp)
 1006ac8:	e1bffd17 	ldw	r6,-12(fp)
 1006acc:	e17ffc17 	ldw	r5,-16(fp)
 1006ad0:	103ee83a 	callr	r2
 1006ad4:	e0bffb15 	stw	r2,-20(fp)
			dev, dir, sg_in, nents_in, sg_out);
	return nents_out;
 1006ad8:	e0bffb17 	ldw	r2,-20(fp)
}
 1006adc:	e037883a 	mov	sp,fp
 1006ae0:	dfc00117 	ldw	ra,4(sp)
 1006ae4:	df000017 	ldw	fp,0(sp)
 1006ae8:	dec00204 	addi	sp,sp,8
 1006aec:	f800283a 	ret

01006af0 <metal_dma_unmap>:

void metal_dma_unmap(struct metal_device *dev,
		  uint32_t dir,
		  struct metal_sg *sg,
		  int nents)
{
 1006af0:	defff904 	addi	sp,sp,-28
 1006af4:	dfc00615 	stw	ra,24(sp)
 1006af8:	df000515 	stw	fp,20(sp)
 1006afc:	df000504 	addi	fp,sp,20
 1006b00:	e13ffc15 	stw	r4,-16(fp)
 1006b04:	e17ffd15 	stw	r5,-12(fp)
 1006b08:	e1bffe15 	stw	r6,-8(fp)
 1006b0c:	e1ffff15 	stw	r7,-4(fp)
	/* memory barrier */
	if (dir == METAL_DMA_DEV_R)
 1006b10:	e0bffd17 	ldw	r2,-12(fp)
 1006b14:	10800058 	cmpnei	r2,r2,1
 1006b18:	1000021e 	bne	r2,zero,1006b24 <metal_dma_unmap+0x34>
		/* If it is device read, apply memory write fence. */
		atomic_thread_fence(memory_order_release);
 1006b1c:	0001b03a 	sync
 1006b20:	00000106 	br	1006b28 <metal_dma_unmap+0x38>
	else
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);
 1006b24:	0001b03a 	sync

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
 1006b28:	e0bffc17 	ldw	r2,-16(fp)
 1006b2c:	10001226 	beq	r2,zero,1006b78 <metal_dma_unmap+0x88>
 1006b30:	e0bffc17 	ldw	r2,-16(fp)
 1006b34:	10800117 	ldw	r2,4(r2)
 1006b38:	10800617 	ldw	r2,24(r2)
 1006b3c:	10000e26 	beq	r2,zero,1006b78 <metal_dma_unmap+0x88>
 1006b40:	e0bffe17 	ldw	r2,-8(fp)
 1006b44:	10000c26 	beq	r2,zero,1006b78 <metal_dma_unmap+0x88>
		return;
	dev->bus->ops.dev_dma_unmap(dev->bus,
 1006b48:	e0bffc17 	ldw	r2,-16(fp)
 1006b4c:	10800117 	ldw	r2,4(r2)
 1006b50:	10800617 	ldw	r2,24(r2)
 1006b54:	e0fffc17 	ldw	r3,-16(fp)
 1006b58:	19000117 	ldw	r4,4(r3)
 1006b5c:	e0ffff17 	ldw	r3,-4(fp)
 1006b60:	d8c00015 	stw	r3,0(sp)
 1006b64:	e1fffe17 	ldw	r7,-8(fp)
 1006b68:	e1bffd17 	ldw	r6,-12(fp)
 1006b6c:	e17ffc17 	ldw	r5,-16(fp)
 1006b70:	103ee83a 	callr	r2
 1006b74:	00000106 	br	1006b7c <metal_dma_unmap+0x8c>
		/* If it is device write or device r/w,
		   apply memory r/w fence. */
		atomic_thread_fence(memory_order_acq_rel);

	if (!dev || !dev->bus->ops.dev_dma_unmap || !sg)
		return;
 1006b78:	0001883a 	nop
	dev->bus->ops.dev_dma_unmap(dev->bus,
			dev, dir, sg, nents);
}
 1006b7c:	e037883a 	mov	sp,fp
 1006b80:	dfc00117 	ldw	ra,4(sp)
 1006b84:	df000017 	ldw	fp,0(sp)
 1006b88:	dec00204 	addi	sp,sp,8
 1006b8c:	f800283a 	ret

01006b90 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1006b90:	defffd04 	addi	sp,sp,-12
 1006b94:	dfc00215 	stw	ra,8(sp)
 1006b98:	df000115 	stw	fp,4(sp)
 1006b9c:	df000104 	addi	fp,sp,4
 1006ba0:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 1006ba4:	e13fff17 	ldw	r4,-4(fp)
 1006ba8:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 1006bac:	e037883a 	mov	sp,fp
 1006bb0:	dfc00117 	ldw	ra,4(sp)
 1006bb4:	df000017 	ldw	fp,0(sp)
 1006bb8:	dec00204 	addi	sp,sp,8
 1006bbc:	f800283a 	ret

01006bc0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 1006bc0:	defffd04 	addi	sp,sp,-12
 1006bc4:	dfc00215 	stw	ra,8(sp)
 1006bc8:	df000115 	stw	fp,4(sp)
 1006bcc:	df000104 	addi	fp,sp,4
 1006bd0:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 1006bd4:	e13fff17 	ldw	r4,-4(fp)
 1006bd8:	10011840 	call	1001184 <vPortFree>
}
 1006bdc:	0001883a 	nop
 1006be0:	e037883a 	mov	sp,fp
 1006be4:	dfc00117 	ldw	ra,4(sp)
 1006be8:	df000017 	ldw	fp,0(sp)
 1006bec:	dec00204 	addi	sp,sp,8
 1006bf0:	f800283a 	ret

01006bf4 <alloc_thread>:
#include <sys.h>

static const int test_count = 10;

static void *alloc_thread(void *arg)
{
 1006bf4:	defffa04 	addi	sp,sp,-24
 1006bf8:	dfc00515 	stw	ra,20(sp)
 1006bfc:	df000415 	stw	fp,16(sp)
 1006c00:	df000404 	addi	fp,sp,16
 1006c04:	e13fff15 	stw	r4,-4(fp)
	int i;
	void *ptr;
	void *rv = 0;
 1006c08:	e03ffd15 	stw	zero,-12(fp)

	(void)arg;

	for (i = 0; i < test_count; i++) {
 1006c0c:	e03ffc15 	stw	zero,-16(fp)
 1006c10:	00001d06 	br	1006c88 <alloc_thread+0x94>
		/* expecting the implementation to be thread safe */
		ptr = metal_allocate_memory(256 /*10*i*/);
 1006c14:	01004004 	movi	r4,256
 1006c18:	1006b900 	call	1006b90 <metal_allocate_memory>
 1006c1c:	e0bffe15 	stw	r2,-8(fp)
		if (!ptr) {
 1006c20:	e0bffe17 	ldw	r2,-8(fp)
 1006c24:	1000131e 	bne	r2,zero,1006c74 <alloc_thread+0x80>
			metal_log(METAL_LOG_DEBUG, "failed to allocate memmory\n");
 1006c28:	008060f4 	movhi	r2,387
 1006c2c:	10bb7104 	addi	r2,r2,-4668
 1006c30:	10800017 	ldw	r2,0(r2)
 1006c34:	108001f0 	cmpltui	r2,r2,7
 1006c38:	10000b1e 	bne	r2,zero,1006c68 <alloc_thread+0x74>
 1006c3c:	008060f4 	movhi	r2,387
 1006c40:	10bb7104 	addi	r2,r2,-4668
 1006c44:	10800117 	ldw	r2,4(r2)
 1006c48:	10000726 	beq	r2,zero,1006c68 <alloc_thread+0x74>
 1006c4c:	008060f4 	movhi	r2,387
 1006c50:	10bb7104 	addi	r2,r2,-4668
 1006c54:	10800117 	ldw	r2,4(r2)
 1006c58:	014040f4 	movhi	r5,259
 1006c5c:	29653e04 	addi	r5,r5,-27400
 1006c60:	010001c4 	movi	r4,7
 1006c64:	103ee83a 	callr	r2
		        rv = (void *)-ENOMEM;
 1006c68:	00bffd04 	movi	r2,-12
 1006c6c:	e0bffd15 	stw	r2,-12(fp)
			break;
 1006c70:	00000806 	br	1006c94 <alloc_thread+0xa0>
		}

		metal_free_memory(ptr);
 1006c74:	e13ffe17 	ldw	r4,-8(fp)
 1006c78:	1006bc00 	call	1006bc0 <metal_free_memory>
	void *ptr;
	void *rv = 0;

	(void)arg;

	for (i = 0; i < test_count; i++) {
 1006c7c:	e0bffc17 	ldw	r2,-16(fp)
 1006c80:	10800044 	addi	r2,r2,1
 1006c84:	e0bffc15 	stw	r2,-16(fp)
 1006c88:	00800284 	movi	r2,10
 1006c8c:	e0fffc17 	ldw	r3,-16(fp)
 1006c90:	18bfe016 	blt	r3,r2,1006c14 <__alt_data_end+0xff006c14>
		}

		metal_free_memory(ptr);
	}

	return rv;
 1006c94:	e0bffd17 	ldw	r2,-12(fp)
}
 1006c98:	e037883a 	mov	sp,fp
 1006c9c:	dfc00117 	ldw	ra,4(sp)
 1006ca0:	df000017 	ldw	fp,0(sp)
 1006ca4:	dec00204 	addi	sp,sp,8
 1006ca8:	f800283a 	ret

01006cac <alloc>:

static int alloc(void)
{
 1006cac:	defffc04 	addi	sp,sp,-16
 1006cb0:	dfc00315 	stw	ra,12(sp)
 1006cb4:	df000215 	stw	fp,8(sp)
 1006cb8:	df000204 	addi	fp,sp,8
	const int threads = 10;
 1006cbc:	00800284 	movi	r2,10
 1006cc0:	e0bffe15 	stw	r2,-8(fp)
	int rc;

	rc =  metal_run(threads, alloc_thread, NULL);
 1006cc4:	000d883a 	mov	r6,zero
 1006cc8:	01404034 	movhi	r5,256
 1006ccc:	295afd04 	addi	r5,r5,27636
 1006cd0:	e13ffe17 	ldw	r4,-8(fp)
 1006cd4:	10079b40 	call	10079b4 <metal_run>
 1006cd8:	e0bfff15 	stw	r2,-4(fp)

	return rc;
 1006cdc:	e0bfff17 	ldw	r2,-4(fp)
}
 1006ce0:	e037883a 	mov	sp,fp
 1006ce4:	dfc00117 	ldw	ra,4(sp)
 1006ce8:	df000017 	ldw	fp,0(sp)
 1006cec:	dec00204 	addi	sp,sp,8
 1006cf0:	f800283a 	ret

01006cf4 <metal_test_alloc>:
METAL_ADD_TEST(alloc);
 1006cf4:	defffe04 	addi	sp,sp,-8
 1006cf8:	dfc00115 	stw	ra,4(sp)
 1006cfc:	df000015 	stw	fp,0(sp)
 1006d00:	d839883a 	mov	fp,sp
 1006d04:	010040f4 	movhi	r4,259
 1006d08:	212bd804 	addi	r4,r4,-20640
 1006d0c:	1005f380 	call	1005f38 <metal_add_test_case>
 1006d10:	0001883a 	nop
 1006d14:	e037883a 	mov	sp,fp
 1006d18:	dfc00117 	ldw	ra,4(sp)
 1006d1c:	df000017 	ldw	fp,0(sp)
 1006d20:	dec00204 	addi	sp,sp,8
 1006d24:	f800283a 	ret

01006d28 <atomic_thread>:
#include "../atomic_mutex.h"

static const int atomic_test_count = 1000;

static void *atomic_thread(void *arg)
{
 1006d28:	defff804 	addi	sp,sp,-32
 1006d2c:	dfc00715 	stw	ra,28(sp)
 1006d30:	df000615 	stw	fp,24(sp)
 1006d34:	df000604 	addi	fp,sp,24
 1006d38:	e13fff15 	stw	r4,-4(fp)
	atomic_int *c = arg;
 1006d3c:	e0bfff17 	ldw	r2,-4(fp)
 1006d40:	e0bffb15 	stw	r2,-20(fp)
	int i;

	for (i = 0; i < atomic_test_count; i++) {
 1006d44:	e03ffa15 	stw	zero,-24(fp)
 1006d48:	00001106 	br	1006d90 <atomic_thread+0x68>
		atomic_mutex_acquire();
 1006d4c:	1005d680 	call	1005d68 <atomic_mutex_acquire>
		atomic_fetch_add(c, 1);
 1006d50:	e0bffb17 	ldw	r2,-20(fp)
 1006d54:	e0bffc15 	stw	r2,-16(fp)
 1006d58:	e0bffc17 	ldw	r2,-16(fp)
 1006d5c:	10800017 	ldw	r2,0(r2)
 1006d60:	e0bffd15 	stw	r2,-12(fp)
 1006d64:	00800044 	movi	r2,1
 1006d68:	e0bffe15 	stw	r2,-8(fp)
 1006d6c:	e0fffd17 	ldw	r3,-12(fp)
 1006d70:	e0bffe17 	ldw	r2,-8(fp)
 1006d74:	1887883a 	add	r3,r3,r2
 1006d78:	e0bffb17 	ldw	r2,-20(fp)
 1006d7c:	10c00015 	stw	r3,0(r2)
		atomic_mutex_release();
 1006d80:	1005d9c0 	call	1005d9c <atomic_mutex_release>
static void *atomic_thread(void *arg)
{
	atomic_int *c = arg;
	int i;

	for (i = 0; i < atomic_test_count; i++) {
 1006d84:	e0bffa17 	ldw	r2,-24(fp)
 1006d88:	10800044 	addi	r2,r2,1
 1006d8c:	e0bffa15 	stw	r2,-24(fp)
 1006d90:	0080fa04 	movi	r2,1000
 1006d94:	e0fffa17 	ldw	r3,-24(fp)
 1006d98:	18bfec16 	blt	r3,r2,1006d4c <__alt_data_end+0xff006d4c>
		atomic_mutex_acquire();
		atomic_fetch_add(c, 1);
		atomic_mutex_release();
	}

	return NULL;
 1006d9c:	0005883a 	mov	r2,zero
}
 1006da0:	e037883a 	mov	sp,fp
 1006da4:	dfc00117 	ldw	ra,4(sp)
 1006da8:	df000017 	ldw	fp,0(sp)
 1006dac:	dec00204 	addi	sp,sp,8
 1006db0:	f800283a 	ret

01006db4 <atomic>:

static int atomic(void)
{
 1006db4:	defffa04 	addi	sp,sp,-24
 1006db8:	dfc00515 	stw	ra,20(sp)
 1006dbc:	df000415 	stw	fp,16(sp)
 1006dc0:	df000404 	addi	fp,sp,16
	const int threads = 10;
 1006dc4:	00800284 	movi	r2,10
 1006dc8:	e0bffd15 	stw	r2,-12(fp)
	atomic_int counter = ATOMIC_VAR_INIT(0);
 1006dcc:	e03fff15 	stw	zero,-4(fp)
	int value, error;

	error = metal_run(threads, atomic_thread, &counter);
 1006dd0:	e0bfff04 	addi	r2,fp,-4
 1006dd4:	100d883a 	mov	r6,r2
 1006dd8:	01404034 	movhi	r5,256
 1006ddc:	295b4a04 	addi	r5,r5,27944
 1006de0:	e13ffd17 	ldw	r4,-12(fp)
 1006de4:	10079b40 	call	10079b4 <metal_run>
 1006de8:	e0bffc15 	stw	r2,-16(fp)
	if (!error) {
 1006dec:	e0bffc17 	ldw	r2,-16(fp)
 1006df0:	10001e1e 	bne	r2,zero,1006e6c <atomic+0xb8>
		value = atomic_load(&counter);
 1006df4:	0001b03a 	sync
 1006df8:	e0bfff17 	ldw	r2,-4(fp)
 1006dfc:	e0bffe15 	stw	r2,-8(fp)
		value -= atomic_test_count * threads;
 1006e00:	00c0fa04 	movi	r3,1000
 1006e04:	e0bffd17 	ldw	r2,-12(fp)
 1006e08:	1885383a 	mul	r2,r3,r2
 1006e0c:	e0fffe17 	ldw	r3,-8(fp)
 1006e10:	1885c83a 	sub	r2,r3,r2
 1006e14:	e0bffe15 	stw	r2,-8(fp)
		if (value) {
 1006e18:	e0bffe17 	ldw	r2,-8(fp)
 1006e1c:	10001326 	beq	r2,zero,1006e6c <atomic+0xb8>
			metal_log(METAL_LOG_DEBUG, "counter mismatch, delta = %d\n",
 1006e20:	008060f4 	movhi	r2,387
 1006e24:	10bb7104 	addi	r2,r2,-4668
 1006e28:	10800017 	ldw	r2,0(r2)
 1006e2c:	108001f0 	cmpltui	r2,r2,7
 1006e30:	10000c1e 	bne	r2,zero,1006e64 <atomic+0xb0>
 1006e34:	008060f4 	movhi	r2,387
 1006e38:	10bb7104 	addi	r2,r2,-4668
 1006e3c:	10800117 	ldw	r2,4(r2)
 1006e40:	10000826 	beq	r2,zero,1006e64 <atomic+0xb0>
 1006e44:	008060f4 	movhi	r2,387
 1006e48:	10bb7104 	addi	r2,r2,-4668
 1006e4c:	10800117 	ldw	r2,4(r2)
 1006e50:	e1bffe17 	ldw	r6,-8(fp)
 1006e54:	014040f4 	movhi	r5,259
 1006e58:	29654704 	addi	r5,r5,-27364
 1006e5c:	010001c4 	movi	r4,7
 1006e60:	103ee83a 	callr	r2
				  value);
			error = -EINVAL;
 1006e64:	00bffa84 	movi	r2,-22
 1006e68:	e0bffc15 	stw	r2,-16(fp)
		}
	}

	return error;
 1006e6c:	e0bffc17 	ldw	r2,-16(fp)
}
 1006e70:	e037883a 	mov	sp,fp
 1006e74:	dfc00117 	ldw	ra,4(sp)
 1006e78:	df000017 	ldw	fp,0(sp)
 1006e7c:	dec00204 	addi	sp,sp,8
 1006e80:	f800283a 	ret

01006e84 <metal_test_atomic>:
METAL_ADD_TEST(atomic);
 1006e84:	defffe04 	addi	sp,sp,-8
 1006e88:	dfc00115 	stw	ra,4(sp)
 1006e8c:	df000015 	stw	fp,0(sp)
 1006e90:	d839883a 	mov	fp,sp
 1006e94:	010040f4 	movhi	r4,259
 1006e98:	212bdc04 	addi	r4,r4,-20624
 1006e9c:	1005f380 	call	1005f38 <metal_add_test_case>
 1006ea0:	0001883a 	nop
 1006ea4:	e037883a 	mov	sp,fp
 1006ea8:	dfc00117 	ldw	ra,4(sp)
 1006eac:	df000017 	ldw	fp,0(sp)
 1006eb0:	dec00204 	addi	sp,sp,8
 1006eb4:	f800283a 	ret

01006eb8 <metal_condition_wait>:

#include <condition.h>

int metal_condition_wait(struct metal_condition *cv,
			 metal_mutex_t *m)
{
 1006eb8:	defffd04 	addi	sp,sp,-12
 1006ebc:	df000215 	stw	fp,8(sp)
 1006ec0:	df000204 	addi	fp,sp,8
 1006ec4:	e13ffe15 	stw	r4,-8(fp)
 1006ec8:	e17fff15 	stw	r5,-4(fp)
	/* TODO: Implement condition variable for FreeRTOS */
	(void)cv;
	(void)m;
	return 0;
 1006ecc:	0005883a 	mov	r2,zero
}
 1006ed0:	e037883a 	mov	sp,fp
 1006ed4:	df000017 	ldw	fp,0(sp)
 1006ed8:	dec00104 	addi	sp,sp,4
 1006edc:	f800283a 	ret

01006ee0 <metal_generic_dev_sys_open>:
#include <device.h>
#include <sys.h>
#include <utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 1006ee0:	defffb04 	addi	sp,sp,-20
 1006ee4:	dfc00415 	stw	ra,16(sp)
 1006ee8:	df000315 	stw	fp,12(sp)
 1006eec:	df000304 	addi	fp,sp,12
 1006ef0:	e13fff15 	stw	r4,-4(fp)
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006ef4:	e03ffd15 	stw	zero,-12(fp)
 1006ef8:	00000e06 	br	1006f34 <metal_generic_dev_sys_open+0x54>
		io = &dev->regions[i];
 1006efc:	e0bffd17 	ldw	r2,-12(fp)
 1006f00:	10800e24 	muli	r2,r2,56
 1006f04:	10800304 	addi	r2,r2,12
 1006f08:	e0ffff17 	ldw	r3,-4(fp)
 1006f0c:	1885883a 	add	r2,r3,r2
 1006f10:	e0bffe15 	stw	r2,-8(fp)
		if (!io->size)
 1006f14:	e0bffe17 	ldw	r2,-8(fp)
 1006f18:	10800217 	ldw	r2,8(r2)
 1006f1c:	10000a26 	beq	r2,zero,1006f48 <metal_generic_dev_sys_open+0x68>
			break;
		metal_sys_io_mem_map(io);
 1006f20:	e13ffe17 	ldw	r4,-8(fp)
 1006f24:	1006fd00 	call	1006fd0 <metal_sys_io_mem_map>
{
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 1006f28:	e0bffd17 	ldw	r2,-12(fp)
 1006f2c:	10800044 	addi	r2,r2,1
 1006f30:	e0bffd15 	stw	r2,-12(fp)
 1006f34:	e0bfff17 	ldw	r2,-4(fp)
 1006f38:	10800217 	ldw	r2,8(r2)
 1006f3c:	e0fffd17 	ldw	r3,-12(fp)
 1006f40:	18bfee36 	bltu	r3,r2,1006efc <__alt_data_end+0xff006efc>
 1006f44:	00000106 	br	1006f4c <metal_generic_dev_sys_open+0x6c>
		io = &dev->regions[i];
		if (!io->size)
			break;
 1006f48:	0001883a 	nop
		metal_sys_io_mem_map(io);
	}

	return 0;
 1006f4c:	0005883a 	mov	r2,zero
}
 1006f50:	e037883a 	mov	sp,fp
 1006f54:	dfc00117 	ldw	ra,4(sp)
 1006f58:	df000017 	ldw	fp,0(sp)
 1006f5c:	dec00204 	addi	sp,sp,8
 1006f60:	f800283a 	ret

01006f64 <metal_sys_init>:
#include <device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 1006f64:	defffd04 	addi	sp,sp,-12
 1006f68:	dfc00215 	stw	ra,8(sp)
 1006f6c:	df000115 	stw	fp,4(sp)
 1006f70:	df000104 	addi	fp,sp,4
 1006f74:	e13fff15 	stw	r4,-4(fp)
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 1006f78:	010040f4 	movhi	r4,259
 1006f7c:	212bcd04 	addi	r4,r4,-20684
 1006f80:	10063cc0 	call	10063cc <metal_bus_register>
	return 0;
 1006f84:	0005883a 	mov	r2,zero
}
 1006f88:	e037883a 	mov	sp,fp
 1006f8c:	dfc00117 	ldw	ra,4(sp)
 1006f90:	df000017 	ldw	fp,0(sp)
 1006f94:	dec00204 	addi	sp,sp,8
 1006f98:	f800283a 	ret

01006f9c <metal_sys_finish>:

void metal_sys_finish(void)
{
 1006f9c:	defffe04 	addi	sp,sp,-8
 1006fa0:	dfc00115 	stw	ra,4(sp)
 1006fa4:	df000015 	stw	fp,0(sp)
 1006fa8:	d839883a 	mov	fp,sp
	metal_bus_unregister(&metal_generic_bus);
 1006fac:	010040f4 	movhi	r4,259
 1006fb0:	212bcd04 	addi	r4,r4,-20684
 1006fb4:	10064c40 	call	10064c4 <metal_bus_unregister>
}
 1006fb8:	0001883a 	nop
 1006fbc:	e037883a 	mov	sp,fp
 1006fc0:	dfc00117 	ldw	ra,4(sp)
 1006fc4:	df000017 	ldw	fp,0(sp)
 1006fc8:	dec00204 	addi	sp,sp,8
 1006fcc:	f800283a 	ret

01006fd0 <metal_sys_io_mem_map>:
 */

#include <metal_io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 1006fd0:	defffa04 	addi	sp,sp,-24
 1006fd4:	dfc00515 	stw	ra,20(sp)
 1006fd8:	df000415 	stw	fp,16(sp)
 1006fdc:	df000404 	addi	fp,sp,16
 1006fe0:	e13fff15 	stw	r4,-4(fp)
	unsigned long p;
	size_t psize;
	void *va;

	va = io->virt;
 1006fe4:	e0bfff17 	ldw	r2,-4(fp)
 1006fe8:	10800017 	ldw	r2,0(r2)
 1006fec:	e0bffe15 	stw	r2,-8(fp)
	psize = io->size;
 1006ff0:	e0bfff17 	ldw	r2,-4(fp)
 1006ff4:	10800217 	ldw	r2,8(r2)
 1006ff8:	e0bffd15 	stw	r2,-12(fp)
	if (psize) {
 1006ffc:	e0bffd17 	ldw	r2,-12(fp)
 1007000:	10002826 	beq	r2,zero,10070a4 <metal_sys_io_mem_map+0xd4>
		if (psize >> io->page_shift)
 1007004:	e0bfff17 	ldw	r2,-4(fp)
 1007008:	10800317 	ldw	r2,12(r2)
 100700c:	e0fffd17 	ldw	r3,-12(fp)
 1007010:	1884d83a 	srl	r2,r3,r2
 1007014:	10000526 	beq	r2,zero,100702c <metal_sys_io_mem_map+0x5c>
			psize = (size_t)1 << io->page_shift;
 1007018:	e0bfff17 	ldw	r2,-4(fp)
 100701c:	10800317 	ldw	r2,12(r2)
 1007020:	00c00044 	movi	r3,1
 1007024:	1884983a 	sll	r2,r3,r2
 1007028:	e0bffd15 	stw	r2,-12(fp)
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 100702c:	e03ffc15 	stw	zero,-16(fp)
 1007030:	00001506 	br	1007088 <metal_sys_io_mem_map+0xb8>
			metal_machine_io_mem_map(va, io->physmap[p],
 1007034:	e0bfff17 	ldw	r2,-4(fp)
 1007038:	10c00117 	ldw	r3,4(r2)
 100703c:	e0bffc17 	ldw	r2,-16(fp)
 1007040:	1085883a 	add	r2,r2,r2
 1007044:	1085883a 	add	r2,r2,r2
 1007048:	1885883a 	add	r2,r3,r2
 100704c:	10c00017 	ldw	r3,0(r2)
 1007050:	e0bfff17 	ldw	r2,-4(fp)
 1007054:	10800517 	ldw	r2,20(r2)
 1007058:	100f883a 	mov	r7,r2
 100705c:	e1bffd17 	ldw	r6,-12(fp)
 1007060:	180b883a 	mov	r5,r3
 1007064:	e13ffe17 	ldw	r4,-8(fp)
 1007068:	10077880 	call	1007788 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 100706c:	e0fffe17 	ldw	r3,-8(fp)
 1007070:	e0bffd17 	ldw	r2,-12(fp)
 1007074:	1885883a 	add	r2,r3,r2
 1007078:	e0bffe15 	stw	r2,-8(fp)
	va = io->virt;
	psize = io->size;
	if (psize) {
		if (psize >> io->page_shift)
			psize = (size_t)1 << io->page_shift;
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 100707c:	e0bffc17 	ldw	r2,-16(fp)
 1007080:	10800044 	addi	r2,r2,1
 1007084:	e0bffc15 	stw	r2,-16(fp)
 1007088:	e0bfff17 	ldw	r2,-4(fp)
 100708c:	10c00217 	ldw	r3,8(r2)
 1007090:	e0bfff17 	ldw	r2,-4(fp)
 1007094:	10800317 	ldw	r2,12(r2)
 1007098:	1886d83a 	srl	r3,r3,r2
 100709c:	e0bffc17 	ldw	r2,-16(fp)
 10070a0:	18bfe42e 	bgeu	r3,r2,1007034 <__alt_data_end+0xff007034>
			metal_machine_io_mem_map(va, io->physmap[p],
						 psize, io->mem_flags);
			va += psize;
		}
	}
}
 10070a4:	0001883a 	nop
 10070a8:	e037883a 	mov	sp,fp
 10070ac:	dfc00117 	ldw	ra,4(sp)
 10070b0:	df000017 	ldw	fp,0(sp)
 10070b4:	dec00204 	addi	sp,sp,8
 10070b8:	f800283a 	ret

010070bc <metal_irq_save_disable>:
#include <metal_list.h>
#include <utilities.h>
#include <alloc.h>

unsigned int metal_irq_save_disable(void)
{
 10070bc:	defffe04 	addi	sp,sp,-8
 10070c0:	dfc00115 	stw	ra,4(sp)
 10070c4:	df000015 	stw	fp,0(sp)
 10070c8:	d839883a 	mov	fp,sp
	return sys_irq_save_disable();
 10070cc:	10076a80 	call	10076a8 <sys_irq_save_disable>
}
 10070d0:	e037883a 	mov	sp,fp
 10070d4:	dfc00117 	ldw	ra,4(sp)
 10070d8:	df000017 	ldw	fp,0(sp)
 10070dc:	dec00204 	addi	sp,sp,8
 10070e0:	f800283a 	ret

010070e4 <metal_irq_restore_enable>:

void metal_irq_restore_enable(unsigned int flags)
{
 10070e4:	defffd04 	addi	sp,sp,-12
 10070e8:	dfc00215 	stw	ra,8(sp)
 10070ec:	df000115 	stw	fp,4(sp)
 10070f0:	df000104 	addi	fp,sp,4
 10070f4:	e13fff15 	stw	r4,-4(fp)
	sys_irq_restore_enable(flags);
 10070f8:	e13fff17 	ldw	r4,-4(fp)
 10070fc:	10076700 	call	1007670 <sys_irq_restore_enable>
}
 1007100:	0001883a 	nop
 1007104:	e037883a 	mov	sp,fp
 1007108:	dfc00117 	ldw	ra,4(sp)
 100710c:	df000017 	ldw	fp,0(sp)
 1007110:	dec00204 	addi	sp,sp,8
 1007114:	f800283a 	ret

01007118 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 1007118:	defffe04 	addi	sp,sp,-8
 100711c:	df000115 	stw	fp,4(sp)
 1007120:	df000104 	addi	fp,sp,4
 1007124:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 1007128:	e0bfff17 	ldw	r2,-4(fp)
 100712c:	10000015 	stw	zero,0(r2)
 1007130:	0001b03a 	sync
}
 1007134:	0001883a 	nop
 1007138:	e037883a 	mov	sp,fp
 100713c:	df000017 	ldw	fp,0(sp)
 1007140:	dec00104 	addi	sp,sp,4
 1007144:	f800283a 	ret

01007148 <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 1007148:	defffe04 	addi	sp,sp,-8
 100714c:	df000115 	stw	fp,4(sp)
 1007150:	df000104 	addi	fp,sp,4
 1007154:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 1007158:	0001883a 	nop
 100715c:	e037883a 	mov	sp,fp
 1007160:	df000017 	ldw	fp,0(sp)
 1007164:	dec00104 	addi	sp,sp,4
 1007168:	f800283a 	ret

0100716c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 100716c:	defffb04 	addi	sp,sp,-20
 1007170:	df000415 	stw	fp,16(sp)
 1007174:	df000404 	addi	fp,sp,16
 1007178:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 100717c:	0001883a 	nop
 1007180:	e0bfff17 	ldw	r2,-4(fp)
 1007184:	e0bffc15 	stw	r2,-16(fp)
 1007188:	e0bffc17 	ldw	r2,-16(fp)
 100718c:	10800017 	ldw	r2,0(r2)
 1007190:	e0bffd15 	stw	r2,-12(fp)
 1007194:	00800044 	movi	r2,1
 1007198:	e0bffe15 	stw	r2,-8(fp)
 100719c:	e0bfff17 	ldw	r2,-4(fp)
 10071a0:	e0fffe17 	ldw	r3,-8(fp)
 10071a4:	10c00015 	stw	r3,0(r2)
 10071a8:	e0bffd17 	ldw	r2,-12(fp)
 10071ac:	103ff41e 	bne	r2,zero,1007180 <__alt_data_end+0xff007180>
		;
	}
}
 10071b0:	0001883a 	nop
 10071b4:	e037883a 	mov	sp,fp
 10071b8:	df000017 	ldw	fp,0(sp)
 10071bc:	dec00104 	addi	sp,sp,4
 10071c0:	f800283a 	ret

010071c4 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 10071c4:	defffe04 	addi	sp,sp,-8
 10071c8:	df000115 	stw	fp,4(sp)
 10071cc:	df000104 	addi	fp,sp,4
 10071d0:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 10071d4:	e0bfff17 	ldw	r2,-4(fp)
 10071d8:	0001b03a 	sync
 10071dc:	10000015 	stw	zero,0(r2)
}
 10071e0:	0001883a 	nop
 10071e4:	e037883a 	mov	sp,fp
 10071e8:	df000017 	ldw	fp,0(sp)
 10071ec:	dec00104 	addi	sp,sp,4
 10071f0:	f800283a 	ret

010071f4 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 10071f4:	defffd04 	addi	sp,sp,-12
 10071f8:	dfc00215 	stw	ra,8(sp)
 10071fc:	df000115 	stw	fp,4(sp)
 1007200:	df000104 	addi	fp,sp,4
 1007204:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1007208:	e13fff17 	ldw	r4,-4(fp)
 100720c:	10071180 	call	1007118 <__metal_mutex_init>
}
 1007210:	0001883a 	nop
 1007214:	e037883a 	mov	sp,fp
 1007218:	dfc00117 	ldw	ra,4(sp)
 100721c:	df000017 	ldw	fp,0(sp)
 1007220:	dec00204 	addi	sp,sp,8
 1007224:	f800283a 	ret

01007228 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 1007228:	defffd04 	addi	sp,sp,-12
 100722c:	dfc00215 	stw	ra,8(sp)
 1007230:	df000115 	stw	fp,4(sp)
 1007234:	df000104 	addi	fp,sp,4
 1007238:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 100723c:	e13fff17 	ldw	r4,-4(fp)
 1007240:	10071480 	call	1007148 <__metal_mutex_deinit>
}
 1007244:	0001883a 	nop
 1007248:	e037883a 	mov	sp,fp
 100724c:	dfc00117 	ldw	ra,4(sp)
 1007250:	df000017 	ldw	fp,0(sp)
 1007254:	dec00204 	addi	sp,sp,8
 1007258:	f800283a 	ret

0100725c <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 100725c:	defffd04 	addi	sp,sp,-12
 1007260:	dfc00215 	stw	ra,8(sp)
 1007264:	df000115 	stw	fp,4(sp)
 1007268:	df000104 	addi	fp,sp,4
 100726c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 1007270:	e13fff17 	ldw	r4,-4(fp)
 1007274:	100716c0 	call	100716c <__metal_mutex_acquire>
}
 1007278:	0001883a 	nop
 100727c:	e037883a 	mov	sp,fp
 1007280:	dfc00117 	ldw	ra,4(sp)
 1007284:	df000017 	ldw	fp,0(sp)
 1007288:	dec00204 	addi	sp,sp,8
 100728c:	f800283a 	ret

01007290 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1007290:	defffd04 	addi	sp,sp,-12
 1007294:	dfc00215 	stw	ra,8(sp)
 1007298:	df000115 	stw	fp,4(sp)
 100729c:	df000104 	addi	fp,sp,4
 10072a0:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 10072a4:	e13fff17 	ldw	r4,-4(fp)
 10072a8:	10071c40 	call	10071c4 <__metal_mutex_release>
}
 10072ac:	0001883a 	nop
 10072b0:	e037883a 	mov	sp,fp
 10072b4:	dfc00117 	ldw	ra,4(sp)
 10072b8:	df000017 	ldw	fp,0(sp)
 10072bc:	dec00204 	addi	sp,sp,8
 10072c0:	f800283a 	ret

010072c4 <mutex_thread>:
#include <mutex.h>

static const int mutex_test_count = 1000;

static void *mutex_thread(void *arg)
{
 10072c4:	defffb04 	addi	sp,sp,-20
 10072c8:	dfc00415 	stw	ra,16(sp)
 10072cc:	df000315 	stw	fp,12(sp)
 10072d0:	df000304 	addi	fp,sp,12
 10072d4:	e13fff15 	stw	r4,-4(fp)
	metal_mutex_t *l = arg;
 10072d8:	e0bfff17 	ldw	r2,-4(fp)
 10072dc:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 10072e0:	e03ffd15 	stw	zero,-12(fp)
 10072e4:	00000906 	br	100730c <mutex_thread+0x48>
		metal_mutex_acquire(l);
 10072e8:	e13ffe17 	ldw	r4,-8(fp)
 10072ec:	100725c0 	call	100725c <metal_mutex_acquire>
		usleep(1);
 10072f0:	01000044 	movi	r4,1
 10072f4:	10272c40 	call	10272c4 <usleep>
		metal_mutex_release(l);
 10072f8:	e13ffe17 	ldw	r4,-8(fp)
 10072fc:	10072900 	call	1007290 <metal_mutex_release>
static void *mutex_thread(void *arg)
{
	metal_mutex_t *l = arg;
	int i;

	for (i = 0; i < mutex_test_count; i++) {
 1007300:	e0bffd17 	ldw	r2,-12(fp)
 1007304:	10800044 	addi	r2,r2,1
 1007308:	e0bffd15 	stw	r2,-12(fp)
 100730c:	0080fa04 	movi	r2,1000
 1007310:	e0fffd17 	ldw	r3,-12(fp)
 1007314:	18bff416 	blt	r3,r2,10072e8 <__alt_data_end+0xff0072e8>
		metal_mutex_acquire(l);
		usleep(1);
		metal_mutex_release(l);
	}

	return NULL;
 1007318:	0005883a 	mov	r2,zero
}
 100731c:	e037883a 	mov	sp,fp
 1007320:	dfc00117 	ldw	ra,4(sp)
 1007324:	df000017 	ldw	fp,0(sp)
 1007328:	dec00204 	addi	sp,sp,8
 100732c:	f800283a 	ret

01007330 <mutex>:

static int mutex(void)
{
 1007330:	defffb04 	addi	sp,sp,-20
 1007334:	dfc00415 	stw	ra,16(sp)
 1007338:	df000315 	stw	fp,12(sp)
 100733c:	df000304 	addi	fp,sp,12
	metal_mutex_t lock;
	const int threads = 10;
 1007340:	00800284 	movi	r2,10
 1007344:	e0bffd15 	stw	r2,-12(fp)
	int rc;

	metal_mutex_init(&lock);
 1007348:	e0bfff04 	addi	r2,fp,-4
 100734c:	1009883a 	mov	r4,r2
 1007350:	10071f40 	call	10071f4 <metal_mutex_init>

	rc = metal_run(threads, mutex_thread, &lock);
 1007354:	e0bfff04 	addi	r2,fp,-4
 1007358:	100d883a 	mov	r6,r2
 100735c:	01404034 	movhi	r5,256
 1007360:	295cb104 	addi	r5,r5,29380
 1007364:	e13ffd17 	ldw	r4,-12(fp)
 1007368:	10079b40 	call	10079b4 <metal_run>
 100736c:	e0bffe15 	stw	r2,-8(fp)

	metal_mutex_deinit(&lock);
 1007370:	e0bfff04 	addi	r2,fp,-4
 1007374:	1009883a 	mov	r4,r2
 1007378:	10072280 	call	1007228 <metal_mutex_deinit>
	return rc;
 100737c:	e0bffe17 	ldw	r2,-8(fp)
}
 1007380:	e037883a 	mov	sp,fp
 1007384:	dfc00117 	ldw	ra,4(sp)
 1007388:	df000017 	ldw	fp,0(sp)
 100738c:	dec00204 	addi	sp,sp,8
 1007390:	f800283a 	ret

01007394 <metal_test_mutex>:
METAL_ADD_TEST(mutex);
 1007394:	defffe04 	addi	sp,sp,-8
 1007398:	dfc00115 	stw	ra,4(sp)
 100739c:	df000015 	stw	fp,0(sp)
 10073a0:	d839883a 	mov	fp,sp
 10073a4:	010040f4 	movhi	r4,259
 10073a8:	212be004 	addi	r4,r4,-20608
 10073ac:	1005f380 	call	1005f38 <metal_add_test_case>
 10073b0:	0001883a 	nop
 10073b4:	e037883a 	mov	sp,fp
 10073b8:	dfc00117 	ldw	ra,4(sp)
 10073bc:	df000017 	ldw	fp,0(sp)
 10073c0:	dec00204 	addi	sp,sp,8
 10073c4:	f800283a 	ret

010073c8 <metal_irq_handle>:
 * @param[in] irq IRQ id which will be passed to handler
 * @return IRQ handler status
 */
static inline
int metal_irq_handle(struct metal_irq *irq_data, int irq)
{
 10073c8:	defffc04 	addi	sp,sp,-16
 10073cc:	dfc00315 	stw	ra,12(sp)
 10073d0:	df000215 	stw	fp,8(sp)
 10073d4:	df000204 	addi	fp,sp,8
 10073d8:	e13ffe15 	stw	r4,-8(fp)
 10073dc:	e17fff15 	stw	r5,-4(fp)
	if (irq_data != NULL && irq_data->hd != NULL) {
 10073e0:	e0bffe17 	ldw	r2,-8(fp)
 10073e4:	10000b26 	beq	r2,zero,1007414 <metal_irq_handle+0x4c>
 10073e8:	e0bffe17 	ldw	r2,-8(fp)
 10073ec:	10800017 	ldw	r2,0(r2)
 10073f0:	10000826 	beq	r2,zero,1007414 <metal_irq_handle+0x4c>
		return irq_data->hd(irq, irq_data->arg);
 10073f4:	e0bffe17 	ldw	r2,-8(fp)
 10073f8:	10800017 	ldw	r2,0(r2)
 10073fc:	e0fffe17 	ldw	r3,-8(fp)
 1007400:	18c00117 	ldw	r3,4(r3)
 1007404:	180b883a 	mov	r5,r3
 1007408:	e13fff17 	ldw	r4,-4(fp)
 100740c:	103ee83a 	callr	r2
 1007410:	00000106 	br	1007418 <metal_irq_handle+0x50>
	} else {
		return METAL_IRQ_NOT_HANDLED;
 1007414:	0005883a 	mov	r2,zero
	}
}
 1007418:	e037883a 	mov	sp,fp
 100741c:	dfc00117 	ldw	ra,4(sp)
 1007420:	df000017 	ldw	fp,0(sp)
 1007424:	dec00204 	addi	sp,sp,8
 1007428:	f800283a 	ret

0100742c <sys_irq_enable>:

#define NIOS_MAXIRQS 	NIOS2_NIRQ
#define	IC_ID_IGNORE 	0

static inline void sys_irq_enable(unsigned int vector)
{
 100742c:	defffd04 	addi	sp,sp,-12
 1007430:	dfc00215 	stw	ra,8(sp)
 1007434:	df000115 	stw	fp,4(sp)
 1007438:	df000104 	addi	fp,sp,4
 100743c:	e13fff15 	stw	r4,-4(fp)
	alt_ic_irq_enable(IC_ID_IGNORE, (alt_u32)vector);
 1007440:	e17fff17 	ldw	r5,-4(fp)
 1007444:	0009883a 	mov	r4,zero
 1007448:	10267ac0 	call	10267ac <alt_ic_irq_enable>
}
 100744c:	0001883a 	nop
 1007450:	e037883a 	mov	sp,fp
 1007454:	dfc00117 	ldw	ra,4(sp)
 1007458:	df000017 	ldw	fp,0(sp)
 100745c:	dec00204 	addi	sp,sp,8
 1007460:	f800283a 	ret

01007464 <sys_irq_disable>:

static inline void sys_irq_disable(unsigned int vector)
{
 1007464:	defffd04 	addi	sp,sp,-12
 1007468:	dfc00215 	stw	ra,8(sp)
 100746c:	df000115 	stw	fp,4(sp)
 1007470:	df000104 	addi	fp,sp,4
 1007474:	e13fff15 	stw	r4,-4(fp)
	alt_ic_irq_disable(IC_ID_IGNORE, (alt_u32)vector);
 1007478:	e17fff17 	ldw	r5,-4(fp)
 100747c:	0009883a 	mov	r4,zero
 1007480:	10268340 	call	1026834 <alt_ic_irq_disable>
}
 1007484:	0001883a 	nop
 1007488:	e037883a 	mov	sp,fp
 100748c:	dfc00117 	ldw	ra,4(sp)
 1007490:	df000017 	ldw	fp,0(sp)
 1007494:	dec00204 	addi	sp,sp,8
 1007498:	f800283a 	ret

0100749c <metal_nios2_irq_set_enable>:

static struct metal_irq irqs[MAX_IRQS]; /**< Linux IRQs array */

static void metal_nios2_irq_set_enable(struct metal_irq_controller *irq_cntr,
				     int irq, unsigned int state)
{
 100749c:	defffb04 	addi	sp,sp,-20
 10074a0:	dfc00415 	stw	ra,16(sp)
 10074a4:	df000315 	stw	fp,12(sp)
 10074a8:	df000304 	addi	fp,sp,12
 10074ac:	e13ffd15 	stw	r4,-12(fp)
 10074b0:	e17ffe15 	stw	r5,-8(fp)
 10074b4:	e1bfff15 	stw	r6,-4(fp)
	if (irq < irq_cntr->irq_base ||
 10074b8:	e0bffd17 	ldw	r2,-12(fp)
 10074bc:	10800017 	ldw	r2,0(r2)
 10074c0:	e0fffe17 	ldw	r3,-8(fp)
 10074c4:	18800716 	blt	r3,r2,10074e4 <metal_nios2_irq_set_enable+0x48>
	    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {
 10074c8:	e0bffd17 	ldw	r2,-12(fp)
 10074cc:	10c00017 	ldw	r3,0(r2)
 10074d0:	e0bffd17 	ldw	r2,-12(fp)
 10074d4:	10800117 	ldw	r2,4(r2)
 10074d8:	1885883a 	add	r2,r3,r2
static struct metal_irq irqs[MAX_IRQS]; /**< Linux IRQs array */

static void metal_nios2_irq_set_enable(struct metal_irq_controller *irq_cntr,
				     int irq, unsigned int state)
{
	if (irq < irq_cntr->irq_base ||
 10074dc:	e0fffe17 	ldw	r3,-8(fp)
 10074e0:	18801416 	blt	r3,r2,1007534 <metal_nios2_irq_set_enable+0x98>
	    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {
		metal_log(METAL_LOG_ERROR, "%s: invalid irq %d\n",
 10074e4:	008060f4 	movhi	r2,387
 10074e8:	10bb7104 	addi	r2,r2,-4668
 10074ec:	10800017 	ldw	r2,0(r2)
 10074f0:	108000f0 	cmpltui	r2,r2,3
 10074f4:	10001a1e 	bne	r2,zero,1007560 <metal_nios2_irq_set_enable+0xc4>
 10074f8:	008060f4 	movhi	r2,387
 10074fc:	10bb7104 	addi	r2,r2,-4668
 1007500:	10800117 	ldw	r2,4(r2)
 1007504:	10001626 	beq	r2,zero,1007560 <metal_nios2_irq_set_enable+0xc4>
 1007508:	008060f4 	movhi	r2,387
 100750c:	10bb7104 	addi	r2,r2,-4668
 1007510:	10800117 	ldw	r2,4(r2)
 1007514:	e1fffe17 	ldw	r7,-8(fp)
 1007518:	018040f4 	movhi	r6,259
 100751c:	31a56204 	addi	r6,r6,-27256
 1007520:	014040f4 	movhi	r5,259
 1007524:	29655304 	addi	r5,r5,-27316
 1007528:	010000c4 	movi	r4,3
 100752c:	103ee83a 	callr	r2
			  __func__, irq);
		return;
 1007530:	00000b06 	br	1007560 <metal_nios2_irq_set_enable+0xc4>
	} else if (state == METAL_IRQ_ENABLE) {
 1007534:	e0bfff17 	ldw	r2,-4(fp)
 1007538:	10800058 	cmpnei	r2,r2,1
 100753c:	1000041e 	bne	r2,zero,1007550 <metal_nios2_irq_set_enable+0xb4>
		sys_irq_enable((unsigned int)irq);
 1007540:	e0bffe17 	ldw	r2,-8(fp)
 1007544:	1009883a 	mov	r4,r2
 1007548:	100742c0 	call	100742c <sys_irq_enable>
 100754c:	00000506 	br	1007564 <metal_nios2_irq_set_enable+0xc8>
	} else {
		sys_irq_disable((unsigned int)irq);
 1007550:	e0bffe17 	ldw	r2,-8(fp)
 1007554:	1009883a 	mov	r4,r2
 1007558:	10074640 	call	1007464 <sys_irq_disable>
 100755c:	00000106 	br	1007564 <metal_nios2_irq_set_enable+0xc8>
{
	if (irq < irq_cntr->irq_base ||
	    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {
		metal_log(METAL_LOG_ERROR, "%s: invalid irq %d\n",
			  __func__, irq);
		return;
 1007560:	0001883a 	nop
	} else if (state == METAL_IRQ_ENABLE) {
		sys_irq_enable((unsigned int)irq);
	} else {
		sys_irq_disable((unsigned int)irq);
	}
}
 1007564:	e037883a 	mov	sp,fp
 1007568:	dfc00117 	ldw	ra,4(sp)
 100756c:	df000017 	ldw	fp,0(sp)
 1007570:	dec00204 	addi	sp,sp,8
 1007574:	f800283a 	ret

01007578 <metal_nios2_irq_isr>:

/**
 * @brief default handler
 */
void metal_nios2_irq_isr(void *arg)
{
 1007578:	defffc04 	addi	sp,sp,-16
 100757c:	dfc00315 	stw	ra,12(sp)
 1007580:	df000215 	stw	fp,8(sp)
 1007584:	df000204 	addi	fp,sp,8
 1007588:	e13fff15 	stw	r4,-4(fp)
	unsigned int vector;

	vector = (uintptr_t)arg;
 100758c:	e0bfff17 	ldw	r2,-4(fp)
 1007590:	e0bffe15 	stw	r2,-8(fp)
	if (vector >= MAX_IRQS) {
 1007594:	e0bffe17 	ldw	r2,-8(fp)
 1007598:	10800830 	cmpltui	r2,r2,32
 100759c:	10000a26 	beq	r2,zero,10075c8 <metal_nios2_irq_isr+0x50>
		return;
	}
	(void)metal_irq_handle(&irqs[vector], (int)vector);
 10075a0:	e0bffe17 	ldw	r2,-8(fp)
 10075a4:	100690fa 	slli	r3,r2,3
 10075a8:	008060f4 	movhi	r2,387
 10075ac:	10ba6604 	addi	r2,r2,-5736
 10075b0:	1885883a 	add	r2,r3,r2
 10075b4:	e0fffe17 	ldw	r3,-8(fp)
 10075b8:	180b883a 	mov	r5,r3
 10075bc:	1009883a 	mov	r4,r2
 10075c0:	10073c80 	call	10073c8 <metal_irq_handle>
 10075c4:	00000106 	br	10075cc <metal_nios2_irq_isr+0x54>
{
	unsigned int vector;

	vector = (uintptr_t)arg;
	if (vector >= MAX_IRQS) {
		return;
 10075c8:	0001883a 	nop
	}
	(void)metal_irq_handle(&irqs[vector], (int)vector);
}
 10075cc:	e037883a 	mov	sp,fp
 10075d0:	dfc00117 	ldw	ra,4(sp)
 10075d4:	df000017 	ldw	fp,0(sp)
 10075d8:	dec00204 	addi	sp,sp,8
 10075dc:	f800283a 	ret

010075e0 <metal_nios2_irq_init>:

int metal_nios2_irq_init(void)
{
 10075e0:	defffd04 	addi	sp,sp,-12
 10075e4:	dfc00215 	stw	ra,8(sp)
 10075e8:	df000115 	stw	fp,4(sp)
 10075ec:	df000104 	addi	fp,sp,4
	int ret;

	ret =  metal_irq_register_controller(&nios2_irq_cntr);
 10075f0:	010040f4 	movhi	r4,259
 10075f4:	212be404 	addi	r4,r4,-20592
 10075f8:	10087a40 	call	10087a4 <metal_irq_register_controller>
 10075fc:	e0bfff15 	stw	r2,-4(fp)
	if (ret < 0) {
 1007600:	e0bfff17 	ldw	r2,-4(fp)
 1007604:	1000140e 	bge	r2,zero,1007658 <metal_nios2_irq_init+0x78>
		metal_log(METAL_LOG_ERROR, "%s: register irq controller failed.\n",
 1007608:	008060f4 	movhi	r2,387
 100760c:	10bb7104 	addi	r2,r2,-4668
 1007610:	10800017 	ldw	r2,0(r2)
 1007614:	108000f0 	cmpltui	r2,r2,3
 1007618:	10000d1e 	bne	r2,zero,1007650 <metal_nios2_irq_init+0x70>
 100761c:	008060f4 	movhi	r2,387
 1007620:	10bb7104 	addi	r2,r2,-4668
 1007624:	10800117 	ldw	r2,4(r2)
 1007628:	10000926 	beq	r2,zero,1007650 <metal_nios2_irq_init+0x70>
 100762c:	008060f4 	movhi	r2,387
 1007630:	10bb7104 	addi	r2,r2,-4668
 1007634:	10800117 	ldw	r2,4(r2)
 1007638:	018040f4 	movhi	r6,259
 100763c:	31a56904 	addi	r6,r6,-27228
 1007640:	014040f4 	movhi	r5,259
 1007644:	29655804 	addi	r5,r5,-27296
 1007648:	010000c4 	movi	r4,3
 100764c:	103ee83a 	callr	r2
			  __func__);
		return ret;
 1007650:	e0bfff17 	ldw	r2,-4(fp)
 1007654:	00000106 	br	100765c <metal_nios2_irq_init+0x7c>
	}
	return 0;
 1007658:	0005883a 	mov	r2,zero
}
 100765c:	e037883a 	mov	sp,fp
 1007660:	dfc00117 	ldw	ra,4(sp)
 1007664:	df000017 	ldw	fp,0(sp)
 1007668:	dec00204 	addi	sp,sp,8
 100766c:	f800283a 	ret

01007670 <sys_irq_restore_enable>:

/* Mask off lower bits of addr */
//#define     ARM_AR_MEM_TTB_SECT_SIZE_MASK          (~(ARM_AR_MEM_TTB_SECT_SIZE-1UL))

void sys_irq_restore_enable(unsigned int flags)
{
 1007670:	defffd04 	addi	sp,sp,-12
 1007674:	df000215 	stw	fp,8(sp)
 1007678:	df000204 	addi	fp,sp,8
 100767c:	e13fff15 	stw	r4,-4(fp)
	alt_irq_enable_all(~flags);
 1007680:	e0bfff17 	ldw	r2,-4(fp)
 1007684:	0084303a 	nor	r2,zero,r2
 1007688:	e0bffe15 	stw	r2,-8(fp)
 100768c:	e0bffe17 	ldw	r2,-8(fp)
 1007690:	1001703a 	wrctl	status,r2
}
 1007694:	0001883a 	nop
 1007698:	e037883a 	mov	sp,fp
 100769c:	df000017 	ldw	fp,0(sp)
 10076a0:	dec00104 	addi	sp,sp,4
 10076a4:	f800283a 	ret

010076a8 <sys_irq_save_disable>:

unsigned int sys_irq_save_disable(void)
{
 10076a8:	defffd04 	addi	sp,sp,-12
 10076ac:	df000215 	stw	fp,8(sp)
 10076b0:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10076b4:	0005303a 	rdctl	r2,status
 10076b8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10076bc:	e0ffff17 	ldw	r3,-4(fp)
 10076c0:	00bfff84 	movi	r2,-2
 10076c4:	1884703a 	and	r2,r3,r2
 10076c8:	1001703a 	wrctl	status,r2
  
  return context;
 10076cc:	e0bfff17 	ldw	r2,-4(fp)
	unsigned int state;

	state = alt_irq_disable_all();
 10076d0:	e0bffe15 	stw	r2,-8(fp)

	return state;
 10076d4:	e0bffe17 	ldw	r2,-8(fp)
}
 10076d8:	e037883a 	mov	sp,fp
 10076dc:	df000017 	ldw	fp,0(sp)
 10076e0:	dec00104 	addi	sp,sp,4
 10076e4:	f800283a 	ret

010076e8 <metal_machine_cache_flush>:

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 10076e8:	defffc04 	addi	sp,sp,-16
 10076ec:	dfc00315 	stw	ra,12(sp)
 10076f0:	df000215 	stw	fp,8(sp)
 10076f4:	df000204 	addi	fp,sp,8
 10076f8:	e13ffe15 	stw	r4,-8(fp)
 10076fc:	e17fff15 	stw	r5,-4(fp)
	if (!addr && !len)
 1007700:	e0bffe17 	ldw	r2,-8(fp)
 1007704:	1000041e 	bne	r2,zero,1007718 <metal_machine_cache_flush+0x30>
 1007708:	e0bfff17 	ldw	r2,-4(fp)
 100770c:	1000021e 	bne	r2,zero,1007718 <metal_machine_cache_flush+0x30>
		alt_dcache_flush_all();
 1007710:	10265a80 	call	10265a8 <alt_dcache_flush_all>
 1007714:	00000306 	br	1007724 <metal_machine_cache_flush+0x3c>
	else
		alt_dcache_flush(addr, len);
 1007718:	e17fff17 	ldw	r5,-4(fp)
 100771c:	e13ffe17 	ldw	r4,-8(fp)
 1007720:	10265300 	call	1026530 <alt_dcache_flush>
}
 1007724:	0001883a 	nop
 1007728:	e037883a 	mov	sp,fp
 100772c:	dfc00117 	ldw	ra,4(sp)
 1007730:	df000017 	ldw	fp,0(sp)
 1007734:	dec00204 	addi	sp,sp,8
 1007738:	f800283a 	ret

0100773c <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 100773c:	defffd04 	addi	sp,sp,-12
 1007740:	df000215 	stw	fp,8(sp)
 1007744:	df000204 	addi	fp,sp,8
 1007748:	e13ffe15 	stw	r4,-8(fp)
 100774c:	e17fff15 	stw	r5,-4(fp)
	/*if (!addr && !len)
		Xil_DCacheInvalidate();
	else
		Xil_DCacheInvalidateRange((intptr_t)addr, len);*/
}
 1007750:	0001883a 	nop
 1007754:	e037883a 	mov	sp,fp
 1007758:	df000017 	ldw	fp,0(sp)
 100775c:	dec00104 	addi	sp,sp,4
 1007760:	f800283a 	ret

01007764 <metal_generic_default_poll>:

/**
 * @brief poll function until some event happens
 */
void metal_weak metal_generic_default_poll(void)
{
 1007764:	deffff04 	addi	sp,sp,-4
 1007768:	df000015 	stw	fp,0(sp)
 100776c:	d839883a 	mov	fp,sp
	asm volatile("nop");
 1007770:	0001883a 	nop
}
 1007774:	0001883a 	nop
 1007778:	e037883a 	mov	sp,fp
 100777c:	df000017 	ldw	fp,0(sp)
 1007780:	dec00104 	addi	sp,sp,4
 1007784:	f800283a 	ret

01007788 <metal_machine_io_mem_map>:

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
				      size_t size, unsigned int flags)
{
 1007788:	defffb04 	addi	sp,sp,-20
 100778c:	df000415 	stw	fp,16(sp)
 1007790:	df000404 	addi	fp,sp,16
 1007794:	e13ffc15 	stw	r4,-16(fp)
 1007798:	e17ffd15 	stw	r5,-12(fp)
 100779c:	e1bffe15 	stw	r6,-8(fp)
 10077a0:	e1ffff15 	stw	r7,-4(fp)
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 10077a4:	e0bffc17 	ldw	r2,-16(fp)
}
 10077a8:	e037883a 	mov	sp,fp
 10077ac:	df000017 	ldw	fp,0(sp)
 10077b0:	dec00104 	addi	sp,sp,4
 10077b4:	f800283a 	ret

010077b8 <metal_shmem_open>:

#include <shmem.h>

int metal_shmem_open(const char *name, size_t size,
		     struct metal_io_region **io)
{
 10077b8:	defffb04 	addi	sp,sp,-20
 10077bc:	dfc00415 	stw	ra,16(sp)
 10077c0:	df000315 	stw	fp,12(sp)
 10077c4:	df000304 	addi	fp,sp,12
 10077c8:	e13ffd15 	stw	r4,-12(fp)
 10077cc:	e17ffe15 	stw	r5,-8(fp)
 10077d0:	e1bfff15 	stw	r6,-4(fp)
	return metal_shmem_open_generic(name, size, io);
 10077d4:	e1bfff17 	ldw	r6,-4(fp)
 10077d8:	e17ffe17 	ldw	r5,-8(fp)
 10077dc:	e13ffd17 	ldw	r4,-12(fp)
 10077e0:	1008d100 	call	1008d10 <metal_shmem_open_generic>
}
 10077e4:	e037883a 	mov	sp,fp
 10077e8:	dfc00117 	ldw	ra,4(sp)
 10077ec:	df000017 	ldw	fp,0(sp)
 10077f0:	dec00204 	addi	sp,sp,8
 10077f4:	f800283a 	ret

010077f8 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 10077f8:	defffc04 	addi	sp,sp,-16
 10077fc:	dfc00315 	stw	ra,12(sp)
 1007800:	df000215 	stw	fp,8(sp)
 1007804:	df000204 	addi	fp,sp,8
 1007808:	e13fff15 	stw	r4,-4(fp)
	const TickType_t xDelay = usec / portTICK_PERIOD_MS;
 100780c:	e0bfff17 	ldw	r2,-4(fp)
 1007810:	e0bffe15 	stw	r2,-8(fp)
	vTaskDelay(xDelay);
 1007814:	e13ffe17 	ldw	r4,-8(fp)
 1007818:	1003bbc0 	call	1003bbc <vTaskDelay>
	return 0;
 100781c:	0005883a 	mov	r2,zero
}
 1007820:	e037883a 	mov	sp,fp
 1007824:	dfc00117 	ldw	ra,4(sp)
 1007828:	df000017 	ldw	fp,0(sp)
 100782c:	dec00204 	addi	sp,sp,8
 1007830:	f800283a 	ret

01007834 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 1007834:	defffd04 	addi	sp,sp,-12
 1007838:	dfc00215 	stw	ra,8(sp)
 100783c:	df000115 	stw	fp,4(sp)
 1007840:	df000104 	addi	fp,sp,4
 1007844:	e13fff15 	stw	r4,-4(fp)
	return __metal_sleep_usec(usec);
 1007848:	e13fff17 	ldw	r4,-4(fp)
 100784c:	10077f80 	call	10077f8 <__metal_sleep_usec>
}
 1007850:	e037883a 	mov	sp,fp
 1007854:	dfc00117 	ldw	ra,4(sp)
 1007858:	df000017 	ldw	fp,0(sp)
 100785c:	dec00204 	addi	sp,sp,8
 1007860:	f800283a 	ret

01007864 <sleep>:
#include <sleep.h>
#include <log.h>
#include <sys.h>

static int sleep(void)
{
 1007864:	defff404 	addi	sp,sp,-48
 1007868:	dfc00b15 	stw	ra,44(sp)
 100786c:	df000a15 	stw	fp,40(sp)
 1007870:	dc400915 	stw	r17,36(sp)
 1007874:	dc000815 	stw	r16,32(sp)
 1007878:	df000a04 	addi	fp,sp,40
	int rc;
	unsigned int usec = 3;
 100787c:	008000c4 	movi	r2,3
 1007880:	e0bff715 	stw	r2,-36(fp)
	unsigned long long tstart, tend, tdelayed;

	tstart = metal_get_timestamp();
 1007884:	1007da80 	call	1007da8 <metal_get_timestamp>
 1007888:	e0bff815 	stw	r2,-32(fp)
 100788c:	e0fff915 	stw	r3,-28(fp)
	metal_sleep_usec((usec/portTICK_PERIOD_MS));
 1007890:	e13ff717 	ldw	r4,-36(fp)
 1007894:	10078340 	call	1007834 <metal_sleep_usec>
	tend = metal_get_timestamp();
 1007898:	1007da80 	call	1007da8 <metal_get_timestamp>
 100789c:	e0bffa15 	stw	r2,-24(fp)
 10078a0:	e0fffb15 	stw	r3,-20(fp)
	tdelayed = tend - tstart;
 10078a4:	e13ffa17 	ldw	r4,-24(fp)
 10078a8:	e17ffb17 	ldw	r5,-20(fp)
 10078ac:	e1bff817 	ldw	r6,-32(fp)
 10078b0:	e1fff917 	ldw	r7,-28(fp)
 10078b4:	2185c83a 	sub	r2,r4,r6
 10078b8:	2091803a 	cmpltu	r8,r4,r2
 10078bc:	29c7c83a 	sub	r3,r5,r7
 10078c0:	1a09c83a 	sub	r4,r3,r8
 10078c4:	2007883a 	mov	r3,r4
 10078c8:	e0bffc15 	stw	r2,-16(fp)
 10078cc:	e0fffd15 	stw	r3,-12(fp)
	if (tdelayed > (usec/portTICK_PERIOD_MS))
 10078d0:	e0bff717 	ldw	r2,-36(fp)
 10078d4:	1021883a 	mov	r16,r2
 10078d8:	0023883a 	mov	r17,zero
 10078dc:	e0bffd17 	ldw	r2,-12(fp)
 10078e0:	88800436 	bltu	r17,r2,10078f4 <sleep+0x90>
 10078e4:	e0bffd17 	ldw	r2,-12(fp)
 10078e8:	1440051e 	bne	r2,r17,1007900 <sleep+0x9c>
 10078ec:	e0bffc17 	ldw	r2,-16(fp)
 10078f0:	8080032e 	bgeu	r16,r2,1007900 <sleep+0x9c>
		rc = -1;
 10078f4:	00bfffc4 	movi	r2,-1
 10078f8:	e0bff615 	stw	r2,-40(fp)
 10078fc:	00000106 	br	1007904 <sleep+0xa0>
	else
		rc = 0;
 1007900:	e03ff615 	stw	zero,-40(fp)

	return rc;
 1007904:	e0bff617 	ldw	r2,-40(fp)
}
 1007908:	e6fffe04 	addi	sp,fp,-8
 100790c:	dfc00317 	ldw	ra,12(sp)
 1007910:	df000217 	ldw	fp,8(sp)
 1007914:	dc400117 	ldw	r17,4(sp)
 1007918:	dc000017 	ldw	r16,0(sp)
 100791c:	dec00404 	addi	sp,sp,16
 1007920:	f800283a 	ret

01007924 <metal_test_sleep>:
METAL_ADD_TEST(sleep);
 1007924:	defffe04 	addi	sp,sp,-8
 1007928:	dfc00115 	stw	ra,4(sp)
 100792c:	df000015 	stw	fp,0(sp)
 1007930:	d839883a 	mov	fp,sp
 1007934:	010040f4 	movhi	r4,259
 1007938:	212bec04 	addi	r4,r4,-20560
 100793c:	1005f380 	call	1005f38 <metal_add_test_case>
 1007940:	0001883a 	nop
 1007944:	e037883a 	mov	sp,fp
 1007948:	dfc00117 	ldw	ra,4(sp)
 100794c:	df000017 	ldw	fp,0(sp)
 1007950:	dec00204 	addi	sp,sp,8
 1007954:	f800283a 	ret

01007958 <thread_wrapper>:
		metal_thread_t thread_func;
		void *arg;
	} thread_wrap_arg_t;

static void thread_wrapper(void *arg)
{
 1007958:	defffc04 	addi	sp,sp,-16
 100795c:	dfc00315 	stw	ra,12(sp)
 1007960:	df000215 	stw	fp,8(sp)
 1007964:	df000204 	addi	fp,sp,8
 1007968:	e13fff15 	stw	r4,-4(fp)
	thread_wrap_arg_t *wrap_p = (thread_wrap_arg_t *)arg;
 100796c:	e0bfff17 	ldw	r2,-4(fp)
 1007970:	e0bffe15 	stw	r2,-8(fp)
	(void)wrap_p->thread_func(wrap_p->arg);
 1007974:	e0bffe17 	ldw	r2,-8(fp)
 1007978:	10800017 	ldw	r2,0(r2)
 100797c:	e0fffe17 	ldw	r3,-8(fp)
 1007980:	18c00117 	ldw	r3,4(r3)
 1007984:	1809883a 	mov	r4,r3
 1007988:	103ee83a 	callr	r2
	vPortFree(wrap_p);
 100798c:	e13ffe17 	ldw	r4,-8(fp)
 1007990:	10011840 	call	1001184 <vPortFree>
	vTaskDelete(NULL);
 1007994:	0009883a 	mov	r4,zero
 1007998:	10039e40 	call	10039e4 <vTaskDelete>
}       
 100799c:	0001883a 	nop
 10079a0:	e037883a 	mov	sp,fp
 10079a4:	dfc00117 	ldw	ra,4(sp)
 10079a8:	df000017 	ldw	fp,0(sp)
 10079ac:	dec00204 	addi	sp,sp,8
 10079b0:	f800283a 	ret

010079b4 <metal_run>:

int metal_run(int threads, metal_thread_t child, void *arg)
{
 10079b4:	defff504 	addi	sp,sp,-44
 10079b8:	dfc00a15 	stw	ra,40(sp)
 10079bc:	df000915 	stw	fp,36(sp)
 10079c0:	dc000815 	stw	r16,32(sp)
 10079c4:	df000904 	addi	fp,sp,36
 10079c8:	e13ffc15 	stw	r4,-16(fp)
 10079cc:	e17ffd15 	stw	r5,-12(fp)
 10079d0:	e1bffe15 	stw	r6,-8(fp)
 10079d4:	d809883a 	mov	r4,sp
 10079d8:	2021883a 	mov	r16,r4
	TaskHandle_t tids[threads];
 10079dc:	e13ffc17 	ldw	r4,-16(fp)
 10079e0:	217fffc4 	addi	r5,r4,-1
 10079e4:	e17ff815 	stw	r5,-32(fp)
 10079e8:	200b883a 	mov	r5,r4
 10079ec:	2817883a 	mov	r11,r5
 10079f0:	0019883a 	mov	r12,zero
 10079f4:	580ad6fa 	srli	r5,r11,27
 10079f8:	6010917a 	slli	r8,r12,5
 10079fc:	2a10b03a 	or	r8,r5,r8
 1007a00:	580e917a 	slli	r7,r11,5
 1007a04:	200b883a 	mov	r5,r4
 1007a08:	2813883a 	mov	r9,r5
 1007a0c:	0015883a 	mov	r10,zero
 1007a10:	480ad6fa 	srli	r5,r9,27
 1007a14:	5006917a 	slli	r3,r10,5
 1007a18:	28c6b03a 	or	r3,r5,r3
 1007a1c:	4804917a 	slli	r2,r9,5
 1007a20:	2005883a 	mov	r2,r4
 1007a24:	1085883a 	add	r2,r2,r2
 1007a28:	1085883a 	add	r2,r2,r2
 1007a2c:	108000c4 	addi	r2,r2,3
 1007a30:	108000c4 	addi	r2,r2,3
 1007a34:	1004d0ba 	srli	r2,r2,2
 1007a38:	1085883a 	add	r2,r2,r2
 1007a3c:	1085883a 	add	r2,r2,r2
 1007a40:	d8b7c83a 	sub	sp,sp,r2
 1007a44:	d8800104 	addi	r2,sp,4
 1007a48:	108000c4 	addi	r2,r2,3
 1007a4c:	1004d0ba 	srli	r2,r2,2
 1007a50:	1085883a 	add	r2,r2,r2
 1007a54:	1085883a 	add	r2,r2,r2
 1007a58:	e0bff915 	stw	r2,-28(fp)
	int error, ts_created;

	error = metal_run_noblock(threads, child, arg, (void *)tids, &ts_created);
 1007a5c:	e0fff917 	ldw	r3,-28(fp)
 1007a60:	e0bffb04 	addi	r2,fp,-20
 1007a64:	d8800015 	stw	r2,0(sp)
 1007a68:	180f883a 	mov	r7,r3
 1007a6c:	e1bffe17 	ldw	r6,-8(fp)
 1007a70:	e17ffd17 	ldw	r5,-12(fp)
 1007a74:	e13ffc17 	ldw	r4,-16(fp)
 1007a78:	1007ab40 	call	1007ab4 <metal_run_noblock>
 1007a7c:	e0bffa15 	stw	r2,-24(fp)

	metal_finish_threads(ts_created, (void *)tids);
 1007a80:	e0bffb17 	ldw	r2,-20(fp)
 1007a84:	e0fff917 	ldw	r3,-28(fp)
 1007a88:	180b883a 	mov	r5,r3
 1007a8c:	1009883a 	mov	r4,r2
 1007a90:	1007cc80 	call	1007cc8 <metal_finish_threads>

	return error;
 1007a94:	e0bffa17 	ldw	r2,-24(fp)
 1007a98:	8037883a 	mov	sp,r16
}
 1007a9c:	e6ffff04 	addi	sp,fp,-4
 1007aa0:	dfc00217 	ldw	ra,8(sp)
 1007aa4:	df000117 	ldw	fp,4(sp)
 1007aa8:	dc000017 	ldw	r16,0(sp)
 1007aac:	dec00304 	addi	sp,sp,12
 1007ab0:	f800283a 	ret

01007ab4 <metal_run_noblock>:


int metal_run_noblock(int threads, metal_thread_t child,
		     void *arg, void *tids, int *threads_out)
{
 1007ab4:	defff004 	addi	sp,sp,-64
 1007ab8:	dfc00f15 	stw	ra,60(sp)
 1007abc:	df000e15 	stw	fp,56(sp)
 1007ac0:	df000e04 	addi	fp,sp,56
 1007ac4:	e13ffc15 	stw	r4,-16(fp)
 1007ac8:	e17ffd15 	stw	r5,-12(fp)
 1007acc:	e1bffe15 	stw	r6,-8(fp)
 1007ad0:	e1ffff15 	stw	r7,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 1007ad4:	e0bfff17 	ldw	r2,-4(fp)
 1007ad8:	e0bff615 	stw	r2,-40(fp)
	BaseType_t stat = pdPASS;
 1007adc:	00800044 	movi	r2,1
 1007ae0:	e0bff515 	stw	r2,-44(fp)
	char tn[15];
	thread_wrap_arg_t *wrap_p;

	if (!tids) {
 1007ae4:	e0bfff17 	ldw	r2,-4(fp)
 1007ae8:	1000121e 	bne	r2,zero,1007b34 <metal_run_noblock+0x80>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 1007aec:	008060f4 	movhi	r2,387
 1007af0:	10bb7104 	addi	r2,r2,-4668
 1007af4:	10800017 	ldw	r2,0(r2)
 1007af8:	108000f0 	cmpltui	r2,r2,3
 1007afc:	10000b1e 	bne	r2,zero,1007b2c <metal_run_noblock+0x78>
 1007b00:	008060f4 	movhi	r2,387
 1007b04:	10bb7104 	addi	r2,r2,-4668
 1007b08:	10800117 	ldw	r2,4(r2)
 1007b0c:	10000726 	beq	r2,zero,1007b2c <metal_run_noblock+0x78>
 1007b10:	008060f4 	movhi	r2,387
 1007b14:	10bb7104 	addi	r2,r2,-4668
 1007b18:	10800117 	ldw	r2,4(r2)
 1007b1c:	014040f4 	movhi	r5,259
 1007b20:	29657104 	addi	r5,r5,-27196
 1007b24:	010000c4 	movi	r4,3
 1007b28:	103ee83a 	callr	r2
		return -EINVAL;
 1007b2c:	00bffa84 	movi	r2,-22
 1007b30:	00006006 	br	1007cb4 <metal_run_noblock+0x200>
	}

	for (i = 0; i < threads; i++) {
 1007b34:	e03ff415 	stw	zero,-48(fp)
 1007b38:	00004f06 	br	1007c78 <metal_run_noblock+0x1c4>
		snprintf(tn, metal_dim(tn), "%d", i);
 1007b3c:	e0bff804 	addi	r2,fp,-32
 1007b40:	e1fff417 	ldw	r7,-48(fp)
 1007b44:	018040f4 	movhi	r6,259
 1007b48:	31a57a04 	addi	r6,r6,-27160
 1007b4c:	014003c4 	movi	r5,15
 1007b50:	1009883a 	mov	r4,r2
 1007b54:	1015c7c0 	call	1015c7c <snprintf>
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
 1007b58:	01000204 	movi	r4,8
 1007b5c:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1007b60:	e0bff715 	stw	r2,-36(fp)
		if (!wrap_p) {
 1007b64:	e0bff717 	ldw	r2,-36(fp)
 1007b68:	1000121e 	bne	r2,zero,1007bb4 <metal_run_noblock+0x100>
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
 1007b6c:	008060f4 	movhi	r2,387
 1007b70:	10bb7104 	addi	r2,r2,-4668
 1007b74:	10800017 	ldw	r2,0(r2)
 1007b78:	108000f0 	cmpltui	r2,r2,3
 1007b7c:	1000421e 	bne	r2,zero,1007c88 <metal_run_noblock+0x1d4>
 1007b80:	008060f4 	movhi	r2,387
 1007b84:	10bb7104 	addi	r2,r2,-4668
 1007b88:	10800117 	ldw	r2,4(r2)
 1007b8c:	10003e26 	beq	r2,zero,1007c88 <metal_run_noblock+0x1d4>
 1007b90:	008060f4 	movhi	r2,387
 1007b94:	10bb7104 	addi	r2,r2,-4668
 1007b98:	10800117 	ldw	r2,4(r2)
 1007b9c:	e1bff417 	ldw	r6,-48(fp)
 1007ba0:	014040f4 	movhi	r5,259
 1007ba4:	29657b04 	addi	r5,r5,-27156
 1007ba8:	010000c4 	movi	r4,3
 1007bac:	103ee83a 	callr	r2
			break;
 1007bb0:	00003506 	br	1007c88 <metal_run_noblock+0x1d4>
		}
			
		wrap_p->thread_func = child;
 1007bb4:	e0bff717 	ldw	r2,-36(fp)
 1007bb8:	e0fffd17 	ldw	r3,-12(fp)
 1007bbc:	10c00015 	stw	r3,0(r2)
		wrap_p->arg = arg;
 1007bc0:	e0bff717 	ldw	r2,-36(fp)
 1007bc4:	e0fffe17 	ldw	r3,-8(fp)
 1007bc8:	10c00115 	stw	r3,4(r2)
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 1007bcc:	e0bff417 	ldw	r2,-48(fp)
				   wrap_p, 2, &tid_p[i]);
 1007bd0:	1085883a 	add	r2,r2,r2
 1007bd4:	1085883a 	add	r2,r2,r2
 1007bd8:	1007883a 	mov	r3,r2
			break;
		}
			
		wrap_p->thread_func = child;
		wrap_p->arg = arg;
		stat = xTaskCreate(thread_wrapper, tn, TEST_THREAD_STACK_SIZE,
 1007bdc:	e0bff617 	ldw	r2,-40(fp)
 1007be0:	10c5883a 	add	r2,r2,r3
 1007be4:	e0fff804 	addi	r3,fp,-32
 1007be8:	d8800115 	stw	r2,4(sp)
 1007bec:	00800084 	movi	r2,2
 1007bf0:	d8800015 	stw	r2,0(sp)
 1007bf4:	e1fff717 	ldw	r7,-36(fp)
 1007bf8:	01802004 	movi	r6,128
 1007bfc:	180b883a 	mov	r5,r3
 1007c00:	01004034 	movhi	r4,256
 1007c04:	211e5604 	addi	r4,r4,31064
 1007c08:	100361c0 	call	100361c <xTaskCreate>
 1007c0c:	e0bff515 	stw	r2,-44(fp)
				   wrap_p, 2, &tid_p[i]);
		if (stat != pdPASS) {
 1007c10:	e0bff517 	ldw	r2,-44(fp)
 1007c14:	10800060 	cmpeqi	r2,r2,1
 1007c18:	1000141e 	bne	r2,zero,1007c6c <metal_run_noblock+0x1b8>
			metal_log(METAL_LOG_ERROR, "failed to create thread %d\n", i);
 1007c1c:	008060f4 	movhi	r2,387
 1007c20:	10bb7104 	addi	r2,r2,-4668
 1007c24:	10800017 	ldw	r2,0(r2)
 1007c28:	108000f0 	cmpltui	r2,r2,3
 1007c2c:	10000c1e 	bne	r2,zero,1007c60 <metal_run_noblock+0x1ac>
 1007c30:	008060f4 	movhi	r2,387
 1007c34:	10bb7104 	addi	r2,r2,-4668
 1007c38:	10800117 	ldw	r2,4(r2)
 1007c3c:	10000826 	beq	r2,zero,1007c60 <metal_run_noblock+0x1ac>
 1007c40:	008060f4 	movhi	r2,387
 1007c44:	10bb7104 	addi	r2,r2,-4668
 1007c48:	10800117 	ldw	r2,4(r2)
 1007c4c:	e1bff417 	ldw	r6,-48(fp)
 1007c50:	014040f4 	movhi	r5,259
 1007c54:	29658304 	addi	r5,r5,-27124
 1007c58:	010000c4 	movi	r4,3
 1007c5c:	103ee83a 	callr	r2
			vPortFree(wrap_p);
 1007c60:	e13ff717 	ldw	r4,-36(fp)
 1007c64:	10011840 	call	1001184 <vPortFree>
			break;
 1007c68:	00000806 	br	1007c8c <metal_run_noblock+0x1d8>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return -EINVAL;
	}

	for (i = 0; i < threads; i++) {
 1007c6c:	e0bff417 	ldw	r2,-48(fp)
 1007c70:	10800044 	addi	r2,r2,1
 1007c74:	e0bff415 	stw	r2,-48(fp)
 1007c78:	e0fff417 	ldw	r3,-48(fp)
 1007c7c:	e0bffc17 	ldw	r2,-16(fp)
 1007c80:	18bfae16 	blt	r3,r2,1007b3c <__alt_data_end+0xff007b3c>
 1007c84:	00000106 	br	1007c8c <metal_run_noblock+0x1d8>
		snprintf(tn, metal_dim(tn), "%d", i);
		wrap_p = pvPortMalloc(sizeof(thread_wrap_arg_t));
		if (!wrap_p) {
			metal_log(METAL_LOG_ERROR, "failed to allocate wrapper %d\n", i);
			break;
 1007c88:	0001883a 	nop
			vPortFree(wrap_p);
			break;
		}
	}

	*threads_out = i;
 1007c8c:	e0800217 	ldw	r2,8(fp)
 1007c90:	e0fff417 	ldw	r3,-48(fp)
 1007c94:	10c00015 	stw	r3,0(r2)
	return pdPASS == stat ? 0 : -ENOMEM;
 1007c98:	e0bff517 	ldw	r2,-44(fp)
 1007c9c:	10800058 	cmpnei	r2,r2,1
 1007ca0:	1000021e 	bne	r2,zero,1007cac <metal_run_noblock+0x1f8>
 1007ca4:	0005883a 	mov	r2,zero
 1007ca8:	00000206 	br	1007cb4 <metal_run_noblock+0x200>
 1007cac:	00bffd04 	movi	r2,-12
 1007cb0:	0001883a 	nop
}
 1007cb4:	e037883a 	mov	sp,fp
 1007cb8:	dfc00117 	ldw	ra,4(sp)
 1007cbc:	df000017 	ldw	fp,0(sp)
 1007cc0:	dec00204 	addi	sp,sp,8
 1007cc4:	f800283a 	ret

01007cc8 <metal_finish_threads>:


void metal_finish_threads(int threads, void *tids)
{
 1007cc8:	defff904 	addi	sp,sp,-28
 1007ccc:	dfc00615 	stw	ra,24(sp)
 1007cd0:	df000515 	stw	fp,20(sp)
 1007cd4:	df000504 	addi	fp,sp,20
 1007cd8:	e13ffe15 	stw	r4,-8(fp)
 1007cdc:	e17fff15 	stw	r5,-4(fp)
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;
 1007ce0:	e0bfff17 	ldw	r2,-4(fp)
 1007ce4:	e0bffc15 	stw	r2,-16(fp)

	if (!tids) {
 1007ce8:	e0bfff17 	ldw	r2,-4(fp)
 1007cec:	1000111e 	bne	r2,zero,1007d34 <metal_finish_threads+0x6c>
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
 1007cf0:	008060f4 	movhi	r2,387
 1007cf4:	10bb7104 	addi	r2,r2,-4668
 1007cf8:	10800017 	ldw	r2,0(r2)
 1007cfc:	108000f0 	cmpltui	r2,r2,3
 1007d00:	1000231e 	bne	r2,zero,1007d90 <metal_finish_threads+0xc8>
 1007d04:	008060f4 	movhi	r2,387
 1007d08:	10bb7104 	addi	r2,r2,-4668
 1007d0c:	10800117 	ldw	r2,4(r2)
 1007d10:	10001f26 	beq	r2,zero,1007d90 <metal_finish_threads+0xc8>
 1007d14:	008060f4 	movhi	r2,387
 1007d18:	10bb7104 	addi	r2,r2,-4668
 1007d1c:	10800117 	ldw	r2,4(r2)
 1007d20:	014040f4 	movhi	r5,259
 1007d24:	29657104 	addi	r5,r5,-27196
 1007d28:	010000c4 	movi	r4,3
 1007d2c:	103ee83a 	callr	r2
		return;
 1007d30:	00001706 	br	1007d90 <metal_finish_threads+0xc8>
	}

	for (i = 0; i < threads; i++) {
 1007d34:	e03ffb15 	stw	zero,-20(fp)
 1007d38:	00001106 	br	1007d80 <metal_finish_threads+0xb8>
		eTaskState ts;
		do {
			taskYIELD();
 1007d3c:	003b683a 	trap	0
			ts=eTaskGetState(tid_p[i]);
 1007d40:	e0bffb17 	ldw	r2,-20(fp)
 1007d44:	1085883a 	add	r2,r2,r2
 1007d48:	1085883a 	add	r2,r2,r2
 1007d4c:	1007883a 	mov	r3,r2
 1007d50:	e0bffc17 	ldw	r2,-16(fp)
 1007d54:	10c5883a 	add	r2,r2,r3
 1007d58:	10800017 	ldw	r2,0(r2)
 1007d5c:	1009883a 	mov	r4,r2
 1007d60:	1003c180 	call	1003c18 <eTaskGetState>
 1007d64:	e0bffd15 	stw	r2,-12(fp)
		} while (ts != eDeleted);
 1007d68:	e0bffd17 	ldw	r2,-12(fp)
 1007d6c:	10800118 	cmpnei	r2,r2,4
 1007d70:	103ff21e 	bne	r2,zero,1007d3c <__alt_data_end+0xff007d3c>
	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
	}

	for (i = 0; i < threads; i++) {
 1007d74:	e0bffb17 	ldw	r2,-20(fp)
 1007d78:	10800044 	addi	r2,r2,1
 1007d7c:	e0bffb15 	stw	r2,-20(fp)
 1007d80:	e0fffb17 	ldw	r3,-20(fp)
 1007d84:	e0bffe17 	ldw	r2,-8(fp)
 1007d88:	18bfec16 	blt	r3,r2,1007d3c <__alt_data_end+0xff007d3c>
 1007d8c:	00000106 	br	1007d94 <metal_finish_threads+0xcc>
	int i;
	TaskHandle_t *tid_p = (TaskHandle_t *)tids;

	if (!tids) {
		metal_log(METAL_LOG_ERROR, "invalid argument, tids is NULL.\n");
		return;
 1007d90:	0001883a 	nop
		do {
			taskYIELD();
			ts=eTaskGetState(tid_p[i]);
		} while (ts != eDeleted);
	}
}
 1007d94:	e037883a 	mov	sp,fp
 1007d98:	dfc00117 	ldw	ra,4(sp)
 1007d9c:	df000017 	ldw	fp,0(sp)
 1007da0:	dec00204 	addi	sp,sp,8
 1007da4:	f800283a 	ret

01007da8 <metal_get_timestamp>:
#include <task.h>

#include <time.h>

unsigned long long metal_get_timestamp(void)
{
 1007da8:	defffc04 	addi	sp,sp,-16
 1007dac:	dfc00315 	stw	ra,12(sp)
 1007db0:	df000215 	stw	fp,8(sp)
 1007db4:	dc400115 	stw	r17,4(sp)
 1007db8:	dc000015 	stw	r16,0(sp)
 1007dbc:	df000204 	addi	fp,sp,8
	return (unsigned long long)xTaskGetTickCount();
 1007dc0:	10044e00 	call	10044e0 <xTaskGetTickCount>
 1007dc4:	1021883a 	mov	r16,r2
 1007dc8:	0023883a 	mov	r17,zero
 1007dcc:	8007883a 	mov	r3,r16
 1007dd0:	8809883a 	mov	r4,r17
}
 1007dd4:	1805883a 	mov	r2,r3
 1007dd8:	2007883a 	mov	r3,r4
 1007ddc:	e6fffe04 	addi	sp,fp,-8
 1007de0:	dfc00317 	ldw	ra,12(sp)
 1007de4:	df000217 	ldw	fp,8(sp)
 1007de8:	dc400117 	ldw	r17,4(sp)
 1007dec:	dc000017 	ldw	r16,0(sp)
 1007df0:	dec00404 	addi	sp,sp,16
 1007df4:	f800283a 	ret

01007df8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 1007df8:	defffe04 	addi	sp,sp,-8
 1007dfc:	df000115 	stw	fp,4(sp)
 1007e00:	df000104 	addi	fp,sp,4
 1007e04:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 1007e08:	e0bfff17 	ldw	r2,-4(fp)
 1007e0c:	e0ffff17 	ldw	r3,-4(fp)
 1007e10:	10c00115 	stw	r3,4(r2)
 1007e14:	e0bfff17 	ldw	r2,-4(fp)
 1007e18:	10c00117 	ldw	r3,4(r2)
 1007e1c:	e0bfff17 	ldw	r2,-4(fp)
 1007e20:	10c00015 	stw	r3,0(r2)
}
 1007e24:	0001883a 	nop
 1007e28:	e037883a 	mov	sp,fp
 1007e2c:	df000017 	ldw	fp,0(sp)
 1007e30:	dec00104 	addi	sp,sp,4
 1007e34:	f800283a 	ret

01007e38 <metal_init>:
#include <string.h>

#include <sys.h>

int metal_init(const struct metal_init_params *params)
{
 1007e38:	defffc04 	addi	sp,sp,-16
 1007e3c:	dfc00315 	stw	ra,12(sp)
 1007e40:	df000215 	stw	fp,8(sp)
 1007e44:	df000204 	addi	fp,sp,8
 1007e48:	e13fff15 	stw	r4,-4(fp)
	int error = 0;
 1007e4c:	e03ffe15 	stw	zero,-8(fp)

	memset(&_metal, 0, sizeof(_metal));
 1007e50:	01800804 	movi	r6,32
 1007e54:	000b883a 	mov	r5,zero
 1007e58:	010060f4 	movhi	r4,387
 1007e5c:	213b7104 	addi	r4,r4,-4668
 1007e60:	101593c0 	call	101593c <memset>

	_metal.common.log_handler   = params->log_handler;
 1007e64:	e0bfff17 	ldw	r2,-4(fp)
 1007e68:	10c00017 	ldw	r3,0(r2)
 1007e6c:	008060f4 	movhi	r2,387
 1007e70:	10bb7104 	addi	r2,r2,-4668
 1007e74:	10c00115 	stw	r3,4(r2)
	_metal.common.log_level     = params->log_level;
 1007e78:	e0bfff17 	ldw	r2,-4(fp)
 1007e7c:	10c00117 	ldw	r3,4(r2)
 1007e80:	008060f4 	movhi	r2,387
 1007e84:	10bb7104 	addi	r2,r2,-4668
 1007e88:	10c00015 	stw	r3,0(r2)

	metal_list_init(&_metal.common.bus_list);
 1007e8c:	010060f4 	movhi	r4,387
 1007e90:	213b7304 	addi	r4,r4,-4660
 1007e94:	1007df80 	call	1007df8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 1007e98:	010060f4 	movhi	r4,387
 1007e9c:	213b7504 	addi	r4,r4,-4652
 1007ea0:	1007df80 	call	1007df8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 1007ea4:	010060f4 	movhi	r4,387
 1007ea8:	213b7704 	addi	r4,r4,-4644
 1007eac:	1007df80 	call	1007df8 <metal_list_init>

	error = metal_sys_init(params);
 1007eb0:	e13fff17 	ldw	r4,-4(fp)
 1007eb4:	1006f640 	call	1006f64 <metal_sys_init>
 1007eb8:	e0bffe15 	stw	r2,-8(fp)
	if (error)
 1007ebc:	e0bffe17 	ldw	r2,-8(fp)
 1007ec0:	10000226 	beq	r2,zero,1007ecc <metal_init+0x94>
		return error;
 1007ec4:	e0bffe17 	ldw	r2,-8(fp)
 1007ec8:	00000106 	br	1007ed0 <metal_init+0x98>

	return error;
 1007ecc:	e0bffe17 	ldw	r2,-8(fp)
}
 1007ed0:	e037883a 	mov	sp,fp
 1007ed4:	dfc00117 	ldw	ra,4(sp)
 1007ed8:	df000017 	ldw	fp,0(sp)
 1007edc:	dec00204 	addi	sp,sp,8
 1007ee0:	f800283a 	ret

01007ee4 <metal_finish>:

void metal_finish(void)
{
 1007ee4:	defffe04 	addi	sp,sp,-8
 1007ee8:	dfc00115 	stw	ra,4(sp)
 1007eec:	df000015 	stw	fp,0(sp)
 1007ef0:	d839883a 	mov	fp,sp
	metal_sys_finish();
 1007ef4:	1006f9c0 	call	1006f9c <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 1007ef8:	01800804 	movi	r6,32
 1007efc:	000b883a 	mov	r5,zero
 1007f00:	010060f4 	movhi	r4,387
 1007f04:	213b7104 	addi	r4,r4,-4668
 1007f08:	101593c0 	call	101593c <memset>
}
 1007f0c:	0001883a 	nop
 1007f10:	e037883a 	mov	sp,fp
 1007f14:	dfc00117 	ldw	ra,4(sp)
 1007f18:	df000017 	ldw	fp,0(sp)
 1007f1c:	dec00204 	addi	sp,sp,8
 1007f20:	f800283a 	ret

01007f24 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1007f24:	defffd04 	addi	sp,sp,-12
 1007f28:	df000215 	stw	fp,8(sp)
 1007f2c:	df000204 	addi	fp,sp,8
 1007f30:	e13ffe15 	stw	r4,-8(fp)
 1007f34:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007f38:	e0bffe17 	ldw	r2,-8(fp)
 1007f3c:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1007f40:	10bfffe0 	cmpeqi	r2,r2,-1
 1007f44:	1000091e 	bne	r2,zero,1007f6c <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1007f48:	e0bffe17 	ldw	r2,-8(fp)
 1007f4c:	10800217 	ldw	r2,8(r2)
 1007f50:	e0ffff17 	ldw	r3,-4(fp)
 1007f54:	1880052e 	bgeu	r3,r2,1007f6c <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1007f58:	e0bffe17 	ldw	r2,-8(fp)
 1007f5c:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1007f60:	e0bfff17 	ldw	r2,-4(fp)
 1007f64:	1885883a 	add	r2,r3,r2
 1007f68:	00000106 	br	1007f70 <metal_io_virt+0x4c>
 1007f6c:	0005883a 	mov	r2,zero
}
 1007f70:	e037883a 	mov	sp,fp
 1007f74:	df000017 	ldw	fp,0(sp)
 1007f78:	dec00104 	addi	sp,sp,4
 1007f7c:	f800283a 	ret

01007f80 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 1007f80:	defff204 	addi	sp,sp,-56
 1007f84:	dfc00d15 	stw	ra,52(sp)
 1007f88:	df000c15 	stw	fp,48(sp)
 1007f8c:	df000c04 	addi	fp,sp,48
 1007f90:	e13ffc15 	stw	r4,-16(fp)
 1007f94:	e17ffd15 	stw	r5,-12(fp)
 1007f98:	e1bffe15 	stw	r6,-8(fp)
 1007f9c:	e1ffff15 	stw	r7,-4(fp)
	const struct metal_io_ops nops = {
 1007fa0:	e03ff415 	stw	zero,-48(fp)
 1007fa4:	e03ff515 	stw	zero,-44(fp)
 1007fa8:	e03ff615 	stw	zero,-40(fp)
 1007fac:	e03ff715 	stw	zero,-36(fp)
 1007fb0:	e03ff815 	stw	zero,-32(fp)
 1007fb4:	e03ff915 	stw	zero,-28(fp)
 1007fb8:	e03ffa15 	stw	zero,-24(fp)
 1007fbc:	e03ffb15 	stw	zero,-20(fp)
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
 1007fc0:	e0bffc17 	ldw	r2,-16(fp)
 1007fc4:	e0fffd17 	ldw	r3,-12(fp)
 1007fc8:	10c00015 	stw	r3,0(r2)
	io->physmap = physmap;
 1007fcc:	e0bffc17 	ldw	r2,-16(fp)
 1007fd0:	e0fffe17 	ldw	r3,-8(fp)
 1007fd4:	10c00115 	stw	r3,4(r2)
	io->size = size;
 1007fd8:	e0bffc17 	ldw	r2,-16(fp)
 1007fdc:	e0ffff17 	ldw	r3,-4(fp)
 1007fe0:	10c00215 	stw	r3,8(r2)
	io->page_shift = page_shift;
 1007fe4:	e0bffc17 	ldw	r2,-16(fp)
 1007fe8:	e0c00217 	ldw	r3,8(fp)
 1007fec:	10c00315 	stw	r3,12(r2)
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 1007ff0:	e0800217 	ldw	r2,8(fp)
 1007ff4:	10800830 	cmpltui	r2,r2,32
 1007ff8:	1000041e 	bne	r2,zero,100800c <metal_io_init+0x8c>
		/* avoid overflow */
		io->page_mask = -1UL;
 1007ffc:	e0bffc17 	ldw	r2,-16(fp)
 1008000:	00ffffc4 	movi	r3,-1
 1008004:	10c00415 	stw	r3,16(r2)
 1008008:	00000606 	br	1008024 <metal_io_init+0xa4>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 100800c:	00c00044 	movi	r3,1
 1008010:	e0800217 	ldw	r2,8(fp)
 1008014:	1884983a 	sll	r2,r3,r2
 1008018:	10ffffc4 	addi	r3,r2,-1
 100801c:	e0bffc17 	ldw	r2,-16(fp)
 1008020:	10c00415 	stw	r3,16(r2)
	io->mem_flags = mem_flags;
 1008024:	e0bffc17 	ldw	r2,-16(fp)
 1008028:	e0c00317 	ldw	r3,12(fp)
 100802c:	10c00515 	stw	r3,20(r2)
	io->ops = ops ? *ops : nops;
 1008030:	e0800417 	ldw	r2,16(fp)
 1008034:	10001326 	beq	r2,zero,1008084 <metal_io_init+0x104>
 1008038:	e0bffc17 	ldw	r2,-16(fp)
 100803c:	e0c00417 	ldw	r3,16(fp)
 1008040:	19000017 	ldw	r4,0(r3)
 1008044:	11000615 	stw	r4,24(r2)
 1008048:	19000117 	ldw	r4,4(r3)
 100804c:	11000715 	stw	r4,28(r2)
 1008050:	19000217 	ldw	r4,8(r3)
 1008054:	11000815 	stw	r4,32(r2)
 1008058:	19000317 	ldw	r4,12(r3)
 100805c:	11000915 	stw	r4,36(r2)
 1008060:	19000417 	ldw	r4,16(r3)
 1008064:	11000a15 	stw	r4,40(r2)
 1008068:	19000517 	ldw	r4,20(r3)
 100806c:	11000b15 	stw	r4,44(r2)
 1008070:	19000617 	ldw	r4,24(r3)
 1008074:	11000c15 	stw	r4,48(r2)
 1008078:	18c00717 	ldw	r3,28(r3)
 100807c:	10c00d15 	stw	r3,52(r2)
 1008080:	00001106 	br	10080c8 <metal_io_init+0x148>
 1008084:	e0bffc17 	ldw	r2,-16(fp)
 1008088:	e0fff417 	ldw	r3,-48(fp)
 100808c:	10c00615 	stw	r3,24(r2)
 1008090:	e0fff517 	ldw	r3,-44(fp)
 1008094:	10c00715 	stw	r3,28(r2)
 1008098:	e0fff617 	ldw	r3,-40(fp)
 100809c:	10c00815 	stw	r3,32(r2)
 10080a0:	e0fff717 	ldw	r3,-36(fp)
 10080a4:	10c00915 	stw	r3,36(r2)
 10080a8:	e0fff817 	ldw	r3,-32(fp)
 10080ac:	10c00a15 	stw	r3,40(r2)
 10080b0:	e0fff917 	ldw	r3,-28(fp)
 10080b4:	10c00b15 	stw	r3,44(r2)
 10080b8:	e0fffa17 	ldw	r3,-24(fp)
 10080bc:	10c00c15 	stw	r3,48(r2)
 10080c0:	e0fffb17 	ldw	r3,-20(fp)
 10080c4:	10c00d15 	stw	r3,52(r2)
	metal_sys_io_mem_map(io);
 10080c8:	e13ffc17 	ldw	r4,-16(fp)
 10080cc:	1006fd00 	call	1006fd0 <metal_sys_io_mem_map>
}
 10080d0:	0001883a 	nop
 10080d4:	e037883a 	mov	sp,fp
 10080d8:	dfc00117 	ldw	ra,4(sp)
 10080dc:	df000017 	ldw	fp,0(sp)
 10080e0:	dec00204 	addi	sp,sp,8
 10080e4:	f800283a 	ret

010080e8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 10080e8:	defff604 	addi	sp,sp,-40
 10080ec:	dfc00915 	stw	ra,36(sp)
 10080f0:	df000815 	stw	fp,32(sp)
 10080f4:	df000804 	addi	fp,sp,32
 10080f8:	e13ffc15 	stw	r4,-16(fp)
 10080fc:	e17ffd15 	stw	r5,-12(fp)
 1008100:	e1bffe15 	stw	r6,-8(fp)
 1008104:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1008108:	e17ffd17 	ldw	r5,-12(fp)
 100810c:	e13ffc17 	ldw	r4,-16(fp)
 1008110:	1007f240 	call	1007f24 <metal_io_virt>
 1008114:	e0bff915 	stw	r2,-28(fp)
	unsigned char *dest = dst;
 1008118:	e0bffe17 	ldw	r2,-8(fp)
 100811c:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 1008120:	e0bffc17 	ldw	r2,-16(fp)
 1008124:	10800217 	ldw	r2,8(r2)
 1008128:	e0fffd17 	ldw	r3,-12(fp)
 100812c:	18800236 	bltu	r3,r2,1008138 <metal_io_block_read+0x50>
		return -ERANGE;
 1008130:	00bff784 	movi	r2,-34
 1008134:	00005406 	br	1008288 <metal_io_block_read+0x1a0>
	if ((offset + len) > io->size)
 1008138:	e0ffff17 	ldw	r3,-4(fp)
 100813c:	e0bffd17 	ldw	r2,-12(fp)
 1008140:	1885883a 	add	r2,r3,r2
 1008144:	e0fffc17 	ldw	r3,-16(fp)
 1008148:	18c00217 	ldw	r3,8(r3)
 100814c:	1880052e 	bgeu	r3,r2,1008164 <metal_io_block_read+0x7c>
		len = io->size - offset;
 1008150:	e0bffc17 	ldw	r2,-16(fp)
 1008154:	10c00217 	ldw	r3,8(r2)
 1008158:	e0bffd17 	ldw	r2,-12(fp)
 100815c:	1885c83a 	sub	r2,r3,r2
 1008160:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1008164:	e0bfff17 	ldw	r2,-4(fp)
 1008168:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_read) {
 100816c:	e0bffc17 	ldw	r2,-16(fp)
 1008170:	10800817 	ldw	r2,32(r2)
 1008174:	10000b26 	beq	r2,zero,10081a4 <metal_io_block_read+0xbc>
		retlen = (*io->ops.block_read)(
 1008178:	e0bffc17 	ldw	r2,-16(fp)
 100817c:	10800817 	ldw	r2,32(r2)
 1008180:	e0ffff17 	ldw	r3,-4(fp)
 1008184:	d8c00015 	stw	r3,0(sp)
 1008188:	01c00144 	movi	r7,5
 100818c:	e1bffe17 	ldw	r6,-8(fp)
 1008190:	e17ffd17 	ldw	r5,-12(fp)
 1008194:	e13ffc17 	ldw	r4,-16(fp)
 1008198:	103ee83a 	callr	r2
 100819c:	e0bffb15 	stw	r2,-20(fp)
 10081a0:	00003806 	br	1008284 <metal_io_block_read+0x19c>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 10081a4:	0001b03a 	sync
		while ( len && (
 10081a8:	00000d06 	br	10081e0 <metal_io_block_read+0xf8>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 10081ac:	e0bff917 	ldw	r2,-28(fp)
 10081b0:	10c00003 	ldbu	r3,0(r2)
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
 10081b4:	e0bffa17 	ldw	r2,-24(fp)
 10081b8:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
 10081bc:	e0bffa17 	ldw	r2,-24(fp)
 10081c0:	10800044 	addi	r2,r2,1
 10081c4:	e0bffa15 	stw	r2,-24(fp)
			ptr++;
 10081c8:	e0bff917 	ldw	r2,-28(fp)
 10081cc:	10800044 	addi	r2,r2,1
 10081d0:	e0bff915 	stw	r2,-28(fp)
			len--;
 10081d4:	e0bfff17 	ldw	r2,-4(fp)
 10081d8:	10bfffc4 	addi	r2,r2,-1
 10081dc:	e0bfff15 	stw	r2,-4(fp)
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 10081e0:	e0bfff17 	ldw	r2,-4(fp)
 10081e4:	10001426 	beq	r2,zero,1008238 <metal_io_block_read+0x150>
			((uintptr_t)dest % sizeof(int)) ||
 10081e8:	e0bffa17 	ldw	r2,-24(fp)
 10081ec:	108000cc 	andi	r2,r2,3
	if (io->ops.block_read) {
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
 10081f0:	103fee1e 	bne	r2,zero,10081ac <__alt_data_end+0xff0081ac>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
 10081f4:	e0bff917 	ldw	r2,-28(fp)
 10081f8:	108000cc 	andi	r2,r2,3
		retlen = (*io->ops.block_read)(
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
		while ( len && (
			((uintptr_t)dest % sizeof(int)) ||
 10081fc:	103feb1e 	bne	r2,zero,10081ac <__alt_data_end+0xff0081ac>
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1008200:	00000d06 	br	1008238 <metal_io_block_read+0x150>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 1008204:	e0bff917 	ldw	r2,-28(fp)
 1008208:	10c00017 	ldw	r3,0(r2)
 100820c:	e0bffa17 	ldw	r2,-24(fp)
 1008210:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1008214:	e0bffa17 	ldw	r2,-24(fp)
 1008218:	10800104 	addi	r2,r2,4
 100821c:	e0bffa15 	stw	r2,-24(fp)
					ptr += sizeof(int),
 1008220:	e0bff917 	ldw	r2,-28(fp)
 1008224:	10800104 	addi	r2,r2,4
 1008228:	e0bff915 	stw	r2,-28(fp)
					len -= sizeof(int))
 100822c:	e0bfff17 	ldw	r2,-4(fp)
 1008230:	10bfff04 	addi	r2,r2,-4
 1008234:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)ptr;
			dest++;
			ptr++;
			len--;
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 1008238:	e0bfff17 	ldw	r2,-4(fp)
 100823c:	10800108 	cmpgei	r2,r2,4
 1008240:	103ff01e 	bne	r2,zero,1008204 <__alt_data_end+0xff008204>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1008244:	00000d06 	br	100827c <metal_io_block_read+0x194>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 1008248:	e0bff917 	ldw	r2,-28(fp)
 100824c:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
 1008250:	e0bffa17 	ldw	r2,-24(fp)
 1008254:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
		for (; len != 0; dest++, ptr++, len--)
 1008258:	e0bffa17 	ldw	r2,-24(fp)
 100825c:	10800044 	addi	r2,r2,1
 1008260:	e0bffa15 	stw	r2,-24(fp)
 1008264:	e0bff917 	ldw	r2,-28(fp)
 1008268:	10800044 	addi	r2,r2,1
 100826c:	e0bff915 	stw	r2,-28(fp)
 1008270:	e0bfff17 	ldw	r2,-4(fp)
 1008274:	10bfffc4 	addi	r2,r2,-1
 1008278:	e0bfff15 	stw	r2,-4(fp)
 100827c:	e0bfff17 	ldw	r2,-4(fp)
 1008280:	103ff11e 	bne	r2,zero,1008248 <__alt_data_end+0xff008248>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
 1008284:	e0bffb17 	ldw	r2,-20(fp)
}
 1008288:	e037883a 	mov	sp,fp
 100828c:	dfc00117 	ldw	ra,4(sp)
 1008290:	df000017 	ldw	fp,0(sp)
 1008294:	dec00204 	addi	sp,sp,8
 1008298:	f800283a 	ret

0100829c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 100829c:	defff604 	addi	sp,sp,-40
 10082a0:	dfc00915 	stw	ra,36(sp)
 10082a4:	df000815 	stw	fp,32(sp)
 10082a8:	df000804 	addi	fp,sp,32
 10082ac:	e13ffc15 	stw	r4,-16(fp)
 10082b0:	e17ffd15 	stw	r5,-12(fp)
 10082b4:	e1bffe15 	stw	r6,-8(fp)
 10082b8:	e1ffff15 	stw	r7,-4(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 10082bc:	e17ffd17 	ldw	r5,-12(fp)
 10082c0:	e13ffc17 	ldw	r4,-16(fp)
 10082c4:	1007f240 	call	1007f24 <metal_io_virt>
 10082c8:	e0bff915 	stw	r2,-28(fp)
	const unsigned char *source = src;
 10082cc:	e0bffe17 	ldw	r2,-8(fp)
 10082d0:	e0bffa15 	stw	r2,-24(fp)
	int retlen;

	if (offset >= io->size)
 10082d4:	e0bffc17 	ldw	r2,-16(fp)
 10082d8:	10800217 	ldw	r2,8(r2)
 10082dc:	e0fffd17 	ldw	r3,-12(fp)
 10082e0:	18800236 	bltu	r3,r2,10082ec <metal_io_block_write+0x50>
		return -ERANGE;
 10082e4:	00bff784 	movi	r2,-34
 10082e8:	00005306 	br	1008438 <metal_io_block_write+0x19c>
	if ((offset + len) > io->size)
 10082ec:	e0ffff17 	ldw	r3,-4(fp)
 10082f0:	e0bffd17 	ldw	r2,-12(fp)
 10082f4:	1885883a 	add	r2,r3,r2
 10082f8:	e0fffc17 	ldw	r3,-16(fp)
 10082fc:	18c00217 	ldw	r3,8(r3)
 1008300:	1880052e 	bgeu	r3,r2,1008318 <metal_io_block_write+0x7c>
		len = io->size - offset;
 1008304:	e0bffc17 	ldw	r2,-16(fp)
 1008308:	10c00217 	ldw	r3,8(r2)
 100830c:	e0bffd17 	ldw	r2,-12(fp)
 1008310:	1885c83a 	sub	r2,r3,r2
 1008314:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 1008318:	e0bfff17 	ldw	r2,-4(fp)
 100831c:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_write) {
 1008320:	e0bffc17 	ldw	r2,-16(fp)
 1008324:	10800917 	ldw	r2,36(r2)
 1008328:	10001826 	beq	r2,zero,100838c <metal_io_block_write+0xf0>
		retlen = (*io->ops.block_write)(
 100832c:	e0bffc17 	ldw	r2,-16(fp)
 1008330:	10800917 	ldw	r2,36(r2)
 1008334:	e0ffff17 	ldw	r3,-4(fp)
 1008338:	d8c00015 	stw	r3,0(sp)
 100833c:	01c00144 	movi	r7,5
 1008340:	e1bffe17 	ldw	r6,-8(fp)
 1008344:	e17ffd17 	ldw	r5,-12(fp)
 1008348:	e13ffc17 	ldw	r4,-16(fp)
 100834c:	103ee83a 	callr	r2
 1008350:	e0bffb15 	stw	r2,-20(fp)
 1008354:	00003706 	br	1008434 <metal_io_block_write+0x198>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 1008358:	e0bffa17 	ldw	r2,-24(fp)
 100835c:	10c00003 	ldbu	r3,0(r2)
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
 1008360:	e0bff917 	ldw	r2,-28(fp)
 1008364:	10c00005 	stb	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
 1008368:	e0bff917 	ldw	r2,-28(fp)
 100836c:	10800044 	addi	r2,r2,1
 1008370:	e0bff915 	stw	r2,-28(fp)
			source++;
 1008374:	e0bffa17 	ldw	r2,-24(fp)
 1008378:	10800044 	addi	r2,r2,1
 100837c:	e0bffa15 	stw	r2,-24(fp)
			len--;
 1008380:	e0bfff17 	ldw	r2,-4(fp)
 1008384:	10bfffc4 	addi	r2,r2,-1
 1008388:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 100838c:	e0bfff17 	ldw	r2,-4(fp)
 1008390:	10001426 	beq	r2,zero,10083e4 <metal_io_block_write+0x148>
			((uintptr_t)ptr % sizeof(int)) ||
 1008394:	e0bff917 	ldw	r2,-28(fp)
 1008398:	108000cc 	andi	r2,r2,3
	retlen = len;
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
 100839c:	103fee1e 	bne	r2,zero,1008358 <__alt_data_end+0xff008358>
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
 10083a0:	e0bffa17 	ldw	r2,-24(fp)
 10083a4:	108000cc 	andi	r2,r2,3
	if (io->ops.block_write) {
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
 10083a8:	103feb1e 	bne	r2,zero,1008358 <__alt_data_end+0xff008358>
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10083ac:	00000d06 	br	10083e4 <metal_io_block_write+0x148>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 10083b0:	e0bffa17 	ldw	r2,-24(fp)
 10083b4:	10c00017 	ldw	r3,0(r2)
 10083b8:	e0bff917 	ldw	r2,-28(fp)
 10083bc:	10c00015 	stw	r3,0(r2)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10083c0:	e0bff917 	ldw	r2,-28(fp)
 10083c4:	10800104 	addi	r2,r2,4
 10083c8:	e0bff915 	stw	r2,-28(fp)
					source += sizeof(int),
 10083cc:	e0bffa17 	ldw	r2,-24(fp)
 10083d0:	10800104 	addi	r2,r2,4
 10083d4:	e0bffa15 	stw	r2,-24(fp)
					len -= sizeof(int))
 10083d8:	e0bfff17 	ldw	r2,-4(fp)
 10083dc:	10bfff04 	addi	r2,r2,-4
 10083e0:	e0bfff15 	stw	r2,-4(fp)
				*(const unsigned char *)source;
			ptr++;
			source++;
			len--;
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10083e4:	e0bfff17 	ldw	r2,-4(fp)
 10083e8:	10800108 	cmpgei	r2,r2,4
 10083ec:	103ff01e 	bne	r2,zero,10083b0 <__alt_data_end+0xff0083b0>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 10083f0:	00000d06 	br	1008428 <metal_io_block_write+0x18c>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 10083f4:	e0bffa17 	ldw	r2,-24(fp)
 10083f8:	10c00003 	ldbu	r3,0(r2)
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
 10083fc:	e0bff917 	ldw	r2,-28(fp)
 1008400:	10c00005 	stb	r3,0(r2)
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
 1008404:	e0bff917 	ldw	r2,-28(fp)
 1008408:	10800044 	addi	r2,r2,1
 100840c:	e0bff915 	stw	r2,-28(fp)
 1008410:	e0bffa17 	ldw	r2,-24(fp)
 1008414:	10800044 	addi	r2,r2,1
 1008418:	e0bffa15 	stw	r2,-24(fp)
 100841c:	e0bfff17 	ldw	r2,-4(fp)
 1008420:	10bfffc4 	addi	r2,r2,-1
 1008424:	e0bfff15 	stw	r2,-4(fp)
 1008428:	e0bfff17 	ldw	r2,-4(fp)
 100842c:	103ff11e 	bne	r2,zero,10083f4 <__alt_data_end+0xff0083f4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
 1008430:	0001b03a 	sync
	}
	return retlen;
 1008434:	e0bffb17 	ldw	r2,-20(fp)
}
 1008438:	e037883a 	mov	sp,fp
 100843c:	dfc00117 	ldw	ra,4(sp)
 1008440:	df000017 	ldw	fp,0(sp)
 1008444:	dec00204 	addi	sp,sp,8
 1008448:	f800283a 	ret

0100844c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 100844c:	defff504 	addi	sp,sp,-44
 1008450:	dfc00a15 	stw	ra,40(sp)
 1008454:	df000915 	stw	fp,36(sp)
 1008458:	df000904 	addi	fp,sp,36
 100845c:	e13ffc15 	stw	r4,-16(fp)
 1008460:	e17ffd15 	stw	r5,-12(fp)
 1008464:	3005883a 	mov	r2,r6
 1008468:	e1ffff15 	stw	r7,-4(fp)
 100846c:	e0bffe05 	stb	r2,-8(fp)
	unsigned char *ptr = metal_io_virt(io, offset);
 1008470:	e17ffd17 	ldw	r5,-12(fp)
 1008474:	e13ffc17 	ldw	r4,-16(fp)
 1008478:	1007f240 	call	1007f24 <metal_io_virt>
 100847c:	e0bff815 	stw	r2,-32(fp)
	int retlen = len;
 1008480:	e0bfff17 	ldw	r2,-4(fp)
 1008484:	e0bffb15 	stw	r2,-20(fp)

	if (offset >= io->size)
 1008488:	e0bffc17 	ldw	r2,-16(fp)
 100848c:	10800217 	ldw	r2,8(r2)
 1008490:	e0fffd17 	ldw	r3,-12(fp)
 1008494:	18800236 	bltu	r3,r2,10084a0 <metal_io_block_set+0x54>
		return -ERANGE;
 1008498:	00bff784 	movi	r2,-34
 100849c:	00005706 	br	10085fc <metal_io_block_set+0x1b0>
	if ((offset + len) > io->size)
 10084a0:	e0ffff17 	ldw	r3,-4(fp)
 10084a4:	e0bffd17 	ldw	r2,-12(fp)
 10084a8:	1885883a 	add	r2,r3,r2
 10084ac:	e0fffc17 	ldw	r3,-16(fp)
 10084b0:	18c00217 	ldw	r3,8(r3)
 10084b4:	1880052e 	bgeu	r3,r2,10084cc <metal_io_block_set+0x80>
		len = io->size - offset;
 10084b8:	e0bffc17 	ldw	r2,-16(fp)
 10084bc:	10c00217 	ldw	r3,8(r2)
 10084c0:	e0bffd17 	ldw	r2,-12(fp)
 10084c4:	1885c83a 	sub	r2,r3,r2
 10084c8:	e0bfff15 	stw	r2,-4(fp)
	retlen = len;
 10084cc:	e0bfff17 	ldw	r2,-4(fp)
 10084d0:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.block_set) {
 10084d4:	e0bffc17 	ldw	r2,-16(fp)
 10084d8:	10800a17 	ldw	r2,40(r2)
 10084dc:	10000b26 	beq	r2,zero,100850c <metal_io_block_set+0xc0>
		(*io->ops.block_set)(
 10084e0:	e0bffc17 	ldw	r2,-16(fp)
 10084e4:	10800a17 	ldw	r2,40(r2)
 10084e8:	e13ffe03 	ldbu	r4,-8(fp)
 10084ec:	e0ffff17 	ldw	r3,-4(fp)
 10084f0:	d8c00015 	stw	r3,0(sp)
 10084f4:	01c00144 	movi	r7,5
 10084f8:	200d883a 	mov	r6,r4
 10084fc:	e17ffd17 	ldw	r5,-12(fp)
 1008500:	e13ffc17 	ldw	r4,-16(fp)
 1008504:	103ee83a 	callr	r2
 1008508:	00003b06 	br	10085f8 <metal_io_block_set+0x1ac>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 100850c:	e0bffe03 	ldbu	r2,-8(fp)
 1008510:	e0bff915 	stw	r2,-28(fp)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 1008514:	00800044 	movi	r2,1
 1008518:	e0bffa15 	stw	r2,-24(fp)
 100851c:	00000a06 	br	1008548 <metal_io_block_set+0xfc>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
 1008520:	e0fffe03 	ldbu	r3,-8(fp)
 1008524:	e0bffa17 	ldw	r2,-24(fp)
 1008528:	100490fa 	slli	r2,r2,3
 100852c:	1884983a 	sll	r2,r3,r2
 1008530:	e0fff917 	ldw	r3,-28(fp)
 1008534:	1884b03a 	or	r2,r3,r2
 1008538:	e0bff915 	stw	r2,-28(fp)
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 100853c:	e0bffa17 	ldw	r2,-24(fp)
 1008540:	10800044 	addi	r2,r2,1
 1008544:	e0bffa15 	stw	r2,-24(fp)
 1008548:	e0bffa17 	ldw	r2,-24(fp)
 100854c:	10800130 	cmpltui	r2,r2,4
 1008550:	103ff31e 	bne	r2,zero,1008520 <__alt_data_end+0xff008520>
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008554:	00000906 	br	100857c <metal_io_block_set+0x130>
			*(unsigned char *)ptr = (unsigned char) value;
 1008558:	e0bff817 	ldw	r2,-32(fp)
 100855c:	e0fffe03 	ldbu	r3,-8(fp)
 1008560:	10c00005 	stb	r3,0(r2)
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 1008564:	e0bff817 	ldw	r2,-32(fp)
 1008568:	10800044 	addi	r2,r2,1
 100856c:	e0bff815 	stw	r2,-32(fp)
 1008570:	e0bfff17 	ldw	r2,-4(fp)
 1008574:	10bfffc4 	addi	r2,r2,-1
 1008578:	e0bfff15 	stw	r2,-4(fp)
 100857c:	e0bfff17 	ldw	r2,-4(fp)
 1008580:	10000d26 	beq	r2,zero,10085b8 <metal_io_block_set+0x16c>
 1008584:	e0bff817 	ldw	r2,-32(fp)
 1008588:	108000cc 	andi	r2,r2,3
 100858c:	103ff21e 	bne	r2,zero,1008558 <__alt_data_end+0xff008558>
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 1008590:	00000906 	br	10085b8 <metal_io_block_set+0x16c>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 1008594:	e0bff817 	ldw	r2,-32(fp)
 1008598:	e0fff917 	ldw	r3,-28(fp)
 100859c:	10c00015 	stw	r3,0(r2)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10085a0:	e0bff817 	ldw	r2,-32(fp)
 10085a4:	10800104 	addi	r2,r2,4
 10085a8:	e0bff815 	stw	r2,-32(fp)
						len -= sizeof(int))
 10085ac:	e0bfff17 	ldw	r2,-4(fp)
 10085b0:	10bfff04 	addi	r2,r2,-4
 10085b4:	e0bfff15 	stw	r2,-4(fp)
		for (i = 1; i < sizeof(int); i++)
			cint |= ((unsigned int)value << (CHAR_BIT * i));

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 10085b8:	e0bfff17 	ldw	r2,-4(fp)
 10085bc:	10800108 	cmpgei	r2,r2,4
 10085c0:	103ff41e 	bne	r2,zero,1008594 <__alt_data_end+0xff008594>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10085c4:	00000906 	br	10085ec <metal_io_block_set+0x1a0>
			*(unsigned char *)ptr = (unsigned char) value;
 10085c8:	e0bff817 	ldw	r2,-32(fp)
 10085cc:	e0fffe03 	ldbu	r3,-8(fp)
 10085d0:	10c00005 	stb	r3,0(r2)
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
 10085d4:	e0bff817 	ldw	r2,-32(fp)
 10085d8:	10800044 	addi	r2,r2,1
 10085dc:	e0bff815 	stw	r2,-32(fp)
 10085e0:	e0bfff17 	ldw	r2,-4(fp)
 10085e4:	10bfffc4 	addi	r2,r2,-1
 10085e8:	e0bfff15 	stw	r2,-4(fp)
 10085ec:	e0bfff17 	ldw	r2,-4(fp)
 10085f0:	103ff51e 	bne	r2,zero,10085c8 <__alt_data_end+0xff0085c8>
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
 10085f4:	0001b03a 	sync
	}
	return retlen;
 10085f8:	e0bffb17 	ldw	r2,-20(fp)
}
 10085fc:	e037883a 	mov	sp,fp
 1008600:	dfc00117 	ldw	ra,4(sp)
 1008604:	df000017 	ldw	fp,0(sp)
 1008608:	dec00204 	addi	sp,sp,8
 100860c:	f800283a 	ret

01008610 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1008610:	defffd04 	addi	sp,sp,-12
 1008614:	df000215 	stw	fp,8(sp)
 1008618:	df000204 	addi	fp,sp,8
 100861c:	e13ffe15 	stw	r4,-8(fp)
 1008620:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008624:	e0bffe17 	ldw	r2,-8(fp)
 1008628:	10c00117 	ldw	r3,4(r2)
 100862c:	e0bfff17 	ldw	r2,-4(fp)
 1008630:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1008634:	e0bfff17 	ldw	r2,-4(fp)
 1008638:	e0fffe17 	ldw	r3,-8(fp)
 100863c:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1008640:	e0bfff17 	ldw	r2,-4(fp)
 1008644:	10800017 	ldw	r2,0(r2)
 1008648:	e0ffff17 	ldw	r3,-4(fp)
 100864c:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1008650:	e0bfff17 	ldw	r2,-4(fp)
 1008654:	10800117 	ldw	r2,4(r2)
 1008658:	e0ffff17 	ldw	r3,-4(fp)
 100865c:	10c00015 	stw	r3,0(r2)
}
 1008660:	0001883a 	nop
 1008664:	e037883a 	mov	sp,fp
 1008668:	df000017 	ldw	fp,0(sp)
 100866c:	dec00104 	addi	sp,sp,4
 1008670:	f800283a 	ret

01008674 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1008674:	defffc04 	addi	sp,sp,-16
 1008678:	dfc00315 	stw	ra,12(sp)
 100867c:	df000215 	stw	fp,8(sp)
 1008680:	df000204 	addi	fp,sp,8
 1008684:	e13ffe15 	stw	r4,-8(fp)
 1008688:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 100868c:	e17fff17 	ldw	r5,-4(fp)
 1008690:	e13ffe17 	ldw	r4,-8(fp)
 1008694:	10086100 	call	1008610 <metal_list_add_before>
}
 1008698:	0001883a 	nop
 100869c:	e037883a 	mov	sp,fp
 10086a0:	dfc00117 	ldw	ra,4(sp)
 10086a4:	df000017 	ldw	fp,0(sp)
 10086a8:	dec00204 	addi	sp,sp,8
 10086ac:	f800283a 	ret

010086b0 <metal_irq_allocate>:

/** List of registered IRQ controller */
static METAL_DECLARE_LIST(irq_cntrs);

static int metal_irq_allocate(int irq_base, int irq_num)
{
 10086b0:	defff704 	addi	sp,sp,-36
 10086b4:	df000815 	stw	fp,32(sp)
 10086b8:	df000804 	addi	fp,sp,32
 10086bc:	e13ffe15 	stw	r4,-8(fp)
 10086c0:	e17fff15 	stw	r5,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;
	int irq_tocheck = irq_base, irq_end_tocheck;
 10086c4:	e0bffe17 	ldw	r2,-8(fp)
 10086c8:	e0bff915 	stw	r2,-28(fp)

	if (irq_num == 0) {
 10086cc:	e0bfff17 	ldw	r2,-4(fp)
 10086d0:	1000021e 	bne	r2,zero,10086dc <metal_irq_allocate+0x2c>
		return METAL_IRQ_ANY;
 10086d4:	00bfffc4 	movi	r2,-1
 10086d8:	00002e06 	br	1008794 <metal_irq_allocate+0xe4>
	}
	if (irq_tocheck == METAL_IRQ_ANY) {
 10086dc:	e0bff917 	ldw	r2,-28(fp)
 10086e0:	10bfffd8 	cmpnei	r2,r2,-1
 10086e4:	1000011e 	bne	r2,zero,10086ec <metal_irq_allocate+0x3c>
		irq_tocheck = 0;
 10086e8:	e03ff915 	stw	zero,-28(fp)
	}
	irq_end_tocheck = irq_tocheck + irq_num;
 10086ec:	e0fff917 	ldw	r3,-28(fp)
 10086f0:	e0bfff17 	ldw	r2,-4(fp)
 10086f4:	1885883a 	add	r2,r3,r2
 10086f8:	e0bffa15 	stw	r2,-24(fp)

	metal_list_for_each(&irq_cntrs, node) {
 10086fc:	d0a00717 	ldw	r2,-32740(gp)
 1008700:	e0bff815 	stw	r2,-32(fp)
 1008704:	00001f06 	br	1008784 <metal_irq_allocate+0xd4>
		int cntr_irq_base, cntr_irq_end;

		cntr = metal_container_of(node,
 1008708:	e0bff817 	ldw	r2,-32(fp)
 100870c:	10bffb04 	addi	r2,r2,-20
 1008710:	e0bffb15 	stw	r2,-20(fp)
					  struct metal_irq_controller, node);
		cntr_irq_base = cntr->irq_base;
 1008714:	e0bffb17 	ldw	r2,-20(fp)
 1008718:	10800017 	ldw	r2,0(r2)
 100871c:	e0bffc15 	stw	r2,-16(fp)
		cntr_irq_end = cntr_irq_base + cntr->irq_num;
 1008720:	e0bffb17 	ldw	r2,-20(fp)
 1008724:	10c00117 	ldw	r3,4(r2)
 1008728:	e0bffc17 	ldw	r2,-16(fp)
 100872c:	1885883a 	add	r2,r3,r2
 1008730:	e0bffd15 	stw	r2,-12(fp)
		if (irq_tocheck < cntr_irq_end &&
 1008734:	e0fff917 	ldw	r3,-28(fp)
 1008738:	e0bffd17 	ldw	r2,-12(fp)
 100873c:	18800e0e 	bge	r3,r2,1008778 <metal_irq_allocate+0xc8>
 1008740:	e0bffa17 	ldw	r2,-24(fp)
 1008744:	e0fffc17 	ldw	r3,-16(fp)
 1008748:	18800b0e 	bge	r3,r2,1008778 <metal_irq_allocate+0xc8>
		    irq_end_tocheck > cntr_irq_base) {
			if (irq_base != METAL_IRQ_ANY) {
 100874c:	e0bffe17 	ldw	r2,-8(fp)
 1008750:	10bfffe0 	cmpeqi	r2,r2,-1
 1008754:	1000021e 	bne	r2,zero,1008760 <metal_irq_allocate+0xb0>
				/* IRQ has been allocated */
				return METAL_IRQ_ANY;
 1008758:	00bfffc4 	movi	r2,-1
 100875c:	00000d06 	br	1008794 <metal_irq_allocate+0xe4>
			}
			irq_tocheck = cntr_irq_end;
 1008760:	e0bffd17 	ldw	r2,-12(fp)
 1008764:	e0bff915 	stw	r2,-28(fp)
			irq_end_tocheck = irq_tocheck + irq_num;
 1008768:	e0fff917 	ldw	r3,-28(fp)
 100876c:	e0bfff17 	ldw	r2,-4(fp)
 1008770:	1885883a 	add	r2,r3,r2
 1008774:	e0bffa15 	stw	r2,-24(fp)
	if (irq_tocheck == METAL_IRQ_ANY) {
		irq_tocheck = 0;
	}
	irq_end_tocheck = irq_tocheck + irq_num;

	metal_list_for_each(&irq_cntrs, node) {
 1008778:	e0bff817 	ldw	r2,-32(fp)
 100877c:	10800017 	ldw	r2,0(r2)
 1008780:	e0bff815 	stw	r2,-32(fp)
 1008784:	e0fff817 	ldw	r3,-32(fp)
 1008788:	d0a00704 	addi	r2,gp,-32740
 100878c:	18bfde1e 	bne	r3,r2,1008708 <__alt_data_end+0xff008708>
			}
			irq_tocheck = cntr_irq_end;
			irq_end_tocheck = irq_tocheck + irq_num;
		}
	}
	return irq_tocheck;
 1008790:	e0bff917 	ldw	r2,-28(fp)
}
 1008794:	e037883a 	mov	sp,fp
 1008798:	df000017 	ldw	fp,0(sp)
 100879c:	dec00104 	addi	sp,sp,4
 10087a0:	f800283a 	ret

010087a4 <metal_irq_register_controller>:

int metal_irq_register_controller(struct metal_irq_controller *cntr)
{
 10087a4:	defffb04 	addi	sp,sp,-20
 10087a8:	dfc00415 	stw	ra,16(sp)
 10087ac:	df000315 	stw	fp,12(sp)
 10087b0:	df000304 	addi	fp,sp,12
 10087b4:	e13fff15 	stw	r4,-4(fp)
	int irq_base;
	struct metal_list *node;

	if (cntr == NULL) {
 10087b8:	e0bfff17 	ldw	r2,-4(fp)
 10087bc:	1000021e 	bne	r2,zero,10087c8 <metal_irq_register_controller+0x24>
		return -EINVAL;
 10087c0:	00bffa84 	movi	r2,-22
 10087c4:	00002506 	br	100885c <metal_irq_register_controller+0xb8>
	}
	metal_list_for_each(&irq_cntrs, node) {
 10087c8:	d0a00717 	ldw	r2,-32740(gp)
 10087cc:	e0bffd15 	stw	r2,-12(fp)
 10087d0:	00000906 	br	10087f8 <metal_irq_register_controller+0x54>
		if (node == &cntr->node) {
 10087d4:	e0bfff17 	ldw	r2,-4(fp)
 10087d8:	10c00504 	addi	r3,r2,20
 10087dc:	e0bffd17 	ldw	r2,-12(fp)
 10087e0:	1880021e 	bne	r3,r2,10087ec <metal_irq_register_controller+0x48>
			return 0;
 10087e4:	0005883a 	mov	r2,zero
 10087e8:	00001c06 	br	100885c <metal_irq_register_controller+0xb8>
	struct metal_list *node;

	if (cntr == NULL) {
		return -EINVAL;
	}
	metal_list_for_each(&irq_cntrs, node) {
 10087ec:	e0bffd17 	ldw	r2,-12(fp)
 10087f0:	10800017 	ldw	r2,0(r2)
 10087f4:	e0bffd15 	stw	r2,-12(fp)
 10087f8:	e0fffd17 	ldw	r3,-12(fp)
 10087fc:	d0a00704 	addi	r2,gp,-32740
 1008800:	18bff41e 	bne	r3,r2,10087d4 <__alt_data_end+0xff0087d4>
		}
	}

	/* Allocate IRQ numbers which are not yet used by any IRQ
	 * controllers.*/
	irq_base = metal_irq_allocate(cntr->irq_base , cntr->irq_num);
 1008804:	e0bfff17 	ldw	r2,-4(fp)
 1008808:	10c00017 	ldw	r3,0(r2)
 100880c:	e0bfff17 	ldw	r2,-4(fp)
 1008810:	10800117 	ldw	r2,4(r2)
 1008814:	100b883a 	mov	r5,r2
 1008818:	1809883a 	mov	r4,r3
 100881c:	10086b00 	call	10086b0 <metal_irq_allocate>
 1008820:	e0bffe15 	stw	r2,-8(fp)
	if (irq_base == METAL_IRQ_ANY) {
 1008824:	e0bffe17 	ldw	r2,-8(fp)
 1008828:	10bfffd8 	cmpnei	r2,r2,-1
 100882c:	1000021e 	bne	r2,zero,1008838 <metal_irq_register_controller+0x94>
		return -EINVAL;
 1008830:	00bffa84 	movi	r2,-22
 1008834:	00000906 	br	100885c <metal_irq_register_controller+0xb8>
	}
	cntr->irq_base = irq_base;
 1008838:	e0bfff17 	ldw	r2,-4(fp)
 100883c:	e0fffe17 	ldw	r3,-8(fp)
 1008840:	10c00015 	stw	r3,0(r2)

	metal_list_add_tail(&irq_cntrs, &cntr->node);
 1008844:	e0bfff17 	ldw	r2,-4(fp)
 1008848:	10800504 	addi	r2,r2,20
 100884c:	100b883a 	mov	r5,r2
 1008850:	d1200704 	addi	r4,gp,-32740
 1008854:	10086740 	call	1008674 <metal_list_add_tail>
	return 0;
 1008858:	0005883a 	mov	r2,zero
}
 100885c:	e037883a 	mov	sp,fp
 1008860:	dfc00117 	ldw	ra,4(sp)
 1008864:	df000017 	ldw	fp,0(sp)
 1008868:	dec00204 	addi	sp,sp,8
 100886c:	f800283a 	ret

01008870 <metal_irq_get_controller>:

static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
 1008870:	defffa04 	addi	sp,sp,-24
 1008874:	df000515 	stw	fp,20(sp)
 1008878:	df000504 	addi	fp,sp,20
 100887c:	e13fff15 	stw	r4,-4(fp)
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 1008880:	d0a00717 	ldw	r2,-32740(gp)
 1008884:	e0bffb15 	stw	r2,-20(fp)
 1008888:	00001606 	br	10088e4 <metal_irq_get_controller+0x74>
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
		       metal_container_of(node, struct metal_irq_controller,
 100888c:	e0bffb17 	ldw	r2,-20(fp)
 1008890:	10bffb04 	addi	r2,r2,-20
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
		int irq_base, irq_end;

		cntr = (struct metal_irq_controller *)
 1008894:	e0bffc15 	stw	r2,-16(fp)
		       metal_container_of(node, struct metal_irq_controller,
				          node);
		irq_base = cntr->irq_base;
 1008898:	e0bffc17 	ldw	r2,-16(fp)
 100889c:	10800017 	ldw	r2,0(r2)
 10088a0:	e0bffd15 	stw	r2,-12(fp)
		irq_end = irq_base + cntr->irq_num;
 10088a4:	e0bffc17 	ldw	r2,-16(fp)
 10088a8:	10c00117 	ldw	r3,4(r2)
 10088ac:	e0bffd17 	ldw	r2,-12(fp)
 10088b0:	1885883a 	add	r2,r3,r2
 10088b4:	e0bffe15 	stw	r2,-8(fp)
		if (irq >= irq_base && irq < irq_end) {
 10088b8:	e0ffff17 	ldw	r3,-4(fp)
 10088bc:	e0bffd17 	ldw	r2,-12(fp)
 10088c0:	18800516 	blt	r3,r2,10088d8 <metal_irq_get_controller+0x68>
 10088c4:	e0ffff17 	ldw	r3,-4(fp)
 10088c8:	e0bffe17 	ldw	r2,-8(fp)
 10088cc:	1880020e 	bge	r3,r2,10088d8 <metal_irq_get_controller+0x68>
		       return cntr;
 10088d0:	e0bffc17 	ldw	r2,-16(fp)
 10088d4:	00000706 	br	10088f4 <metal_irq_get_controller+0x84>
static struct metal_irq_controller *metal_irq_get_controller(int irq)
{
	struct metal_list *node;
	struct metal_irq_controller *cntr;

	metal_list_for_each(&irq_cntrs, node) {
 10088d8:	e0bffb17 	ldw	r2,-20(fp)
 10088dc:	10800017 	ldw	r2,0(r2)
 10088e0:	e0bffb15 	stw	r2,-20(fp)
 10088e4:	e0fffb17 	ldw	r3,-20(fp)
 10088e8:	d0a00704 	addi	r2,gp,-32740
 10088ec:	18bfe71e 	bne	r3,r2,100888c <__alt_data_end+0xff00888c>
		irq_end = irq_base + cntr->irq_num;
		if (irq >= irq_base && irq < irq_end) {
		       return cntr;
		}
	}
	return NULL;
 10088f0:	0005883a 	mov	r2,zero
}
 10088f4:	e037883a 	mov	sp,fp
 10088f8:	df000017 	ldw	fp,0(sp)
 10088fc:	dec00104 	addi	sp,sp,4
 1008900:	f800283a 	ret

01008904 <_metal_irq_set_enable>:

static void _metal_irq_set_enable(int irq, unsigned int state)
{
 1008904:	defffb04 	addi	sp,sp,-20
 1008908:	dfc00415 	stw	ra,16(sp)
 100890c:	df000315 	stw	fp,12(sp)
 1008910:	df000304 	addi	fp,sp,12
 1008914:	e13ffe15 	stw	r4,-8(fp)
 1008918:	e17fff15 	stw	r5,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
 100891c:	e13ffe17 	ldw	r4,-8(fp)
 1008920:	10088700 	call	1008870 <metal_irq_get_controller>
 1008924:	e0bffd15 	stw	r2,-12(fp)
	if (cntr == NULL) {
 1008928:	e0bffd17 	ldw	r2,-12(fp)
 100892c:	10000726 	beq	r2,zero,100894c <_metal_irq_set_enable+0x48>
		return;
	}
	cntr->irq_set_enable(cntr, irq, state);
 1008930:	e0bffd17 	ldw	r2,-12(fp)
 1008934:	10800317 	ldw	r2,12(r2)
 1008938:	e1bfff17 	ldw	r6,-4(fp)
 100893c:	e17ffe17 	ldw	r5,-8(fp)
 1008940:	e13ffd17 	ldw	r4,-12(fp)
 1008944:	103ee83a 	callr	r2
 1008948:	00000106 	br	1008950 <_metal_irq_set_enable+0x4c>
{
	struct metal_irq_controller *cntr;

	cntr = metal_irq_get_controller(irq);
	if (cntr == NULL) {
		return;
 100894c:	0001883a 	nop
	}
	cntr->irq_set_enable(cntr, irq, state);
}
 1008950:	e037883a 	mov	sp,fp
 1008954:	dfc00117 	ldw	ra,4(sp)
 1008958:	df000017 	ldw	fp,0(sp)
 100895c:	dec00204 	addi	sp,sp,8
 1008960:	f800283a 	ret

01008964 <metal_irq_register>:

int metal_irq_register(int irq,
		       metal_irq_handler irq_handler,
		       void *arg)
{
 1008964:	defff904 	addi	sp,sp,-28
 1008968:	dfc00615 	stw	ra,24(sp)
 100896c:	df000515 	stw	fp,20(sp)
 1008970:	df000504 	addi	fp,sp,20
 1008974:	e13ffd15 	stw	r4,-12(fp)
 1008978:	e17ffe15 	stw	r5,-8(fp)
 100897c:	e1bfff15 	stw	r6,-4(fp)
	struct metal_irq_controller *cntr;
	struct metal_irq *irq_data;

	cntr = metal_irq_get_controller(irq);
 1008980:	e13ffd17 	ldw	r4,-12(fp)
 1008984:	10088700 	call	1008870 <metal_irq_get_controller>
 1008988:	e0bffb15 	stw	r2,-20(fp)
	if (cntr == NULL) {
 100898c:	e0bffb17 	ldw	r2,-20(fp)
 1008990:	1000021e 	bne	r2,zero,100899c <metal_irq_register+0x38>
		return -EINVAL;
 1008994:	00bffa84 	movi	r2,-22
 1008998:	00002006 	br	1008a1c <metal_irq_register+0xb8>
	}
	if (cntr->irq_register != NULL) {
 100899c:	e0bffb17 	ldw	r2,-20(fp)
 10089a0:	10800417 	ldw	r2,16(r2)
 10089a4:	10000826 	beq	r2,zero,10089c8 <metal_irq_register+0x64>
		return cntr->irq_register(cntr, irq, irq_handler, arg);
 10089a8:	e0bffb17 	ldw	r2,-20(fp)
 10089ac:	10800417 	ldw	r2,16(r2)
 10089b0:	e1ffff17 	ldw	r7,-4(fp)
 10089b4:	e1bffe17 	ldw	r6,-8(fp)
 10089b8:	e17ffd17 	ldw	r5,-12(fp)
 10089bc:	e13ffb17 	ldw	r4,-20(fp)
 10089c0:	103ee83a 	callr	r2
 10089c4:	00001506 	br	1008a1c <metal_irq_register+0xb8>
	}
	if (cntr->irqs == NULL) {
 10089c8:	e0bffb17 	ldw	r2,-20(fp)
 10089cc:	10800717 	ldw	r2,28(r2)
 10089d0:	1000021e 	bne	r2,zero,10089dc <metal_irq_register+0x78>
		return -EINVAL;
 10089d4:	00bffa84 	movi	r2,-22
 10089d8:	00001006 	br	1008a1c <metal_irq_register+0xb8>
	}
	irq_data = &cntr->irqs[irq - cntr->irq_base];
 10089dc:	e0bffb17 	ldw	r2,-20(fp)
 10089e0:	10c00717 	ldw	r3,28(r2)
 10089e4:	e0bffb17 	ldw	r2,-20(fp)
 10089e8:	10800017 	ldw	r2,0(r2)
 10089ec:	e13ffd17 	ldw	r4,-12(fp)
 10089f0:	2085c83a 	sub	r2,r4,r2
 10089f4:	100490fa 	slli	r2,r2,3
 10089f8:	1885883a 	add	r2,r3,r2
 10089fc:	e0bffc15 	stw	r2,-16(fp)
	irq_data->hd = irq_handler;
 1008a00:	e0bffc17 	ldw	r2,-16(fp)
 1008a04:	e0fffe17 	ldw	r3,-8(fp)
 1008a08:	10c00015 	stw	r3,0(r2)
	irq_data->arg = arg;
 1008a0c:	e0bffc17 	ldw	r2,-16(fp)
 1008a10:	e0ffff17 	ldw	r3,-4(fp)
 1008a14:	10c00115 	stw	r3,4(r2)
	return 0;
 1008a18:	0005883a 	mov	r2,zero
}
 1008a1c:	e037883a 	mov	sp,fp
 1008a20:	dfc00117 	ldw	ra,4(sp)
 1008a24:	df000017 	ldw	fp,0(sp)
 1008a28:	dec00204 	addi	sp,sp,8
 1008a2c:	f800283a 	ret

01008a30 <metal_irq_enable>:

void metal_irq_enable(unsigned int vector)
{
 1008a30:	defffd04 	addi	sp,sp,-12
 1008a34:	dfc00215 	stw	ra,8(sp)
 1008a38:	df000115 	stw	fp,4(sp)
 1008a3c:	df000104 	addi	fp,sp,4
 1008a40:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_ENABLE);
 1008a44:	e0bfff17 	ldw	r2,-4(fp)
 1008a48:	01400044 	movi	r5,1
 1008a4c:	1009883a 	mov	r4,r2
 1008a50:	10089040 	call	1008904 <_metal_irq_set_enable>
}
 1008a54:	0001883a 	nop
 1008a58:	e037883a 	mov	sp,fp
 1008a5c:	dfc00117 	ldw	ra,4(sp)
 1008a60:	df000017 	ldw	fp,0(sp)
 1008a64:	dec00204 	addi	sp,sp,8
 1008a68:	f800283a 	ret

01008a6c <metal_irq_disable>:

void metal_irq_disable(unsigned int vector)
{
 1008a6c:	defffd04 	addi	sp,sp,-12
 1008a70:	dfc00215 	stw	ra,8(sp)
 1008a74:	df000115 	stw	fp,4(sp)
 1008a78:	df000104 	addi	fp,sp,4
 1008a7c:	e13fff15 	stw	r4,-4(fp)
	_metal_irq_set_enable((int)vector, METAL_IRQ_DISABLE);
 1008a80:	e0bfff17 	ldw	r2,-4(fp)
 1008a84:	000b883a 	mov	r5,zero
 1008a88:	1009883a 	mov	r4,r2
 1008a8c:	10089040 	call	1008904 <_metal_irq_set_enable>
}
 1008a90:	0001883a 	nop
 1008a94:	e037883a 	mov	sp,fp
 1008a98:	dfc00117 	ldw	ra,4(sp)
 1008a9c:	df000017 	ldw	fp,0(sp)
 1008aa0:	dec00204 	addi	sp,sp,8
 1008aa4:	f800283a 	ret

01008aa8 <metal_default_log_handler>:
#include <log.h>
#include <sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 1008aa8:	defffb04 	addi	sp,sp,-20
 1008aac:	df000215 	stw	fp,8(sp)
 1008ab0:	df000204 	addi	fp,sp,8
 1008ab4:	e13ffe15 	stw	r4,-8(fp)
 1008ab8:	e17fff15 	stw	r5,-4(fp)
 1008abc:	e1800115 	stw	r6,4(fp)
 1008ac0:	e1c00215 	stw	r7,8(fp)
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 1008ac4:	0001883a 	nop
 1008ac8:	e037883a 	mov	sp,fp
 1008acc:	df000017 	ldw	fp,0(sp)
 1008ad0:	dec00304 	addi	sp,sp,12
 1008ad4:	f800283a 	ret

01008ad8 <metal_set_log_handler>:

void metal_set_log_handler(metal_log_handler handler)
{
 1008ad8:	defffe04 	addi	sp,sp,-8
 1008adc:	df000115 	stw	fp,4(sp)
 1008ae0:	df000104 	addi	fp,sp,4
 1008ae4:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_handler = handler;
 1008ae8:	008060f4 	movhi	r2,387
 1008aec:	10bb7104 	addi	r2,r2,-4668
 1008af0:	e0ffff17 	ldw	r3,-4(fp)
 1008af4:	10c00115 	stw	r3,4(r2)
}
 1008af8:	0001883a 	nop
 1008afc:	e037883a 	mov	sp,fp
 1008b00:	df000017 	ldw	fp,0(sp)
 1008b04:	dec00104 	addi	sp,sp,4
 1008b08:	f800283a 	ret

01008b0c <metal_get_log_handler>:

metal_log_handler metal_get_log_handler(void)
{
 1008b0c:	deffff04 	addi	sp,sp,-4
 1008b10:	df000015 	stw	fp,0(sp)
 1008b14:	d839883a 	mov	fp,sp
	return _metal.common.log_handler;
 1008b18:	008060f4 	movhi	r2,387
 1008b1c:	10bb7104 	addi	r2,r2,-4668
 1008b20:	10800117 	ldw	r2,4(r2)
}
 1008b24:	e037883a 	mov	sp,fp
 1008b28:	df000017 	ldw	fp,0(sp)
 1008b2c:	dec00104 	addi	sp,sp,4
 1008b30:	f800283a 	ret

01008b34 <metal_set_log_level>:

void metal_set_log_level(enum metal_log_level level)
{
 1008b34:	defffe04 	addi	sp,sp,-8
 1008b38:	df000115 	stw	fp,4(sp)
 1008b3c:	df000104 	addi	fp,sp,4
 1008b40:	e13fff15 	stw	r4,-4(fp)
	_metal.common.log_level = level;
 1008b44:	008060f4 	movhi	r2,387
 1008b48:	10bb7104 	addi	r2,r2,-4668
 1008b4c:	e0ffff17 	ldw	r3,-4(fp)
 1008b50:	10c00015 	stw	r3,0(r2)
}
 1008b54:	0001883a 	nop
 1008b58:	e037883a 	mov	sp,fp
 1008b5c:	df000017 	ldw	fp,0(sp)
 1008b60:	dec00104 	addi	sp,sp,4
 1008b64:	f800283a 	ret

01008b68 <metal_get_log_level>:

enum metal_log_level metal_get_log_level(void)
{
 1008b68:	deffff04 	addi	sp,sp,-4
 1008b6c:	df000015 	stw	fp,0(sp)
 1008b70:	d839883a 	mov	fp,sp
	return _metal.common.log_level;
 1008b74:	008060f4 	movhi	r2,387
 1008b78:	10bb7104 	addi	r2,r2,-4668
 1008b7c:	10800017 	ldw	r2,0(r2)
}
 1008b80:	e037883a 	mov	sp,fp
 1008b84:	df000017 	ldw	fp,0(sp)
 1008b88:	dec00104 	addi	sp,sp,4
 1008b8c:	f800283a 	ret

01008b90 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1008b90:	defffd04 	addi	sp,sp,-12
 1008b94:	df000215 	stw	fp,8(sp)
 1008b98:	df000204 	addi	fp,sp,8
 1008b9c:	e13ffe15 	stw	r4,-8(fp)
 1008ba0:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1008ba4:	e0bffe17 	ldw	r2,-8(fp)
 1008ba8:	10c00117 	ldw	r3,4(r2)
 1008bac:	e0bfff17 	ldw	r2,-4(fp)
 1008bb0:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1008bb4:	e0bfff17 	ldw	r2,-4(fp)
 1008bb8:	e0fffe17 	ldw	r3,-8(fp)
 1008bbc:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1008bc0:	e0bfff17 	ldw	r2,-4(fp)
 1008bc4:	10800017 	ldw	r2,0(r2)
 1008bc8:	e0ffff17 	ldw	r3,-4(fp)
 1008bcc:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1008bd0:	e0bfff17 	ldw	r2,-4(fp)
 1008bd4:	10800117 	ldw	r2,4(r2)
 1008bd8:	e0ffff17 	ldw	r3,-4(fp)
 1008bdc:	10c00015 	stw	r3,0(r2)
}
 1008be0:	0001883a 	nop
 1008be4:	e037883a 	mov	sp,fp
 1008be8:	df000017 	ldw	fp,0(sp)
 1008bec:	dec00104 	addi	sp,sp,4
 1008bf0:	f800283a 	ret

01008bf4 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1008bf4:	defffc04 	addi	sp,sp,-16
 1008bf8:	dfc00315 	stw	ra,12(sp)
 1008bfc:	df000215 	stw	fp,8(sp)
 1008c00:	df000204 	addi	fp,sp,8
 1008c04:	e13ffe15 	stw	r4,-8(fp)
 1008c08:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 1008c0c:	e17fff17 	ldw	r5,-4(fp)
 1008c10:	e13ffe17 	ldw	r4,-8(fp)
 1008c14:	1008b900 	call	1008b90 <metal_list_add_before>
}
 1008c18:	0001883a 	nop
 1008c1c:	e037883a 	mov	sp,fp
 1008c20:	dfc00117 	ldw	ra,4(sp)
 1008c24:	df000017 	ldw	fp,0(sp)
 1008c28:	dec00204 	addi	sp,sp,8
 1008c2c:	f800283a 	ret

01008c30 <metal_io_region_size>:
 *
 * @param[in]	io	I/O region handle.
 * @return	Size of I/O region.
 */
static inline size_t metal_io_region_size(struct metal_io_region *io)
{
 1008c30:	defffe04 	addi	sp,sp,-8
 1008c34:	df000115 	stw	fp,4(sp)
 1008c38:	df000104 	addi	fp,sp,4
 1008c3c:	e13fff15 	stw	r4,-4(fp)
	return io->size;
 1008c40:	e0bfff17 	ldw	r2,-4(fp)
 1008c44:	10800217 	ldw	r2,8(r2)
}
 1008c48:	e037883a 	mov	sp,fp
 1008c4c:	df000017 	ldw	fp,0(sp)
 1008c50:	dec00104 	addi	sp,sp,4
 1008c54:	f800283a 	ret

01008c58 <metal_shmem_register_generic>:
#include <shmem.h>
#include <sys.h>
#include <utilities.h>

int metal_shmem_register_generic(struct metal_generic_shmem *shmem)
{
 1008c58:	defffd04 	addi	sp,sp,-12
 1008c5c:	dfc00215 	stw	ra,8(sp)
 1008c60:	df000115 	stw	fp,4(sp)
 1008c64:	df000104 	addi	fp,sp,4
 1008c68:	e13fff15 	stw	r4,-4(fp)
	/* Make sure that we can be found. */
	metal_assert(shmem->name && strlen(shmem->name) != 0);
 1008c6c:	e0bfff17 	ldw	r2,-4(fp)
 1008c70:	10800017 	ldw	r2,0(r2)
 1008c74:	10000726 	beq	r2,zero,1008c94 <metal_shmem_register_generic+0x3c>
 1008c78:	e0bfff17 	ldw	r2,-4(fp)
 1008c7c:	10800017 	ldw	r2,0(r2)
 1008c80:	10800003 	ldbu	r2,0(r2)
 1008c84:	10803fcc 	andi	r2,r2,255
 1008c88:	1080201c 	xori	r2,r2,128
 1008c8c:	10bfe004 	addi	r2,r2,-128
 1008c90:	1000081e 	bne	r2,zero,1008cb4 <metal_shmem_register_generic+0x5c>
 1008c94:	01c040f4 	movhi	r7,259
 1008c98:	39e58a04 	addi	r7,r7,-27096
 1008c9c:	018040f4 	movhi	r6,259
 1008ca0:	31a59e04 	addi	r6,r6,-27016
 1008ca4:	01400584 	movi	r5,22
 1008ca8:	010040f4 	movhi	r4,259
 1008cac:	21259404 	addi	r4,r4,-27056
 1008cb0:	10156a00 	call	10156a0 <__assert_func>

	/* Statically registered shmem regions cannot have a destructor. */
	metal_assert(!shmem->io.ops.close);
 1008cb4:	e0bfff17 	ldw	r2,-4(fp)
 1008cb8:	10800c17 	ldw	r2,48(r2)
 1008cbc:	10000826 	beq	r2,zero,1008ce0 <metal_shmem_register_generic+0x88>
 1008cc0:	01c040f4 	movhi	r7,259
 1008cc4:	39e59804 	addi	r7,r7,-27040
 1008cc8:	018040f4 	movhi	r6,259
 1008ccc:	31a59e04 	addi	r6,r6,-27016
 1008cd0:	01400644 	movi	r5,25
 1008cd4:	010040f4 	movhi	r4,259
 1008cd8:	21259404 	addi	r4,r4,-27056
 1008cdc:	10156a00 	call	10156a0 <__assert_func>

	metal_list_add_tail(&_metal.common.generic_shmem_list,
 1008ce0:	e0bfff17 	ldw	r2,-4(fp)
 1008ce4:	10800f04 	addi	r2,r2,60
 1008ce8:	100b883a 	mov	r5,r2
 1008cec:	010060f4 	movhi	r4,387
 1008cf0:	213b7504 	addi	r4,r4,-4652
 1008cf4:	1008bf40 	call	1008bf4 <metal_list_add_tail>
			    &shmem->node);
	return 0;
 1008cf8:	0005883a 	mov	r2,zero
}
 1008cfc:	e037883a 	mov	sp,fp
 1008d00:	dfc00117 	ldw	ra,4(sp)
 1008d04:	df000017 	ldw	fp,0(sp)
 1008d08:	dec00204 	addi	sp,sp,8
 1008d0c:	f800283a 	ret

01008d10 <metal_shmem_open_generic>:

int metal_shmem_open_generic(const char *name, size_t size,
			     struct metal_io_region **result)
{
 1008d10:	defff904 	addi	sp,sp,-28
 1008d14:	dfc00615 	stw	ra,24(sp)
 1008d18:	df000515 	stw	fp,20(sp)
 1008d1c:	df000504 	addi	fp,sp,20
 1008d20:	e13ffd15 	stw	r4,-12(fp)
 1008d24:	e17ffe15 	stw	r5,-8(fp)
 1008d28:	e1bfff15 	stw	r6,-4(fp)
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008d2c:	008060f4 	movhi	r2,387
 1008d30:	10bb7104 	addi	r2,r2,-4668
 1008d34:	10800417 	ldw	r2,16(r2)
 1008d38:	e0bffb15 	stw	r2,-20(fp)
 1008d3c:	00001c06 	br	1008db0 <metal_shmem_open_generic+0xa0>
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
 1008d40:	e0bffb17 	ldw	r2,-20(fp)
 1008d44:	10bff104 	addi	r2,r2,-60
 1008d48:	e0bffc15 	stw	r2,-16(fp)
		if (strcmp(shmem->name, name) != 0)
 1008d4c:	e0bffc17 	ldw	r2,-16(fp)
 1008d50:	10800017 	ldw	r2,0(r2)
 1008d54:	e17ffd17 	ldw	r5,-12(fp)
 1008d58:	1009883a 	mov	r4,r2
 1008d5c:	1015d600 	call	1015d60 <strcmp>
 1008d60:	10000d1e 	bne	r2,zero,1008d98 <metal_shmem_open_generic+0x88>
			continue;
		if (size > metal_io_region_size(&shmem->io))
 1008d64:	e0bffc17 	ldw	r2,-16(fp)
 1008d68:	10800104 	addi	r2,r2,4
 1008d6c:	1009883a 	mov	r4,r2
 1008d70:	1008c300 	call	1008c30 <metal_io_region_size>
 1008d74:	1007883a 	mov	r3,r2
 1008d78:	e0bffe17 	ldw	r2,-8(fp)
 1008d7c:	18800836 	bltu	r3,r2,1008da0 <metal_shmem_open_generic+0x90>
			continue;
		*result = &shmem->io;
 1008d80:	e0bffc17 	ldw	r2,-16(fp)
 1008d84:	10c00104 	addi	r3,r2,4
 1008d88:	e0bfff17 	ldw	r2,-4(fp)
 1008d8c:	10c00015 	stw	r3,0(r2)
		return 0;
 1008d90:	0005883a 	mov	r2,zero
 1008d94:	00000b06 	br	1008dc4 <metal_shmem_open_generic+0xb4>
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
		shmem = metal_container_of(node, struct metal_generic_shmem, node);
		if (strcmp(shmem->name, name) != 0)
			continue;
 1008d98:	0001883a 	nop
 1008d9c:	00000106 	br	1008da4 <metal_shmem_open_generic+0x94>
		if (size > metal_io_region_size(&shmem->io))
			continue;
 1008da0:	0001883a 	nop
			     struct metal_io_region **result)
{
	struct metal_generic_shmem *shmem;
	struct metal_list *node;

	metal_list_for_each(&_metal.common.generic_shmem_list, node) {
 1008da4:	e0bffb17 	ldw	r2,-20(fp)
 1008da8:	10800017 	ldw	r2,0(r2)
 1008dac:	e0bffb15 	stw	r2,-20(fp)
 1008db0:	e0fffb17 	ldw	r3,-20(fp)
 1008db4:	008060f4 	movhi	r2,387
 1008db8:	10bb7504 	addi	r2,r2,-4652
 1008dbc:	18bfe01e 	bne	r3,r2,1008d40 <__alt_data_end+0xff008d40>
			continue;
		*result = &shmem->io;
		return 0;
	}

	return -ENOENT;
 1008dc0:	00bfff84 	movi	r2,-2
}
 1008dc4:	e037883a 	mov	sp,fp
 1008dc8:	dfc00117 	ldw	ra,4(sp)
 1008dcc:	df000017 	ldw	fp,0(sp)
 1008dd0:	dec00204 	addi	sp,sp,8
 1008dd4:	f800283a 	ret

01008dd8 <metal_irq_handle>:
 * @param[in] irq IRQ id which will be passed to handler
 * @return IRQ handler status
 */
static inline
int metal_irq_handle(struct metal_irq *irq_data, int irq)
{
 1008dd8:	defffc04 	addi	sp,sp,-16
 1008ddc:	dfc00315 	stw	ra,12(sp)
 1008de0:	df000215 	stw	fp,8(sp)
 1008de4:	df000204 	addi	fp,sp,8
 1008de8:	e13ffe15 	stw	r4,-8(fp)
 1008dec:	e17fff15 	stw	r5,-4(fp)
	if (irq_data != NULL && irq_data->hd != NULL) {
 1008df0:	e0bffe17 	ldw	r2,-8(fp)
 1008df4:	10000b26 	beq	r2,zero,1008e24 <metal_irq_handle+0x4c>
 1008df8:	e0bffe17 	ldw	r2,-8(fp)
 1008dfc:	10800017 	ldw	r2,0(r2)
 1008e00:	10000826 	beq	r2,zero,1008e24 <metal_irq_handle+0x4c>
		return irq_data->hd(irq, irq_data->arg);
 1008e04:	e0bffe17 	ldw	r2,-8(fp)
 1008e08:	10800017 	ldw	r2,0(r2)
 1008e0c:	e0fffe17 	ldw	r3,-8(fp)
 1008e10:	18c00117 	ldw	r3,4(r3)
 1008e14:	180b883a 	mov	r5,r3
 1008e18:	e13fff17 	ldw	r4,-4(fp)
 1008e1c:	103ee83a 	callr	r2
 1008e20:	00000106 	br	1008e28 <metal_irq_handle+0x50>
	} else {
		return METAL_IRQ_NOT_HANDLED;
 1008e24:	0005883a 	mov	r2,zero
	}
}
 1008e28:	e037883a 	mov	sp,fp
 1008e2c:	dfc00117 	ldw	ra,4(sp)
 1008e30:	df000017 	ldw	fp,0(sp)
 1008e34:	dec00204 	addi	sp,sp,8
 1008e38:	f800283a 	ret

01008e3c <metal_softirq_set_enable>:
static int metal_softirq_avail = 0;
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
 1008e3c:	defffc04 	addi	sp,sp,-16
 1008e40:	df000315 	stw	fp,12(sp)
 1008e44:	df000304 	addi	fp,sp,12
 1008e48:	e13ffd15 	stw	r4,-12(fp)
 1008e4c:	e17ffe15 	stw	r5,-8(fp)
 1008e50:	e1bfff15 	stw	r6,-4(fp)
	if (irq < cntr->irq_base ||
 1008e54:	e0bffd17 	ldw	r2,-12(fp)
 1008e58:	10800017 	ldw	r2,0(r2)
 1008e5c:	e0fffe17 	ldw	r3,-8(fp)
 1008e60:	18801e16 	blt	r3,r2,1008edc <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008e64:	e0bffd17 	ldw	r2,-12(fp)
 1008e68:	10c00017 	ldw	r3,0(r2)
 1008e6c:	e0bffd17 	ldw	r2,-12(fp)
 1008e70:	10800117 	ldw	r2,4(r2)
 1008e74:	1885883a 	add	r2,r3,r2
METAL_SOFTIRQ_ARRAY_DECLARE(METAL_SOFTIRQ_NUM)

static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
 1008e78:	e0fffe17 	ldw	r3,-8(fp)
 1008e7c:	1880170e 	bge	r3,r2,1008edc <metal_softirq_set_enable+0xa0>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 1008e80:	e0bffd17 	ldw	r2,-12(fp)
 1008e84:	10800017 	ldw	r2,0(r2)
 1008e88:	e0fffe17 	ldw	r3,-8(fp)
 1008e8c:	1885c83a 	sub	r2,r3,r2
 1008e90:	e0bffe15 	stw	r2,-8(fp)
	if (enable ==  METAL_IRQ_ENABLE) {
 1008e94:	e0bfff17 	ldw	r2,-4(fp)
 1008e98:	10800058 	cmpnei	r2,r2,1
 1008e9c:	1000081e 	bne	r2,zero,1008ec0 <metal_softirq_set_enable+0x84>
		atomic_store(&metal_softirq_enabled[irq], 1);
 1008ea0:	008060f4 	movhi	r2,387
 1008ea4:	10bb3604 	addi	r2,r2,-4904
 1008ea8:	e0fffe17 	ldw	r3,-8(fp)
 1008eac:	10c5883a 	add	r2,r2,r3
 1008eb0:	00c00044 	movi	r3,1
 1008eb4:	10c00005 	stb	r3,0(r2)
 1008eb8:	0001b03a 	sync
 1008ebc:	00000806 	br	1008ee0 <metal_softirq_set_enable+0xa4>
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
 1008ec0:	008060f4 	movhi	r2,387
 1008ec4:	10bb3604 	addi	r2,r2,-4904
 1008ec8:	e0fffe17 	ldw	r3,-8(fp)
 1008ecc:	10c5883a 	add	r2,r2,r3
 1008ed0:	10000005 	stb	zero,0(r2)
 1008ed4:	0001b03a 	sync
 1008ed8:	00000106 	br	1008ee0 <metal_softirq_set_enable+0xa4>
static void metal_softirq_set_enable(struct metal_irq_controller *cntr,
				     int irq, unsigned int enable)
{
	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 1008edc:	0001883a 	nop
	if (enable ==  METAL_IRQ_ENABLE) {
		atomic_store(&metal_softirq_enabled[irq], 1);
	} else {
		atomic_store(&metal_softirq_enabled[irq], 0);
	}
}
 1008ee0:	e037883a 	mov	sp,fp
 1008ee4:	df000017 	ldw	fp,0(sp)
 1008ee8:	dec00104 	addi	sp,sp,4
 1008eec:	f800283a 	ret

01008ef0 <metal_softirq_set>:
				    NULL,
				    metal_softirq_set_enable, NULL,
				    metal_softirqs)

void metal_softirq_set(int irq)
{
 1008ef0:	defffd04 	addi	sp,sp,-12
 1008ef4:	df000215 	stw	fp,8(sp)
 1008ef8:	df000204 	addi	fp,sp,8
 1008efc:	e13fff15 	stw	r4,-4(fp)
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;
 1008f00:	008040f4 	movhi	r2,259
 1008f04:	10abf004 	addi	r2,r2,-20544
 1008f08:	e0bffe15 	stw	r2,-8(fp)

	if (irq < cntr->irq_base ||
 1008f0c:	e0bffe17 	ldw	r2,-8(fp)
 1008f10:	10800017 	ldw	r2,0(r2)
 1008f14:	e0ffff17 	ldw	r3,-4(fp)
 1008f18:	18801416 	blt	r3,r2,1008f6c <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
 1008f1c:	e0bffe17 	ldw	r2,-8(fp)
 1008f20:	10c00017 	ldw	r3,0(r2)
 1008f24:	e0bffe17 	ldw	r2,-8(fp)
 1008f28:	10800117 	ldw	r2,4(r2)
 1008f2c:	1885883a 	add	r2,r3,r2
{
	struct metal_irq_controller *cntr;

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
 1008f30:	e0ffff17 	ldw	r3,-4(fp)
 1008f34:	18800d0e 	bge	r3,r2,1008f6c <metal_softirq_set+0x7c>
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
	}

	irq -= cntr->irq_base;
 1008f38:	e0bffe17 	ldw	r2,-8(fp)
 1008f3c:	10800017 	ldw	r2,0(r2)
 1008f40:	e0ffff17 	ldw	r3,-4(fp)
 1008f44:	1885c83a 	sub	r2,r3,r2
 1008f48:	e0bfff15 	stw	r2,-4(fp)
	atomic_store(&metal_softirq_pending[irq], 1);
 1008f4c:	008060f4 	movhi	r2,387
 1008f50:	10bb2604 	addi	r2,r2,-4968
 1008f54:	e0ffff17 	ldw	r3,-4(fp)
 1008f58:	10c5883a 	add	r2,r2,r3
 1008f5c:	00c00044 	movi	r3,1
 1008f60:	10c00005 	stb	r3,0(r2)
 1008f64:	0001b03a 	sync
 1008f68:	00000106 	br	1008f70 <metal_softirq_set+0x80>

	cntr = &metal_softirq_cntr;

	if (irq < cntr->irq_base ||
	    irq >= (cntr->irq_base + cntr->irq_num)) {
		return;
 1008f6c:	0001883a 	nop
	}

	irq -= cntr->irq_base;
	atomic_store(&metal_softirq_pending[irq], 1);
}
 1008f70:	e037883a 	mov	sp,fp
 1008f74:	df000017 	ldw	fp,0(sp)
 1008f78:	dec00104 	addi	sp,sp,4
 1008f7c:	f800283a 	ret

01008f80 <metal_softirq_init>:

int metal_softirq_init()
{
 1008f80:	defffe04 	addi	sp,sp,-8
 1008f84:	dfc00115 	stw	ra,4(sp)
 1008f88:	df000015 	stw	fp,0(sp)
 1008f8c:	d839883a 	mov	fp,sp
	return metal_irq_register_controller(&metal_softirq_cntr);
 1008f90:	010040f4 	movhi	r4,259
 1008f94:	212bf004 	addi	r4,r4,-20544
 1008f98:	10087a40 	call	10087a4 <metal_irq_register_controller>
}
 1008f9c:	e037883a 	mov	sp,fp
 1008fa0:	dfc00117 	ldw	ra,4(sp)
 1008fa4:	df000017 	ldw	fp,0(sp)
 1008fa8:	dec00204 	addi	sp,sp,8
 1008fac:	f800283a 	ret

01008fb0 <metal_softirq_allocate>:

int metal_softirq_allocate(int num)
{
 1008fb0:	defffc04 	addi	sp,sp,-16
 1008fb4:	dfc00315 	stw	ra,12(sp)
 1008fb8:	df000215 	stw	fp,8(sp)
 1008fbc:	df000204 	addi	fp,sp,8
 1008fc0:	e13fff15 	stw	r4,-4(fp)
	int irq_base;

	if ((metal_softirq_avail + num) >= metal_softirq_num) {
 1008fc4:	d0e75117 	ldw	r3,-25276(gp)
 1008fc8:	e0bfff17 	ldw	r2,-4(fp)
 1008fcc:	1887883a 	add	r3,r3,r2
 1008fd0:	00801004 	movi	r2,64
 1008fd4:	18801316 	blt	r3,r2,1009024 <metal_softirq_allocate+0x74>
		metal_log(METAL_LOG_ERROR, "No %d available soft irqs.\r\n",
 1008fd8:	008060f4 	movhi	r2,387
 1008fdc:	10bb7104 	addi	r2,r2,-4668
 1008fe0:	10800017 	ldw	r2,0(r2)
 1008fe4:	108000f0 	cmpltui	r2,r2,3
 1008fe8:	10000c1e 	bne	r2,zero,100901c <metal_softirq_allocate+0x6c>
 1008fec:	008060f4 	movhi	r2,387
 1008ff0:	10bb7104 	addi	r2,r2,-4668
 1008ff4:	10800117 	ldw	r2,4(r2)
 1008ff8:	10000826 	beq	r2,zero,100901c <metal_softirq_allocate+0x6c>
 1008ffc:	008060f4 	movhi	r2,387
 1009000:	10bb7104 	addi	r2,r2,-4668
 1009004:	10800117 	ldw	r2,4(r2)
 1009008:	e1bfff17 	ldw	r6,-4(fp)
 100900c:	014040f4 	movhi	r5,259
 1009010:	2965a604 	addi	r5,r5,-26984
 1009014:	010000c4 	movi	r4,3
 1009018:	103ee83a 	callr	r2
			  num);
		return -EINVAL;
 100901c:	00bffa84 	movi	r2,-22
 1009020:	00000d06 	br	1009058 <metal_softirq_allocate+0xa8>
	}
	irq_base = metal_softirq_avail;
 1009024:	d0a75117 	ldw	r2,-25276(gp)
 1009028:	e0bffe15 	stw	r2,-8(fp)
	irq_base += metal_softirq_cntr.irq_base;
 100902c:	008040f4 	movhi	r2,259
 1009030:	10abf004 	addi	r2,r2,-20544
 1009034:	10800017 	ldw	r2,0(r2)
 1009038:	e0fffe17 	ldw	r3,-8(fp)
 100903c:	1885883a 	add	r2,r3,r2
 1009040:	e0bffe15 	stw	r2,-8(fp)
	metal_softirq_avail += num;
 1009044:	d0e75117 	ldw	r3,-25276(gp)
 1009048:	e0bfff17 	ldw	r2,-4(fp)
 100904c:	1885883a 	add	r2,r3,r2
 1009050:	d0a75115 	stw	r2,-25276(gp)
	return irq_base;
 1009054:	e0bffe17 	ldw	r2,-8(fp)
}
 1009058:	e037883a 	mov	sp,fp
 100905c:	dfc00117 	ldw	ra,4(sp)
 1009060:	df000017 	ldw	fp,0(sp)
 1009064:	dec00204 	addi	sp,sp,8
 1009068:	f800283a 	ret

0100906c <metal_softirq_dispatch>:

void metal_softirq_dispatch()
{
 100906c:	defff604 	addi	sp,sp,-40
 1009070:	dfc00915 	stw	ra,36(sp)
 1009074:	df000815 	stw	fp,32(sp)
 1009078:	df000804 	addi	fp,sp,32
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 100907c:	e03ff815 	stw	zero,-32(fp)
 1009080:	00003f06 	br	1009180 <metal_softirq_dispatch+0x114>
		struct metal_irq *irq;
		char is_pending = 1;
 1009084:	00800044 	movi	r2,1
 1009088:	e0bfff05 	stb	r2,-4(fp)

		atomic_char val1;
		atomic_char val2;

		atomic_mutex_acquire();
 100908c:	1005d680 	call	1005d68 <atomic_mutex_acquire>
		val1 = atomic_load(&metal_softirq_enabled[i]);
 1009090:	0001b03a 	sync
 1009094:	008060f4 	movhi	r2,387
 1009098:	10bb3604 	addi	r2,r2,-4904
 100909c:	e0fff817 	ldw	r3,-32(fp)
 10090a0:	10c5883a 	add	r2,r2,r3
 10090a4:	10800003 	ldbu	r2,0(r2)
 10090a8:	e0bffa45 	stb	r2,-23(fp)
		val2 = atomic_compare_exchange_strong(&metal_softirq_pending[i],
 10090ac:	e0fff817 	ldw	r3,-32(fp)
 10090b0:	008060f4 	movhi	r2,387
 10090b4:	10bb2604 	addi	r2,r2,-4968
 10090b8:	1885883a 	add	r2,r3,r2
 10090bc:	e0bffb15 	stw	r2,-20(fp)
 10090c0:	e0bfff04 	addi	r2,fp,-4
 10090c4:	e0bffc15 	stw	r2,-16(fp)
 10090c8:	e0bffc17 	ldw	r2,-16(fp)
 10090cc:	10800003 	ldbu	r2,0(r2)
 10090d0:	e0bffd05 	stb	r2,-12(fp)
 10090d4:	e03ffd45 	stb	zero,-11(fp)
 10090d8:	e0bff917 	ldw	r2,-28(fp)
 10090dc:	10800003 	ldbu	r2,0(r2)
 10090e0:	10c03fcc 	andi	r3,r2,255
 10090e4:	18c0201c 	xori	r3,r3,128
 10090e8:	18ffe004 	addi	r3,r3,-128
 10090ec:	e0bffa07 	ldb	r2,-24(fp)
 10090f0:	1880031e 	bne	r3,r2,1009100 <metal_softirq_dispatch+0x94>
 10090f4:	e0bff917 	ldw	r2,-28(fp)
 10090f8:	e0fffd43 	ldbu	r3,-11(fp)
 10090fc:	10c00005 	stb	r3,0(r2)
 1009100:	e0bffa03 	ldbu	r2,-24(fp)
 1009104:	e0bffd85 	stb	r2,-10(fp)
 1009108:	e0bffc17 	ldw	r2,-16(fp)
 100910c:	e0fffd83 	ldbu	r3,-10(fp)
 1009110:	10c00005 	stb	r3,0(r2)
 1009114:	e0fffd87 	ldb	r3,-10(fp)
 1009118:	e0bffd07 	ldb	r2,-12(fp)
 100911c:	1885003a 	cmpeq	r2,r3,r2
 1009120:	10803fcc 	andi	r2,r2,255
 1009124:	e0bffdc5 	stb	r2,-9(fp)
				   &is_pending, 0);
		atomic_mutex_release();
 1009128:	1005d9c0 	call	1005d9c <atomic_mutex_release>

		if (val1 != 0 && val2) {
 100912c:	e0bffa47 	ldb	r2,-23(fp)
 1009130:	10001026 	beq	r2,zero,1009174 <metal_softirq_dispatch+0x108>
 1009134:	e0bffdc7 	ldb	r2,-9(fp)
 1009138:	10000e26 	beq	r2,zero,1009174 <metal_softirq_dispatch+0x108>
			irq = &metal_softirqs[i];
 100913c:	e0bff817 	ldw	r2,-32(fp)
 1009140:	100690fa 	slli	r3,r2,3
 1009144:	008060f4 	movhi	r2,387
 1009148:	10baa604 	addi	r2,r2,-5480
 100914c:	1885883a 	add	r2,r3,r2
 1009150:	e0bffe15 	stw	r2,-8(fp)
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
 1009154:	008040f4 	movhi	r2,259
 1009158:	10abf004 	addi	r2,r2,-20544
 100915c:	10c00017 	ldw	r3,0(r2)
				   &is_pending, 0);
		atomic_mutex_release();

		if (val1 != 0 && val2) {
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
 1009160:	e0bff817 	ldw	r2,-32(fp)
 1009164:	1885883a 	add	r2,r3,r2
 1009168:	100b883a 	mov	r5,r2
 100916c:	e13ffe17 	ldw	r4,-8(fp)
 1009170:	1008dd80 	call	1008dd8 <metal_irq_handle>

void metal_softirq_dispatch()
{
	int i;

	for (i = 0; i < metal_softirq_num; i++) {
 1009174:	e0bff817 	ldw	r2,-32(fp)
 1009178:	10800044 	addi	r2,r2,1
 100917c:	e0bff815 	stw	r2,-32(fp)
 1009180:	00801004 	movi	r2,64
 1009184:	e0fff817 	ldw	r3,-32(fp)
 1009188:	18bfbe16 	blt	r3,r2,1009084 <__alt_data_end+0xff009084>
			irq = &metal_softirqs[i];
			(void)metal_irq_handle(irq,
					       i + metal_softirq_cntr.irq_base);
		}
	}
}
 100918c:	0001883a 	nop
 1009190:	e037883a 	mov	sp,fp
 1009194:	dfc00117 	ldw	ra,4(sp)
 1009198:	df000017 	ldw	fp,0(sp)
 100919c:	dec00204 	addi	sp,sp,8
 10091a0:	f800283a 	ret

010091a4 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 10091a4:	defffe04 	addi	sp,sp,-8
 10091a8:	df000115 	stw	fp,4(sp)
 10091ac:	df000104 	addi	fp,sp,4
 10091b0:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 10091b4:	e0bfff17 	ldw	r2,-4(fp)
 10091b8:	10000015 	stw	zero,0(r2)
 10091bc:	0001b03a 	sync
}
 10091c0:	0001883a 	nop
 10091c4:	e037883a 	mov	sp,fp
 10091c8:	df000017 	ldw	fp,0(sp)
 10091cc:	dec00104 	addi	sp,sp,4
 10091d0:	f800283a 	ret

010091d4 <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 10091d4:	defffe04 	addi	sp,sp,-8
 10091d8:	df000115 	stw	fp,4(sp)
 10091dc:	df000104 	addi	fp,sp,4
 10091e0:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 10091e4:	0001883a 	nop
 10091e8:	e037883a 	mov	sp,fp
 10091ec:	df000017 	ldw	fp,0(sp)
 10091f0:	dec00104 	addi	sp,sp,4
 10091f4:	f800283a 	ret

010091f8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 10091f8:	defffb04 	addi	sp,sp,-20
 10091fc:	df000415 	stw	fp,16(sp)
 1009200:	df000404 	addi	fp,sp,16
 1009204:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1009208:	0001883a 	nop
 100920c:	e0bfff17 	ldw	r2,-4(fp)
 1009210:	e0bffc15 	stw	r2,-16(fp)
 1009214:	e0bffc17 	ldw	r2,-16(fp)
 1009218:	10800017 	ldw	r2,0(r2)
 100921c:	e0bffd15 	stw	r2,-12(fp)
 1009220:	00800044 	movi	r2,1
 1009224:	e0bffe15 	stw	r2,-8(fp)
 1009228:	e0bfff17 	ldw	r2,-4(fp)
 100922c:	e0fffe17 	ldw	r3,-8(fp)
 1009230:	10c00015 	stw	r3,0(r2)
 1009234:	e0bffd17 	ldw	r2,-12(fp)
 1009238:	103ff41e 	bne	r2,zero,100920c <__alt_data_end+0xff00920c>
		;
	}
}
 100923c:	0001883a 	nop
 1009240:	e037883a 	mov	sp,fp
 1009244:	df000017 	ldw	fp,0(sp)
 1009248:	dec00104 	addi	sp,sp,4
 100924c:	f800283a 	ret

01009250 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 1009250:	defffe04 	addi	sp,sp,-8
 1009254:	df000115 	stw	fp,4(sp)
 1009258:	df000104 	addi	fp,sp,4
 100925c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 1009260:	e0bfff17 	ldw	r2,-4(fp)
 1009264:	0001b03a 	sync
 1009268:	10000015 	stw	zero,0(r2)
}
 100926c:	0001883a 	nop
 1009270:	e037883a 	mov	sp,fp
 1009274:	df000017 	ldw	fp,0(sp)
 1009278:	dec00104 	addi	sp,sp,4
 100927c:	f800283a 	ret

01009280 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 1009280:	defffd04 	addi	sp,sp,-12
 1009284:	dfc00215 	stw	ra,8(sp)
 1009288:	df000115 	stw	fp,4(sp)
 100928c:	df000104 	addi	fp,sp,4
 1009290:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 1009294:	e13fff17 	ldw	r4,-4(fp)
 1009298:	10091a40 	call	10091a4 <__metal_mutex_init>
}
 100929c:	0001883a 	nop
 10092a0:	e037883a 	mov	sp,fp
 10092a4:	dfc00117 	ldw	ra,4(sp)
 10092a8:	df000017 	ldw	fp,0(sp)
 10092ac:	dec00204 	addi	sp,sp,8
 10092b0:	f800283a 	ret

010092b4 <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 10092b4:	defffd04 	addi	sp,sp,-12
 10092b8:	dfc00215 	stw	ra,8(sp)
 10092bc:	df000115 	stw	fp,4(sp)
 10092c0:	df000104 	addi	fp,sp,4
 10092c4:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 10092c8:	e13fff17 	ldw	r4,-4(fp)
 10092cc:	10091d40 	call	10091d4 <__metal_mutex_deinit>
}
 10092d0:	0001883a 	nop
 10092d4:	e037883a 	mov	sp,fp
 10092d8:	dfc00117 	ldw	ra,4(sp)
 10092dc:	df000017 	ldw	fp,0(sp)
 10092e0:	dec00204 	addi	sp,sp,8
 10092e4:	f800283a 	ret

010092e8 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 10092e8:	defffd04 	addi	sp,sp,-12
 10092ec:	dfc00215 	stw	ra,8(sp)
 10092f0:	df000115 	stw	fp,4(sp)
 10092f4:	df000104 	addi	fp,sp,4
 10092f8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 10092fc:	e13fff17 	ldw	r4,-4(fp)
 1009300:	10091f80 	call	10091f8 <__metal_mutex_acquire>
}
 1009304:	0001883a 	nop
 1009308:	e037883a 	mov	sp,fp
 100930c:	dfc00117 	ldw	ra,4(sp)
 1009310:	df000017 	ldw	fp,0(sp)
 1009314:	dec00204 	addi	sp,sp,8
 1009318:	f800283a 	ret

0100931c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 100931c:	defffd04 	addi	sp,sp,-12
 1009320:	dfc00215 	stw	ra,8(sp)
 1009324:	df000115 	stw	fp,4(sp)
 1009328:	df000104 	addi	fp,sp,4
 100932c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1009330:	e13fff17 	ldw	r4,-4(fp)
 1009334:	10092500 	call	1009250 <__metal_mutex_release>
}
 1009338:	0001883a 	nop
 100933c:	e037883a 	mov	sp,fp
 1009340:	dfc00117 	ldw	ra,4(sp)
 1009344:	df000017 	ldw	fp,0(sp)
 1009348:	dec00204 	addi	sp,sp,8
 100934c:	f800283a 	ret

01009350 <metal_spinlock_init>:
/**
 * @brief	Initialize a libmetal spinlock.
 * @param[in]	slock	Spinlock to initialize.
 */
static inline void metal_spinlock_init(struct metal_spinlock *slock)
{
 1009350:	defffe04 	addi	sp,sp,-8
 1009354:	df000115 	stw	fp,4(sp)
 1009358:	df000104 	addi	fp,sp,4
 100935c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&slock->v);
 1009360:	e0bfff17 	ldw	r2,-4(fp)
 1009364:	0001b03a 	sync
 1009368:	10000015 	stw	zero,0(r2)
}
 100936c:	0001883a 	nop
 1009370:	e037883a 	mov	sp,fp
 1009374:	df000017 	ldw	fp,0(sp)
 1009378:	dec00104 	addi	sp,sp,4
 100937c:	f800283a 	ret

01009380 <metal_spinlock_acquire>:
 * @brief	Acquire a spinlock.
 * @param[in]	slock   Spinlock to acquire.
 * @see metal_spinlock_release
 */
static inline void metal_spinlock_acquire(struct metal_spinlock *slock)
{
 1009380:	defff604 	addi	sp,sp,-40
 1009384:	dfc00915 	stw	ra,36(sp)
 1009388:	df000815 	stw	fp,32(sp)
 100938c:	df000804 	addi	fp,sp,32
 1009390:	e13fff15 	stw	r4,-4(fp)
	atomic_flag val;

	atomic_mutex_acquire();
 1009394:	1005d680 	call	1005d68 <atomic_mutex_acquire>
	val = atomic_flag_test_and_set(&slock->v);
 1009398:	e0bfff17 	ldw	r2,-4(fp)
 100939c:	e0bff915 	stw	r2,-28(fp)
 10093a0:	e0bff917 	ldw	r2,-28(fp)
 10093a4:	10800017 	ldw	r2,0(r2)
 10093a8:	e0bffa15 	stw	r2,-24(fp)
 10093ac:	00800044 	movi	r2,1
 10093b0:	e0bffb15 	stw	r2,-20(fp)
 10093b4:	e0bfff17 	ldw	r2,-4(fp)
 10093b8:	e0fffb17 	ldw	r3,-20(fp)
 10093bc:	10c00015 	stw	r3,0(r2)
 10093c0:	e0bffa17 	ldw	r2,-24(fp)
 10093c4:	e0bff815 	stw	r2,-32(fp)
	atomic_mutex_release();
 10093c8:	1005d9c0 	call	1005d9c <atomic_mutex_release>

	while (val) {
 10093cc:	00000f06 	br	100940c <metal_spinlock_acquire+0x8c>
		metal_cpu_yield();
 10093d0:	0001883a 	nop

		atomic_mutex_acquire();
 10093d4:	1005d680 	call	1005d68 <atomic_mutex_acquire>
		val = atomic_flag_test_and_set(&slock->v);
 10093d8:	e0bfff17 	ldw	r2,-4(fp)
 10093dc:	e0bffc15 	stw	r2,-16(fp)
 10093e0:	e0bffc17 	ldw	r2,-16(fp)
 10093e4:	10800017 	ldw	r2,0(r2)
 10093e8:	e0bffd15 	stw	r2,-12(fp)
 10093ec:	00800044 	movi	r2,1
 10093f0:	e0bffe15 	stw	r2,-8(fp)
 10093f4:	e0bfff17 	ldw	r2,-4(fp)
 10093f8:	e0fffe17 	ldw	r3,-8(fp)
 10093fc:	10c00015 	stw	r3,0(r2)
 1009400:	e0bffd17 	ldw	r2,-12(fp)
 1009404:	e0bff815 	stw	r2,-32(fp)
		atomic_mutex_release();
 1009408:	1005d9c0 	call	1005d9c <atomic_mutex_release>

	atomic_mutex_acquire();
	val = atomic_flag_test_and_set(&slock->v);
	atomic_mutex_release();

	while (val) {
 100940c:	e0bff817 	ldw	r2,-32(fp)
 1009410:	103fef1e 	bne	r2,zero,10093d0 <__alt_data_end+0xff0093d0>

		atomic_mutex_acquire();
		val = atomic_flag_test_and_set(&slock->v);
		atomic_mutex_release();
	}
}
 1009414:	0001883a 	nop
 1009418:	e037883a 	mov	sp,fp
 100941c:	dfc00117 	ldw	ra,4(sp)
 1009420:	df000017 	ldw	fp,0(sp)
 1009424:	dec00204 	addi	sp,sp,8
 1009428:	f800283a 	ret

0100942c <metal_spinlock_release>:
 * @brief	Release a previously acquired spinlock.
 * @param[in]	slock	Spinlock to release.
 * @see metal_spinlock_acquire
 */
static inline void metal_spinlock_release(struct metal_spinlock *slock)
{
 100942c:	defffe04 	addi	sp,sp,-8
 1009430:	df000115 	stw	fp,4(sp)
 1009434:	df000104 	addi	fp,sp,4
 1009438:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&slock->v);
 100943c:	e0bfff17 	ldw	r2,-4(fp)
 1009440:	0001b03a 	sync
 1009444:	10000015 	stw	zero,0(r2)
}
 1009448:	0001883a 	nop
 100944c:	e037883a 	mov	sp,fp
 1009450:	df000017 	ldw	fp,0(sp)
 1009454:	dec00104 	addi	sp,sp,4
 1009458:	f800283a 	ret

0100945c <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 100945c:	defff904 	addi	sp,sp,-28
 1009460:	dfc00615 	stw	ra,24(sp)
 1009464:	df000515 	stw	fp,20(sp)
 1009468:	df000504 	addi	fp,sp,20
 100946c:	e13ffd15 	stw	r4,-12(fp)
 1009470:	e17ffe15 	stw	r5,-8(fp)
 1009474:	e1bfff15 	stw	r6,-4(fp)
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 1009478:	e0bffd17 	ldw	r2,-12(fp)
 100947c:	10800a17 	ldw	r2,40(r2)
 1009480:	10bfffd8 	cmpnei	r2,r2,-1
 1009484:	1000021e 	bne	r2,zero,1009490 <rpmsg_send+0x34>
		return RPMSG_ERR_ADDR;
 1009488:	00be0a44 	movi	r2,-2007
 100948c:	00000d06 	br	10094c4 <rpmsg_send+0x68>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 1009490:	e0bffd17 	ldw	r2,-12(fp)
 1009494:	10c00917 	ldw	r3,36(r2)
 1009498:	e0bffd17 	ldw	r2,-12(fp)
 100949c:	11000a17 	ldw	r4,40(r2)
 10094a0:	00800044 	movi	r2,1
 10094a4:	d8800115 	stw	r2,4(sp)
 10094a8:	e0bfff17 	ldw	r2,-4(fp)
 10094ac:	d8800015 	stw	r2,0(sp)
 10094b0:	e1fffe17 	ldw	r7,-8(fp)
 10094b4:	200d883a 	mov	r6,r4
 10094b8:	180b883a 	mov	r5,r3
 10094bc:	e13ffd17 	ldw	r4,-12(fp)
 10094c0:	1010a280 	call	1010a28 <rpmsg_send_offchannel_raw>
					 len, true);
}
 10094c4:	e037883a 	mov	sp,fp
 10094c8:	dfc00117 	ldw	ra,4(sp)
 10094cc:	df000017 	ldw	fp,0(sp)
 10094d0:	dec00204 	addi	sp,sp,8
 10094d4:	f800283a 	ret

010094d8 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 10094d8:	defffe04 	addi	sp,sp,-8
 10094dc:	df000115 	stw	fp,4(sp)
 10094e0:	df000104 	addi	fp,sp,4
 10094e4:	e13fff15 	stw	r4,-4(fp)
	return (ept->dest_addr != RPMSG_ADDR_ANY) &&
 10094e8:	e0bfff17 	ldw	r2,-4(fp)
 10094ec:	10800a17 	ldw	r2,40(r2)
 10094f0:	10bfffe0 	cmpeqi	r2,r2,-1
 10094f4:	1000061e 	bne	r2,zero,1009510 <is_rpmsg_ept_ready+0x38>
		(ept->addr != RPMSG_ADDR_ANY);
 10094f8:	e0bfff17 	ldw	r2,-4(fp)
 10094fc:	10800917 	ldw	r2,36(r2)
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
	return (ept->dest_addr != RPMSG_ADDR_ANY) &&
 1009500:	10bfffe0 	cmpeqi	r2,r2,-1
 1009504:	1000021e 	bne	r2,zero,1009510 <is_rpmsg_ept_ready+0x38>
 1009508:	00800044 	movi	r2,1
 100950c:	00000106 	br	1009514 <is_rpmsg_ept_ready+0x3c>
 1009510:	0005883a 	mov	r2,zero
		(ept->addr != RPMSG_ADDR_ANY);
}
 1009514:	e037883a 	mov	sp,fp
 1009518:	df000017 	ldw	fp,0(sp)
 100951c:	dec00104 	addi	sp,sp,4
 1009520:	f800283a 	ret

01009524 <rpmsg_rpc_ept_cb>:
 *************************************************************************/
static struct rpmsg_rpc_data *rpmsg_default_rpc;

static int rpmsg_rpc_ept_cb(struct rpmsg_endpoint *ept, void *data, size_t len,
			    uint32_t src, void *priv)
{
 1009524:	defff804 	addi	sp,sp,-32
 1009528:	dfc00715 	stw	ra,28(sp)
 100952c:	df000615 	stw	fp,24(sp)
 1009530:	df000604 	addi	fp,sp,24
 1009534:	e13ffc15 	stw	r4,-16(fp)
 1009538:	e17ffd15 	stw	r5,-12(fp)
 100953c:	e1bffe15 	stw	r6,-8(fp)
 1009540:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_rpc_syscall *syscall;

	(void)priv;
	(void)src;

	if (data != NULL && ept != NULL) {
 1009544:	e0bffd17 	ldw	r2,-12(fp)
 1009548:	10002c26 	beq	r2,zero,10095fc <rpmsg_rpc_ept_cb+0xd8>
 100954c:	e0bffc17 	ldw	r2,-16(fp)
 1009550:	10002a26 	beq	r2,zero,10095fc <rpmsg_rpc_ept_cb+0xd8>
		syscall = data;
 1009554:	e0bffd17 	ldw	r2,-12(fp)
 1009558:	e0bffa15 	stw	r2,-24(fp)
		if (syscall->id == TERM_SYSCALL_ID) {
 100955c:	e0bffa17 	ldw	r2,-24(fp)
 1009560:	10800017 	ldw	r2,0(r2)
 1009564:	10800198 	cmpnei	r2,r2,6
 1009568:	1000031e 	bne	r2,zero,1009578 <rpmsg_rpc_ept_cb+0x54>
			rpmsg_destroy_ept(ept);
 100956c:	e13ffc17 	ldw	r4,-16(fp)
 1009570:	1010f180 	call	1010f18 <rpmsg_destroy_ept>
 1009574:	00002106 	br	10095fc <rpmsg_rpc_ept_cb+0xd8>
		} else {
			struct rpmsg_rpc_data *rpc;

			rpc = metal_container_of(ept,
 1009578:	e0bffc17 	ldw	r2,-16(fp)
 100957c:	e0bffb15 	stw	r2,-20(fp)
						 struct rpmsg_rpc_data,
						 ept);
			metal_spinlock_acquire(&rpc->buflock);
 1009580:	e0bffb17 	ldw	r2,-20(fp)
 1009584:	10801804 	addi	r2,r2,96
 1009588:	1009883a 	mov	r4,r2
 100958c:	10093800 	call	1009380 <metal_spinlock_acquire>
			if (rpc->respbuf != NULL && rpc->respbuf_len != 0) {
 1009590:	e0bffb17 	ldw	r2,-20(fp)
 1009594:	10801217 	ldw	r2,72(r2)
 1009598:	10001026 	beq	r2,zero,10095dc <rpmsg_rpc_ept_cb+0xb8>
 100959c:	e0bffb17 	ldw	r2,-20(fp)
 10095a0:	10801317 	ldw	r2,76(r2)
 10095a4:	10000d26 	beq	r2,zero,10095dc <rpmsg_rpc_ept_cb+0xb8>
				if (len > rpc->respbuf_len)
 10095a8:	e0bffb17 	ldw	r2,-20(fp)
 10095ac:	10c01317 	ldw	r3,76(r2)
 10095b0:	e0bffe17 	ldw	r2,-8(fp)
 10095b4:	1880032e 	bgeu	r3,r2,10095c4 <rpmsg_rpc_ept_cb+0xa0>
					len = rpc->respbuf_len;
 10095b8:	e0bffb17 	ldw	r2,-20(fp)
 10095bc:	10801317 	ldw	r2,76(r2)
 10095c0:	e0bffe15 	stw	r2,-8(fp)
				memcpy(rpc->respbuf, data, len);
 10095c4:	e0bffb17 	ldw	r2,-20(fp)
 10095c8:	10801217 	ldw	r2,72(r2)
 10095cc:	e1bffe17 	ldw	r6,-8(fp)
 10095d0:	e17ffd17 	ldw	r5,-12(fp)
 10095d4:	1009883a 	mov	r4,r2
 10095d8:	10157f40 	call	10157f4 <memcpy>
			}
			atomic_flag_clear(&rpc->nacked);
 10095dc:	e0bffb17 	ldw	r2,-20(fp)
 10095e0:	10801104 	addi	r2,r2,68
 10095e4:	0001b03a 	sync
 10095e8:	10000015 	stw	zero,0(r2)
			metal_spinlock_release(&rpc->buflock);
 10095ec:	e0bffb17 	ldw	r2,-20(fp)
 10095f0:	10801804 	addi	r2,r2,96
 10095f4:	1009883a 	mov	r4,r2
 10095f8:	100942c0 	call	100942c <metal_spinlock_release>
		}
	}

	return RPMSG_SUCCESS;
 10095fc:	0005883a 	mov	r2,zero
}
 1009600:	e037883a 	mov	sp,fp
 1009604:	dfc00117 	ldw	ra,4(sp)
 1009608:	df000017 	ldw	fp,0(sp)
 100960c:	dec00204 	addi	sp,sp,8
 1009610:	f800283a 	ret

01009614 <rpmsg_service_unbind>:

static void rpmsg_service_unbind(struct rpmsg_endpoint *ept)
{
 1009614:	defffc04 	addi	sp,sp,-16
 1009618:	dfc00315 	stw	ra,12(sp)
 100961c:	df000215 	stw	fp,8(sp)
 1009620:	df000204 	addi	fp,sp,8
 1009624:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_rpc_data *rpc;

	rpc = metal_container_of(ept, struct rpmsg_rpc_data, ept);
 1009628:	e0bfff17 	ldw	r2,-4(fp)
 100962c:	e0bffe15 	stw	r2,-8(fp)
	rpc->ept_destroyed = 1;
 1009630:	e0bffe17 	ldw	r2,-8(fp)
 1009634:	00c00044 	movi	r3,1
 1009638:	10c01015 	stw	r3,64(r2)
	rpmsg_destroy_ept(ept);
 100963c:	e13fff17 	ldw	r4,-4(fp)
 1009640:	1010f180 	call	1010f18 <rpmsg_destroy_ept>
	atomic_flag_clear(&rpc->nacked);
 1009644:	e0bffe17 	ldw	r2,-8(fp)
 1009648:	10801104 	addi	r2,r2,68
 100964c:	0001b03a 	sync
 1009650:	10000015 	stw	zero,0(r2)
	if (rpc->shutdown_cb)
 1009654:	e0bffe17 	ldw	r2,-8(fp)
 1009658:	10801617 	ldw	r2,88(r2)
 100965c:	10000426 	beq	r2,zero,1009670 <rpmsg_service_unbind+0x5c>
		rpc->shutdown_cb(rpc);
 1009660:	e0bffe17 	ldw	r2,-8(fp)
 1009664:	10801617 	ldw	r2,88(r2)
 1009668:	e13ffe17 	ldw	r4,-8(fp)
 100966c:	103ee83a 	callr	r2
}
 1009670:	0001883a 	nop
 1009674:	e037883a 	mov	sp,fp
 1009678:	dfc00117 	ldw	ra,4(sp)
 100967c:	df000017 	ldw	fp,0(sp)
 1009680:	dec00204 	addi	sp,sp,8
 1009684:	f800283a 	ret

01009688 <rpmsg_rpc_init>:
		   struct rpmsg_device *rdev,
		   const char *ept_name, uint32_t ept_addr,
		   uint32_t ept_raddr,
		   void *poll_arg, rpmsg_rpc_poll poll,
		   rpmsg_rpc_shutdown_cb shutdown_cb)
{
 1009688:	defff604 	addi	sp,sp,-40
 100968c:	dfc00915 	stw	ra,36(sp)
 1009690:	df000815 	stw	fp,32(sp)
 1009694:	df000804 	addi	fp,sp,32
 1009698:	e13ffc15 	stw	r4,-16(fp)
 100969c:	e17ffd15 	stw	r5,-12(fp)
 10096a0:	e1bffe15 	stw	r6,-8(fp)
 10096a4:	e1ffff15 	stw	r7,-4(fp)
	int ret;

	if (rpc == NULL || rdev == NULL)
 10096a8:	e0bffc17 	ldw	r2,-16(fp)
 10096ac:	10000226 	beq	r2,zero,10096b8 <rpmsg_rpc_init+0x30>
 10096b0:	e0bffd17 	ldw	r2,-12(fp)
 10096b4:	1000021e 	bne	r2,zero,10096c0 <rpmsg_rpc_init+0x38>
		return -EINVAL;
 10096b8:	00bffa84 	movi	r2,-22
 10096bc:	00003f06 	br	10097bc <rpmsg_rpc_init+0x134>
	metal_spinlock_init(&rpc->buflock);
 10096c0:	e0bffc17 	ldw	r2,-16(fp)
 10096c4:	10801804 	addi	r2,r2,96
 10096c8:	1009883a 	mov	r4,r2
 10096cc:	10093500 	call	1009350 <metal_spinlock_init>
	metal_mutex_init(&rpc->lock);
 10096d0:	e0bffc17 	ldw	r2,-16(fp)
 10096d4:	10801704 	addi	r2,r2,92
 10096d8:	1009883a 	mov	r4,r2
 10096dc:	10092800 	call	1009280 <metal_mutex_init>
	rpc->shutdown_cb = shutdown_cb;
 10096e0:	e0bffc17 	ldw	r2,-16(fp)
 10096e4:	e0c00517 	ldw	r3,20(fp)
 10096e8:	10c01615 	stw	r3,88(r2)
	rpc->poll_arg = poll_arg;
 10096ec:	e0bffc17 	ldw	r2,-16(fp)
 10096f0:	e0c00317 	ldw	r3,12(fp)
 10096f4:	10c01515 	stw	r3,84(r2)
	rpc->poll = poll;
 10096f8:	e0bffc17 	ldw	r2,-16(fp)
 10096fc:	e0c00417 	ldw	r3,16(fp)
 1009700:	10c01415 	stw	r3,80(r2)
	rpc->ept_destroyed = 0;
 1009704:	e0bffc17 	ldw	r2,-16(fp)
 1009708:	10001015 	stw	zero,64(r2)
	rpc->respbuf = NULL;
 100970c:	e0bffc17 	ldw	r2,-16(fp)
 1009710:	10001215 	stw	zero,72(r2)
	rpc->respbuf_len = 0;
 1009714:	e0bffc17 	ldw	r2,-16(fp)
 1009718:	10001315 	stw	zero,76(r2)
	atomic_init(&rpc->nacked, 1);
 100971c:	e0bffc17 	ldw	r2,-16(fp)
 1009720:	00c00044 	movi	r3,1
 1009724:	10c01115 	stw	r3,68(r2)
	ret = rpmsg_create_ept(&rpc->ept, rdev,
 1009728:	e0fffc17 	ldw	r3,-16(fp)
 100972c:	00804074 	movhi	r2,257
 1009730:	10a58504 	addi	r2,r2,-27116
 1009734:	d8800215 	stw	r2,8(sp)
 1009738:	00804074 	movhi	r2,257
 100973c:	10a54904 	addi	r2,r2,-27356
 1009740:	d8800115 	stw	r2,4(sp)
 1009744:	e0800217 	ldw	r2,8(fp)
 1009748:	d8800015 	stw	r2,0(sp)
 100974c:	e1ffff17 	ldw	r7,-4(fp)
 1009750:	e1bffe17 	ldw	r6,-8(fp)
 1009754:	e17ffd17 	ldw	r5,-12(fp)
 1009758:	1809883a 	mov	r4,r3
 100975c:	1010d900 	call	1010d90 <rpmsg_create_ept>
 1009760:	e0bffb15 	stw	r2,-20(fp)
			       ept_name, ept_addr, ept_raddr,
			       rpmsg_rpc_ept_cb, rpmsg_service_unbind);
	if (ret != 0) {
 1009764:	e0bffb17 	ldw	r2,-20(fp)
 1009768:	10000f26 	beq	r2,zero,10097a8 <rpmsg_rpc_init+0x120>
		metal_mutex_release(&rpc->lock);
 100976c:	e0bffc17 	ldw	r2,-16(fp)
 1009770:	10801704 	addi	r2,r2,92
 1009774:	1009883a 	mov	r4,r2
 1009778:	100931c0 	call	100931c <metal_mutex_release>
		return -EINVAL;
 100977c:	00bffa84 	movi	r2,-22
 1009780:	00000e06 	br	10097bc <rpmsg_rpc_init+0x134>
	}
	while (!is_rpmsg_ept_ready(&rpc->ept)) {
		if (rpc->poll)
 1009784:	e0bffc17 	ldw	r2,-16(fp)
 1009788:	10801417 	ldw	r2,80(r2)
 100978c:	10000626 	beq	r2,zero,10097a8 <rpmsg_rpc_init+0x120>
			rpc->poll(rpc->poll_arg);
 1009790:	e0bffc17 	ldw	r2,-16(fp)
 1009794:	10801417 	ldw	r2,80(r2)
 1009798:	e0fffc17 	ldw	r3,-16(fp)
 100979c:	18c01517 	ldw	r3,84(r3)
 10097a0:	1809883a 	mov	r4,r3
 10097a4:	103ee83a 	callr	r2
			       rpmsg_rpc_ept_cb, rpmsg_service_unbind);
	if (ret != 0) {
		metal_mutex_release(&rpc->lock);
		return -EINVAL;
	}
	while (!is_rpmsg_ept_ready(&rpc->ept)) {
 10097a8:	e0bffc17 	ldw	r2,-16(fp)
 10097ac:	1009883a 	mov	r4,r2
 10097b0:	10094d80 	call	10094d8 <is_rpmsg_ept_ready>
 10097b4:	103ff326 	beq	r2,zero,1009784 <__alt_data_end+0xff009784>
		if (rpc->poll)
			rpc->poll(rpc->poll_arg);
	}
	return 0;
 10097b8:	0005883a 	mov	r2,zero
}
 10097bc:	e037883a 	mov	sp,fp
 10097c0:	dfc00117 	ldw	ra,4(sp)
 10097c4:	df000017 	ldw	fp,0(sp)
 10097c8:	dec00204 	addi	sp,sp,8
 10097cc:	f800283a 	ret

010097d0 <rpmsg_rpc_release>:

void rpmsg_rpc_release(struct rpmsg_rpc_data *rpc)
{
 10097d0:	defffd04 	addi	sp,sp,-12
 10097d4:	dfc00215 	stw	ra,8(sp)
 10097d8:	df000115 	stw	fp,4(sp)
 10097dc:	df000104 	addi	fp,sp,4
 10097e0:	e13fff15 	stw	r4,-4(fp)
	if (rpc == NULL)
 10097e4:	e0bfff17 	ldw	r2,-4(fp)
 10097e8:	10002026 	beq	r2,zero,100986c <rpmsg_rpc_release+0x9c>
		return;
	if (rpc->ept_destroyed == 0)
 10097ec:	e0bfff17 	ldw	r2,-4(fp)
 10097f0:	10801017 	ldw	r2,64(r2)
 10097f4:	1000031e 	bne	r2,zero,1009804 <rpmsg_rpc_release+0x34>
		rpmsg_destroy_ept(&rpc->ept);
 10097f8:	e0bfff17 	ldw	r2,-4(fp)
 10097fc:	1009883a 	mov	r4,r2
 1009800:	1010f180 	call	1010f18 <rpmsg_destroy_ept>
	metal_mutex_acquire(&rpc->lock);
 1009804:	e0bfff17 	ldw	r2,-4(fp)
 1009808:	10801704 	addi	r2,r2,92
 100980c:	1009883a 	mov	r4,r2
 1009810:	10092e80 	call	10092e8 <metal_mutex_acquire>
	metal_spinlock_acquire(&rpc->buflock);
 1009814:	e0bfff17 	ldw	r2,-4(fp)
 1009818:	10801804 	addi	r2,r2,96
 100981c:	1009883a 	mov	r4,r2
 1009820:	10093800 	call	1009380 <metal_spinlock_acquire>
	rpc->respbuf = NULL;
 1009824:	e0bfff17 	ldw	r2,-4(fp)
 1009828:	10001215 	stw	zero,72(r2)
	rpc->respbuf_len = 0;
 100982c:	e0bfff17 	ldw	r2,-4(fp)
 1009830:	10001315 	stw	zero,76(r2)
	metal_spinlock_release(&rpc->buflock);
 1009834:	e0bfff17 	ldw	r2,-4(fp)
 1009838:	10801804 	addi	r2,r2,96
 100983c:	1009883a 	mov	r4,r2
 1009840:	100942c0 	call	100942c <metal_spinlock_release>
	metal_mutex_release(&rpc->lock);
 1009844:	e0bfff17 	ldw	r2,-4(fp)
 1009848:	10801704 	addi	r2,r2,92
 100984c:	1009883a 	mov	r4,r2
 1009850:	100931c0 	call	100931c <metal_mutex_release>
	metal_mutex_deinit(&rpc->lock);
 1009854:	e0bfff17 	ldw	r2,-4(fp)
 1009858:	10801704 	addi	r2,r2,92
 100985c:	1009883a 	mov	r4,r2
 1009860:	10092b40 	call	10092b4 <metal_mutex_deinit>

	return;
 1009864:	0001883a 	nop
 1009868:	00000106 	br	1009870 <rpmsg_rpc_release+0xa0>
}

void rpmsg_rpc_release(struct rpmsg_rpc_data *rpc)
{
	if (rpc == NULL)
		return;
 100986c:	0001883a 	nop
	metal_spinlock_release(&rpc->buflock);
	metal_mutex_release(&rpc->lock);
	metal_mutex_deinit(&rpc->lock);

	return;
}
 1009870:	e037883a 	mov	sp,fp
 1009874:	dfc00117 	ldw	ra,4(sp)
 1009878:	df000017 	ldw	fp,0(sp)
 100987c:	dec00204 	addi	sp,sp,8
 1009880:	f800283a 	ret

01009884 <rpmsg_rpc_send>:

int rpmsg_rpc_send(struct rpmsg_rpc_data *rpc,
		   void *req, size_t len,
		   void *resp, size_t resp_len)
{
 1009884:	deffef04 	addi	sp,sp,-68
 1009888:	dfc01015 	stw	ra,64(sp)
 100988c:	df000f15 	stw	fp,60(sp)
 1009890:	df000f04 	addi	fp,sp,60
 1009894:	e13ffc15 	stw	r4,-16(fp)
 1009898:	e17ffd15 	stw	r5,-12(fp)
 100989c:	e1bffe15 	stw	r6,-8(fp)
 10098a0:	e1ffff15 	stw	r7,-4(fp)
	int ret;

	if (rpc == NULL)
 10098a4:	e0bffc17 	ldw	r2,-16(fp)
 10098a8:	1000021e 	bne	r2,zero,10098b4 <rpmsg_rpc_send+0x30>
		return -EINVAL;
 10098ac:	00bffa84 	movi	r2,-22
 10098b0:	00005506 	br	1009a08 <rpmsg_rpc_send+0x184>
	metal_spinlock_acquire(&rpc->buflock);
 10098b4:	e0bffc17 	ldw	r2,-16(fp)
 10098b8:	10801804 	addi	r2,r2,96
 10098bc:	1009883a 	mov	r4,r2
 10098c0:	10093800 	call	1009380 <metal_spinlock_acquire>
	rpc->respbuf = resp;
 10098c4:	e0bffc17 	ldw	r2,-16(fp)
 10098c8:	e0ffff17 	ldw	r3,-4(fp)
 10098cc:	10c01215 	stw	r3,72(r2)
	rpc->respbuf_len = resp_len;
 10098d0:	e0bffc17 	ldw	r2,-16(fp)
 10098d4:	e0c00217 	ldw	r3,8(fp)
 10098d8:	10c01315 	stw	r3,76(r2)
	metal_spinlock_release(&rpc->buflock);
 10098dc:	e0bffc17 	ldw	r2,-16(fp)
 10098e0:	10801804 	addi	r2,r2,96
 10098e4:	1009883a 	mov	r4,r2
 10098e8:	100942c0 	call	100942c <metal_spinlock_release>

	atomic_mutex_acquire();
 10098ec:	1005d680 	call	1005d68 <atomic_mutex_acquire>
	(void)atomic_flag_test_and_set(&rpc->nacked);
 10098f0:	e0bffc17 	ldw	r2,-16(fp)
 10098f4:	10801104 	addi	r2,r2,68
 10098f8:	e0bff215 	stw	r2,-56(fp)
 10098fc:	e0bff217 	ldw	r2,-56(fp)
 1009900:	10800017 	ldw	r2,0(r2)
 1009904:	e0bff315 	stw	r2,-52(fp)
 1009908:	00800044 	movi	r2,1
 100990c:	e0bff415 	stw	r2,-48(fp)
 1009910:	e0bffc17 	ldw	r2,-16(fp)
 1009914:	e0fff417 	ldw	r3,-48(fp)
 1009918:	10c01115 	stw	r3,68(r2)
	atomic_mutex_release();
 100991c:	1005d9c0 	call	1005d9c <atomic_mutex_release>

	ret = rpmsg_send(&rpc->ept, req, len);
 1009920:	e0bffc17 	ldw	r2,-16(fp)
 1009924:	e0fffe17 	ldw	r3,-8(fp)
 1009928:	180d883a 	mov	r6,r3
 100992c:	e17ffd17 	ldw	r5,-12(fp)
 1009930:	1009883a 	mov	r4,r2
 1009934:	100945c0 	call	100945c <rpmsg_send>
 1009938:	e0bff515 	stw	r2,-44(fp)
	if (ret < 0)
 100993c:	e0bff517 	ldw	r2,-44(fp)
 1009940:	1000020e 	bge	r2,zero,100994c <rpmsg_rpc_send+0xc8>
		return -EINVAL;
 1009944:	00bffa84 	movi	r2,-22
 1009948:	00002f06 	br	1009a08 <rpmsg_rpc_send+0x184>
	if (!resp)
 100994c:	e0bfff17 	ldw	r2,-4(fp)
 1009950:	1000021e 	bne	r2,zero,100995c <rpmsg_rpc_send+0xd8>
		return ret;
 1009954:	e0bff517 	ldw	r2,-44(fp)
 1009958:	00002b06 	br	1009a08 <rpmsg_rpc_send+0x184>

	atomic_int val;

	atomic_mutex_acquire();
 100995c:	1005d680 	call	1005d68 <atomic_mutex_acquire>
	val = atomic_flag_test_and_set(&rpc->nacked);
 1009960:	e0bffc17 	ldw	r2,-16(fp)
 1009964:	10801104 	addi	r2,r2,68
 1009968:	e0bff615 	stw	r2,-40(fp)
 100996c:	e0bff617 	ldw	r2,-40(fp)
 1009970:	10800017 	ldw	r2,0(r2)
 1009974:	e0bff715 	stw	r2,-36(fp)
 1009978:	00800044 	movi	r2,1
 100997c:	e0bff815 	stw	r2,-32(fp)
 1009980:	e0bffc17 	ldw	r2,-16(fp)
 1009984:	e0fff817 	ldw	r3,-32(fp)
 1009988:	10c01115 	stw	r3,68(r2)
 100998c:	e0bff717 	ldw	r2,-36(fp)
 1009990:	e0bff115 	stw	r2,-60(fp)
	atomic_mutex_release();
 1009994:	1005d9c0 	call	1005d9c <atomic_mutex_release>

	while(val) {
 1009998:	00001806 	br	10099fc <rpmsg_rpc_send+0x178>
		if (rpc->poll)
 100999c:	e0bffc17 	ldw	r2,-16(fp)
 10099a0:	10801417 	ldw	r2,80(r2)
 10099a4:	10000626 	beq	r2,zero,10099c0 <rpmsg_rpc_send+0x13c>
			rpc->poll(rpc->poll_arg);
 10099a8:	e0bffc17 	ldw	r2,-16(fp)
 10099ac:	10801417 	ldw	r2,80(r2)
 10099b0:	e0fffc17 	ldw	r3,-16(fp)
 10099b4:	18c01517 	ldw	r3,84(r3)
 10099b8:	1809883a 	mov	r4,r3
 10099bc:	103ee83a 	callr	r2

		atomic_mutex_acquire();
 10099c0:	1005d680 	call	1005d68 <atomic_mutex_acquire>
		val = atomic_flag_test_and_set(&rpc->nacked);
 10099c4:	e0bffc17 	ldw	r2,-16(fp)
 10099c8:	10801104 	addi	r2,r2,68
 10099cc:	e0bff915 	stw	r2,-28(fp)
 10099d0:	e0bff917 	ldw	r2,-28(fp)
 10099d4:	10800017 	ldw	r2,0(r2)
 10099d8:	e0bffa15 	stw	r2,-24(fp)
 10099dc:	00800044 	movi	r2,1
 10099e0:	e0bffb15 	stw	r2,-20(fp)
 10099e4:	e0bffc17 	ldw	r2,-16(fp)
 10099e8:	e0fffb17 	ldw	r3,-20(fp)
 10099ec:	10c01115 	stw	r3,68(r2)
 10099f0:	e0bffa17 	ldw	r2,-24(fp)
 10099f4:	e0bff115 	stw	r2,-60(fp)
		atomic_mutex_release();
 10099f8:	1005d9c0 	call	1005d9c <atomic_mutex_release>

	atomic_mutex_acquire();
	val = atomic_flag_test_and_set(&rpc->nacked);
	atomic_mutex_release();

	while(val) {
 10099fc:	e0bff117 	ldw	r2,-60(fp)
 1009a00:	103fe61e 	bne	r2,zero,100999c <__alt_data_end+0xff00999c>
		atomic_mutex_acquire();
		val = atomic_flag_test_and_set(&rpc->nacked);
		atomic_mutex_release();
	}

	return ret;
 1009a04:	e0bff517 	ldw	r2,-44(fp)
}
 1009a08:	e037883a 	mov	sp,fp
 1009a0c:	dfc00117 	ldw	ra,4(sp)
 1009a10:	df000017 	ldw	fp,0(sp)
 1009a14:	dec00204 	addi	sp,sp,8
 1009a18:	f800283a 	ret

01009a1c <rpmsg_set_default_rpc>:

void rpmsg_set_default_rpc(struct rpmsg_rpc_data *rpc)
{
 1009a1c:	defffe04 	addi	sp,sp,-8
 1009a20:	df000115 	stw	fp,4(sp)
 1009a24:	df000104 	addi	fp,sp,4
 1009a28:	e13fff15 	stw	r4,-4(fp)
	if (rpc == NULL)
 1009a2c:	e0bfff17 	ldw	r2,-4(fp)
 1009a30:	10000326 	beq	r2,zero,1009a40 <rpmsg_set_default_rpc+0x24>
		return;
	rpmsg_default_rpc = rpc;
 1009a34:	e0bfff17 	ldw	r2,-4(fp)
 1009a38:	d0a75215 	stw	r2,-25272(gp)
 1009a3c:	00000106 	br	1009a44 <rpmsg_set_default_rpc+0x28>
}

void rpmsg_set_default_rpc(struct rpmsg_rpc_data *rpc)
{
	if (rpc == NULL)
		return;
 1009a40:	0001883a 	nop
	rpmsg_default_rpc = rpc;
}
 1009a44:	e037883a 	mov	sp,fp
 1009a48:	df000017 	ldw	fp,0(sp)
 1009a4c:	dec00104 	addi	sp,sp,4
 1009a50:	f800283a 	ret

01009a54 <_open>:
 *
 *************************************************************************/
#define MAX_BUF_LEN 496UL

int _open(const char *filename, int flags, int mode)
{
 1009a54:	deff7504 	addi	sp,sp,-556
 1009a58:	dfc08a15 	stw	ra,552(sp)
 1009a5c:	df008915 	stw	fp,548(sp)
 1009a60:	df008904 	addi	fp,sp,548
 1009a64:	e13ffd15 	stw	r4,-12(fp)
 1009a68:	e17ffe15 	stw	r5,-8(fp)
 1009a6c:	e1bfff15 	stw	r6,-4(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 1009a70:	d0a75217 	ldw	r2,-25272(gp)
 1009a74:	e0bf7915 	stw	r2,-540(fp)
	struct rpmsg_rpc_syscall *syscall;
	struct rpmsg_rpc_syscall resp;
	int filename_len = strlen(filename) + 1;
 1009a78:	e13ffd17 	ldw	r4,-12(fp)
 1009a7c:	10164b40 	call	10164b4 <strlen>
 1009a80:	10800044 	addi	r2,r2,1
 1009a84:	e0bf7a15 	stw	r2,-536(fp)
	int payload_size = sizeof(*syscall) + filename_len;
 1009a88:	e0bf7a17 	ldw	r2,-536(fp)
 1009a8c:	10800404 	addi	r2,r2,16
 1009a90:	e0bf7b15 	stw	r2,-532(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	int ret;

	if (filename == NULL || payload_size > (int)MAX_BUF_LEN) {
 1009a94:	e0bffd17 	ldw	r2,-12(fp)
 1009a98:	10000326 	beq	r2,zero,1009aa8 <_open+0x54>
 1009a9c:	e0bf7b17 	ldw	r2,-532(fp)
 1009aa0:	10807c50 	cmplti	r2,r2,497
 1009aa4:	1000021e 	bne	r2,zero,1009ab0 <_open+0x5c>
		return -EINVAL;
 1009aa8:	00bffa84 	movi	r2,-22
 1009aac:	00003006 	br	1009b70 <_open+0x11c>
	}

	if (rpc == NULL)
 1009ab0:	e0bf7917 	ldw	r2,-540(fp)
 1009ab4:	1000021e 	bne	r2,zero,1009ac0 <_open+0x6c>
		return -EINVAL;
 1009ab8:	00bffa84 	movi	r2,-22
 1009abc:	00002c06 	br	1009b70 <_open+0x11c>

	/* Construct rpc payload */
	syscall = (struct rpmsg_rpc_syscall *)tmpbuf;
 1009ac0:	e0bf8104 	addi	r2,fp,-508
 1009ac4:	e0bf7c15 	stw	r2,-528(fp)
	syscall->id = OPEN_SYSCALL_ID;
 1009ac8:	e0bf7c17 	ldw	r2,-528(fp)
 1009acc:	00c00044 	movi	r3,1
 1009ad0:	10c00015 	stw	r3,0(r2)
	syscall->args.int_field1 = flags;
 1009ad4:	e0bf7c17 	ldw	r2,-528(fp)
 1009ad8:	e0fffe17 	ldw	r3,-8(fp)
 1009adc:	10c00115 	stw	r3,4(r2)
	syscall->args.int_field2 = mode;
 1009ae0:	e0bf7c17 	ldw	r2,-528(fp)
 1009ae4:	e0ffff17 	ldw	r3,-4(fp)
 1009ae8:	10c00215 	stw	r3,8(r2)
	syscall->args.data_len = filename_len;
 1009aec:	e0ff7a17 	ldw	r3,-536(fp)
 1009af0:	e0bf7c17 	ldw	r2,-528(fp)
 1009af4:	10c00315 	stw	r3,12(r2)
	memcpy(tmpbuf + sizeof(*syscall), filename, filename_len);
 1009af8:	e0bf8104 	addi	r2,fp,-508
 1009afc:	10800404 	addi	r2,r2,16
 1009b00:	e0ff7a17 	ldw	r3,-536(fp)
 1009b04:	180d883a 	mov	r6,r3
 1009b08:	e17ffd17 	ldw	r5,-12(fp)
 1009b0c:	1009883a 	mov	r4,r2
 1009b10:	10157f40 	call	10157f4 <memcpy>

	resp.id = 0;
 1009b14:	e03f7d15 	stw	zero,-524(fp)
	ret = rpmsg_rpc_send(rpc, tmpbuf, payload_size,
 1009b18:	e13f7b17 	ldw	r4,-532(fp)
 1009b1c:	e17f7d04 	addi	r5,fp,-524
 1009b20:	e0ff8104 	addi	r3,fp,-508
 1009b24:	00800404 	movi	r2,16
 1009b28:	d8800015 	stw	r2,0(sp)
 1009b2c:	280f883a 	mov	r7,r5
 1009b30:	200d883a 	mov	r6,r4
 1009b34:	180b883a 	mov	r5,r3
 1009b38:	e13f7917 	ldw	r4,-540(fp)
 1009b3c:	10098840 	call	1009884 <rpmsg_rpc_send>
 1009b40:	e0bf7815 	stw	r2,-544(fp)
			     (void *)&resp, sizeof(resp));
	if (ret >= 0) {
 1009b44:	e0bf7817 	ldw	r2,-544(fp)
 1009b48:	10000816 	blt	r2,zero,1009b6c <_open+0x118>
		/* Obtain return args and return to caller */
		if (resp.id == OPEN_SYSCALL_ID)
 1009b4c:	e0bf7d17 	ldw	r2,-524(fp)
 1009b50:	10800058 	cmpnei	r2,r2,1
 1009b54:	1000031e 	bne	r2,zero,1009b64 <_open+0x110>
			ret = resp.args.int_field1;
 1009b58:	e0bf7e17 	ldw	r2,-520(fp)
 1009b5c:	e0bf7815 	stw	r2,-544(fp)
 1009b60:	00000206 	br	1009b6c <_open+0x118>
		else
			ret = -EINVAL;
 1009b64:	00bffa84 	movi	r2,-22
 1009b68:	e0bf7815 	stw	r2,-544(fp)
	}

	return ret;
 1009b6c:	e0bf7817 	ldw	r2,-544(fp)
}
 1009b70:	e037883a 	mov	sp,fp
 1009b74:	dfc00117 	ldw	ra,4(sp)
 1009b78:	df000017 	ldw	fp,0(sp)
 1009b7c:	dec00204 	addi	sp,sp,8
 1009b80:	f800283a 	ret

01009b84 <_read>:
 *
 *       Low level function to redirect IO to serial.
 *
 *************************************************************************/
int _read(int fd, char *buffer, int buflen)
{
 1009b84:	deff7404 	addi	sp,sp,-560
 1009b88:	dfc08b15 	stw	ra,556(sp)
 1009b8c:	df008a15 	stw	fp,552(sp)
 1009b90:	df008a04 	addi	fp,sp,552
 1009b94:	e13ffd15 	stw	r4,-12(fp)
 1009b98:	e17ffe15 	stw	r5,-8(fp)
 1009b9c:	e1bfff15 	stw	r6,-4(fp)
	struct rpmsg_rpc_syscall syscall;
	struct rpmsg_rpc_syscall *resp;
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 1009ba0:	d0a75217 	ldw	r2,-25272(gp)
 1009ba4:	e0bf7915 	stw	r2,-540(fp)
	int payload_size = sizeof(syscall);
 1009ba8:	00800404 	movi	r2,16
 1009bac:	e0bf7a15 	stw	r2,-536(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	int ret;

	if (rpc == NULL || buffer == NULL || buflen == 0)
 1009bb0:	e0bf7917 	ldw	r2,-540(fp)
 1009bb4:	10000426 	beq	r2,zero,1009bc8 <_read+0x44>
 1009bb8:	e0bffe17 	ldw	r2,-8(fp)
 1009bbc:	10000226 	beq	r2,zero,1009bc8 <_read+0x44>
 1009bc0:	e0bfff17 	ldw	r2,-4(fp)
 1009bc4:	1000021e 	bne	r2,zero,1009bd0 <_read+0x4c>
		return -EINVAL;
 1009bc8:	00bffa84 	movi	r2,-22
 1009bcc:	00003806 	br	1009cb0 <_read+0x12c>

	/* Construct rpc payload */
	syscall.id = READ_SYSCALL_ID;
 1009bd0:	00800104 	movi	r2,4
 1009bd4:	e0bf7d15 	stw	r2,-524(fp)
	syscall.args.int_field1 = fd;
 1009bd8:	e0bffd17 	ldw	r2,-12(fp)
 1009bdc:	e0bf7e15 	stw	r2,-520(fp)
	syscall.args.int_field2 = buflen;
 1009be0:	e0bfff17 	ldw	r2,-4(fp)
 1009be4:	e0bf7f15 	stw	r2,-516(fp)
	syscall.args.data_len = 0;	/*not used */
 1009be8:	e03f8015 	stw	zero,-512(fp)

	resp = (struct rpmsg_rpc_syscall *)tmpbuf;
 1009bec:	e0bf8104 	addi	r2,fp,-508
 1009bf0:	e0bf7b15 	stw	r2,-532(fp)
	resp->id = 0;
 1009bf4:	e0bf7b17 	ldw	r2,-532(fp)
 1009bf8:	10000015 	stw	zero,0(r2)
	ret = rpmsg_rpc_send(rpc, (void *)&syscall, payload_size,
 1009bfc:	e13f7a17 	ldw	r4,-536(fp)
 1009c00:	e17f8104 	addi	r5,fp,-508
 1009c04:	e0ff7d04 	addi	r3,fp,-524
 1009c08:	00807c04 	movi	r2,496
 1009c0c:	d8800015 	stw	r2,0(sp)
 1009c10:	280f883a 	mov	r7,r5
 1009c14:	200d883a 	mov	r6,r4
 1009c18:	180b883a 	mov	r5,r3
 1009c1c:	e13f7917 	ldw	r4,-540(fp)
 1009c20:	10098840 	call	1009884 <rpmsg_rpc_send>
 1009c24:	e0bf7715 	stw	r2,-548(fp)
			     tmpbuf, sizeof(tmpbuf));

	/* Obtain return args and return to caller */
	if (ret >= 0) {
 1009c28:	e0bf7717 	ldw	r2,-548(fp)
 1009c2c:	10001f16 	blt	r2,zero,1009cac <_read+0x128>
		if (resp->id == READ_SYSCALL_ID) {
 1009c30:	e0bf7b17 	ldw	r2,-532(fp)
 1009c34:	10800017 	ldw	r2,0(r2)
 1009c38:	10800118 	cmpnei	r2,r2,4
 1009c3c:	1000191e 	bne	r2,zero,1009ca4 <_read+0x120>
			if (resp->args.int_field1 > 0) {
 1009c40:	e0bf7b17 	ldw	r2,-532(fp)
 1009c44:	10800117 	ldw	r2,4(r2)
 1009c48:	0080120e 	bge	zero,r2,1009c94 <_read+0x110>
				int tmplen = resp->args.data_len;
 1009c4c:	e0bf7b17 	ldw	r2,-532(fp)
 1009c50:	10800317 	ldw	r2,12(r2)
 1009c54:	e0bf7815 	stw	r2,-544(fp)
				unsigned char *tmpptr = tmpbuf;
 1009c58:	e0bf8104 	addi	r2,fp,-508
 1009c5c:	e0bf7c15 	stw	r2,-528(fp)

				tmpptr += sizeof(*resp);
 1009c60:	e0bf7c17 	ldw	r2,-528(fp)
 1009c64:	10800404 	addi	r2,r2,16
 1009c68:	e0bf7c15 	stw	r2,-528(fp)
				if (tmplen > buflen)
 1009c6c:	e0bf7817 	ldw	r2,-544(fp)
 1009c70:	e0ffff17 	ldw	r3,-4(fp)
 1009c74:	1880020e 	bge	r3,r2,1009c80 <_read+0xfc>
					tmplen = buflen;
 1009c78:	e0bfff17 	ldw	r2,-4(fp)
 1009c7c:	e0bf7815 	stw	r2,-544(fp)
				memcpy(buffer, tmpptr, tmplen);
 1009c80:	e0bf7817 	ldw	r2,-544(fp)
 1009c84:	100d883a 	mov	r6,r2
 1009c88:	e17f7c17 	ldw	r5,-528(fp)
 1009c8c:	e13ffe17 	ldw	r4,-8(fp)
 1009c90:	10157f40 	call	10157f4 <memcpy>
			}
			ret = resp->args.int_field1;
 1009c94:	e0bf7b17 	ldw	r2,-532(fp)
 1009c98:	10800117 	ldw	r2,4(r2)
 1009c9c:	e0bf7715 	stw	r2,-548(fp)
 1009ca0:	00000206 	br	1009cac <_read+0x128>
		} else {
			ret = -EINVAL;
 1009ca4:	00bffa84 	movi	r2,-22
 1009ca8:	e0bf7715 	stw	r2,-548(fp)
		}
	}

	return ret;
 1009cac:	e0bf7717 	ldw	r2,-548(fp)
}
 1009cb0:	e037883a 	mov	sp,fp
 1009cb4:	dfc00117 	ldw	ra,4(sp)
 1009cb8:	df000017 	ldw	fp,0(sp)
 1009cbc:	dec00204 	addi	sp,sp,8
 1009cc0:	f800283a 	ret

01009cc4 <_write>:
 *
 *       Low level function to redirect IO to serial.
 *
 *************************************************************************/
int _write(int fd, const char *ptr, int len)
{
 1009cc4:	deff7404 	addi	sp,sp,-560
 1009cc8:	dfc08b15 	stw	ra,556(sp)
 1009ccc:	df008a15 	stw	fp,552(sp)
 1009cd0:	df008a04 	addi	fp,sp,552
 1009cd4:	e13ffd15 	stw	r4,-12(fp)
 1009cd8:	e17ffe15 	stw	r5,-8(fp)
 1009cdc:	e1bfff15 	stw	r6,-4(fp)
	int ret;
	struct rpmsg_rpc_syscall *syscall;
	struct rpmsg_rpc_syscall resp;
	int payload_size = sizeof(*syscall) + len;
 1009ce0:	e0bfff17 	ldw	r2,-4(fp)
 1009ce4:	10800404 	addi	r2,r2,16
 1009ce8:	e0bf7815 	stw	r2,-544(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 1009cec:	d0a75217 	ldw	r2,-25272(gp)
 1009cf0:	e0bf7a15 	stw	r2,-536(fp)
	unsigned char tmpbuf[MAX_BUF_LEN];
	unsigned char *tmpptr;
	int null_term = 0;
 1009cf4:	e03f7915 	stw	zero,-540(fp)

	if (rpc == NULL)
 1009cf8:	e0bf7a17 	ldw	r2,-536(fp)
 1009cfc:	1000021e 	bne	r2,zero,1009d08 <_write+0x44>
		return -EINVAL;
 1009d00:	00bffa84 	movi	r2,-22
 1009d04:	00004106 	br	1009e0c <_write+0x148>
	if (fd == 1)
 1009d08:	e0bffd17 	ldw	r2,-12(fp)
 1009d0c:	10800058 	cmpnei	r2,r2,1
 1009d10:	1000021e 	bne	r2,zero,1009d1c <_write+0x58>
		null_term = 1;
 1009d14:	00800044 	movi	r2,1
 1009d18:	e0bf7915 	stw	r2,-540(fp)

	syscall = (struct rpmsg_rpc_syscall *)tmpbuf;
 1009d1c:	e0bf8104 	addi	r2,fp,-508
 1009d20:	e0bf7b15 	stw	r2,-532(fp)
	syscall->id = WRITE_SYSCALL_ID;
 1009d24:	e0bf7b17 	ldw	r2,-532(fp)
 1009d28:	00c000c4 	movi	r3,3
 1009d2c:	10c00015 	stw	r3,0(r2)
	syscall->args.int_field1 = fd;
 1009d30:	e0bf7b17 	ldw	r2,-532(fp)
 1009d34:	e0fffd17 	ldw	r3,-12(fp)
 1009d38:	10c00115 	stw	r3,4(r2)
	syscall->args.int_field2 = len;
 1009d3c:	e0bf7b17 	ldw	r2,-532(fp)
 1009d40:	e0ffff17 	ldw	r3,-4(fp)
 1009d44:	10c00215 	stw	r3,8(r2)
	syscall->args.data_len = len + null_term;
 1009d48:	e0ffff17 	ldw	r3,-4(fp)
 1009d4c:	e0bf7917 	ldw	r2,-540(fp)
 1009d50:	1885883a 	add	r2,r3,r2
 1009d54:	1007883a 	mov	r3,r2
 1009d58:	e0bf7b17 	ldw	r2,-532(fp)
 1009d5c:	10c00315 	stw	r3,12(r2)
	tmpptr = tmpbuf + sizeof(*syscall);
 1009d60:	e0bf8104 	addi	r2,fp,-508
 1009d64:	10800404 	addi	r2,r2,16
 1009d68:	e0bf7c15 	stw	r2,-528(fp)
	memcpy(tmpptr, ptr, len);
 1009d6c:	e0bfff17 	ldw	r2,-4(fp)
 1009d70:	100d883a 	mov	r6,r2
 1009d74:	e17ffe17 	ldw	r5,-8(fp)
 1009d78:	e13f7c17 	ldw	r4,-528(fp)
 1009d7c:	10157f40 	call	10157f4 <memcpy>
	if (null_term == 1) {
 1009d80:	e0bf7917 	ldw	r2,-540(fp)
 1009d84:	10800058 	cmpnei	r2,r2,1
 1009d88:	1000091e 	bne	r2,zero,1009db0 <_write+0xec>
		*(char *)(tmpptr + len + null_term) = 0;
 1009d8c:	e0ffff17 	ldw	r3,-4(fp)
 1009d90:	e0bf7917 	ldw	r2,-540(fp)
 1009d94:	1885883a 	add	r2,r3,r2
 1009d98:	e0ff7c17 	ldw	r3,-528(fp)
 1009d9c:	1885883a 	add	r2,r3,r2
 1009da0:	10000005 	stb	zero,0(r2)
		payload_size += 1;
 1009da4:	e0bf7817 	ldw	r2,-544(fp)
 1009da8:	10800044 	addi	r2,r2,1
 1009dac:	e0bf7815 	stw	r2,-544(fp)
	}
	resp.id = 0;
 1009db0:	e03f7d15 	stw	zero,-524(fp)
	ret = rpmsg_rpc_send(rpc, tmpbuf, payload_size,
 1009db4:	e13f7817 	ldw	r4,-544(fp)
 1009db8:	e17f7d04 	addi	r5,fp,-524
 1009dbc:	e0ff8104 	addi	r3,fp,-508
 1009dc0:	00800404 	movi	r2,16
 1009dc4:	d8800015 	stw	r2,0(sp)
 1009dc8:	280f883a 	mov	r7,r5
 1009dcc:	200d883a 	mov	r6,r4
 1009dd0:	180b883a 	mov	r5,r3
 1009dd4:	e13f7a17 	ldw	r4,-536(fp)
 1009dd8:	10098840 	call	1009884 <rpmsg_rpc_send>
 1009ddc:	e0bf7715 	stw	r2,-548(fp)
			     (void *)&resp, sizeof(resp));

	if (ret >= 0) {
 1009de0:	e0bf7717 	ldw	r2,-548(fp)
 1009de4:	10000816 	blt	r2,zero,1009e08 <_write+0x144>
		if (resp.id == WRITE_SYSCALL_ID)
 1009de8:	e0bf7d17 	ldw	r2,-524(fp)
 1009dec:	108000d8 	cmpnei	r2,r2,3
 1009df0:	1000031e 	bne	r2,zero,1009e00 <_write+0x13c>
			ret = resp.args.int_field1;
 1009df4:	e0bf7e17 	ldw	r2,-520(fp)
 1009df8:	e0bf7715 	stw	r2,-548(fp)
 1009dfc:	00000206 	br	1009e08 <_write+0x144>
		else
			ret = -EINVAL;
 1009e00:	00bffa84 	movi	r2,-22
 1009e04:	e0bf7715 	stw	r2,-548(fp)
	}

	return ret;
 1009e08:	e0bf7717 	ldw	r2,-548(fp)

}
 1009e0c:	e037883a 	mov	sp,fp
 1009e10:	dfc00117 	ldw	ra,4(sp)
 1009e14:	df000017 	ldw	fp,0(sp)
 1009e18:	dec00204 	addi	sp,sp,8
 1009e1c:	f800283a 	ret

01009e20 <_close>:
 *
 *       Close a file.  Minimal implementation
 *
 *************************************************************************/
int _close(int fd)
{
 1009e20:	defff104 	addi	sp,sp,-60
 1009e24:	dfc00e15 	stw	ra,56(sp)
 1009e28:	df000d15 	stw	fp,52(sp)
 1009e2c:	df000d04 	addi	fp,sp,52
 1009e30:	e13fff15 	stw	r4,-4(fp)
	int ret;
	struct rpmsg_rpc_syscall syscall;
	struct rpmsg_rpc_syscall resp;
	int payload_size = sizeof(syscall);
 1009e34:	00800404 	movi	r2,16
 1009e38:	e0bff515 	stw	r2,-44(fp)
	struct rpmsg_rpc_data *rpc = rpmsg_default_rpc;
 1009e3c:	d0a75217 	ldw	r2,-25272(gp)
 1009e40:	e0bff615 	stw	r2,-40(fp)

	if (rpc == NULL)
 1009e44:	e0bff617 	ldw	r2,-40(fp)
 1009e48:	1000021e 	bne	r2,zero,1009e54 <_close+0x34>
		return -EINVAL;
 1009e4c:	00bffa84 	movi	r2,-22
 1009e50:	00001d06 	br	1009ec8 <_close+0xa8>
	syscall.id = CLOSE_SYSCALL_ID;
 1009e54:	00800084 	movi	r2,2
 1009e58:	e0bff715 	stw	r2,-36(fp)
	syscall.args.int_field1 = fd;
 1009e5c:	e0bfff17 	ldw	r2,-4(fp)
 1009e60:	e0bff815 	stw	r2,-32(fp)
	syscall.args.int_field2 = 0;	/*not used */
 1009e64:	e03ff915 	stw	zero,-28(fp)
	syscall.args.data_len = 0;	/*not used */
 1009e68:	e03ffa15 	stw	zero,-24(fp)

	resp.id = 0;
 1009e6c:	e03ffb15 	stw	zero,-20(fp)
	ret = rpmsg_rpc_send(rpc, (void*)&syscall, payload_size,
 1009e70:	e13ff517 	ldw	r4,-44(fp)
 1009e74:	e17ffb04 	addi	r5,fp,-20
 1009e78:	e0fff704 	addi	r3,fp,-36
 1009e7c:	00800404 	movi	r2,16
 1009e80:	d8800015 	stw	r2,0(sp)
 1009e84:	280f883a 	mov	r7,r5
 1009e88:	200d883a 	mov	r6,r4
 1009e8c:	180b883a 	mov	r5,r3
 1009e90:	e13ff617 	ldw	r4,-40(fp)
 1009e94:	10098840 	call	1009884 <rpmsg_rpc_send>
 1009e98:	e0bff415 	stw	r2,-48(fp)
			     (void*)&resp, sizeof(resp));

	if (ret >= 0) {
 1009e9c:	e0bff417 	ldw	r2,-48(fp)
 1009ea0:	10000816 	blt	r2,zero,1009ec4 <_close+0xa4>
		if (resp.id == CLOSE_SYSCALL_ID)
 1009ea4:	e0bffb17 	ldw	r2,-20(fp)
 1009ea8:	10800098 	cmpnei	r2,r2,2
 1009eac:	1000031e 	bne	r2,zero,1009ebc <_close+0x9c>
			ret = resp.args.int_field1;
 1009eb0:	e0bffc17 	ldw	r2,-16(fp)
 1009eb4:	e0bff415 	stw	r2,-48(fp)
 1009eb8:	00000206 	br	1009ec4 <_close+0xa4>
		else
			ret = -EINVAL;
 1009ebc:	00bffa84 	movi	r2,-22
 1009ec0:	e0bff415 	stw	r2,-48(fp)
	}

	return ret;
 1009ec4:	e0bff417 	ldw	r2,-48(fp)
}
 1009ec8:	e037883a 	mov	sp,fp
 1009ecc:	dfc00117 	ldw	ra,4(sp)
 1009ed0:	df000017 	ldw	fp,0(sp)
 1009ed4:	dec00204 	addi	sp,sp,8
 1009ed8:	f800283a 	ret

01009edc <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1009edc:	defffd04 	addi	sp,sp,-12
 1009ee0:	dfc00215 	stw	ra,8(sp)
 1009ee4:	df000115 	stw	fp,4(sp)
 1009ee8:	df000104 	addi	fp,sp,4
 1009eec:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 1009ef0:	e13fff17 	ldw	r4,-4(fp)
 1009ef4:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 1009ef8:	e037883a 	mov	sp,fp
 1009efc:	dfc00117 	ldw	ra,4(sp)
 1009f00:	df000017 	ldw	fp,0(sp)
 1009f04:	dec00204 	addi	sp,sp,8
 1009f08:	f800283a 	ret

01009f0c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 1009f0c:	defffd04 	addi	sp,sp,-12
 1009f10:	dfc00215 	stw	ra,8(sp)
 1009f14:	df000115 	stw	fp,4(sp)
 1009f18:	df000104 	addi	fp,sp,4
 1009f1c:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 1009f20:	e13fff17 	ldw	r4,-4(fp)
 1009f24:	10011840 	call	1001184 <vPortFree>
}
 1009f28:	0001883a 	nop
 1009f2c:	e037883a 	mov	sp,fp
 1009f30:	dfc00117 	ldw	ra,4(sp)
 1009f34:	df000017 	ldw	fp,0(sp)
 1009f38:	dec00204 	addi	sp,sp,8
 1009f3c:	f800283a 	ret

01009f40 <elf_is_64>:

#include <lib/include/openamp/elf_loader.h>
#include <lib/include/openamp/remoteproc.h>

static int elf_is_64(const void *elf_info)
{
 1009f40:	defffd04 	addi	sp,sp,-12
 1009f44:	df000215 	stw	fp,8(sp)
 1009f48:	df000204 	addi	fp,sp,8
 1009f4c:	e13fff15 	stw	r4,-4(fp)
	const unsigned char *tmp = elf_info;
 1009f50:	e0bfff17 	ldw	r2,-4(fp)
 1009f54:	e0bffe15 	stw	r2,-8(fp)

	if (tmp[EI_CLASS] == ELFCLASS64)
 1009f58:	e0bffe17 	ldw	r2,-8(fp)
 1009f5c:	10800104 	addi	r2,r2,4
 1009f60:	10800003 	ldbu	r2,0(r2)
 1009f64:	10803fcc 	andi	r2,r2,255
 1009f68:	10800098 	cmpnei	r2,r2,2
 1009f6c:	1000021e 	bne	r2,zero,1009f78 <elf_is_64+0x38>
		return 1;
 1009f70:	00800044 	movi	r2,1
 1009f74:	00000106 	br	1009f7c <elf_is_64+0x3c>
	else
		return 0;
 1009f78:	0005883a 	mov	r2,zero
}
 1009f7c:	e037883a 	mov	sp,fp
 1009f80:	df000017 	ldw	fp,0(sp)
 1009f84:	dec00104 	addi	sp,sp,4
 1009f88:	f800283a 	ret

01009f8c <elf_ehdr_size>:

static size_t elf_ehdr_size(const void *elf_info)
{
 1009f8c:	defffd04 	addi	sp,sp,-12
 1009f90:	dfc00215 	stw	ra,8(sp)
 1009f94:	df000115 	stw	fp,4(sp)
 1009f98:	df000104 	addi	fp,sp,4
 1009f9c:	e13fff15 	stw	r4,-4(fp)
	if (elf_info == NULL)
 1009fa0:	e0bfff17 	ldw	r2,-4(fp)
 1009fa4:	1000021e 	bne	r2,zero,1009fb0 <elf_ehdr_size+0x24>
		return sizeof(Elf64_Ehdr);
 1009fa8:	00801004 	movi	r2,64
 1009fac:	00000606 	br	1009fc8 <elf_ehdr_size+0x3c>
	else if (elf_is_64(elf_info) != 0)
 1009fb0:	e13fff17 	ldw	r4,-4(fp)
 1009fb4:	1009f400 	call	1009f40 <elf_is_64>
 1009fb8:	10000226 	beq	r2,zero,1009fc4 <elf_ehdr_size+0x38>
		return sizeof(Elf64_Ehdr);
 1009fbc:	00801004 	movi	r2,64
 1009fc0:	00000106 	br	1009fc8 <elf_ehdr_size+0x3c>
	else
		return sizeof(Elf32_Ehdr);
 1009fc4:	00800d04 	movi	r2,52
}
 1009fc8:	e037883a 	mov	sp,fp
 1009fcc:	dfc00117 	ldw	ra,4(sp)
 1009fd0:	df000017 	ldw	fp,0(sp)
 1009fd4:	dec00204 	addi	sp,sp,8
 1009fd8:	f800283a 	ret

01009fdc <elf_phoff>:

static size_t elf_phoff(const void *elf_info)
{
 1009fdc:	defffb04 	addi	sp,sp,-20
 1009fe0:	dfc00415 	stw	ra,16(sp)
 1009fe4:	df000315 	stw	fp,12(sp)
 1009fe8:	df000304 	addi	fp,sp,12
 1009fec:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 1009ff0:	e13fff17 	ldw	r4,-4(fp)
 1009ff4:	1009f400 	call	1009f40 <elf_is_64>
 1009ff8:	1000051e 	bne	r2,zero,100a010 <elf_phoff+0x34>
		const Elf32_Ehdr *ehdr = elf_info;
 1009ffc:	e0bfff17 	ldw	r2,-4(fp)
 100a000:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phoff;
 100a004:	e0bffd17 	ldw	r2,-12(fp)
 100a008:	10800717 	ldw	r2,28(r2)
 100a00c:	00000506 	br	100a024 <elf_phoff+0x48>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a010:	e0bfff17 	ldw	r2,-4(fp)
 100a014:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phoff;
 100a018:	e13ffe17 	ldw	r4,-8(fp)
 100a01c:	20800817 	ldw	r2,32(r4)
 100a020:	20c00917 	ldw	r3,36(r4)
	}
}
 100a024:	e037883a 	mov	sp,fp
 100a028:	dfc00117 	ldw	ra,4(sp)
 100a02c:	df000017 	ldw	fp,0(sp)
 100a030:	dec00204 	addi	sp,sp,8
 100a034:	f800283a 	ret

0100a038 <elf_phentsize>:

static size_t elf_phentsize(const void *elf_info)
{
 100a038:	defffb04 	addi	sp,sp,-20
 100a03c:	dfc00415 	stw	ra,16(sp)
 100a040:	df000315 	stw	fp,12(sp)
 100a044:	df000304 	addi	fp,sp,12
 100a048:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a04c:	e13fff17 	ldw	r4,-4(fp)
 100a050:	1009f400 	call	1009f40 <elf_is_64>
 100a054:	1000061e 	bne	r2,zero,100a070 <elf_phentsize+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 100a058:	e0bfff17 	ldw	r2,-4(fp)
 100a05c:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phentsize;
 100a060:	e0bffd17 	ldw	r2,-12(fp)
 100a064:	10800a8b 	ldhu	r2,42(r2)
 100a068:	10bfffcc 	andi	r2,r2,65535
 100a06c:	00000506 	br	100a084 <elf_phentsize+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a070:	e0bfff17 	ldw	r2,-4(fp)
 100a074:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phentsize;
 100a078:	e0bffe17 	ldw	r2,-8(fp)
 100a07c:	10800d8b 	ldhu	r2,54(r2)
 100a080:	10bfffcc 	andi	r2,r2,65535
	}
}
 100a084:	e037883a 	mov	sp,fp
 100a088:	dfc00117 	ldw	ra,4(sp)
 100a08c:	df000017 	ldw	fp,0(sp)
 100a090:	dec00204 	addi	sp,sp,8
 100a094:	f800283a 	ret

0100a098 <elf_phnum>:

static int elf_phnum(const void *elf_info)
{
 100a098:	defffb04 	addi	sp,sp,-20
 100a09c:	dfc00415 	stw	ra,16(sp)
 100a0a0:	df000315 	stw	fp,12(sp)
 100a0a4:	df000304 	addi	fp,sp,12
 100a0a8:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a0ac:	e13fff17 	ldw	r4,-4(fp)
 100a0b0:	1009f400 	call	1009f40 <elf_is_64>
 100a0b4:	1000061e 	bne	r2,zero,100a0d0 <elf_phnum+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 100a0b8:	e0bfff17 	ldw	r2,-4(fp)
 100a0bc:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_phnum;
 100a0c0:	e0bffd17 	ldw	r2,-12(fp)
 100a0c4:	10800b0b 	ldhu	r2,44(r2)
 100a0c8:	10bfffcc 	andi	r2,r2,65535
 100a0cc:	00000506 	br	100a0e4 <elf_phnum+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a0d0:	e0bfff17 	ldw	r2,-4(fp)
 100a0d4:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_phnum;
 100a0d8:	e0bffe17 	ldw	r2,-8(fp)
 100a0dc:	10800e0b 	ldhu	r2,56(r2)
 100a0e0:	10bfffcc 	andi	r2,r2,65535
	}
}
 100a0e4:	e037883a 	mov	sp,fp
 100a0e8:	dfc00117 	ldw	ra,4(sp)
 100a0ec:	df000017 	ldw	fp,0(sp)
 100a0f0:	dec00204 	addi	sp,sp,8
 100a0f4:	f800283a 	ret

0100a0f8 <elf_shoff>:

static size_t elf_shoff(const void *elf_info)
{
 100a0f8:	defffb04 	addi	sp,sp,-20
 100a0fc:	dfc00415 	stw	ra,16(sp)
 100a100:	df000315 	stw	fp,12(sp)
 100a104:	df000304 	addi	fp,sp,12
 100a108:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a10c:	e13fff17 	ldw	r4,-4(fp)
 100a110:	1009f400 	call	1009f40 <elf_is_64>
 100a114:	1000051e 	bne	r2,zero,100a12c <elf_shoff+0x34>
		const Elf32_Ehdr *ehdr = elf_info;
 100a118:	e0bfff17 	ldw	r2,-4(fp)
 100a11c:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shoff;
 100a120:	e0bffd17 	ldw	r2,-12(fp)
 100a124:	10800817 	ldw	r2,32(r2)
 100a128:	00000506 	br	100a140 <elf_shoff+0x48>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a12c:	e0bfff17 	ldw	r2,-4(fp)
 100a130:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shoff;
 100a134:	e13ffe17 	ldw	r4,-8(fp)
 100a138:	20800a17 	ldw	r2,40(r4)
 100a13c:	20c00b17 	ldw	r3,44(r4)
	}
}
 100a140:	e037883a 	mov	sp,fp
 100a144:	dfc00117 	ldw	ra,4(sp)
 100a148:	df000017 	ldw	fp,0(sp)
 100a14c:	dec00204 	addi	sp,sp,8
 100a150:	f800283a 	ret

0100a154 <elf_shentsize>:

static size_t elf_shentsize(const void *elf_info)
{
 100a154:	defffb04 	addi	sp,sp,-20
 100a158:	dfc00415 	stw	ra,16(sp)
 100a15c:	df000315 	stw	fp,12(sp)
 100a160:	df000304 	addi	fp,sp,12
 100a164:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a168:	e13fff17 	ldw	r4,-4(fp)
 100a16c:	1009f400 	call	1009f40 <elf_is_64>
 100a170:	1000061e 	bne	r2,zero,100a18c <elf_shentsize+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 100a174:	e0bfff17 	ldw	r2,-4(fp)
 100a178:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shentsize;
 100a17c:	e0bffd17 	ldw	r2,-12(fp)
 100a180:	10800b8b 	ldhu	r2,46(r2)
 100a184:	10bfffcc 	andi	r2,r2,65535
 100a188:	00000506 	br	100a1a0 <elf_shentsize+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a18c:	e0bfff17 	ldw	r2,-4(fp)
 100a190:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shentsize;
 100a194:	e0bffe17 	ldw	r2,-8(fp)
 100a198:	10800e8b 	ldhu	r2,58(r2)
 100a19c:	10bfffcc 	andi	r2,r2,65535
	}
}
 100a1a0:	e037883a 	mov	sp,fp
 100a1a4:	dfc00117 	ldw	ra,4(sp)
 100a1a8:	df000017 	ldw	fp,0(sp)
 100a1ac:	dec00204 	addi	sp,sp,8
 100a1b0:	f800283a 	ret

0100a1b4 <elf_shnum>:

static int elf_shnum(const void *elf_info)
{
 100a1b4:	defffb04 	addi	sp,sp,-20
 100a1b8:	dfc00415 	stw	ra,16(sp)
 100a1bc:	df000315 	stw	fp,12(sp)
 100a1c0:	df000304 	addi	fp,sp,12
 100a1c4:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a1c8:	e13fff17 	ldw	r4,-4(fp)
 100a1cc:	1009f400 	call	1009f40 <elf_is_64>
 100a1d0:	1000061e 	bne	r2,zero,100a1ec <elf_shnum+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 100a1d4:	e0bfff17 	ldw	r2,-4(fp)
 100a1d8:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shnum;
 100a1dc:	e0bffd17 	ldw	r2,-12(fp)
 100a1e0:	10800c0b 	ldhu	r2,48(r2)
 100a1e4:	10bfffcc 	andi	r2,r2,65535
 100a1e8:	00000506 	br	100a200 <elf_shnum+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a1ec:	e0bfff17 	ldw	r2,-4(fp)
 100a1f0:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shnum;
 100a1f4:	e0bffe17 	ldw	r2,-8(fp)
 100a1f8:	10800f0b 	ldhu	r2,60(r2)
 100a1fc:	10bfffcc 	andi	r2,r2,65535
	}
}
 100a200:	e037883a 	mov	sp,fp
 100a204:	dfc00117 	ldw	ra,4(sp)
 100a208:	df000017 	ldw	fp,0(sp)
 100a20c:	dec00204 	addi	sp,sp,8
 100a210:	f800283a 	ret

0100a214 <elf_shstrndx>:

static int elf_shstrndx(const void *elf_info)
{
 100a214:	defffb04 	addi	sp,sp,-20
 100a218:	dfc00415 	stw	ra,16(sp)
 100a21c:	df000315 	stw	fp,12(sp)
 100a220:	df000304 	addi	fp,sp,12
 100a224:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a228:	e13fff17 	ldw	r4,-4(fp)
 100a22c:	1009f400 	call	1009f40 <elf_is_64>
 100a230:	1000061e 	bne	r2,zero,100a24c <elf_shstrndx+0x38>
		const Elf32_Ehdr *ehdr = elf_info;
 100a234:	e0bfff17 	ldw	r2,-4(fp)
 100a238:	e0bffd15 	stw	r2,-12(fp)

		return ehdr->e_shstrndx;
 100a23c:	e0bffd17 	ldw	r2,-12(fp)
 100a240:	10800c8b 	ldhu	r2,50(r2)
 100a244:	10bfffcc 	andi	r2,r2,65535
 100a248:	00000506 	br	100a260 <elf_shstrndx+0x4c>
	} else {
		const Elf64_Ehdr *ehdr = elf_info;
 100a24c:	e0bfff17 	ldw	r2,-4(fp)
 100a250:	e0bffe15 	stw	r2,-8(fp)

		return ehdr->e_shstrndx;
 100a254:	e0bffe17 	ldw	r2,-8(fp)
 100a258:	10800f8b 	ldhu	r2,62(r2)
 100a25c:	10bfffcc 	andi	r2,r2,65535
	}
}
 100a260:	e037883a 	mov	sp,fp
 100a264:	dfc00117 	ldw	ra,4(sp)
 100a268:	df000017 	ldw	fp,0(sp)
 100a26c:	dec00204 	addi	sp,sp,8
 100a270:	f800283a 	ret

0100a274 <elf_phtable_ptr>:

static void **elf_phtable_ptr(void *elf_info)
{
 100a274:	defffb04 	addi	sp,sp,-20
 100a278:	dfc00415 	stw	ra,16(sp)
 100a27c:	df000315 	stw	fp,12(sp)
 100a280:	df000304 	addi	fp,sp,12
 100a284:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a288:	e13fff17 	ldw	r4,-4(fp)
 100a28c:	1009f400 	call	1009f40 <elf_is_64>
 100a290:	1000051e 	bne	r2,zero,100a2a8 <elf_phtable_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 100a294:	e0bfff17 	ldw	r2,-4(fp)
 100a298:	e0bffd15 	stw	r2,-12(fp)

		return (void **)&einfo->phdrs;
 100a29c:	e0bffd17 	ldw	r2,-12(fp)
 100a2a0:	10800e04 	addi	r2,r2,56
 100a2a4:	00000406 	br	100a2b8 <elf_phtable_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 100a2a8:	e0bfff17 	ldw	r2,-4(fp)
 100a2ac:	e0bffe15 	stw	r2,-8(fp)

		return (void **)&einfo->phdrs;
 100a2b0:	e0bffe17 	ldw	r2,-8(fp)
 100a2b4:	10801104 	addi	r2,r2,68
	}
}
 100a2b8:	e037883a 	mov	sp,fp
 100a2bc:	dfc00117 	ldw	ra,4(sp)
 100a2c0:	df000017 	ldw	fp,0(sp)
 100a2c4:	dec00204 	addi	sp,sp,8
 100a2c8:	f800283a 	ret

0100a2cc <elf_shtable_ptr>:

static void **elf_shtable_ptr(void *elf_info)
{
 100a2cc:	defffb04 	addi	sp,sp,-20
 100a2d0:	dfc00415 	stw	ra,16(sp)
 100a2d4:	df000315 	stw	fp,12(sp)
 100a2d8:	df000304 	addi	fp,sp,12
 100a2dc:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a2e0:	e13fff17 	ldw	r4,-4(fp)
 100a2e4:	1009f400 	call	1009f40 <elf_is_64>
 100a2e8:	1000051e 	bne	r2,zero,100a300 <elf_shtable_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 100a2ec:	e0bfff17 	ldw	r2,-4(fp)
 100a2f0:	e0bffd15 	stw	r2,-12(fp)

		return (void **)&einfo->shdrs;
 100a2f4:	e0bffd17 	ldw	r2,-12(fp)
 100a2f8:	10800f04 	addi	r2,r2,60
 100a2fc:	00000406 	br	100a310 <elf_shtable_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 100a300:	e0bfff17 	ldw	r2,-4(fp)
 100a304:	e0bffe15 	stw	r2,-8(fp)

		return (void **)&einfo->shdrs;
 100a308:	e0bffe17 	ldw	r2,-8(fp)
 100a30c:	10801204 	addi	r2,r2,72
	}
}
 100a310:	e037883a 	mov	sp,fp
 100a314:	dfc00117 	ldw	ra,4(sp)
 100a318:	df000017 	ldw	fp,0(sp)
 100a31c:	dec00204 	addi	sp,sp,8
 100a320:	f800283a 	ret

0100a324 <elf_shstrtab_ptr>:

static void **elf_shstrtab_ptr(void *elf_info)
{
 100a324:	defffb04 	addi	sp,sp,-20
 100a328:	dfc00415 	stw	ra,16(sp)
 100a32c:	df000315 	stw	fp,12(sp)
 100a330:	df000304 	addi	fp,sp,12
 100a334:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a338:	e13fff17 	ldw	r4,-4(fp)
 100a33c:	1009f400 	call	1009f40 <elf_is_64>
 100a340:	1000051e 	bne	r2,zero,100a358 <elf_shstrtab_ptr+0x34>
		struct elf32_info *einfo = elf_info;
 100a344:	e0bfff17 	ldw	r2,-4(fp)
 100a348:	e0bffd15 	stw	r2,-12(fp)

		return &einfo->shstrtab;
 100a34c:	e0bffd17 	ldw	r2,-12(fp)
 100a350:	10801004 	addi	r2,r2,64
 100a354:	00000406 	br	100a368 <elf_shstrtab_ptr+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 100a358:	e0bfff17 	ldw	r2,-4(fp)
 100a35c:	e0bffe15 	stw	r2,-8(fp)

		return &einfo->shstrtab;
 100a360:	e0bffe17 	ldw	r2,-8(fp)
 100a364:	10801304 	addi	r2,r2,76
	}
}
 100a368:	e037883a 	mov	sp,fp
 100a36c:	dfc00117 	ldw	ra,4(sp)
 100a370:	df000017 	ldw	fp,0(sp)
 100a374:	dec00204 	addi	sp,sp,8
 100a378:	f800283a 	ret

0100a37c <elf_load_state>:

static int *elf_load_state(void *elf_info)
{
 100a37c:	defffb04 	addi	sp,sp,-20
 100a380:	dfc00415 	stw	ra,16(sp)
 100a384:	df000315 	stw	fp,12(sp)
 100a388:	df000304 	addi	fp,sp,12
 100a38c:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a390:	e13fff17 	ldw	r4,-4(fp)
 100a394:	1009f400 	call	1009f40 <elf_is_64>
 100a398:	1000051e 	bne	r2,zero,100a3b0 <elf_load_state+0x34>
		struct elf32_info *einfo = elf_info;
 100a39c:	e0bfff17 	ldw	r2,-4(fp)
 100a3a0:	e0bffd15 	stw	r2,-12(fp)

		return &einfo->load_state;
 100a3a4:	e0bffd17 	ldw	r2,-12(fp)
 100a3a8:	10800d04 	addi	r2,r2,52
 100a3ac:	00000406 	br	100a3c0 <elf_load_state+0x44>
	} else {
		struct elf64_info *einfo = elf_info;
 100a3b0:	e0bfff17 	ldw	r2,-4(fp)
 100a3b4:	e0bffe15 	stw	r2,-8(fp)

		return &einfo->load_state;
 100a3b8:	e0bffe17 	ldw	r2,-8(fp)
 100a3bc:	10801004 	addi	r2,r2,64
	}
}
 100a3c0:	e037883a 	mov	sp,fp
 100a3c4:	dfc00117 	ldw	ra,4(sp)
 100a3c8:	df000017 	ldw	fp,0(sp)
 100a3cc:	dec00204 	addi	sp,sp,8
 100a3d0:	f800283a 	ret

0100a3d4 <elf_parse_segment>:
static void elf_parse_segment(void *elf_info, const void *elf_phdr,
			      unsigned int *p_type, size_t *p_offset,
			      metal_phys_addr_t *p_vaddr,
			      metal_phys_addr_t *p_paddr,
			      size_t *p_filesz, size_t *p_memsz)
{
 100a3d4:	defff804 	addi	sp,sp,-32
 100a3d8:	dfc00715 	stw	ra,28(sp)
 100a3dc:	df000615 	stw	fp,24(sp)
 100a3e0:	df000604 	addi	fp,sp,24
 100a3e4:	e13ffc15 	stw	r4,-16(fp)
 100a3e8:	e17ffd15 	stw	r5,-12(fp)
 100a3ec:	e1bffe15 	stw	r6,-8(fp)
 100a3f0:	e1ffff15 	stw	r7,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a3f4:	e13ffc17 	ldw	r4,-16(fp)
 100a3f8:	1009f400 	call	1009f40 <elf_is_64>
 100a3fc:	1000271e 	bne	r2,zero,100a49c <elf_parse_segment+0xc8>
		const Elf32_Phdr *phdr = elf_phdr;
 100a400:	e0bffd17 	ldw	r2,-12(fp)
 100a404:	e0bffa15 	stw	r2,-24(fp)

		if (p_type != NULL)
 100a408:	e0bffe17 	ldw	r2,-8(fp)
 100a40c:	10000426 	beq	r2,zero,100a420 <elf_parse_segment+0x4c>
			*p_type = (unsigned int)phdr->p_type;
 100a410:	e0bffa17 	ldw	r2,-24(fp)
 100a414:	10c00017 	ldw	r3,0(r2)
 100a418:	e0bffe17 	ldw	r2,-8(fp)
 100a41c:	10c00015 	stw	r3,0(r2)
		if (p_offset != NULL)
 100a420:	e0bfff17 	ldw	r2,-4(fp)
 100a424:	10000426 	beq	r2,zero,100a438 <elf_parse_segment+0x64>
			*p_offset = (size_t)phdr->p_offset;
 100a428:	e0bffa17 	ldw	r2,-24(fp)
 100a42c:	10c00117 	ldw	r3,4(r2)
 100a430:	e0bfff17 	ldw	r2,-4(fp)
 100a434:	10c00015 	stw	r3,0(r2)
		if (p_vaddr != NULL)
 100a438:	e0800217 	ldw	r2,8(fp)
 100a43c:	10000426 	beq	r2,zero,100a450 <elf_parse_segment+0x7c>
			*p_vaddr = (metal_phys_addr_t)phdr->p_vaddr;
 100a440:	e0bffa17 	ldw	r2,-24(fp)
 100a444:	10c00217 	ldw	r3,8(r2)
 100a448:	e0800217 	ldw	r2,8(fp)
 100a44c:	10c00015 	stw	r3,0(r2)
		if (p_paddr != NULL)
 100a450:	e0800317 	ldw	r2,12(fp)
 100a454:	10000426 	beq	r2,zero,100a468 <elf_parse_segment+0x94>
			*p_paddr = (metal_phys_addr_t)phdr->p_paddr;
 100a458:	e0bffa17 	ldw	r2,-24(fp)
 100a45c:	10c00317 	ldw	r3,12(r2)
 100a460:	e0800317 	ldw	r2,12(fp)
 100a464:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
 100a468:	e0800417 	ldw	r2,16(fp)
 100a46c:	10000426 	beq	r2,zero,100a480 <elf_parse_segment+0xac>
			*p_filesz = (size_t)phdr->p_filesz;
 100a470:	e0bffa17 	ldw	r2,-24(fp)
 100a474:	10c00417 	ldw	r3,16(r2)
 100a478:	e0800417 	ldw	r2,16(fp)
 100a47c:	10c00015 	stw	r3,0(r2)
		if (p_memsz != NULL)
 100a480:	e0800517 	ldw	r2,20(fp)
 100a484:	10003526 	beq	r2,zero,100a55c <elf_parse_segment+0x188>
			*p_memsz = (size_t)phdr->p_memsz;
 100a488:	e0bffa17 	ldw	r2,-24(fp)
 100a48c:	10c00517 	ldw	r3,20(r2)
 100a490:	e0800517 	ldw	r2,20(fp)
 100a494:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
			*p_filesz = (size_t)phdr->p_filesz;
		if (p_memsz != NULL)
			*p_memsz = (size_t)phdr->p_memsz;
	}
}
 100a498:	00003006 	br	100a55c <elf_parse_segment+0x188>
		if (p_filesz != NULL)
			*p_filesz = (size_t)phdr->p_filesz;
		if (p_memsz != NULL)
			*p_memsz = (size_t)phdr->p_memsz;
	} else {
		const Elf64_Phdr *phdr = elf_phdr;
 100a49c:	e0bffd17 	ldw	r2,-12(fp)
 100a4a0:	e0bffb15 	stw	r2,-20(fp)

		if (p_type != NULL)
 100a4a4:	e0bffe17 	ldw	r2,-8(fp)
 100a4a8:	10000426 	beq	r2,zero,100a4bc <elf_parse_segment+0xe8>
			*p_type = (unsigned int)phdr->p_type;
 100a4ac:	e0bffb17 	ldw	r2,-20(fp)
 100a4b0:	10c00017 	ldw	r3,0(r2)
 100a4b4:	e0bffe17 	ldw	r2,-8(fp)
 100a4b8:	10c00015 	stw	r3,0(r2)
		if (p_offset != NULL)
 100a4bc:	e0bfff17 	ldw	r2,-4(fp)
 100a4c0:	10000626 	beq	r2,zero,100a4dc <elf_parse_segment+0x108>
			*p_offset = (size_t)phdr->p_offset;
 100a4c4:	e13ffb17 	ldw	r4,-20(fp)
 100a4c8:	20800217 	ldw	r2,8(r4)
 100a4cc:	20c00317 	ldw	r3,12(r4)
 100a4d0:	1007883a 	mov	r3,r2
 100a4d4:	e0bfff17 	ldw	r2,-4(fp)
 100a4d8:	10c00015 	stw	r3,0(r2)
		if (p_vaddr != NULL)
 100a4dc:	e0800217 	ldw	r2,8(fp)
 100a4e0:	10000626 	beq	r2,zero,100a4fc <elf_parse_segment+0x128>
			*p_vaddr = (metal_phys_addr_t)phdr->p_vaddr;
 100a4e4:	e13ffb17 	ldw	r4,-20(fp)
 100a4e8:	20800417 	ldw	r2,16(r4)
 100a4ec:	20c00517 	ldw	r3,20(r4)
 100a4f0:	1007883a 	mov	r3,r2
 100a4f4:	e0800217 	ldw	r2,8(fp)
 100a4f8:	10c00015 	stw	r3,0(r2)
		if (p_paddr != NULL)
 100a4fc:	e0800317 	ldw	r2,12(fp)
 100a500:	10000626 	beq	r2,zero,100a51c <elf_parse_segment+0x148>
			*p_paddr = (metal_phys_addr_t)phdr->p_paddr;
 100a504:	e13ffb17 	ldw	r4,-20(fp)
 100a508:	20800617 	ldw	r2,24(r4)
 100a50c:	20c00717 	ldw	r3,28(r4)
 100a510:	1007883a 	mov	r3,r2
 100a514:	e0800317 	ldw	r2,12(fp)
 100a518:	10c00015 	stw	r3,0(r2)
		if (p_filesz != NULL)
 100a51c:	e0800417 	ldw	r2,16(fp)
 100a520:	10000626 	beq	r2,zero,100a53c <elf_parse_segment+0x168>
			*p_filesz = (size_t)phdr->p_filesz;
 100a524:	e13ffb17 	ldw	r4,-20(fp)
 100a528:	20800817 	ldw	r2,32(r4)
 100a52c:	20c00917 	ldw	r3,36(r4)
 100a530:	1007883a 	mov	r3,r2
 100a534:	e0800417 	ldw	r2,16(fp)
 100a538:	10c00015 	stw	r3,0(r2)
		if (p_memsz != NULL)
 100a53c:	e0800517 	ldw	r2,20(fp)
 100a540:	10000626 	beq	r2,zero,100a55c <elf_parse_segment+0x188>
			*p_memsz = (size_t)phdr->p_memsz;
 100a544:	e13ffb17 	ldw	r4,-20(fp)
 100a548:	20800a17 	ldw	r2,40(r4)
 100a54c:	20c00b17 	ldw	r3,44(r4)
 100a550:	1007883a 	mov	r3,r2
 100a554:	e0800517 	ldw	r2,20(fp)
 100a558:	10c00015 	stw	r3,0(r2)
	}
}
 100a55c:	0001883a 	nop
 100a560:	e037883a 	mov	sp,fp
 100a564:	dfc00117 	ldw	ra,4(sp)
 100a568:	df000017 	ldw	fp,0(sp)
 100a56c:	dec00204 	addi	sp,sp,8
 100a570:	f800283a 	ret

0100a574 <elf_get_segment_from_index>:

static const void *elf_get_segment_from_index(void *elf_info, int index)
{
 100a574:	defff604 	addi	sp,sp,-40
 100a578:	dfc00915 	stw	ra,36(sp)
 100a57c:	df000815 	stw	fp,32(sp)
 100a580:	df000804 	addi	fp,sp,32
 100a584:	e13ffe15 	stw	r4,-8(fp)
 100a588:	e17fff15 	stw	r5,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a58c:	e13ffe17 	ldw	r4,-8(fp)
 100a590:	1009f400 	call	1009f40 <elf_is_64>
 100a594:	1000191e 	bne	r2,zero,100a5fc <elf_get_segment_from_index+0x88>
		const struct elf32_info *einfo = elf_info;
 100a598:	e0bffe17 	ldw	r2,-8(fp)
 100a59c:	e0bff815 	stw	r2,-32(fp)
		const Elf32_Ehdr *ehdr = &einfo->ehdr;
 100a5a0:	e0bff817 	ldw	r2,-32(fp)
 100a5a4:	e0bff915 	stw	r2,-28(fp)
		const Elf32_Phdr *phdrs = einfo->phdrs;
 100a5a8:	e0bff817 	ldw	r2,-32(fp)
 100a5ac:	10800e17 	ldw	r2,56(r2)
 100a5b0:	e0bffa15 	stw	r2,-24(fp)

		if (phdrs == NULL)
 100a5b4:	e0bffa17 	ldw	r2,-24(fp)
 100a5b8:	1000021e 	bne	r2,zero,100a5c4 <elf_get_segment_from_index+0x50>
			return NULL;
 100a5bc:	0005883a 	mov	r2,zero
 100a5c0:	00002606 	br	100a65c <elf_get_segment_from_index+0xe8>
		if (index < 0 || index >= ehdr->e_phnum)
 100a5c4:	e0bfff17 	ldw	r2,-4(fp)
 100a5c8:	10000516 	blt	r2,zero,100a5e0 <elf_get_segment_from_index+0x6c>
 100a5cc:	e0bff917 	ldw	r2,-28(fp)
 100a5d0:	10800b0b 	ldhu	r2,44(r2)
 100a5d4:	10bfffcc 	andi	r2,r2,65535
 100a5d8:	e0ffff17 	ldw	r3,-4(fp)
 100a5dc:	18800216 	blt	r3,r2,100a5e8 <elf_get_segment_from_index+0x74>
			return NULL;
 100a5e0:	0005883a 	mov	r2,zero
 100a5e4:	00001d06 	br	100a65c <elf_get_segment_from_index+0xe8>
		return &phdrs[index];
 100a5e8:	e0bfff17 	ldw	r2,-4(fp)
 100a5ec:	1004917a 	slli	r2,r2,5
 100a5f0:	e0fffa17 	ldw	r3,-24(fp)
 100a5f4:	1885883a 	add	r2,r3,r2
 100a5f8:	00001806 	br	100a65c <elf_get_segment_from_index+0xe8>
	} else {
		const struct elf64_info *einfo = elf_info;
 100a5fc:	e0bffe17 	ldw	r2,-8(fp)
 100a600:	e0bffb15 	stw	r2,-20(fp)
		const Elf64_Ehdr *ehdr = &einfo->ehdr;
 100a604:	e0bffb17 	ldw	r2,-20(fp)
 100a608:	e0bffc15 	stw	r2,-16(fp)
		const Elf64_Phdr *phdrs = einfo->phdrs;
 100a60c:	e0bffb17 	ldw	r2,-20(fp)
 100a610:	10801117 	ldw	r2,68(r2)
 100a614:	e0bffd15 	stw	r2,-12(fp)

		if (phdrs == NULL)
 100a618:	e0bffd17 	ldw	r2,-12(fp)
 100a61c:	1000021e 	bne	r2,zero,100a628 <elf_get_segment_from_index+0xb4>
			return NULL;
 100a620:	0005883a 	mov	r2,zero
 100a624:	00000d06 	br	100a65c <elf_get_segment_from_index+0xe8>
		if (index < 0 || index >= ehdr->e_phnum)
 100a628:	e0bfff17 	ldw	r2,-4(fp)
 100a62c:	10000516 	blt	r2,zero,100a644 <elf_get_segment_from_index+0xd0>
 100a630:	e0bffc17 	ldw	r2,-16(fp)
 100a634:	10800e0b 	ldhu	r2,56(r2)
 100a638:	10bfffcc 	andi	r2,r2,65535
 100a63c:	e0ffff17 	ldw	r3,-4(fp)
 100a640:	18800216 	blt	r3,r2,100a64c <elf_get_segment_from_index+0xd8>
			return NULL;
 100a644:	0005883a 	mov	r2,zero
 100a648:	00000406 	br	100a65c <elf_get_segment_from_index+0xe8>
		return &phdrs[index];
 100a64c:	e0bfff17 	ldw	r2,-4(fp)
 100a650:	10800e24 	muli	r2,r2,56
 100a654:	e0fffd17 	ldw	r3,-12(fp)
 100a658:	1885883a 	add	r2,r3,r2
	}
}
 100a65c:	e037883a 	mov	sp,fp
 100a660:	dfc00117 	ldw	ra,4(sp)
 100a664:	df000017 	ldw	fp,0(sp)
 100a668:	dec00204 	addi	sp,sp,8
 100a66c:	f800283a 	ret

0100a670 <elf_get_section_from_name>:

static void *elf_get_section_from_name(void *elf_info, const char *name)
{
 100a670:	defff404 	addi	sp,sp,-48
 100a674:	dfc00b15 	stw	ra,44(sp)
 100a678:	df000a15 	stw	fp,40(sp)
 100a67c:	df000a04 	addi	fp,sp,40
 100a680:	e13ffe15 	stw	r4,-8(fp)
 100a684:	e17fff15 	stw	r5,-4(fp)
	unsigned int i;
	const char *name_table;

	if (elf_is_64(elf_info) == 0) {
 100a688:	e13ffe17 	ldw	r4,-8(fp)
 100a68c:	1009f400 	call	1009f40 <elf_is_64>
 100a690:	1000291e 	bne	r2,zero,100a738 <elf_get_section_from_name+0xc8>
		struct elf32_info *einfo = elf_info;
 100a694:	e0bffe17 	ldw	r2,-8(fp)
 100a698:	e0bff915 	stw	r2,-28(fp)
		Elf32_Ehdr *ehdr = &einfo->ehdr;
 100a69c:	e0bff917 	ldw	r2,-28(fp)
 100a6a0:	e0bffa15 	stw	r2,-24(fp)
		Elf32_Shdr *shdr = einfo->shdrs;
 100a6a4:	e0bff917 	ldw	r2,-28(fp)
 100a6a8:	10800f17 	ldw	r2,60(r2)
 100a6ac:	e0bff715 	stw	r2,-36(fp)

		name_table = einfo->shstrtab;
 100a6b0:	e0bff917 	ldw	r2,-28(fp)
 100a6b4:	10801017 	ldw	r2,64(r2)
 100a6b8:	e0bffb15 	stw	r2,-20(fp)
		if (shdr == NULL || name_table == NULL)
 100a6bc:	e0bff717 	ldw	r2,-36(fp)
 100a6c0:	10000226 	beq	r2,zero,100a6cc <elf_get_section_from_name+0x5c>
 100a6c4:	e0bffb17 	ldw	r2,-20(fp)
 100a6c8:	1000021e 	bne	r2,zero,100a6d4 <elf_get_section_from_name+0x64>
			return NULL;
 100a6cc:	0005883a 	mov	r2,zero
 100a6d0:	00004206 	br	100a7dc <elf_get_section_from_name+0x16c>
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a6d4:	e03ff615 	stw	zero,-40(fp)
 100a6d8:	00001106 	br	100a720 <elf_get_section_from_name+0xb0>
			if (strcmp(name, name_table + shdr->sh_name))
 100a6dc:	e0bff717 	ldw	r2,-36(fp)
 100a6e0:	10800017 	ldw	r2,0(r2)
 100a6e4:	e0fffb17 	ldw	r3,-20(fp)
 100a6e8:	1885883a 	add	r2,r3,r2
 100a6ec:	100b883a 	mov	r5,r2
 100a6f0:	e13fff17 	ldw	r4,-4(fp)
 100a6f4:	1015d600 	call	1015d60 <strcmp>
 100a6f8:	10000726 	beq	r2,zero,100a718 <elf_get_section_from_name+0xa8>
		Elf32_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a6fc:	e0bff617 	ldw	r2,-40(fp)
 100a700:	10800044 	addi	r2,r2,1
 100a704:	e0bff615 	stw	r2,-40(fp)
 100a708:	e0bff717 	ldw	r2,-36(fp)
 100a70c:	10800a04 	addi	r2,r2,40
 100a710:	e0bff715 	stw	r2,-36(fp)
 100a714:	00000206 	br	100a720 <elf_get_section_from_name+0xb0>
			if (strcmp(name, name_table + shdr->sh_name))
				continue;
			else
				return shdr;
 100a718:	e0bff717 	ldw	r2,-36(fp)
 100a71c:	00002f06 	br	100a7dc <elf_get_section_from_name+0x16c>
		Elf32_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a720:	e0bffa17 	ldw	r2,-24(fp)
 100a724:	10800c0b 	ldhu	r2,48(r2)
 100a728:	10bfffcc 	andi	r2,r2,65535
 100a72c:	e0fff617 	ldw	r3,-40(fp)
 100a730:	18bfea36 	bltu	r3,r2,100a6dc <__alt_data_end+0xff00a6dc>
 100a734:	00002806 	br	100a7d8 <elf_get_section_from_name+0x168>
				continue;
			else
				return shdr;
		}
	} else {
		struct elf64_info *einfo = elf_info;
 100a738:	e0bffe17 	ldw	r2,-8(fp)
 100a73c:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Ehdr *ehdr = &einfo->ehdr;
 100a740:	e0bffc17 	ldw	r2,-16(fp)
 100a744:	e0bffd15 	stw	r2,-12(fp)
		Elf64_Shdr *shdr = einfo->shdrs;
 100a748:	e0bffc17 	ldw	r2,-16(fp)
 100a74c:	10801217 	ldw	r2,72(r2)
 100a750:	e0bff815 	stw	r2,-32(fp)

		name_table = einfo->shstrtab;
 100a754:	e0bffc17 	ldw	r2,-16(fp)
 100a758:	10801317 	ldw	r2,76(r2)
 100a75c:	e0bffb15 	stw	r2,-20(fp)
		if (shdr == NULL || name_table == NULL)
 100a760:	e0bff817 	ldw	r2,-32(fp)
 100a764:	10000226 	beq	r2,zero,100a770 <elf_get_section_from_name+0x100>
 100a768:	e0bffb17 	ldw	r2,-20(fp)
 100a76c:	1000021e 	bne	r2,zero,100a778 <elf_get_section_from_name+0x108>
			return NULL;
 100a770:	0005883a 	mov	r2,zero
 100a774:	00001906 	br	100a7dc <elf_get_section_from_name+0x16c>
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a778:	e03ff615 	stw	zero,-40(fp)
 100a77c:	00001106 	br	100a7c4 <elf_get_section_from_name+0x154>
			if (strcmp(name, name_table + shdr->sh_name))
 100a780:	e0bff817 	ldw	r2,-32(fp)
 100a784:	10800017 	ldw	r2,0(r2)
 100a788:	e0fffb17 	ldw	r3,-20(fp)
 100a78c:	1885883a 	add	r2,r3,r2
 100a790:	100b883a 	mov	r5,r2
 100a794:	e13fff17 	ldw	r4,-4(fp)
 100a798:	1015d600 	call	1015d60 <strcmp>
 100a79c:	10000726 	beq	r2,zero,100a7bc <elf_get_section_from_name+0x14c>
		Elf64_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a7a0:	e0bff617 	ldw	r2,-40(fp)
 100a7a4:	10800044 	addi	r2,r2,1
 100a7a8:	e0bff615 	stw	r2,-40(fp)
 100a7ac:	e0bff817 	ldw	r2,-32(fp)
 100a7b0:	10801004 	addi	r2,r2,64
 100a7b4:	e0bff815 	stw	r2,-32(fp)
 100a7b8:	00000206 	br	100a7c4 <elf_get_section_from_name+0x154>
			if (strcmp(name, name_table + shdr->sh_name))
				continue;
			else
				return shdr;
 100a7bc:	e0bff817 	ldw	r2,-32(fp)
 100a7c0:	00000606 	br	100a7dc <elf_get_section_from_name+0x16c>
		Elf64_Shdr *shdr = einfo->shdrs;

		name_table = einfo->shstrtab;
		if (shdr == NULL || name_table == NULL)
			return NULL;
		for (i = 0; i < ehdr->e_shnum; i++, shdr++) {
 100a7c4:	e0bffd17 	ldw	r2,-12(fp)
 100a7c8:	10800f0b 	ldhu	r2,60(r2)
 100a7cc:	10bfffcc 	andi	r2,r2,65535
 100a7d0:	e0fff617 	ldw	r3,-40(fp)
 100a7d4:	18bfea36 	bltu	r3,r2,100a780 <__alt_data_end+0xff00a780>
				continue;
			else
				return shdr;
		}
	}
	return NULL;
 100a7d8:	0005883a 	mov	r2,zero
}
 100a7dc:	e037883a 	mov	sp,fp
 100a7e0:	dfc00117 	ldw	ra,4(sp)
 100a7e4:	df000017 	ldw	fp,0(sp)
 100a7e8:	dec00204 	addi	sp,sp,8
 100a7ec:	f800283a 	ret

0100a7f0 <elf_get_section_from_index>:

static void *elf_get_section_from_index(void *elf_info, int index)
{
 100a7f0:	defff604 	addi	sp,sp,-40
 100a7f4:	dfc00915 	stw	ra,36(sp)
 100a7f8:	df000815 	stw	fp,32(sp)
 100a7fc:	df000804 	addi	fp,sp,32
 100a800:	e13ffe15 	stw	r4,-8(fp)
 100a804:	e17fff15 	stw	r5,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a808:	e13ffe17 	ldw	r4,-8(fp)
 100a80c:	1009f400 	call	1009f40 <elf_is_64>
 100a810:	10001a1e 	bne	r2,zero,100a87c <elf_get_section_from_index+0x8c>
		struct elf32_info *einfo = elf_info;
 100a814:	e0bffe17 	ldw	r2,-8(fp)
 100a818:	e0bff815 	stw	r2,-32(fp)
		Elf32_Ehdr *ehdr = &einfo->ehdr;
 100a81c:	e0bff817 	ldw	r2,-32(fp)
 100a820:	e0bff915 	stw	r2,-28(fp)
		Elf32_Shdr *shdr = einfo->shdrs;
 100a824:	e0bff817 	ldw	r2,-32(fp)
 100a828:	10800f17 	ldw	r2,60(r2)
 100a82c:	e0bffa15 	stw	r2,-24(fp)

		if (shdr == NULL)
 100a830:	e0bffa17 	ldw	r2,-24(fp)
 100a834:	1000021e 	bne	r2,zero,100a840 <elf_get_section_from_index+0x50>
			return NULL;
 100a838:	0005883a 	mov	r2,zero
 100a83c:	00002806 	br	100a8e0 <elf_get_section_from_index+0xf0>
		if (index < 0 || index >= ehdr->e_shnum)
 100a840:	e0bfff17 	ldw	r2,-4(fp)
 100a844:	10000516 	blt	r2,zero,100a85c <elf_get_section_from_index+0x6c>
 100a848:	e0bff917 	ldw	r2,-28(fp)
 100a84c:	10800c0b 	ldhu	r2,48(r2)
 100a850:	10bfffcc 	andi	r2,r2,65535
 100a854:	e0ffff17 	ldw	r3,-4(fp)
 100a858:	18800216 	blt	r3,r2,100a864 <elf_get_section_from_index+0x74>
			return NULL;
 100a85c:	0005883a 	mov	r2,zero
 100a860:	00001f06 	br	100a8e0 <elf_get_section_from_index+0xf0>
		return &einfo->shdrs[index];
 100a864:	e0bff817 	ldw	r2,-32(fp)
 100a868:	10c00f17 	ldw	r3,60(r2)
 100a86c:	e0bfff17 	ldw	r2,-4(fp)
 100a870:	10800a24 	muli	r2,r2,40
 100a874:	1885883a 	add	r2,r3,r2
 100a878:	00001906 	br	100a8e0 <elf_get_section_from_index+0xf0>
	} else {
		struct elf64_info *einfo = elf_info;
 100a87c:	e0bffe17 	ldw	r2,-8(fp)
 100a880:	e0bffb15 	stw	r2,-20(fp)
		Elf64_Ehdr *ehdr = &einfo->ehdr;
 100a884:	e0bffb17 	ldw	r2,-20(fp)
 100a888:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Shdr *shdr = einfo->shdrs;
 100a88c:	e0bffb17 	ldw	r2,-20(fp)
 100a890:	10801217 	ldw	r2,72(r2)
 100a894:	e0bffd15 	stw	r2,-12(fp)

		if (shdr == NULL)
 100a898:	e0bffd17 	ldw	r2,-12(fp)
 100a89c:	1000021e 	bne	r2,zero,100a8a8 <elf_get_section_from_index+0xb8>
			return NULL;
 100a8a0:	0005883a 	mov	r2,zero
 100a8a4:	00000e06 	br	100a8e0 <elf_get_section_from_index+0xf0>
		if (index < 0 || index >= ehdr->e_shnum)
 100a8a8:	e0bfff17 	ldw	r2,-4(fp)
 100a8ac:	10000516 	blt	r2,zero,100a8c4 <elf_get_section_from_index+0xd4>
 100a8b0:	e0bffc17 	ldw	r2,-16(fp)
 100a8b4:	10800f0b 	ldhu	r2,60(r2)
 100a8b8:	10bfffcc 	andi	r2,r2,65535
 100a8bc:	e0ffff17 	ldw	r3,-4(fp)
 100a8c0:	18800216 	blt	r3,r2,100a8cc <elf_get_section_from_index+0xdc>
			return NULL;
 100a8c4:	0005883a 	mov	r2,zero
 100a8c8:	00000506 	br	100a8e0 <elf_get_section_from_index+0xf0>
		return &einfo->shdrs[index];
 100a8cc:	e0bffb17 	ldw	r2,-20(fp)
 100a8d0:	10c01217 	ldw	r3,72(r2)
 100a8d4:	e0bfff17 	ldw	r2,-4(fp)
 100a8d8:	100491ba 	slli	r2,r2,6
 100a8dc:	1885883a 	add	r2,r3,r2
	}
}
 100a8e0:	e037883a 	mov	sp,fp
 100a8e4:	dfc00117 	ldw	ra,4(sp)
 100a8e8:	df000017 	ldw	fp,0(sp)
 100a8ec:	dec00204 	addi	sp,sp,8
 100a8f0:	f800283a 	ret

0100a8f4 <elf_parse_section>:
			      metal_phys_addr_t *sh_addr,
			      size_t *sh_offset, size_t *sh_size,
			      unsigned int *sh_link, unsigned int *sh_info,
			      unsigned int *sh_addralign,
			      size_t *sh_entsize)
{
 100a8f4:	defff804 	addi	sp,sp,-32
 100a8f8:	dfc00715 	stw	ra,28(sp)
 100a8fc:	df000615 	stw	fp,24(sp)
 100a900:	df000604 	addi	fp,sp,24
 100a904:	e13ffc15 	stw	r4,-16(fp)
 100a908:	e17ffd15 	stw	r5,-12(fp)
 100a90c:	e1bffe15 	stw	r6,-8(fp)
 100a910:	e1ffff15 	stw	r7,-4(fp)
	if (elf_is_64(elf_info) == 0) {
 100a914:	e13ffc17 	ldw	r4,-16(fp)
 100a918:	1009f400 	call	1009f40 <elf_is_64>
 100a91c:	1000391e 	bne	r2,zero,100aa04 <elf_parse_section+0x110>
		Elf32_Shdr *shdr = elf_shdr;
 100a920:	e0bffd17 	ldw	r2,-12(fp)
 100a924:	e0bffa15 	stw	r2,-24(fp)

		if (sh_type != NULL)
 100a928:	e0bffe17 	ldw	r2,-8(fp)
 100a92c:	10000426 	beq	r2,zero,100a940 <elf_parse_section+0x4c>
			*sh_type = shdr->sh_type;
 100a930:	e0bffa17 	ldw	r2,-24(fp)
 100a934:	10c00117 	ldw	r3,4(r2)
 100a938:	e0bffe17 	ldw	r2,-8(fp)
 100a93c:	10c00015 	stw	r3,0(r2)
		if (sh_flags != NULL)
 100a940:	e0bfff17 	ldw	r2,-4(fp)
 100a944:	10000426 	beq	r2,zero,100a958 <elf_parse_section+0x64>
			*sh_flags = shdr->sh_flags;
 100a948:	e0bffa17 	ldw	r2,-24(fp)
 100a94c:	10c00217 	ldw	r3,8(r2)
 100a950:	e0bfff17 	ldw	r2,-4(fp)
 100a954:	10c00015 	stw	r3,0(r2)
		if (sh_addr != NULL)
 100a958:	e0800217 	ldw	r2,8(fp)
 100a95c:	10000426 	beq	r2,zero,100a970 <elf_parse_section+0x7c>
			*sh_addr = (metal_phys_addr_t)shdr->sh_addr;
 100a960:	e0bffa17 	ldw	r2,-24(fp)
 100a964:	10c00317 	ldw	r3,12(r2)
 100a968:	e0800217 	ldw	r2,8(fp)
 100a96c:	10c00015 	stw	r3,0(r2)
		if (sh_offset != NULL)
 100a970:	e0800317 	ldw	r2,12(fp)
 100a974:	10000426 	beq	r2,zero,100a988 <elf_parse_section+0x94>
			*sh_offset = shdr->sh_offset;
 100a978:	e0bffa17 	ldw	r2,-24(fp)
 100a97c:	10c00417 	ldw	r3,16(r2)
 100a980:	e0800317 	ldw	r2,12(fp)
 100a984:	10c00015 	stw	r3,0(r2)
		if (sh_size != NULL)
 100a988:	e0800417 	ldw	r2,16(fp)
 100a98c:	10000426 	beq	r2,zero,100a9a0 <elf_parse_section+0xac>
			*sh_size = shdr->sh_size;
 100a990:	e0bffa17 	ldw	r2,-24(fp)
 100a994:	10c00517 	ldw	r3,20(r2)
 100a998:	e0800417 	ldw	r2,16(fp)
 100a99c:	10c00015 	stw	r3,0(r2)
		if (sh_link != NULL)
 100a9a0:	e0800517 	ldw	r2,20(fp)
 100a9a4:	10000426 	beq	r2,zero,100a9b8 <elf_parse_section+0xc4>
			*sh_link = shdr->sh_link;
 100a9a8:	e0bffa17 	ldw	r2,-24(fp)
 100a9ac:	10c00617 	ldw	r3,24(r2)
 100a9b0:	e0800517 	ldw	r2,20(fp)
 100a9b4:	10c00015 	stw	r3,0(r2)
		if (sh_info != NULL)
 100a9b8:	e0800617 	ldw	r2,24(fp)
 100a9bc:	10000426 	beq	r2,zero,100a9d0 <elf_parse_section+0xdc>
			*sh_info = shdr->sh_info;
 100a9c0:	e0bffa17 	ldw	r2,-24(fp)
 100a9c4:	10c00717 	ldw	r3,28(r2)
 100a9c8:	e0800617 	ldw	r2,24(fp)
 100a9cc:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
 100a9d0:	e0800717 	ldw	r2,28(fp)
 100a9d4:	10000426 	beq	r2,zero,100a9e8 <elf_parse_section+0xf4>
			*sh_addralign = shdr->sh_addralign;
 100a9d8:	e0bffa17 	ldw	r2,-24(fp)
 100a9dc:	10c00817 	ldw	r3,32(r2)
 100a9e0:	e0800717 	ldw	r2,28(fp)
 100a9e4:	10c00015 	stw	r3,0(r2)
		if (sh_entsize != NULL)
 100a9e8:	e0800817 	ldw	r2,32(fp)
 100a9ec:	10004926 	beq	r2,zero,100ab14 <elf_parse_section+0x220>
			*sh_entsize = shdr->sh_entsize;
 100a9f0:	e0bffa17 	ldw	r2,-24(fp)
 100a9f4:	10c00917 	ldw	r3,36(r2)
 100a9f8:	e0800817 	ldw	r2,32(fp)
 100a9fc:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
			*sh_addralign = shdr->sh_addralign;
		if (sh_entsize != NULL)
			*sh_entsize = shdr->sh_entsize;
	}
}
 100aa00:	00004406 	br	100ab14 <elf_parse_section+0x220>
		if (sh_addralign != NULL)
			*sh_addralign = shdr->sh_addralign;
		if (sh_entsize != NULL)
			*sh_entsize = shdr->sh_entsize;
	} else {
		Elf64_Shdr *shdr = elf_shdr;
 100aa04:	e0bffd17 	ldw	r2,-12(fp)
 100aa08:	e0bffb15 	stw	r2,-20(fp)

		if (sh_type != NULL)
 100aa0c:	e0bffe17 	ldw	r2,-8(fp)
 100aa10:	10000426 	beq	r2,zero,100aa24 <elf_parse_section+0x130>
			*sh_type = shdr->sh_type;
 100aa14:	e0bffb17 	ldw	r2,-20(fp)
 100aa18:	10c00117 	ldw	r3,4(r2)
 100aa1c:	e0bffe17 	ldw	r2,-8(fp)
 100aa20:	10c00015 	stw	r3,0(r2)
		if (sh_flags != NULL)
 100aa24:	e0bfff17 	ldw	r2,-4(fp)
 100aa28:	10000626 	beq	r2,zero,100aa44 <elf_parse_section+0x150>
			*sh_flags = shdr->sh_flags;
 100aa2c:	e13ffb17 	ldw	r4,-20(fp)
 100aa30:	20800217 	ldw	r2,8(r4)
 100aa34:	20c00317 	ldw	r3,12(r4)
 100aa38:	1007883a 	mov	r3,r2
 100aa3c:	e0bfff17 	ldw	r2,-4(fp)
 100aa40:	10c00015 	stw	r3,0(r2)
		if (sh_addr != NULL)
 100aa44:	e0800217 	ldw	r2,8(fp)
 100aa48:	10000626 	beq	r2,zero,100aa64 <elf_parse_section+0x170>
			*sh_addr = (metal_phys_addr_t)shdr->sh_addr;
 100aa4c:	e13ffb17 	ldw	r4,-20(fp)
 100aa50:	20800417 	ldw	r2,16(r4)
 100aa54:	20c00517 	ldw	r3,20(r4)
 100aa58:	1007883a 	mov	r3,r2
 100aa5c:	e0800217 	ldw	r2,8(fp)
 100aa60:	10c00015 	stw	r3,0(r2)
		if (sh_offset != NULL)
 100aa64:	e0800317 	ldw	r2,12(fp)
 100aa68:	10000626 	beq	r2,zero,100aa84 <elf_parse_section+0x190>
			*sh_offset = shdr->sh_offset;
 100aa6c:	e13ffb17 	ldw	r4,-20(fp)
 100aa70:	20800617 	ldw	r2,24(r4)
 100aa74:	20c00717 	ldw	r3,28(r4)
 100aa78:	1007883a 	mov	r3,r2
 100aa7c:	e0800317 	ldw	r2,12(fp)
 100aa80:	10c00015 	stw	r3,0(r2)
		if (sh_size != NULL)
 100aa84:	e0800417 	ldw	r2,16(fp)
 100aa88:	10000626 	beq	r2,zero,100aaa4 <elf_parse_section+0x1b0>
			*sh_size = shdr->sh_size;
 100aa8c:	e13ffb17 	ldw	r4,-20(fp)
 100aa90:	20800817 	ldw	r2,32(r4)
 100aa94:	20c00917 	ldw	r3,36(r4)
 100aa98:	1007883a 	mov	r3,r2
 100aa9c:	e0800417 	ldw	r2,16(fp)
 100aaa0:	10c00015 	stw	r3,0(r2)
		if (sh_link != NULL)
 100aaa4:	e0800517 	ldw	r2,20(fp)
 100aaa8:	10000426 	beq	r2,zero,100aabc <elf_parse_section+0x1c8>
			*sh_link = shdr->sh_link;
 100aaac:	e0bffb17 	ldw	r2,-20(fp)
 100aab0:	10c00a17 	ldw	r3,40(r2)
 100aab4:	e0800517 	ldw	r2,20(fp)
 100aab8:	10c00015 	stw	r3,0(r2)
		if (sh_info != NULL)
 100aabc:	e0800617 	ldw	r2,24(fp)
 100aac0:	10000426 	beq	r2,zero,100aad4 <elf_parse_section+0x1e0>
			*sh_info = shdr->sh_info;
 100aac4:	e0bffb17 	ldw	r2,-20(fp)
 100aac8:	10c00b17 	ldw	r3,44(r2)
 100aacc:	e0800617 	ldw	r2,24(fp)
 100aad0:	10c00015 	stw	r3,0(r2)
		if (sh_addralign != NULL)
 100aad4:	e0800717 	ldw	r2,28(fp)
 100aad8:	10000626 	beq	r2,zero,100aaf4 <elf_parse_section+0x200>
			*sh_addralign = shdr->sh_addralign;
 100aadc:	e13ffb17 	ldw	r4,-20(fp)
 100aae0:	20800c17 	ldw	r2,48(r4)
 100aae4:	20c00d17 	ldw	r3,52(r4)
 100aae8:	1007883a 	mov	r3,r2
 100aaec:	e0800717 	ldw	r2,28(fp)
 100aaf0:	10c00015 	stw	r3,0(r2)
		if (sh_entsize != NULL)
 100aaf4:	e0800817 	ldw	r2,32(fp)
 100aaf8:	10000626 	beq	r2,zero,100ab14 <elf_parse_section+0x220>
			*sh_entsize = shdr->sh_entsize;
 100aafc:	e13ffb17 	ldw	r4,-20(fp)
 100ab00:	20800e17 	ldw	r2,56(r4)
 100ab04:	20c00f17 	ldw	r3,60(r4)
 100ab08:	1007883a 	mov	r3,r2
 100ab0c:	e0800817 	ldw	r2,32(fp)
 100ab10:	10c00015 	stw	r3,0(r2)
	}
}
 100ab14:	0001883a 	nop
 100ab18:	e037883a 	mov	sp,fp
 100ab1c:	dfc00117 	ldw	ra,4(sp)
 100ab20:	df000017 	ldw	fp,0(sp)
 100ab24:	dec00204 	addi	sp,sp,8
 100ab28:	f800283a 	ret

0100ab2c <elf_next_load_segment>:

static const void *elf_next_load_segment(void *elf_info, int *nseg,
				   metal_phys_addr_t *da,
				   size_t *noffset, size_t *nfsize,
				   size_t *nmsize)
{
 100ab2c:	defff404 	addi	sp,sp,-48
 100ab30:	dfc00b15 	stw	ra,44(sp)
 100ab34:	df000a15 	stw	fp,40(sp)
 100ab38:	df000a04 	addi	fp,sp,40
 100ab3c:	e13ffc15 	stw	r4,-16(fp)
 100ab40:	e17ffd15 	stw	r5,-12(fp)
 100ab44:	e1bffe15 	stw	r6,-8(fp)
 100ab48:	e1ffff15 	stw	r7,-4(fp)
	const void *phdr;
	unsigned int p_type = PT_NULL;
 100ab4c:	e03ffb15 	stw	zero,-20(fp)

	if (elf_info == NULL || nseg == NULL)
 100ab50:	e0bffc17 	ldw	r2,-16(fp)
 100ab54:	10000226 	beq	r2,zero,100ab60 <elf_next_load_segment+0x34>
 100ab58:	e0bffd17 	ldw	r2,-12(fp)
 100ab5c:	10001e1e 	bne	r2,zero,100abd8 <elf_next_load_segment+0xac>
		return NULL;
 100ab60:	0005883a 	mov	r2,zero
 100ab64:	00002006 	br	100abe8 <elf_next_load_segment+0xbc>
	while(p_type != PT_LOAD) {
		phdr = elf_get_segment_from_index(elf_info, *nseg);
 100ab68:	e0bffd17 	ldw	r2,-12(fp)
 100ab6c:	10800017 	ldw	r2,0(r2)
 100ab70:	100b883a 	mov	r5,r2
 100ab74:	e13ffc17 	ldw	r4,-16(fp)
 100ab78:	100a5740 	call	100a574 <elf_get_segment_from_index>
 100ab7c:	e0bffa15 	stw	r2,-24(fp)
		if (phdr == NULL)
 100ab80:	e0bffa17 	ldw	r2,-24(fp)
 100ab84:	1000021e 	bne	r2,zero,100ab90 <elf_next_load_segment+0x64>
			return NULL;
 100ab88:	0005883a 	mov	r2,zero
 100ab8c:	00001606 	br	100abe8 <elf_next_load_segment+0xbc>
		elf_parse_segment(elf_info, phdr, &p_type, noffset,
 100ab90:	e0fffb04 	addi	r3,fp,-20
 100ab94:	e0800317 	ldw	r2,12(fp)
 100ab98:	d8800315 	stw	r2,12(sp)
 100ab9c:	e0800217 	ldw	r2,8(fp)
 100aba0:	d8800215 	stw	r2,8(sp)
 100aba4:	d8000115 	stw	zero,4(sp)
 100aba8:	e0bffe17 	ldw	r2,-8(fp)
 100abac:	d8800015 	stw	r2,0(sp)
 100abb0:	e1ffff17 	ldw	r7,-4(fp)
 100abb4:	180d883a 	mov	r6,r3
 100abb8:	e17ffa17 	ldw	r5,-24(fp)
 100abbc:	e13ffc17 	ldw	r4,-16(fp)
 100abc0:	100a3d40 	call	100a3d4 <elf_parse_segment>
				  da, NULL, nfsize, nmsize);
		*nseg = *nseg + 1;
 100abc4:	e0bffd17 	ldw	r2,-12(fp)
 100abc8:	10800017 	ldw	r2,0(r2)
 100abcc:	10c00044 	addi	r3,r2,1
 100abd0:	e0bffd17 	ldw	r2,-12(fp)
 100abd4:	10c00015 	stw	r3,0(r2)
	const void *phdr;
	unsigned int p_type = PT_NULL;

	if (elf_info == NULL || nseg == NULL)
		return NULL;
	while(p_type != PT_LOAD) {
 100abd8:	e0bffb17 	ldw	r2,-20(fp)
 100abdc:	10800058 	cmpnei	r2,r2,1
 100abe0:	103fe11e 	bne	r2,zero,100ab68 <__alt_data_end+0xff00ab68>
			return NULL;
		elf_parse_segment(elf_info, phdr, &p_type, noffset,
				  da, NULL, nfsize, nmsize);
		*nseg = *nseg + 1;
	}
	return phdr;
 100abe4:	e0bffa17 	ldw	r2,-24(fp)
}
 100abe8:	e037883a 	mov	sp,fp
 100abec:	dfc00117 	ldw	ra,4(sp)
 100abf0:	df000017 	ldw	fp,0(sp)
 100abf4:	dec00204 	addi	sp,sp,8
 100abf8:	f800283a 	ret

0100abfc <elf_info_size>:

static size_t elf_info_size(const void *img_data)
{
 100abfc:	defffd04 	addi	sp,sp,-12
 100ac00:	dfc00215 	stw	ra,8(sp)
 100ac04:	df000115 	stw	fp,4(sp)
 100ac08:	df000104 	addi	fp,sp,4
 100ac0c:	e13fff15 	stw	r4,-4(fp)
	if (elf_is_64(img_data) == 0)
 100ac10:	e13fff17 	ldw	r4,-4(fp)
 100ac14:	1009f400 	call	1009f40 <elf_is_64>
 100ac18:	1000021e 	bne	r2,zero,100ac24 <elf_info_size+0x28>
		return sizeof(struct elf32_info);
 100ac1c:	00801104 	movi	r2,68
 100ac20:	00000106 	br	100ac28 <elf_info_size+0x2c>
	else
		return sizeof(struct elf64_info);
 100ac24:	00801404 	movi	r2,80
}
 100ac28:	e037883a 	mov	sp,fp
 100ac2c:	dfc00117 	ldw	ra,4(sp)
 100ac30:	df000017 	ldw	fp,0(sp)
 100ac34:	dec00204 	addi	sp,sp,8
 100ac38:	f800283a 	ret

0100ac3c <elf_identify>:

int elf_identify(const void *img_data, size_t len)
{
 100ac3c:	defffc04 	addi	sp,sp,-16
 100ac40:	dfc00315 	stw	ra,12(sp)
 100ac44:	df000215 	stw	fp,8(sp)
 100ac48:	df000204 	addi	fp,sp,8
 100ac4c:	e13ffe15 	stw	r4,-8(fp)
 100ac50:	e17fff15 	stw	r5,-4(fp)
	if (len < SELFMAG || img_data == NULL)
 100ac54:	e0bfff17 	ldw	r2,-4(fp)
 100ac58:	10800130 	cmpltui	r2,r2,4
 100ac5c:	1000021e 	bne	r2,zero,100ac68 <elf_identify+0x2c>
 100ac60:	e0bffe17 	ldw	r2,-8(fp)
 100ac64:	1000021e 	bne	r2,zero,100ac70 <elf_identify+0x34>
		return -RPROC_EINVAL;
 100ac68:	00bfff84 	movi	r2,-2
 100ac6c:	00000906 	br	100ac94 <elf_identify+0x58>
	if (memcmp(img_data, ELFMAG, SELFMAG) != 0)
 100ac70:	01800104 	movi	r6,4
 100ac74:	014040f4 	movhi	r5,259
 100ac78:	2965ae04 	addi	r5,r5,-26952
 100ac7c:	e13ffe17 	ldw	r4,-8(fp)
 100ac80:	10157780 	call	1015778 <memcmp>
 100ac84:	10000226 	beq	r2,zero,100ac90 <elf_identify+0x54>
		return -RPROC_EINVAL;
 100ac88:	00bfff84 	movi	r2,-2
 100ac8c:	00000106 	br	100ac94 <elf_identify+0x58>
	else
		return 0;
 100ac90:	0005883a 	mov	r2,zero
}
 100ac94:	e037883a 	mov	sp,fp
 100ac98:	dfc00117 	ldw	ra,4(sp)
 100ac9c:	df000017 	ldw	fp,0(sp)
 100aca0:	dec00204 	addi	sp,sp,8
 100aca4:	f800283a 	ret

0100aca8 <elf_load_header>:

int elf_load_header(const void *img_data, size_t offset, size_t len,
		    void **img_info, int last_load_state,
		    size_t *noffset, size_t *nlen)
{
 100aca8:	deffe204 	addi	sp,sp,-120
 100acac:	dfc01d15 	stw	ra,116(sp)
 100acb0:	df001c15 	stw	fp,112(sp)
 100acb4:	dc001b15 	stw	r16,108(sp)
 100acb8:	df001c04 	addi	fp,sp,112
 100acbc:	e13ffb15 	stw	r4,-20(fp)
 100acc0:	e17ffc15 	stw	r5,-16(fp)
 100acc4:	e1bffd15 	stw	r6,-12(fp)
 100acc8:	e1fffe15 	stw	r7,-8(fp)
	int *load_state;

	metal_assert(noffset != NULL);
 100accc:	e0800317 	ldw	r2,12(fp)
 100acd0:	1000081e 	bne	r2,zero,100acf4 <elf_load_header+0x4c>
 100acd4:	01c040f4 	movhi	r7,259
 100acd8:	39e5b004 	addi	r7,r7,-26944
 100acdc:	018040f4 	movhi	r6,259
 100ace0:	31a62304 	addi	r6,r6,-26484
 100ace4:	014064c4 	movi	r5,403
 100ace8:	010040f4 	movhi	r4,259
 100acec:	2125b604 	addi	r4,r4,-26920
 100acf0:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(nlen != NULL);
 100acf4:	e0800417 	ldw	r2,16(fp)
 100acf8:	1000081e 	bne	r2,zero,100ad1c <elf_load_header+0x74>
 100acfc:	01c040f4 	movhi	r7,259
 100ad00:	39e5bf04 	addi	r7,r7,-26884
 100ad04:	018040f4 	movhi	r6,259
 100ad08:	31a62304 	addi	r6,r6,-26484
 100ad0c:	01406504 	movi	r5,404
 100ad10:	010040f4 	movhi	r4,259
 100ad14:	2125b604 	addi	r4,r4,-26920
 100ad18:	10156a00 	call	10156a0 <__assert_func>
	/* Get ELF header */
	if (last_load_state == ELF_STATE_INIT) {
 100ad1c:	e0800217 	ldw	r2,8(fp)
 100ad20:	1000431e 	bne	r2,zero,100ae30 <elf_load_header+0x188>
		size_t tmpsize;

		metal_log(METAL_LOG_DEBUG, "Loading ELF headering\r\n");
 100ad24:	008060f4 	movhi	r2,387
 100ad28:	10bb7104 	addi	r2,r2,-4668
 100ad2c:	10800017 	ldw	r2,0(r2)
 100ad30:	108001f0 	cmpltui	r2,r2,7
 100ad34:	10000b1e 	bne	r2,zero,100ad64 <elf_load_header+0xbc>
 100ad38:	008060f4 	movhi	r2,387
 100ad3c:	10bb7104 	addi	r2,r2,-4668
 100ad40:	10800117 	ldw	r2,4(r2)
 100ad44:	10000726 	beq	r2,zero,100ad64 <elf_load_header+0xbc>
 100ad48:	008060f4 	movhi	r2,387
 100ad4c:	10bb7104 	addi	r2,r2,-4668
 100ad50:	10800117 	ldw	r2,4(r2)
 100ad54:	014040f4 	movhi	r5,259
 100ad58:	2965c404 	addi	r5,r5,-26864
 100ad5c:	010001c4 	movi	r4,7
 100ad60:	103ee83a 	callr	r2
		tmpsize = elf_ehdr_size(img_data);
 100ad64:	e13ffb17 	ldw	r4,-20(fp)
 100ad68:	1009f8c0 	call	1009f8c <elf_ehdr_size>
 100ad6c:	e0bfeb15 	stw	r2,-84(fp)
		if (len < tmpsize) {
 100ad70:	e0fffd17 	ldw	r3,-12(fp)
 100ad74:	e0bfeb17 	ldw	r2,-84(fp)
 100ad78:	1880072e 	bgeu	r3,r2,100ad98 <elf_load_header+0xf0>
			*noffset = 0;
 100ad7c:	e0800317 	ldw	r2,12(fp)
 100ad80:	10000015 	stw	zero,0(r2)
			*nlen = tmpsize;
 100ad84:	e0800417 	ldw	r2,16(fp)
 100ad88:	e0ffeb17 	ldw	r3,-84(fp)
 100ad8c:	10c00015 	stw	r3,0(r2)
			return ELF_STATE_INIT;
 100ad90:	0005883a 	mov	r2,zero
 100ad94:	00018906 	br	100b3bc <elf_load_header+0x714>
		} else {
			size_t infosize = elf_info_size(img_data);
 100ad98:	e13ffb17 	ldw	r4,-20(fp)
 100ad9c:	100abfc0 	call	100abfc <elf_info_size>
 100ada0:	e0bfec15 	stw	r2,-80(fp)

			if (*img_info == NULL) {
 100ada4:	e0bffe17 	ldw	r2,-8(fp)
 100ada8:	10800017 	ldw	r2,0(r2)
 100adac:	1000101e 	bne	r2,zero,100adf0 <elf_load_header+0x148>
				*img_info = metal_allocate_memory(infosize);
 100adb0:	e13fec17 	ldw	r4,-80(fp)
 100adb4:	1009edc0 	call	1009edc <metal_allocate_memory>
 100adb8:	1007883a 	mov	r3,r2
 100adbc:	e0bffe17 	ldw	r2,-8(fp)
 100adc0:	10c00015 	stw	r3,0(r2)
				if (*img_info == NULL)
 100adc4:	e0bffe17 	ldw	r2,-8(fp)
 100adc8:	10800017 	ldw	r2,0(r2)
 100adcc:	1000021e 	bne	r2,zero,100add8 <elf_load_header+0x130>
					return -RPROC_ENOMEM;
 100add0:	00bfffc4 	movi	r2,-1
 100add4:	00017906 	br	100b3bc <elf_load_header+0x714>
				memset(*img_info, 0, infosize);
 100add8:	e0bffe17 	ldw	r2,-8(fp)
 100addc:	10800017 	ldw	r2,0(r2)
 100ade0:	e1bfec17 	ldw	r6,-80(fp)
 100ade4:	000b883a 	mov	r5,zero
 100ade8:	1009883a 	mov	r4,r2
 100adec:	101593c0 	call	101593c <memset>
			}
			memcpy(*img_info, img_data, tmpsize);
 100adf0:	e0bffe17 	ldw	r2,-8(fp)
 100adf4:	10800017 	ldw	r2,0(r2)
 100adf8:	e1bfeb17 	ldw	r6,-84(fp)
 100adfc:	e17ffb17 	ldw	r5,-20(fp)
 100ae00:	1009883a 	mov	r4,r2
 100ae04:	10157f40 	call	10157f4 <memcpy>
			load_state = elf_load_state(*img_info);
 100ae08:	e0bffe17 	ldw	r2,-8(fp)
 100ae0c:	10800017 	ldw	r2,0(r2)
 100ae10:	1009883a 	mov	r4,r2
 100ae14:	100a37c0 	call	100a37c <elf_load_state>
 100ae18:	e0bfed15 	stw	r2,-76(fp)
			*load_state = ELF_STATE_WAIT_FOR_PHDRS;
 100ae1c:	e0bfed17 	ldw	r2,-76(fp)
 100ae20:	00c04004 	movi	r3,256
 100ae24:	10c00015 	stw	r3,0(r2)
			last_load_state = ELF_STATE_WAIT_FOR_PHDRS;
 100ae28:	00804004 	movi	r2,256
 100ae2c:	e0800215 	stw	r2,8(fp)
		}
	}
	metal_assert(*img_info != NULL);
 100ae30:	e0bffe17 	ldw	r2,-8(fp)
 100ae34:	10800017 	ldw	r2,0(r2)
 100ae38:	1000081e 	bne	r2,zero,100ae5c <elf_load_header+0x1b4>
 100ae3c:	01c040f4 	movhi	r7,259
 100ae40:	39e5ca04 	addi	r7,r7,-26840
 100ae44:	018040f4 	movhi	r6,259
 100ae48:	31a62304 	addi	r6,r6,-26484
 100ae4c:	01406b84 	movi	r5,430
 100ae50:	010040f4 	movhi	r4,259
 100ae54:	2125b604 	addi	r4,r4,-26920
 100ae58:	10156a00 	call	10156a0 <__assert_func>
	load_state = elf_load_state(*img_info);
 100ae5c:	e0bffe17 	ldw	r2,-8(fp)
 100ae60:	10800017 	ldw	r2,0(r2)
 100ae64:	1009883a 	mov	r4,r2
 100ae68:	100a37c0 	call	100a37c <elf_load_state>
 100ae6c:	e0bfed15 	stw	r2,-76(fp)
	if (last_load_state != *load_state)
 100ae70:	e0bfed17 	ldw	r2,-76(fp)
 100ae74:	10c00017 	ldw	r3,0(r2)
 100ae78:	e0800217 	ldw	r2,8(fp)
 100ae7c:	18800226 	beq	r3,r2,100ae88 <elf_load_header+0x1e0>
		return -RPROC_EINVAL;
 100ae80:	00bfff84 	movi	r2,-2
 100ae84:	00014d06 	br	100b3bc <elf_load_header+0x714>
	/* Get ELF program headers */
	if (*load_state == ELF_STATE_WAIT_FOR_PHDRS) {
 100ae88:	e0bfed17 	ldw	r2,-76(fp)
 100ae8c:	10800017 	ldw	r2,0(r2)
 100ae90:	10804018 	cmpnei	r2,r2,256
 100ae94:	1000541e 	bne	r2,zero,100afe8 <elf_load_header+0x340>
		size_t phdrs_size;
		size_t phdrs_offset;
		void **phdrs;
		const void *img_phdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF program header.\r\n");
 100ae98:	008060f4 	movhi	r2,387
 100ae9c:	10bb7104 	addi	r2,r2,-4668
 100aea0:	10800017 	ldw	r2,0(r2)
 100aea4:	108001f0 	cmpltui	r2,r2,7
 100aea8:	10000b1e 	bne	r2,zero,100aed8 <elf_load_header+0x230>
 100aeac:	008060f4 	movhi	r2,387
 100aeb0:	10bb7104 	addi	r2,r2,-4668
 100aeb4:	10800117 	ldw	r2,4(r2)
 100aeb8:	10000726 	beq	r2,zero,100aed8 <elf_load_header+0x230>
 100aebc:	008060f4 	movhi	r2,387
 100aec0:	10bb7104 	addi	r2,r2,-4668
 100aec4:	10800117 	ldw	r2,4(r2)
 100aec8:	014040f4 	movhi	r5,259
 100aecc:	2965d104 	addi	r5,r5,-26812
 100aed0:	010001c4 	movi	r4,7
 100aed4:	103ee83a 	callr	r2
		phdrs_offset = elf_phoff(*img_info);
 100aed8:	e0bffe17 	ldw	r2,-8(fp)
 100aedc:	10800017 	ldw	r2,0(r2)
 100aee0:	1009883a 	mov	r4,r2
 100aee4:	1009fdc0 	call	1009fdc <elf_phoff>
 100aee8:	e0bfee15 	stw	r2,-72(fp)
		phdrs_size = elf_phnum(*img_info) * elf_phentsize(*img_info);
 100aeec:	e0bffe17 	ldw	r2,-8(fp)
 100aef0:	10800017 	ldw	r2,0(r2)
 100aef4:	1009883a 	mov	r4,r2
 100aef8:	100a0980 	call	100a098 <elf_phnum>
 100aefc:	1021883a 	mov	r16,r2
 100af00:	e0bffe17 	ldw	r2,-8(fp)
 100af04:	10800017 	ldw	r2,0(r2)
 100af08:	1009883a 	mov	r4,r2
 100af0c:	100a0380 	call	100a038 <elf_phentsize>
 100af10:	8085383a 	mul	r2,r16,r2
 100af14:	e0bfef15 	stw	r2,-68(fp)
		if (offset > phdrs_offset ||
 100af18:	e0bffc17 	ldw	r2,-16(fp)
 100af1c:	e0ffee17 	ldw	r3,-72(fp)
 100af20:	18800736 	bltu	r3,r2,100af40 <elf_load_header+0x298>
		    offset + len < phdrs_offset + phdrs_size) {
 100af24:	e0fffc17 	ldw	r3,-16(fp)
 100af28:	e0bffd17 	ldw	r2,-12(fp)
 100af2c:	1887883a 	add	r3,r3,r2
 100af30:	e13fee17 	ldw	r4,-72(fp)
 100af34:	e0bfef17 	ldw	r2,-68(fp)
 100af38:	2085883a 	add	r2,r4,r2
		const void *img_phdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF program header.\r\n");
		phdrs_offset = elf_phoff(*img_info);
		phdrs_size = elf_phnum(*img_info) * elf_phentsize(*img_info);
		if (offset > phdrs_offset ||
 100af3c:	1880092e 	bgeu	r3,r2,100af64 <elf_load_header+0x2bc>
		    offset + len < phdrs_offset + phdrs_size) {
			*noffset = phdrs_offset;
 100af40:	e0800317 	ldw	r2,12(fp)
 100af44:	e0ffee17 	ldw	r3,-72(fp)
 100af48:	10c00015 	stw	r3,0(r2)
			*nlen = phdrs_size;
 100af4c:	e0800417 	ldw	r2,16(fp)
 100af50:	e0ffef17 	ldw	r3,-68(fp)
 100af54:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100af58:	e0bfed17 	ldw	r2,-76(fp)
 100af5c:	10800017 	ldw	r2,0(r2)
 100af60:	00011606 	br	100b3bc <elf_load_header+0x714>
		}
		/* calculate the programs headers offset to the image_data */
		phdrs_offset -= offset;
 100af64:	e0ffee17 	ldw	r3,-72(fp)
 100af68:	e0bffc17 	ldw	r2,-16(fp)
 100af6c:	1885c83a 	sub	r2,r3,r2
 100af70:	e0bfee15 	stw	r2,-72(fp)
		img_phdrs = (const char *)img_data + phdrs_offset;
 100af74:	e0fffb17 	ldw	r3,-20(fp)
 100af78:	e0bfee17 	ldw	r2,-72(fp)
 100af7c:	1885883a 	add	r2,r3,r2
 100af80:	e0bff015 	stw	r2,-64(fp)
		phdrs = elf_phtable_ptr(*img_info);
 100af84:	e0bffe17 	ldw	r2,-8(fp)
 100af88:	10800017 	ldw	r2,0(r2)
 100af8c:	1009883a 	mov	r4,r2
 100af90:	100a2740 	call	100a274 <elf_phtable_ptr>
 100af94:	e0bff115 	stw	r2,-60(fp)
		*phdrs = metal_allocate_memory(phdrs_size);
 100af98:	e13fef17 	ldw	r4,-68(fp)
 100af9c:	1009edc0 	call	1009edc <metal_allocate_memory>
 100afa0:	1007883a 	mov	r3,r2
 100afa4:	e0bff117 	ldw	r2,-60(fp)
 100afa8:	10c00015 	stw	r3,0(r2)
		if (*phdrs == NULL)
 100afac:	e0bff117 	ldw	r2,-60(fp)
 100afb0:	10800017 	ldw	r2,0(r2)
 100afb4:	1000021e 	bne	r2,zero,100afc0 <elf_load_header+0x318>
			return -RPROC_ENOMEM;
 100afb8:	00bfffc4 	movi	r2,-1
 100afbc:	0000ff06 	br	100b3bc <elf_load_header+0x714>
		memcpy(*phdrs, img_phdrs, phdrs_size);
 100afc0:	e0bff117 	ldw	r2,-60(fp)
 100afc4:	10800017 	ldw	r2,0(r2)
 100afc8:	e1bfef17 	ldw	r6,-68(fp)
 100afcc:	e17ff017 	ldw	r5,-64(fp)
 100afd0:	1009883a 	mov	r4,r2
 100afd4:	10157f40 	call	10157f4 <memcpy>
		*load_state = ELF_STATE_WAIT_FOR_SHDRS |
 100afd8:	e0ffed17 	ldw	r3,-76(fp)
 100afdc:	00800074 	movhi	r2,1
 100afe0:	10808004 	addi	r2,r2,512
 100afe4:	18800015 	stw	r2,0(r3)
			       RPROC_LOADER_READY_TO_LOAD;
	}
	/* Get ELF Section Headers */
	if ((*load_state & ELF_STATE_WAIT_FOR_SHDRS) != 0) {
 100afe8:	e0bfed17 	ldw	r2,-76(fp)
 100afec:	10800017 	ldw	r2,0(r2)
 100aff0:	1080800c 	andi	r2,r2,512
 100aff4:	10007e26 	beq	r2,zero,100b1f0 <elf_load_header+0x548>
		size_t shdrs_size;
		size_t shdrs_offset;
		void **shdrs;
		const void *img_shdrs;

		metal_log(METAL_LOG_DEBUG, "Loading ELF section header.\r\n");
 100aff8:	008060f4 	movhi	r2,387
 100affc:	10bb7104 	addi	r2,r2,-4668
 100b000:	10800017 	ldw	r2,0(r2)
 100b004:	108001f0 	cmpltui	r2,r2,7
 100b008:	10000b1e 	bne	r2,zero,100b038 <elf_load_header+0x390>
 100b00c:	008060f4 	movhi	r2,387
 100b010:	10bb7104 	addi	r2,r2,-4668
 100b014:	10800117 	ldw	r2,4(r2)
 100b018:	10000726 	beq	r2,zero,100b038 <elf_load_header+0x390>
 100b01c:	008060f4 	movhi	r2,387
 100b020:	10bb7104 	addi	r2,r2,-4668
 100b024:	10800117 	ldw	r2,4(r2)
 100b028:	014040f4 	movhi	r5,259
 100b02c:	2965d904 	addi	r5,r5,-26780
 100b030:	010001c4 	movi	r4,7
 100b034:	103ee83a 	callr	r2
		shdrs_offset = elf_shoff(*img_info);
 100b038:	e0bffe17 	ldw	r2,-8(fp)
 100b03c:	10800017 	ldw	r2,0(r2)
 100b040:	1009883a 	mov	r4,r2
 100b044:	100a0f80 	call	100a0f8 <elf_shoff>
 100b048:	e0bff215 	stw	r2,-56(fp)
		if (elf_shnum(*img_info) == 0) {
 100b04c:	e0bffe17 	ldw	r2,-8(fp)
 100b050:	10800017 	ldw	r2,0(r2)
 100b054:	1009883a 	mov	r4,r2
 100b058:	100a1b40 	call	100a1b4 <elf_shnum>
 100b05c:	10000f1e 	bne	r2,zero,100b09c <elf_load_header+0x3f4>
			*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100b060:	e0bfed17 	ldw	r2,-76(fp)
 100b064:	10800017 	ldw	r2,0(r2)
 100b068:	1007883a 	mov	r3,r2
 100b06c:	00bffff4 	movhi	r2,65535
 100b070:	10803fc4 	addi	r2,r2,255
 100b074:	1884703a 	and	r2,r3,r2
 100b078:	10820014 	ori	r2,r2,2048
 100b07c:	1007883a 	mov	r3,r2
 100b080:	e0bfed17 	ldw	r2,-76(fp)
 100b084:	10c00015 	stw	r3,0(r2)
				       ELF_STATE_HDRS_COMPLETE;
			*nlen = 0;
 100b088:	e0800417 	ldw	r2,16(fp)
 100b08c:	10000015 	stw	zero,0(r2)
			return *load_state;
 100b090:	e0bfed17 	ldw	r2,-76(fp)
 100b094:	10800017 	ldw	r2,0(r2)
 100b098:	0000c806 	br	100b3bc <elf_load_header+0x714>
		}
		shdrs_size = elf_shnum(*img_info) * elf_shentsize(*img_info);
 100b09c:	e0bffe17 	ldw	r2,-8(fp)
 100b0a0:	10800017 	ldw	r2,0(r2)
 100b0a4:	1009883a 	mov	r4,r2
 100b0a8:	100a1b40 	call	100a1b4 <elf_shnum>
 100b0ac:	1021883a 	mov	r16,r2
 100b0b0:	e0bffe17 	ldw	r2,-8(fp)
 100b0b4:	10800017 	ldw	r2,0(r2)
 100b0b8:	1009883a 	mov	r4,r2
 100b0bc:	100a1540 	call	100a154 <elf_shentsize>
 100b0c0:	8085383a 	mul	r2,r16,r2
 100b0c4:	e0bff315 	stw	r2,-52(fp)
		if (offset > shdrs_offset ||
 100b0c8:	e0bffc17 	ldw	r2,-16(fp)
 100b0cc:	e0fff217 	ldw	r3,-56(fp)
 100b0d0:	18800736 	bltu	r3,r2,100b0f0 <elf_load_header+0x448>
		    offset + len < shdrs_offset + shdrs_size) {
 100b0d4:	e0fffc17 	ldw	r3,-16(fp)
 100b0d8:	e0bffd17 	ldw	r2,-12(fp)
 100b0dc:	1887883a 	add	r3,r3,r2
 100b0e0:	e13ff217 	ldw	r4,-56(fp)
 100b0e4:	e0bff317 	ldw	r2,-52(fp)
 100b0e8:	2085883a 	add	r2,r4,r2
				       ELF_STATE_HDRS_COMPLETE;
			*nlen = 0;
			return *load_state;
		}
		shdrs_size = elf_shnum(*img_info) * elf_shentsize(*img_info);
		if (offset > shdrs_offset ||
 100b0ec:	1880092e 	bgeu	r3,r2,100b114 <elf_load_header+0x46c>
		    offset + len < shdrs_offset + shdrs_size) {
			*noffset = shdrs_offset;
 100b0f0:	e0800317 	ldw	r2,12(fp)
 100b0f4:	e0fff217 	ldw	r3,-56(fp)
 100b0f8:	10c00015 	stw	r3,0(r2)
			*nlen = shdrs_size;
 100b0fc:	e0800417 	ldw	r2,16(fp)
 100b100:	e0fff317 	ldw	r3,-52(fp)
 100b104:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100b108:	e0bfed17 	ldw	r2,-76(fp)
 100b10c:	10800017 	ldw	r2,0(r2)
 100b110:	0000aa06 	br	100b3bc <elf_load_header+0x714>
		}
		/* calculate the sections headers offset to the image_data */
		shdrs_offset -= offset;
 100b114:	e0fff217 	ldw	r3,-56(fp)
 100b118:	e0bffc17 	ldw	r2,-16(fp)
 100b11c:	1885c83a 	sub	r2,r3,r2
 100b120:	e0bff215 	stw	r2,-56(fp)
		img_shdrs = (const char *)img_data + shdrs_offset;
 100b124:	e0fffb17 	ldw	r3,-20(fp)
 100b128:	e0bff217 	ldw	r2,-56(fp)
 100b12c:	1885883a 	add	r2,r3,r2
 100b130:	e0bff415 	stw	r2,-48(fp)
		shdrs = elf_shtable_ptr(*img_info);
 100b134:	e0bffe17 	ldw	r2,-8(fp)
 100b138:	10800017 	ldw	r2,0(r2)
 100b13c:	1009883a 	mov	r4,r2
 100b140:	100a2cc0 	call	100a2cc <elf_shtable_ptr>
 100b144:	e0bff515 	stw	r2,-44(fp)
		*shdrs = metal_allocate_memory(shdrs_size);
 100b148:	e13ff317 	ldw	r4,-52(fp)
 100b14c:	1009edc0 	call	1009edc <metal_allocate_memory>
 100b150:	1007883a 	mov	r3,r2
 100b154:	e0bff517 	ldw	r2,-44(fp)
 100b158:	10c00015 	stw	r3,0(r2)
		if (*shdrs == NULL)
 100b15c:	e0bff517 	ldw	r2,-44(fp)
 100b160:	10800017 	ldw	r2,0(r2)
 100b164:	1000021e 	bne	r2,zero,100b170 <elf_load_header+0x4c8>
			return -RPROC_ENOMEM;
 100b168:	00bfffc4 	movi	r2,-1
 100b16c:	00009306 	br	100b3bc <elf_load_header+0x714>
		memcpy(*shdrs, img_shdrs, shdrs_size);
 100b170:	e0bff517 	ldw	r2,-44(fp)
 100b174:	10800017 	ldw	r2,0(r2)
 100b178:	e1bff317 	ldw	r6,-52(fp)
 100b17c:	e17ff417 	ldw	r5,-48(fp)
 100b180:	1009883a 	mov	r4,r2
 100b184:	10157f40 	call	10157f4 <memcpy>
		*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100b188:	e0bfed17 	ldw	r2,-76(fp)
 100b18c:	10800017 	ldw	r2,0(r2)
 100b190:	1007883a 	mov	r3,r2
 100b194:	00bffff4 	movhi	r2,65535
 100b198:	10803fc4 	addi	r2,r2,255
 100b19c:	1884703a 	and	r2,r3,r2
 100b1a0:	10810014 	ori	r2,r2,1024
 100b1a4:	1007883a 	mov	r3,r2
 100b1a8:	e0bfed17 	ldw	r2,-76(fp)
 100b1ac:	10c00015 	stw	r3,0(r2)
			       ELF_STATE_WAIT_FOR_SHSTRTAB;
		metal_log(METAL_LOG_DEBUG,
 100b1b0:	008060f4 	movhi	r2,387
 100b1b4:	10bb7104 	addi	r2,r2,-4668
 100b1b8:	10800017 	ldw	r2,0(r2)
 100b1bc:	108001f0 	cmpltui	r2,r2,7
 100b1c0:	10000b1e 	bne	r2,zero,100b1f0 <elf_load_header+0x548>
 100b1c4:	008060f4 	movhi	r2,387
 100b1c8:	10bb7104 	addi	r2,r2,-4668
 100b1cc:	10800117 	ldw	r2,4(r2)
 100b1d0:	10000726 	beq	r2,zero,100b1f0 <elf_load_header+0x548>
 100b1d4:	008060f4 	movhi	r2,387
 100b1d8:	10bb7104 	addi	r2,r2,-4668
 100b1dc:	10800117 	ldw	r2,4(r2)
 100b1e0:	014040f4 	movhi	r5,259
 100b1e4:	2965e104 	addi	r5,r5,-26748
 100b1e8:	010001c4 	movi	r4,7
 100b1ec:	103ee83a 	callr	r2
			  "Loading ELF section header complete.\r\n");
	}
	/* Get ELF SHSTRTAB section */
	if ((*load_state & ELF_STATE_WAIT_FOR_SHSTRTAB) != 0) {
 100b1f0:	e0bfed17 	ldw	r2,-76(fp)
 100b1f4:	10800017 	ldw	r2,0(r2)
 100b1f8:	1081000c 	andi	r2,r2,1024
 100b1fc:	10006e26 	beq	r2,zero,100b3b8 <elf_load_header+0x710>
		size_t shstrtab_offset;
		int shstrndx;
		void *shdr;
		void **shstrtab;

		metal_log(METAL_LOG_DEBUG, "Loading ELF shstrtab.\r\n");
 100b200:	008060f4 	movhi	r2,387
 100b204:	10bb7104 	addi	r2,r2,-4668
 100b208:	10800017 	ldw	r2,0(r2)
 100b20c:	108001f0 	cmpltui	r2,r2,7
 100b210:	10000b1e 	bne	r2,zero,100b240 <elf_load_header+0x598>
 100b214:	008060f4 	movhi	r2,387
 100b218:	10bb7104 	addi	r2,r2,-4668
 100b21c:	10800117 	ldw	r2,4(r2)
 100b220:	10000726 	beq	r2,zero,100b240 <elf_load_header+0x598>
 100b224:	008060f4 	movhi	r2,387
 100b228:	10bb7104 	addi	r2,r2,-4668
 100b22c:	10800117 	ldw	r2,4(r2)
 100b230:	014040f4 	movhi	r5,259
 100b234:	2965eb04 	addi	r5,r5,-26708
 100b238:	010001c4 	movi	r4,7
 100b23c:	103ee83a 	callr	r2
		shstrndx = elf_shstrndx(*img_info);
 100b240:	e0bffe17 	ldw	r2,-8(fp)
 100b244:	10800017 	ldw	r2,0(r2)
 100b248:	1009883a 	mov	r4,r2
 100b24c:	100a2140 	call	100a214 <elf_shstrndx>
 100b250:	e0bff615 	stw	r2,-40(fp)
		shdr = elf_get_section_from_index(*img_info, shstrndx);
 100b254:	e0bffe17 	ldw	r2,-8(fp)
 100b258:	10800017 	ldw	r2,0(r2)
 100b25c:	e17ff617 	ldw	r5,-40(fp)
 100b260:	1009883a 	mov	r4,r2
 100b264:	100a7f00 	call	100a7f0 <elf_get_section_from_index>
 100b268:	e0bff715 	stw	r2,-36(fp)
		if (shdr == NULL)
 100b26c:	e0bff717 	ldw	r2,-36(fp)
 100b270:	1000021e 	bne	r2,zero,100b27c <elf_load_header+0x5d4>
			return -RPROC_EINVAL;
 100b274:	00bfff84 	movi	r2,-2
 100b278:	00005006 	br	100b3bc <elf_load_header+0x714>
		elf_parse_section(*img_info, shdr, NULL, NULL,
 100b27c:	e0bffe17 	ldw	r2,-8(fp)
 100b280:	10c00017 	ldw	r3,0(r2)
 100b284:	d8000615 	stw	zero,24(sp)
 100b288:	d8000515 	stw	zero,20(sp)
 100b28c:	d8000415 	stw	zero,16(sp)
 100b290:	d8000315 	stw	zero,12(sp)
 100b294:	e0bff904 	addi	r2,fp,-28
 100b298:	d8800215 	stw	r2,8(sp)
 100b29c:	e0bffa04 	addi	r2,fp,-24
 100b2a0:	d8800115 	stw	r2,4(sp)
 100b2a4:	d8000015 	stw	zero,0(sp)
 100b2a8:	000f883a 	mov	r7,zero
 100b2ac:	000d883a 	mov	r6,zero
 100b2b0:	e17ff717 	ldw	r5,-36(fp)
 100b2b4:	1809883a 	mov	r4,r3
 100b2b8:	100a8f40 	call	100a8f4 <elf_parse_section>
				  NULL, &shstrtab_offset,
				  &shstrtab_size, NULL, NULL,
				  NULL, NULL);
		if (offset > shstrtab_offset ||
 100b2bc:	e0fffa17 	ldw	r3,-24(fp)
 100b2c0:	e0bffc17 	ldw	r2,-16(fp)
 100b2c4:	18800736 	bltu	r3,r2,100b2e4 <elf_load_header+0x63c>
		    offset + len < shstrtab_offset + shstrtab_size) {
 100b2c8:	e0fffc17 	ldw	r3,-16(fp)
 100b2cc:	e0bffd17 	ldw	r2,-12(fp)
 100b2d0:	1887883a 	add	r3,r3,r2
 100b2d4:	e13ffa17 	ldw	r4,-24(fp)
 100b2d8:	e0bff917 	ldw	r2,-28(fp)
 100b2dc:	2085883a 	add	r2,r4,r2
			return -RPROC_EINVAL;
		elf_parse_section(*img_info, shdr, NULL, NULL,
				  NULL, &shstrtab_offset,
				  &shstrtab_size, NULL, NULL,
				  NULL, NULL);
		if (offset > shstrtab_offset ||
 100b2e0:	1880092e 	bgeu	r3,r2,100b308 <elf_load_header+0x660>
		    offset + len < shstrtab_offset + shstrtab_size) {
			*noffset = shstrtab_offset;
 100b2e4:	e0fffa17 	ldw	r3,-24(fp)
 100b2e8:	e0800317 	ldw	r2,12(fp)
 100b2ec:	10c00015 	stw	r3,0(r2)
			*nlen = shstrtab_size;
 100b2f0:	e0fff917 	ldw	r3,-28(fp)
 100b2f4:	e0800417 	ldw	r2,16(fp)
 100b2f8:	10c00015 	stw	r3,0(r2)
			return *load_state;
 100b2fc:	e0bfed17 	ldw	r2,-76(fp)
 100b300:	10800017 	ldw	r2,0(r2)
 100b304:	00002d06 	br	100b3bc <elf_load_header+0x714>
		}
		/* Calculate shstrtab section offset to the input image data */
		shstrtab_offset -= offset;
 100b308:	e0fffa17 	ldw	r3,-24(fp)
 100b30c:	e0bffc17 	ldw	r2,-16(fp)
 100b310:	1885c83a 	sub	r2,r3,r2
 100b314:	e0bffa15 	stw	r2,-24(fp)
		shstrtab = elf_shstrtab_ptr(*img_info);
 100b318:	e0bffe17 	ldw	r2,-8(fp)
 100b31c:	10800017 	ldw	r2,0(r2)
 100b320:	1009883a 	mov	r4,r2
 100b324:	100a3240 	call	100a324 <elf_shstrtab_ptr>
 100b328:	e0bff815 	stw	r2,-32(fp)
		*shstrtab = metal_allocate_memory(shstrtab_size);
 100b32c:	e0bff917 	ldw	r2,-28(fp)
 100b330:	1009883a 	mov	r4,r2
 100b334:	1009edc0 	call	1009edc <metal_allocate_memory>
 100b338:	1007883a 	mov	r3,r2
 100b33c:	e0bff817 	ldw	r2,-32(fp)
 100b340:	10c00015 	stw	r3,0(r2)
		if (*shstrtab == NULL)
 100b344:	e0bff817 	ldw	r2,-32(fp)
 100b348:	10800017 	ldw	r2,0(r2)
 100b34c:	1000021e 	bne	r2,zero,100b358 <elf_load_header+0x6b0>
			return -RPROC_ENOMEM;
 100b350:	00bfffc4 	movi	r2,-1
 100b354:	00001906 	br	100b3bc <elf_load_header+0x714>
		memcpy(*shstrtab,
 100b358:	e0bff817 	ldw	r2,-32(fp)
 100b35c:	11000017 	ldw	r4,0(r2)
 100b360:	e0bffa17 	ldw	r2,-24(fp)
		       (const char *)img_data + shstrtab_offset,
 100b364:	e0fffb17 	ldw	r3,-20(fp)
 100b368:	1885883a 	add	r2,r3,r2
		shstrtab_offset -= offset;
		shstrtab = elf_shstrtab_ptr(*img_info);
		*shstrtab = metal_allocate_memory(shstrtab_size);
		if (*shstrtab == NULL)
			return -RPROC_ENOMEM;
		memcpy(*shstrtab,
 100b36c:	e0fff917 	ldw	r3,-28(fp)
 100b370:	180d883a 	mov	r6,r3
 100b374:	100b883a 	mov	r5,r2
 100b378:	10157f40 	call	10157f4 <memcpy>
		       (const char *)img_data + shstrtab_offset,
		       shstrtab_size);
		*load_state = (*load_state & (~ELF_STATE_MASK)) |
 100b37c:	e0bfed17 	ldw	r2,-76(fp)
 100b380:	10800017 	ldw	r2,0(r2)
 100b384:	1007883a 	mov	r3,r2
 100b388:	00bffff4 	movhi	r2,65535
 100b38c:	10803fc4 	addi	r2,r2,255
 100b390:	1884703a 	and	r2,r3,r2
 100b394:	10820014 	ori	r2,r2,2048
 100b398:	1007883a 	mov	r3,r2
 100b39c:	e0bfed17 	ldw	r2,-76(fp)
 100b3a0:	10c00015 	stw	r3,0(r2)
			       ELF_STATE_HDRS_COMPLETE;
		*nlen = 0;
 100b3a4:	e0800417 	ldw	r2,16(fp)
 100b3a8:	10000015 	stw	zero,0(r2)
		return *load_state;
 100b3ac:	e0bfed17 	ldw	r2,-76(fp)
 100b3b0:	10800017 	ldw	r2,0(r2)
 100b3b4:	00000106 	br	100b3bc <elf_load_header+0x714>
	}
	return last_load_state;
 100b3b8:	e0800217 	ldw	r2,8(fp)
}
 100b3bc:	e6ffff04 	addi	sp,fp,-4
 100b3c0:	dfc00217 	ldw	ra,8(sp)
 100b3c4:	df000117 	ldw	fp,4(sp)
 100b3c8:	dc000017 	ldw	r16,0(sp)
 100b3cc:	dec00304 	addi	sp,sp,12
 100b3d0:	f800283a 	ret

0100b3d4 <elf_load>:
	     const void *img_data, size_t offset, size_t len,
	     void **img_info, int last_load_state,
	     metal_phys_addr_t *da,
	     size_t *noffset, size_t *nlen,
	     unsigned char *padding, size_t *nmemsize)
{
 100b3d4:	defff104 	addi	sp,sp,-60
 100b3d8:	dfc00e15 	stw	ra,56(sp)
 100b3dc:	df000d15 	stw	fp,52(sp)
 100b3e0:	df000d04 	addi	fp,sp,52
 100b3e4:	e13ffc15 	stw	r4,-16(fp)
 100b3e8:	e17ffd15 	stw	r5,-12(fp)
 100b3ec:	e1bffe15 	stw	r6,-8(fp)
 100b3f0:	e1ffff15 	stw	r7,-4(fp)
	int *load_state;
	const void *phdr;

	(void)rproc;
	metal_assert(da != NULL);
 100b3f4:	e0800417 	ldw	r2,16(fp)
 100b3f8:	1000081e 	bne	r2,zero,100b41c <elf_load+0x48>
 100b3fc:	01c040f4 	movhi	r7,259
 100b400:	39e5f104 	addi	r7,r7,-26684
 100b404:	018040f4 	movhi	r6,259
 100b408:	31a62704 	addi	r6,r6,-26468
 100b40c:	014088c4 	movi	r5,547
 100b410:	010040f4 	movhi	r4,259
 100b414:	2125b604 	addi	r4,r4,-26920
 100b418:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(noffset != NULL);
 100b41c:	e0800517 	ldw	r2,20(fp)
 100b420:	1000081e 	bne	r2,zero,100b444 <elf_load+0x70>
 100b424:	01c040f4 	movhi	r7,259
 100b428:	39e5b004 	addi	r7,r7,-26944
 100b42c:	018040f4 	movhi	r6,259
 100b430:	31a62704 	addi	r6,r6,-26468
 100b434:	01408904 	movi	r5,548
 100b438:	010040f4 	movhi	r4,259
 100b43c:	2125b604 	addi	r4,r4,-26920
 100b440:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(nlen != NULL);
 100b444:	e0800617 	ldw	r2,24(fp)
 100b448:	1000081e 	bne	r2,zero,100b46c <elf_load+0x98>
 100b44c:	01c040f4 	movhi	r7,259
 100b450:	39e5bf04 	addi	r7,r7,-26884
 100b454:	018040f4 	movhi	r6,259
 100b458:	31a62704 	addi	r6,r6,-26468
 100b45c:	01408944 	movi	r5,549
 100b460:	010040f4 	movhi	r4,259
 100b464:	2125b604 	addi	r4,r4,-26920
 100b468:	10156a00 	call	10156a0 <__assert_func>
	if ((last_load_state & RPROC_LOADER_MASK) == RPROC_LOADER_NOT_READY) {
 100b46c:	e0800317 	ldw	r2,12(fp)
 100b470:	10803fec 	andhi	r2,r2,255
 100b474:	1000241e 	bne	r2,zero,100b508 <elf_load+0x134>
		metal_log(METAL_LOG_DEBUG,
 100b478:	008060f4 	movhi	r2,387
 100b47c:	10bb7104 	addi	r2,r2,-4668
 100b480:	10800017 	ldw	r2,0(r2)
 100b484:	108001f0 	cmpltui	r2,r2,7
 100b488:	10000b1e 	bne	r2,zero,100b4b8 <elf_load+0xe4>
 100b48c:	008060f4 	movhi	r2,387
 100b490:	10bb7104 	addi	r2,r2,-4668
 100b494:	10800117 	ldw	r2,4(r2)
 100b498:	10000726 	beq	r2,zero,100b4b8 <elf_load+0xe4>
 100b49c:	008060f4 	movhi	r2,387
 100b4a0:	10bb7104 	addi	r2,r2,-4668
 100b4a4:	10800117 	ldw	r2,4(r2)
 100b4a8:	014040f4 	movhi	r5,259
 100b4ac:	2965f604 	addi	r5,r5,-26664
 100b4b0:	010001c4 	movi	r4,7
 100b4b4:	103ee83a 	callr	r2
			  "needs to load header first\r\n");
		last_load_state = elf_load_header(img_data, offset, len,
 100b4b8:	e0800617 	ldw	r2,24(fp)
 100b4bc:	d8800215 	stw	r2,8(sp)
 100b4c0:	e0800517 	ldw	r2,20(fp)
 100b4c4:	d8800115 	stw	r2,4(sp)
 100b4c8:	e0800317 	ldw	r2,12(fp)
 100b4cc:	d8800015 	stw	r2,0(sp)
 100b4d0:	e1c00217 	ldw	r7,8(fp)
 100b4d4:	e1bfff17 	ldw	r6,-4(fp)
 100b4d8:	e17ffe17 	ldw	r5,-8(fp)
 100b4dc:	e13ffd17 	ldw	r4,-12(fp)
 100b4e0:	100aca80 	call	100aca8 <elf_load_header>
 100b4e4:	e0800315 	stw	r2,12(fp)
						  img_info, last_load_state,
						  noffset, nlen);
		if ((last_load_state & RPROC_LOADER_MASK) ==
 100b4e8:	e0800317 	ldw	r2,12(fp)
 100b4ec:	10803fec 	andhi	r2,r2,255
 100b4f0:	1000051e 	bne	r2,zero,100b508 <elf_load+0x134>
		    RPROC_LOADER_NOT_READY) {
			*da = RPROC_LOAD_ANYADDR;
 100b4f4:	e0800417 	ldw	r2,16(fp)
 100b4f8:	00ffffc4 	movi	r3,-1
 100b4fc:	10c00015 	stw	r3,0(r2)
			return last_load_state;
 100b500:	e0800317 	ldw	r2,12(fp)
 100b504:	0000be06 	br	100b800 <elf_load+0x42c>
		}
	}
	metal_assert(img_info != NULL && *img_info != NULL);
 100b508:	e0800217 	ldw	r2,8(fp)
 100b50c:	10000326 	beq	r2,zero,100b51c <elf_load+0x148>
 100b510:	e0800217 	ldw	r2,8(fp)
 100b514:	10800017 	ldw	r2,0(r2)
 100b518:	1000081e 	bne	r2,zero,100b53c <elf_load+0x168>
 100b51c:	01c040f4 	movhi	r7,259
 100b520:	39e5fe04 	addi	r7,r7,-26632
 100b524:	018040f4 	movhi	r6,259
 100b528:	31a62704 	addi	r6,r6,-26468
 100b52c:	01408c84 	movi	r5,562
 100b530:	010040f4 	movhi	r4,259
 100b534:	2125b604 	addi	r4,r4,-26920
 100b538:	10156a00 	call	10156a0 <__assert_func>
	load_state = elf_load_state(*img_info);
 100b53c:	e0800217 	ldw	r2,8(fp)
 100b540:	10800017 	ldw	r2,0(r2)
 100b544:	1009883a 	mov	r4,r2
 100b548:	100a37c0 	call	100a37c <elf_load_state>
 100b54c:	e0bff615 	stw	r2,-40(fp)
	/* For ELF, segment padding value is 0 */
	if (padding != NULL)
 100b550:	e0800717 	ldw	r2,28(fp)
 100b554:	10000226 	beq	r2,zero,100b560 <elf_load+0x18c>
		*padding = 0;
 100b558:	e0800717 	ldw	r2,28(fp)
 100b55c:	10000005 	stb	zero,0(r2)
	if ((*load_state & RPROC_LOADER_READY_TO_LOAD) != 0) {
 100b560:	e0bff617 	ldw	r2,-40(fp)
 100b564:	10800017 	ldw	r2,0(r2)
 100b568:	1080006c 	andhi	r2,r2,1
 100b56c:	10006b26 	beq	r2,zero,100b71c <elf_load+0x348>
		int nsegment;
		size_t nsegmsize = 0;
 100b570:	e03ffa15 	stw	zero,-24(fp)
		size_t nsize = 0;
 100b574:	e03ffb15 	stw	zero,-20(fp)
		int phnums = 0;
 100b578:	e03ff715 	stw	zero,-36(fp)

		nsegment = *load_state & ELF_NEXT_SEGMENT_MASK;
 100b57c:	e0bff617 	ldw	r2,-40(fp)
 100b580:	10800017 	ldw	r2,0(r2)
 100b584:	10803fcc 	andi	r2,r2,255
 100b588:	e0bff915 	stw	r2,-28(fp)
		phdr = elf_next_load_segment(*img_info, &nsegment, da,
 100b58c:	e0800217 	ldw	r2,8(fp)
 100b590:	10c00017 	ldw	r3,0(r2)
 100b594:	e13ff904 	addi	r4,fp,-28
 100b598:	e0bffa04 	addi	r2,fp,-24
 100b59c:	d8800115 	stw	r2,4(sp)
 100b5a0:	e0bffb04 	addi	r2,fp,-20
 100b5a4:	d8800015 	stw	r2,0(sp)
 100b5a8:	e1c00517 	ldw	r7,20(fp)
 100b5ac:	e1800417 	ldw	r6,16(fp)
 100b5b0:	200b883a 	mov	r5,r4
 100b5b4:	1809883a 	mov	r4,r3
 100b5b8:	100ab2c0 	call	100ab2c <elf_next_load_segment>
 100b5bc:	e0bff815 	stw	r2,-32(fp)
					     noffset, &nsize, &nsegmsize);
		if (phdr == NULL) {
 100b5c0:	e0bff817 	ldw	r2,-32(fp)
 100b5c4:	10001e1e 	bne	r2,zero,100b640 <elf_load+0x26c>
			metal_log(METAL_LOG_DEBUG, "cannot find more segment\r\n");
 100b5c8:	008060f4 	movhi	r2,387
 100b5cc:	10bb7104 	addi	r2,r2,-4668
 100b5d0:	10800017 	ldw	r2,0(r2)
 100b5d4:	108001f0 	cmpltui	r2,r2,7
 100b5d8:	10000b1e 	bne	r2,zero,100b608 <elf_load+0x234>
 100b5dc:	008060f4 	movhi	r2,387
 100b5e0:	10bb7104 	addi	r2,r2,-4668
 100b5e4:	10800117 	ldw	r2,4(r2)
 100b5e8:	10000726 	beq	r2,zero,100b608 <elf_load+0x234>
 100b5ec:	008060f4 	movhi	r2,387
 100b5f0:	10bb7104 	addi	r2,r2,-4668
 100b5f4:	10800117 	ldw	r2,4(r2)
 100b5f8:	014040f4 	movhi	r5,259
 100b5fc:	29660b04 	addi	r5,r5,-26580
 100b600:	010001c4 	movi	r4,7
 100b604:	103ee83a 	callr	r2
			*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b608:	e0bff617 	ldw	r2,-40(fp)
 100b60c:	10800017 	ldw	r2,0(r2)
 100b610:	1007883a 	mov	r3,r2
 100b614:	00bfc004 	movi	r2,-256
 100b618:	1886703a 	and	r3,r3,r2
				      (nsegment & ELF_NEXT_SEGMENT_MASK);
 100b61c:	e0bff917 	ldw	r2,-28(fp)
 100b620:	10803fcc 	andi	r2,r2,255
		nsegment = *load_state & ELF_NEXT_SEGMENT_MASK;
		phdr = elf_next_load_segment(*img_info, &nsegment, da,
					     noffset, &nsize, &nsegmsize);
		if (phdr == NULL) {
			metal_log(METAL_LOG_DEBUG, "cannot find more segment\r\n");
			*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b624:	1884b03a 	or	r2,r3,r2
 100b628:	1007883a 	mov	r3,r2
 100b62c:	e0bff617 	ldw	r2,-40(fp)
 100b630:	10c00015 	stw	r3,0(r2)
				      (nsegment & ELF_NEXT_SEGMENT_MASK);
			return *load_state;
 100b634:	e0bff617 	ldw	r2,-40(fp)
 100b638:	10800017 	ldw	r2,0(r2)
 100b63c:	00007006 	br	100b800 <elf_load+0x42c>
		}
		*nlen = nsize;
 100b640:	e0fffb17 	ldw	r3,-20(fp)
 100b644:	e0800617 	ldw	r2,24(fp)
 100b648:	10c00015 	stw	r3,0(r2)
		*nmemsize = nsegmsize;
 100b64c:	e0fffa17 	ldw	r3,-24(fp)
 100b650:	e0800817 	ldw	r2,32(fp)
 100b654:	10c00015 	stw	r3,0(r2)
		phnums = elf_phnum(*img_info);
 100b658:	e0800217 	ldw	r2,8(fp)
 100b65c:	10800017 	ldw	r2,0(r2)
 100b660:	1009883a 	mov	r4,r2
 100b664:	100a0980 	call	100a098 <elf_phnum>
 100b668:	e0bff715 	stw	r2,-36(fp)
		metal_log(METAL_LOG_DEBUG, "segment: %d, total segs %d\r\n",
 100b66c:	008060f4 	movhi	r2,387
 100b670:	10bb7104 	addi	r2,r2,-4668
 100b674:	10800017 	ldw	r2,0(r2)
 100b678:	108001f0 	cmpltui	r2,r2,7
 100b67c:	10000e1e 	bne	r2,zero,100b6b8 <elf_load+0x2e4>
 100b680:	008060f4 	movhi	r2,387
 100b684:	10bb7104 	addi	r2,r2,-4668
 100b688:	10800117 	ldw	r2,4(r2)
 100b68c:	10000a26 	beq	r2,zero,100b6b8 <elf_load+0x2e4>
 100b690:	008060f4 	movhi	r2,387
 100b694:	10bb7104 	addi	r2,r2,-4668
 100b698:	10800117 	ldw	r2,4(r2)
 100b69c:	e0fff917 	ldw	r3,-28(fp)
 100b6a0:	e1fff717 	ldw	r7,-36(fp)
 100b6a4:	180d883a 	mov	r6,r3
 100b6a8:	014040f4 	movhi	r5,259
 100b6ac:	29661204 	addi	r5,r5,-26552
 100b6b0:	010001c4 	movi	r4,7
 100b6b4:	103ee83a 	callr	r2
			  nsegment, phnums);
		if (nsegment == phnums) {
 100b6b8:	e0fff917 	ldw	r3,-28(fp)
 100b6bc:	e0bff717 	ldw	r2,-36(fp)
 100b6c0:	18800a1e 	bne	r3,r2,100b6ec <elf_load+0x318>
			*load_state = (*load_state & (~RPROC_LOADER_MASK)) |
 100b6c4:	e0bff617 	ldw	r2,-40(fp)
 100b6c8:	10800017 	ldw	r2,0(r2)
 100b6cc:	1007883a 	mov	r3,r2
 100b6d0:	00bfc074 	movhi	r2,65281
 100b6d4:	10bfffc4 	addi	r2,r2,-1
 100b6d8:	1884703a 	and	r2,r3,r2
 100b6dc:	108000b4 	orhi	r2,r2,2
 100b6e0:	1007883a 	mov	r3,r2
 100b6e4:	e0bff617 	ldw	r2,-40(fp)
 100b6e8:	10c00015 	stw	r3,0(r2)
				      RPROC_LOADER_POST_DATA_LOAD;
		}
		*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b6ec:	e0bff617 	ldw	r2,-40(fp)
 100b6f0:	10800017 	ldw	r2,0(r2)
 100b6f4:	1007883a 	mov	r3,r2
 100b6f8:	00bfc004 	movi	r2,-256
 100b6fc:	1886703a 	and	r3,r3,r2
			      (nsegment & ELF_NEXT_SEGMENT_MASK);
 100b700:	e0bff917 	ldw	r2,-28(fp)
 100b704:	10803fcc 	andi	r2,r2,255
			  nsegment, phnums);
		if (nsegment == phnums) {
			*load_state = (*load_state & (~RPROC_LOADER_MASK)) |
				      RPROC_LOADER_POST_DATA_LOAD;
		}
		*load_state = (*load_state & (~ELF_NEXT_SEGMENT_MASK)) |
 100b708:	1884b03a 	or	r2,r3,r2
 100b70c:	1007883a 	mov	r3,r2
 100b710:	e0bff617 	ldw	r2,-40(fp)
 100b714:	10c00015 	stw	r3,0(r2)
 100b718:	00003706 	br	100b7f8 <elf_load+0x424>
			      (nsegment & ELF_NEXT_SEGMENT_MASK);
	} else if ((*load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
 100b71c:	e0bff617 	ldw	r2,-40(fp)
 100b720:	10800017 	ldw	r2,0(r2)
 100b724:	108000ac 	andhi	r2,r2,2
 100b728:	10003326 	beq	r2,zero,100b7f8 <elf_load+0x424>
		if ((*load_state & ELF_STATE_HDRS_COMPLETE) == 0) {
 100b72c:	e0bff617 	ldw	r2,-40(fp)
 100b730:	10800017 	ldw	r2,0(r2)
 100b734:	1082000c 	andi	r2,r2,2048
 100b738:	1000231e 	bne	r2,zero,100b7c8 <elf_load+0x3f4>
			last_load_state = elf_load_header(img_data, offset,
 100b73c:	e0800617 	ldw	r2,24(fp)
 100b740:	d8800215 	stw	r2,8(sp)
 100b744:	e0800517 	ldw	r2,20(fp)
 100b748:	d8800115 	stw	r2,4(sp)
 100b74c:	e0800317 	ldw	r2,12(fp)
 100b750:	d8800015 	stw	r2,0(sp)
 100b754:	e1c00217 	ldw	r7,8(fp)
 100b758:	e1bfff17 	ldw	r6,-4(fp)
 100b75c:	e17ffe17 	ldw	r5,-8(fp)
 100b760:	e13ffd17 	ldw	r4,-12(fp)
 100b764:	100aca80 	call	100aca8 <elf_load_header>
 100b768:	e0800315 	stw	r2,12(fp)
							  len, img_info,
							  last_load_state,
							  noffset, nlen);
			if (last_load_state < 0)
 100b76c:	e0800317 	ldw	r2,12(fp)
 100b770:	1000020e 	bge	r2,zero,100b77c <elf_load+0x3a8>
				return last_load_state;
 100b774:	e0800317 	ldw	r2,12(fp)
 100b778:	00002106 	br	100b800 <elf_load+0x42c>
			if ((last_load_state & ELF_STATE_HDRS_COMPLETE) != 0) {
 100b77c:	e0800317 	ldw	r2,12(fp)
 100b780:	1082000c 	andi	r2,r2,2048
 100b784:	10000c26 	beq	r2,zero,100b7b8 <elf_load+0x3e4>
				*load_state = (*load_state &
 100b788:	e0bff617 	ldw	r2,-40(fp)
 100b78c:	10800017 	ldw	r2,0(r2)
 100b790:	1007883a 	mov	r3,r2
 100b794:	00bfc074 	movhi	r2,65281
 100b798:	10bfffc4 	addi	r2,r2,-1
 100b79c:	1884703a 	and	r2,r3,r2
						(~RPROC_LOADER_MASK)) |
 100b7a0:	10800134 	orhi	r2,r2,4
							  last_load_state,
							  noffset, nlen);
			if (last_load_state < 0)
				return last_load_state;
			if ((last_load_state & ELF_STATE_HDRS_COMPLETE) != 0) {
				*load_state = (*load_state &
 100b7a4:	1007883a 	mov	r3,r2
 100b7a8:	e0bff617 	ldw	r2,-40(fp)
 100b7ac:	10c00015 	stw	r3,0(r2)
						(~RPROC_LOADER_MASK)) |
						RPROC_LOADER_LOAD_COMPLETE;
				*nlen = 0;
 100b7b0:	e0800617 	ldw	r2,24(fp)
 100b7b4:	10000015 	stw	zero,0(r2)
			}
			*da = RPROC_LOAD_ANYADDR;
 100b7b8:	e0800417 	ldw	r2,16(fp)
 100b7bc:	00ffffc4 	movi	r3,-1
 100b7c0:	10c00015 	stw	r3,0(r2)
 100b7c4:	00000c06 	br	100b7f8 <elf_load+0x424>
		} else {
		/* TODO: will handle relocate later */
			*nlen = 0;
 100b7c8:	e0800617 	ldw	r2,24(fp)
 100b7cc:	10000015 	stw	zero,0(r2)
			*load_state = (*load_state &
 100b7d0:	e0bff617 	ldw	r2,-40(fp)
 100b7d4:	10800017 	ldw	r2,0(r2)
 100b7d8:	1007883a 	mov	r3,r2
 100b7dc:	00bfc074 	movhi	r2,65281
 100b7e0:	10bfffc4 	addi	r2,r2,-1
 100b7e4:	1884703a 	and	r2,r3,r2
					(~RPROC_LOADER_MASK)) |
 100b7e8:	10800134 	orhi	r2,r2,4
			}
			*da = RPROC_LOAD_ANYADDR;
		} else {
		/* TODO: will handle relocate later */
			*nlen = 0;
			*load_state = (*load_state &
 100b7ec:	1007883a 	mov	r3,r2
 100b7f0:	e0bff617 	ldw	r2,-40(fp)
 100b7f4:	10c00015 	stw	r3,0(r2)
					(~RPROC_LOADER_MASK)) |
					RPROC_LOADER_LOAD_COMPLETE;
		}
	}
	return *load_state;
 100b7f8:	e0bff617 	ldw	r2,-40(fp)
 100b7fc:	10800017 	ldw	r2,0(r2)
}
 100b800:	e037883a 	mov	sp,fp
 100b804:	dfc00117 	ldw	ra,4(sp)
 100b808:	df000017 	ldw	fp,0(sp)
 100b80c:	dec00204 	addi	sp,sp,8
 100b810:	f800283a 	ret

0100b814 <elf_release>:

void elf_release(void *img_info)
{
 100b814:	defffb04 	addi	sp,sp,-20
 100b818:	dfc00415 	stw	ra,16(sp)
 100b81c:	df000315 	stw	fp,12(sp)
 100b820:	df000304 	addi	fp,sp,12
 100b824:	e13fff15 	stw	r4,-4(fp)
	if (img_info == NULL)
 100b828:	e0bfff17 	ldw	r2,-4(fp)
 100b82c:	10003726 	beq	r2,zero,100b90c <elf_release+0xf8>
		return;
	if (elf_is_64(img_info) == 0) {
 100b830:	e13fff17 	ldw	r4,-4(fp)
 100b834:	1009f400 	call	1009f40 <elf_is_64>
 100b838:	10001a1e 	bne	r2,zero,100b8a4 <elf_release+0x90>
		struct elf32_info *elf_info = img_info;
 100b83c:	e0bfff17 	ldw	r2,-4(fp)
 100b840:	e0bffd15 	stw	r2,-12(fp)

		if (elf_info->phdrs != NULL)
 100b844:	e0bffd17 	ldw	r2,-12(fp)
 100b848:	10800e17 	ldw	r2,56(r2)
 100b84c:	10000426 	beq	r2,zero,100b860 <elf_release+0x4c>
			metal_free_memory(elf_info->phdrs);
 100b850:	e0bffd17 	ldw	r2,-12(fp)
 100b854:	10800e17 	ldw	r2,56(r2)
 100b858:	1009883a 	mov	r4,r2
 100b85c:	1009f0c0 	call	1009f0c <metal_free_memory>
		if (elf_info->shdrs != NULL)
 100b860:	e0bffd17 	ldw	r2,-12(fp)
 100b864:	10800f17 	ldw	r2,60(r2)
 100b868:	10000426 	beq	r2,zero,100b87c <elf_release+0x68>
			metal_free_memory(elf_info->shdrs);
 100b86c:	e0bffd17 	ldw	r2,-12(fp)
 100b870:	10800f17 	ldw	r2,60(r2)
 100b874:	1009883a 	mov	r4,r2
 100b878:	1009f0c0 	call	1009f0c <metal_free_memory>
		if (elf_info->shstrtab != NULL)
 100b87c:	e0bffd17 	ldw	r2,-12(fp)
 100b880:	10801017 	ldw	r2,64(r2)
 100b884:	10000426 	beq	r2,zero,100b898 <elf_release+0x84>
			metal_free_memory(elf_info->shstrtab);
 100b888:	e0bffd17 	ldw	r2,-12(fp)
 100b88c:	10801017 	ldw	r2,64(r2)
 100b890:	1009883a 	mov	r4,r2
 100b894:	1009f0c0 	call	1009f0c <metal_free_memory>
		metal_free_memory(img_info);
 100b898:	e13fff17 	ldw	r4,-4(fp)
 100b89c:	1009f0c0 	call	1009f0c <metal_free_memory>
 100b8a0:	00001b06 	br	100b910 <elf_release+0xfc>

	} else {
		struct elf64_info *elf_info = img_info;
 100b8a4:	e0bfff17 	ldw	r2,-4(fp)
 100b8a8:	e0bffe15 	stw	r2,-8(fp)

		if (elf_info->phdrs != NULL)
 100b8ac:	e0bffe17 	ldw	r2,-8(fp)
 100b8b0:	10801117 	ldw	r2,68(r2)
 100b8b4:	10000426 	beq	r2,zero,100b8c8 <elf_release+0xb4>
			metal_free_memory(elf_info->phdrs);
 100b8b8:	e0bffe17 	ldw	r2,-8(fp)
 100b8bc:	10801117 	ldw	r2,68(r2)
 100b8c0:	1009883a 	mov	r4,r2
 100b8c4:	1009f0c0 	call	1009f0c <metal_free_memory>
		if (elf_info->shdrs != NULL)
 100b8c8:	e0bffe17 	ldw	r2,-8(fp)
 100b8cc:	10801217 	ldw	r2,72(r2)
 100b8d0:	10000426 	beq	r2,zero,100b8e4 <elf_release+0xd0>
			metal_free_memory(elf_info->shdrs);
 100b8d4:	e0bffe17 	ldw	r2,-8(fp)
 100b8d8:	10801217 	ldw	r2,72(r2)
 100b8dc:	1009883a 	mov	r4,r2
 100b8e0:	1009f0c0 	call	1009f0c <metal_free_memory>
		if (elf_info->shstrtab != NULL)
 100b8e4:	e0bffe17 	ldw	r2,-8(fp)
 100b8e8:	10801317 	ldw	r2,76(r2)
 100b8ec:	10000426 	beq	r2,zero,100b900 <elf_release+0xec>
			metal_free_memory(elf_info->shstrtab);
 100b8f0:	e0bffe17 	ldw	r2,-8(fp)
 100b8f4:	10801317 	ldw	r2,76(r2)
 100b8f8:	1009883a 	mov	r4,r2
 100b8fc:	1009f0c0 	call	1009f0c <metal_free_memory>
		metal_free_memory(img_info);
 100b900:	e13fff17 	ldw	r4,-4(fp)
 100b904:	1009f0c0 	call	1009f0c <metal_free_memory>
 100b908:	00000106 	br	100b910 <elf_release+0xfc>
}

void elf_release(void *img_info)
{
	if (img_info == NULL)
		return;
 100b90c:	0001883a 	nop
			metal_free_memory(elf_info->shdrs);
		if (elf_info->shstrtab != NULL)
			metal_free_memory(elf_info->shstrtab);
		metal_free_memory(img_info);
	}
}
 100b910:	e037883a 	mov	sp,fp
 100b914:	dfc00117 	ldw	ra,4(sp)
 100b918:	df000017 	ldw	fp,0(sp)
 100b91c:	dec00204 	addi	sp,sp,8
 100b920:	f800283a 	ret

0100b924 <elf_get_entry>:

metal_phys_addr_t elf_get_entry(void *elf_info)
{
 100b924:	defff804 	addi	sp,sp,-32
 100b928:	dfc00715 	stw	ra,28(sp)
 100b92c:	df000615 	stw	fp,24(sp)
 100b930:	df000604 	addi	fp,sp,24
 100b934:	e13fff15 	stw	r4,-4(fp)
	if (!elf_info)
 100b938:	e0bfff17 	ldw	r2,-4(fp)
 100b93c:	1000021e 	bne	r2,zero,100b948 <elf_get_entry+0x24>
		return METAL_BAD_PHYS;
 100b940:	00bfffc4 	movi	r2,-1
 100b944:	00001206 	br	100b990 <elf_get_entry+0x6c>

	if (elf_is_64(elf_info) == 0) {
 100b948:	e13fff17 	ldw	r4,-4(fp)
 100b94c:	1009f400 	call	1009f40 <elf_is_64>
 100b950:	1000071e 	bne	r2,zero,100b970 <elf_get_entry+0x4c>
		Elf32_Ehdr *elf_ehdr = elf_info;
 100b954:	e0bfff17 	ldw	r2,-4(fp)
 100b958:	e0bffa15 	stw	r2,-24(fp)
		Elf32_Addr e_entry;

		e_entry = elf_ehdr->e_entry;
 100b95c:	e0bffa17 	ldw	r2,-24(fp)
 100b960:	10800617 	ldw	r2,24(r2)
 100b964:	e0bffb15 	stw	r2,-20(fp)
		return (metal_phys_addr_t)e_entry;
 100b968:	e0bffb17 	ldw	r2,-20(fp)
 100b96c:	00000806 	br	100b990 <elf_get_entry+0x6c>
	} else {
		Elf64_Ehdr *elf_ehdr = elf_info;
 100b970:	e0bfff17 	ldw	r2,-4(fp)
 100b974:	e0bffc15 	stw	r2,-16(fp)
		Elf64_Addr e_entry;

		e_entry = elf_ehdr->e_entry;
 100b978:	e0bffc17 	ldw	r2,-16(fp)
 100b97c:	10c00617 	ldw	r3,24(r2)
 100b980:	e0fffd15 	stw	r3,-12(fp)
 100b984:	10800717 	ldw	r2,28(r2)
 100b988:	e0bffe15 	stw	r2,-8(fp)
		return (metal_phys_addr_t)e_entry;
 100b98c:	e0bffd17 	ldw	r2,-12(fp)
	}
}
 100b990:	e037883a 	mov	sp,fp
 100b994:	dfc00117 	ldw	ra,4(sp)
 100b998:	df000017 	ldw	fp,0(sp)
 100b99c:	dec00204 	addi	sp,sp,8
 100b9a0:	f800283a 	ret

0100b9a4 <elf_locate_rsc_table>:

int elf_locate_rsc_table(void *elf_info, metal_phys_addr_t *da,
			 size_t *offset, size_t *size)
{
 100b9a4:	defff004 	addi	sp,sp,-64
 100b9a8:	dfc00f15 	stw	ra,60(sp)
 100b9ac:	df000e15 	stw	fp,56(sp)
 100b9b0:	df000e04 	addi	fp,sp,56
 100b9b4:	e13ffc15 	stw	r4,-16(fp)
 100b9b8:	e17ffd15 	stw	r5,-12(fp)
 100b9bc:	e1bffe15 	stw	r6,-8(fp)
 100b9c0:	e1ffff15 	stw	r7,-4(fp)
	char *sect_name = ".resource_table";
 100b9c4:	008040f4 	movhi	r2,259
 100b9c8:	10a61a04 	addi	r2,r2,-26520
 100b9cc:	e0bff915 	stw	r2,-28(fp)
	void *shdr;
	int *load_state;

	if (elf_info == NULL)
 100b9d0:	e0bffc17 	ldw	r2,-16(fp)
 100b9d4:	1000021e 	bne	r2,zero,100b9e0 <elf_locate_rsc_table+0x3c>
		return -RPROC_EINVAL;
 100b9d8:	00bfff84 	movi	r2,-2
 100b9dc:	00002d06 	br	100ba94 <elf_locate_rsc_table+0xf0>

	load_state = elf_load_state(elf_info);
 100b9e0:	e13ffc17 	ldw	r4,-16(fp)
 100b9e4:	100a37c0 	call	100a37c <elf_load_state>
 100b9e8:	e0bffa15 	stw	r2,-24(fp)
	if ((*load_state & ELF_STATE_HDRS_COMPLETE) == 0)
 100b9ec:	e0bffa17 	ldw	r2,-24(fp)
 100b9f0:	10800017 	ldw	r2,0(r2)
 100b9f4:	1082000c 	andi	r2,r2,2048
 100b9f8:	1000021e 	bne	r2,zero,100ba04 <elf_locate_rsc_table+0x60>
		return -RPROC_ERR_LOADER_STATE;
 100b9fc:	00bffd04 	movi	r2,-12
 100ba00:	00002406 	br	100ba94 <elf_locate_rsc_table+0xf0>
	shdr = elf_get_section_from_name(elf_info, sect_name);
 100ba04:	e17ff917 	ldw	r5,-28(fp)
 100ba08:	e13ffc17 	ldw	r4,-16(fp)
 100ba0c:	100a6700 	call	100a670 <elf_get_section_from_name>
 100ba10:	e0bffb15 	stw	r2,-20(fp)
	if (shdr == NULL) {
 100ba14:	e0bffb17 	ldw	r2,-20(fp)
 100ba18:	10000e1e 	bne	r2,zero,100ba54 <elf_locate_rsc_table+0xb0>
		metal_assert(size != NULL);
 100ba1c:	e0bfff17 	ldw	r2,-4(fp)
 100ba20:	1000081e 	bne	r2,zero,100ba44 <elf_locate_rsc_table+0xa0>
 100ba24:	01c040f4 	movhi	r7,259
 100ba28:	39e61e04 	addi	r7,r7,-26504
 100ba2c:	018040f4 	movhi	r6,259
 100ba30:	31a62a04 	addi	r6,r6,-26456
 100ba34:	0140aa84 	movi	r5,682
 100ba38:	010040f4 	movhi	r4,259
 100ba3c:	2125b604 	addi	r4,r4,-26920
 100ba40:	10156a00 	call	10156a0 <__assert_func>
		*size = 0;
 100ba44:	e0bfff17 	ldw	r2,-4(fp)
 100ba48:	10000015 	stw	zero,0(r2)
		return 0;
 100ba4c:	0005883a 	mov	r2,zero
 100ba50:	00001006 	br	100ba94 <elf_locate_rsc_table+0xf0>
	}
	elf_parse_section(elf_info, shdr, NULL, NULL,
 100ba54:	d8000615 	stw	zero,24(sp)
 100ba58:	d8000515 	stw	zero,20(sp)
 100ba5c:	d8000415 	stw	zero,16(sp)
 100ba60:	d8000315 	stw	zero,12(sp)
 100ba64:	e0bfff17 	ldw	r2,-4(fp)
 100ba68:	d8800215 	stw	r2,8(sp)
 100ba6c:	e0bffe17 	ldw	r2,-8(fp)
 100ba70:	d8800115 	stw	r2,4(sp)
 100ba74:	e0bffd17 	ldw	r2,-12(fp)
 100ba78:	d8800015 	stw	r2,0(sp)
 100ba7c:	000f883a 	mov	r7,zero
 100ba80:	000d883a 	mov	r6,zero
 100ba84:	e17ffb17 	ldw	r5,-20(fp)
 100ba88:	e13ffc17 	ldw	r4,-16(fp)
 100ba8c:	100a8f40 	call	100a8f4 <elf_parse_section>
			  da, offset, size,
			  NULL, NULL, NULL, NULL);
	return 0;
 100ba90:	0005883a 	mov	r2,zero
}
 100ba94:	e037883a 	mov	sp,fp
 100ba98:	dfc00117 	ldw	ra,4(sp)
 100ba9c:	df000017 	ldw	fp,0(sp)
 100baa0:	dec00204 	addi	sp,sp,8
 100baa4:	f800283a 	ret

0100baa8 <elf_get_load_state>:

int elf_get_load_state(void *img_info)
{
 100baa8:	defffc04 	addi	sp,sp,-16
 100baac:	dfc00315 	stw	ra,12(sp)
 100bab0:	df000215 	stw	fp,8(sp)
 100bab4:	df000204 	addi	fp,sp,8
 100bab8:	e13fff15 	stw	r4,-4(fp)
	int *load_state;

	if (img_info == NULL)
 100babc:	e0bfff17 	ldw	r2,-4(fp)
 100bac0:	1000021e 	bne	r2,zero,100bacc <elf_get_load_state+0x24>
		return -RPROC_EINVAL;
 100bac4:	00bfff84 	movi	r2,-2
 100bac8:	00000506 	br	100bae0 <elf_get_load_state+0x38>
	load_state = elf_load_state(img_info);
 100bacc:	e13fff17 	ldw	r4,-4(fp)
 100bad0:	100a37c0 	call	100a37c <elf_load_state>
 100bad4:	e0bffe15 	stw	r2,-8(fp)
	return *load_state;
 100bad8:	e0bffe17 	ldw	r2,-8(fp)
 100badc:	10800017 	ldw	r2,0(r2)
}
 100bae0:	e037883a 	mov	sp,fp
 100bae4:	dfc00117 	ldw	ra,4(sp)
 100bae8:	df000017 	ldw	fp,0(sp)
 100baec:	dec00204 	addi	sp,sp,8
 100baf0:	f800283a 	ret

0100baf4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 100baf4:	defffd04 	addi	sp,sp,-12
 100baf8:	dfc00215 	stw	ra,8(sp)
 100bafc:	df000115 	stw	fp,4(sp)
 100bb00:	df000104 	addi	fp,sp,4
 100bb04:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 100bb08:	e13fff17 	ldw	r4,-4(fp)
 100bb0c:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100bb10:	e037883a 	mov	sp,fp
 100bb14:	dfc00117 	ldw	ra,4(sp)
 100bb18:	df000017 	ldw	fp,0(sp)
 100bb1c:	dec00204 	addi	sp,sp,8
 100bb20:	f800283a 	ret

0100bb24 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 100bb24:	defffd04 	addi	sp,sp,-12
 100bb28:	dfc00215 	stw	ra,8(sp)
 100bb2c:	df000115 	stw	fp,4(sp)
 100bb30:	df000104 	addi	fp,sp,4
 100bb34:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 100bb38:	e13fff17 	ldw	r4,-4(fp)
 100bb3c:	10011840 	call	1001184 <vPortFree>
}
 100bb40:	0001883a 	nop
 100bb44:	e037883a 	mov	sp,fp
 100bb48:	dfc00117 	ldw	ra,4(sp)
 100bb4c:	df000017 	ldw	fp,0(sp)
 100bb50:	dec00204 	addi	sp,sp,8
 100bb54:	f800283a 	ret

0100bb58 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 100bb58:	defffd04 	addi	sp,sp,-12
 100bb5c:	df000215 	stw	fp,8(sp)
 100bb60:	df000204 	addi	fp,sp,8
 100bb64:	e13ffe15 	stw	r4,-8(fp)
 100bb68:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100bb6c:	e0bfff17 	ldw	r2,-4(fp)
 100bb70:	1004d17a 	srli	r2,r2,5
 100bb74:	1087883a 	add	r3,r2,r2
 100bb78:	18c7883a 	add	r3,r3,r3
 100bb7c:	1809883a 	mov	r4,r3
 100bb80:	e0fffe17 	ldw	r3,-8(fp)
 100bb84:	1907883a 	add	r3,r3,r4
 100bb88:	1085883a 	add	r2,r2,r2
 100bb8c:	1085883a 	add	r2,r2,r2
 100bb90:	1009883a 	mov	r4,r2
 100bb94:	e0bffe17 	ldw	r2,-8(fp)
 100bb98:	1105883a 	add	r2,r2,r4
 100bb9c:	11000017 	ldw	r4,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 100bba0:	e0bfff17 	ldw	r2,-4(fp)
 100bba4:	108007cc 	andi	r2,r2,31
 100bba8:	01400044 	movi	r5,1
 100bbac:	2884983a 	sll	r2,r5,r2

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 100bbb0:	2084b03a 	or	r2,r4,r2
 100bbb4:	18800015 	stw	r2,0(r3)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 100bbb8:	0001883a 	nop
 100bbbc:	e037883a 	mov	sp,fp
 100bbc0:	df000017 	ldw	fp,0(sp)
 100bbc4:	dec00104 	addi	sp,sp,4
 100bbc8:	f800283a 	ret

0100bbcc <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 100bbcc:	defffd04 	addi	sp,sp,-12
 100bbd0:	df000215 	stw	fp,8(sp)
 100bbd4:	df000204 	addi	fp,sp,8
 100bbd8:	e13ffe15 	stw	r4,-8(fp)
 100bbdc:	e17fff15 	stw	r5,-4(fp)
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100bbe0:	e0bfff17 	ldw	r2,-4(fp)
 100bbe4:	1004d17a 	srli	r2,r2,5
 100bbe8:	1085883a 	add	r2,r2,r2
 100bbec:	1085883a 	add	r2,r2,r2
 100bbf0:	1007883a 	mov	r3,r2
 100bbf4:	e0bffe17 	ldw	r2,-8(fp)
 100bbf8:	10c5883a 	add	r2,r2,r3
 100bbfc:	10c00017 	ldw	r3,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 100bc00:	e0bfff17 	ldw	r2,-4(fp)
 100bc04:	108007cc 	andi	r2,r2,31
 100bc08:	1884d83a 	srl	r2,r3,r2
 100bc0c:	1080004c 	andi	r2,r2,1
 100bc10:	1004c03a 	cmpne	r2,r2,zero
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 100bc14:	10803fcc 	andi	r2,r2,255
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}
 100bc18:	e037883a 	mov	sp,fp
 100bc1c:	df000017 	ldw	fp,0(sp)
 100bc20:	dec00104 	addi	sp,sp,4
 100bc24:	f800283a 	ret

0100bc28 <metal_bitmap_is_bit_clear>:
	bitmap[bit / METAL_BITS_PER_ULONG] &=
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 100bc28:	defffc04 	addi	sp,sp,-16
 100bc2c:	dfc00315 	stw	ra,12(sp)
 100bc30:	df000215 	stw	fp,8(sp)
 100bc34:	df000204 	addi	fp,sp,8
 100bc38:	e13ffe15 	stw	r4,-8(fp)
 100bc3c:	e17fff15 	stw	r5,-4(fp)
	return !metal_bitmap_is_bit_set(bitmap, bit);
 100bc40:	e17fff17 	ldw	r5,-4(fp)
 100bc44:	e13ffe17 	ldw	r4,-8(fp)
 100bc48:	100bbcc0 	call	100bbcc <metal_bitmap_is_bit_set>
 100bc4c:	1005003a 	cmpeq	r2,r2,zero
 100bc50:	10803fcc 	andi	r2,r2,255
}
 100bc54:	e037883a 	mov	sp,fp
 100bc58:	dfc00117 	ldw	ra,4(sp)
 100bc5c:	df000017 	ldw	fp,0(sp)
 100bc60:	dec00204 	addi	sp,sp,8
 100bc64:	f800283a 	ret

0100bc68 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 100bc68:	defffa04 	addi	sp,sp,-24
 100bc6c:	dfc00515 	stw	ra,20(sp)
 100bc70:	df000415 	stw	fp,16(sp)
 100bc74:	df000404 	addi	fp,sp,16
 100bc78:	e13ffd15 	stw	r4,-12(fp)
 100bc7c:	e17ffe15 	stw	r5,-8(fp)
 100bc80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int bit;
	for (bit = start;
 100bc84:	e0bffe17 	ldw	r2,-8(fp)
 100bc88:	e0bffc15 	stw	r2,-16(fp)
 100bc8c:	00000306 	br	100bc9c <metal_bitmap_next_clear_bit+0x34>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 100bc90:	e0bffc17 	ldw	r2,-16(fp)
 100bc94:	10800044 	addi	r2,r2,1
 100bc98:	e0bffc15 	stw	r2,-16(fp)
static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;
	for (bit = start;
 100bc9c:	e0fffc17 	ldw	r3,-16(fp)
 100bca0:	e0bfff17 	ldw	r2,-4(fp)
 100bca4:	1880052e 	bgeu	r3,r2,100bcbc <metal_bitmap_next_clear_bit+0x54>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 100bca8:	e0bffc17 	ldw	r2,-16(fp)
 100bcac:	100b883a 	mov	r5,r2
 100bcb0:	e13ffd17 	ldw	r4,-12(fp)
 100bcb4:	100bc280 	call	100bc28 <metal_bitmap_is_bit_clear>
 100bcb8:	103ff526 	beq	r2,zero,100bc90 <__alt_data_end+0xff00bc90>
	     bit ++)
		;
	return bit;
 100bcbc:	e0bffc17 	ldw	r2,-16(fp)
}
 100bcc0:	e037883a 	mov	sp,fp
 100bcc4:	dfc00117 	ldw	ra,4(sp)
 100bcc8:	df000017 	ldw	fp,0(sp)
 100bccc:	dec00204 	addi	sp,sp,8
 100bcd0:	f800283a 	ret

0100bcd4 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 100bcd4:	defffe04 	addi	sp,sp,-8
 100bcd8:	df000115 	stw	fp,4(sp)
 100bcdc:	df000104 	addi	fp,sp,4
 100bce0:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 100bce4:	e0bfff17 	ldw	r2,-4(fp)
 100bce8:	e0ffff17 	ldw	r3,-4(fp)
 100bcec:	10c00115 	stw	r3,4(r2)
 100bcf0:	e0bfff17 	ldw	r2,-4(fp)
 100bcf4:	10c00117 	ldw	r3,4(r2)
 100bcf8:	e0bfff17 	ldw	r2,-4(fp)
 100bcfc:	10c00015 	stw	r3,0(r2)
}
 100bd00:	0001883a 	nop
 100bd04:	e037883a 	mov	sp,fp
 100bd08:	df000017 	ldw	fp,0(sp)
 100bd0c:	dec00104 	addi	sp,sp,4
 100bd10:	f800283a 	ret

0100bd14 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 100bd14:	defffd04 	addi	sp,sp,-12
 100bd18:	df000215 	stw	fp,8(sp)
 100bd1c:	df000204 	addi	fp,sp,8
 100bd20:	e13ffe15 	stw	r4,-8(fp)
 100bd24:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 100bd28:	e0bffe17 	ldw	r2,-8(fp)
 100bd2c:	10c00117 	ldw	r3,4(r2)
 100bd30:	e0bfff17 	ldw	r2,-4(fp)
 100bd34:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 100bd38:	e0bfff17 	ldw	r2,-4(fp)
 100bd3c:	e0fffe17 	ldw	r3,-8(fp)
 100bd40:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 100bd44:	e0bfff17 	ldw	r2,-4(fp)
 100bd48:	10800017 	ldw	r2,0(r2)
 100bd4c:	e0ffff17 	ldw	r3,-4(fp)
 100bd50:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 100bd54:	e0bfff17 	ldw	r2,-4(fp)
 100bd58:	10800117 	ldw	r2,4(r2)
 100bd5c:	e0ffff17 	ldw	r3,-4(fp)
 100bd60:	10c00015 	stw	r3,0(r2)
}
 100bd64:	0001883a 	nop
 100bd68:	e037883a 	mov	sp,fp
 100bd6c:	df000017 	ldw	fp,0(sp)
 100bd70:	dec00104 	addi	sp,sp,4
 100bd74:	f800283a 	ret

0100bd78 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 100bd78:	defffc04 	addi	sp,sp,-16
 100bd7c:	dfc00315 	stw	ra,12(sp)
 100bd80:	df000215 	stw	fp,8(sp)
 100bd84:	df000204 	addi	fp,sp,8
 100bd88:	e13ffe15 	stw	r4,-8(fp)
 100bd8c:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 100bd90:	e17fff17 	ldw	r5,-4(fp)
 100bd94:	e13ffe17 	ldw	r4,-8(fp)
 100bd98:	100bd140 	call	100bd14 <metal_list_add_before>
}
 100bd9c:	0001883a 	nop
 100bda0:	e037883a 	mov	sp,fp
 100bda4:	dfc00117 	ldw	ra,4(sp)
 100bda8:	df000017 	ldw	fp,0(sp)
 100bdac:	dec00204 	addi	sp,sp,8
 100bdb0:	f800283a 	ret

0100bdb4 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 100bdb4:	defffe04 	addi	sp,sp,-8
 100bdb8:	df000115 	stw	fp,4(sp)
 100bdbc:	df000104 	addi	fp,sp,4
 100bdc0:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 100bdc4:	e0bfff17 	ldw	r2,-4(fp)
 100bdc8:	10800017 	ldw	r2,0(r2)
 100bdcc:	e0ffff17 	ldw	r3,-4(fp)
 100bdd0:	18c00117 	ldw	r3,4(r3)
 100bdd4:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 100bdd8:	e0bfff17 	ldw	r2,-4(fp)
 100bddc:	10800117 	ldw	r2,4(r2)
 100bde0:	e0ffff17 	ldw	r3,-4(fp)
 100bde4:	18c00017 	ldw	r3,0(r3)
 100bde8:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 100bdec:	e0bfff17 	ldw	r2,-4(fp)
 100bdf0:	e0ffff17 	ldw	r3,-4(fp)
 100bdf4:	10c00115 	stw	r3,4(r2)
 100bdf8:	e0bfff17 	ldw	r2,-4(fp)
 100bdfc:	10c00117 	ldw	r3,4(r2)
 100be00:	e0bfff17 	ldw	r2,-4(fp)
 100be04:	10c00015 	stw	r3,0(r2)
}
 100be08:	0001883a 	nop
 100be0c:	e037883a 	mov	sp,fp
 100be10:	df000017 	ldw	fp,0(sp)
 100be14:	dec00104 	addi	sp,sp,4
 100be18:	f800283a 	ret

0100be1c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 100be1c:	defffd04 	addi	sp,sp,-12
 100be20:	df000215 	stw	fp,8(sp)
 100be24:	df000204 	addi	fp,sp,8
 100be28:	e13ffe15 	stw	r4,-8(fp)
 100be2c:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 100be30:	e0bffe17 	ldw	r2,-8(fp)
 100be34:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 100be38:	10bfffe0 	cmpeqi	r2,r2,-1
 100be3c:	1000091e 	bne	r2,zero,100be64 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 100be40:	e0bffe17 	ldw	r2,-8(fp)
 100be44:	10800217 	ldw	r2,8(r2)
 100be48:	e0ffff17 	ldw	r3,-4(fp)
 100be4c:	1880052e 	bgeu	r3,r2,100be64 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 100be50:	e0bffe17 	ldw	r2,-8(fp)
 100be54:	10c00017 	ldw	r3,0(r2)
		: NULL);
 100be58:	e0bfff17 	ldw	r2,-4(fp)
 100be5c:	1885883a 	add	r2,r3,r2
 100be60:	00000106 	br	100be68 <metal_io_virt+0x4c>
 100be64:	0005883a 	mov	r2,zero
}
 100be68:	e037883a 	mov	sp,fp
 100be6c:	df000017 	ldw	fp,0(sp)
 100be70:	dec00104 	addi	sp,sp,4
 100be74:	f800283a 	ret

0100be78 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100be78:	defffc04 	addi	sp,sp,-16
 100be7c:	df000315 	stw	fp,12(sp)
 100be80:	df000304 	addi	fp,sp,12
 100be84:	e13ffe15 	stw	r4,-8(fp)
 100be88:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100be8c:	e0bfff17 	ldw	r2,-4(fp)
 100be90:	e0fffe17 	ldw	r3,-8(fp)
 100be94:	18c00017 	ldw	r3,0(r3)
 100be98:	10c5c83a 	sub	r2,r2,r3
 100be9c:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100bea0:	e0bffe17 	ldw	r2,-8(fp)
 100bea4:	10800217 	ldw	r2,8(r2)
 100bea8:	e0fffd17 	ldw	r3,-12(fp)
 100beac:	1880022e 	bgeu	r3,r2,100beb8 <metal_io_virt_to_offset+0x40>
 100beb0:	e0bffd17 	ldw	r2,-12(fp)
 100beb4:	00000106 	br	100bebc <metal_io_virt_to_offset+0x44>
 100beb8:	00bfffc4 	movi	r2,-1
}
 100bebc:	e037883a 	mov	sp,fp
 100bec0:	df000017 	ldw	fp,0(sp)
 100bec4:	dec00104 	addi	sp,sp,4
 100bec8:	f800283a 	ret

0100becc <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 100becc:	defffb04 	addi	sp,sp,-20
 100bed0:	dfc00415 	stw	ra,16(sp)
 100bed4:	df000315 	stw	fp,12(sp)
 100bed8:	df000304 	addi	fp,sp,12
 100bedc:	e13ffe15 	stw	r4,-8(fp)
 100bee0:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 100bee4:	e0bffe17 	ldw	r2,-8(fp)
 100bee8:	10800c17 	ldw	r2,48(r2)
 100beec:	1000211e 	bne	r2,zero,100bf74 <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 100bef0:	e0bffe17 	ldw	r2,-8(fp)
 100bef4:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 100bef8:	10800828 	cmpgeui	r2,r2,32
 100befc:	1000051e 	bne	r2,zero,100bf14 <metal_io_phys+0x48>
 100bf00:	e0bffe17 	ldw	r2,-8(fp)
 100bf04:	10800317 	ldw	r2,12(r2)
 100bf08:	e0ffff17 	ldw	r3,-4(fp)
 100bf0c:	1884d83a 	srl	r2,r3,r2
 100bf10:	00000106 	br	100bf18 <metal_io_phys+0x4c>
 100bf14:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 100bf18:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100bf1c:	e0bffe17 	ldw	r2,-8(fp)
 100bf20:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 100bf24:	10001126 	beq	r2,zero,100bf6c <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100bf28:	e0bffe17 	ldw	r2,-8(fp)
 100bf2c:	10800217 	ldw	r2,8(r2)
 100bf30:	e0ffff17 	ldw	r3,-4(fp)
 100bf34:	18800d2e 	bgeu	r3,r2,100bf6c <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 100bf38:	e0bffe17 	ldw	r2,-8(fp)
 100bf3c:	10c00117 	ldw	r3,4(r2)
 100bf40:	e0bffd17 	ldw	r2,-12(fp)
 100bf44:	1085883a 	add	r2,r2,r2
 100bf48:	1085883a 	add	r2,r2,r2
 100bf4c:	1885883a 	add	r2,r3,r2
 100bf50:	10c00017 	ldw	r3,0(r2)
 100bf54:	e0bffe17 	ldw	r2,-8(fp)
 100bf58:	11000417 	ldw	r4,16(r2)
 100bf5c:	e0bfff17 	ldw	r2,-4(fp)
 100bf60:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 100bf64:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100bf68:	00000706 	br	100bf88 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 100bf6c:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 100bf70:	00000506 	br	100bf88 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 100bf74:	e0bffe17 	ldw	r2,-8(fp)
 100bf78:	10800c17 	ldw	r2,48(r2)
 100bf7c:	e17fff17 	ldw	r5,-4(fp)
 100bf80:	e13ffe17 	ldw	r4,-8(fp)
 100bf84:	103ee83a 	callr	r2
}
 100bf88:	e037883a 	mov	sp,fp
 100bf8c:	dfc00117 	ldw	ra,4(sp)
 100bf90:	df000017 	ldw	fp,0(sp)
 100bf94:	dec00204 	addi	sp,sp,8
 100bf98:	f800283a 	ret

0100bf9c <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 100bf9c:	defffb04 	addi	sp,sp,-20
 100bfa0:	dfc00415 	stw	ra,16(sp)
 100bfa4:	df000315 	stw	fp,12(sp)
 100bfa8:	df000304 	addi	fp,sp,12
 100bfac:	e13ffe15 	stw	r4,-8(fp)
 100bfb0:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 100bfb4:	e0bffe17 	ldw	r2,-8(fp)
 100bfb8:	10800d17 	ldw	r2,52(r2)
 100bfbc:	1000231e 	bne	r2,zero,100c04c <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 100bfc0:	e0bffe17 	ldw	r2,-8(fp)
 100bfc4:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 100bfc8:	10bfffd8 	cmpnei	r2,r2,-1
 100bfcc:	1000061e 	bne	r2,zero,100bfe8 <metal_io_phys_to_offset+0x4c>
 100bfd0:	e0bffe17 	ldw	r2,-8(fp)
 100bfd4:	10800117 	ldw	r2,4(r2)
 100bfd8:	10800017 	ldw	r2,0(r2)
 100bfdc:	e0ffff17 	ldw	r3,-4(fp)
 100bfe0:	1885c83a 	sub	r2,r3,r2
 100bfe4:	00000406 	br	100bff8 <metal_io_phys_to_offset+0x5c>
 100bfe8:	e0bffe17 	ldw	r2,-8(fp)
 100bfec:	10c00417 	ldw	r3,16(r2)
 100bff0:	e0bfff17 	ldw	r2,-4(fp)
 100bff4:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 100bff8:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 100bffc:	e17ffd17 	ldw	r5,-12(fp)
 100c000:	e13ffe17 	ldw	r4,-8(fp)
 100c004:	100becc0 	call	100becc <metal_io_phys>
 100c008:	1007883a 	mov	r3,r2
 100c00c:	e0bfff17 	ldw	r2,-4(fp)
 100c010:	1880021e 	bne	r3,r2,100c01c <metal_io_phys_to_offset+0x80>
				return offset;
 100c014:	e0bffd17 	ldw	r2,-12(fp)
 100c018:	00001106 	br	100c060 <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 100c01c:	e0bffe17 	ldw	r2,-8(fp)
 100c020:	10c00417 	ldw	r3,16(r2)
 100c024:	e0bffd17 	ldw	r2,-12(fp)
 100c028:	1885883a 	add	r2,r3,r2
 100c02c:	10800044 	addi	r2,r2,1
 100c030:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 100c034:	e0bffe17 	ldw	r2,-8(fp)
 100c038:	10800217 	ldw	r2,8(r2)
 100c03c:	e0fffd17 	ldw	r3,-12(fp)
 100c040:	18bfee36 	bltu	r3,r2,100bffc <__alt_data_end+0xff00bffc>
		return METAL_BAD_OFFSET;
 100c044:	00bfffc4 	movi	r2,-1
 100c048:	00000506 	br	100c060 <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 100c04c:	e0bffe17 	ldw	r2,-8(fp)
 100c050:	10800d17 	ldw	r2,52(r2)
 100c054:	e17fff17 	ldw	r5,-4(fp)
 100c058:	e13ffe17 	ldw	r4,-8(fp)
 100c05c:	103ee83a 	callr	r2
}
 100c060:	e037883a 	mov	sp,fp
 100c064:	dfc00117 	ldw	ra,4(sp)
 100c068:	df000017 	ldw	fp,0(sp)
 100c06c:	dec00204 	addi	sp,sp,8
 100c070:	f800283a 	ret

0100c074 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 100c074:	defffc04 	addi	sp,sp,-16
 100c078:	dfc00315 	stw	ra,12(sp)
 100c07c:	df000215 	stw	fp,8(sp)
 100c080:	df000204 	addi	fp,sp,8
 100c084:	e13ffe15 	stw	r4,-8(fp)
 100c088:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 100c08c:	e17fff17 	ldw	r5,-4(fp)
 100c090:	e13ffe17 	ldw	r4,-8(fp)
 100c094:	100bf9c0 	call	100bf9c <metal_io_phys_to_offset>
 100c098:	100b883a 	mov	r5,r2
 100c09c:	e13ffe17 	ldw	r4,-8(fp)
 100c0a0:	100be1c0 	call	100be1c <metal_io_virt>
}
 100c0a4:	e037883a 	mov	sp,fp
 100c0a8:	dfc00117 	ldw	ra,4(sp)
 100c0ac:	df000017 	ldw	fp,0(sp)
 100c0b0:	dec00204 	addi	sp,sp,8
 100c0b4:	f800283a 	ret

0100c0b8 <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 100c0b8:	defffe04 	addi	sp,sp,-8
 100c0bc:	df000115 	stw	fp,4(sp)
 100c0c0:	df000104 	addi	fp,sp,4
 100c0c4:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 100c0c8:	e0bfff17 	ldw	r2,-4(fp)
 100c0cc:	10000015 	stw	zero,0(r2)
 100c0d0:	0001b03a 	sync
}
 100c0d4:	0001883a 	nop
 100c0d8:	e037883a 	mov	sp,fp
 100c0dc:	df000017 	ldw	fp,0(sp)
 100c0e0:	dec00104 	addi	sp,sp,4
 100c0e4:	f800283a 	ret

0100c0e8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 100c0e8:	defffb04 	addi	sp,sp,-20
 100c0ec:	df000415 	stw	fp,16(sp)
 100c0f0:	df000404 	addi	fp,sp,16
 100c0f4:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 100c0f8:	0001883a 	nop
 100c0fc:	e0bfff17 	ldw	r2,-4(fp)
 100c100:	e0bffc15 	stw	r2,-16(fp)
 100c104:	e0bffc17 	ldw	r2,-16(fp)
 100c108:	10800017 	ldw	r2,0(r2)
 100c10c:	e0bffd15 	stw	r2,-12(fp)
 100c110:	00800044 	movi	r2,1
 100c114:	e0bffe15 	stw	r2,-8(fp)
 100c118:	e0bfff17 	ldw	r2,-4(fp)
 100c11c:	e0fffe17 	ldw	r3,-8(fp)
 100c120:	10c00015 	stw	r3,0(r2)
 100c124:	e0bffd17 	ldw	r2,-12(fp)
 100c128:	103ff41e 	bne	r2,zero,100c0fc <__alt_data_end+0xff00c0fc>
		;
	}
}
 100c12c:	0001883a 	nop
 100c130:	e037883a 	mov	sp,fp
 100c134:	df000017 	ldw	fp,0(sp)
 100c138:	dec00104 	addi	sp,sp,4
 100c13c:	f800283a 	ret

0100c140 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 100c140:	defffe04 	addi	sp,sp,-8
 100c144:	df000115 	stw	fp,4(sp)
 100c148:	df000104 	addi	fp,sp,4
 100c14c:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 100c150:	e0bfff17 	ldw	r2,-4(fp)
 100c154:	0001b03a 	sync
 100c158:	10000015 	stw	zero,0(r2)
}
 100c15c:	0001883a 	nop
 100c160:	e037883a 	mov	sp,fp
 100c164:	df000017 	ldw	fp,0(sp)
 100c168:	dec00104 	addi	sp,sp,4
 100c16c:	f800283a 	ret

0100c170 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 100c170:	defffd04 	addi	sp,sp,-12
 100c174:	dfc00215 	stw	ra,8(sp)
 100c178:	df000115 	stw	fp,4(sp)
 100c17c:	df000104 	addi	fp,sp,4
 100c180:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 100c184:	e13fff17 	ldw	r4,-4(fp)
 100c188:	100c0b80 	call	100c0b8 <__metal_mutex_init>
}
 100c18c:	0001883a 	nop
 100c190:	e037883a 	mov	sp,fp
 100c194:	dfc00117 	ldw	ra,4(sp)
 100c198:	df000017 	ldw	fp,0(sp)
 100c19c:	dec00204 	addi	sp,sp,8
 100c1a0:	f800283a 	ret

0100c1a4 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 100c1a4:	defffd04 	addi	sp,sp,-12
 100c1a8:	dfc00215 	stw	ra,8(sp)
 100c1ac:	df000115 	stw	fp,4(sp)
 100c1b0:	df000104 	addi	fp,sp,4
 100c1b4:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 100c1b8:	e13fff17 	ldw	r4,-4(fp)
 100c1bc:	100c0e80 	call	100c0e8 <__metal_mutex_acquire>
}
 100c1c0:	0001883a 	nop
 100c1c4:	e037883a 	mov	sp,fp
 100c1c8:	dfc00117 	ldw	ra,4(sp)
 100c1cc:	df000017 	ldw	fp,0(sp)
 100c1d0:	dec00204 	addi	sp,sp,8
 100c1d4:	f800283a 	ret

0100c1d8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 100c1d8:	defffd04 	addi	sp,sp,-12
 100c1dc:	dfc00215 	stw	ra,8(sp)
 100c1e0:	df000115 	stw	fp,4(sp)
 100c1e4:	df000104 	addi	fp,sp,4
 100c1e8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 100c1ec:	e13fff17 	ldw	r4,-4(fp)
 100c1f0:	100c1400 	call	100c140 <__metal_mutex_release>
}
 100c1f4:	0001883a 	nop
 100c1f8:	e037883a 	mov	sp,fp
 100c1fc:	dfc00117 	ldw	ra,4(sp)
 100c200:	df000017 	ldw	fp,0(sp)
 100c204:	dec00204 	addi	sp,sp,8
 100c208:	f800283a 	ret

0100c20c <RPROC_ERR_PTR>:
	else
		return 0;
}

static inline void *RPROC_ERR_PTR(long error)
{
 100c20c:	defffe04 	addi	sp,sp,-8
 100c210:	df000115 	stw	fp,4(sp)
 100c214:	df000104 	addi	fp,sp,4
 100c218:	e13fff15 	stw	r4,-4(fp)
	return (void *)error;
 100c21c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c220:	e037883a 	mov	sp,fp
 100c224:	df000017 	ldw	fp,0(sp)
 100c228:	dec00104 	addi	sp,sp,4
 100c22c:	f800283a 	ret

0100c230 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].event)

static inline int vring_size(unsigned int num, unsigned long align)
{
 100c230:	defffc04 	addi	sp,sp,-16
 100c234:	df000315 	stw	fp,12(sp)
 100c238:	df000304 	addi	fp,sp,12
 100c23c:	e13ffe15 	stw	r4,-8(fp)
 100c240:	e17fff15 	stw	r5,-4(fp)
	int size;

	size = num * sizeof(struct vring_desc);
 100c244:	e0bffe17 	ldw	r2,-8(fp)
 100c248:	1004913a 	slli	r2,r2,4
 100c24c:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 100c250:	e0bffe17 	ldw	r2,-8(fp)
 100c254:	108000c4 	addi	r2,r2,3
 100c258:	1085883a 	add	r2,r2,r2
 100c25c:	1007883a 	mov	r3,r2
 100c260:	e0bffd17 	ldw	r2,-12(fp)
 100c264:	1885883a 	add	r2,r3,r2
 100c268:	e0bffd15 	stw	r2,-12(fp)
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 100c26c:	e0fffd17 	ldw	r3,-12(fp)
 100c270:	e0bfff17 	ldw	r2,-4(fp)
 100c274:	1885883a 	add	r2,r3,r2
 100c278:	10ffffc4 	addi	r3,r2,-1
 100c27c:	e0bfff17 	ldw	r2,-4(fp)
 100c280:	0085c83a 	sub	r2,zero,r2
 100c284:	1884703a 	and	r2,r3,r2
 100c288:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 100c28c:	e0bffe17 	ldw	r2,-8(fp)
 100c290:	100690fa 	slli	r3,r2,3

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
 100c294:	e0bffd17 	ldw	r2,-12(fp)
 100c298:	1885883a 	add	r2,r3,r2
 100c29c:	10800184 	addi	r2,r2,6
 100c2a0:	e0bffd15 	stw	r2,-12(fp)
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);

	return size;
 100c2a4:	e0bffd17 	ldw	r2,-12(fp)
}
 100c2a8:	e037883a 	mov	sp,fp
 100c2ac:	df000017 	ldw	fp,0(sp)
 100c2b0:	dec00104 	addi	sp,sp,4
 100c2b4:	f800283a 	ret

0100c2b8 <remoteproc_check_fw_format>:
/******************************************************************************
 *  static functions
 *****************************************************************************/
static struct loader_ops *
remoteproc_check_fw_format(const void *img_data, size_t img_len)
{
 100c2b8:	defffc04 	addi	sp,sp,-16
 100c2bc:	dfc00315 	stw	ra,12(sp)
 100c2c0:	df000215 	stw	fp,8(sp)
 100c2c4:	df000204 	addi	fp,sp,8
 100c2c8:	e13ffe15 	stw	r4,-8(fp)
 100c2cc:	e17fff15 	stw	r5,-4(fp)
	if (img_len <= 0)
 100c2d0:	e0bfff17 	ldw	r2,-4(fp)
 100c2d4:	1000021e 	bne	r2,zero,100c2e0 <remoteproc_check_fw_format+0x28>
		return NULL;
 100c2d8:	0005883a 	mov	r2,zero
 100c2dc:	00000806 	br	100c300 <remoteproc_check_fw_format+0x48>
	else if (elf_identify(img_data, img_len) == 0)
 100c2e0:	e17fff17 	ldw	r5,-4(fp)
 100c2e4:	e13ffe17 	ldw	r4,-8(fp)
 100c2e8:	100ac3c0 	call	100ac3c <elf_identify>
 100c2ec:	1000031e 	bne	r2,zero,100c2fc <remoteproc_check_fw_format+0x44>
		return &elf_ops;
 100c2f0:	008040f4 	movhi	r2,259
 100c2f4:	10abf804 	addi	r2,r2,-20512
 100c2f8:	00000106 	br	100c300 <remoteproc_check_fw_format+0x48>
	else
		return NULL;
 100c2fc:	0005883a 	mov	r2,zero
}
 100c300:	e037883a 	mov	sp,fp
 100c304:	dfc00117 	ldw	ra,4(sp)
 100c308:	df000017 	ldw	fp,0(sp)
 100c30c:	dec00204 	addi	sp,sp,8
 100c310:	f800283a 	ret

0100c314 <remoteproc_get_mem>:

static struct remoteproc_mem *
remoteproc_get_mem(struct remoteproc *rproc, const char *name,
		   metal_phys_addr_t pa, metal_phys_addr_t da,
		   void *va, size_t size)
{
 100c314:	defff404 	addi	sp,sp,-48
 100c318:	dfc00b15 	stw	ra,44(sp)
 100c31c:	df000a15 	stw	fp,40(sp)
 100c320:	df000a04 	addi	fp,sp,40
 100c324:	e13ffc15 	stw	r4,-16(fp)
 100c328:	e17ffd15 	stw	r5,-12(fp)
 100c32c:	e1bffe15 	stw	r6,-8(fp)
 100c330:	e1ffff15 	stw	r7,-4(fp)
	struct metal_list *node;
	struct remoteproc_mem *mem;

	metal_list_for_each(&rproc->mems, node) {
 100c334:	e0bffc17 	ldw	r2,-16(fp)
 100c338:	10800417 	ldw	r2,16(r2)
 100c33c:	e0bff615 	stw	r2,-40(fp)
 100c340:	00004806 	br	100c464 <remoteproc_get_mem+0x150>
		mem = metal_container_of(node, struct remoteproc_mem, node);
 100c344:	e0bff617 	ldw	r2,-40(fp)
 100c348:	10bff404 	addi	r2,r2,-48
 100c34c:	e0bff715 	stw	r2,-36(fp)
		if (name) {
 100c350:	e0bffd17 	ldw	r2,-12(fp)
 100c354:	10000926 	beq	r2,zero,100c37c <remoteproc_get_mem+0x68>
			if (!strncmp(name, mem->name, sizeof(mem->name)))
 100c358:	e0bff717 	ldw	r2,-36(fp)
 100c35c:	10800304 	addi	r2,r2,12
 100c360:	01800804 	movi	r6,32
 100c364:	100b883a 	mov	r5,r2
 100c368:	e13ffd17 	ldw	r4,-12(fp)
 100c36c:	101654c0 	call	101654c <strncmp>
 100c370:	1000391e 	bne	r2,zero,100c458 <remoteproc_get_mem+0x144>
				return mem;
 100c374:	e0bff717 	ldw	r2,-36(fp)
 100c378:	00003f06 	br	100c478 <remoteproc_get_mem+0x164>
		} else if (pa != METAL_BAD_PHYS) {
 100c37c:	e0bffe17 	ldw	r2,-8(fp)
 100c380:	10bfffe0 	cmpeqi	r2,r2,-1
 100c384:	1000121e 	bne	r2,zero,100c3d0 <remoteproc_get_mem+0xbc>
			metal_phys_addr_t pa_start, pa_end;

			pa_start = mem->pa;
 100c388:	e0bff717 	ldw	r2,-36(fp)
 100c38c:	10800117 	ldw	r2,4(r2)
 100c390:	e0bff815 	stw	r2,-32(fp)
			pa_end = pa_start + mem->size;
 100c394:	e0bff717 	ldw	r2,-36(fp)
 100c398:	10c00217 	ldw	r3,8(r2)
 100c39c:	e0bff817 	ldw	r2,-32(fp)
 100c3a0:	1885883a 	add	r2,r3,r2
 100c3a4:	e0bff915 	stw	r2,-28(fp)
			if (pa >= pa_start && (pa + size) <= pa_end)
 100c3a8:	e0fffe17 	ldw	r3,-8(fp)
 100c3ac:	e0bff817 	ldw	r2,-32(fp)
 100c3b0:	18802936 	bltu	r3,r2,100c458 <remoteproc_get_mem+0x144>
 100c3b4:	e0fffe17 	ldw	r3,-8(fp)
 100c3b8:	e0800317 	ldw	r2,12(fp)
 100c3bc:	1885883a 	add	r2,r3,r2
 100c3c0:	e0fff917 	ldw	r3,-28(fp)
 100c3c4:	18802436 	bltu	r3,r2,100c458 <remoteproc_get_mem+0x144>
				return mem;
 100c3c8:	e0bff717 	ldw	r2,-36(fp)
 100c3cc:	00002a06 	br	100c478 <remoteproc_get_mem+0x164>
		} else if (da != METAL_BAD_PHYS) {
 100c3d0:	e0bfff17 	ldw	r2,-4(fp)
 100c3d4:	10bfffe0 	cmpeqi	r2,r2,-1
 100c3d8:	1000121e 	bne	r2,zero,100c424 <remoteproc_get_mem+0x110>
			metal_phys_addr_t da_start, da_end;

			da_start = mem->da;
 100c3dc:	e0bff717 	ldw	r2,-36(fp)
 100c3e0:	10800017 	ldw	r2,0(r2)
 100c3e4:	e0bffa15 	stw	r2,-24(fp)
			da_end = da_start + mem->size;
 100c3e8:	e0bff717 	ldw	r2,-36(fp)
 100c3ec:	10c00217 	ldw	r3,8(r2)
 100c3f0:	e0bffa17 	ldw	r2,-24(fp)
 100c3f4:	1885883a 	add	r2,r3,r2
 100c3f8:	e0bffb15 	stw	r2,-20(fp)
			if (da >= da_start && (da + size) <= da_end)
 100c3fc:	e0ffff17 	ldw	r3,-4(fp)
 100c400:	e0bffa17 	ldw	r2,-24(fp)
 100c404:	18801436 	bltu	r3,r2,100c458 <remoteproc_get_mem+0x144>
 100c408:	e0ffff17 	ldw	r3,-4(fp)
 100c40c:	e0800317 	ldw	r2,12(fp)
 100c410:	1885883a 	add	r2,r3,r2
 100c414:	e0fffb17 	ldw	r3,-20(fp)
 100c418:	18800f36 	bltu	r3,r2,100c458 <remoteproc_get_mem+0x144>
				return mem;
 100c41c:	e0bff717 	ldw	r2,-36(fp)
 100c420:	00001506 	br	100c478 <remoteproc_get_mem+0x164>
		} else if (va) {
 100c424:	e0800217 	ldw	r2,8(fp)
 100c428:	10000926 	beq	r2,zero,100c450 <remoteproc_get_mem+0x13c>
			if (metal_io_virt_to_offset(mem->io, va) !=
 100c42c:	e0bff717 	ldw	r2,-36(fp)
 100c430:	10800b17 	ldw	r2,44(r2)
 100c434:	e1400217 	ldw	r5,8(fp)
 100c438:	1009883a 	mov	r4,r2
 100c43c:	100be780 	call	100be78 <metal_io_virt_to_offset>
 100c440:	10bfffe0 	cmpeqi	r2,r2,-1
 100c444:	1000041e 	bne	r2,zero,100c458 <remoteproc_get_mem+0x144>
			    METAL_BAD_OFFSET)
				return mem;
 100c448:	e0bff717 	ldw	r2,-36(fp)
 100c44c:	00000a06 	br	100c478 <remoteproc_get_mem+0x164>

		} else {
			return NULL;
 100c450:	0005883a 	mov	r2,zero
 100c454:	00000806 	br	100c478 <remoteproc_get_mem+0x164>
		   void *va, size_t size)
{
	struct metal_list *node;
	struct remoteproc_mem *mem;

	metal_list_for_each(&rproc->mems, node) {
 100c458:	e0bff617 	ldw	r2,-40(fp)
 100c45c:	10800017 	ldw	r2,0(r2)
 100c460:	e0bff615 	stw	r2,-40(fp)
 100c464:	e0bffc17 	ldw	r2,-16(fp)
 100c468:	10c00404 	addi	r3,r2,16
 100c46c:	e0bff617 	ldw	r2,-40(fp)
 100c470:	18bfb41e 	bne	r3,r2,100c344 <__alt_data_end+0xff00c344>

		} else {
			return NULL;
		}
	}
	return NULL;
 100c474:	0005883a 	mov	r2,zero
}
 100c478:	e037883a 	mov	sp,fp
 100c47c:	dfc00117 	ldw	ra,4(sp)
 100c480:	df000017 	ldw	fp,0(sp)
 100c484:	dec00204 	addi	sp,sp,8
 100c488:	f800283a 	ret

0100c48c <remoteproc_datopa>:

static metal_phys_addr_t
remoteproc_datopa(struct remoteproc_mem *mem, metal_phys_addr_t da)
{
 100c48c:	defffc04 	addi	sp,sp,-16
 100c490:	df000315 	stw	fp,12(sp)
 100c494:	df000304 	addi	fp,sp,12
 100c498:	e13ffe15 	stw	r4,-8(fp)
 100c49c:	e17fff15 	stw	r5,-4(fp)
	metal_phys_addr_t pa;

	pa = mem->pa + da - mem->da;
 100c4a0:	e0bffe17 	ldw	r2,-8(fp)
 100c4a4:	10c00117 	ldw	r3,4(r2)
 100c4a8:	e0bfff17 	ldw	r2,-4(fp)
 100c4ac:	1887883a 	add	r3,r3,r2
 100c4b0:	e0bffe17 	ldw	r2,-8(fp)
 100c4b4:	10800017 	ldw	r2,0(r2)
 100c4b8:	1885c83a 	sub	r2,r3,r2
 100c4bc:	e0bffd15 	stw	r2,-12(fp)
	return pa;
 100c4c0:	e0bffd17 	ldw	r2,-12(fp)
}
 100c4c4:	e037883a 	mov	sp,fp
 100c4c8:	df000017 	ldw	fp,0(sp)
 100c4cc:	dec00104 	addi	sp,sp,4
 100c4d0:	f800283a 	ret

0100c4d4 <remoteproc_patoda>:

static metal_phys_addr_t
remoteproc_patoda(struct remoteproc_mem *mem, metal_phys_addr_t pa)
{
 100c4d4:	defffc04 	addi	sp,sp,-16
 100c4d8:	df000315 	stw	fp,12(sp)
 100c4dc:	df000304 	addi	fp,sp,12
 100c4e0:	e13ffe15 	stw	r4,-8(fp)
 100c4e4:	e17fff15 	stw	r5,-4(fp)
	metal_phys_addr_t da;

	da = mem->da + pa - mem->pa;
 100c4e8:	e0bffe17 	ldw	r2,-8(fp)
 100c4ec:	10c00017 	ldw	r3,0(r2)
 100c4f0:	e0bfff17 	ldw	r2,-4(fp)
 100c4f4:	1887883a 	add	r3,r3,r2
 100c4f8:	e0bffe17 	ldw	r2,-8(fp)
 100c4fc:	10800117 	ldw	r2,4(r2)
 100c500:	1885c83a 	sub	r2,r3,r2
 100c504:	e0bffd15 	stw	r2,-12(fp)
	return da;
 100c508:	e0bffd17 	ldw	r2,-12(fp)
}
 100c50c:	e037883a 	mov	sp,fp
 100c510:	df000017 	ldw	fp,0(sp)
 100c514:	dec00104 	addi	sp,sp,4
 100c518:	f800283a 	ret

0100c51c <remoteproc_get_rsc_table>:
static void *remoteproc_get_rsc_table(struct remoteproc *rproc,
				      void *store,
				      struct image_store_ops *store_ops,
				      size_t offset,
				      size_t len)
{
 100c51c:	defff404 	addi	sp,sp,-48
 100c520:	dfc00b15 	stw	ra,44(sp)
 100c524:	df000a15 	stw	fp,40(sp)
 100c528:	df000a04 	addi	fp,sp,40
 100c52c:	e13ffc15 	stw	r4,-16(fp)
 100c530:	e17ffd15 	stw	r5,-12(fp)
 100c534:	e1bffe15 	stw	r6,-8(fp)
 100c538:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	void *rsc_table = NULL;
 100c53c:	e03ff915 	stw	zero,-28(fp)
	const void *img_data;

	/* Copy the resource table to local memory,
	 * the caller should be responsible to release the memory
	 */
	rsc_table = metal_allocate_memory(len);
 100c540:	e1000217 	ldw	r4,8(fp)
 100c544:	100baf40 	call	100baf4 <metal_allocate_memory>
 100c548:	e0bff915 	stw	r2,-28(fp)
	if (!rsc_table) {
 100c54c:	e0bff917 	ldw	r2,-28(fp)
 100c550:	1000031e 	bne	r2,zero,100c560 <remoteproc_get_rsc_table+0x44>
		return RPROC_ERR_PTR(-RPROC_ENOMEM);
 100c554:	013fffc4 	movi	r4,-1
 100c558:	100c20c0 	call	100c20c <RPROC_ERR_PTR>
 100c55c:	00004106 	br	100c664 <remoteproc_get_rsc_table+0x148>
	}
	ret = store_ops->load(store, offset, len, &img_data, RPROC_LOAD_ANYADDR,
 100c560:	e0bffe17 	ldw	r2,-8(fp)
 100c564:	10800217 	ldw	r2,8(r2)
 100c568:	e13ffb04 	addi	r4,fp,-20
 100c56c:	00c00044 	movi	r3,1
 100c570:	d8c00215 	stw	r3,8(sp)
 100c574:	d8000115 	stw	zero,4(sp)
 100c578:	00ffffc4 	movi	r3,-1
 100c57c:	d8c00015 	stw	r3,0(sp)
 100c580:	200f883a 	mov	r7,r4
 100c584:	e1800217 	ldw	r6,8(fp)
 100c588:	e17fff17 	ldw	r5,-4(fp)
 100c58c:	e13ffd17 	ldw	r4,-12(fp)
 100c590:	103ee83a 	callr	r2
 100c594:	e0bffa15 	stw	r2,-24(fp)
			      NULL, 1);
	if (ret < 0 || ret < (int)len || img_data == NULL) {
 100c598:	e0bffa17 	ldw	r2,-24(fp)
 100c59c:	10000516 	blt	r2,zero,100c5b4 <remoteproc_get_rsc_table+0x98>
 100c5a0:	e0800217 	ldw	r2,8(fp)
 100c5a4:	e0fffa17 	ldw	r3,-24(fp)
 100c5a8:	18800216 	blt	r3,r2,100c5b4 <remoteproc_get_rsc_table+0x98>
 100c5ac:	e0bffb17 	ldw	r2,-20(fp)
 100c5b0:	1000161e 	bne	r2,zero,100c60c <remoteproc_get_rsc_table+0xf0>
		metal_log(METAL_LOG_ERROR,
 100c5b4:	008060f4 	movhi	r2,387
 100c5b8:	10bb7104 	addi	r2,r2,-4668
 100c5bc:	10800017 	ldw	r2,0(r2)
 100c5c0:	108000f0 	cmpltui	r2,r2,3
 100c5c4:	10000d1e 	bne	r2,zero,100c5fc <remoteproc_get_rsc_table+0xe0>
 100c5c8:	008060f4 	movhi	r2,387
 100c5cc:	10bb7104 	addi	r2,r2,-4668
 100c5d0:	10800117 	ldw	r2,4(r2)
 100c5d4:	10000926 	beq	r2,zero,100c5fc <remoteproc_get_rsc_table+0xe0>
 100c5d8:	008060f4 	movhi	r2,387
 100c5dc:	10bb7104 	addi	r2,r2,-4668
 100c5e0:	10800117 	ldw	r2,4(r2)
 100c5e4:	e1c00217 	ldw	r7,8(fp)
 100c5e8:	e1bfff17 	ldw	r6,-4(fp)
 100c5ec:	014040f4 	movhi	r5,259
 100c5f0:	29663004 	addi	r5,r5,-26432
 100c5f4:	010000c4 	movi	r4,3
 100c5f8:	103ee83a 	callr	r2
			  "get rsc failed: 0x%llx, 0x%llx\r\n", offset, len);
		rsc_table = RPROC_ERR_PTR(-RPROC_EINVAL);
 100c5fc:	013fff84 	movi	r4,-2
 100c600:	100c20c0 	call	100c20c <RPROC_ERR_PTR>
 100c604:	e0bff915 	stw	r2,-28(fp)
		goto error;
 100c608:	00001306 	br	100c658 <remoteproc_get_rsc_table+0x13c>
	}
	memcpy(rsc_table, img_data, len);
 100c60c:	e0bffb17 	ldw	r2,-20(fp)
 100c610:	e1800217 	ldw	r6,8(fp)
 100c614:	100b883a 	mov	r5,r2
 100c618:	e13ff917 	ldw	r4,-28(fp)
 100c61c:	10157f40 	call	10157f4 <memcpy>

	ret = handle_rsc_table(rproc, rsc_table, len, NULL);
 100c620:	000f883a 	mov	r7,zero
 100c624:	e1800217 	ldw	r6,8(fp)
 100c628:	e17ff917 	ldw	r5,-28(fp)
 100c62c:	e13ffc17 	ldw	r4,-16(fp)
 100c630:	100faf80 	call	100faf8 <handle_rsc_table>
 100c634:	e0bffa15 	stw	r2,-24(fp)
	if (ret < 0) {
 100c638:	e0bffa17 	ldw	r2,-24(fp)
 100c63c:	1000040e 	bge	r2,zero,100c650 <remoteproc_get_rsc_table+0x134>
		rsc_table = RPROC_ERR_PTR(ret);
 100c640:	e13ffa17 	ldw	r4,-24(fp)
 100c644:	100c20c0 	call	100c20c <RPROC_ERR_PTR>
 100c648:	e0bff915 	stw	r2,-28(fp)
		goto error;
 100c64c:	00000206 	br	100c658 <remoteproc_get_rsc_table+0x13c>
	}
	return rsc_table;
 100c650:	e0bff917 	ldw	r2,-28(fp)
 100c654:	00000306 	br	100c664 <remoteproc_get_rsc_table+0x148>

error:
	metal_free_memory(rsc_table);
 100c658:	e13ff917 	ldw	r4,-28(fp)
 100c65c:	100bb240 	call	100bb24 <metal_free_memory>
	return rsc_table;
 100c660:	e0bff917 	ldw	r2,-28(fp)
}
 100c664:	e037883a 	mov	sp,fp
 100c668:	dfc00117 	ldw	ra,4(sp)
 100c66c:	df000017 	ldw	fp,0(sp)
 100c670:	dec00204 	addi	sp,sp,8
 100c674:	f800283a 	ret

0100c678 <remoteproc_parse_rsc_table>:

static int remoteproc_parse_rsc_table(struct remoteproc *rproc,
				      struct resource_table *rsc_table,
				      size_t rsc_size)
{
 100c678:	defffa04 	addi	sp,sp,-24
 100c67c:	dfc00515 	stw	ra,20(sp)
 100c680:	df000415 	stw	fp,16(sp)
 100c684:	df000404 	addi	fp,sp,16
 100c688:	e13ffd15 	stw	r4,-12(fp)
 100c68c:	e17ffe15 	stw	r5,-8(fp)
 100c690:	e1bfff15 	stw	r6,-4(fp)
	struct metal_io_region *io;

	io = remoteproc_get_io_with_va(rproc, rsc_table);
 100c694:	e17ffe17 	ldw	r5,-8(fp)
 100c698:	e13ffd17 	ldw	r4,-12(fp)
 100c69c:	100ccac0 	call	100ccac <remoteproc_get_io_with_va>
 100c6a0:	e0bffc15 	stw	r2,-16(fp)
	return handle_rsc_table(rproc, rsc_table, rsc_size, io);
 100c6a4:	e1fffc17 	ldw	r7,-16(fp)
 100c6a8:	e1bfff17 	ldw	r6,-4(fp)
 100c6ac:	e17ffe17 	ldw	r5,-8(fp)
 100c6b0:	e13ffd17 	ldw	r4,-12(fp)
 100c6b4:	100faf80 	call	100faf8 <handle_rsc_table>
}
 100c6b8:	e037883a 	mov	sp,fp
 100c6bc:	dfc00117 	ldw	ra,4(sp)
 100c6c0:	df000017 	ldw	fp,0(sp)
 100c6c4:	dec00204 	addi	sp,sp,8
 100c6c8:	f800283a 	ret

0100c6cc <remoteproc_set_rsc_table>:

int remoteproc_set_rsc_table(struct remoteproc *rproc,
			     struct resource_table *rsc_table,
			     size_t rsc_size)
{
 100c6cc:	defff904 	addi	sp,sp,-28
 100c6d0:	dfc00615 	stw	ra,24(sp)
 100c6d4:	df000515 	stw	fp,20(sp)
 100c6d8:	df000504 	addi	fp,sp,20
 100c6dc:	e13ffd15 	stw	r4,-12(fp)
 100c6e0:	e17ffe15 	stw	r5,-8(fp)
 100c6e4:	e1bfff15 	stw	r6,-4(fp)
	int ret;
	struct metal_io_region *io;

	io = remoteproc_get_io_with_va(rproc, rsc_table);
 100c6e8:	e17ffe17 	ldw	r5,-8(fp)
 100c6ec:	e13ffd17 	ldw	r4,-12(fp)
 100c6f0:	100ccac0 	call	100ccac <remoteproc_get_io_with_va>
 100c6f4:	e0bffb15 	stw	r2,-20(fp)
	if (!io)
 100c6f8:	e0bffb17 	ldw	r2,-20(fp)
 100c6fc:	1000021e 	bne	r2,zero,100c708 <remoteproc_set_rsc_table+0x3c>
		return -RPROC_EINVAL;
 100c700:	00bfff84 	movi	r2,-2
 100c704:	00001106 	br	100c74c <remoteproc_set_rsc_table+0x80>
	ret = remoteproc_parse_rsc_table(rproc, rsc_table, rsc_size);
 100c708:	e1bfff17 	ldw	r6,-4(fp)
 100c70c:	e17ffe17 	ldw	r5,-8(fp)
 100c710:	e13ffd17 	ldw	r4,-12(fp)
 100c714:	100c6780 	call	100c678 <remoteproc_parse_rsc_table>
 100c718:	e0bffc15 	stw	r2,-16(fp)
	if (!ret) {
 100c71c:	e0bffc17 	ldw	r2,-16(fp)
 100c720:	1000091e 	bne	r2,zero,100c748 <remoteproc_set_rsc_table+0x7c>
		rproc->rsc_table = rsc_table;
 100c724:	e0bffd17 	ldw	r2,-12(fp)
 100c728:	e0fffe17 	ldw	r3,-8(fp)
 100c72c:	10c00115 	stw	r3,4(r2)
		rproc->rsc_len = rsc_size;
 100c730:	e0bffd17 	ldw	r2,-12(fp)
 100c734:	e0ffff17 	ldw	r3,-4(fp)
 100c738:	10c00215 	stw	r3,8(r2)
		rproc->rsc_io = io;
 100c73c:	e0bffd17 	ldw	r2,-12(fp)
 100c740:	e0fffb17 	ldw	r3,-20(fp)
 100c744:	10c00315 	stw	r3,12(r2)
	}
	return ret;
 100c748:	e0bffc17 	ldw	r2,-16(fp)
}
 100c74c:	e037883a 	mov	sp,fp
 100c750:	dfc00117 	ldw	ra,4(sp)
 100c754:	df000017 	ldw	fp,0(sp)
 100c758:	dec00204 	addi	sp,sp,8
 100c75c:	f800283a 	ret

0100c760 <remoteproc_init>:

struct remoteproc *remoteproc_init(struct remoteproc *rproc,
				   struct remoteproc_ops *ops, void *priv)
{
 100c760:	defffb04 	addi	sp,sp,-20
 100c764:	dfc00415 	stw	ra,16(sp)
 100c768:	df000315 	stw	fp,12(sp)
 100c76c:	df000304 	addi	fp,sp,12
 100c770:	e13ffd15 	stw	r4,-12(fp)
 100c774:	e17ffe15 	stw	r5,-8(fp)
 100c778:	e1bfff15 	stw	r6,-4(fp)
	if (rproc) {
 100c77c:	e0bffd17 	ldw	r2,-12(fp)
 100c780:	10001126 	beq	r2,zero,100c7c8 <remoteproc_init+0x68>
		memset(rproc, 0, sizeof(*rproc));
 100c784:	01800e04 	movi	r6,56
 100c788:	000b883a 	mov	r5,zero
 100c78c:	e13ffd17 	ldw	r4,-12(fp)
 100c790:	101593c0 	call	101593c <memset>
		rproc->state = RPROC_OFFLINE;
 100c794:	e0bffd17 	ldw	r2,-12(fp)
 100c798:	10000c15 	stw	zero,48(r2)
		metal_mutex_init(&rproc->lock);
 100c79c:	e0bffd17 	ldw	r2,-12(fp)
 100c7a0:	1009883a 	mov	r4,r2
 100c7a4:	100c1700 	call	100c170 <metal_mutex_init>
		metal_list_init(&rproc->mems);
 100c7a8:	e0bffd17 	ldw	r2,-12(fp)
 100c7ac:	10800404 	addi	r2,r2,16
 100c7b0:	1009883a 	mov	r4,r2
 100c7b4:	100bcd40 	call	100bcd4 <metal_list_init>
		metal_list_init(&rproc->vdevs);
 100c7b8:	e0bffd17 	ldw	r2,-12(fp)
 100c7bc:	10800604 	addi	r2,r2,24
 100c7c0:	1009883a 	mov	r4,r2
 100c7c4:	100bcd40 	call	100bcd4 <metal_list_init>
	}
	rproc = ops->init(rproc, ops, priv);
 100c7c8:	e0bffe17 	ldw	r2,-8(fp)
 100c7cc:	10800017 	ldw	r2,0(r2)
 100c7d0:	e1bfff17 	ldw	r6,-4(fp)
 100c7d4:	e17ffe17 	ldw	r5,-8(fp)
 100c7d8:	e13ffd17 	ldw	r4,-12(fp)
 100c7dc:	103ee83a 	callr	r2
 100c7e0:	e0bffd15 	stw	r2,-12(fp)
	return rproc;
 100c7e4:	e0bffd17 	ldw	r2,-12(fp)
}
 100c7e8:	e037883a 	mov	sp,fp
 100c7ec:	dfc00117 	ldw	ra,4(sp)
 100c7f0:	df000017 	ldw	fp,0(sp)
 100c7f4:	dec00204 	addi	sp,sp,8
 100c7f8:	f800283a 	ret

0100c7fc <remoteproc_remove>:

int remoteproc_remove(struct remoteproc *rproc)
{
 100c7fc:	defffc04 	addi	sp,sp,-16
 100c800:	dfc00315 	stw	ra,12(sp)
 100c804:	df000215 	stw	fp,8(sp)
 100c808:	df000204 	addi	fp,sp,8
 100c80c:	e13fff15 	stw	r4,-4(fp)
	int ret;

	if (rproc) {
 100c810:	e0bfff17 	ldw	r2,-4(fp)
 100c814:	10001226 	beq	r2,zero,100c860 <remoteproc_remove+0x64>
		metal_mutex_acquire(&rproc->lock);
 100c818:	e0bfff17 	ldw	r2,-4(fp)
 100c81c:	1009883a 	mov	r4,r2
 100c820:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
		if (rproc->state == RPROC_OFFLINE)
 100c824:	e0bfff17 	ldw	r2,-4(fp)
 100c828:	10800c17 	ldw	r2,48(r2)
 100c82c:	1000061e 	bne	r2,zero,100c848 <remoteproc_remove+0x4c>
			rproc->ops->remove(rproc);
 100c830:	e0bfff17 	ldw	r2,-4(fp)
 100c834:	10800917 	ldw	r2,36(r2)
 100c838:	10800117 	ldw	r2,4(r2)
 100c83c:	e13fff17 	ldw	r4,-4(fp)
 100c840:	103ee83a 	callr	r2
 100c844:	00000206 	br	100c850 <remoteproc_remove+0x54>
		else
			ret = -RPROC_EAGAIN;
 100c848:	00bfff04 	movi	r2,-4
 100c84c:	e0bffe15 	stw	r2,-8(fp)
		metal_mutex_release(&rproc->lock);
 100c850:	e0bfff17 	ldw	r2,-4(fp)
 100c854:	1009883a 	mov	r4,r2
 100c858:	100c1d80 	call	100c1d8 <metal_mutex_release>
 100c85c:	00000206 	br	100c868 <remoteproc_remove+0x6c>
	} else {
		ret = -RPROC_EINVAL;
 100c860:	00bfff84 	movi	r2,-2
 100c864:	e0bffe15 	stw	r2,-8(fp)
	}
	return ret;
 100c868:	e0bffe17 	ldw	r2,-8(fp)
}
 100c86c:	e037883a 	mov	sp,fp
 100c870:	dfc00117 	ldw	ra,4(sp)
 100c874:	df000017 	ldw	fp,0(sp)
 100c878:	dec00204 	addi	sp,sp,8
 100c87c:	f800283a 	ret

0100c880 <remoteproc_config>:

int remoteproc_config(struct remoteproc *rproc, void *data)
{
 100c880:	defffb04 	addi	sp,sp,-20
 100c884:	dfc00415 	stw	ra,16(sp)
 100c888:	df000315 	stw	fp,12(sp)
 100c88c:	df000304 	addi	fp,sp,12
 100c890:	e13ffe15 	stw	r4,-8(fp)
 100c894:	e17fff15 	stw	r5,-4(fp)
	int ret = -RPROC_ENODEV;
 100c898:	00bfff44 	movi	r2,-3
 100c89c:	e0bffd15 	stw	r2,-12(fp)

	if (rproc) {
 100c8a0:	e0bffe17 	ldw	r2,-8(fp)
 100c8a4:	10001c26 	beq	r2,zero,100c918 <remoteproc_config+0x98>
		metal_mutex_acquire(&rproc->lock);
 100c8a8:	e0bffe17 	ldw	r2,-8(fp)
 100c8ac:	1009883a 	mov	r4,r2
 100c8b0:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
		if (rproc->state == RPROC_OFFLINE) {
 100c8b4:	e0bffe17 	ldw	r2,-8(fp)
 100c8b8:	10800c17 	ldw	r2,48(r2)
 100c8bc:	1000111e 	bne	r2,zero,100c904 <remoteproc_config+0x84>
			/* configure operation is allowed if the state is
			 * offline or ready. This function can be called
			 * multiple times before start the remote.
			 */
			if (rproc->ops->config)
 100c8c0:	e0bffe17 	ldw	r2,-8(fp)
 100c8c4:	10800917 	ldw	r2,36(r2)
 100c8c8:	10800417 	ldw	r2,16(r2)
 100c8cc:	10000826 	beq	r2,zero,100c8f0 <remoteproc_config+0x70>
				ret = rproc->ops->config(rproc, data);
 100c8d0:	e0bffe17 	ldw	r2,-8(fp)
 100c8d4:	10800917 	ldw	r2,36(r2)
 100c8d8:	10800417 	ldw	r2,16(r2)
 100c8dc:	e17fff17 	ldw	r5,-4(fp)
 100c8e0:	e13ffe17 	ldw	r4,-8(fp)
 100c8e4:	103ee83a 	callr	r2
 100c8e8:	e0bffd15 	stw	r2,-12(fp)
 100c8ec:	00000106 	br	100c8f4 <remoteproc_config+0x74>
			else
				ret = 0;
 100c8f0:	e03ffd15 	stw	zero,-12(fp)
			rproc->state = RPROC_READY;
 100c8f4:	e0bffe17 	ldw	r2,-8(fp)
 100c8f8:	00c00084 	movi	r3,2
 100c8fc:	10c00c15 	stw	r3,48(r2)
 100c900:	00000206 	br	100c90c <remoteproc_config+0x8c>
		} else {
			ret = -RPROC_EINVAL;
 100c904:	00bfff84 	movi	r2,-2
 100c908:	e0bffd15 	stw	r2,-12(fp)
		}
		metal_mutex_release(&rproc->lock);
 100c90c:	e0bffe17 	ldw	r2,-8(fp)
 100c910:	1009883a 	mov	r4,r2
 100c914:	100c1d80 	call	100c1d8 <metal_mutex_release>
	}
	return ret;
 100c918:	e0bffd17 	ldw	r2,-12(fp)
}
 100c91c:	e037883a 	mov	sp,fp
 100c920:	dfc00117 	ldw	ra,4(sp)
 100c924:	df000017 	ldw	fp,0(sp)
 100c928:	dec00204 	addi	sp,sp,8
 100c92c:	f800283a 	ret

0100c930 <remoteproc_start>:

int remoteproc_start(struct remoteproc *rproc)
{
 100c930:	defffc04 	addi	sp,sp,-16
 100c934:	dfc00315 	stw	ra,12(sp)
 100c938:	df000215 	stw	fp,8(sp)
 100c93c:	df000204 	addi	fp,sp,8
 100c940:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100c944:	00bfff44 	movi	r2,-3
 100c948:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100c94c:	e0bfff17 	ldw	r2,-4(fp)
 100c950:	10001626 	beq	r2,zero,100c9ac <remoteproc_start+0x7c>
		metal_mutex_acquire(&rproc->lock);
 100c954:	e0bfff17 	ldw	r2,-4(fp)
 100c958:	1009883a 	mov	r4,r2
 100c95c:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
		if (rproc->state == RPROC_READY) {
 100c960:	e0bfff17 	ldw	r2,-4(fp)
 100c964:	10800c17 	ldw	r2,48(r2)
 100c968:	10800098 	cmpnei	r2,r2,2
 100c96c:	10000a1e 	bne	r2,zero,100c998 <remoteproc_start+0x68>
			ret = rproc->ops->start(rproc);
 100c970:	e0bfff17 	ldw	r2,-4(fp)
 100c974:	10800917 	ldw	r2,36(r2)
 100c978:	10800517 	ldw	r2,20(r2)
 100c97c:	e13fff17 	ldw	r4,-4(fp)
 100c980:	103ee83a 	callr	r2
 100c984:	e0bffe15 	stw	r2,-8(fp)
			rproc->state = RPROC_RUNNING;
 100c988:	e0bfff17 	ldw	r2,-4(fp)
 100c98c:	00c000c4 	movi	r3,3
 100c990:	10c00c15 	stw	r3,48(r2)
 100c994:	00000206 	br	100c9a0 <remoteproc_start+0x70>
		} else {
			ret = -RPROC_EINVAL;
 100c998:	00bfff84 	movi	r2,-2
 100c99c:	e0bffe15 	stw	r2,-8(fp)
		}
		metal_mutex_release(&rproc->lock);
 100c9a0:	e0bfff17 	ldw	r2,-4(fp)
 100c9a4:	1009883a 	mov	r4,r2
 100c9a8:	100c1d80 	call	100c1d8 <metal_mutex_release>
	}
	return ret;
 100c9ac:	e0bffe17 	ldw	r2,-8(fp)
}
 100c9b0:	e037883a 	mov	sp,fp
 100c9b4:	dfc00117 	ldw	ra,4(sp)
 100c9b8:	df000017 	ldw	fp,0(sp)
 100c9bc:	dec00204 	addi	sp,sp,8
 100c9c0:	f800283a 	ret

0100c9c4 <remoteproc_stop>:

int remoteproc_stop(struct remoteproc *rproc)
{
 100c9c4:	defffc04 	addi	sp,sp,-16
 100c9c8:	dfc00315 	stw	ra,12(sp)
 100c9cc:	df000215 	stw	fp,8(sp)
 100c9d0:	df000204 	addi	fp,sp,8
 100c9d4:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100c9d8:	00bfff44 	movi	r2,-3
 100c9dc:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100c9e0:	e0bfff17 	ldw	r2,-4(fp)
 100c9e4:	10001c26 	beq	r2,zero,100ca58 <remoteproc_stop+0x94>
		metal_mutex_acquire(&rproc->lock);
 100c9e8:	e0bfff17 	ldw	r2,-4(fp)
 100c9ec:	1009883a 	mov	r4,r2
 100c9f0:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
		if (rproc->state != RPROC_STOPPED &&
 100c9f4:	e0bfff17 	ldw	r2,-4(fp)
 100c9f8:	10800c17 	ldw	r2,48(r2)
 100c9fc:	108001a0 	cmpeqi	r2,r2,6
 100ca00:	1000111e 	bne	r2,zero,100ca48 <remoteproc_stop+0x84>
		    rproc->state != RPROC_OFFLINE) {
 100ca04:	e0bfff17 	ldw	r2,-4(fp)
 100ca08:	10800c17 	ldw	r2,48(r2)
{
	int ret = -RPROC_ENODEV;

	if (rproc) {
		metal_mutex_acquire(&rproc->lock);
		if (rproc->state != RPROC_STOPPED &&
 100ca0c:	10000e26 	beq	r2,zero,100ca48 <remoteproc_stop+0x84>
		    rproc->state != RPROC_OFFLINE) {
			if (rproc->ops->stop)
 100ca10:	e0bfff17 	ldw	r2,-4(fp)
 100ca14:	10800917 	ldw	r2,36(r2)
 100ca18:	10800617 	ldw	r2,24(r2)
 100ca1c:	10000626 	beq	r2,zero,100ca38 <remoteproc_stop+0x74>
				ret = rproc->ops->stop(rproc);
 100ca20:	e0bfff17 	ldw	r2,-4(fp)
 100ca24:	10800917 	ldw	r2,36(r2)
 100ca28:	10800617 	ldw	r2,24(r2)
 100ca2c:	e13fff17 	ldw	r4,-4(fp)
 100ca30:	103ee83a 	callr	r2
 100ca34:	e0bffe15 	stw	r2,-8(fp)
			rproc->state = RPROC_STOPPED;
 100ca38:	e0bfff17 	ldw	r2,-4(fp)
 100ca3c:	00c00184 	movi	r3,6
 100ca40:	10c00c15 	stw	r3,48(r2)
 100ca44:	00000106 	br	100ca4c <remoteproc_stop+0x88>
		} else {
			ret = 0;
 100ca48:	e03ffe15 	stw	zero,-8(fp)
		}
		metal_mutex_release(&rproc->lock);
 100ca4c:	e0bfff17 	ldw	r2,-4(fp)
 100ca50:	1009883a 	mov	r4,r2
 100ca54:	100c1d80 	call	100c1d8 <metal_mutex_release>
	}
	return ret;
 100ca58:	e0bffe17 	ldw	r2,-8(fp)
}
 100ca5c:	e037883a 	mov	sp,fp
 100ca60:	dfc00117 	ldw	ra,4(sp)
 100ca64:	df000017 	ldw	fp,0(sp)
 100ca68:	dec00204 	addi	sp,sp,8
 100ca6c:	f800283a 	ret

0100ca70 <remoteproc_shutdown>:

int remoteproc_shutdown(struct remoteproc *rproc)
{
 100ca70:	defffc04 	addi	sp,sp,-16
 100ca74:	dfc00315 	stw	ra,12(sp)
 100ca78:	df000215 	stw	fp,8(sp)
 100ca7c:	df000204 	addi	fp,sp,8
 100ca80:	e13fff15 	stw	r4,-4(fp)
	int ret = -RPROC_ENODEV;
 100ca84:	00bfff44 	movi	r2,-3
 100ca88:	e0bffe15 	stw	r2,-8(fp)

	if (rproc) {
 100ca8c:	e0bfff17 	ldw	r2,-4(fp)
 100ca90:	10002826 	beq	r2,zero,100cb34 <remoteproc_shutdown+0xc4>
		ret = 0;
 100ca94:	e03ffe15 	stw	zero,-8(fp)
		metal_mutex_acquire(&rproc->lock);
 100ca98:	e0bfff17 	ldw	r2,-4(fp)
 100ca9c:	1009883a 	mov	r4,r2
 100caa0:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
		if (rproc->state != RPROC_OFFLINE) {
 100caa4:	e0bfff17 	ldw	r2,-4(fp)
 100caa8:	10800c17 	ldw	r2,48(r2)
 100caac:	10001e26 	beq	r2,zero,100cb28 <remoteproc_shutdown+0xb8>
			if (rproc->state != RPROC_STOPPED) {
 100cab0:	e0bfff17 	ldw	r2,-4(fp)
 100cab4:	10800c17 	ldw	r2,48(r2)
 100cab8:	108001a0 	cmpeqi	r2,r2,6
 100cabc:	10000a1e 	bne	r2,zero,100cae8 <remoteproc_shutdown+0x78>
				if (rproc->ops->stop)
 100cac0:	e0bfff17 	ldw	r2,-4(fp)
 100cac4:	10800917 	ldw	r2,36(r2)
 100cac8:	10800617 	ldw	r2,24(r2)
 100cacc:	10000626 	beq	r2,zero,100cae8 <remoteproc_shutdown+0x78>
					ret = rproc->ops->stop(rproc);
 100cad0:	e0bfff17 	ldw	r2,-4(fp)
 100cad4:	10800917 	ldw	r2,36(r2)
 100cad8:	10800617 	ldw	r2,24(r2)
 100cadc:	e13fff17 	ldw	r4,-4(fp)
 100cae0:	103ee83a 	callr	r2
 100cae4:	e0bffe15 	stw	r2,-8(fp)
			}
			if (!ret) {
 100cae8:	e0bffe17 	ldw	r2,-8(fp)
 100caec:	10000e1e 	bne	r2,zero,100cb28 <remoteproc_shutdown+0xb8>
				if (rproc->ops->shutdown)
 100caf0:	e0bfff17 	ldw	r2,-4(fp)
 100caf4:	10800917 	ldw	r2,36(r2)
 100caf8:	10800717 	ldw	r2,28(r2)
 100cafc:	10000626 	beq	r2,zero,100cb18 <remoteproc_shutdown+0xa8>
					ret = rproc->ops->shutdown(rproc);
 100cb00:	e0bfff17 	ldw	r2,-4(fp)
 100cb04:	10800917 	ldw	r2,36(r2)
 100cb08:	10800717 	ldw	r2,28(r2)
 100cb0c:	e13fff17 	ldw	r4,-4(fp)
 100cb10:	103ee83a 	callr	r2
 100cb14:	e0bffe15 	stw	r2,-8(fp)
				if (!ret) {
 100cb18:	e0bffe17 	ldw	r2,-8(fp)
 100cb1c:	1000021e 	bne	r2,zero,100cb28 <remoteproc_shutdown+0xb8>
					rproc->state = RPROC_OFFLINE;
 100cb20:	e0bfff17 	ldw	r2,-4(fp)
 100cb24:	10000c15 	stw	zero,48(r2)
				}
			}
		}
		metal_mutex_release(&rproc->lock);
 100cb28:	e0bfff17 	ldw	r2,-4(fp)
 100cb2c:	1009883a 	mov	r4,r2
 100cb30:	100c1d80 	call	100c1d8 <metal_mutex_release>
	}
	return ret;
 100cb34:	e0bffe17 	ldw	r2,-8(fp)
}
 100cb38:	e037883a 	mov	sp,fp
 100cb3c:	dfc00117 	ldw	ra,4(sp)
 100cb40:	df000017 	ldw	fp,0(sp)
 100cb44:	dec00204 	addi	sp,sp,8
 100cb48:	f800283a 	ret

0100cb4c <remoteproc_get_io_with_name>:

struct metal_io_region *
remoteproc_get_io_with_name(struct remoteproc *rproc,
			    const char *name)
{
 100cb4c:	defff904 	addi	sp,sp,-28
 100cb50:	dfc00615 	stw	ra,24(sp)
 100cb54:	df000515 	stw	fp,20(sp)
 100cb58:	df000504 	addi	fp,sp,20
 100cb5c:	e13ffe15 	stw	r4,-8(fp)
 100cb60:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, name,
 100cb64:	d8000115 	stw	zero,4(sp)
 100cb68:	d8000015 	stw	zero,0(sp)
 100cb6c:	01ffffc4 	movi	r7,-1
 100cb70:	01bfffc4 	movi	r6,-1
 100cb74:	e17fff17 	ldw	r5,-4(fp)
 100cb78:	e13ffe17 	ldw	r4,-8(fp)
 100cb7c:	100c3140 	call	100c314 <remoteproc_get_mem>
 100cb80:	e0bffd15 	stw	r2,-12(fp)
				 METAL_BAD_PHYS, METAL_BAD_PHYS, NULL, 0);
	if (mem)
 100cb84:	e0bffd17 	ldw	r2,-12(fp)
 100cb88:	10000326 	beq	r2,zero,100cb98 <remoteproc_get_io_with_name+0x4c>
		return mem->io;
 100cb8c:	e0bffd17 	ldw	r2,-12(fp)
 100cb90:	10800b17 	ldw	r2,44(r2)
 100cb94:	00000106 	br	100cb9c <remoteproc_get_io_with_name+0x50>
	else
		return NULL;
 100cb98:	0005883a 	mov	r2,zero
}
 100cb9c:	e037883a 	mov	sp,fp
 100cba0:	dfc00117 	ldw	ra,4(sp)
 100cba4:	df000017 	ldw	fp,0(sp)
 100cba8:	dec00204 	addi	sp,sp,8
 100cbac:	f800283a 	ret

0100cbb0 <remoteproc_get_io_with_pa>:

struct metal_io_region *
remoteproc_get_io_with_pa(struct remoteproc *rproc,
			  metal_phys_addr_t pa)
{
 100cbb0:	defff904 	addi	sp,sp,-28
 100cbb4:	dfc00615 	stw	ra,24(sp)
 100cbb8:	df000515 	stw	fp,20(sp)
 100cbbc:	df000504 	addi	fp,sp,20
 100cbc0:	e13ffe15 	stw	r4,-8(fp)
 100cbc4:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, pa, METAL_BAD_PHYS, NULL, 0);
 100cbc8:	d8000115 	stw	zero,4(sp)
 100cbcc:	d8000015 	stw	zero,0(sp)
 100cbd0:	01ffffc4 	movi	r7,-1
 100cbd4:	e1bfff17 	ldw	r6,-4(fp)
 100cbd8:	000b883a 	mov	r5,zero
 100cbdc:	e13ffe17 	ldw	r4,-8(fp)
 100cbe0:	100c3140 	call	100c314 <remoteproc_get_mem>
 100cbe4:	e0bffd15 	stw	r2,-12(fp)
	if (mem)
 100cbe8:	e0bffd17 	ldw	r2,-12(fp)
 100cbec:	10000326 	beq	r2,zero,100cbfc <remoteproc_get_io_with_pa+0x4c>
		return mem->io;
 100cbf0:	e0bffd17 	ldw	r2,-12(fp)
 100cbf4:	10800b17 	ldw	r2,44(r2)
 100cbf8:	00000106 	br	100cc00 <remoteproc_get_io_with_pa+0x50>
	else
		return NULL;
 100cbfc:	0005883a 	mov	r2,zero
}
 100cc00:	e037883a 	mov	sp,fp
 100cc04:	dfc00117 	ldw	ra,4(sp)
 100cc08:	df000017 	ldw	fp,0(sp)
 100cc0c:	dec00204 	addi	sp,sp,8
 100cc10:	f800283a 	ret

0100cc14 <remoteproc_get_io_with_da>:

struct metal_io_region *
remoteproc_get_io_with_da(struct remoteproc *rproc,
			  metal_phys_addr_t da,
			  unsigned long *offset)
{
 100cc14:	defff604 	addi	sp,sp,-40
 100cc18:	dfc00915 	stw	ra,36(sp)
 100cc1c:	df000815 	stw	fp,32(sp)
 100cc20:	df000804 	addi	fp,sp,32
 100cc24:	e13ffd15 	stw	r4,-12(fp)
 100cc28:	e17ffe15 	stw	r5,-8(fp)
 100cc2c:	e1bfff15 	stw	r6,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, METAL_BAD_PHYS, da, NULL, 0);
 100cc30:	d8000115 	stw	zero,4(sp)
 100cc34:	d8000015 	stw	zero,0(sp)
 100cc38:	e1fffe17 	ldw	r7,-8(fp)
 100cc3c:	01bfffc4 	movi	r6,-1
 100cc40:	000b883a 	mov	r5,zero
 100cc44:	e13ffd17 	ldw	r4,-12(fp)
 100cc48:	100c3140 	call	100c314 <remoteproc_get_mem>
 100cc4c:	e0bffa15 	stw	r2,-24(fp)
	if (mem) {
 100cc50:	e0bffa17 	ldw	r2,-24(fp)
 100cc54:	10000f26 	beq	r2,zero,100cc94 <remoteproc_get_io_with_da+0x80>
		struct metal_io_region *io;
		metal_phys_addr_t pa;

		io = mem->io;
 100cc58:	e0bffa17 	ldw	r2,-24(fp)
 100cc5c:	10800b17 	ldw	r2,44(r2)
 100cc60:	e0bffb15 	stw	r2,-20(fp)
		pa = remoteproc_datopa(mem, da);
 100cc64:	e17ffe17 	ldw	r5,-8(fp)
 100cc68:	e13ffa17 	ldw	r4,-24(fp)
 100cc6c:	100c48c0 	call	100c48c <remoteproc_datopa>
 100cc70:	e0bffc15 	stw	r2,-16(fp)
		*offset = metal_io_phys_to_offset(io, pa);
 100cc74:	e17ffc17 	ldw	r5,-16(fp)
 100cc78:	e13ffb17 	ldw	r4,-20(fp)
 100cc7c:	100bf9c0 	call	100bf9c <metal_io_phys_to_offset>
 100cc80:	1007883a 	mov	r3,r2
 100cc84:	e0bfff17 	ldw	r2,-4(fp)
 100cc88:	10c00015 	stw	r3,0(r2)
		return io;
 100cc8c:	e0bffb17 	ldw	r2,-20(fp)
 100cc90:	00000106 	br	100cc98 <remoteproc_get_io_with_da+0x84>
	} else {
		return NULL;
 100cc94:	0005883a 	mov	r2,zero
	}
}
 100cc98:	e037883a 	mov	sp,fp
 100cc9c:	dfc00117 	ldw	ra,4(sp)
 100cca0:	df000017 	ldw	fp,0(sp)
 100cca4:	dec00204 	addi	sp,sp,8
 100cca8:	f800283a 	ret

0100ccac <remoteproc_get_io_with_va>:

struct metal_io_region *
remoteproc_get_io_with_va(struct remoteproc *rproc, void *va)
{
 100ccac:	defff904 	addi	sp,sp,-28
 100ccb0:	dfc00615 	stw	ra,24(sp)
 100ccb4:	df000515 	stw	fp,20(sp)
 100ccb8:	df000504 	addi	fp,sp,20
 100ccbc:	e13ffe15 	stw	r4,-8(fp)
 100ccc0:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_mem *mem;

	mem = remoteproc_get_mem(rproc, NULL, METAL_BAD_PHYS, METAL_BAD_PHYS,
 100ccc4:	d8000115 	stw	zero,4(sp)
 100ccc8:	e0bfff17 	ldw	r2,-4(fp)
 100cccc:	d8800015 	stw	r2,0(sp)
 100ccd0:	01ffffc4 	movi	r7,-1
 100ccd4:	01bfffc4 	movi	r6,-1
 100ccd8:	000b883a 	mov	r5,zero
 100ccdc:	e13ffe17 	ldw	r4,-8(fp)
 100cce0:	100c3140 	call	100c314 <remoteproc_get_mem>
 100cce4:	e0bffd15 	stw	r2,-12(fp)
				 va, 0);
	if (mem)
 100cce8:	e0bffd17 	ldw	r2,-12(fp)
 100ccec:	10000326 	beq	r2,zero,100ccfc <remoteproc_get_io_with_va+0x50>
		return mem->io;
 100ccf0:	e0bffd17 	ldw	r2,-12(fp)
 100ccf4:	10800b17 	ldw	r2,44(r2)
 100ccf8:	00000106 	br	100cd00 <remoteproc_get_io_with_va+0x54>
	else
		return NULL;
 100ccfc:	0005883a 	mov	r2,zero
}
 100cd00:	e037883a 	mov	sp,fp
 100cd04:	dfc00117 	ldw	ra,4(sp)
 100cd08:	df000017 	ldw	fp,0(sp)
 100cd0c:	dec00204 	addi	sp,sp,8
 100cd10:	f800283a 	ret

0100cd14 <remoteproc_mmap>:

void *remoteproc_mmap(struct remoteproc *rproc,
		      metal_phys_addr_t *pa, metal_phys_addr_t *da,
		      size_t size, unsigned int attribute,
		      struct metal_io_region **io)
{
 100cd14:	defff404 	addi	sp,sp,-48
 100cd18:	dfc00b15 	stw	ra,44(sp)
 100cd1c:	df000a15 	stw	fp,40(sp)
 100cd20:	df000a04 	addi	fp,sp,40
 100cd24:	e13ffc15 	stw	r4,-16(fp)
 100cd28:	e17ffd15 	stw	r5,-12(fp)
 100cd2c:	e1bffe15 	stw	r6,-8(fp)
 100cd30:	e1ffff15 	stw	r7,-4(fp)
	void *va = NULL;
 100cd34:	e03ff815 	stw	zero,-32(fp)
	metal_phys_addr_t lpa, lda;
	struct remoteproc_mem *mem;

	if (!rproc)
 100cd38:	e0bffc17 	ldw	r2,-16(fp)
 100cd3c:	1000021e 	bne	r2,zero,100cd48 <remoteproc_mmap+0x34>
		return NULL;
 100cd40:	0005883a 	mov	r2,zero
 100cd44:	00006006 	br	100cec8 <remoteproc_mmap+0x1b4>
	else if (!pa && !da)
 100cd48:	e0bffd17 	ldw	r2,-12(fp)
 100cd4c:	1000041e 	bne	r2,zero,100cd60 <remoteproc_mmap+0x4c>
 100cd50:	e0bffe17 	ldw	r2,-8(fp)
 100cd54:	1000021e 	bne	r2,zero,100cd60 <remoteproc_mmap+0x4c>
		return NULL;
 100cd58:	0005883a 	mov	r2,zero
 100cd5c:	00005a06 	br	100cec8 <remoteproc_mmap+0x1b4>
	if (pa)
 100cd60:	e0bffd17 	ldw	r2,-12(fp)
 100cd64:	10000426 	beq	r2,zero,100cd78 <remoteproc_mmap+0x64>
		lpa = *pa;
 100cd68:	e0bffd17 	ldw	r2,-12(fp)
 100cd6c:	10800017 	ldw	r2,0(r2)
 100cd70:	e0bffa15 	stw	r2,-24(fp)
 100cd74:	00000206 	br	100cd80 <remoteproc_mmap+0x6c>
	else
		lpa = METAL_BAD_PHYS;
 100cd78:	00bfffc4 	movi	r2,-1
 100cd7c:	e0bffa15 	stw	r2,-24(fp)
	if (da)
 100cd80:	e0bffe17 	ldw	r2,-8(fp)
 100cd84:	10000426 	beq	r2,zero,100cd98 <remoteproc_mmap+0x84>
		lda =  *da;
 100cd88:	e0bffe17 	ldw	r2,-8(fp)
 100cd8c:	10800017 	ldw	r2,0(r2)
 100cd90:	e0bffb15 	stw	r2,-20(fp)
 100cd94:	00000206 	br	100cda0 <remoteproc_mmap+0x8c>
	else
		lda = METAL_BAD_PHYS;
 100cd98:	00bfffc4 	movi	r2,-1
 100cd9c:	e0bffb15 	stw	r2,-20(fp)
	mem = remoteproc_get_mem(rproc, NULL, lpa, lda, NULL, size);
 100cda0:	e0fffa17 	ldw	r3,-24(fp)
 100cda4:	e13ffb17 	ldw	r4,-20(fp)
 100cda8:	e0bfff17 	ldw	r2,-4(fp)
 100cdac:	d8800115 	stw	r2,4(sp)
 100cdb0:	d8000015 	stw	zero,0(sp)
 100cdb4:	200f883a 	mov	r7,r4
 100cdb8:	180d883a 	mov	r6,r3
 100cdbc:	000b883a 	mov	r5,zero
 100cdc0:	e13ffc17 	ldw	r4,-16(fp)
 100cdc4:	100c3140 	call	100c314 <remoteproc_get_mem>
 100cdc8:	e0bff915 	stw	r2,-28(fp)
	if (mem) {
 100cdcc:	e0bff917 	ldw	r2,-28(fp)
 100cdd0:	10001f26 	beq	r2,zero,100ce50 <remoteproc_mmap+0x13c>
		if (lpa != METAL_BAD_PHYS)
 100cdd4:	e0bffa17 	ldw	r2,-24(fp)
 100cdd8:	10bfffe0 	cmpeqi	r2,r2,-1
 100cddc:	1000061e 	bne	r2,zero,100cdf8 <remoteproc_mmap+0xe4>
			lda = remoteproc_patoda(mem, lpa);
 100cde0:	e0bffa17 	ldw	r2,-24(fp)
 100cde4:	100b883a 	mov	r5,r2
 100cde8:	e13ff917 	ldw	r4,-28(fp)
 100cdec:	100c4d40 	call	100c4d4 <remoteproc_patoda>
 100cdf0:	e0bffb15 	stw	r2,-20(fp)
 100cdf4:	00000806 	br	100ce18 <remoteproc_mmap+0x104>
		else if (lda != METAL_BAD_PHYS)
 100cdf8:	e0bffb17 	ldw	r2,-20(fp)
 100cdfc:	10bfffe0 	cmpeqi	r2,r2,-1
 100ce00:	1000051e 	bne	r2,zero,100ce18 <remoteproc_mmap+0x104>
			lpa = remoteproc_datopa(mem, lda);
 100ce04:	e0bffb17 	ldw	r2,-20(fp)
 100ce08:	100b883a 	mov	r5,r2
 100ce0c:	e13ff917 	ldw	r4,-28(fp)
 100ce10:	100c48c0 	call	100c48c <remoteproc_datopa>
 100ce14:	e0bffa15 	stw	r2,-24(fp)
		if (io)
 100ce18:	e0800317 	ldw	r2,12(fp)
 100ce1c:	10000426 	beq	r2,zero,100ce30 <remoteproc_mmap+0x11c>
			*io = mem->io;
 100ce20:	e0bff917 	ldw	r2,-28(fp)
 100ce24:	10c00b17 	ldw	r3,44(r2)
 100ce28:	e0800317 	ldw	r2,12(fp)
 100ce2c:	10c00015 	stw	r3,0(r2)
		va = metal_io_phys_to_virt(mem->io, lpa);
 100ce30:	e0bff917 	ldw	r2,-28(fp)
 100ce34:	10800b17 	ldw	r2,44(r2)
 100ce38:	e0fffa17 	ldw	r3,-24(fp)
 100ce3c:	180b883a 	mov	r5,r3
 100ce40:	1009883a 	mov	r4,r2
 100ce44:	100c0740 	call	100c074 <metal_io_phys_to_virt>
 100ce48:	e0bff815 	stw	r2,-32(fp)
 100ce4c:	00001306 	br	100ce9c <remoteproc_mmap+0x188>
	} else if (rproc->ops->mmap) {
 100ce50:	e0bffc17 	ldw	r2,-16(fp)
 100ce54:	10800917 	ldw	r2,36(r2)
 100ce58:	10800217 	ldw	r2,8(r2)
 100ce5c:	10000f26 	beq	r2,zero,100ce9c <remoteproc_mmap+0x188>
		va = rproc->ops->mmap(rproc, &lpa, &lda, size, attribute, io);
 100ce60:	e0bffc17 	ldw	r2,-16(fp)
 100ce64:	10800917 	ldw	r2,36(r2)
 100ce68:	10800217 	ldw	r2,8(r2)
 100ce6c:	e17ffb04 	addi	r5,fp,-20
 100ce70:	e13ffa04 	addi	r4,fp,-24
 100ce74:	e0c00317 	ldw	r3,12(fp)
 100ce78:	d8c00115 	stw	r3,4(sp)
 100ce7c:	e0c00217 	ldw	r3,8(fp)
 100ce80:	d8c00015 	stw	r3,0(sp)
 100ce84:	e1ffff17 	ldw	r7,-4(fp)
 100ce88:	280d883a 	mov	r6,r5
 100ce8c:	200b883a 	mov	r5,r4
 100ce90:	e13ffc17 	ldw	r4,-16(fp)
 100ce94:	103ee83a 	callr	r2
 100ce98:	e0bff815 	stw	r2,-32(fp)
	}

	if (pa)
 100ce9c:	e0bffd17 	ldw	r2,-12(fp)
 100cea0:	10000326 	beq	r2,zero,100ceb0 <remoteproc_mmap+0x19c>
		*pa  = lpa;
 100cea4:	e0fffa17 	ldw	r3,-24(fp)
 100cea8:	e0bffd17 	ldw	r2,-12(fp)
 100ceac:	10c00015 	stw	r3,0(r2)
	if (da)
 100ceb0:	e0bffe17 	ldw	r2,-8(fp)
 100ceb4:	10000326 	beq	r2,zero,100cec4 <remoteproc_mmap+0x1b0>
		*da = lda;
 100ceb8:	e0fffb17 	ldw	r3,-20(fp)
 100cebc:	e0bffe17 	ldw	r2,-8(fp)
 100cec0:	10c00015 	stw	r3,0(r2)
	return va;
 100cec4:	e0bff817 	ldw	r2,-32(fp)
}
 100cec8:	e037883a 	mov	sp,fp
 100cecc:	dfc00117 	ldw	ra,4(sp)
 100ced0:	df000017 	ldw	fp,0(sp)
 100ced4:	dec00204 	addi	sp,sp,8
 100ced8:	f800283a 	ret

0100cedc <remoteproc_load>:

int remoteproc_load(struct remoteproc *rproc, const char *path,
		    void *store, struct image_store_ops *store_ops,
		    void **img_info)
{
 100cedc:	deffdf04 	addi	sp,sp,-132
 100cee0:	dfc02015 	stw	ra,128(sp)
 100cee4:	df001f15 	stw	fp,124(sp)
 100cee8:	df001f04 	addi	fp,sp,124
 100ceec:	e13ffc15 	stw	r4,-16(fp)
 100cef0:	e17ffd15 	stw	r5,-12(fp)
 100cef4:	e1bffe15 	stw	r6,-8(fp)
 100cef8:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	struct loader_ops *loader;
	const void *img_data;
	void *limg_info = NULL;
 100cefc:	e03ff115 	stw	zero,-60(fp)
	size_t offset, noffset;
	size_t len, nlen;
	int last_load_state;
	metal_phys_addr_t da, rsc_da;
	size_t rsc_size = 0;
 100cf00:	e03ff715 	stw	zero,-36(fp)
	void *rsc_table = NULL;
 100cf04:	e03fec15 	stw	zero,-80(fp)
	struct metal_io_region *io = NULL;
 100cf08:	e03ff815 	stw	zero,-32(fp)

	if (!rproc)
 100cf0c:	e0bffc17 	ldw	r2,-16(fp)
 100cf10:	1000021e 	bne	r2,zero,100cf1c <remoteproc_load+0x40>
		return -RPROC_ENODEV;
 100cf14:	00bfff44 	movi	r2,-3
 100cf18:	00034b06 	br	100dc48 <remoteproc_load+0xd6c>

	metal_mutex_acquire(&rproc->lock);
 100cf1c:	e0bffc17 	ldw	r2,-16(fp)
 100cf20:	1009883a 	mov	r4,r2
 100cf24:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
	metal_log(METAL_LOG_DEBUG, "%s: check remoteproc status\r\n", __func__);
 100cf28:	008060f4 	movhi	r2,387
 100cf2c:	10bb7104 	addi	r2,r2,-4668
 100cf30:	10800017 	ldw	r2,0(r2)
 100cf34:	108001f0 	cmpltui	r2,r2,7
 100cf38:	10000d1e 	bne	r2,zero,100cf70 <remoteproc_load+0x94>
 100cf3c:	008060f4 	movhi	r2,387
 100cf40:	10bb7104 	addi	r2,r2,-4668
 100cf44:	10800117 	ldw	r2,4(r2)
 100cf48:	10000926 	beq	r2,zero,100cf70 <remoteproc_load+0x94>
 100cf4c:	008060f4 	movhi	r2,387
 100cf50:	10bb7104 	addi	r2,r2,-4668
 100cf54:	10800117 	ldw	r2,4(r2)
 100cf58:	018040f4 	movhi	r6,259
 100cf5c:	31a78f04 	addi	r6,r6,-25028
 100cf60:	014040f4 	movhi	r5,259
 100cf64:	29663904 	addi	r5,r5,-26396
 100cf68:	010001c4 	movi	r4,7
 100cf6c:	103ee83a 	callr	r2
	/* If remoteproc is not in ready state, cannot load executable */
	if (rproc->state != RPROC_READY && rproc->state != RPROC_CONFIGURED) {
 100cf70:	e0bffc17 	ldw	r2,-16(fp)
 100cf74:	10800c17 	ldw	r2,48(r2)
 100cf78:	108000a0 	cmpeqi	r2,r2,2
 100cf7c:	10001c1e 	bne	r2,zero,100cff0 <remoteproc_load+0x114>
 100cf80:	e0bffc17 	ldw	r2,-16(fp)
 100cf84:	10800c17 	ldw	r2,48(r2)
 100cf88:	10800060 	cmpeqi	r2,r2,1
 100cf8c:	1000181e 	bne	r2,zero,100cff0 <remoteproc_load+0x114>
		metal_log(METAL_LOG_ERROR,
 100cf90:	008060f4 	movhi	r2,387
 100cf94:	10bb7104 	addi	r2,r2,-4668
 100cf98:	10800017 	ldw	r2,0(r2)
 100cf9c:	108000f0 	cmpltui	r2,r2,3
 100cfa0:	10000e1e 	bne	r2,zero,100cfdc <remoteproc_load+0x100>
 100cfa4:	008060f4 	movhi	r2,387
 100cfa8:	10bb7104 	addi	r2,r2,-4668
 100cfac:	10800117 	ldw	r2,4(r2)
 100cfb0:	10000a26 	beq	r2,zero,100cfdc <remoteproc_load+0x100>
 100cfb4:	008060f4 	movhi	r2,387
 100cfb8:	10bb7104 	addi	r2,r2,-4668
 100cfbc:	10800117 	ldw	r2,4(r2)
 100cfc0:	e0fffc17 	ldw	r3,-16(fp)
 100cfc4:	18c00c17 	ldw	r3,48(r3)
 100cfc8:	180d883a 	mov	r6,r3
 100cfcc:	014040f4 	movhi	r5,259
 100cfd0:	29664104 	addi	r5,r5,-26364
 100cfd4:	010000c4 	movi	r4,3
 100cfd8:	103ee83a 	callr	r2
			  "load failure: invalid rproc state %d.\r\n",
			  rproc->state);
		metal_mutex_release(&rproc->lock);
 100cfdc:	e0bffc17 	ldw	r2,-16(fp)
 100cfe0:	1009883a 	mov	r4,r2
 100cfe4:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return -RPROC_EINVAL;
 100cfe8:	00bfff84 	movi	r2,-2
 100cfec:	00031606 	br	100dc48 <remoteproc_load+0xd6c>
	}

	if (!store_ops) {
 100cff0:	e0bfff17 	ldw	r2,-4(fp)
 100cff4:	1000151e 	bne	r2,zero,100d04c <remoteproc_load+0x170>
		metal_log(METAL_LOG_ERROR,
 100cff8:	008060f4 	movhi	r2,387
 100cffc:	10bb7104 	addi	r2,r2,-4668
 100d000:	10800017 	ldw	r2,0(r2)
 100d004:	108000f0 	cmpltui	r2,r2,3
 100d008:	10000b1e 	bne	r2,zero,100d038 <remoteproc_load+0x15c>
 100d00c:	008060f4 	movhi	r2,387
 100d010:	10bb7104 	addi	r2,r2,-4668
 100d014:	10800117 	ldw	r2,4(r2)
 100d018:	10000726 	beq	r2,zero,100d038 <remoteproc_load+0x15c>
 100d01c:	008060f4 	movhi	r2,387
 100d020:	10bb7104 	addi	r2,r2,-4668
 100d024:	10800117 	ldw	r2,4(r2)
 100d028:	014040f4 	movhi	r5,259
 100d02c:	29664b04 	addi	r5,r5,-26324
 100d030:	010000c4 	movi	r4,3
 100d034:	103ee83a 	callr	r2
			  "load failure: loader ops is not set.\r\n");
		metal_mutex_release(&rproc->lock);
 100d038:	e0bffc17 	ldw	r2,-16(fp)
 100d03c:	1009883a 	mov	r4,r2
 100d040:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return -RPROC_EINVAL;
 100d044:	00bfff84 	movi	r2,-2
 100d048:	0002ff06 	br	100dc48 <remoteproc_load+0xd6c>
	}

	/* Open executable to get ready to parse */
	metal_log(METAL_LOG_DEBUG, "%s: open executable image\r\n", __func__);
 100d04c:	008060f4 	movhi	r2,387
 100d050:	10bb7104 	addi	r2,r2,-4668
 100d054:	10800017 	ldw	r2,0(r2)
 100d058:	108001f0 	cmpltui	r2,r2,7
 100d05c:	10000d1e 	bne	r2,zero,100d094 <remoteproc_load+0x1b8>
 100d060:	008060f4 	movhi	r2,387
 100d064:	10bb7104 	addi	r2,r2,-4668
 100d068:	10800117 	ldw	r2,4(r2)
 100d06c:	10000926 	beq	r2,zero,100d094 <remoteproc_load+0x1b8>
 100d070:	008060f4 	movhi	r2,387
 100d074:	10bb7104 	addi	r2,r2,-4668
 100d078:	10800117 	ldw	r2,4(r2)
 100d07c:	018040f4 	movhi	r6,259
 100d080:	31a78f04 	addi	r6,r6,-25028
 100d084:	014040f4 	movhi	r5,259
 100d088:	29665504 	addi	r5,r5,-26284
 100d08c:	010001c4 	movi	r4,7
 100d090:	103ee83a 	callr	r2
	ret = store_ops->open(store, path, &img_data);
 100d094:	e0bfff17 	ldw	r2,-4(fp)
 100d098:	10800017 	ldw	r2,0(r2)
 100d09c:	e0fff004 	addi	r3,fp,-64
 100d0a0:	180d883a 	mov	r6,r3
 100d0a4:	e17ffd17 	ldw	r5,-12(fp)
 100d0a8:	e13ffe17 	ldw	r4,-8(fp)
 100d0ac:	103ee83a 	callr	r2
 100d0b0:	e0bfe815 	stw	r2,-96(fp)
	if (ret <= 0) {
 100d0b4:	e0bfe817 	ldw	r2,-96(fp)
 100d0b8:	00801616 	blt	zero,r2,100d114 <remoteproc_load+0x238>
		metal_log(METAL_LOG_ERROR,
 100d0bc:	008060f4 	movhi	r2,387
 100d0c0:	10bb7104 	addi	r2,r2,-4668
 100d0c4:	10800017 	ldw	r2,0(r2)
 100d0c8:	108000f0 	cmpltui	r2,r2,3
 100d0cc:	10000c1e 	bne	r2,zero,100d100 <remoteproc_load+0x224>
 100d0d0:	008060f4 	movhi	r2,387
 100d0d4:	10bb7104 	addi	r2,r2,-4668
 100d0d8:	10800117 	ldw	r2,4(r2)
 100d0dc:	10000826 	beq	r2,zero,100d100 <remoteproc_load+0x224>
 100d0e0:	008060f4 	movhi	r2,387
 100d0e4:	10bb7104 	addi	r2,r2,-4668
 100d0e8:	10800117 	ldw	r2,4(r2)
 100d0ec:	e1bfe817 	ldw	r6,-96(fp)
 100d0f0:	014040f4 	movhi	r5,259
 100d0f4:	29665c04 	addi	r5,r5,-26256
 100d0f8:	010000c4 	movi	r4,3
 100d0fc:	103ee83a 	callr	r2
			  "load failure: failed to open firmware %d.\r\n",
			  ret);
		metal_mutex_release(&rproc->lock);
 100d100:	e0bffc17 	ldw	r2,-16(fp)
 100d104:	1009883a 	mov	r4,r2
 100d108:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return -RPROC_EINVAL;
 100d10c:	00bfff84 	movi	r2,-2
 100d110:	0002cd06 	br	100dc48 <remoteproc_load+0xd6c>
	}
	len = ret;
 100d114:	e0bfe817 	ldw	r2,-96(fp)
 100d118:	e0bfea15 	stw	r2,-88(fp)
	metal_assert(img_data != NULL);
 100d11c:	e0bff017 	ldw	r2,-64(fp)
 100d120:	1000081e 	bne	r2,zero,100d144 <remoteproc_load+0x268>
 100d124:	01c040f4 	movhi	r7,259
 100d128:	39e66704 	addi	r7,r7,-26212
 100d12c:	018040f4 	movhi	r6,259
 100d130:	31a78f04 	addi	r6,r6,-25028
 100d134:	01406a04 	movi	r5,424
 100d138:	010040f4 	movhi	r4,259
 100d13c:	21266d04 	addi	r4,r4,-26188
 100d140:	10156a00 	call	10156a0 <__assert_func>

	/* Check executable format to select a parser */
	loader = rproc->loader;
 100d144:	e0bffc17 	ldw	r2,-16(fp)
 100d148:	10800b17 	ldw	r2,44(r2)
 100d14c:	e0bfe915 	stw	r2,-92(fp)
	if (!loader) {
 100d150:	e0bfe917 	ldw	r2,-92(fp)
 100d154:	10002f1e 	bne	r2,zero,100d214 <remoteproc_load+0x338>
		metal_log(METAL_LOG_DEBUG, "%s: check loader\r\n", __func__);
 100d158:	008060f4 	movhi	r2,387
 100d15c:	10bb7104 	addi	r2,r2,-4668
 100d160:	10800017 	ldw	r2,0(r2)
 100d164:	108001f0 	cmpltui	r2,r2,7
 100d168:	10000d1e 	bne	r2,zero,100d1a0 <remoteproc_load+0x2c4>
 100d16c:	008060f4 	movhi	r2,387
 100d170:	10bb7104 	addi	r2,r2,-4668
 100d174:	10800117 	ldw	r2,4(r2)
 100d178:	10000926 	beq	r2,zero,100d1a0 <remoteproc_load+0x2c4>
 100d17c:	008060f4 	movhi	r2,387
 100d180:	10bb7104 	addi	r2,r2,-4668
 100d184:	10800117 	ldw	r2,4(r2)
 100d188:	018040f4 	movhi	r6,259
 100d18c:	31a78f04 	addi	r6,r6,-25028
 100d190:	014040f4 	movhi	r5,259
 100d194:	29667604 	addi	r5,r5,-26152
 100d198:	010001c4 	movi	r4,7
 100d19c:	103ee83a 	callr	r2
		loader = remoteproc_check_fw_format(img_data, len);
 100d1a0:	e0bff017 	ldw	r2,-64(fp)
 100d1a4:	e17fea17 	ldw	r5,-88(fp)
 100d1a8:	1009883a 	mov	r4,r2
 100d1ac:	100c2b80 	call	100c2b8 <remoteproc_check_fw_format>
 100d1b0:	e0bfe915 	stw	r2,-92(fp)
		if (!loader) {
 100d1b4:	e0bfe917 	ldw	r2,-92(fp)
 100d1b8:	1000131e 	bne	r2,zero,100d208 <remoteproc_load+0x32c>
			metal_log(METAL_LOG_ERROR,
 100d1bc:	008060f4 	movhi	r2,387
 100d1c0:	10bb7104 	addi	r2,r2,-4668
 100d1c4:	10800017 	ldw	r2,0(r2)
 100d1c8:	108000f0 	cmpltui	r2,r2,3
 100d1cc:	10000b1e 	bne	r2,zero,100d1fc <remoteproc_load+0x320>
 100d1d0:	008060f4 	movhi	r2,387
 100d1d4:	10bb7104 	addi	r2,r2,-4668
 100d1d8:	10800117 	ldw	r2,4(r2)
 100d1dc:	10000726 	beq	r2,zero,100d1fc <remoteproc_load+0x320>
 100d1e0:	008060f4 	movhi	r2,387
 100d1e4:	10bb7104 	addi	r2,r2,-4668
 100d1e8:	10800117 	ldw	r2,4(r2)
 100d1ec:	014040f4 	movhi	r5,259
 100d1f0:	29667b04 	addi	r5,r5,-26132
 100d1f4:	010000c4 	movi	r4,3
 100d1f8:	103ee83a 	callr	r2
			       "load failure: failed to get store ops.\r\n");
			ret = -RPROC_EINVAL;
 100d1fc:	00bfff84 	movi	r2,-2
 100d200:	e0bfe815 	stw	r2,-96(fp)
			goto error1;
 100d204:	00028806 	br	100dc28 <remoteproc_load+0xd4c>
		}
		rproc->loader = loader;
 100d208:	e0bffc17 	ldw	r2,-16(fp)
 100d20c:	e0ffe917 	ldw	r3,-92(fp)
 100d210:	10c00b15 	stw	r3,44(r2)
	}

	/* Load executable headers */
	metal_log(METAL_LOG_DEBUG, "%s: loading headers\r\n", __func__);
 100d214:	008060f4 	movhi	r2,387
 100d218:	10bb7104 	addi	r2,r2,-4668
 100d21c:	10800017 	ldw	r2,0(r2)
 100d220:	108001f0 	cmpltui	r2,r2,7
 100d224:	10000d1e 	bne	r2,zero,100d25c <remoteproc_load+0x380>
 100d228:	008060f4 	movhi	r2,387
 100d22c:	10bb7104 	addi	r2,r2,-4668
 100d230:	10800117 	ldw	r2,4(r2)
 100d234:	10000926 	beq	r2,zero,100d25c <remoteproc_load+0x380>
 100d238:	008060f4 	movhi	r2,387
 100d23c:	10bb7104 	addi	r2,r2,-4668
 100d240:	10800117 	ldw	r2,4(r2)
 100d244:	018040f4 	movhi	r6,259
 100d248:	31a78f04 	addi	r6,r6,-25028
 100d24c:	014040f4 	movhi	r5,259
 100d250:	29668604 	addi	r5,r5,-26088
 100d254:	010001c4 	movi	r4,7
 100d258:	103ee83a 	callr	r2
	offset = 0;
 100d25c:	e03ff215 	stw	zero,-56(fp)
	last_load_state = RPROC_LOADER_NOT_READY;
 100d260:	e03feb15 	stw	zero,-84(fp)
	while(1) {
		ret = loader->load_header(img_data, offset, len,
 100d264:	e0bfe917 	ldw	r2,-92(fp)
 100d268:	10800017 	ldw	r2,0(r2)
 100d26c:	e13ff017 	ldw	r4,-64(fp)
 100d270:	e17ff217 	ldw	r5,-56(fp)
 100d274:	e1bff104 	addi	r6,fp,-60
 100d278:	e0fff404 	addi	r3,fp,-48
 100d27c:	d8c00215 	stw	r3,8(sp)
 100d280:	e0fff304 	addi	r3,fp,-52
 100d284:	d8c00115 	stw	r3,4(sp)
 100d288:	e0ffeb17 	ldw	r3,-84(fp)
 100d28c:	d8c00015 	stw	r3,0(sp)
 100d290:	300f883a 	mov	r7,r6
 100d294:	e1bfea17 	ldw	r6,-88(fp)
 100d298:	103ee83a 	callr	r2
 100d29c:	e0bfe815 	stw	r2,-96(fp)
					  &limg_info, last_load_state,
					  &noffset, &nlen);
		last_load_state = ret;
 100d2a0:	e0bfe817 	ldw	r2,-96(fp)
 100d2a4:	e0bfeb15 	stw	r2,-84(fp)
		metal_log(METAL_LOG_DEBUG,
 100d2a8:	008060f4 	movhi	r2,387
 100d2ac:	10bb7104 	addi	r2,r2,-4668
 100d2b0:	10800017 	ldw	r2,0(r2)
 100d2b4:	108001f0 	cmpltui	r2,r2,7
 100d2b8:	1000151e 	bne	r2,zero,100d310 <remoteproc_load+0x434>
 100d2bc:	008060f4 	movhi	r2,387
 100d2c0:	10bb7104 	addi	r2,r2,-4668
 100d2c4:	10800117 	ldw	r2,4(r2)
 100d2c8:	10001126 	beq	r2,zero,100d310 <remoteproc_load+0x434>
 100d2cc:	008060f4 	movhi	r2,387
 100d2d0:	10bb7104 	addi	r2,r2,-4668
 100d2d4:	10800117 	ldw	r2,4(r2)
 100d2d8:	e17ff217 	ldw	r5,-56(fp)
 100d2dc:	e0fff317 	ldw	r3,-52(fp)
 100d2e0:	e13ff417 	ldw	r4,-48(fp)
 100d2e4:	d9000215 	stw	r4,8(sp)
 100d2e8:	d8c00115 	stw	r3,4(sp)
 100d2ec:	e0ffea17 	ldw	r3,-88(fp)
 100d2f0:	d8c00015 	stw	r3,0(sp)
 100d2f4:	280f883a 	mov	r7,r5
 100d2f8:	018040f4 	movhi	r6,259
 100d2fc:	31a78f04 	addi	r6,r6,-25028
 100d300:	014040f4 	movhi	r5,259
 100d304:	29668c04 	addi	r5,r5,-26064
 100d308:	010001c4 	movi	r4,7
 100d30c:	103ee83a 	callr	r2
			  "%s, load header 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, noffset, nlen);
		if (ret < 0) {
 100d310:	e0bfe817 	ldw	r2,-96(fp)
 100d314:	1000140e 	bge	r2,zero,100d368 <remoteproc_load+0x48c>
			metal_log(METAL_LOG_ERROR,
 100d318:	008060f4 	movhi	r2,387
 100d31c:	10bb7104 	addi	r2,r2,-4668
 100d320:	10800017 	ldw	r2,0(r2)
 100d324:	108000f0 	cmpltui	r2,r2,3
 100d328:	1002371e 	bne	r2,zero,100dc08 <remoteproc_load+0xd2c>
 100d32c:	008060f4 	movhi	r2,387
 100d330:	10bb7104 	addi	r2,r2,-4668
 100d334:	10800117 	ldw	r2,4(r2)
 100d338:	10023326 	beq	r2,zero,100dc08 <remoteproc_load+0xd2c>
 100d33c:	008060f4 	movhi	r2,387
 100d340:	10bb7104 	addi	r2,r2,-4668
 100d344:	10800117 	ldw	r2,4(r2)
 100d348:	e0fff217 	ldw	r3,-56(fp)
 100d34c:	e1ffea17 	ldw	r7,-88(fp)
 100d350:	180d883a 	mov	r6,r3
 100d354:	014040f4 	movhi	r5,259
 100d358:	29669804 	addi	r5,r5,-26016
 100d35c:	010000c4 	movi	r4,3
 100d360:	103ee83a 	callr	r2
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);

			goto error2;
 100d364:	00022806 	br	100dc08 <remoteproc_load+0xd2c>
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
 100d368:	e0bfe817 	ldw	r2,-96(fp)
 100d36c:	1080006c 	andhi	r2,r2,1
 100d370:	10000b26 	beq	r2,zero,100d3a0 <remoteproc_load+0x4c4>
			if (nlen == 0)
 100d374:	e0bff417 	ldw	r2,-48(fp)
 100d378:	10003826 	beq	r2,zero,100d45c <remoteproc_load+0x580>
				break;
			else if ((noffset > (offset + len)) &&
 100d37c:	e0fff217 	ldw	r3,-56(fp)
 100d380:	e0bfea17 	ldw	r2,-88(fp)
 100d384:	1887883a 	add	r3,r3,r2
 100d388:	e0bff317 	ldw	r2,-52(fp)
 100d38c:	1880042e 	bgeu	r3,r2,100d3a0 <remoteproc_load+0x4c4>
				 (store_ops->features & SUPPORT_SEEK) == 0) {
 100d390:	e0bfff17 	ldw	r2,-4(fp)
 100d394:	10800317 	ldw	r2,12(r2)
 100d398:	1080004c 	andi	r2,r2,1

			goto error2;
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
			if (nlen == 0)
				break;
			else if ((noffset > (offset + len)) &&
 100d39c:	10003126 	beq	r2,zero,100d464 <remoteproc_load+0x588>
				 */
				break;
			}
		}
		/* Continue to load headers image data */
		img_data = NULL;
 100d3a0:	e03ff015 	stw	zero,-64(fp)
		ret = store_ops->load(store, noffset, nlen,
 100d3a4:	e0bfff17 	ldw	r2,-4(fp)
 100d3a8:	10800217 	ldw	r2,8(r2)
 100d3ac:	e13ff317 	ldw	r4,-52(fp)
 100d3b0:	e17ff417 	ldw	r5,-48(fp)
 100d3b4:	e1bff004 	addi	r6,fp,-64
 100d3b8:	00c00044 	movi	r3,1
 100d3bc:	d8c00215 	stw	r3,8(sp)
 100d3c0:	d8000115 	stw	zero,4(sp)
 100d3c4:	00ffffc4 	movi	r3,-1
 100d3c8:	d8c00015 	stw	r3,0(sp)
 100d3cc:	300f883a 	mov	r7,r6
 100d3d0:	280d883a 	mov	r6,r5
 100d3d4:	200b883a 	mov	r5,r4
 100d3d8:	e13ffe17 	ldw	r4,-8(fp)
 100d3dc:	103ee83a 	callr	r2
 100d3e0:	e0bfe815 	stw	r2,-96(fp)
				      &img_data,
				      RPROC_LOAD_ANYADDR,
				      NULL, 1);
		if (ret < (int)nlen) {
 100d3e4:	e0bff417 	ldw	r2,-48(fp)
 100d3e8:	1007883a 	mov	r3,r2
 100d3ec:	e0bfe817 	ldw	r2,-96(fp)
 100d3f0:	10c0150e 	bge	r2,r3,100d448 <remoteproc_load+0x56c>
			metal_log(METAL_LOG_ERROR,
 100d3f4:	008060f4 	movhi	r2,387
 100d3f8:	10bb7104 	addi	r2,r2,-4668
 100d3fc:	10800017 	ldw	r2,0(r2)
 100d400:	108000f0 	cmpltui	r2,r2,3
 100d404:	1002021e 	bne	r2,zero,100dc10 <remoteproc_load+0xd34>
 100d408:	008060f4 	movhi	r2,387
 100d40c:	10bb7104 	addi	r2,r2,-4668
 100d410:	10800117 	ldw	r2,4(r2)
 100d414:	1001fe26 	beq	r2,zero,100dc10 <remoteproc_load+0xd34>
 100d418:	008060f4 	movhi	r2,387
 100d41c:	10bb7104 	addi	r2,r2,-4668
 100d420:	10800117 	ldw	r2,4(r2)
 100d424:	e0fff317 	ldw	r3,-52(fp)
 100d428:	e13ff417 	ldw	r4,-48(fp)
 100d42c:	200f883a 	mov	r7,r4
 100d430:	180d883a 	mov	r6,r3
 100d434:	014040f4 	movhi	r5,259
 100d438:	2966a004 	addi	r5,r5,-25984
 100d43c:	010000c4 	movi	r4,3
 100d440:	103ee83a 	callr	r2
				  "load image data failed 0x%x,%d\r\n",
				  noffset, nlen);
			goto error2;
 100d444:	0001f206 	br	100dc10 <remoteproc_load+0xd34>
		}
		offset = noffset;
 100d448:	e0bff317 	ldw	r2,-52(fp)
 100d44c:	e0bff215 	stw	r2,-56(fp)
		len = nlen;
 100d450:	e0bff417 	ldw	r2,-48(fp)
 100d454:	e0bfea15 	stw	r2,-88(fp)
	}
 100d458:	003f8206 	br	100d264 <__alt_data_end+0xff00d264>
				  offset, len);

			goto error2;
		} else if ((ret & RPROC_LOADER_READY_TO_LOAD) != 0) {
			if (nlen == 0)
				break;
 100d45c:	0001883a 	nop
 100d460:	00000106 	br	100d468 <remoteproc_load+0x58c>
				 * headers such as ELF section headers which
				 * is usually located to the end of image.
				 * Continue to load binary data to target
				 * memory.
				 */
				break;
 100d464:	0001883a 	nop
			goto error2;
		}
		offset = noffset;
		len = nlen;
	}
	ret = loader->locate_rsc_table(limg_info, &rsc_da, &offset, &rsc_size);
 100d468:	e0bfe917 	ldw	r2,-92(fp)
 100d46c:	10800217 	ldw	r2,8(r2)
 100d470:	e0fff117 	ldw	r3,-60(fp)
 100d474:	e1bff704 	addi	r6,fp,-36
 100d478:	e17ff204 	addi	r5,fp,-56
 100d47c:	e13ff604 	addi	r4,fp,-40
 100d480:	300f883a 	mov	r7,r6
 100d484:	280d883a 	mov	r6,r5
 100d488:	200b883a 	mov	r5,r4
 100d48c:	1809883a 	mov	r4,r3
 100d490:	103ee83a 	callr	r2
 100d494:	e0bfe815 	stw	r2,-96(fp)
	if (ret == 0 && rsc_size > 0) {
 100d498:	e0bfe817 	ldw	r2,-96(fp)
 100d49c:	10000b1e 	bne	r2,zero,100d4cc <remoteproc_load+0x5f0>
 100d4a0:	e0bff717 	ldw	r2,-36(fp)
 100d4a4:	10000926 	beq	r2,zero,100d4cc <remoteproc_load+0x5f0>
		/* parse resource table */
		rsc_table = remoteproc_get_rsc_table(rproc, store, store_ops,
 100d4a8:	e0fff217 	ldw	r3,-56(fp)
 100d4ac:	e0bff717 	ldw	r2,-36(fp)
 100d4b0:	d8800015 	stw	r2,0(sp)
 100d4b4:	180f883a 	mov	r7,r3
 100d4b8:	e1bfff17 	ldw	r6,-4(fp)
 100d4bc:	e17ffe17 	ldw	r5,-8(fp)
 100d4c0:	e13ffc17 	ldw	r4,-16(fp)
 100d4c4:	100c51c0 	call	100c51c <remoteproc_get_rsc_table>
 100d4c8:	e0bfec15 	stw	r2,-80(fp)
						     offset, rsc_size);
	}

	/* load executable data */
	metal_log(METAL_LOG_DEBUG, "%s: load executable data\r\n", __func__);
 100d4cc:	008060f4 	movhi	r2,387
 100d4d0:	10bb7104 	addi	r2,r2,-4668
 100d4d4:	10800017 	ldw	r2,0(r2)
 100d4d8:	108001f0 	cmpltui	r2,r2,7
 100d4dc:	10000d1e 	bne	r2,zero,100d514 <remoteproc_load+0x638>
 100d4e0:	008060f4 	movhi	r2,387
 100d4e4:	10bb7104 	addi	r2,r2,-4668
 100d4e8:	10800117 	ldw	r2,4(r2)
 100d4ec:	10000926 	beq	r2,zero,100d514 <remoteproc_load+0x638>
 100d4f0:	008060f4 	movhi	r2,387
 100d4f4:	10bb7104 	addi	r2,r2,-4668
 100d4f8:	10800117 	ldw	r2,4(r2)
 100d4fc:	018040f4 	movhi	r6,259
 100d500:	31a78f04 	addi	r6,r6,-25028
 100d504:	014040f4 	movhi	r5,259
 100d508:	2966a904 	addi	r5,r5,-25948
 100d50c:	010001c4 	movi	r4,7
 100d510:	103ee83a 	callr	r2
	offset = 0;
 100d514:	e03ff215 	stw	zero,-56(fp)
	len = 0;
 100d518:	e03fea15 	stw	zero,-88(fp)
	ret = -RPROC_EINVAL;
 100d51c:	00bfff84 	movi	r2,-2
 100d520:	e0bfe815 	stw	r2,-96(fp)
	while(1) {
		unsigned char padding;
		size_t nmemsize;
		metal_phys_addr_t pa;

		da = RPROC_LOAD_ANYADDR;
 100d524:	00bfffc4 	movi	r2,-1
 100d528:	e0bff515 	stw	r2,-44(fp)
		nlen = 0;
 100d52c:	e03ff415 	stw	zero,-48(fp)
		nmemsize = 0;
 100d530:	e03ffa15 	stw	zero,-24(fp)
		noffset = 0;
 100d534:	e03ff315 	stw	zero,-52(fp)
		ret = loader->load_data(rproc, img_data, offset, len,
 100d538:	e0bfe917 	ldw	r2,-92(fp)
 100d53c:	10800117 	ldw	r2,4(r2)
 100d540:	e13ff017 	ldw	r4,-64(fp)
 100d544:	e17ff217 	ldw	r5,-56(fp)
 100d548:	e0fffa04 	addi	r3,fp,-24
 100d54c:	d8c00615 	stw	r3,24(sp)
 100d550:	e0fff904 	addi	r3,fp,-28
 100d554:	d8c00515 	stw	r3,20(sp)
 100d558:	e0fff404 	addi	r3,fp,-48
 100d55c:	d8c00415 	stw	r3,16(sp)
 100d560:	e0fff304 	addi	r3,fp,-52
 100d564:	d8c00315 	stw	r3,12(sp)
 100d568:	e0fff504 	addi	r3,fp,-44
 100d56c:	d8c00215 	stw	r3,8(sp)
 100d570:	e0ffeb17 	ldw	r3,-84(fp)
 100d574:	d8c00115 	stw	r3,4(sp)
 100d578:	e0fff104 	addi	r3,fp,-60
 100d57c:	d8c00015 	stw	r3,0(sp)
 100d580:	e1ffea17 	ldw	r7,-88(fp)
 100d584:	280d883a 	mov	r6,r5
 100d588:	200b883a 	mov	r5,r4
 100d58c:	e13ffc17 	ldw	r4,-16(fp)
 100d590:	103ee83a 	callr	r2
 100d594:	e0bfe815 	stw	r2,-96(fp)
					&limg_info, last_load_state, &da,
					&noffset, &nlen, &padding, &nmemsize);
		if (ret < 0) {
 100d598:	e0bfe817 	ldw	r2,-96(fp)
 100d59c:	1000150e 	bge	r2,zero,100d5f4 <remoteproc_load+0x718>
			metal_log(METAL_LOG_ERROR,
 100d5a0:	008060f4 	movhi	r2,387
 100d5a4:	10bb7104 	addi	r2,r2,-4668
 100d5a8:	10800017 	ldw	r2,0(r2)
 100d5ac:	108000f0 	cmpltui	r2,r2,3
 100d5b0:	10018d1e 	bne	r2,zero,100dbe8 <remoteproc_load+0xd0c>
 100d5b4:	008060f4 	movhi	r2,387
 100d5b8:	10bb7104 	addi	r2,r2,-4668
 100d5bc:	10800117 	ldw	r2,4(r2)
 100d5c0:	10018926 	beq	r2,zero,100dbe8 <remoteproc_load+0xd0c>
 100d5c4:	008060f4 	movhi	r2,387
 100d5c8:	10bb7104 	addi	r2,r2,-4668
 100d5cc:	10800117 	ldw	r2,4(r2)
 100d5d0:	e0fff317 	ldw	r3,-52(fp)
 100d5d4:	e13ff417 	ldw	r4,-48(fp)
 100d5d8:	200f883a 	mov	r7,r4
 100d5dc:	180d883a 	mov	r6,r3
 100d5e0:	014040f4 	movhi	r5,259
 100d5e4:	2966b004 	addi	r5,r5,-25920
 100d5e8:	010000c4 	movi	r4,3
 100d5ec:	103ee83a 	callr	r2
				  "load data failed,0x%lx,%d\r\n",
				  noffset, nlen);
			goto error3;
 100d5f0:	00017d06 	br	100dbe8 <remoteproc_load+0xd0c>
		}
		metal_log(METAL_LOG_DEBUG,
 100d5f4:	008060f4 	movhi	r2,387
 100d5f8:	10bb7104 	addi	r2,r2,-4668
 100d5fc:	10800017 	ldw	r2,0(r2)
 100d600:	108001f0 	cmpltui	r2,r2,7
 100d604:	1000131e 	bne	r2,zero,100d654 <remoteproc_load+0x778>
 100d608:	008060f4 	movhi	r2,387
 100d60c:	10bb7104 	addi	r2,r2,-4668
 100d610:	10800117 	ldw	r2,4(r2)
 100d614:	10000f26 	beq	r2,zero,100d654 <remoteproc_load+0x778>
 100d618:	008060f4 	movhi	r2,387
 100d61c:	10bb7104 	addi	r2,r2,-4668
 100d620:	10800117 	ldw	r2,4(r2)
 100d624:	e1bff517 	ldw	r6,-44(fp)
 100d628:	e1fff317 	ldw	r7,-52(fp)
 100d62c:	e0fff417 	ldw	r3,-48(fp)
 100d630:	e13ffa17 	ldw	r4,-24(fp)
 100d634:	e17fe817 	ldw	r5,-96(fp)
 100d638:	d9400215 	stw	r5,8(sp)
 100d63c:	d9000115 	stw	r4,4(sp)
 100d640:	d8c00015 	stw	r3,0(sp)
 100d644:	014040f4 	movhi	r5,259
 100d648:	2966b704 	addi	r5,r5,-25892
 100d64c:	010001c4 	movi	r4,7
 100d650:	103ee83a 	callr	r2
			  "load data: da 0x%lx, offset 0x%lx, len = 0x%lx, memsize = 0x%lx, state 0x%x\r\n",
			  da, noffset, nlen, nmemsize, ret);
		last_load_state = ret;
 100d654:	e0bfe817 	ldw	r2,-96(fp)
 100d658:	e0bfeb15 	stw	r2,-84(fp)
		if (da != RPROC_LOAD_ANYADDR) {
 100d65c:	e0bff517 	ldw	r2,-44(fp)
 100d660:	10bfffe0 	cmpeqi	r2,r2,-1
 100d664:	10006b1e 	bne	r2,zero,100d814 <remoteproc_load+0x938>
			/* Data is supposed to be loaded to target memory */
			img_data = NULL;
 100d668:	e03ff015 	stw	zero,-64(fp)
			/* get the I/O region from remoteproc */
			pa = METAL_BAD_PHYS;
 100d66c:	00bfffc4 	movi	r2,-1
 100d670:	e0bffb15 	stw	r2,-20(fp)
			(void)remoteproc_mmap(rproc, &pa, &da, nmemsize, 0, &io);
 100d674:	e17ffa17 	ldw	r5,-24(fp)
 100d678:	e13ff504 	addi	r4,fp,-44
 100d67c:	e0fffb04 	addi	r3,fp,-20
 100d680:	e0bff804 	addi	r2,fp,-32
 100d684:	d8800115 	stw	r2,4(sp)
 100d688:	d8000015 	stw	zero,0(sp)
 100d68c:	280f883a 	mov	r7,r5
 100d690:	200d883a 	mov	r6,r4
 100d694:	180b883a 	mov	r5,r3
 100d698:	e13ffc17 	ldw	r4,-16(fp)
 100d69c:	100cd140 	call	100cd14 <remoteproc_mmap>
			if (pa == METAL_BAD_PHYS || io == NULL) {
 100d6a0:	e0bffb17 	ldw	r2,-20(fp)
 100d6a4:	10bfffe0 	cmpeqi	r2,r2,-1
 100d6a8:	1000021e 	bne	r2,zero,100d6b4 <remoteproc_load+0x7d8>
 100d6ac:	e0bff817 	ldw	r2,-32(fp)
 100d6b0:	1000151e 	bne	r2,zero,100d708 <remoteproc_load+0x82c>
				metal_log(METAL_LOG_ERROR,
 100d6b4:	008060f4 	movhi	r2,387
 100d6b8:	10bb7104 	addi	r2,r2,-4668
 100d6bc:	10800017 	ldw	r2,0(r2)
 100d6c0:	108000f0 	cmpltui	r2,r2,3
 100d6c4:	10000d1e 	bne	r2,zero,100d6fc <remoteproc_load+0x820>
 100d6c8:	008060f4 	movhi	r2,387
 100d6cc:	10bb7104 	addi	r2,r2,-4668
 100d6d0:	10800117 	ldw	r2,4(r2)
 100d6d4:	10000926 	beq	r2,zero,100d6fc <remoteproc_load+0x820>
 100d6d8:	008060f4 	movhi	r2,387
 100d6dc:	10bb7104 	addi	r2,r2,-4668
 100d6e0:	10800117 	ldw	r2,4(r2)
 100d6e4:	e0fff517 	ldw	r3,-44(fp)
 100d6e8:	180d883a 	mov	r6,r3
 100d6ec:	014040f4 	movhi	r5,259
 100d6f0:	2966cb04 	addi	r5,r5,-25812
 100d6f4:	010000c4 	movi	r4,3
 100d6f8:	103ee83a 	callr	r2
					  "load failed, no mapping for 0x%llx.\r\n",
					  da);
				ret = -RPROC_EINVAL;
 100d6fc:	00bfff84 	movi	r2,-2
 100d700:	e0bfe815 	stw	r2,-96(fp)
				goto error3;
 100d704:	00013b06 	br	100dbf4 <remoteproc_load+0xd18>
			}
			if (nlen > 0) {
 100d708:	e0bff417 	ldw	r2,-48(fp)
 100d70c:	10002c26 	beq	r2,zero,100d7c0 <remoteproc_load+0x8e4>
				ret = store_ops->load(store, noffset, nlen,
 100d710:	e0bfff17 	ldw	r2,-4(fp)
 100d714:	10800217 	ldw	r2,8(r2)
 100d718:	e23ff317 	ldw	r8,-52(fp)
 100d71c:	e1bff417 	ldw	r6,-48(fp)
 100d720:	e0fffb17 	ldw	r3,-20(fp)
 100d724:	e13ff817 	ldw	r4,-32(fp)
 100d728:	e1fff004 	addi	r7,fp,-64
 100d72c:	01400044 	movi	r5,1
 100d730:	d9400215 	stw	r5,8(sp)
 100d734:	d9000115 	stw	r4,4(sp)
 100d738:	d8c00015 	stw	r3,0(sp)
 100d73c:	400b883a 	mov	r5,r8
 100d740:	e13ffe17 	ldw	r4,-8(fp)
 100d744:	103ee83a 	callr	r2
 100d748:	e0bfe815 	stw	r2,-96(fp)
						      &img_data, pa, io, 1);
				if (ret != (int)nlen) {
 100d74c:	e0bff417 	ldw	r2,-48(fp)
 100d750:	1007883a 	mov	r3,r2
 100d754:	e0bfe817 	ldw	r2,-96(fp)
 100d758:	10c01926 	beq	r2,r3,100d7c0 <remoteproc_load+0x8e4>
					metal_log(METAL_LOG_ERROR,
 100d75c:	008060f4 	movhi	r2,387
 100d760:	10bb7104 	addi	r2,r2,-4668
 100d764:	10800017 	ldw	r2,0(r2)
 100d768:	108000f0 	cmpltui	r2,r2,3
 100d76c:	1000111e 	bne	r2,zero,100d7b4 <remoteproc_load+0x8d8>
 100d770:	008060f4 	movhi	r2,387
 100d774:	10bb7104 	addi	r2,r2,-4668
 100d778:	10800117 	ldw	r2,4(r2)
 100d77c:	10000d26 	beq	r2,zero,100d7b4 <remoteproc_load+0x8d8>
 100d780:	008060f4 	movhi	r2,387
 100d784:	10bb7104 	addi	r2,r2,-4668
 100d788:	10800117 	ldw	r2,4(r2)
 100d78c:	e13ffb17 	ldw	r4,-20(fp)
 100d790:	e17ff317 	ldw	r5,-52(fp)
 100d794:	e0fff417 	ldw	r3,-48(fp)
 100d798:	d8c00015 	stw	r3,0(sp)
 100d79c:	280f883a 	mov	r7,r5
 100d7a0:	200d883a 	mov	r6,r4
 100d7a4:	014040f4 	movhi	r5,259
 100d7a8:	2966d504 	addi	r5,r5,-25772
 100d7ac:	010000c4 	movi	r4,3
 100d7b0:	103ee83a 	callr	r2
						  "load data failed 0x%lx, 0x%lx, 0x%x\r\n",
						  pa, noffset, nlen);
					ret = -RPROC_EINVAL;
 100d7b4:	00bfff84 	movi	r2,-2
 100d7b8:	e0bfe815 	stw	r2,-96(fp)
					goto error3;
 100d7bc:	00010d06 	br	100dbf4 <remoteproc_load+0xd18>
				}
			}
			if (nmemsize > nlen) {
 100d7c0:	e0bffa17 	ldw	r2,-24(fp)
 100d7c4:	e0fff417 	ldw	r3,-48(fp)
 100d7c8:	18bf562e 	bgeu	r3,r2,100d524 <__alt_data_end+0xff00d524>
				size_t tmpoffset;

				tmpoffset = metal_io_phys_to_offset(io,
 100d7cc:	e13ff817 	ldw	r4,-32(fp)
 100d7d0:	e0fffb17 	ldw	r3,-20(fp)
 100d7d4:	e0bff417 	ldw	r2,-48(fp)
 100d7d8:	1885883a 	add	r2,r3,r2
 100d7dc:	100b883a 	mov	r5,r2
 100d7e0:	100bf9c0 	call	100bf9c <metal_io_phys_to_offset>
 100d7e4:	e0bfed15 	stw	r2,-76(fp)
								    pa + nlen);
				metal_io_block_set(io, tmpoffset,
 100d7e8:	e13ff817 	ldw	r4,-32(fp)
 100d7ec:	e0bff903 	ldbu	r2,-28(fp)
 100d7f0:	11403fcc 	andi	r5,r2,255
						   padding, (nmemsize - nlen));
 100d7f4:	e0fffa17 	ldw	r3,-24(fp)
 100d7f8:	e0bff417 	ldw	r2,-48(fp)
 100d7fc:	1885c83a 	sub	r2,r3,r2
			if (nmemsize > nlen) {
				size_t tmpoffset;

				tmpoffset = metal_io_phys_to_offset(io,
								    pa + nlen);
				metal_io_block_set(io, tmpoffset,
 100d800:	100f883a 	mov	r7,r2
 100d804:	280d883a 	mov	r6,r5
 100d808:	e17fed17 	ldw	r5,-76(fp)
 100d80c:	100844c0 	call	100844c <metal_io_block_set>
 100d810:	003f4406 	br	100d524 <__alt_data_end+0xff00d524>
						   padding, (nmemsize - nlen));
			}
		} else if (nlen != 0) {
 100d814:	e0bff417 	ldw	r2,-48(fp)
 100d818:	10004326 	beq	r2,zero,100d928 <remoteproc_load+0xa4c>
			ret = store_ops->load(store, noffset, nlen,
 100d81c:	e0bfff17 	ldw	r2,-4(fp)
 100d820:	10800217 	ldw	r2,8(r2)
 100d824:	e13ff317 	ldw	r4,-52(fp)
 100d828:	e17ff417 	ldw	r5,-48(fp)
 100d82c:	e1bff004 	addi	r6,fp,-64
 100d830:	00c00044 	movi	r3,1
 100d834:	d8c00215 	stw	r3,8(sp)
 100d838:	d8000115 	stw	zero,4(sp)
 100d83c:	00ffffc4 	movi	r3,-1
 100d840:	d8c00015 	stw	r3,0(sp)
 100d844:	300f883a 	mov	r7,r6
 100d848:	280d883a 	mov	r6,r5
 100d84c:	200b883a 	mov	r5,r4
 100d850:	e13ffe17 	ldw	r4,-8(fp)
 100d854:	103ee83a 	callr	r2
 100d858:	e0bfe815 	stw	r2,-96(fp)
					      &img_data,
					      RPROC_LOAD_ANYADDR,
					      NULL, 1);
			if (ret < (int)nlen) {
 100d85c:	e0bff417 	ldw	r2,-48(fp)
 100d860:	1007883a 	mov	r3,r2
 100d864:	e0bfe817 	ldw	r2,-96(fp)
 100d868:	10c02a0e 	bge	r2,r3,100d914 <remoteproc_load+0xa38>
				if ((last_load_state &
 100d86c:	e0bfeb17 	ldw	r2,-84(fp)
 100d870:	108000ac 	andhi	r2,r2,2
 100d874:	10001126 	beq	r2,zero,100d8bc <remoteproc_load+0x9e0>
				    RPROC_LOADER_POST_DATA_LOAD) != 0) {
					metal_log(METAL_LOG_WARNING,
 100d878:	008060f4 	movhi	r2,387
 100d87c:	10bb7104 	addi	r2,r2,-4668
 100d880:	10800017 	ldw	r2,0(r2)
 100d884:	10800130 	cmpltui	r2,r2,4
 100d888:	1000291e 	bne	r2,zero,100d930 <remoteproc_load+0xa54>
 100d88c:	008060f4 	movhi	r2,387
 100d890:	10bb7104 	addi	r2,r2,-4668
 100d894:	10800117 	ldw	r2,4(r2)
 100d898:	10002526 	beq	r2,zero,100d930 <remoteproc_load+0xa54>
 100d89c:	008060f4 	movhi	r2,387
 100d8a0:	10bb7104 	addi	r2,r2,-4668
 100d8a4:	10800117 	ldw	r2,4(r2)
 100d8a8:	014040f4 	movhi	r5,259
 100d8ac:	2966df04 	addi	r5,r5,-25732
 100d8b0:	01000104 	movi	r4,4
 100d8b4:	103ee83a 	callr	r2
						  "not all the headers are loaded\r\n");
					break;
 100d8b8:	00001d06 	br	100d930 <remoteproc_load+0xa54>
				}
				metal_log(METAL_LOG_ERROR,
 100d8bc:	008060f4 	movhi	r2,387
 100d8c0:	10bb7104 	addi	r2,r2,-4668
 100d8c4:	10800017 	ldw	r2,0(r2)
 100d8c8:	108000f0 	cmpltui	r2,r2,3
 100d8cc:	1000c81e 	bne	r2,zero,100dbf0 <remoteproc_load+0xd14>
 100d8d0:	008060f4 	movhi	r2,387
 100d8d4:	10bb7104 	addi	r2,r2,-4668
 100d8d8:	10800117 	ldw	r2,4(r2)
 100d8dc:	1000c426 	beq	r2,zero,100dbf0 <remoteproc_load+0xd14>
 100d8e0:	008060f4 	movhi	r2,387
 100d8e4:	10bb7104 	addi	r2,r2,-4668
 100d8e8:	10800117 	ldw	r2,4(r2)
 100d8ec:	e0fff317 	ldw	r3,-52(fp)
 100d8f0:	e13ff417 	ldw	r4,-48(fp)
 100d8f4:	200f883a 	mov	r7,r4
 100d8f8:	180d883a 	mov	r6,r3
 100d8fc:	014040f4 	movhi	r5,259
 100d900:	2966e804 	addi	r5,r5,-25696
 100d904:	010000c4 	movi	r4,3
 100d908:	103ee83a 	callr	r2
					  "post-load image data failed 0x%x,%d\r\n",
					  noffset, nlen);
				goto error3;
 100d90c:	0001883a 	nop
 100d910:	0000b706 	br	100dbf0 <remoteproc_load+0xd14>
			}
			offset = noffset;
 100d914:	e0bff317 	ldw	r2,-52(fp)
 100d918:	e0bff215 	stw	r2,-56(fp)
			len = nlen;
 100d91c:	e0bff417 	ldw	r2,-48(fp)
 100d920:	e0bfea15 	stw	r2,-88(fp)
		} else {
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
		}
	}
 100d924:	003eff06 	br	100d524 <__alt_data_end+0xff00d524>
			}
			offset = noffset;
			len = nlen;
		} else {
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
 100d928:	0001883a 	nop
 100d92c:	00000106 	br	100d934 <remoteproc_load+0xa58>
			if (ret < (int)nlen) {
				if ((last_load_state &
				    RPROC_LOADER_POST_DATA_LOAD) != 0) {
					metal_log(METAL_LOG_WARNING,
						  "not all the headers are loaded\r\n");
					break;
 100d930:	0001883a 	nop
			/* (last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0 */
			break;
		}
	}

	if (rsc_size == 0) {
 100d934:	e0bff717 	ldw	r2,-36(fp)
 100d938:	1000191e 	bne	r2,zero,100d9a0 <remoteproc_load+0xac4>
		ret = loader->locate_rsc_table(limg_info, &rsc_da,
 100d93c:	e0bfe917 	ldw	r2,-92(fp)
 100d940:	10800217 	ldw	r2,8(r2)
 100d944:	e0fff117 	ldw	r3,-60(fp)
 100d948:	e1bff704 	addi	r6,fp,-36
 100d94c:	e17ff204 	addi	r5,fp,-56
 100d950:	e13ff604 	addi	r4,fp,-40
 100d954:	300f883a 	mov	r7,r6
 100d958:	280d883a 	mov	r6,r5
 100d95c:	200b883a 	mov	r5,r4
 100d960:	1809883a 	mov	r4,r3
 100d964:	103ee83a 	callr	r2
 100d968:	e0bfe815 	stw	r2,-96(fp)
					       &offset, &rsc_size);
		if (ret == 0 && rsc_size > 0) {
 100d96c:	e0bfe817 	ldw	r2,-96(fp)
 100d970:	10000b1e 	bne	r2,zero,100d9a0 <remoteproc_load+0xac4>
 100d974:	e0bff717 	ldw	r2,-36(fp)
 100d978:	10000926 	beq	r2,zero,100d9a0 <remoteproc_load+0xac4>
			/* parse resource table */
			rsc_table = remoteproc_get_rsc_table(rproc, store,
 100d97c:	e0fff217 	ldw	r3,-56(fp)
 100d980:	e0bff717 	ldw	r2,-36(fp)
 100d984:	d8800015 	stw	r2,0(sp)
 100d988:	180f883a 	mov	r7,r3
 100d98c:	e1bfff17 	ldw	r6,-4(fp)
 100d990:	e17ffe17 	ldw	r5,-8(fp)
 100d994:	e13ffc17 	ldw	r4,-16(fp)
 100d998:	100c51c0 	call	100c51c <remoteproc_get_rsc_table>
 100d99c:	e0bfec15 	stw	r2,-80(fp)
							     rsc_size);
		}
	}

	/* Update resource table */
	if (rsc_table) {
 100d9a0:	e0bfec17 	ldw	r2,-80(fp)
 100d9a4:	10005f26 	beq	r2,zero,100db24 <remoteproc_load+0xc48>
		void *rsc_table_cp = rsc_table;
 100d9a8:	e0bfec17 	ldw	r2,-80(fp)
 100d9ac:	e0bfee15 	stw	r2,-72(fp)

		metal_log(METAL_LOG_DEBUG,
 100d9b0:	008060f4 	movhi	r2,387
 100d9b4:	10bb7104 	addi	r2,r2,-4668
 100d9b8:	10800017 	ldw	r2,0(r2)
 100d9bc:	108001f0 	cmpltui	r2,r2,7
 100d9c0:	10000d1e 	bne	r2,zero,100d9f8 <remoteproc_load+0xb1c>
 100d9c4:	008060f4 	movhi	r2,387
 100d9c8:	10bb7104 	addi	r2,r2,-4668
 100d9cc:	10800117 	ldw	r2,4(r2)
 100d9d0:	10000926 	beq	r2,zero,100d9f8 <remoteproc_load+0xb1c>
 100d9d4:	008060f4 	movhi	r2,387
 100d9d8:	10bb7104 	addi	r2,r2,-4668
 100d9dc:	10800117 	ldw	r2,4(r2)
 100d9e0:	018040f4 	movhi	r6,259
 100d9e4:	31a78f04 	addi	r6,r6,-25028
 100d9e8:	014040f4 	movhi	r5,259
 100d9ec:	2966f204 	addi	r5,r5,-25656
 100d9f0:	010001c4 	movi	r4,7
 100d9f4:	103ee83a 	callr	r2
			  "%s, update resource table\r\n", __func__);
		rsc_table = remoteproc_mmap(rproc, NULL, &rsc_da,
 100d9f8:	e13ff717 	ldw	r4,-36(fp)
 100d9fc:	e0fff604 	addi	r3,fp,-40
 100da00:	e0bff804 	addi	r2,fp,-32
 100da04:	d8800115 	stw	r2,4(sp)
 100da08:	d8000015 	stw	zero,0(sp)
 100da0c:	200f883a 	mov	r7,r4
 100da10:	180d883a 	mov	r6,r3
 100da14:	000b883a 	mov	r5,zero
 100da18:	e13ffc17 	ldw	r4,-16(fp)
 100da1c:	100cd140 	call	100cd14 <remoteproc_mmap>
 100da20:	e0bfec15 	stw	r2,-80(fp)
					    rsc_size, 0, &io);
		if (rsc_table) {
 100da24:	e0bfec17 	ldw	r2,-80(fp)
 100da28:	10002b26 	beq	r2,zero,100dad8 <remoteproc_load+0xbfc>
			size_t rsc_io_offset;

			/* Update resource table */
			rsc_io_offset = metal_io_virt_to_offset(io, rsc_table);
 100da2c:	e0bff817 	ldw	r2,-32(fp)
 100da30:	e17fec17 	ldw	r5,-80(fp)
 100da34:	1009883a 	mov	r4,r2
 100da38:	100be780 	call	100be78 <metal_io_virt_to_offset>
 100da3c:	e0bfef15 	stw	r2,-68(fp)
			ret = metal_io_block_write(io, rsc_io_offset,
 100da40:	e0bff817 	ldw	r2,-32(fp)
 100da44:	e0fff717 	ldw	r3,-36(fp)
 100da48:	180f883a 	mov	r7,r3
 100da4c:	e1bfee17 	ldw	r6,-72(fp)
 100da50:	e17fef17 	ldw	r5,-68(fp)
 100da54:	1009883a 	mov	r4,r2
 100da58:	100829c0 	call	100829c <metal_io_block_write>
 100da5c:	e0bfe815 	stw	r2,-96(fp)
						   rsc_table_cp, rsc_size);
			if (ret != (int)rsc_size) {
 100da60:	e0bff717 	ldw	r2,-36(fp)
 100da64:	1007883a 	mov	r3,r2
 100da68:	e0bfe817 	ldw	r2,-96(fp)
 100da6c:	10c01026 	beq	r2,r3,100dab0 <remoteproc_load+0xbd4>
				metal_log(METAL_LOG_WARNING,
 100da70:	008060f4 	movhi	r2,387
 100da74:	10bb7104 	addi	r2,r2,-4668
 100da78:	10800017 	ldw	r2,0(r2)
 100da7c:	10800130 	cmpltui	r2,r2,4
 100da80:	10000b1e 	bne	r2,zero,100dab0 <remoteproc_load+0xbd4>
 100da84:	008060f4 	movhi	r2,387
 100da88:	10bb7104 	addi	r2,r2,-4668
 100da8c:	10800117 	ldw	r2,4(r2)
 100da90:	10000726 	beq	r2,zero,100dab0 <remoteproc_load+0xbd4>
 100da94:	008060f4 	movhi	r2,387
 100da98:	10bb7104 	addi	r2,r2,-4668
 100da9c:	10800117 	ldw	r2,4(r2)
 100daa0:	014040f4 	movhi	r5,259
 100daa4:	2966f904 	addi	r5,r5,-25628
 100daa8:	01000104 	movi	r4,4
 100daac:	103ee83a 	callr	r2
					  "load: failed to update rsc\r\n");
			}
			rproc->rsc_table = rsc_table;
 100dab0:	e0bffc17 	ldw	r2,-16(fp)
 100dab4:	e0ffec17 	ldw	r3,-80(fp)
 100dab8:	10c00115 	stw	r3,4(r2)
			rproc->rsc_len = rsc_size;
 100dabc:	e0fff717 	ldw	r3,-36(fp)
 100dac0:	e0bffc17 	ldw	r2,-16(fp)
 100dac4:	10c00215 	stw	r3,8(r2)
			rproc->rsc_io = io;
 100dac8:	e0fff817 	ldw	r3,-32(fp)
 100dacc:	e0bffc17 	ldw	r2,-16(fp)
 100dad0:	10c00315 	stw	r3,12(r2)
 100dad4:	00001006 	br	100db18 <remoteproc_load+0xc3c>
		} else {
			metal_log(METAL_LOG_WARNING,
 100dad8:	008060f4 	movhi	r2,387
 100dadc:	10bb7104 	addi	r2,r2,-4668
 100dae0:	10800017 	ldw	r2,0(r2)
 100dae4:	10800130 	cmpltui	r2,r2,4
 100dae8:	10000b1e 	bne	r2,zero,100db18 <remoteproc_load+0xc3c>
 100daec:	008060f4 	movhi	r2,387
 100daf0:	10bb7104 	addi	r2,r2,-4668
 100daf4:	10800117 	ldw	r2,4(r2)
 100daf8:	10000726 	beq	r2,zero,100db18 <remoteproc_load+0xc3c>
 100dafc:	008060f4 	movhi	r2,387
 100db00:	10bb7104 	addi	r2,r2,-4668
 100db04:	10800117 	ldw	r2,4(r2)
 100db08:	014040f4 	movhi	r5,259
 100db0c:	29670104 	addi	r5,r5,-25596
 100db10:	01000104 	movi	r4,4
 100db14:	103ee83a 	callr	r2
				  "load: not able to update rsc table.\r\n");
		}
		metal_free_memory(rsc_table_cp);
 100db18:	e13fee17 	ldw	r4,-72(fp)
 100db1c:	100bb240 	call	100bb24 <metal_free_memory>
		/* So that the rsc_table will not get released */
		rsc_table = NULL;
 100db20:	e03fec15 	stw	zero,-80(fp)
	}

	metal_log(METAL_LOG_DEBUG, "%s: successfully load firmware\r\n",
 100db24:	008060f4 	movhi	r2,387
 100db28:	10bb7104 	addi	r2,r2,-4668
 100db2c:	10800017 	ldw	r2,0(r2)
 100db30:	108001f0 	cmpltui	r2,r2,7
 100db34:	10000d1e 	bne	r2,zero,100db6c <remoteproc_load+0xc90>
 100db38:	008060f4 	movhi	r2,387
 100db3c:	10bb7104 	addi	r2,r2,-4668
 100db40:	10800117 	ldw	r2,4(r2)
 100db44:	10000926 	beq	r2,zero,100db6c <remoteproc_load+0xc90>
 100db48:	008060f4 	movhi	r2,387
 100db4c:	10bb7104 	addi	r2,r2,-4668
 100db50:	10800117 	ldw	r2,4(r2)
 100db54:	018040f4 	movhi	r6,259
 100db58:	31a78f04 	addi	r6,r6,-25028
 100db5c:	014040f4 	movhi	r5,259
 100db60:	29670b04 	addi	r5,r5,-25556
 100db64:	010001c4 	movi	r4,7
 100db68:	103ee83a 	callr	r2
		  __func__);
	/* get entry point from the firmware */
	rproc->bootaddr = loader->get_entry(limg_info);
 100db6c:	e0bfe917 	ldw	r2,-92(fp)
 100db70:	10800417 	ldw	r2,16(r2)
 100db74:	e0fff117 	ldw	r3,-60(fp)
 100db78:	1809883a 	mov	r4,r3
 100db7c:	103ee83a 	callr	r2
 100db80:	1007883a 	mov	r3,r2
 100db84:	e0bffc17 	ldw	r2,-16(fp)
 100db88:	10c00a15 	stw	r3,40(r2)
	rproc->state = RPROC_READY;
 100db8c:	e0bffc17 	ldw	r2,-16(fp)
 100db90:	00c00084 	movi	r3,2
 100db94:	10c00c15 	stw	r3,48(r2)

	metal_mutex_release(&rproc->lock);
 100db98:	e0bffc17 	ldw	r2,-16(fp)
 100db9c:	1009883a 	mov	r4,r2
 100dba0:	100c1d80 	call	100c1d8 <metal_mutex_release>
	if (img_info)
 100dba4:	e0800217 	ldw	r2,8(fp)
 100dba8:	10000426 	beq	r2,zero,100dbbc <remoteproc_load+0xce0>
		*img_info = limg_info;
 100dbac:	e0fff117 	ldw	r3,-60(fp)
 100dbb0:	e0800217 	ldw	r2,8(fp)
 100dbb4:	10c00015 	stw	r3,0(r2)
 100dbb8:	00000506 	br	100dbd0 <remoteproc_load+0xcf4>
	else
		loader->release(limg_info);
 100dbbc:	e0bfe917 	ldw	r2,-92(fp)
 100dbc0:	10800317 	ldw	r2,12(r2)
 100dbc4:	e0fff117 	ldw	r3,-60(fp)
 100dbc8:	1809883a 	mov	r4,r3
 100dbcc:	103ee83a 	callr	r2
	store_ops->close(store);
 100dbd0:	e0bfff17 	ldw	r2,-4(fp)
 100dbd4:	10800117 	ldw	r2,4(r2)
 100dbd8:	e13ffe17 	ldw	r4,-8(fp)
 100dbdc:	103ee83a 	callr	r2
	return 0;
 100dbe0:	0005883a 	mov	r2,zero
 100dbe4:	00001806 	br	100dc48 <remoteproc_load+0xd6c>
					&noffset, &nlen, &padding, &nmemsize);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load data failed,0x%lx,%d\r\n",
				  noffset, nlen);
			goto error3;
 100dbe8:	0001883a 	nop
 100dbec:	00000106 	br	100dbf4 <remoteproc_load+0xd18>
					break;
				}
				metal_log(METAL_LOG_ERROR,
					  "post-load image data failed 0x%x,%d\r\n",
					  noffset, nlen);
				goto error3;
 100dbf0:	0001883a 	nop
		loader->release(limg_info);
	store_ops->close(store);
	return 0;

error3:
	if (rsc_table)
 100dbf4:	e0bfec17 	ldw	r2,-80(fp)
 100dbf8:	10000626 	beq	r2,zero,100dc14 <remoteproc_load+0xd38>
		metal_free_memory(rsc_table);
 100dbfc:	e13fec17 	ldw	r4,-80(fp)
 100dc00:	100bb240 	call	100bb24 <metal_free_memory>
 100dc04:	00000306 	br	100dc14 <remoteproc_load+0xd38>
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);

			goto error2;
 100dc08:	0001883a 	nop
 100dc0c:	00000106 	br	100dc14 <remoteproc_load+0xd38>
				      NULL, 1);
		if (ret < (int)nlen) {
			metal_log(METAL_LOG_ERROR,
				  "load image data failed 0x%x,%d\r\n",
				  noffset, nlen);
			goto error2;
 100dc10:	0001883a 	nop

error3:
	if (rsc_table)
		metal_free_memory(rsc_table);
error2:
	loader->release(limg_info);
 100dc14:	e0bfe917 	ldw	r2,-92(fp)
 100dc18:	10800317 	ldw	r2,12(r2)
 100dc1c:	e0fff117 	ldw	r3,-60(fp)
 100dc20:	1809883a 	mov	r4,r3
 100dc24:	103ee83a 	callr	r2
error1:
	store_ops->close(store);
 100dc28:	e0bfff17 	ldw	r2,-4(fp)
 100dc2c:	10800117 	ldw	r2,4(r2)
 100dc30:	e13ffe17 	ldw	r4,-8(fp)
 100dc34:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100dc38:	e0bffc17 	ldw	r2,-16(fp)
 100dc3c:	1009883a 	mov	r4,r2
 100dc40:	100c1d80 	call	100c1d8 <metal_mutex_release>
	return ret;
 100dc44:	e0bfe817 	ldw	r2,-96(fp)
}
 100dc48:	e037883a 	mov	sp,fp
 100dc4c:	dfc00117 	ldw	ra,4(sp)
 100dc50:	df000017 	ldw	fp,0(sp)
 100dc54:	dec00204 	addi	sp,sp,8
 100dc58:	f800283a 	ret

0100dc5c <remoteproc_load_noblock>:
			    const void *img_data, size_t offset, size_t len,
			    void **img_info,
			    metal_phys_addr_t *pa, struct metal_io_region **io,
			    size_t *noffset, size_t *nlen,
			    size_t *nmlen, unsigned char *padding)
{
 100dc5c:	deffe804 	addi	sp,sp,-96
 100dc60:	dfc01715 	stw	ra,92(sp)
 100dc64:	df001615 	stw	fp,88(sp)
 100dc68:	df001604 	addi	fp,sp,88
 100dc6c:	e13ffc15 	stw	r4,-16(fp)
 100dc70:	e17ffd15 	stw	r5,-12(fp)
 100dc74:	e1bffe15 	stw	r6,-8(fp)
 100dc78:	e1ffff15 	stw	r7,-4(fp)
	int ret;
	struct loader_ops *loader;
	void *limg_info = NULL;
 100dc7c:	e03ff715 	stw	zero,-36(fp)
	int last_load_state;
	metal_phys_addr_t da, rsc_da;
	size_t rsc_size;
	void *rsc_table = NULL, *lrsc_table = NULL;
 100dc80:	e03ff415 	stw	zero,-48(fp)
 100dc84:	e03ff515 	stw	zero,-44(fp)

	if (!rproc)
 100dc88:	e0bffc17 	ldw	r2,-16(fp)
 100dc8c:	1000021e 	bne	r2,zero,100dc98 <remoteproc_load_noblock+0x3c>
		return -RPROC_ENODEV;
 100dc90:	00bfff44 	movi	r2,-3
 100dc94:	00028006 	br	100e698 <remoteproc_load_noblock+0xa3c>

	metal_assert(pa != NULL);
 100dc98:	e0800317 	ldw	r2,12(fp)
 100dc9c:	1000081e 	bne	r2,zero,100dcc0 <remoteproc_load_noblock+0x64>
 100dca0:	01c040f4 	movhi	r7,259
 100dca4:	39e71404 	addi	r7,r7,-25520
 100dca8:	018040f4 	movhi	r6,259
 100dcac:	31a79304 	addi	r6,r6,-25012
 100dcb0:	0140a644 	movi	r5,665
 100dcb4:	010040f4 	movhi	r4,259
 100dcb8:	21266d04 	addi	r4,r4,-26188
 100dcbc:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(io != NULL);
 100dcc0:	e0800417 	ldw	r2,16(fp)
 100dcc4:	1000081e 	bne	r2,zero,100dce8 <remoteproc_load_noblock+0x8c>
 100dcc8:	01c040f4 	movhi	r7,259
 100dccc:	39e71904 	addi	r7,r7,-25500
 100dcd0:	018040f4 	movhi	r6,259
 100dcd4:	31a79304 	addi	r6,r6,-25012
 100dcd8:	0140a684 	movi	r5,666
 100dcdc:	010040f4 	movhi	r4,259
 100dce0:	21266d04 	addi	r4,r4,-26188
 100dce4:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(noffset != NULL);
 100dce8:	e0800517 	ldw	r2,20(fp)
 100dcec:	1000081e 	bne	r2,zero,100dd10 <remoteproc_load_noblock+0xb4>
 100dcf0:	01c040f4 	movhi	r7,259
 100dcf4:	39e71e04 	addi	r7,r7,-25480
 100dcf8:	018040f4 	movhi	r6,259
 100dcfc:	31a79304 	addi	r6,r6,-25012
 100dd00:	0140a6c4 	movi	r5,667
 100dd04:	010040f4 	movhi	r4,259
 100dd08:	21266d04 	addi	r4,r4,-26188
 100dd0c:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(nlen != NULL);
 100dd10:	e0800617 	ldw	r2,24(fp)
 100dd14:	1000081e 	bne	r2,zero,100dd38 <remoteproc_load_noblock+0xdc>
 100dd18:	01c040f4 	movhi	r7,259
 100dd1c:	39e72404 	addi	r7,r7,-25456
 100dd20:	018040f4 	movhi	r6,259
 100dd24:	31a79304 	addi	r6,r6,-25012
 100dd28:	0140a704 	movi	r5,668
 100dd2c:	010040f4 	movhi	r4,259
 100dd30:	21266d04 	addi	r4,r4,-26188
 100dd34:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(nmlen != NULL);
 100dd38:	e0800717 	ldw	r2,28(fp)
 100dd3c:	1000081e 	bne	r2,zero,100dd60 <remoteproc_load_noblock+0x104>
 100dd40:	01c040f4 	movhi	r7,259
 100dd44:	39e72904 	addi	r7,r7,-25436
 100dd48:	018040f4 	movhi	r6,259
 100dd4c:	31a79304 	addi	r6,r6,-25012
 100dd50:	0140a744 	movi	r5,669
 100dd54:	010040f4 	movhi	r4,259
 100dd58:	21266d04 	addi	r4,r4,-26188
 100dd5c:	10156a00 	call	10156a0 <__assert_func>
	metal_assert(padding != NULL);
 100dd60:	e0800817 	ldw	r2,32(fp)
 100dd64:	1000081e 	bne	r2,zero,100dd88 <remoteproc_load_noblock+0x12c>
 100dd68:	01c040f4 	movhi	r7,259
 100dd6c:	39e72f04 	addi	r7,r7,-25412
 100dd70:	018040f4 	movhi	r6,259
 100dd74:	31a79304 	addi	r6,r6,-25012
 100dd78:	0140a784 	movi	r5,670
 100dd7c:	010040f4 	movhi	r4,259
 100dd80:	21266d04 	addi	r4,r4,-26188
 100dd84:	10156a00 	call	10156a0 <__assert_func>

	metal_mutex_acquire(&rproc->lock);
 100dd88:	e0bffc17 	ldw	r2,-16(fp)
 100dd8c:	1009883a 	mov	r4,r2
 100dd90:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
	metal_log(METAL_LOG_DEBUG, "%s: check remoteproc status\r\n", __func__);
 100dd94:	008060f4 	movhi	r2,387
 100dd98:	10bb7104 	addi	r2,r2,-4668
 100dd9c:	10800017 	ldw	r2,0(r2)
 100dda0:	108001f0 	cmpltui	r2,r2,7
 100dda4:	10000d1e 	bne	r2,zero,100dddc <remoteproc_load_noblock+0x180>
 100dda8:	008060f4 	movhi	r2,387
 100ddac:	10bb7104 	addi	r2,r2,-4668
 100ddb0:	10800117 	ldw	r2,4(r2)
 100ddb4:	10000926 	beq	r2,zero,100dddc <remoteproc_load_noblock+0x180>
 100ddb8:	008060f4 	movhi	r2,387
 100ddbc:	10bb7104 	addi	r2,r2,-4668
 100ddc0:	10800117 	ldw	r2,4(r2)
 100ddc4:	018040f4 	movhi	r6,259
 100ddc8:	31a79304 	addi	r6,r6,-25012
 100ddcc:	014040f4 	movhi	r5,259
 100ddd0:	29663904 	addi	r5,r5,-26396
 100ddd4:	010001c4 	movi	r4,7
 100ddd8:	103ee83a 	callr	r2
	/* If remoteproc is not in ready state, cannot load executable */
	if (rproc->state != RPROC_READY) {
 100dddc:	e0bffc17 	ldw	r2,-16(fp)
 100dde0:	10800c17 	ldw	r2,48(r2)
 100dde4:	108000a0 	cmpeqi	r2,r2,2
 100dde8:	1000181e 	bne	r2,zero,100de4c <remoteproc_load_noblock+0x1f0>
		metal_log(METAL_LOG_ERROR,
 100ddec:	008060f4 	movhi	r2,387
 100ddf0:	10bb7104 	addi	r2,r2,-4668
 100ddf4:	10800017 	ldw	r2,0(r2)
 100ddf8:	108000f0 	cmpltui	r2,r2,3
 100ddfc:	10000e1e 	bne	r2,zero,100de38 <remoteproc_load_noblock+0x1dc>
 100de00:	008060f4 	movhi	r2,387
 100de04:	10bb7104 	addi	r2,r2,-4668
 100de08:	10800117 	ldw	r2,4(r2)
 100de0c:	10000a26 	beq	r2,zero,100de38 <remoteproc_load_noblock+0x1dc>
 100de10:	008060f4 	movhi	r2,387
 100de14:	10bb7104 	addi	r2,r2,-4668
 100de18:	10800117 	ldw	r2,4(r2)
 100de1c:	e0fffc17 	ldw	r3,-16(fp)
 100de20:	18c00c17 	ldw	r3,48(r3)
 100de24:	180d883a 	mov	r6,r3
 100de28:	014040f4 	movhi	r5,259
 100de2c:	29664104 	addi	r5,r5,-26364
 100de30:	010000c4 	movi	r4,3
 100de34:	103ee83a 	callr	r2
			  "load failure: invalid rproc state %d.\r\n",
			  rproc->state);
		metal_mutex_release(&rproc->lock);
 100de38:	e0bffc17 	ldw	r2,-16(fp)
 100de3c:	1009883a 	mov	r4,r2
 100de40:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return -RPROC_EINVAL;
 100de44:	00bfff84 	movi	r2,-2
 100de48:	00021306 	br	100e698 <remoteproc_load_noblock+0xa3c>
	}

	/* Check executable format to select a parser */
	loader = rproc->loader;
 100de4c:	e0bffc17 	ldw	r2,-16(fp)
 100de50:	10800b17 	ldw	r2,44(r2)
 100de54:	e0bff215 	stw	r2,-56(fp)
	if (!loader) {
 100de58:	e0bff217 	ldw	r2,-56(fp)
 100de5c:	10004d1e 	bne	r2,zero,100df94 <remoteproc_load_noblock+0x338>
		metal_log(METAL_LOG_DEBUG, "%s: check loader\r\n", __func__);
 100de60:	008060f4 	movhi	r2,387
 100de64:	10bb7104 	addi	r2,r2,-4668
 100de68:	10800017 	ldw	r2,0(r2)
 100de6c:	108001f0 	cmpltui	r2,r2,7
 100de70:	10000d1e 	bne	r2,zero,100dea8 <remoteproc_load_noblock+0x24c>
 100de74:	008060f4 	movhi	r2,387
 100de78:	10bb7104 	addi	r2,r2,-4668
 100de7c:	10800117 	ldw	r2,4(r2)
 100de80:	10000926 	beq	r2,zero,100dea8 <remoteproc_load_noblock+0x24c>
 100de84:	008060f4 	movhi	r2,387
 100de88:	10bb7104 	addi	r2,r2,-4668
 100de8c:	10800117 	ldw	r2,4(r2)
 100de90:	018040f4 	movhi	r6,259
 100de94:	31a79304 	addi	r6,r6,-25012
 100de98:	014040f4 	movhi	r5,259
 100de9c:	29667604 	addi	r5,r5,-26152
 100dea0:	010001c4 	movi	r4,7
 100dea4:	103ee83a 	callr	r2
		if (img_data == NULL || offset != 0 || len == 0) {
 100dea8:	e0bffd17 	ldw	r2,-12(fp)
 100deac:	10000426 	beq	r2,zero,100dec0 <remoteproc_load_noblock+0x264>
 100deb0:	e0bffe17 	ldw	r2,-8(fp)
 100deb4:	1000021e 	bne	r2,zero,100dec0 <remoteproc_load_noblock+0x264>
 100deb8:	e0bfff17 	ldw	r2,-4(fp)
 100debc:	1000151e 	bne	r2,zero,100df14 <remoteproc_load_noblock+0x2b8>
			metal_log(METAL_LOG_ERROR,
 100dec0:	008060f4 	movhi	r2,387
 100dec4:	10bb7104 	addi	r2,r2,-4668
 100dec8:	10800017 	ldw	r2,0(r2)
 100decc:	108000f0 	cmpltui	r2,r2,3
 100ded0:	10000b1e 	bne	r2,zero,100df00 <remoteproc_load_noblock+0x2a4>
 100ded4:	008060f4 	movhi	r2,387
 100ded8:	10bb7104 	addi	r2,r2,-4668
 100dedc:	10800117 	ldw	r2,4(r2)
 100dee0:	10000726 	beq	r2,zero,100df00 <remoteproc_load_noblock+0x2a4>
 100dee4:	008060f4 	movhi	r2,387
 100dee8:	10bb7104 	addi	r2,r2,-4668
 100deec:	10800117 	ldw	r2,4(r2)
 100def0:	014040f4 	movhi	r5,259
 100def4:	29673504 	addi	r5,r5,-25388
 100def8:	010000c4 	movi	r4,3
 100defc:	103ee83a 	callr	r2
				  "load failure, invalid inputs, not able to identify image.\r\n");
			metal_mutex_release(&rproc->lock);
 100df00:	e0bffc17 	ldw	r2,-16(fp)
 100df04:	1009883a 	mov	r4,r2
 100df08:	100c1d80 	call	100c1d8 <metal_mutex_release>
			return -RPROC_EINVAL;
 100df0c:	00bfff84 	movi	r2,-2
 100df10:	0001e106 	br	100e698 <remoteproc_load_noblock+0xa3c>
		}
		loader = remoteproc_check_fw_format(img_data, len);
 100df14:	e17fff17 	ldw	r5,-4(fp)
 100df18:	e13ffd17 	ldw	r4,-12(fp)
 100df1c:	100c2b80 	call	100c2b8 <remoteproc_check_fw_format>
 100df20:	e0bff215 	stw	r2,-56(fp)
		if (!loader) {
 100df24:	e0bff217 	ldw	r2,-56(fp)
 100df28:	1000171e 	bne	r2,zero,100df88 <remoteproc_load_noblock+0x32c>
			metal_log(METAL_LOG_ERROR,
 100df2c:	008060f4 	movhi	r2,387
 100df30:	10bb7104 	addi	r2,r2,-4668
 100df34:	10800017 	ldw	r2,0(r2)
 100df38:	108000f0 	cmpltui	r2,r2,3
 100df3c:	10000b1e 	bne	r2,zero,100df6c <remoteproc_load_noblock+0x310>
 100df40:	008060f4 	movhi	r2,387
 100df44:	10bb7104 	addi	r2,r2,-4668
 100df48:	10800117 	ldw	r2,4(r2)
 100df4c:	10000726 	beq	r2,zero,100df6c <remoteproc_load_noblock+0x310>
 100df50:	008060f4 	movhi	r2,387
 100df54:	10bb7104 	addi	r2,r2,-4668
 100df58:	10800117 	ldw	r2,4(r2)
 100df5c:	014040f4 	movhi	r5,259
 100df60:	29674404 	addi	r5,r5,-25328
 100df64:	010000c4 	movi	r4,3
 100df68:	103ee83a 	callr	r2
			       "load failure: failed to identify image.\r\n");
			ret = -RPROC_EINVAL;
 100df6c:	00bfff84 	movi	r2,-2
 100df70:	e0bff115 	stw	r2,-60(fp)
			metal_mutex_release(&rproc->lock);
 100df74:	e0bffc17 	ldw	r2,-16(fp)
 100df78:	1009883a 	mov	r4,r2
 100df7c:	100c1d80 	call	100c1d8 <metal_mutex_release>
			return -RPROC_EINVAL;
 100df80:	00bfff84 	movi	r2,-2
 100df84:	0001c406 	br	100e698 <remoteproc_load_noblock+0xa3c>
		}
		rproc->loader = loader;
 100df88:	e0bffc17 	ldw	r2,-16(fp)
 100df8c:	e0fff217 	ldw	r3,-56(fp)
 100df90:	10c00b15 	stw	r3,44(r2)
	}
	if (img_info == NULL || *img_info == NULL) {
 100df94:	e0800217 	ldw	r2,8(fp)
 100df98:	10000326 	beq	r2,zero,100dfa8 <remoteproc_load_noblock+0x34c>
 100df9c:	e0800217 	ldw	r2,8(fp)
 100dfa0:	10800017 	ldw	r2,0(r2)
 100dfa4:	1000021e 	bne	r2,zero,100dfb0 <remoteproc_load_noblock+0x354>
		last_load_state = 0;
 100dfa8:	e03ff315 	stw	zero,-52(fp)
 100dfac:	00002006 	br	100e030 <remoteproc_load_noblock+0x3d4>
	} else {
		limg_info = *img_info;
 100dfb0:	e0800217 	ldw	r2,8(fp)
 100dfb4:	10800017 	ldw	r2,0(r2)
 100dfb8:	e0bff715 	stw	r2,-36(fp)
		last_load_state = loader->get_load_state(limg_info);
 100dfbc:	e0bff217 	ldw	r2,-56(fp)
 100dfc0:	10800517 	ldw	r2,20(r2)
 100dfc4:	e0fff717 	ldw	r3,-36(fp)
 100dfc8:	1809883a 	mov	r4,r3
 100dfcc:	103ee83a 	callr	r2
 100dfd0:	e0bff315 	stw	r2,-52(fp)
		if (last_load_state < 0) {
 100dfd4:	e0bff317 	ldw	r2,-52(fp)
 100dfd8:	1000150e 	bge	r2,zero,100e030 <remoteproc_load_noblock+0x3d4>
			metal_log(METAL_LOG_ERROR,
 100dfdc:	008060f4 	movhi	r2,387
 100dfe0:	10bb7104 	addi	r2,r2,-4668
 100dfe4:	10800017 	ldw	r2,0(r2)
 100dfe8:	108000f0 	cmpltui	r2,r2,3
 100dfec:	10000b1e 	bne	r2,zero,100e01c <remoteproc_load_noblock+0x3c0>
 100dff0:	008060f4 	movhi	r2,387
 100dff4:	10bb7104 	addi	r2,r2,-4668
 100dff8:	10800117 	ldw	r2,4(r2)
 100dffc:	10000726 	beq	r2,zero,100e01c <remoteproc_load_noblock+0x3c0>
 100e000:	008060f4 	movhi	r2,387
 100e004:	10bb7104 	addi	r2,r2,-4668
 100e008:	10800117 	ldw	r2,4(r2)
 100e00c:	014040f4 	movhi	r5,259
 100e010:	29674f04 	addi	r5,r5,-25284
 100e014:	010000c4 	movi	r4,3
 100e018:	103ee83a 	callr	r2
				  "load failure, not able get load state.\r\n");
			metal_mutex_release(&rproc->lock);
 100e01c:	e0bffc17 	ldw	r2,-16(fp)
 100e020:	1009883a 	mov	r4,r2
 100e024:	100c1d80 	call	100c1d8 <metal_mutex_release>
			return -RPROC_EINVAL;
 100e028:	00bfff84 	movi	r2,-2
 100e02c:	00019a06 	br	100e698 <remoteproc_load_noblock+0xa3c>
		}
	}
	da = RPROC_LOAD_ANYADDR;
 100e030:	00bfffc4 	movi	r2,-1
 100e034:	e0bff815 	stw	r2,-32(fp)
	*nlen = 0;
 100e038:	e0800617 	ldw	r2,24(fp)
 100e03c:	10000015 	stw	zero,0(r2)
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0 &&
 100e040:	e0bff317 	ldw	r2,-52(fp)
 100e044:	1080006c 	andhi	r2,r2,1
 100e048:	10004a1e 	bne	r2,zero,100e174 <remoteproc_load_noblock+0x518>
	    (last_load_state & RPROC_LOADER_LOAD_COMPLETE) == 0) {
 100e04c:	e0bff317 	ldw	r2,-52(fp)
 100e050:	1080012c 	andhi	r2,r2,4
			return -RPROC_EINVAL;
		}
	}
	da = RPROC_LOAD_ANYADDR;
	*nlen = 0;
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0 &&
 100e054:	1000471e 	bne	r2,zero,100e174 <remoteproc_load_noblock+0x518>
	    (last_load_state & RPROC_LOADER_LOAD_COMPLETE) == 0) {
		/* Get the mandatory executable headers */
		ret = loader->load_header(img_data, offset, len,
 100e058:	e0bff217 	ldw	r2,-56(fp)
 100e05c:	10800017 	ldw	r2,0(r2)
 100e060:	e13ff704 	addi	r4,fp,-36
 100e064:	e0c00617 	ldw	r3,24(fp)
 100e068:	d8c00215 	stw	r3,8(sp)
 100e06c:	e0c00517 	ldw	r3,20(fp)
 100e070:	d8c00115 	stw	r3,4(sp)
 100e074:	e0fff317 	ldw	r3,-52(fp)
 100e078:	d8c00015 	stw	r3,0(sp)
 100e07c:	200f883a 	mov	r7,r4
 100e080:	e1bfff17 	ldw	r6,-4(fp)
 100e084:	e17ffe17 	ldw	r5,-8(fp)
 100e088:	e13ffd17 	ldw	r4,-12(fp)
 100e08c:	103ee83a 	callr	r2
 100e090:	e0bff115 	stw	r2,-60(fp)
					  &limg_info, last_load_state,
					  noffset, nlen);
		metal_log(METAL_LOG_DEBUG,
 100e094:	008060f4 	movhi	r2,387
 100e098:	10bb7104 	addi	r2,r2,-4668
 100e09c:	10800017 	ldw	r2,0(r2)
 100e0a0:	108001f0 	cmpltui	r2,r2,7
 100e0a4:	1000161e 	bne	r2,zero,100e100 <remoteproc_load_noblock+0x4a4>
 100e0a8:	008060f4 	movhi	r2,387
 100e0ac:	10bb7104 	addi	r2,r2,-4668
 100e0b0:	10800117 	ldw	r2,4(r2)
 100e0b4:	10001226 	beq	r2,zero,100e100 <remoteproc_load_noblock+0x4a4>
 100e0b8:	008060f4 	movhi	r2,387
 100e0bc:	10bb7104 	addi	r2,r2,-4668
 100e0c0:	10800117 	ldw	r2,4(r2)
 100e0c4:	e0c00517 	ldw	r3,20(fp)
 100e0c8:	18c00017 	ldw	r3,0(r3)
 100e0cc:	e1000617 	ldw	r4,24(fp)
 100e0d0:	21000017 	ldw	r4,0(r4)
 100e0d4:	d9000215 	stw	r4,8(sp)
 100e0d8:	d8c00115 	stw	r3,4(sp)
 100e0dc:	e0ffff17 	ldw	r3,-4(fp)
 100e0e0:	d8c00015 	stw	r3,0(sp)
 100e0e4:	e1fffe17 	ldw	r7,-8(fp)
 100e0e8:	018040f4 	movhi	r6,259
 100e0ec:	31a79304 	addi	r6,r6,-25012
 100e0f0:	014040f4 	movhi	r5,259
 100e0f4:	29668c04 	addi	r5,r5,-26064
 100e0f8:	010001c4 	movi	r4,7
 100e0fc:	103ee83a 	callr	r2
			  "%s, load header 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
 100e100:	e0bff117 	ldw	r2,-60(fp)
 100e104:	1000130e 	bge	r2,zero,100e154 <remoteproc_load_noblock+0x4f8>
			metal_log(METAL_LOG_ERROR,
 100e108:	008060f4 	movhi	r2,387
 100e10c:	10bb7104 	addi	r2,r2,-4668
 100e110:	10800017 	ldw	r2,0(r2)
 100e114:	108000f0 	cmpltui	r2,r2,3
 100e118:	1001531e 	bne	r2,zero,100e668 <remoteproc_load_noblock+0xa0c>
 100e11c:	008060f4 	movhi	r2,387
 100e120:	10bb7104 	addi	r2,r2,-4668
 100e124:	10800117 	ldw	r2,4(r2)
 100e128:	10014f26 	beq	r2,zero,100e668 <remoteproc_load_noblock+0xa0c>
 100e12c:	008060f4 	movhi	r2,387
 100e130:	10bb7104 	addi	r2,r2,-4668
 100e134:	10800117 	ldw	r2,4(r2)
 100e138:	e1ffff17 	ldw	r7,-4(fp)
 100e13c:	e1bffe17 	ldw	r6,-8(fp)
 100e140:	014040f4 	movhi	r5,259
 100e144:	29669804 	addi	r5,r5,-26016
 100e148:	010000c4 	movi	r4,3
 100e14c:	103ee83a 	callr	r2
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
 100e150:	00014506 	br	100e668 <remoteproc_load_noblock+0xa0c>
		}
		last_load_state = ret;
 100e154:	e0bff117 	ldw	r2,-60(fp)
 100e158:	e0bff315 	stw	r2,-52(fp)
		if (*nlen != 0 &&
 100e15c:	e0800617 	ldw	r2,24(fp)
 100e160:	10800017 	ldw	r2,0(r2)
 100e164:	10000326 	beq	r2,zero,100e174 <remoteproc_load_noblock+0x518>
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
 100e168:	e0bff317 	ldw	r2,-52(fp)
 100e16c:	1080006c 	andhi	r2,r2,1
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
		}
		last_load_state = ret;
		if (*nlen != 0 &&
 100e170:	10012a26 	beq	r2,zero,100e61c <remoteproc_load_noblock+0x9c0>
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) != 0 ||
 100e174:	e0bff317 	ldw	r2,-52(fp)
 100e178:	1080006c 	andhi	r2,r2,1
 100e17c:	1000031e 	bne	r2,zero,100e18c <remoteproc_load_noblock+0x530>
	    (last_load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
 100e180:	e0bff317 	ldw	r2,-52(fp)
 100e184:	108000ac 	andhi	r2,r2,2
		last_load_state = ret;
		if (*nlen != 0 &&
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_READY_TO_LOAD) != 0 ||
 100e188:	10007726 	beq	r2,zero,100e368 <remoteproc_load_noblock+0x70c>
	    (last_load_state & RPROC_LOADER_POST_DATA_LOAD) != 0) {
		/* Enough information to know which target memory for
		 * which data.
		 */
		ret = loader->load_data(rproc, img_data, offset, len,
 100e18c:	e0bff217 	ldw	r2,-56(fp)
 100e190:	10800117 	ldw	r2,4(r2)
 100e194:	e0c00717 	ldw	r3,28(fp)
 100e198:	d8c00615 	stw	r3,24(sp)
 100e19c:	e0c00817 	ldw	r3,32(fp)
 100e1a0:	d8c00515 	stw	r3,20(sp)
 100e1a4:	e0c00617 	ldw	r3,24(fp)
 100e1a8:	d8c00415 	stw	r3,16(sp)
 100e1ac:	e0c00517 	ldw	r3,20(fp)
 100e1b0:	d8c00315 	stw	r3,12(sp)
 100e1b4:	e0fff804 	addi	r3,fp,-32
 100e1b8:	d8c00215 	stw	r3,8(sp)
 100e1bc:	e0fff317 	ldw	r3,-52(fp)
 100e1c0:	d8c00115 	stw	r3,4(sp)
 100e1c4:	e0fff704 	addi	r3,fp,-36
 100e1c8:	d8c00015 	stw	r3,0(sp)
 100e1cc:	e1ffff17 	ldw	r7,-4(fp)
 100e1d0:	e1bffe17 	ldw	r6,-8(fp)
 100e1d4:	e17ffd17 	ldw	r5,-12(fp)
 100e1d8:	e13ffc17 	ldw	r4,-16(fp)
 100e1dc:	103ee83a 	callr	r2
 100e1e0:	e0bff115 	stw	r2,-60(fp)
					&limg_info, last_load_state, &da,
					noffset, nlen, padding, nmlen);
		metal_log(METAL_LOG_DEBUG,
 100e1e4:	008060f4 	movhi	r2,387
 100e1e8:	10bb7104 	addi	r2,r2,-4668
 100e1ec:	10800017 	ldw	r2,0(r2)
 100e1f0:	108001f0 	cmpltui	r2,r2,7
 100e1f4:	1000161e 	bne	r2,zero,100e250 <remoteproc_load_noblock+0x5f4>
 100e1f8:	008060f4 	movhi	r2,387
 100e1fc:	10bb7104 	addi	r2,r2,-4668
 100e200:	10800117 	ldw	r2,4(r2)
 100e204:	10001226 	beq	r2,zero,100e250 <remoteproc_load_noblock+0x5f4>
 100e208:	008060f4 	movhi	r2,387
 100e20c:	10bb7104 	addi	r2,r2,-4668
 100e210:	10800117 	ldw	r2,4(r2)
 100e214:	e0c00517 	ldw	r3,20(fp)
 100e218:	18c00017 	ldw	r3,0(r3)
 100e21c:	e1000617 	ldw	r4,24(fp)
 100e220:	21000017 	ldw	r4,0(r4)
 100e224:	d9000215 	stw	r4,8(sp)
 100e228:	d8c00115 	stw	r3,4(sp)
 100e22c:	e0ffff17 	ldw	r3,-4(fp)
 100e230:	d8c00015 	stw	r3,0(sp)
 100e234:	e1fffe17 	ldw	r7,-8(fp)
 100e238:	018040f4 	movhi	r6,259
 100e23c:	31a79304 	addi	r6,r6,-25012
 100e240:	014040f4 	movhi	r5,259
 100e244:	29675a04 	addi	r5,r5,-25240
 100e248:	010001c4 	movi	r4,7
 100e24c:	103ee83a 	callr	r2
			  "%s, load data 0x%lx, 0x%x, next 0x%lx, 0x%x\r\n",
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
 100e250:	e0bff117 	ldw	r2,-60(fp)
 100e254:	1000130e 	bge	r2,zero,100e2a4 <remoteproc_load_noblock+0x648>
			metal_log(METAL_LOG_ERROR,
 100e258:	008060f4 	movhi	r2,387
 100e25c:	10bb7104 	addi	r2,r2,-4668
 100e260:	10800017 	ldw	r2,0(r2)
 100e264:	108000f0 	cmpltui	r2,r2,3
 100e268:	1001011e 	bne	r2,zero,100e670 <remoteproc_load_noblock+0xa14>
 100e26c:	008060f4 	movhi	r2,387
 100e270:	10bb7104 	addi	r2,r2,-4668
 100e274:	10800117 	ldw	r2,4(r2)
 100e278:	1000fd26 	beq	r2,zero,100e670 <remoteproc_load_noblock+0xa14>
 100e27c:	008060f4 	movhi	r2,387
 100e280:	10bb7104 	addi	r2,r2,-4668
 100e284:	10800117 	ldw	r2,4(r2)
 100e288:	e1ffff17 	ldw	r7,-4(fp)
 100e28c:	e1bffe17 	ldw	r6,-8(fp)
 100e290:	014040f4 	movhi	r5,259
 100e294:	2966b004 	addi	r5,r5,-25920
 100e298:	010000c4 	movi	r4,3
 100e29c:	103ee83a 	callr	r2
				  "load data failed,0x%lx,%d\r\n",
				  offset, len);
			goto error1;
 100e2a0:	0000f306 	br	100e670 <remoteproc_load_noblock+0xa14>
		}
		last_load_state = ret;
 100e2a4:	e0bff117 	ldw	r2,-60(fp)
 100e2a8:	e0bff315 	stw	r2,-52(fp)
		if (da != RPROC_LOAD_ANYADDR) {
 100e2ac:	e0bff817 	ldw	r2,-32(fp)
 100e2b0:	10bfffe0 	cmpeqi	r2,r2,-1
 100e2b4:	1000291e 	bne	r2,zero,100e35c <remoteproc_load_noblock+0x700>
			/* get the I/O region from remoteproc */
			*pa = METAL_BAD_PHYS;
 100e2b8:	e0800317 	ldw	r2,12(fp)
 100e2bc:	00ffffc4 	movi	r3,-1
 100e2c0:	10c00015 	stw	r3,0(r2)
			(void)remoteproc_mmap(rproc, pa, &da, *nmlen, 0, io);
 100e2c4:	e0800717 	ldw	r2,28(fp)
 100e2c8:	11000017 	ldw	r4,0(r2)
 100e2cc:	e0fff804 	addi	r3,fp,-32
 100e2d0:	e0800417 	ldw	r2,16(fp)
 100e2d4:	d8800115 	stw	r2,4(sp)
 100e2d8:	d8000015 	stw	zero,0(sp)
 100e2dc:	200f883a 	mov	r7,r4
 100e2e0:	180d883a 	mov	r6,r3
 100e2e4:	e1400317 	ldw	r5,12(fp)
 100e2e8:	e13ffc17 	ldw	r4,-16(fp)
 100e2ec:	100cd140 	call	100cd14 <remoteproc_mmap>
			if (*pa == METAL_BAD_PHYS || io == NULL) {
 100e2f0:	e0800317 	ldw	r2,12(fp)
 100e2f4:	10800017 	ldw	r2,0(r2)
 100e2f8:	10bfffe0 	cmpeqi	r2,r2,-1
 100e2fc:	1000021e 	bne	r2,zero,100e308 <remoteproc_load_noblock+0x6ac>
 100e300:	e0800417 	ldw	r2,16(fp)
 100e304:	1000151e 	bne	r2,zero,100e35c <remoteproc_load_noblock+0x700>
				metal_log(METAL_LOG_ERROR,
 100e308:	008060f4 	movhi	r2,387
 100e30c:	10bb7104 	addi	r2,r2,-4668
 100e310:	10800017 	ldw	r2,0(r2)
 100e314:	108000f0 	cmpltui	r2,r2,3
 100e318:	10000d1e 	bne	r2,zero,100e350 <remoteproc_load_noblock+0x6f4>
 100e31c:	008060f4 	movhi	r2,387
 100e320:	10bb7104 	addi	r2,r2,-4668
 100e324:	10800117 	ldw	r2,4(r2)
 100e328:	10000926 	beq	r2,zero,100e350 <remoteproc_load_noblock+0x6f4>
 100e32c:	008060f4 	movhi	r2,387
 100e330:	10bb7104 	addi	r2,r2,-4668
 100e334:	10800117 	ldw	r2,4(r2)
 100e338:	e0fff817 	ldw	r3,-32(fp)
 100e33c:	180d883a 	mov	r6,r3
 100e340:	014040f4 	movhi	r5,259
 100e344:	2966cb04 	addi	r5,r5,-25812
 100e348:	010000c4 	movi	r4,3
 100e34c:	103ee83a 	callr	r2
					  "load failed, no mapping for 0x%llx.\r\n",
					  da);
				ret = -RPROC_EINVAL;
 100e350:	00bfff84 	movi	r2,-2
 100e354:	e0bff115 	stw	r2,-60(fp)
				goto error1;
 100e358:	0000c606 	br	100e674 <remoteproc_load_noblock+0xa18>
			}
		}
		if (*nlen != 0)
 100e35c:	e0800617 	ldw	r2,24(fp)
 100e360:	10800017 	ldw	r2,0(r2)
 100e364:	1000af1e 	bne	r2,zero,100e624 <remoteproc_load_noblock+0x9c8>
			goto out;
	}
	if ((last_load_state & RPROC_LOADER_LOAD_COMPLETE) != 0) {
 100e368:	e0bff317 	ldw	r2,-52(fp)
 100e36c:	1080012c 	andhi	r2,r2,4
 100e370:	1000ad26 	beq	r2,zero,100e628 <remoteproc_load_noblock+0x9cc>
		/* Get resource table */
		size_t rsc_offset;
		size_t rsc_io_offset;

		ret = loader->locate_rsc_table(limg_info, &rsc_da,
 100e374:	e0bff217 	ldw	r2,-56(fp)
 100e378:	10800217 	ldw	r2,8(r2)
 100e37c:	e0fff717 	ldw	r3,-36(fp)
 100e380:	e1bffa04 	addi	r6,fp,-24
 100e384:	e17ffb04 	addi	r5,fp,-20
 100e388:	e13ff904 	addi	r4,fp,-28
 100e38c:	300f883a 	mov	r7,r6
 100e390:	280d883a 	mov	r6,r5
 100e394:	200b883a 	mov	r5,r4
 100e398:	1809883a 	mov	r4,r3
 100e39c:	103ee83a 	callr	r2
 100e3a0:	e0bff115 	stw	r2,-60(fp)
					       &rsc_offset, &rsc_size);
		if (ret == 0 && rsc_size > 0) {
 100e3a4:	e0bff117 	ldw	r2,-60(fp)
 100e3a8:	1000931e 	bne	r2,zero,100e5f8 <remoteproc_load_noblock+0x99c>
 100e3ac:	e0bffa17 	ldw	r2,-24(fp)
 100e3b0:	10009126 	beq	r2,zero,100e5f8 <remoteproc_load_noblock+0x99c>
			lrsc_table = metal_allocate_memory(rsc_size);
 100e3b4:	e0bffa17 	ldw	r2,-24(fp)
 100e3b8:	1009883a 	mov	r4,r2
 100e3bc:	100baf40 	call	100baf4 <metal_allocate_memory>
 100e3c0:	e0bff515 	stw	r2,-44(fp)
			if (lrsc_table == NULL) {
 100e3c4:	e0bff517 	ldw	r2,-44(fp)
 100e3c8:	1000031e 	bne	r2,zero,100e3d8 <remoteproc_load_noblock+0x77c>
				ret = -RPROC_ENOMEM;
 100e3cc:	00bfffc4 	movi	r2,-1
 100e3d0:	e0bff115 	stw	r2,-60(fp)
				goto error1;
 100e3d4:	0000a706 	br	100e674 <remoteproc_load_noblock+0xa18>
			}
			rsc_table = remoteproc_mmap(rproc, NULL, &rsc_da,
 100e3d8:	e13ffa17 	ldw	r4,-24(fp)
 100e3dc:	e0fff904 	addi	r3,fp,-28
 100e3e0:	e0800417 	ldw	r2,16(fp)
 100e3e4:	d8800115 	stw	r2,4(sp)
 100e3e8:	d8000015 	stw	zero,0(sp)
 100e3ec:	200f883a 	mov	r7,r4
 100e3f0:	180d883a 	mov	r6,r3
 100e3f4:	000b883a 	mov	r5,zero
 100e3f8:	e13ffc17 	ldw	r4,-16(fp)
 100e3fc:	100cd140 	call	100cd14 <remoteproc_mmap>
 100e400:	e0bff415 	stw	r2,-48(fp)
						    rsc_size, 0, io);
			if (*io == NULL) {
 100e404:	e0800417 	ldw	r2,16(fp)
 100e408:	10800017 	ldw	r2,0(r2)
 100e40c:	1000131e 	bne	r2,zero,100e45c <remoteproc_load_noblock+0x800>
				metal_log(METAL_LOG_ERROR,
 100e410:	008060f4 	movhi	r2,387
 100e414:	10bb7104 	addi	r2,r2,-4668
 100e418:	10800017 	ldw	r2,0(r2)
 100e41c:	108000f0 	cmpltui	r2,r2,3
 100e420:	10000b1e 	bne	r2,zero,100e450 <remoteproc_load_noblock+0x7f4>
 100e424:	008060f4 	movhi	r2,387
 100e428:	10bb7104 	addi	r2,r2,-4668
 100e42c:	10800117 	ldw	r2,4(r2)
 100e430:	10000726 	beq	r2,zero,100e450 <remoteproc_load_noblock+0x7f4>
 100e434:	008060f4 	movhi	r2,387
 100e438:	10bb7104 	addi	r2,r2,-4668
 100e43c:	10800117 	ldw	r2,4(r2)
 100e440:	014040f4 	movhi	r5,259
 100e444:	29676604 	addi	r5,r5,-25192
 100e448:	010000c4 	movi	r4,3
 100e44c:	103ee83a 	callr	r2
					  "load failed: failed to mmap rsc\r\n");
				metal_free_memory(lrsc_table);
 100e450:	e13ff517 	ldw	r4,-44(fp)
 100e454:	100bb240 	call	100bb24 <metal_free_memory>
				goto error1;
 100e458:	00008606 	br	100e674 <remoteproc_load_noblock+0xa18>
			}
			rsc_io_offset = metal_io_virt_to_offset(*io, rsc_table);
 100e45c:	e0800417 	ldw	r2,16(fp)
 100e460:	10800017 	ldw	r2,0(r2)
 100e464:	e17ff417 	ldw	r5,-48(fp)
 100e468:	1009883a 	mov	r4,r2
 100e46c:	100be780 	call	100be78 <metal_io_virt_to_offset>
 100e470:	e0bff615 	stw	r2,-40(fp)
			ret = metal_io_block_read(*io, rsc_io_offset,
 100e474:	e0800417 	ldw	r2,16(fp)
 100e478:	10800017 	ldw	r2,0(r2)
 100e47c:	e0fffa17 	ldw	r3,-24(fp)
 100e480:	180f883a 	mov	r7,r3
 100e484:	e1bff517 	ldw	r6,-44(fp)
 100e488:	e17ff617 	ldw	r5,-40(fp)
 100e48c:	1009883a 	mov	r4,r2
 100e490:	10080e80 	call	10080e8 <metal_io_block_read>
 100e494:	e0bff115 	stw	r2,-60(fp)
						  lrsc_table, rsc_size);
			if (ret != (int)rsc_size) {
 100e498:	e0bffa17 	ldw	r2,-24(fp)
 100e49c:	1007883a 	mov	r3,r2
 100e4a0:	e0bff117 	ldw	r2,-60(fp)
 100e4a4:	10c01326 	beq	r2,r3,100e4f4 <remoteproc_load_noblock+0x898>
				metal_log(METAL_LOG_ERROR,
 100e4a8:	008060f4 	movhi	r2,387
 100e4ac:	10bb7104 	addi	r2,r2,-4668
 100e4b0:	10800017 	ldw	r2,0(r2)
 100e4b4:	108000f0 	cmpltui	r2,r2,3
 100e4b8:	10000b1e 	bne	r2,zero,100e4e8 <remoteproc_load_noblock+0x88c>
 100e4bc:	008060f4 	movhi	r2,387
 100e4c0:	10bb7104 	addi	r2,r2,-4668
 100e4c4:	10800117 	ldw	r2,4(r2)
 100e4c8:	10000726 	beq	r2,zero,100e4e8 <remoteproc_load_noblock+0x88c>
 100e4cc:	008060f4 	movhi	r2,387
 100e4d0:	10bb7104 	addi	r2,r2,-4668
 100e4d4:	10800117 	ldw	r2,4(r2)
 100e4d8:	014040f4 	movhi	r5,259
 100e4dc:	29676f04 	addi	r5,r5,-25156
 100e4e0:	010000c4 	movi	r4,3
 100e4e4:	103ee83a 	callr	r2
					  "load failed: failed to get rsc\r\n");
				metal_free_memory(lrsc_table);
 100e4e8:	e13ff517 	ldw	r4,-44(fp)
 100e4ec:	100bb240 	call	100bb24 <metal_free_memory>
				goto error1;
 100e4f0:	00006006 	br	100e674 <remoteproc_load_noblock+0xa18>
			}
			/* parse resource table */
			ret = remoteproc_parse_rsc_table(rproc, lrsc_table,
 100e4f4:	e0bffa17 	ldw	r2,-24(fp)
 100e4f8:	100d883a 	mov	r6,r2
 100e4fc:	e17ff517 	ldw	r5,-44(fp)
 100e500:	e13ffc17 	ldw	r4,-16(fp)
 100e504:	100c6780 	call	100c678 <remoteproc_parse_rsc_table>
 100e508:	e0bff115 	stw	r2,-60(fp)
							 rsc_size);
			if (ret < 0) {
 100e50c:	e0bff117 	ldw	r2,-60(fp)
 100e510:	1000140e 	bge	r2,zero,100e564 <remoteproc_load_noblock+0x908>
				metal_log(METAL_LOG_ERROR,
 100e514:	008060f4 	movhi	r2,387
 100e518:	10bb7104 	addi	r2,r2,-4668
 100e51c:	10800017 	ldw	r2,0(r2)
 100e520:	108000f0 	cmpltui	r2,r2,3
 100e524:	10000b1e 	bne	r2,zero,100e554 <remoteproc_load_noblock+0x8f8>
 100e528:	008060f4 	movhi	r2,387
 100e52c:	10bb7104 	addi	r2,r2,-4668
 100e530:	10800117 	ldw	r2,4(r2)
 100e534:	10000726 	beq	r2,zero,100e554 <remoteproc_load_noblock+0x8f8>
 100e538:	008060f4 	movhi	r2,387
 100e53c:	10bb7104 	addi	r2,r2,-4668
 100e540:	10800117 	ldw	r2,4(r2)
 100e544:	014040f4 	movhi	r5,259
 100e548:	29677804 	addi	r5,r5,-25120
 100e54c:	010000c4 	movi	r4,3
 100e550:	103ee83a 	callr	r2
					  "load failed: failed to parse rsc\r\n");
				metal_free_memory(lrsc_table);
 100e554:	e13ff517 	ldw	r4,-44(fp)
 100e558:	100bb240 	call	100bb24 <metal_free_memory>
				goto error1;
 100e55c:	0001883a 	nop
 100e560:	00004406 	br	100e674 <remoteproc_load_noblock+0xa18>
			}
			/* Update resource table */
			ret = metal_io_block_write(*io, rsc_io_offset,
 100e564:	e0800417 	ldw	r2,16(fp)
 100e568:	10800017 	ldw	r2,0(r2)
 100e56c:	e0fffa17 	ldw	r3,-24(fp)
 100e570:	180f883a 	mov	r7,r3
 100e574:	e1bff517 	ldw	r6,-44(fp)
 100e578:	e17ff617 	ldw	r5,-40(fp)
 100e57c:	1009883a 	mov	r4,r2
 100e580:	100829c0 	call	100829c <metal_io_block_write>
 100e584:	e0bff115 	stw	r2,-60(fp)
						  lrsc_table, rsc_size);
			if (ret != (int)rsc_size) {
 100e588:	e0bffa17 	ldw	r2,-24(fp)
 100e58c:	1007883a 	mov	r3,r2
 100e590:	e0bff117 	ldw	r2,-60(fp)
 100e594:	10c01026 	beq	r2,r3,100e5d8 <remoteproc_load_noblock+0x97c>
				metal_log(METAL_LOG_WARNING,
 100e598:	008060f4 	movhi	r2,387
 100e59c:	10bb7104 	addi	r2,r2,-4668
 100e5a0:	10800017 	ldw	r2,0(r2)
 100e5a4:	10800130 	cmpltui	r2,r2,4
 100e5a8:	10000b1e 	bne	r2,zero,100e5d8 <remoteproc_load_noblock+0x97c>
 100e5ac:	008060f4 	movhi	r2,387
 100e5b0:	10bb7104 	addi	r2,r2,-4668
 100e5b4:	10800117 	ldw	r2,4(r2)
 100e5b8:	10000726 	beq	r2,zero,100e5d8 <remoteproc_load_noblock+0x97c>
 100e5bc:	008060f4 	movhi	r2,387
 100e5c0:	10bb7104 	addi	r2,r2,-4668
 100e5c4:	10800117 	ldw	r2,4(r2)
 100e5c8:	014040f4 	movhi	r5,259
 100e5cc:	29678104 	addi	r5,r5,-25084
 100e5d0:	01000104 	movi	r4,4
 100e5d4:	103ee83a 	callr	r2
					  "load executable, failed to update rsc\r\n");
			}
			rproc->rsc_table = rsc_table;
 100e5d8:	e0bffc17 	ldw	r2,-16(fp)
 100e5dc:	e0fff417 	ldw	r3,-48(fp)
 100e5e0:	10c00115 	stw	r3,4(r2)
			rproc->rsc_len = rsc_size;
 100e5e4:	e0fffa17 	ldw	r3,-24(fp)
 100e5e8:	e0bffc17 	ldw	r2,-16(fp)
 100e5ec:	10c00215 	stw	r3,8(r2)
			metal_free_memory(lrsc_table);
 100e5f0:	e13ff517 	ldw	r4,-44(fp)
 100e5f4:	100bb240 	call	100bb24 <metal_free_memory>
		}

		/* get entry point from the firmware */
		rproc->bootaddr = loader->get_entry(limg_info);
 100e5f8:	e0bff217 	ldw	r2,-56(fp)
 100e5fc:	10800417 	ldw	r2,16(r2)
 100e600:	e0fff717 	ldw	r3,-36(fp)
 100e604:	1809883a 	mov	r4,r3
 100e608:	103ee83a 	callr	r2
 100e60c:	1007883a 	mov	r3,r2
 100e610:	e0bffc17 	ldw	r2,-16(fp)
 100e614:	10c00a15 	stw	r3,40(r2)
 100e618:	00000306 	br	100e628 <remoteproc_load_noblock+0x9cc>
			goto error1;
		}
		last_load_state = ret;
		if (*nlen != 0 &&
		    (last_load_state & RPROC_LOADER_READY_TO_LOAD) == 0)
			goto out;
 100e61c:	0001883a 	nop
 100e620:	00000106 	br	100e628 <remoteproc_load_noblock+0x9cc>
				ret = -RPROC_EINVAL;
				goto error1;
			}
		}
		if (*nlen != 0)
			goto out;
 100e624:	0001883a 	nop

		/* get entry point from the firmware */
		rproc->bootaddr = loader->get_entry(limg_info);
	}
out:
	if (img_info != NULL)
 100e628:	e0800217 	ldw	r2,8(fp)
 100e62c:	10000426 	beq	r2,zero,100e640 <remoteproc_load_noblock+0x9e4>
		*img_info = limg_info;
 100e630:	e0fff717 	ldw	r3,-36(fp)
 100e634:	e0800217 	ldw	r2,8(fp)
 100e638:	10c00015 	stw	r3,0(r2)
 100e63c:	00000506 	br	100e654 <remoteproc_load_noblock+0x9f8>
	else
		loader->release(limg_info);
 100e640:	e0bff217 	ldw	r2,-56(fp)
 100e644:	10800317 	ldw	r2,12(r2)
 100e648:	e0fff717 	ldw	r3,-36(fp)
 100e64c:	1809883a 	mov	r4,r3
 100e650:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100e654:	e0bffc17 	ldw	r2,-16(fp)
 100e658:	1009883a 	mov	r4,r2
 100e65c:	100c1d80 	call	100c1d8 <metal_mutex_release>
	return 0;
 100e660:	0005883a 	mov	r2,zero
 100e664:	00000c06 	br	100e698 <remoteproc_load_noblock+0xa3c>
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load header failed 0x%lx,%d.\r\n",
				  offset, len);
			goto error1;
 100e668:	0001883a 	nop
 100e66c:	00000106 	br	100e674 <remoteproc_load_noblock+0xa18>
			  __func__, offset, len, *noffset, *nlen);
		if (ret < 0) {
			metal_log(METAL_LOG_ERROR,
				  "load data failed,0x%lx,%d\r\n",
				  offset, len);
			goto error1;
 100e670:	0001883a 	nop
		loader->release(limg_info);
	metal_mutex_release(&rproc->lock);
	return 0;

error1:
	loader->release(limg_info);
 100e674:	e0bff217 	ldw	r2,-56(fp)
 100e678:	10800317 	ldw	r2,12(r2)
 100e67c:	e0fff717 	ldw	r3,-36(fp)
 100e680:	1809883a 	mov	r4,r3
 100e684:	103ee83a 	callr	r2
	metal_mutex_release(&rproc->lock);
 100e688:	e0bffc17 	ldw	r2,-16(fp)
 100e68c:	1009883a 	mov	r4,r2
 100e690:	100c1d80 	call	100c1d8 <metal_mutex_release>
	return ret;
 100e694:	e0bff117 	ldw	r2,-60(fp)
}
 100e698:	e037883a 	mov	sp,fp
 100e69c:	dfc00117 	ldw	ra,4(sp)
 100e6a0:	df000017 	ldw	fp,0(sp)
 100e6a4:	dec00204 	addi	sp,sp,8
 100e6a8:	f800283a 	ret

0100e6ac <remoteproc_allocate_id>:

unsigned int remoteproc_allocate_id(struct remoteproc *rproc,
				    unsigned int start,
				    unsigned int end)
{
 100e6ac:	defffa04 	addi	sp,sp,-24
 100e6b0:	dfc00515 	stw	ra,20(sp)
 100e6b4:	df000415 	stw	fp,16(sp)
 100e6b8:	df000404 	addi	fp,sp,16
 100e6bc:	e13ffd15 	stw	r4,-12(fp)
 100e6c0:	e17ffe15 	stw	r5,-8(fp)
 100e6c4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int notifyid;

	if (start == RSC_NOTIFY_ID_ANY)
 100e6c8:	e0bffe17 	ldw	r2,-8(fp)
 100e6cc:	10bfffd8 	cmpnei	r2,r2,-1
 100e6d0:	1000011e 	bne	r2,zero,100e6d8 <remoteproc_allocate_id+0x2c>
		start = 0;
 100e6d4:	e03ffe15 	stw	zero,-8(fp)
	if (end == 0)
 100e6d8:	e0bfff17 	ldw	r2,-4(fp)
 100e6dc:	1000021e 	bne	r2,zero,100e6e8 <remoteproc_allocate_id+0x3c>
		end = METAL_BITS_PER_ULONG;
 100e6e0:	00800804 	movi	r2,32
 100e6e4:	e0bfff15 	stw	r2,-4(fp)

	notifyid = metal_bitmap_next_clear_bit(&rproc->bitmap,
 100e6e8:	e0bffd17 	ldw	r2,-12(fp)
 100e6ec:	10800804 	addi	r2,r2,32
 100e6f0:	e1bfff17 	ldw	r6,-4(fp)
 100e6f4:	e17ffe17 	ldw	r5,-8(fp)
 100e6f8:	1009883a 	mov	r4,r2
 100e6fc:	100bc680 	call	100bc68 <metal_bitmap_next_clear_bit>
 100e700:	e0bffc15 	stw	r2,-16(fp)
					       start, end);
	if (notifyid != end)
 100e704:	e0fffc17 	ldw	r3,-16(fp)
 100e708:	e0bfff17 	ldw	r2,-4(fp)
 100e70c:	18800726 	beq	r3,r2,100e72c <remoteproc_allocate_id+0x80>
		metal_bitmap_set_bit(&rproc->bitmap, notifyid);
 100e710:	e0bffd17 	ldw	r2,-12(fp)
 100e714:	10800804 	addi	r2,r2,32
 100e718:	e0fffc17 	ldw	r3,-16(fp)
 100e71c:	180b883a 	mov	r5,r3
 100e720:	1009883a 	mov	r4,r2
 100e724:	100bb580 	call	100bb58 <metal_bitmap_set_bit>
 100e728:	00000206 	br	100e734 <remoteproc_allocate_id+0x88>
	else
		notifyid = RSC_NOTIFY_ID_ANY;
 100e72c:	00bfffc4 	movi	r2,-1
 100e730:	e0bffc15 	stw	r2,-16(fp)

	return notifyid;
 100e734:	e0bffc17 	ldw	r2,-16(fp)
}
 100e738:	e037883a 	mov	sp,fp
 100e73c:	dfc00117 	ldw	ra,4(sp)
 100e740:	df000017 	ldw	fp,0(sp)
 100e744:	dec00204 	addi	sp,sp,8
 100e748:	f800283a 	ret

0100e74c <remoteproc_virtio_notify>:

static int remoteproc_virtio_notify(void *priv, uint32_t id)
{
 100e74c:	defffb04 	addi	sp,sp,-20
 100e750:	dfc00415 	stw	ra,16(sp)
 100e754:	df000315 	stw	fp,12(sp)
 100e758:	df000304 	addi	fp,sp,12
 100e75c:	e13ffe15 	stw	r4,-8(fp)
 100e760:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc *rproc = priv;
 100e764:	e0bffe17 	ldw	r2,-8(fp)
 100e768:	e0bffd15 	stw	r2,-12(fp)

	return rproc->ops->notify(rproc, id);
 100e76c:	e0bffd17 	ldw	r2,-12(fp)
 100e770:	10800917 	ldw	r2,36(r2)
 100e774:	10800817 	ldw	r2,32(r2)
 100e778:	e17fff17 	ldw	r5,-4(fp)
 100e77c:	e13ffd17 	ldw	r4,-12(fp)
 100e780:	103ee83a 	callr	r2
}
 100e784:	e037883a 	mov	sp,fp
 100e788:	dfc00117 	ldw	ra,4(sp)
 100e78c:	df000017 	ldw	fp,0(sp)
 100e790:	dec00204 	addi	sp,sp,8
 100e794:	f800283a 	ret

0100e798 <remoteproc_create_virtio>:

struct virtio_device *
remoteproc_create_virtio(struct remoteproc *rproc,
			 int vdev_id, unsigned int role,
			 void (*rst_cb)(struct virtio_device *vdev))
{
 100e798:	deffe504 	addi	sp,sp,-108
 100e79c:	dfc01a15 	stw	ra,104(sp)
 100e7a0:	df001915 	stw	fp,100(sp)
 100e7a4:	df001904 	addi	fp,sp,100
 100e7a8:	e13ffc15 	stw	r4,-16(fp)
 100e7ac:	e17ffd15 	stw	r5,-12(fp)
 100e7b0:	e1bffe15 	stw	r6,-8(fp)
 100e7b4:	e1ffff15 	stw	r7,-4(fp)
	size_t vdev_rsc_offset;
	unsigned int notifyid;
	unsigned int num_vrings, i;
	struct metal_list *node;

	metal_assert(rproc);
 100e7b8:	e0bffc17 	ldw	r2,-16(fp)
 100e7bc:	1000081e 	bne	r2,zero,100e7e0 <remoteproc_create_virtio+0x48>
 100e7c0:	01c040f4 	movhi	r7,259
 100e7c4:	39e78b04 	addi	r7,r7,-25044
 100e7c8:	018040f4 	movhi	r6,259
 100e7cc:	31a79904 	addi	r6,r6,-24988
 100e7d0:	0140dc44 	movi	r5,881
 100e7d4:	010040f4 	movhi	r4,259
 100e7d8:	21266d04 	addi	r4,r4,-26188
 100e7dc:	10156a00 	call	10156a0 <__assert_func>
	metal_mutex_acquire(&rproc->lock);
 100e7e0:	e0bffc17 	ldw	r2,-16(fp)
 100e7e4:	1009883a 	mov	r4,r2
 100e7e8:	100c1a40 	call	100c1a4 <metal_mutex_acquire>
	rsc_table = rproc->rsc_table;
 100e7ec:	e0bffc17 	ldw	r2,-16(fp)
 100e7f0:	10800117 	ldw	r2,4(r2)
 100e7f4:	e0bfec15 	stw	r2,-80(fp)
	vdev_rsc_io = rproc->rsc_io;
 100e7f8:	e0bffc17 	ldw	r2,-16(fp)
 100e7fc:	10800317 	ldw	r2,12(r2)
 100e800:	e0bfed15 	stw	r2,-76(fp)
	vdev_rsc_offset = find_rsc(rsc_table, RSC_VDEV, vdev_id);
 100e804:	e0bffd17 	ldw	r2,-12(fp)
 100e808:	100d883a 	mov	r6,r2
 100e80c:	014000c4 	movi	r5,3
 100e810:	e13fec17 	ldw	r4,-80(fp)
 100e814:	10102c80 	call	10102c8 <find_rsc>
 100e818:	e0bfee15 	stw	r2,-72(fp)
	if (!vdev_rsc_offset) {
 100e81c:	e0bfee17 	ldw	r2,-72(fp)
 100e820:	1000051e 	bne	r2,zero,100e838 <remoteproc_create_virtio+0xa0>
		metal_mutex_release(&rproc->lock);
 100e824:	e0bffc17 	ldw	r2,-16(fp)
 100e828:	1009883a 	mov	r4,r2
 100e82c:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return NULL;
 100e830:	0005883a 	mov	r2,zero
 100e834:	0000b706 	br	100eb14 <remoteproc_create_virtio+0x37c>
	}
	vdev_rsc = (struct fw_rsc_vdev *)(rsc_table + vdev_rsc_offset);
 100e838:	e0ffec17 	ldw	r3,-80(fp)
 100e83c:	e0bfee17 	ldw	r2,-72(fp)
 100e840:	1885883a 	add	r2,r3,r2
 100e844:	e0bfef15 	stw	r2,-68(fp)
	notifyid = vdev_rsc->notifyid;
 100e848:	e0bfef17 	ldw	r2,-68(fp)
 100e84c:	10c00203 	ldbu	r3,8(r2)
 100e850:	11000243 	ldbu	r4,9(r2)
 100e854:	2008923a 	slli	r4,r4,8
 100e858:	20c6b03a 	or	r3,r4,r3
 100e85c:	11000283 	ldbu	r4,10(r2)
 100e860:	2008943a 	slli	r4,r4,16
 100e864:	20c6b03a 	or	r3,r4,r3
 100e868:	108002c3 	ldbu	r2,11(r2)
 100e86c:	1004963a 	slli	r2,r2,24
 100e870:	10c4b03a 	or	r2,r2,r3
 100e874:	e0bff015 	stw	r2,-64(fp)
	/* Check if the virtio device is already created */
	metal_list_for_each(&rproc->vdevs, node) {
 100e878:	e0bffc17 	ldw	r2,-16(fp)
 100e87c:	10800617 	ldw	r2,24(r2)
 100e880:	e0bfeb15 	stw	r2,-84(fp)
 100e884:	00001006 	br	100e8c8 <remoteproc_create_virtio+0x130>
		rpvdev = metal_container_of(node, struct remoteproc_virtio,
 100e888:	e0bfeb17 	ldw	r2,-84(fp)
 100e88c:	10bff104 	addi	r2,r2,-60
 100e890:	e0bff115 	stw	r2,-60(fp)
					    node);
		if (rpvdev->vdev.notifyid == notifyid) {
 100e894:	e0bff117 	ldw	r2,-60(fp)
 100e898:	10c00417 	ldw	r3,16(r2)
 100e89c:	e0bff017 	ldw	r2,-64(fp)
 100e8a0:	1880061e 	bne	r3,r2,100e8bc <remoteproc_create_virtio+0x124>
			metal_mutex_release(&rproc->lock);
 100e8a4:	e0bffc17 	ldw	r2,-16(fp)
 100e8a8:	1009883a 	mov	r4,r2
 100e8ac:	100c1d80 	call	100c1d8 <metal_mutex_release>
			return &rpvdev->vdev;
 100e8b0:	e0bff117 	ldw	r2,-60(fp)
 100e8b4:	10800404 	addi	r2,r2,16
 100e8b8:	00009606 	br	100eb14 <remoteproc_create_virtio+0x37c>
		return NULL;
	}
	vdev_rsc = (struct fw_rsc_vdev *)(rsc_table + vdev_rsc_offset);
	notifyid = vdev_rsc->notifyid;
	/* Check if the virtio device is already created */
	metal_list_for_each(&rproc->vdevs, node) {
 100e8bc:	e0bfeb17 	ldw	r2,-84(fp)
 100e8c0:	10800017 	ldw	r2,0(r2)
 100e8c4:	e0bfeb15 	stw	r2,-84(fp)
 100e8c8:	e0bffc17 	ldw	r2,-16(fp)
 100e8cc:	10c00604 	addi	r3,r2,24
 100e8d0:	e0bfeb17 	ldw	r2,-84(fp)
 100e8d4:	18bfec1e 	bne	r3,r2,100e888 <__alt_data_end+0xff00e888>
		if (rpvdev->vdev.notifyid == notifyid) {
			metal_mutex_release(&rproc->lock);
			return &rpvdev->vdev;
		}
	}
	vdev = rproc_virtio_create_vdev(role, notifyid,
 100e8d8:	e0bfff17 	ldw	r2,-4(fp)
 100e8dc:	d8800215 	stw	r2,8(sp)
 100e8e0:	00804074 	movhi	r2,257
 100e8e4:	10b9d304 	addi	r2,r2,-6324
 100e8e8:	d8800115 	stw	r2,4(sp)
 100e8ec:	e0bffc17 	ldw	r2,-16(fp)
 100e8f0:	d8800015 	stw	r2,0(sp)
 100e8f4:	e1ffed17 	ldw	r7,-76(fp)
 100e8f8:	e1bfef17 	ldw	r6,-68(fp)
 100e8fc:	e17ff017 	ldw	r5,-64(fp)
 100e900:	e13ffe17 	ldw	r4,-8(fp)
 100e904:	100f5b80 	call	100f5b8 <rproc_virtio_create_vdev>
 100e908:	e0bff215 	stw	r2,-56(fp)
					vdev_rsc, vdev_rsc_io, rproc,
					remoteproc_virtio_notify,
					rst_cb);
	if (!vdev) {
 100e90c:	e0bff217 	ldw	r2,-56(fp)
 100e910:	1000051e 	bne	r2,zero,100e928 <remoteproc_create_virtio+0x190>
		metal_mutex_release(&rproc->lock);
 100e914:	e0bffc17 	ldw	r2,-16(fp)
 100e918:	1009883a 	mov	r4,r2
 100e91c:	100c1d80 	call	100c1d8 <metal_mutex_release>
		return NULL;
 100e920:	0005883a 	mov	r2,zero
 100e924:	00007b06 	br	100eb14 <remoteproc_create_virtio+0x37c>
	}

	rproc_virtio_wait_remote_ready(vdev);
 100e928:	e13ff217 	ldw	r4,-56(fp)
 100e92c:	100fa440 	call	100fa44 <rproc_virtio_wait_remote_ready>

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100e930:	e0bff217 	ldw	r2,-56(fp)
 100e934:	10bffc04 	addi	r2,r2,-16
 100e938:	e0bff115 	stw	r2,-60(fp)
	metal_list_add_tail(&rproc->vdevs, &rpvdev->node);
 100e93c:	e0bffc17 	ldw	r2,-16(fp)
 100e940:	10c00604 	addi	r3,r2,24
 100e944:	e0bff117 	ldw	r2,-60(fp)
 100e948:	10800f04 	addi	r2,r2,60
 100e94c:	100b883a 	mov	r5,r2
 100e950:	1809883a 	mov	r4,r3
 100e954:	100bd780 	call	100bd78 <metal_list_add_tail>
	num_vrings = vdev_rsc->num_of_vrings;
 100e958:	e0bfef17 	ldw	r2,-68(fp)
 100e95c:	10800643 	ldbu	r2,25(r2)
 100e960:	10803fcc 	andi	r2,r2,255
 100e964:	e0bff315 	stw	r2,-52(fp)

	/* set the notification id for vrings */
	for (i = 0; i < num_vrings; i++) {
 100e968:	e03fea15 	stw	zero,-88(fp)
 100e96c:	00005706 	br	100eacc <remoteproc_create_virtio+0x334>
		struct metal_io_region *io;
		void *va;
		size_t size;
		int ret;

		vring_rsc = &vdev_rsc->vring[i];
 100e970:	e0bfea17 	ldw	r2,-88(fp)
 100e974:	10800524 	muli	r2,r2,20
 100e978:	10800704 	addi	r2,r2,28
 100e97c:	e0ffef17 	ldw	r3,-68(fp)
 100e980:	1885883a 	add	r2,r3,r2
 100e984:	e0bff415 	stw	r2,-48(fp)
		notifyid = vring_rsc->notifyid;
 100e988:	e0bff417 	ldw	r2,-48(fp)
 100e98c:	10c00303 	ldbu	r3,12(r2)
 100e990:	11000343 	ldbu	r4,13(r2)
 100e994:	2008923a 	slli	r4,r4,8
 100e998:	20c6b03a 	or	r3,r4,r3
 100e99c:	11000383 	ldbu	r4,14(r2)
 100e9a0:	2008943a 	slli	r4,r4,16
 100e9a4:	20c6b03a 	or	r3,r4,r3
 100e9a8:	108003c3 	ldbu	r2,15(r2)
 100e9ac:	1004963a 	slli	r2,r2,24
 100e9b0:	10c4b03a 	or	r2,r2,r3
 100e9b4:	e0bff015 	stw	r2,-64(fp)
		da = vring_rsc->da;
 100e9b8:	e0bff417 	ldw	r2,-48(fp)
 100e9bc:	10c00003 	ldbu	r3,0(r2)
 100e9c0:	11000043 	ldbu	r4,1(r2)
 100e9c4:	2008923a 	slli	r4,r4,8
 100e9c8:	20c6b03a 	or	r3,r4,r3
 100e9cc:	11000083 	ldbu	r4,2(r2)
 100e9d0:	2008943a 	slli	r4,r4,16
 100e9d4:	20c6b03a 	or	r3,r4,r3
 100e9d8:	108000c3 	ldbu	r2,3(r2)
 100e9dc:	1004963a 	slli	r2,r2,24
 100e9e0:	10c4b03a 	or	r2,r2,r3
 100e9e4:	e0bffa15 	stw	r2,-24(fp)
		num_descs = vring_rsc->num;
 100e9e8:	e0bff417 	ldw	r2,-48(fp)
 100e9ec:	10c00203 	ldbu	r3,8(r2)
 100e9f0:	11000243 	ldbu	r4,9(r2)
 100e9f4:	2008923a 	slli	r4,r4,8
 100e9f8:	20c6b03a 	or	r3,r4,r3
 100e9fc:	11000283 	ldbu	r4,10(r2)
 100ea00:	2008943a 	slli	r4,r4,16
 100ea04:	20c6b03a 	or	r3,r4,r3
 100ea08:	108002c3 	ldbu	r2,11(r2)
 100ea0c:	1004963a 	slli	r2,r2,24
 100ea10:	10c4b03a 	or	r2,r2,r3
 100ea14:	e0bff515 	stw	r2,-44(fp)
		align = vring_rsc->align;
 100ea18:	e0bff417 	ldw	r2,-48(fp)
 100ea1c:	10c00103 	ldbu	r3,4(r2)
 100ea20:	11000143 	ldbu	r4,5(r2)
 100ea24:	2008923a 	slli	r4,r4,8
 100ea28:	20c6b03a 	or	r3,r4,r3
 100ea2c:	11000183 	ldbu	r4,6(r2)
 100ea30:	2008943a 	slli	r4,r4,16
 100ea34:	20c6b03a 	or	r3,r4,r3
 100ea38:	108001c3 	ldbu	r2,7(r2)
 100ea3c:	1004963a 	slli	r2,r2,24
 100ea40:	10c4b03a 	or	r2,r2,r3
 100ea44:	e0bff615 	stw	r2,-40(fp)
		size = vring_size(num_descs, align);
 100ea48:	e17ff617 	ldw	r5,-40(fp)
 100ea4c:	e13ff517 	ldw	r4,-44(fp)
 100ea50:	100c2300 	call	100c230 <vring_size>
 100ea54:	e0bff715 	stw	r2,-36(fp)
		va = remoteproc_mmap(rproc, NULL, &da, size, 0, &io);
 100ea58:	e0fffa04 	addi	r3,fp,-24
 100ea5c:	e0bffb04 	addi	r2,fp,-20
 100ea60:	d8800115 	stw	r2,4(sp)
 100ea64:	d8000015 	stw	zero,0(sp)
 100ea68:	e1fff717 	ldw	r7,-36(fp)
 100ea6c:	180d883a 	mov	r6,r3
 100ea70:	000b883a 	mov	r5,zero
 100ea74:	e13ffc17 	ldw	r4,-16(fp)
 100ea78:	100cd140 	call	100cd14 <remoteproc_mmap>
 100ea7c:	e0bff815 	stw	r2,-32(fp)
		if (!va)
 100ea80:	e0bff817 	ldw	r2,-32(fp)
 100ea84:	10001926 	beq	r2,zero,100eaec <remoteproc_create_virtio+0x354>
			goto err1;
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
 100ea88:	e0bffb17 	ldw	r2,-20(fp)
 100ea8c:	e0fff617 	ldw	r3,-40(fp)
 100ea90:	d8c00215 	stw	r3,8(sp)
 100ea94:	e0fff517 	ldw	r3,-44(fp)
 100ea98:	d8c00115 	stw	r3,4(sp)
 100ea9c:	d8800015 	stw	r2,0(sp)
 100eaa0:	e1fff817 	ldw	r7,-32(fp)
 100eaa4:	e1bff017 	ldw	r6,-64(fp)
 100eaa8:	e17fea17 	ldw	r5,-88(fp)
 100eaac:	e13ff217 	ldw	r4,-56(fp)
 100eab0:	100f8d00 	call	100f8d0 <rproc_virtio_init_vring>
 100eab4:	e0bff915 	stw	r2,-28(fp)
					      va, io, num_descs, align);
		if (ret)
 100eab8:	e0bff917 	ldw	r2,-28(fp)
 100eabc:	10000d1e 	bne	r2,zero,100eaf4 <remoteproc_create_virtio+0x35c>
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
	metal_list_add_tail(&rproc->vdevs, &rpvdev->node);
	num_vrings = vdev_rsc->num_of_vrings;

	/* set the notification id for vrings */
	for (i = 0; i < num_vrings; i++) {
 100eac0:	e0bfea17 	ldw	r2,-88(fp)
 100eac4:	10800044 	addi	r2,r2,1
 100eac8:	e0bfea15 	stw	r2,-88(fp)
 100eacc:	e0ffea17 	ldw	r3,-88(fp)
 100ead0:	e0bff317 	ldw	r2,-52(fp)
 100ead4:	18bfa636 	bltu	r3,r2,100e970 <__alt_data_end+0xff00e970>
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
					      va, io, num_descs, align);
		if (ret)
			goto err1;
	}
	metal_mutex_release(&rproc->lock);
 100ead8:	e0bffc17 	ldw	r2,-16(fp)
 100eadc:	1009883a 	mov	r4,r2
 100eae0:	100c1d80 	call	100c1d8 <metal_mutex_release>
	return vdev;
 100eae4:	e0bff217 	ldw	r2,-56(fp)
 100eae8:	00000a06 	br	100eb14 <remoteproc_create_virtio+0x37c>
		num_descs = vring_rsc->num;
		align = vring_rsc->align;
		size = vring_size(num_descs, align);
		va = remoteproc_mmap(rproc, NULL, &da, size, 0, &io);
		if (!va)
			goto err1;
 100eaec:	0001883a 	nop
 100eaf0:	00000106 	br	100eaf8 <remoteproc_create_virtio+0x360>
		ret = rproc_virtio_init_vring(vdev, i, notifyid,
					      va, io, num_descs, align);
		if (ret)
			goto err1;
 100eaf4:	0001883a 	nop
	}
	metal_mutex_release(&rproc->lock);
	return vdev;

err1:
	remoteproc_remove_virtio(rproc, vdev);
 100eaf8:	e17ff217 	ldw	r5,-56(fp)
 100eafc:	e13ffc17 	ldw	r4,-16(fp)
 100eb00:	100eb280 	call	100eb28 <remoteproc_remove_virtio>
	metal_mutex_release(&rproc->lock);
 100eb04:	e0bffc17 	ldw	r2,-16(fp)
 100eb08:	1009883a 	mov	r4,r2
 100eb0c:	100c1d80 	call	100c1d8 <metal_mutex_release>
	return NULL;
 100eb10:	0005883a 	mov	r2,zero
}
 100eb14:	e037883a 	mov	sp,fp
 100eb18:	dfc00117 	ldw	ra,4(sp)
 100eb1c:	df000017 	ldw	fp,0(sp)
 100eb20:	dec00204 	addi	sp,sp,8
 100eb24:	f800283a 	ret

0100eb28 <remoteproc_remove_virtio>:

void remoteproc_remove_virtio(struct remoteproc *rproc,
			      struct virtio_device *vdev)
{
 100eb28:	defffb04 	addi	sp,sp,-20
 100eb2c:	dfc00415 	stw	ra,16(sp)
 100eb30:	df000315 	stw	fp,12(sp)
 100eb34:	df000304 	addi	fp,sp,12
 100eb38:	e13ffe15 	stw	r4,-8(fp)
 100eb3c:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_virtio *rpvdev;

	(void)rproc;
	metal_assert(vdev);
 100eb40:	e0bfff17 	ldw	r2,-4(fp)
 100eb44:	1000081e 	bne	r2,zero,100eb68 <remoteproc_remove_virtio+0x40>
 100eb48:	01c040f4 	movhi	r7,259
 100eb4c:	39e78d04 	addi	r7,r7,-25036
 100eb50:	018040f4 	movhi	r6,259
 100eb54:	31a7a004 	addi	r6,r6,-24960
 100eb58:	0140eec4 	movi	r5,955
 100eb5c:	010040f4 	movhi	r4,259
 100eb60:	21266d04 	addi	r4,r4,-26188
 100eb64:	10156a00 	call	10156a0 <__assert_func>
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100eb68:	e0bfff17 	ldw	r2,-4(fp)
 100eb6c:	10bffc04 	addi	r2,r2,-16
 100eb70:	e0bffd15 	stw	r2,-12(fp)
	metal_list_del(&rpvdev->node);
 100eb74:	e0bffd17 	ldw	r2,-12(fp)
 100eb78:	10800f04 	addi	r2,r2,60
 100eb7c:	1009883a 	mov	r4,r2
 100eb80:	100bdb40 	call	100bdb4 <metal_list_del>
	rproc_virtio_remove_vdev(&rpvdev->vdev);
 100eb84:	e0bffd17 	ldw	r2,-12(fp)
 100eb88:	10800404 	addi	r2,r2,16
 100eb8c:	1009883a 	mov	r4,r2
 100eb90:	100f8240 	call	100f824 <rproc_virtio_remove_vdev>
}
 100eb94:	0001883a 	nop
 100eb98:	e037883a 	mov	sp,fp
 100eb9c:	dfc00117 	ldw	ra,4(sp)
 100eba0:	df000017 	ldw	fp,0(sp)
 100eba4:	dec00204 	addi	sp,sp,8
 100eba8:	f800283a 	ret

0100ebac <remoteproc_get_notification>:

int remoteproc_get_notification(struct remoteproc *rproc, uint32_t notifyid)
{
 100ebac:	defff904 	addi	sp,sp,-28
 100ebb0:	dfc00615 	stw	ra,24(sp)
 100ebb4:	df000515 	stw	fp,20(sp)
 100ebb8:	df000504 	addi	fp,sp,20
 100ebbc:	e13ffe15 	stw	r4,-8(fp)
 100ebc0:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct metal_list *node;
	int ret;

	metal_list_for_each(&rproc->vdevs, node) {
 100ebc4:	e0bffe17 	ldw	r2,-8(fp)
 100ebc8:	10800617 	ldw	r2,24(r2)
 100ebcc:	e0bffb15 	stw	r2,-20(fp)
 100ebd0:	00001006 	br	100ec14 <remoteproc_get_notification+0x68>
		rpvdev = metal_container_of(node, struct remoteproc_virtio,
 100ebd4:	e0bffb17 	ldw	r2,-20(fp)
 100ebd8:	10bff104 	addi	r2,r2,-60
 100ebdc:	e0bffc15 	stw	r2,-16(fp)
					    node);
		ret = rproc_virtio_notified(&rpvdev->vdev, notifyid);
 100ebe0:	e0bffc17 	ldw	r2,-16(fp)
 100ebe4:	10800404 	addi	r2,r2,16
 100ebe8:	e17fff17 	ldw	r5,-4(fp)
 100ebec:	1009883a 	mov	r4,r2
 100ebf0:	100f9780 	call	100f978 <rproc_virtio_notified>
 100ebf4:	e0bffd15 	stw	r2,-12(fp)
		if (ret)
 100ebf8:	e0bffd17 	ldw	r2,-12(fp)
 100ebfc:	10000226 	beq	r2,zero,100ec08 <remoteproc_get_notification+0x5c>
			return ret;
 100ec00:	e0bffd17 	ldw	r2,-12(fp)
 100ec04:	00000806 	br	100ec28 <remoteproc_get_notification+0x7c>
{
	struct remoteproc_virtio *rpvdev;
	struct metal_list *node;
	int ret;

	metal_list_for_each(&rproc->vdevs, node) {
 100ec08:	e0bffb17 	ldw	r2,-20(fp)
 100ec0c:	10800017 	ldw	r2,0(r2)
 100ec10:	e0bffb15 	stw	r2,-20(fp)
 100ec14:	e0bffe17 	ldw	r2,-8(fp)
 100ec18:	10c00604 	addi	r3,r2,24
 100ec1c:	e0bffb17 	ldw	r2,-20(fp)
 100ec20:	18bfec1e 	bne	r3,r2,100ebd4 <__alt_data_end+0xff00ebd4>
					    node);
		ret = rproc_virtio_notified(&rpvdev->vdev, notifyid);
		if (ret)
			return ret;
	}
	return 0;
 100ec24:	0005883a 	mov	r2,zero
}
 100ec28:	e037883a 	mov	sp,fp
 100ec2c:	dfc00117 	ldw	ra,4(sp)
 100ec30:	df000017 	ldw	fp,0(sp)
 100ec34:	dec00204 	addi	sp,sp,8
 100ec38:	f800283a 	ret

0100ec3c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 100ec3c:	defffd04 	addi	sp,sp,-12
 100ec40:	df000215 	stw	fp,8(sp)
 100ec44:	df000204 	addi	fp,sp,8
 100ec48:	e13ffe15 	stw	r4,-8(fp)
 100ec4c:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 100ec50:	e0bffe17 	ldw	r2,-8(fp)
 100ec54:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 100ec58:	10bfffe0 	cmpeqi	r2,r2,-1
 100ec5c:	1000091e 	bne	r2,zero,100ec84 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 100ec60:	e0bffe17 	ldw	r2,-8(fp)
 100ec64:	10800217 	ldw	r2,8(r2)
 100ec68:	e0ffff17 	ldw	r3,-4(fp)
 100ec6c:	1880052e 	bgeu	r3,r2,100ec84 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 100ec70:	e0bffe17 	ldw	r2,-8(fp)
 100ec74:	10c00017 	ldw	r3,0(r2)
		: NULL);
 100ec78:	e0bfff17 	ldw	r2,-4(fp)
 100ec7c:	1885883a 	add	r2,r3,r2
 100ec80:	00000106 	br	100ec88 <metal_io_virt+0x4c>
 100ec84:	0005883a 	mov	r2,zero
}
 100ec88:	e037883a 	mov	sp,fp
 100ec8c:	df000017 	ldw	fp,0(sp)
 100ec90:	dec00104 	addi	sp,sp,4
 100ec94:	f800283a 	ret

0100ec98 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100ec98:	defffc04 	addi	sp,sp,-16
 100ec9c:	df000315 	stw	fp,12(sp)
 100eca0:	df000304 	addi	fp,sp,12
 100eca4:	e13ffe15 	stw	r4,-8(fp)
 100eca8:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100ecac:	e0bfff17 	ldw	r2,-4(fp)
 100ecb0:	e0fffe17 	ldw	r3,-8(fp)
 100ecb4:	18c00017 	ldw	r3,0(r3)
 100ecb8:	10c5c83a 	sub	r2,r2,r3
 100ecbc:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100ecc0:	e0bffe17 	ldw	r2,-8(fp)
 100ecc4:	10800217 	ldw	r2,8(r2)
 100ecc8:	e0fffd17 	ldw	r3,-12(fp)
 100eccc:	1880022e 	bgeu	r3,r2,100ecd8 <metal_io_virt_to_offset+0x40>
 100ecd0:	e0bffd17 	ldw	r2,-12(fp)
 100ecd4:	00000106 	br	100ecdc <metal_io_virt_to_offset+0x44>
 100ecd8:	00bfffc4 	movi	r2,-1
}
 100ecdc:	e037883a 	mov	sp,fp
 100ece0:	df000017 	ldw	fp,0(sp)
 100ece4:	dec00104 	addi	sp,sp,4
 100ece8:	f800283a 	ret

0100ecec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 100ecec:	defff704 	addi	sp,sp,-36
 100ecf0:	dfc00815 	stw	ra,32(sp)
 100ecf4:	df000715 	stw	fp,28(sp)
 100ecf8:	dc400615 	stw	r17,24(sp)
 100ecfc:	dc000515 	stw	r16,20(sp)
 100ed00:	df000704 	addi	fp,sp,28
 100ed04:	e13ffa15 	stw	r4,-24(fp)
 100ed08:	e17ffb15 	stw	r5,-20(fp)
 100ed0c:	e1bffc15 	stw	r6,-16(fp)
 100ed10:	e1fffd15 	stw	r7,-12(fp)
	void *ptr = metal_io_virt(io, offset);
 100ed14:	e17ffb17 	ldw	r5,-20(fp)
 100ed18:	e13ffa17 	ldw	r4,-24(fp)
 100ed1c:	100ec3c0 	call	100ec3c <metal_io_virt>
 100ed20:	e0bff915 	stw	r2,-28(fp)

	if (io->ops.read)
 100ed24:	e0bffa17 	ldw	r2,-24(fp)
 100ed28:	10800617 	ldw	r2,24(r2)
 100ed2c:	10000a26 	beq	r2,zero,100ed58 <metal_io_read+0x6c>
		return (*io->ops.read)(io, offset, order, width);
 100ed30:	e0bffa17 	ldw	r2,-24(fp)
 100ed34:	10800617 	ldw	r2,24(r2)
 100ed38:	e1fffd17 	ldw	r7,-12(fp)
 100ed3c:	e1bffc17 	ldw	r6,-16(fp)
 100ed40:	e17ffb17 	ldw	r5,-20(fp)
 100ed44:	e13ffa17 	ldw	r4,-24(fp)
 100ed48:	103ee83a 	callr	r2
 100ed4c:	1021883a 	mov	r16,r2
 100ed50:	1823883a 	mov	r17,r3
 100ed54:	00004006 	br	100ee58 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uchar) == width)
 100ed58:	e0bff917 	ldw	r2,-28(fp)
 100ed5c:	10000a26 	beq	r2,zero,100ed88 <metal_io_read+0x9c>
 100ed60:	e0bffd17 	ldw	r2,-12(fp)
 100ed64:	10800058 	cmpnei	r2,r2,1
 100ed68:	1000071e 	bne	r2,zero,100ed88 <metal_io_read+0x9c>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 100ed6c:	0001b03a 	sync
 100ed70:	e0bff917 	ldw	r2,-28(fp)
 100ed74:	10800003 	ldbu	r2,0(r2)
 100ed78:	10803fcc 	andi	r2,r2,255
 100ed7c:	1021883a 	mov	r16,r2
 100ed80:	0023883a 	mov	r17,zero
 100ed84:	00003406 	br	100ee58 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ushort) == width)
 100ed88:	e0bff917 	ldw	r2,-28(fp)
 100ed8c:	10000a26 	beq	r2,zero,100edb8 <metal_io_read+0xcc>
 100ed90:	e0bffd17 	ldw	r2,-12(fp)
 100ed94:	10800098 	cmpnei	r2,r2,2
 100ed98:	1000071e 	bne	r2,zero,100edb8 <metal_io_read+0xcc>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 100ed9c:	0001b03a 	sync
 100eda0:	e0bff917 	ldw	r2,-28(fp)
 100eda4:	1080000b 	ldhu	r2,0(r2)
 100eda8:	10bfffcc 	andi	r2,r2,65535
 100edac:	1021883a 	mov	r16,r2
 100edb0:	0023883a 	mov	r17,zero
 100edb4:	00002806 	br	100ee58 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uint) == width)
 100edb8:	e0bff917 	ldw	r2,-28(fp)
 100edbc:	10000926 	beq	r2,zero,100ede4 <metal_io_read+0xf8>
 100edc0:	e0bffd17 	ldw	r2,-12(fp)
 100edc4:	10800118 	cmpnei	r2,r2,4
 100edc8:	1000061e 	bne	r2,zero,100ede4 <metal_io_read+0xf8>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 100edcc:	0001b03a 	sync
 100edd0:	e0bff917 	ldw	r2,-28(fp)
 100edd4:	10800017 	ldw	r2,0(r2)
 100edd8:	1021883a 	mov	r16,r2
 100eddc:	0023883a 	mov	r17,zero
 100ede0:	00001d06 	br	100ee58 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ulong) == width)
 100ede4:	e0bff917 	ldw	r2,-28(fp)
 100ede8:	10000926 	beq	r2,zero,100ee10 <metal_io_read+0x124>
 100edec:	e0bffd17 	ldw	r2,-12(fp)
 100edf0:	10800118 	cmpnei	r2,r2,4
 100edf4:	1000061e 	bne	r2,zero,100ee10 <metal_io_read+0x124>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 100edf8:	0001b03a 	sync
 100edfc:	e0bff917 	ldw	r2,-28(fp)
 100ee00:	10800017 	ldw	r2,0(r2)
 100ee04:	1021883a 	mov	r16,r2
 100ee08:	0023883a 	mov	r17,zero
 100ee0c:	00001206 	br	100ee58 <metal_io_read+0x16c>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 100ee10:	e0bff917 	ldw	r2,-28(fp)
 100ee14:	10000826 	beq	r2,zero,100ee38 <metal_io_read+0x14c>
 100ee18:	e0bffd17 	ldw	r2,-12(fp)
 100ee1c:	10800218 	cmpnei	r2,r2,8
 100ee20:	1000051e 	bne	r2,zero,100ee38 <metal_io_read+0x14c>
		return atomic_load_explicit((atomic_ullong *)ptr, order);
 100ee24:	0001b03a 	sync
 100ee28:	e0bff917 	ldw	r2,-28(fp)
 100ee2c:	14000017 	ldw	r16,0(r2)
 100ee30:	14400117 	ldw	r17,4(r2)
 100ee34:	00000806 	br	100ee58 <metal_io_read+0x16c>
#endif
	metal_assert(0);
 100ee38:	01c040f4 	movhi	r7,259
 100ee3c:	39e7a704 	addi	r7,r7,-24932
 100ee40:	018040f4 	movhi	r6,259
 100ee44:	31a7d004 	addi	r6,r6,-24768
 100ee48:	01403f84 	movi	r5,254
 100ee4c:	010040f4 	movhi	r4,259
 100ee50:	2127a804 	addi	r4,r4,-24928
 100ee54:	10156a00 	call	10156a0 <__assert_func>
 100ee58:	8007883a 	mov	r3,r16
 100ee5c:	8809883a 	mov	r4,r17
	return 0; /* quiet compiler */
}
 100ee60:	1805883a 	mov	r2,r3
 100ee64:	2007883a 	mov	r3,r4
 100ee68:	e6fffe04 	addi	sp,fp,-8
 100ee6c:	dfc00317 	ldw	ra,12(sp)
 100ee70:	df000217 	ldw	fp,8(sp)
 100ee74:	dc400117 	ldw	r17,4(sp)
 100ee78:	dc000017 	ldw	r16,0(sp)
 100ee7c:	dec00404 	addi	sp,sp,16
 100ee80:	f800283a 	ret

0100ee84 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 100ee84:	defff704 	addi	sp,sp,-36
 100ee88:	dfc00815 	stw	ra,32(sp)
 100ee8c:	df000715 	stw	fp,28(sp)
 100ee90:	df000704 	addi	fp,sp,28
 100ee94:	e13ffc15 	stw	r4,-16(fp)
 100ee98:	e17ffd15 	stw	r5,-12(fp)
 100ee9c:	e1bffe15 	stw	r6,-8(fp)
 100eea0:	e1ffff15 	stw	r7,-4(fp)
	void *ptr = metal_io_virt(io, offset);
 100eea4:	e17ffd17 	ldw	r5,-12(fp)
 100eea8:	e13ffc17 	ldw	r4,-16(fp)
 100eeac:	100ec3c0 	call	100ec3c <metal_io_virt>
 100eeb0:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.write)
 100eeb4:	e0bffc17 	ldw	r2,-16(fp)
 100eeb8:	10800717 	ldw	r2,28(r2)
 100eebc:	10000c26 	beq	r2,zero,100eef0 <metal_io_write+0x6c>
		(*io->ops.write)(io, offset, value, order, width);
 100eec0:	e0bffc17 	ldw	r2,-16(fp)
 100eec4:	10800717 	ldw	r2,28(r2)
 100eec8:	e0c00317 	ldw	r3,12(fp)
 100eecc:	d8c00115 	stw	r3,4(sp)
 100eed0:	e0c00217 	ldw	r3,8(fp)
 100eed4:	d8c00015 	stw	r3,0(sp)
 100eed8:	e1bffe17 	ldw	r6,-8(fp)
 100eedc:	e1ffff17 	ldw	r7,-4(fp)
 100eee0:	e17ffd17 	ldw	r5,-12(fp)
 100eee4:	e13ffc17 	ldw	r4,-16(fp)
 100eee8:	103ee83a 	callr	r2
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 100eeec:	00003e06 	br	100efe8 <metal_io_write+0x164>
	       uint64_t value, memory_order order, int width)
{
	void *ptr = metal_io_virt(io, offset);
	if (io->ops.write)
		(*io->ops.write)(io, offset, value, order, width);
	else if (ptr && sizeof(atomic_uchar) == width)
 100eef0:	e0bffb17 	ldw	r2,-20(fp)
 100eef4:	10000926 	beq	r2,zero,100ef1c <metal_io_write+0x98>
 100eef8:	e0800317 	ldw	r2,12(fp)
 100eefc:	10800058 	cmpnei	r2,r2,1
 100ef00:	1000061e 	bne	r2,zero,100ef1c <metal_io_write+0x98>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 100ef04:	e0bffe17 	ldw	r2,-8(fp)
 100ef08:	1007883a 	mov	r3,r2
 100ef0c:	e0bffb17 	ldw	r2,-20(fp)
 100ef10:	10c00005 	stb	r3,0(r2)
 100ef14:	0001b03a 	sync
 100ef18:	00003306 	br	100efe8 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ushort) == width)
 100ef1c:	e0bffb17 	ldw	r2,-20(fp)
 100ef20:	10000926 	beq	r2,zero,100ef48 <metal_io_write+0xc4>
 100ef24:	e0800317 	ldw	r2,12(fp)
 100ef28:	10800098 	cmpnei	r2,r2,2
 100ef2c:	1000061e 	bne	r2,zero,100ef48 <metal_io_write+0xc4>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 100ef30:	e0bffe17 	ldw	r2,-8(fp)
 100ef34:	1007883a 	mov	r3,r2
 100ef38:	e0bffb17 	ldw	r2,-20(fp)
 100ef3c:	10c0000d 	sth	r3,0(r2)
 100ef40:	0001b03a 	sync
 100ef44:	00002806 	br	100efe8 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_uint) == width)
 100ef48:	e0bffb17 	ldw	r2,-20(fp)
 100ef4c:	10000826 	beq	r2,zero,100ef70 <metal_io_write+0xec>
 100ef50:	e0800317 	ldw	r2,12(fp)
 100ef54:	10800118 	cmpnei	r2,r2,4
 100ef58:	1000051e 	bne	r2,zero,100ef70 <metal_io_write+0xec>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 100ef5c:	e0fffe17 	ldw	r3,-8(fp)
 100ef60:	e0bffb17 	ldw	r2,-20(fp)
 100ef64:	10c00015 	stw	r3,0(r2)
 100ef68:	0001b03a 	sync
 100ef6c:	00001e06 	br	100efe8 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ulong) == width)
 100ef70:	e0bffb17 	ldw	r2,-20(fp)
 100ef74:	10000826 	beq	r2,zero,100ef98 <metal_io_write+0x114>
 100ef78:	e0800317 	ldw	r2,12(fp)
 100ef7c:	10800118 	cmpnei	r2,r2,4
 100ef80:	1000051e 	bne	r2,zero,100ef98 <metal_io_write+0x114>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 100ef84:	e0fffe17 	ldw	r3,-8(fp)
 100ef88:	e0bffb17 	ldw	r2,-20(fp)
 100ef8c:	10c00015 	stw	r3,0(r2)
 100ef90:	0001b03a 	sync
 100ef94:	00001406 	br	100efe8 <metal_io_write+0x164>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 100ef98:	e0bffb17 	ldw	r2,-20(fp)
 100ef9c:	10000a26 	beq	r2,zero,100efc8 <metal_io_write+0x144>
 100efa0:	e0800317 	ldw	r2,12(fp)
 100efa4:	10800218 	cmpnei	r2,r2,8
 100efa8:	1000071e 	bne	r2,zero,100efc8 <metal_io_write+0x144>
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
 100efac:	e0bffb17 	ldw	r2,-20(fp)
 100efb0:	e0fffe17 	ldw	r3,-8(fp)
 100efb4:	10c00015 	stw	r3,0(r2)
 100efb8:	e0ffff17 	ldw	r3,-4(fp)
 100efbc:	10c00115 	stw	r3,4(r2)
 100efc0:	0001b03a 	sync
 100efc4:	00000806 	br	100efe8 <metal_io_write+0x164>
#endif
	else
		metal_assert (0);
 100efc8:	01c040f4 	movhi	r7,259
 100efcc:	39e7a704 	addi	r7,r7,-24932
 100efd0:	018040f4 	movhi	r6,259
 100efd4:	31a7d404 	addi	r6,r6,-24752
 100efd8:	01404804 	movi	r5,288
 100efdc:	010040f4 	movhi	r4,259
 100efe0:	2127a804 	addi	r4,r4,-24928
 100efe4:	10156a00 	call	10156a0 <__assert_func>
}
 100efe8:	0001883a 	nop
 100efec:	e037883a 	mov	sp,fp
 100eff0:	dfc00117 	ldw	ra,4(sp)
 100eff4:	df000017 	ldw	fp,0(sp)
 100eff8:	dec00204 	addi	sp,sp,8
 100effc:	f800283a 	ret

0100f000 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 100f000:	defffd04 	addi	sp,sp,-12
 100f004:	dfc00215 	stw	ra,8(sp)
 100f008:	df000115 	stw	fp,4(sp)
 100f00c:	df000104 	addi	fp,sp,4
 100f010:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 100f014:	e13fff17 	ldw	r4,-4(fp)
 100f018:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 100f01c:	e037883a 	mov	sp,fp
 100f020:	dfc00117 	ldw	ra,4(sp)
 100f024:	df000017 	ldw	fp,0(sp)
 100f028:	dec00204 	addi	sp,sp,8
 100f02c:	f800283a 	ret

0100f030 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 100f030:	defffd04 	addi	sp,sp,-12
 100f034:	dfc00215 	stw	ra,8(sp)
 100f038:	df000115 	stw	fp,4(sp)
 100f03c:	df000104 	addi	fp,sp,4
 100f040:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 100f044:	e13fff17 	ldw	r4,-4(fp)
 100f048:	10011840 	call	1001184 <vPortFree>
}
 100f04c:	0001883a 	nop
 100f050:	e037883a 	mov	sp,fp
 100f054:	dfc00117 	ldw	ra,4(sp)
 100f058:	df000017 	ldw	fp,0(sp)
 100f05c:	dec00204 	addi	sp,sp,8
 100f060:	f800283a 	ret

0100f064 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 100f064:	defffb04 	addi	sp,sp,-20
 100f068:	dfc00415 	stw	ra,16(sp)
 100f06c:	df000315 	stw	fp,12(sp)
 100f070:	df000304 	addi	fp,sp,12
 100f074:	e13fff15 	stw	r4,-4(fp)
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
 100f078:	e0bfff17 	ldw	r2,-4(fp)
 100f07c:	100490fa 	slli	r2,r2,3
void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 100f080:	10800d04 	addi	r2,r2,52
 100f084:	e0bffd15 	stw	r2,-12(fp)
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = metal_allocate_memory(vq_size);
 100f088:	e13ffd17 	ldw	r4,-12(fp)
 100f08c:	100f0000 	call	100f000 <metal_allocate_memory>
 100f090:	e0bffe15 	stw	r2,-8(fp)
	if (vqs) {
 100f094:	e0bffe17 	ldw	r2,-8(fp)
 100f098:	10000426 	beq	r2,zero,100f0ac <virtqueue_allocate+0x48>
		memset(vqs, 0x00, vq_size);
 100f09c:	e1bffd17 	ldw	r6,-12(fp)
 100f0a0:	000b883a 	mov	r5,zero
 100f0a4:	e13ffe17 	ldw	r4,-8(fp)
 100f0a8:	101593c0 	call	101593c <memset>
	}

	return vqs;
 100f0ac:	e0bffe17 	ldw	r2,-8(fp)
}
 100f0b0:	e037883a 	mov	sp,fp
 100f0b4:	dfc00117 	ldw	ra,4(sp)
 100f0b8:	df000017 	ldw	fp,0(sp)
 100f0bc:	dec00204 	addi	sp,sp,8
 100f0c0:	f800283a 	ret

0100f0c4 <rproc_virtio_virtqueue_notify>:
#include <cpu.h>
#include <utilities.h>
#include <alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 100f0c4:	defff904 	addi	sp,sp,-28
 100f0c8:	dfc00615 	stw	ra,24(sp)
 100f0cc:	df000515 	stw	fp,20(sp)
 100f0d0:	df000504 	addi	fp,sp,20
 100f0d4:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 100f0d8:	e0bfff17 	ldw	r2,-4(fp)
 100f0dc:	1080020b 	ldhu	r2,8(r2)
 100f0e0:	10bfffcc 	andi	r2,r2,65535
 100f0e4:	e0bffb15 	stw	r2,-20(fp)

	vdev = vq->vq_dev;
 100f0e8:	e0bfff17 	ldw	r2,-4(fp)
 100f0ec:	10800017 	ldw	r2,0(r2)
 100f0f0:	e0bffc15 	stw	r2,-16(fp)
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f0f4:	e0bffc17 	ldw	r2,-16(fp)
 100f0f8:	10bffc04 	addi	r2,r2,-16
 100f0fc:	e0bffd15 	stw	r2,-12(fp)
	metal_assert(vq_id < vdev->vrings_num);
 100f100:	e0bffc17 	ldw	r2,-16(fp)
 100f104:	10800917 	ldw	r2,36(r2)
 100f108:	e0fffb17 	ldw	r3,-20(fp)
 100f10c:	18800836 	bltu	r3,r2,100f130 <rproc_virtio_virtqueue_notify+0x6c>
 100f110:	01c040f4 	movhi	r7,259
 100f114:	39e7ad04 	addi	r7,r7,-24908
 100f118:	018040f4 	movhi	r6,259
 100f11c:	31a7c804 	addi	r6,r6,-24800
 100f120:	01400744 	movi	r5,29
 100f124:	010040f4 	movhi	r4,259
 100f128:	2127b404 	addi	r4,r4,-24880
 100f12c:	10156a00 	call	10156a0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 100f130:	e0bffc17 	ldw	r2,-16(fp)
 100f134:	10c00a17 	ldw	r3,40(r2)
 100f138:	e0bffb17 	ldw	r2,-20(fp)
 100f13c:	10800624 	muli	r2,r2,24
 100f140:	1885883a 	add	r2,r3,r2
 100f144:	e0bffe15 	stw	r2,-8(fp)
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 100f148:	e0bffd17 	ldw	r2,-12(fp)
 100f14c:	10800317 	ldw	r2,12(r2)
 100f150:	e0fffd17 	ldw	r3,-12(fp)
 100f154:	19000017 	ldw	r4,0(r3)
 100f158:	e0fffe17 	ldw	r3,-8(fp)
 100f15c:	18c00417 	ldw	r3,16(r3)
 100f160:	180b883a 	mov	r5,r3
 100f164:	103ee83a 	callr	r2
}
 100f168:	0001883a 	nop
 100f16c:	e037883a 	mov	sp,fp
 100f170:	dfc00117 	ldw	ra,4(sp)
 100f174:	df000017 	ldw	fp,0(sp)
 100f178:	dec00204 	addi	sp,sp,8
 100f17c:	f800283a 	ret

0100f180 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 100f180:	defff904 	addi	sp,sp,-28
 100f184:	dfc00615 	stw	ra,24(sp)
 100f188:	df000515 	stw	fp,20(sp)
 100f18c:	df000504 	addi	fp,sp,20
 100f190:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f194:	e0bfff17 	ldw	r2,-4(fp)
 100f198:	10bffc04 	addi	r2,r2,-16
 100f19c:	e0bffb15 	stw	r2,-20(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100f1a0:	e0bffb17 	ldw	r2,-20(fp)
 100f1a4:	10800117 	ldw	r2,4(r2)
 100f1a8:	e0bffc15 	stw	r2,-16(fp)
	io = rpvdev->vdev_rsc_io;
 100f1ac:	e0bffb17 	ldw	r2,-20(fp)
 100f1b0:	10800217 	ldw	r2,8(r2)
 100f1b4:	e0bffd15 	stw	r2,-12(fp)
	status = metal_io_read8(io,
 100f1b8:	e0bffc17 	ldw	r2,-16(fp)
 100f1bc:	10800604 	addi	r2,r2,24
 100f1c0:	100b883a 	mov	r5,r2
 100f1c4:	e13ffd17 	ldw	r4,-12(fp)
 100f1c8:	100ec980 	call	100ec98 <metal_io_virt_to_offset>
 100f1cc:	01c00044 	movi	r7,1
 100f1d0:	01800144 	movi	r6,5
 100f1d4:	100b883a 	mov	r5,r2
 100f1d8:	e13ffd17 	ldw	r4,-12(fp)
 100f1dc:	100ecec0 	call	100ecec <metal_io_read>
 100f1e0:	1009883a 	mov	r4,r2
 100f1e4:	180b883a 	mov	r5,r3
 100f1e8:	e13ffe05 	stb	r4,-8(fp)
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 100f1ec:	e0bffe03 	ldbu	r2,-8(fp)
}
 100f1f0:	e037883a 	mov	sp,fp
 100f1f4:	dfc00117 	ldw	ra,4(sp)
 100f1f8:	df000017 	ldw	fp,0(sp)
 100f1fc:	dec00204 	addi	sp,sp,8
 100f200:	f800283a 	ret

0100f204 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 100f204:	defff504 	addi	sp,sp,-44
 100f208:	dfc00a15 	stw	ra,40(sp)
 100f20c:	df000915 	stw	fp,36(sp)
 100f210:	dc400815 	stw	r17,32(sp)
 100f214:	dc000715 	stw	r16,28(sp)
 100f218:	df000904 	addi	fp,sp,36
 100f21c:	e13ffc15 	stw	r4,-16(fp)
 100f220:	2805883a 	mov	r2,r5
 100f224:	e0bffd05 	stb	r2,-12(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f228:	e0bffc17 	ldw	r2,-16(fp)
 100f22c:	10bffc04 	addi	r2,r2,-16
 100f230:	e0bff915 	stw	r2,-28(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100f234:	e0bff917 	ldw	r2,-28(fp)
 100f238:	10800117 	ldw	r2,4(r2)
 100f23c:	e0bffa15 	stw	r2,-24(fp)
	io = rpvdev->vdev_rsc_io;
 100f240:	e0bff917 	ldw	r2,-28(fp)
 100f244:	10800217 	ldw	r2,8(r2)
 100f248:	e0bffb15 	stw	r2,-20(fp)
	metal_io_write8(io,
 100f24c:	e0bffa17 	ldw	r2,-24(fp)
 100f250:	10800604 	addi	r2,r2,24
 100f254:	100b883a 	mov	r5,r2
 100f258:	e13ffb17 	ldw	r4,-20(fp)
 100f25c:	100ec980 	call	100ec98 <metal_io_virt_to_offset>
 100f260:	1007883a 	mov	r3,r2
 100f264:	e0bffd03 	ldbu	r2,-12(fp)
 100f268:	10803fcc 	andi	r2,r2,255
 100f26c:	1021883a 	mov	r16,r2
 100f270:	0023883a 	mov	r17,zero
 100f274:	00800044 	movi	r2,1
 100f278:	d8800115 	stw	r2,4(sp)
 100f27c:	00800144 	movi	r2,5
 100f280:	d8800015 	stw	r2,0(sp)
 100f284:	800d883a 	mov	r6,r16
 100f288:	880f883a 	mov	r7,r17
 100f28c:	180b883a 	mov	r5,r3
 100f290:	e13ffb17 	ldw	r4,-20(fp)
 100f294:	100ee840 	call	100ee84 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
 100f298:	e0bff917 	ldw	r2,-28(fp)
 100f29c:	10800317 	ldw	r2,12(r2)
 100f2a0:	e0fff917 	ldw	r3,-28(fp)
 100f2a4:	19000017 	ldw	r4,0(r3)
 100f2a8:	e0fffc17 	ldw	r3,-16(fp)
 100f2ac:	18c00017 	ldw	r3,0(r3)
 100f2b0:	180b883a 	mov	r5,r3
 100f2b4:	103ee83a 	callr	r2
}
 100f2b8:	0001883a 	nop
 100f2bc:	e6fffe04 	addi	sp,fp,-8
 100f2c0:	dfc00317 	ldw	ra,12(sp)
 100f2c4:	df000217 	ldw	fp,8(sp)
 100f2c8:	dc400117 	ldw	r17,4(sp)
 100f2cc:	dc000017 	ldw	r16,0(sp)
 100f2d0:	dec00404 	addi	sp,sp,16
 100f2d4:	f800283a 	ret

0100f2d8 <rproc_virtio_get_dfeatures>:
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
 100f2d8:	defff904 	addi	sp,sp,-28
 100f2dc:	dfc00615 	stw	ra,24(sp)
 100f2e0:	df000515 	stw	fp,20(sp)
 100f2e4:	df000504 	addi	fp,sp,20
 100f2e8:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f2ec:	e0bfff17 	ldw	r2,-4(fp)
 100f2f0:	10bffc04 	addi	r2,r2,-16
 100f2f4:	e0bffb15 	stw	r2,-20(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100f2f8:	e0bffb17 	ldw	r2,-20(fp)
 100f2fc:	10800117 	ldw	r2,4(r2)
 100f300:	e0bffc15 	stw	r2,-16(fp)
	io = rpvdev->vdev_rsc_io;
 100f304:	e0bffb17 	ldw	r2,-20(fp)
 100f308:	10800217 	ldw	r2,8(r2)
 100f30c:	e0bffd15 	stw	r2,-12(fp)
	features = metal_io_read32(io,
 100f310:	e0bffc17 	ldw	r2,-16(fp)
 100f314:	10800304 	addi	r2,r2,12
 100f318:	100b883a 	mov	r5,r2
 100f31c:	e13ffd17 	ldw	r4,-12(fp)
 100f320:	100ec980 	call	100ec98 <metal_io_virt_to_offset>
 100f324:	01c00104 	movi	r7,4
 100f328:	01800144 	movi	r6,5
 100f32c:	100b883a 	mov	r5,r2
 100f330:	e13ffd17 	ldw	r4,-12(fp)
 100f334:	100ecec0 	call	100ecec <metal_io_read>
 100f338:	1009883a 	mov	r4,r2
 100f33c:	180b883a 	mov	r5,r3
 100f340:	e13ffe15 	stw	r4,-8(fp)
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 100f344:	e0bffe17 	ldw	r2,-8(fp)
}
 100f348:	e037883a 	mov	sp,fp
 100f34c:	dfc00117 	ldw	ra,4(sp)
 100f350:	df000017 	ldw	fp,0(sp)
 100f354:	dec00204 	addi	sp,sp,8
 100f358:	f800283a 	ret

0100f35c <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 100f35c:	defff804 	addi	sp,sp,-32
 100f360:	dfc00715 	stw	ra,28(sp)
 100f364:	df000615 	stw	fp,24(sp)
 100f368:	df000604 	addi	fp,sp,24
 100f36c:	e13fff15 	stw	r4,-4(fp)
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f370:	e0bfff17 	ldw	r2,-4(fp)
 100f374:	10bffc04 	addi	r2,r2,-16
 100f378:	e0bffa15 	stw	r2,-24(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100f37c:	e0bffa17 	ldw	r2,-24(fp)
 100f380:	10800117 	ldw	r2,4(r2)
 100f384:	e0bffb15 	stw	r2,-20(fp)
	io = rpvdev->vdev_rsc_io;
 100f388:	e0bffa17 	ldw	r2,-24(fp)
 100f38c:	10800217 	ldw	r2,8(r2)
 100f390:	e0bffc15 	stw	r2,-16(fp)
	gfeatures = metal_io_read32(io,
 100f394:	e0bffb17 	ldw	r2,-20(fp)
 100f398:	10800404 	addi	r2,r2,16
 100f39c:	100b883a 	mov	r5,r2
 100f3a0:	e13ffc17 	ldw	r4,-16(fp)
 100f3a4:	100ec980 	call	100ec98 <metal_io_virt_to_offset>
 100f3a8:	01c00104 	movi	r7,4
 100f3ac:	01800144 	movi	r6,5
 100f3b0:	100b883a 	mov	r5,r2
 100f3b4:	e13ffc17 	ldw	r4,-16(fp)
 100f3b8:	100ecec0 	call	100ecec <metal_io_read>
 100f3bc:	1009883a 	mov	r4,r2
 100f3c0:	180b883a 	mov	r5,r3
 100f3c4:	e13ffd15 	stw	r4,-12(fp)
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
 100f3c8:	e13fff17 	ldw	r4,-4(fp)
 100f3cc:	100f2d80 	call	100f2d8 <rproc_virtio_get_dfeatures>
 100f3d0:	e0bffe15 	stw	r2,-8(fp)

	return dfeatures & gfeatures;
 100f3d4:	e0fffe17 	ldw	r3,-8(fp)
 100f3d8:	e0bffd17 	ldw	r2,-12(fp)
 100f3dc:	1884703a 	and	r2,r3,r2
}
 100f3e0:	e037883a 	mov	sp,fp
 100f3e4:	dfc00117 	ldw	ra,4(sp)
 100f3e8:	df000017 	ldw	fp,0(sp)
 100f3ec:	dec00204 	addi	sp,sp,8
 100f3f0:	f800283a 	ret

0100f3f4 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 100f3f4:	defff504 	addi	sp,sp,-44
 100f3f8:	dfc00a15 	stw	ra,40(sp)
 100f3fc:	df000915 	stw	fp,36(sp)
 100f400:	dc400815 	stw	r17,32(sp)
 100f404:	dc000715 	stw	r16,28(sp)
 100f408:	df000904 	addi	fp,sp,36
 100f40c:	e13ffc15 	stw	r4,-16(fp)
 100f410:	e17ffd15 	stw	r5,-12(fp)
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f414:	e0bffc17 	ldw	r2,-16(fp)
 100f418:	10bffc04 	addi	r2,r2,-16
 100f41c:	e0bff915 	stw	r2,-28(fp)
	vdev_rsc = rpvdev->vdev_rsc;
 100f420:	e0bff917 	ldw	r2,-28(fp)
 100f424:	10800117 	ldw	r2,4(r2)
 100f428:	e0bffa15 	stw	r2,-24(fp)
	io = rpvdev->vdev_rsc_io;
 100f42c:	e0bff917 	ldw	r2,-28(fp)
 100f430:	10800217 	ldw	r2,8(r2)
 100f434:	e0bffb15 	stw	r2,-20(fp)
	metal_io_write32(io,
 100f438:	e0bffa17 	ldw	r2,-24(fp)
 100f43c:	10800404 	addi	r2,r2,16
 100f440:	100b883a 	mov	r5,r2
 100f444:	e13ffb17 	ldw	r4,-20(fp)
 100f448:	100ec980 	call	100ec98 <metal_io_virt_to_offset>
 100f44c:	1007883a 	mov	r3,r2
 100f450:	e0bffd17 	ldw	r2,-12(fp)
 100f454:	1021883a 	mov	r16,r2
 100f458:	0023883a 	mov	r17,zero
 100f45c:	00800104 	movi	r2,4
 100f460:	d8800115 	stw	r2,4(sp)
 100f464:	00800144 	movi	r2,5
 100f468:	d8800015 	stw	r2,0(sp)
 100f46c:	800d883a 	mov	r6,r16
 100f470:	880f883a 	mov	r7,r17
 100f474:	180b883a 	mov	r5,r3
 100f478:	e13ffb17 	ldw	r4,-20(fp)
 100f47c:	100ee840 	call	100ee84 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->gfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
 100f480:	e0bff917 	ldw	r2,-28(fp)
 100f484:	10800317 	ldw	r2,12(r2)
 100f488:	e0fff917 	ldw	r3,-28(fp)
 100f48c:	19000017 	ldw	r4,0(r3)
 100f490:	e0fffc17 	ldw	r3,-16(fp)
 100f494:	18c00017 	ldw	r3,0(r3)
 100f498:	180b883a 	mov	r5,r3
 100f49c:	103ee83a 	callr	r2
}
 100f4a0:	0001883a 	nop
 100f4a4:	e6fffe04 	addi	sp,fp,-8
 100f4a8:	dfc00317 	ldw	ra,12(sp)
 100f4ac:	df000217 	ldw	fp,8(sp)
 100f4b0:	dc400117 	ldw	r17,4(sp)
 100f4b4:	dc000017 	ldw	r16,0(sp)
 100f4b8:	dec00404 	addi	sp,sp,16
 100f4bc:	f800283a 	ret

0100f4c0 <rproc_virtio_negotiate_features>:

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 100f4c0:	defffb04 	addi	sp,sp,-20
 100f4c4:	dfc00415 	stw	ra,16(sp)
 100f4c8:	df000315 	stw	fp,12(sp)
 100f4cc:	df000304 	addi	fp,sp,12
 100f4d0:	e13ffe15 	stw	r4,-8(fp)
 100f4d4:	e17fff15 	stw	r5,-4(fp)
	uint32_t dfeatures = rproc_virtio_get_dfeatures(vdev);
 100f4d8:	e13ffe17 	ldw	r4,-8(fp)
 100f4dc:	100f2d80 	call	100f2d8 <rproc_virtio_get_dfeatures>
 100f4e0:	e0bffd15 	stw	r2,-12(fp)
	rproc_virtio_set_features(vdev, dfeatures & features);
 100f4e4:	e0fffd17 	ldw	r3,-12(fp)
 100f4e8:	e0bfff17 	ldw	r2,-4(fp)
 100f4ec:	1884703a 	and	r2,r3,r2
 100f4f0:	100b883a 	mov	r5,r2
 100f4f4:	e13ffe17 	ldw	r4,-8(fp)
 100f4f8:	100f3f40 	call	100f3f4 <rproc_virtio_set_features>
	return 0;
 100f4fc:	0005883a 	mov	r2,zero
}
 100f500:	e037883a 	mov	sp,fp
 100f504:	dfc00117 	ldw	ra,4(sp)
 100f508:	df000017 	ldw	fp,0(sp)
 100f50c:	dec00204 	addi	sp,sp,8
 100f510:	f800283a 	ret

0100f514 <rproc_virtio_read_config>:
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 100f514:	defffb04 	addi	sp,sp,-20
 100f518:	df000415 	stw	fp,16(sp)
 100f51c:	df000404 	addi	fp,sp,16
 100f520:	e13ffc15 	stw	r4,-16(fp)
 100f524:	e17ffd15 	stw	r5,-12(fp)
 100f528:	e1bffe15 	stw	r6,-8(fp)
 100f52c:	e1ffff15 	stw	r7,-4(fp)
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 100f530:	0001883a 	nop
 100f534:	e037883a 	mov	sp,fp
 100f538:	df000017 	ldw	fp,0(sp)
 100f53c:	dec00104 	addi	sp,sp,4
 100f540:	f800283a 	ret

0100f544 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 100f544:	defffb04 	addi	sp,sp,-20
 100f548:	df000415 	stw	fp,16(sp)
 100f54c:	df000404 	addi	fp,sp,16
 100f550:	e13ffc15 	stw	r4,-16(fp)
 100f554:	e17ffd15 	stw	r5,-12(fp)
 100f558:	e1bffe15 	stw	r6,-8(fp)
 100f55c:	e1ffff15 	stw	r7,-4(fp)
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 100f560:	0001883a 	nop
 100f564:	e037883a 	mov	sp,fp
 100f568:	df000017 	ldw	fp,0(sp)
 100f56c:	dec00104 	addi	sp,sp,4
 100f570:	f800283a 	ret

0100f574 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 100f574:	defffd04 	addi	sp,sp,-12
 100f578:	dfc00215 	stw	ra,8(sp)
 100f57c:	df000115 	stw	fp,4(sp)
 100f580:	df000104 	addi	fp,sp,4
 100f584:	e13fff15 	stw	r4,-4(fp)
	if (vdev->role == VIRTIO_DEV_MASTER)
 100f588:	e0bfff17 	ldw	r2,-4(fp)
 100f58c:	10800517 	ldw	r2,20(r2)
 100f590:	1000031e 	bne	r2,zero,100f5a0 <rproc_virtio_reset_device+0x2c>
		rproc_virtio_set_status(vdev,
 100f594:	01401004 	movi	r5,64
 100f598:	e13fff17 	ldw	r4,-4(fp)
 100f59c:	100f2040 	call	100f204 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 100f5a0:	0001883a 	nop
 100f5a4:	e037883a 	mov	sp,fp
 100f5a8:	dfc00117 	ldw	ra,4(sp)
 100f5ac:	df000017 	ldw	fp,0(sp)
 100f5b0:	dec00204 	addi	sp,sp,8
 100f5b4:	f800283a 	ret

0100f5b8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 100f5b8:	defff004 	addi	sp,sp,-64
 100f5bc:	dfc00f15 	stw	ra,60(sp)
 100f5c0:	df000e15 	stw	fp,56(sp)
 100f5c4:	df000e04 	addi	fp,sp,56
 100f5c8:	e13ffc15 	stw	r4,-16(fp)
 100f5cc:	e17ffd15 	stw	r5,-12(fp)
 100f5d0:	e1bffe15 	stw	r6,-8(fp)
 100f5d4:	e1ffff15 	stw	r7,-4(fp)
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 100f5d8:	e0bffe17 	ldw	r2,-8(fp)
 100f5dc:	e0bff415 	stw	r2,-48(fp)
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 100f5e0:	e0bff417 	ldw	r2,-48(fp)
 100f5e4:	10800643 	ldbu	r2,25(r2)
 100f5e8:	10803fcc 	andi	r2,r2,255
 100f5ec:	e0bff515 	stw	r2,-44(fp)
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 100f5f0:	01001104 	movi	r4,68
 100f5f4:	100f0000 	call	100f000 <metal_allocate_memory>
 100f5f8:	e0bff615 	stw	r2,-40(fp)
	if (!rpvdev)
 100f5fc:	e0bff617 	ldw	r2,-40(fp)
 100f600:	1000021e 	bne	r2,zero,100f60c <rproc_virtio_create_vdev+0x54>
		return NULL;
 100f604:	0005883a 	mov	r2,zero
 100f608:	00008106 	br	100f810 <rproc_virtio_create_vdev+0x258>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 100f60c:	e0bff517 	ldw	r2,-44(fp)
 100f610:	10800624 	muli	r2,r2,24
 100f614:	1009883a 	mov	r4,r2
 100f618:	100f0000 	call	100f000 <metal_allocate_memory>
 100f61c:	e0bff715 	stw	r2,-36(fp)
	if (!vrings_info)
 100f620:	e0bff717 	ldw	r2,-36(fp)
 100f624:	10007626 	beq	r2,zero,100f800 <rproc_virtio_create_vdev+0x248>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 100f628:	01801104 	movi	r6,68
 100f62c:	000b883a 	mov	r5,zero
 100f630:	e13ff617 	ldw	r4,-40(fp)
 100f634:	101593c0 	call	101593c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 100f638:	01800604 	movi	r6,24
 100f63c:	000b883a 	mov	r5,zero
 100f640:	e13ff717 	ldw	r4,-36(fp)
 100f644:	101593c0 	call	101593c <memset>
	vdev = &rpvdev->vdev;
 100f648:	e0bff617 	ldw	r2,-40(fp)
 100f64c:	10800404 	addi	r2,r2,16
 100f650:	e0bff815 	stw	r2,-32(fp)

	for (i = 0; i < num_vrings; i++) {
 100f654:	e03ff215 	stw	zero,-56(fp)
 100f658:	00002306 	br	100f6e8 <rproc_virtio_create_vdev+0x130>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 100f65c:	e03ff315 	stw	zero,-52(fp)

		vring_rsc = &vdev_rsc->vring[i];
 100f660:	e0bff217 	ldw	r2,-56(fp)
 100f664:	10800524 	muli	r2,r2,20
 100f668:	10800704 	addi	r2,r2,28
 100f66c:	e0fff417 	ldw	r3,-48(fp)
 100f670:	1885883a 	add	r2,r3,r2
 100f674:	e0bff915 	stw	r2,-28(fp)
		if (role == VIRTIO_DEV_MASTER) {
 100f678:	e0bffc17 	ldw	r2,-16(fp)
 100f67c:	10000c1e 	bne	r2,zero,100f6b0 <rproc_virtio_create_vdev+0xf8>
			num_extra_desc = vring_rsc->num;
 100f680:	e0bff917 	ldw	r2,-28(fp)
 100f684:	10c00203 	ldbu	r3,8(r2)
 100f688:	11000243 	ldbu	r4,9(r2)
 100f68c:	2008923a 	slli	r4,r4,8
 100f690:	20c6b03a 	or	r3,r4,r3
 100f694:	11000283 	ldbu	r4,10(r2)
 100f698:	2008943a 	slli	r4,r4,16
 100f69c:	20c6b03a 	or	r3,r4,r3
 100f6a0:	108002c3 	ldbu	r2,11(r2)
 100f6a4:	1004963a 	slli	r2,r2,24
 100f6a8:	10c4b03a 	or	r2,r2,r3
 100f6ac:	e0bff315 	stw	r2,-52(fp)
		}
		vq = virtqueue_allocate(num_extra_desc);
 100f6b0:	e13ff317 	ldw	r4,-52(fp)
 100f6b4:	100f0640 	call	100f064 <virtqueue_allocate>
 100f6b8:	e0bffa15 	stw	r2,-24(fp)
		if (!vq)
 100f6bc:	e0bffa17 	ldw	r2,-24(fp)
 100f6c0:	10003626 	beq	r2,zero,100f79c <rproc_virtio_create_vdev+0x1e4>
			goto err1;
		vrings_info[i].vq = vq;
 100f6c4:	e0bff217 	ldw	r2,-56(fp)
 100f6c8:	10800624 	muli	r2,r2,24
 100f6cc:	e0fff717 	ldw	r3,-36(fp)
 100f6d0:	1885883a 	add	r2,r3,r2
 100f6d4:	e0fffa17 	ldw	r3,-24(fp)
 100f6d8:	10c00015 	stw	r3,0(r2)
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
	memset(vrings_info, 0, sizeof(*vrings_info));
	vdev = &rpvdev->vdev;

	for (i = 0; i < num_vrings; i++) {
 100f6dc:	e0bff217 	ldw	r2,-56(fp)
 100f6e0:	10800044 	addi	r2,r2,1
 100f6e4:	e0bff215 	stw	r2,-56(fp)
 100f6e8:	e0fff217 	ldw	r3,-56(fp)
 100f6ec:	e0bff517 	ldw	r2,-44(fp)
 100f6f0:	18bfda36 	bltu	r3,r2,100f65c <__alt_data_end+0xff00f65c>
		if (!vq)
			goto err1;
		vrings_info[i].vq = vq;
	}

	rpvdev->notify = notify;
 100f6f4:	e0bff617 	ldw	r2,-40(fp)
 100f6f8:	e0c00317 	ldw	r3,12(fp)
 100f6fc:	10c00315 	stw	r3,12(r2)
	rpvdev->priv = priv;
 100f700:	e0bff617 	ldw	r2,-40(fp)
 100f704:	e0c00217 	ldw	r3,8(fp)
 100f708:	10c00015 	stw	r3,0(r2)
	vdev->vrings_info = vrings_info;
 100f70c:	e0bff817 	ldw	r2,-32(fp)
 100f710:	e0fff717 	ldw	r3,-36(fp)
 100f714:	10c00a15 	stw	r3,40(r2)
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 100f718:	e0bff617 	ldw	r2,-40(fp)
 100f71c:	e0fff417 	ldw	r3,-48(fp)
 100f720:	10c00115 	stw	r3,4(r2)
	rpvdev->vdev_rsc_io = rsc_io;
 100f724:	e0bff617 	ldw	r2,-40(fp)
 100f728:	e0ffff17 	ldw	r3,-4(fp)
 100f72c:	10c00215 	stw	r3,8(r2)

	vdev->notifyid = notifyid;
 100f730:	e0bff817 	ldw	r2,-32(fp)
 100f734:	e0fffd17 	ldw	r3,-12(fp)
 100f738:	10c00015 	stw	r3,0(r2)
	vdev->role = role;
 100f73c:	e0bff817 	ldw	r2,-32(fp)
 100f740:	e0fffc17 	ldw	r3,-16(fp)
 100f744:	10c00515 	stw	r3,20(r2)
	vdev->reset_cb = rst_cb;
 100f748:	e0bff817 	ldw	r2,-32(fp)
 100f74c:	e0c00417 	ldw	r3,16(fp)
 100f750:	10c00615 	stw	r3,24(r2)
	vdev->vrings_num = num_vrings;
 100f754:	e0bff817 	ldw	r2,-32(fp)
 100f758:	e0fff517 	ldw	r3,-44(fp)
 100f75c:	10c00915 	stw	r3,36(r2)
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 100f760:	e0fff817 	ldw	r3,-32(fp)
 100f764:	008040f4 	movhi	r2,259
 100f768:	10a7bf04 	addi	r2,r2,-24836
 100f76c:	18800715 	stw	r2,28(r3)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == VIRTIO_DEV_MASTER) {
 100f770:	e0bffc17 	ldw	r2,-16(fp)
 100f774:	1000061e 	bne	r2,zero,100f790 <rproc_virtio_create_vdev+0x1d8>
		uint32_t dfeatures = rproc_virtio_get_dfeatures(vdev);
 100f778:	e13ff817 	ldw	r4,-32(fp)
 100f77c:	100f2d80 	call	100f2d8 <rproc_virtio_get_dfeatures>
 100f780:	e0bffb15 	stw	r2,-20(fp)
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
 100f784:	e17ffb17 	ldw	r5,-20(fp)
 100f788:	e13ff817 	ldw	r4,-32(fp)
 100f78c:	100f4c00 	call	100f4c0 <rproc_virtio_negotiate_features>
	}
#endif

	return &rpvdev->vdev;
 100f790:	e0bff617 	ldw	r2,-40(fp)
 100f794:	10800404 	addi	r2,r2,16
 100f798:	00001d06 	br	100f810 <rproc_virtio_create_vdev+0x258>
		if (role == VIRTIO_DEV_MASTER) {
			num_extra_desc = vring_rsc->num;
		}
		vq = virtqueue_allocate(num_extra_desc);
		if (!vq)
			goto err1;
 100f79c:	0001883a 	nop
#endif

	return &rpvdev->vdev;

err1:
	for (i = 0; i < num_vrings; i++) {
 100f7a0:	e03ff215 	stw	zero,-56(fp)
 100f7a4:	00001006 	br	100f7e8 <rproc_virtio_create_vdev+0x230>
		if (vrings_info[i].vq)
 100f7a8:	e0bff217 	ldw	r2,-56(fp)
 100f7ac:	10800624 	muli	r2,r2,24
 100f7b0:	e0fff717 	ldw	r3,-36(fp)
 100f7b4:	1885883a 	add	r2,r3,r2
 100f7b8:	10800017 	ldw	r2,0(r2)
 100f7bc:	10000726 	beq	r2,zero,100f7dc <rproc_virtio_create_vdev+0x224>
			metal_free_memory(vrings_info[i].vq);
 100f7c0:	e0bff217 	ldw	r2,-56(fp)
 100f7c4:	10800624 	muli	r2,r2,24
 100f7c8:	e0fff717 	ldw	r3,-36(fp)
 100f7cc:	1885883a 	add	r2,r3,r2
 100f7d0:	10800017 	ldw	r2,0(r2)
 100f7d4:	1009883a 	mov	r4,r2
 100f7d8:	100f0300 	call	100f030 <metal_free_memory>
#endif

	return &rpvdev->vdev;

err1:
	for (i = 0; i < num_vrings; i++) {
 100f7dc:	e0bff217 	ldw	r2,-56(fp)
 100f7e0:	10800044 	addi	r2,r2,1
 100f7e4:	e0bff215 	stw	r2,-56(fp)
 100f7e8:	e0fff217 	ldw	r3,-56(fp)
 100f7ec:	e0bff517 	ldw	r2,-44(fp)
 100f7f0:	18bfed36 	bltu	r3,r2,100f7a8 <__alt_data_end+0xff00f7a8>
		if (vrings_info[i].vq)
			metal_free_memory(vrings_info[i].vq);
	}
	metal_free_memory(vrings_info);
 100f7f4:	e13ff717 	ldw	r4,-36(fp)
 100f7f8:	100f0300 	call	100f030 <metal_free_memory>
 100f7fc:	00000106 	br	100f804 <rproc_virtio_create_vdev+0x24c>
	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
	if (!rpvdev)
		return NULL;
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
	if (!vrings_info)
		goto err0;
 100f800:	0001883a 	nop
		if (vrings_info[i].vq)
			metal_free_memory(vrings_info[i].vq);
	}
	metal_free_memory(vrings_info);
err0:
	metal_free_memory(rpvdev);
 100f804:	e13ff617 	ldw	r4,-40(fp)
 100f808:	100f0300 	call	100f030 <metal_free_memory>
	return NULL;
 100f80c:	0005883a 	mov	r2,zero
}
 100f810:	e037883a 	mov	sp,fp
 100f814:	dfc00117 	ldw	ra,4(sp)
 100f818:	df000017 	ldw	fp,0(sp)
 100f81c:	dec00204 	addi	sp,sp,8
 100f820:	f800283a 	ret

0100f824 <rproc_virtio_remove_vdev>:

void rproc_virtio_remove_vdev(struct virtio_device *vdev)
{
 100f824:	defffa04 	addi	sp,sp,-24
 100f828:	dfc00515 	stw	ra,20(sp)
 100f82c:	df000415 	stw	fp,16(sp)
 100f830:	df000404 	addi	fp,sp,16
 100f834:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_virtio *rpvdev;
	unsigned int i;

	if (!vdev)
 100f838:	e0bfff17 	ldw	r2,-4(fp)
 100f83c:	10001e26 	beq	r2,zero,100f8b8 <rproc_virtio_remove_vdev+0x94>
		return;
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 100f840:	e0bfff17 	ldw	r2,-4(fp)
 100f844:	10bffc04 	addi	r2,r2,-16
 100f848:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0; i < vdev->vrings_num; i++) {
 100f84c:	e03ffc15 	stw	zero,-16(fp)
 100f850:	00000e06 	br	100f88c <rproc_virtio_remove_vdev+0x68>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 100f854:	e0bfff17 	ldw	r2,-4(fp)
 100f858:	10c00a17 	ldw	r3,40(r2)
 100f85c:	e0bffc17 	ldw	r2,-16(fp)
 100f860:	10800624 	muli	r2,r2,24
 100f864:	1885883a 	add	r2,r3,r2
 100f868:	10800017 	ldw	r2,0(r2)
 100f86c:	e0bffe15 	stw	r2,-8(fp)
		if (vq)
 100f870:	e0bffe17 	ldw	r2,-8(fp)
 100f874:	10000226 	beq	r2,zero,100f880 <rproc_virtio_remove_vdev+0x5c>
			metal_free_memory(vq);
 100f878:	e13ffe17 	ldw	r4,-8(fp)
 100f87c:	100f0300 	call	100f030 <metal_free_memory>
	unsigned int i;

	if (!vdev)
		return;
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
	for (i = 0; i < vdev->vrings_num; i++) {
 100f880:	e0bffc17 	ldw	r2,-16(fp)
 100f884:	10800044 	addi	r2,r2,1
 100f888:	e0bffc15 	stw	r2,-16(fp)
 100f88c:	e0bfff17 	ldw	r2,-4(fp)
 100f890:	10800917 	ldw	r2,36(r2)
 100f894:	e0fffc17 	ldw	r3,-16(fp)
 100f898:	18bfee36 	bltu	r3,r2,100f854 <__alt_data_end+0xff00f854>

		vq = vdev->vrings_info[i].vq;
		if (vq)
			metal_free_memory(vq);
	}
	metal_free_memory(vdev->vrings_info);
 100f89c:	e0bfff17 	ldw	r2,-4(fp)
 100f8a0:	10800a17 	ldw	r2,40(r2)
 100f8a4:	1009883a 	mov	r4,r2
 100f8a8:	100f0300 	call	100f030 <metal_free_memory>
	metal_free_memory(rpvdev);
 100f8ac:	e13ffd17 	ldw	r4,-12(fp)
 100f8b0:	100f0300 	call	100f030 <metal_free_memory>
 100f8b4:	00000106 	br	100f8bc <rproc_virtio_remove_vdev+0x98>
{
	struct remoteproc_virtio *rpvdev;
	unsigned int i;

	if (!vdev)
		return;
 100f8b8:	0001883a 	nop
		if (vq)
			metal_free_memory(vq);
	}
	metal_free_memory(vdev->vrings_info);
	metal_free_memory(rpvdev);
}
 100f8bc:	e037883a 	mov	sp,fp
 100f8c0:	dfc00117 	ldw	ra,4(sp)
 100f8c4:	df000017 	ldw	fp,0(sp)
 100f8c8:	dec00204 	addi	sp,sp,8
 100f8cc:	f800283a 	ret

0100f8d0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 100f8d0:	defff904 	addi	sp,sp,-28
 100f8d4:	df000615 	stw	fp,24(sp)
 100f8d8:	df000604 	addi	fp,sp,24
 100f8dc:	e13ffc15 	stw	r4,-16(fp)
 100f8e0:	e17ffd15 	stw	r5,-12(fp)
 100f8e4:	e1bffe15 	stw	r6,-8(fp)
 100f8e8:	e1ffff15 	stw	r7,-4(fp)
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 100f8ec:	e0bffc17 	ldw	r2,-16(fp)
 100f8f0:	10800917 	ldw	r2,36(r2)
 100f8f4:	e0bffa15 	stw	r2,-24(fp)
	if (index >= num_vrings)
 100f8f8:	e0fffd17 	ldw	r3,-12(fp)
 100f8fc:	e0bffa17 	ldw	r2,-24(fp)
 100f900:	18800236 	bltu	r3,r2,100f90c <rproc_virtio_init_vring+0x3c>
		return -RPROC_EINVAL;
 100f904:	00bfff84 	movi	r2,-2
 100f908:	00001706 	br	100f968 <rproc_virtio_init_vring+0x98>
	vring_info = &vdev->vrings_info[index];
 100f90c:	e0bffc17 	ldw	r2,-16(fp)
 100f910:	10c00a17 	ldw	r3,40(r2)
 100f914:	e0bffd17 	ldw	r2,-12(fp)
 100f918:	10800624 	muli	r2,r2,24
 100f91c:	1885883a 	add	r2,r3,r2
 100f920:	e0bffb15 	stw	r2,-20(fp)
	vring_info->io = io;
 100f924:	e0bffb17 	ldw	r2,-20(fp)
 100f928:	e0c00117 	ldw	r3,4(fp)
 100f92c:	10c00515 	stw	r3,20(r2)
	vring_info->notifyid = notifyid;
 100f930:	e0bffb17 	ldw	r2,-20(fp)
 100f934:	e0fffe17 	ldw	r3,-8(fp)
 100f938:	10c00415 	stw	r3,16(r2)
	vring_info->info.vaddr = va;
 100f93c:	e0bffb17 	ldw	r2,-20(fp)
 100f940:	e0ffff17 	ldw	r3,-4(fp)
 100f944:	10c00115 	stw	r3,4(r2)
	vring_info->info.num_descs = num_descs;
 100f948:	e0800217 	ldw	r2,8(fp)
 100f94c:	1007883a 	mov	r3,r2
 100f950:	e0bffb17 	ldw	r2,-20(fp)
 100f954:	10c0030d 	sth	r3,12(r2)
	vring_info->info.align = align;
 100f958:	e0bffb17 	ldw	r2,-20(fp)
 100f95c:	e0c00317 	ldw	r3,12(fp)
 100f960:	10c00215 	stw	r3,8(r2)

	return 0;
 100f964:	0005883a 	mov	r2,zero
}
 100f968:	e037883a 	mov	sp,fp
 100f96c:	df000017 	ldw	fp,0(sp)
 100f970:	dec00104 	addi	sp,sp,4
 100f974:	f800283a 	ret

0100f978 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 100f978:	defff804 	addi	sp,sp,-32
 100f97c:	dfc00715 	stw	ra,28(sp)
 100f980:	df000615 	stw	fp,24(sp)
 100f984:	df000604 	addi	fp,sp,24
 100f988:	e13ffe15 	stw	r4,-8(fp)
 100f98c:	e17fff15 	stw	r5,-4(fp)
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 100f990:	e0bffe17 	ldw	r2,-8(fp)
 100f994:	1000021e 	bne	r2,zero,100f9a0 <rproc_virtio_notified+0x28>
		return -RPROC_EINVAL;
 100f998:	00bfff84 	movi	r2,-2
 100f99c:	00002406 	br	100fa30 <rproc_virtio_notified+0xb8>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
 100f9a0:	e0bffe17 	ldw	r2,-8(fp)
 100f9a4:	10c00017 	ldw	r3,0(r2)
 100f9a8:	e0bfff17 	ldw	r2,-4(fp)
 100f9ac:	1880021e 	bne	r3,r2,100f9b8 <rproc_virtio_notified+0x40>
		return 0;
 100f9b0:	0005883a 	mov	r2,zero
 100f9b4:	00001e06 	br	100fa30 <rproc_virtio_notified+0xb8>
	num_vrings = vdev->vrings_num;
 100f9b8:	e0bffe17 	ldw	r2,-8(fp)
 100f9bc:	10800917 	ldw	r2,36(r2)
 100f9c0:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < num_vrings; i++) {
 100f9c4:	e03ffa15 	stw	zero,-24(fp)
 100f9c8:	00001506 	br	100fa20 <rproc_virtio_notified+0xa8>
		vring_info = &vdev->vrings_info[i];
 100f9cc:	e0bffe17 	ldw	r2,-8(fp)
 100f9d0:	10c00a17 	ldw	r3,40(r2)
 100f9d4:	e0bffa17 	ldw	r2,-24(fp)
 100f9d8:	10800624 	muli	r2,r2,24
 100f9dc:	1885883a 	add	r2,r3,r2
 100f9e0:	e0bffc15 	stw	r2,-16(fp)
		if (vring_info->notifyid == notifyid ||
 100f9e4:	e0bffc17 	ldw	r2,-16(fp)
 100f9e8:	10c00417 	ldw	r3,16(r2)
 100f9ec:	e0bfff17 	ldw	r2,-4(fp)
 100f9f0:	18800326 	beq	r3,r2,100fa00 <rproc_virtio_notified+0x88>
 100f9f4:	e0bfff17 	ldw	r2,-4(fp)
 100f9f8:	10bfffd8 	cmpnei	r2,r2,-1
 100f9fc:	1000051e 	bne	r2,zero,100fa14 <rproc_virtio_notified+0x9c>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 100fa00:	e0bffc17 	ldw	r2,-16(fp)
 100fa04:	10800017 	ldw	r2,0(r2)
 100fa08:	e0bffd15 	stw	r2,-12(fp)
			virtqueue_notification(vq);
 100fa0c:	e13ffd17 	ldw	r4,-12(fp)
 100fa10:	1013c440 	call	1013c44 <virtqueue_notification>
		return -RPROC_EINVAL;
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
		return 0;
	num_vrings = vdev->vrings_num;
	for (i = 0; i < num_vrings; i++) {
 100fa14:	e0bffa17 	ldw	r2,-24(fp)
 100fa18:	10800044 	addi	r2,r2,1
 100fa1c:	e0bffa15 	stw	r2,-24(fp)
 100fa20:	e0fffa17 	ldw	r3,-24(fp)
 100fa24:	e0bffb17 	ldw	r2,-20(fp)
 100fa28:	18bfe836 	bltu	r3,r2,100f9cc <__alt_data_end+0xff00f9cc>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
			virtqueue_notification(vq);
		}
	}
	return 0;
 100fa2c:	0005883a 	mov	r2,zero
}
 100fa30:	e037883a 	mov	sp,fp
 100fa34:	dfc00117 	ldw	ra,4(sp)
 100fa38:	df000017 	ldw	fp,0(sp)
 100fa3c:	dec00204 	addi	sp,sp,8
 100fa40:	f800283a 	ret

0100fa44 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 100fa44:	defffc04 	addi	sp,sp,-16
 100fa48:	dfc00315 	stw	ra,12(sp)
 100fa4c:	df000215 	stw	fp,8(sp)
 100fa50:	df000204 	addi	fp,sp,8
 100fa54:	e13fff15 	stw	r4,-4(fp)
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 100fa58:	e0bfff17 	ldw	r2,-4(fp)
 100fa5c:	10800517 	ldw	r2,20(r2)
 100fa60:	10000826 	beq	r2,zero,100fa84 <rproc_virtio_wait_remote_ready+0x40>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 100fa64:	e13fff17 	ldw	r4,-4(fp)
 100fa68:	100f1800 	call	100f180 <rproc_virtio_get_status>
 100fa6c:	e0bffe05 	stb	r2,-8(fp)
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 100fa70:	e0bffe03 	ldbu	r2,-8(fp)
 100fa74:	1080010c 	andi	r2,r2,4
 100fa78:	1000041e 	bne	r2,zero,100fa8c <rproc_virtio_wait_remote_ready+0x48>
			return;
		metal_cpu_yield();
 100fa7c:	0001883a 	nop
	}
 100fa80:	003ff806 	br	100fa64 <__alt_data_end+0xff00fa64>
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
		return;
 100fa84:	0001883a 	nop
 100fa88:	00000106 	br	100fa90 <rproc_virtio_wait_remote_ready+0x4c>

	while (1) {
		status = rproc_virtio_get_status(vdev);
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
			return;
 100fa8c:	0001883a 	nop
		metal_cpu_yield();
	}
}
 100fa90:	e037883a 	mov	sp,fp
 100fa94:	dfc00117 	ldw	ra,4(sp)
 100fa98:	df000017 	ldw	fp,0(sp)
 100fa9c:	dec00204 	addi	sp,sp,8
 100faa0:	f800283a 	ret

0100faa4 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 100faa4:	defffc04 	addi	sp,sp,-16
 100faa8:	df000315 	stw	fp,12(sp)
 100faac:	df000304 	addi	fp,sp,12
 100fab0:	e13ffe15 	stw	r4,-8(fp)
 100fab4:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 100fab8:	e0bfff17 	ldw	r2,-4(fp)
 100fabc:	e0fffe17 	ldw	r3,-8(fp)
 100fac0:	18c00017 	ldw	r3,0(r3)
 100fac4:	10c5c83a 	sub	r2,r2,r3
 100fac8:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 100facc:	e0bffe17 	ldw	r2,-8(fp)
 100fad0:	10800217 	ldw	r2,8(r2)
 100fad4:	e0fffd17 	ldw	r3,-12(fp)
 100fad8:	1880022e 	bgeu	r3,r2,100fae4 <metal_io_virt_to_offset+0x40>
 100fadc:	e0bffd17 	ldw	r2,-12(fp)
 100fae0:	00000106 	br	100fae8 <metal_io_virt_to_offset+0x44>
 100fae4:	00bfffc4 	movi	r2,-1
}
 100fae8:	e037883a 	mov	sp,fp
 100faec:	df000017 	ldw	fp,0(sp)
 100faf0:	dec00104 	addi	sp,sp,4
 100faf4:	f800283a 	ret

0100faf8 <handle_rsc_table>:
};

int handle_rsc_table(struct remoteproc *rproc,
		     struct resource_table *rsc_table, size_t size,
		     struct metal_io_region *io)
{
 100faf8:	defff504 	addi	sp,sp,-44
 100fafc:	dfc00a15 	stw	ra,40(sp)
 100fb00:	df000915 	stw	fp,36(sp)
 100fb04:	df000904 	addi	fp,sp,36
 100fb08:	e13ffc15 	stw	r4,-16(fp)
 100fb0c:	e17ffd15 	stw	r5,-12(fp)
 100fb10:	e1bffe15 	stw	r6,-8(fp)
 100fb14:	e1ffff15 	stw	r7,-4(fp)
	char *rsc_start;
	unsigned int rsc_type;
	unsigned int idx, offset;
	int status = 0;
 100fb18:	e03ff815 	stw	zero,-32(fp)

	/* Validate rsc table header fields */

	/* Minimum rsc table size */
	if (sizeof(struct resource_table) > size) {
 100fb1c:	e0bffe17 	ldw	r2,-8(fp)
 100fb20:	10800428 	cmpgeui	r2,r2,16
 100fb24:	1000021e 	bne	r2,zero,100fb30 <handle_rsc_table+0x38>
		return -RPROC_ERR_RSC_TAB_TRUNC;
 100fb28:	00bffec4 	movi	r2,-5
 100fb2c:	00009906 	br	100fd94 <handle_rsc_table+0x29c>
	}

	/* Supported version */
	if (rsc_table->ver != RSC_TAB_SUPPORTED_VERSION) {
 100fb30:	e0bffd17 	ldw	r2,-12(fp)
 100fb34:	10c00003 	ldbu	r3,0(r2)
 100fb38:	11000043 	ldbu	r4,1(r2)
 100fb3c:	2008923a 	slli	r4,r4,8
 100fb40:	20c6b03a 	or	r3,r4,r3
 100fb44:	11000083 	ldbu	r4,2(r2)
 100fb48:	2008943a 	slli	r4,r4,16
 100fb4c:	20c6b03a 	or	r3,r4,r3
 100fb50:	108000c3 	ldbu	r2,3(r2)
 100fb54:	1004963a 	slli	r2,r2,24
 100fb58:	10c4b03a 	or	r2,r2,r3
 100fb5c:	10800060 	cmpeqi	r2,r2,1
 100fb60:	1000021e 	bne	r2,zero,100fb6c <handle_rsc_table+0x74>
		return -RPROC_ERR_RSC_TAB_VER;
 100fb64:	00bffe84 	movi	r2,-6
 100fb68:	00008a06 	br	100fd94 <handle_rsc_table+0x29c>
	}

	/* Offset array */
	offset = sizeof(struct resource_table)
		 + rsc_table->num * sizeof(rsc_table->offset[0]);
 100fb6c:	e0bffd17 	ldw	r2,-12(fp)
 100fb70:	10c00103 	ldbu	r3,4(r2)
 100fb74:	11000143 	ldbu	r4,5(r2)
 100fb78:	2008923a 	slli	r4,r4,8
 100fb7c:	20c6b03a 	or	r3,r4,r3
 100fb80:	11000183 	ldbu	r4,6(r2)
 100fb84:	2008943a 	slli	r4,r4,16
 100fb88:	20c6b03a 	or	r3,r4,r3
 100fb8c:	108001c3 	ldbu	r2,7(r2)
 100fb90:	1004963a 	slli	r2,r2,24
 100fb94:	10c4b03a 	or	r2,r2,r3
	if (rsc_table->ver != RSC_TAB_SUPPORTED_VERSION) {
		return -RPROC_ERR_RSC_TAB_VER;
	}

	/* Offset array */
	offset = sizeof(struct resource_table)
 100fb98:	10800104 	addi	r2,r2,4
 100fb9c:	1085883a 	add	r2,r2,r2
 100fba0:	1085883a 	add	r2,r2,r2
 100fba4:	e0bff915 	stw	r2,-28(fp)
		 + rsc_table->num * sizeof(rsc_table->offset[0]);

	if (offset > size) {
 100fba8:	e0bff917 	ldw	r2,-28(fp)
 100fbac:	e0fffe17 	ldw	r3,-8(fp)
 100fbb0:	1880022e 	bgeu	r3,r2,100fbbc <handle_rsc_table+0xc4>
		return -RPROC_ERR_RSC_TAB_TRUNC;
 100fbb4:	00bffec4 	movi	r2,-5
 100fbb8:	00007606 	br	100fd94 <handle_rsc_table+0x29c>
	}

	/* Reserved fields - must be zero */
	if ((rsc_table->reserved[0] != 0 || rsc_table->reserved[1]) != 0) {
 100fbbc:	e0bffd17 	ldw	r2,-12(fp)
 100fbc0:	10c00203 	ldbu	r3,8(r2)
 100fbc4:	11000243 	ldbu	r4,9(r2)
 100fbc8:	2008923a 	slli	r4,r4,8
 100fbcc:	20c6b03a 	or	r3,r4,r3
 100fbd0:	11000283 	ldbu	r4,10(r2)
 100fbd4:	2008943a 	slli	r4,r4,16
 100fbd8:	20c6b03a 	or	r3,r4,r3
 100fbdc:	108002c3 	ldbu	r2,11(r2)
 100fbe0:	1004963a 	slli	r2,r2,24
 100fbe4:	10c4b03a 	or	r2,r2,r3
 100fbe8:	10000c1e 	bne	r2,zero,100fc1c <handle_rsc_table+0x124>
 100fbec:	e0bffd17 	ldw	r2,-12(fp)
 100fbf0:	10c00303 	ldbu	r3,12(r2)
 100fbf4:	11000343 	ldbu	r4,13(r2)
 100fbf8:	2008923a 	slli	r4,r4,8
 100fbfc:	20c6b03a 	or	r3,r4,r3
 100fc00:	11000383 	ldbu	r4,14(r2)
 100fc04:	2008943a 	slli	r4,r4,16
 100fc08:	20c6b03a 	or	r3,r4,r3
 100fc0c:	108003c3 	ldbu	r2,15(r2)
 100fc10:	1004963a 	slli	r2,r2,24
 100fc14:	10c4b03a 	or	r2,r2,r3
 100fc18:	10000226 	beq	r2,zero,100fc24 <handle_rsc_table+0x12c>
 100fc1c:	00800044 	movi	r2,1
 100fc20:	00000106 	br	100fc28 <handle_rsc_table+0x130>
 100fc24:	0005883a 	mov	r2,zero
 100fc28:	10000226 	beq	r2,zero,100fc34 <handle_rsc_table+0x13c>
		return -RPROC_ERR_RSC_TAB_RSVD;
 100fc2c:	00bffe44 	movi	r2,-7
 100fc30:	00005806 	br	100fd94 <handle_rsc_table+0x29c>
	}

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
 100fc34:	e03ff715 	stw	zero,-36(fp)
 100fc38:	00004506 	br	100fd50 <handle_rsc_table+0x258>
		rsc_start = (char *)rsc_table;
 100fc3c:	e0bffd17 	ldw	r2,-12(fp)
 100fc40:	e0bffa15 	stw	r2,-24(fp)
		rsc_start += rsc_table->offset[idx];
 100fc44:	e0fffd17 	ldw	r3,-12(fp)
 100fc48:	e0bff717 	ldw	r2,-36(fp)
 100fc4c:	10800104 	addi	r2,r2,4
 100fc50:	1085883a 	add	r2,r2,r2
 100fc54:	1085883a 	add	r2,r2,r2
 100fc58:	1885883a 	add	r2,r3,r2
 100fc5c:	10c00003 	ldbu	r3,0(r2)
 100fc60:	11000043 	ldbu	r4,1(r2)
 100fc64:	2008923a 	slli	r4,r4,8
 100fc68:	20c6b03a 	or	r3,r4,r3
 100fc6c:	11000083 	ldbu	r4,2(r2)
 100fc70:	2008943a 	slli	r4,r4,16
 100fc74:	20c6b03a 	or	r3,r4,r3
 100fc78:	108000c3 	ldbu	r2,3(r2)
 100fc7c:	1004963a 	slli	r2,r2,24
 100fc80:	10c4b03a 	or	r2,r2,r3
 100fc84:	1007883a 	mov	r3,r2
 100fc88:	e0bffa17 	ldw	r2,-24(fp)
 100fc8c:	10c5883a 	add	r2,r2,r3
 100fc90:	e0bffa15 	stw	r2,-24(fp)
		if (io &&
 100fc94:	e0bfff17 	ldw	r2,-4(fp)
 100fc98:	10000726 	beq	r2,zero,100fcb8 <handle_rsc_table+0x1c0>
		    metal_io_virt_to_offset(io, rsc_start) == METAL_BAD_OFFSET)
 100fc9c:	e17ffa17 	ldw	r5,-24(fp)
 100fca0:	e13fff17 	ldw	r4,-4(fp)
 100fca4:	100faa40 	call	100faa4 <metal_io_virt_to_offset>

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
		rsc_start = (char *)rsc_table;
		rsc_start += rsc_table->offset[idx];
		if (io &&
 100fca8:	10bfffd8 	cmpnei	r2,r2,-1
 100fcac:	1000021e 	bne	r2,zero,100fcb8 <handle_rsc_table+0x1c0>
		    metal_io_virt_to_offset(io, rsc_start) == METAL_BAD_OFFSET)
			return -RPROC_ERR_RSC_TAB_TRUNC;
 100fcb0:	00bffec4 	movi	r2,-5
 100fcb4:	00003706 	br	100fd94 <handle_rsc_table+0x29c>
		rsc_type = *((uint32_t *)rsc_start);
 100fcb8:	e0bffa17 	ldw	r2,-24(fp)
 100fcbc:	10800017 	ldw	r2,0(r2)
 100fcc0:	e0bffb15 	stw	r2,-20(fp)
		if (rsc_type < RSC_LAST)
 100fcc4:	e0bffb17 	ldw	r2,-20(fp)
 100fcc8:	10800128 	cmpgeui	r2,r2,4
 100fccc:	10000c1e 	bne	r2,zero,100fd00 <handle_rsc_table+0x208>
			status = rsc_handler_table[rsc_type](rproc,
 100fcd0:	008040f4 	movhi	r2,259
 100fcd4:	10a7d804 	addi	r2,r2,-24736
 100fcd8:	e0fffb17 	ldw	r3,-20(fp)
 100fcdc:	18c7883a 	add	r3,r3,r3
 100fce0:	18c7883a 	add	r3,r3,r3
 100fce4:	10c5883a 	add	r2,r2,r3
 100fce8:	10800017 	ldw	r2,0(r2)
 100fcec:	e17ffa17 	ldw	r5,-24(fp)
 100fcf0:	e13ffc17 	ldw	r4,-16(fp)
 100fcf4:	103ee83a 	callr	r2
 100fcf8:	e0bff815 	stw	r2,-32(fp)
 100fcfc:	00000a06 	br	100fd28 <handle_rsc_table+0x230>
							     rsc_start);
		else if (rsc_type >= RSC_VENDOR_START &&
 100fd00:	e0bffb17 	ldw	r2,-20(fp)
 100fd04:	10802030 	cmpltui	r2,r2,128
 100fd08:	1000071e 	bne	r2,zero,100fd28 <handle_rsc_table+0x230>
 100fd0c:	e0bffb17 	ldw	r2,-20(fp)
 100fd10:	10808068 	cmpgeui	r2,r2,513
 100fd14:	1000041e 	bne	r2,zero,100fd28 <handle_rsc_table+0x230>
			 rsc_type <= RSC_VENDOR_END)
			status = handle_vendor_rsc(rproc, rsc_start);
 100fd18:	e17ffa17 	ldw	r5,-24(fp)
 100fd1c:	e13ffc17 	ldw	r4,-16(fp)
 100fd20:	100ff1c0 	call	100ff1c <handle_vendor_rsc>
 100fd24:	e0bff815 	stw	r2,-32(fp)
		if (status == -RPROC_ERR_RSC_TAB_NS) {
 100fd28:	e0bff817 	ldw	r2,-32(fp)
 100fd2c:	10bffd58 	cmpnei	r2,r2,-11
 100fd30:	1000021e 	bne	r2,zero,100fd3c <handle_rsc_table+0x244>
			status = 0;
 100fd34:	e03ff815 	stw	zero,-32(fp)
			continue;
 100fd38:	00000206 	br	100fd44 <handle_rsc_table+0x24c>
		}
		else if (status)
 100fd3c:	e0bff817 	ldw	r2,-32(fp)
 100fd40:	1000121e 	bne	r2,zero,100fd8c <handle_rsc_table+0x294>
	if ((rsc_table->reserved[0] != 0 || rsc_table->reserved[1]) != 0) {
		return -RPROC_ERR_RSC_TAB_RSVD;
	}

	/* Loop through the offset array and parse each resource entry */
	for (idx = 0; idx < rsc_table->num; idx++) {
 100fd44:	e0bff717 	ldw	r2,-36(fp)
 100fd48:	10800044 	addi	r2,r2,1
 100fd4c:	e0bff715 	stw	r2,-36(fp)
 100fd50:	e0bffd17 	ldw	r2,-12(fp)
 100fd54:	10c00103 	ldbu	r3,4(r2)
 100fd58:	11000143 	ldbu	r4,5(r2)
 100fd5c:	2008923a 	slli	r4,r4,8
 100fd60:	20c6b03a 	or	r3,r4,r3
 100fd64:	11000183 	ldbu	r4,6(r2)
 100fd68:	2008943a 	slli	r4,r4,16
 100fd6c:	20c6b03a 	or	r3,r4,r3
 100fd70:	108001c3 	ldbu	r2,7(r2)
 100fd74:	1004963a 	slli	r2,r2,24
 100fd78:	10c4b03a 	or	r2,r2,r3
 100fd7c:	1007883a 	mov	r3,r2
 100fd80:	e0bff717 	ldw	r2,-36(fp)
 100fd84:	10ffad36 	bltu	r2,r3,100fc3c <__alt_data_end+0xff00fc3c>
 100fd88:	00000106 	br	100fd90 <handle_rsc_table+0x298>
		if (status == -RPROC_ERR_RSC_TAB_NS) {
			status = 0;
			continue;
		}
		else if (status)
			break;
 100fd8c:	0001883a 	nop
	}

	return status;
 100fd90:	e0bff817 	ldw	r2,-32(fp)
}
 100fd94:	e037883a 	mov	sp,fp
 100fd98:	dfc00117 	ldw	ra,4(sp)
 100fd9c:	df000017 	ldw	fp,0(sp)
 100fda0:	dec00204 	addi	sp,sp,8
 100fda4:	f800283a 	ret

0100fda8 <handle_carve_out_rsc>:
 *
 * @returns - 0 for success, or negative value for failure
 *
 */
int handle_carve_out_rsc(struct remoteproc *rproc, void *rsc)
{
 100fda8:	defff504 	addi	sp,sp,-44
 100fdac:	dfc00a15 	stw	ra,40(sp)
 100fdb0:	df000915 	stw	fp,36(sp)
 100fdb4:	df000904 	addi	fp,sp,36
 100fdb8:	e13ffe15 	stw	r4,-8(fp)
 100fdbc:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_carveout *carve_rsc = rsc;
 100fdc0:	e0bfff17 	ldw	r2,-4(fp)
 100fdc4:	e0bff915 	stw	r2,-28(fp)
	metal_phys_addr_t pa;
	size_t size;
	unsigned int attribute;

	/* Validate resource fields */
	if (!carve_rsc) {
 100fdc8:	e0bff917 	ldw	r2,-28(fp)
 100fdcc:	1000021e 	bne	r2,zero,100fdd8 <handle_carve_out_rsc+0x30>
		return -RPROC_ERR_RSC_TAB_NP;
 100fdd0:	00bffd84 	movi	r2,-10
 100fdd4:	00004c06 	br	100ff08 <handle_carve_out_rsc+0x160>
	}

	if (carve_rsc->reserved) {
 100fdd8:	e0bff917 	ldw	r2,-28(fp)
 100fddc:	10c00503 	ldbu	r3,20(r2)
 100fde0:	11000543 	ldbu	r4,21(r2)
 100fde4:	2008923a 	slli	r4,r4,8
 100fde8:	20c6b03a 	or	r3,r4,r3
 100fdec:	11000583 	ldbu	r4,22(r2)
 100fdf0:	2008943a 	slli	r4,r4,16
 100fdf4:	20c6b03a 	or	r3,r4,r3
 100fdf8:	108005c3 	ldbu	r2,23(r2)
 100fdfc:	1004963a 	slli	r2,r2,24
 100fe00:	10c4b03a 	or	r2,r2,r3
 100fe04:	10000226 	beq	r2,zero,100fe10 <handle_carve_out_rsc+0x68>
		return -RPROC_ERR_RSC_TAB_RSVD;
 100fe08:	00bffe44 	movi	r2,-7
 100fe0c:	00003e06 	br	100ff08 <handle_carve_out_rsc+0x160>
	}
	pa = carve_rsc->pa;
 100fe10:	e0bff917 	ldw	r2,-28(fp)
 100fe14:	10c00203 	ldbu	r3,8(r2)
 100fe18:	11000243 	ldbu	r4,9(r2)
 100fe1c:	2008923a 	slli	r4,r4,8
 100fe20:	20c6b03a 	or	r3,r4,r3
 100fe24:	11000283 	ldbu	r4,10(r2)
 100fe28:	2008943a 	slli	r4,r4,16
 100fe2c:	20c6b03a 	or	r3,r4,r3
 100fe30:	108002c3 	ldbu	r2,11(r2)
 100fe34:	1004963a 	slli	r2,r2,24
 100fe38:	10c4b03a 	or	r2,r2,r3
 100fe3c:	e0bffd15 	stw	r2,-12(fp)
	da = carve_rsc->da;
 100fe40:	e0bff917 	ldw	r2,-28(fp)
 100fe44:	10c00103 	ldbu	r3,4(r2)
 100fe48:	11000143 	ldbu	r4,5(r2)
 100fe4c:	2008923a 	slli	r4,r4,8
 100fe50:	20c6b03a 	or	r3,r4,r3
 100fe54:	11000183 	ldbu	r4,6(r2)
 100fe58:	2008943a 	slli	r4,r4,16
 100fe5c:	20c6b03a 	or	r3,r4,r3
 100fe60:	108001c3 	ldbu	r2,7(r2)
 100fe64:	1004963a 	slli	r2,r2,24
 100fe68:	10c4b03a 	or	r2,r2,r3
 100fe6c:	e0bffc15 	stw	r2,-16(fp)
	size = carve_rsc->len;
 100fe70:	e0bff917 	ldw	r2,-28(fp)
 100fe74:	10c00303 	ldbu	r3,12(r2)
 100fe78:	11000343 	ldbu	r4,13(r2)
 100fe7c:	2008923a 	slli	r4,r4,8
 100fe80:	20c6b03a 	or	r3,r4,r3
 100fe84:	11000383 	ldbu	r4,14(r2)
 100fe88:	2008943a 	slli	r4,r4,16
 100fe8c:	20c6b03a 	or	r3,r4,r3
 100fe90:	108003c3 	ldbu	r2,15(r2)
 100fe94:	1004963a 	slli	r2,r2,24
 100fe98:	10c4b03a 	or	r2,r2,r3
 100fe9c:	e0bffa15 	stw	r2,-24(fp)
	attribute = carve_rsc->flags;
 100fea0:	e0bff917 	ldw	r2,-28(fp)
 100fea4:	10c00403 	ldbu	r3,16(r2)
 100fea8:	11000443 	ldbu	r4,17(r2)
 100feac:	2008923a 	slli	r4,r4,8
 100feb0:	20c6b03a 	or	r3,r4,r3
 100feb4:	11000483 	ldbu	r4,18(r2)
 100feb8:	2008943a 	slli	r4,r4,16
 100febc:	20c6b03a 	or	r3,r4,r3
 100fec0:	108004c3 	ldbu	r2,19(r2)
 100fec4:	1004963a 	slli	r2,r2,24
 100fec8:	10c4b03a 	or	r2,r2,r3
 100fecc:	e0bffb15 	stw	r2,-20(fp)
	if (remoteproc_mmap(rproc, &pa, &da, size, attribute, NULL))
 100fed0:	e13ffc04 	addi	r4,fp,-16
 100fed4:	e0fffd04 	addi	r3,fp,-12
 100fed8:	d8000115 	stw	zero,4(sp)
 100fedc:	e0bffb17 	ldw	r2,-20(fp)
 100fee0:	d8800015 	stw	r2,0(sp)
 100fee4:	e1fffa17 	ldw	r7,-24(fp)
 100fee8:	200d883a 	mov	r6,r4
 100feec:	180b883a 	mov	r5,r3
 100fef0:	e13ffe17 	ldw	r4,-8(fp)
 100fef4:	100cd140 	call	100cd14 <remoteproc_mmap>
 100fef8:	10000226 	beq	r2,zero,100ff04 <handle_carve_out_rsc+0x15c>
		return 0;
 100fefc:	0005883a 	mov	r2,zero
 100ff00:	00000106 	br	100ff08 <handle_carve_out_rsc+0x160>
	else
		return -RPROC_EINVAL;
 100ff04:	00bfff84 	movi	r2,-2
}
 100ff08:	e037883a 	mov	sp,fp
 100ff0c:	dfc00117 	ldw	ra,4(sp)
 100ff10:	df000017 	ldw	fp,0(sp)
 100ff14:	dec00204 	addi	sp,sp,8
 100ff18:	f800283a 	ret

0100ff1c <handle_vendor_rsc>:

int handle_vendor_rsc(struct remoteproc *rproc, void *rsc)
{
 100ff1c:	defffa04 	addi	sp,sp,-24
 100ff20:	dfc00515 	stw	ra,20(sp)
 100ff24:	df000415 	stw	fp,16(sp)
 100ff28:	df000404 	addi	fp,sp,16
 100ff2c:	e13ffe15 	stw	r4,-8(fp)
 100ff30:	e17fff15 	stw	r5,-4(fp)
	if (rproc && rproc->ops->handle_rsc) {
 100ff34:	e0bffe17 	ldw	r2,-8(fp)
 100ff38:	10001a26 	beq	r2,zero,100ffa4 <handle_vendor_rsc+0x88>
 100ff3c:	e0bffe17 	ldw	r2,-8(fp)
 100ff40:	10800917 	ldw	r2,36(r2)
 100ff44:	10800317 	ldw	r2,12(r2)
 100ff48:	10001626 	beq	r2,zero,100ffa4 <handle_vendor_rsc+0x88>
		struct fw_rsc_vendor *vend_rsc = rsc;
 100ff4c:	e0bfff17 	ldw	r2,-4(fp)
 100ff50:	e0bffc15 	stw	r2,-16(fp)
		size_t len = vend_rsc->len;
 100ff54:	e0bffc17 	ldw	r2,-16(fp)
 100ff58:	10c00103 	ldbu	r3,4(r2)
 100ff5c:	11000143 	ldbu	r4,5(r2)
 100ff60:	2008923a 	slli	r4,r4,8
 100ff64:	20c6b03a 	or	r3,r4,r3
 100ff68:	11000183 	ldbu	r4,6(r2)
 100ff6c:	2008943a 	slli	r4,r4,16
 100ff70:	20c6b03a 	or	r3,r4,r3
 100ff74:	108001c3 	ldbu	r2,7(r2)
 100ff78:	1004963a 	slli	r2,r2,24
 100ff7c:	10c4b03a 	or	r2,r2,r3
 100ff80:	e0bffd15 	stw	r2,-12(fp)

		return rproc->ops->handle_rsc(rproc, rsc, len);
 100ff84:	e0bffe17 	ldw	r2,-8(fp)
 100ff88:	10800917 	ldw	r2,36(r2)
 100ff8c:	10800317 	ldw	r2,12(r2)
 100ff90:	e1bffd17 	ldw	r6,-12(fp)
 100ff94:	e17fff17 	ldw	r5,-4(fp)
 100ff98:	e13ffe17 	ldw	r4,-8(fp)
 100ff9c:	103ee83a 	callr	r2
 100ffa0:	00000106 	br	100ffa8 <handle_vendor_rsc+0x8c>
	}
	return -RPROC_ERR_RSC_TAB_NS;
 100ffa4:	00bffd44 	movi	r2,-11
}
 100ffa8:	e037883a 	mov	sp,fp
 100ffac:	dfc00117 	ldw	ra,4(sp)
 100ffb0:	df000017 	ldw	fp,0(sp)
 100ffb4:	dec00204 	addi	sp,sp,8
 100ffb8:	f800283a 	ret

0100ffbc <handle_vdev_rsc>:

int handle_vdev_rsc(struct remoteproc *rproc, void *rsc)
{
 100ffbc:	defff704 	addi	sp,sp,-36
 100ffc0:	dfc00815 	stw	ra,32(sp)
 100ffc4:	df000715 	stw	fp,28(sp)
 100ffc8:	df000704 	addi	fp,sp,28
 100ffcc:	e13ffe15 	stw	r4,-8(fp)
 100ffd0:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_vdev *vdev_rsc = rsc;
 100ffd4:	e0bfff17 	ldw	r2,-4(fp)
 100ffd8:	e0bffa15 	stw	r2,-24(fp)
	unsigned int notifyid, i, num_vrings;

	/* only assign notification IDs but do not initialize vdev */
	notifyid = vdev_rsc->notifyid;
 100ffdc:	e0bffa17 	ldw	r2,-24(fp)
 100ffe0:	10c00203 	ldbu	r3,8(r2)
 100ffe4:	11000243 	ldbu	r4,9(r2)
 100ffe8:	2008923a 	slli	r4,r4,8
 100ffec:	20c6b03a 	or	r3,r4,r3
 100fff0:	11000283 	ldbu	r4,10(r2)
 100fff4:	2008943a 	slli	r4,r4,16
 100fff8:	20c6b03a 	or	r3,r4,r3
 100fffc:	108002c3 	ldbu	r2,11(r2)
 1010000:	1004963a 	slli	r2,r2,24
 1010004:	10c4b03a 	or	r2,r2,r3
 1010008:	e0bffb15 	stw	r2,-20(fp)
	notifyid = remoteproc_allocate_id(rproc,
 101000c:	e0bffb17 	ldw	r2,-20(fp)
 1010010:	10800044 	addi	r2,r2,1
 1010014:	100d883a 	mov	r6,r2
 1010018:	e17ffb17 	ldw	r5,-20(fp)
 101001c:	e13ffe17 	ldw	r4,-8(fp)
 1010020:	100e6ac0 	call	100e6ac <remoteproc_allocate_id>
 1010024:	e0bffb15 	stw	r2,-20(fp)
					  notifyid, notifyid + 1);
	if (notifyid != RSC_NOTIFY_ID_ANY)
 1010028:	e0bffb17 	ldw	r2,-20(fp)
 101002c:	10bfffe0 	cmpeqi	r2,r2,-1
 1010030:	1000231e 	bne	r2,zero,10100c0 <handle_vdev_rsc+0x104>
		vdev_rsc->notifyid = notifyid;
 1010034:	e0bffa17 	ldw	r2,-24(fp)
 1010038:	e0fffb17 	ldw	r3,-20(fp)
 101003c:	19403fcc 	andi	r5,r3,255
 1010040:	10c00203 	ldbu	r3,8(r2)
 1010044:	1806703a 	and	r3,r3,zero
 1010048:	1809883a 	mov	r4,r3
 101004c:	2807883a 	mov	r3,r5
 1010050:	20c6b03a 	or	r3,r4,r3
 1010054:	10c00205 	stb	r3,8(r2)
 1010058:	e0fffb17 	ldw	r3,-20(fp)
 101005c:	1806d23a 	srli	r3,r3,8
 1010060:	19403fcc 	andi	r5,r3,255
 1010064:	10c00243 	ldbu	r3,9(r2)
 1010068:	1806703a 	and	r3,r3,zero
 101006c:	1809883a 	mov	r4,r3
 1010070:	2807883a 	mov	r3,r5
 1010074:	20c6b03a 	or	r3,r4,r3
 1010078:	10c00245 	stb	r3,9(r2)
 101007c:	e0fffb17 	ldw	r3,-20(fp)
 1010080:	1806d43a 	srli	r3,r3,16
 1010084:	19403fcc 	andi	r5,r3,255
 1010088:	10c00283 	ldbu	r3,10(r2)
 101008c:	1806703a 	and	r3,r3,zero
 1010090:	1809883a 	mov	r4,r3
 1010094:	2807883a 	mov	r3,r5
 1010098:	20c6b03a 	or	r3,r4,r3
 101009c:	10c00285 	stb	r3,10(r2)
 10100a0:	e0fffb17 	ldw	r3,-20(fp)
 10100a4:	180ad63a 	srli	r5,r3,24
 10100a8:	10c002c3 	ldbu	r3,11(r2)
 10100ac:	1806703a 	and	r3,r3,zero
 10100b0:	1809883a 	mov	r4,r3
 10100b4:	2807883a 	mov	r3,r5
 10100b8:	20c6b03a 	or	r3,r4,r3
 10100bc:	10c002c5 	stb	r3,11(r2)

	num_vrings = vdev_rsc->num_of_vrings;
 10100c0:	e0bffa17 	ldw	r2,-24(fp)
 10100c4:	10800643 	ldbu	r2,25(r2)
 10100c8:	10803fcc 	andi	r2,r2,255
 10100cc:	e0bffc15 	stw	r2,-16(fp)
	for (i = 0; i < num_vrings; i++) {
 10100d0:	e03ff915 	stw	zero,-28(fp)
 10100d4:	00004206 	br	10101e0 <handle_vdev_rsc+0x224>
		struct fw_rsc_vdev_vring *vring_rsc;

		vring_rsc = &vdev_rsc->vring[i];
 10100d8:	e0bff917 	ldw	r2,-28(fp)
 10100dc:	10800524 	muli	r2,r2,20
 10100e0:	10800704 	addi	r2,r2,28
 10100e4:	e0fffa17 	ldw	r3,-24(fp)
 10100e8:	1885883a 	add	r2,r3,r2
 10100ec:	e0bffd15 	stw	r2,-12(fp)
		notifyid = vring_rsc->notifyid;
 10100f0:	e0bffd17 	ldw	r2,-12(fp)
 10100f4:	10c00303 	ldbu	r3,12(r2)
 10100f8:	11000343 	ldbu	r4,13(r2)
 10100fc:	2008923a 	slli	r4,r4,8
 1010100:	20c6b03a 	or	r3,r4,r3
 1010104:	11000383 	ldbu	r4,14(r2)
 1010108:	2008943a 	slli	r4,r4,16
 101010c:	20c6b03a 	or	r3,r4,r3
 1010110:	108003c3 	ldbu	r2,15(r2)
 1010114:	1004963a 	slli	r2,r2,24
 1010118:	10c4b03a 	or	r2,r2,r3
 101011c:	e0bffb15 	stw	r2,-20(fp)
		notifyid = remoteproc_allocate_id(rproc,
 1010120:	e0bffb17 	ldw	r2,-20(fp)
 1010124:	10800044 	addi	r2,r2,1
 1010128:	100d883a 	mov	r6,r2
 101012c:	e17ffb17 	ldw	r5,-20(fp)
 1010130:	e13ffe17 	ldw	r4,-8(fp)
 1010134:	100e6ac0 	call	100e6ac <remoteproc_allocate_id>
 1010138:	e0bffb15 	stw	r2,-20(fp)
						  notifyid,
						  notifyid + 1);
		if (notifyid != RSC_NOTIFY_ID_ANY)
 101013c:	e0bffb17 	ldw	r2,-20(fp)
 1010140:	10bfffe0 	cmpeqi	r2,r2,-1
 1010144:	1000231e 	bne	r2,zero,10101d4 <handle_vdev_rsc+0x218>
			vdev_rsc->notifyid = notifyid;
 1010148:	e0bffa17 	ldw	r2,-24(fp)
 101014c:	e0fffb17 	ldw	r3,-20(fp)
 1010150:	19403fcc 	andi	r5,r3,255
 1010154:	10c00203 	ldbu	r3,8(r2)
 1010158:	1806703a 	and	r3,r3,zero
 101015c:	1809883a 	mov	r4,r3
 1010160:	2807883a 	mov	r3,r5
 1010164:	20c6b03a 	or	r3,r4,r3
 1010168:	10c00205 	stb	r3,8(r2)
 101016c:	e0fffb17 	ldw	r3,-20(fp)
 1010170:	1806d23a 	srli	r3,r3,8
 1010174:	19403fcc 	andi	r5,r3,255
 1010178:	10c00243 	ldbu	r3,9(r2)
 101017c:	1806703a 	and	r3,r3,zero
 1010180:	1809883a 	mov	r4,r3
 1010184:	2807883a 	mov	r3,r5
 1010188:	20c6b03a 	or	r3,r4,r3
 101018c:	10c00245 	stb	r3,9(r2)
 1010190:	e0fffb17 	ldw	r3,-20(fp)
 1010194:	1806d43a 	srli	r3,r3,16
 1010198:	19403fcc 	andi	r5,r3,255
 101019c:	10c00283 	ldbu	r3,10(r2)
 10101a0:	1806703a 	and	r3,r3,zero
 10101a4:	1809883a 	mov	r4,r3
 10101a8:	2807883a 	mov	r3,r5
 10101ac:	20c6b03a 	or	r3,r4,r3
 10101b0:	10c00285 	stb	r3,10(r2)
 10101b4:	e0fffb17 	ldw	r3,-20(fp)
 10101b8:	180ad63a 	srli	r5,r3,24
 10101bc:	10c002c3 	ldbu	r3,11(r2)
 10101c0:	1806703a 	and	r3,r3,zero
 10101c4:	1809883a 	mov	r4,r3
 10101c8:	2807883a 	mov	r3,r5
 10101cc:	20c6b03a 	or	r3,r4,r3
 10101d0:	10c002c5 	stb	r3,11(r2)
					  notifyid, notifyid + 1);
	if (notifyid != RSC_NOTIFY_ID_ANY)
		vdev_rsc->notifyid = notifyid;

	num_vrings = vdev_rsc->num_of_vrings;
	for (i = 0; i < num_vrings; i++) {
 10101d4:	e0bff917 	ldw	r2,-28(fp)
 10101d8:	10800044 	addi	r2,r2,1
 10101dc:	e0bff915 	stw	r2,-28(fp)
 10101e0:	e0fff917 	ldw	r3,-28(fp)
 10101e4:	e0bffc17 	ldw	r2,-16(fp)
 10101e8:	18bfbb36 	bltu	r3,r2,10100d8 <__alt_data_end+0xff0100d8>
						  notifyid + 1);
		if (notifyid != RSC_NOTIFY_ID_ANY)
			vdev_rsc->notifyid = notifyid;
	}

	return 0;
 10101ec:	0005883a 	mov	r2,zero
}
 10101f0:	e037883a 	mov	sp,fp
 10101f4:	dfc00117 	ldw	ra,4(sp)
 10101f8:	df000017 	ldw	fp,0(sp)
 10101fc:	dec00204 	addi	sp,sp,8
 1010200:	f800283a 	ret

01010204 <handle_trace_rsc>:
 *
 * @returns - no service error
 *
 */
int handle_trace_rsc(struct remoteproc *rproc, void *rsc)
{
 1010204:	defffc04 	addi	sp,sp,-16
 1010208:	df000315 	stw	fp,12(sp)
 101020c:	df000304 	addi	fp,sp,12
 1010210:	e13ffe15 	stw	r4,-8(fp)
 1010214:	e17fff15 	stw	r5,-4(fp)
	struct fw_rsc_trace *vdev_rsc = rsc;
 1010218:	e0bfff17 	ldw	r2,-4(fp)
 101021c:	e0bffd15 	stw	r2,-12(fp)
	(void)rproc;

	if (vdev_rsc->da != FW_RSC_U32_ADDR_ANY && vdev_rsc->len != 0)
 1010220:	e0bffd17 	ldw	r2,-12(fp)
 1010224:	10c00103 	ldbu	r3,4(r2)
 1010228:	11000143 	ldbu	r4,5(r2)
 101022c:	2008923a 	slli	r4,r4,8
 1010230:	20c6b03a 	or	r3,r4,r3
 1010234:	11000183 	ldbu	r4,6(r2)
 1010238:	2008943a 	slli	r4,r4,16
 101023c:	20c6b03a 	or	r3,r4,r3
 1010240:	108001c3 	ldbu	r2,7(r2)
 1010244:	1004963a 	slli	r2,r2,24
 1010248:	10c4b03a 	or	r2,r2,r3
 101024c:	10bfffe0 	cmpeqi	r2,r2,-1
 1010250:	10000e1e 	bne	r2,zero,101028c <handle_trace_rsc+0x88>
 1010254:	e0bffd17 	ldw	r2,-12(fp)
 1010258:	10c00203 	ldbu	r3,8(r2)
 101025c:	11000243 	ldbu	r4,9(r2)
 1010260:	2008923a 	slli	r4,r4,8
 1010264:	20c6b03a 	or	r3,r4,r3
 1010268:	11000283 	ldbu	r4,10(r2)
 101026c:	2008943a 	slli	r4,r4,16
 1010270:	20c6b03a 	or	r3,r4,r3
 1010274:	108002c3 	ldbu	r2,11(r2)
 1010278:	1004963a 	slli	r2,r2,24
 101027c:	10c4b03a 	or	r2,r2,r3
 1010280:	10000226 	beq	r2,zero,101028c <handle_trace_rsc+0x88>
		return 0;
 1010284:	0005883a 	mov	r2,zero
 1010288:	00000106 	br	1010290 <handle_trace_rsc+0x8c>
	/* FIXME: master should allocated a memory used by slave */

	return -RPROC_ERR_RSC_TAB_NS;
 101028c:	00bffd44 	movi	r2,-11
}
 1010290:	e037883a 	mov	sp,fp
 1010294:	df000017 	ldw	fp,0(sp)
 1010298:	dec00104 	addi	sp,sp,4
 101029c:	f800283a 	ret

010102a0 <handle_dummy_rsc>:
 *
 * @returns - no service error
 *
 */
static int handle_dummy_rsc(struct remoteproc *rproc, void *rsc)
{
 10102a0:	defffd04 	addi	sp,sp,-12
 10102a4:	df000215 	stw	fp,8(sp)
 10102a8:	df000204 	addi	fp,sp,8
 10102ac:	e13ffe15 	stw	r4,-8(fp)
 10102b0:	e17fff15 	stw	r5,-4(fp)
	(void)rproc;
	(void)rsc;

	return -RPROC_ERR_RSC_TAB_NS;
 10102b4:	00bffd44 	movi	r2,-11
}
 10102b8:	e037883a 	mov	sp,fp
 10102bc:	df000017 	ldw	fp,0(sp)
 10102c0:	dec00104 	addi	sp,sp,4
 10102c4:	f800283a 	ret

010102c8 <find_rsc>:

size_t find_rsc(void *rsc_table, unsigned int rsc_type, unsigned int index)
{
 10102c8:	defff604 	addi	sp,sp,-40
 10102cc:	dfc00915 	stw	ra,36(sp)
 10102d0:	df000815 	stw	fp,32(sp)
 10102d4:	df000804 	addi	fp,sp,32
 10102d8:	e13ffd15 	stw	r4,-12(fp)
 10102dc:	e17ffe15 	stw	r5,-8(fp)
 10102e0:	e1bfff15 	stw	r6,-4(fp)
	struct resource_table *r_table = rsc_table;
 10102e4:	e0bffd17 	ldw	r2,-12(fp)
 10102e8:	e0bffa15 	stw	r2,-24(fp)
	unsigned int i, rsc_index;
	unsigned int lrsc_type;
	char *rsc_start;

	metal_assert(r_table);
 10102ec:	e0bffa17 	ldw	r2,-24(fp)
 10102f0:	1000081e 	bne	r2,zero,1010314 <find_rsc+0x4c>
 10102f4:	01c040f4 	movhi	r7,259
 10102f8:	39e7dc04 	addi	r7,r7,-24720
 10102fc:	018040f4 	movhi	r6,259
 1010300:	31a7e904 	addi	r6,r6,-24668
 1010304:	014033c4 	movi	r5,207
 1010308:	010040f4 	movhi	r4,259
 101030c:	2127de04 	addi	r4,r4,-24712
 1010310:	10156a00 	call	10156a0 <__assert_func>
	/* Loop through the offset array and parse each resource entry */
	rsc_index = 0;
 1010314:	e03ff915 	stw	zero,-28(fp)
	for (i = 0; i < r_table->num; i++) {
 1010318:	e03ff815 	stw	zero,-32(fp)
 101031c:	00003506 	br	10103f4 <find_rsc+0x12c>
		rsc_start = (char *)r_table;
 1010320:	e0bffa17 	ldw	r2,-24(fp)
 1010324:	e0bffb15 	stw	r2,-20(fp)
		rsc_start += r_table->offset[i];
 1010328:	e0fffa17 	ldw	r3,-24(fp)
 101032c:	e0bff817 	ldw	r2,-32(fp)
 1010330:	10800104 	addi	r2,r2,4
 1010334:	1085883a 	add	r2,r2,r2
 1010338:	1085883a 	add	r2,r2,r2
 101033c:	1885883a 	add	r2,r3,r2
 1010340:	10c00003 	ldbu	r3,0(r2)
 1010344:	11000043 	ldbu	r4,1(r2)
 1010348:	2008923a 	slli	r4,r4,8
 101034c:	20c6b03a 	or	r3,r4,r3
 1010350:	11000083 	ldbu	r4,2(r2)
 1010354:	2008943a 	slli	r4,r4,16
 1010358:	20c6b03a 	or	r3,r4,r3
 101035c:	108000c3 	ldbu	r2,3(r2)
 1010360:	1004963a 	slli	r2,r2,24
 1010364:	10c4b03a 	or	r2,r2,r3
 1010368:	1007883a 	mov	r3,r2
 101036c:	e0bffb17 	ldw	r2,-20(fp)
 1010370:	10c5883a 	add	r2,r2,r3
 1010374:	e0bffb15 	stw	r2,-20(fp)
		lrsc_type = *((uint32_t *)rsc_start);
 1010378:	e0bffb17 	ldw	r2,-20(fp)
 101037c:	10800017 	ldw	r2,0(r2)
 1010380:	e0bffc15 	stw	r2,-16(fp)
		if (lrsc_type == rsc_type) {
 1010384:	e0fffc17 	ldw	r3,-16(fp)
 1010388:	e0bffe17 	ldw	r2,-8(fp)
 101038c:	1880161e 	bne	r3,r2,10103e8 <find_rsc+0x120>
			if (rsc_index++ == index)
 1010390:	e0bff917 	ldw	r2,-28(fp)
 1010394:	10c00044 	addi	r3,r2,1
 1010398:	e0fff915 	stw	r3,-28(fp)
 101039c:	e0ffff17 	ldw	r3,-4(fp)
 10103a0:	10c0111e 	bne	r2,r3,10103e8 <find_rsc+0x120>
				return r_table->offset[i];
 10103a4:	e0fffa17 	ldw	r3,-24(fp)
 10103a8:	e0bff817 	ldw	r2,-32(fp)
 10103ac:	10800104 	addi	r2,r2,4
 10103b0:	1085883a 	add	r2,r2,r2
 10103b4:	1085883a 	add	r2,r2,r2
 10103b8:	1885883a 	add	r2,r3,r2
 10103bc:	10c00003 	ldbu	r3,0(r2)
 10103c0:	11000043 	ldbu	r4,1(r2)
 10103c4:	2008923a 	slli	r4,r4,8
 10103c8:	20c6b03a 	or	r3,r4,r3
 10103cc:	11000083 	ldbu	r4,2(r2)
 10103d0:	2008943a 	slli	r4,r4,16
 10103d4:	20c6b03a 	or	r3,r4,r3
 10103d8:	108000c3 	ldbu	r2,3(r2)
 10103dc:	1004963a 	slli	r2,r2,24
 10103e0:	10c4b03a 	or	r2,r2,r3
 10103e4:	00001206 	br	1010430 <find_rsc+0x168>
	char *rsc_start;

	metal_assert(r_table);
	/* Loop through the offset array and parse each resource entry */
	rsc_index = 0;
	for (i = 0; i < r_table->num; i++) {
 10103e8:	e0bff817 	ldw	r2,-32(fp)
 10103ec:	10800044 	addi	r2,r2,1
 10103f0:	e0bff815 	stw	r2,-32(fp)
 10103f4:	e0bffa17 	ldw	r2,-24(fp)
 10103f8:	10c00103 	ldbu	r3,4(r2)
 10103fc:	11000143 	ldbu	r4,5(r2)
 1010400:	2008923a 	slli	r4,r4,8
 1010404:	20c6b03a 	or	r3,r4,r3
 1010408:	11000183 	ldbu	r4,6(r2)
 101040c:	2008943a 	slli	r4,r4,16
 1010410:	20c6b03a 	or	r3,r4,r3
 1010414:	108001c3 	ldbu	r2,7(r2)
 1010418:	1004963a 	slli	r2,r2,24
 101041c:	10c4b03a 	or	r2,r2,r3
 1010420:	1007883a 	mov	r3,r2
 1010424:	e0bff817 	ldw	r2,-32(fp)
 1010428:	10ffbd36 	bltu	r2,r3,1010320 <__alt_data_end+0xff010320>
		if (lrsc_type == rsc_type) {
			if (rsc_index++ == index)
				return r_table->offset[i];
		}
	}
	return 0;
 101042c:	0005883a 	mov	r2,zero
}
 1010430:	e037883a 	mov	sp,fp
 1010434:	dfc00117 	ldw	ra,4(sp)
 1010438:	df000017 	ldw	fp,0(sp)
 101043c:	dec00204 	addi	sp,sp,8
 1010440:	f800283a 	ret

01010444 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1010444:	defffb04 	addi	sp,sp,-20
 1010448:	df000415 	stw	fp,16(sp)
 101044c:	df000404 	addi	fp,sp,16
 1010450:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1010454:	0001883a 	nop
 1010458:	e0bfff17 	ldw	r2,-4(fp)
 101045c:	e0bffc15 	stw	r2,-16(fp)
 1010460:	e0bffc17 	ldw	r2,-16(fp)
 1010464:	10800017 	ldw	r2,0(r2)
 1010468:	e0bffd15 	stw	r2,-12(fp)
 101046c:	00800044 	movi	r2,1
 1010470:	e0bffe15 	stw	r2,-8(fp)
 1010474:	e0bfff17 	ldw	r2,-4(fp)
 1010478:	e0fffe17 	ldw	r3,-8(fp)
 101047c:	10c00015 	stw	r3,0(r2)
 1010480:	e0bffd17 	ldw	r2,-12(fp)
 1010484:	103ff41e 	bne	r2,zero,1010458 <__alt_data_end+0xff010458>
		;
	}
}
 1010488:	0001883a 	nop
 101048c:	e037883a 	mov	sp,fp
 1010490:	df000017 	ldw	fp,0(sp)
 1010494:	dec00104 	addi	sp,sp,4
 1010498:	f800283a 	ret

0101049c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 101049c:	defffe04 	addi	sp,sp,-8
 10104a0:	df000115 	stw	fp,4(sp)
 10104a4:	df000104 	addi	fp,sp,4
 10104a8:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 10104ac:	e0bfff17 	ldw	r2,-4(fp)
 10104b0:	0001b03a 	sync
 10104b4:	10000015 	stw	zero,0(r2)
}
 10104b8:	0001883a 	nop
 10104bc:	e037883a 	mov	sp,fp
 10104c0:	df000017 	ldw	fp,0(sp)
 10104c4:	dec00104 	addi	sp,sp,4
 10104c8:	f800283a 	ret

010104cc <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 10104cc:	defffd04 	addi	sp,sp,-12
 10104d0:	dfc00215 	stw	ra,8(sp)
 10104d4:	df000115 	stw	fp,4(sp)
 10104d8:	df000104 	addi	fp,sp,4
 10104dc:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 10104e0:	e13fff17 	ldw	r4,-4(fp)
 10104e4:	10104440 	call	1010444 <__metal_mutex_acquire>
}
 10104e8:	0001883a 	nop
 10104ec:	e037883a 	mov	sp,fp
 10104f0:	dfc00117 	ldw	ra,4(sp)
 10104f4:	df000017 	ldw	fp,0(sp)
 10104f8:	dec00204 	addi	sp,sp,8
 10104fc:	f800283a 	ret

01010500 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1010500:	defffd04 	addi	sp,sp,-12
 1010504:	dfc00215 	stw	ra,8(sp)
 1010508:	df000115 	stw	fp,4(sp)
 101050c:	df000104 	addi	fp,sp,4
 1010510:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1010514:	e13fff17 	ldw	r4,-4(fp)
 1010518:	101049c0 	call	101049c <__metal_mutex_release>
}
 101051c:	0001883a 	nop
 1010520:	e037883a 	mov	sp,fp
 1010524:	dfc00117 	ldw	ra,4(sp)
 1010528:	df000017 	ldw	fp,0(sp)
 101052c:	dec00204 	addi	sp,sp,8
 1010530:	f800283a 	ret

01010534 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1010534:	defffd04 	addi	sp,sp,-12
 1010538:	df000215 	stw	fp,8(sp)
 101053c:	df000204 	addi	fp,sp,8
 1010540:	e13ffe15 	stw	r4,-8(fp)
 1010544:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1010548:	e0bffe17 	ldw	r2,-8(fp)
 101054c:	10c00117 	ldw	r3,4(r2)
 1010550:	e0bfff17 	ldw	r2,-4(fp)
 1010554:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1010558:	e0bfff17 	ldw	r2,-4(fp)
 101055c:	e0fffe17 	ldw	r3,-8(fp)
 1010560:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1010564:	e0bfff17 	ldw	r2,-4(fp)
 1010568:	10800017 	ldw	r2,0(r2)
 101056c:	e0ffff17 	ldw	r3,-4(fp)
 1010570:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 1010574:	e0bfff17 	ldw	r2,-4(fp)
 1010578:	10800117 	ldw	r2,4(r2)
 101057c:	e0ffff17 	ldw	r3,-4(fp)
 1010580:	10c00015 	stw	r3,0(r2)
}
 1010584:	0001883a 	nop
 1010588:	e037883a 	mov	sp,fp
 101058c:	df000017 	ldw	fp,0(sp)
 1010590:	dec00104 	addi	sp,sp,4
 1010594:	f800283a 	ret

01010598 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 1010598:	defffc04 	addi	sp,sp,-16
 101059c:	dfc00315 	stw	ra,12(sp)
 10105a0:	df000215 	stw	fp,8(sp)
 10105a4:	df000204 	addi	fp,sp,8
 10105a8:	e13ffe15 	stw	r4,-8(fp)
 10105ac:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 10105b0:	e17fff17 	ldw	r5,-4(fp)
 10105b4:	e13ffe17 	ldw	r4,-8(fp)
 10105b8:	10105340 	call	1010534 <metal_list_add_before>
}
 10105bc:	0001883a 	nop
 10105c0:	e037883a 	mov	sp,fp
 10105c4:	dfc00117 	ldw	ra,4(sp)
 10105c8:	df000017 	ldw	fp,0(sp)
 10105cc:	dec00204 	addi	sp,sp,8
 10105d0:	f800283a 	ret

010105d4 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 10105d4:	defffe04 	addi	sp,sp,-8
 10105d8:	df000115 	stw	fp,4(sp)
 10105dc:	df000104 	addi	fp,sp,4
 10105e0:	e13fff15 	stw	r4,-4(fp)
	node->next->prev = node->prev;
 10105e4:	e0bfff17 	ldw	r2,-4(fp)
 10105e8:	10800017 	ldw	r2,0(r2)
 10105ec:	e0ffff17 	ldw	r3,-4(fp)
 10105f0:	18c00117 	ldw	r3,4(r3)
 10105f4:	10c00115 	stw	r3,4(r2)
	node->prev->next = node->next;
 10105f8:	e0bfff17 	ldw	r2,-4(fp)
 10105fc:	10800117 	ldw	r2,4(r2)
 1010600:	e0ffff17 	ldw	r3,-4(fp)
 1010604:	18c00017 	ldw	r3,0(r3)
 1010608:	10c00015 	stw	r3,0(r2)
	node->next = node->prev = node;
 101060c:	e0bfff17 	ldw	r2,-4(fp)
 1010610:	e0ffff17 	ldw	r3,-4(fp)
 1010614:	10c00115 	stw	r3,4(r2)
 1010618:	e0bfff17 	ldw	r2,-4(fp)
 101061c:	10c00117 	ldw	r3,4(r2)
 1010620:	e0bfff17 	ldw	r2,-4(fp)
 1010624:	10c00015 	stw	r3,0(r2)
}
 1010628:	0001883a 	nop
 101062c:	e037883a 	mov	sp,fp
 1010630:	df000017 	ldw	fp,0(sp)
 1010634:	dec00104 	addi	sp,sp,4
 1010638:	f800283a 	ret

0101063c <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 101063c:	defffd04 	addi	sp,sp,-12
 1010640:	df000215 	stw	fp,8(sp)
 1010644:	df000204 	addi	fp,sp,8
 1010648:	e13ffe15 	stw	r4,-8(fp)
 101064c:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 1010650:	e0bfff17 	ldw	r2,-4(fp)
 1010654:	1004d17a 	srli	r2,r2,5
 1010658:	1087883a 	add	r3,r2,r2
 101065c:	18c7883a 	add	r3,r3,r3
 1010660:	1809883a 	mov	r4,r3
 1010664:	e0fffe17 	ldw	r3,-8(fp)
 1010668:	1907883a 	add	r3,r3,r4
 101066c:	1085883a 	add	r2,r2,r2
 1010670:	1085883a 	add	r2,r2,r2
 1010674:	1009883a 	mov	r4,r2
 1010678:	e0bffe17 	ldw	r2,-8(fp)
 101067c:	1105883a 	add	r2,r2,r4
 1010680:	11000017 	ldw	r4,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 1010684:	e0bfff17 	ldw	r2,-4(fp)
 1010688:	108007cc 	andi	r2,r2,31
 101068c:	01400044 	movi	r5,1
 1010690:	2884983a 	sll	r2,r5,r2

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 1010694:	2084b03a 	or	r2,r4,r2
 1010698:	18800015 	stw	r2,0(r3)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 101069c:	0001883a 	nop
 10106a0:	e037883a 	mov	sp,fp
 10106a4:	df000017 	ldw	fp,0(sp)
 10106a8:	dec00104 	addi	sp,sp,4
 10106ac:	f800283a 	ret

010106b0 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 10106b0:	defffd04 	addi	sp,sp,-12
 10106b4:	df000215 	stw	fp,8(sp)
 10106b8:	df000204 	addi	fp,sp,8
 10106bc:	e13ffe15 	stw	r4,-8(fp)
 10106c0:	e17fff15 	stw	r5,-4(fp)
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 10106c4:	e0bfff17 	ldw	r2,-4(fp)
 10106c8:	1004d17a 	srli	r2,r2,5
 10106cc:	1085883a 	add	r2,r2,r2
 10106d0:	1085883a 	add	r2,r2,r2
 10106d4:	1007883a 	mov	r3,r2
 10106d8:	e0bffe17 	ldw	r2,-8(fp)
 10106dc:	10c5883a 	add	r2,r2,r3
 10106e0:	10c00017 	ldw	r3,0(r2)
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
 10106e4:	e0bfff17 	ldw	r2,-4(fp)
 10106e8:	108007cc 	andi	r2,r2,31
 10106ec:	1884d83a 	srl	r2,r3,r2
 10106f0:	1080004c 	andi	r2,r2,1
 10106f4:	1004c03a 	cmpne	r2,r2,zero
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
 10106f8:	10803fcc 	andi	r2,r2,255
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}
 10106fc:	e037883a 	mov	sp,fp
 1010700:	df000017 	ldw	fp,0(sp)
 1010704:	dec00104 	addi	sp,sp,4
 1010708:	f800283a 	ret

0101070c <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 101070c:	defffd04 	addi	sp,sp,-12
 1010710:	df000215 	stw	fp,8(sp)
 1010714:	df000204 	addi	fp,sp,8
 1010718:	e13ffe15 	stw	r4,-8(fp)
 101071c:	e17fff15 	stw	r5,-4(fp)
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 1010720:	e0bfff17 	ldw	r2,-4(fp)
 1010724:	1004d17a 	srli	r2,r2,5
 1010728:	1087883a 	add	r3,r2,r2
 101072c:	18c7883a 	add	r3,r3,r3
 1010730:	1809883a 	mov	r4,r3
 1010734:	e0fffe17 	ldw	r3,-8(fp)
 1010738:	1907883a 	add	r3,r3,r4
 101073c:	1085883a 	add	r2,r2,r2
 1010740:	1085883a 	add	r2,r2,r2
 1010744:	1009883a 	mov	r4,r2
 1010748:	e0bffe17 	ldw	r2,-8(fp)
 101074c:	1105883a 	add	r2,r2,r4
 1010750:	11000017 	ldw	r4,0(r2)
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 1010754:	e0bfff17 	ldw	r2,-4(fp)
 1010758:	108007cc 	andi	r2,r2,31
 101075c:	01400044 	movi	r5,1
 1010760:	2884983a 	sll	r2,r5,r2
 1010764:	0084303a 	nor	r2,zero,r2
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
}

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 1010768:	2084703a 	and	r2,r4,r2
 101076c:	18800015 	stw	r2,0(r3)
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}
 1010770:	0001883a 	nop
 1010774:	e037883a 	mov	sp,fp
 1010778:	df000017 	ldw	fp,0(sp)
 101077c:	dec00104 	addi	sp,sp,4
 1010780:	f800283a 	ret

01010784 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 1010784:	defffc04 	addi	sp,sp,-16
 1010788:	dfc00315 	stw	ra,12(sp)
 101078c:	df000215 	stw	fp,8(sp)
 1010790:	df000204 	addi	fp,sp,8
 1010794:	e13ffe15 	stw	r4,-8(fp)
 1010798:	e17fff15 	stw	r5,-4(fp)
	return !metal_bitmap_is_bit_set(bitmap, bit);
 101079c:	e17fff17 	ldw	r5,-4(fp)
 10107a0:	e13ffe17 	ldw	r4,-8(fp)
 10107a4:	10106b00 	call	10106b0 <metal_bitmap_is_bit_set>
 10107a8:	1005003a 	cmpeq	r2,r2,zero
 10107ac:	10803fcc 	andi	r2,r2,255
}
 10107b0:	e037883a 	mov	sp,fp
 10107b4:	dfc00117 	ldw	ra,4(sp)
 10107b8:	df000017 	ldw	fp,0(sp)
 10107bc:	dec00204 	addi	sp,sp,8
 10107c0:	f800283a 	ret

010107c4 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 10107c4:	defffa04 	addi	sp,sp,-24
 10107c8:	dfc00515 	stw	ra,20(sp)
 10107cc:	df000415 	stw	fp,16(sp)
 10107d0:	df000404 	addi	fp,sp,16
 10107d4:	e13ffd15 	stw	r4,-12(fp)
 10107d8:	e17ffe15 	stw	r5,-8(fp)
 10107dc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int bit;
	for (bit = start;
 10107e0:	e0bffe17 	ldw	r2,-8(fp)
 10107e4:	e0bffc15 	stw	r2,-16(fp)
 10107e8:	00000306 	br	10107f8 <metal_bitmap_next_clear_bit+0x34>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 10107ec:	e0bffc17 	ldw	r2,-16(fp)
 10107f0:	10800044 	addi	r2,r2,1
 10107f4:	e0bffc15 	stw	r2,-16(fp)
static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;
	for (bit = start;
 10107f8:	e0fffc17 	ldw	r3,-16(fp)
 10107fc:	e0bfff17 	ldw	r2,-4(fp)
 1010800:	1880052e 	bgeu	r3,r2,1010818 <metal_bitmap_next_clear_bit+0x54>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 1010804:	e0bffc17 	ldw	r2,-16(fp)
 1010808:	100b883a 	mov	r5,r2
 101080c:	e13ffd17 	ldw	r4,-12(fp)
 1010810:	10107840 	call	1010784 <metal_bitmap_is_bit_clear>
 1010814:	103ff526 	beq	r2,zero,10107ec <__alt_data_end+0xff0107ec>
	     bit ++)
		;
	return bit;
 1010818:	e0bffc17 	ldw	r2,-16(fp)
}
 101081c:	e037883a 	mov	sp,fp
 1010820:	dfc00117 	ldw	ra,4(sp)
 1010824:	df000017 	ldw	fp,0(sp)
 1010828:	dec00204 	addi	sp,sp,8
 101082c:	f800283a 	ret

01010830 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 1010830:	defffa04 	addi	sp,sp,-24
 1010834:	dfc00515 	stw	ra,20(sp)
 1010838:	df000415 	stw	fp,16(sp)
 101083c:	df000404 	addi	fp,sp,16
 1010840:	e13ffc15 	stw	r4,-16(fp)
 1010844:	e17ffd15 	stw	r5,-12(fp)
 1010848:	e1bffe15 	stw	r6,-8(fp)
 101084c:	e1ffff15 	stw	r7,-4(fp)
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 1010850:	e0fffc17 	ldw	r3,-16(fp)
 1010854:	e0bffd17 	ldw	r2,-12(fp)
 1010858:	10000226 	beq	r2,zero,1010864 <rpmsg_init_ept+0x34>
 101085c:	e0bffd17 	ldw	r2,-12(fp)
 1010860:	00000206 	br	101086c <rpmsg_init_ept+0x3c>
 1010864:	008040f4 	movhi	r2,259
 1010868:	10a7ec04 	addi	r2,r2,-24656
 101086c:	01800804 	movi	r6,32
 1010870:	100b883a 	mov	r5,r2
 1010874:	1809883a 	mov	r4,r3
 1010878:	101661c0 	call	101661c <strncpy>
	ept->addr = src;
 101087c:	e0bffc17 	ldw	r2,-16(fp)
 1010880:	e0fffe17 	ldw	r3,-8(fp)
 1010884:	10c00915 	stw	r3,36(r2)
	ept->dest_addr = dest;
 1010888:	e0bffc17 	ldw	r2,-16(fp)
 101088c:	e0ffff17 	ldw	r3,-4(fp)
 1010890:	10c00a15 	stw	r3,40(r2)
	ept->cb = cb;
 1010894:	e0bffc17 	ldw	r2,-16(fp)
 1010898:	e0c00217 	ldw	r3,8(fp)
 101089c:	10c00b15 	stw	r3,44(r2)
	ept->ns_unbind_cb = ns_unbind_cb;
 10108a0:	e0bffc17 	ldw	r2,-16(fp)
 10108a4:	e0c00317 	ldw	r3,12(fp)
 10108a8:	10c00c15 	stw	r3,48(r2)
}
 10108ac:	0001883a 	nop
 10108b0:	e037883a 	mov	sp,fp
 10108b4:	dfc00117 	ldw	ra,4(sp)
 10108b8:	df000017 	ldw	fp,0(sp)
 10108bc:	dec00204 	addi	sp,sp,8
 10108c0:	f800283a 	ret

010108c4 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 10108c4:	defffa04 	addi	sp,sp,-24
 10108c8:	dfc00515 	stw	ra,20(sp)
 10108cc:	df000415 	stw	fp,16(sp)
 10108d0:	df000404 	addi	fp,sp,16
 10108d4:	e13ffe15 	stw	r4,-8(fp)
 10108d8:	e17fff15 	stw	r5,-4(fp)
	unsigned int addr = RPMSG_ADDR_ANY;
 10108dc:	00bfffc4 	movi	r2,-1
 10108e0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 10108e4:	e0bfff17 	ldw	r2,-4(fp)
 10108e8:	100d883a 	mov	r6,r2
 10108ec:	000b883a 	mov	r5,zero
 10108f0:	e13ffe17 	ldw	r4,-8(fp)
 10108f4:	10107c40 	call	10107c4 <metal_bitmap_next_clear_bit>
 10108f8:	e0bffd15 	stw	r2,-12(fp)
	if (nextbit < (uint32_t)size) {
 10108fc:	e0bfff17 	ldw	r2,-4(fp)
 1010900:	e0fffd17 	ldw	r3,-12(fp)
 1010904:	1880062e 	bgeu	r3,r2,1010920 <rpmsg_get_address+0x5c>
		addr = nextbit;
 1010908:	e0bffd17 	ldw	r2,-12(fp)
 101090c:	e0bffc15 	stw	r2,-16(fp)
		metal_bitmap_set_bit(bitmap, nextbit);
 1010910:	e0bffd17 	ldw	r2,-12(fp)
 1010914:	100b883a 	mov	r5,r2
 1010918:	e13ffe17 	ldw	r4,-8(fp)
 101091c:	101063c0 	call	101063c <metal_bitmap_set_bit>
	}

	return addr;
 1010920:	e0bffc17 	ldw	r2,-16(fp)
}
 1010924:	e037883a 	mov	sp,fp
 1010928:	dfc00117 	ldw	ra,4(sp)
 101092c:	df000017 	ldw	fp,0(sp)
 1010930:	dec00204 	addi	sp,sp,8
 1010934:	f800283a 	ret

01010938 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 1010938:	defffb04 	addi	sp,sp,-20
 101093c:	dfc00415 	stw	ra,16(sp)
 1010940:	df000315 	stw	fp,12(sp)
 1010944:	df000304 	addi	fp,sp,12
 1010948:	e13ffd15 	stw	r4,-12(fp)
 101094c:	e17ffe15 	stw	r5,-8(fp)
 1010950:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size)
 1010954:	e0ffff17 	ldw	r3,-4(fp)
 1010958:	e0bffe17 	ldw	r2,-8(fp)
 101095c:	1880030e 	bge	r3,r2,101096c <rpmsg_release_address+0x34>
		metal_bitmap_clear_bit(bitmap, addr);
 1010960:	e17fff17 	ldw	r5,-4(fp)
 1010964:	e13ffd17 	ldw	r4,-12(fp)
 1010968:	101070c0 	call	101070c <metal_bitmap_clear_bit>
}
 101096c:	0001883a 	nop
 1010970:	e037883a 	mov	sp,fp
 1010974:	dfc00117 	ldw	ra,4(sp)
 1010978:	df000017 	ldw	fp,0(sp)
 101097c:	dec00204 	addi	sp,sp,8
 1010980:	f800283a 	ret

01010984 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 1010984:	defffb04 	addi	sp,sp,-20
 1010988:	dfc00415 	stw	ra,16(sp)
 101098c:	df000315 	stw	fp,12(sp)
 1010990:	df000304 	addi	fp,sp,12
 1010994:	e13ffd15 	stw	r4,-12(fp)
 1010998:	e17ffe15 	stw	r5,-8(fp)
 101099c:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size)
 10109a0:	e0ffff17 	ldw	r3,-4(fp)
 10109a4:	e0bffe17 	ldw	r2,-8(fp)
 10109a8:	1880040e 	bge	r3,r2,10109bc <rpmsg_is_address_set+0x38>
		return metal_bitmap_is_bit_set(bitmap, addr);
 10109ac:	e17fff17 	ldw	r5,-4(fp)
 10109b0:	e13ffd17 	ldw	r4,-12(fp)
 10109b4:	10106b00 	call	10106b0 <metal_bitmap_is_bit_set>
 10109b8:	00000106 	br	10109c0 <rpmsg_is_address_set+0x3c>
	else
		return RPMSG_ERR_PARAM;
 10109bc:	00be0b44 	movi	r2,-2003
}
 10109c0:	e037883a 	mov	sp,fp
 10109c4:	dfc00117 	ldw	ra,4(sp)
 10109c8:	df000017 	ldw	fp,0(sp)
 10109cc:	dec00204 	addi	sp,sp,8
 10109d0:	f800283a 	ret

010109d4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 10109d4:	defffb04 	addi	sp,sp,-20
 10109d8:	dfc00415 	stw	ra,16(sp)
 10109dc:	df000315 	stw	fp,12(sp)
 10109e0:	df000304 	addi	fp,sp,12
 10109e4:	e13ffd15 	stw	r4,-12(fp)
 10109e8:	e17ffe15 	stw	r5,-8(fp)
 10109ec:	e1bfff15 	stw	r6,-4(fp)
	if (addr < size) {
 10109f0:	e0ffff17 	ldw	r3,-4(fp)
 10109f4:	e0bffe17 	ldw	r2,-8(fp)
 10109f8:	1880050e 	bge	r3,r2,1010a10 <rpmsg_set_address+0x3c>
		metal_bitmap_set_bit(bitmap, addr);
 10109fc:	e17fff17 	ldw	r5,-4(fp)
 1010a00:	e13ffd17 	ldw	r4,-12(fp)
 1010a04:	101063c0 	call	101063c <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 1010a08:	0005883a 	mov	r2,zero
 1010a0c:	00000106 	br	1010a14 <rpmsg_set_address+0x40>
	} else {
		return RPMSG_ERR_PARAM;
 1010a10:	00be0b44 	movi	r2,-2003
	}
}
 1010a14:	e037883a 	mov	sp,fp
 1010a18:	dfc00117 	ldw	ra,4(sp)
 1010a1c:	df000017 	ldw	fp,0(sp)
 1010a20:	dec00204 	addi	sp,sp,8
 1010a24:	f800283a 	ret

01010a28 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 1010a28:	defff704 	addi	sp,sp,-36
 1010a2c:	dfc00815 	stw	ra,32(sp)
 1010a30:	df000715 	stw	fp,28(sp)
 1010a34:	df000704 	addi	fp,sp,28
 1010a38:	e13ffc15 	stw	r4,-16(fp)
 1010a3c:	e17ffd15 	stw	r5,-12(fp)
 1010a40:	e1bffe15 	stw	r6,-8(fp)
 1010a44:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 1010a48:	e0bffc17 	ldw	r2,-16(fp)
 1010a4c:	10000826 	beq	r2,zero,1010a70 <rpmsg_send_offchannel_raw+0x48>
 1010a50:	e0bffc17 	ldw	r2,-16(fp)
 1010a54:	10800817 	ldw	r2,32(r2)
 1010a58:	10000526 	beq	r2,zero,1010a70 <rpmsg_send_offchannel_raw+0x48>
 1010a5c:	e0bfff17 	ldw	r2,-4(fp)
 1010a60:	10000326 	beq	r2,zero,1010a70 <rpmsg_send_offchannel_raw+0x48>
 1010a64:	e0bffe17 	ldw	r2,-8(fp)
 1010a68:	10bfffd8 	cmpnei	r2,r2,-1
 1010a6c:	1000021e 	bne	r2,zero,1010a78 <rpmsg_send_offchannel_raw+0x50>
		return RPMSG_ERR_PARAM;
 1010a70:	00be0b44 	movi	r2,-2003
 1010a74:	00001306 	br	1010ac4 <rpmsg_send_offchannel_raw+0x9c>

	rdev = ept->rdev;
 1010a78:	e0bffc17 	ldw	r2,-16(fp)
 1010a7c:	10800817 	ldw	r2,32(r2)
 1010a80:	e0bffb15 	stw	r2,-20(fp)

	if (rdev->ops.send_offchannel_raw)
 1010a84:	e0bffb17 	ldw	r2,-20(fp)
 1010a88:	10801817 	ldw	r2,96(r2)
 1010a8c:	10000c26 	beq	r2,zero,1010ac0 <rpmsg_send_offchannel_raw+0x98>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 1010a90:	e0bffb17 	ldw	r2,-20(fp)
 1010a94:	10801817 	ldw	r2,96(r2)
 1010a98:	e0c00317 	ldw	r3,12(fp)
 1010a9c:	d8c00115 	stw	r3,4(sp)
 1010aa0:	e0c00217 	ldw	r3,8(fp)
 1010aa4:	d8c00015 	stw	r3,0(sp)
 1010aa8:	e1ffff17 	ldw	r7,-4(fp)
 1010aac:	e1bffe17 	ldw	r6,-8(fp)
 1010ab0:	e17ffd17 	ldw	r5,-12(fp)
 1010ab4:	e13ffb17 	ldw	r4,-20(fp)
 1010ab8:	103ee83a 	callr	r2
 1010abc:	00000106 	br	1010ac4 <rpmsg_send_offchannel_raw+0x9c>
						      size, wait);

	return RPMSG_ERR_PARAM;
 1010ac0:	00be0b44 	movi	r2,-2003
}
 1010ac4:	e037883a 	mov	sp,fp
 1010ac8:	dfc00117 	ldw	ra,4(sp)
 1010acc:	df000017 	ldw	fp,0(sp)
 1010ad0:	dec00204 	addi	sp,sp,8
 1010ad4:	f800283a 	ret

01010ad8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 1010ad8:	deffef04 	addi	sp,sp,-68
 1010adc:	dfc01015 	stw	ra,64(sp)
 1010ae0:	df000f15 	stw	fp,60(sp)
 1010ae4:	df000f04 	addi	fp,sp,60
 1010ae8:	e13ffe15 	stw	r4,-8(fp)
 1010aec:	e17fff15 	stw	r5,-4(fp)
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 1010af0:	e0bfff17 	ldw	r2,-4(fp)
 1010af4:	e0bffd15 	stw	r2,-12(fp)
	ns_msg.addr = ept->addr;
 1010af8:	e0bffe17 	ldw	r2,-8(fp)
 1010afc:	10800917 	ldw	r2,36(r2)
 1010b00:	e0bffc15 	stw	r2,-16(fp)
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 1010b04:	e0fffe17 	ldw	r3,-8(fp)
 1010b08:	e0bff404 	addi	r2,fp,-48
 1010b0c:	01800804 	movi	r6,32
 1010b10:	180b883a 	mov	r5,r3
 1010b14:	1009883a 	mov	r4,r2
 1010b18:	101661c0 	call	101661c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 1010b1c:	e0bffe17 	ldw	r2,-8(fp)
 1010b20:	10c00917 	ldw	r3,36(r2)
 1010b24:	e13ff404 	addi	r4,fp,-48
 1010b28:	00800044 	movi	r2,1
 1010b2c:	d8800115 	stw	r2,4(sp)
 1010b30:	00800a04 	movi	r2,40
 1010b34:	d8800015 	stw	r2,0(sp)
 1010b38:	200f883a 	mov	r7,r4
 1010b3c:	01800d44 	movi	r6,53
 1010b40:	180b883a 	mov	r5,r3
 1010b44:	e13ffe17 	ldw	r4,-8(fp)
 1010b48:	1010a280 	call	1010a28 <rpmsg_send_offchannel_raw>
 1010b4c:	e0bff315 	stw	r2,-52(fp)
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 1010b50:	e0bff317 	ldw	r2,-52(fp)
 1010b54:	1000020e 	bge	r2,zero,1010b60 <rpmsg_send_ns_message+0x88>
		return ret;
 1010b58:	e0bff317 	ldw	r2,-52(fp)
 1010b5c:	00000106 	br	1010b64 <rpmsg_send_ns_message+0x8c>
	else
		return RPMSG_SUCCESS;
 1010b60:	0005883a 	mov	r2,zero
}
 1010b64:	e037883a 	mov	sp,fp
 1010b68:	dfc00117 	ldw	ra,4(sp)
 1010b6c:	df000017 	ldw	fp,0(sp)
 1010b70:	dec00204 	addi	sp,sp,8
 1010b74:	f800283a 	ret

01010b78 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 1010b78:	defff704 	addi	sp,sp,-36
 1010b7c:	dfc00815 	stw	ra,32(sp)
 1010b80:	df000715 	stw	fp,28(sp)
 1010b84:	df000704 	addi	fp,sp,28
 1010b88:	e13ffc15 	stw	r4,-16(fp)
 1010b8c:	e17ffd15 	stw	r5,-12(fp)
 1010b90:	e1bffe15 	stw	r6,-8(fp)
 1010b94:	e1ffff15 	stw	r7,-4(fp)
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 1010b98:	e0bffc17 	ldw	r2,-16(fp)
 1010b9c:	10800017 	ldw	r2,0(r2)
 1010ba0:	e0bff915 	stw	r2,-28(fp)
 1010ba4:	00003b06 	br	1010c94 <rpmsg_get_endpoint+0x11c>
		int name_match = 0;
 1010ba8:	e03ffa15 	stw	zero,-24(fp)

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 1010bac:	e0bff917 	ldw	r2,-28(fp)
 1010bb0:	10bff304 	addi	r2,r2,-52
 1010bb4:	e0bffb15 	stw	r2,-20(fp)
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 1010bb8:	e0bffe17 	ldw	r2,-8(fp)
 1010bbc:	10bfffe0 	cmpeqi	r2,r2,-1
 1010bc0:	1000061e 	bne	r2,zero,1010bdc <rpmsg_get_endpoint+0x64>
 1010bc4:	e0bffb17 	ldw	r2,-20(fp)
 1010bc8:	10c00917 	ldw	r3,36(r2)
 1010bcc:	e0bffe17 	ldw	r2,-8(fp)
 1010bd0:	1880021e 	bne	r3,r2,1010bdc <rpmsg_get_endpoint+0x64>
			return ept;
 1010bd4:	e0bffb17 	ldw	r2,-20(fp)
 1010bd8:	00003206 	br	1010ca4 <rpmsg_get_endpoint+0x12c>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 1010bdc:	e0bffb17 	ldw	r2,-20(fp)
 1010be0:	10c00917 	ldw	r3,36(r2)
 1010be4:	e0bffe17 	ldw	r2,-8(fp)
 1010be8:	1880061e 	bne	r3,r2,1010c04 <rpmsg_get_endpoint+0x8c>
 1010bec:	e0bffb17 	ldw	r2,-20(fp)
 1010bf0:	10c00a17 	ldw	r3,40(r2)
 1010bf4:	e0bfff17 	ldw	r2,-4(fp)
 1010bf8:	1880021e 	bne	r3,r2,1010c04 <rpmsg_get_endpoint+0x8c>
			return ept;
 1010bfc:	e0bffb17 	ldw	r2,-20(fp)
 1010c00:	00002806 	br	1010ca4 <rpmsg_get_endpoint+0x12c>
		/* else use name service and destination address */
		if (name)
 1010c04:	e0bffd17 	ldw	r2,-12(fp)
 1010c08:	10000826 	beq	r2,zero,1010c2c <rpmsg_get_endpoint+0xb4>
			name_match = !strncmp(ept->name, name,
 1010c0c:	e0bffb17 	ldw	r2,-20(fp)
 1010c10:	01800804 	movi	r6,32
 1010c14:	e17ffd17 	ldw	r5,-12(fp)
 1010c18:	1009883a 	mov	r4,r2
 1010c1c:	101654c0 	call	101654c <strncmp>
 1010c20:	1005003a 	cmpeq	r2,r2,zero
 1010c24:	10803fcc 	andi	r2,r2,255
 1010c28:	e0bffa15 	stw	r2,-24(fp)
					      sizeof(ept->name));
		if (!name || !name_match)
 1010c2c:	e0bffd17 	ldw	r2,-12(fp)
 1010c30:	10001426 	beq	r2,zero,1010c84 <rpmsg_get_endpoint+0x10c>
 1010c34:	e0bffa17 	ldw	r2,-24(fp)
 1010c38:	10001226 	beq	r2,zero,1010c84 <rpmsg_get_endpoint+0x10c>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 1010c3c:	e0bfff17 	ldw	r2,-4(fp)
 1010c40:	10bfffe0 	cmpeqi	r2,r2,-1
 1010c44:	1000061e 	bne	r2,zero,1010c60 <rpmsg_get_endpoint+0xe8>
 1010c48:	e0bffb17 	ldw	r2,-20(fp)
 1010c4c:	10c00a17 	ldw	r3,40(r2)
 1010c50:	e0bfff17 	ldw	r2,-4(fp)
 1010c54:	1880021e 	bne	r3,r2,1010c60 <rpmsg_get_endpoint+0xe8>
			return ept;
 1010c58:	e0bffb17 	ldw	r2,-20(fp)
 1010c5c:	00001106 	br	1010ca4 <rpmsg_get_endpoint+0x12c>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 1010c60:	e0bffe17 	ldw	r2,-8(fp)
 1010c64:	10bfffd8 	cmpnei	r2,r2,-1
 1010c68:	1000071e 	bne	r2,zero,1010c88 <rpmsg_get_endpoint+0x110>
 1010c6c:	e0bffb17 	ldw	r2,-20(fp)
 1010c70:	10800a17 	ldw	r2,40(r2)
 1010c74:	10bfffd8 	cmpnei	r2,r2,-1
 1010c78:	1000031e 	bne	r2,zero,1010c88 <rpmsg_get_endpoint+0x110>
			return ept;
 1010c7c:	e0bffb17 	ldw	r2,-20(fp)
 1010c80:	00000806 	br	1010ca4 <rpmsg_get_endpoint+0x12c>
		/* else use name service and destination address */
		if (name)
			name_match = !strncmp(ept->name, name,
					      sizeof(ept->name));
		if (!name || !name_match)
			continue;
 1010c84:	0001883a 	nop
					  uint32_t dest_addr)
{
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 1010c88:	e0bff917 	ldw	r2,-28(fp)
 1010c8c:	10800017 	ldw	r2,0(r2)
 1010c90:	e0bff915 	stw	r2,-28(fp)
 1010c94:	e0fffc17 	ldw	r3,-16(fp)
 1010c98:	e0bff917 	ldw	r2,-28(fp)
 1010c9c:	18bfc21e 	bne	r3,r2,1010ba8 <__alt_data_end+0xff010ba8>
			return ept;
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
			return ept;
	}
	return NULL;
 1010ca0:	0005883a 	mov	r2,zero
}
 1010ca4:	e037883a 	mov	sp,fp
 1010ca8:	dfc00117 	ldw	ra,4(sp)
 1010cac:	df000017 	ldw	fp,0(sp)
 1010cb0:	dec00204 	addi	sp,sp,8
 1010cb4:	f800283a 	ret

01010cb8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 1010cb8:	defffc04 	addi	sp,sp,-16
 1010cbc:	dfc00315 	stw	ra,12(sp)
 1010cc0:	df000215 	stw	fp,8(sp)
 1010cc4:	df000204 	addi	fp,sp,8
 1010cc8:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept)
 1010ccc:	e0bfff17 	ldw	r2,-4(fp)
 1010cd0:	10001426 	beq	r2,zero,1010d24 <rpmsg_unregister_endpoint+0x6c>
		return;

	rdev = ept->rdev;
 1010cd4:	e0bfff17 	ldw	r2,-4(fp)
 1010cd8:	10800817 	ldw	r2,32(r2)
 1010cdc:	e0bffe15 	stw	r2,-8(fp)

	if (ept->addr != RPMSG_ADDR_ANY)
 1010ce0:	e0bfff17 	ldw	r2,-4(fp)
 1010ce4:	10800917 	ldw	r2,36(r2)
 1010ce8:	10bfffe0 	cmpeqi	r2,r2,-1
 1010cec:	1000081e 	bne	r2,zero,1010d10 <rpmsg_unregister_endpoint+0x58>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 1010cf0:	e0bffe17 	ldw	r2,-8(fp)
 1010cf4:	10c01204 	addi	r3,r2,72
				      ept->addr);
 1010cf8:	e0bfff17 	ldw	r2,-4(fp)
 1010cfc:	10800917 	ldw	r2,36(r2)
		return;

	rdev = ept->rdev;

	if (ept->addr != RPMSG_ADDR_ANY)
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 1010d00:	100d883a 	mov	r6,r2
 1010d04:	01402004 	movi	r5,128
 1010d08:	1809883a 	mov	r4,r3
 1010d0c:	10109380 	call	1010938 <rpmsg_release_address>
				      ept->addr);
	metal_list_del(&ept->node);
 1010d10:	e0bfff17 	ldw	r2,-4(fp)
 1010d14:	10800d04 	addi	r2,r2,52
 1010d18:	1009883a 	mov	r4,r2
 1010d1c:	10105d40 	call	10105d4 <metal_list_del>
 1010d20:	00000106 	br	1010d28 <rpmsg_unregister_endpoint+0x70>
static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
		return;
 1010d24:	0001883a 	nop

	if (ept->addr != RPMSG_ADDR_ANY)
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
				      ept->addr);
	metal_list_del(&ept->node);
}
 1010d28:	e037883a 	mov	sp,fp
 1010d2c:	dfc00117 	ldw	ra,4(sp)
 1010d30:	df000017 	ldw	fp,0(sp)
 1010d34:	dec00204 	addi	sp,sp,8
 1010d38:	f800283a 	ret

01010d3c <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
 1010d3c:	defffc04 	addi	sp,sp,-16
 1010d40:	dfc00315 	stw	ra,12(sp)
 1010d44:	df000215 	stw	fp,8(sp)
 1010d48:	df000204 	addi	fp,sp,8
 1010d4c:	e13ffe15 	stw	r4,-8(fp)
 1010d50:	e17fff15 	stw	r5,-4(fp)
	ept->rdev = rdev;
 1010d54:	e0bfff17 	ldw	r2,-4(fp)
 1010d58:	e0fffe17 	ldw	r3,-8(fp)
 1010d5c:	10c00815 	stw	r3,32(r2)
	metal_list_add_tail(&rdev->endpoints, &ept->node);
 1010d60:	e0fffe17 	ldw	r3,-8(fp)
 1010d64:	e0bfff17 	ldw	r2,-4(fp)
 1010d68:	10800d04 	addi	r2,r2,52
 1010d6c:	100b883a 	mov	r5,r2
 1010d70:	1809883a 	mov	r4,r3
 1010d74:	10105980 	call	1010598 <metal_list_add_tail>
}
 1010d78:	0001883a 	nop
 1010d7c:	e037883a 	mov	sp,fp
 1010d80:	dfc00117 	ldw	ra,4(sp)
 1010d84:	df000017 	ldw	fp,0(sp)
 1010d88:	dec00204 	addi	sp,sp,8
 1010d8c:	f800283a 	ret

01010d90 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 1010d90:	defff604 	addi	sp,sp,-40
 1010d94:	dfc00915 	stw	ra,36(sp)
 1010d98:	df000815 	stw	fp,32(sp)
 1010d9c:	df000804 	addi	fp,sp,32
 1010da0:	e13ffc15 	stw	r4,-16(fp)
 1010da4:	e17ffd15 	stw	r5,-12(fp)
 1010da8:	e1bffe15 	stw	r6,-8(fp)
 1010dac:	e1ffff15 	stw	r7,-4(fp)
	int status = RPMSG_SUCCESS;
 1010db0:	e03ffa15 	stw	zero,-24(fp)
	uint32_t addr = src;
 1010db4:	e0bfff17 	ldw	r2,-4(fp)
 1010db8:	e0bffb15 	stw	r2,-20(fp)

	if (!ept)
 1010dbc:	e0bffc17 	ldw	r2,-16(fp)
 1010dc0:	1000021e 	bne	r2,zero,1010dcc <rpmsg_create_ept+0x3c>
		return RPMSG_ERR_PARAM;
 1010dc4:	00be0b44 	movi	r2,-2003
 1010dc8:	00004e06 	br	1010f04 <rpmsg_create_ept+0x174>

	metal_mutex_acquire(&rdev->lock);
 1010dcc:	e0bffd17 	ldw	r2,-12(fp)
 1010dd0:	10801604 	addi	r2,r2,88
 1010dd4:	1009883a 	mov	r4,r2
 1010dd8:	10104cc0 	call	10104cc <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 1010ddc:	e0bfff17 	ldw	r2,-4(fp)
 1010de0:	10bfffe0 	cmpeqi	r2,r2,-1
 1010de4:	1000161e 	bne	r2,zero,1010e40 <rpmsg_create_ept+0xb0>
		status = rpmsg_is_address_set(rdev->bitmap,
 1010de8:	e0bffd17 	ldw	r2,-12(fp)
 1010dec:	10801204 	addi	r2,r2,72
 1010df0:	e0ffff17 	ldw	r3,-4(fp)
 1010df4:	180d883a 	mov	r6,r3
 1010df8:	01402004 	movi	r5,128
 1010dfc:	1009883a 	mov	r4,r2
 1010e00:	10109840 	call	1010984 <rpmsg_is_address_set>
 1010e04:	e0bffa15 	stw	r2,-24(fp)
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 1010e08:	e0bffa17 	ldw	r2,-24(fp)
 1010e0c:	1000081e 	bne	r2,zero,1010e30 <rpmsg_create_ept+0xa0>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 1010e10:	e0bffd17 	ldw	r2,-12(fp)
 1010e14:	10801204 	addi	r2,r2,72
 1010e18:	e0ffff17 	ldw	r3,-4(fp)
 1010e1c:	180d883a 	mov	r6,r3
 1010e20:	01402004 	movi	r5,128
 1010e24:	1009883a 	mov	r4,r2
 1010e28:	10109d40 	call	10109d4 <rpmsg_set_address>
 1010e2c:	00000a06 	br	1010e58 <rpmsg_create_ept+0xc8>
					  src);
		} else if (status > 0) {
 1010e30:	e0bffa17 	ldw	r2,-24(fp)
 1010e34:	00802d0e 	bge	zero,r2,1010eec <rpmsg_create_ept+0x15c>
			status = RPMSG_SUCCESS;
 1010e38:	e03ffa15 	stw	zero,-24(fp)
			goto ret_status;
 1010e3c:	00002c06 	br	1010ef0 <rpmsg_create_ept+0x160>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 1010e40:	e0bffd17 	ldw	r2,-12(fp)
 1010e44:	10801204 	addi	r2,r2,72
 1010e48:	01402004 	movi	r5,128
 1010e4c:	1009883a 	mov	r4,r2
 1010e50:	10108c40 	call	10108c4 <rpmsg_get_address>
 1010e54:	e0bffb15 	stw	r2,-20(fp)
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 1010e58:	e0800417 	ldw	r2,16(fp)
 1010e5c:	d8800115 	stw	r2,4(sp)
 1010e60:	e0800317 	ldw	r2,12(fp)
 1010e64:	d8800015 	stw	r2,0(sp)
 1010e68:	e1c00217 	ldw	r7,8(fp)
 1010e6c:	e1bffb17 	ldw	r6,-20(fp)
 1010e70:	e17ffe17 	ldw	r5,-8(fp)
 1010e74:	e13ffc17 	ldw	r4,-16(fp)
 1010e78:	10108300 	call	1010830 <rpmsg_init_ept>
	rpmsg_register_endpoint(rdev, ept);
 1010e7c:	e17ffc17 	ldw	r5,-16(fp)
 1010e80:	e13ffd17 	ldw	r4,-12(fp)
 1010e84:	1010d3c0 	call	1010d3c <rpmsg_register_endpoint>

	if (rdev->support_ns && ept->dest_addr == RPMSG_ADDR_ANY) {
 1010e88:	e0bffd17 	ldw	r2,-12(fp)
 1010e8c:	10801903 	ldbu	r2,100(r2)
 1010e90:	10803fcc 	andi	r2,r2,255
 1010e94:	10001626 	beq	r2,zero,1010ef0 <rpmsg_create_ept+0x160>
 1010e98:	e0bffc17 	ldw	r2,-16(fp)
 1010e9c:	10800a17 	ldw	r2,40(r2)
 1010ea0:	10bfffd8 	cmpnei	r2,r2,-1
 1010ea4:	1000121e 	bne	r2,zero,1010ef0 <rpmsg_create_ept+0x160>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 1010ea8:	e0bffd17 	ldw	r2,-12(fp)
 1010eac:	10801604 	addi	r2,r2,88
 1010eb0:	1009883a 	mov	r4,r2
 1010eb4:	10105000 	call	1010500 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 1010eb8:	000b883a 	mov	r5,zero
 1010ebc:	e13ffc17 	ldw	r4,-16(fp)
 1010ec0:	1010ad80 	call	1010ad8 <rpmsg_send_ns_message>
 1010ec4:	e0bffa15 	stw	r2,-24(fp)
		metal_mutex_acquire(&rdev->lock);
 1010ec8:	e0bffd17 	ldw	r2,-12(fp)
 1010ecc:	10801604 	addi	r2,r2,88
 1010ed0:	1009883a 	mov	r4,r2
 1010ed4:	10104cc0 	call	10104cc <metal_mutex_acquire>
		if (status)
 1010ed8:	e0bffa17 	ldw	r2,-24(fp)
 1010edc:	10000426 	beq	r2,zero,1010ef0 <rpmsg_create_ept+0x160>
			rpmsg_unregister_endpoint(ept);
 1010ee0:	e13ffc17 	ldw	r4,-16(fp)
 1010ee4:	1010cb80 	call	1010cb8 <rpmsg_unregister_endpoint>
 1010ee8:	00000106 	br	1010ef0 <rpmsg_create_ept+0x160>
					  src);
		} else if (status > 0) {
			status = RPMSG_SUCCESS;
			goto ret_status;
		} else {
			goto ret_status;
 1010eec:	0001883a 	nop
		if (status)
			rpmsg_unregister_endpoint(ept);
	}

ret_status:
	metal_mutex_release(&rdev->lock);
 1010ef0:	e0bffd17 	ldw	r2,-12(fp)
 1010ef4:	10801604 	addi	r2,r2,88
 1010ef8:	1009883a 	mov	r4,r2
 1010efc:	10105000 	call	1010500 <metal_mutex_release>
	return status;
 1010f00:	e0bffa17 	ldw	r2,-24(fp)
}
 1010f04:	e037883a 	mov	sp,fp
 1010f08:	dfc00117 	ldw	ra,4(sp)
 1010f0c:	df000017 	ldw	fp,0(sp)
 1010f10:	dec00204 	addi	sp,sp,8
 1010f14:	f800283a 	ret

01010f18 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 1010f18:	defffc04 	addi	sp,sp,-16
 1010f1c:	dfc00315 	stw	ra,12(sp)
 1010f20:	df000215 	stw	fp,8(sp)
 1010f24:	df000204 	addi	fp,sp,8
 1010f28:	e13fff15 	stw	r4,-4(fp)
	struct rpmsg_device *rdev;

	if (!ept)
 1010f2c:	e0bfff17 	ldw	r2,-4(fp)
 1010f30:	10001f26 	beq	r2,zero,1010fb0 <rpmsg_destroy_ept+0x98>
		return;

	rdev = ept->rdev;
 1010f34:	e0bfff17 	ldw	r2,-4(fp)
 1010f38:	10800817 	ldw	r2,32(r2)
 1010f3c:	e0bffe15 	stw	r2,-8(fp)
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
 1010f40:	e0bfff17 	ldw	r2,-4(fp)
 1010f44:	10800003 	ldbu	r2,0(r2)
 1010f48:	10803fcc 	andi	r2,r2,255
 1010f4c:	1080201c 	xori	r2,r2,128
 1010f50:	10bfe004 	addi	r2,r2,-128
 1010f54:	10000b26 	beq	r2,zero,1010f84 <rpmsg_destroy_ept+0x6c>
 1010f58:	e0bffe17 	ldw	r2,-8(fp)
 1010f5c:	10801903 	ldbu	r2,100(r2)
 1010f60:	10803fcc 	andi	r2,r2,255
 1010f64:	10000726 	beq	r2,zero,1010f84 <rpmsg_destroy_ept+0x6c>
 1010f68:	e0bfff17 	ldw	r2,-4(fp)
 1010f6c:	10800917 	ldw	r2,36(r2)
 1010f70:	10800d60 	cmpeqi	r2,r2,53
 1010f74:	1000031e 	bne	r2,zero,1010f84 <rpmsg_destroy_ept+0x6c>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 1010f78:	01400044 	movi	r5,1
 1010f7c:	e13fff17 	ldw	r4,-4(fp)
 1010f80:	1010ad80 	call	1010ad8 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 1010f84:	e0bffe17 	ldw	r2,-8(fp)
 1010f88:	10801604 	addi	r2,r2,88
 1010f8c:	1009883a 	mov	r4,r2
 1010f90:	10104cc0 	call	10104cc <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 1010f94:	e13fff17 	ldw	r4,-4(fp)
 1010f98:	1010cb80 	call	1010cb8 <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 1010f9c:	e0bffe17 	ldw	r2,-8(fp)
 1010fa0:	10801604 	addi	r2,r2,88
 1010fa4:	1009883a 	mov	r4,r2
 1010fa8:	10105000 	call	1010500 <metal_mutex_release>
 1010fac:	00000106 	br	1010fb4 <rpmsg_destroy_ept+0x9c>
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
		return;
 1010fb0:	0001883a 	nop
	if (ept->name[0] && rdev->support_ns && ept->addr != RPMSG_NS_EPT_ADDR)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	metal_mutex_acquire(&rdev->lock);
	rpmsg_unregister_endpoint(ept);
	metal_mutex_release(&rdev->lock);
}
 1010fb4:	e037883a 	mov	sp,fp
 1010fb8:	dfc00117 	ldw	ra,4(sp)
 1010fbc:	df000017 	ldw	fp,0(sp)
 1010fc0:	dec00204 	addi	sp,sp,8
 1010fc4:	f800283a 	ret

01010fc8 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 1010fc8:	defffc04 	addi	sp,sp,-16
 1010fcc:	dfc00315 	stw	ra,12(sp)
 1010fd0:	df000215 	stw	fp,8(sp)
 1010fd4:	df000204 	addi	fp,sp,8
 1010fd8:	e13fff15 	stw	r4,-4(fp)
	const TickType_t xDelay = usec / portTICK_PERIOD_MS;
 1010fdc:	e0bfff17 	ldw	r2,-4(fp)
 1010fe0:	e0bffe15 	stw	r2,-8(fp)
	vTaskDelay(xDelay);
 1010fe4:	e13ffe17 	ldw	r4,-8(fp)
 1010fe8:	1003bbc0 	call	1003bbc <vTaskDelay>
	return 0;
 1010fec:	0005883a 	mov	r2,zero
}
 1010ff0:	e037883a 	mov	sp,fp
 1010ff4:	dfc00117 	ldw	ra,4(sp)
 1010ff8:	df000017 	ldw	fp,0(sp)
 1010ffc:	dec00204 	addi	sp,sp,8
 1011000:	f800283a 	ret

01011004 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 1011004:	defffd04 	addi	sp,sp,-12
 1011008:	dfc00215 	stw	ra,8(sp)
 101100c:	df000115 	stw	fp,4(sp)
 1011010:	df000104 	addi	fp,sp,4
 1011014:	e13fff15 	stw	r4,-4(fp)
	return __metal_sleep_usec(usec);
 1011018:	e13fff17 	ldw	r4,-4(fp)
 101101c:	1010fc80 	call	1010fc8 <__metal_sleep_usec>
}
 1011020:	e037883a 	mov	sp,fp
 1011024:	dfc00117 	ldw	ra,4(sp)
 1011028:	df000017 	ldw	fp,0(sp)
 101102c:	dec00204 	addi	sp,sp,8
 1011030:	f800283a 	ret

01011034 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 1011034:	defffe04 	addi	sp,sp,-8
 1011038:	df000115 	stw	fp,4(sp)
 101103c:	df000104 	addi	fp,sp,4
 1011040:	e13fff15 	stw	r4,-4(fp)
	list->next = list->prev = list;
 1011044:	e0bfff17 	ldw	r2,-4(fp)
 1011048:	e0ffff17 	ldw	r3,-4(fp)
 101104c:	10c00115 	stw	r3,4(r2)
 1011050:	e0bfff17 	ldw	r2,-4(fp)
 1011054:	10c00117 	ldw	r3,4(r2)
 1011058:	e0bfff17 	ldw	r2,-4(fp)
 101105c:	10c00015 	stw	r3,0(r2)
}
 1011060:	0001883a 	nop
 1011064:	e037883a 	mov	sp,fp
 1011068:	df000017 	ldw	fp,0(sp)
 101106c:	dec00104 	addi	sp,sp,4
 1011070:	f800283a 	ret

01011074 <metal_list_is_empty>:
{
	metal_list_add_before(list, node);
}

static inline int metal_list_is_empty(struct metal_list *list)
{
 1011074:	defffe04 	addi	sp,sp,-8
 1011078:	df000115 	stw	fp,4(sp)
 101107c:	df000104 	addi	fp,sp,4
 1011080:	e13fff15 	stw	r4,-4(fp)
	return list->next == list;
 1011084:	e0bfff17 	ldw	r2,-4(fp)
 1011088:	10c00017 	ldw	r3,0(r2)
 101108c:	e0bfff17 	ldw	r2,-4(fp)
 1011090:	1885003a 	cmpeq	r2,r3,r2
 1011094:	10803fcc 	andi	r2,r2,255
}
 1011098:	e037883a 	mov	sp,fp
 101109c:	df000017 	ldw	fp,0(sp)
 10110a0:	dec00104 	addi	sp,sp,4
 10110a4:	f800283a 	ret

010110a8 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 10110a8:	defffc04 	addi	sp,sp,-16
 10110ac:	df000315 	stw	fp,12(sp)
 10110b0:	df000304 	addi	fp,sp,12
 10110b4:	e13ffe15 	stw	r4,-8(fp)
 10110b8:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 10110bc:	e0bfff17 	ldw	r2,-4(fp)
 10110c0:	e0fffe17 	ldw	r3,-8(fp)
 10110c4:	18c00017 	ldw	r3,0(r3)
 10110c8:	10c5c83a 	sub	r2,r2,r3
 10110cc:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 10110d0:	e0bffe17 	ldw	r2,-8(fp)
 10110d4:	10800217 	ldw	r2,8(r2)
 10110d8:	e0fffd17 	ldw	r3,-12(fp)
 10110dc:	1880022e 	bgeu	r3,r2,10110e8 <metal_io_virt_to_offset+0x40>
 10110e0:	e0bffd17 	ldw	r2,-12(fp)
 10110e4:	00000106 	br	10110ec <metal_io_virt_to_offset+0x44>
 10110e8:	00bfffc4 	movi	r2,-1
}
 10110ec:	e037883a 	mov	sp,fp
 10110f0:	df000017 	ldw	fp,0(sp)
 10110f4:	dec00104 	addi	sp,sp,4
 10110f8:	f800283a 	ret

010110fc <__metal_mutex_init>:
 * static singleton mutex
 */
#define METAL_MUTEX_DEFINE(m) metal_mutex_t m = METAL_MUTEX_INIT(m)

static inline void __metal_mutex_init(metal_mutex_t *mutex)
{
 10110fc:	defffe04 	addi	sp,sp,-8
 1011100:	df000115 	stw	fp,4(sp)
 1011104:	df000104 	addi	fp,sp,4
 1011108:	e13fff15 	stw	r4,-4(fp)
	atomic_store(&mutex->v, 0);
 101110c:	e0bfff17 	ldw	r2,-4(fp)
 1011110:	10000015 	stw	zero,0(r2)
 1011114:	0001b03a 	sync
}
 1011118:	0001883a 	nop
 101111c:	e037883a 	mov	sp,fp
 1011120:	df000017 	ldw	fp,0(sp)
 1011124:	dec00104 	addi	sp,sp,4
 1011128:	f800283a 	ret

0101112c <__metal_mutex_deinit>:

static inline void __metal_mutex_deinit(metal_mutex_t *mutex)
{
 101112c:	defffe04 	addi	sp,sp,-8
 1011130:	df000115 	stw	fp,4(sp)
 1011134:	df000104 	addi	fp,sp,4
 1011138:	e13fff15 	stw	r4,-4(fp)
	(void)mutex;
}
 101113c:	0001883a 	nop
 1011140:	e037883a 	mov	sp,fp
 1011144:	df000017 	ldw	fp,0(sp)
 1011148:	dec00104 	addi	sp,sp,4
 101114c:	f800283a 	ret

01011150 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->v);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 1011150:	defffb04 	addi	sp,sp,-20
 1011154:	df000415 	stw	fp,16(sp)
 1011158:	df000404 	addi	fp,sp,16
 101115c:	e13fff15 	stw	r4,-4(fp)
	while (atomic_flag_test_and_set(&mutex->v)) {
 1011160:	0001883a 	nop
 1011164:	e0bfff17 	ldw	r2,-4(fp)
 1011168:	e0bffc15 	stw	r2,-16(fp)
 101116c:	e0bffc17 	ldw	r2,-16(fp)
 1011170:	10800017 	ldw	r2,0(r2)
 1011174:	e0bffd15 	stw	r2,-12(fp)
 1011178:	00800044 	movi	r2,1
 101117c:	e0bffe15 	stw	r2,-8(fp)
 1011180:	e0bfff17 	ldw	r2,-4(fp)
 1011184:	e0fffe17 	ldw	r3,-8(fp)
 1011188:	10c00015 	stw	r3,0(r2)
 101118c:	e0bffd17 	ldw	r2,-12(fp)
 1011190:	103ff41e 	bne	r2,zero,1011164 <__alt_data_end+0xff011164>
		;
	}
}
 1011194:	0001883a 	nop
 1011198:	e037883a 	mov	sp,fp
 101119c:	df000017 	ldw	fp,0(sp)
 10111a0:	dec00104 	addi	sp,sp,4
 10111a4:	f800283a 	ret

010111a8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 10111a8:	defffe04 	addi	sp,sp,-8
 10111ac:	df000115 	stw	fp,4(sp)
 10111b0:	df000104 	addi	fp,sp,4
 10111b4:	e13fff15 	stw	r4,-4(fp)
	atomic_flag_clear(&mutex->v);
 10111b8:	e0bfff17 	ldw	r2,-4(fp)
 10111bc:	0001b03a 	sync
 10111c0:	10000015 	stw	zero,0(r2)
}
 10111c4:	0001883a 	nop
 10111c8:	e037883a 	mov	sp,fp
 10111cc:	df000017 	ldw	fp,0(sp)
 10111d0:	dec00104 	addi	sp,sp,4
 10111d4:	f800283a 	ret

010111d8 <metal_mutex_init>:
/**
 * @brief	Initialize a libmetal mutex.
 * @param[in]	mutex	Mutex to initialize.
 */
static inline void metal_mutex_init(metal_mutex_t *mutex)
{
 10111d8:	defffd04 	addi	sp,sp,-12
 10111dc:	dfc00215 	stw	ra,8(sp)
 10111e0:	df000115 	stw	fp,4(sp)
 10111e4:	df000104 	addi	fp,sp,4
 10111e8:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_init(mutex);
 10111ec:	e13fff17 	ldw	r4,-4(fp)
 10111f0:	10110fc0 	call	10110fc <__metal_mutex_init>
}
 10111f4:	0001883a 	nop
 10111f8:	e037883a 	mov	sp,fp
 10111fc:	dfc00117 	ldw	ra,4(sp)
 1011200:	df000017 	ldw	fp,0(sp)
 1011204:	dec00204 	addi	sp,sp,8
 1011208:	f800283a 	ret

0101120c <metal_mutex_deinit>:
/**
 * @brief	Deinitialize a libmetal mutex.
 * @param[in]	mutex	Mutex to deinitialize.
 */
static inline void metal_mutex_deinit(metal_mutex_t *mutex)
{
 101120c:	defffd04 	addi	sp,sp,-12
 1011210:	dfc00215 	stw	ra,8(sp)
 1011214:	df000115 	stw	fp,4(sp)
 1011218:	df000104 	addi	fp,sp,4
 101121c:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_deinit(mutex);
 1011220:	e13fff17 	ldw	r4,-4(fp)
 1011224:	101112c0 	call	101112c <__metal_mutex_deinit>
}
 1011228:	0001883a 	nop
 101122c:	e037883a 	mov	sp,fp
 1011230:	dfc00117 	ldw	ra,4(sp)
 1011234:	df000017 	ldw	fp,0(sp)
 1011238:	dec00204 	addi	sp,sp,8
 101123c:	f800283a 	ret

01011240 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex 
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 1011240:	defffd04 	addi	sp,sp,-12
 1011244:	dfc00215 	stw	ra,8(sp)
 1011248:	df000115 	stw	fp,4(sp)
 101124c:	df000104 	addi	fp,sp,4
 1011250:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_acquire(mutex);
 1011254:	e13fff17 	ldw	r4,-4(fp)
 1011258:	10111500 	call	1011150 <__metal_mutex_acquire>
}
 101125c:	0001883a 	nop
 1011260:	e037883a 	mov	sp,fp
 1011264:	dfc00117 	ldw	ra,4(sp)
 1011268:	df000017 	ldw	fp,0(sp)
 101126c:	dec00204 	addi	sp,sp,8
 1011270:	f800283a 	ret

01011274 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 1011274:	defffd04 	addi	sp,sp,-12
 1011278:	dfc00215 	stw	ra,8(sp)
 101127c:	df000115 	stw	fp,4(sp)
 1011280:	df000104 	addi	fp,sp,4
 1011284:	e13fff15 	stw	r4,-4(fp)
	__metal_mutex_release(mutex);
 1011288:	e13fff17 	ldw	r4,-4(fp)
 101128c:	10111a80 	call	10111a8 <__metal_mutex_release>
}
 1011290:	0001883a 	nop
 1011294:	e037883a 	mov	sp,fp
 1011298:	dfc00117 	ldw	ra,4(sp)
 101129c:	df000017 	ldw	fp,0(sp)
 10112a0:	dec00204 	addi	sp,sp,8
 10112a4:	f800283a 	ret

010112a8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 10112a8:	defffa04 	addi	sp,sp,-24
 10112ac:	dfc00515 	stw	ra,20(sp)
 10112b0:	df000415 	stw	fp,16(sp)
 10112b4:	df000404 	addi	fp,sp,16
 10112b8:	e13ffc15 	stw	r4,-16(fp)
 10112bc:	e17ffd15 	stw	r5,-12(fp)
 10112c0:	e1bffe15 	stw	r6,-8(fp)
 10112c4:	e1ffff15 	stw	r7,-4(fp)
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
 10112c8:	e0fffc17 	ldw	r3,-16(fp)
 10112cc:	e0bffd17 	ldw	r2,-12(fp)
 10112d0:	10000226 	beq	r2,zero,10112dc <rpmsg_init_ept+0x34>
 10112d4:	e0bffd17 	ldw	r2,-12(fp)
 10112d8:	00000206 	br	10112e4 <rpmsg_init_ept+0x3c>
 10112dc:	008040f4 	movhi	r2,259
 10112e0:	10a7ed04 	addi	r2,r2,-24652
 10112e4:	01800804 	movi	r6,32
 10112e8:	100b883a 	mov	r5,r2
 10112ec:	1809883a 	mov	r4,r3
 10112f0:	101661c0 	call	101661c <strncpy>
	ept->addr = src;
 10112f4:	e0bffc17 	ldw	r2,-16(fp)
 10112f8:	e0fffe17 	ldw	r3,-8(fp)
 10112fc:	10c00915 	stw	r3,36(r2)
	ept->dest_addr = dest;
 1011300:	e0bffc17 	ldw	r2,-16(fp)
 1011304:	e0ffff17 	ldw	r3,-4(fp)
 1011308:	10c00a15 	stw	r3,40(r2)
	ept->cb = cb;
 101130c:	e0bffc17 	ldw	r2,-16(fp)
 1011310:	e0c00217 	ldw	r3,8(fp)
 1011314:	10c00b15 	stw	r3,44(r2)
	ept->ns_unbind_cb = ns_unbind_cb;
 1011318:	e0bffc17 	ldw	r2,-16(fp)
 101131c:	e0c00317 	ldw	r3,12(fp)
 1011320:	10c00c15 	stw	r3,48(r2)
}
 1011324:	0001883a 	nop
 1011328:	e037883a 	mov	sp,fp
 101132c:	dfc00117 	ldw	ra,4(sp)
 1011330:	df000017 	ldw	fp,0(sp)
 1011334:	dec00204 	addi	sp,sp,8
 1011338:	f800283a 	ret

0101133c <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 101133c:	defffe04 	addi	sp,sp,-8
 1011340:	df000115 	stw	fp,4(sp)
 1011344:	df000104 	addi	fp,sp,4
 1011348:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->role;
 101134c:	e0bfff17 	ldw	r2,-4(fp)
 1011350:	10801a17 	ldw	r2,104(r2)
 1011354:	10800517 	ldw	r2,20(r2)
}
 1011358:	e037883a 	mov	sp,fp
 101135c:	df000017 	ldw	fp,0(sp)
 1011360:	dec00104 	addi	sp,sp,4
 1011364:	f800283a 	ret

01011368 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 1011368:	defffc04 	addi	sp,sp,-16
 101136c:	dfc00315 	stw	ra,12(sp)
 1011370:	df000215 	stw	fp,8(sp)
 1011374:	df000204 	addi	fp,sp,8
 1011378:	e13ffe15 	stw	r4,-8(fp)
 101137c:	2805883a 	mov	r2,r5
 1011380:	e0bfff05 	stb	r2,-4(fp)
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 1011384:	e0bffe17 	ldw	r2,-8(fp)
 1011388:	10801a17 	ldw	r2,104(r2)
 101138c:	10800717 	ldw	r2,28(r2)
 1011390:	10800117 	ldw	r2,4(r2)
 1011394:	e0fffe17 	ldw	r3,-8(fp)
 1011398:	18c01a17 	ldw	r3,104(r3)
 101139c:	e13fff03 	ldbu	r4,-4(fp)
 10113a0:	200b883a 	mov	r5,r4
 10113a4:	1809883a 	mov	r4,r3
 10113a8:	103ee83a 	callr	r2
}
 10113ac:	0001883a 	nop
 10113b0:	e037883a 	mov	sp,fp
 10113b4:	dfc00117 	ldw	ra,4(sp)
 10113b8:	df000017 	ldw	fp,0(sp)
 10113bc:	dec00204 	addi	sp,sp,8
 10113c0:	f800283a 	ret

010113c4 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 10113c4:	defffd04 	addi	sp,sp,-12
 10113c8:	dfc00215 	stw	ra,8(sp)
 10113cc:	df000115 	stw	fp,4(sp)
 10113d0:	df000104 	addi	fp,sp,4
 10113d4:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->func->get_status(rvdev->vdev);
 10113d8:	e0bfff17 	ldw	r2,-4(fp)
 10113dc:	10801a17 	ldw	r2,104(r2)
 10113e0:	10800717 	ldw	r2,28(r2)
 10113e4:	10800017 	ldw	r2,0(r2)
 10113e8:	e0ffff17 	ldw	r3,-4(fp)
 10113ec:	18c01a17 	ldw	r3,104(r3)
 10113f0:	1809883a 	mov	r4,r3
 10113f4:	103ee83a 	callr	r2
}
 10113f8:	e037883a 	mov	sp,fp
 10113fc:	dfc00117 	ldw	ra,4(sp)
 1011400:	df000017 	ldw	fp,0(sp)
 1011404:	dec00204 	addi	sp,sp,8
 1011408:	f800283a 	ret

0101140c <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 101140c:	defffd04 	addi	sp,sp,-12
 1011410:	dfc00215 	stw	ra,8(sp)
 1011414:	df000115 	stw	fp,4(sp)
 1011418:	df000104 	addi	fp,sp,4
 101141c:	e13fff15 	stw	r4,-4(fp)
	return rvdev->vdev->func->get_features(rvdev->vdev);
 1011420:	e0bfff17 	ldw	r2,-4(fp)
 1011424:	10801a17 	ldw	r2,104(r2)
 1011428:	10800717 	ldw	r2,28(r2)
 101142c:	10800217 	ldw	r2,8(r2)
 1011430:	e0ffff17 	ldw	r3,-4(fp)
 1011434:	18c01a17 	ldw	r3,104(r3)
 1011438:	1809883a 	mov	r4,r3
 101143c:	103ee83a 	callr	r2
}
 1011440:	e037883a 	mov	sp,fp
 1011444:	dfc00117 	ldw	ra,4(sp)
 1011448:	df000017 	ldw	fp,0(sp)
 101144c:	dec00204 	addi	sp,sp,8
 1011450:	f800283a 	ret

01011454 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks[])
{
 1011454:	defff904 	addi	sp,sp,-28
 1011458:	dfc00615 	stw	ra,24(sp)
 101145c:	df000515 	stw	fp,20(sp)
 1011460:	df000504 	addi	fp,sp,20
 1011464:	e13ffc15 	stw	r4,-16(fp)
 1011468:	e17ffd15 	stw	r5,-12(fp)
 101146c:	e1bffe15 	stw	r6,-8(fp)
 1011470:	e1ffff15 	stw	r7,-4(fp)
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 1011474:	e0bffc17 	ldw	r2,-16(fp)
 1011478:	10c01a17 	ldw	r3,104(r2)
 101147c:	e13ffd17 	ldw	r4,-12(fp)
 1011480:	e0800217 	ldw	r2,8(fp)
 1011484:	d8800015 	stw	r2,0(sp)
 1011488:	e1ffff17 	ldw	r7,-4(fp)
 101148c:	e1bffe17 	ldw	r6,-8(fp)
 1011490:	200b883a 	mov	r5,r4
 1011494:	1809883a 	mov	r4,r3
 1011498:	101274c0 	call	101274c <virtio_create_virtqueues>
					callbacks);
}
 101149c:	e037883a 	mov	sp,fp
 10114a0:	dfc00117 	ldw	ra,4(sp)
 10114a4:	df000017 	ldw	fp,0(sp)
 10114a8:	dec00204 	addi	sp,sp,8
 10114ac:	f800283a 	ret

010114b0 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 10114b0:	defffc04 	addi	sp,sp,-16
 10114b4:	dfc00315 	stw	ra,12(sp)
 10114b8:	df000215 	stw	fp,8(sp)
 10114bc:	df000204 	addi	fp,sp,8
 10114c0:	e13ffe15 	stw	r4,-8(fp)
 10114c4:	e17fff15 	stw	r5,-4(fp)
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 10114c8:	01ffffc4 	movi	r7,-1
 10114cc:	e1bfff17 	ldw	r6,-4(fp)
 10114d0:	000b883a 	mov	r5,zero
 10114d4:	e13ffe17 	ldw	r4,-8(fp)
 10114d8:	1010b780 	call	1010b78 <rpmsg_get_endpoint>
}
 10114dc:	e037883a 	mov	sp,fp
 10114e0:	dfc00117 	ldw	ra,4(sp)
 10114e4:	df000017 	ldw	fp,0(sp)
 10114e8:	dec00204 	addi	sp,sp,8
 10114ec:	f800283a 	ret

010114f0 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 10114f0:	defffc04 	addi	sp,sp,-16
 10114f4:	df000315 	stw	fp,12(sp)
 10114f8:	df000304 	addi	fp,sp,12
 10114fc:	e13ffe15 	stw	r4,-8(fp)
 1011500:	e17fff15 	stw	r5,-4(fp)
	void *buffer;

	if (shpool->avail < size)
 1011504:	e0bffe17 	ldw	r2,-8(fp)
 1011508:	10c00117 	ldw	r3,4(r2)
 101150c:	e0bfff17 	ldw	r2,-4(fp)
 1011510:	1880022e 	bgeu	r3,r2,101151c <rpmsg_virtio_shm_pool_get_buffer+0x2c>
		return NULL;
 1011514:	0005883a 	mov	r2,zero
 1011518:	00001006 	br	101155c <rpmsg_virtio_shm_pool_get_buffer+0x6c>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
 101151c:	e0bffe17 	ldw	r2,-8(fp)
 1011520:	10c00017 	ldw	r3,0(r2)
 1011524:	e0bffe17 	ldw	r2,-8(fp)
 1011528:	11000217 	ldw	r4,8(r2)
 101152c:	e0bffe17 	ldw	r2,-8(fp)
 1011530:	10800117 	ldw	r2,4(r2)
 1011534:	2085c83a 	sub	r2,r4,r2
 1011538:	1885883a 	add	r2,r3,r2
 101153c:	e0bffd15 	stw	r2,-12(fp)
	shpool->avail -= size;
 1011540:	e0bffe17 	ldw	r2,-8(fp)
 1011544:	10c00117 	ldw	r3,4(r2)
 1011548:	e0bfff17 	ldw	r2,-4(fp)
 101154c:	1887c83a 	sub	r3,r3,r2
 1011550:	e0bffe17 	ldw	r2,-8(fp)
 1011554:	10c00115 	stw	r3,4(r2)

	return buffer;
 1011558:	e0bffd17 	ldw	r2,-12(fp)
}
 101155c:	e037883a 	mov	sp,fp
 1011560:	df000017 	ldw	fp,0(sp)
 1011564:	dec00104 	addi	sp,sp,4
 1011568:	f800283a 	ret

0101156c <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 101156c:	defffc04 	addi	sp,sp,-16
 1011570:	df000315 	stw	fp,12(sp)
 1011574:	df000304 	addi	fp,sp,12
 1011578:	e13ffd15 	stw	r4,-12(fp)
 101157c:	e17ffe15 	stw	r5,-8(fp)
 1011580:	e1bfff15 	stw	r6,-4(fp)
	if (!shpool)
 1011584:	e0bffd17 	ldw	r2,-12(fp)
 1011588:	10000a26 	beq	r2,zero,10115b4 <rpmsg_virtio_init_shm_pool+0x48>
		return;
	shpool->base = shb;
 101158c:	e0bffd17 	ldw	r2,-12(fp)
 1011590:	e0fffe17 	ldw	r3,-8(fp)
 1011594:	10c00015 	stw	r3,0(r2)
	shpool->size = size;
 1011598:	e0bffd17 	ldw	r2,-12(fp)
 101159c:	e0ffff17 	ldw	r3,-4(fp)
 10115a0:	10c00215 	stw	r3,8(r2)
	shpool->avail = size;
 10115a4:	e0bffd17 	ldw	r2,-12(fp)
 10115a8:	e0ffff17 	ldw	r3,-4(fp)
 10115ac:	10c00115 	stw	r3,4(r2)
 10115b0:	00000106 	br	10115b8 <rpmsg_virtio_init_shm_pool+0x4c>

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
	if (!shpool)
		return;
 10115b4:	0001883a 	nop
	shpool->base = shb;
	shpool->size = size;
	shpool->avail = size;
}
 10115b8:	e037883a 	mov	sp,fp
 10115bc:	df000017 	ldw	fp,0(sp)
 10115c0:	dec00104 	addi	sp,sp,4
 10115c4:	f800283a 	ret

010115c8 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
 10115c8:	defff604 	addi	sp,sp,-40
 10115cc:	dfc00915 	stw	ra,36(sp)
 10115d0:	df000815 	stw	fp,32(sp)
 10115d4:	df000804 	addi	fp,sp,32
 10115d8:	e13ffc15 	stw	r4,-16(fp)
 10115dc:	e17ffd15 	stw	r5,-12(fp)
 10115e0:	e1bffe15 	stw	r6,-8(fp)
 10115e4:	3805883a 	mov	r2,r7
 10115e8:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 10115ec:	e13ffc17 	ldw	r4,-16(fp)
 10115f0:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 10115f4:	e0bff915 	stw	r2,-28(fp)
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 10115f8:	e0bff917 	ldw	r2,-28(fp)
 10115fc:	10000e1e 	bne	r2,zero,1011638 <rpmsg_virtio_return_buffer+0x70>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 1011600:	e0bffd17 	ldw	r2,-12(fp)
 1011604:	e0bffa15 	stw	r2,-24(fp)
		vqbuf.len = len;
 1011608:	e0bffe17 	ldw	r2,-8(fp)
 101160c:	e0bffb15 	stw	r2,-20(fp)
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 1011610:	e0bffc17 	ldw	r2,-16(fp)
 1011614:	10c01b17 	ldw	r3,108(r2)
 1011618:	e13ffa04 	addi	r4,fp,-24
 101161c:	e0bffd17 	ldw	r2,-12(fp)
 1011620:	d8800015 	stw	r2,0(sp)
 1011624:	01c00044 	movi	r7,1
 1011628:	000d883a 	mov	r6,zero
 101162c:	200b883a 	mov	r5,r4
 1011630:	1809883a 	mov	r4,r3
 1011634:	1012e2c0 	call	1012e2c <virtqueue_add_buffer>
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 1011638:	e0bff917 	ldw	r2,-28(fp)
 101163c:	10800058 	cmpnei	r2,r2,1
 1011640:	1000071e 	bne	r2,zero,1011660 <rpmsg_virtio_return_buffer+0x98>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 1011644:	e0bffc17 	ldw	r2,-16(fp)
 1011648:	10801b17 	ldw	r2,108(r2)
 101164c:	e0ffff0b 	ldhu	r3,-4(fp)
 1011650:	e1bffe17 	ldw	r6,-8(fp)
 1011654:	180b883a 	mov	r5,r3
 1011658:	1009883a 	mov	r4,r2
 101165c:	10132580 	call	1013258 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 1011660:	0001883a 	nop
 1011664:	e037883a 	mov	sp,fp
 1011668:	dfc00117 	ldw	ra,4(sp)
 101166c:	df000017 	ldw	fp,0(sp)
 1011670:	dec00204 	addi	sp,sp,8
 1011674:	f800283a 	ret

01011678 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
 1011678:	defff604 	addi	sp,sp,-40
 101167c:	dfc00915 	stw	ra,36(sp)
 1011680:	df000815 	stw	fp,32(sp)
 1011684:	df000804 	addi	fp,sp,32
 1011688:	e13ffc15 	stw	r4,-16(fp)
 101168c:	e17ffd15 	stw	r5,-12(fp)
 1011690:	e1bffe15 	stw	r6,-8(fp)
 1011694:	3805883a 	mov	r2,r7
 1011698:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 101169c:	e13ffc17 	ldw	r4,-16(fp)
 10116a0:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 10116a4:	e0bff915 	stw	r2,-28(fp)
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 10116a8:	e0bff917 	ldw	r2,-28(fp)
 10116ac:	10000f1e 	bne	r2,zero,10116ec <rpmsg_virtio_enqueue_buffer+0x74>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 10116b0:	e0bffd17 	ldw	r2,-12(fp)
 10116b4:	e0bffa15 	stw	r2,-24(fp)
		vqbuf.len = len;
 10116b8:	e0bffe17 	ldw	r2,-8(fp)
 10116bc:	e0bffb15 	stw	r2,-20(fp)
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
 10116c0:	e0bffc17 	ldw	r2,-16(fp)
 10116c4:	10c01c17 	ldw	r3,112(r2)
 10116c8:	e13ffa04 	addi	r4,fp,-24
 10116cc:	e0bffd17 	ldw	r2,-12(fp)
 10116d0:	d8800015 	stw	r2,0(sp)
 10116d4:	000f883a 	mov	r7,zero
 10116d8:	01800044 	movi	r6,1
 10116dc:	200b883a 	mov	r5,r4
 10116e0:	1809883a 	mov	r4,r3
 10116e4:	1012e2c0 	call	1012e2c <virtqueue_add_buffer>
 10116e8:	00000c06 	br	101171c <rpmsg_virtio_enqueue_buffer+0xa4>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 10116ec:	e0bff917 	ldw	r2,-28(fp)
 10116f0:	10800058 	cmpnei	r2,r2,1
 10116f4:	1000081e 	bne	r2,zero,1011718 <rpmsg_virtio_enqueue_buffer+0xa0>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 10116f8:	e0bffc17 	ldw	r2,-16(fp)
 10116fc:	10801c17 	ldw	r2,112(r2)
 1011700:	e0ffff0b 	ldhu	r3,-4(fp)
 1011704:	e1bffe17 	ldw	r6,-8(fp)
 1011708:	180b883a 	mov	r5,r3
 101170c:	1009883a 	mov	r4,r2
 1011710:	10132580 	call	1013258 <virtqueue_add_consumed_buffer>
 1011714:	00000106 	br	101171c <rpmsg_virtio_enqueue_buffer+0xa4>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 1011718:	0005883a 	mov	r2,zero
}
 101171c:	e037883a 	mov	sp,fp
 1011720:	dfc00117 	ldw	ra,4(sp)
 1011724:	df000017 	ldw	fp,0(sp)
 1011728:	dec00204 	addi	sp,sp,8
 101172c:	f800283a 	ret

01011730 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
 1011730:	defff904 	addi	sp,sp,-28
 1011734:	dfc00615 	stw	ra,24(sp)
 1011738:	df000515 	stw	fp,20(sp)
 101173c:	df000504 	addi	fp,sp,20
 1011740:	e13ffd15 	stw	r4,-12(fp)
 1011744:	e17ffe15 	stw	r5,-8(fp)
 1011748:	e1bfff15 	stw	r6,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 101174c:	e13ffd17 	ldw	r4,-12(fp)
 1011750:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 1011754:	e0bffc15 	stw	r2,-16(fp)
	void *data = NULL;
 1011758:	e03ffb15 	stw	zero,-20(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 101175c:	e0bffc17 	ldw	r2,-16(fp)
 1011760:	1000121e 	bne	r2,zero,10117ac <rpmsg_virtio_get_tx_buffer+0x7c>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
 1011764:	e0bffd17 	ldw	r2,-12(fp)
 1011768:	10801c17 	ldw	r2,112(r2)
 101176c:	e1bfff17 	ldw	r6,-4(fp)
 1011770:	e17ffe17 	ldw	r5,-8(fp)
 1011774:	1009883a 	mov	r4,r2
 1011778:	1012f300 	call	1012f30 <virtqueue_get_buffer>
 101177c:	e0bffb15 	stw	r2,-20(fp)
		if (data == NULL) {
 1011780:	e0bffb17 	ldw	r2,-20(fp)
 1011784:	1000091e 	bne	r2,zero,10117ac <rpmsg_virtio_get_tx_buffer+0x7c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 1011788:	e0bffd17 	ldw	r2,-12(fp)
 101178c:	10801e17 	ldw	r2,120(r2)
 1011790:	01408004 	movi	r5,512
 1011794:	1009883a 	mov	r4,r2
 1011798:	10114f00 	call	10114f0 <rpmsg_virtio_shm_pool_get_buffer>
 101179c:	e0bffb15 	stw	r2,-20(fp)
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 10117a0:	e0bffe17 	ldw	r2,-8(fp)
 10117a4:	00c08004 	movi	r3,512
 10117a8:	10c00015 	stw	r3,0(r2)
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 10117ac:	e0bffc17 	ldw	r2,-16(fp)
 10117b0:	10800058 	cmpnei	r2,r2,1
 10117b4:	1000071e 	bne	r2,zero,10117d4 <rpmsg_virtio_get_tx_buffer+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
 10117b8:	e0bffd17 	ldw	r2,-12(fp)
 10117bc:	10801c17 	ldw	r2,112(r2)
 10117c0:	e1bffe17 	ldw	r6,-8(fp)
 10117c4:	e17fff17 	ldw	r5,-4(fp)
 10117c8:	1009883a 	mov	r4,r2
 10117cc:	10131440 	call	1013144 <virtqueue_get_available_buffer>
 10117d0:	e0bffb15 	stw	r2,-20(fp)
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 10117d4:	e0bffb17 	ldw	r2,-20(fp)
}
 10117d8:	e037883a 	mov	sp,fp
 10117dc:	dfc00117 	ldw	ra,4(sp)
 10117e0:	df000017 	ldw	fp,0(sp)
 10117e4:	dec00204 	addi	sp,sp,8
 10117e8:	f800283a 	ret

010117ec <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
 10117ec:	defff904 	addi	sp,sp,-28
 10117f0:	dfc00615 	stw	ra,24(sp)
 10117f4:	df000515 	stw	fp,20(sp)
 10117f8:	df000504 	addi	fp,sp,20
 10117fc:	e13ffd15 	stw	r4,-12(fp)
 1011800:	e17ffe15 	stw	r5,-8(fp)
 1011804:	e1bfff15 	stw	r6,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 1011808:	e13ffd17 	ldw	r4,-12(fp)
 101180c:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 1011810:	e0bffc15 	stw	r2,-16(fp)
	void *data = NULL;
 1011814:	e03ffb15 	stw	zero,-20(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1011818:	e0bffc17 	ldw	r2,-16(fp)
 101181c:	1000071e 	bne	r2,zero,101183c <rpmsg_virtio_get_rx_buffer+0x50>
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
 1011820:	e0bffd17 	ldw	r2,-12(fp)
 1011824:	10801b17 	ldw	r2,108(r2)
 1011828:	e1bfff17 	ldw	r6,-4(fp)
 101182c:	e17ffe17 	ldw	r5,-8(fp)
 1011830:	1009883a 	mov	r4,r2
 1011834:	1012f300 	call	1012f30 <virtqueue_get_buffer>
 1011838:	e0bffb15 	stw	r2,-20(fp)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 101183c:	e0bffc17 	ldw	r2,-16(fp)
 1011840:	10800058 	cmpnei	r2,r2,1
 1011844:	1000071e 	bne	r2,zero,1011864 <rpmsg_virtio_get_rx_buffer+0x78>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
 1011848:	e0bffd17 	ldw	r2,-12(fp)
 101184c:	10801b17 	ldw	r2,108(r2)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
		data =
 1011850:	e1bffe17 	ldw	r6,-8(fp)
 1011854:	e17fff17 	ldw	r5,-4(fp)
 1011858:	1009883a 	mov	r4,r2
 101185c:	10131440 	call	1013144 <virtqueue_get_available_buffer>
 1011860:	e0bffb15 	stw	r2,-20(fp)
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 1011864:	e0bffb17 	ldw	r2,-20(fp)
}
 1011868:	e037883a 	mov	sp,fp
 101186c:	dfc00117 	ldw	ra,4(sp)
 1011870:	df000017 	ldw	fp,0(sp)
 1011874:	dec00204 	addi	sp,sp,8
 1011878:	f800283a 	ret

0101187c <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 101187c:	defffc04 	addi	sp,sp,-16
 1011880:	dfc00315 	stw	ra,12(sp)
 1011884:	df000215 	stw	fp,8(sp)
 1011888:	df000204 	addi	fp,sp,8
 101188c:	e13fff15 	stw	r4,-4(fp)
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 1011890:	e13fff17 	ldw	r4,-4(fp)
 1011894:	10113c40 	call	10113c4 <rpmsg_virtio_get_status>
 1011898:	e0bffe05 	stb	r2,-8(fp)
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 101189c:	e0bffe03 	ldbu	r2,-8(fp)
 10118a0:	1080100c 	andi	r2,r2,64
 10118a4:	10000426 	beq	r2,zero,10118b8 <rpmsg_virtio_wait_remote_ready+0x3c>
			rpmsg_virtio_set_status(rvdev, 0);
 10118a8:	000b883a 	mov	r5,zero
 10118ac:	e13fff17 	ldw	r4,-4(fp)
 10118b0:	10113680 	call	1011368 <rpmsg_virtio_set_status>
 10118b4:	00000506 	br	10118cc <rpmsg_virtio_wait_remote_ready+0x50>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 10118b8:	e0bffe03 	ldbu	r2,-8(fp)
 10118bc:	1080010c 	andi	r2,r2,4
 10118c0:	10000226 	beq	r2,zero,10118cc <rpmsg_virtio_wait_remote_ready+0x50>
			return true;
 10118c4:	00800044 	movi	r2,1
 10118c8:	00000206 	br	10118d4 <rpmsg_virtio_wait_remote_ready+0x58>
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
 10118cc:	0001883a 	nop
	}
 10118d0:	003fef06 	br	1011890 <__alt_data_end+0xff011890>

	return false;
}
 10118d4:	e037883a 	mov	sp,fp
 10118d8:	dfc00117 	ldw	ra,4(sp)
 10118dc:	df000017 	ldw	fp,0(sp)
 10118e0:	dec00204 	addi	sp,sp,8
 10118e4:	f800283a 	ret

010118e8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 10118e8:	defffb04 	addi	sp,sp,-20
 10118ec:	dfc00415 	stw	ra,16(sp)
 10118f0:	df000315 	stw	fp,12(sp)
 10118f4:	df000304 	addi	fp,sp,12
 10118f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 10118fc:	e13fff17 	ldw	r4,-4(fp)
 1011900:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 1011904:	e0bffe15 	stw	r2,-8(fp)
	int length = 0;
 1011908:	e03ffd15 	stw	zero,-12(fp)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 101190c:	e0bffe17 	ldw	r2,-8(fp)
 1011910:	1000021e 	bne	r2,zero,101191c <_rpmsg_virtio_get_buffer_size+0x34>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 1011914:	00807c04 	movi	r2,496
 1011918:	e0bffd15 	stw	r2,-12(fp)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 101191c:	e0bffe17 	ldw	r2,-8(fp)
 1011920:	10800058 	cmpnei	r2,r2,1
 1011924:	1000091e 	bne	r2,zero,101194c <_rpmsg_virtio_get_buffer_size+0x64>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 1011928:	e0bfff17 	ldw	r2,-4(fp)
 101192c:	10801c17 	ldw	r2,112(r2)
 1011930:	1009883a 	mov	r4,r2
 1011934:	10136100 	call	1013610 <virtqueue_get_desc_size>
 1011938:	10bffc04 	addi	r2,r2,-16
	if (role == RPMSG_REMOTE) {
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
 101193c:	e0bffd15 	stw	r2,-12(fp)
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
		if (length < 0) {
 1011940:	e0bffd17 	ldw	r2,-12(fp)
 1011944:	1000010e 	bge	r2,zero,101194c <_rpmsg_virtio_get_buffer_size+0x64>
			length = 0;
 1011948:	e03ffd15 	stw	zero,-12(fp)
		}
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 101194c:	e0bffd17 	ldw	r2,-12(fp)
}
 1011950:	e037883a 	mov	sp,fp
 1011954:	dfc00117 	ldw	ra,4(sp)
 1011958:	df000017 	ldw	fp,0(sp)
 101195c:	dec00204 	addi	sp,sp,8
 1011960:	f800283a 	ret

01011964 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 1011964:	deffee04 	addi	sp,sp,-72
 1011968:	dfc01115 	stw	ra,68(sp)
 101196c:	df001015 	stw	fp,64(sp)
 1011970:	df001004 	addi	fp,sp,64
 1011974:	e13ffc15 	stw	r4,-16(fp)
 1011978:	e17ffd15 	stw	r5,-12(fp)
 101197c:	e1bffe15 	stw	r6,-8(fp)
 1011980:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 1011984:	e03ff015 	stw	zero,-64(fp)
	uint32_t buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 1011988:	e0bffc17 	ldw	r2,-16(fp)
 101198c:	e0bff215 	stw	r2,-56(fp)

	status = rpmsg_virtio_get_status(rvdev);
 1011990:	e13ff217 	ldw	r4,-56(fp)
 1011994:	10113c40 	call	10113c4 <rpmsg_virtio_get_status>
 1011998:	10803fcc 	andi	r2,r2,255
 101199c:	e0bff315 	stw	r2,-52(fp)
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 10119a0:	e0bff317 	ldw	r2,-52(fp)
 10119a4:	1080010c 	andi	r2,r2,4
 10119a8:	1000021e 	bne	r2,zero,10119b4 <rpmsg_virtio_send_offchannel_raw+0x50>
		return RPMSG_ERR_DEV_STATE;
 10119ac:	00be0b04 	movi	r2,-2004
 10119b0:	00006e06 	br	1011b6c <rpmsg_virtio_send_offchannel_raw+0x208>
	}

	if (wait)
 10119b4:	e0800317 	ldw	r2,12(fp)
 10119b8:	10000326 	beq	r2,zero,10119c8 <rpmsg_virtio_send_offchannel_raw+0x64>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 10119bc:	008ea604 	movi	r2,15000
 10119c0:	e0bff115 	stw	r2,-60(fp)
 10119c4:	00000106 	br	10119cc <rpmsg_virtio_send_offchannel_raw+0x68>
	else
		tick_count = 0;
 10119c8:	e03ff115 	stw	zero,-60(fp)

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 10119cc:	e0bffc17 	ldw	r2,-16(fp)
 10119d0:	10801604 	addi	r2,r2,88
 10119d4:	1009883a 	mov	r4,r2
 10119d8:	10112400 	call	1011240 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 10119dc:	e13ff217 	ldw	r4,-56(fp)
 10119e0:	10118e80 	call	10118e8 <_rpmsg_virtio_get_buffer_size>
 10119e4:	e0bff415 	stw	r2,-48(fp)
		if (size <= avail_size)
 10119e8:	e0800217 	ldw	r2,8(fp)
 10119ec:	e0fff417 	ldw	r3,-48(fp)
 10119f0:	18800716 	blt	r3,r2,1011a10 <rpmsg_virtio_send_offchannel_raw+0xac>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 10119f4:	e0fffa04 	addi	r3,fp,-24
 10119f8:	e0bffb04 	addi	r2,fp,-20
 10119fc:	180d883a 	mov	r6,r3
 1011a00:	100b883a 	mov	r5,r2
 1011a04:	e13ff217 	ldw	r4,-56(fp)
 1011a08:	10117300 	call	1011730 <rpmsg_virtio_get_tx_buffer>
 1011a0c:	e0bff015 	stw	r2,-64(fp)
							    &idx);
		metal_mutex_release(&rdev->lock);
 1011a10:	e0bffc17 	ldw	r2,-16(fp)
 1011a14:	10801604 	addi	r2,r2,88
 1011a18:	1009883a 	mov	r4,r2
 1011a1c:	10112740 	call	1011274 <metal_mutex_release>
		if (buffer || !tick_count)
 1011a20:	e0bff017 	ldw	r2,-64(fp)
 1011a24:	10000c1e 	bne	r2,zero,1011a58 <rpmsg_virtio_send_offchannel_raw+0xf4>
 1011a28:	e0bff117 	ldw	r2,-60(fp)
 1011a2c:	10000a26 	beq	r2,zero,1011a58 <rpmsg_virtio_send_offchannel_raw+0xf4>
			break;
		if (avail_size != 0)
 1011a30:	e0bff417 	ldw	r2,-48(fp)
 1011a34:	10000226 	beq	r2,zero,1011a40 <rpmsg_virtio_send_offchannel_raw+0xdc>
			return RPMSG_ERR_BUFF_SIZE;
 1011a38:	00be0ac4 	movi	r2,-2005
 1011a3c:	00004b06 	br	1011b6c <rpmsg_virtio_send_offchannel_raw+0x208>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 1011a40:	0100fa04 	movi	r4,1000
 1011a44:	10110040 	call	1011004 <metal_sleep_usec>
		tick_count--;
 1011a48:	e0bff117 	ldw	r2,-60(fp)
 1011a4c:	10bfffc4 	addi	r2,r2,-1
 1011a50:	e0bff115 	stw	r2,-60(fp)
	}
 1011a54:	003fdd06 	br	10119cc <__alt_data_end+0xff0119cc>
	if (!buffer)
 1011a58:	e0bff017 	ldw	r2,-64(fp)
 1011a5c:	1000021e 	bne	r2,zero,1011a68 <rpmsg_virtio_send_offchannel_raw+0x104>
		return RPMSG_ERR_NO_BUFF;
 1011a60:	00be0b84 	movi	r2,-2002
 1011a64:	00004106 	br	1011b6c <rpmsg_virtio_send_offchannel_raw+0x208>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 1011a68:	e0bffe17 	ldw	r2,-8(fp)
 1011a6c:	e0bff715 	stw	r2,-36(fp)
	rp_hdr.src = src;
 1011a70:	e0bffd17 	ldw	r2,-12(fp)
 1011a74:	e0bff615 	stw	r2,-40(fp)
	rp_hdr.len = size;
 1011a78:	e0800217 	ldw	r2,8(fp)
 1011a7c:	e0bff90d 	sth	r2,-28(fp)
	rp_hdr.reserved = 0;
 1011a80:	e03ff815 	stw	zero,-32(fp)

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 1011a84:	e0bff217 	ldw	r2,-56(fp)
 1011a88:	10801d17 	ldw	r2,116(r2)
 1011a8c:	e0bff515 	stw	r2,-44(fp)
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 1011a90:	e17ff017 	ldw	r5,-64(fp)
 1011a94:	e13ff517 	ldw	r4,-44(fp)
 1011a98:	10110a80 	call	10110a8 <metal_io_virt_to_offset>
 1011a9c:	1007883a 	mov	r3,r2
 1011aa0:	e0bff604 	addi	r2,fp,-40
 1011aa4:	01c00404 	movi	r7,16
 1011aa8:	100d883a 	mov	r6,r2
 1011aac:	180b883a 	mov	r5,r3
 1011ab0:	e13ff517 	ldw	r4,-44(fp)
 1011ab4:	100829c0 	call	100829c <metal_io_block_write>
 1011ab8:	e0bff315 	stw	r2,-52(fp)
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
 1011abc:	e0bff317 	ldw	r2,-52(fp)
 1011ac0:	10800420 	cmpeqi	r2,r2,16
 1011ac4:	1000011e 	bne	r2,zero,1011acc <rpmsg_virtio_send_offchannel_raw+0x168>
 1011ac8:	003fff06 	br	1011ac8 <__alt_data_end+0xff011ac8>

	status = metal_io_block_write(io,
 1011acc:	e0bff017 	ldw	r2,-64(fp)
 1011ad0:	10800404 	addi	r2,r2,16
 1011ad4:	100b883a 	mov	r5,r2
 1011ad8:	e13ff517 	ldw	r4,-44(fp)
 1011adc:	10110a80 	call	10110a8 <metal_io_virt_to_offset>
 1011ae0:	e1c00217 	ldw	r7,8(fp)
 1011ae4:	e1bfff17 	ldw	r6,-4(fp)
 1011ae8:	100b883a 	mov	r5,r2
 1011aec:	e13ff517 	ldw	r4,-44(fp)
 1011af0:	100829c0 	call	100829c <metal_io_block_write>
 1011af4:	e0bff315 	stw	r2,-52(fp)
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
 1011af8:	e0fff317 	ldw	r3,-52(fp)
 1011afc:	e0800217 	ldw	r2,8(fp)
 1011b00:	18800126 	beq	r3,r2,1011b08 <rpmsg_virtio_send_offchannel_raw+0x1a4>
 1011b04:	003fff06 	br	1011b04 <__alt_data_end+0xff011b04>
	metal_mutex_acquire(&rdev->lock);
 1011b08:	e0bffc17 	ldw	r2,-16(fp)
 1011b0c:	10801604 	addi	r2,r2,88
 1011b10:	1009883a 	mov	r4,r2
 1011b14:	10112400 	call	1011240 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 1011b18:	e0bffb17 	ldw	r2,-20(fp)
 1011b1c:	e0fffa0b 	ldhu	r3,-24(fp)
 1011b20:	18ffffcc 	andi	r3,r3,65535
 1011b24:	180f883a 	mov	r7,r3
 1011b28:	100d883a 	mov	r6,r2
 1011b2c:	e17ff017 	ldw	r5,-64(fp)
 1011b30:	e13ff217 	ldw	r4,-56(fp)
 1011b34:	10116780 	call	1011678 <rpmsg_virtio_enqueue_buffer>
 1011b38:	e0bff315 	stw	r2,-52(fp)
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
 1011b3c:	e0bff317 	ldw	r2,-52(fp)
 1011b40:	10000126 	beq	r2,zero,1011b48 <rpmsg_virtio_send_offchannel_raw+0x1e4>
 1011b44:	003fff06 	br	1011b44 <__alt_data_end+0xff011b44>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 1011b48:	e0bff217 	ldw	r2,-56(fp)
 1011b4c:	10801c17 	ldw	r2,112(r2)
 1011b50:	1009883a 	mov	r4,r2
 1011b54:	10134a00 	call	10134a0 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 1011b58:	e0bffc17 	ldw	r2,-16(fp)
 1011b5c:	10801604 	addi	r2,r2,88
 1011b60:	1009883a 	mov	r4,r2
 1011b64:	10112740 	call	1011274 <metal_mutex_release>

	return size;
 1011b68:	e0800217 	ldw	r2,8(fp)
}
 1011b6c:	e037883a 	mov	sp,fp
 1011b70:	dfc00117 	ldw	ra,4(sp)
 1011b74:	df000017 	ldw	fp,0(sp)
 1011b78:	dec00204 	addi	sp,sp,8
 1011b7c:	f800283a 	ret

01011b80 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 1011b80:	defffe04 	addi	sp,sp,-8
 1011b84:	df000115 	stw	fp,4(sp)
 1011b88:	df000104 	addi	fp,sp,4
 1011b8c:	e13fff15 	stw	r4,-4(fp)
	(void)vq;
}
 1011b90:	0001883a 	nop
 1011b94:	e037883a 	mov	sp,fp
 1011b98:	df000017 	ldw	fp,0(sp)
 1011b9c:	dec00104 	addi	sp,sp,4
 1011ba0:	f800283a 	ret

01011ba4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 1011ba4:	defff404 	addi	sp,sp,-48
 1011ba8:	dfc00b15 	stw	ra,44(sp)
 1011bac:	df000a15 	stw	fp,40(sp)
 1011bb0:	df000a04 	addi	fp,sp,40
 1011bb4:	e13fff15 	stw	r4,-4(fp)
	struct virtio_device *vdev = vq->vq_dev;
 1011bb8:	e0bfff17 	ldw	r2,-4(fp)
 1011bbc:	10800017 	ldw	r2,0(r2)
 1011bc0:	e0bff815 	stw	r2,-32(fp)
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 1011bc4:	e0bff817 	ldw	r2,-32(fp)
 1011bc8:	10800817 	ldw	r2,32(r2)
 1011bcc:	e0bff915 	stw	r2,-28(fp)
	struct rpmsg_device *rdev = &rvdev->rdev;
 1011bd0:	e0bff917 	ldw	r2,-28(fp)
 1011bd4:	e0bffa15 	stw	r2,-24(fp)
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 1011bd8:	e0bffa17 	ldw	r2,-24(fp)
 1011bdc:	10801604 	addi	r2,r2,88
 1011be0:	1009883a 	mov	r4,r2
 1011be4:	10112400 	call	1011240 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 1011be8:	e0fffe04 	addi	r3,fp,-8
 1011bec:	e0bffd04 	addi	r2,fp,-12
 1011bf0:	180d883a 	mov	r6,r3
 1011bf4:	100b883a 	mov	r5,r2
 1011bf8:	e13ff917 	ldw	r4,-28(fp)
 1011bfc:	10117ec0 	call	10117ec <rpmsg_virtio_get_rx_buffer>
 1011c00:	e0bff715 	stw	r2,-36(fp)

	metal_mutex_release(&rdev->lock);
 1011c04:	e0bffa17 	ldw	r2,-24(fp)
 1011c08:	10801604 	addi	r2,r2,88
 1011c0c:	1009883a 	mov	r4,r2
 1011c10:	10112740 	call	1011274 <metal_mutex_release>

	while (rp_hdr) {
 1011c14:	00006906 	br	1011dbc <rpmsg_virtio_rx_callback+0x218>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 1011c18:	e0bffa17 	ldw	r2,-24(fp)
 1011c1c:	10801604 	addi	r2,r2,88
 1011c20:	1009883a 	mov	r4,r2
 1011c24:	10112400 	call	1011240 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 1011c28:	e0bff717 	ldw	r2,-36(fp)
 1011c2c:	10c00103 	ldbu	r3,4(r2)
 1011c30:	11000143 	ldbu	r4,5(r2)
 1011c34:	2008923a 	slli	r4,r4,8
 1011c38:	20c6b03a 	or	r3,r4,r3
 1011c3c:	11000183 	ldbu	r4,6(r2)
 1011c40:	2008943a 	slli	r4,r4,16
 1011c44:	20c6b03a 	or	r3,r4,r3
 1011c48:	108001c3 	ldbu	r2,7(r2)
 1011c4c:	1004963a 	slli	r2,r2,24
 1011c50:	10c4b03a 	or	r2,r2,r3
 1011c54:	100b883a 	mov	r5,r2
 1011c58:	e13ffa17 	ldw	r4,-24(fp)
 1011c5c:	10114b00 	call	10114b0 <rpmsg_get_ept_from_addr>
 1011c60:	e0bffb15 	stw	r2,-20(fp)
		metal_mutex_release(&rdev->lock);
 1011c64:	e0bffa17 	ldw	r2,-24(fp)
 1011c68:	10801604 	addi	r2,r2,88
 1011c6c:	1009883a 	mov	r4,r2
 1011c70:	10112740 	call	1011274 <metal_mutex_release>

		if (ept) {
 1011c74:	e0bffb17 	ldw	r2,-20(fp)
 1011c78:	10003326 	beq	r2,zero,1011d48 <rpmsg_virtio_rx_callback+0x1a4>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
 1011c7c:	e0bffb17 	ldw	r2,-20(fp)
 1011c80:	10800a17 	ldw	r2,40(r2)
 1011c84:	10bfffd8 	cmpnei	r2,r2,-1
 1011c88:	10000e1e 	bne	r2,zero,1011cc4 <rpmsg_virtio_rx_callback+0x120>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
 1011c8c:	e0bff717 	ldw	r2,-36(fp)
 1011c90:	10c00003 	ldbu	r3,0(r2)
 1011c94:	11000043 	ldbu	r4,1(r2)
 1011c98:	2008923a 	slli	r4,r4,8
 1011c9c:	20c6b03a 	or	r3,r4,r3
 1011ca0:	11000083 	ldbu	r4,2(r2)
 1011ca4:	2008943a 	slli	r4,r4,16
 1011ca8:	20c6b03a 	or	r3,r4,r3
 1011cac:	108000c3 	ldbu	r2,3(r2)
 1011cb0:	1004963a 	slli	r2,r2,24
 1011cb4:	10c4b03a 	or	r2,r2,r3
 1011cb8:	1007883a 	mov	r3,r2
 1011cbc:	e0bffb17 	ldw	r2,-20(fp)
 1011cc0:	10c00a15 	stw	r3,40(r2)
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 1011cc4:	e0bffb17 	ldw	r2,-20(fp)
 1011cc8:	10c00b17 	ldw	r3,44(r2)
 1011ccc:	e0bff717 	ldw	r2,-36(fp)
 1011cd0:	12000404 	addi	r8,r2,16
					 rp_hdr->len, rp_hdr->src, ept->priv);
 1011cd4:	e0bff717 	ldw	r2,-36(fp)
 1011cd8:	11000303 	ldbu	r4,12(r2)
 1011cdc:	10800343 	ldbu	r2,13(r2)
 1011ce0:	1004923a 	slli	r2,r2,8
 1011ce4:	1104b03a 	or	r2,r2,r4
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
 1011ce8:	11bfffcc 	andi	r6,r2,65535
 1011cec:	e0bff717 	ldw	r2,-36(fp)
 1011cf0:	11000003 	ldbu	r4,0(r2)
 1011cf4:	11400043 	ldbu	r5,1(r2)
 1011cf8:	280a923a 	slli	r5,r5,8
 1011cfc:	2908b03a 	or	r4,r5,r4
 1011d00:	11400083 	ldbu	r5,2(r2)
 1011d04:	280a943a 	slli	r5,r5,16
 1011d08:	2908b03a 	or	r4,r5,r4
 1011d0c:	108000c3 	ldbu	r2,3(r2)
 1011d10:	1004963a 	slli	r2,r2,24
 1011d14:	1104b03a 	or	r2,r2,r4
 1011d18:	1009883a 	mov	r4,r2
 1011d1c:	e0bffb17 	ldw	r2,-20(fp)
 1011d20:	10800f17 	ldw	r2,60(r2)
 1011d24:	d8800015 	stw	r2,0(sp)
 1011d28:	200f883a 	mov	r7,r4
 1011d2c:	400b883a 	mov	r5,r8
 1011d30:	e13ffb17 	ldw	r4,-20(fp)
 1011d34:	183ee83a 	callr	r3
 1011d38:	e0bffc15 	stw	r2,-16(fp)
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
 1011d3c:	e0bffc17 	ldw	r2,-16(fp)
 1011d40:	1000010e 	bge	r2,zero,1011d48 <rpmsg_virtio_rx_callback+0x1a4>
 1011d44:	003fff06 	br	1011d44 <__alt_data_end+0xff011d44>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
 1011d48:	e0bffa17 	ldw	r2,-24(fp)
 1011d4c:	10801604 	addi	r2,r2,88
 1011d50:	1009883a 	mov	r4,r2
 1011d54:	10112400 	call	1011240 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 1011d58:	e0bffd17 	ldw	r2,-12(fp)
 1011d5c:	e0fffe0b 	ldhu	r3,-8(fp)
 1011d60:	18ffffcc 	andi	r3,r3,65535
 1011d64:	180f883a 	mov	r7,r3
 1011d68:	100d883a 	mov	r6,r2
 1011d6c:	e17ff717 	ldw	r5,-36(fp)
 1011d70:	e13ff917 	ldw	r4,-28(fp)
 1011d74:	10115c80 	call	10115c8 <rpmsg_virtio_return_buffer>

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 1011d78:	e0fffe04 	addi	r3,fp,-8
 1011d7c:	e0bffd04 	addi	r2,fp,-12
 1011d80:	180d883a 	mov	r6,r3
 1011d84:	100b883a 	mov	r5,r2
 1011d88:	e13ff917 	ldw	r4,-28(fp)
 1011d8c:	10117ec0 	call	10117ec <rpmsg_virtio_get_rx_buffer>
 1011d90:	e0bff715 	stw	r2,-36(fp)
		if (rp_hdr == NULL) {
 1011d94:	e0bff717 	ldw	r2,-36(fp)
 1011d98:	1000041e 	bne	r2,zero,1011dac <rpmsg_virtio_rx_callback+0x208>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
 1011d9c:	e0bff917 	ldw	r2,-28(fp)
 1011da0:	10801b17 	ldw	r2,108(r2)
 1011da4:	1009883a 	mov	r4,r2
 1011da8:	10134a00 	call	10134a0 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
 1011dac:	e0bffa17 	ldw	r2,-24(fp)
 1011db0:	10801604 	addi	r2,r2,88
 1011db4:	1009883a 	mov	r4,r2
 1011db8:	10112740 	call	1011274 <metal_mutex_release>
	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
 1011dbc:	e0bff717 	ldw	r2,-36(fp)
 1011dc0:	103f951e 	bne	r2,zero,1011c18 <__alt_data_end+0xff011c18>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
		}
		metal_mutex_release(&rdev->lock);
	}
}
 1011dc4:	0001883a 	nop
 1011dc8:	e037883a 	mov	sp,fp
 1011dcc:	dfc00117 	ldw	ra,4(sp)
 1011dd0:	df000017 	ldw	fp,0(sp)
 1011dd4:	dec00204 	addi	sp,sp,8
 1011dd8:	f800283a 	ret

01011ddc <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 1011ddc:	deffec04 	addi	sp,sp,-80
 1011de0:	dfc01315 	stw	ra,76(sp)
 1011de4:	df001215 	stw	fp,72(sp)
 1011de8:	df001204 	addi	fp,sp,72
 1011dec:	e13ffc15 	stw	r4,-16(fp)
 1011df0:	e17ffd15 	stw	r5,-12(fp)
 1011df4:	e1bffe15 	stw	r6,-8(fp)
 1011df8:	e1ffff15 	stw	r7,-4(fp)
	struct rpmsg_device *rdev = ept->rdev;
 1011dfc:	e0bffc17 	ldw	r2,-16(fp)
 1011e00:	10800817 	ldw	r2,32(r2)
 1011e04:	e0bfee15 	stw	r2,-72(fp)
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 1011e08:	e0bfee17 	ldw	r2,-72(fp)
 1011e0c:	e0bfef15 	stw	r2,-68(fp)
	struct metal_io_region *io = rvdev->shbuf_io;
 1011e10:	e0bfef17 	ldw	r2,-68(fp)
 1011e14:	10801d17 	ldw	r2,116(r2)
 1011e18:	e0bff015 	stw	r2,-64(fp)
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
 1011e1c:	e0bffd17 	ldw	r2,-12(fp)
 1011e20:	e0bff115 	stw	r2,-60(fp)
	if (len != sizeof(*ns_msg))
 1011e24:	e0bffe17 	ldw	r2,-8(fp)
 1011e28:	10800a20 	cmpeqi	r2,r2,40
 1011e2c:	1000021e 	bne	r2,zero,1011e38 <rpmsg_virtio_ns_callback+0x5c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 1011e30:	0005883a 	mov	r2,zero
 1011e34:	00005b06 	br	1011fa4 <rpmsg_virtio_ns_callback+0x1c8>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 1011e38:	e0bff117 	ldw	r2,-60(fp)

	ns_msg = data;
	if (len != sizeof(*ns_msg))
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
	metal_io_block_read(io,
 1011e3c:	100b883a 	mov	r5,r2
 1011e40:	e13ff017 	ldw	r4,-64(fp)
 1011e44:	10110a80 	call	10110a8 <metal_io_virt_to_offset>
 1011e48:	1007883a 	mov	r3,r2
 1011e4c:	e0bff404 	addi	r2,fp,-48
 1011e50:	01c00804 	movi	r7,32
 1011e54:	100d883a 	mov	r6,r2
 1011e58:	180b883a 	mov	r5,r3
 1011e5c:	e13ff017 	ldw	r4,-64(fp)
 1011e60:	10080e80 	call	10080e8 <metal_io_block_read>
			    metal_io_virt_to_offset(io, ns_msg->name),
			    &name, sizeof(name));
	dest = ns_msg->addr;
 1011e64:	e0bff117 	ldw	r2,-60(fp)
 1011e68:	10c00803 	ldbu	r3,32(r2)
 1011e6c:	11000843 	ldbu	r4,33(r2)
 1011e70:	2008923a 	slli	r4,r4,8
 1011e74:	20c6b03a 	or	r3,r4,r3
 1011e78:	11000883 	ldbu	r4,34(r2)
 1011e7c:	2008943a 	slli	r4,r4,16
 1011e80:	20c6b03a 	or	r3,r4,r3
 1011e84:	108008c3 	ldbu	r2,35(r2)
 1011e88:	1004963a 	slli	r2,r2,24
 1011e8c:	10c4b03a 	or	r2,r2,r3
 1011e90:	e0bff215 	stw	r2,-56(fp)

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 1011e94:	e0bfee17 	ldw	r2,-72(fp)
 1011e98:	10801604 	addi	r2,r2,88
 1011e9c:	1009883a 	mov	r4,r2
 1011ea0:	10112400 	call	1011240 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 1011ea4:	e0bff404 	addi	r2,fp,-48
 1011ea8:	e1fff217 	ldw	r7,-56(fp)
 1011eac:	01bfffc4 	movi	r6,-1
 1011eb0:	100b883a 	mov	r5,r2
 1011eb4:	e13fee17 	ldw	r4,-72(fp)
 1011eb8:	1010b780 	call	1010b78 <rpmsg_get_endpoint>
 1011ebc:	e0bff315 	stw	r2,-52(fp)

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 1011ec0:	e0bff117 	ldw	r2,-60(fp)
 1011ec4:	10c00903 	ldbu	r3,36(r2)
 1011ec8:	11000943 	ldbu	r4,37(r2)
 1011ecc:	2008923a 	slli	r4,r4,8
 1011ed0:	20c6b03a 	or	r3,r4,r3
 1011ed4:	11000983 	ldbu	r4,38(r2)
 1011ed8:	2008943a 	slli	r4,r4,16
 1011edc:	20c6b03a 	or	r3,r4,r3
 1011ee0:	108009c3 	ldbu	r2,39(r2)
 1011ee4:	1004963a 	slli	r2,r2,24
 1011ee8:	10c4b03a 	or	r2,r2,r3
 1011eec:	1080004c 	andi	r2,r2,1
 1011ef0:	10001326 	beq	r2,zero,1011f40 <rpmsg_virtio_ns_callback+0x164>
		if (_ept)
 1011ef4:	e0bff317 	ldw	r2,-52(fp)
 1011ef8:	10000326 	beq	r2,zero,1011f08 <rpmsg_virtio_ns_callback+0x12c>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 1011efc:	e0bff317 	ldw	r2,-52(fp)
 1011f00:	00ffffc4 	movi	r3,-1
 1011f04:	10c00a15 	stw	r3,40(r2)
		metal_mutex_release(&rdev->lock);
 1011f08:	e0bfee17 	ldw	r2,-72(fp)
 1011f0c:	10801604 	addi	r2,r2,88
 1011f10:	1009883a 	mov	r4,r2
 1011f14:	10112740 	call	1011274 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 1011f18:	e0bff317 	ldw	r2,-52(fp)
 1011f1c:	10002026 	beq	r2,zero,1011fa0 <rpmsg_virtio_ns_callback+0x1c4>
 1011f20:	e0bff317 	ldw	r2,-52(fp)
 1011f24:	10800c17 	ldw	r2,48(r2)
 1011f28:	10001d26 	beq	r2,zero,1011fa0 <rpmsg_virtio_ns_callback+0x1c4>
			_ept->ns_unbind_cb(ept);
 1011f2c:	e0bff317 	ldw	r2,-52(fp)
 1011f30:	10800c17 	ldw	r2,48(r2)
 1011f34:	e13ffc17 	ldw	r4,-16(fp)
 1011f38:	103ee83a 	callr	r2
 1011f3c:	00001806 	br	1011fa0 <rpmsg_virtio_ns_callback+0x1c4>
	} else {
		if (!_ept) {
 1011f40:	e0bff317 	ldw	r2,-52(fp)
 1011f44:	10000f1e 	bne	r2,zero,1011f84 <rpmsg_virtio_ns_callback+0x1a8>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 1011f48:	e0bfee17 	ldw	r2,-72(fp)
 1011f4c:	10801604 	addi	r2,r2,88
 1011f50:	1009883a 	mov	r4,r2
 1011f54:	10112740 	call	1011274 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 1011f58:	e0bfee17 	ldw	r2,-72(fp)
 1011f5c:	10801717 	ldw	r2,92(r2)
 1011f60:	10000f26 	beq	r2,zero,1011fa0 <rpmsg_virtio_ns_callback+0x1c4>
				rdev->ns_bind_cb(rdev, name, dest);
 1011f64:	e0bfee17 	ldw	r2,-72(fp)
 1011f68:	10801717 	ldw	r2,92(r2)
 1011f6c:	e0fff404 	addi	r3,fp,-48
 1011f70:	e1bff217 	ldw	r6,-56(fp)
 1011f74:	180b883a 	mov	r5,r3
 1011f78:	e13fee17 	ldw	r4,-72(fp)
 1011f7c:	103ee83a 	callr	r2
 1011f80:	00000706 	br	1011fa0 <rpmsg_virtio_ns_callback+0x1c4>
		} else {
			_ept->dest_addr = dest;
 1011f84:	e0bff317 	ldw	r2,-52(fp)
 1011f88:	e0fff217 	ldw	r3,-56(fp)
 1011f8c:	10c00a15 	stw	r3,40(r2)
			metal_mutex_release(&rdev->lock);
 1011f90:	e0bfee17 	ldw	r2,-72(fp)
 1011f94:	10801604 	addi	r2,r2,88
 1011f98:	1009883a 	mov	r4,r2
 1011f9c:	10112740 	call	1011274 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 1011fa0:	0005883a 	mov	r2,zero
}
 1011fa4:	e037883a 	mov	sp,fp
 1011fa8:	dfc00117 	ldw	ra,4(sp)
 1011fac:	df000017 	ldw	fp,0(sp)
 1011fb0:	dec00204 	addi	sp,sp,8
 1011fb4:	f800283a 	ret

01011fb8 <rpmsg_virtio_get_buffer_size>:

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
 1011fb8:	defffb04 	addi	sp,sp,-20
 1011fbc:	dfc00415 	stw	ra,16(sp)
 1011fc0:	df000315 	stw	fp,12(sp)
 1011fc4:	df000304 	addi	fp,sp,12
 1011fc8:	e13fff15 	stw	r4,-4(fp)
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
 1011fcc:	e0bfff17 	ldw	r2,-4(fp)
 1011fd0:	1000021e 	bne	r2,zero,1011fdc <rpmsg_virtio_get_buffer_size+0x24>
		return RPMSG_ERR_PARAM;
 1011fd4:	00be0b44 	movi	r2,-2003
 1011fd8:	00000e06 	br	1012014 <rpmsg_virtio_get_buffer_size+0x5c>
	metal_mutex_acquire(&rdev->lock);
 1011fdc:	e0bfff17 	ldw	r2,-4(fp)
 1011fe0:	10801604 	addi	r2,r2,88
 1011fe4:	1009883a 	mov	r4,r2
 1011fe8:	10112400 	call	1011240 <metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
 1011fec:	e0bfff17 	ldw	r2,-4(fp)
 1011ff0:	e0bffd15 	stw	r2,-12(fp)
	size = _rpmsg_virtio_get_buffer_size(rvdev);
 1011ff4:	e13ffd17 	ldw	r4,-12(fp)
 1011ff8:	10118e80 	call	10118e8 <_rpmsg_virtio_get_buffer_size>
 1011ffc:	e0bffe15 	stw	r2,-8(fp)
	metal_mutex_release(&rdev->lock);
 1012000:	e0bfff17 	ldw	r2,-4(fp)
 1012004:	10801604 	addi	r2,r2,88
 1012008:	1009883a 	mov	r4,r2
 101200c:	10112740 	call	1011274 <metal_mutex_release>
	return size;
 1012010:	e0bffe17 	ldw	r2,-8(fp)
}
 1012014:	e037883a 	mov	sp,fp
 1012018:	dfc00117 	ldw	ra,4(sp)
 101201c:	df000017 	ldw	fp,0(sp)
 1012020:	dec00204 	addi	sp,sp,8
 1012024:	f800283a 	ret

01012028 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 1012028:	deffe704 	addi	sp,sp,-100
 101202c:	dfc01815 	stw	ra,96(sp)
 1012030:	df001715 	stw	fp,92(sp)
 1012034:	dcc01615 	stw	r19,88(sp)
 1012038:	dc801515 	stw	r18,84(sp)
 101203c:	dc401415 	stw	r17,80(sp)
 1012040:	dc001315 	stw	r16,76(sp)
 1012044:	df001704 	addi	fp,sp,92
 1012048:	e13ff815 	stw	r4,-32(fp)
 101204c:	e17ff915 	stw	r5,-28(fp)
 1012050:	e1bffa15 	stw	r6,-24(fp)
 1012054:	e1fffb15 	stw	r7,-20(fp)
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback *callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 1012058:	e0bff817 	ldw	r2,-32(fp)
 101205c:	e0bfee15 	stw	r2,-72(fp)
	memset(rdev, 0, sizeof(*rdev));
 1012060:	01801a04 	movi	r6,104
 1012064:	000b883a 	mov	r5,zero
 1012068:	e13fee17 	ldw	r4,-72(fp)
 101206c:	101593c0 	call	101593c <memset>
	metal_mutex_init(&rdev->lock);
 1012070:	e0bfee17 	ldw	r2,-72(fp)
 1012074:	10801604 	addi	r2,r2,88
 1012078:	1009883a 	mov	r4,r2
 101207c:	10111d80 	call	10111d8 <metal_mutex_init>
	rvdev->vdev = vdev;
 1012080:	e0bff817 	ldw	r2,-32(fp)
 1012084:	e0fff917 	ldw	r3,-28(fp)
 1012088:	10c01a15 	stw	r3,104(r2)
	rdev->ns_bind_cb = ns_bind_cb;
 101208c:	e0bfee17 	ldw	r2,-72(fp)
 1012090:	e0fffa17 	ldw	r3,-24(fp)
 1012094:	10c01715 	stw	r3,92(r2)
	vdev->priv = rvdev;
 1012098:	e0bff917 	ldw	r2,-28(fp)
 101209c:	e0fff817 	ldw	r3,-32(fp)
 10120a0:	10c00815 	stw	r3,32(r2)
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 10120a4:	e0ffee17 	ldw	r3,-72(fp)
 10120a8:	00804074 	movhi	r2,257
 10120ac:	10865904 	addi	r2,r2,6500
 10120b0:	18801815 	stw	r2,96(r3)
	role = rpmsg_virtio_get_role(rvdev);
 10120b4:	e13ff817 	ldw	r4,-32(fp)
 10120b8:	101133c0 	call	101133c <rpmsg_virtio_get_role>
 10120bc:	e0bfef15 	stw	r2,-68(fp)

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 10120c0:	e0bfef17 	ldw	r2,-68(fp)
 10120c4:	10800058 	cmpnei	r2,r2,1
 10120c8:	1000021e 	bne	r2,zero,10120d4 <rpmsg_init_vdev+0xac>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 10120cc:	e13ff817 	ldw	r4,-32(fp)
 10120d0:	101187c0 	call	101187c <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
 10120d4:	e13ff817 	ldw	r4,-32(fp)
 10120d8:	101140c0 	call	101140c <rpmsg_virtio_get_features>
 10120dc:	1025883a 	mov	r18,r2
 10120e0:	0027883a 	mov	r19,zero
 10120e4:	e0bff917 	ldw	r2,-28(fp)
 10120e8:	14800315 	stw	r18,12(r2)
 10120ec:	14c00415 	stw	r19,16(r2)
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
 10120f0:	e13ff917 	ldw	r4,-28(fp)
 10120f4:	20800317 	ldw	r2,12(r4)
 10120f8:	20c00417 	ldw	r3,16(r4)
 10120fc:	1400004c 	andi	r16,r2,1
 1012100:	1822703a 	and	r17,r3,zero
 1012104:	8444b03a 	or	r2,r16,r17
 1012108:	1004c03a 	cmpne	r2,r2,zero
 101210c:	1007883a 	mov	r3,r2
 1012110:	e0bfee17 	ldw	r2,-72(fp)
 1012114:	10c01905 	stb	r3,100(r2)

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 1012118:	e0bfef17 	ldw	r2,-68(fp)
 101211c:	1000231e 	bne	r2,zero,10121ac <rpmsg_init_vdev+0x184>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 1012120:	e0800217 	ldw	r2,8(fp)
 1012124:	1000021e 	bne	r2,zero,1012130 <rpmsg_init_vdev+0x108>
			return RPMSG_ERR_PARAM;
 1012128:	00be0b44 	movi	r2,-2003
 101212c:	0000ad06 	br	10123e4 <rpmsg_init_vdev+0x3bc>
		if (!shpool->size)
 1012130:	e0800217 	ldw	r2,8(fp)
 1012134:	10800217 	ldw	r2,8(r2)
 1012138:	1000021e 	bne	r2,zero,1012144 <rpmsg_init_vdev+0x11c>
			return RPMSG_ERR_NO_BUFF;
 101213c:	00be0b84 	movi	r2,-2002
 1012140:	0000a806 	br	10123e4 <rpmsg_init_vdev+0x3bc>
		rvdev->shpool = shpool;
 1012144:	e0bff817 	ldw	r2,-32(fp)
 1012148:	e0c00217 	ldw	r3,8(fp)
 101214c:	10c01e15 	stw	r3,120(r2)

		vq_names[0] = "rx_vq";
 1012150:	008040f4 	movhi	r2,259
 1012154:	10a7ee04 	addi	r2,r2,-24648
 1012158:	e0bff215 	stw	r2,-56(fp)
		vq_names[1] = "tx_vq";
 101215c:	008040f4 	movhi	r2,259
 1012160:	10a7f004 	addi	r2,r2,-24640
 1012164:	e0bff315 	stw	r2,-52(fp)
		callback[0] = rpmsg_virtio_rx_callback;
 1012168:	00804074 	movhi	r2,257
 101216c:	1086e904 	addi	r2,r2,7076
 1012170:	e0bff415 	stw	r2,-48(fp)
		callback[1] = rpmsg_virtio_tx_callback;
 1012174:	00804074 	movhi	r2,257
 1012178:	1086e004 	addi	r2,r2,7040
 101217c:	e0bff515 	stw	r2,-44(fp)
		rvdev->rvq  = vdev->vrings_info[0].vq;
 1012180:	e0bff917 	ldw	r2,-28(fp)
 1012184:	10800a17 	ldw	r2,40(r2)
 1012188:	10c00017 	ldw	r3,0(r2)
 101218c:	e0bff817 	ldw	r2,-32(fp)
 1012190:	10c01b15 	stw	r3,108(r2)
		rvdev->svq  = vdev->vrings_info[1].vq;
 1012194:	e0bff917 	ldw	r2,-28(fp)
 1012198:	10800a17 	ldw	r2,40(r2)
 101219c:	10800604 	addi	r2,r2,24
 10121a0:	10c00017 	ldw	r3,0(r2)
 10121a4:	e0bff817 	ldw	r2,-32(fp)
 10121a8:	10c01c15 	stw	r3,112(r2)
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 10121ac:	e0bfef17 	ldw	r2,-68(fp)
 10121b0:	10800058 	cmpnei	r2,r2,1
 10121b4:	1000171e 	bne	r2,zero,1012214 <rpmsg_init_vdev+0x1ec>
		vq_names[0] = "tx_vq";
 10121b8:	008040f4 	movhi	r2,259
 10121bc:	10a7f004 	addi	r2,r2,-24640
 10121c0:	e0bff215 	stw	r2,-56(fp)
		vq_names[1] = "rx_vq";
 10121c4:	008040f4 	movhi	r2,259
 10121c8:	10a7ee04 	addi	r2,r2,-24648
 10121cc:	e0bff315 	stw	r2,-52(fp)
		callback[0] = rpmsg_virtio_tx_callback;
 10121d0:	00804074 	movhi	r2,257
 10121d4:	1086e004 	addi	r2,r2,7040
 10121d8:	e0bff415 	stw	r2,-48(fp)
		callback[1] = rpmsg_virtio_rx_callback;
 10121dc:	00804074 	movhi	r2,257
 10121e0:	1086e904 	addi	r2,r2,7076
 10121e4:	e0bff515 	stw	r2,-44(fp)
		rvdev->rvq  = vdev->vrings_info[1].vq;
 10121e8:	e0bff917 	ldw	r2,-28(fp)
 10121ec:	10800a17 	ldw	r2,40(r2)
 10121f0:	10800604 	addi	r2,r2,24
 10121f4:	10c00017 	ldw	r3,0(r2)
 10121f8:	e0bff817 	ldw	r2,-32(fp)
 10121fc:	10c01b15 	stw	r3,108(r2)
		rvdev->svq  = vdev->vrings_info[0].vq;
 1012200:	e0bff917 	ldw	r2,-28(fp)
 1012204:	10800a17 	ldw	r2,40(r2)
 1012208:	10c00017 	ldw	r3,0(r2)
 101220c:	e0bff817 	ldw	r2,-32(fp)
 1012210:	10c01c15 	stw	r3,112(r2)
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 1012214:	e0bff817 	ldw	r2,-32(fp)
 1012218:	e0fffb17 	ldw	r3,-20(fp)
 101221c:	10c01d15 	stw	r3,116(r2)

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 1012220:	e0fff204 	addi	r3,fp,-56
 1012224:	e0bff404 	addi	r2,fp,-48
 1012228:	d8800015 	stw	r2,0(sp)
 101222c:	180f883a 	mov	r7,r3
 1012230:	01800084 	movi	r6,2
 1012234:	000b883a 	mov	r5,zero
 1012238:	e13ff817 	ldw	r4,-32(fp)
 101223c:	10114540 	call	1011454 <rpmsg_virtio_create_virtqueues>
 1012240:	e0bfeb15 	stw	r2,-84(fp)
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 1012244:	e0bfeb17 	ldw	r2,-84(fp)
 1012248:	10000226 	beq	r2,zero,1012254 <rpmsg_init_vdev+0x22c>
		return status;
 101224c:	e0bfeb17 	ldw	r2,-84(fp)
 1012250:	00006406 	br	10123e4 <rpmsg_init_vdev+0x3bc>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
 1012254:	e0bff817 	ldw	r2,-32(fp)
 1012258:	10801c17 	ldw	r2,112(r2)
 101225c:	1009883a 	mov	r4,r2
 1012260:	10133640 	call	1013364 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 1012264:	e03fec15 	stw	zero,-80(fp)
 1012268:	00000d06 	br	10122a0 <rpmsg_init_vdev+0x278>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 101226c:	e0bff917 	ldw	r2,-28(fp)
 1012270:	10c00a17 	ldw	r3,40(r2)
 1012274:	e0bfec17 	ldw	r2,-80(fp)
 1012278:	10800624 	muli	r2,r2,24
 101227c:	1885883a 	add	r2,r3,r2
 1012280:	10800017 	ldw	r2,0(r2)
 1012284:	e0bff015 	stw	r2,-64(fp)
		vq->shm_io = shm_io;
 1012288:	e0bff017 	ldw	r2,-64(fp)
 101228c:	e0fffb17 	ldw	r3,-20(fp)
 1012290:	10c00a15 	stw	r3,40(r2)
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 1012294:	e0bfec17 	ldw	r2,-80(fp)
 1012298:	10800044 	addi	r2,r2,1
 101229c:	e0bfec15 	stw	r2,-80(fp)
 10122a0:	e0bfec17 	ldw	r2,-80(fp)
 10122a4:	108000b0 	cmpltui	r2,r2,2
 10122a8:	103ff01e 	bne	r2,zero,101226c <__alt_data_end+0xff01226c>
		vq = vdev->vrings_info[i].vq;
		vq->shm_io = shm_io;
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 10122ac:	e0bfef17 	ldw	r2,-68(fp)
 10122b0:	10002e1e 	bne	r2,zero,101236c <rpmsg_init_vdev+0x344>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 10122b4:	00808004 	movi	r2,512
 10122b8:	e0bff715 	stw	r2,-36(fp)
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 10122bc:	e03fed15 	stw	zero,-76(fp)
 10122c0:	00002406 	br	1012354 <rpmsg_init_vdev+0x32c>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 10122c4:	01408004 	movi	r5,512
 10122c8:	e1000217 	ldw	r4,8(fp)
 10122cc:	10114f00 	call	10114f0 <rpmsg_virtio_shm_pool_get_buffer>
 10122d0:	e0bff115 	stw	r2,-60(fp)
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 10122d4:	e0bff117 	ldw	r2,-60(fp)
 10122d8:	1000021e 	bne	r2,zero,10122e4 <rpmsg_init_vdev+0x2bc>
				return RPMSG_ERR_NO_BUFF;
 10122dc:	00be0b84 	movi	r2,-2002
 10122e0:	00004006 	br	10123e4 <rpmsg_init_vdev+0x3bc>
			}

			vqbuf.buf = buffer;
 10122e4:	e0bff117 	ldw	r2,-60(fp)
 10122e8:	e0bff615 	stw	r2,-40(fp)

			metal_io_block_set(shm_io,
 10122ec:	e17ff117 	ldw	r5,-60(fp)
 10122f0:	e13ffb17 	ldw	r4,-20(fp)
 10122f4:	10110a80 	call	10110a8 <metal_io_virt_to_offset>
 10122f8:	01c08004 	movi	r7,512
 10122fc:	000d883a 	mov	r6,zero
 1012300:	100b883a 	mov	r5,r2
 1012304:	e13ffb17 	ldw	r4,-20(fp)
 1012308:	100844c0 	call	100844c <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 101230c:	e0bff817 	ldw	r2,-32(fp)
 1012310:	10c01b17 	ldw	r3,108(r2)

			metal_io_block_set(shm_io,
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
 1012314:	e13ff604 	addi	r4,fp,-40
 1012318:	e0bff117 	ldw	r2,-60(fp)
 101231c:	d8800015 	stw	r2,0(sp)
 1012320:	01c00044 	movi	r7,1
 1012324:	000d883a 	mov	r6,zero
 1012328:	200b883a 	mov	r5,r4
 101232c:	1809883a 	mov	r4,r3
 1012330:	1012e2c0 	call	1012e2c <virtqueue_add_buffer>
 1012334:	e0bfeb15 	stw	r2,-84(fp)
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
						     buffer);

			if (status != RPMSG_SUCCESS) {
 1012338:	e0bfeb17 	ldw	r2,-84(fp)
 101233c:	10000226 	beq	r2,zero,1012348 <rpmsg_init_vdev+0x320>
				return status;
 1012340:	e0bfeb17 	ldw	r2,-84(fp)
 1012344:	00002706 	br	10123e4 <rpmsg_init_vdev+0x3bc>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 1012348:	e0bfed17 	ldw	r2,-76(fp)
 101234c:	10800044 	addi	r2,r2,1
 1012350:	e0bfed15 	stw	r2,-76(fp)
 1012354:	e0bff817 	ldw	r2,-32(fp)
 1012358:	10801b17 	ldw	r2,108(r2)
 101235c:	1080028b 	ldhu	r2,10(r2)
 1012360:	10bfffcc 	andi	r2,r2,65535
 1012364:	e0ffed17 	ldw	r3,-76(fp)
 1012368:	18bfd636 	bltu	r3,r2,10122c4 <__alt_data_end+0xff0122c4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 101236c:	e0bfee17 	ldw	r2,-72(fp)
 1012370:	1009883a 	mov	r4,r2
 1012374:	10110340 	call	1011034 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
 1012378:	e0bfee17 	ldw	r2,-72(fp)
 101237c:	10801903 	ldbu	r2,100(r2)
 1012380:	10803fcc 	andi	r2,r2,255
 1012384:	10001126 	beq	r2,zero,10123cc <rpmsg_init_vdev+0x3a4>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 1012388:	e0bfee17 	ldw	r2,-72(fp)
 101238c:	10c00204 	addi	r3,r2,8
 1012390:	d8000115 	stw	zero,4(sp)
 1012394:	00804074 	movhi	r2,257
 1012398:	10877704 	addi	r2,r2,7644
 101239c:	d8800015 	stw	r2,0(sp)
 10123a0:	01c00d44 	movi	r7,53
 10123a4:	01800d44 	movi	r6,53
 10123a8:	014040f4 	movhi	r5,259
 10123ac:	2967f204 	addi	r5,r5,-24632
 10123b0:	1809883a 	mov	r4,r3
 10123b4:	10112a80 	call	10112a8 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 10123b8:	e0bfee17 	ldw	r2,-72(fp)
 10123bc:	10800204 	addi	r2,r2,8
 10123c0:	100b883a 	mov	r5,r2
 10123c4:	e13fee17 	ldw	r4,-72(fp)
 10123c8:	1010d3c0 	call	1010d3c <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 10123cc:	e0bfef17 	ldw	r2,-68(fp)
 10123d0:	1000031e 	bne	r2,zero,10123e0 <rpmsg_init_vdev+0x3b8>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 10123d4:	01400104 	movi	r5,4
 10123d8:	e13ff817 	ldw	r4,-32(fp)
 10123dc:	10113680 	call	1011368 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 10123e0:	e0bfeb17 	ldw	r2,-84(fp)
}
 10123e4:	e6fffc04 	addi	sp,fp,-16
 10123e8:	dfc00517 	ldw	ra,20(sp)
 10123ec:	df000417 	ldw	fp,16(sp)
 10123f0:	dcc00317 	ldw	r19,12(sp)
 10123f4:	dc800217 	ldw	r18,8(sp)
 10123f8:	dc400117 	ldw	r17,4(sp)
 10123fc:	dc000017 	ldw	r16,0(sp)
 1012400:	dec00604 	addi	sp,sp,24
 1012404:	f800283a 	ret

01012408 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 1012408:	defffa04 	addi	sp,sp,-24
 101240c:	dfc00515 	stw	ra,20(sp)
 1012410:	df000415 	stw	fp,16(sp)
 1012414:	df000404 	addi	fp,sp,16
 1012418:	e13fff15 	stw	r4,-4(fp)
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 101241c:	e0bfff17 	ldw	r2,-4(fp)
 1012420:	e0bffc15 	stw	r2,-16(fp)
	while (!metal_list_is_empty(&rdev->endpoints)) {
 1012424:	00000806 	br	1012448 <rpmsg_deinit_vdev+0x40>
		node = rdev->endpoints.next;
 1012428:	e0bffc17 	ldw	r2,-16(fp)
 101242c:	10800017 	ldw	r2,0(r2)
 1012430:	e0bffd15 	stw	r2,-12(fp)
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 1012434:	e0bffd17 	ldw	r2,-12(fp)
 1012438:	10bff304 	addi	r2,r2,-52
 101243c:	e0bffe15 	stw	r2,-8(fp)
		rpmsg_destroy_ept(ept);
 1012440:	e13ffe17 	ldw	r4,-8(fp)
 1012444:	1010f180 	call	1010f18 <rpmsg_destroy_ept>
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
	while (!metal_list_is_empty(&rdev->endpoints)) {
 1012448:	e0bffc17 	ldw	r2,-16(fp)
 101244c:	1009883a 	mov	r4,r2
 1012450:	10110740 	call	1011074 <metal_list_is_empty>
 1012454:	103ff426 	beq	r2,zero,1012428 <__alt_data_end+0xff012428>
		node = rdev->endpoints.next;
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
		rpmsg_destroy_ept(ept);
	}

	rvdev->rvq = 0;
 1012458:	e0bfff17 	ldw	r2,-4(fp)
 101245c:	10001b15 	stw	zero,108(r2)
	rvdev->svq = 0;
 1012460:	e0bfff17 	ldw	r2,-4(fp)
 1012464:	10001c15 	stw	zero,112(r2)

	metal_mutex_deinit(&rdev->lock);
 1012468:	e0bffc17 	ldw	r2,-16(fp)
 101246c:	10801604 	addi	r2,r2,88
 1012470:	1009883a 	mov	r4,r2
 1012474:	101120c0 	call	101120c <metal_mutex_deinit>
}
 1012478:	0001883a 	nop
 101247c:	e037883a 	mov	sp,fp
 1012480:	dfc00117 	ldw	ra,4(sp)
 1012484:	df000017 	ldw	fp,0(sp)
 1012488:	dec00204 	addi	sp,sp,8
 101248c:	f800283a 	ret

01012490 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].event)

static inline int vring_size(unsigned int num, unsigned long align)
{
 1012490:	defffc04 	addi	sp,sp,-16
 1012494:	df000315 	stw	fp,12(sp)
 1012498:	df000304 	addi	fp,sp,12
 101249c:	e13ffe15 	stw	r4,-8(fp)
 10124a0:	e17fff15 	stw	r5,-4(fp)
	int size;

	size = num * sizeof(struct vring_desc);
 10124a4:	e0bffe17 	ldw	r2,-8(fp)
 10124a8:	1004913a 	slli	r2,r2,4
 10124ac:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 10124b0:	e0bffe17 	ldw	r2,-8(fp)
 10124b4:	108000c4 	addi	r2,r2,3
 10124b8:	1085883a 	add	r2,r2,r2
 10124bc:	1007883a 	mov	r3,r2
 10124c0:	e0bffd17 	ldw	r2,-12(fp)
 10124c4:	1885883a 	add	r2,r3,r2
 10124c8:	e0bffd15 	stw	r2,-12(fp)
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 10124cc:	e0fffd17 	ldw	r3,-12(fp)
 10124d0:	e0bfff17 	ldw	r2,-4(fp)
 10124d4:	1885883a 	add	r2,r3,r2
 10124d8:	10ffffc4 	addi	r3,r2,-1
 10124dc:	e0bfff17 	ldw	r2,-4(fp)
 10124e0:	0085c83a 	sub	r2,zero,r2
 10124e4:	1884703a 	and	r2,r3,r2
 10124e8:	e0bffd15 	stw	r2,-12(fp)
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 10124ec:	e0bffe17 	ldw	r2,-8(fp)
 10124f0:	100690fa 	slli	r3,r2,3

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
 10124f4:	e0bffd17 	ldw	r2,-12(fp)
 10124f8:	1885883a 	add	r2,r3,r2
 10124fc:	10800184 	addi	r2,r2,6
 1012500:	e0bffd15 	stw	r2,-12(fp)
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);

	return size;
 1012504:	e0bffd17 	ldw	r2,-12(fp)
}
 1012508:	e037883a 	mov	sp,fp
 101250c:	df000017 	ldw	fp,0(sp)
 1012510:	dec00104 	addi	sp,sp,4
 1012514:	f800283a 	ret

01012518 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 1012518:	defffc04 	addi	sp,sp,-16
 101251c:	df000315 	stw	fp,12(sp)
 1012520:	df000304 	addi	fp,sp,12
 1012524:	e13ffe15 	stw	r4,-8(fp)
 1012528:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 101252c:	e0bfff17 	ldw	r2,-4(fp)
 1012530:	e0fffe17 	ldw	r3,-8(fp)
 1012534:	18c00017 	ldw	r3,0(r3)
 1012538:	10c5c83a 	sub	r2,r2,r3
 101253c:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1012540:	e0bffe17 	ldw	r2,-8(fp)
 1012544:	10800217 	ldw	r2,8(r2)
 1012548:	e0fffd17 	ldw	r3,-12(fp)
 101254c:	1880022e 	bgeu	r3,r2,1012558 <metal_io_virt_to_offset+0x40>
 1012550:	e0bffd17 	ldw	r2,-12(fp)
 1012554:	00000106 	br	101255c <metal_io_virt_to_offset+0x44>
 1012558:	00bfffc4 	movi	r2,-1
}
 101255c:	e037883a 	mov	sp,fp
 1012560:	df000017 	ldw	fp,0(sp)
 1012564:	dec00104 	addi	sp,sp,4
 1012568:	f800283a 	ret

0101256c <virtio_dev_name>:

	{0, NULL}
};

const char *virtio_dev_name(unsigned short devid)
{
 101256c:	defffd04 	addi	sp,sp,-12
 1012570:	df000215 	stw	fp,8(sp)
 1012574:	df000204 	addi	fp,sp,8
 1012578:	2005883a 	mov	r2,r4
 101257c:	e0bfff0d 	sth	r2,-4(fp)
	const struct virtio_ident *ident;

	for (ident = virtio_ident_table; ident->name != NULL; ident++) {
 1012580:	008040f4 	movhi	r2,259
 1012584:	10a80604 	addi	r2,r2,-24552
 1012588:	e0bffe15 	stw	r2,-8(fp)
 101258c:	00000b06 	br	10125bc <virtio_dev_name+0x50>
		if (ident->devid == devid)
 1012590:	e0bffe17 	ldw	r2,-8(fp)
 1012594:	1080000b 	ldhu	r2,0(r2)
 1012598:	10ffffcc 	andi	r3,r2,65535
 101259c:	e0bfff0b 	ldhu	r2,-4(fp)
 10125a0:	1880031e 	bne	r3,r2,10125b0 <virtio_dev_name+0x44>
			return ident->name;
 10125a4:	e0bffe17 	ldw	r2,-8(fp)
 10125a8:	10800117 	ldw	r2,4(r2)
 10125ac:	00000706 	br	10125cc <virtio_dev_name+0x60>

const char *virtio_dev_name(unsigned short devid)
{
	const struct virtio_ident *ident;

	for (ident = virtio_ident_table; ident->name != NULL; ident++) {
 10125b0:	e0bffe17 	ldw	r2,-8(fp)
 10125b4:	10800204 	addi	r2,r2,8
 10125b8:	e0bffe15 	stw	r2,-8(fp)
 10125bc:	e0bffe17 	ldw	r2,-8(fp)
 10125c0:	10800117 	ldw	r2,4(r2)
 10125c4:	103ff21e 	bne	r2,zero,1012590 <__alt_data_end+0xff012590>
		if (ident->devid == devid)
			return ident->name;
	}

	return NULL;
 10125c8:	0005883a 	mov	r2,zero
}
 10125cc:	e037883a 	mov	sp,fp
 10125d0:	df000017 	ldw	fp,0(sp)
 10125d4:	dec00104 	addi	sp,sp,4
 10125d8:	f800283a 	ret

010125dc <virtio_feature_name>:

static const char *virtio_feature_name(unsigned long val,
				       const struct virtio_feature_desc *desc)
{
 10125dc:	defff904 	addi	sp,sp,-28
 10125e0:	df000615 	stw	fp,24(sp)
 10125e4:	df000604 	addi	fp,sp,24
 10125e8:	e13ffe15 	stw	r4,-8(fp)
 10125ec:	e17fff15 	stw	r5,-4(fp)
	int i, j;
	const struct virtio_feature_desc *descs[2] = { desc,
 10125f0:	e0bfff17 	ldw	r2,-4(fp)
 10125f4:	e0bffc15 	stw	r2,-16(fp)
 10125f8:	008040f4 	movhi	r2,259
 10125fc:	10a82604 	addi	r2,r2,-24424
 1012600:	e0bffd15 	stw	r2,-12(fp)
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
 1012604:	e03ffa15 	stw	zero,-24(fp)
 1012608:	00003706 	br	10126e8 <virtio_feature_name+0x10c>
		if (!descs[i])
 101260c:	e0bffa17 	ldw	r2,-24(fp)
 1012610:	1085883a 	add	r2,r2,r2
 1012614:	1085883a 	add	r2,r2,r2
 1012618:	e0fffa04 	addi	r3,fp,-24
 101261c:	1885883a 	add	r2,r3,r2
 1012620:	10800204 	addi	r2,r2,8
 1012624:	10800017 	ldw	r2,0(r2)
 1012628:	10002b26 	beq	r2,zero,10126d8 <virtio_feature_name+0xfc>
			continue;

		for (j = 0; descs[i][j].vfd_val != 0; j++) {
 101262c:	e03ffb15 	stw	zero,-20(fp)
 1012630:	00001c06 	br	10126a4 <virtio_feature_name+0xc8>
			if (val == descs[i][j].vfd_val)
 1012634:	e0bffa17 	ldw	r2,-24(fp)
 1012638:	1085883a 	add	r2,r2,r2
 101263c:	1085883a 	add	r2,r2,r2
 1012640:	e0fffa04 	addi	r3,fp,-24
 1012644:	1885883a 	add	r2,r3,r2
 1012648:	10800204 	addi	r2,r2,8
 101264c:	10c00017 	ldw	r3,0(r2)
 1012650:	e0bffb17 	ldw	r2,-20(fp)
 1012654:	100490fa 	slli	r2,r2,3
 1012658:	1885883a 	add	r2,r3,r2
 101265c:	10c00017 	ldw	r3,0(r2)
 1012660:	e0bffe17 	ldw	r2,-8(fp)
 1012664:	18800c1e 	bne	r3,r2,1012698 <virtio_feature_name+0xbc>
				return descs[i][j].vfd_str;
 1012668:	e0bffa17 	ldw	r2,-24(fp)
 101266c:	1085883a 	add	r2,r2,r2
 1012670:	1085883a 	add	r2,r2,r2
 1012674:	e0fffa04 	addi	r3,fp,-24
 1012678:	1885883a 	add	r2,r3,r2
 101267c:	10800204 	addi	r2,r2,8
 1012680:	10c00017 	ldw	r3,0(r2)
 1012684:	e0bffb17 	ldw	r2,-20(fp)
 1012688:	100490fa 	slli	r2,r2,3
 101268c:	1885883a 	add	r2,r3,r2
 1012690:	10800117 	ldw	r2,4(r2)
 1012694:	00001806 	br	10126f8 <virtio_feature_name+0x11c>

	for (i = 0; i < 2; i++) {
		if (!descs[i])
			continue;

		for (j = 0; descs[i][j].vfd_val != 0; j++) {
 1012698:	e0bffb17 	ldw	r2,-20(fp)
 101269c:	10800044 	addi	r2,r2,1
 10126a0:	e0bffb15 	stw	r2,-20(fp)
 10126a4:	e0bffa17 	ldw	r2,-24(fp)
 10126a8:	1085883a 	add	r2,r2,r2
 10126ac:	1085883a 	add	r2,r2,r2
 10126b0:	e0fffa04 	addi	r3,fp,-24
 10126b4:	1885883a 	add	r2,r3,r2
 10126b8:	10800204 	addi	r2,r2,8
 10126bc:	10c00017 	ldw	r3,0(r2)
 10126c0:	e0bffb17 	ldw	r2,-20(fp)
 10126c4:	100490fa 	slli	r2,r2,3
 10126c8:	1885883a 	add	r2,r3,r2
 10126cc:	10800017 	ldw	r2,0(r2)
 10126d0:	103fd81e 	bne	r2,zero,1012634 <__alt_data_end+0xff012634>
 10126d4:	00000106 	br	10126dc <virtio_feature_name+0x100>
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
		if (!descs[i])
			continue;
 10126d8:	0001883a 	nop
	int i, j;
	const struct virtio_feature_desc *descs[2] = { desc,
		virtio_common_feature_desc
	};

	for (i = 0; i < 2; i++) {
 10126dc:	e0bffa17 	ldw	r2,-24(fp)
 10126e0:	10800044 	addi	r2,r2,1
 10126e4:	e0bffa15 	stw	r2,-24(fp)
 10126e8:	e0bffa17 	ldw	r2,-24(fp)
 10126ec:	10800090 	cmplti	r2,r2,2
 10126f0:	103fc61e 	bne	r2,zero,101260c <__alt_data_end+0xff01260c>
			if (val == descs[i][j].vfd_val)
				return descs[i][j].vfd_str;
		}
	}

	return NULL;
 10126f4:	0005883a 	mov	r2,zero
}
 10126f8:	e037883a 	mov	sp,fp
 10126fc:	df000017 	ldw	fp,0(sp)
 1012700:	dec00104 	addi	sp,sp,4
 1012704:	f800283a 	ret

01012708 <virtio_describe>:

void virtio_describe(struct virtio_device *dev, const char *msg,
		     uint32_t features, struct virtio_feature_desc *desc)
{
 1012708:	defffa04 	addi	sp,sp,-24
 101270c:	dfc00515 	stw	ra,20(sp)
 1012710:	df000415 	stw	fp,16(sp)
 1012714:	df000404 	addi	fp,sp,16
 1012718:	e13ffc15 	stw	r4,-16(fp)
 101271c:	e17ffd15 	stw	r5,-12(fp)
 1012720:	e1bffe15 	stw	r6,-8(fp)
 1012724:	e1ffff15 	stw	r7,-4(fp)
	(void)dev;
	(void)msg;
	(void)features;

	// TODO: Not used currently - keeping it for future use
	virtio_feature_name(0, desc);
 1012728:	e17fff17 	ldw	r5,-4(fp)
 101272c:	0009883a 	mov	r4,zero
 1012730:	10125dc0 	call	10125dc <virtio_feature_name>
}
 1012734:	0001883a 	nop
 1012738:	e037883a 	mov	sp,fp
 101273c:	dfc00117 	ldw	ra,4(sp)
 1012740:	df000017 	ldw	fp,0(sp)
 1012744:	dec00204 	addi	sp,sp,8
 1012748:	f800283a 	ret

0101274c <virtio_create_virtqueues>:

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 101274c:	defff004 	addi	sp,sp,-64
 1012750:	dfc00f15 	stw	ra,60(sp)
 1012754:	df000e15 	stw	fp,56(sp)
 1012758:	df000e04 	addi	fp,sp,56
 101275c:	e13ffc15 	stw	r4,-16(fp)
 1012760:	e17ffd15 	stw	r5,-12(fp)
 1012764:	e1bffe15 	stw	r6,-8(fp)
 1012768:	e1ffff15 	stw	r7,-4(fp)
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 101276c:	e0bffc17 	ldw	r2,-16(fp)
 1012770:	10800917 	ldw	r2,36(r2)
 1012774:	e0bff615 	stw	r2,-40(fp)
	if (nvqs > num_vrings)
 1012778:	e0bffe17 	ldw	r2,-8(fp)
 101277c:	e0fff617 	ldw	r3,-40(fp)
 1012780:	1880022e 	bgeu	r3,r2,101278c <virtio_create_virtqueues+0x40>
		return ERROR_VQUEUE_INVLD_PARAM;
 1012784:	00bd1004 	movi	r2,-3008
 1012788:	00004b06 	br	10128b8 <virtio_create_virtqueues+0x16c>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 101278c:	e03ff515 	stw	zero,-44(fp)
 1012790:	00004506 	br	10128a8 <virtio_create_virtqueues+0x15c>
		vring_info = &vdev->vrings_info[i];
 1012794:	e0bffc17 	ldw	r2,-16(fp)
 1012798:	10c00a17 	ldw	r3,40(r2)
 101279c:	e0bff517 	ldw	r2,-44(fp)
 10127a0:	10800624 	muli	r2,r2,24
 10127a4:	1885883a 	add	r2,r3,r2
 10127a8:	e0bff715 	stw	r2,-36(fp)

		vring_alloc = &vring_info->info;
 10127ac:	e0bff717 	ldw	r2,-36(fp)
 10127b0:	10800104 	addi	r2,r2,4
 10127b4:	e0bff815 	stw	r2,-32(fp)
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 10127b8:	e0bffc17 	ldw	r2,-16(fp)
 10127bc:	10800517 	ldw	r2,20(r2)
 10127c0:	1000161e 	bne	r2,zero,101281c <virtio_create_virtqueues+0xd0>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 10127c4:	e0bff717 	ldw	r2,-36(fp)
 10127c8:	10800517 	ldw	r2,20(r2)
 10127cc:	e0bff915 	stw	r2,-28(fp)

			offset = metal_io_virt_to_offset(io,
 10127d0:	e0bff817 	ldw	r2,-32(fp)
 10127d4:	10800017 	ldw	r2,0(r2)
 10127d8:	100b883a 	mov	r5,r2
 10127dc:	e13ff917 	ldw	r4,-28(fp)
 10127e0:	10125180 	call	1012518 <metal_io_virt_to_offset>
 10127e4:	e0bffa15 	stw	r2,-24(fp)
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 10127e8:	e0bff817 	ldw	r2,-32(fp)
 10127ec:	1080020b 	ldhu	r2,8(r2)
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
 10127f0:	10ffffcc 	andi	r3,r2,65535
 10127f4:	e0bff817 	ldw	r2,-32(fp)
 10127f8:	10800117 	ldw	r2,4(r2)
 10127fc:	100b883a 	mov	r5,r2
 1012800:	1809883a 	mov	r4,r3
 1012804:	10124900 	call	1012490 <vring_size>
 1012808:	100f883a 	mov	r7,r2
 101280c:	000d883a 	mov	r6,zero
 1012810:	e17ffa17 	ldw	r5,-24(fp)
 1012814:	e13ff917 	ldw	r4,-28(fp)
 1012818:	100844c0 	call	100844c <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 101281c:	e0bff517 	ldw	r2,-44(fp)
 1012820:	117fffcc 	andi	r5,r2,65535
 1012824:	e0bff517 	ldw	r2,-44(fp)
 1012828:	1085883a 	add	r2,r2,r2
 101282c:	1085883a 	add	r2,r2,r2
 1012830:	1007883a 	mov	r3,r2
 1012834:	e0bfff17 	ldw	r2,-4(fp)
 1012838:	10c5883a 	add	r2,r2,r3
 101283c:	11800017 	ldw	r6,0(r2)
				       callbacks[i], vdev->func->notify,
 1012840:	e0bff517 	ldw	r2,-44(fp)
 1012844:	1085883a 	add	r2,r2,r2
 1012848:	1085883a 	add	r2,r2,r2
 101284c:	1007883a 	mov	r3,r2
 1012850:	e0800217 	ldw	r2,8(fp)
 1012854:	10c5883a 	add	r2,r2,r3
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 1012858:	10800017 	ldw	r2,0(r2)
				       callbacks[i], vdev->func->notify,
 101285c:	e0fffc17 	ldw	r3,-16(fp)
 1012860:	18c00717 	ldw	r3,28(r3)
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 1012864:	18c00817 	ldw	r3,32(r3)
 1012868:	e13ff717 	ldw	r4,-36(fp)
 101286c:	21000017 	ldw	r4,0(r4)
 1012870:	d9000215 	stw	r4,8(sp)
 1012874:	d8c00115 	stw	r3,4(sp)
 1012878:	d8800015 	stw	r2,0(sp)
 101287c:	e1fff817 	ldw	r7,-32(fp)
 1012880:	e13ffc17 	ldw	r4,-16(fp)
 1012884:	1012d680 	call	1012d68 <virtqueue_create>
 1012888:	e0bffb15 	stw	r2,-20(fp)
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
 101288c:	e0bffb17 	ldw	r2,-20(fp)
 1012890:	10000226 	beq	r2,zero,101289c <virtio_create_virtqueues+0x150>
			return ret;
 1012894:	e0bffb17 	ldw	r2,-20(fp)
 1012898:	00000706 	br	10128b8 <virtio_create_virtqueues+0x16c>

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 101289c:	e0bff517 	ldw	r2,-44(fp)
 10128a0:	10800044 	addi	r2,r2,1
 10128a4:	e0bff515 	stw	r2,-44(fp)
 10128a8:	e0fff517 	ldw	r3,-44(fp)
 10128ac:	e0bffe17 	ldw	r2,-8(fp)
 10128b0:	18bfb836 	bltu	r3,r2,1012794 <__alt_data_end+0xff012794>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
 10128b4:	0005883a 	mov	r2,zero
}
 10128b8:	e037883a 	mov	sp,fp
 10128bc:	dfc00117 	ldw	ra,4(sp)
 10128c0:	df000017 	ldw	fp,0(sp)
 10128c4:	dec00204 	addi	sp,sp,8
 10128c8:	f800283a 	ret

010128cc <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 10128cc:	defffb04 	addi	sp,sp,-20
 10128d0:	df000415 	stw	fp,16(sp)
 10128d4:	df000404 	addi	fp,sp,16
 10128d8:	e13ffc15 	stw	r4,-16(fp)
 10128dc:	e17ffd15 	stw	r5,-12(fp)
 10128e0:	e1bffe15 	stw	r6,-8(fp)
 10128e4:	e1ffff15 	stw	r7,-4(fp)
	vr->num = num;
 10128e8:	e0bffc17 	ldw	r2,-16(fp)
 10128ec:	e0fffd17 	ldw	r3,-12(fp)
 10128f0:	10c00015 	stw	r3,0(r2)
	vr->desc = (struct vring_desc *)p;
 10128f4:	e0bffc17 	ldw	r2,-16(fp)
 10128f8:	e0fffe17 	ldw	r3,-8(fp)
 10128fc:	10c00115 	stw	r3,4(r2)
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 1012900:	e0bffd17 	ldw	r2,-12(fp)
 1012904:	1004913a 	slli	r2,r2,4
 1012908:	e0fffe17 	ldw	r3,-8(fp)
 101290c:	1887883a 	add	r3,r3,r2
 1012910:	e0bffc17 	ldw	r2,-16(fp)
 1012914:	10c00215 	stw	r3,8(r2)
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 1012918:	e0bffc17 	ldw	r2,-16(fp)
 101291c:	10c00217 	ldw	r3,8(r2)
 1012920:	e0bffd17 	ldw	r2,-12(fp)
 1012924:	10800084 	addi	r2,r2,2
 1012928:	1085883a 	add	r2,r2,r2
 101292c:	1885883a 	add	r2,r3,r2
 1012930:	1007883a 	mov	r3,r2
 1012934:	e0bfff17 	ldw	r2,-4(fp)
 1012938:	1885883a 	add	r2,r3,r2
	      align - 1) & ~(align - 1));
 101293c:	10c00044 	addi	r3,r2,1
 1012940:	e0bfff17 	ldw	r2,-4(fp)
 1012944:	0085c83a 	sub	r2,zero,r2
 1012948:	1884703a 	and	r2,r3,r2
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
 101294c:	1007883a 	mov	r3,r2
 1012950:	e0bffc17 	ldw	r2,-16(fp)
 1012954:	10c00315 	stw	r3,12(r2)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
	      align - 1) & ~(align - 1));
}
 1012958:	0001883a 	nop
 101295c:	e037883a 	mov	sp,fp
 1012960:	df000017 	ldw	fp,0(sp)
 1012964:	dec00104 	addi	sp,sp,4
 1012968:	f800283a 	ret

0101296c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 101296c:	defffc04 	addi	sp,sp,-16
 1012970:	df000315 	stw	fp,12(sp)
 1012974:	df000304 	addi	fp,sp,12
 1012978:	2807883a 	mov	r3,r5
 101297c:	3005883a 	mov	r2,r6
 1012980:	e13ffd0d 	sth	r4,-12(fp)
 1012984:	e0fffe0d 	sth	r3,-8(fp)
 1012988:	e0bfff0d 	sth	r2,-4(fp)
	return (uint16_t)(new_idx - event_idx - 1) <
 101298c:	e0fffe0b 	ldhu	r3,-8(fp)
 1012990:	e0bffd0b 	ldhu	r2,-12(fp)
 1012994:	1885c83a 	sub	r2,r3,r2
 1012998:	10bfffc4 	addi	r2,r2,-1
 101299c:	1009883a 	mov	r4,r2
	    (uint16_t)(new_idx - old);
 10129a0:	e0fffe0b 	ldhu	r3,-8(fp)
 10129a4:	e0bfff0b 	ldhu	r2,-4(fp)
 10129a8:	1885c83a 	sub	r2,r3,r2
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
 10129ac:	20ffffcc 	andi	r3,r4,65535
 10129b0:	10bfffcc 	andi	r2,r2,65535
 10129b4:	1885803a 	cmpltu	r2,r3,r2
 10129b8:	10803fcc 	andi	r2,r2,255
	    (uint16_t)(new_idx - old);
}
 10129bc:	e037883a 	mov	sp,fp
 10129c0:	df000017 	ldw	fp,0(sp)
 10129c4:	dec00104 	addi	sp,sp,4
 10129c8:	f800283a 	ret

010129cc <metal_free_memory>:
{
	return (pvPortMalloc(size));
}

static inline void metal_free_memory(void *ptr)
{
 10129cc:	defffd04 	addi	sp,sp,-12
 10129d0:	dfc00215 	stw	ra,8(sp)
 10129d4:	df000115 	stw	fp,4(sp)
 10129d8:	df000104 	addi	fp,sp,4
 10129dc:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 10129e0:	e13fff17 	ldw	r4,-4(fp)
 10129e4:	10011840 	call	1001184 <vPortFree>
}
 10129e8:	0001883a 	nop
 10129ec:	e037883a 	mov	sp,fp
 10129f0:	dfc00117 	ldw	ra,4(sp)
 10129f4:	df000017 	ldw	fp,0(sp)
 10129f8:	dec00204 	addi	sp,sp,8
 10129fc:	f800283a 	ret

01012a00 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1012a00:	defffd04 	addi	sp,sp,-12
 1012a04:	df000215 	stw	fp,8(sp)
 1012a08:	df000204 	addi	fp,sp,8
 1012a0c:	e13ffe15 	stw	r4,-8(fp)
 1012a10:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1012a14:	e0bffe17 	ldw	r2,-8(fp)
 1012a18:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1012a1c:	10bfffe0 	cmpeqi	r2,r2,-1
 1012a20:	1000091e 	bne	r2,zero,1012a48 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1012a24:	e0bffe17 	ldw	r2,-8(fp)
 1012a28:	10800217 	ldw	r2,8(r2)
 1012a2c:	e0ffff17 	ldw	r3,-4(fp)
 1012a30:	1880052e 	bgeu	r3,r2,1012a48 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1012a34:	e0bffe17 	ldw	r2,-8(fp)
 1012a38:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1012a3c:	e0bfff17 	ldw	r2,-4(fp)
 1012a40:	1885883a 	add	r2,r3,r2
 1012a44:	00000106 	br	1012a4c <metal_io_virt+0x4c>
 1012a48:	0005883a 	mov	r2,zero
}
 1012a4c:	e037883a 	mov	sp,fp
 1012a50:	df000017 	ldw	fp,0(sp)
 1012a54:	dec00104 	addi	sp,sp,4
 1012a58:	f800283a 	ret

01012a5c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 1012a5c:	defffc04 	addi	sp,sp,-16
 1012a60:	df000315 	stw	fp,12(sp)
 1012a64:	df000304 	addi	fp,sp,12
 1012a68:	e13ffe15 	stw	r4,-8(fp)
 1012a6c:	e17fff15 	stw	r5,-4(fp)
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 1012a70:	e0bfff17 	ldw	r2,-4(fp)
 1012a74:	e0fffe17 	ldw	r3,-8(fp)
 1012a78:	18c00017 	ldw	r3,0(r3)
 1012a7c:	10c5c83a 	sub	r2,r2,r3
 1012a80:	e0bffd15 	stw	r2,-12(fp)
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 1012a84:	e0bffe17 	ldw	r2,-8(fp)
 1012a88:	10800217 	ldw	r2,8(r2)
 1012a8c:	e0fffd17 	ldw	r3,-12(fp)
 1012a90:	1880022e 	bgeu	r3,r2,1012a9c <metal_io_virt_to_offset+0x40>
 1012a94:	e0bffd17 	ldw	r2,-12(fp)
 1012a98:	00000106 	br	1012aa0 <metal_io_virt_to_offset+0x44>
 1012a9c:	00bfffc4 	movi	r2,-1
}
 1012aa0:	e037883a 	mov	sp,fp
 1012aa4:	df000017 	ldw	fp,0(sp)
 1012aa8:	dec00104 	addi	sp,sp,4
 1012aac:	f800283a 	ret

01012ab0 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 1012ab0:	defffb04 	addi	sp,sp,-20
 1012ab4:	dfc00415 	stw	ra,16(sp)
 1012ab8:	df000315 	stw	fp,12(sp)
 1012abc:	df000304 	addi	fp,sp,12
 1012ac0:	e13ffe15 	stw	r4,-8(fp)
 1012ac4:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 1012ac8:	e0bffe17 	ldw	r2,-8(fp)
 1012acc:	10800c17 	ldw	r2,48(r2)
 1012ad0:	1000211e 	bne	r2,zero,1012b58 <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 1012ad4:	e0bffe17 	ldw	r2,-8(fp)
 1012ad8:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 1012adc:	10800828 	cmpgeui	r2,r2,32
 1012ae0:	1000051e 	bne	r2,zero,1012af8 <metal_io_phys+0x48>
 1012ae4:	e0bffe17 	ldw	r2,-8(fp)
 1012ae8:	10800317 	ldw	r2,12(r2)
 1012aec:	e0ffff17 	ldw	r3,-4(fp)
 1012af0:	1884d83a 	srl	r2,r3,r2
 1012af4:	00000106 	br	1012afc <metal_io_phys+0x4c>
 1012af8:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 1012afc:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012b00:	e0bffe17 	ldw	r2,-8(fp)
 1012b04:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1012b08:	10001126 	beq	r2,zero,1012b50 <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012b0c:	e0bffe17 	ldw	r2,-8(fp)
 1012b10:	10800217 	ldw	r2,8(r2)
 1012b14:	e0ffff17 	ldw	r3,-4(fp)
 1012b18:	18800d2e 	bgeu	r3,r2,1012b50 <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 1012b1c:	e0bffe17 	ldw	r2,-8(fp)
 1012b20:	10c00117 	ldw	r3,4(r2)
 1012b24:	e0bffd17 	ldw	r2,-12(fp)
 1012b28:	1085883a 	add	r2,r2,r2
 1012b2c:	1085883a 	add	r2,r2,r2
 1012b30:	1885883a 	add	r2,r3,r2
 1012b34:	10c00017 	ldw	r3,0(r2)
 1012b38:	e0bffe17 	ldw	r2,-8(fp)
 1012b3c:	11000417 	ldw	r4,16(r2)
 1012b40:	e0bfff17 	ldw	r2,-4(fp)
 1012b44:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 1012b48:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012b4c:	00000706 	br	1012b6c <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1012b50:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1012b54:	00000506 	br	1012b6c <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 1012b58:	e0bffe17 	ldw	r2,-8(fp)
 1012b5c:	10800c17 	ldw	r2,48(r2)
 1012b60:	e17fff17 	ldw	r5,-4(fp)
 1012b64:	e13ffe17 	ldw	r4,-8(fp)
 1012b68:	103ee83a 	callr	r2
}
 1012b6c:	e037883a 	mov	sp,fp
 1012b70:	dfc00117 	ldw	ra,4(sp)
 1012b74:	df000017 	ldw	fp,0(sp)
 1012b78:	dec00204 	addi	sp,sp,8
 1012b7c:	f800283a 	ret

01012b80 <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1012b80:	defffb04 	addi	sp,sp,-20
 1012b84:	dfc00415 	stw	ra,16(sp)
 1012b88:	df000315 	stw	fp,12(sp)
 1012b8c:	df000304 	addi	fp,sp,12
 1012b90:	e13ffe15 	stw	r4,-8(fp)
 1012b94:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 1012b98:	e0bffe17 	ldw	r2,-8(fp)
 1012b9c:	10800d17 	ldw	r2,52(r2)
 1012ba0:	1000231e 	bne	r2,zero,1012c30 <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 1012ba4:	e0bffe17 	ldw	r2,-8(fp)
 1012ba8:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 1012bac:	10bfffd8 	cmpnei	r2,r2,-1
 1012bb0:	1000061e 	bne	r2,zero,1012bcc <metal_io_phys_to_offset+0x4c>
 1012bb4:	e0bffe17 	ldw	r2,-8(fp)
 1012bb8:	10800117 	ldw	r2,4(r2)
 1012bbc:	10800017 	ldw	r2,0(r2)
 1012bc0:	e0ffff17 	ldw	r3,-4(fp)
 1012bc4:	1885c83a 	sub	r2,r3,r2
 1012bc8:	00000406 	br	1012bdc <metal_io_phys_to_offset+0x5c>
 1012bcc:	e0bffe17 	ldw	r2,-8(fp)
 1012bd0:	10c00417 	ldw	r3,16(r2)
 1012bd4:	e0bfff17 	ldw	r2,-4(fp)
 1012bd8:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 1012bdc:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 1012be0:	e17ffd17 	ldw	r5,-12(fp)
 1012be4:	e13ffe17 	ldw	r4,-8(fp)
 1012be8:	1012ab00 	call	1012ab0 <metal_io_phys>
 1012bec:	1007883a 	mov	r3,r2
 1012bf0:	e0bfff17 	ldw	r2,-4(fp)
 1012bf4:	1880021e 	bne	r3,r2,1012c00 <metal_io_phys_to_offset+0x80>
				return offset;
 1012bf8:	e0bffd17 	ldw	r2,-12(fp)
 1012bfc:	00001106 	br	1012c44 <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 1012c00:	e0bffe17 	ldw	r2,-8(fp)
 1012c04:	10c00417 	ldw	r3,16(r2)
 1012c08:	e0bffd17 	ldw	r2,-12(fp)
 1012c0c:	1885883a 	add	r2,r3,r2
 1012c10:	10800044 	addi	r2,r2,1
 1012c14:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 1012c18:	e0bffe17 	ldw	r2,-8(fp)
 1012c1c:	10800217 	ldw	r2,8(r2)
 1012c20:	e0fffd17 	ldw	r3,-12(fp)
 1012c24:	18bfee36 	bltu	r3,r2,1012be0 <__alt_data_end+0xff012be0>
		return METAL_BAD_OFFSET;
 1012c28:	00bfffc4 	movi	r2,-1
 1012c2c:	00000506 	br	1012c44 <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 1012c30:	e0bffe17 	ldw	r2,-8(fp)
 1012c34:	10800d17 	ldw	r2,52(r2)
 1012c38:	e17fff17 	ldw	r5,-4(fp)
 1012c3c:	e13ffe17 	ldw	r4,-8(fp)
 1012c40:	103ee83a 	callr	r2
}
 1012c44:	e037883a 	mov	sp,fp
 1012c48:	dfc00117 	ldw	ra,4(sp)
 1012c4c:	df000017 	ldw	fp,0(sp)
 1012c50:	dec00204 	addi	sp,sp,8
 1012c54:	f800283a 	ret

01012c58 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1012c58:	defffc04 	addi	sp,sp,-16
 1012c5c:	dfc00315 	stw	ra,12(sp)
 1012c60:	df000215 	stw	fp,8(sp)
 1012c64:	df000204 	addi	fp,sp,8
 1012c68:	e13ffe15 	stw	r4,-8(fp)
 1012c6c:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 1012c70:	e17fff17 	ldw	r5,-4(fp)
 1012c74:	e13ffe17 	ldw	r4,-8(fp)
 1012c78:	1012b800 	call	1012b80 <metal_io_phys_to_offset>
 1012c7c:	100b883a 	mov	r5,r2
 1012c80:	e13ffe17 	ldw	r4,-8(fp)
 1012c84:	1012a000 	call	1012a00 <metal_io_virt>
}
 1012c88:	e037883a 	mov	sp,fp
 1012c8c:	dfc00117 	ldw	ra,4(sp)
 1012c90:	df000017 	ldw	fp,0(sp)
 1012c94:	dec00204 	addi	sp,sp,8
 1012c98:	f800283a 	ret

01012c9c <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
 1012c9c:	defffc04 	addi	sp,sp,-16
 1012ca0:	dfc00315 	stw	ra,12(sp)
 1012ca4:	df000215 	stw	fp,8(sp)
 1012ca8:	df000204 	addi	fp,sp,8
 1012cac:	e13ffe15 	stw	r4,-8(fp)
 1012cb0:	e17fff15 	stw	r5,-4(fp)
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 1012cb4:	e17fff17 	ldw	r5,-4(fp)
 1012cb8:	e13ffe17 	ldw	r4,-8(fp)
 1012cbc:	1012a5c0 	call	1012a5c <metal_io_virt_to_offset>
 1012cc0:	100b883a 	mov	r5,r2
 1012cc4:	e13ffe17 	ldw	r4,-8(fp)
 1012cc8:	1012ab00 	call	1012ab0 <metal_io_phys>
}
 1012ccc:	e037883a 	mov	sp,fp
 1012cd0:	dfc00117 	ldw	ra,4(sp)
 1012cd4:	df000017 	ldw	fp,0(sp)
 1012cd8:	dec00204 	addi	sp,sp,8
 1012cdc:	f800283a 	ret

01012ce0 <virtqueue_phys_to_virt>:
static int virtqueue_navail(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 1012ce0:	defffb04 	addi	sp,sp,-20
 1012ce4:	dfc00415 	stw	ra,16(sp)
 1012ce8:	df000315 	stw	fp,12(sp)
 1012cec:	df000304 	addi	fp,sp,12
 1012cf0:	e13ffe15 	stw	r4,-8(fp)
 1012cf4:	e17fff15 	stw	r5,-4(fp)
	struct metal_io_region *io = vq->shm_io;
 1012cf8:	e0bffe17 	ldw	r2,-8(fp)
 1012cfc:	10800a17 	ldw	r2,40(r2)
 1012d00:	e0bffd15 	stw	r2,-12(fp)

	return metal_io_phys_to_virt(io, phys);
 1012d04:	e17fff17 	ldw	r5,-4(fp)
 1012d08:	e13ffd17 	ldw	r4,-12(fp)
 1012d0c:	1012c580 	call	1012c58 <metal_io_phys_to_virt>
}
 1012d10:	e037883a 	mov	sp,fp
 1012d14:	dfc00117 	ldw	ra,4(sp)
 1012d18:	df000017 	ldw	fp,0(sp)
 1012d1c:	dec00204 	addi	sp,sp,8
 1012d20:	f800283a 	ret

01012d24 <virtqueue_virt_to_phys>:

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 1012d24:	defffb04 	addi	sp,sp,-20
 1012d28:	dfc00415 	stw	ra,16(sp)
 1012d2c:	df000315 	stw	fp,12(sp)
 1012d30:	df000304 	addi	fp,sp,12
 1012d34:	e13ffe15 	stw	r4,-8(fp)
 1012d38:	e17fff15 	stw	r5,-4(fp)
	struct metal_io_region *io = vq->shm_io;
 1012d3c:	e0bffe17 	ldw	r2,-8(fp)
 1012d40:	10800a17 	ldw	r2,40(r2)
 1012d44:	e0bffd15 	stw	r2,-12(fp)

	return metal_io_virt_to_phys(io, buf);
 1012d48:	e17fff17 	ldw	r5,-4(fp)
 1012d4c:	e13ffd17 	ldw	r4,-12(fp)
 1012d50:	1012c9c0 	call	1012c9c <metal_io_virt_to_phys>
}
 1012d54:	e037883a 	mov	sp,fp
 1012d58:	dfc00117 	ldw	ra,4(sp)
 1012d5c:	df000017 	ldw	fp,0(sp)
 1012d60:	dec00204 	addi	sp,sp,8
 1012d64:	f800283a 	ret

01012d68 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 1012d68:	defff904 	addi	sp,sp,-28
 1012d6c:	dfc00615 	stw	ra,24(sp)
 1012d70:	df000515 	stw	fp,20(sp)
 1012d74:	df000504 	addi	fp,sp,20
 1012d78:	e13ffc15 	stw	r4,-16(fp)
 1012d7c:	2805883a 	mov	r2,r5
 1012d80:	e1bffe15 	stw	r6,-8(fp)
 1012d84:	e1ffff15 	stw	r7,-4(fp)
 1012d88:	e0bffd0d 	sth	r2,-12(fp)
	int status = VQUEUE_SUCCESS;
 1012d8c:	e03ffb15 	stw	zero,-20(fp)
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 1012d90:	e0bffb17 	ldw	r2,-20(fp)
 1012d94:	10001f1e 	bne	r2,zero,1012e14 <virtqueue_create+0xac>
		vq->vq_dev = virt_dev;
 1012d98:	e0800417 	ldw	r2,16(fp)
 1012d9c:	e0fffc17 	ldw	r3,-16(fp)
 1012da0:	10c00015 	stw	r3,0(r2)
		vq->vq_name = name;
 1012da4:	e0800417 	ldw	r2,16(fp)
 1012da8:	e0fffe17 	ldw	r3,-8(fp)
 1012dac:	10c00115 	stw	r3,4(r2)
		vq->vq_queue_index = id;
 1012db0:	e0800417 	ldw	r2,16(fp)
 1012db4:	e0fffd0b 	ldhu	r3,-12(fp)
 1012db8:	10c0020d 	sth	r3,8(r2)
		vq->vq_nentries = ring->num_descs;
 1012dbc:	e0bfff17 	ldw	r2,-4(fp)
 1012dc0:	10c0020b 	ldhu	r3,8(r2)
 1012dc4:	e0800417 	ldw	r2,16(fp)
 1012dc8:	10c0028d 	sth	r3,10(r2)
		vq->vq_free_cnt = vq->vq_nentries;
 1012dcc:	e0800417 	ldw	r2,16(fp)
 1012dd0:	10c0028b 	ldhu	r3,10(r2)
 1012dd4:	e0800417 	ldw	r2,16(fp)
 1012dd8:	10c0090d 	sth	r3,36(r2)
		vq->callback = callback;
 1012ddc:	e0800417 	ldw	r2,16(fp)
 1012de0:	e0c00217 	ldw	r3,8(fp)
 1012de4:	10c00315 	stw	r3,12(r2)
		vq->notify = notify;
 1012de8:	e0800417 	ldw	r2,16(fp)
 1012dec:	e0c00317 	ldw	r3,12(fp)
 1012df0:	10c00415 	stw	r3,16(r2)

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
 1012df4:	e0bfff17 	ldw	r2,-4(fp)
 1012df8:	10c00017 	ldw	r3,0(r2)
 1012dfc:	e0bfff17 	ldw	r2,-4(fp)
 1012e00:	10800117 	ldw	r2,4(r2)
 1012e04:	100d883a 	mov	r6,r2
 1012e08:	180b883a 	mov	r5,r3
 1012e0c:	e1000417 	ldw	r4,16(fp)
 1012e10:	10139240 	call	1013924 <vq_ring_init>
	}

	return status;
 1012e14:	e0bffb17 	ldw	r2,-20(fp)
}
 1012e18:	e037883a 	mov	sp,fp
 1012e1c:	dfc00117 	ldw	ra,4(sp)
 1012e20:	df000017 	ldw	fp,0(sp)
 1012e24:	dec00204 	addi	sp,sp,8
 1012e28:	f800283a 	ret

01012e2c <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 1012e2c:	defff404 	addi	sp,sp,-48
 1012e30:	dfc00b15 	stw	ra,44(sp)
 1012e34:	df000a15 	stw	fp,40(sp)
 1012e38:	df000a04 	addi	fp,sp,40
 1012e3c:	e13ffc15 	stw	r4,-16(fp)
 1012e40:	e17ffd15 	stw	r5,-12(fp)
 1012e44:	e1bffe15 	stw	r6,-8(fp)
 1012e48:	e1ffff15 	stw	r7,-4(fp)
	struct vq_desc_extra *dxp = NULL;
 1012e4c:	e03ff815 	stw	zero,-32(fp)
	int status = VQUEUE_SUCCESS;
 1012e50:	e03ff915 	stw	zero,-28(fp)
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 1012e54:	e0fffe17 	ldw	r3,-8(fp)
 1012e58:	e0bfff17 	ldw	r2,-4(fp)
 1012e5c:	1885883a 	add	r2,r3,r2
 1012e60:	e0bffa15 	stw	r2,-24(fp)
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 1012e64:	e0bff917 	ldw	r2,-28(fp)
 1012e68:	10002b1e 	bne	r2,zero,1012f18 <virtqueue_add_buffer+0xec>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 1012e6c:	e0bffc17 	ldw	r2,-16(fp)
 1012e70:	10800b0b 	ldhu	r2,44(r2)
 1012e74:	e0bffb0d 	sth	r2,-20(fp)
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 1012e78:	e0bffb0b 	ldhu	r2,-20(fp)
 1012e7c:	100490fa 	slli	r2,r2,3
 1012e80:	10800d04 	addi	r2,r2,52
 1012e84:	e0fffc17 	ldw	r3,-16(fp)
 1012e88:	1885883a 	add	r2,r3,r2
 1012e8c:	e0bff815 	stw	r2,-32(fp)

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 1012e90:	e0bff817 	ldw	r2,-32(fp)
 1012e94:	e0c00217 	ldw	r3,8(fp)
 1012e98:	10c00015 	stw	r3,0(r2)
		dxp->ndescs = needed;
 1012e9c:	e0bffa17 	ldw	r2,-24(fp)
 1012ea0:	1007883a 	mov	r3,r2
 1012ea4:	e0bff817 	ldw	r2,-32(fp)
 1012ea8:	10c0010d 	sth	r3,4(r2)

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 1012eac:	e0bffc17 	ldw	r2,-16(fp)
 1012eb0:	10c00617 	ldw	r3,24(r2)
 1012eb4:	e13ffb0b 	ldhu	r4,-20(fp)
 1012eb8:	e0bfff17 	ldw	r2,-4(fp)
 1012ebc:	d8800115 	stw	r2,4(sp)
 1012ec0:	e0bffe17 	ldw	r2,-8(fp)
 1012ec4:	d8800015 	stw	r2,0(sp)
 1012ec8:	e1fffd17 	ldw	r7,-12(fp)
 1012ecc:	200d883a 	mov	r6,r4
 1012ed0:	180b883a 	mov	r5,r3
 1012ed4:	e13ffc17 	ldw	r4,-16(fp)
 1012ed8:	10136c40 	call	10136c4 <vq_ring_add_buffer>
 1012edc:	e0bffb8d 	sth	r2,-18(fp)
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 1012ee0:	e0bffc17 	ldw	r2,-16(fp)
 1012ee4:	e0fffb8b 	ldhu	r3,-18(fp)
 1012ee8:	10c00b0d 	sth	r3,44(r2)
		vq->vq_free_cnt -= needed;
 1012eec:	e0bffc17 	ldw	r2,-16(fp)
 1012ef0:	1080090b 	ldhu	r2,36(r2)
 1012ef4:	e0fffa17 	ldw	r3,-24(fp)
 1012ef8:	10c5c83a 	sub	r2,r2,r3
 1012efc:	1007883a 	mov	r3,r2
 1012f00:	e0bffc17 	ldw	r2,-16(fp)
 1012f04:	10c0090d 	sth	r3,36(r2)

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 1012f08:	e0bffb0b 	ldhu	r2,-20(fp)
 1012f0c:	100b883a 	mov	r5,r2
 1012f10:	e13ffc17 	ldw	r4,-16(fp)
 1012f14:	1013a000 	call	1013a00 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 1012f18:	e0bff917 	ldw	r2,-28(fp)
}
 1012f1c:	e037883a 	mov	sp,fp
 1012f20:	dfc00117 	ldw	ra,4(sp)
 1012f24:	df000017 	ldw	fp,0(sp)
 1012f28:	dec00204 	addi	sp,sp,8
 1012f2c:	f800283a 	ret

01012f30 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 1012f30:	defff704 	addi	sp,sp,-36
 1012f34:	dfc00815 	stw	ra,32(sp)
 1012f38:	df000715 	stw	fp,28(sp)
 1012f3c:	df000704 	addi	fp,sp,28
 1012f40:	e13ffd15 	stw	r4,-12(fp)
 1012f44:	e17ffe15 	stw	r5,-8(fp)
 1012f48:	e1bfff15 	stw	r6,-4(fp)
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 1012f4c:	e0bffd17 	ldw	r2,-12(fp)
 1012f50:	10000826 	beq	r2,zero,1012f74 <virtqueue_get_buffer+0x44>
 1012f54:	e0bffd17 	ldw	r2,-12(fp)
 1012f58:	10c00b8b 	ldhu	r3,46(r2)
 1012f5c:	e0bffd17 	ldw	r2,-12(fp)
 1012f60:	10800817 	ldw	r2,32(r2)
 1012f64:	1080008b 	ldhu	r2,2(r2)
 1012f68:	18ffffcc 	andi	r3,r3,65535
 1012f6c:	10bfffcc 	andi	r2,r2,65535
 1012f70:	1880021e 	bne	r3,r2,1012f7c <virtqueue_get_buffer+0x4c>
		return NULL;
 1012f74:	0005883a 	mov	r2,zero
 1012f78:	00003406 	br	101304c <virtqueue_get_buffer+0x11c>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 1012f7c:	e0bffd17 	ldw	r2,-12(fp)
 1012f80:	10800b8b 	ldhu	r2,46(r2)
 1012f84:	10c00044 	addi	r3,r2,1
 1012f88:	1809883a 	mov	r4,r3
 1012f8c:	e0fffd17 	ldw	r3,-12(fp)
 1012f90:	19000b8d 	sth	r4,46(r3)
 1012f94:	1007883a 	mov	r3,r2
 1012f98:	e0bffd17 	ldw	r2,-12(fp)
 1012f9c:	1080028b 	ldhu	r2,10(r2)
 1012fa0:	10bfffc4 	addi	r2,r2,-1
 1012fa4:	1884703a 	and	r2,r3,r2
 1012fa8:	e0bff90d 	sth	r2,-28(fp)
	uep = &vq->vq_ring.used->ring[used_idx];
 1012fac:	e0bffd17 	ldw	r2,-12(fp)
 1012fb0:	10c00817 	ldw	r3,32(r2)
 1012fb4:	e0bff90b 	ldhu	r2,-28(fp)
 1012fb8:	100490fa 	slli	r2,r2,3
 1012fbc:	10800104 	addi	r2,r2,4
 1012fc0:	1885883a 	add	r2,r3,r2
 1012fc4:	e0bffa15 	stw	r2,-24(fp)

	atomic_thread_fence(memory_order_seq_cst);
 1012fc8:	0001b03a 	sync

	desc_idx = (uint16_t)uep->id;
 1012fcc:	e0bffa17 	ldw	r2,-24(fp)
 1012fd0:	10800017 	ldw	r2,0(r2)
 1012fd4:	e0bffb0d 	sth	r2,-20(fp)
	if (len)
 1012fd8:	e0bffe17 	ldw	r2,-8(fp)
 1012fdc:	10000426 	beq	r2,zero,1012ff0 <virtqueue_get_buffer+0xc0>
		*len = uep->len;
 1012fe0:	e0bffa17 	ldw	r2,-24(fp)
 1012fe4:	10c00117 	ldw	r3,4(r2)
 1012fe8:	e0bffe17 	ldw	r2,-8(fp)
 1012fec:	10c00015 	stw	r3,0(r2)

	vq_ring_free_chain(vq, desc_idx);
 1012ff0:	e0bffb0b 	ldhu	r2,-20(fp)
 1012ff4:	100b883a 	mov	r5,r2
 1012ff8:	e13ffd17 	ldw	r4,-12(fp)
 1012ffc:	10138100 	call	1013810 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 1013000:	e0bffb0b 	ldhu	r2,-20(fp)
 1013004:	e0fffd17 	ldw	r3,-12(fp)
 1013008:	100490fa 	slli	r2,r2,3
 101300c:	1885883a 	add	r2,r3,r2
 1013010:	10800d04 	addi	r2,r2,52
 1013014:	10800017 	ldw	r2,0(r2)
 1013018:	e0bffc15 	stw	r2,-16(fp)
	vq->vq_descx[desc_idx].cookie = NULL;
 101301c:	e0bffb0b 	ldhu	r2,-20(fp)
 1013020:	e0fffd17 	ldw	r3,-12(fp)
 1013024:	100490fa 	slli	r2,r2,3
 1013028:	1885883a 	add	r2,r3,r2
 101302c:	10800d04 	addi	r2,r2,52
 1013030:	10000015 	stw	zero,0(r2)

	if (idx)
 1013034:	e0bfff17 	ldw	r2,-4(fp)
 1013038:	10000326 	beq	r2,zero,1013048 <virtqueue_get_buffer+0x118>
		*idx = used_idx;
 101303c:	e0bfff17 	ldw	r2,-4(fp)
 1013040:	e0fff90b 	ldhu	r3,-28(fp)
 1013044:	10c0000d 	sth	r3,0(r2)
	VQUEUE_IDLE(vq);

	return cookie;
 1013048:	e0bffc17 	ldw	r2,-16(fp)
}
 101304c:	e037883a 	mov	sp,fp
 1013050:	dfc00117 	ldw	ra,4(sp)
 1013054:	df000017 	ldw	fp,0(sp)
 1013058:	dec00204 	addi	sp,sp,8
 101305c:	f800283a 	ret

01013060 <virtqueue_get_buffer_length>:

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
 1013060:	defffd04 	addi	sp,sp,-12
 1013064:	df000215 	stw	fp,8(sp)
 1013068:	df000204 	addi	fp,sp,8
 101306c:	e13ffe15 	stw	r4,-8(fp)
 1013070:	2805883a 	mov	r2,r5
 1013074:	e0bfff0d 	sth	r2,-4(fp)
	return vq->vq_ring.desc[idx].len;
 1013078:	e0bffe17 	ldw	r2,-8(fp)
 101307c:	10c00617 	ldw	r3,24(r2)
 1013080:	e0bfff0b 	ldhu	r2,-4(fp)
 1013084:	1004913a 	slli	r2,r2,4
 1013088:	1885883a 	add	r2,r3,r2
 101308c:	10800217 	ldw	r2,8(r2)
}
 1013090:	e037883a 	mov	sp,fp
 1013094:	df000017 	ldw	fp,0(sp)
 1013098:	dec00104 	addi	sp,sp,4
 101309c:	f800283a 	ret

010130a0 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
 10130a0:	defffd04 	addi	sp,sp,-12
 10130a4:	dfc00215 	stw	ra,8(sp)
 10130a8:	df000115 	stw	fp,4(sp)
 10130ac:	df000104 	addi	fp,sp,4
 10130b0:	e13fff15 	stw	r4,-4(fp)
	if (vq) {
 10130b4:	e0bfff17 	ldw	r2,-4(fp)
 10130b8:	10001c26 	beq	r2,zero,101312c <virtqueue_free+0x8c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
 10130bc:	e0bfff17 	ldw	r2,-4(fp)
 10130c0:	10c0090b 	ldhu	r3,36(r2)
 10130c4:	e0bfff17 	ldw	r2,-4(fp)
 10130c8:	1080028b 	ldhu	r2,10(r2)
 10130cc:	18ffffcc 	andi	r3,r3,65535
 10130d0:	10bfffcc 	andi	r2,r2,65535
 10130d4:	18801326 	beq	r3,r2,1013124 <virtqueue_free+0x84>
			metal_log(METAL_LOG_WARNING,
 10130d8:	008060f4 	movhi	r2,387
 10130dc:	10bb7104 	addi	r2,r2,-4668
 10130e0:	10800017 	ldw	r2,0(r2)
 10130e4:	10800130 	cmpltui	r2,r2,4
 10130e8:	10000e1e 	bne	r2,zero,1013124 <virtqueue_free+0x84>
 10130ec:	008060f4 	movhi	r2,387
 10130f0:	10bb7104 	addi	r2,r2,-4668
 10130f4:	10800117 	ldw	r2,4(r2)
 10130f8:	10000a26 	beq	r2,zero,1013124 <virtqueue_free+0x84>
 10130fc:	008060f4 	movhi	r2,387
 1013100:	10bb7104 	addi	r2,r2,-4668
 1013104:	10800117 	ldw	r2,4(r2)
 1013108:	e0ffff17 	ldw	r3,-4(fp)
 101310c:	18c00117 	ldw	r3,4(r3)
 1013110:	180d883a 	mov	r6,r3
 1013114:	014040f4 	movhi	r5,259
 1013118:	29683004 	addi	r5,r5,-24384
 101311c:	01000104 	movi	r4,4
 1013120:	103ee83a 	callr	r2
				  "%s: freeing non-empty virtqueue\r\n",
				  vq->vq_name);
		}

		metal_free_memory(vq);
 1013124:	e13fff17 	ldw	r4,-4(fp)
 1013128:	10129cc0 	call	10129cc <metal_free_memory>
	}
}
 101312c:	0001883a 	nop
 1013130:	e037883a 	mov	sp,fp
 1013134:	dfc00117 	ldw	ra,4(sp)
 1013138:	df000017 	ldw	fp,0(sp)
 101313c:	dec00204 	addi	sp,sp,8
 1013140:	f800283a 	ret

01013144 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 1013144:	defff904 	addi	sp,sp,-28
 1013148:	dfc00615 	stw	ra,24(sp)
 101314c:	df000515 	stw	fp,20(sp)
 1013150:	df000504 	addi	fp,sp,20
 1013154:	e13ffd15 	stw	r4,-12(fp)
 1013158:	e17ffe15 	stw	r5,-8(fp)
 101315c:	e1bfff15 	stw	r6,-4(fp)
	uint16_t head_idx = 0;
 1013160:	e03ffb0d 	sth	zero,-20(fp)
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 1013164:	0001b03a 	sync
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 1013168:	e0bffd17 	ldw	r2,-12(fp)
 101316c:	10c00c0b 	ldhu	r3,48(r2)
 1013170:	e0bffd17 	ldw	r2,-12(fp)
 1013174:	10800717 	ldw	r2,28(r2)
 1013178:	1080008b 	ldhu	r2,2(r2)
 101317c:	18ffffcc 	andi	r3,r3,65535
 1013180:	10bfffcc 	andi	r2,r2,65535
 1013184:	1880021e 	bne	r3,r2,1013190 <virtqueue_get_available_buffer+0x4c>
		return NULL;
 1013188:	0005883a 	mov	r2,zero
 101318c:	00002d06 	br	1013244 <virtqueue_get_available_buffer+0x100>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 1013190:	e0bffd17 	ldw	r2,-12(fp)
 1013194:	10800c0b 	ldhu	r2,48(r2)
 1013198:	10c00044 	addi	r3,r2,1
 101319c:	1809883a 	mov	r4,r3
 10131a0:	e0fffd17 	ldw	r3,-12(fp)
 10131a4:	19000c0d 	sth	r4,48(r3)
 10131a8:	1007883a 	mov	r3,r2
 10131ac:	e0bffd17 	ldw	r2,-12(fp)
 10131b0:	1080028b 	ldhu	r2,10(r2)
 10131b4:	10bfffc4 	addi	r2,r2,-1
 10131b8:	1884703a 	and	r2,r3,r2
 10131bc:	e0bffb0d 	sth	r2,-20(fp)
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 10131c0:	e0bffd17 	ldw	r2,-12(fp)
 10131c4:	10c00717 	ldw	r3,28(r2)
 10131c8:	e0bffb0b 	ldhu	r2,-20(fp)
 10131cc:	10800084 	addi	r2,r2,2
 10131d0:	1085883a 	add	r2,r2,r2
 10131d4:	1885883a 	add	r2,r3,r2
 10131d8:	10c0000b 	ldhu	r3,0(r2)
 10131dc:	e0bffe17 	ldw	r2,-8(fp)
 10131e0:	10c0000d 	sth	r3,0(r2)

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 10131e4:	e0bffd17 	ldw	r2,-12(fp)
 10131e8:	10c00617 	ldw	r3,24(r2)
 10131ec:	e0bffe17 	ldw	r2,-8(fp)
 10131f0:	1080000b 	ldhu	r2,0(r2)
 10131f4:	10bfffcc 	andi	r2,r2,65535
 10131f8:	1004913a 	slli	r2,r2,4
 10131fc:	1889883a 	add	r4,r3,r2
 1013200:	20800017 	ldw	r2,0(r4)
 1013204:	20c00117 	ldw	r3,4(r4)
 1013208:	100b883a 	mov	r5,r2
 101320c:	e13ffd17 	ldw	r4,-12(fp)
 1013210:	1012ce00 	call	1012ce0 <virtqueue_phys_to_virt>
 1013214:	e0bffc15 	stw	r2,-16(fp)
	*len = vq->vq_ring.desc[*avail_idx].len;
 1013218:	e0bffd17 	ldw	r2,-12(fp)
 101321c:	10c00617 	ldw	r3,24(r2)
 1013220:	e0bffe17 	ldw	r2,-8(fp)
 1013224:	1080000b 	ldhu	r2,0(r2)
 1013228:	10bfffcc 	andi	r2,r2,65535
 101322c:	1004913a 	slli	r2,r2,4
 1013230:	1885883a 	add	r2,r3,r2
 1013234:	10c00217 	ldw	r3,8(r2)
 1013238:	e0bfff17 	ldw	r2,-4(fp)
 101323c:	10c00015 	stw	r3,0(r2)

	VQUEUE_IDLE(vq);

	return buffer;
 1013240:	e0bffc17 	ldw	r2,-16(fp)
}
 1013244:	e037883a 	mov	sp,fp
 1013248:	dfc00117 	ldw	ra,4(sp)
 101324c:	df000017 	ldw	fp,0(sp)
 1013250:	dec00204 	addi	sp,sp,8
 1013254:	f800283a 	ret

01013258 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 1013258:	defffa04 	addi	sp,sp,-24
 101325c:	df000515 	stw	fp,20(sp)
 1013260:	df000504 	addi	fp,sp,20
 1013264:	e13ffd15 	stw	r4,-12(fp)
 1013268:	2805883a 	mov	r2,r5
 101326c:	e1bfff15 	stw	r6,-4(fp)
 1013270:	e0bffe0d 	sth	r2,-8(fp)
	struct vring_used_elem *used_desc = NULL;
 1013274:	e03ffb15 	stw	zero,-20(fp)
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 1013278:	e0bffd17 	ldw	r2,-12(fp)
 101327c:	1080028b 	ldhu	r2,10(r2)
 1013280:	10ffffcc 	andi	r3,r2,65535
 1013284:	e0bffe0b 	ldhu	r2,-8(fp)
 1013288:	1880022e 	bgeu	r3,r2,1013294 <virtqueue_add_consumed_buffer+0x3c>
		return ERROR_VRING_NO_BUFF;
 101328c:	00bd1044 	movi	r2,-3007
 1013290:	00002306 	br	1013320 <virtqueue_add_consumed_buffer+0xc8>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 1013294:	e0bffd17 	ldw	r2,-12(fp)
 1013298:	10800817 	ldw	r2,32(r2)
 101329c:	1080008b 	ldhu	r2,2(r2)
 10132a0:	1007883a 	mov	r3,r2
 10132a4:	e0bffd17 	ldw	r2,-12(fp)
 10132a8:	1080028b 	ldhu	r2,10(r2)
 10132ac:	10bfffc4 	addi	r2,r2,-1
 10132b0:	1884703a 	and	r2,r3,r2
 10132b4:	e0bffc0d 	sth	r2,-16(fp)
	used_desc = &vq->vq_ring.used->ring[used_idx];
 10132b8:	e0bffd17 	ldw	r2,-12(fp)
 10132bc:	10c00817 	ldw	r3,32(r2)
 10132c0:	e0bffc0b 	ldhu	r2,-16(fp)
 10132c4:	100490fa 	slli	r2,r2,3
 10132c8:	10800104 	addi	r2,r2,4
 10132cc:	1885883a 	add	r2,r3,r2
 10132d0:	e0bffb15 	stw	r2,-20(fp)
	used_desc->id = head_idx;
 10132d4:	e0fffe0b 	ldhu	r3,-8(fp)
 10132d8:	e0bffb17 	ldw	r2,-20(fp)
 10132dc:	10c00015 	stw	r3,0(r2)
	used_desc->len = len;
 10132e0:	e0bffb17 	ldw	r2,-20(fp)
 10132e4:	e0ffff17 	ldw	r3,-4(fp)
 10132e8:	10c00115 	stw	r3,4(r2)

	atomic_thread_fence(memory_order_seq_cst);
 10132ec:	0001b03a 	sync

	vq->vq_ring.used->idx++;
 10132f0:	e0bffd17 	ldw	r2,-12(fp)
 10132f4:	10800817 	ldw	r2,32(r2)
 10132f8:	10c0008b 	ldhu	r3,2(r2)
 10132fc:	18c00044 	addi	r3,r3,1
 1013300:	10c0008d 	sth	r3,2(r2)

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 1013304:	e0bffd17 	ldw	r2,-12(fp)
 1013308:	1080098b 	ldhu	r2,38(r2)
 101330c:	10800044 	addi	r2,r2,1
 1013310:	1007883a 	mov	r3,r2
 1013314:	e0bffd17 	ldw	r2,-12(fp)
 1013318:	10c0098d 	sth	r3,38(r2)

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 101331c:	0005883a 	mov	r2,zero
}
 1013320:	e037883a 	mov	sp,fp
 1013324:	df000017 	ldw	fp,0(sp)
 1013328:	dec00104 	addi	sp,sp,4
 101332c:	f800283a 	ret

01013330 <virtqueue_enable_cb>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Function status
 */
int virtqueue_enable_cb(struct virtqueue *vq)
{
 1013330:	defffd04 	addi	sp,sp,-12
 1013334:	dfc00215 	stw	ra,8(sp)
 1013338:	df000115 	stw	fp,4(sp)
 101333c:	df000104 	addi	fp,sp,4
 1013340:	e13fff15 	stw	r4,-4(fp)
	return vq_ring_enable_interrupt(vq, 0);
 1013344:	000b883a 	mov	r5,zero
 1013348:	e13fff17 	ldw	r4,-4(fp)
 101334c:	1013aa00 	call	1013aa0 <vq_ring_enable_interrupt>
}
 1013350:	e037883a 	mov	sp,fp
 1013354:	dfc00117 	ldw	ra,4(sp)
 1013358:	df000017 	ldw	fp,0(sp)
 101335c:	dec00204 	addi	sp,sp,8
 1013360:	f800283a 	ret

01013364 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 1013364:	defffe04 	addi	sp,sp,-8
 1013368:	df000115 	stw	fp,4(sp)
 101336c:	df000104 	addi	fp,sp,4
 1013370:	e13fff15 	stw	r4,-4(fp)
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1013374:	e0bfff17 	ldw	r2,-4(fp)
 1013378:	11000017 	ldw	r4,0(r2)
 101337c:	20800317 	ldw	r2,12(r4)
 1013380:	20c00417 	ldw	r3,16(r4)
 1013384:	1148002c 	andhi	r5,r2,8192
 1013388:	180c703a 	and	r6,r3,zero
 101338c:	2805883a 	mov	r2,r5
 1013390:	1184b03a 	or	r2,r2,r6
 1013394:	10002626 	beq	r2,zero,1013430 <virtqueue_disable_cb+0xcc>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1013398:	e0bfff17 	ldw	r2,-4(fp)
 101339c:	10800017 	ldw	r2,0(r2)
 10133a0:	10800517 	ldw	r2,20(r2)
 10133a4:	10000e1e 	bne	r2,zero,10133e0 <virtqueue_disable_cb+0x7c>
			vring_used_event(&vq->vq_ring) =
 10133a8:	e0bfff17 	ldw	r2,-4(fp)
 10133ac:	10c00717 	ldw	r3,28(r2)
 10133b0:	e0bfff17 	ldw	r2,-4(fp)
 10133b4:	10800517 	ldw	r2,20(r2)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 10133b8:	e13fff17 	ldw	r4,-4(fp)
 10133bc:	21400b8b 	ldhu	r5,46(r4)
 10133c0:	e13fff17 	ldw	r4,-4(fp)
 10133c4:	2100028b 	ldhu	r4,10(r4)
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
			vring_used_event(&vq->vq_ring) =
 10133c8:	2909c83a 	sub	r4,r5,r4
 10133cc:	213fffc4 	addi	r4,r4,-1
 10133d0:	10800084 	addi	r2,r2,2
 10133d4:	1085883a 	add	r2,r2,r2
 10133d8:	1885883a 	add	r2,r3,r2
 10133dc:	1100000d 	sth	r4,0(r2)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 10133e0:	e0bfff17 	ldw	r2,-4(fp)
 10133e4:	10800017 	ldw	r2,0(r2)
 10133e8:	10800517 	ldw	r2,20(r2)
 10133ec:	10800058 	cmpnei	r2,r2,1
 10133f0:	1000261e 	bne	r2,zero,101348c <virtqueue_disable_cb+0x128>
			vring_avail_event(&vq->vq_ring) =
 10133f4:	e0bfff17 	ldw	r2,-4(fp)
 10133f8:	10c00817 	ldw	r3,32(r2)
 10133fc:	e0bfff17 	ldw	r2,-4(fp)
 1013400:	10800517 	ldw	r2,20(r2)
			    vq->vq_available_idx - vq->vq_nentries - 1;
 1013404:	e13fff17 	ldw	r4,-4(fp)
 1013408:	21400c0b 	ldhu	r5,48(r4)
 101340c:	e13fff17 	ldw	r4,-4(fp)
 1013410:	2100028b 	ldhu	r4,10(r4)
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			vring_avail_event(&vq->vq_ring) =
 1013414:	2909c83a 	sub	r4,r5,r4
 1013418:	213fffc4 	addi	r4,r4,-1
 101341c:	100490fa 	slli	r2,r2,3
 1013420:	1885883a 	add	r2,r3,r2
 1013424:	10800104 	addi	r2,r2,4
 1013428:	1100000d 	sth	r4,0(r2)
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
 101342c:	00001706 	br	101348c <virtqueue_disable_cb+0x128>
			    vq->vq_available_idx - vq->vq_nentries - 1;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013430:	e0bfff17 	ldw	r2,-4(fp)
 1013434:	10800017 	ldw	r2,0(r2)
 1013438:	10800517 	ldw	r2,20(r2)
 101343c:	1000071e 	bne	r2,zero,101345c <virtqueue_disable_cb+0xf8>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 1013440:	e0bfff17 	ldw	r2,-4(fp)
 1013444:	10800717 	ldw	r2,28(r2)
 1013448:	e0ffff17 	ldw	r3,-4(fp)
 101344c:	18c00717 	ldw	r3,28(r3)
 1013450:	18c0000b 	ldhu	r3,0(r3)
 1013454:	18c00054 	ori	r3,r3,1
 1013458:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 101345c:	e0bfff17 	ldw	r2,-4(fp)
 1013460:	10800017 	ldw	r2,0(r2)
 1013464:	10800517 	ldw	r2,20(r2)
 1013468:	10800058 	cmpnei	r2,r2,1
 101346c:	1000071e 	bne	r2,zero,101348c <virtqueue_disable_cb+0x128>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
 1013470:	e0bfff17 	ldw	r2,-4(fp)
 1013474:	10800817 	ldw	r2,32(r2)
 1013478:	e0ffff17 	ldw	r3,-4(fp)
 101347c:	18c00817 	ldw	r3,32(r3)
 1013480:	18c0000b 	ldhu	r3,0(r3)
 1013484:	18c00054 	ori	r3,r3,1
 1013488:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
 101348c:	0001883a 	nop
 1013490:	e037883a 	mov	sp,fp
 1013494:	df000017 	ldw	fp,0(sp)
 1013498:	dec00104 	addi	sp,sp,4
 101349c:	f800283a 	ret

010134a0 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 10134a0:	defffd04 	addi	sp,sp,-12
 10134a4:	dfc00215 	stw	ra,8(sp)
 10134a8:	df000115 	stw	fp,4(sp)
 10134ac:	df000104 	addi	fp,sp,4
 10134b0:	e13fff15 	stw	r4,-4(fp)
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 10134b4:	0001b03a 	sync

	if (vq_ring_must_notify(vq))
 10134b8:	e13fff17 	ldw	r4,-4(fp)
 10134bc:	1013c900 	call	1013c90 <vq_ring_must_notify>
 10134c0:	10000226 	beq	r2,zero,10134cc <virtqueue_kick+0x2c>
		vq_ring_notify(vq);
 10134c4:	e13fff17 	ldw	r4,-4(fp)
 10134c8:	1013e480 	call	1013e48 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
 10134cc:	e0bfff17 	ldw	r2,-4(fp)
 10134d0:	1000098d 	sth	zero,38(r2)

	VQUEUE_IDLE(vq);
}
 10134d4:	0001883a 	nop
 10134d8:	e037883a 	mov	sp,fp
 10134dc:	dfc00117 	ldw	ra,4(sp)
 10134e0:	df000017 	ldw	fp,0(sp)
 10134e4:	dec00204 	addi	sp,sp,8
 10134e8:	f800283a 	ret

010134ec <virtqueue_dump>:
 * virtqueue_dump Dumps important virtqueue fields , use for debugging purposes
 *
 * @param vq - Pointer to VirtIO queue control block
 */
void virtqueue_dump(struct virtqueue *vq)
{
 10134ec:	defff504 	addi	sp,sp,-44
 10134f0:	dfc00a15 	stw	ra,40(sp)
 10134f4:	df000915 	stw	fp,36(sp)
 10134f8:	df000904 	addi	fp,sp,36
 10134fc:	e13fff15 	stw	r4,-4(fp)
	if (!vq)
 1013500:	e0bfff17 	ldw	r2,-4(fp)
 1013504:	10003c26 	beq	r2,zero,10135f8 <virtqueue_dump+0x10c>
		return;

	metal_log(METAL_LOG_DEBUG,
 1013508:	008060f4 	movhi	r2,387
 101350c:	10bb7104 	addi	r2,r2,-4668
 1013510:	10800017 	ldw	r2,0(r2)
 1013514:	108001f0 	cmpltui	r2,r2,7
 1013518:	1000381e 	bne	r2,zero,10135fc <virtqueue_dump+0x110>
 101351c:	008060f4 	movhi	r2,387
 1013520:	10bb7104 	addi	r2,r2,-4668
 1013524:	10800117 	ldw	r2,4(r2)
 1013528:	10003426 	beq	r2,zero,10135fc <virtqueue_dump+0x110>
 101352c:	008060f4 	movhi	r2,387
 1013530:	10bb7104 	addi	r2,r2,-4668
 1013534:	10800117 	ldw	r2,4(r2)
 1013538:	e0ffff17 	ldw	r3,-4(fp)
 101353c:	1ac00117 	ldw	r11,4(r3)
 1013540:	e0ffff17 	ldw	r3,-4(fp)
 1013544:	18c0028b 	ldhu	r3,10(r3)
 1013548:	1b3fffcc 	andi	r12,r3,65535
 101354c:	e0ffff17 	ldw	r3,-4(fp)
 1013550:	18c0090b 	ldhu	r3,36(r3)
 1013554:	18ffffcc 	andi	r3,r3,65535
 1013558:	e13fff17 	ldw	r4,-4(fp)
 101355c:	2100098b 	ldhu	r4,38(r4)
 1013560:	213fffcc 	andi	r4,r4,65535
 1013564:	e17fff17 	ldw	r5,-4(fp)
 1013568:	29400b0b 	ldhu	r5,44(r5)
 101356c:	297fffcc 	andi	r5,r5,65535
 1013570:	e1bfff17 	ldw	r6,-4(fp)
 1013574:	31800717 	ldw	r6,28(r6)
 1013578:	3180008b 	ldhu	r6,2(r6)
 101357c:	31bfffcc 	andi	r6,r6,65535
 1013580:	e1ffff17 	ldw	r7,-4(fp)
 1013584:	39c00b8b 	ldhu	r7,46(r7)
 1013588:	39ffffcc 	andi	r7,r7,65535
 101358c:	e23fff17 	ldw	r8,-4(fp)
 1013590:	42000817 	ldw	r8,32(r8)
 1013594:	4200008b 	ldhu	r8,2(r8)
 1013598:	423fffcc 	andi	r8,r8,65535
 101359c:	e27fff17 	ldw	r9,-4(fp)
 10135a0:	4a400717 	ldw	r9,28(r9)
 10135a4:	4a40000b 	ldhu	r9,0(r9)
 10135a8:	4a7fffcc 	andi	r9,r9,65535
 10135ac:	e2bfff17 	ldw	r10,-4(fp)
 10135b0:	52800817 	ldw	r10,32(r10)
 10135b4:	5280000b 	ldhu	r10,0(r10)
 10135b8:	52bfffcc 	andi	r10,r10,65535
 10135bc:	da800715 	stw	r10,28(sp)
 10135c0:	da400615 	stw	r9,24(sp)
 10135c4:	da000515 	stw	r8,20(sp)
 10135c8:	d9c00415 	stw	r7,16(sp)
 10135cc:	d9800315 	stw	r6,12(sp)
 10135d0:	d9400215 	stw	r5,8(sp)
 10135d4:	d9000115 	stw	r4,4(sp)
 10135d8:	d8c00015 	stw	r3,0(sp)
 10135dc:	600f883a 	mov	r7,r12
 10135e0:	580d883a 	mov	r6,r11
 10135e4:	014040f4 	movhi	r5,259
 10135e8:	29683904 	addi	r5,r5,-24348
 10135ec:	010001c4 	movi	r4,7
 10135f0:	103ee83a 	callr	r2
 10135f4:	00000106 	br	10135fc <virtqueue_dump+0x110>
 * @param vq - Pointer to VirtIO queue control block
 */
void virtqueue_dump(struct virtqueue *vq)
{
	if (!vq)
		return;
 10135f8:	0001883a 	nop
		  vq->vq_name, vq->vq_nentries, vq->vq_free_cnt,
		  vq->vq_queued_cnt, vq->vq_desc_head_idx,
		  vq->vq_ring.avail->idx, vq->vq_used_cons_idx,
		  vq->vq_ring.used->idx, vq->vq_ring.avail->flags,
		  vq->vq_ring.used->flags);
}
 10135fc:	e037883a 	mov	sp,fp
 1013600:	dfc00117 	ldw	ra,4(sp)
 1013604:	df000017 	ldw	fp,0(sp)
 1013608:	dec00204 	addi	sp,sp,8
 101360c:	f800283a 	ret

01013610 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 1013610:	defffc04 	addi	sp,sp,-16
 1013614:	df000315 	stw	fp,12(sp)
 1013618:	df000304 	addi	fp,sp,12
 101361c:	e13fff15 	stw	r4,-4(fp)
	uint16_t head_idx = 0;
 1013620:	e03ffd0d 	sth	zero,-12(fp)
	uint16_t avail_idx = 0;
 1013624:	e03ffd8d 	sth	zero,-10(fp)
	uint32_t len = 0;
 1013628:	e03ffe15 	stw	zero,-8(fp)

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 101362c:	e0bfff17 	ldw	r2,-4(fp)
 1013630:	10c00c0b 	ldhu	r3,48(r2)
 1013634:	e0bfff17 	ldw	r2,-4(fp)
 1013638:	10800717 	ldw	r2,28(r2)
 101363c:	1080008b 	ldhu	r2,2(r2)
 1013640:	18ffffcc 	andi	r3,r3,65535
 1013644:	10bfffcc 	andi	r2,r2,65535
 1013648:	1880021e 	bne	r3,r2,1013654 <virtqueue_get_desc_size+0x44>
		return 0;
 101364c:	0005883a 	mov	r2,zero
 1013650:	00001806 	br	10136b4 <virtqueue_get_desc_size+0xa4>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 1013654:	e0bfff17 	ldw	r2,-4(fp)
 1013658:	10800c0b 	ldhu	r2,48(r2)
 101365c:	1007883a 	mov	r3,r2
 1013660:	e0bfff17 	ldw	r2,-4(fp)
 1013664:	1080028b 	ldhu	r2,10(r2)
 1013668:	10bfffc4 	addi	r2,r2,-1
 101366c:	1884703a 	and	r2,r3,r2
 1013670:	e0bffd0d 	sth	r2,-12(fp)
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 1013674:	e0bfff17 	ldw	r2,-4(fp)
 1013678:	10c00717 	ldw	r3,28(r2)
 101367c:	e0bffd0b 	ldhu	r2,-12(fp)
 1013680:	10800084 	addi	r2,r2,2
 1013684:	1085883a 	add	r2,r2,r2
 1013688:	1885883a 	add	r2,r3,r2
 101368c:	1080000b 	ldhu	r2,0(r2)
 1013690:	e0bffd8d 	sth	r2,-10(fp)
	len = vq->vq_ring.desc[avail_idx].len;
 1013694:	e0bfff17 	ldw	r2,-4(fp)
 1013698:	10c00617 	ldw	r3,24(r2)
 101369c:	e0bffd8b 	ldhu	r2,-10(fp)
 10136a0:	1004913a 	slli	r2,r2,4
 10136a4:	1885883a 	add	r2,r3,r2
 10136a8:	10800217 	ldw	r2,8(r2)
 10136ac:	e0bffe15 	stw	r2,-8(fp)

	VQUEUE_IDLE(vq);

	return len;
 10136b0:	e0bffe17 	ldw	r2,-8(fp)
}
 10136b4:	e037883a 	mov	sp,fp
 10136b8:	df000017 	ldw	fp,0(sp)
 10136bc:	dec00104 	addi	sp,sp,4
 10136c0:	f800283a 	ret

010136c4 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 10136c4:	defff404 	addi	sp,sp,-48
 10136c8:	dfc00b15 	stw	ra,44(sp)
 10136cc:	df000a15 	stw	fp,40(sp)
 10136d0:	dc400915 	stw	r17,36(sp)
 10136d4:	dc000815 	stw	r16,32(sp)
 10136d8:	df000a04 	addi	fp,sp,40
 10136dc:	e13ffa15 	stw	r4,-24(fp)
 10136e0:	e17ffb15 	stw	r5,-20(fp)
 10136e4:	3005883a 	mov	r2,r6
 10136e8:	e1fffd15 	stw	r7,-12(fp)
 10136ec:	e0bffc0d 	sth	r2,-16(fp)
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 10136f0:	e0c00217 	ldw	r3,8(fp)
 10136f4:	e0800317 	ldw	r2,12(fp)
 10136f8:	1885883a 	add	r2,r3,r2
 10136fc:	e0bff815 	stw	r2,-32(fp)

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 1013700:	e03ff615 	stw	zero,-40(fp)
 1013704:	e0bffc0b 	ldhu	r2,-16(fp)
 1013708:	e0bff70d 	sth	r2,-36(fp)
 101370c:	00003506 	br	10137e4 <vq_ring_add_buffer+0x120>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 1013710:	e0bff70b 	ldhu	r2,-36(fp)
 1013714:	1004913a 	slli	r2,r2,4
 1013718:	e0fffb17 	ldw	r3,-20(fp)
 101371c:	1885883a 	add	r2,r3,r2
 1013720:	e0bff915 	stw	r2,-28(fp)
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 1013724:	e0bff617 	ldw	r2,-40(fp)
 1013728:	100490fa 	slli	r2,r2,3
 101372c:	e0fffd17 	ldw	r3,-12(fp)
 1013730:	1885883a 	add	r2,r3,r2
 1013734:	10800017 	ldw	r2,0(r2)
 1013738:	100b883a 	mov	r5,r2
 101373c:	e13ffa17 	ldw	r4,-24(fp)
 1013740:	1012d240 	call	1012d24 <virtqueue_virt_to_phys>
 1013744:	1021883a 	mov	r16,r2
 1013748:	0023883a 	mov	r17,zero
 101374c:	e0bff917 	ldw	r2,-28(fp)
 1013750:	14000015 	stw	r16,0(r2)
 1013754:	14400115 	stw	r17,4(r2)
		dp->len = buf_list[i].len;
 1013758:	e0bff617 	ldw	r2,-40(fp)
 101375c:	100490fa 	slli	r2,r2,3
 1013760:	e0fffd17 	ldw	r3,-12(fp)
 1013764:	1885883a 	add	r2,r3,r2
 1013768:	10800117 	ldw	r2,4(r2)
 101376c:	1007883a 	mov	r3,r2
 1013770:	e0bff917 	ldw	r2,-28(fp)
 1013774:	10c00215 	stw	r3,8(r2)
		dp->flags = 0;
 1013778:	e0bff917 	ldw	r2,-28(fp)
 101377c:	1000030d 	sth	zero,12(r2)

		if (i < needed - 1)
 1013780:	e0bff817 	ldw	r2,-32(fp)
 1013784:	10bfffc4 	addi	r2,r2,-1
 1013788:	e0fff617 	ldw	r3,-40(fp)
 101378c:	1880060e 	bge	r3,r2,10137a8 <vq_ring_add_buffer+0xe4>
			dp->flags |= VRING_DESC_F_NEXT;
 1013790:	e0bff917 	ldw	r2,-28(fp)
 1013794:	1080030b 	ldhu	r2,12(r2)
 1013798:	10800054 	ori	r2,r2,1
 101379c:	1007883a 	mov	r3,r2
 10137a0:	e0bff917 	ldw	r2,-28(fp)
 10137a4:	10c0030d 	sth	r3,12(r2)

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 10137a8:	e0fff617 	ldw	r3,-40(fp)
 10137ac:	e0800217 	ldw	r2,8(fp)
 10137b0:	18800616 	blt	r3,r2,10137cc <vq_ring_add_buffer+0x108>
			dp->flags |= VRING_DESC_F_WRITE;
 10137b4:	e0bff917 	ldw	r2,-28(fp)
 10137b8:	1080030b 	ldhu	r2,12(r2)
 10137bc:	10800094 	ori	r2,r2,2
 10137c0:	1007883a 	mov	r3,r2
 10137c4:	e0bff917 	ldw	r2,-28(fp)
 10137c8:	10c0030d 	sth	r3,12(r2)

	(void)vq;

	needed = readable + writable;

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 10137cc:	e0bff617 	ldw	r2,-40(fp)
 10137d0:	10800044 	addi	r2,r2,1
 10137d4:	e0bff615 	stw	r2,-40(fp)
 10137d8:	e0bff917 	ldw	r2,-28(fp)
 10137dc:	1080038b 	ldhu	r2,14(r2)
 10137e0:	e0bff70d 	sth	r2,-36(fp)
 10137e4:	e0fff617 	ldw	r3,-40(fp)
 10137e8:	e0bff817 	ldw	r2,-32(fp)
 10137ec:	18bfc816 	blt	r3,r2,1013710 <__alt_data_end+0xff013710>
		 */
		if (i >= readable)
			dp->flags |= VRING_DESC_F_WRITE;
	}

	return idx;
 10137f0:	e0bff70b 	ldhu	r2,-36(fp)
}
 10137f4:	e6fffe04 	addi	sp,fp,-8
 10137f8:	dfc00317 	ldw	ra,12(sp)
 10137fc:	df000217 	ldw	fp,8(sp)
 1013800:	dc400117 	ldw	r17,4(sp)
 1013804:	dc000017 	ldw	r16,0(sp)
 1013808:	dec00404 	addi	sp,sp,16
 101380c:	f800283a 	ret

01013810 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 1013810:	defffb04 	addi	sp,sp,-20
 1013814:	df000415 	stw	fp,16(sp)
 1013818:	df000404 	addi	fp,sp,16
 101381c:	e13ffe15 	stw	r4,-8(fp)
 1013820:	2805883a 	mov	r2,r5
 1013824:	e0bfff0d 	sth	r2,-4(fp)
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 1013828:	e0bffe17 	ldw	r2,-8(fp)
 101382c:	10c00617 	ldw	r3,24(r2)
 1013830:	e0bfff0b 	ldhu	r2,-4(fp)
 1013834:	1004913a 	slli	r2,r2,4
 1013838:	1885883a 	add	r2,r3,r2
 101383c:	e0bffc15 	stw	r2,-16(fp)
	dxp = &vq->vq_descx[desc_idx];
 1013840:	e0bfff0b 	ldhu	r2,-4(fp)
 1013844:	100490fa 	slli	r2,r2,3
 1013848:	10800d04 	addi	r2,r2,52
 101384c:	e0fffe17 	ldw	r3,-8(fp)
 1013850:	1885883a 	add	r2,r3,r2
 1013854:	e0bffd15 	stw	r2,-12(fp)

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 1013858:	e0bffe17 	ldw	r2,-8(fp)
 101385c:	10c0090b 	ldhu	r3,36(r2)
 1013860:	e0bffd17 	ldw	r2,-12(fp)
 1013864:	1080010b 	ldhu	r2,4(r2)
 1013868:	1885883a 	add	r2,r3,r2
 101386c:	1007883a 	mov	r3,r2
 1013870:	e0bffe17 	ldw	r2,-8(fp)
 1013874:	10c0090d 	sth	r3,36(r2)
	dxp->ndescs--;
 1013878:	e0bffd17 	ldw	r2,-12(fp)
 101387c:	1080010b 	ldhu	r2,4(r2)
 1013880:	10bfffc4 	addi	r2,r2,-1
 1013884:	1007883a 	mov	r3,r2
 1013888:	e0bffd17 	ldw	r2,-12(fp)
 101388c:	10c0010d 	sth	r3,4(r2)

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 1013890:	e0bffc17 	ldw	r2,-16(fp)
 1013894:	1080030b 	ldhu	r2,12(r2)
 1013898:	10bfffcc 	andi	r2,r2,65535
 101389c:	1080010c 	andi	r2,r2,4
 10138a0:	1000141e 	bne	r2,zero,10138f4 <vq_ring_free_chain+0xe4>
		while (dp->flags & VRING_DESC_F_NEXT) {
 10138a4:	00000e06 	br	10138e0 <vq_ring_free_chain+0xd0>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 10138a8:	e0bffe17 	ldw	r2,-8(fp)
 10138ac:	10c00617 	ldw	r3,24(r2)
 10138b0:	e0bffc17 	ldw	r2,-16(fp)
 10138b4:	1080038b 	ldhu	r2,14(r2)
 10138b8:	10bfffcc 	andi	r2,r2,65535
 10138bc:	1004913a 	slli	r2,r2,4
 10138c0:	1885883a 	add	r2,r3,r2
 10138c4:	e0bffc15 	stw	r2,-16(fp)
			dxp->ndescs--;
 10138c8:	e0bffd17 	ldw	r2,-12(fp)
 10138cc:	1080010b 	ldhu	r2,4(r2)
 10138d0:	10bfffc4 	addi	r2,r2,-1
 10138d4:	1007883a 	mov	r3,r2
 10138d8:	e0bffd17 	ldw	r2,-12(fp)
 10138dc:	10c0010d 	sth	r3,4(r2)

	vq->vq_free_cnt += dxp->ndescs;
	dxp->ndescs--;

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
		while (dp->flags & VRING_DESC_F_NEXT) {
 10138e0:	e0bffc17 	ldw	r2,-16(fp)
 10138e4:	1080030b 	ldhu	r2,12(r2)
 10138e8:	10bfffcc 	andi	r2,r2,65535
 10138ec:	1080004c 	andi	r2,r2,1
 10138f0:	103fed1e 	bne	r2,zero,10138a8 <__alt_data_end+0xff0138a8>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 10138f4:	e0bffe17 	ldw	r2,-8(fp)
 10138f8:	10c00b0b 	ldhu	r3,44(r2)
 10138fc:	e0bffc17 	ldw	r2,-16(fp)
 1013900:	10c0038d 	sth	r3,14(r2)
	vq->vq_desc_head_idx = desc_idx;
 1013904:	e0bffe17 	ldw	r2,-8(fp)
 1013908:	e0ffff0b 	ldhu	r3,-4(fp)
 101390c:	10c00b0d 	sth	r3,44(r2)
}
 1013910:	0001883a 	nop
 1013914:	e037883a 	mov	sp,fp
 1013918:	df000017 	ldw	fp,0(sp)
 101391c:	dec00104 	addi	sp,sp,4
 1013920:	f800283a 	ret

01013924 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 1013924:	defff804 	addi	sp,sp,-32
 1013928:	dfc00715 	stw	ra,28(sp)
 101392c:	df000615 	stw	fp,24(sp)
 1013930:	df000604 	addi	fp,sp,24
 1013934:	e13ffd15 	stw	r4,-12(fp)
 1013938:	e17ffe15 	stw	r5,-8(fp)
 101393c:	e1bfff15 	stw	r6,-4(fp)
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 1013940:	e0bffd17 	ldw	r2,-12(fp)
 1013944:	1080028b 	ldhu	r2,10(r2)
 1013948:	10bfffcc 	andi	r2,r2,65535
 101394c:	e0bffb15 	stw	r2,-20(fp)
	vr = &vq->vq_ring;
 1013950:	e0bffd17 	ldw	r2,-12(fp)
 1013954:	10800504 	addi	r2,r2,20
 1013958:	e0bffc15 	stw	r2,-16(fp)

	vring_init(vr, size, ring_mem, alignment);
 101395c:	e0bffb17 	ldw	r2,-20(fp)
 1013960:	e0ffff17 	ldw	r3,-4(fp)
 1013964:	180f883a 	mov	r7,r3
 1013968:	e1bffe17 	ldw	r6,-8(fp)
 101396c:	100b883a 	mov	r5,r2
 1013970:	e13ffc17 	ldw	r4,-16(fp)
 1013974:	10128cc0 	call	10128cc <vring_init>

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1013978:	e0bffd17 	ldw	r2,-12(fp)
 101397c:	10800017 	ldw	r2,0(r2)
 1013980:	10800517 	ldw	r2,20(r2)
 1013984:	1000181e 	bne	r2,zero,10139e8 <vq_ring_init+0xc4>
		for (i = 0; i < size - 1; i++)
 1013988:	e03ffa15 	stw	zero,-24(fp)
 101398c:	00000b06 	br	10139bc <vq_ring_init+0x98>
			vr->desc[i].next = i + 1;
 1013990:	e0bffc17 	ldw	r2,-16(fp)
 1013994:	10c00117 	ldw	r3,4(r2)
 1013998:	e0bffa17 	ldw	r2,-24(fp)
 101399c:	1004913a 	slli	r2,r2,4
 10139a0:	1885883a 	add	r2,r3,r2
 10139a4:	e0fffa17 	ldw	r3,-24(fp)
 10139a8:	18c00044 	addi	r3,r3,1
 10139ac:	10c0038d 	sth	r3,14(r2)

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
		for (i = 0; i < size - 1; i++)
 10139b0:	e0bffa17 	ldw	r2,-24(fp)
 10139b4:	10800044 	addi	r2,r2,1
 10139b8:	e0bffa15 	stw	r2,-24(fp)
 10139bc:	e0bffb17 	ldw	r2,-20(fp)
 10139c0:	10bfffc4 	addi	r2,r2,-1
 10139c4:	e0fffa17 	ldw	r3,-24(fp)
 10139c8:	18bff116 	blt	r3,r2,1013990 <__alt_data_end+0xff013990>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 10139cc:	e0bffc17 	ldw	r2,-16(fp)
 10139d0:	10c00117 	ldw	r3,4(r2)
 10139d4:	e0bffa17 	ldw	r2,-24(fp)
 10139d8:	1004913a 	slli	r2,r2,4
 10139dc:	1885883a 	add	r2,r3,r2
 10139e0:	00e00004 	movi	r3,-32768
 10139e4:	10c0038d 	sth	r3,14(r2)
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
 10139e8:	0001883a 	nop
 10139ec:	e037883a 	mov	sp,fp
 10139f0:	dfc00117 	ldw	ra,4(sp)
 10139f4:	df000017 	ldw	fp,0(sp)
 10139f8:	dec00204 	addi	sp,sp,8
 10139fc:	f800283a 	ret

01013a00 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 1013a00:	defffc04 	addi	sp,sp,-16
 1013a04:	df000315 	stw	fp,12(sp)
 1013a08:	df000304 	addi	fp,sp,12
 1013a0c:	e13ffe15 	stw	r4,-8(fp)
 1013a10:	2805883a 	mov	r2,r5
 1013a14:	e0bfff0d 	sth	r2,-4(fp)
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 1013a18:	e0bffe17 	ldw	r2,-8(fp)
 1013a1c:	10800717 	ldw	r2,28(r2)
 1013a20:	1080008b 	ldhu	r2,2(r2)
 1013a24:	1007883a 	mov	r3,r2
 1013a28:	e0bffe17 	ldw	r2,-8(fp)
 1013a2c:	1080028b 	ldhu	r2,10(r2)
 1013a30:	10bfffc4 	addi	r2,r2,-1
 1013a34:	1884703a 	and	r2,r3,r2
 1013a38:	e0bffd0d 	sth	r2,-12(fp)
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 1013a3c:	e0bffe17 	ldw	r2,-8(fp)
 1013a40:	10c00717 	ldw	r3,28(r2)
 1013a44:	e0bffd0b 	ldhu	r2,-12(fp)
 1013a48:	10800084 	addi	r2,r2,2
 1013a4c:	1085883a 	add	r2,r2,r2
 1013a50:	1885883a 	add	r2,r3,r2
 1013a54:	e0ffff0b 	ldhu	r3,-4(fp)
 1013a58:	10c0000d 	sth	r3,0(r2)

	atomic_thread_fence(memory_order_seq_cst);
 1013a5c:	0001b03a 	sync

	vq->vq_ring.avail->idx++;
 1013a60:	e0bffe17 	ldw	r2,-8(fp)
 1013a64:	10800717 	ldw	r2,28(r2)
 1013a68:	10c0008b 	ldhu	r3,2(r2)
 1013a6c:	18c00044 	addi	r3,r3,1
 1013a70:	10c0008d 	sth	r3,2(r2)

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 1013a74:	e0bffe17 	ldw	r2,-8(fp)
 1013a78:	1080098b 	ldhu	r2,38(r2)
 1013a7c:	10800044 	addi	r2,r2,1
 1013a80:	1007883a 	mov	r3,r2
 1013a84:	e0bffe17 	ldw	r2,-8(fp)
 1013a88:	10c0098d 	sth	r3,38(r2)
}
 1013a8c:	0001883a 	nop
 1013a90:	e037883a 	mov	sp,fp
 1013a94:	df000017 	ldw	fp,0(sp)
 1013a98:	dec00104 	addi	sp,sp,4
 1013a9c:	f800283a 	ret

01013aa0 <vq_ring_enable_interrupt>:
 *
 * vq_ring_enable_interrupt
 *
 */
static int vq_ring_enable_interrupt(struct virtqueue *vq, uint16_t ndesc)
{
 1013aa0:	defffc04 	addi	sp,sp,-16
 1013aa4:	dfc00315 	stw	ra,12(sp)
 1013aa8:	df000215 	stw	fp,8(sp)
 1013aac:	df000204 	addi	fp,sp,8
 1013ab0:	e13ffe15 	stw	r4,-8(fp)
 1013ab4:	2805883a 	mov	r2,r5
 1013ab8:	e0bfff0d 	sth	r2,-4(fp)
	/*
	 * Enable interrupts, making sure we get the latest index of
	 * what's already been consumed.
	 */
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1013abc:	e0bffe17 	ldw	r2,-8(fp)
 1013ac0:	11000017 	ldw	r4,0(r2)
 1013ac4:	20800317 	ldw	r2,12(r4)
 1013ac8:	20c00417 	ldw	r3,16(r4)
 1013acc:	1188002c 	andhi	r6,r2,8192
 1013ad0:	180e703a 	and	r7,r3,zero
 1013ad4:	3005883a 	mov	r2,r6
 1013ad8:	11c4b03a 	or	r2,r2,r7
 1013adc:	10002226 	beq	r2,zero,1013b68 <vq_ring_enable_interrupt+0xc8>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013ae0:	e0bffe17 	ldw	r2,-8(fp)
 1013ae4:	10800017 	ldw	r2,0(r2)
 1013ae8:	10800517 	ldw	r2,20(r2)
 1013aec:	10000c1e 	bne	r2,zero,1013b20 <vq_ring_enable_interrupt+0x80>
			vring_used_event(&vq->vq_ring) = vq->vq_used_cons_idx + ndesc;
 1013af0:	e0bffe17 	ldw	r2,-8(fp)
 1013af4:	10c00717 	ldw	r3,28(r2)
 1013af8:	e0bffe17 	ldw	r2,-8(fp)
 1013afc:	10800517 	ldw	r2,20(r2)
 1013b00:	e13ffe17 	ldw	r4,-8(fp)
 1013b04:	21400b8b 	ldhu	r5,46(r4)
 1013b08:	e13fff0b 	ldhu	r4,-4(fp)
 1013b0c:	2909883a 	add	r4,r5,r4
 1013b10:	10800084 	addi	r2,r2,2
 1013b14:	1085883a 	add	r2,r2,r2
 1013b18:	1885883a 	add	r2,r3,r2
 1013b1c:	1100000d 	sth	r4,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1013b20:	e0bffe17 	ldw	r2,-8(fp)
 1013b24:	10800017 	ldw	r2,0(r2)
 1013b28:	10800517 	ldw	r2,20(r2)
 1013b2c:	10800058 	cmpnei	r2,r2,1
 1013b30:	1000261e 	bne	r2,zero,1013bcc <vq_ring_enable_interrupt+0x12c>
			vring_avail_event(&vq->vq_ring) = vq->vq_available_idx + ndesc;
 1013b34:	e0bffe17 	ldw	r2,-8(fp)
 1013b38:	10c00817 	ldw	r3,32(r2)
 1013b3c:	e0bffe17 	ldw	r2,-8(fp)
 1013b40:	10800517 	ldw	r2,20(r2)
 1013b44:	e13ffe17 	ldw	r4,-8(fp)
 1013b48:	21400c0b 	ldhu	r5,48(r4)
 1013b4c:	e13fff0b 	ldhu	r4,-4(fp)
 1013b50:	2909883a 	add	r4,r5,r4
 1013b54:	100490fa 	slli	r2,r2,3
 1013b58:	1885883a 	add	r2,r3,r2
 1013b5c:	10800104 	addi	r2,r2,4
 1013b60:	1100000d 	sth	r4,0(r2)
 1013b64:	00001906 	br	1013bcc <vq_ring_enable_interrupt+0x12c>
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013b68:	e0bffe17 	ldw	r2,-8(fp)
 1013b6c:	10800017 	ldw	r2,0(r2)
 1013b70:	10800517 	ldw	r2,20(r2)
 1013b74:	1000081e 	bne	r2,zero,1013b98 <vq_ring_enable_interrupt+0xf8>
			vq->vq_ring.avail->flags &= ~VRING_AVAIL_F_NO_INTERRUPT;
 1013b78:	e0bffe17 	ldw	r2,-8(fp)
 1013b7c:	10800717 	ldw	r2,28(r2)
 1013b80:	e0fffe17 	ldw	r3,-8(fp)
 1013b84:	18c00717 	ldw	r3,28(r3)
 1013b88:	1900000b 	ldhu	r4,0(r3)
 1013b8c:	00ffff84 	movi	r3,-2
 1013b90:	20c6703a 	and	r3,r4,r3
 1013b94:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1013b98:	e0bffe17 	ldw	r2,-8(fp)
 1013b9c:	10800017 	ldw	r2,0(r2)
 1013ba0:	10800517 	ldw	r2,20(r2)
 1013ba4:	10800058 	cmpnei	r2,r2,1
 1013ba8:	1000081e 	bne	r2,zero,1013bcc <vq_ring_enable_interrupt+0x12c>
			vq->vq_ring.used->flags &= ~VRING_USED_F_NO_NOTIFY;
 1013bac:	e0bffe17 	ldw	r2,-8(fp)
 1013bb0:	10800817 	ldw	r2,32(r2)
 1013bb4:	e0fffe17 	ldw	r3,-8(fp)
 1013bb8:	18c00817 	ldw	r3,32(r3)
 1013bbc:	1900000b 	ldhu	r4,0(r3)
 1013bc0:	00ffff84 	movi	r3,-2
 1013bc4:	20c6703a 	and	r3,r4,r3
 1013bc8:	10c0000d 	sth	r3,0(r2)
#endif /*VIRTIO_MASTER_ONLY*/
	}

	atomic_thread_fence(memory_order_seq_cst);
 1013bcc:	0001b03a 	sync
	 * Enough items may have already been consumed to meet our threshold
	 * since we last checked. Let our caller know so it processes the new
	 * entries.
	 */
#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1013bd0:	e0bffe17 	ldw	r2,-8(fp)
 1013bd4:	10800017 	ldw	r2,0(r2)
 1013bd8:	10800517 	ldw	r2,20(r2)
 1013bdc:	1000071e 	bne	r2,zero,1013bfc <vq_ring_enable_interrupt+0x15c>
		if (virtqueue_nused(vq) > ndesc) {
 1013be0:	e13ffe17 	ldw	r4,-8(fp)
 1013be4:	1013e900 	call	1013e90 <virtqueue_nused>
 1013be8:	1007883a 	mov	r3,r2
 1013bec:	e0bfff0b 	ldhu	r2,-4(fp)
 1013bf0:	10c0020e 	bge	r2,r3,1013bfc <vq_ring_enable_interrupt+0x15c>
			return 1;
 1013bf4:	00800044 	movi	r2,1
 1013bf8:	00000d06 	br	1013c30 <vq_ring_enable_interrupt+0x190>
		}
	}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 1013bfc:	e0bffe17 	ldw	r2,-8(fp)
 1013c00:	10800017 	ldw	r2,0(r2)
 1013c04:	10800517 	ldw	r2,20(r2)
 1013c08:	10800058 	cmpnei	r2,r2,1
 1013c0c:	1000071e 	bne	r2,zero,1013c2c <vq_ring_enable_interrupt+0x18c>
		if (virtqueue_navail(vq) > ndesc) {
 1013c10:	e13ffe17 	ldw	r4,-8(fp)
 1013c14:	1013ed80 	call	1013ed8 <virtqueue_navail>
 1013c18:	1007883a 	mov	r3,r2
 1013c1c:	e0bfff0b 	ldhu	r2,-4(fp)
 1013c20:	10c0020e 	bge	r2,r3,1013c2c <vq_ring_enable_interrupt+0x18c>
			return 1;
 1013c24:	00800044 	movi	r2,1
 1013c28:	00000106 	br	1013c30 <vq_ring_enable_interrupt+0x190>
		}
	}
#endif /*VIRTIO_MASTER_ONLY*/

	return 0;
 1013c2c:	0005883a 	mov	r2,zero
}
 1013c30:	e037883a 	mov	sp,fp
 1013c34:	dfc00117 	ldw	ra,4(sp)
 1013c38:	df000017 	ldw	fp,0(sp)
 1013c3c:	dec00204 	addi	sp,sp,8
 1013c40:	f800283a 	ret

01013c44 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 1013c44:	defffd04 	addi	sp,sp,-12
 1013c48:	dfc00215 	stw	ra,8(sp)
 1013c4c:	df000115 	stw	fp,4(sp)
 1013c50:	df000104 	addi	fp,sp,4
 1013c54:	e13fff15 	stw	r4,-4(fp)
	atomic_thread_fence(memory_order_seq_cst);
 1013c58:	0001b03a 	sync
	if (vq->callback)
 1013c5c:	e0bfff17 	ldw	r2,-4(fp)
 1013c60:	10800317 	ldw	r2,12(r2)
 1013c64:	10000426 	beq	r2,zero,1013c78 <virtqueue_notification+0x34>
		vq->callback(vq);
 1013c68:	e0bfff17 	ldw	r2,-4(fp)
 1013c6c:	10800317 	ldw	r2,12(r2)
 1013c70:	e13fff17 	ldw	r4,-4(fp)
 1013c74:	103ee83a 	callr	r2
}
 1013c78:	0001883a 	nop
 1013c7c:	e037883a 	mov	sp,fp
 1013c80:	dfc00117 	ldw	ra,4(sp)
 1013c84:	df000017 	ldw	fp,0(sp)
 1013c88:	dec00204 	addi	sp,sp,8
 1013c8c:	f800283a 	ret

01013c90 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
 1013c90:	defffb04 	addi	sp,sp,-20
 1013c94:	dfc00415 	stw	ra,16(sp)
 1013c98:	df000315 	stw	fp,12(sp)
 1013c9c:	df000304 	addi	fp,sp,12
 1013ca0:	e13fff15 	stw	r4,-4(fp)
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
 1013ca4:	e0bfff17 	ldw	r2,-4(fp)
 1013ca8:	11000017 	ldw	r4,0(r2)
 1013cac:	20800317 	ldw	r2,12(r4)
 1013cb0:	20c00417 	ldw	r3,16(r4)
 1013cb4:	1148002c 	andhi	r5,r2,8192
 1013cb8:	180c703a 	and	r6,r3,zero
 1013cbc:	2805883a 	mov	r2,r5
 1013cc0:	1184b03a 	or	r2,r2,r6
 1013cc4:	10004126 	beq	r2,zero,1013dcc <vq_ring_must_notify+0x13c>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
 1013cc8:	e0bfff17 	ldw	r2,-4(fp)
 1013ccc:	10800017 	ldw	r2,0(r2)
 1013cd0:	10800517 	ldw	r2,20(r2)
 1013cd4:	10001c1e 	bne	r2,zero,1013d48 <vq_ring_must_notify+0xb8>
			new_idx = vq->vq_ring.avail->idx;
 1013cd8:	e0bfff17 	ldw	r2,-4(fp)
 1013cdc:	10800717 	ldw	r2,28(r2)
 1013ce0:	1080008b 	ldhu	r2,2(r2)
 1013ce4:	e0bffd0d 	sth	r2,-12(fp)
			prev_idx = new_idx - vq->vq_queued_cnt;
 1013ce8:	e0bfff17 	ldw	r2,-4(fp)
 1013cec:	1080098b 	ldhu	r2,38(r2)
 1013cf0:	e0fffd0b 	ldhu	r3,-12(fp)
 1013cf4:	1885c83a 	sub	r2,r3,r2
 1013cf8:	e0bffd8d 	sth	r2,-10(fp)
			event_idx = vring_avail_event(&vq->vq_ring);
 1013cfc:	e0bfff17 	ldw	r2,-4(fp)
 1013d00:	10c00817 	ldw	r3,32(r2)
 1013d04:	e0bfff17 	ldw	r2,-4(fp)
 1013d08:	10800517 	ldw	r2,20(r2)
 1013d0c:	100490fa 	slli	r2,r2,3
 1013d10:	1885883a 	add	r2,r3,r2
 1013d14:	10800104 	addi	r2,r2,4
 1013d18:	1080000b 	ldhu	r2,0(r2)
 1013d1c:	e0bffe0d 	sth	r2,-8(fp)
			return vring_need_event(event_idx, new_idx, prev_idx) != 0;
 1013d20:	e0bffe0b 	ldhu	r2,-8(fp)
 1013d24:	e0fffd0b 	ldhu	r3,-12(fp)
 1013d28:	e13ffd8b 	ldhu	r4,-10(fp)
 1013d2c:	200d883a 	mov	r6,r4
 1013d30:	180b883a 	mov	r5,r3
 1013d34:	1009883a 	mov	r4,r2
 1013d38:	101296c0 	call	101296c <vring_need_event>
 1013d3c:	1004c03a 	cmpne	r2,r2,zero
 1013d40:	10803fcc 	andi	r2,r2,255
 1013d44:	00003b06 	br	1013e34 <vq_ring_must_notify+0x1a4>
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
 1013d48:	e0bfff17 	ldw	r2,-4(fp)
 1013d4c:	10800017 	ldw	r2,0(r2)
 1013d50:	10800517 	ldw	r2,20(r2)
 1013d54:	10800058 	cmpnei	r2,r2,1
 1013d58:	1000351e 	bne	r2,zero,1013e30 <vq_ring_must_notify+0x1a0>
			new_idx = vq->vq_ring.used->idx;
 1013d5c:	e0bfff17 	ldw	r2,-4(fp)
 1013d60:	10800817 	ldw	r2,32(r2)
 1013d64:	1080008b 	ldhu	r2,2(r2)
 1013d68:	e0bffd0d 	sth	r2,-12(fp)
			prev_idx = new_idx - vq->vq_queued_cnt;
 1013d6c:	e0bfff17 	ldw	r2,-4(fp)
 1013d70:	1080098b 	ldhu	r2,38(r2)
 1013d74:	e0fffd0b 	ldhu	r3,-12(fp)
 1013d78:	1885c83a 	sub	r2,r3,r2
 1013d7c:	e0bffd8d 	sth	r2,-10(fp)
			event_idx = vring_used_event(&vq->vq_ring);
 1013d80:	e0bfff17 	ldw	r2,-4(fp)
 1013d84:	10c00717 	ldw	r3,28(r2)
 1013d88:	e0bfff17 	ldw	r2,-4(fp)
 1013d8c:	10800517 	ldw	r2,20(r2)
 1013d90:	10800084 	addi	r2,r2,2
 1013d94:	1085883a 	add	r2,r2,r2
 1013d98:	1885883a 	add	r2,r3,r2
 1013d9c:	1080000b 	ldhu	r2,0(r2)
 1013da0:	e0bffe0d 	sth	r2,-8(fp)
			return vring_need_event(event_idx, new_idx, prev_idx) != 0;
 1013da4:	e0bffe0b 	ldhu	r2,-8(fp)
 1013da8:	e0fffd0b 	ldhu	r3,-12(fp)
 1013dac:	e13ffd8b 	ldhu	r4,-10(fp)
 1013db0:	200d883a 	mov	r6,r4
 1013db4:	180b883a 	mov	r5,r3
 1013db8:	1009883a 	mov	r4,r2
 1013dbc:	101296c0 	call	101296c <vring_need_event>
 1013dc0:	1004c03a 	cmpne	r2,r2,zero
 1013dc4:	10803fcc 	andi	r2,r2,255
 1013dc8:	00001a06 	br	1013e34 <vq_ring_must_notify+0x1a4>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
 1013dcc:	e0bfff17 	ldw	r2,-4(fp)
 1013dd0:	10800017 	ldw	r2,0(r2)
 1013dd4:	10800517 	ldw	r2,20(r2)
 1013dd8:	1000081e 	bne	r2,zero,1013dfc <vq_ring_must_notify+0x16c>
			return (vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0;
 1013ddc:	e0bfff17 	ldw	r2,-4(fp)
 1013de0:	10800817 	ldw	r2,32(r2)
 1013de4:	1080000b 	ldhu	r2,0(r2)
 1013de8:	10bfffcc 	andi	r2,r2,65535
 1013dec:	1080004c 	andi	r2,r2,1
 1013df0:	1005003a 	cmpeq	r2,r2,zero
 1013df4:	10803fcc 	andi	r2,r2,255
 1013df8:	00000e06 	br	1013e34 <vq_ring_must_notify+0x1a4>
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
 1013dfc:	e0bfff17 	ldw	r2,-4(fp)
 1013e00:	10800017 	ldw	r2,0(r2)
 1013e04:	10800517 	ldw	r2,20(r2)
 1013e08:	10800058 	cmpnei	r2,r2,1
 1013e0c:	1000081e 	bne	r2,zero,1013e30 <vq_ring_must_notify+0x1a0>
			return (vq->vq_ring.avail->flags & VRING_AVAIL_F_NO_INTERRUPT) == 0;
 1013e10:	e0bfff17 	ldw	r2,-4(fp)
 1013e14:	10800717 	ldw	r2,28(r2)
 1013e18:	1080000b 	ldhu	r2,0(r2)
 1013e1c:	10bfffcc 	andi	r2,r2,65535
 1013e20:	1080004c 	andi	r2,r2,1
 1013e24:	1005003a 	cmpeq	r2,r2,zero
 1013e28:	10803fcc 	andi	r2,r2,255
 1013e2c:	00000106 	br	1013e34 <vq_ring_must_notify+0x1a4>
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
 1013e30:	0005883a 	mov	r2,zero
}
 1013e34:	e037883a 	mov	sp,fp
 1013e38:	dfc00117 	ldw	ra,4(sp)
 1013e3c:	df000017 	ldw	fp,0(sp)
 1013e40:	dec00204 	addi	sp,sp,8
 1013e44:	f800283a 	ret

01013e48 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
 1013e48:	defffd04 	addi	sp,sp,-12
 1013e4c:	dfc00215 	stw	ra,8(sp)
 1013e50:	df000115 	stw	fp,4(sp)
 1013e54:	df000104 	addi	fp,sp,4
 1013e58:	e13fff15 	stw	r4,-4(fp)
	if (vq->notify)
 1013e5c:	e0bfff17 	ldw	r2,-4(fp)
 1013e60:	10800417 	ldw	r2,16(r2)
 1013e64:	10000426 	beq	r2,zero,1013e78 <vq_ring_notify+0x30>
		vq->notify(vq);
 1013e68:	e0bfff17 	ldw	r2,-4(fp)
 1013e6c:	10800417 	ldw	r2,16(r2)
 1013e70:	e13fff17 	ldw	r4,-4(fp)
 1013e74:	103ee83a 	callr	r2
}
 1013e78:	0001883a 	nop
 1013e7c:	e037883a 	mov	sp,fp
 1013e80:	dfc00117 	ldw	ra,4(sp)
 1013e84:	df000017 	ldw	fp,0(sp)
 1013e88:	dec00204 	addi	sp,sp,8
 1013e8c:	f800283a 	ret

01013e90 <virtqueue_nused>:
 * virtqueue_nused
 *
 */
#ifndef VIRTIO_SLAVE_ONLY
static int virtqueue_nused(struct virtqueue *vq)
{
 1013e90:	defffd04 	addi	sp,sp,-12
 1013e94:	df000215 	stw	fp,8(sp)
 1013e98:	df000204 	addi	fp,sp,8
 1013e9c:	e13fff15 	stw	r4,-4(fp)
	uint16_t used_idx, nused;

	used_idx = vq->vq_ring.used->idx;
 1013ea0:	e0bfff17 	ldw	r2,-4(fp)
 1013ea4:	10800817 	ldw	r2,32(r2)
 1013ea8:	1080008b 	ldhu	r2,2(r2)
 1013eac:	e0bffe0d 	sth	r2,-8(fp)

	nused = (uint16_t)(used_idx - vq->vq_used_cons_idx);
 1013eb0:	e0bfff17 	ldw	r2,-4(fp)
 1013eb4:	10800b8b 	ldhu	r2,46(r2)
 1013eb8:	e0fffe0b 	ldhu	r3,-8(fp)
 1013ebc:	1885c83a 	sub	r2,r3,r2
 1013ec0:	e0bffe8d 	sth	r2,-6(fp)
	VQASSERT(vq, nused <= vq->vq_nentries, "used more than available");

	return nused;
 1013ec4:	e0bffe8b 	ldhu	r2,-6(fp)
}
 1013ec8:	e037883a 	mov	sp,fp
 1013ecc:	df000017 	ldw	fp,0(sp)
 1013ed0:	dec00104 	addi	sp,sp,4
 1013ed4:	f800283a 	ret

01013ed8 <virtqueue_navail>:
 * virtqueue_navail
 *
 */
#ifndef VIRTIO_MASTER_ONLY
static int virtqueue_navail(struct virtqueue *vq)
{
 1013ed8:	defffd04 	addi	sp,sp,-12
 1013edc:	df000215 	stw	fp,8(sp)
 1013ee0:	df000204 	addi	fp,sp,8
 1013ee4:	e13fff15 	stw	r4,-4(fp)
	uint16_t avail_idx, navail;

	avail_idx = vq->vq_ring.avail->idx;
 1013ee8:	e0bfff17 	ldw	r2,-4(fp)
 1013eec:	10800717 	ldw	r2,28(r2)
 1013ef0:	1080008b 	ldhu	r2,2(r2)
 1013ef4:	e0bffe0d 	sth	r2,-8(fp)

	navail = (uint16_t)(avail_idx - vq->vq_available_idx);
 1013ef8:	e0bfff17 	ldw	r2,-4(fp)
 1013efc:	10800c0b 	ldhu	r2,48(r2)
 1013f00:	e0fffe0b 	ldhu	r3,-8(fp)
 1013f04:	1885c83a 	sub	r2,r3,r2
 1013f08:	e0bffe8d 	sth	r2,-6(fp)
	VQASSERT(vq, navail <= vq->vq_nentries, "avail more than available");

	return navail;
 1013f0c:	e0bffe8b 	ldhu	r2,-6(fp)
}
 1013f10:	e037883a 	mov	sp,fp
 1013f14:	df000017 	ldw	fp,0(sp)
 1013f18:	dec00104 	addi	sp,sp,4
 1013f1c:	f800283a 	ret

01013f20 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1013f20:	defffd04 	addi	sp,sp,-12
 1013f24:	df000215 	stw	fp,8(sp)
 1013f28:	df000204 	addi	fp,sp,8
 1013f2c:	e13ffe15 	stw	r4,-8(fp)
 1013f30:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1013f34:	e0bffe17 	ldw	r2,-8(fp)
 1013f38:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1013f3c:	10bfffe0 	cmpeqi	r2,r2,-1
 1013f40:	1000091e 	bne	r2,zero,1013f68 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1013f44:	e0bffe17 	ldw	r2,-8(fp)
 1013f48:	10800217 	ldw	r2,8(r2)
 1013f4c:	e0ffff17 	ldw	r3,-4(fp)
 1013f50:	1880052e 	bgeu	r3,r2,1013f68 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1013f54:	e0bffe17 	ldw	r2,-8(fp)
 1013f58:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1013f5c:	e0bfff17 	ldw	r2,-4(fp)
 1013f60:	1885883a 	add	r2,r3,r2
 1013f64:	00000106 	br	1013f6c <metal_io_virt+0x4c>
 1013f68:	0005883a 	mov	r2,zero
}
 1013f6c:	e037883a 	mov	sp,fp
 1013f70:	df000017 	ldw	fp,0(sp)
 1013f74:	dec00104 	addi	sp,sp,4
 1013f78:	f800283a 	ret

01013f7c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 1013f7c:	defffb04 	addi	sp,sp,-20
 1013f80:	dfc00415 	stw	ra,16(sp)
 1013f84:	df000315 	stw	fp,12(sp)
 1013f88:	df000304 	addi	fp,sp,12
 1013f8c:	e13ffe15 	stw	r4,-8(fp)
 1013f90:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 1013f94:	e0bffe17 	ldw	r2,-8(fp)
 1013f98:	10800c17 	ldw	r2,48(r2)
 1013f9c:	1000211e 	bne	r2,zero,1014024 <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 1013fa0:	e0bffe17 	ldw	r2,-8(fp)
 1013fa4:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 1013fa8:	10800828 	cmpgeui	r2,r2,32
 1013fac:	1000051e 	bne	r2,zero,1013fc4 <metal_io_phys+0x48>
 1013fb0:	e0bffe17 	ldw	r2,-8(fp)
 1013fb4:	10800317 	ldw	r2,12(r2)
 1013fb8:	e0ffff17 	ldw	r3,-4(fp)
 1013fbc:	1884d83a 	srl	r2,r3,r2
 1013fc0:	00000106 	br	1013fc8 <metal_io_phys+0x4c>
 1013fc4:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 1013fc8:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1013fcc:	e0bffe17 	ldw	r2,-8(fp)
 1013fd0:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1013fd4:	10001126 	beq	r2,zero,101401c <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1013fd8:	e0bffe17 	ldw	r2,-8(fp)
 1013fdc:	10800217 	ldw	r2,8(r2)
 1013fe0:	e0ffff17 	ldw	r3,-4(fp)
 1013fe4:	18800d2e 	bgeu	r3,r2,101401c <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 1013fe8:	e0bffe17 	ldw	r2,-8(fp)
 1013fec:	10c00117 	ldw	r3,4(r2)
 1013ff0:	e0bffd17 	ldw	r2,-12(fp)
 1013ff4:	1085883a 	add	r2,r2,r2
 1013ff8:	1085883a 	add	r2,r2,r2
 1013ffc:	1885883a 	add	r2,r3,r2
 1014000:	10c00017 	ldw	r3,0(r2)
 1014004:	e0bffe17 	ldw	r2,-8(fp)
 1014008:	11000417 	ldw	r4,16(r2)
 101400c:	e0bfff17 	ldw	r2,-4(fp)
 1014010:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 1014014:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014018:	00000706 	br	1014038 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 101401c:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014020:	00000506 	br	1014038 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 1014024:	e0bffe17 	ldw	r2,-8(fp)
 1014028:	10800c17 	ldw	r2,48(r2)
 101402c:	e17fff17 	ldw	r5,-4(fp)
 1014030:	e13ffe17 	ldw	r4,-8(fp)
 1014034:	103ee83a 	callr	r2
}
 1014038:	e037883a 	mov	sp,fp
 101403c:	dfc00117 	ldw	ra,4(sp)
 1014040:	df000017 	ldw	fp,0(sp)
 1014044:	dec00204 	addi	sp,sp,8
 1014048:	f800283a 	ret

0101404c <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 101404c:	defffb04 	addi	sp,sp,-20
 1014050:	dfc00415 	stw	ra,16(sp)
 1014054:	df000315 	stw	fp,12(sp)
 1014058:	df000304 	addi	fp,sp,12
 101405c:	e13ffe15 	stw	r4,-8(fp)
 1014060:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 1014064:	e0bffe17 	ldw	r2,-8(fp)
 1014068:	10800d17 	ldw	r2,52(r2)
 101406c:	1000231e 	bne	r2,zero,10140fc <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 1014070:	e0bffe17 	ldw	r2,-8(fp)
 1014074:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 1014078:	10bfffd8 	cmpnei	r2,r2,-1
 101407c:	1000061e 	bne	r2,zero,1014098 <metal_io_phys_to_offset+0x4c>
 1014080:	e0bffe17 	ldw	r2,-8(fp)
 1014084:	10800117 	ldw	r2,4(r2)
 1014088:	10800017 	ldw	r2,0(r2)
 101408c:	e0ffff17 	ldw	r3,-4(fp)
 1014090:	1885c83a 	sub	r2,r3,r2
 1014094:	00000406 	br	10140a8 <metal_io_phys_to_offset+0x5c>
 1014098:	e0bffe17 	ldw	r2,-8(fp)
 101409c:	10c00417 	ldw	r3,16(r2)
 10140a0:	e0bfff17 	ldw	r2,-4(fp)
 10140a4:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 10140a8:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 10140ac:	e17ffd17 	ldw	r5,-12(fp)
 10140b0:	e13ffe17 	ldw	r4,-8(fp)
 10140b4:	1013f7c0 	call	1013f7c <metal_io_phys>
 10140b8:	1007883a 	mov	r3,r2
 10140bc:	e0bfff17 	ldw	r2,-4(fp)
 10140c0:	1880021e 	bne	r3,r2,10140cc <metal_io_phys_to_offset+0x80>
				return offset;
 10140c4:	e0bffd17 	ldw	r2,-12(fp)
 10140c8:	00001106 	br	1014110 <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 10140cc:	e0bffe17 	ldw	r2,-8(fp)
 10140d0:	10c00417 	ldw	r3,16(r2)
 10140d4:	e0bffd17 	ldw	r2,-12(fp)
 10140d8:	1885883a 	add	r2,r3,r2
 10140dc:	10800044 	addi	r2,r2,1
 10140e0:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 10140e4:	e0bffe17 	ldw	r2,-8(fp)
 10140e8:	10800217 	ldw	r2,8(r2)
 10140ec:	e0fffd17 	ldw	r3,-12(fp)
 10140f0:	18bfee36 	bltu	r3,r2,10140ac <__alt_data_end+0xff0140ac>
		return METAL_BAD_OFFSET;
 10140f4:	00bfffc4 	movi	r2,-1
 10140f8:	00000506 	br	1014110 <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 10140fc:	e0bffe17 	ldw	r2,-8(fp)
 1014100:	10800d17 	ldw	r2,52(r2)
 1014104:	e17fff17 	ldw	r5,-4(fp)
 1014108:	e13ffe17 	ldw	r4,-8(fp)
 101410c:	103ee83a 	callr	r2
}
 1014110:	e037883a 	mov	sp,fp
 1014114:	dfc00117 	ldw	ra,4(sp)
 1014118:	df000017 	ldw	fp,0(sp)
 101411c:	dec00204 	addi	sp,sp,8
 1014120:	f800283a 	ret

01014124 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1014124:	defffc04 	addi	sp,sp,-16
 1014128:	dfc00315 	stw	ra,12(sp)
 101412c:	df000215 	stw	fp,8(sp)
 1014130:	df000204 	addi	fp,sp,8
 1014134:	e13ffe15 	stw	r4,-8(fp)
 1014138:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 101413c:	e17fff17 	ldw	r5,-4(fp)
 1014140:	e13ffe17 	ldw	r4,-8(fp)
 1014144:	101404c0 	call	101404c <metal_io_phys_to_offset>
 1014148:	100b883a 	mov	r5,r2
 101414c:	e13ffe17 	ldw	r4,-8(fp)
 1014150:	1013f200 	call	1013f20 <metal_io_virt>
}
 1014154:	e037883a 	mov	sp,fp
 1014158:	dfc00117 	ldw	ra,4(sp)
 101415c:	df000017 	ldw	fp,0(sp)
 1014160:	dec00204 	addi	sp,sp,8
 1014164:	f800283a 	ret

01014168 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1014168:	defffd04 	addi	sp,sp,-12
 101416c:	dfc00215 	stw	ra,8(sp)
 1014170:	df000115 	stw	fp,4(sp)
 1014174:	df000104 	addi	fp,sp,4
 1014178:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 101417c:	e13fff17 	ldw	r4,-4(fp)
 1014180:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 1014184:	e037883a 	mov	sp,fp
 1014188:	dfc00117 	ldw	ra,4(sp)
 101418c:	df000017 	ldw	fp,0(sp)
 1014190:	dec00204 	addi	sp,sp,8
 1014194:	f800283a 	ret

01014198 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 1014198:	defffd04 	addi	sp,sp,-12
 101419c:	dfc00215 	stw	ra,8(sp)
 10141a0:	df000115 	stw	fp,4(sp)
 10141a4:	df000104 	addi	fp,sp,4
 10141a8:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 10141ac:	e13fff17 	ldw	r4,-4(fp)
 10141b0:	10011840 	call	1001184 <vPortFree>
}
 10141b4:	0001883a 	nop
 10141b8:	e037883a 	mov	sp,fp
 10141bc:	dfc00117 	ldw	ra,4(sp)
 10141c0:	df000017 	ldw	fp,0(sp)
 10141c4:	dec00204 	addi	sp,sp,8
 10141c8:	f800283a 	ret

010141cc <rpmsg_virtio_get_rpmsg_device>:
 * @param rvdev - pointer to RPMsg virtio device
 * @return - RPMsg device pointed by RPMsg virtio device
 */
static inline struct rpmsg_device *
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
 10141cc:	defffe04 	addi	sp,sp,-8
 10141d0:	df000115 	stw	fp,4(sp)
 10141d4:	df000104 	addi	fp,sp,4
 10141d8:	e13fff15 	stw	r4,-4(fp)
	return &rvdev->rdev;
 10141dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10141e0:	e037883a 	mov	sp,fp
 10141e4:	df000017 	ldw	fp,0(sp)
 10141e8:	dec00104 	addi	sp,sp,4
 10141ec:	f800283a 	ret

010141f0 <platform_create_proc>:
/* RPMsg virtio shared buffer pool */
static struct rpmsg_virtio_shm_pool shpool;

static struct remoteproc *
platform_create_proc(int proc_index, int rsc_index)
{
 10141f0:	defff604 	addi	sp,sp,-40
 10141f4:	dfc00915 	stw	ra,36(sp)
 10141f8:	df000815 	stw	fp,32(sp)
 10141fc:	df000804 	addi	fp,sp,32
 1014200:	e13ffe15 	stw	r4,-8(fp)
 1014204:	e17fff15 	stw	r5,-4(fp)
	int rsc_size;
	int ret;
	metal_phys_addr_t pa;

	(void) proc_index;
	rsc_table = get_resource_table(rsc_index, &rsc_size);
 1014208:	e0bffc04 	addi	r2,fp,-16
 101420c:	100b883a 	mov	r5,r2
 1014210:	e13fff17 	ldw	r4,-4(fp)
 1014214:	101492c0 	call	101492c <get_resource_table>
 1014218:	e0bffa15 	stw	r2,-24(fp)

	/* Register IPI device */
	(void)metal_register_generic_device(&ipi_device);
 101421c:	010040f4 	movhi	r4,259
 1014220:	212bfe04 	addi	r4,r4,-20488
 1014224:	10067880 	call	1006788 <metal_register_generic_device>

	/* Initialize remoteproc instance */
	if (!remoteproc_init(&rproc_inst, &zynqmp_r5_a53_proc_ops, &rproc_priv))
 1014228:	018040f4 	movhi	r6,259
 101422c:	31ac1304 	addi	r6,r6,-20404
 1014230:	014040f4 	movhi	r5,259
 1014234:	296c1904 	addi	r5,r5,-20380
 1014238:	010060f4 	movhi	r4,387
 101423c:	213b4604 	addi	r4,r4,-4840
 1014240:	100c7600 	call	100c760 <remoteproc_init>
 1014244:	1000021e 	bne	r2,zero,1014250 <platform_create_proc+0x60>
		return NULL;
 1014248:	0005883a 	mov	r2,zero
 101424c:	00003206 	br	1014318 <platform_create_proc+0x128>
	 * Mmap shared memories
	 * Or shall we constraint that they will be set as carved out
	 * in the resource table?
	 */
	/* mmap resource table */
	pa = (metal_phys_addr_t)rsc_table;
 1014250:	e0bffa17 	ldw	r2,-24(fp)
 1014254:	e0bffd15 	stw	r2,-12(fp)
	(void *)remoteproc_mmap(&rproc_inst, &pa,
 1014258:	e0bffc17 	ldw	r2,-16(fp)
 101425c:	1009883a 	mov	r4,r2
 1014260:	e0fffd04 	addi	r3,fp,-12
 1014264:	008060f4 	movhi	r2,387
 1014268:	10bb4904 	addi	r2,r2,-4828
 101426c:	d8800115 	stw	r2,4(sp)
 1014270:	0080c204 	movi	r2,776
 1014274:	d8800015 	stw	r2,0(sp)
 1014278:	200f883a 	mov	r7,r4
 101427c:	000d883a 	mov	r6,zero
 1014280:	180b883a 	mov	r5,r3
 1014284:	010060f4 	movhi	r4,387
 1014288:	213b4604 	addi	r4,r4,-4840
 101428c:	100cd140 	call	100cd14 <remoteproc_mmap>
				NULL, rsc_size,
				NORM_NSHARED_NCACHE|PRIV_RW_USER_RW,
				&rproc_inst.rsc_io);

	/* mmap shared memory */
	pa = SHARED_MEM_PA;
 1014290:	00807034 	movhi	r2,448
 1014294:	e0bffd15 	stw	r2,-12(fp)
	(void *)remoteproc_mmap(&rproc_inst, &pa,
 1014298:	e0fffd04 	addi	r3,fp,-12
 101429c:	d8000115 	stw	zero,4(sp)
 10142a0:	0080c204 	movi	r2,776
 10142a4:	d8800015 	stw	r2,0(sp)
 10142a8:	01c01034 	movhi	r7,64
 10142ac:	000d883a 	mov	r6,zero
 10142b0:	180b883a 	mov	r5,r3
 10142b4:	010060f4 	movhi	r4,387
 10142b8:	213b4604 	addi	r4,r4,-4840
 10142bc:	100cd140 	call	100cd14 <remoteproc_mmap>
				NULL, SHARED_MEM_SIZE,
				NORM_NSHARED_NCACHE|PRIV_RW_USER_RW,
				NULL);

	/* parse resource table to remoteproc */
	ret = remoteproc_set_rsc_table(&rproc_inst, rsc_table, rsc_size);
 10142c0:	e0bffc17 	ldw	r2,-16(fp)
 10142c4:	100d883a 	mov	r6,r2
 10142c8:	e17ffa17 	ldw	r5,-24(fp)
 10142cc:	010060f4 	movhi	r4,387
 10142d0:	213b4604 	addi	r4,r4,-4840
 10142d4:	100c6cc0 	call	100c6cc <remoteproc_set_rsc_table>
 10142d8:	e0bffb15 	stw	r2,-20(fp)
	if (ret) {
 10142dc:	e0bffb17 	ldw	r2,-20(fp)
 10142e0:	10000826 	beq	r2,zero,1014304 <platform_create_proc+0x114>
		printf("Failed to intialize remoteproc\r\n");
 10142e4:	010040f4 	movhi	r4,259
 10142e8:	21286004 	addi	r4,r4,-24192
 10142ec:	1015b900 	call	1015b90 <puts>
		remoteproc_remove(&rproc_inst);
 10142f0:	010060f4 	movhi	r4,387
 10142f4:	213b4604 	addi	r4,r4,-4840
 10142f8:	100c7fc0 	call	100c7fc <remoteproc_remove>
		return NULL;
 10142fc:	0005883a 	mov	r2,zero
 1014300:	00000506 	br	1014318 <platform_create_proc+0x128>
	}

	printf("Initialize remoteproc successfully.\r\n");
 1014304:	010040f4 	movhi	r4,259
 1014308:	21286804 	addi	r4,r4,-24160
 101430c:	1015b900 	call	1015b90 <puts>

	return &rproc_inst;
 1014310:	008060f4 	movhi	r2,387
 1014314:	10bb4604 	addi	r2,r2,-4840
}
 1014318:	e037883a 	mov	sp,fp
 101431c:	dfc00117 	ldw	ra,4(sp)
 1014320:	df000017 	ldw	fp,0(sp)
 1014324:	dec00204 	addi	sp,sp,8
 1014328:	f800283a 	ret

0101432c <platform_init>:

int platform_init(void **platform)
{
 101432c:	defffc04 	addi	sp,sp,-16
 1014330:	dfc00315 	stw	ra,12(sp)
 1014334:	df000215 	stw	fp,8(sp)
 1014338:	df000204 	addi	fp,sp,8
 101433c:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc *rproc;

	if (!platform) {
 1014340:	e0bfff17 	ldw	r2,-4(fp)
 1014344:	1000051e 	bne	r2,zero,101435c <platform_init+0x30>
		printf("Failed to initialize platform,"
 1014348:	010040f4 	movhi	r4,259
 101434c:	21287204 	addi	r4,r4,-24120
 1014350:	1015b900 	call	1015b90 <puts>
			   "NULL pointer to store platform data.\r\n");
		return -EINVAL;
 1014354:	00bffa84 	movi	r2,-22
 1014358:	00001006 	br	101439c <platform_init+0x70>
	}
	/* Initialize HW system components */
	init_system();
 101435c:	1005e000 	call	1005e00 <init_system>

	rproc = platform_create_proc(PROC_ID, RSC_ID);
 1014360:	01400044 	movi	r5,1
 1014364:	01000044 	movi	r4,1
 1014368:	10141f00 	call	10141f0 <platform_create_proc>
 101436c:	e0bffe15 	stw	r2,-8(fp)
	if (!rproc) {
 1014370:	e0bffe17 	ldw	r2,-8(fp)
 1014374:	1000051e 	bne	r2,zero,101438c <platform_init+0x60>
		printf("Failed to create remoteproc device.\r\n");
 1014378:	010040f4 	movhi	r4,259
 101437c:	21288304 	addi	r4,r4,-24052
 1014380:	1015b900 	call	1015b90 <puts>
		return -EINVAL;
 1014384:	00bffa84 	movi	r2,-22
 1014388:	00000406 	br	101439c <platform_init+0x70>
	}

	*platform = rproc;
 101438c:	e0bfff17 	ldw	r2,-4(fp)
 1014390:	e0fffe17 	ldw	r3,-8(fp)
 1014394:	10c00015 	stw	r3,0(r2)
	return 0;
 1014398:	0005883a 	mov	r2,zero
}
 101439c:	e037883a 	mov	sp,fp
 10143a0:	dfc00117 	ldw	ra,4(sp)
 10143a4:	df000017 	ldw	fp,0(sp)
 10143a8:	dec00204 	addi	sp,sp,8
 10143ac:	f800283a 	ret

010143b0 <platform_create_rpmsg_vdev>:
struct  rpmsg_device *
platform_create_rpmsg_vdev(void *platform, unsigned int vdev_index,
			   unsigned int role,
			   void (*rst_cb)(struct virtio_device *vdev),
			   rpmsg_ns_bind_cb ns_bind_cb)
{
 10143b0:	defff304 	addi	sp,sp,-52
 10143b4:	dfc00c15 	stw	ra,48(sp)
 10143b8:	df000b15 	stw	fp,44(sp)
 10143bc:	df000b04 	addi	fp,sp,44
 10143c0:	e13ffc15 	stw	r4,-16(fp)
 10143c4:	e17ffd15 	stw	r5,-12(fp)
 10143c8:	e1bffe15 	stw	r6,-8(fp)
 10143cc:	e1ffff15 	stw	r7,-4(fp)
	struct remoteproc *rproc = platform;
 10143d0:	e0bffc17 	ldw	r2,-16(fp)
 10143d4:	e0bff615 	stw	r2,-40(fp)
	struct virtio_device *vdev;
	void *shbuf;
	struct metal_io_region *shbuf_io;
	int ret;

	rpmsg_vdev = metal_allocate_memory(sizeof(*rpmsg_vdev));
 10143d8:	01001f04 	movi	r4,124
 10143dc:	10141680 	call	1014168 <metal_allocate_memory>
 10143e0:	e0bff715 	stw	r2,-36(fp)
	if (!rpmsg_vdev)
 10143e4:	e0bff717 	ldw	r2,-36(fp)
 10143e8:	1000021e 	bne	r2,zero,10143f4 <platform_create_rpmsg_vdev+0x44>
		return NULL;
 10143ec:	0005883a 	mov	r2,zero
 10143f0:	00004506 	br	1014508 <platform_create_rpmsg_vdev+0x158>

	shbuf_io = remoteproc_get_io_with_pa(rproc, SHARED_MEM_PA);
 10143f4:	01407034 	movhi	r5,448
 10143f8:	e13ff617 	ldw	r4,-40(fp)
 10143fc:	100cbb00 	call	100cbb0 <remoteproc_get_io_with_pa>
 1014400:	e0bff815 	stw	r2,-32(fp)
	if (!shbuf_io)
 1014404:	e0bff817 	ldw	r2,-32(fp)
 1014408:	1000021e 	bne	r2,zero,1014414 <platform_create_rpmsg_vdev+0x64>
		return NULL;
 101440c:	0005883a 	mov	r2,zero
 1014410:	00003d06 	br	1014508 <platform_create_rpmsg_vdev+0x158>

	shbuf = metal_io_phys_to_virt(shbuf_io,
 1014414:	01407074 	movhi	r5,449
 1014418:	29600004 	addi	r5,r5,-32768
 101441c:	e13ff817 	ldw	r4,-32(fp)
 1014420:	10141240 	call	1014124 <metal_io_phys_to_virt>
 1014424:	e0bff915 	stw	r2,-28(fp)
				      SHARED_MEM_PA + SHARED_BUF_OFFSET);

	printf("creating remoteproc virtio\r\n");
 1014428:	010040f4 	movhi	r4,259
 101442c:	21288d04 	addi	r4,r4,-24012
 1014430:	1015b900 	call	1015b90 <puts>
	/* TODO: can we have a wrapper for the following two functions? */
	vdev = remoteproc_create_virtio(rproc, vdev_index, role, rst_cb);
 1014434:	e0bffd17 	ldw	r2,-12(fp)
 1014438:	e1ffff17 	ldw	r7,-4(fp)
 101443c:	e1bffe17 	ldw	r6,-8(fp)
 1014440:	100b883a 	mov	r5,r2
 1014444:	e13ff617 	ldw	r4,-40(fp)
 1014448:	100e7980 	call	100e798 <remoteproc_create_virtio>
 101444c:	e0bffa15 	stw	r2,-24(fp)
	if (!vdev) {
 1014450:	e0bffa17 	ldw	r2,-24(fp)
 1014454:	1000041e 	bne	r2,zero,1014468 <platform_create_rpmsg_vdev+0xb8>
		printf("failed remoteproc_create_virtio\r\n");
 1014458:	010040f4 	movhi	r4,259
 101445c:	21289404 	addi	r4,r4,-23984
 1014460:	1015b900 	call	1015b90 <puts>
		goto err1;
 1014464:	00002506 	br	10144fc <platform_create_rpmsg_vdev+0x14c>
	}

	printf("initializing rpmsg shared buffer pool\r\n");
 1014468:	010040f4 	movhi	r4,259
 101446c:	21289d04 	addi	r4,r4,-23948
 1014470:	1015b900 	call	1015b90 <puts>
	/* Only RPMsg virtio master needs to initialize the shared buffers pool */
	rpmsg_virtio_init_shm_pool(&shpool, shbuf,
 1014474:	01801034 	movhi	r6,64
 1014478:	31a00004 	addi	r6,r6,-32768
 101447c:	e17ff917 	ldw	r5,-28(fp)
 1014480:	010060f4 	movhi	r4,387
 1014484:	213b5404 	addi	r4,r4,-4784
 1014488:	101156c0 	call	101156c <rpmsg_virtio_init_shm_pool>
				   (SHARED_MEM_SIZE - SHARED_BUF_OFFSET));

	printf("initializing rpmsg vdev\r\n");
 101448c:	010040f4 	movhi	r4,259
 1014490:	2128a704 	addi	r4,r4,-23908
 1014494:	1015b900 	call	1015b90 <puts>
	/* RPMsg virtio slave can set shared buffers pool argument to NULL */
	ret =  rpmsg_init_vdev(rpmsg_vdev, vdev, ns_bind_cb,
 1014498:	008060f4 	movhi	r2,387
 101449c:	10bb5404 	addi	r2,r2,-4784
 10144a0:	d8800015 	stw	r2,0(sp)
 10144a4:	e1fff817 	ldw	r7,-32(fp)
 10144a8:	e1800217 	ldw	r6,8(fp)
 10144ac:	e17ffa17 	ldw	r5,-24(fp)
 10144b0:	e13ff717 	ldw	r4,-36(fp)
 10144b4:	10120280 	call	1012028 <rpmsg_init_vdev>
 10144b8:	e0bffb15 	stw	r2,-20(fp)
			       shbuf_io,
			       &shpool);
	if (ret) {
 10144bc:	e0bffb17 	ldw	r2,-20(fp)
 10144c0:	10000826 	beq	r2,zero,10144e4 <platform_create_rpmsg_vdev+0x134>
		printf("failed rpmsg_init_vdev\r\n");
 10144c4:	010040f4 	movhi	r4,259
 10144c8:	2128ae04 	addi	r4,r4,-23880
 10144cc:	1015b900 	call	1015b90 <puts>
		goto err2;
 10144d0:	0001883a 	nop
	}
	printf("initializing rpmsg vdev\r\n");
	return rpmsg_virtio_get_rpmsg_device(rpmsg_vdev);
err2:
	remoteproc_remove_virtio(rproc, vdev);
 10144d4:	e17ffa17 	ldw	r5,-24(fp)
 10144d8:	e13ff617 	ldw	r4,-40(fp)
 10144dc:	100eb280 	call	100eb28 <remoteproc_remove_virtio>
 10144e0:	00000606 	br	10144fc <platform_create_rpmsg_vdev+0x14c>
			       &shpool);
	if (ret) {
		printf("failed rpmsg_init_vdev\r\n");
		goto err2;
	}
	printf("initializing rpmsg vdev\r\n");
 10144e4:	010040f4 	movhi	r4,259
 10144e8:	2128a704 	addi	r4,r4,-23908
 10144ec:	1015b900 	call	1015b90 <puts>
	return rpmsg_virtio_get_rpmsg_device(rpmsg_vdev);
 10144f0:	e13ff717 	ldw	r4,-36(fp)
 10144f4:	10141cc0 	call	10141cc <rpmsg_virtio_get_rpmsg_device>
 10144f8:	00000306 	br	1014508 <platform_create_rpmsg_vdev+0x158>
err2:
	remoteproc_remove_virtio(rproc, vdev);
err1:
	metal_free_memory(rpmsg_vdev);
 10144fc:	e13ff717 	ldw	r4,-36(fp)
 1014500:	10141980 	call	1014198 <metal_free_memory>
	return NULL;
 1014504:	0005883a 	mov	r2,zero
}
 1014508:	e037883a 	mov	sp,fp
 101450c:	dfc00117 	ldw	ra,4(sp)
 1014510:	df000017 	ldw	fp,0(sp)
 1014514:	dec00204 	addi	sp,sp,8
 1014518:	f800283a 	ret

0101451c <platform_poll>:

int platform_poll(void *priv)
{
 101451c:	defff604 	addi	sp,sp,-40
 1014520:	dfc00915 	stw	ra,36(sp)
 1014524:	df000815 	stw	fp,32(sp)
 1014528:	df000804 	addi	fp,sp,32
 101452c:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc *rproc = priv;
 1014530:	e0bfff17 	ldw	r2,-4(fp)
 1014534:	e0bff815 	stw	r2,-32(fp)
	struct remoteproc_priv *prproc;
	unsigned int flags;

	prproc = rproc->priv;
 1014538:	e0bff817 	ldw	r2,-32(fp)
 101453c:	10800d17 	ldw	r2,52(r2)
 1014540:	e0bff915 	stw	r2,-28(fp)

	while(1) {
		flags = metal_irq_save_disable();
 1014544:	10070bc0 	call	10070bc <metal_irq_save_disable>
 1014548:	e0bffa15 	stw	r2,-24(fp)

		atomic_int val;

		atomic_mutex_acquire();
 101454c:	1005d680 	call	1005d68 <atomic_mutex_acquire>
		val = atomic_flag_test_and_set(&prproc->ipi_nokick);
 1014550:	e0bff917 	ldw	r2,-28(fp)
 1014554:	10800504 	addi	r2,r2,20
 1014558:	e0bffb15 	stw	r2,-20(fp)
 101455c:	e0bffb17 	ldw	r2,-20(fp)
 1014560:	10800017 	ldw	r2,0(r2)
 1014564:	e0bffc15 	stw	r2,-16(fp)
 1014568:	00800044 	movi	r2,1
 101456c:	e0bffd15 	stw	r2,-12(fp)
 1014570:	e0bff917 	ldw	r2,-28(fp)
 1014574:	e0fffd17 	ldw	r3,-12(fp)
 1014578:	10c00515 	stw	r3,20(r2)
 101457c:	e0bffc17 	ldw	r2,-16(fp)
 1014580:	e0bffe15 	stw	r2,-8(fp)
		atomic_mutex_release();
 1014584:	1005d9c0 	call	1005d9c <atomic_mutex_release>

		if (!val) {
 1014588:	e0bffe17 	ldw	r2,-8(fp)
 101458c:	1000061e 	bne	r2,zero,10145a8 <platform_poll+0x8c>
			metal_irq_restore_enable(flags);
 1014590:	e13ffa17 	ldw	r4,-24(fp)
 1014594:	10070e40 	call	10070e4 <metal_irq_restore_enable>
			remoteproc_get_notification(rproc, RSC_NOTIFY_ID_ANY);
 1014598:	017fffc4 	movi	r5,-1
 101459c:	e13ff817 	ldw	r4,-32(fp)
 10145a0:	100ebac0 	call	100ebac <remoteproc_get_notification>
			break;
 10145a4:	00000406 	br	10145b8 <platform_poll+0x9c>
		}

		_rproc_wait();
 10145a8:	0001883a 	nop
		metal_irq_restore_enable(flags);
 10145ac:	e13ffa17 	ldw	r4,-24(fp)
 10145b0:	10070e40 	call	10070e4 <metal_irq_restore_enable>
	}
 10145b4:	003fe306 	br	1014544 <__alt_data_end+0xff014544>
	return 0;
 10145b8:	0005883a 	mov	r2,zero
}
 10145bc:	e037883a 	mov	sp,fp
 10145c0:	dfc00117 	ldw	ra,4(sp)
 10145c4:	df000017 	ldw	fp,0(sp)
 10145c8:	dec00204 	addi	sp,sp,8
 10145cc:	f800283a 	ret

010145d0 <platform_release_rpmsg_vdev>:

void platform_release_rpmsg_vdev(struct rpmsg_device *rpdev)
{
 10145d0:	defffe04 	addi	sp,sp,-8
 10145d4:	df000115 	stw	fp,4(sp)
 10145d8:	df000104 	addi	fp,sp,4
 10145dc:	e13fff15 	stw	r4,-4(fp)
	(void)rpdev;
}
 10145e0:	0001883a 	nop
 10145e4:	e037883a 	mov	sp,fp
 10145e8:	df000017 	ldw	fp,0(sp)
 10145ec:	dec00104 	addi	sp,sp,4
 10145f0:	f800283a 	ret

010145f4 <platform_cleanup>:

void platform_cleanup(void *platform)
{
 10145f4:	defffc04 	addi	sp,sp,-16
 10145f8:	dfc00315 	stw	ra,12(sp)
 10145fc:	df000215 	stw	fp,8(sp)
 1014600:	df000204 	addi	fp,sp,8
 1014604:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc *rproc = platform;
 1014608:	e0bfff17 	ldw	r2,-4(fp)
 101460c:	e0bffe15 	stw	r2,-8(fp)

	if (rproc)
 1014610:	e0bffe17 	ldw	r2,-8(fp)
 1014614:	10000226 	beq	r2,zero,1014620 <platform_cleanup+0x2c>
		remoteproc_remove(rproc);
 1014618:	e13ffe17 	ldw	r4,-8(fp)
 101461c:	100c7fc0 	call	100c7fc <remoteproc_remove>
	cleanup_system();
 1014620:	1005e6c0 	call	1005e6c <cleanup_system>
}
 1014624:	0001883a 	nop
 1014628:	e037883a 	mov	sp,fp
 101462c:	dfc00117 	ldw	ra,4(sp)
 1014630:	df000017 	ldw	fp,0(sp)
 1014634:	dec00204 	addi	sp,sp,8
 1014638:	f800283a 	ret

0101463c <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 101463c:	defff904 	addi	sp,sp,-28
 1014640:	dfc00615 	stw	ra,24(sp)
 1014644:	df000515 	stw	fp,20(sp)
 1014648:	df000504 	addi	fp,sp,20
 101464c:	e13ffd15 	stw	r4,-12(fp)
 1014650:	e17ffe15 	stw	r5,-8(fp)
 1014654:	e1bfff15 	stw	r6,-4(fp)
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 1014658:	e0bffd17 	ldw	r2,-12(fp)
 101465c:	10800a17 	ldw	r2,40(r2)
 1014660:	10bfffd8 	cmpnei	r2,r2,-1
 1014664:	1000021e 	bne	r2,zero,1014670 <rpmsg_send+0x34>
		return RPMSG_ERR_ADDR;
 1014668:	00be0a44 	movi	r2,-2007
 101466c:	00000d06 	br	10146a4 <rpmsg_send+0x68>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 1014670:	e0bffd17 	ldw	r2,-12(fp)
 1014674:	10c00917 	ldw	r3,36(r2)
 1014678:	e0bffd17 	ldw	r2,-12(fp)
 101467c:	11000a17 	ldw	r4,40(r2)
 1014680:	00800044 	movi	r2,1
 1014684:	d8800115 	stw	r2,4(sp)
 1014688:	e0bfff17 	ldw	r2,-4(fp)
 101468c:	d8800015 	stw	r2,0(sp)
 1014690:	e1fffe17 	ldw	r7,-8(fp)
 1014694:	200d883a 	mov	r6,r4
 1014698:	180b883a 	mov	r5,r3
 101469c:	e13ffd17 	ldw	r4,-12(fp)
 10146a0:	1010a280 	call	1010a28 <rpmsg_send_offchannel_raw>
					 len, true);
}
 10146a4:	e037883a 	mov	sp,fp
 10146a8:	dfc00117 	ldw	ra,4(sp)
 10146ac:	df000017 	ldw	fp,0(sp)
 10146b0:	dec00204 	addi	sp,sp,8
 10146b4:	f800283a 	ret

010146b8 <rpmsg_endpoint_cb>:
/*-----------------------------------------------------------------------------*
 *  RPMSG endpoint callbacks
 *-----------------------------------------------------------------------------*/
static int rpmsg_endpoint_cb(struct rpmsg_endpoint *ept, void *data, size_t len,
			     uint32_t src, void *priv)
{
 10146b8:	defffa04 	addi	sp,sp,-24
 10146bc:	dfc00515 	stw	ra,20(sp)
 10146c0:	df000415 	stw	fp,16(sp)
 10146c4:	df000404 	addi	fp,sp,16
 10146c8:	e13ffc15 	stw	r4,-16(fp)
 10146cc:	e17ffd15 	stw	r5,-12(fp)
 10146d0:	e1bffe15 	stw	r6,-8(fp)
 10146d4:	e1ffff15 	stw	r7,-4(fp)
	(void)priv;
	(void)src;

	/* On reception of a shutdown we signal the application to terminate */
	if ((*(unsigned int *)data) == SHUTDOWN_MSG) {
 10146d8:	e0bffd17 	ldw	r2,-12(fp)
 10146dc:	10c00017 	ldw	r3,0(r2)
 10146e0:	00bbd5f4 	movhi	r2,61271
 10146e4:	10a95684 	addi	r2,r2,-23206
 10146e8:	1880071e 	bne	r3,r2,1014708 <rpmsg_endpoint_cb+0x50>
		LPRINTF("shutdown message is received.\r\n");
 10146ec:	010040f4 	movhi	r4,259
 10146f0:	2128b404 	addi	r4,r4,-23856
 10146f4:	1015b900 	call	1015b90 <puts>
		shutdown_req = 1;
 10146f8:	00800044 	movi	r2,1
 10146fc:	d0a75415 	stw	r2,-25264(gp)
		return RPMSG_SUCCESS;
 1014700:	0005883a 	mov	r2,zero
 1014704:	00000a06 	br	1014730 <rpmsg_endpoint_cb+0x78>
	}

	/* Send data back to master */
	if (rpmsg_send(ept, data, len) < 0) {
 1014708:	e0bffe17 	ldw	r2,-8(fp)
 101470c:	100d883a 	mov	r6,r2
 1014710:	e17ffd17 	ldw	r5,-12(fp)
 1014714:	e13ffc17 	ldw	r4,-16(fp)
 1014718:	101463c0 	call	101463c <rpmsg_send>
 101471c:	1000030e 	bge	r2,zero,101472c <rpmsg_endpoint_cb+0x74>
		LPERROR("rpmsg_send failed\r\n");
 1014720:	010040f4 	movhi	r4,259
 1014724:	2128bc04 	addi	r4,r4,-23824
 1014728:	1015b900 	call	1015b90 <puts>
	}
	return RPMSG_SUCCESS;
 101472c:	0005883a 	mov	r2,zero
}
 1014730:	e037883a 	mov	sp,fp
 1014734:	dfc00117 	ldw	ra,4(sp)
 1014738:	df000017 	ldw	fp,0(sp)
 101473c:	dec00204 	addi	sp,sp,8
 1014740:	f800283a 	ret

01014744 <rpmsg_service_unbind>:

static void rpmsg_service_unbind(struct rpmsg_endpoint *ept)
{
 1014744:	defffd04 	addi	sp,sp,-12
 1014748:	dfc00215 	stw	ra,8(sp)
 101474c:	df000115 	stw	fp,4(sp)
 1014750:	df000104 	addi	fp,sp,4
 1014754:	e13fff15 	stw	r4,-4(fp)
	(void)ept;
	LPRINTF("unexpected Remote endpoint destroy\r\n");
 1014758:	010040f4 	movhi	r4,259
 101475c:	2128c304 	addi	r4,r4,-23796
 1014760:	1015b900 	call	1015b90 <puts>
	shutdown_req = 1;
 1014764:	00800044 	movi	r2,1
 1014768:	d0a75415 	stw	r2,-25264(gp)
}
 101476c:	0001883a 	nop
 1014770:	e037883a 	mov	sp,fp
 1014774:	dfc00117 	ldw	ra,4(sp)
 1014778:	df000017 	ldw	fp,0(sp)
 101477c:	dec00204 	addi	sp,sp,8
 1014780:	f800283a 	ret

01014784 <app>:

/*-----------------------------------------------------------------------------*
 *  Application
 *-----------------------------------------------------------------------------*/
int app(struct rpmsg_device *rdev, void *priv)
{
 1014784:	defff804 	addi	sp,sp,-32
 1014788:	dfc00715 	stw	ra,28(sp)
 101478c:	df000615 	stw	fp,24(sp)
 1014790:	df000604 	addi	fp,sp,24
 1014794:	e13ffe15 	stw	r4,-8(fp)
 1014798:	e17fff15 	stw	r5,-4(fp)
	int ret;

	/* Initialize RPMSG framework */
	LPRINTF("Try to create rpmsg endpoint.\r\n");
 101479c:	010040f4 	movhi	r4,259
 10147a0:	2128cc04 	addi	r4,r4,-23760
 10147a4:	1015b900 	call	1015b90 <puts>

	ret = rpmsg_create_ept(&lept, rdev, RPMSG_SERVICE_NAME,
 10147a8:	00804074 	movhi	r2,257
 10147ac:	1091d104 	addi	r2,r2,18244
 10147b0:	d8800215 	stw	r2,8(sp)
 10147b4:	00804074 	movhi	r2,257
 10147b8:	1091ae04 	addi	r2,r2,18104
 10147bc:	d8800115 	stw	r2,4(sp)
 10147c0:	00bfffc4 	movi	r2,-1
 10147c4:	d8800015 	stw	r2,0(sp)
 10147c8:	000f883a 	mov	r7,zero
 10147cc:	018040f4 	movhi	r6,259
 10147d0:	31a8d404 	addi	r6,r6,-23728
 10147d4:	e17ffe17 	ldw	r5,-8(fp)
 10147d8:	010060f4 	movhi	r4,387
 10147dc:	213b5704 	addi	r4,r4,-4772
 10147e0:	1010d900 	call	1010d90 <rpmsg_create_ept>
 10147e4:	e0bffd15 	stw	r2,-12(fp)
			       0, RPMSG_ADDR_ANY, rpmsg_endpoint_cb,
			       rpmsg_service_unbind);
	if (ret) {
 10147e8:	e0bffd17 	ldw	r2,-12(fp)
 10147ec:	10000526 	beq	r2,zero,1014804 <app+0x80>
		LPERROR("Failed to create endpoint.\r\n");
 10147f0:	010040f4 	movhi	r4,259
 10147f4:	2128db04 	addi	r4,r4,-23700
 10147f8:	1015b900 	call	1015b90 <puts>
		return -1;
 10147fc:	00bfffc4 	movi	r2,-1
 1014800:	00000d06 	br	1014838 <app+0xb4>
	}

	LPRINTF("Successfully created rpmsg endpoint.\r\n");
 1014804:	010040f4 	movhi	r4,259
 1014808:	2128e404 	addi	r4,r4,-23664
 101480c:	1015b900 	call	1015b90 <puts>

	while(1) {
		platform_poll(priv);
 1014810:	e13fff17 	ldw	r4,-4(fp)
 1014814:	101451c0 	call	101451c <platform_poll>

		/* we got a shutdown request, exit */
		if (shutdown_req) {
 1014818:	d0a75417 	ldw	r2,-25264(gp)
 101481c:	1000011e 	bne	r2,zero,1014824 <app+0xa0>
			break;
		}
	}
 1014820:	003ffb06 	br	1014810 <__alt_data_end+0xff014810>
	while(1) {
		platform_poll(priv);

		/* we got a shutdown request, exit */
		if (shutdown_req) {
			break;
 1014824:	0001883a 	nop
		}
	}
	rpmsg_destroy_ept(&lept);
 1014828:	010060f4 	movhi	r4,387
 101482c:	213b5704 	addi	r4,r4,-4772
 1014830:	1010f180 	call	1010f18 <rpmsg_destroy_ept>

	return 0;
 1014834:	0005883a 	mov	r2,zero
}
 1014838:	e037883a 	mov	sp,fp
 101483c:	dfc00117 	ldw	ra,4(sp)
 1014840:	df000017 	ldw	fp,0(sp)
 1014844:	dec00204 	addi	sp,sp,8
 1014848:	f800283a 	ret

0101484c <main>:

/*-----------------------------------------------------------------------------*
 *  Application entry point
 *-----------------------------------------------------------------------------*/
int main()
{
 101484c:	defffa04 	addi	sp,sp,-24
 1014850:	dfc00515 	stw	ra,20(sp)
 1014854:	df000415 	stw	fp,16(sp)
 1014858:	df000404 	addi	fp,sp,16
	atomic_mutex_init();
 101485c:	1005d000 	call	1005d00 <atomic_mutex_init>

	void *platform;
	struct rpmsg_device *rpdev;
	int ret;

	LPRINTF("Starting application...\r\n");
 1014860:	010040f4 	movhi	r4,259
 1014864:	2128ee04 	addi	r4,r4,-23624
 1014868:	1015b900 	call	1015b90 <puts>

	/* Initialize platform */
	ret = platform_init(&platform);
 101486c:	e0bfff04 	addi	r2,fp,-4
 1014870:	1009883a 	mov	r4,r2
 1014874:	101432c0 	call	101432c <platform_init>
 1014878:	e0bffd15 	stw	r2,-12(fp)
	if (ret) {
 101487c:	e0bffd17 	ldw	r2,-12(fp)
 1014880:	10000626 	beq	r2,zero,101489c <main+0x50>
		LPERROR("Failed to initialize platform.\r\n");
 1014884:	010040f4 	movhi	r4,259
 1014888:	2128f504 	addi	r4,r4,-23596
 101488c:	1015b900 	call	1015b90 <puts>
		ret = -1;
 1014890:	00bfffc4 	movi	r2,-1
 1014894:	e0bffd15 	stw	r2,-12(fp)
 1014898:	00001706 	br	10148f8 <main+0xac>
	} else {
		rpdev = platform_create_rpmsg_vdev(platform, 0,
 101489c:	e0bfff17 	ldw	r2,-4(fp)
 10148a0:	d8000015 	stw	zero,0(sp)
 10148a4:	000f883a 	mov	r7,zero
 10148a8:	01800044 	movi	r6,1
 10148ac:	000b883a 	mov	r5,zero
 10148b0:	1009883a 	mov	r4,r2
 10148b4:	10143b00 	call	10143b0 <platform_create_rpmsg_vdev>
 10148b8:	e0bffe15 	stw	r2,-8(fp)
						   VIRTIO_DEV_SLAVE,
						   NULL, NULL);
		if (!rpdev) {
 10148bc:	e0bffe17 	ldw	r2,-8(fp)
 10148c0:	1000061e 	bne	r2,zero,10148dc <main+0x90>
			LPERROR("Failed to create rpmsg virtio device.\r\n");
 10148c4:	010040f4 	movhi	r4,259
 10148c8:	2128ff04 	addi	r4,r4,-23556
 10148cc:	1015b900 	call	1015b90 <puts>
			ret = -1;
 10148d0:	00bfffc4 	movi	r2,-1
 10148d4:	e0bffd15 	stw	r2,-12(fp)
 10148d8:	00000706 	br	10148f8 <main+0xac>
		} else {
			app(rpdev, platform);
 10148dc:	e0bfff17 	ldw	r2,-4(fp)
 10148e0:	100b883a 	mov	r5,r2
 10148e4:	e13ffe17 	ldw	r4,-8(fp)
 10148e8:	10147840 	call	1014784 <app>
			platform_release_rpmsg_vdev(rpdev);
 10148ec:	e13ffe17 	ldw	r4,-8(fp)
 10148f0:	10145d00 	call	10145d0 <platform_release_rpmsg_vdev>
			ret = 0;
 10148f4:	e03ffd15 	stw	zero,-12(fp)
		}
	}

	LPRINTF("Stopping application...\r\n");
 10148f8:	010040f4 	movhi	r4,259
 10148fc:	21290b04 	addi	r4,r4,-23508
 1014900:	1015b900 	call	1015b90 <puts>
	platform_cleanup(platform);
 1014904:	e0bfff17 	ldw	r2,-4(fp)
 1014908:	1009883a 	mov	r4,r2
 101490c:	10145f40 	call	10145f4 <platform_cleanup>

	atomic_mutex_deinit();
 1014910:	1005d340 	call	1005d34 <atomic_mutex_deinit>

	return ret;
 1014914:	e0bffd17 	ldw	r2,-12(fp)
}
 1014918:	e037883a 	mov	sp,fp
 101491c:	dfc00117 	ldw	ra,4(sp)
 1014920:	df000017 	ldw	fp,0(sp)
 1014924:	dec00204 	addi	sp,sp,8
 1014928:	f800283a 	ret

0101492c <get_resource_table>:
	{RING_TX, VRING_ALIGN, VRING_SIZE, 1, 0},
	{RING_RX, VRING_ALIGN, VRING_SIZE, 2, 0},
};

void *get_resource_table (int rsc_id, int *len)
{
 101492c:	defffd04 	addi	sp,sp,-12
 1014930:	df000215 	stw	fp,8(sp)
 1014934:	df000204 	addi	fp,sp,8
 1014938:	e13ffe15 	stw	r4,-8(fp)
 101493c:	e17fff15 	stw	r5,-4(fp)
	(void) rsc_id;
	*len = sizeof(resources);
 1014940:	e0bfff17 	ldw	r2,-4(fp)
 1014944:	00c04004 	movi	r3,256
 1014948:	10c00015 	stw	r3,0(r2)
	return &resources;
 101494c:	008040f4 	movhi	r2,259
 1014950:	10ac0004 	addi	r2,r2,-20480
}
 1014954:	e037883a 	mov	sp,fp
 1014958:	df000017 	ldw	fp,0(sp)
 101495c:	dec00104 	addi	sp,sp,4
 1014960:	f800283a 	ret

01014964 <metal_list_add_before>:
	list->next = list->prev = list;
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 1014964:	defffd04 	addi	sp,sp,-12
 1014968:	df000215 	stw	fp,8(sp)
 101496c:	df000204 	addi	fp,sp,8
 1014970:	e13ffe15 	stw	r4,-8(fp)
 1014974:	e17fff15 	stw	r5,-4(fp)
	new_node->prev = node->prev;
 1014978:	e0bffe17 	ldw	r2,-8(fp)
 101497c:	10c00117 	ldw	r3,4(r2)
 1014980:	e0bfff17 	ldw	r2,-4(fp)
 1014984:	10c00115 	stw	r3,4(r2)
	new_node->next = node;
 1014988:	e0bfff17 	ldw	r2,-4(fp)
 101498c:	e0fffe17 	ldw	r3,-8(fp)
 1014990:	10c00015 	stw	r3,0(r2)
	new_node->next->prev = new_node;
 1014994:	e0bfff17 	ldw	r2,-4(fp)
 1014998:	10800017 	ldw	r2,0(r2)
 101499c:	e0ffff17 	ldw	r3,-4(fp)
 10149a0:	10c00115 	stw	r3,4(r2)
	new_node->prev->next = new_node;
 10149a4:	e0bfff17 	ldw	r2,-4(fp)
 10149a8:	10800117 	ldw	r2,4(r2)
 10149ac:	e0ffff17 	ldw	r3,-4(fp)
 10149b0:	10c00015 	stw	r3,0(r2)
}
 10149b4:	0001883a 	nop
 10149b8:	e037883a 	mov	sp,fp
 10149bc:	df000017 	ldw	fp,0(sp)
 10149c0:	dec00104 	addi	sp,sp,4
 10149c4:	f800283a 	ret

010149c8 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 10149c8:	defffc04 	addi	sp,sp,-16
 10149cc:	dfc00315 	stw	ra,12(sp)
 10149d0:	df000215 	stw	fp,8(sp)
 10149d4:	df000204 	addi	fp,sp,8
 10149d8:	e13ffe15 	stw	r4,-8(fp)
 10149dc:	e17fff15 	stw	r5,-4(fp)
	metal_list_add_before(list, node);
 10149e0:	e17fff17 	ldw	r5,-4(fp)
 10149e4:	e13ffe17 	ldw	r4,-8(fp)
 10149e8:	10149640 	call	1014964 <metal_list_add_before>
}
 10149ec:	0001883a 	nop
 10149f0:	e037883a 	mov	sp,fp
 10149f4:	dfc00117 	ldw	ra,4(sp)
 10149f8:	df000017 	ldw	fp,0(sp)
 10149fc:	dec00204 	addi	sp,sp,8
 1014a00:	f800283a 	ret

01014a04 <metal_irq_unregister>:
 *
 * @param[in]  irq         interrupt id
 */
static inline
void metal_irq_unregister(int irq)
{
 1014a04:	defffd04 	addi	sp,sp,-12
 1014a08:	dfc00215 	stw	ra,8(sp)
 1014a0c:	df000115 	stw	fp,4(sp)
 1014a10:	df000104 	addi	fp,sp,4
 1014a14:	e13fff15 	stw	r4,-4(fp)
	metal_irq_register(irq, 0, NULL);
 1014a18:	000d883a 	mov	r6,zero
 1014a1c:	000b883a 	mov	r5,zero
 1014a20:	e13fff17 	ldw	r4,-4(fp)
 1014a24:	10089640 	call	1008964 <metal_irq_register>
}
 1014a28:	0001883a 	nop
 1014a2c:	e037883a 	mov	sp,fp
 1014a30:	dfc00117 	ldw	ra,4(sp)
 1014a34:	df000017 	ldw	fp,0(sp)
 1014a38:	dec00204 	addi	sp,sp,8
 1014a3c:	f800283a 	ret

01014a40 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 1014a40:	defffd04 	addi	sp,sp,-12
 1014a44:	df000215 	stw	fp,8(sp)
 1014a48:	df000204 	addi	fp,sp,8
 1014a4c:	e13ffe15 	stw	r4,-8(fp)
 1014a50:	e17fff15 	stw	r5,-4(fp)
	return (io->virt != METAL_BAD_VA && offset < io->size
 1014a54:	e0bffe17 	ldw	r2,-8(fp)
 1014a58:	10800017 	ldw	r2,0(r2)
		? (uint8_t *)io->virt + offset
		: NULL);
 1014a5c:	10bfffe0 	cmpeqi	r2,r2,-1
 1014a60:	1000091e 	bne	r2,zero,1014a88 <metal_io_virt+0x48>
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
 1014a64:	e0bffe17 	ldw	r2,-8(fp)
 1014a68:	10800217 	ldw	r2,8(r2)
 1014a6c:	e0ffff17 	ldw	r3,-4(fp)
 1014a70:	1880052e 	bgeu	r3,r2,1014a88 <metal_io_virt+0x48>
		? (uint8_t *)io->virt + offset
 1014a74:	e0bffe17 	ldw	r2,-8(fp)
 1014a78:	10c00017 	ldw	r3,0(r2)
		: NULL);
 1014a7c:	e0bfff17 	ldw	r2,-4(fp)
 1014a80:	1885883a 	add	r2,r3,r2
 1014a84:	00000106 	br	1014a8c <metal_io_virt+0x4c>
 1014a88:	0005883a 	mov	r2,zero
}
 1014a8c:	e037883a 	mov	sp,fp
 1014a90:	df000017 	ldw	fp,0(sp)
 1014a94:	dec00104 	addi	sp,sp,4
 1014a98:	f800283a 	ret

01014a9c <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
 1014a9c:	defffb04 	addi	sp,sp,-20
 1014aa0:	dfc00415 	stw	ra,16(sp)
 1014aa4:	df000315 	stw	fp,12(sp)
 1014aa8:	df000304 	addi	fp,sp,12
 1014aac:	e13ffe15 	stw	r4,-8(fp)
 1014ab0:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.offset_to_phys) {
 1014ab4:	e0bffe17 	ldw	r2,-8(fp)
 1014ab8:	10800c17 	ldw	r2,48(r2)
 1014abc:	1000211e 	bne	r2,zero,1014b44 <metal_io_phys+0xa8>
		unsigned long page = (io->page_shift >=
 1014ac0:	e0bffe17 	ldw	r2,-8(fp)
 1014ac4:	10800317 	ldw	r2,12(r2)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
 1014ac8:	10800828 	cmpgeui	r2,r2,32
 1014acc:	1000051e 	bne	r2,zero,1014ae4 <metal_io_phys+0x48>
 1014ad0:	e0bffe17 	ldw	r2,-8(fp)
 1014ad4:	10800317 	ldw	r2,12(r2)
 1014ad8:	e0ffff17 	ldw	r3,-4(fp)
 1014adc:	1884d83a 	srl	r2,r3,r2
 1014ae0:	00000106 	br	1014ae8 <metal_io_phys+0x4c>
 1014ae4:	0005883a 	mov	r2,zero
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
 1014ae8:	e0bffd15 	stw	r2,-12(fp)
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014aec:	e0bffe17 	ldw	r2,-8(fp)
 1014af0:	10800117 	ldw	r2,4(r2)
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1014af4:	10001126 	beq	r2,zero,1014b3c <metal_io_phys+0xa0>
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014af8:	e0bffe17 	ldw	r2,-8(fp)
 1014afc:	10800217 	ldw	r2,8(r2)
 1014b00:	e0ffff17 	ldw	r3,-4(fp)
 1014b04:	18800d2e 	bgeu	r3,r2,1014b3c <metal_io_phys+0xa0>
			? io->physmap[page] + (offset & io->page_mask)
 1014b08:	e0bffe17 	ldw	r2,-8(fp)
 1014b0c:	10c00117 	ldw	r3,4(r2)
 1014b10:	e0bffd17 	ldw	r2,-12(fp)
 1014b14:	1085883a 	add	r2,r2,r2
 1014b18:	1085883a 	add	r2,r2,r2
 1014b1c:	1885883a 	add	r2,r3,r2
 1014b20:	10c00017 	ldw	r3,0(r2)
 1014b24:	e0bffe17 	ldw	r2,-8(fp)
 1014b28:	11000417 	ldw	r4,16(r2)
 1014b2c:	e0bfff17 	ldw	r2,-4(fp)
 1014b30:	2084703a 	and	r2,r4,r2
			: METAL_BAD_PHYS);
 1014b34:	1885883a 	add	r2,r3,r2
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014b38:	00000706 	br	1014b58 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
 1014b3c:	00bfffc4 	movi	r2,-1
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap != NULL && offset < io->size
 1014b40:	00000506 	br	1014b58 <metal_io_phys+0xbc>
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
 1014b44:	e0bffe17 	ldw	r2,-8(fp)
 1014b48:	10800c17 	ldw	r2,48(r2)
 1014b4c:	e17fff17 	ldw	r5,-4(fp)
 1014b50:	e13ffe17 	ldw	r4,-8(fp)
 1014b54:	103ee83a 	callr	r2
}
 1014b58:	e037883a 	mov	sp,fp
 1014b5c:	dfc00117 	ldw	ra,4(sp)
 1014b60:	df000017 	ldw	fp,0(sp)
 1014b64:	dec00204 	addi	sp,sp,8
 1014b68:	f800283a 	ret

01014b6c <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1014b6c:	defffb04 	addi	sp,sp,-20
 1014b70:	dfc00415 	stw	ra,16(sp)
 1014b74:	df000315 	stw	fp,12(sp)
 1014b78:	df000304 	addi	fp,sp,12
 1014b7c:	e13ffe15 	stw	r4,-8(fp)
 1014b80:	e17fff15 	stw	r5,-4(fp)
	if (!io->ops.phys_to_offset) {
 1014b84:	e0bffe17 	ldw	r2,-8(fp)
 1014b88:	10800d17 	ldw	r2,52(r2)
 1014b8c:	1000231e 	bne	r2,zero,1014c1c <metal_io_phys_to_offset+0xb0>
		unsigned long offset =
			(io->page_mask == (metal_phys_addr_t)(-1) ?
 1014b90:	e0bffe17 	ldw	r2,-8(fp)
 1014b94:	10800417 	ldw	r2,16(r2)
			phys - io->physmap[0] :  phys & io->page_mask);
 1014b98:	10bfffd8 	cmpnei	r2,r2,-1
 1014b9c:	1000061e 	bne	r2,zero,1014bb8 <metal_io_phys_to_offset+0x4c>
 1014ba0:	e0bffe17 	ldw	r2,-8(fp)
 1014ba4:	10800117 	ldw	r2,4(r2)
 1014ba8:	10800017 	ldw	r2,0(r2)
 1014bac:	e0ffff17 	ldw	r3,-4(fp)
 1014bb0:	1885c83a 	sub	r2,r3,r2
 1014bb4:	00000406 	br	1014bc8 <metal_io_phys_to_offset+0x5c>
 1014bb8:	e0bffe17 	ldw	r2,-8(fp)
 1014bbc:	10c00417 	ldw	r3,16(r2)
 1014bc0:	e0bfff17 	ldw	r2,-4(fp)
 1014bc4:	1884703a 	and	r2,r3,r2
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
		unsigned long offset =
 1014bc8:	e0bffd15 	stw	r2,-12(fp)
			(io->page_mask == (metal_phys_addr_t)(-1) ?
			phys - io->physmap[0] :  phys & io->page_mask);
		do {
			if (metal_io_phys(io, offset) == phys)
 1014bcc:	e17ffd17 	ldw	r5,-12(fp)
 1014bd0:	e13ffe17 	ldw	r4,-8(fp)
 1014bd4:	1014a9c0 	call	1014a9c <metal_io_phys>
 1014bd8:	1007883a 	mov	r3,r2
 1014bdc:	e0bfff17 	ldw	r2,-4(fp)
 1014be0:	1880021e 	bne	r3,r2,1014bec <metal_io_phys_to_offset+0x80>
				return offset;
 1014be4:	e0bffd17 	ldw	r2,-12(fp)
 1014be8:	00001106 	br	1014c30 <metal_io_phys_to_offset+0xc4>
			offset += io->page_mask + 1;
 1014bec:	e0bffe17 	ldw	r2,-8(fp)
 1014bf0:	10c00417 	ldw	r3,16(r2)
 1014bf4:	e0bffd17 	ldw	r2,-12(fp)
 1014bf8:	1885883a 	add	r2,r3,r2
 1014bfc:	10800044 	addi	r2,r2,1
 1014c00:	e0bffd15 	stw	r2,-12(fp)
		} while (offset < io->size);
 1014c04:	e0bffe17 	ldw	r2,-8(fp)
 1014c08:	10800217 	ldw	r2,8(r2)
 1014c0c:	e0fffd17 	ldw	r3,-12(fp)
 1014c10:	18bfee36 	bltu	r3,r2,1014bcc <__alt_data_end+0xff014bcc>
		return METAL_BAD_OFFSET;
 1014c14:	00bfffc4 	movi	r2,-1
 1014c18:	00000506 	br	1014c30 <metal_io_phys_to_offset+0xc4>
	}

	return (*io->ops.phys_to_offset)(io, phys);
 1014c1c:	e0bffe17 	ldw	r2,-8(fp)
 1014c20:	10800d17 	ldw	r2,52(r2)
 1014c24:	e17fff17 	ldw	r5,-4(fp)
 1014c28:	e13ffe17 	ldw	r4,-8(fp)
 1014c2c:	103ee83a 	callr	r2
}
 1014c30:	e037883a 	mov	sp,fp
 1014c34:	dfc00117 	ldw	ra,4(sp)
 1014c38:	df000017 	ldw	fp,0(sp)
 1014c3c:	dec00204 	addi	sp,sp,8
 1014c40:	f800283a 	ret

01014c44 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
 1014c44:	defffc04 	addi	sp,sp,-16
 1014c48:	dfc00315 	stw	ra,12(sp)
 1014c4c:	df000215 	stw	fp,8(sp)
 1014c50:	df000204 	addi	fp,sp,8
 1014c54:	e13ffe15 	stw	r4,-8(fp)
 1014c58:	e17fff15 	stw	r5,-4(fp)
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 1014c5c:	e17fff17 	ldw	r5,-4(fp)
 1014c60:	e13ffe17 	ldw	r4,-8(fp)
 1014c64:	1014b6c0 	call	1014b6c <metal_io_phys_to_offset>
 1014c68:	100b883a 	mov	r5,r2
 1014c6c:	e13ffe17 	ldw	r4,-8(fp)
 1014c70:	1014a400 	call	1014a40 <metal_io_virt>
}
 1014c74:	e037883a 	mov	sp,fp
 1014c78:	dfc00117 	ldw	ra,4(sp)
 1014c7c:	df000017 	ldw	fp,0(sp)
 1014c80:	dec00204 	addi	sp,sp,8
 1014c84:	f800283a 	ret

01014c88 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 1014c88:	defff704 	addi	sp,sp,-36
 1014c8c:	dfc00815 	stw	ra,32(sp)
 1014c90:	df000715 	stw	fp,28(sp)
 1014c94:	dc400615 	stw	r17,24(sp)
 1014c98:	dc000515 	stw	r16,20(sp)
 1014c9c:	df000704 	addi	fp,sp,28
 1014ca0:	e13ffa15 	stw	r4,-24(fp)
 1014ca4:	e17ffb15 	stw	r5,-20(fp)
 1014ca8:	e1bffc15 	stw	r6,-16(fp)
 1014cac:	e1fffd15 	stw	r7,-12(fp)
	void *ptr = metal_io_virt(io, offset);
 1014cb0:	e17ffb17 	ldw	r5,-20(fp)
 1014cb4:	e13ffa17 	ldw	r4,-24(fp)
 1014cb8:	1014a400 	call	1014a40 <metal_io_virt>
 1014cbc:	e0bff915 	stw	r2,-28(fp)

	if (io->ops.read)
 1014cc0:	e0bffa17 	ldw	r2,-24(fp)
 1014cc4:	10800617 	ldw	r2,24(r2)
 1014cc8:	10000a26 	beq	r2,zero,1014cf4 <metal_io_read+0x6c>
		return (*io->ops.read)(io, offset, order, width);
 1014ccc:	e0bffa17 	ldw	r2,-24(fp)
 1014cd0:	10800617 	ldw	r2,24(r2)
 1014cd4:	e1fffd17 	ldw	r7,-12(fp)
 1014cd8:	e1bffc17 	ldw	r6,-16(fp)
 1014cdc:	e17ffb17 	ldw	r5,-20(fp)
 1014ce0:	e13ffa17 	ldw	r4,-24(fp)
 1014ce4:	103ee83a 	callr	r2
 1014ce8:	1021883a 	mov	r16,r2
 1014cec:	1823883a 	mov	r17,r3
 1014cf0:	00004006 	br	1014df4 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uchar) == width)
 1014cf4:	e0bff917 	ldw	r2,-28(fp)
 1014cf8:	10000a26 	beq	r2,zero,1014d24 <metal_io_read+0x9c>
 1014cfc:	e0bffd17 	ldw	r2,-12(fp)
 1014d00:	10800058 	cmpnei	r2,r2,1
 1014d04:	1000071e 	bne	r2,zero,1014d24 <metal_io_read+0x9c>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 1014d08:	0001b03a 	sync
 1014d0c:	e0bff917 	ldw	r2,-28(fp)
 1014d10:	10800003 	ldbu	r2,0(r2)
 1014d14:	10803fcc 	andi	r2,r2,255
 1014d18:	1021883a 	mov	r16,r2
 1014d1c:	0023883a 	mov	r17,zero
 1014d20:	00003406 	br	1014df4 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ushort) == width)
 1014d24:	e0bff917 	ldw	r2,-28(fp)
 1014d28:	10000a26 	beq	r2,zero,1014d54 <metal_io_read+0xcc>
 1014d2c:	e0bffd17 	ldw	r2,-12(fp)
 1014d30:	10800098 	cmpnei	r2,r2,2
 1014d34:	1000071e 	bne	r2,zero,1014d54 <metal_io_read+0xcc>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 1014d38:	0001b03a 	sync
 1014d3c:	e0bff917 	ldw	r2,-28(fp)
 1014d40:	1080000b 	ldhu	r2,0(r2)
 1014d44:	10bfffcc 	andi	r2,r2,65535
 1014d48:	1021883a 	mov	r16,r2
 1014d4c:	0023883a 	mov	r17,zero
 1014d50:	00002806 	br	1014df4 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_uint) == width)
 1014d54:	e0bff917 	ldw	r2,-28(fp)
 1014d58:	10000926 	beq	r2,zero,1014d80 <metal_io_read+0xf8>
 1014d5c:	e0bffd17 	ldw	r2,-12(fp)
 1014d60:	10800118 	cmpnei	r2,r2,4
 1014d64:	1000061e 	bne	r2,zero,1014d80 <metal_io_read+0xf8>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 1014d68:	0001b03a 	sync
 1014d6c:	e0bff917 	ldw	r2,-28(fp)
 1014d70:	10800017 	ldw	r2,0(r2)
 1014d74:	1021883a 	mov	r16,r2
 1014d78:	0023883a 	mov	r17,zero
 1014d7c:	00001d06 	br	1014df4 <metal_io_read+0x16c>
	else if (ptr && sizeof(atomic_ulong) == width)
 1014d80:	e0bff917 	ldw	r2,-28(fp)
 1014d84:	10000926 	beq	r2,zero,1014dac <metal_io_read+0x124>
 1014d88:	e0bffd17 	ldw	r2,-12(fp)
 1014d8c:	10800118 	cmpnei	r2,r2,4
 1014d90:	1000061e 	bne	r2,zero,1014dac <metal_io_read+0x124>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 1014d94:	0001b03a 	sync
 1014d98:	e0bff917 	ldw	r2,-28(fp)
 1014d9c:	10800017 	ldw	r2,0(r2)
 1014da0:	1021883a 	mov	r16,r2
 1014da4:	0023883a 	mov	r17,zero
 1014da8:	00001206 	br	1014df4 <metal_io_read+0x16c>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 1014dac:	e0bff917 	ldw	r2,-28(fp)
 1014db0:	10000826 	beq	r2,zero,1014dd4 <metal_io_read+0x14c>
 1014db4:	e0bffd17 	ldw	r2,-12(fp)
 1014db8:	10800218 	cmpnei	r2,r2,8
 1014dbc:	1000051e 	bne	r2,zero,1014dd4 <metal_io_read+0x14c>
		return atomic_load_explicit((atomic_ullong *)ptr, order);
 1014dc0:	0001b03a 	sync
 1014dc4:	e0bff917 	ldw	r2,-28(fp)
 1014dc8:	14000017 	ldw	r16,0(r2)
 1014dcc:	14400117 	ldw	r17,4(r2)
 1014dd0:	00000806 	br	1014df4 <metal_io_read+0x16c>
#endif
	metal_assert(0);
 1014dd4:	01c040f4 	movhi	r7,259
 1014dd8:	39e91204 	addi	r7,r7,-23480
 1014ddc:	018040f4 	movhi	r6,259
 1014de0:	31a92104 	addi	r6,r6,-23420
 1014de4:	01403f84 	movi	r5,254
 1014de8:	010040f4 	movhi	r4,259
 1014dec:	21291304 	addi	r4,r4,-23476
 1014df0:	10156a00 	call	10156a0 <__assert_func>
 1014df4:	8007883a 	mov	r3,r16
 1014df8:	8809883a 	mov	r4,r17
	return 0; /* quiet compiler */
}
 1014dfc:	1805883a 	mov	r2,r3
 1014e00:	2007883a 	mov	r3,r4
 1014e04:	e6fffe04 	addi	sp,fp,-8
 1014e08:	dfc00317 	ldw	ra,12(sp)
 1014e0c:	df000217 	ldw	fp,8(sp)
 1014e10:	dc400117 	ldw	r17,4(sp)
 1014e14:	dc000017 	ldw	r16,0(sp)
 1014e18:	dec00404 	addi	sp,sp,16
 1014e1c:	f800283a 	ret

01014e20 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 1014e20:	defff704 	addi	sp,sp,-36
 1014e24:	dfc00815 	stw	ra,32(sp)
 1014e28:	df000715 	stw	fp,28(sp)
 1014e2c:	df000704 	addi	fp,sp,28
 1014e30:	e13ffc15 	stw	r4,-16(fp)
 1014e34:	e17ffd15 	stw	r5,-12(fp)
 1014e38:	e1bffe15 	stw	r6,-8(fp)
 1014e3c:	e1ffff15 	stw	r7,-4(fp)
	void *ptr = metal_io_virt(io, offset);
 1014e40:	e17ffd17 	ldw	r5,-12(fp)
 1014e44:	e13ffc17 	ldw	r4,-16(fp)
 1014e48:	1014a400 	call	1014a40 <metal_io_virt>
 1014e4c:	e0bffb15 	stw	r2,-20(fp)
	if (io->ops.write)
 1014e50:	e0bffc17 	ldw	r2,-16(fp)
 1014e54:	10800717 	ldw	r2,28(r2)
 1014e58:	10000c26 	beq	r2,zero,1014e8c <metal_io_write+0x6c>
		(*io->ops.write)(io, offset, value, order, width);
 1014e5c:	e0bffc17 	ldw	r2,-16(fp)
 1014e60:	10800717 	ldw	r2,28(r2)
 1014e64:	e0c00317 	ldw	r3,12(fp)
 1014e68:	d8c00115 	stw	r3,4(sp)
 1014e6c:	e0c00217 	ldw	r3,8(fp)
 1014e70:	d8c00015 	stw	r3,0(sp)
 1014e74:	e1bffe17 	ldw	r6,-8(fp)
 1014e78:	e1ffff17 	ldw	r7,-4(fp)
 1014e7c:	e17ffd17 	ldw	r5,-12(fp)
 1014e80:	e13ffc17 	ldw	r4,-16(fp)
 1014e84:	103ee83a 	callr	r2
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 1014e88:	00003e06 	br	1014f84 <metal_io_write+0x164>
	       uint64_t value, memory_order order, int width)
{
	void *ptr = metal_io_virt(io, offset);
	if (io->ops.write)
		(*io->ops.write)(io, offset, value, order, width);
	else if (ptr && sizeof(atomic_uchar) == width)
 1014e8c:	e0bffb17 	ldw	r2,-20(fp)
 1014e90:	10000926 	beq	r2,zero,1014eb8 <metal_io_write+0x98>
 1014e94:	e0800317 	ldw	r2,12(fp)
 1014e98:	10800058 	cmpnei	r2,r2,1
 1014e9c:	1000061e 	bne	r2,zero,1014eb8 <metal_io_write+0x98>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 1014ea0:	e0bffe17 	ldw	r2,-8(fp)
 1014ea4:	1007883a 	mov	r3,r2
 1014ea8:	e0bffb17 	ldw	r2,-20(fp)
 1014eac:	10c00005 	stb	r3,0(r2)
 1014eb0:	0001b03a 	sync
 1014eb4:	00003306 	br	1014f84 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ushort) == width)
 1014eb8:	e0bffb17 	ldw	r2,-20(fp)
 1014ebc:	10000926 	beq	r2,zero,1014ee4 <metal_io_write+0xc4>
 1014ec0:	e0800317 	ldw	r2,12(fp)
 1014ec4:	10800098 	cmpnei	r2,r2,2
 1014ec8:	1000061e 	bne	r2,zero,1014ee4 <metal_io_write+0xc4>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 1014ecc:	e0bffe17 	ldw	r2,-8(fp)
 1014ed0:	1007883a 	mov	r3,r2
 1014ed4:	e0bffb17 	ldw	r2,-20(fp)
 1014ed8:	10c0000d 	sth	r3,0(r2)
 1014edc:	0001b03a 	sync
 1014ee0:	00002806 	br	1014f84 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_uint) == width)
 1014ee4:	e0bffb17 	ldw	r2,-20(fp)
 1014ee8:	10000826 	beq	r2,zero,1014f0c <metal_io_write+0xec>
 1014eec:	e0800317 	ldw	r2,12(fp)
 1014ef0:	10800118 	cmpnei	r2,r2,4
 1014ef4:	1000051e 	bne	r2,zero,1014f0c <metal_io_write+0xec>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 1014ef8:	e0fffe17 	ldw	r3,-8(fp)
 1014efc:	e0bffb17 	ldw	r2,-20(fp)
 1014f00:	10c00015 	stw	r3,0(r2)
 1014f04:	0001b03a 	sync
 1014f08:	00001e06 	br	1014f84 <metal_io_write+0x164>
	else if (ptr && sizeof(atomic_ulong) == width)
 1014f0c:	e0bffb17 	ldw	r2,-20(fp)
 1014f10:	10000826 	beq	r2,zero,1014f34 <metal_io_write+0x114>
 1014f14:	e0800317 	ldw	r2,12(fp)
 1014f18:	10800118 	cmpnei	r2,r2,4
 1014f1c:	1000051e 	bne	r2,zero,1014f34 <metal_io_write+0x114>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 1014f20:	e0fffe17 	ldw	r3,-8(fp)
 1014f24:	e0bffb17 	ldw	r2,-20(fp)
 1014f28:	10c00015 	stw	r3,0(r2)
 1014f2c:	0001b03a 	sync
 1014f30:	00001406 	br	1014f84 <metal_io_write+0x164>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
 1014f34:	e0bffb17 	ldw	r2,-20(fp)
 1014f38:	10000a26 	beq	r2,zero,1014f64 <metal_io_write+0x144>
 1014f3c:	e0800317 	ldw	r2,12(fp)
 1014f40:	10800218 	cmpnei	r2,r2,8
 1014f44:	1000071e 	bne	r2,zero,1014f64 <metal_io_write+0x144>
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
 1014f48:	e0bffb17 	ldw	r2,-20(fp)
 1014f4c:	e0fffe17 	ldw	r3,-8(fp)
 1014f50:	10c00015 	stw	r3,0(r2)
 1014f54:	e0ffff17 	ldw	r3,-4(fp)
 1014f58:	10c00115 	stw	r3,4(r2)
 1014f5c:	0001b03a 	sync
 1014f60:	00000806 	br	1014f84 <metal_io_write+0x164>
#endif
	else
		metal_assert (0);
 1014f64:	01c040f4 	movhi	r7,259
 1014f68:	39e91204 	addi	r7,r7,-23480
 1014f6c:	018040f4 	movhi	r6,259
 1014f70:	31a92504 	addi	r6,r6,-23404
 1014f74:	01404804 	movi	r5,288
 1014f78:	010040f4 	movhi	r4,259
 1014f7c:	21291304 	addi	r4,r4,-23476
 1014f80:	10156a00 	call	10156a0 <__assert_func>
}
 1014f84:	0001883a 	nop
 1014f88:	e037883a 	mov	sp,fp
 1014f8c:	dfc00117 	ldw	ra,4(sp)
 1014f90:	df000017 	ldw	fp,0(sp)
 1014f94:	dec00204 	addi	sp,sp,8
 1014f98:	f800283a 	ret

01014f9c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 1014f9c:	defffd04 	addi	sp,sp,-12
 1014fa0:	df000215 	stw	fp,8(sp)
 1014fa4:	df000204 	addi	fp,sp,8
 1014fa8:	e13ffe15 	stw	r4,-8(fp)
 1014fac:	e17fff15 	stw	r5,-4(fp)
	return (index < device->num_regions
 1014fb0:	e0bffe17 	ldw	r2,-8(fp)
 1014fb4:	10800217 	ldw	r2,8(r2)
		? &device->regions[index]
		: NULL);
 1014fb8:	e0ffff17 	ldw	r3,-4(fp)
 1014fbc:	1880062e 	bgeu	r3,r2,1014fd8 <metal_device_io_region+0x3c>
 1014fc0:	e0bfff17 	ldw	r2,-4(fp)
 1014fc4:	10800e24 	muli	r2,r2,56
 1014fc8:	10800304 	addi	r2,r2,12
 1014fcc:	e0fffe17 	ldw	r3,-8(fp)
 1014fd0:	1885883a 	add	r2,r3,r2
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
	return (index < device->num_regions
 1014fd4:	00000106 	br	1014fdc <metal_device_io_region+0x40>
		? &device->regions[index]
		: NULL);
 1014fd8:	0005883a 	mov	r2,zero
}
 1014fdc:	e037883a 	mov	sp,fp
 1014fe0:	df000017 	ldw	fp,0(sp)
 1014fe4:	dec00104 	addi	sp,sp,4
 1014fe8:	f800283a 	ret

01014fec <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 1014fec:	defffd04 	addi	sp,sp,-12
 1014ff0:	dfc00215 	stw	ra,8(sp)
 1014ff4:	df000115 	stw	fp,4(sp)
 1014ff8:	df000104 	addi	fp,sp,4
 1014ffc:	e13fff15 	stw	r4,-4(fp)
	return (pvPortMalloc(size));
 1015000:	e13fff17 	ldw	r4,-4(fp)
 1015004:	1000fb00 	call	1000fb0 <pvPortMalloc>
}
 1015008:	e037883a 	mov	sp,fp
 101500c:	dfc00117 	ldw	ra,4(sp)
 1015010:	df000017 	ldw	fp,0(sp)
 1015014:	dec00204 	addi	sp,sp,8
 1015018:	f800283a 	ret

0101501c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 101501c:	defffd04 	addi	sp,sp,-12
 1015020:	dfc00215 	stw	ra,8(sp)
 1015024:	df000115 	stw	fp,4(sp)
 1015028:	df000104 	addi	fp,sp,4
 101502c:	e13fff15 	stw	r4,-4(fp)
	vPortFree(ptr);
 1015030:	e13fff17 	ldw	r4,-4(fp)
 1015034:	10011840 	call	1001184 <vPortFree>
}
 1015038:	0001883a 	nop
 101503c:	e037883a 	mov	sp,fp
 1015040:	dfc00117 	ldw	ra,4(sp)
 1015044:	df000017 	ldw	fp,0(sp)
 1015048:	dec00204 	addi	sp,sp,8
 101504c:	f800283a 	ret

01015050 <remoteproc_init_mem>:
 */
static inline void
remoteproc_init_mem(struct remoteproc_mem *mem, const char *name,
		    metal_phys_addr_t pa, metal_phys_addr_t da,
		    size_t size, struct metal_io_region *io)
{
 1015050:	defffa04 	addi	sp,sp,-24
 1015054:	dfc00515 	stw	ra,20(sp)
 1015058:	df000415 	stw	fp,16(sp)
 101505c:	df000404 	addi	fp,sp,16
 1015060:	e13ffc15 	stw	r4,-16(fp)
 1015064:	e17ffd15 	stw	r5,-12(fp)
 1015068:	e1bffe15 	stw	r6,-8(fp)
 101506c:	e1ffff15 	stw	r7,-4(fp)
	if (!mem)
 1015070:	e0bffc17 	ldw	r2,-16(fp)
 1015074:	10001826 	beq	r2,zero,10150d8 <remoteproc_init_mem+0x88>
		return;
	if (name)
 1015078:	e0bffd17 	ldw	r2,-12(fp)
 101507c:	10000726 	beq	r2,zero,101509c <remoteproc_init_mem+0x4c>
		strncpy(mem->name, name, sizeof(mem->name));
 1015080:	e0bffc17 	ldw	r2,-16(fp)
 1015084:	10800304 	addi	r2,r2,12
 1015088:	01800804 	movi	r6,32
 101508c:	e17ffd17 	ldw	r5,-12(fp)
 1015090:	1009883a 	mov	r4,r2
 1015094:	101661c0 	call	101661c <strncpy>
 1015098:	00000206 	br	10150a4 <remoteproc_init_mem+0x54>
	else
		mem->name[0] = 0;
 101509c:	e0bffc17 	ldw	r2,-16(fp)
 10150a0:	10000305 	stb	zero,12(r2)
	mem->pa = pa;
 10150a4:	e0bffc17 	ldw	r2,-16(fp)
 10150a8:	e0fffe17 	ldw	r3,-8(fp)
 10150ac:	10c00115 	stw	r3,4(r2)
	mem->da = da;
 10150b0:	e0bffc17 	ldw	r2,-16(fp)
 10150b4:	e0ffff17 	ldw	r3,-4(fp)
 10150b8:	10c00015 	stw	r3,0(r2)
	mem->io = io;
 10150bc:	e0bffc17 	ldw	r2,-16(fp)
 10150c0:	e0c00317 	ldw	r3,12(fp)
 10150c4:	10c00b15 	stw	r3,44(r2)
	mem->size = size;
 10150c8:	e0bffc17 	ldw	r2,-16(fp)
 10150cc:	e0c00217 	ldw	r3,8(fp)
 10150d0:	10c00215 	stw	r3,8(r2)
 10150d4:	00000106 	br	10150dc <remoteproc_init_mem+0x8c>
remoteproc_init_mem(struct remoteproc_mem *mem, const char *name,
		    metal_phys_addr_t pa, metal_phys_addr_t da,
		    size_t size, struct metal_io_region *io)
{
	if (!mem)
		return;
 10150d8:	0001883a 	nop
		mem->name[0] = 0;
	mem->pa = pa;
	mem->da = da;
	mem->io = io;
	mem->size = size;
}
 10150dc:	e037883a 	mov	sp,fp
 10150e0:	dfc00117 	ldw	ra,4(sp)
 10150e4:	df000017 	ldw	fp,0(sp)
 10150e8:	dec00204 	addi	sp,sp,8
 10150ec:	f800283a 	ret

010150f0 <remoteproc_add_mem>:
 * @rproc - pointer to remoteproc
 * @mem - pointer to remoteproc memory
 */
static inline void
remoteproc_add_mem(struct remoteproc *rproc, struct remoteproc_mem *mem)
{
 10150f0:	defffc04 	addi	sp,sp,-16
 10150f4:	dfc00315 	stw	ra,12(sp)
 10150f8:	df000215 	stw	fp,8(sp)
 10150fc:	df000204 	addi	fp,sp,8
 1015100:	e13ffe15 	stw	r4,-8(fp)
 1015104:	e17fff15 	stw	r5,-4(fp)
	if (!rproc || !mem)
 1015108:	e0bffe17 	ldw	r2,-8(fp)
 101510c:	10000a26 	beq	r2,zero,1015138 <remoteproc_add_mem+0x48>
 1015110:	e0bfff17 	ldw	r2,-4(fp)
 1015114:	10000826 	beq	r2,zero,1015138 <remoteproc_add_mem+0x48>
		return;
	metal_list_add_tail(&rproc->mems, &mem->node);
 1015118:	e0bffe17 	ldw	r2,-8(fp)
 101511c:	10c00404 	addi	r3,r2,16
 1015120:	e0bfff17 	ldw	r2,-4(fp)
 1015124:	10800c04 	addi	r2,r2,48
 1015128:	100b883a 	mov	r5,r2
 101512c:	1809883a 	mov	r4,r3
 1015130:	10149c80 	call	10149c8 <metal_list_add_tail>
 1015134:	00000106 	br	101513c <remoteproc_add_mem+0x4c>
 */
static inline void
remoteproc_add_mem(struct remoteproc *rproc, struct remoteproc_mem *mem)
{
	if (!rproc || !mem)
		return;
 1015138:	0001883a 	nop
	metal_list_add_tail(&rproc->mems, &mem->node);
}
 101513c:	e037883a 	mov	sp,fp
 1015140:	dfc00117 	ldw	ra,4(sp)
 1015144:	df000017 	ldw	fp,0(sp)
 1015148:	dec00204 	addi	sp,sp,8
 101514c:	f800283a 	ret

01015150 <zynqmp_r5_a53_proc_irq_handler>:
#define IPI_IMR_OFFSET           0x00000014    /* IPI interrupt mask register offset */
#define IPI_IER_OFFSET           0x00000018    /* IPI interrupt enable register offset */
#define IPI_IDR_OFFSET           0x0000001C    /* IPI interrupt disable register offset */

static int zynqmp_r5_a53_proc_irq_handler(int vect_id, void *data)
{
 1015150:	defff504 	addi	sp,sp,-44
 1015154:	dfc00a15 	stw	ra,40(sp)
 1015158:	df000915 	stw	fp,36(sp)
 101515c:	dc400815 	stw	r17,32(sp)
 1015160:	dc000715 	stw	r16,28(sp)
 1015164:	df000904 	addi	fp,sp,36
 1015168:	e13ffc15 	stw	r4,-16(fp)
 101516c:	e17ffd15 	stw	r5,-12(fp)
	struct remoteproc *rproc = data;
 1015170:	e0bffd17 	ldw	r2,-12(fp)
 1015174:	e0bff915 	stw	r2,-28(fp)
	struct remoteproc_priv *prproc;
	unsigned int ipi_intr_status;

	(void)vect_id;
	if (!rproc)
 1015178:	e0bff917 	ldw	r2,-28(fp)
 101517c:	1000021e 	bne	r2,zero,1015188 <zynqmp_r5_a53_proc_irq_handler+0x38>
		return METAL_IRQ_NOT_HANDLED;
 1015180:	0005883a 	mov	r2,zero
 1015184:	00002806 	br	1015228 <zynqmp_r5_a53_proc_irq_handler+0xd8>
	prproc = rproc->priv;
 1015188:	e0bff917 	ldw	r2,-28(fp)
 101518c:	10800d17 	ldw	r2,52(r2)
 1015190:	e0bffa15 	stw	r2,-24(fp)
	ipi_intr_status = (unsigned int)metal_io_read32(prproc->ipi_io,
 1015194:	e0bffa17 	ldw	r2,-24(fp)
 1015198:	10800317 	ldw	r2,12(r2)
 101519c:	01c00104 	movi	r7,4
 10151a0:	01800144 	movi	r6,5
 10151a4:	01400404 	movi	r5,16
 10151a8:	1009883a 	mov	r4,r2
 10151ac:	1014c880 	call	1014c88 <metal_io_read>
 10151b0:	1009883a 	mov	r4,r2
 10151b4:	180b883a 	mov	r5,r3
 10151b8:	e13ffb15 	stw	r4,-20(fp)
							IPI_ISR_OFFSET);
	if (ipi_intr_status & prproc->ipi_chn_mask) {
 10151bc:	e0bffa17 	ldw	r2,-24(fp)
 10151c0:	10c00417 	ldw	r3,16(r2)
 10151c4:	e0bffb17 	ldw	r2,-20(fp)
 10151c8:	1884703a 	and	r2,r3,r2
 10151cc:	10001526 	beq	r2,zero,1015224 <zynqmp_r5_a53_proc_irq_handler+0xd4>
		atomic_flag_clear(&prproc->ipi_nokick);
 10151d0:	e0bffa17 	ldw	r2,-24(fp)
 10151d4:	10800504 	addi	r2,r2,20
 10151d8:	0001b03a 	sync
 10151dc:	10000015 	stw	zero,0(r2)
		metal_io_write32(prproc->ipi_io, IPI_ISR_OFFSET,
 10151e0:	e0bffa17 	ldw	r2,-24(fp)
 10151e4:	10c00317 	ldw	r3,12(r2)
 10151e8:	e0bffa17 	ldw	r2,-24(fp)
 10151ec:	10800417 	ldw	r2,16(r2)
 10151f0:	1021883a 	mov	r16,r2
 10151f4:	0023883a 	mov	r17,zero
 10151f8:	00800104 	movi	r2,4
 10151fc:	d8800115 	stw	r2,4(sp)
 1015200:	00800144 	movi	r2,5
 1015204:	d8800015 	stw	r2,0(sp)
 1015208:	800d883a 	mov	r6,r16
 101520c:	880f883a 	mov	r7,r17
 1015210:	01400404 	movi	r5,16
 1015214:	1809883a 	mov	r4,r3
 1015218:	1014e200 	call	1014e20 <metal_io_write>
				 prproc->ipi_chn_mask);
		return METAL_IRQ_HANDLED;
 101521c:	00800044 	movi	r2,1
 1015220:	00000106 	br	1015228 <zynqmp_r5_a53_proc_irq_handler+0xd8>
	}
	return METAL_IRQ_NOT_HANDLED;
 1015224:	0005883a 	mov	r2,zero
}
 1015228:	e6fffe04 	addi	sp,fp,-8
 101522c:	dfc00317 	ldw	ra,12(sp)
 1015230:	df000217 	ldw	fp,8(sp)
 1015234:	dc400117 	ldw	r17,4(sp)
 1015238:	dc000017 	ldw	r16,0(sp)
 101523c:	dec00404 	addi	sp,sp,16
 1015240:	f800283a 	ret

01015244 <zynqmp_r5_a53_proc_init>:

static struct remoteproc *
zynqmp_r5_a53_proc_init(struct remoteproc *rproc,
            struct remoteproc_ops *ops, void *arg)
{
 1015244:	defff304 	addi	sp,sp,-52
 1015248:	dfc00c15 	stw	ra,48(sp)
 101524c:	df000b15 	stw	fp,44(sp)
 1015250:	dc400a15 	stw	r17,40(sp)
 1015254:	dc000915 	stw	r16,36(sp)
 1015258:	df000b04 	addi	fp,sp,44
 101525c:	e13ffb15 	stw	r4,-20(fp)
 1015260:	e17ffc15 	stw	r5,-16(fp)
 1015264:	e1bffd15 	stw	r6,-12(fp)
	struct remoteproc_priv *prproc = arg;
 1015268:	e0bffd17 	ldw	r2,-12(fp)
 101526c:	e0bff715 	stw	r2,-36(fp)
	struct metal_device *ipi_dev;
	unsigned int irq_vect;
	int ret;

	if (!rproc || !prproc || !ops)
 1015270:	e0bffb17 	ldw	r2,-20(fp)
 1015274:	10000426 	beq	r2,zero,1015288 <zynqmp_r5_a53_proc_init+0x44>
 1015278:	e0bff717 	ldw	r2,-36(fp)
 101527c:	10000226 	beq	r2,zero,1015288 <zynqmp_r5_a53_proc_init+0x44>
 1015280:	e0bffc17 	ldw	r2,-16(fp)
 1015284:	1000021e 	bne	r2,zero,1015290 <zynqmp_r5_a53_proc_init+0x4c>
		return NULL;
 1015288:	0005883a 	mov	r2,zero
 101528c:	00004a06 	br	10153b8 <zynqmp_r5_a53_proc_init+0x174>
	ret = metal_device_open(prproc->ipi_bus_name, prproc->ipi_name,
 1015290:	e0bff717 	ldw	r2,-36(fp)
 1015294:	10c00117 	ldw	r3,4(r2)
 1015298:	e0bff717 	ldw	r2,-36(fp)
 101529c:	10800017 	ldw	r2,0(r2)
 10152a0:	e13ffa04 	addi	r4,fp,-24
 10152a4:	200d883a 	mov	r6,r4
 10152a8:	100b883a 	mov	r5,r2
 10152ac:	1809883a 	mov	r4,r3
 10152b0:	100660c0 	call	100660c <metal_device_open>
 10152b4:	e0bff815 	stw	r2,-32(fp)
				&ipi_dev);
	if (ret) {
 10152b8:	e0bff817 	ldw	r2,-32(fp)
 10152bc:	10000626 	beq	r2,zero,10152d8 <zynqmp_r5_a53_proc_init+0x94>
		printf("failed to open ipi device: %d.\r\n", ret);
 10152c0:	e17ff817 	ldw	r5,-32(fp)
 10152c4:	010040f4 	movhi	r4,259
 10152c8:	21291804 	addi	r4,r4,-23456
 10152cc:	1015a940 	call	1015a94 <printf>
		return NULL;
 10152d0:	0005883a 	mov	r2,zero
 10152d4:	00003806 	br	10153b8 <zynqmp_r5_a53_proc_init+0x174>
	}
	rproc->priv = prproc;
 10152d8:	e0bffb17 	ldw	r2,-20(fp)
 10152dc:	e0fff717 	ldw	r3,-36(fp)
 10152e0:	10c00d15 	stw	r3,52(r2)
	prproc->ipi_dev = ipi_dev;
 10152e4:	e0fffa17 	ldw	r3,-24(fp)
 10152e8:	e0bff717 	ldw	r2,-36(fp)
 10152ec:	10c00215 	stw	r3,8(r2)
	prproc->ipi_io = metal_device_io_region(ipi_dev, 0);
 10152f0:	e0bffa17 	ldw	r2,-24(fp)
 10152f4:	000b883a 	mov	r5,zero
 10152f8:	1009883a 	mov	r4,r2
 10152fc:	1014f9c0 	call	1014f9c <metal_device_io_region>
 1015300:	1007883a 	mov	r3,r2
 1015304:	e0bff717 	ldw	r2,-36(fp)
 1015308:	10c00315 	stw	r3,12(r2)
	if (!prproc->ipi_io)
 101530c:	e0bff717 	ldw	r2,-36(fp)
 1015310:	10800317 	ldw	r2,12(r2)
 1015314:	10002326 	beq	r2,zero,10153a4 <zynqmp_r5_a53_proc_init+0x160>
		goto err1;
	atomic_store(&prproc->ipi_nokick, 1);
 1015318:	e0bff717 	ldw	r2,-36(fp)
 101531c:	00c00044 	movi	r3,1
 1015320:	10c00515 	stw	r3,20(r2)
 1015324:	0001b03a 	sync
	rproc->ops = ops;
 1015328:	e0bffb17 	ldw	r2,-20(fp)
 101532c:	e0fffc17 	ldw	r3,-16(fp)
 1015330:	10c00915 	stw	r3,36(r2)

	/* Register interrupt handler and enable interrupt */
	irq_vect = (uintptr_t)ipi_dev->irq_info;
 1015334:	e0bffa17 	ldw	r2,-24(fp)
 1015338:	10801417 	ldw	r2,80(r2)
 101533c:	e0bff915 	stw	r2,-28(fp)
	metal_irq_register(irq_vect, zynqmp_r5_a53_proc_irq_handler, rproc);
 1015340:	e0bff917 	ldw	r2,-28(fp)
 1015344:	e1bffb17 	ldw	r6,-20(fp)
 1015348:	01404074 	movhi	r5,257
 101534c:	29545404 	addi	r5,r5,20816
 1015350:	1009883a 	mov	r4,r2
 1015354:	10089640 	call	1008964 <metal_irq_register>
	metal_irq_enable(irq_vect);
 1015358:	e13ff917 	ldw	r4,-28(fp)
 101535c:	1008a300 	call	1008a30 <metal_irq_enable>
	metal_io_write32(prproc->ipi_io, IPI_IER_OFFSET,
 1015360:	e0bff717 	ldw	r2,-36(fp)
 1015364:	10c00317 	ldw	r3,12(r2)
 1015368:	e0bff717 	ldw	r2,-36(fp)
 101536c:	10800417 	ldw	r2,16(r2)
 1015370:	1021883a 	mov	r16,r2
 1015374:	0023883a 	mov	r17,zero
 1015378:	00800104 	movi	r2,4
 101537c:	d8800115 	stw	r2,4(sp)
 1015380:	00800144 	movi	r2,5
 1015384:	d8800015 	stw	r2,0(sp)
 1015388:	800d883a 	mov	r6,r16
 101538c:	880f883a 	mov	r7,r17
 1015390:	01400604 	movi	r5,24
 1015394:	1809883a 	mov	r4,r3
 1015398:	1014e200 	call	1014e20 <metal_io_write>
			 prproc->ipi_chn_mask);
	return rproc;
 101539c:	e0bffb17 	ldw	r2,-20(fp)
 10153a0:	00000506 	br	10153b8 <zynqmp_r5_a53_proc_init+0x174>
	}
	rproc->priv = prproc;
	prproc->ipi_dev = ipi_dev;
	prproc->ipi_io = metal_device_io_region(ipi_dev, 0);
	if (!prproc->ipi_io)
		goto err1;
 10153a4:	0001883a 	nop
	metal_irq_enable(irq_vect);
	metal_io_write32(prproc->ipi_io, IPI_IER_OFFSET,
			 prproc->ipi_chn_mask);
	return rproc;
err1:
	metal_device_close(ipi_dev);
 10153a8:	e0bffa17 	ldw	r2,-24(fp)
 10153ac:	1009883a 	mov	r4,r2
 10153b0:	10066f80 	call	10066f8 <metal_device_close>
	return NULL;
 10153b4:	0005883a 	mov	r2,zero
}
 10153b8:	e6fffe04 	addi	sp,fp,-8
 10153bc:	dfc00317 	ldw	ra,12(sp)
 10153c0:	df000217 	ldw	fp,8(sp)
 10153c4:	dc400117 	ldw	r17,4(sp)
 10153c8:	dc000017 	ldw	r16,0(sp)
 10153cc:	dec00404 	addi	sp,sp,16
 10153d0:	f800283a 	ret

010153d4 <zynqmp_r5_a53_proc_remove>:

static void zynqmp_r5_a53_proc_remove(struct remoteproc *rproc)
{
 10153d4:	defff904 	addi	sp,sp,-28
 10153d8:	dfc00615 	stw	ra,24(sp)
 10153dc:	df000515 	stw	fp,20(sp)
 10153e0:	df000504 	addi	fp,sp,20
 10153e4:	e13fff15 	stw	r4,-4(fp)
	struct remoteproc_priv *prproc;
	struct metal_device *dev;

	if (!rproc)
 10153e8:	e13fff17 	ldw	r4,-4(fp)
 10153ec:	20002226 	beq	r4,zero,1015478 <zynqmp_r5_a53_proc_remove+0xa4>
		return;
	prproc = rproc->priv;
 10153f0:	e13fff17 	ldw	r4,-4(fp)
 10153f4:	21000d17 	ldw	r4,52(r4)
 10153f8:	e13ffd15 	stw	r4,-12(fp)
	metal_io_write32(prproc->ipi_io, IPI_IDR_OFFSET, prproc->ipi_chn_mask);
 10153fc:	e13ffd17 	ldw	r4,-12(fp)
 1015400:	22000317 	ldw	r8,12(r4)
 1015404:	e13ffd17 	ldw	r4,-12(fp)
 1015408:	21000417 	ldw	r4,16(r4)
 101540c:	2005883a 	mov	r2,r4
 1015410:	0007883a 	mov	r3,zero
 1015414:	01000104 	movi	r4,4
 1015418:	d9000115 	stw	r4,4(sp)
 101541c:	01000144 	movi	r4,5
 1015420:	d9000015 	stw	r4,0(sp)
 1015424:	100d883a 	mov	r6,r2
 1015428:	180f883a 	mov	r7,r3
 101542c:	01400704 	movi	r5,28
 1015430:	4009883a 	mov	r4,r8
 1015434:	1014e200 	call	1014e20 <metal_io_write>
	dev = prproc->ipi_dev;
 1015438:	e0bffd17 	ldw	r2,-12(fp)
 101543c:	10800217 	ldw	r2,8(r2)
 1015440:	e0bffe15 	stw	r2,-8(fp)
	if (dev) {
 1015444:	e0bffe17 	ldw	r2,-8(fp)
 1015448:	10000c26 	beq	r2,zero,101547c <zynqmp_r5_a53_proc_remove+0xa8>
		metal_irq_disable((uintptr_t)dev->irq_info);
 101544c:	e0bffe17 	ldw	r2,-8(fp)
 1015450:	10801417 	ldw	r2,80(r2)
 1015454:	1009883a 	mov	r4,r2
 1015458:	1008a6c0 	call	1008a6c <metal_irq_disable>
		metal_irq_unregister((uintptr_t)dev->irq_info);
 101545c:	e0bffe17 	ldw	r2,-8(fp)
 1015460:	10801417 	ldw	r2,80(r2)
 1015464:	1009883a 	mov	r4,r2
 1015468:	1014a040 	call	1014a04 <metal_irq_unregister>
		metal_device_close(dev);
 101546c:	e13ffe17 	ldw	r4,-8(fp)
 1015470:	10066f80 	call	10066f8 <metal_device_close>
 1015474:	00000106 	br	101547c <zynqmp_r5_a53_proc_remove+0xa8>
{
	struct remoteproc_priv *prproc;
	struct metal_device *dev;

	if (!rproc)
		return;
 1015478:	0001883a 	nop
	if (dev) {
		metal_irq_disable((uintptr_t)dev->irq_info);
		metal_irq_unregister((uintptr_t)dev->irq_info);
		metal_device_close(dev);
	}
}
 101547c:	e037883a 	mov	sp,fp
 1015480:	dfc00117 	ldw	ra,4(sp)
 1015484:	df000017 	ldw	fp,0(sp)
 1015488:	dec00204 	addi	sp,sp,8
 101548c:	f800283a 	ret

01015490 <zynqmp_r5_a53_proc_mmap>:

static void *
zynqmp_r5_a53_proc_mmap(struct remoteproc *rproc, metal_phys_addr_t *pa,
			metal_phys_addr_t *da, size_t size,
			unsigned int attribute, struct metal_io_region **io)
{
 1015490:	defff304 	addi	sp,sp,-52
 1015494:	dfc00c15 	stw	ra,48(sp)
 1015498:	df000b15 	stw	fp,44(sp)
 101549c:	df000b04 	addi	fp,sp,44
 10154a0:	e13ffc15 	stw	r4,-16(fp)
 10154a4:	e17ffd15 	stw	r5,-12(fp)
 10154a8:	e1bffe15 	stw	r6,-8(fp)
 10154ac:	e1ffff15 	stw	r7,-4(fp)
	struct remoteproc_mem *mem;
	metal_phys_addr_t lpa, lda;
	struct metal_io_region *tmpio;

	lpa = *pa;
 10154b0:	e0bffd17 	ldw	r2,-12(fp)
 10154b4:	10800017 	ldw	r2,0(r2)
 10154b8:	e0bff815 	stw	r2,-32(fp)
	lda = *da;
 10154bc:	e0bffe17 	ldw	r2,-8(fp)
 10154c0:	10800017 	ldw	r2,0(r2)
 10154c4:	e0bff915 	stw	r2,-28(fp)

	if (lpa == METAL_BAD_PHYS && lda == METAL_BAD_PHYS)
 10154c8:	e0bff817 	ldw	r2,-32(fp)
 10154cc:	10bfffd8 	cmpnei	r2,r2,-1
 10154d0:	1000051e 	bne	r2,zero,10154e8 <zynqmp_r5_a53_proc_mmap+0x58>
 10154d4:	e0bff917 	ldw	r2,-28(fp)
 10154d8:	10bfffd8 	cmpnei	r2,r2,-1
 10154dc:	1000021e 	bne	r2,zero,10154e8 <zynqmp_r5_a53_proc_mmap+0x58>
		return NULL;
 10154e0:	0005883a 	mov	r2,zero
 10154e4:	00004706 	br	1015604 <zynqmp_r5_a53_proc_mmap+0x174>
	if (lpa == METAL_BAD_PHYS)
 10154e8:	e0bff817 	ldw	r2,-32(fp)
 10154ec:	10bfffd8 	cmpnei	r2,r2,-1
 10154f0:	1000021e 	bne	r2,zero,10154fc <zynqmp_r5_a53_proc_mmap+0x6c>
		lpa = lda;
 10154f4:	e0bff917 	ldw	r2,-28(fp)
 10154f8:	e0bff815 	stw	r2,-32(fp)
	if (lda == METAL_BAD_PHYS)
 10154fc:	e0bff917 	ldw	r2,-28(fp)
 1015500:	10bfffd8 	cmpnei	r2,r2,-1
 1015504:	1000021e 	bne	r2,zero,1015510 <zynqmp_r5_a53_proc_mmap+0x80>
		lda = lpa;
 1015508:	e0bff817 	ldw	r2,-32(fp)
 101550c:	e0bff915 	stw	r2,-28(fp)

	if (!attribute)
 1015510:	e0800217 	ldw	r2,8(fp)
 1015514:	1000021e 	bne	r2,zero,1015520 <zynqmp_r5_a53_proc_mmap+0x90>
		attribute = NORM_SHARED_NCACHE | PRIV_RW_USER_RW;
 1015518:	0080c304 	movi	r2,780
 101551c:	e0800215 	stw	r2,8(fp)

	mem = metal_allocate_memory(sizeof(*mem));
 1015520:	01000e04 	movi	r4,56
 1015524:	1014fec0 	call	1014fec <metal_allocate_memory>
 1015528:	e0bffa15 	stw	r2,-24(fp)
	if (!mem)
 101552c:	e0bffa17 	ldw	r2,-24(fp)
 1015530:	1000021e 	bne	r2,zero,101553c <zynqmp_r5_a53_proc_mmap+0xac>
		return NULL;
 1015534:	0005883a 	mov	r2,zero
 1015538:	00003206 	br	1015604 <zynqmp_r5_a53_proc_mmap+0x174>

	tmpio = metal_allocate_memory(sizeof(*tmpio));
 101553c:	01000e04 	movi	r4,56
 1015540:	1014fec0 	call	1014fec <metal_allocate_memory>
 1015544:	e0bffb15 	stw	r2,-20(fp)
	if (!tmpio) {
 1015548:	e0bffb17 	ldw	r2,-20(fp)
 101554c:	1000041e 	bne	r2,zero,1015560 <zynqmp_r5_a53_proc_mmap+0xd0>
		metal_free_memory(mem);
 1015550:	e13ffa17 	ldw	r4,-24(fp)
 1015554:	101501c0 	call	101501c <metal_free_memory>
		return NULL;
 1015558:	0005883a 	mov	r2,zero
 101555c:	00002906 	br	1015604 <zynqmp_r5_a53_proc_mmap+0x174>
	}

	remoteproc_init_mem(mem, NULL, lpa, lda, size, tmpio);
 1015560:	e0bffb17 	ldw	r2,-20(fp)
 1015564:	d8800115 	stw	r2,4(sp)
 1015568:	e0bfff17 	ldw	r2,-4(fp)
 101556c:	d8800015 	stw	r2,0(sp)
 1015570:	e1fff917 	ldw	r7,-28(fp)
 1015574:	e1bff817 	ldw	r6,-32(fp)
 1015578:	000b883a 	mov	r5,zero
 101557c:	e13ffa17 	ldw	r4,-24(fp)
 1015580:	10150500 	call	1015050 <remoteproc_init_mem>

	/* va is the same as pa in this platform */
	metal_io_init(tmpio, (void *)lpa, &mem->pa, size,
 1015584:	e0fff817 	ldw	r3,-32(fp)
 1015588:	e0bffa17 	ldw	r2,-24(fp)
 101558c:	11000104 	addi	r4,r2,4
 1015590:	d8000215 	stw	zero,8(sp)
 1015594:	e0800217 	ldw	r2,8(fp)
 1015598:	d8800115 	stw	r2,4(sp)
 101559c:	00800804 	movi	r2,32
 10155a0:	d8800015 	stw	r2,0(sp)
 10155a4:	e1ffff17 	ldw	r7,-4(fp)
 10155a8:	200d883a 	mov	r6,r4
 10155ac:	180b883a 	mov	r5,r3
 10155b0:	e13ffb17 	ldw	r4,-20(fp)
 10155b4:	1007f800 	call	1007f80 <metal_io_init>
			  sizeof(metal_phys_addr_t)<<3, attribute, NULL);

	remoteproc_add_mem(rproc, mem);
 10155b8:	e17ffa17 	ldw	r5,-24(fp)
 10155bc:	e13ffc17 	ldw	r4,-16(fp)
 10155c0:	10150f00 	call	10150f0 <remoteproc_add_mem>

	*pa = lpa;
 10155c4:	e0bffd17 	ldw	r2,-12(fp)
 10155c8:	e0fff817 	ldw	r3,-32(fp)
 10155cc:	10c00015 	stw	r3,0(r2)
	*da = lda;
 10155d0:	e0bffe17 	ldw	r2,-8(fp)
 10155d4:	e0fff917 	ldw	r3,-28(fp)
 10155d8:	10c00015 	stw	r3,0(r2)
	if (io)
 10155dc:	e0800317 	ldw	r2,12(fp)
 10155e0:	10000326 	beq	r2,zero,10155f0 <zynqmp_r5_a53_proc_mmap+0x160>
		*io = tmpio;
 10155e4:	e0800317 	ldw	r2,12(fp)
 10155e8:	e0fffb17 	ldw	r3,-20(fp)
 10155ec:	10c00015 	stw	r3,0(r2)
	return metal_io_phys_to_virt(tmpio, mem->pa);
 10155f0:	e0bffa17 	ldw	r2,-24(fp)
 10155f4:	10800117 	ldw	r2,4(r2)
 10155f8:	100b883a 	mov	r5,r2
 10155fc:	e13ffb17 	ldw	r4,-20(fp)
 1015600:	1014c440 	call	1014c44 <metal_io_phys_to_virt>
}
 1015604:	e037883a 	mov	sp,fp
 1015608:	dfc00117 	ldw	ra,4(sp)
 101560c:	df000017 	ldw	fp,0(sp)
 1015610:	dec00204 	addi	sp,sp,8
 1015614:	f800283a 	ret

01015618 <zynqmp_r5_a53_proc_notify>:

static int zynqmp_r5_a53_proc_notify(struct remoteproc *rproc, uint32_t id)
{
 1015618:	defff904 	addi	sp,sp,-28
 101561c:	dfc00615 	stw	ra,24(sp)
 1015620:	df000515 	stw	fp,20(sp)
 1015624:	df000504 	addi	fp,sp,20
 1015628:	e13ffe15 	stw	r4,-8(fp)
 101562c:	e17fff15 	stw	r5,-4(fp)
	struct remoteproc_priv *prproc;

	(void)id;
	if (!rproc)
 1015630:	e13ffe17 	ldw	r4,-8(fp)
 1015634:	2000021e 	bne	r4,zero,1015640 <zynqmp_r5_a53_proc_notify+0x28>
		return -1;
 1015638:	00bfffc4 	movi	r2,-1
 101563c:	00001306 	br	101568c <zynqmp_r5_a53_proc_notify+0x74>
	prproc = rproc->priv;
 1015640:	e13ffe17 	ldw	r4,-8(fp)
 1015644:	21000d17 	ldw	r4,52(r4)
 1015648:	e13ffd15 	stw	r4,-12(fp)

	/* TODO: use IPI driver instead and pass ID */
	metal_io_write32(prproc->ipi_io, IPI_TRIG_OFFSET,
 101564c:	e13ffd17 	ldw	r4,-12(fp)
 1015650:	22000317 	ldw	r8,12(r4)
 1015654:	e13ffd17 	ldw	r4,-12(fp)
 1015658:	21000417 	ldw	r4,16(r4)
 101565c:	2005883a 	mov	r2,r4
 1015660:	0007883a 	mov	r3,zero
 1015664:	01000104 	movi	r4,4
 1015668:	d9000115 	stw	r4,4(sp)
 101566c:	01000144 	movi	r4,5
 1015670:	d9000015 	stw	r4,0(sp)
 1015674:	100d883a 	mov	r6,r2
 1015678:	180f883a 	mov	r7,r3
 101567c:	000b883a 	mov	r5,zero
 1015680:	4009883a 	mov	r4,r8
 1015684:	1014e200 	call	1014e20 <metal_io_write>
			  prproc->ipi_chn_mask);
	return 0;
 1015688:	0005883a 	mov	r2,zero
}
 101568c:	e037883a 	mov	sp,fp
 1015690:	dfc00117 	ldw	ra,4(sp)
 1015694:	df000017 	ldw	fp,0(sp)
 1015698:	dec00204 	addi	sp,sp,8
 101569c:	f800283a 	ret

010156a0 <__assert_func>:
 10156a0:	008040f4 	movhi	r2,259
 10156a4:	10b2dc04 	addi	r2,r2,-13456
 10156a8:	10800017 	ldw	r2,0(r2)
 10156ac:	defffc04 	addi	sp,sp,-16
 10156b0:	dfc00315 	stw	ra,12(sp)
 10156b4:	2015883a 	mov	r10,r4
 10156b8:	2811883a 	mov	r8,r5
 10156bc:	3813883a 	mov	r9,r7
 10156c0:	11000317 	ldw	r4,12(r2)
 10156c4:	30000c26 	beq	r6,zero,10156f8 <__assert_func+0x58>
 10156c8:	00c040f4 	movhi	r3,259
 10156cc:	18e92904 	addi	r3,r3,-23388
 10156d0:	3005883a 	mov	r2,r6
 10156d4:	014040f4 	movhi	r5,259
 10156d8:	29692d04 	addi	r5,r5,-23372
 10156dc:	500f883a 	mov	r7,r10
 10156e0:	480d883a 	mov	r6,r9
 10156e4:	d8c00115 	stw	r3,4(sp)
 10156e8:	da000015 	stw	r8,0(sp)
 10156ec:	d8800215 	stw	r2,8(sp)
 10156f0:	101573c0 	call	101573c <fiprintf>
 10156f4:	101ad240 	call	101ad24 <abort>
 10156f8:	00c040f4 	movhi	r3,259
 10156fc:	18e92c04 	addi	r3,r3,-23376
 1015700:	1805883a 	mov	r2,r3
 1015704:	003ff306 	br	10156d4 <__alt_data_end+0xff0156d4>

01015708 <__assert>:
 1015708:	deffff04 	addi	sp,sp,-4
 101570c:	300f883a 	mov	r7,r6
 1015710:	000d883a 	mov	r6,zero
 1015714:	dfc00015 	stw	ra,0(sp)
 1015718:	10156a00 	call	10156a0 <__assert_func>

0101571c <_fiprintf_r>:
 101571c:	defffe04 	addi	sp,sp,-8
 1015720:	dfc00015 	stw	ra,0(sp)
 1015724:	d9c00115 	stw	r7,4(sp)
 1015728:	d9c00104 	addi	r7,sp,4
 101572c:	10188e80 	call	10188e8 <_vfiprintf_r>
 1015730:	dfc00017 	ldw	ra,0(sp)
 1015734:	dec00204 	addi	sp,sp,8
 1015738:	f800283a 	ret

0101573c <fiprintf>:
 101573c:	defffd04 	addi	sp,sp,-12
 1015740:	2005883a 	mov	r2,r4
 1015744:	dfc00015 	stw	ra,0(sp)
 1015748:	d9800115 	stw	r6,4(sp)
 101574c:	d9c00215 	stw	r7,8(sp)
 1015750:	00c040f4 	movhi	r3,259
 1015754:	18f2dc04 	addi	r3,r3,-13456
 1015758:	19000017 	ldw	r4,0(r3)
 101575c:	280d883a 	mov	r6,r5
 1015760:	d9c00104 	addi	r7,sp,4
 1015764:	100b883a 	mov	r5,r2
 1015768:	10188e80 	call	10188e8 <_vfiprintf_r>
 101576c:	dfc00017 	ldw	ra,0(sp)
 1015770:	dec00304 	addi	sp,sp,12
 1015774:	f800283a 	ret

01015778 <memcmp>:
 1015778:	01c000c4 	movi	r7,3
 101577c:	3980192e 	bgeu	r7,r6,10157e4 <memcmp+0x6c>
 1015780:	2144b03a 	or	r2,r4,r5
 1015784:	11c4703a 	and	r2,r2,r7
 1015788:	10000f26 	beq	r2,zero,10157c8 <memcmp+0x50>
 101578c:	20800003 	ldbu	r2,0(r4)
 1015790:	28c00003 	ldbu	r3,0(r5)
 1015794:	10c0151e 	bne	r2,r3,10157ec <memcmp+0x74>
 1015798:	31bfff84 	addi	r6,r6,-2
 101579c:	01ffffc4 	movi	r7,-1
 10157a0:	00000406 	br	10157b4 <memcmp+0x3c>
 10157a4:	20800003 	ldbu	r2,0(r4)
 10157a8:	28c00003 	ldbu	r3,0(r5)
 10157ac:	31bfffc4 	addi	r6,r6,-1
 10157b0:	10c00e1e 	bne	r2,r3,10157ec <memcmp+0x74>
 10157b4:	21000044 	addi	r4,r4,1
 10157b8:	29400044 	addi	r5,r5,1
 10157bc:	31fff91e 	bne	r6,r7,10157a4 <__alt_data_end+0xff0157a4>
 10157c0:	0005883a 	mov	r2,zero
 10157c4:	f800283a 	ret
 10157c8:	20c00017 	ldw	r3,0(r4)
 10157cc:	28800017 	ldw	r2,0(r5)
 10157d0:	18bfee1e 	bne	r3,r2,101578c <__alt_data_end+0xff01578c>
 10157d4:	31bfff04 	addi	r6,r6,-4
 10157d8:	21000104 	addi	r4,r4,4
 10157dc:	29400104 	addi	r5,r5,4
 10157e0:	39bff936 	bltu	r7,r6,10157c8 <__alt_data_end+0xff0157c8>
 10157e4:	303fe91e 	bne	r6,zero,101578c <__alt_data_end+0xff01578c>
 10157e8:	003ff506 	br	10157c0 <__alt_data_end+0xff0157c0>
 10157ec:	10c5c83a 	sub	r2,r2,r3
 10157f0:	f800283a 	ret

010157f4 <memcpy>:
 10157f4:	defffd04 	addi	sp,sp,-12
 10157f8:	dfc00215 	stw	ra,8(sp)
 10157fc:	dc400115 	stw	r17,4(sp)
 1015800:	dc000015 	stw	r16,0(sp)
 1015804:	00c003c4 	movi	r3,15
 1015808:	2005883a 	mov	r2,r4
 101580c:	1980452e 	bgeu	r3,r6,1015924 <memcpy+0x130>
 1015810:	2906b03a 	or	r3,r5,r4
 1015814:	18c000cc 	andi	r3,r3,3
 1015818:	1800441e 	bne	r3,zero,101592c <memcpy+0x138>
 101581c:	347ffc04 	addi	r17,r6,-16
 1015820:	8822d13a 	srli	r17,r17,4
 1015824:	28c00104 	addi	r3,r5,4
 1015828:	23400104 	addi	r13,r4,4
 101582c:	8820913a 	slli	r16,r17,4
 1015830:	2b000204 	addi	r12,r5,8
 1015834:	22c00204 	addi	r11,r4,8
 1015838:	84000504 	addi	r16,r16,20
 101583c:	2a800304 	addi	r10,r5,12
 1015840:	22400304 	addi	r9,r4,12
 1015844:	2c21883a 	add	r16,r5,r16
 1015848:	2811883a 	mov	r8,r5
 101584c:	200f883a 	mov	r7,r4
 1015850:	41000017 	ldw	r4,0(r8)
 1015854:	1fc00017 	ldw	ra,0(r3)
 1015858:	63c00017 	ldw	r15,0(r12)
 101585c:	39000015 	stw	r4,0(r7)
 1015860:	53800017 	ldw	r14,0(r10)
 1015864:	6fc00015 	stw	ra,0(r13)
 1015868:	5bc00015 	stw	r15,0(r11)
 101586c:	4b800015 	stw	r14,0(r9)
 1015870:	18c00404 	addi	r3,r3,16
 1015874:	39c00404 	addi	r7,r7,16
 1015878:	42000404 	addi	r8,r8,16
 101587c:	6b400404 	addi	r13,r13,16
 1015880:	63000404 	addi	r12,r12,16
 1015884:	5ac00404 	addi	r11,r11,16
 1015888:	52800404 	addi	r10,r10,16
 101588c:	4a400404 	addi	r9,r9,16
 1015890:	1c3fef1e 	bne	r3,r16,1015850 <__alt_data_end+0xff015850>
 1015894:	89c00044 	addi	r7,r17,1
 1015898:	380e913a 	slli	r7,r7,4
 101589c:	310003cc 	andi	r4,r6,15
 10158a0:	02c000c4 	movi	r11,3
 10158a4:	11c7883a 	add	r3,r2,r7
 10158a8:	29cb883a 	add	r5,r5,r7
 10158ac:	5900212e 	bgeu	r11,r4,1015934 <memcpy+0x140>
 10158b0:	1813883a 	mov	r9,r3
 10158b4:	2811883a 	mov	r8,r5
 10158b8:	200f883a 	mov	r7,r4
 10158bc:	42800017 	ldw	r10,0(r8)
 10158c0:	4a400104 	addi	r9,r9,4
 10158c4:	39ffff04 	addi	r7,r7,-4
 10158c8:	4abfff15 	stw	r10,-4(r9)
 10158cc:	42000104 	addi	r8,r8,4
 10158d0:	59fffa36 	bltu	r11,r7,10158bc <__alt_data_end+0xff0158bc>
 10158d4:	213fff04 	addi	r4,r4,-4
 10158d8:	2008d0ba 	srli	r4,r4,2
 10158dc:	318000cc 	andi	r6,r6,3
 10158e0:	21000044 	addi	r4,r4,1
 10158e4:	2109883a 	add	r4,r4,r4
 10158e8:	2109883a 	add	r4,r4,r4
 10158ec:	1907883a 	add	r3,r3,r4
 10158f0:	290b883a 	add	r5,r5,r4
 10158f4:	30000626 	beq	r6,zero,1015910 <memcpy+0x11c>
 10158f8:	198d883a 	add	r6,r3,r6
 10158fc:	29c00003 	ldbu	r7,0(r5)
 1015900:	18c00044 	addi	r3,r3,1
 1015904:	29400044 	addi	r5,r5,1
 1015908:	19ffffc5 	stb	r7,-1(r3)
 101590c:	19bffb1e 	bne	r3,r6,10158fc <__alt_data_end+0xff0158fc>
 1015910:	dfc00217 	ldw	ra,8(sp)
 1015914:	dc400117 	ldw	r17,4(sp)
 1015918:	dc000017 	ldw	r16,0(sp)
 101591c:	dec00304 	addi	sp,sp,12
 1015920:	f800283a 	ret
 1015924:	2007883a 	mov	r3,r4
 1015928:	003ff206 	br	10158f4 <__alt_data_end+0xff0158f4>
 101592c:	2007883a 	mov	r3,r4
 1015930:	003ff106 	br	10158f8 <__alt_data_end+0xff0158f8>
 1015934:	200d883a 	mov	r6,r4
 1015938:	003fee06 	br	10158f4 <__alt_data_end+0xff0158f4>

0101593c <memset>:
 101593c:	20c000cc 	andi	r3,r4,3
 1015940:	2005883a 	mov	r2,r4
 1015944:	18004426 	beq	r3,zero,1015a58 <memset+0x11c>
 1015948:	31ffffc4 	addi	r7,r6,-1
 101594c:	30004026 	beq	r6,zero,1015a50 <memset+0x114>
 1015950:	2813883a 	mov	r9,r5
 1015954:	200d883a 	mov	r6,r4
 1015958:	2007883a 	mov	r3,r4
 101595c:	00000406 	br	1015970 <memset+0x34>
 1015960:	3a3fffc4 	addi	r8,r7,-1
 1015964:	31800044 	addi	r6,r6,1
 1015968:	38003926 	beq	r7,zero,1015a50 <memset+0x114>
 101596c:	400f883a 	mov	r7,r8
 1015970:	18c00044 	addi	r3,r3,1
 1015974:	32400005 	stb	r9,0(r6)
 1015978:	1a0000cc 	andi	r8,r3,3
 101597c:	403ff81e 	bne	r8,zero,1015960 <__alt_data_end+0xff015960>
 1015980:	010000c4 	movi	r4,3
 1015984:	21c02d2e 	bgeu	r4,r7,1015a3c <memset+0x100>
 1015988:	29003fcc 	andi	r4,r5,255
 101598c:	200c923a 	slli	r6,r4,8
 1015990:	3108b03a 	or	r4,r6,r4
 1015994:	200c943a 	slli	r6,r4,16
 1015998:	218cb03a 	or	r6,r4,r6
 101599c:	010003c4 	movi	r4,15
 10159a0:	21c0182e 	bgeu	r4,r7,1015a04 <memset+0xc8>
 10159a4:	3b3ffc04 	addi	r12,r7,-16
 10159a8:	6018d13a 	srli	r12,r12,4
 10159ac:	1a000104 	addi	r8,r3,4
 10159b0:	1ac00204 	addi	r11,r3,8
 10159b4:	6008913a 	slli	r4,r12,4
 10159b8:	1a800304 	addi	r10,r3,12
 10159bc:	1813883a 	mov	r9,r3
 10159c0:	21000504 	addi	r4,r4,20
 10159c4:	1909883a 	add	r4,r3,r4
 10159c8:	49800015 	stw	r6,0(r9)
 10159cc:	41800015 	stw	r6,0(r8)
 10159d0:	59800015 	stw	r6,0(r11)
 10159d4:	51800015 	stw	r6,0(r10)
 10159d8:	42000404 	addi	r8,r8,16
 10159dc:	4a400404 	addi	r9,r9,16
 10159e0:	5ac00404 	addi	r11,r11,16
 10159e4:	52800404 	addi	r10,r10,16
 10159e8:	413ff71e 	bne	r8,r4,10159c8 <__alt_data_end+0xff0159c8>
 10159ec:	63000044 	addi	r12,r12,1
 10159f0:	6018913a 	slli	r12,r12,4
 10159f4:	39c003cc 	andi	r7,r7,15
 10159f8:	010000c4 	movi	r4,3
 10159fc:	1b07883a 	add	r3,r3,r12
 1015a00:	21c00e2e 	bgeu	r4,r7,1015a3c <memset+0x100>
 1015a04:	1813883a 	mov	r9,r3
 1015a08:	3811883a 	mov	r8,r7
 1015a0c:	010000c4 	movi	r4,3
 1015a10:	49800015 	stw	r6,0(r9)
 1015a14:	423fff04 	addi	r8,r8,-4
 1015a18:	4a400104 	addi	r9,r9,4
 1015a1c:	223ffc36 	bltu	r4,r8,1015a10 <__alt_data_end+0xff015a10>
 1015a20:	393fff04 	addi	r4,r7,-4
 1015a24:	2008d0ba 	srli	r4,r4,2
 1015a28:	39c000cc 	andi	r7,r7,3
 1015a2c:	21000044 	addi	r4,r4,1
 1015a30:	2109883a 	add	r4,r4,r4
 1015a34:	2109883a 	add	r4,r4,r4
 1015a38:	1907883a 	add	r3,r3,r4
 1015a3c:	38000526 	beq	r7,zero,1015a54 <memset+0x118>
 1015a40:	19cf883a 	add	r7,r3,r7
 1015a44:	19400005 	stb	r5,0(r3)
 1015a48:	18c00044 	addi	r3,r3,1
 1015a4c:	38fffd1e 	bne	r7,r3,1015a44 <__alt_data_end+0xff015a44>
 1015a50:	f800283a 	ret
 1015a54:	f800283a 	ret
 1015a58:	2007883a 	mov	r3,r4
 1015a5c:	300f883a 	mov	r7,r6
 1015a60:	003fc706 	br	1015980 <__alt_data_end+0xff015980>

01015a64 <_printf_r>:
 1015a64:	defffd04 	addi	sp,sp,-12
 1015a68:	2805883a 	mov	r2,r5
 1015a6c:	dfc00015 	stw	ra,0(sp)
 1015a70:	d9800115 	stw	r6,4(sp)
 1015a74:	d9c00215 	stw	r7,8(sp)
 1015a78:	21400217 	ldw	r5,8(r4)
 1015a7c:	d9c00104 	addi	r7,sp,4
 1015a80:	100d883a 	mov	r6,r2
 1015a84:	10189000 	call	1018900 <___vfprintf_internal_r>
 1015a88:	dfc00017 	ldw	ra,0(sp)
 1015a8c:	dec00304 	addi	sp,sp,12
 1015a90:	f800283a 	ret

01015a94 <printf>:
 1015a94:	defffc04 	addi	sp,sp,-16
 1015a98:	dfc00015 	stw	ra,0(sp)
 1015a9c:	d9400115 	stw	r5,4(sp)
 1015aa0:	d9800215 	stw	r6,8(sp)
 1015aa4:	d9c00315 	stw	r7,12(sp)
 1015aa8:	008040f4 	movhi	r2,259
 1015aac:	10b2dc04 	addi	r2,r2,-13456
 1015ab0:	10800017 	ldw	r2,0(r2)
 1015ab4:	200b883a 	mov	r5,r4
 1015ab8:	d9800104 	addi	r6,sp,4
 1015abc:	11000217 	ldw	r4,8(r2)
 1015ac0:	101aaf80 	call	101aaf8 <__vfprintf_internal>
 1015ac4:	dfc00017 	ldw	ra,0(sp)
 1015ac8:	dec00404 	addi	sp,sp,16
 1015acc:	f800283a 	ret

01015ad0 <_puts_r>:
 1015ad0:	defff604 	addi	sp,sp,-40
 1015ad4:	dc000715 	stw	r16,28(sp)
 1015ad8:	2021883a 	mov	r16,r4
 1015adc:	2809883a 	mov	r4,r5
 1015ae0:	dc400815 	stw	r17,32(sp)
 1015ae4:	dfc00915 	stw	ra,36(sp)
 1015ae8:	2823883a 	mov	r17,r5
 1015aec:	10164b40 	call	10164b4 <strlen>
 1015af0:	10c00044 	addi	r3,r2,1
 1015af4:	d8800115 	stw	r2,4(sp)
 1015af8:	008040f4 	movhi	r2,259
 1015afc:	10a93a04 	addi	r2,r2,-23320
 1015b00:	d8800215 	stw	r2,8(sp)
 1015b04:	00800044 	movi	r2,1
 1015b08:	d8800315 	stw	r2,12(sp)
 1015b0c:	00800084 	movi	r2,2
 1015b10:	dc400015 	stw	r17,0(sp)
 1015b14:	d8c00615 	stw	r3,24(sp)
 1015b18:	dec00415 	stw	sp,16(sp)
 1015b1c:	d8800515 	stw	r2,20(sp)
 1015b20:	80000226 	beq	r16,zero,1015b2c <_puts_r+0x5c>
 1015b24:	80800e17 	ldw	r2,56(r16)
 1015b28:	10001426 	beq	r2,zero,1015b7c <_puts_r+0xac>
 1015b2c:	81400217 	ldw	r5,8(r16)
 1015b30:	2880030b 	ldhu	r2,12(r5)
 1015b34:	10c8000c 	andi	r3,r2,8192
 1015b38:	1800061e 	bne	r3,zero,1015b54 <_puts_r+0x84>
 1015b3c:	29001917 	ldw	r4,100(r5)
 1015b40:	00f7ffc4 	movi	r3,-8193
 1015b44:	10880014 	ori	r2,r2,8192
 1015b48:	20c6703a 	and	r3,r4,r3
 1015b4c:	2880030d 	sth	r2,12(r5)
 1015b50:	28c01915 	stw	r3,100(r5)
 1015b54:	d9800404 	addi	r6,sp,16
 1015b58:	8009883a 	mov	r4,r16
 1015b5c:	101d0400 	call	101d040 <__sfvwrite_r>
 1015b60:	1000091e 	bne	r2,zero,1015b88 <_puts_r+0xb8>
 1015b64:	00800284 	movi	r2,10
 1015b68:	dfc00917 	ldw	ra,36(sp)
 1015b6c:	dc400817 	ldw	r17,32(sp)
 1015b70:	dc000717 	ldw	r16,28(sp)
 1015b74:	dec00a04 	addi	sp,sp,40
 1015b78:	f800283a 	ret
 1015b7c:	8009883a 	mov	r4,r16
 1015b80:	101cbbc0 	call	101cbbc <__sinit>
 1015b84:	003fe906 	br	1015b2c <__alt_data_end+0xff015b2c>
 1015b88:	00bfffc4 	movi	r2,-1
 1015b8c:	003ff606 	br	1015b68 <__alt_data_end+0xff015b68>

01015b90 <puts>:
 1015b90:	008040f4 	movhi	r2,259
 1015b94:	10b2dc04 	addi	r2,r2,-13456
 1015b98:	200b883a 	mov	r5,r4
 1015b9c:	11000017 	ldw	r4,0(r2)
 1015ba0:	1015ad01 	jmpi	1015ad0 <_puts_r>

01015ba4 <_snprintf_r>:
 1015ba4:	30003116 	blt	r6,zero,1015c6c <_snprintf_r+0xc8>
 1015ba8:	deffe404 	addi	sp,sp,-112
 1015bac:	00c08204 	movi	r3,520
 1015bb0:	dc001a15 	stw	r16,104(sp)
 1015bb4:	3005883a 	mov	r2,r6
 1015bb8:	dfc01b15 	stw	ra,108(sp)
 1015bbc:	d8c0030d 	sth	r3,12(sp)
 1015bc0:	d9400015 	stw	r5,0(sp)
 1015bc4:	d9400415 	stw	r5,16(sp)
 1015bc8:	380d883a 	mov	r6,r7
 1015bcc:	2021883a 	mov	r16,r4
 1015bd0:	10001026 	beq	r2,zero,1015c14 <_snprintf_r+0x70>
 1015bd4:	10bfffc4 	addi	r2,r2,-1
 1015bd8:	d8800215 	stw	r2,8(sp)
 1015bdc:	d8800515 	stw	r2,20(sp)
 1015be0:	d9c01c04 	addi	r7,sp,112
 1015be4:	00bfffc4 	movi	r2,-1
 1015be8:	d80b883a 	mov	r5,sp
 1015bec:	d880038d 	sth	r2,14(sp)
 1015bf0:	10167080 	call	1016708 <___svfprintf_internal_r>
 1015bf4:	00ffffc4 	movi	r3,-1
 1015bf8:	10c01316 	blt	r2,r3,1015c48 <_snprintf_r+0xa4>
 1015bfc:	d8c00017 	ldw	r3,0(sp)
 1015c00:	18000005 	stb	zero,0(r3)
 1015c04:	dfc01b17 	ldw	ra,108(sp)
 1015c08:	dc001a17 	ldw	r16,104(sp)
 1015c0c:	dec01c04 	addi	sp,sp,112
 1015c10:	f800283a 	ret
 1015c14:	00bfffc4 	movi	r2,-1
 1015c18:	d9c01c04 	addi	r7,sp,112
 1015c1c:	d80b883a 	mov	r5,sp
 1015c20:	d8000215 	stw	zero,8(sp)
 1015c24:	d8000515 	stw	zero,20(sp)
 1015c28:	d880038d 	sth	r2,14(sp)
 1015c2c:	10167080 	call	1016708 <___svfprintf_internal_r>
 1015c30:	00ffffc4 	movi	r3,-1
 1015c34:	10c00716 	blt	r2,r3,1015c54 <_snprintf_r+0xb0>
 1015c38:	dfc01b17 	ldw	ra,108(sp)
 1015c3c:	dc001a17 	ldw	r16,104(sp)
 1015c40:	dec01c04 	addi	sp,sp,112
 1015c44:	f800283a 	ret
 1015c48:	00c022c4 	movi	r3,139
 1015c4c:	80c00015 	stw	r3,0(r16)
 1015c50:	003fea06 	br	1015bfc <__alt_data_end+0xff015bfc>
 1015c54:	00c022c4 	movi	r3,139
 1015c58:	80c00015 	stw	r3,0(r16)
 1015c5c:	dfc01b17 	ldw	ra,108(sp)
 1015c60:	dc001a17 	ldw	r16,104(sp)
 1015c64:	dec01c04 	addi	sp,sp,112
 1015c68:	f800283a 	ret
 1015c6c:	008022c4 	movi	r2,139
 1015c70:	20800015 	stw	r2,0(r4)
 1015c74:	00bfffc4 	movi	r2,-1
 1015c78:	f800283a 	ret

01015c7c <snprintf>:
 1015c7c:	deffe304 	addi	sp,sp,-116
 1015c80:	dfc01b15 	stw	ra,108(sp)
 1015c84:	dc001a15 	stw	r16,104(sp)
 1015c88:	d9c01c15 	stw	r7,112(sp)
 1015c8c:	008040f4 	movhi	r2,259
 1015c90:	10b2dc04 	addi	r2,r2,-13456
 1015c94:	14000017 	ldw	r16,0(r2)
 1015c98:	28002d16 	blt	r5,zero,1015d50 <snprintf+0xd4>
 1015c9c:	00808204 	movi	r2,520
 1015ca0:	d880030d 	sth	r2,12(sp)
 1015ca4:	d9000015 	stw	r4,0(sp)
 1015ca8:	d9000415 	stw	r4,16(sp)
 1015cac:	28001126 	beq	r5,zero,1015cf4 <snprintf+0x78>
 1015cb0:	28bfffc4 	addi	r2,r5,-1
 1015cb4:	d8800215 	stw	r2,8(sp)
 1015cb8:	d8800515 	stw	r2,20(sp)
 1015cbc:	d9c01c04 	addi	r7,sp,112
 1015cc0:	00bfffc4 	movi	r2,-1
 1015cc4:	d80b883a 	mov	r5,sp
 1015cc8:	8009883a 	mov	r4,r16
 1015ccc:	d880038d 	sth	r2,14(sp)
 1015cd0:	10167080 	call	1016708 <___svfprintf_internal_r>
 1015cd4:	00ffffc4 	movi	r3,-1
 1015cd8:	10c01416 	blt	r2,r3,1015d2c <snprintf+0xb0>
 1015cdc:	d8c00017 	ldw	r3,0(sp)
 1015ce0:	18000005 	stb	zero,0(r3)
 1015ce4:	dfc01b17 	ldw	ra,108(sp)
 1015ce8:	dc001a17 	ldw	r16,104(sp)
 1015cec:	dec01d04 	addi	sp,sp,116
 1015cf0:	f800283a 	ret
 1015cf4:	00bfffc4 	movi	r2,-1
 1015cf8:	d9c01c04 	addi	r7,sp,112
 1015cfc:	d80b883a 	mov	r5,sp
 1015d00:	8009883a 	mov	r4,r16
 1015d04:	d8000215 	stw	zero,8(sp)
 1015d08:	d8000515 	stw	zero,20(sp)
 1015d0c:	d880038d 	sth	r2,14(sp)
 1015d10:	10167080 	call	1016708 <___svfprintf_internal_r>
 1015d14:	00ffffc4 	movi	r3,-1
 1015d18:	10c00716 	blt	r2,r3,1015d38 <snprintf+0xbc>
 1015d1c:	dfc01b17 	ldw	ra,108(sp)
 1015d20:	dc001a17 	ldw	r16,104(sp)
 1015d24:	dec01d04 	addi	sp,sp,116
 1015d28:	f800283a 	ret
 1015d2c:	00c022c4 	movi	r3,139
 1015d30:	80c00015 	stw	r3,0(r16)
 1015d34:	003fe906 	br	1015cdc <__alt_data_end+0xff015cdc>
 1015d38:	00c022c4 	movi	r3,139
 1015d3c:	80c00015 	stw	r3,0(r16)
 1015d40:	dfc01b17 	ldw	ra,108(sp)
 1015d44:	dc001a17 	ldw	r16,104(sp)
 1015d48:	dec01d04 	addi	sp,sp,116
 1015d4c:	f800283a 	ret
 1015d50:	008022c4 	movi	r2,139
 1015d54:	80800015 	stw	r2,0(r16)
 1015d58:	00bfffc4 	movi	r2,-1
 1015d5c:	003fef06 	br	1015d1c <__alt_data_end+0xff015d1c>

01015d60 <strcmp>:
 1015d60:	2144b03a 	or	r2,r4,r5
 1015d64:	108000cc 	andi	r2,r2,3
 1015d68:	1000171e 	bne	r2,zero,1015dc8 <strcmp+0x68>
 1015d6c:	20800017 	ldw	r2,0(r4)
 1015d70:	28c00017 	ldw	r3,0(r5)
 1015d74:	10c0141e 	bne	r2,r3,1015dc8 <strcmp+0x68>
 1015d78:	027fbff4 	movhi	r9,65279
 1015d7c:	4a7fbfc4 	addi	r9,r9,-257
 1015d80:	0086303a 	nor	r3,zero,r2
 1015d84:	02202074 	movhi	r8,32897
 1015d88:	1245883a 	add	r2,r2,r9
 1015d8c:	42202004 	addi	r8,r8,-32640
 1015d90:	10c4703a 	and	r2,r2,r3
 1015d94:	1204703a 	and	r2,r2,r8
 1015d98:	10000226 	beq	r2,zero,1015da4 <strcmp+0x44>
 1015d9c:	00002306 	br	1015e2c <strcmp+0xcc>
 1015da0:	1000221e 	bne	r2,zero,1015e2c <strcmp+0xcc>
 1015da4:	21000104 	addi	r4,r4,4
 1015da8:	20c00017 	ldw	r3,0(r4)
 1015dac:	29400104 	addi	r5,r5,4
 1015db0:	29800017 	ldw	r6,0(r5)
 1015db4:	1a4f883a 	add	r7,r3,r9
 1015db8:	00c4303a 	nor	r2,zero,r3
 1015dbc:	3884703a 	and	r2,r7,r2
 1015dc0:	1204703a 	and	r2,r2,r8
 1015dc4:	19bff626 	beq	r3,r6,1015da0 <__alt_data_end+0xff015da0>
 1015dc8:	20800003 	ldbu	r2,0(r4)
 1015dcc:	10c03fcc 	andi	r3,r2,255
 1015dd0:	18c0201c 	xori	r3,r3,128
 1015dd4:	18ffe004 	addi	r3,r3,-128
 1015dd8:	18000c26 	beq	r3,zero,1015e0c <strcmp+0xac>
 1015ddc:	29800007 	ldb	r6,0(r5)
 1015de0:	19800326 	beq	r3,r6,1015df0 <strcmp+0x90>
 1015de4:	00001306 	br	1015e34 <strcmp+0xd4>
 1015de8:	29800007 	ldb	r6,0(r5)
 1015dec:	11800b1e 	bne	r2,r6,1015e1c <strcmp+0xbc>
 1015df0:	21000044 	addi	r4,r4,1
 1015df4:	20c00003 	ldbu	r3,0(r4)
 1015df8:	29400044 	addi	r5,r5,1
 1015dfc:	18803fcc 	andi	r2,r3,255
 1015e00:	1080201c 	xori	r2,r2,128
 1015e04:	10bfe004 	addi	r2,r2,-128
 1015e08:	103ff71e 	bne	r2,zero,1015de8 <__alt_data_end+0xff015de8>
 1015e0c:	0007883a 	mov	r3,zero
 1015e10:	28800003 	ldbu	r2,0(r5)
 1015e14:	1885c83a 	sub	r2,r3,r2
 1015e18:	f800283a 	ret
 1015e1c:	28800003 	ldbu	r2,0(r5)
 1015e20:	18c03fcc 	andi	r3,r3,255
 1015e24:	1885c83a 	sub	r2,r3,r2
 1015e28:	f800283a 	ret
 1015e2c:	0005883a 	mov	r2,zero
 1015e30:	f800283a 	ret
 1015e34:	10c03fcc 	andi	r3,r2,255
 1015e38:	003ff506 	br	1015e10 <__alt_data_end+0xff015e10>

01015e3c <_strerror_r>:
 1015e3c:	deffff04 	addi	sp,sp,-4
 1015e40:	2807883a 	mov	r3,r5
 1015e44:	dfc00015 	stw	ra,0(sp)
 1015e48:	00802384 	movi	r2,142
 1015e4c:	300b883a 	mov	r5,r6
 1015e50:	10c18736 	bltu	r2,r3,1016470 <_strerror_r+0x634>
 1015e54:	181090ba 	slli	r8,r3,2
 1015e58:	00804074 	movhi	r2,257
 1015e5c:	10979b04 	addi	r2,r2,24172
 1015e60:	4085883a 	add	r2,r8,r2
 1015e64:	10800017 	ldw	r2,0(r2)
 1015e68:	1000683a 	jmp	r2
 1015e6c:	010160a8 	cmpgeui	r4,zero,1410
 1015e70:	01016464 	muli	r4,zero,1425
 1015e74:	01016458 	cmpnei	r4,zero,1425
 1015e78:	0101644c 	andi	r4,zero,1425
 1015e7c:	01016440 	call	101644 <__alt_mem_sdram-0xefe9bc>
 1015e80:	01016434 	movhi	r4,1424
 1015e84:	01016428 	cmpgeui	r4,zero,1424
 1015e88:	0101641c 	xori	r4,zero,1424
 1015e8c:	01016410 	cmplti	r4,zero,1424
 1015e90:	01016404 	movi	r4,1424
 1015e94:	010163f8 	rdprs	r4,zero,1423
 1015e98:	010163ec 	andhi	r4,zero,1423
 1015e9c:	010163e0 	cmpeqi	r4,zero,1423
 1015ea0:	010163d4 	movui	r4,1423
 1015ea4:	010163c8 	cmpgei	r4,zero,1423
 1015ea8:	01016470 	cmpltui	r4,zero,1425
 1015eac:	010163bc 	xorhi	r4,zero,1422
 1015eb0:	010163b0 	cmpltui	r4,zero,1422
 1015eb4:	010163a4 	muli	r4,zero,1422
 1015eb8:	01016398 	cmpnei	r4,zero,1422
 1015ebc:	0101638c 	andi	r4,zero,1422
 1015ec0:	01016380 	call	101638 <__alt_mem_sdram-0xefe9c8>
 1015ec4:	01016374 	movhi	r4,1421
 1015ec8:	01016368 	cmpgeui	r4,zero,1421
 1015ecc:	0101635c 	xori	r4,zero,1421
 1015ed0:	01016350 	cmplti	r4,zero,1421
 1015ed4:	01016344 	movi	r4,1421
 1015ed8:	01016338 	rdprs	r4,zero,1420
 1015edc:	0101632c 	andhi	r4,zero,1420
 1015ee0:	01016320 	cmpeqi	r4,zero,1420
 1015ee4:	01016314 	movui	r4,1420
 1015ee8:	01016308 	cmpgei	r4,zero,1420
 1015eec:	010162fc 	xorhi	r4,zero,1419
 1015ef0:	010162f0 	cmpltui	r4,zero,1419
 1015ef4:	010162e4 	muli	r4,zero,1419
 1015ef8:	010162d8 	cmpnei	r4,zero,1419
 1015efc:	010162cc 	andi	r4,zero,1419
 1015f00:	01016470 	cmpltui	r4,zero,1425
 1015f04:	01016470 	cmpltui	r4,zero,1425
 1015f08:	01016470 	cmpltui	r4,zero,1425
 1015f0c:	01016470 	cmpltui	r4,zero,1425
 1015f10:	01016470 	cmpltui	r4,zero,1425
 1015f14:	01016470 	cmpltui	r4,zero,1425
 1015f18:	01016470 	cmpltui	r4,zero,1425
 1015f1c:	01016470 	cmpltui	r4,zero,1425
 1015f20:	010162c0 	call	10162c <__alt_mem_sdram-0xefe9d4>
 1015f24:	010162b4 	movhi	r4,1418
 1015f28:	01016470 	cmpltui	r4,zero,1425
 1015f2c:	01016470 	cmpltui	r4,zero,1425
 1015f30:	01016470 	cmpltui	r4,zero,1425
 1015f34:	01016470 	cmpltui	r4,zero,1425
 1015f38:	01016470 	cmpltui	r4,zero,1425
 1015f3c:	01016470 	cmpltui	r4,zero,1425
 1015f40:	01016470 	cmpltui	r4,zero,1425
 1015f44:	01016470 	cmpltui	r4,zero,1425
 1015f48:	01016470 	cmpltui	r4,zero,1425
 1015f4c:	01016470 	cmpltui	r4,zero,1425
 1015f50:	01016470 	cmpltui	r4,zero,1425
 1015f54:	01016470 	cmpltui	r4,zero,1425
 1015f58:	01016470 	cmpltui	r4,zero,1425
 1015f5c:	010162a8 	cmpgeui	r4,zero,1418
 1015f60:	0101629c 	xori	r4,zero,1418
 1015f64:	01016290 	cmplti	r4,zero,1418
 1015f68:	01016284 	movi	r4,1418
 1015f6c:	01016470 	cmpltui	r4,zero,1425
 1015f70:	01016470 	cmpltui	r4,zero,1425
 1015f74:	01016470 	cmpltui	r4,zero,1425
 1015f78:	01016278 	rdprs	r4,zero,1417
 1015f7c:	01016470 	cmpltui	r4,zero,1425
 1015f80:	01016470 	cmpltui	r4,zero,1425
 1015f84:	01016470 	cmpltui	r4,zero,1425
 1015f88:	0101626c 	andhi	r4,zero,1417
 1015f8c:	01016470 	cmpltui	r4,zero,1425
 1015f90:	01016470 	cmpltui	r4,zero,1425
 1015f94:	01016260 	cmpeqi	r4,zero,1417
 1015f98:	01016470 	cmpltui	r4,zero,1425
 1015f9c:	01016470 	cmpltui	r4,zero,1425
 1015fa0:	01016254 	movui	r4,1417
 1015fa4:	01016470 	cmpltui	r4,zero,1425
 1015fa8:	01016470 	cmpltui	r4,zero,1425
 1015fac:	01016470 	cmpltui	r4,zero,1425
 1015fb0:	01016470 	cmpltui	r4,zero,1425
 1015fb4:	01016470 	cmpltui	r4,zero,1425
 1015fb8:	01016470 	cmpltui	r4,zero,1425
 1015fbc:	01016470 	cmpltui	r4,zero,1425
 1015fc0:	01016470 	cmpltui	r4,zero,1425
 1015fc4:	01016470 	cmpltui	r4,zero,1425
 1015fc8:	01016470 	cmpltui	r4,zero,1425
 1015fcc:	01016248 	cmpgei	r4,zero,1417
 1015fd0:	01016470 	cmpltui	r4,zero,1425
 1015fd4:	0101623c 	xorhi	r4,zero,1416
 1015fd8:	01016230 	cmpltui	r4,zero,1416
 1015fdc:	01016224 	muli	r4,zero,1416
 1015fe0:	01016470 	cmpltui	r4,zero,1425
 1015fe4:	01016470 	cmpltui	r4,zero,1425
 1015fe8:	01016218 	cmpnei	r4,zero,1416
 1015fec:	01016470 	cmpltui	r4,zero,1425
 1015ff0:	01016470 	cmpltui	r4,zero,1425
 1015ff4:	01016470 	cmpltui	r4,zero,1425
 1015ff8:	01016470 	cmpltui	r4,zero,1425
 1015ffc:	01016470 	cmpltui	r4,zero,1425
 1016000:	01016470 	cmpltui	r4,zero,1425
 1016004:	01016470 	cmpltui	r4,zero,1425
 1016008:	01016470 	cmpltui	r4,zero,1425
 101600c:	0101620c 	andi	r4,zero,1416
 1016010:	01016200 	call	101620 <__alt_mem_sdram-0xefe9e0>
 1016014:	010161f4 	movhi	r4,1415
 1016018:	010161e8 	cmpgeui	r4,zero,1415
 101601c:	010161dc 	xori	r4,zero,1415
 1016020:	010161d0 	cmplti	r4,zero,1415
 1016024:	01016470 	cmpltui	r4,zero,1425
 1016028:	010161c4 	movi	r4,1415
 101602c:	010161b8 	rdprs	r4,zero,1414
 1016030:	010161ac 	andhi	r4,zero,1414
 1016034:	010161a0 	cmpeqi	r4,zero,1414
 1016038:	01016194 	movui	r4,1414
 101603c:	01016188 	cmpgei	r4,zero,1414
 1016040:	0101617c 	xorhi	r4,zero,1413
 1016044:	01016170 	cmpltui	r4,zero,1413
 1016048:	01016164 	muli	r4,zero,1413
 101604c:	01016158 	cmpnei	r4,zero,1413
 1016050:	0101614c 	andi	r4,zero,1413
 1016054:	01016140 	call	101614 <__alt_mem_sdram-0xefe9ec>
 1016058:	01016134 	movhi	r4,1412
 101605c:	01016470 	cmpltui	r4,zero,1425
 1016060:	01016128 	cmpgeui	r4,zero,1412
 1016064:	0101611c 	xori	r4,zero,1412
 1016068:	01016110 	cmplti	r4,zero,1412
 101606c:	01016104 	movi	r4,1412
 1016070:	01016470 	cmpltui	r4,zero,1425
 1016074:	01016470 	cmpltui	r4,zero,1425
 1016078:	01016470 	cmpltui	r4,zero,1425
 101607c:	01016470 	cmpltui	r4,zero,1425
 1016080:	01016470 	cmpltui	r4,zero,1425
 1016084:	010160f8 	rdprs	r4,zero,1411
 1016088:	01016470 	cmpltui	r4,zero,1425
 101608c:	01016470 	cmpltui	r4,zero,1425
 1016090:	01016470 	cmpltui	r4,zero,1425
 1016094:	010160ec 	andhi	r4,zero,1411
 1016098:	010160e0 	cmpeqi	r4,zero,1411
 101609c:	010160d4 	movui	r4,1411
 10160a0:	010160c8 	cmpgei	r4,zero,1411
 10160a4:	010160bc 	xorhi	r4,zero,1410
 10160a8:	008040f4 	movhi	r2,259
 10160ac:	10a93b04 	addi	r2,r2,-23316
 10160b0:	dfc00017 	ldw	ra,0(sp)
 10160b4:	dec00104 	addi	sp,sp,4
 10160b8:	f800283a 	ret
 10160bc:	008040f4 	movhi	r2,259
 10160c0:	10aad804 	addi	r2,r2,-21664
 10160c4:	003ffa06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10160c8:	008040f4 	movhi	r2,259
 10160cc:	10aad204 	addi	r2,r2,-21688
 10160d0:	003ff706 	br	10160b0 <__alt_data_end+0xff0160b0>
 10160d4:	008040f4 	movhi	r2,259
 10160d8:	10aacd04 	addi	r2,r2,-21708
 10160dc:	003ff406 	br	10160b0 <__alt_data_end+0xff0160b0>
 10160e0:	008040f4 	movhi	r2,259
 10160e4:	10aae604 	addi	r2,r2,-21608
 10160e8:	003ff106 	br	10160b0 <__alt_data_end+0xff0160b0>
 10160ec:	008040f4 	movhi	r2,259
 10160f0:	10aa2404 	addi	r2,r2,-22384
 10160f4:	003fee06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10160f8:	008040f4 	movhi	r2,259
 10160fc:	10a9f204 	addi	r2,r2,-22584
 1016100:	003feb06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016104:	008040f4 	movhi	r2,259
 1016108:	10aac004 	addi	r2,r2,-21760
 101610c:	003fe806 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016110:	008040f4 	movhi	r2,259
 1016114:	10aac604 	addi	r2,r2,-21736
 1016118:	003fe506 	br	10160b0 <__alt_data_end+0xff0160b0>
 101611c:	008040f4 	movhi	r2,259
 1016120:	10a9c104 	addi	r2,r2,-22780
 1016124:	003fe206 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016128:	008040f4 	movhi	r2,259
 101612c:	10aab104 	addi	r2,r2,-21820
 1016130:	003fdf06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016134:	008040f4 	movhi	r2,259
 1016138:	10aa4e04 	addi	r2,r2,-22216
 101613c:	003fdc06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016140:	008040f4 	movhi	r2,259
 1016144:	10aaf004 	addi	r2,r2,-21568
 1016148:	003fd906 	br	10160b0 <__alt_data_end+0xff0160b0>
 101614c:	008040f4 	movhi	r2,259
 1016150:	10a97304 	addi	r2,r2,-23092
 1016154:	003fd606 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016158:	008040f4 	movhi	r2,259
 101615c:	10a96504 	addi	r2,r2,-23148
 1016160:	003fd306 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016164:	008040f4 	movhi	r2,259
 1016168:	10a9a704 	addi	r2,r2,-22884
 101616c:	003fd006 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016170:	008040f4 	movhi	r2,259
 1016174:	10a9e704 	addi	r2,r2,-22628
 1016178:	003fcd06 	br	10160b0 <__alt_data_end+0xff0160b0>
 101617c:	008040f4 	movhi	r2,259
 1016180:	10a9a304 	addi	r2,r2,-22900
 1016184:	003fca06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016188:	008040f4 	movhi	r2,259
 101618c:	10aaf504 	addi	r2,r2,-21548
 1016190:	003fc706 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016194:	008040f4 	movhi	r2,259
 1016198:	10a9b804 	addi	r2,r2,-22816
 101619c:	003fc406 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161a0:	008040f4 	movhi	r2,259
 10161a4:	10aa2d04 	addi	r2,r2,-22348
 10161a8:	003fc106 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161ac:	008040f4 	movhi	r2,259
 10161b0:	10aab704 	addi	r2,r2,-21796
 10161b4:	003fbe06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161b8:	008040f4 	movhi	r2,259
 10161bc:	10aaab04 	addi	r2,r2,-21844
 10161c0:	003fbb06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161c4:	008040f4 	movhi	r2,259
 10161c8:	10aa9f04 	addi	r2,r2,-21892
 10161cc:	003fb806 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161d0:	008040f4 	movhi	r2,259
 10161d4:	10aa9904 	addi	r2,r2,-21916
 10161d8:	003fb506 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161dc:	008040f4 	movhi	r2,259
 10161e0:	10aa9104 	addi	r2,r2,-21948
 10161e4:	003fb206 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161e8:	008040f4 	movhi	r2,259
 10161ec:	10aa8904 	addi	r2,r2,-21980
 10161f0:	003faf06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10161f4:	008040f4 	movhi	r2,259
 10161f8:	10aa7d04 	addi	r2,r2,-22028
 10161fc:	003fac06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016200:	008040f4 	movhi	r2,259
 1016204:	10aa7404 	addi	r2,r2,-22064
 1016208:	003fa906 	br	10160b0 <__alt_data_end+0xff0160b0>
 101620c:	008040f4 	movhi	r2,259
 1016210:	10aaa404 	addi	r2,r2,-21872
 1016214:	003fa606 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016218:	008040f4 	movhi	r2,259
 101621c:	10aadd04 	addi	r2,r2,-21644
 1016220:	003fa306 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016224:	008040f4 	movhi	r2,259
 1016228:	10aa6e04 	addi	r2,r2,-22088
 101622c:	003fa006 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016230:	008040f4 	movhi	r2,259
 1016234:	10aa6704 	addi	r2,r2,-22116
 1016238:	003f9d06 	br	10160b0 <__alt_data_end+0xff0160b0>
 101623c:	008040f4 	movhi	r2,259
 1016240:	10aa6204 	addi	r2,r2,-22136
 1016244:	003f9a06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016248:	008040f4 	movhi	r2,259
 101624c:	10aa5b04 	addi	r2,r2,-22164
 1016250:	003f9706 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016254:	008040f4 	movhi	r2,259
 1016258:	10aa5804 	addi	r2,r2,-22176
 101625c:	003f9406 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016260:	008040f4 	movhi	r2,259
 1016264:	10aa5304 	addi	r2,r2,-22196
 1016268:	003f9106 	br	10160b0 <__alt_data_end+0xff0160b0>
 101626c:	008040f4 	movhi	r2,259
 1016270:	10aa4a04 	addi	r2,r2,-22232
 1016274:	003f8e06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016278:	008040f4 	movhi	r2,259
 101627c:	10aa4404 	addi	r2,r2,-22256
 1016280:	003f8b06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016284:	008040f4 	movhi	r2,259
 1016288:	10aa3f04 	addi	r2,r2,-22276
 101628c:	003f8806 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016290:	008040f4 	movhi	r2,259
 1016294:	10aa3904 	addi	r2,r2,-22300
 1016298:	003f8506 	br	10160b0 <__alt_data_end+0xff0160b0>
 101629c:	008040f4 	movhi	r2,259
 10162a0:	10aa7b04 	addi	r2,r2,-22036
 10162a4:	003f8206 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162a8:	008040f4 	movhi	r2,259
 10162ac:	10aa3504 	addi	r2,r2,-22316
 10162b0:	003f7f06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162b4:	008040f4 	movhi	r2,259
 10162b8:	10aa3304 	addi	r2,r2,-22324
 10162bc:	003f7c06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162c0:	008040f4 	movhi	r2,259
 10162c4:	10aa2a04 	addi	r2,r2,-22360
 10162c8:	003f7906 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162cc:	008040f4 	movhi	r2,259
 10162d0:	10aa1f04 	addi	r2,r2,-22404
 10162d4:	003f7606 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162d8:	008040f4 	movhi	r2,259
 10162dc:	10aa1804 	addi	r2,r2,-22432
 10162e0:	003f7306 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162e4:	008040f4 	movhi	r2,259
 10162e8:	10aa1304 	addi	r2,r2,-22452
 10162ec:	003f7006 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162f0:	008040f4 	movhi	r2,259
 10162f4:	10aa0704 	addi	r2,r2,-22500
 10162f8:	003f6d06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10162fc:	008040f4 	movhi	r2,259
 1016300:	10aa0404 	addi	r2,r2,-22512
 1016304:	003f6a06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016308:	008040f4 	movhi	r2,259
 101630c:	10aa0004 	addi	r2,r2,-22528
 1016310:	003f6706 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016314:	008040f4 	movhi	r2,259
 1016318:	10a9fa04 	addi	r2,r2,-22552
 101631c:	003f6406 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016320:	008040f4 	movhi	r2,259
 1016324:	10a9f604 	addi	r2,r2,-22568
 1016328:	003f6106 	br	10160b0 <__alt_data_end+0xff0160b0>
 101632c:	008040f4 	movhi	r2,259
 1016330:	10a9ec04 	addi	r2,r2,-22608
 1016334:	003f5e06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016338:	008040f4 	movhi	r2,259
 101633c:	10a9e304 	addi	r2,r2,-22644
 1016340:	003f5b06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016344:	008040f4 	movhi	r2,259
 1016348:	10a9df04 	addi	r2,r2,-22660
 101634c:	003f5806 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016350:	008040f4 	movhi	r2,259
 1016354:	10a9d904 	addi	r2,r2,-22684
 1016358:	003f5506 	br	10160b0 <__alt_data_end+0xff0160b0>
 101635c:	008040f4 	movhi	r2,259
 1016360:	10a9d104 	addi	r2,r2,-22716
 1016364:	003f5206 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016368:	008040f4 	movhi	r2,259
 101636c:	10a9c904 	addi	r2,r2,-22748
 1016370:	003f4f06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016374:	008040f4 	movhi	r2,259
 1016378:	10a9b304 	addi	r2,r2,-22836
 101637c:	003f4c06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016380:	008040f4 	movhi	r2,259
 1016384:	10a9af04 	addi	r2,r2,-22852
 1016388:	003f4906 	br	10160b0 <__alt_data_end+0xff0160b0>
 101638c:	008040f4 	movhi	r2,259
 1016390:	10a99f04 	addi	r2,r2,-22916
 1016394:	003f4606 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016398:	008040f4 	movhi	r2,259
 101639c:	10a99b04 	addi	r2,r2,-22932
 10163a0:	003f4306 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163a4:	008040f4 	movhi	r2,259
 10163a8:	10a99604 	addi	r2,r2,-22952
 10163ac:	003f4006 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163b0:	008040f4 	movhi	r2,259
 10163b4:	10a99304 	addi	r2,r2,-22964
 10163b8:	003f3d06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163bc:	008040f4 	movhi	r2,259
 10163c0:	10a98d04 	addi	r2,r2,-22988
 10163c4:	003f3a06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163c8:	008040f4 	movhi	r2,259
 10163cc:	10a98a04 	addi	r2,r2,-23000
 10163d0:	003f3706 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163d4:	008040f4 	movhi	r2,259
 10163d8:	10a98504 	addi	r2,r2,-23020
 10163dc:	003f3406 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163e0:	008040f4 	movhi	r2,259
 10163e4:	10a98004 	addi	r2,r2,-23040
 10163e8:	003f3106 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163ec:	008040f4 	movhi	r2,259
 10163f0:	10a97b04 	addi	r2,r2,-23060
 10163f4:	003f2e06 	br	10160b0 <__alt_data_end+0xff0160b0>
 10163f8:	008040f4 	movhi	r2,259
 10163fc:	10a97004 	addi	r2,r2,-23104
 1016400:	003f2b06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016404:	008040f4 	movhi	r2,259
 1016408:	10a96c04 	addi	r2,r2,-23120
 101640c:	003f2806 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016410:	008040f4 	movhi	r2,259
 1016414:	10a96004 	addi	r2,r2,-23168
 1016418:	003f2506 	br	10160b0 <__alt_data_end+0xff0160b0>
 101641c:	008040f4 	movhi	r2,259
 1016420:	10a95b04 	addi	r2,r2,-23188
 1016424:	003f2206 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016428:	008040f4 	movhi	r2,259
 101642c:	10a95404 	addi	r2,r2,-23216
 1016430:	003f1f06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016434:	008040f4 	movhi	r2,259
 1016438:	10a95104 	addi	r2,r2,-23228
 101643c:	003f1c06 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016440:	008040f4 	movhi	r2,259
 1016444:	10a94b04 	addi	r2,r2,-23252
 1016448:	003f1906 	br	10160b0 <__alt_data_end+0xff0160b0>
 101644c:	008040f4 	movhi	r2,259
 1016450:	10a94704 	addi	r2,r2,-23268
 1016454:	003f1606 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016458:	008040f4 	movhi	r2,259
 101645c:	10a94004 	addi	r2,r2,-23296
 1016460:	003f1306 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016464:	008040f4 	movhi	r2,259
 1016468:	10a93d04 	addi	r2,r2,-23308
 101646c:	003f1006 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016470:	38000726 	beq	r7,zero,1016490 <_strerror_r+0x654>
 1016474:	380d883a 	mov	r6,r7
 1016478:	1809883a 	mov	r4,r3
 101647c:	10188e00 	call	10188e0 <_user_strerror>
 1016480:	103f0b1e 	bne	r2,zero,10160b0 <__alt_data_end+0xff0160b0>
 1016484:	008040f4 	movhi	r2,259
 1016488:	10a92c04 	addi	r2,r2,-23376
 101648c:	003f0806 	br	10160b0 <__alt_data_end+0xff0160b0>
 1016490:	200f883a 	mov	r7,r4
 1016494:	003ff706 	br	1016474 <__alt_data_end+0xff016474>

01016498 <strerror>:
 1016498:	008040f4 	movhi	r2,259
 101649c:	10b2dc04 	addi	r2,r2,-13456
 10164a0:	200b883a 	mov	r5,r4
 10164a4:	11000017 	ldw	r4,0(r2)
 10164a8:	000f883a 	mov	r7,zero
 10164ac:	000d883a 	mov	r6,zero
 10164b0:	1015e3c1 	jmpi	1015e3c <_strerror_r>

010164b4 <strlen>:
 10164b4:	208000cc 	andi	r2,r4,3
 10164b8:	10002026 	beq	r2,zero,101653c <strlen+0x88>
 10164bc:	20800007 	ldb	r2,0(r4)
 10164c0:	10002026 	beq	r2,zero,1016544 <strlen+0x90>
 10164c4:	2005883a 	mov	r2,r4
 10164c8:	00000206 	br	10164d4 <strlen+0x20>
 10164cc:	10c00007 	ldb	r3,0(r2)
 10164d0:	18001826 	beq	r3,zero,1016534 <strlen+0x80>
 10164d4:	10800044 	addi	r2,r2,1
 10164d8:	10c000cc 	andi	r3,r2,3
 10164dc:	183ffb1e 	bne	r3,zero,10164cc <__alt_data_end+0xff0164cc>
 10164e0:	10c00017 	ldw	r3,0(r2)
 10164e4:	01ffbff4 	movhi	r7,65279
 10164e8:	39ffbfc4 	addi	r7,r7,-257
 10164ec:	00ca303a 	nor	r5,zero,r3
 10164f0:	01a02074 	movhi	r6,32897
 10164f4:	19c7883a 	add	r3,r3,r7
 10164f8:	31a02004 	addi	r6,r6,-32640
 10164fc:	1946703a 	and	r3,r3,r5
 1016500:	1986703a 	and	r3,r3,r6
 1016504:	1800091e 	bne	r3,zero,101652c <strlen+0x78>
 1016508:	10800104 	addi	r2,r2,4
 101650c:	10c00017 	ldw	r3,0(r2)
 1016510:	19cb883a 	add	r5,r3,r7
 1016514:	00c6303a 	nor	r3,zero,r3
 1016518:	28c6703a 	and	r3,r5,r3
 101651c:	1986703a 	and	r3,r3,r6
 1016520:	183ff926 	beq	r3,zero,1016508 <__alt_data_end+0xff016508>
 1016524:	00000106 	br	101652c <strlen+0x78>
 1016528:	10800044 	addi	r2,r2,1
 101652c:	10c00007 	ldb	r3,0(r2)
 1016530:	183ffd1e 	bne	r3,zero,1016528 <__alt_data_end+0xff016528>
 1016534:	1105c83a 	sub	r2,r2,r4
 1016538:	f800283a 	ret
 101653c:	2005883a 	mov	r2,r4
 1016540:	003fe706 	br	10164e0 <__alt_data_end+0xff0164e0>
 1016544:	0005883a 	mov	r2,zero
 1016548:	f800283a 	ret

0101654c <strncmp>:
 101654c:	30003126 	beq	r6,zero,1016614 <strncmp+0xc8>
 1016550:	2144b03a 	or	r2,r4,r5
 1016554:	108000cc 	andi	r2,r2,3
 1016558:	10001e1e 	bne	r2,zero,10165d4 <strncmp+0x88>
 101655c:	024000c4 	movi	r9,3
 1016560:	49801c2e 	bgeu	r9,r6,10165d4 <strncmp+0x88>
 1016564:	20800017 	ldw	r2,0(r4)
 1016568:	28c00017 	ldw	r3,0(r5)
 101656c:	10c0191e 	bne	r2,r3,10165d4 <strncmp+0x88>
 1016570:	31bfff04 	addi	r6,r6,-4
 1016574:	30002726 	beq	r6,zero,1016614 <strncmp+0xc8>
 1016578:	02ffbff4 	movhi	r11,65279
 101657c:	5affbfc4 	addi	r11,r11,-257
 1016580:	0086303a 	nor	r3,zero,r2
 1016584:	02a02074 	movhi	r10,32897
 1016588:	12c5883a 	add	r2,r2,r11
 101658c:	52a02004 	addi	r10,r10,-32640
 1016590:	10c4703a 	and	r2,r2,r3
 1016594:	1284703a 	and	r2,r2,r10
 1016598:	10000b26 	beq	r2,zero,10165c8 <strncmp+0x7c>
 101659c:	00001d06 	br	1016614 <strncmp+0xc8>
 10165a0:	20c00017 	ldw	r3,0(r4)
 10165a4:	29c00017 	ldw	r7,0(r5)
 10165a8:	1ad1883a 	add	r8,r3,r11
 10165ac:	00c4303a 	nor	r2,zero,r3
 10165b0:	4084703a 	and	r2,r8,r2
 10165b4:	1284703a 	and	r2,r2,r10
 10165b8:	19c0061e 	bne	r3,r7,10165d4 <strncmp+0x88>
 10165bc:	31bfff04 	addi	r6,r6,-4
 10165c0:	30001426 	beq	r6,zero,1016614 <strncmp+0xc8>
 10165c4:	1000131e 	bne	r2,zero,1016614 <strncmp+0xc8>
 10165c8:	21000104 	addi	r4,r4,4
 10165cc:	29400104 	addi	r5,r5,4
 10165d0:	49bff336 	bltu	r9,r6,10165a0 <__alt_data_end+0xff0165a0>
 10165d4:	28800007 	ldb	r2,0(r5)
 10165d8:	20c00007 	ldb	r3,0(r4)
 10165dc:	31bfffc4 	addi	r6,r6,-1
 10165e0:	10c0081e 	bne	r2,r3,1016604 <strncmp+0xb8>
 10165e4:	30000b26 	beq	r6,zero,1016614 <strncmp+0xc8>
 10165e8:	10000a26 	beq	r2,zero,1016614 <strncmp+0xc8>
 10165ec:	21000044 	addi	r4,r4,1
 10165f0:	29400044 	addi	r5,r5,1
 10165f4:	20800007 	ldb	r2,0(r4)
 10165f8:	28c00007 	ldb	r3,0(r5)
 10165fc:	31bfffc4 	addi	r6,r6,-1
 1016600:	10fff826 	beq	r2,r3,10165e4 <__alt_data_end+0xff0165e4>
 1016604:	20800003 	ldbu	r2,0(r4)
 1016608:	28c00003 	ldbu	r3,0(r5)
 101660c:	10c5c83a 	sub	r2,r2,r3
 1016610:	f800283a 	ret
 1016614:	0005883a 	mov	r2,zero
 1016618:	f800283a 	ret

0101661c <strncpy>:
 101661c:	2906b03a 	or	r3,r5,r4
 1016620:	18c000cc 	andi	r3,r3,3
 1016624:	2005883a 	mov	r2,r4
 1016628:	18002c1e 	bne	r3,zero,10166dc <strncpy+0xc0>
 101662c:	010000c4 	movi	r4,3
 1016630:	21802a2e 	bgeu	r4,r6,10166dc <strncpy+0xc0>
 1016634:	033fbff4 	movhi	r12,65279
 1016638:	02e02074 	movhi	r11,32897
 101663c:	633fbfc4 	addi	r12,r12,-257
 1016640:	5ae02004 	addi	r11,r11,-32640
 1016644:	100f883a 	mov	r7,r2
 1016648:	2a000017 	ldw	r8,0(r5)
 101664c:	3815883a 	mov	r10,r7
 1016650:	4313883a 	add	r9,r8,r12
 1016654:	0206303a 	nor	r3,zero,r8
 1016658:	48c6703a 	and	r3,r9,r3
 101665c:	1ac6703a 	and	r3,r3,r11
 1016660:	1800261e 	bne	r3,zero,10166fc <strncpy+0xe0>
 1016664:	39c00104 	addi	r7,r7,4
 1016668:	52000015 	stw	r8,0(r10)
 101666c:	31bfff04 	addi	r6,r6,-4
 1016670:	3811883a 	mov	r8,r7
 1016674:	29400104 	addi	r5,r5,4
 1016678:	21bff336 	bltu	r4,r6,1016648 <__alt_data_end+0xff016648>
 101667c:	30001e26 	beq	r6,zero,10166f8 <strncpy+0xdc>
 1016680:	29c00003 	ldbu	r7,0(r5)
 1016684:	31bfffc4 	addi	r6,r6,-1
 1016688:	40c00044 	addi	r3,r8,1
 101668c:	41c00005 	stb	r7,0(r8)
 1016690:	39c03fcc 	andi	r7,r7,255
 1016694:	39c0201c 	xori	r7,r7,128
 1016698:	39ffe004 	addi	r7,r7,-128
 101669c:	29400044 	addi	r5,r5,1
 10166a0:	38001026 	beq	r7,zero,10166e4 <strncpy+0xc8>
 10166a4:	1811883a 	mov	r8,r3
 10166a8:	00000906 	br	10166d0 <strncpy+0xb4>
 10166ac:	29c00003 	ldbu	r7,0(r5)
 10166b0:	31bfffc4 	addi	r6,r6,-1
 10166b4:	29400044 	addi	r5,r5,1
 10166b8:	41c00005 	stb	r7,0(r8)
 10166bc:	39c03fcc 	andi	r7,r7,255
 10166c0:	39c0201c 	xori	r7,r7,128
 10166c4:	39ffe004 	addi	r7,r7,-128
 10166c8:	1811883a 	mov	r8,r3
 10166cc:	38000526 	beq	r7,zero,10166e4 <strncpy+0xc8>
 10166d0:	18c00044 	addi	r3,r3,1
 10166d4:	303ff51e 	bne	r6,zero,10166ac <__alt_data_end+0xff0166ac>
 10166d8:	f800283a 	ret
 10166dc:	1011883a 	mov	r8,r2
 10166e0:	003fe606 	br	101667c <__alt_data_end+0xff01667c>
 10166e4:	30000726 	beq	r6,zero,1016704 <strncpy+0xe8>
 10166e8:	198d883a 	add	r6,r3,r6
 10166ec:	18000005 	stb	zero,0(r3)
 10166f0:	18c00044 	addi	r3,r3,1
 10166f4:	19bffd1e 	bne	r3,r6,10166ec <__alt_data_end+0xff0166ec>
 10166f8:	f800283a 	ret
 10166fc:	3811883a 	mov	r8,r7
 1016700:	003fdf06 	br	1016680 <__alt_data_end+0xff016680>
 1016704:	f800283a 	ret

01016708 <___svfprintf_internal_r>:
 1016708:	deffb704 	addi	sp,sp,-292
 101670c:	dfc04815 	stw	ra,288(sp)
 1016710:	ddc04615 	stw	r23,280(sp)
 1016714:	d9402c15 	stw	r5,176(sp)
 1016718:	d9003915 	stw	r4,228(sp)
 101671c:	302f883a 	mov	r23,r6
 1016720:	d9c02d15 	stw	r7,180(sp)
 1016724:	df004715 	stw	fp,284(sp)
 1016728:	dd804515 	stw	r22,276(sp)
 101672c:	dd404415 	stw	r21,272(sp)
 1016730:	dd004315 	stw	r20,268(sp)
 1016734:	dcc04215 	stw	r19,264(sp)
 1016738:	dc804115 	stw	r18,260(sp)
 101673c:	dc404015 	stw	r17,256(sp)
 1016740:	dc003f15 	stw	r16,252(sp)
 1016744:	101d7300 	call	101d730 <_localeconv_r>
 1016748:	10800017 	ldw	r2,0(r2)
 101674c:	1009883a 	mov	r4,r2
 1016750:	d8803415 	stw	r2,208(sp)
 1016754:	10164b40 	call	10164b4 <strlen>
 1016758:	d8c02c17 	ldw	r3,176(sp)
 101675c:	d8803815 	stw	r2,224(sp)
 1016760:	1880030b 	ldhu	r2,12(r3)
 1016764:	1080200c 	andi	r2,r2,128
 1016768:	10000226 	beq	r2,zero,1016774 <___svfprintf_internal_r+0x6c>
 101676c:	18800417 	ldw	r2,16(r3)
 1016770:	10067f26 	beq	r2,zero,1018170 <___svfprintf_internal_r+0x1a68>
 1016774:	dcc03917 	ldw	r19,228(sp)
 1016778:	d8c00404 	addi	r3,sp,16
 101677c:	054040f4 	movhi	r21,259
 1016780:	d9001e04 	addi	r4,sp,120
 1016784:	ad6b0b84 	addi	r21,r21,-21458
 1016788:	d8c01e15 	stw	r3,120(sp)
 101678c:	d8002015 	stw	zero,128(sp)
 1016790:	d8001f15 	stw	zero,124(sp)
 1016794:	d8003315 	stw	zero,204(sp)
 1016798:	d8003615 	stw	zero,216(sp)
 101679c:	d8003715 	stw	zero,220(sp)
 10167a0:	1811883a 	mov	r8,r3
 10167a4:	d8003a15 	stw	zero,232(sp)
 10167a8:	d8003b15 	stw	zero,236(sp)
 10167ac:	d8002f15 	stw	zero,188(sp)
 10167b0:	d9002815 	stw	r4,160(sp)
 10167b4:	b8800007 	ldb	r2,0(r23)
 10167b8:	10026726 	beq	r2,zero,1017158 <___svfprintf_internal_r+0xa50>
 10167bc:	00c00944 	movi	r3,37
 10167c0:	b821883a 	mov	r16,r23
 10167c4:	10c0021e 	bne	r2,r3,10167d0 <___svfprintf_internal_r+0xc8>
 10167c8:	00001406 	br	101681c <___svfprintf_internal_r+0x114>
 10167cc:	10c00326 	beq	r2,r3,10167dc <___svfprintf_internal_r+0xd4>
 10167d0:	84000044 	addi	r16,r16,1
 10167d4:	80800007 	ldb	r2,0(r16)
 10167d8:	103ffc1e 	bne	r2,zero,10167cc <__alt_data_end+0xff0167cc>
 10167dc:	85e3c83a 	sub	r17,r16,r23
 10167e0:	88000e26 	beq	r17,zero,101681c <___svfprintf_internal_r+0x114>
 10167e4:	d8c02017 	ldw	r3,128(sp)
 10167e8:	d8801f17 	ldw	r2,124(sp)
 10167ec:	45c00015 	stw	r23,0(r8)
 10167f0:	1c47883a 	add	r3,r3,r17
 10167f4:	10800044 	addi	r2,r2,1
 10167f8:	d8c02015 	stw	r3,128(sp)
 10167fc:	44400115 	stw	r17,4(r8)
 1016800:	d8801f15 	stw	r2,124(sp)
 1016804:	00c001c4 	movi	r3,7
 1016808:	18809716 	blt	r3,r2,1016a68 <___svfprintf_internal_r+0x360>
 101680c:	42000204 	addi	r8,r8,8
 1016810:	d9402f17 	ldw	r5,188(sp)
 1016814:	2c4b883a 	add	r5,r5,r17
 1016818:	d9402f15 	stw	r5,188(sp)
 101681c:	80800007 	ldb	r2,0(r16)
 1016820:	10009826 	beq	r2,zero,1016a84 <___svfprintf_internal_r+0x37c>
 1016824:	84400047 	ldb	r17,1(r16)
 1016828:	00bfffc4 	movi	r2,-1
 101682c:	85c00044 	addi	r23,r16,1
 1016830:	d8002785 	stb	zero,158(sp)
 1016834:	0007883a 	mov	r3,zero
 1016838:	000f883a 	mov	r7,zero
 101683c:	d8802915 	stw	r2,164(sp)
 1016840:	d8003115 	stw	zero,196(sp)
 1016844:	0025883a 	mov	r18,zero
 1016848:	01401604 	movi	r5,88
 101684c:	01800244 	movi	r6,9
 1016850:	02800a84 	movi	r10,42
 1016854:	02401b04 	movi	r9,108
 1016858:	bdc00044 	addi	r23,r23,1
 101685c:	88bff804 	addi	r2,r17,-32
 1016860:	2882f036 	bltu	r5,r2,1017424 <___svfprintf_internal_r+0xd1c>
 1016864:	100490ba 	slli	r2,r2,2
 1016868:	01004074 	movhi	r4,257
 101686c:	211a1f04 	addi	r4,r4,26748
 1016870:	1105883a 	add	r2,r2,r4
 1016874:	10800017 	ldw	r2,0(r2)
 1016878:	1000683a 	jmp	r2
 101687c:	0101738c 	andi	r4,zero,1486
 1016880:	01017424 	muli	r4,zero,1488
 1016884:	01017424 	muli	r4,zero,1488
 1016888:	01017380 	call	101738 <__alt_mem_sdram-0xefe8c8>
 101688c:	01017424 	muli	r4,zero,1488
 1016890:	01017424 	muli	r4,zero,1488
 1016894:	01017424 	muli	r4,zero,1488
 1016898:	01017424 	muli	r4,zero,1488
 101689c:	01017424 	muli	r4,zero,1488
 10168a0:	01017424 	muli	r4,zero,1488
 10168a4:	01016ae0 	cmpeqi	r4,zero,1451
 10168a8:	010172bc 	xorhi	r4,zero,1482
 10168ac:	01017424 	muli	r4,zero,1488
 10168b0:	010169f0 	cmpltui	r4,zero,1447
 10168b4:	01016b08 	cmpgei	r4,zero,1452
 10168b8:	01017424 	muli	r4,zero,1488
 10168bc:	01016b7c 	xorhi	r4,zero,1453
 10168c0:	01016b48 	cmpgei	r4,zero,1453
 10168c4:	01016b48 	cmpgei	r4,zero,1453
 10168c8:	01016b48 	cmpgei	r4,zero,1453
 10168cc:	01016b48 	cmpgei	r4,zero,1453
 10168d0:	01016b48 	cmpgei	r4,zero,1453
 10168d4:	01016b48 	cmpgei	r4,zero,1453
 10168d8:	01016b48 	cmpgei	r4,zero,1453
 10168dc:	01016b48 	cmpgei	r4,zero,1453
 10168e0:	01016b48 	cmpgei	r4,zero,1453
 10168e4:	01017424 	muli	r4,zero,1488
 10168e8:	01017424 	muli	r4,zero,1488
 10168ec:	01017424 	muli	r4,zero,1488
 10168f0:	01017424 	muli	r4,zero,1488
 10168f4:	01017424 	muli	r4,zero,1488
 10168f8:	01017424 	muli	r4,zero,1488
 10168fc:	01017424 	muli	r4,zero,1488
 1016900:	01017424 	muli	r4,zero,1488
 1016904:	01017424 	muli	r4,zero,1488
 1016908:	01017424 	muli	r4,zero,1488
 101690c:	01016c34 	movhi	r4,1456
 1016910:	01016b88 	cmpgei	r4,zero,1454
 1016914:	01017424 	muli	r4,zero,1488
 1016918:	01016b88 	cmpgei	r4,zero,1454
 101691c:	01017424 	muli	r4,zero,1488
 1016920:	01017424 	muli	r4,zero,1488
 1016924:	01017424 	muli	r4,zero,1488
 1016928:	01017424 	muli	r4,zero,1488
 101692c:	01016c28 	cmpgeui	r4,zero,1456
 1016930:	01017424 	muli	r4,zero,1488
 1016934:	01017424 	muli	r4,zero,1488
 1016938:	01016cf0 	cmpltui	r4,zero,1459
 101693c:	01017424 	muli	r4,zero,1488
 1016940:	01017424 	muli	r4,zero,1488
 1016944:	01017424 	muli	r4,zero,1488
 1016948:	01017424 	muli	r4,zero,1488
 101694c:	01017424 	muli	r4,zero,1488
 1016950:	01017160 	cmpeqi	r4,zero,1477
 1016954:	01017424 	muli	r4,zero,1488
 1016958:	01017424 	muli	r4,zero,1488
 101695c:	010171c0 	call	10171c <__alt_mem_sdram-0xefe8e4>
 1016960:	01017424 	muli	r4,zero,1488
 1016964:	01017424 	muli	r4,zero,1488
 1016968:	01017424 	muli	r4,zero,1488
 101696c:	01017424 	muli	r4,zero,1488
 1016970:	01017424 	muli	r4,zero,1488
 1016974:	01017424 	muli	r4,zero,1488
 1016978:	01017424 	muli	r4,zero,1488
 101697c:	01017424 	muli	r4,zero,1488
 1016980:	01017424 	muli	r4,zero,1488
 1016984:	01017424 	muli	r4,zero,1488
 1016988:	01017270 	cmpltui	r4,zero,1481
 101698c:	010173ac 	andhi	r4,zero,1486
 1016990:	01016b88 	cmpgei	r4,zero,1454
 1016994:	01016b88 	cmpgei	r4,zero,1454
 1016998:	01016b88 	cmpgei	r4,zero,1454
 101699c:	01017400 	call	101740 <__alt_mem_sdram-0xefe8c0>
 10169a0:	010173ac 	andhi	r4,zero,1486
 10169a4:	01017424 	muli	r4,zero,1488
 10169a8:	01017424 	muli	r4,zero,1488
 10169ac:	010173bc 	xorhi	r4,zero,1486
 10169b0:	01017424 	muli	r4,zero,1488
 10169b4:	010173cc 	andi	r4,zero,1487
 10169b8:	010172ac 	andhi	r4,zero,1482
 10169bc:	010169fc 	xorhi	r4,zero,1447
 10169c0:	010172cc 	andi	r4,zero,1483
 10169c4:	01017424 	muli	r4,zero,1488
 10169c8:	010172d8 	cmpnei	r4,zero,1483
 10169cc:	01017424 	muli	r4,zero,1488
 10169d0:	01017334 	movhi	r4,1484
 10169d4:	01017424 	muli	r4,zero,1488
 10169d8:	01017424 	muli	r4,zero,1488
 10169dc:	01017344 	movi	r4,1485
 10169e0:	d9003117 	ldw	r4,196(sp)
 10169e4:	d8802d15 	stw	r2,180(sp)
 10169e8:	0109c83a 	sub	r4,zero,r4
 10169ec:	d9003115 	stw	r4,196(sp)
 10169f0:	94800114 	ori	r18,r18,4
 10169f4:	bc400007 	ldb	r17,0(r23)
 10169f8:	003f9706 	br	1016858 <__alt_data_end+0xff016858>
 10169fc:	00800c04 	movi	r2,48
 1016a00:	d9002d17 	ldw	r4,180(sp)
 1016a04:	d9402917 	ldw	r5,164(sp)
 1016a08:	d8802705 	stb	r2,156(sp)
 1016a0c:	00801e04 	movi	r2,120
 1016a10:	d8802745 	stb	r2,157(sp)
 1016a14:	d8002785 	stb	zero,158(sp)
 1016a18:	20c00104 	addi	r3,r4,4
 1016a1c:	25000017 	ldw	r20,0(r4)
 1016a20:	002d883a 	mov	r22,zero
 1016a24:	90800094 	ori	r2,r18,2
 1016a28:	28028616 	blt	r5,zero,1017444 <___svfprintf_internal_r+0xd3c>
 1016a2c:	00bfdfc4 	movi	r2,-129
 1016a30:	90a4703a 	and	r18,r18,r2
 1016a34:	d8c02d15 	stw	r3,180(sp)
 1016a38:	94800094 	ori	r18,r18,2
 1016a3c:	a002731e 	bne	r20,zero,101740c <___svfprintf_internal_r+0xd04>
 1016a40:	008040f4 	movhi	r2,259
 1016a44:	10ab0404 	addi	r2,r2,-21488
 1016a48:	d8803a15 	stw	r2,232(sp)
 1016a4c:	04401e04 	movi	r17,120
 1016a50:	d8c02917 	ldw	r3,164(sp)
 1016a54:	0039883a 	mov	fp,zero
 1016a58:	1801d526 	beq	r3,zero,10171b0 <___svfprintf_internal_r+0xaa8>
 1016a5c:	0029883a 	mov	r20,zero
 1016a60:	002d883a 	mov	r22,zero
 1016a64:	0001f106 	br	101722c <___svfprintf_internal_r+0xb24>
 1016a68:	d9402c17 	ldw	r5,176(sp)
 1016a6c:	d9801e04 	addi	r6,sp,120
 1016a70:	9809883a 	mov	r4,r19
 1016a74:	101fdd00 	call	101fdd0 <__ssprint_r>
 1016a78:	1000081e 	bne	r2,zero,1016a9c <___svfprintf_internal_r+0x394>
 1016a7c:	da000404 	addi	r8,sp,16
 1016a80:	003f6306 	br	1016810 <__alt_data_end+0xff016810>
 1016a84:	d8802017 	ldw	r2,128(sp)
 1016a88:	10000426 	beq	r2,zero,1016a9c <___svfprintf_internal_r+0x394>
 1016a8c:	d9402c17 	ldw	r5,176(sp)
 1016a90:	d9003917 	ldw	r4,228(sp)
 1016a94:	d9801e04 	addi	r6,sp,120
 1016a98:	101fdd00 	call	101fdd0 <__ssprint_r>
 1016a9c:	d8802c17 	ldw	r2,176(sp)
 1016aa0:	10c0030b 	ldhu	r3,12(r2)
 1016aa4:	d8802f17 	ldw	r2,188(sp)
 1016aa8:	18c0100c 	andi	r3,r3,64
 1016aac:	1805f51e 	bne	r3,zero,1018284 <___svfprintf_internal_r+0x1b7c>
 1016ab0:	dfc04817 	ldw	ra,288(sp)
 1016ab4:	df004717 	ldw	fp,284(sp)
 1016ab8:	ddc04617 	ldw	r23,280(sp)
 1016abc:	dd804517 	ldw	r22,276(sp)
 1016ac0:	dd404417 	ldw	r21,272(sp)
 1016ac4:	dd004317 	ldw	r20,268(sp)
 1016ac8:	dcc04217 	ldw	r19,264(sp)
 1016acc:	dc804117 	ldw	r18,260(sp)
 1016ad0:	dc404017 	ldw	r17,256(sp)
 1016ad4:	dc003f17 	ldw	r16,252(sp)
 1016ad8:	dec04904 	addi	sp,sp,292
 1016adc:	f800283a 	ret
 1016ae0:	d8802d17 	ldw	r2,180(sp)
 1016ae4:	d9002d17 	ldw	r4,180(sp)
 1016ae8:	10800017 	ldw	r2,0(r2)
 1016aec:	d8803115 	stw	r2,196(sp)
 1016af0:	20800104 	addi	r2,r4,4
 1016af4:	d9003117 	ldw	r4,196(sp)
 1016af8:	203fb916 	blt	r4,zero,10169e0 <__alt_data_end+0xff0169e0>
 1016afc:	d8802d15 	stw	r2,180(sp)
 1016b00:	bc400007 	ldb	r17,0(r23)
 1016b04:	003f5406 	br	1016858 <__alt_data_end+0xff016858>
 1016b08:	bc400007 	ldb	r17,0(r23)
 1016b0c:	bac00044 	addi	r11,r23,1
 1016b10:	8a873926 	beq	r17,r10,10187f8 <___svfprintf_internal_r+0x20f0>
 1016b14:	88bff404 	addi	r2,r17,-48
 1016b18:	0009883a 	mov	r4,zero
 1016b1c:	30868836 	bltu	r6,r2,1018540 <___svfprintf_internal_r+0x1e38>
 1016b20:	5c400007 	ldb	r17,0(r11)
 1016b24:	210002a4 	muli	r4,r4,10
 1016b28:	5dc00044 	addi	r23,r11,1
 1016b2c:	b817883a 	mov	r11,r23
 1016b30:	2089883a 	add	r4,r4,r2
 1016b34:	88bff404 	addi	r2,r17,-48
 1016b38:	30bff92e 	bgeu	r6,r2,1016b20 <__alt_data_end+0xff016b20>
 1016b3c:	2005d716 	blt	r4,zero,101829c <___svfprintf_internal_r+0x1b94>
 1016b40:	d9002915 	stw	r4,164(sp)
 1016b44:	003f4506 	br	101685c <__alt_data_end+0xff01685c>
 1016b48:	b809883a 	mov	r4,r23
 1016b4c:	d8003115 	stw	zero,196(sp)
 1016b50:	88bff404 	addi	r2,r17,-48
 1016b54:	0017883a 	mov	r11,zero
 1016b58:	24400007 	ldb	r17,0(r4)
 1016b5c:	5ac002a4 	muli	r11,r11,10
 1016b60:	bdc00044 	addi	r23,r23,1
 1016b64:	b809883a 	mov	r4,r23
 1016b68:	12d7883a 	add	r11,r2,r11
 1016b6c:	88bff404 	addi	r2,r17,-48
 1016b70:	30bff92e 	bgeu	r6,r2,1016b58 <__alt_data_end+0xff016b58>
 1016b74:	dac03115 	stw	r11,196(sp)
 1016b78:	003f3806 	br	101685c <__alt_data_end+0xff01685c>
 1016b7c:	94802014 	ori	r18,r18,128
 1016b80:	bc400007 	ldb	r17,0(r23)
 1016b84:	003f3406 	br	1016858 <__alt_data_end+0xff016858>
 1016b88:	18c03fcc 	andi	r3,r3,255
 1016b8c:	1807471e 	bne	r3,zero,10188ac <___svfprintf_internal_r+0x21a4>
 1016b90:	9080020c 	andi	r2,r18,8
 1016b94:	10047d26 	beq	r2,zero,1017d8c <___svfprintf_internal_r+0x1684>
 1016b98:	d8c02d17 	ldw	r3,180(sp)
 1016b9c:	d9002d17 	ldw	r4,180(sp)
 1016ba0:	d9402d17 	ldw	r5,180(sp)
 1016ba4:	18c00017 	ldw	r3,0(r3)
 1016ba8:	21000117 	ldw	r4,4(r4)
 1016bac:	29400204 	addi	r5,r5,8
 1016bb0:	d8c03615 	stw	r3,216(sp)
 1016bb4:	d9003715 	stw	r4,220(sp)
 1016bb8:	d9402d15 	stw	r5,180(sp)
 1016bbc:	d9003617 	ldw	r4,216(sp)
 1016bc0:	d9403717 	ldw	r5,220(sp)
 1016bc4:	da003e15 	stw	r8,248(sp)
 1016bc8:	04000044 	movi	r16,1
 1016bcc:	101f8c80 	call	101f8c8 <__fpclassifyd>
 1016bd0:	da003e17 	ldw	r8,248(sp)
 1016bd4:	14044b1e 	bne	r2,r16,1017d04 <___svfprintf_internal_r+0x15fc>
 1016bd8:	d9003617 	ldw	r4,216(sp)
 1016bdc:	d9403717 	ldw	r5,220(sp)
 1016be0:	000d883a 	mov	r6,zero
 1016be4:	000f883a 	mov	r7,zero
 1016be8:	10250b40 	call	10250b4 <__ledf2>
 1016bec:	da003e17 	ldw	r8,248(sp)
 1016bf0:	1005f316 	blt	r2,zero,10183c0 <___svfprintf_internal_r+0x1cb8>
 1016bf4:	df002783 	ldbu	fp,158(sp)
 1016bf8:	008011c4 	movi	r2,71
 1016bfc:	1445590e 	bge	r2,r17,1018164 <___svfprintf_internal_r+0x1a5c>
 1016c00:	040040f4 	movhi	r16,259
 1016c04:	842afc04 	addi	r16,r16,-21520
 1016c08:	00c000c4 	movi	r3,3
 1016c0c:	00bfdfc4 	movi	r2,-129
 1016c10:	d8c02a15 	stw	r3,168(sp)
 1016c14:	90a4703a 	and	r18,r18,r2
 1016c18:	d8c02e15 	stw	r3,184(sp)
 1016c1c:	d8002915 	stw	zero,164(sp)
 1016c20:	d8003215 	stw	zero,200(sp)
 1016c24:	00006606 	br	1016dc0 <___svfprintf_internal_r+0x6b8>
 1016c28:	94800214 	ori	r18,r18,8
 1016c2c:	bc400007 	ldb	r17,0(r23)
 1016c30:	003f0906 	br	1016858 <__alt_data_end+0xff016858>
 1016c34:	18c03fcc 	andi	r3,r3,255
 1016c38:	1807181e 	bne	r3,zero,101889c <___svfprintf_internal_r+0x2194>
 1016c3c:	94800414 	ori	r18,r18,16
 1016c40:	9080080c 	andi	r2,r18,32
 1016c44:	10039626 	beq	r2,zero,1017aa0 <___svfprintf_internal_r+0x1398>
 1016c48:	d9402d17 	ldw	r5,180(sp)
 1016c4c:	28800117 	ldw	r2,4(r5)
 1016c50:	2d000017 	ldw	r20,0(r5)
 1016c54:	29400204 	addi	r5,r5,8
 1016c58:	d9402d15 	stw	r5,180(sp)
 1016c5c:	102d883a 	mov	r22,r2
 1016c60:	10039816 	blt	r2,zero,1017ac4 <___svfprintf_internal_r+0x13bc>
 1016c64:	d9402917 	ldw	r5,164(sp)
 1016c68:	df002783 	ldbu	fp,158(sp)
 1016c6c:	2803ab16 	blt	r5,zero,1017b1c <___svfprintf_internal_r+0x1414>
 1016c70:	00ffdfc4 	movi	r3,-129
 1016c74:	a584b03a 	or	r2,r20,r22
 1016c78:	90e4703a 	and	r18,r18,r3
 1016c7c:	10014a26 	beq	r2,zero,10171a8 <___svfprintf_internal_r+0xaa0>
 1016c80:	b0034b26 	beq	r22,zero,10179b0 <___svfprintf_internal_r+0x12a8>
 1016c84:	dc402a15 	stw	r17,168(sp)
 1016c88:	dc001e04 	addi	r16,sp,120
 1016c8c:	b023883a 	mov	r17,r22
 1016c90:	402d883a 	mov	r22,r8
 1016c94:	a009883a 	mov	r4,r20
 1016c98:	880b883a 	mov	r5,r17
 1016c9c:	01800284 	movi	r6,10
 1016ca0:	000f883a 	mov	r7,zero
 1016ca4:	10236d00 	call	10236d0 <__umoddi3>
 1016ca8:	10800c04 	addi	r2,r2,48
 1016cac:	843fffc4 	addi	r16,r16,-1
 1016cb0:	a009883a 	mov	r4,r20
 1016cb4:	880b883a 	mov	r5,r17
 1016cb8:	80800005 	stb	r2,0(r16)
 1016cbc:	01800284 	movi	r6,10
 1016cc0:	000f883a 	mov	r7,zero
 1016cc4:	10231580 	call	1023158 <__udivdi3>
 1016cc8:	1029883a 	mov	r20,r2
 1016ccc:	10c4b03a 	or	r2,r2,r3
 1016cd0:	1823883a 	mov	r17,r3
 1016cd4:	103fef1e 	bne	r2,zero,1016c94 <__alt_data_end+0xff016c94>
 1016cd8:	d8c02817 	ldw	r3,160(sp)
 1016cdc:	dc402a17 	ldw	r17,168(sp)
 1016ce0:	b011883a 	mov	r8,r22
 1016ce4:	1c07c83a 	sub	r3,r3,r16
 1016ce8:	d8c02e15 	stw	r3,184(sp)
 1016cec:	00002e06 	br	1016da8 <___svfprintf_internal_r+0x6a0>
 1016cf0:	18c03fcc 	andi	r3,r3,255
 1016cf4:	1806e71e 	bne	r3,zero,1018894 <___svfprintf_internal_r+0x218c>
 1016cf8:	94800414 	ori	r18,r18,16
 1016cfc:	9080080c 	andi	r2,r18,32
 1016d00:	1002d426 	beq	r2,zero,1017854 <___svfprintf_internal_r+0x114c>
 1016d04:	d9402d17 	ldw	r5,180(sp)
 1016d08:	d8c02917 	ldw	r3,164(sp)
 1016d0c:	d8002785 	stb	zero,158(sp)
 1016d10:	28800204 	addi	r2,r5,8
 1016d14:	2d000017 	ldw	r20,0(r5)
 1016d18:	2d800117 	ldw	r22,4(r5)
 1016d1c:	18041516 	blt	r3,zero,1017d74 <___svfprintf_internal_r+0x166c>
 1016d20:	013fdfc4 	movi	r4,-129
 1016d24:	a586b03a 	or	r3,r20,r22
 1016d28:	d8802d15 	stw	r2,180(sp)
 1016d2c:	9124703a 	and	r18,r18,r4
 1016d30:	1802d51e 	bne	r3,zero,1017888 <___svfprintf_internal_r+0x1180>
 1016d34:	d9402917 	ldw	r5,164(sp)
 1016d38:	0039883a 	mov	fp,zero
 1016d3c:	2806be26 	beq	r5,zero,1018838 <___svfprintf_internal_r+0x2130>
 1016d40:	0029883a 	mov	r20,zero
 1016d44:	002d883a 	mov	r22,zero
 1016d48:	dc001e04 	addi	r16,sp,120
 1016d4c:	a006d0fa 	srli	r3,r20,3
 1016d50:	b008977a 	slli	r4,r22,29
 1016d54:	b02cd0fa 	srli	r22,r22,3
 1016d58:	a50001cc 	andi	r20,r20,7
 1016d5c:	a0800c04 	addi	r2,r20,48
 1016d60:	843fffc4 	addi	r16,r16,-1
 1016d64:	20e8b03a 	or	r20,r4,r3
 1016d68:	80800005 	stb	r2,0(r16)
 1016d6c:	a586b03a 	or	r3,r20,r22
 1016d70:	183ff61e 	bne	r3,zero,1016d4c <__alt_data_end+0xff016d4c>
 1016d74:	90c0004c 	andi	r3,r18,1
 1016d78:	18013926 	beq	r3,zero,1017260 <___svfprintf_internal_r+0xb58>
 1016d7c:	10803fcc 	andi	r2,r2,255
 1016d80:	1080201c 	xori	r2,r2,128
 1016d84:	10bfe004 	addi	r2,r2,-128
 1016d88:	00c00c04 	movi	r3,48
 1016d8c:	10c13426 	beq	r2,r3,1017260 <___svfprintf_internal_r+0xb58>
 1016d90:	80ffffc5 	stb	r3,-1(r16)
 1016d94:	d8c02817 	ldw	r3,160(sp)
 1016d98:	80bfffc4 	addi	r2,r16,-1
 1016d9c:	1021883a 	mov	r16,r2
 1016da0:	1887c83a 	sub	r3,r3,r2
 1016da4:	d8c02e15 	stw	r3,184(sp)
 1016da8:	d8802e17 	ldw	r2,184(sp)
 1016dac:	d9002917 	ldw	r4,164(sp)
 1016db0:	1100010e 	bge	r2,r4,1016db8 <___svfprintf_internal_r+0x6b0>
 1016db4:	2005883a 	mov	r2,r4
 1016db8:	d8802a15 	stw	r2,168(sp)
 1016dbc:	d8003215 	stw	zero,200(sp)
 1016dc0:	e7003fcc 	andi	fp,fp,255
 1016dc4:	e700201c 	xori	fp,fp,128
 1016dc8:	e73fe004 	addi	fp,fp,-128
 1016dcc:	e0000326 	beq	fp,zero,1016ddc <___svfprintf_internal_r+0x6d4>
 1016dd0:	d8c02a17 	ldw	r3,168(sp)
 1016dd4:	18c00044 	addi	r3,r3,1
 1016dd8:	d8c02a15 	stw	r3,168(sp)
 1016ddc:	90c0008c 	andi	r3,r18,2
 1016de0:	d8c02b15 	stw	r3,172(sp)
 1016de4:	18000326 	beq	r3,zero,1016df4 <___svfprintf_internal_r+0x6ec>
 1016de8:	d8c02a17 	ldw	r3,168(sp)
 1016dec:	18c00084 	addi	r3,r3,2
 1016df0:	d8c02a15 	stw	r3,168(sp)
 1016df4:	90c0210c 	andi	r3,r18,132
 1016df8:	d8c03015 	stw	r3,192(sp)
 1016dfc:	1801a11e 	bne	r3,zero,1017484 <___svfprintf_internal_r+0xd7c>
 1016e00:	d9003117 	ldw	r4,196(sp)
 1016e04:	d8c02a17 	ldw	r3,168(sp)
 1016e08:	20e9c83a 	sub	r20,r4,r3
 1016e0c:	05019d0e 	bge	zero,r20,1017484 <___svfprintf_internal_r+0xd7c>
 1016e10:	02400404 	movi	r9,16
 1016e14:	d8c02017 	ldw	r3,128(sp)
 1016e18:	d8801f17 	ldw	r2,124(sp)
 1016e1c:	4d051b0e 	bge	r9,r20,101828c <___svfprintf_internal_r+0x1b84>
 1016e20:	014040f4 	movhi	r5,259
 1016e24:	296b0f84 	addi	r5,r5,-21442
 1016e28:	dc403c15 	stw	r17,240(sp)
 1016e2c:	d9403515 	stw	r5,212(sp)
 1016e30:	a023883a 	mov	r17,r20
 1016e34:	482d883a 	mov	r22,r9
 1016e38:	9029883a 	mov	r20,r18
 1016e3c:	070001c4 	movi	fp,7
 1016e40:	8025883a 	mov	r18,r16
 1016e44:	dc002c17 	ldw	r16,176(sp)
 1016e48:	00000306 	br	1016e58 <___svfprintf_internal_r+0x750>
 1016e4c:	8c7ffc04 	addi	r17,r17,-16
 1016e50:	42000204 	addi	r8,r8,8
 1016e54:	b440130e 	bge	r22,r17,1016ea4 <___svfprintf_internal_r+0x79c>
 1016e58:	010040f4 	movhi	r4,259
 1016e5c:	18c00404 	addi	r3,r3,16
 1016e60:	10800044 	addi	r2,r2,1
 1016e64:	212b0f84 	addi	r4,r4,-21442
 1016e68:	41000015 	stw	r4,0(r8)
 1016e6c:	45800115 	stw	r22,4(r8)
 1016e70:	d8c02015 	stw	r3,128(sp)
 1016e74:	d8801f15 	stw	r2,124(sp)
 1016e78:	e0bff40e 	bge	fp,r2,1016e4c <__alt_data_end+0xff016e4c>
 1016e7c:	d9801e04 	addi	r6,sp,120
 1016e80:	800b883a 	mov	r5,r16
 1016e84:	9809883a 	mov	r4,r19
 1016e88:	101fdd00 	call	101fdd0 <__ssprint_r>
 1016e8c:	103f031e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1016e90:	8c7ffc04 	addi	r17,r17,-16
 1016e94:	d8c02017 	ldw	r3,128(sp)
 1016e98:	d8801f17 	ldw	r2,124(sp)
 1016e9c:	da000404 	addi	r8,sp,16
 1016ea0:	b47fed16 	blt	r22,r17,1016e58 <__alt_data_end+0xff016e58>
 1016ea4:	9021883a 	mov	r16,r18
 1016ea8:	a025883a 	mov	r18,r20
 1016eac:	8829883a 	mov	r20,r17
 1016eb0:	dc403c17 	ldw	r17,240(sp)
 1016eb4:	d9403517 	ldw	r5,212(sp)
 1016eb8:	a0c7883a 	add	r3,r20,r3
 1016ebc:	10800044 	addi	r2,r2,1
 1016ec0:	41400015 	stw	r5,0(r8)
 1016ec4:	45000115 	stw	r20,4(r8)
 1016ec8:	d8c02015 	stw	r3,128(sp)
 1016ecc:	d8801f15 	stw	r2,124(sp)
 1016ed0:	010001c4 	movi	r4,7
 1016ed4:	20829f16 	blt	r4,r2,1017954 <___svfprintf_internal_r+0x124c>
 1016ed8:	df002787 	ldb	fp,158(sp)
 1016edc:	42000204 	addi	r8,r8,8
 1016ee0:	e0000c26 	beq	fp,zero,1016f14 <___svfprintf_internal_r+0x80c>
 1016ee4:	d8801f17 	ldw	r2,124(sp)
 1016ee8:	d9002784 	addi	r4,sp,158
 1016eec:	18c00044 	addi	r3,r3,1
 1016ef0:	10800044 	addi	r2,r2,1
 1016ef4:	41000015 	stw	r4,0(r8)
 1016ef8:	01000044 	movi	r4,1
 1016efc:	41000115 	stw	r4,4(r8)
 1016f00:	d8c02015 	stw	r3,128(sp)
 1016f04:	d8801f15 	stw	r2,124(sp)
 1016f08:	010001c4 	movi	r4,7
 1016f0c:	20823816 	blt	r4,r2,10177f0 <___svfprintf_internal_r+0x10e8>
 1016f10:	42000204 	addi	r8,r8,8
 1016f14:	d8802b17 	ldw	r2,172(sp)
 1016f18:	10000c26 	beq	r2,zero,1016f4c <___svfprintf_internal_r+0x844>
 1016f1c:	d8801f17 	ldw	r2,124(sp)
 1016f20:	d9002704 	addi	r4,sp,156
 1016f24:	18c00084 	addi	r3,r3,2
 1016f28:	10800044 	addi	r2,r2,1
 1016f2c:	41000015 	stw	r4,0(r8)
 1016f30:	01000084 	movi	r4,2
 1016f34:	41000115 	stw	r4,4(r8)
 1016f38:	d8c02015 	stw	r3,128(sp)
 1016f3c:	d8801f15 	stw	r2,124(sp)
 1016f40:	010001c4 	movi	r4,7
 1016f44:	20823216 	blt	r4,r2,1017810 <___svfprintf_internal_r+0x1108>
 1016f48:	42000204 	addi	r8,r8,8
 1016f4c:	d9003017 	ldw	r4,192(sp)
 1016f50:	00802004 	movi	r2,128
 1016f54:	20819726 	beq	r4,r2,10175b4 <___svfprintf_internal_r+0xeac>
 1016f58:	d9402917 	ldw	r5,164(sp)
 1016f5c:	d8802e17 	ldw	r2,184(sp)
 1016f60:	28adc83a 	sub	r22,r5,r2
 1016f64:	05802f0e 	bge	zero,r22,1017024 <___svfprintf_internal_r+0x91c>
 1016f68:	07000404 	movi	fp,16
 1016f6c:	d8801f17 	ldw	r2,124(sp)
 1016f70:	e583c00e 	bge	fp,r22,1017e74 <___svfprintf_internal_r+0x176c>
 1016f74:	014040f4 	movhi	r5,259
 1016f78:	296b0b84 	addi	r5,r5,-21458
 1016f7c:	dc402915 	stw	r17,164(sp)
 1016f80:	d9402b15 	stw	r5,172(sp)
 1016f84:	b023883a 	mov	r17,r22
 1016f88:	050001c4 	movi	r20,7
 1016f8c:	902d883a 	mov	r22,r18
 1016f90:	8025883a 	mov	r18,r16
 1016f94:	dc002c17 	ldw	r16,176(sp)
 1016f98:	00000306 	br	1016fa8 <___svfprintf_internal_r+0x8a0>
 1016f9c:	8c7ffc04 	addi	r17,r17,-16
 1016fa0:	42000204 	addi	r8,r8,8
 1016fa4:	e440110e 	bge	fp,r17,1016fec <___svfprintf_internal_r+0x8e4>
 1016fa8:	18c00404 	addi	r3,r3,16
 1016fac:	10800044 	addi	r2,r2,1
 1016fb0:	45400015 	stw	r21,0(r8)
 1016fb4:	47000115 	stw	fp,4(r8)
 1016fb8:	d8c02015 	stw	r3,128(sp)
 1016fbc:	d8801f15 	stw	r2,124(sp)
 1016fc0:	a0bff60e 	bge	r20,r2,1016f9c <__alt_data_end+0xff016f9c>
 1016fc4:	d9801e04 	addi	r6,sp,120
 1016fc8:	800b883a 	mov	r5,r16
 1016fcc:	9809883a 	mov	r4,r19
 1016fd0:	101fdd00 	call	101fdd0 <__ssprint_r>
 1016fd4:	103eb11e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1016fd8:	8c7ffc04 	addi	r17,r17,-16
 1016fdc:	d8c02017 	ldw	r3,128(sp)
 1016fe0:	d8801f17 	ldw	r2,124(sp)
 1016fe4:	da000404 	addi	r8,sp,16
 1016fe8:	e47fef16 	blt	fp,r17,1016fa8 <__alt_data_end+0xff016fa8>
 1016fec:	9021883a 	mov	r16,r18
 1016ff0:	b025883a 	mov	r18,r22
 1016ff4:	882d883a 	mov	r22,r17
 1016ff8:	dc402917 	ldw	r17,164(sp)
 1016ffc:	d9002b17 	ldw	r4,172(sp)
 1017000:	1d87883a 	add	r3,r3,r22
 1017004:	10800044 	addi	r2,r2,1
 1017008:	41000015 	stw	r4,0(r8)
 101700c:	45800115 	stw	r22,4(r8)
 1017010:	d8c02015 	stw	r3,128(sp)
 1017014:	d8801f15 	stw	r2,124(sp)
 1017018:	010001c4 	movi	r4,7
 101701c:	2081ec16 	blt	r4,r2,10177d0 <___svfprintf_internal_r+0x10c8>
 1017020:	42000204 	addi	r8,r8,8
 1017024:	9080400c 	andi	r2,r18,256
 1017028:	1001181e 	bne	r2,zero,101748c <___svfprintf_internal_r+0xd84>
 101702c:	d9402e17 	ldw	r5,184(sp)
 1017030:	d8801f17 	ldw	r2,124(sp)
 1017034:	44000015 	stw	r16,0(r8)
 1017038:	1947883a 	add	r3,r3,r5
 101703c:	10800044 	addi	r2,r2,1
 1017040:	41400115 	stw	r5,4(r8)
 1017044:	d8c02015 	stw	r3,128(sp)
 1017048:	d8801f15 	stw	r2,124(sp)
 101704c:	010001c4 	movi	r4,7
 1017050:	2081d116 	blt	r4,r2,1017798 <___svfprintf_internal_r+0x1090>
 1017054:	42000204 	addi	r8,r8,8
 1017058:	9480010c 	andi	r18,r18,4
 101705c:	90003226 	beq	r18,zero,1017128 <___svfprintf_internal_r+0xa20>
 1017060:	d9403117 	ldw	r5,196(sp)
 1017064:	d8802a17 	ldw	r2,168(sp)
 1017068:	28a1c83a 	sub	r16,r5,r2
 101706c:	04002e0e 	bge	zero,r16,1017128 <___svfprintf_internal_r+0xa20>
 1017070:	04400404 	movi	r17,16
 1017074:	d8801f17 	ldw	r2,124(sp)
 1017078:	8c04b90e 	bge	r17,r16,1018360 <___svfprintf_internal_r+0x1c58>
 101707c:	014040f4 	movhi	r5,259
 1017080:	296b0f84 	addi	r5,r5,-21442
 1017084:	d9403515 	stw	r5,212(sp)
 1017088:	048001c4 	movi	r18,7
 101708c:	dd002c17 	ldw	r20,176(sp)
 1017090:	00000306 	br	10170a0 <___svfprintf_internal_r+0x998>
 1017094:	843ffc04 	addi	r16,r16,-16
 1017098:	42000204 	addi	r8,r8,8
 101709c:	8c00130e 	bge	r17,r16,10170ec <___svfprintf_internal_r+0x9e4>
 10170a0:	010040f4 	movhi	r4,259
 10170a4:	18c00404 	addi	r3,r3,16
 10170a8:	10800044 	addi	r2,r2,1
 10170ac:	212b0f84 	addi	r4,r4,-21442
 10170b0:	41000015 	stw	r4,0(r8)
 10170b4:	44400115 	stw	r17,4(r8)
 10170b8:	d8c02015 	stw	r3,128(sp)
 10170bc:	d8801f15 	stw	r2,124(sp)
 10170c0:	90bff40e 	bge	r18,r2,1017094 <__alt_data_end+0xff017094>
 10170c4:	d9801e04 	addi	r6,sp,120
 10170c8:	a00b883a 	mov	r5,r20
 10170cc:	9809883a 	mov	r4,r19
 10170d0:	101fdd00 	call	101fdd0 <__ssprint_r>
 10170d4:	103e711e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10170d8:	843ffc04 	addi	r16,r16,-16
 10170dc:	d8c02017 	ldw	r3,128(sp)
 10170e0:	d8801f17 	ldw	r2,124(sp)
 10170e4:	da000404 	addi	r8,sp,16
 10170e8:	8c3fed16 	blt	r17,r16,10170a0 <__alt_data_end+0xff0170a0>
 10170ec:	d9403517 	ldw	r5,212(sp)
 10170f0:	1c07883a 	add	r3,r3,r16
 10170f4:	10800044 	addi	r2,r2,1
 10170f8:	41400015 	stw	r5,0(r8)
 10170fc:	44000115 	stw	r16,4(r8)
 1017100:	d8c02015 	stw	r3,128(sp)
 1017104:	d8801f15 	stw	r2,124(sp)
 1017108:	010001c4 	movi	r4,7
 101710c:	2080060e 	bge	r4,r2,1017128 <___svfprintf_internal_r+0xa20>
 1017110:	d9402c17 	ldw	r5,176(sp)
 1017114:	d9801e04 	addi	r6,sp,120
 1017118:	9809883a 	mov	r4,r19
 101711c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017120:	103e5e1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017124:	d8c02017 	ldw	r3,128(sp)
 1017128:	d8803117 	ldw	r2,196(sp)
 101712c:	d9002a17 	ldw	r4,168(sp)
 1017130:	1100010e 	bge	r2,r4,1017138 <___svfprintf_internal_r+0xa30>
 1017134:	2005883a 	mov	r2,r4
 1017138:	d9402f17 	ldw	r5,188(sp)
 101713c:	288b883a 	add	r5,r5,r2
 1017140:	d9402f15 	stw	r5,188(sp)
 1017144:	18019c1e 	bne	r3,zero,10177b8 <___svfprintf_internal_r+0x10b0>
 1017148:	b8800007 	ldb	r2,0(r23)
 101714c:	d8001f15 	stw	zero,124(sp)
 1017150:	da000404 	addi	r8,sp,16
 1017154:	103d991e 	bne	r2,zero,10167bc <__alt_data_end+0xff0167bc>
 1017158:	b821883a 	mov	r16,r23
 101715c:	003daf06 	br	101681c <__alt_data_end+0xff01681c>
 1017160:	18c03fcc 	andi	r3,r3,255
 1017164:	1805c71e 	bne	r3,zero,1018884 <___svfprintf_internal_r+0x217c>
 1017168:	94800414 	ori	r18,r18,16
 101716c:	9080080c 	andi	r2,r18,32
 1017170:	10020126 	beq	r2,zero,1017978 <___svfprintf_internal_r+0x1270>
 1017174:	d8802d17 	ldw	r2,180(sp)
 1017178:	d9002917 	ldw	r4,164(sp)
 101717c:	d8002785 	stb	zero,158(sp)
 1017180:	10c00204 	addi	r3,r2,8
 1017184:	15000017 	ldw	r20,0(r2)
 1017188:	15800117 	ldw	r22,4(r2)
 101718c:	20038e16 	blt	r4,zero,1017fc8 <___svfprintf_internal_r+0x18c0>
 1017190:	013fdfc4 	movi	r4,-129
 1017194:	a584b03a 	or	r2,r20,r22
 1017198:	d8c02d15 	stw	r3,180(sp)
 101719c:	9124703a 	and	r18,r18,r4
 10171a0:	0039883a 	mov	fp,zero
 10171a4:	103eb61e 	bne	r2,zero,1016c80 <__alt_data_end+0xff016c80>
 10171a8:	d8802917 	ldw	r2,164(sp)
 10171ac:	1002c81e 	bne	r2,zero,1017cd0 <___svfprintf_internal_r+0x15c8>
 10171b0:	d8002915 	stw	zero,164(sp)
 10171b4:	d8002e15 	stw	zero,184(sp)
 10171b8:	dc001e04 	addi	r16,sp,120
 10171bc:	003efa06 	br	1016da8 <__alt_data_end+0xff016da8>
 10171c0:	18c03fcc 	andi	r3,r3,255
 10171c4:	1805ad1e 	bne	r3,zero,101887c <___svfprintf_internal_r+0x2174>
 10171c8:	014040f4 	movhi	r5,259
 10171cc:	296aff04 	addi	r5,r5,-21508
 10171d0:	d9403a15 	stw	r5,232(sp)
 10171d4:	9080080c 	andi	r2,r18,32
 10171d8:	10006126 	beq	r2,zero,1017360 <___svfprintf_internal_r+0xc58>
 10171dc:	d8802d17 	ldw	r2,180(sp)
 10171e0:	15000017 	ldw	r20,0(r2)
 10171e4:	15800117 	ldw	r22,4(r2)
 10171e8:	10800204 	addi	r2,r2,8
 10171ec:	d8802d15 	stw	r2,180(sp)
 10171f0:	9080004c 	andi	r2,r18,1
 10171f4:	10018e26 	beq	r2,zero,1017830 <___svfprintf_internal_r+0x1128>
 10171f8:	a584b03a 	or	r2,r20,r22
 10171fc:	10030926 	beq	r2,zero,1017e24 <___svfprintf_internal_r+0x171c>
 1017200:	d8c02917 	ldw	r3,164(sp)
 1017204:	00800c04 	movi	r2,48
 1017208:	d8802705 	stb	r2,156(sp)
 101720c:	dc402745 	stb	r17,157(sp)
 1017210:	d8002785 	stb	zero,158(sp)
 1017214:	90800094 	ori	r2,r18,2
 1017218:	18048716 	blt	r3,zero,1018438 <___svfprintf_internal_r+0x1d30>
 101721c:	00bfdfc4 	movi	r2,-129
 1017220:	90a4703a 	and	r18,r18,r2
 1017224:	94800094 	ori	r18,r18,2
 1017228:	0039883a 	mov	fp,zero
 101722c:	d9003a17 	ldw	r4,232(sp)
 1017230:	dc001e04 	addi	r16,sp,120
 1017234:	a08003cc 	andi	r2,r20,15
 1017238:	b006973a 	slli	r3,r22,28
 101723c:	2085883a 	add	r2,r4,r2
 1017240:	a028d13a 	srli	r20,r20,4
 1017244:	10800003 	ldbu	r2,0(r2)
 1017248:	b02cd13a 	srli	r22,r22,4
 101724c:	843fffc4 	addi	r16,r16,-1
 1017250:	1d28b03a 	or	r20,r3,r20
 1017254:	80800005 	stb	r2,0(r16)
 1017258:	a584b03a 	or	r2,r20,r22
 101725c:	103ff51e 	bne	r2,zero,1017234 <__alt_data_end+0xff017234>
 1017260:	d8c02817 	ldw	r3,160(sp)
 1017264:	1c07c83a 	sub	r3,r3,r16
 1017268:	d8c02e15 	stw	r3,184(sp)
 101726c:	003ece06 	br	1016da8 <__alt_data_end+0xff016da8>
 1017270:	d8c02d17 	ldw	r3,180(sp)
 1017274:	d9002d17 	ldw	r4,180(sp)
 1017278:	d8002785 	stb	zero,158(sp)
 101727c:	18800017 	ldw	r2,0(r3)
 1017280:	21000104 	addi	r4,r4,4
 1017284:	00c00044 	movi	r3,1
 1017288:	d8c02a15 	stw	r3,168(sp)
 101728c:	d8801405 	stb	r2,80(sp)
 1017290:	d9002d15 	stw	r4,180(sp)
 1017294:	d8c02e15 	stw	r3,184(sp)
 1017298:	d8002915 	stw	zero,164(sp)
 101729c:	d8003215 	stw	zero,200(sp)
 10172a0:	dc001404 	addi	r16,sp,80
 10172a4:	0039883a 	mov	fp,zero
 10172a8:	003ecc06 	br	1016ddc <__alt_data_end+0xff016ddc>
 10172ac:	18c03fcc 	andi	r3,r3,255
 10172b0:	183e9226 	beq	r3,zero,1016cfc <__alt_data_end+0xff016cfc>
 10172b4:	d9c02785 	stb	r7,158(sp)
 10172b8:	003e9006 	br	1016cfc <__alt_data_end+0xff016cfc>
 10172bc:	00c00044 	movi	r3,1
 10172c0:	01c00ac4 	movi	r7,43
 10172c4:	bc400007 	ldb	r17,0(r23)
 10172c8:	003d6306 	br	1016858 <__alt_data_end+0xff016858>
 10172cc:	94800814 	ori	r18,r18,32
 10172d0:	bc400007 	ldb	r17,0(r23)
 10172d4:	003d6006 	br	1016858 <__alt_data_end+0xff016858>
 10172d8:	d8c02d17 	ldw	r3,180(sp)
 10172dc:	d8002785 	stb	zero,158(sp)
 10172e0:	1c000017 	ldw	r16,0(r3)
 10172e4:	1d000104 	addi	r20,r3,4
 10172e8:	80040f26 	beq	r16,zero,1018328 <___svfprintf_internal_r+0x1c20>
 10172ec:	d9002917 	ldw	r4,164(sp)
 10172f0:	2003dc16 	blt	r4,zero,1018264 <___svfprintf_internal_r+0x1b5c>
 10172f4:	200d883a 	mov	r6,r4
 10172f8:	000b883a 	mov	r5,zero
 10172fc:	8009883a 	mov	r4,r16
 1017300:	da003e15 	stw	r8,248(sp)
 1017304:	101e1280 	call	101e128 <memchr>
 1017308:	da003e17 	ldw	r8,248(sp)
 101730c:	10045826 	beq	r2,zero,1018470 <___svfprintf_internal_r+0x1d68>
 1017310:	1405c83a 	sub	r2,r2,r16
 1017314:	d8802e15 	stw	r2,184(sp)
 1017318:	1003d816 	blt	r2,zero,101827c <___svfprintf_internal_r+0x1b74>
 101731c:	df002783 	ldbu	fp,158(sp)
 1017320:	d8802a15 	stw	r2,168(sp)
 1017324:	dd002d15 	stw	r20,180(sp)
 1017328:	d8002915 	stw	zero,164(sp)
 101732c:	d8003215 	stw	zero,200(sp)
 1017330:	003ea306 	br	1016dc0 <__alt_data_end+0xff016dc0>
 1017334:	18c03fcc 	andi	r3,r3,255
 1017338:	183f8c26 	beq	r3,zero,101716c <__alt_data_end+0xff01716c>
 101733c:	d9c02785 	stb	r7,158(sp)
 1017340:	003f8a06 	br	101716c <__alt_data_end+0xff01716c>
 1017344:	18c03fcc 	andi	r3,r3,255
 1017348:	1805631e 	bne	r3,zero,10188d8 <___svfprintf_internal_r+0x21d0>
 101734c:	014040f4 	movhi	r5,259
 1017350:	296b0404 	addi	r5,r5,-21488
 1017354:	d9403a15 	stw	r5,232(sp)
 1017358:	9080080c 	andi	r2,r18,32
 101735c:	103f9f1e 	bne	r2,zero,10171dc <__alt_data_end+0xff0171dc>
 1017360:	9080040c 	andi	r2,r18,16
 1017364:	10029c26 	beq	r2,zero,1017dd8 <___svfprintf_internal_r+0x16d0>
 1017368:	d8c02d17 	ldw	r3,180(sp)
 101736c:	002d883a 	mov	r22,zero
 1017370:	1d000017 	ldw	r20,0(r3)
 1017374:	18c00104 	addi	r3,r3,4
 1017378:	d8c02d15 	stw	r3,180(sp)
 101737c:	003f9c06 	br	10171f0 <__alt_data_end+0xff0171f0>
 1017380:	94800054 	ori	r18,r18,1
 1017384:	bc400007 	ldb	r17,0(r23)
 1017388:	003d3306 	br	1016858 <__alt_data_end+0xff016858>
 101738c:	38803fcc 	andi	r2,r7,255
 1017390:	1080201c 	xori	r2,r2,128
 1017394:	10bfe004 	addi	r2,r2,-128
 1017398:	1002971e 	bne	r2,zero,1017df8 <___svfprintf_internal_r+0x16f0>
 101739c:	00c00044 	movi	r3,1
 10173a0:	01c00804 	movi	r7,32
 10173a4:	bc400007 	ldb	r17,0(r23)
 10173a8:	003d2b06 	br	1016858 <__alt_data_end+0xff016858>
 10173ac:	18c03fcc 	andi	r3,r3,255
 10173b0:	183e2326 	beq	r3,zero,1016c40 <__alt_data_end+0xff016c40>
 10173b4:	d9c02785 	stb	r7,158(sp)
 10173b8:	003e2106 	br	1016c40 <__alt_data_end+0xff016c40>
 10173bc:	bc400007 	ldb	r17,0(r23)
 10173c0:	8a430426 	beq	r17,r9,1017fd4 <___svfprintf_internal_r+0x18cc>
 10173c4:	94800414 	ori	r18,r18,16
 10173c8:	003d2306 	br	1016858 <__alt_data_end+0xff016858>
 10173cc:	18c03fcc 	andi	r3,r3,255
 10173d0:	18053f1e 	bne	r3,zero,10188d0 <___svfprintf_internal_r+0x21c8>
 10173d4:	9080080c 	andi	r2,r18,32
 10173d8:	10028926 	beq	r2,zero,1017e00 <___svfprintf_internal_r+0x16f8>
 10173dc:	d9402d17 	ldw	r5,180(sp)
 10173e0:	d9002f17 	ldw	r4,188(sp)
 10173e4:	28800017 	ldw	r2,0(r5)
 10173e8:	2007d7fa 	srai	r3,r4,31
 10173ec:	29400104 	addi	r5,r5,4
 10173f0:	d9402d15 	stw	r5,180(sp)
 10173f4:	11000015 	stw	r4,0(r2)
 10173f8:	10c00115 	stw	r3,4(r2)
 10173fc:	003ced06 	br	10167b4 <__alt_data_end+0xff0167b4>
 1017400:	94801014 	ori	r18,r18,64
 1017404:	bc400007 	ldb	r17,0(r23)
 1017408:	003d1306 	br	1016858 <__alt_data_end+0xff016858>
 101740c:	010040f4 	movhi	r4,259
 1017410:	212b0404 	addi	r4,r4,-21488
 1017414:	0039883a 	mov	fp,zero
 1017418:	d9003a15 	stw	r4,232(sp)
 101741c:	04401e04 	movi	r17,120
 1017420:	003f8206 	br	101722c <__alt_data_end+0xff01722c>
 1017424:	18c03fcc 	andi	r3,r3,255
 1017428:	1805221e 	bne	r3,zero,10188b4 <___svfprintf_internal_r+0x21ac>
 101742c:	883d9526 	beq	r17,zero,1016a84 <__alt_data_end+0xff016a84>
 1017430:	00c00044 	movi	r3,1
 1017434:	d8c02a15 	stw	r3,168(sp)
 1017438:	dc401405 	stb	r17,80(sp)
 101743c:	d8002785 	stb	zero,158(sp)
 1017440:	003f9406 	br	1017294 <__alt_data_end+0xff017294>
 1017444:	010040f4 	movhi	r4,259
 1017448:	212b0404 	addi	r4,r4,-21488
 101744c:	d9003a15 	stw	r4,232(sp)
 1017450:	d8c02d15 	stw	r3,180(sp)
 1017454:	1025883a 	mov	r18,r2
 1017458:	04401e04 	movi	r17,120
 101745c:	a584b03a 	or	r2,r20,r22
 1017460:	1000fa1e 	bne	r2,zero,101784c <___svfprintf_internal_r+0x1144>
 1017464:	0039883a 	mov	fp,zero
 1017468:	00800084 	movi	r2,2
 101746c:	10803fcc 	andi	r2,r2,255
 1017470:	00c00044 	movi	r3,1
 1017474:	10c21626 	beq	r2,r3,1017cd0 <___svfprintf_internal_r+0x15c8>
 1017478:	00c00084 	movi	r3,2
 101747c:	10fe301e 	bne	r2,r3,1016d40 <__alt_data_end+0xff016d40>
 1017480:	003d7606 	br	1016a5c <__alt_data_end+0xff016a5c>
 1017484:	d8c02017 	ldw	r3,128(sp)
 1017488:	003e9506 	br	1016ee0 <__alt_data_end+0xff016ee0>
 101748c:	00801944 	movi	r2,101
 1017490:	14407c0e 	bge	r2,r17,1017684 <___svfprintf_internal_r+0xf7c>
 1017494:	d9003617 	ldw	r4,216(sp)
 1017498:	d9403717 	ldw	r5,220(sp)
 101749c:	000d883a 	mov	r6,zero
 10174a0:	000f883a 	mov	r7,zero
 10174a4:	d8c03d15 	stw	r3,244(sp)
 10174a8:	da003e15 	stw	r8,248(sp)
 10174ac:	1024f500 	call	1024f50 <__eqdf2>
 10174b0:	d8c03d17 	ldw	r3,244(sp)
 10174b4:	da003e17 	ldw	r8,248(sp)
 10174b8:	1000f51e 	bne	r2,zero,1017890 <___svfprintf_internal_r+0x1188>
 10174bc:	d8801f17 	ldw	r2,124(sp)
 10174c0:	010040f4 	movhi	r4,259
 10174c4:	212b0b04 	addi	r4,r4,-21460
 10174c8:	18c00044 	addi	r3,r3,1
 10174cc:	10800044 	addi	r2,r2,1
 10174d0:	41000015 	stw	r4,0(r8)
 10174d4:	01000044 	movi	r4,1
 10174d8:	41000115 	stw	r4,4(r8)
 10174dc:	d8c02015 	stw	r3,128(sp)
 10174e0:	d8801f15 	stw	r2,124(sp)
 10174e4:	010001c4 	movi	r4,7
 10174e8:	20826616 	blt	r4,r2,1017e84 <___svfprintf_internal_r+0x177c>
 10174ec:	42000204 	addi	r8,r8,8
 10174f0:	d8802617 	ldw	r2,152(sp)
 10174f4:	d9403317 	ldw	r5,204(sp)
 10174f8:	11400216 	blt	r2,r5,1017504 <___svfprintf_internal_r+0xdfc>
 10174fc:	9080004c 	andi	r2,r18,1
 1017500:	103ed526 	beq	r2,zero,1017058 <__alt_data_end+0xff017058>
 1017504:	d8803817 	ldw	r2,224(sp)
 1017508:	d9003417 	ldw	r4,208(sp)
 101750c:	d9403817 	ldw	r5,224(sp)
 1017510:	1887883a 	add	r3,r3,r2
 1017514:	d8801f17 	ldw	r2,124(sp)
 1017518:	41000015 	stw	r4,0(r8)
 101751c:	41400115 	stw	r5,4(r8)
 1017520:	10800044 	addi	r2,r2,1
 1017524:	d8c02015 	stw	r3,128(sp)
 1017528:	d8801f15 	stw	r2,124(sp)
 101752c:	010001c4 	movi	r4,7
 1017530:	2082af16 	blt	r4,r2,1017ff0 <___svfprintf_internal_r+0x18e8>
 1017534:	42000204 	addi	r8,r8,8
 1017538:	d8803317 	ldw	r2,204(sp)
 101753c:	143fffc4 	addi	r16,r2,-1
 1017540:	043ec50e 	bge	zero,r16,1017058 <__alt_data_end+0xff017058>
 1017544:	04400404 	movi	r17,16
 1017548:	d8801f17 	ldw	r2,124(sp)
 101754c:	8c00860e 	bge	r17,r16,1017768 <___svfprintf_internal_r+0x1060>
 1017550:	014040f4 	movhi	r5,259
 1017554:	296b0b84 	addi	r5,r5,-21458
 1017558:	d9402b15 	stw	r5,172(sp)
 101755c:	058001c4 	movi	r22,7
 1017560:	dd002c17 	ldw	r20,176(sp)
 1017564:	00000306 	br	1017574 <___svfprintf_internal_r+0xe6c>
 1017568:	42000204 	addi	r8,r8,8
 101756c:	843ffc04 	addi	r16,r16,-16
 1017570:	8c00800e 	bge	r17,r16,1017774 <___svfprintf_internal_r+0x106c>
 1017574:	18c00404 	addi	r3,r3,16
 1017578:	10800044 	addi	r2,r2,1
 101757c:	45400015 	stw	r21,0(r8)
 1017580:	44400115 	stw	r17,4(r8)
 1017584:	d8c02015 	stw	r3,128(sp)
 1017588:	d8801f15 	stw	r2,124(sp)
 101758c:	b0bff60e 	bge	r22,r2,1017568 <__alt_data_end+0xff017568>
 1017590:	d9801e04 	addi	r6,sp,120
 1017594:	a00b883a 	mov	r5,r20
 1017598:	9809883a 	mov	r4,r19
 101759c:	101fdd00 	call	101fdd0 <__ssprint_r>
 10175a0:	103d3e1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10175a4:	d8c02017 	ldw	r3,128(sp)
 10175a8:	d8801f17 	ldw	r2,124(sp)
 10175ac:	da000404 	addi	r8,sp,16
 10175b0:	003fee06 	br	101756c <__alt_data_end+0xff01756c>
 10175b4:	d9403117 	ldw	r5,196(sp)
 10175b8:	d8802a17 	ldw	r2,168(sp)
 10175bc:	28adc83a 	sub	r22,r5,r2
 10175c0:	05be650e 	bge	zero,r22,1016f58 <__alt_data_end+0xff016f58>
 10175c4:	07000404 	movi	fp,16
 10175c8:	d8801f17 	ldw	r2,124(sp)
 10175cc:	e583a20e 	bge	fp,r22,1018458 <___svfprintf_internal_r+0x1d50>
 10175d0:	014040f4 	movhi	r5,259
 10175d4:	296b0b84 	addi	r5,r5,-21458
 10175d8:	dc403015 	stw	r17,192(sp)
 10175dc:	d9402b15 	stw	r5,172(sp)
 10175e0:	b023883a 	mov	r17,r22
 10175e4:	050001c4 	movi	r20,7
 10175e8:	902d883a 	mov	r22,r18
 10175ec:	8025883a 	mov	r18,r16
 10175f0:	dc002c17 	ldw	r16,176(sp)
 10175f4:	00000306 	br	1017604 <___svfprintf_internal_r+0xefc>
 10175f8:	8c7ffc04 	addi	r17,r17,-16
 10175fc:	42000204 	addi	r8,r8,8
 1017600:	e440110e 	bge	fp,r17,1017648 <___svfprintf_internal_r+0xf40>
 1017604:	18c00404 	addi	r3,r3,16
 1017608:	10800044 	addi	r2,r2,1
 101760c:	45400015 	stw	r21,0(r8)
 1017610:	47000115 	stw	fp,4(r8)
 1017614:	d8c02015 	stw	r3,128(sp)
 1017618:	d8801f15 	stw	r2,124(sp)
 101761c:	a0bff60e 	bge	r20,r2,10175f8 <__alt_data_end+0xff0175f8>
 1017620:	d9801e04 	addi	r6,sp,120
 1017624:	800b883a 	mov	r5,r16
 1017628:	9809883a 	mov	r4,r19
 101762c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017630:	103d1a1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017634:	8c7ffc04 	addi	r17,r17,-16
 1017638:	d8c02017 	ldw	r3,128(sp)
 101763c:	d8801f17 	ldw	r2,124(sp)
 1017640:	da000404 	addi	r8,sp,16
 1017644:	e47fef16 	blt	fp,r17,1017604 <__alt_data_end+0xff017604>
 1017648:	9021883a 	mov	r16,r18
 101764c:	b025883a 	mov	r18,r22
 1017650:	882d883a 	mov	r22,r17
 1017654:	dc403017 	ldw	r17,192(sp)
 1017658:	d9002b17 	ldw	r4,172(sp)
 101765c:	1d87883a 	add	r3,r3,r22
 1017660:	10800044 	addi	r2,r2,1
 1017664:	41000015 	stw	r4,0(r8)
 1017668:	45800115 	stw	r22,4(r8)
 101766c:	d8c02015 	stw	r3,128(sp)
 1017670:	d8801f15 	stw	r2,124(sp)
 1017674:	010001c4 	movi	r4,7
 1017678:	20819a16 	blt	r4,r2,1017ce4 <___svfprintf_internal_r+0x15dc>
 101767c:	42000204 	addi	r8,r8,8
 1017680:	003e3506 	br	1016f58 <__alt_data_end+0xff016f58>
 1017684:	d9403317 	ldw	r5,204(sp)
 1017688:	00800044 	movi	r2,1
 101768c:	18c00044 	addi	r3,r3,1
 1017690:	1141710e 	bge	r2,r5,1017c58 <___svfprintf_internal_r+0x1550>
 1017694:	dc401f17 	ldw	r17,124(sp)
 1017698:	00800044 	movi	r2,1
 101769c:	40800115 	stw	r2,4(r8)
 10176a0:	8c400044 	addi	r17,r17,1
 10176a4:	44000015 	stw	r16,0(r8)
 10176a8:	d8c02015 	stw	r3,128(sp)
 10176ac:	dc401f15 	stw	r17,124(sp)
 10176b0:	008001c4 	movi	r2,7
 10176b4:	14417416 	blt	r2,r17,1017c88 <___svfprintf_internal_r+0x1580>
 10176b8:	42000204 	addi	r8,r8,8
 10176bc:	d8803817 	ldw	r2,224(sp)
 10176c0:	d9003417 	ldw	r4,208(sp)
 10176c4:	8c400044 	addi	r17,r17,1
 10176c8:	10c7883a 	add	r3,r2,r3
 10176cc:	40800115 	stw	r2,4(r8)
 10176d0:	41000015 	stw	r4,0(r8)
 10176d4:	d8c02015 	stw	r3,128(sp)
 10176d8:	dc401f15 	stw	r17,124(sp)
 10176dc:	008001c4 	movi	r2,7
 10176e0:	14417216 	blt	r2,r17,1017cac <___svfprintf_internal_r+0x15a4>
 10176e4:	45800204 	addi	r22,r8,8
 10176e8:	d9003617 	ldw	r4,216(sp)
 10176ec:	d9403717 	ldw	r5,220(sp)
 10176f0:	000d883a 	mov	r6,zero
 10176f4:	000f883a 	mov	r7,zero
 10176f8:	d8c03d15 	stw	r3,244(sp)
 10176fc:	1024f500 	call	1024f50 <__eqdf2>
 1017700:	d8c03d17 	ldw	r3,244(sp)
 1017704:	1000b326 	beq	r2,zero,10179d4 <___svfprintf_internal_r+0x12cc>
 1017708:	d9403317 	ldw	r5,204(sp)
 101770c:	84000044 	addi	r16,r16,1
 1017710:	8c400044 	addi	r17,r17,1
 1017714:	28bfffc4 	addi	r2,r5,-1
 1017718:	1887883a 	add	r3,r3,r2
 101771c:	b0800115 	stw	r2,4(r22)
 1017720:	b4000015 	stw	r16,0(r22)
 1017724:	d8c02015 	stw	r3,128(sp)
 1017728:	dc401f15 	stw	r17,124(sp)
 101772c:	008001c4 	movi	r2,7
 1017730:	1440d216 	blt	r2,r17,1017a7c <___svfprintf_internal_r+0x1374>
 1017734:	b5800204 	addi	r22,r22,8
 1017738:	d9003b17 	ldw	r4,236(sp)
 101773c:	df0022c4 	addi	fp,sp,139
 1017740:	8c400044 	addi	r17,r17,1
 1017744:	20c7883a 	add	r3,r4,r3
 1017748:	b7000015 	stw	fp,0(r22)
 101774c:	b1000115 	stw	r4,4(r22)
 1017750:	d8c02015 	stw	r3,128(sp)
 1017754:	dc401f15 	stw	r17,124(sp)
 1017758:	008001c4 	movi	r2,7
 101775c:	14400e16 	blt	r2,r17,1017798 <___svfprintf_internal_r+0x1090>
 1017760:	b2000204 	addi	r8,r22,8
 1017764:	003e3c06 	br	1017058 <__alt_data_end+0xff017058>
 1017768:	010040f4 	movhi	r4,259
 101776c:	212b0b84 	addi	r4,r4,-21458
 1017770:	d9002b15 	stw	r4,172(sp)
 1017774:	d9002b17 	ldw	r4,172(sp)
 1017778:	1c07883a 	add	r3,r3,r16
 101777c:	44000115 	stw	r16,4(r8)
 1017780:	41000015 	stw	r4,0(r8)
 1017784:	10800044 	addi	r2,r2,1
 1017788:	d8c02015 	stw	r3,128(sp)
 101778c:	d8801f15 	stw	r2,124(sp)
 1017790:	010001c4 	movi	r4,7
 1017794:	20be2f0e 	bge	r4,r2,1017054 <__alt_data_end+0xff017054>
 1017798:	d9402c17 	ldw	r5,176(sp)
 101779c:	d9801e04 	addi	r6,sp,120
 10177a0:	9809883a 	mov	r4,r19
 10177a4:	101fdd00 	call	101fdd0 <__ssprint_r>
 10177a8:	103cbc1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10177ac:	d8c02017 	ldw	r3,128(sp)
 10177b0:	da000404 	addi	r8,sp,16
 10177b4:	003e2806 	br	1017058 <__alt_data_end+0xff017058>
 10177b8:	d9402c17 	ldw	r5,176(sp)
 10177bc:	d9801e04 	addi	r6,sp,120
 10177c0:	9809883a 	mov	r4,r19
 10177c4:	101fdd00 	call	101fdd0 <__ssprint_r>
 10177c8:	103e5f26 	beq	r2,zero,1017148 <__alt_data_end+0xff017148>
 10177cc:	003cb306 	br	1016a9c <__alt_data_end+0xff016a9c>
 10177d0:	d9402c17 	ldw	r5,176(sp)
 10177d4:	d9801e04 	addi	r6,sp,120
 10177d8:	9809883a 	mov	r4,r19
 10177dc:	101fdd00 	call	101fdd0 <__ssprint_r>
 10177e0:	103cae1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10177e4:	d8c02017 	ldw	r3,128(sp)
 10177e8:	da000404 	addi	r8,sp,16
 10177ec:	003e0d06 	br	1017024 <__alt_data_end+0xff017024>
 10177f0:	d9402c17 	ldw	r5,176(sp)
 10177f4:	d9801e04 	addi	r6,sp,120
 10177f8:	9809883a 	mov	r4,r19
 10177fc:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017800:	103ca61e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017804:	d8c02017 	ldw	r3,128(sp)
 1017808:	da000404 	addi	r8,sp,16
 101780c:	003dc106 	br	1016f14 <__alt_data_end+0xff016f14>
 1017810:	d9402c17 	ldw	r5,176(sp)
 1017814:	d9801e04 	addi	r6,sp,120
 1017818:	9809883a 	mov	r4,r19
 101781c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017820:	103c9e1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017824:	d8c02017 	ldw	r3,128(sp)
 1017828:	da000404 	addi	r8,sp,16
 101782c:	003dc706 	br	1016f4c <__alt_data_end+0xff016f4c>
 1017830:	d8802917 	ldw	r2,164(sp)
 1017834:	d8002785 	stb	zero,158(sp)
 1017838:	103f0816 	blt	r2,zero,101745c <__alt_data_end+0xff01745c>
 101783c:	00ffdfc4 	movi	r3,-129
 1017840:	a584b03a 	or	r2,r20,r22
 1017844:	90e4703a 	and	r18,r18,r3
 1017848:	103c8126 	beq	r2,zero,1016a50 <__alt_data_end+0xff016a50>
 101784c:	0039883a 	mov	fp,zero
 1017850:	003e7606 	br	101722c <__alt_data_end+0xff01722c>
 1017854:	9080040c 	andi	r2,r18,16
 1017858:	10013d26 	beq	r2,zero,1017d50 <___svfprintf_internal_r+0x1648>
 101785c:	d9002d17 	ldw	r4,180(sp)
 1017860:	d9402917 	ldw	r5,164(sp)
 1017864:	d8002785 	stb	zero,158(sp)
 1017868:	20800104 	addi	r2,r4,4
 101786c:	25000017 	ldw	r20,0(r4)
 1017870:	002d883a 	mov	r22,zero
 1017874:	28013f16 	blt	r5,zero,1017d74 <___svfprintf_internal_r+0x166c>
 1017878:	00ffdfc4 	movi	r3,-129
 101787c:	d8802d15 	stw	r2,180(sp)
 1017880:	90e4703a 	and	r18,r18,r3
 1017884:	a03d2b26 	beq	r20,zero,1016d34 <__alt_data_end+0xff016d34>
 1017888:	0039883a 	mov	fp,zero
 101788c:	003d2e06 	br	1016d48 <__alt_data_end+0xff016d48>
 1017890:	dc402617 	ldw	r17,152(sp)
 1017894:	0441830e 	bge	zero,r17,1017ea4 <___svfprintf_internal_r+0x179c>
 1017898:	dc403217 	ldw	r17,200(sp)
 101789c:	d8803317 	ldw	r2,204(sp)
 10178a0:	1440010e 	bge	r2,r17,10178a8 <___svfprintf_internal_r+0x11a0>
 10178a4:	1023883a 	mov	r17,r2
 10178a8:	04400a0e 	bge	zero,r17,10178d4 <___svfprintf_internal_r+0x11cc>
 10178ac:	d8801f17 	ldw	r2,124(sp)
 10178b0:	1c47883a 	add	r3,r3,r17
 10178b4:	44000015 	stw	r16,0(r8)
 10178b8:	10800044 	addi	r2,r2,1
 10178bc:	44400115 	stw	r17,4(r8)
 10178c0:	d8c02015 	stw	r3,128(sp)
 10178c4:	d8801f15 	stw	r2,124(sp)
 10178c8:	010001c4 	movi	r4,7
 10178cc:	20827516 	blt	r4,r2,10182a4 <___svfprintf_internal_r+0x1b9c>
 10178d0:	42000204 	addi	r8,r8,8
 10178d4:	88027b16 	blt	r17,zero,10182c4 <___svfprintf_internal_r+0x1bbc>
 10178d8:	d9003217 	ldw	r4,200(sp)
 10178dc:	2463c83a 	sub	r17,r4,r17
 10178e0:	0440990e 	bge	zero,r17,1017b48 <___svfprintf_internal_r+0x1440>
 10178e4:	05800404 	movi	r22,16
 10178e8:	d8801f17 	ldw	r2,124(sp)
 10178ec:	b441530e 	bge	r22,r17,1017e3c <___svfprintf_internal_r+0x1734>
 10178f0:	010040f4 	movhi	r4,259
 10178f4:	212b0b84 	addi	r4,r4,-21458
 10178f8:	d9002b15 	stw	r4,172(sp)
 10178fc:	070001c4 	movi	fp,7
 1017900:	dd002c17 	ldw	r20,176(sp)
 1017904:	00000306 	br	1017914 <___svfprintf_internal_r+0x120c>
 1017908:	42000204 	addi	r8,r8,8
 101790c:	8c7ffc04 	addi	r17,r17,-16
 1017910:	b4414d0e 	bge	r22,r17,1017e48 <___svfprintf_internal_r+0x1740>
 1017914:	18c00404 	addi	r3,r3,16
 1017918:	10800044 	addi	r2,r2,1
 101791c:	45400015 	stw	r21,0(r8)
 1017920:	45800115 	stw	r22,4(r8)
 1017924:	d8c02015 	stw	r3,128(sp)
 1017928:	d8801f15 	stw	r2,124(sp)
 101792c:	e0bff60e 	bge	fp,r2,1017908 <__alt_data_end+0xff017908>
 1017930:	d9801e04 	addi	r6,sp,120
 1017934:	a00b883a 	mov	r5,r20
 1017938:	9809883a 	mov	r4,r19
 101793c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017940:	103c561e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017944:	d8c02017 	ldw	r3,128(sp)
 1017948:	d8801f17 	ldw	r2,124(sp)
 101794c:	da000404 	addi	r8,sp,16
 1017950:	003fee06 	br	101790c <__alt_data_end+0xff01790c>
 1017954:	d9402c17 	ldw	r5,176(sp)
 1017958:	d9801e04 	addi	r6,sp,120
 101795c:	9809883a 	mov	r4,r19
 1017960:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017964:	103c4d1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017968:	d8c02017 	ldw	r3,128(sp)
 101796c:	df002787 	ldb	fp,158(sp)
 1017970:	da000404 	addi	r8,sp,16
 1017974:	003d5a06 	br	1016ee0 <__alt_data_end+0xff016ee0>
 1017978:	9080040c 	andi	r2,r18,16
 101797c:	10005c26 	beq	r2,zero,1017af0 <___svfprintf_internal_r+0x13e8>
 1017980:	d9402d17 	ldw	r5,180(sp)
 1017984:	d8c02917 	ldw	r3,164(sp)
 1017988:	d8002785 	stb	zero,158(sp)
 101798c:	28800104 	addi	r2,r5,4
 1017990:	2d000017 	ldw	r20,0(r5)
 1017994:	002d883a 	mov	r22,zero
 1017998:	18005e16 	blt	r3,zero,1017b14 <___svfprintf_internal_r+0x140c>
 101799c:	00ffdfc4 	movi	r3,-129
 10179a0:	d8802d15 	stw	r2,180(sp)
 10179a4:	90e4703a 	and	r18,r18,r3
 10179a8:	0039883a 	mov	fp,zero
 10179ac:	a03dfe26 	beq	r20,zero,10171a8 <__alt_data_end+0xff0171a8>
 10179b0:	00800244 	movi	r2,9
 10179b4:	153cb336 	bltu	r2,r20,1016c84 <__alt_data_end+0xff016c84>
 10179b8:	a5000c04 	addi	r20,r20,48
 10179bc:	dc001dc4 	addi	r16,sp,119
 10179c0:	dd001dc5 	stb	r20,119(sp)
 10179c4:	d8c02817 	ldw	r3,160(sp)
 10179c8:	1c07c83a 	sub	r3,r3,r16
 10179cc:	d8c02e15 	stw	r3,184(sp)
 10179d0:	003cf506 	br	1016da8 <__alt_data_end+0xff016da8>
 10179d4:	d8803317 	ldw	r2,204(sp)
 10179d8:	143fffc4 	addi	r16,r2,-1
 10179dc:	043f560e 	bge	zero,r16,1017738 <__alt_data_end+0xff017738>
 10179e0:	07000404 	movi	fp,16
 10179e4:	e403530e 	bge	fp,r16,1018734 <___svfprintf_internal_r+0x202c>
 10179e8:	014040f4 	movhi	r5,259
 10179ec:	296b0b84 	addi	r5,r5,-21458
 10179f0:	d9402b15 	stw	r5,172(sp)
 10179f4:	01c001c4 	movi	r7,7
 10179f8:	dd002c17 	ldw	r20,176(sp)
 10179fc:	00000306 	br	1017a0c <___svfprintf_internal_r+0x1304>
 1017a00:	843ffc04 	addi	r16,r16,-16
 1017a04:	b5800204 	addi	r22,r22,8
 1017a08:	e400130e 	bge	fp,r16,1017a58 <___svfprintf_internal_r+0x1350>
 1017a0c:	18c00404 	addi	r3,r3,16
 1017a10:	8c400044 	addi	r17,r17,1
 1017a14:	b5400015 	stw	r21,0(r22)
 1017a18:	b7000115 	stw	fp,4(r22)
 1017a1c:	d8c02015 	stw	r3,128(sp)
 1017a20:	dc401f15 	stw	r17,124(sp)
 1017a24:	3c7ff60e 	bge	r7,r17,1017a00 <__alt_data_end+0xff017a00>
 1017a28:	d9801e04 	addi	r6,sp,120
 1017a2c:	a00b883a 	mov	r5,r20
 1017a30:	9809883a 	mov	r4,r19
 1017a34:	d9c03d15 	stw	r7,244(sp)
 1017a38:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017a3c:	d9c03d17 	ldw	r7,244(sp)
 1017a40:	103c161e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017a44:	843ffc04 	addi	r16,r16,-16
 1017a48:	d8c02017 	ldw	r3,128(sp)
 1017a4c:	dc401f17 	ldw	r17,124(sp)
 1017a50:	dd800404 	addi	r22,sp,16
 1017a54:	e43fed16 	blt	fp,r16,1017a0c <__alt_data_end+0xff017a0c>
 1017a58:	d8802b17 	ldw	r2,172(sp)
 1017a5c:	1c07883a 	add	r3,r3,r16
 1017a60:	8c400044 	addi	r17,r17,1
 1017a64:	b0800015 	stw	r2,0(r22)
 1017a68:	b4000115 	stw	r16,4(r22)
 1017a6c:	d8c02015 	stw	r3,128(sp)
 1017a70:	dc401f15 	stw	r17,124(sp)
 1017a74:	008001c4 	movi	r2,7
 1017a78:	147f2e0e 	bge	r2,r17,1017734 <__alt_data_end+0xff017734>
 1017a7c:	d9402c17 	ldw	r5,176(sp)
 1017a80:	d9801e04 	addi	r6,sp,120
 1017a84:	9809883a 	mov	r4,r19
 1017a88:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017a8c:	103c031e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017a90:	d8c02017 	ldw	r3,128(sp)
 1017a94:	dc401f17 	ldw	r17,124(sp)
 1017a98:	dd800404 	addi	r22,sp,16
 1017a9c:	003f2606 	br	1017738 <__alt_data_end+0xff017738>
 1017aa0:	9080040c 	andi	r2,r18,16
 1017aa4:	1000c326 	beq	r2,zero,1017db4 <___svfprintf_internal_r+0x16ac>
 1017aa8:	d8802d17 	ldw	r2,180(sp)
 1017aac:	15000017 	ldw	r20,0(r2)
 1017ab0:	10800104 	addi	r2,r2,4
 1017ab4:	d8802d15 	stw	r2,180(sp)
 1017ab8:	a02dd7fa 	srai	r22,r20,31
 1017abc:	b005883a 	mov	r2,r22
 1017ac0:	103c680e 	bge	r2,zero,1016c64 <__alt_data_end+0xff016c64>
 1017ac4:	0529c83a 	sub	r20,zero,r20
 1017ac8:	a004c03a 	cmpne	r2,r20,zero
 1017acc:	05adc83a 	sub	r22,zero,r22
 1017ad0:	b0adc83a 	sub	r22,r22,r2
 1017ad4:	d8802917 	ldw	r2,164(sp)
 1017ad8:	07000b44 	movi	fp,45
 1017adc:	df002785 	stb	fp,158(sp)
 1017ae0:	10022e16 	blt	r2,zero,101839c <___svfprintf_internal_r+0x1c94>
 1017ae4:	00bfdfc4 	movi	r2,-129
 1017ae8:	90a4703a 	and	r18,r18,r2
 1017aec:	003c6406 	br	1016c80 <__alt_data_end+0xff016c80>
 1017af0:	9080100c 	andi	r2,r18,64
 1017af4:	d8002785 	stb	zero,158(sp)
 1017af8:	10012526 	beq	r2,zero,1017f90 <___svfprintf_internal_r+0x1888>
 1017afc:	d9002d17 	ldw	r4,180(sp)
 1017b00:	d9402917 	ldw	r5,164(sp)
 1017b04:	002d883a 	mov	r22,zero
 1017b08:	20800104 	addi	r2,r4,4
 1017b0c:	2500000b 	ldhu	r20,0(r4)
 1017b10:	283fa20e 	bge	r5,zero,101799c <__alt_data_end+0xff01799c>
 1017b14:	d8802d15 	stw	r2,180(sp)
 1017b18:	0039883a 	mov	fp,zero
 1017b1c:	a584b03a 	or	r2,r20,r22
 1017b20:	103c571e 	bne	r2,zero,1016c80 <__alt_data_end+0xff016c80>
 1017b24:	00800044 	movi	r2,1
 1017b28:	003e5006 	br	101746c <__alt_data_end+0xff01746c>
 1017b2c:	d9402c17 	ldw	r5,176(sp)
 1017b30:	d9801e04 	addi	r6,sp,120
 1017b34:	9809883a 	mov	r4,r19
 1017b38:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017b3c:	103bd71e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017b40:	d8c02017 	ldw	r3,128(sp)
 1017b44:	da000404 	addi	r8,sp,16
 1017b48:	d9003217 	ldw	r4,200(sp)
 1017b4c:	d8802617 	ldw	r2,152(sp)
 1017b50:	d9403317 	ldw	r5,204(sp)
 1017b54:	8123883a 	add	r17,r16,r4
 1017b58:	11400216 	blt	r2,r5,1017b64 <___svfprintf_internal_r+0x145c>
 1017b5c:	9100004c 	andi	r4,r18,1
 1017b60:	20000d26 	beq	r4,zero,1017b98 <___svfprintf_internal_r+0x1490>
 1017b64:	d9003817 	ldw	r4,224(sp)
 1017b68:	d9403417 	ldw	r5,208(sp)
 1017b6c:	1907883a 	add	r3,r3,r4
 1017b70:	d9001f17 	ldw	r4,124(sp)
 1017b74:	41400015 	stw	r5,0(r8)
 1017b78:	d9403817 	ldw	r5,224(sp)
 1017b7c:	21000044 	addi	r4,r4,1
 1017b80:	d8c02015 	stw	r3,128(sp)
 1017b84:	41400115 	stw	r5,4(r8)
 1017b88:	d9001f15 	stw	r4,124(sp)
 1017b8c:	014001c4 	movi	r5,7
 1017b90:	2901dc16 	blt	r5,r4,1018304 <___svfprintf_internal_r+0x1bfc>
 1017b94:	42000204 	addi	r8,r8,8
 1017b98:	d9003317 	ldw	r4,204(sp)
 1017b9c:	8121883a 	add	r16,r16,r4
 1017ba0:	2085c83a 	sub	r2,r4,r2
 1017ba4:	8461c83a 	sub	r16,r16,r17
 1017ba8:	1400010e 	bge	r2,r16,1017bb0 <___svfprintf_internal_r+0x14a8>
 1017bac:	1021883a 	mov	r16,r2
 1017bb0:	04000a0e 	bge	zero,r16,1017bdc <___svfprintf_internal_r+0x14d4>
 1017bb4:	d9001f17 	ldw	r4,124(sp)
 1017bb8:	1c07883a 	add	r3,r3,r16
 1017bbc:	44400015 	stw	r17,0(r8)
 1017bc0:	21000044 	addi	r4,r4,1
 1017bc4:	44000115 	stw	r16,4(r8)
 1017bc8:	d8c02015 	stw	r3,128(sp)
 1017bcc:	d9001f15 	stw	r4,124(sp)
 1017bd0:	014001c4 	movi	r5,7
 1017bd4:	2901e616 	blt	r5,r4,1018370 <___svfprintf_internal_r+0x1c68>
 1017bd8:	42000204 	addi	r8,r8,8
 1017bdc:	8001f616 	blt	r16,zero,10183b8 <___svfprintf_internal_r+0x1cb0>
 1017be0:	1421c83a 	sub	r16,r2,r16
 1017be4:	043d1c0e 	bge	zero,r16,1017058 <__alt_data_end+0xff017058>
 1017be8:	04400404 	movi	r17,16
 1017bec:	d8801f17 	ldw	r2,124(sp)
 1017bf0:	8c3edd0e 	bge	r17,r16,1017768 <__alt_data_end+0xff017768>
 1017bf4:	014040f4 	movhi	r5,259
 1017bf8:	296b0b84 	addi	r5,r5,-21458
 1017bfc:	d9402b15 	stw	r5,172(sp)
 1017c00:	058001c4 	movi	r22,7
 1017c04:	dd002c17 	ldw	r20,176(sp)
 1017c08:	00000306 	br	1017c18 <___svfprintf_internal_r+0x1510>
 1017c0c:	42000204 	addi	r8,r8,8
 1017c10:	843ffc04 	addi	r16,r16,-16
 1017c14:	8c3ed70e 	bge	r17,r16,1017774 <__alt_data_end+0xff017774>
 1017c18:	18c00404 	addi	r3,r3,16
 1017c1c:	10800044 	addi	r2,r2,1
 1017c20:	45400015 	stw	r21,0(r8)
 1017c24:	44400115 	stw	r17,4(r8)
 1017c28:	d8c02015 	stw	r3,128(sp)
 1017c2c:	d8801f15 	stw	r2,124(sp)
 1017c30:	b0bff60e 	bge	r22,r2,1017c0c <__alt_data_end+0xff017c0c>
 1017c34:	d9801e04 	addi	r6,sp,120
 1017c38:	a00b883a 	mov	r5,r20
 1017c3c:	9809883a 	mov	r4,r19
 1017c40:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017c44:	103b951e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017c48:	d8c02017 	ldw	r3,128(sp)
 1017c4c:	d8801f17 	ldw	r2,124(sp)
 1017c50:	da000404 	addi	r8,sp,16
 1017c54:	003fee06 	br	1017c10 <__alt_data_end+0xff017c10>
 1017c58:	9088703a 	and	r4,r18,r2
 1017c5c:	203e8d1e 	bne	r4,zero,1017694 <__alt_data_end+0xff017694>
 1017c60:	dc401f17 	ldw	r17,124(sp)
 1017c64:	40800115 	stw	r2,4(r8)
 1017c68:	44000015 	stw	r16,0(r8)
 1017c6c:	8c400044 	addi	r17,r17,1
 1017c70:	d8c02015 	stw	r3,128(sp)
 1017c74:	dc401f15 	stw	r17,124(sp)
 1017c78:	008001c4 	movi	r2,7
 1017c7c:	147f7f16 	blt	r2,r17,1017a7c <__alt_data_end+0xff017a7c>
 1017c80:	45800204 	addi	r22,r8,8
 1017c84:	003eac06 	br	1017738 <__alt_data_end+0xff017738>
 1017c88:	d9402c17 	ldw	r5,176(sp)
 1017c8c:	d9801e04 	addi	r6,sp,120
 1017c90:	9809883a 	mov	r4,r19
 1017c94:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017c98:	103b801e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017c9c:	d8c02017 	ldw	r3,128(sp)
 1017ca0:	dc401f17 	ldw	r17,124(sp)
 1017ca4:	da000404 	addi	r8,sp,16
 1017ca8:	003e8406 	br	10176bc <__alt_data_end+0xff0176bc>
 1017cac:	d9402c17 	ldw	r5,176(sp)
 1017cb0:	d9801e04 	addi	r6,sp,120
 1017cb4:	9809883a 	mov	r4,r19
 1017cb8:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017cbc:	103b771e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017cc0:	d8c02017 	ldw	r3,128(sp)
 1017cc4:	dc401f17 	ldw	r17,124(sp)
 1017cc8:	dd800404 	addi	r22,sp,16
 1017ccc:	003e8606 	br	10176e8 <__alt_data_end+0xff0176e8>
 1017cd0:	0029883a 	mov	r20,zero
 1017cd4:	a5000c04 	addi	r20,r20,48
 1017cd8:	dc001dc4 	addi	r16,sp,119
 1017cdc:	dd001dc5 	stb	r20,119(sp)
 1017ce0:	003f3806 	br	10179c4 <__alt_data_end+0xff0179c4>
 1017ce4:	d9402c17 	ldw	r5,176(sp)
 1017ce8:	d9801e04 	addi	r6,sp,120
 1017cec:	9809883a 	mov	r4,r19
 1017cf0:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017cf4:	103b691e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017cf8:	d8c02017 	ldw	r3,128(sp)
 1017cfc:	da000404 	addi	r8,sp,16
 1017d00:	003c9506 	br	1016f58 <__alt_data_end+0xff016f58>
 1017d04:	d9003617 	ldw	r4,216(sp)
 1017d08:	d9403717 	ldw	r5,220(sp)
 1017d0c:	da003e15 	stw	r8,248(sp)
 1017d10:	101f8c80 	call	101f8c8 <__fpclassifyd>
 1017d14:	da003e17 	ldw	r8,248(sp)
 1017d18:	1000bd1e 	bne	r2,zero,1018010 <___svfprintf_internal_r+0x1908>
 1017d1c:	008011c4 	movi	r2,71
 1017d20:	14411e0e 	bge	r2,r17,101819c <___svfprintf_internal_r+0x1a94>
 1017d24:	040040f4 	movhi	r16,259
 1017d28:	842afe04 	addi	r16,r16,-21512
 1017d2c:	00c000c4 	movi	r3,3
 1017d30:	00bfdfc4 	movi	r2,-129
 1017d34:	d8c02a15 	stw	r3,168(sp)
 1017d38:	90a4703a 	and	r18,r18,r2
 1017d3c:	df002783 	ldbu	fp,158(sp)
 1017d40:	d8c02e15 	stw	r3,184(sp)
 1017d44:	d8002915 	stw	zero,164(sp)
 1017d48:	d8003215 	stw	zero,200(sp)
 1017d4c:	003c1c06 	br	1016dc0 <__alt_data_end+0xff016dc0>
 1017d50:	9080100c 	andi	r2,r18,64
 1017d54:	d8002785 	stb	zero,158(sp)
 1017d58:	10009426 	beq	r2,zero,1017fac <___svfprintf_internal_r+0x18a4>
 1017d5c:	d8c02d17 	ldw	r3,180(sp)
 1017d60:	d9002917 	ldw	r4,164(sp)
 1017d64:	002d883a 	mov	r22,zero
 1017d68:	18800104 	addi	r2,r3,4
 1017d6c:	1d00000b 	ldhu	r20,0(r3)
 1017d70:	203ec10e 	bge	r4,zero,1017878 <__alt_data_end+0xff017878>
 1017d74:	a586b03a 	or	r3,r20,r22
 1017d78:	d8802d15 	stw	r2,180(sp)
 1017d7c:	183ec21e 	bne	r3,zero,1017888 <__alt_data_end+0xff017888>
 1017d80:	0039883a 	mov	fp,zero
 1017d84:	0005883a 	mov	r2,zero
 1017d88:	003db806 	br	101746c <__alt_data_end+0xff01746c>
 1017d8c:	d8802d17 	ldw	r2,180(sp)
 1017d90:	d8c02d17 	ldw	r3,180(sp)
 1017d94:	d9002d17 	ldw	r4,180(sp)
 1017d98:	10800017 	ldw	r2,0(r2)
 1017d9c:	18c00117 	ldw	r3,4(r3)
 1017da0:	21000204 	addi	r4,r4,8
 1017da4:	d8803615 	stw	r2,216(sp)
 1017da8:	d8c03715 	stw	r3,220(sp)
 1017dac:	d9002d15 	stw	r4,180(sp)
 1017db0:	003b8206 	br	1016bbc <__alt_data_end+0xff016bbc>
 1017db4:	9080100c 	andi	r2,r18,64
 1017db8:	10010726 	beq	r2,zero,10181d8 <___svfprintf_internal_r+0x1ad0>
 1017dbc:	d8c02d17 	ldw	r3,180(sp)
 1017dc0:	1d00000f 	ldh	r20,0(r3)
 1017dc4:	18c00104 	addi	r3,r3,4
 1017dc8:	d8c02d15 	stw	r3,180(sp)
 1017dcc:	a02dd7fa 	srai	r22,r20,31
 1017dd0:	b005883a 	mov	r2,r22
 1017dd4:	003ba206 	br	1016c60 <__alt_data_end+0xff016c60>
 1017dd8:	9080100c 	andi	r2,r18,64
 1017ddc:	10010526 	beq	r2,zero,10181f4 <___svfprintf_internal_r+0x1aec>
 1017de0:	d9002d17 	ldw	r4,180(sp)
 1017de4:	002d883a 	mov	r22,zero
 1017de8:	2500000b 	ldhu	r20,0(r4)
 1017dec:	21000104 	addi	r4,r4,4
 1017df0:	d9002d15 	stw	r4,180(sp)
 1017df4:	003cfe06 	br	10171f0 <__alt_data_end+0xff0171f0>
 1017df8:	bc400007 	ldb	r17,0(r23)
 1017dfc:	003a9606 	br	1016858 <__alt_data_end+0xff016858>
 1017e00:	9080040c 	andi	r2,r18,16
 1017e04:	10010126 	beq	r2,zero,101820c <___svfprintf_internal_r+0x1b04>
 1017e08:	d9402d17 	ldw	r5,180(sp)
 1017e0c:	d8c02f17 	ldw	r3,188(sp)
 1017e10:	28800017 	ldw	r2,0(r5)
 1017e14:	29400104 	addi	r5,r5,4
 1017e18:	d9402d15 	stw	r5,180(sp)
 1017e1c:	10c00015 	stw	r3,0(r2)
 1017e20:	003a6406 	br	10167b4 <__alt_data_end+0xff0167b4>
 1017e24:	d9002917 	ldw	r4,164(sp)
 1017e28:	d8002785 	stb	zero,158(sp)
 1017e2c:	203d8d16 	blt	r4,zero,1017464 <__alt_data_end+0xff017464>
 1017e30:	00bfdfc4 	movi	r2,-129
 1017e34:	90a4703a 	and	r18,r18,r2
 1017e38:	003b0506 	br	1016a50 <__alt_data_end+0xff016a50>
 1017e3c:	014040f4 	movhi	r5,259
 1017e40:	296b0b84 	addi	r5,r5,-21458
 1017e44:	d9402b15 	stw	r5,172(sp)
 1017e48:	d9402b17 	ldw	r5,172(sp)
 1017e4c:	1c47883a 	add	r3,r3,r17
 1017e50:	10800044 	addi	r2,r2,1
 1017e54:	41400015 	stw	r5,0(r8)
 1017e58:	44400115 	stw	r17,4(r8)
 1017e5c:	d8c02015 	stw	r3,128(sp)
 1017e60:	d8801f15 	stw	r2,124(sp)
 1017e64:	010001c4 	movi	r4,7
 1017e68:	20bf3016 	blt	r4,r2,1017b2c <__alt_data_end+0xff017b2c>
 1017e6c:	42000204 	addi	r8,r8,8
 1017e70:	003f3506 	br	1017b48 <__alt_data_end+0xff017b48>
 1017e74:	010040f4 	movhi	r4,259
 1017e78:	212b0b84 	addi	r4,r4,-21458
 1017e7c:	d9002b15 	stw	r4,172(sp)
 1017e80:	003c5e06 	br	1016ffc <__alt_data_end+0xff016ffc>
 1017e84:	d9402c17 	ldw	r5,176(sp)
 1017e88:	d9801e04 	addi	r6,sp,120
 1017e8c:	9809883a 	mov	r4,r19
 1017e90:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017e94:	103b011e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017e98:	d8c02017 	ldw	r3,128(sp)
 1017e9c:	da000404 	addi	r8,sp,16
 1017ea0:	003d9306 	br	10174f0 <__alt_data_end+0xff0174f0>
 1017ea4:	d8801f17 	ldw	r2,124(sp)
 1017ea8:	014040f4 	movhi	r5,259
 1017eac:	01000044 	movi	r4,1
 1017eb0:	18c00044 	addi	r3,r3,1
 1017eb4:	10800044 	addi	r2,r2,1
 1017eb8:	296b0b04 	addi	r5,r5,-21460
 1017ebc:	41000115 	stw	r4,4(r8)
 1017ec0:	41400015 	stw	r5,0(r8)
 1017ec4:	d8c02015 	stw	r3,128(sp)
 1017ec8:	d8801f15 	stw	r2,124(sp)
 1017ecc:	010001c4 	movi	r4,7
 1017ed0:	2080b516 	blt	r4,r2,10181a8 <___svfprintf_internal_r+0x1aa0>
 1017ed4:	42000204 	addi	r8,r8,8
 1017ed8:	8800041e 	bne	r17,zero,1017eec <___svfprintf_internal_r+0x17e4>
 1017edc:	d8803317 	ldw	r2,204(sp)
 1017ee0:	1000021e 	bne	r2,zero,1017eec <___svfprintf_internal_r+0x17e4>
 1017ee4:	9080004c 	andi	r2,r18,1
 1017ee8:	103c5b26 	beq	r2,zero,1017058 <__alt_data_end+0xff017058>
 1017eec:	d9003817 	ldw	r4,224(sp)
 1017ef0:	d8801f17 	ldw	r2,124(sp)
 1017ef4:	d9403417 	ldw	r5,208(sp)
 1017ef8:	20c7883a 	add	r3,r4,r3
 1017efc:	10800044 	addi	r2,r2,1
 1017f00:	41000115 	stw	r4,4(r8)
 1017f04:	41400015 	stw	r5,0(r8)
 1017f08:	d8c02015 	stw	r3,128(sp)
 1017f0c:	d8801f15 	stw	r2,124(sp)
 1017f10:	010001c4 	movi	r4,7
 1017f14:	20818016 	blt	r4,r2,1018518 <___svfprintf_internal_r+0x1e10>
 1017f18:	42000204 	addi	r8,r8,8
 1017f1c:	0463c83a 	sub	r17,zero,r17
 1017f20:	0440cb0e 	bge	zero,r17,1018250 <___svfprintf_internal_r+0x1b48>
 1017f24:	05800404 	movi	r22,16
 1017f28:	b440e80e 	bge	r22,r17,10182cc <___svfprintf_internal_r+0x1bc4>
 1017f2c:	014040f4 	movhi	r5,259
 1017f30:	296b0b84 	addi	r5,r5,-21458
 1017f34:	d9402b15 	stw	r5,172(sp)
 1017f38:	070001c4 	movi	fp,7
 1017f3c:	dd002c17 	ldw	r20,176(sp)
 1017f40:	00000306 	br	1017f50 <___svfprintf_internal_r+0x1848>
 1017f44:	42000204 	addi	r8,r8,8
 1017f48:	8c7ffc04 	addi	r17,r17,-16
 1017f4c:	b440e20e 	bge	r22,r17,10182d8 <___svfprintf_internal_r+0x1bd0>
 1017f50:	18c00404 	addi	r3,r3,16
 1017f54:	10800044 	addi	r2,r2,1
 1017f58:	45400015 	stw	r21,0(r8)
 1017f5c:	45800115 	stw	r22,4(r8)
 1017f60:	d8c02015 	stw	r3,128(sp)
 1017f64:	d8801f15 	stw	r2,124(sp)
 1017f68:	e0bff60e 	bge	fp,r2,1017f44 <__alt_data_end+0xff017f44>
 1017f6c:	d9801e04 	addi	r6,sp,120
 1017f70:	a00b883a 	mov	r5,r20
 1017f74:	9809883a 	mov	r4,r19
 1017f78:	101fdd00 	call	101fdd0 <__ssprint_r>
 1017f7c:	103ac71e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1017f80:	d8c02017 	ldw	r3,128(sp)
 1017f84:	d8801f17 	ldw	r2,124(sp)
 1017f88:	da000404 	addi	r8,sp,16
 1017f8c:	003fee06 	br	1017f48 <__alt_data_end+0xff017f48>
 1017f90:	d8c02d17 	ldw	r3,180(sp)
 1017f94:	d9002917 	ldw	r4,164(sp)
 1017f98:	002d883a 	mov	r22,zero
 1017f9c:	18800104 	addi	r2,r3,4
 1017fa0:	1d000017 	ldw	r20,0(r3)
 1017fa4:	203e7d0e 	bge	r4,zero,101799c <__alt_data_end+0xff01799c>
 1017fa8:	003eda06 	br	1017b14 <__alt_data_end+0xff017b14>
 1017fac:	d9402d17 	ldw	r5,180(sp)
 1017fb0:	d8c02917 	ldw	r3,164(sp)
 1017fb4:	002d883a 	mov	r22,zero
 1017fb8:	28800104 	addi	r2,r5,4
 1017fbc:	2d000017 	ldw	r20,0(r5)
 1017fc0:	183e2d0e 	bge	r3,zero,1017878 <__alt_data_end+0xff017878>
 1017fc4:	003f6b06 	br	1017d74 <__alt_data_end+0xff017d74>
 1017fc8:	d8c02d15 	stw	r3,180(sp)
 1017fcc:	0039883a 	mov	fp,zero
 1017fd0:	003ed206 	br	1017b1c <__alt_data_end+0xff017b1c>
 1017fd4:	bc400043 	ldbu	r17,1(r23)
 1017fd8:	94800814 	ori	r18,r18,32
 1017fdc:	bdc00044 	addi	r23,r23,1
 1017fe0:	8c403fcc 	andi	r17,r17,255
 1017fe4:	8c40201c 	xori	r17,r17,128
 1017fe8:	8c7fe004 	addi	r17,r17,-128
 1017fec:	003a1a06 	br	1016858 <__alt_data_end+0xff016858>
 1017ff0:	d9402c17 	ldw	r5,176(sp)
 1017ff4:	d9801e04 	addi	r6,sp,120
 1017ff8:	9809883a 	mov	r4,r19
 1017ffc:	101fdd00 	call	101fdd0 <__ssprint_r>
 1018000:	103aa61e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1018004:	d8c02017 	ldw	r3,128(sp)
 1018008:	da000404 	addi	r8,sp,16
 101800c:	003d4a06 	br	1017538 <__alt_data_end+0xff017538>
 1018010:	d9002917 	ldw	r4,164(sp)
 1018014:	05bff7c4 	movi	r22,-33
 1018018:	00bfffc4 	movi	r2,-1
 101801c:	8dac703a 	and	r22,r17,r22
 1018020:	20806a26 	beq	r4,r2,10181cc <___svfprintf_internal_r+0x1ac4>
 1018024:	008011c4 	movi	r2,71
 1018028:	b0813726 	beq	r22,r2,1018508 <___svfprintf_internal_r+0x1e00>
 101802c:	d9003717 	ldw	r4,220(sp)
 1018030:	90c04014 	ori	r3,r18,256
 1018034:	d8c02b15 	stw	r3,172(sp)
 1018038:	20015d16 	blt	r4,zero,10185b0 <___svfprintf_internal_r+0x1ea8>
 101803c:	dd003717 	ldw	r20,220(sp)
 1018040:	d8002a05 	stb	zero,168(sp)
 1018044:	00801984 	movi	r2,102
 1018048:	88814026 	beq	r17,r2,101854c <___svfprintf_internal_r+0x1e44>
 101804c:	00801184 	movi	r2,70
 1018050:	88817126 	beq	r17,r2,1018618 <___svfprintf_internal_r+0x1f10>
 1018054:	00801144 	movi	r2,69
 1018058:	b0816226 	beq	r22,r2,10185e4 <___svfprintf_internal_r+0x1edc>
 101805c:	d8c02917 	ldw	r3,164(sp)
 1018060:	d8802104 	addi	r2,sp,132
 1018064:	d8800315 	stw	r2,12(sp)
 1018068:	d9403617 	ldw	r5,216(sp)
 101806c:	d8802504 	addi	r2,sp,148
 1018070:	d8800215 	stw	r2,8(sp)
 1018074:	d8802604 	addi	r2,sp,152
 1018078:	d8c00015 	stw	r3,0(sp)
 101807c:	d8800115 	stw	r2,4(sp)
 1018080:	01c00084 	movi	r7,2
 1018084:	a00d883a 	mov	r6,r20
 1018088:	9809883a 	mov	r4,r19
 101808c:	d8c03d15 	stw	r3,244(sp)
 1018090:	da003e15 	stw	r8,248(sp)
 1018094:	101af3c0 	call	101af3c <_dtoa_r>
 1018098:	1021883a 	mov	r16,r2
 101809c:	008019c4 	movi	r2,103
 10180a0:	d8c03d17 	ldw	r3,244(sp)
 10180a4:	da003e17 	ldw	r8,248(sp)
 10180a8:	8880e726 	beq	r17,r2,1018448 <___svfprintf_internal_r+0x1d40>
 10180ac:	008011c4 	movi	r2,71
 10180b0:	8880d426 	beq	r17,r2,1018404 <___svfprintf_internal_r+0x1cfc>
 10180b4:	80f9883a 	add	fp,r16,r3
 10180b8:	d9003617 	ldw	r4,216(sp)
 10180bc:	000d883a 	mov	r6,zero
 10180c0:	000f883a 	mov	r7,zero
 10180c4:	a00b883a 	mov	r5,r20
 10180c8:	da003e15 	stw	r8,248(sp)
 10180cc:	1024f500 	call	1024f50 <__eqdf2>
 10180d0:	da003e17 	ldw	r8,248(sp)
 10180d4:	1000e426 	beq	r2,zero,1018468 <___svfprintf_internal_r+0x1d60>
 10180d8:	d8802117 	ldw	r2,132(sp)
 10180dc:	1700062e 	bgeu	r2,fp,10180f8 <___svfprintf_internal_r+0x19f0>
 10180e0:	01000c04 	movi	r4,48
 10180e4:	10c00044 	addi	r3,r2,1
 10180e8:	d8c02115 	stw	r3,132(sp)
 10180ec:	11000005 	stb	r4,0(r2)
 10180f0:	d8802117 	ldw	r2,132(sp)
 10180f4:	173ffb36 	bltu	r2,fp,10180e4 <__alt_data_end+0xff0180e4>
 10180f8:	1405c83a 	sub	r2,r2,r16
 10180fc:	d8803315 	stw	r2,204(sp)
 1018100:	008011c4 	movi	r2,71
 1018104:	b080c526 	beq	r22,r2,101841c <___svfprintf_internal_r+0x1d14>
 1018108:	00801944 	movi	r2,101
 101810c:	1441d90e 	bge	r2,r17,1018874 <___svfprintf_internal_r+0x216c>
 1018110:	d8c02617 	ldw	r3,152(sp)
 1018114:	00801984 	movi	r2,102
 1018118:	d8c03215 	stw	r3,200(sp)
 101811c:	88813426 	beq	r17,r2,10185f0 <___svfprintf_internal_r+0x1ee8>
 1018120:	d8c03217 	ldw	r3,200(sp)
 1018124:	d9003317 	ldw	r4,204(sp)
 1018128:	19012516 	blt	r3,r4,10185c0 <___svfprintf_internal_r+0x1eb8>
 101812c:	9480004c 	andi	r18,r18,1
 1018130:	9001841e 	bne	r18,zero,1018744 <___svfprintf_internal_r+0x203c>
 1018134:	1805883a 	mov	r2,r3
 1018138:	1801cc16 	blt	r3,zero,101886c <___svfprintf_internal_r+0x2164>
 101813c:	d8c03217 	ldw	r3,200(sp)
 1018140:	044019c4 	movi	r17,103
 1018144:	d8c02e15 	stw	r3,184(sp)
 1018148:	df002a07 	ldb	fp,168(sp)
 101814c:	e000a61e 	bne	fp,zero,10183e8 <___svfprintf_internal_r+0x1ce0>
 1018150:	df002783 	ldbu	fp,158(sp)
 1018154:	d8802a15 	stw	r2,168(sp)
 1018158:	dc802b17 	ldw	r18,172(sp)
 101815c:	d8002915 	stw	zero,164(sp)
 1018160:	003b1706 	br	1016dc0 <__alt_data_end+0xff016dc0>
 1018164:	040040f4 	movhi	r16,259
 1018168:	842afb04 	addi	r16,r16,-21524
 101816c:	003aa606 	br	1016c08 <__alt_data_end+0xff016c08>
 1018170:	d9003917 	ldw	r4,228(sp)
 1018174:	04001004 	movi	r16,64
 1018178:	800b883a 	mov	r5,r16
 101817c:	101d91c0 	call	101d91c <_malloc_r>
 1018180:	d9002c17 	ldw	r4,176(sp)
 1018184:	20800015 	stw	r2,0(r4)
 1018188:	20800415 	stw	r2,16(r4)
 101818c:	1001cb26 	beq	r2,zero,10188bc <___svfprintf_internal_r+0x21b4>
 1018190:	d8802c17 	ldw	r2,176(sp)
 1018194:	14000515 	stw	r16,20(r2)
 1018198:	00397606 	br	1016774 <__alt_data_end+0xff016774>
 101819c:	040040f4 	movhi	r16,259
 10181a0:	842afd04 	addi	r16,r16,-21516
 10181a4:	003ee106 	br	1017d2c <__alt_data_end+0xff017d2c>
 10181a8:	d9402c17 	ldw	r5,176(sp)
 10181ac:	d9801e04 	addi	r6,sp,120
 10181b0:	9809883a 	mov	r4,r19
 10181b4:	101fdd00 	call	101fdd0 <__ssprint_r>
 10181b8:	103a381e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10181bc:	dc402617 	ldw	r17,152(sp)
 10181c0:	d8c02017 	ldw	r3,128(sp)
 10181c4:	da000404 	addi	r8,sp,16
 10181c8:	003f4306 	br	1017ed8 <__alt_data_end+0xff017ed8>
 10181cc:	01400184 	movi	r5,6
 10181d0:	d9402915 	stw	r5,164(sp)
 10181d4:	003f9506 	br	101802c <__alt_data_end+0xff01802c>
 10181d8:	d9002d17 	ldw	r4,180(sp)
 10181dc:	25000017 	ldw	r20,0(r4)
 10181e0:	21000104 	addi	r4,r4,4
 10181e4:	d9002d15 	stw	r4,180(sp)
 10181e8:	a02dd7fa 	srai	r22,r20,31
 10181ec:	b005883a 	mov	r2,r22
 10181f0:	003a9b06 	br	1016c60 <__alt_data_end+0xff016c60>
 10181f4:	d9402d17 	ldw	r5,180(sp)
 10181f8:	002d883a 	mov	r22,zero
 10181fc:	2d000017 	ldw	r20,0(r5)
 1018200:	29400104 	addi	r5,r5,4
 1018204:	d9402d15 	stw	r5,180(sp)
 1018208:	003bf906 	br	10171f0 <__alt_data_end+0xff0171f0>
 101820c:	9480100c 	andi	r18,r18,64
 1018210:	90006e26 	beq	r18,zero,10183cc <___svfprintf_internal_r+0x1cc4>
 1018214:	d9002d17 	ldw	r4,180(sp)
 1018218:	d9402f17 	ldw	r5,188(sp)
 101821c:	20800017 	ldw	r2,0(r4)
 1018220:	21000104 	addi	r4,r4,4
 1018224:	d9002d15 	stw	r4,180(sp)
 1018228:	1140000d 	sth	r5,0(r2)
 101822c:	00396106 	br	10167b4 <__alt_data_end+0xff0167b4>
 1018230:	d9402c17 	ldw	r5,176(sp)
 1018234:	d9801e04 	addi	r6,sp,120
 1018238:	9809883a 	mov	r4,r19
 101823c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1018240:	103a161e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1018244:	d8c02017 	ldw	r3,128(sp)
 1018248:	d8801f17 	ldw	r2,124(sp)
 101824c:	da000404 	addi	r8,sp,16
 1018250:	d9403317 	ldw	r5,204(sp)
 1018254:	10800044 	addi	r2,r2,1
 1018258:	44000015 	stw	r16,0(r8)
 101825c:	28c7883a 	add	r3,r5,r3
 1018260:	003b7706 	br	1017040 <__alt_data_end+0xff017040>
 1018264:	8009883a 	mov	r4,r16
 1018268:	da003e15 	stw	r8,248(sp)
 101826c:	10164b40 	call	10164b4 <strlen>
 1018270:	d8802e15 	stw	r2,184(sp)
 1018274:	da003e17 	ldw	r8,248(sp)
 1018278:	103c280e 	bge	r2,zero,101731c <__alt_data_end+0xff01731c>
 101827c:	0005883a 	mov	r2,zero
 1018280:	003c2606 	br	101731c <__alt_data_end+0xff01731c>
 1018284:	00bfffc4 	movi	r2,-1
 1018288:	003a0906 	br	1016ab0 <__alt_data_end+0xff016ab0>
 101828c:	010040f4 	movhi	r4,259
 1018290:	212b0f84 	addi	r4,r4,-21442
 1018294:	d9003515 	stw	r4,212(sp)
 1018298:	003b0606 	br	1016eb4 <__alt_data_end+0xff016eb4>
 101829c:	013fffc4 	movi	r4,-1
 10182a0:	003a2706 	br	1016b40 <__alt_data_end+0xff016b40>
 10182a4:	d9402c17 	ldw	r5,176(sp)
 10182a8:	d9801e04 	addi	r6,sp,120
 10182ac:	9809883a 	mov	r4,r19
 10182b0:	101fdd00 	call	101fdd0 <__ssprint_r>
 10182b4:	1039f91e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 10182b8:	d8c02017 	ldw	r3,128(sp)
 10182bc:	da000404 	addi	r8,sp,16
 10182c0:	003d8406 	br	10178d4 <__alt_data_end+0xff0178d4>
 10182c4:	0023883a 	mov	r17,zero
 10182c8:	003d8306 	br	10178d8 <__alt_data_end+0xff0178d8>
 10182cc:	010040f4 	movhi	r4,259
 10182d0:	212b0b84 	addi	r4,r4,-21458
 10182d4:	d9002b15 	stw	r4,172(sp)
 10182d8:	d9002b17 	ldw	r4,172(sp)
 10182dc:	1c47883a 	add	r3,r3,r17
 10182e0:	10800044 	addi	r2,r2,1
 10182e4:	41000015 	stw	r4,0(r8)
 10182e8:	44400115 	stw	r17,4(r8)
 10182ec:	d8c02015 	stw	r3,128(sp)
 10182f0:	d8801f15 	stw	r2,124(sp)
 10182f4:	010001c4 	movi	r4,7
 10182f8:	20bfcd16 	blt	r4,r2,1018230 <__alt_data_end+0xff018230>
 10182fc:	42000204 	addi	r8,r8,8
 1018300:	003fd306 	br	1018250 <__alt_data_end+0xff018250>
 1018304:	d9402c17 	ldw	r5,176(sp)
 1018308:	d9801e04 	addi	r6,sp,120
 101830c:	9809883a 	mov	r4,r19
 1018310:	101fdd00 	call	101fdd0 <__ssprint_r>
 1018314:	1039e11e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1018318:	d8802617 	ldw	r2,152(sp)
 101831c:	d8c02017 	ldw	r3,128(sp)
 1018320:	da000404 	addi	r8,sp,16
 1018324:	003e1c06 	br	1017b98 <__alt_data_end+0xff017b98>
 1018328:	d8802917 	ldw	r2,164(sp)
 101832c:	00c00184 	movi	r3,6
 1018330:	1880012e 	bgeu	r3,r2,1018338 <___svfprintf_internal_r+0x1c30>
 1018334:	1805883a 	mov	r2,r3
 1018338:	d8802e15 	stw	r2,184(sp)
 101833c:	1000f316 	blt	r2,zero,101870c <___svfprintf_internal_r+0x2004>
 1018340:	040040f4 	movhi	r16,259
 1018344:	d8802a15 	stw	r2,168(sp)
 1018348:	dd002d15 	stw	r20,180(sp)
 101834c:	d8002915 	stw	zero,164(sp)
 1018350:	d8003215 	stw	zero,200(sp)
 1018354:	842b0904 	addi	r16,r16,-21468
 1018358:	0039883a 	mov	fp,zero
 101835c:	003a9f06 	br	1016ddc <__alt_data_end+0xff016ddc>
 1018360:	010040f4 	movhi	r4,259
 1018364:	212b0f84 	addi	r4,r4,-21442
 1018368:	d9003515 	stw	r4,212(sp)
 101836c:	003b5f06 	br	10170ec <__alt_data_end+0xff0170ec>
 1018370:	d9402c17 	ldw	r5,176(sp)
 1018374:	d9801e04 	addi	r6,sp,120
 1018378:	9809883a 	mov	r4,r19
 101837c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1018380:	1039c61e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 1018384:	d8802617 	ldw	r2,152(sp)
 1018388:	d9403317 	ldw	r5,204(sp)
 101838c:	d8c02017 	ldw	r3,128(sp)
 1018390:	da000404 	addi	r8,sp,16
 1018394:	2885c83a 	sub	r2,r5,r2
 1018398:	003e1006 	br	1017bdc <__alt_data_end+0xff017bdc>
 101839c:	00800044 	movi	r2,1
 10183a0:	10803fcc 	andi	r2,r2,255
 10183a4:	00c00044 	movi	r3,1
 10183a8:	10fa3526 	beq	r2,r3,1016c80 <__alt_data_end+0xff016c80>
 10183ac:	00c00084 	movi	r3,2
 10183b0:	10fb9e26 	beq	r2,r3,101722c <__alt_data_end+0xff01722c>
 10183b4:	003a6406 	br	1016d48 <__alt_data_end+0xff016d48>
 10183b8:	0021883a 	mov	r16,zero
 10183bc:	003e0806 	br	1017be0 <__alt_data_end+0xff017be0>
 10183c0:	07000b44 	movi	fp,45
 10183c4:	df002785 	stb	fp,158(sp)
 10183c8:	003a0b06 	br	1016bf8 <__alt_data_end+0xff016bf8>
 10183cc:	d8c02d17 	ldw	r3,180(sp)
 10183d0:	d9002f17 	ldw	r4,188(sp)
 10183d4:	18800017 	ldw	r2,0(r3)
 10183d8:	18c00104 	addi	r3,r3,4
 10183dc:	d8c02d15 	stw	r3,180(sp)
 10183e0:	11000015 	stw	r4,0(r2)
 10183e4:	0038f306 	br	10167b4 <__alt_data_end+0xff0167b4>
 10183e8:	00c00b44 	movi	r3,45
 10183ec:	d8c02785 	stb	r3,158(sp)
 10183f0:	d8802a15 	stw	r2,168(sp)
 10183f4:	dc802b17 	ldw	r18,172(sp)
 10183f8:	d8002915 	stw	zero,164(sp)
 10183fc:	07000b44 	movi	fp,45
 1018400:	003a7306 	br	1016dd0 <__alt_data_end+0xff016dd0>
 1018404:	9080004c 	andi	r2,r18,1
 1018408:	1000941e 	bne	r2,zero,101865c <___svfprintf_internal_r+0x1f54>
 101840c:	d8802117 	ldw	r2,132(sp)
 1018410:	1405c83a 	sub	r2,r2,r16
 1018414:	d8803315 	stw	r2,204(sp)
 1018418:	b441161e 	bne	r22,r17,1018874 <___svfprintf_internal_r+0x216c>
 101841c:	dd802617 	ldw	r22,152(sp)
 1018420:	00bfff44 	movi	r2,-3
 1018424:	b0801a16 	blt	r22,r2,1018490 <___svfprintf_internal_r+0x1d88>
 1018428:	d9402917 	ldw	r5,164(sp)
 101842c:	2d801816 	blt	r5,r22,1018490 <___svfprintf_internal_r+0x1d88>
 1018430:	dd803215 	stw	r22,200(sp)
 1018434:	003f3a06 	br	1018120 <__alt_data_end+0xff018120>
 1018438:	1025883a 	mov	r18,r2
 101843c:	0039883a 	mov	fp,zero
 1018440:	00800084 	movi	r2,2
 1018444:	003fd606 	br	10183a0 <__alt_data_end+0xff0183a0>
 1018448:	9080004c 	andi	r2,r18,1
 101844c:	103f191e 	bne	r2,zero,10180b4 <__alt_data_end+0xff0180b4>
 1018450:	d8802117 	ldw	r2,132(sp)
 1018454:	003f2806 	br	10180f8 <__alt_data_end+0xff0180f8>
 1018458:	010040f4 	movhi	r4,259
 101845c:	212b0b84 	addi	r4,r4,-21458
 1018460:	d9002b15 	stw	r4,172(sp)
 1018464:	003c7c06 	br	1017658 <__alt_data_end+0xff017658>
 1018468:	e005883a 	mov	r2,fp
 101846c:	003f2206 	br	10180f8 <__alt_data_end+0xff0180f8>
 1018470:	d9402917 	ldw	r5,164(sp)
 1018474:	df002783 	ldbu	fp,158(sp)
 1018478:	dd002d15 	stw	r20,180(sp)
 101847c:	d9402a15 	stw	r5,168(sp)
 1018480:	d9402e15 	stw	r5,184(sp)
 1018484:	d8002915 	stw	zero,164(sp)
 1018488:	d8003215 	stw	zero,200(sp)
 101848c:	003a4c06 	br	1016dc0 <__alt_data_end+0xff016dc0>
 1018490:	8c7fff84 	addi	r17,r17,-2
 1018494:	b5bfffc4 	addi	r22,r22,-1
 1018498:	dd802615 	stw	r22,152(sp)
 101849c:	dc4022c5 	stb	r17,139(sp)
 10184a0:	b000c316 	blt	r22,zero,10187b0 <___svfprintf_internal_r+0x20a8>
 10184a4:	00800ac4 	movi	r2,43
 10184a8:	d8802305 	stb	r2,140(sp)
 10184ac:	00800244 	movi	r2,9
 10184b0:	15806e16 	blt	r2,r22,101866c <___svfprintf_internal_r+0x1f64>
 10184b4:	00800c04 	movi	r2,48
 10184b8:	b5800c04 	addi	r22,r22,48
 10184bc:	d8802345 	stb	r2,141(sp)
 10184c0:	dd802385 	stb	r22,142(sp)
 10184c4:	d88023c4 	addi	r2,sp,143
 10184c8:	df0022c4 	addi	fp,sp,139
 10184cc:	d8c03317 	ldw	r3,204(sp)
 10184d0:	1739c83a 	sub	fp,r2,fp
 10184d4:	d9003317 	ldw	r4,204(sp)
 10184d8:	e0c7883a 	add	r3,fp,r3
 10184dc:	df003b15 	stw	fp,236(sp)
 10184e0:	d8c02e15 	stw	r3,184(sp)
 10184e4:	00800044 	movi	r2,1
 10184e8:	1100b70e 	bge	r2,r4,10187c8 <___svfprintf_internal_r+0x20c0>
 10184ec:	d8c02e17 	ldw	r3,184(sp)
 10184f0:	18c00044 	addi	r3,r3,1
 10184f4:	d8c02e15 	stw	r3,184(sp)
 10184f8:	1805883a 	mov	r2,r3
 10184fc:	1800b016 	blt	r3,zero,10187c0 <___svfprintf_internal_r+0x20b8>
 1018500:	d8003215 	stw	zero,200(sp)
 1018504:	003f1006 	br	1018148 <__alt_data_end+0xff018148>
 1018508:	d8802917 	ldw	r2,164(sp)
 101850c:	103ec71e 	bne	r2,zero,101802c <__alt_data_end+0xff01802c>
 1018510:	dc002915 	stw	r16,164(sp)
 1018514:	003ec506 	br	101802c <__alt_data_end+0xff01802c>
 1018518:	d9402c17 	ldw	r5,176(sp)
 101851c:	d9801e04 	addi	r6,sp,120
 1018520:	9809883a 	mov	r4,r19
 1018524:	101fdd00 	call	101fdd0 <__ssprint_r>
 1018528:	10395c1e 	bne	r2,zero,1016a9c <__alt_data_end+0xff016a9c>
 101852c:	dc402617 	ldw	r17,152(sp)
 1018530:	d8c02017 	ldw	r3,128(sp)
 1018534:	d8801f17 	ldw	r2,124(sp)
 1018538:	da000404 	addi	r8,sp,16
 101853c:	003e7706 	br	1017f1c <__alt_data_end+0xff017f1c>
 1018540:	582f883a 	mov	r23,r11
 1018544:	d8002915 	stw	zero,164(sp)
 1018548:	0038c406 	br	101685c <__alt_data_end+0xff01685c>
 101854c:	d8c02917 	ldw	r3,164(sp)
 1018550:	d8802104 	addi	r2,sp,132
 1018554:	d8800315 	stw	r2,12(sp)
 1018558:	d9403617 	ldw	r5,216(sp)
 101855c:	d8802504 	addi	r2,sp,148
 1018560:	d8800215 	stw	r2,8(sp)
 1018564:	d8802604 	addi	r2,sp,152
 1018568:	d8c00015 	stw	r3,0(sp)
 101856c:	9809883a 	mov	r4,r19
 1018570:	d8800115 	stw	r2,4(sp)
 1018574:	01c000c4 	movi	r7,3
 1018578:	a00d883a 	mov	r6,r20
 101857c:	da003e15 	stw	r8,248(sp)
 1018580:	101af3c0 	call	101af3c <_dtoa_r>
 1018584:	d9002917 	ldw	r4,164(sp)
 1018588:	da003e17 	ldw	r8,248(sp)
 101858c:	1021883a 	mov	r16,r2
 1018590:	1139883a 	add	fp,r2,r4
 1018594:	2007883a 	mov	r3,r4
 1018598:	81000007 	ldb	r4,0(r16)
 101859c:	00800c04 	movi	r2,48
 10185a0:	20806f26 	beq	r4,r2,1018760 <___svfprintf_internal_r+0x2058>
 10185a4:	d8c02617 	ldw	r3,152(sp)
 10185a8:	e0f9883a 	add	fp,fp,r3
 10185ac:	003ec206 	br	10180b8 <__alt_data_end+0xff0180b8>
 10185b0:	00c00b44 	movi	r3,45
 10185b4:	2520003c 	xorhi	r20,r4,32768
 10185b8:	d8c02a05 	stb	r3,168(sp)
 10185bc:	003ea106 	br	1018044 <__alt_data_end+0xff018044>
 10185c0:	d8c03217 	ldw	r3,200(sp)
 10185c4:	00c0890e 	bge	zero,r3,10187ec <___svfprintf_internal_r+0x20e4>
 10185c8:	00800044 	movi	r2,1
 10185cc:	d9003317 	ldw	r4,204(sp)
 10185d0:	1105883a 	add	r2,r2,r4
 10185d4:	d8802e15 	stw	r2,184(sp)
 10185d8:	10005f16 	blt	r2,zero,1018758 <___svfprintf_internal_r+0x2050>
 10185dc:	044019c4 	movi	r17,103
 10185e0:	003ed906 	br	1018148 <__alt_data_end+0xff018148>
 10185e4:	d9002917 	ldw	r4,164(sp)
 10185e8:	20c00044 	addi	r3,r4,1
 10185ec:	003e9c06 	br	1018060 <__alt_data_end+0xff018060>
 10185f0:	d9002917 	ldw	r4,164(sp)
 10185f4:	00c0680e 	bge	zero,r3,1018798 <___svfprintf_internal_r+0x2090>
 10185f8:	2000461e 	bne	r4,zero,1018714 <___svfprintf_internal_r+0x200c>
 10185fc:	9480004c 	andi	r18,r18,1
 1018600:	9000441e 	bne	r18,zero,1018714 <___svfprintf_internal_r+0x200c>
 1018604:	1805883a 	mov	r2,r3
 1018608:	1800a016 	blt	r3,zero,101888c <___svfprintf_internal_r+0x2184>
 101860c:	d8c03217 	ldw	r3,200(sp)
 1018610:	d8c02e15 	stw	r3,184(sp)
 1018614:	003ecc06 	br	1018148 <__alt_data_end+0xff018148>
 1018618:	d9402917 	ldw	r5,164(sp)
 101861c:	d8802104 	addi	r2,sp,132
 1018620:	d8800315 	stw	r2,12(sp)
 1018624:	d9400015 	stw	r5,0(sp)
 1018628:	d8802504 	addi	r2,sp,148
 101862c:	d9403617 	ldw	r5,216(sp)
 1018630:	d8800215 	stw	r2,8(sp)
 1018634:	d8802604 	addi	r2,sp,152
 1018638:	d8800115 	stw	r2,4(sp)
 101863c:	01c000c4 	movi	r7,3
 1018640:	a00d883a 	mov	r6,r20
 1018644:	9809883a 	mov	r4,r19
 1018648:	da003e15 	stw	r8,248(sp)
 101864c:	101af3c0 	call	101af3c <_dtoa_r>
 1018650:	d8c02917 	ldw	r3,164(sp)
 1018654:	da003e17 	ldw	r8,248(sp)
 1018658:	1021883a 	mov	r16,r2
 101865c:	00801184 	movi	r2,70
 1018660:	80f9883a 	add	fp,r16,r3
 1018664:	88bfcc26 	beq	r17,r2,1018598 <__alt_data_end+0xff018598>
 1018668:	003e9306 	br	10180b8 <__alt_data_end+0xff0180b8>
 101866c:	df0022c4 	addi	fp,sp,139
 1018670:	dc002915 	stw	r16,164(sp)
 1018674:	9829883a 	mov	r20,r19
 1018678:	e021883a 	mov	r16,fp
 101867c:	4027883a 	mov	r19,r8
 1018680:	b009883a 	mov	r4,r22
 1018684:	01400284 	movi	r5,10
 1018688:	1023c8c0 	call	1023c8c <__modsi3>
 101868c:	10800c04 	addi	r2,r2,48
 1018690:	843fffc4 	addi	r16,r16,-1
 1018694:	b009883a 	mov	r4,r22
 1018698:	01400284 	movi	r5,10
 101869c:	80800005 	stb	r2,0(r16)
 10186a0:	1023c080 	call	1023c08 <__divsi3>
 10186a4:	102d883a 	mov	r22,r2
 10186a8:	00800244 	movi	r2,9
 10186ac:	15bff416 	blt	r2,r22,1018680 <__alt_data_end+0xff018680>
 10186b0:	9811883a 	mov	r8,r19
 10186b4:	b0800c04 	addi	r2,r22,48
 10186b8:	a027883a 	mov	r19,r20
 10186bc:	8029883a 	mov	r20,r16
 10186c0:	a17fffc4 	addi	r5,r20,-1
 10186c4:	a0bfffc5 	stb	r2,-1(r20)
 10186c8:	dc002917 	ldw	r16,164(sp)
 10186cc:	2f00752e 	bgeu	r5,fp,10188a4 <___svfprintf_internal_r+0x219c>
 10186d0:	d9c02384 	addi	r7,sp,142
 10186d4:	3d0fc83a 	sub	r7,r7,r20
 10186d8:	d9002344 	addi	r4,sp,141
 10186dc:	e1cf883a 	add	r7,fp,r7
 10186e0:	00000106 	br	10186e8 <___svfprintf_internal_r+0x1fe0>
 10186e4:	28800003 	ldbu	r2,0(r5)
 10186e8:	20800005 	stb	r2,0(r4)
 10186ec:	21000044 	addi	r4,r4,1
 10186f0:	29400044 	addi	r5,r5,1
 10186f4:	21fffb1e 	bne	r4,r7,10186e4 <__alt_data_end+0xff0186e4>
 10186f8:	d8802304 	addi	r2,sp,140
 10186fc:	1505c83a 	sub	r2,r2,r20
 1018700:	d8c02344 	addi	r3,sp,141
 1018704:	1885883a 	add	r2,r3,r2
 1018708:	003f7006 	br	10184cc <__alt_data_end+0xff0184cc>
 101870c:	0005883a 	mov	r2,zero
 1018710:	003f0b06 	br	1018340 <__alt_data_end+0xff018340>
 1018714:	d9002917 	ldw	r4,164(sp)
 1018718:	d8c03217 	ldw	r3,200(sp)
 101871c:	20800044 	addi	r2,r4,1
 1018720:	1885883a 	add	r2,r3,r2
 1018724:	d8802e15 	stw	r2,184(sp)
 1018728:	103e870e 	bge	r2,zero,1018148 <__alt_data_end+0xff018148>
 101872c:	0005883a 	mov	r2,zero
 1018730:	003e8506 	br	1018148 <__alt_data_end+0xff018148>
 1018734:	010040f4 	movhi	r4,259
 1018738:	212b0b84 	addi	r4,r4,-21458
 101873c:	d9002b15 	stw	r4,172(sp)
 1018740:	003cc506 	br	1017a58 <__alt_data_end+0xff017a58>
 1018744:	d8c03217 	ldw	r3,200(sp)
 1018748:	18c00044 	addi	r3,r3,1
 101874c:	d8c02e15 	stw	r3,184(sp)
 1018750:	1805883a 	mov	r2,r3
 1018754:	183fa10e 	bge	r3,zero,10185dc <__alt_data_end+0xff0185dc>
 1018758:	0005883a 	mov	r2,zero
 101875c:	003f9f06 	br	10185dc <__alt_data_end+0xff0185dc>
 1018760:	d9003617 	ldw	r4,216(sp)
 1018764:	000d883a 	mov	r6,zero
 1018768:	000f883a 	mov	r7,zero
 101876c:	a00b883a 	mov	r5,r20
 1018770:	d8c03d15 	stw	r3,244(sp)
 1018774:	da003e15 	stw	r8,248(sp)
 1018778:	1024f500 	call	1024f50 <__eqdf2>
 101877c:	d8c03d17 	ldw	r3,244(sp)
 1018780:	da003e17 	ldw	r8,248(sp)
 1018784:	103f8726 	beq	r2,zero,10185a4 <__alt_data_end+0xff0185a4>
 1018788:	00800044 	movi	r2,1
 101878c:	10c7c83a 	sub	r3,r2,r3
 1018790:	d8c02615 	stw	r3,152(sp)
 1018794:	003f8406 	br	10185a8 <__alt_data_end+0xff0185a8>
 1018798:	20000e1e 	bne	r4,zero,10187d4 <___svfprintf_internal_r+0x20cc>
 101879c:	9480004c 	andi	r18,r18,1
 10187a0:	90000c1e 	bne	r18,zero,10187d4 <___svfprintf_internal_r+0x20cc>
 10187a4:	00800044 	movi	r2,1
 10187a8:	d8802e15 	stw	r2,184(sp)
 10187ac:	003e6606 	br	1018148 <__alt_data_end+0xff018148>
 10187b0:	00800b44 	movi	r2,45
 10187b4:	05adc83a 	sub	r22,zero,r22
 10187b8:	d8802305 	stb	r2,140(sp)
 10187bc:	003f3b06 	br	10184ac <__alt_data_end+0xff0184ac>
 10187c0:	0005883a 	mov	r2,zero
 10187c4:	003f4e06 	br	1018500 <__alt_data_end+0xff018500>
 10187c8:	90a4703a 	and	r18,r18,r2
 10187cc:	903f4a26 	beq	r18,zero,10184f8 <__alt_data_end+0xff0184f8>
 10187d0:	003f4606 	br	10184ec <__alt_data_end+0xff0184ec>
 10187d4:	d8c02917 	ldw	r3,164(sp)
 10187d8:	18c00084 	addi	r3,r3,2
 10187dc:	d8c02e15 	stw	r3,184(sp)
 10187e0:	1805883a 	mov	r2,r3
 10187e4:	183e580e 	bge	r3,zero,1018148 <__alt_data_end+0xff018148>
 10187e8:	003fd006 	br	101872c <__alt_data_end+0xff01872c>
 10187ec:	00800084 	movi	r2,2
 10187f0:	10c5c83a 	sub	r2,r2,r3
 10187f4:	003f7506 	br	10185cc <__alt_data_end+0xff0185cc>
 10187f8:	d8802d17 	ldw	r2,180(sp)
 10187fc:	d9002d17 	ldw	r4,180(sp)
 1018800:	bc400043 	ldbu	r17,1(r23)
 1018804:	10800017 	ldw	r2,0(r2)
 1018808:	582f883a 	mov	r23,r11
 101880c:	d8802915 	stw	r2,164(sp)
 1018810:	20800104 	addi	r2,r4,4
 1018814:	d9002917 	ldw	r4,164(sp)
 1018818:	d8802d15 	stw	r2,180(sp)
 101881c:	203df00e 	bge	r4,zero,1017fe0 <__alt_data_end+0xff017fe0>
 1018820:	8c403fcc 	andi	r17,r17,255
 1018824:	00bfffc4 	movi	r2,-1
 1018828:	8c40201c 	xori	r17,r17,128
 101882c:	d8802915 	stw	r2,164(sp)
 1018830:	8c7fe004 	addi	r17,r17,-128
 1018834:	00380806 	br	1016858 <__alt_data_end+0xff016858>
 1018838:	9080004c 	andi	r2,r18,1
 101883c:	0039883a 	mov	fp,zero
 1018840:	10000726 	beq	r2,zero,1018860 <___svfprintf_internal_r+0x2158>
 1018844:	d8c02817 	ldw	r3,160(sp)
 1018848:	dc001dc4 	addi	r16,sp,119
 101884c:	00800c04 	movi	r2,48
 1018850:	1c07c83a 	sub	r3,r3,r16
 1018854:	d8801dc5 	stb	r2,119(sp)
 1018858:	d8c02e15 	stw	r3,184(sp)
 101885c:	00395206 	br	1016da8 <__alt_data_end+0xff016da8>
 1018860:	d8002e15 	stw	zero,184(sp)
 1018864:	dc001e04 	addi	r16,sp,120
 1018868:	00394f06 	br	1016da8 <__alt_data_end+0xff016da8>
 101886c:	0005883a 	mov	r2,zero
 1018870:	003e3206 	br	101813c <__alt_data_end+0xff01813c>
 1018874:	dd802617 	ldw	r22,152(sp)
 1018878:	003f0606 	br	1018494 <__alt_data_end+0xff018494>
 101887c:	d9c02785 	stb	r7,158(sp)
 1018880:	003a5106 	br	10171c8 <__alt_data_end+0xff0171c8>
 1018884:	d9c02785 	stb	r7,158(sp)
 1018888:	003a3706 	br	1017168 <__alt_data_end+0xff017168>
 101888c:	0005883a 	mov	r2,zero
 1018890:	003f5e06 	br	101860c <__alt_data_end+0xff01860c>
 1018894:	d9c02785 	stb	r7,158(sp)
 1018898:	00391706 	br	1016cf8 <__alt_data_end+0xff016cf8>
 101889c:	d9c02785 	stb	r7,158(sp)
 10188a0:	0038e606 	br	1016c3c <__alt_data_end+0xff016c3c>
 10188a4:	d8802344 	addi	r2,sp,141
 10188a8:	003f0806 	br	10184cc <__alt_data_end+0xff0184cc>
 10188ac:	d9c02785 	stb	r7,158(sp)
 10188b0:	0038b706 	br	1016b90 <__alt_data_end+0xff016b90>
 10188b4:	d9c02785 	stb	r7,158(sp)
 10188b8:	003adc06 	br	101742c <__alt_data_end+0xff01742c>
 10188bc:	d9403917 	ldw	r5,228(sp)
 10188c0:	00800304 	movi	r2,12
 10188c4:	28800015 	stw	r2,0(r5)
 10188c8:	00bfffc4 	movi	r2,-1
 10188cc:	00387806 	br	1016ab0 <__alt_data_end+0xff016ab0>
 10188d0:	d9c02785 	stb	r7,158(sp)
 10188d4:	003abf06 	br	10173d4 <__alt_data_end+0xff0173d4>
 10188d8:	d9c02785 	stb	r7,158(sp)
 10188dc:	003a9b06 	br	101734c <__alt_data_end+0xff01734c>

010188e0 <_user_strerror>:
 10188e0:	0005883a 	mov	r2,zero
 10188e4:	f800283a 	ret

010188e8 <_vfiprintf_r>:
 10188e8:	deffff04 	addi	sp,sp,-4
 10188ec:	dfc00015 	stw	ra,0(sp)
 10188f0:	10212f00 	call	10212f0 <___vfiprintf_internal_r>
 10188f4:	dfc00017 	ldw	ra,0(sp)
 10188f8:	dec00104 	addi	sp,sp,4
 10188fc:	f800283a 	ret

01018900 <___vfprintf_internal_r>:
 1018900:	deffb804 	addi	sp,sp,-288
 1018904:	dfc04715 	stw	ra,284(sp)
 1018908:	ddc04515 	stw	r23,276(sp)
 101890c:	dd404315 	stw	r21,268(sp)
 1018910:	d9002c15 	stw	r4,176(sp)
 1018914:	282f883a 	mov	r23,r5
 1018918:	302b883a 	mov	r21,r6
 101891c:	d9c02d15 	stw	r7,180(sp)
 1018920:	df004615 	stw	fp,280(sp)
 1018924:	dd804415 	stw	r22,272(sp)
 1018928:	dd004215 	stw	r20,264(sp)
 101892c:	dcc04115 	stw	r19,260(sp)
 1018930:	dc804015 	stw	r18,256(sp)
 1018934:	dc403f15 	stw	r17,252(sp)
 1018938:	dc003e15 	stw	r16,248(sp)
 101893c:	101d7300 	call	101d730 <_localeconv_r>
 1018940:	10800017 	ldw	r2,0(r2)
 1018944:	1009883a 	mov	r4,r2
 1018948:	d8803415 	stw	r2,208(sp)
 101894c:	10164b40 	call	10164b4 <strlen>
 1018950:	d8803715 	stw	r2,220(sp)
 1018954:	d8802c17 	ldw	r2,176(sp)
 1018958:	10000226 	beq	r2,zero,1018964 <___vfprintf_internal_r+0x64>
 101895c:	10800e17 	ldw	r2,56(r2)
 1018960:	1000f926 	beq	r2,zero,1018d48 <___vfprintf_internal_r+0x448>
 1018964:	b880030b 	ldhu	r2,12(r23)
 1018968:	10c8000c 	andi	r3,r2,8192
 101896c:	1800061e 	bne	r3,zero,1018988 <___vfprintf_internal_r+0x88>
 1018970:	b9001917 	ldw	r4,100(r23)
 1018974:	00f7ffc4 	movi	r3,-8193
 1018978:	10880014 	ori	r2,r2,8192
 101897c:	20c6703a 	and	r3,r4,r3
 1018980:	b880030d 	sth	r2,12(r23)
 1018984:	b8c01915 	stw	r3,100(r23)
 1018988:	10c0020c 	andi	r3,r2,8
 101898c:	1800c126 	beq	r3,zero,1018c94 <___vfprintf_internal_r+0x394>
 1018990:	b8c00417 	ldw	r3,16(r23)
 1018994:	1800bf26 	beq	r3,zero,1018c94 <___vfprintf_internal_r+0x394>
 1018998:	1080068c 	andi	r2,r2,26
 101899c:	00c00284 	movi	r3,10
 10189a0:	10c0c426 	beq	r2,r3,1018cb4 <___vfprintf_internal_r+0x3b4>
 10189a4:	d8c00404 	addi	r3,sp,16
 10189a8:	050040f4 	movhi	r20,259
 10189ac:	d9001e04 	addi	r4,sp,120
 10189b0:	a52b1384 	addi	r20,r20,-21426
 10189b4:	d8c01e15 	stw	r3,120(sp)
 10189b8:	d8002015 	stw	zero,128(sp)
 10189bc:	d8001f15 	stw	zero,124(sp)
 10189c0:	d8003315 	stw	zero,204(sp)
 10189c4:	d8003615 	stw	zero,216(sp)
 10189c8:	d8003815 	stw	zero,224(sp)
 10189cc:	1811883a 	mov	r8,r3
 10189d0:	d8003915 	stw	zero,228(sp)
 10189d4:	d8003a15 	stw	zero,232(sp)
 10189d8:	d8002f15 	stw	zero,188(sp)
 10189dc:	d9002815 	stw	r4,160(sp)
 10189e0:	a8800007 	ldb	r2,0(r21)
 10189e4:	10027b26 	beq	r2,zero,10193d4 <___vfprintf_internal_r+0xad4>
 10189e8:	00c00944 	movi	r3,37
 10189ec:	a821883a 	mov	r16,r21
 10189f0:	10c0021e 	bne	r2,r3,10189fc <___vfprintf_internal_r+0xfc>
 10189f4:	00001406 	br	1018a48 <___vfprintf_internal_r+0x148>
 10189f8:	10c00326 	beq	r2,r3,1018a08 <___vfprintf_internal_r+0x108>
 10189fc:	84000044 	addi	r16,r16,1
 1018a00:	80800007 	ldb	r2,0(r16)
 1018a04:	103ffc1e 	bne	r2,zero,10189f8 <__alt_data_end+0xff0189f8>
 1018a08:	8563c83a 	sub	r17,r16,r21
 1018a0c:	88000e26 	beq	r17,zero,1018a48 <___vfprintf_internal_r+0x148>
 1018a10:	d8c02017 	ldw	r3,128(sp)
 1018a14:	d8801f17 	ldw	r2,124(sp)
 1018a18:	45400015 	stw	r21,0(r8)
 1018a1c:	1c47883a 	add	r3,r3,r17
 1018a20:	10800044 	addi	r2,r2,1
 1018a24:	d8c02015 	stw	r3,128(sp)
 1018a28:	44400115 	stw	r17,4(r8)
 1018a2c:	d8801f15 	stw	r2,124(sp)
 1018a30:	00c001c4 	movi	r3,7
 1018a34:	1880a716 	blt	r3,r2,1018cd4 <___vfprintf_internal_r+0x3d4>
 1018a38:	42000204 	addi	r8,r8,8
 1018a3c:	d9402f17 	ldw	r5,188(sp)
 1018a40:	2c4b883a 	add	r5,r5,r17
 1018a44:	d9402f15 	stw	r5,188(sp)
 1018a48:	80800007 	ldb	r2,0(r16)
 1018a4c:	1000a826 	beq	r2,zero,1018cf0 <___vfprintf_internal_r+0x3f0>
 1018a50:	84400047 	ldb	r17,1(r16)
 1018a54:	00bfffc4 	movi	r2,-1
 1018a58:	85400044 	addi	r21,r16,1
 1018a5c:	d8002785 	stb	zero,158(sp)
 1018a60:	0007883a 	mov	r3,zero
 1018a64:	000f883a 	mov	r7,zero
 1018a68:	d8802915 	stw	r2,164(sp)
 1018a6c:	d8003115 	stw	zero,196(sp)
 1018a70:	0025883a 	mov	r18,zero
 1018a74:	01401604 	movi	r5,88
 1018a78:	01800244 	movi	r6,9
 1018a7c:	02800a84 	movi	r10,42
 1018a80:	02401b04 	movi	r9,108
 1018a84:	ad400044 	addi	r21,r21,1
 1018a88:	88bff804 	addi	r2,r17,-32
 1018a8c:	28830436 	bltu	r5,r2,10196a0 <___vfprintf_internal_r+0xda0>
 1018a90:	100490ba 	slli	r2,r2,2
 1018a94:	010040b4 	movhi	r4,258
 1018a98:	2122aa04 	addi	r4,r4,-30040
 1018a9c:	1105883a 	add	r2,r2,r4
 1018aa0:	10800017 	ldw	r2,0(r2)
 1018aa4:	1000683a 	jmp	r2
 1018aa8:	010195c0 	call	10195c <__alt_mem_sdram-0xefe6a4>
 1018aac:	010196a0 	cmpeqi	r4,zero,1626
 1018ab0:	010196a0 	cmpeqi	r4,zero,1626
 1018ab4:	010195e0 	cmpeqi	r4,zero,1623
 1018ab8:	010196a0 	cmpeqi	r4,zero,1626
 1018abc:	010196a0 	cmpeqi	r4,zero,1626
 1018ac0:	010196a0 	cmpeqi	r4,zero,1626
 1018ac4:	010196a0 	cmpeqi	r4,zero,1626
 1018ac8:	010196a0 	cmpeqi	r4,zero,1626
 1018acc:	010196a0 	cmpeqi	r4,zero,1626
 1018ad0:	01018d54 	movui	r4,1589
 1018ad4:	010194fc 	xorhi	r4,zero,1619
 1018ad8:	010196a0 	cmpeqi	r4,zero,1626
 1018adc:	01018c1c 	xori	r4,zero,1584
 1018ae0:	01018d7c 	xorhi	r4,zero,1589
 1018ae4:	010196a0 	cmpeqi	r4,zero,1626
 1018ae8:	01018dbc 	xorhi	r4,zero,1590
 1018aec:	01018dc8 	cmpgei	r4,zero,1591
 1018af0:	01018dc8 	cmpgei	r4,zero,1591
 1018af4:	01018dc8 	cmpgei	r4,zero,1591
 1018af8:	01018dc8 	cmpgei	r4,zero,1591
 1018afc:	01018dc8 	cmpgei	r4,zero,1591
 1018b00:	01018dc8 	cmpgei	r4,zero,1591
 1018b04:	01018dc8 	cmpgei	r4,zero,1591
 1018b08:	01018dc8 	cmpgei	r4,zero,1591
 1018b0c:	01018dc8 	cmpgei	r4,zero,1591
 1018b10:	010196a0 	cmpeqi	r4,zero,1626
 1018b14:	010196a0 	cmpeqi	r4,zero,1626
 1018b18:	010196a0 	cmpeqi	r4,zero,1626
 1018b1c:	010196a0 	cmpeqi	r4,zero,1626
 1018b20:	010196a0 	cmpeqi	r4,zero,1626
 1018b24:	010196a0 	cmpeqi	r4,zero,1626
 1018b28:	010196a0 	cmpeqi	r4,zero,1626
 1018b2c:	010196a0 	cmpeqi	r4,zero,1626
 1018b30:	010196a0 	cmpeqi	r4,zero,1626
 1018b34:	010196a0 	cmpeqi	r4,zero,1626
 1018b38:	01018dfc 	xorhi	r4,zero,1591
 1018b3c:	01018eb8 	rdprs	r4,zero,1594
 1018b40:	010196a0 	cmpeqi	r4,zero,1626
 1018b44:	01018eb8 	rdprs	r4,zero,1594
 1018b48:	010196a0 	cmpeqi	r4,zero,1626
 1018b4c:	010196a0 	cmpeqi	r4,zero,1626
 1018b50:	010196a0 	cmpeqi	r4,zero,1626
 1018b54:	010196a0 	cmpeqi	r4,zero,1626
 1018b58:	01018f58 	cmpnei	r4,zero,1597
 1018b5c:	010196a0 	cmpeqi	r4,zero,1626
 1018b60:	010196a0 	cmpeqi	r4,zero,1626
 1018b64:	01018f64 	muli	r4,zero,1597
 1018b68:	010196a0 	cmpeqi	r4,zero,1626
 1018b6c:	010196a0 	cmpeqi	r4,zero,1626
 1018b70:	010196a0 	cmpeqi	r4,zero,1626
 1018b74:	010196a0 	cmpeqi	r4,zero,1626
 1018b78:	010196a0 	cmpeqi	r4,zero,1626
 1018b7c:	010193dc 	xori	r4,zero,1615
 1018b80:	010196a0 	cmpeqi	r4,zero,1626
 1018b84:	010196a0 	cmpeqi	r4,zero,1626
 1018b88:	0101943c 	xorhi	r4,zero,1616
 1018b8c:	010196a0 	cmpeqi	r4,zero,1626
 1018b90:	010196a0 	cmpeqi	r4,zero,1626
 1018b94:	010196a0 	cmpeqi	r4,zero,1626
 1018b98:	010196a0 	cmpeqi	r4,zero,1626
 1018b9c:	010196a0 	cmpeqi	r4,zero,1626
 1018ba0:	010196a0 	cmpeqi	r4,zero,1626
 1018ba4:	010196a0 	cmpeqi	r4,zero,1626
 1018ba8:	010196a0 	cmpeqi	r4,zero,1626
 1018bac:	010196a0 	cmpeqi	r4,zero,1626
 1018bb0:	010196a0 	cmpeqi	r4,zero,1626
 1018bb4:	0101964c 	andi	r4,zero,1625
 1018bb8:	010195ec 	andhi	r4,zero,1623
 1018bbc:	01018eb8 	rdprs	r4,zero,1594
 1018bc0:	01018eb8 	rdprs	r4,zero,1594
 1018bc4:	01018eb8 	rdprs	r4,zero,1594
 1018bc8:	010195fc 	xorhi	r4,zero,1623
 1018bcc:	010195ec 	andhi	r4,zero,1623
 1018bd0:	010196a0 	cmpeqi	r4,zero,1626
 1018bd4:	010196a0 	cmpeqi	r4,zero,1626
 1018bd8:	01019608 	cmpgei	r4,zero,1624
 1018bdc:	010196a0 	cmpeqi	r4,zero,1626
 1018be0:	01019618 	cmpnei	r4,zero,1624
 1018be4:	010194ec 	andhi	r4,zero,1619
 1018be8:	01018c28 	cmpgeui	r4,zero,1584
 1018bec:	0101950c 	andi	r4,zero,1620
 1018bf0:	010196a0 	cmpeqi	r4,zero,1626
 1018bf4:	01019518 	cmpnei	r4,zero,1620
 1018bf8:	010196a0 	cmpeqi	r4,zero,1626
 1018bfc:	01019574 	movhi	r4,1621
 1018c00:	010196a0 	cmpeqi	r4,zero,1626
 1018c04:	010196a0 	cmpeqi	r4,zero,1626
 1018c08:	01019584 	movi	r4,1622
 1018c0c:	d9003117 	ldw	r4,196(sp)
 1018c10:	d8802d15 	stw	r2,180(sp)
 1018c14:	0109c83a 	sub	r4,zero,r4
 1018c18:	d9003115 	stw	r4,196(sp)
 1018c1c:	94800114 	ori	r18,r18,4
 1018c20:	ac400007 	ldb	r17,0(r21)
 1018c24:	003f9706 	br	1018a84 <__alt_data_end+0xff018a84>
 1018c28:	00800c04 	movi	r2,48
 1018c2c:	d9002d17 	ldw	r4,180(sp)
 1018c30:	d9402917 	ldw	r5,164(sp)
 1018c34:	d8802705 	stb	r2,156(sp)
 1018c38:	00801e04 	movi	r2,120
 1018c3c:	d8802745 	stb	r2,157(sp)
 1018c40:	d8002785 	stb	zero,158(sp)
 1018c44:	20c00104 	addi	r3,r4,4
 1018c48:	24c00017 	ldw	r19,0(r4)
 1018c4c:	002d883a 	mov	r22,zero
 1018c50:	90800094 	ori	r2,r18,2
 1018c54:	28029a16 	blt	r5,zero,10196c0 <___vfprintf_internal_r+0xdc0>
 1018c58:	00bfdfc4 	movi	r2,-129
 1018c5c:	90a4703a 	and	r18,r18,r2
 1018c60:	d8c02d15 	stw	r3,180(sp)
 1018c64:	94800094 	ori	r18,r18,2
 1018c68:	9802871e 	bne	r19,zero,1019688 <___vfprintf_internal_r+0xd88>
 1018c6c:	008040f4 	movhi	r2,259
 1018c70:	10ab0404 	addi	r2,r2,-21488
 1018c74:	d8803915 	stw	r2,228(sp)
 1018c78:	04401e04 	movi	r17,120
 1018c7c:	d8802917 	ldw	r2,164(sp)
 1018c80:	0039883a 	mov	fp,zero
 1018c84:	1001e926 	beq	r2,zero,101942c <___vfprintf_internal_r+0xb2c>
 1018c88:	0027883a 	mov	r19,zero
 1018c8c:	002d883a 	mov	r22,zero
 1018c90:	00020506 	br	10194a8 <___vfprintf_internal_r+0xba8>
 1018c94:	d9002c17 	ldw	r4,176(sp)
 1018c98:	b80b883a 	mov	r5,r23
 1018c9c:	101abd00 	call	101abd0 <__swsetup_r>
 1018ca0:	1005ac1e 	bne	r2,zero,101a354 <___vfprintf_internal_r+0x1a54>
 1018ca4:	b880030b 	ldhu	r2,12(r23)
 1018ca8:	00c00284 	movi	r3,10
 1018cac:	1080068c 	andi	r2,r2,26
 1018cb0:	10ff3c1e 	bne	r2,r3,10189a4 <__alt_data_end+0xff0189a4>
 1018cb4:	b880038f 	ldh	r2,14(r23)
 1018cb8:	103f3a16 	blt	r2,zero,10189a4 <__alt_data_end+0xff0189a4>
 1018cbc:	d9c02d17 	ldw	r7,180(sp)
 1018cc0:	d9002c17 	ldw	r4,176(sp)
 1018cc4:	a80d883a 	mov	r6,r21
 1018cc8:	b80b883a 	mov	r5,r23
 1018ccc:	101ab140 	call	101ab14 <__sbprintf>
 1018cd0:	00001106 	br	1018d18 <___vfprintf_internal_r+0x418>
 1018cd4:	d9002c17 	ldw	r4,176(sp)
 1018cd8:	d9801e04 	addi	r6,sp,120
 1018cdc:	b80b883a 	mov	r5,r23
 1018ce0:	10212d80 	call	10212d8 <__sprint_r>
 1018ce4:	1000081e 	bne	r2,zero,1018d08 <___vfprintf_internal_r+0x408>
 1018ce8:	da000404 	addi	r8,sp,16
 1018cec:	003f5306 	br	1018a3c <__alt_data_end+0xff018a3c>
 1018cf0:	d8802017 	ldw	r2,128(sp)
 1018cf4:	10000426 	beq	r2,zero,1018d08 <___vfprintf_internal_r+0x408>
 1018cf8:	d9002c17 	ldw	r4,176(sp)
 1018cfc:	d9801e04 	addi	r6,sp,120
 1018d00:	b80b883a 	mov	r5,r23
 1018d04:	10212d80 	call	10212d8 <__sprint_r>
 1018d08:	b880030b 	ldhu	r2,12(r23)
 1018d0c:	1080100c 	andi	r2,r2,64
 1018d10:	1005901e 	bne	r2,zero,101a354 <___vfprintf_internal_r+0x1a54>
 1018d14:	d8802f17 	ldw	r2,188(sp)
 1018d18:	dfc04717 	ldw	ra,284(sp)
 1018d1c:	df004617 	ldw	fp,280(sp)
 1018d20:	ddc04517 	ldw	r23,276(sp)
 1018d24:	dd804417 	ldw	r22,272(sp)
 1018d28:	dd404317 	ldw	r21,268(sp)
 1018d2c:	dd004217 	ldw	r20,264(sp)
 1018d30:	dcc04117 	ldw	r19,260(sp)
 1018d34:	dc804017 	ldw	r18,256(sp)
 1018d38:	dc403f17 	ldw	r17,252(sp)
 1018d3c:	dc003e17 	ldw	r16,248(sp)
 1018d40:	dec04804 	addi	sp,sp,288
 1018d44:	f800283a 	ret
 1018d48:	d9002c17 	ldw	r4,176(sp)
 1018d4c:	101cbbc0 	call	101cbbc <__sinit>
 1018d50:	003f0406 	br	1018964 <__alt_data_end+0xff018964>
 1018d54:	d8802d17 	ldw	r2,180(sp)
 1018d58:	d9002d17 	ldw	r4,180(sp)
 1018d5c:	10800017 	ldw	r2,0(r2)
 1018d60:	d8803115 	stw	r2,196(sp)
 1018d64:	20800104 	addi	r2,r4,4
 1018d68:	d9003117 	ldw	r4,196(sp)
 1018d6c:	203fa716 	blt	r4,zero,1018c0c <__alt_data_end+0xff018c0c>
 1018d70:	d8802d15 	stw	r2,180(sp)
 1018d74:	ac400007 	ldb	r17,0(r21)
 1018d78:	003f4206 	br	1018a84 <__alt_data_end+0xff018a84>
 1018d7c:	ac400007 	ldb	r17,0(r21)
 1018d80:	aac00044 	addi	r11,r21,1
 1018d84:	8a872826 	beq	r17,r10,101aa28 <___vfprintf_internal_r+0x2128>
 1018d88:	88bff404 	addi	r2,r17,-48
 1018d8c:	0009883a 	mov	r4,zero
 1018d90:	30867d36 	bltu	r6,r2,101a788 <___vfprintf_internal_r+0x1e88>
 1018d94:	5c400007 	ldb	r17,0(r11)
 1018d98:	210002a4 	muli	r4,r4,10
 1018d9c:	5d400044 	addi	r21,r11,1
 1018da0:	a817883a 	mov	r11,r21
 1018da4:	2089883a 	add	r4,r4,r2
 1018da8:	88bff404 	addi	r2,r17,-48
 1018dac:	30bff92e 	bgeu	r6,r2,1018d94 <__alt_data_end+0xff018d94>
 1018db0:	2005c916 	blt	r4,zero,101a4d8 <___vfprintf_internal_r+0x1bd8>
 1018db4:	d9002915 	stw	r4,164(sp)
 1018db8:	003f3306 	br	1018a88 <__alt_data_end+0xff018a88>
 1018dbc:	94802014 	ori	r18,r18,128
 1018dc0:	ac400007 	ldb	r17,0(r21)
 1018dc4:	003f2f06 	br	1018a84 <__alt_data_end+0xff018a84>
 1018dc8:	a809883a 	mov	r4,r21
 1018dcc:	d8003115 	stw	zero,196(sp)
 1018dd0:	88bff404 	addi	r2,r17,-48
 1018dd4:	0017883a 	mov	r11,zero
 1018dd8:	24400007 	ldb	r17,0(r4)
 1018ddc:	5ac002a4 	muli	r11,r11,10
 1018de0:	ad400044 	addi	r21,r21,1
 1018de4:	a809883a 	mov	r4,r21
 1018de8:	12d7883a 	add	r11,r2,r11
 1018dec:	88bff404 	addi	r2,r17,-48
 1018df0:	30bff92e 	bgeu	r6,r2,1018dd8 <__alt_data_end+0xff018dd8>
 1018df4:	dac03115 	stw	r11,196(sp)
 1018df8:	003f2306 	br	1018a88 <__alt_data_end+0xff018a88>
 1018dfc:	18c03fcc 	andi	r3,r3,255
 1018e00:	18072b1e 	bne	r3,zero,101aab0 <___vfprintf_internal_r+0x21b0>
 1018e04:	94800414 	ori	r18,r18,16
 1018e08:	9080080c 	andi	r2,r18,32
 1018e0c:	10037b26 	beq	r2,zero,1019bfc <___vfprintf_internal_r+0x12fc>
 1018e10:	d9402d17 	ldw	r5,180(sp)
 1018e14:	28800117 	ldw	r2,4(r5)
 1018e18:	2cc00017 	ldw	r19,0(r5)
 1018e1c:	29400204 	addi	r5,r5,8
 1018e20:	d9402d15 	stw	r5,180(sp)
 1018e24:	102d883a 	mov	r22,r2
 1018e28:	10044b16 	blt	r2,zero,1019f58 <___vfprintf_internal_r+0x1658>
 1018e2c:	d9402917 	ldw	r5,164(sp)
 1018e30:	df002783 	ldbu	fp,158(sp)
 1018e34:	2803bc16 	blt	r5,zero,1019d28 <___vfprintf_internal_r+0x1428>
 1018e38:	00ffdfc4 	movi	r3,-129
 1018e3c:	9d84b03a 	or	r2,r19,r22
 1018e40:	90e4703a 	and	r18,r18,r3
 1018e44:	10017726 	beq	r2,zero,1019424 <___vfprintf_internal_r+0xb24>
 1018e48:	b0038326 	beq	r22,zero,1019c58 <___vfprintf_internal_r+0x1358>
 1018e4c:	dc402a15 	stw	r17,168(sp)
 1018e50:	dc001e04 	addi	r16,sp,120
 1018e54:	b023883a 	mov	r17,r22
 1018e58:	402d883a 	mov	r22,r8
 1018e5c:	9809883a 	mov	r4,r19
 1018e60:	880b883a 	mov	r5,r17
 1018e64:	01800284 	movi	r6,10
 1018e68:	000f883a 	mov	r7,zero
 1018e6c:	10236d00 	call	10236d0 <__umoddi3>
 1018e70:	10800c04 	addi	r2,r2,48
 1018e74:	843fffc4 	addi	r16,r16,-1
 1018e78:	9809883a 	mov	r4,r19
 1018e7c:	880b883a 	mov	r5,r17
 1018e80:	80800005 	stb	r2,0(r16)
 1018e84:	01800284 	movi	r6,10
 1018e88:	000f883a 	mov	r7,zero
 1018e8c:	10231580 	call	1023158 <__udivdi3>
 1018e90:	1027883a 	mov	r19,r2
 1018e94:	10c4b03a 	or	r2,r2,r3
 1018e98:	1823883a 	mov	r17,r3
 1018e9c:	103fef1e 	bne	r2,zero,1018e5c <__alt_data_end+0xff018e5c>
 1018ea0:	d8c02817 	ldw	r3,160(sp)
 1018ea4:	dc402a17 	ldw	r17,168(sp)
 1018ea8:	b011883a 	mov	r8,r22
 1018eac:	1c07c83a 	sub	r3,r3,r16
 1018eb0:	d8c02e15 	stw	r3,184(sp)
 1018eb4:	00005906 	br	101901c <___vfprintf_internal_r+0x71c>
 1018eb8:	18c03fcc 	andi	r3,r3,255
 1018ebc:	1806fa1e 	bne	r3,zero,101aaa8 <___vfprintf_internal_r+0x21a8>
 1018ec0:	9080020c 	andi	r2,r18,8
 1018ec4:	10048a26 	beq	r2,zero,101a0f0 <___vfprintf_internal_r+0x17f0>
 1018ec8:	d8c02d17 	ldw	r3,180(sp)
 1018ecc:	d9002d17 	ldw	r4,180(sp)
 1018ed0:	d9402d17 	ldw	r5,180(sp)
 1018ed4:	18c00017 	ldw	r3,0(r3)
 1018ed8:	21000117 	ldw	r4,4(r4)
 1018edc:	29400204 	addi	r5,r5,8
 1018ee0:	d8c03615 	stw	r3,216(sp)
 1018ee4:	d9003815 	stw	r4,224(sp)
 1018ee8:	d9402d15 	stw	r5,180(sp)
 1018eec:	d9003617 	ldw	r4,216(sp)
 1018ef0:	d9403817 	ldw	r5,224(sp)
 1018ef4:	da003d15 	stw	r8,244(sp)
 1018ef8:	04000044 	movi	r16,1
 1018efc:	101f8c80 	call	101f8c8 <__fpclassifyd>
 1018f00:	da003d17 	ldw	r8,244(sp)
 1018f04:	14041f1e 	bne	r2,r16,1019f84 <___vfprintf_internal_r+0x1684>
 1018f08:	d9003617 	ldw	r4,216(sp)
 1018f0c:	d9403817 	ldw	r5,224(sp)
 1018f10:	000d883a 	mov	r6,zero
 1018f14:	000f883a 	mov	r7,zero
 1018f18:	10250b40 	call	10250b4 <__ledf2>
 1018f1c:	da003d17 	ldw	r8,244(sp)
 1018f20:	1005be16 	blt	r2,zero,101a61c <___vfprintf_internal_r+0x1d1c>
 1018f24:	df002783 	ldbu	fp,158(sp)
 1018f28:	008011c4 	movi	r2,71
 1018f2c:	1445330e 	bge	r2,r17,101a3fc <___vfprintf_internal_r+0x1afc>
 1018f30:	040040f4 	movhi	r16,259
 1018f34:	842afc04 	addi	r16,r16,-21520
 1018f38:	00c000c4 	movi	r3,3
 1018f3c:	00bfdfc4 	movi	r2,-129
 1018f40:	d8c02a15 	stw	r3,168(sp)
 1018f44:	90a4703a 	and	r18,r18,r2
 1018f48:	d8c02e15 	stw	r3,184(sp)
 1018f4c:	d8002915 	stw	zero,164(sp)
 1018f50:	d8003215 	stw	zero,200(sp)
 1018f54:	00003706 	br	1019034 <___vfprintf_internal_r+0x734>
 1018f58:	94800214 	ori	r18,r18,8
 1018f5c:	ac400007 	ldb	r17,0(r21)
 1018f60:	003ec806 	br	1018a84 <__alt_data_end+0xff018a84>
 1018f64:	18c03fcc 	andi	r3,r3,255
 1018f68:	1806db1e 	bne	r3,zero,101aad8 <___vfprintf_internal_r+0x21d8>
 1018f6c:	94800414 	ori	r18,r18,16
 1018f70:	9080080c 	andi	r2,r18,32
 1018f74:	1002d826 	beq	r2,zero,1019ad8 <___vfprintf_internal_r+0x11d8>
 1018f78:	d9402d17 	ldw	r5,180(sp)
 1018f7c:	d8c02917 	ldw	r3,164(sp)
 1018f80:	d8002785 	stb	zero,158(sp)
 1018f84:	28800204 	addi	r2,r5,8
 1018f88:	2cc00017 	ldw	r19,0(r5)
 1018f8c:	2d800117 	ldw	r22,4(r5)
 1018f90:	18048f16 	blt	r3,zero,101a1d0 <___vfprintf_internal_r+0x18d0>
 1018f94:	013fdfc4 	movi	r4,-129
 1018f98:	9d86b03a 	or	r3,r19,r22
 1018f9c:	d8802d15 	stw	r2,180(sp)
 1018fa0:	9124703a 	and	r18,r18,r4
 1018fa4:	1802d91e 	bne	r3,zero,1019b0c <___vfprintf_internal_r+0x120c>
 1018fa8:	d8c02917 	ldw	r3,164(sp)
 1018fac:	0039883a 	mov	fp,zero
 1018fb0:	1805c326 	beq	r3,zero,101a6c0 <___vfprintf_internal_r+0x1dc0>
 1018fb4:	0027883a 	mov	r19,zero
 1018fb8:	002d883a 	mov	r22,zero
 1018fbc:	dc001e04 	addi	r16,sp,120
 1018fc0:	9806d0fa 	srli	r3,r19,3
 1018fc4:	b008977a 	slli	r4,r22,29
 1018fc8:	b02cd0fa 	srli	r22,r22,3
 1018fcc:	9cc001cc 	andi	r19,r19,7
 1018fd0:	98800c04 	addi	r2,r19,48
 1018fd4:	843fffc4 	addi	r16,r16,-1
 1018fd8:	20e6b03a 	or	r19,r4,r3
 1018fdc:	80800005 	stb	r2,0(r16)
 1018fe0:	9d86b03a 	or	r3,r19,r22
 1018fe4:	183ff61e 	bne	r3,zero,1018fc0 <__alt_data_end+0xff018fc0>
 1018fe8:	90c0004c 	andi	r3,r18,1
 1018fec:	18013b26 	beq	r3,zero,10194dc <___vfprintf_internal_r+0xbdc>
 1018ff0:	10803fcc 	andi	r2,r2,255
 1018ff4:	1080201c 	xori	r2,r2,128
 1018ff8:	10bfe004 	addi	r2,r2,-128
 1018ffc:	00c00c04 	movi	r3,48
 1019000:	10c13626 	beq	r2,r3,10194dc <___vfprintf_internal_r+0xbdc>
 1019004:	80ffffc5 	stb	r3,-1(r16)
 1019008:	d8c02817 	ldw	r3,160(sp)
 101900c:	80bfffc4 	addi	r2,r16,-1
 1019010:	1021883a 	mov	r16,r2
 1019014:	1887c83a 	sub	r3,r3,r2
 1019018:	d8c02e15 	stw	r3,184(sp)
 101901c:	d8802e17 	ldw	r2,184(sp)
 1019020:	d9002917 	ldw	r4,164(sp)
 1019024:	1100010e 	bge	r2,r4,101902c <___vfprintf_internal_r+0x72c>
 1019028:	2005883a 	mov	r2,r4
 101902c:	d8802a15 	stw	r2,168(sp)
 1019030:	d8003215 	stw	zero,200(sp)
 1019034:	e7003fcc 	andi	fp,fp,255
 1019038:	e700201c 	xori	fp,fp,128
 101903c:	e73fe004 	addi	fp,fp,-128
 1019040:	e0000326 	beq	fp,zero,1019050 <___vfprintf_internal_r+0x750>
 1019044:	d8c02a17 	ldw	r3,168(sp)
 1019048:	18c00044 	addi	r3,r3,1
 101904c:	d8c02a15 	stw	r3,168(sp)
 1019050:	90c0008c 	andi	r3,r18,2
 1019054:	d8c02b15 	stw	r3,172(sp)
 1019058:	18000326 	beq	r3,zero,1019068 <___vfprintf_internal_r+0x768>
 101905c:	d8c02a17 	ldw	r3,168(sp)
 1019060:	18c00084 	addi	r3,r3,2
 1019064:	d8c02a15 	stw	r3,168(sp)
 1019068:	90c0210c 	andi	r3,r18,132
 101906c:	d8c03015 	stw	r3,192(sp)
 1019070:	1801a31e 	bne	r3,zero,1019700 <___vfprintf_internal_r+0xe00>
 1019074:	d9003117 	ldw	r4,196(sp)
 1019078:	d8c02a17 	ldw	r3,168(sp)
 101907c:	20e7c83a 	sub	r19,r4,r3
 1019080:	04c19f0e 	bge	zero,r19,1019700 <___vfprintf_internal_r+0xe00>
 1019084:	02400404 	movi	r9,16
 1019088:	d8c02017 	ldw	r3,128(sp)
 101908c:	d8801f17 	ldw	r2,124(sp)
 1019090:	4cc50d0e 	bge	r9,r19,101a4c8 <___vfprintf_internal_r+0x1bc8>
 1019094:	014040f4 	movhi	r5,259
 1019098:	296b1784 	addi	r5,r5,-21410
 101909c:	dc403b15 	stw	r17,236(sp)
 10190a0:	d9403515 	stw	r5,212(sp)
 10190a4:	9823883a 	mov	r17,r19
 10190a8:	482d883a 	mov	r22,r9
 10190ac:	9027883a 	mov	r19,r18
 10190b0:	070001c4 	movi	fp,7
 10190b4:	8025883a 	mov	r18,r16
 10190b8:	dc002c17 	ldw	r16,176(sp)
 10190bc:	00000306 	br	10190cc <___vfprintf_internal_r+0x7cc>
 10190c0:	8c7ffc04 	addi	r17,r17,-16
 10190c4:	42000204 	addi	r8,r8,8
 10190c8:	b440130e 	bge	r22,r17,1019118 <___vfprintf_internal_r+0x818>
 10190cc:	010040f4 	movhi	r4,259
 10190d0:	18c00404 	addi	r3,r3,16
 10190d4:	10800044 	addi	r2,r2,1
 10190d8:	212b1784 	addi	r4,r4,-21410
 10190dc:	41000015 	stw	r4,0(r8)
 10190e0:	45800115 	stw	r22,4(r8)
 10190e4:	d8c02015 	stw	r3,128(sp)
 10190e8:	d8801f15 	stw	r2,124(sp)
 10190ec:	e0bff40e 	bge	fp,r2,10190c0 <__alt_data_end+0xff0190c0>
 10190f0:	d9801e04 	addi	r6,sp,120
 10190f4:	b80b883a 	mov	r5,r23
 10190f8:	8009883a 	mov	r4,r16
 10190fc:	10212d80 	call	10212d8 <__sprint_r>
 1019100:	103f011e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019104:	8c7ffc04 	addi	r17,r17,-16
 1019108:	d8c02017 	ldw	r3,128(sp)
 101910c:	d8801f17 	ldw	r2,124(sp)
 1019110:	da000404 	addi	r8,sp,16
 1019114:	b47fed16 	blt	r22,r17,10190cc <__alt_data_end+0xff0190cc>
 1019118:	9021883a 	mov	r16,r18
 101911c:	9825883a 	mov	r18,r19
 1019120:	8827883a 	mov	r19,r17
 1019124:	dc403b17 	ldw	r17,236(sp)
 1019128:	d9403517 	ldw	r5,212(sp)
 101912c:	98c7883a 	add	r3,r19,r3
 1019130:	10800044 	addi	r2,r2,1
 1019134:	41400015 	stw	r5,0(r8)
 1019138:	44c00115 	stw	r19,4(r8)
 101913c:	d8c02015 	stw	r3,128(sp)
 1019140:	d8801f15 	stw	r2,124(sp)
 1019144:	010001c4 	movi	r4,7
 1019148:	2082a316 	blt	r4,r2,1019bd8 <___vfprintf_internal_r+0x12d8>
 101914c:	df002787 	ldb	fp,158(sp)
 1019150:	42000204 	addi	r8,r8,8
 1019154:	e0000c26 	beq	fp,zero,1019188 <___vfprintf_internal_r+0x888>
 1019158:	d8801f17 	ldw	r2,124(sp)
 101915c:	d9002784 	addi	r4,sp,158
 1019160:	18c00044 	addi	r3,r3,1
 1019164:	10800044 	addi	r2,r2,1
 1019168:	41000015 	stw	r4,0(r8)
 101916c:	01000044 	movi	r4,1
 1019170:	41000115 	stw	r4,4(r8)
 1019174:	d8c02015 	stw	r3,128(sp)
 1019178:	d8801f15 	stw	r2,124(sp)
 101917c:	010001c4 	movi	r4,7
 1019180:	20823c16 	blt	r4,r2,1019a74 <___vfprintf_internal_r+0x1174>
 1019184:	42000204 	addi	r8,r8,8
 1019188:	d8802b17 	ldw	r2,172(sp)
 101918c:	10000c26 	beq	r2,zero,10191c0 <___vfprintf_internal_r+0x8c0>
 1019190:	d8801f17 	ldw	r2,124(sp)
 1019194:	d9002704 	addi	r4,sp,156
 1019198:	18c00084 	addi	r3,r3,2
 101919c:	10800044 	addi	r2,r2,1
 10191a0:	41000015 	stw	r4,0(r8)
 10191a4:	01000084 	movi	r4,2
 10191a8:	41000115 	stw	r4,4(r8)
 10191ac:	d8c02015 	stw	r3,128(sp)
 10191b0:	d8801f15 	stw	r2,124(sp)
 10191b4:	010001c4 	movi	r4,7
 10191b8:	20823616 	blt	r4,r2,1019a94 <___vfprintf_internal_r+0x1194>
 10191bc:	42000204 	addi	r8,r8,8
 10191c0:	d9003017 	ldw	r4,192(sp)
 10191c4:	00802004 	movi	r2,128
 10191c8:	20819926 	beq	r4,r2,1019830 <___vfprintf_internal_r+0xf30>
 10191cc:	d9402917 	ldw	r5,164(sp)
 10191d0:	d8802e17 	ldw	r2,184(sp)
 10191d4:	28adc83a 	sub	r22,r5,r2
 10191d8:	0580310e 	bge	zero,r22,10192a0 <___vfprintf_internal_r+0x9a0>
 10191dc:	07000404 	movi	fp,16
 10191e0:	d8801f17 	ldw	r2,124(sp)
 10191e4:	e584140e 	bge	fp,r22,101a238 <___vfprintf_internal_r+0x1938>
 10191e8:	014040f4 	movhi	r5,259
 10191ec:	296b1384 	addi	r5,r5,-21426
 10191f0:	dc402915 	stw	r17,164(sp)
 10191f4:	d9402b15 	stw	r5,172(sp)
 10191f8:	b023883a 	mov	r17,r22
 10191fc:	04c001c4 	movi	r19,7
 1019200:	a82d883a 	mov	r22,r21
 1019204:	902b883a 	mov	r21,r18
 1019208:	8025883a 	mov	r18,r16
 101920c:	dc002c17 	ldw	r16,176(sp)
 1019210:	00000306 	br	1019220 <___vfprintf_internal_r+0x920>
 1019214:	8c7ffc04 	addi	r17,r17,-16
 1019218:	42000204 	addi	r8,r8,8
 101921c:	e440110e 	bge	fp,r17,1019264 <___vfprintf_internal_r+0x964>
 1019220:	18c00404 	addi	r3,r3,16
 1019224:	10800044 	addi	r2,r2,1
 1019228:	45000015 	stw	r20,0(r8)
 101922c:	47000115 	stw	fp,4(r8)
 1019230:	d8c02015 	stw	r3,128(sp)
 1019234:	d8801f15 	stw	r2,124(sp)
 1019238:	98bff60e 	bge	r19,r2,1019214 <__alt_data_end+0xff019214>
 101923c:	d9801e04 	addi	r6,sp,120
 1019240:	b80b883a 	mov	r5,r23
 1019244:	8009883a 	mov	r4,r16
 1019248:	10212d80 	call	10212d8 <__sprint_r>
 101924c:	103eae1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019250:	8c7ffc04 	addi	r17,r17,-16
 1019254:	d8c02017 	ldw	r3,128(sp)
 1019258:	d8801f17 	ldw	r2,124(sp)
 101925c:	da000404 	addi	r8,sp,16
 1019260:	e47fef16 	blt	fp,r17,1019220 <__alt_data_end+0xff019220>
 1019264:	9021883a 	mov	r16,r18
 1019268:	a825883a 	mov	r18,r21
 101926c:	b02b883a 	mov	r21,r22
 1019270:	882d883a 	mov	r22,r17
 1019274:	dc402917 	ldw	r17,164(sp)
 1019278:	d9002b17 	ldw	r4,172(sp)
 101927c:	1d87883a 	add	r3,r3,r22
 1019280:	10800044 	addi	r2,r2,1
 1019284:	41000015 	stw	r4,0(r8)
 1019288:	45800115 	stw	r22,4(r8)
 101928c:	d8c02015 	stw	r3,128(sp)
 1019290:	d8801f15 	stw	r2,124(sp)
 1019294:	010001c4 	movi	r4,7
 1019298:	2081ee16 	blt	r4,r2,1019a54 <___vfprintf_internal_r+0x1154>
 101929c:	42000204 	addi	r8,r8,8
 10192a0:	9080400c 	andi	r2,r18,256
 10192a4:	1001181e 	bne	r2,zero,1019708 <___vfprintf_internal_r+0xe08>
 10192a8:	d9402e17 	ldw	r5,184(sp)
 10192ac:	d8801f17 	ldw	r2,124(sp)
 10192b0:	44000015 	stw	r16,0(r8)
 10192b4:	1947883a 	add	r3,r3,r5
 10192b8:	10800044 	addi	r2,r2,1
 10192bc:	41400115 	stw	r5,4(r8)
 10192c0:	d8c02015 	stw	r3,128(sp)
 10192c4:	d8801f15 	stw	r2,124(sp)
 10192c8:	010001c4 	movi	r4,7
 10192cc:	2081d316 	blt	r4,r2,1019a1c <___vfprintf_internal_r+0x111c>
 10192d0:	42000204 	addi	r8,r8,8
 10192d4:	9480010c 	andi	r18,r18,4
 10192d8:	90003226 	beq	r18,zero,10193a4 <___vfprintf_internal_r+0xaa4>
 10192dc:	d9403117 	ldw	r5,196(sp)
 10192e0:	d8802a17 	ldw	r2,168(sp)
 10192e4:	28a1c83a 	sub	r16,r5,r2
 10192e8:	04002e0e 	bge	zero,r16,10193a4 <___vfprintf_internal_r+0xaa4>
 10192ec:	04400404 	movi	r17,16
 10192f0:	d8801f17 	ldw	r2,124(sp)
 10192f4:	8c04a20e 	bge	r17,r16,101a580 <___vfprintf_internal_r+0x1c80>
 10192f8:	014040f4 	movhi	r5,259
 10192fc:	296b1784 	addi	r5,r5,-21410
 1019300:	d9403515 	stw	r5,212(sp)
 1019304:	048001c4 	movi	r18,7
 1019308:	dcc02c17 	ldw	r19,176(sp)
 101930c:	00000306 	br	101931c <___vfprintf_internal_r+0xa1c>
 1019310:	843ffc04 	addi	r16,r16,-16
 1019314:	42000204 	addi	r8,r8,8
 1019318:	8c00130e 	bge	r17,r16,1019368 <___vfprintf_internal_r+0xa68>
 101931c:	010040f4 	movhi	r4,259
 1019320:	18c00404 	addi	r3,r3,16
 1019324:	10800044 	addi	r2,r2,1
 1019328:	212b1784 	addi	r4,r4,-21410
 101932c:	41000015 	stw	r4,0(r8)
 1019330:	44400115 	stw	r17,4(r8)
 1019334:	d8c02015 	stw	r3,128(sp)
 1019338:	d8801f15 	stw	r2,124(sp)
 101933c:	90bff40e 	bge	r18,r2,1019310 <__alt_data_end+0xff019310>
 1019340:	d9801e04 	addi	r6,sp,120
 1019344:	b80b883a 	mov	r5,r23
 1019348:	9809883a 	mov	r4,r19
 101934c:	10212d80 	call	10212d8 <__sprint_r>
 1019350:	103e6d1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019354:	843ffc04 	addi	r16,r16,-16
 1019358:	d8c02017 	ldw	r3,128(sp)
 101935c:	d8801f17 	ldw	r2,124(sp)
 1019360:	da000404 	addi	r8,sp,16
 1019364:	8c3fed16 	blt	r17,r16,101931c <__alt_data_end+0xff01931c>
 1019368:	d9403517 	ldw	r5,212(sp)
 101936c:	1c07883a 	add	r3,r3,r16
 1019370:	10800044 	addi	r2,r2,1
 1019374:	41400015 	stw	r5,0(r8)
 1019378:	44000115 	stw	r16,4(r8)
 101937c:	d8c02015 	stw	r3,128(sp)
 1019380:	d8801f15 	stw	r2,124(sp)
 1019384:	010001c4 	movi	r4,7
 1019388:	2080060e 	bge	r4,r2,10193a4 <___vfprintf_internal_r+0xaa4>
 101938c:	d9002c17 	ldw	r4,176(sp)
 1019390:	d9801e04 	addi	r6,sp,120
 1019394:	b80b883a 	mov	r5,r23
 1019398:	10212d80 	call	10212d8 <__sprint_r>
 101939c:	103e5a1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 10193a0:	d8c02017 	ldw	r3,128(sp)
 10193a4:	d8803117 	ldw	r2,196(sp)
 10193a8:	d9002a17 	ldw	r4,168(sp)
 10193ac:	1100010e 	bge	r2,r4,10193b4 <___vfprintf_internal_r+0xab4>
 10193b0:	2005883a 	mov	r2,r4
 10193b4:	d9402f17 	ldw	r5,188(sp)
 10193b8:	288b883a 	add	r5,r5,r2
 10193bc:	d9402f15 	stw	r5,188(sp)
 10193c0:	18019e1e 	bne	r3,zero,1019a3c <___vfprintf_internal_r+0x113c>
 10193c4:	a8800007 	ldb	r2,0(r21)
 10193c8:	d8001f15 	stw	zero,124(sp)
 10193cc:	da000404 	addi	r8,sp,16
 10193d0:	103d851e 	bne	r2,zero,10189e8 <__alt_data_end+0xff0189e8>
 10193d4:	a821883a 	mov	r16,r21
 10193d8:	003d9b06 	br	1018a48 <__alt_data_end+0xff018a48>
 10193dc:	18c03fcc 	andi	r3,r3,255
 10193e0:	1805c11e 	bne	r3,zero,101aae8 <___vfprintf_internal_r+0x21e8>
 10193e4:	94800414 	ori	r18,r18,16
 10193e8:	9080080c 	andi	r2,r18,32
 10193ec:	10020c26 	beq	r2,zero,1019c20 <___vfprintf_internal_r+0x1320>
 10193f0:	d8802d17 	ldw	r2,180(sp)
 10193f4:	d9002917 	ldw	r4,164(sp)
 10193f8:	d8002785 	stb	zero,158(sp)
 10193fc:	10c00204 	addi	r3,r2,8
 1019400:	14c00017 	ldw	r19,0(r2)
 1019404:	15800117 	ldw	r22,4(r2)
 1019408:	20040f16 	blt	r4,zero,101a448 <___vfprintf_internal_r+0x1b48>
 101940c:	013fdfc4 	movi	r4,-129
 1019410:	9d84b03a 	or	r2,r19,r22
 1019414:	d8c02d15 	stw	r3,180(sp)
 1019418:	9124703a 	and	r18,r18,r4
 101941c:	0039883a 	mov	fp,zero
 1019420:	103e891e 	bne	r2,zero,1018e48 <__alt_data_end+0xff018e48>
 1019424:	d9002917 	ldw	r4,164(sp)
 1019428:	2002c11e 	bne	r4,zero,1019f30 <___vfprintf_internal_r+0x1630>
 101942c:	d8002915 	stw	zero,164(sp)
 1019430:	d8002e15 	stw	zero,184(sp)
 1019434:	dc001e04 	addi	r16,sp,120
 1019438:	003ef806 	br	101901c <__alt_data_end+0xff01901c>
 101943c:	18c03fcc 	andi	r3,r3,255
 1019440:	18059d1e 	bne	r3,zero,101aab8 <___vfprintf_internal_r+0x21b8>
 1019444:	014040f4 	movhi	r5,259
 1019448:	296aff04 	addi	r5,r5,-21508
 101944c:	d9403915 	stw	r5,228(sp)
 1019450:	9080080c 	andi	r2,r18,32
 1019454:	10005226 	beq	r2,zero,10195a0 <___vfprintf_internal_r+0xca0>
 1019458:	d8802d17 	ldw	r2,180(sp)
 101945c:	14c00017 	ldw	r19,0(r2)
 1019460:	15800117 	ldw	r22,4(r2)
 1019464:	10800204 	addi	r2,r2,8
 1019468:	d8802d15 	stw	r2,180(sp)
 101946c:	9080004c 	andi	r2,r18,1
 1019470:	10019026 	beq	r2,zero,1019ab4 <___vfprintf_internal_r+0x11b4>
 1019474:	9d84b03a 	or	r2,r19,r22
 1019478:	10036926 	beq	r2,zero,101a220 <___vfprintf_internal_r+0x1920>
 101947c:	d8c02917 	ldw	r3,164(sp)
 1019480:	00800c04 	movi	r2,48
 1019484:	d8802705 	stb	r2,156(sp)
 1019488:	dc402745 	stb	r17,157(sp)
 101948c:	d8002785 	stb	zero,158(sp)
 1019490:	90800094 	ori	r2,r18,2
 1019494:	18045d16 	blt	r3,zero,101a60c <___vfprintf_internal_r+0x1d0c>
 1019498:	00bfdfc4 	movi	r2,-129
 101949c:	90a4703a 	and	r18,r18,r2
 10194a0:	94800094 	ori	r18,r18,2
 10194a4:	0039883a 	mov	fp,zero
 10194a8:	d9003917 	ldw	r4,228(sp)
 10194ac:	dc001e04 	addi	r16,sp,120
 10194b0:	988003cc 	andi	r2,r19,15
 10194b4:	b006973a 	slli	r3,r22,28
 10194b8:	2085883a 	add	r2,r4,r2
 10194bc:	9826d13a 	srli	r19,r19,4
 10194c0:	10800003 	ldbu	r2,0(r2)
 10194c4:	b02cd13a 	srli	r22,r22,4
 10194c8:	843fffc4 	addi	r16,r16,-1
 10194cc:	1ce6b03a 	or	r19,r3,r19
 10194d0:	80800005 	stb	r2,0(r16)
 10194d4:	9d84b03a 	or	r2,r19,r22
 10194d8:	103ff51e 	bne	r2,zero,10194b0 <__alt_data_end+0xff0194b0>
 10194dc:	d8c02817 	ldw	r3,160(sp)
 10194e0:	1c07c83a 	sub	r3,r3,r16
 10194e4:	d8c02e15 	stw	r3,184(sp)
 10194e8:	003ecc06 	br	101901c <__alt_data_end+0xff01901c>
 10194ec:	18c03fcc 	andi	r3,r3,255
 10194f0:	183e9f26 	beq	r3,zero,1018f70 <__alt_data_end+0xff018f70>
 10194f4:	d9c02785 	stb	r7,158(sp)
 10194f8:	003e9d06 	br	1018f70 <__alt_data_end+0xff018f70>
 10194fc:	00c00044 	movi	r3,1
 1019500:	01c00ac4 	movi	r7,43
 1019504:	ac400007 	ldb	r17,0(r21)
 1019508:	003d5e06 	br	1018a84 <__alt_data_end+0xff018a84>
 101950c:	94800814 	ori	r18,r18,32
 1019510:	ac400007 	ldb	r17,0(r21)
 1019514:	003d5b06 	br	1018a84 <__alt_data_end+0xff018a84>
 1019518:	d8c02d17 	ldw	r3,180(sp)
 101951c:	d8002785 	stb	zero,158(sp)
 1019520:	1c000017 	ldw	r16,0(r3)
 1019524:	1cc00104 	addi	r19,r3,4
 1019528:	80041926 	beq	r16,zero,101a590 <___vfprintf_internal_r+0x1c90>
 101952c:	d9002917 	ldw	r4,164(sp)
 1019530:	2003d016 	blt	r4,zero,101a474 <___vfprintf_internal_r+0x1b74>
 1019534:	200d883a 	mov	r6,r4
 1019538:	000b883a 	mov	r5,zero
 101953c:	8009883a 	mov	r4,r16
 1019540:	da003d15 	stw	r8,244(sp)
 1019544:	101e1280 	call	101e128 <memchr>
 1019548:	da003d17 	ldw	r8,244(sp)
 101954c:	10045426 	beq	r2,zero,101a6a0 <___vfprintf_internal_r+0x1da0>
 1019550:	1405c83a 	sub	r2,r2,r16
 1019554:	d8802e15 	stw	r2,184(sp)
 1019558:	1003cc16 	blt	r2,zero,101a48c <___vfprintf_internal_r+0x1b8c>
 101955c:	df002783 	ldbu	fp,158(sp)
 1019560:	d8802a15 	stw	r2,168(sp)
 1019564:	dcc02d15 	stw	r19,180(sp)
 1019568:	d8002915 	stw	zero,164(sp)
 101956c:	d8003215 	stw	zero,200(sp)
 1019570:	003eb006 	br	1019034 <__alt_data_end+0xff019034>
 1019574:	18c03fcc 	andi	r3,r3,255
 1019578:	183f9b26 	beq	r3,zero,10193e8 <__alt_data_end+0xff0193e8>
 101957c:	d9c02785 	stb	r7,158(sp)
 1019580:	003f9906 	br	10193e8 <__alt_data_end+0xff0193e8>
 1019584:	18c03fcc 	andi	r3,r3,255
 1019588:	1805551e 	bne	r3,zero,101aae0 <___vfprintf_internal_r+0x21e0>
 101958c:	014040f4 	movhi	r5,259
 1019590:	296b0404 	addi	r5,r5,-21488
 1019594:	d9403915 	stw	r5,228(sp)
 1019598:	9080080c 	andi	r2,r18,32
 101959c:	103fae1e 	bne	r2,zero,1019458 <__alt_data_end+0xff019458>
 10195a0:	9080040c 	andi	r2,r18,16
 10195a4:	1002de26 	beq	r2,zero,101a120 <___vfprintf_internal_r+0x1820>
 10195a8:	d8c02d17 	ldw	r3,180(sp)
 10195ac:	002d883a 	mov	r22,zero
 10195b0:	1cc00017 	ldw	r19,0(r3)
 10195b4:	18c00104 	addi	r3,r3,4
 10195b8:	d8c02d15 	stw	r3,180(sp)
 10195bc:	003fab06 	br	101946c <__alt_data_end+0xff01946c>
 10195c0:	38803fcc 	andi	r2,r7,255
 10195c4:	1080201c 	xori	r2,r2,128
 10195c8:	10bfe004 	addi	r2,r2,-128
 10195cc:	1002d21e 	bne	r2,zero,101a118 <___vfprintf_internal_r+0x1818>
 10195d0:	00c00044 	movi	r3,1
 10195d4:	01c00804 	movi	r7,32
 10195d8:	ac400007 	ldb	r17,0(r21)
 10195dc:	003d2906 	br	1018a84 <__alt_data_end+0xff018a84>
 10195e0:	94800054 	ori	r18,r18,1
 10195e4:	ac400007 	ldb	r17,0(r21)
 10195e8:	003d2606 	br	1018a84 <__alt_data_end+0xff018a84>
 10195ec:	18c03fcc 	andi	r3,r3,255
 10195f0:	183e0526 	beq	r3,zero,1018e08 <__alt_data_end+0xff018e08>
 10195f4:	d9c02785 	stb	r7,158(sp)
 10195f8:	003e0306 	br	1018e08 <__alt_data_end+0xff018e08>
 10195fc:	94801014 	ori	r18,r18,64
 1019600:	ac400007 	ldb	r17,0(r21)
 1019604:	003d1f06 	br	1018a84 <__alt_data_end+0xff018a84>
 1019608:	ac400007 	ldb	r17,0(r21)
 101960c:	8a438726 	beq	r17,r9,101a42c <___vfprintf_internal_r+0x1b2c>
 1019610:	94800414 	ori	r18,r18,16
 1019614:	003d1b06 	br	1018a84 <__alt_data_end+0xff018a84>
 1019618:	18c03fcc 	andi	r3,r3,255
 101961c:	1805341e 	bne	r3,zero,101aaf0 <___vfprintf_internal_r+0x21f0>
 1019620:	9080080c 	andi	r2,r18,32
 1019624:	1002cd26 	beq	r2,zero,101a15c <___vfprintf_internal_r+0x185c>
 1019628:	d9402d17 	ldw	r5,180(sp)
 101962c:	d9002f17 	ldw	r4,188(sp)
 1019630:	28800017 	ldw	r2,0(r5)
 1019634:	2007d7fa 	srai	r3,r4,31
 1019638:	29400104 	addi	r5,r5,4
 101963c:	d9402d15 	stw	r5,180(sp)
 1019640:	11000015 	stw	r4,0(r2)
 1019644:	10c00115 	stw	r3,4(r2)
 1019648:	003ce506 	br	10189e0 <__alt_data_end+0xff0189e0>
 101964c:	d8c02d17 	ldw	r3,180(sp)
 1019650:	d9002d17 	ldw	r4,180(sp)
 1019654:	d8002785 	stb	zero,158(sp)
 1019658:	18800017 	ldw	r2,0(r3)
 101965c:	21000104 	addi	r4,r4,4
 1019660:	00c00044 	movi	r3,1
 1019664:	d8c02a15 	stw	r3,168(sp)
 1019668:	d8801405 	stb	r2,80(sp)
 101966c:	d9002d15 	stw	r4,180(sp)
 1019670:	d8c02e15 	stw	r3,184(sp)
 1019674:	d8002915 	stw	zero,164(sp)
 1019678:	d8003215 	stw	zero,200(sp)
 101967c:	dc001404 	addi	r16,sp,80
 1019680:	0039883a 	mov	fp,zero
 1019684:	003e7206 	br	1019050 <__alt_data_end+0xff019050>
 1019688:	010040f4 	movhi	r4,259
 101968c:	212b0404 	addi	r4,r4,-21488
 1019690:	0039883a 	mov	fp,zero
 1019694:	d9003915 	stw	r4,228(sp)
 1019698:	04401e04 	movi	r17,120
 101969c:	003f8206 	br	10194a8 <__alt_data_end+0xff0194a8>
 10196a0:	18c03fcc 	andi	r3,r3,255
 10196a4:	1805061e 	bne	r3,zero,101aac0 <___vfprintf_internal_r+0x21c0>
 10196a8:	883d9126 	beq	r17,zero,1018cf0 <__alt_data_end+0xff018cf0>
 10196ac:	00c00044 	movi	r3,1
 10196b0:	d8c02a15 	stw	r3,168(sp)
 10196b4:	dc401405 	stb	r17,80(sp)
 10196b8:	d8002785 	stb	zero,158(sp)
 10196bc:	003fec06 	br	1019670 <__alt_data_end+0xff019670>
 10196c0:	014040f4 	movhi	r5,259
 10196c4:	296b0404 	addi	r5,r5,-21488
 10196c8:	d9403915 	stw	r5,228(sp)
 10196cc:	d8c02d15 	stw	r3,180(sp)
 10196d0:	1025883a 	mov	r18,r2
 10196d4:	04401e04 	movi	r17,120
 10196d8:	9d84b03a 	or	r2,r19,r22
 10196dc:	1000fc1e 	bne	r2,zero,1019ad0 <___vfprintf_internal_r+0x11d0>
 10196e0:	0039883a 	mov	fp,zero
 10196e4:	00800084 	movi	r2,2
 10196e8:	10803fcc 	andi	r2,r2,255
 10196ec:	00c00044 	movi	r3,1
 10196f0:	10c20f26 	beq	r2,r3,1019f30 <___vfprintf_internal_r+0x1630>
 10196f4:	00c00084 	movi	r3,2
 10196f8:	10fd6326 	beq	r2,r3,1018c88 <__alt_data_end+0xff018c88>
 10196fc:	003e2d06 	br	1018fb4 <__alt_data_end+0xff018fb4>
 1019700:	d8c02017 	ldw	r3,128(sp)
 1019704:	003e9306 	br	1019154 <__alt_data_end+0xff019154>
 1019708:	00801944 	movi	r2,101
 101970c:	14407e0e 	bge	r2,r17,1019908 <___vfprintf_internal_r+0x1008>
 1019710:	d9003617 	ldw	r4,216(sp)
 1019714:	d9403817 	ldw	r5,224(sp)
 1019718:	000d883a 	mov	r6,zero
 101971c:	000f883a 	mov	r7,zero
 1019720:	d8c03c15 	stw	r3,240(sp)
 1019724:	da003d15 	stw	r8,244(sp)
 1019728:	1024f500 	call	1024f50 <__eqdf2>
 101972c:	d8c03c17 	ldw	r3,240(sp)
 1019730:	da003d17 	ldw	r8,244(sp)
 1019734:	1000f71e 	bne	r2,zero,1019b14 <___vfprintf_internal_r+0x1214>
 1019738:	d8801f17 	ldw	r2,124(sp)
 101973c:	010040f4 	movhi	r4,259
 1019740:	212b0b04 	addi	r4,r4,-21460
 1019744:	18c00044 	addi	r3,r3,1
 1019748:	10800044 	addi	r2,r2,1
 101974c:	41000015 	stw	r4,0(r8)
 1019750:	01000044 	movi	r4,1
 1019754:	41000115 	stw	r4,4(r8)
 1019758:	d8c02015 	stw	r3,128(sp)
 101975c:	d8801f15 	stw	r2,124(sp)
 1019760:	010001c4 	movi	r4,7
 1019764:	2082b816 	blt	r4,r2,101a248 <___vfprintf_internal_r+0x1948>
 1019768:	42000204 	addi	r8,r8,8
 101976c:	d8802617 	ldw	r2,152(sp)
 1019770:	d9403317 	ldw	r5,204(sp)
 1019774:	11400216 	blt	r2,r5,1019780 <___vfprintf_internal_r+0xe80>
 1019778:	9080004c 	andi	r2,r18,1
 101977c:	103ed526 	beq	r2,zero,10192d4 <__alt_data_end+0xff0192d4>
 1019780:	d8803717 	ldw	r2,220(sp)
 1019784:	d9003417 	ldw	r4,208(sp)
 1019788:	d9403717 	ldw	r5,220(sp)
 101978c:	1887883a 	add	r3,r3,r2
 1019790:	d8801f17 	ldw	r2,124(sp)
 1019794:	41000015 	stw	r4,0(r8)
 1019798:	41400115 	stw	r5,4(r8)
 101979c:	10800044 	addi	r2,r2,1
 10197a0:	d8c02015 	stw	r3,128(sp)
 10197a4:	d8801f15 	stw	r2,124(sp)
 10197a8:	010001c4 	movi	r4,7
 10197ac:	20832916 	blt	r4,r2,101a454 <___vfprintf_internal_r+0x1b54>
 10197b0:	42000204 	addi	r8,r8,8
 10197b4:	d8803317 	ldw	r2,204(sp)
 10197b8:	143fffc4 	addi	r16,r2,-1
 10197bc:	043ec50e 	bge	zero,r16,10192d4 <__alt_data_end+0xff0192d4>
 10197c0:	04400404 	movi	r17,16
 10197c4:	d8801f17 	ldw	r2,124(sp)
 10197c8:	8c00880e 	bge	r17,r16,10199ec <___vfprintf_internal_r+0x10ec>
 10197cc:	014040f4 	movhi	r5,259
 10197d0:	296b1384 	addi	r5,r5,-21426
 10197d4:	d9402b15 	stw	r5,172(sp)
 10197d8:	058001c4 	movi	r22,7
 10197dc:	dcc02c17 	ldw	r19,176(sp)
 10197e0:	00000306 	br	10197f0 <___vfprintf_internal_r+0xef0>
 10197e4:	42000204 	addi	r8,r8,8
 10197e8:	843ffc04 	addi	r16,r16,-16
 10197ec:	8c00820e 	bge	r17,r16,10199f8 <___vfprintf_internal_r+0x10f8>
 10197f0:	18c00404 	addi	r3,r3,16
 10197f4:	10800044 	addi	r2,r2,1
 10197f8:	45000015 	stw	r20,0(r8)
 10197fc:	44400115 	stw	r17,4(r8)
 1019800:	d8c02015 	stw	r3,128(sp)
 1019804:	d8801f15 	stw	r2,124(sp)
 1019808:	b0bff60e 	bge	r22,r2,10197e4 <__alt_data_end+0xff0197e4>
 101980c:	d9801e04 	addi	r6,sp,120
 1019810:	b80b883a 	mov	r5,r23
 1019814:	9809883a 	mov	r4,r19
 1019818:	10212d80 	call	10212d8 <__sprint_r>
 101981c:	103d3a1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019820:	d8c02017 	ldw	r3,128(sp)
 1019824:	d8801f17 	ldw	r2,124(sp)
 1019828:	da000404 	addi	r8,sp,16
 101982c:	003fee06 	br	10197e8 <__alt_data_end+0xff0197e8>
 1019830:	d9403117 	ldw	r5,196(sp)
 1019834:	d8802a17 	ldw	r2,168(sp)
 1019838:	28adc83a 	sub	r22,r5,r2
 101983c:	05be630e 	bge	zero,r22,10191cc <__alt_data_end+0xff0191cc>
 1019840:	07000404 	movi	fp,16
 1019844:	d8801f17 	ldw	r2,124(sp)
 1019848:	e5838f0e 	bge	fp,r22,101a688 <___vfprintf_internal_r+0x1d88>
 101984c:	014040f4 	movhi	r5,259
 1019850:	296b1384 	addi	r5,r5,-21426
 1019854:	dc403015 	stw	r17,192(sp)
 1019858:	d9402b15 	stw	r5,172(sp)
 101985c:	b023883a 	mov	r17,r22
 1019860:	04c001c4 	movi	r19,7
 1019864:	a82d883a 	mov	r22,r21
 1019868:	902b883a 	mov	r21,r18
 101986c:	8025883a 	mov	r18,r16
 1019870:	dc002c17 	ldw	r16,176(sp)
 1019874:	00000306 	br	1019884 <___vfprintf_internal_r+0xf84>
 1019878:	8c7ffc04 	addi	r17,r17,-16
 101987c:	42000204 	addi	r8,r8,8
 1019880:	e440110e 	bge	fp,r17,10198c8 <___vfprintf_internal_r+0xfc8>
 1019884:	18c00404 	addi	r3,r3,16
 1019888:	10800044 	addi	r2,r2,1
 101988c:	45000015 	stw	r20,0(r8)
 1019890:	47000115 	stw	fp,4(r8)
 1019894:	d8c02015 	stw	r3,128(sp)
 1019898:	d8801f15 	stw	r2,124(sp)
 101989c:	98bff60e 	bge	r19,r2,1019878 <__alt_data_end+0xff019878>
 10198a0:	d9801e04 	addi	r6,sp,120
 10198a4:	b80b883a 	mov	r5,r23
 10198a8:	8009883a 	mov	r4,r16
 10198ac:	10212d80 	call	10212d8 <__sprint_r>
 10198b0:	103d151e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 10198b4:	8c7ffc04 	addi	r17,r17,-16
 10198b8:	d8c02017 	ldw	r3,128(sp)
 10198bc:	d8801f17 	ldw	r2,124(sp)
 10198c0:	da000404 	addi	r8,sp,16
 10198c4:	e47fef16 	blt	fp,r17,1019884 <__alt_data_end+0xff019884>
 10198c8:	9021883a 	mov	r16,r18
 10198cc:	a825883a 	mov	r18,r21
 10198d0:	b02b883a 	mov	r21,r22
 10198d4:	882d883a 	mov	r22,r17
 10198d8:	dc403017 	ldw	r17,192(sp)
 10198dc:	d9002b17 	ldw	r4,172(sp)
 10198e0:	1d87883a 	add	r3,r3,r22
 10198e4:	10800044 	addi	r2,r2,1
 10198e8:	41000015 	stw	r4,0(r8)
 10198ec:	45800115 	stw	r22,4(r8)
 10198f0:	d8c02015 	stw	r3,128(sp)
 10198f4:	d8801f15 	stw	r2,124(sp)
 10198f8:	010001c4 	movi	r4,7
 10198fc:	20818e16 	blt	r4,r2,1019f38 <___vfprintf_internal_r+0x1638>
 1019900:	42000204 	addi	r8,r8,8
 1019904:	003e3106 	br	10191cc <__alt_data_end+0xff0191cc>
 1019908:	d9403317 	ldw	r5,204(sp)
 101990c:	00800044 	movi	r2,1
 1019910:	18c00044 	addi	r3,r3,1
 1019914:	1141530e 	bge	r2,r5,1019e64 <___vfprintf_internal_r+0x1564>
 1019918:	dc401f17 	ldw	r17,124(sp)
 101991c:	00800044 	movi	r2,1
 1019920:	40800115 	stw	r2,4(r8)
 1019924:	8c400044 	addi	r17,r17,1
 1019928:	44000015 	stw	r16,0(r8)
 101992c:	d8c02015 	stw	r3,128(sp)
 1019930:	dc401f15 	stw	r17,124(sp)
 1019934:	008001c4 	movi	r2,7
 1019938:	14416b16 	blt	r2,r17,1019ee8 <___vfprintf_internal_r+0x15e8>
 101993c:	42000204 	addi	r8,r8,8
 1019940:	d8803717 	ldw	r2,220(sp)
 1019944:	d9003417 	ldw	r4,208(sp)
 1019948:	8c400044 	addi	r17,r17,1
 101994c:	10c7883a 	add	r3,r2,r3
 1019950:	40800115 	stw	r2,4(r8)
 1019954:	41000015 	stw	r4,0(r8)
 1019958:	d8c02015 	stw	r3,128(sp)
 101995c:	dc401f15 	stw	r17,124(sp)
 1019960:	008001c4 	movi	r2,7
 1019964:	14416916 	blt	r2,r17,1019f0c <___vfprintf_internal_r+0x160c>
 1019968:	45800204 	addi	r22,r8,8
 101996c:	d9003617 	ldw	r4,216(sp)
 1019970:	d9403817 	ldw	r5,224(sp)
 1019974:	000d883a 	mov	r6,zero
 1019978:	000f883a 	mov	r7,zero
 101997c:	d8c03c15 	stw	r3,240(sp)
 1019980:	1024f500 	call	1024f50 <__eqdf2>
 1019984:	d8c03c17 	ldw	r3,240(sp)
 1019988:	1000bc26 	beq	r2,zero,1019c7c <___vfprintf_internal_r+0x137c>
 101998c:	d9403317 	ldw	r5,204(sp)
 1019990:	84000044 	addi	r16,r16,1
 1019994:	8c400044 	addi	r17,r17,1
 1019998:	28bfffc4 	addi	r2,r5,-1
 101999c:	1887883a 	add	r3,r3,r2
 10199a0:	b0800115 	stw	r2,4(r22)
 10199a4:	b4000015 	stw	r16,0(r22)
 10199a8:	d8c02015 	stw	r3,128(sp)
 10199ac:	dc401f15 	stw	r17,124(sp)
 10199b0:	008001c4 	movi	r2,7
 10199b4:	14414316 	blt	r2,r17,1019ec4 <___vfprintf_internal_r+0x15c4>
 10199b8:	b5800204 	addi	r22,r22,8
 10199bc:	d9003a17 	ldw	r4,232(sp)
 10199c0:	df0022c4 	addi	fp,sp,139
 10199c4:	8c400044 	addi	r17,r17,1
 10199c8:	20c7883a 	add	r3,r4,r3
 10199cc:	b7000015 	stw	fp,0(r22)
 10199d0:	b1000115 	stw	r4,4(r22)
 10199d4:	d8c02015 	stw	r3,128(sp)
 10199d8:	dc401f15 	stw	r17,124(sp)
 10199dc:	008001c4 	movi	r2,7
 10199e0:	14400e16 	blt	r2,r17,1019a1c <___vfprintf_internal_r+0x111c>
 10199e4:	b2000204 	addi	r8,r22,8
 10199e8:	003e3a06 	br	10192d4 <__alt_data_end+0xff0192d4>
 10199ec:	010040f4 	movhi	r4,259
 10199f0:	212b1384 	addi	r4,r4,-21426
 10199f4:	d9002b15 	stw	r4,172(sp)
 10199f8:	d9002b17 	ldw	r4,172(sp)
 10199fc:	1c07883a 	add	r3,r3,r16
 1019a00:	44000115 	stw	r16,4(r8)
 1019a04:	41000015 	stw	r4,0(r8)
 1019a08:	10800044 	addi	r2,r2,1
 1019a0c:	d8c02015 	stw	r3,128(sp)
 1019a10:	d8801f15 	stw	r2,124(sp)
 1019a14:	010001c4 	movi	r4,7
 1019a18:	20be2d0e 	bge	r4,r2,10192d0 <__alt_data_end+0xff0192d0>
 1019a1c:	d9002c17 	ldw	r4,176(sp)
 1019a20:	d9801e04 	addi	r6,sp,120
 1019a24:	b80b883a 	mov	r5,r23
 1019a28:	10212d80 	call	10212d8 <__sprint_r>
 1019a2c:	103cb61e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019a30:	d8c02017 	ldw	r3,128(sp)
 1019a34:	da000404 	addi	r8,sp,16
 1019a38:	003e2606 	br	10192d4 <__alt_data_end+0xff0192d4>
 1019a3c:	d9002c17 	ldw	r4,176(sp)
 1019a40:	d9801e04 	addi	r6,sp,120
 1019a44:	b80b883a 	mov	r5,r23
 1019a48:	10212d80 	call	10212d8 <__sprint_r>
 1019a4c:	103e5d26 	beq	r2,zero,10193c4 <__alt_data_end+0xff0193c4>
 1019a50:	003cad06 	br	1018d08 <__alt_data_end+0xff018d08>
 1019a54:	d9002c17 	ldw	r4,176(sp)
 1019a58:	d9801e04 	addi	r6,sp,120
 1019a5c:	b80b883a 	mov	r5,r23
 1019a60:	10212d80 	call	10212d8 <__sprint_r>
 1019a64:	103ca81e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019a68:	d8c02017 	ldw	r3,128(sp)
 1019a6c:	da000404 	addi	r8,sp,16
 1019a70:	003e0b06 	br	10192a0 <__alt_data_end+0xff0192a0>
 1019a74:	d9002c17 	ldw	r4,176(sp)
 1019a78:	d9801e04 	addi	r6,sp,120
 1019a7c:	b80b883a 	mov	r5,r23
 1019a80:	10212d80 	call	10212d8 <__sprint_r>
 1019a84:	103ca01e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019a88:	d8c02017 	ldw	r3,128(sp)
 1019a8c:	da000404 	addi	r8,sp,16
 1019a90:	003dbd06 	br	1019188 <__alt_data_end+0xff019188>
 1019a94:	d9002c17 	ldw	r4,176(sp)
 1019a98:	d9801e04 	addi	r6,sp,120
 1019a9c:	b80b883a 	mov	r5,r23
 1019aa0:	10212d80 	call	10212d8 <__sprint_r>
 1019aa4:	103c981e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019aa8:	d8c02017 	ldw	r3,128(sp)
 1019aac:	da000404 	addi	r8,sp,16
 1019ab0:	003dc306 	br	10191c0 <__alt_data_end+0xff0191c0>
 1019ab4:	d8802917 	ldw	r2,164(sp)
 1019ab8:	d8002785 	stb	zero,158(sp)
 1019abc:	103f0616 	blt	r2,zero,10196d8 <__alt_data_end+0xff0196d8>
 1019ac0:	00ffdfc4 	movi	r3,-129
 1019ac4:	9d84b03a 	or	r2,r19,r22
 1019ac8:	90e4703a 	and	r18,r18,r3
 1019acc:	103c6b26 	beq	r2,zero,1018c7c <__alt_data_end+0xff018c7c>
 1019ad0:	0039883a 	mov	fp,zero
 1019ad4:	003e7406 	br	10194a8 <__alt_data_end+0xff0194a8>
 1019ad8:	9080040c 	andi	r2,r18,16
 1019adc:	1001b326 	beq	r2,zero,101a1ac <___vfprintf_internal_r+0x18ac>
 1019ae0:	d9002d17 	ldw	r4,180(sp)
 1019ae4:	d9402917 	ldw	r5,164(sp)
 1019ae8:	d8002785 	stb	zero,158(sp)
 1019aec:	20800104 	addi	r2,r4,4
 1019af0:	24c00017 	ldw	r19,0(r4)
 1019af4:	002d883a 	mov	r22,zero
 1019af8:	2801b516 	blt	r5,zero,101a1d0 <___vfprintf_internal_r+0x18d0>
 1019afc:	00ffdfc4 	movi	r3,-129
 1019b00:	d8802d15 	stw	r2,180(sp)
 1019b04:	90e4703a 	and	r18,r18,r3
 1019b08:	983d2726 	beq	r19,zero,1018fa8 <__alt_data_end+0xff018fa8>
 1019b0c:	0039883a 	mov	fp,zero
 1019b10:	003d2a06 	br	1018fbc <__alt_data_end+0xff018fbc>
 1019b14:	dc402617 	ldw	r17,152(sp)
 1019b18:	0441d30e 	bge	zero,r17,101a268 <___vfprintf_internal_r+0x1968>
 1019b1c:	dc403217 	ldw	r17,200(sp)
 1019b20:	d8803317 	ldw	r2,204(sp)
 1019b24:	1440010e 	bge	r2,r17,1019b2c <___vfprintf_internal_r+0x122c>
 1019b28:	1023883a 	mov	r17,r2
 1019b2c:	04400a0e 	bge	zero,r17,1019b58 <___vfprintf_internal_r+0x1258>
 1019b30:	d8801f17 	ldw	r2,124(sp)
 1019b34:	1c47883a 	add	r3,r3,r17
 1019b38:	44000015 	stw	r16,0(r8)
 1019b3c:	10800044 	addi	r2,r2,1
 1019b40:	44400115 	stw	r17,4(r8)
 1019b44:	d8c02015 	stw	r3,128(sp)
 1019b48:	d8801f15 	stw	r2,124(sp)
 1019b4c:	010001c4 	movi	r4,7
 1019b50:	20826516 	blt	r4,r2,101a4e8 <___vfprintf_internal_r+0x1be8>
 1019b54:	42000204 	addi	r8,r8,8
 1019b58:	88026116 	blt	r17,zero,101a4e0 <___vfprintf_internal_r+0x1be0>
 1019b5c:	d9003217 	ldw	r4,200(sp)
 1019b60:	2463c83a 	sub	r17,r4,r17
 1019b64:	04407b0e 	bge	zero,r17,1019d54 <___vfprintf_internal_r+0x1454>
 1019b68:	05800404 	movi	r22,16
 1019b6c:	d8801f17 	ldw	r2,124(sp)
 1019b70:	b4419d0e 	bge	r22,r17,101a1e8 <___vfprintf_internal_r+0x18e8>
 1019b74:	010040f4 	movhi	r4,259
 1019b78:	212b1384 	addi	r4,r4,-21426
 1019b7c:	d9002b15 	stw	r4,172(sp)
 1019b80:	070001c4 	movi	fp,7
 1019b84:	dcc02c17 	ldw	r19,176(sp)
 1019b88:	00000306 	br	1019b98 <___vfprintf_internal_r+0x1298>
 1019b8c:	42000204 	addi	r8,r8,8
 1019b90:	8c7ffc04 	addi	r17,r17,-16
 1019b94:	b441970e 	bge	r22,r17,101a1f4 <___vfprintf_internal_r+0x18f4>
 1019b98:	18c00404 	addi	r3,r3,16
 1019b9c:	10800044 	addi	r2,r2,1
 1019ba0:	45000015 	stw	r20,0(r8)
 1019ba4:	45800115 	stw	r22,4(r8)
 1019ba8:	d8c02015 	stw	r3,128(sp)
 1019bac:	d8801f15 	stw	r2,124(sp)
 1019bb0:	e0bff60e 	bge	fp,r2,1019b8c <__alt_data_end+0xff019b8c>
 1019bb4:	d9801e04 	addi	r6,sp,120
 1019bb8:	b80b883a 	mov	r5,r23
 1019bbc:	9809883a 	mov	r4,r19
 1019bc0:	10212d80 	call	10212d8 <__sprint_r>
 1019bc4:	103c501e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019bc8:	d8c02017 	ldw	r3,128(sp)
 1019bcc:	d8801f17 	ldw	r2,124(sp)
 1019bd0:	da000404 	addi	r8,sp,16
 1019bd4:	003fee06 	br	1019b90 <__alt_data_end+0xff019b90>
 1019bd8:	d9002c17 	ldw	r4,176(sp)
 1019bdc:	d9801e04 	addi	r6,sp,120
 1019be0:	b80b883a 	mov	r5,r23
 1019be4:	10212d80 	call	10212d8 <__sprint_r>
 1019be8:	103c471e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019bec:	d8c02017 	ldw	r3,128(sp)
 1019bf0:	df002787 	ldb	fp,158(sp)
 1019bf4:	da000404 	addi	r8,sp,16
 1019bf8:	003d5606 	br	1019154 <__alt_data_end+0xff019154>
 1019bfc:	9080040c 	andi	r2,r18,16
 1019c00:	10016126 	beq	r2,zero,101a188 <___vfprintf_internal_r+0x1888>
 1019c04:	d8802d17 	ldw	r2,180(sp)
 1019c08:	14c00017 	ldw	r19,0(r2)
 1019c0c:	10800104 	addi	r2,r2,4
 1019c10:	d8802d15 	stw	r2,180(sp)
 1019c14:	982dd7fa 	srai	r22,r19,31
 1019c18:	b005883a 	mov	r2,r22
 1019c1c:	003c8206 	br	1018e28 <__alt_data_end+0xff018e28>
 1019c20:	9080040c 	andi	r2,r18,16
 1019c24:	10003526 	beq	r2,zero,1019cfc <___vfprintf_internal_r+0x13fc>
 1019c28:	d9402d17 	ldw	r5,180(sp)
 1019c2c:	d8c02917 	ldw	r3,164(sp)
 1019c30:	d8002785 	stb	zero,158(sp)
 1019c34:	28800104 	addi	r2,r5,4
 1019c38:	2cc00017 	ldw	r19,0(r5)
 1019c3c:	002d883a 	mov	r22,zero
 1019c40:	18003716 	blt	r3,zero,1019d20 <___vfprintf_internal_r+0x1420>
 1019c44:	00ffdfc4 	movi	r3,-129
 1019c48:	d8802d15 	stw	r2,180(sp)
 1019c4c:	90e4703a 	and	r18,r18,r3
 1019c50:	0039883a 	mov	fp,zero
 1019c54:	983df326 	beq	r19,zero,1019424 <__alt_data_end+0xff019424>
 1019c58:	00800244 	movi	r2,9
 1019c5c:	14fc7b36 	bltu	r2,r19,1018e4c <__alt_data_end+0xff018e4c>
 1019c60:	d8c02817 	ldw	r3,160(sp)
 1019c64:	dc001dc4 	addi	r16,sp,119
 1019c68:	9cc00c04 	addi	r19,r19,48
 1019c6c:	1c07c83a 	sub	r3,r3,r16
 1019c70:	dcc01dc5 	stb	r19,119(sp)
 1019c74:	d8c02e15 	stw	r3,184(sp)
 1019c78:	003ce806 	br	101901c <__alt_data_end+0xff01901c>
 1019c7c:	d8803317 	ldw	r2,204(sp)
 1019c80:	143fffc4 	addi	r16,r2,-1
 1019c84:	043f4d0e 	bge	zero,r16,10199bc <__alt_data_end+0xff0199bc>
 1019c88:	07000404 	movi	fp,16
 1019c8c:	e400810e 	bge	fp,r16,1019e94 <___vfprintf_internal_r+0x1594>
 1019c90:	014040f4 	movhi	r5,259
 1019c94:	296b1384 	addi	r5,r5,-21426
 1019c98:	d9402b15 	stw	r5,172(sp)
 1019c9c:	01c001c4 	movi	r7,7
 1019ca0:	dcc02c17 	ldw	r19,176(sp)
 1019ca4:	00000306 	br	1019cb4 <___vfprintf_internal_r+0x13b4>
 1019ca8:	b5800204 	addi	r22,r22,8
 1019cac:	843ffc04 	addi	r16,r16,-16
 1019cb0:	e4007b0e 	bge	fp,r16,1019ea0 <___vfprintf_internal_r+0x15a0>
 1019cb4:	18c00404 	addi	r3,r3,16
 1019cb8:	8c400044 	addi	r17,r17,1
 1019cbc:	b5000015 	stw	r20,0(r22)
 1019cc0:	b7000115 	stw	fp,4(r22)
 1019cc4:	d8c02015 	stw	r3,128(sp)
 1019cc8:	dc401f15 	stw	r17,124(sp)
 1019ccc:	3c7ff60e 	bge	r7,r17,1019ca8 <__alt_data_end+0xff019ca8>
 1019cd0:	d9801e04 	addi	r6,sp,120
 1019cd4:	b80b883a 	mov	r5,r23
 1019cd8:	9809883a 	mov	r4,r19
 1019cdc:	d9c03c15 	stw	r7,240(sp)
 1019ce0:	10212d80 	call	10212d8 <__sprint_r>
 1019ce4:	d9c03c17 	ldw	r7,240(sp)
 1019ce8:	103c071e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019cec:	d8c02017 	ldw	r3,128(sp)
 1019cf0:	dc401f17 	ldw	r17,124(sp)
 1019cf4:	dd800404 	addi	r22,sp,16
 1019cf8:	003fec06 	br	1019cac <__alt_data_end+0xff019cac>
 1019cfc:	9080100c 	andi	r2,r18,64
 1019d00:	d8002785 	stb	zero,158(sp)
 1019d04:	10010e26 	beq	r2,zero,101a140 <___vfprintf_internal_r+0x1840>
 1019d08:	d9002d17 	ldw	r4,180(sp)
 1019d0c:	d9402917 	ldw	r5,164(sp)
 1019d10:	002d883a 	mov	r22,zero
 1019d14:	20800104 	addi	r2,r4,4
 1019d18:	24c0000b 	ldhu	r19,0(r4)
 1019d1c:	283fc90e 	bge	r5,zero,1019c44 <__alt_data_end+0xff019c44>
 1019d20:	d8802d15 	stw	r2,180(sp)
 1019d24:	0039883a 	mov	fp,zero
 1019d28:	9d84b03a 	or	r2,r19,r22
 1019d2c:	103c461e 	bne	r2,zero,1018e48 <__alt_data_end+0xff018e48>
 1019d30:	00800044 	movi	r2,1
 1019d34:	003e6c06 	br	10196e8 <__alt_data_end+0xff0196e8>
 1019d38:	d9002c17 	ldw	r4,176(sp)
 1019d3c:	d9801e04 	addi	r6,sp,120
 1019d40:	b80b883a 	mov	r5,r23
 1019d44:	10212d80 	call	10212d8 <__sprint_r>
 1019d48:	103bef1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019d4c:	d8c02017 	ldw	r3,128(sp)
 1019d50:	da000404 	addi	r8,sp,16
 1019d54:	d9003217 	ldw	r4,200(sp)
 1019d58:	d8802617 	ldw	r2,152(sp)
 1019d5c:	d9403317 	ldw	r5,204(sp)
 1019d60:	8123883a 	add	r17,r16,r4
 1019d64:	11400216 	blt	r2,r5,1019d70 <___vfprintf_internal_r+0x1470>
 1019d68:	9100004c 	andi	r4,r18,1
 1019d6c:	20000d26 	beq	r4,zero,1019da4 <___vfprintf_internal_r+0x14a4>
 1019d70:	d9003717 	ldw	r4,220(sp)
 1019d74:	d9403417 	ldw	r5,208(sp)
 1019d78:	1907883a 	add	r3,r3,r4
 1019d7c:	d9001f17 	ldw	r4,124(sp)
 1019d80:	41400015 	stw	r5,0(r8)
 1019d84:	d9403717 	ldw	r5,220(sp)
 1019d88:	21000044 	addi	r4,r4,1
 1019d8c:	d8c02015 	stw	r3,128(sp)
 1019d90:	41400115 	stw	r5,4(r8)
 1019d94:	d9001f15 	stw	r4,124(sp)
 1019d98:	014001c4 	movi	r5,7
 1019d9c:	2901e816 	blt	r5,r4,101a540 <___vfprintf_internal_r+0x1c40>
 1019da0:	42000204 	addi	r8,r8,8
 1019da4:	d9003317 	ldw	r4,204(sp)
 1019da8:	8121883a 	add	r16,r16,r4
 1019dac:	2085c83a 	sub	r2,r4,r2
 1019db0:	8461c83a 	sub	r16,r16,r17
 1019db4:	1400010e 	bge	r2,r16,1019dbc <___vfprintf_internal_r+0x14bc>
 1019db8:	1021883a 	mov	r16,r2
 1019dbc:	04000a0e 	bge	zero,r16,1019de8 <___vfprintf_internal_r+0x14e8>
 1019dc0:	d9001f17 	ldw	r4,124(sp)
 1019dc4:	1c07883a 	add	r3,r3,r16
 1019dc8:	44400015 	stw	r17,0(r8)
 1019dcc:	21000044 	addi	r4,r4,1
 1019dd0:	44000115 	stw	r16,4(r8)
 1019dd4:	d8c02015 	stw	r3,128(sp)
 1019dd8:	d9001f15 	stw	r4,124(sp)
 1019ddc:	014001c4 	movi	r5,7
 1019de0:	2901fb16 	blt	r5,r4,101a5d0 <___vfprintf_internal_r+0x1cd0>
 1019de4:	42000204 	addi	r8,r8,8
 1019de8:	8001f716 	blt	r16,zero,101a5c8 <___vfprintf_internal_r+0x1cc8>
 1019dec:	1421c83a 	sub	r16,r2,r16
 1019df0:	043d380e 	bge	zero,r16,10192d4 <__alt_data_end+0xff0192d4>
 1019df4:	04400404 	movi	r17,16
 1019df8:	d8801f17 	ldw	r2,124(sp)
 1019dfc:	8c3efb0e 	bge	r17,r16,10199ec <__alt_data_end+0xff0199ec>
 1019e00:	014040f4 	movhi	r5,259
 1019e04:	296b1384 	addi	r5,r5,-21426
 1019e08:	d9402b15 	stw	r5,172(sp)
 1019e0c:	058001c4 	movi	r22,7
 1019e10:	dcc02c17 	ldw	r19,176(sp)
 1019e14:	00000306 	br	1019e24 <___vfprintf_internal_r+0x1524>
 1019e18:	42000204 	addi	r8,r8,8
 1019e1c:	843ffc04 	addi	r16,r16,-16
 1019e20:	8c3ef50e 	bge	r17,r16,10199f8 <__alt_data_end+0xff0199f8>
 1019e24:	18c00404 	addi	r3,r3,16
 1019e28:	10800044 	addi	r2,r2,1
 1019e2c:	45000015 	stw	r20,0(r8)
 1019e30:	44400115 	stw	r17,4(r8)
 1019e34:	d8c02015 	stw	r3,128(sp)
 1019e38:	d8801f15 	stw	r2,124(sp)
 1019e3c:	b0bff60e 	bge	r22,r2,1019e18 <__alt_data_end+0xff019e18>
 1019e40:	d9801e04 	addi	r6,sp,120
 1019e44:	b80b883a 	mov	r5,r23
 1019e48:	9809883a 	mov	r4,r19
 1019e4c:	10212d80 	call	10212d8 <__sprint_r>
 1019e50:	103bad1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019e54:	d8c02017 	ldw	r3,128(sp)
 1019e58:	d8801f17 	ldw	r2,124(sp)
 1019e5c:	da000404 	addi	r8,sp,16
 1019e60:	003fee06 	br	1019e1c <__alt_data_end+0xff019e1c>
 1019e64:	9088703a 	and	r4,r18,r2
 1019e68:	203eab1e 	bne	r4,zero,1019918 <__alt_data_end+0xff019918>
 1019e6c:	dc401f17 	ldw	r17,124(sp)
 1019e70:	40800115 	stw	r2,4(r8)
 1019e74:	44000015 	stw	r16,0(r8)
 1019e78:	8c400044 	addi	r17,r17,1
 1019e7c:	d8c02015 	stw	r3,128(sp)
 1019e80:	dc401f15 	stw	r17,124(sp)
 1019e84:	008001c4 	movi	r2,7
 1019e88:	14400e16 	blt	r2,r17,1019ec4 <___vfprintf_internal_r+0x15c4>
 1019e8c:	45800204 	addi	r22,r8,8
 1019e90:	003eca06 	br	10199bc <__alt_data_end+0xff0199bc>
 1019e94:	010040f4 	movhi	r4,259
 1019e98:	212b1384 	addi	r4,r4,-21426
 1019e9c:	d9002b15 	stw	r4,172(sp)
 1019ea0:	d8802b17 	ldw	r2,172(sp)
 1019ea4:	1c07883a 	add	r3,r3,r16
 1019ea8:	8c400044 	addi	r17,r17,1
 1019eac:	b0800015 	stw	r2,0(r22)
 1019eb0:	b4000115 	stw	r16,4(r22)
 1019eb4:	d8c02015 	stw	r3,128(sp)
 1019eb8:	dc401f15 	stw	r17,124(sp)
 1019ebc:	008001c4 	movi	r2,7
 1019ec0:	147ebd0e 	bge	r2,r17,10199b8 <__alt_data_end+0xff0199b8>
 1019ec4:	d9002c17 	ldw	r4,176(sp)
 1019ec8:	d9801e04 	addi	r6,sp,120
 1019ecc:	b80b883a 	mov	r5,r23
 1019ed0:	10212d80 	call	10212d8 <__sprint_r>
 1019ed4:	103b8c1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019ed8:	d8c02017 	ldw	r3,128(sp)
 1019edc:	dc401f17 	ldw	r17,124(sp)
 1019ee0:	dd800404 	addi	r22,sp,16
 1019ee4:	003eb506 	br	10199bc <__alt_data_end+0xff0199bc>
 1019ee8:	d9002c17 	ldw	r4,176(sp)
 1019eec:	d9801e04 	addi	r6,sp,120
 1019ef0:	b80b883a 	mov	r5,r23
 1019ef4:	10212d80 	call	10212d8 <__sprint_r>
 1019ef8:	103b831e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019efc:	d8c02017 	ldw	r3,128(sp)
 1019f00:	dc401f17 	ldw	r17,124(sp)
 1019f04:	da000404 	addi	r8,sp,16
 1019f08:	003e8d06 	br	1019940 <__alt_data_end+0xff019940>
 1019f0c:	d9002c17 	ldw	r4,176(sp)
 1019f10:	d9801e04 	addi	r6,sp,120
 1019f14:	b80b883a 	mov	r5,r23
 1019f18:	10212d80 	call	10212d8 <__sprint_r>
 1019f1c:	103b7a1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019f20:	d8c02017 	ldw	r3,128(sp)
 1019f24:	dc401f17 	ldw	r17,124(sp)
 1019f28:	dd800404 	addi	r22,sp,16
 1019f2c:	003e8f06 	br	101996c <__alt_data_end+0xff01996c>
 1019f30:	0027883a 	mov	r19,zero
 1019f34:	003f4a06 	br	1019c60 <__alt_data_end+0xff019c60>
 1019f38:	d9002c17 	ldw	r4,176(sp)
 1019f3c:	d9801e04 	addi	r6,sp,120
 1019f40:	b80b883a 	mov	r5,r23
 1019f44:	10212d80 	call	10212d8 <__sprint_r>
 1019f48:	103b6f1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 1019f4c:	d8c02017 	ldw	r3,128(sp)
 1019f50:	da000404 	addi	r8,sp,16
 1019f54:	003c9d06 	br	10191cc <__alt_data_end+0xff0191cc>
 1019f58:	04e7c83a 	sub	r19,zero,r19
 1019f5c:	9804c03a 	cmpne	r2,r19,zero
 1019f60:	05adc83a 	sub	r22,zero,r22
 1019f64:	b0adc83a 	sub	r22,r22,r2
 1019f68:	d8802917 	ldw	r2,164(sp)
 1019f6c:	07000b44 	movi	fp,45
 1019f70:	df002785 	stb	fp,158(sp)
 1019f74:	10017b16 	blt	r2,zero,101a564 <___vfprintf_internal_r+0x1c64>
 1019f78:	00bfdfc4 	movi	r2,-129
 1019f7c:	90a4703a 	and	r18,r18,r2
 1019f80:	003bb106 	br	1018e48 <__alt_data_end+0xff018e48>
 1019f84:	d9003617 	ldw	r4,216(sp)
 1019f88:	d9403817 	ldw	r5,224(sp)
 1019f8c:	da003d15 	stw	r8,244(sp)
 1019f90:	101f8c80 	call	101f8c8 <__fpclassifyd>
 1019f94:	da003d17 	ldw	r8,244(sp)
 1019f98:	1000f026 	beq	r2,zero,101a35c <___vfprintf_internal_r+0x1a5c>
 1019f9c:	d9002917 	ldw	r4,164(sp)
 1019fa0:	05bff7c4 	movi	r22,-33
 1019fa4:	00bfffc4 	movi	r2,-1
 1019fa8:	8dac703a 	and	r22,r17,r22
 1019fac:	20820026 	beq	r4,r2,101a7b0 <___vfprintf_internal_r+0x1eb0>
 1019fb0:	008011c4 	movi	r2,71
 1019fb4:	b081f726 	beq	r22,r2,101a794 <___vfprintf_internal_r+0x1e94>
 1019fb8:	d9003817 	ldw	r4,224(sp)
 1019fbc:	90c04014 	ori	r3,r18,256
 1019fc0:	d8c02b15 	stw	r3,172(sp)
 1019fc4:	20021516 	blt	r4,zero,101a81c <___vfprintf_internal_r+0x1f1c>
 1019fc8:	dcc03817 	ldw	r19,224(sp)
 1019fcc:	d8002a05 	stb	zero,168(sp)
 1019fd0:	00801984 	movi	r2,102
 1019fd4:	8881f926 	beq	r17,r2,101a7bc <___vfprintf_internal_r+0x1ebc>
 1019fd8:	00801184 	movi	r2,70
 1019fdc:	88821c26 	beq	r17,r2,101a850 <___vfprintf_internal_r+0x1f50>
 1019fe0:	00801144 	movi	r2,69
 1019fe4:	b081ef26 	beq	r22,r2,101a7a4 <___vfprintf_internal_r+0x1ea4>
 1019fe8:	d8c02917 	ldw	r3,164(sp)
 1019fec:	d8802104 	addi	r2,sp,132
 1019ff0:	d8800315 	stw	r2,12(sp)
 1019ff4:	d9403617 	ldw	r5,216(sp)
 1019ff8:	d8802504 	addi	r2,sp,148
 1019ffc:	d9002c17 	ldw	r4,176(sp)
 101a000:	d8800215 	stw	r2,8(sp)
 101a004:	d8802604 	addi	r2,sp,152
 101a008:	d8c00015 	stw	r3,0(sp)
 101a00c:	d8800115 	stw	r2,4(sp)
 101a010:	01c00084 	movi	r7,2
 101a014:	980d883a 	mov	r6,r19
 101a018:	d8c03c15 	stw	r3,240(sp)
 101a01c:	da003d15 	stw	r8,244(sp)
 101a020:	101af3c0 	call	101af3c <_dtoa_r>
 101a024:	1021883a 	mov	r16,r2
 101a028:	008019c4 	movi	r2,103
 101a02c:	d8c03c17 	ldw	r3,240(sp)
 101a030:	da003d17 	ldw	r8,244(sp)
 101a034:	88817126 	beq	r17,r2,101a5fc <___vfprintf_internal_r+0x1cfc>
 101a038:	008011c4 	movi	r2,71
 101a03c:	88829226 	beq	r17,r2,101aa88 <___vfprintf_internal_r+0x2188>
 101a040:	80f9883a 	add	fp,r16,r3
 101a044:	d9003617 	ldw	r4,216(sp)
 101a048:	000d883a 	mov	r6,zero
 101a04c:	000f883a 	mov	r7,zero
 101a050:	980b883a 	mov	r5,r19
 101a054:	da003d15 	stw	r8,244(sp)
 101a058:	1024f500 	call	1024f50 <__eqdf2>
 101a05c:	da003d17 	ldw	r8,244(sp)
 101a060:	10018d26 	beq	r2,zero,101a698 <___vfprintf_internal_r+0x1d98>
 101a064:	d8802117 	ldw	r2,132(sp)
 101a068:	1700062e 	bgeu	r2,fp,101a084 <___vfprintf_internal_r+0x1784>
 101a06c:	01000c04 	movi	r4,48
 101a070:	10c00044 	addi	r3,r2,1
 101a074:	d8c02115 	stw	r3,132(sp)
 101a078:	11000005 	stb	r4,0(r2)
 101a07c:	d8802117 	ldw	r2,132(sp)
 101a080:	173ffb36 	bltu	r2,fp,101a070 <__alt_data_end+0xff01a070>
 101a084:	1405c83a 	sub	r2,r2,r16
 101a088:	d8803315 	stw	r2,204(sp)
 101a08c:	008011c4 	movi	r2,71
 101a090:	b0817626 	beq	r22,r2,101a66c <___vfprintf_internal_r+0x1d6c>
 101a094:	00801944 	movi	r2,101
 101a098:	1442810e 	bge	r2,r17,101aaa0 <___vfprintf_internal_r+0x21a0>
 101a09c:	d8c02617 	ldw	r3,152(sp)
 101a0a0:	00801984 	movi	r2,102
 101a0a4:	d8c03215 	stw	r3,200(sp)
 101a0a8:	8881fe26 	beq	r17,r2,101a8a4 <___vfprintf_internal_r+0x1fa4>
 101a0ac:	d8c03217 	ldw	r3,200(sp)
 101a0b0:	d9003317 	ldw	r4,204(sp)
 101a0b4:	1901dd16 	blt	r3,r4,101a82c <___vfprintf_internal_r+0x1f2c>
 101a0b8:	9480004c 	andi	r18,r18,1
 101a0bc:	90022b1e 	bne	r18,zero,101a96c <___vfprintf_internal_r+0x206c>
 101a0c0:	1805883a 	mov	r2,r3
 101a0c4:	18028016 	blt	r3,zero,101aac8 <___vfprintf_internal_r+0x21c8>
 101a0c8:	d8c03217 	ldw	r3,200(sp)
 101a0cc:	044019c4 	movi	r17,103
 101a0d0:	d8c02e15 	stw	r3,184(sp)
 101a0d4:	df002a07 	ldb	fp,168(sp)
 101a0d8:	e001531e 	bne	fp,zero,101a628 <___vfprintf_internal_r+0x1d28>
 101a0dc:	df002783 	ldbu	fp,158(sp)
 101a0e0:	d8802a15 	stw	r2,168(sp)
 101a0e4:	dc802b17 	ldw	r18,172(sp)
 101a0e8:	d8002915 	stw	zero,164(sp)
 101a0ec:	003bd106 	br	1019034 <__alt_data_end+0xff019034>
 101a0f0:	d8802d17 	ldw	r2,180(sp)
 101a0f4:	d8c02d17 	ldw	r3,180(sp)
 101a0f8:	d9002d17 	ldw	r4,180(sp)
 101a0fc:	10800017 	ldw	r2,0(r2)
 101a100:	18c00117 	ldw	r3,4(r3)
 101a104:	21000204 	addi	r4,r4,8
 101a108:	d8803615 	stw	r2,216(sp)
 101a10c:	d8c03815 	stw	r3,224(sp)
 101a110:	d9002d15 	stw	r4,180(sp)
 101a114:	003b7506 	br	1018eec <__alt_data_end+0xff018eec>
 101a118:	ac400007 	ldb	r17,0(r21)
 101a11c:	003a5906 	br	1018a84 <__alt_data_end+0xff018a84>
 101a120:	9080100c 	andi	r2,r18,64
 101a124:	1000a826 	beq	r2,zero,101a3c8 <___vfprintf_internal_r+0x1ac8>
 101a128:	d9002d17 	ldw	r4,180(sp)
 101a12c:	002d883a 	mov	r22,zero
 101a130:	24c0000b 	ldhu	r19,0(r4)
 101a134:	21000104 	addi	r4,r4,4
 101a138:	d9002d15 	stw	r4,180(sp)
 101a13c:	003ccb06 	br	101946c <__alt_data_end+0xff01946c>
 101a140:	d8c02d17 	ldw	r3,180(sp)
 101a144:	d9002917 	ldw	r4,164(sp)
 101a148:	002d883a 	mov	r22,zero
 101a14c:	18800104 	addi	r2,r3,4
 101a150:	1cc00017 	ldw	r19,0(r3)
 101a154:	203ebb0e 	bge	r4,zero,1019c44 <__alt_data_end+0xff019c44>
 101a158:	003ef106 	br	1019d20 <__alt_data_end+0xff019d20>
 101a15c:	9080040c 	andi	r2,r18,16
 101a160:	1000921e 	bne	r2,zero,101a3ac <___vfprintf_internal_r+0x1aac>
 101a164:	9480100c 	andi	r18,r18,64
 101a168:	90013926 	beq	r18,zero,101a650 <___vfprintf_internal_r+0x1d50>
 101a16c:	d9002d17 	ldw	r4,180(sp)
 101a170:	d9402f17 	ldw	r5,188(sp)
 101a174:	20800017 	ldw	r2,0(r4)
 101a178:	21000104 	addi	r4,r4,4
 101a17c:	d9002d15 	stw	r4,180(sp)
 101a180:	1140000d 	sth	r5,0(r2)
 101a184:	003a1606 	br	10189e0 <__alt_data_end+0xff0189e0>
 101a188:	9080100c 	andi	r2,r18,64
 101a18c:	10008026 	beq	r2,zero,101a390 <___vfprintf_internal_r+0x1a90>
 101a190:	d8c02d17 	ldw	r3,180(sp)
 101a194:	1cc0000f 	ldh	r19,0(r3)
 101a198:	18c00104 	addi	r3,r3,4
 101a19c:	d8c02d15 	stw	r3,180(sp)
 101a1a0:	982dd7fa 	srai	r22,r19,31
 101a1a4:	b005883a 	mov	r2,r22
 101a1a8:	003b1f06 	br	1018e28 <__alt_data_end+0xff018e28>
 101a1ac:	9080100c 	andi	r2,r18,64
 101a1b0:	d8002785 	stb	zero,158(sp)
 101a1b4:	10008a1e 	bne	r2,zero,101a3e0 <___vfprintf_internal_r+0x1ae0>
 101a1b8:	d9402d17 	ldw	r5,180(sp)
 101a1bc:	d8c02917 	ldw	r3,164(sp)
 101a1c0:	002d883a 	mov	r22,zero
 101a1c4:	28800104 	addi	r2,r5,4
 101a1c8:	2cc00017 	ldw	r19,0(r5)
 101a1cc:	183e4b0e 	bge	r3,zero,1019afc <__alt_data_end+0xff019afc>
 101a1d0:	9d86b03a 	or	r3,r19,r22
 101a1d4:	d8802d15 	stw	r2,180(sp)
 101a1d8:	183e4c1e 	bne	r3,zero,1019b0c <__alt_data_end+0xff019b0c>
 101a1dc:	0039883a 	mov	fp,zero
 101a1e0:	0005883a 	mov	r2,zero
 101a1e4:	003d4006 	br	10196e8 <__alt_data_end+0xff0196e8>
 101a1e8:	014040f4 	movhi	r5,259
 101a1ec:	296b1384 	addi	r5,r5,-21426
 101a1f0:	d9402b15 	stw	r5,172(sp)
 101a1f4:	d9402b17 	ldw	r5,172(sp)
 101a1f8:	1c47883a 	add	r3,r3,r17
 101a1fc:	10800044 	addi	r2,r2,1
 101a200:	41400015 	stw	r5,0(r8)
 101a204:	44400115 	stw	r17,4(r8)
 101a208:	d8c02015 	stw	r3,128(sp)
 101a20c:	d8801f15 	stw	r2,124(sp)
 101a210:	010001c4 	movi	r4,7
 101a214:	20bec816 	blt	r4,r2,1019d38 <__alt_data_end+0xff019d38>
 101a218:	42000204 	addi	r8,r8,8
 101a21c:	003ecd06 	br	1019d54 <__alt_data_end+0xff019d54>
 101a220:	d9002917 	ldw	r4,164(sp)
 101a224:	d8002785 	stb	zero,158(sp)
 101a228:	203d2d16 	blt	r4,zero,10196e0 <__alt_data_end+0xff0196e0>
 101a22c:	00bfdfc4 	movi	r2,-129
 101a230:	90a4703a 	and	r18,r18,r2
 101a234:	003a9106 	br	1018c7c <__alt_data_end+0xff018c7c>
 101a238:	010040f4 	movhi	r4,259
 101a23c:	212b1384 	addi	r4,r4,-21426
 101a240:	d9002b15 	stw	r4,172(sp)
 101a244:	003c0c06 	br	1019278 <__alt_data_end+0xff019278>
 101a248:	d9002c17 	ldw	r4,176(sp)
 101a24c:	d9801e04 	addi	r6,sp,120
 101a250:	b80b883a 	mov	r5,r23
 101a254:	10212d80 	call	10212d8 <__sprint_r>
 101a258:	103aab1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a25c:	d8c02017 	ldw	r3,128(sp)
 101a260:	da000404 	addi	r8,sp,16
 101a264:	003d4106 	br	101976c <__alt_data_end+0xff01976c>
 101a268:	d8801f17 	ldw	r2,124(sp)
 101a26c:	014040f4 	movhi	r5,259
 101a270:	01000044 	movi	r4,1
 101a274:	18c00044 	addi	r3,r3,1
 101a278:	10800044 	addi	r2,r2,1
 101a27c:	296b0b04 	addi	r5,r5,-21460
 101a280:	41000115 	stw	r4,4(r8)
 101a284:	41400015 	stw	r5,0(r8)
 101a288:	d8c02015 	stw	r3,128(sp)
 101a28c:	d8801f15 	stw	r2,124(sp)
 101a290:	010001c4 	movi	r4,7
 101a294:	20805c16 	blt	r4,r2,101a408 <___vfprintf_internal_r+0x1b08>
 101a298:	42000204 	addi	r8,r8,8
 101a29c:	8800041e 	bne	r17,zero,101a2b0 <___vfprintf_internal_r+0x19b0>
 101a2a0:	d8803317 	ldw	r2,204(sp)
 101a2a4:	1000021e 	bne	r2,zero,101a2b0 <___vfprintf_internal_r+0x19b0>
 101a2a8:	9080004c 	andi	r2,r18,1
 101a2ac:	103c0926 	beq	r2,zero,10192d4 <__alt_data_end+0xff0192d4>
 101a2b0:	d9003717 	ldw	r4,220(sp)
 101a2b4:	d8801f17 	ldw	r2,124(sp)
 101a2b8:	d9403417 	ldw	r5,208(sp)
 101a2bc:	20c7883a 	add	r3,r4,r3
 101a2c0:	10800044 	addi	r2,r2,1
 101a2c4:	41000115 	stw	r4,4(r8)
 101a2c8:	41400015 	stw	r5,0(r8)
 101a2cc:	d8c02015 	stw	r3,128(sp)
 101a2d0:	d8801f15 	stw	r2,124(sp)
 101a2d4:	010001c4 	movi	r4,7
 101a2d8:	20812116 	blt	r4,r2,101a760 <___vfprintf_internal_r+0x1e60>
 101a2dc:	42000204 	addi	r8,r8,8
 101a2e0:	0463c83a 	sub	r17,zero,r17
 101a2e4:	0440730e 	bge	zero,r17,101a4b4 <___vfprintf_internal_r+0x1bb4>
 101a2e8:	05800404 	movi	r22,16
 101a2ec:	b440860e 	bge	r22,r17,101a508 <___vfprintf_internal_r+0x1c08>
 101a2f0:	014040f4 	movhi	r5,259
 101a2f4:	296b1384 	addi	r5,r5,-21426
 101a2f8:	d9402b15 	stw	r5,172(sp)
 101a2fc:	070001c4 	movi	fp,7
 101a300:	dcc02c17 	ldw	r19,176(sp)
 101a304:	00000306 	br	101a314 <___vfprintf_internal_r+0x1a14>
 101a308:	42000204 	addi	r8,r8,8
 101a30c:	8c7ffc04 	addi	r17,r17,-16
 101a310:	b440800e 	bge	r22,r17,101a514 <___vfprintf_internal_r+0x1c14>
 101a314:	18c00404 	addi	r3,r3,16
 101a318:	10800044 	addi	r2,r2,1
 101a31c:	45000015 	stw	r20,0(r8)
 101a320:	45800115 	stw	r22,4(r8)
 101a324:	d8c02015 	stw	r3,128(sp)
 101a328:	d8801f15 	stw	r2,124(sp)
 101a32c:	e0bff60e 	bge	fp,r2,101a308 <__alt_data_end+0xff01a308>
 101a330:	d9801e04 	addi	r6,sp,120
 101a334:	b80b883a 	mov	r5,r23
 101a338:	9809883a 	mov	r4,r19
 101a33c:	10212d80 	call	10212d8 <__sprint_r>
 101a340:	103a711e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a344:	d8c02017 	ldw	r3,128(sp)
 101a348:	d8801f17 	ldw	r2,124(sp)
 101a34c:	da000404 	addi	r8,sp,16
 101a350:	003fee06 	br	101a30c <__alt_data_end+0xff01a30c>
 101a354:	00bfffc4 	movi	r2,-1
 101a358:	003a6f06 	br	1018d18 <__alt_data_end+0xff018d18>
 101a35c:	008011c4 	movi	r2,71
 101a360:	1440b816 	blt	r2,r17,101a644 <___vfprintf_internal_r+0x1d44>
 101a364:	040040f4 	movhi	r16,259
 101a368:	842afd04 	addi	r16,r16,-21516
 101a36c:	00c000c4 	movi	r3,3
 101a370:	00bfdfc4 	movi	r2,-129
 101a374:	d8c02a15 	stw	r3,168(sp)
 101a378:	90a4703a 	and	r18,r18,r2
 101a37c:	df002783 	ldbu	fp,158(sp)
 101a380:	d8c02e15 	stw	r3,184(sp)
 101a384:	d8002915 	stw	zero,164(sp)
 101a388:	d8003215 	stw	zero,200(sp)
 101a38c:	003b2906 	br	1019034 <__alt_data_end+0xff019034>
 101a390:	d9002d17 	ldw	r4,180(sp)
 101a394:	24c00017 	ldw	r19,0(r4)
 101a398:	21000104 	addi	r4,r4,4
 101a39c:	d9002d15 	stw	r4,180(sp)
 101a3a0:	982dd7fa 	srai	r22,r19,31
 101a3a4:	b005883a 	mov	r2,r22
 101a3a8:	003a9f06 	br	1018e28 <__alt_data_end+0xff018e28>
 101a3ac:	d9402d17 	ldw	r5,180(sp)
 101a3b0:	d8c02f17 	ldw	r3,188(sp)
 101a3b4:	28800017 	ldw	r2,0(r5)
 101a3b8:	29400104 	addi	r5,r5,4
 101a3bc:	d9402d15 	stw	r5,180(sp)
 101a3c0:	10c00015 	stw	r3,0(r2)
 101a3c4:	00398606 	br	10189e0 <__alt_data_end+0xff0189e0>
 101a3c8:	d9402d17 	ldw	r5,180(sp)
 101a3cc:	002d883a 	mov	r22,zero
 101a3d0:	2cc00017 	ldw	r19,0(r5)
 101a3d4:	29400104 	addi	r5,r5,4
 101a3d8:	d9402d15 	stw	r5,180(sp)
 101a3dc:	003c2306 	br	101946c <__alt_data_end+0xff01946c>
 101a3e0:	d8c02d17 	ldw	r3,180(sp)
 101a3e4:	d9002917 	ldw	r4,164(sp)
 101a3e8:	002d883a 	mov	r22,zero
 101a3ec:	18800104 	addi	r2,r3,4
 101a3f0:	1cc0000b 	ldhu	r19,0(r3)
 101a3f4:	203dc10e 	bge	r4,zero,1019afc <__alt_data_end+0xff019afc>
 101a3f8:	003f7506 	br	101a1d0 <__alt_data_end+0xff01a1d0>
 101a3fc:	040040f4 	movhi	r16,259
 101a400:	842afb04 	addi	r16,r16,-21524
 101a404:	003acc06 	br	1018f38 <__alt_data_end+0xff018f38>
 101a408:	d9002c17 	ldw	r4,176(sp)
 101a40c:	d9801e04 	addi	r6,sp,120
 101a410:	b80b883a 	mov	r5,r23
 101a414:	10212d80 	call	10212d8 <__sprint_r>
 101a418:	103a3b1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a41c:	dc402617 	ldw	r17,152(sp)
 101a420:	d8c02017 	ldw	r3,128(sp)
 101a424:	da000404 	addi	r8,sp,16
 101a428:	003f9c06 	br	101a29c <__alt_data_end+0xff01a29c>
 101a42c:	ac400043 	ldbu	r17,1(r21)
 101a430:	94800814 	ori	r18,r18,32
 101a434:	ad400044 	addi	r21,r21,1
 101a438:	8c403fcc 	andi	r17,r17,255
 101a43c:	8c40201c 	xori	r17,r17,128
 101a440:	8c7fe004 	addi	r17,r17,-128
 101a444:	00398f06 	br	1018a84 <__alt_data_end+0xff018a84>
 101a448:	d8c02d15 	stw	r3,180(sp)
 101a44c:	0039883a 	mov	fp,zero
 101a450:	003e3506 	br	1019d28 <__alt_data_end+0xff019d28>
 101a454:	d9002c17 	ldw	r4,176(sp)
 101a458:	d9801e04 	addi	r6,sp,120
 101a45c:	b80b883a 	mov	r5,r23
 101a460:	10212d80 	call	10212d8 <__sprint_r>
 101a464:	103a281e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a468:	d8c02017 	ldw	r3,128(sp)
 101a46c:	da000404 	addi	r8,sp,16
 101a470:	003cd006 	br	10197b4 <__alt_data_end+0xff0197b4>
 101a474:	8009883a 	mov	r4,r16
 101a478:	da003d15 	stw	r8,244(sp)
 101a47c:	10164b40 	call	10164b4 <strlen>
 101a480:	d8802e15 	stw	r2,184(sp)
 101a484:	da003d17 	ldw	r8,244(sp)
 101a488:	103c340e 	bge	r2,zero,101955c <__alt_data_end+0xff01955c>
 101a48c:	0005883a 	mov	r2,zero
 101a490:	003c3206 	br	101955c <__alt_data_end+0xff01955c>
 101a494:	d9002c17 	ldw	r4,176(sp)
 101a498:	d9801e04 	addi	r6,sp,120
 101a49c:	b80b883a 	mov	r5,r23
 101a4a0:	10212d80 	call	10212d8 <__sprint_r>
 101a4a4:	103a181e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a4a8:	d8c02017 	ldw	r3,128(sp)
 101a4ac:	d8801f17 	ldw	r2,124(sp)
 101a4b0:	da000404 	addi	r8,sp,16
 101a4b4:	d9403317 	ldw	r5,204(sp)
 101a4b8:	10800044 	addi	r2,r2,1
 101a4bc:	44000015 	stw	r16,0(r8)
 101a4c0:	28c7883a 	add	r3,r5,r3
 101a4c4:	003b7d06 	br	10192bc <__alt_data_end+0xff0192bc>
 101a4c8:	010040f4 	movhi	r4,259
 101a4cc:	212b1784 	addi	r4,r4,-21410
 101a4d0:	d9003515 	stw	r4,212(sp)
 101a4d4:	003b1406 	br	1019128 <__alt_data_end+0xff019128>
 101a4d8:	013fffc4 	movi	r4,-1
 101a4dc:	003a3506 	br	1018db4 <__alt_data_end+0xff018db4>
 101a4e0:	0023883a 	mov	r17,zero
 101a4e4:	003d9d06 	br	1019b5c <__alt_data_end+0xff019b5c>
 101a4e8:	d9002c17 	ldw	r4,176(sp)
 101a4ec:	d9801e04 	addi	r6,sp,120
 101a4f0:	b80b883a 	mov	r5,r23
 101a4f4:	10212d80 	call	10212d8 <__sprint_r>
 101a4f8:	103a031e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a4fc:	d8c02017 	ldw	r3,128(sp)
 101a500:	da000404 	addi	r8,sp,16
 101a504:	003d9406 	br	1019b58 <__alt_data_end+0xff019b58>
 101a508:	010040f4 	movhi	r4,259
 101a50c:	212b1384 	addi	r4,r4,-21426
 101a510:	d9002b15 	stw	r4,172(sp)
 101a514:	d9002b17 	ldw	r4,172(sp)
 101a518:	1c47883a 	add	r3,r3,r17
 101a51c:	10800044 	addi	r2,r2,1
 101a520:	41000015 	stw	r4,0(r8)
 101a524:	44400115 	stw	r17,4(r8)
 101a528:	d8c02015 	stw	r3,128(sp)
 101a52c:	d8801f15 	stw	r2,124(sp)
 101a530:	010001c4 	movi	r4,7
 101a534:	20bfd716 	blt	r4,r2,101a494 <__alt_data_end+0xff01a494>
 101a538:	42000204 	addi	r8,r8,8
 101a53c:	003fdd06 	br	101a4b4 <__alt_data_end+0xff01a4b4>
 101a540:	d9002c17 	ldw	r4,176(sp)
 101a544:	d9801e04 	addi	r6,sp,120
 101a548:	b80b883a 	mov	r5,r23
 101a54c:	10212d80 	call	10212d8 <__sprint_r>
 101a550:	1039ed1e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a554:	d8802617 	ldw	r2,152(sp)
 101a558:	d8c02017 	ldw	r3,128(sp)
 101a55c:	da000404 	addi	r8,sp,16
 101a560:	003e1006 	br	1019da4 <__alt_data_end+0xff019da4>
 101a564:	00800044 	movi	r2,1
 101a568:	10803fcc 	andi	r2,r2,255
 101a56c:	00c00044 	movi	r3,1
 101a570:	10fa3526 	beq	r2,r3,1018e48 <__alt_data_end+0xff018e48>
 101a574:	00c00084 	movi	r3,2
 101a578:	10fbcb26 	beq	r2,r3,10194a8 <__alt_data_end+0xff0194a8>
 101a57c:	003a8f06 	br	1018fbc <__alt_data_end+0xff018fbc>
 101a580:	010040f4 	movhi	r4,259
 101a584:	212b1784 	addi	r4,r4,-21410
 101a588:	d9003515 	stw	r4,212(sp)
 101a58c:	003b7606 	br	1019368 <__alt_data_end+0xff019368>
 101a590:	d8802917 	ldw	r2,164(sp)
 101a594:	00c00184 	movi	r3,6
 101a598:	1880012e 	bgeu	r3,r2,101a5a0 <___vfprintf_internal_r+0x1ca0>
 101a59c:	1805883a 	mov	r2,r3
 101a5a0:	d8802e15 	stw	r2,184(sp)
 101a5a4:	1000ef16 	blt	r2,zero,101a964 <___vfprintf_internal_r+0x2064>
 101a5a8:	040040f4 	movhi	r16,259
 101a5ac:	d8802a15 	stw	r2,168(sp)
 101a5b0:	dcc02d15 	stw	r19,180(sp)
 101a5b4:	d8002915 	stw	zero,164(sp)
 101a5b8:	d8003215 	stw	zero,200(sp)
 101a5bc:	842b0904 	addi	r16,r16,-21468
 101a5c0:	0039883a 	mov	fp,zero
 101a5c4:	003aa206 	br	1019050 <__alt_data_end+0xff019050>
 101a5c8:	0021883a 	mov	r16,zero
 101a5cc:	003e0706 	br	1019dec <__alt_data_end+0xff019dec>
 101a5d0:	d9002c17 	ldw	r4,176(sp)
 101a5d4:	d9801e04 	addi	r6,sp,120
 101a5d8:	b80b883a 	mov	r5,r23
 101a5dc:	10212d80 	call	10212d8 <__sprint_r>
 101a5e0:	1039c91e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a5e4:	d8802617 	ldw	r2,152(sp)
 101a5e8:	d9403317 	ldw	r5,204(sp)
 101a5ec:	d8c02017 	ldw	r3,128(sp)
 101a5f0:	da000404 	addi	r8,sp,16
 101a5f4:	2885c83a 	sub	r2,r5,r2
 101a5f8:	003dfb06 	br	1019de8 <__alt_data_end+0xff019de8>
 101a5fc:	9080004c 	andi	r2,r18,1
 101a600:	103e8f1e 	bne	r2,zero,101a040 <__alt_data_end+0xff01a040>
 101a604:	d8802117 	ldw	r2,132(sp)
 101a608:	003e9e06 	br	101a084 <__alt_data_end+0xff01a084>
 101a60c:	1025883a 	mov	r18,r2
 101a610:	0039883a 	mov	fp,zero
 101a614:	00800084 	movi	r2,2
 101a618:	003fd306 	br	101a568 <__alt_data_end+0xff01a568>
 101a61c:	07000b44 	movi	fp,45
 101a620:	df002785 	stb	fp,158(sp)
 101a624:	003a4006 	br	1018f28 <__alt_data_end+0xff018f28>
 101a628:	00c00b44 	movi	r3,45
 101a62c:	d8c02785 	stb	r3,158(sp)
 101a630:	d8802a15 	stw	r2,168(sp)
 101a634:	dc802b17 	ldw	r18,172(sp)
 101a638:	d8002915 	stw	zero,164(sp)
 101a63c:	07000b44 	movi	fp,45
 101a640:	003a8006 	br	1019044 <__alt_data_end+0xff019044>
 101a644:	040040f4 	movhi	r16,259
 101a648:	842afe04 	addi	r16,r16,-21512
 101a64c:	003f4706 	br	101a36c <__alt_data_end+0xff01a36c>
 101a650:	d8c02d17 	ldw	r3,180(sp)
 101a654:	d9002f17 	ldw	r4,188(sp)
 101a658:	18800017 	ldw	r2,0(r3)
 101a65c:	18c00104 	addi	r3,r3,4
 101a660:	d8c02d15 	stw	r3,180(sp)
 101a664:	11000015 	stw	r4,0(r2)
 101a668:	0038dd06 	br	10189e0 <__alt_data_end+0xff0189e0>
 101a66c:	dd802617 	ldw	r22,152(sp)
 101a670:	00bfff44 	movi	r2,-3
 101a674:	b0801c16 	blt	r22,r2,101a6e8 <___vfprintf_internal_r+0x1de8>
 101a678:	d9402917 	ldw	r5,164(sp)
 101a67c:	2d801a16 	blt	r5,r22,101a6e8 <___vfprintf_internal_r+0x1de8>
 101a680:	dd803215 	stw	r22,200(sp)
 101a684:	003e8906 	br	101a0ac <__alt_data_end+0xff01a0ac>
 101a688:	010040f4 	movhi	r4,259
 101a68c:	212b1384 	addi	r4,r4,-21426
 101a690:	d9002b15 	stw	r4,172(sp)
 101a694:	003c9106 	br	10198dc <__alt_data_end+0xff0198dc>
 101a698:	e005883a 	mov	r2,fp
 101a69c:	003e7906 	br	101a084 <__alt_data_end+0xff01a084>
 101a6a0:	d9402917 	ldw	r5,164(sp)
 101a6a4:	df002783 	ldbu	fp,158(sp)
 101a6a8:	dcc02d15 	stw	r19,180(sp)
 101a6ac:	d9402a15 	stw	r5,168(sp)
 101a6b0:	d9402e15 	stw	r5,184(sp)
 101a6b4:	d8002915 	stw	zero,164(sp)
 101a6b8:	d8003215 	stw	zero,200(sp)
 101a6bc:	003a5d06 	br	1019034 <__alt_data_end+0xff019034>
 101a6c0:	9080004c 	andi	r2,r18,1
 101a6c4:	0039883a 	mov	fp,zero
 101a6c8:	10000426 	beq	r2,zero,101a6dc <___vfprintf_internal_r+0x1ddc>
 101a6cc:	00800c04 	movi	r2,48
 101a6d0:	dc001dc4 	addi	r16,sp,119
 101a6d4:	d8801dc5 	stb	r2,119(sp)
 101a6d8:	003b8006 	br	10194dc <__alt_data_end+0xff0194dc>
 101a6dc:	d8002e15 	stw	zero,184(sp)
 101a6e0:	dc001e04 	addi	r16,sp,120
 101a6e4:	003a4d06 	br	101901c <__alt_data_end+0xff01901c>
 101a6e8:	8c7fff84 	addi	r17,r17,-2
 101a6ec:	b5bfffc4 	addi	r22,r22,-1
 101a6f0:	dd802615 	stw	r22,152(sp)
 101a6f4:	dc4022c5 	stb	r17,139(sp)
 101a6f8:	b000bf16 	blt	r22,zero,101a9f8 <___vfprintf_internal_r+0x20f8>
 101a6fc:	00800ac4 	movi	r2,43
 101a700:	d8802305 	stb	r2,140(sp)
 101a704:	00800244 	movi	r2,9
 101a708:	15807016 	blt	r2,r22,101a8cc <___vfprintf_internal_r+0x1fcc>
 101a70c:	00800c04 	movi	r2,48
 101a710:	b5800c04 	addi	r22,r22,48
 101a714:	d8802345 	stb	r2,141(sp)
 101a718:	dd802385 	stb	r22,142(sp)
 101a71c:	d88023c4 	addi	r2,sp,143
 101a720:	df0022c4 	addi	fp,sp,139
 101a724:	d8c03317 	ldw	r3,204(sp)
 101a728:	1739c83a 	sub	fp,r2,fp
 101a72c:	d9003317 	ldw	r4,204(sp)
 101a730:	e0c7883a 	add	r3,fp,r3
 101a734:	df003a15 	stw	fp,232(sp)
 101a738:	d8c02e15 	stw	r3,184(sp)
 101a73c:	00800044 	movi	r2,1
 101a740:	1100b30e 	bge	r2,r4,101aa10 <___vfprintf_internal_r+0x2110>
 101a744:	d8c02e17 	ldw	r3,184(sp)
 101a748:	18c00044 	addi	r3,r3,1
 101a74c:	d8c02e15 	stw	r3,184(sp)
 101a750:	1805883a 	mov	r2,r3
 101a754:	1800ac16 	blt	r3,zero,101aa08 <___vfprintf_internal_r+0x2108>
 101a758:	d8003215 	stw	zero,200(sp)
 101a75c:	003e5d06 	br	101a0d4 <__alt_data_end+0xff01a0d4>
 101a760:	d9002c17 	ldw	r4,176(sp)
 101a764:	d9801e04 	addi	r6,sp,120
 101a768:	b80b883a 	mov	r5,r23
 101a76c:	10212d80 	call	10212d8 <__sprint_r>
 101a770:	1039651e 	bne	r2,zero,1018d08 <__alt_data_end+0xff018d08>
 101a774:	dc402617 	ldw	r17,152(sp)
 101a778:	d8c02017 	ldw	r3,128(sp)
 101a77c:	d8801f17 	ldw	r2,124(sp)
 101a780:	da000404 	addi	r8,sp,16
 101a784:	003ed606 	br	101a2e0 <__alt_data_end+0xff01a2e0>
 101a788:	582b883a 	mov	r21,r11
 101a78c:	d8002915 	stw	zero,164(sp)
 101a790:	0038bd06 	br	1018a88 <__alt_data_end+0xff018a88>
 101a794:	d8802917 	ldw	r2,164(sp)
 101a798:	103e071e 	bne	r2,zero,1019fb8 <__alt_data_end+0xff019fb8>
 101a79c:	dc002915 	stw	r16,164(sp)
 101a7a0:	003e0506 	br	1019fb8 <__alt_data_end+0xff019fb8>
 101a7a4:	d9002917 	ldw	r4,164(sp)
 101a7a8:	20c00044 	addi	r3,r4,1
 101a7ac:	003e0f06 	br	1019fec <__alt_data_end+0xff019fec>
 101a7b0:	01400184 	movi	r5,6
 101a7b4:	d9402915 	stw	r5,164(sp)
 101a7b8:	003dff06 	br	1019fb8 <__alt_data_end+0xff019fb8>
 101a7bc:	d8802104 	addi	r2,sp,132
 101a7c0:	d8800315 	stw	r2,12(sp)
 101a7c4:	d8802504 	addi	r2,sp,148
 101a7c8:	d8800215 	stw	r2,8(sp)
 101a7cc:	d8802604 	addi	r2,sp,152
 101a7d0:	d8800115 	stw	r2,4(sp)
 101a7d4:	d8802917 	ldw	r2,164(sp)
 101a7d8:	d9403617 	ldw	r5,216(sp)
 101a7dc:	d9002c17 	ldw	r4,176(sp)
 101a7e0:	d8800015 	stw	r2,0(sp)
 101a7e4:	01c000c4 	movi	r7,3
 101a7e8:	980d883a 	mov	r6,r19
 101a7ec:	da003d15 	stw	r8,244(sp)
 101a7f0:	101af3c0 	call	101af3c <_dtoa_r>
 101a7f4:	d8c02917 	ldw	r3,164(sp)
 101a7f8:	da003d17 	ldw	r8,244(sp)
 101a7fc:	1021883a 	mov	r16,r2
 101a800:	10f9883a 	add	fp,r2,r3
 101a804:	81000007 	ldb	r4,0(r16)
 101a808:	00800c04 	movi	r2,48
 101a80c:	20805e26 	beq	r4,r2,101a988 <___vfprintf_internal_r+0x2088>
 101a810:	d8c02617 	ldw	r3,152(sp)
 101a814:	e0f9883a 	add	fp,fp,r3
 101a818:	003e0a06 	br	101a044 <__alt_data_end+0xff01a044>
 101a81c:	00c00b44 	movi	r3,45
 101a820:	24e0003c 	xorhi	r19,r4,32768
 101a824:	d8c02a05 	stb	r3,168(sp)
 101a828:	003de906 	br	1019fd0 <__alt_data_end+0xff019fd0>
 101a82c:	d8c03217 	ldw	r3,200(sp)
 101a830:	00c07a0e 	bge	zero,r3,101aa1c <___vfprintf_internal_r+0x211c>
 101a834:	00800044 	movi	r2,1
 101a838:	d9003317 	ldw	r4,204(sp)
 101a83c:	1105883a 	add	r2,r2,r4
 101a840:	d8802e15 	stw	r2,184(sp)
 101a844:	10004e16 	blt	r2,zero,101a980 <___vfprintf_internal_r+0x2080>
 101a848:	044019c4 	movi	r17,103
 101a84c:	003e2106 	br	101a0d4 <__alt_data_end+0xff01a0d4>
 101a850:	d9002917 	ldw	r4,164(sp)
 101a854:	d8802104 	addi	r2,sp,132
 101a858:	d8800315 	stw	r2,12(sp)
 101a85c:	d9000015 	stw	r4,0(sp)
 101a860:	d8802504 	addi	r2,sp,148
 101a864:	d9403617 	ldw	r5,216(sp)
 101a868:	d9002c17 	ldw	r4,176(sp)
 101a86c:	d8800215 	stw	r2,8(sp)
 101a870:	d8802604 	addi	r2,sp,152
 101a874:	d8800115 	stw	r2,4(sp)
 101a878:	01c000c4 	movi	r7,3
 101a87c:	980d883a 	mov	r6,r19
 101a880:	da003d15 	stw	r8,244(sp)
 101a884:	101af3c0 	call	101af3c <_dtoa_r>
 101a888:	d8c02917 	ldw	r3,164(sp)
 101a88c:	da003d17 	ldw	r8,244(sp)
 101a890:	1021883a 	mov	r16,r2
 101a894:	00801184 	movi	r2,70
 101a898:	80f9883a 	add	fp,r16,r3
 101a89c:	88bfd926 	beq	r17,r2,101a804 <__alt_data_end+0xff01a804>
 101a8a0:	003de806 	br	101a044 <__alt_data_end+0xff01a044>
 101a8a4:	d9002917 	ldw	r4,164(sp)
 101a8a8:	00c04d0e 	bge	zero,r3,101a9e0 <___vfprintf_internal_r+0x20e0>
 101a8ac:	2000441e 	bne	r4,zero,101a9c0 <___vfprintf_internal_r+0x20c0>
 101a8b0:	9480004c 	andi	r18,r18,1
 101a8b4:	9000421e 	bne	r18,zero,101a9c0 <___vfprintf_internal_r+0x20c0>
 101a8b8:	1805883a 	mov	r2,r3
 101a8bc:	18007016 	blt	r3,zero,101aa80 <___vfprintf_internal_r+0x2180>
 101a8c0:	d8c03217 	ldw	r3,200(sp)
 101a8c4:	d8c02e15 	stw	r3,184(sp)
 101a8c8:	003e0206 	br	101a0d4 <__alt_data_end+0xff01a0d4>
 101a8cc:	df0022c4 	addi	fp,sp,139
 101a8d0:	dc002915 	stw	r16,164(sp)
 101a8d4:	4027883a 	mov	r19,r8
 101a8d8:	e021883a 	mov	r16,fp
 101a8dc:	b009883a 	mov	r4,r22
 101a8e0:	01400284 	movi	r5,10
 101a8e4:	1023c8c0 	call	1023c8c <__modsi3>
 101a8e8:	10800c04 	addi	r2,r2,48
 101a8ec:	843fffc4 	addi	r16,r16,-1
 101a8f0:	b009883a 	mov	r4,r22
 101a8f4:	01400284 	movi	r5,10
 101a8f8:	80800005 	stb	r2,0(r16)
 101a8fc:	1023c080 	call	1023c08 <__divsi3>
 101a900:	102d883a 	mov	r22,r2
 101a904:	00800244 	movi	r2,9
 101a908:	15bff416 	blt	r2,r22,101a8dc <__alt_data_end+0xff01a8dc>
 101a90c:	9811883a 	mov	r8,r19
 101a910:	b0800c04 	addi	r2,r22,48
 101a914:	8027883a 	mov	r19,r16
 101a918:	997fffc4 	addi	r5,r19,-1
 101a91c:	98bfffc5 	stb	r2,-1(r19)
 101a920:	dc002917 	ldw	r16,164(sp)
 101a924:	2f006a2e 	bgeu	r5,fp,101aad0 <___vfprintf_internal_r+0x21d0>
 101a928:	d9c02384 	addi	r7,sp,142
 101a92c:	3ccfc83a 	sub	r7,r7,r19
 101a930:	d9002344 	addi	r4,sp,141
 101a934:	e1cf883a 	add	r7,fp,r7
 101a938:	00000106 	br	101a940 <___vfprintf_internal_r+0x2040>
 101a93c:	28800003 	ldbu	r2,0(r5)
 101a940:	20800005 	stb	r2,0(r4)
 101a944:	21000044 	addi	r4,r4,1
 101a948:	29400044 	addi	r5,r5,1
 101a94c:	393ffb1e 	bne	r7,r4,101a93c <__alt_data_end+0xff01a93c>
 101a950:	d8802304 	addi	r2,sp,140
 101a954:	14c5c83a 	sub	r2,r2,r19
 101a958:	d8c02344 	addi	r3,sp,141
 101a95c:	1885883a 	add	r2,r3,r2
 101a960:	003f7006 	br	101a724 <__alt_data_end+0xff01a724>
 101a964:	0005883a 	mov	r2,zero
 101a968:	003f0f06 	br	101a5a8 <__alt_data_end+0xff01a5a8>
 101a96c:	d8c03217 	ldw	r3,200(sp)
 101a970:	18c00044 	addi	r3,r3,1
 101a974:	d8c02e15 	stw	r3,184(sp)
 101a978:	1805883a 	mov	r2,r3
 101a97c:	183fb20e 	bge	r3,zero,101a848 <__alt_data_end+0xff01a848>
 101a980:	0005883a 	mov	r2,zero
 101a984:	003fb006 	br	101a848 <__alt_data_end+0xff01a848>
 101a988:	d9003617 	ldw	r4,216(sp)
 101a98c:	000d883a 	mov	r6,zero
 101a990:	000f883a 	mov	r7,zero
 101a994:	980b883a 	mov	r5,r19
 101a998:	d8c03c15 	stw	r3,240(sp)
 101a99c:	da003d15 	stw	r8,244(sp)
 101a9a0:	1024f500 	call	1024f50 <__eqdf2>
 101a9a4:	d8c03c17 	ldw	r3,240(sp)
 101a9a8:	da003d17 	ldw	r8,244(sp)
 101a9ac:	103f9826 	beq	r2,zero,101a810 <__alt_data_end+0xff01a810>
 101a9b0:	00800044 	movi	r2,1
 101a9b4:	10c7c83a 	sub	r3,r2,r3
 101a9b8:	d8c02615 	stw	r3,152(sp)
 101a9bc:	003f9506 	br	101a814 <__alt_data_end+0xff01a814>
 101a9c0:	d9002917 	ldw	r4,164(sp)
 101a9c4:	d8c03217 	ldw	r3,200(sp)
 101a9c8:	20800044 	addi	r2,r4,1
 101a9cc:	1885883a 	add	r2,r3,r2
 101a9d0:	d8802e15 	stw	r2,184(sp)
 101a9d4:	103dbf0e 	bge	r2,zero,101a0d4 <__alt_data_end+0xff01a0d4>
 101a9d8:	0005883a 	mov	r2,zero
 101a9dc:	003dbd06 	br	101a0d4 <__alt_data_end+0xff01a0d4>
 101a9e0:	2000211e 	bne	r4,zero,101aa68 <___vfprintf_internal_r+0x2168>
 101a9e4:	9480004c 	andi	r18,r18,1
 101a9e8:	90001f1e 	bne	r18,zero,101aa68 <___vfprintf_internal_r+0x2168>
 101a9ec:	00800044 	movi	r2,1
 101a9f0:	d8802e15 	stw	r2,184(sp)
 101a9f4:	003db706 	br	101a0d4 <__alt_data_end+0xff01a0d4>
 101a9f8:	00800b44 	movi	r2,45
 101a9fc:	05adc83a 	sub	r22,zero,r22
 101aa00:	d8802305 	stb	r2,140(sp)
 101aa04:	003f3f06 	br	101a704 <__alt_data_end+0xff01a704>
 101aa08:	0005883a 	mov	r2,zero
 101aa0c:	003f5206 	br	101a758 <__alt_data_end+0xff01a758>
 101aa10:	90a4703a 	and	r18,r18,r2
 101aa14:	903f4e26 	beq	r18,zero,101a750 <__alt_data_end+0xff01a750>
 101aa18:	003f4a06 	br	101a744 <__alt_data_end+0xff01a744>
 101aa1c:	00800084 	movi	r2,2
 101aa20:	10c5c83a 	sub	r2,r2,r3
 101aa24:	003f8406 	br	101a838 <__alt_data_end+0xff01a838>
 101aa28:	d8802d17 	ldw	r2,180(sp)
 101aa2c:	d9002d17 	ldw	r4,180(sp)
 101aa30:	ac400043 	ldbu	r17,1(r21)
 101aa34:	10800017 	ldw	r2,0(r2)
 101aa38:	582b883a 	mov	r21,r11
 101aa3c:	d8802915 	stw	r2,164(sp)
 101aa40:	20800104 	addi	r2,r4,4
 101aa44:	d9002917 	ldw	r4,164(sp)
 101aa48:	d8802d15 	stw	r2,180(sp)
 101aa4c:	203e7a0e 	bge	r4,zero,101a438 <__alt_data_end+0xff01a438>
 101aa50:	8c403fcc 	andi	r17,r17,255
 101aa54:	00bfffc4 	movi	r2,-1
 101aa58:	8c40201c 	xori	r17,r17,128
 101aa5c:	d8802915 	stw	r2,164(sp)
 101aa60:	8c7fe004 	addi	r17,r17,-128
 101aa64:	00380706 	br	1018a84 <__alt_data_end+0xff018a84>
 101aa68:	d8c02917 	ldw	r3,164(sp)
 101aa6c:	18c00084 	addi	r3,r3,2
 101aa70:	d8c02e15 	stw	r3,184(sp)
 101aa74:	1805883a 	mov	r2,r3
 101aa78:	183d960e 	bge	r3,zero,101a0d4 <__alt_data_end+0xff01a0d4>
 101aa7c:	003fd606 	br	101a9d8 <__alt_data_end+0xff01a9d8>
 101aa80:	0005883a 	mov	r2,zero
 101aa84:	003f8e06 	br	101a8c0 <__alt_data_end+0xff01a8c0>
 101aa88:	9080004c 	andi	r2,r18,1
 101aa8c:	103f811e 	bne	r2,zero,101a894 <__alt_data_end+0xff01a894>
 101aa90:	d8802117 	ldw	r2,132(sp)
 101aa94:	1405c83a 	sub	r2,r2,r16
 101aa98:	d8803315 	stw	r2,204(sp)
 101aa9c:	b47ef326 	beq	r22,r17,101a66c <__alt_data_end+0xff01a66c>
 101aaa0:	dd802617 	ldw	r22,152(sp)
 101aaa4:	003f1106 	br	101a6ec <__alt_data_end+0xff01a6ec>
 101aaa8:	d9c02785 	stb	r7,158(sp)
 101aaac:	00390406 	br	1018ec0 <__alt_data_end+0xff018ec0>
 101aab0:	d9c02785 	stb	r7,158(sp)
 101aab4:	0038d306 	br	1018e04 <__alt_data_end+0xff018e04>
 101aab8:	d9c02785 	stb	r7,158(sp)
 101aabc:	003a6106 	br	1019444 <__alt_data_end+0xff019444>
 101aac0:	d9c02785 	stb	r7,158(sp)
 101aac4:	003af806 	br	10196a8 <__alt_data_end+0xff0196a8>
 101aac8:	0005883a 	mov	r2,zero
 101aacc:	003d7e06 	br	101a0c8 <__alt_data_end+0xff01a0c8>
 101aad0:	d8802344 	addi	r2,sp,141
 101aad4:	003f1306 	br	101a724 <__alt_data_end+0xff01a724>
 101aad8:	d9c02785 	stb	r7,158(sp)
 101aadc:	00392306 	br	1018f6c <__alt_data_end+0xff018f6c>
 101aae0:	d9c02785 	stb	r7,158(sp)
 101aae4:	003aa906 	br	101958c <__alt_data_end+0xff01958c>
 101aae8:	d9c02785 	stb	r7,158(sp)
 101aaec:	003a3d06 	br	10193e4 <__alt_data_end+0xff0193e4>
 101aaf0:	d9c02785 	stb	r7,158(sp)
 101aaf4:	003aca06 	br	1019620 <__alt_data_end+0xff019620>

0101aaf8 <__vfprintf_internal>:
 101aaf8:	008040f4 	movhi	r2,259
 101aafc:	10b2dc04 	addi	r2,r2,-13456
 101ab00:	300f883a 	mov	r7,r6
 101ab04:	280d883a 	mov	r6,r5
 101ab08:	200b883a 	mov	r5,r4
 101ab0c:	11000017 	ldw	r4,0(r2)
 101ab10:	10189001 	jmpi	1018900 <___vfprintf_internal_r>

0101ab14 <__sbprintf>:
 101ab14:	2880030b 	ldhu	r2,12(r5)
 101ab18:	2ac01917 	ldw	r11,100(r5)
 101ab1c:	2a80038b 	ldhu	r10,14(r5)
 101ab20:	2a400717 	ldw	r9,28(r5)
 101ab24:	2a000917 	ldw	r8,36(r5)
 101ab28:	defee204 	addi	sp,sp,-1144
 101ab2c:	00c10004 	movi	r3,1024
 101ab30:	dc011a15 	stw	r16,1128(sp)
 101ab34:	10bfff4c 	andi	r2,r2,65533
 101ab38:	2821883a 	mov	r16,r5
 101ab3c:	d8cb883a 	add	r5,sp,r3
 101ab40:	dc811c15 	stw	r18,1136(sp)
 101ab44:	dc411b15 	stw	r17,1132(sp)
 101ab48:	dfc11d15 	stw	ra,1140(sp)
 101ab4c:	2025883a 	mov	r18,r4
 101ab50:	d881030d 	sth	r2,1036(sp)
 101ab54:	dac11915 	stw	r11,1124(sp)
 101ab58:	da81038d 	sth	r10,1038(sp)
 101ab5c:	da410715 	stw	r9,1052(sp)
 101ab60:	da010915 	stw	r8,1060(sp)
 101ab64:	dec10015 	stw	sp,1024(sp)
 101ab68:	dec10415 	stw	sp,1040(sp)
 101ab6c:	d8c10215 	stw	r3,1032(sp)
 101ab70:	d8c10515 	stw	r3,1044(sp)
 101ab74:	d8010615 	stw	zero,1048(sp)
 101ab78:	10189000 	call	1018900 <___vfprintf_internal_r>
 101ab7c:	1023883a 	mov	r17,r2
 101ab80:	10000416 	blt	r2,zero,101ab94 <__sbprintf+0x80>
 101ab84:	d9410004 	addi	r5,sp,1024
 101ab88:	9009883a 	mov	r4,r18
 101ab8c:	101c7e00 	call	101c7e0 <_fflush_r>
 101ab90:	10000d1e 	bne	r2,zero,101abc8 <__sbprintf+0xb4>
 101ab94:	d881030b 	ldhu	r2,1036(sp)
 101ab98:	1080100c 	andi	r2,r2,64
 101ab9c:	10000326 	beq	r2,zero,101abac <__sbprintf+0x98>
 101aba0:	8080030b 	ldhu	r2,12(r16)
 101aba4:	10801014 	ori	r2,r2,64
 101aba8:	8080030d 	sth	r2,12(r16)
 101abac:	8805883a 	mov	r2,r17
 101abb0:	dfc11d17 	ldw	ra,1140(sp)
 101abb4:	dc811c17 	ldw	r18,1136(sp)
 101abb8:	dc411b17 	ldw	r17,1132(sp)
 101abbc:	dc011a17 	ldw	r16,1128(sp)
 101abc0:	dec11e04 	addi	sp,sp,1144
 101abc4:	f800283a 	ret
 101abc8:	047fffc4 	movi	r17,-1
 101abcc:	003ff106 	br	101ab94 <__alt_data_end+0xff01ab94>

0101abd0 <__swsetup_r>:
 101abd0:	008040f4 	movhi	r2,259
 101abd4:	defffd04 	addi	sp,sp,-12
 101abd8:	10b2dc04 	addi	r2,r2,-13456
 101abdc:	dc400115 	stw	r17,4(sp)
 101abe0:	2023883a 	mov	r17,r4
 101abe4:	11000017 	ldw	r4,0(r2)
 101abe8:	dc000015 	stw	r16,0(sp)
 101abec:	dfc00215 	stw	ra,8(sp)
 101abf0:	2821883a 	mov	r16,r5
 101abf4:	20000226 	beq	r4,zero,101ac00 <__swsetup_r+0x30>
 101abf8:	20800e17 	ldw	r2,56(r4)
 101abfc:	10003126 	beq	r2,zero,101acc4 <__swsetup_r+0xf4>
 101ac00:	8080030b 	ldhu	r2,12(r16)
 101ac04:	10c0020c 	andi	r3,r2,8
 101ac08:	1009883a 	mov	r4,r2
 101ac0c:	18000f26 	beq	r3,zero,101ac4c <__swsetup_r+0x7c>
 101ac10:	80c00417 	ldw	r3,16(r16)
 101ac14:	18001526 	beq	r3,zero,101ac6c <__swsetup_r+0x9c>
 101ac18:	1100004c 	andi	r4,r2,1
 101ac1c:	20001c1e 	bne	r4,zero,101ac90 <__swsetup_r+0xc0>
 101ac20:	1080008c 	andi	r2,r2,2
 101ac24:	1000291e 	bne	r2,zero,101accc <__swsetup_r+0xfc>
 101ac28:	80800517 	ldw	r2,20(r16)
 101ac2c:	80800215 	stw	r2,8(r16)
 101ac30:	18001c26 	beq	r3,zero,101aca4 <__swsetup_r+0xd4>
 101ac34:	0005883a 	mov	r2,zero
 101ac38:	dfc00217 	ldw	ra,8(sp)
 101ac3c:	dc400117 	ldw	r17,4(sp)
 101ac40:	dc000017 	ldw	r16,0(sp)
 101ac44:	dec00304 	addi	sp,sp,12
 101ac48:	f800283a 	ret
 101ac4c:	2080040c 	andi	r2,r4,16
 101ac50:	10002e26 	beq	r2,zero,101ad0c <__swsetup_r+0x13c>
 101ac54:	2080010c 	andi	r2,r4,4
 101ac58:	10001e1e 	bne	r2,zero,101acd4 <__swsetup_r+0x104>
 101ac5c:	80c00417 	ldw	r3,16(r16)
 101ac60:	20800214 	ori	r2,r4,8
 101ac64:	8080030d 	sth	r2,12(r16)
 101ac68:	183feb1e 	bne	r3,zero,101ac18 <__alt_data_end+0xff01ac18>
 101ac6c:	1100a00c 	andi	r4,r2,640
 101ac70:	01408004 	movi	r5,512
 101ac74:	217fe826 	beq	r4,r5,101ac18 <__alt_data_end+0xff01ac18>
 101ac78:	800b883a 	mov	r5,r16
 101ac7c:	8809883a 	mov	r4,r17
 101ac80:	101d7600 	call	101d760 <__smakebuf_r>
 101ac84:	8080030b 	ldhu	r2,12(r16)
 101ac88:	80c00417 	ldw	r3,16(r16)
 101ac8c:	003fe206 	br	101ac18 <__alt_data_end+0xff01ac18>
 101ac90:	80800517 	ldw	r2,20(r16)
 101ac94:	80000215 	stw	zero,8(r16)
 101ac98:	0085c83a 	sub	r2,zero,r2
 101ac9c:	80800615 	stw	r2,24(r16)
 101aca0:	183fe41e 	bne	r3,zero,101ac34 <__alt_data_end+0xff01ac34>
 101aca4:	80c0030b 	ldhu	r3,12(r16)
 101aca8:	0005883a 	mov	r2,zero
 101acac:	1900200c 	andi	r4,r3,128
 101acb0:	203fe126 	beq	r4,zero,101ac38 <__alt_data_end+0xff01ac38>
 101acb4:	18c01014 	ori	r3,r3,64
 101acb8:	80c0030d 	sth	r3,12(r16)
 101acbc:	00bfffc4 	movi	r2,-1
 101acc0:	003fdd06 	br	101ac38 <__alt_data_end+0xff01ac38>
 101acc4:	101cbbc0 	call	101cbbc <__sinit>
 101acc8:	003fcd06 	br	101ac00 <__alt_data_end+0xff01ac00>
 101accc:	0005883a 	mov	r2,zero
 101acd0:	003fd606 	br	101ac2c <__alt_data_end+0xff01ac2c>
 101acd4:	81400c17 	ldw	r5,48(r16)
 101acd8:	28000626 	beq	r5,zero,101acf4 <__swsetup_r+0x124>
 101acdc:	80801004 	addi	r2,r16,64
 101ace0:	28800326 	beq	r5,r2,101acf0 <__swsetup_r+0x120>
 101ace4:	8809883a 	mov	r4,r17
 101ace8:	101cd300 	call	101cd30 <_free_r>
 101acec:	8100030b 	ldhu	r4,12(r16)
 101acf0:	80000c15 	stw	zero,48(r16)
 101acf4:	80c00417 	ldw	r3,16(r16)
 101acf8:	00bff6c4 	movi	r2,-37
 101acfc:	1108703a 	and	r4,r2,r4
 101ad00:	80000115 	stw	zero,4(r16)
 101ad04:	80c00015 	stw	r3,0(r16)
 101ad08:	003fd506 	br	101ac60 <__alt_data_end+0xff01ac60>
 101ad0c:	00800244 	movi	r2,9
 101ad10:	88800015 	stw	r2,0(r17)
 101ad14:	20801014 	ori	r2,r4,64
 101ad18:	8080030d 	sth	r2,12(r16)
 101ad1c:	00bfffc4 	movi	r2,-1
 101ad20:	003fc506 	br	101ac38 <__alt_data_end+0xff01ac38>

0101ad24 <abort>:
 101ad24:	deffff04 	addi	sp,sp,-4
 101ad28:	01000184 	movi	r4,6
 101ad2c:	dfc00015 	stw	ra,0(sp)
 101ad30:	101fbe40 	call	101fbe4 <raise>
 101ad34:	01000044 	movi	r4,1
 101ad38:	102661c0 	call	102661c <_exit>

0101ad3c <quorem>:
 101ad3c:	defff704 	addi	sp,sp,-36
 101ad40:	dc800215 	stw	r18,8(sp)
 101ad44:	20800417 	ldw	r2,16(r4)
 101ad48:	2c800417 	ldw	r18,16(r5)
 101ad4c:	dfc00815 	stw	ra,32(sp)
 101ad50:	ddc00715 	stw	r23,28(sp)
 101ad54:	dd800615 	stw	r22,24(sp)
 101ad58:	dd400515 	stw	r21,20(sp)
 101ad5c:	dd000415 	stw	r20,16(sp)
 101ad60:	dcc00315 	stw	r19,12(sp)
 101ad64:	dc400115 	stw	r17,4(sp)
 101ad68:	dc000015 	stw	r16,0(sp)
 101ad6c:	14807116 	blt	r2,r18,101af34 <quorem+0x1f8>
 101ad70:	94bfffc4 	addi	r18,r18,-1
 101ad74:	94ad883a 	add	r22,r18,r18
 101ad78:	b5ad883a 	add	r22,r22,r22
 101ad7c:	2c400504 	addi	r17,r5,20
 101ad80:	8da9883a 	add	r20,r17,r22
 101ad84:	25400504 	addi	r21,r4,20
 101ad88:	282f883a 	mov	r23,r5
 101ad8c:	adad883a 	add	r22,r21,r22
 101ad90:	a1400017 	ldw	r5,0(r20)
 101ad94:	2021883a 	mov	r16,r4
 101ad98:	b1000017 	ldw	r4,0(r22)
 101ad9c:	29400044 	addi	r5,r5,1
 101ada0:	1023d000 	call	1023d00 <__udivsi3>
 101ada4:	1027883a 	mov	r19,r2
 101ada8:	10002c26 	beq	r2,zero,101ae5c <quorem+0x120>
 101adac:	a813883a 	mov	r9,r21
 101adb0:	880b883a 	mov	r5,r17
 101adb4:	0009883a 	mov	r4,zero
 101adb8:	000d883a 	mov	r6,zero
 101adbc:	2a000017 	ldw	r8,0(r5)
 101adc0:	49c00017 	ldw	r7,0(r9)
 101adc4:	29400104 	addi	r5,r5,4
 101adc8:	40bfffcc 	andi	r2,r8,65535
 101adcc:	14c5383a 	mul	r2,r2,r19
 101add0:	4010d43a 	srli	r8,r8,16
 101add4:	38ffffcc 	andi	r3,r7,65535
 101add8:	1105883a 	add	r2,r2,r4
 101addc:	1008d43a 	srli	r4,r2,16
 101ade0:	44d1383a 	mul	r8,r8,r19
 101ade4:	198d883a 	add	r6,r3,r6
 101ade8:	10ffffcc 	andi	r3,r2,65535
 101adec:	30c7c83a 	sub	r3,r6,r3
 101adf0:	380ed43a 	srli	r7,r7,16
 101adf4:	4105883a 	add	r2,r8,r4
 101adf8:	180dd43a 	srai	r6,r3,16
 101adfc:	113fffcc 	andi	r4,r2,65535
 101ae00:	390fc83a 	sub	r7,r7,r4
 101ae04:	398d883a 	add	r6,r7,r6
 101ae08:	300e943a 	slli	r7,r6,16
 101ae0c:	18ffffcc 	andi	r3,r3,65535
 101ae10:	1008d43a 	srli	r4,r2,16
 101ae14:	38ceb03a 	or	r7,r7,r3
 101ae18:	49c00015 	stw	r7,0(r9)
 101ae1c:	300dd43a 	srai	r6,r6,16
 101ae20:	4a400104 	addi	r9,r9,4
 101ae24:	a17fe52e 	bgeu	r20,r5,101adbc <__alt_data_end+0xff01adbc>
 101ae28:	b0800017 	ldw	r2,0(r22)
 101ae2c:	10000b1e 	bne	r2,zero,101ae5c <quorem+0x120>
 101ae30:	b0bfff04 	addi	r2,r22,-4
 101ae34:	a880082e 	bgeu	r21,r2,101ae58 <quorem+0x11c>
 101ae38:	b0ffff17 	ldw	r3,-4(r22)
 101ae3c:	18000326 	beq	r3,zero,101ae4c <quorem+0x110>
 101ae40:	00000506 	br	101ae58 <quorem+0x11c>
 101ae44:	10c00017 	ldw	r3,0(r2)
 101ae48:	1800031e 	bne	r3,zero,101ae58 <quorem+0x11c>
 101ae4c:	10bfff04 	addi	r2,r2,-4
 101ae50:	94bfffc4 	addi	r18,r18,-1
 101ae54:	a8bffb36 	bltu	r21,r2,101ae44 <__alt_data_end+0xff01ae44>
 101ae58:	84800415 	stw	r18,16(r16)
 101ae5c:	b80b883a 	mov	r5,r23
 101ae60:	8009883a 	mov	r4,r16
 101ae64:	101ec300 	call	101ec30 <__mcmp>
 101ae68:	10002616 	blt	r2,zero,101af04 <quorem+0x1c8>
 101ae6c:	9cc00044 	addi	r19,r19,1
 101ae70:	a805883a 	mov	r2,r21
 101ae74:	000b883a 	mov	r5,zero
 101ae78:	11000017 	ldw	r4,0(r2)
 101ae7c:	89800017 	ldw	r6,0(r17)
 101ae80:	10800104 	addi	r2,r2,4
 101ae84:	20ffffcc 	andi	r3,r4,65535
 101ae88:	194b883a 	add	r5,r3,r5
 101ae8c:	30ffffcc 	andi	r3,r6,65535
 101ae90:	28c7c83a 	sub	r3,r5,r3
 101ae94:	300cd43a 	srli	r6,r6,16
 101ae98:	2008d43a 	srli	r4,r4,16
 101ae9c:	180bd43a 	srai	r5,r3,16
 101aea0:	18ffffcc 	andi	r3,r3,65535
 101aea4:	2189c83a 	sub	r4,r4,r6
 101aea8:	2149883a 	add	r4,r4,r5
 101aeac:	200c943a 	slli	r6,r4,16
 101aeb0:	8c400104 	addi	r17,r17,4
 101aeb4:	200bd43a 	srai	r5,r4,16
 101aeb8:	30c6b03a 	or	r3,r6,r3
 101aebc:	10ffff15 	stw	r3,-4(r2)
 101aec0:	a47fed2e 	bgeu	r20,r17,101ae78 <__alt_data_end+0xff01ae78>
 101aec4:	9485883a 	add	r2,r18,r18
 101aec8:	1085883a 	add	r2,r2,r2
 101aecc:	a887883a 	add	r3,r21,r2
 101aed0:	18800017 	ldw	r2,0(r3)
 101aed4:	10000b1e 	bne	r2,zero,101af04 <quorem+0x1c8>
 101aed8:	18bfff04 	addi	r2,r3,-4
 101aedc:	a880082e 	bgeu	r21,r2,101af00 <quorem+0x1c4>
 101aee0:	18ffff17 	ldw	r3,-4(r3)
 101aee4:	18000326 	beq	r3,zero,101aef4 <quorem+0x1b8>
 101aee8:	00000506 	br	101af00 <quorem+0x1c4>
 101aeec:	10c00017 	ldw	r3,0(r2)
 101aef0:	1800031e 	bne	r3,zero,101af00 <quorem+0x1c4>
 101aef4:	10bfff04 	addi	r2,r2,-4
 101aef8:	94bfffc4 	addi	r18,r18,-1
 101aefc:	a8bffb36 	bltu	r21,r2,101aeec <__alt_data_end+0xff01aeec>
 101af00:	84800415 	stw	r18,16(r16)
 101af04:	9805883a 	mov	r2,r19
 101af08:	dfc00817 	ldw	ra,32(sp)
 101af0c:	ddc00717 	ldw	r23,28(sp)
 101af10:	dd800617 	ldw	r22,24(sp)
 101af14:	dd400517 	ldw	r21,20(sp)
 101af18:	dd000417 	ldw	r20,16(sp)
 101af1c:	dcc00317 	ldw	r19,12(sp)
 101af20:	dc800217 	ldw	r18,8(sp)
 101af24:	dc400117 	ldw	r17,4(sp)
 101af28:	dc000017 	ldw	r16,0(sp)
 101af2c:	dec00904 	addi	sp,sp,36
 101af30:	f800283a 	ret
 101af34:	0005883a 	mov	r2,zero
 101af38:	003ff306 	br	101af08 <__alt_data_end+0xff01af08>

0101af3c <_dtoa_r>:
 101af3c:	20801017 	ldw	r2,64(r4)
 101af40:	deffde04 	addi	sp,sp,-136
 101af44:	df002015 	stw	fp,128(sp)
 101af48:	dcc01b15 	stw	r19,108(sp)
 101af4c:	dc801a15 	stw	r18,104(sp)
 101af50:	dc401915 	stw	r17,100(sp)
 101af54:	dc001815 	stw	r16,96(sp)
 101af58:	dfc02115 	stw	ra,132(sp)
 101af5c:	ddc01f15 	stw	r23,124(sp)
 101af60:	dd801e15 	stw	r22,120(sp)
 101af64:	dd401d15 	stw	r21,116(sp)
 101af68:	dd001c15 	stw	r20,112(sp)
 101af6c:	d9c00315 	stw	r7,12(sp)
 101af70:	2039883a 	mov	fp,r4
 101af74:	3023883a 	mov	r17,r6
 101af78:	2825883a 	mov	r18,r5
 101af7c:	dc002417 	ldw	r16,144(sp)
 101af80:	3027883a 	mov	r19,r6
 101af84:	10000826 	beq	r2,zero,101afa8 <_dtoa_r+0x6c>
 101af88:	21801117 	ldw	r6,68(r4)
 101af8c:	00c00044 	movi	r3,1
 101af90:	100b883a 	mov	r5,r2
 101af94:	1986983a 	sll	r3,r3,r6
 101af98:	11800115 	stw	r6,4(r2)
 101af9c:	10c00215 	stw	r3,8(r2)
 101afa0:	101e4100 	call	101e410 <_Bfree>
 101afa4:	e0001015 	stw	zero,64(fp)
 101afa8:	88002e16 	blt	r17,zero,101b064 <_dtoa_r+0x128>
 101afac:	80000015 	stw	zero,0(r16)
 101afb0:	889ffc2c 	andhi	r2,r17,32752
 101afb4:	00dffc34 	movhi	r3,32752
 101afb8:	10c01c26 	beq	r2,r3,101b02c <_dtoa_r+0xf0>
 101afbc:	000d883a 	mov	r6,zero
 101afc0:	000f883a 	mov	r7,zero
 101afc4:	9009883a 	mov	r4,r18
 101afc8:	980b883a 	mov	r5,r19
 101afcc:	1024f500 	call	1024f50 <__eqdf2>
 101afd0:	10002b1e 	bne	r2,zero,101b080 <_dtoa_r+0x144>
 101afd4:	d9c02317 	ldw	r7,140(sp)
 101afd8:	00800044 	movi	r2,1
 101afdc:	38800015 	stw	r2,0(r7)
 101afe0:	d8802517 	ldw	r2,148(sp)
 101afe4:	10019e26 	beq	r2,zero,101b660 <_dtoa_r+0x724>
 101afe8:	d8c02517 	ldw	r3,148(sp)
 101afec:	008040f4 	movhi	r2,259
 101aff0:	10ab0b44 	addi	r2,r2,-21459
 101aff4:	18800015 	stw	r2,0(r3)
 101aff8:	10bfffc4 	addi	r2,r2,-1
 101affc:	dfc02117 	ldw	ra,132(sp)
 101b000:	df002017 	ldw	fp,128(sp)
 101b004:	ddc01f17 	ldw	r23,124(sp)
 101b008:	dd801e17 	ldw	r22,120(sp)
 101b00c:	dd401d17 	ldw	r21,116(sp)
 101b010:	dd001c17 	ldw	r20,112(sp)
 101b014:	dcc01b17 	ldw	r19,108(sp)
 101b018:	dc801a17 	ldw	r18,104(sp)
 101b01c:	dc401917 	ldw	r17,100(sp)
 101b020:	dc001817 	ldw	r16,96(sp)
 101b024:	dec02204 	addi	sp,sp,136
 101b028:	f800283a 	ret
 101b02c:	d8c02317 	ldw	r3,140(sp)
 101b030:	0089c3c4 	movi	r2,9999
 101b034:	18800015 	stw	r2,0(r3)
 101b038:	90017726 	beq	r18,zero,101b618 <_dtoa_r+0x6dc>
 101b03c:	008040f4 	movhi	r2,259
 101b040:	10ab1f04 	addi	r2,r2,-21380
 101b044:	d9002517 	ldw	r4,148(sp)
 101b048:	203fec26 	beq	r4,zero,101affc <__alt_data_end+0xff01affc>
 101b04c:	10c000c7 	ldb	r3,3(r2)
 101b050:	1801781e 	bne	r3,zero,101b634 <_dtoa_r+0x6f8>
 101b054:	10c000c4 	addi	r3,r2,3
 101b058:	d9802517 	ldw	r6,148(sp)
 101b05c:	30c00015 	stw	r3,0(r6)
 101b060:	003fe606 	br	101affc <__alt_data_end+0xff01affc>
 101b064:	04e00034 	movhi	r19,32768
 101b068:	9cffffc4 	addi	r19,r19,-1
 101b06c:	00800044 	movi	r2,1
 101b070:	8ce6703a 	and	r19,r17,r19
 101b074:	80800015 	stw	r2,0(r16)
 101b078:	9823883a 	mov	r17,r19
 101b07c:	003fcc06 	br	101afb0 <__alt_data_end+0xff01afb0>
 101b080:	d8800204 	addi	r2,sp,8
 101b084:	d8800015 	stw	r2,0(sp)
 101b088:	d9c00104 	addi	r7,sp,4
 101b08c:	900b883a 	mov	r5,r18
 101b090:	980d883a 	mov	r6,r19
 101b094:	e009883a 	mov	r4,fp
 101b098:	8820d53a 	srli	r16,r17,20
 101b09c:	101effc0 	call	101effc <__d2b>
 101b0a0:	d8800915 	stw	r2,36(sp)
 101b0a4:	8001651e 	bne	r16,zero,101b63c <_dtoa_r+0x700>
 101b0a8:	dd800217 	ldw	r22,8(sp)
 101b0ac:	dc000117 	ldw	r16,4(sp)
 101b0b0:	00800804 	movi	r2,32
 101b0b4:	b421883a 	add	r16,r22,r16
 101b0b8:	80c10c84 	addi	r3,r16,1074
 101b0bc:	10c2d10e 	bge	r2,r3,101bc04 <_dtoa_r+0xcc8>
 101b0c0:	00801004 	movi	r2,64
 101b0c4:	81010484 	addi	r4,r16,1042
 101b0c8:	10c7c83a 	sub	r3,r2,r3
 101b0cc:	9108d83a 	srl	r4,r18,r4
 101b0d0:	88e2983a 	sll	r17,r17,r3
 101b0d4:	2448b03a 	or	r4,r4,r17
 101b0d8:	10263180 	call	1026318 <__floatunsidf>
 101b0dc:	017f8434 	movhi	r5,65040
 101b0e0:	01800044 	movi	r6,1
 101b0e4:	1009883a 	mov	r4,r2
 101b0e8:	194b883a 	add	r5,r3,r5
 101b0ec:	843fffc4 	addi	r16,r16,-1
 101b0f0:	d9801115 	stw	r6,68(sp)
 101b0f4:	000d883a 	mov	r6,zero
 101b0f8:	01cffe34 	movhi	r7,16376
 101b0fc:	10258c00 	call	10258c0 <__subdf3>
 101b100:	0198dbf4 	movhi	r6,25455
 101b104:	01cff4f4 	movhi	r7,16339
 101b108:	3190d844 	addi	r6,r6,17249
 101b10c:	39e1e9c4 	addi	r7,r7,-30809
 101b110:	1009883a 	mov	r4,r2
 101b114:	180b883a 	mov	r5,r3
 101b118:	10251a80 	call	10251a8 <__muldf3>
 101b11c:	01a2d874 	movhi	r6,35681
 101b120:	01cff1f4 	movhi	r7,16327
 101b124:	31b22cc4 	addi	r6,r6,-14157
 101b128:	39e28a04 	addi	r7,r7,-30168
 101b12c:	180b883a 	mov	r5,r3
 101b130:	1009883a 	mov	r4,r2
 101b134:	1023dbc0 	call	1023dbc <__adddf3>
 101b138:	8009883a 	mov	r4,r16
 101b13c:	1029883a 	mov	r20,r2
 101b140:	1823883a 	mov	r17,r3
 101b144:	102623c0 	call	102623c <__floatsidf>
 101b148:	019427f4 	movhi	r6,20639
 101b14c:	01cff4f4 	movhi	r7,16339
 101b150:	319e7ec4 	addi	r6,r6,31227
 101b154:	39d104c4 	addi	r7,r7,17427
 101b158:	1009883a 	mov	r4,r2
 101b15c:	180b883a 	mov	r5,r3
 101b160:	10251a80 	call	10251a8 <__muldf3>
 101b164:	100d883a 	mov	r6,r2
 101b168:	180f883a 	mov	r7,r3
 101b16c:	a009883a 	mov	r4,r20
 101b170:	880b883a 	mov	r5,r17
 101b174:	1023dbc0 	call	1023dbc <__adddf3>
 101b178:	1009883a 	mov	r4,r2
 101b17c:	180b883a 	mov	r5,r3
 101b180:	1029883a 	mov	r20,r2
 101b184:	1823883a 	mov	r17,r3
 101b188:	10261bc0 	call	10261bc <__fixdfsi>
 101b18c:	000d883a 	mov	r6,zero
 101b190:	000f883a 	mov	r7,zero
 101b194:	a009883a 	mov	r4,r20
 101b198:	880b883a 	mov	r5,r17
 101b19c:	d8800515 	stw	r2,20(sp)
 101b1a0:	10250b40 	call	10250b4 <__ledf2>
 101b1a4:	10028716 	blt	r2,zero,101bbc4 <_dtoa_r+0xc88>
 101b1a8:	d8c00517 	ldw	r3,20(sp)
 101b1ac:	00800584 	movi	r2,22
 101b1b0:	10c27536 	bltu	r2,r3,101bb88 <_dtoa_r+0xc4c>
 101b1b4:	180490fa 	slli	r2,r3,3
 101b1b8:	00c040f4 	movhi	r3,259
 101b1bc:	18eb3a04 	addi	r3,r3,-21272
 101b1c0:	1885883a 	add	r2,r3,r2
 101b1c4:	11000017 	ldw	r4,0(r2)
 101b1c8:	11400117 	ldw	r5,4(r2)
 101b1cc:	900d883a 	mov	r6,r18
 101b1d0:	980f883a 	mov	r7,r19
 101b1d4:	1024fd80 	call	1024fd8 <__gedf2>
 101b1d8:	00828d0e 	bge	zero,r2,101bc10 <_dtoa_r+0xcd4>
 101b1dc:	d9000517 	ldw	r4,20(sp)
 101b1e0:	d8000e15 	stw	zero,56(sp)
 101b1e4:	213fffc4 	addi	r4,r4,-1
 101b1e8:	d9000515 	stw	r4,20(sp)
 101b1ec:	b42dc83a 	sub	r22,r22,r16
 101b1f0:	b5bfffc4 	addi	r22,r22,-1
 101b1f4:	b0026f16 	blt	r22,zero,101bbb4 <_dtoa_r+0xc78>
 101b1f8:	d8000815 	stw	zero,32(sp)
 101b1fc:	d9c00517 	ldw	r7,20(sp)
 101b200:	38026416 	blt	r7,zero,101bb94 <_dtoa_r+0xc58>
 101b204:	b1ed883a 	add	r22,r22,r7
 101b208:	d9c00d15 	stw	r7,52(sp)
 101b20c:	d8000a15 	stw	zero,40(sp)
 101b210:	d9800317 	ldw	r6,12(sp)
 101b214:	00800244 	movi	r2,9
 101b218:	11811436 	bltu	r2,r6,101b66c <_dtoa_r+0x730>
 101b21c:	00800144 	movi	r2,5
 101b220:	1184e10e 	bge	r2,r6,101c5a8 <_dtoa_r+0x166c>
 101b224:	31bfff04 	addi	r6,r6,-4
 101b228:	d9800315 	stw	r6,12(sp)
 101b22c:	0023883a 	mov	r17,zero
 101b230:	d9800317 	ldw	r6,12(sp)
 101b234:	008000c4 	movi	r2,3
 101b238:	30836726 	beq	r6,r2,101bfd8 <_dtoa_r+0x109c>
 101b23c:	1183410e 	bge	r2,r6,101bf44 <_dtoa_r+0x1008>
 101b240:	d9c00317 	ldw	r7,12(sp)
 101b244:	00800104 	movi	r2,4
 101b248:	38827c26 	beq	r7,r2,101bc3c <_dtoa_r+0xd00>
 101b24c:	00800144 	movi	r2,5
 101b250:	3884c41e 	bne	r7,r2,101c564 <_dtoa_r+0x1628>
 101b254:	00800044 	movi	r2,1
 101b258:	d8800b15 	stw	r2,44(sp)
 101b25c:	d8c00517 	ldw	r3,20(sp)
 101b260:	d9002217 	ldw	r4,136(sp)
 101b264:	1907883a 	add	r3,r3,r4
 101b268:	19800044 	addi	r6,r3,1
 101b26c:	d8c00c15 	stw	r3,48(sp)
 101b270:	d9800615 	stw	r6,24(sp)
 101b274:	0183a40e 	bge	zero,r6,101c108 <_dtoa_r+0x11cc>
 101b278:	d9800617 	ldw	r6,24(sp)
 101b27c:	3021883a 	mov	r16,r6
 101b280:	e0001115 	stw	zero,68(fp)
 101b284:	008005c4 	movi	r2,23
 101b288:	1184c92e 	bgeu	r2,r6,101c5b0 <_dtoa_r+0x1674>
 101b28c:	00c00044 	movi	r3,1
 101b290:	00800104 	movi	r2,4
 101b294:	1085883a 	add	r2,r2,r2
 101b298:	11000504 	addi	r4,r2,20
 101b29c:	180b883a 	mov	r5,r3
 101b2a0:	18c00044 	addi	r3,r3,1
 101b2a4:	313ffb2e 	bgeu	r6,r4,101b294 <__alt_data_end+0xff01b294>
 101b2a8:	e1401115 	stw	r5,68(fp)
 101b2ac:	e009883a 	mov	r4,fp
 101b2b0:	101e3680 	call	101e368 <_Balloc>
 101b2b4:	d8800715 	stw	r2,28(sp)
 101b2b8:	e0801015 	stw	r2,64(fp)
 101b2bc:	00800384 	movi	r2,14
 101b2c0:	1400f736 	bltu	r2,r16,101b6a0 <_dtoa_r+0x764>
 101b2c4:	8800f626 	beq	r17,zero,101b6a0 <_dtoa_r+0x764>
 101b2c8:	d9c00517 	ldw	r7,20(sp)
 101b2cc:	01c39a0e 	bge	zero,r7,101c138 <_dtoa_r+0x11fc>
 101b2d0:	388003cc 	andi	r2,r7,15
 101b2d4:	100490fa 	slli	r2,r2,3
 101b2d8:	382bd13a 	srai	r21,r7,4
 101b2dc:	00c040f4 	movhi	r3,259
 101b2e0:	18eb3a04 	addi	r3,r3,-21272
 101b2e4:	1885883a 	add	r2,r3,r2
 101b2e8:	a8c0040c 	andi	r3,r21,16
 101b2ec:	12400017 	ldw	r9,0(r2)
 101b2f0:	12000117 	ldw	r8,4(r2)
 101b2f4:	18037926 	beq	r3,zero,101c0dc <_dtoa_r+0x11a0>
 101b2f8:	008040f4 	movhi	r2,259
 101b2fc:	10ab3004 	addi	r2,r2,-21312
 101b300:	11800817 	ldw	r6,32(r2)
 101b304:	11c00917 	ldw	r7,36(r2)
 101b308:	9009883a 	mov	r4,r18
 101b30c:	980b883a 	mov	r5,r19
 101b310:	da001715 	stw	r8,92(sp)
 101b314:	da401615 	stw	r9,88(sp)
 101b318:	10246680 	call	1024668 <__divdf3>
 101b31c:	da001717 	ldw	r8,92(sp)
 101b320:	da401617 	ldw	r9,88(sp)
 101b324:	ad4003cc 	andi	r21,r21,15
 101b328:	040000c4 	movi	r16,3
 101b32c:	1023883a 	mov	r17,r2
 101b330:	1829883a 	mov	r20,r3
 101b334:	a8001126 	beq	r21,zero,101b37c <_dtoa_r+0x440>
 101b338:	05c040f4 	movhi	r23,259
 101b33c:	bdeb3004 	addi	r23,r23,-21312
 101b340:	4805883a 	mov	r2,r9
 101b344:	4007883a 	mov	r3,r8
 101b348:	a980004c 	andi	r6,r21,1
 101b34c:	1009883a 	mov	r4,r2
 101b350:	a82bd07a 	srai	r21,r21,1
 101b354:	180b883a 	mov	r5,r3
 101b358:	30000426 	beq	r6,zero,101b36c <_dtoa_r+0x430>
 101b35c:	b9800017 	ldw	r6,0(r23)
 101b360:	b9c00117 	ldw	r7,4(r23)
 101b364:	84000044 	addi	r16,r16,1
 101b368:	10251a80 	call	10251a8 <__muldf3>
 101b36c:	bdc00204 	addi	r23,r23,8
 101b370:	a83ff51e 	bne	r21,zero,101b348 <__alt_data_end+0xff01b348>
 101b374:	1013883a 	mov	r9,r2
 101b378:	1811883a 	mov	r8,r3
 101b37c:	480d883a 	mov	r6,r9
 101b380:	400f883a 	mov	r7,r8
 101b384:	8809883a 	mov	r4,r17
 101b388:	a00b883a 	mov	r5,r20
 101b38c:	10246680 	call	1024668 <__divdf3>
 101b390:	d8800f15 	stw	r2,60(sp)
 101b394:	d8c01015 	stw	r3,64(sp)
 101b398:	d8c00e17 	ldw	r3,56(sp)
 101b39c:	18000626 	beq	r3,zero,101b3b8 <_dtoa_r+0x47c>
 101b3a0:	d9000f17 	ldw	r4,60(sp)
 101b3a4:	d9401017 	ldw	r5,64(sp)
 101b3a8:	000d883a 	mov	r6,zero
 101b3ac:	01cffc34 	movhi	r7,16368
 101b3b0:	10250b40 	call	10250b4 <__ledf2>
 101b3b4:	10040b16 	blt	r2,zero,101c3e4 <_dtoa_r+0x14a8>
 101b3b8:	8009883a 	mov	r4,r16
 101b3bc:	102623c0 	call	102623c <__floatsidf>
 101b3c0:	d9800f17 	ldw	r6,60(sp)
 101b3c4:	d9c01017 	ldw	r7,64(sp)
 101b3c8:	1009883a 	mov	r4,r2
 101b3cc:	180b883a 	mov	r5,r3
 101b3d0:	10251a80 	call	10251a8 <__muldf3>
 101b3d4:	000d883a 	mov	r6,zero
 101b3d8:	01d00734 	movhi	r7,16412
 101b3dc:	1009883a 	mov	r4,r2
 101b3e0:	180b883a 	mov	r5,r3
 101b3e4:	1023dbc0 	call	1023dbc <__adddf3>
 101b3e8:	1021883a 	mov	r16,r2
 101b3ec:	d8800617 	ldw	r2,24(sp)
 101b3f0:	047f3034 	movhi	r17,64704
 101b3f4:	1c63883a 	add	r17,r3,r17
 101b3f8:	10031826 	beq	r2,zero,101c05c <_dtoa_r+0x1120>
 101b3fc:	d8c00517 	ldw	r3,20(sp)
 101b400:	db000617 	ldw	r12,24(sp)
 101b404:	d8c01315 	stw	r3,76(sp)
 101b408:	d9000b17 	ldw	r4,44(sp)
 101b40c:	20038f26 	beq	r4,zero,101c24c <_dtoa_r+0x1310>
 101b410:	60bfffc4 	addi	r2,r12,-1
 101b414:	100490fa 	slli	r2,r2,3
 101b418:	00c040f4 	movhi	r3,259
 101b41c:	18eb3a04 	addi	r3,r3,-21272
 101b420:	1885883a 	add	r2,r3,r2
 101b424:	11800017 	ldw	r6,0(r2)
 101b428:	11c00117 	ldw	r7,4(r2)
 101b42c:	d8800717 	ldw	r2,28(sp)
 101b430:	0009883a 	mov	r4,zero
 101b434:	014ff834 	movhi	r5,16352
 101b438:	db001615 	stw	r12,88(sp)
 101b43c:	15c00044 	addi	r23,r2,1
 101b440:	10246680 	call	1024668 <__divdf3>
 101b444:	800d883a 	mov	r6,r16
 101b448:	880f883a 	mov	r7,r17
 101b44c:	1009883a 	mov	r4,r2
 101b450:	180b883a 	mov	r5,r3
 101b454:	10258c00 	call	10258c0 <__subdf3>
 101b458:	d9401017 	ldw	r5,64(sp)
 101b45c:	d9000f17 	ldw	r4,60(sp)
 101b460:	102b883a 	mov	r21,r2
 101b464:	d8c01215 	stw	r3,72(sp)
 101b468:	10261bc0 	call	10261bc <__fixdfsi>
 101b46c:	1009883a 	mov	r4,r2
 101b470:	1029883a 	mov	r20,r2
 101b474:	102623c0 	call	102623c <__floatsidf>
 101b478:	d9000f17 	ldw	r4,60(sp)
 101b47c:	d9401017 	ldw	r5,64(sp)
 101b480:	100d883a 	mov	r6,r2
 101b484:	180f883a 	mov	r7,r3
 101b488:	10258c00 	call	10258c0 <__subdf3>
 101b48c:	1823883a 	mov	r17,r3
 101b490:	d8c00717 	ldw	r3,28(sp)
 101b494:	d9401217 	ldw	r5,72(sp)
 101b498:	a2000c04 	addi	r8,r20,48
 101b49c:	1021883a 	mov	r16,r2
 101b4a0:	1a000005 	stb	r8,0(r3)
 101b4a4:	800d883a 	mov	r6,r16
 101b4a8:	880f883a 	mov	r7,r17
 101b4ac:	a809883a 	mov	r4,r21
 101b4b0:	4029883a 	mov	r20,r8
 101b4b4:	1024fd80 	call	1024fd8 <__gedf2>
 101b4b8:	00841d16 	blt	zero,r2,101c530 <_dtoa_r+0x15f4>
 101b4bc:	800d883a 	mov	r6,r16
 101b4c0:	880f883a 	mov	r7,r17
 101b4c4:	0009883a 	mov	r4,zero
 101b4c8:	014ffc34 	movhi	r5,16368
 101b4cc:	10258c00 	call	10258c0 <__subdf3>
 101b4d0:	d9401217 	ldw	r5,72(sp)
 101b4d4:	100d883a 	mov	r6,r2
 101b4d8:	180f883a 	mov	r7,r3
 101b4dc:	a809883a 	mov	r4,r21
 101b4e0:	1024fd80 	call	1024fd8 <__gedf2>
 101b4e4:	db001617 	ldw	r12,88(sp)
 101b4e8:	00840e16 	blt	zero,r2,101c524 <_dtoa_r+0x15e8>
 101b4ec:	00800044 	movi	r2,1
 101b4f0:	13006b0e 	bge	r2,r12,101b6a0 <_dtoa_r+0x764>
 101b4f4:	d9000717 	ldw	r4,28(sp)
 101b4f8:	dd800f15 	stw	r22,60(sp)
 101b4fc:	dcc01015 	stw	r19,64(sp)
 101b500:	2319883a 	add	r12,r4,r12
 101b504:	dcc01217 	ldw	r19,72(sp)
 101b508:	602d883a 	mov	r22,r12
 101b50c:	dc801215 	stw	r18,72(sp)
 101b510:	b825883a 	mov	r18,r23
 101b514:	00000906 	br	101b53c <_dtoa_r+0x600>
 101b518:	10258c00 	call	10258c0 <__subdf3>
 101b51c:	a80d883a 	mov	r6,r21
 101b520:	980f883a 	mov	r7,r19
 101b524:	1009883a 	mov	r4,r2
 101b528:	180b883a 	mov	r5,r3
 101b52c:	10250b40 	call	10250b4 <__ledf2>
 101b530:	1003e816 	blt	r2,zero,101c4d4 <_dtoa_r+0x1598>
 101b534:	b825883a 	mov	r18,r23
 101b538:	bd83e926 	beq	r23,r22,101c4e0 <_dtoa_r+0x15a4>
 101b53c:	a809883a 	mov	r4,r21
 101b540:	980b883a 	mov	r5,r19
 101b544:	000d883a 	mov	r6,zero
 101b548:	01d00934 	movhi	r7,16420
 101b54c:	10251a80 	call	10251a8 <__muldf3>
 101b550:	000d883a 	mov	r6,zero
 101b554:	01d00934 	movhi	r7,16420
 101b558:	8009883a 	mov	r4,r16
 101b55c:	880b883a 	mov	r5,r17
 101b560:	102b883a 	mov	r21,r2
 101b564:	1827883a 	mov	r19,r3
 101b568:	10251a80 	call	10251a8 <__muldf3>
 101b56c:	180b883a 	mov	r5,r3
 101b570:	1009883a 	mov	r4,r2
 101b574:	1821883a 	mov	r16,r3
 101b578:	1023883a 	mov	r17,r2
 101b57c:	10261bc0 	call	10261bc <__fixdfsi>
 101b580:	1009883a 	mov	r4,r2
 101b584:	1029883a 	mov	r20,r2
 101b588:	102623c0 	call	102623c <__floatsidf>
 101b58c:	8809883a 	mov	r4,r17
 101b590:	800b883a 	mov	r5,r16
 101b594:	100d883a 	mov	r6,r2
 101b598:	180f883a 	mov	r7,r3
 101b59c:	10258c00 	call	10258c0 <__subdf3>
 101b5a0:	a5000c04 	addi	r20,r20,48
 101b5a4:	a80d883a 	mov	r6,r21
 101b5a8:	980f883a 	mov	r7,r19
 101b5ac:	1009883a 	mov	r4,r2
 101b5b0:	180b883a 	mov	r5,r3
 101b5b4:	95000005 	stb	r20,0(r18)
 101b5b8:	1021883a 	mov	r16,r2
 101b5bc:	1823883a 	mov	r17,r3
 101b5c0:	10250b40 	call	10250b4 <__ledf2>
 101b5c4:	bdc00044 	addi	r23,r23,1
 101b5c8:	800d883a 	mov	r6,r16
 101b5cc:	880f883a 	mov	r7,r17
 101b5d0:	0009883a 	mov	r4,zero
 101b5d4:	014ffc34 	movhi	r5,16368
 101b5d8:	103fcf0e 	bge	r2,zero,101b518 <__alt_data_end+0xff01b518>
 101b5dc:	d8c01317 	ldw	r3,76(sp)
 101b5e0:	d8c00515 	stw	r3,20(sp)
 101b5e4:	d9400917 	ldw	r5,36(sp)
 101b5e8:	e009883a 	mov	r4,fp
 101b5ec:	101e4100 	call	101e410 <_Bfree>
 101b5f0:	d9000517 	ldw	r4,20(sp)
 101b5f4:	d9802317 	ldw	r6,140(sp)
 101b5f8:	d9c02517 	ldw	r7,148(sp)
 101b5fc:	b8000005 	stb	zero,0(r23)
 101b600:	20800044 	addi	r2,r4,1
 101b604:	30800015 	stw	r2,0(r6)
 101b608:	3802aa26 	beq	r7,zero,101c0b4 <_dtoa_r+0x1178>
 101b60c:	3dc00015 	stw	r23,0(r7)
 101b610:	d8800717 	ldw	r2,28(sp)
 101b614:	003e7906 	br	101affc <__alt_data_end+0xff01affc>
 101b618:	00800434 	movhi	r2,16
 101b61c:	10bfffc4 	addi	r2,r2,-1
 101b620:	88a2703a 	and	r17,r17,r2
 101b624:	883e851e 	bne	r17,zero,101b03c <__alt_data_end+0xff01b03c>
 101b628:	008040f4 	movhi	r2,259
 101b62c:	10ab1c04 	addi	r2,r2,-21392
 101b630:	003e8406 	br	101b044 <__alt_data_end+0xff01b044>
 101b634:	10c00204 	addi	r3,r2,8
 101b638:	003e8706 	br	101b058 <__alt_data_end+0xff01b058>
 101b63c:	01400434 	movhi	r5,16
 101b640:	297fffc4 	addi	r5,r5,-1
 101b644:	994a703a 	and	r5,r19,r5
 101b648:	9009883a 	mov	r4,r18
 101b64c:	843f0044 	addi	r16,r16,-1023
 101b650:	294ffc34 	orhi	r5,r5,16368
 101b654:	dd800217 	ldw	r22,8(sp)
 101b658:	d8001115 	stw	zero,68(sp)
 101b65c:	003ea506 	br	101b0f4 <__alt_data_end+0xff01b0f4>
 101b660:	008040f4 	movhi	r2,259
 101b664:	10ab0b04 	addi	r2,r2,-21460
 101b668:	003e6406 	br	101affc <__alt_data_end+0xff01affc>
 101b66c:	e0001115 	stw	zero,68(fp)
 101b670:	000b883a 	mov	r5,zero
 101b674:	e009883a 	mov	r4,fp
 101b678:	101e3680 	call	101e368 <_Balloc>
 101b67c:	01bfffc4 	movi	r6,-1
 101b680:	01c00044 	movi	r7,1
 101b684:	d8800715 	stw	r2,28(sp)
 101b688:	d9800c15 	stw	r6,48(sp)
 101b68c:	e0801015 	stw	r2,64(fp)
 101b690:	d8000315 	stw	zero,12(sp)
 101b694:	d9c00b15 	stw	r7,44(sp)
 101b698:	d9800615 	stw	r6,24(sp)
 101b69c:	d8002215 	stw	zero,136(sp)
 101b6a0:	d8800117 	ldw	r2,4(sp)
 101b6a4:	10008916 	blt	r2,zero,101b8cc <_dtoa_r+0x990>
 101b6a8:	d9000517 	ldw	r4,20(sp)
 101b6ac:	00c00384 	movi	r3,14
 101b6b0:	19008616 	blt	r3,r4,101b8cc <_dtoa_r+0x990>
 101b6b4:	200490fa 	slli	r2,r4,3
 101b6b8:	00c040f4 	movhi	r3,259
 101b6bc:	d9802217 	ldw	r6,136(sp)
 101b6c0:	18eb3a04 	addi	r3,r3,-21272
 101b6c4:	1885883a 	add	r2,r3,r2
 101b6c8:	14000017 	ldw	r16,0(r2)
 101b6cc:	14400117 	ldw	r17,4(r2)
 101b6d0:	30016316 	blt	r6,zero,101bc60 <_dtoa_r+0xd24>
 101b6d4:	800d883a 	mov	r6,r16
 101b6d8:	880f883a 	mov	r7,r17
 101b6dc:	9009883a 	mov	r4,r18
 101b6e0:	980b883a 	mov	r5,r19
 101b6e4:	10246680 	call	1024668 <__divdf3>
 101b6e8:	180b883a 	mov	r5,r3
 101b6ec:	1009883a 	mov	r4,r2
 101b6f0:	10261bc0 	call	10261bc <__fixdfsi>
 101b6f4:	1009883a 	mov	r4,r2
 101b6f8:	102b883a 	mov	r21,r2
 101b6fc:	102623c0 	call	102623c <__floatsidf>
 101b700:	800d883a 	mov	r6,r16
 101b704:	880f883a 	mov	r7,r17
 101b708:	1009883a 	mov	r4,r2
 101b70c:	180b883a 	mov	r5,r3
 101b710:	10251a80 	call	10251a8 <__muldf3>
 101b714:	100d883a 	mov	r6,r2
 101b718:	180f883a 	mov	r7,r3
 101b71c:	9009883a 	mov	r4,r18
 101b720:	980b883a 	mov	r5,r19
 101b724:	10258c00 	call	10258c0 <__subdf3>
 101b728:	d9c00717 	ldw	r7,28(sp)
 101b72c:	1009883a 	mov	r4,r2
 101b730:	a8800c04 	addi	r2,r21,48
 101b734:	38800005 	stb	r2,0(r7)
 101b738:	3dc00044 	addi	r23,r7,1
 101b73c:	d9c00617 	ldw	r7,24(sp)
 101b740:	01800044 	movi	r6,1
 101b744:	180b883a 	mov	r5,r3
 101b748:	2005883a 	mov	r2,r4
 101b74c:	39803826 	beq	r7,r6,101b830 <_dtoa_r+0x8f4>
 101b750:	000d883a 	mov	r6,zero
 101b754:	01d00934 	movhi	r7,16420
 101b758:	10251a80 	call	10251a8 <__muldf3>
 101b75c:	000d883a 	mov	r6,zero
 101b760:	000f883a 	mov	r7,zero
 101b764:	1009883a 	mov	r4,r2
 101b768:	180b883a 	mov	r5,r3
 101b76c:	1025883a 	mov	r18,r2
 101b770:	1827883a 	mov	r19,r3
 101b774:	1024f500 	call	1024f50 <__eqdf2>
 101b778:	103f9a26 	beq	r2,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101b77c:	d9c00617 	ldw	r7,24(sp)
 101b780:	d8c00717 	ldw	r3,28(sp)
 101b784:	b829883a 	mov	r20,r23
 101b788:	38bfffc4 	addi	r2,r7,-1
 101b78c:	18ad883a 	add	r22,r3,r2
 101b790:	00000a06 	br	101b7bc <_dtoa_r+0x880>
 101b794:	10251a80 	call	10251a8 <__muldf3>
 101b798:	000d883a 	mov	r6,zero
 101b79c:	000f883a 	mov	r7,zero
 101b7a0:	1009883a 	mov	r4,r2
 101b7a4:	180b883a 	mov	r5,r3
 101b7a8:	1025883a 	mov	r18,r2
 101b7ac:	1827883a 	mov	r19,r3
 101b7b0:	b829883a 	mov	r20,r23
 101b7b4:	1024f500 	call	1024f50 <__eqdf2>
 101b7b8:	103f8a26 	beq	r2,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101b7bc:	800d883a 	mov	r6,r16
 101b7c0:	880f883a 	mov	r7,r17
 101b7c4:	9009883a 	mov	r4,r18
 101b7c8:	980b883a 	mov	r5,r19
 101b7cc:	10246680 	call	1024668 <__divdf3>
 101b7d0:	180b883a 	mov	r5,r3
 101b7d4:	1009883a 	mov	r4,r2
 101b7d8:	10261bc0 	call	10261bc <__fixdfsi>
 101b7dc:	1009883a 	mov	r4,r2
 101b7e0:	102b883a 	mov	r21,r2
 101b7e4:	102623c0 	call	102623c <__floatsidf>
 101b7e8:	800d883a 	mov	r6,r16
 101b7ec:	880f883a 	mov	r7,r17
 101b7f0:	1009883a 	mov	r4,r2
 101b7f4:	180b883a 	mov	r5,r3
 101b7f8:	10251a80 	call	10251a8 <__muldf3>
 101b7fc:	100d883a 	mov	r6,r2
 101b800:	180f883a 	mov	r7,r3
 101b804:	9009883a 	mov	r4,r18
 101b808:	980b883a 	mov	r5,r19
 101b80c:	10258c00 	call	10258c0 <__subdf3>
 101b810:	aa000c04 	addi	r8,r21,48
 101b814:	a2000005 	stb	r8,0(r20)
 101b818:	000d883a 	mov	r6,zero
 101b81c:	01d00934 	movhi	r7,16420
 101b820:	1009883a 	mov	r4,r2
 101b824:	180b883a 	mov	r5,r3
 101b828:	a5c00044 	addi	r23,r20,1
 101b82c:	b53fd91e 	bne	r22,r20,101b794 <__alt_data_end+0xff01b794>
 101b830:	100d883a 	mov	r6,r2
 101b834:	180f883a 	mov	r7,r3
 101b838:	1009883a 	mov	r4,r2
 101b83c:	180b883a 	mov	r5,r3
 101b840:	1023dbc0 	call	1023dbc <__adddf3>
 101b844:	100d883a 	mov	r6,r2
 101b848:	180f883a 	mov	r7,r3
 101b84c:	8009883a 	mov	r4,r16
 101b850:	880b883a 	mov	r5,r17
 101b854:	1027883a 	mov	r19,r2
 101b858:	1825883a 	mov	r18,r3
 101b85c:	10250b40 	call	10250b4 <__ledf2>
 101b860:	10000816 	blt	r2,zero,101b884 <_dtoa_r+0x948>
 101b864:	980d883a 	mov	r6,r19
 101b868:	900f883a 	mov	r7,r18
 101b86c:	8009883a 	mov	r4,r16
 101b870:	880b883a 	mov	r5,r17
 101b874:	1024f500 	call	1024f50 <__eqdf2>
 101b878:	103f5a1e 	bne	r2,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101b87c:	ad40004c 	andi	r21,r21,1
 101b880:	a83f5826 	beq	r21,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101b884:	bd3fffc3 	ldbu	r20,-1(r23)
 101b888:	b8bfffc4 	addi	r2,r23,-1
 101b88c:	1007883a 	mov	r3,r2
 101b890:	01400e44 	movi	r5,57
 101b894:	d9800717 	ldw	r6,28(sp)
 101b898:	00000506 	br	101b8b0 <_dtoa_r+0x974>
 101b89c:	18ffffc4 	addi	r3,r3,-1
 101b8a0:	11824726 	beq	r2,r6,101c1c0 <_dtoa_r+0x1284>
 101b8a4:	1d000003 	ldbu	r20,0(r3)
 101b8a8:	102f883a 	mov	r23,r2
 101b8ac:	10bfffc4 	addi	r2,r2,-1
 101b8b0:	a1003fcc 	andi	r4,r20,255
 101b8b4:	2100201c 	xori	r4,r4,128
 101b8b8:	213fe004 	addi	r4,r4,-128
 101b8bc:	217ff726 	beq	r4,r5,101b89c <__alt_data_end+0xff01b89c>
 101b8c0:	a2000044 	addi	r8,r20,1
 101b8c4:	12000005 	stb	r8,0(r2)
 101b8c8:	003f4606 	br	101b5e4 <__alt_data_end+0xff01b5e4>
 101b8cc:	d9000b17 	ldw	r4,44(sp)
 101b8d0:	2000c826 	beq	r4,zero,101bbf4 <_dtoa_r+0xcb8>
 101b8d4:	d9800317 	ldw	r6,12(sp)
 101b8d8:	00c00044 	movi	r3,1
 101b8dc:	1980f90e 	bge	r3,r6,101bcc4 <_dtoa_r+0xd88>
 101b8e0:	d8800617 	ldw	r2,24(sp)
 101b8e4:	d8c00a17 	ldw	r3,40(sp)
 101b8e8:	157fffc4 	addi	r21,r2,-1
 101b8ec:	1d41f316 	blt	r3,r21,101c0bc <_dtoa_r+0x1180>
 101b8f0:	1d6bc83a 	sub	r21,r3,r21
 101b8f4:	d9c00617 	ldw	r7,24(sp)
 101b8f8:	3802aa16 	blt	r7,zero,101c3a4 <_dtoa_r+0x1468>
 101b8fc:	dd000817 	ldw	r20,32(sp)
 101b900:	d8800617 	ldw	r2,24(sp)
 101b904:	d8c00817 	ldw	r3,32(sp)
 101b908:	01400044 	movi	r5,1
 101b90c:	e009883a 	mov	r4,fp
 101b910:	1887883a 	add	r3,r3,r2
 101b914:	d8c00815 	stw	r3,32(sp)
 101b918:	b0ad883a 	add	r22,r22,r2
 101b91c:	101e7740 	call	101e774 <__i2b>
 101b920:	1023883a 	mov	r17,r2
 101b924:	a0000826 	beq	r20,zero,101b948 <_dtoa_r+0xa0c>
 101b928:	0580070e 	bge	zero,r22,101b948 <_dtoa_r+0xa0c>
 101b92c:	a005883a 	mov	r2,r20
 101b930:	b500b916 	blt	r22,r20,101bc18 <_dtoa_r+0xcdc>
 101b934:	d9000817 	ldw	r4,32(sp)
 101b938:	a0a9c83a 	sub	r20,r20,r2
 101b93c:	b0adc83a 	sub	r22,r22,r2
 101b940:	2089c83a 	sub	r4,r4,r2
 101b944:	d9000815 	stw	r4,32(sp)
 101b948:	d9800a17 	ldw	r6,40(sp)
 101b94c:	0181810e 	bge	zero,r6,101bf54 <_dtoa_r+0x1018>
 101b950:	d9c00b17 	ldw	r7,44(sp)
 101b954:	3800b326 	beq	r7,zero,101bc24 <_dtoa_r+0xce8>
 101b958:	a800b226 	beq	r21,zero,101bc24 <_dtoa_r+0xce8>
 101b95c:	880b883a 	mov	r5,r17
 101b960:	a80d883a 	mov	r6,r21
 101b964:	e009883a 	mov	r4,fp
 101b968:	101e9a80 	call	101e9a8 <__pow5mult>
 101b96c:	d9800917 	ldw	r6,36(sp)
 101b970:	100b883a 	mov	r5,r2
 101b974:	e009883a 	mov	r4,fp
 101b978:	1023883a 	mov	r17,r2
 101b97c:	101e7b00 	call	101e7b0 <__multiply>
 101b980:	1021883a 	mov	r16,r2
 101b984:	d8800a17 	ldw	r2,40(sp)
 101b988:	d9400917 	ldw	r5,36(sp)
 101b98c:	e009883a 	mov	r4,fp
 101b990:	1545c83a 	sub	r2,r2,r21
 101b994:	d8800a15 	stw	r2,40(sp)
 101b998:	101e4100 	call	101e410 <_Bfree>
 101b99c:	d8c00a17 	ldw	r3,40(sp)
 101b9a0:	18009f1e 	bne	r3,zero,101bc20 <_dtoa_r+0xce4>
 101b9a4:	05c00044 	movi	r23,1
 101b9a8:	e009883a 	mov	r4,fp
 101b9ac:	b80b883a 	mov	r5,r23
 101b9b0:	101e7740 	call	101e774 <__i2b>
 101b9b4:	d9000d17 	ldw	r4,52(sp)
 101b9b8:	102b883a 	mov	r21,r2
 101b9bc:	2000ce26 	beq	r4,zero,101bcf8 <_dtoa_r+0xdbc>
 101b9c0:	200d883a 	mov	r6,r4
 101b9c4:	100b883a 	mov	r5,r2
 101b9c8:	e009883a 	mov	r4,fp
 101b9cc:	101e9a80 	call	101e9a8 <__pow5mult>
 101b9d0:	d9800317 	ldw	r6,12(sp)
 101b9d4:	102b883a 	mov	r21,r2
 101b9d8:	b981810e 	bge	r23,r6,101bfe0 <_dtoa_r+0x10a4>
 101b9dc:	0027883a 	mov	r19,zero
 101b9e0:	a8800417 	ldw	r2,16(r21)
 101b9e4:	05c00804 	movi	r23,32
 101b9e8:	10800104 	addi	r2,r2,4
 101b9ec:	1085883a 	add	r2,r2,r2
 101b9f0:	1085883a 	add	r2,r2,r2
 101b9f4:	a885883a 	add	r2,r21,r2
 101b9f8:	11000017 	ldw	r4,0(r2)
 101b9fc:	101e65c0 	call	101e65c <__hi0bits>
 101ba00:	b885c83a 	sub	r2,r23,r2
 101ba04:	1585883a 	add	r2,r2,r22
 101ba08:	108007cc 	andi	r2,r2,31
 101ba0c:	1000b326 	beq	r2,zero,101bcdc <_dtoa_r+0xda0>
 101ba10:	00c00804 	movi	r3,32
 101ba14:	1887c83a 	sub	r3,r3,r2
 101ba18:	01000104 	movi	r4,4
 101ba1c:	20c2cd0e 	bge	r4,r3,101c554 <_dtoa_r+0x1618>
 101ba20:	00c00704 	movi	r3,28
 101ba24:	1885c83a 	sub	r2,r3,r2
 101ba28:	d8c00817 	ldw	r3,32(sp)
 101ba2c:	a0a9883a 	add	r20,r20,r2
 101ba30:	b0ad883a 	add	r22,r22,r2
 101ba34:	1887883a 	add	r3,r3,r2
 101ba38:	d8c00815 	stw	r3,32(sp)
 101ba3c:	d9800817 	ldw	r6,32(sp)
 101ba40:	0180040e 	bge	zero,r6,101ba54 <_dtoa_r+0xb18>
 101ba44:	800b883a 	mov	r5,r16
 101ba48:	e009883a 	mov	r4,fp
 101ba4c:	101eae80 	call	101eae8 <__lshift>
 101ba50:	1021883a 	mov	r16,r2
 101ba54:	0580050e 	bge	zero,r22,101ba6c <_dtoa_r+0xb30>
 101ba58:	a80b883a 	mov	r5,r21
 101ba5c:	b00d883a 	mov	r6,r22
 101ba60:	e009883a 	mov	r4,fp
 101ba64:	101eae80 	call	101eae8 <__lshift>
 101ba68:	102b883a 	mov	r21,r2
 101ba6c:	d9c00e17 	ldw	r7,56(sp)
 101ba70:	3801211e 	bne	r7,zero,101bef8 <_dtoa_r+0xfbc>
 101ba74:	d9800617 	ldw	r6,24(sp)
 101ba78:	0181380e 	bge	zero,r6,101bf5c <_dtoa_r+0x1020>
 101ba7c:	d8c00b17 	ldw	r3,44(sp)
 101ba80:	1800ab1e 	bne	r3,zero,101bd30 <_dtoa_r+0xdf4>
 101ba84:	dc800717 	ldw	r18,28(sp)
 101ba88:	dcc00617 	ldw	r19,24(sp)
 101ba8c:	9029883a 	mov	r20,r18
 101ba90:	00000206 	br	101ba9c <_dtoa_r+0xb60>
 101ba94:	101e4380 	call	101e438 <__multadd>
 101ba98:	1021883a 	mov	r16,r2
 101ba9c:	a80b883a 	mov	r5,r21
 101baa0:	8009883a 	mov	r4,r16
 101baa4:	101ad3c0 	call	101ad3c <quorem>
 101baa8:	10800c04 	addi	r2,r2,48
 101baac:	90800005 	stb	r2,0(r18)
 101bab0:	94800044 	addi	r18,r18,1
 101bab4:	9507c83a 	sub	r3,r18,r20
 101bab8:	000f883a 	mov	r7,zero
 101babc:	01800284 	movi	r6,10
 101bac0:	800b883a 	mov	r5,r16
 101bac4:	e009883a 	mov	r4,fp
 101bac8:	1cfff216 	blt	r3,r19,101ba94 <__alt_data_end+0xff01ba94>
 101bacc:	1011883a 	mov	r8,r2
 101bad0:	d8800617 	ldw	r2,24(sp)
 101bad4:	0082370e 	bge	zero,r2,101c3b4 <_dtoa_r+0x1478>
 101bad8:	d9000717 	ldw	r4,28(sp)
 101badc:	0025883a 	mov	r18,zero
 101bae0:	20af883a 	add	r23,r4,r2
 101bae4:	01800044 	movi	r6,1
 101bae8:	800b883a 	mov	r5,r16
 101baec:	e009883a 	mov	r4,fp
 101baf0:	da001715 	stw	r8,92(sp)
 101baf4:	101eae80 	call	101eae8 <__lshift>
 101baf8:	a80b883a 	mov	r5,r21
 101bafc:	1009883a 	mov	r4,r2
 101bb00:	d8800915 	stw	r2,36(sp)
 101bb04:	101ec300 	call	101ec30 <__mcmp>
 101bb08:	da001717 	ldw	r8,92(sp)
 101bb0c:	0081800e 	bge	zero,r2,101c110 <_dtoa_r+0x11d4>
 101bb10:	b93fffc3 	ldbu	r4,-1(r23)
 101bb14:	b8bfffc4 	addi	r2,r23,-1
 101bb18:	1007883a 	mov	r3,r2
 101bb1c:	01800e44 	movi	r6,57
 101bb20:	d9c00717 	ldw	r7,28(sp)
 101bb24:	00000506 	br	101bb3c <_dtoa_r+0xc00>
 101bb28:	18ffffc4 	addi	r3,r3,-1
 101bb2c:	11c12326 	beq	r2,r7,101bfbc <_dtoa_r+0x1080>
 101bb30:	19000003 	ldbu	r4,0(r3)
 101bb34:	102f883a 	mov	r23,r2
 101bb38:	10bfffc4 	addi	r2,r2,-1
 101bb3c:	21403fcc 	andi	r5,r4,255
 101bb40:	2940201c 	xori	r5,r5,128
 101bb44:	297fe004 	addi	r5,r5,-128
 101bb48:	29bff726 	beq	r5,r6,101bb28 <__alt_data_end+0xff01bb28>
 101bb4c:	21000044 	addi	r4,r4,1
 101bb50:	11000005 	stb	r4,0(r2)
 101bb54:	a80b883a 	mov	r5,r21
 101bb58:	e009883a 	mov	r4,fp
 101bb5c:	101e4100 	call	101e410 <_Bfree>
 101bb60:	883ea026 	beq	r17,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101bb64:	90000426 	beq	r18,zero,101bb78 <_dtoa_r+0xc3c>
 101bb68:	94400326 	beq	r18,r17,101bb78 <_dtoa_r+0xc3c>
 101bb6c:	900b883a 	mov	r5,r18
 101bb70:	e009883a 	mov	r4,fp
 101bb74:	101e4100 	call	101e410 <_Bfree>
 101bb78:	880b883a 	mov	r5,r17
 101bb7c:	e009883a 	mov	r4,fp
 101bb80:	101e4100 	call	101e410 <_Bfree>
 101bb84:	003e9706 	br	101b5e4 <__alt_data_end+0xff01b5e4>
 101bb88:	01800044 	movi	r6,1
 101bb8c:	d9800e15 	stw	r6,56(sp)
 101bb90:	003d9606 	br	101b1ec <__alt_data_end+0xff01b1ec>
 101bb94:	d8800817 	ldw	r2,32(sp)
 101bb98:	d8c00517 	ldw	r3,20(sp)
 101bb9c:	d8000d15 	stw	zero,52(sp)
 101bba0:	10c5c83a 	sub	r2,r2,r3
 101bba4:	00c9c83a 	sub	r4,zero,r3
 101bba8:	d8800815 	stw	r2,32(sp)
 101bbac:	d9000a15 	stw	r4,40(sp)
 101bbb0:	003d9706 	br	101b210 <__alt_data_end+0xff01b210>
 101bbb4:	05adc83a 	sub	r22,zero,r22
 101bbb8:	dd800815 	stw	r22,32(sp)
 101bbbc:	002d883a 	mov	r22,zero
 101bbc0:	003d8e06 	br	101b1fc <__alt_data_end+0xff01b1fc>
 101bbc4:	d9000517 	ldw	r4,20(sp)
 101bbc8:	102623c0 	call	102623c <__floatsidf>
 101bbcc:	100d883a 	mov	r6,r2
 101bbd0:	180f883a 	mov	r7,r3
 101bbd4:	a009883a 	mov	r4,r20
 101bbd8:	880b883a 	mov	r5,r17
 101bbdc:	1024f500 	call	1024f50 <__eqdf2>
 101bbe0:	103d7126 	beq	r2,zero,101b1a8 <__alt_data_end+0xff01b1a8>
 101bbe4:	d9c00517 	ldw	r7,20(sp)
 101bbe8:	39ffffc4 	addi	r7,r7,-1
 101bbec:	d9c00515 	stw	r7,20(sp)
 101bbf0:	003d6d06 	br	101b1a8 <__alt_data_end+0xff01b1a8>
 101bbf4:	dd400a17 	ldw	r21,40(sp)
 101bbf8:	dd000817 	ldw	r20,32(sp)
 101bbfc:	0023883a 	mov	r17,zero
 101bc00:	003f4806 	br	101b924 <__alt_data_end+0xff01b924>
 101bc04:	10e3c83a 	sub	r17,r2,r3
 101bc08:	9448983a 	sll	r4,r18,r17
 101bc0c:	003d3206 	br	101b0d8 <__alt_data_end+0xff01b0d8>
 101bc10:	d8000e15 	stw	zero,56(sp)
 101bc14:	003d7506 	br	101b1ec <__alt_data_end+0xff01b1ec>
 101bc18:	b005883a 	mov	r2,r22
 101bc1c:	003f4506 	br	101b934 <__alt_data_end+0xff01b934>
 101bc20:	dc000915 	stw	r16,36(sp)
 101bc24:	d9800a17 	ldw	r6,40(sp)
 101bc28:	d9400917 	ldw	r5,36(sp)
 101bc2c:	e009883a 	mov	r4,fp
 101bc30:	101e9a80 	call	101e9a8 <__pow5mult>
 101bc34:	1021883a 	mov	r16,r2
 101bc38:	003f5a06 	br	101b9a4 <__alt_data_end+0xff01b9a4>
 101bc3c:	01c00044 	movi	r7,1
 101bc40:	d9c00b15 	stw	r7,44(sp)
 101bc44:	d8802217 	ldw	r2,136(sp)
 101bc48:	0081280e 	bge	zero,r2,101c0ec <_dtoa_r+0x11b0>
 101bc4c:	100d883a 	mov	r6,r2
 101bc50:	1021883a 	mov	r16,r2
 101bc54:	d8800c15 	stw	r2,48(sp)
 101bc58:	d8800615 	stw	r2,24(sp)
 101bc5c:	003d8806 	br	101b280 <__alt_data_end+0xff01b280>
 101bc60:	d8800617 	ldw	r2,24(sp)
 101bc64:	00be9b16 	blt	zero,r2,101b6d4 <__alt_data_end+0xff01b6d4>
 101bc68:	10010f1e 	bne	r2,zero,101c0a8 <_dtoa_r+0x116c>
 101bc6c:	880b883a 	mov	r5,r17
 101bc70:	000d883a 	mov	r6,zero
 101bc74:	01d00534 	movhi	r7,16404
 101bc78:	8009883a 	mov	r4,r16
 101bc7c:	10251a80 	call	10251a8 <__muldf3>
 101bc80:	900d883a 	mov	r6,r18
 101bc84:	980f883a 	mov	r7,r19
 101bc88:	1009883a 	mov	r4,r2
 101bc8c:	180b883a 	mov	r5,r3
 101bc90:	1024fd80 	call	1024fd8 <__gedf2>
 101bc94:	002b883a 	mov	r21,zero
 101bc98:	0023883a 	mov	r17,zero
 101bc9c:	1000bf16 	blt	r2,zero,101bf9c <_dtoa_r+0x1060>
 101bca0:	d9802217 	ldw	r6,136(sp)
 101bca4:	ddc00717 	ldw	r23,28(sp)
 101bca8:	018c303a 	nor	r6,zero,r6
 101bcac:	d9800515 	stw	r6,20(sp)
 101bcb0:	a80b883a 	mov	r5,r21
 101bcb4:	e009883a 	mov	r4,fp
 101bcb8:	101e4100 	call	101e410 <_Bfree>
 101bcbc:	883e4926 	beq	r17,zero,101b5e4 <__alt_data_end+0xff01b5e4>
 101bcc0:	003fad06 	br	101bb78 <__alt_data_end+0xff01bb78>
 101bcc4:	d9c01117 	ldw	r7,68(sp)
 101bcc8:	3801bc26 	beq	r7,zero,101c3bc <_dtoa_r+0x1480>
 101bccc:	10810cc4 	addi	r2,r2,1075
 101bcd0:	dd400a17 	ldw	r21,40(sp)
 101bcd4:	dd000817 	ldw	r20,32(sp)
 101bcd8:	003f0a06 	br	101b904 <__alt_data_end+0xff01b904>
 101bcdc:	00800704 	movi	r2,28
 101bce0:	d9000817 	ldw	r4,32(sp)
 101bce4:	a0a9883a 	add	r20,r20,r2
 101bce8:	b0ad883a 	add	r22,r22,r2
 101bcec:	2089883a 	add	r4,r4,r2
 101bcf0:	d9000815 	stw	r4,32(sp)
 101bcf4:	003f5106 	br	101ba3c <__alt_data_end+0xff01ba3c>
 101bcf8:	d8c00317 	ldw	r3,12(sp)
 101bcfc:	b8c1fc0e 	bge	r23,r3,101c4f0 <_dtoa_r+0x15b4>
 101bd00:	0027883a 	mov	r19,zero
 101bd04:	b805883a 	mov	r2,r23
 101bd08:	003f3e06 	br	101ba04 <__alt_data_end+0xff01ba04>
 101bd0c:	880b883a 	mov	r5,r17
 101bd10:	e009883a 	mov	r4,fp
 101bd14:	000f883a 	mov	r7,zero
 101bd18:	01800284 	movi	r6,10
 101bd1c:	101e4380 	call	101e438 <__multadd>
 101bd20:	d9000c17 	ldw	r4,48(sp)
 101bd24:	1023883a 	mov	r17,r2
 101bd28:	0102040e 	bge	zero,r4,101c53c <_dtoa_r+0x1600>
 101bd2c:	d9000615 	stw	r4,24(sp)
 101bd30:	0500050e 	bge	zero,r20,101bd48 <_dtoa_r+0xe0c>
 101bd34:	880b883a 	mov	r5,r17
 101bd38:	a00d883a 	mov	r6,r20
 101bd3c:	e009883a 	mov	r4,fp
 101bd40:	101eae80 	call	101eae8 <__lshift>
 101bd44:	1023883a 	mov	r17,r2
 101bd48:	9801241e 	bne	r19,zero,101c1dc <_dtoa_r+0x12a0>
 101bd4c:	8829883a 	mov	r20,r17
 101bd50:	d9000617 	ldw	r4,24(sp)
 101bd54:	dcc00717 	ldw	r19,28(sp)
 101bd58:	9480004c 	andi	r18,r18,1
 101bd5c:	20bfffc4 	addi	r2,r4,-1
 101bd60:	9885883a 	add	r2,r19,r2
 101bd64:	d8800415 	stw	r2,16(sp)
 101bd68:	dc800615 	stw	r18,24(sp)
 101bd6c:	a80b883a 	mov	r5,r21
 101bd70:	8009883a 	mov	r4,r16
 101bd74:	101ad3c0 	call	101ad3c <quorem>
 101bd78:	880b883a 	mov	r5,r17
 101bd7c:	8009883a 	mov	r4,r16
 101bd80:	102f883a 	mov	r23,r2
 101bd84:	101ec300 	call	101ec30 <__mcmp>
 101bd88:	a80b883a 	mov	r5,r21
 101bd8c:	a00d883a 	mov	r6,r20
 101bd90:	e009883a 	mov	r4,fp
 101bd94:	102d883a 	mov	r22,r2
 101bd98:	101ec900 	call	101ec90 <__mdiff>
 101bd9c:	1007883a 	mov	r3,r2
 101bda0:	10800317 	ldw	r2,12(r2)
 101bda4:	bc800c04 	addi	r18,r23,48
 101bda8:	180b883a 	mov	r5,r3
 101bdac:	10004e1e 	bne	r2,zero,101bee8 <_dtoa_r+0xfac>
 101bdb0:	8009883a 	mov	r4,r16
 101bdb4:	d8c01615 	stw	r3,88(sp)
 101bdb8:	101ec300 	call	101ec30 <__mcmp>
 101bdbc:	d8c01617 	ldw	r3,88(sp)
 101bdc0:	e009883a 	mov	r4,fp
 101bdc4:	d8801615 	stw	r2,88(sp)
 101bdc8:	180b883a 	mov	r5,r3
 101bdcc:	101e4100 	call	101e410 <_Bfree>
 101bdd0:	d8801617 	ldw	r2,88(sp)
 101bdd4:	1000041e 	bne	r2,zero,101bde8 <_dtoa_r+0xeac>
 101bdd8:	d9800317 	ldw	r6,12(sp)
 101bddc:	3000021e 	bne	r6,zero,101bde8 <_dtoa_r+0xeac>
 101bde0:	d8c00617 	ldw	r3,24(sp)
 101bde4:	18003726 	beq	r3,zero,101bec4 <_dtoa_r+0xf88>
 101bde8:	b0002016 	blt	r22,zero,101be6c <_dtoa_r+0xf30>
 101bdec:	b000041e 	bne	r22,zero,101be00 <_dtoa_r+0xec4>
 101bdf0:	d9000317 	ldw	r4,12(sp)
 101bdf4:	2000021e 	bne	r4,zero,101be00 <_dtoa_r+0xec4>
 101bdf8:	d8c00617 	ldw	r3,24(sp)
 101bdfc:	18001b26 	beq	r3,zero,101be6c <_dtoa_r+0xf30>
 101be00:	00810716 	blt	zero,r2,101c220 <_dtoa_r+0x12e4>
 101be04:	d8c00417 	ldw	r3,16(sp)
 101be08:	9d800044 	addi	r22,r19,1
 101be0c:	9c800005 	stb	r18,0(r19)
 101be10:	b02f883a 	mov	r23,r22
 101be14:	98c10626 	beq	r19,r3,101c230 <_dtoa_r+0x12f4>
 101be18:	800b883a 	mov	r5,r16
 101be1c:	000f883a 	mov	r7,zero
 101be20:	01800284 	movi	r6,10
 101be24:	e009883a 	mov	r4,fp
 101be28:	101e4380 	call	101e438 <__multadd>
 101be2c:	1021883a 	mov	r16,r2
 101be30:	000f883a 	mov	r7,zero
 101be34:	01800284 	movi	r6,10
 101be38:	880b883a 	mov	r5,r17
 101be3c:	e009883a 	mov	r4,fp
 101be40:	8d002526 	beq	r17,r20,101bed8 <_dtoa_r+0xf9c>
 101be44:	101e4380 	call	101e438 <__multadd>
 101be48:	a00b883a 	mov	r5,r20
 101be4c:	000f883a 	mov	r7,zero
 101be50:	01800284 	movi	r6,10
 101be54:	e009883a 	mov	r4,fp
 101be58:	1023883a 	mov	r17,r2
 101be5c:	101e4380 	call	101e438 <__multadd>
 101be60:	1029883a 	mov	r20,r2
 101be64:	b027883a 	mov	r19,r22
 101be68:	003fc006 	br	101bd6c <__alt_data_end+0xff01bd6c>
 101be6c:	9011883a 	mov	r8,r18
 101be70:	00800e0e 	bge	zero,r2,101beac <_dtoa_r+0xf70>
 101be74:	800b883a 	mov	r5,r16
 101be78:	01800044 	movi	r6,1
 101be7c:	e009883a 	mov	r4,fp
 101be80:	da001715 	stw	r8,92(sp)
 101be84:	101eae80 	call	101eae8 <__lshift>
 101be88:	a80b883a 	mov	r5,r21
 101be8c:	1009883a 	mov	r4,r2
 101be90:	1021883a 	mov	r16,r2
 101be94:	101ec300 	call	101ec30 <__mcmp>
 101be98:	da001717 	ldw	r8,92(sp)
 101be9c:	0081960e 	bge	zero,r2,101c4f8 <_dtoa_r+0x15bc>
 101bea0:	00800e44 	movi	r2,57
 101bea4:	40817026 	beq	r8,r2,101c468 <_dtoa_r+0x152c>
 101bea8:	ba000c44 	addi	r8,r23,49
 101beac:	8825883a 	mov	r18,r17
 101beb0:	9dc00044 	addi	r23,r19,1
 101beb4:	9a000005 	stb	r8,0(r19)
 101beb8:	a023883a 	mov	r17,r20
 101bebc:	dc000915 	stw	r16,36(sp)
 101bec0:	003f2406 	br	101bb54 <__alt_data_end+0xff01bb54>
 101bec4:	00800e44 	movi	r2,57
 101bec8:	9011883a 	mov	r8,r18
 101becc:	90816626 	beq	r18,r2,101c468 <_dtoa_r+0x152c>
 101bed0:	05bff516 	blt	zero,r22,101bea8 <__alt_data_end+0xff01bea8>
 101bed4:	003ff506 	br	101beac <__alt_data_end+0xff01beac>
 101bed8:	101e4380 	call	101e438 <__multadd>
 101bedc:	1023883a 	mov	r17,r2
 101bee0:	1029883a 	mov	r20,r2
 101bee4:	003fdf06 	br	101be64 <__alt_data_end+0xff01be64>
 101bee8:	e009883a 	mov	r4,fp
 101beec:	101e4100 	call	101e410 <_Bfree>
 101bef0:	00800044 	movi	r2,1
 101bef4:	003fbc06 	br	101bde8 <__alt_data_end+0xff01bde8>
 101bef8:	a80b883a 	mov	r5,r21
 101befc:	8009883a 	mov	r4,r16
 101bf00:	101ec300 	call	101ec30 <__mcmp>
 101bf04:	103edb0e 	bge	r2,zero,101ba74 <__alt_data_end+0xff01ba74>
 101bf08:	800b883a 	mov	r5,r16
 101bf0c:	000f883a 	mov	r7,zero
 101bf10:	01800284 	movi	r6,10
 101bf14:	e009883a 	mov	r4,fp
 101bf18:	101e4380 	call	101e438 <__multadd>
 101bf1c:	1021883a 	mov	r16,r2
 101bf20:	d8800517 	ldw	r2,20(sp)
 101bf24:	d8c00b17 	ldw	r3,44(sp)
 101bf28:	10bfffc4 	addi	r2,r2,-1
 101bf2c:	d8800515 	stw	r2,20(sp)
 101bf30:	183f761e 	bne	r3,zero,101bd0c <__alt_data_end+0xff01bd0c>
 101bf34:	d9000c17 	ldw	r4,48(sp)
 101bf38:	0101730e 	bge	zero,r4,101c508 <_dtoa_r+0x15cc>
 101bf3c:	d9000615 	stw	r4,24(sp)
 101bf40:	003ed006 	br	101ba84 <__alt_data_end+0xff01ba84>
 101bf44:	00800084 	movi	r2,2
 101bf48:	3081861e 	bne	r6,r2,101c564 <_dtoa_r+0x1628>
 101bf4c:	d8000b15 	stw	zero,44(sp)
 101bf50:	003f3c06 	br	101bc44 <__alt_data_end+0xff01bc44>
 101bf54:	dc000917 	ldw	r16,36(sp)
 101bf58:	003e9206 	br	101b9a4 <__alt_data_end+0xff01b9a4>
 101bf5c:	d9c00317 	ldw	r7,12(sp)
 101bf60:	00800084 	movi	r2,2
 101bf64:	11fec50e 	bge	r2,r7,101ba7c <__alt_data_end+0xff01ba7c>
 101bf68:	d9000617 	ldw	r4,24(sp)
 101bf6c:	20013c1e 	bne	r4,zero,101c460 <_dtoa_r+0x1524>
 101bf70:	a80b883a 	mov	r5,r21
 101bf74:	000f883a 	mov	r7,zero
 101bf78:	01800144 	movi	r6,5
 101bf7c:	e009883a 	mov	r4,fp
 101bf80:	101e4380 	call	101e438 <__multadd>
 101bf84:	100b883a 	mov	r5,r2
 101bf88:	8009883a 	mov	r4,r16
 101bf8c:	102b883a 	mov	r21,r2
 101bf90:	101ec300 	call	101ec30 <__mcmp>
 101bf94:	dc000915 	stw	r16,36(sp)
 101bf98:	00bf410e 	bge	zero,r2,101bca0 <__alt_data_end+0xff01bca0>
 101bf9c:	d9c00717 	ldw	r7,28(sp)
 101bfa0:	00800c44 	movi	r2,49
 101bfa4:	38800005 	stb	r2,0(r7)
 101bfa8:	d8800517 	ldw	r2,20(sp)
 101bfac:	3dc00044 	addi	r23,r7,1
 101bfb0:	10800044 	addi	r2,r2,1
 101bfb4:	d8800515 	stw	r2,20(sp)
 101bfb8:	003f3d06 	br	101bcb0 <__alt_data_end+0xff01bcb0>
 101bfbc:	d9800517 	ldw	r6,20(sp)
 101bfc0:	d9c00717 	ldw	r7,28(sp)
 101bfc4:	00800c44 	movi	r2,49
 101bfc8:	31800044 	addi	r6,r6,1
 101bfcc:	d9800515 	stw	r6,20(sp)
 101bfd0:	38800005 	stb	r2,0(r7)
 101bfd4:	003edf06 	br	101bb54 <__alt_data_end+0xff01bb54>
 101bfd8:	d8000b15 	stw	zero,44(sp)
 101bfdc:	003c9f06 	br	101b25c <__alt_data_end+0xff01b25c>
 101bfe0:	903e7e1e 	bne	r18,zero,101b9dc <__alt_data_end+0xff01b9dc>
 101bfe4:	00800434 	movhi	r2,16
 101bfe8:	10bfffc4 	addi	r2,r2,-1
 101bfec:	9884703a 	and	r2,r19,r2
 101bff0:	1000ea1e 	bne	r2,zero,101c39c <_dtoa_r+0x1460>
 101bff4:	9cdffc2c 	andhi	r19,r19,32752
 101bff8:	9800e826 	beq	r19,zero,101c39c <_dtoa_r+0x1460>
 101bffc:	d9c00817 	ldw	r7,32(sp)
 101c000:	b5800044 	addi	r22,r22,1
 101c004:	04c00044 	movi	r19,1
 101c008:	39c00044 	addi	r7,r7,1
 101c00c:	d9c00815 	stw	r7,32(sp)
 101c010:	d8800d17 	ldw	r2,52(sp)
 101c014:	103e721e 	bne	r2,zero,101b9e0 <__alt_data_end+0xff01b9e0>
 101c018:	00800044 	movi	r2,1
 101c01c:	003e7906 	br	101ba04 <__alt_data_end+0xff01ba04>
 101c020:	8009883a 	mov	r4,r16
 101c024:	102623c0 	call	102623c <__floatsidf>
 101c028:	d9800f17 	ldw	r6,60(sp)
 101c02c:	d9c01017 	ldw	r7,64(sp)
 101c030:	1009883a 	mov	r4,r2
 101c034:	180b883a 	mov	r5,r3
 101c038:	10251a80 	call	10251a8 <__muldf3>
 101c03c:	000d883a 	mov	r6,zero
 101c040:	01d00734 	movhi	r7,16412
 101c044:	1009883a 	mov	r4,r2
 101c048:	180b883a 	mov	r5,r3
 101c04c:	1023dbc0 	call	1023dbc <__adddf3>
 101c050:	047f3034 	movhi	r17,64704
 101c054:	1021883a 	mov	r16,r2
 101c058:	1c63883a 	add	r17,r3,r17
 101c05c:	d9000f17 	ldw	r4,60(sp)
 101c060:	d9401017 	ldw	r5,64(sp)
 101c064:	000d883a 	mov	r6,zero
 101c068:	01d00534 	movhi	r7,16404
 101c06c:	10258c00 	call	10258c0 <__subdf3>
 101c070:	800d883a 	mov	r6,r16
 101c074:	880f883a 	mov	r7,r17
 101c078:	1009883a 	mov	r4,r2
 101c07c:	180b883a 	mov	r5,r3
 101c080:	102b883a 	mov	r21,r2
 101c084:	1829883a 	mov	r20,r3
 101c088:	1024fd80 	call	1024fd8 <__gedf2>
 101c08c:	00806c16 	blt	zero,r2,101c240 <_dtoa_r+0x1304>
 101c090:	89e0003c 	xorhi	r7,r17,32768
 101c094:	800d883a 	mov	r6,r16
 101c098:	a809883a 	mov	r4,r21
 101c09c:	a00b883a 	mov	r5,r20
 101c0a0:	10250b40 	call	10250b4 <__ledf2>
 101c0a4:	103d7e0e 	bge	r2,zero,101b6a0 <__alt_data_end+0xff01b6a0>
 101c0a8:	002b883a 	mov	r21,zero
 101c0ac:	0023883a 	mov	r17,zero
 101c0b0:	003efb06 	br	101bca0 <__alt_data_end+0xff01bca0>
 101c0b4:	d8800717 	ldw	r2,28(sp)
 101c0b8:	003bd006 	br	101affc <__alt_data_end+0xff01affc>
 101c0bc:	d9000a17 	ldw	r4,40(sp)
 101c0c0:	d9800d17 	ldw	r6,52(sp)
 101c0c4:	dd400a15 	stw	r21,40(sp)
 101c0c8:	a905c83a 	sub	r2,r21,r4
 101c0cc:	308d883a 	add	r6,r6,r2
 101c0d0:	d9800d15 	stw	r6,52(sp)
 101c0d4:	002b883a 	mov	r21,zero
 101c0d8:	003e0606 	br	101b8f4 <__alt_data_end+0xff01b8f4>
 101c0dc:	9023883a 	mov	r17,r18
 101c0e0:	9829883a 	mov	r20,r19
 101c0e4:	04000084 	movi	r16,2
 101c0e8:	003c9206 	br	101b334 <__alt_data_end+0xff01b334>
 101c0ec:	04000044 	movi	r16,1
 101c0f0:	dc000c15 	stw	r16,48(sp)
 101c0f4:	dc000615 	stw	r16,24(sp)
 101c0f8:	dc002215 	stw	r16,136(sp)
 101c0fc:	e0001115 	stw	zero,68(fp)
 101c100:	000b883a 	mov	r5,zero
 101c104:	003c6906 	br	101b2ac <__alt_data_end+0xff01b2ac>
 101c108:	3021883a 	mov	r16,r6
 101c10c:	003ffb06 	br	101c0fc <__alt_data_end+0xff01c0fc>
 101c110:	1000021e 	bne	r2,zero,101c11c <_dtoa_r+0x11e0>
 101c114:	4200004c 	andi	r8,r8,1
 101c118:	403e7d1e 	bne	r8,zero,101bb10 <__alt_data_end+0xff01bb10>
 101c11c:	01000c04 	movi	r4,48
 101c120:	00000106 	br	101c128 <_dtoa_r+0x11ec>
 101c124:	102f883a 	mov	r23,r2
 101c128:	b8bfffc4 	addi	r2,r23,-1
 101c12c:	10c00007 	ldb	r3,0(r2)
 101c130:	193ffc26 	beq	r3,r4,101c124 <__alt_data_end+0xff01c124>
 101c134:	003e8706 	br	101bb54 <__alt_data_end+0xff01bb54>
 101c138:	d8800517 	ldw	r2,20(sp)
 101c13c:	00a3c83a 	sub	r17,zero,r2
 101c140:	8800a426 	beq	r17,zero,101c3d4 <_dtoa_r+0x1498>
 101c144:	888003cc 	andi	r2,r17,15
 101c148:	100490fa 	slli	r2,r2,3
 101c14c:	00c040f4 	movhi	r3,259
 101c150:	18eb3a04 	addi	r3,r3,-21272
 101c154:	1885883a 	add	r2,r3,r2
 101c158:	11800017 	ldw	r6,0(r2)
 101c15c:	11c00117 	ldw	r7,4(r2)
 101c160:	9009883a 	mov	r4,r18
 101c164:	980b883a 	mov	r5,r19
 101c168:	8823d13a 	srai	r17,r17,4
 101c16c:	10251a80 	call	10251a8 <__muldf3>
 101c170:	d8800f15 	stw	r2,60(sp)
 101c174:	d8c01015 	stw	r3,64(sp)
 101c178:	8800e826 	beq	r17,zero,101c51c <_dtoa_r+0x15e0>
 101c17c:	050040f4 	movhi	r20,259
 101c180:	a52b3004 	addi	r20,r20,-21312
 101c184:	04000084 	movi	r16,2
 101c188:	8980004c 	andi	r6,r17,1
 101c18c:	1009883a 	mov	r4,r2
 101c190:	8823d07a 	srai	r17,r17,1
 101c194:	180b883a 	mov	r5,r3
 101c198:	30000426 	beq	r6,zero,101c1ac <_dtoa_r+0x1270>
 101c19c:	a1800017 	ldw	r6,0(r20)
 101c1a0:	a1c00117 	ldw	r7,4(r20)
 101c1a4:	84000044 	addi	r16,r16,1
 101c1a8:	10251a80 	call	10251a8 <__muldf3>
 101c1ac:	a5000204 	addi	r20,r20,8
 101c1b0:	883ff51e 	bne	r17,zero,101c188 <__alt_data_end+0xff01c188>
 101c1b4:	d8800f15 	stw	r2,60(sp)
 101c1b8:	d8c01015 	stw	r3,64(sp)
 101c1bc:	003c7606 	br	101b398 <__alt_data_end+0xff01b398>
 101c1c0:	00c00c04 	movi	r3,48
 101c1c4:	10c00005 	stb	r3,0(r2)
 101c1c8:	d8c00517 	ldw	r3,20(sp)
 101c1cc:	bd3fffc3 	ldbu	r20,-1(r23)
 101c1d0:	18c00044 	addi	r3,r3,1
 101c1d4:	d8c00515 	stw	r3,20(sp)
 101c1d8:	003db906 	br	101b8c0 <__alt_data_end+0xff01b8c0>
 101c1dc:	89400117 	ldw	r5,4(r17)
 101c1e0:	e009883a 	mov	r4,fp
 101c1e4:	101e3680 	call	101e368 <_Balloc>
 101c1e8:	89800417 	ldw	r6,16(r17)
 101c1ec:	89400304 	addi	r5,r17,12
 101c1f0:	11000304 	addi	r4,r2,12
 101c1f4:	31800084 	addi	r6,r6,2
 101c1f8:	318d883a 	add	r6,r6,r6
 101c1fc:	318d883a 	add	r6,r6,r6
 101c200:	1027883a 	mov	r19,r2
 101c204:	10157f40 	call	10157f4 <memcpy>
 101c208:	01800044 	movi	r6,1
 101c20c:	980b883a 	mov	r5,r19
 101c210:	e009883a 	mov	r4,fp
 101c214:	101eae80 	call	101eae8 <__lshift>
 101c218:	1029883a 	mov	r20,r2
 101c21c:	003ecc06 	br	101bd50 <__alt_data_end+0xff01bd50>
 101c220:	00800e44 	movi	r2,57
 101c224:	90809026 	beq	r18,r2,101c468 <_dtoa_r+0x152c>
 101c228:	92000044 	addi	r8,r18,1
 101c22c:	003f1f06 	br	101beac <__alt_data_end+0xff01beac>
 101c230:	9011883a 	mov	r8,r18
 101c234:	8825883a 	mov	r18,r17
 101c238:	a023883a 	mov	r17,r20
 101c23c:	003e2906 	br	101bae4 <__alt_data_end+0xff01bae4>
 101c240:	002b883a 	mov	r21,zero
 101c244:	0023883a 	mov	r17,zero
 101c248:	003f5406 	br	101bf9c <__alt_data_end+0xff01bf9c>
 101c24c:	61bfffc4 	addi	r6,r12,-1
 101c250:	300490fa 	slli	r2,r6,3
 101c254:	00c040f4 	movhi	r3,259
 101c258:	18eb3a04 	addi	r3,r3,-21272
 101c25c:	1885883a 	add	r2,r3,r2
 101c260:	11000017 	ldw	r4,0(r2)
 101c264:	11400117 	ldw	r5,4(r2)
 101c268:	d8800717 	ldw	r2,28(sp)
 101c26c:	880f883a 	mov	r7,r17
 101c270:	d9801215 	stw	r6,72(sp)
 101c274:	800d883a 	mov	r6,r16
 101c278:	db001615 	stw	r12,88(sp)
 101c27c:	15c00044 	addi	r23,r2,1
 101c280:	10251a80 	call	10251a8 <__muldf3>
 101c284:	d9401017 	ldw	r5,64(sp)
 101c288:	d9000f17 	ldw	r4,60(sp)
 101c28c:	d8c01515 	stw	r3,84(sp)
 101c290:	d8801415 	stw	r2,80(sp)
 101c294:	10261bc0 	call	10261bc <__fixdfsi>
 101c298:	1009883a 	mov	r4,r2
 101c29c:	1021883a 	mov	r16,r2
 101c2a0:	102623c0 	call	102623c <__floatsidf>
 101c2a4:	d9000f17 	ldw	r4,60(sp)
 101c2a8:	d9401017 	ldw	r5,64(sp)
 101c2ac:	100d883a 	mov	r6,r2
 101c2b0:	180f883a 	mov	r7,r3
 101c2b4:	10258c00 	call	10258c0 <__subdf3>
 101c2b8:	1829883a 	mov	r20,r3
 101c2bc:	d8c00717 	ldw	r3,28(sp)
 101c2c0:	84000c04 	addi	r16,r16,48
 101c2c4:	1023883a 	mov	r17,r2
 101c2c8:	1c000005 	stb	r16,0(r3)
 101c2cc:	db001617 	ldw	r12,88(sp)
 101c2d0:	00800044 	movi	r2,1
 101c2d4:	60802226 	beq	r12,r2,101c360 <_dtoa_r+0x1424>
 101c2d8:	d9c00717 	ldw	r7,28(sp)
 101c2dc:	8805883a 	mov	r2,r17
 101c2e0:	b82b883a 	mov	r21,r23
 101c2e4:	3b19883a 	add	r12,r7,r12
 101c2e8:	6023883a 	mov	r17,r12
 101c2ec:	a007883a 	mov	r3,r20
 101c2f0:	dc800f15 	stw	r18,60(sp)
 101c2f4:	000d883a 	mov	r6,zero
 101c2f8:	01d00934 	movhi	r7,16420
 101c2fc:	1009883a 	mov	r4,r2
 101c300:	180b883a 	mov	r5,r3
 101c304:	10251a80 	call	10251a8 <__muldf3>
 101c308:	180b883a 	mov	r5,r3
 101c30c:	1009883a 	mov	r4,r2
 101c310:	1829883a 	mov	r20,r3
 101c314:	1025883a 	mov	r18,r2
 101c318:	10261bc0 	call	10261bc <__fixdfsi>
 101c31c:	1009883a 	mov	r4,r2
 101c320:	1021883a 	mov	r16,r2
 101c324:	102623c0 	call	102623c <__floatsidf>
 101c328:	100d883a 	mov	r6,r2
 101c32c:	180f883a 	mov	r7,r3
 101c330:	9009883a 	mov	r4,r18
 101c334:	a00b883a 	mov	r5,r20
 101c338:	84000c04 	addi	r16,r16,48
 101c33c:	10258c00 	call	10258c0 <__subdf3>
 101c340:	ad400044 	addi	r21,r21,1
 101c344:	ac3fffc5 	stb	r16,-1(r21)
 101c348:	ac7fea1e 	bne	r21,r17,101c2f4 <__alt_data_end+0xff01c2f4>
 101c34c:	1023883a 	mov	r17,r2
 101c350:	d8801217 	ldw	r2,72(sp)
 101c354:	dc800f17 	ldw	r18,60(sp)
 101c358:	1829883a 	mov	r20,r3
 101c35c:	b8af883a 	add	r23,r23,r2
 101c360:	d9001417 	ldw	r4,80(sp)
 101c364:	d9401517 	ldw	r5,84(sp)
 101c368:	000d883a 	mov	r6,zero
 101c36c:	01cff834 	movhi	r7,16352
 101c370:	1023dbc0 	call	1023dbc <__adddf3>
 101c374:	880d883a 	mov	r6,r17
 101c378:	a00f883a 	mov	r7,r20
 101c37c:	1009883a 	mov	r4,r2
 101c380:	180b883a 	mov	r5,r3
 101c384:	10250b40 	call	10250b4 <__ledf2>
 101c388:	10003e0e 	bge	r2,zero,101c484 <_dtoa_r+0x1548>
 101c38c:	d9001317 	ldw	r4,76(sp)
 101c390:	bd3fffc3 	ldbu	r20,-1(r23)
 101c394:	d9000515 	stw	r4,20(sp)
 101c398:	003d3b06 	br	101b888 <__alt_data_end+0xff01b888>
 101c39c:	0027883a 	mov	r19,zero
 101c3a0:	003f1b06 	br	101c010 <__alt_data_end+0xff01c010>
 101c3a4:	d8800817 	ldw	r2,32(sp)
 101c3a8:	11e9c83a 	sub	r20,r2,r7
 101c3ac:	0005883a 	mov	r2,zero
 101c3b0:	003d5406 	br	101b904 <__alt_data_end+0xff01b904>
 101c3b4:	00800044 	movi	r2,1
 101c3b8:	003dc706 	br	101bad8 <__alt_data_end+0xff01bad8>
 101c3bc:	d8c00217 	ldw	r3,8(sp)
 101c3c0:	00800d84 	movi	r2,54
 101c3c4:	dd400a17 	ldw	r21,40(sp)
 101c3c8:	10c5c83a 	sub	r2,r2,r3
 101c3cc:	dd000817 	ldw	r20,32(sp)
 101c3d0:	003d4c06 	br	101b904 <__alt_data_end+0xff01b904>
 101c3d4:	dc800f15 	stw	r18,60(sp)
 101c3d8:	dcc01015 	stw	r19,64(sp)
 101c3dc:	04000084 	movi	r16,2
 101c3e0:	003bed06 	br	101b398 <__alt_data_end+0xff01b398>
 101c3e4:	d9000617 	ldw	r4,24(sp)
 101c3e8:	203f0d26 	beq	r4,zero,101c020 <__alt_data_end+0xff01c020>
 101c3ec:	d9800c17 	ldw	r6,48(sp)
 101c3f0:	01bcab0e 	bge	zero,r6,101b6a0 <__alt_data_end+0xff01b6a0>
 101c3f4:	d9401017 	ldw	r5,64(sp)
 101c3f8:	d9000f17 	ldw	r4,60(sp)
 101c3fc:	000d883a 	mov	r6,zero
 101c400:	01d00934 	movhi	r7,16420
 101c404:	10251a80 	call	10251a8 <__muldf3>
 101c408:	81000044 	addi	r4,r16,1
 101c40c:	d8800f15 	stw	r2,60(sp)
 101c410:	d8c01015 	stw	r3,64(sp)
 101c414:	102623c0 	call	102623c <__floatsidf>
 101c418:	d9800f17 	ldw	r6,60(sp)
 101c41c:	d9c01017 	ldw	r7,64(sp)
 101c420:	1009883a 	mov	r4,r2
 101c424:	180b883a 	mov	r5,r3
 101c428:	10251a80 	call	10251a8 <__muldf3>
 101c42c:	01d00734 	movhi	r7,16412
 101c430:	000d883a 	mov	r6,zero
 101c434:	1009883a 	mov	r4,r2
 101c438:	180b883a 	mov	r5,r3
 101c43c:	1023dbc0 	call	1023dbc <__adddf3>
 101c440:	d9c00517 	ldw	r7,20(sp)
 101c444:	047f3034 	movhi	r17,64704
 101c448:	1021883a 	mov	r16,r2
 101c44c:	39ffffc4 	addi	r7,r7,-1
 101c450:	d9c01315 	stw	r7,76(sp)
 101c454:	1c63883a 	add	r17,r3,r17
 101c458:	db000c17 	ldw	r12,48(sp)
 101c45c:	003bea06 	br	101b408 <__alt_data_end+0xff01b408>
 101c460:	dc000915 	stw	r16,36(sp)
 101c464:	003e0e06 	br	101bca0 <__alt_data_end+0xff01bca0>
 101c468:	01000e44 	movi	r4,57
 101c46c:	8825883a 	mov	r18,r17
 101c470:	9dc00044 	addi	r23,r19,1
 101c474:	99000005 	stb	r4,0(r19)
 101c478:	a023883a 	mov	r17,r20
 101c47c:	dc000915 	stw	r16,36(sp)
 101c480:	003da406 	br	101bb14 <__alt_data_end+0xff01bb14>
 101c484:	d9801417 	ldw	r6,80(sp)
 101c488:	d9c01517 	ldw	r7,84(sp)
 101c48c:	0009883a 	mov	r4,zero
 101c490:	014ff834 	movhi	r5,16352
 101c494:	10258c00 	call	10258c0 <__subdf3>
 101c498:	880d883a 	mov	r6,r17
 101c49c:	a00f883a 	mov	r7,r20
 101c4a0:	1009883a 	mov	r4,r2
 101c4a4:	180b883a 	mov	r5,r3
 101c4a8:	1024fd80 	call	1024fd8 <__gedf2>
 101c4ac:	00bc7c0e 	bge	zero,r2,101b6a0 <__alt_data_end+0xff01b6a0>
 101c4b0:	01000c04 	movi	r4,48
 101c4b4:	00000106 	br	101c4bc <_dtoa_r+0x1580>
 101c4b8:	102f883a 	mov	r23,r2
 101c4bc:	b8bfffc4 	addi	r2,r23,-1
 101c4c0:	10c00007 	ldb	r3,0(r2)
 101c4c4:	193ffc26 	beq	r3,r4,101c4b8 <__alt_data_end+0xff01c4b8>
 101c4c8:	d9801317 	ldw	r6,76(sp)
 101c4cc:	d9800515 	stw	r6,20(sp)
 101c4d0:	003c4406 	br	101b5e4 <__alt_data_end+0xff01b5e4>
 101c4d4:	d9801317 	ldw	r6,76(sp)
 101c4d8:	d9800515 	stw	r6,20(sp)
 101c4dc:	003cea06 	br	101b888 <__alt_data_end+0xff01b888>
 101c4e0:	dd800f17 	ldw	r22,60(sp)
 101c4e4:	dcc01017 	ldw	r19,64(sp)
 101c4e8:	dc801217 	ldw	r18,72(sp)
 101c4ec:	003c6c06 	br	101b6a0 <__alt_data_end+0xff01b6a0>
 101c4f0:	903e031e 	bne	r18,zero,101bd00 <__alt_data_end+0xff01bd00>
 101c4f4:	003ebb06 	br	101bfe4 <__alt_data_end+0xff01bfe4>
 101c4f8:	103e6c1e 	bne	r2,zero,101beac <__alt_data_end+0xff01beac>
 101c4fc:	4080004c 	andi	r2,r8,1
 101c500:	103e6a26 	beq	r2,zero,101beac <__alt_data_end+0xff01beac>
 101c504:	003e6606 	br	101bea0 <__alt_data_end+0xff01bea0>
 101c508:	d8c00317 	ldw	r3,12(sp)
 101c50c:	00800084 	movi	r2,2
 101c510:	10c02916 	blt	r2,r3,101c5b8 <_dtoa_r+0x167c>
 101c514:	d9000c17 	ldw	r4,48(sp)
 101c518:	003e8806 	br	101bf3c <__alt_data_end+0xff01bf3c>
 101c51c:	04000084 	movi	r16,2
 101c520:	003b9d06 	br	101b398 <__alt_data_end+0xff01b398>
 101c524:	d9001317 	ldw	r4,76(sp)
 101c528:	d9000515 	stw	r4,20(sp)
 101c52c:	003cd606 	br	101b888 <__alt_data_end+0xff01b888>
 101c530:	d8801317 	ldw	r2,76(sp)
 101c534:	d8800515 	stw	r2,20(sp)
 101c538:	003c2a06 	br	101b5e4 <__alt_data_end+0xff01b5e4>
 101c53c:	d9800317 	ldw	r6,12(sp)
 101c540:	00800084 	movi	r2,2
 101c544:	11801516 	blt	r2,r6,101c59c <_dtoa_r+0x1660>
 101c548:	d9c00c17 	ldw	r7,48(sp)
 101c54c:	d9c00615 	stw	r7,24(sp)
 101c550:	003df706 	br	101bd30 <__alt_data_end+0xff01bd30>
 101c554:	193d3926 	beq	r3,r4,101ba3c <__alt_data_end+0xff01ba3c>
 101c558:	00c00f04 	movi	r3,60
 101c55c:	1885c83a 	sub	r2,r3,r2
 101c560:	003ddf06 	br	101bce0 <__alt_data_end+0xff01bce0>
 101c564:	e009883a 	mov	r4,fp
 101c568:	e0001115 	stw	zero,68(fp)
 101c56c:	000b883a 	mov	r5,zero
 101c570:	101e3680 	call	101e368 <_Balloc>
 101c574:	d8800715 	stw	r2,28(sp)
 101c578:	d8c00717 	ldw	r3,28(sp)
 101c57c:	00bfffc4 	movi	r2,-1
 101c580:	01000044 	movi	r4,1
 101c584:	d8800c15 	stw	r2,48(sp)
 101c588:	e0c01015 	stw	r3,64(fp)
 101c58c:	d9000b15 	stw	r4,44(sp)
 101c590:	d8800615 	stw	r2,24(sp)
 101c594:	d8002215 	stw	zero,136(sp)
 101c598:	003c4106 	br	101b6a0 <__alt_data_end+0xff01b6a0>
 101c59c:	d8c00c17 	ldw	r3,48(sp)
 101c5a0:	d8c00615 	stw	r3,24(sp)
 101c5a4:	003e7006 	br	101bf68 <__alt_data_end+0xff01bf68>
 101c5a8:	04400044 	movi	r17,1
 101c5ac:	003b2006 	br	101b230 <__alt_data_end+0xff01b230>
 101c5b0:	000b883a 	mov	r5,zero
 101c5b4:	003b3d06 	br	101b2ac <__alt_data_end+0xff01b2ac>
 101c5b8:	d8800c17 	ldw	r2,48(sp)
 101c5bc:	d8800615 	stw	r2,24(sp)
 101c5c0:	003e6906 	br	101bf68 <__alt_data_end+0xff01bf68>

0101c5c4 <__sflush_r>:
 101c5c4:	2880030b 	ldhu	r2,12(r5)
 101c5c8:	defffb04 	addi	sp,sp,-20
 101c5cc:	dcc00315 	stw	r19,12(sp)
 101c5d0:	dc400115 	stw	r17,4(sp)
 101c5d4:	dfc00415 	stw	ra,16(sp)
 101c5d8:	dc800215 	stw	r18,8(sp)
 101c5dc:	dc000015 	stw	r16,0(sp)
 101c5e0:	10c0020c 	andi	r3,r2,8
 101c5e4:	2823883a 	mov	r17,r5
 101c5e8:	2027883a 	mov	r19,r4
 101c5ec:	1800311e 	bne	r3,zero,101c6b4 <__sflush_r+0xf0>
 101c5f0:	28c00117 	ldw	r3,4(r5)
 101c5f4:	10820014 	ori	r2,r2,2048
 101c5f8:	2880030d 	sth	r2,12(r5)
 101c5fc:	00c04b0e 	bge	zero,r3,101c72c <__sflush_r+0x168>
 101c600:	8a000a17 	ldw	r8,40(r17)
 101c604:	40002326 	beq	r8,zero,101c694 <__sflush_r+0xd0>
 101c608:	9c000017 	ldw	r16,0(r19)
 101c60c:	10c4000c 	andi	r3,r2,4096
 101c610:	98000015 	stw	zero,0(r19)
 101c614:	18004826 	beq	r3,zero,101c738 <__sflush_r+0x174>
 101c618:	89801417 	ldw	r6,80(r17)
 101c61c:	10c0010c 	andi	r3,r2,4
 101c620:	18000626 	beq	r3,zero,101c63c <__sflush_r+0x78>
 101c624:	88c00117 	ldw	r3,4(r17)
 101c628:	88800c17 	ldw	r2,48(r17)
 101c62c:	30cdc83a 	sub	r6,r6,r3
 101c630:	10000226 	beq	r2,zero,101c63c <__sflush_r+0x78>
 101c634:	88800f17 	ldw	r2,60(r17)
 101c638:	308dc83a 	sub	r6,r6,r2
 101c63c:	89400717 	ldw	r5,28(r17)
 101c640:	000f883a 	mov	r7,zero
 101c644:	9809883a 	mov	r4,r19
 101c648:	403ee83a 	callr	r8
 101c64c:	00ffffc4 	movi	r3,-1
 101c650:	10c04426 	beq	r2,r3,101c764 <__sflush_r+0x1a0>
 101c654:	88c0030b 	ldhu	r3,12(r17)
 101c658:	89000417 	ldw	r4,16(r17)
 101c65c:	88000115 	stw	zero,4(r17)
 101c660:	197dffcc 	andi	r5,r3,63487
 101c664:	8940030d 	sth	r5,12(r17)
 101c668:	89000015 	stw	r4,0(r17)
 101c66c:	18c4000c 	andi	r3,r3,4096
 101c670:	18002c1e 	bne	r3,zero,101c724 <__sflush_r+0x160>
 101c674:	89400c17 	ldw	r5,48(r17)
 101c678:	9c000015 	stw	r16,0(r19)
 101c67c:	28000526 	beq	r5,zero,101c694 <__sflush_r+0xd0>
 101c680:	88801004 	addi	r2,r17,64
 101c684:	28800226 	beq	r5,r2,101c690 <__sflush_r+0xcc>
 101c688:	9809883a 	mov	r4,r19
 101c68c:	101cd300 	call	101cd30 <_free_r>
 101c690:	88000c15 	stw	zero,48(r17)
 101c694:	0005883a 	mov	r2,zero
 101c698:	dfc00417 	ldw	ra,16(sp)
 101c69c:	dcc00317 	ldw	r19,12(sp)
 101c6a0:	dc800217 	ldw	r18,8(sp)
 101c6a4:	dc400117 	ldw	r17,4(sp)
 101c6a8:	dc000017 	ldw	r16,0(sp)
 101c6ac:	dec00504 	addi	sp,sp,20
 101c6b0:	f800283a 	ret
 101c6b4:	2c800417 	ldw	r18,16(r5)
 101c6b8:	903ff626 	beq	r18,zero,101c694 <__alt_data_end+0xff01c694>
 101c6bc:	2c000017 	ldw	r16,0(r5)
 101c6c0:	108000cc 	andi	r2,r2,3
 101c6c4:	2c800015 	stw	r18,0(r5)
 101c6c8:	84a1c83a 	sub	r16,r16,r18
 101c6cc:	1000131e 	bne	r2,zero,101c71c <__sflush_r+0x158>
 101c6d0:	28800517 	ldw	r2,20(r5)
 101c6d4:	88800215 	stw	r2,8(r17)
 101c6d8:	04000316 	blt	zero,r16,101c6e8 <__sflush_r+0x124>
 101c6dc:	003fed06 	br	101c694 <__alt_data_end+0xff01c694>
 101c6e0:	90a5883a 	add	r18,r18,r2
 101c6e4:	043feb0e 	bge	zero,r16,101c694 <__alt_data_end+0xff01c694>
 101c6e8:	88800917 	ldw	r2,36(r17)
 101c6ec:	89400717 	ldw	r5,28(r17)
 101c6f0:	800f883a 	mov	r7,r16
 101c6f4:	900d883a 	mov	r6,r18
 101c6f8:	9809883a 	mov	r4,r19
 101c6fc:	103ee83a 	callr	r2
 101c700:	80a1c83a 	sub	r16,r16,r2
 101c704:	00bff616 	blt	zero,r2,101c6e0 <__alt_data_end+0xff01c6e0>
 101c708:	88c0030b 	ldhu	r3,12(r17)
 101c70c:	00bfffc4 	movi	r2,-1
 101c710:	18c01014 	ori	r3,r3,64
 101c714:	88c0030d 	sth	r3,12(r17)
 101c718:	003fdf06 	br	101c698 <__alt_data_end+0xff01c698>
 101c71c:	0005883a 	mov	r2,zero
 101c720:	003fec06 	br	101c6d4 <__alt_data_end+0xff01c6d4>
 101c724:	88801415 	stw	r2,80(r17)
 101c728:	003fd206 	br	101c674 <__alt_data_end+0xff01c674>
 101c72c:	28c00f17 	ldw	r3,60(r5)
 101c730:	00ffb316 	blt	zero,r3,101c600 <__alt_data_end+0xff01c600>
 101c734:	003fd706 	br	101c694 <__alt_data_end+0xff01c694>
 101c738:	89400717 	ldw	r5,28(r17)
 101c73c:	000d883a 	mov	r6,zero
 101c740:	01c00044 	movi	r7,1
 101c744:	9809883a 	mov	r4,r19
 101c748:	403ee83a 	callr	r8
 101c74c:	100d883a 	mov	r6,r2
 101c750:	00bfffc4 	movi	r2,-1
 101c754:	30801426 	beq	r6,r2,101c7a8 <__sflush_r+0x1e4>
 101c758:	8880030b 	ldhu	r2,12(r17)
 101c75c:	8a000a17 	ldw	r8,40(r17)
 101c760:	003fae06 	br	101c61c <__alt_data_end+0xff01c61c>
 101c764:	98c00017 	ldw	r3,0(r19)
 101c768:	183fba26 	beq	r3,zero,101c654 <__alt_data_end+0xff01c654>
 101c76c:	01000744 	movi	r4,29
 101c770:	19000626 	beq	r3,r4,101c78c <__sflush_r+0x1c8>
 101c774:	01000584 	movi	r4,22
 101c778:	19000426 	beq	r3,r4,101c78c <__sflush_r+0x1c8>
 101c77c:	88c0030b 	ldhu	r3,12(r17)
 101c780:	18c01014 	ori	r3,r3,64
 101c784:	88c0030d 	sth	r3,12(r17)
 101c788:	003fc306 	br	101c698 <__alt_data_end+0xff01c698>
 101c78c:	8880030b 	ldhu	r2,12(r17)
 101c790:	88c00417 	ldw	r3,16(r17)
 101c794:	88000115 	stw	zero,4(r17)
 101c798:	10bdffcc 	andi	r2,r2,63487
 101c79c:	8880030d 	sth	r2,12(r17)
 101c7a0:	88c00015 	stw	r3,0(r17)
 101c7a4:	003fb306 	br	101c674 <__alt_data_end+0xff01c674>
 101c7a8:	98800017 	ldw	r2,0(r19)
 101c7ac:	103fea26 	beq	r2,zero,101c758 <__alt_data_end+0xff01c758>
 101c7b0:	00c00744 	movi	r3,29
 101c7b4:	10c00226 	beq	r2,r3,101c7c0 <__sflush_r+0x1fc>
 101c7b8:	00c00584 	movi	r3,22
 101c7bc:	10c0031e 	bne	r2,r3,101c7cc <__sflush_r+0x208>
 101c7c0:	9c000015 	stw	r16,0(r19)
 101c7c4:	0005883a 	mov	r2,zero
 101c7c8:	003fb306 	br	101c698 <__alt_data_end+0xff01c698>
 101c7cc:	88c0030b 	ldhu	r3,12(r17)
 101c7d0:	3005883a 	mov	r2,r6
 101c7d4:	18c01014 	ori	r3,r3,64
 101c7d8:	88c0030d 	sth	r3,12(r17)
 101c7dc:	003fae06 	br	101c698 <__alt_data_end+0xff01c698>

0101c7e0 <_fflush_r>:
 101c7e0:	defffd04 	addi	sp,sp,-12
 101c7e4:	dc000115 	stw	r16,4(sp)
 101c7e8:	dfc00215 	stw	ra,8(sp)
 101c7ec:	2021883a 	mov	r16,r4
 101c7f0:	20000226 	beq	r4,zero,101c7fc <_fflush_r+0x1c>
 101c7f4:	20800e17 	ldw	r2,56(r4)
 101c7f8:	10000c26 	beq	r2,zero,101c82c <_fflush_r+0x4c>
 101c7fc:	2880030f 	ldh	r2,12(r5)
 101c800:	1000051e 	bne	r2,zero,101c818 <_fflush_r+0x38>
 101c804:	0005883a 	mov	r2,zero
 101c808:	dfc00217 	ldw	ra,8(sp)
 101c80c:	dc000117 	ldw	r16,4(sp)
 101c810:	dec00304 	addi	sp,sp,12
 101c814:	f800283a 	ret
 101c818:	8009883a 	mov	r4,r16
 101c81c:	dfc00217 	ldw	ra,8(sp)
 101c820:	dc000117 	ldw	r16,4(sp)
 101c824:	dec00304 	addi	sp,sp,12
 101c828:	101c5c41 	jmpi	101c5c4 <__sflush_r>
 101c82c:	d9400015 	stw	r5,0(sp)
 101c830:	101cbbc0 	call	101cbbc <__sinit>
 101c834:	d9400017 	ldw	r5,0(sp)
 101c838:	003ff006 	br	101c7fc <__alt_data_end+0xff01c7fc>

0101c83c <fflush>:
 101c83c:	20000526 	beq	r4,zero,101c854 <fflush+0x18>
 101c840:	008040f4 	movhi	r2,259
 101c844:	10b2dc04 	addi	r2,r2,-13456
 101c848:	200b883a 	mov	r5,r4
 101c84c:	11000017 	ldw	r4,0(r2)
 101c850:	101c7e01 	jmpi	101c7e0 <_fflush_r>
 101c854:	008040f4 	movhi	r2,259
 101c858:	10b2db04 	addi	r2,r2,-13460
 101c85c:	11000017 	ldw	r4,0(r2)
 101c860:	014040b4 	movhi	r5,258
 101c864:	2971f804 	addi	r5,r5,-14368
 101c868:	101d5c01 	jmpi	101d5c0 <_fwalk_reent>

0101c86c <__fp_unlock>:
 101c86c:	0005883a 	mov	r2,zero
 101c870:	f800283a 	ret

0101c874 <_cleanup_r>:
 101c874:	014040b4 	movhi	r5,258
 101c878:	294a6704 	addi	r5,r5,10652
 101c87c:	101d5c01 	jmpi	101d5c0 <_fwalk_reent>

0101c880 <__sinit.part.1>:
 101c880:	defff704 	addi	sp,sp,-36
 101c884:	00c040b4 	movhi	r3,258
 101c888:	dfc00815 	stw	ra,32(sp)
 101c88c:	ddc00715 	stw	r23,28(sp)
 101c890:	dd800615 	stw	r22,24(sp)
 101c894:	dd400515 	stw	r21,20(sp)
 101c898:	dd000415 	stw	r20,16(sp)
 101c89c:	dcc00315 	stw	r19,12(sp)
 101c8a0:	dc800215 	stw	r18,8(sp)
 101c8a4:	dc400115 	stw	r17,4(sp)
 101c8a8:	dc000015 	stw	r16,0(sp)
 101c8ac:	18f21d04 	addi	r3,r3,-14220
 101c8b0:	24000117 	ldw	r16,4(r4)
 101c8b4:	20c00f15 	stw	r3,60(r4)
 101c8b8:	2080bb04 	addi	r2,r4,748
 101c8bc:	00c000c4 	movi	r3,3
 101c8c0:	20c0b915 	stw	r3,740(r4)
 101c8c4:	2080ba15 	stw	r2,744(r4)
 101c8c8:	2000b815 	stw	zero,736(r4)
 101c8cc:	05c00204 	movi	r23,8
 101c8d0:	00800104 	movi	r2,4
 101c8d4:	2025883a 	mov	r18,r4
 101c8d8:	b80d883a 	mov	r6,r23
 101c8dc:	81001704 	addi	r4,r16,92
 101c8e0:	000b883a 	mov	r5,zero
 101c8e4:	80000015 	stw	zero,0(r16)
 101c8e8:	80000115 	stw	zero,4(r16)
 101c8ec:	80000215 	stw	zero,8(r16)
 101c8f0:	8080030d 	sth	r2,12(r16)
 101c8f4:	80001915 	stw	zero,100(r16)
 101c8f8:	8000038d 	sth	zero,14(r16)
 101c8fc:	80000415 	stw	zero,16(r16)
 101c900:	80000515 	stw	zero,20(r16)
 101c904:	80000615 	stw	zero,24(r16)
 101c908:	101593c0 	call	101593c <memset>
 101c90c:	058040b4 	movhi	r22,258
 101c910:	94400217 	ldw	r17,8(r18)
 101c914:	054040b4 	movhi	r21,258
 101c918:	050040b4 	movhi	r20,258
 101c91c:	04c040b4 	movhi	r19,258
 101c920:	b5bf2504 	addi	r22,r22,-876
 101c924:	ad7f3c04 	addi	r21,r21,-784
 101c928:	a53f5b04 	addi	r20,r20,-660
 101c92c:	9cff7204 	addi	r19,r19,-568
 101c930:	85800815 	stw	r22,32(r16)
 101c934:	85400915 	stw	r21,36(r16)
 101c938:	85000a15 	stw	r20,40(r16)
 101c93c:	84c00b15 	stw	r19,44(r16)
 101c940:	84000715 	stw	r16,28(r16)
 101c944:	00800284 	movi	r2,10
 101c948:	8880030d 	sth	r2,12(r17)
 101c94c:	00800044 	movi	r2,1
 101c950:	b80d883a 	mov	r6,r23
 101c954:	89001704 	addi	r4,r17,92
 101c958:	000b883a 	mov	r5,zero
 101c95c:	88000015 	stw	zero,0(r17)
 101c960:	88000115 	stw	zero,4(r17)
 101c964:	88000215 	stw	zero,8(r17)
 101c968:	88001915 	stw	zero,100(r17)
 101c96c:	8880038d 	sth	r2,14(r17)
 101c970:	88000415 	stw	zero,16(r17)
 101c974:	88000515 	stw	zero,20(r17)
 101c978:	88000615 	stw	zero,24(r17)
 101c97c:	101593c0 	call	101593c <memset>
 101c980:	94000317 	ldw	r16,12(r18)
 101c984:	00800484 	movi	r2,18
 101c988:	8c400715 	stw	r17,28(r17)
 101c98c:	8d800815 	stw	r22,32(r17)
 101c990:	8d400915 	stw	r21,36(r17)
 101c994:	8d000a15 	stw	r20,40(r17)
 101c998:	8cc00b15 	stw	r19,44(r17)
 101c99c:	8080030d 	sth	r2,12(r16)
 101c9a0:	00800084 	movi	r2,2
 101c9a4:	80000015 	stw	zero,0(r16)
 101c9a8:	80000115 	stw	zero,4(r16)
 101c9ac:	80000215 	stw	zero,8(r16)
 101c9b0:	80001915 	stw	zero,100(r16)
 101c9b4:	8080038d 	sth	r2,14(r16)
 101c9b8:	80000415 	stw	zero,16(r16)
 101c9bc:	80000515 	stw	zero,20(r16)
 101c9c0:	80000615 	stw	zero,24(r16)
 101c9c4:	b80d883a 	mov	r6,r23
 101c9c8:	000b883a 	mov	r5,zero
 101c9cc:	81001704 	addi	r4,r16,92
 101c9d0:	101593c0 	call	101593c <memset>
 101c9d4:	00800044 	movi	r2,1
 101c9d8:	84000715 	stw	r16,28(r16)
 101c9dc:	85800815 	stw	r22,32(r16)
 101c9e0:	85400915 	stw	r21,36(r16)
 101c9e4:	85000a15 	stw	r20,40(r16)
 101c9e8:	84c00b15 	stw	r19,44(r16)
 101c9ec:	90800e15 	stw	r2,56(r18)
 101c9f0:	dfc00817 	ldw	ra,32(sp)
 101c9f4:	ddc00717 	ldw	r23,28(sp)
 101c9f8:	dd800617 	ldw	r22,24(sp)
 101c9fc:	dd400517 	ldw	r21,20(sp)
 101ca00:	dd000417 	ldw	r20,16(sp)
 101ca04:	dcc00317 	ldw	r19,12(sp)
 101ca08:	dc800217 	ldw	r18,8(sp)
 101ca0c:	dc400117 	ldw	r17,4(sp)
 101ca10:	dc000017 	ldw	r16,0(sp)
 101ca14:	dec00904 	addi	sp,sp,36
 101ca18:	f800283a 	ret

0101ca1c <__fp_lock>:
 101ca1c:	0005883a 	mov	r2,zero
 101ca20:	f800283a 	ret

0101ca24 <__sfmoreglue>:
 101ca24:	defffc04 	addi	sp,sp,-16
 101ca28:	dc400115 	stw	r17,4(sp)
 101ca2c:	2c7fffc4 	addi	r17,r5,-1
 101ca30:	8c401a24 	muli	r17,r17,104
 101ca34:	dc800215 	stw	r18,8(sp)
 101ca38:	2825883a 	mov	r18,r5
 101ca3c:	89401d04 	addi	r5,r17,116
 101ca40:	dc000015 	stw	r16,0(sp)
 101ca44:	dfc00315 	stw	ra,12(sp)
 101ca48:	101d91c0 	call	101d91c <_malloc_r>
 101ca4c:	1021883a 	mov	r16,r2
 101ca50:	10000726 	beq	r2,zero,101ca70 <__sfmoreglue+0x4c>
 101ca54:	11000304 	addi	r4,r2,12
 101ca58:	10000015 	stw	zero,0(r2)
 101ca5c:	14800115 	stw	r18,4(r2)
 101ca60:	11000215 	stw	r4,8(r2)
 101ca64:	89801a04 	addi	r6,r17,104
 101ca68:	000b883a 	mov	r5,zero
 101ca6c:	101593c0 	call	101593c <memset>
 101ca70:	8005883a 	mov	r2,r16
 101ca74:	dfc00317 	ldw	ra,12(sp)
 101ca78:	dc800217 	ldw	r18,8(sp)
 101ca7c:	dc400117 	ldw	r17,4(sp)
 101ca80:	dc000017 	ldw	r16,0(sp)
 101ca84:	dec00404 	addi	sp,sp,16
 101ca88:	f800283a 	ret

0101ca8c <__sfp>:
 101ca8c:	defffb04 	addi	sp,sp,-20
 101ca90:	dc000015 	stw	r16,0(sp)
 101ca94:	040040f4 	movhi	r16,259
 101ca98:	8432db04 	addi	r16,r16,-13460
 101ca9c:	dcc00315 	stw	r19,12(sp)
 101caa0:	2027883a 	mov	r19,r4
 101caa4:	81000017 	ldw	r4,0(r16)
 101caa8:	dfc00415 	stw	ra,16(sp)
 101caac:	dc800215 	stw	r18,8(sp)
 101cab0:	20800e17 	ldw	r2,56(r4)
 101cab4:	dc400115 	stw	r17,4(sp)
 101cab8:	1000021e 	bne	r2,zero,101cac4 <__sfp+0x38>
 101cabc:	101c8800 	call	101c880 <__sinit.part.1>
 101cac0:	81000017 	ldw	r4,0(r16)
 101cac4:	2480b804 	addi	r18,r4,736
 101cac8:	047fffc4 	movi	r17,-1
 101cacc:	91000117 	ldw	r4,4(r18)
 101cad0:	94000217 	ldw	r16,8(r18)
 101cad4:	213fffc4 	addi	r4,r4,-1
 101cad8:	20000a16 	blt	r4,zero,101cb04 <__sfp+0x78>
 101cadc:	8080030f 	ldh	r2,12(r16)
 101cae0:	10000c26 	beq	r2,zero,101cb14 <__sfp+0x88>
 101cae4:	80c01d04 	addi	r3,r16,116
 101cae8:	00000206 	br	101caf4 <__sfp+0x68>
 101caec:	18bfe60f 	ldh	r2,-104(r3)
 101caf0:	10000826 	beq	r2,zero,101cb14 <__sfp+0x88>
 101caf4:	213fffc4 	addi	r4,r4,-1
 101caf8:	1c3ffd04 	addi	r16,r3,-12
 101cafc:	18c01a04 	addi	r3,r3,104
 101cb00:	247ffa1e 	bne	r4,r17,101caec <__alt_data_end+0xff01caec>
 101cb04:	90800017 	ldw	r2,0(r18)
 101cb08:	10001d26 	beq	r2,zero,101cb80 <__sfp+0xf4>
 101cb0c:	1025883a 	mov	r18,r2
 101cb10:	003fee06 	br	101cacc <__alt_data_end+0xff01cacc>
 101cb14:	00bfffc4 	movi	r2,-1
 101cb18:	8080038d 	sth	r2,14(r16)
 101cb1c:	00800044 	movi	r2,1
 101cb20:	8080030d 	sth	r2,12(r16)
 101cb24:	80001915 	stw	zero,100(r16)
 101cb28:	80000015 	stw	zero,0(r16)
 101cb2c:	80000215 	stw	zero,8(r16)
 101cb30:	80000115 	stw	zero,4(r16)
 101cb34:	80000415 	stw	zero,16(r16)
 101cb38:	80000515 	stw	zero,20(r16)
 101cb3c:	80000615 	stw	zero,24(r16)
 101cb40:	01800204 	movi	r6,8
 101cb44:	000b883a 	mov	r5,zero
 101cb48:	81001704 	addi	r4,r16,92
 101cb4c:	101593c0 	call	101593c <memset>
 101cb50:	8005883a 	mov	r2,r16
 101cb54:	80000c15 	stw	zero,48(r16)
 101cb58:	80000d15 	stw	zero,52(r16)
 101cb5c:	80001115 	stw	zero,68(r16)
 101cb60:	80001215 	stw	zero,72(r16)
 101cb64:	dfc00417 	ldw	ra,16(sp)
 101cb68:	dcc00317 	ldw	r19,12(sp)
 101cb6c:	dc800217 	ldw	r18,8(sp)
 101cb70:	dc400117 	ldw	r17,4(sp)
 101cb74:	dc000017 	ldw	r16,0(sp)
 101cb78:	dec00504 	addi	sp,sp,20
 101cb7c:	f800283a 	ret
 101cb80:	01400104 	movi	r5,4
 101cb84:	9809883a 	mov	r4,r19
 101cb88:	101ca240 	call	101ca24 <__sfmoreglue>
 101cb8c:	90800015 	stw	r2,0(r18)
 101cb90:	103fde1e 	bne	r2,zero,101cb0c <__alt_data_end+0xff01cb0c>
 101cb94:	00800304 	movi	r2,12
 101cb98:	98800015 	stw	r2,0(r19)
 101cb9c:	0005883a 	mov	r2,zero
 101cba0:	003ff006 	br	101cb64 <__alt_data_end+0xff01cb64>

0101cba4 <_cleanup>:
 101cba4:	008040f4 	movhi	r2,259
 101cba8:	10b2db04 	addi	r2,r2,-13460
 101cbac:	11000017 	ldw	r4,0(r2)
 101cbb0:	014040b4 	movhi	r5,258
 101cbb4:	294a6704 	addi	r5,r5,10652
 101cbb8:	101d5c01 	jmpi	101d5c0 <_fwalk_reent>

0101cbbc <__sinit>:
 101cbbc:	20800e17 	ldw	r2,56(r4)
 101cbc0:	10000126 	beq	r2,zero,101cbc8 <__sinit+0xc>
 101cbc4:	f800283a 	ret
 101cbc8:	101c8801 	jmpi	101c880 <__sinit.part.1>

0101cbcc <__sfp_lock_acquire>:
 101cbcc:	f800283a 	ret

0101cbd0 <__sfp_lock_release>:
 101cbd0:	f800283a 	ret

0101cbd4 <__sinit_lock_acquire>:
 101cbd4:	f800283a 	ret

0101cbd8 <__sinit_lock_release>:
 101cbd8:	f800283a 	ret

0101cbdc <__fp_lock_all>:
 101cbdc:	008040f4 	movhi	r2,259
 101cbe0:	10b2dc04 	addi	r2,r2,-13456
 101cbe4:	11000017 	ldw	r4,0(r2)
 101cbe8:	014040b4 	movhi	r5,258
 101cbec:	29728704 	addi	r5,r5,-13796
 101cbf0:	101d4fc1 	jmpi	101d4fc <_fwalk>

0101cbf4 <__fp_unlock_all>:
 101cbf4:	008040f4 	movhi	r2,259
 101cbf8:	10b2dc04 	addi	r2,r2,-13456
 101cbfc:	11000017 	ldw	r4,0(r2)
 101cc00:	014040b4 	movhi	r5,258
 101cc04:	29721b04 	addi	r5,r5,-14228
 101cc08:	101d4fc1 	jmpi	101d4fc <_fwalk>

0101cc0c <_malloc_trim_r>:
 101cc0c:	defffb04 	addi	sp,sp,-20
 101cc10:	dcc00315 	stw	r19,12(sp)
 101cc14:	04c040f4 	movhi	r19,259
 101cc18:	dc800215 	stw	r18,8(sp)
 101cc1c:	dc400115 	stw	r17,4(sp)
 101cc20:	dc000015 	stw	r16,0(sp)
 101cc24:	dfc00415 	stw	ra,16(sp)
 101cc28:	2821883a 	mov	r16,r5
 101cc2c:	9ced4904 	addi	r19,r19,-19164
 101cc30:	2025883a 	mov	r18,r4
 101cc34:	10270300 	call	1027030 <__malloc_lock>
 101cc38:	98800217 	ldw	r2,8(r19)
 101cc3c:	14400117 	ldw	r17,4(r2)
 101cc40:	00bfff04 	movi	r2,-4
 101cc44:	88a2703a 	and	r17,r17,r2
 101cc48:	8c21c83a 	sub	r16,r17,r16
 101cc4c:	8403fbc4 	addi	r16,r16,4079
 101cc50:	8020d33a 	srli	r16,r16,12
 101cc54:	0083ffc4 	movi	r2,4095
 101cc58:	843fffc4 	addi	r16,r16,-1
 101cc5c:	8020933a 	slli	r16,r16,12
 101cc60:	1400060e 	bge	r2,r16,101cc7c <_malloc_trim_r+0x70>
 101cc64:	000b883a 	mov	r5,zero
 101cc68:	9009883a 	mov	r4,r18
 101cc6c:	101f93c0 	call	101f93c <_sbrk_r>
 101cc70:	98c00217 	ldw	r3,8(r19)
 101cc74:	1c47883a 	add	r3,r3,r17
 101cc78:	10c00a26 	beq	r2,r3,101cca4 <_malloc_trim_r+0x98>
 101cc7c:	9009883a 	mov	r4,r18
 101cc80:	10270540 	call	1027054 <__malloc_unlock>
 101cc84:	0005883a 	mov	r2,zero
 101cc88:	dfc00417 	ldw	ra,16(sp)
 101cc8c:	dcc00317 	ldw	r19,12(sp)
 101cc90:	dc800217 	ldw	r18,8(sp)
 101cc94:	dc400117 	ldw	r17,4(sp)
 101cc98:	dc000017 	ldw	r16,0(sp)
 101cc9c:	dec00504 	addi	sp,sp,20
 101cca0:	f800283a 	ret
 101cca4:	040bc83a 	sub	r5,zero,r16
 101cca8:	9009883a 	mov	r4,r18
 101ccac:	101f93c0 	call	101f93c <_sbrk_r>
 101ccb0:	00ffffc4 	movi	r3,-1
 101ccb4:	10c00d26 	beq	r2,r3,101ccec <_malloc_trim_r+0xe0>
 101ccb8:	00c060f4 	movhi	r3,387
 101ccbc:	18fb6704 	addi	r3,r3,-4708
 101ccc0:	18800017 	ldw	r2,0(r3)
 101ccc4:	99000217 	ldw	r4,8(r19)
 101ccc8:	8c23c83a 	sub	r17,r17,r16
 101cccc:	8c400054 	ori	r17,r17,1
 101ccd0:	1421c83a 	sub	r16,r2,r16
 101ccd4:	24400115 	stw	r17,4(r4)
 101ccd8:	9009883a 	mov	r4,r18
 101ccdc:	1c000015 	stw	r16,0(r3)
 101cce0:	10270540 	call	1027054 <__malloc_unlock>
 101cce4:	00800044 	movi	r2,1
 101cce8:	003fe706 	br	101cc88 <__alt_data_end+0xff01cc88>
 101ccec:	000b883a 	mov	r5,zero
 101ccf0:	9009883a 	mov	r4,r18
 101ccf4:	101f93c0 	call	101f93c <_sbrk_r>
 101ccf8:	99000217 	ldw	r4,8(r19)
 101ccfc:	014003c4 	movi	r5,15
 101cd00:	1107c83a 	sub	r3,r2,r4
 101cd04:	28ffdd0e 	bge	r5,r3,101cc7c <__alt_data_end+0xff01cc7c>
 101cd08:	014040f4 	movhi	r5,259
 101cd0c:	2972de04 	addi	r5,r5,-13448
 101cd10:	29400017 	ldw	r5,0(r5)
 101cd14:	18c00054 	ori	r3,r3,1
 101cd18:	20c00115 	stw	r3,4(r4)
 101cd1c:	00c060f4 	movhi	r3,387
 101cd20:	1145c83a 	sub	r2,r2,r5
 101cd24:	18fb6704 	addi	r3,r3,-4708
 101cd28:	18800015 	stw	r2,0(r3)
 101cd2c:	003fd306 	br	101cc7c <__alt_data_end+0xff01cc7c>

0101cd30 <_free_r>:
 101cd30:	28004126 	beq	r5,zero,101ce38 <_free_r+0x108>
 101cd34:	defffd04 	addi	sp,sp,-12
 101cd38:	dc400115 	stw	r17,4(sp)
 101cd3c:	dc000015 	stw	r16,0(sp)
 101cd40:	2023883a 	mov	r17,r4
 101cd44:	2821883a 	mov	r16,r5
 101cd48:	dfc00215 	stw	ra,8(sp)
 101cd4c:	10270300 	call	1027030 <__malloc_lock>
 101cd50:	81ffff17 	ldw	r7,-4(r16)
 101cd54:	00bfff84 	movi	r2,-2
 101cd58:	010040f4 	movhi	r4,259
 101cd5c:	81bffe04 	addi	r6,r16,-8
 101cd60:	3884703a 	and	r2,r7,r2
 101cd64:	212d4904 	addi	r4,r4,-19164
 101cd68:	308b883a 	add	r5,r6,r2
 101cd6c:	2a400117 	ldw	r9,4(r5)
 101cd70:	22000217 	ldw	r8,8(r4)
 101cd74:	00ffff04 	movi	r3,-4
 101cd78:	48c6703a 	and	r3,r9,r3
 101cd7c:	2a005726 	beq	r5,r8,101cedc <_free_r+0x1ac>
 101cd80:	28c00115 	stw	r3,4(r5)
 101cd84:	39c0004c 	andi	r7,r7,1
 101cd88:	3800091e 	bne	r7,zero,101cdb0 <_free_r+0x80>
 101cd8c:	823ffe17 	ldw	r8,-8(r16)
 101cd90:	22400204 	addi	r9,r4,8
 101cd94:	320dc83a 	sub	r6,r6,r8
 101cd98:	31c00217 	ldw	r7,8(r6)
 101cd9c:	1205883a 	add	r2,r2,r8
 101cda0:	3a406526 	beq	r7,r9,101cf38 <_free_r+0x208>
 101cda4:	32000317 	ldw	r8,12(r6)
 101cda8:	3a000315 	stw	r8,12(r7)
 101cdac:	41c00215 	stw	r7,8(r8)
 101cdb0:	28cf883a 	add	r7,r5,r3
 101cdb4:	39c00117 	ldw	r7,4(r7)
 101cdb8:	39c0004c 	andi	r7,r7,1
 101cdbc:	38003a26 	beq	r7,zero,101cea8 <_free_r+0x178>
 101cdc0:	10c00054 	ori	r3,r2,1
 101cdc4:	30c00115 	stw	r3,4(r6)
 101cdc8:	3087883a 	add	r3,r6,r2
 101cdcc:	18800015 	stw	r2,0(r3)
 101cdd0:	00c07fc4 	movi	r3,511
 101cdd4:	18801936 	bltu	r3,r2,101ce3c <_free_r+0x10c>
 101cdd8:	1004d0fa 	srli	r2,r2,3
 101cddc:	01c00044 	movi	r7,1
 101cde0:	21400117 	ldw	r5,4(r4)
 101cde4:	10c00044 	addi	r3,r2,1
 101cde8:	18c7883a 	add	r3,r3,r3
 101cdec:	1005d0ba 	srai	r2,r2,2
 101cdf0:	18c7883a 	add	r3,r3,r3
 101cdf4:	18c7883a 	add	r3,r3,r3
 101cdf8:	1907883a 	add	r3,r3,r4
 101cdfc:	3884983a 	sll	r2,r7,r2
 101ce00:	19c00017 	ldw	r7,0(r3)
 101ce04:	1a3ffe04 	addi	r8,r3,-8
 101ce08:	1144b03a 	or	r2,r2,r5
 101ce0c:	32000315 	stw	r8,12(r6)
 101ce10:	31c00215 	stw	r7,8(r6)
 101ce14:	20800115 	stw	r2,4(r4)
 101ce18:	19800015 	stw	r6,0(r3)
 101ce1c:	39800315 	stw	r6,12(r7)
 101ce20:	8809883a 	mov	r4,r17
 101ce24:	dfc00217 	ldw	ra,8(sp)
 101ce28:	dc400117 	ldw	r17,4(sp)
 101ce2c:	dc000017 	ldw	r16,0(sp)
 101ce30:	dec00304 	addi	sp,sp,12
 101ce34:	10270541 	jmpi	1027054 <__malloc_unlock>
 101ce38:	f800283a 	ret
 101ce3c:	100ad27a 	srli	r5,r2,9
 101ce40:	00c00104 	movi	r3,4
 101ce44:	19404a36 	bltu	r3,r5,101cf70 <_free_r+0x240>
 101ce48:	100ad1ba 	srli	r5,r2,6
 101ce4c:	28c00e44 	addi	r3,r5,57
 101ce50:	18c7883a 	add	r3,r3,r3
 101ce54:	29400e04 	addi	r5,r5,56
 101ce58:	18c7883a 	add	r3,r3,r3
 101ce5c:	18c7883a 	add	r3,r3,r3
 101ce60:	1909883a 	add	r4,r3,r4
 101ce64:	20c00017 	ldw	r3,0(r4)
 101ce68:	01c040f4 	movhi	r7,259
 101ce6c:	213ffe04 	addi	r4,r4,-8
 101ce70:	39ed4904 	addi	r7,r7,-19164
 101ce74:	20c04426 	beq	r4,r3,101cf88 <_free_r+0x258>
 101ce78:	01ffff04 	movi	r7,-4
 101ce7c:	19400117 	ldw	r5,4(r3)
 101ce80:	29ca703a 	and	r5,r5,r7
 101ce84:	1140022e 	bgeu	r2,r5,101ce90 <_free_r+0x160>
 101ce88:	18c00217 	ldw	r3,8(r3)
 101ce8c:	20fffb1e 	bne	r4,r3,101ce7c <__alt_data_end+0xff01ce7c>
 101ce90:	19000317 	ldw	r4,12(r3)
 101ce94:	31000315 	stw	r4,12(r6)
 101ce98:	30c00215 	stw	r3,8(r6)
 101ce9c:	21800215 	stw	r6,8(r4)
 101cea0:	19800315 	stw	r6,12(r3)
 101cea4:	003fde06 	br	101ce20 <__alt_data_end+0xff01ce20>
 101cea8:	29c00217 	ldw	r7,8(r5)
 101ceac:	10c5883a 	add	r2,r2,r3
 101ceb0:	00c040f4 	movhi	r3,259
 101ceb4:	18ed4b04 	addi	r3,r3,-19156
 101ceb8:	38c03b26 	beq	r7,r3,101cfa8 <_free_r+0x278>
 101cebc:	2a000317 	ldw	r8,12(r5)
 101cec0:	11400054 	ori	r5,r2,1
 101cec4:	3087883a 	add	r3,r6,r2
 101cec8:	3a000315 	stw	r8,12(r7)
 101cecc:	41c00215 	stw	r7,8(r8)
 101ced0:	31400115 	stw	r5,4(r6)
 101ced4:	18800015 	stw	r2,0(r3)
 101ced8:	003fbd06 	br	101cdd0 <__alt_data_end+0xff01cdd0>
 101cedc:	39c0004c 	andi	r7,r7,1
 101cee0:	10c5883a 	add	r2,r2,r3
 101cee4:	3800071e 	bne	r7,zero,101cf04 <_free_r+0x1d4>
 101cee8:	81fffe17 	ldw	r7,-8(r16)
 101ceec:	31cdc83a 	sub	r6,r6,r7
 101cef0:	30c00317 	ldw	r3,12(r6)
 101cef4:	31400217 	ldw	r5,8(r6)
 101cef8:	11c5883a 	add	r2,r2,r7
 101cefc:	28c00315 	stw	r3,12(r5)
 101cf00:	19400215 	stw	r5,8(r3)
 101cf04:	10c00054 	ori	r3,r2,1
 101cf08:	30c00115 	stw	r3,4(r6)
 101cf0c:	00c040f4 	movhi	r3,259
 101cf10:	18f2df04 	addi	r3,r3,-13444
 101cf14:	18c00017 	ldw	r3,0(r3)
 101cf18:	21800215 	stw	r6,8(r4)
 101cf1c:	10ffc036 	bltu	r2,r3,101ce20 <__alt_data_end+0xff01ce20>
 101cf20:	008040f4 	movhi	r2,259
 101cf24:	10ba2b04 	addi	r2,r2,-5972
 101cf28:	11400017 	ldw	r5,0(r2)
 101cf2c:	8809883a 	mov	r4,r17
 101cf30:	101cc0c0 	call	101cc0c <_malloc_trim_r>
 101cf34:	003fba06 	br	101ce20 <__alt_data_end+0xff01ce20>
 101cf38:	28c9883a 	add	r4,r5,r3
 101cf3c:	21000117 	ldw	r4,4(r4)
 101cf40:	2100004c 	andi	r4,r4,1
 101cf44:	2000391e 	bne	r4,zero,101d02c <_free_r+0x2fc>
 101cf48:	29c00217 	ldw	r7,8(r5)
 101cf4c:	29000317 	ldw	r4,12(r5)
 101cf50:	1885883a 	add	r2,r3,r2
 101cf54:	10c00054 	ori	r3,r2,1
 101cf58:	39000315 	stw	r4,12(r7)
 101cf5c:	21c00215 	stw	r7,8(r4)
 101cf60:	30c00115 	stw	r3,4(r6)
 101cf64:	308d883a 	add	r6,r6,r2
 101cf68:	30800015 	stw	r2,0(r6)
 101cf6c:	003fac06 	br	101ce20 <__alt_data_end+0xff01ce20>
 101cf70:	00c00504 	movi	r3,20
 101cf74:	19401536 	bltu	r3,r5,101cfcc <_free_r+0x29c>
 101cf78:	28c01704 	addi	r3,r5,92
 101cf7c:	18c7883a 	add	r3,r3,r3
 101cf80:	294016c4 	addi	r5,r5,91
 101cf84:	003fb406 	br	101ce58 <__alt_data_end+0xff01ce58>
 101cf88:	280bd0ba 	srai	r5,r5,2
 101cf8c:	00c00044 	movi	r3,1
 101cf90:	38800117 	ldw	r2,4(r7)
 101cf94:	194a983a 	sll	r5,r3,r5
 101cf98:	2007883a 	mov	r3,r4
 101cf9c:	2884b03a 	or	r2,r5,r2
 101cfa0:	38800115 	stw	r2,4(r7)
 101cfa4:	003fbb06 	br	101ce94 <__alt_data_end+0xff01ce94>
 101cfa8:	21800515 	stw	r6,20(r4)
 101cfac:	21800415 	stw	r6,16(r4)
 101cfb0:	10c00054 	ori	r3,r2,1
 101cfb4:	31c00315 	stw	r7,12(r6)
 101cfb8:	31c00215 	stw	r7,8(r6)
 101cfbc:	30c00115 	stw	r3,4(r6)
 101cfc0:	308d883a 	add	r6,r6,r2
 101cfc4:	30800015 	stw	r2,0(r6)
 101cfc8:	003f9506 	br	101ce20 <__alt_data_end+0xff01ce20>
 101cfcc:	00c01504 	movi	r3,84
 101cfd0:	19400536 	bltu	r3,r5,101cfe8 <_free_r+0x2b8>
 101cfd4:	100ad33a 	srli	r5,r2,12
 101cfd8:	28c01bc4 	addi	r3,r5,111
 101cfdc:	18c7883a 	add	r3,r3,r3
 101cfe0:	29401b84 	addi	r5,r5,110
 101cfe4:	003f9c06 	br	101ce58 <__alt_data_end+0xff01ce58>
 101cfe8:	00c05504 	movi	r3,340
 101cfec:	19400536 	bltu	r3,r5,101d004 <_free_r+0x2d4>
 101cff0:	100ad3fa 	srli	r5,r2,15
 101cff4:	28c01e04 	addi	r3,r5,120
 101cff8:	18c7883a 	add	r3,r3,r3
 101cffc:	29401dc4 	addi	r5,r5,119
 101d000:	003f9506 	br	101ce58 <__alt_data_end+0xff01ce58>
 101d004:	00c15504 	movi	r3,1364
 101d008:	19400536 	bltu	r3,r5,101d020 <_free_r+0x2f0>
 101d00c:	100ad4ba 	srli	r5,r2,18
 101d010:	28c01f44 	addi	r3,r5,125
 101d014:	18c7883a 	add	r3,r3,r3
 101d018:	29401f04 	addi	r5,r5,124
 101d01c:	003f8e06 	br	101ce58 <__alt_data_end+0xff01ce58>
 101d020:	00c03f84 	movi	r3,254
 101d024:	01401f84 	movi	r5,126
 101d028:	003f8b06 	br	101ce58 <__alt_data_end+0xff01ce58>
 101d02c:	10c00054 	ori	r3,r2,1
 101d030:	30c00115 	stw	r3,4(r6)
 101d034:	308d883a 	add	r6,r6,r2
 101d038:	30800015 	stw	r2,0(r6)
 101d03c:	003f7806 	br	101ce20 <__alt_data_end+0xff01ce20>

0101d040 <__sfvwrite_r>:
 101d040:	30800217 	ldw	r2,8(r6)
 101d044:	10006726 	beq	r2,zero,101d1e4 <__sfvwrite_r+0x1a4>
 101d048:	28c0030b 	ldhu	r3,12(r5)
 101d04c:	defff404 	addi	sp,sp,-48
 101d050:	dd400715 	stw	r21,28(sp)
 101d054:	dd000615 	stw	r20,24(sp)
 101d058:	dc000215 	stw	r16,8(sp)
 101d05c:	dfc00b15 	stw	ra,44(sp)
 101d060:	df000a15 	stw	fp,40(sp)
 101d064:	ddc00915 	stw	r23,36(sp)
 101d068:	dd800815 	stw	r22,32(sp)
 101d06c:	dcc00515 	stw	r19,20(sp)
 101d070:	dc800415 	stw	r18,16(sp)
 101d074:	dc400315 	stw	r17,12(sp)
 101d078:	1880020c 	andi	r2,r3,8
 101d07c:	2821883a 	mov	r16,r5
 101d080:	202b883a 	mov	r21,r4
 101d084:	3029883a 	mov	r20,r6
 101d088:	10002726 	beq	r2,zero,101d128 <__sfvwrite_r+0xe8>
 101d08c:	28800417 	ldw	r2,16(r5)
 101d090:	10002526 	beq	r2,zero,101d128 <__sfvwrite_r+0xe8>
 101d094:	1880008c 	andi	r2,r3,2
 101d098:	a4400017 	ldw	r17,0(r20)
 101d09c:	10002a26 	beq	r2,zero,101d148 <__sfvwrite_r+0x108>
 101d0a0:	05a00034 	movhi	r22,32768
 101d0a4:	0027883a 	mov	r19,zero
 101d0a8:	0025883a 	mov	r18,zero
 101d0ac:	b5bf0004 	addi	r22,r22,-1024
 101d0b0:	980d883a 	mov	r6,r19
 101d0b4:	a809883a 	mov	r4,r21
 101d0b8:	90004626 	beq	r18,zero,101d1d4 <__sfvwrite_r+0x194>
 101d0bc:	900f883a 	mov	r7,r18
 101d0c0:	b480022e 	bgeu	r22,r18,101d0cc <__sfvwrite_r+0x8c>
 101d0c4:	01e00034 	movhi	r7,32768
 101d0c8:	39ff0004 	addi	r7,r7,-1024
 101d0cc:	80800917 	ldw	r2,36(r16)
 101d0d0:	81400717 	ldw	r5,28(r16)
 101d0d4:	103ee83a 	callr	r2
 101d0d8:	0080570e 	bge	zero,r2,101d238 <__sfvwrite_r+0x1f8>
 101d0dc:	a0c00217 	ldw	r3,8(r20)
 101d0e0:	98a7883a 	add	r19,r19,r2
 101d0e4:	90a5c83a 	sub	r18,r18,r2
 101d0e8:	1885c83a 	sub	r2,r3,r2
 101d0ec:	a0800215 	stw	r2,8(r20)
 101d0f0:	103fef1e 	bne	r2,zero,101d0b0 <__alt_data_end+0xff01d0b0>
 101d0f4:	0005883a 	mov	r2,zero
 101d0f8:	dfc00b17 	ldw	ra,44(sp)
 101d0fc:	df000a17 	ldw	fp,40(sp)
 101d100:	ddc00917 	ldw	r23,36(sp)
 101d104:	dd800817 	ldw	r22,32(sp)
 101d108:	dd400717 	ldw	r21,28(sp)
 101d10c:	dd000617 	ldw	r20,24(sp)
 101d110:	dcc00517 	ldw	r19,20(sp)
 101d114:	dc800417 	ldw	r18,16(sp)
 101d118:	dc400317 	ldw	r17,12(sp)
 101d11c:	dc000217 	ldw	r16,8(sp)
 101d120:	dec00c04 	addi	sp,sp,48
 101d124:	f800283a 	ret
 101d128:	800b883a 	mov	r5,r16
 101d12c:	a809883a 	mov	r4,r21
 101d130:	101abd00 	call	101abd0 <__swsetup_r>
 101d134:	1000eb1e 	bne	r2,zero,101d4e4 <__sfvwrite_r+0x4a4>
 101d138:	80c0030b 	ldhu	r3,12(r16)
 101d13c:	a4400017 	ldw	r17,0(r20)
 101d140:	1880008c 	andi	r2,r3,2
 101d144:	103fd61e 	bne	r2,zero,101d0a0 <__alt_data_end+0xff01d0a0>
 101d148:	1880004c 	andi	r2,r3,1
 101d14c:	10003f1e 	bne	r2,zero,101d24c <__sfvwrite_r+0x20c>
 101d150:	0039883a 	mov	fp,zero
 101d154:	0025883a 	mov	r18,zero
 101d158:	90001a26 	beq	r18,zero,101d1c4 <__sfvwrite_r+0x184>
 101d15c:	1880800c 	andi	r2,r3,512
 101d160:	84c00217 	ldw	r19,8(r16)
 101d164:	10002126 	beq	r2,zero,101d1ec <__sfvwrite_r+0x1ac>
 101d168:	982f883a 	mov	r23,r19
 101d16c:	94c09336 	bltu	r18,r19,101d3bc <__sfvwrite_r+0x37c>
 101d170:	1881200c 	andi	r2,r3,1152
 101d174:	10009e1e 	bne	r2,zero,101d3f0 <__sfvwrite_r+0x3b0>
 101d178:	81000017 	ldw	r4,0(r16)
 101d17c:	b80d883a 	mov	r6,r23
 101d180:	e00b883a 	mov	r5,fp
 101d184:	101e20c0 	call	101e20c <memmove>
 101d188:	80c00217 	ldw	r3,8(r16)
 101d18c:	81000017 	ldw	r4,0(r16)
 101d190:	9005883a 	mov	r2,r18
 101d194:	1ce7c83a 	sub	r19,r3,r19
 101d198:	25cf883a 	add	r7,r4,r23
 101d19c:	84c00215 	stw	r19,8(r16)
 101d1a0:	81c00015 	stw	r7,0(r16)
 101d1a4:	a0c00217 	ldw	r3,8(r20)
 101d1a8:	e0b9883a 	add	fp,fp,r2
 101d1ac:	90a5c83a 	sub	r18,r18,r2
 101d1b0:	18a7c83a 	sub	r19,r3,r2
 101d1b4:	a4c00215 	stw	r19,8(r20)
 101d1b8:	983fce26 	beq	r19,zero,101d0f4 <__alt_data_end+0xff01d0f4>
 101d1bc:	80c0030b 	ldhu	r3,12(r16)
 101d1c0:	903fe61e 	bne	r18,zero,101d15c <__alt_data_end+0xff01d15c>
 101d1c4:	8f000017 	ldw	fp,0(r17)
 101d1c8:	8c800117 	ldw	r18,4(r17)
 101d1cc:	8c400204 	addi	r17,r17,8
 101d1d0:	003fe106 	br	101d158 <__alt_data_end+0xff01d158>
 101d1d4:	8cc00017 	ldw	r19,0(r17)
 101d1d8:	8c800117 	ldw	r18,4(r17)
 101d1dc:	8c400204 	addi	r17,r17,8
 101d1e0:	003fb306 	br	101d0b0 <__alt_data_end+0xff01d0b0>
 101d1e4:	0005883a 	mov	r2,zero
 101d1e8:	f800283a 	ret
 101d1ec:	81000017 	ldw	r4,0(r16)
 101d1f0:	80800417 	ldw	r2,16(r16)
 101d1f4:	11005736 	bltu	r2,r4,101d354 <__sfvwrite_r+0x314>
 101d1f8:	85c00517 	ldw	r23,20(r16)
 101d1fc:	95c05536 	bltu	r18,r23,101d354 <__sfvwrite_r+0x314>
 101d200:	00a00034 	movhi	r2,32768
 101d204:	10bfffc4 	addi	r2,r2,-1
 101d208:	9009883a 	mov	r4,r18
 101d20c:	1480012e 	bgeu	r2,r18,101d214 <__sfvwrite_r+0x1d4>
 101d210:	1009883a 	mov	r4,r2
 101d214:	b80b883a 	mov	r5,r23
 101d218:	1023c080 	call	1023c08 <__divsi3>
 101d21c:	15cf383a 	mul	r7,r2,r23
 101d220:	81400717 	ldw	r5,28(r16)
 101d224:	80800917 	ldw	r2,36(r16)
 101d228:	e00d883a 	mov	r6,fp
 101d22c:	a809883a 	mov	r4,r21
 101d230:	103ee83a 	callr	r2
 101d234:	00bfdb16 	blt	zero,r2,101d1a4 <__alt_data_end+0xff01d1a4>
 101d238:	8080030b 	ldhu	r2,12(r16)
 101d23c:	10801014 	ori	r2,r2,64
 101d240:	8080030d 	sth	r2,12(r16)
 101d244:	00bfffc4 	movi	r2,-1
 101d248:	003fab06 	br	101d0f8 <__alt_data_end+0xff01d0f8>
 101d24c:	0027883a 	mov	r19,zero
 101d250:	0011883a 	mov	r8,zero
 101d254:	0039883a 	mov	fp,zero
 101d258:	0025883a 	mov	r18,zero
 101d25c:	90001f26 	beq	r18,zero,101d2dc <__sfvwrite_r+0x29c>
 101d260:	40005a26 	beq	r8,zero,101d3cc <__sfvwrite_r+0x38c>
 101d264:	982d883a 	mov	r22,r19
 101d268:	94c0012e 	bgeu	r18,r19,101d270 <__sfvwrite_r+0x230>
 101d26c:	902d883a 	mov	r22,r18
 101d270:	81000017 	ldw	r4,0(r16)
 101d274:	80800417 	ldw	r2,16(r16)
 101d278:	b02f883a 	mov	r23,r22
 101d27c:	81c00517 	ldw	r7,20(r16)
 101d280:	1100032e 	bgeu	r2,r4,101d290 <__sfvwrite_r+0x250>
 101d284:	80c00217 	ldw	r3,8(r16)
 101d288:	38c7883a 	add	r3,r7,r3
 101d28c:	1d801816 	blt	r3,r22,101d2f0 <__sfvwrite_r+0x2b0>
 101d290:	b1c03e16 	blt	r22,r7,101d38c <__sfvwrite_r+0x34c>
 101d294:	80800917 	ldw	r2,36(r16)
 101d298:	81400717 	ldw	r5,28(r16)
 101d29c:	e00d883a 	mov	r6,fp
 101d2a0:	da000115 	stw	r8,4(sp)
 101d2a4:	a809883a 	mov	r4,r21
 101d2a8:	103ee83a 	callr	r2
 101d2ac:	102f883a 	mov	r23,r2
 101d2b0:	da000117 	ldw	r8,4(sp)
 101d2b4:	00bfe00e 	bge	zero,r2,101d238 <__alt_data_end+0xff01d238>
 101d2b8:	9de7c83a 	sub	r19,r19,r23
 101d2bc:	98001f26 	beq	r19,zero,101d33c <__sfvwrite_r+0x2fc>
 101d2c0:	a0800217 	ldw	r2,8(r20)
 101d2c4:	e5f9883a 	add	fp,fp,r23
 101d2c8:	95e5c83a 	sub	r18,r18,r23
 101d2cc:	15efc83a 	sub	r23,r2,r23
 101d2d0:	a5c00215 	stw	r23,8(r20)
 101d2d4:	b83f8726 	beq	r23,zero,101d0f4 <__alt_data_end+0xff01d0f4>
 101d2d8:	903fe11e 	bne	r18,zero,101d260 <__alt_data_end+0xff01d260>
 101d2dc:	8f000017 	ldw	fp,0(r17)
 101d2e0:	8c800117 	ldw	r18,4(r17)
 101d2e4:	0011883a 	mov	r8,zero
 101d2e8:	8c400204 	addi	r17,r17,8
 101d2ec:	003fdb06 	br	101d25c <__alt_data_end+0xff01d25c>
 101d2f0:	180d883a 	mov	r6,r3
 101d2f4:	e00b883a 	mov	r5,fp
 101d2f8:	da000115 	stw	r8,4(sp)
 101d2fc:	d8c00015 	stw	r3,0(sp)
 101d300:	101e20c0 	call	101e20c <memmove>
 101d304:	d8c00017 	ldw	r3,0(sp)
 101d308:	80800017 	ldw	r2,0(r16)
 101d30c:	800b883a 	mov	r5,r16
 101d310:	a809883a 	mov	r4,r21
 101d314:	10c5883a 	add	r2,r2,r3
 101d318:	80800015 	stw	r2,0(r16)
 101d31c:	d8c00015 	stw	r3,0(sp)
 101d320:	101c7e00 	call	101c7e0 <_fflush_r>
 101d324:	d8c00017 	ldw	r3,0(sp)
 101d328:	da000117 	ldw	r8,4(sp)
 101d32c:	103fc21e 	bne	r2,zero,101d238 <__alt_data_end+0xff01d238>
 101d330:	182f883a 	mov	r23,r3
 101d334:	9de7c83a 	sub	r19,r19,r23
 101d338:	983fe11e 	bne	r19,zero,101d2c0 <__alt_data_end+0xff01d2c0>
 101d33c:	800b883a 	mov	r5,r16
 101d340:	a809883a 	mov	r4,r21
 101d344:	101c7e00 	call	101c7e0 <_fflush_r>
 101d348:	103fbb1e 	bne	r2,zero,101d238 <__alt_data_end+0xff01d238>
 101d34c:	0011883a 	mov	r8,zero
 101d350:	003fdb06 	br	101d2c0 <__alt_data_end+0xff01d2c0>
 101d354:	94c0012e 	bgeu	r18,r19,101d35c <__sfvwrite_r+0x31c>
 101d358:	9027883a 	mov	r19,r18
 101d35c:	980d883a 	mov	r6,r19
 101d360:	e00b883a 	mov	r5,fp
 101d364:	101e20c0 	call	101e20c <memmove>
 101d368:	80800217 	ldw	r2,8(r16)
 101d36c:	80c00017 	ldw	r3,0(r16)
 101d370:	14c5c83a 	sub	r2,r2,r19
 101d374:	1cc7883a 	add	r3,r3,r19
 101d378:	80800215 	stw	r2,8(r16)
 101d37c:	80c00015 	stw	r3,0(r16)
 101d380:	10004326 	beq	r2,zero,101d490 <__sfvwrite_r+0x450>
 101d384:	9805883a 	mov	r2,r19
 101d388:	003f8606 	br	101d1a4 <__alt_data_end+0xff01d1a4>
 101d38c:	b00d883a 	mov	r6,r22
 101d390:	e00b883a 	mov	r5,fp
 101d394:	da000115 	stw	r8,4(sp)
 101d398:	101e20c0 	call	101e20c <memmove>
 101d39c:	80800217 	ldw	r2,8(r16)
 101d3a0:	80c00017 	ldw	r3,0(r16)
 101d3a4:	da000117 	ldw	r8,4(sp)
 101d3a8:	1585c83a 	sub	r2,r2,r22
 101d3ac:	1dad883a 	add	r22,r3,r22
 101d3b0:	80800215 	stw	r2,8(r16)
 101d3b4:	85800015 	stw	r22,0(r16)
 101d3b8:	003fbf06 	br	101d2b8 <__alt_data_end+0xff01d2b8>
 101d3bc:	81000017 	ldw	r4,0(r16)
 101d3c0:	9027883a 	mov	r19,r18
 101d3c4:	902f883a 	mov	r23,r18
 101d3c8:	003f6c06 	br	101d17c <__alt_data_end+0xff01d17c>
 101d3cc:	900d883a 	mov	r6,r18
 101d3d0:	01400284 	movi	r5,10
 101d3d4:	e009883a 	mov	r4,fp
 101d3d8:	101e1280 	call	101e128 <memchr>
 101d3dc:	10003e26 	beq	r2,zero,101d4d8 <__sfvwrite_r+0x498>
 101d3e0:	10800044 	addi	r2,r2,1
 101d3e4:	1727c83a 	sub	r19,r2,fp
 101d3e8:	02000044 	movi	r8,1
 101d3ec:	003f9d06 	br	101d264 <__alt_data_end+0xff01d264>
 101d3f0:	80800517 	ldw	r2,20(r16)
 101d3f4:	81400417 	ldw	r5,16(r16)
 101d3f8:	81c00017 	ldw	r7,0(r16)
 101d3fc:	10a7883a 	add	r19,r2,r2
 101d400:	9885883a 	add	r2,r19,r2
 101d404:	1026d7fa 	srli	r19,r2,31
 101d408:	396dc83a 	sub	r22,r7,r5
 101d40c:	b1000044 	addi	r4,r22,1
 101d410:	9885883a 	add	r2,r19,r2
 101d414:	1027d07a 	srai	r19,r2,1
 101d418:	2485883a 	add	r2,r4,r18
 101d41c:	980d883a 	mov	r6,r19
 101d420:	9880022e 	bgeu	r19,r2,101d42c <__sfvwrite_r+0x3ec>
 101d424:	1027883a 	mov	r19,r2
 101d428:	100d883a 	mov	r6,r2
 101d42c:	18c1000c 	andi	r3,r3,1024
 101d430:	18001c26 	beq	r3,zero,101d4a4 <__sfvwrite_r+0x464>
 101d434:	300b883a 	mov	r5,r6
 101d438:	a809883a 	mov	r4,r21
 101d43c:	101d91c0 	call	101d91c <_malloc_r>
 101d440:	102f883a 	mov	r23,r2
 101d444:	10002926 	beq	r2,zero,101d4ec <__sfvwrite_r+0x4ac>
 101d448:	81400417 	ldw	r5,16(r16)
 101d44c:	b00d883a 	mov	r6,r22
 101d450:	1009883a 	mov	r4,r2
 101d454:	10157f40 	call	10157f4 <memcpy>
 101d458:	8080030b 	ldhu	r2,12(r16)
 101d45c:	00fedfc4 	movi	r3,-1153
 101d460:	10c4703a 	and	r2,r2,r3
 101d464:	10802014 	ori	r2,r2,128
 101d468:	8080030d 	sth	r2,12(r16)
 101d46c:	bd89883a 	add	r4,r23,r22
 101d470:	9d8fc83a 	sub	r7,r19,r22
 101d474:	85c00415 	stw	r23,16(r16)
 101d478:	84c00515 	stw	r19,20(r16)
 101d47c:	81000015 	stw	r4,0(r16)
 101d480:	9027883a 	mov	r19,r18
 101d484:	81c00215 	stw	r7,8(r16)
 101d488:	902f883a 	mov	r23,r18
 101d48c:	003f3b06 	br	101d17c <__alt_data_end+0xff01d17c>
 101d490:	800b883a 	mov	r5,r16
 101d494:	a809883a 	mov	r4,r21
 101d498:	101c7e00 	call	101c7e0 <_fflush_r>
 101d49c:	103fb926 	beq	r2,zero,101d384 <__alt_data_end+0xff01d384>
 101d4a0:	003f6506 	br	101d238 <__alt_data_end+0xff01d238>
 101d4a4:	a809883a 	mov	r4,r21
 101d4a8:	101f3640 	call	101f364 <_realloc_r>
 101d4ac:	102f883a 	mov	r23,r2
 101d4b0:	103fee1e 	bne	r2,zero,101d46c <__alt_data_end+0xff01d46c>
 101d4b4:	81400417 	ldw	r5,16(r16)
 101d4b8:	a809883a 	mov	r4,r21
 101d4bc:	101cd300 	call	101cd30 <_free_r>
 101d4c0:	8080030b 	ldhu	r2,12(r16)
 101d4c4:	00ffdfc4 	movi	r3,-129
 101d4c8:	1884703a 	and	r2,r3,r2
 101d4cc:	00c00304 	movi	r3,12
 101d4d0:	a8c00015 	stw	r3,0(r21)
 101d4d4:	003f5906 	br	101d23c <__alt_data_end+0xff01d23c>
 101d4d8:	94c00044 	addi	r19,r18,1
 101d4dc:	02000044 	movi	r8,1
 101d4e0:	003f6006 	br	101d264 <__alt_data_end+0xff01d264>
 101d4e4:	00bfffc4 	movi	r2,-1
 101d4e8:	003f0306 	br	101d0f8 <__alt_data_end+0xff01d0f8>
 101d4ec:	00800304 	movi	r2,12
 101d4f0:	a8800015 	stw	r2,0(r21)
 101d4f4:	8080030b 	ldhu	r2,12(r16)
 101d4f8:	003f5006 	br	101d23c <__alt_data_end+0xff01d23c>

0101d4fc <_fwalk>:
 101d4fc:	defff704 	addi	sp,sp,-36
 101d500:	dd000415 	stw	r20,16(sp)
 101d504:	dfc00815 	stw	ra,32(sp)
 101d508:	ddc00715 	stw	r23,28(sp)
 101d50c:	dd800615 	stw	r22,24(sp)
 101d510:	dd400515 	stw	r21,20(sp)
 101d514:	dcc00315 	stw	r19,12(sp)
 101d518:	dc800215 	stw	r18,8(sp)
 101d51c:	dc400115 	stw	r17,4(sp)
 101d520:	dc000015 	stw	r16,0(sp)
 101d524:	2500b804 	addi	r20,r4,736
 101d528:	a0002326 	beq	r20,zero,101d5b8 <_fwalk+0xbc>
 101d52c:	282b883a 	mov	r21,r5
 101d530:	002f883a 	mov	r23,zero
 101d534:	05800044 	movi	r22,1
 101d538:	04ffffc4 	movi	r19,-1
 101d53c:	a4400117 	ldw	r17,4(r20)
 101d540:	a4800217 	ldw	r18,8(r20)
 101d544:	8c7fffc4 	addi	r17,r17,-1
 101d548:	88000d16 	blt	r17,zero,101d580 <_fwalk+0x84>
 101d54c:	94000304 	addi	r16,r18,12
 101d550:	94800384 	addi	r18,r18,14
 101d554:	8080000b 	ldhu	r2,0(r16)
 101d558:	8c7fffc4 	addi	r17,r17,-1
 101d55c:	813ffd04 	addi	r4,r16,-12
 101d560:	b080042e 	bgeu	r22,r2,101d574 <_fwalk+0x78>
 101d564:	9080000f 	ldh	r2,0(r18)
 101d568:	14c00226 	beq	r2,r19,101d574 <_fwalk+0x78>
 101d56c:	a83ee83a 	callr	r21
 101d570:	b8aeb03a 	or	r23,r23,r2
 101d574:	84001a04 	addi	r16,r16,104
 101d578:	94801a04 	addi	r18,r18,104
 101d57c:	8cfff51e 	bne	r17,r19,101d554 <__alt_data_end+0xff01d554>
 101d580:	a5000017 	ldw	r20,0(r20)
 101d584:	a03fed1e 	bne	r20,zero,101d53c <__alt_data_end+0xff01d53c>
 101d588:	b805883a 	mov	r2,r23
 101d58c:	dfc00817 	ldw	ra,32(sp)
 101d590:	ddc00717 	ldw	r23,28(sp)
 101d594:	dd800617 	ldw	r22,24(sp)
 101d598:	dd400517 	ldw	r21,20(sp)
 101d59c:	dd000417 	ldw	r20,16(sp)
 101d5a0:	dcc00317 	ldw	r19,12(sp)
 101d5a4:	dc800217 	ldw	r18,8(sp)
 101d5a8:	dc400117 	ldw	r17,4(sp)
 101d5ac:	dc000017 	ldw	r16,0(sp)
 101d5b0:	dec00904 	addi	sp,sp,36
 101d5b4:	f800283a 	ret
 101d5b8:	002f883a 	mov	r23,zero
 101d5bc:	003ff206 	br	101d588 <__alt_data_end+0xff01d588>

0101d5c0 <_fwalk_reent>:
 101d5c0:	defff704 	addi	sp,sp,-36
 101d5c4:	dd000415 	stw	r20,16(sp)
 101d5c8:	dfc00815 	stw	ra,32(sp)
 101d5cc:	ddc00715 	stw	r23,28(sp)
 101d5d0:	dd800615 	stw	r22,24(sp)
 101d5d4:	dd400515 	stw	r21,20(sp)
 101d5d8:	dcc00315 	stw	r19,12(sp)
 101d5dc:	dc800215 	stw	r18,8(sp)
 101d5e0:	dc400115 	stw	r17,4(sp)
 101d5e4:	dc000015 	stw	r16,0(sp)
 101d5e8:	2500b804 	addi	r20,r4,736
 101d5ec:	a0002326 	beq	r20,zero,101d67c <_fwalk_reent+0xbc>
 101d5f0:	282b883a 	mov	r21,r5
 101d5f4:	2027883a 	mov	r19,r4
 101d5f8:	002f883a 	mov	r23,zero
 101d5fc:	05800044 	movi	r22,1
 101d600:	04bfffc4 	movi	r18,-1
 101d604:	a4400117 	ldw	r17,4(r20)
 101d608:	a4000217 	ldw	r16,8(r20)
 101d60c:	8c7fffc4 	addi	r17,r17,-1
 101d610:	88000c16 	blt	r17,zero,101d644 <_fwalk_reent+0x84>
 101d614:	84000304 	addi	r16,r16,12
 101d618:	8080000b 	ldhu	r2,0(r16)
 101d61c:	8c7fffc4 	addi	r17,r17,-1
 101d620:	817ffd04 	addi	r5,r16,-12
 101d624:	b080052e 	bgeu	r22,r2,101d63c <_fwalk_reent+0x7c>
 101d628:	8080008f 	ldh	r2,2(r16)
 101d62c:	9809883a 	mov	r4,r19
 101d630:	14800226 	beq	r2,r18,101d63c <_fwalk_reent+0x7c>
 101d634:	a83ee83a 	callr	r21
 101d638:	b8aeb03a 	or	r23,r23,r2
 101d63c:	84001a04 	addi	r16,r16,104
 101d640:	8cbff51e 	bne	r17,r18,101d618 <__alt_data_end+0xff01d618>
 101d644:	a5000017 	ldw	r20,0(r20)
 101d648:	a03fee1e 	bne	r20,zero,101d604 <__alt_data_end+0xff01d604>
 101d64c:	b805883a 	mov	r2,r23
 101d650:	dfc00817 	ldw	ra,32(sp)
 101d654:	ddc00717 	ldw	r23,28(sp)
 101d658:	dd800617 	ldw	r22,24(sp)
 101d65c:	dd400517 	ldw	r21,20(sp)
 101d660:	dd000417 	ldw	r20,16(sp)
 101d664:	dcc00317 	ldw	r19,12(sp)
 101d668:	dc800217 	ldw	r18,8(sp)
 101d66c:	dc400117 	ldw	r17,4(sp)
 101d670:	dc000017 	ldw	r16,0(sp)
 101d674:	dec00904 	addi	sp,sp,36
 101d678:	f800283a 	ret
 101d67c:	002f883a 	mov	r23,zero
 101d680:	003ff206 	br	101d64c <__alt_data_end+0xff01d64c>

0101d684 <_setlocale_r>:
 101d684:	30001b26 	beq	r6,zero,101d6f4 <_setlocale_r+0x70>
 101d688:	014040f4 	movhi	r5,259
 101d68c:	defffe04 	addi	sp,sp,-8
 101d690:	296b2004 	addi	r5,r5,-21376
 101d694:	3009883a 	mov	r4,r6
 101d698:	dc000015 	stw	r16,0(sp)
 101d69c:	dfc00115 	stw	ra,4(sp)
 101d6a0:	3021883a 	mov	r16,r6
 101d6a4:	1015d600 	call	1015d60 <strcmp>
 101d6a8:	1000061e 	bne	r2,zero,101d6c4 <_setlocale_r+0x40>
 101d6ac:	008040f4 	movhi	r2,259
 101d6b0:	10a93904 	addi	r2,r2,-23324
 101d6b4:	dfc00117 	ldw	ra,4(sp)
 101d6b8:	dc000017 	ldw	r16,0(sp)
 101d6bc:	dec00204 	addi	sp,sp,8
 101d6c0:	f800283a 	ret
 101d6c4:	014040f4 	movhi	r5,259
 101d6c8:	29693904 	addi	r5,r5,-23324
 101d6cc:	8009883a 	mov	r4,r16
 101d6d0:	1015d600 	call	1015d60 <strcmp>
 101d6d4:	103ff526 	beq	r2,zero,101d6ac <__alt_data_end+0xff01d6ac>
 101d6d8:	014040f4 	movhi	r5,259
 101d6dc:	29692c04 	addi	r5,r5,-23376
 101d6e0:	8009883a 	mov	r4,r16
 101d6e4:	1015d600 	call	1015d60 <strcmp>
 101d6e8:	103ff026 	beq	r2,zero,101d6ac <__alt_data_end+0xff01d6ac>
 101d6ec:	0005883a 	mov	r2,zero
 101d6f0:	003ff006 	br	101d6b4 <__alt_data_end+0xff01d6b4>
 101d6f4:	008040f4 	movhi	r2,259
 101d6f8:	10a93904 	addi	r2,r2,-23324
 101d6fc:	f800283a 	ret

0101d700 <__locale_charset>:
 101d700:	008040f4 	movhi	r2,259
 101d704:	10ad3304 	addi	r2,r2,-19252
 101d708:	f800283a 	ret

0101d70c <__locale_mb_cur_max>:
 101d70c:	008040f4 	movhi	r2,259
 101d710:	10b2dd04 	addi	r2,r2,-13452
 101d714:	10800017 	ldw	r2,0(r2)
 101d718:	f800283a 	ret

0101d71c <__locale_msgcharset>:
 101d71c:	008040f4 	movhi	r2,259
 101d720:	10ad2b04 	addi	r2,r2,-19284
 101d724:	f800283a 	ret

0101d728 <__locale_cjk_lang>:
 101d728:	0005883a 	mov	r2,zero
 101d72c:	f800283a 	ret

0101d730 <_localeconv_r>:
 101d730:	008040f4 	movhi	r2,259
 101d734:	10ad3b04 	addi	r2,r2,-19220
 101d738:	f800283a 	ret

0101d73c <setlocale>:
 101d73c:	008040f4 	movhi	r2,259
 101d740:	10b2dc04 	addi	r2,r2,-13456
 101d744:	280d883a 	mov	r6,r5
 101d748:	200b883a 	mov	r5,r4
 101d74c:	11000017 	ldw	r4,0(r2)
 101d750:	101d6841 	jmpi	101d684 <_setlocale_r>

0101d754 <localeconv>:
 101d754:	008040f4 	movhi	r2,259
 101d758:	10ad3b04 	addi	r2,r2,-19220
 101d75c:	f800283a 	ret

0101d760 <__smakebuf_r>:
 101d760:	2880030b 	ldhu	r2,12(r5)
 101d764:	10c0008c 	andi	r3,r2,2
 101d768:	1800411e 	bne	r3,zero,101d870 <__smakebuf_r+0x110>
 101d76c:	deffec04 	addi	sp,sp,-80
 101d770:	dc000f15 	stw	r16,60(sp)
 101d774:	2821883a 	mov	r16,r5
 101d778:	2940038f 	ldh	r5,14(r5)
 101d77c:	dc401015 	stw	r17,64(sp)
 101d780:	dfc01315 	stw	ra,76(sp)
 101d784:	dcc01215 	stw	r19,72(sp)
 101d788:	dc801115 	stw	r18,68(sp)
 101d78c:	2023883a 	mov	r17,r4
 101d790:	28001c16 	blt	r5,zero,101d804 <__smakebuf_r+0xa4>
 101d794:	d80d883a 	mov	r6,sp
 101d798:	1022ca80 	call	1022ca8 <_fstat_r>
 101d79c:	10001816 	blt	r2,zero,101d800 <__smakebuf_r+0xa0>
 101d7a0:	d8800117 	ldw	r2,4(sp)
 101d7a4:	00e00014 	movui	r3,32768
 101d7a8:	10bc000c 	andi	r2,r2,61440
 101d7ac:	14c80020 	cmpeqi	r19,r2,8192
 101d7b0:	10c03726 	beq	r2,r3,101d890 <__smakebuf_r+0x130>
 101d7b4:	80c0030b 	ldhu	r3,12(r16)
 101d7b8:	18c20014 	ori	r3,r3,2048
 101d7bc:	80c0030d 	sth	r3,12(r16)
 101d7c0:	00c80004 	movi	r3,8192
 101d7c4:	10c0521e 	bne	r2,r3,101d910 <__smakebuf_r+0x1b0>
 101d7c8:	8140038f 	ldh	r5,14(r16)
 101d7cc:	8809883a 	mov	r4,r17
 101d7d0:	1022d040 	call	1022d04 <_isatty_r>
 101d7d4:	10004c26 	beq	r2,zero,101d908 <__smakebuf_r+0x1a8>
 101d7d8:	8080030b 	ldhu	r2,12(r16)
 101d7dc:	80c010c4 	addi	r3,r16,67
 101d7e0:	80c00015 	stw	r3,0(r16)
 101d7e4:	10800054 	ori	r2,r2,1
 101d7e8:	8080030d 	sth	r2,12(r16)
 101d7ec:	00800044 	movi	r2,1
 101d7f0:	80c00415 	stw	r3,16(r16)
 101d7f4:	80800515 	stw	r2,20(r16)
 101d7f8:	04810004 	movi	r18,1024
 101d7fc:	00000706 	br	101d81c <__smakebuf_r+0xbc>
 101d800:	8080030b 	ldhu	r2,12(r16)
 101d804:	10c0200c 	andi	r3,r2,128
 101d808:	18001f1e 	bne	r3,zero,101d888 <__smakebuf_r+0x128>
 101d80c:	04810004 	movi	r18,1024
 101d810:	10820014 	ori	r2,r2,2048
 101d814:	8080030d 	sth	r2,12(r16)
 101d818:	0027883a 	mov	r19,zero
 101d81c:	900b883a 	mov	r5,r18
 101d820:	8809883a 	mov	r4,r17
 101d824:	101d91c0 	call	101d91c <_malloc_r>
 101d828:	10002c26 	beq	r2,zero,101d8dc <__smakebuf_r+0x17c>
 101d82c:	80c0030b 	ldhu	r3,12(r16)
 101d830:	010040b4 	movhi	r4,258
 101d834:	21321d04 	addi	r4,r4,-14220
 101d838:	89000f15 	stw	r4,60(r17)
 101d83c:	18c02014 	ori	r3,r3,128
 101d840:	80c0030d 	sth	r3,12(r16)
 101d844:	80800015 	stw	r2,0(r16)
 101d848:	80800415 	stw	r2,16(r16)
 101d84c:	84800515 	stw	r18,20(r16)
 101d850:	98001a1e 	bne	r19,zero,101d8bc <__smakebuf_r+0x15c>
 101d854:	dfc01317 	ldw	ra,76(sp)
 101d858:	dcc01217 	ldw	r19,72(sp)
 101d85c:	dc801117 	ldw	r18,68(sp)
 101d860:	dc401017 	ldw	r17,64(sp)
 101d864:	dc000f17 	ldw	r16,60(sp)
 101d868:	dec01404 	addi	sp,sp,80
 101d86c:	f800283a 	ret
 101d870:	288010c4 	addi	r2,r5,67
 101d874:	28800015 	stw	r2,0(r5)
 101d878:	28800415 	stw	r2,16(r5)
 101d87c:	00800044 	movi	r2,1
 101d880:	28800515 	stw	r2,20(r5)
 101d884:	f800283a 	ret
 101d888:	04801004 	movi	r18,64
 101d88c:	003fe006 	br	101d810 <__alt_data_end+0xff01d810>
 101d890:	81000a17 	ldw	r4,40(r16)
 101d894:	00c040b4 	movhi	r3,258
 101d898:	18ff5b04 	addi	r3,r3,-660
 101d89c:	20ffc51e 	bne	r4,r3,101d7b4 <__alt_data_end+0xff01d7b4>
 101d8a0:	8080030b 	ldhu	r2,12(r16)
 101d8a4:	04810004 	movi	r18,1024
 101d8a8:	84801315 	stw	r18,76(r16)
 101d8ac:	1484b03a 	or	r2,r2,r18
 101d8b0:	8080030d 	sth	r2,12(r16)
 101d8b4:	0027883a 	mov	r19,zero
 101d8b8:	003fd806 	br	101d81c <__alt_data_end+0xff01d81c>
 101d8bc:	8140038f 	ldh	r5,14(r16)
 101d8c0:	8809883a 	mov	r4,r17
 101d8c4:	1022d040 	call	1022d04 <_isatty_r>
 101d8c8:	103fe226 	beq	r2,zero,101d854 <__alt_data_end+0xff01d854>
 101d8cc:	8080030b 	ldhu	r2,12(r16)
 101d8d0:	10800054 	ori	r2,r2,1
 101d8d4:	8080030d 	sth	r2,12(r16)
 101d8d8:	003fde06 	br	101d854 <__alt_data_end+0xff01d854>
 101d8dc:	8080030b 	ldhu	r2,12(r16)
 101d8e0:	10c0800c 	andi	r3,r2,512
 101d8e4:	183fdb1e 	bne	r3,zero,101d854 <__alt_data_end+0xff01d854>
 101d8e8:	10800094 	ori	r2,r2,2
 101d8ec:	80c010c4 	addi	r3,r16,67
 101d8f0:	8080030d 	sth	r2,12(r16)
 101d8f4:	00800044 	movi	r2,1
 101d8f8:	80c00015 	stw	r3,0(r16)
 101d8fc:	80c00415 	stw	r3,16(r16)
 101d900:	80800515 	stw	r2,20(r16)
 101d904:	003fd306 	br	101d854 <__alt_data_end+0xff01d854>
 101d908:	04810004 	movi	r18,1024
 101d90c:	003fc306 	br	101d81c <__alt_data_end+0xff01d81c>
 101d910:	0027883a 	mov	r19,zero
 101d914:	04810004 	movi	r18,1024
 101d918:	003fc006 	br	101d81c <__alt_data_end+0xff01d81c>

0101d91c <_malloc_r>:
 101d91c:	defff504 	addi	sp,sp,-44
 101d920:	dc800315 	stw	r18,12(sp)
 101d924:	dfc00a15 	stw	ra,40(sp)
 101d928:	df000915 	stw	fp,36(sp)
 101d92c:	ddc00815 	stw	r23,32(sp)
 101d930:	dd800715 	stw	r22,28(sp)
 101d934:	dd400615 	stw	r21,24(sp)
 101d938:	dd000515 	stw	r20,20(sp)
 101d93c:	dcc00415 	stw	r19,16(sp)
 101d940:	dc400215 	stw	r17,8(sp)
 101d944:	dc000115 	stw	r16,4(sp)
 101d948:	288002c4 	addi	r2,r5,11
 101d94c:	00c00584 	movi	r3,22
 101d950:	2025883a 	mov	r18,r4
 101d954:	18807f2e 	bgeu	r3,r2,101db54 <_malloc_r+0x238>
 101d958:	047ffe04 	movi	r17,-8
 101d95c:	1462703a 	and	r17,r2,r17
 101d960:	8800a316 	blt	r17,zero,101dbf0 <_malloc_r+0x2d4>
 101d964:	8940a236 	bltu	r17,r5,101dbf0 <_malloc_r+0x2d4>
 101d968:	10270300 	call	1027030 <__malloc_lock>
 101d96c:	00807dc4 	movi	r2,503
 101d970:	1441e92e 	bgeu	r2,r17,101e118 <_malloc_r+0x7fc>
 101d974:	8804d27a 	srli	r2,r17,9
 101d978:	1000a126 	beq	r2,zero,101dc00 <_malloc_r+0x2e4>
 101d97c:	00c00104 	movi	r3,4
 101d980:	18811e36 	bltu	r3,r2,101ddfc <_malloc_r+0x4e0>
 101d984:	8804d1ba 	srli	r2,r17,6
 101d988:	12000e44 	addi	r8,r2,57
 101d98c:	11c00e04 	addi	r7,r2,56
 101d990:	4209883a 	add	r4,r8,r8
 101d994:	04c040f4 	movhi	r19,259
 101d998:	2109883a 	add	r4,r4,r4
 101d99c:	9ced4904 	addi	r19,r19,-19164
 101d9a0:	2109883a 	add	r4,r4,r4
 101d9a4:	9909883a 	add	r4,r19,r4
 101d9a8:	24000117 	ldw	r16,4(r4)
 101d9ac:	213ffe04 	addi	r4,r4,-8
 101d9b0:	24009726 	beq	r4,r16,101dc10 <_malloc_r+0x2f4>
 101d9b4:	80800117 	ldw	r2,4(r16)
 101d9b8:	01bfff04 	movi	r6,-4
 101d9bc:	014003c4 	movi	r5,15
 101d9c0:	1184703a 	and	r2,r2,r6
 101d9c4:	1447c83a 	sub	r3,r2,r17
 101d9c8:	28c00716 	blt	r5,r3,101d9e8 <_malloc_r+0xcc>
 101d9cc:	1800920e 	bge	r3,zero,101dc18 <_malloc_r+0x2fc>
 101d9d0:	84000317 	ldw	r16,12(r16)
 101d9d4:	24008e26 	beq	r4,r16,101dc10 <_malloc_r+0x2f4>
 101d9d8:	80800117 	ldw	r2,4(r16)
 101d9dc:	1184703a 	and	r2,r2,r6
 101d9e0:	1447c83a 	sub	r3,r2,r17
 101d9e4:	28fff90e 	bge	r5,r3,101d9cc <__alt_data_end+0xff01d9cc>
 101d9e8:	3809883a 	mov	r4,r7
 101d9ec:	018040f4 	movhi	r6,259
 101d9f0:	9c000417 	ldw	r16,16(r19)
 101d9f4:	31ad4904 	addi	r6,r6,-19164
 101d9f8:	32000204 	addi	r8,r6,8
 101d9fc:	82013426 	beq	r16,r8,101ded0 <_malloc_r+0x5b4>
 101da00:	80c00117 	ldw	r3,4(r16)
 101da04:	00bfff04 	movi	r2,-4
 101da08:	188e703a 	and	r7,r3,r2
 101da0c:	3c45c83a 	sub	r2,r7,r17
 101da10:	00c003c4 	movi	r3,15
 101da14:	18811f16 	blt	r3,r2,101de94 <_malloc_r+0x578>
 101da18:	32000515 	stw	r8,20(r6)
 101da1c:	32000415 	stw	r8,16(r6)
 101da20:	10007f0e 	bge	r2,zero,101dc20 <_malloc_r+0x304>
 101da24:	00807fc4 	movi	r2,511
 101da28:	11c0fd36 	bltu	r2,r7,101de20 <_malloc_r+0x504>
 101da2c:	3806d0fa 	srli	r3,r7,3
 101da30:	01c00044 	movi	r7,1
 101da34:	30800117 	ldw	r2,4(r6)
 101da38:	19400044 	addi	r5,r3,1
 101da3c:	294b883a 	add	r5,r5,r5
 101da40:	1807d0ba 	srai	r3,r3,2
 101da44:	294b883a 	add	r5,r5,r5
 101da48:	294b883a 	add	r5,r5,r5
 101da4c:	298b883a 	add	r5,r5,r6
 101da50:	38c6983a 	sll	r3,r7,r3
 101da54:	29c00017 	ldw	r7,0(r5)
 101da58:	2a7ffe04 	addi	r9,r5,-8
 101da5c:	1886b03a 	or	r3,r3,r2
 101da60:	82400315 	stw	r9,12(r16)
 101da64:	81c00215 	stw	r7,8(r16)
 101da68:	30c00115 	stw	r3,4(r6)
 101da6c:	2c000015 	stw	r16,0(r5)
 101da70:	3c000315 	stw	r16,12(r7)
 101da74:	2005d0ba 	srai	r2,r4,2
 101da78:	01400044 	movi	r5,1
 101da7c:	288a983a 	sll	r5,r5,r2
 101da80:	19406f36 	bltu	r3,r5,101dc40 <_malloc_r+0x324>
 101da84:	28c4703a 	and	r2,r5,r3
 101da88:	10000a1e 	bne	r2,zero,101dab4 <_malloc_r+0x198>
 101da8c:	00bfff04 	movi	r2,-4
 101da90:	294b883a 	add	r5,r5,r5
 101da94:	2088703a 	and	r4,r4,r2
 101da98:	28c4703a 	and	r2,r5,r3
 101da9c:	21000104 	addi	r4,r4,4
 101daa0:	1000041e 	bne	r2,zero,101dab4 <_malloc_r+0x198>
 101daa4:	294b883a 	add	r5,r5,r5
 101daa8:	28c4703a 	and	r2,r5,r3
 101daac:	21000104 	addi	r4,r4,4
 101dab0:	103ffc26 	beq	r2,zero,101daa4 <__alt_data_end+0xff01daa4>
 101dab4:	02bfff04 	movi	r10,-4
 101dab8:	024003c4 	movi	r9,15
 101dabc:	21800044 	addi	r6,r4,1
 101dac0:	318d883a 	add	r6,r6,r6
 101dac4:	318d883a 	add	r6,r6,r6
 101dac8:	318d883a 	add	r6,r6,r6
 101dacc:	998d883a 	add	r6,r19,r6
 101dad0:	333ffe04 	addi	r12,r6,-8
 101dad4:	2017883a 	mov	r11,r4
 101dad8:	31800104 	addi	r6,r6,4
 101dadc:	34000017 	ldw	r16,0(r6)
 101dae0:	31fffd04 	addi	r7,r6,-12
 101dae4:	81c0041e 	bne	r16,r7,101daf8 <_malloc_r+0x1dc>
 101dae8:	0000fb06 	br	101ded8 <_malloc_r+0x5bc>
 101daec:	1801030e 	bge	r3,zero,101defc <_malloc_r+0x5e0>
 101daf0:	84000317 	ldw	r16,12(r16)
 101daf4:	81c0f826 	beq	r16,r7,101ded8 <_malloc_r+0x5bc>
 101daf8:	80800117 	ldw	r2,4(r16)
 101dafc:	1284703a 	and	r2,r2,r10
 101db00:	1447c83a 	sub	r3,r2,r17
 101db04:	48fff90e 	bge	r9,r3,101daec <__alt_data_end+0xff01daec>
 101db08:	80800317 	ldw	r2,12(r16)
 101db0c:	81000217 	ldw	r4,8(r16)
 101db10:	89400054 	ori	r5,r17,1
 101db14:	81400115 	stw	r5,4(r16)
 101db18:	20800315 	stw	r2,12(r4)
 101db1c:	11000215 	stw	r4,8(r2)
 101db20:	8463883a 	add	r17,r16,r17
 101db24:	9c400515 	stw	r17,20(r19)
 101db28:	9c400415 	stw	r17,16(r19)
 101db2c:	18800054 	ori	r2,r3,1
 101db30:	88800115 	stw	r2,4(r17)
 101db34:	8a000315 	stw	r8,12(r17)
 101db38:	8a000215 	stw	r8,8(r17)
 101db3c:	88e3883a 	add	r17,r17,r3
 101db40:	88c00015 	stw	r3,0(r17)
 101db44:	9009883a 	mov	r4,r18
 101db48:	10270540 	call	1027054 <__malloc_unlock>
 101db4c:	80800204 	addi	r2,r16,8
 101db50:	00001b06 	br	101dbc0 <_malloc_r+0x2a4>
 101db54:	04400404 	movi	r17,16
 101db58:	89402536 	bltu	r17,r5,101dbf0 <_malloc_r+0x2d4>
 101db5c:	10270300 	call	1027030 <__malloc_lock>
 101db60:	00800184 	movi	r2,6
 101db64:	01000084 	movi	r4,2
 101db68:	04c040f4 	movhi	r19,259
 101db6c:	1085883a 	add	r2,r2,r2
 101db70:	9ced4904 	addi	r19,r19,-19164
 101db74:	1085883a 	add	r2,r2,r2
 101db78:	9885883a 	add	r2,r19,r2
 101db7c:	14000117 	ldw	r16,4(r2)
 101db80:	10fffe04 	addi	r3,r2,-8
 101db84:	80c0d926 	beq	r16,r3,101deec <_malloc_r+0x5d0>
 101db88:	80c00117 	ldw	r3,4(r16)
 101db8c:	81000317 	ldw	r4,12(r16)
 101db90:	00bfff04 	movi	r2,-4
 101db94:	1884703a 	and	r2,r3,r2
 101db98:	81400217 	ldw	r5,8(r16)
 101db9c:	8085883a 	add	r2,r16,r2
 101dba0:	10c00117 	ldw	r3,4(r2)
 101dba4:	29000315 	stw	r4,12(r5)
 101dba8:	21400215 	stw	r5,8(r4)
 101dbac:	18c00054 	ori	r3,r3,1
 101dbb0:	10c00115 	stw	r3,4(r2)
 101dbb4:	9009883a 	mov	r4,r18
 101dbb8:	10270540 	call	1027054 <__malloc_unlock>
 101dbbc:	80800204 	addi	r2,r16,8
 101dbc0:	dfc00a17 	ldw	ra,40(sp)
 101dbc4:	df000917 	ldw	fp,36(sp)
 101dbc8:	ddc00817 	ldw	r23,32(sp)
 101dbcc:	dd800717 	ldw	r22,28(sp)
 101dbd0:	dd400617 	ldw	r21,24(sp)
 101dbd4:	dd000517 	ldw	r20,20(sp)
 101dbd8:	dcc00417 	ldw	r19,16(sp)
 101dbdc:	dc800317 	ldw	r18,12(sp)
 101dbe0:	dc400217 	ldw	r17,8(sp)
 101dbe4:	dc000117 	ldw	r16,4(sp)
 101dbe8:	dec00b04 	addi	sp,sp,44
 101dbec:	f800283a 	ret
 101dbf0:	00800304 	movi	r2,12
 101dbf4:	90800015 	stw	r2,0(r18)
 101dbf8:	0005883a 	mov	r2,zero
 101dbfc:	003ff006 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101dc00:	01002004 	movi	r4,128
 101dc04:	02001004 	movi	r8,64
 101dc08:	01c00fc4 	movi	r7,63
 101dc0c:	003f6106 	br	101d994 <__alt_data_end+0xff01d994>
 101dc10:	4009883a 	mov	r4,r8
 101dc14:	003f7506 	br	101d9ec <__alt_data_end+0xff01d9ec>
 101dc18:	81000317 	ldw	r4,12(r16)
 101dc1c:	003fde06 	br	101db98 <__alt_data_end+0xff01db98>
 101dc20:	81c5883a 	add	r2,r16,r7
 101dc24:	11400117 	ldw	r5,4(r2)
 101dc28:	9009883a 	mov	r4,r18
 101dc2c:	29400054 	ori	r5,r5,1
 101dc30:	11400115 	stw	r5,4(r2)
 101dc34:	10270540 	call	1027054 <__malloc_unlock>
 101dc38:	80800204 	addi	r2,r16,8
 101dc3c:	003fe006 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101dc40:	9c000217 	ldw	r16,8(r19)
 101dc44:	00bfff04 	movi	r2,-4
 101dc48:	85800117 	ldw	r22,4(r16)
 101dc4c:	b0ac703a 	and	r22,r22,r2
 101dc50:	b4400336 	bltu	r22,r17,101dc60 <_malloc_r+0x344>
 101dc54:	b445c83a 	sub	r2,r22,r17
 101dc58:	00c003c4 	movi	r3,15
 101dc5c:	18805d16 	blt	r3,r2,101ddd4 <_malloc_r+0x4b8>
 101dc60:	05c040f4 	movhi	r23,259
 101dc64:	008040f4 	movhi	r2,259
 101dc68:	10ba2b04 	addi	r2,r2,-5972
 101dc6c:	bdf2de04 	addi	r23,r23,-13448
 101dc70:	15400017 	ldw	r21,0(r2)
 101dc74:	b8c00017 	ldw	r3,0(r23)
 101dc78:	00bfffc4 	movi	r2,-1
 101dc7c:	858d883a 	add	r6,r16,r22
 101dc80:	8d6b883a 	add	r21,r17,r21
 101dc84:	1880ea26 	beq	r3,r2,101e030 <_malloc_r+0x714>
 101dc88:	ad4403c4 	addi	r21,r21,4111
 101dc8c:	00bc0004 	movi	r2,-4096
 101dc90:	a8aa703a 	and	r21,r21,r2
 101dc94:	a80b883a 	mov	r5,r21
 101dc98:	9009883a 	mov	r4,r18
 101dc9c:	d9800015 	stw	r6,0(sp)
 101dca0:	101f93c0 	call	101f93c <_sbrk_r>
 101dca4:	1029883a 	mov	r20,r2
 101dca8:	00bfffc4 	movi	r2,-1
 101dcac:	d9800017 	ldw	r6,0(sp)
 101dcb0:	a080e826 	beq	r20,r2,101e054 <_malloc_r+0x738>
 101dcb4:	a180a636 	bltu	r20,r6,101df50 <_malloc_r+0x634>
 101dcb8:	070060f4 	movhi	fp,387
 101dcbc:	e73b6704 	addi	fp,fp,-4708
 101dcc0:	e0800017 	ldw	r2,0(fp)
 101dcc4:	a887883a 	add	r3,r21,r2
 101dcc8:	e0c00015 	stw	r3,0(fp)
 101dccc:	3500e626 	beq	r6,r20,101e068 <_malloc_r+0x74c>
 101dcd0:	b9000017 	ldw	r4,0(r23)
 101dcd4:	00bfffc4 	movi	r2,-1
 101dcd8:	2080ee26 	beq	r4,r2,101e094 <_malloc_r+0x778>
 101dcdc:	a185c83a 	sub	r2,r20,r6
 101dce0:	10c5883a 	add	r2,r2,r3
 101dce4:	e0800015 	stw	r2,0(fp)
 101dce8:	a0c001cc 	andi	r3,r20,7
 101dcec:	1800bc26 	beq	r3,zero,101dfe0 <_malloc_r+0x6c4>
 101dcf0:	a0e9c83a 	sub	r20,r20,r3
 101dcf4:	00840204 	movi	r2,4104
 101dcf8:	a5000204 	addi	r20,r20,8
 101dcfc:	10c7c83a 	sub	r3,r2,r3
 101dd00:	a545883a 	add	r2,r20,r21
 101dd04:	1083ffcc 	andi	r2,r2,4095
 101dd08:	18abc83a 	sub	r21,r3,r2
 101dd0c:	a80b883a 	mov	r5,r21
 101dd10:	9009883a 	mov	r4,r18
 101dd14:	101f93c0 	call	101f93c <_sbrk_r>
 101dd18:	00ffffc4 	movi	r3,-1
 101dd1c:	10c0e126 	beq	r2,r3,101e0a4 <_malloc_r+0x788>
 101dd20:	1505c83a 	sub	r2,r2,r20
 101dd24:	1545883a 	add	r2,r2,r21
 101dd28:	10800054 	ori	r2,r2,1
 101dd2c:	e0c00017 	ldw	r3,0(fp)
 101dd30:	9d000215 	stw	r20,8(r19)
 101dd34:	a0800115 	stw	r2,4(r20)
 101dd38:	a8c7883a 	add	r3,r21,r3
 101dd3c:	e0c00015 	stw	r3,0(fp)
 101dd40:	84c00e26 	beq	r16,r19,101dd7c <_malloc_r+0x460>
 101dd44:	018003c4 	movi	r6,15
 101dd48:	3580a72e 	bgeu	r6,r22,101dfe8 <_malloc_r+0x6cc>
 101dd4c:	81400117 	ldw	r5,4(r16)
 101dd50:	013ffe04 	movi	r4,-8
 101dd54:	b0bffd04 	addi	r2,r22,-12
 101dd58:	1104703a 	and	r2,r2,r4
 101dd5c:	2900004c 	andi	r4,r5,1
 101dd60:	2088b03a 	or	r4,r4,r2
 101dd64:	81000115 	stw	r4,4(r16)
 101dd68:	01400144 	movi	r5,5
 101dd6c:	8089883a 	add	r4,r16,r2
 101dd70:	21400115 	stw	r5,4(r4)
 101dd74:	21400215 	stw	r5,8(r4)
 101dd78:	3080cd36 	bltu	r6,r2,101e0b0 <_malloc_r+0x794>
 101dd7c:	008040f4 	movhi	r2,259
 101dd80:	10ba2a04 	addi	r2,r2,-5976
 101dd84:	11000017 	ldw	r4,0(r2)
 101dd88:	20c0012e 	bgeu	r4,r3,101dd90 <_malloc_r+0x474>
 101dd8c:	10c00015 	stw	r3,0(r2)
 101dd90:	008040f4 	movhi	r2,259
 101dd94:	10ba2904 	addi	r2,r2,-5980
 101dd98:	11000017 	ldw	r4,0(r2)
 101dd9c:	9c000217 	ldw	r16,8(r19)
 101dda0:	20c0012e 	bgeu	r4,r3,101dda8 <_malloc_r+0x48c>
 101dda4:	10c00015 	stw	r3,0(r2)
 101dda8:	80c00117 	ldw	r3,4(r16)
 101ddac:	00bfff04 	movi	r2,-4
 101ddb0:	1886703a 	and	r3,r3,r2
 101ddb4:	1c45c83a 	sub	r2,r3,r17
 101ddb8:	1c400236 	bltu	r3,r17,101ddc4 <_malloc_r+0x4a8>
 101ddbc:	00c003c4 	movi	r3,15
 101ddc0:	18800416 	blt	r3,r2,101ddd4 <_malloc_r+0x4b8>
 101ddc4:	9009883a 	mov	r4,r18
 101ddc8:	10270540 	call	1027054 <__malloc_unlock>
 101ddcc:	0005883a 	mov	r2,zero
 101ddd0:	003f7b06 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101ddd4:	88c00054 	ori	r3,r17,1
 101ddd8:	80c00115 	stw	r3,4(r16)
 101dddc:	8463883a 	add	r17,r16,r17
 101dde0:	10800054 	ori	r2,r2,1
 101dde4:	9c400215 	stw	r17,8(r19)
 101dde8:	88800115 	stw	r2,4(r17)
 101ddec:	9009883a 	mov	r4,r18
 101ddf0:	10270540 	call	1027054 <__malloc_unlock>
 101ddf4:	80800204 	addi	r2,r16,8
 101ddf8:	003f7106 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101ddfc:	00c00504 	movi	r3,20
 101de00:	18804a2e 	bgeu	r3,r2,101df2c <_malloc_r+0x610>
 101de04:	00c01504 	movi	r3,84
 101de08:	18806e36 	bltu	r3,r2,101dfc4 <_malloc_r+0x6a8>
 101de0c:	8804d33a 	srli	r2,r17,12
 101de10:	12001bc4 	addi	r8,r2,111
 101de14:	11c01b84 	addi	r7,r2,110
 101de18:	4209883a 	add	r4,r8,r8
 101de1c:	003edd06 	br	101d994 <__alt_data_end+0xff01d994>
 101de20:	3804d27a 	srli	r2,r7,9
 101de24:	00c00104 	movi	r3,4
 101de28:	1880442e 	bgeu	r3,r2,101df3c <_malloc_r+0x620>
 101de2c:	00c00504 	movi	r3,20
 101de30:	18808136 	bltu	r3,r2,101e038 <_malloc_r+0x71c>
 101de34:	11401704 	addi	r5,r2,92
 101de38:	10c016c4 	addi	r3,r2,91
 101de3c:	294b883a 	add	r5,r5,r5
 101de40:	294b883a 	add	r5,r5,r5
 101de44:	294b883a 	add	r5,r5,r5
 101de48:	994b883a 	add	r5,r19,r5
 101de4c:	28800017 	ldw	r2,0(r5)
 101de50:	018040f4 	movhi	r6,259
 101de54:	297ffe04 	addi	r5,r5,-8
 101de58:	31ad4904 	addi	r6,r6,-19164
 101de5c:	28806526 	beq	r5,r2,101dff4 <_malloc_r+0x6d8>
 101de60:	01bfff04 	movi	r6,-4
 101de64:	10c00117 	ldw	r3,4(r2)
 101de68:	1986703a 	and	r3,r3,r6
 101de6c:	38c0022e 	bgeu	r7,r3,101de78 <_malloc_r+0x55c>
 101de70:	10800217 	ldw	r2,8(r2)
 101de74:	28bffb1e 	bne	r5,r2,101de64 <__alt_data_end+0xff01de64>
 101de78:	11400317 	ldw	r5,12(r2)
 101de7c:	98c00117 	ldw	r3,4(r19)
 101de80:	81400315 	stw	r5,12(r16)
 101de84:	80800215 	stw	r2,8(r16)
 101de88:	2c000215 	stw	r16,8(r5)
 101de8c:	14000315 	stw	r16,12(r2)
 101de90:	003ef806 	br	101da74 <__alt_data_end+0xff01da74>
 101de94:	88c00054 	ori	r3,r17,1
 101de98:	80c00115 	stw	r3,4(r16)
 101de9c:	8463883a 	add	r17,r16,r17
 101dea0:	34400515 	stw	r17,20(r6)
 101dea4:	34400415 	stw	r17,16(r6)
 101dea8:	10c00054 	ori	r3,r2,1
 101deac:	8a000315 	stw	r8,12(r17)
 101deb0:	8a000215 	stw	r8,8(r17)
 101deb4:	88c00115 	stw	r3,4(r17)
 101deb8:	88a3883a 	add	r17,r17,r2
 101debc:	88800015 	stw	r2,0(r17)
 101dec0:	9009883a 	mov	r4,r18
 101dec4:	10270540 	call	1027054 <__malloc_unlock>
 101dec8:	80800204 	addi	r2,r16,8
 101decc:	003f3c06 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101ded0:	30c00117 	ldw	r3,4(r6)
 101ded4:	003ee706 	br	101da74 <__alt_data_end+0xff01da74>
 101ded8:	5ac00044 	addi	r11,r11,1
 101dedc:	588000cc 	andi	r2,r11,3
 101dee0:	31800204 	addi	r6,r6,8
 101dee4:	103efd1e 	bne	r2,zero,101dadc <__alt_data_end+0xff01dadc>
 101dee8:	00002406 	br	101df7c <_malloc_r+0x660>
 101deec:	14000317 	ldw	r16,12(r2)
 101def0:	143f251e 	bne	r2,r16,101db88 <__alt_data_end+0xff01db88>
 101def4:	21000084 	addi	r4,r4,2
 101def8:	003ebc06 	br	101d9ec <__alt_data_end+0xff01d9ec>
 101defc:	8085883a 	add	r2,r16,r2
 101df00:	10c00117 	ldw	r3,4(r2)
 101df04:	81000317 	ldw	r4,12(r16)
 101df08:	81400217 	ldw	r5,8(r16)
 101df0c:	18c00054 	ori	r3,r3,1
 101df10:	10c00115 	stw	r3,4(r2)
 101df14:	29000315 	stw	r4,12(r5)
 101df18:	21400215 	stw	r5,8(r4)
 101df1c:	9009883a 	mov	r4,r18
 101df20:	10270540 	call	1027054 <__malloc_unlock>
 101df24:	80800204 	addi	r2,r16,8
 101df28:	003f2506 	br	101dbc0 <__alt_data_end+0xff01dbc0>
 101df2c:	12001704 	addi	r8,r2,92
 101df30:	11c016c4 	addi	r7,r2,91
 101df34:	4209883a 	add	r4,r8,r8
 101df38:	003e9606 	br	101d994 <__alt_data_end+0xff01d994>
 101df3c:	3804d1ba 	srli	r2,r7,6
 101df40:	11400e44 	addi	r5,r2,57
 101df44:	10c00e04 	addi	r3,r2,56
 101df48:	294b883a 	add	r5,r5,r5
 101df4c:	003fbc06 	br	101de40 <__alt_data_end+0xff01de40>
 101df50:	84ff5926 	beq	r16,r19,101dcb8 <__alt_data_end+0xff01dcb8>
 101df54:	008040f4 	movhi	r2,259
 101df58:	10ad4904 	addi	r2,r2,-19164
 101df5c:	14000217 	ldw	r16,8(r2)
 101df60:	00bfff04 	movi	r2,-4
 101df64:	80c00117 	ldw	r3,4(r16)
 101df68:	1886703a 	and	r3,r3,r2
 101df6c:	003f9106 	br	101ddb4 <__alt_data_end+0xff01ddb4>
 101df70:	60800217 	ldw	r2,8(r12)
 101df74:	213fffc4 	addi	r4,r4,-1
 101df78:	1300651e 	bne	r2,r12,101e110 <_malloc_r+0x7f4>
 101df7c:	208000cc 	andi	r2,r4,3
 101df80:	633ffe04 	addi	r12,r12,-8
 101df84:	103ffa1e 	bne	r2,zero,101df70 <__alt_data_end+0xff01df70>
 101df88:	98800117 	ldw	r2,4(r19)
 101df8c:	0146303a 	nor	r3,zero,r5
 101df90:	1884703a 	and	r2,r3,r2
 101df94:	98800115 	stw	r2,4(r19)
 101df98:	294b883a 	add	r5,r5,r5
 101df9c:	117f2836 	bltu	r2,r5,101dc40 <__alt_data_end+0xff01dc40>
 101dfa0:	283f2726 	beq	r5,zero,101dc40 <__alt_data_end+0xff01dc40>
 101dfa4:	2886703a 	and	r3,r5,r2
 101dfa8:	5809883a 	mov	r4,r11
 101dfac:	183ec31e 	bne	r3,zero,101dabc <__alt_data_end+0xff01dabc>
 101dfb0:	294b883a 	add	r5,r5,r5
 101dfb4:	2886703a 	and	r3,r5,r2
 101dfb8:	21000104 	addi	r4,r4,4
 101dfbc:	183ffc26 	beq	r3,zero,101dfb0 <__alt_data_end+0xff01dfb0>
 101dfc0:	003ebe06 	br	101dabc <__alt_data_end+0xff01dabc>
 101dfc4:	00c05504 	movi	r3,340
 101dfc8:	18801236 	bltu	r3,r2,101e014 <_malloc_r+0x6f8>
 101dfcc:	8804d3fa 	srli	r2,r17,15
 101dfd0:	12001e04 	addi	r8,r2,120
 101dfd4:	11c01dc4 	addi	r7,r2,119
 101dfd8:	4209883a 	add	r4,r8,r8
 101dfdc:	003e6d06 	br	101d994 <__alt_data_end+0xff01d994>
 101dfe0:	00c40004 	movi	r3,4096
 101dfe4:	003f4606 	br	101dd00 <__alt_data_end+0xff01dd00>
 101dfe8:	00800044 	movi	r2,1
 101dfec:	a0800115 	stw	r2,4(r20)
 101dff0:	003f7406 	br	101ddc4 <__alt_data_end+0xff01ddc4>
 101dff4:	1805d0ba 	srai	r2,r3,2
 101dff8:	01c00044 	movi	r7,1
 101dffc:	30c00117 	ldw	r3,4(r6)
 101e000:	388e983a 	sll	r7,r7,r2
 101e004:	2805883a 	mov	r2,r5
 101e008:	38c6b03a 	or	r3,r7,r3
 101e00c:	30c00115 	stw	r3,4(r6)
 101e010:	003f9b06 	br	101de80 <__alt_data_end+0xff01de80>
 101e014:	00c15504 	movi	r3,1364
 101e018:	18801a36 	bltu	r3,r2,101e084 <_malloc_r+0x768>
 101e01c:	8804d4ba 	srli	r2,r17,18
 101e020:	12001f44 	addi	r8,r2,125
 101e024:	11c01f04 	addi	r7,r2,124
 101e028:	4209883a 	add	r4,r8,r8
 101e02c:	003e5906 	br	101d994 <__alt_data_end+0xff01d994>
 101e030:	ad400404 	addi	r21,r21,16
 101e034:	003f1706 	br	101dc94 <__alt_data_end+0xff01dc94>
 101e038:	00c01504 	movi	r3,84
 101e03c:	18802336 	bltu	r3,r2,101e0cc <_malloc_r+0x7b0>
 101e040:	3804d33a 	srli	r2,r7,12
 101e044:	11401bc4 	addi	r5,r2,111
 101e048:	10c01b84 	addi	r3,r2,110
 101e04c:	294b883a 	add	r5,r5,r5
 101e050:	003f7b06 	br	101de40 <__alt_data_end+0xff01de40>
 101e054:	9c000217 	ldw	r16,8(r19)
 101e058:	00bfff04 	movi	r2,-4
 101e05c:	80c00117 	ldw	r3,4(r16)
 101e060:	1886703a 	and	r3,r3,r2
 101e064:	003f5306 	br	101ddb4 <__alt_data_end+0xff01ddb4>
 101e068:	3083ffcc 	andi	r2,r6,4095
 101e06c:	103f181e 	bne	r2,zero,101dcd0 <__alt_data_end+0xff01dcd0>
 101e070:	99000217 	ldw	r4,8(r19)
 101e074:	b545883a 	add	r2,r22,r21
 101e078:	10800054 	ori	r2,r2,1
 101e07c:	20800115 	stw	r2,4(r4)
 101e080:	003f3e06 	br	101dd7c <__alt_data_end+0xff01dd7c>
 101e084:	01003f84 	movi	r4,254
 101e088:	02001fc4 	movi	r8,127
 101e08c:	01c01f84 	movi	r7,126
 101e090:	003e4006 	br	101d994 <__alt_data_end+0xff01d994>
 101e094:	008040f4 	movhi	r2,259
 101e098:	10b2de04 	addi	r2,r2,-13448
 101e09c:	15000015 	stw	r20,0(r2)
 101e0a0:	003f1106 	br	101dce8 <__alt_data_end+0xff01dce8>
 101e0a4:	00800044 	movi	r2,1
 101e0a8:	002b883a 	mov	r21,zero
 101e0ac:	003f1f06 	br	101dd2c <__alt_data_end+0xff01dd2c>
 101e0b0:	81400204 	addi	r5,r16,8
 101e0b4:	9009883a 	mov	r4,r18
 101e0b8:	101cd300 	call	101cd30 <_free_r>
 101e0bc:	008060f4 	movhi	r2,387
 101e0c0:	10bb6704 	addi	r2,r2,-4708
 101e0c4:	10c00017 	ldw	r3,0(r2)
 101e0c8:	003f2c06 	br	101dd7c <__alt_data_end+0xff01dd7c>
 101e0cc:	00c05504 	movi	r3,340
 101e0d0:	18800536 	bltu	r3,r2,101e0e8 <_malloc_r+0x7cc>
 101e0d4:	3804d3fa 	srli	r2,r7,15
 101e0d8:	11401e04 	addi	r5,r2,120
 101e0dc:	10c01dc4 	addi	r3,r2,119
 101e0e0:	294b883a 	add	r5,r5,r5
 101e0e4:	003f5606 	br	101de40 <__alt_data_end+0xff01de40>
 101e0e8:	00c15504 	movi	r3,1364
 101e0ec:	18800536 	bltu	r3,r2,101e104 <_malloc_r+0x7e8>
 101e0f0:	3804d4ba 	srli	r2,r7,18
 101e0f4:	11401f44 	addi	r5,r2,125
 101e0f8:	10c01f04 	addi	r3,r2,124
 101e0fc:	294b883a 	add	r5,r5,r5
 101e100:	003f4f06 	br	101de40 <__alt_data_end+0xff01de40>
 101e104:	01403f84 	movi	r5,254
 101e108:	00c01f84 	movi	r3,126
 101e10c:	003f4c06 	br	101de40 <__alt_data_end+0xff01de40>
 101e110:	98800117 	ldw	r2,4(r19)
 101e114:	003fa006 	br	101df98 <__alt_data_end+0xff01df98>
 101e118:	8808d0fa 	srli	r4,r17,3
 101e11c:	20800044 	addi	r2,r4,1
 101e120:	1085883a 	add	r2,r2,r2
 101e124:	003e9006 	br	101db68 <__alt_data_end+0xff01db68>

0101e128 <memchr>:
 101e128:	208000cc 	andi	r2,r4,3
 101e12c:	280f883a 	mov	r7,r5
 101e130:	10003426 	beq	r2,zero,101e204 <memchr+0xdc>
 101e134:	30bfffc4 	addi	r2,r6,-1
 101e138:	30001a26 	beq	r6,zero,101e1a4 <memchr+0x7c>
 101e13c:	20c00003 	ldbu	r3,0(r4)
 101e140:	29803fcc 	andi	r6,r5,255
 101e144:	30c0051e 	bne	r6,r3,101e15c <memchr+0x34>
 101e148:	00001806 	br	101e1ac <memchr+0x84>
 101e14c:	10001526 	beq	r2,zero,101e1a4 <memchr+0x7c>
 101e150:	20c00003 	ldbu	r3,0(r4)
 101e154:	10bfffc4 	addi	r2,r2,-1
 101e158:	30c01426 	beq	r6,r3,101e1ac <memchr+0x84>
 101e15c:	21000044 	addi	r4,r4,1
 101e160:	20c000cc 	andi	r3,r4,3
 101e164:	183ff91e 	bne	r3,zero,101e14c <__alt_data_end+0xff01e14c>
 101e168:	020000c4 	movi	r8,3
 101e16c:	40801136 	bltu	r8,r2,101e1b4 <memchr+0x8c>
 101e170:	10000c26 	beq	r2,zero,101e1a4 <memchr+0x7c>
 101e174:	20c00003 	ldbu	r3,0(r4)
 101e178:	29403fcc 	andi	r5,r5,255
 101e17c:	28c00b26 	beq	r5,r3,101e1ac <memchr+0x84>
 101e180:	20c00044 	addi	r3,r4,1
 101e184:	39803fcc 	andi	r6,r7,255
 101e188:	2089883a 	add	r4,r4,r2
 101e18c:	00000306 	br	101e19c <memchr+0x74>
 101e190:	18c00044 	addi	r3,r3,1
 101e194:	197fffc3 	ldbu	r5,-1(r3)
 101e198:	31400526 	beq	r6,r5,101e1b0 <memchr+0x88>
 101e19c:	1805883a 	mov	r2,r3
 101e1a0:	20fffb1e 	bne	r4,r3,101e190 <__alt_data_end+0xff01e190>
 101e1a4:	0005883a 	mov	r2,zero
 101e1a8:	f800283a 	ret
 101e1ac:	2005883a 	mov	r2,r4
 101e1b0:	f800283a 	ret
 101e1b4:	28c03fcc 	andi	r3,r5,255
 101e1b8:	1812923a 	slli	r9,r3,8
 101e1bc:	02ffbff4 	movhi	r11,65279
 101e1c0:	02a02074 	movhi	r10,32897
 101e1c4:	48d2b03a 	or	r9,r9,r3
 101e1c8:	4806943a 	slli	r3,r9,16
 101e1cc:	5affbfc4 	addi	r11,r11,-257
 101e1d0:	52a02004 	addi	r10,r10,-32640
 101e1d4:	48d2b03a 	or	r9,r9,r3
 101e1d8:	20c00017 	ldw	r3,0(r4)
 101e1dc:	48c6f03a 	xor	r3,r9,r3
 101e1e0:	1acd883a 	add	r6,r3,r11
 101e1e4:	00c6303a 	nor	r3,zero,r3
 101e1e8:	30c6703a 	and	r3,r6,r3
 101e1ec:	1a86703a 	and	r3,r3,r10
 101e1f0:	183fe01e 	bne	r3,zero,101e174 <__alt_data_end+0xff01e174>
 101e1f4:	10bfff04 	addi	r2,r2,-4
 101e1f8:	21000104 	addi	r4,r4,4
 101e1fc:	40bff636 	bltu	r8,r2,101e1d8 <__alt_data_end+0xff01e1d8>
 101e200:	003fdb06 	br	101e170 <__alt_data_end+0xff01e170>
 101e204:	3005883a 	mov	r2,r6
 101e208:	003fd706 	br	101e168 <__alt_data_end+0xff01e168>

0101e20c <memmove>:
 101e20c:	2005883a 	mov	r2,r4
 101e210:	29000b2e 	bgeu	r5,r4,101e240 <memmove+0x34>
 101e214:	298f883a 	add	r7,r5,r6
 101e218:	21c0092e 	bgeu	r4,r7,101e240 <memmove+0x34>
 101e21c:	2187883a 	add	r3,r4,r6
 101e220:	198bc83a 	sub	r5,r3,r6
 101e224:	30004826 	beq	r6,zero,101e348 <memmove+0x13c>
 101e228:	39ffffc4 	addi	r7,r7,-1
 101e22c:	39000003 	ldbu	r4,0(r7)
 101e230:	18ffffc4 	addi	r3,r3,-1
 101e234:	19000005 	stb	r4,0(r3)
 101e238:	28fffb1e 	bne	r5,r3,101e228 <__alt_data_end+0xff01e228>
 101e23c:	f800283a 	ret
 101e240:	00c003c4 	movi	r3,15
 101e244:	1980412e 	bgeu	r3,r6,101e34c <memmove+0x140>
 101e248:	2886b03a 	or	r3,r5,r2
 101e24c:	18c000cc 	andi	r3,r3,3
 101e250:	1800401e 	bne	r3,zero,101e354 <memmove+0x148>
 101e254:	33fffc04 	addi	r15,r6,-16
 101e258:	781ed13a 	srli	r15,r15,4
 101e25c:	28c00104 	addi	r3,r5,4
 101e260:	13400104 	addi	r13,r2,4
 101e264:	781c913a 	slli	r14,r15,4
 101e268:	2b000204 	addi	r12,r5,8
 101e26c:	12c00204 	addi	r11,r2,8
 101e270:	73800504 	addi	r14,r14,20
 101e274:	2a800304 	addi	r10,r5,12
 101e278:	12400304 	addi	r9,r2,12
 101e27c:	2b9d883a 	add	r14,r5,r14
 101e280:	2811883a 	mov	r8,r5
 101e284:	100f883a 	mov	r7,r2
 101e288:	41000017 	ldw	r4,0(r8)
 101e28c:	39c00404 	addi	r7,r7,16
 101e290:	18c00404 	addi	r3,r3,16
 101e294:	393ffc15 	stw	r4,-16(r7)
 101e298:	193ffc17 	ldw	r4,-16(r3)
 101e29c:	6b400404 	addi	r13,r13,16
 101e2a0:	5ac00404 	addi	r11,r11,16
 101e2a4:	693ffc15 	stw	r4,-16(r13)
 101e2a8:	61000017 	ldw	r4,0(r12)
 101e2ac:	4a400404 	addi	r9,r9,16
 101e2b0:	42000404 	addi	r8,r8,16
 101e2b4:	593ffc15 	stw	r4,-16(r11)
 101e2b8:	51000017 	ldw	r4,0(r10)
 101e2bc:	63000404 	addi	r12,r12,16
 101e2c0:	52800404 	addi	r10,r10,16
 101e2c4:	493ffc15 	stw	r4,-16(r9)
 101e2c8:	1bbfef1e 	bne	r3,r14,101e288 <__alt_data_end+0xff01e288>
 101e2cc:	79000044 	addi	r4,r15,1
 101e2d0:	2008913a 	slli	r4,r4,4
 101e2d4:	328003cc 	andi	r10,r6,15
 101e2d8:	02c000c4 	movi	r11,3
 101e2dc:	1107883a 	add	r3,r2,r4
 101e2e0:	290b883a 	add	r5,r5,r4
 101e2e4:	5a801e2e 	bgeu	r11,r10,101e360 <memmove+0x154>
 101e2e8:	1813883a 	mov	r9,r3
 101e2ec:	2811883a 	mov	r8,r5
 101e2f0:	500f883a 	mov	r7,r10
 101e2f4:	41000017 	ldw	r4,0(r8)
 101e2f8:	4a400104 	addi	r9,r9,4
 101e2fc:	39ffff04 	addi	r7,r7,-4
 101e300:	493fff15 	stw	r4,-4(r9)
 101e304:	42000104 	addi	r8,r8,4
 101e308:	59fffa36 	bltu	r11,r7,101e2f4 <__alt_data_end+0xff01e2f4>
 101e30c:	513fff04 	addi	r4,r10,-4
 101e310:	2008d0ba 	srli	r4,r4,2
 101e314:	318000cc 	andi	r6,r6,3
 101e318:	21000044 	addi	r4,r4,1
 101e31c:	2109883a 	add	r4,r4,r4
 101e320:	2109883a 	add	r4,r4,r4
 101e324:	1907883a 	add	r3,r3,r4
 101e328:	290b883a 	add	r5,r5,r4
 101e32c:	30000b26 	beq	r6,zero,101e35c <memmove+0x150>
 101e330:	198d883a 	add	r6,r3,r6
 101e334:	29c00003 	ldbu	r7,0(r5)
 101e338:	18c00044 	addi	r3,r3,1
 101e33c:	29400044 	addi	r5,r5,1
 101e340:	19ffffc5 	stb	r7,-1(r3)
 101e344:	19bffb1e 	bne	r3,r6,101e334 <__alt_data_end+0xff01e334>
 101e348:	f800283a 	ret
 101e34c:	1007883a 	mov	r3,r2
 101e350:	003ff606 	br	101e32c <__alt_data_end+0xff01e32c>
 101e354:	1007883a 	mov	r3,r2
 101e358:	003ff506 	br	101e330 <__alt_data_end+0xff01e330>
 101e35c:	f800283a 	ret
 101e360:	500d883a 	mov	r6,r10
 101e364:	003ff106 	br	101e32c <__alt_data_end+0xff01e32c>

0101e368 <_Balloc>:
 101e368:	20801317 	ldw	r2,76(r4)
 101e36c:	defffc04 	addi	sp,sp,-16
 101e370:	dc400115 	stw	r17,4(sp)
 101e374:	dc000015 	stw	r16,0(sp)
 101e378:	dfc00315 	stw	ra,12(sp)
 101e37c:	dc800215 	stw	r18,8(sp)
 101e380:	2023883a 	mov	r17,r4
 101e384:	2821883a 	mov	r16,r5
 101e388:	10000f26 	beq	r2,zero,101e3c8 <_Balloc+0x60>
 101e38c:	8407883a 	add	r3,r16,r16
 101e390:	18c7883a 	add	r3,r3,r3
 101e394:	10c7883a 	add	r3,r2,r3
 101e398:	18800017 	ldw	r2,0(r3)
 101e39c:	10001126 	beq	r2,zero,101e3e4 <_Balloc+0x7c>
 101e3a0:	11000017 	ldw	r4,0(r2)
 101e3a4:	19000015 	stw	r4,0(r3)
 101e3a8:	10000415 	stw	zero,16(r2)
 101e3ac:	10000315 	stw	zero,12(r2)
 101e3b0:	dfc00317 	ldw	ra,12(sp)
 101e3b4:	dc800217 	ldw	r18,8(sp)
 101e3b8:	dc400117 	ldw	r17,4(sp)
 101e3bc:	dc000017 	ldw	r16,0(sp)
 101e3c0:	dec00404 	addi	sp,sp,16
 101e3c4:	f800283a 	ret
 101e3c8:	01800844 	movi	r6,33
 101e3cc:	01400104 	movi	r5,4
 101e3d0:	10228d80 	call	10228d8 <_calloc_r>
 101e3d4:	88801315 	stw	r2,76(r17)
 101e3d8:	103fec1e 	bne	r2,zero,101e38c <__alt_data_end+0xff01e38c>
 101e3dc:	0005883a 	mov	r2,zero
 101e3e0:	003ff306 	br	101e3b0 <__alt_data_end+0xff01e3b0>
 101e3e4:	01400044 	movi	r5,1
 101e3e8:	2c24983a 	sll	r18,r5,r16
 101e3ec:	8809883a 	mov	r4,r17
 101e3f0:	91800144 	addi	r6,r18,5
 101e3f4:	318d883a 	add	r6,r6,r6
 101e3f8:	318d883a 	add	r6,r6,r6
 101e3fc:	10228d80 	call	10228d8 <_calloc_r>
 101e400:	103ff626 	beq	r2,zero,101e3dc <__alt_data_end+0xff01e3dc>
 101e404:	14000115 	stw	r16,4(r2)
 101e408:	14800215 	stw	r18,8(r2)
 101e40c:	003fe606 	br	101e3a8 <__alt_data_end+0xff01e3a8>

0101e410 <_Bfree>:
 101e410:	28000826 	beq	r5,zero,101e434 <_Bfree+0x24>
 101e414:	28c00117 	ldw	r3,4(r5)
 101e418:	20801317 	ldw	r2,76(r4)
 101e41c:	18c7883a 	add	r3,r3,r3
 101e420:	18c7883a 	add	r3,r3,r3
 101e424:	10c5883a 	add	r2,r2,r3
 101e428:	10c00017 	ldw	r3,0(r2)
 101e42c:	28c00015 	stw	r3,0(r5)
 101e430:	11400015 	stw	r5,0(r2)
 101e434:	f800283a 	ret

0101e438 <__multadd>:
 101e438:	defffa04 	addi	sp,sp,-24
 101e43c:	dc800315 	stw	r18,12(sp)
 101e440:	dc400215 	stw	r17,8(sp)
 101e444:	dc000115 	stw	r16,4(sp)
 101e448:	2823883a 	mov	r17,r5
 101e44c:	2c000417 	ldw	r16,16(r5)
 101e450:	dfc00515 	stw	ra,20(sp)
 101e454:	dcc00415 	stw	r19,16(sp)
 101e458:	2025883a 	mov	r18,r4
 101e45c:	29400504 	addi	r5,r5,20
 101e460:	0011883a 	mov	r8,zero
 101e464:	28c00017 	ldw	r3,0(r5)
 101e468:	29400104 	addi	r5,r5,4
 101e46c:	42000044 	addi	r8,r8,1
 101e470:	18bfffcc 	andi	r2,r3,65535
 101e474:	1185383a 	mul	r2,r2,r6
 101e478:	1806d43a 	srli	r3,r3,16
 101e47c:	11cf883a 	add	r7,r2,r7
 101e480:	3808d43a 	srli	r4,r7,16
 101e484:	1987383a 	mul	r3,r3,r6
 101e488:	38bfffcc 	andi	r2,r7,65535
 101e48c:	1907883a 	add	r3,r3,r4
 101e490:	1808943a 	slli	r4,r3,16
 101e494:	180ed43a 	srli	r7,r3,16
 101e498:	2085883a 	add	r2,r4,r2
 101e49c:	28bfff15 	stw	r2,-4(r5)
 101e4a0:	443ff016 	blt	r8,r16,101e464 <__alt_data_end+0xff01e464>
 101e4a4:	38000926 	beq	r7,zero,101e4cc <__multadd+0x94>
 101e4a8:	88800217 	ldw	r2,8(r17)
 101e4ac:	80800f0e 	bge	r16,r2,101e4ec <__multadd+0xb4>
 101e4b0:	80800144 	addi	r2,r16,5
 101e4b4:	1085883a 	add	r2,r2,r2
 101e4b8:	1085883a 	add	r2,r2,r2
 101e4bc:	8885883a 	add	r2,r17,r2
 101e4c0:	11c00015 	stw	r7,0(r2)
 101e4c4:	84000044 	addi	r16,r16,1
 101e4c8:	8c000415 	stw	r16,16(r17)
 101e4cc:	8805883a 	mov	r2,r17
 101e4d0:	dfc00517 	ldw	ra,20(sp)
 101e4d4:	dcc00417 	ldw	r19,16(sp)
 101e4d8:	dc800317 	ldw	r18,12(sp)
 101e4dc:	dc400217 	ldw	r17,8(sp)
 101e4e0:	dc000117 	ldw	r16,4(sp)
 101e4e4:	dec00604 	addi	sp,sp,24
 101e4e8:	f800283a 	ret
 101e4ec:	89400117 	ldw	r5,4(r17)
 101e4f0:	9009883a 	mov	r4,r18
 101e4f4:	d9c00015 	stw	r7,0(sp)
 101e4f8:	29400044 	addi	r5,r5,1
 101e4fc:	101e3680 	call	101e368 <_Balloc>
 101e500:	89800417 	ldw	r6,16(r17)
 101e504:	89400304 	addi	r5,r17,12
 101e508:	11000304 	addi	r4,r2,12
 101e50c:	31800084 	addi	r6,r6,2
 101e510:	318d883a 	add	r6,r6,r6
 101e514:	318d883a 	add	r6,r6,r6
 101e518:	1027883a 	mov	r19,r2
 101e51c:	10157f40 	call	10157f4 <memcpy>
 101e520:	d9c00017 	ldw	r7,0(sp)
 101e524:	88000a26 	beq	r17,zero,101e550 <__multadd+0x118>
 101e528:	88c00117 	ldw	r3,4(r17)
 101e52c:	90801317 	ldw	r2,76(r18)
 101e530:	18c7883a 	add	r3,r3,r3
 101e534:	18c7883a 	add	r3,r3,r3
 101e538:	10c5883a 	add	r2,r2,r3
 101e53c:	10c00017 	ldw	r3,0(r2)
 101e540:	88c00015 	stw	r3,0(r17)
 101e544:	14400015 	stw	r17,0(r2)
 101e548:	9823883a 	mov	r17,r19
 101e54c:	003fd806 	br	101e4b0 <__alt_data_end+0xff01e4b0>
 101e550:	9823883a 	mov	r17,r19
 101e554:	003fd606 	br	101e4b0 <__alt_data_end+0xff01e4b0>

0101e558 <__s2b>:
 101e558:	defff904 	addi	sp,sp,-28
 101e55c:	dc400115 	stw	r17,4(sp)
 101e560:	dc000015 	stw	r16,0(sp)
 101e564:	2023883a 	mov	r17,r4
 101e568:	2821883a 	mov	r16,r5
 101e56c:	39000204 	addi	r4,r7,8
 101e570:	01400244 	movi	r5,9
 101e574:	dcc00315 	stw	r19,12(sp)
 101e578:	dc800215 	stw	r18,8(sp)
 101e57c:	dfc00615 	stw	ra,24(sp)
 101e580:	dd400515 	stw	r21,20(sp)
 101e584:	dd000415 	stw	r20,16(sp)
 101e588:	3825883a 	mov	r18,r7
 101e58c:	3027883a 	mov	r19,r6
 101e590:	1023c080 	call	1023c08 <__divsi3>
 101e594:	00c00044 	movi	r3,1
 101e598:	000b883a 	mov	r5,zero
 101e59c:	1880030e 	bge	r3,r2,101e5ac <__s2b+0x54>
 101e5a0:	18c7883a 	add	r3,r3,r3
 101e5a4:	29400044 	addi	r5,r5,1
 101e5a8:	18bffd16 	blt	r3,r2,101e5a0 <__alt_data_end+0xff01e5a0>
 101e5ac:	8809883a 	mov	r4,r17
 101e5b0:	101e3680 	call	101e368 <_Balloc>
 101e5b4:	d8c00717 	ldw	r3,28(sp)
 101e5b8:	10c00515 	stw	r3,20(r2)
 101e5bc:	00c00044 	movi	r3,1
 101e5c0:	10c00415 	stw	r3,16(r2)
 101e5c4:	00c00244 	movi	r3,9
 101e5c8:	1cc0210e 	bge	r3,r19,101e650 <__s2b+0xf8>
 101e5cc:	80eb883a 	add	r21,r16,r3
 101e5d0:	a829883a 	mov	r20,r21
 101e5d4:	84e1883a 	add	r16,r16,r19
 101e5d8:	a1c00007 	ldb	r7,0(r20)
 101e5dc:	01800284 	movi	r6,10
 101e5e0:	a5000044 	addi	r20,r20,1
 101e5e4:	100b883a 	mov	r5,r2
 101e5e8:	39fff404 	addi	r7,r7,-48
 101e5ec:	8809883a 	mov	r4,r17
 101e5f0:	101e4380 	call	101e438 <__multadd>
 101e5f4:	a43ff81e 	bne	r20,r16,101e5d8 <__alt_data_end+0xff01e5d8>
 101e5f8:	ace1883a 	add	r16,r21,r19
 101e5fc:	843ffe04 	addi	r16,r16,-8
 101e600:	9c800a0e 	bge	r19,r18,101e62c <__s2b+0xd4>
 101e604:	94e5c83a 	sub	r18,r18,r19
 101e608:	84a5883a 	add	r18,r16,r18
 101e60c:	81c00007 	ldb	r7,0(r16)
 101e610:	01800284 	movi	r6,10
 101e614:	84000044 	addi	r16,r16,1
 101e618:	100b883a 	mov	r5,r2
 101e61c:	39fff404 	addi	r7,r7,-48
 101e620:	8809883a 	mov	r4,r17
 101e624:	101e4380 	call	101e438 <__multadd>
 101e628:	84bff81e 	bne	r16,r18,101e60c <__alt_data_end+0xff01e60c>
 101e62c:	dfc00617 	ldw	ra,24(sp)
 101e630:	dd400517 	ldw	r21,20(sp)
 101e634:	dd000417 	ldw	r20,16(sp)
 101e638:	dcc00317 	ldw	r19,12(sp)
 101e63c:	dc800217 	ldw	r18,8(sp)
 101e640:	dc400117 	ldw	r17,4(sp)
 101e644:	dc000017 	ldw	r16,0(sp)
 101e648:	dec00704 	addi	sp,sp,28
 101e64c:	f800283a 	ret
 101e650:	84000284 	addi	r16,r16,10
 101e654:	1827883a 	mov	r19,r3
 101e658:	003fe906 	br	101e600 <__alt_data_end+0xff01e600>

0101e65c <__hi0bits>:
 101e65c:	20bfffec 	andhi	r2,r4,65535
 101e660:	1000141e 	bne	r2,zero,101e6b4 <__hi0bits+0x58>
 101e664:	2008943a 	slli	r4,r4,16
 101e668:	00800404 	movi	r2,16
 101e66c:	20ffc02c 	andhi	r3,r4,65280
 101e670:	1800021e 	bne	r3,zero,101e67c <__hi0bits+0x20>
 101e674:	2008923a 	slli	r4,r4,8
 101e678:	10800204 	addi	r2,r2,8
 101e67c:	20fc002c 	andhi	r3,r4,61440
 101e680:	1800021e 	bne	r3,zero,101e68c <__hi0bits+0x30>
 101e684:	2008913a 	slli	r4,r4,4
 101e688:	10800104 	addi	r2,r2,4
 101e68c:	20f0002c 	andhi	r3,r4,49152
 101e690:	1800031e 	bne	r3,zero,101e6a0 <__hi0bits+0x44>
 101e694:	2109883a 	add	r4,r4,r4
 101e698:	10800084 	addi	r2,r2,2
 101e69c:	2109883a 	add	r4,r4,r4
 101e6a0:	20000316 	blt	r4,zero,101e6b0 <__hi0bits+0x54>
 101e6a4:	2110002c 	andhi	r4,r4,16384
 101e6a8:	2000041e 	bne	r4,zero,101e6bc <__hi0bits+0x60>
 101e6ac:	00800804 	movi	r2,32
 101e6b0:	f800283a 	ret
 101e6b4:	0005883a 	mov	r2,zero
 101e6b8:	003fec06 	br	101e66c <__alt_data_end+0xff01e66c>
 101e6bc:	10800044 	addi	r2,r2,1
 101e6c0:	f800283a 	ret

0101e6c4 <__lo0bits>:
 101e6c4:	20c00017 	ldw	r3,0(r4)
 101e6c8:	188001cc 	andi	r2,r3,7
 101e6cc:	10000826 	beq	r2,zero,101e6f0 <__lo0bits+0x2c>
 101e6d0:	1880004c 	andi	r2,r3,1
 101e6d4:	1000211e 	bne	r2,zero,101e75c <__lo0bits+0x98>
 101e6d8:	1880008c 	andi	r2,r3,2
 101e6dc:	1000211e 	bne	r2,zero,101e764 <__lo0bits+0xa0>
 101e6e0:	1806d0ba 	srli	r3,r3,2
 101e6e4:	00800084 	movi	r2,2
 101e6e8:	20c00015 	stw	r3,0(r4)
 101e6ec:	f800283a 	ret
 101e6f0:	18bfffcc 	andi	r2,r3,65535
 101e6f4:	10001326 	beq	r2,zero,101e744 <__lo0bits+0x80>
 101e6f8:	0005883a 	mov	r2,zero
 101e6fc:	19403fcc 	andi	r5,r3,255
 101e700:	2800021e 	bne	r5,zero,101e70c <__lo0bits+0x48>
 101e704:	1806d23a 	srli	r3,r3,8
 101e708:	10800204 	addi	r2,r2,8
 101e70c:	194003cc 	andi	r5,r3,15
 101e710:	2800021e 	bne	r5,zero,101e71c <__lo0bits+0x58>
 101e714:	1806d13a 	srli	r3,r3,4
 101e718:	10800104 	addi	r2,r2,4
 101e71c:	194000cc 	andi	r5,r3,3
 101e720:	2800021e 	bne	r5,zero,101e72c <__lo0bits+0x68>
 101e724:	1806d0ba 	srli	r3,r3,2
 101e728:	10800084 	addi	r2,r2,2
 101e72c:	1940004c 	andi	r5,r3,1
 101e730:	2800081e 	bne	r5,zero,101e754 <__lo0bits+0x90>
 101e734:	1806d07a 	srli	r3,r3,1
 101e738:	1800051e 	bne	r3,zero,101e750 <__lo0bits+0x8c>
 101e73c:	00800804 	movi	r2,32
 101e740:	f800283a 	ret
 101e744:	1806d43a 	srli	r3,r3,16
 101e748:	00800404 	movi	r2,16
 101e74c:	003feb06 	br	101e6fc <__alt_data_end+0xff01e6fc>
 101e750:	10800044 	addi	r2,r2,1
 101e754:	20c00015 	stw	r3,0(r4)
 101e758:	f800283a 	ret
 101e75c:	0005883a 	mov	r2,zero
 101e760:	f800283a 	ret
 101e764:	1806d07a 	srli	r3,r3,1
 101e768:	00800044 	movi	r2,1
 101e76c:	20c00015 	stw	r3,0(r4)
 101e770:	f800283a 	ret

0101e774 <__i2b>:
 101e774:	defffd04 	addi	sp,sp,-12
 101e778:	dc000015 	stw	r16,0(sp)
 101e77c:	04000044 	movi	r16,1
 101e780:	dc400115 	stw	r17,4(sp)
 101e784:	2823883a 	mov	r17,r5
 101e788:	800b883a 	mov	r5,r16
 101e78c:	dfc00215 	stw	ra,8(sp)
 101e790:	101e3680 	call	101e368 <_Balloc>
 101e794:	14400515 	stw	r17,20(r2)
 101e798:	14000415 	stw	r16,16(r2)
 101e79c:	dfc00217 	ldw	ra,8(sp)
 101e7a0:	dc400117 	ldw	r17,4(sp)
 101e7a4:	dc000017 	ldw	r16,0(sp)
 101e7a8:	dec00304 	addi	sp,sp,12
 101e7ac:	f800283a 	ret

0101e7b0 <__multiply>:
 101e7b0:	defffa04 	addi	sp,sp,-24
 101e7b4:	dcc00315 	stw	r19,12(sp)
 101e7b8:	dc800215 	stw	r18,8(sp)
 101e7bc:	34c00417 	ldw	r19,16(r6)
 101e7c0:	2c800417 	ldw	r18,16(r5)
 101e7c4:	dd000415 	stw	r20,16(sp)
 101e7c8:	dc400115 	stw	r17,4(sp)
 101e7cc:	dfc00515 	stw	ra,20(sp)
 101e7d0:	dc000015 	stw	r16,0(sp)
 101e7d4:	2829883a 	mov	r20,r5
 101e7d8:	3023883a 	mov	r17,r6
 101e7dc:	94c0050e 	bge	r18,r19,101e7f4 <__multiply+0x44>
 101e7e0:	9007883a 	mov	r3,r18
 101e7e4:	3029883a 	mov	r20,r6
 101e7e8:	9825883a 	mov	r18,r19
 101e7ec:	2823883a 	mov	r17,r5
 101e7f0:	1827883a 	mov	r19,r3
 101e7f4:	a0800217 	ldw	r2,8(r20)
 101e7f8:	94e1883a 	add	r16,r18,r19
 101e7fc:	a1400117 	ldw	r5,4(r20)
 101e800:	1400010e 	bge	r2,r16,101e808 <__multiply+0x58>
 101e804:	29400044 	addi	r5,r5,1
 101e808:	101e3680 	call	101e368 <_Balloc>
 101e80c:	8415883a 	add	r10,r16,r16
 101e810:	12c00504 	addi	r11,r2,20
 101e814:	5295883a 	add	r10,r10,r10
 101e818:	5a95883a 	add	r10,r11,r10
 101e81c:	5807883a 	mov	r3,r11
 101e820:	5a80032e 	bgeu	r11,r10,101e830 <__multiply+0x80>
 101e824:	18000015 	stw	zero,0(r3)
 101e828:	18c00104 	addi	r3,r3,4
 101e82c:	1abffd36 	bltu	r3,r10,101e824 <__alt_data_end+0xff01e824>
 101e830:	9ce7883a 	add	r19,r19,r19
 101e834:	94a5883a 	add	r18,r18,r18
 101e838:	89800504 	addi	r6,r17,20
 101e83c:	9ce7883a 	add	r19,r19,r19
 101e840:	a3400504 	addi	r13,r20,20
 101e844:	94a5883a 	add	r18,r18,r18
 101e848:	34d9883a 	add	r12,r6,r19
 101e84c:	6c93883a 	add	r9,r13,r18
 101e850:	3300422e 	bgeu	r6,r12,101e95c <__multiply+0x1ac>
 101e854:	37c00017 	ldw	ra,0(r6)
 101e858:	fbffffcc 	andi	r15,ra,65535
 101e85c:	78001b26 	beq	r15,zero,101e8cc <__multiply+0x11c>
 101e860:	5811883a 	mov	r8,r11
 101e864:	681d883a 	mov	r14,r13
 101e868:	000f883a 	mov	r7,zero
 101e86c:	71000017 	ldw	r4,0(r14)
 101e870:	40c00017 	ldw	r3,0(r8)
 101e874:	73800104 	addi	r14,r14,4
 101e878:	217fffcc 	andi	r5,r4,65535
 101e87c:	2bcb383a 	mul	r5,r5,r15
 101e880:	2008d43a 	srli	r4,r4,16
 101e884:	1c7fffcc 	andi	r17,r3,65535
 101e888:	2c4b883a 	add	r5,r5,r17
 101e88c:	29cb883a 	add	r5,r5,r7
 101e890:	23c9383a 	mul	r4,r4,r15
 101e894:	1806d43a 	srli	r3,r3,16
 101e898:	280ed43a 	srli	r7,r5,16
 101e89c:	297fffcc 	andi	r5,r5,65535
 101e8a0:	20c7883a 	add	r3,r4,r3
 101e8a4:	19c7883a 	add	r3,r3,r7
 101e8a8:	1808943a 	slli	r4,r3,16
 101e8ac:	4023883a 	mov	r17,r8
 101e8b0:	180ed43a 	srli	r7,r3,16
 101e8b4:	214ab03a 	or	r5,r4,r5
 101e8b8:	41400015 	stw	r5,0(r8)
 101e8bc:	42000104 	addi	r8,r8,4
 101e8c0:	727fea36 	bltu	r14,r9,101e86c <__alt_data_end+0xff01e86c>
 101e8c4:	89c00115 	stw	r7,4(r17)
 101e8c8:	37c00017 	ldw	ra,0(r6)
 101e8cc:	f83ed43a 	srli	ra,ra,16
 101e8d0:	f8001f26 	beq	ra,zero,101e950 <__multiply+0x1a0>
 101e8d4:	58c00017 	ldw	r3,0(r11)
 101e8d8:	681d883a 	mov	r14,r13
 101e8dc:	581f883a 	mov	r15,r11
 101e8e0:	1811883a 	mov	r8,r3
 101e8e4:	5825883a 	mov	r18,r11
 101e8e8:	000f883a 	mov	r7,zero
 101e8ec:	00000106 	br	101e8f4 <__multiply+0x144>
 101e8f0:	8825883a 	mov	r18,r17
 101e8f4:	7140000b 	ldhu	r5,0(r14)
 101e8f8:	4010d43a 	srli	r8,r8,16
 101e8fc:	193fffcc 	andi	r4,r3,65535
 101e900:	2fcb383a 	mul	r5,r5,ra
 101e904:	7bc00104 	addi	r15,r15,4
 101e908:	73800104 	addi	r14,r14,4
 101e90c:	2a0b883a 	add	r5,r5,r8
 101e910:	29cb883a 	add	r5,r5,r7
 101e914:	2806943a 	slli	r3,r5,16
 101e918:	94400104 	addi	r17,r18,4
 101e91c:	280ad43a 	srli	r5,r5,16
 101e920:	1908b03a 	or	r4,r3,r4
 101e924:	793fff15 	stw	r4,-4(r15)
 101e928:	70ffff17 	ldw	r3,-4(r14)
 101e92c:	8a000017 	ldw	r8,0(r17)
 101e930:	1806d43a 	srli	r3,r3,16
 101e934:	413fffcc 	andi	r4,r8,65535
 101e938:	1fc7383a 	mul	r3,r3,ra
 101e93c:	1907883a 	add	r3,r3,r4
 101e940:	1947883a 	add	r3,r3,r5
 101e944:	180ed43a 	srli	r7,r3,16
 101e948:	727fe936 	bltu	r14,r9,101e8f0 <__alt_data_end+0xff01e8f0>
 101e94c:	90c00115 	stw	r3,4(r18)
 101e950:	31800104 	addi	r6,r6,4
 101e954:	5ac00104 	addi	r11,r11,4
 101e958:	333fbe36 	bltu	r6,r12,101e854 <__alt_data_end+0xff01e854>
 101e95c:	0400090e 	bge	zero,r16,101e984 <__multiply+0x1d4>
 101e960:	50ffff17 	ldw	r3,-4(r10)
 101e964:	52bfff04 	addi	r10,r10,-4
 101e968:	18000326 	beq	r3,zero,101e978 <__multiply+0x1c8>
 101e96c:	00000506 	br	101e984 <__multiply+0x1d4>
 101e970:	50c00017 	ldw	r3,0(r10)
 101e974:	1800031e 	bne	r3,zero,101e984 <__multiply+0x1d4>
 101e978:	843fffc4 	addi	r16,r16,-1
 101e97c:	52bfff04 	addi	r10,r10,-4
 101e980:	803ffb1e 	bne	r16,zero,101e970 <__alt_data_end+0xff01e970>
 101e984:	14000415 	stw	r16,16(r2)
 101e988:	dfc00517 	ldw	ra,20(sp)
 101e98c:	dd000417 	ldw	r20,16(sp)
 101e990:	dcc00317 	ldw	r19,12(sp)
 101e994:	dc800217 	ldw	r18,8(sp)
 101e998:	dc400117 	ldw	r17,4(sp)
 101e99c:	dc000017 	ldw	r16,0(sp)
 101e9a0:	dec00604 	addi	sp,sp,24
 101e9a4:	f800283a 	ret

0101e9a8 <__pow5mult>:
 101e9a8:	defffa04 	addi	sp,sp,-24
 101e9ac:	dcc00315 	stw	r19,12(sp)
 101e9b0:	dc000015 	stw	r16,0(sp)
 101e9b4:	dfc00515 	stw	ra,20(sp)
 101e9b8:	dd000415 	stw	r20,16(sp)
 101e9bc:	dc800215 	stw	r18,8(sp)
 101e9c0:	dc400115 	stw	r17,4(sp)
 101e9c4:	308000cc 	andi	r2,r6,3
 101e9c8:	3021883a 	mov	r16,r6
 101e9cc:	2027883a 	mov	r19,r4
 101e9d0:	10002f1e 	bne	r2,zero,101ea90 <__pow5mult+0xe8>
 101e9d4:	2825883a 	mov	r18,r5
 101e9d8:	8021d0ba 	srai	r16,r16,2
 101e9dc:	80001a26 	beq	r16,zero,101ea48 <__pow5mult+0xa0>
 101e9e0:	9c401217 	ldw	r17,72(r19)
 101e9e4:	8800061e 	bne	r17,zero,101ea00 <__pow5mult+0x58>
 101e9e8:	00003406 	br	101eabc <__pow5mult+0x114>
 101e9ec:	8021d07a 	srai	r16,r16,1
 101e9f0:	80001526 	beq	r16,zero,101ea48 <__pow5mult+0xa0>
 101e9f4:	88800017 	ldw	r2,0(r17)
 101e9f8:	10001c26 	beq	r2,zero,101ea6c <__pow5mult+0xc4>
 101e9fc:	1023883a 	mov	r17,r2
 101ea00:	8080004c 	andi	r2,r16,1
 101ea04:	103ff926 	beq	r2,zero,101e9ec <__alt_data_end+0xff01e9ec>
 101ea08:	880d883a 	mov	r6,r17
 101ea0c:	900b883a 	mov	r5,r18
 101ea10:	9809883a 	mov	r4,r19
 101ea14:	101e7b00 	call	101e7b0 <__multiply>
 101ea18:	90001b26 	beq	r18,zero,101ea88 <__pow5mult+0xe0>
 101ea1c:	91000117 	ldw	r4,4(r18)
 101ea20:	98c01317 	ldw	r3,76(r19)
 101ea24:	8021d07a 	srai	r16,r16,1
 101ea28:	2109883a 	add	r4,r4,r4
 101ea2c:	2109883a 	add	r4,r4,r4
 101ea30:	1907883a 	add	r3,r3,r4
 101ea34:	19000017 	ldw	r4,0(r3)
 101ea38:	91000015 	stw	r4,0(r18)
 101ea3c:	1c800015 	stw	r18,0(r3)
 101ea40:	1025883a 	mov	r18,r2
 101ea44:	803feb1e 	bne	r16,zero,101e9f4 <__alt_data_end+0xff01e9f4>
 101ea48:	9005883a 	mov	r2,r18
 101ea4c:	dfc00517 	ldw	ra,20(sp)
 101ea50:	dd000417 	ldw	r20,16(sp)
 101ea54:	dcc00317 	ldw	r19,12(sp)
 101ea58:	dc800217 	ldw	r18,8(sp)
 101ea5c:	dc400117 	ldw	r17,4(sp)
 101ea60:	dc000017 	ldw	r16,0(sp)
 101ea64:	dec00604 	addi	sp,sp,24
 101ea68:	f800283a 	ret
 101ea6c:	880d883a 	mov	r6,r17
 101ea70:	880b883a 	mov	r5,r17
 101ea74:	9809883a 	mov	r4,r19
 101ea78:	101e7b00 	call	101e7b0 <__multiply>
 101ea7c:	88800015 	stw	r2,0(r17)
 101ea80:	10000015 	stw	zero,0(r2)
 101ea84:	003fdd06 	br	101e9fc <__alt_data_end+0xff01e9fc>
 101ea88:	1025883a 	mov	r18,r2
 101ea8c:	003fd706 	br	101e9ec <__alt_data_end+0xff01e9ec>
 101ea90:	10bfffc4 	addi	r2,r2,-1
 101ea94:	1085883a 	add	r2,r2,r2
 101ea98:	00c040f4 	movhi	r3,259
 101ea9c:	18eb2304 	addi	r3,r3,-21364
 101eaa0:	1085883a 	add	r2,r2,r2
 101eaa4:	1885883a 	add	r2,r3,r2
 101eaa8:	11800017 	ldw	r6,0(r2)
 101eaac:	000f883a 	mov	r7,zero
 101eab0:	101e4380 	call	101e438 <__multadd>
 101eab4:	1025883a 	mov	r18,r2
 101eab8:	003fc706 	br	101e9d8 <__alt_data_end+0xff01e9d8>
 101eabc:	05000044 	movi	r20,1
 101eac0:	a00b883a 	mov	r5,r20
 101eac4:	9809883a 	mov	r4,r19
 101eac8:	101e3680 	call	101e368 <_Balloc>
 101eacc:	1023883a 	mov	r17,r2
 101ead0:	00809c44 	movi	r2,625
 101ead4:	88800515 	stw	r2,20(r17)
 101ead8:	8d000415 	stw	r20,16(r17)
 101eadc:	9c401215 	stw	r17,72(r19)
 101eae0:	88000015 	stw	zero,0(r17)
 101eae4:	003fc606 	br	101ea00 <__alt_data_end+0xff01ea00>

0101eae8 <__lshift>:
 101eae8:	defff904 	addi	sp,sp,-28
 101eaec:	dd400515 	stw	r21,20(sp)
 101eaf0:	dcc00315 	stw	r19,12(sp)
 101eaf4:	302bd17a 	srai	r21,r6,5
 101eaf8:	2cc00417 	ldw	r19,16(r5)
 101eafc:	28800217 	ldw	r2,8(r5)
 101eb00:	dd000415 	stw	r20,16(sp)
 101eb04:	ace7883a 	add	r19,r21,r19
 101eb08:	dc800215 	stw	r18,8(sp)
 101eb0c:	dc400115 	stw	r17,4(sp)
 101eb10:	dc000015 	stw	r16,0(sp)
 101eb14:	dfc00615 	stw	ra,24(sp)
 101eb18:	9c000044 	addi	r16,r19,1
 101eb1c:	2823883a 	mov	r17,r5
 101eb20:	3029883a 	mov	r20,r6
 101eb24:	2025883a 	mov	r18,r4
 101eb28:	29400117 	ldw	r5,4(r5)
 101eb2c:	1400030e 	bge	r2,r16,101eb3c <__lshift+0x54>
 101eb30:	1085883a 	add	r2,r2,r2
 101eb34:	29400044 	addi	r5,r5,1
 101eb38:	143ffd16 	blt	r2,r16,101eb30 <__alt_data_end+0xff01eb30>
 101eb3c:	9009883a 	mov	r4,r18
 101eb40:	101e3680 	call	101e368 <_Balloc>
 101eb44:	10c00504 	addi	r3,r2,20
 101eb48:	0540070e 	bge	zero,r21,101eb68 <__lshift+0x80>
 101eb4c:	ad6b883a 	add	r21,r21,r21
 101eb50:	ad6b883a 	add	r21,r21,r21
 101eb54:	1809883a 	mov	r4,r3
 101eb58:	1d47883a 	add	r3,r3,r21
 101eb5c:	20000015 	stw	zero,0(r4)
 101eb60:	21000104 	addi	r4,r4,4
 101eb64:	193ffd1e 	bne	r3,r4,101eb5c <__alt_data_end+0xff01eb5c>
 101eb68:	8a000417 	ldw	r8,16(r17)
 101eb6c:	89000504 	addi	r4,r17,20
 101eb70:	a18007cc 	andi	r6,r20,31
 101eb74:	4211883a 	add	r8,r8,r8
 101eb78:	4211883a 	add	r8,r8,r8
 101eb7c:	2211883a 	add	r8,r4,r8
 101eb80:	30002326 	beq	r6,zero,101ec10 <__lshift+0x128>
 101eb84:	02400804 	movi	r9,32
 101eb88:	4993c83a 	sub	r9,r9,r6
 101eb8c:	000b883a 	mov	r5,zero
 101eb90:	21c00017 	ldw	r7,0(r4)
 101eb94:	1815883a 	mov	r10,r3
 101eb98:	18c00104 	addi	r3,r3,4
 101eb9c:	398e983a 	sll	r7,r7,r6
 101eba0:	21000104 	addi	r4,r4,4
 101eba4:	394ab03a 	or	r5,r7,r5
 101eba8:	197fff15 	stw	r5,-4(r3)
 101ebac:	217fff17 	ldw	r5,-4(r4)
 101ebb0:	2a4ad83a 	srl	r5,r5,r9
 101ebb4:	223ff636 	bltu	r4,r8,101eb90 <__alt_data_end+0xff01eb90>
 101ebb8:	51400115 	stw	r5,4(r10)
 101ebbc:	28001a1e 	bne	r5,zero,101ec28 <__lshift+0x140>
 101ebc0:	843fffc4 	addi	r16,r16,-1
 101ebc4:	14000415 	stw	r16,16(r2)
 101ebc8:	88000826 	beq	r17,zero,101ebec <__lshift+0x104>
 101ebcc:	89000117 	ldw	r4,4(r17)
 101ebd0:	90c01317 	ldw	r3,76(r18)
 101ebd4:	2109883a 	add	r4,r4,r4
 101ebd8:	2109883a 	add	r4,r4,r4
 101ebdc:	1907883a 	add	r3,r3,r4
 101ebe0:	19000017 	ldw	r4,0(r3)
 101ebe4:	89000015 	stw	r4,0(r17)
 101ebe8:	1c400015 	stw	r17,0(r3)
 101ebec:	dfc00617 	ldw	ra,24(sp)
 101ebf0:	dd400517 	ldw	r21,20(sp)
 101ebf4:	dd000417 	ldw	r20,16(sp)
 101ebf8:	dcc00317 	ldw	r19,12(sp)
 101ebfc:	dc800217 	ldw	r18,8(sp)
 101ec00:	dc400117 	ldw	r17,4(sp)
 101ec04:	dc000017 	ldw	r16,0(sp)
 101ec08:	dec00704 	addi	sp,sp,28
 101ec0c:	f800283a 	ret
 101ec10:	21400017 	ldw	r5,0(r4)
 101ec14:	18c00104 	addi	r3,r3,4
 101ec18:	21000104 	addi	r4,r4,4
 101ec1c:	197fff15 	stw	r5,-4(r3)
 101ec20:	223ffb36 	bltu	r4,r8,101ec10 <__alt_data_end+0xff01ec10>
 101ec24:	003fe606 	br	101ebc0 <__alt_data_end+0xff01ebc0>
 101ec28:	9c000084 	addi	r16,r19,2
 101ec2c:	003fe406 	br	101ebc0 <__alt_data_end+0xff01ebc0>

0101ec30 <__mcmp>:
 101ec30:	20800417 	ldw	r2,16(r4)
 101ec34:	28c00417 	ldw	r3,16(r5)
 101ec38:	10c5c83a 	sub	r2,r2,r3
 101ec3c:	1000111e 	bne	r2,zero,101ec84 <__mcmp+0x54>
 101ec40:	18c7883a 	add	r3,r3,r3
 101ec44:	18c7883a 	add	r3,r3,r3
 101ec48:	21000504 	addi	r4,r4,20
 101ec4c:	29400504 	addi	r5,r5,20
 101ec50:	20c5883a 	add	r2,r4,r3
 101ec54:	28cb883a 	add	r5,r5,r3
 101ec58:	00000106 	br	101ec60 <__mcmp+0x30>
 101ec5c:	20800a2e 	bgeu	r4,r2,101ec88 <__mcmp+0x58>
 101ec60:	10bfff04 	addi	r2,r2,-4
 101ec64:	297fff04 	addi	r5,r5,-4
 101ec68:	11800017 	ldw	r6,0(r2)
 101ec6c:	28c00017 	ldw	r3,0(r5)
 101ec70:	30fffa26 	beq	r6,r3,101ec5c <__alt_data_end+0xff01ec5c>
 101ec74:	30c00236 	bltu	r6,r3,101ec80 <__mcmp+0x50>
 101ec78:	00800044 	movi	r2,1
 101ec7c:	f800283a 	ret
 101ec80:	00bfffc4 	movi	r2,-1
 101ec84:	f800283a 	ret
 101ec88:	0005883a 	mov	r2,zero
 101ec8c:	f800283a 	ret

0101ec90 <__mdiff>:
 101ec90:	28c00417 	ldw	r3,16(r5)
 101ec94:	30800417 	ldw	r2,16(r6)
 101ec98:	defffa04 	addi	sp,sp,-24
 101ec9c:	dcc00315 	stw	r19,12(sp)
 101eca0:	dc800215 	stw	r18,8(sp)
 101eca4:	dfc00515 	stw	ra,20(sp)
 101eca8:	dd000415 	stw	r20,16(sp)
 101ecac:	dc400115 	stw	r17,4(sp)
 101ecb0:	dc000015 	stw	r16,0(sp)
 101ecb4:	1887c83a 	sub	r3,r3,r2
 101ecb8:	2825883a 	mov	r18,r5
 101ecbc:	3027883a 	mov	r19,r6
 101ecc0:	1800141e 	bne	r3,zero,101ed14 <__mdiff+0x84>
 101ecc4:	1085883a 	add	r2,r2,r2
 101ecc8:	1085883a 	add	r2,r2,r2
 101eccc:	2a000504 	addi	r8,r5,20
 101ecd0:	34000504 	addi	r16,r6,20
 101ecd4:	4087883a 	add	r3,r8,r2
 101ecd8:	8085883a 	add	r2,r16,r2
 101ecdc:	00000106 	br	101ece4 <__mdiff+0x54>
 101ece0:	40c0592e 	bgeu	r8,r3,101ee48 <__mdiff+0x1b8>
 101ece4:	18ffff04 	addi	r3,r3,-4
 101ece8:	10bfff04 	addi	r2,r2,-4
 101ecec:	19c00017 	ldw	r7,0(r3)
 101ecf0:	11400017 	ldw	r5,0(r2)
 101ecf4:	397ffa26 	beq	r7,r5,101ece0 <__alt_data_end+0xff01ece0>
 101ecf8:	3940592e 	bgeu	r7,r5,101ee60 <__mdiff+0x1d0>
 101ecfc:	9005883a 	mov	r2,r18
 101ed00:	4023883a 	mov	r17,r8
 101ed04:	9825883a 	mov	r18,r19
 101ed08:	05000044 	movi	r20,1
 101ed0c:	1027883a 	mov	r19,r2
 101ed10:	00000406 	br	101ed24 <__mdiff+0x94>
 101ed14:	18005616 	blt	r3,zero,101ee70 <__mdiff+0x1e0>
 101ed18:	34400504 	addi	r17,r6,20
 101ed1c:	2c000504 	addi	r16,r5,20
 101ed20:	0029883a 	mov	r20,zero
 101ed24:	91400117 	ldw	r5,4(r18)
 101ed28:	101e3680 	call	101e368 <_Balloc>
 101ed2c:	92400417 	ldw	r9,16(r18)
 101ed30:	9b000417 	ldw	r12,16(r19)
 101ed34:	12c00504 	addi	r11,r2,20
 101ed38:	4a51883a 	add	r8,r9,r9
 101ed3c:	6319883a 	add	r12,r12,r12
 101ed40:	4211883a 	add	r8,r8,r8
 101ed44:	6319883a 	add	r12,r12,r12
 101ed48:	15000315 	stw	r20,12(r2)
 101ed4c:	8211883a 	add	r8,r16,r8
 101ed50:	8b19883a 	add	r12,r17,r12
 101ed54:	0007883a 	mov	r3,zero
 101ed58:	81400017 	ldw	r5,0(r16)
 101ed5c:	89c00017 	ldw	r7,0(r17)
 101ed60:	59800104 	addi	r6,r11,4
 101ed64:	293fffcc 	andi	r4,r5,65535
 101ed68:	20c7883a 	add	r3,r4,r3
 101ed6c:	393fffcc 	andi	r4,r7,65535
 101ed70:	1909c83a 	sub	r4,r3,r4
 101ed74:	280ad43a 	srli	r5,r5,16
 101ed78:	380ed43a 	srli	r7,r7,16
 101ed7c:	2007d43a 	srai	r3,r4,16
 101ed80:	213fffcc 	andi	r4,r4,65535
 101ed84:	29cbc83a 	sub	r5,r5,r7
 101ed88:	28c7883a 	add	r3,r5,r3
 101ed8c:	180a943a 	slli	r5,r3,16
 101ed90:	8c400104 	addi	r17,r17,4
 101ed94:	84000104 	addi	r16,r16,4
 101ed98:	2908b03a 	or	r4,r5,r4
 101ed9c:	59000015 	stw	r4,0(r11)
 101eda0:	1807d43a 	srai	r3,r3,16
 101eda4:	3015883a 	mov	r10,r6
 101eda8:	3017883a 	mov	r11,r6
 101edac:	8b3fea36 	bltu	r17,r12,101ed58 <__alt_data_end+0xff01ed58>
 101edb0:	8200162e 	bgeu	r16,r8,101ee0c <__mdiff+0x17c>
 101edb4:	8017883a 	mov	r11,r16
 101edb8:	59400017 	ldw	r5,0(r11)
 101edbc:	31800104 	addi	r6,r6,4
 101edc0:	5ac00104 	addi	r11,r11,4
 101edc4:	293fffcc 	andi	r4,r5,65535
 101edc8:	20c7883a 	add	r3,r4,r3
 101edcc:	280ed43a 	srli	r7,r5,16
 101edd0:	180bd43a 	srai	r5,r3,16
 101edd4:	193fffcc 	andi	r4,r3,65535
 101edd8:	3947883a 	add	r3,r7,r5
 101eddc:	180a943a 	slli	r5,r3,16
 101ede0:	1807d43a 	srai	r3,r3,16
 101ede4:	2908b03a 	or	r4,r5,r4
 101ede8:	313fff15 	stw	r4,-4(r6)
 101edec:	5a3ff236 	bltu	r11,r8,101edb8 <__alt_data_end+0xff01edb8>
 101edf0:	0406303a 	nor	r3,zero,r16
 101edf4:	1a07883a 	add	r3,r3,r8
 101edf8:	1806d0ba 	srli	r3,r3,2
 101edfc:	18c00044 	addi	r3,r3,1
 101ee00:	18c7883a 	add	r3,r3,r3
 101ee04:	18c7883a 	add	r3,r3,r3
 101ee08:	50d5883a 	add	r10,r10,r3
 101ee0c:	50ffff04 	addi	r3,r10,-4
 101ee10:	2000041e 	bne	r4,zero,101ee24 <__mdiff+0x194>
 101ee14:	18ffff04 	addi	r3,r3,-4
 101ee18:	19000017 	ldw	r4,0(r3)
 101ee1c:	4a7fffc4 	addi	r9,r9,-1
 101ee20:	203ffc26 	beq	r4,zero,101ee14 <__alt_data_end+0xff01ee14>
 101ee24:	12400415 	stw	r9,16(r2)
 101ee28:	dfc00517 	ldw	ra,20(sp)
 101ee2c:	dd000417 	ldw	r20,16(sp)
 101ee30:	dcc00317 	ldw	r19,12(sp)
 101ee34:	dc800217 	ldw	r18,8(sp)
 101ee38:	dc400117 	ldw	r17,4(sp)
 101ee3c:	dc000017 	ldw	r16,0(sp)
 101ee40:	dec00604 	addi	sp,sp,24
 101ee44:	f800283a 	ret
 101ee48:	000b883a 	mov	r5,zero
 101ee4c:	101e3680 	call	101e368 <_Balloc>
 101ee50:	00c00044 	movi	r3,1
 101ee54:	10c00415 	stw	r3,16(r2)
 101ee58:	10000515 	stw	zero,20(r2)
 101ee5c:	003ff206 	br	101ee28 <__alt_data_end+0xff01ee28>
 101ee60:	8023883a 	mov	r17,r16
 101ee64:	0029883a 	mov	r20,zero
 101ee68:	4021883a 	mov	r16,r8
 101ee6c:	003fad06 	br	101ed24 <__alt_data_end+0xff01ed24>
 101ee70:	9005883a 	mov	r2,r18
 101ee74:	94400504 	addi	r17,r18,20
 101ee78:	9c000504 	addi	r16,r19,20
 101ee7c:	9825883a 	mov	r18,r19
 101ee80:	05000044 	movi	r20,1
 101ee84:	1027883a 	mov	r19,r2
 101ee88:	003fa606 	br	101ed24 <__alt_data_end+0xff01ed24>

0101ee8c <__ulp>:
 101ee8c:	295ffc2c 	andhi	r5,r5,32752
 101ee90:	00bf3034 	movhi	r2,64704
 101ee94:	2887883a 	add	r3,r5,r2
 101ee98:	00c0020e 	bge	zero,r3,101eea4 <__ulp+0x18>
 101ee9c:	0005883a 	mov	r2,zero
 101eea0:	f800283a 	ret
 101eea4:	00c7c83a 	sub	r3,zero,r3
 101eea8:	1807d53a 	srai	r3,r3,20
 101eeac:	008004c4 	movi	r2,19
 101eeb0:	10c00b0e 	bge	r2,r3,101eee0 <__ulp+0x54>
 101eeb4:	18bffb04 	addi	r2,r3,-20
 101eeb8:	01000784 	movi	r4,30
 101eebc:	0007883a 	mov	r3,zero
 101eec0:	20800516 	blt	r4,r2,101eed8 <__ulp+0x4c>
 101eec4:	010007c4 	movi	r4,31
 101eec8:	2089c83a 	sub	r4,r4,r2
 101eecc:	00800044 	movi	r2,1
 101eed0:	1104983a 	sll	r2,r2,r4
 101eed4:	f800283a 	ret
 101eed8:	00800044 	movi	r2,1
 101eedc:	f800283a 	ret
 101eee0:	01400234 	movhi	r5,8
 101eee4:	28c7d83a 	sra	r3,r5,r3
 101eee8:	0005883a 	mov	r2,zero
 101eeec:	f800283a 	ret

0101eef0 <__b2d>:
 101eef0:	defffa04 	addi	sp,sp,-24
 101eef4:	dc000015 	stw	r16,0(sp)
 101eef8:	24000417 	ldw	r16,16(r4)
 101eefc:	dc400115 	stw	r17,4(sp)
 101ef00:	24400504 	addi	r17,r4,20
 101ef04:	8421883a 	add	r16,r16,r16
 101ef08:	8421883a 	add	r16,r16,r16
 101ef0c:	8c21883a 	add	r16,r17,r16
 101ef10:	dc800215 	stw	r18,8(sp)
 101ef14:	84bfff17 	ldw	r18,-4(r16)
 101ef18:	dd000415 	stw	r20,16(sp)
 101ef1c:	dcc00315 	stw	r19,12(sp)
 101ef20:	9009883a 	mov	r4,r18
 101ef24:	2829883a 	mov	r20,r5
 101ef28:	dfc00515 	stw	ra,20(sp)
 101ef2c:	101e65c0 	call	101e65c <__hi0bits>
 101ef30:	00c00804 	movi	r3,32
 101ef34:	1889c83a 	sub	r4,r3,r2
 101ef38:	a1000015 	stw	r4,0(r20)
 101ef3c:	01000284 	movi	r4,10
 101ef40:	84ffff04 	addi	r19,r16,-4
 101ef44:	20801216 	blt	r4,r2,101ef90 <__b2d+0xa0>
 101ef48:	018002c4 	movi	r6,11
 101ef4c:	308dc83a 	sub	r6,r6,r2
 101ef50:	9186d83a 	srl	r3,r18,r6
 101ef54:	18cffc34 	orhi	r3,r3,16368
 101ef58:	8cc0212e 	bgeu	r17,r19,101efe0 <__b2d+0xf0>
 101ef5c:	813ffe17 	ldw	r4,-8(r16)
 101ef60:	218cd83a 	srl	r6,r4,r6
 101ef64:	10800544 	addi	r2,r2,21
 101ef68:	9084983a 	sll	r2,r18,r2
 101ef6c:	1184b03a 	or	r2,r2,r6
 101ef70:	dfc00517 	ldw	ra,20(sp)
 101ef74:	dd000417 	ldw	r20,16(sp)
 101ef78:	dcc00317 	ldw	r19,12(sp)
 101ef7c:	dc800217 	ldw	r18,8(sp)
 101ef80:	dc400117 	ldw	r17,4(sp)
 101ef84:	dc000017 	ldw	r16,0(sp)
 101ef88:	dec00604 	addi	sp,sp,24
 101ef8c:	f800283a 	ret
 101ef90:	8cc00f2e 	bgeu	r17,r19,101efd0 <__b2d+0xe0>
 101ef94:	117ffd44 	addi	r5,r2,-11
 101ef98:	80bffe17 	ldw	r2,-8(r16)
 101ef9c:	28000e26 	beq	r5,zero,101efd8 <__b2d+0xe8>
 101efa0:	1949c83a 	sub	r4,r3,r5
 101efa4:	9164983a 	sll	r18,r18,r5
 101efa8:	1106d83a 	srl	r3,r2,r4
 101efac:	81bffe04 	addi	r6,r16,-8
 101efb0:	948ffc34 	orhi	r18,r18,16368
 101efb4:	90c6b03a 	or	r3,r18,r3
 101efb8:	89800e2e 	bgeu	r17,r6,101eff4 <__b2d+0x104>
 101efbc:	81bffd17 	ldw	r6,-12(r16)
 101efc0:	1144983a 	sll	r2,r2,r5
 101efc4:	310ad83a 	srl	r5,r6,r4
 101efc8:	2884b03a 	or	r2,r5,r2
 101efcc:	003fe806 	br	101ef70 <__alt_data_end+0xff01ef70>
 101efd0:	10bffd44 	addi	r2,r2,-11
 101efd4:	1000041e 	bne	r2,zero,101efe8 <__b2d+0xf8>
 101efd8:	90cffc34 	orhi	r3,r18,16368
 101efdc:	003fe406 	br	101ef70 <__alt_data_end+0xff01ef70>
 101efe0:	000d883a 	mov	r6,zero
 101efe4:	003fdf06 	br	101ef64 <__alt_data_end+0xff01ef64>
 101efe8:	90a4983a 	sll	r18,r18,r2
 101efec:	0005883a 	mov	r2,zero
 101eff0:	003ff906 	br	101efd8 <__alt_data_end+0xff01efd8>
 101eff4:	1144983a 	sll	r2,r2,r5
 101eff8:	003fdd06 	br	101ef70 <__alt_data_end+0xff01ef70>

0101effc <__d2b>:
 101effc:	defff804 	addi	sp,sp,-32
 101f000:	dc000215 	stw	r16,8(sp)
 101f004:	3021883a 	mov	r16,r6
 101f008:	dc400315 	stw	r17,12(sp)
 101f00c:	8022907a 	slli	r17,r16,1
 101f010:	dd000615 	stw	r20,24(sp)
 101f014:	2829883a 	mov	r20,r5
 101f018:	01400044 	movi	r5,1
 101f01c:	dcc00515 	stw	r19,20(sp)
 101f020:	dc800415 	stw	r18,16(sp)
 101f024:	dfc00715 	stw	ra,28(sp)
 101f028:	3825883a 	mov	r18,r7
 101f02c:	8822d57a 	srli	r17,r17,21
 101f030:	101e3680 	call	101e368 <_Balloc>
 101f034:	1027883a 	mov	r19,r2
 101f038:	00800434 	movhi	r2,16
 101f03c:	10bfffc4 	addi	r2,r2,-1
 101f040:	808c703a 	and	r6,r16,r2
 101f044:	88000126 	beq	r17,zero,101f04c <__d2b+0x50>
 101f048:	31800434 	orhi	r6,r6,16
 101f04c:	d9800015 	stw	r6,0(sp)
 101f050:	a0002426 	beq	r20,zero,101f0e4 <__d2b+0xe8>
 101f054:	d9000104 	addi	r4,sp,4
 101f058:	dd000115 	stw	r20,4(sp)
 101f05c:	101e6c40 	call	101e6c4 <__lo0bits>
 101f060:	d8c00017 	ldw	r3,0(sp)
 101f064:	10002f1e 	bne	r2,zero,101f124 <__d2b+0x128>
 101f068:	d9000117 	ldw	r4,4(sp)
 101f06c:	99000515 	stw	r4,20(r19)
 101f070:	1821003a 	cmpeq	r16,r3,zero
 101f074:	01000084 	movi	r4,2
 101f078:	2421c83a 	sub	r16,r4,r16
 101f07c:	98c00615 	stw	r3,24(r19)
 101f080:	9c000415 	stw	r16,16(r19)
 101f084:	88001f1e 	bne	r17,zero,101f104 <__d2b+0x108>
 101f088:	10bef384 	addi	r2,r2,-1074
 101f08c:	90800015 	stw	r2,0(r18)
 101f090:	00900034 	movhi	r2,16384
 101f094:	10bfffc4 	addi	r2,r2,-1
 101f098:	8085883a 	add	r2,r16,r2
 101f09c:	1085883a 	add	r2,r2,r2
 101f0a0:	1085883a 	add	r2,r2,r2
 101f0a4:	9885883a 	add	r2,r19,r2
 101f0a8:	11000517 	ldw	r4,20(r2)
 101f0ac:	8020917a 	slli	r16,r16,5
 101f0b0:	101e65c0 	call	101e65c <__hi0bits>
 101f0b4:	d8c00817 	ldw	r3,32(sp)
 101f0b8:	8085c83a 	sub	r2,r16,r2
 101f0bc:	18800015 	stw	r2,0(r3)
 101f0c0:	9805883a 	mov	r2,r19
 101f0c4:	dfc00717 	ldw	ra,28(sp)
 101f0c8:	dd000617 	ldw	r20,24(sp)
 101f0cc:	dcc00517 	ldw	r19,20(sp)
 101f0d0:	dc800417 	ldw	r18,16(sp)
 101f0d4:	dc400317 	ldw	r17,12(sp)
 101f0d8:	dc000217 	ldw	r16,8(sp)
 101f0dc:	dec00804 	addi	sp,sp,32
 101f0e0:	f800283a 	ret
 101f0e4:	d809883a 	mov	r4,sp
 101f0e8:	101e6c40 	call	101e6c4 <__lo0bits>
 101f0ec:	d8c00017 	ldw	r3,0(sp)
 101f0f0:	04000044 	movi	r16,1
 101f0f4:	9c000415 	stw	r16,16(r19)
 101f0f8:	98c00515 	stw	r3,20(r19)
 101f0fc:	10800804 	addi	r2,r2,32
 101f100:	883fe126 	beq	r17,zero,101f088 <__alt_data_end+0xff01f088>
 101f104:	00c00d44 	movi	r3,53
 101f108:	8c7ef344 	addi	r17,r17,-1075
 101f10c:	88a3883a 	add	r17,r17,r2
 101f110:	1885c83a 	sub	r2,r3,r2
 101f114:	d8c00817 	ldw	r3,32(sp)
 101f118:	94400015 	stw	r17,0(r18)
 101f11c:	18800015 	stw	r2,0(r3)
 101f120:	003fe706 	br	101f0c0 <__alt_data_end+0xff01f0c0>
 101f124:	01000804 	movi	r4,32
 101f128:	2089c83a 	sub	r4,r4,r2
 101f12c:	1908983a 	sll	r4,r3,r4
 101f130:	d9400117 	ldw	r5,4(sp)
 101f134:	1886d83a 	srl	r3,r3,r2
 101f138:	2148b03a 	or	r4,r4,r5
 101f13c:	99000515 	stw	r4,20(r19)
 101f140:	d8c00015 	stw	r3,0(sp)
 101f144:	003fca06 	br	101f070 <__alt_data_end+0xff01f070>

0101f148 <__ratio>:
 101f148:	defff904 	addi	sp,sp,-28
 101f14c:	dc400315 	stw	r17,12(sp)
 101f150:	2823883a 	mov	r17,r5
 101f154:	d9400104 	addi	r5,sp,4
 101f158:	dfc00615 	stw	ra,24(sp)
 101f15c:	dcc00515 	stw	r19,20(sp)
 101f160:	dc800415 	stw	r18,16(sp)
 101f164:	2027883a 	mov	r19,r4
 101f168:	dc000215 	stw	r16,8(sp)
 101f16c:	101eef00 	call	101eef0 <__b2d>
 101f170:	d80b883a 	mov	r5,sp
 101f174:	8809883a 	mov	r4,r17
 101f178:	1025883a 	mov	r18,r2
 101f17c:	1821883a 	mov	r16,r3
 101f180:	101eef00 	call	101eef0 <__b2d>
 101f184:	8a000417 	ldw	r8,16(r17)
 101f188:	99000417 	ldw	r4,16(r19)
 101f18c:	d9400117 	ldw	r5,4(sp)
 101f190:	2209c83a 	sub	r4,r4,r8
 101f194:	2010917a 	slli	r8,r4,5
 101f198:	d9000017 	ldw	r4,0(sp)
 101f19c:	2909c83a 	sub	r4,r5,r4
 101f1a0:	4109883a 	add	r4,r8,r4
 101f1a4:	01000e0e 	bge	zero,r4,101f1e0 <__ratio+0x98>
 101f1a8:	2008953a 	slli	r4,r4,20
 101f1ac:	2421883a 	add	r16,r4,r16
 101f1b0:	100d883a 	mov	r6,r2
 101f1b4:	180f883a 	mov	r7,r3
 101f1b8:	9009883a 	mov	r4,r18
 101f1bc:	800b883a 	mov	r5,r16
 101f1c0:	10246680 	call	1024668 <__divdf3>
 101f1c4:	dfc00617 	ldw	ra,24(sp)
 101f1c8:	dcc00517 	ldw	r19,20(sp)
 101f1cc:	dc800417 	ldw	r18,16(sp)
 101f1d0:	dc400317 	ldw	r17,12(sp)
 101f1d4:	dc000217 	ldw	r16,8(sp)
 101f1d8:	dec00704 	addi	sp,sp,28
 101f1dc:	f800283a 	ret
 101f1e0:	2008953a 	slli	r4,r4,20
 101f1e4:	1907c83a 	sub	r3,r3,r4
 101f1e8:	003ff106 	br	101f1b0 <__alt_data_end+0xff01f1b0>

0101f1ec <_mprec_log10>:
 101f1ec:	defffe04 	addi	sp,sp,-8
 101f1f0:	dc000015 	stw	r16,0(sp)
 101f1f4:	dfc00115 	stw	ra,4(sp)
 101f1f8:	008005c4 	movi	r2,23
 101f1fc:	2021883a 	mov	r16,r4
 101f200:	11000d0e 	bge	r2,r4,101f238 <_mprec_log10+0x4c>
 101f204:	0005883a 	mov	r2,zero
 101f208:	00cffc34 	movhi	r3,16368
 101f20c:	843fffc4 	addi	r16,r16,-1
 101f210:	000d883a 	mov	r6,zero
 101f214:	01d00934 	movhi	r7,16420
 101f218:	1009883a 	mov	r4,r2
 101f21c:	180b883a 	mov	r5,r3
 101f220:	10251a80 	call	10251a8 <__muldf3>
 101f224:	803ff91e 	bne	r16,zero,101f20c <__alt_data_end+0xff01f20c>
 101f228:	dfc00117 	ldw	ra,4(sp)
 101f22c:	dc000017 	ldw	r16,0(sp)
 101f230:	dec00204 	addi	sp,sp,8
 101f234:	f800283a 	ret
 101f238:	202090fa 	slli	r16,r4,3
 101f23c:	008040f4 	movhi	r2,259
 101f240:	10ab3a04 	addi	r2,r2,-21272
 101f244:	1421883a 	add	r16,r2,r16
 101f248:	80800017 	ldw	r2,0(r16)
 101f24c:	80c00117 	ldw	r3,4(r16)
 101f250:	dfc00117 	ldw	ra,4(sp)
 101f254:	dc000017 	ldw	r16,0(sp)
 101f258:	dec00204 	addi	sp,sp,8
 101f25c:	f800283a 	ret

0101f260 <__copybits>:
 101f260:	297fffc4 	addi	r5,r5,-1
 101f264:	280fd17a 	srai	r7,r5,5
 101f268:	30c00417 	ldw	r3,16(r6)
 101f26c:	30800504 	addi	r2,r6,20
 101f270:	39c00044 	addi	r7,r7,1
 101f274:	18c7883a 	add	r3,r3,r3
 101f278:	39cf883a 	add	r7,r7,r7
 101f27c:	18c7883a 	add	r3,r3,r3
 101f280:	39cf883a 	add	r7,r7,r7
 101f284:	10c7883a 	add	r3,r2,r3
 101f288:	21cf883a 	add	r7,r4,r7
 101f28c:	10c00d2e 	bgeu	r2,r3,101f2c4 <__copybits+0x64>
 101f290:	200b883a 	mov	r5,r4
 101f294:	12000017 	ldw	r8,0(r2)
 101f298:	29400104 	addi	r5,r5,4
 101f29c:	10800104 	addi	r2,r2,4
 101f2a0:	2a3fff15 	stw	r8,-4(r5)
 101f2a4:	10fffb36 	bltu	r2,r3,101f294 <__alt_data_end+0xff01f294>
 101f2a8:	1985c83a 	sub	r2,r3,r6
 101f2ac:	10bffac4 	addi	r2,r2,-21
 101f2b0:	1004d0ba 	srli	r2,r2,2
 101f2b4:	10800044 	addi	r2,r2,1
 101f2b8:	1085883a 	add	r2,r2,r2
 101f2bc:	1085883a 	add	r2,r2,r2
 101f2c0:	2089883a 	add	r4,r4,r2
 101f2c4:	21c0032e 	bgeu	r4,r7,101f2d4 <__copybits+0x74>
 101f2c8:	20000015 	stw	zero,0(r4)
 101f2cc:	21000104 	addi	r4,r4,4
 101f2d0:	21fffd36 	bltu	r4,r7,101f2c8 <__alt_data_end+0xff01f2c8>
 101f2d4:	f800283a 	ret

0101f2d8 <__any_on>:
 101f2d8:	20c00417 	ldw	r3,16(r4)
 101f2dc:	2805d17a 	srai	r2,r5,5
 101f2e0:	21000504 	addi	r4,r4,20
 101f2e4:	18800d0e 	bge	r3,r2,101f31c <__any_on+0x44>
 101f2e8:	18c7883a 	add	r3,r3,r3
 101f2ec:	18c7883a 	add	r3,r3,r3
 101f2f0:	20c7883a 	add	r3,r4,r3
 101f2f4:	20c0192e 	bgeu	r4,r3,101f35c <__any_on+0x84>
 101f2f8:	18bfff17 	ldw	r2,-4(r3)
 101f2fc:	18ffff04 	addi	r3,r3,-4
 101f300:	1000041e 	bne	r2,zero,101f314 <__any_on+0x3c>
 101f304:	20c0142e 	bgeu	r4,r3,101f358 <__any_on+0x80>
 101f308:	18ffff04 	addi	r3,r3,-4
 101f30c:	19400017 	ldw	r5,0(r3)
 101f310:	283ffc26 	beq	r5,zero,101f304 <__alt_data_end+0xff01f304>
 101f314:	00800044 	movi	r2,1
 101f318:	f800283a 	ret
 101f31c:	10c00a0e 	bge	r2,r3,101f348 <__any_on+0x70>
 101f320:	1085883a 	add	r2,r2,r2
 101f324:	1085883a 	add	r2,r2,r2
 101f328:	294007cc 	andi	r5,r5,31
 101f32c:	2087883a 	add	r3,r4,r2
 101f330:	283ff026 	beq	r5,zero,101f2f4 <__alt_data_end+0xff01f2f4>
 101f334:	19800017 	ldw	r6,0(r3)
 101f338:	3144d83a 	srl	r2,r6,r5
 101f33c:	114a983a 	sll	r5,r2,r5
 101f340:	317ff41e 	bne	r6,r5,101f314 <__alt_data_end+0xff01f314>
 101f344:	003feb06 	br	101f2f4 <__alt_data_end+0xff01f2f4>
 101f348:	1085883a 	add	r2,r2,r2
 101f34c:	1085883a 	add	r2,r2,r2
 101f350:	2087883a 	add	r3,r4,r2
 101f354:	003fe706 	br	101f2f4 <__alt_data_end+0xff01f2f4>
 101f358:	f800283a 	ret
 101f35c:	0005883a 	mov	r2,zero
 101f360:	f800283a 	ret

0101f364 <_realloc_r>:
 101f364:	defff604 	addi	sp,sp,-40
 101f368:	dc800215 	stw	r18,8(sp)
 101f36c:	dfc00915 	stw	ra,36(sp)
 101f370:	df000815 	stw	fp,32(sp)
 101f374:	ddc00715 	stw	r23,28(sp)
 101f378:	dd800615 	stw	r22,24(sp)
 101f37c:	dd400515 	stw	r21,20(sp)
 101f380:	dd000415 	stw	r20,16(sp)
 101f384:	dcc00315 	stw	r19,12(sp)
 101f388:	dc400115 	stw	r17,4(sp)
 101f38c:	dc000015 	stw	r16,0(sp)
 101f390:	3025883a 	mov	r18,r6
 101f394:	2800b726 	beq	r5,zero,101f674 <_realloc_r+0x310>
 101f398:	282b883a 	mov	r21,r5
 101f39c:	2029883a 	mov	r20,r4
 101f3a0:	10270300 	call	1027030 <__malloc_lock>
 101f3a4:	a8bfff17 	ldw	r2,-4(r21)
 101f3a8:	043fff04 	movi	r16,-4
 101f3ac:	90c002c4 	addi	r3,r18,11
 101f3b0:	01000584 	movi	r4,22
 101f3b4:	acfffe04 	addi	r19,r21,-8
 101f3b8:	1420703a 	and	r16,r2,r16
 101f3bc:	20c0332e 	bgeu	r4,r3,101f48c <_realloc_r+0x128>
 101f3c0:	047ffe04 	movi	r17,-8
 101f3c4:	1c62703a 	and	r17,r3,r17
 101f3c8:	8807883a 	mov	r3,r17
 101f3cc:	88005816 	blt	r17,zero,101f530 <_realloc_r+0x1cc>
 101f3d0:	8c805736 	bltu	r17,r18,101f530 <_realloc_r+0x1cc>
 101f3d4:	80c0300e 	bge	r16,r3,101f498 <_realloc_r+0x134>
 101f3d8:	070040f4 	movhi	fp,259
 101f3dc:	e72d4904 	addi	fp,fp,-19164
 101f3e0:	e1c00217 	ldw	r7,8(fp)
 101f3e4:	9c09883a 	add	r4,r19,r16
 101f3e8:	22000117 	ldw	r8,4(r4)
 101f3ec:	21c06326 	beq	r4,r7,101f57c <_realloc_r+0x218>
 101f3f0:	017fff84 	movi	r5,-2
 101f3f4:	414a703a 	and	r5,r8,r5
 101f3f8:	214b883a 	add	r5,r4,r5
 101f3fc:	29800117 	ldw	r6,4(r5)
 101f400:	3180004c 	andi	r6,r6,1
 101f404:	30003f26 	beq	r6,zero,101f504 <_realloc_r+0x1a0>
 101f408:	1080004c 	andi	r2,r2,1
 101f40c:	10008326 	beq	r2,zero,101f61c <_realloc_r+0x2b8>
 101f410:	900b883a 	mov	r5,r18
 101f414:	a009883a 	mov	r4,r20
 101f418:	101d91c0 	call	101d91c <_malloc_r>
 101f41c:	1025883a 	mov	r18,r2
 101f420:	10011e26 	beq	r2,zero,101f89c <_realloc_r+0x538>
 101f424:	a93fff17 	ldw	r4,-4(r21)
 101f428:	10fffe04 	addi	r3,r2,-8
 101f42c:	00bfff84 	movi	r2,-2
 101f430:	2084703a 	and	r2,r4,r2
 101f434:	9885883a 	add	r2,r19,r2
 101f438:	1880ee26 	beq	r3,r2,101f7f4 <_realloc_r+0x490>
 101f43c:	81bfff04 	addi	r6,r16,-4
 101f440:	00800904 	movi	r2,36
 101f444:	1180b836 	bltu	r2,r6,101f728 <_realloc_r+0x3c4>
 101f448:	00c004c4 	movi	r3,19
 101f44c:	19809636 	bltu	r3,r6,101f6a8 <_realloc_r+0x344>
 101f450:	9005883a 	mov	r2,r18
 101f454:	a807883a 	mov	r3,r21
 101f458:	19000017 	ldw	r4,0(r3)
 101f45c:	11000015 	stw	r4,0(r2)
 101f460:	19000117 	ldw	r4,4(r3)
 101f464:	11000115 	stw	r4,4(r2)
 101f468:	18c00217 	ldw	r3,8(r3)
 101f46c:	10c00215 	stw	r3,8(r2)
 101f470:	a80b883a 	mov	r5,r21
 101f474:	a009883a 	mov	r4,r20
 101f478:	101cd300 	call	101cd30 <_free_r>
 101f47c:	a009883a 	mov	r4,r20
 101f480:	10270540 	call	1027054 <__malloc_unlock>
 101f484:	9005883a 	mov	r2,r18
 101f488:	00001206 	br	101f4d4 <_realloc_r+0x170>
 101f48c:	00c00404 	movi	r3,16
 101f490:	1823883a 	mov	r17,r3
 101f494:	003fce06 	br	101f3d0 <__alt_data_end+0xff01f3d0>
 101f498:	a825883a 	mov	r18,r21
 101f49c:	8445c83a 	sub	r2,r16,r17
 101f4a0:	00c003c4 	movi	r3,15
 101f4a4:	18802636 	bltu	r3,r2,101f540 <_realloc_r+0x1dc>
 101f4a8:	99800117 	ldw	r6,4(r19)
 101f4ac:	9c07883a 	add	r3,r19,r16
 101f4b0:	3180004c 	andi	r6,r6,1
 101f4b4:	3420b03a 	or	r16,r6,r16
 101f4b8:	9c000115 	stw	r16,4(r19)
 101f4bc:	18800117 	ldw	r2,4(r3)
 101f4c0:	10800054 	ori	r2,r2,1
 101f4c4:	18800115 	stw	r2,4(r3)
 101f4c8:	a009883a 	mov	r4,r20
 101f4cc:	10270540 	call	1027054 <__malloc_unlock>
 101f4d0:	9005883a 	mov	r2,r18
 101f4d4:	dfc00917 	ldw	ra,36(sp)
 101f4d8:	df000817 	ldw	fp,32(sp)
 101f4dc:	ddc00717 	ldw	r23,28(sp)
 101f4e0:	dd800617 	ldw	r22,24(sp)
 101f4e4:	dd400517 	ldw	r21,20(sp)
 101f4e8:	dd000417 	ldw	r20,16(sp)
 101f4ec:	dcc00317 	ldw	r19,12(sp)
 101f4f0:	dc800217 	ldw	r18,8(sp)
 101f4f4:	dc400117 	ldw	r17,4(sp)
 101f4f8:	dc000017 	ldw	r16,0(sp)
 101f4fc:	dec00a04 	addi	sp,sp,40
 101f500:	f800283a 	ret
 101f504:	017fff04 	movi	r5,-4
 101f508:	414a703a 	and	r5,r8,r5
 101f50c:	814d883a 	add	r6,r16,r5
 101f510:	30c01f16 	blt	r6,r3,101f590 <_realloc_r+0x22c>
 101f514:	20800317 	ldw	r2,12(r4)
 101f518:	20c00217 	ldw	r3,8(r4)
 101f51c:	a825883a 	mov	r18,r21
 101f520:	3021883a 	mov	r16,r6
 101f524:	18800315 	stw	r2,12(r3)
 101f528:	10c00215 	stw	r3,8(r2)
 101f52c:	003fdb06 	br	101f49c <__alt_data_end+0xff01f49c>
 101f530:	00800304 	movi	r2,12
 101f534:	a0800015 	stw	r2,0(r20)
 101f538:	0005883a 	mov	r2,zero
 101f53c:	003fe506 	br	101f4d4 <__alt_data_end+0xff01f4d4>
 101f540:	98c00117 	ldw	r3,4(r19)
 101f544:	9c4b883a 	add	r5,r19,r17
 101f548:	11000054 	ori	r4,r2,1
 101f54c:	18c0004c 	andi	r3,r3,1
 101f550:	1c62b03a 	or	r17,r3,r17
 101f554:	9c400115 	stw	r17,4(r19)
 101f558:	29000115 	stw	r4,4(r5)
 101f55c:	2885883a 	add	r2,r5,r2
 101f560:	10c00117 	ldw	r3,4(r2)
 101f564:	29400204 	addi	r5,r5,8
 101f568:	a009883a 	mov	r4,r20
 101f56c:	18c00054 	ori	r3,r3,1
 101f570:	10c00115 	stw	r3,4(r2)
 101f574:	101cd300 	call	101cd30 <_free_r>
 101f578:	003fd306 	br	101f4c8 <__alt_data_end+0xff01f4c8>
 101f57c:	017fff04 	movi	r5,-4
 101f580:	414a703a 	and	r5,r8,r5
 101f584:	89800404 	addi	r6,r17,16
 101f588:	8151883a 	add	r8,r16,r5
 101f58c:	4180590e 	bge	r8,r6,101f6f4 <_realloc_r+0x390>
 101f590:	1080004c 	andi	r2,r2,1
 101f594:	103f9e1e 	bne	r2,zero,101f410 <__alt_data_end+0xff01f410>
 101f598:	adbffe17 	ldw	r22,-8(r21)
 101f59c:	00bfff04 	movi	r2,-4
 101f5a0:	9dadc83a 	sub	r22,r19,r22
 101f5a4:	b1800117 	ldw	r6,4(r22)
 101f5a8:	3084703a 	and	r2,r6,r2
 101f5ac:	20002026 	beq	r4,zero,101f630 <_realloc_r+0x2cc>
 101f5b0:	80af883a 	add	r23,r16,r2
 101f5b4:	b96f883a 	add	r23,r23,r5
 101f5b8:	21c05f26 	beq	r4,r7,101f738 <_realloc_r+0x3d4>
 101f5bc:	b8c01c16 	blt	r23,r3,101f630 <_realloc_r+0x2cc>
 101f5c0:	20800317 	ldw	r2,12(r4)
 101f5c4:	20c00217 	ldw	r3,8(r4)
 101f5c8:	81bfff04 	addi	r6,r16,-4
 101f5cc:	01000904 	movi	r4,36
 101f5d0:	18800315 	stw	r2,12(r3)
 101f5d4:	10c00215 	stw	r3,8(r2)
 101f5d8:	b0c00217 	ldw	r3,8(r22)
 101f5dc:	b0800317 	ldw	r2,12(r22)
 101f5e0:	b4800204 	addi	r18,r22,8
 101f5e4:	18800315 	stw	r2,12(r3)
 101f5e8:	10c00215 	stw	r3,8(r2)
 101f5ec:	21801b36 	bltu	r4,r6,101f65c <_realloc_r+0x2f8>
 101f5f0:	008004c4 	movi	r2,19
 101f5f4:	1180352e 	bgeu	r2,r6,101f6cc <_realloc_r+0x368>
 101f5f8:	a8800017 	ldw	r2,0(r21)
 101f5fc:	b0800215 	stw	r2,8(r22)
 101f600:	a8800117 	ldw	r2,4(r21)
 101f604:	b0800315 	stw	r2,12(r22)
 101f608:	008006c4 	movi	r2,27
 101f60c:	11807f36 	bltu	r2,r6,101f80c <_realloc_r+0x4a8>
 101f610:	b0800404 	addi	r2,r22,16
 101f614:	ad400204 	addi	r21,r21,8
 101f618:	00002d06 	br	101f6d0 <_realloc_r+0x36c>
 101f61c:	adbffe17 	ldw	r22,-8(r21)
 101f620:	00bfff04 	movi	r2,-4
 101f624:	9dadc83a 	sub	r22,r19,r22
 101f628:	b1000117 	ldw	r4,4(r22)
 101f62c:	2084703a 	and	r2,r4,r2
 101f630:	b03f7726 	beq	r22,zero,101f410 <__alt_data_end+0xff01f410>
 101f634:	80af883a 	add	r23,r16,r2
 101f638:	b8ff7516 	blt	r23,r3,101f410 <__alt_data_end+0xff01f410>
 101f63c:	b0800317 	ldw	r2,12(r22)
 101f640:	b0c00217 	ldw	r3,8(r22)
 101f644:	81bfff04 	addi	r6,r16,-4
 101f648:	01000904 	movi	r4,36
 101f64c:	18800315 	stw	r2,12(r3)
 101f650:	10c00215 	stw	r3,8(r2)
 101f654:	b4800204 	addi	r18,r22,8
 101f658:	21bfe52e 	bgeu	r4,r6,101f5f0 <__alt_data_end+0xff01f5f0>
 101f65c:	a80b883a 	mov	r5,r21
 101f660:	9009883a 	mov	r4,r18
 101f664:	101e20c0 	call	101e20c <memmove>
 101f668:	b821883a 	mov	r16,r23
 101f66c:	b027883a 	mov	r19,r22
 101f670:	003f8a06 	br	101f49c <__alt_data_end+0xff01f49c>
 101f674:	300b883a 	mov	r5,r6
 101f678:	dfc00917 	ldw	ra,36(sp)
 101f67c:	df000817 	ldw	fp,32(sp)
 101f680:	ddc00717 	ldw	r23,28(sp)
 101f684:	dd800617 	ldw	r22,24(sp)
 101f688:	dd400517 	ldw	r21,20(sp)
 101f68c:	dd000417 	ldw	r20,16(sp)
 101f690:	dcc00317 	ldw	r19,12(sp)
 101f694:	dc800217 	ldw	r18,8(sp)
 101f698:	dc400117 	ldw	r17,4(sp)
 101f69c:	dc000017 	ldw	r16,0(sp)
 101f6a0:	dec00a04 	addi	sp,sp,40
 101f6a4:	101d91c1 	jmpi	101d91c <_malloc_r>
 101f6a8:	a8c00017 	ldw	r3,0(r21)
 101f6ac:	90c00015 	stw	r3,0(r18)
 101f6b0:	a8c00117 	ldw	r3,4(r21)
 101f6b4:	90c00115 	stw	r3,4(r18)
 101f6b8:	00c006c4 	movi	r3,27
 101f6bc:	19804536 	bltu	r3,r6,101f7d4 <_realloc_r+0x470>
 101f6c0:	90800204 	addi	r2,r18,8
 101f6c4:	a8c00204 	addi	r3,r21,8
 101f6c8:	003f6306 	br	101f458 <__alt_data_end+0xff01f458>
 101f6cc:	9005883a 	mov	r2,r18
 101f6d0:	a8c00017 	ldw	r3,0(r21)
 101f6d4:	b821883a 	mov	r16,r23
 101f6d8:	b027883a 	mov	r19,r22
 101f6dc:	10c00015 	stw	r3,0(r2)
 101f6e0:	a8c00117 	ldw	r3,4(r21)
 101f6e4:	10c00115 	stw	r3,4(r2)
 101f6e8:	a8c00217 	ldw	r3,8(r21)
 101f6ec:	10c00215 	stw	r3,8(r2)
 101f6f0:	003f6a06 	br	101f49c <__alt_data_end+0xff01f49c>
 101f6f4:	9c67883a 	add	r19,r19,r17
 101f6f8:	4445c83a 	sub	r2,r8,r17
 101f6fc:	e4c00215 	stw	r19,8(fp)
 101f700:	10800054 	ori	r2,r2,1
 101f704:	98800115 	stw	r2,4(r19)
 101f708:	a8bfff17 	ldw	r2,-4(r21)
 101f70c:	a009883a 	mov	r4,r20
 101f710:	1080004c 	andi	r2,r2,1
 101f714:	1462b03a 	or	r17,r2,r17
 101f718:	ac7fff15 	stw	r17,-4(r21)
 101f71c:	10270540 	call	1027054 <__malloc_unlock>
 101f720:	a805883a 	mov	r2,r21
 101f724:	003f6b06 	br	101f4d4 <__alt_data_end+0xff01f4d4>
 101f728:	a80b883a 	mov	r5,r21
 101f72c:	9009883a 	mov	r4,r18
 101f730:	101e20c0 	call	101e20c <memmove>
 101f734:	003f4e06 	br	101f470 <__alt_data_end+0xff01f470>
 101f738:	89000404 	addi	r4,r17,16
 101f73c:	b93fbc16 	blt	r23,r4,101f630 <__alt_data_end+0xff01f630>
 101f740:	b0800317 	ldw	r2,12(r22)
 101f744:	b0c00217 	ldw	r3,8(r22)
 101f748:	81bfff04 	addi	r6,r16,-4
 101f74c:	01000904 	movi	r4,36
 101f750:	18800315 	stw	r2,12(r3)
 101f754:	10c00215 	stw	r3,8(r2)
 101f758:	b4800204 	addi	r18,r22,8
 101f75c:	21804336 	bltu	r4,r6,101f86c <_realloc_r+0x508>
 101f760:	008004c4 	movi	r2,19
 101f764:	11803f2e 	bgeu	r2,r6,101f864 <_realloc_r+0x500>
 101f768:	a8800017 	ldw	r2,0(r21)
 101f76c:	b0800215 	stw	r2,8(r22)
 101f770:	a8800117 	ldw	r2,4(r21)
 101f774:	b0800315 	stw	r2,12(r22)
 101f778:	008006c4 	movi	r2,27
 101f77c:	11803f36 	bltu	r2,r6,101f87c <_realloc_r+0x518>
 101f780:	b0800404 	addi	r2,r22,16
 101f784:	ad400204 	addi	r21,r21,8
 101f788:	a8c00017 	ldw	r3,0(r21)
 101f78c:	10c00015 	stw	r3,0(r2)
 101f790:	a8c00117 	ldw	r3,4(r21)
 101f794:	10c00115 	stw	r3,4(r2)
 101f798:	a8c00217 	ldw	r3,8(r21)
 101f79c:	10c00215 	stw	r3,8(r2)
 101f7a0:	b447883a 	add	r3,r22,r17
 101f7a4:	bc45c83a 	sub	r2,r23,r17
 101f7a8:	e0c00215 	stw	r3,8(fp)
 101f7ac:	10800054 	ori	r2,r2,1
 101f7b0:	18800115 	stw	r2,4(r3)
 101f7b4:	b0800117 	ldw	r2,4(r22)
 101f7b8:	a009883a 	mov	r4,r20
 101f7bc:	1080004c 	andi	r2,r2,1
 101f7c0:	1462b03a 	or	r17,r2,r17
 101f7c4:	b4400115 	stw	r17,4(r22)
 101f7c8:	10270540 	call	1027054 <__malloc_unlock>
 101f7cc:	9005883a 	mov	r2,r18
 101f7d0:	003f4006 	br	101f4d4 <__alt_data_end+0xff01f4d4>
 101f7d4:	a8c00217 	ldw	r3,8(r21)
 101f7d8:	90c00215 	stw	r3,8(r18)
 101f7dc:	a8c00317 	ldw	r3,12(r21)
 101f7e0:	90c00315 	stw	r3,12(r18)
 101f7e4:	30801126 	beq	r6,r2,101f82c <_realloc_r+0x4c8>
 101f7e8:	90800404 	addi	r2,r18,16
 101f7ec:	a8c00404 	addi	r3,r21,16
 101f7f0:	003f1906 	br	101f458 <__alt_data_end+0xff01f458>
 101f7f4:	90ffff17 	ldw	r3,-4(r18)
 101f7f8:	00bfff04 	movi	r2,-4
 101f7fc:	a825883a 	mov	r18,r21
 101f800:	1884703a 	and	r2,r3,r2
 101f804:	80a1883a 	add	r16,r16,r2
 101f808:	003f2406 	br	101f49c <__alt_data_end+0xff01f49c>
 101f80c:	a8800217 	ldw	r2,8(r21)
 101f810:	b0800415 	stw	r2,16(r22)
 101f814:	a8800317 	ldw	r2,12(r21)
 101f818:	b0800515 	stw	r2,20(r22)
 101f81c:	31000a26 	beq	r6,r4,101f848 <_realloc_r+0x4e4>
 101f820:	b0800604 	addi	r2,r22,24
 101f824:	ad400404 	addi	r21,r21,16
 101f828:	003fa906 	br	101f6d0 <__alt_data_end+0xff01f6d0>
 101f82c:	a9000417 	ldw	r4,16(r21)
 101f830:	90800604 	addi	r2,r18,24
 101f834:	a8c00604 	addi	r3,r21,24
 101f838:	91000415 	stw	r4,16(r18)
 101f83c:	a9000517 	ldw	r4,20(r21)
 101f840:	91000515 	stw	r4,20(r18)
 101f844:	003f0406 	br	101f458 <__alt_data_end+0xff01f458>
 101f848:	a8c00417 	ldw	r3,16(r21)
 101f84c:	ad400604 	addi	r21,r21,24
 101f850:	b0800804 	addi	r2,r22,32
 101f854:	b0c00615 	stw	r3,24(r22)
 101f858:	a8ffff17 	ldw	r3,-4(r21)
 101f85c:	b0c00715 	stw	r3,28(r22)
 101f860:	003f9b06 	br	101f6d0 <__alt_data_end+0xff01f6d0>
 101f864:	9005883a 	mov	r2,r18
 101f868:	003fc706 	br	101f788 <__alt_data_end+0xff01f788>
 101f86c:	a80b883a 	mov	r5,r21
 101f870:	9009883a 	mov	r4,r18
 101f874:	101e20c0 	call	101e20c <memmove>
 101f878:	003fc906 	br	101f7a0 <__alt_data_end+0xff01f7a0>
 101f87c:	a8800217 	ldw	r2,8(r21)
 101f880:	b0800415 	stw	r2,16(r22)
 101f884:	a8800317 	ldw	r2,12(r21)
 101f888:	b0800515 	stw	r2,20(r22)
 101f88c:	31000726 	beq	r6,r4,101f8ac <_realloc_r+0x548>
 101f890:	b0800604 	addi	r2,r22,24
 101f894:	ad400404 	addi	r21,r21,16
 101f898:	003fbb06 	br	101f788 <__alt_data_end+0xff01f788>
 101f89c:	a009883a 	mov	r4,r20
 101f8a0:	10270540 	call	1027054 <__malloc_unlock>
 101f8a4:	0005883a 	mov	r2,zero
 101f8a8:	003f0a06 	br	101f4d4 <__alt_data_end+0xff01f4d4>
 101f8ac:	a8c00417 	ldw	r3,16(r21)
 101f8b0:	ad400604 	addi	r21,r21,24
 101f8b4:	b0800804 	addi	r2,r22,32
 101f8b8:	b0c00615 	stw	r3,24(r22)
 101f8bc:	a8ffff17 	ldw	r3,-4(r21)
 101f8c0:	b0c00715 	stw	r3,28(r22)
 101f8c4:	003fb006 	br	101f788 <__alt_data_end+0xff01f788>

0101f8c8 <__fpclassifyd>:
 101f8c8:	00a00034 	movhi	r2,32768
 101f8cc:	10bfffc4 	addi	r2,r2,-1
 101f8d0:	2884703a 	and	r2,r5,r2
 101f8d4:	10000726 	beq	r2,zero,101f8f4 <__fpclassifyd+0x2c>
 101f8d8:	00fffc34 	movhi	r3,65520
 101f8dc:	019ff834 	movhi	r6,32736
 101f8e0:	28c7883a 	add	r3,r5,r3
 101f8e4:	31bfffc4 	addi	r6,r6,-1
 101f8e8:	30c00536 	bltu	r6,r3,101f900 <__fpclassifyd+0x38>
 101f8ec:	00800104 	movi	r2,4
 101f8f0:	f800283a 	ret
 101f8f4:	2000021e 	bne	r4,zero,101f900 <__fpclassifyd+0x38>
 101f8f8:	00800084 	movi	r2,2
 101f8fc:	f800283a 	ret
 101f900:	00dffc34 	movhi	r3,32752
 101f904:	019ff834 	movhi	r6,32736
 101f908:	28cb883a 	add	r5,r5,r3
 101f90c:	31bfffc4 	addi	r6,r6,-1
 101f910:	317ff62e 	bgeu	r6,r5,101f8ec <__alt_data_end+0xff01f8ec>
 101f914:	01400434 	movhi	r5,16
 101f918:	297fffc4 	addi	r5,r5,-1
 101f91c:	28800236 	bltu	r5,r2,101f928 <__fpclassifyd+0x60>
 101f920:	008000c4 	movi	r2,3
 101f924:	f800283a 	ret
 101f928:	10c00226 	beq	r2,r3,101f934 <__fpclassifyd+0x6c>
 101f92c:	0005883a 	mov	r2,zero
 101f930:	f800283a 	ret
 101f934:	2005003a 	cmpeq	r2,r4,zero
 101f938:	f800283a 	ret

0101f93c <_sbrk_r>:
 101f93c:	defffd04 	addi	sp,sp,-12
 101f940:	dc000015 	stw	r16,0(sp)
 101f944:	040040f4 	movhi	r16,259
 101f948:	dc400115 	stw	r17,4(sp)
 101f94c:	843a2c04 	addi	r16,r16,-5968
 101f950:	2023883a 	mov	r17,r4
 101f954:	2809883a 	mov	r4,r5
 101f958:	dfc00215 	stw	ra,8(sp)
 101f95c:	80000015 	stw	zero,0(r16)
 101f960:	10272140 	call	1027214 <sbrk>
 101f964:	00ffffc4 	movi	r3,-1
 101f968:	10c00526 	beq	r2,r3,101f980 <_sbrk_r+0x44>
 101f96c:	dfc00217 	ldw	ra,8(sp)
 101f970:	dc400117 	ldw	r17,4(sp)
 101f974:	dc000017 	ldw	r16,0(sp)
 101f978:	dec00304 	addi	sp,sp,12
 101f97c:	f800283a 	ret
 101f980:	80c00017 	ldw	r3,0(r16)
 101f984:	183ff926 	beq	r3,zero,101f96c <__alt_data_end+0xff01f96c>
 101f988:	88c00015 	stw	r3,0(r17)
 101f98c:	003ff706 	br	101f96c <__alt_data_end+0xff01f96c>

0101f990 <_init_signal_r>:
 101f990:	2080b717 	ldw	r2,732(r4)
 101f994:	10000226 	beq	r2,zero,101f9a0 <_init_signal_r+0x10>
 101f998:	0005883a 	mov	r2,zero
 101f99c:	f800283a 	ret
 101f9a0:	defffe04 	addi	sp,sp,-8
 101f9a4:	01402004 	movi	r5,128
 101f9a8:	dc000015 	stw	r16,0(sp)
 101f9ac:	dfc00115 	stw	ra,4(sp)
 101f9b0:	2021883a 	mov	r16,r4
 101f9b4:	101d91c0 	call	101d91c <_malloc_r>
 101f9b8:	8080b715 	stw	r2,732(r16)
 101f9bc:	10000d26 	beq	r2,zero,101f9f4 <_init_signal_r+0x64>
 101f9c0:	0007883a 	mov	r3,zero
 101f9c4:	01002004 	movi	r4,128
 101f9c8:	00000106 	br	101f9d0 <_init_signal_r+0x40>
 101f9cc:	8080b717 	ldw	r2,732(r16)
 101f9d0:	10c5883a 	add	r2,r2,r3
 101f9d4:	10000015 	stw	zero,0(r2)
 101f9d8:	18c00104 	addi	r3,r3,4
 101f9dc:	193ffb1e 	bne	r3,r4,101f9cc <__alt_data_end+0xff01f9cc>
 101f9e0:	0005883a 	mov	r2,zero
 101f9e4:	dfc00117 	ldw	ra,4(sp)
 101f9e8:	dc000017 	ldw	r16,0(sp)
 101f9ec:	dec00204 	addi	sp,sp,8
 101f9f0:	f800283a 	ret
 101f9f4:	00bfffc4 	movi	r2,-1
 101f9f8:	003ffa06 	br	101f9e4 <__alt_data_end+0xff01f9e4>

0101f9fc <_signal_r>:
 101f9fc:	00c007c4 	movi	r3,31
 101fa00:	19401536 	bltu	r3,r5,101fa58 <_signal_r+0x5c>
 101fa04:	2080b717 	ldw	r2,732(r4)
 101fa08:	defffc04 	addi	sp,sp,-16
 101fa0c:	dc800215 	stw	r18,8(sp)
 101fa10:	dc400115 	stw	r17,4(sp)
 101fa14:	dc000015 	stw	r16,0(sp)
 101fa18:	dfc00315 	stw	ra,12(sp)
 101fa1c:	3023883a 	mov	r17,r6
 101fa20:	2021883a 	mov	r16,r4
 101fa24:	2825883a 	mov	r18,r5
 101fa28:	10000f26 	beq	r2,zero,101fa68 <_signal_r+0x6c>
 101fa2c:	948b883a 	add	r5,r18,r18
 101fa30:	294b883a 	add	r5,r5,r5
 101fa34:	114b883a 	add	r5,r2,r5
 101fa38:	28800017 	ldw	r2,0(r5)
 101fa3c:	2c400015 	stw	r17,0(r5)
 101fa40:	dfc00317 	ldw	ra,12(sp)
 101fa44:	dc800217 	ldw	r18,8(sp)
 101fa48:	dc400117 	ldw	r17,4(sp)
 101fa4c:	dc000017 	ldw	r16,0(sp)
 101fa50:	dec00404 	addi	sp,sp,16
 101fa54:	f800283a 	ret
 101fa58:	00c00584 	movi	r3,22
 101fa5c:	20c00015 	stw	r3,0(r4)
 101fa60:	00bfffc4 	movi	r2,-1
 101fa64:	f800283a 	ret
 101fa68:	101f9900 	call	101f990 <_init_signal_r>
 101fa6c:	1000021e 	bne	r2,zero,101fa78 <_signal_r+0x7c>
 101fa70:	8080b717 	ldw	r2,732(r16)
 101fa74:	003fed06 	br	101fa2c <__alt_data_end+0xff01fa2c>
 101fa78:	00bfffc4 	movi	r2,-1
 101fa7c:	003ff006 	br	101fa40 <__alt_data_end+0xff01fa40>

0101fa80 <_raise_r>:
 101fa80:	008007c4 	movi	r2,31
 101fa84:	11402936 	bltu	r2,r5,101fb2c <_raise_r+0xac>
 101fa88:	20c0b717 	ldw	r3,732(r4)
 101fa8c:	defffd04 	addi	sp,sp,-12
 101fa90:	dc400115 	stw	r17,4(sp)
 101fa94:	dc000015 	stw	r16,0(sp)
 101fa98:	dfc00215 	stw	ra,8(sp)
 101fa9c:	2021883a 	mov	r16,r4
 101faa0:	2823883a 	mov	r17,r5
 101faa4:	18001726 	beq	r3,zero,101fb04 <_raise_r+0x84>
 101faa8:	2945883a 	add	r2,r5,r5
 101faac:	1085883a 	add	r2,r2,r2
 101fab0:	1887883a 	add	r3,r3,r2
 101fab4:	19800017 	ldw	r6,0(r3)
 101fab8:	30001226 	beq	r6,zero,101fb04 <_raise_r+0x84>
 101fabc:	00800044 	movi	r2,1
 101fac0:	30800e26 	beq	r6,r2,101fafc <_raise_r+0x7c>
 101fac4:	013fffc4 	movi	r4,-1
 101fac8:	31000926 	beq	r6,r4,101faf0 <_raise_r+0x70>
 101facc:	18000015 	stw	zero,0(r3)
 101fad0:	2809883a 	mov	r4,r5
 101fad4:	303ee83a 	callr	r6
 101fad8:	0005883a 	mov	r2,zero
 101fadc:	dfc00217 	ldw	ra,8(sp)
 101fae0:	dc400117 	ldw	r17,4(sp)
 101fae4:	dc000017 	ldw	r16,0(sp)
 101fae8:	dec00304 	addi	sp,sp,12
 101faec:	f800283a 	ret
 101faf0:	00c00584 	movi	r3,22
 101faf4:	80c00015 	stw	r3,0(r16)
 101faf8:	003ff806 	br	101fadc <__alt_data_end+0xff01fadc>
 101fafc:	0005883a 	mov	r2,zero
 101fb00:	003ff606 	br	101fadc <__alt_data_end+0xff01fadc>
 101fb04:	8009883a 	mov	r4,r16
 101fb08:	101fc900 	call	101fc90 <_getpid_r>
 101fb0c:	880d883a 	mov	r6,r17
 101fb10:	100b883a 	mov	r5,r2
 101fb14:	8009883a 	mov	r4,r16
 101fb18:	dfc00217 	ldw	ra,8(sp)
 101fb1c:	dc400117 	ldw	r17,4(sp)
 101fb20:	dc000017 	ldw	r16,0(sp)
 101fb24:	dec00304 	addi	sp,sp,12
 101fb28:	101fc341 	jmpi	101fc34 <_kill_r>
 101fb2c:	00800584 	movi	r2,22
 101fb30:	20800015 	stw	r2,0(r4)
 101fb34:	00bfffc4 	movi	r2,-1
 101fb38:	f800283a 	ret

0101fb3c <__sigtramp_r>:
 101fb3c:	008007c4 	movi	r2,31
 101fb40:	11402436 	bltu	r2,r5,101fbd4 <__sigtramp_r+0x98>
 101fb44:	20c0b717 	ldw	r3,732(r4)
 101fb48:	defffd04 	addi	sp,sp,-12
 101fb4c:	dc400115 	stw	r17,4(sp)
 101fb50:	dc000015 	stw	r16,0(sp)
 101fb54:	dfc00215 	stw	ra,8(sp)
 101fb58:	2021883a 	mov	r16,r4
 101fb5c:	2823883a 	mov	r17,r5
 101fb60:	18001826 	beq	r3,zero,101fbc4 <__sigtramp_r+0x88>
 101fb64:	8c45883a 	add	r2,r17,r17
 101fb68:	1085883a 	add	r2,r2,r2
 101fb6c:	1885883a 	add	r2,r3,r2
 101fb70:	10c00017 	ldw	r3,0(r2)
 101fb74:	18001126 	beq	r3,zero,101fbbc <__sigtramp_r+0x80>
 101fb78:	013fffc4 	movi	r4,-1
 101fb7c:	19000d26 	beq	r3,r4,101fbb4 <__sigtramp_r+0x78>
 101fb80:	01000044 	movi	r4,1
 101fb84:	19000926 	beq	r3,r4,101fbac <__sigtramp_r+0x70>
 101fb88:	10000015 	stw	zero,0(r2)
 101fb8c:	8809883a 	mov	r4,r17
 101fb90:	183ee83a 	callr	r3
 101fb94:	0005883a 	mov	r2,zero
 101fb98:	dfc00217 	ldw	ra,8(sp)
 101fb9c:	dc400117 	ldw	r17,4(sp)
 101fba0:	dc000017 	ldw	r16,0(sp)
 101fba4:	dec00304 	addi	sp,sp,12
 101fba8:	f800283a 	ret
 101fbac:	008000c4 	movi	r2,3
 101fbb0:	003ff906 	br	101fb98 <__alt_data_end+0xff01fb98>
 101fbb4:	00800084 	movi	r2,2
 101fbb8:	003ff706 	br	101fb98 <__alt_data_end+0xff01fb98>
 101fbbc:	00800044 	movi	r2,1
 101fbc0:	003ff506 	br	101fb98 <__alt_data_end+0xff01fb98>
 101fbc4:	101f9900 	call	101f990 <_init_signal_r>
 101fbc8:	1000041e 	bne	r2,zero,101fbdc <__sigtramp_r+0xa0>
 101fbcc:	80c0b717 	ldw	r3,732(r16)
 101fbd0:	003fe406 	br	101fb64 <__alt_data_end+0xff01fb64>
 101fbd4:	00bfffc4 	movi	r2,-1
 101fbd8:	f800283a 	ret
 101fbdc:	00bfffc4 	movi	r2,-1
 101fbe0:	003fed06 	br	101fb98 <__alt_data_end+0xff01fb98>

0101fbe4 <raise>:
 101fbe4:	008040f4 	movhi	r2,259
 101fbe8:	10b2dc04 	addi	r2,r2,-13456
 101fbec:	200b883a 	mov	r5,r4
 101fbf0:	11000017 	ldw	r4,0(r2)
 101fbf4:	101fa801 	jmpi	101fa80 <_raise_r>

0101fbf8 <signal>:
 101fbf8:	008040f4 	movhi	r2,259
 101fbfc:	10b2dc04 	addi	r2,r2,-13456
 101fc00:	280d883a 	mov	r6,r5
 101fc04:	200b883a 	mov	r5,r4
 101fc08:	11000017 	ldw	r4,0(r2)
 101fc0c:	101f9fc1 	jmpi	101f9fc <_signal_r>

0101fc10 <_init_signal>:
 101fc10:	008040f4 	movhi	r2,259
 101fc14:	10b2dc04 	addi	r2,r2,-13456
 101fc18:	11000017 	ldw	r4,0(r2)
 101fc1c:	101f9901 	jmpi	101f990 <_init_signal_r>

0101fc20 <__sigtramp>:
 101fc20:	008040f4 	movhi	r2,259
 101fc24:	10b2dc04 	addi	r2,r2,-13456
 101fc28:	200b883a 	mov	r5,r4
 101fc2c:	11000017 	ldw	r4,0(r2)
 101fc30:	101fb3c1 	jmpi	101fb3c <__sigtramp_r>

0101fc34 <_kill_r>:
 101fc34:	defffd04 	addi	sp,sp,-12
 101fc38:	2805883a 	mov	r2,r5
 101fc3c:	dc000015 	stw	r16,0(sp)
 101fc40:	040040f4 	movhi	r16,259
 101fc44:	dc400115 	stw	r17,4(sp)
 101fc48:	843a2c04 	addi	r16,r16,-5968
 101fc4c:	2023883a 	mov	r17,r4
 101fc50:	300b883a 	mov	r5,r6
 101fc54:	1009883a 	mov	r4,r2
 101fc58:	dfc00215 	stw	ra,8(sp)
 101fc5c:	80000015 	stw	zero,0(r16)
 101fc60:	1026c880 	call	1026c88 <kill>
 101fc64:	00ffffc4 	movi	r3,-1
 101fc68:	10c00526 	beq	r2,r3,101fc80 <_kill_r+0x4c>
 101fc6c:	dfc00217 	ldw	ra,8(sp)
 101fc70:	dc400117 	ldw	r17,4(sp)
 101fc74:	dc000017 	ldw	r16,0(sp)
 101fc78:	dec00304 	addi	sp,sp,12
 101fc7c:	f800283a 	ret
 101fc80:	80c00017 	ldw	r3,0(r16)
 101fc84:	183ff926 	beq	r3,zero,101fc6c <__alt_data_end+0xff01fc6c>
 101fc88:	88c00015 	stw	r3,0(r17)
 101fc8c:	003ff706 	br	101fc6c <__alt_data_end+0xff01fc6c>

0101fc90 <_getpid_r>:
 101fc90:	102673c1 	jmpi	102673c <getpid>

0101fc94 <__sread>:
 101fc94:	defffe04 	addi	sp,sp,-8
 101fc98:	dc000015 	stw	r16,0(sp)
 101fc9c:	2821883a 	mov	r16,r5
 101fca0:	2940038f 	ldh	r5,14(r5)
 101fca4:	dfc00115 	stw	ra,4(sp)
 101fca8:	1022db80 	call	1022db8 <_read_r>
 101fcac:	10000716 	blt	r2,zero,101fccc <__sread+0x38>
 101fcb0:	80c01417 	ldw	r3,80(r16)
 101fcb4:	1887883a 	add	r3,r3,r2
 101fcb8:	80c01415 	stw	r3,80(r16)
 101fcbc:	dfc00117 	ldw	ra,4(sp)
 101fcc0:	dc000017 	ldw	r16,0(sp)
 101fcc4:	dec00204 	addi	sp,sp,8
 101fcc8:	f800283a 	ret
 101fccc:	80c0030b 	ldhu	r3,12(r16)
 101fcd0:	18fbffcc 	andi	r3,r3,61439
 101fcd4:	80c0030d 	sth	r3,12(r16)
 101fcd8:	dfc00117 	ldw	ra,4(sp)
 101fcdc:	dc000017 	ldw	r16,0(sp)
 101fce0:	dec00204 	addi	sp,sp,8
 101fce4:	f800283a 	ret

0101fce8 <__seofread>:
 101fce8:	0005883a 	mov	r2,zero
 101fcec:	f800283a 	ret

0101fcf0 <__swrite>:
 101fcf0:	2880030b 	ldhu	r2,12(r5)
 101fcf4:	defffb04 	addi	sp,sp,-20
 101fcf8:	dcc00315 	stw	r19,12(sp)
 101fcfc:	dc800215 	stw	r18,8(sp)
 101fd00:	dc400115 	stw	r17,4(sp)
 101fd04:	dc000015 	stw	r16,0(sp)
 101fd08:	dfc00415 	stw	ra,16(sp)
 101fd0c:	10c0400c 	andi	r3,r2,256
 101fd10:	2821883a 	mov	r16,r5
 101fd14:	2023883a 	mov	r17,r4
 101fd18:	3025883a 	mov	r18,r6
 101fd1c:	3827883a 	mov	r19,r7
 101fd20:	18000526 	beq	r3,zero,101fd38 <__swrite+0x48>
 101fd24:	2940038f 	ldh	r5,14(r5)
 101fd28:	01c00084 	movi	r7,2
 101fd2c:	000d883a 	mov	r6,zero
 101fd30:	1022d580 	call	1022d58 <_lseek_r>
 101fd34:	8080030b 	ldhu	r2,12(r16)
 101fd38:	8140038f 	ldh	r5,14(r16)
 101fd3c:	10bbffcc 	andi	r2,r2,61439
 101fd40:	980f883a 	mov	r7,r19
 101fd44:	900d883a 	mov	r6,r18
 101fd48:	8809883a 	mov	r4,r17
 101fd4c:	8080030d 	sth	r2,12(r16)
 101fd50:	dfc00417 	ldw	ra,16(sp)
 101fd54:	dcc00317 	ldw	r19,12(sp)
 101fd58:	dc800217 	ldw	r18,8(sp)
 101fd5c:	dc400117 	ldw	r17,4(sp)
 101fd60:	dc000017 	ldw	r16,0(sp)
 101fd64:	dec00504 	addi	sp,sp,20
 101fd68:	10228241 	jmpi	1022824 <_write_r>

0101fd6c <__sseek>:
 101fd6c:	defffe04 	addi	sp,sp,-8
 101fd70:	dc000015 	stw	r16,0(sp)
 101fd74:	2821883a 	mov	r16,r5
 101fd78:	2940038f 	ldh	r5,14(r5)
 101fd7c:	dfc00115 	stw	ra,4(sp)
 101fd80:	1022d580 	call	1022d58 <_lseek_r>
 101fd84:	00ffffc4 	movi	r3,-1
 101fd88:	10c00826 	beq	r2,r3,101fdac <__sseek+0x40>
 101fd8c:	80c0030b 	ldhu	r3,12(r16)
 101fd90:	80801415 	stw	r2,80(r16)
 101fd94:	18c40014 	ori	r3,r3,4096
 101fd98:	80c0030d 	sth	r3,12(r16)
 101fd9c:	dfc00117 	ldw	ra,4(sp)
 101fda0:	dc000017 	ldw	r16,0(sp)
 101fda4:	dec00204 	addi	sp,sp,8
 101fda8:	f800283a 	ret
 101fdac:	80c0030b 	ldhu	r3,12(r16)
 101fdb0:	18fbffcc 	andi	r3,r3,61439
 101fdb4:	80c0030d 	sth	r3,12(r16)
 101fdb8:	dfc00117 	ldw	ra,4(sp)
 101fdbc:	dc000017 	ldw	r16,0(sp)
 101fdc0:	dec00204 	addi	sp,sp,8
 101fdc4:	f800283a 	ret

0101fdc8 <__sclose>:
 101fdc8:	2940038f 	ldh	r5,14(r5)
 101fdcc:	10228841 	jmpi	1022884 <_close_r>

0101fdd0 <__ssprint_r>:
 101fdd0:	30800217 	ldw	r2,8(r6)
 101fdd4:	defff604 	addi	sp,sp,-40
 101fdd8:	dc800215 	stw	r18,8(sp)
 101fddc:	dfc00915 	stw	ra,36(sp)
 101fde0:	df000815 	stw	fp,32(sp)
 101fde4:	ddc00715 	stw	r23,28(sp)
 101fde8:	dd800615 	stw	r22,24(sp)
 101fdec:	dd400515 	stw	r21,20(sp)
 101fdf0:	dd000415 	stw	r20,16(sp)
 101fdf4:	dcc00315 	stw	r19,12(sp)
 101fdf8:	dc400115 	stw	r17,4(sp)
 101fdfc:	dc000015 	stw	r16,0(sp)
 101fe00:	3025883a 	mov	r18,r6
 101fe04:	10005826 	beq	r2,zero,101ff68 <__ssprint_r+0x198>
 101fe08:	2027883a 	mov	r19,r4
 101fe0c:	35c00017 	ldw	r23,0(r6)
 101fe10:	29000017 	ldw	r4,0(r5)
 101fe14:	28800217 	ldw	r2,8(r5)
 101fe18:	2823883a 	mov	r17,r5
 101fe1c:	0039883a 	mov	fp,zero
 101fe20:	0021883a 	mov	r16,zero
 101fe24:	80003926 	beq	r16,zero,101ff0c <__ssprint_r+0x13c>
 101fe28:	102b883a 	mov	r21,r2
 101fe2c:	102d883a 	mov	r22,r2
 101fe30:	80803a36 	bltu	r16,r2,101ff1c <__ssprint_r+0x14c>
 101fe34:	88c0030b 	ldhu	r3,12(r17)
 101fe38:	1881200c 	andi	r2,r3,1152
 101fe3c:	10002626 	beq	r2,zero,101fed8 <__ssprint_r+0x108>
 101fe40:	88800517 	ldw	r2,20(r17)
 101fe44:	89400417 	ldw	r5,16(r17)
 101fe48:	81800044 	addi	r6,r16,1
 101fe4c:	108f883a 	add	r7,r2,r2
 101fe50:	3885883a 	add	r2,r7,r2
 101fe54:	100ed7fa 	srli	r7,r2,31
 101fe58:	216dc83a 	sub	r22,r4,r5
 101fe5c:	3589883a 	add	r4,r6,r22
 101fe60:	3885883a 	add	r2,r7,r2
 101fe64:	102bd07a 	srai	r21,r2,1
 101fe68:	a80d883a 	mov	r6,r21
 101fe6c:	a900022e 	bgeu	r21,r4,101fe78 <__ssprint_r+0xa8>
 101fe70:	202b883a 	mov	r21,r4
 101fe74:	200d883a 	mov	r6,r4
 101fe78:	18c1000c 	andi	r3,r3,1024
 101fe7c:	18002a26 	beq	r3,zero,101ff28 <__ssprint_r+0x158>
 101fe80:	300b883a 	mov	r5,r6
 101fe84:	9809883a 	mov	r4,r19
 101fe88:	101d91c0 	call	101d91c <_malloc_r>
 101fe8c:	1029883a 	mov	r20,r2
 101fe90:	10002c26 	beq	r2,zero,101ff44 <__ssprint_r+0x174>
 101fe94:	89400417 	ldw	r5,16(r17)
 101fe98:	b00d883a 	mov	r6,r22
 101fe9c:	1009883a 	mov	r4,r2
 101fea0:	10157f40 	call	10157f4 <memcpy>
 101fea4:	8880030b 	ldhu	r2,12(r17)
 101fea8:	00fedfc4 	movi	r3,-1153
 101feac:	10c4703a 	and	r2,r2,r3
 101feb0:	10802014 	ori	r2,r2,128
 101feb4:	8880030d 	sth	r2,12(r17)
 101feb8:	a589883a 	add	r4,r20,r22
 101febc:	adadc83a 	sub	r22,r21,r22
 101fec0:	8d400515 	stw	r21,20(r17)
 101fec4:	8d800215 	stw	r22,8(r17)
 101fec8:	8d000415 	stw	r20,16(r17)
 101fecc:	89000015 	stw	r4,0(r17)
 101fed0:	802b883a 	mov	r21,r16
 101fed4:	802d883a 	mov	r22,r16
 101fed8:	b00d883a 	mov	r6,r22
 101fedc:	e00b883a 	mov	r5,fp
 101fee0:	101e20c0 	call	101e20c <memmove>
 101fee4:	88800217 	ldw	r2,8(r17)
 101fee8:	89000017 	ldw	r4,0(r17)
 101feec:	90c00217 	ldw	r3,8(r18)
 101fef0:	1545c83a 	sub	r2,r2,r21
 101fef4:	2589883a 	add	r4,r4,r22
 101fef8:	88800215 	stw	r2,8(r17)
 101fefc:	89000015 	stw	r4,0(r17)
 101ff00:	1c21c83a 	sub	r16,r3,r16
 101ff04:	94000215 	stw	r16,8(r18)
 101ff08:	80001726 	beq	r16,zero,101ff68 <__ssprint_r+0x198>
 101ff0c:	bf000017 	ldw	fp,0(r23)
 101ff10:	bc000117 	ldw	r16,4(r23)
 101ff14:	bdc00204 	addi	r23,r23,8
 101ff18:	003fc206 	br	101fe24 <__alt_data_end+0xff01fe24>
 101ff1c:	802b883a 	mov	r21,r16
 101ff20:	802d883a 	mov	r22,r16
 101ff24:	003fec06 	br	101fed8 <__alt_data_end+0xff01fed8>
 101ff28:	9809883a 	mov	r4,r19
 101ff2c:	101f3640 	call	101f364 <_realloc_r>
 101ff30:	1029883a 	mov	r20,r2
 101ff34:	103fe01e 	bne	r2,zero,101feb8 <__alt_data_end+0xff01feb8>
 101ff38:	89400417 	ldw	r5,16(r17)
 101ff3c:	9809883a 	mov	r4,r19
 101ff40:	101cd300 	call	101cd30 <_free_r>
 101ff44:	88c0030b 	ldhu	r3,12(r17)
 101ff48:	00800304 	movi	r2,12
 101ff4c:	98800015 	stw	r2,0(r19)
 101ff50:	18c01014 	ori	r3,r3,64
 101ff54:	88c0030d 	sth	r3,12(r17)
 101ff58:	00bfffc4 	movi	r2,-1
 101ff5c:	90000215 	stw	zero,8(r18)
 101ff60:	90000115 	stw	zero,4(r18)
 101ff64:	00000206 	br	101ff70 <__ssprint_r+0x1a0>
 101ff68:	90000115 	stw	zero,4(r18)
 101ff6c:	0005883a 	mov	r2,zero
 101ff70:	dfc00917 	ldw	ra,36(sp)
 101ff74:	df000817 	ldw	fp,32(sp)
 101ff78:	ddc00717 	ldw	r23,28(sp)
 101ff7c:	dd800617 	ldw	r22,24(sp)
 101ff80:	dd400517 	ldw	r21,20(sp)
 101ff84:	dd000417 	ldw	r20,16(sp)
 101ff88:	dcc00317 	ldw	r19,12(sp)
 101ff8c:	dc800217 	ldw	r18,8(sp)
 101ff90:	dc400117 	ldw	r17,4(sp)
 101ff94:	dc000017 	ldw	r16,0(sp)
 101ff98:	dec00a04 	addi	sp,sp,40
 101ff9c:	f800283a 	ret

0101ffa0 <___svfiprintf_internal_r>:
 101ffa0:	2880030b 	ldhu	r2,12(r5)
 101ffa4:	deffc804 	addi	sp,sp,-224
 101ffa8:	dcc03115 	stw	r19,196(sp)
 101ffac:	dfc03715 	stw	ra,220(sp)
 101ffb0:	df003615 	stw	fp,216(sp)
 101ffb4:	ddc03515 	stw	r23,212(sp)
 101ffb8:	dd803415 	stw	r22,208(sp)
 101ffbc:	dd403315 	stw	r21,204(sp)
 101ffc0:	dd003215 	stw	r20,200(sp)
 101ffc4:	dc803015 	stw	r18,192(sp)
 101ffc8:	dc402f15 	stw	r17,188(sp)
 101ffcc:	dc002e15 	stw	r16,184(sp)
 101ffd0:	d9402715 	stw	r5,156(sp)
 101ffd4:	d9002a15 	stw	r4,168(sp)
 101ffd8:	1080200c 	andi	r2,r2,128
 101ffdc:	d9c02315 	stw	r7,140(sp)
 101ffe0:	3027883a 	mov	r19,r6
 101ffe4:	10000226 	beq	r2,zero,101fff0 <___svfiprintf_internal_r+0x50>
 101ffe8:	28800417 	ldw	r2,16(r5)
 101ffec:	10041d26 	beq	r2,zero,1021064 <___svfiprintf_internal_r+0x10c4>
 101fff0:	dac01a04 	addi	r11,sp,104
 101fff4:	dac01e15 	stw	r11,120(sp)
 101fff8:	d8801e17 	ldw	r2,120(sp)
 101fffc:	dac019c4 	addi	r11,sp,103
 1020000:	dd402a17 	ldw	r21,168(sp)
 1020004:	ddc02717 	ldw	r23,156(sp)
 1020008:	058040f4 	movhi	r22,259
 102000c:	050040f4 	movhi	r20,259
 1020010:	dac01f15 	stw	r11,124(sp)
 1020014:	12d7c83a 	sub	r11,r2,r11
 1020018:	b5ab7004 	addi	r22,r22,-21056
 102001c:	a52b6c04 	addi	r20,r20,-21072
 1020020:	dec01a15 	stw	sp,104(sp)
 1020024:	d8001c15 	stw	zero,112(sp)
 1020028:	d8001b15 	stw	zero,108(sp)
 102002c:	d811883a 	mov	r8,sp
 1020030:	d8002915 	stw	zero,164(sp)
 1020034:	d8002515 	stw	zero,148(sp)
 1020038:	dac02b15 	stw	r11,172(sp)
 102003c:	98800007 	ldb	r2,0(r19)
 1020040:	1002dd26 	beq	r2,zero,1020bb8 <___svfiprintf_internal_r+0xc18>
 1020044:	00c00944 	movi	r3,37
 1020048:	9823883a 	mov	r17,r19
 102004c:	10c0021e 	bne	r2,r3,1020058 <___svfiprintf_internal_r+0xb8>
 1020050:	00001406 	br	10200a4 <___svfiprintf_internal_r+0x104>
 1020054:	10c00326 	beq	r2,r3,1020064 <___svfiprintf_internal_r+0xc4>
 1020058:	8c400044 	addi	r17,r17,1
 102005c:	88800007 	ldb	r2,0(r17)
 1020060:	103ffc1e 	bne	r2,zero,1020054 <__alt_data_end+0xff020054>
 1020064:	8ce1c83a 	sub	r16,r17,r19
 1020068:	80000e26 	beq	r16,zero,10200a4 <___svfiprintf_internal_r+0x104>
 102006c:	d8c01c17 	ldw	r3,112(sp)
 1020070:	d8801b17 	ldw	r2,108(sp)
 1020074:	44c00015 	stw	r19,0(r8)
 1020078:	1c07883a 	add	r3,r3,r16
 102007c:	10800044 	addi	r2,r2,1
 1020080:	d8c01c15 	stw	r3,112(sp)
 1020084:	44000115 	stw	r16,4(r8)
 1020088:	d8801b15 	stw	r2,108(sp)
 102008c:	00c001c4 	movi	r3,7
 1020090:	18831e16 	blt	r3,r2,1020d0c <___svfiprintf_internal_r+0xd6c>
 1020094:	42000204 	addi	r8,r8,8
 1020098:	dac02517 	ldw	r11,148(sp)
 102009c:	5c17883a 	add	r11,r11,r16
 10200a0:	dac02515 	stw	r11,148(sp)
 10200a4:	88800007 	ldb	r2,0(r17)
 10200a8:	1002c526 	beq	r2,zero,1020bc0 <___svfiprintf_internal_r+0xc20>
 10200ac:	88c00047 	ldb	r3,1(r17)
 10200b0:	8cc00044 	addi	r19,r17,1
 10200b4:	d8001d85 	stb	zero,118(sp)
 10200b8:	0009883a 	mov	r4,zero
 10200bc:	000f883a 	mov	r7,zero
 10200c0:	043fffc4 	movi	r16,-1
 10200c4:	d8002415 	stw	zero,144(sp)
 10200c8:	0025883a 	mov	r18,zero
 10200cc:	01401604 	movi	r5,88
 10200d0:	01800244 	movi	r6,9
 10200d4:	02800a84 	movi	r10,42
 10200d8:	02401b04 	movi	r9,108
 10200dc:	9cc00044 	addi	r19,r19,1
 10200e0:	18bff804 	addi	r2,r3,-32
 10200e4:	2881dd36 	bltu	r5,r2,102085c <___svfiprintf_internal_r+0x8bc>
 10200e8:	100490ba 	slli	r2,r2,2
 10200ec:	02c040b4 	movhi	r11,258
 10200f0:	5ac04004 	addi	r11,r11,256
 10200f4:	12c5883a 	add	r2,r2,r11
 10200f8:	10800017 	ldw	r2,0(r2)
 10200fc:	1000683a 	jmp	r2
 1020100:	010202fc 	xorhi	r4,zero,2059
 1020104:	0102085c 	xori	r4,zero,2081
 1020108:	0102085c 	xori	r4,zero,2081
 102010c:	010202f0 	cmpltui	r4,zero,2059
 1020110:	0102085c 	xori	r4,zero,2081
 1020114:	0102085c 	xori	r4,zero,2081
 1020118:	0102085c 	xori	r4,zero,2081
 102011c:	0102085c 	xori	r4,zero,2081
 1020120:	0102085c 	xori	r4,zero,2081
 1020124:	0102085c 	xori	r4,zero,2081
 1020128:	01020264 	muli	r4,zero,2057
 102012c:	01020440 	call	102044 <__alt_mem_sdram-0xefdfbc>
 1020130:	0102085c 	xori	r4,zero,2081
 1020134:	01020290 	cmplti	r4,zero,2058
 1020138:	01020890 	cmplti	r4,zero,2082
 102013c:	0102085c 	xori	r4,zero,2081
 1020140:	01020884 	movi	r4,2082
 1020144:	01020824 	muli	r4,zero,2080
 1020148:	01020824 	muli	r4,zero,2080
 102014c:	01020824 	muli	r4,zero,2080
 1020150:	01020824 	muli	r4,zero,2080
 1020154:	01020824 	muli	r4,zero,2080
 1020158:	01020824 	muli	r4,zero,2080
 102015c:	01020824 	muli	r4,zero,2080
 1020160:	01020824 	muli	r4,zero,2080
 1020164:	01020824 	muli	r4,zero,2080
 1020168:	0102085c 	xori	r4,zero,2081
 102016c:	0102085c 	xori	r4,zero,2081
 1020170:	0102085c 	xori	r4,zero,2081
 1020174:	0102085c 	xori	r4,zero,2081
 1020178:	0102085c 	xori	r4,zero,2081
 102017c:	0102085c 	xori	r4,zero,2081
 1020180:	0102085c 	xori	r4,zero,2081
 1020184:	0102085c 	xori	r4,zero,2081
 1020188:	0102085c 	xori	r4,zero,2081
 102018c:	0102085c 	xori	r4,zero,2081
 1020190:	010207c0 	call	10207c <__alt_mem_sdram-0xefdf84>
 1020194:	0102085c 	xori	r4,zero,2081
 1020198:	0102085c 	xori	r4,zero,2081
 102019c:	0102085c 	xori	r4,zero,2081
 10201a0:	0102085c 	xori	r4,zero,2081
 10201a4:	0102085c 	xori	r4,zero,2081
 10201a8:	0102085c 	xori	r4,zero,2081
 10201ac:	0102085c 	xori	r4,zero,2081
 10201b0:	0102085c 	xori	r4,zero,2081
 10201b4:	0102085c 	xori	r4,zero,2081
 10201b8:	0102085c 	xori	r4,zero,2081
 10201bc:	01020938 	rdprs	r4,zero,2084
 10201c0:	0102085c 	xori	r4,zero,2081
 10201c4:	0102085c 	xori	r4,zero,2081
 10201c8:	0102085c 	xori	r4,zero,2081
 10201cc:	0102085c 	xori	r4,zero,2081
 10201d0:	0102085c 	xori	r4,zero,2081
 10201d4:	010208d0 	cmplti	r4,zero,2083
 10201d8:	0102085c 	xori	r4,zero,2081
 10201dc:	0102085c 	xori	r4,zero,2081
 10201e0:	01020604 	movi	r4,2072
 10201e4:	0102085c 	xori	r4,zero,2081
 10201e8:	0102085c 	xori	r4,zero,2081
 10201ec:	0102085c 	xori	r4,zero,2081
 10201f0:	0102085c 	xori	r4,zero,2081
 10201f4:	0102085c 	xori	r4,zero,2081
 10201f8:	0102085c 	xori	r4,zero,2081
 10201fc:	0102085c 	xori	r4,zero,2081
 1020200:	0102085c 	xori	r4,zero,2081
 1020204:	0102085c 	xori	r4,zero,2081
 1020208:	0102085c 	xori	r4,zero,2081
 102020c:	010204f4 	movhi	r4,2067
 1020210:	010206a0 	cmpeqi	r4,zero,2074
 1020214:	0102085c 	xori	r4,zero,2081
 1020218:	0102085c 	xori	r4,zero,2081
 102021c:	0102085c 	xori	r4,zero,2081
 1020220:	01020694 	movui	r4,2074
 1020224:	010206a0 	cmpeqi	r4,zero,2074
 1020228:	0102085c 	xori	r4,zero,2081
 102022c:	0102085c 	xori	r4,zero,2081
 1020230:	01020684 	movi	r4,2074
 1020234:	0102085c 	xori	r4,zero,2081
 1020238:	01020648 	cmpgei	r4,zero,2073
 102023c:	01020450 	cmplti	r4,zero,2065
 1020240:	0102029c 	xori	r4,zero,2058
 1020244:	010207b4 	movhi	r4,2078
 1020248:	0102085c 	xori	r4,zero,2081
 102024c:	01020768 	cmpgeui	r4,zero,2077
 1020250:	0102085c 	xori	r4,zero,2081
 1020254:	010203c0 	call	10203c <__alt_mem_sdram-0xefdfc4>
 1020258:	0102085c 	xori	r4,zero,2081
 102025c:	0102085c 	xori	r4,zero,2081
 1020260:	0102031c 	xori	r4,zero,2060
 1020264:	dac02317 	ldw	r11,140(sp)
 1020268:	5ac00017 	ldw	r11,0(r11)
 102026c:	dac02415 	stw	r11,144(sp)
 1020270:	dac02317 	ldw	r11,140(sp)
 1020274:	58800104 	addi	r2,r11,4
 1020278:	dac02417 	ldw	r11,144(sp)
 102027c:	5802e90e 	bge	r11,zero,1020e24 <___svfiprintf_internal_r+0xe84>
 1020280:	dac02417 	ldw	r11,144(sp)
 1020284:	d8802315 	stw	r2,140(sp)
 1020288:	02d7c83a 	sub	r11,zero,r11
 102028c:	dac02415 	stw	r11,144(sp)
 1020290:	94800114 	ori	r18,r18,4
 1020294:	98c00007 	ldb	r3,0(r19)
 1020298:	003f9006 	br	10200dc <__alt_data_end+0xff0200dc>
 102029c:	00800c04 	movi	r2,48
 10202a0:	dac02317 	ldw	r11,140(sp)
 10202a4:	d8801d05 	stb	r2,116(sp)
 10202a8:	00801e04 	movi	r2,120
 10202ac:	d8801d45 	stb	r2,117(sp)
 10202b0:	d8001d85 	stb	zero,118(sp)
 10202b4:	58c00104 	addi	r3,r11,4
 10202b8:	5f000017 	ldw	fp,0(r11)
 10202bc:	0013883a 	mov	r9,zero
 10202c0:	90800094 	ori	r2,r18,2
 10202c4:	80032b16 	blt	r16,zero,1020f74 <___svfiprintf_internal_r+0xfd4>
 10202c8:	00bfdfc4 	movi	r2,-129
 10202cc:	90a4703a 	and	r18,r18,r2
 10202d0:	d8c02315 	stw	r3,140(sp)
 10202d4:	94800094 	ori	r18,r18,2
 10202d8:	e002dc26 	beq	fp,zero,1020e4c <___svfiprintf_internal_r+0xeac>
 10202dc:	010040f4 	movhi	r4,259
 10202e0:	212b0404 	addi	r4,r4,-21488
 10202e4:	0015883a 	mov	r10,zero
 10202e8:	d9002915 	stw	r4,164(sp)
 10202ec:	00002306 	br	102037c <___svfiprintf_internal_r+0x3dc>
 10202f0:	94800054 	ori	r18,r18,1
 10202f4:	98c00007 	ldb	r3,0(r19)
 10202f8:	003f7806 	br	10200dc <__alt_data_end+0xff0200dc>
 10202fc:	38803fcc 	andi	r2,r7,255
 1020300:	1080201c 	xori	r2,r2,128
 1020304:	10bfe004 	addi	r2,r2,-128
 1020308:	1002f31e 	bne	r2,zero,1020ed8 <___svfiprintf_internal_r+0xf38>
 102030c:	01000044 	movi	r4,1
 1020310:	01c00804 	movi	r7,32
 1020314:	98c00007 	ldb	r3,0(r19)
 1020318:	003f7006 	br	10200dc <__alt_data_end+0xff0200dc>
 102031c:	21003fcc 	andi	r4,r4,255
 1020320:	2003aa1e 	bne	r4,zero,10211cc <___svfiprintf_internal_r+0x122c>
 1020324:	008040f4 	movhi	r2,259
 1020328:	10ab0404 	addi	r2,r2,-21488
 102032c:	d8802915 	stw	r2,164(sp)
 1020330:	9080080c 	andi	r2,r18,32
 1020334:	1000ba26 	beq	r2,zero,1020620 <___svfiprintf_internal_r+0x680>
 1020338:	dac02317 	ldw	r11,140(sp)
 102033c:	5f000017 	ldw	fp,0(r11)
 1020340:	5a400117 	ldw	r9,4(r11)
 1020344:	5ac00204 	addi	r11,r11,8
 1020348:	dac02315 	stw	r11,140(sp)
 102034c:	9080004c 	andi	r2,r18,1
 1020350:	10029026 	beq	r2,zero,1020d94 <___svfiprintf_internal_r+0xdf4>
 1020354:	e244b03a 	or	r2,fp,r9
 1020358:	1002d41e 	bne	r2,zero,1020eac <___svfiprintf_internal_r+0xf0c>
 102035c:	d8001d85 	stb	zero,118(sp)
 1020360:	80030b16 	blt	r16,zero,1020f90 <___svfiprintf_internal_r+0xff0>
 1020364:	00bfdfc4 	movi	r2,-129
 1020368:	90a4703a 	and	r18,r18,r2
 102036c:	0015883a 	mov	r10,zero
 1020370:	80002426 	beq	r16,zero,1020404 <___svfiprintf_internal_r+0x464>
 1020374:	0039883a 	mov	fp,zero
 1020378:	0013883a 	mov	r9,zero
 102037c:	d9002917 	ldw	r4,164(sp)
 1020380:	dc401a04 	addi	r17,sp,104
 1020384:	e08003cc 	andi	r2,fp,15
 1020388:	4806973a 	slli	r3,r9,28
 102038c:	2085883a 	add	r2,r4,r2
 1020390:	e038d13a 	srli	fp,fp,4
 1020394:	10800003 	ldbu	r2,0(r2)
 1020398:	4812d13a 	srli	r9,r9,4
 102039c:	8c7fffc4 	addi	r17,r17,-1
 10203a0:	1f38b03a 	or	fp,r3,fp
 10203a4:	88800005 	stb	r2,0(r17)
 10203a8:	e244b03a 	or	r2,fp,r9
 10203ac:	103ff51e 	bne	r2,zero,1020384 <__alt_data_end+0xff020384>
 10203b0:	dac01e17 	ldw	r11,120(sp)
 10203b4:	5c57c83a 	sub	r11,r11,r17
 10203b8:	dac02115 	stw	r11,132(sp)
 10203bc:	00001406 	br	1020410 <___svfiprintf_internal_r+0x470>
 10203c0:	21003fcc 	andi	r4,r4,255
 10203c4:	2003741e 	bne	r4,zero,1021198 <___svfiprintf_internal_r+0x11f8>
 10203c8:	9080080c 	andi	r2,r18,32
 10203cc:	10014526 	beq	r2,zero,10208e4 <___svfiprintf_internal_r+0x944>
 10203d0:	dac02317 	ldw	r11,140(sp)
 10203d4:	d8001d85 	stb	zero,118(sp)
 10203d8:	58c00204 	addi	r3,r11,8
 10203dc:	5f000017 	ldw	fp,0(r11)
 10203e0:	5a400117 	ldw	r9,4(r11)
 10203e4:	8002d916 	blt	r16,zero,1020f4c <___svfiprintf_internal_r+0xfac>
 10203e8:	013fdfc4 	movi	r4,-129
 10203ec:	e244b03a 	or	r2,fp,r9
 10203f0:	d8c02315 	stw	r3,140(sp)
 10203f4:	9124703a 	and	r18,r18,r4
 10203f8:	0015883a 	mov	r10,zero
 10203fc:	1000b91e 	bne	r2,zero,10206e4 <___svfiprintf_internal_r+0x744>
 1020400:	8002e61e 	bne	r16,zero,1020f9c <___svfiprintf_internal_r+0xffc>
 1020404:	0021883a 	mov	r16,zero
 1020408:	d8002115 	stw	zero,132(sp)
 102040c:	dc401a04 	addi	r17,sp,104
 1020410:	d8c02117 	ldw	r3,132(sp)
 1020414:	dc002015 	stw	r16,128(sp)
 1020418:	80c0010e 	bge	r16,r3,1020420 <___svfiprintf_internal_r+0x480>
 102041c:	d8c02015 	stw	r3,128(sp)
 1020420:	52803fcc 	andi	r10,r10,255
 1020424:	5280201c 	xori	r10,r10,128
 1020428:	52bfe004 	addi	r10,r10,-128
 102042c:	50003c26 	beq	r10,zero,1020520 <___svfiprintf_internal_r+0x580>
 1020430:	dac02017 	ldw	r11,128(sp)
 1020434:	5ac00044 	addi	r11,r11,1
 1020438:	dac02015 	stw	r11,128(sp)
 102043c:	00003806 	br	1020520 <___svfiprintf_internal_r+0x580>
 1020440:	01000044 	movi	r4,1
 1020444:	01c00ac4 	movi	r7,43
 1020448:	98c00007 	ldb	r3,0(r19)
 102044c:	003f2306 	br	10200dc <__alt_data_end+0xff0200dc>
 1020450:	21003fcc 	andi	r4,r4,255
 1020454:	2003481e 	bne	r4,zero,1021178 <___svfiprintf_internal_r+0x11d8>
 1020458:	9080080c 	andi	r2,r18,32
 102045c:	10013b26 	beq	r2,zero,102094c <___svfiprintf_internal_r+0x9ac>
 1020460:	dac02317 	ldw	r11,140(sp)
 1020464:	d8001d85 	stb	zero,118(sp)
 1020468:	58800204 	addi	r2,r11,8
 102046c:	5f000017 	ldw	fp,0(r11)
 1020470:	5a400117 	ldw	r9,4(r11)
 1020474:	8002a816 	blt	r16,zero,1020f18 <___svfiprintf_internal_r+0xf78>
 1020478:	013fdfc4 	movi	r4,-129
 102047c:	e246b03a 	or	r3,fp,r9
 1020480:	d8802315 	stw	r2,140(sp)
 1020484:	9124703a 	and	r18,r18,r4
 1020488:	18013c26 	beq	r3,zero,102097c <___svfiprintf_internal_r+0x9dc>
 102048c:	0015883a 	mov	r10,zero
 1020490:	dc401a04 	addi	r17,sp,104
 1020494:	e006d0fa 	srli	r3,fp,3
 1020498:	4808977a 	slli	r4,r9,29
 102049c:	4812d0fa 	srli	r9,r9,3
 10204a0:	e70001cc 	andi	fp,fp,7
 10204a4:	e0800c04 	addi	r2,fp,48
 10204a8:	8c7fffc4 	addi	r17,r17,-1
 10204ac:	20f8b03a 	or	fp,r4,r3
 10204b0:	88800005 	stb	r2,0(r17)
 10204b4:	e246b03a 	or	r3,fp,r9
 10204b8:	183ff61e 	bne	r3,zero,1020494 <__alt_data_end+0xff020494>
 10204bc:	90c0004c 	andi	r3,r18,1
 10204c0:	1800a526 	beq	r3,zero,1020758 <___svfiprintf_internal_r+0x7b8>
 10204c4:	10803fcc 	andi	r2,r2,255
 10204c8:	1080201c 	xori	r2,r2,128
 10204cc:	10bfe004 	addi	r2,r2,-128
 10204d0:	00c00c04 	movi	r3,48
 10204d4:	10ffb626 	beq	r2,r3,10203b0 <__alt_data_end+0xff0203b0>
 10204d8:	88ffffc5 	stb	r3,-1(r17)
 10204dc:	d8c01e17 	ldw	r3,120(sp)
 10204e0:	88bfffc4 	addi	r2,r17,-1
 10204e4:	1023883a 	mov	r17,r2
 10204e8:	1887c83a 	sub	r3,r3,r2
 10204ec:	d8c02115 	stw	r3,132(sp)
 10204f0:	003fc706 	br	1020410 <__alt_data_end+0xff020410>
 10204f4:	dac02317 	ldw	r11,140(sp)
 10204f8:	00c00044 	movi	r3,1
 10204fc:	d8c02015 	stw	r3,128(sp)
 1020500:	58800017 	ldw	r2,0(r11)
 1020504:	5ac00104 	addi	r11,r11,4
 1020508:	d8001d85 	stb	zero,118(sp)
 102050c:	d8801005 	stb	r2,64(sp)
 1020510:	dac02315 	stw	r11,140(sp)
 1020514:	d8c02115 	stw	r3,132(sp)
 1020518:	dc401004 	addi	r17,sp,64
 102051c:	0021883a 	mov	r16,zero
 1020520:	90c0008c 	andi	r3,r18,2
 1020524:	d8c02215 	stw	r3,136(sp)
 1020528:	18000326 	beq	r3,zero,1020538 <___svfiprintf_internal_r+0x598>
 102052c:	dac02017 	ldw	r11,128(sp)
 1020530:	5ac00084 	addi	r11,r11,2
 1020534:	dac02015 	stw	r11,128(sp)
 1020538:	90c0210c 	andi	r3,r18,132
 102053c:	d8c02615 	stw	r3,152(sp)
 1020540:	1801131e 	bne	r3,zero,1020990 <___svfiprintf_internal_r+0x9f0>
 1020544:	dac02417 	ldw	r11,144(sp)
 1020548:	d8c02017 	ldw	r3,128(sp)
 102054c:	58f9c83a 	sub	fp,r11,r3
 1020550:	07010f0e 	bge	zero,fp,1020990 <___svfiprintf_internal_r+0x9f0>
 1020554:	02400404 	movi	r9,16
 1020558:	d8c01c17 	ldw	r3,112(sp)
 102055c:	d8801b17 	ldw	r2,108(sp)
 1020560:	4f02d60e 	bge	r9,fp,10210bc <___svfiprintf_internal_r+0x111c>
 1020564:	014040f4 	movhi	r5,259
 1020568:	296b7004 	addi	r5,r5,-21056
 102056c:	d9402815 	stw	r5,160(sp)
 1020570:	028001c4 	movi	r10,7
 1020574:	00000306 	br	1020584 <___svfiprintf_internal_r+0x5e4>
 1020578:	e73ffc04 	addi	fp,fp,-16
 102057c:	42000204 	addi	r8,r8,8
 1020580:	4f00150e 	bge	r9,fp,10205d8 <___svfiprintf_internal_r+0x638>
 1020584:	18c00404 	addi	r3,r3,16
 1020588:	10800044 	addi	r2,r2,1
 102058c:	45800015 	stw	r22,0(r8)
 1020590:	42400115 	stw	r9,4(r8)
 1020594:	d8c01c15 	stw	r3,112(sp)
 1020598:	d8801b15 	stw	r2,108(sp)
 102059c:	50bff60e 	bge	r10,r2,1020578 <__alt_data_end+0xff020578>
 10205a0:	d9801a04 	addi	r6,sp,104
 10205a4:	b80b883a 	mov	r5,r23
 10205a8:	a809883a 	mov	r4,r21
 10205ac:	da402c15 	stw	r9,176(sp)
 10205b0:	da802d15 	stw	r10,180(sp)
 10205b4:	101fdd00 	call	101fdd0 <__ssprint_r>
 10205b8:	da402c17 	ldw	r9,176(sp)
 10205bc:	da802d17 	ldw	r10,180(sp)
 10205c0:	1001851e 	bne	r2,zero,1020bd8 <___svfiprintf_internal_r+0xc38>
 10205c4:	e73ffc04 	addi	fp,fp,-16
 10205c8:	d8c01c17 	ldw	r3,112(sp)
 10205cc:	d8801b17 	ldw	r2,108(sp)
 10205d0:	d811883a 	mov	r8,sp
 10205d4:	4f3feb16 	blt	r9,fp,1020584 <__alt_data_end+0xff020584>
 10205d8:	dac02817 	ldw	r11,160(sp)
 10205dc:	e0c7883a 	add	r3,fp,r3
 10205e0:	10800044 	addi	r2,r2,1
 10205e4:	42c00015 	stw	r11,0(r8)
 10205e8:	47000115 	stw	fp,4(r8)
 10205ec:	d8c01c15 	stw	r3,112(sp)
 10205f0:	d8801b15 	stw	r2,108(sp)
 10205f4:	010001c4 	movi	r4,7
 10205f8:	2081ee16 	blt	r4,r2,1020db4 <___svfiprintf_internal_r+0xe14>
 10205fc:	42000204 	addi	r8,r8,8
 1020600:	0000e506 	br	1020998 <___svfiprintf_internal_r+0x9f8>
 1020604:	21003fcc 	andi	r4,r4,255
 1020608:	2002dd1e 	bne	r4,zero,1021180 <___svfiprintf_internal_r+0x11e0>
 102060c:	008040f4 	movhi	r2,259
 1020610:	10aaff04 	addi	r2,r2,-21508
 1020614:	d8802915 	stw	r2,164(sp)
 1020618:	9080080c 	andi	r2,r18,32
 102061c:	103f461e 	bne	r2,zero,1020338 <__alt_data_end+0xff020338>
 1020620:	9080040c 	andi	r2,r18,16
 1020624:	10022e1e 	bne	r2,zero,1020ee0 <___svfiprintf_internal_r+0xf40>
 1020628:	9080100c 	andi	r2,r18,64
 102062c:	dac02317 	ldw	r11,140(sp)
 1020630:	10027326 	beq	r2,zero,1021000 <___svfiprintf_internal_r+0x1060>
 1020634:	5f00000b 	ldhu	fp,0(r11)
 1020638:	5ac00104 	addi	r11,r11,4
 102063c:	0013883a 	mov	r9,zero
 1020640:	dac02315 	stw	r11,140(sp)
 1020644:	003f4106 	br	102034c <__alt_data_end+0xff02034c>
 1020648:	21003fcc 	andi	r4,r4,255
 102064c:	2002e11e 	bne	r4,zero,10211d4 <___svfiprintf_internal_r+0x1234>
 1020650:	9080080c 	andi	r2,r18,32
 1020654:	1002011e 	bne	r2,zero,1020e5c <___svfiprintf_internal_r+0xebc>
 1020658:	9080040c 	andi	r2,r18,16
 102065c:	10023e1e 	bne	r2,zero,1020f58 <___svfiprintf_internal_r+0xfb8>
 1020660:	9480100c 	andi	r18,r18,64
 1020664:	90023c26 	beq	r18,zero,1020f58 <___svfiprintf_internal_r+0xfb8>
 1020668:	dac02317 	ldw	r11,140(sp)
 102066c:	58800017 	ldw	r2,0(r11)
 1020670:	5ac00104 	addi	r11,r11,4
 1020674:	dac02315 	stw	r11,140(sp)
 1020678:	dac02517 	ldw	r11,148(sp)
 102067c:	12c0000d 	sth	r11,0(r2)
 1020680:	003e6e06 	br	102003c <__alt_data_end+0xff02003c>
 1020684:	98c00007 	ldb	r3,0(r19)
 1020688:	1a422926 	beq	r3,r9,1020f30 <___svfiprintf_internal_r+0xf90>
 102068c:	94800414 	ori	r18,r18,16
 1020690:	003e9206 	br	10200dc <__alt_data_end+0xff0200dc>
 1020694:	94801014 	ori	r18,r18,64
 1020698:	98c00007 	ldb	r3,0(r19)
 102069c:	003e8f06 	br	10200dc <__alt_data_end+0xff0200dc>
 10206a0:	21003fcc 	andi	r4,r4,255
 10206a4:	2002c71e 	bne	r4,zero,10211c4 <___svfiprintf_internal_r+0x1224>
 10206a8:	9080080c 	andi	r2,r18,32
 10206ac:	10004926 	beq	r2,zero,10207d4 <___svfiprintf_internal_r+0x834>
 10206b0:	dac02317 	ldw	r11,140(sp)
 10206b4:	58800117 	ldw	r2,4(r11)
 10206b8:	5f000017 	ldw	fp,0(r11)
 10206bc:	5ac00204 	addi	r11,r11,8
 10206c0:	dac02315 	stw	r11,140(sp)
 10206c4:	1013883a 	mov	r9,r2
 10206c8:	10004b16 	blt	r2,zero,10207f8 <___svfiprintf_internal_r+0x858>
 10206cc:	da801d83 	ldbu	r10,118(sp)
 10206d0:	8001cb16 	blt	r16,zero,1020e00 <___svfiprintf_internal_r+0xe60>
 10206d4:	00ffdfc4 	movi	r3,-129
 10206d8:	e244b03a 	or	r2,fp,r9
 10206dc:	90e4703a 	and	r18,r18,r3
 10206e0:	103f4726 	beq	r2,zero,1020400 <__alt_data_end+0xff020400>
 10206e4:	48008c26 	beq	r9,zero,1020918 <___svfiprintf_internal_r+0x978>
 10206e8:	dc802015 	stw	r18,128(sp)
 10206ec:	dc002115 	stw	r16,132(sp)
 10206f0:	dc401a04 	addi	r17,sp,104
 10206f4:	e021883a 	mov	r16,fp
 10206f8:	da002215 	stw	r8,136(sp)
 10206fc:	5039883a 	mov	fp,r10
 1020700:	4825883a 	mov	r18,r9
 1020704:	8009883a 	mov	r4,r16
 1020708:	900b883a 	mov	r5,r18
 102070c:	01800284 	movi	r6,10
 1020710:	000f883a 	mov	r7,zero
 1020714:	10236d00 	call	10236d0 <__umoddi3>
 1020718:	10800c04 	addi	r2,r2,48
 102071c:	8c7fffc4 	addi	r17,r17,-1
 1020720:	8009883a 	mov	r4,r16
 1020724:	900b883a 	mov	r5,r18
 1020728:	88800005 	stb	r2,0(r17)
 102072c:	01800284 	movi	r6,10
 1020730:	000f883a 	mov	r7,zero
 1020734:	10231580 	call	1023158 <__udivdi3>
 1020738:	1021883a 	mov	r16,r2
 102073c:	10c4b03a 	or	r2,r2,r3
 1020740:	1825883a 	mov	r18,r3
 1020744:	103fef1e 	bne	r2,zero,1020704 <__alt_data_end+0xff020704>
 1020748:	dc802017 	ldw	r18,128(sp)
 102074c:	dc002117 	ldw	r16,132(sp)
 1020750:	da002217 	ldw	r8,136(sp)
 1020754:	e015883a 	mov	r10,fp
 1020758:	d8c01e17 	ldw	r3,120(sp)
 102075c:	1c47c83a 	sub	r3,r3,r17
 1020760:	d8c02115 	stw	r3,132(sp)
 1020764:	003f2a06 	br	1020410 <__alt_data_end+0xff020410>
 1020768:	dac02317 	ldw	r11,140(sp)
 102076c:	d8001d85 	stb	zero,118(sp)
 1020770:	5c400017 	ldw	r17,0(r11)
 1020774:	5f000104 	addi	fp,r11,4
 1020778:	88022f26 	beq	r17,zero,1021038 <___svfiprintf_internal_r+0x1098>
 102077c:	80022516 	blt	r16,zero,1021014 <___svfiprintf_internal_r+0x1074>
 1020780:	800d883a 	mov	r6,r16
 1020784:	000b883a 	mov	r5,zero
 1020788:	8809883a 	mov	r4,r17
 102078c:	da002c15 	stw	r8,176(sp)
 1020790:	101e1280 	call	101e128 <memchr>
 1020794:	da002c17 	ldw	r8,176(sp)
 1020798:	10026426 	beq	r2,zero,102112c <___svfiprintf_internal_r+0x118c>
 102079c:	1445c83a 	sub	r2,r2,r17
 10207a0:	d8802115 	stw	r2,132(sp)
 10207a4:	da801d83 	ldbu	r10,118(sp)
 10207a8:	df002315 	stw	fp,140(sp)
 10207ac:	0021883a 	mov	r16,zero
 10207b0:	003f1706 	br	1020410 <__alt_data_end+0xff020410>
 10207b4:	94800814 	ori	r18,r18,32
 10207b8:	98c00007 	ldb	r3,0(r19)
 10207bc:	003e4706 	br	10200dc <__alt_data_end+0xff0200dc>
 10207c0:	21003fcc 	andi	r4,r4,255
 10207c4:	2002701e 	bne	r4,zero,1021188 <___svfiprintf_internal_r+0x11e8>
 10207c8:	94800414 	ori	r18,r18,16
 10207cc:	9080080c 	andi	r2,r18,32
 10207d0:	103fb71e 	bne	r2,zero,10206b0 <__alt_data_end+0xff0206b0>
 10207d4:	9080040c 	andi	r2,r18,16
 10207d8:	1001ab26 	beq	r2,zero,1020e88 <___svfiprintf_internal_r+0xee8>
 10207dc:	dac02317 	ldw	r11,140(sp)
 10207e0:	5f000017 	ldw	fp,0(r11)
 10207e4:	5ac00104 	addi	r11,r11,4
 10207e8:	dac02315 	stw	r11,140(sp)
 10207ec:	e013d7fa 	srai	r9,fp,31
 10207f0:	4805883a 	mov	r2,r9
 10207f4:	103fb50e 	bge	r2,zero,10206cc <__alt_data_end+0xff0206cc>
 10207f8:	0739c83a 	sub	fp,zero,fp
 10207fc:	02800b44 	movi	r10,45
 1020800:	e004c03a 	cmpne	r2,fp,zero
 1020804:	0253c83a 	sub	r9,zero,r9
 1020808:	da801d85 	stb	r10,118(sp)
 102080c:	4893c83a 	sub	r9,r9,r2
 1020810:	80023016 	blt	r16,zero,10210d4 <___svfiprintf_internal_r+0x1134>
 1020814:	00bfdfc4 	movi	r2,-129
 1020818:	90a4703a 	and	r18,r18,r2
 102081c:	483fb21e 	bne	r9,zero,10206e8 <__alt_data_end+0xff0206e8>
 1020820:	00003d06 	br	1020918 <___svfiprintf_internal_r+0x978>
 1020824:	9817883a 	mov	r11,r19
 1020828:	d8002415 	stw	zero,144(sp)
 102082c:	18bff404 	addi	r2,r3,-48
 1020830:	0019883a 	mov	r12,zero
 1020834:	58c00007 	ldb	r3,0(r11)
 1020838:	630002a4 	muli	r12,r12,10
 102083c:	9cc00044 	addi	r19,r19,1
 1020840:	9817883a 	mov	r11,r19
 1020844:	1319883a 	add	r12,r2,r12
 1020848:	18bff404 	addi	r2,r3,-48
 102084c:	30bff92e 	bgeu	r6,r2,1020834 <__alt_data_end+0xff020834>
 1020850:	db002415 	stw	r12,144(sp)
 1020854:	18bff804 	addi	r2,r3,-32
 1020858:	28be232e 	bgeu	r5,r2,10200e8 <__alt_data_end+0xff0200e8>
 102085c:	21003fcc 	andi	r4,r4,255
 1020860:	20024b1e 	bne	r4,zero,1021190 <___svfiprintf_internal_r+0x11f0>
 1020864:	1800d626 	beq	r3,zero,1020bc0 <___svfiprintf_internal_r+0xc20>
 1020868:	02c00044 	movi	r11,1
 102086c:	dac02015 	stw	r11,128(sp)
 1020870:	d8c01005 	stb	r3,64(sp)
 1020874:	d8001d85 	stb	zero,118(sp)
 1020878:	dac02115 	stw	r11,132(sp)
 102087c:	dc401004 	addi	r17,sp,64
 1020880:	003f2606 	br	102051c <__alt_data_end+0xff02051c>
 1020884:	94802014 	ori	r18,r18,128
 1020888:	98c00007 	ldb	r3,0(r19)
 102088c:	003e1306 	br	10200dc <__alt_data_end+0xff0200dc>
 1020890:	98c00007 	ldb	r3,0(r19)
 1020894:	9ac00044 	addi	r11,r19,1
 1020898:	1a822b26 	beq	r3,r10,1021148 <___svfiprintf_internal_r+0x11a8>
 102089c:	18bff404 	addi	r2,r3,-48
 10208a0:	0021883a 	mov	r16,zero
 10208a4:	30821e36 	bltu	r6,r2,1021120 <___svfiprintf_internal_r+0x1180>
 10208a8:	58c00007 	ldb	r3,0(r11)
 10208ac:	840002a4 	muli	r16,r16,10
 10208b0:	5cc00044 	addi	r19,r11,1
 10208b4:	9817883a 	mov	r11,r19
 10208b8:	80a1883a 	add	r16,r16,r2
 10208bc:	18bff404 	addi	r2,r3,-48
 10208c0:	30bff92e 	bgeu	r6,r2,10208a8 <__alt_data_end+0xff0208a8>
 10208c4:	803e060e 	bge	r16,zero,10200e0 <__alt_data_end+0xff0200e0>
 10208c8:	043fffc4 	movi	r16,-1
 10208cc:	003e0406 	br	10200e0 <__alt_data_end+0xff0200e0>
 10208d0:	21003fcc 	andi	r4,r4,255
 10208d4:	2002371e 	bne	r4,zero,10211b4 <___svfiprintf_internal_r+0x1214>
 10208d8:	94800414 	ori	r18,r18,16
 10208dc:	9080080c 	andi	r2,r18,32
 10208e0:	103ebb1e 	bne	r2,zero,10203d0 <__alt_data_end+0xff0203d0>
 10208e4:	9080040c 	andi	r2,r18,16
 10208e8:	10013b26 	beq	r2,zero,1020dd8 <___svfiprintf_internal_r+0xe38>
 10208ec:	dac02317 	ldw	r11,140(sp)
 10208f0:	d8001d85 	stb	zero,118(sp)
 10208f4:	0013883a 	mov	r9,zero
 10208f8:	58800104 	addi	r2,r11,4
 10208fc:	5f000017 	ldw	fp,0(r11)
 1020900:	80013d16 	blt	r16,zero,1020df8 <___svfiprintf_internal_r+0xe58>
 1020904:	00ffdfc4 	movi	r3,-129
 1020908:	d8802315 	stw	r2,140(sp)
 102090c:	90e4703a 	and	r18,r18,r3
 1020910:	0015883a 	mov	r10,zero
 1020914:	e03eba26 	beq	fp,zero,1020400 <__alt_data_end+0xff020400>
 1020918:	00800244 	movi	r2,9
 102091c:	173f7236 	bltu	r2,fp,10206e8 <__alt_data_end+0xff0206e8>
 1020920:	dac02b17 	ldw	r11,172(sp)
 1020924:	e7000c04 	addi	fp,fp,48
 1020928:	df0019c5 	stb	fp,103(sp)
 102092c:	dac02115 	stw	r11,132(sp)
 1020930:	dc4019c4 	addi	r17,sp,103
 1020934:	003eb606 	br	1020410 <__alt_data_end+0xff020410>
 1020938:	21003fcc 	andi	r4,r4,255
 102093c:	20021f1e 	bne	r4,zero,10211bc <___svfiprintf_internal_r+0x121c>
 1020940:	94800414 	ori	r18,r18,16
 1020944:	9080080c 	andi	r2,r18,32
 1020948:	103ec51e 	bne	r2,zero,1020460 <__alt_data_end+0xff020460>
 102094c:	9080040c 	andi	r2,r18,16
 1020950:	10016926 	beq	r2,zero,1020ef8 <___svfiprintf_internal_r+0xf58>
 1020954:	dac02317 	ldw	r11,140(sp)
 1020958:	d8001d85 	stb	zero,118(sp)
 102095c:	0013883a 	mov	r9,zero
 1020960:	58800104 	addi	r2,r11,4
 1020964:	5f000017 	ldw	fp,0(r11)
 1020968:	80016b16 	blt	r16,zero,1020f18 <___svfiprintf_internal_r+0xf78>
 102096c:	00ffdfc4 	movi	r3,-129
 1020970:	d8802315 	stw	r2,140(sp)
 1020974:	90e4703a 	and	r18,r18,r3
 1020978:	e03ec41e 	bne	fp,zero,102048c <__alt_data_end+0xff02048c>
 102097c:	0015883a 	mov	r10,zero
 1020980:	8001c226 	beq	r16,zero,102108c <___svfiprintf_internal_r+0x10ec>
 1020984:	0039883a 	mov	fp,zero
 1020988:	0013883a 	mov	r9,zero
 102098c:	003ec006 	br	1020490 <__alt_data_end+0xff020490>
 1020990:	d8c01c17 	ldw	r3,112(sp)
 1020994:	d8801b17 	ldw	r2,108(sp)
 1020998:	d9001d87 	ldb	r4,118(sp)
 102099c:	20000b26 	beq	r4,zero,10209cc <___svfiprintf_internal_r+0xa2c>
 10209a0:	d9001d84 	addi	r4,sp,118
 10209a4:	18c00044 	addi	r3,r3,1
 10209a8:	10800044 	addi	r2,r2,1
 10209ac:	41000015 	stw	r4,0(r8)
 10209b0:	01000044 	movi	r4,1
 10209b4:	41000115 	stw	r4,4(r8)
 10209b8:	d8c01c15 	stw	r3,112(sp)
 10209bc:	d8801b15 	stw	r2,108(sp)
 10209c0:	010001c4 	movi	r4,7
 10209c4:	2080e116 	blt	r4,r2,1020d4c <___svfiprintf_internal_r+0xdac>
 10209c8:	42000204 	addi	r8,r8,8
 10209cc:	dac02217 	ldw	r11,136(sp)
 10209d0:	58000b26 	beq	r11,zero,1020a00 <___svfiprintf_internal_r+0xa60>
 10209d4:	d9001d04 	addi	r4,sp,116
 10209d8:	18c00084 	addi	r3,r3,2
 10209dc:	10800044 	addi	r2,r2,1
 10209e0:	41000015 	stw	r4,0(r8)
 10209e4:	01000084 	movi	r4,2
 10209e8:	41000115 	stw	r4,4(r8)
 10209ec:	d8c01c15 	stw	r3,112(sp)
 10209f0:	d8801b15 	stw	r2,108(sp)
 10209f4:	010001c4 	movi	r4,7
 10209f8:	2080dd16 	blt	r4,r2,1020d70 <___svfiprintf_internal_r+0xdd0>
 10209fc:	42000204 	addi	r8,r8,8
 1020a00:	dac02617 	ldw	r11,152(sp)
 1020a04:	01002004 	movi	r4,128
 1020a08:	59008426 	beq	r11,r4,1020c1c <___svfiprintf_internal_r+0xc7c>
 1020a0c:	dac02117 	ldw	r11,132(sp)
 1020a10:	82e1c83a 	sub	r16,r16,r11
 1020a14:	0400270e 	bge	zero,r16,1020ab4 <___svfiprintf_internal_r+0xb14>
 1020a18:	01c00404 	movi	r7,16
 1020a1c:	3c016a0e 	bge	r7,r16,1020fc8 <___svfiprintf_internal_r+0x1028>
 1020a20:	014040f4 	movhi	r5,259
 1020a24:	296b6c04 	addi	r5,r5,-21072
 1020a28:	d9402215 	stw	r5,136(sp)
 1020a2c:	070001c4 	movi	fp,7
 1020a30:	00000306 	br	1020a40 <___svfiprintf_internal_r+0xaa0>
 1020a34:	843ffc04 	addi	r16,r16,-16
 1020a38:	42000204 	addi	r8,r8,8
 1020a3c:	3c00130e 	bge	r7,r16,1020a8c <___svfiprintf_internal_r+0xaec>
 1020a40:	18c00404 	addi	r3,r3,16
 1020a44:	10800044 	addi	r2,r2,1
 1020a48:	45000015 	stw	r20,0(r8)
 1020a4c:	41c00115 	stw	r7,4(r8)
 1020a50:	d8c01c15 	stw	r3,112(sp)
 1020a54:	d8801b15 	stw	r2,108(sp)
 1020a58:	e0bff60e 	bge	fp,r2,1020a34 <__alt_data_end+0xff020a34>
 1020a5c:	d9801a04 	addi	r6,sp,104
 1020a60:	b80b883a 	mov	r5,r23
 1020a64:	a809883a 	mov	r4,r21
 1020a68:	d9c02c15 	stw	r7,176(sp)
 1020a6c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020a70:	d9c02c17 	ldw	r7,176(sp)
 1020a74:	1000581e 	bne	r2,zero,1020bd8 <___svfiprintf_internal_r+0xc38>
 1020a78:	843ffc04 	addi	r16,r16,-16
 1020a7c:	d8c01c17 	ldw	r3,112(sp)
 1020a80:	d8801b17 	ldw	r2,108(sp)
 1020a84:	d811883a 	mov	r8,sp
 1020a88:	3c3fed16 	blt	r7,r16,1020a40 <__alt_data_end+0xff020a40>
 1020a8c:	dac02217 	ldw	r11,136(sp)
 1020a90:	1c07883a 	add	r3,r3,r16
 1020a94:	10800044 	addi	r2,r2,1
 1020a98:	42c00015 	stw	r11,0(r8)
 1020a9c:	44000115 	stw	r16,4(r8)
 1020aa0:	d8c01c15 	stw	r3,112(sp)
 1020aa4:	d8801b15 	stw	r2,108(sp)
 1020aa8:	010001c4 	movi	r4,7
 1020aac:	20809e16 	blt	r4,r2,1020d28 <___svfiprintf_internal_r+0xd88>
 1020ab0:	42000204 	addi	r8,r8,8
 1020ab4:	dac02117 	ldw	r11,132(sp)
 1020ab8:	10800044 	addi	r2,r2,1
 1020abc:	44400015 	stw	r17,0(r8)
 1020ac0:	58c7883a 	add	r3,r11,r3
 1020ac4:	42c00115 	stw	r11,4(r8)
 1020ac8:	d8c01c15 	stw	r3,112(sp)
 1020acc:	d8801b15 	stw	r2,108(sp)
 1020ad0:	010001c4 	movi	r4,7
 1020ad4:	20807f16 	blt	r4,r2,1020cd4 <___svfiprintf_internal_r+0xd34>
 1020ad8:	42000204 	addi	r8,r8,8
 1020adc:	9480010c 	andi	r18,r18,4
 1020ae0:	90002926 	beq	r18,zero,1020b88 <___svfiprintf_internal_r+0xbe8>
 1020ae4:	dac02417 	ldw	r11,144(sp)
 1020ae8:	d8802017 	ldw	r2,128(sp)
 1020aec:	58a1c83a 	sub	r16,r11,r2
 1020af0:	0400250e 	bge	zero,r16,1020b88 <___svfiprintf_internal_r+0xbe8>
 1020af4:	04400404 	movi	r17,16
 1020af8:	d8801b17 	ldw	r2,108(sp)
 1020afc:	8c017c0e 	bge	r17,r16,10210f0 <___svfiprintf_internal_r+0x1150>
 1020b00:	014040f4 	movhi	r5,259
 1020b04:	296b7004 	addi	r5,r5,-21056
 1020b08:	d9402815 	stw	r5,160(sp)
 1020b0c:	048001c4 	movi	r18,7
 1020b10:	00000306 	br	1020b20 <___svfiprintf_internal_r+0xb80>
 1020b14:	843ffc04 	addi	r16,r16,-16
 1020b18:	42000204 	addi	r8,r8,8
 1020b1c:	8c00110e 	bge	r17,r16,1020b64 <___svfiprintf_internal_r+0xbc4>
 1020b20:	18c00404 	addi	r3,r3,16
 1020b24:	10800044 	addi	r2,r2,1
 1020b28:	45800015 	stw	r22,0(r8)
 1020b2c:	44400115 	stw	r17,4(r8)
 1020b30:	d8c01c15 	stw	r3,112(sp)
 1020b34:	d8801b15 	stw	r2,108(sp)
 1020b38:	90bff60e 	bge	r18,r2,1020b14 <__alt_data_end+0xff020b14>
 1020b3c:	d9801a04 	addi	r6,sp,104
 1020b40:	b80b883a 	mov	r5,r23
 1020b44:	a809883a 	mov	r4,r21
 1020b48:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020b4c:	1000221e 	bne	r2,zero,1020bd8 <___svfiprintf_internal_r+0xc38>
 1020b50:	843ffc04 	addi	r16,r16,-16
 1020b54:	d8c01c17 	ldw	r3,112(sp)
 1020b58:	d8801b17 	ldw	r2,108(sp)
 1020b5c:	d811883a 	mov	r8,sp
 1020b60:	8c3fef16 	blt	r17,r16,1020b20 <__alt_data_end+0xff020b20>
 1020b64:	dac02817 	ldw	r11,160(sp)
 1020b68:	1c07883a 	add	r3,r3,r16
 1020b6c:	10800044 	addi	r2,r2,1
 1020b70:	42c00015 	stw	r11,0(r8)
 1020b74:	44000115 	stw	r16,4(r8)
 1020b78:	d8c01c15 	stw	r3,112(sp)
 1020b7c:	d8801b15 	stw	r2,108(sp)
 1020b80:	010001c4 	movi	r4,7
 1020b84:	2080aa16 	blt	r4,r2,1020e30 <___svfiprintf_internal_r+0xe90>
 1020b88:	d8802417 	ldw	r2,144(sp)
 1020b8c:	dac02017 	ldw	r11,128(sp)
 1020b90:	12c0010e 	bge	r2,r11,1020b98 <___svfiprintf_internal_r+0xbf8>
 1020b94:	5805883a 	mov	r2,r11
 1020b98:	dac02517 	ldw	r11,148(sp)
 1020b9c:	5897883a 	add	r11,r11,r2
 1020ba0:	dac02515 	stw	r11,148(sp)
 1020ba4:	1800531e 	bne	r3,zero,1020cf4 <___svfiprintf_internal_r+0xd54>
 1020ba8:	98800007 	ldb	r2,0(r19)
 1020bac:	d8001b15 	stw	zero,108(sp)
 1020bb0:	d811883a 	mov	r8,sp
 1020bb4:	103d231e 	bne	r2,zero,1020044 <__alt_data_end+0xff020044>
 1020bb8:	9823883a 	mov	r17,r19
 1020bbc:	003d3906 	br	10200a4 <__alt_data_end+0xff0200a4>
 1020bc0:	d8801c17 	ldw	r2,112(sp)
 1020bc4:	10000426 	beq	r2,zero,1020bd8 <___svfiprintf_internal_r+0xc38>
 1020bc8:	d9402717 	ldw	r5,156(sp)
 1020bcc:	d9002a17 	ldw	r4,168(sp)
 1020bd0:	d9801a04 	addi	r6,sp,104
 1020bd4:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020bd8:	dac02717 	ldw	r11,156(sp)
 1020bdc:	d8802517 	ldw	r2,148(sp)
 1020be0:	58c0030b 	ldhu	r3,12(r11)
 1020be4:	18c0100c 	andi	r3,r3,64
 1020be8:	1801381e 	bne	r3,zero,10210cc <___svfiprintf_internal_r+0x112c>
 1020bec:	dfc03717 	ldw	ra,220(sp)
 1020bf0:	df003617 	ldw	fp,216(sp)
 1020bf4:	ddc03517 	ldw	r23,212(sp)
 1020bf8:	dd803417 	ldw	r22,208(sp)
 1020bfc:	dd403317 	ldw	r21,204(sp)
 1020c00:	dd003217 	ldw	r20,200(sp)
 1020c04:	dcc03117 	ldw	r19,196(sp)
 1020c08:	dc803017 	ldw	r18,192(sp)
 1020c0c:	dc402f17 	ldw	r17,188(sp)
 1020c10:	dc002e17 	ldw	r16,184(sp)
 1020c14:	dec03804 	addi	sp,sp,224
 1020c18:	f800283a 	ret
 1020c1c:	dac02417 	ldw	r11,144(sp)
 1020c20:	d9002017 	ldw	r4,128(sp)
 1020c24:	5939c83a 	sub	fp,r11,r4
 1020c28:	073f780e 	bge	zero,fp,1020a0c <__alt_data_end+0xff020a0c>
 1020c2c:	02400404 	movi	r9,16
 1020c30:	4f01370e 	bge	r9,fp,1021110 <___svfiprintf_internal_r+0x1170>
 1020c34:	02c040f4 	movhi	r11,259
 1020c38:	5aeb6c04 	addi	r11,r11,-21072
 1020c3c:	dac02215 	stw	r11,136(sp)
 1020c40:	028001c4 	movi	r10,7
 1020c44:	00000306 	br	1020c54 <___svfiprintf_internal_r+0xcb4>
 1020c48:	e73ffc04 	addi	fp,fp,-16
 1020c4c:	42000204 	addi	r8,r8,8
 1020c50:	4f00150e 	bge	r9,fp,1020ca8 <___svfiprintf_internal_r+0xd08>
 1020c54:	18c00404 	addi	r3,r3,16
 1020c58:	10800044 	addi	r2,r2,1
 1020c5c:	45000015 	stw	r20,0(r8)
 1020c60:	42400115 	stw	r9,4(r8)
 1020c64:	d8c01c15 	stw	r3,112(sp)
 1020c68:	d8801b15 	stw	r2,108(sp)
 1020c6c:	50bff60e 	bge	r10,r2,1020c48 <__alt_data_end+0xff020c48>
 1020c70:	d9801a04 	addi	r6,sp,104
 1020c74:	b80b883a 	mov	r5,r23
 1020c78:	a809883a 	mov	r4,r21
 1020c7c:	da402c15 	stw	r9,176(sp)
 1020c80:	da802d15 	stw	r10,180(sp)
 1020c84:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020c88:	da402c17 	ldw	r9,176(sp)
 1020c8c:	da802d17 	ldw	r10,180(sp)
 1020c90:	103fd11e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020c94:	e73ffc04 	addi	fp,fp,-16
 1020c98:	d8c01c17 	ldw	r3,112(sp)
 1020c9c:	d8801b17 	ldw	r2,108(sp)
 1020ca0:	d811883a 	mov	r8,sp
 1020ca4:	4f3feb16 	blt	r9,fp,1020c54 <__alt_data_end+0xff020c54>
 1020ca8:	dac02217 	ldw	r11,136(sp)
 1020cac:	1f07883a 	add	r3,r3,fp
 1020cb0:	10800044 	addi	r2,r2,1
 1020cb4:	42c00015 	stw	r11,0(r8)
 1020cb8:	47000115 	stw	fp,4(r8)
 1020cbc:	d8c01c15 	stw	r3,112(sp)
 1020cc0:	d8801b15 	stw	r2,108(sp)
 1020cc4:	010001c4 	movi	r4,7
 1020cc8:	2080b616 	blt	r4,r2,1020fa4 <___svfiprintf_internal_r+0x1004>
 1020ccc:	42000204 	addi	r8,r8,8
 1020cd0:	003f4e06 	br	1020a0c <__alt_data_end+0xff020a0c>
 1020cd4:	d9801a04 	addi	r6,sp,104
 1020cd8:	b80b883a 	mov	r5,r23
 1020cdc:	a809883a 	mov	r4,r21
 1020ce0:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020ce4:	103fbc1e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020ce8:	d8c01c17 	ldw	r3,112(sp)
 1020cec:	d811883a 	mov	r8,sp
 1020cf0:	003f7a06 	br	1020adc <__alt_data_end+0xff020adc>
 1020cf4:	d9801a04 	addi	r6,sp,104
 1020cf8:	b80b883a 	mov	r5,r23
 1020cfc:	a809883a 	mov	r4,r21
 1020d00:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020d04:	103fa826 	beq	r2,zero,1020ba8 <__alt_data_end+0xff020ba8>
 1020d08:	003fb306 	br	1020bd8 <__alt_data_end+0xff020bd8>
 1020d0c:	d9801a04 	addi	r6,sp,104
 1020d10:	b80b883a 	mov	r5,r23
 1020d14:	a809883a 	mov	r4,r21
 1020d18:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020d1c:	103fae1e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020d20:	d811883a 	mov	r8,sp
 1020d24:	003cdc06 	br	1020098 <__alt_data_end+0xff020098>
 1020d28:	d9801a04 	addi	r6,sp,104
 1020d2c:	b80b883a 	mov	r5,r23
 1020d30:	a809883a 	mov	r4,r21
 1020d34:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020d38:	103fa71e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020d3c:	d8c01c17 	ldw	r3,112(sp)
 1020d40:	d8801b17 	ldw	r2,108(sp)
 1020d44:	d811883a 	mov	r8,sp
 1020d48:	003f5a06 	br	1020ab4 <__alt_data_end+0xff020ab4>
 1020d4c:	d9801a04 	addi	r6,sp,104
 1020d50:	b80b883a 	mov	r5,r23
 1020d54:	a809883a 	mov	r4,r21
 1020d58:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020d5c:	103f9e1e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020d60:	d8c01c17 	ldw	r3,112(sp)
 1020d64:	d8801b17 	ldw	r2,108(sp)
 1020d68:	d811883a 	mov	r8,sp
 1020d6c:	003f1706 	br	10209cc <__alt_data_end+0xff0209cc>
 1020d70:	d9801a04 	addi	r6,sp,104
 1020d74:	b80b883a 	mov	r5,r23
 1020d78:	a809883a 	mov	r4,r21
 1020d7c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020d80:	103f951e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020d84:	d8c01c17 	ldw	r3,112(sp)
 1020d88:	d8801b17 	ldw	r2,108(sp)
 1020d8c:	d811883a 	mov	r8,sp
 1020d90:	003f1b06 	br	1020a00 <__alt_data_end+0xff020a00>
 1020d94:	d8001d85 	stb	zero,118(sp)
 1020d98:	80007b16 	blt	r16,zero,1020f88 <___svfiprintf_internal_r+0xfe8>
 1020d9c:	00ffdfc4 	movi	r3,-129
 1020da0:	e244b03a 	or	r2,fp,r9
 1020da4:	90e4703a 	and	r18,r18,r3
 1020da8:	103d7026 	beq	r2,zero,102036c <__alt_data_end+0xff02036c>
 1020dac:	0015883a 	mov	r10,zero
 1020db0:	003d7206 	br	102037c <__alt_data_end+0xff02037c>
 1020db4:	d9801a04 	addi	r6,sp,104
 1020db8:	b80b883a 	mov	r5,r23
 1020dbc:	a809883a 	mov	r4,r21
 1020dc0:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020dc4:	103f841e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020dc8:	d8c01c17 	ldw	r3,112(sp)
 1020dcc:	d8801b17 	ldw	r2,108(sp)
 1020dd0:	d811883a 	mov	r8,sp
 1020dd4:	003ef006 	br	1020998 <__alt_data_end+0xff020998>
 1020dd8:	9080100c 	andi	r2,r18,64
 1020ddc:	d8001d85 	stb	zero,118(sp)
 1020de0:	dac02317 	ldw	r11,140(sp)
 1020de4:	10008126 	beq	r2,zero,1020fec <___svfiprintf_internal_r+0x104c>
 1020de8:	58800104 	addi	r2,r11,4
 1020dec:	5f00000b 	ldhu	fp,0(r11)
 1020df0:	0013883a 	mov	r9,zero
 1020df4:	803ec30e 	bge	r16,zero,1020904 <__alt_data_end+0xff020904>
 1020df8:	d8802315 	stw	r2,140(sp)
 1020dfc:	0015883a 	mov	r10,zero
 1020e00:	e244b03a 	or	r2,fp,r9
 1020e04:	103e371e 	bne	r2,zero,10206e4 <__alt_data_end+0xff0206e4>
 1020e08:	00800044 	movi	r2,1
 1020e0c:	10803fcc 	andi	r2,r2,255
 1020e10:	00c00044 	movi	r3,1
 1020e14:	10c06126 	beq	r2,r3,1020f9c <___svfiprintf_internal_r+0xffc>
 1020e18:	00c00084 	movi	r3,2
 1020e1c:	10fd5526 	beq	r2,r3,1020374 <__alt_data_end+0xff020374>
 1020e20:	003ed806 	br	1020984 <__alt_data_end+0xff020984>
 1020e24:	d8802315 	stw	r2,140(sp)
 1020e28:	98c00007 	ldb	r3,0(r19)
 1020e2c:	003cab06 	br	10200dc <__alt_data_end+0xff0200dc>
 1020e30:	d9801a04 	addi	r6,sp,104
 1020e34:	b80b883a 	mov	r5,r23
 1020e38:	a809883a 	mov	r4,r21
 1020e3c:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020e40:	103f651e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020e44:	d8c01c17 	ldw	r3,112(sp)
 1020e48:	003f4f06 	br	1020b88 <__alt_data_end+0xff020b88>
 1020e4c:	008040f4 	movhi	r2,259
 1020e50:	10ab0404 	addi	r2,r2,-21488
 1020e54:	d8802915 	stw	r2,164(sp)
 1020e58:	003d4406 	br	102036c <__alt_data_end+0xff02036c>
 1020e5c:	dac02317 	ldw	r11,140(sp)
 1020e60:	58800017 	ldw	r2,0(r11)
 1020e64:	dac02517 	ldw	r11,148(sp)
 1020e68:	5807d7fa 	srai	r3,r11,31
 1020e6c:	dac02317 	ldw	r11,140(sp)
 1020e70:	10c00115 	stw	r3,4(r2)
 1020e74:	5ac00104 	addi	r11,r11,4
 1020e78:	dac02315 	stw	r11,140(sp)
 1020e7c:	dac02517 	ldw	r11,148(sp)
 1020e80:	12c00015 	stw	r11,0(r2)
 1020e84:	003c6d06 	br	102003c <__alt_data_end+0xff02003c>
 1020e88:	9080100c 	andi	r2,r18,64
 1020e8c:	dac02317 	ldw	r11,140(sp)
 1020e90:	103e5326 	beq	r2,zero,10207e0 <__alt_data_end+0xff0207e0>
 1020e94:	5f00000f 	ldh	fp,0(r11)
 1020e98:	5ac00104 	addi	r11,r11,4
 1020e9c:	dac02315 	stw	r11,140(sp)
 1020ea0:	e013d7fa 	srai	r9,fp,31
 1020ea4:	4805883a 	mov	r2,r9
 1020ea8:	003e0706 	br	10206c8 <__alt_data_end+0xff0206c8>
 1020eac:	00800c04 	movi	r2,48
 1020eb0:	d8801d05 	stb	r2,116(sp)
 1020eb4:	d8c01d45 	stb	r3,117(sp)
 1020eb8:	d8001d85 	stb	zero,118(sp)
 1020ebc:	90800094 	ori	r2,r18,2
 1020ec0:	80008f16 	blt	r16,zero,1021100 <___svfiprintf_internal_r+0x1160>
 1020ec4:	00bfdfc4 	movi	r2,-129
 1020ec8:	90a4703a 	and	r18,r18,r2
 1020ecc:	94800094 	ori	r18,r18,2
 1020ed0:	0015883a 	mov	r10,zero
 1020ed4:	003d2906 	br	102037c <__alt_data_end+0xff02037c>
 1020ed8:	98c00007 	ldb	r3,0(r19)
 1020edc:	003c7f06 	br	10200dc <__alt_data_end+0xff0200dc>
 1020ee0:	dac02317 	ldw	r11,140(sp)
 1020ee4:	0013883a 	mov	r9,zero
 1020ee8:	5f000017 	ldw	fp,0(r11)
 1020eec:	5ac00104 	addi	r11,r11,4
 1020ef0:	dac02315 	stw	r11,140(sp)
 1020ef4:	003d1506 	br	102034c <__alt_data_end+0xff02034c>
 1020ef8:	9080100c 	andi	r2,r18,64
 1020efc:	d8001d85 	stb	zero,118(sp)
 1020f00:	dac02317 	ldw	r11,140(sp)
 1020f04:	10003426 	beq	r2,zero,1020fd8 <___svfiprintf_internal_r+0x1038>
 1020f08:	58800104 	addi	r2,r11,4
 1020f0c:	5f00000b 	ldhu	fp,0(r11)
 1020f10:	0013883a 	mov	r9,zero
 1020f14:	803e950e 	bge	r16,zero,102096c <__alt_data_end+0xff02096c>
 1020f18:	e246b03a 	or	r3,fp,r9
 1020f1c:	d8802315 	stw	r2,140(sp)
 1020f20:	183d5a1e 	bne	r3,zero,102048c <__alt_data_end+0xff02048c>
 1020f24:	0015883a 	mov	r10,zero
 1020f28:	0005883a 	mov	r2,zero
 1020f2c:	003fb706 	br	1020e0c <__alt_data_end+0xff020e0c>
 1020f30:	98c00043 	ldbu	r3,1(r19)
 1020f34:	94800814 	ori	r18,r18,32
 1020f38:	9cc00044 	addi	r19,r19,1
 1020f3c:	18c03fcc 	andi	r3,r3,255
 1020f40:	18c0201c 	xori	r3,r3,128
 1020f44:	18ffe004 	addi	r3,r3,-128
 1020f48:	003c6406 	br	10200dc <__alt_data_end+0xff0200dc>
 1020f4c:	d8c02315 	stw	r3,140(sp)
 1020f50:	0015883a 	mov	r10,zero
 1020f54:	003faa06 	br	1020e00 <__alt_data_end+0xff020e00>
 1020f58:	dac02317 	ldw	r11,140(sp)
 1020f5c:	58800017 	ldw	r2,0(r11)
 1020f60:	5ac00104 	addi	r11,r11,4
 1020f64:	dac02315 	stw	r11,140(sp)
 1020f68:	dac02517 	ldw	r11,148(sp)
 1020f6c:	12c00015 	stw	r11,0(r2)
 1020f70:	003c3206 	br	102003c <__alt_data_end+0xff02003c>
 1020f74:	010040f4 	movhi	r4,259
 1020f78:	212b0404 	addi	r4,r4,-21488
 1020f7c:	d9002915 	stw	r4,164(sp)
 1020f80:	d8c02315 	stw	r3,140(sp)
 1020f84:	1025883a 	mov	r18,r2
 1020f88:	e244b03a 	or	r2,fp,r9
 1020f8c:	103f871e 	bne	r2,zero,1020dac <__alt_data_end+0xff020dac>
 1020f90:	0015883a 	mov	r10,zero
 1020f94:	00800084 	movi	r2,2
 1020f98:	003f9c06 	br	1020e0c <__alt_data_end+0xff020e0c>
 1020f9c:	0039883a 	mov	fp,zero
 1020fa0:	003e5f06 	br	1020920 <__alt_data_end+0xff020920>
 1020fa4:	d9801a04 	addi	r6,sp,104
 1020fa8:	b80b883a 	mov	r5,r23
 1020fac:	a809883a 	mov	r4,r21
 1020fb0:	101fdd00 	call	101fdd0 <__ssprint_r>
 1020fb4:	103f081e 	bne	r2,zero,1020bd8 <__alt_data_end+0xff020bd8>
 1020fb8:	d8c01c17 	ldw	r3,112(sp)
 1020fbc:	d8801b17 	ldw	r2,108(sp)
 1020fc0:	d811883a 	mov	r8,sp
 1020fc4:	003e9106 	br	1020a0c <__alt_data_end+0xff020a0c>
 1020fc8:	010040f4 	movhi	r4,259
 1020fcc:	212b6c04 	addi	r4,r4,-21072
 1020fd0:	d9002215 	stw	r4,136(sp)
 1020fd4:	003ead06 	br	1020a8c <__alt_data_end+0xff020a8c>
 1020fd8:	58800104 	addi	r2,r11,4
 1020fdc:	5f000017 	ldw	fp,0(r11)
 1020fe0:	0013883a 	mov	r9,zero
 1020fe4:	803e610e 	bge	r16,zero,102096c <__alt_data_end+0xff02096c>
 1020fe8:	003fcb06 	br	1020f18 <__alt_data_end+0xff020f18>
 1020fec:	58800104 	addi	r2,r11,4
 1020ff0:	5f000017 	ldw	fp,0(r11)
 1020ff4:	0013883a 	mov	r9,zero
 1020ff8:	803e420e 	bge	r16,zero,1020904 <__alt_data_end+0xff020904>
 1020ffc:	003f7e06 	br	1020df8 <__alt_data_end+0xff020df8>
 1021000:	5f000017 	ldw	fp,0(r11)
 1021004:	5ac00104 	addi	r11,r11,4
 1021008:	0013883a 	mov	r9,zero
 102100c:	dac02315 	stw	r11,140(sp)
 1021010:	003cce06 	br	102034c <__alt_data_end+0xff02034c>
 1021014:	8809883a 	mov	r4,r17
 1021018:	da002c15 	stw	r8,176(sp)
 102101c:	10164b40 	call	10164b4 <strlen>
 1021020:	d8802115 	stw	r2,132(sp)
 1021024:	da801d83 	ldbu	r10,118(sp)
 1021028:	df002315 	stw	fp,140(sp)
 102102c:	0021883a 	mov	r16,zero
 1021030:	da002c17 	ldw	r8,176(sp)
 1021034:	003cf606 	br	1020410 <__alt_data_end+0xff020410>
 1021038:	00800184 	movi	r2,6
 102103c:	1400012e 	bgeu	r2,r16,1021044 <___svfiprintf_internal_r+0x10a4>
 1021040:	1021883a 	mov	r16,r2
 1021044:	dc002115 	stw	r16,132(sp)
 1021048:	8005883a 	mov	r2,r16
 102104c:	80003c16 	blt	r16,zero,1021140 <___svfiprintf_internal_r+0x11a0>
 1021050:	044040f4 	movhi	r17,259
 1021054:	d8802015 	stw	r2,128(sp)
 1021058:	df002315 	stw	fp,140(sp)
 102105c:	8c6b0904 	addi	r17,r17,-21468
 1021060:	003d2e06 	br	102051c <__alt_data_end+0xff02051c>
 1021064:	04001004 	movi	r16,64
 1021068:	800b883a 	mov	r5,r16
 102106c:	101d91c0 	call	101d91c <_malloc_r>
 1021070:	dac02717 	ldw	r11,156(sp)
 1021074:	58800015 	stw	r2,0(r11)
 1021078:	58800415 	stw	r2,16(r11)
 102107c:	10004826 	beq	r2,zero,10211a0 <___svfiprintf_internal_r+0x1200>
 1021080:	dac02717 	ldw	r11,156(sp)
 1021084:	5c000515 	stw	r16,20(r11)
 1021088:	003bd906 	br	101fff0 <__alt_data_end+0xff01fff0>
 102108c:	9080004c 	andi	r2,r18,1
 1021090:	0015883a 	mov	r10,zero
 1021094:	10000626 	beq	r2,zero,10210b0 <___svfiprintf_internal_r+0x1110>
 1021098:	dac02b17 	ldw	r11,172(sp)
 102109c:	00800c04 	movi	r2,48
 10210a0:	d88019c5 	stb	r2,103(sp)
 10210a4:	dac02115 	stw	r11,132(sp)
 10210a8:	dc4019c4 	addi	r17,sp,103
 10210ac:	003cd806 	br	1020410 <__alt_data_end+0xff020410>
 10210b0:	d8002115 	stw	zero,132(sp)
 10210b4:	dc401a04 	addi	r17,sp,104
 10210b8:	003cd506 	br	1020410 <__alt_data_end+0xff020410>
 10210bc:	010040f4 	movhi	r4,259
 10210c0:	212b7004 	addi	r4,r4,-21056
 10210c4:	d9002815 	stw	r4,160(sp)
 10210c8:	003d4306 	br	10205d8 <__alt_data_end+0xff0205d8>
 10210cc:	00bfffc4 	movi	r2,-1
 10210d0:	003ec606 	br	1020bec <__alt_data_end+0xff020bec>
 10210d4:	00800044 	movi	r2,1
 10210d8:	10803fcc 	andi	r2,r2,255
 10210dc:	00c00044 	movi	r3,1
 10210e0:	10fd8026 	beq	r2,r3,10206e4 <__alt_data_end+0xff0206e4>
 10210e4:	00c00084 	movi	r3,2
 10210e8:	10fca426 	beq	r2,r3,102037c <__alt_data_end+0xff02037c>
 10210ec:	003ce806 	br	1020490 <__alt_data_end+0xff020490>
 10210f0:	010040f4 	movhi	r4,259
 10210f4:	212b7004 	addi	r4,r4,-21056
 10210f8:	d9002815 	stw	r4,160(sp)
 10210fc:	003e9906 	br	1020b64 <__alt_data_end+0xff020b64>
 1021100:	1025883a 	mov	r18,r2
 1021104:	0015883a 	mov	r10,zero
 1021108:	00800084 	movi	r2,2
 102110c:	003ff206 	br	10210d8 <__alt_data_end+0xff0210d8>
 1021110:	014040f4 	movhi	r5,259
 1021114:	296b6c04 	addi	r5,r5,-21072
 1021118:	d9402215 	stw	r5,136(sp)
 102111c:	003ee206 	br	1020ca8 <__alt_data_end+0xff020ca8>
 1021120:	5827883a 	mov	r19,r11
 1021124:	0021883a 	mov	r16,zero
 1021128:	003bed06 	br	10200e0 <__alt_data_end+0xff0200e0>
 102112c:	dc002115 	stw	r16,132(sp)
 1021130:	da801d83 	ldbu	r10,118(sp)
 1021134:	df002315 	stw	fp,140(sp)
 1021138:	0021883a 	mov	r16,zero
 102113c:	003cb406 	br	1020410 <__alt_data_end+0xff020410>
 1021140:	0005883a 	mov	r2,zero
 1021144:	003fc206 	br	1021050 <__alt_data_end+0xff021050>
 1021148:	d8802317 	ldw	r2,140(sp)
 102114c:	98c00043 	ldbu	r3,1(r19)
 1021150:	5827883a 	mov	r19,r11
 1021154:	14000017 	ldw	r16,0(r2)
 1021158:	10800104 	addi	r2,r2,4
 102115c:	d8802315 	stw	r2,140(sp)
 1021160:	803f760e 	bge	r16,zero,1020f3c <__alt_data_end+0xff020f3c>
 1021164:	18c03fcc 	andi	r3,r3,255
 1021168:	18c0201c 	xori	r3,r3,128
 102116c:	043fffc4 	movi	r16,-1
 1021170:	18ffe004 	addi	r3,r3,-128
 1021174:	003bd906 	br	10200dc <__alt_data_end+0xff0200dc>
 1021178:	d9c01d85 	stb	r7,118(sp)
 102117c:	003cb606 	br	1020458 <__alt_data_end+0xff020458>
 1021180:	d9c01d85 	stb	r7,118(sp)
 1021184:	003d2106 	br	102060c <__alt_data_end+0xff02060c>
 1021188:	d9c01d85 	stb	r7,118(sp)
 102118c:	003d8e06 	br	10207c8 <__alt_data_end+0xff0207c8>
 1021190:	d9c01d85 	stb	r7,118(sp)
 1021194:	003db306 	br	1020864 <__alt_data_end+0xff020864>
 1021198:	d9c01d85 	stb	r7,118(sp)
 102119c:	003c8a06 	br	10203c8 <__alt_data_end+0xff0203c8>
 10211a0:	dac02a17 	ldw	r11,168(sp)
 10211a4:	00800304 	movi	r2,12
 10211a8:	58800015 	stw	r2,0(r11)
 10211ac:	00bfffc4 	movi	r2,-1
 10211b0:	003e8e06 	br	1020bec <__alt_data_end+0xff020bec>
 10211b4:	d9c01d85 	stb	r7,118(sp)
 10211b8:	003dc706 	br	10208d8 <__alt_data_end+0xff0208d8>
 10211bc:	d9c01d85 	stb	r7,118(sp)
 10211c0:	003ddf06 	br	1020940 <__alt_data_end+0xff020940>
 10211c4:	d9c01d85 	stb	r7,118(sp)
 10211c8:	003d3706 	br	10206a8 <__alt_data_end+0xff0206a8>
 10211cc:	d9c01d85 	stb	r7,118(sp)
 10211d0:	003c5406 	br	1020324 <__alt_data_end+0xff020324>
 10211d4:	d9c01d85 	stb	r7,118(sp)
 10211d8:	003d1d06 	br	1020650 <__alt_data_end+0xff020650>

010211dc <__sprint_r.part.0>:
 10211dc:	28801917 	ldw	r2,100(r5)
 10211e0:	defff604 	addi	sp,sp,-40
 10211e4:	dd400515 	stw	r21,20(sp)
 10211e8:	dfc00915 	stw	ra,36(sp)
 10211ec:	df000815 	stw	fp,32(sp)
 10211f0:	ddc00715 	stw	r23,28(sp)
 10211f4:	dd800615 	stw	r22,24(sp)
 10211f8:	dd000415 	stw	r20,16(sp)
 10211fc:	dcc00315 	stw	r19,12(sp)
 1021200:	dc800215 	stw	r18,8(sp)
 1021204:	dc400115 	stw	r17,4(sp)
 1021208:	dc000015 	stw	r16,0(sp)
 102120c:	1088000c 	andi	r2,r2,8192
 1021210:	302b883a 	mov	r21,r6
 1021214:	10002e26 	beq	r2,zero,10212d0 <__sprint_r.part.0+0xf4>
 1021218:	30800217 	ldw	r2,8(r6)
 102121c:	35800017 	ldw	r22,0(r6)
 1021220:	10002926 	beq	r2,zero,10212c8 <__sprint_r.part.0+0xec>
 1021224:	2827883a 	mov	r19,r5
 1021228:	2029883a 	mov	r20,r4
 102122c:	b5c00104 	addi	r23,r22,4
 1021230:	04bfffc4 	movi	r18,-1
 1021234:	bc400017 	ldw	r17,0(r23)
 1021238:	b4000017 	ldw	r16,0(r22)
 102123c:	0039883a 	mov	fp,zero
 1021240:	8822d0ba 	srli	r17,r17,2
 1021244:	8800031e 	bne	r17,zero,1021254 <__sprint_r.part.0+0x78>
 1021248:	00001806 	br	10212ac <__sprint_r.part.0+0xd0>
 102124c:	84000104 	addi	r16,r16,4
 1021250:	8f001526 	beq	r17,fp,10212a8 <__sprint_r.part.0+0xcc>
 1021254:	81400017 	ldw	r5,0(r16)
 1021258:	980d883a 	mov	r6,r19
 102125c:	a009883a 	mov	r4,r20
 1021260:	1022c040 	call	1022c04 <_fputwc_r>
 1021264:	e7000044 	addi	fp,fp,1
 1021268:	14bff81e 	bne	r2,r18,102124c <__alt_data_end+0xff02124c>
 102126c:	9005883a 	mov	r2,r18
 1021270:	a8000215 	stw	zero,8(r21)
 1021274:	a8000115 	stw	zero,4(r21)
 1021278:	dfc00917 	ldw	ra,36(sp)
 102127c:	df000817 	ldw	fp,32(sp)
 1021280:	ddc00717 	ldw	r23,28(sp)
 1021284:	dd800617 	ldw	r22,24(sp)
 1021288:	dd400517 	ldw	r21,20(sp)
 102128c:	dd000417 	ldw	r20,16(sp)
 1021290:	dcc00317 	ldw	r19,12(sp)
 1021294:	dc800217 	ldw	r18,8(sp)
 1021298:	dc400117 	ldw	r17,4(sp)
 102129c:	dc000017 	ldw	r16,0(sp)
 10212a0:	dec00a04 	addi	sp,sp,40
 10212a4:	f800283a 	ret
 10212a8:	a8800217 	ldw	r2,8(r21)
 10212ac:	8c63883a 	add	r17,r17,r17
 10212b0:	8c63883a 	add	r17,r17,r17
 10212b4:	1445c83a 	sub	r2,r2,r17
 10212b8:	a8800215 	stw	r2,8(r21)
 10212bc:	b5800204 	addi	r22,r22,8
 10212c0:	bdc00204 	addi	r23,r23,8
 10212c4:	103fdb1e 	bne	r2,zero,1021234 <__alt_data_end+0xff021234>
 10212c8:	0005883a 	mov	r2,zero
 10212cc:	003fe806 	br	1021270 <__alt_data_end+0xff021270>
 10212d0:	101d0400 	call	101d040 <__sfvwrite_r>
 10212d4:	003fe606 	br	1021270 <__alt_data_end+0xff021270>

010212d8 <__sprint_r>:
 10212d8:	30c00217 	ldw	r3,8(r6)
 10212dc:	18000126 	beq	r3,zero,10212e4 <__sprint_r+0xc>
 10212e0:	10211dc1 	jmpi	10211dc <__sprint_r.part.0>
 10212e4:	30000115 	stw	zero,4(r6)
 10212e8:	0005883a 	mov	r2,zero
 10212ec:	f800283a 	ret

010212f0 <___vfiprintf_internal_r>:
 10212f0:	deffc904 	addi	sp,sp,-220
 10212f4:	df003515 	stw	fp,212(sp)
 10212f8:	dd003115 	stw	r20,196(sp)
 10212fc:	dfc03615 	stw	ra,216(sp)
 1021300:	ddc03415 	stw	r23,208(sp)
 1021304:	dd803315 	stw	r22,204(sp)
 1021308:	dd403215 	stw	r21,200(sp)
 102130c:	dcc03015 	stw	r19,192(sp)
 1021310:	dc802f15 	stw	r18,188(sp)
 1021314:	dc402e15 	stw	r17,184(sp)
 1021318:	dc002d15 	stw	r16,180(sp)
 102131c:	d9002015 	stw	r4,128(sp)
 1021320:	d9c02215 	stw	r7,136(sp)
 1021324:	2829883a 	mov	r20,r5
 1021328:	3039883a 	mov	fp,r6
 102132c:	20000226 	beq	r4,zero,1021338 <___vfiprintf_internal_r+0x48>
 1021330:	20800e17 	ldw	r2,56(r4)
 1021334:	1000cf26 	beq	r2,zero,1021674 <___vfiprintf_internal_r+0x384>
 1021338:	a080030b 	ldhu	r2,12(r20)
 102133c:	10c8000c 	andi	r3,r2,8192
 1021340:	1800061e 	bne	r3,zero,102135c <___vfiprintf_internal_r+0x6c>
 1021344:	a1001917 	ldw	r4,100(r20)
 1021348:	00f7ffc4 	movi	r3,-8193
 102134c:	10880014 	ori	r2,r2,8192
 1021350:	20c6703a 	and	r3,r4,r3
 1021354:	a080030d 	sth	r2,12(r20)
 1021358:	a0c01915 	stw	r3,100(r20)
 102135c:	10c0020c 	andi	r3,r2,8
 1021360:	1800a926 	beq	r3,zero,1021608 <___vfiprintf_internal_r+0x318>
 1021364:	a0c00417 	ldw	r3,16(r20)
 1021368:	1800a726 	beq	r3,zero,1021608 <___vfiprintf_internal_r+0x318>
 102136c:	1080068c 	andi	r2,r2,26
 1021370:	00c00284 	movi	r3,10
 1021374:	10c0ac26 	beq	r2,r3,1021628 <___vfiprintf_internal_r+0x338>
 1021378:	da801a04 	addi	r10,sp,104
 102137c:	da801e15 	stw	r10,120(sp)
 1021380:	d8801e17 	ldw	r2,120(sp)
 1021384:	da8019c4 	addi	r10,sp,103
 1021388:	058040f4 	movhi	r22,259
 102138c:	05c040f4 	movhi	r23,259
 1021390:	da801f15 	stw	r10,124(sp)
 1021394:	1295c83a 	sub	r10,r2,r10
 1021398:	b5ab7804 	addi	r22,r22,-21024
 102139c:	bdeb7404 	addi	r23,r23,-21040
 10213a0:	dec01a15 	stw	sp,104(sp)
 10213a4:	d8001c15 	stw	zero,112(sp)
 10213a8:	d8001b15 	stw	zero,108(sp)
 10213ac:	d8002615 	stw	zero,152(sp)
 10213b0:	d8002315 	stw	zero,140(sp)
 10213b4:	da802715 	stw	r10,156(sp)
 10213b8:	d811883a 	mov	r8,sp
 10213bc:	dd002115 	stw	r20,132(sp)
 10213c0:	e021883a 	mov	r16,fp
 10213c4:	80800007 	ldb	r2,0(r16)
 10213c8:	1003ea26 	beq	r2,zero,1022374 <___vfiprintf_internal_r+0x1084>
 10213cc:	00c00944 	movi	r3,37
 10213d0:	8025883a 	mov	r18,r16
 10213d4:	10c0021e 	bne	r2,r3,10213e0 <___vfiprintf_internal_r+0xf0>
 10213d8:	00001606 	br	1021434 <___vfiprintf_internal_r+0x144>
 10213dc:	10c00326 	beq	r2,r3,10213ec <___vfiprintf_internal_r+0xfc>
 10213e0:	94800044 	addi	r18,r18,1
 10213e4:	90800007 	ldb	r2,0(r18)
 10213e8:	103ffc1e 	bne	r2,zero,10213dc <__alt_data_end+0xff0213dc>
 10213ec:	9423c83a 	sub	r17,r18,r16
 10213f0:	88001026 	beq	r17,zero,1021434 <___vfiprintf_internal_r+0x144>
 10213f4:	d8c01c17 	ldw	r3,112(sp)
 10213f8:	d8801b17 	ldw	r2,108(sp)
 10213fc:	44000015 	stw	r16,0(r8)
 1021400:	88c7883a 	add	r3,r17,r3
 1021404:	10800044 	addi	r2,r2,1
 1021408:	44400115 	stw	r17,4(r8)
 102140c:	d8c01c15 	stw	r3,112(sp)
 1021410:	d8801b15 	stw	r2,108(sp)
 1021414:	010001c4 	movi	r4,7
 1021418:	2080760e 	bge	r4,r2,10215f4 <___vfiprintf_internal_r+0x304>
 102141c:	1803821e 	bne	r3,zero,1022228 <___vfiprintf_internal_r+0xf38>
 1021420:	da802317 	ldw	r10,140(sp)
 1021424:	d8001b15 	stw	zero,108(sp)
 1021428:	d811883a 	mov	r8,sp
 102142c:	5455883a 	add	r10,r10,r17
 1021430:	da802315 	stw	r10,140(sp)
 1021434:	90800007 	ldb	r2,0(r18)
 1021438:	10044626 	beq	r2,zero,1022554 <___vfiprintf_internal_r+0x1264>
 102143c:	90c00047 	ldb	r3,1(r18)
 1021440:	94000044 	addi	r16,r18,1
 1021444:	d8001d85 	stb	zero,118(sp)
 1021448:	0009883a 	mov	r4,zero
 102144c:	000f883a 	mov	r7,zero
 1021450:	027fffc4 	movi	r9,-1
 1021454:	0023883a 	mov	r17,zero
 1021458:	0029883a 	mov	r20,zero
 102145c:	01401604 	movi	r5,88
 1021460:	01800244 	movi	r6,9
 1021464:	03400a84 	movi	r13,42
 1021468:	03001b04 	movi	r12,108
 102146c:	84000044 	addi	r16,r16,1
 1021470:	18bff804 	addi	r2,r3,-32
 1021474:	28827336 	bltu	r5,r2,1021e44 <___vfiprintf_internal_r+0xb54>
 1021478:	100490ba 	slli	r2,r2,2
 102147c:	028040b4 	movhi	r10,258
 1021480:	52852404 	addi	r10,r10,5264
 1021484:	1285883a 	add	r2,r2,r10
 1021488:	10800017 	ldw	r2,0(r2)
 102148c:	1000683a 	jmp	r2
 1021490:	01021b78 	rdprs	r4,zero,2157
 1021494:	01021e44 	movi	r4,2169
 1021498:	01021e44 	movi	r4,2169
 102149c:	01021b98 	cmpnei	r4,zero,2158
 10214a0:	01021e44 	movi	r4,2169
 10214a4:	01021e44 	movi	r4,2169
 10214a8:	01021e44 	movi	r4,2169
 10214ac:	01021e44 	movi	r4,2169
 10214b0:	01021e44 	movi	r4,2169
 10214b4:	01021e44 	movi	r4,2169
 10214b8:	01021d80 	call	1021d8 <__alt_mem_sdram-0xefde28>
 10214bc:	01021d9c 	xori	r4,zero,2166
 10214c0:	01021e44 	movi	r4,2169
 10214c4:	01021684 	movi	r4,2138
 10214c8:	01021dac 	andhi	r4,zero,2166
 10214cc:	01021e44 	movi	r4,2169
 10214d0:	01021ba4 	muli	r4,zero,2158
 10214d4:	01021bb0 	cmpltui	r4,zero,2158
 10214d8:	01021bb0 	cmpltui	r4,zero,2158
 10214dc:	01021bb0 	cmpltui	r4,zero,2158
 10214e0:	01021bb0 	cmpltui	r4,zero,2158
 10214e4:	01021bb0 	cmpltui	r4,zero,2158
 10214e8:	01021bb0 	cmpltui	r4,zero,2158
 10214ec:	01021bb0 	cmpltui	r4,zero,2158
 10214f0:	01021bb0 	cmpltui	r4,zero,2158
 10214f4:	01021bb0 	cmpltui	r4,zero,2158
 10214f8:	01021e44 	movi	r4,2169
 10214fc:	01021e44 	movi	r4,2169
 1021500:	01021e44 	movi	r4,2169
 1021504:	01021e44 	movi	r4,2169
 1021508:	01021e44 	movi	r4,2169
 102150c:	01021e44 	movi	r4,2169
 1021510:	01021e44 	movi	r4,2169
 1021514:	01021e44 	movi	r4,2169
 1021518:	01021e44 	movi	r4,2169
 102151c:	01021e44 	movi	r4,2169
 1021520:	01021bdc 	xori	r4,zero,2159
 1021524:	01021e44 	movi	r4,2169
 1021528:	01021e44 	movi	r4,2169
 102152c:	01021e44 	movi	r4,2169
 1021530:	01021e44 	movi	r4,2169
 1021534:	01021e44 	movi	r4,2169
 1021538:	01021e44 	movi	r4,2169
 102153c:	01021e44 	movi	r4,2169
 1021540:	01021e44 	movi	r4,2169
 1021544:	01021e44 	movi	r4,2169
 1021548:	01021e44 	movi	r4,2169
 102154c:	01021c14 	movui	r4,2160
 1021550:	01021e44 	movi	r4,2169
 1021554:	01021e44 	movi	r4,2169
 1021558:	01021e44 	movi	r4,2169
 102155c:	01021e44 	movi	r4,2169
 1021560:	01021e44 	movi	r4,2169
 1021564:	01021c6c 	andhi	r4,zero,2161
 1021568:	01021e44 	movi	r4,2169
 102156c:	01021e44 	movi	r4,2169
 1021570:	01021cdc 	xori	r4,zero,2163
 1021574:	01021e44 	movi	r4,2169
 1021578:	01021e44 	movi	r4,2169
 102157c:	01021e44 	movi	r4,2169
 1021580:	01021e44 	movi	r4,2169
 1021584:	01021e44 	movi	r4,2169
 1021588:	01021e44 	movi	r4,2169
 102158c:	01021e44 	movi	r4,2169
 1021590:	01021e44 	movi	r4,2169
 1021594:	01021e44 	movi	r4,2169
 1021598:	01021e44 	movi	r4,2169
 102159c:	01021a88 	cmpgei	r4,zero,2154
 10215a0:	01021ab4 	movhi	r4,2154
 10215a4:	01021e44 	movi	r4,2169
 10215a8:	01021e44 	movi	r4,2169
 10215ac:	01021e44 	movi	r4,2169
 10215b0:	01021dec 	andhi	r4,zero,2167
 10215b4:	01021ab4 	movhi	r4,2154
 10215b8:	01021e44 	movi	r4,2169
 10215bc:	01021e44 	movi	r4,2169
 10215c0:	01021948 	cmpgei	r4,zero,2149
 10215c4:	01021e44 	movi	r4,2169
 10215c8:	01021958 	cmpnei	r4,zero,2149
 10215cc:	01021994 	movui	r4,2150
 10215d0:	01021690 	cmplti	r4,zero,2138
 10215d4:	0102193c 	xorhi	r4,zero,2148
 10215d8:	01021e44 	movi	r4,2169
 10215dc:	01021d18 	cmpnei	r4,zero,2164
 10215e0:	01021e44 	movi	r4,2169
 10215e4:	01021d70 	cmpltui	r4,zero,2165
 10215e8:	01021e44 	movi	r4,2169
 10215ec:	01021e44 	movi	r4,2169
 10215f0:	01021a34 	movhi	r4,2152
 10215f4:	42000204 	addi	r8,r8,8
 10215f8:	da802317 	ldw	r10,140(sp)
 10215fc:	5455883a 	add	r10,r10,r17
 1021600:	da802315 	stw	r10,140(sp)
 1021604:	003f8b06 	br	1021434 <__alt_data_end+0xff021434>
 1021608:	d9002017 	ldw	r4,128(sp)
 102160c:	a00b883a 	mov	r5,r20
 1021610:	101abd00 	call	101abd0 <__swsetup_r>
 1021614:	1003b11e 	bne	r2,zero,10224dc <___vfiprintf_internal_r+0x11ec>
 1021618:	a080030b 	ldhu	r2,12(r20)
 102161c:	00c00284 	movi	r3,10
 1021620:	1080068c 	andi	r2,r2,26
 1021624:	10ff541e 	bne	r2,r3,1021378 <__alt_data_end+0xff021378>
 1021628:	a080038f 	ldh	r2,14(r20)
 102162c:	103f5216 	blt	r2,zero,1021378 <__alt_data_end+0xff021378>
 1021630:	d9c02217 	ldw	r7,136(sp)
 1021634:	d9002017 	ldw	r4,128(sp)
 1021638:	e00d883a 	mov	r6,fp
 102163c:	a00b883a 	mov	r5,r20
 1021640:	10227680 	call	1022768 <__sbprintf>
 1021644:	dfc03617 	ldw	ra,216(sp)
 1021648:	df003517 	ldw	fp,212(sp)
 102164c:	ddc03417 	ldw	r23,208(sp)
 1021650:	dd803317 	ldw	r22,204(sp)
 1021654:	dd403217 	ldw	r21,200(sp)
 1021658:	dd003117 	ldw	r20,196(sp)
 102165c:	dcc03017 	ldw	r19,192(sp)
 1021660:	dc802f17 	ldw	r18,188(sp)
 1021664:	dc402e17 	ldw	r17,184(sp)
 1021668:	dc002d17 	ldw	r16,180(sp)
 102166c:	dec03704 	addi	sp,sp,220
 1021670:	f800283a 	ret
 1021674:	101cbbc0 	call	101cbbc <__sinit>
 1021678:	003f2f06 	br	1021338 <__alt_data_end+0xff021338>
 102167c:	0463c83a 	sub	r17,zero,r17
 1021680:	d8802215 	stw	r2,136(sp)
 1021684:	a5000114 	ori	r20,r20,4
 1021688:	80c00007 	ldb	r3,0(r16)
 102168c:	003f7706 	br	102146c <__alt_data_end+0xff02146c>
 1021690:	00800c04 	movi	r2,48
 1021694:	da802217 	ldw	r10,136(sp)
 1021698:	d8801d05 	stb	r2,116(sp)
 102169c:	00801e04 	movi	r2,120
 10216a0:	d8801d45 	stb	r2,117(sp)
 10216a4:	d8001d85 	stb	zero,118(sp)
 10216a8:	50c00104 	addi	r3,r10,4
 10216ac:	54800017 	ldw	r18,0(r10)
 10216b0:	0027883a 	mov	r19,zero
 10216b4:	a0800094 	ori	r2,r20,2
 10216b8:	48030b16 	blt	r9,zero,10222e8 <___vfiprintf_internal_r+0xff8>
 10216bc:	00bfdfc4 	movi	r2,-129
 10216c0:	a096703a 	and	r11,r20,r2
 10216c4:	d8c02215 	stw	r3,136(sp)
 10216c8:	5d000094 	ori	r20,r11,2
 10216cc:	90032b1e 	bne	r18,zero,102237c <___vfiprintf_internal_r+0x108c>
 10216d0:	008040f4 	movhi	r2,259
 10216d4:	10ab0404 	addi	r2,r2,-21488
 10216d8:	d8802615 	stw	r2,152(sp)
 10216dc:	0039883a 	mov	fp,zero
 10216e0:	48017b1e 	bne	r9,zero,1021cd0 <___vfiprintf_internal_r+0x9e0>
 10216e4:	0013883a 	mov	r9,zero
 10216e8:	0027883a 	mov	r19,zero
 10216ec:	dd401a04 	addi	r21,sp,104
 10216f0:	4825883a 	mov	r18,r9
 10216f4:	4cc0010e 	bge	r9,r19,10216fc <___vfiprintf_internal_r+0x40c>
 10216f8:	9825883a 	mov	r18,r19
 10216fc:	e7003fcc 	andi	fp,fp,255
 1021700:	e700201c 	xori	fp,fp,128
 1021704:	e73fe004 	addi	fp,fp,-128
 1021708:	e0000126 	beq	fp,zero,1021710 <___vfiprintf_internal_r+0x420>
 102170c:	94800044 	addi	r18,r18,1
 1021710:	a380008c 	andi	r14,r20,2
 1021714:	70000126 	beq	r14,zero,102171c <___vfiprintf_internal_r+0x42c>
 1021718:	94800084 	addi	r18,r18,2
 102171c:	a700210c 	andi	fp,r20,132
 1021720:	e001df1e 	bne	fp,zero,1021ea0 <___vfiprintf_internal_r+0xbb0>
 1021724:	8c87c83a 	sub	r3,r17,r18
 1021728:	00c1dd0e 	bge	zero,r3,1021ea0 <___vfiprintf_internal_r+0xbb0>
 102172c:	01c00404 	movi	r7,16
 1021730:	d8801c17 	ldw	r2,112(sp)
 1021734:	38c3ad0e 	bge	r7,r3,10225ec <___vfiprintf_internal_r+0x12fc>
 1021738:	028040f4 	movhi	r10,259
 102173c:	52ab7804 	addi	r10,r10,-21024
 1021740:	dc002915 	stw	r16,164(sp)
 1021744:	d9801b17 	ldw	r6,108(sp)
 1021748:	da802415 	stw	r10,144(sp)
 102174c:	03c001c4 	movi	r15,7
 1021750:	da402515 	stw	r9,148(sp)
 1021754:	db802815 	stw	r14,160(sp)
 1021758:	1821883a 	mov	r16,r3
 102175c:	00000506 	br	1021774 <___vfiprintf_internal_r+0x484>
 1021760:	31400084 	addi	r5,r6,2
 1021764:	42000204 	addi	r8,r8,8
 1021768:	200d883a 	mov	r6,r4
 102176c:	843ffc04 	addi	r16,r16,-16
 1021770:	3c000d0e 	bge	r7,r16,10217a8 <___vfiprintf_internal_r+0x4b8>
 1021774:	10800404 	addi	r2,r2,16
 1021778:	31000044 	addi	r4,r6,1
 102177c:	45800015 	stw	r22,0(r8)
 1021780:	41c00115 	stw	r7,4(r8)
 1021784:	d8801c15 	stw	r2,112(sp)
 1021788:	d9001b15 	stw	r4,108(sp)
 102178c:	793ff40e 	bge	r15,r4,1021760 <__alt_data_end+0xff021760>
 1021790:	1001b51e 	bne	r2,zero,1021e68 <___vfiprintf_internal_r+0xb78>
 1021794:	843ffc04 	addi	r16,r16,-16
 1021798:	000d883a 	mov	r6,zero
 102179c:	01400044 	movi	r5,1
 10217a0:	d811883a 	mov	r8,sp
 10217a4:	3c3ff316 	blt	r7,r16,1021774 <__alt_data_end+0xff021774>
 10217a8:	8007883a 	mov	r3,r16
 10217ac:	da402517 	ldw	r9,148(sp)
 10217b0:	db802817 	ldw	r14,160(sp)
 10217b4:	dc002917 	ldw	r16,164(sp)
 10217b8:	da802417 	ldw	r10,144(sp)
 10217bc:	1885883a 	add	r2,r3,r2
 10217c0:	40c00115 	stw	r3,4(r8)
 10217c4:	42800015 	stw	r10,0(r8)
 10217c8:	d8801c15 	stw	r2,112(sp)
 10217cc:	d9401b15 	stw	r5,108(sp)
 10217d0:	00c001c4 	movi	r3,7
 10217d4:	19426016 	blt	r3,r5,1022158 <___vfiprintf_internal_r+0xe68>
 10217d8:	d8c01d87 	ldb	r3,118(sp)
 10217dc:	42000204 	addi	r8,r8,8
 10217e0:	29000044 	addi	r4,r5,1
 10217e4:	1801b31e 	bne	r3,zero,1021eb4 <___vfiprintf_internal_r+0xbc4>
 10217e8:	7001c026 	beq	r14,zero,1021eec <___vfiprintf_internal_r+0xbfc>
 10217ec:	d8c01d04 	addi	r3,sp,116
 10217f0:	10800084 	addi	r2,r2,2
 10217f4:	40c00015 	stw	r3,0(r8)
 10217f8:	00c00084 	movi	r3,2
 10217fc:	40c00115 	stw	r3,4(r8)
 1021800:	d8801c15 	stw	r2,112(sp)
 1021804:	d9001b15 	stw	r4,108(sp)
 1021808:	00c001c4 	movi	r3,7
 102180c:	1902650e 	bge	r3,r4,10221a4 <___vfiprintf_internal_r+0xeb4>
 1021810:	10029a1e 	bne	r2,zero,102227c <___vfiprintf_internal_r+0xf8c>
 1021814:	00c02004 	movi	r3,128
 1021818:	01000044 	movi	r4,1
 102181c:	000b883a 	mov	r5,zero
 1021820:	d811883a 	mov	r8,sp
 1021824:	e0c1b31e 	bne	fp,r3,1021ef4 <___vfiprintf_internal_r+0xc04>
 1021828:	8cb9c83a 	sub	fp,r17,r18
 102182c:	0701b10e 	bge	zero,fp,1021ef4 <___vfiprintf_internal_r+0xc04>
 1021830:	01c00404 	movi	r7,16
 1021834:	3f03890e 	bge	r7,fp,102265c <___vfiprintf_internal_r+0x136c>
 1021838:	00c040f4 	movhi	r3,259
 102183c:	18eb7404 	addi	r3,r3,-21040
 1021840:	d8c02415 	stw	r3,144(sp)
 1021844:	8007883a 	mov	r3,r16
 1021848:	034001c4 	movi	r13,7
 102184c:	e021883a 	mov	r16,fp
 1021850:	da402515 	stw	r9,148(sp)
 1021854:	1839883a 	mov	fp,r3
 1021858:	00000506 	br	1021870 <___vfiprintf_internal_r+0x580>
 102185c:	29800084 	addi	r6,r5,2
 1021860:	42000204 	addi	r8,r8,8
 1021864:	180b883a 	mov	r5,r3
 1021868:	843ffc04 	addi	r16,r16,-16
 102186c:	3c000d0e 	bge	r7,r16,10218a4 <___vfiprintf_internal_r+0x5b4>
 1021870:	10800404 	addi	r2,r2,16
 1021874:	28c00044 	addi	r3,r5,1
 1021878:	45c00015 	stw	r23,0(r8)
 102187c:	41c00115 	stw	r7,4(r8)
 1021880:	d8801c15 	stw	r2,112(sp)
 1021884:	d8c01b15 	stw	r3,108(sp)
 1021888:	68fff40e 	bge	r13,r3,102185c <__alt_data_end+0xff02185c>
 102188c:	1002241e 	bne	r2,zero,1022120 <___vfiprintf_internal_r+0xe30>
 1021890:	843ffc04 	addi	r16,r16,-16
 1021894:	01800044 	movi	r6,1
 1021898:	000b883a 	mov	r5,zero
 102189c:	d811883a 	mov	r8,sp
 10218a0:	3c3ff316 	blt	r7,r16,1021870 <__alt_data_end+0xff021870>
 10218a4:	da402517 	ldw	r9,148(sp)
 10218a8:	e007883a 	mov	r3,fp
 10218ac:	8039883a 	mov	fp,r16
 10218b0:	1821883a 	mov	r16,r3
 10218b4:	d8c02417 	ldw	r3,144(sp)
 10218b8:	1705883a 	add	r2,r2,fp
 10218bc:	47000115 	stw	fp,4(r8)
 10218c0:	40c00015 	stw	r3,0(r8)
 10218c4:	d8801c15 	stw	r2,112(sp)
 10218c8:	d9801b15 	stw	r6,108(sp)
 10218cc:	00c001c4 	movi	r3,7
 10218d0:	19827616 	blt	r3,r6,10222ac <___vfiprintf_internal_r+0xfbc>
 10218d4:	4cf9c83a 	sub	fp,r9,r19
 10218d8:	42000204 	addi	r8,r8,8
 10218dc:	31000044 	addi	r4,r6,1
 10218e0:	300b883a 	mov	r5,r6
 10218e4:	07018516 	blt	zero,fp,1021efc <___vfiprintf_internal_r+0xc0c>
 10218e8:	9885883a 	add	r2,r19,r2
 10218ec:	45400015 	stw	r21,0(r8)
 10218f0:	44c00115 	stw	r19,4(r8)
 10218f4:	d8801c15 	stw	r2,112(sp)
 10218f8:	d9001b15 	stw	r4,108(sp)
 10218fc:	00c001c4 	movi	r3,7
 1021900:	1901dd0e 	bge	r3,r4,1022078 <___vfiprintf_internal_r+0xd88>
 1021904:	1002401e 	bne	r2,zero,1022208 <___vfiprintf_internal_r+0xf18>
 1021908:	d8001b15 	stw	zero,108(sp)
 102190c:	a2c0010c 	andi	r11,r20,4
 1021910:	58000226 	beq	r11,zero,102191c <___vfiprintf_internal_r+0x62c>
 1021914:	8ca7c83a 	sub	r19,r17,r18
 1021918:	04c2f216 	blt	zero,r19,10224e4 <___vfiprintf_internal_r+0x11f4>
 102191c:	8c80010e 	bge	r17,r18,1021924 <___vfiprintf_internal_r+0x634>
 1021920:	9023883a 	mov	r17,r18
 1021924:	da802317 	ldw	r10,140(sp)
 1021928:	5455883a 	add	r10,r10,r17
 102192c:	da802315 	stw	r10,140(sp)
 1021930:	d8001b15 	stw	zero,108(sp)
 1021934:	d811883a 	mov	r8,sp
 1021938:	003ea206 	br	10213c4 <__alt_data_end+0xff0213c4>
 102193c:	a5000814 	ori	r20,r20,32
 1021940:	80c00007 	ldb	r3,0(r16)
 1021944:	003ec906 	br	102146c <__alt_data_end+0xff02146c>
 1021948:	80c00007 	ldb	r3,0(r16)
 102194c:	1b030926 	beq	r3,r12,1022574 <___vfiprintf_internal_r+0x1284>
 1021950:	a5000414 	ori	r20,r20,16
 1021954:	003ec506 	br	102146c <__alt_data_end+0xff02146c>
 1021958:	21003fcc 	andi	r4,r4,255
 102195c:	20035e1e 	bne	r4,zero,10226d8 <___vfiprintf_internal_r+0x13e8>
 1021960:	a080080c 	andi	r2,r20,32
 1021964:	1002a526 	beq	r2,zero,10223fc <___vfiprintf_internal_r+0x110c>
 1021968:	da802217 	ldw	r10,136(sp)
 102196c:	50800017 	ldw	r2,0(r10)
 1021970:	da802317 	ldw	r10,140(sp)
 1021974:	5007d7fa 	srai	r3,r10,31
 1021978:	da802217 	ldw	r10,136(sp)
 102197c:	10c00115 	stw	r3,4(r2)
 1021980:	52800104 	addi	r10,r10,4
 1021984:	da802215 	stw	r10,136(sp)
 1021988:	da802317 	ldw	r10,140(sp)
 102198c:	12800015 	stw	r10,0(r2)
 1021990:	003e8c06 	br	10213c4 <__alt_data_end+0xff0213c4>
 1021994:	21003fcc 	andi	r4,r4,255
 1021998:	2003511e 	bne	r4,zero,10226e0 <___vfiprintf_internal_r+0x13f0>
 102199c:	a080080c 	andi	r2,r20,32
 10219a0:	1000a126 	beq	r2,zero,1021c28 <___vfiprintf_internal_r+0x938>
 10219a4:	da802217 	ldw	r10,136(sp)
 10219a8:	d8001d85 	stb	zero,118(sp)
 10219ac:	50800204 	addi	r2,r10,8
 10219b0:	54800017 	ldw	r18,0(r10)
 10219b4:	54c00117 	ldw	r19,4(r10)
 10219b8:	4802b416 	blt	r9,zero,102248c <___vfiprintf_internal_r+0x119c>
 10219bc:	013fdfc4 	movi	r4,-129
 10219c0:	94c6b03a 	or	r3,r18,r19
 10219c4:	d8802215 	stw	r2,136(sp)
 10219c8:	a128703a 	and	r20,r20,r4
 10219cc:	1800a226 	beq	r3,zero,1021c58 <___vfiprintf_internal_r+0x968>
 10219d0:	0039883a 	mov	fp,zero
 10219d4:	dd401a04 	addi	r21,sp,104
 10219d8:	9006d0fa 	srli	r3,r18,3
 10219dc:	9808977a 	slli	r4,r19,29
 10219e0:	9826d0fa 	srli	r19,r19,3
 10219e4:	948001cc 	andi	r18,r18,7
 10219e8:	90800c04 	addi	r2,r18,48
 10219ec:	ad7fffc4 	addi	r21,r21,-1
 10219f0:	20e4b03a 	or	r18,r4,r3
 10219f4:	a8800005 	stb	r2,0(r21)
 10219f8:	94c6b03a 	or	r3,r18,r19
 10219fc:	183ff61e 	bne	r3,zero,10219d8 <__alt_data_end+0xff0219d8>
 1021a00:	a0c0004c 	andi	r3,r20,1
 1021a04:	18005926 	beq	r3,zero,1021b6c <___vfiprintf_internal_r+0x87c>
 1021a08:	10803fcc 	andi	r2,r2,255
 1021a0c:	1080201c 	xori	r2,r2,128
 1021a10:	10bfe004 	addi	r2,r2,-128
 1021a14:	00c00c04 	movi	r3,48
 1021a18:	10c05426 	beq	r2,r3,1021b6c <___vfiprintf_internal_r+0x87c>
 1021a1c:	da801e17 	ldw	r10,120(sp)
 1021a20:	a8bfffc4 	addi	r2,r21,-1
 1021a24:	a8ffffc5 	stb	r3,-1(r21)
 1021a28:	50a7c83a 	sub	r19,r10,r2
 1021a2c:	102b883a 	mov	r21,r2
 1021a30:	003f2f06 	br	10216f0 <__alt_data_end+0xff0216f0>
 1021a34:	21003fcc 	andi	r4,r4,255
 1021a38:	2003421e 	bne	r4,zero,1022744 <___vfiprintf_internal_r+0x1454>
 1021a3c:	008040f4 	movhi	r2,259
 1021a40:	10ab0404 	addi	r2,r2,-21488
 1021a44:	d8802615 	stw	r2,152(sp)
 1021a48:	a080080c 	andi	r2,r20,32
 1021a4c:	1000aa26 	beq	r2,zero,1021cf8 <___vfiprintf_internal_r+0xa08>
 1021a50:	da802217 	ldw	r10,136(sp)
 1021a54:	54800017 	ldw	r18,0(r10)
 1021a58:	54c00117 	ldw	r19,4(r10)
 1021a5c:	52800204 	addi	r10,r10,8
 1021a60:	da802215 	stw	r10,136(sp)
 1021a64:	a080004c 	andi	r2,r20,1
 1021a68:	1001d226 	beq	r2,zero,10221b4 <___vfiprintf_internal_r+0xec4>
 1021a6c:	94c4b03a 	or	r2,r18,r19
 1021a70:	1002351e 	bne	r2,zero,1022348 <___vfiprintf_internal_r+0x1058>
 1021a74:	d8001d85 	stb	zero,118(sp)
 1021a78:	48022216 	blt	r9,zero,1022304 <___vfiprintf_internal_r+0x1014>
 1021a7c:	00bfdfc4 	movi	r2,-129
 1021a80:	a0a8703a 	and	r20,r20,r2
 1021a84:	003f1506 	br	10216dc <__alt_data_end+0xff0216dc>
 1021a88:	da802217 	ldw	r10,136(sp)
 1021a8c:	04800044 	movi	r18,1
 1021a90:	d8001d85 	stb	zero,118(sp)
 1021a94:	50800017 	ldw	r2,0(r10)
 1021a98:	52800104 	addi	r10,r10,4
 1021a9c:	da802215 	stw	r10,136(sp)
 1021aa0:	d8801005 	stb	r2,64(sp)
 1021aa4:	9027883a 	mov	r19,r18
 1021aa8:	dd401004 	addi	r21,sp,64
 1021aac:	0013883a 	mov	r9,zero
 1021ab0:	003f1706 	br	1021710 <__alt_data_end+0xff021710>
 1021ab4:	21003fcc 	andi	r4,r4,255
 1021ab8:	2003201e 	bne	r4,zero,102273c <___vfiprintf_internal_r+0x144c>
 1021abc:	a080080c 	andi	r2,r20,32
 1021ac0:	10004b26 	beq	r2,zero,1021bf0 <___vfiprintf_internal_r+0x900>
 1021ac4:	da802217 	ldw	r10,136(sp)
 1021ac8:	50800117 	ldw	r2,4(r10)
 1021acc:	54800017 	ldw	r18,0(r10)
 1021ad0:	52800204 	addi	r10,r10,8
 1021ad4:	da802215 	stw	r10,136(sp)
 1021ad8:	1027883a 	mov	r19,r2
 1021adc:	10022c16 	blt	r2,zero,1022390 <___vfiprintf_internal_r+0x10a0>
 1021ae0:	df001d83 	ldbu	fp,118(sp)
 1021ae4:	48007216 	blt	r9,zero,1021cb0 <___vfiprintf_internal_r+0x9c0>
 1021ae8:	00ffdfc4 	movi	r3,-129
 1021aec:	94c4b03a 	or	r2,r18,r19
 1021af0:	a0e8703a 	and	r20,r20,r3
 1021af4:	1000cc26 	beq	r2,zero,1021e28 <___vfiprintf_internal_r+0xb38>
 1021af8:	98021026 	beq	r19,zero,102233c <___vfiprintf_internal_r+0x104c>
 1021afc:	dc402415 	stw	r17,144(sp)
 1021b00:	dc002515 	stw	r16,148(sp)
 1021b04:	9823883a 	mov	r17,r19
 1021b08:	9021883a 	mov	r16,r18
 1021b0c:	dd401a04 	addi	r21,sp,104
 1021b10:	4825883a 	mov	r18,r9
 1021b14:	4027883a 	mov	r19,r8
 1021b18:	8009883a 	mov	r4,r16
 1021b1c:	880b883a 	mov	r5,r17
 1021b20:	01800284 	movi	r6,10
 1021b24:	000f883a 	mov	r7,zero
 1021b28:	10236d00 	call	10236d0 <__umoddi3>
 1021b2c:	10800c04 	addi	r2,r2,48
 1021b30:	ad7fffc4 	addi	r21,r21,-1
 1021b34:	8009883a 	mov	r4,r16
 1021b38:	880b883a 	mov	r5,r17
 1021b3c:	a8800005 	stb	r2,0(r21)
 1021b40:	01800284 	movi	r6,10
 1021b44:	000f883a 	mov	r7,zero
 1021b48:	10231580 	call	1023158 <__udivdi3>
 1021b4c:	1021883a 	mov	r16,r2
 1021b50:	10c4b03a 	or	r2,r2,r3
 1021b54:	1823883a 	mov	r17,r3
 1021b58:	103fef1e 	bne	r2,zero,1021b18 <__alt_data_end+0xff021b18>
 1021b5c:	dc402417 	ldw	r17,144(sp)
 1021b60:	dc002517 	ldw	r16,148(sp)
 1021b64:	9013883a 	mov	r9,r18
 1021b68:	9811883a 	mov	r8,r19
 1021b6c:	da801e17 	ldw	r10,120(sp)
 1021b70:	5567c83a 	sub	r19,r10,r21
 1021b74:	003ede06 	br	10216f0 <__alt_data_end+0xff0216f0>
 1021b78:	38803fcc 	andi	r2,r7,255
 1021b7c:	1080201c 	xori	r2,r2,128
 1021b80:	10bfe004 	addi	r2,r2,-128
 1021b84:	1002371e 	bne	r2,zero,1022464 <___vfiprintf_internal_r+0x1174>
 1021b88:	01000044 	movi	r4,1
 1021b8c:	01c00804 	movi	r7,32
 1021b90:	80c00007 	ldb	r3,0(r16)
 1021b94:	003e3506 	br	102146c <__alt_data_end+0xff02146c>
 1021b98:	a5000054 	ori	r20,r20,1
 1021b9c:	80c00007 	ldb	r3,0(r16)
 1021ba0:	003e3206 	br	102146c <__alt_data_end+0xff02146c>
 1021ba4:	a5002014 	ori	r20,r20,128
 1021ba8:	80c00007 	ldb	r3,0(r16)
 1021bac:	003e2f06 	br	102146c <__alt_data_end+0xff02146c>
 1021bb0:	8015883a 	mov	r10,r16
 1021bb4:	0023883a 	mov	r17,zero
 1021bb8:	18bff404 	addi	r2,r3,-48
 1021bbc:	50c00007 	ldb	r3,0(r10)
 1021bc0:	8c4002a4 	muli	r17,r17,10
 1021bc4:	84000044 	addi	r16,r16,1
 1021bc8:	8015883a 	mov	r10,r16
 1021bcc:	1463883a 	add	r17,r2,r17
 1021bd0:	18bff404 	addi	r2,r3,-48
 1021bd4:	30bff92e 	bgeu	r6,r2,1021bbc <__alt_data_end+0xff021bbc>
 1021bd8:	003e2506 	br	1021470 <__alt_data_end+0xff021470>
 1021bdc:	21003fcc 	andi	r4,r4,255
 1021be0:	2002d41e 	bne	r4,zero,1022734 <___vfiprintf_internal_r+0x1444>
 1021be4:	a5000414 	ori	r20,r20,16
 1021be8:	a080080c 	andi	r2,r20,32
 1021bec:	103fb51e 	bne	r2,zero,1021ac4 <__alt_data_end+0xff021ac4>
 1021bf0:	a080040c 	andi	r2,r20,16
 1021bf4:	1001f826 	beq	r2,zero,10223d8 <___vfiprintf_internal_r+0x10e8>
 1021bf8:	da802217 	ldw	r10,136(sp)
 1021bfc:	54800017 	ldw	r18,0(r10)
 1021c00:	52800104 	addi	r10,r10,4
 1021c04:	da802215 	stw	r10,136(sp)
 1021c08:	9027d7fa 	srai	r19,r18,31
 1021c0c:	9805883a 	mov	r2,r19
 1021c10:	003fb206 	br	1021adc <__alt_data_end+0xff021adc>
 1021c14:	21003fcc 	andi	r4,r4,255
 1021c18:	2002c41e 	bne	r4,zero,102272c <___vfiprintf_internal_r+0x143c>
 1021c1c:	a5000414 	ori	r20,r20,16
 1021c20:	a080080c 	andi	r2,r20,32
 1021c24:	103f5f1e 	bne	r2,zero,10219a4 <__alt_data_end+0xff0219a4>
 1021c28:	a080040c 	andi	r2,r20,16
 1021c2c:	10020f26 	beq	r2,zero,102246c <___vfiprintf_internal_r+0x117c>
 1021c30:	da802217 	ldw	r10,136(sp)
 1021c34:	d8001d85 	stb	zero,118(sp)
 1021c38:	0027883a 	mov	r19,zero
 1021c3c:	50800104 	addi	r2,r10,4
 1021c40:	54800017 	ldw	r18,0(r10)
 1021c44:	48021116 	blt	r9,zero,102248c <___vfiprintf_internal_r+0x119c>
 1021c48:	00ffdfc4 	movi	r3,-129
 1021c4c:	d8802215 	stw	r2,136(sp)
 1021c50:	a0e8703a 	and	r20,r20,r3
 1021c54:	903f5e1e 	bne	r18,zero,10219d0 <__alt_data_end+0xff0219d0>
 1021c58:	0039883a 	mov	fp,zero
 1021c5c:	4802a626 	beq	r9,zero,10226f8 <___vfiprintf_internal_r+0x1408>
 1021c60:	0025883a 	mov	r18,zero
 1021c64:	0027883a 	mov	r19,zero
 1021c68:	003f5a06 	br	10219d4 <__alt_data_end+0xff0219d4>
 1021c6c:	21003fcc 	andi	r4,r4,255
 1021c70:	20029f1e 	bne	r4,zero,10226f0 <___vfiprintf_internal_r+0x1400>
 1021c74:	a5000414 	ori	r20,r20,16
 1021c78:	a080080c 	andi	r2,r20,32
 1021c7c:	10005e1e 	bne	r2,zero,1021df8 <___vfiprintf_internal_r+0xb08>
 1021c80:	a080040c 	andi	r2,r20,16
 1021c84:	1001a21e 	bne	r2,zero,1022310 <___vfiprintf_internal_r+0x1020>
 1021c88:	a080100c 	andi	r2,r20,64
 1021c8c:	d8001d85 	stb	zero,118(sp)
 1021c90:	da802217 	ldw	r10,136(sp)
 1021c94:	1002231e 	bne	r2,zero,1022524 <___vfiprintf_internal_r+0x1234>
 1021c98:	50800104 	addi	r2,r10,4
 1021c9c:	54800017 	ldw	r18,0(r10)
 1021ca0:	0027883a 	mov	r19,zero
 1021ca4:	4801a00e 	bge	r9,zero,1022328 <___vfiprintf_internal_r+0x1038>
 1021ca8:	d8802215 	stw	r2,136(sp)
 1021cac:	0039883a 	mov	fp,zero
 1021cb0:	94c4b03a 	or	r2,r18,r19
 1021cb4:	103f901e 	bne	r2,zero,1021af8 <__alt_data_end+0xff021af8>
 1021cb8:	00800044 	movi	r2,1
 1021cbc:	10803fcc 	andi	r2,r2,255
 1021cc0:	00c00044 	movi	r3,1
 1021cc4:	10c05926 	beq	r2,r3,1021e2c <___vfiprintf_internal_r+0xb3c>
 1021cc8:	00c00084 	movi	r3,2
 1021ccc:	10ffe41e 	bne	r2,r3,1021c60 <__alt_data_end+0xff021c60>
 1021cd0:	0025883a 	mov	r18,zero
 1021cd4:	0027883a 	mov	r19,zero
 1021cd8:	00013d06 	br	10221d0 <___vfiprintf_internal_r+0xee0>
 1021cdc:	21003fcc 	andi	r4,r4,255
 1021ce0:	2002811e 	bne	r4,zero,10226e8 <___vfiprintf_internal_r+0x13f8>
 1021ce4:	008040f4 	movhi	r2,259
 1021ce8:	10aaff04 	addi	r2,r2,-21508
 1021cec:	d8802615 	stw	r2,152(sp)
 1021cf0:	a080080c 	andi	r2,r20,32
 1021cf4:	103f561e 	bne	r2,zero,1021a50 <__alt_data_end+0xff021a50>
 1021cf8:	a080040c 	andi	r2,r20,16
 1021cfc:	1001d126 	beq	r2,zero,1022444 <___vfiprintf_internal_r+0x1154>
 1021d00:	da802217 	ldw	r10,136(sp)
 1021d04:	0027883a 	mov	r19,zero
 1021d08:	54800017 	ldw	r18,0(r10)
 1021d0c:	52800104 	addi	r10,r10,4
 1021d10:	da802215 	stw	r10,136(sp)
 1021d14:	003f5306 	br	1021a64 <__alt_data_end+0xff021a64>
 1021d18:	da802217 	ldw	r10,136(sp)
 1021d1c:	d8001d85 	stb	zero,118(sp)
 1021d20:	55400017 	ldw	r21,0(r10)
 1021d24:	50c00104 	addi	r3,r10,4
 1021d28:	a8024226 	beq	r21,zero,1022634 <___vfiprintf_internal_r+0x1344>
 1021d2c:	48021816 	blt	r9,zero,1022590 <___vfiprintf_internal_r+0x12a0>
 1021d30:	480d883a 	mov	r6,r9
 1021d34:	000b883a 	mov	r5,zero
 1021d38:	a809883a 	mov	r4,r21
 1021d3c:	d8c02a15 	stw	r3,168(sp)
 1021d40:	da002b15 	stw	r8,172(sp)
 1021d44:	da402c15 	stw	r9,176(sp)
 1021d48:	101e1280 	call	101e128 <memchr>
 1021d4c:	d8c02a17 	ldw	r3,168(sp)
 1021d50:	da002b17 	ldw	r8,172(sp)
 1021d54:	da402c17 	ldw	r9,176(sp)
 1021d58:	10024826 	beq	r2,zero,102267c <___vfiprintf_internal_r+0x138c>
 1021d5c:	1567c83a 	sub	r19,r2,r21
 1021d60:	df001d83 	ldbu	fp,118(sp)
 1021d64:	d8c02215 	stw	r3,136(sp)
 1021d68:	0013883a 	mov	r9,zero
 1021d6c:	003e6006 	br	10216f0 <__alt_data_end+0xff0216f0>
 1021d70:	21003fcc 	andi	r4,r4,255
 1021d74:	203fc026 	beq	r4,zero,1021c78 <__alt_data_end+0xff021c78>
 1021d78:	d9c01d85 	stb	r7,118(sp)
 1021d7c:	003fbe06 	br	1021c78 <__alt_data_end+0xff021c78>
 1021d80:	da802217 	ldw	r10,136(sp)
 1021d84:	54400017 	ldw	r17,0(r10)
 1021d88:	50800104 	addi	r2,r10,4
 1021d8c:	883e3b16 	blt	r17,zero,102167c <__alt_data_end+0xff02167c>
 1021d90:	d8802215 	stw	r2,136(sp)
 1021d94:	80c00007 	ldb	r3,0(r16)
 1021d98:	003db406 	br	102146c <__alt_data_end+0xff02146c>
 1021d9c:	01000044 	movi	r4,1
 1021da0:	01c00ac4 	movi	r7,43
 1021da4:	80c00007 	ldb	r3,0(r16)
 1021da8:	003db006 	br	102146c <__alt_data_end+0xff02146c>
 1021dac:	80c00007 	ldb	r3,0(r16)
 1021db0:	82800044 	addi	r10,r16,1
 1021db4:	1b423c26 	beq	r3,r13,10226a8 <___vfiprintf_internal_r+0x13b8>
 1021db8:	18bff404 	addi	r2,r3,-48
 1021dbc:	0013883a 	mov	r9,zero
 1021dc0:	30822b36 	bltu	r6,r2,1022670 <___vfiprintf_internal_r+0x1380>
 1021dc4:	50c00007 	ldb	r3,0(r10)
 1021dc8:	4a4002a4 	muli	r9,r9,10
 1021dcc:	54000044 	addi	r16,r10,1
 1021dd0:	8015883a 	mov	r10,r16
 1021dd4:	4893883a 	add	r9,r9,r2
 1021dd8:	18bff404 	addi	r2,r3,-48
 1021ddc:	30bff92e 	bgeu	r6,r2,1021dc4 <__alt_data_end+0xff021dc4>
 1021de0:	483da30e 	bge	r9,zero,1021470 <__alt_data_end+0xff021470>
 1021de4:	027fffc4 	movi	r9,-1
 1021de8:	003da106 	br	1021470 <__alt_data_end+0xff021470>
 1021dec:	a5001014 	ori	r20,r20,64
 1021df0:	80c00007 	ldb	r3,0(r16)
 1021df4:	003d9d06 	br	102146c <__alt_data_end+0xff02146c>
 1021df8:	da802217 	ldw	r10,136(sp)
 1021dfc:	d8001d85 	stb	zero,118(sp)
 1021e00:	50c00204 	addi	r3,r10,8
 1021e04:	54800017 	ldw	r18,0(r10)
 1021e08:	54c00117 	ldw	r19,4(r10)
 1021e0c:	4801ca16 	blt	r9,zero,1022538 <___vfiprintf_internal_r+0x1248>
 1021e10:	013fdfc4 	movi	r4,-129
 1021e14:	94c4b03a 	or	r2,r18,r19
 1021e18:	d8c02215 	stw	r3,136(sp)
 1021e1c:	a128703a 	and	r20,r20,r4
 1021e20:	0039883a 	mov	fp,zero
 1021e24:	103f341e 	bne	r2,zero,1021af8 <__alt_data_end+0xff021af8>
 1021e28:	483e2e26 	beq	r9,zero,10216e4 <__alt_data_end+0xff0216e4>
 1021e2c:	0025883a 	mov	r18,zero
 1021e30:	94800c04 	addi	r18,r18,48
 1021e34:	dc8019c5 	stb	r18,103(sp)
 1021e38:	dcc02717 	ldw	r19,156(sp)
 1021e3c:	dd4019c4 	addi	r21,sp,103
 1021e40:	003e2b06 	br	10216f0 <__alt_data_end+0xff0216f0>
 1021e44:	21003fcc 	andi	r4,r4,255
 1021e48:	2002361e 	bne	r4,zero,1022724 <___vfiprintf_internal_r+0x1434>
 1021e4c:	1801c126 	beq	r3,zero,1022554 <___vfiprintf_internal_r+0x1264>
 1021e50:	04800044 	movi	r18,1
 1021e54:	d8c01005 	stb	r3,64(sp)
 1021e58:	d8001d85 	stb	zero,118(sp)
 1021e5c:	9027883a 	mov	r19,r18
 1021e60:	dd401004 	addi	r21,sp,64
 1021e64:	003f1106 	br	1021aac <__alt_data_end+0xff021aac>
 1021e68:	d9402117 	ldw	r5,132(sp)
 1021e6c:	d9002017 	ldw	r4,128(sp)
 1021e70:	d9801a04 	addi	r6,sp,104
 1021e74:	d9c02b15 	stw	r7,172(sp)
 1021e78:	dbc02a15 	stw	r15,168(sp)
 1021e7c:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1021e80:	d9c02b17 	ldw	r7,172(sp)
 1021e84:	dbc02a17 	ldw	r15,168(sp)
 1021e88:	10006d1e 	bne	r2,zero,1022040 <___vfiprintf_internal_r+0xd50>
 1021e8c:	d9801b17 	ldw	r6,108(sp)
 1021e90:	d8801c17 	ldw	r2,112(sp)
 1021e94:	d811883a 	mov	r8,sp
 1021e98:	31400044 	addi	r5,r6,1
 1021e9c:	003e3306 	br	102176c <__alt_data_end+0xff02176c>
 1021ea0:	d9401b17 	ldw	r5,108(sp)
 1021ea4:	d8801c17 	ldw	r2,112(sp)
 1021ea8:	29000044 	addi	r4,r5,1
 1021eac:	d8c01d87 	ldb	r3,118(sp)
 1021eb0:	183e4d26 	beq	r3,zero,10217e8 <__alt_data_end+0xff0217e8>
 1021eb4:	00c00044 	movi	r3,1
 1021eb8:	d9401d84 	addi	r5,sp,118
 1021ebc:	10c5883a 	add	r2,r2,r3
 1021ec0:	41400015 	stw	r5,0(r8)
 1021ec4:	40c00115 	stw	r3,4(r8)
 1021ec8:	d8801c15 	stw	r2,112(sp)
 1021ecc:	d9001b15 	stw	r4,108(sp)
 1021ed0:	014001c4 	movi	r5,7
 1021ed4:	2900a90e 	bge	r5,r4,102217c <___vfiprintf_internal_r+0xe8c>
 1021ed8:	1000da1e 	bne	r2,zero,1022244 <___vfiprintf_internal_r+0xf54>
 1021edc:	7000ab1e 	bne	r14,zero,102218c <___vfiprintf_internal_r+0xe9c>
 1021ee0:	000b883a 	mov	r5,zero
 1021ee4:	1809883a 	mov	r4,r3
 1021ee8:	d811883a 	mov	r8,sp
 1021eec:	00c02004 	movi	r3,128
 1021ef0:	e0fe4d26 	beq	fp,r3,1021828 <__alt_data_end+0xff021828>
 1021ef4:	4cf9c83a 	sub	fp,r9,r19
 1021ef8:	073e7b0e 	bge	zero,fp,10218e8 <__alt_data_end+0xff0218e8>
 1021efc:	01c00404 	movi	r7,16
 1021f00:	3f01900e 	bge	r7,fp,1022544 <___vfiprintf_internal_r+0x1254>
 1021f04:	00c040f4 	movhi	r3,259
 1021f08:	18eb7404 	addi	r3,r3,-21040
 1021f0c:	d8c02415 	stw	r3,144(sp)
 1021f10:	034001c4 	movi	r13,7
 1021f14:	00000506 	br	1021f2c <___vfiprintf_internal_r+0xc3c>
 1021f18:	29000084 	addi	r4,r5,2
 1021f1c:	42000204 	addi	r8,r8,8
 1021f20:	180b883a 	mov	r5,r3
 1021f24:	e73ffc04 	addi	fp,fp,-16
 1021f28:	3f000d0e 	bge	r7,fp,1021f60 <___vfiprintf_internal_r+0xc70>
 1021f2c:	10800404 	addi	r2,r2,16
 1021f30:	28c00044 	addi	r3,r5,1
 1021f34:	45c00015 	stw	r23,0(r8)
 1021f38:	41c00115 	stw	r7,4(r8)
 1021f3c:	d8801c15 	stw	r2,112(sp)
 1021f40:	d8c01b15 	stw	r3,108(sp)
 1021f44:	68fff40e 	bge	r13,r3,1021f18 <__alt_data_end+0xff021f18>
 1021f48:	1000101e 	bne	r2,zero,1021f8c <___vfiprintf_internal_r+0xc9c>
 1021f4c:	e73ffc04 	addi	fp,fp,-16
 1021f50:	01000044 	movi	r4,1
 1021f54:	000b883a 	mov	r5,zero
 1021f58:	d811883a 	mov	r8,sp
 1021f5c:	3f3ff316 	blt	r7,fp,1021f2c <__alt_data_end+0xff021f2c>
 1021f60:	da802417 	ldw	r10,144(sp)
 1021f64:	1705883a 	add	r2,r2,fp
 1021f68:	47000115 	stw	fp,4(r8)
 1021f6c:	42800015 	stw	r10,0(r8)
 1021f70:	d8801c15 	stw	r2,112(sp)
 1021f74:	d9001b15 	stw	r4,108(sp)
 1021f78:	00c001c4 	movi	r3,7
 1021f7c:	19003616 	blt	r3,r4,1022058 <___vfiprintf_internal_r+0xd68>
 1021f80:	42000204 	addi	r8,r8,8
 1021f84:	21000044 	addi	r4,r4,1
 1021f88:	003e5706 	br	10218e8 <__alt_data_end+0xff0218e8>
 1021f8c:	d9402117 	ldw	r5,132(sp)
 1021f90:	d9002017 	ldw	r4,128(sp)
 1021f94:	d9801a04 	addi	r6,sp,104
 1021f98:	d9c02b15 	stw	r7,172(sp)
 1021f9c:	db402a15 	stw	r13,168(sp)
 1021fa0:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1021fa4:	d9c02b17 	ldw	r7,172(sp)
 1021fa8:	db402a17 	ldw	r13,168(sp)
 1021fac:	1000241e 	bne	r2,zero,1022040 <___vfiprintf_internal_r+0xd50>
 1021fb0:	d9401b17 	ldw	r5,108(sp)
 1021fb4:	d8801c17 	ldw	r2,112(sp)
 1021fb8:	d811883a 	mov	r8,sp
 1021fbc:	29000044 	addi	r4,r5,1
 1021fc0:	003fd806 	br	1021f24 <__alt_data_end+0xff021f24>
 1021fc4:	d9401b17 	ldw	r5,108(sp)
 1021fc8:	00c040f4 	movhi	r3,259
 1021fcc:	18eb7804 	addi	r3,r3,-21024
 1021fd0:	d8c02415 	stw	r3,144(sp)
 1021fd4:	29400044 	addi	r5,r5,1
 1021fd8:	d8c02417 	ldw	r3,144(sp)
 1021fdc:	14c5883a 	add	r2,r2,r19
 1021fe0:	44c00115 	stw	r19,4(r8)
 1021fe4:	40c00015 	stw	r3,0(r8)
 1021fe8:	d8801c15 	stw	r2,112(sp)
 1021fec:	d9401b15 	stw	r5,108(sp)
 1021ff0:	00c001c4 	movi	r3,7
 1021ff4:	1940070e 	bge	r3,r5,1022014 <___vfiprintf_internal_r+0xd24>
 1021ff8:	103e4826 	beq	r2,zero,102191c <__alt_data_end+0xff02191c>
 1021ffc:	d9402117 	ldw	r5,132(sp)
 1022000:	d9002017 	ldw	r4,128(sp)
 1022004:	d9801a04 	addi	r6,sp,104
 1022008:	10211dc0 	call	10211dc <__sprint_r.part.0>
 102200c:	10000c1e 	bne	r2,zero,1022040 <___vfiprintf_internal_r+0xd50>
 1022010:	d8801c17 	ldw	r2,112(sp)
 1022014:	8c80010e 	bge	r17,r18,102201c <___vfiprintf_internal_r+0xd2c>
 1022018:	9023883a 	mov	r17,r18
 102201c:	da802317 	ldw	r10,140(sp)
 1022020:	5455883a 	add	r10,r10,r17
 1022024:	da802315 	stw	r10,140(sp)
 1022028:	103e4126 	beq	r2,zero,1021930 <__alt_data_end+0xff021930>
 102202c:	d9402117 	ldw	r5,132(sp)
 1022030:	d9002017 	ldw	r4,128(sp)
 1022034:	d9801a04 	addi	r6,sp,104
 1022038:	10211dc0 	call	10211dc <__sprint_r.part.0>
 102203c:	103e3c26 	beq	r2,zero,1021930 <__alt_data_end+0xff021930>
 1022040:	dd002117 	ldw	r20,132(sp)
 1022044:	a080030b 	ldhu	r2,12(r20)
 1022048:	1080100c 	andi	r2,r2,64
 102204c:	1001231e 	bne	r2,zero,10224dc <___vfiprintf_internal_r+0x11ec>
 1022050:	d8802317 	ldw	r2,140(sp)
 1022054:	003d7b06 	br	1021644 <__alt_data_end+0xff021644>
 1022058:	1000991e 	bne	r2,zero,10222c0 <___vfiprintf_internal_r+0xfd0>
 102205c:	00c00044 	movi	r3,1
 1022060:	9805883a 	mov	r2,r19
 1022064:	dd400015 	stw	r21,0(sp)
 1022068:	dcc00115 	stw	r19,4(sp)
 102206c:	dcc01c15 	stw	r19,112(sp)
 1022070:	d8c01b15 	stw	r3,108(sp)
 1022074:	d811883a 	mov	r8,sp
 1022078:	42000204 	addi	r8,r8,8
 102207c:	a2c0010c 	andi	r11,r20,4
 1022080:	583fe426 	beq	r11,zero,1022014 <__alt_data_end+0xff022014>
 1022084:	8ca7c83a 	sub	r19,r17,r18
 1022088:	04ffe20e 	bge	zero,r19,1022014 <__alt_data_end+0xff022014>
 102208c:	01c00404 	movi	r7,16
 1022090:	3cffcc0e 	bge	r7,r19,1021fc4 <__alt_data_end+0xff021fc4>
 1022094:	028040f4 	movhi	r10,259
 1022098:	52ab7804 	addi	r10,r10,-21024
 102209c:	d9001b17 	ldw	r4,108(sp)
 10220a0:	da802415 	stw	r10,144(sp)
 10220a4:	382b883a 	mov	r21,r7
 10220a8:	050001c4 	movi	r20,7
 10220ac:	df002017 	ldw	fp,128(sp)
 10220b0:	00000506 	br	10220c8 <___vfiprintf_internal_r+0xdd8>
 10220b4:	21400084 	addi	r5,r4,2
 10220b8:	42000204 	addi	r8,r8,8
 10220bc:	1809883a 	mov	r4,r3
 10220c0:	9cfffc04 	addi	r19,r19,-16
 10220c4:	acffc40e 	bge	r21,r19,1021fd8 <__alt_data_end+0xff021fd8>
 10220c8:	10800404 	addi	r2,r2,16
 10220cc:	20c00044 	addi	r3,r4,1
 10220d0:	45800015 	stw	r22,0(r8)
 10220d4:	45400115 	stw	r21,4(r8)
 10220d8:	d8801c15 	stw	r2,112(sp)
 10220dc:	d8c01b15 	stw	r3,108(sp)
 10220e0:	a0fff40e 	bge	r20,r3,10220b4 <__alt_data_end+0xff0220b4>
 10220e4:	1000041e 	bne	r2,zero,10220f8 <___vfiprintf_internal_r+0xe08>
 10220e8:	01400044 	movi	r5,1
 10220ec:	0009883a 	mov	r4,zero
 10220f0:	d811883a 	mov	r8,sp
 10220f4:	003ff206 	br	10220c0 <__alt_data_end+0xff0220c0>
 10220f8:	d9402117 	ldw	r5,132(sp)
 10220fc:	d9801a04 	addi	r6,sp,104
 1022100:	e009883a 	mov	r4,fp
 1022104:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022108:	103fcd1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 102210c:	d9001b17 	ldw	r4,108(sp)
 1022110:	d8801c17 	ldw	r2,112(sp)
 1022114:	d811883a 	mov	r8,sp
 1022118:	21400044 	addi	r5,r4,1
 102211c:	003fe806 	br	10220c0 <__alt_data_end+0xff0220c0>
 1022120:	d9402117 	ldw	r5,132(sp)
 1022124:	d9002017 	ldw	r4,128(sp)
 1022128:	d9801a04 	addi	r6,sp,104
 102212c:	d9c02b15 	stw	r7,172(sp)
 1022130:	db402a15 	stw	r13,168(sp)
 1022134:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022138:	d9c02b17 	ldw	r7,172(sp)
 102213c:	db402a17 	ldw	r13,168(sp)
 1022140:	103fbf1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 1022144:	d9401b17 	ldw	r5,108(sp)
 1022148:	d8801c17 	ldw	r2,112(sp)
 102214c:	d811883a 	mov	r8,sp
 1022150:	29800044 	addi	r6,r5,1
 1022154:	003dc406 	br	1021868 <__alt_data_end+0xff021868>
 1022158:	1000d21e 	bne	r2,zero,10224a4 <___vfiprintf_internal_r+0x11b4>
 102215c:	d8c01d87 	ldb	r3,118(sp)
 1022160:	18009526 	beq	r3,zero,10223b8 <___vfiprintf_internal_r+0x10c8>
 1022164:	00800044 	movi	r2,1
 1022168:	d8c01d84 	addi	r3,sp,118
 102216c:	1009883a 	mov	r4,r2
 1022170:	d8c00015 	stw	r3,0(sp)
 1022174:	d8800115 	stw	r2,4(sp)
 1022178:	d811883a 	mov	r8,sp
 102217c:	200b883a 	mov	r5,r4
 1022180:	42000204 	addi	r8,r8,8
 1022184:	21000044 	addi	r4,r4,1
 1022188:	003d9706 	br	10217e8 <__alt_data_end+0xff0217e8>
 102218c:	d9001d04 	addi	r4,sp,116
 1022190:	00800084 	movi	r2,2
 1022194:	d9000015 	stw	r4,0(sp)
 1022198:	d8800115 	stw	r2,4(sp)
 102219c:	1809883a 	mov	r4,r3
 10221a0:	d811883a 	mov	r8,sp
 10221a4:	200b883a 	mov	r5,r4
 10221a8:	42000204 	addi	r8,r8,8
 10221ac:	21000044 	addi	r4,r4,1
 10221b0:	003f4e06 	br	1021eec <__alt_data_end+0xff021eec>
 10221b4:	d8001d85 	stb	zero,118(sp)
 10221b8:	48005016 	blt	r9,zero,10222fc <___vfiprintf_internal_r+0x100c>
 10221bc:	00ffdfc4 	movi	r3,-129
 10221c0:	94c4b03a 	or	r2,r18,r19
 10221c4:	a0e8703a 	and	r20,r20,r3
 10221c8:	103d4426 	beq	r2,zero,10216dc <__alt_data_end+0xff0216dc>
 10221cc:	0039883a 	mov	fp,zero
 10221d0:	d9002617 	ldw	r4,152(sp)
 10221d4:	dd401a04 	addi	r21,sp,104
 10221d8:	908003cc 	andi	r2,r18,15
 10221dc:	9806973a 	slli	r3,r19,28
 10221e0:	2085883a 	add	r2,r4,r2
 10221e4:	9024d13a 	srli	r18,r18,4
 10221e8:	10800003 	ldbu	r2,0(r2)
 10221ec:	9826d13a 	srli	r19,r19,4
 10221f0:	ad7fffc4 	addi	r21,r21,-1
 10221f4:	1ca4b03a 	or	r18,r3,r18
 10221f8:	a8800005 	stb	r2,0(r21)
 10221fc:	94c4b03a 	or	r2,r18,r19
 1022200:	103ff51e 	bne	r2,zero,10221d8 <__alt_data_end+0xff0221d8>
 1022204:	003e5906 	br	1021b6c <__alt_data_end+0xff021b6c>
 1022208:	d9402117 	ldw	r5,132(sp)
 102220c:	d9002017 	ldw	r4,128(sp)
 1022210:	d9801a04 	addi	r6,sp,104
 1022214:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022218:	103f891e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 102221c:	d8801c17 	ldw	r2,112(sp)
 1022220:	d811883a 	mov	r8,sp
 1022224:	003f9506 	br	102207c <__alt_data_end+0xff02207c>
 1022228:	d9402117 	ldw	r5,132(sp)
 102222c:	d9002017 	ldw	r4,128(sp)
 1022230:	d9801a04 	addi	r6,sp,104
 1022234:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022238:	103f811e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 102223c:	d811883a 	mov	r8,sp
 1022240:	003ced06 	br	10215f8 <__alt_data_end+0xff0215f8>
 1022244:	d9402117 	ldw	r5,132(sp)
 1022248:	d9002017 	ldw	r4,128(sp)
 102224c:	d9801a04 	addi	r6,sp,104
 1022250:	da402c15 	stw	r9,176(sp)
 1022254:	db802a15 	stw	r14,168(sp)
 1022258:	10211dc0 	call	10211dc <__sprint_r.part.0>
 102225c:	da402c17 	ldw	r9,176(sp)
 1022260:	db802a17 	ldw	r14,168(sp)
 1022264:	103f761e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 1022268:	d9401b17 	ldw	r5,108(sp)
 102226c:	d8801c17 	ldw	r2,112(sp)
 1022270:	d811883a 	mov	r8,sp
 1022274:	29000044 	addi	r4,r5,1
 1022278:	003d5b06 	br	10217e8 <__alt_data_end+0xff0217e8>
 102227c:	d9402117 	ldw	r5,132(sp)
 1022280:	d9002017 	ldw	r4,128(sp)
 1022284:	d9801a04 	addi	r6,sp,104
 1022288:	da402c15 	stw	r9,176(sp)
 102228c:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022290:	da402c17 	ldw	r9,176(sp)
 1022294:	103f6a1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 1022298:	d9401b17 	ldw	r5,108(sp)
 102229c:	d8801c17 	ldw	r2,112(sp)
 10222a0:	d811883a 	mov	r8,sp
 10222a4:	29000044 	addi	r4,r5,1
 10222a8:	003f1006 	br	1021eec <__alt_data_end+0xff021eec>
 10222ac:	1000c31e 	bne	r2,zero,10225bc <___vfiprintf_internal_r+0x12cc>
 10222b0:	01000044 	movi	r4,1
 10222b4:	000b883a 	mov	r5,zero
 10222b8:	d811883a 	mov	r8,sp
 10222bc:	003f0d06 	br	1021ef4 <__alt_data_end+0xff021ef4>
 10222c0:	d9402117 	ldw	r5,132(sp)
 10222c4:	d9002017 	ldw	r4,128(sp)
 10222c8:	d9801a04 	addi	r6,sp,104
 10222cc:	10211dc0 	call	10211dc <__sprint_r.part.0>
 10222d0:	103f5b1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 10222d4:	d9001b17 	ldw	r4,108(sp)
 10222d8:	d8801c17 	ldw	r2,112(sp)
 10222dc:	d811883a 	mov	r8,sp
 10222e0:	21000044 	addi	r4,r4,1
 10222e4:	003d8006 	br	10218e8 <__alt_data_end+0xff0218e8>
 10222e8:	010040f4 	movhi	r4,259
 10222ec:	212b0404 	addi	r4,r4,-21488
 10222f0:	d9002615 	stw	r4,152(sp)
 10222f4:	d8c02215 	stw	r3,136(sp)
 10222f8:	1029883a 	mov	r20,r2
 10222fc:	94c4b03a 	or	r2,r18,r19
 1022300:	103fb21e 	bne	r2,zero,10221cc <__alt_data_end+0xff0221cc>
 1022304:	0039883a 	mov	fp,zero
 1022308:	00800084 	movi	r2,2
 102230c:	003e6b06 	br	1021cbc <__alt_data_end+0xff021cbc>
 1022310:	da802217 	ldw	r10,136(sp)
 1022314:	d8001d85 	stb	zero,118(sp)
 1022318:	0027883a 	mov	r19,zero
 102231c:	50800104 	addi	r2,r10,4
 1022320:	54800017 	ldw	r18,0(r10)
 1022324:	483e6016 	blt	r9,zero,1021ca8 <__alt_data_end+0xff021ca8>
 1022328:	00ffdfc4 	movi	r3,-129
 102232c:	d8802215 	stw	r2,136(sp)
 1022330:	a0e8703a 	and	r20,r20,r3
 1022334:	0039883a 	mov	fp,zero
 1022338:	903ebb26 	beq	r18,zero,1021e28 <__alt_data_end+0xff021e28>
 102233c:	00800244 	movi	r2,9
 1022340:	14bdee36 	bltu	r2,r18,1021afc <__alt_data_end+0xff021afc>
 1022344:	003eba06 	br	1021e30 <__alt_data_end+0xff021e30>
 1022348:	00800c04 	movi	r2,48
 102234c:	d8c01d45 	stb	r3,117(sp)
 1022350:	d8801d05 	stb	r2,116(sp)
 1022354:	d8001d85 	stb	zero,118(sp)
 1022358:	a0c00094 	ori	r3,r20,2
 102235c:	4800a916 	blt	r9,zero,1022604 <___vfiprintf_internal_r+0x1314>
 1022360:	00bfdfc4 	movi	r2,-129
 1022364:	a096703a 	and	r11,r20,r2
 1022368:	5d000094 	ori	r20,r11,2
 102236c:	0039883a 	mov	fp,zero
 1022370:	003f9706 	br	10221d0 <__alt_data_end+0xff0221d0>
 1022374:	8025883a 	mov	r18,r16
 1022378:	003c2e06 	br	1021434 <__alt_data_end+0xff021434>
 102237c:	008040f4 	movhi	r2,259
 1022380:	10ab0404 	addi	r2,r2,-21488
 1022384:	0039883a 	mov	fp,zero
 1022388:	d8802615 	stw	r2,152(sp)
 102238c:	003f9006 	br	10221d0 <__alt_data_end+0xff0221d0>
 1022390:	04a5c83a 	sub	r18,zero,r18
 1022394:	07000b44 	movi	fp,45
 1022398:	9004c03a 	cmpne	r2,r18,zero
 102239c:	04e7c83a 	sub	r19,zero,r19
 10223a0:	df001d85 	stb	fp,118(sp)
 10223a4:	98a7c83a 	sub	r19,r19,r2
 10223a8:	48009f16 	blt	r9,zero,1022628 <___vfiprintf_internal_r+0x1338>
 10223ac:	00bfdfc4 	movi	r2,-129
 10223b0:	a0a8703a 	and	r20,r20,r2
 10223b4:	003dd006 	br	1021af8 <__alt_data_end+0xff021af8>
 10223b8:	70004c26 	beq	r14,zero,10224ec <___vfiprintf_internal_r+0x11fc>
 10223bc:	00800084 	movi	r2,2
 10223c0:	d8c01d04 	addi	r3,sp,116
 10223c4:	d8c00015 	stw	r3,0(sp)
 10223c8:	d8800115 	stw	r2,4(sp)
 10223cc:	01000044 	movi	r4,1
 10223d0:	d811883a 	mov	r8,sp
 10223d4:	003f7306 	br	10221a4 <__alt_data_end+0xff0221a4>
 10223d8:	a080100c 	andi	r2,r20,64
 10223dc:	da802217 	ldw	r10,136(sp)
 10223e0:	103e0626 	beq	r2,zero,1021bfc <__alt_data_end+0xff021bfc>
 10223e4:	5480000f 	ldh	r18,0(r10)
 10223e8:	52800104 	addi	r10,r10,4
 10223ec:	da802215 	stw	r10,136(sp)
 10223f0:	9027d7fa 	srai	r19,r18,31
 10223f4:	9805883a 	mov	r2,r19
 10223f8:	003db806 	br	1021adc <__alt_data_end+0xff021adc>
 10223fc:	a080040c 	andi	r2,r20,16
 1022400:	1000091e 	bne	r2,zero,1022428 <___vfiprintf_internal_r+0x1138>
 1022404:	a2c0100c 	andi	r11,r20,64
 1022408:	58000726 	beq	r11,zero,1022428 <___vfiprintf_internal_r+0x1138>
 102240c:	da802217 	ldw	r10,136(sp)
 1022410:	50800017 	ldw	r2,0(r10)
 1022414:	52800104 	addi	r10,r10,4
 1022418:	da802215 	stw	r10,136(sp)
 102241c:	da802317 	ldw	r10,140(sp)
 1022420:	1280000d 	sth	r10,0(r2)
 1022424:	003be706 	br	10213c4 <__alt_data_end+0xff0213c4>
 1022428:	da802217 	ldw	r10,136(sp)
 102242c:	50800017 	ldw	r2,0(r10)
 1022430:	52800104 	addi	r10,r10,4
 1022434:	da802215 	stw	r10,136(sp)
 1022438:	da802317 	ldw	r10,140(sp)
 102243c:	12800015 	stw	r10,0(r2)
 1022440:	003be006 	br	10213c4 <__alt_data_end+0xff0213c4>
 1022444:	a080100c 	andi	r2,r20,64
 1022448:	da802217 	ldw	r10,136(sp)
 102244c:	10003026 	beq	r2,zero,1022510 <___vfiprintf_internal_r+0x1220>
 1022450:	5480000b 	ldhu	r18,0(r10)
 1022454:	52800104 	addi	r10,r10,4
 1022458:	0027883a 	mov	r19,zero
 102245c:	da802215 	stw	r10,136(sp)
 1022460:	003d8006 	br	1021a64 <__alt_data_end+0xff021a64>
 1022464:	80c00007 	ldb	r3,0(r16)
 1022468:	003c0006 	br	102146c <__alt_data_end+0xff02146c>
 102246c:	a080100c 	andi	r2,r20,64
 1022470:	d8001d85 	stb	zero,118(sp)
 1022474:	da802217 	ldw	r10,136(sp)
 1022478:	1000201e 	bne	r2,zero,10224fc <___vfiprintf_internal_r+0x120c>
 102247c:	50800104 	addi	r2,r10,4
 1022480:	54800017 	ldw	r18,0(r10)
 1022484:	0027883a 	mov	r19,zero
 1022488:	483def0e 	bge	r9,zero,1021c48 <__alt_data_end+0xff021c48>
 102248c:	94c6b03a 	or	r3,r18,r19
 1022490:	d8802215 	stw	r2,136(sp)
 1022494:	183d4e1e 	bne	r3,zero,10219d0 <__alt_data_end+0xff0219d0>
 1022498:	0039883a 	mov	fp,zero
 102249c:	0005883a 	mov	r2,zero
 10224a0:	003e0606 	br	1021cbc <__alt_data_end+0xff021cbc>
 10224a4:	d9402117 	ldw	r5,132(sp)
 10224a8:	d9002017 	ldw	r4,128(sp)
 10224ac:	d9801a04 	addi	r6,sp,104
 10224b0:	da402c15 	stw	r9,176(sp)
 10224b4:	db802a15 	stw	r14,168(sp)
 10224b8:	10211dc0 	call	10211dc <__sprint_r.part.0>
 10224bc:	da402c17 	ldw	r9,176(sp)
 10224c0:	db802a17 	ldw	r14,168(sp)
 10224c4:	103ede1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 10224c8:	d9401b17 	ldw	r5,108(sp)
 10224cc:	d8801c17 	ldw	r2,112(sp)
 10224d0:	d811883a 	mov	r8,sp
 10224d4:	29000044 	addi	r4,r5,1
 10224d8:	003e7406 	br	1021eac <__alt_data_end+0xff021eac>
 10224dc:	00bfffc4 	movi	r2,-1
 10224e0:	003c5806 	br	1021644 <__alt_data_end+0xff021644>
 10224e4:	d811883a 	mov	r8,sp
 10224e8:	003ee806 	br	102208c <__alt_data_end+0xff02208c>
 10224ec:	000b883a 	mov	r5,zero
 10224f0:	01000044 	movi	r4,1
 10224f4:	d811883a 	mov	r8,sp
 10224f8:	003e7c06 	br	1021eec <__alt_data_end+0xff021eec>
 10224fc:	50800104 	addi	r2,r10,4
 1022500:	5480000b 	ldhu	r18,0(r10)
 1022504:	0027883a 	mov	r19,zero
 1022508:	483dcf0e 	bge	r9,zero,1021c48 <__alt_data_end+0xff021c48>
 102250c:	003fdf06 	br	102248c <__alt_data_end+0xff02248c>
 1022510:	54800017 	ldw	r18,0(r10)
 1022514:	52800104 	addi	r10,r10,4
 1022518:	0027883a 	mov	r19,zero
 102251c:	da802215 	stw	r10,136(sp)
 1022520:	003d5006 	br	1021a64 <__alt_data_end+0xff021a64>
 1022524:	50800104 	addi	r2,r10,4
 1022528:	5480000b 	ldhu	r18,0(r10)
 102252c:	0027883a 	mov	r19,zero
 1022530:	483f7d0e 	bge	r9,zero,1022328 <__alt_data_end+0xff022328>
 1022534:	003ddc06 	br	1021ca8 <__alt_data_end+0xff021ca8>
 1022538:	d8c02215 	stw	r3,136(sp)
 102253c:	0039883a 	mov	fp,zero
 1022540:	003ddb06 	br	1021cb0 <__alt_data_end+0xff021cb0>
 1022544:	028040f4 	movhi	r10,259
 1022548:	52ab7404 	addi	r10,r10,-21040
 102254c:	da802415 	stw	r10,144(sp)
 1022550:	003e8306 	br	1021f60 <__alt_data_end+0xff021f60>
 1022554:	d8801c17 	ldw	r2,112(sp)
 1022558:	dd002117 	ldw	r20,132(sp)
 102255c:	103eb926 	beq	r2,zero,1022044 <__alt_data_end+0xff022044>
 1022560:	d9002017 	ldw	r4,128(sp)
 1022564:	d9801a04 	addi	r6,sp,104
 1022568:	a00b883a 	mov	r5,r20
 102256c:	10211dc0 	call	10211dc <__sprint_r.part.0>
 1022570:	003eb406 	br	1022044 <__alt_data_end+0xff022044>
 1022574:	80c00043 	ldbu	r3,1(r16)
 1022578:	a5000814 	ori	r20,r20,32
 102257c:	84000044 	addi	r16,r16,1
 1022580:	18c03fcc 	andi	r3,r3,255
 1022584:	18c0201c 	xori	r3,r3,128
 1022588:	18ffe004 	addi	r3,r3,-128
 102258c:	003bb706 	br	102146c <__alt_data_end+0xff02146c>
 1022590:	a809883a 	mov	r4,r21
 1022594:	d8c02a15 	stw	r3,168(sp)
 1022598:	da002b15 	stw	r8,172(sp)
 102259c:	10164b40 	call	10164b4 <strlen>
 10225a0:	d8c02a17 	ldw	r3,168(sp)
 10225a4:	1027883a 	mov	r19,r2
 10225a8:	df001d83 	ldbu	fp,118(sp)
 10225ac:	d8c02215 	stw	r3,136(sp)
 10225b0:	0013883a 	mov	r9,zero
 10225b4:	da002b17 	ldw	r8,172(sp)
 10225b8:	003c4d06 	br	10216f0 <__alt_data_end+0xff0216f0>
 10225bc:	d9402117 	ldw	r5,132(sp)
 10225c0:	d9002017 	ldw	r4,128(sp)
 10225c4:	d9801a04 	addi	r6,sp,104
 10225c8:	da402c15 	stw	r9,176(sp)
 10225cc:	10211dc0 	call	10211dc <__sprint_r.part.0>
 10225d0:	da402c17 	ldw	r9,176(sp)
 10225d4:	103e9a1e 	bne	r2,zero,1022040 <__alt_data_end+0xff022040>
 10225d8:	d9401b17 	ldw	r5,108(sp)
 10225dc:	d8801c17 	ldw	r2,112(sp)
 10225e0:	d811883a 	mov	r8,sp
 10225e4:	29000044 	addi	r4,r5,1
 10225e8:	003e4206 	br	1021ef4 <__alt_data_end+0xff021ef4>
 10225ec:	d9401b17 	ldw	r5,108(sp)
 10225f0:	010040f4 	movhi	r4,259
 10225f4:	212b7804 	addi	r4,r4,-21024
 10225f8:	d9002415 	stw	r4,144(sp)
 10225fc:	29400044 	addi	r5,r5,1
 1022600:	003c6d06 	br	10217b8 <__alt_data_end+0xff0217b8>
 1022604:	0039883a 	mov	fp,zero
 1022608:	00800084 	movi	r2,2
 102260c:	10803fcc 	andi	r2,r2,255
 1022610:	01000044 	movi	r4,1
 1022614:	11001e26 	beq	r2,r4,1022690 <___vfiprintf_internal_r+0x13a0>
 1022618:	01000084 	movi	r4,2
 102261c:	11001e1e 	bne	r2,r4,1022698 <___vfiprintf_internal_r+0x13a8>
 1022620:	1829883a 	mov	r20,r3
 1022624:	003eea06 	br	10221d0 <__alt_data_end+0xff0221d0>
 1022628:	a007883a 	mov	r3,r20
 102262c:	00800044 	movi	r2,1
 1022630:	003ff606 	br	102260c <__alt_data_end+0xff02260c>
 1022634:	00800184 	movi	r2,6
 1022638:	1240012e 	bgeu	r2,r9,1022640 <___vfiprintf_internal_r+0x1350>
 102263c:	1013883a 	mov	r9,r2
 1022640:	4827883a 	mov	r19,r9
 1022644:	4825883a 	mov	r18,r9
 1022648:	48001516 	blt	r9,zero,10226a0 <___vfiprintf_internal_r+0x13b0>
 102264c:	054040f4 	movhi	r21,259
 1022650:	d8c02215 	stw	r3,136(sp)
 1022654:	ad6b0904 	addi	r21,r21,-21468
 1022658:	003d1406 	br	1021aac <__alt_data_end+0xff021aac>
 102265c:	028040f4 	movhi	r10,259
 1022660:	52ab7404 	addi	r10,r10,-21040
 1022664:	da802415 	stw	r10,144(sp)
 1022668:	200d883a 	mov	r6,r4
 102266c:	003c9106 	br	10218b4 <__alt_data_end+0xff0218b4>
 1022670:	5021883a 	mov	r16,r10
 1022674:	0013883a 	mov	r9,zero
 1022678:	003b7d06 	br	1021470 <__alt_data_end+0xff021470>
 102267c:	4827883a 	mov	r19,r9
 1022680:	df001d83 	ldbu	fp,118(sp)
 1022684:	d8c02215 	stw	r3,136(sp)
 1022688:	0013883a 	mov	r9,zero
 102268c:	003c1806 	br	10216f0 <__alt_data_end+0xff0216f0>
 1022690:	1829883a 	mov	r20,r3
 1022694:	003d1806 	br	1021af8 <__alt_data_end+0xff021af8>
 1022698:	1829883a 	mov	r20,r3
 102269c:	003ccd06 	br	10219d4 <__alt_data_end+0xff0219d4>
 10226a0:	0025883a 	mov	r18,zero
 10226a4:	003fe906 	br	102264c <__alt_data_end+0xff02264c>
 10226a8:	d8802217 	ldw	r2,136(sp)
 10226ac:	80c00043 	ldbu	r3,1(r16)
 10226b0:	5021883a 	mov	r16,r10
 10226b4:	12400017 	ldw	r9,0(r2)
 10226b8:	10800104 	addi	r2,r2,4
 10226bc:	d8802215 	stw	r2,136(sp)
 10226c0:	483faf0e 	bge	r9,zero,1022580 <__alt_data_end+0xff022580>
 10226c4:	18c03fcc 	andi	r3,r3,255
 10226c8:	18c0201c 	xori	r3,r3,128
 10226cc:	027fffc4 	movi	r9,-1
 10226d0:	18ffe004 	addi	r3,r3,-128
 10226d4:	003b6506 	br	102146c <__alt_data_end+0xff02146c>
 10226d8:	d9c01d85 	stb	r7,118(sp)
 10226dc:	003ca006 	br	1021960 <__alt_data_end+0xff021960>
 10226e0:	d9c01d85 	stb	r7,118(sp)
 10226e4:	003cad06 	br	102199c <__alt_data_end+0xff02199c>
 10226e8:	d9c01d85 	stb	r7,118(sp)
 10226ec:	003d7d06 	br	1021ce4 <__alt_data_end+0xff021ce4>
 10226f0:	d9c01d85 	stb	r7,118(sp)
 10226f4:	003d5f06 	br	1021c74 <__alt_data_end+0xff021c74>
 10226f8:	a080004c 	andi	r2,r20,1
 10226fc:	0039883a 	mov	fp,zero
 1022700:	10000526 	beq	r2,zero,1022718 <___vfiprintf_internal_r+0x1428>
 1022704:	00800c04 	movi	r2,48
 1022708:	d88019c5 	stb	r2,103(sp)
 102270c:	dcc02717 	ldw	r19,156(sp)
 1022710:	dd4019c4 	addi	r21,sp,103
 1022714:	003bf606 	br	10216f0 <__alt_data_end+0xff0216f0>
 1022718:	0027883a 	mov	r19,zero
 102271c:	dd401a04 	addi	r21,sp,104
 1022720:	003bf306 	br	10216f0 <__alt_data_end+0xff0216f0>
 1022724:	d9c01d85 	stb	r7,118(sp)
 1022728:	003dc806 	br	1021e4c <__alt_data_end+0xff021e4c>
 102272c:	d9c01d85 	stb	r7,118(sp)
 1022730:	003d3a06 	br	1021c1c <__alt_data_end+0xff021c1c>
 1022734:	d9c01d85 	stb	r7,118(sp)
 1022738:	003d2a06 	br	1021be4 <__alt_data_end+0xff021be4>
 102273c:	d9c01d85 	stb	r7,118(sp)
 1022740:	003cde06 	br	1021abc <__alt_data_end+0xff021abc>
 1022744:	d9c01d85 	stb	r7,118(sp)
 1022748:	003cbc06 	br	1021a3c <__alt_data_end+0xff021a3c>

0102274c <__vfiprintf_internal>:
 102274c:	008040f4 	movhi	r2,259
 1022750:	10b2dc04 	addi	r2,r2,-13456
 1022754:	300f883a 	mov	r7,r6
 1022758:	280d883a 	mov	r6,r5
 102275c:	200b883a 	mov	r5,r4
 1022760:	11000017 	ldw	r4,0(r2)
 1022764:	10212f01 	jmpi	10212f0 <___vfiprintf_internal_r>

01022768 <__sbprintf>:
 1022768:	2880030b 	ldhu	r2,12(r5)
 102276c:	2ac01917 	ldw	r11,100(r5)
 1022770:	2a80038b 	ldhu	r10,14(r5)
 1022774:	2a400717 	ldw	r9,28(r5)
 1022778:	2a000917 	ldw	r8,36(r5)
 102277c:	defee204 	addi	sp,sp,-1144
 1022780:	00c10004 	movi	r3,1024
 1022784:	dc011a15 	stw	r16,1128(sp)
 1022788:	10bfff4c 	andi	r2,r2,65533
 102278c:	2821883a 	mov	r16,r5
 1022790:	d8cb883a 	add	r5,sp,r3
 1022794:	dc811c15 	stw	r18,1136(sp)
 1022798:	dc411b15 	stw	r17,1132(sp)
 102279c:	dfc11d15 	stw	ra,1140(sp)
 10227a0:	2025883a 	mov	r18,r4
 10227a4:	d881030d 	sth	r2,1036(sp)
 10227a8:	dac11915 	stw	r11,1124(sp)
 10227ac:	da81038d 	sth	r10,1038(sp)
 10227b0:	da410715 	stw	r9,1052(sp)
 10227b4:	da010915 	stw	r8,1060(sp)
 10227b8:	dec10015 	stw	sp,1024(sp)
 10227bc:	dec10415 	stw	sp,1040(sp)
 10227c0:	d8c10215 	stw	r3,1032(sp)
 10227c4:	d8c10515 	stw	r3,1044(sp)
 10227c8:	d8010615 	stw	zero,1048(sp)
 10227cc:	10212f00 	call	10212f0 <___vfiprintf_internal_r>
 10227d0:	1023883a 	mov	r17,r2
 10227d4:	10000416 	blt	r2,zero,10227e8 <__sbprintf+0x80>
 10227d8:	d9410004 	addi	r5,sp,1024
 10227dc:	9009883a 	mov	r4,r18
 10227e0:	101c7e00 	call	101c7e0 <_fflush_r>
 10227e4:	10000d1e 	bne	r2,zero,102281c <__sbprintf+0xb4>
 10227e8:	d881030b 	ldhu	r2,1036(sp)
 10227ec:	1080100c 	andi	r2,r2,64
 10227f0:	10000326 	beq	r2,zero,1022800 <__sbprintf+0x98>
 10227f4:	8080030b 	ldhu	r2,12(r16)
 10227f8:	10801014 	ori	r2,r2,64
 10227fc:	8080030d 	sth	r2,12(r16)
 1022800:	8805883a 	mov	r2,r17
 1022804:	dfc11d17 	ldw	ra,1140(sp)
 1022808:	dc811c17 	ldw	r18,1136(sp)
 102280c:	dc411b17 	ldw	r17,1132(sp)
 1022810:	dc011a17 	ldw	r16,1128(sp)
 1022814:	dec11e04 	addi	sp,sp,1144
 1022818:	f800283a 	ret
 102281c:	047fffc4 	movi	r17,-1
 1022820:	003ff106 	br	10227e8 <__alt_data_end+0xff0227e8>

01022824 <_write_r>:
 1022824:	defffd04 	addi	sp,sp,-12
 1022828:	2805883a 	mov	r2,r5
 102282c:	dc000015 	stw	r16,0(sp)
 1022830:	040040f4 	movhi	r16,259
 1022834:	dc400115 	stw	r17,4(sp)
 1022838:	300b883a 	mov	r5,r6
 102283c:	843a2c04 	addi	r16,r16,-5968
 1022840:	2023883a 	mov	r17,r4
 1022844:	380d883a 	mov	r6,r7
 1022848:	1009883a 	mov	r4,r2
 102284c:	dfc00215 	stw	ra,8(sp)
 1022850:	80000015 	stw	zero,0(r16)
 1022854:	10273300 	call	1027330 <write>
 1022858:	00ffffc4 	movi	r3,-1
 102285c:	10c00526 	beq	r2,r3,1022874 <_write_r+0x50>
 1022860:	dfc00217 	ldw	ra,8(sp)
 1022864:	dc400117 	ldw	r17,4(sp)
 1022868:	dc000017 	ldw	r16,0(sp)
 102286c:	dec00304 	addi	sp,sp,12
 1022870:	f800283a 	ret
 1022874:	80c00017 	ldw	r3,0(r16)
 1022878:	183ff926 	beq	r3,zero,1022860 <__alt_data_end+0xff022860>
 102287c:	88c00015 	stw	r3,0(r17)
 1022880:	003ff706 	br	1022860 <__alt_data_end+0xff022860>

01022884 <_close_r>:
 1022884:	defffd04 	addi	sp,sp,-12
 1022888:	dc000015 	stw	r16,0(sp)
 102288c:	040040f4 	movhi	r16,259
 1022890:	dc400115 	stw	r17,4(sp)
 1022894:	843a2c04 	addi	r16,r16,-5968
 1022898:	2023883a 	mov	r17,r4
 102289c:	2809883a 	mov	r4,r5
 10228a0:	dfc00215 	stw	ra,8(sp)
 10228a4:	80000015 	stw	zero,0(r16)
 10228a8:	10264600 	call	1026460 <close>
 10228ac:	00ffffc4 	movi	r3,-1
 10228b0:	10c00526 	beq	r2,r3,10228c8 <_close_r+0x44>
 10228b4:	dfc00217 	ldw	ra,8(sp)
 10228b8:	dc400117 	ldw	r17,4(sp)
 10228bc:	dc000017 	ldw	r16,0(sp)
 10228c0:	dec00304 	addi	sp,sp,12
 10228c4:	f800283a 	ret
 10228c8:	80c00017 	ldw	r3,0(r16)
 10228cc:	183ff926 	beq	r3,zero,10228b4 <__alt_data_end+0xff0228b4>
 10228d0:	88c00015 	stw	r3,0(r17)
 10228d4:	003ff706 	br	10228b4 <__alt_data_end+0xff0228b4>

010228d8 <_calloc_r>:
 10228d8:	298b383a 	mul	r5,r5,r6
 10228dc:	defffe04 	addi	sp,sp,-8
 10228e0:	dfc00115 	stw	ra,4(sp)
 10228e4:	dc000015 	stw	r16,0(sp)
 10228e8:	101d91c0 	call	101d91c <_malloc_r>
 10228ec:	10002926 	beq	r2,zero,1022994 <_calloc_r+0xbc>
 10228f0:	11bfff17 	ldw	r6,-4(r2)
 10228f4:	1021883a 	mov	r16,r2
 10228f8:	00bfff04 	movi	r2,-4
 10228fc:	308c703a 	and	r6,r6,r2
 1022900:	00c00904 	movi	r3,36
 1022904:	308d883a 	add	r6,r6,r2
 1022908:	19801636 	bltu	r3,r6,1022964 <_calloc_r+0x8c>
 102290c:	008004c4 	movi	r2,19
 1022910:	11800b2e 	bgeu	r2,r6,1022940 <_calloc_r+0x68>
 1022914:	80000015 	stw	zero,0(r16)
 1022918:	80000115 	stw	zero,4(r16)
 102291c:	008006c4 	movi	r2,27
 1022920:	11801a2e 	bgeu	r2,r6,102298c <_calloc_r+0xb4>
 1022924:	80000215 	stw	zero,8(r16)
 1022928:	80000315 	stw	zero,12(r16)
 102292c:	30c0151e 	bne	r6,r3,1022984 <_calloc_r+0xac>
 1022930:	80000415 	stw	zero,16(r16)
 1022934:	80800604 	addi	r2,r16,24
 1022938:	80000515 	stw	zero,20(r16)
 102293c:	00000106 	br	1022944 <_calloc_r+0x6c>
 1022940:	8005883a 	mov	r2,r16
 1022944:	10000015 	stw	zero,0(r2)
 1022948:	10000115 	stw	zero,4(r2)
 102294c:	10000215 	stw	zero,8(r2)
 1022950:	8005883a 	mov	r2,r16
 1022954:	dfc00117 	ldw	ra,4(sp)
 1022958:	dc000017 	ldw	r16,0(sp)
 102295c:	dec00204 	addi	sp,sp,8
 1022960:	f800283a 	ret
 1022964:	000b883a 	mov	r5,zero
 1022968:	8009883a 	mov	r4,r16
 102296c:	101593c0 	call	101593c <memset>
 1022970:	8005883a 	mov	r2,r16
 1022974:	dfc00117 	ldw	ra,4(sp)
 1022978:	dc000017 	ldw	r16,0(sp)
 102297c:	dec00204 	addi	sp,sp,8
 1022980:	f800283a 	ret
 1022984:	80800404 	addi	r2,r16,16
 1022988:	003fee06 	br	1022944 <__alt_data_end+0xff022944>
 102298c:	80800204 	addi	r2,r16,8
 1022990:	003fec06 	br	1022944 <__alt_data_end+0xff022944>
 1022994:	0005883a 	mov	r2,zero
 1022998:	003fee06 	br	1022954 <__alt_data_end+0xff022954>

0102299c <_fclose_r>:
 102299c:	28003926 	beq	r5,zero,1022a84 <_fclose_r+0xe8>
 10229a0:	defffc04 	addi	sp,sp,-16
 10229a4:	dc400115 	stw	r17,4(sp)
 10229a8:	dc000015 	stw	r16,0(sp)
 10229ac:	dfc00315 	stw	ra,12(sp)
 10229b0:	dc800215 	stw	r18,8(sp)
 10229b4:	2023883a 	mov	r17,r4
 10229b8:	2821883a 	mov	r16,r5
 10229bc:	20000226 	beq	r4,zero,10229c8 <_fclose_r+0x2c>
 10229c0:	20800e17 	ldw	r2,56(r4)
 10229c4:	10002726 	beq	r2,zero,1022a64 <_fclose_r+0xc8>
 10229c8:	8080030f 	ldh	r2,12(r16)
 10229cc:	1000071e 	bne	r2,zero,10229ec <_fclose_r+0x50>
 10229d0:	0005883a 	mov	r2,zero
 10229d4:	dfc00317 	ldw	ra,12(sp)
 10229d8:	dc800217 	ldw	r18,8(sp)
 10229dc:	dc400117 	ldw	r17,4(sp)
 10229e0:	dc000017 	ldw	r16,0(sp)
 10229e4:	dec00404 	addi	sp,sp,16
 10229e8:	f800283a 	ret
 10229ec:	800b883a 	mov	r5,r16
 10229f0:	8809883a 	mov	r4,r17
 10229f4:	101c5c40 	call	101c5c4 <__sflush_r>
 10229f8:	1025883a 	mov	r18,r2
 10229fc:	80800b17 	ldw	r2,44(r16)
 1022a00:	10000426 	beq	r2,zero,1022a14 <_fclose_r+0x78>
 1022a04:	81400717 	ldw	r5,28(r16)
 1022a08:	8809883a 	mov	r4,r17
 1022a0c:	103ee83a 	callr	r2
 1022a10:	10001616 	blt	r2,zero,1022a6c <_fclose_r+0xd0>
 1022a14:	8080030b 	ldhu	r2,12(r16)
 1022a18:	1080200c 	andi	r2,r2,128
 1022a1c:	1000151e 	bne	r2,zero,1022a74 <_fclose_r+0xd8>
 1022a20:	81400c17 	ldw	r5,48(r16)
 1022a24:	28000526 	beq	r5,zero,1022a3c <_fclose_r+0xa0>
 1022a28:	80801004 	addi	r2,r16,64
 1022a2c:	28800226 	beq	r5,r2,1022a38 <_fclose_r+0x9c>
 1022a30:	8809883a 	mov	r4,r17
 1022a34:	101cd300 	call	101cd30 <_free_r>
 1022a38:	80000c15 	stw	zero,48(r16)
 1022a3c:	81401117 	ldw	r5,68(r16)
 1022a40:	28000326 	beq	r5,zero,1022a50 <_fclose_r+0xb4>
 1022a44:	8809883a 	mov	r4,r17
 1022a48:	101cd300 	call	101cd30 <_free_r>
 1022a4c:	80001115 	stw	zero,68(r16)
 1022a50:	101cbcc0 	call	101cbcc <__sfp_lock_acquire>
 1022a54:	8000030d 	sth	zero,12(r16)
 1022a58:	101cbd00 	call	101cbd0 <__sfp_lock_release>
 1022a5c:	9005883a 	mov	r2,r18
 1022a60:	003fdc06 	br	10229d4 <__alt_data_end+0xff0229d4>
 1022a64:	101cbbc0 	call	101cbbc <__sinit>
 1022a68:	003fd706 	br	10229c8 <__alt_data_end+0xff0229c8>
 1022a6c:	04bfffc4 	movi	r18,-1
 1022a70:	003fe806 	br	1022a14 <__alt_data_end+0xff022a14>
 1022a74:	81400417 	ldw	r5,16(r16)
 1022a78:	8809883a 	mov	r4,r17
 1022a7c:	101cd300 	call	101cd30 <_free_r>
 1022a80:	003fe706 	br	1022a20 <__alt_data_end+0xff022a20>
 1022a84:	0005883a 	mov	r2,zero
 1022a88:	f800283a 	ret

01022a8c <fclose>:
 1022a8c:	008040f4 	movhi	r2,259
 1022a90:	10b2dc04 	addi	r2,r2,-13456
 1022a94:	200b883a 	mov	r5,r4
 1022a98:	11000017 	ldw	r4,0(r2)
 1022a9c:	102299c1 	jmpi	102299c <_fclose_r>

01022aa0 <__fputwc>:
 1022aa0:	defff804 	addi	sp,sp,-32
 1022aa4:	dcc00415 	stw	r19,16(sp)
 1022aa8:	dc800315 	stw	r18,12(sp)
 1022aac:	dc000115 	stw	r16,4(sp)
 1022ab0:	dfc00715 	stw	ra,28(sp)
 1022ab4:	dd400615 	stw	r21,24(sp)
 1022ab8:	dd000515 	stw	r20,20(sp)
 1022abc:	dc400215 	stw	r17,8(sp)
 1022ac0:	2027883a 	mov	r19,r4
 1022ac4:	2825883a 	mov	r18,r5
 1022ac8:	3021883a 	mov	r16,r6
 1022acc:	101d70c0 	call	101d70c <__locale_mb_cur_max>
 1022ad0:	00c00044 	movi	r3,1
 1022ad4:	10c03e26 	beq	r2,r3,1022bd0 <__fputwc+0x130>
 1022ad8:	81c01704 	addi	r7,r16,92
 1022adc:	900d883a 	mov	r6,r18
 1022ae0:	d80b883a 	mov	r5,sp
 1022ae4:	9809883a 	mov	r4,r19
 1022ae8:	1022f700 	call	1022f70 <_wcrtomb_r>
 1022aec:	1029883a 	mov	r20,r2
 1022af0:	00bfffc4 	movi	r2,-1
 1022af4:	a0802026 	beq	r20,r2,1022b78 <__fputwc+0xd8>
 1022af8:	d9400003 	ldbu	r5,0(sp)
 1022afc:	a0001c26 	beq	r20,zero,1022b70 <__fputwc+0xd0>
 1022b00:	0023883a 	mov	r17,zero
 1022b04:	05400284 	movi	r21,10
 1022b08:	00000906 	br	1022b30 <__fputwc+0x90>
 1022b0c:	80800017 	ldw	r2,0(r16)
 1022b10:	11400005 	stb	r5,0(r2)
 1022b14:	80c00017 	ldw	r3,0(r16)
 1022b18:	18c00044 	addi	r3,r3,1
 1022b1c:	80c00015 	stw	r3,0(r16)
 1022b20:	8c400044 	addi	r17,r17,1
 1022b24:	dc45883a 	add	r2,sp,r17
 1022b28:	8d00112e 	bgeu	r17,r20,1022b70 <__fputwc+0xd0>
 1022b2c:	11400003 	ldbu	r5,0(r2)
 1022b30:	80c00217 	ldw	r3,8(r16)
 1022b34:	18ffffc4 	addi	r3,r3,-1
 1022b38:	80c00215 	stw	r3,8(r16)
 1022b3c:	183ff30e 	bge	r3,zero,1022b0c <__alt_data_end+0xff022b0c>
 1022b40:	80800617 	ldw	r2,24(r16)
 1022b44:	18801916 	blt	r3,r2,1022bac <__fputwc+0x10c>
 1022b48:	80800017 	ldw	r2,0(r16)
 1022b4c:	11400005 	stb	r5,0(r2)
 1022b50:	80800017 	ldw	r2,0(r16)
 1022b54:	10c00003 	ldbu	r3,0(r2)
 1022b58:	10800044 	addi	r2,r2,1
 1022b5c:	1d402326 	beq	r3,r21,1022bec <__fputwc+0x14c>
 1022b60:	80800015 	stw	r2,0(r16)
 1022b64:	8c400044 	addi	r17,r17,1
 1022b68:	dc45883a 	add	r2,sp,r17
 1022b6c:	8d3fef36 	bltu	r17,r20,1022b2c <__alt_data_end+0xff022b2c>
 1022b70:	9005883a 	mov	r2,r18
 1022b74:	00000406 	br	1022b88 <__fputwc+0xe8>
 1022b78:	80c0030b 	ldhu	r3,12(r16)
 1022b7c:	a005883a 	mov	r2,r20
 1022b80:	18c01014 	ori	r3,r3,64
 1022b84:	80c0030d 	sth	r3,12(r16)
 1022b88:	dfc00717 	ldw	ra,28(sp)
 1022b8c:	dd400617 	ldw	r21,24(sp)
 1022b90:	dd000517 	ldw	r20,20(sp)
 1022b94:	dcc00417 	ldw	r19,16(sp)
 1022b98:	dc800317 	ldw	r18,12(sp)
 1022b9c:	dc400217 	ldw	r17,8(sp)
 1022ba0:	dc000117 	ldw	r16,4(sp)
 1022ba4:	dec00804 	addi	sp,sp,32
 1022ba8:	f800283a 	ret
 1022bac:	800d883a 	mov	r6,r16
 1022bb0:	29403fcc 	andi	r5,r5,255
 1022bb4:	9809883a 	mov	r4,r19
 1022bb8:	1022e180 	call	1022e18 <__swbuf_r>
 1022bbc:	10bfffe0 	cmpeqi	r2,r2,-1
 1022bc0:	10803fcc 	andi	r2,r2,255
 1022bc4:	103fd626 	beq	r2,zero,1022b20 <__alt_data_end+0xff022b20>
 1022bc8:	00bfffc4 	movi	r2,-1
 1022bcc:	003fee06 	br	1022b88 <__alt_data_end+0xff022b88>
 1022bd0:	90ffffc4 	addi	r3,r18,-1
 1022bd4:	01003f84 	movi	r4,254
 1022bd8:	20ffbf36 	bltu	r4,r3,1022ad8 <__alt_data_end+0xff022ad8>
 1022bdc:	900b883a 	mov	r5,r18
 1022be0:	dc800005 	stb	r18,0(sp)
 1022be4:	1029883a 	mov	r20,r2
 1022be8:	003fc506 	br	1022b00 <__alt_data_end+0xff022b00>
 1022bec:	800d883a 	mov	r6,r16
 1022bf0:	a80b883a 	mov	r5,r21
 1022bf4:	9809883a 	mov	r4,r19
 1022bf8:	1022e180 	call	1022e18 <__swbuf_r>
 1022bfc:	10bfffe0 	cmpeqi	r2,r2,-1
 1022c00:	003fef06 	br	1022bc0 <__alt_data_end+0xff022bc0>

01022c04 <_fputwc_r>:
 1022c04:	3080030b 	ldhu	r2,12(r6)
 1022c08:	10c8000c 	andi	r3,r2,8192
 1022c0c:	1800051e 	bne	r3,zero,1022c24 <_fputwc_r+0x20>
 1022c10:	30c01917 	ldw	r3,100(r6)
 1022c14:	10880014 	ori	r2,r2,8192
 1022c18:	3080030d 	sth	r2,12(r6)
 1022c1c:	18880014 	ori	r2,r3,8192
 1022c20:	30801915 	stw	r2,100(r6)
 1022c24:	1022aa01 	jmpi	1022aa0 <__fputwc>

01022c28 <fputwc>:
 1022c28:	008040f4 	movhi	r2,259
 1022c2c:	defffc04 	addi	sp,sp,-16
 1022c30:	10b2dc04 	addi	r2,r2,-13456
 1022c34:	dc000115 	stw	r16,4(sp)
 1022c38:	14000017 	ldw	r16,0(r2)
 1022c3c:	dc400215 	stw	r17,8(sp)
 1022c40:	dfc00315 	stw	ra,12(sp)
 1022c44:	2023883a 	mov	r17,r4
 1022c48:	80000226 	beq	r16,zero,1022c54 <fputwc+0x2c>
 1022c4c:	80800e17 	ldw	r2,56(r16)
 1022c50:	10001026 	beq	r2,zero,1022c94 <fputwc+0x6c>
 1022c54:	2880030b 	ldhu	r2,12(r5)
 1022c58:	10c8000c 	andi	r3,r2,8192
 1022c5c:	1800051e 	bne	r3,zero,1022c74 <fputwc+0x4c>
 1022c60:	28c01917 	ldw	r3,100(r5)
 1022c64:	10880014 	ori	r2,r2,8192
 1022c68:	2880030d 	sth	r2,12(r5)
 1022c6c:	18880014 	ori	r2,r3,8192
 1022c70:	28801915 	stw	r2,100(r5)
 1022c74:	280d883a 	mov	r6,r5
 1022c78:	8009883a 	mov	r4,r16
 1022c7c:	880b883a 	mov	r5,r17
 1022c80:	dfc00317 	ldw	ra,12(sp)
 1022c84:	dc400217 	ldw	r17,8(sp)
 1022c88:	dc000117 	ldw	r16,4(sp)
 1022c8c:	dec00404 	addi	sp,sp,16
 1022c90:	1022aa01 	jmpi	1022aa0 <__fputwc>
 1022c94:	8009883a 	mov	r4,r16
 1022c98:	d9400015 	stw	r5,0(sp)
 1022c9c:	101cbbc0 	call	101cbbc <__sinit>
 1022ca0:	d9400017 	ldw	r5,0(sp)
 1022ca4:	003feb06 	br	1022c54 <__alt_data_end+0xff022c54>

01022ca8 <_fstat_r>:
 1022ca8:	defffd04 	addi	sp,sp,-12
 1022cac:	2805883a 	mov	r2,r5
 1022cb0:	dc000015 	stw	r16,0(sp)
 1022cb4:	040040f4 	movhi	r16,259
 1022cb8:	dc400115 	stw	r17,4(sp)
 1022cbc:	843a2c04 	addi	r16,r16,-5968
 1022cc0:	2023883a 	mov	r17,r4
 1022cc4:	300b883a 	mov	r5,r6
 1022cc8:	1009883a 	mov	r4,r2
 1022ccc:	dfc00215 	stw	ra,8(sp)
 1022cd0:	80000015 	stw	zero,0(r16)
 1022cd4:	102668c0 	call	102668c <fstat>
 1022cd8:	00ffffc4 	movi	r3,-1
 1022cdc:	10c00526 	beq	r2,r3,1022cf4 <_fstat_r+0x4c>
 1022ce0:	dfc00217 	ldw	ra,8(sp)
 1022ce4:	dc400117 	ldw	r17,4(sp)
 1022ce8:	dc000017 	ldw	r16,0(sp)
 1022cec:	dec00304 	addi	sp,sp,12
 1022cf0:	f800283a 	ret
 1022cf4:	80c00017 	ldw	r3,0(r16)
 1022cf8:	183ff926 	beq	r3,zero,1022ce0 <__alt_data_end+0xff022ce0>
 1022cfc:	88c00015 	stw	r3,0(r17)
 1022d00:	003ff706 	br	1022ce0 <__alt_data_end+0xff022ce0>

01022d04 <_isatty_r>:
 1022d04:	defffd04 	addi	sp,sp,-12
 1022d08:	dc000015 	stw	r16,0(sp)
 1022d0c:	040040f4 	movhi	r16,259
 1022d10:	dc400115 	stw	r17,4(sp)
 1022d14:	843a2c04 	addi	r16,r16,-5968
 1022d18:	2023883a 	mov	r17,r4
 1022d1c:	2809883a 	mov	r4,r5
 1022d20:	dfc00215 	stw	ra,8(sp)
 1022d24:	80000015 	stw	zero,0(r16)
 1022d28:	1026ba80 	call	1026ba8 <isatty>
 1022d2c:	00ffffc4 	movi	r3,-1
 1022d30:	10c00526 	beq	r2,r3,1022d48 <_isatty_r+0x44>
 1022d34:	dfc00217 	ldw	ra,8(sp)
 1022d38:	dc400117 	ldw	r17,4(sp)
 1022d3c:	dc000017 	ldw	r16,0(sp)
 1022d40:	dec00304 	addi	sp,sp,12
 1022d44:	f800283a 	ret
 1022d48:	80c00017 	ldw	r3,0(r16)
 1022d4c:	183ff926 	beq	r3,zero,1022d34 <__alt_data_end+0xff022d34>
 1022d50:	88c00015 	stw	r3,0(r17)
 1022d54:	003ff706 	br	1022d34 <__alt_data_end+0xff022d34>

01022d58 <_lseek_r>:
 1022d58:	defffd04 	addi	sp,sp,-12
 1022d5c:	2805883a 	mov	r2,r5
 1022d60:	dc000015 	stw	r16,0(sp)
 1022d64:	040040f4 	movhi	r16,259
 1022d68:	dc400115 	stw	r17,4(sp)
 1022d6c:	300b883a 	mov	r5,r6
 1022d70:	843a2c04 	addi	r16,r16,-5968
 1022d74:	2023883a 	mov	r17,r4
 1022d78:	380d883a 	mov	r6,r7
 1022d7c:	1009883a 	mov	r4,r2
 1022d80:	dfc00215 	stw	ra,8(sp)
 1022d84:	80000015 	stw	zero,0(r16)
 1022d88:	1026ee00 	call	1026ee0 <lseek>
 1022d8c:	00ffffc4 	movi	r3,-1
 1022d90:	10c00526 	beq	r2,r3,1022da8 <_lseek_r+0x50>
 1022d94:	dfc00217 	ldw	ra,8(sp)
 1022d98:	dc400117 	ldw	r17,4(sp)
 1022d9c:	dc000017 	ldw	r16,0(sp)
 1022da0:	dec00304 	addi	sp,sp,12
 1022da4:	f800283a 	ret
 1022da8:	80c00017 	ldw	r3,0(r16)
 1022dac:	183ff926 	beq	r3,zero,1022d94 <__alt_data_end+0xff022d94>
 1022db0:	88c00015 	stw	r3,0(r17)
 1022db4:	003ff706 	br	1022d94 <__alt_data_end+0xff022d94>

01022db8 <_read_r>:
 1022db8:	defffd04 	addi	sp,sp,-12
 1022dbc:	2805883a 	mov	r2,r5
 1022dc0:	dc000015 	stw	r16,0(sp)
 1022dc4:	040040f4 	movhi	r16,259
 1022dc8:	dc400115 	stw	r17,4(sp)
 1022dcc:	300b883a 	mov	r5,r6
 1022dd0:	843a2c04 	addi	r16,r16,-5968
 1022dd4:	2023883a 	mov	r17,r4
 1022dd8:	380d883a 	mov	r6,r7
 1022ddc:	1009883a 	mov	r4,r2
 1022de0:	dfc00215 	stw	ra,8(sp)
 1022de4:	80000015 	stw	zero,0(r16)
 1022de8:	10270b40 	call	10270b4 <read>
 1022dec:	00ffffc4 	movi	r3,-1
 1022df0:	10c00526 	beq	r2,r3,1022e08 <_read_r+0x50>
 1022df4:	dfc00217 	ldw	ra,8(sp)
 1022df8:	dc400117 	ldw	r17,4(sp)
 1022dfc:	dc000017 	ldw	r16,0(sp)
 1022e00:	dec00304 	addi	sp,sp,12
 1022e04:	f800283a 	ret
 1022e08:	80c00017 	ldw	r3,0(r16)
 1022e0c:	183ff926 	beq	r3,zero,1022df4 <__alt_data_end+0xff022df4>
 1022e10:	88c00015 	stw	r3,0(r17)
 1022e14:	003ff706 	br	1022df4 <__alt_data_end+0xff022df4>

01022e18 <__swbuf_r>:
 1022e18:	defffb04 	addi	sp,sp,-20
 1022e1c:	dcc00315 	stw	r19,12(sp)
 1022e20:	dc800215 	stw	r18,8(sp)
 1022e24:	dc000015 	stw	r16,0(sp)
 1022e28:	dfc00415 	stw	ra,16(sp)
 1022e2c:	dc400115 	stw	r17,4(sp)
 1022e30:	2025883a 	mov	r18,r4
 1022e34:	2827883a 	mov	r19,r5
 1022e38:	3021883a 	mov	r16,r6
 1022e3c:	20000226 	beq	r4,zero,1022e48 <__swbuf_r+0x30>
 1022e40:	20800e17 	ldw	r2,56(r4)
 1022e44:	10004226 	beq	r2,zero,1022f50 <__swbuf_r+0x138>
 1022e48:	80800617 	ldw	r2,24(r16)
 1022e4c:	8100030b 	ldhu	r4,12(r16)
 1022e50:	80800215 	stw	r2,8(r16)
 1022e54:	2080020c 	andi	r2,r4,8
 1022e58:	10003626 	beq	r2,zero,1022f34 <__swbuf_r+0x11c>
 1022e5c:	80c00417 	ldw	r3,16(r16)
 1022e60:	18003426 	beq	r3,zero,1022f34 <__swbuf_r+0x11c>
 1022e64:	2088000c 	andi	r2,r4,8192
 1022e68:	9c403fcc 	andi	r17,r19,255
 1022e6c:	10001a26 	beq	r2,zero,1022ed8 <__swbuf_r+0xc0>
 1022e70:	80800017 	ldw	r2,0(r16)
 1022e74:	81000517 	ldw	r4,20(r16)
 1022e78:	10c7c83a 	sub	r3,r2,r3
 1022e7c:	1900200e 	bge	r3,r4,1022f00 <__swbuf_r+0xe8>
 1022e80:	18c00044 	addi	r3,r3,1
 1022e84:	81000217 	ldw	r4,8(r16)
 1022e88:	11400044 	addi	r5,r2,1
 1022e8c:	81400015 	stw	r5,0(r16)
 1022e90:	213fffc4 	addi	r4,r4,-1
 1022e94:	81000215 	stw	r4,8(r16)
 1022e98:	14c00005 	stb	r19,0(r2)
 1022e9c:	80800517 	ldw	r2,20(r16)
 1022ea0:	10c01e26 	beq	r2,r3,1022f1c <__swbuf_r+0x104>
 1022ea4:	8080030b 	ldhu	r2,12(r16)
 1022ea8:	1080004c 	andi	r2,r2,1
 1022eac:	10000226 	beq	r2,zero,1022eb8 <__swbuf_r+0xa0>
 1022eb0:	00800284 	movi	r2,10
 1022eb4:	88801926 	beq	r17,r2,1022f1c <__swbuf_r+0x104>
 1022eb8:	8805883a 	mov	r2,r17
 1022ebc:	dfc00417 	ldw	ra,16(sp)
 1022ec0:	dcc00317 	ldw	r19,12(sp)
 1022ec4:	dc800217 	ldw	r18,8(sp)
 1022ec8:	dc400117 	ldw	r17,4(sp)
 1022ecc:	dc000017 	ldw	r16,0(sp)
 1022ed0:	dec00504 	addi	sp,sp,20
 1022ed4:	f800283a 	ret
 1022ed8:	81401917 	ldw	r5,100(r16)
 1022edc:	00b7ffc4 	movi	r2,-8193
 1022ee0:	21080014 	ori	r4,r4,8192
 1022ee4:	2884703a 	and	r2,r5,r2
 1022ee8:	80801915 	stw	r2,100(r16)
 1022eec:	80800017 	ldw	r2,0(r16)
 1022ef0:	8100030d 	sth	r4,12(r16)
 1022ef4:	81000517 	ldw	r4,20(r16)
 1022ef8:	10c7c83a 	sub	r3,r2,r3
 1022efc:	193fe016 	blt	r3,r4,1022e80 <__alt_data_end+0xff022e80>
 1022f00:	800b883a 	mov	r5,r16
 1022f04:	9009883a 	mov	r4,r18
 1022f08:	101c7e00 	call	101c7e0 <_fflush_r>
 1022f0c:	1000071e 	bne	r2,zero,1022f2c <__swbuf_r+0x114>
 1022f10:	80800017 	ldw	r2,0(r16)
 1022f14:	00c00044 	movi	r3,1
 1022f18:	003fda06 	br	1022e84 <__alt_data_end+0xff022e84>
 1022f1c:	800b883a 	mov	r5,r16
 1022f20:	9009883a 	mov	r4,r18
 1022f24:	101c7e00 	call	101c7e0 <_fflush_r>
 1022f28:	103fe326 	beq	r2,zero,1022eb8 <__alt_data_end+0xff022eb8>
 1022f2c:	00bfffc4 	movi	r2,-1
 1022f30:	003fe206 	br	1022ebc <__alt_data_end+0xff022ebc>
 1022f34:	800b883a 	mov	r5,r16
 1022f38:	9009883a 	mov	r4,r18
 1022f3c:	101abd00 	call	101abd0 <__swsetup_r>
 1022f40:	103ffa1e 	bne	r2,zero,1022f2c <__alt_data_end+0xff022f2c>
 1022f44:	8100030b 	ldhu	r4,12(r16)
 1022f48:	80c00417 	ldw	r3,16(r16)
 1022f4c:	003fc506 	br	1022e64 <__alt_data_end+0xff022e64>
 1022f50:	101cbbc0 	call	101cbbc <__sinit>
 1022f54:	003fbc06 	br	1022e48 <__alt_data_end+0xff022e48>

01022f58 <__swbuf>:
 1022f58:	008040f4 	movhi	r2,259
 1022f5c:	10b2dc04 	addi	r2,r2,-13456
 1022f60:	280d883a 	mov	r6,r5
 1022f64:	200b883a 	mov	r5,r4
 1022f68:	11000017 	ldw	r4,0(r2)
 1022f6c:	1022e181 	jmpi	1022e18 <__swbuf_r>

01022f70 <_wcrtomb_r>:
 1022f70:	defff604 	addi	sp,sp,-40
 1022f74:	008040f4 	movhi	r2,259
 1022f78:	dc800815 	stw	r18,32(sp)
 1022f7c:	dc400715 	stw	r17,28(sp)
 1022f80:	dc000615 	stw	r16,24(sp)
 1022f84:	10b2e004 	addi	r2,r2,-13440
 1022f88:	dfc00915 	stw	ra,36(sp)
 1022f8c:	2021883a 	mov	r16,r4
 1022f90:	3823883a 	mov	r17,r7
 1022f94:	14800017 	ldw	r18,0(r2)
 1022f98:	28001426 	beq	r5,zero,1022fec <_wcrtomb_r+0x7c>
 1022f9c:	d9400415 	stw	r5,16(sp)
 1022fa0:	d9800515 	stw	r6,20(sp)
 1022fa4:	101d7000 	call	101d700 <__locale_charset>
 1022fa8:	d9800517 	ldw	r6,20(sp)
 1022fac:	d9400417 	ldw	r5,16(sp)
 1022fb0:	100f883a 	mov	r7,r2
 1022fb4:	dc400015 	stw	r17,0(sp)
 1022fb8:	8009883a 	mov	r4,r16
 1022fbc:	903ee83a 	callr	r18
 1022fc0:	00ffffc4 	movi	r3,-1
 1022fc4:	10c0031e 	bne	r2,r3,1022fd4 <_wcrtomb_r+0x64>
 1022fc8:	88000015 	stw	zero,0(r17)
 1022fcc:	00c02284 	movi	r3,138
 1022fd0:	80c00015 	stw	r3,0(r16)
 1022fd4:	dfc00917 	ldw	ra,36(sp)
 1022fd8:	dc800817 	ldw	r18,32(sp)
 1022fdc:	dc400717 	ldw	r17,28(sp)
 1022fe0:	dc000617 	ldw	r16,24(sp)
 1022fe4:	dec00a04 	addi	sp,sp,40
 1022fe8:	f800283a 	ret
 1022fec:	101d7000 	call	101d700 <__locale_charset>
 1022ff0:	100f883a 	mov	r7,r2
 1022ff4:	dc400015 	stw	r17,0(sp)
 1022ff8:	000d883a 	mov	r6,zero
 1022ffc:	d9400104 	addi	r5,sp,4
 1023000:	8009883a 	mov	r4,r16
 1023004:	903ee83a 	callr	r18
 1023008:	003fed06 	br	1022fc0 <__alt_data_end+0xff022fc0>

0102300c <wcrtomb>:
 102300c:	defff604 	addi	sp,sp,-40
 1023010:	008040f4 	movhi	r2,259
 1023014:	dc800615 	stw	r18,24(sp)
 1023018:	dc400515 	stw	r17,20(sp)
 102301c:	10b2dc04 	addi	r2,r2,-13456
 1023020:	dfc00915 	stw	ra,36(sp)
 1023024:	dd000815 	stw	r20,32(sp)
 1023028:	dcc00715 	stw	r19,28(sp)
 102302c:	dc000415 	stw	r16,16(sp)
 1023030:	3025883a 	mov	r18,r6
 1023034:	14400017 	ldw	r17,0(r2)
 1023038:	20001926 	beq	r4,zero,10230a0 <wcrtomb+0x94>
 102303c:	008040f4 	movhi	r2,259
 1023040:	10b2e004 	addi	r2,r2,-13440
 1023044:	15000017 	ldw	r20,0(r2)
 1023048:	2021883a 	mov	r16,r4
 102304c:	2827883a 	mov	r19,r5
 1023050:	101d7000 	call	101d700 <__locale_charset>
 1023054:	100f883a 	mov	r7,r2
 1023058:	dc800015 	stw	r18,0(sp)
 102305c:	980d883a 	mov	r6,r19
 1023060:	800b883a 	mov	r5,r16
 1023064:	8809883a 	mov	r4,r17
 1023068:	a03ee83a 	callr	r20
 102306c:	00ffffc4 	movi	r3,-1
 1023070:	10c0031e 	bne	r2,r3,1023080 <wcrtomb+0x74>
 1023074:	90000015 	stw	zero,0(r18)
 1023078:	00c02284 	movi	r3,138
 102307c:	88c00015 	stw	r3,0(r17)
 1023080:	dfc00917 	ldw	ra,36(sp)
 1023084:	dd000817 	ldw	r20,32(sp)
 1023088:	dcc00717 	ldw	r19,28(sp)
 102308c:	dc800617 	ldw	r18,24(sp)
 1023090:	dc400517 	ldw	r17,20(sp)
 1023094:	dc000417 	ldw	r16,16(sp)
 1023098:	dec00a04 	addi	sp,sp,40
 102309c:	f800283a 	ret
 10230a0:	008040f4 	movhi	r2,259
 10230a4:	10b2e004 	addi	r2,r2,-13440
 10230a8:	14000017 	ldw	r16,0(r2)
 10230ac:	101d7000 	call	101d700 <__locale_charset>
 10230b0:	100f883a 	mov	r7,r2
 10230b4:	dc800015 	stw	r18,0(sp)
 10230b8:	000d883a 	mov	r6,zero
 10230bc:	d9400104 	addi	r5,sp,4
 10230c0:	8809883a 	mov	r4,r17
 10230c4:	803ee83a 	callr	r16
 10230c8:	003fe806 	br	102306c <__alt_data_end+0xff02306c>

010230cc <__ascii_wctomb>:
 10230cc:	28000526 	beq	r5,zero,10230e4 <__ascii_wctomb+0x18>
 10230d0:	00803fc4 	movi	r2,255
 10230d4:	11800536 	bltu	r2,r6,10230ec <__ascii_wctomb+0x20>
 10230d8:	29800005 	stb	r6,0(r5)
 10230dc:	00800044 	movi	r2,1
 10230e0:	f800283a 	ret
 10230e4:	0005883a 	mov	r2,zero
 10230e8:	f800283a 	ret
 10230ec:	00802284 	movi	r2,138
 10230f0:	20800015 	stw	r2,0(r4)
 10230f4:	00bfffc4 	movi	r2,-1
 10230f8:	f800283a 	ret

010230fc <_wctomb_r>:
 10230fc:	008040f4 	movhi	r2,259
 1023100:	defff904 	addi	sp,sp,-28
 1023104:	10b2e004 	addi	r2,r2,-13440
 1023108:	dfc00615 	stw	ra,24(sp)
 102310c:	dc400515 	stw	r17,20(sp)
 1023110:	dc000415 	stw	r16,16(sp)
 1023114:	3823883a 	mov	r17,r7
 1023118:	14000017 	ldw	r16,0(r2)
 102311c:	d9000115 	stw	r4,4(sp)
 1023120:	d9400215 	stw	r5,8(sp)
 1023124:	d9800315 	stw	r6,12(sp)
 1023128:	101d7000 	call	101d700 <__locale_charset>
 102312c:	d9800317 	ldw	r6,12(sp)
 1023130:	d9400217 	ldw	r5,8(sp)
 1023134:	d9000117 	ldw	r4,4(sp)
 1023138:	100f883a 	mov	r7,r2
 102313c:	dc400015 	stw	r17,0(sp)
 1023140:	803ee83a 	callr	r16
 1023144:	dfc00617 	ldw	ra,24(sp)
 1023148:	dc400517 	ldw	r17,20(sp)
 102314c:	dc000417 	ldw	r16,16(sp)
 1023150:	dec00704 	addi	sp,sp,28
 1023154:	f800283a 	ret

01023158 <__udivdi3>:
 1023158:	defff504 	addi	sp,sp,-44
 102315c:	dcc00415 	stw	r19,16(sp)
 1023160:	dc000115 	stw	r16,4(sp)
 1023164:	dfc00a15 	stw	ra,40(sp)
 1023168:	df000915 	stw	fp,36(sp)
 102316c:	ddc00815 	stw	r23,32(sp)
 1023170:	dd800715 	stw	r22,28(sp)
 1023174:	dd400615 	stw	r21,24(sp)
 1023178:	dd000515 	stw	r20,20(sp)
 102317c:	dc800315 	stw	r18,12(sp)
 1023180:	dc400215 	stw	r17,8(sp)
 1023184:	2027883a 	mov	r19,r4
 1023188:	2821883a 	mov	r16,r5
 102318c:	3800411e 	bne	r7,zero,1023294 <__udivdi3+0x13c>
 1023190:	3023883a 	mov	r17,r6
 1023194:	2025883a 	mov	r18,r4
 1023198:	2980522e 	bgeu	r5,r6,10232e4 <__udivdi3+0x18c>
 102319c:	00bfffd4 	movui	r2,65535
 10231a0:	282d883a 	mov	r22,r5
 10231a4:	1180a836 	bltu	r2,r6,1023448 <__udivdi3+0x2f0>
 10231a8:	00803fc4 	movi	r2,255
 10231ac:	1185803a 	cmpltu	r2,r2,r6
 10231b0:	100490fa 	slli	r2,r2,3
 10231b4:	3086d83a 	srl	r3,r6,r2
 10231b8:	010040f4 	movhi	r4,259
 10231bc:	212b7c04 	addi	r4,r4,-21008
 10231c0:	20c7883a 	add	r3,r4,r3
 10231c4:	18c00003 	ldbu	r3,0(r3)
 10231c8:	1885883a 	add	r2,r3,r2
 10231cc:	00c00804 	movi	r3,32
 10231d0:	1887c83a 	sub	r3,r3,r2
 10231d4:	18000526 	beq	r3,zero,10231ec <__udivdi3+0x94>
 10231d8:	80e0983a 	sll	r16,r16,r3
 10231dc:	9884d83a 	srl	r2,r19,r2
 10231e0:	30e2983a 	sll	r17,r6,r3
 10231e4:	98e4983a 	sll	r18,r19,r3
 10231e8:	142cb03a 	or	r22,r2,r16
 10231ec:	882ad43a 	srli	r21,r17,16
 10231f0:	b009883a 	mov	r4,r22
 10231f4:	8d3fffcc 	andi	r20,r17,65535
 10231f8:	a80b883a 	mov	r5,r21
 10231fc:	1023d640 	call	1023d64 <__umodsi3>
 1023200:	b009883a 	mov	r4,r22
 1023204:	a80b883a 	mov	r5,r21
 1023208:	1027883a 	mov	r19,r2
 102320c:	1023d000 	call	1023d00 <__udivsi3>
 1023210:	102d883a 	mov	r22,r2
 1023214:	9826943a 	slli	r19,r19,16
 1023218:	9004d43a 	srli	r2,r18,16
 102321c:	a5a1383a 	mul	r16,r20,r22
 1023220:	14c4b03a 	or	r2,r2,r19
 1023224:	1400052e 	bgeu	r2,r16,102323c <__udivdi3+0xe4>
 1023228:	1445883a 	add	r2,r2,r17
 102322c:	b0ffffc4 	addi	r3,r22,-1
 1023230:	14400136 	bltu	r2,r17,1023238 <__udivdi3+0xe0>
 1023234:	14012336 	bltu	r2,r16,10236c4 <__udivdi3+0x56c>
 1023238:	182d883a 	mov	r22,r3
 102323c:	1421c83a 	sub	r16,r2,r16
 1023240:	a80b883a 	mov	r5,r21
 1023244:	8009883a 	mov	r4,r16
 1023248:	1023d640 	call	1023d64 <__umodsi3>
 102324c:	1027883a 	mov	r19,r2
 1023250:	a80b883a 	mov	r5,r21
 1023254:	8009883a 	mov	r4,r16
 1023258:	1023d000 	call	1023d00 <__udivsi3>
 102325c:	9826943a 	slli	r19,r19,16
 1023260:	a0a9383a 	mul	r20,r20,r2
 1023264:	94bfffcc 	andi	r18,r18,65535
 1023268:	94e4b03a 	or	r18,r18,r19
 102326c:	9500052e 	bgeu	r18,r20,1023284 <__udivdi3+0x12c>
 1023270:	8ca5883a 	add	r18,r17,r18
 1023274:	10ffffc4 	addi	r3,r2,-1
 1023278:	9440f136 	bltu	r18,r17,1023640 <__udivdi3+0x4e8>
 102327c:	9500f02e 	bgeu	r18,r20,1023640 <__udivdi3+0x4e8>
 1023280:	10bfff84 	addi	r2,r2,-2
 1023284:	b00c943a 	slli	r6,r22,16
 1023288:	0007883a 	mov	r3,zero
 102328c:	3084b03a 	or	r2,r6,r2
 1023290:	00005906 	br	10233f8 <__udivdi3+0x2a0>
 1023294:	29c05636 	bltu	r5,r7,10233f0 <__udivdi3+0x298>
 1023298:	00bfffd4 	movui	r2,65535
 102329c:	11c0622e 	bgeu	r2,r7,1023428 <__udivdi3+0x2d0>
 10232a0:	00804034 	movhi	r2,256
 10232a4:	10bfffc4 	addi	r2,r2,-1
 10232a8:	11c0ee36 	bltu	r2,r7,1023664 <__udivdi3+0x50c>
 10232ac:	00800404 	movi	r2,16
 10232b0:	3886d83a 	srl	r3,r7,r2
 10232b4:	010040f4 	movhi	r4,259
 10232b8:	212b7c04 	addi	r4,r4,-21008
 10232bc:	20c7883a 	add	r3,r4,r3
 10232c0:	18c00003 	ldbu	r3,0(r3)
 10232c4:	05400804 	movi	r21,32
 10232c8:	1885883a 	add	r2,r3,r2
 10232cc:	a8abc83a 	sub	r21,r21,r2
 10232d0:	a800621e 	bne	r21,zero,102345c <__udivdi3+0x304>
 10232d4:	3c00e936 	bltu	r7,r16,102367c <__udivdi3+0x524>
 10232d8:	9985403a 	cmpgeu	r2,r19,r6
 10232dc:	0007883a 	mov	r3,zero
 10232e0:	00004506 	br	10233f8 <__udivdi3+0x2a0>
 10232e4:	3000041e 	bne	r6,zero,10232f8 <__udivdi3+0x1a0>
 10232e8:	000b883a 	mov	r5,zero
 10232ec:	01000044 	movi	r4,1
 10232f0:	1023d000 	call	1023d00 <__udivsi3>
 10232f4:	1023883a 	mov	r17,r2
 10232f8:	00bfffd4 	movui	r2,65535
 10232fc:	14404e2e 	bgeu	r2,r17,1023438 <__udivdi3+0x2e0>
 1023300:	00804034 	movhi	r2,256
 1023304:	10bfffc4 	addi	r2,r2,-1
 1023308:	1440d836 	bltu	r2,r17,102366c <__udivdi3+0x514>
 102330c:	00800404 	movi	r2,16
 1023310:	8886d83a 	srl	r3,r17,r2
 1023314:	010040f4 	movhi	r4,259
 1023318:	212b7c04 	addi	r4,r4,-21008
 102331c:	20c7883a 	add	r3,r4,r3
 1023320:	18c00003 	ldbu	r3,0(r3)
 1023324:	1885883a 	add	r2,r3,r2
 1023328:	00c00804 	movi	r3,32
 102332c:	1887c83a 	sub	r3,r3,r2
 1023330:	18008f1e 	bne	r3,zero,1023570 <__udivdi3+0x418>
 1023334:	882ad43a 	srli	r21,r17,16
 1023338:	8461c83a 	sub	r16,r16,r17
 102333c:	8d3fffcc 	andi	r20,r17,65535
 1023340:	00c00044 	movi	r3,1
 1023344:	8009883a 	mov	r4,r16
 1023348:	a80b883a 	mov	r5,r21
 102334c:	d8c00015 	stw	r3,0(sp)
 1023350:	1023d640 	call	1023d64 <__umodsi3>
 1023354:	8009883a 	mov	r4,r16
 1023358:	a80b883a 	mov	r5,r21
 102335c:	1027883a 	mov	r19,r2
 1023360:	1023d000 	call	1023d00 <__udivsi3>
 1023364:	9826943a 	slli	r19,r19,16
 1023368:	9008d43a 	srli	r4,r18,16
 102336c:	1521383a 	mul	r16,r2,r20
 1023370:	102d883a 	mov	r22,r2
 1023374:	24c8b03a 	or	r4,r4,r19
 1023378:	d8c00017 	ldw	r3,0(sp)
 102337c:	2400052e 	bgeu	r4,r16,1023394 <__udivdi3+0x23c>
 1023380:	2449883a 	add	r4,r4,r17
 1023384:	b0bfffc4 	addi	r2,r22,-1
 1023388:	24400136 	bltu	r4,r17,1023390 <__udivdi3+0x238>
 102338c:	2400ca36 	bltu	r4,r16,10236b8 <__udivdi3+0x560>
 1023390:	102d883a 	mov	r22,r2
 1023394:	2421c83a 	sub	r16,r4,r16
 1023398:	a80b883a 	mov	r5,r21
 102339c:	8009883a 	mov	r4,r16
 10233a0:	d8c00015 	stw	r3,0(sp)
 10233a4:	1023d640 	call	1023d64 <__umodsi3>
 10233a8:	1027883a 	mov	r19,r2
 10233ac:	a80b883a 	mov	r5,r21
 10233b0:	8009883a 	mov	r4,r16
 10233b4:	1023d000 	call	1023d00 <__udivsi3>
 10233b8:	9826943a 	slli	r19,r19,16
 10233bc:	1529383a 	mul	r20,r2,r20
 10233c0:	94bfffcc 	andi	r18,r18,65535
 10233c4:	94e4b03a 	or	r18,r18,r19
 10233c8:	d8c00017 	ldw	r3,0(sp)
 10233cc:	9500052e 	bgeu	r18,r20,10233e4 <__udivdi3+0x28c>
 10233d0:	8ca5883a 	add	r18,r17,r18
 10233d4:	113fffc4 	addi	r4,r2,-1
 10233d8:	94409736 	bltu	r18,r17,1023638 <__udivdi3+0x4e0>
 10233dc:	9500962e 	bgeu	r18,r20,1023638 <__udivdi3+0x4e0>
 10233e0:	10bfff84 	addi	r2,r2,-2
 10233e4:	b00c943a 	slli	r6,r22,16
 10233e8:	3084b03a 	or	r2,r6,r2
 10233ec:	00000206 	br	10233f8 <__udivdi3+0x2a0>
 10233f0:	0007883a 	mov	r3,zero
 10233f4:	0005883a 	mov	r2,zero
 10233f8:	dfc00a17 	ldw	ra,40(sp)
 10233fc:	df000917 	ldw	fp,36(sp)
 1023400:	ddc00817 	ldw	r23,32(sp)
 1023404:	dd800717 	ldw	r22,28(sp)
 1023408:	dd400617 	ldw	r21,24(sp)
 102340c:	dd000517 	ldw	r20,20(sp)
 1023410:	dcc00417 	ldw	r19,16(sp)
 1023414:	dc800317 	ldw	r18,12(sp)
 1023418:	dc400217 	ldw	r17,8(sp)
 102341c:	dc000117 	ldw	r16,4(sp)
 1023420:	dec00b04 	addi	sp,sp,44
 1023424:	f800283a 	ret
 1023428:	00803fc4 	movi	r2,255
 102342c:	11c5803a 	cmpltu	r2,r2,r7
 1023430:	100490fa 	slli	r2,r2,3
 1023434:	003f9e06 	br	10232b0 <__alt_data_end+0xff0232b0>
 1023438:	00803fc4 	movi	r2,255
 102343c:	1445803a 	cmpltu	r2,r2,r17
 1023440:	100490fa 	slli	r2,r2,3
 1023444:	003fb206 	br	1023310 <__alt_data_end+0xff023310>
 1023448:	00804034 	movhi	r2,256
 102344c:	10bfffc4 	addi	r2,r2,-1
 1023450:	11808836 	bltu	r2,r6,1023674 <__udivdi3+0x51c>
 1023454:	00800404 	movi	r2,16
 1023458:	003f5606 	br	10231b4 <__alt_data_end+0xff0231b4>
 102345c:	30aed83a 	srl	r23,r6,r2
 1023460:	3d4e983a 	sll	r7,r7,r21
 1023464:	80acd83a 	srl	r22,r16,r2
 1023468:	9884d83a 	srl	r2,r19,r2
 102346c:	3deeb03a 	or	r23,r7,r23
 1023470:	b824d43a 	srli	r18,r23,16
 1023474:	8560983a 	sll	r16,r16,r21
 1023478:	b009883a 	mov	r4,r22
 102347c:	900b883a 	mov	r5,r18
 1023480:	3568983a 	sll	r20,r6,r21
 1023484:	1420b03a 	or	r16,r2,r16
 1023488:	1023d640 	call	1023d64 <__umodsi3>
 102348c:	b009883a 	mov	r4,r22
 1023490:	900b883a 	mov	r5,r18
 1023494:	1023883a 	mov	r17,r2
 1023498:	1023d000 	call	1023d00 <__udivsi3>
 102349c:	8808943a 	slli	r4,r17,16
 10234a0:	bf3fffcc 	andi	fp,r23,65535
 10234a4:	8006d43a 	srli	r3,r16,16
 10234a8:	e0a3383a 	mul	r17,fp,r2
 10234ac:	100d883a 	mov	r6,r2
 10234b0:	1906b03a 	or	r3,r3,r4
 10234b4:	1c40042e 	bgeu	r3,r17,10234c8 <__udivdi3+0x370>
 10234b8:	1dc7883a 	add	r3,r3,r23
 10234bc:	10bfffc4 	addi	r2,r2,-1
 10234c0:	1dc0752e 	bgeu	r3,r23,1023698 <__udivdi3+0x540>
 10234c4:	100d883a 	mov	r6,r2
 10234c8:	1c63c83a 	sub	r17,r3,r17
 10234cc:	900b883a 	mov	r5,r18
 10234d0:	8809883a 	mov	r4,r17
 10234d4:	d9800015 	stw	r6,0(sp)
 10234d8:	1023d640 	call	1023d64 <__umodsi3>
 10234dc:	102d883a 	mov	r22,r2
 10234e0:	8809883a 	mov	r4,r17
 10234e4:	900b883a 	mov	r5,r18
 10234e8:	1023d000 	call	1023d00 <__udivsi3>
 10234ec:	b02c943a 	slli	r22,r22,16
 10234f0:	e089383a 	mul	r4,fp,r2
 10234f4:	843fffcc 	andi	r16,r16,65535
 10234f8:	85a0b03a 	or	r16,r16,r22
 10234fc:	d9800017 	ldw	r6,0(sp)
 1023500:	8100042e 	bgeu	r16,r4,1023514 <__udivdi3+0x3bc>
 1023504:	85e1883a 	add	r16,r16,r23
 1023508:	10ffffc4 	addi	r3,r2,-1
 102350c:	85c05e2e 	bgeu	r16,r23,1023688 <__udivdi3+0x530>
 1023510:	1805883a 	mov	r2,r3
 1023514:	300c943a 	slli	r6,r6,16
 1023518:	a17fffcc 	andi	r5,r20,65535
 102351c:	a028d43a 	srli	r20,r20,16
 1023520:	3084b03a 	or	r2,r6,r2
 1023524:	10ffffcc 	andi	r3,r2,65535
 1023528:	100cd43a 	srli	r6,r2,16
 102352c:	194f383a 	mul	r7,r3,r5
 1023530:	1d07383a 	mul	r3,r3,r20
 1023534:	314b383a 	mul	r5,r6,r5
 1023538:	3810d43a 	srli	r8,r7,16
 102353c:	8121c83a 	sub	r16,r16,r4
 1023540:	1947883a 	add	r3,r3,r5
 1023544:	40c7883a 	add	r3,r8,r3
 1023548:	350d383a 	mul	r6,r6,r20
 102354c:	1940022e 	bgeu	r3,r5,1023558 <__udivdi3+0x400>
 1023550:	01000074 	movhi	r4,1
 1023554:	310d883a 	add	r6,r6,r4
 1023558:	1828d43a 	srli	r20,r3,16
 102355c:	a18d883a 	add	r6,r20,r6
 1023560:	81803e36 	bltu	r16,r6,102365c <__udivdi3+0x504>
 1023564:	81803826 	beq	r16,r6,1023648 <__udivdi3+0x4f0>
 1023568:	0007883a 	mov	r3,zero
 102356c:	003fa206 	br	10233f8 <__alt_data_end+0xff0233f8>
 1023570:	88e2983a 	sll	r17,r17,r3
 1023574:	80a8d83a 	srl	r20,r16,r2
 1023578:	80e0983a 	sll	r16,r16,r3
 102357c:	882ad43a 	srli	r21,r17,16
 1023580:	9884d83a 	srl	r2,r19,r2
 1023584:	a009883a 	mov	r4,r20
 1023588:	a80b883a 	mov	r5,r21
 102358c:	142eb03a 	or	r23,r2,r16
 1023590:	98e4983a 	sll	r18,r19,r3
 1023594:	1023d640 	call	1023d64 <__umodsi3>
 1023598:	a009883a 	mov	r4,r20
 102359c:	a80b883a 	mov	r5,r21
 10235a0:	1021883a 	mov	r16,r2
 10235a4:	1023d000 	call	1023d00 <__udivsi3>
 10235a8:	1039883a 	mov	fp,r2
 10235ac:	8d3fffcc 	andi	r20,r17,65535
 10235b0:	8020943a 	slli	r16,r16,16
 10235b4:	b804d43a 	srli	r2,r23,16
 10235b8:	a72d383a 	mul	r22,r20,fp
 10235bc:	1404b03a 	or	r2,r2,r16
 10235c0:	1580062e 	bgeu	r2,r22,10235dc <__udivdi3+0x484>
 10235c4:	1445883a 	add	r2,r2,r17
 10235c8:	e0ffffc4 	addi	r3,fp,-1
 10235cc:	14403836 	bltu	r2,r17,10236b0 <__udivdi3+0x558>
 10235d0:	1580372e 	bgeu	r2,r22,10236b0 <__udivdi3+0x558>
 10235d4:	e73fff84 	addi	fp,fp,-2
 10235d8:	1445883a 	add	r2,r2,r17
 10235dc:	15adc83a 	sub	r22,r2,r22
 10235e0:	a80b883a 	mov	r5,r21
 10235e4:	b009883a 	mov	r4,r22
 10235e8:	1023d640 	call	1023d64 <__umodsi3>
 10235ec:	1027883a 	mov	r19,r2
 10235f0:	b009883a 	mov	r4,r22
 10235f4:	a80b883a 	mov	r5,r21
 10235f8:	1023d000 	call	1023d00 <__udivsi3>
 10235fc:	9826943a 	slli	r19,r19,16
 1023600:	a0a1383a 	mul	r16,r20,r2
 1023604:	b93fffcc 	andi	r4,r23,65535
 1023608:	24c8b03a 	or	r4,r4,r19
 102360c:	2400062e 	bgeu	r4,r16,1023628 <__udivdi3+0x4d0>
 1023610:	2449883a 	add	r4,r4,r17
 1023614:	10ffffc4 	addi	r3,r2,-1
 1023618:	24402336 	bltu	r4,r17,10236a8 <__udivdi3+0x550>
 102361c:	2400222e 	bgeu	r4,r16,10236a8 <__udivdi3+0x550>
 1023620:	10bfff84 	addi	r2,r2,-2
 1023624:	2449883a 	add	r4,r4,r17
 1023628:	e038943a 	slli	fp,fp,16
 102362c:	2421c83a 	sub	r16,r4,r16
 1023630:	e086b03a 	or	r3,fp,r2
 1023634:	003f4306 	br	1023344 <__alt_data_end+0xff023344>
 1023638:	2005883a 	mov	r2,r4
 102363c:	003f6906 	br	10233e4 <__alt_data_end+0xff0233e4>
 1023640:	1805883a 	mov	r2,r3
 1023644:	003f0f06 	br	1023284 <__alt_data_end+0xff023284>
 1023648:	1806943a 	slli	r3,r3,16
 102364c:	9d66983a 	sll	r19,r19,r21
 1023650:	39ffffcc 	andi	r7,r7,65535
 1023654:	19c7883a 	add	r3,r3,r7
 1023658:	98ffc32e 	bgeu	r19,r3,1023568 <__alt_data_end+0xff023568>
 102365c:	10bfffc4 	addi	r2,r2,-1
 1023660:	003fc106 	br	1023568 <__alt_data_end+0xff023568>
 1023664:	00800604 	movi	r2,24
 1023668:	003f1106 	br	10232b0 <__alt_data_end+0xff0232b0>
 102366c:	00800604 	movi	r2,24
 1023670:	003f2706 	br	1023310 <__alt_data_end+0xff023310>
 1023674:	00800604 	movi	r2,24
 1023678:	003ece06 	br	10231b4 <__alt_data_end+0xff0231b4>
 102367c:	0007883a 	mov	r3,zero
 1023680:	00800044 	movi	r2,1
 1023684:	003f5c06 	br	10233f8 <__alt_data_end+0xff0233f8>
 1023688:	813fa12e 	bgeu	r16,r4,1023510 <__alt_data_end+0xff023510>
 102368c:	10bfff84 	addi	r2,r2,-2
 1023690:	85e1883a 	add	r16,r16,r23
 1023694:	003f9f06 	br	1023514 <__alt_data_end+0xff023514>
 1023698:	1c7f8a2e 	bgeu	r3,r17,10234c4 <__alt_data_end+0xff0234c4>
 102369c:	31bfff84 	addi	r6,r6,-2
 10236a0:	1dc7883a 	add	r3,r3,r23
 10236a4:	003f8806 	br	10234c8 <__alt_data_end+0xff0234c8>
 10236a8:	1805883a 	mov	r2,r3
 10236ac:	003fde06 	br	1023628 <__alt_data_end+0xff023628>
 10236b0:	1839883a 	mov	fp,r3
 10236b4:	003fc906 	br	10235dc <__alt_data_end+0xff0235dc>
 10236b8:	b5bfff84 	addi	r22,r22,-2
 10236bc:	2449883a 	add	r4,r4,r17
 10236c0:	003f3406 	br	1023394 <__alt_data_end+0xff023394>
 10236c4:	b5bfff84 	addi	r22,r22,-2
 10236c8:	1445883a 	add	r2,r2,r17
 10236cc:	003edb06 	br	102323c <__alt_data_end+0xff02323c>

010236d0 <__umoddi3>:
 10236d0:	defff404 	addi	sp,sp,-48
 10236d4:	df000a15 	stw	fp,40(sp)
 10236d8:	dc400315 	stw	r17,12(sp)
 10236dc:	dc000215 	stw	r16,8(sp)
 10236e0:	dfc00b15 	stw	ra,44(sp)
 10236e4:	ddc00915 	stw	r23,36(sp)
 10236e8:	dd800815 	stw	r22,32(sp)
 10236ec:	dd400715 	stw	r21,28(sp)
 10236f0:	dd000615 	stw	r20,24(sp)
 10236f4:	dcc00515 	stw	r19,20(sp)
 10236f8:	dc800415 	stw	r18,16(sp)
 10236fc:	2021883a 	mov	r16,r4
 1023700:	2823883a 	mov	r17,r5
 1023704:	2839883a 	mov	fp,r5
 1023708:	38003c1e 	bne	r7,zero,10237fc <__umoddi3+0x12c>
 102370c:	3027883a 	mov	r19,r6
 1023710:	2029883a 	mov	r20,r4
 1023714:	2980512e 	bgeu	r5,r6,102385c <__umoddi3+0x18c>
 1023718:	00bfffd4 	movui	r2,65535
 102371c:	11809a36 	bltu	r2,r6,1023988 <__umoddi3+0x2b8>
 1023720:	01003fc4 	movi	r4,255
 1023724:	2189803a 	cmpltu	r4,r4,r6
 1023728:	200890fa 	slli	r4,r4,3
 102372c:	3104d83a 	srl	r2,r6,r4
 1023730:	00c040f4 	movhi	r3,259
 1023734:	18eb7c04 	addi	r3,r3,-21008
 1023738:	1885883a 	add	r2,r3,r2
 102373c:	10c00003 	ldbu	r3,0(r2)
 1023740:	00800804 	movi	r2,32
 1023744:	1909883a 	add	r4,r3,r4
 1023748:	1125c83a 	sub	r18,r2,r4
 102374c:	90000526 	beq	r18,zero,1023764 <__umoddi3+0x94>
 1023750:	8ca2983a 	sll	r17,r17,r18
 1023754:	8108d83a 	srl	r4,r16,r4
 1023758:	34a6983a 	sll	r19,r6,r18
 102375c:	84a8983a 	sll	r20,r16,r18
 1023760:	2478b03a 	or	fp,r4,r17
 1023764:	982ed43a 	srli	r23,r19,16
 1023768:	e009883a 	mov	r4,fp
 102376c:	9dbfffcc 	andi	r22,r19,65535
 1023770:	b80b883a 	mov	r5,r23
 1023774:	1023d640 	call	1023d64 <__umodsi3>
 1023778:	e009883a 	mov	r4,fp
 102377c:	b80b883a 	mov	r5,r23
 1023780:	102b883a 	mov	r21,r2
 1023784:	1023d000 	call	1023d00 <__udivsi3>
 1023788:	a806943a 	slli	r3,r21,16
 102378c:	a008d43a 	srli	r4,r20,16
 1023790:	b085383a 	mul	r2,r22,r2
 1023794:	20c8b03a 	or	r4,r4,r3
 1023798:	2080032e 	bgeu	r4,r2,10237a8 <__umoddi3+0xd8>
 102379c:	24c9883a 	add	r4,r4,r19
 10237a0:	24c00136 	bltu	r4,r19,10237a8 <__umoddi3+0xd8>
 10237a4:	20811036 	bltu	r4,r2,1023be8 <__umoddi3+0x518>
 10237a8:	20abc83a 	sub	r21,r4,r2
 10237ac:	b80b883a 	mov	r5,r23
 10237b0:	a809883a 	mov	r4,r21
 10237b4:	1023d640 	call	1023d64 <__umodsi3>
 10237b8:	1023883a 	mov	r17,r2
 10237bc:	b80b883a 	mov	r5,r23
 10237c0:	a809883a 	mov	r4,r21
 10237c4:	1023d000 	call	1023d00 <__udivsi3>
 10237c8:	8822943a 	slli	r17,r17,16
 10237cc:	b085383a 	mul	r2,r22,r2
 10237d0:	a0ffffcc 	andi	r3,r20,65535
 10237d4:	1c46b03a 	or	r3,r3,r17
 10237d8:	1880042e 	bgeu	r3,r2,10237ec <__umoddi3+0x11c>
 10237dc:	1cc7883a 	add	r3,r3,r19
 10237e0:	1cc00236 	bltu	r3,r19,10237ec <__umoddi3+0x11c>
 10237e4:	1880012e 	bgeu	r3,r2,10237ec <__umoddi3+0x11c>
 10237e8:	1cc7883a 	add	r3,r3,r19
 10237ec:	1885c83a 	sub	r2,r3,r2
 10237f0:	1484d83a 	srl	r2,r2,r18
 10237f4:	0007883a 	mov	r3,zero
 10237f8:	00004f06 	br	1023938 <__umoddi3+0x268>
 10237fc:	29c04c36 	bltu	r5,r7,1023930 <__umoddi3+0x260>
 1023800:	00bfffd4 	movui	r2,65535
 1023804:	11c0582e 	bgeu	r2,r7,1023968 <__umoddi3+0x298>
 1023808:	00804034 	movhi	r2,256
 102380c:	10bfffc4 	addi	r2,r2,-1
 1023810:	11c0e736 	bltu	r2,r7,1023bb0 <__umoddi3+0x4e0>
 1023814:	01000404 	movi	r4,16
 1023818:	3904d83a 	srl	r2,r7,r4
 102381c:	00c040f4 	movhi	r3,259
 1023820:	18eb7c04 	addi	r3,r3,-21008
 1023824:	1885883a 	add	r2,r3,r2
 1023828:	14c00003 	ldbu	r19,0(r2)
 102382c:	00c00804 	movi	r3,32
 1023830:	9927883a 	add	r19,r19,r4
 1023834:	1ce9c83a 	sub	r20,r3,r19
 1023838:	a000581e 	bne	r20,zero,102399c <__umoddi3+0x2cc>
 102383c:	3c400136 	bltu	r7,r17,1023844 <__umoddi3+0x174>
 1023840:	8180eb36 	bltu	r16,r6,1023bf0 <__umoddi3+0x520>
 1023844:	8185c83a 	sub	r2,r16,r6
 1023848:	89e3c83a 	sub	r17,r17,r7
 102384c:	8089803a 	cmpltu	r4,r16,r2
 1023850:	8939c83a 	sub	fp,r17,r4
 1023854:	e007883a 	mov	r3,fp
 1023858:	00003706 	br	1023938 <__umoddi3+0x268>
 102385c:	3000041e 	bne	r6,zero,1023870 <__umoddi3+0x1a0>
 1023860:	000b883a 	mov	r5,zero
 1023864:	01000044 	movi	r4,1
 1023868:	1023d000 	call	1023d00 <__udivsi3>
 102386c:	1027883a 	mov	r19,r2
 1023870:	00bfffd4 	movui	r2,65535
 1023874:	14c0402e 	bgeu	r2,r19,1023978 <__umoddi3+0x2a8>
 1023878:	00804034 	movhi	r2,256
 102387c:	10bfffc4 	addi	r2,r2,-1
 1023880:	14c0cd36 	bltu	r2,r19,1023bb8 <__umoddi3+0x4e8>
 1023884:	00800404 	movi	r2,16
 1023888:	9886d83a 	srl	r3,r19,r2
 102388c:	010040f4 	movhi	r4,259
 1023890:	212b7c04 	addi	r4,r4,-21008
 1023894:	20c7883a 	add	r3,r4,r3
 1023898:	18c00003 	ldbu	r3,0(r3)
 102389c:	1887883a 	add	r3,r3,r2
 10238a0:	00800804 	movi	r2,32
 10238a4:	10e5c83a 	sub	r18,r2,r3
 10238a8:	9000901e 	bne	r18,zero,1023aec <__umoddi3+0x41c>
 10238ac:	982cd43a 	srli	r22,r19,16
 10238b0:	8ce3c83a 	sub	r17,r17,r19
 10238b4:	9d7fffcc 	andi	r21,r19,65535
 10238b8:	b00b883a 	mov	r5,r22
 10238bc:	8809883a 	mov	r4,r17
 10238c0:	1023d640 	call	1023d64 <__umodsi3>
 10238c4:	8809883a 	mov	r4,r17
 10238c8:	b00b883a 	mov	r5,r22
 10238cc:	1021883a 	mov	r16,r2
 10238d0:	1023d000 	call	1023d00 <__udivsi3>
 10238d4:	8006943a 	slli	r3,r16,16
 10238d8:	a008d43a 	srli	r4,r20,16
 10238dc:	1545383a 	mul	r2,r2,r21
 10238e0:	20c8b03a 	or	r4,r4,r3
 10238e4:	2080042e 	bgeu	r4,r2,10238f8 <__umoddi3+0x228>
 10238e8:	24c9883a 	add	r4,r4,r19
 10238ec:	24c00236 	bltu	r4,r19,10238f8 <__umoddi3+0x228>
 10238f0:	2080012e 	bgeu	r4,r2,10238f8 <__umoddi3+0x228>
 10238f4:	24c9883a 	add	r4,r4,r19
 10238f8:	20a1c83a 	sub	r16,r4,r2
 10238fc:	b00b883a 	mov	r5,r22
 1023900:	8009883a 	mov	r4,r16
 1023904:	1023d640 	call	1023d64 <__umodsi3>
 1023908:	1023883a 	mov	r17,r2
 102390c:	b00b883a 	mov	r5,r22
 1023910:	8009883a 	mov	r4,r16
 1023914:	1023d000 	call	1023d00 <__udivsi3>
 1023918:	8822943a 	slli	r17,r17,16
 102391c:	1545383a 	mul	r2,r2,r21
 1023920:	a53fffcc 	andi	r20,r20,65535
 1023924:	a446b03a 	or	r3,r20,r17
 1023928:	18bfb02e 	bgeu	r3,r2,10237ec <__alt_data_end+0xff0237ec>
 102392c:	003fab06 	br	10237dc <__alt_data_end+0xff0237dc>
 1023930:	2005883a 	mov	r2,r4
 1023934:	2807883a 	mov	r3,r5
 1023938:	dfc00b17 	ldw	ra,44(sp)
 102393c:	df000a17 	ldw	fp,40(sp)
 1023940:	ddc00917 	ldw	r23,36(sp)
 1023944:	dd800817 	ldw	r22,32(sp)
 1023948:	dd400717 	ldw	r21,28(sp)
 102394c:	dd000617 	ldw	r20,24(sp)
 1023950:	dcc00517 	ldw	r19,20(sp)
 1023954:	dc800417 	ldw	r18,16(sp)
 1023958:	dc400317 	ldw	r17,12(sp)
 102395c:	dc000217 	ldw	r16,8(sp)
 1023960:	dec00c04 	addi	sp,sp,48
 1023964:	f800283a 	ret
 1023968:	04c03fc4 	movi	r19,255
 102396c:	99c9803a 	cmpltu	r4,r19,r7
 1023970:	200890fa 	slli	r4,r4,3
 1023974:	003fa806 	br	1023818 <__alt_data_end+0xff023818>
 1023978:	00803fc4 	movi	r2,255
 102397c:	14c5803a 	cmpltu	r2,r2,r19
 1023980:	100490fa 	slli	r2,r2,3
 1023984:	003fc006 	br	1023888 <__alt_data_end+0xff023888>
 1023988:	00804034 	movhi	r2,256
 102398c:	10bfffc4 	addi	r2,r2,-1
 1023990:	11808b36 	bltu	r2,r6,1023bc0 <__umoddi3+0x4f0>
 1023994:	01000404 	movi	r4,16
 1023998:	003f6406 	br	102372c <__alt_data_end+0xff02372c>
 102399c:	34c4d83a 	srl	r2,r6,r19
 10239a0:	3d0e983a 	sll	r7,r7,r20
 10239a4:	8cf8d83a 	srl	fp,r17,r19
 10239a8:	8d10983a 	sll	r8,r17,r20
 10239ac:	38aab03a 	or	r21,r7,r2
 10239b0:	a82cd43a 	srli	r22,r21,16
 10239b4:	84e2d83a 	srl	r17,r16,r19
 10239b8:	e009883a 	mov	r4,fp
 10239bc:	b00b883a 	mov	r5,r22
 10239c0:	8a22b03a 	or	r17,r17,r8
 10239c4:	3524983a 	sll	r18,r6,r20
 10239c8:	1023d640 	call	1023d64 <__umodsi3>
 10239cc:	e009883a 	mov	r4,fp
 10239d0:	b00b883a 	mov	r5,r22
 10239d4:	102f883a 	mov	r23,r2
 10239d8:	1023d000 	call	1023d00 <__udivsi3>
 10239dc:	100d883a 	mov	r6,r2
 10239e0:	b808943a 	slli	r4,r23,16
 10239e4:	aa3fffcc 	andi	r8,r21,65535
 10239e8:	8804d43a 	srli	r2,r17,16
 10239ec:	41af383a 	mul	r23,r8,r6
 10239f0:	8520983a 	sll	r16,r16,r20
 10239f4:	1104b03a 	or	r2,r2,r4
 10239f8:	15c0042e 	bgeu	r2,r23,1023a0c <__umoddi3+0x33c>
 10239fc:	1545883a 	add	r2,r2,r21
 1023a00:	30ffffc4 	addi	r3,r6,-1
 1023a04:	1540742e 	bgeu	r2,r21,1023bd8 <__umoddi3+0x508>
 1023a08:	180d883a 	mov	r6,r3
 1023a0c:	15efc83a 	sub	r23,r2,r23
 1023a10:	b00b883a 	mov	r5,r22
 1023a14:	b809883a 	mov	r4,r23
 1023a18:	d9800115 	stw	r6,4(sp)
 1023a1c:	da000015 	stw	r8,0(sp)
 1023a20:	1023d640 	call	1023d64 <__umodsi3>
 1023a24:	b00b883a 	mov	r5,r22
 1023a28:	b809883a 	mov	r4,r23
 1023a2c:	1039883a 	mov	fp,r2
 1023a30:	1023d000 	call	1023d00 <__udivsi3>
 1023a34:	da000017 	ldw	r8,0(sp)
 1023a38:	e038943a 	slli	fp,fp,16
 1023a3c:	100b883a 	mov	r5,r2
 1023a40:	4089383a 	mul	r4,r8,r2
 1023a44:	8a3fffcc 	andi	r8,r17,65535
 1023a48:	4710b03a 	or	r8,r8,fp
 1023a4c:	d9800117 	ldw	r6,4(sp)
 1023a50:	4100042e 	bgeu	r8,r4,1023a64 <__umoddi3+0x394>
 1023a54:	4551883a 	add	r8,r8,r21
 1023a58:	10bfffc4 	addi	r2,r2,-1
 1023a5c:	45405a2e 	bgeu	r8,r21,1023bc8 <__umoddi3+0x4f8>
 1023a60:	100b883a 	mov	r5,r2
 1023a64:	300c943a 	slli	r6,r6,16
 1023a68:	91ffffcc 	andi	r7,r18,65535
 1023a6c:	9004d43a 	srli	r2,r18,16
 1023a70:	314cb03a 	or	r6,r6,r5
 1023a74:	317fffcc 	andi	r5,r6,65535
 1023a78:	300cd43a 	srli	r6,r6,16
 1023a7c:	29d3383a 	mul	r9,r5,r7
 1023a80:	288b383a 	mul	r5,r5,r2
 1023a84:	31cf383a 	mul	r7,r6,r7
 1023a88:	4806d43a 	srli	r3,r9,16
 1023a8c:	4111c83a 	sub	r8,r8,r4
 1023a90:	29cb883a 	add	r5,r5,r7
 1023a94:	194b883a 	add	r5,r3,r5
 1023a98:	3085383a 	mul	r2,r6,r2
 1023a9c:	29c0022e 	bgeu	r5,r7,1023aa8 <__umoddi3+0x3d8>
 1023aa0:	00c00074 	movhi	r3,1
 1023aa4:	10c5883a 	add	r2,r2,r3
 1023aa8:	2808d43a 	srli	r4,r5,16
 1023aac:	280a943a 	slli	r5,r5,16
 1023ab0:	4a7fffcc 	andi	r9,r9,65535
 1023ab4:	2085883a 	add	r2,r4,r2
 1023ab8:	2a4b883a 	add	r5,r5,r9
 1023abc:	40803636 	bltu	r8,r2,1023b98 <__umoddi3+0x4c8>
 1023ac0:	40804d26 	beq	r8,r2,1023bf8 <__umoddi3+0x528>
 1023ac4:	4089c83a 	sub	r4,r8,r2
 1023ac8:	280f883a 	mov	r7,r5
 1023acc:	81cfc83a 	sub	r7,r16,r7
 1023ad0:	81c7803a 	cmpltu	r3,r16,r7
 1023ad4:	20c7c83a 	sub	r3,r4,r3
 1023ad8:	1cc4983a 	sll	r2,r3,r19
 1023adc:	3d0ed83a 	srl	r7,r7,r20
 1023ae0:	1d06d83a 	srl	r3,r3,r20
 1023ae4:	11c4b03a 	or	r2,r2,r7
 1023ae8:	003f9306 	br	1023938 <__alt_data_end+0xff023938>
 1023aec:	9ca6983a 	sll	r19,r19,r18
 1023af0:	88e8d83a 	srl	r20,r17,r3
 1023af4:	80c4d83a 	srl	r2,r16,r3
 1023af8:	982cd43a 	srli	r22,r19,16
 1023afc:	8ca2983a 	sll	r17,r17,r18
 1023b00:	a009883a 	mov	r4,r20
 1023b04:	b00b883a 	mov	r5,r22
 1023b08:	1478b03a 	or	fp,r2,r17
 1023b0c:	1023d640 	call	1023d64 <__umodsi3>
 1023b10:	a009883a 	mov	r4,r20
 1023b14:	b00b883a 	mov	r5,r22
 1023b18:	1023883a 	mov	r17,r2
 1023b1c:	1023d000 	call	1023d00 <__udivsi3>
 1023b20:	9d7fffcc 	andi	r21,r19,65535
 1023b24:	880a943a 	slli	r5,r17,16
 1023b28:	e008d43a 	srli	r4,fp,16
 1023b2c:	a885383a 	mul	r2,r21,r2
 1023b30:	84a8983a 	sll	r20,r16,r18
 1023b34:	2148b03a 	or	r4,r4,r5
 1023b38:	2080042e 	bgeu	r4,r2,1023b4c <__umoddi3+0x47c>
 1023b3c:	24c9883a 	add	r4,r4,r19
 1023b40:	24c00236 	bltu	r4,r19,1023b4c <__umoddi3+0x47c>
 1023b44:	2080012e 	bgeu	r4,r2,1023b4c <__umoddi3+0x47c>
 1023b48:	24c9883a 	add	r4,r4,r19
 1023b4c:	20a3c83a 	sub	r17,r4,r2
 1023b50:	b00b883a 	mov	r5,r22
 1023b54:	8809883a 	mov	r4,r17
 1023b58:	1023d640 	call	1023d64 <__umodsi3>
 1023b5c:	102f883a 	mov	r23,r2
 1023b60:	8809883a 	mov	r4,r17
 1023b64:	b00b883a 	mov	r5,r22
 1023b68:	1023d000 	call	1023d00 <__udivsi3>
 1023b6c:	b82e943a 	slli	r23,r23,16
 1023b70:	a885383a 	mul	r2,r21,r2
 1023b74:	e13fffcc 	andi	r4,fp,65535
 1023b78:	25c8b03a 	or	r4,r4,r23
 1023b7c:	2080042e 	bgeu	r4,r2,1023b90 <__umoddi3+0x4c0>
 1023b80:	24c9883a 	add	r4,r4,r19
 1023b84:	24c00236 	bltu	r4,r19,1023b90 <__umoddi3+0x4c0>
 1023b88:	2080012e 	bgeu	r4,r2,1023b90 <__umoddi3+0x4c0>
 1023b8c:	24c9883a 	add	r4,r4,r19
 1023b90:	20a3c83a 	sub	r17,r4,r2
 1023b94:	003f4806 	br	10238b8 <__alt_data_end+0xff0238b8>
 1023b98:	2c8fc83a 	sub	r7,r5,r18
 1023b9c:	1545c83a 	sub	r2,r2,r21
 1023ba0:	29cb803a 	cmpltu	r5,r5,r7
 1023ba4:	1145c83a 	sub	r2,r2,r5
 1023ba8:	4089c83a 	sub	r4,r8,r2
 1023bac:	003fc706 	br	1023acc <__alt_data_end+0xff023acc>
 1023bb0:	01000604 	movi	r4,24
 1023bb4:	003f1806 	br	1023818 <__alt_data_end+0xff023818>
 1023bb8:	00800604 	movi	r2,24
 1023bbc:	003f3206 	br	1023888 <__alt_data_end+0xff023888>
 1023bc0:	01000604 	movi	r4,24
 1023bc4:	003ed906 	br	102372c <__alt_data_end+0xff02372c>
 1023bc8:	413fa52e 	bgeu	r8,r4,1023a60 <__alt_data_end+0xff023a60>
 1023bcc:	297fff84 	addi	r5,r5,-2
 1023bd0:	4551883a 	add	r8,r8,r21
 1023bd4:	003fa306 	br	1023a64 <__alt_data_end+0xff023a64>
 1023bd8:	15ff8b2e 	bgeu	r2,r23,1023a08 <__alt_data_end+0xff023a08>
 1023bdc:	31bfff84 	addi	r6,r6,-2
 1023be0:	1545883a 	add	r2,r2,r21
 1023be4:	003f8906 	br	1023a0c <__alt_data_end+0xff023a0c>
 1023be8:	24c9883a 	add	r4,r4,r19
 1023bec:	003eee06 	br	10237a8 <__alt_data_end+0xff0237a8>
 1023bf0:	8005883a 	mov	r2,r16
 1023bf4:	003f1706 	br	1023854 <__alt_data_end+0xff023854>
 1023bf8:	817fe736 	bltu	r16,r5,1023b98 <__alt_data_end+0xff023b98>
 1023bfc:	280f883a 	mov	r7,r5
 1023c00:	0009883a 	mov	r4,zero
 1023c04:	003fb106 	br	1023acc <__alt_data_end+0xff023acc>

01023c08 <__divsi3>:
 1023c08:	20001b16 	blt	r4,zero,1023c78 <__divsi3+0x70>
 1023c0c:	000f883a 	mov	r7,zero
 1023c10:	28001616 	blt	r5,zero,1023c6c <__divsi3+0x64>
 1023c14:	200d883a 	mov	r6,r4
 1023c18:	29001a2e 	bgeu	r5,r4,1023c84 <__divsi3+0x7c>
 1023c1c:	00800804 	movi	r2,32
 1023c20:	00c00044 	movi	r3,1
 1023c24:	00000106 	br	1023c2c <__divsi3+0x24>
 1023c28:	10000d26 	beq	r2,zero,1023c60 <__divsi3+0x58>
 1023c2c:	294b883a 	add	r5,r5,r5
 1023c30:	10bfffc4 	addi	r2,r2,-1
 1023c34:	18c7883a 	add	r3,r3,r3
 1023c38:	293ffb36 	bltu	r5,r4,1023c28 <__alt_data_end+0xff023c28>
 1023c3c:	0005883a 	mov	r2,zero
 1023c40:	18000726 	beq	r3,zero,1023c60 <__divsi3+0x58>
 1023c44:	0005883a 	mov	r2,zero
 1023c48:	31400236 	bltu	r6,r5,1023c54 <__divsi3+0x4c>
 1023c4c:	314dc83a 	sub	r6,r6,r5
 1023c50:	10c4b03a 	or	r2,r2,r3
 1023c54:	1806d07a 	srli	r3,r3,1
 1023c58:	280ad07a 	srli	r5,r5,1
 1023c5c:	183ffa1e 	bne	r3,zero,1023c48 <__alt_data_end+0xff023c48>
 1023c60:	38000126 	beq	r7,zero,1023c68 <__divsi3+0x60>
 1023c64:	0085c83a 	sub	r2,zero,r2
 1023c68:	f800283a 	ret
 1023c6c:	014bc83a 	sub	r5,zero,r5
 1023c70:	39c0005c 	xori	r7,r7,1
 1023c74:	003fe706 	br	1023c14 <__alt_data_end+0xff023c14>
 1023c78:	0109c83a 	sub	r4,zero,r4
 1023c7c:	01c00044 	movi	r7,1
 1023c80:	003fe306 	br	1023c10 <__alt_data_end+0xff023c10>
 1023c84:	00c00044 	movi	r3,1
 1023c88:	003fee06 	br	1023c44 <__alt_data_end+0xff023c44>

01023c8c <__modsi3>:
 1023c8c:	20001716 	blt	r4,zero,1023cec <__modsi3+0x60>
 1023c90:	000f883a 	mov	r7,zero
 1023c94:	2005883a 	mov	r2,r4
 1023c98:	28001216 	blt	r5,zero,1023ce4 <__modsi3+0x58>
 1023c9c:	2900162e 	bgeu	r5,r4,1023cf8 <__modsi3+0x6c>
 1023ca0:	01800804 	movi	r6,32
 1023ca4:	00c00044 	movi	r3,1
 1023ca8:	00000106 	br	1023cb0 <__modsi3+0x24>
 1023cac:	30000a26 	beq	r6,zero,1023cd8 <__modsi3+0x4c>
 1023cb0:	294b883a 	add	r5,r5,r5
 1023cb4:	31bfffc4 	addi	r6,r6,-1
 1023cb8:	18c7883a 	add	r3,r3,r3
 1023cbc:	293ffb36 	bltu	r5,r4,1023cac <__alt_data_end+0xff023cac>
 1023cc0:	18000526 	beq	r3,zero,1023cd8 <__modsi3+0x4c>
 1023cc4:	1806d07a 	srli	r3,r3,1
 1023cc8:	11400136 	bltu	r2,r5,1023cd0 <__modsi3+0x44>
 1023ccc:	1145c83a 	sub	r2,r2,r5
 1023cd0:	280ad07a 	srli	r5,r5,1
 1023cd4:	183ffb1e 	bne	r3,zero,1023cc4 <__alt_data_end+0xff023cc4>
 1023cd8:	38000126 	beq	r7,zero,1023ce0 <__modsi3+0x54>
 1023cdc:	0085c83a 	sub	r2,zero,r2
 1023ce0:	f800283a 	ret
 1023ce4:	014bc83a 	sub	r5,zero,r5
 1023ce8:	003fec06 	br	1023c9c <__alt_data_end+0xff023c9c>
 1023cec:	0109c83a 	sub	r4,zero,r4
 1023cf0:	01c00044 	movi	r7,1
 1023cf4:	003fe706 	br	1023c94 <__alt_data_end+0xff023c94>
 1023cf8:	00c00044 	movi	r3,1
 1023cfc:	003ff106 	br	1023cc4 <__alt_data_end+0xff023cc4>

01023d00 <__udivsi3>:
 1023d00:	200d883a 	mov	r6,r4
 1023d04:	2900152e 	bgeu	r5,r4,1023d5c <__udivsi3+0x5c>
 1023d08:	28001416 	blt	r5,zero,1023d5c <__udivsi3+0x5c>
 1023d0c:	00800804 	movi	r2,32
 1023d10:	00c00044 	movi	r3,1
 1023d14:	00000206 	br	1023d20 <__udivsi3+0x20>
 1023d18:	10000e26 	beq	r2,zero,1023d54 <__udivsi3+0x54>
 1023d1c:	28000516 	blt	r5,zero,1023d34 <__udivsi3+0x34>
 1023d20:	294b883a 	add	r5,r5,r5
 1023d24:	10bfffc4 	addi	r2,r2,-1
 1023d28:	18c7883a 	add	r3,r3,r3
 1023d2c:	293ffa36 	bltu	r5,r4,1023d18 <__alt_data_end+0xff023d18>
 1023d30:	18000826 	beq	r3,zero,1023d54 <__udivsi3+0x54>
 1023d34:	0005883a 	mov	r2,zero
 1023d38:	31400236 	bltu	r6,r5,1023d44 <__udivsi3+0x44>
 1023d3c:	314dc83a 	sub	r6,r6,r5
 1023d40:	10c4b03a 	or	r2,r2,r3
 1023d44:	1806d07a 	srli	r3,r3,1
 1023d48:	280ad07a 	srli	r5,r5,1
 1023d4c:	183ffa1e 	bne	r3,zero,1023d38 <__alt_data_end+0xff023d38>
 1023d50:	f800283a 	ret
 1023d54:	0005883a 	mov	r2,zero
 1023d58:	f800283a 	ret
 1023d5c:	00c00044 	movi	r3,1
 1023d60:	003ff406 	br	1023d34 <__alt_data_end+0xff023d34>

01023d64 <__umodsi3>:
 1023d64:	2005883a 	mov	r2,r4
 1023d68:	2900122e 	bgeu	r5,r4,1023db4 <__umodsi3+0x50>
 1023d6c:	28001116 	blt	r5,zero,1023db4 <__umodsi3+0x50>
 1023d70:	01800804 	movi	r6,32
 1023d74:	00c00044 	movi	r3,1
 1023d78:	00000206 	br	1023d84 <__umodsi3+0x20>
 1023d7c:	30000c26 	beq	r6,zero,1023db0 <__umodsi3+0x4c>
 1023d80:	28000516 	blt	r5,zero,1023d98 <__umodsi3+0x34>
 1023d84:	294b883a 	add	r5,r5,r5
 1023d88:	31bfffc4 	addi	r6,r6,-1
 1023d8c:	18c7883a 	add	r3,r3,r3
 1023d90:	293ffa36 	bltu	r5,r4,1023d7c <__alt_data_end+0xff023d7c>
 1023d94:	18000626 	beq	r3,zero,1023db0 <__umodsi3+0x4c>
 1023d98:	1806d07a 	srli	r3,r3,1
 1023d9c:	11400136 	bltu	r2,r5,1023da4 <__umodsi3+0x40>
 1023da0:	1145c83a 	sub	r2,r2,r5
 1023da4:	280ad07a 	srli	r5,r5,1
 1023da8:	183ffb1e 	bne	r3,zero,1023d98 <__alt_data_end+0xff023d98>
 1023dac:	f800283a 	ret
 1023db0:	f800283a 	ret
 1023db4:	00c00044 	movi	r3,1
 1023db8:	003ff706 	br	1023d98 <__alt_data_end+0xff023d98>

01023dbc <__adddf3>:
 1023dbc:	02c00434 	movhi	r11,16
 1023dc0:	5affffc4 	addi	r11,r11,-1
 1023dc4:	2806d7fa 	srli	r3,r5,31
 1023dc8:	2ad4703a 	and	r10,r5,r11
 1023dcc:	3ad2703a 	and	r9,r7,r11
 1023dd0:	3804d53a 	srli	r2,r7,20
 1023dd4:	3018d77a 	srli	r12,r6,29
 1023dd8:	280ad53a 	srli	r5,r5,20
 1023ddc:	501490fa 	slli	r10,r10,3
 1023de0:	2010d77a 	srli	r8,r4,29
 1023de4:	481290fa 	slli	r9,r9,3
 1023de8:	380ed7fa 	srli	r7,r7,31
 1023dec:	defffb04 	addi	sp,sp,-20
 1023df0:	dc800215 	stw	r18,8(sp)
 1023df4:	dc400115 	stw	r17,4(sp)
 1023df8:	dc000015 	stw	r16,0(sp)
 1023dfc:	dfc00415 	stw	ra,16(sp)
 1023e00:	dcc00315 	stw	r19,12(sp)
 1023e04:	1c803fcc 	andi	r18,r3,255
 1023e08:	2c01ffcc 	andi	r16,r5,2047
 1023e0c:	5210b03a 	or	r8,r10,r8
 1023e10:	202290fa 	slli	r17,r4,3
 1023e14:	1081ffcc 	andi	r2,r2,2047
 1023e18:	4b12b03a 	or	r9,r9,r12
 1023e1c:	300c90fa 	slli	r6,r6,3
 1023e20:	91c07526 	beq	r18,r7,1023ff8 <__adddf3+0x23c>
 1023e24:	8087c83a 	sub	r3,r16,r2
 1023e28:	00c0ab0e 	bge	zero,r3,10240d8 <__adddf3+0x31c>
 1023e2c:	10002a1e 	bne	r2,zero,1023ed8 <__adddf3+0x11c>
 1023e30:	4984b03a 	or	r2,r9,r6
 1023e34:	1000961e 	bne	r2,zero,1024090 <__adddf3+0x2d4>
 1023e38:	888001cc 	andi	r2,r17,7
 1023e3c:	10000726 	beq	r2,zero,1023e5c <__adddf3+0xa0>
 1023e40:	888003cc 	andi	r2,r17,15
 1023e44:	00c00104 	movi	r3,4
 1023e48:	10c00426 	beq	r2,r3,1023e5c <__adddf3+0xa0>
 1023e4c:	88c7883a 	add	r3,r17,r3
 1023e50:	1c63803a 	cmpltu	r17,r3,r17
 1023e54:	4451883a 	add	r8,r8,r17
 1023e58:	1823883a 	mov	r17,r3
 1023e5c:	4080202c 	andhi	r2,r8,128
 1023e60:	10005926 	beq	r2,zero,1023fc8 <__adddf3+0x20c>
 1023e64:	84000044 	addi	r16,r16,1
 1023e68:	0081ffc4 	movi	r2,2047
 1023e6c:	8080ba26 	beq	r16,r2,1024158 <__adddf3+0x39c>
 1023e70:	00bfe034 	movhi	r2,65408
 1023e74:	10bfffc4 	addi	r2,r2,-1
 1023e78:	4090703a 	and	r8,r8,r2
 1023e7c:	4004977a 	slli	r2,r8,29
 1023e80:	4010927a 	slli	r8,r8,9
 1023e84:	8822d0fa 	srli	r17,r17,3
 1023e88:	8401ffcc 	andi	r16,r16,2047
 1023e8c:	4010d33a 	srli	r8,r8,12
 1023e90:	9007883a 	mov	r3,r18
 1023e94:	1444b03a 	or	r2,r2,r17
 1023e98:	8401ffcc 	andi	r16,r16,2047
 1023e9c:	8020953a 	slli	r16,r16,20
 1023ea0:	18c03fcc 	andi	r3,r3,255
 1023ea4:	01000434 	movhi	r4,16
 1023ea8:	213fffc4 	addi	r4,r4,-1
 1023eac:	180697fa 	slli	r3,r3,31
 1023eb0:	4110703a 	and	r8,r8,r4
 1023eb4:	4410b03a 	or	r8,r8,r16
 1023eb8:	40c6b03a 	or	r3,r8,r3
 1023ebc:	dfc00417 	ldw	ra,16(sp)
 1023ec0:	dcc00317 	ldw	r19,12(sp)
 1023ec4:	dc800217 	ldw	r18,8(sp)
 1023ec8:	dc400117 	ldw	r17,4(sp)
 1023ecc:	dc000017 	ldw	r16,0(sp)
 1023ed0:	dec00504 	addi	sp,sp,20
 1023ed4:	f800283a 	ret
 1023ed8:	0081ffc4 	movi	r2,2047
 1023edc:	80bfd626 	beq	r16,r2,1023e38 <__alt_data_end+0xff023e38>
 1023ee0:	4a402034 	orhi	r9,r9,128
 1023ee4:	00800e04 	movi	r2,56
 1023ee8:	10c09f16 	blt	r2,r3,1024168 <__adddf3+0x3ac>
 1023eec:	008007c4 	movi	r2,31
 1023ef0:	10c0c216 	blt	r2,r3,10241fc <__adddf3+0x440>
 1023ef4:	00800804 	movi	r2,32
 1023ef8:	10c5c83a 	sub	r2,r2,r3
 1023efc:	488a983a 	sll	r5,r9,r2
 1023f00:	30c8d83a 	srl	r4,r6,r3
 1023f04:	3084983a 	sll	r2,r6,r2
 1023f08:	48c6d83a 	srl	r3,r9,r3
 1023f0c:	290cb03a 	or	r6,r5,r4
 1023f10:	1004c03a 	cmpne	r2,r2,zero
 1023f14:	308cb03a 	or	r6,r6,r2
 1023f18:	898dc83a 	sub	r6,r17,r6
 1023f1c:	89a3803a 	cmpltu	r17,r17,r6
 1023f20:	40d1c83a 	sub	r8,r8,r3
 1023f24:	4451c83a 	sub	r8,r8,r17
 1023f28:	3023883a 	mov	r17,r6
 1023f2c:	4080202c 	andhi	r2,r8,128
 1023f30:	10002326 	beq	r2,zero,1023fc0 <__adddf3+0x204>
 1023f34:	04c02034 	movhi	r19,128
 1023f38:	9cffffc4 	addi	r19,r19,-1
 1023f3c:	44e6703a 	and	r19,r8,r19
 1023f40:	98007626 	beq	r19,zero,102411c <__adddf3+0x360>
 1023f44:	9809883a 	mov	r4,r19
 1023f48:	10263c00 	call	10263c0 <__clzsi2>
 1023f4c:	10fffe04 	addi	r3,r2,-8
 1023f50:	010007c4 	movi	r4,31
 1023f54:	20c07716 	blt	r4,r3,1024134 <__adddf3+0x378>
 1023f58:	00800804 	movi	r2,32
 1023f5c:	10c5c83a 	sub	r2,r2,r3
 1023f60:	8884d83a 	srl	r2,r17,r2
 1023f64:	98d0983a 	sll	r8,r19,r3
 1023f68:	88e2983a 	sll	r17,r17,r3
 1023f6c:	1204b03a 	or	r2,r2,r8
 1023f70:	1c007416 	blt	r3,r16,1024144 <__adddf3+0x388>
 1023f74:	1c21c83a 	sub	r16,r3,r16
 1023f78:	82000044 	addi	r8,r16,1
 1023f7c:	00c007c4 	movi	r3,31
 1023f80:	1a009116 	blt	r3,r8,10241c8 <__adddf3+0x40c>
 1023f84:	00c00804 	movi	r3,32
 1023f88:	1a07c83a 	sub	r3,r3,r8
 1023f8c:	8a08d83a 	srl	r4,r17,r8
 1023f90:	88e2983a 	sll	r17,r17,r3
 1023f94:	10c6983a 	sll	r3,r2,r3
 1023f98:	1210d83a 	srl	r8,r2,r8
 1023f9c:	8804c03a 	cmpne	r2,r17,zero
 1023fa0:	1906b03a 	or	r3,r3,r4
 1023fa4:	18a2b03a 	or	r17,r3,r2
 1023fa8:	0021883a 	mov	r16,zero
 1023fac:	003fa206 	br	1023e38 <__alt_data_end+0xff023e38>
 1023fb0:	1890b03a 	or	r8,r3,r2
 1023fb4:	40017d26 	beq	r8,zero,10245ac <__adddf3+0x7f0>
 1023fb8:	1011883a 	mov	r8,r2
 1023fbc:	1823883a 	mov	r17,r3
 1023fc0:	888001cc 	andi	r2,r17,7
 1023fc4:	103f9e1e 	bne	r2,zero,1023e40 <__alt_data_end+0xff023e40>
 1023fc8:	4004977a 	slli	r2,r8,29
 1023fcc:	8822d0fa 	srli	r17,r17,3
 1023fd0:	4010d0fa 	srli	r8,r8,3
 1023fd4:	9007883a 	mov	r3,r18
 1023fd8:	1444b03a 	or	r2,r2,r17
 1023fdc:	0101ffc4 	movi	r4,2047
 1023fe0:	81002426 	beq	r16,r4,1024074 <__adddf3+0x2b8>
 1023fe4:	8120703a 	and	r16,r16,r4
 1023fe8:	01000434 	movhi	r4,16
 1023fec:	213fffc4 	addi	r4,r4,-1
 1023ff0:	4110703a 	and	r8,r8,r4
 1023ff4:	003fa806 	br	1023e98 <__alt_data_end+0xff023e98>
 1023ff8:	8089c83a 	sub	r4,r16,r2
 1023ffc:	01005e0e 	bge	zero,r4,1024178 <__adddf3+0x3bc>
 1024000:	10002b26 	beq	r2,zero,10240b0 <__adddf3+0x2f4>
 1024004:	0081ffc4 	movi	r2,2047
 1024008:	80bf8b26 	beq	r16,r2,1023e38 <__alt_data_end+0xff023e38>
 102400c:	4a402034 	orhi	r9,r9,128
 1024010:	00800e04 	movi	r2,56
 1024014:	1100a40e 	bge	r2,r4,10242a8 <__adddf3+0x4ec>
 1024018:	498cb03a 	or	r6,r9,r6
 102401c:	300ac03a 	cmpne	r5,r6,zero
 1024020:	0013883a 	mov	r9,zero
 1024024:	2c4b883a 	add	r5,r5,r17
 1024028:	2c63803a 	cmpltu	r17,r5,r17
 102402c:	4a11883a 	add	r8,r9,r8
 1024030:	8a11883a 	add	r8,r17,r8
 1024034:	2823883a 	mov	r17,r5
 1024038:	4080202c 	andhi	r2,r8,128
 102403c:	103fe026 	beq	r2,zero,1023fc0 <__alt_data_end+0xff023fc0>
 1024040:	84000044 	addi	r16,r16,1
 1024044:	0081ffc4 	movi	r2,2047
 1024048:	8080d226 	beq	r16,r2,1024394 <__adddf3+0x5d8>
 102404c:	00bfe034 	movhi	r2,65408
 1024050:	10bfffc4 	addi	r2,r2,-1
 1024054:	4090703a 	and	r8,r8,r2
 1024058:	880ad07a 	srli	r5,r17,1
 102405c:	400897fa 	slli	r4,r8,31
 1024060:	88c0004c 	andi	r3,r17,1
 1024064:	28e2b03a 	or	r17,r5,r3
 1024068:	4010d07a 	srli	r8,r8,1
 102406c:	2462b03a 	or	r17,r4,r17
 1024070:	003f7106 	br	1023e38 <__alt_data_end+0xff023e38>
 1024074:	4088b03a 	or	r4,r8,r2
 1024078:	20014526 	beq	r4,zero,1024590 <__adddf3+0x7d4>
 102407c:	01000434 	movhi	r4,16
 1024080:	42000234 	orhi	r8,r8,8
 1024084:	213fffc4 	addi	r4,r4,-1
 1024088:	4110703a 	and	r8,r8,r4
 102408c:	003f8206 	br	1023e98 <__alt_data_end+0xff023e98>
 1024090:	18ffffc4 	addi	r3,r3,-1
 1024094:	1800491e 	bne	r3,zero,10241bc <__adddf3+0x400>
 1024098:	898bc83a 	sub	r5,r17,r6
 102409c:	8963803a 	cmpltu	r17,r17,r5
 10240a0:	4251c83a 	sub	r8,r8,r9
 10240a4:	4451c83a 	sub	r8,r8,r17
 10240a8:	2823883a 	mov	r17,r5
 10240ac:	003f9f06 	br	1023f2c <__alt_data_end+0xff023f2c>
 10240b0:	4984b03a 	or	r2,r9,r6
 10240b4:	103f6026 	beq	r2,zero,1023e38 <__alt_data_end+0xff023e38>
 10240b8:	213fffc4 	addi	r4,r4,-1
 10240bc:	2000931e 	bne	r4,zero,102430c <__adddf3+0x550>
 10240c0:	898d883a 	add	r6,r17,r6
 10240c4:	3463803a 	cmpltu	r17,r6,r17
 10240c8:	4251883a 	add	r8,r8,r9
 10240cc:	8a11883a 	add	r8,r17,r8
 10240d0:	3023883a 	mov	r17,r6
 10240d4:	003fd806 	br	1024038 <__alt_data_end+0xff024038>
 10240d8:	1800541e 	bne	r3,zero,102422c <__adddf3+0x470>
 10240dc:	80800044 	addi	r2,r16,1
 10240e0:	1081ffcc 	andi	r2,r2,2047
 10240e4:	00c00044 	movi	r3,1
 10240e8:	1880a00e 	bge	r3,r2,102436c <__adddf3+0x5b0>
 10240ec:	8989c83a 	sub	r4,r17,r6
 10240f0:	8905803a 	cmpltu	r2,r17,r4
 10240f4:	4267c83a 	sub	r19,r8,r9
 10240f8:	98a7c83a 	sub	r19,r19,r2
 10240fc:	9880202c 	andhi	r2,r19,128
 1024100:	10006326 	beq	r2,zero,1024290 <__adddf3+0x4d4>
 1024104:	3463c83a 	sub	r17,r6,r17
 1024108:	4a07c83a 	sub	r3,r9,r8
 102410c:	344d803a 	cmpltu	r6,r6,r17
 1024110:	19a7c83a 	sub	r19,r3,r6
 1024114:	3825883a 	mov	r18,r7
 1024118:	983f8a1e 	bne	r19,zero,1023f44 <__alt_data_end+0xff023f44>
 102411c:	8809883a 	mov	r4,r17
 1024120:	10263c00 	call	10263c0 <__clzsi2>
 1024124:	10800804 	addi	r2,r2,32
 1024128:	10fffe04 	addi	r3,r2,-8
 102412c:	010007c4 	movi	r4,31
 1024130:	20ff890e 	bge	r4,r3,1023f58 <__alt_data_end+0xff023f58>
 1024134:	10bff604 	addi	r2,r2,-40
 1024138:	8884983a 	sll	r2,r17,r2
 102413c:	0023883a 	mov	r17,zero
 1024140:	1c3f8c0e 	bge	r3,r16,1023f74 <__alt_data_end+0xff023f74>
 1024144:	023fe034 	movhi	r8,65408
 1024148:	423fffc4 	addi	r8,r8,-1
 102414c:	80e1c83a 	sub	r16,r16,r3
 1024150:	1210703a 	and	r8,r2,r8
 1024154:	003f3806 	br	1023e38 <__alt_data_end+0xff023e38>
 1024158:	9007883a 	mov	r3,r18
 102415c:	0011883a 	mov	r8,zero
 1024160:	0005883a 	mov	r2,zero
 1024164:	003f4c06 	br	1023e98 <__alt_data_end+0xff023e98>
 1024168:	498cb03a 	or	r6,r9,r6
 102416c:	300cc03a 	cmpne	r6,r6,zero
 1024170:	0007883a 	mov	r3,zero
 1024174:	003f6806 	br	1023f18 <__alt_data_end+0xff023f18>
 1024178:	20009c1e 	bne	r4,zero,10243ec <__adddf3+0x630>
 102417c:	80800044 	addi	r2,r16,1
 1024180:	1141ffcc 	andi	r5,r2,2047
 1024184:	01000044 	movi	r4,1
 1024188:	2140670e 	bge	r4,r5,1024328 <__adddf3+0x56c>
 102418c:	0101ffc4 	movi	r4,2047
 1024190:	11007f26 	beq	r2,r4,1024390 <__adddf3+0x5d4>
 1024194:	898d883a 	add	r6,r17,r6
 1024198:	4247883a 	add	r3,r8,r9
 102419c:	3451803a 	cmpltu	r8,r6,r17
 10241a0:	40d1883a 	add	r8,r8,r3
 10241a4:	402297fa 	slli	r17,r8,31
 10241a8:	300cd07a 	srli	r6,r6,1
 10241ac:	4010d07a 	srli	r8,r8,1
 10241b0:	1021883a 	mov	r16,r2
 10241b4:	89a2b03a 	or	r17,r17,r6
 10241b8:	003f1f06 	br	1023e38 <__alt_data_end+0xff023e38>
 10241bc:	0081ffc4 	movi	r2,2047
 10241c0:	80bf481e 	bne	r16,r2,1023ee4 <__alt_data_end+0xff023ee4>
 10241c4:	003f1c06 	br	1023e38 <__alt_data_end+0xff023e38>
 10241c8:	843ff844 	addi	r16,r16,-31
 10241cc:	01000804 	movi	r4,32
 10241d0:	1406d83a 	srl	r3,r2,r16
 10241d4:	41005026 	beq	r8,r4,1024318 <__adddf3+0x55c>
 10241d8:	01001004 	movi	r4,64
 10241dc:	2211c83a 	sub	r8,r4,r8
 10241e0:	1204983a 	sll	r2,r2,r8
 10241e4:	88a2b03a 	or	r17,r17,r2
 10241e8:	8822c03a 	cmpne	r17,r17,zero
 10241ec:	1c62b03a 	or	r17,r3,r17
 10241f0:	0011883a 	mov	r8,zero
 10241f4:	0021883a 	mov	r16,zero
 10241f8:	003f7106 	br	1023fc0 <__alt_data_end+0xff023fc0>
 10241fc:	193ff804 	addi	r4,r3,-32
 1024200:	00800804 	movi	r2,32
 1024204:	4908d83a 	srl	r4,r9,r4
 1024208:	18804526 	beq	r3,r2,1024320 <__adddf3+0x564>
 102420c:	00801004 	movi	r2,64
 1024210:	10c5c83a 	sub	r2,r2,r3
 1024214:	4886983a 	sll	r3,r9,r2
 1024218:	198cb03a 	or	r6,r3,r6
 102421c:	300cc03a 	cmpne	r6,r6,zero
 1024220:	218cb03a 	or	r6,r4,r6
 1024224:	0007883a 	mov	r3,zero
 1024228:	003f3b06 	br	1023f18 <__alt_data_end+0xff023f18>
 102422c:	80002a26 	beq	r16,zero,10242d8 <__adddf3+0x51c>
 1024230:	0101ffc4 	movi	r4,2047
 1024234:	11006826 	beq	r2,r4,10243d8 <__adddf3+0x61c>
 1024238:	00c7c83a 	sub	r3,zero,r3
 102423c:	42002034 	orhi	r8,r8,128
 1024240:	01000e04 	movi	r4,56
 1024244:	20c07c16 	blt	r4,r3,1024438 <__adddf3+0x67c>
 1024248:	010007c4 	movi	r4,31
 102424c:	20c0da16 	blt	r4,r3,10245b8 <__adddf3+0x7fc>
 1024250:	01000804 	movi	r4,32
 1024254:	20c9c83a 	sub	r4,r4,r3
 1024258:	4114983a 	sll	r10,r8,r4
 102425c:	88cad83a 	srl	r5,r17,r3
 1024260:	8908983a 	sll	r4,r17,r4
 1024264:	40c6d83a 	srl	r3,r8,r3
 1024268:	5162b03a 	or	r17,r10,r5
 102426c:	2008c03a 	cmpne	r4,r4,zero
 1024270:	8922b03a 	or	r17,r17,r4
 1024274:	3463c83a 	sub	r17,r6,r17
 1024278:	48c7c83a 	sub	r3,r9,r3
 102427c:	344d803a 	cmpltu	r6,r6,r17
 1024280:	1991c83a 	sub	r8,r3,r6
 1024284:	1021883a 	mov	r16,r2
 1024288:	3825883a 	mov	r18,r7
 102428c:	003f2706 	br	1023f2c <__alt_data_end+0xff023f2c>
 1024290:	24d0b03a 	or	r8,r4,r19
 1024294:	40001b1e 	bne	r8,zero,1024304 <__adddf3+0x548>
 1024298:	0005883a 	mov	r2,zero
 102429c:	0007883a 	mov	r3,zero
 10242a0:	0021883a 	mov	r16,zero
 10242a4:	003f4d06 	br	1023fdc <__alt_data_end+0xff023fdc>
 10242a8:	008007c4 	movi	r2,31
 10242ac:	11003c16 	blt	r2,r4,10243a0 <__adddf3+0x5e4>
 10242b0:	00800804 	movi	r2,32
 10242b4:	1105c83a 	sub	r2,r2,r4
 10242b8:	488e983a 	sll	r7,r9,r2
 10242bc:	310ad83a 	srl	r5,r6,r4
 10242c0:	3084983a 	sll	r2,r6,r2
 10242c4:	4912d83a 	srl	r9,r9,r4
 10242c8:	394ab03a 	or	r5,r7,r5
 10242cc:	1004c03a 	cmpne	r2,r2,zero
 10242d0:	288ab03a 	or	r5,r5,r2
 10242d4:	003f5306 	br	1024024 <__alt_data_end+0xff024024>
 10242d8:	4448b03a 	or	r4,r8,r17
 10242dc:	20003e26 	beq	r4,zero,10243d8 <__adddf3+0x61c>
 10242e0:	00c6303a 	nor	r3,zero,r3
 10242e4:	18003a1e 	bne	r3,zero,10243d0 <__adddf3+0x614>
 10242e8:	3463c83a 	sub	r17,r6,r17
 10242ec:	4a07c83a 	sub	r3,r9,r8
 10242f0:	344d803a 	cmpltu	r6,r6,r17
 10242f4:	1991c83a 	sub	r8,r3,r6
 10242f8:	1021883a 	mov	r16,r2
 10242fc:	3825883a 	mov	r18,r7
 1024300:	003f0a06 	br	1023f2c <__alt_data_end+0xff023f2c>
 1024304:	2023883a 	mov	r17,r4
 1024308:	003f0d06 	br	1023f40 <__alt_data_end+0xff023f40>
 102430c:	0081ffc4 	movi	r2,2047
 1024310:	80bf3f1e 	bne	r16,r2,1024010 <__alt_data_end+0xff024010>
 1024314:	003ec806 	br	1023e38 <__alt_data_end+0xff023e38>
 1024318:	0005883a 	mov	r2,zero
 102431c:	003fb106 	br	10241e4 <__alt_data_end+0xff0241e4>
 1024320:	0007883a 	mov	r3,zero
 1024324:	003fbc06 	br	1024218 <__alt_data_end+0xff024218>
 1024328:	4444b03a 	or	r2,r8,r17
 102432c:	8000871e 	bne	r16,zero,102454c <__adddf3+0x790>
 1024330:	1000ba26 	beq	r2,zero,102461c <__adddf3+0x860>
 1024334:	4984b03a 	or	r2,r9,r6
 1024338:	103ebf26 	beq	r2,zero,1023e38 <__alt_data_end+0xff023e38>
 102433c:	8985883a 	add	r2,r17,r6
 1024340:	4247883a 	add	r3,r8,r9
 1024344:	1451803a 	cmpltu	r8,r2,r17
 1024348:	40d1883a 	add	r8,r8,r3
 102434c:	40c0202c 	andhi	r3,r8,128
 1024350:	1023883a 	mov	r17,r2
 1024354:	183f1a26 	beq	r3,zero,1023fc0 <__alt_data_end+0xff023fc0>
 1024358:	00bfe034 	movhi	r2,65408
 102435c:	10bfffc4 	addi	r2,r2,-1
 1024360:	2021883a 	mov	r16,r4
 1024364:	4090703a 	and	r8,r8,r2
 1024368:	003eb306 	br	1023e38 <__alt_data_end+0xff023e38>
 102436c:	4444b03a 	or	r2,r8,r17
 1024370:	8000291e 	bne	r16,zero,1024418 <__adddf3+0x65c>
 1024374:	10004b1e 	bne	r2,zero,10244a4 <__adddf3+0x6e8>
 1024378:	4990b03a 	or	r8,r9,r6
 102437c:	40008b26 	beq	r8,zero,10245ac <__adddf3+0x7f0>
 1024380:	4811883a 	mov	r8,r9
 1024384:	3023883a 	mov	r17,r6
 1024388:	3825883a 	mov	r18,r7
 102438c:	003eaa06 	br	1023e38 <__alt_data_end+0xff023e38>
 1024390:	1021883a 	mov	r16,r2
 1024394:	0011883a 	mov	r8,zero
 1024398:	0005883a 	mov	r2,zero
 102439c:	003f0f06 	br	1023fdc <__alt_data_end+0xff023fdc>
 10243a0:	217ff804 	addi	r5,r4,-32
 10243a4:	00800804 	movi	r2,32
 10243a8:	494ad83a 	srl	r5,r9,r5
 10243ac:	20807d26 	beq	r4,r2,10245a4 <__adddf3+0x7e8>
 10243b0:	00801004 	movi	r2,64
 10243b4:	1109c83a 	sub	r4,r2,r4
 10243b8:	4912983a 	sll	r9,r9,r4
 10243bc:	498cb03a 	or	r6,r9,r6
 10243c0:	300cc03a 	cmpne	r6,r6,zero
 10243c4:	298ab03a 	or	r5,r5,r6
 10243c8:	0013883a 	mov	r9,zero
 10243cc:	003f1506 	br	1024024 <__alt_data_end+0xff024024>
 10243d0:	0101ffc4 	movi	r4,2047
 10243d4:	113f9a1e 	bne	r2,r4,1024240 <__alt_data_end+0xff024240>
 10243d8:	4811883a 	mov	r8,r9
 10243dc:	3023883a 	mov	r17,r6
 10243e0:	1021883a 	mov	r16,r2
 10243e4:	3825883a 	mov	r18,r7
 10243e8:	003e9306 	br	1023e38 <__alt_data_end+0xff023e38>
 10243ec:	8000161e 	bne	r16,zero,1024448 <__adddf3+0x68c>
 10243f0:	444ab03a 	or	r5,r8,r17
 10243f4:	28005126 	beq	r5,zero,102453c <__adddf3+0x780>
 10243f8:	0108303a 	nor	r4,zero,r4
 10243fc:	20004d1e 	bne	r4,zero,1024534 <__adddf3+0x778>
 1024400:	89a3883a 	add	r17,r17,r6
 1024404:	4253883a 	add	r9,r8,r9
 1024408:	898d803a 	cmpltu	r6,r17,r6
 102440c:	3251883a 	add	r8,r6,r9
 1024410:	1021883a 	mov	r16,r2
 1024414:	003f0806 	br	1024038 <__alt_data_end+0xff024038>
 1024418:	1000301e 	bne	r2,zero,10244dc <__adddf3+0x720>
 102441c:	4984b03a 	or	r2,r9,r6
 1024420:	10007126 	beq	r2,zero,10245e8 <__adddf3+0x82c>
 1024424:	4811883a 	mov	r8,r9
 1024428:	3023883a 	mov	r17,r6
 102442c:	3825883a 	mov	r18,r7
 1024430:	0401ffc4 	movi	r16,2047
 1024434:	003e8006 	br	1023e38 <__alt_data_end+0xff023e38>
 1024438:	4462b03a 	or	r17,r8,r17
 102443c:	8822c03a 	cmpne	r17,r17,zero
 1024440:	0007883a 	mov	r3,zero
 1024444:	003f8b06 	br	1024274 <__alt_data_end+0xff024274>
 1024448:	0141ffc4 	movi	r5,2047
 102444c:	11403b26 	beq	r2,r5,102453c <__adddf3+0x780>
 1024450:	0109c83a 	sub	r4,zero,r4
 1024454:	42002034 	orhi	r8,r8,128
 1024458:	01400e04 	movi	r5,56
 102445c:	29006716 	blt	r5,r4,10245fc <__adddf3+0x840>
 1024460:	014007c4 	movi	r5,31
 1024464:	29007016 	blt	r5,r4,1024628 <__adddf3+0x86c>
 1024468:	01400804 	movi	r5,32
 102446c:	290bc83a 	sub	r5,r5,r4
 1024470:	4154983a 	sll	r10,r8,r5
 1024474:	890ed83a 	srl	r7,r17,r4
 1024478:	894a983a 	sll	r5,r17,r5
 102447c:	4108d83a 	srl	r4,r8,r4
 1024480:	51e2b03a 	or	r17,r10,r7
 1024484:	280ac03a 	cmpne	r5,r5,zero
 1024488:	8962b03a 	or	r17,r17,r5
 102448c:	89a3883a 	add	r17,r17,r6
 1024490:	2253883a 	add	r9,r4,r9
 1024494:	898d803a 	cmpltu	r6,r17,r6
 1024498:	3251883a 	add	r8,r6,r9
 102449c:	1021883a 	mov	r16,r2
 10244a0:	003ee506 	br	1024038 <__alt_data_end+0xff024038>
 10244a4:	4984b03a 	or	r2,r9,r6
 10244a8:	103e6326 	beq	r2,zero,1023e38 <__alt_data_end+0xff023e38>
 10244ac:	8987c83a 	sub	r3,r17,r6
 10244b0:	88c9803a 	cmpltu	r4,r17,r3
 10244b4:	4245c83a 	sub	r2,r8,r9
 10244b8:	1105c83a 	sub	r2,r2,r4
 10244bc:	1100202c 	andhi	r4,r2,128
 10244c0:	203ebb26 	beq	r4,zero,1023fb0 <__alt_data_end+0xff023fb0>
 10244c4:	3463c83a 	sub	r17,r6,r17
 10244c8:	4a07c83a 	sub	r3,r9,r8
 10244cc:	344d803a 	cmpltu	r6,r6,r17
 10244d0:	1991c83a 	sub	r8,r3,r6
 10244d4:	3825883a 	mov	r18,r7
 10244d8:	003e5706 	br	1023e38 <__alt_data_end+0xff023e38>
 10244dc:	4984b03a 	or	r2,r9,r6
 10244e0:	10002e26 	beq	r2,zero,102459c <__adddf3+0x7e0>
 10244e4:	4004d0fa 	srli	r2,r8,3
 10244e8:	8822d0fa 	srli	r17,r17,3
 10244ec:	4010977a 	slli	r8,r8,29
 10244f0:	10c0022c 	andhi	r3,r2,8
 10244f4:	4462b03a 	or	r17,r8,r17
 10244f8:	18000826 	beq	r3,zero,102451c <__adddf3+0x760>
 10244fc:	4808d0fa 	srli	r4,r9,3
 1024500:	20c0022c 	andhi	r3,r4,8
 1024504:	1800051e 	bne	r3,zero,102451c <__adddf3+0x760>
 1024508:	300cd0fa 	srli	r6,r6,3
 102450c:	4806977a 	slli	r3,r9,29
 1024510:	2005883a 	mov	r2,r4
 1024514:	3825883a 	mov	r18,r7
 1024518:	19a2b03a 	or	r17,r3,r6
 102451c:	8810d77a 	srli	r8,r17,29
 1024520:	100490fa 	slli	r2,r2,3
 1024524:	882290fa 	slli	r17,r17,3
 1024528:	0401ffc4 	movi	r16,2047
 102452c:	4090b03a 	or	r8,r8,r2
 1024530:	003e4106 	br	1023e38 <__alt_data_end+0xff023e38>
 1024534:	0141ffc4 	movi	r5,2047
 1024538:	117fc71e 	bne	r2,r5,1024458 <__alt_data_end+0xff024458>
 102453c:	4811883a 	mov	r8,r9
 1024540:	3023883a 	mov	r17,r6
 1024544:	1021883a 	mov	r16,r2
 1024548:	003e3b06 	br	1023e38 <__alt_data_end+0xff023e38>
 102454c:	10002f26 	beq	r2,zero,102460c <__adddf3+0x850>
 1024550:	4984b03a 	or	r2,r9,r6
 1024554:	10001126 	beq	r2,zero,102459c <__adddf3+0x7e0>
 1024558:	4004d0fa 	srli	r2,r8,3
 102455c:	8822d0fa 	srli	r17,r17,3
 1024560:	4010977a 	slli	r8,r8,29
 1024564:	10c0022c 	andhi	r3,r2,8
 1024568:	4462b03a 	or	r17,r8,r17
 102456c:	183feb26 	beq	r3,zero,102451c <__alt_data_end+0xff02451c>
 1024570:	4808d0fa 	srli	r4,r9,3
 1024574:	20c0022c 	andhi	r3,r4,8
 1024578:	183fe81e 	bne	r3,zero,102451c <__alt_data_end+0xff02451c>
 102457c:	300cd0fa 	srli	r6,r6,3
 1024580:	4806977a 	slli	r3,r9,29
 1024584:	2005883a 	mov	r2,r4
 1024588:	19a2b03a 	or	r17,r3,r6
 102458c:	003fe306 	br	102451c <__alt_data_end+0xff02451c>
 1024590:	0011883a 	mov	r8,zero
 1024594:	0005883a 	mov	r2,zero
 1024598:	003e3f06 	br	1023e98 <__alt_data_end+0xff023e98>
 102459c:	0401ffc4 	movi	r16,2047
 10245a0:	003e2506 	br	1023e38 <__alt_data_end+0xff023e38>
 10245a4:	0013883a 	mov	r9,zero
 10245a8:	003f8406 	br	10243bc <__alt_data_end+0xff0243bc>
 10245ac:	0005883a 	mov	r2,zero
 10245b0:	0007883a 	mov	r3,zero
 10245b4:	003e8906 	br	1023fdc <__alt_data_end+0xff023fdc>
 10245b8:	197ff804 	addi	r5,r3,-32
 10245bc:	01000804 	movi	r4,32
 10245c0:	414ad83a 	srl	r5,r8,r5
 10245c4:	19002426 	beq	r3,r4,1024658 <__adddf3+0x89c>
 10245c8:	01001004 	movi	r4,64
 10245cc:	20c7c83a 	sub	r3,r4,r3
 10245d0:	40c6983a 	sll	r3,r8,r3
 10245d4:	1c46b03a 	or	r3,r3,r17
 10245d8:	1806c03a 	cmpne	r3,r3,zero
 10245dc:	28e2b03a 	or	r17,r5,r3
 10245e0:	0007883a 	mov	r3,zero
 10245e4:	003f2306 	br	1024274 <__alt_data_end+0xff024274>
 10245e8:	0007883a 	mov	r3,zero
 10245ec:	5811883a 	mov	r8,r11
 10245f0:	00bfffc4 	movi	r2,-1
 10245f4:	0401ffc4 	movi	r16,2047
 10245f8:	003e7806 	br	1023fdc <__alt_data_end+0xff023fdc>
 10245fc:	4462b03a 	or	r17,r8,r17
 1024600:	8822c03a 	cmpne	r17,r17,zero
 1024604:	0009883a 	mov	r4,zero
 1024608:	003fa006 	br	102448c <__alt_data_end+0xff02448c>
 102460c:	4811883a 	mov	r8,r9
 1024610:	3023883a 	mov	r17,r6
 1024614:	0401ffc4 	movi	r16,2047
 1024618:	003e0706 	br	1023e38 <__alt_data_end+0xff023e38>
 102461c:	4811883a 	mov	r8,r9
 1024620:	3023883a 	mov	r17,r6
 1024624:	003e0406 	br	1023e38 <__alt_data_end+0xff023e38>
 1024628:	21fff804 	addi	r7,r4,-32
 102462c:	01400804 	movi	r5,32
 1024630:	41ced83a 	srl	r7,r8,r7
 1024634:	21400a26 	beq	r4,r5,1024660 <__adddf3+0x8a4>
 1024638:	01401004 	movi	r5,64
 102463c:	2909c83a 	sub	r4,r5,r4
 1024640:	4108983a 	sll	r4,r8,r4
 1024644:	2448b03a 	or	r4,r4,r17
 1024648:	2008c03a 	cmpne	r4,r4,zero
 102464c:	3922b03a 	or	r17,r7,r4
 1024650:	0009883a 	mov	r4,zero
 1024654:	003f8d06 	br	102448c <__alt_data_end+0xff02448c>
 1024658:	0007883a 	mov	r3,zero
 102465c:	003fdd06 	br	10245d4 <__alt_data_end+0xff0245d4>
 1024660:	0009883a 	mov	r4,zero
 1024664:	003ff706 	br	1024644 <__alt_data_end+0xff024644>

01024668 <__divdf3>:
 1024668:	defff204 	addi	sp,sp,-56
 102466c:	dd400915 	stw	r21,36(sp)
 1024670:	282ad53a 	srli	r21,r5,20
 1024674:	dd000815 	stw	r20,32(sp)
 1024678:	2828d7fa 	srli	r20,r5,31
 102467c:	dc000415 	stw	r16,16(sp)
 1024680:	04000434 	movhi	r16,16
 1024684:	df000c15 	stw	fp,48(sp)
 1024688:	843fffc4 	addi	r16,r16,-1
 102468c:	dfc00d15 	stw	ra,52(sp)
 1024690:	ddc00b15 	stw	r23,44(sp)
 1024694:	dd800a15 	stw	r22,40(sp)
 1024698:	dcc00715 	stw	r19,28(sp)
 102469c:	dc800615 	stw	r18,24(sp)
 10246a0:	dc400515 	stw	r17,20(sp)
 10246a4:	ad41ffcc 	andi	r21,r21,2047
 10246a8:	2c20703a 	and	r16,r5,r16
 10246ac:	a7003fcc 	andi	fp,r20,255
 10246b0:	a8006126 	beq	r21,zero,1024838 <__divdf3+0x1d0>
 10246b4:	0081ffc4 	movi	r2,2047
 10246b8:	2025883a 	mov	r18,r4
 10246bc:	a8803726 	beq	r21,r2,102479c <__divdf3+0x134>
 10246c0:	80800434 	orhi	r2,r16,16
 10246c4:	100490fa 	slli	r2,r2,3
 10246c8:	2020d77a 	srli	r16,r4,29
 10246cc:	202490fa 	slli	r18,r4,3
 10246d0:	ad7f0044 	addi	r21,r21,-1023
 10246d4:	80a0b03a 	or	r16,r16,r2
 10246d8:	0027883a 	mov	r19,zero
 10246dc:	0013883a 	mov	r9,zero
 10246e0:	3804d53a 	srli	r2,r7,20
 10246e4:	382cd7fa 	srli	r22,r7,31
 10246e8:	04400434 	movhi	r17,16
 10246ec:	8c7fffc4 	addi	r17,r17,-1
 10246f0:	1081ffcc 	andi	r2,r2,2047
 10246f4:	3011883a 	mov	r8,r6
 10246f8:	3c62703a 	and	r17,r7,r17
 10246fc:	b5c03fcc 	andi	r23,r22,255
 1024700:	10006c26 	beq	r2,zero,10248b4 <__divdf3+0x24c>
 1024704:	00c1ffc4 	movi	r3,2047
 1024708:	10c06426 	beq	r2,r3,102489c <__divdf3+0x234>
 102470c:	88c00434 	orhi	r3,r17,16
 1024710:	180690fa 	slli	r3,r3,3
 1024714:	3022d77a 	srli	r17,r6,29
 1024718:	301090fa 	slli	r8,r6,3
 102471c:	10bf0044 	addi	r2,r2,-1023
 1024720:	88e2b03a 	or	r17,r17,r3
 1024724:	000f883a 	mov	r7,zero
 1024728:	a58cf03a 	xor	r6,r20,r22
 102472c:	3cc8b03a 	or	r4,r7,r19
 1024730:	a8abc83a 	sub	r21,r21,r2
 1024734:	008003c4 	movi	r2,15
 1024738:	3007883a 	mov	r3,r6
 102473c:	34c03fcc 	andi	r19,r6,255
 1024740:	11009036 	bltu	r2,r4,1024984 <__divdf3+0x31c>
 1024744:	200890ba 	slli	r4,r4,2
 1024748:	008040b4 	movhi	r2,258
 102474c:	1091d704 	addi	r2,r2,18268
 1024750:	2089883a 	add	r4,r4,r2
 1024754:	20800017 	ldw	r2,0(r4)
 1024758:	1000683a 	jmp	r2
 102475c:	01024984 	movi	r4,2342
 1024760:	010247d4 	movui	r4,2335
 1024764:	01024974 	movhi	r4,2341
 1024768:	010247c8 	cmpgei	r4,zero,2335
 102476c:	01024974 	movhi	r4,2341
 1024770:	01024948 	cmpgei	r4,zero,2341
 1024774:	01024974 	movhi	r4,2341
 1024778:	010247c8 	cmpgei	r4,zero,2335
 102477c:	010247d4 	movui	r4,2335
 1024780:	010247d4 	movui	r4,2335
 1024784:	01024948 	cmpgei	r4,zero,2341
 1024788:	010247c8 	cmpgei	r4,zero,2335
 102478c:	010247b8 	rdprs	r4,zero,2334
 1024790:	010247b8 	rdprs	r4,zero,2334
 1024794:	010247b8 	rdprs	r4,zero,2334
 1024798:	01024c68 	cmpgeui	r4,zero,2353
 102479c:	2404b03a 	or	r2,r4,r16
 10247a0:	1000661e 	bne	r2,zero,102493c <__divdf3+0x2d4>
 10247a4:	04c00204 	movi	r19,8
 10247a8:	0021883a 	mov	r16,zero
 10247ac:	0025883a 	mov	r18,zero
 10247b0:	02400084 	movi	r9,2
 10247b4:	003fca06 	br	10246e0 <__alt_data_end+0xff0246e0>
 10247b8:	8023883a 	mov	r17,r16
 10247bc:	9011883a 	mov	r8,r18
 10247c0:	e02f883a 	mov	r23,fp
 10247c4:	480f883a 	mov	r7,r9
 10247c8:	00800084 	movi	r2,2
 10247cc:	3881311e 	bne	r7,r2,1024c94 <__divdf3+0x62c>
 10247d0:	b827883a 	mov	r19,r23
 10247d4:	98c0004c 	andi	r3,r19,1
 10247d8:	0081ffc4 	movi	r2,2047
 10247dc:	000b883a 	mov	r5,zero
 10247e0:	0025883a 	mov	r18,zero
 10247e4:	1004953a 	slli	r2,r2,20
 10247e8:	18c03fcc 	andi	r3,r3,255
 10247ec:	04400434 	movhi	r17,16
 10247f0:	8c7fffc4 	addi	r17,r17,-1
 10247f4:	180697fa 	slli	r3,r3,31
 10247f8:	2c4a703a 	and	r5,r5,r17
 10247fc:	288ab03a 	or	r5,r5,r2
 1024800:	28c6b03a 	or	r3,r5,r3
 1024804:	9005883a 	mov	r2,r18
 1024808:	dfc00d17 	ldw	ra,52(sp)
 102480c:	df000c17 	ldw	fp,48(sp)
 1024810:	ddc00b17 	ldw	r23,44(sp)
 1024814:	dd800a17 	ldw	r22,40(sp)
 1024818:	dd400917 	ldw	r21,36(sp)
 102481c:	dd000817 	ldw	r20,32(sp)
 1024820:	dcc00717 	ldw	r19,28(sp)
 1024824:	dc800617 	ldw	r18,24(sp)
 1024828:	dc400517 	ldw	r17,20(sp)
 102482c:	dc000417 	ldw	r16,16(sp)
 1024830:	dec00e04 	addi	sp,sp,56
 1024834:	f800283a 	ret
 1024838:	2404b03a 	or	r2,r4,r16
 102483c:	2027883a 	mov	r19,r4
 1024840:	10003926 	beq	r2,zero,1024928 <__divdf3+0x2c0>
 1024844:	80012e26 	beq	r16,zero,1024d00 <__divdf3+0x698>
 1024848:	8009883a 	mov	r4,r16
 102484c:	d9800315 	stw	r6,12(sp)
 1024850:	d9c00215 	stw	r7,8(sp)
 1024854:	10263c00 	call	10263c0 <__clzsi2>
 1024858:	d9800317 	ldw	r6,12(sp)
 102485c:	d9c00217 	ldw	r7,8(sp)
 1024860:	113ffd44 	addi	r4,r2,-11
 1024864:	00c00704 	movi	r3,28
 1024868:	19012116 	blt	r3,r4,1024cf0 <__divdf3+0x688>
 102486c:	00c00744 	movi	r3,29
 1024870:	147ffe04 	addi	r17,r2,-8
 1024874:	1907c83a 	sub	r3,r3,r4
 1024878:	8460983a 	sll	r16,r16,r17
 102487c:	98c6d83a 	srl	r3,r19,r3
 1024880:	9c64983a 	sll	r18,r19,r17
 1024884:	1c20b03a 	or	r16,r3,r16
 1024888:	1080fcc4 	addi	r2,r2,1011
 102488c:	00abc83a 	sub	r21,zero,r2
 1024890:	0027883a 	mov	r19,zero
 1024894:	0013883a 	mov	r9,zero
 1024898:	003f9106 	br	10246e0 <__alt_data_end+0xff0246e0>
 102489c:	3446b03a 	or	r3,r6,r17
 10248a0:	18001f1e 	bne	r3,zero,1024920 <__divdf3+0x2b8>
 10248a4:	0023883a 	mov	r17,zero
 10248a8:	0011883a 	mov	r8,zero
 10248ac:	01c00084 	movi	r7,2
 10248b0:	003f9d06 	br	1024728 <__alt_data_end+0xff024728>
 10248b4:	3446b03a 	or	r3,r6,r17
 10248b8:	18001526 	beq	r3,zero,1024910 <__divdf3+0x2a8>
 10248bc:	88011b26 	beq	r17,zero,1024d2c <__divdf3+0x6c4>
 10248c0:	8809883a 	mov	r4,r17
 10248c4:	d9800315 	stw	r6,12(sp)
 10248c8:	da400115 	stw	r9,4(sp)
 10248cc:	10263c00 	call	10263c0 <__clzsi2>
 10248d0:	d9800317 	ldw	r6,12(sp)
 10248d4:	da400117 	ldw	r9,4(sp)
 10248d8:	113ffd44 	addi	r4,r2,-11
 10248dc:	00c00704 	movi	r3,28
 10248e0:	19010e16 	blt	r3,r4,1024d1c <__divdf3+0x6b4>
 10248e4:	00c00744 	movi	r3,29
 10248e8:	123ffe04 	addi	r8,r2,-8
 10248ec:	1907c83a 	sub	r3,r3,r4
 10248f0:	8a22983a 	sll	r17,r17,r8
 10248f4:	30c6d83a 	srl	r3,r6,r3
 10248f8:	3210983a 	sll	r8,r6,r8
 10248fc:	1c62b03a 	or	r17,r3,r17
 1024900:	1080fcc4 	addi	r2,r2,1011
 1024904:	0085c83a 	sub	r2,zero,r2
 1024908:	000f883a 	mov	r7,zero
 102490c:	003f8606 	br	1024728 <__alt_data_end+0xff024728>
 1024910:	0023883a 	mov	r17,zero
 1024914:	0011883a 	mov	r8,zero
 1024918:	01c00044 	movi	r7,1
 102491c:	003f8206 	br	1024728 <__alt_data_end+0xff024728>
 1024920:	01c000c4 	movi	r7,3
 1024924:	003f8006 	br	1024728 <__alt_data_end+0xff024728>
 1024928:	04c00104 	movi	r19,4
 102492c:	0021883a 	mov	r16,zero
 1024930:	0025883a 	mov	r18,zero
 1024934:	02400044 	movi	r9,1
 1024938:	003f6906 	br	10246e0 <__alt_data_end+0xff0246e0>
 102493c:	04c00304 	movi	r19,12
 1024940:	024000c4 	movi	r9,3
 1024944:	003f6606 	br	10246e0 <__alt_data_end+0xff0246e0>
 1024948:	01400434 	movhi	r5,16
 102494c:	0007883a 	mov	r3,zero
 1024950:	297fffc4 	addi	r5,r5,-1
 1024954:	04bfffc4 	movi	r18,-1
 1024958:	0081ffc4 	movi	r2,2047
 102495c:	003fa106 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024960:	00c00044 	movi	r3,1
 1024964:	1887c83a 	sub	r3,r3,r2
 1024968:	01000e04 	movi	r4,56
 102496c:	20c1210e 	bge	r4,r3,1024df4 <__divdf3+0x78c>
 1024970:	98c0004c 	andi	r3,r19,1
 1024974:	0005883a 	mov	r2,zero
 1024978:	000b883a 	mov	r5,zero
 102497c:	0025883a 	mov	r18,zero
 1024980:	003f9806 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024984:	8c00fd36 	bltu	r17,r16,1024d7c <__divdf3+0x714>
 1024988:	8440fb26 	beq	r16,r17,1024d78 <__divdf3+0x710>
 102498c:	8007883a 	mov	r3,r16
 1024990:	ad7fffc4 	addi	r21,r21,-1
 1024994:	0021883a 	mov	r16,zero
 1024998:	4004d63a 	srli	r2,r8,24
 102499c:	8822923a 	slli	r17,r17,8
 10249a0:	1809883a 	mov	r4,r3
 10249a4:	402c923a 	slli	r22,r8,8
 10249a8:	88b8b03a 	or	fp,r17,r2
 10249ac:	e028d43a 	srli	r20,fp,16
 10249b0:	d8c00015 	stw	r3,0(sp)
 10249b4:	e5ffffcc 	andi	r23,fp,65535
 10249b8:	a00b883a 	mov	r5,r20
 10249bc:	1023d000 	call	1023d00 <__udivsi3>
 10249c0:	d8c00017 	ldw	r3,0(sp)
 10249c4:	a00b883a 	mov	r5,r20
 10249c8:	d8800315 	stw	r2,12(sp)
 10249cc:	1809883a 	mov	r4,r3
 10249d0:	1023d640 	call	1023d64 <__umodsi3>
 10249d4:	d9800317 	ldw	r6,12(sp)
 10249d8:	1006943a 	slli	r3,r2,16
 10249dc:	9004d43a 	srli	r2,r18,16
 10249e0:	b9a3383a 	mul	r17,r23,r6
 10249e4:	10c4b03a 	or	r2,r2,r3
 10249e8:	1440062e 	bgeu	r2,r17,1024a04 <__divdf3+0x39c>
 10249ec:	1705883a 	add	r2,r2,fp
 10249f0:	30ffffc4 	addi	r3,r6,-1
 10249f4:	1700ee36 	bltu	r2,fp,1024db0 <__divdf3+0x748>
 10249f8:	1440ed2e 	bgeu	r2,r17,1024db0 <__divdf3+0x748>
 10249fc:	31bfff84 	addi	r6,r6,-2
 1024a00:	1705883a 	add	r2,r2,fp
 1024a04:	1463c83a 	sub	r17,r2,r17
 1024a08:	a00b883a 	mov	r5,r20
 1024a0c:	8809883a 	mov	r4,r17
 1024a10:	d9800315 	stw	r6,12(sp)
 1024a14:	1023d000 	call	1023d00 <__udivsi3>
 1024a18:	a00b883a 	mov	r5,r20
 1024a1c:	8809883a 	mov	r4,r17
 1024a20:	d8800215 	stw	r2,8(sp)
 1024a24:	1023d640 	call	1023d64 <__umodsi3>
 1024a28:	d9c00217 	ldw	r7,8(sp)
 1024a2c:	1004943a 	slli	r2,r2,16
 1024a30:	94bfffcc 	andi	r18,r18,65535
 1024a34:	b9d1383a 	mul	r8,r23,r7
 1024a38:	90a4b03a 	or	r18,r18,r2
 1024a3c:	d9800317 	ldw	r6,12(sp)
 1024a40:	9200062e 	bgeu	r18,r8,1024a5c <__divdf3+0x3f4>
 1024a44:	9725883a 	add	r18,r18,fp
 1024a48:	38bfffc4 	addi	r2,r7,-1
 1024a4c:	9700d636 	bltu	r18,fp,1024da8 <__divdf3+0x740>
 1024a50:	9200d52e 	bgeu	r18,r8,1024da8 <__divdf3+0x740>
 1024a54:	39ffff84 	addi	r7,r7,-2
 1024a58:	9725883a 	add	r18,r18,fp
 1024a5c:	3004943a 	slli	r2,r6,16
 1024a60:	b012d43a 	srli	r9,r22,16
 1024a64:	b1bfffcc 	andi	r6,r22,65535
 1024a68:	11e2b03a 	or	r17,r2,r7
 1024a6c:	8806d43a 	srli	r3,r17,16
 1024a70:	893fffcc 	andi	r4,r17,65535
 1024a74:	218b383a 	mul	r5,r4,r6
 1024a78:	30c5383a 	mul	r2,r6,r3
 1024a7c:	2249383a 	mul	r4,r4,r9
 1024a80:	280ed43a 	srli	r7,r5,16
 1024a84:	9225c83a 	sub	r18,r18,r8
 1024a88:	2089883a 	add	r4,r4,r2
 1024a8c:	3909883a 	add	r4,r7,r4
 1024a90:	1a47383a 	mul	r3,r3,r9
 1024a94:	2080022e 	bgeu	r4,r2,1024aa0 <__divdf3+0x438>
 1024a98:	00800074 	movhi	r2,1
 1024a9c:	1887883a 	add	r3,r3,r2
 1024aa0:	2004d43a 	srli	r2,r4,16
 1024aa4:	2008943a 	slli	r4,r4,16
 1024aa8:	297fffcc 	andi	r5,r5,65535
 1024aac:	10c7883a 	add	r3,r2,r3
 1024ab0:	2149883a 	add	r4,r4,r5
 1024ab4:	90c0a536 	bltu	r18,r3,1024d4c <__divdf3+0x6e4>
 1024ab8:	90c0bf26 	beq	r18,r3,1024db8 <__divdf3+0x750>
 1024abc:	90c7c83a 	sub	r3,r18,r3
 1024ac0:	810fc83a 	sub	r7,r16,r4
 1024ac4:	81e5803a 	cmpltu	r18,r16,r7
 1024ac8:	1ca5c83a 	sub	r18,r3,r18
 1024acc:	e480c126 	beq	fp,r18,1024dd4 <__divdf3+0x76c>
 1024ad0:	a00b883a 	mov	r5,r20
 1024ad4:	9009883a 	mov	r4,r18
 1024ad8:	d9800315 	stw	r6,12(sp)
 1024adc:	d9c00215 	stw	r7,8(sp)
 1024ae0:	da400115 	stw	r9,4(sp)
 1024ae4:	1023d000 	call	1023d00 <__udivsi3>
 1024ae8:	a00b883a 	mov	r5,r20
 1024aec:	9009883a 	mov	r4,r18
 1024af0:	d8800015 	stw	r2,0(sp)
 1024af4:	1023d640 	call	1023d64 <__umodsi3>
 1024af8:	d9c00217 	ldw	r7,8(sp)
 1024afc:	da000017 	ldw	r8,0(sp)
 1024b00:	1006943a 	slli	r3,r2,16
 1024b04:	3804d43a 	srli	r2,r7,16
 1024b08:	ba21383a 	mul	r16,r23,r8
 1024b0c:	d9800317 	ldw	r6,12(sp)
 1024b10:	10c4b03a 	or	r2,r2,r3
 1024b14:	da400117 	ldw	r9,4(sp)
 1024b18:	1400062e 	bgeu	r2,r16,1024b34 <__divdf3+0x4cc>
 1024b1c:	1705883a 	add	r2,r2,fp
 1024b20:	40ffffc4 	addi	r3,r8,-1
 1024b24:	1700ad36 	bltu	r2,fp,1024ddc <__divdf3+0x774>
 1024b28:	1400ac2e 	bgeu	r2,r16,1024ddc <__divdf3+0x774>
 1024b2c:	423fff84 	addi	r8,r8,-2
 1024b30:	1705883a 	add	r2,r2,fp
 1024b34:	1421c83a 	sub	r16,r2,r16
 1024b38:	a00b883a 	mov	r5,r20
 1024b3c:	8009883a 	mov	r4,r16
 1024b40:	d9800315 	stw	r6,12(sp)
 1024b44:	d9c00215 	stw	r7,8(sp)
 1024b48:	da000015 	stw	r8,0(sp)
 1024b4c:	da400115 	stw	r9,4(sp)
 1024b50:	1023d000 	call	1023d00 <__udivsi3>
 1024b54:	8009883a 	mov	r4,r16
 1024b58:	a00b883a 	mov	r5,r20
 1024b5c:	1025883a 	mov	r18,r2
 1024b60:	1023d640 	call	1023d64 <__umodsi3>
 1024b64:	d9c00217 	ldw	r7,8(sp)
 1024b68:	1004943a 	slli	r2,r2,16
 1024b6c:	bcaf383a 	mul	r23,r23,r18
 1024b70:	393fffcc 	andi	r4,r7,65535
 1024b74:	2088b03a 	or	r4,r4,r2
 1024b78:	d9800317 	ldw	r6,12(sp)
 1024b7c:	da000017 	ldw	r8,0(sp)
 1024b80:	da400117 	ldw	r9,4(sp)
 1024b84:	25c0062e 	bgeu	r4,r23,1024ba0 <__divdf3+0x538>
 1024b88:	2709883a 	add	r4,r4,fp
 1024b8c:	90bfffc4 	addi	r2,r18,-1
 1024b90:	27009436 	bltu	r4,fp,1024de4 <__divdf3+0x77c>
 1024b94:	25c0932e 	bgeu	r4,r23,1024de4 <__divdf3+0x77c>
 1024b98:	94bfff84 	addi	r18,r18,-2
 1024b9c:	2709883a 	add	r4,r4,fp
 1024ba0:	4004943a 	slli	r2,r8,16
 1024ba4:	25efc83a 	sub	r23,r4,r23
 1024ba8:	1490b03a 	or	r8,r2,r18
 1024bac:	4008d43a 	srli	r4,r8,16
 1024bb0:	40ffffcc 	andi	r3,r8,65535
 1024bb4:	30c5383a 	mul	r2,r6,r3
 1024bb8:	1a47383a 	mul	r3,r3,r9
 1024bbc:	310d383a 	mul	r6,r6,r4
 1024bc0:	100ad43a 	srli	r5,r2,16
 1024bc4:	4913383a 	mul	r9,r9,r4
 1024bc8:	1987883a 	add	r3,r3,r6
 1024bcc:	28c7883a 	add	r3,r5,r3
 1024bd0:	1980022e 	bgeu	r3,r6,1024bdc <__divdf3+0x574>
 1024bd4:	01000074 	movhi	r4,1
 1024bd8:	4913883a 	add	r9,r9,r4
 1024bdc:	1808d43a 	srli	r4,r3,16
 1024be0:	1806943a 	slli	r3,r3,16
 1024be4:	10bfffcc 	andi	r2,r2,65535
 1024be8:	2253883a 	add	r9,r4,r9
 1024bec:	1887883a 	add	r3,r3,r2
 1024bf0:	ba403836 	bltu	r23,r9,1024cd4 <__divdf3+0x66c>
 1024bf4:	ba403626 	beq	r23,r9,1024cd0 <__divdf3+0x668>
 1024bf8:	42000054 	ori	r8,r8,1
 1024bfc:	a880ffc4 	addi	r2,r21,1023
 1024c00:	00bf570e 	bge	zero,r2,1024960 <__alt_data_end+0xff024960>
 1024c04:	40c001cc 	andi	r3,r8,7
 1024c08:	18000726 	beq	r3,zero,1024c28 <__divdf3+0x5c0>
 1024c0c:	40c003cc 	andi	r3,r8,15
 1024c10:	01000104 	movi	r4,4
 1024c14:	19000426 	beq	r3,r4,1024c28 <__divdf3+0x5c0>
 1024c18:	4107883a 	add	r3,r8,r4
 1024c1c:	1a11803a 	cmpltu	r8,r3,r8
 1024c20:	8a23883a 	add	r17,r17,r8
 1024c24:	1811883a 	mov	r8,r3
 1024c28:	88c0402c 	andhi	r3,r17,256
 1024c2c:	18000426 	beq	r3,zero,1024c40 <__divdf3+0x5d8>
 1024c30:	00ffc034 	movhi	r3,65280
 1024c34:	18ffffc4 	addi	r3,r3,-1
 1024c38:	a8810004 	addi	r2,r21,1024
 1024c3c:	88e2703a 	and	r17,r17,r3
 1024c40:	00c1ff84 	movi	r3,2046
 1024c44:	18bee316 	blt	r3,r2,10247d4 <__alt_data_end+0xff0247d4>
 1024c48:	8824977a 	slli	r18,r17,29
 1024c4c:	4010d0fa 	srli	r8,r8,3
 1024c50:	8822927a 	slli	r17,r17,9
 1024c54:	1081ffcc 	andi	r2,r2,2047
 1024c58:	9224b03a 	or	r18,r18,r8
 1024c5c:	880ad33a 	srli	r5,r17,12
 1024c60:	98c0004c 	andi	r3,r19,1
 1024c64:	003edf06 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024c68:	8080022c 	andhi	r2,r16,8
 1024c6c:	10001226 	beq	r2,zero,1024cb8 <__divdf3+0x650>
 1024c70:	8880022c 	andhi	r2,r17,8
 1024c74:	1000101e 	bne	r2,zero,1024cb8 <__divdf3+0x650>
 1024c78:	00800434 	movhi	r2,16
 1024c7c:	89400234 	orhi	r5,r17,8
 1024c80:	10bfffc4 	addi	r2,r2,-1
 1024c84:	b007883a 	mov	r3,r22
 1024c88:	288a703a 	and	r5,r5,r2
 1024c8c:	4025883a 	mov	r18,r8
 1024c90:	003f3106 	br	1024958 <__alt_data_end+0xff024958>
 1024c94:	008000c4 	movi	r2,3
 1024c98:	3880a626 	beq	r7,r2,1024f34 <__divdf3+0x8cc>
 1024c9c:	00800044 	movi	r2,1
 1024ca0:	3880521e 	bne	r7,r2,1024dec <__divdf3+0x784>
 1024ca4:	b807883a 	mov	r3,r23
 1024ca8:	0005883a 	mov	r2,zero
 1024cac:	000b883a 	mov	r5,zero
 1024cb0:	0025883a 	mov	r18,zero
 1024cb4:	003ecb06 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024cb8:	00800434 	movhi	r2,16
 1024cbc:	81400234 	orhi	r5,r16,8
 1024cc0:	10bfffc4 	addi	r2,r2,-1
 1024cc4:	a007883a 	mov	r3,r20
 1024cc8:	288a703a 	and	r5,r5,r2
 1024ccc:	003f2206 	br	1024958 <__alt_data_end+0xff024958>
 1024cd0:	183fca26 	beq	r3,zero,1024bfc <__alt_data_end+0xff024bfc>
 1024cd4:	e5ef883a 	add	r23,fp,r23
 1024cd8:	40bfffc4 	addi	r2,r8,-1
 1024cdc:	bf00392e 	bgeu	r23,fp,1024dc4 <__divdf3+0x75c>
 1024ce0:	1011883a 	mov	r8,r2
 1024ce4:	ba7fc41e 	bne	r23,r9,1024bf8 <__alt_data_end+0xff024bf8>
 1024ce8:	b0ffc31e 	bne	r22,r3,1024bf8 <__alt_data_end+0xff024bf8>
 1024cec:	003fc306 	br	1024bfc <__alt_data_end+0xff024bfc>
 1024cf0:	143ff604 	addi	r16,r2,-40
 1024cf4:	9c20983a 	sll	r16,r19,r16
 1024cf8:	0025883a 	mov	r18,zero
 1024cfc:	003ee206 	br	1024888 <__alt_data_end+0xff024888>
 1024d00:	d9800315 	stw	r6,12(sp)
 1024d04:	d9c00215 	stw	r7,8(sp)
 1024d08:	10263c00 	call	10263c0 <__clzsi2>
 1024d0c:	10800804 	addi	r2,r2,32
 1024d10:	d9c00217 	ldw	r7,8(sp)
 1024d14:	d9800317 	ldw	r6,12(sp)
 1024d18:	003ed106 	br	1024860 <__alt_data_end+0xff024860>
 1024d1c:	147ff604 	addi	r17,r2,-40
 1024d20:	3462983a 	sll	r17,r6,r17
 1024d24:	0011883a 	mov	r8,zero
 1024d28:	003ef506 	br	1024900 <__alt_data_end+0xff024900>
 1024d2c:	3009883a 	mov	r4,r6
 1024d30:	d9800315 	stw	r6,12(sp)
 1024d34:	da400115 	stw	r9,4(sp)
 1024d38:	10263c00 	call	10263c0 <__clzsi2>
 1024d3c:	10800804 	addi	r2,r2,32
 1024d40:	da400117 	ldw	r9,4(sp)
 1024d44:	d9800317 	ldw	r6,12(sp)
 1024d48:	003ee306 	br	10248d8 <__alt_data_end+0xff0248d8>
 1024d4c:	85a1883a 	add	r16,r16,r22
 1024d50:	8585803a 	cmpltu	r2,r16,r22
 1024d54:	1705883a 	add	r2,r2,fp
 1024d58:	14a5883a 	add	r18,r2,r18
 1024d5c:	88bfffc4 	addi	r2,r17,-1
 1024d60:	e4800c2e 	bgeu	fp,r18,1024d94 <__divdf3+0x72c>
 1024d64:	90c03e36 	bltu	r18,r3,1024e60 <__divdf3+0x7f8>
 1024d68:	1c806926 	beq	r3,r18,1024f10 <__divdf3+0x8a8>
 1024d6c:	90c7c83a 	sub	r3,r18,r3
 1024d70:	1023883a 	mov	r17,r2
 1024d74:	003f5206 	br	1024ac0 <__alt_data_end+0xff024ac0>
 1024d78:	923f0436 	bltu	r18,r8,102498c <__alt_data_end+0xff02498c>
 1024d7c:	800897fa 	slli	r4,r16,31
 1024d80:	9004d07a 	srli	r2,r18,1
 1024d84:	8006d07a 	srli	r3,r16,1
 1024d88:	902097fa 	slli	r16,r18,31
 1024d8c:	20a4b03a 	or	r18,r4,r2
 1024d90:	003f0106 	br	1024998 <__alt_data_end+0xff024998>
 1024d94:	e4bff51e 	bne	fp,r18,1024d6c <__alt_data_end+0xff024d6c>
 1024d98:	85bff22e 	bgeu	r16,r22,1024d64 <__alt_data_end+0xff024d64>
 1024d9c:	e0c7c83a 	sub	r3,fp,r3
 1024da0:	1023883a 	mov	r17,r2
 1024da4:	003f4606 	br	1024ac0 <__alt_data_end+0xff024ac0>
 1024da8:	100f883a 	mov	r7,r2
 1024dac:	003f2b06 	br	1024a5c <__alt_data_end+0xff024a5c>
 1024db0:	180d883a 	mov	r6,r3
 1024db4:	003f1306 	br	1024a04 <__alt_data_end+0xff024a04>
 1024db8:	813fe436 	bltu	r16,r4,1024d4c <__alt_data_end+0xff024d4c>
 1024dbc:	0007883a 	mov	r3,zero
 1024dc0:	003f3f06 	br	1024ac0 <__alt_data_end+0xff024ac0>
 1024dc4:	ba402c36 	bltu	r23,r9,1024e78 <__divdf3+0x810>
 1024dc8:	4dc05426 	beq	r9,r23,1024f1c <__divdf3+0x8b4>
 1024dcc:	1011883a 	mov	r8,r2
 1024dd0:	003f8906 	br	1024bf8 <__alt_data_end+0xff024bf8>
 1024dd4:	023fffc4 	movi	r8,-1
 1024dd8:	003f8806 	br	1024bfc <__alt_data_end+0xff024bfc>
 1024ddc:	1811883a 	mov	r8,r3
 1024de0:	003f5406 	br	1024b34 <__alt_data_end+0xff024b34>
 1024de4:	1025883a 	mov	r18,r2
 1024de8:	003f6d06 	br	1024ba0 <__alt_data_end+0xff024ba0>
 1024dec:	b827883a 	mov	r19,r23
 1024df0:	003f8206 	br	1024bfc <__alt_data_end+0xff024bfc>
 1024df4:	010007c4 	movi	r4,31
 1024df8:	20c02616 	blt	r4,r3,1024e94 <__divdf3+0x82c>
 1024dfc:	00800804 	movi	r2,32
 1024e00:	10c5c83a 	sub	r2,r2,r3
 1024e04:	888a983a 	sll	r5,r17,r2
 1024e08:	40c8d83a 	srl	r4,r8,r3
 1024e0c:	4084983a 	sll	r2,r8,r2
 1024e10:	88e2d83a 	srl	r17,r17,r3
 1024e14:	2906b03a 	or	r3,r5,r4
 1024e18:	1004c03a 	cmpne	r2,r2,zero
 1024e1c:	1886b03a 	or	r3,r3,r2
 1024e20:	188001cc 	andi	r2,r3,7
 1024e24:	10000726 	beq	r2,zero,1024e44 <__divdf3+0x7dc>
 1024e28:	188003cc 	andi	r2,r3,15
 1024e2c:	01000104 	movi	r4,4
 1024e30:	11000426 	beq	r2,r4,1024e44 <__divdf3+0x7dc>
 1024e34:	1805883a 	mov	r2,r3
 1024e38:	10c00104 	addi	r3,r2,4
 1024e3c:	1885803a 	cmpltu	r2,r3,r2
 1024e40:	88a3883a 	add	r17,r17,r2
 1024e44:	8880202c 	andhi	r2,r17,128
 1024e48:	10002726 	beq	r2,zero,1024ee8 <__divdf3+0x880>
 1024e4c:	98c0004c 	andi	r3,r19,1
 1024e50:	00800044 	movi	r2,1
 1024e54:	000b883a 	mov	r5,zero
 1024e58:	0025883a 	mov	r18,zero
 1024e5c:	003e6106 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024e60:	85a1883a 	add	r16,r16,r22
 1024e64:	8585803a 	cmpltu	r2,r16,r22
 1024e68:	1705883a 	add	r2,r2,fp
 1024e6c:	14a5883a 	add	r18,r2,r18
 1024e70:	8c7fff84 	addi	r17,r17,-2
 1024e74:	003f1106 	br	1024abc <__alt_data_end+0xff024abc>
 1024e78:	b589883a 	add	r4,r22,r22
 1024e7c:	25ad803a 	cmpltu	r22,r4,r22
 1024e80:	b739883a 	add	fp,r22,fp
 1024e84:	40bfff84 	addi	r2,r8,-2
 1024e88:	bf2f883a 	add	r23,r23,fp
 1024e8c:	202d883a 	mov	r22,r4
 1024e90:	003f9306 	br	1024ce0 <__alt_data_end+0xff024ce0>
 1024e94:	013ff844 	movi	r4,-31
 1024e98:	2085c83a 	sub	r2,r4,r2
 1024e9c:	8888d83a 	srl	r4,r17,r2
 1024ea0:	00800804 	movi	r2,32
 1024ea4:	18802126 	beq	r3,r2,1024f2c <__divdf3+0x8c4>
 1024ea8:	00801004 	movi	r2,64
 1024eac:	10c5c83a 	sub	r2,r2,r3
 1024eb0:	8884983a 	sll	r2,r17,r2
 1024eb4:	1204b03a 	or	r2,r2,r8
 1024eb8:	1004c03a 	cmpne	r2,r2,zero
 1024ebc:	2084b03a 	or	r2,r4,r2
 1024ec0:	144001cc 	andi	r17,r2,7
 1024ec4:	88000d1e 	bne	r17,zero,1024efc <__divdf3+0x894>
 1024ec8:	000b883a 	mov	r5,zero
 1024ecc:	1024d0fa 	srli	r18,r2,3
 1024ed0:	98c0004c 	andi	r3,r19,1
 1024ed4:	0005883a 	mov	r2,zero
 1024ed8:	9464b03a 	or	r18,r18,r17
 1024edc:	003e4106 	br	10247e4 <__alt_data_end+0xff0247e4>
 1024ee0:	1007883a 	mov	r3,r2
 1024ee4:	0023883a 	mov	r17,zero
 1024ee8:	880a927a 	slli	r5,r17,9
 1024eec:	1805883a 	mov	r2,r3
 1024ef0:	8822977a 	slli	r17,r17,29
 1024ef4:	280ad33a 	srli	r5,r5,12
 1024ef8:	003ff406 	br	1024ecc <__alt_data_end+0xff024ecc>
 1024efc:	10c003cc 	andi	r3,r2,15
 1024f00:	01000104 	movi	r4,4
 1024f04:	193ff626 	beq	r3,r4,1024ee0 <__alt_data_end+0xff024ee0>
 1024f08:	0023883a 	mov	r17,zero
 1024f0c:	003fca06 	br	1024e38 <__alt_data_end+0xff024e38>
 1024f10:	813fd336 	bltu	r16,r4,1024e60 <__alt_data_end+0xff024e60>
 1024f14:	1023883a 	mov	r17,r2
 1024f18:	003fa806 	br	1024dbc <__alt_data_end+0xff024dbc>
 1024f1c:	b0ffd636 	bltu	r22,r3,1024e78 <__alt_data_end+0xff024e78>
 1024f20:	1011883a 	mov	r8,r2
 1024f24:	b0ff341e 	bne	r22,r3,1024bf8 <__alt_data_end+0xff024bf8>
 1024f28:	003f3406 	br	1024bfc <__alt_data_end+0xff024bfc>
 1024f2c:	0005883a 	mov	r2,zero
 1024f30:	003fe006 	br	1024eb4 <__alt_data_end+0xff024eb4>
 1024f34:	00800434 	movhi	r2,16
 1024f38:	89400234 	orhi	r5,r17,8
 1024f3c:	10bfffc4 	addi	r2,r2,-1
 1024f40:	b807883a 	mov	r3,r23
 1024f44:	288a703a 	and	r5,r5,r2
 1024f48:	4025883a 	mov	r18,r8
 1024f4c:	003e8206 	br	1024958 <__alt_data_end+0xff024958>

01024f50 <__eqdf2>:
 1024f50:	2804d53a 	srli	r2,r5,20
 1024f54:	3806d53a 	srli	r3,r7,20
 1024f58:	02000434 	movhi	r8,16
 1024f5c:	423fffc4 	addi	r8,r8,-1
 1024f60:	1081ffcc 	andi	r2,r2,2047
 1024f64:	0281ffc4 	movi	r10,2047
 1024f68:	2a12703a 	and	r9,r5,r8
 1024f6c:	18c1ffcc 	andi	r3,r3,2047
 1024f70:	3a10703a 	and	r8,r7,r8
 1024f74:	280ad7fa 	srli	r5,r5,31
 1024f78:	380ed7fa 	srli	r7,r7,31
 1024f7c:	12801026 	beq	r2,r10,1024fc0 <__eqdf2+0x70>
 1024f80:	0281ffc4 	movi	r10,2047
 1024f84:	1a800a26 	beq	r3,r10,1024fb0 <__eqdf2+0x60>
 1024f88:	10c00226 	beq	r2,r3,1024f94 <__eqdf2+0x44>
 1024f8c:	00800044 	movi	r2,1
 1024f90:	f800283a 	ret
 1024f94:	4a3ffd1e 	bne	r9,r8,1024f8c <__alt_data_end+0xff024f8c>
 1024f98:	21bffc1e 	bne	r4,r6,1024f8c <__alt_data_end+0xff024f8c>
 1024f9c:	29c00c26 	beq	r5,r7,1024fd0 <__eqdf2+0x80>
 1024fa0:	103ffa1e 	bne	r2,zero,1024f8c <__alt_data_end+0xff024f8c>
 1024fa4:	2244b03a 	or	r2,r4,r9
 1024fa8:	1004c03a 	cmpne	r2,r2,zero
 1024fac:	f800283a 	ret
 1024fb0:	3214b03a 	or	r10,r6,r8
 1024fb4:	503ff426 	beq	r10,zero,1024f88 <__alt_data_end+0xff024f88>
 1024fb8:	00800044 	movi	r2,1
 1024fbc:	f800283a 	ret
 1024fc0:	2254b03a 	or	r10,r4,r9
 1024fc4:	503fee26 	beq	r10,zero,1024f80 <__alt_data_end+0xff024f80>
 1024fc8:	00800044 	movi	r2,1
 1024fcc:	f800283a 	ret
 1024fd0:	0005883a 	mov	r2,zero
 1024fd4:	f800283a 	ret

01024fd8 <__gedf2>:
 1024fd8:	2804d53a 	srli	r2,r5,20
 1024fdc:	3806d53a 	srli	r3,r7,20
 1024fe0:	02000434 	movhi	r8,16
 1024fe4:	423fffc4 	addi	r8,r8,-1
 1024fe8:	1081ffcc 	andi	r2,r2,2047
 1024fec:	0241ffc4 	movi	r9,2047
 1024ff0:	2a14703a 	and	r10,r5,r8
 1024ff4:	18c1ffcc 	andi	r3,r3,2047
 1024ff8:	3a10703a 	and	r8,r7,r8
 1024ffc:	280ad7fa 	srli	r5,r5,31
 1025000:	380ed7fa 	srli	r7,r7,31
 1025004:	12401d26 	beq	r2,r9,102507c <__gedf2+0xa4>
 1025008:	0241ffc4 	movi	r9,2047
 102500c:	1a401226 	beq	r3,r9,1025058 <__gedf2+0x80>
 1025010:	1000081e 	bne	r2,zero,1025034 <__gedf2+0x5c>
 1025014:	2296b03a 	or	r11,r4,r10
 1025018:	5813003a 	cmpeq	r9,r11,zero
 102501c:	1800091e 	bne	r3,zero,1025044 <__gedf2+0x6c>
 1025020:	3218b03a 	or	r12,r6,r8
 1025024:	6000071e 	bne	r12,zero,1025044 <__gedf2+0x6c>
 1025028:	0005883a 	mov	r2,zero
 102502c:	5800101e 	bne	r11,zero,1025070 <__gedf2+0x98>
 1025030:	f800283a 	ret
 1025034:	18000c1e 	bne	r3,zero,1025068 <__gedf2+0x90>
 1025038:	3212b03a 	or	r9,r6,r8
 102503c:	48000c26 	beq	r9,zero,1025070 <__gedf2+0x98>
 1025040:	0013883a 	mov	r9,zero
 1025044:	39c03fcc 	andi	r7,r7,255
 1025048:	48000826 	beq	r9,zero,102506c <__gedf2+0x94>
 102504c:	38000926 	beq	r7,zero,1025074 <__gedf2+0x9c>
 1025050:	00800044 	movi	r2,1
 1025054:	f800283a 	ret
 1025058:	3212b03a 	or	r9,r6,r8
 102505c:	483fec26 	beq	r9,zero,1025010 <__alt_data_end+0xff025010>
 1025060:	00bfff84 	movi	r2,-2
 1025064:	f800283a 	ret
 1025068:	39c03fcc 	andi	r7,r7,255
 102506c:	29c00626 	beq	r5,r7,1025088 <__gedf2+0xb0>
 1025070:	283ff726 	beq	r5,zero,1025050 <__alt_data_end+0xff025050>
 1025074:	00bfffc4 	movi	r2,-1
 1025078:	f800283a 	ret
 102507c:	2292b03a 	or	r9,r4,r10
 1025080:	483fe126 	beq	r9,zero,1025008 <__alt_data_end+0xff025008>
 1025084:	003ff606 	br	1025060 <__alt_data_end+0xff025060>
 1025088:	18bff916 	blt	r3,r2,1025070 <__alt_data_end+0xff025070>
 102508c:	10c00316 	blt	r2,r3,102509c <__gedf2+0xc4>
 1025090:	42bff736 	bltu	r8,r10,1025070 <__alt_data_end+0xff025070>
 1025094:	52000326 	beq	r10,r8,10250a4 <__gedf2+0xcc>
 1025098:	5200042e 	bgeu	r10,r8,10250ac <__gedf2+0xd4>
 102509c:	283fec1e 	bne	r5,zero,1025050 <__alt_data_end+0xff025050>
 10250a0:	003ff406 	br	1025074 <__alt_data_end+0xff025074>
 10250a4:	313ff236 	bltu	r6,r4,1025070 <__alt_data_end+0xff025070>
 10250a8:	21bffc36 	bltu	r4,r6,102509c <__alt_data_end+0xff02509c>
 10250ac:	0005883a 	mov	r2,zero
 10250b0:	f800283a 	ret

010250b4 <__ledf2>:
 10250b4:	2804d53a 	srli	r2,r5,20
 10250b8:	3810d53a 	srli	r8,r7,20
 10250bc:	00c00434 	movhi	r3,16
 10250c0:	18ffffc4 	addi	r3,r3,-1
 10250c4:	1081ffcc 	andi	r2,r2,2047
 10250c8:	0241ffc4 	movi	r9,2047
 10250cc:	28d4703a 	and	r10,r5,r3
 10250d0:	4201ffcc 	andi	r8,r8,2047
 10250d4:	38c6703a 	and	r3,r7,r3
 10250d8:	280ad7fa 	srli	r5,r5,31
 10250dc:	380ed7fa 	srli	r7,r7,31
 10250e0:	12401f26 	beq	r2,r9,1025160 <__ledf2+0xac>
 10250e4:	0241ffc4 	movi	r9,2047
 10250e8:	42401426 	beq	r8,r9,102513c <__ledf2+0x88>
 10250ec:	1000091e 	bne	r2,zero,1025114 <__ledf2+0x60>
 10250f0:	2296b03a 	or	r11,r4,r10
 10250f4:	5813003a 	cmpeq	r9,r11,zero
 10250f8:	29403fcc 	andi	r5,r5,255
 10250fc:	40000a1e 	bne	r8,zero,1025128 <__ledf2+0x74>
 1025100:	30d8b03a 	or	r12,r6,r3
 1025104:	6000081e 	bne	r12,zero,1025128 <__ledf2+0x74>
 1025108:	0005883a 	mov	r2,zero
 102510c:	5800111e 	bne	r11,zero,1025154 <__ledf2+0xa0>
 1025110:	f800283a 	ret
 1025114:	29403fcc 	andi	r5,r5,255
 1025118:	40000c1e 	bne	r8,zero,102514c <__ledf2+0x98>
 102511c:	30d2b03a 	or	r9,r6,r3
 1025120:	48000c26 	beq	r9,zero,1025154 <__ledf2+0xa0>
 1025124:	0013883a 	mov	r9,zero
 1025128:	39c03fcc 	andi	r7,r7,255
 102512c:	48000826 	beq	r9,zero,1025150 <__ledf2+0x9c>
 1025130:	38001126 	beq	r7,zero,1025178 <__ledf2+0xc4>
 1025134:	00800044 	movi	r2,1
 1025138:	f800283a 	ret
 102513c:	30d2b03a 	or	r9,r6,r3
 1025140:	483fea26 	beq	r9,zero,10250ec <__alt_data_end+0xff0250ec>
 1025144:	00800084 	movi	r2,2
 1025148:	f800283a 	ret
 102514c:	39c03fcc 	andi	r7,r7,255
 1025150:	39400726 	beq	r7,r5,1025170 <__ledf2+0xbc>
 1025154:	2800081e 	bne	r5,zero,1025178 <__ledf2+0xc4>
 1025158:	00800044 	movi	r2,1
 102515c:	f800283a 	ret
 1025160:	2292b03a 	or	r9,r4,r10
 1025164:	483fdf26 	beq	r9,zero,10250e4 <__alt_data_end+0xff0250e4>
 1025168:	00800084 	movi	r2,2
 102516c:	f800283a 	ret
 1025170:	4080030e 	bge	r8,r2,1025180 <__ledf2+0xcc>
 1025174:	383fef26 	beq	r7,zero,1025134 <__alt_data_end+0xff025134>
 1025178:	00bfffc4 	movi	r2,-1
 102517c:	f800283a 	ret
 1025180:	123feb16 	blt	r2,r8,1025130 <__alt_data_end+0xff025130>
 1025184:	1abff336 	bltu	r3,r10,1025154 <__alt_data_end+0xff025154>
 1025188:	50c00326 	beq	r10,r3,1025198 <__ledf2+0xe4>
 102518c:	50c0042e 	bgeu	r10,r3,10251a0 <__ledf2+0xec>
 1025190:	283fe81e 	bne	r5,zero,1025134 <__alt_data_end+0xff025134>
 1025194:	003ff806 	br	1025178 <__alt_data_end+0xff025178>
 1025198:	313fee36 	bltu	r6,r4,1025154 <__alt_data_end+0xff025154>
 102519c:	21bffc36 	bltu	r4,r6,1025190 <__alt_data_end+0xff025190>
 10251a0:	0005883a 	mov	r2,zero
 10251a4:	f800283a 	ret

010251a8 <__muldf3>:
 10251a8:	defff304 	addi	sp,sp,-52
 10251ac:	2804d53a 	srli	r2,r5,20
 10251b0:	dd800915 	stw	r22,36(sp)
 10251b4:	282cd7fa 	srli	r22,r5,31
 10251b8:	dc000315 	stw	r16,12(sp)
 10251bc:	04000434 	movhi	r16,16
 10251c0:	dd400815 	stw	r21,32(sp)
 10251c4:	dc800515 	stw	r18,20(sp)
 10251c8:	843fffc4 	addi	r16,r16,-1
 10251cc:	dfc00c15 	stw	ra,48(sp)
 10251d0:	df000b15 	stw	fp,44(sp)
 10251d4:	ddc00a15 	stw	r23,40(sp)
 10251d8:	dd000715 	stw	r20,28(sp)
 10251dc:	dcc00615 	stw	r19,24(sp)
 10251e0:	dc400415 	stw	r17,16(sp)
 10251e4:	1481ffcc 	andi	r18,r2,2047
 10251e8:	2c20703a 	and	r16,r5,r16
 10251ec:	b02b883a 	mov	r21,r22
 10251f0:	b2403fcc 	andi	r9,r22,255
 10251f4:	90006026 	beq	r18,zero,1025378 <__muldf3+0x1d0>
 10251f8:	0081ffc4 	movi	r2,2047
 10251fc:	2029883a 	mov	r20,r4
 1025200:	90803626 	beq	r18,r2,10252dc <__muldf3+0x134>
 1025204:	80800434 	orhi	r2,r16,16
 1025208:	100490fa 	slli	r2,r2,3
 102520c:	2020d77a 	srli	r16,r4,29
 1025210:	202890fa 	slli	r20,r4,3
 1025214:	94bf0044 	addi	r18,r18,-1023
 1025218:	80a0b03a 	or	r16,r16,r2
 102521c:	0027883a 	mov	r19,zero
 1025220:	0039883a 	mov	fp,zero
 1025224:	3804d53a 	srli	r2,r7,20
 1025228:	382ed7fa 	srli	r23,r7,31
 102522c:	04400434 	movhi	r17,16
 1025230:	8c7fffc4 	addi	r17,r17,-1
 1025234:	1081ffcc 	andi	r2,r2,2047
 1025238:	3011883a 	mov	r8,r6
 102523c:	3c62703a 	and	r17,r7,r17
 1025240:	ba803fcc 	andi	r10,r23,255
 1025244:	10006d26 	beq	r2,zero,10253fc <__muldf3+0x254>
 1025248:	00c1ffc4 	movi	r3,2047
 102524c:	10c06526 	beq	r2,r3,10253e4 <__muldf3+0x23c>
 1025250:	88c00434 	orhi	r3,r17,16
 1025254:	180690fa 	slli	r3,r3,3
 1025258:	3022d77a 	srli	r17,r6,29
 102525c:	301090fa 	slli	r8,r6,3
 1025260:	10bf0044 	addi	r2,r2,-1023
 1025264:	88e2b03a 	or	r17,r17,r3
 1025268:	000b883a 	mov	r5,zero
 102526c:	9085883a 	add	r2,r18,r2
 1025270:	2cc8b03a 	or	r4,r5,r19
 1025274:	00c003c4 	movi	r3,15
 1025278:	bdacf03a 	xor	r22,r23,r22
 102527c:	12c00044 	addi	r11,r2,1
 1025280:	19009936 	bltu	r3,r4,10254e8 <__muldf3+0x340>
 1025284:	200890ba 	slli	r4,r4,2
 1025288:	00c040b4 	movhi	r3,258
 102528c:	18d4a704 	addi	r3,r3,21148
 1025290:	20c9883a 	add	r4,r4,r3
 1025294:	20c00017 	ldw	r3,0(r4)
 1025298:	1800683a 	jmp	r3
 102529c:	010254e8 	cmpgeui	r4,zero,2387
 10252a0:	010252fc 	xorhi	r4,zero,2379
 10252a4:	010252fc 	xorhi	r4,zero,2379
 10252a8:	010252f8 	rdprs	r4,zero,2379
 10252ac:	010254c4 	movi	r4,2387
 10252b0:	010254c4 	movi	r4,2387
 10252b4:	010254ac 	andhi	r4,zero,2386
 10252b8:	010252f8 	rdprs	r4,zero,2379
 10252bc:	010254c4 	movi	r4,2387
 10252c0:	010254ac 	andhi	r4,zero,2386
 10252c4:	010254c4 	movi	r4,2387
 10252c8:	010252f8 	rdprs	r4,zero,2379
 10252cc:	010254d4 	movui	r4,2387
 10252d0:	010254d4 	movui	r4,2387
 10252d4:	010254d4 	movui	r4,2387
 10252d8:	010256f0 	cmpltui	r4,zero,2395
 10252dc:	2404b03a 	or	r2,r4,r16
 10252e0:	10006f1e 	bne	r2,zero,10254a0 <__muldf3+0x2f8>
 10252e4:	04c00204 	movi	r19,8
 10252e8:	0021883a 	mov	r16,zero
 10252ec:	0029883a 	mov	r20,zero
 10252f0:	07000084 	movi	fp,2
 10252f4:	003fcb06 	br	1025224 <__alt_data_end+0xff025224>
 10252f8:	502d883a 	mov	r22,r10
 10252fc:	00800084 	movi	r2,2
 1025300:	28805726 	beq	r5,r2,1025460 <__muldf3+0x2b8>
 1025304:	008000c4 	movi	r2,3
 1025308:	28816626 	beq	r5,r2,10258a4 <__muldf3+0x6fc>
 102530c:	00800044 	movi	r2,1
 1025310:	2881411e 	bne	r5,r2,1025818 <__muldf3+0x670>
 1025314:	b02b883a 	mov	r21,r22
 1025318:	0005883a 	mov	r2,zero
 102531c:	000b883a 	mov	r5,zero
 1025320:	0029883a 	mov	r20,zero
 1025324:	1004953a 	slli	r2,r2,20
 1025328:	a8c03fcc 	andi	r3,r21,255
 102532c:	04400434 	movhi	r17,16
 1025330:	8c7fffc4 	addi	r17,r17,-1
 1025334:	180697fa 	slli	r3,r3,31
 1025338:	2c4a703a 	and	r5,r5,r17
 102533c:	288ab03a 	or	r5,r5,r2
 1025340:	28c6b03a 	or	r3,r5,r3
 1025344:	a005883a 	mov	r2,r20
 1025348:	dfc00c17 	ldw	ra,48(sp)
 102534c:	df000b17 	ldw	fp,44(sp)
 1025350:	ddc00a17 	ldw	r23,40(sp)
 1025354:	dd800917 	ldw	r22,36(sp)
 1025358:	dd400817 	ldw	r21,32(sp)
 102535c:	dd000717 	ldw	r20,28(sp)
 1025360:	dcc00617 	ldw	r19,24(sp)
 1025364:	dc800517 	ldw	r18,20(sp)
 1025368:	dc400417 	ldw	r17,16(sp)
 102536c:	dc000317 	ldw	r16,12(sp)
 1025370:	dec00d04 	addi	sp,sp,52
 1025374:	f800283a 	ret
 1025378:	2404b03a 	or	r2,r4,r16
 102537c:	2027883a 	mov	r19,r4
 1025380:	10004226 	beq	r2,zero,102548c <__muldf3+0x2e4>
 1025384:	8000fc26 	beq	r16,zero,1025778 <__muldf3+0x5d0>
 1025388:	8009883a 	mov	r4,r16
 102538c:	d9800215 	stw	r6,8(sp)
 1025390:	d9c00015 	stw	r7,0(sp)
 1025394:	da400115 	stw	r9,4(sp)
 1025398:	10263c00 	call	10263c0 <__clzsi2>
 102539c:	d9800217 	ldw	r6,8(sp)
 10253a0:	d9c00017 	ldw	r7,0(sp)
 10253a4:	da400117 	ldw	r9,4(sp)
 10253a8:	113ffd44 	addi	r4,r2,-11
 10253ac:	00c00704 	movi	r3,28
 10253b0:	1900ed16 	blt	r3,r4,1025768 <__muldf3+0x5c0>
 10253b4:	00c00744 	movi	r3,29
 10253b8:	147ffe04 	addi	r17,r2,-8
 10253bc:	1907c83a 	sub	r3,r3,r4
 10253c0:	8460983a 	sll	r16,r16,r17
 10253c4:	98c6d83a 	srl	r3,r19,r3
 10253c8:	9c68983a 	sll	r20,r19,r17
 10253cc:	1c20b03a 	or	r16,r3,r16
 10253d0:	1080fcc4 	addi	r2,r2,1011
 10253d4:	00a5c83a 	sub	r18,zero,r2
 10253d8:	0027883a 	mov	r19,zero
 10253dc:	0039883a 	mov	fp,zero
 10253e0:	003f9006 	br	1025224 <__alt_data_end+0xff025224>
 10253e4:	3446b03a 	or	r3,r6,r17
 10253e8:	1800261e 	bne	r3,zero,1025484 <__muldf3+0x2dc>
 10253ec:	0023883a 	mov	r17,zero
 10253f0:	0011883a 	mov	r8,zero
 10253f4:	01400084 	movi	r5,2
 10253f8:	003f9c06 	br	102526c <__alt_data_end+0xff02526c>
 10253fc:	3446b03a 	or	r3,r6,r17
 1025400:	18001c26 	beq	r3,zero,1025474 <__muldf3+0x2cc>
 1025404:	8800ce26 	beq	r17,zero,1025740 <__muldf3+0x598>
 1025408:	8809883a 	mov	r4,r17
 102540c:	d9800215 	stw	r6,8(sp)
 1025410:	da400115 	stw	r9,4(sp)
 1025414:	da800015 	stw	r10,0(sp)
 1025418:	10263c00 	call	10263c0 <__clzsi2>
 102541c:	d9800217 	ldw	r6,8(sp)
 1025420:	da400117 	ldw	r9,4(sp)
 1025424:	da800017 	ldw	r10,0(sp)
 1025428:	113ffd44 	addi	r4,r2,-11
 102542c:	00c00704 	movi	r3,28
 1025430:	1900bf16 	blt	r3,r4,1025730 <__muldf3+0x588>
 1025434:	00c00744 	movi	r3,29
 1025438:	123ffe04 	addi	r8,r2,-8
 102543c:	1907c83a 	sub	r3,r3,r4
 1025440:	8a22983a 	sll	r17,r17,r8
 1025444:	30c6d83a 	srl	r3,r6,r3
 1025448:	3210983a 	sll	r8,r6,r8
 102544c:	1c62b03a 	or	r17,r3,r17
 1025450:	1080fcc4 	addi	r2,r2,1011
 1025454:	0085c83a 	sub	r2,zero,r2
 1025458:	000b883a 	mov	r5,zero
 102545c:	003f8306 	br	102526c <__alt_data_end+0xff02526c>
 1025460:	b02b883a 	mov	r21,r22
 1025464:	0081ffc4 	movi	r2,2047
 1025468:	000b883a 	mov	r5,zero
 102546c:	0029883a 	mov	r20,zero
 1025470:	003fac06 	br	1025324 <__alt_data_end+0xff025324>
 1025474:	0023883a 	mov	r17,zero
 1025478:	0011883a 	mov	r8,zero
 102547c:	01400044 	movi	r5,1
 1025480:	003f7a06 	br	102526c <__alt_data_end+0xff02526c>
 1025484:	014000c4 	movi	r5,3
 1025488:	003f7806 	br	102526c <__alt_data_end+0xff02526c>
 102548c:	04c00104 	movi	r19,4
 1025490:	0021883a 	mov	r16,zero
 1025494:	0029883a 	mov	r20,zero
 1025498:	07000044 	movi	fp,1
 102549c:	003f6106 	br	1025224 <__alt_data_end+0xff025224>
 10254a0:	04c00304 	movi	r19,12
 10254a4:	070000c4 	movi	fp,3
 10254a8:	003f5e06 	br	1025224 <__alt_data_end+0xff025224>
 10254ac:	01400434 	movhi	r5,16
 10254b0:	002b883a 	mov	r21,zero
 10254b4:	297fffc4 	addi	r5,r5,-1
 10254b8:	053fffc4 	movi	r20,-1
 10254bc:	0081ffc4 	movi	r2,2047
 10254c0:	003f9806 	br	1025324 <__alt_data_end+0xff025324>
 10254c4:	8023883a 	mov	r17,r16
 10254c8:	a011883a 	mov	r8,r20
 10254cc:	e00b883a 	mov	r5,fp
 10254d0:	003f8a06 	br	10252fc <__alt_data_end+0xff0252fc>
 10254d4:	8023883a 	mov	r17,r16
 10254d8:	a011883a 	mov	r8,r20
 10254dc:	482d883a 	mov	r22,r9
 10254e0:	e00b883a 	mov	r5,fp
 10254e4:	003f8506 	br	10252fc <__alt_data_end+0xff0252fc>
 10254e8:	a00ad43a 	srli	r5,r20,16
 10254ec:	401ad43a 	srli	r13,r8,16
 10254f0:	a53fffcc 	andi	r20,r20,65535
 10254f4:	423fffcc 	andi	r8,r8,65535
 10254f8:	4519383a 	mul	r12,r8,r20
 10254fc:	4147383a 	mul	r3,r8,r5
 1025500:	6d09383a 	mul	r4,r13,r20
 1025504:	600cd43a 	srli	r6,r12,16
 1025508:	2b5d383a 	mul	r14,r5,r13
 102550c:	20c9883a 	add	r4,r4,r3
 1025510:	310d883a 	add	r6,r6,r4
 1025514:	30c0022e 	bgeu	r6,r3,1025520 <__muldf3+0x378>
 1025518:	00c00074 	movhi	r3,1
 102551c:	70dd883a 	add	r14,r14,r3
 1025520:	8826d43a 	srli	r19,r17,16
 1025524:	8bffffcc 	andi	r15,r17,65535
 1025528:	7d23383a 	mul	r17,r15,r20
 102552c:	7949383a 	mul	r4,r15,r5
 1025530:	9d29383a 	mul	r20,r19,r20
 1025534:	8814d43a 	srli	r10,r17,16
 1025538:	3012943a 	slli	r9,r6,16
 102553c:	a129883a 	add	r20,r20,r4
 1025540:	633fffcc 	andi	r12,r12,65535
 1025544:	5515883a 	add	r10,r10,r20
 1025548:	3006d43a 	srli	r3,r6,16
 102554c:	4b13883a 	add	r9,r9,r12
 1025550:	2ccb383a 	mul	r5,r5,r19
 1025554:	5100022e 	bgeu	r10,r4,1025560 <__muldf3+0x3b8>
 1025558:	01000074 	movhi	r4,1
 102555c:	290b883a 	add	r5,r5,r4
 1025560:	802ad43a 	srli	r21,r16,16
 1025564:	843fffcc 	andi	r16,r16,65535
 1025568:	440d383a 	mul	r6,r8,r16
 102556c:	4565383a 	mul	r18,r8,r21
 1025570:	8349383a 	mul	r4,r16,r13
 1025574:	500e943a 	slli	r7,r10,16
 1025578:	3010d43a 	srli	r8,r6,16
 102557c:	5028d43a 	srli	r20,r10,16
 1025580:	2489883a 	add	r4,r4,r18
 1025584:	8abfffcc 	andi	r10,r17,65535
 1025588:	3a95883a 	add	r10,r7,r10
 102558c:	4119883a 	add	r12,r8,r4
 1025590:	a169883a 	add	r20,r20,r5
 1025594:	1a87883a 	add	r3,r3,r10
 1025598:	6d5b383a 	mul	r13,r13,r21
 102559c:	6480022e 	bgeu	r12,r18,10255a8 <__muldf3+0x400>
 10255a0:	01000074 	movhi	r4,1
 10255a4:	691b883a 	add	r13,r13,r4
 10255a8:	7c25383a 	mul	r18,r15,r16
 10255ac:	7d4b383a 	mul	r5,r15,r21
 10255b0:	84cf383a 	mul	r7,r16,r19
 10255b4:	901ed43a 	srli	r15,r18,16
 10255b8:	6008d43a 	srli	r4,r12,16
 10255bc:	6010943a 	slli	r8,r12,16
 10255c0:	394f883a 	add	r7,r7,r5
 10255c4:	333fffcc 	andi	r12,r6,65535
 10255c8:	79df883a 	add	r15,r15,r7
 10255cc:	235b883a 	add	r13,r4,r13
 10255d0:	9d63383a 	mul	r17,r19,r21
 10255d4:	4309883a 	add	r4,r8,r12
 10255d8:	7940022e 	bgeu	r15,r5,10255e4 <__muldf3+0x43c>
 10255dc:	01400074 	movhi	r5,1
 10255e0:	8963883a 	add	r17,r17,r5
 10255e4:	780a943a 	slli	r5,r15,16
 10255e8:	91bfffcc 	andi	r6,r18,65535
 10255ec:	70c7883a 	add	r3,r14,r3
 10255f0:	298d883a 	add	r6,r5,r6
 10255f4:	1a8f803a 	cmpltu	r7,r3,r10
 10255f8:	350b883a 	add	r5,r6,r20
 10255fc:	20c7883a 	add	r3,r4,r3
 1025600:	3955883a 	add	r10,r7,r5
 1025604:	1909803a 	cmpltu	r4,r3,r4
 1025608:	6a91883a 	add	r8,r13,r10
 102560c:	780cd43a 	srli	r6,r15,16
 1025610:	2219883a 	add	r12,r4,r8
 1025614:	2d0b803a 	cmpltu	r5,r5,r20
 1025618:	51cf803a 	cmpltu	r7,r10,r7
 102561c:	29ceb03a 	or	r7,r5,r7
 1025620:	4351803a 	cmpltu	r8,r8,r13
 1025624:	610b803a 	cmpltu	r5,r12,r4
 1025628:	4148b03a 	or	r4,r8,r5
 102562c:	398f883a 	add	r7,r7,r6
 1025630:	3909883a 	add	r4,r7,r4
 1025634:	1810927a 	slli	r8,r3,9
 1025638:	2449883a 	add	r4,r4,r17
 102563c:	2008927a 	slli	r4,r4,9
 1025640:	6022d5fa 	srli	r17,r12,23
 1025644:	1806d5fa 	srli	r3,r3,23
 1025648:	4252b03a 	or	r9,r8,r9
 102564c:	600a927a 	slli	r5,r12,9
 1025650:	4810c03a 	cmpne	r8,r9,zero
 1025654:	2462b03a 	or	r17,r4,r17
 1025658:	40c6b03a 	or	r3,r8,r3
 102565c:	8900402c 	andhi	r4,r17,256
 1025660:	1950b03a 	or	r8,r3,r5
 1025664:	20000726 	beq	r4,zero,1025684 <__muldf3+0x4dc>
 1025668:	4006d07a 	srli	r3,r8,1
 102566c:	880497fa 	slli	r2,r17,31
 1025670:	4200004c 	andi	r8,r8,1
 1025674:	8822d07a 	srli	r17,r17,1
 1025678:	1a10b03a 	or	r8,r3,r8
 102567c:	1210b03a 	or	r8,r2,r8
 1025680:	5805883a 	mov	r2,r11
 1025684:	1140ffc4 	addi	r5,r2,1023
 1025688:	0140440e 	bge	zero,r5,102579c <__muldf3+0x5f4>
 102568c:	40c001cc 	andi	r3,r8,7
 1025690:	18000726 	beq	r3,zero,10256b0 <__muldf3+0x508>
 1025694:	40c003cc 	andi	r3,r8,15
 1025698:	01000104 	movi	r4,4
 102569c:	19000426 	beq	r3,r4,10256b0 <__muldf3+0x508>
 10256a0:	4107883a 	add	r3,r8,r4
 10256a4:	1a11803a 	cmpltu	r8,r3,r8
 10256a8:	8a23883a 	add	r17,r17,r8
 10256ac:	1811883a 	mov	r8,r3
 10256b0:	88c0402c 	andhi	r3,r17,256
 10256b4:	18000426 	beq	r3,zero,10256c8 <__muldf3+0x520>
 10256b8:	11410004 	addi	r5,r2,1024
 10256bc:	00bfc034 	movhi	r2,65280
 10256c0:	10bfffc4 	addi	r2,r2,-1
 10256c4:	88a2703a 	and	r17,r17,r2
 10256c8:	0081ff84 	movi	r2,2046
 10256cc:	117f6416 	blt	r2,r5,1025460 <__alt_data_end+0xff025460>
 10256d0:	8828977a 	slli	r20,r17,29
 10256d4:	4010d0fa 	srli	r8,r8,3
 10256d8:	8822927a 	slli	r17,r17,9
 10256dc:	2881ffcc 	andi	r2,r5,2047
 10256e0:	a228b03a 	or	r20,r20,r8
 10256e4:	880ad33a 	srli	r5,r17,12
 10256e8:	b02b883a 	mov	r21,r22
 10256ec:	003f0d06 	br	1025324 <__alt_data_end+0xff025324>
 10256f0:	8080022c 	andhi	r2,r16,8
 10256f4:	10000926 	beq	r2,zero,102571c <__muldf3+0x574>
 10256f8:	8880022c 	andhi	r2,r17,8
 10256fc:	1000071e 	bne	r2,zero,102571c <__muldf3+0x574>
 1025700:	00800434 	movhi	r2,16
 1025704:	89400234 	orhi	r5,r17,8
 1025708:	10bfffc4 	addi	r2,r2,-1
 102570c:	b82b883a 	mov	r21,r23
 1025710:	288a703a 	and	r5,r5,r2
 1025714:	4029883a 	mov	r20,r8
 1025718:	003f6806 	br	10254bc <__alt_data_end+0xff0254bc>
 102571c:	00800434 	movhi	r2,16
 1025720:	81400234 	orhi	r5,r16,8
 1025724:	10bfffc4 	addi	r2,r2,-1
 1025728:	288a703a 	and	r5,r5,r2
 102572c:	003f6306 	br	10254bc <__alt_data_end+0xff0254bc>
 1025730:	147ff604 	addi	r17,r2,-40
 1025734:	3462983a 	sll	r17,r6,r17
 1025738:	0011883a 	mov	r8,zero
 102573c:	003f4406 	br	1025450 <__alt_data_end+0xff025450>
 1025740:	3009883a 	mov	r4,r6
 1025744:	d9800215 	stw	r6,8(sp)
 1025748:	da400115 	stw	r9,4(sp)
 102574c:	da800015 	stw	r10,0(sp)
 1025750:	10263c00 	call	10263c0 <__clzsi2>
 1025754:	10800804 	addi	r2,r2,32
 1025758:	da800017 	ldw	r10,0(sp)
 102575c:	da400117 	ldw	r9,4(sp)
 1025760:	d9800217 	ldw	r6,8(sp)
 1025764:	003f3006 	br	1025428 <__alt_data_end+0xff025428>
 1025768:	143ff604 	addi	r16,r2,-40
 102576c:	9c20983a 	sll	r16,r19,r16
 1025770:	0029883a 	mov	r20,zero
 1025774:	003f1606 	br	10253d0 <__alt_data_end+0xff0253d0>
 1025778:	d9800215 	stw	r6,8(sp)
 102577c:	d9c00015 	stw	r7,0(sp)
 1025780:	da400115 	stw	r9,4(sp)
 1025784:	10263c00 	call	10263c0 <__clzsi2>
 1025788:	10800804 	addi	r2,r2,32
 102578c:	da400117 	ldw	r9,4(sp)
 1025790:	d9c00017 	ldw	r7,0(sp)
 1025794:	d9800217 	ldw	r6,8(sp)
 1025798:	003f0306 	br	10253a8 <__alt_data_end+0xff0253a8>
 102579c:	00c00044 	movi	r3,1
 10257a0:	1947c83a 	sub	r3,r3,r5
 10257a4:	00800e04 	movi	r2,56
 10257a8:	10feda16 	blt	r2,r3,1025314 <__alt_data_end+0xff025314>
 10257ac:	008007c4 	movi	r2,31
 10257b0:	10c01b16 	blt	r2,r3,1025820 <__muldf3+0x678>
 10257b4:	00800804 	movi	r2,32
 10257b8:	10c5c83a 	sub	r2,r2,r3
 10257bc:	888a983a 	sll	r5,r17,r2
 10257c0:	40c8d83a 	srl	r4,r8,r3
 10257c4:	4084983a 	sll	r2,r8,r2
 10257c8:	88e2d83a 	srl	r17,r17,r3
 10257cc:	2906b03a 	or	r3,r5,r4
 10257d0:	1004c03a 	cmpne	r2,r2,zero
 10257d4:	1886b03a 	or	r3,r3,r2
 10257d8:	188001cc 	andi	r2,r3,7
 10257dc:	10000726 	beq	r2,zero,10257fc <__muldf3+0x654>
 10257e0:	188003cc 	andi	r2,r3,15
 10257e4:	01000104 	movi	r4,4
 10257e8:	11000426 	beq	r2,r4,10257fc <__muldf3+0x654>
 10257ec:	1805883a 	mov	r2,r3
 10257f0:	10c00104 	addi	r3,r2,4
 10257f4:	1885803a 	cmpltu	r2,r3,r2
 10257f8:	88a3883a 	add	r17,r17,r2
 10257fc:	8880202c 	andhi	r2,r17,128
 1025800:	10001c26 	beq	r2,zero,1025874 <__muldf3+0x6cc>
 1025804:	b02b883a 	mov	r21,r22
 1025808:	00800044 	movi	r2,1
 102580c:	000b883a 	mov	r5,zero
 1025810:	0029883a 	mov	r20,zero
 1025814:	003ec306 	br	1025324 <__alt_data_end+0xff025324>
 1025818:	5805883a 	mov	r2,r11
 102581c:	003f9906 	br	1025684 <__alt_data_end+0xff025684>
 1025820:	00bff844 	movi	r2,-31
 1025824:	1145c83a 	sub	r2,r2,r5
 1025828:	8888d83a 	srl	r4,r17,r2
 102582c:	00800804 	movi	r2,32
 1025830:	18801a26 	beq	r3,r2,102589c <__muldf3+0x6f4>
 1025834:	00801004 	movi	r2,64
 1025838:	10c5c83a 	sub	r2,r2,r3
 102583c:	8884983a 	sll	r2,r17,r2
 1025840:	1204b03a 	or	r2,r2,r8
 1025844:	1004c03a 	cmpne	r2,r2,zero
 1025848:	2084b03a 	or	r2,r4,r2
 102584c:	144001cc 	andi	r17,r2,7
 1025850:	88000d1e 	bne	r17,zero,1025888 <__muldf3+0x6e0>
 1025854:	000b883a 	mov	r5,zero
 1025858:	1028d0fa 	srli	r20,r2,3
 102585c:	b02b883a 	mov	r21,r22
 1025860:	0005883a 	mov	r2,zero
 1025864:	a468b03a 	or	r20,r20,r17
 1025868:	003eae06 	br	1025324 <__alt_data_end+0xff025324>
 102586c:	1007883a 	mov	r3,r2
 1025870:	0023883a 	mov	r17,zero
 1025874:	880a927a 	slli	r5,r17,9
 1025878:	1805883a 	mov	r2,r3
 102587c:	8822977a 	slli	r17,r17,29
 1025880:	280ad33a 	srli	r5,r5,12
 1025884:	003ff406 	br	1025858 <__alt_data_end+0xff025858>
 1025888:	10c003cc 	andi	r3,r2,15
 102588c:	01000104 	movi	r4,4
 1025890:	193ff626 	beq	r3,r4,102586c <__alt_data_end+0xff02586c>
 1025894:	0023883a 	mov	r17,zero
 1025898:	003fd506 	br	10257f0 <__alt_data_end+0xff0257f0>
 102589c:	0005883a 	mov	r2,zero
 10258a0:	003fe706 	br	1025840 <__alt_data_end+0xff025840>
 10258a4:	00800434 	movhi	r2,16
 10258a8:	89400234 	orhi	r5,r17,8
 10258ac:	10bfffc4 	addi	r2,r2,-1
 10258b0:	b02b883a 	mov	r21,r22
 10258b4:	288a703a 	and	r5,r5,r2
 10258b8:	4029883a 	mov	r20,r8
 10258bc:	003eff06 	br	10254bc <__alt_data_end+0xff0254bc>

010258c0 <__subdf3>:
 10258c0:	02000434 	movhi	r8,16
 10258c4:	423fffc4 	addi	r8,r8,-1
 10258c8:	defffb04 	addi	sp,sp,-20
 10258cc:	2a14703a 	and	r10,r5,r8
 10258d0:	3812d53a 	srli	r9,r7,20
 10258d4:	3a10703a 	and	r8,r7,r8
 10258d8:	2006d77a 	srli	r3,r4,29
 10258dc:	3004d77a 	srli	r2,r6,29
 10258e0:	dc000015 	stw	r16,0(sp)
 10258e4:	501490fa 	slli	r10,r10,3
 10258e8:	2820d53a 	srli	r16,r5,20
 10258ec:	401090fa 	slli	r8,r8,3
 10258f0:	dc800215 	stw	r18,8(sp)
 10258f4:	dc400115 	stw	r17,4(sp)
 10258f8:	dfc00415 	stw	ra,16(sp)
 10258fc:	202290fa 	slli	r17,r4,3
 1025900:	dcc00315 	stw	r19,12(sp)
 1025904:	4a41ffcc 	andi	r9,r9,2047
 1025908:	0101ffc4 	movi	r4,2047
 102590c:	2824d7fa 	srli	r18,r5,31
 1025910:	8401ffcc 	andi	r16,r16,2047
 1025914:	50c6b03a 	or	r3,r10,r3
 1025918:	380ed7fa 	srli	r7,r7,31
 102591c:	408ab03a 	or	r5,r8,r2
 1025920:	300c90fa 	slli	r6,r6,3
 1025924:	49009626 	beq	r9,r4,1025b80 <__subdf3+0x2c0>
 1025928:	39c0005c 	xori	r7,r7,1
 102592c:	8245c83a 	sub	r2,r16,r9
 1025930:	3c807426 	beq	r7,r18,1025b04 <__subdf3+0x244>
 1025934:	0080af0e 	bge	zero,r2,1025bf4 <__subdf3+0x334>
 1025938:	48002a1e 	bne	r9,zero,10259e4 <__subdf3+0x124>
 102593c:	2988b03a 	or	r4,r5,r6
 1025940:	20009a1e 	bne	r4,zero,1025bac <__subdf3+0x2ec>
 1025944:	888001cc 	andi	r2,r17,7
 1025948:	10000726 	beq	r2,zero,1025968 <__subdf3+0xa8>
 102594c:	888003cc 	andi	r2,r17,15
 1025950:	01000104 	movi	r4,4
 1025954:	11000426 	beq	r2,r4,1025968 <__subdf3+0xa8>
 1025958:	890b883a 	add	r5,r17,r4
 102595c:	2c63803a 	cmpltu	r17,r5,r17
 1025960:	1c47883a 	add	r3,r3,r17
 1025964:	2823883a 	mov	r17,r5
 1025968:	1880202c 	andhi	r2,r3,128
 102596c:	10005926 	beq	r2,zero,1025ad4 <__subdf3+0x214>
 1025970:	84000044 	addi	r16,r16,1
 1025974:	0081ffc4 	movi	r2,2047
 1025978:	8080be26 	beq	r16,r2,1025c74 <__subdf3+0x3b4>
 102597c:	017fe034 	movhi	r5,65408
 1025980:	297fffc4 	addi	r5,r5,-1
 1025984:	1946703a 	and	r3,r3,r5
 1025988:	1804977a 	slli	r2,r3,29
 102598c:	1806927a 	slli	r3,r3,9
 1025990:	8822d0fa 	srli	r17,r17,3
 1025994:	8401ffcc 	andi	r16,r16,2047
 1025998:	180ad33a 	srli	r5,r3,12
 102599c:	9100004c 	andi	r4,r18,1
 10259a0:	1444b03a 	or	r2,r2,r17
 10259a4:	80c1ffcc 	andi	r3,r16,2047
 10259a8:	1820953a 	slli	r16,r3,20
 10259ac:	20c03fcc 	andi	r3,r4,255
 10259b0:	180897fa 	slli	r4,r3,31
 10259b4:	00c00434 	movhi	r3,16
 10259b8:	18ffffc4 	addi	r3,r3,-1
 10259bc:	28c6703a 	and	r3,r5,r3
 10259c0:	1c06b03a 	or	r3,r3,r16
 10259c4:	1906b03a 	or	r3,r3,r4
 10259c8:	dfc00417 	ldw	ra,16(sp)
 10259cc:	dcc00317 	ldw	r19,12(sp)
 10259d0:	dc800217 	ldw	r18,8(sp)
 10259d4:	dc400117 	ldw	r17,4(sp)
 10259d8:	dc000017 	ldw	r16,0(sp)
 10259dc:	dec00504 	addi	sp,sp,20
 10259e0:	f800283a 	ret
 10259e4:	0101ffc4 	movi	r4,2047
 10259e8:	813fd626 	beq	r16,r4,1025944 <__alt_data_end+0xff025944>
 10259ec:	29402034 	orhi	r5,r5,128
 10259f0:	01000e04 	movi	r4,56
 10259f4:	2080a316 	blt	r4,r2,1025c84 <__subdf3+0x3c4>
 10259f8:	010007c4 	movi	r4,31
 10259fc:	2080c616 	blt	r4,r2,1025d18 <__subdf3+0x458>
 1025a00:	01000804 	movi	r4,32
 1025a04:	2089c83a 	sub	r4,r4,r2
 1025a08:	2910983a 	sll	r8,r5,r4
 1025a0c:	308ed83a 	srl	r7,r6,r2
 1025a10:	3108983a 	sll	r4,r6,r4
 1025a14:	2884d83a 	srl	r2,r5,r2
 1025a18:	41ccb03a 	or	r6,r8,r7
 1025a1c:	2008c03a 	cmpne	r4,r4,zero
 1025a20:	310cb03a 	or	r6,r6,r4
 1025a24:	898dc83a 	sub	r6,r17,r6
 1025a28:	89a3803a 	cmpltu	r17,r17,r6
 1025a2c:	1887c83a 	sub	r3,r3,r2
 1025a30:	1c47c83a 	sub	r3,r3,r17
 1025a34:	3023883a 	mov	r17,r6
 1025a38:	1880202c 	andhi	r2,r3,128
 1025a3c:	10002326 	beq	r2,zero,1025acc <__subdf3+0x20c>
 1025a40:	04c02034 	movhi	r19,128
 1025a44:	9cffffc4 	addi	r19,r19,-1
 1025a48:	1ce6703a 	and	r19,r3,r19
 1025a4c:	98007a26 	beq	r19,zero,1025c38 <__subdf3+0x378>
 1025a50:	9809883a 	mov	r4,r19
 1025a54:	10263c00 	call	10263c0 <__clzsi2>
 1025a58:	113ffe04 	addi	r4,r2,-8
 1025a5c:	00c007c4 	movi	r3,31
 1025a60:	19007b16 	blt	r3,r4,1025c50 <__subdf3+0x390>
 1025a64:	00800804 	movi	r2,32
 1025a68:	1105c83a 	sub	r2,r2,r4
 1025a6c:	8884d83a 	srl	r2,r17,r2
 1025a70:	9906983a 	sll	r3,r19,r4
 1025a74:	8922983a 	sll	r17,r17,r4
 1025a78:	10c4b03a 	or	r2,r2,r3
 1025a7c:	24007816 	blt	r4,r16,1025c60 <__subdf3+0x3a0>
 1025a80:	2421c83a 	sub	r16,r4,r16
 1025a84:	80c00044 	addi	r3,r16,1
 1025a88:	010007c4 	movi	r4,31
 1025a8c:	20c09516 	blt	r4,r3,1025ce4 <__subdf3+0x424>
 1025a90:	01400804 	movi	r5,32
 1025a94:	28cbc83a 	sub	r5,r5,r3
 1025a98:	88c8d83a 	srl	r4,r17,r3
 1025a9c:	8962983a 	sll	r17,r17,r5
 1025aa0:	114a983a 	sll	r5,r2,r5
 1025aa4:	10c6d83a 	srl	r3,r2,r3
 1025aa8:	8804c03a 	cmpne	r2,r17,zero
 1025aac:	290ab03a 	or	r5,r5,r4
 1025ab0:	28a2b03a 	or	r17,r5,r2
 1025ab4:	0021883a 	mov	r16,zero
 1025ab8:	003fa206 	br	1025944 <__alt_data_end+0xff025944>
 1025abc:	2090b03a 	or	r8,r4,r2
 1025ac0:	40018e26 	beq	r8,zero,10260fc <__subdf3+0x83c>
 1025ac4:	1007883a 	mov	r3,r2
 1025ac8:	2023883a 	mov	r17,r4
 1025acc:	888001cc 	andi	r2,r17,7
 1025ad0:	103f9e1e 	bne	r2,zero,102594c <__alt_data_end+0xff02594c>
 1025ad4:	1804977a 	slli	r2,r3,29
 1025ad8:	8822d0fa 	srli	r17,r17,3
 1025adc:	1810d0fa 	srli	r8,r3,3
 1025ae0:	9100004c 	andi	r4,r18,1
 1025ae4:	1444b03a 	or	r2,r2,r17
 1025ae8:	00c1ffc4 	movi	r3,2047
 1025aec:	80c02826 	beq	r16,r3,1025b90 <__subdf3+0x2d0>
 1025af0:	01400434 	movhi	r5,16
 1025af4:	297fffc4 	addi	r5,r5,-1
 1025af8:	80e0703a 	and	r16,r16,r3
 1025afc:	414a703a 	and	r5,r8,r5
 1025b00:	003fa806 	br	10259a4 <__alt_data_end+0xff0259a4>
 1025b04:	0080630e 	bge	zero,r2,1025c94 <__subdf3+0x3d4>
 1025b08:	48003026 	beq	r9,zero,1025bcc <__subdf3+0x30c>
 1025b0c:	0101ffc4 	movi	r4,2047
 1025b10:	813f8c26 	beq	r16,r4,1025944 <__alt_data_end+0xff025944>
 1025b14:	29402034 	orhi	r5,r5,128
 1025b18:	01000e04 	movi	r4,56
 1025b1c:	2080a90e 	bge	r4,r2,1025dc4 <__subdf3+0x504>
 1025b20:	298cb03a 	or	r6,r5,r6
 1025b24:	3012c03a 	cmpne	r9,r6,zero
 1025b28:	0005883a 	mov	r2,zero
 1025b2c:	4c53883a 	add	r9,r9,r17
 1025b30:	4c63803a 	cmpltu	r17,r9,r17
 1025b34:	10c7883a 	add	r3,r2,r3
 1025b38:	88c7883a 	add	r3,r17,r3
 1025b3c:	4823883a 	mov	r17,r9
 1025b40:	1880202c 	andhi	r2,r3,128
 1025b44:	1000d026 	beq	r2,zero,1025e88 <__subdf3+0x5c8>
 1025b48:	84000044 	addi	r16,r16,1
 1025b4c:	0081ffc4 	movi	r2,2047
 1025b50:	8080fe26 	beq	r16,r2,1025f4c <__subdf3+0x68c>
 1025b54:	00bfe034 	movhi	r2,65408
 1025b58:	10bfffc4 	addi	r2,r2,-1
 1025b5c:	1886703a 	and	r3,r3,r2
 1025b60:	880ad07a 	srli	r5,r17,1
 1025b64:	180497fa 	slli	r2,r3,31
 1025b68:	8900004c 	andi	r4,r17,1
 1025b6c:	2922b03a 	or	r17,r5,r4
 1025b70:	1806d07a 	srli	r3,r3,1
 1025b74:	1462b03a 	or	r17,r2,r17
 1025b78:	3825883a 	mov	r18,r7
 1025b7c:	003f7106 	br	1025944 <__alt_data_end+0xff025944>
 1025b80:	2984b03a 	or	r2,r5,r6
 1025b84:	103f6826 	beq	r2,zero,1025928 <__alt_data_end+0xff025928>
 1025b88:	39c03fcc 	andi	r7,r7,255
 1025b8c:	003f6706 	br	102592c <__alt_data_end+0xff02592c>
 1025b90:	4086b03a 	or	r3,r8,r2
 1025b94:	18015226 	beq	r3,zero,10260e0 <__subdf3+0x820>
 1025b98:	00c00434 	movhi	r3,16
 1025b9c:	41400234 	orhi	r5,r8,8
 1025ba0:	18ffffc4 	addi	r3,r3,-1
 1025ba4:	28ca703a 	and	r5,r5,r3
 1025ba8:	003f7e06 	br	10259a4 <__alt_data_end+0xff0259a4>
 1025bac:	10bfffc4 	addi	r2,r2,-1
 1025bb0:	1000491e 	bne	r2,zero,1025cd8 <__subdf3+0x418>
 1025bb4:	898fc83a 	sub	r7,r17,r6
 1025bb8:	89e3803a 	cmpltu	r17,r17,r7
 1025bbc:	1947c83a 	sub	r3,r3,r5
 1025bc0:	1c47c83a 	sub	r3,r3,r17
 1025bc4:	3823883a 	mov	r17,r7
 1025bc8:	003f9b06 	br	1025a38 <__alt_data_end+0xff025a38>
 1025bcc:	2988b03a 	or	r4,r5,r6
 1025bd0:	203f5c26 	beq	r4,zero,1025944 <__alt_data_end+0xff025944>
 1025bd4:	10bfffc4 	addi	r2,r2,-1
 1025bd8:	1000931e 	bne	r2,zero,1025e28 <__subdf3+0x568>
 1025bdc:	898d883a 	add	r6,r17,r6
 1025be0:	3463803a 	cmpltu	r17,r6,r17
 1025be4:	1947883a 	add	r3,r3,r5
 1025be8:	88c7883a 	add	r3,r17,r3
 1025bec:	3023883a 	mov	r17,r6
 1025bf0:	003fd306 	br	1025b40 <__alt_data_end+0xff025b40>
 1025bf4:	1000541e 	bne	r2,zero,1025d48 <__subdf3+0x488>
 1025bf8:	80800044 	addi	r2,r16,1
 1025bfc:	1081ffcc 	andi	r2,r2,2047
 1025c00:	01000044 	movi	r4,1
 1025c04:	2080a20e 	bge	r4,r2,1025e90 <__subdf3+0x5d0>
 1025c08:	8989c83a 	sub	r4,r17,r6
 1025c0c:	8905803a 	cmpltu	r2,r17,r4
 1025c10:	1967c83a 	sub	r19,r3,r5
 1025c14:	98a7c83a 	sub	r19,r19,r2
 1025c18:	9880202c 	andhi	r2,r19,128
 1025c1c:	10006326 	beq	r2,zero,1025dac <__subdf3+0x4ec>
 1025c20:	3463c83a 	sub	r17,r6,r17
 1025c24:	28c7c83a 	sub	r3,r5,r3
 1025c28:	344d803a 	cmpltu	r6,r6,r17
 1025c2c:	19a7c83a 	sub	r19,r3,r6
 1025c30:	3825883a 	mov	r18,r7
 1025c34:	983f861e 	bne	r19,zero,1025a50 <__alt_data_end+0xff025a50>
 1025c38:	8809883a 	mov	r4,r17
 1025c3c:	10263c00 	call	10263c0 <__clzsi2>
 1025c40:	10800804 	addi	r2,r2,32
 1025c44:	113ffe04 	addi	r4,r2,-8
 1025c48:	00c007c4 	movi	r3,31
 1025c4c:	193f850e 	bge	r3,r4,1025a64 <__alt_data_end+0xff025a64>
 1025c50:	10bff604 	addi	r2,r2,-40
 1025c54:	8884983a 	sll	r2,r17,r2
 1025c58:	0023883a 	mov	r17,zero
 1025c5c:	243f880e 	bge	r4,r16,1025a80 <__alt_data_end+0xff025a80>
 1025c60:	00ffe034 	movhi	r3,65408
 1025c64:	18ffffc4 	addi	r3,r3,-1
 1025c68:	8121c83a 	sub	r16,r16,r4
 1025c6c:	10c6703a 	and	r3,r2,r3
 1025c70:	003f3406 	br	1025944 <__alt_data_end+0xff025944>
 1025c74:	9100004c 	andi	r4,r18,1
 1025c78:	000b883a 	mov	r5,zero
 1025c7c:	0005883a 	mov	r2,zero
 1025c80:	003f4806 	br	10259a4 <__alt_data_end+0xff0259a4>
 1025c84:	298cb03a 	or	r6,r5,r6
 1025c88:	300cc03a 	cmpne	r6,r6,zero
 1025c8c:	0005883a 	mov	r2,zero
 1025c90:	003f6406 	br	1025a24 <__alt_data_end+0xff025a24>
 1025c94:	10009a1e 	bne	r2,zero,1025f00 <__subdf3+0x640>
 1025c98:	82400044 	addi	r9,r16,1
 1025c9c:	4881ffcc 	andi	r2,r9,2047
 1025ca0:	02800044 	movi	r10,1
 1025ca4:	5080670e 	bge	r10,r2,1025e44 <__subdf3+0x584>
 1025ca8:	0081ffc4 	movi	r2,2047
 1025cac:	4880af26 	beq	r9,r2,1025f6c <__subdf3+0x6ac>
 1025cb0:	898d883a 	add	r6,r17,r6
 1025cb4:	1945883a 	add	r2,r3,r5
 1025cb8:	3447803a 	cmpltu	r3,r6,r17
 1025cbc:	1887883a 	add	r3,r3,r2
 1025cc0:	182297fa 	slli	r17,r3,31
 1025cc4:	300cd07a 	srli	r6,r6,1
 1025cc8:	1806d07a 	srli	r3,r3,1
 1025ccc:	4821883a 	mov	r16,r9
 1025cd0:	89a2b03a 	or	r17,r17,r6
 1025cd4:	003f1b06 	br	1025944 <__alt_data_end+0xff025944>
 1025cd8:	0101ffc4 	movi	r4,2047
 1025cdc:	813f441e 	bne	r16,r4,10259f0 <__alt_data_end+0xff0259f0>
 1025ce0:	003f1806 	br	1025944 <__alt_data_end+0xff025944>
 1025ce4:	843ff844 	addi	r16,r16,-31
 1025ce8:	01400804 	movi	r5,32
 1025cec:	1408d83a 	srl	r4,r2,r16
 1025cf0:	19405026 	beq	r3,r5,1025e34 <__subdf3+0x574>
 1025cf4:	01401004 	movi	r5,64
 1025cf8:	28c7c83a 	sub	r3,r5,r3
 1025cfc:	10c4983a 	sll	r2,r2,r3
 1025d00:	88a2b03a 	or	r17,r17,r2
 1025d04:	8822c03a 	cmpne	r17,r17,zero
 1025d08:	2462b03a 	or	r17,r4,r17
 1025d0c:	0007883a 	mov	r3,zero
 1025d10:	0021883a 	mov	r16,zero
 1025d14:	003f6d06 	br	1025acc <__alt_data_end+0xff025acc>
 1025d18:	11fff804 	addi	r7,r2,-32
 1025d1c:	01000804 	movi	r4,32
 1025d20:	29ced83a 	srl	r7,r5,r7
 1025d24:	11004526 	beq	r2,r4,1025e3c <__subdf3+0x57c>
 1025d28:	01001004 	movi	r4,64
 1025d2c:	2089c83a 	sub	r4,r4,r2
 1025d30:	2904983a 	sll	r2,r5,r4
 1025d34:	118cb03a 	or	r6,r2,r6
 1025d38:	300cc03a 	cmpne	r6,r6,zero
 1025d3c:	398cb03a 	or	r6,r7,r6
 1025d40:	0005883a 	mov	r2,zero
 1025d44:	003f3706 	br	1025a24 <__alt_data_end+0xff025a24>
 1025d48:	80002a26 	beq	r16,zero,1025df4 <__subdf3+0x534>
 1025d4c:	0101ffc4 	movi	r4,2047
 1025d50:	49006626 	beq	r9,r4,1025eec <__subdf3+0x62c>
 1025d54:	0085c83a 	sub	r2,zero,r2
 1025d58:	18c02034 	orhi	r3,r3,128
 1025d5c:	01000e04 	movi	r4,56
 1025d60:	20807e16 	blt	r4,r2,1025f5c <__subdf3+0x69c>
 1025d64:	010007c4 	movi	r4,31
 1025d68:	2080e716 	blt	r4,r2,1026108 <__subdf3+0x848>
 1025d6c:	01000804 	movi	r4,32
 1025d70:	2089c83a 	sub	r4,r4,r2
 1025d74:	1914983a 	sll	r10,r3,r4
 1025d78:	8890d83a 	srl	r8,r17,r2
 1025d7c:	8908983a 	sll	r4,r17,r4
 1025d80:	1884d83a 	srl	r2,r3,r2
 1025d84:	5222b03a 	or	r17,r10,r8
 1025d88:	2006c03a 	cmpne	r3,r4,zero
 1025d8c:	88e2b03a 	or	r17,r17,r3
 1025d90:	3463c83a 	sub	r17,r6,r17
 1025d94:	2885c83a 	sub	r2,r5,r2
 1025d98:	344d803a 	cmpltu	r6,r6,r17
 1025d9c:	1187c83a 	sub	r3,r2,r6
 1025da0:	4821883a 	mov	r16,r9
 1025da4:	3825883a 	mov	r18,r7
 1025da8:	003f2306 	br	1025a38 <__alt_data_end+0xff025a38>
 1025dac:	24d0b03a 	or	r8,r4,r19
 1025db0:	40001b1e 	bne	r8,zero,1025e20 <__subdf3+0x560>
 1025db4:	0005883a 	mov	r2,zero
 1025db8:	0009883a 	mov	r4,zero
 1025dbc:	0021883a 	mov	r16,zero
 1025dc0:	003f4906 	br	1025ae8 <__alt_data_end+0xff025ae8>
 1025dc4:	010007c4 	movi	r4,31
 1025dc8:	20803a16 	blt	r4,r2,1025eb4 <__subdf3+0x5f4>
 1025dcc:	01000804 	movi	r4,32
 1025dd0:	2089c83a 	sub	r4,r4,r2
 1025dd4:	2912983a 	sll	r9,r5,r4
 1025dd8:	3090d83a 	srl	r8,r6,r2
 1025ddc:	3108983a 	sll	r4,r6,r4
 1025de0:	2884d83a 	srl	r2,r5,r2
 1025de4:	4a12b03a 	or	r9,r9,r8
 1025de8:	2008c03a 	cmpne	r4,r4,zero
 1025dec:	4912b03a 	or	r9,r9,r4
 1025df0:	003f4e06 	br	1025b2c <__alt_data_end+0xff025b2c>
 1025df4:	1c48b03a 	or	r4,r3,r17
 1025df8:	20003c26 	beq	r4,zero,1025eec <__subdf3+0x62c>
 1025dfc:	0084303a 	nor	r2,zero,r2
 1025e00:	1000381e 	bne	r2,zero,1025ee4 <__subdf3+0x624>
 1025e04:	3463c83a 	sub	r17,r6,r17
 1025e08:	28c5c83a 	sub	r2,r5,r3
 1025e0c:	344d803a 	cmpltu	r6,r6,r17
 1025e10:	1187c83a 	sub	r3,r2,r6
 1025e14:	4821883a 	mov	r16,r9
 1025e18:	3825883a 	mov	r18,r7
 1025e1c:	003f0606 	br	1025a38 <__alt_data_end+0xff025a38>
 1025e20:	2023883a 	mov	r17,r4
 1025e24:	003f0906 	br	1025a4c <__alt_data_end+0xff025a4c>
 1025e28:	0101ffc4 	movi	r4,2047
 1025e2c:	813f3a1e 	bne	r16,r4,1025b18 <__alt_data_end+0xff025b18>
 1025e30:	003ec406 	br	1025944 <__alt_data_end+0xff025944>
 1025e34:	0005883a 	mov	r2,zero
 1025e38:	003fb106 	br	1025d00 <__alt_data_end+0xff025d00>
 1025e3c:	0005883a 	mov	r2,zero
 1025e40:	003fbc06 	br	1025d34 <__alt_data_end+0xff025d34>
 1025e44:	1c44b03a 	or	r2,r3,r17
 1025e48:	80008e1e 	bne	r16,zero,1026084 <__subdf3+0x7c4>
 1025e4c:	1000c826 	beq	r2,zero,1026170 <__subdf3+0x8b0>
 1025e50:	2984b03a 	or	r2,r5,r6
 1025e54:	103ebb26 	beq	r2,zero,1025944 <__alt_data_end+0xff025944>
 1025e58:	8989883a 	add	r4,r17,r6
 1025e5c:	1945883a 	add	r2,r3,r5
 1025e60:	2447803a 	cmpltu	r3,r4,r17
 1025e64:	1887883a 	add	r3,r3,r2
 1025e68:	1880202c 	andhi	r2,r3,128
 1025e6c:	2023883a 	mov	r17,r4
 1025e70:	103f1626 	beq	r2,zero,1025acc <__alt_data_end+0xff025acc>
 1025e74:	00bfe034 	movhi	r2,65408
 1025e78:	10bfffc4 	addi	r2,r2,-1
 1025e7c:	5021883a 	mov	r16,r10
 1025e80:	1886703a 	and	r3,r3,r2
 1025e84:	003eaf06 	br	1025944 <__alt_data_end+0xff025944>
 1025e88:	3825883a 	mov	r18,r7
 1025e8c:	003f0f06 	br	1025acc <__alt_data_end+0xff025acc>
 1025e90:	1c44b03a 	or	r2,r3,r17
 1025e94:	8000251e 	bne	r16,zero,1025f2c <__subdf3+0x66c>
 1025e98:	1000661e 	bne	r2,zero,1026034 <__subdf3+0x774>
 1025e9c:	2990b03a 	or	r8,r5,r6
 1025ea0:	40009626 	beq	r8,zero,10260fc <__subdf3+0x83c>
 1025ea4:	2807883a 	mov	r3,r5
 1025ea8:	3023883a 	mov	r17,r6
 1025eac:	3825883a 	mov	r18,r7
 1025eb0:	003ea406 	br	1025944 <__alt_data_end+0xff025944>
 1025eb4:	127ff804 	addi	r9,r2,-32
 1025eb8:	01000804 	movi	r4,32
 1025ebc:	2a52d83a 	srl	r9,r5,r9
 1025ec0:	11008c26 	beq	r2,r4,10260f4 <__subdf3+0x834>
 1025ec4:	01001004 	movi	r4,64
 1025ec8:	2085c83a 	sub	r2,r4,r2
 1025ecc:	2884983a 	sll	r2,r5,r2
 1025ed0:	118cb03a 	or	r6,r2,r6
 1025ed4:	300cc03a 	cmpne	r6,r6,zero
 1025ed8:	4992b03a 	or	r9,r9,r6
 1025edc:	0005883a 	mov	r2,zero
 1025ee0:	003f1206 	br	1025b2c <__alt_data_end+0xff025b2c>
 1025ee4:	0101ffc4 	movi	r4,2047
 1025ee8:	493f9c1e 	bne	r9,r4,1025d5c <__alt_data_end+0xff025d5c>
 1025eec:	2807883a 	mov	r3,r5
 1025ef0:	3023883a 	mov	r17,r6
 1025ef4:	4821883a 	mov	r16,r9
 1025ef8:	3825883a 	mov	r18,r7
 1025efc:	003e9106 	br	1025944 <__alt_data_end+0xff025944>
 1025f00:	80001f1e 	bne	r16,zero,1025f80 <__subdf3+0x6c0>
 1025f04:	1c48b03a 	or	r4,r3,r17
 1025f08:	20005a26 	beq	r4,zero,1026074 <__subdf3+0x7b4>
 1025f0c:	0084303a 	nor	r2,zero,r2
 1025f10:	1000561e 	bne	r2,zero,102606c <__subdf3+0x7ac>
 1025f14:	89a3883a 	add	r17,r17,r6
 1025f18:	1945883a 	add	r2,r3,r5
 1025f1c:	898d803a 	cmpltu	r6,r17,r6
 1025f20:	3087883a 	add	r3,r6,r2
 1025f24:	4821883a 	mov	r16,r9
 1025f28:	003f0506 	br	1025b40 <__alt_data_end+0xff025b40>
 1025f2c:	10002b1e 	bne	r2,zero,1025fdc <__subdf3+0x71c>
 1025f30:	2984b03a 	or	r2,r5,r6
 1025f34:	10008026 	beq	r2,zero,1026138 <__subdf3+0x878>
 1025f38:	2807883a 	mov	r3,r5
 1025f3c:	3023883a 	mov	r17,r6
 1025f40:	3825883a 	mov	r18,r7
 1025f44:	0401ffc4 	movi	r16,2047
 1025f48:	003e7e06 	br	1025944 <__alt_data_end+0xff025944>
 1025f4c:	3809883a 	mov	r4,r7
 1025f50:	0011883a 	mov	r8,zero
 1025f54:	0005883a 	mov	r2,zero
 1025f58:	003ee306 	br	1025ae8 <__alt_data_end+0xff025ae8>
 1025f5c:	1c62b03a 	or	r17,r3,r17
 1025f60:	8822c03a 	cmpne	r17,r17,zero
 1025f64:	0005883a 	mov	r2,zero
 1025f68:	003f8906 	br	1025d90 <__alt_data_end+0xff025d90>
 1025f6c:	3809883a 	mov	r4,r7
 1025f70:	4821883a 	mov	r16,r9
 1025f74:	0011883a 	mov	r8,zero
 1025f78:	0005883a 	mov	r2,zero
 1025f7c:	003eda06 	br	1025ae8 <__alt_data_end+0xff025ae8>
 1025f80:	0101ffc4 	movi	r4,2047
 1025f84:	49003b26 	beq	r9,r4,1026074 <__subdf3+0x7b4>
 1025f88:	0085c83a 	sub	r2,zero,r2
 1025f8c:	18c02034 	orhi	r3,r3,128
 1025f90:	01000e04 	movi	r4,56
 1025f94:	20806e16 	blt	r4,r2,1026150 <__subdf3+0x890>
 1025f98:	010007c4 	movi	r4,31
 1025f9c:	20807716 	blt	r4,r2,102617c <__subdf3+0x8bc>
 1025fa0:	01000804 	movi	r4,32
 1025fa4:	2089c83a 	sub	r4,r4,r2
 1025fa8:	1914983a 	sll	r10,r3,r4
 1025fac:	8890d83a 	srl	r8,r17,r2
 1025fb0:	8908983a 	sll	r4,r17,r4
 1025fb4:	1884d83a 	srl	r2,r3,r2
 1025fb8:	5222b03a 	or	r17,r10,r8
 1025fbc:	2006c03a 	cmpne	r3,r4,zero
 1025fc0:	88e2b03a 	or	r17,r17,r3
 1025fc4:	89a3883a 	add	r17,r17,r6
 1025fc8:	1145883a 	add	r2,r2,r5
 1025fcc:	898d803a 	cmpltu	r6,r17,r6
 1025fd0:	3087883a 	add	r3,r6,r2
 1025fd4:	4821883a 	mov	r16,r9
 1025fd8:	003ed906 	br	1025b40 <__alt_data_end+0xff025b40>
 1025fdc:	2984b03a 	or	r2,r5,r6
 1025fe0:	10004226 	beq	r2,zero,10260ec <__subdf3+0x82c>
 1025fe4:	1808d0fa 	srli	r4,r3,3
 1025fe8:	8822d0fa 	srli	r17,r17,3
 1025fec:	1806977a 	slli	r3,r3,29
 1025ff0:	2080022c 	andhi	r2,r4,8
 1025ff4:	1c62b03a 	or	r17,r3,r17
 1025ff8:	10000826 	beq	r2,zero,102601c <__subdf3+0x75c>
 1025ffc:	2812d0fa 	srli	r9,r5,3
 1026000:	4880022c 	andhi	r2,r9,8
 1026004:	1000051e 	bne	r2,zero,102601c <__subdf3+0x75c>
 1026008:	300cd0fa 	srli	r6,r6,3
 102600c:	2804977a 	slli	r2,r5,29
 1026010:	4809883a 	mov	r4,r9
 1026014:	3825883a 	mov	r18,r7
 1026018:	11a2b03a 	or	r17,r2,r6
 102601c:	8806d77a 	srli	r3,r17,29
 1026020:	200890fa 	slli	r4,r4,3
 1026024:	882290fa 	slli	r17,r17,3
 1026028:	0401ffc4 	movi	r16,2047
 102602c:	1906b03a 	or	r3,r3,r4
 1026030:	003e4406 	br	1025944 <__alt_data_end+0xff025944>
 1026034:	2984b03a 	or	r2,r5,r6
 1026038:	103e4226 	beq	r2,zero,1025944 <__alt_data_end+0xff025944>
 102603c:	8989c83a 	sub	r4,r17,r6
 1026040:	8911803a 	cmpltu	r8,r17,r4
 1026044:	1945c83a 	sub	r2,r3,r5
 1026048:	1205c83a 	sub	r2,r2,r8
 102604c:	1200202c 	andhi	r8,r2,128
 1026050:	403e9a26 	beq	r8,zero,1025abc <__alt_data_end+0xff025abc>
 1026054:	3463c83a 	sub	r17,r6,r17
 1026058:	28c5c83a 	sub	r2,r5,r3
 102605c:	344d803a 	cmpltu	r6,r6,r17
 1026060:	1187c83a 	sub	r3,r2,r6
 1026064:	3825883a 	mov	r18,r7
 1026068:	003e3606 	br	1025944 <__alt_data_end+0xff025944>
 102606c:	0101ffc4 	movi	r4,2047
 1026070:	493fc71e 	bne	r9,r4,1025f90 <__alt_data_end+0xff025f90>
 1026074:	2807883a 	mov	r3,r5
 1026078:	3023883a 	mov	r17,r6
 102607c:	4821883a 	mov	r16,r9
 1026080:	003e3006 	br	1025944 <__alt_data_end+0xff025944>
 1026084:	10003626 	beq	r2,zero,1026160 <__subdf3+0x8a0>
 1026088:	2984b03a 	or	r2,r5,r6
 102608c:	10001726 	beq	r2,zero,10260ec <__subdf3+0x82c>
 1026090:	1808d0fa 	srli	r4,r3,3
 1026094:	8822d0fa 	srli	r17,r17,3
 1026098:	1806977a 	slli	r3,r3,29
 102609c:	2080022c 	andhi	r2,r4,8
 10260a0:	1c62b03a 	or	r17,r3,r17
 10260a4:	10000726 	beq	r2,zero,10260c4 <__subdf3+0x804>
 10260a8:	2812d0fa 	srli	r9,r5,3
 10260ac:	4880022c 	andhi	r2,r9,8
 10260b0:	1000041e 	bne	r2,zero,10260c4 <__subdf3+0x804>
 10260b4:	300cd0fa 	srli	r6,r6,3
 10260b8:	2804977a 	slli	r2,r5,29
 10260bc:	4809883a 	mov	r4,r9
 10260c0:	11a2b03a 	or	r17,r2,r6
 10260c4:	8806d77a 	srli	r3,r17,29
 10260c8:	200890fa 	slli	r4,r4,3
 10260cc:	882290fa 	slli	r17,r17,3
 10260d0:	3825883a 	mov	r18,r7
 10260d4:	1906b03a 	or	r3,r3,r4
 10260d8:	0401ffc4 	movi	r16,2047
 10260dc:	003e1906 	br	1025944 <__alt_data_end+0xff025944>
 10260e0:	000b883a 	mov	r5,zero
 10260e4:	0005883a 	mov	r2,zero
 10260e8:	003e2e06 	br	10259a4 <__alt_data_end+0xff0259a4>
 10260ec:	0401ffc4 	movi	r16,2047
 10260f0:	003e1406 	br	1025944 <__alt_data_end+0xff025944>
 10260f4:	0005883a 	mov	r2,zero
 10260f8:	003f7506 	br	1025ed0 <__alt_data_end+0xff025ed0>
 10260fc:	0005883a 	mov	r2,zero
 1026100:	0009883a 	mov	r4,zero
 1026104:	003e7806 	br	1025ae8 <__alt_data_end+0xff025ae8>
 1026108:	123ff804 	addi	r8,r2,-32
 102610c:	01000804 	movi	r4,32
 1026110:	1a10d83a 	srl	r8,r3,r8
 1026114:	11002526 	beq	r2,r4,10261ac <__subdf3+0x8ec>
 1026118:	01001004 	movi	r4,64
 102611c:	2085c83a 	sub	r2,r4,r2
 1026120:	1884983a 	sll	r2,r3,r2
 1026124:	1444b03a 	or	r2,r2,r17
 1026128:	1004c03a 	cmpne	r2,r2,zero
 102612c:	40a2b03a 	or	r17,r8,r2
 1026130:	0005883a 	mov	r2,zero
 1026134:	003f1606 	br	1025d90 <__alt_data_end+0xff025d90>
 1026138:	02000434 	movhi	r8,16
 102613c:	0009883a 	mov	r4,zero
 1026140:	423fffc4 	addi	r8,r8,-1
 1026144:	00bfffc4 	movi	r2,-1
 1026148:	0401ffc4 	movi	r16,2047
 102614c:	003e6606 	br	1025ae8 <__alt_data_end+0xff025ae8>
 1026150:	1c62b03a 	or	r17,r3,r17
 1026154:	8822c03a 	cmpne	r17,r17,zero
 1026158:	0005883a 	mov	r2,zero
 102615c:	003f9906 	br	1025fc4 <__alt_data_end+0xff025fc4>
 1026160:	2807883a 	mov	r3,r5
 1026164:	3023883a 	mov	r17,r6
 1026168:	0401ffc4 	movi	r16,2047
 102616c:	003df506 	br	1025944 <__alt_data_end+0xff025944>
 1026170:	2807883a 	mov	r3,r5
 1026174:	3023883a 	mov	r17,r6
 1026178:	003df206 	br	1025944 <__alt_data_end+0xff025944>
 102617c:	123ff804 	addi	r8,r2,-32
 1026180:	01000804 	movi	r4,32
 1026184:	1a10d83a 	srl	r8,r3,r8
 1026188:	11000a26 	beq	r2,r4,10261b4 <__subdf3+0x8f4>
 102618c:	01001004 	movi	r4,64
 1026190:	2085c83a 	sub	r2,r4,r2
 1026194:	1884983a 	sll	r2,r3,r2
 1026198:	1444b03a 	or	r2,r2,r17
 102619c:	1004c03a 	cmpne	r2,r2,zero
 10261a0:	40a2b03a 	or	r17,r8,r2
 10261a4:	0005883a 	mov	r2,zero
 10261a8:	003f8606 	br	1025fc4 <__alt_data_end+0xff025fc4>
 10261ac:	0005883a 	mov	r2,zero
 10261b0:	003fdc06 	br	1026124 <__alt_data_end+0xff026124>
 10261b4:	0005883a 	mov	r2,zero
 10261b8:	003ff706 	br	1026198 <__alt_data_end+0xff026198>

010261bc <__fixdfsi>:
 10261bc:	280cd53a 	srli	r6,r5,20
 10261c0:	00c00434 	movhi	r3,16
 10261c4:	18ffffc4 	addi	r3,r3,-1
 10261c8:	3181ffcc 	andi	r6,r6,2047
 10261cc:	01c0ff84 	movi	r7,1022
 10261d0:	28c6703a 	and	r3,r5,r3
 10261d4:	280ad7fa 	srli	r5,r5,31
 10261d8:	3980120e 	bge	r7,r6,1026224 <__fixdfsi+0x68>
 10261dc:	00810744 	movi	r2,1053
 10261e0:	11800c16 	blt	r2,r6,1026214 <__fixdfsi+0x58>
 10261e4:	00810cc4 	movi	r2,1075
 10261e8:	1185c83a 	sub	r2,r2,r6
 10261ec:	01c007c4 	movi	r7,31
 10261f0:	18c00434 	orhi	r3,r3,16
 10261f4:	38800d16 	blt	r7,r2,102622c <__fixdfsi+0x70>
 10261f8:	31befb44 	addi	r6,r6,-1043
 10261fc:	2084d83a 	srl	r2,r4,r2
 1026200:	1986983a 	sll	r3,r3,r6
 1026204:	1884b03a 	or	r2,r3,r2
 1026208:	28000726 	beq	r5,zero,1026228 <__fixdfsi+0x6c>
 102620c:	0085c83a 	sub	r2,zero,r2
 1026210:	f800283a 	ret
 1026214:	00a00034 	movhi	r2,32768
 1026218:	10bfffc4 	addi	r2,r2,-1
 102621c:	2885883a 	add	r2,r5,r2
 1026220:	f800283a 	ret
 1026224:	0005883a 	mov	r2,zero
 1026228:	f800283a 	ret
 102622c:	008104c4 	movi	r2,1043
 1026230:	1185c83a 	sub	r2,r2,r6
 1026234:	1884d83a 	srl	r2,r3,r2
 1026238:	003ff306 	br	1026208 <__alt_data_end+0xff026208>

0102623c <__floatsidf>:
 102623c:	defffd04 	addi	sp,sp,-12
 1026240:	dfc00215 	stw	ra,8(sp)
 1026244:	dc400115 	stw	r17,4(sp)
 1026248:	dc000015 	stw	r16,0(sp)
 102624c:	20002b26 	beq	r4,zero,10262fc <__floatsidf+0xc0>
 1026250:	2023883a 	mov	r17,r4
 1026254:	2020d7fa 	srli	r16,r4,31
 1026258:	20002d16 	blt	r4,zero,1026310 <__floatsidf+0xd4>
 102625c:	8809883a 	mov	r4,r17
 1026260:	10263c00 	call	10263c0 <__clzsi2>
 1026264:	01410784 	movi	r5,1054
 1026268:	288bc83a 	sub	r5,r5,r2
 102626c:	01010cc4 	movi	r4,1075
 1026270:	2149c83a 	sub	r4,r4,r5
 1026274:	00c007c4 	movi	r3,31
 1026278:	1900160e 	bge	r3,r4,10262d4 <__floatsidf+0x98>
 102627c:	00c104c4 	movi	r3,1043
 1026280:	1947c83a 	sub	r3,r3,r5
 1026284:	88c6983a 	sll	r3,r17,r3
 1026288:	00800434 	movhi	r2,16
 102628c:	10bfffc4 	addi	r2,r2,-1
 1026290:	1886703a 	and	r3,r3,r2
 1026294:	2941ffcc 	andi	r5,r5,2047
 1026298:	800d883a 	mov	r6,r16
 102629c:	0005883a 	mov	r2,zero
 10262a0:	280a953a 	slli	r5,r5,20
 10262a4:	31803fcc 	andi	r6,r6,255
 10262a8:	01000434 	movhi	r4,16
 10262ac:	300c97fa 	slli	r6,r6,31
 10262b0:	213fffc4 	addi	r4,r4,-1
 10262b4:	1906703a 	and	r3,r3,r4
 10262b8:	1946b03a 	or	r3,r3,r5
 10262bc:	1986b03a 	or	r3,r3,r6
 10262c0:	dfc00217 	ldw	ra,8(sp)
 10262c4:	dc400117 	ldw	r17,4(sp)
 10262c8:	dc000017 	ldw	r16,0(sp)
 10262cc:	dec00304 	addi	sp,sp,12
 10262d0:	f800283a 	ret
 10262d4:	00c002c4 	movi	r3,11
 10262d8:	1887c83a 	sub	r3,r3,r2
 10262dc:	88c6d83a 	srl	r3,r17,r3
 10262e0:	8904983a 	sll	r2,r17,r4
 10262e4:	01000434 	movhi	r4,16
 10262e8:	213fffc4 	addi	r4,r4,-1
 10262ec:	2941ffcc 	andi	r5,r5,2047
 10262f0:	1906703a 	and	r3,r3,r4
 10262f4:	800d883a 	mov	r6,r16
 10262f8:	003fe906 	br	10262a0 <__alt_data_end+0xff0262a0>
 10262fc:	000d883a 	mov	r6,zero
 1026300:	000b883a 	mov	r5,zero
 1026304:	0007883a 	mov	r3,zero
 1026308:	0005883a 	mov	r2,zero
 102630c:	003fe406 	br	10262a0 <__alt_data_end+0xff0262a0>
 1026310:	0123c83a 	sub	r17,zero,r4
 1026314:	003fd106 	br	102625c <__alt_data_end+0xff02625c>

01026318 <__floatunsidf>:
 1026318:	defffe04 	addi	sp,sp,-8
 102631c:	dc000015 	stw	r16,0(sp)
 1026320:	dfc00115 	stw	ra,4(sp)
 1026324:	2021883a 	mov	r16,r4
 1026328:	20002226 	beq	r4,zero,10263b4 <__floatunsidf+0x9c>
 102632c:	10263c00 	call	10263c0 <__clzsi2>
 1026330:	01010784 	movi	r4,1054
 1026334:	2089c83a 	sub	r4,r4,r2
 1026338:	01810cc4 	movi	r6,1075
 102633c:	310dc83a 	sub	r6,r6,r4
 1026340:	00c007c4 	movi	r3,31
 1026344:	1980120e 	bge	r3,r6,1026390 <__floatunsidf+0x78>
 1026348:	00c104c4 	movi	r3,1043
 102634c:	1907c83a 	sub	r3,r3,r4
 1026350:	80ca983a 	sll	r5,r16,r3
 1026354:	00800434 	movhi	r2,16
 1026358:	10bfffc4 	addi	r2,r2,-1
 102635c:	2101ffcc 	andi	r4,r4,2047
 1026360:	0021883a 	mov	r16,zero
 1026364:	288a703a 	and	r5,r5,r2
 1026368:	2008953a 	slli	r4,r4,20
 102636c:	00c00434 	movhi	r3,16
 1026370:	18ffffc4 	addi	r3,r3,-1
 1026374:	28c6703a 	and	r3,r5,r3
 1026378:	8005883a 	mov	r2,r16
 102637c:	1906b03a 	or	r3,r3,r4
 1026380:	dfc00117 	ldw	ra,4(sp)
 1026384:	dc000017 	ldw	r16,0(sp)
 1026388:	dec00204 	addi	sp,sp,8
 102638c:	f800283a 	ret
 1026390:	00c002c4 	movi	r3,11
 1026394:	188bc83a 	sub	r5,r3,r2
 1026398:	814ad83a 	srl	r5,r16,r5
 102639c:	00c00434 	movhi	r3,16
 10263a0:	18ffffc4 	addi	r3,r3,-1
 10263a4:	81a0983a 	sll	r16,r16,r6
 10263a8:	2101ffcc 	andi	r4,r4,2047
 10263ac:	28ca703a 	and	r5,r5,r3
 10263b0:	003fed06 	br	1026368 <__alt_data_end+0xff026368>
 10263b4:	0009883a 	mov	r4,zero
 10263b8:	000b883a 	mov	r5,zero
 10263bc:	003fea06 	br	1026368 <__alt_data_end+0xff026368>

010263c0 <__clzsi2>:
 10263c0:	00bfffd4 	movui	r2,65535
 10263c4:	11000536 	bltu	r2,r4,10263dc <__clzsi2+0x1c>
 10263c8:	00803fc4 	movi	r2,255
 10263cc:	11000f36 	bltu	r2,r4,102640c <__clzsi2+0x4c>
 10263d0:	00800804 	movi	r2,32
 10263d4:	0007883a 	mov	r3,zero
 10263d8:	00000506 	br	10263f0 <__clzsi2+0x30>
 10263dc:	00804034 	movhi	r2,256
 10263e0:	10bfffc4 	addi	r2,r2,-1
 10263e4:	11000c2e 	bgeu	r2,r4,1026418 <__clzsi2+0x58>
 10263e8:	00800204 	movi	r2,8
 10263ec:	00c00604 	movi	r3,24
 10263f0:	20c8d83a 	srl	r4,r4,r3
 10263f4:	00c040f4 	movhi	r3,259
 10263f8:	18eb7c04 	addi	r3,r3,-21008
 10263fc:	1909883a 	add	r4,r3,r4
 1026400:	20c00003 	ldbu	r3,0(r4)
 1026404:	10c5c83a 	sub	r2,r2,r3
 1026408:	f800283a 	ret
 102640c:	00800604 	movi	r2,24
 1026410:	00c00204 	movi	r3,8
 1026414:	003ff606 	br	10263f0 <__alt_data_end+0xff0263f0>
 1026418:	00800404 	movi	r2,16
 102641c:	1007883a 	mov	r3,r2
 1026420:	003ff306 	br	10263f0 <__alt_data_end+0xff0263f0>

01026424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1026424:	defffe04 	addi	sp,sp,-8
 1026428:	dfc00115 	stw	ra,4(sp)
 102642c:	df000015 	stw	fp,0(sp)
 1026430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1026434:	d0a01517 	ldw	r2,-32684(gp)
 1026438:	10000326 	beq	r2,zero,1026448 <alt_get_errno+0x24>
 102643c:	d0a01517 	ldw	r2,-32684(gp)
 1026440:	103ee83a 	callr	r2
 1026444:	00000106 	br	102644c <alt_get_errno+0x28>
 1026448:	d0a75b04 	addi	r2,gp,-25236
}
 102644c:	e037883a 	mov	sp,fp
 1026450:	dfc00117 	ldw	ra,4(sp)
 1026454:	df000017 	ldw	fp,0(sp)
 1026458:	dec00204 	addi	sp,sp,8
 102645c:	f800283a 	ret

01026460 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1026460:	defffb04 	addi	sp,sp,-20
 1026464:	dfc00415 	stw	ra,16(sp)
 1026468:	df000315 	stw	fp,12(sp)
 102646c:	df000304 	addi	fp,sp,12
 1026470:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1026474:	e0bfff17 	ldw	r2,-4(fp)
 1026478:	10000616 	blt	r2,zero,1026494 <close+0x34>
 102647c:	e0bfff17 	ldw	r2,-4(fp)
 1026480:	10c00324 	muli	r3,r2,12
 1026484:	008040f4 	movhi	r2,259
 1026488:	10ae5504 	addi	r2,r2,-18092
 102648c:	1885883a 	add	r2,r3,r2
 1026490:	00000106 	br	1026498 <close+0x38>
 1026494:	0005883a 	mov	r2,zero
 1026498:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 102649c:	e0bffd17 	ldw	r2,-12(fp)
 10264a0:	10001926 	beq	r2,zero,1026508 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10264a4:	e0bffd17 	ldw	r2,-12(fp)
 10264a8:	10800017 	ldw	r2,0(r2)
 10264ac:	10800417 	ldw	r2,16(r2)
 10264b0:	10000626 	beq	r2,zero,10264cc <close+0x6c>
 10264b4:	e0bffd17 	ldw	r2,-12(fp)
 10264b8:	10800017 	ldw	r2,0(r2)
 10264bc:	10800417 	ldw	r2,16(r2)
 10264c0:	e13ffd17 	ldw	r4,-12(fp)
 10264c4:	103ee83a 	callr	r2
 10264c8:	00000106 	br	10264d0 <close+0x70>
 10264cc:	0005883a 	mov	r2,zero
 10264d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10264d4:	e13fff17 	ldw	r4,-4(fp)
 10264d8:	10271b00 	call	10271b0 <alt_release_fd>
    if (rval < 0)
 10264dc:	e0bffe17 	ldw	r2,-8(fp)
 10264e0:	1000070e 	bge	r2,zero,1026500 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 10264e4:	10264240 	call	1026424 <alt_get_errno>
 10264e8:	1007883a 	mov	r3,r2
 10264ec:	e0bffe17 	ldw	r2,-8(fp)
 10264f0:	0085c83a 	sub	r2,zero,r2
 10264f4:	18800015 	stw	r2,0(r3)
      return -1;
 10264f8:	00bfffc4 	movi	r2,-1
 10264fc:	00000706 	br	102651c <close+0xbc>
    }
    return 0;
 1026500:	0005883a 	mov	r2,zero
 1026504:	00000506 	br	102651c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1026508:	10264240 	call	1026424 <alt_get_errno>
 102650c:	1007883a 	mov	r3,r2
 1026510:	00801444 	movi	r2,81
 1026514:	18800015 	stw	r2,0(r3)
    return -1;
 1026518:	00bfffc4 	movi	r2,-1
  }
}
 102651c:	e037883a 	mov	sp,fp
 1026520:	dfc00117 	ldw	ra,4(sp)
 1026524:	df000017 	ldw	fp,0(sp)
 1026528:	dec00204 	addi	sp,sp,8
 102652c:	f800283a 	ret

01026530 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 1026530:	defffb04 	addi	sp,sp,-20
 1026534:	df000415 	stw	fp,16(sp)
 1026538:	df000404 	addi	fp,sp,16
 102653c:	e13ffe15 	stw	r4,-8(fp)
 1026540:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 1026544:	e0fffe17 	ldw	r3,-8(fp)
 1026548:	e0bfff17 	ldw	r2,-4(fp)
 102654c:	1885883a 	add	r2,r3,r2
 1026550:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 1026554:	e0bffe17 	ldw	r2,-8(fp)
 1026558:	e0bffc15 	stw	r2,-16(fp)
 102655c:	00000506 	br	1026574 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 1026560:	e0bffc17 	ldw	r2,-16(fp)
 1026564:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 1026568:	e0bffc17 	ldw	r2,-16(fp)
 102656c:	10800804 	addi	r2,r2,32
 1026570:	e0bffc15 	stw	r2,-16(fp)
 1026574:	e0fffc17 	ldw	r3,-16(fp)
 1026578:	e0bffd17 	ldw	r2,-12(fp)
 102657c:	18bff836 	bltu	r3,r2,1026560 <__alt_data_end+0xff026560>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 1026580:	e0bffe17 	ldw	r2,-8(fp)
 1026584:	108007cc 	andi	r2,r2,31
 1026588:	10000226 	beq	r2,zero,1026594 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 102658c:	e0bffc17 	ldw	r2,-16(fp)
 1026590:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1026594:	0001883a 	nop
 1026598:	e037883a 	mov	sp,fp
 102659c:	df000017 	ldw	fp,0(sp)
 10265a0:	dec00104 	addi	sp,sp,4
 10265a4:	f800283a 	ret

010265a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10265a8:	defffe04 	addi	sp,sp,-8
 10265ac:	df000115 	stw	fp,4(sp)
 10265b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10265b4:	e03fff15 	stw	zero,-4(fp)
 10265b8:	00000506 	br	10265d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10265bc:	e0bfff17 	ldw	r2,-4(fp)
 10265c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10265c4:	e0bfff17 	ldw	r2,-4(fp)
 10265c8:	10800804 	addi	r2,r2,32
 10265cc:	e0bfff15 	stw	r2,-4(fp)
 10265d0:	e0bfff17 	ldw	r2,-4(fp)
 10265d4:	10820030 	cmpltui	r2,r2,2048
 10265d8:	103ff81e 	bne	r2,zero,10265bc <__alt_data_end+0xff0265bc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10265dc:	0001883a 	nop
 10265e0:	e037883a 	mov	sp,fp
 10265e4:	df000017 	ldw	fp,0(sp)
 10265e8:	dec00104 	addi	sp,sp,4
 10265ec:	f800283a 	ret

010265f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10265f0:	defffc04 	addi	sp,sp,-16
 10265f4:	df000315 	stw	fp,12(sp)
 10265f8:	df000304 	addi	fp,sp,12
 10265fc:	e13ffd15 	stw	r4,-12(fp)
 1026600:	e17ffe15 	stw	r5,-8(fp)
 1026604:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1026608:	e0bfff17 	ldw	r2,-4(fp)
}
 102660c:	e037883a 	mov	sp,fp
 1026610:	df000017 	ldw	fp,0(sp)
 1026614:	dec00104 	addi	sp,sp,4
 1026618:	f800283a 	ret

0102661c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 102661c:	defffd04 	addi	sp,sp,-12
 1026620:	df000215 	stw	fp,8(sp)
 1026624:	df000204 	addi	fp,sp,8
 1026628:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 102662c:	0001883a 	nop
 1026630:	e0bfff17 	ldw	r2,-4(fp)
 1026634:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1026638:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 102663c:	10000226 	beq	r2,zero,1026648 <_exit+0x2c>
    ALT_SIM_FAIL();
 1026640:	002af070 	cmpltui	zero,zero,43969
 1026644:	00000106 	br	102664c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1026648:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 102664c:	003fff06 	br	102664c <__alt_data_end+0xff02664c>

01026650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1026650:	defffe04 	addi	sp,sp,-8
 1026654:	dfc00115 	stw	ra,4(sp)
 1026658:	df000015 	stw	fp,0(sp)
 102665c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1026660:	d0a01517 	ldw	r2,-32684(gp)
 1026664:	10000326 	beq	r2,zero,1026674 <alt_get_errno+0x24>
 1026668:	d0a01517 	ldw	r2,-32684(gp)
 102666c:	103ee83a 	callr	r2
 1026670:	00000106 	br	1026678 <alt_get_errno+0x28>
 1026674:	d0a75b04 	addi	r2,gp,-25236
}
 1026678:	e037883a 	mov	sp,fp
 102667c:	dfc00117 	ldw	ra,4(sp)
 1026680:	df000017 	ldw	fp,0(sp)
 1026684:	dec00204 	addi	sp,sp,8
 1026688:	f800283a 	ret

0102668c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 102668c:	defffb04 	addi	sp,sp,-20
 1026690:	dfc00415 	stw	ra,16(sp)
 1026694:	df000315 	stw	fp,12(sp)
 1026698:	df000304 	addi	fp,sp,12
 102669c:	e13ffe15 	stw	r4,-8(fp)
 10266a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10266a4:	e0bffe17 	ldw	r2,-8(fp)
 10266a8:	10000616 	blt	r2,zero,10266c4 <fstat+0x38>
 10266ac:	e0bffe17 	ldw	r2,-8(fp)
 10266b0:	10c00324 	muli	r3,r2,12
 10266b4:	008040f4 	movhi	r2,259
 10266b8:	10ae5504 	addi	r2,r2,-18092
 10266bc:	1885883a 	add	r2,r3,r2
 10266c0:	00000106 	br	10266c8 <fstat+0x3c>
 10266c4:	0005883a 	mov	r2,zero
 10266c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 10266cc:	e0bffd17 	ldw	r2,-12(fp)
 10266d0:	10001026 	beq	r2,zero,1026714 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10266d4:	e0bffd17 	ldw	r2,-12(fp)
 10266d8:	10800017 	ldw	r2,0(r2)
 10266dc:	10800817 	ldw	r2,32(r2)
 10266e0:	10000726 	beq	r2,zero,1026700 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 10266e4:	e0bffd17 	ldw	r2,-12(fp)
 10266e8:	10800017 	ldw	r2,0(r2)
 10266ec:	10800817 	ldw	r2,32(r2)
 10266f0:	e17fff17 	ldw	r5,-4(fp)
 10266f4:	e13ffd17 	ldw	r4,-12(fp)
 10266f8:	103ee83a 	callr	r2
 10266fc:	00000a06 	br	1026728 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1026700:	e0bfff17 	ldw	r2,-4(fp)
 1026704:	00c80004 	movi	r3,8192
 1026708:	10c00115 	stw	r3,4(r2)
      return 0;
 102670c:	0005883a 	mov	r2,zero
 1026710:	00000506 	br	1026728 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1026714:	10266500 	call	1026650 <alt_get_errno>
 1026718:	1007883a 	mov	r3,r2
 102671c:	00801444 	movi	r2,81
 1026720:	18800015 	stw	r2,0(r3)
    return -1;
 1026724:	00bfffc4 	movi	r2,-1
  }
}
 1026728:	e037883a 	mov	sp,fp
 102672c:	dfc00117 	ldw	ra,4(sp)
 1026730:	df000017 	ldw	fp,0(sp)
 1026734:	dec00204 	addi	sp,sp,8
 1026738:	f800283a 	ret

0102673c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 102673c:	deffff04 	addi	sp,sp,-4
 1026740:	df000015 	stw	fp,0(sp)
 1026744:	d839883a 	mov	fp,sp
  return 0;
 1026748:	0005883a 	mov	r2,zero
}
 102674c:	e037883a 	mov	sp,fp
 1026750:	df000017 	ldw	fp,0(sp)
 1026754:	dec00104 	addi	sp,sp,4
 1026758:	f800283a 	ret

0102675c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 102675c:	defff904 	addi	sp,sp,-28
 1026760:	dfc00615 	stw	ra,24(sp)
 1026764:	df000515 	stw	fp,20(sp)
 1026768:	df000504 	addi	fp,sp,20
 102676c:	e13ffc15 	stw	r4,-16(fp)
 1026770:	e17ffd15 	stw	r5,-12(fp)
 1026774:	e1bffe15 	stw	r6,-8(fp)
 1026778:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 102677c:	e0800217 	ldw	r2,8(fp)
 1026780:	d8800015 	stw	r2,0(sp)
 1026784:	e1ffff17 	ldw	r7,-4(fp)
 1026788:	e1bffe17 	ldw	r6,-8(fp)
 102678c:	e17ffd17 	ldw	r5,-12(fp)
 1026790:	e13ffc17 	ldw	r4,-16(fp)
 1026794:	102690c0 	call	102690c <alt_iic_isr_register>
}  
 1026798:	e037883a 	mov	sp,fp
 102679c:	dfc00117 	ldw	ra,4(sp)
 10267a0:	df000017 	ldw	fp,0(sp)
 10267a4:	dec00204 	addi	sp,sp,8
 10267a8:	f800283a 	ret

010267ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10267ac:	defff904 	addi	sp,sp,-28
 10267b0:	df000615 	stw	fp,24(sp)
 10267b4:	df000604 	addi	fp,sp,24
 10267b8:	e13ffe15 	stw	r4,-8(fp)
 10267bc:	e17fff15 	stw	r5,-4(fp)
 10267c0:	e0bfff17 	ldw	r2,-4(fp)
 10267c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10267c8:	0005303a 	rdctl	r2,status
 10267cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10267d0:	e0fffb17 	ldw	r3,-20(fp)
 10267d4:	00bfff84 	movi	r2,-2
 10267d8:	1884703a 	and	r2,r3,r2
 10267dc:	1001703a 	wrctl	status,r2
  
  return context;
 10267e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10267e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 10267e8:	00c00044 	movi	r3,1
 10267ec:	e0bffa17 	ldw	r2,-24(fp)
 10267f0:	1884983a 	sll	r2,r3,r2
 10267f4:	1007883a 	mov	r3,r2
 10267f8:	d0a75c17 	ldw	r2,-25232(gp)
 10267fc:	1884b03a 	or	r2,r3,r2
 1026800:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1026804:	d0a75c17 	ldw	r2,-25232(gp)
 1026808:	100170fa 	wrctl	ienable,r2
 102680c:	e0bffc17 	ldw	r2,-16(fp)
 1026810:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1026814:	e0bffd17 	ldw	r2,-12(fp)
 1026818:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 102681c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1026820:	0001883a 	nop
}
 1026824:	e037883a 	mov	sp,fp
 1026828:	df000017 	ldw	fp,0(sp)
 102682c:	dec00104 	addi	sp,sp,4
 1026830:	f800283a 	ret

01026834 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1026834:	defff904 	addi	sp,sp,-28
 1026838:	df000615 	stw	fp,24(sp)
 102683c:	df000604 	addi	fp,sp,24
 1026840:	e13ffe15 	stw	r4,-8(fp)
 1026844:	e17fff15 	stw	r5,-4(fp)
 1026848:	e0bfff17 	ldw	r2,-4(fp)
 102684c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1026850:	0005303a 	rdctl	r2,status
 1026854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1026858:	e0fffb17 	ldw	r3,-20(fp)
 102685c:	00bfff84 	movi	r2,-2
 1026860:	1884703a 	and	r2,r3,r2
 1026864:	1001703a 	wrctl	status,r2
  
  return context;
 1026868:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 102686c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1026870:	00c00044 	movi	r3,1
 1026874:	e0bffa17 	ldw	r2,-24(fp)
 1026878:	1884983a 	sll	r2,r3,r2
 102687c:	0084303a 	nor	r2,zero,r2
 1026880:	1007883a 	mov	r3,r2
 1026884:	d0a75c17 	ldw	r2,-25232(gp)
 1026888:	1884703a 	and	r2,r3,r2
 102688c:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1026890:	d0a75c17 	ldw	r2,-25232(gp)
 1026894:	100170fa 	wrctl	ienable,r2
 1026898:	e0bffc17 	ldw	r2,-16(fp)
 102689c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10268a0:	e0bffd17 	ldw	r2,-12(fp)
 10268a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10268a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10268ac:	0001883a 	nop
}
 10268b0:	e037883a 	mov	sp,fp
 10268b4:	df000017 	ldw	fp,0(sp)
 10268b8:	dec00104 	addi	sp,sp,4
 10268bc:	f800283a 	ret

010268c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10268c0:	defffc04 	addi	sp,sp,-16
 10268c4:	df000315 	stw	fp,12(sp)
 10268c8:	df000304 	addi	fp,sp,12
 10268cc:	e13ffe15 	stw	r4,-8(fp)
 10268d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10268d4:	000530fa 	rdctl	r2,ienable
 10268d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10268dc:	00c00044 	movi	r3,1
 10268e0:	e0bfff17 	ldw	r2,-4(fp)
 10268e4:	1884983a 	sll	r2,r3,r2
 10268e8:	1007883a 	mov	r3,r2
 10268ec:	e0bffd17 	ldw	r2,-12(fp)
 10268f0:	1884703a 	and	r2,r3,r2
 10268f4:	1004c03a 	cmpne	r2,r2,zero
 10268f8:	10803fcc 	andi	r2,r2,255
}
 10268fc:	e037883a 	mov	sp,fp
 1026900:	df000017 	ldw	fp,0(sp)
 1026904:	dec00104 	addi	sp,sp,4
 1026908:	f800283a 	ret

0102690c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 102690c:	defff504 	addi	sp,sp,-44
 1026910:	dfc00a15 	stw	ra,40(sp)
 1026914:	df000915 	stw	fp,36(sp)
 1026918:	df000904 	addi	fp,sp,36
 102691c:	e13ffc15 	stw	r4,-16(fp)
 1026920:	e17ffd15 	stw	r5,-12(fp)
 1026924:	e1bffe15 	stw	r6,-8(fp)
 1026928:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 102692c:	00bffa84 	movi	r2,-22
 1026930:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1026934:	e0bffd17 	ldw	r2,-12(fp)
 1026938:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 102693c:	e0bff817 	ldw	r2,-32(fp)
 1026940:	10800808 	cmpgei	r2,r2,32
 1026944:	1000271e 	bne	r2,zero,10269e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1026948:	0005303a 	rdctl	r2,status
 102694c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1026950:	e0fffb17 	ldw	r3,-20(fp)
 1026954:	00bfff84 	movi	r2,-2
 1026958:	1884703a 	and	r2,r3,r2
 102695c:	1001703a 	wrctl	status,r2
  
  return context;
 1026960:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1026964:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1026968:	008060f4 	movhi	r2,387
 102696c:	10bb7904 	addi	r2,r2,-4636
 1026970:	e0fff817 	ldw	r3,-32(fp)
 1026974:	180690fa 	slli	r3,r3,3
 1026978:	10c5883a 	add	r2,r2,r3
 102697c:	e0fffe17 	ldw	r3,-8(fp)
 1026980:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1026984:	008060f4 	movhi	r2,387
 1026988:	10bb7904 	addi	r2,r2,-4636
 102698c:	e0fff817 	ldw	r3,-32(fp)
 1026990:	180690fa 	slli	r3,r3,3
 1026994:	10c5883a 	add	r2,r2,r3
 1026998:	10800104 	addi	r2,r2,4
 102699c:	e0ffff17 	ldw	r3,-4(fp)
 10269a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10269a4:	e0bffe17 	ldw	r2,-8(fp)
 10269a8:	10000526 	beq	r2,zero,10269c0 <alt_iic_isr_register+0xb4>
 10269ac:	e0bff817 	ldw	r2,-32(fp)
 10269b0:	100b883a 	mov	r5,r2
 10269b4:	e13ffc17 	ldw	r4,-16(fp)
 10269b8:	10267ac0 	call	10267ac <alt_ic_irq_enable>
 10269bc:	00000406 	br	10269d0 <alt_iic_isr_register+0xc4>
 10269c0:	e0bff817 	ldw	r2,-32(fp)
 10269c4:	100b883a 	mov	r5,r2
 10269c8:	e13ffc17 	ldw	r4,-16(fp)
 10269cc:	10268340 	call	1026834 <alt_ic_irq_disable>
 10269d0:	e0bff715 	stw	r2,-36(fp)
 10269d4:	e0bffa17 	ldw	r2,-24(fp)
 10269d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10269dc:	e0bff917 	ldw	r2,-28(fp)
 10269e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10269e4:	e0bff717 	ldw	r2,-36(fp)
}
 10269e8:	e037883a 	mov	sp,fp
 10269ec:	dfc00117 	ldw	ra,4(sp)
 10269f0:	df000017 	ldw	fp,0(sp)
 10269f4:	dec00204 	addi	sp,sp,8
 10269f8:	f800283a 	ret

010269fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 10269fc:	defff104 	addi	sp,sp,-60
 1026a00:	df000e15 	stw	fp,56(sp)
 1026a04:	df000e04 	addi	fp,sp,56
 1026a08:	e13ffd15 	stw	r4,-12(fp)
 1026a0c:	e17ffe15 	stw	r5,-8(fp)
 1026a10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1026a14:	00bffa84 	movi	r2,-22
 1026a18:	e0bff215 	stw	r2,-56(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1026a1c:	e0bffd17 	ldw	r2,-12(fp)
 1026a20:	10800828 	cmpgeui	r2,r2,32
 1026a24:	10004c1e 	bne	r2,zero,1026b58 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1026a28:	0005303a 	rdctl	r2,status
 1026a2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1026a30:	e0fff617 	ldw	r3,-40(fp)
 1026a34:	00bfff84 	movi	r2,-2
 1026a38:	1884703a 	and	r2,r3,r2
 1026a3c:	1001703a 	wrctl	status,r2
  
  return context;
 1026a40:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1026a44:	e0bff415 	stw	r2,-48(fp)

    alt_irq[id].handler = handler;
 1026a48:	008060f4 	movhi	r2,387
 1026a4c:	10bb7904 	addi	r2,r2,-4636
 1026a50:	e0fffd17 	ldw	r3,-12(fp)
 1026a54:	180690fa 	slli	r3,r3,3
 1026a58:	10c5883a 	add	r2,r2,r3
 1026a5c:	e0ffff17 	ldw	r3,-4(fp)
 1026a60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1026a64:	008060f4 	movhi	r2,387
 1026a68:	10bb7904 	addi	r2,r2,-4636
 1026a6c:	e0fffd17 	ldw	r3,-12(fp)
 1026a70:	180690fa 	slli	r3,r3,3
 1026a74:	10c5883a 	add	r2,r2,r3
 1026a78:	10800104 	addi	r2,r2,4
 1026a7c:	e0fffe17 	ldw	r3,-8(fp)
 1026a80:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1026a84:	e0bfff17 	ldw	r2,-4(fp)
 1026a88:	10001926 	beq	r2,zero,1026af0 <alt_irq_register+0xf4>
 1026a8c:	e0bffd17 	ldw	r2,-12(fp)
 1026a90:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1026a94:	0005303a 	rdctl	r2,status
 1026a98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1026a9c:	e0fff717 	ldw	r3,-36(fp)
 1026aa0:	00bfff84 	movi	r2,-2
 1026aa4:	1884703a 	and	r2,r3,r2
 1026aa8:	1001703a 	wrctl	status,r2
  
  return context;
 1026aac:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1026ab0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1026ab4:	00c00044 	movi	r3,1
 1026ab8:	e0bff317 	ldw	r2,-52(fp)
 1026abc:	1884983a 	sll	r2,r3,r2
 1026ac0:	1007883a 	mov	r3,r2
 1026ac4:	d0a75c17 	ldw	r2,-25232(gp)
 1026ac8:	1884b03a 	or	r2,r3,r2
 1026acc:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1026ad0:	d0a75c17 	ldw	r2,-25232(gp)
 1026ad4:	100170fa 	wrctl	ienable,r2
 1026ad8:	e0bff817 	ldw	r2,-32(fp)
 1026adc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1026ae0:	e0bff917 	ldw	r2,-28(fp)
 1026ae4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1026ae8:	0005883a 	mov	r2,zero
 1026aec:	00001906 	br	1026b54 <alt_irq_register+0x158>
 1026af0:	e0bffd17 	ldw	r2,-12(fp)
 1026af4:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1026af8:	0005303a 	rdctl	r2,status
 1026afc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1026b00:	e0fffa17 	ldw	r3,-24(fp)
 1026b04:	00bfff84 	movi	r2,-2
 1026b08:	1884703a 	and	r2,r3,r2
 1026b0c:	1001703a 	wrctl	status,r2
  
  return context;
 1026b10:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1026b14:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1026b18:	00c00044 	movi	r3,1
 1026b1c:	e0bff517 	ldw	r2,-44(fp)
 1026b20:	1884983a 	sll	r2,r3,r2
 1026b24:	0084303a 	nor	r2,zero,r2
 1026b28:	1007883a 	mov	r3,r2
 1026b2c:	d0a75c17 	ldw	r2,-25232(gp)
 1026b30:	1884703a 	and	r2,r3,r2
 1026b34:	d0a75c15 	stw	r2,-25232(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1026b38:	d0a75c17 	ldw	r2,-25232(gp)
 1026b3c:	100170fa 	wrctl	ienable,r2
 1026b40:	e0bffb17 	ldw	r2,-20(fp)
 1026b44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1026b48:	e0bffc17 	ldw	r2,-16(fp)
 1026b4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1026b50:	0005883a 	mov	r2,zero
 1026b54:	e0bff215 	stw	r2,-56(fp)

    //alt_irq_enable_all(status);
  }
  return rc; 
 1026b58:	e0bff217 	ldw	r2,-56(fp)
}
 1026b5c:	e037883a 	mov	sp,fp
 1026b60:	df000017 	ldw	fp,0(sp)
 1026b64:	dec00104 	addi	sp,sp,4
 1026b68:	f800283a 	ret

01026b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1026b6c:	defffe04 	addi	sp,sp,-8
 1026b70:	dfc00115 	stw	ra,4(sp)
 1026b74:	df000015 	stw	fp,0(sp)
 1026b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1026b7c:	d0a01517 	ldw	r2,-32684(gp)
 1026b80:	10000326 	beq	r2,zero,1026b90 <alt_get_errno+0x24>
 1026b84:	d0a01517 	ldw	r2,-32684(gp)
 1026b88:	103ee83a 	callr	r2
 1026b8c:	00000106 	br	1026b94 <alt_get_errno+0x28>
 1026b90:	d0a75b04 	addi	r2,gp,-25236
}
 1026b94:	e037883a 	mov	sp,fp
 1026b98:	dfc00117 	ldw	ra,4(sp)
 1026b9c:	df000017 	ldw	fp,0(sp)
 1026ba0:	dec00204 	addi	sp,sp,8
 1026ba4:	f800283a 	ret

01026ba8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1026ba8:	deffed04 	addi	sp,sp,-76
 1026bac:	dfc01215 	stw	ra,72(sp)
 1026bb0:	df001115 	stw	fp,68(sp)
 1026bb4:	df001104 	addi	fp,sp,68
 1026bb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1026bbc:	e0bfff17 	ldw	r2,-4(fp)
 1026bc0:	10000616 	blt	r2,zero,1026bdc <isatty+0x34>
 1026bc4:	e0bfff17 	ldw	r2,-4(fp)
 1026bc8:	10c00324 	muli	r3,r2,12
 1026bcc:	008040f4 	movhi	r2,259
 1026bd0:	10ae5504 	addi	r2,r2,-18092
 1026bd4:	1885883a 	add	r2,r3,r2
 1026bd8:	00000106 	br	1026be0 <isatty+0x38>
 1026bdc:	0005883a 	mov	r2,zero
 1026be0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1026be4:	e0bfef17 	ldw	r2,-68(fp)
 1026be8:	10000e26 	beq	r2,zero,1026c24 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1026bec:	e0bfef17 	ldw	r2,-68(fp)
 1026bf0:	10800017 	ldw	r2,0(r2)
 1026bf4:	10800817 	ldw	r2,32(r2)
 1026bf8:	1000021e 	bne	r2,zero,1026c04 <isatty+0x5c>
    {
      return 1;
 1026bfc:	00800044 	movi	r2,1
 1026c00:	00000d06 	br	1026c38 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1026c04:	e0bff004 	addi	r2,fp,-64
 1026c08:	100b883a 	mov	r5,r2
 1026c0c:	e13fff17 	ldw	r4,-4(fp)
 1026c10:	102668c0 	call	102668c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1026c14:	e0bff117 	ldw	r2,-60(fp)
 1026c18:	10880020 	cmpeqi	r2,r2,8192
 1026c1c:	10803fcc 	andi	r2,r2,255
 1026c20:	00000506 	br	1026c38 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1026c24:	1026b6c0 	call	1026b6c <alt_get_errno>
 1026c28:	1007883a 	mov	r3,r2
 1026c2c:	00801444 	movi	r2,81
 1026c30:	18800015 	stw	r2,0(r3)
    return 0;
 1026c34:	0005883a 	mov	r2,zero
  }
}
 1026c38:	e037883a 	mov	sp,fp
 1026c3c:	dfc00117 	ldw	ra,4(sp)
 1026c40:	df000017 	ldw	fp,0(sp)
 1026c44:	dec00204 	addi	sp,sp,8
 1026c48:	f800283a 	ret

01026c4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1026c4c:	defffe04 	addi	sp,sp,-8
 1026c50:	dfc00115 	stw	ra,4(sp)
 1026c54:	df000015 	stw	fp,0(sp)
 1026c58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1026c5c:	d0a01517 	ldw	r2,-32684(gp)
 1026c60:	10000326 	beq	r2,zero,1026c70 <alt_get_errno+0x24>
 1026c64:	d0a01517 	ldw	r2,-32684(gp)
 1026c68:	103ee83a 	callr	r2
 1026c6c:	00000106 	br	1026c74 <alt_get_errno+0x28>
 1026c70:	d0a75b04 	addi	r2,gp,-25236
}
 1026c74:	e037883a 	mov	sp,fp
 1026c78:	dfc00117 	ldw	ra,4(sp)
 1026c7c:	df000017 	ldw	fp,0(sp)
 1026c80:	dec00204 	addi	sp,sp,8
 1026c84:	f800283a 	ret

01026c88 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1026c88:	defffb04 	addi	sp,sp,-20
 1026c8c:	dfc00415 	stw	ra,16(sp)
 1026c90:	df000315 	stw	fp,12(sp)
 1026c94:	df000304 	addi	fp,sp,12
 1026c98:	e13ffe15 	stw	r4,-8(fp)
 1026c9c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 1026ca0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 1026ca4:	e0bffe17 	ldw	r2,-8(fp)
 1026ca8:	00802f16 	blt	zero,r2,1026d68 <kill+0xe0>
  {
    switch (sig)
 1026cac:	e0bfff17 	ldw	r2,-4(fp)
 1026cb0:	10800828 	cmpgeui	r2,r2,32
 1026cb4:	1000291e 	bne	r2,zero,1026d5c <kill+0xd4>
 1026cb8:	e0bfff17 	ldw	r2,-4(fp)
 1026cbc:	100690ba 	slli	r3,r2,2
 1026cc0:	008040b4 	movhi	r2,258
 1026cc4:	109b3504 	addi	r2,r2,27860
 1026cc8:	1885883a 	add	r2,r3,r2
 1026ccc:	10800017 	ldw	r2,0(r2)
 1026cd0:	1000683a 	jmp	r2
 1026cd4:	01026d7c 	xorhi	r4,zero,2485
 1026cd8:	01026d5c 	xori	r4,zero,2485
 1026cdc:	01026d5c 	xori	r4,zero,2485
 1026ce0:	01026d54 	movui	r4,2485
 1026ce4:	01026d54 	movui	r4,2485
 1026ce8:	01026d54 	movui	r4,2485
 1026cec:	01026d54 	movui	r4,2485
 1026cf0:	01026d5c 	xori	r4,zero,2485
 1026cf4:	01026d54 	movui	r4,2485
 1026cf8:	01026d54 	movui	r4,2485
 1026cfc:	01026d54 	movui	r4,2485
 1026d00:	01026d54 	movui	r4,2485
 1026d04:	01026d54 	movui	r4,2485
 1026d08:	01026d54 	movui	r4,2485
 1026d0c:	01026d54 	movui	r4,2485
 1026d10:	01026d54 	movui	r4,2485
 1026d14:	01026d7c 	xorhi	r4,zero,2485
 1026d18:	01026d5c 	xori	r4,zero,2485
 1026d1c:	01026d5c 	xori	r4,zero,2485
 1026d20:	01026d5c 	xori	r4,zero,2485
 1026d24:	01026d7c 	xorhi	r4,zero,2485
 1026d28:	01026d5c 	xori	r4,zero,2485
 1026d2c:	01026d5c 	xori	r4,zero,2485
 1026d30:	01026d54 	movui	r4,2485
 1026d34:	01026d54 	movui	r4,2485
 1026d38:	01026d54 	movui	r4,2485
 1026d3c:	01026d54 	movui	r4,2485
 1026d40:	01026d54 	movui	r4,2485
 1026d44:	01026d5c 	xori	r4,zero,2485
 1026d48:	01026d5c 	xori	r4,zero,2485
 1026d4c:	01026d54 	movui	r4,2485
 1026d50:	01026d54 	movui	r4,2485
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1026d54:	0009883a 	mov	r4,zero
 1026d58:	102661c0 	call	102661c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1026d5c:	00800584 	movi	r2,22
 1026d60:	e0bffd15 	stw	r2,-12(fp)
 1026d64:	00000606 	br	1026d80 <kill+0xf8>
    }
  }

  else if (pid > 0)
 1026d68:	e0bffe17 	ldw	r2,-8(fp)
 1026d6c:	0080040e 	bge	zero,r2,1026d80 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1026d70:	008000c4 	movi	r2,3
 1026d74:	e0bffd15 	stw	r2,-12(fp)
 1026d78:	00000106 	br	1026d80 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 1026d7c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 1026d80:	e0bffd17 	ldw	r2,-12(fp)
 1026d84:	10000626 	beq	r2,zero,1026da0 <kill+0x118>
  {
    ALT_ERRNO = status;
 1026d88:	1026c4c0 	call	1026c4c <alt_get_errno>
 1026d8c:	1007883a 	mov	r3,r2
 1026d90:	e0bffd17 	ldw	r2,-12(fp)
 1026d94:	18800015 	stw	r2,0(r3)
    return -1;
 1026d98:	00bfffc4 	movi	r2,-1
 1026d9c:	00000106 	br	1026da4 <kill+0x11c>
  }

  return 0;
 1026da0:	0005883a 	mov	r2,zero
}
 1026da4:	e037883a 	mov	sp,fp
 1026da8:	dfc00117 	ldw	ra,4(sp)
 1026dac:	df000017 	ldw	fp,0(sp)
 1026db0:	dec00204 	addi	sp,sp,8
 1026db4:	f800283a 	ret

01026db8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1026db8:	defffc04 	addi	sp,sp,-16
 1026dbc:	df000315 	stw	fp,12(sp)
 1026dc0:	df000304 	addi	fp,sp,12
 1026dc4:	e13ffd15 	stw	r4,-12(fp)
 1026dc8:	e17ffe15 	stw	r5,-8(fp)
 1026dcc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1026dd0:	e0fffe17 	ldw	r3,-8(fp)
 1026dd4:	e0bffd17 	ldw	r2,-12(fp)
 1026dd8:	18800c26 	beq	r3,r2,1026e0c <alt_load_section+0x54>
  {
    while( to != end )
 1026ddc:	00000806 	br	1026e00 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1026de0:	e0bffe17 	ldw	r2,-8(fp)
 1026de4:	10c00104 	addi	r3,r2,4
 1026de8:	e0fffe15 	stw	r3,-8(fp)
 1026dec:	e0fffd17 	ldw	r3,-12(fp)
 1026df0:	19000104 	addi	r4,r3,4
 1026df4:	e13ffd15 	stw	r4,-12(fp)
 1026df8:	18c00017 	ldw	r3,0(r3)
 1026dfc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1026e00:	e0fffe17 	ldw	r3,-8(fp)
 1026e04:	e0bfff17 	ldw	r2,-4(fp)
 1026e08:	18bff51e 	bne	r3,r2,1026de0 <__alt_data_end+0xff026de0>
    {
      *to++ = *from++;
    }
  }
}
 1026e0c:	0001883a 	nop
 1026e10:	e037883a 	mov	sp,fp
 1026e14:	df000017 	ldw	fp,0(sp)
 1026e18:	dec00104 	addi	sp,sp,4
 1026e1c:	f800283a 	ret

01026e20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1026e20:	defffe04 	addi	sp,sp,-8
 1026e24:	dfc00115 	stw	ra,4(sp)
 1026e28:	df000015 	stw	fp,0(sp)
 1026e2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1026e30:	018040f4 	movhi	r6,259
 1026e34:	31b2ed04 	addi	r6,r6,-13388
 1026e38:	014040f4 	movhi	r5,259
 1026e3c:	296bcd04 	addi	r5,r5,-20684
 1026e40:	010040f4 	movhi	r4,259
 1026e44:	2132ed04 	addi	r4,r4,-13388
 1026e48:	1026db80 	call	1026db8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1026e4c:	01804034 	movhi	r6,256
 1026e50:	3180e804 	addi	r6,r6,928
 1026e54:	01404034 	movhi	r5,256
 1026e58:	29400804 	addi	r5,r5,32
 1026e5c:	01004034 	movhi	r4,256
 1026e60:	21000804 	addi	r4,r4,32
 1026e64:	1026db80 	call	1026db8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1026e68:	018040f4 	movhi	r6,259
 1026e6c:	31abcd04 	addi	r6,r6,-20684
 1026e70:	014040f4 	movhi	r5,259
 1026e74:	2964f604 	addi	r5,r5,-27688
 1026e78:	010040f4 	movhi	r4,259
 1026e7c:	2124f604 	addi	r4,r4,-27688
 1026e80:	1026db80 	call	1026db8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1026e84:	10265a80 	call	10265a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1026e88:	102887c0 	call	102887c <alt_icache_flush_all>
}
 1026e8c:	0001883a 	nop
 1026e90:	e037883a 	mov	sp,fp
 1026e94:	dfc00117 	ldw	ra,4(sp)
 1026e98:	df000017 	ldw	fp,0(sp)
 1026e9c:	dec00204 	addi	sp,sp,8
 1026ea0:	f800283a 	ret

01026ea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1026ea4:	defffe04 	addi	sp,sp,-8
 1026ea8:	dfc00115 	stw	ra,4(sp)
 1026eac:	df000015 	stw	fp,0(sp)
 1026eb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1026eb4:	d0a01517 	ldw	r2,-32684(gp)
 1026eb8:	10000326 	beq	r2,zero,1026ec8 <alt_get_errno+0x24>
 1026ebc:	d0a01517 	ldw	r2,-32684(gp)
 1026ec0:	103ee83a 	callr	r2
 1026ec4:	00000106 	br	1026ecc <alt_get_errno+0x28>
 1026ec8:	d0a75b04 	addi	r2,gp,-25236
}
 1026ecc:	e037883a 	mov	sp,fp
 1026ed0:	dfc00117 	ldw	ra,4(sp)
 1026ed4:	df000017 	ldw	fp,0(sp)
 1026ed8:	dec00204 	addi	sp,sp,8
 1026edc:	f800283a 	ret

01026ee0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1026ee0:	defff904 	addi	sp,sp,-28
 1026ee4:	dfc00615 	stw	ra,24(sp)
 1026ee8:	df000515 	stw	fp,20(sp)
 1026eec:	df000504 	addi	fp,sp,20
 1026ef0:	e13ffd15 	stw	r4,-12(fp)
 1026ef4:	e17ffe15 	stw	r5,-8(fp)
 1026ef8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1026efc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1026f00:	e0bffd17 	ldw	r2,-12(fp)
 1026f04:	10000616 	blt	r2,zero,1026f20 <lseek+0x40>
 1026f08:	e0bffd17 	ldw	r2,-12(fp)
 1026f0c:	10c00324 	muli	r3,r2,12
 1026f10:	008040f4 	movhi	r2,259
 1026f14:	10ae5504 	addi	r2,r2,-18092
 1026f18:	1885883a 	add	r2,r3,r2
 1026f1c:	00000106 	br	1026f24 <lseek+0x44>
 1026f20:	0005883a 	mov	r2,zero
 1026f24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1026f28:	e0bffc17 	ldw	r2,-16(fp)
 1026f2c:	10001026 	beq	r2,zero,1026f70 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1026f30:	e0bffc17 	ldw	r2,-16(fp)
 1026f34:	10800017 	ldw	r2,0(r2)
 1026f38:	10800717 	ldw	r2,28(r2)
 1026f3c:	10000926 	beq	r2,zero,1026f64 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1026f40:	e0bffc17 	ldw	r2,-16(fp)
 1026f44:	10800017 	ldw	r2,0(r2)
 1026f48:	10800717 	ldw	r2,28(r2)
 1026f4c:	e1bfff17 	ldw	r6,-4(fp)
 1026f50:	e17ffe17 	ldw	r5,-8(fp)
 1026f54:	e13ffc17 	ldw	r4,-16(fp)
 1026f58:	103ee83a 	callr	r2
 1026f5c:	e0bffb15 	stw	r2,-20(fp)
 1026f60:	00000506 	br	1026f78 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1026f64:	00bfde84 	movi	r2,-134
 1026f68:	e0bffb15 	stw	r2,-20(fp)
 1026f6c:	00000206 	br	1026f78 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1026f70:	00bfebc4 	movi	r2,-81
 1026f74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1026f78:	e0bffb17 	ldw	r2,-20(fp)
 1026f7c:	1000070e 	bge	r2,zero,1026f9c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1026f80:	1026ea40 	call	1026ea4 <alt_get_errno>
 1026f84:	1007883a 	mov	r3,r2
 1026f88:	e0bffb17 	ldw	r2,-20(fp)
 1026f8c:	0085c83a 	sub	r2,zero,r2
 1026f90:	18800015 	stw	r2,0(r3)
    rc = -1;
 1026f94:	00bfffc4 	movi	r2,-1
 1026f98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1026f9c:	e0bffb17 	ldw	r2,-20(fp)
}
 1026fa0:	e037883a 	mov	sp,fp
 1026fa4:	dfc00117 	ldw	ra,4(sp)
 1026fa8:	df000017 	ldw	fp,0(sp)
 1026fac:	dec00204 	addi	sp,sp,8
 1026fb0:	f800283a 	ret

01026fb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1026fb4:	defffd04 	addi	sp,sp,-12
 1026fb8:	dfc00215 	stw	ra,8(sp)
 1026fbc:	df000115 	stw	fp,4(sp)
 1026fc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1026fc4:	0009883a 	mov	r4,zero
 1026fc8:	10275000 	call	1027500 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1026fcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1026fd0:	10275380 	call	1027538 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1026fd4:	018040f4 	movhi	r6,259
 1026fd8:	31abbf04 	addi	r6,r6,-20740
 1026fdc:	014040f4 	movhi	r5,259
 1026fe0:	296bbf04 	addi	r5,r5,-20740
 1026fe4:	010040f4 	movhi	r4,259
 1026fe8:	212bbf04 	addi	r4,r4,-20740
 1026fec:	1028a100 	call	1028a10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1026ff0:	102872c0 	call	102872c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1026ff4:	010040f4 	movhi	r4,259
 1026ff8:	2121e304 	addi	r4,r4,-30836
 1026ffc:	10290e40 	call	10290e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1027000:	d0a75d17 	ldw	r2,-25228(gp)
 1027004:	d0e75e17 	ldw	r3,-25224(gp)
 1027008:	d1275f17 	ldw	r4,-25220(gp)
 102700c:	200d883a 	mov	r6,r4
 1027010:	180b883a 	mov	r5,r3
 1027014:	1009883a 	mov	r4,r2
 1027018:	101484c0 	call	101484c <main>
 102701c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1027020:	01000044 	movi	r4,1
 1027024:	10264600 	call	1026460 <close>
  exit (result);
 1027028:	e13fff17 	ldw	r4,-4(fp)
 102702c:	10290f80 	call	10290f8 <exit>

01027030 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1027030:	defffe04 	addi	sp,sp,-8
 1027034:	df000115 	stw	fp,4(sp)
 1027038:	df000104 	addi	fp,sp,4
 102703c:	e13fff15 	stw	r4,-4(fp)
}
 1027040:	0001883a 	nop
 1027044:	e037883a 	mov	sp,fp
 1027048:	df000017 	ldw	fp,0(sp)
 102704c:	dec00104 	addi	sp,sp,4
 1027050:	f800283a 	ret

01027054 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1027054:	defffe04 	addi	sp,sp,-8
 1027058:	df000115 	stw	fp,4(sp)
 102705c:	df000104 	addi	fp,sp,4
 1027060:	e13fff15 	stw	r4,-4(fp)
}
 1027064:	0001883a 	nop
 1027068:	e037883a 	mov	sp,fp
 102706c:	df000017 	ldw	fp,0(sp)
 1027070:	dec00104 	addi	sp,sp,4
 1027074:	f800283a 	ret

01027078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1027078:	defffe04 	addi	sp,sp,-8
 102707c:	dfc00115 	stw	ra,4(sp)
 1027080:	df000015 	stw	fp,0(sp)
 1027084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1027088:	d0a01517 	ldw	r2,-32684(gp)
 102708c:	10000326 	beq	r2,zero,102709c <alt_get_errno+0x24>
 1027090:	d0a01517 	ldw	r2,-32684(gp)
 1027094:	103ee83a 	callr	r2
 1027098:	00000106 	br	10270a0 <alt_get_errno+0x28>
 102709c:	d0a75b04 	addi	r2,gp,-25236
}
 10270a0:	e037883a 	mov	sp,fp
 10270a4:	dfc00117 	ldw	ra,4(sp)
 10270a8:	df000017 	ldw	fp,0(sp)
 10270ac:	dec00204 	addi	sp,sp,8
 10270b0:	f800283a 	ret

010270b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10270b4:	defff904 	addi	sp,sp,-28
 10270b8:	dfc00615 	stw	ra,24(sp)
 10270bc:	df000515 	stw	fp,20(sp)
 10270c0:	df000504 	addi	fp,sp,20
 10270c4:	e13ffd15 	stw	r4,-12(fp)
 10270c8:	e17ffe15 	stw	r5,-8(fp)
 10270cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10270d0:	e0bffd17 	ldw	r2,-12(fp)
 10270d4:	10000616 	blt	r2,zero,10270f0 <read+0x3c>
 10270d8:	e0bffd17 	ldw	r2,-12(fp)
 10270dc:	10c00324 	muli	r3,r2,12
 10270e0:	008040f4 	movhi	r2,259
 10270e4:	10ae5504 	addi	r2,r2,-18092
 10270e8:	1885883a 	add	r2,r3,r2
 10270ec:	00000106 	br	10270f4 <read+0x40>
 10270f0:	0005883a 	mov	r2,zero
 10270f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10270f8:	e0bffb17 	ldw	r2,-20(fp)
 10270fc:	10002226 	beq	r2,zero,1027188 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1027100:	e0bffb17 	ldw	r2,-20(fp)
 1027104:	10800217 	ldw	r2,8(r2)
 1027108:	108000cc 	andi	r2,r2,3
 102710c:	10800060 	cmpeqi	r2,r2,1
 1027110:	1000181e 	bne	r2,zero,1027174 <read+0xc0>
        (fd->dev->read))
 1027114:	e0bffb17 	ldw	r2,-20(fp)
 1027118:	10800017 	ldw	r2,0(r2)
 102711c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1027120:	10001426 	beq	r2,zero,1027174 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1027124:	e0bffb17 	ldw	r2,-20(fp)
 1027128:	10800017 	ldw	r2,0(r2)
 102712c:	10800517 	ldw	r2,20(r2)
 1027130:	e0ffff17 	ldw	r3,-4(fp)
 1027134:	180d883a 	mov	r6,r3
 1027138:	e17ffe17 	ldw	r5,-8(fp)
 102713c:	e13ffb17 	ldw	r4,-20(fp)
 1027140:	103ee83a 	callr	r2
 1027144:	e0bffc15 	stw	r2,-16(fp)
 1027148:	e0bffc17 	ldw	r2,-16(fp)
 102714c:	1000070e 	bge	r2,zero,102716c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1027150:	10270780 	call	1027078 <alt_get_errno>
 1027154:	1007883a 	mov	r3,r2
 1027158:	e0bffc17 	ldw	r2,-16(fp)
 102715c:	0085c83a 	sub	r2,zero,r2
 1027160:	18800015 	stw	r2,0(r3)
          return -1;
 1027164:	00bfffc4 	movi	r2,-1
 1027168:	00000c06 	br	102719c <read+0xe8>
        }
        return rval;
 102716c:	e0bffc17 	ldw	r2,-16(fp)
 1027170:	00000a06 	br	102719c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1027174:	10270780 	call	1027078 <alt_get_errno>
 1027178:	1007883a 	mov	r3,r2
 102717c:	00800344 	movi	r2,13
 1027180:	18800015 	stw	r2,0(r3)
 1027184:	00000406 	br	1027198 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1027188:	10270780 	call	1027078 <alt_get_errno>
 102718c:	1007883a 	mov	r3,r2
 1027190:	00801444 	movi	r2,81
 1027194:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1027198:	00bfffc4 	movi	r2,-1
}
 102719c:	e037883a 	mov	sp,fp
 10271a0:	dfc00117 	ldw	ra,4(sp)
 10271a4:	df000017 	ldw	fp,0(sp)
 10271a8:	dec00204 	addi	sp,sp,8
 10271ac:	f800283a 	ret

010271b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10271b0:	defffe04 	addi	sp,sp,-8
 10271b4:	df000115 	stw	fp,4(sp)
 10271b8:	df000104 	addi	fp,sp,4
 10271bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10271c0:	e0bfff17 	ldw	r2,-4(fp)
 10271c4:	108000d0 	cmplti	r2,r2,3
 10271c8:	10000d1e 	bne	r2,zero,1027200 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10271cc:	008040f4 	movhi	r2,259
 10271d0:	10ae5504 	addi	r2,r2,-18092
 10271d4:	e0ffff17 	ldw	r3,-4(fp)
 10271d8:	18c00324 	muli	r3,r3,12
 10271dc:	10c5883a 	add	r2,r2,r3
 10271e0:	10800204 	addi	r2,r2,8
 10271e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10271e8:	008040f4 	movhi	r2,259
 10271ec:	10ae5504 	addi	r2,r2,-18092
 10271f0:	e0ffff17 	ldw	r3,-4(fp)
 10271f4:	18c00324 	muli	r3,r3,12
 10271f8:	10c5883a 	add	r2,r2,r3
 10271fc:	10000015 	stw	zero,0(r2)
  }
}
 1027200:	0001883a 	nop
 1027204:	e037883a 	mov	sp,fp
 1027208:	df000017 	ldw	fp,0(sp)
 102720c:	dec00104 	addi	sp,sp,4
 1027210:	f800283a 	ret

01027214 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1027214:	defff904 	addi	sp,sp,-28
 1027218:	df000615 	stw	fp,24(sp)
 102721c:	df000604 	addi	fp,sp,24
 1027220:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027224:	0005303a 	rdctl	r2,status
 1027228:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 102722c:	e0fffe17 	ldw	r3,-8(fp)
 1027230:	00bfff84 	movi	r2,-2
 1027234:	1884703a 	and	r2,r3,r2
 1027238:	1001703a 	wrctl	status,r2
  
  return context;
 102723c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1027240:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1027244:	d0a01717 	ldw	r2,-32676(gp)
 1027248:	10c000c4 	addi	r3,r2,3
 102724c:	00bfff04 	movi	r2,-4
 1027250:	1884703a 	and	r2,r3,r2
 1027254:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1027258:	d0e01717 	ldw	r3,-32676(gp)
 102725c:	e0bfff17 	ldw	r2,-4(fp)
 1027260:	1887883a 	add	r3,r3,r2
 1027264:	00808034 	movhi	r2,512
 1027268:	10800004 	addi	r2,r2,0
 102726c:	10c0062e 	bgeu	r2,r3,1027288 <sbrk+0x74>
 1027270:	e0bffb17 	ldw	r2,-20(fp)
 1027274:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1027278:	e0bffa17 	ldw	r2,-24(fp)
 102727c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1027280:	00bfffc4 	movi	r2,-1
 1027284:	00000b06 	br	10272b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1027288:	d0a01717 	ldw	r2,-32676(gp)
 102728c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1027290:	d0e01717 	ldw	r3,-32676(gp)
 1027294:	e0bfff17 	ldw	r2,-4(fp)
 1027298:	1885883a 	add	r2,r3,r2
 102729c:	d0a01715 	stw	r2,-32676(gp)
 10272a0:	e0bffb17 	ldw	r2,-20(fp)
 10272a4:	e0bffc15 	stw	r2,-16(fp)
 10272a8:	e0bffc17 	ldw	r2,-16(fp)
 10272ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10272b0:	e0bffd17 	ldw	r2,-12(fp)
} 
 10272b4:	e037883a 	mov	sp,fp
 10272b8:	df000017 	ldw	fp,0(sp)
 10272bc:	dec00104 	addi	sp,sp,4
 10272c0:	f800283a 	ret

010272c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 10272c4:	defffd04 	addi	sp,sp,-12
 10272c8:	dfc00215 	stw	ra,8(sp)
 10272cc:	df000115 	stw	fp,4(sp)
 10272d0:	df000104 	addi	fp,sp,4
 10272d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 10272d8:	e13fff17 	ldw	r4,-4(fp)
 10272dc:	10284f40 	call	10284f4 <alt_busy_sleep>
}
 10272e0:	e037883a 	mov	sp,fp
 10272e4:	dfc00117 	ldw	ra,4(sp)
 10272e8:	df000017 	ldw	fp,0(sp)
 10272ec:	dec00204 	addi	sp,sp,8
 10272f0:	f800283a 	ret

010272f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10272f4:	defffe04 	addi	sp,sp,-8
 10272f8:	dfc00115 	stw	ra,4(sp)
 10272fc:	df000015 	stw	fp,0(sp)
 1027300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1027304:	d0a01517 	ldw	r2,-32684(gp)
 1027308:	10000326 	beq	r2,zero,1027318 <alt_get_errno+0x24>
 102730c:	d0a01517 	ldw	r2,-32684(gp)
 1027310:	103ee83a 	callr	r2
 1027314:	00000106 	br	102731c <alt_get_errno+0x28>
 1027318:	d0a75b04 	addi	r2,gp,-25236
}
 102731c:	e037883a 	mov	sp,fp
 1027320:	dfc00117 	ldw	ra,4(sp)
 1027324:	df000017 	ldw	fp,0(sp)
 1027328:	dec00204 	addi	sp,sp,8
 102732c:	f800283a 	ret

01027330 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1027330:	defff904 	addi	sp,sp,-28
 1027334:	dfc00615 	stw	ra,24(sp)
 1027338:	df000515 	stw	fp,20(sp)
 102733c:	df000504 	addi	fp,sp,20
 1027340:	e13ffd15 	stw	r4,-12(fp)
 1027344:	e17ffe15 	stw	r5,-8(fp)
 1027348:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 102734c:	e0bffd17 	ldw	r2,-12(fp)
 1027350:	10000616 	blt	r2,zero,102736c <write+0x3c>
 1027354:	e0bffd17 	ldw	r2,-12(fp)
 1027358:	10c00324 	muli	r3,r2,12
 102735c:	008040f4 	movhi	r2,259
 1027360:	10ae5504 	addi	r2,r2,-18092
 1027364:	1885883a 	add	r2,r3,r2
 1027368:	00000106 	br	1027370 <write+0x40>
 102736c:	0005883a 	mov	r2,zero
 1027370:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1027374:	e0bffb17 	ldw	r2,-20(fp)
 1027378:	10002126 	beq	r2,zero,1027400 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 102737c:	e0bffb17 	ldw	r2,-20(fp)
 1027380:	10800217 	ldw	r2,8(r2)
 1027384:	108000cc 	andi	r2,r2,3
 1027388:	10001826 	beq	r2,zero,10273ec <write+0xbc>
 102738c:	e0bffb17 	ldw	r2,-20(fp)
 1027390:	10800017 	ldw	r2,0(r2)
 1027394:	10800617 	ldw	r2,24(r2)
 1027398:	10001426 	beq	r2,zero,10273ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 102739c:	e0bffb17 	ldw	r2,-20(fp)
 10273a0:	10800017 	ldw	r2,0(r2)
 10273a4:	10800617 	ldw	r2,24(r2)
 10273a8:	e0ffff17 	ldw	r3,-4(fp)
 10273ac:	180d883a 	mov	r6,r3
 10273b0:	e17ffe17 	ldw	r5,-8(fp)
 10273b4:	e13ffb17 	ldw	r4,-20(fp)
 10273b8:	103ee83a 	callr	r2
 10273bc:	e0bffc15 	stw	r2,-16(fp)
 10273c0:	e0bffc17 	ldw	r2,-16(fp)
 10273c4:	1000070e 	bge	r2,zero,10273e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 10273c8:	10272f40 	call	10272f4 <alt_get_errno>
 10273cc:	1007883a 	mov	r3,r2
 10273d0:	e0bffc17 	ldw	r2,-16(fp)
 10273d4:	0085c83a 	sub	r2,zero,r2
 10273d8:	18800015 	stw	r2,0(r3)
        return -1;
 10273dc:	00bfffc4 	movi	r2,-1
 10273e0:	00000c06 	br	1027414 <write+0xe4>
      }
      return rval;
 10273e4:	e0bffc17 	ldw	r2,-16(fp)
 10273e8:	00000a06 	br	1027414 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10273ec:	10272f40 	call	10272f4 <alt_get_errno>
 10273f0:	1007883a 	mov	r3,r2
 10273f4:	00800344 	movi	r2,13
 10273f8:	18800015 	stw	r2,0(r3)
 10273fc:	00000406 	br	1027410 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1027400:	10272f40 	call	10272f4 <alt_get_errno>
 1027404:	1007883a 	mov	r3,r2
 1027408:	00801444 	movi	r2,81
 102740c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1027410:	00bfffc4 	movi	r2,-1
}
 1027414:	e037883a 	mov	sp,fp
 1027418:	dfc00117 	ldw	ra,4(sp)
 102741c:	df000017 	ldw	fp,0(sp)
 1027420:	dec00204 	addi	sp,sp,8
 1027424:	f800283a 	ret

01027428 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1027428:	defffd04 	addi	sp,sp,-12
 102742c:	dfc00215 	stw	ra,8(sp)
 1027430:	df000115 	stw	fp,4(sp)
 1027434:	df000104 	addi	fp,sp,4
 1027438:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 102743c:	d1601204 	addi	r5,gp,-32696
 1027440:	e13fff17 	ldw	r4,-4(fp)
 1027444:	10286880 	call	1028688 <alt_dev_llist_insert>
}
 1027448:	e037883a 	mov	sp,fp
 102744c:	dfc00117 	ldw	ra,4(sp)
 1027450:	df000017 	ldw	fp,0(sp)
 1027454:	dec00204 	addi	sp,sp,8
 1027458:	f800283a 	ret

0102745c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102745c:	defffe04 	addi	sp,sp,-8
 1027460:	dfc00115 	stw	ra,4(sp)
 1027464:	df000015 	stw	fp,0(sp)
 1027468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102746c:	d0a01517 	ldw	r2,-32684(gp)
 1027470:	10000326 	beq	r2,zero,1027480 <alt_get_errno+0x24>
 1027474:	d0a01517 	ldw	r2,-32684(gp)
 1027478:	103ee83a 	callr	r2
 102747c:	00000106 	br	1027484 <alt_get_errno+0x28>
 1027480:	d0a75b04 	addi	r2,gp,-25236
}
 1027484:	e037883a 	mov	sp,fp
 1027488:	dfc00117 	ldw	ra,4(sp)
 102748c:	df000017 	ldw	fp,0(sp)
 1027490:	dec00204 	addi	sp,sp,8
 1027494:	f800283a 	ret

01027498 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 1027498:	defffc04 	addi	sp,sp,-16
 102749c:	dfc00315 	stw	ra,12(sp)
 10274a0:	df000215 	stw	fp,8(sp)
 10274a4:	df000204 	addi	fp,sp,8
 10274a8:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 10274ac:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 10274b0:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 10274b4:	e0bffe17 	ldw	r2,-8(fp)
 10274b8:	1000051e 	bne	r2,zero,10274d0 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 10274bc:	d1601804 	addi	r5,gp,-32672
 10274c0:	e13fff17 	ldw	r4,-4(fp)
 10274c4:	10286880 	call	1028688 <alt_dev_llist_insert>
 10274c8:	e0bffe15 	stw	r2,-8(fp)
 10274cc:	00000606 	br	10274e8 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 10274d0:	102745c0 	call	102745c <alt_get_errno>
 10274d4:	1007883a 	mov	r3,r2
 10274d8:	00800304 	movi	r2,12
 10274dc:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 10274e0:	00bffd04 	movi	r2,-12
 10274e4:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 10274e8:	e0bffe17 	ldw	r2,-8(fp)
}
 10274ec:	e037883a 	mov	sp,fp
 10274f0:	dfc00117 	ldw	ra,4(sp)
 10274f4:	df000017 	ldw	fp,0(sp)
 10274f8:	dec00204 	addi	sp,sp,8
 10274fc:	f800283a 	ret

01027500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1027500:	defffd04 	addi	sp,sp,-12
 1027504:	dfc00215 	stw	ra,8(sp)
 1027508:	df000115 	stw	fp,4(sp)
 102750c:	df000104 	addi	fp,sp,4
 1027510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU_1, nios_cpu_1);
 1027514:	1028e840 	call	1028e84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1027518:	00800044 	movi	r2,1
 102751c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1027520:	0001883a 	nop
 1027524:	e037883a 	mov	sp,fp
 1027528:	dfc00117 	ldw	ra,4(sp)
 102752c:	df000017 	ldw	fp,0(sp)
 1027530:	dec00204 	addi	sp,sp,8
 1027534:	f800283a 	ret

01027538 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1027538:	defffe04 	addi	sp,sp,-8
 102753c:	dfc00115 	stw	ra,4(sp)
 1027540:	df000015 	stw	fp,0(sp)
 1027544:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1027548:	01c0fa04 	movi	r7,1000
 102754c:	01800044 	movi	r6,1
 1027550:	000b883a 	mov	r5,zero
 1027554:	01000804 	movi	r4,32
 1027558:	102834c0 	call	102834c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 102755c:	000d883a 	mov	r6,zero
 1027560:	000b883a 	mov	r5,zero
 1027564:	010040f4 	movhi	r4,259
 1027568:	212ebf04 	addi	r4,r4,-17668
 102756c:	10277040 	call	1027704 <altera_avalon_jtag_uart_init>
 1027570:	010040f4 	movhi	r4,259
 1027574:	212eb504 	addi	r4,r4,-17708
 1027578:	10274280 	call	1027428 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 102757c:	010040f4 	movhi	r4,259
 1027580:	2132cd04 	addi	r4,r4,-13516
 1027584:	10274980 	call	1027498 <alt_avalon_mutex_reg>
}
 1027588:	0001883a 	nop
 102758c:	e037883a 	mov	sp,fp
 1027590:	dfc00117 	ldw	ra,4(sp)
 1027594:	df000017 	ldw	fp,0(sp)
 1027598:	dec00204 	addi	sp,sp,8
 102759c:	f800283a 	ret

010275a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10275a0:	defffa04 	addi	sp,sp,-24
 10275a4:	dfc00515 	stw	ra,20(sp)
 10275a8:	df000415 	stw	fp,16(sp)
 10275ac:	df000404 	addi	fp,sp,16
 10275b0:	e13ffd15 	stw	r4,-12(fp)
 10275b4:	e17ffe15 	stw	r5,-8(fp)
 10275b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10275bc:	e0bffd17 	ldw	r2,-12(fp)
 10275c0:	10800017 	ldw	r2,0(r2)
 10275c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10275c8:	e0bffc17 	ldw	r2,-16(fp)
 10275cc:	10c00a04 	addi	r3,r2,40
 10275d0:	e0bffd17 	ldw	r2,-12(fp)
 10275d4:	10800217 	ldw	r2,8(r2)
 10275d8:	100f883a 	mov	r7,r2
 10275dc:	e1bfff17 	ldw	r6,-4(fp)
 10275e0:	e17ffe17 	ldw	r5,-8(fp)
 10275e4:	1809883a 	mov	r4,r3
 10275e8:	1027bc80 	call	1027bc8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10275ec:	e037883a 	mov	sp,fp
 10275f0:	dfc00117 	ldw	ra,4(sp)
 10275f4:	df000017 	ldw	fp,0(sp)
 10275f8:	dec00204 	addi	sp,sp,8
 10275fc:	f800283a 	ret

01027600 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1027600:	defffa04 	addi	sp,sp,-24
 1027604:	dfc00515 	stw	ra,20(sp)
 1027608:	df000415 	stw	fp,16(sp)
 102760c:	df000404 	addi	fp,sp,16
 1027610:	e13ffd15 	stw	r4,-12(fp)
 1027614:	e17ffe15 	stw	r5,-8(fp)
 1027618:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 102761c:	e0bffd17 	ldw	r2,-12(fp)
 1027620:	10800017 	ldw	r2,0(r2)
 1027624:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1027628:	e0bffc17 	ldw	r2,-16(fp)
 102762c:	10c00a04 	addi	r3,r2,40
 1027630:	e0bffd17 	ldw	r2,-12(fp)
 1027634:	10800217 	ldw	r2,8(r2)
 1027638:	100f883a 	mov	r7,r2
 102763c:	e1bfff17 	ldw	r6,-4(fp)
 1027640:	e17ffe17 	ldw	r5,-8(fp)
 1027644:	1809883a 	mov	r4,r3
 1027648:	1027de40 	call	1027de4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 102764c:	e037883a 	mov	sp,fp
 1027650:	dfc00117 	ldw	ra,4(sp)
 1027654:	df000017 	ldw	fp,0(sp)
 1027658:	dec00204 	addi	sp,sp,8
 102765c:	f800283a 	ret

01027660 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1027660:	defffc04 	addi	sp,sp,-16
 1027664:	dfc00315 	stw	ra,12(sp)
 1027668:	df000215 	stw	fp,8(sp)
 102766c:	df000204 	addi	fp,sp,8
 1027670:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1027674:	e0bfff17 	ldw	r2,-4(fp)
 1027678:	10800017 	ldw	r2,0(r2)
 102767c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1027680:	e0bffe17 	ldw	r2,-8(fp)
 1027684:	10c00a04 	addi	r3,r2,40
 1027688:	e0bfff17 	ldw	r2,-4(fp)
 102768c:	10800217 	ldw	r2,8(r2)
 1027690:	100b883a 	mov	r5,r2
 1027694:	1809883a 	mov	r4,r3
 1027698:	1027a700 	call	1027a70 <altera_avalon_jtag_uart_close>
}
 102769c:	e037883a 	mov	sp,fp
 10276a0:	dfc00117 	ldw	ra,4(sp)
 10276a4:	df000017 	ldw	fp,0(sp)
 10276a8:	dec00204 	addi	sp,sp,8
 10276ac:	f800283a 	ret

010276b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10276b0:	defffa04 	addi	sp,sp,-24
 10276b4:	dfc00515 	stw	ra,20(sp)
 10276b8:	df000415 	stw	fp,16(sp)
 10276bc:	df000404 	addi	fp,sp,16
 10276c0:	e13ffd15 	stw	r4,-12(fp)
 10276c4:	e17ffe15 	stw	r5,-8(fp)
 10276c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10276cc:	e0bffd17 	ldw	r2,-12(fp)
 10276d0:	10800017 	ldw	r2,0(r2)
 10276d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10276d8:	e0bffc17 	ldw	r2,-16(fp)
 10276dc:	10800a04 	addi	r2,r2,40
 10276e0:	e1bfff17 	ldw	r6,-4(fp)
 10276e4:	e17ffe17 	ldw	r5,-8(fp)
 10276e8:	1009883a 	mov	r4,r2
 10276ec:	1027ad80 	call	1027ad8 <altera_avalon_jtag_uart_ioctl>
}
 10276f0:	e037883a 	mov	sp,fp
 10276f4:	dfc00117 	ldw	ra,4(sp)
 10276f8:	df000017 	ldw	fp,0(sp)
 10276fc:	dec00204 	addi	sp,sp,8
 1027700:	f800283a 	ret

01027704 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1027704:	defffa04 	addi	sp,sp,-24
 1027708:	dfc00515 	stw	ra,20(sp)
 102770c:	df000415 	stw	fp,16(sp)
 1027710:	df000404 	addi	fp,sp,16
 1027714:	e13ffd15 	stw	r4,-12(fp)
 1027718:	e17ffe15 	stw	r5,-8(fp)
 102771c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1027720:	e0bffd17 	ldw	r2,-12(fp)
 1027724:	00c00044 	movi	r3,1
 1027728:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 102772c:	e0bffd17 	ldw	r2,-12(fp)
 1027730:	10800017 	ldw	r2,0(r2)
 1027734:	10800104 	addi	r2,r2,4
 1027738:	1007883a 	mov	r3,r2
 102773c:	e0bffd17 	ldw	r2,-12(fp)
 1027740:	10800817 	ldw	r2,32(r2)
 1027744:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1027748:	e0bffe17 	ldw	r2,-8(fp)
 102774c:	e0ffff17 	ldw	r3,-4(fp)
 1027750:	d8000015 	stw	zero,0(sp)
 1027754:	e1fffd17 	ldw	r7,-12(fp)
 1027758:	018040b4 	movhi	r6,258
 102775c:	319df104 	addi	r6,r6,30660
 1027760:	180b883a 	mov	r5,r3
 1027764:	1009883a 	mov	r4,r2
 1027768:	102675c0 	call	102675c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 102776c:	e0bffd17 	ldw	r2,-12(fp)
 1027770:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1027774:	e0bffd17 	ldw	r2,-12(fp)
 1027778:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 102777c:	d0e76117 	ldw	r3,-25212(gp)
 1027780:	e1fffd17 	ldw	r7,-12(fp)
 1027784:	018040b4 	movhi	r6,258
 1027788:	319e7404 	addi	r6,r6,31184
 102778c:	180b883a 	mov	r5,r3
 1027790:	1009883a 	mov	r4,r2
 1027794:	10283c80 	call	10283c8 <alt_alarm_start>
 1027798:	1000040e 	bge	r2,zero,10277ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 102779c:	e0fffd17 	ldw	r3,-12(fp)
 10277a0:	00a00034 	movhi	r2,32768
 10277a4:	10bfffc4 	addi	r2,r2,-1
 10277a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10277ac:	0001883a 	nop
 10277b0:	e037883a 	mov	sp,fp
 10277b4:	dfc00117 	ldw	ra,4(sp)
 10277b8:	df000017 	ldw	fp,0(sp)
 10277bc:	dec00204 	addi	sp,sp,8
 10277c0:	f800283a 	ret

010277c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10277c4:	defff804 	addi	sp,sp,-32
 10277c8:	df000715 	stw	fp,28(sp)
 10277cc:	df000704 	addi	fp,sp,28
 10277d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10277d4:	e0bfff17 	ldw	r2,-4(fp)
 10277d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10277dc:	e0bffb17 	ldw	r2,-20(fp)
 10277e0:	10800017 	ldw	r2,0(r2)
 10277e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10277e8:	e0bffc17 	ldw	r2,-16(fp)
 10277ec:	10800104 	addi	r2,r2,4
 10277f0:	10800037 	ldwio	r2,0(r2)
 10277f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10277f8:	e0bffd17 	ldw	r2,-12(fp)
 10277fc:	1080c00c 	andi	r2,r2,768
 1027800:	10006d26 	beq	r2,zero,10279b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1027804:	e0bffd17 	ldw	r2,-12(fp)
 1027808:	1080400c 	andi	r2,r2,256
 102780c:	10003526 	beq	r2,zero,10278e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1027810:	00800074 	movhi	r2,1
 1027814:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1027818:	e0bffb17 	ldw	r2,-20(fp)
 102781c:	10800a17 	ldw	r2,40(r2)
 1027820:	10800044 	addi	r2,r2,1
 1027824:	1081ffcc 	andi	r2,r2,2047
 1027828:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 102782c:	e0bffb17 	ldw	r2,-20(fp)
 1027830:	10c00b17 	ldw	r3,44(r2)
 1027834:	e0bffe17 	ldw	r2,-8(fp)
 1027838:	18801526 	beq	r3,r2,1027890 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 102783c:	e0bffc17 	ldw	r2,-16(fp)
 1027840:	10800037 	ldwio	r2,0(r2)
 1027844:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1027848:	e0bff917 	ldw	r2,-28(fp)
 102784c:	10a0000c 	andi	r2,r2,32768
 1027850:	10001126 	beq	r2,zero,1027898 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1027854:	e0bffb17 	ldw	r2,-20(fp)
 1027858:	10800a17 	ldw	r2,40(r2)
 102785c:	e0fff917 	ldw	r3,-28(fp)
 1027860:	1809883a 	mov	r4,r3
 1027864:	e0fffb17 	ldw	r3,-20(fp)
 1027868:	1885883a 	add	r2,r3,r2
 102786c:	10800e04 	addi	r2,r2,56
 1027870:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1027874:	e0bffb17 	ldw	r2,-20(fp)
 1027878:	10800a17 	ldw	r2,40(r2)
 102787c:	10800044 	addi	r2,r2,1
 1027880:	10c1ffcc 	andi	r3,r2,2047
 1027884:	e0bffb17 	ldw	r2,-20(fp)
 1027888:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 102788c:	003fe206 	br	1027818 <__alt_data_end+0xff027818>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 1027890:	0001883a 	nop
 1027894:	00000106 	br	102789c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1027898:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 102789c:	e0bff917 	ldw	r2,-28(fp)
 10278a0:	10bfffec 	andhi	r2,r2,65535
 10278a4:	10000f26 	beq	r2,zero,10278e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10278a8:	e0bffb17 	ldw	r2,-20(fp)
 10278ac:	10c00817 	ldw	r3,32(r2)
 10278b0:	00bfff84 	movi	r2,-2
 10278b4:	1886703a 	and	r3,r3,r2
 10278b8:	e0bffb17 	ldw	r2,-20(fp)
 10278bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10278c0:	e0bffc17 	ldw	r2,-16(fp)
 10278c4:	10800104 	addi	r2,r2,4
 10278c8:	1007883a 	mov	r3,r2
 10278cc:	e0bffb17 	ldw	r2,-20(fp)
 10278d0:	10800817 	ldw	r2,32(r2)
 10278d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10278d8:	e0bffc17 	ldw	r2,-16(fp)
 10278dc:	10800104 	addi	r2,r2,4
 10278e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10278e4:	e0bffd17 	ldw	r2,-12(fp)
 10278e8:	1080800c 	andi	r2,r2,512
 10278ec:	103fbe26 	beq	r2,zero,10277e8 <__alt_data_end+0xff0277e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10278f0:	e0bffd17 	ldw	r2,-12(fp)
 10278f4:	1004d43a 	srli	r2,r2,16
 10278f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10278fc:	00001406 	br	1027950 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1027900:	e0bffc17 	ldw	r2,-16(fp)
 1027904:	e0fffb17 	ldw	r3,-20(fp)
 1027908:	18c00d17 	ldw	r3,52(r3)
 102790c:	e13ffb17 	ldw	r4,-20(fp)
 1027910:	20c7883a 	add	r3,r4,r3
 1027914:	18c20e04 	addi	r3,r3,2104
 1027918:	18c00003 	ldbu	r3,0(r3)
 102791c:	18c03fcc 	andi	r3,r3,255
 1027920:	18c0201c 	xori	r3,r3,128
 1027924:	18ffe004 	addi	r3,r3,-128
 1027928:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 102792c:	e0bffb17 	ldw	r2,-20(fp)
 1027930:	10800d17 	ldw	r2,52(r2)
 1027934:	10800044 	addi	r2,r2,1
 1027938:	10c1ffcc 	andi	r3,r2,2047
 102793c:	e0bffb17 	ldw	r2,-20(fp)
 1027940:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1027944:	e0bffa17 	ldw	r2,-24(fp)
 1027948:	10bfffc4 	addi	r2,r2,-1
 102794c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1027950:	e0bffa17 	ldw	r2,-24(fp)
 1027954:	10000526 	beq	r2,zero,102796c <altera_avalon_jtag_uart_irq+0x1a8>
 1027958:	e0bffb17 	ldw	r2,-20(fp)
 102795c:	10c00d17 	ldw	r3,52(r2)
 1027960:	e0bffb17 	ldw	r2,-20(fp)
 1027964:	10800c17 	ldw	r2,48(r2)
 1027968:	18bfe51e 	bne	r3,r2,1027900 <__alt_data_end+0xff027900>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 102796c:	e0bffa17 	ldw	r2,-24(fp)
 1027970:	103f9d26 	beq	r2,zero,10277e8 <__alt_data_end+0xff0277e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1027974:	e0bffb17 	ldw	r2,-20(fp)
 1027978:	10c00817 	ldw	r3,32(r2)
 102797c:	00bfff44 	movi	r2,-3
 1027980:	1886703a 	and	r3,r3,r2
 1027984:	e0bffb17 	ldw	r2,-20(fp)
 1027988:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 102798c:	e0bffb17 	ldw	r2,-20(fp)
 1027990:	10800017 	ldw	r2,0(r2)
 1027994:	10800104 	addi	r2,r2,4
 1027998:	1007883a 	mov	r3,r2
 102799c:	e0bffb17 	ldw	r2,-20(fp)
 10279a0:	10800817 	ldw	r2,32(r2)
 10279a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10279a8:	e0bffc17 	ldw	r2,-16(fp)
 10279ac:	10800104 	addi	r2,r2,4
 10279b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10279b4:	003f8c06 	br	10277e8 <__alt_data_end+0xff0277e8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 10279b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 10279bc:	0001883a 	nop
 10279c0:	e037883a 	mov	sp,fp
 10279c4:	df000017 	ldw	fp,0(sp)
 10279c8:	dec00104 	addi	sp,sp,4
 10279cc:	f800283a 	ret

010279d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10279d0:	defff804 	addi	sp,sp,-32
 10279d4:	df000715 	stw	fp,28(sp)
 10279d8:	df000704 	addi	fp,sp,28
 10279dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10279e0:	e0bffb17 	ldw	r2,-20(fp)
 10279e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10279e8:	e0bff917 	ldw	r2,-28(fp)
 10279ec:	10800017 	ldw	r2,0(r2)
 10279f0:	10800104 	addi	r2,r2,4
 10279f4:	10800037 	ldwio	r2,0(r2)
 10279f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10279fc:	e0bffa17 	ldw	r2,-24(fp)
 1027a00:	1081000c 	andi	r2,r2,1024
 1027a04:	10000b26 	beq	r2,zero,1027a34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1027a08:	e0bff917 	ldw	r2,-28(fp)
 1027a0c:	10800017 	ldw	r2,0(r2)
 1027a10:	10800104 	addi	r2,r2,4
 1027a14:	1007883a 	mov	r3,r2
 1027a18:	e0bff917 	ldw	r2,-28(fp)
 1027a1c:	10800817 	ldw	r2,32(r2)
 1027a20:	10810014 	ori	r2,r2,1024
 1027a24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1027a28:	e0bff917 	ldw	r2,-28(fp)
 1027a2c:	10000915 	stw	zero,36(r2)
 1027a30:	00000a06 	br	1027a5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1027a34:	e0bff917 	ldw	r2,-28(fp)
 1027a38:	10c00917 	ldw	r3,36(r2)
 1027a3c:	00a00034 	movhi	r2,32768
 1027a40:	10bfff04 	addi	r2,r2,-4
 1027a44:	10c00536 	bltu	r2,r3,1027a5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1027a48:	e0bff917 	ldw	r2,-28(fp)
 1027a4c:	10800917 	ldw	r2,36(r2)
 1027a50:	10c00044 	addi	r3,r2,1
 1027a54:	e0bff917 	ldw	r2,-28(fp)
 1027a58:	10c00915 	stw	r3,36(r2)
 1027a5c:	d0a76117 	ldw	r2,-25212(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1027a60:	e037883a 	mov	sp,fp
 1027a64:	df000017 	ldw	fp,0(sp)
 1027a68:	dec00104 	addi	sp,sp,4
 1027a6c:	f800283a 	ret

01027a70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1027a70:	defffd04 	addi	sp,sp,-12
 1027a74:	df000215 	stw	fp,8(sp)
 1027a78:	df000204 	addi	fp,sp,8
 1027a7c:	e13ffe15 	stw	r4,-8(fp)
 1027a80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1027a84:	00000506 	br	1027a9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1027a88:	e0bfff17 	ldw	r2,-4(fp)
 1027a8c:	1090000c 	andi	r2,r2,16384
 1027a90:	10000226 	beq	r2,zero,1027a9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1027a94:	00bffd44 	movi	r2,-11
 1027a98:	00000b06 	br	1027ac8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1027a9c:	e0bffe17 	ldw	r2,-8(fp)
 1027aa0:	10c00d17 	ldw	r3,52(r2)
 1027aa4:	e0bffe17 	ldw	r2,-8(fp)
 1027aa8:	10800c17 	ldw	r2,48(r2)
 1027aac:	18800526 	beq	r3,r2,1027ac4 <altera_avalon_jtag_uart_close+0x54>
 1027ab0:	e0bffe17 	ldw	r2,-8(fp)
 1027ab4:	10c00917 	ldw	r3,36(r2)
 1027ab8:	e0bffe17 	ldw	r2,-8(fp)
 1027abc:	10800117 	ldw	r2,4(r2)
 1027ac0:	18bff136 	bltu	r3,r2,1027a88 <__alt_data_end+0xff027a88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1027ac4:	0005883a 	mov	r2,zero
}
 1027ac8:	e037883a 	mov	sp,fp
 1027acc:	df000017 	ldw	fp,0(sp)
 1027ad0:	dec00104 	addi	sp,sp,4
 1027ad4:	f800283a 	ret

01027ad8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1027ad8:	defffa04 	addi	sp,sp,-24
 1027adc:	df000515 	stw	fp,20(sp)
 1027ae0:	df000504 	addi	fp,sp,20
 1027ae4:	e13ffd15 	stw	r4,-12(fp)
 1027ae8:	e17ffe15 	stw	r5,-8(fp)
 1027aec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1027af0:	00bff9c4 	movi	r2,-25
 1027af4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1027af8:	e0bffe17 	ldw	r2,-8(fp)
 1027afc:	10da8060 	cmpeqi	r3,r2,27137
 1027b00:	1800031e 	bne	r3,zero,1027b10 <altera_avalon_jtag_uart_ioctl+0x38>
 1027b04:	109a80a0 	cmpeqi	r2,r2,27138
 1027b08:	1000181e 	bne	r2,zero,1027b6c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1027b0c:	00002906 	br	1027bb4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1027b10:	e0bffd17 	ldw	r2,-12(fp)
 1027b14:	10c00117 	ldw	r3,4(r2)
 1027b18:	00a00034 	movhi	r2,32768
 1027b1c:	10bfffc4 	addi	r2,r2,-1
 1027b20:	18802126 	beq	r3,r2,1027ba8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1027b24:	e0bfff17 	ldw	r2,-4(fp)
 1027b28:	10800017 	ldw	r2,0(r2)
 1027b2c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1027b30:	e0bffc17 	ldw	r2,-16(fp)
 1027b34:	10800090 	cmplti	r2,r2,2
 1027b38:	1000061e 	bne	r2,zero,1027b54 <altera_avalon_jtag_uart_ioctl+0x7c>
 1027b3c:	e0fffc17 	ldw	r3,-16(fp)
 1027b40:	00a00034 	movhi	r2,32768
 1027b44:	10bfffc4 	addi	r2,r2,-1
 1027b48:	18800226 	beq	r3,r2,1027b54 <altera_avalon_jtag_uart_ioctl+0x7c>
 1027b4c:	e0bffc17 	ldw	r2,-16(fp)
 1027b50:	00000206 	br	1027b5c <altera_avalon_jtag_uart_ioctl+0x84>
 1027b54:	00a00034 	movhi	r2,32768
 1027b58:	10bfff84 	addi	r2,r2,-2
 1027b5c:	e0fffd17 	ldw	r3,-12(fp)
 1027b60:	18800115 	stw	r2,4(r3)
      rc = 0;
 1027b64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1027b68:	00000f06 	br	1027ba8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1027b6c:	e0bffd17 	ldw	r2,-12(fp)
 1027b70:	10c00117 	ldw	r3,4(r2)
 1027b74:	00a00034 	movhi	r2,32768
 1027b78:	10bfffc4 	addi	r2,r2,-1
 1027b7c:	18800c26 	beq	r3,r2,1027bb0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1027b80:	e0bffd17 	ldw	r2,-12(fp)
 1027b84:	10c00917 	ldw	r3,36(r2)
 1027b88:	e0bffd17 	ldw	r2,-12(fp)
 1027b8c:	10800117 	ldw	r2,4(r2)
 1027b90:	1885803a 	cmpltu	r2,r3,r2
 1027b94:	10c03fcc 	andi	r3,r2,255
 1027b98:	e0bfff17 	ldw	r2,-4(fp)
 1027b9c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1027ba0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1027ba4:	00000206 	br	1027bb0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1027ba8:	0001883a 	nop
 1027bac:	00000106 	br	1027bb4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1027bb0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1027bb4:	e0bffb17 	ldw	r2,-20(fp)
}
 1027bb8:	e037883a 	mov	sp,fp
 1027bbc:	df000017 	ldw	fp,0(sp)
 1027bc0:	dec00104 	addi	sp,sp,4
 1027bc4:	f800283a 	ret

01027bc8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1027bc8:	defff304 	addi	sp,sp,-52
 1027bcc:	dfc00c15 	stw	ra,48(sp)
 1027bd0:	df000b15 	stw	fp,44(sp)
 1027bd4:	df000b04 	addi	fp,sp,44
 1027bd8:	e13ffc15 	stw	r4,-16(fp)
 1027bdc:	e17ffd15 	stw	r5,-12(fp)
 1027be0:	e1bffe15 	stw	r6,-8(fp)
 1027be4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1027be8:	e0bffd17 	ldw	r2,-12(fp)
 1027bec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1027bf0:	00004706 	br	1027d10 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1027bf4:	e0bffc17 	ldw	r2,-16(fp)
 1027bf8:	10800a17 	ldw	r2,40(r2)
 1027bfc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1027c00:	e0bffc17 	ldw	r2,-16(fp)
 1027c04:	10800b17 	ldw	r2,44(r2)
 1027c08:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1027c0c:	e0fff717 	ldw	r3,-36(fp)
 1027c10:	e0bff817 	ldw	r2,-32(fp)
 1027c14:	18800536 	bltu	r3,r2,1027c2c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1027c18:	e0fff717 	ldw	r3,-36(fp)
 1027c1c:	e0bff817 	ldw	r2,-32(fp)
 1027c20:	1885c83a 	sub	r2,r3,r2
 1027c24:	e0bff615 	stw	r2,-40(fp)
 1027c28:	00000406 	br	1027c3c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1027c2c:	00c20004 	movi	r3,2048
 1027c30:	e0bff817 	ldw	r2,-32(fp)
 1027c34:	1885c83a 	sub	r2,r3,r2
 1027c38:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1027c3c:	e0bff617 	ldw	r2,-40(fp)
 1027c40:	10001e26 	beq	r2,zero,1027cbc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1027c44:	e0fffe17 	ldw	r3,-8(fp)
 1027c48:	e0bff617 	ldw	r2,-40(fp)
 1027c4c:	1880022e 	bgeu	r3,r2,1027c58 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1027c50:	e0bffe17 	ldw	r2,-8(fp)
 1027c54:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1027c58:	e0bffc17 	ldw	r2,-16(fp)
 1027c5c:	10c00e04 	addi	r3,r2,56
 1027c60:	e0bff817 	ldw	r2,-32(fp)
 1027c64:	1885883a 	add	r2,r3,r2
 1027c68:	e1bff617 	ldw	r6,-40(fp)
 1027c6c:	100b883a 	mov	r5,r2
 1027c70:	e13ff517 	ldw	r4,-44(fp)
 1027c74:	10157f40 	call	10157f4 <memcpy>
      ptr   += n;
 1027c78:	e0fff517 	ldw	r3,-44(fp)
 1027c7c:	e0bff617 	ldw	r2,-40(fp)
 1027c80:	1885883a 	add	r2,r3,r2
 1027c84:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1027c88:	e0fffe17 	ldw	r3,-8(fp)
 1027c8c:	e0bff617 	ldw	r2,-40(fp)
 1027c90:	1885c83a 	sub	r2,r3,r2
 1027c94:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1027c98:	e0fff817 	ldw	r3,-32(fp)
 1027c9c:	e0bff617 	ldw	r2,-40(fp)
 1027ca0:	1885883a 	add	r2,r3,r2
 1027ca4:	10c1ffcc 	andi	r3,r2,2047
 1027ca8:	e0bffc17 	ldw	r2,-16(fp)
 1027cac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1027cb0:	e0bffe17 	ldw	r2,-8(fp)
 1027cb4:	00bfcf16 	blt	zero,r2,1027bf4 <__alt_data_end+0xff027bf4>
 1027cb8:	00000106 	br	1027cc0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1027cbc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1027cc0:	e0fff517 	ldw	r3,-44(fp)
 1027cc4:	e0bffd17 	ldw	r2,-12(fp)
 1027cc8:	1880141e 	bne	r3,r2,1027d1c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1027ccc:	e0bfff17 	ldw	r2,-4(fp)
 1027cd0:	1090000c 	andi	r2,r2,16384
 1027cd4:	1000131e 	bne	r2,zero,1027d24 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1027cd8:	0001883a 	nop
 1027cdc:	e0bffc17 	ldw	r2,-16(fp)
 1027ce0:	10c00a17 	ldw	r3,40(r2)
 1027ce4:	e0bff717 	ldw	r2,-36(fp)
 1027ce8:	1880051e 	bne	r3,r2,1027d00 <altera_avalon_jtag_uart_read+0x138>
 1027cec:	e0bffc17 	ldw	r2,-16(fp)
 1027cf0:	10c00917 	ldw	r3,36(r2)
 1027cf4:	e0bffc17 	ldw	r2,-16(fp)
 1027cf8:	10800117 	ldw	r2,4(r2)
 1027cfc:	18bff736 	bltu	r3,r2,1027cdc <__alt_data_end+0xff027cdc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1027d00:	e0bffc17 	ldw	r2,-16(fp)
 1027d04:	10c00a17 	ldw	r3,40(r2)
 1027d08:	e0bff717 	ldw	r2,-36(fp)
 1027d0c:	18800726 	beq	r3,r2,1027d2c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1027d10:	e0bffe17 	ldw	r2,-8(fp)
 1027d14:	00bfb716 	blt	zero,r2,1027bf4 <__alt_data_end+0xff027bf4>
 1027d18:	00000506 	br	1027d30 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1027d1c:	0001883a 	nop
 1027d20:	00000306 	br	1027d30 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1027d24:	0001883a 	nop
 1027d28:	00000106 	br	1027d30 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1027d2c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1027d30:	e0fff517 	ldw	r3,-44(fp)
 1027d34:	e0bffd17 	ldw	r2,-12(fp)
 1027d38:	18801826 	beq	r3,r2,1027d9c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027d3c:	0005303a 	rdctl	r2,status
 1027d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1027d44:	e0fffb17 	ldw	r3,-20(fp)
 1027d48:	00bfff84 	movi	r2,-2
 1027d4c:	1884703a 	and	r2,r3,r2
 1027d50:	1001703a 	wrctl	status,r2
  
  return context;
 1027d54:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1027d58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1027d5c:	e0bffc17 	ldw	r2,-16(fp)
 1027d60:	10800817 	ldw	r2,32(r2)
 1027d64:	10c00054 	ori	r3,r2,1
 1027d68:	e0bffc17 	ldw	r2,-16(fp)
 1027d6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1027d70:	e0bffc17 	ldw	r2,-16(fp)
 1027d74:	10800017 	ldw	r2,0(r2)
 1027d78:	10800104 	addi	r2,r2,4
 1027d7c:	1007883a 	mov	r3,r2
 1027d80:	e0bffc17 	ldw	r2,-16(fp)
 1027d84:	10800817 	ldw	r2,32(r2)
 1027d88:	18800035 	stwio	r2,0(r3)
 1027d8c:	e0bffa17 	ldw	r2,-24(fp)
 1027d90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1027d94:	e0bff917 	ldw	r2,-28(fp)
 1027d98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1027d9c:	e0fff517 	ldw	r3,-44(fp)
 1027da0:	e0bffd17 	ldw	r2,-12(fp)
 1027da4:	18800426 	beq	r3,r2,1027db8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1027da8:	e0fff517 	ldw	r3,-44(fp)
 1027dac:	e0bffd17 	ldw	r2,-12(fp)
 1027db0:	1885c83a 	sub	r2,r3,r2
 1027db4:	00000606 	br	1027dd0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1027db8:	e0bfff17 	ldw	r2,-4(fp)
 1027dbc:	1090000c 	andi	r2,r2,16384
 1027dc0:	10000226 	beq	r2,zero,1027dcc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1027dc4:	00bffd44 	movi	r2,-11
 1027dc8:	00000106 	br	1027dd0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1027dcc:	00bffec4 	movi	r2,-5
}
 1027dd0:	e037883a 	mov	sp,fp
 1027dd4:	dfc00117 	ldw	ra,4(sp)
 1027dd8:	df000017 	ldw	fp,0(sp)
 1027ddc:	dec00204 	addi	sp,sp,8
 1027de0:	f800283a 	ret

01027de4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1027de4:	defff304 	addi	sp,sp,-52
 1027de8:	dfc00c15 	stw	ra,48(sp)
 1027dec:	df000b15 	stw	fp,44(sp)
 1027df0:	df000b04 	addi	fp,sp,44
 1027df4:	e13ffc15 	stw	r4,-16(fp)
 1027df8:	e17ffd15 	stw	r5,-12(fp)
 1027dfc:	e1bffe15 	stw	r6,-8(fp)
 1027e00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1027e04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1027e08:	e0bffd17 	ldw	r2,-12(fp)
 1027e0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1027e10:	00003706 	br	1027ef0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1027e14:	e0bffc17 	ldw	r2,-16(fp)
 1027e18:	10800c17 	ldw	r2,48(r2)
 1027e1c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1027e20:	e0bffc17 	ldw	r2,-16(fp)
 1027e24:	10800d17 	ldw	r2,52(r2)
 1027e28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1027e2c:	e0fff917 	ldw	r3,-28(fp)
 1027e30:	e0bff517 	ldw	r2,-44(fp)
 1027e34:	1880062e 	bgeu	r3,r2,1027e50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1027e38:	e0fff517 	ldw	r3,-44(fp)
 1027e3c:	e0bff917 	ldw	r2,-28(fp)
 1027e40:	1885c83a 	sub	r2,r3,r2
 1027e44:	10bfffc4 	addi	r2,r2,-1
 1027e48:	e0bff615 	stw	r2,-40(fp)
 1027e4c:	00000b06 	br	1027e7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1027e50:	e0bff517 	ldw	r2,-44(fp)
 1027e54:	10000526 	beq	r2,zero,1027e6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1027e58:	00c20004 	movi	r3,2048
 1027e5c:	e0bff917 	ldw	r2,-28(fp)
 1027e60:	1885c83a 	sub	r2,r3,r2
 1027e64:	e0bff615 	stw	r2,-40(fp)
 1027e68:	00000406 	br	1027e7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1027e6c:	00c1ffc4 	movi	r3,2047
 1027e70:	e0bff917 	ldw	r2,-28(fp)
 1027e74:	1885c83a 	sub	r2,r3,r2
 1027e78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1027e7c:	e0bff617 	ldw	r2,-40(fp)
 1027e80:	10001e26 	beq	r2,zero,1027efc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1027e84:	e0fffe17 	ldw	r3,-8(fp)
 1027e88:	e0bff617 	ldw	r2,-40(fp)
 1027e8c:	1880022e 	bgeu	r3,r2,1027e98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1027e90:	e0bffe17 	ldw	r2,-8(fp)
 1027e94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1027e98:	e0bffc17 	ldw	r2,-16(fp)
 1027e9c:	10c20e04 	addi	r3,r2,2104
 1027ea0:	e0bff917 	ldw	r2,-28(fp)
 1027ea4:	1885883a 	add	r2,r3,r2
 1027ea8:	e1bff617 	ldw	r6,-40(fp)
 1027eac:	e17ffd17 	ldw	r5,-12(fp)
 1027eb0:	1009883a 	mov	r4,r2
 1027eb4:	10157f40 	call	10157f4 <memcpy>
      ptr   += n;
 1027eb8:	e0fffd17 	ldw	r3,-12(fp)
 1027ebc:	e0bff617 	ldw	r2,-40(fp)
 1027ec0:	1885883a 	add	r2,r3,r2
 1027ec4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1027ec8:	e0fffe17 	ldw	r3,-8(fp)
 1027ecc:	e0bff617 	ldw	r2,-40(fp)
 1027ed0:	1885c83a 	sub	r2,r3,r2
 1027ed4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1027ed8:	e0fff917 	ldw	r3,-28(fp)
 1027edc:	e0bff617 	ldw	r2,-40(fp)
 1027ee0:	1885883a 	add	r2,r3,r2
 1027ee4:	10c1ffcc 	andi	r3,r2,2047
 1027ee8:	e0bffc17 	ldw	r2,-16(fp)
 1027eec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1027ef0:	e0bffe17 	ldw	r2,-8(fp)
 1027ef4:	00bfc716 	blt	zero,r2,1027e14 <__alt_data_end+0xff027e14>
 1027ef8:	00000106 	br	1027f00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1027efc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1027f00:	0005303a 	rdctl	r2,status
 1027f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1027f08:	e0fffb17 	ldw	r3,-20(fp)
 1027f0c:	00bfff84 	movi	r2,-2
 1027f10:	1884703a 	and	r2,r3,r2
 1027f14:	1001703a 	wrctl	status,r2
  
  return context;
 1027f18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1027f1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1027f20:	e0bffc17 	ldw	r2,-16(fp)
 1027f24:	10800817 	ldw	r2,32(r2)
 1027f28:	10c00094 	ori	r3,r2,2
 1027f2c:	e0bffc17 	ldw	r2,-16(fp)
 1027f30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1027f34:	e0bffc17 	ldw	r2,-16(fp)
 1027f38:	10800017 	ldw	r2,0(r2)
 1027f3c:	10800104 	addi	r2,r2,4
 1027f40:	1007883a 	mov	r3,r2
 1027f44:	e0bffc17 	ldw	r2,-16(fp)
 1027f48:	10800817 	ldw	r2,32(r2)
 1027f4c:	18800035 	stwio	r2,0(r3)
 1027f50:	e0bffa17 	ldw	r2,-24(fp)
 1027f54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1027f58:	e0bff817 	ldw	r2,-32(fp)
 1027f5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1027f60:	e0bffe17 	ldw	r2,-8(fp)
 1027f64:	0080100e 	bge	zero,r2,1027fa8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1027f68:	e0bfff17 	ldw	r2,-4(fp)
 1027f6c:	1090000c 	andi	r2,r2,16384
 1027f70:	1000101e 	bne	r2,zero,1027fb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1027f74:	0001883a 	nop
 1027f78:	e0bffc17 	ldw	r2,-16(fp)
 1027f7c:	10c00d17 	ldw	r3,52(r2)
 1027f80:	e0bff517 	ldw	r2,-44(fp)
 1027f84:	1880051e 	bne	r3,r2,1027f9c <altera_avalon_jtag_uart_write+0x1b8>
 1027f88:	e0bffc17 	ldw	r2,-16(fp)
 1027f8c:	10c00917 	ldw	r3,36(r2)
 1027f90:	e0bffc17 	ldw	r2,-16(fp)
 1027f94:	10800117 	ldw	r2,4(r2)
 1027f98:	18bff736 	bltu	r3,r2,1027f78 <__alt_data_end+0xff027f78>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1027f9c:	e0bffc17 	ldw	r2,-16(fp)
 1027fa0:	10800917 	ldw	r2,36(r2)
 1027fa4:	1000051e 	bne	r2,zero,1027fbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1027fa8:	e0bffe17 	ldw	r2,-8(fp)
 1027fac:	00bfd016 	blt	zero,r2,1027ef0 <__alt_data_end+0xff027ef0>
 1027fb0:	00000306 	br	1027fc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1027fb4:	0001883a 	nop
 1027fb8:	00000106 	br	1027fc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1027fbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1027fc0:	e0fffd17 	ldw	r3,-12(fp)
 1027fc4:	e0bff717 	ldw	r2,-36(fp)
 1027fc8:	18800426 	beq	r3,r2,1027fdc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1027fcc:	e0fffd17 	ldw	r3,-12(fp)
 1027fd0:	e0bff717 	ldw	r2,-36(fp)
 1027fd4:	1885c83a 	sub	r2,r3,r2
 1027fd8:	00000606 	br	1027ff4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1027fdc:	e0bfff17 	ldw	r2,-4(fp)
 1027fe0:	1090000c 	andi	r2,r2,16384
 1027fe4:	10000226 	beq	r2,zero,1027ff0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1027fe8:	00bffd44 	movi	r2,-11
 1027fec:	00000106 	br	1027ff4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1027ff0:	00bffec4 	movi	r2,-5
}
 1027ff4:	e037883a 	mov	sp,fp
 1027ff8:	dfc00117 	ldw	ra,4(sp)
 1027ffc:	df000017 	ldw	fp,0(sp)
 1028000:	dec00204 	addi	sp,sp,8
 1028004:	f800283a 	ret

01028008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1028008:	defffe04 	addi	sp,sp,-8
 102800c:	dfc00115 	stw	ra,4(sp)
 1028010:	df000015 	stw	fp,0(sp)
 1028014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1028018:	d0a01517 	ldw	r2,-32684(gp)
 102801c:	10000326 	beq	r2,zero,102802c <alt_get_errno+0x24>
 1028020:	d0a01517 	ldw	r2,-32684(gp)
 1028024:	103ee83a 	callr	r2
 1028028:	00000106 	br	1028030 <alt_get_errno+0x28>
 102802c:	d0a75b04 	addi	r2,gp,-25236
}
 1028030:	e037883a 	mov	sp,fp
 1028034:	dfc00117 	ldw	ra,4(sp)
 1028038:	df000017 	ldw	fp,0(sp)
 102803c:	dec00204 	addi	sp,sp,8
 1028040:	f800283a 	ret

01028044 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1028044:	defff904 	addi	sp,sp,-28
 1028048:	df000615 	stw	fp,24(sp)
 102804c:	df000604 	addi	fp,sp,24
 1028050:	e13ffe15 	stw	r4,-8(fp)
 1028054:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 1028058:	00bfffc4 	movi	r2,-1
 102805c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 1028060:	0005317a 	rdctl	r2,cpuid
 1028064:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 1028068:	e0bffb17 	ldw	r2,-20(fp)
 102806c:	1006943a 	slli	r3,r2,16
 1028070:	e0bfff17 	ldw	r2,-4(fp)
 1028074:	1884b03a 	or	r2,r3,r2
 1028078:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 102807c:	e0bffe17 	ldw	r2,-8(fp)
 1028080:	10800317 	ldw	r2,12(r2)
 1028084:	e0fffc17 	ldw	r3,-16(fp)
 1028088:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 102808c:	e0bffe17 	ldw	r2,-8(fp)
 1028090:	10800317 	ldw	r2,12(r2)
 1028094:	10800037 	ldwio	r2,0(r2)
 1028098:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 102809c:	e0fffd17 	ldw	r3,-12(fp)
 10280a0:	e0bffc17 	ldw	r2,-16(fp)
 10280a4:	1880011e 	bne	r3,r2,10280ac <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 10280a8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 10280ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10280b0:	e037883a 	mov	sp,fp
 10280b4:	df000017 	ldw	fp,0(sp)
 10280b8:	dec00104 	addi	sp,sp,4
 10280bc:	f800283a 	ret

010280c0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 10280c0:	defffc04 	addi	sp,sp,-16
 10280c4:	dfc00315 	stw	ra,12(sp)
 10280c8:	df000215 	stw	fp,8(sp)
 10280cc:	df000204 	addi	fp,sp,8
 10280d0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 10280d4:	d1601804 	addi	r5,gp,-32672
 10280d8:	e13fff17 	ldw	r4,-4(fp)
 10280dc:	10287ec0 	call	10287ec <alt_find_dev>
 10280e0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 10280e4:	e0bffe17 	ldw	r2,-8(fp)
 10280e8:	1000041e 	bne	r2,zero,10280fc <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 10280ec:	10280080 	call	1028008 <alt_get_errno>
 10280f0:	1007883a 	mov	r3,r2
 10280f4:	008004c4 	movi	r2,19
 10280f8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 10280fc:	e0bffe17 	ldw	r2,-8(fp)
}
 1028100:	e037883a 	mov	sp,fp
 1028104:	dfc00117 	ldw	ra,4(sp)
 1028108:	df000017 	ldw	fp,0(sp)
 102810c:	dec00204 	addi	sp,sp,8
 1028110:	f800283a 	ret

01028114 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 1028114:	defffe04 	addi	sp,sp,-8
 1028118:	df000115 	stw	fp,4(sp)
 102811c:	df000104 	addi	fp,sp,4
 1028120:	e13fff15 	stw	r4,-4(fp)
  return;
 1028124:	0001883a 	nop
}
 1028128:	e037883a 	mov	sp,fp
 102812c:	df000017 	ldw	fp,0(sp)
 1028130:	dec00104 	addi	sp,sp,4
 1028134:	f800283a 	ret

01028138 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 1028138:	defffc04 	addi	sp,sp,-16
 102813c:	dfc00315 	stw	ra,12(sp)
 1028140:	df000215 	stw	fp,8(sp)
 1028144:	df000204 	addi	fp,sp,8
 1028148:	e13ffe15 	stw	r4,-8(fp)
 102814c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 1028150:	0001883a 	nop
 1028154:	e17fff17 	ldw	r5,-4(fp)
 1028158:	e13ffe17 	ldw	r4,-8(fp)
 102815c:	10280440 	call	1028044 <alt_mutex_trylock>
 1028160:	103ffc1e 	bne	r2,zero,1028154 <__alt_data_end+0xff028154>
}
 1028164:	0001883a 	nop
 1028168:	e037883a 	mov	sp,fp
 102816c:	dfc00117 	ldw	ra,4(sp)
 1028170:	df000017 	ldw	fp,0(sp)
 1028174:	dec00204 	addi	sp,sp,8
 1028178:	f800283a 	ret

0102817c <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 102817c:	defffa04 	addi	sp,sp,-24
 1028180:	dfc00515 	stw	ra,20(sp)
 1028184:	df000415 	stw	fp,16(sp)
 1028188:	df000404 	addi	fp,sp,16
 102818c:	e13ffd15 	stw	r4,-12(fp)
 1028190:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 1028194:	e17ffe17 	ldw	r5,-8(fp)
 1028198:	e13ffd17 	ldw	r4,-12(fp)
 102819c:	10280440 	call	1028044 <alt_mutex_trylock>
 10281a0:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 10281a4:	e0bffc17 	ldw	r2,-16(fp)
}
 10281a8:	e037883a 	mov	sp,fp
 10281ac:	dfc00117 	ldw	ra,4(sp)
 10281b0:	df000017 	ldw	fp,0(sp)
 10281b4:	dec00204 	addi	sp,sp,8
 10281b8:	f800283a 	ret

010281bc <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 10281bc:	defffd04 	addi	sp,sp,-12
 10281c0:	df000215 	stw	fp,8(sp)
 10281c4:	df000204 	addi	fp,sp,8
 10281c8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 10281cc:	0005317a 	rdctl	r2,cpuid
 10281d0:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 10281d4:	e0bfff17 	ldw	r2,-4(fp)
 10281d8:	10800317 	ldw	r2,12(r2)
 10281dc:	10800104 	addi	r2,r2,4
 10281e0:	00c00044 	movi	r3,1
 10281e4:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 10281e8:	e0bfff17 	ldw	r2,-4(fp)
 10281ec:	10800317 	ldw	r2,12(r2)
 10281f0:	e0fffe17 	ldw	r3,-8(fp)
 10281f4:	1806943a 	slli	r3,r3,16
 10281f8:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 10281fc:	0001883a 	nop
 1028200:	e037883a 	mov	sp,fp
 1028204:	df000017 	ldw	fp,0(sp)
 1028208:	dec00104 	addi	sp,sp,4
 102820c:	f800283a 	ret

01028210 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 1028210:	defff904 	addi	sp,sp,-28
 1028214:	df000615 	stw	fp,24(sp)
 1028218:	df000604 	addi	fp,sp,24
 102821c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 1028220:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 1028224:	0005317a 	rdctl	r2,cpuid
 1028228:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 102822c:	e0bfff17 	ldw	r2,-4(fp)
 1028230:	10800317 	ldw	r2,12(r2)
 1028234:	10800037 	ldwio	r2,0(r2)
 1028238:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 102823c:	e0bffc17 	ldw	r2,-16(fp)
 1028240:	1004d43a 	srli	r2,r2,16
 1028244:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 1028248:	e0fffd17 	ldw	r3,-12(fp)
 102824c:	e0bffb17 	ldw	r2,-20(fp)
 1028250:	1880071e 	bne	r3,r2,1028270 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 1028254:	e0bffc17 	ldw	r2,-16(fp)
 1028258:	10bfffcc 	andi	r2,r2,65535
 102825c:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 1028260:	e0bffe17 	ldw	r2,-8(fp)
 1028264:	10000226 	beq	r2,zero,1028270 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 1028268:	00800044 	movi	r2,1
 102826c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 1028270:	e0bffa17 	ldw	r2,-24(fp)
}
 1028274:	e037883a 	mov	sp,fp
 1028278:	df000017 	ldw	fp,0(sp)
 102827c:	dec00104 	addi	sp,sp,4
 1028280:	f800283a 	ret

01028284 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 1028284:	defffc04 	addi	sp,sp,-16
 1028288:	df000315 	stw	fp,12(sp)
 102828c:	df000304 	addi	fp,sp,12
 1028290:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 1028294:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 1028298:	e0bfff17 	ldw	r2,-4(fp)
 102829c:	10800317 	ldw	r2,12(r2)
 10282a0:	10800104 	addi	r2,r2,4
 10282a4:	10800037 	ldwio	r2,0(r2)
 10282a8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 10282ac:	e0bffe17 	ldw	r2,-8(fp)
 10282b0:	1080004c 	andi	r2,r2,1
 10282b4:	10000226 	beq	r2,zero,10282c0 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 10282b8:	00800044 	movi	r2,1
 10282bc:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 10282c0:	e0bffd17 	ldw	r2,-12(fp)
}
 10282c4:	e037883a 	mov	sp,fp
 10282c8:	df000017 	ldw	fp,0(sp)
 10282cc:	dec00104 	addi	sp,sp,4
 10282d0:	f800283a 	ret

010282d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10282d4:	defffa04 	addi	sp,sp,-24
 10282d8:	dfc00515 	stw	ra,20(sp)
 10282dc:	df000415 	stw	fp,16(sp)
 10282e0:	df000404 	addi	fp,sp,16
 10282e4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10282e8:	0007883a 	mov	r3,zero
 10282ec:	e0bfff17 	ldw	r2,-4(fp)
 10282f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10282f4:	e0bfff17 	ldw	r2,-4(fp)
 10282f8:	10800104 	addi	r2,r2,4
 10282fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1028300:	0005303a 	rdctl	r2,status
 1028304:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1028308:	e0fffd17 	ldw	r3,-12(fp)
 102830c:	00bfff84 	movi	r2,-2
 1028310:	1884703a 	and	r2,r3,r2
 1028314:	1001703a 	wrctl	status,r2
  
  return context;
 1028318:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 102831c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1028320:	1028d7c0 	call	1028d7c <alt_tick>
 1028324:	e0bffc17 	ldw	r2,-16(fp)
 1028328:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 102832c:	e0bffe17 	ldw	r2,-8(fp)
 1028330:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1028334:	0001883a 	nop
 1028338:	e037883a 	mov	sp,fp
 102833c:	dfc00117 	ldw	ra,4(sp)
 1028340:	df000017 	ldw	fp,0(sp)
 1028344:	dec00204 	addi	sp,sp,8
 1028348:	f800283a 	ret

0102834c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 102834c:	defff804 	addi	sp,sp,-32
 1028350:	dfc00715 	stw	ra,28(sp)
 1028354:	df000615 	stw	fp,24(sp)
 1028358:	df000604 	addi	fp,sp,24
 102835c:	e13ffc15 	stw	r4,-16(fp)
 1028360:	e17ffd15 	stw	r5,-12(fp)
 1028364:	e1bffe15 	stw	r6,-8(fp)
 1028368:	e1ffff15 	stw	r7,-4(fp)
 102836c:	e0bfff17 	ldw	r2,-4(fp)
 1028370:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1028374:	d0a76117 	ldw	r2,-25212(gp)
 1028378:	1000021e 	bne	r2,zero,1028384 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 102837c:	e0bffb17 	ldw	r2,-20(fp)
 1028380:	d0a76115 	stw	r2,-25212(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1028384:	e0bffc17 	ldw	r2,-16(fp)
 1028388:	10800104 	addi	r2,r2,4
 102838c:	00c001c4 	movi	r3,7
 1028390:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1028394:	d8000015 	stw	zero,0(sp)
 1028398:	e1fffc17 	ldw	r7,-16(fp)
 102839c:	018040f4 	movhi	r6,259
 10283a0:	31a0b504 	addi	r6,r6,-32044
 10283a4:	e17ffe17 	ldw	r5,-8(fp)
 10283a8:	e13ffd17 	ldw	r4,-12(fp)
 10283ac:	102675c0 	call	102675c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10283b0:	0001883a 	nop
 10283b4:	e037883a 	mov	sp,fp
 10283b8:	dfc00117 	ldw	ra,4(sp)
 10283bc:	df000017 	ldw	fp,0(sp)
 10283c0:	dec00204 	addi	sp,sp,8
 10283c4:	f800283a 	ret

010283c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10283c8:	defff504 	addi	sp,sp,-44
 10283cc:	df000a15 	stw	fp,40(sp)
 10283d0:	df000a04 	addi	fp,sp,40
 10283d4:	e13ffc15 	stw	r4,-16(fp)
 10283d8:	e17ffd15 	stw	r5,-12(fp)
 10283dc:	e1bffe15 	stw	r6,-8(fp)
 10283e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10283e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10283e8:	d0a76117 	ldw	r2,-25212(gp)
  
  if (alt_ticks_per_second ())
 10283ec:	10003c26 	beq	r2,zero,10284e0 <alt_alarm_start+0x118>
  {
    if (alarm)
 10283f0:	e0bffc17 	ldw	r2,-16(fp)
 10283f4:	10003826 	beq	r2,zero,10284d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 10283f8:	e0bffc17 	ldw	r2,-16(fp)
 10283fc:	e0fffe17 	ldw	r3,-8(fp)
 1028400:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1028404:	e0bffc17 	ldw	r2,-16(fp)
 1028408:	e0ffff17 	ldw	r3,-4(fp)
 102840c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1028410:	0005303a 	rdctl	r2,status
 1028414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1028418:	e0fff917 	ldw	r3,-28(fp)
 102841c:	00bfff84 	movi	r2,-2
 1028420:	1884703a 	and	r2,r3,r2
 1028424:	1001703a 	wrctl	status,r2
  
  return context;
 1028428:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 102842c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1028430:	d0a76217 	ldw	r2,-25208(gp)
      
      current_nticks = alt_nticks();
 1028434:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1028438:	e0fffd17 	ldw	r3,-12(fp)
 102843c:	e0bff617 	ldw	r2,-40(fp)
 1028440:	1885883a 	add	r2,r3,r2
 1028444:	10c00044 	addi	r3,r2,1
 1028448:	e0bffc17 	ldw	r2,-16(fp)
 102844c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1028450:	e0bffc17 	ldw	r2,-16(fp)
 1028454:	10c00217 	ldw	r3,8(r2)
 1028458:	e0bff617 	ldw	r2,-40(fp)
 102845c:	1880042e 	bgeu	r3,r2,1028470 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1028460:	e0bffc17 	ldw	r2,-16(fp)
 1028464:	00c00044 	movi	r3,1
 1028468:	10c00405 	stb	r3,16(r2)
 102846c:	00000206 	br	1028478 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1028470:	e0bffc17 	ldw	r2,-16(fp)
 1028474:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1028478:	e0bffc17 	ldw	r2,-16(fp)
 102847c:	d0e01a04 	addi	r3,gp,-32664
 1028480:	e0fffa15 	stw	r3,-24(fp)
 1028484:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1028488:	e0bffb17 	ldw	r2,-20(fp)
 102848c:	e0fffa17 	ldw	r3,-24(fp)
 1028490:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1028494:	e0bffa17 	ldw	r2,-24(fp)
 1028498:	10c00017 	ldw	r3,0(r2)
 102849c:	e0bffb17 	ldw	r2,-20(fp)
 10284a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10284a4:	e0bffa17 	ldw	r2,-24(fp)
 10284a8:	10800017 	ldw	r2,0(r2)
 10284ac:	e0fffb17 	ldw	r3,-20(fp)
 10284b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10284b4:	e0bffa17 	ldw	r2,-24(fp)
 10284b8:	e0fffb17 	ldw	r3,-20(fp)
 10284bc:	10c00015 	stw	r3,0(r2)
 10284c0:	e0bff817 	ldw	r2,-32(fp)
 10284c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10284c8:	e0bff717 	ldw	r2,-36(fp)
 10284cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10284d0:	0005883a 	mov	r2,zero
 10284d4:	00000306 	br	10284e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 10284d8:	00bffa84 	movi	r2,-22
 10284dc:	00000106 	br	10284e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 10284e0:	00bfde84 	movi	r2,-134
  }
}
 10284e4:	e037883a 	mov	sp,fp
 10284e8:	df000017 	ldw	fp,0(sp)
 10284ec:	dec00104 	addi	sp,sp,4
 10284f0:	f800283a 	ret

010284f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10284f4:	defffa04 	addi	sp,sp,-24
 10284f8:	dfc00515 	stw	ra,20(sp)
 10284fc:	df000415 	stw	fp,16(sp)
 1028500:	df000404 	addi	fp,sp,16
 1028504:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1028508:	008000c4 	movi	r2,3
 102850c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1028510:	e0fffd17 	ldw	r3,-12(fp)
 1028514:	008003f4 	movhi	r2,15
 1028518:	10909004 	addi	r2,r2,16960
 102851c:	1885383a 	mul	r2,r3,r2
 1028520:	100b883a 	mov	r5,r2
 1028524:	0100bef4 	movhi	r4,763
 1028528:	213c2004 	addi	r4,r4,-3968
 102852c:	1023d000 	call	1023d00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1028530:	100b883a 	mov	r5,r2
 1028534:	01200034 	movhi	r4,32768
 1028538:	213fffc4 	addi	r4,r4,-1
 102853c:	1023d000 	call	1023d00 <__udivsi3>
 1028540:	100b883a 	mov	r5,r2
 1028544:	e13fff17 	ldw	r4,-4(fp)
 1028548:	1023d000 	call	1023d00 <__udivsi3>
 102854c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1028550:	e0bffe17 	ldw	r2,-8(fp)
 1028554:	10002a26 	beq	r2,zero,1028600 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1028558:	e03ffc15 	stw	zero,-16(fp)
 102855c:	00001706 	br	10285bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1028560:	00a00034 	movhi	r2,32768
 1028564:	10bfffc4 	addi	r2,r2,-1
 1028568:	10bfffc4 	addi	r2,r2,-1
 102856c:	103ffe1e 	bne	r2,zero,1028568 <__alt_data_end+0xff028568>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1028570:	e0fffd17 	ldw	r3,-12(fp)
 1028574:	008003f4 	movhi	r2,15
 1028578:	10909004 	addi	r2,r2,16960
 102857c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1028580:	100b883a 	mov	r5,r2
 1028584:	0100bef4 	movhi	r4,763
 1028588:	213c2004 	addi	r4,r4,-3968
 102858c:	1023d000 	call	1023d00 <__udivsi3>
 1028590:	100b883a 	mov	r5,r2
 1028594:	01200034 	movhi	r4,32768
 1028598:	213fffc4 	addi	r4,r4,-1
 102859c:	1023d000 	call	1023d00 <__udivsi3>
 10285a0:	1007883a 	mov	r3,r2
 10285a4:	e0bfff17 	ldw	r2,-4(fp)
 10285a8:	10c5c83a 	sub	r2,r2,r3
 10285ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10285b0:	e0bffc17 	ldw	r2,-16(fp)
 10285b4:	10800044 	addi	r2,r2,1
 10285b8:	e0bffc15 	stw	r2,-16(fp)
 10285bc:	e0fffc17 	ldw	r3,-16(fp)
 10285c0:	e0bffe17 	ldw	r2,-8(fp)
 10285c4:	18bfe616 	blt	r3,r2,1028560 <__alt_data_end+0xff028560>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10285c8:	e0fffd17 	ldw	r3,-12(fp)
 10285cc:	008003f4 	movhi	r2,15
 10285d0:	10909004 	addi	r2,r2,16960
 10285d4:	1885383a 	mul	r2,r3,r2
 10285d8:	100b883a 	mov	r5,r2
 10285dc:	0100bef4 	movhi	r4,763
 10285e0:	213c2004 	addi	r4,r4,-3968
 10285e4:	1023d000 	call	1023d00 <__udivsi3>
 10285e8:	1007883a 	mov	r3,r2
 10285ec:	e0bfff17 	ldw	r2,-4(fp)
 10285f0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10285f4:	10bfffc4 	addi	r2,r2,-1
 10285f8:	103ffe1e 	bne	r2,zero,10285f4 <__alt_data_end+0xff0285f4>
 10285fc:	00000d06 	br	1028634 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1028600:	e0fffd17 	ldw	r3,-12(fp)
 1028604:	008003f4 	movhi	r2,15
 1028608:	10909004 	addi	r2,r2,16960
 102860c:	1885383a 	mul	r2,r3,r2
 1028610:	100b883a 	mov	r5,r2
 1028614:	0100bef4 	movhi	r4,763
 1028618:	213c2004 	addi	r4,r4,-3968
 102861c:	1023d000 	call	1023d00 <__udivsi3>
 1028620:	1007883a 	mov	r3,r2
 1028624:	e0bfff17 	ldw	r2,-4(fp)
 1028628:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 102862c:	10bfffc4 	addi	r2,r2,-1
 1028630:	00bffe16 	blt	zero,r2,102862c <__alt_data_end+0xff02862c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1028634:	0005883a 	mov	r2,zero
}
 1028638:	e037883a 	mov	sp,fp
 102863c:	dfc00117 	ldw	ra,4(sp)
 1028640:	df000017 	ldw	fp,0(sp)
 1028644:	dec00204 	addi	sp,sp,8
 1028648:	f800283a 	ret

0102864c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 102864c:	defffe04 	addi	sp,sp,-8
 1028650:	dfc00115 	stw	ra,4(sp)
 1028654:	df000015 	stw	fp,0(sp)
 1028658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 102865c:	d0a01517 	ldw	r2,-32684(gp)
 1028660:	10000326 	beq	r2,zero,1028670 <alt_get_errno+0x24>
 1028664:	d0a01517 	ldw	r2,-32684(gp)
 1028668:	103ee83a 	callr	r2
 102866c:	00000106 	br	1028674 <alt_get_errno+0x28>
 1028670:	d0a75b04 	addi	r2,gp,-25236
}
 1028674:	e037883a 	mov	sp,fp
 1028678:	dfc00117 	ldw	ra,4(sp)
 102867c:	df000017 	ldw	fp,0(sp)
 1028680:	dec00204 	addi	sp,sp,8
 1028684:	f800283a 	ret

01028688 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1028688:	defffa04 	addi	sp,sp,-24
 102868c:	dfc00515 	stw	ra,20(sp)
 1028690:	df000415 	stw	fp,16(sp)
 1028694:	df000404 	addi	fp,sp,16
 1028698:	e13ffe15 	stw	r4,-8(fp)
 102869c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10286a0:	e0bffe17 	ldw	r2,-8(fp)
 10286a4:	10000326 	beq	r2,zero,10286b4 <alt_dev_llist_insert+0x2c>
 10286a8:	e0bffe17 	ldw	r2,-8(fp)
 10286ac:	10800217 	ldw	r2,8(r2)
 10286b0:	1000061e 	bne	r2,zero,10286cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 10286b4:	102864c0 	call	102864c <alt_get_errno>
 10286b8:	1007883a 	mov	r3,r2
 10286bc:	00800584 	movi	r2,22
 10286c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10286c4:	00bffa84 	movi	r2,-22
 10286c8:	00001306 	br	1028718 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10286cc:	e0bffe17 	ldw	r2,-8(fp)
 10286d0:	e0ffff17 	ldw	r3,-4(fp)
 10286d4:	e0fffc15 	stw	r3,-16(fp)
 10286d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10286dc:	e0bffd17 	ldw	r2,-12(fp)
 10286e0:	e0fffc17 	ldw	r3,-16(fp)
 10286e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10286e8:	e0bffc17 	ldw	r2,-16(fp)
 10286ec:	10c00017 	ldw	r3,0(r2)
 10286f0:	e0bffd17 	ldw	r2,-12(fp)
 10286f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10286f8:	e0bffc17 	ldw	r2,-16(fp)
 10286fc:	10800017 	ldw	r2,0(r2)
 1028700:	e0fffd17 	ldw	r3,-12(fp)
 1028704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1028708:	e0bffc17 	ldw	r2,-16(fp)
 102870c:	e0fffd17 	ldw	r3,-12(fp)
 1028710:	10c00015 	stw	r3,0(r2)

  return 0;  
 1028714:	0005883a 	mov	r2,zero
}
 1028718:	e037883a 	mov	sp,fp
 102871c:	dfc00117 	ldw	ra,4(sp)
 1028720:	df000017 	ldw	fp,0(sp)
 1028724:	dec00204 	addi	sp,sp,8
 1028728:	f800283a 	ret

0102872c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 102872c:	defffd04 	addi	sp,sp,-12
 1028730:	dfc00215 	stw	ra,8(sp)
 1028734:	df000115 	stw	fp,4(sp)
 1028738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 102873c:	008040f4 	movhi	r2,259
 1028740:	10a4f504 	addi	r2,r2,-27692
 1028744:	e0bfff15 	stw	r2,-4(fp)
 1028748:	00000606 	br	1028764 <_do_ctors+0x38>
        (*ctor) (); 
 102874c:	e0bfff17 	ldw	r2,-4(fp)
 1028750:	10800017 	ldw	r2,0(r2)
 1028754:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1028758:	e0bfff17 	ldw	r2,-4(fp)
 102875c:	10bfff04 	addi	r2,r2,-4
 1028760:	e0bfff15 	stw	r2,-4(fp)
 1028764:	e0ffff17 	ldw	r3,-4(fp)
 1028768:	008040f4 	movhi	r2,259
 102876c:	10a4f204 	addi	r2,r2,-27704
 1028770:	18bff62e 	bgeu	r3,r2,102874c <__alt_data_end+0xff02874c>
        (*ctor) (); 
}
 1028774:	0001883a 	nop
 1028778:	e037883a 	mov	sp,fp
 102877c:	dfc00117 	ldw	ra,4(sp)
 1028780:	df000017 	ldw	fp,0(sp)
 1028784:	dec00204 	addi	sp,sp,8
 1028788:	f800283a 	ret

0102878c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 102878c:	defffd04 	addi	sp,sp,-12
 1028790:	dfc00215 	stw	ra,8(sp)
 1028794:	df000115 	stw	fp,4(sp)
 1028798:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 102879c:	008040f4 	movhi	r2,259
 10287a0:	10a4f504 	addi	r2,r2,-27692
 10287a4:	e0bfff15 	stw	r2,-4(fp)
 10287a8:	00000606 	br	10287c4 <_do_dtors+0x38>
        (*dtor) (); 
 10287ac:	e0bfff17 	ldw	r2,-4(fp)
 10287b0:	10800017 	ldw	r2,0(r2)
 10287b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10287b8:	e0bfff17 	ldw	r2,-4(fp)
 10287bc:	10bfff04 	addi	r2,r2,-4
 10287c0:	e0bfff15 	stw	r2,-4(fp)
 10287c4:	e0ffff17 	ldw	r3,-4(fp)
 10287c8:	008040f4 	movhi	r2,259
 10287cc:	10a4f604 	addi	r2,r2,-27688
 10287d0:	18bff62e 	bgeu	r3,r2,10287ac <__alt_data_end+0xff0287ac>
        (*dtor) (); 
}
 10287d4:	0001883a 	nop
 10287d8:	e037883a 	mov	sp,fp
 10287dc:	dfc00117 	ldw	ra,4(sp)
 10287e0:	df000017 	ldw	fp,0(sp)
 10287e4:	dec00204 	addi	sp,sp,8
 10287e8:	f800283a 	ret

010287ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10287ec:	defffa04 	addi	sp,sp,-24
 10287f0:	dfc00515 	stw	ra,20(sp)
 10287f4:	df000415 	stw	fp,16(sp)
 10287f8:	df000404 	addi	fp,sp,16
 10287fc:	e13ffe15 	stw	r4,-8(fp)
 1028800:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1028804:	e0bfff17 	ldw	r2,-4(fp)
 1028808:	10800017 	ldw	r2,0(r2)
 102880c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1028810:	e13ffe17 	ldw	r4,-8(fp)
 1028814:	10164b40 	call	10164b4 <strlen>
 1028818:	10800044 	addi	r2,r2,1
 102881c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1028820:	00000d06 	br	1028858 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1028824:	e0bffc17 	ldw	r2,-16(fp)
 1028828:	10800217 	ldw	r2,8(r2)
 102882c:	e0fffd17 	ldw	r3,-12(fp)
 1028830:	180d883a 	mov	r6,r3
 1028834:	e17ffe17 	ldw	r5,-8(fp)
 1028838:	1009883a 	mov	r4,r2
 102883c:	10157780 	call	1015778 <memcmp>
 1028840:	1000021e 	bne	r2,zero,102884c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1028844:	e0bffc17 	ldw	r2,-16(fp)
 1028848:	00000706 	br	1028868 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 102884c:	e0bffc17 	ldw	r2,-16(fp)
 1028850:	10800017 	ldw	r2,0(r2)
 1028854:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1028858:	e0fffc17 	ldw	r3,-16(fp)
 102885c:	e0bfff17 	ldw	r2,-4(fp)
 1028860:	18bff01e 	bne	r3,r2,1028824 <__alt_data_end+0xff028824>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1028864:	0005883a 	mov	r2,zero
}
 1028868:	e037883a 	mov	sp,fp
 102886c:	dfc00117 	ldw	ra,4(sp)
 1028870:	df000017 	ldw	fp,0(sp)
 1028874:	dec00204 	addi	sp,sp,8
 1028878:	f800283a 	ret

0102887c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 102887c:	defffe04 	addi	sp,sp,-8
 1028880:	dfc00115 	stw	ra,4(sp)
 1028884:	df000015 	stw	fp,0(sp)
 1028888:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 102888c:	01420004 	movi	r5,2048
 1028890:	0009883a 	mov	r4,zero
 1028894:	10290540 	call	1029054 <alt_icache_flush>
#endif
}
 1028898:	0001883a 	nop
 102889c:	e037883a 	mov	sp,fp
 10288a0:	dfc00117 	ldw	ra,4(sp)
 10288a4:	df000017 	ldw	fp,0(sp)
 10288a8:	dec00204 	addi	sp,sp,8
 10288ac:	f800283a 	ret

010288b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10288b0:	defffe04 	addi	sp,sp,-8
 10288b4:	df000115 	stw	fp,4(sp)
 10288b8:	df000104 	addi	fp,sp,4
 10288bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10288c0:	e0bfff17 	ldw	r2,-4(fp)
 10288c4:	10bffe84 	addi	r2,r2,-6
 10288c8:	10c00428 	cmpgeui	r3,r2,16
 10288cc:	18001a1e 	bne	r3,zero,1028938 <alt_exception_cause_generated_bad_addr+0x88>
 10288d0:	100690ba 	slli	r3,r2,2
 10288d4:	008040f4 	movhi	r2,259
 10288d8:	10a23a04 	addi	r2,r2,-30488
 10288dc:	1885883a 	add	r2,r3,r2
 10288e0:	10800017 	ldw	r2,0(r2)
 10288e4:	1000683a 	jmp	r2
 10288e8:	01028928 	cmpgeui	r4,zero,2596
 10288ec:	01028928 	cmpgeui	r4,zero,2596
 10288f0:	01028938 	rdprs	r4,zero,2596
 10288f4:	01028938 	rdprs	r4,zero,2596
 10288f8:	01028938 	rdprs	r4,zero,2596
 10288fc:	01028928 	cmpgeui	r4,zero,2596
 1028900:	01028930 	cmpltui	r4,zero,2596
 1028904:	01028938 	rdprs	r4,zero,2596
 1028908:	01028928 	cmpgeui	r4,zero,2596
 102890c:	01028928 	cmpgeui	r4,zero,2596
 1028910:	01028938 	rdprs	r4,zero,2596
 1028914:	01028928 	cmpgeui	r4,zero,2596
 1028918:	01028930 	cmpltui	r4,zero,2596
 102891c:	01028938 	rdprs	r4,zero,2596
 1028920:	01028938 	rdprs	r4,zero,2596
 1028924:	01028928 	cmpgeui	r4,zero,2596
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1028928:	00800044 	movi	r2,1
 102892c:	00000306 	br	102893c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1028930:	0005883a 	mov	r2,zero
 1028934:	00000106 	br	102893c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1028938:	0005883a 	mov	r2,zero
  }
}
 102893c:	e037883a 	mov	sp,fp
 1028940:	df000017 	ldw	fp,0(sp)
 1028944:	dec00104 	addi	sp,sp,4
 1028948:	f800283a 	ret

0102894c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 102894c:	defff904 	addi	sp,sp,-28
 1028950:	dfc00615 	stw	ra,24(sp)
 1028954:	df000515 	stw	fp,20(sp)
 1028958:	df000504 	addi	fp,sp,20
 102895c:	e13ffc15 	stw	r4,-16(fp)
 1028960:	e17ffd15 	stw	r5,-12(fp)
 1028964:	e1bffe15 	stw	r6,-8(fp)
 1028968:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 102896c:	e1bfff17 	ldw	r6,-4(fp)
 1028970:	e17ffe17 	ldw	r5,-8(fp)
 1028974:	e13ffd17 	ldw	r4,-12(fp)
 1028978:	1028b8c0 	call	1028b8c <open>
 102897c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1028980:	e0bffb17 	ldw	r2,-20(fp)
 1028984:	10001c16 	blt	r2,zero,10289f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1028988:	008040f4 	movhi	r2,259
 102898c:	10ae5504 	addi	r2,r2,-18092
 1028990:	e0fffb17 	ldw	r3,-20(fp)
 1028994:	18c00324 	muli	r3,r3,12
 1028998:	10c5883a 	add	r2,r2,r3
 102899c:	10c00017 	ldw	r3,0(r2)
 10289a0:	e0bffc17 	ldw	r2,-16(fp)
 10289a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10289a8:	008040f4 	movhi	r2,259
 10289ac:	10ae5504 	addi	r2,r2,-18092
 10289b0:	e0fffb17 	ldw	r3,-20(fp)
 10289b4:	18c00324 	muli	r3,r3,12
 10289b8:	10c5883a 	add	r2,r2,r3
 10289bc:	10800104 	addi	r2,r2,4
 10289c0:	10c00017 	ldw	r3,0(r2)
 10289c4:	e0bffc17 	ldw	r2,-16(fp)
 10289c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10289cc:	008040f4 	movhi	r2,259
 10289d0:	10ae5504 	addi	r2,r2,-18092
 10289d4:	e0fffb17 	ldw	r3,-20(fp)
 10289d8:	18c00324 	muli	r3,r3,12
 10289dc:	10c5883a 	add	r2,r2,r3
 10289e0:	10800204 	addi	r2,r2,8
 10289e4:	10c00017 	ldw	r3,0(r2)
 10289e8:	e0bffc17 	ldw	r2,-16(fp)
 10289ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10289f0:	e13ffb17 	ldw	r4,-20(fp)
 10289f4:	10271b00 	call	10271b0 <alt_release_fd>
  }
} 
 10289f8:	0001883a 	nop
 10289fc:	e037883a 	mov	sp,fp
 1028a00:	dfc00117 	ldw	ra,4(sp)
 1028a04:	df000017 	ldw	fp,0(sp)
 1028a08:	dec00204 	addi	sp,sp,8
 1028a0c:	f800283a 	ret

01028a10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1028a10:	defffb04 	addi	sp,sp,-20
 1028a14:	dfc00415 	stw	ra,16(sp)
 1028a18:	df000315 	stw	fp,12(sp)
 1028a1c:	df000304 	addi	fp,sp,12
 1028a20:	e13ffd15 	stw	r4,-12(fp)
 1028a24:	e17ffe15 	stw	r5,-8(fp)
 1028a28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1028a2c:	01c07fc4 	movi	r7,511
 1028a30:	01800044 	movi	r6,1
 1028a34:	e17ffd17 	ldw	r5,-12(fp)
 1028a38:	010040f4 	movhi	r4,259
 1028a3c:	212e5804 	addi	r4,r4,-18080
 1028a40:	102894c0 	call	102894c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1028a44:	01c07fc4 	movi	r7,511
 1028a48:	000d883a 	mov	r6,zero
 1028a4c:	e17ffe17 	ldw	r5,-8(fp)
 1028a50:	010040f4 	movhi	r4,259
 1028a54:	212e5504 	addi	r4,r4,-18092
 1028a58:	102894c0 	call	102894c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1028a5c:	01c07fc4 	movi	r7,511
 1028a60:	01800044 	movi	r6,1
 1028a64:	e17fff17 	ldw	r5,-4(fp)
 1028a68:	010040f4 	movhi	r4,259
 1028a6c:	212e5b04 	addi	r4,r4,-18068
 1028a70:	102894c0 	call	102894c <alt_open_fd>
}  
 1028a74:	0001883a 	nop
 1028a78:	e037883a 	mov	sp,fp
 1028a7c:	dfc00117 	ldw	ra,4(sp)
 1028a80:	df000017 	ldw	fp,0(sp)
 1028a84:	dec00204 	addi	sp,sp,8
 1028a88:	f800283a 	ret

01028a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1028a8c:	defffe04 	addi	sp,sp,-8
 1028a90:	dfc00115 	stw	ra,4(sp)
 1028a94:	df000015 	stw	fp,0(sp)
 1028a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1028a9c:	d0a01517 	ldw	r2,-32684(gp)
 1028aa0:	10000326 	beq	r2,zero,1028ab0 <alt_get_errno+0x24>
 1028aa4:	d0a01517 	ldw	r2,-32684(gp)
 1028aa8:	103ee83a 	callr	r2
 1028aac:	00000106 	br	1028ab4 <alt_get_errno+0x28>
 1028ab0:	d0a75b04 	addi	r2,gp,-25236
}
 1028ab4:	e037883a 	mov	sp,fp
 1028ab8:	dfc00117 	ldw	ra,4(sp)
 1028abc:	df000017 	ldw	fp,0(sp)
 1028ac0:	dec00204 	addi	sp,sp,8
 1028ac4:	f800283a 	ret

01028ac8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1028ac8:	defffd04 	addi	sp,sp,-12
 1028acc:	df000215 	stw	fp,8(sp)
 1028ad0:	df000204 	addi	fp,sp,8
 1028ad4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1028ad8:	e0bfff17 	ldw	r2,-4(fp)
 1028adc:	10800217 	ldw	r2,8(r2)
 1028ae0:	10d00034 	orhi	r3,r2,16384
 1028ae4:	e0bfff17 	ldw	r2,-4(fp)
 1028ae8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1028aec:	e03ffe15 	stw	zero,-8(fp)
 1028af0:	00001d06 	br	1028b68 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1028af4:	008040f4 	movhi	r2,259
 1028af8:	10ae5504 	addi	r2,r2,-18092
 1028afc:	e0fffe17 	ldw	r3,-8(fp)
 1028b00:	18c00324 	muli	r3,r3,12
 1028b04:	10c5883a 	add	r2,r2,r3
 1028b08:	10c00017 	ldw	r3,0(r2)
 1028b0c:	e0bfff17 	ldw	r2,-4(fp)
 1028b10:	10800017 	ldw	r2,0(r2)
 1028b14:	1880111e 	bne	r3,r2,1028b5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1028b18:	008040f4 	movhi	r2,259
 1028b1c:	10ae5504 	addi	r2,r2,-18092
 1028b20:	e0fffe17 	ldw	r3,-8(fp)
 1028b24:	18c00324 	muli	r3,r3,12
 1028b28:	10c5883a 	add	r2,r2,r3
 1028b2c:	10800204 	addi	r2,r2,8
 1028b30:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1028b34:	1000090e 	bge	r2,zero,1028b5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1028b38:	e0bffe17 	ldw	r2,-8(fp)
 1028b3c:	10c00324 	muli	r3,r2,12
 1028b40:	008040f4 	movhi	r2,259
 1028b44:	10ae5504 	addi	r2,r2,-18092
 1028b48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1028b4c:	e0bfff17 	ldw	r2,-4(fp)
 1028b50:	18800226 	beq	r3,r2,1028b5c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1028b54:	00bffcc4 	movi	r2,-13
 1028b58:	00000806 	br	1028b7c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1028b5c:	e0bffe17 	ldw	r2,-8(fp)
 1028b60:	10800044 	addi	r2,r2,1
 1028b64:	e0bffe15 	stw	r2,-8(fp)
 1028b68:	d0a01417 	ldw	r2,-32688(gp)
 1028b6c:	1007883a 	mov	r3,r2
 1028b70:	e0bffe17 	ldw	r2,-8(fp)
 1028b74:	18bfdf2e 	bgeu	r3,r2,1028af4 <__alt_data_end+0xff028af4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1028b78:	0005883a 	mov	r2,zero
}
 1028b7c:	e037883a 	mov	sp,fp
 1028b80:	df000017 	ldw	fp,0(sp)
 1028b84:	dec00104 	addi	sp,sp,4
 1028b88:	f800283a 	ret

01028b8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1028b8c:	defff604 	addi	sp,sp,-40
 1028b90:	dfc00915 	stw	ra,36(sp)
 1028b94:	df000815 	stw	fp,32(sp)
 1028b98:	df000804 	addi	fp,sp,32
 1028b9c:	e13ffd15 	stw	r4,-12(fp)
 1028ba0:	e17ffe15 	stw	r5,-8(fp)
 1028ba4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1028ba8:	00bfffc4 	movi	r2,-1
 1028bac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1028bb0:	00bffb44 	movi	r2,-19
 1028bb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1028bb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1028bbc:	d1601204 	addi	r5,gp,-32696
 1028bc0:	e13ffd17 	ldw	r4,-12(fp)
 1028bc4:	10287ec0 	call	10287ec <alt_find_dev>
 1028bc8:	e0bff815 	stw	r2,-32(fp)
 1028bcc:	e0bff817 	ldw	r2,-32(fp)
 1028bd0:	1000051e 	bne	r2,zero,1028be8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1028bd4:	e13ffd17 	ldw	r4,-12(fp)
 1028bd8:	1028ea80 	call	1028ea8 <alt_find_file>
 1028bdc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1028be0:	00800044 	movi	r2,1
 1028be4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1028be8:	e0bff817 	ldw	r2,-32(fp)
 1028bec:	10002926 	beq	r2,zero,1028c94 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1028bf0:	e13ff817 	ldw	r4,-32(fp)
 1028bf4:	1028fb00 	call	1028fb0 <alt_get_fd>
 1028bf8:	e0bff915 	stw	r2,-28(fp)
 1028bfc:	e0bff917 	ldw	r2,-28(fp)
 1028c00:	1000030e 	bge	r2,zero,1028c10 <open+0x84>
    {
      status = index;
 1028c04:	e0bff917 	ldw	r2,-28(fp)
 1028c08:	e0bffa15 	stw	r2,-24(fp)
 1028c0c:	00002306 	br	1028c9c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1028c10:	e0bff917 	ldw	r2,-28(fp)
 1028c14:	10c00324 	muli	r3,r2,12
 1028c18:	008040f4 	movhi	r2,259
 1028c1c:	10ae5504 	addi	r2,r2,-18092
 1028c20:	1885883a 	add	r2,r3,r2
 1028c24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1028c28:	e0fffe17 	ldw	r3,-8(fp)
 1028c2c:	00900034 	movhi	r2,16384
 1028c30:	10bfffc4 	addi	r2,r2,-1
 1028c34:	1886703a 	and	r3,r3,r2
 1028c38:	e0bffc17 	ldw	r2,-16(fp)
 1028c3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1028c40:	e0bffb17 	ldw	r2,-20(fp)
 1028c44:	1000051e 	bne	r2,zero,1028c5c <open+0xd0>
 1028c48:	e13ffc17 	ldw	r4,-16(fp)
 1028c4c:	1028ac80 	call	1028ac8 <alt_file_locked>
 1028c50:	e0bffa15 	stw	r2,-24(fp)
 1028c54:	e0bffa17 	ldw	r2,-24(fp)
 1028c58:	10001016 	blt	r2,zero,1028c9c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1028c5c:	e0bff817 	ldw	r2,-32(fp)
 1028c60:	10800317 	ldw	r2,12(r2)
 1028c64:	10000826 	beq	r2,zero,1028c88 <open+0xfc>
 1028c68:	e0bff817 	ldw	r2,-32(fp)
 1028c6c:	10800317 	ldw	r2,12(r2)
 1028c70:	e1ffff17 	ldw	r7,-4(fp)
 1028c74:	e1bffe17 	ldw	r6,-8(fp)
 1028c78:	e17ffd17 	ldw	r5,-12(fp)
 1028c7c:	e13ffc17 	ldw	r4,-16(fp)
 1028c80:	103ee83a 	callr	r2
 1028c84:	00000106 	br	1028c8c <open+0x100>
 1028c88:	0005883a 	mov	r2,zero
 1028c8c:	e0bffa15 	stw	r2,-24(fp)
 1028c90:	00000206 	br	1028c9c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1028c94:	00bffb44 	movi	r2,-19
 1028c98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1028c9c:	e0bffa17 	ldw	r2,-24(fp)
 1028ca0:	1000090e 	bge	r2,zero,1028cc8 <open+0x13c>
  {
    alt_release_fd (index);  
 1028ca4:	e13ff917 	ldw	r4,-28(fp)
 1028ca8:	10271b00 	call	10271b0 <alt_release_fd>
    ALT_ERRNO = -status;
 1028cac:	1028a8c0 	call	1028a8c <alt_get_errno>
 1028cb0:	1007883a 	mov	r3,r2
 1028cb4:	e0bffa17 	ldw	r2,-24(fp)
 1028cb8:	0085c83a 	sub	r2,zero,r2
 1028cbc:	18800015 	stw	r2,0(r3)
    return -1;
 1028cc0:	00bfffc4 	movi	r2,-1
 1028cc4:	00000106 	br	1028ccc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1028cc8:	e0bff917 	ldw	r2,-28(fp)
}
 1028ccc:	e037883a 	mov	sp,fp
 1028cd0:	dfc00117 	ldw	ra,4(sp)
 1028cd4:	df000017 	ldw	fp,0(sp)
 1028cd8:	dec00204 	addi	sp,sp,8
 1028cdc:	f800283a 	ret

01028ce0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1028ce0:	defffa04 	addi	sp,sp,-24
 1028ce4:	df000515 	stw	fp,20(sp)
 1028ce8:	df000504 	addi	fp,sp,20
 1028cec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1028cf0:	0005303a 	rdctl	r2,status
 1028cf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1028cf8:	e0fffc17 	ldw	r3,-16(fp)
 1028cfc:	00bfff84 	movi	r2,-2
 1028d00:	1884703a 	and	r2,r3,r2
 1028d04:	1001703a 	wrctl	status,r2
  
  return context;
 1028d08:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1028d0c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1028d10:	e0bfff17 	ldw	r2,-4(fp)
 1028d14:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1028d18:	e0bffd17 	ldw	r2,-12(fp)
 1028d1c:	10800017 	ldw	r2,0(r2)
 1028d20:	e0fffd17 	ldw	r3,-12(fp)
 1028d24:	18c00117 	ldw	r3,4(r3)
 1028d28:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1028d2c:	e0bffd17 	ldw	r2,-12(fp)
 1028d30:	10800117 	ldw	r2,4(r2)
 1028d34:	e0fffd17 	ldw	r3,-12(fp)
 1028d38:	18c00017 	ldw	r3,0(r3)
 1028d3c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1028d40:	e0bffd17 	ldw	r2,-12(fp)
 1028d44:	e0fffd17 	ldw	r3,-12(fp)
 1028d48:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1028d4c:	e0bffd17 	ldw	r2,-12(fp)
 1028d50:	e0fffd17 	ldw	r3,-12(fp)
 1028d54:	10c00015 	stw	r3,0(r2)
 1028d58:	e0bffb17 	ldw	r2,-20(fp)
 1028d5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1028d60:	e0bffe17 	ldw	r2,-8(fp)
 1028d64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1028d68:	0001883a 	nop
 1028d6c:	e037883a 	mov	sp,fp
 1028d70:	df000017 	ldw	fp,0(sp)
 1028d74:	dec00104 	addi	sp,sp,4
 1028d78:	f800283a 	ret

01028d7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1028d7c:	defffb04 	addi	sp,sp,-20
 1028d80:	dfc00415 	stw	ra,16(sp)
 1028d84:	df000315 	stw	fp,12(sp)
 1028d88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1028d8c:	d0a01a17 	ldw	r2,-32664(gp)
 1028d90:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1028d94:	d0a76217 	ldw	r2,-25208(gp)
 1028d98:	10800044 	addi	r2,r2,1
 1028d9c:	d0a76215 	stw	r2,-25208(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1028da0:	00002e06 	br	1028e5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1028da4:	e0bffd17 	ldw	r2,-12(fp)
 1028da8:	10800017 	ldw	r2,0(r2)
 1028dac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1028db0:	e0bffd17 	ldw	r2,-12(fp)
 1028db4:	10800403 	ldbu	r2,16(r2)
 1028db8:	10803fcc 	andi	r2,r2,255
 1028dbc:	10000426 	beq	r2,zero,1028dd0 <alt_tick+0x54>
 1028dc0:	d0a76217 	ldw	r2,-25208(gp)
 1028dc4:	1000021e 	bne	r2,zero,1028dd0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1028dc8:	e0bffd17 	ldw	r2,-12(fp)
 1028dcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1028dd0:	e0bffd17 	ldw	r2,-12(fp)
 1028dd4:	10800217 	ldw	r2,8(r2)
 1028dd8:	d0e76217 	ldw	r3,-25208(gp)
 1028ddc:	18801d36 	bltu	r3,r2,1028e54 <alt_tick+0xd8>
 1028de0:	e0bffd17 	ldw	r2,-12(fp)
 1028de4:	10800403 	ldbu	r2,16(r2)
 1028de8:	10803fcc 	andi	r2,r2,255
 1028dec:	1000191e 	bne	r2,zero,1028e54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1028df0:	e0bffd17 	ldw	r2,-12(fp)
 1028df4:	10800317 	ldw	r2,12(r2)
 1028df8:	e0fffd17 	ldw	r3,-12(fp)
 1028dfc:	18c00517 	ldw	r3,20(r3)
 1028e00:	1809883a 	mov	r4,r3
 1028e04:	103ee83a 	callr	r2
 1028e08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1028e0c:	e0bfff17 	ldw	r2,-4(fp)
 1028e10:	1000031e 	bne	r2,zero,1028e20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1028e14:	e13ffd17 	ldw	r4,-12(fp)
 1028e18:	1028ce00 	call	1028ce0 <alt_alarm_stop>
 1028e1c:	00000d06 	br	1028e54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1028e20:	e0bffd17 	ldw	r2,-12(fp)
 1028e24:	10c00217 	ldw	r3,8(r2)
 1028e28:	e0bfff17 	ldw	r2,-4(fp)
 1028e2c:	1887883a 	add	r3,r3,r2
 1028e30:	e0bffd17 	ldw	r2,-12(fp)
 1028e34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1028e38:	e0bffd17 	ldw	r2,-12(fp)
 1028e3c:	10c00217 	ldw	r3,8(r2)
 1028e40:	d0a76217 	ldw	r2,-25208(gp)
 1028e44:	1880032e 	bgeu	r3,r2,1028e54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1028e48:	e0bffd17 	ldw	r2,-12(fp)
 1028e4c:	00c00044 	movi	r3,1
 1028e50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1028e54:	e0bffe17 	ldw	r2,-8(fp)
 1028e58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1028e5c:	e0fffd17 	ldw	r3,-12(fp)
 1028e60:	d0a01a04 	addi	r2,gp,-32664
 1028e64:	18bfcf1e 	bne	r3,r2,1028da4 <__alt_data_end+0xff028da4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1028e68:	0001883a 	nop
}
 1028e6c:	0001883a 	nop
 1028e70:	e037883a 	mov	sp,fp
 1028e74:	dfc00117 	ldw	ra,4(sp)
 1028e78:	df000017 	ldw	fp,0(sp)
 1028e7c:	dec00204 	addi	sp,sp,8
 1028e80:	f800283a 	ret

01028e84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1028e84:	deffff04 	addi	sp,sp,-4
 1028e88:	df000015 	stw	fp,0(sp)
 1028e8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1028e90:	000170fa 	wrctl	ienable,zero
}
 1028e94:	0001883a 	nop
 1028e98:	e037883a 	mov	sp,fp
 1028e9c:	df000017 	ldw	fp,0(sp)
 1028ea0:	dec00104 	addi	sp,sp,4
 1028ea4:	f800283a 	ret

01028ea8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1028ea8:	defffb04 	addi	sp,sp,-20
 1028eac:	dfc00415 	stw	ra,16(sp)
 1028eb0:	df000315 	stw	fp,12(sp)
 1028eb4:	df000304 	addi	fp,sp,12
 1028eb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1028ebc:	d0a01017 	ldw	r2,-32704(gp)
 1028ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1028ec4:	00003106 	br	1028f8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1028ec8:	e0bffd17 	ldw	r2,-12(fp)
 1028ecc:	10800217 	ldw	r2,8(r2)
 1028ed0:	1009883a 	mov	r4,r2
 1028ed4:	10164b40 	call	10164b4 <strlen>
 1028ed8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1028edc:	e0bffd17 	ldw	r2,-12(fp)
 1028ee0:	10c00217 	ldw	r3,8(r2)
 1028ee4:	e0bffe17 	ldw	r2,-8(fp)
 1028ee8:	10bfffc4 	addi	r2,r2,-1
 1028eec:	1885883a 	add	r2,r3,r2
 1028ef0:	10800003 	ldbu	r2,0(r2)
 1028ef4:	10803fcc 	andi	r2,r2,255
 1028ef8:	1080201c 	xori	r2,r2,128
 1028efc:	10bfe004 	addi	r2,r2,-128
 1028f00:	10800bd8 	cmpnei	r2,r2,47
 1028f04:	1000031e 	bne	r2,zero,1028f14 <alt_find_file+0x6c>
    {
      len -= 1;
 1028f08:	e0bffe17 	ldw	r2,-8(fp)
 1028f0c:	10bfffc4 	addi	r2,r2,-1
 1028f10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1028f14:	e0bffe17 	ldw	r2,-8(fp)
 1028f18:	e0ffff17 	ldw	r3,-4(fp)
 1028f1c:	1885883a 	add	r2,r3,r2
 1028f20:	10800003 	ldbu	r2,0(r2)
 1028f24:	10803fcc 	andi	r2,r2,255
 1028f28:	1080201c 	xori	r2,r2,128
 1028f2c:	10bfe004 	addi	r2,r2,-128
 1028f30:	10800be0 	cmpeqi	r2,r2,47
 1028f34:	1000081e 	bne	r2,zero,1028f58 <alt_find_file+0xb0>
 1028f38:	e0bffe17 	ldw	r2,-8(fp)
 1028f3c:	e0ffff17 	ldw	r3,-4(fp)
 1028f40:	1885883a 	add	r2,r3,r2
 1028f44:	10800003 	ldbu	r2,0(r2)
 1028f48:	10803fcc 	andi	r2,r2,255
 1028f4c:	1080201c 	xori	r2,r2,128
 1028f50:	10bfe004 	addi	r2,r2,-128
 1028f54:	10000a1e 	bne	r2,zero,1028f80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1028f58:	e0bffd17 	ldw	r2,-12(fp)
 1028f5c:	10800217 	ldw	r2,8(r2)
 1028f60:	e0fffe17 	ldw	r3,-8(fp)
 1028f64:	180d883a 	mov	r6,r3
 1028f68:	e17fff17 	ldw	r5,-4(fp)
 1028f6c:	1009883a 	mov	r4,r2
 1028f70:	10157780 	call	1015778 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1028f74:	1000021e 	bne	r2,zero,1028f80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1028f78:	e0bffd17 	ldw	r2,-12(fp)
 1028f7c:	00000706 	br	1028f9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1028f80:	e0bffd17 	ldw	r2,-12(fp)
 1028f84:	10800017 	ldw	r2,0(r2)
 1028f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1028f8c:	e0fffd17 	ldw	r3,-12(fp)
 1028f90:	d0a01004 	addi	r2,gp,-32704
 1028f94:	18bfcc1e 	bne	r3,r2,1028ec8 <__alt_data_end+0xff028ec8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1028f98:	0005883a 	mov	r2,zero
}
 1028f9c:	e037883a 	mov	sp,fp
 1028fa0:	dfc00117 	ldw	ra,4(sp)
 1028fa4:	df000017 	ldw	fp,0(sp)
 1028fa8:	dec00204 	addi	sp,sp,8
 1028fac:	f800283a 	ret

01028fb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1028fb0:	defffc04 	addi	sp,sp,-16
 1028fb4:	df000315 	stw	fp,12(sp)
 1028fb8:	df000304 	addi	fp,sp,12
 1028fbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1028fc0:	00bffa04 	movi	r2,-24
 1028fc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1028fc8:	e03ffd15 	stw	zero,-12(fp)
 1028fcc:	00001906 	br	1029034 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1028fd0:	008040f4 	movhi	r2,259
 1028fd4:	10ae5504 	addi	r2,r2,-18092
 1028fd8:	e0fffd17 	ldw	r3,-12(fp)
 1028fdc:	18c00324 	muli	r3,r3,12
 1028fe0:	10c5883a 	add	r2,r2,r3
 1028fe4:	10800017 	ldw	r2,0(r2)
 1028fe8:	10000f1e 	bne	r2,zero,1029028 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1028fec:	008040f4 	movhi	r2,259
 1028ff0:	10ae5504 	addi	r2,r2,-18092
 1028ff4:	e0fffd17 	ldw	r3,-12(fp)
 1028ff8:	18c00324 	muli	r3,r3,12
 1028ffc:	10c5883a 	add	r2,r2,r3
 1029000:	e0ffff17 	ldw	r3,-4(fp)
 1029004:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1029008:	d0e01417 	ldw	r3,-32688(gp)
 102900c:	e0bffd17 	ldw	r2,-12(fp)
 1029010:	1880020e 	bge	r3,r2,102901c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1029014:	e0bffd17 	ldw	r2,-12(fp)
 1029018:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
 102901c:	e0bffd17 	ldw	r2,-12(fp)
 1029020:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1029024:	00000606 	br	1029040 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1029028:	e0bffd17 	ldw	r2,-12(fp)
 102902c:	10800044 	addi	r2,r2,1
 1029030:	e0bffd15 	stw	r2,-12(fp)
 1029034:	e0bffd17 	ldw	r2,-12(fp)
 1029038:	10800810 	cmplti	r2,r2,32
 102903c:	103fe41e 	bne	r2,zero,1028fd0 <__alt_data_end+0xff028fd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1029040:	e0bffe17 	ldw	r2,-8(fp)
}
 1029044:	e037883a 	mov	sp,fp
 1029048:	df000017 	ldw	fp,0(sp)
 102904c:	dec00104 	addi	sp,sp,4
 1029050:	f800283a 	ret

01029054 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1029054:	defffb04 	addi	sp,sp,-20
 1029058:	df000415 	stw	fp,16(sp)
 102905c:	df000404 	addi	fp,sp,16
 1029060:	e13ffe15 	stw	r4,-8(fp)
 1029064:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1029068:	e0bfff17 	ldw	r2,-4(fp)
 102906c:	10820070 	cmpltui	r2,r2,2049
 1029070:	1000021e 	bne	r2,zero,102907c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1029074:	00820004 	movi	r2,2048
 1029078:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 102907c:	e0fffe17 	ldw	r3,-8(fp)
 1029080:	e0bfff17 	ldw	r2,-4(fp)
 1029084:	1885883a 	add	r2,r3,r2
 1029088:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 102908c:	e0bffe17 	ldw	r2,-8(fp)
 1029090:	e0bffc15 	stw	r2,-16(fp)
 1029094:	00000506 	br	10290ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1029098:	e0bffc17 	ldw	r2,-16(fp)
 102909c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10290a0:	e0bffc17 	ldw	r2,-16(fp)
 10290a4:	10800804 	addi	r2,r2,32
 10290a8:	e0bffc15 	stw	r2,-16(fp)
 10290ac:	e0fffc17 	ldw	r3,-16(fp)
 10290b0:	e0bffd17 	ldw	r2,-12(fp)
 10290b4:	18bff836 	bltu	r3,r2,1029098 <__alt_data_end+0xff029098>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 10290b8:	e0bffe17 	ldw	r2,-8(fp)
 10290bc:	108007cc 	andi	r2,r2,31
 10290c0:	10000226 	beq	r2,zero,10290cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10290c4:	e0bffc17 	ldw	r2,-16(fp)
 10290c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10290cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10290d0:	0001883a 	nop
 10290d4:	e037883a 	mov	sp,fp
 10290d8:	df000017 	ldw	fp,0(sp)
 10290dc:	dec00104 	addi	sp,sp,4
 10290e0:	f800283a 	ret

010290e4 <atexit>:
 10290e4:	200b883a 	mov	r5,r4
 10290e8:	000f883a 	mov	r7,zero
 10290ec:	000d883a 	mov	r6,zero
 10290f0:	0009883a 	mov	r4,zero
 10290f4:	10291301 	jmpi	1029130 <__register_exitproc>

010290f8 <exit>:
 10290f8:	defffe04 	addi	sp,sp,-8
 10290fc:	000b883a 	mov	r5,zero
 1029100:	dc000015 	stw	r16,0(sp)
 1029104:	dfc00115 	stw	ra,4(sp)
 1029108:	2021883a 	mov	r16,r4
 102910c:	10292480 	call	1029248 <__call_exitprocs>
 1029110:	008040f4 	movhi	r2,259
 1029114:	10b2db04 	addi	r2,r2,-13460
 1029118:	11000017 	ldw	r4,0(r2)
 102911c:	20800f17 	ldw	r2,60(r4)
 1029120:	10000126 	beq	r2,zero,1029128 <exit+0x30>
 1029124:	103ee83a 	callr	r2
 1029128:	8009883a 	mov	r4,r16
 102912c:	102661c0 	call	102661c <_exit>

01029130 <__register_exitproc>:
 1029130:	defffa04 	addi	sp,sp,-24
 1029134:	dc000315 	stw	r16,12(sp)
 1029138:	040040f4 	movhi	r16,259
 102913c:	8432db04 	addi	r16,r16,-13460
 1029140:	80c00017 	ldw	r3,0(r16)
 1029144:	dc400415 	stw	r17,16(sp)
 1029148:	dfc00515 	stw	ra,20(sp)
 102914c:	18805217 	ldw	r2,328(r3)
 1029150:	2023883a 	mov	r17,r4
 1029154:	10003726 	beq	r2,zero,1029234 <__register_exitproc+0x104>
 1029158:	10c00117 	ldw	r3,4(r2)
 102915c:	010007c4 	movi	r4,31
 1029160:	20c00e16 	blt	r4,r3,102919c <__register_exitproc+0x6c>
 1029164:	1a000044 	addi	r8,r3,1
 1029168:	8800221e 	bne	r17,zero,10291f4 <__register_exitproc+0xc4>
 102916c:	18c00084 	addi	r3,r3,2
 1029170:	18c7883a 	add	r3,r3,r3
 1029174:	18c7883a 	add	r3,r3,r3
 1029178:	12000115 	stw	r8,4(r2)
 102917c:	10c7883a 	add	r3,r2,r3
 1029180:	19400015 	stw	r5,0(r3)
 1029184:	0005883a 	mov	r2,zero
 1029188:	dfc00517 	ldw	ra,20(sp)
 102918c:	dc400417 	ldw	r17,16(sp)
 1029190:	dc000317 	ldw	r16,12(sp)
 1029194:	dec00604 	addi	sp,sp,24
 1029198:	f800283a 	ret
 102919c:	00800034 	movhi	r2,0
 10291a0:	10800004 	addi	r2,r2,0
 10291a4:	10002626 	beq	r2,zero,1029240 <__register_exitproc+0x110>
 10291a8:	01006404 	movi	r4,400
 10291ac:	d9400015 	stw	r5,0(sp)
 10291b0:	d9800115 	stw	r6,4(sp)
 10291b4:	d9c00215 	stw	r7,8(sp)
 10291b8:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 10291bc:	d9400017 	ldw	r5,0(sp)
 10291c0:	d9800117 	ldw	r6,4(sp)
 10291c4:	d9c00217 	ldw	r7,8(sp)
 10291c8:	10001d26 	beq	r2,zero,1029240 <__register_exitproc+0x110>
 10291cc:	81000017 	ldw	r4,0(r16)
 10291d0:	10000115 	stw	zero,4(r2)
 10291d4:	02000044 	movi	r8,1
 10291d8:	22405217 	ldw	r9,328(r4)
 10291dc:	0007883a 	mov	r3,zero
 10291e0:	12400015 	stw	r9,0(r2)
 10291e4:	20805215 	stw	r2,328(r4)
 10291e8:	10006215 	stw	zero,392(r2)
 10291ec:	10006315 	stw	zero,396(r2)
 10291f0:	883fde26 	beq	r17,zero,102916c <__alt_data_end+0xff02916c>
 10291f4:	18c9883a 	add	r4,r3,r3
 10291f8:	2109883a 	add	r4,r4,r4
 10291fc:	1109883a 	add	r4,r2,r4
 1029200:	21802215 	stw	r6,136(r4)
 1029204:	01800044 	movi	r6,1
 1029208:	12406217 	ldw	r9,392(r2)
 102920c:	30cc983a 	sll	r6,r6,r3
 1029210:	4992b03a 	or	r9,r9,r6
 1029214:	12406215 	stw	r9,392(r2)
 1029218:	21c04215 	stw	r7,264(r4)
 102921c:	01000084 	movi	r4,2
 1029220:	893fd21e 	bne	r17,r4,102916c <__alt_data_end+0xff02916c>
 1029224:	11006317 	ldw	r4,396(r2)
 1029228:	218cb03a 	or	r6,r4,r6
 102922c:	11806315 	stw	r6,396(r2)
 1029230:	003fce06 	br	102916c <__alt_data_end+0xff02916c>
 1029234:	18805304 	addi	r2,r3,332
 1029238:	18805215 	stw	r2,328(r3)
 102923c:	003fc606 	br	1029158 <__alt_data_end+0xff029158>
 1029240:	00bfffc4 	movi	r2,-1
 1029244:	003fd006 	br	1029188 <__alt_data_end+0xff029188>

01029248 <__call_exitprocs>:
 1029248:	defff504 	addi	sp,sp,-44
 102924c:	df000915 	stw	fp,36(sp)
 1029250:	dd400615 	stw	r21,24(sp)
 1029254:	dc800315 	stw	r18,12(sp)
 1029258:	dfc00a15 	stw	ra,40(sp)
 102925c:	ddc00815 	stw	r23,32(sp)
 1029260:	dd800715 	stw	r22,28(sp)
 1029264:	dd000515 	stw	r20,20(sp)
 1029268:	dcc00415 	stw	r19,16(sp)
 102926c:	dc400215 	stw	r17,8(sp)
 1029270:	dc000115 	stw	r16,4(sp)
 1029274:	d9000015 	stw	r4,0(sp)
 1029278:	2839883a 	mov	fp,r5
 102927c:	04800044 	movi	r18,1
 1029280:	057fffc4 	movi	r21,-1
 1029284:	008040f4 	movhi	r2,259
 1029288:	10b2db04 	addi	r2,r2,-13460
 102928c:	12000017 	ldw	r8,0(r2)
 1029290:	45005217 	ldw	r20,328(r8)
 1029294:	44c05204 	addi	r19,r8,328
 1029298:	a0001c26 	beq	r20,zero,102930c <__call_exitprocs+0xc4>
 102929c:	a0800117 	ldw	r2,4(r20)
 10292a0:	15ffffc4 	addi	r23,r2,-1
 10292a4:	b8000d16 	blt	r23,zero,10292dc <__call_exitprocs+0x94>
 10292a8:	14000044 	addi	r16,r2,1
 10292ac:	8421883a 	add	r16,r16,r16
 10292b0:	8421883a 	add	r16,r16,r16
 10292b4:	84402004 	addi	r17,r16,128
 10292b8:	a463883a 	add	r17,r20,r17
 10292bc:	a421883a 	add	r16,r20,r16
 10292c0:	e0001e26 	beq	fp,zero,102933c <__call_exitprocs+0xf4>
 10292c4:	80804017 	ldw	r2,256(r16)
 10292c8:	e0801c26 	beq	fp,r2,102933c <__call_exitprocs+0xf4>
 10292cc:	bdffffc4 	addi	r23,r23,-1
 10292d0:	843fff04 	addi	r16,r16,-4
 10292d4:	8c7fff04 	addi	r17,r17,-4
 10292d8:	bd7ff91e 	bne	r23,r21,10292c0 <__alt_data_end+0xff0292c0>
 10292dc:	00800034 	movhi	r2,0
 10292e0:	10800004 	addi	r2,r2,0
 10292e4:	10000926 	beq	r2,zero,102930c <__call_exitprocs+0xc4>
 10292e8:	a0800117 	ldw	r2,4(r20)
 10292ec:	1000301e 	bne	r2,zero,10293b0 <__call_exitprocs+0x168>
 10292f0:	a0800017 	ldw	r2,0(r20)
 10292f4:	10003226 	beq	r2,zero,10293c0 <__call_exitprocs+0x178>
 10292f8:	a009883a 	mov	r4,r20
 10292fc:	98800015 	stw	r2,0(r19)
 1029300:	00000000 	call	0 <__alt_mem_sdram-0x1000000>
 1029304:	9d000017 	ldw	r20,0(r19)
 1029308:	a03fe41e 	bne	r20,zero,102929c <__alt_data_end+0xff02929c>
 102930c:	dfc00a17 	ldw	ra,40(sp)
 1029310:	df000917 	ldw	fp,36(sp)
 1029314:	ddc00817 	ldw	r23,32(sp)
 1029318:	dd800717 	ldw	r22,28(sp)
 102931c:	dd400617 	ldw	r21,24(sp)
 1029320:	dd000517 	ldw	r20,20(sp)
 1029324:	dcc00417 	ldw	r19,16(sp)
 1029328:	dc800317 	ldw	r18,12(sp)
 102932c:	dc400217 	ldw	r17,8(sp)
 1029330:	dc000117 	ldw	r16,4(sp)
 1029334:	dec00b04 	addi	sp,sp,44
 1029338:	f800283a 	ret
 102933c:	a0800117 	ldw	r2,4(r20)
 1029340:	80c00017 	ldw	r3,0(r16)
 1029344:	10bfffc4 	addi	r2,r2,-1
 1029348:	15c01426 	beq	r2,r23,102939c <__call_exitprocs+0x154>
 102934c:	80000015 	stw	zero,0(r16)
 1029350:	183fde26 	beq	r3,zero,10292cc <__alt_data_end+0xff0292cc>
 1029354:	95c8983a 	sll	r4,r18,r23
 1029358:	a0806217 	ldw	r2,392(r20)
 102935c:	a5800117 	ldw	r22,4(r20)
 1029360:	2084703a 	and	r2,r4,r2
 1029364:	10000b26 	beq	r2,zero,1029394 <__call_exitprocs+0x14c>
 1029368:	a0806317 	ldw	r2,396(r20)
 102936c:	2088703a 	and	r4,r4,r2
 1029370:	20000c1e 	bne	r4,zero,10293a4 <__call_exitprocs+0x15c>
 1029374:	89400017 	ldw	r5,0(r17)
 1029378:	d9000017 	ldw	r4,0(sp)
 102937c:	183ee83a 	callr	r3
 1029380:	a0800117 	ldw	r2,4(r20)
 1029384:	15bfbf1e 	bne	r2,r22,1029284 <__alt_data_end+0xff029284>
 1029388:	98800017 	ldw	r2,0(r19)
 102938c:	153fcf26 	beq	r2,r20,10292cc <__alt_data_end+0xff0292cc>
 1029390:	003fbc06 	br	1029284 <__alt_data_end+0xff029284>
 1029394:	183ee83a 	callr	r3
 1029398:	003ff906 	br	1029380 <__alt_data_end+0xff029380>
 102939c:	a5c00115 	stw	r23,4(r20)
 10293a0:	003feb06 	br	1029350 <__alt_data_end+0xff029350>
 10293a4:	89000017 	ldw	r4,0(r17)
 10293a8:	183ee83a 	callr	r3
 10293ac:	003ff406 	br	1029380 <__alt_data_end+0xff029380>
 10293b0:	a0800017 	ldw	r2,0(r20)
 10293b4:	a027883a 	mov	r19,r20
 10293b8:	1029883a 	mov	r20,r2
 10293bc:	003fb606 	br	1029298 <__alt_data_end+0xff029298>
 10293c0:	0005883a 	mov	r2,zero
 10293c4:	003ffb06 	br	10293b4 <__alt_data_end+0xff0293b4>
 10293c8:	01006cf4 	movhi	r4,435
 10293cc:	01006e84 	movi	r4,442
 10293d0:	01007394 	movui	r4,462
 10293d4:	01007924 	muli	r4,zero,484
