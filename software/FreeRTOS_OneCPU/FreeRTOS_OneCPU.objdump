
FreeRTOS_OneCPU.elf:     file format elf32-littlenios2
FreeRTOS_OneCPU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010003a0

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000b51c memsz 0x0000b51c flags r-x
    LOAD off    0x0000c53c vaddr 0x0100b53c paddr 0x0100cfc8 align 2**12
         filesz 0x00001a8c memsz 0x00001a8c flags rw-
    LOAD off    0x0000ea54 vaddr 0x0100ea54 paddr 0x0100ea54 align 2**12
         filesz 0x00000000 memsz 0x0080026c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000380  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b134  010003a0  010003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  0100b4d4  0100b4d4  0000c4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a8c  0100b53c  0100cfc8  0000c53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          008002f2  0100ea54  0100ea54  0000ea54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0180ecc0  0180ecc0  0000dfc8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000dfc8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bc0  00000000  00000000  0000dff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a972  00000000  00000000  0000ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006e04  00000000  00000000  00029522  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000084ef  00000000  00000000  00030326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b5c  00000000  00000000  00038818  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004226  00000000  00000000  0003b374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0003f59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00043fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b8  00000000  00000000  00044018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004863e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00048641  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004864b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004864c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004864d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00048658  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00048663  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0004866e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  0004867a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000494a  00000000  00000000  00048696  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027948b  00000000  00000000  0004cfe0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010003a0 l    d  .text	00000000 .text
0100b4d4 l    d  .rodata	00000000 .rodata
0100b53c l    d  .rwdata	00000000 .rwdata
0100ea54 l    d  .bss	00000000 .bss
0180ecc0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_OneCPU_bsp//obj/HAL/src/crt0.o
010003e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/Source/portable/GCC/NiosII/port_asm.o
01000020 l       .exceptions	00000000 save_context
0100009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
01000100 l       .exceptions	00000000 hw_irq_test
010001c4 l       .exceptions	00000000 soft_exceptions
01000124 l       .exceptions	00000000 hw_irq_handler
0100013c l       .exceptions	00000000 restore_context
010001e0 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 event_groups.c
01000a7c l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
01000d7c l     F .text	0000002c prvReadGp
01000ee0 l     F .text	00000088 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_2.c
0100ead0 l     O .bss	00800000 ucHeap
0100cf80 l     O .rwdata	00000002 heapSTRUCT_SIZE
0100ea54 l     O .bss	00000008 xStart
0100ea5c l     O .bss	00000008 xEnd
0100cf84 l     O .rwdata	00000004 xFreeBytesRemaining
0100ea64 l     O .bss	00000004 xHeapHasBeenInitialised.2596
01001290 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 queue.c
010014c0 l     F .text	00000084 prvInitialiseNewQueue
01001544 l     F .text	00000060 prvInitialiseMutex
0100231c l     F .text	0000018c prvCopyDataToQueue
010026d0 l     F .text	00000058 prvIsQueueFull
01002544 l     F .text	000000f4 prvUnlockQueue
010024a8 l     F .text	0000009c prvCopyDataFromQueue
01002638 l     F .text	00000050 prvIsQueueEmpty
010022cc l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 stream_buffer.c
0100359c l     F .text	00000080 prvInitialiseNewStreamBuffer
01003528 l     F .text	00000074 prvBytesInBuffer
01002cd0 l     F .text	000000d4 prvWriteMessageToBuffer
01003320 l     F .text	000000f4 prvWriteBytesToBuffer
01003088 l     F .text	000000bc prvReadMessageFromBuffer
01003414 l     F .text	00000114 prvReadBytesFromBuffer
00000000 l    df *ABS*	00000000 tasks.c
0180ead0 l     O .bss	00000064 pxReadyTasksLists
0180eb34 l     O .bss	00000014 xDelayedTaskList1
0180eb48 l     O .bss	00000014 xDelayedTaskList2
0100ea6c l     O .bss	00000004 pxDelayedTaskList
0100ea70 l     O .bss	00000004 pxOverflowDelayedTaskList
0180eb5c l     O .bss	00000014 xPendingReadyList
0180eb70 l     O .bss	00000014 xTasksWaitingTermination
0100ea74 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0180eb84 l     O .bss	00000014 xSuspendedTaskList
0100ea78 l     O .bss	00000004 uxCurrentNumberOfTasks
0100ea7c l     O .bss	00000004 xTickCount
0100ea80 l     O .bss	00000004 uxTopReadyPriority
0100ea84 l     O .bss	00000004 xSchedulerRunning
0100ea88 l     O .bss	00000004 uxPendedTicks
0100ea8c l     O .bss	00000004 xYieldPending
0100ea90 l     O .bss	00000004 xNumOfOverflows
0100ea94 l     O .bss	00000004 uxTaskNumber
0100ea98 l     O .bss	00000004 xNextTaskUnblockTime
0100ea9c l     O .bss	00000004 xIdleTaskHandle
0100eaa0 l     O .bss	00000004 uxSchedulerSuspended
01003704 l     F .text	000001e4 prvInitialiseNewTask
010038e8 l     F .text	000000fc prvAddNewTaskToReadyList
01004b28 l     F .text	000000b8 prvInitialiseTaskLists
01004d24 l     F .text	00000044 prvDeleteTCB
01004d68 l     F .text	00000054 prvResetNextTaskUnblockTime
0100595c l     F .text	000000e8 prvAddCurrentTaskToDelayedList
01003f5c l     F .text	0000006c prvTaskIsTaskSuspended
01004b0c l     F .text	0000001c prvIdleTask
01004be0 l     F .text	00000080 prvCheckTasksWaitingTermination
01004c60 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
01005e54 l     F .text	00000008 __fp_unlock
01005e68 l     F .text	0000019c __sinit.part.1
01006004 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100b53c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
01008840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100894c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01008978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01008bd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01008cb4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01008da0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01008f74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100cfb4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010091c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010092f4 l     F .text	00000034 alt_dev_reg
01009328 l     F .text	0000003c alt_get_errno
01009364 l     F .text	00000068 alt_avalon_mutex_reg
0100bf10 l     O .rwdata	00001060 jtag_uart_0
0100cf70 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01009690 l     F .text	0000020c altera_avalon_jtag_uart_irq
0100989c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
01009ed4 l     F .text	0000003c alt_get_errno
01009f10 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100a1a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100a408 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100a90c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100aa4c l     F .text	0000003c alt_get_errno
0100aa88 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100eacc g     O .bss	00000004 alt_instruction_exception_handler
01008638 g     F .text	00000054 _isatty_r
01008eb0 g     F .text	0000007c alt_main
01005ce8 g     F .text	000000c0 _puts_r
0180ebc0 g     O .bss	00000100 alt_irq
01008360 g     F .text	00000060 _lseek_r
0100012c g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0100475c g     F .text	00000064 vTaskPlaceOnUnorderedEventList
01001250 g     F .text	00000020 xPortGetFreeHeapSize
010007d4 g     F .text	0000003c xEventGroupGetBitsFromISR
0100cfc8 g       *ABS*	00000000 __flash_rwdata_start
0180ecc0 g       *ABS*	00000000 __alt_heap_start
01003c18 g     F .text	00000058 uxTaskPriorityGet
01007914 g     F .text	0000005c __sseek
010061a4 g     F .text	00000010 __sinit
0100600c g     F .text	00000068 __sfmoreglue
01002da4 g     F .text	00000158 xStreamBufferReceive
01008f50 g     F .text	00000024 __malloc_unlock
01000440 g     F .text	00000184 xEventGroupSync
01007128 g     F .text	0000015c memmove
01005160 g     F .text	00000054 vTaskEnterCritical
0100618c g     F .text	00000018 _cleanup
01001938 g     F .text	000000e8 xQueueGenericSendFromISR
01004444 g     F .text	00000040 pcTaskGetName
0100a048 g     F .text	00000040 altera_avalon_mutex_trylock
01002990 g     F .text	00000088 xStreamBufferSpacesAvailable
0100ae44 g     F .text	00000024 altera_nios2_gen2_irq_init
01002888 g     F .text	0000009c xStreamBufferReset
01000000 g     F .entry	0000001c __reset
01001600 g     F .text	00000090 xQueueGiveMutexRecursive
0100ea68 g     O .bss	00000004 pxCurrentTCB
0100a0dc g     F .text	00000074 altera_avalon_mutex_is_mine
01000020 g       *ABS*	00000000 __flash_exceptions_start
010085dc g     F .text	0000005c _fstat_r
0100eab0 g     O .bss	00000004 errno
01007890 g     F .text	00000008 __seofread
01002be0 g     F .text	000000f0 xStreamBufferSendFromISR
0100eabc g     O .bss	00000004 alt_argv
01014f80 g       *ABS*	00000000 _gp
01003cbc g     F .text	000001a4 vTaskPrioritySet
010049c8 g     F .text	0000003c vTaskInternalSetTimeOutState
010005c4 g     F .text	000001a8 xEventGroupWaitBits
0100bd90 g     O .rwdata	00000180 alt_fd_list
01000e88 g     F .text	00000038 xPortStartScheduler
01004204 g     F .text	00000048 vTaskEndScheduler
0100a5a8 g     F .text	00000090 alt_find_dev
01005a78 g     F .text	00000148 memcpy
0100470c g     F .text	00000050 vTaskPlaceOnEventList
010048b4 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
01005e5c g     F .text	0000000c _cleanup_r
0100a9d0 g     F .text	0000007c alt_io_redirect
01002148 g     F .text	0000007c xQueuePeekFromISR
0100b4d4 g       *ABS*	00000000 __DTOR_END__
01005da8 g     F .text	00000014 puts
0100b0a4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01001184 g     F .text	000000cc vPortFree
01001ca4 g     F .text	00000210 xQueueSemaphoreTake
01009a94 g     F .text	0000021c altera_avalon_jtag_uart_read
01008784 g     F .text	00000064 .hidden __udivsi3
01008c10 g     F .text	000000a4 isatty
01004cc4 g     F .text	00000060 uxTaskGetStackHighWaterMark
01000b80 g     F .text	0000008c vListInsertEnd
0100b014 g     F .text	00000090 alt_icache_flush
0100eaac g     O .bss	00000004 __malloc_top_pad
010003ec g     F .text	00000054 xEventGroupCreate
010061f4 g     F .text	000004bc __sfvwrite_r
010077e8 g     F .text	00000054 _sbrk_r
01000a04 g     F .text	0000003c vEventGroupSetBitsCallback
01004094 g     F .text	000000e0 xTaskResumeFromISR
0100857c g     F .text	00000060 _read_r
01000b54 g     F .text	0000002c vListInitialiseItem
0100cfa8 g     O .rwdata	00000004 alt_max_fd
01000f68 g     F .text	00000048 vPortSysTickHandler
01007b80 g     F .text	000000f0 _fclose_r
01001afc g     F .text	000001a8 xQueueReceive
01007efc g     F .text	00000030 fflush
0100eaa8 g     O .bss	00000004 __malloc_max_sbrked_mem
01003c70 g     F .text	0000004c uxTaskPriorityGetFromISR
01008a64 g     F .text	00000170 alt_irq_register
01008ddc g     F .text	000000d4 lseek
0100a150 g     F .text	00000050 altera_avalon_mutex_first_lock
0100cf88 g     O .rwdata	00000004 _global_impure_ptr
01000810 g     F .text	00000180 xEventGroupSetBits
01007284 g     F .text	00000564 _realloc_r
0180ecc0 g       *ABS*	00000000 __bss_end
0100a81c g     F .text	000000f0 alt_iic_isr_register
0100ad3c g     F .text	00000108 alt_tick
01000fb0 g     F .text	000001d4 pvPortMalloc
010061c4 g     F .text	00000018 __fp_lock_all
0100a7d0 g     F .text	0000004c alt_ic_irq_enabled
01002290 g     F .text	0000003c vQueueDelete
01000ec0 g     F .text	00000020 vPortEndScheduler
01000aec g     F .text	00000068 vListInitialise
01003144 g     F .text	00000058 xStreamBufferIsEmpty
0100aca0 g     F .text	0000009c alt_alarm_stop
0100eab4 g     O .bss	00000004 alt_irq_active
01000258 g     F .exceptions	000000d4 alt_irq_handler
0100bd68 g     O .rwdata	00000028 alt_dev_null
010043d0 g     F .text	00000028 xTaskGetTickCount
01001784 g     F .text	000001b4 xQueueGenericSend
01009f8c g     F .text	00000054 altera_avalon_mutex_open
01002a58 g     F .text	00000188 xStreamBufferSend
0100329c g     F .text	00000084 xStreamBufferReceiveCompletedFromISR
0100a3c0 g     F .text	00000048 alt_dcache_flush_all
01002efc g     F .text	000000a8 xStreamBufferNextMessageLengthBytes
01004f24 g     F .text	000000fc xTaskPriorityDisinherit
0100cfc8 g       *ABS*	00000000 __ram_rwdata_end
0100cfa0 g     O .rwdata	00000008 alt_dev_list
010091fc g     F .text	000000f8 write
010047c0 g     F .text	000000f4 xTaskRemoveFromEventList
0100cfb8 g     O .rwdata	00000008 alt_mutex_list
0100b53c g       *ABS*	00000000 __ram_rodata_end
010089b4 g     F .text	000000b0 fstat
0100076c g     F .text	00000068 xEventGroupClearBits
01001eb4 g     F .text	000001b0 xQueuePeek
010087e8 g     F .text	00000058 .hidden __umodsi3
0180ecc0 g       *ABS*	00000000 end
01002fa4 g     F .text	000000e4 xStreamBufferReceiveFromISR
010039e4 g     F .text	000000e8 vTaskDelete
010095d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100032c g     F .exceptions	00000074 alt_instruction_exception_entry
01005258 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0100b4d4 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100a218 g     F .text	0000007c alt_avalon_timer_sc_init
01009cb0 g     F .text	00000224 altera_avalon_jtag_uart_write
010061b4 g     F .text	00000004 __sfp_lock_acquire
01007044 g     F .text	000000e4 memchr
01004a04 g     F .text	000000e0 xTaskCheckForTimeOut
01008050 g     F .text	00000310 _free_r
01004de4 g     F .text	00000140 xTaskPriorityInherit
0100b320 g     F .text	00000180 __call_exitprocs
01002824 g     F .text	00000064 vStreamBufferDelete
01005290 g     F .text	000000b0 ulTaskNotifyTake
0100cf90 g     O .rwdata	00000004 __malloc_sbrk_base
010003a0 g     F .text	0000004c _start
0100eac4 g     O .bss	00000004 _alt_tick_rate
0100424c g     F .text	0000002c vTaskSuspendAll
0100319c g     F .text	0000007c xStreamBufferIsFull
010043f8 g     F .text	0000002c xTaskGetTickCountFromISR
0100eac8 g     O .bss	00000004 _alt_nticks
01008fb0 g     F .text	000000fc read
01009404 g     F .text	00000068 alt_sys_init
01000ce4 g     F .text	00000098 uxListRemove
0100b208 g     F .text	00000118 __register_exitproc
0100a088 g     F .text	00000054 altera_avalon_mutex_unlock
01002778 g     F .text	000000ac xStreamBufferGenericCreate
0100993c g     F .text	00000068 altera_avalon_jtag_uart_close
0100b53c g       *ABS*	00000000 __ram_rwdata_start
0100b4d4 g       *ABS*	00000000 __ram_rodata_start
0180eb98 g     O .bss	00000028 __malloc_current_mallinfo
010058e4 g     F .text	00000078 xTaskNotifyStateClear
01003fc8 g     F .text	000000cc vTaskResume
01004634 g     F .text	000000d8 vTaskSwitchContext
0100946c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100af70 g     F .text	000000a4 alt_get_fd
01007b2c g     F .text	00000054 _close_r
01005340 g     F .text	000000f4 xTaskNotifyWait
0100b18c g     F .text	0000007c memcmp
0100952c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0180ecc0 g       *ABS*	00000000 __alt_stack_base
0100957c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010079d8 g     F .text	00000154 __swsetup_r
01003e60 g     F .text	000000fc vTaskSuspend
01006074 g     F .text	00000118 __sfp
01004424 g     F .text	00000020 uxTaskGetNumberOfTasks
0100b960 g     O .rwdata	00000408 __malloc_av_
010061c0 g     F .text	00000004 __sinit_lock_release
0100783c g     F .text	00000054 __sread
0100ae68 g     F .text	00000108 alt_find_file
0100a444 g     F .text	000000a4 alt_dev_llist_insert
01008f2c g     F .text	00000024 __malloc_lock
01009110 g     F .text	000000b0 sbrk
01001690 g     F .text	0000009c xQueueTakeMutexRecursive
01007ea0 g     F .text	0000005c _fflush_r
01000990 g     F .text	00000074 vEventGroupDelete
01005434 g     F .text	000001ac xTaskGenericNotify
0100ea54 g       *ABS*	00000000 __bss_start
01005bc0 g     F .text	00000128 memset
01005a44 g     F .text	00000034 main
0100eac0 g     O .bss	00000004 alt_envp
0100eaa4 g     O .bss	00000004 __malloc_max_total_mem
010094cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01000c0c g     F .text	000000d8 vListInsert
01007970 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01007c70 g     F .text	00000014 fclose
0100a004 g     F .text	00000044 altera_avalon_mutex_lock
01006838 g     F .text	0000080c _malloc_r
0100cfac g     O .rwdata	00000004 alt_errno
01003acc g     F .text	000000f0 vTaskDelayUntil
010066b0 g     F .text	000000c4 _fwalk
01002064 g     F .text	000000e4 xQueueReceiveFromISR
01004dbc g     F .text	00000028 xTaskGetCurrentTaskHandle
0100868c g     F .text	00000084 .hidden __divsi3
01001418 g     F .text	000000a8 xQueueGenericCreate
01007f2c g     F .text	00000124 _malloc_trim_r
0100b4d4 g       *ABS*	00000000 __CTOR_END__
0100172c g     F .text	00000058 xQueueCreateCountingSemaphore
0100b4d4 g       *ABS*	00000000 __flash_rodata_start
0100b4d4 g       *ABS*	00000000 __DTOR_LIST__
01002924 g     F .text	0000006c xStreamBufferSetTriggerLevel
010055e0 g     F .text	000001e4 xTaskGenericNotifyFromISR
010093cc g     F .text	00000038 alt_irq_init
010090ac g     F .text	00000064 alt_release_fd
01004278 g     F .text	00000158 xTaskResumeAll
01002204 g     F .text	00000054 uxQueueSpacesAvailable
01004174 g     F .text	00000090 vTaskStartScheduler
0100b140 g     F .text	00000014 atexit
01007978 g     F .text	00000060 _write_r
01002728 g     F .text	00000050 xQueueIsQueueFullFromISR
0100cf8c g     O .rwdata	00000004 _impure_ptr
0100eab8 g     O .bss	00000004 alt_argc
01007c84 g     F .text	0000021c __sflush_r
0100a548 g     F .text	00000060 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
010061dc g     F .text	00000018 __fp_unlock_all
01004ae4 g     F .text	00000028 vTaskMissedYield
0100cf98 g     O .rwdata	00000008 alt_fs_list
010021c4 g     F .text	00000040 uxQueueMessagesWaiting
01004484 g     F .text	000001b0 xTaskIncrementTick
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100a66c g     F .text	00000050 alt_ic_isr_register
01001304 g     F .text	00000114 xQueueGenericReset
0100cfc8 g       *ABS*	00000000 _edata
0180ecc0 g       *ABS*	00000000 _end
010003a0 g       *ABS*	00000000 __ram_exceptions_end
010099a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100361c g     F .text	000000e8 xTaskCreate
01001270 g     F .text	00000020 vPortInitialiseBlocks
0100a744 g     F .text	0000008c alt_ic_irq_disable
01007898 g     F .text	0000007c __swrite
0100cf94 g     O .rwdata	00000004 __malloc_trim_threshold
0100b154 g     F .text	00000038 exit
01006774 g     F .text	000000c4 _fwalk_reent
01008710 g     F .text	00000074 .hidden __modsi3
01003bbc g     F .text	0000005c vTaskDelay
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010061b8 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01005020 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
0100b4a0 g     F .text	00000034 _exit
0100a294 g     F .text	0000012c alt_alarm_start
010083c0 g     F .text	000001bc __smakebuf_r
010051b4 g     F .text	00000060 vTaskExitCritical
01005dbc g     F .text	00000098 strlen
01000da8 g     F .text	000000e0 pxPortInitialiseStack
0100ab4c g     F .text	00000154 open
0100a638 g     F .text	00000034 alt_icache_flush_all
0100497c g     F .text	0000004c vTaskSetTimeOutState
0100cfb0 g     O .rwdata	00000004 alt_priority_mask
0100a6bc g     F .text	00000088 alt_ic_irq_enable
01009fe0 g     F .text	00000024 altera_avalon_mutex_close
01002258 g     F .text	00000038 uxQueueMessagesWaitingFromISR
01002688 g     F .text	00000048 xQueueIsQueueEmptyFromISR
01002a18 g     F .text	00000040 xStreamBufferBytesAvailable
0100cfc0 g     O .rwdata	00000008 alt_alarm_list
0100a4e8 g     F .text	00000060 _do_ctors
01005214 g     F .text	00000044 uxTaskResetEventItemValue
010015a4 g     F .text	0000005c xQueueCreateMutex
0100887c g     F .text	000000d0 close
010057c4 g     F .text	00000120 vTaskNotifyGiveFromISR
01008d1c g     F .text	00000084 alt_load
01000a40 g     F .text	0000003c vEventGroupClearBitsCallback
01003218 g     F .text	00000084 xStreamBufferSendCompletedFromISR
01001a20 g     F .text	000000dc xQueueGiveFromISR
010061bc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	0840e814 	ori	at,at,928
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__reset-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 1000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 1000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 1000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 100002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 1000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 1000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 1000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 100003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 1000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 1000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 1000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 100004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 1000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 100006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 1000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 1000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 1000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 100007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 1000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 1000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 1000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 100008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 1000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 1000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 1000098:	df001c15 	stw	fp,112(sp)

0100009c <save_sp_to_pxCurrentTCB>:
 100009c:	06004074 	movhi	et,257

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 10000a0:	c63a9a04 	addi	et,et,-5528
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 10000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 10000a8:	c6c00015 	stw	sp,0(et)

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 10000ac:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 10000b0:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 10000b4:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 10000b8:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 10000bc:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 10000c0:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 10000c4:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 10000c8:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 10000cc:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 10000d0:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 10000d4:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 10000d8:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 10000dc:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 10000e0:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 10000e4:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 10000e8:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 10000ec:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 10000f0:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 10000f4:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 10000f8:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000fc:	dbc01215 	stw	r15,72(sp)

01000100 <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 1000100:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 1000104:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 1000108:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 100010c:	10002d26 	beq	r2,zero,10001c4 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 1000110:	20002c26 	beq	r4,zero,10001c4 <soft_exceptions>
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000114:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000118:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100011c:	10002726 	beq	r2,zero,10001bc <restore_context+0x80>
        beq   r4, zero, .Lnot_irq
 1000120:	20002626 	beq	r4,zero,10001bc <restore_context+0x80>

01000124 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 1000124:	10002580 	call	1000258 <alt_irq_handler>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000128:	10002580 	call	1000258 <alt_irq_handler>

0100012c <restore_sp_from_pxCurrentTCB>:
 100012c:	06004074 	movhi	et,257

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 1000130:	c63a9a04 	addi	et,et,-5528
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 1000134:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 1000138:	c6c00017 	ldw	sp,0(et)

0100013c <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 100013c:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 1000140:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 1000144:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 1000148:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 100014c:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 1000150:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 1000154:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 1000158:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 100015c:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 1000160:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 1000164:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 1000168:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 100016c:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 1000170:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 1000174:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 1000178:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 100017c:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 1000180:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 1000184:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 1000188:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 100018c:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 1000190:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 1000194:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 1000198:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 100019c:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 10001a0:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 10001a4:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 10001a8:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 10001ac:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 10001b0:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 10001b4:	ef80083a 	eret

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 10001b8:	00001206 	br	1000204 <call_scheduler+0x24>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 10001bc:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 10001c0:	e8bfff17 	ldw	r2,-4(ea)

010001c4 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 10001c4:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 10001c8:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 10001cc:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 10001d0:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 10001d4:	c0000226 	beq	et,zero,10001e0 <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 10001d8:	003da03a 	break	0
  	br		restore_context			# its something else
 10001dc:	003fd706 	br	100013c <__alt_data_end+0xff00013c>

010001e0 <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 10001e0:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 10001e4:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 10001e8:	10046340 	call	1004634 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 10001ec:	003fcf06 	br	100012c <__alt_data_end+0xff00012c>
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 10001f0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 10001f4:	100032c0 	call	100032c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 10001f8:	1000021e 	bne	r2,zero,1000204 <call_scheduler+0x24>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10001fc:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000200:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000204:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 1000208:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 100020c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 1000210:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 1000214:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 1000218:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 100021c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 1000220:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 1000224:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 1000228:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 100022c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 1000230:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 1000234:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 1000238:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 100023c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 1000240:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 1000244:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 1000248:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 100024c:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 1000250:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 1000254:	ef80083a 	eret

01000258 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 1000258:	defff904 	addi	sp,sp,-28
 100025c:	dfc00615 	stw	ra,24(sp)
 1000260:	df000515 	stw	fp,20(sp)
 1000264:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 1000268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100026c:	0005313a 	rdctl	r2,ipending
 1000270:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000274:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000278:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 100027c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000280:	00800044 	movi	r2,1
 1000284:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000288:	e0fffb17 	ldw	r3,-20(fp)
 100028c:	e0bffc17 	ldw	r2,-16(fp)
 1000290:	1884703a 	and	r2,r3,r2
 1000294:	10001426 	beq	r2,zero,10002e8 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000298:	00806074 	movhi	r2,385
 100029c:	10baf004 	addi	r2,r2,-5184
 10002a0:	e0fffd17 	ldw	r3,-12(fp)
 10002a4:	180690fa 	slli	r3,r3,3
 10002a8:	10c5883a 	add	r2,r2,r3
 10002ac:	10c00017 	ldw	r3,0(r2)
 10002b0:	00806074 	movhi	r2,385
 10002b4:	10baf004 	addi	r2,r2,-5184
 10002b8:	e13ffd17 	ldw	r4,-12(fp)
 10002bc:	200890fa 	slli	r4,r4,3
 10002c0:	1105883a 	add	r2,r2,r4
 10002c4:	10800104 	addi	r2,r2,4
 10002c8:	10800017 	ldw	r2,0(r2)
 10002cc:	1009883a 	mov	r4,r2
 10002d0:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 10002d4:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10002d8:	0005313a 	rdctl	r2,ipending
 10002dc:	e0bfff15 	stw	r2,-4(fp)

  return active;
 10002e0:	e0bfff17 	ldw	r2,-4(fp)
 10002e4:	00000706 	br	1000304 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 10002e8:	e0bffc17 	ldw	r2,-16(fp)
 10002ec:	1085883a 	add	r2,r2,r2
 10002f0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	10800044 	addi	r2,r2,1
 10002fc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1000300:	003fe106 	br	1000288 <__alt_data_end+0xff000288>

    active = alt_irq_pending ();
 1000304:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1000308:	e0bffb17 	ldw	r2,-20(fp)
 100030c:	103fdb1e 	bne	r2,zero,100027c <__alt_data_end+0xff00027c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1000310:	0001883a 	nop
}
 1000314:	0001883a 	nop
 1000318:	e037883a 	mov	sp,fp
 100031c:	dfc00117 	ldw	ra,4(sp)
 1000320:	df000017 	ldw	fp,0(sp)
 1000324:	dec00204 	addi	sp,sp,8
 1000328:	f800283a 	ret

0100032c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 100032c:	defffb04 	addi	sp,sp,-20
 1000330:	dfc00415 	stw	ra,16(sp)
 1000334:	df000315 	stw	fp,12(sp)
 1000338:	df000304 	addi	fp,sp,12
 100033c:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1000340:	000531fa 	rdctl	r2,exception
 1000344:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1000348:	e0bffd17 	ldw	r2,-12(fp)
 100034c:	10801f0c 	andi	r2,r2,124
 1000350:	1004d0ba 	srli	r2,r2,2
 1000354:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1000358:	0005333a 	rdctl	r2,badaddr
 100035c:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000360:	d0a6d317 	ldw	r2,-25780(gp)
 1000364:	10000726 	beq	r2,zero,1000384 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1000368:	d0a6d317 	ldw	r2,-25780(gp)
 100036c:	e0fffd17 	ldw	r3,-12(fp)
 1000370:	e1bffe17 	ldw	r6,-8(fp)
 1000374:	e17fff17 	ldw	r5,-4(fp)
 1000378:	1809883a 	mov	r4,r3
 100037c:	103ee83a 	callr	r2
 1000380:	00000206 	br	100038c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000384:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000388:	0005883a 	mov	r2,zero
}
 100038c:	e037883a 	mov	sp,fp
 1000390:	dfc00117 	ldw	ra,4(sp)
 1000394:	df000017 	ldw	fp,0(sp)
 1000398:	dec00204 	addi	sp,sp,8
 100039c:	f800283a 	ret

Disassembly of section .text:

010003a0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10003a0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10003a4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10003a8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10003ac:	00bffd16 	blt	zero,r2,10003a4 <__alt_data_end+0xff0003a4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10003b0:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10003b4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10003b8:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10003bc:	d693e014 	ori	gp,gp,20352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10003c0:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10003c4:	10ba9514 	ori	r2,r2,59988

    movhi r3, %hi(__bss_end)
 10003c8:	00c06034 	movhi	r3,384
    ori r3, r3, %lo(__bss_end)
 10003cc:	18fb3014 	ori	r3,r3,60608

    beq r2, r3, 1f
 10003d0:	10c00326 	beq	r2,r3,10003e0 <_start+0x40>

0:
    stw zero, (r2)
 10003d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10003d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10003dc:	10fffd36 	bltu	r2,r3,10003d4 <__alt_data_end+0xff0003d4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10003e0:	1008d1c0 	call	1008d1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10003e4:	1008eb00 	call	1008eb0 <alt_main>

010003e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10003e8:	003fff06 	br	10003e8 <__alt_data_end+0xff0003e8>

010003ec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 10003ec:	defffd04 	addi	sp,sp,-12
 10003f0:	dfc00215 	stw	ra,8(sp)
 10003f4:	df000115 	stw	fp,4(sp)
 10003f8:	df000104 	addi	fp,sp,4
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 10003fc:	01000604 	movi	r4,24
 1000400:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1000404:	e0bfff15 	stw	r2,-4(fp)

		if( pxEventBits != NULL )
 1000408:	e0bfff17 	ldw	r2,-4(fp)
 100040c:	10000626 	beq	r2,zero,1000428 <xEventGroupCreate+0x3c>
		{
			pxEventBits->uxEventBits = 0;
 1000410:	e0bfff17 	ldw	r2,-4(fp)
 1000414:	10000015 	stw	zero,0(r2)
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 1000418:	e0bfff17 	ldw	r2,-4(fp)
 100041c:	10800104 	addi	r2,r2,4
 1000420:	1009883a 	mov	r4,r2
 1000424:	1000aec0 	call	1000aec <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 1000428:	e0bfff17 	ldw	r2,-4(fp)
	}
 100042c:	e037883a 	mov	sp,fp
 1000430:	dfc00117 	ldw	ra,4(sp)
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00204 	addi	sp,sp,8
 100043c:	f800283a 	ret

01000440 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 1000440:	defff504 	addi	sp,sp,-44
 1000444:	dfc00a15 	stw	ra,40(sp)
 1000448:	df000915 	stw	fp,36(sp)
 100044c:	df000904 	addi	fp,sp,36
 1000450:	e13ffc15 	stw	r4,-16(fp)
 1000454:	e17ffd15 	stw	r5,-12(fp)
 1000458:	e1bffe15 	stw	r6,-8(fp)
 100045c:	e1ffff15 	stw	r7,-4(fp)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 1000460:	e0bffc17 	ldw	r2,-16(fp)
 1000464:	e0bff815 	stw	r2,-32(fp)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 1000468:	e03ff915 	stw	zero,-28(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 100046c:	100424c0 	call	100424c <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 1000470:	e0bff817 	ldw	r2,-32(fp)
 1000474:	10800017 	ldw	r2,0(r2)
 1000478:	e0bffa15 	stw	r2,-24(fp)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 100047c:	e17ffd17 	ldw	r5,-12(fp)
 1000480:	e13ffc17 	ldw	r4,-16(fp)
 1000484:	10008100 	call	1000810 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000488:	e0fffa17 	ldw	r3,-24(fp)
 100048c:	e0bffd17 	ldw	r2,-12(fp)
 1000490:	1886b03a 	or	r3,r3,r2
 1000494:	e0bffe17 	ldw	r2,-8(fp)
 1000498:	1886703a 	and	r3,r3,r2
 100049c:	e0bffe17 	ldw	r2,-8(fp)
 10004a0:	18800d1e 	bne	r3,r2,10004d8 <xEventGroupSync+0x98>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 10004a4:	e0fffa17 	ldw	r3,-24(fp)
 10004a8:	e0bffd17 	ldw	r2,-12(fp)
 10004ac:	1884b03a 	or	r2,r3,r2
 10004b0:	e0bff715 	stw	r2,-36(fp)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 10004b4:	e0bff817 	ldw	r2,-32(fp)
 10004b8:	10c00017 	ldw	r3,0(r2)
 10004bc:	e0bffe17 	ldw	r2,-8(fp)
 10004c0:	0084303a 	nor	r2,zero,r2
 10004c4:	1886703a 	and	r3,r3,r2
 10004c8:	e0bff817 	ldw	r2,-32(fp)
 10004cc:	10c00015 	stw	r3,0(r2)

			xTicksToWait = 0;
 10004d0:	e03fff15 	stw	zero,-4(fp)
 10004d4:	00001106 	br	100051c <xEventGroupSync+0xdc>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 10004d8:	e0bfff17 	ldw	r2,-4(fp)
 10004dc:	10000a26 	beq	r2,zero,1000508 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 10004e0:	e0bff817 	ldw	r2,-32(fp)
 10004e4:	10c00104 	addi	r3,r2,4
 10004e8:	e0bffe17 	ldw	r2,-8(fp)
 10004ec:	10814034 	orhi	r2,r2,1280
 10004f0:	e1bfff17 	ldw	r6,-4(fp)
 10004f4:	100b883a 	mov	r5,r2
 10004f8:	1809883a 	mov	r4,r3
 10004fc:	100475c0 	call	100475c <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 1000500:	e03ff715 	stw	zero,-36(fp)
 1000504:	00000506 	br	100051c <xEventGroupSync+0xdc>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 1000508:	e0bff817 	ldw	r2,-32(fp)
 100050c:	10800017 	ldw	r2,0(r2)
 1000510:	e0bff715 	stw	r2,-36(fp)
				xTimeoutOccurred = pdTRUE;
 1000514:	00800044 	movi	r2,1
 1000518:	e0bff915 	stw	r2,-28(fp)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 100051c:	10042780 	call	1004278 <xTaskResumeAll>
 1000520:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 1000524:	e0bfff17 	ldw	r2,-4(fp)
 1000528:	10002026 	beq	r2,zero,10005ac <xEventGroupSync+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
 100052c:	e0bffb17 	ldw	r2,-20(fp)
 1000530:	1000011e 	bne	r2,zero,1000538 <xEventGroupSync+0xf8>
		{
			portYIELD_WITHIN_API();
 1000534:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 1000538:	10052140 	call	1005214 <uxTaskResetEventItemValue>
 100053c:	e0bff715 	stw	r2,-36(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 1000540:	e0bff717 	ldw	r2,-36(fp)
 1000544:	1080802c 	andhi	r2,r2,512
 1000548:	1000131e 	bne	r2,zero,1000598 <xEventGroupSync+0x158>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 100054c:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 1000550:	e0bff817 	ldw	r2,-32(fp)
 1000554:	10800017 	ldw	r2,0(r2)
 1000558:	e0bff715 	stw	r2,-36(fp)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 100055c:	e0fff717 	ldw	r3,-36(fp)
 1000560:	e0bffe17 	ldw	r2,-8(fp)
 1000564:	1886703a 	and	r3,r3,r2
 1000568:	e0bffe17 	ldw	r2,-8(fp)
 100056c:	1880071e 	bne	r3,r2,100058c <xEventGroupSync+0x14c>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000570:	e0bff817 	ldw	r2,-32(fp)
 1000574:	10c00017 	ldw	r3,0(r2)
 1000578:	e0bffe17 	ldw	r2,-8(fp)
 100057c:	0084303a 	nor	r2,zero,r2
 1000580:	1886703a 	and	r3,r3,r2
 1000584:	e0bff817 	ldw	r2,-32(fp)
 1000588:	10c00015 	stw	r3,0(r2)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 100058c:	10051b40 	call	10051b4 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
 1000590:	00800044 	movi	r2,1
 1000594:	e0bff915 	stw	r2,-28(fp)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000598:	e0fff717 	ldw	r3,-36(fp)
 100059c:	00804034 	movhi	r2,256
 10005a0:	10bfffc4 	addi	r2,r2,-1
 10005a4:	1884703a 	and	r2,r3,r2
 10005a8:	e0bff715 	stw	r2,-36(fp)
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 10005ac:	e0bff717 	ldw	r2,-36(fp)
}
 10005b0:	e037883a 	mov	sp,fp
 10005b4:	dfc00117 	ldw	ra,4(sp)
 10005b8:	df000017 	ldw	fp,0(sp)
 10005bc:	dec00204 	addi	sp,sp,8
 10005c0:	f800283a 	ret

010005c4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 10005c4:	defff304 	addi	sp,sp,-52
 10005c8:	dfc00c15 	stw	ra,48(sp)
 10005cc:	df000b15 	stw	fp,44(sp)
 10005d0:	df000b04 	addi	fp,sp,44
 10005d4:	e13ffc15 	stw	r4,-16(fp)
 10005d8:	e17ffd15 	stw	r5,-12(fp)
 10005dc:	e1bffe15 	stw	r6,-8(fp)
 10005e0:	e1ffff15 	stw	r7,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10005e4:	e0bffc17 	ldw	r2,-16(fp)
 10005e8:	e0bff715 	stw	r2,-36(fp)
EventBits_t uxReturn, uxControlBits = 0;
 10005ec:	e03ff615 	stw	zero,-40(fp)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 10005f0:	e03ff815 	stw	zero,-32(fp)
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 10005f4:	100424c0 	call	100424c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 10005f8:	e0bff717 	ldw	r2,-36(fp)
 10005fc:	10800017 	ldw	r2,0(r2)
 1000600:	e0bff915 	stw	r2,-28(fp)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 1000604:	e1bfff17 	ldw	r6,-4(fp)
 1000608:	e17ffd17 	ldw	r5,-12(fp)
 100060c:	e13ff917 	ldw	r4,-28(fp)
 1000610:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 1000614:	e0bffa15 	stw	r2,-24(fp)

		if( xWaitConditionMet != pdFALSE )
 1000618:	e0bffa17 	ldw	r2,-24(fp)
 100061c:	10000d26 	beq	r2,zero,1000654 <xEventGroupWaitBits+0x90>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 1000620:	e0bff917 	ldw	r2,-28(fp)
 1000624:	e0bff515 	stw	r2,-44(fp)
			xTicksToWait = ( TickType_t ) 0;
 1000628:	e0000215 	stw	zero,8(fp)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 100062c:	e0bffe17 	ldw	r2,-8(fp)
 1000630:	10002226 	beq	r2,zero,10006bc <xEventGroupWaitBits+0xf8>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000634:	e0bff717 	ldw	r2,-36(fp)
 1000638:	10c00017 	ldw	r3,0(r2)
 100063c:	e0bffd17 	ldw	r2,-12(fp)
 1000640:	0084303a 	nor	r2,zero,r2
 1000644:	1886703a 	and	r3,r3,r2
 1000648:	e0bff717 	ldw	r2,-36(fp)
 100064c:	10c00015 	stw	r3,0(r2)
 1000650:	00001a06 	br	10006bc <xEventGroupWaitBits+0xf8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 1000654:	e0800217 	ldw	r2,8(fp)
 1000658:	1000051e 	bne	r2,zero,1000670 <xEventGroupWaitBits+0xac>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 100065c:	e0bff917 	ldw	r2,-28(fp)
 1000660:	e0bff515 	stw	r2,-44(fp)
			xTimeoutOccurred = pdTRUE;
 1000664:	00800044 	movi	r2,1
 1000668:	e0bff815 	stw	r2,-32(fp)
 100066c:	00001306 	br	10006bc <xEventGroupWaitBits+0xf8>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 1000670:	e0bffe17 	ldw	r2,-8(fp)
 1000674:	10000326 	beq	r2,zero,1000684 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 1000678:	e0bff617 	ldw	r2,-40(fp)
 100067c:	10804034 	orhi	r2,r2,256
 1000680:	e0bff615 	stw	r2,-40(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 1000684:	e0bfff17 	ldw	r2,-4(fp)
 1000688:	10000326 	beq	r2,zero,1000698 <xEventGroupWaitBits+0xd4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 100068c:	e0bff617 	ldw	r2,-40(fp)
 1000690:	10810034 	orhi	r2,r2,1024
 1000694:	e0bff615 	stw	r2,-40(fp)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 1000698:	e0bff717 	ldw	r2,-36(fp)
 100069c:	11000104 	addi	r4,r2,4
 10006a0:	e0fffd17 	ldw	r3,-12(fp)
 10006a4:	e0bff617 	ldw	r2,-40(fp)
 10006a8:	1884b03a 	or	r2,r3,r2
 10006ac:	e1800217 	ldw	r6,8(fp)
 10006b0:	100b883a 	mov	r5,r2
 10006b4:	100475c0 	call	100475c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 10006b8:	e03ff515 	stw	zero,-44(fp)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 10006bc:	10042780 	call	1004278 <xTaskResumeAll>
 10006c0:	e0bffb15 	stw	r2,-20(fp)

	if( xTicksToWait != ( TickType_t ) 0 )
 10006c4:	e0800217 	ldw	r2,8(fp)
 10006c8:	10002226 	beq	r2,zero,1000754 <xEventGroupWaitBits+0x190>
	{
		if( xAlreadyYielded == pdFALSE )
 10006cc:	e0bffb17 	ldw	r2,-20(fp)
 10006d0:	1000011e 	bne	r2,zero,10006d8 <xEventGroupWaitBits+0x114>
		{
			portYIELD_WITHIN_API();
 10006d4:	003b683a 	trap	0

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 10006d8:	10052140 	call	1005214 <uxTaskResetEventItemValue>
 10006dc:	e0bff515 	stw	r2,-44(fp)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 10006e0:	e0bff517 	ldw	r2,-44(fp)
 10006e4:	1080802c 	andhi	r2,r2,512
 10006e8:	1000151e 	bne	r2,zero,1000740 <xEventGroupWaitBits+0x17c>
		{
			taskENTER_CRITICAL();
 10006ec:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 10006f0:	e0bff717 	ldw	r2,-36(fp)
 10006f4:	10800017 	ldw	r2,0(r2)
 10006f8:	e0bff515 	stw	r2,-44(fp)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 10006fc:	e1bfff17 	ldw	r6,-4(fp)
 1000700:	e17ffd17 	ldw	r5,-12(fp)
 1000704:	e13ff517 	ldw	r4,-44(fp)
 1000708:	1000a7c0 	call	1000a7c <prvTestWaitCondition>
 100070c:	10000926 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
				{
					if( xClearOnExit != pdFALSE )
 1000710:	e0bffe17 	ldw	r2,-8(fp)
 1000714:	10000726 	beq	r2,zero,1000734 <xEventGroupWaitBits+0x170>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 1000718:	e0bff717 	ldw	r2,-36(fp)
 100071c:	10c00017 	ldw	r3,0(r2)
 1000720:	e0bffd17 	ldw	r2,-12(fp)
 1000724:	0084303a 	nor	r2,zero,r2
 1000728:	1886703a 	and	r3,r3,r2
 100072c:	e0bff717 	ldw	r2,-36(fp)
 1000730:	10c00015 	stw	r3,0(r2)
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 1000734:	00800044 	movi	r2,1
 1000738:	e0bff815 	stw	r2,-32(fp)
			}
			taskEXIT_CRITICAL();
 100073c:	10051b40 	call	10051b4 <vTaskExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 1000740:	e0fff517 	ldw	r3,-44(fp)
 1000744:	00804034 	movhi	r2,256
 1000748:	10bfffc4 	addi	r2,r2,-1
 100074c:	1884703a 	and	r2,r3,r2
 1000750:	e0bff515 	stw	r2,-44(fp)
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 1000754:	e0bff517 	ldw	r2,-44(fp)
}
 1000758:	e037883a 	mov	sp,fp
 100075c:	dfc00117 	ldw	ra,4(sp)
 1000760:	df000017 	ldw	fp,0(sp)
 1000764:	dec00204 	addi	sp,sp,8
 1000768:	f800283a 	ret

0100076c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 100076c:	defffa04 	addi	sp,sp,-24
 1000770:	dfc00515 	stw	ra,20(sp)
 1000774:	df000415 	stw	fp,16(sp)
 1000778:	df000404 	addi	fp,sp,16
 100077c:	e13ffe15 	stw	r4,-8(fp)
 1000780:	e17fff15 	stw	r5,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 1000784:	e0bffe17 	ldw	r2,-8(fp)
 1000788:	e0bffc15 	stw	r2,-16(fp)
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
 100078c:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 1000790:	e0bffc17 	ldw	r2,-16(fp)
 1000794:	10800017 	ldw	r2,0(r2)
 1000798:	e0bffd15 	stw	r2,-12(fp)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 100079c:	e0bffc17 	ldw	r2,-16(fp)
 10007a0:	10c00017 	ldw	r3,0(r2)
 10007a4:	e0bfff17 	ldw	r2,-4(fp)
 10007a8:	0084303a 	nor	r2,zero,r2
 10007ac:	1886703a 	and	r3,r3,r2
 10007b0:	e0bffc17 	ldw	r2,-16(fp)
 10007b4:	10c00015 	stw	r3,0(r2)
	}
	taskEXIT_CRITICAL();
 10007b8:	10051b40 	call	10051b4 <vTaskExitCritical>

	return uxReturn;
 10007bc:	e0bffd17 	ldw	r2,-12(fp)
}
 10007c0:	e037883a 	mov	sp,fp
 10007c4:	dfc00117 	ldw	ra,4(sp)
 10007c8:	df000017 	ldw	fp,0(sp)
 10007cc:	dec00204 	addi	sp,sp,8
 10007d0:	f800283a 	ret

010007d4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 10007d4:	defffb04 	addi	sp,sp,-20
 10007d8:	df000415 	stw	fp,16(sp)
 10007dc:	df000404 	addi	fp,sp,16
 10007e0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 10007e4:	e0bfff17 	ldw	r2,-4(fp)
 10007e8:	e0bffc15 	stw	r2,-16(fp)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10007ec:	e03ffd15 	stw	zero,-12(fp)
	{
		uxReturn = pxEventBits->uxEventBits;
 10007f0:	e0bffc17 	ldw	r2,-16(fp)
 10007f4:	10800017 	ldw	r2,0(r2)
 10007f8:	e0bffe15 	stw	r2,-8(fp)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 10007fc:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 1000800:	e037883a 	mov	sp,fp
 1000804:	df000017 	ldw	fp,0(sp)
 1000808:	dec00104 	addi	sp,sp,4
 100080c:	f800283a 	ret

01000810 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 1000810:	defff304 	addi	sp,sp,-52
 1000814:	dfc00c15 	stw	ra,48(sp)
 1000818:	df000b15 	stw	fp,44(sp)
 100081c:	df000b04 	addi	fp,sp,44
 1000820:	e13ffe15 	stw	r4,-8(fp)
 1000824:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 1000828:	e03ff615 	stw	zero,-40(fp)
EventGroup_t *pxEventBits = xEventGroup;
 100082c:	e0bffe17 	ldw	r2,-8(fp)
 1000830:	e0bff815 	stw	r2,-32(fp)
BaseType_t xMatchFound = pdFALSE;
 1000834:	e03ff715 	stw	zero,-36(fp)
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
 1000838:	e0bff817 	ldw	r2,-32(fp)
 100083c:	10800104 	addi	r2,r2,4
 1000840:	e0bff915 	stw	r2,-28(fp)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000844:	e0bff917 	ldw	r2,-28(fp)
 1000848:	10800204 	addi	r2,r2,8
 100084c:	e0bffa15 	stw	r2,-24(fp)
	vTaskSuspendAll();
 1000850:	100424c0 	call	100424c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 1000854:	e0bff917 	ldw	r2,-28(fp)
 1000858:	10800317 	ldw	r2,12(r2)
 100085c:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 1000860:	e0bff817 	ldw	r2,-32(fp)
 1000864:	10c00017 	ldw	r3,0(r2)
 1000868:	e0bfff17 	ldw	r2,-4(fp)
 100086c:	1886b03a 	or	r3,r3,r2
 1000870:	e0bff817 	ldw	r2,-32(fp)
 1000874:	10c00015 	stw	r3,0(r2)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000878:	00003306 	br	1000948 <xEventGroupSetBits+0x138>
		{
			pxNext = listGET_NEXT( pxListItem );
 100087c:	e0bff517 	ldw	r2,-44(fp)
 1000880:	10800117 	ldw	r2,4(r2)
 1000884:	e0bffb15 	stw	r2,-20(fp)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 1000888:	e0bff517 	ldw	r2,-44(fp)
 100088c:	10800017 	ldw	r2,0(r2)
 1000890:	e0bffc15 	stw	r2,-16(fp)
			xMatchFound = pdFALSE;
 1000894:	e03ff715 	stw	zero,-36(fp)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 1000898:	e0bffc17 	ldw	r2,-16(fp)
 100089c:	10bfc02c 	andhi	r2,r2,65280
 10008a0:	e0bffd15 	stw	r2,-12(fp)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 10008a4:	e0fffc17 	ldw	r3,-16(fp)
 10008a8:	00804034 	movhi	r2,256
 10008ac:	10bfffc4 	addi	r2,r2,-1
 10008b0:	1884703a 	and	r2,r3,r2
 10008b4:	e0bffc15 	stw	r2,-16(fp)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 10008b8:	e0bffd17 	ldw	r2,-12(fp)
 10008bc:	1081002c 	andhi	r2,r2,1024
 10008c0:	1000081e 	bne	r2,zero,10008e4 <xEventGroupSetBits+0xd4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 10008c4:	e0bff817 	ldw	r2,-32(fp)
 10008c8:	10c00017 	ldw	r3,0(r2)
 10008cc:	e0bffc17 	ldw	r2,-16(fp)
 10008d0:	1884703a 	and	r2,r3,r2
 10008d4:	10000b26 	beq	r2,zero,1000904 <xEventGroupSetBits+0xf4>
				{
					xMatchFound = pdTRUE;
 10008d8:	00800044 	movi	r2,1
 10008dc:	e0bff715 	stw	r2,-36(fp)
 10008e0:	00000806 	br	1000904 <xEventGroupSetBits+0xf4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 10008e4:	e0bff817 	ldw	r2,-32(fp)
 10008e8:	10c00017 	ldw	r3,0(r2)
 10008ec:	e0bffc17 	ldw	r2,-16(fp)
 10008f0:	1886703a 	and	r3,r3,r2
 10008f4:	e0bffc17 	ldw	r2,-16(fp)
 10008f8:	1880021e 	bne	r3,r2,1000904 <xEventGroupSetBits+0xf4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 10008fc:	00800044 	movi	r2,1
 1000900:	e0bff715 	stw	r2,-36(fp)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 1000904:	e0bff717 	ldw	r2,-36(fp)
 1000908:	10000d26 	beq	r2,zero,1000940 <xEventGroupSetBits+0x130>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 100090c:	e0bffd17 	ldw	r2,-12(fp)
 1000910:	1080402c 	andhi	r2,r2,256
 1000914:	10000426 	beq	r2,zero,1000928 <xEventGroupSetBits+0x118>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 1000918:	e0fff617 	ldw	r3,-40(fp)
 100091c:	e0bffc17 	ldw	r2,-16(fp)
 1000920:	1884b03a 	or	r2,r3,r2
 1000924:	e0bff615 	stw	r2,-40(fp)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 1000928:	e0bff817 	ldw	r2,-32(fp)
 100092c:	10800017 	ldw	r2,0(r2)
 1000930:	10808034 	orhi	r2,r2,512
 1000934:	100b883a 	mov	r5,r2
 1000938:	e13ff517 	ldw	r4,-44(fp)
 100093c:	10048b40 	call	10048b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 1000940:	e0bffb17 	ldw	r2,-20(fp)
 1000944:	e0bff515 	stw	r2,-44(fp)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 1000948:	e0fff517 	ldw	r3,-44(fp)
 100094c:	e0bffa17 	ldw	r2,-24(fp)
 1000950:	18bfca1e 	bne	r3,r2,100087c <__alt_data_end+0xff00087c>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 1000954:	e0bff817 	ldw	r2,-32(fp)
 1000958:	10c00017 	ldw	r3,0(r2)
 100095c:	e0bff617 	ldw	r2,-40(fp)
 1000960:	0084303a 	nor	r2,zero,r2
 1000964:	1886703a 	and	r3,r3,r2
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	10c00015 	stw	r3,0(r2)
	}
	( void ) xTaskResumeAll();
 1000970:	10042780 	call	1004278 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 1000974:	e0bff817 	ldw	r2,-32(fp)
 1000978:	10800017 	ldw	r2,0(r2)
}
 100097c:	e037883a 	mov	sp,fp
 1000980:	dfc00117 	ldw	ra,4(sp)
 1000984:	df000017 	ldw	fp,0(sp)
 1000988:	dec00204 	addi	sp,sp,8
 100098c:	f800283a 	ret

01000990 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 1000990:	defffb04 	addi	sp,sp,-20
 1000994:	dfc00415 	stw	ra,16(sp)
 1000998:	df000315 	stw	fp,12(sp)
 100099c:	df000304 	addi	fp,sp,12
 10009a0:	e13fff15 	stw	r4,-4(fp)
EventGroup_t *pxEventBits = xEventGroup;
 10009a4:	e0bfff17 	ldw	r2,-4(fp)
 10009a8:	e0bffd15 	stw	r2,-12(fp)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 10009ac:	e0bffd17 	ldw	r2,-12(fp)
 10009b0:	10800104 	addi	r2,r2,4
 10009b4:	e0bffe15 	stw	r2,-8(fp)

	vTaskSuspendAll();
 10009b8:	100424c0 	call	100424c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009bc:	00000506 	br	10009d4 <vEventGroupDelete+0x44>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 10009c0:	e0bffe17 	ldw	r2,-8(fp)
 10009c4:	10800317 	ldw	r2,12(r2)
 10009c8:	01408034 	movhi	r5,512
 10009cc:	1009883a 	mov	r4,r2
 10009d0:	10048b40 	call	10048b4 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 10009d4:	e0bffe17 	ldw	r2,-8(fp)
 10009d8:	10800017 	ldw	r2,0(r2)
 10009dc:	103ff81e 	bne	r2,zero,10009c0 <__alt_data_end+0xff0009c0>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 10009e0:	e13ffd17 	ldw	r4,-12(fp)
 10009e4:	10011840 	call	1001184 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 10009e8:	10042780 	call	1004278 <xTaskResumeAll>
}
 10009ec:	0001883a 	nop
 10009f0:	e037883a 	mov	sp,fp
 10009f4:	dfc00117 	ldw	ra,4(sp)
 10009f8:	df000017 	ldw	fp,0(sp)
 10009fc:	dec00204 	addi	sp,sp,8
 1000a00:	f800283a 	ret

01000a04 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 1000a04:	defffc04 	addi	sp,sp,-16
 1000a08:	dfc00315 	stw	ra,12(sp)
 1000a0c:	df000215 	stw	fp,8(sp)
 1000a10:	df000204 	addi	fp,sp,8
 1000a14:	e13ffe15 	stw	r4,-8(fp)
 1000a18:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a1c:	e17fff17 	ldw	r5,-4(fp)
 1000a20:	e13ffe17 	ldw	r4,-8(fp)
 1000a24:	10008100 	call	1000810 <xEventGroupSetBits>
}
 1000a28:	0001883a 	nop
 1000a2c:	e037883a 	mov	sp,fp
 1000a30:	dfc00117 	ldw	ra,4(sp)
 1000a34:	df000017 	ldw	fp,0(sp)
 1000a38:	dec00204 	addi	sp,sp,8
 1000a3c:	f800283a 	ret

01000a40 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 1000a40:	defffc04 	addi	sp,sp,-16
 1000a44:	dfc00315 	stw	ra,12(sp)
 1000a48:	df000215 	stw	fp,8(sp)
 1000a4c:	df000204 	addi	fp,sp,8
 1000a50:	e13ffe15 	stw	r4,-8(fp)
 1000a54:	e17fff15 	stw	r5,-4(fp)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 1000a58:	e17fff17 	ldw	r5,-4(fp)
 1000a5c:	e13ffe17 	ldw	r4,-8(fp)
 1000a60:	100076c0 	call	100076c <xEventGroupClearBits>
}
 1000a64:	0001883a 	nop
 1000a68:	e037883a 	mov	sp,fp
 1000a6c:	dfc00117 	ldw	ra,4(sp)
 1000a70:	df000017 	ldw	fp,0(sp)
 1000a74:	dec00204 	addi	sp,sp,8
 1000a78:	f800283a 	ret

01000a7c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 1000a7c:	defffb04 	addi	sp,sp,-20
 1000a80:	df000415 	stw	fp,16(sp)
 1000a84:	df000404 	addi	fp,sp,16
 1000a88:	e13ffd15 	stw	r4,-12(fp)
 1000a8c:	e17ffe15 	stw	r5,-8(fp)
 1000a90:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xWaitConditionMet = pdFALSE;
 1000a94:	e03ffc15 	stw	zero,-16(fp)

	if( xWaitForAllBits == pdFALSE )
 1000a98:	e0bfff17 	ldw	r2,-4(fp)
 1000a9c:	1000071e 	bne	r2,zero,1000abc <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 1000aa0:	e0fffd17 	ldw	r3,-12(fp)
 1000aa4:	e0bffe17 	ldw	r2,-8(fp)
 1000aa8:	1884703a 	and	r2,r3,r2
 1000aac:	10000a26 	beq	r2,zero,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ab0:	00800044 	movi	r2,1
 1000ab4:	e0bffc15 	stw	r2,-16(fp)
 1000ab8:	00000706 	br	1000ad8 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 1000abc:	e0fffd17 	ldw	r3,-12(fp)
 1000ac0:	e0bffe17 	ldw	r2,-8(fp)
 1000ac4:	1886703a 	and	r3,r3,r2
 1000ac8:	e0bffe17 	ldw	r2,-8(fp)
 1000acc:	1880021e 	bne	r3,r2,1000ad8 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
 1000ad0:	00800044 	movi	r2,1
 1000ad4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 1000ad8:	e0bffc17 	ldw	r2,-16(fp)
}
 1000adc:	e037883a 	mov	sp,fp
 1000ae0:	df000017 	ldw	fp,0(sp)
 1000ae4:	dec00104 	addi	sp,sp,4
 1000ae8:	f800283a 	ret

01000aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 1000aec:	defffe04 	addi	sp,sp,-8
 1000af0:	df000115 	stw	fp,4(sp)
 1000af4:	df000104 	addi	fp,sp,4
 1000af8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000afc:	e0bfff17 	ldw	r2,-4(fp)
 1000b00:	10c00204 	addi	r3,r2,8
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 1000b0c:	e0bfff17 	ldw	r2,-4(fp)
 1000b10:	00ffffc4 	movi	r3,-1
 1000b14:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b18:	e0bfff17 	ldw	r2,-4(fp)
 1000b1c:	10c00204 	addi	r3,r2,8
 1000b20:	e0bfff17 	ldw	r2,-4(fp)
 1000b24:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 1000b28:	e0bfff17 	ldw	r2,-4(fp)
 1000b2c:	10c00204 	addi	r3,r2,8
 1000b30:	e0bfff17 	ldw	r2,-4(fp)
 1000b34:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1000b38:	e0bfff17 	ldw	r2,-4(fp)
 1000b3c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 1000b40:	0001883a 	nop
 1000b44:	e037883a 	mov	sp,fp
 1000b48:	df000017 	ldw	fp,0(sp)
 1000b4c:	dec00104 	addi	sp,sp,4
 1000b50:	f800283a 	ret

01000b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 1000b54:	defffe04 	addi	sp,sp,-8
 1000b58:	df000115 	stw	fp,4(sp)
 1000b5c:	df000104 	addi	fp,sp,4
 1000b60:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1000b64:	e0bfff17 	ldw	r2,-4(fp)
 1000b68:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 1000b6c:	0001883a 	nop
 1000b70:	e037883a 	mov	sp,fp
 1000b74:	df000017 	ldw	fp,0(sp)
 1000b78:	dec00104 	addi	sp,sp,4
 1000b7c:	f800283a 	ret

01000b80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000b80:	defffc04 	addi	sp,sp,-16
 1000b84:	df000315 	stw	fp,12(sp)
 1000b88:	df000304 	addi	fp,sp,12
 1000b8c:	e13ffe15 	stw	r4,-8(fp)
 1000b90:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 1000b94:	e0bffe17 	ldw	r2,-8(fp)
 1000b98:	10800117 	ldw	r2,4(r2)
 1000b9c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1000ba0:	e0bfff17 	ldw	r2,-4(fp)
 1000ba4:	e0fffd17 	ldw	r3,-12(fp)
 1000ba8:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1000bac:	e0bffd17 	ldw	r2,-12(fp)
 1000bb0:	10c00217 	ldw	r3,8(r2)
 1000bb4:	e0bfff17 	ldw	r2,-4(fp)
 1000bb8:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1000bbc:	e0bffd17 	ldw	r2,-12(fp)
 1000bc0:	10800217 	ldw	r2,8(r2)
 1000bc4:	e0ffff17 	ldw	r3,-4(fp)
 1000bc8:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 1000bcc:	e0bffd17 	ldw	r2,-12(fp)
 1000bd0:	e0ffff17 	ldw	r3,-4(fp)
 1000bd4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1000bd8:	e0bfff17 	ldw	r2,-4(fp)
 1000bdc:	e0fffe17 	ldw	r3,-8(fp)
 1000be0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000be4:	e0bffe17 	ldw	r2,-8(fp)
 1000be8:	10800017 	ldw	r2,0(r2)
 1000bec:	10c00044 	addi	r3,r2,1
 1000bf0:	e0bffe17 	ldw	r2,-8(fp)
 1000bf4:	10c00015 	stw	r3,0(r2)
}
 1000bf8:	0001883a 	nop
 1000bfc:	e037883a 	mov	sp,fp
 1000c00:	df000017 	ldw	fp,0(sp)
 1000c04:	dec00104 	addi	sp,sp,4
 1000c08:	f800283a 	ret

01000c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1000c0c:	defffb04 	addi	sp,sp,-20
 1000c10:	df000415 	stw	fp,16(sp)
 1000c14:	df000404 	addi	fp,sp,16
 1000c18:	e13ffe15 	stw	r4,-8(fp)
 1000c1c:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1000c20:	e0bfff17 	ldw	r2,-4(fp)
 1000c24:	10800017 	ldw	r2,0(r2)
 1000c28:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1000c2c:	e0bffd17 	ldw	r2,-12(fp)
 1000c30:	10bfffd8 	cmpnei	r2,r2,-1
 1000c34:	1000041e 	bne	r2,zero,1000c48 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1000c38:	e0bffe17 	ldw	r2,-8(fp)
 1000c3c:	10800417 	ldw	r2,16(r2)
 1000c40:	e0bffc15 	stw	r2,-16(fp)
 1000c44:	00000c06 	br	1000c78 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1000c48:	e0bffe17 	ldw	r2,-8(fp)
 1000c4c:	10800204 	addi	r2,r2,8
 1000c50:	e0bffc15 	stw	r2,-16(fp)
 1000c54:	00000306 	br	1000c64 <vListInsert+0x58>
 1000c58:	e0bffc17 	ldw	r2,-16(fp)
 1000c5c:	10800117 	ldw	r2,4(r2)
 1000c60:	e0bffc15 	stw	r2,-16(fp)
 1000c64:	e0bffc17 	ldw	r2,-16(fp)
 1000c68:	10800117 	ldw	r2,4(r2)
 1000c6c:	10800017 	ldw	r2,0(r2)
 1000c70:	e0fffd17 	ldw	r3,-12(fp)
 1000c74:	18bff82e 	bgeu	r3,r2,1000c58 <__alt_data_end+0xff000c58>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1000c78:	e0bffc17 	ldw	r2,-16(fp)
 1000c7c:	10c00117 	ldw	r3,4(r2)
 1000c80:	e0bfff17 	ldw	r2,-4(fp)
 1000c84:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1000c88:	e0bfff17 	ldw	r2,-4(fp)
 1000c8c:	10800117 	ldw	r2,4(r2)
 1000c90:	e0ffff17 	ldw	r3,-4(fp)
 1000c94:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 1000c98:	e0bfff17 	ldw	r2,-4(fp)
 1000c9c:	e0fffc17 	ldw	r3,-16(fp)
 1000ca0:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 1000ca4:	e0bffc17 	ldw	r2,-16(fp)
 1000ca8:	e0ffff17 	ldw	r3,-4(fp)
 1000cac:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1000cb0:	e0bfff17 	ldw	r2,-4(fp)
 1000cb4:	e0fffe17 	ldw	r3,-8(fp)
 1000cb8:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1000cbc:	e0bffe17 	ldw	r2,-8(fp)
 1000cc0:	10800017 	ldw	r2,0(r2)
 1000cc4:	10c00044 	addi	r3,r2,1
 1000cc8:	e0bffe17 	ldw	r2,-8(fp)
 1000ccc:	10c00015 	stw	r3,0(r2)
}
 1000cd0:	0001883a 	nop
 1000cd4:	e037883a 	mov	sp,fp
 1000cd8:	df000017 	ldw	fp,0(sp)
 1000cdc:	dec00104 	addi	sp,sp,4
 1000ce0:	f800283a 	ret

01000ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1000ce4:	defffd04 	addi	sp,sp,-12
 1000ce8:	df000215 	stw	fp,8(sp)
 1000cec:	df000204 	addi	fp,sp,8
 1000cf0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1000cf4:	e0bfff17 	ldw	r2,-4(fp)
 1000cf8:	10800417 	ldw	r2,16(r2)
 1000cfc:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1000d00:	e0bfff17 	ldw	r2,-4(fp)
 1000d04:	10800117 	ldw	r2,4(r2)
 1000d08:	e0ffff17 	ldw	r3,-4(fp)
 1000d0c:	18c00217 	ldw	r3,8(r3)
 1000d10:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1000d14:	e0bfff17 	ldw	r2,-4(fp)
 1000d18:	10800217 	ldw	r2,8(r2)
 1000d1c:	e0ffff17 	ldw	r3,-4(fp)
 1000d20:	18c00117 	ldw	r3,4(r3)
 1000d24:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1000d28:	e0bffe17 	ldw	r2,-8(fp)
 1000d2c:	10c00117 	ldw	r3,4(r2)
 1000d30:	e0bfff17 	ldw	r2,-4(fp)
 1000d34:	1880041e 	bne	r3,r2,1000d48 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 1000d38:	e0bfff17 	ldw	r2,-4(fp)
 1000d3c:	10c00217 	ldw	r3,8(r2)
 1000d40:	e0bffe17 	ldw	r2,-8(fp)
 1000d44:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 1000d48:	e0bfff17 	ldw	r2,-4(fp)
 1000d4c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 1000d50:	e0bffe17 	ldw	r2,-8(fp)
 1000d54:	10800017 	ldw	r2,0(r2)
 1000d58:	10ffffc4 	addi	r3,r2,-1
 1000d5c:	e0bffe17 	ldw	r2,-8(fp)
 1000d60:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 1000d64:	e0bffe17 	ldw	r2,-8(fp)
 1000d68:	10800017 	ldw	r2,0(r2)
}
 1000d6c:	e037883a 	mov	sp,fp
 1000d70:	df000017 	ldw	fp,0(sp)
 1000d74:	dec00104 	addi	sp,sp,4
 1000d78:	f800283a 	ret

01000d7c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 1000d7c:	defffe04 	addi	sp,sp,-8
 1000d80:	df000115 	stw	fp,4(sp)
 1000d84:	df000104 	addi	fp,sp,4
 1000d88:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 1000d8c:	e0bfff17 	ldw	r2,-4(fp)
 1000d90:	16800015 	stw	gp,0(r2)
}
 1000d94:	0001883a 	nop
 1000d98:	e037883a 	mov	sp,fp
 1000d9c:	df000017 	ldw	fp,0(sp)
 1000da0:	dec00104 	addi	sp,sp,4
 1000da4:	f800283a 	ret

01000da8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 1000da8:	defff904 	addi	sp,sp,-28
 1000dac:	dfc00615 	stw	ra,24(sp)
 1000db0:	df000515 	stw	fp,20(sp)
 1000db4:	df000504 	addi	fp,sp,20
 1000db8:	e13ffd15 	stw	r4,-12(fp)
 1000dbc:	e17ffe15 	stw	r5,-8(fp)
 1000dc0:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 1000dc4:	e0bffd17 	ldw	r2,-12(fp)
 1000dc8:	10bfff04 	addi	r2,r2,-4
 1000dcc:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 1000dd0:	e0bffc04 	addi	r2,fp,-16
 1000dd4:	1009883a 	mov	r4,r2
 1000dd8:	1000d7c0 	call	1000d7c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 1000ddc:	e0fffd17 	ldw	r3,-12(fp)
 1000de0:	00b7abb4 	movhi	r2,57006
 1000de4:	10afbbc4 	addi	r2,r2,-16657
 1000de8:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 1000dec:	e0bffd17 	ldw	r2,-12(fp)
 1000df0:	10bfff04 	addi	r2,r2,-4
 1000df4:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 1000df8:	e0fffb17 	ldw	r3,-20(fp)
 1000dfc:	e0bffd17 	ldw	r2,-12(fp)
 1000e00:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e04:	e0bffd17 	ldw	r2,-12(fp)
 1000e08:	10bfff04 	addi	r2,r2,-4
 1000e0c:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 1000e10:	e0fffc17 	ldw	r3,-16(fp)
 1000e14:	e0bffd17 	ldw	r2,-12(fp)
 1000e18:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 1000e1c:	e0bffd17 	ldw	r2,-12(fp)
 1000e20:	10bff704 	addi	r2,r2,-36
 1000e24:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 1000e28:	e0fffe17 	ldw	r3,-8(fp)
 1000e2c:	e0bffd17 	ldw	r2,-12(fp)
 1000e30:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1000e34:	e0bffd17 	ldw	r2,-12(fp)
 1000e38:	10bfff04 	addi	r2,r2,-4
 1000e3c:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 1000e40:	e0bffd17 	ldw	r2,-12(fp)
 1000e44:	00c00044 	movi	r3,1
 1000e48:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 1000e4c:	e0bffd17 	ldw	r2,-12(fp)
 1000e50:	10bff404 	addi	r2,r2,-48
 1000e54:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 1000e58:	e0ffff17 	ldw	r3,-4(fp)
 1000e5c:	e0bffd17 	ldw	r2,-12(fp)
 1000e60:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 1000e64:	e0bffd17 	ldw	r2,-12(fp)
 1000e68:	10bffb04 	addi	r2,r2,-20
 1000e6c:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 1000e70:	e0bffd17 	ldw	r2,-12(fp)
}
 1000e74:	e037883a 	mov	sp,fp
 1000e78:	dfc00117 	ldw	ra,4(sp)
 1000e7c:	df000017 	ldw	fp,0(sp)
 1000e80:	dec00204 	addi	sp,sp,8
 1000e84:	f800283a 	ret

01000e88 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 1000e88:	defffe04 	addi	sp,sp,-8
 1000e8c:	dfc00115 	stw	ra,4(sp)
 1000e90:	df000015 	stw	fp,0(sp)
 1000e94:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 1000e98:	1000ee00 	call	1000ee0 <prvSetupTimerInterrupt>
 1000e9c:	00804034 	movhi	r2,256
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 1000ea0:	10804b04 	addi	r2,r2,300
 1000ea4:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 1000ea8:	0005883a 	mov	r2,zero
}
 1000eac:	e037883a 	mov	sp,fp
 1000eb0:	dfc00117 	ldw	ra,4(sp)
 1000eb4:	df000017 	ldw	fp,0(sp)
 1000eb8:	dec00204 	addi	sp,sp,8
 1000ebc:	f800283a 	ret

01000ec0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1000ec0:	deffff04 	addi	sp,sp,-4
 1000ec4:	df000015 	stw	fp,0(sp)
 1000ec8:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 1000ecc:	0001883a 	nop
 1000ed0:	e037883a 	mov	sp,fp
 1000ed4:	df000017 	ldw	fp,0(sp)
 1000ed8:	dec00104 	addi	sp,sp,4
 1000edc:	f800283a 	ret

01000ee0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 1000ee0:	defffe04 	addi	sp,sp,-8
 1000ee4:	dfc00115 	stw	ra,4(sp)
 1000ee8:	df000015 	stw	fp,0(sp)
 1000eec:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
 1000ef0:	01804034 	movhi	r6,256
 1000ef4:	3183da04 	addi	r6,r6,3944
 1000ef8:	000b883a 	mov	r5,zero
 1000efc:	01000044 	movi	r4,1
 1000f00:	1008a640 	call	1008a64 <alt_irq_register>
 1000f04:	10bffa98 	cmpnei	r2,r2,-22
 1000f08:	1000021e 	bne	r2,zero,1000f14 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 1000f0c:	003da03a 	break	0
 1000f10:	00000c06 	br	1000f44 <prvSetupTimerInterrupt+0x64>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 1000f14:	00c00204 	movi	r3,8
 1000f18:	00800904 	movi	r2,36
 1000f1c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 1000f20:	00f0d414 	movui	r3,50000
 1000f24:	00800a04 	movi	r2,40
 1000f28:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 1000f2c:	0007883a 	mov	r3,zero
 1000f30:	00800b04 	movi	r2,44
 1000f34:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 1000f38:	00c001c4 	movi	r3,7
 1000f3c:	00800904 	movi	r2,36
 1000f40:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f44:	00ffff84 	movi	r3,-2
 1000f48:	00800804 	movi	r2,32
 1000f4c:	10c00035 	stwio	r3,0(r2)
}
 1000f50:	0001883a 	nop
 1000f54:	e037883a 	mov	sp,fp
 1000f58:	dfc00117 	ldw	ra,4(sp)
 1000f5c:	df000017 	ldw	fp,0(sp)
 1000f60:	dec00204 	addi	sp,sp,8
 1000f64:	f800283a 	ret

01000f68 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 1000f68:	defffc04 	addi	sp,sp,-16
 1000f6c:	dfc00315 	stw	ra,12(sp)
 1000f70:	df000215 	stw	fp,8(sp)
 1000f74:	df000204 	addi	fp,sp,8
 1000f78:	e13ffe15 	stw	r4,-8(fp)
 1000f7c:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 1000f80:	10044840 	call	1004484 <xTaskIncrementTick>
 1000f84:	10000126 	beq	r2,zero,1000f8c <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 1000f88:	10046340 	call	1004634 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1000f8c:	00ffff84 	movi	r3,-2
 1000f90:	00800804 	movi	r2,32
 1000f94:	10c00035 	stwio	r3,0(r2)
}
 1000f98:	0001883a 	nop
 1000f9c:	e037883a 	mov	sp,fp
 1000fa0:	dfc00117 	ldw	ra,4(sp)
 1000fa4:	df000017 	ldw	fp,0(sp)
 1000fa8:	dec00204 	addi	sp,sp,8
 1000fac:	f800283a 	ret

01000fb0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 1000fb0:	defff704 	addi	sp,sp,-36
 1000fb4:	dfc00815 	stw	ra,32(sp)
 1000fb8:	df000715 	stw	fp,28(sp)
 1000fbc:	df000704 	addi	fp,sp,28
 1000fc0:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 1000fc4:	e03ffb15 	stw	zero,-20(fp)

	vTaskSuspendAll();
 1000fc8:	100424c0 	call	100424c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 1000fcc:	d0a6b917 	ldw	r2,-25884(gp)
 1000fd0:	1000031e 	bne	r2,zero,1000fe0 <pvPortMalloc+0x30>
		{
			prvHeapInit();
 1000fd4:	10012900 	call	1001290 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 1000fd8:	00800044 	movi	r2,1
 1000fdc:	d0a6b915 	stw	r2,-25884(gp)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 1000fe0:	e0bfff17 	ldw	r2,-4(fp)
 1000fe4:	10000d26 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
 1000fe8:	00800204 	movi	r2,8
 1000fec:	10bfffcc 	andi	r2,r2,65535
 1000ff0:	e0ffff17 	ldw	r3,-4(fp)
 1000ff4:	1885883a 	add	r2,r3,r2
 1000ff8:	e0bfff15 	stw	r2,-4(fp)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 1000ffc:	e0bfff17 	ldw	r2,-4(fp)
 1001000:	108000cc 	andi	r2,r2,3
 1001004:	10000526 	beq	r2,zero,100101c <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 1001008:	e0ffff17 	ldw	r3,-4(fp)
 100100c:	00bfff04 	movi	r2,-4
 1001010:	1884703a 	and	r2,r3,r2
 1001014:	10800104 	addi	r2,r2,4
 1001018:	e0bfff15 	stw	r2,-4(fp)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 100101c:	e0bfff17 	ldw	r2,-4(fp)
 1001020:	10005126 	beq	r2,zero,1001168 <pvPortMalloc+0x1b8>
 1001024:	e0ffff17 	ldw	r3,-4(fp)
 1001028:	00802034 	movhi	r2,128
 100102c:	10bffec4 	addi	r2,r2,-5
 1001030:	10c04d36 	bltu	r2,r3,1001168 <pvPortMalloc+0x1b8>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 1001034:	d0a6b504 	addi	r2,gp,-25900
 1001038:	e0bffa15 	stw	r2,-24(fp)
			pxBlock = xStart.pxNextFreeBlock;
 100103c:	d0a6b517 	ldw	r2,-25900(gp)
 1001040:	e0bff915 	stw	r2,-28(fp)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 1001044:	00000506 	br	100105c <pvPortMalloc+0xac>
			{
				pxPreviousBlock = pxBlock;
 1001048:	e0bff917 	ldw	r2,-28(fp)
 100104c:	e0bffa15 	stw	r2,-24(fp)
				pxBlock = pxBlock->pxNextFreeBlock;
 1001050:	e0bff917 	ldw	r2,-28(fp)
 1001054:	10800017 	ldw	r2,0(r2)
 1001058:	e0bff915 	stw	r2,-28(fp)
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 100105c:	e0bff917 	ldw	r2,-28(fp)
 1001060:	10c00117 	ldw	r3,4(r2)
 1001064:	e0bfff17 	ldw	r2,-4(fp)
 1001068:	1880032e 	bgeu	r3,r2,1001078 <pvPortMalloc+0xc8>
 100106c:	e0bff917 	ldw	r2,-28(fp)
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	103ff41e 	bne	r2,zero,1001048 <__alt_data_end+0xff001048>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 1001078:	e0fff917 	ldw	r3,-28(fp)
 100107c:	d0a6b704 	addi	r2,gp,-25892
 1001080:	18803926 	beq	r3,r2,1001168 <pvPortMalloc+0x1b8>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 1001084:	e0bffa17 	ldw	r2,-24(fp)
 1001088:	10c00017 	ldw	r3,0(r2)
 100108c:	00800204 	movi	r2,8
 1001090:	10bfffcc 	andi	r2,r2,65535
 1001094:	1885883a 	add	r2,r3,r2
 1001098:	e0bffb15 	stw	r2,-20(fp)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 100109c:	e0bff917 	ldw	r2,-28(fp)
 10010a0:	10c00017 	ldw	r3,0(r2)
 10010a4:	e0bffa17 	ldw	r2,-24(fp)
 10010a8:	10c00015 	stw	r3,0(r2)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 10010ac:	e0bff917 	ldw	r2,-28(fp)
 10010b0:	10c00117 	ldw	r3,4(r2)
 10010b4:	e0bfff17 	ldw	r2,-4(fp)
 10010b8:	1887c83a 	sub	r3,r3,r2
 10010bc:	00800204 	movi	r2,8
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1085883a 	add	r2,r2,r2
 10010c8:	10c0222e 	bgeu	r2,r3,1001154 <pvPortMalloc+0x1a4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 10010cc:	e0fff917 	ldw	r3,-28(fp)
 10010d0:	e0bfff17 	ldw	r2,-4(fp)
 10010d4:	1885883a 	add	r2,r3,r2
 10010d8:	e0bffd15 	stw	r2,-12(fp)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 10010dc:	e0bff917 	ldw	r2,-28(fp)
 10010e0:	10c00117 	ldw	r3,4(r2)
 10010e4:	e0bfff17 	ldw	r2,-4(fp)
 10010e8:	1887c83a 	sub	r3,r3,r2
 10010ec:	e0bffd17 	ldw	r2,-12(fp)
 10010f0:	10c00115 	stw	r3,4(r2)
					pxBlock->xBlockSize = xWantedSize;
 10010f4:	e0bff917 	ldw	r2,-28(fp)
 10010f8:	e0ffff17 	ldw	r3,-4(fp)
 10010fc:	10c00115 	stw	r3,4(r2)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 1001100:	e0bffd17 	ldw	r2,-12(fp)
 1001104:	10800117 	ldw	r2,4(r2)
 1001108:	e0bffe15 	stw	r2,-8(fp)
 100110c:	d0a6b504 	addi	r2,gp,-25900
 1001110:	e0bffc15 	stw	r2,-16(fp)
 1001114:	00000306 	br	1001124 <pvPortMalloc+0x174>
 1001118:	e0bffc17 	ldw	r2,-16(fp)
 100111c:	10800017 	ldw	r2,0(r2)
 1001120:	e0bffc15 	stw	r2,-16(fp)
 1001124:	e0bffc17 	ldw	r2,-16(fp)
 1001128:	10800017 	ldw	r2,0(r2)
 100112c:	10c00117 	ldw	r3,4(r2)
 1001130:	e0bffe17 	ldw	r2,-8(fp)
 1001134:	18bff836 	bltu	r3,r2,1001118 <__alt_data_end+0xff001118>
 1001138:	e0bffc17 	ldw	r2,-16(fp)
 100113c:	10c00017 	ldw	r3,0(r2)
 1001140:	e0bffd17 	ldw	r2,-12(fp)
 1001144:	10c00015 	stw	r3,0(r2)
 1001148:	e0bffc17 	ldw	r2,-16(fp)
 100114c:	e0fffd17 	ldw	r3,-12(fp)
 1001150:	10c00015 	stw	r3,0(r2)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 1001154:	d0e00117 	ldw	r3,-32764(gp)
 1001158:	e0bff917 	ldw	r2,-28(fp)
 100115c:	10800117 	ldw	r2,4(r2)
 1001160:	1885c83a 	sub	r2,r3,r2
 1001164:	d0a00115 	stw	r2,-32764(gp)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1001168:	10042780 	call	1004278 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 100116c:	e0bffb17 	ldw	r2,-20(fp)
}
 1001170:	e037883a 	mov	sp,fp
 1001174:	dfc00117 	ldw	ra,4(sp)
 1001178:	df000017 	ldw	fp,0(sp)
 100117c:	dec00204 	addi	sp,sp,8
 1001180:	f800283a 	ret

01001184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1001184:	defff904 	addi	sp,sp,-28
 1001188:	dfc00615 	stw	ra,24(sp)
 100118c:	df000515 	stw	fp,20(sp)
 1001190:	df000504 	addi	fp,sp,20
 1001194:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 1001198:	e0bfff17 	ldw	r2,-4(fp)
 100119c:	e0bffc15 	stw	r2,-16(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 10011a0:	e0bfff17 	ldw	r2,-4(fp)
 10011a4:	10002426 	beq	r2,zero,1001238 <vPortFree+0xb4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 10011a8:	00800204 	movi	r2,8
 10011ac:	10bfffcc 	andi	r2,r2,65535
 10011b0:	0085c83a 	sub	r2,zero,r2
 10011b4:	e0fffc17 	ldw	r3,-16(fp)
 10011b8:	1885883a 	add	r2,r3,r2
 10011bc:	e0bffc15 	stw	r2,-16(fp)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 10011c0:	e0bffc17 	ldw	r2,-16(fp)
 10011c4:	e0bffd15 	stw	r2,-12(fp)

		vTaskSuspendAll();
 10011c8:	100424c0 	call	100424c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 10011cc:	e0bffd17 	ldw	r2,-12(fp)
 10011d0:	10800117 	ldw	r2,4(r2)
 10011d4:	e0bffe15 	stw	r2,-8(fp)
 10011d8:	d0a6b504 	addi	r2,gp,-25900
 10011dc:	e0bffb15 	stw	r2,-20(fp)
 10011e0:	00000306 	br	10011f0 <vPortFree+0x6c>
 10011e4:	e0bffb17 	ldw	r2,-20(fp)
 10011e8:	10800017 	ldw	r2,0(r2)
 10011ec:	e0bffb15 	stw	r2,-20(fp)
 10011f0:	e0bffb17 	ldw	r2,-20(fp)
 10011f4:	10800017 	ldw	r2,0(r2)
 10011f8:	10c00117 	ldw	r3,4(r2)
 10011fc:	e0bffe17 	ldw	r2,-8(fp)
 1001200:	18bff836 	bltu	r3,r2,10011e4 <__alt_data_end+0xff0011e4>
 1001204:	e0bffb17 	ldw	r2,-20(fp)
 1001208:	10c00017 	ldw	r3,0(r2)
 100120c:	e0bffd17 	ldw	r2,-12(fp)
 1001210:	10c00015 	stw	r3,0(r2)
 1001214:	e0bffb17 	ldw	r2,-20(fp)
 1001218:	e0fffd17 	ldw	r3,-12(fp)
 100121c:	10c00015 	stw	r3,0(r2)
			xFreeBytesRemaining += pxLink->xBlockSize;
 1001220:	e0bffd17 	ldw	r2,-12(fp)
 1001224:	10c00117 	ldw	r3,4(r2)
 1001228:	d0a00117 	ldw	r2,-32764(gp)
 100122c:	1885883a 	add	r2,r3,r2
 1001230:	d0a00115 	stw	r2,-32764(gp)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 1001234:	10042780 	call	1004278 <xTaskResumeAll>
	}
}
 1001238:	0001883a 	nop
 100123c:	e037883a 	mov	sp,fp
 1001240:	dfc00117 	ldw	ra,4(sp)
 1001244:	df000017 	ldw	fp,0(sp)
 1001248:	dec00204 	addi	sp,sp,8
 100124c:	f800283a 	ret

01001250 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 1001250:	deffff04 	addi	sp,sp,-4
 1001254:	df000015 	stw	fp,0(sp)
 1001258:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 100125c:	d0a00117 	ldw	r2,-32764(gp)
}
 1001260:	e037883a 	mov	sp,fp
 1001264:	df000017 	ldw	fp,0(sp)
 1001268:	dec00104 	addi	sp,sp,4
 100126c:	f800283a 	ret

01001270 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 1001270:	deffff04 	addi	sp,sp,-4
 1001274:	df000015 	stw	fp,0(sp)
 1001278:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 100127c:	0001883a 	nop
 1001280:	e037883a 	mov	sp,fp
 1001284:	df000017 	ldw	fp,0(sp)
 1001288:	dec00104 	addi	sp,sp,4
 100128c:	f800283a 	ret

01001290 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 1001290:	defffd04 	addi	sp,sp,-12
 1001294:	df000215 	stw	fp,8(sp)
 1001298:	df000204 	addi	fp,sp,8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 100129c:	00804074 	movhi	r2,257
 10012a0:	10bab504 	addi	r2,r2,-5420
 10012a4:	00ffff04 	movi	r3,-4
 10012a8:	10c4703a 	and	r2,r2,r3
 10012ac:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 10012b0:	e0bffe17 	ldw	r2,-8(fp)
 10012b4:	d0a6b515 	stw	r2,-25900(gp)
	xStart.xBlockSize = ( size_t ) 0;
 10012b8:	d026b615 	stw	zero,-25896(gp)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 10012bc:	00802034 	movhi	r2,128
 10012c0:	10bfff04 	addi	r2,r2,-4
 10012c4:	d0a6b815 	stw	r2,-25888(gp)
	xEnd.pxNextFreeBlock = NULL;
 10012c8:	d026b715 	stw	zero,-25892(gp)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 10012d4:	e0ffff17 	ldw	r3,-4(fp)
 10012d8:	00802034 	movhi	r2,128
 10012dc:	10bfff04 	addi	r2,r2,-4
 10012e0:	18800115 	stw	r2,4(r3)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 10012e4:	e0bfff17 	ldw	r2,-4(fp)
 10012e8:	d0e6b704 	addi	r3,gp,-25892
 10012ec:	10c00015 	stw	r3,0(r2)
}
 10012f0:	0001883a 	nop
 10012f4:	e037883a 	mov	sp,fp
 10012f8:	df000017 	ldw	fp,0(sp)
 10012fc:	dec00104 	addi	sp,sp,4
 1001300:	f800283a 	ret

01001304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 1001304:	defffb04 	addi	sp,sp,-20
 1001308:	dfc00415 	stw	ra,16(sp)
 100130c:	df000315 	stw	fp,12(sp)
 1001310:	df000304 	addi	fp,sp,12
 1001314:	e13ffe15 	stw	r4,-8(fp)
 1001318:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 100131c:	e0bffe17 	ldw	r2,-8(fp)
 1001320:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1001324:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001328:	e0bffd17 	ldw	r2,-12(fp)
 100132c:	10c00017 	ldw	r3,0(r2)
 1001330:	e0bffd17 	ldw	r2,-12(fp)
 1001334:	11000f17 	ldw	r4,60(r2)
 1001338:	e0bffd17 	ldw	r2,-12(fp)
 100133c:	10801017 	ldw	r2,64(r2)
 1001340:	2085383a 	mul	r2,r4,r2
 1001344:	1887883a 	add	r3,r3,r2
 1001348:	e0bffd17 	ldw	r2,-12(fp)
 100134c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1001350:	e0bffd17 	ldw	r2,-12(fp)
 1001354:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 1001358:	e0bffd17 	ldw	r2,-12(fp)
 100135c:	10c00017 	ldw	r3,0(r2)
 1001360:	e0bffd17 	ldw	r2,-12(fp)
 1001364:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 1001368:	e0bffd17 	ldw	r2,-12(fp)
 100136c:	10c00017 	ldw	r3,0(r2)
 1001370:	e0bffd17 	ldw	r2,-12(fp)
 1001374:	10800f17 	ldw	r2,60(r2)
 1001378:	113fffc4 	addi	r4,r2,-1
 100137c:	e0bffd17 	ldw	r2,-12(fp)
 1001380:	10801017 	ldw	r2,64(r2)
 1001384:	2085383a 	mul	r2,r4,r2
 1001388:	1887883a 	add	r3,r3,r2
 100138c:	e0bffd17 	ldw	r2,-12(fp)
 1001390:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 1001394:	e0bffd17 	ldw	r2,-12(fp)
 1001398:	00ffffc4 	movi	r3,-1
 100139c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 10013a0:	e0bffd17 	ldw	r2,-12(fp)
 10013a4:	00ffffc4 	movi	r3,-1
 10013a8:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 10013ac:	e0bfff17 	ldw	r2,-4(fp)
 10013b0:	10000a1e 	bne	r2,zero,10013dc <xQueueGenericReset+0xd8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10013b4:	e0bffd17 	ldw	r2,-12(fp)
 10013b8:	10800417 	ldw	r2,16(r2)
 10013bc:	10000f26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10013c0:	e0bffd17 	ldw	r2,-12(fp)
 10013c4:	10800404 	addi	r2,r2,16
 10013c8:	1009883a 	mov	r4,r2
 10013cc:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 10013d0:	10000a26 	beq	r2,zero,10013fc <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
 10013d4:	003b683a 	trap	0
 10013d8:	00000806 	br	10013fc <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 10013dc:	e0bffd17 	ldw	r2,-12(fp)
 10013e0:	10800404 	addi	r2,r2,16
 10013e4:	1009883a 	mov	r4,r2
 10013e8:	1000aec0 	call	1000aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 10013ec:	e0bffd17 	ldw	r2,-12(fp)
 10013f0:	10800904 	addi	r2,r2,36
 10013f4:	1009883a 	mov	r4,r2
 10013f8:	1000aec0 	call	1000aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 10013fc:	10051b40 	call	10051b4 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 1001400:	00800044 	movi	r2,1
}
 1001404:	e037883a 	mov	sp,fp
 1001408:	dfc00117 	ldw	ra,4(sp)
 100140c:	df000017 	ldw	fp,0(sp)
 1001410:	dec00204 	addi	sp,sp,8
 1001414:	f800283a 	ret

01001418 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 1001418:	defff704 	addi	sp,sp,-36
 100141c:	dfc00815 	stw	ra,32(sp)
 1001420:	df000715 	stw	fp,28(sp)
 1001424:	df000704 	addi	fp,sp,28
 1001428:	e13ffd15 	stw	r4,-12(fp)
 100142c:	e17ffe15 	stw	r5,-8(fp)
 1001430:	3005883a 	mov	r2,r6
 1001434:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 1001438:	e0bffe17 	ldw	r2,-8(fp)
 100143c:	1000021e 	bne	r2,zero,1001448 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 1001440:	e03ffa15 	stw	zero,-24(fp)
 1001444:	00000406 	br	1001458 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1001448:	e0fffd17 	ldw	r3,-12(fp)
 100144c:	e0bffe17 	ldw	r2,-8(fp)
 1001450:	1885383a 	mul	r2,r3,r2
 1001454:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 1001458:	e0bffa17 	ldw	r2,-24(fp)
 100145c:	10801204 	addi	r2,r2,72
 1001460:	1009883a 	mov	r4,r2
 1001464:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1001468:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 100146c:	e0bffb17 	ldw	r2,-20(fp)
 1001470:	10000d26 	beq	r2,zero,10014a8 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 1001474:	e0bffb17 	ldw	r2,-20(fp)
 1001478:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 100147c:	e0bffc17 	ldw	r2,-16(fp)
 1001480:	10801204 	addi	r2,r2,72
 1001484:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 1001488:	e0ffff03 	ldbu	r3,-4(fp)
 100148c:	e0bffb17 	ldw	r2,-20(fp)
 1001490:	d8800015 	stw	r2,0(sp)
 1001494:	180f883a 	mov	r7,r3
 1001498:	e1bffc17 	ldw	r6,-16(fp)
 100149c:	e17ffe17 	ldw	r5,-8(fp)
 10014a0:	e13ffd17 	ldw	r4,-12(fp)
 10014a4:	10014c00 	call	10014c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 10014a8:	e0bffb17 	ldw	r2,-20(fp)
	}
 10014ac:	e037883a 	mov	sp,fp
 10014b0:	dfc00117 	ldw	ra,4(sp)
 10014b4:	df000017 	ldw	fp,0(sp)
 10014b8:	dec00204 	addi	sp,sp,8
 10014bc:	f800283a 	ret

010014c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 10014c0:	defffa04 	addi	sp,sp,-24
 10014c4:	dfc00515 	stw	ra,20(sp)
 10014c8:	df000415 	stw	fp,16(sp)
 10014cc:	df000404 	addi	fp,sp,16
 10014d0:	e13ffc15 	stw	r4,-16(fp)
 10014d4:	e17ffd15 	stw	r5,-12(fp)
 10014d8:	e1bffe15 	stw	r6,-8(fp)
 10014dc:	3805883a 	mov	r2,r7
 10014e0:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 10014e4:	e0bffd17 	ldw	r2,-12(fp)
 10014e8:	1000041e 	bne	r2,zero,10014fc <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 10014ec:	e0800217 	ldw	r2,8(fp)
 10014f0:	e0c00217 	ldw	r3,8(fp)
 10014f4:	10c00015 	stw	r3,0(r2)
 10014f8:	00000306 	br	1001508 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 10014fc:	e0800217 	ldw	r2,8(fp)
 1001500:	e0fffe17 	ldw	r3,-8(fp)
 1001504:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 1001508:	e0800217 	ldw	r2,8(fp)
 100150c:	e0fffc17 	ldw	r3,-16(fp)
 1001510:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 1001514:	e0800217 	ldw	r2,8(fp)
 1001518:	e0fffd17 	ldw	r3,-12(fp)
 100151c:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1001520:	01400044 	movi	r5,1
 1001524:	e1000217 	ldw	r4,8(fp)
 1001528:	10013040 	call	1001304 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 100152c:	0001883a 	nop
 1001530:	e037883a 	mov	sp,fp
 1001534:	dfc00117 	ldw	ra,4(sp)
 1001538:	df000017 	ldw	fp,0(sp)
 100153c:	dec00204 	addi	sp,sp,8
 1001540:	f800283a 	ret

01001544 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 1001544:	defffd04 	addi	sp,sp,-12
 1001548:	dfc00215 	stw	ra,8(sp)
 100154c:	df000115 	stw	fp,4(sp)
 1001550:	df000104 	addi	fp,sp,4
 1001554:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	10000b26 	beq	r2,zero,100158c <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 1001560:	e0bfff17 	ldw	r2,-4(fp)
 1001564:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1001568:	e0bfff17 	ldw	r2,-4(fp)
 100156c:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 1001570:	e0bfff17 	ldw	r2,-4(fp)
 1001574:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 1001578:	000f883a 	mov	r7,zero
 100157c:	000d883a 	mov	r6,zero
 1001580:	000b883a 	mov	r5,zero
 1001584:	e13fff17 	ldw	r4,-4(fp)
 1001588:	10017840 	call	1001784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 100158c:	0001883a 	nop
 1001590:	e037883a 	mov	sp,fp
 1001594:	dfc00117 	ldw	ra,4(sp)
 1001598:	df000017 	ldw	fp,0(sp)
 100159c:	dec00204 	addi	sp,sp,8
 10015a0:	f800283a 	ret

010015a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 10015a4:	defffa04 	addi	sp,sp,-24
 10015a8:	dfc00515 	stw	ra,20(sp)
 10015ac:	df000415 	stw	fp,16(sp)
 10015b0:	df000404 	addi	fp,sp,16
 10015b4:	2005883a 	mov	r2,r4
 10015b8:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 10015bc:	00800044 	movi	r2,1
 10015c0:	e0bffc15 	stw	r2,-16(fp)
 10015c4:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 10015c8:	e0bfff03 	ldbu	r2,-4(fp)
 10015cc:	100d883a 	mov	r6,r2
 10015d0:	e17ffd17 	ldw	r5,-12(fp)
 10015d4:	e13ffc17 	ldw	r4,-16(fp)
 10015d8:	10014180 	call	1001418 <xQueueGenericCreate>
 10015dc:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 10015e0:	e13ffe17 	ldw	r4,-8(fp)
 10015e4:	10015440 	call	1001544 <prvInitialiseMutex>

		return xNewQueue;
 10015e8:	e0bffe17 	ldw	r2,-8(fp)
	}
 10015ec:	e037883a 	mov	sp,fp
 10015f0:	dfc00117 	ldw	ra,4(sp)
 10015f4:	df000017 	ldw	fp,0(sp)
 10015f8:	dec00204 	addi	sp,sp,8
 10015fc:	f800283a 	ret

01001600 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 1001600:	defffa04 	addi	sp,sp,-24
 1001604:	dfc00515 	stw	ra,20(sp)
 1001608:	df000415 	stw	fp,16(sp)
 100160c:	dc000315 	stw	r16,12(sp)
 1001610:	df000404 	addi	fp,sp,16
 1001614:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1001618:	e0bffe17 	ldw	r2,-8(fp)
 100161c:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 1001620:	e0bffd17 	ldw	r2,-12(fp)
 1001624:	14000217 	ldw	r16,8(r2)
 1001628:	1004dbc0 	call	1004dbc <xTaskGetCurrentTaskHandle>
 100162c:	8080101e 	bne	r16,r2,1001670 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 1001630:	e0bffd17 	ldw	r2,-12(fp)
 1001634:	10800317 	ldw	r2,12(r2)
 1001638:	10ffffc4 	addi	r3,r2,-1
 100163c:	e0bffd17 	ldw	r2,-12(fp)
 1001640:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 1001644:	e0bffd17 	ldw	r2,-12(fp)
 1001648:	10800317 	ldw	r2,12(r2)
 100164c:	1000051e 	bne	r2,zero,1001664 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 1001650:	000f883a 	mov	r7,zero
 1001654:	000d883a 	mov	r6,zero
 1001658:	000b883a 	mov	r5,zero
 100165c:	e13ffd17 	ldw	r4,-12(fp)
 1001660:	10017840 	call	1001784 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 1001664:	00800044 	movi	r2,1
 1001668:	e0bffc15 	stw	r2,-16(fp)
 100166c:	00000106 	br	1001674 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 1001670:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 1001674:	e0bffc17 	ldw	r2,-16(fp)
	}
 1001678:	e6ffff04 	addi	sp,fp,-4
 100167c:	dfc00217 	ldw	ra,8(sp)
 1001680:	df000117 	ldw	fp,4(sp)
 1001684:	dc000017 	ldw	r16,0(sp)
 1001688:	dec00304 	addi	sp,sp,12
 100168c:	f800283a 	ret

01001690 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 1001690:	defff904 	addi	sp,sp,-28
 1001694:	dfc00615 	stw	ra,24(sp)
 1001698:	df000515 	stw	fp,20(sp)
 100169c:	dc000415 	stw	r16,16(sp)
 10016a0:	df000504 	addi	fp,sp,20
 10016a4:	e13ffd15 	stw	r4,-12(fp)
 10016a8:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 10016ac:	e0bffd17 	ldw	r2,-12(fp)
 10016b0:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 10016b4:	e0bffc17 	ldw	r2,-16(fp)
 10016b8:	14000217 	ldw	r16,8(r2)
 10016bc:	1004dbc0 	call	1004dbc <xTaskGetCurrentTaskHandle>
 10016c0:	8080081e 	bne	r16,r2,10016e4 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016c4:	e0bffc17 	ldw	r2,-16(fp)
 10016c8:	10800317 	ldw	r2,12(r2)
 10016cc:	10c00044 	addi	r3,r2,1
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 10016d8:	00800044 	movi	r2,1
 10016dc:	e0bffb15 	stw	r2,-20(fp)
 10016e0:	00000b06 	br	1001710 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 10016e4:	e17ffe17 	ldw	r5,-8(fp)
 10016e8:	e13ffc17 	ldw	r4,-16(fp)
 10016ec:	1001ca40 	call	1001ca4 <xQueueSemaphoreTake>
 10016f0:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 10016f4:	e0bffb17 	ldw	r2,-20(fp)
 10016f8:	10000526 	beq	r2,zero,1001710 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 10016fc:	e0bffc17 	ldw	r2,-16(fp)
 1001700:	10800317 	ldw	r2,12(r2)
 1001704:	10c00044 	addi	r3,r2,1
 1001708:	e0bffc17 	ldw	r2,-16(fp)
 100170c:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 1001710:	e0bffb17 	ldw	r2,-20(fp)
	}
 1001714:	e6ffff04 	addi	sp,fp,-4
 1001718:	dfc00217 	ldw	ra,8(sp)
 100171c:	df000117 	ldw	fp,4(sp)
 1001720:	dc000017 	ldw	r16,0(sp)
 1001724:	dec00304 	addi	sp,sp,12
 1001728:	f800283a 	ret

0100172c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 100172c:	defffb04 	addi	sp,sp,-20
 1001730:	dfc00415 	stw	ra,16(sp)
 1001734:	df000315 	stw	fp,12(sp)
 1001738:	df000304 	addi	fp,sp,12
 100173c:	e13ffe15 	stw	r4,-8(fp)
 1001740:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 1001744:	01800084 	movi	r6,2
 1001748:	000b883a 	mov	r5,zero
 100174c:	e13ffe17 	ldw	r4,-8(fp)
 1001750:	10014180 	call	1001418 <xQueueGenericCreate>
 1001754:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 1001758:	e0bffd17 	ldw	r2,-12(fp)
 100175c:	10000326 	beq	r2,zero,100176c <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 1001760:	e0bffd17 	ldw	r2,-12(fp)
 1001764:	e0ffff17 	ldw	r3,-4(fp)
 1001768:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 100176c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1001770:	e037883a 	mov	sp,fp
 1001774:	dfc00117 	ldw	ra,4(sp)
 1001778:	df000017 	ldw	fp,0(sp)
 100177c:	dec00204 	addi	sp,sp,8
 1001780:	f800283a 	ret

01001784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 1001784:	defff504 	addi	sp,sp,-44
 1001788:	dfc00a15 	stw	ra,40(sp)
 100178c:	df000915 	stw	fp,36(sp)
 1001790:	df000904 	addi	fp,sp,36
 1001794:	e13ffc15 	stw	r4,-16(fp)
 1001798:	e17ffd15 	stw	r5,-12(fp)
 100179c:	e1bffe15 	stw	r6,-8(fp)
 10017a0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 10017a4:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 10017a8:	e0bffc17 	ldw	r2,-16(fp)
 10017ac:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 10017b0:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 10017b4:	e0bff817 	ldw	r2,-32(fp)
 10017b8:	10c00e17 	ldw	r3,56(r2)
 10017bc:	e0bff817 	ldw	r2,-32(fp)
 10017c0:	10800f17 	ldw	r2,60(r2)
 10017c4:	18800336 	bltu	r3,r2,10017d4 <xQueueGenericSend+0x50>
 10017c8:	e0bfff17 	ldw	r2,-4(fp)
 10017cc:	10800098 	cmpnei	r2,r2,2
 10017d0:	1000151e 	bne	r2,zero,1001828 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 10017d4:	e1bfff17 	ldw	r6,-4(fp)
 10017d8:	e17ffd17 	ldw	r5,-12(fp)
 10017dc:	e13ff817 	ldw	r4,-32(fp)
 10017e0:	100231c0 	call	100231c <prvCopyDataToQueue>
 10017e4:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10017e8:	e0bff817 	ldw	r2,-32(fp)
 10017ec:	10800917 	ldw	r2,36(r2)
 10017f0:	10000726 	beq	r2,zero,1001810 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10017f4:	e0bff817 	ldw	r2,-32(fp)
 10017f8:	10800904 	addi	r2,r2,36
 10017fc:	1009883a 	mov	r4,r2
 1001800:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1001804:	10000526 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 1001808:	003b683a 	trap	0
 100180c:	00000306 	br	100181c <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 1001810:	e0bff917 	ldw	r2,-28(fp)
 1001814:	10000126 	beq	r2,zero,100181c <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 1001818:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 100181c:	10051b40 	call	10051b4 <vTaskExitCritical>
				return pdPASS;
 1001820:	00800044 	movi	r2,1
 1001824:	00003f06 	br	1001924 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001828:	e0bffe17 	ldw	r2,-8(fp)
 100182c:	1000031e 	bne	r2,zero,100183c <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001830:	10051b40 	call	10051b4 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 1001834:	0005883a 	mov	r2,zero
 1001838:	00003a06 	br	1001924 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 100183c:	e0bff717 	ldw	r2,-36(fp)
 1001840:	1000051e 	bne	r2,zero,1001858 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001844:	e0bffa04 	addi	r2,fp,-24
 1001848:	1009883a 	mov	r4,r2
 100184c:	10049c80 	call	10049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001850:	00800044 	movi	r2,1
 1001854:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001858:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 100185c:	100424c0 	call	100424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001860:	10051600 	call	1005160 <vTaskEnterCritical>
 1001864:	e0bff817 	ldw	r2,-32(fp)
 1001868:	10801103 	ldbu	r2,68(r2)
 100186c:	10803fcc 	andi	r2,r2,255
 1001870:	1080201c 	xori	r2,r2,128
 1001874:	10bfe004 	addi	r2,r2,-128
 1001878:	10bfffd8 	cmpnei	r2,r2,-1
 100187c:	1000021e 	bne	r2,zero,1001888 <xQueueGenericSend+0x104>
 1001880:	e0bff817 	ldw	r2,-32(fp)
 1001884:	10001105 	stb	zero,68(r2)
 1001888:	e0bff817 	ldw	r2,-32(fp)
 100188c:	10801143 	ldbu	r2,69(r2)
 1001890:	10803fcc 	andi	r2,r2,255
 1001894:	1080201c 	xori	r2,r2,128
 1001898:	10bfe004 	addi	r2,r2,-128
 100189c:	10bfffd8 	cmpnei	r2,r2,-1
 10018a0:	1000021e 	bne	r2,zero,10018ac <xQueueGenericSend+0x128>
 10018a4:	e0bff817 	ldw	r2,-32(fp)
 10018a8:	10001145 	stb	zero,69(r2)
 10018ac:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 10018b0:	e0fffe04 	addi	r3,fp,-8
 10018b4:	e0bffa04 	addi	r2,fp,-24
 10018b8:	180b883a 	mov	r5,r3
 10018bc:	1009883a 	mov	r4,r2
 10018c0:	1004a040 	call	1004a04 <xTaskCheckForTimeOut>
 10018c4:	1000131e 	bne	r2,zero,1001914 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 10018c8:	e13ff817 	ldw	r4,-32(fp)
 10018cc:	10026d00 	call	10026d0 <prvIsQueueFull>
 10018d0:	10000c26 	beq	r2,zero,1001904 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 10018d4:	e0bff817 	ldw	r2,-32(fp)
 10018d8:	10800404 	addi	r2,r2,16
 10018dc:	e0fffe17 	ldw	r3,-8(fp)
 10018e0:	180b883a 	mov	r5,r3
 10018e4:	1009883a 	mov	r4,r2
 10018e8:	100470c0 	call	100470c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 10018ec:	e13ff817 	ldw	r4,-32(fp)
 10018f0:	10025440 	call	1002544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 10018f4:	10042780 	call	1004278 <xTaskResumeAll>
 10018f8:	103fad1e 	bne	r2,zero,10017b0 <__alt_data_end+0xff0017b0>
				{
					portYIELD_WITHIN_API();
 10018fc:	003b683a 	trap	0
 1001900:	003fab06 	br	10017b0 <__alt_data_end+0xff0017b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 1001904:	e13ff817 	ldw	r4,-32(fp)
 1001908:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100190c:	10042780 	call	1004278 <xTaskResumeAll>
 1001910:	003fa706 	br	10017b0 <__alt_data_end+0xff0017b0>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 1001914:	e13ff817 	ldw	r4,-32(fp)
 1001918:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100191c:	10042780 	call	1004278 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 1001920:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 1001924:	e037883a 	mov	sp,fp
 1001928:	dfc00117 	ldw	ra,4(sp)
 100192c:	df000017 	ldw	fp,0(sp)
 1001930:	dec00204 	addi	sp,sp,8
 1001934:	f800283a 	ret

01001938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 1001938:	defff604 	addi	sp,sp,-40
 100193c:	dfc00915 	stw	ra,36(sp)
 1001940:	df000815 	stw	fp,32(sp)
 1001944:	df000804 	addi	fp,sp,32
 1001948:	e13ffc15 	stw	r4,-16(fp)
 100194c:	e17ffd15 	stw	r5,-12(fp)
 1001950:	e1bffe15 	stw	r6,-8(fp)
 1001954:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001958:	e0bffc17 	ldw	r2,-16(fp)
 100195c:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001960:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 1001964:	e0bff917 	ldw	r2,-28(fp)
 1001968:	10c00e17 	ldw	r3,56(r2)
 100196c:	e0bff917 	ldw	r2,-28(fp)
 1001970:	10800f17 	ldw	r2,60(r2)
 1001974:	18800336 	bltu	r3,r2,1001984 <xQueueGenericSendFromISR+0x4c>
 1001978:	e0bfff17 	ldw	r2,-4(fp)
 100197c:	10800098 	cmpnei	r2,r2,2
 1001980:	1000201e 	bne	r2,zero,1001a04 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001984:	e0bff917 	ldw	r2,-28(fp)
 1001988:	10801143 	ldbu	r2,69(r2)
 100198c:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1001990:	e1bfff17 	ldw	r6,-4(fp)
 1001994:	e17ffd17 	ldw	r5,-12(fp)
 1001998:	e13ff917 	ldw	r4,-28(fp)
 100199c:	100231c0 	call	100231c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 10019a0:	e0bffb07 	ldb	r2,-20(fp)
 10019a4:	10bfffd8 	cmpnei	r2,r2,-1
 10019a8:	10000e1e 	bne	r2,zero,10019e4 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 10019ac:	e0bff917 	ldw	r2,-28(fp)
 10019b0:	10800917 	ldw	r2,36(r2)
 10019b4:	10001026 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 10019b8:	e0bff917 	ldw	r2,-28(fp)
 10019bc:	10800904 	addi	r2,r2,36
 10019c0:	1009883a 	mov	r4,r2
 10019c4:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 10019c8:	10000b26 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 10019cc:	e0bffe17 	ldw	r2,-8(fp)
 10019d0:	10000926 	beq	r2,zero,10019f8 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 10019d4:	e0bffe17 	ldw	r2,-8(fp)
 10019d8:	00c00044 	movi	r3,1
 10019dc:	10c00015 	stw	r3,0(r2)
 10019e0:	00000506 	br	10019f8 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 10019e4:	e0bffb03 	ldbu	r2,-20(fp)
 10019e8:	10800044 	addi	r2,r2,1
 10019ec:	1007883a 	mov	r3,r2
 10019f0:	e0bff917 	ldw	r2,-28(fp)
 10019f4:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 10019f8:	00800044 	movi	r2,1
 10019fc:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 1001a00:	00000106 	br	1001a08 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001a04:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001a08:	e0bff817 	ldw	r2,-32(fp)
}
 1001a0c:	e037883a 	mov	sp,fp
 1001a10:	dfc00117 	ldw	ra,4(sp)
 1001a14:	df000017 	ldw	fp,0(sp)
 1001a18:	dec00204 	addi	sp,sp,8
 1001a1c:	f800283a 	ret

01001a20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1001a20:	defff704 	addi	sp,sp,-36
 1001a24:	dfc00815 	stw	ra,32(sp)
 1001a28:	df000715 	stw	fp,28(sp)
 1001a2c:	df000704 	addi	fp,sp,28
 1001a30:	e13ffe15 	stw	r4,-8(fp)
 1001a34:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1001a38:	e0bffe17 	ldw	r2,-8(fp)
 1001a3c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1001a40:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001a44:	e0bffa17 	ldw	r2,-24(fp)
 1001a48:	10800e17 	ldw	r2,56(r2)
 1001a4c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 1001a50:	e0bffa17 	ldw	r2,-24(fp)
 1001a54:	10800f17 	ldw	r2,60(r2)
 1001a58:	e0fffc17 	ldw	r3,-16(fp)
 1001a5c:	1880202e 	bgeu	r3,r2,1001ae0 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 1001a60:	e0bffa17 	ldw	r2,-24(fp)
 1001a64:	10801143 	ldbu	r2,69(r2)
 1001a68:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1001a6c:	e0bffc17 	ldw	r2,-16(fp)
 1001a70:	10c00044 	addi	r3,r2,1
 1001a74:	e0bffa17 	ldw	r2,-24(fp)
 1001a78:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 1001a7c:	e0bffd07 	ldb	r2,-12(fp)
 1001a80:	10bfffd8 	cmpnei	r2,r2,-1
 1001a84:	10000e1e 	bne	r2,zero,1001ac0 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001a88:	e0bffa17 	ldw	r2,-24(fp)
 1001a8c:	10800917 	ldw	r2,36(r2)
 1001a90:	10001026 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001a94:	e0bffa17 	ldw	r2,-24(fp)
 1001a98:	10800904 	addi	r2,r2,36
 1001a9c:	1009883a 	mov	r4,r2
 1001aa0:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1001aa4:	10000b26 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 1001aa8:	e0bfff17 	ldw	r2,-4(fp)
 1001aac:	10000926 	beq	r2,zero,1001ad4 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 1001ab0:	e0bfff17 	ldw	r2,-4(fp)
 1001ab4:	00c00044 	movi	r3,1
 1001ab8:	10c00015 	stw	r3,0(r2)
 1001abc:	00000506 	br	1001ad4 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1001ac0:	e0bffd03 	ldbu	r2,-12(fp)
 1001ac4:	10800044 	addi	r2,r2,1
 1001ac8:	1007883a 	mov	r3,r2
 1001acc:	e0bffa17 	ldw	r2,-24(fp)
 1001ad0:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 1001ad4:	00800044 	movi	r2,1
 1001ad8:	e0bff915 	stw	r2,-28(fp)
 1001adc:	00000106 	br	1001ae4 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 1001ae0:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1001ae4:	e0bff917 	ldw	r2,-28(fp)
}
 1001ae8:	e037883a 	mov	sp,fp
 1001aec:	dfc00117 	ldw	ra,4(sp)
 1001af0:	df000017 	ldw	fp,0(sp)
 1001af4:	dec00204 	addi	sp,sp,8
 1001af8:	f800283a 	ret

01001afc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001afc:	defff604 	addi	sp,sp,-40
 1001b00:	dfc00915 	stw	ra,36(sp)
 1001b04:	df000815 	stw	fp,32(sp)
 1001b08:	df000804 	addi	fp,sp,32
 1001b0c:	e13ffd15 	stw	r4,-12(fp)
 1001b10:	e17ffe15 	stw	r5,-8(fp)
 1001b14:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001b18:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001b1c:	e0bffd17 	ldw	r2,-12(fp)
 1001b20:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001b24:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001b28:	e0bff917 	ldw	r2,-28(fp)
 1001b2c:	10800e17 	ldw	r2,56(r2)
 1001b30:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001b34:	e0bffa17 	ldw	r2,-24(fp)
 1001b38:	10001326 	beq	r2,zero,1001b88 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001b3c:	e17ffe17 	ldw	r5,-8(fp)
 1001b40:	e13ff917 	ldw	r4,-28(fp)
 1001b44:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1001b48:	e0bffa17 	ldw	r2,-24(fp)
 1001b4c:	10ffffc4 	addi	r3,r2,-1
 1001b50:	e0bff917 	ldw	r2,-28(fp)
 1001b54:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001b58:	e0bff917 	ldw	r2,-28(fp)
 1001b5c:	10800417 	ldw	r2,16(r2)
 1001b60:	10000626 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001b64:	e0bff917 	ldw	r2,-28(fp)
 1001b68:	10800404 	addi	r2,r2,16
 1001b6c:	1009883a 	mov	r4,r2
 1001b70:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1001b74:	10000126 	beq	r2,zero,1001b7c <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001b78:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001b7c:	10051b40 	call	10051b4 <vTaskExitCritical>
				return pdPASS;
 1001b80:	00800044 	movi	r2,1
 1001b84:	00004206 	br	1001c90 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001b88:	e0bfff17 	ldw	r2,-4(fp)
 1001b8c:	1000031e 	bne	r2,zero,1001b9c <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001b90:	10051b40 	call	10051b4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001b94:	0005883a 	mov	r2,zero
 1001b98:	00003d06 	br	1001c90 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001b9c:	e0bff817 	ldw	r2,-32(fp)
 1001ba0:	1000051e 	bne	r2,zero,1001bb8 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001ba4:	e0bffb04 	addi	r2,fp,-20
 1001ba8:	1009883a 	mov	r4,r2
 1001bac:	10049c80 	call	10049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001bb0:	00800044 	movi	r2,1
 1001bb4:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001bb8:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001bbc:	100424c0 	call	100424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001bc0:	10051600 	call	1005160 <vTaskEnterCritical>
 1001bc4:	e0bff917 	ldw	r2,-28(fp)
 1001bc8:	10801103 	ldbu	r2,68(r2)
 1001bcc:	10803fcc 	andi	r2,r2,255
 1001bd0:	1080201c 	xori	r2,r2,128
 1001bd4:	10bfe004 	addi	r2,r2,-128
 1001bd8:	10bfffd8 	cmpnei	r2,r2,-1
 1001bdc:	1000021e 	bne	r2,zero,1001be8 <xQueueReceive+0xec>
 1001be0:	e0bff917 	ldw	r2,-28(fp)
 1001be4:	10001105 	stb	zero,68(r2)
 1001be8:	e0bff917 	ldw	r2,-28(fp)
 1001bec:	10801143 	ldbu	r2,69(r2)
 1001bf0:	10803fcc 	andi	r2,r2,255
 1001bf4:	1080201c 	xori	r2,r2,128
 1001bf8:	10bfe004 	addi	r2,r2,-128
 1001bfc:	10bfffd8 	cmpnei	r2,r2,-1
 1001c00:	1000021e 	bne	r2,zero,1001c0c <xQueueReceive+0x110>
 1001c04:	e0bff917 	ldw	r2,-28(fp)
 1001c08:	10001145 	stb	zero,69(r2)
 1001c0c:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001c10:	e0ffff04 	addi	r3,fp,-4
 1001c14:	e0bffb04 	addi	r2,fp,-20
 1001c18:	180b883a 	mov	r5,r3
 1001c1c:	1009883a 	mov	r4,r2
 1001c20:	1004a040 	call	1004a04 <xTaskCheckForTimeOut>
 1001c24:	1000131e 	bne	r2,zero,1001c74 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c28:	e13ff917 	ldw	r4,-28(fp)
 1001c2c:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c30:	10000c26 	beq	r2,zero,1001c64 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001c34:	e0bff917 	ldw	r2,-28(fp)
 1001c38:	10800904 	addi	r2,r2,36
 1001c3c:	e0ffff17 	ldw	r3,-4(fp)
 1001c40:	180b883a 	mov	r5,r3
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	100470c0 	call	100470c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001c4c:	e13ff917 	ldw	r4,-28(fp)
 1001c50:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001c54:	10042780 	call	1004278 <xTaskResumeAll>
 1001c58:	103fb21e 	bne	r2,zero,1001b24 <__alt_data_end+0xff001b24>
				{
					portYIELD_WITHIN_API();
 1001c5c:	003b683a 	trap	0
 1001c60:	003fb006 	br	1001b24 <__alt_data_end+0xff001b24>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 1001c64:	e13ff917 	ldw	r4,-28(fp)
 1001c68:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001c6c:	10042780 	call	1004278 <xTaskResumeAll>
 1001c70:	003fac06 	br	1001b24 <__alt_data_end+0xff001b24>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 1001c74:	e13ff917 	ldw	r4,-28(fp)
 1001c78:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001c7c:	10042780 	call	1004278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001c80:	e13ff917 	ldw	r4,-28(fp)
 1001c84:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001c88:	103fa626 	beq	r2,zero,1001b24 <__alt_data_end+0xff001b24>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001c8c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001c90:	e037883a 	mov	sp,fp
 1001c94:	dfc00117 	ldw	ra,4(sp)
 1001c98:	df000017 	ldw	fp,0(sp)
 1001c9c:	dec00204 	addi	sp,sp,8
 1001ca0:	f800283a 	ret

01001ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 1001ca4:	defff504 	addi	sp,sp,-44
 1001ca8:	dfc00a15 	stw	ra,40(sp)
 1001cac:	df000915 	stw	fp,36(sp)
 1001cb0:	df000904 	addi	fp,sp,36
 1001cb4:	e13ffe15 	stw	r4,-8(fp)
 1001cb8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001cbc:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 1001cc0:	e0bffe17 	ldw	r2,-8(fp)
 1001cc4:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 1001cc8:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001ccc:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1001cd0:	e0bff917 	ldw	r2,-28(fp)
 1001cd4:	10800e17 	ldw	r2,56(r2)
 1001cd8:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1001cdc:	e0bffa17 	ldw	r2,-24(fp)
 1001ce0:	10001726 	beq	r2,zero,1001d40 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1001ce4:	e0bffa17 	ldw	r2,-24(fp)
 1001ce8:	10ffffc4 	addi	r3,r2,-1
 1001cec:	e0bff917 	ldw	r2,-28(fp)
 1001cf0:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001cf4:	e0bff917 	ldw	r2,-28(fp)
 1001cf8:	10800017 	ldw	r2,0(r2)
 1001cfc:	1000041e 	bne	r2,zero,1001d10 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 1001d00:	10052580 	call	1005258 <pvTaskIncrementMutexHeldCount>
 1001d04:	1007883a 	mov	r3,r2
 1001d08:	e0bff917 	ldw	r2,-28(fp)
 1001d0c:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1001d10:	e0bff917 	ldw	r2,-28(fp)
 1001d14:	10800417 	ldw	r2,16(r2)
 1001d18:	10000626 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1001d1c:	e0bff917 	ldw	r2,-28(fp)
 1001d20:	10800404 	addi	r2,r2,16
 1001d24:	1009883a 	mov	r4,r2
 1001d28:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1001d2c:	10000126 	beq	r2,zero,1001d34 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 1001d30:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001d34:	10051b40 	call	10051b4 <vTaskExitCritical>
				return pdPASS;
 1001d38:	00800044 	movi	r2,1
 1001d3c:	00005806 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001d40:	e0bfff17 	ldw	r2,-4(fp)
 1001d44:	1000031e 	bne	r2,zero,1001d54 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 1001d48:	10051b40 	call	10051b4 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001d4c:	0005883a 	mov	r2,zero
 1001d50:	00005306 	br	1001ea0 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001d54:	e0bff717 	ldw	r2,-36(fp)
 1001d58:	1000051e 	bne	r2,zero,1001d70 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001d5c:	e0bffc04 	addi	r2,fp,-16
 1001d60:	1009883a 	mov	r4,r2
 1001d64:	10049c80 	call	10049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001d68:	00800044 	movi	r2,1
 1001d6c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001d70:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001d74:	100424c0 	call	100424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001d78:	10051600 	call	1005160 <vTaskEnterCritical>
 1001d7c:	e0bff917 	ldw	r2,-28(fp)
 1001d80:	10801103 	ldbu	r2,68(r2)
 1001d84:	10803fcc 	andi	r2,r2,255
 1001d88:	1080201c 	xori	r2,r2,128
 1001d8c:	10bfe004 	addi	r2,r2,-128
 1001d90:	10bfffd8 	cmpnei	r2,r2,-1
 1001d94:	1000021e 	bne	r2,zero,1001da0 <xQueueSemaphoreTake+0xfc>
 1001d98:	e0bff917 	ldw	r2,-28(fp)
 1001d9c:	10001105 	stb	zero,68(r2)
 1001da0:	e0bff917 	ldw	r2,-28(fp)
 1001da4:	10801143 	ldbu	r2,69(r2)
 1001da8:	10803fcc 	andi	r2,r2,255
 1001dac:	1080201c 	xori	r2,r2,128
 1001db0:	10bfe004 	addi	r2,r2,-128
 1001db4:	10bfffd8 	cmpnei	r2,r2,-1
 1001db8:	1000021e 	bne	r2,zero,1001dc4 <xQueueSemaphoreTake+0x120>
 1001dbc:	e0bff917 	ldw	r2,-28(fp)
 1001dc0:	10001145 	stb	zero,69(r2)
 1001dc4:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001dc8:	e0ffff04 	addi	r3,fp,-4
 1001dcc:	e0bffc04 	addi	r2,fp,-16
 1001dd0:	180b883a 	mov	r5,r3
 1001dd4:	1009883a 	mov	r4,r2
 1001dd8:	1004a040 	call	1004a04 <xTaskCheckForTimeOut>
 1001ddc:	10001d1e 	bne	r2,zero,1001e54 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001de0:	e13ff917 	ldw	r4,-28(fp)
 1001de4:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001de8:	10001626 	beq	r2,zero,1001e44 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1001dec:	e0bff917 	ldw	r2,-28(fp)
 1001df0:	10800017 	ldw	r2,0(r2)
 1001df4:	1000071e 	bne	r2,zero,1001e14 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 1001df8:	10051600 	call	1005160 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 1001dfc:	e0bff917 	ldw	r2,-28(fp)
 1001e00:	10800217 	ldw	r2,8(r2)
 1001e04:	1009883a 	mov	r4,r2
 1001e08:	1004de40 	call	1004de4 <xTaskPriorityInherit>
 1001e0c:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 1001e10:	10051b40 	call	10051b4 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001e14:	e0bff917 	ldw	r2,-28(fp)
 1001e18:	10800904 	addi	r2,r2,36
 1001e1c:	e0ffff17 	ldw	r3,-4(fp)
 1001e20:	180b883a 	mov	r5,r3
 1001e24:	1009883a 	mov	r4,r2
 1001e28:	100470c0 	call	100470c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 1001e2c:	e13ff917 	ldw	r4,-28(fp)
 1001e30:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1001e34:	10042780 	call	1004278 <xTaskResumeAll>
 1001e38:	103fa41e 	bne	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				{
					portYIELD_WITHIN_API();
 1001e3c:	003b683a 	trap	0
 1001e40:	003fa206 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 1001e44:	e13ff917 	ldw	r4,-28(fp)
 1001e48:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 1001e4c:	10042780 	call	1004278 <xTaskResumeAll>
 1001e50:	003f9e06 	br	1001ccc <__alt_data_end+0xff001ccc>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 1001e54:	e13ff917 	ldw	r4,-28(fp)
 1001e58:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 1001e5c:	10042780 	call	1004278 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001e60:	e13ff917 	ldw	r4,-28(fp)
 1001e64:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001e68:	103f9826 	beq	r2,zero,1001ccc <__alt_data_end+0xff001ccc>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 1001e6c:	e0bff817 	ldw	r2,-32(fp)
 1001e70:	10000a26 	beq	r2,zero,1001e9c <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 1001e74:	10051600 	call	1005160 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1001e78:	e13ff917 	ldw	r4,-28(fp)
 1001e7c:	10022cc0 	call	10022cc <prvGetDisinheritPriorityAfterTimeout>
 1001e80:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 1001e84:	e0bff917 	ldw	r2,-28(fp)
 1001e88:	10800217 	ldw	r2,8(r2)
 1001e8c:	e17ffb17 	ldw	r5,-20(fp)
 1001e90:	1009883a 	mov	r4,r2
 1001e94:	10050200 	call	1005020 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 1001e98:	10051b40 	call	10051b4 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 1001e9c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1001ea0:	e037883a 	mov	sp,fp
 1001ea4:	dfc00117 	ldw	ra,4(sp)
 1001ea8:	df000017 	ldw	fp,0(sp)
 1001eac:	dec00204 	addi	sp,sp,8
 1001eb0:	f800283a 	ret

01001eb4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 1001eb4:	defff504 	addi	sp,sp,-44
 1001eb8:	dfc00a15 	stw	ra,40(sp)
 1001ebc:	df000915 	stw	fp,36(sp)
 1001ec0:	df000904 	addi	fp,sp,36
 1001ec4:	e13ffd15 	stw	r4,-12(fp)
 1001ec8:	e17ffe15 	stw	r5,-8(fp)
 1001ecc:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 1001ed0:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1001ed4:	e0bffd17 	ldw	r2,-12(fp)
 1001ed8:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 1001edc:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1001ee0:	e0bff817 	ldw	r2,-32(fp)
 1001ee4:	10800e17 	ldw	r2,56(r2)
 1001ee8:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1001eec:	e0bff917 	ldw	r2,-28(fp)
 1001ef0:	10001526 	beq	r2,zero,1001f48 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1001ef4:	e0bff817 	ldw	r2,-32(fp)
 1001ef8:	10800317 	ldw	r2,12(r2)
 1001efc:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1001f00:	e17ffe17 	ldw	r5,-8(fp)
 1001f04:	e13ff817 	ldw	r4,-32(fp)
 1001f08:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1001f0c:	e0bff817 	ldw	r2,-32(fp)
 1001f10:	e0fffa17 	ldw	r3,-24(fp)
 1001f14:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1001f18:	e0bff817 	ldw	r2,-32(fp)
 1001f1c:	10800917 	ldw	r2,36(r2)
 1001f20:	10000626 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1001f24:	e0bff817 	ldw	r2,-32(fp)
 1001f28:	10800904 	addi	r2,r2,36
 1001f2c:	1009883a 	mov	r4,r2
 1001f30:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1001f34:	10000126 	beq	r2,zero,1001f3c <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 1001f38:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 1001f3c:	10051b40 	call	10051b4 <vTaskExitCritical>
				return pdPASS;
 1001f40:	00800044 	movi	r2,1
 1001f44:	00004206 	br	1002050 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 1001f48:	e0bfff17 	ldw	r2,-4(fp)
 1001f4c:	1000031e 	bne	r2,zero,1001f5c <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 1001f50:	10051b40 	call	10051b4 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 1001f54:	0005883a 	mov	r2,zero
 1001f58:	00003d06 	br	1002050 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 1001f5c:	e0bff717 	ldw	r2,-36(fp)
 1001f60:	1000051e 	bne	r2,zero,1001f78 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 1001f64:	e0bffb04 	addi	r2,fp,-20
 1001f68:	1009883a 	mov	r4,r2
 1001f6c:	10049c80 	call	10049c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 1001f70:	00800044 	movi	r2,1
 1001f74:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 1001f78:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 1001f7c:	100424c0 	call	100424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 1001f80:	10051600 	call	1005160 <vTaskEnterCritical>
 1001f84:	e0bff817 	ldw	r2,-32(fp)
 1001f88:	10801103 	ldbu	r2,68(r2)
 1001f8c:	10803fcc 	andi	r2,r2,255
 1001f90:	1080201c 	xori	r2,r2,128
 1001f94:	10bfe004 	addi	r2,r2,-128
 1001f98:	10bfffd8 	cmpnei	r2,r2,-1
 1001f9c:	1000021e 	bne	r2,zero,1001fa8 <xQueuePeek+0xf4>
 1001fa0:	e0bff817 	ldw	r2,-32(fp)
 1001fa4:	10001105 	stb	zero,68(r2)
 1001fa8:	e0bff817 	ldw	r2,-32(fp)
 1001fac:	10801143 	ldbu	r2,69(r2)
 1001fb0:	10803fcc 	andi	r2,r2,255
 1001fb4:	1080201c 	xori	r2,r2,128
 1001fb8:	10bfe004 	addi	r2,r2,-128
 1001fbc:	10bfffd8 	cmpnei	r2,r2,-1
 1001fc0:	1000021e 	bne	r2,zero,1001fcc <xQueuePeek+0x118>
 1001fc4:	e0bff817 	ldw	r2,-32(fp)
 1001fc8:	10001145 	stb	zero,69(r2)
 1001fcc:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1001fd0:	e0ffff04 	addi	r3,fp,-4
 1001fd4:	e0bffb04 	addi	r2,fp,-20
 1001fd8:	180b883a 	mov	r5,r3
 1001fdc:	1009883a 	mov	r4,r2
 1001fe0:	1004a040 	call	1004a04 <xTaskCheckForTimeOut>
 1001fe4:	1000131e 	bne	r2,zero,1002034 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1001fe8:	e13ff817 	ldw	r4,-32(fp)
 1001fec:	10026380 	call	1002638 <prvIsQueueEmpty>
 1001ff0:	10000c26 	beq	r2,zero,1002024 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1001ff4:	e0bff817 	ldw	r2,-32(fp)
 1001ff8:	10800904 	addi	r2,r2,36
 1001ffc:	e0ffff17 	ldw	r3,-4(fp)
 1002000:	180b883a 	mov	r5,r3
 1002004:	1009883a 	mov	r4,r2
 1002008:	100470c0 	call	100470c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 100200c:	e13ff817 	ldw	r4,-32(fp)
 1002010:	10025440 	call	1002544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 1002014:	10042780 	call	1004278 <xTaskResumeAll>
 1002018:	103fb01e 	bne	r2,zero,1001edc <__alt_data_end+0xff001edc>
				{
					portYIELD_WITHIN_API();
 100201c:	003b683a 	trap	0
 1002020:	003fae06 	br	1001edc <__alt_data_end+0xff001edc>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 1002024:	e13ff817 	ldw	r4,-32(fp)
 1002028:	10025440 	call	1002544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 100202c:	10042780 	call	1004278 <xTaskResumeAll>
 1002030:	003faa06 	br	1001edc <__alt_data_end+0xff001edc>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 1002034:	e13ff817 	ldw	r4,-32(fp)
 1002038:	10025440 	call	1002544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 100203c:	10042780 	call	1004278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1002040:	e13ff817 	ldw	r4,-32(fp)
 1002044:	10026380 	call	1002638 <prvIsQueueEmpty>
 1002048:	103fa426 	beq	r2,zero,1001edc <__alt_data_end+0xff001edc>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 100204c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 1002050:	e037883a 	mov	sp,fp
 1002054:	dfc00117 	ldw	ra,4(sp)
 1002058:	df000017 	ldw	fp,0(sp)
 100205c:	dec00204 	addi	sp,sp,8
 1002060:	f800283a 	ret

01002064 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002064:	defff604 	addi	sp,sp,-40
 1002068:	dfc00915 	stw	ra,36(sp)
 100206c:	df000815 	stw	fp,32(sp)
 1002070:	df000804 	addi	fp,sp,32
 1002074:	e13ffd15 	stw	r4,-12(fp)
 1002078:	e17ffe15 	stw	r5,-8(fp)
 100207c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 1002080:	e0bffd17 	ldw	r2,-12(fp)
 1002084:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002088:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100208c:	e0bff917 	ldw	r2,-28(fp)
 1002090:	10800e17 	ldw	r2,56(r2)
 1002094:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1002098:	e0bffb17 	ldw	r2,-20(fp)
 100209c:	10002326 	beq	r2,zero,100212c <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 10020a0:	e0bff917 	ldw	r2,-28(fp)
 10020a4:	10801103 	ldbu	r2,68(r2)
 10020a8:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 10020ac:	e17ffe17 	ldw	r5,-8(fp)
 10020b0:	e13ff917 	ldw	r4,-28(fp)
 10020b4:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 10020b8:	e0bffb17 	ldw	r2,-20(fp)
 10020bc:	10ffffc4 	addi	r3,r2,-1
 10020c0:	e0bff917 	ldw	r2,-28(fp)
 10020c4:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 10020c8:	e0bffc07 	ldb	r2,-16(fp)
 10020cc:	10bfffd8 	cmpnei	r2,r2,-1
 10020d0:	10000e1e 	bne	r2,zero,100210c <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10020d4:	e0bff917 	ldw	r2,-28(fp)
 10020d8:	10800417 	ldw	r2,16(r2)
 10020dc:	10001026 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10020e0:	e0bff917 	ldw	r2,-28(fp)
 10020e4:	10800404 	addi	r2,r2,16
 10020e8:	1009883a 	mov	r4,r2
 10020ec:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 10020f0:	10000b26 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 10020f4:	e0bfff17 	ldw	r2,-4(fp)
 10020f8:	10000926 	beq	r2,zero,1002120 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 10020fc:	e0bfff17 	ldw	r2,-4(fp)
 1002100:	00c00044 	movi	r3,1
 1002104:	10c00015 	stw	r3,0(r2)
 1002108:	00000506 	br	1002120 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 100210c:	e0bffc03 	ldbu	r2,-16(fp)
 1002110:	10800044 	addi	r2,r2,1
 1002114:	1007883a 	mov	r3,r2
 1002118:	e0bff917 	ldw	r2,-28(fp)
 100211c:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 1002120:	00800044 	movi	r2,1
 1002124:	e0bff815 	stw	r2,-32(fp)
 1002128:	00000106 	br	1002130 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 100212c:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1002130:	e0bff817 	ldw	r2,-32(fp)
}
 1002134:	e037883a 	mov	sp,fp
 1002138:	dfc00117 	ldw	ra,4(sp)
 100213c:	df000017 	ldw	fp,0(sp)
 1002140:	dec00204 	addi	sp,sp,8
 1002144:	f800283a 	ret

01002148 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 1002148:	defff804 	addi	sp,sp,-32
 100214c:	dfc00715 	stw	ra,28(sp)
 1002150:	df000615 	stw	fp,24(sp)
 1002154:	df000604 	addi	fp,sp,24
 1002158:	e13ffe15 	stw	r4,-8(fp)
 100215c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 1002160:	e0bffe17 	ldw	r2,-8(fp)
 1002164:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1002168:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 100216c:	e0bffb17 	ldw	r2,-20(fp)
 1002170:	10800e17 	ldw	r2,56(r2)
 1002174:	10000c26 	beq	r2,zero,10021a8 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 1002178:	e0bffb17 	ldw	r2,-20(fp)
 100217c:	10800317 	ldw	r2,12(r2)
 1002180:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1002184:	e17fff17 	ldw	r5,-4(fp)
 1002188:	e13ffb17 	ldw	r4,-20(fp)
 100218c:	10024a80 	call	10024a8 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 1002190:	e0bffb17 	ldw	r2,-20(fp)
 1002194:	e0fffd17 	ldw	r3,-12(fp)
 1002198:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 100219c:	00800044 	movi	r2,1
 10021a0:	e0bffa15 	stw	r2,-24(fp)
 10021a4:	00000106 	br	10021ac <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 10021a8:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 10021ac:	e0bffa17 	ldw	r2,-24(fp)
}
 10021b0:	e037883a 	mov	sp,fp
 10021b4:	dfc00117 	ldw	ra,4(sp)
 10021b8:	df000017 	ldw	fp,0(sp)
 10021bc:	dec00204 	addi	sp,sp,8
 10021c0:	f800283a 	ret

010021c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 10021c4:	defffc04 	addi	sp,sp,-16
 10021c8:	dfc00315 	stw	ra,12(sp)
 10021cc:	df000215 	stw	fp,8(sp)
 10021d0:	df000204 	addi	fp,sp,8
 10021d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 10021d8:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 10021dc:	e0bfff17 	ldw	r2,-4(fp)
 10021e0:	10800e17 	ldw	r2,56(r2)
 10021e4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 10021e8:	10051b40 	call	10051b4 <vTaskExitCritical>

	return uxReturn;
 10021ec:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 10021f0:	e037883a 	mov	sp,fp
 10021f4:	dfc00117 	ldw	ra,4(sp)
 10021f8:	df000017 	ldw	fp,0(sp)
 10021fc:	dec00204 	addi	sp,sp,8
 1002200:	f800283a 	ret

01002204 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 1002204:	defffb04 	addi	sp,sp,-20
 1002208:	dfc00415 	stw	ra,16(sp)
 100220c:	df000315 	stw	fp,12(sp)
 1002210:	df000304 	addi	fp,sp,12
 1002214:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002218:	e0bfff17 	ldw	r2,-4(fp)
 100221c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 1002220:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 1002224:	e0bffd17 	ldw	r2,-12(fp)
 1002228:	10c00f17 	ldw	r3,60(r2)
 100222c:	e0bffd17 	ldw	r2,-12(fp)
 1002230:	10800e17 	ldw	r2,56(r2)
 1002234:	1885c83a 	sub	r2,r3,r2
 1002238:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 100223c:	10051b40 	call	10051b4 <vTaskExitCritical>

	return uxReturn;
 1002240:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002244:	e037883a 	mov	sp,fp
 1002248:	dfc00117 	ldw	ra,4(sp)
 100224c:	df000017 	ldw	fp,0(sp)
 1002250:	dec00204 	addi	sp,sp,8
 1002254:	f800283a 	ret

01002258 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 1002258:	defffc04 	addi	sp,sp,-16
 100225c:	df000315 	stw	fp,12(sp)
 1002260:	df000304 	addi	fp,sp,12
 1002264:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 1002268:	e0bfff17 	ldw	r2,-4(fp)
 100226c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 1002270:	e0bffd17 	ldw	r2,-12(fp)
 1002274:	10800e17 	ldw	r2,56(r2)
 1002278:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 100227c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 1002280:	e037883a 	mov	sp,fp
 1002284:	df000017 	ldw	fp,0(sp)
 1002288:	dec00104 	addi	sp,sp,4
 100228c:	f800283a 	ret

01002290 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 1002290:	defffc04 	addi	sp,sp,-16
 1002294:	dfc00315 	stw	ra,12(sp)
 1002298:	df000215 	stw	fp,8(sp)
 100229c:	df000204 	addi	fp,sp,8
 10022a0:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 10022a4:	e0bfff17 	ldw	r2,-4(fp)
 10022a8:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 10022ac:	e13ffe17 	ldw	r4,-8(fp)
 10022b0:	10011840 	call	1001184 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 10022b4:	0001883a 	nop
 10022b8:	e037883a 	mov	sp,fp
 10022bc:	dfc00117 	ldw	ra,4(sp)
 10022c0:	df000017 	ldw	fp,0(sp)
 10022c4:	dec00204 	addi	sp,sp,8
 10022c8:	f800283a 	ret

010022cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 10022cc:	defffd04 	addi	sp,sp,-12
 10022d0:	df000215 	stw	fp,8(sp)
 10022d4:	df000204 	addi	fp,sp,8
 10022d8:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 10022dc:	e0bfff17 	ldw	r2,-4(fp)
 10022e0:	10800917 	ldw	r2,36(r2)
 10022e4:	10000726 	beq	r2,zero,1002304 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 10022e8:	e0bfff17 	ldw	r2,-4(fp)
 10022ec:	10800c17 	ldw	r2,48(r2)
 10022f0:	10800017 	ldw	r2,0(r2)
 10022f4:	00c00144 	movi	r3,5
 10022f8:	1885c83a 	sub	r2,r3,r2
 10022fc:	e0bffe15 	stw	r2,-8(fp)
 1002300:	00000106 	br	1002308 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 1002304:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 1002308:	e0bffe17 	ldw	r2,-8(fp)
	}
 100230c:	e037883a 	mov	sp,fp
 1002310:	df000017 	ldw	fp,0(sp)
 1002314:	dec00104 	addi	sp,sp,4
 1002318:	f800283a 	ret

0100231c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 100231c:	defff904 	addi	sp,sp,-28
 1002320:	dfc00615 	stw	ra,24(sp)
 1002324:	df000515 	stw	fp,20(sp)
 1002328:	df000504 	addi	fp,sp,20
 100232c:	e13ffd15 	stw	r4,-12(fp)
 1002330:	e17ffe15 	stw	r5,-8(fp)
 1002334:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 1002338:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 100233c:	e0bffd17 	ldw	r2,-12(fp)
 1002340:	10800e17 	ldw	r2,56(r2)
 1002344:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 1002348:	e0bffd17 	ldw	r2,-12(fp)
 100234c:	10801017 	ldw	r2,64(r2)
 1002350:	10000b1e 	bne	r2,zero,1002380 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1002354:	e0bffd17 	ldw	r2,-12(fp)
 1002358:	10800017 	ldw	r2,0(r2)
 100235c:	1000481e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 1002360:	e0bffd17 	ldw	r2,-12(fp)
 1002364:	10800217 	ldw	r2,8(r2)
 1002368:	1009883a 	mov	r4,r2
 100236c:	1004f240 	call	1004f24 <xTaskPriorityDisinherit>
 1002370:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 1002374:	e0bffd17 	ldw	r2,-12(fp)
 1002378:	10000215 	stw	zero,8(r2)
 100237c:	00004006 	br	1002480 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 1002380:	e0bfff17 	ldw	r2,-4(fp)
 1002384:	1000191e 	bne	r2,zero,10023ec <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 1002388:	e0bffd17 	ldw	r2,-12(fp)
 100238c:	10c00117 	ldw	r3,4(r2)
 1002390:	e0bffd17 	ldw	r2,-12(fp)
 1002394:	10801017 	ldw	r2,64(r2)
 1002398:	100d883a 	mov	r6,r2
 100239c:	e17ffe17 	ldw	r5,-8(fp)
 10023a0:	1809883a 	mov	r4,r3
 10023a4:	1005a780 	call	1005a78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10023a8:	e0bffd17 	ldw	r2,-12(fp)
 10023ac:	10c00117 	ldw	r3,4(r2)
 10023b0:	e0bffd17 	ldw	r2,-12(fp)
 10023b4:	10801017 	ldw	r2,64(r2)
 10023b8:	1887883a 	add	r3,r3,r2
 10023bc:	e0bffd17 	ldw	r2,-12(fp)
 10023c0:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 10023c4:	e0bffd17 	ldw	r2,-12(fp)
 10023c8:	10c00117 	ldw	r3,4(r2)
 10023cc:	e0bffd17 	ldw	r2,-12(fp)
 10023d0:	10800217 	ldw	r2,8(r2)
 10023d4:	18802a36 	bltu	r3,r2,1002480 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 10023d8:	e0bffd17 	ldw	r2,-12(fp)
 10023dc:	10c00017 	ldw	r3,0(r2)
 10023e0:	e0bffd17 	ldw	r2,-12(fp)
 10023e4:	10c00115 	stw	r3,4(r2)
 10023e8:	00002506 	br	1002480 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 10023ec:	e0bffd17 	ldw	r2,-12(fp)
 10023f0:	10c00317 	ldw	r3,12(r2)
 10023f4:	e0bffd17 	ldw	r2,-12(fp)
 10023f8:	10801017 	ldw	r2,64(r2)
 10023fc:	100d883a 	mov	r6,r2
 1002400:	e17ffe17 	ldw	r5,-8(fp)
 1002404:	1809883a 	mov	r4,r3
 1002408:	1005a780 	call	1005a78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 100240c:	e0bffd17 	ldw	r2,-12(fp)
 1002410:	10c00317 	ldw	r3,12(r2)
 1002414:	e0bffd17 	ldw	r2,-12(fp)
 1002418:	10801017 	ldw	r2,64(r2)
 100241c:	0085c83a 	sub	r2,zero,r2
 1002420:	1887883a 	add	r3,r3,r2
 1002424:	e0bffd17 	ldw	r2,-12(fp)
 1002428:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 100242c:	e0bffd17 	ldw	r2,-12(fp)
 1002430:	10c00317 	ldw	r3,12(r2)
 1002434:	e0bffd17 	ldw	r2,-12(fp)
 1002438:	10800017 	ldw	r2,0(r2)
 100243c:	1880082e 	bgeu	r3,r2,1002460 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 1002440:	e0bffd17 	ldw	r2,-12(fp)
 1002444:	10c00217 	ldw	r3,8(r2)
 1002448:	e0bffd17 	ldw	r2,-12(fp)
 100244c:	10801017 	ldw	r2,64(r2)
 1002450:	0085c83a 	sub	r2,zero,r2
 1002454:	1887883a 	add	r3,r3,r2
 1002458:	e0bffd17 	ldw	r2,-12(fp)
 100245c:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 1002460:	e0bfff17 	ldw	r2,-4(fp)
 1002464:	10800098 	cmpnei	r2,r2,2
 1002468:	1000051e 	bne	r2,zero,1002480 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 100246c:	e0bffc17 	ldw	r2,-16(fp)
 1002470:	10000326 	beq	r2,zero,1002480 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 1002474:	e0bffc17 	ldw	r2,-16(fp)
 1002478:	10bfffc4 	addi	r2,r2,-1
 100247c:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1002480:	e0bffc17 	ldw	r2,-16(fp)
 1002484:	10c00044 	addi	r3,r2,1
 1002488:	e0bffd17 	ldw	r2,-12(fp)
 100248c:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 1002490:	e0bffb17 	ldw	r2,-20(fp)
}
 1002494:	e037883a 	mov	sp,fp
 1002498:	dfc00117 	ldw	ra,4(sp)
 100249c:	df000017 	ldw	fp,0(sp)
 10024a0:	dec00204 	addi	sp,sp,8
 10024a4:	f800283a 	ret

010024a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 10024a8:	defffc04 	addi	sp,sp,-16
 10024ac:	dfc00315 	stw	ra,12(sp)
 10024b0:	df000215 	stw	fp,8(sp)
 10024b4:	df000204 	addi	fp,sp,8
 10024b8:	e13ffe15 	stw	r4,-8(fp)
 10024bc:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 10024c0:	e0bffe17 	ldw	r2,-8(fp)
 10024c4:	10801017 	ldw	r2,64(r2)
 10024c8:	10001826 	beq	r2,zero,100252c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 10024cc:	e0bffe17 	ldw	r2,-8(fp)
 10024d0:	10c00317 	ldw	r3,12(r2)
 10024d4:	e0bffe17 	ldw	r2,-8(fp)
 10024d8:	10801017 	ldw	r2,64(r2)
 10024dc:	1887883a 	add	r3,r3,r2
 10024e0:	e0bffe17 	ldw	r2,-8(fp)
 10024e4:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 10024e8:	e0bffe17 	ldw	r2,-8(fp)
 10024ec:	10c00317 	ldw	r3,12(r2)
 10024f0:	e0bffe17 	ldw	r2,-8(fp)
 10024f4:	10800217 	ldw	r2,8(r2)
 10024f8:	18800436 	bltu	r3,r2,100250c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 10024fc:	e0bffe17 	ldw	r2,-8(fp)
 1002500:	10c00017 	ldw	r3,0(r2)
 1002504:	e0bffe17 	ldw	r2,-8(fp)
 1002508:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 100250c:	e0bffe17 	ldw	r2,-8(fp)
 1002510:	10c00317 	ldw	r3,12(r2)
 1002514:	e0bffe17 	ldw	r2,-8(fp)
 1002518:	10801017 	ldw	r2,64(r2)
 100251c:	100d883a 	mov	r6,r2
 1002520:	180b883a 	mov	r5,r3
 1002524:	e13fff17 	ldw	r4,-4(fp)
 1002528:	1005a780 	call	1005a78 <memcpy>
	}
}
 100252c:	0001883a 	nop
 1002530:	e037883a 	mov	sp,fp
 1002534:	dfc00117 	ldw	ra,4(sp)
 1002538:	df000017 	ldw	fp,0(sp)
 100253c:	dec00204 	addi	sp,sp,8
 1002540:	f800283a 	ret

01002544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 1002544:	defffc04 	addi	sp,sp,-16
 1002548:	dfc00315 	stw	ra,12(sp)
 100254c:	df000215 	stw	fp,8(sp)
 1002550:	df000204 	addi	fp,sp,8
 1002554:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 1002558:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 100255c:	e0bfff17 	ldw	r2,-4(fp)
 1002560:	10801143 	ldbu	r2,69(r2)
 1002564:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 1002568:	00000c06 	br	100259c <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 100256c:	e0bfff17 	ldw	r2,-4(fp)
 1002570:	10800917 	ldw	r2,36(r2)
 1002574:	10000c26 	beq	r2,zero,10025a8 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1002578:	e0bfff17 	ldw	r2,-4(fp)
 100257c:	10800904 	addi	r2,r2,36
 1002580:	1009883a 	mov	r4,r2
 1002584:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 1002588:	10000126 	beq	r2,zero,1002590 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 100258c:	1004ae40 	call	1004ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 1002590:	e0bffe03 	ldbu	r2,-8(fp)
 1002594:	10bfffc4 	addi	r2,r2,-1
 1002598:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 100259c:	e0bffe07 	ldb	r2,-8(fp)
 10025a0:	00bff216 	blt	zero,r2,100256c <__alt_data_end+0xff00256c>
 10025a4:	00000106 	br	10025ac <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 10025a8:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 10025ac:	e0bfff17 	ldw	r2,-4(fp)
 10025b0:	00ffffc4 	movi	r3,-1
 10025b4:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 10025b8:	10051b40 	call	10051b4 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 10025bc:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 10025c0:	e0bfff17 	ldw	r2,-4(fp)
 10025c4:	10801103 	ldbu	r2,68(r2)
 10025c8:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 10025cc:	00000c06 	br	1002600 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 10025d0:	e0bfff17 	ldw	r2,-4(fp)
 10025d4:	10800417 	ldw	r2,16(r2)
 10025d8:	10000c26 	beq	r2,zero,100260c <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 10025dc:	e0bfff17 	ldw	r2,-4(fp)
 10025e0:	10800404 	addi	r2,r2,16
 10025e4:	1009883a 	mov	r4,r2
 10025e8:	10047c00 	call	10047c0 <xTaskRemoveFromEventList>
 10025ec:	10000126 	beq	r2,zero,10025f4 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 10025f0:	1004ae40 	call	1004ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 10025f4:	e0bffe43 	ldbu	r2,-7(fp)
 10025f8:	10bfffc4 	addi	r2,r2,-1
 10025fc:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 1002600:	e0bffe47 	ldb	r2,-7(fp)
 1002604:	00bff216 	blt	zero,r2,10025d0 <__alt_data_end+0xff0025d0>
 1002608:	00000106 	br	1002610 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 100260c:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 1002610:	e0bfff17 	ldw	r2,-4(fp)
 1002614:	00ffffc4 	movi	r3,-1
 1002618:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 100261c:	10051b40 	call	10051b4 <vTaskExitCritical>
}
 1002620:	0001883a 	nop
 1002624:	e037883a 	mov	sp,fp
 1002628:	dfc00117 	ldw	ra,4(sp)
 100262c:	df000017 	ldw	fp,0(sp)
 1002630:	dec00204 	addi	sp,sp,8
 1002634:	f800283a 	ret

01002638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 1002638:	defffc04 	addi	sp,sp,-16
 100263c:	dfc00315 	stw	ra,12(sp)
 1002640:	df000215 	stw	fp,8(sp)
 1002644:	df000204 	addi	fp,sp,8
 1002648:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 100264c:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 1002650:	e0bfff17 	ldw	r2,-4(fp)
 1002654:	10800e17 	ldw	r2,56(r2)
 1002658:	1000031e 	bne	r2,zero,1002668 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 100265c:	00800044 	movi	r2,1
 1002660:	e0bffe15 	stw	r2,-8(fp)
 1002664:	00000106 	br	100266c <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 1002668:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100266c:	10051b40 	call	10051b4 <vTaskExitCritical>

	return xReturn;
 1002670:	e0bffe17 	ldw	r2,-8(fp)
}
 1002674:	e037883a 	mov	sp,fp
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	df000017 	ldw	fp,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret

01002688 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 1002688:	defffc04 	addi	sp,sp,-16
 100268c:	df000315 	stw	fp,12(sp)
 1002690:	df000304 	addi	fp,sp,12
 1002694:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002698:	e0bfff17 	ldw	r2,-4(fp)
 100269c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 10026a0:	e0bffe17 	ldw	r2,-8(fp)
 10026a4:	10800e17 	ldw	r2,56(r2)
 10026a8:	1000031e 	bne	r2,zero,10026b8 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 10026ac:	00800044 	movi	r2,1
 10026b0:	e0bffd15 	stw	r2,-12(fp)
 10026b4:	00000106 	br	10026bc <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 10026b8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 10026bc:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 10026c0:	e037883a 	mov	sp,fp
 10026c4:	df000017 	ldw	fp,0(sp)
 10026c8:	dec00104 	addi	sp,sp,4
 10026cc:	f800283a 	ret

010026d0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 10026d0:	defffc04 	addi	sp,sp,-16
 10026d4:	dfc00315 	stw	ra,12(sp)
 10026d8:	df000215 	stw	fp,8(sp)
 10026dc:	df000204 	addi	fp,sp,8
 10026e0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 10026e4:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 10026e8:	e0bfff17 	ldw	r2,-4(fp)
 10026ec:	10c00e17 	ldw	r3,56(r2)
 10026f0:	e0bfff17 	ldw	r2,-4(fp)
 10026f4:	10800f17 	ldw	r2,60(r2)
 10026f8:	1880031e 	bne	r3,r2,1002708 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 10026fc:	00800044 	movi	r2,1
 1002700:	e0bffe15 	stw	r2,-8(fp)
 1002704:	00000106 	br	100270c <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 1002708:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 100270c:	10051b40 	call	10051b4 <vTaskExitCritical>

	return xReturn;
 1002710:	e0bffe17 	ldw	r2,-8(fp)
}
 1002714:	e037883a 	mov	sp,fp
 1002718:	dfc00117 	ldw	ra,4(sp)
 100271c:	df000017 	ldw	fp,0(sp)
 1002720:	dec00204 	addi	sp,sp,8
 1002724:	f800283a 	ret

01002728 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 1002728:	defffc04 	addi	sp,sp,-16
 100272c:	df000315 	stw	fp,12(sp)
 1002730:	df000304 	addi	fp,sp,12
 1002734:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 1002738:	e0bfff17 	ldw	r2,-4(fp)
 100273c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1002740:	e0bffe17 	ldw	r2,-8(fp)
 1002744:	10c00e17 	ldw	r3,56(r2)
 1002748:	e0bffe17 	ldw	r2,-8(fp)
 100274c:	10800f17 	ldw	r2,60(r2)
 1002750:	1880031e 	bne	r3,r2,1002760 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 1002754:	00800044 	movi	r2,1
 1002758:	e0bffd15 	stw	r2,-12(fp)
 100275c:	00000106 	br	1002764 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 1002760:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 1002764:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1002768:	e037883a 	mov	sp,fp
 100276c:	df000017 	ldw	fp,0(sp)
 1002770:	dec00104 	addi	sp,sp,4
 1002774:	f800283a 	ret

01002778 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 1002778:	defff804 	addi	sp,sp,-32
 100277c:	dfc00715 	stw	ra,28(sp)
 1002780:	df000615 	stw	fp,24(sp)
 1002784:	df000604 	addi	fp,sp,24
 1002788:	e13ffd15 	stw	r4,-12(fp)
 100278c:	e17ffe15 	stw	r5,-8(fp)
 1002790:	e1bfff15 	stw	r6,-4(fp)

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 1002794:	e0bfff17 	ldw	r2,-4(fp)
 1002798:	10800058 	cmpnei	r2,r2,1
 100279c:	1000031e 	bne	r2,zero,10027ac <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 10027a0:	00800044 	movi	r2,1
 10027a4:	e0bffb05 	stb	r2,-20(fp)
 10027a8:	00000106 	br	10027b0 <xStreamBufferGenericCreate+0x38>
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 10027ac:	e03ffb05 	stb	zero,-20(fp)
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 10027b0:	e0bffe17 	ldw	r2,-8(fp)
 10027b4:	1000021e 	bne	r2,zero,10027c0 <xStreamBufferGenericCreate+0x48>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 10027b8:	00800044 	movi	r2,1
 10027bc:	e0bffe15 	stw	r2,-8(fp)
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 10027c0:	e0bffd17 	ldw	r2,-12(fp)
 10027c4:	10800044 	addi	r2,r2,1
 10027c8:	e0bffd15 	stw	r2,-12(fp)
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 10027cc:	e0bffd17 	ldw	r2,-12(fp)
 10027d0:	10800804 	addi	r2,r2,32
 10027d4:	1009883a 	mov	r4,r2
 10027d8:	1000fb00 	call	1000fb0 <pvPortMalloc>
 10027dc:	e0bffc15 	stw	r2,-16(fp)

		if( pucAllocatedMemory != NULL )
 10027e0:	e0bffc17 	ldw	r2,-16(fp)
 10027e4:	10000926 	beq	r2,zero,100280c <xStreamBufferGenericCreate+0x94>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 10027e8:	e0bffc17 	ldw	r2,-16(fp)
 10027ec:	10c00804 	addi	r3,r2,32
 10027f0:	e0bffb03 	ldbu	r2,-20(fp)
 10027f4:	d8800015 	stw	r2,0(sp)
 10027f8:	e1fffe17 	ldw	r7,-8(fp)
 10027fc:	e1bffd17 	ldw	r6,-12(fp)
 1002800:	180b883a 	mov	r5,r3
 1002804:	e13ffc17 	ldw	r4,-16(fp)
 1002808:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 100280c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1002810:	e037883a 	mov	sp,fp
 1002814:	dfc00117 	ldw	ra,4(sp)
 1002818:	df000017 	ldw	fp,0(sp)
 100281c:	dec00204 	addi	sp,sp,8
 1002820:	f800283a 	ret

01002824 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 1002824:	defffc04 	addi	sp,sp,-16
 1002828:	dfc00315 	stw	ra,12(sp)
 100282c:	df000215 	stw	fp,8(sp)
 1002830:	df000204 	addi	fp,sp,8
 1002834:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 1002838:	e0bfff17 	ldw	r2,-4(fp)
 100283c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxStreamBuffer );

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 1002840:	e0bffe17 	ldw	r2,-8(fp)
 1002844:	10800703 	ldbu	r2,28(r2)
 1002848:	10803fcc 	andi	r2,r2,255
 100284c:	1080008c 	andi	r2,r2,2
 1002850:	1000031e 	bne	r2,zero,1002860 <vStreamBufferDelete+0x3c>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 1002854:	e13ffe17 	ldw	r4,-8(fp)
 1002858:	10011840 	call	1001184 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 100285c:	00000406 	br	1002870 <vStreamBufferDelete+0x4c>
	}
	else
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 1002860:	01800804 	movi	r6,32
 1002864:	000b883a 	mov	r5,zero
 1002868:	e13ffe17 	ldw	r4,-8(fp)
 100286c:	1005bc00 	call	1005bc0 <memset>
	}
}
 1002870:	0001883a 	nop
 1002874:	e037883a 	mov	sp,fp
 1002878:	dfc00117 	ldw	ra,4(sp)
 100287c:	df000017 	ldw	fp,0(sp)
 1002880:	dec00204 	addi	sp,sp,8
 1002884:	f800283a 	ret

01002888 <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 1002888:	defffa04 	addi	sp,sp,-24
 100288c:	dfc00515 	stw	ra,20(sp)
 1002890:	df000415 	stw	fp,16(sp)
 1002894:	df000404 	addi	fp,sp,16
 1002898:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 100289c:	e0bfff17 	ldw	r2,-4(fp)
 10028a0:	e0bffe15 	stw	r2,-8(fp)
BaseType_t xReturn = pdFAIL;
 10028a4:	e03ffd15 	stw	zero,-12(fp)
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 10028a8:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 10028ac:	e0bffe17 	ldw	r2,-8(fp)
 10028b0:	10800417 	ldw	r2,16(r2)
 10028b4:	1000141e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 10028b8:	e0bffe17 	ldw	r2,-8(fp)
 10028bc:	10800517 	ldw	r2,20(r2)
 10028c0:	1000111e 	bne	r2,zero,1002908 <xStreamBufferReset+0x80>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028c4:	e0bffe17 	ldw	r2,-8(fp)
 10028c8:	10c00617 	ldw	r3,24(r2)
 10028cc:	e0bffe17 	ldw	r2,-8(fp)
 10028d0:	11000217 	ldw	r4,8(r2)
 10028d4:	e0bffe17 	ldw	r2,-8(fp)
 10028d8:	11400317 	ldw	r5,12(r2)
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
 10028dc:	e0bffe17 	ldw	r2,-8(fp)
 10028e0:	10800703 	ldbu	r2,28(r2)
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 10028e4:	10803fcc 	andi	r2,r2,255
 10028e8:	d8800015 	stw	r2,0(sp)
 10028ec:	280f883a 	mov	r7,r5
 10028f0:	200d883a 	mov	r6,r4
 10028f4:	180b883a 	mov	r5,r3
 10028f8:	e13ffe17 	ldw	r4,-8(fp)
 10028fc:	100359c0 	call	100359c <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 1002900:	00800044 	movi	r2,1
 1002904:	e0bffd15 	stw	r2,-12(fp)

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 1002908:	10051b40 	call	10051b4 <vTaskExitCritical>

	return xReturn;
 100290c:	e0bffd17 	ldw	r2,-12(fp)
}
 1002910:	e037883a 	mov	sp,fp
 1002914:	dfc00117 	ldw	ra,4(sp)
 1002918:	df000017 	ldw	fp,0(sp)
 100291c:	dec00204 	addi	sp,sp,8
 1002920:	f800283a 	ret

01002924 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 1002924:	defffb04 	addi	sp,sp,-20
 1002928:	df000415 	stw	fp,16(sp)
 100292c:	df000404 	addi	fp,sp,16
 1002930:	e13ffe15 	stw	r4,-8(fp)
 1002934:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002938:	e0bffe17 	ldw	r2,-8(fp)
 100293c:	e0bffd15 	stw	r2,-12(fp)
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 1002940:	e0bfff17 	ldw	r2,-4(fp)
 1002944:	1000021e 	bne	r2,zero,1002950 <xStreamBufferSetTriggerLevel+0x2c>
	{
		xTriggerLevel = ( size_t ) 1;
 1002948:	00800044 	movi	r2,1
 100294c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 1002950:	e0bffd17 	ldw	r2,-12(fp)
 1002954:	10c00217 	ldw	r3,8(r2)
 1002958:	e0bfff17 	ldw	r2,-4(fp)
 100295c:	18800636 	bltu	r3,r2,1002978 <xStreamBufferSetTriggerLevel+0x54>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 1002960:	e0bffd17 	ldw	r2,-12(fp)
 1002964:	e0ffff17 	ldw	r3,-4(fp)
 1002968:	10c00315 	stw	r3,12(r2)
		xReturn = pdPASS;
 100296c:	00800044 	movi	r2,1
 1002970:	e0bffc15 	stw	r2,-16(fp)
 1002974:	00000106 	br	100297c <xStreamBufferSetTriggerLevel+0x58>
	}
	else
	{
		xReturn = pdFALSE;
 1002978:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 100297c:	e0bffc17 	ldw	r2,-16(fp)
}
 1002980:	e037883a 	mov	sp,fp
 1002984:	df000017 	ldw	fp,0(sp)
 1002988:	dec00104 	addi	sp,sp,4
 100298c:	f800283a 	ret

01002990 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002990:	defffc04 	addi	sp,sp,-16
 1002994:	df000315 	stw	fp,12(sp)
 1002998:	df000304 	addi	fp,sp,12
 100299c:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10029a0:	e0bfff17 	ldw	r2,-4(fp)
 10029a4:	e0bffe15 	stw	r2,-8(fp)
size_t xSpace;

	configASSERT( pxStreamBuffer );

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 10029a8:	e0bffe17 	ldw	r2,-8(fp)
 10029ac:	10c00217 	ldw	r3,8(r2)
 10029b0:	e0bffe17 	ldw	r2,-8(fp)
 10029b4:	10800017 	ldw	r2,0(r2)
 10029b8:	1885883a 	add	r2,r3,r2
 10029bc:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= pxStreamBuffer->xHead;
 10029c0:	e0bffe17 	ldw	r2,-8(fp)
 10029c4:	10800117 	ldw	r2,4(r2)
 10029c8:	e0fffd17 	ldw	r3,-12(fp)
 10029cc:	1885c83a 	sub	r2,r3,r2
 10029d0:	e0bffd15 	stw	r2,-12(fp)
	xSpace -= ( size_t ) 1;
 10029d4:	e0bffd17 	ldw	r2,-12(fp)
 10029d8:	10bfffc4 	addi	r2,r2,-1
 10029dc:	e0bffd15 	stw	r2,-12(fp)

	if( xSpace >= pxStreamBuffer->xLength )
 10029e0:	e0bffe17 	ldw	r2,-8(fp)
 10029e4:	10800217 	ldw	r2,8(r2)
 10029e8:	e0fffd17 	ldw	r3,-12(fp)
 10029ec:	18800536 	bltu	r3,r2,1002a04 <xStreamBufferSpacesAvailable+0x74>
	{
		xSpace -= pxStreamBuffer->xLength;
 10029f0:	e0bffe17 	ldw	r2,-8(fp)
 10029f4:	10800217 	ldw	r2,8(r2)
 10029f8:	e0fffd17 	ldw	r3,-12(fp)
 10029fc:	1885c83a 	sub	r2,r3,r2
 1002a00:	e0bffd15 	stw	r2,-12(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 1002a04:	e0bffd17 	ldw	r2,-12(fp)
}
 1002a08:	e037883a 	mov	sp,fp
 1002a0c:	df000017 	ldw	fp,0(sp)
 1002a10:	dec00104 	addi	sp,sp,4
 1002a14:	f800283a 	ret

01002a18 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 1002a18:	defffb04 	addi	sp,sp,-20
 1002a1c:	dfc00415 	stw	ra,16(sp)
 1002a20:	df000315 	stw	fp,12(sp)
 1002a24:	df000304 	addi	fp,sp,12
 1002a28:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a2c:	e0bfff17 	ldw	r2,-4(fp)
 1002a30:	e0bffd15 	stw	r2,-12(fp)
size_t xReturn;

	configASSERT( pxStreamBuffer );

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 1002a34:	e13ffd17 	ldw	r4,-12(fp)
 1002a38:	10035280 	call	1003528 <prvBytesInBuffer>
 1002a3c:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1002a40:	e0bffe17 	ldw	r2,-8(fp)
}
 1002a44:	e037883a 	mov	sp,fp
 1002a48:	dfc00117 	ldw	ra,4(sp)
 1002a4c:	df000017 	ldw	fp,0(sp)
 1002a50:	dec00204 	addi	sp,sp,8
 1002a54:	f800283a 	ret

01002a58 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 1002a58:	defff304 	addi	sp,sp,-52
 1002a5c:	dfc00c15 	stw	ra,48(sp)
 1002a60:	df000b15 	stw	fp,44(sp)
 1002a64:	df000b04 	addi	fp,sp,44
 1002a68:	e13ffc15 	stw	r4,-16(fp)
 1002a6c:	e17ffd15 	stw	r5,-12(fp)
 1002a70:	e1bffe15 	stw	r6,-8(fp)
 1002a74:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002a78:	e0bffc17 	ldw	r2,-16(fp)
 1002a7c:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace = 0;
 1002a80:	e03ff615 	stw	zero,-40(fp)
size_t xRequiredSpace = xDataLengthBytes;
 1002a84:	e0bffe17 	ldw	r2,-8(fp)
 1002a88:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002a8c:	e0bff817 	ldw	r2,-32(fp)
 1002a90:	10800703 	ldbu	r2,28(r2)
 1002a94:	10803fcc 	andi	r2,r2,255
 1002a98:	1080004c 	andi	r2,r2,1
 1002a9c:	10000326 	beq	r2,zero,1002aac <xStreamBufferSend+0x54>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002aa0:	e0bff717 	ldw	r2,-36(fp)
 1002aa4:	10800104 	addi	r2,r2,4
 1002aa8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002aac:	e0bfff17 	ldw	r2,-4(fp)
 1002ab0:	10002226 	beq	r2,zero,1002b3c <xStreamBufferSend+0xe4>
	{
		vTaskSetTimeOutState( &xTimeOut );
 1002ab4:	e0bffa04 	addi	r2,fp,-24
 1002ab8:	1009883a 	mov	r4,r2
 1002abc:	100497c0 	call	100497c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 1002ac0:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002ac4:	e13ff817 	ldw	r4,-32(fp)
 1002ac8:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002acc:	e0bff615 	stw	r2,-40(fp)

				if( xSpace < xRequiredSpace )
 1002ad0:	e0fff617 	ldw	r3,-40(fp)
 1002ad4:	e0bff717 	ldw	r2,-36(fp)
 1002ad8:	1880072e 	bgeu	r3,r2,1002af8 <xStreamBufferSend+0xa0>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 1002adc:	0009883a 	mov	r4,zero
 1002ae0:	10058e40 	call	10058e4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 1002ae4:	1004dbc0 	call	1004dbc <xTaskGetCurrentTaskHandle>
 1002ae8:	1007883a 	mov	r3,r2
 1002aec:	e0bff817 	ldw	r2,-32(fp)
 1002af0:	10c00515 	stw	r3,20(r2)
 1002af4:	00000206 	br	1002b00 <xStreamBufferSend+0xa8>
				}
				else
				{
					taskEXIT_CRITICAL();
 1002af8:	10051b40 	call	10051b4 <vTaskExitCritical>
					break;
 1002afc:	00000f06 	br	1002b3c <xStreamBufferSend+0xe4>
				}
			}
			taskEXIT_CRITICAL();
 1002b00:	10051b40 	call	10051b4 <vTaskExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002b04:	e0bfff17 	ldw	r2,-4(fp)
 1002b08:	100f883a 	mov	r7,r2
 1002b0c:	000d883a 	mov	r6,zero
 1002b10:	000b883a 	mov	r5,zero
 1002b14:	0009883a 	mov	r4,zero
 1002b18:	10053400 	call	1005340 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 1002b1c:	e0bff817 	ldw	r2,-32(fp)
 1002b20:	10000515 	stw	zero,20(r2)

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 1002b24:	e0ffff04 	addi	r3,fp,-4
 1002b28:	e0bffa04 	addi	r2,fp,-24
 1002b2c:	180b883a 	mov	r5,r3
 1002b30:	1009883a 	mov	r4,r2
 1002b34:	1004a040 	call	1004a04 <xTaskCheckForTimeOut>
 1002b38:	103fe126 	beq	r2,zero,1002ac0 <__alt_data_end+0xff002ac0>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 1002b3c:	e0bff617 	ldw	r2,-40(fp)
 1002b40:	1000031e 	bne	r2,zero,1002b50 <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002b44:	e13ff817 	ldw	r4,-32(fp)
 1002b48:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002b4c:	e0bff615 	stw	r2,-40(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002b50:	e0bff717 	ldw	r2,-36(fp)
 1002b54:	d8800015 	stw	r2,0(sp)
 1002b58:	e1fff617 	ldw	r7,-40(fp)
 1002b5c:	e1bffe17 	ldw	r6,-8(fp)
 1002b60:	e17ffd17 	ldw	r5,-12(fp)
 1002b64:	e13ff817 	ldw	r4,-32(fp)
 1002b68:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002b6c:	e0bff915 	stw	r2,-28(fp)

	if( xReturn > ( size_t ) 0 )
 1002b70:	e0bff917 	ldw	r2,-28(fp)
 1002b74:	10001426 	beq	r2,zero,1002bc8 <xStreamBufferSend+0x170>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002b78:	e13ff817 	ldw	r4,-32(fp)
 1002b7c:	10035280 	call	1003528 <prvBytesInBuffer>
 1002b80:	1007883a 	mov	r3,r2
 1002b84:	e0bff817 	ldw	r2,-32(fp)
 1002b88:	10800317 	ldw	r2,12(r2)
 1002b8c:	18800e36 	bltu	r3,r2,1002bc8 <xStreamBufferSend+0x170>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 1002b90:	100424c0 	call	100424c <vTaskSuspendAll>
 1002b94:	e0bff817 	ldw	r2,-32(fp)
 1002b98:	10800417 	ldw	r2,16(r2)
 1002b9c:	10000926 	beq	r2,zero,1002bc4 <xStreamBufferSend+0x16c>
 1002ba0:	e0bff817 	ldw	r2,-32(fp)
 1002ba4:	10800417 	ldw	r2,16(r2)
 1002ba8:	000f883a 	mov	r7,zero
 1002bac:	000d883a 	mov	r6,zero
 1002bb0:	000b883a 	mov	r5,zero
 1002bb4:	1009883a 	mov	r4,r2
 1002bb8:	10054340 	call	1005434 <xTaskGenericNotify>
 1002bbc:	e0bff817 	ldw	r2,-32(fp)
 1002bc0:	10000415 	stw	zero,16(r2)
 1002bc4:	10042780 	call	1004278 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 1002bc8:	e0bff917 	ldw	r2,-28(fp)
}
 1002bcc:	e037883a 	mov	sp,fp
 1002bd0:	dfc00117 	ldw	ra,4(sp)
 1002bd4:	df000017 	ldw	fp,0(sp)
 1002bd8:	dec00204 	addi	sp,sp,8
 1002bdc:	f800283a 	ret

01002be0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002be0:	defff404 	addi	sp,sp,-48
 1002be4:	dfc00b15 	stw	ra,44(sp)
 1002be8:	df000a15 	stw	fp,40(sp)
 1002bec:	df000a04 	addi	fp,sp,40
 1002bf0:	e13ffc15 	stw	r4,-16(fp)
 1002bf4:	e17ffd15 	stw	r5,-12(fp)
 1002bf8:	e1bffe15 	stw	r6,-8(fp)
 1002bfc:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002c00:	e0bffc17 	ldw	r2,-16(fp)
 1002c04:	e0bff815 	stw	r2,-32(fp)
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 1002c08:	e0bffe17 	ldw	r2,-8(fp)
 1002c0c:	e0bff715 	stw	r2,-36(fp)

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002c10:	e0bff817 	ldw	r2,-32(fp)
 1002c14:	10800703 	ldbu	r2,28(r2)
 1002c18:	10803fcc 	andi	r2,r2,255
 1002c1c:	1080004c 	andi	r2,r2,1
 1002c20:	10000326 	beq	r2,zero,1002c30 <xStreamBufferSendFromISR+0x50>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002c24:	e0bff717 	ldw	r2,-36(fp)
 1002c28:	10800104 	addi	r2,r2,4
 1002c2c:	e0bff715 	stw	r2,-36(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 1002c30:	e13ff817 	ldw	r4,-32(fp)
 1002c34:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 1002c38:	e0bff915 	stw	r2,-28(fp)
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 1002c3c:	e0bff717 	ldw	r2,-36(fp)
 1002c40:	d8800015 	stw	r2,0(sp)
 1002c44:	e1fff917 	ldw	r7,-28(fp)
 1002c48:	e1bffe17 	ldw	r6,-8(fp)
 1002c4c:	e17ffd17 	ldw	r5,-12(fp)
 1002c50:	e13ff817 	ldw	r4,-32(fp)
 1002c54:	1002cd00 	call	1002cd0 <prvWriteMessageToBuffer>
 1002c58:	e0bffa15 	stw	r2,-24(fp)

	if( xReturn > ( size_t ) 0 )
 1002c5c:	e0bffa17 	ldw	r2,-24(fp)
 1002c60:	10001526 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 1002c64:	e13ff817 	ldw	r4,-32(fp)
 1002c68:	10035280 	call	1003528 <prvBytesInBuffer>
 1002c6c:	1007883a 	mov	r3,r2
 1002c70:	e0bff817 	ldw	r2,-32(fp)
 1002c74:	10800317 	ldw	r2,12(r2)
 1002c78:	18800f36 	bltu	r3,r2,1002cb8 <xStreamBufferSendFromISR+0xd8>
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1002c7c:	e03ffb15 	stw	zero,-20(fp)
 1002c80:	e0bff817 	ldw	r2,-32(fp)
 1002c84:	10800417 	ldw	r2,16(r2)
 1002c88:	10000b26 	beq	r2,zero,1002cb8 <xStreamBufferSendFromISR+0xd8>
 1002c8c:	e0bff817 	ldw	r2,-32(fp)
 1002c90:	10c00417 	ldw	r3,16(r2)
 1002c94:	e0bfff17 	ldw	r2,-4(fp)
 1002c98:	d8800015 	stw	r2,0(sp)
 1002c9c:	000f883a 	mov	r7,zero
 1002ca0:	000d883a 	mov	r6,zero
 1002ca4:	000b883a 	mov	r5,zero
 1002ca8:	1809883a 	mov	r4,r3
 1002cac:	10055e00 	call	10055e0 <xTaskGenericNotifyFromISR>
 1002cb0:	e0bff817 	ldw	r2,-32(fp)
 1002cb4:	10000415 	stw	zero,16(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 1002cb8:	e0bffa17 	ldw	r2,-24(fp)
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	dfc00117 	ldw	ra,4(sp)
 1002cc4:	df000017 	ldw	fp,0(sp)
 1002cc8:	dec00204 	addi	sp,sp,8
 1002ccc:	f800283a 	ret

01002cd0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 1002cd0:	defff804 	addi	sp,sp,-32
 1002cd4:	dfc00715 	stw	ra,28(sp)
 1002cd8:	df000615 	stw	fp,24(sp)
 1002cdc:	df000604 	addi	fp,sp,24
 1002ce0:	e13ffc15 	stw	r4,-16(fp)
 1002ce4:	e17ffd15 	stw	r5,-12(fp)
 1002ce8:	e1bffe15 	stw	r6,-8(fp)
 1002cec:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 1002cf0:	e0bfff17 	ldw	r2,-4(fp)
 1002cf4:	1000021e 	bne	r2,zero,1002d00 <prvWriteMessageToBuffer+0x30>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 1002cf8:	e03ffa15 	stw	zero,-24(fp)
 1002cfc:	00001906 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 1002d00:	e0bffc17 	ldw	r2,-16(fp)
 1002d04:	10800703 	ldbu	r2,28(r2)
 1002d08:	10803fcc 	andi	r2,r2,255
 1002d0c:	1080004c 	andi	r2,r2,1
 1002d10:	1000081e 	bne	r2,zero,1002d34 <prvWriteMessageToBuffer+0x64>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 1002d14:	00800044 	movi	r2,1
 1002d18:	e0bffa15 	stw	r2,-24(fp)
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 1002d1c:	e0fffe17 	ldw	r3,-8(fp)
 1002d20:	e0bfff17 	ldw	r2,-4(fp)
 1002d24:	1880012e 	bgeu	r3,r2,1002d2c <prvWriteMessageToBuffer+0x5c>
 1002d28:	1805883a 	mov	r2,r3
 1002d2c:	e0bffe15 	stw	r2,-8(fp)
 1002d30:	00000c06 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else if( xSpace >= xRequiredSpace )
 1002d34:	e0ffff17 	ldw	r3,-4(fp)
 1002d38:	e0800217 	ldw	r2,8(fp)
 1002d3c:	18800836 	bltu	r3,r2,1002d60 <prvWriteMessageToBuffer+0x90>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 1002d40:	00800044 	movi	r2,1
 1002d44:	e0bffa15 	stw	r2,-24(fp)
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 1002d48:	e0bffe04 	addi	r2,fp,-8
 1002d4c:	01800104 	movi	r6,4
 1002d50:	100b883a 	mov	r5,r2
 1002d54:	e13ffc17 	ldw	r4,-16(fp)
 1002d58:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d5c:	00000106 	br	1002d64 <prvWriteMessageToBuffer+0x94>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 1002d60:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xShouldWrite != pdFALSE )
 1002d64:	e0bffa17 	ldw	r2,-24(fp)
 1002d68:	10000726 	beq	r2,zero,1002d88 <prvWriteMessageToBuffer+0xb8>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 1002d6c:	e0bffe17 	ldw	r2,-8(fp)
 1002d70:	100d883a 	mov	r6,r2
 1002d74:	e17ffd17 	ldw	r5,-12(fp)
 1002d78:	e13ffc17 	ldw	r4,-16(fp)
 1002d7c:	10033200 	call	1003320 <prvWriteBytesToBuffer>
 1002d80:	e0bffb15 	stw	r2,-20(fp)
 1002d84:	00000106 	br	1002d8c <prvWriteMessageToBuffer+0xbc>
	}
	else
	{
		xReturn = 0;
 1002d88:	e03ffb15 	stw	zero,-20(fp)
	}

	return xReturn;
 1002d8c:	e0bffb17 	ldw	r2,-20(fp)
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	dfc00117 	ldw	ra,4(sp)
 1002d98:	df000017 	ldw	fp,0(sp)
 1002d9c:	dec00204 	addi	sp,sp,8
 1002da0:	f800283a 	ret

01002da4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 1002da4:	defff504 	addi	sp,sp,-44
 1002da8:	dfc00a15 	stw	ra,40(sp)
 1002dac:	df000915 	stw	fp,36(sp)
 1002db0:	df000904 	addi	fp,sp,36
 1002db4:	e13ffc15 	stw	r4,-16(fp)
 1002db8:	e17ffd15 	stw	r5,-12(fp)
 1002dbc:	e1bffe15 	stw	r6,-8(fp)
 1002dc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002dc4:	e0bffc17 	ldw	r2,-16(fp)
 1002dc8:	e0bffb15 	stw	r2,-20(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002dcc:	e03ff815 	stw	zero,-32(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002dd0:	e0bffb17 	ldw	r2,-20(fp)
 1002dd4:	10800703 	ldbu	r2,28(r2)
 1002dd8:	10803fcc 	andi	r2,r2,255
 1002ddc:	1080004c 	andi	r2,r2,1
 1002de0:	10000326 	beq	r2,zero,1002df0 <xStreamBufferReceive+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002de4:	00800104 	movi	r2,4
 1002de8:	e0bffa15 	stw	r2,-24(fp)
 1002dec:	00000106 	br	1002df4 <xStreamBufferReceive+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002df0:	e03ffa15 	stw	zero,-24(fp)
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 1002df4:	e0bfff17 	ldw	r2,-4(fp)
 1002df8:	10001c26 	beq	r2,zero,1002e6c <xStreamBufferReceive+0xc8>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 1002dfc:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e00:	e13ffb17 	ldw	r4,-20(fp)
 1002e04:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e08:	e0bff915 	stw	r2,-28(fp)
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e0c:	e0bff917 	ldw	r2,-28(fp)
 1002e10:	e0fffa17 	ldw	r3,-24(fp)
 1002e14:	18800636 	bltu	r3,r2,1002e30 <xStreamBufferReceive+0x8c>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 1002e18:	0009883a 	mov	r4,zero
 1002e1c:	10058e40 	call	10058e4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 1002e20:	1004dbc0 	call	1004dbc <xTaskGetCurrentTaskHandle>
 1002e24:	1007883a 	mov	r3,r2
 1002e28:	e0bffb17 	ldw	r2,-20(fp)
 1002e2c:	10c00415 	stw	r3,16(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1002e30:	10051b40 	call	10051b4 <vTaskExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 1002e34:	e0bff917 	ldw	r2,-28(fp)
 1002e38:	e0fffa17 	ldw	r3,-24(fp)
 1002e3c:	18800e36 	bltu	r3,r2,1002e78 <xStreamBufferReceive+0xd4>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 1002e40:	e1ffff17 	ldw	r7,-4(fp)
 1002e44:	000d883a 	mov	r6,zero
 1002e48:	000b883a 	mov	r5,zero
 1002e4c:	0009883a 	mov	r4,zero
 1002e50:	10053400 	call	1005340 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 1002e54:	e0bffb17 	ldw	r2,-20(fp)
 1002e58:	10000415 	stw	zero,16(r2)

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e5c:	e13ffb17 	ldw	r4,-20(fp)
 1002e60:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e64:	e0bff915 	stw	r2,-28(fp)
 1002e68:	00000306 	br	1002e78 <xStreamBufferReceive+0xd4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002e6c:	e13ffb17 	ldw	r4,-20(fp)
 1002e70:	10035280 	call	1003528 <prvBytesInBuffer>
 1002e74:	e0bff915 	stw	r2,-28(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1002e78:	e0bff917 	ldw	r2,-28(fp)
 1002e7c:	e0fffa17 	ldw	r3,-24(fp)
 1002e80:	1880182e 	bgeu	r3,r2,1002ee4 <xStreamBufferReceive+0x140>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 1002e84:	e0bffa17 	ldw	r2,-24(fp)
 1002e88:	d8800015 	stw	r2,0(sp)
 1002e8c:	e1fff917 	ldw	r7,-28(fp)
 1002e90:	e1bffe17 	ldw	r6,-8(fp)
 1002e94:	e17ffd17 	ldw	r5,-12(fp)
 1002e98:	e13ffb17 	ldw	r4,-20(fp)
 1002e9c:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1002ea0:	e0bff815 	stw	r2,-32(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 1002ea4:	e0bff817 	ldw	r2,-32(fp)
 1002ea8:	10000e26 	beq	r2,zero,1002ee4 <xStreamBufferReceive+0x140>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 1002eac:	100424c0 	call	100424c <vTaskSuspendAll>
 1002eb0:	e0bffb17 	ldw	r2,-20(fp)
 1002eb4:	10800517 	ldw	r2,20(r2)
 1002eb8:	10000926 	beq	r2,zero,1002ee0 <xStreamBufferReceive+0x13c>
 1002ebc:	e0bffb17 	ldw	r2,-20(fp)
 1002ec0:	10800517 	ldw	r2,20(r2)
 1002ec4:	000f883a 	mov	r7,zero
 1002ec8:	000d883a 	mov	r6,zero
 1002ecc:	000b883a 	mov	r5,zero
 1002ed0:	1009883a 	mov	r4,r2
 1002ed4:	10054340 	call	1005434 <xTaskGenericNotify>
 1002ed8:	e0bffb17 	ldw	r2,-20(fp)
 1002edc:	10000515 	stw	zero,20(r2)
 1002ee0:	10042780 	call	1004278 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 1002ee4:	e0bff817 	ldw	r2,-32(fp)
}
 1002ee8:	e037883a 	mov	sp,fp
 1002eec:	dfc00117 	ldw	ra,4(sp)
 1002ef0:	df000017 	ldw	fp,0(sp)
 1002ef4:	dec00204 	addi	sp,sp,8
 1002ef8:	f800283a 	ret

01002efc <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 1002efc:	defff804 	addi	sp,sp,-32
 1002f00:	dfc00715 	stw	ra,28(sp)
 1002f04:	df000615 	stw	fp,24(sp)
 1002f08:	df000604 	addi	fp,sp,24
 1002f0c:	e13fff15 	stw	r4,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002f10:	e0bfff17 	ldw	r2,-4(fp)
 1002f14:	e0bffb15 	stw	r2,-20(fp)
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002f18:	e0bffb17 	ldw	r2,-20(fp)
 1002f1c:	10800703 	ldbu	r2,28(r2)
 1002f20:	10803fcc 	andi	r2,r2,255
 1002f24:	1080004c 	andi	r2,r2,1
 1002f28:	10001726 	beq	r2,zero,1002f88 <xStreamBufferNextMessageLengthBytes+0x8c>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002f2c:	e13ffb17 	ldw	r4,-20(fp)
 1002f30:	10035280 	call	1003528 <prvBytesInBuffer>
 1002f34:	e0bffc15 	stw	r2,-16(fp)
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 1002f38:	e0bffc17 	ldw	r2,-16(fp)
 1002f3c:	10800170 	cmpltui	r2,r2,5
 1002f40:	10000f1e 	bne	r2,zero,1002f80 <xStreamBufferNextMessageLengthBytes+0x84>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 1002f44:	e0bffb17 	ldw	r2,-20(fp)
 1002f48:	10800017 	ldw	r2,0(r2)
 1002f4c:	e0bffd15 	stw	r2,-12(fp)
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 1002f50:	e0bffe04 	addi	r2,fp,-8
 1002f54:	e1fffc17 	ldw	r7,-16(fp)
 1002f58:	01800104 	movi	r6,4
 1002f5c:	100b883a 	mov	r5,r2
 1002f60:	e13ffb17 	ldw	r4,-20(fp)
 1002f64:	10034140 	call	1003414 <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 1002f68:	e0bffe17 	ldw	r2,-8(fp)
 1002f6c:	e0bffa15 	stw	r2,-24(fp)
			pxStreamBuffer->xTail = xOriginalTail;
 1002f70:	e0bffb17 	ldw	r2,-20(fp)
 1002f74:	e0fffd17 	ldw	r3,-12(fp)
 1002f78:	10c00015 	stw	r3,0(r2)
 1002f7c:	00000306 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
			xReturn = 0;
 1002f80:	e03ffa15 	stw	zero,-24(fp)
 1002f84:	00000106 	br	1002f8c <xStreamBufferNextMessageLengthBytes+0x90>
		}
	}
	else
	{
		xReturn = 0;
 1002f88:	e03ffa15 	stw	zero,-24(fp)
	}

	return xReturn;
 1002f8c:	e0bffa17 	ldw	r2,-24(fp)
}
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 1002fa4:	defff404 	addi	sp,sp,-48
 1002fa8:	dfc00b15 	stw	ra,44(sp)
 1002fac:	df000a15 	stw	fp,40(sp)
 1002fb0:	df000a04 	addi	fp,sp,40
 1002fb4:	e13ffc15 	stw	r4,-16(fp)
 1002fb8:	e17ffd15 	stw	r5,-12(fp)
 1002fbc:	e1bffe15 	stw	r6,-8(fp)
 1002fc0:	e1ffff15 	stw	r7,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1002fc4:	e0bffc17 	ldw	r2,-16(fp)
 1002fc8:	e0bff915 	stw	r2,-28(fp)
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 1002fcc:	e03ff715 	stw	zero,-36(fp)
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 1002fd0:	e0bff917 	ldw	r2,-28(fp)
 1002fd4:	10800703 	ldbu	r2,28(r2)
 1002fd8:	10803fcc 	andi	r2,r2,255
 1002fdc:	1080004c 	andi	r2,r2,1
 1002fe0:	10000326 	beq	r2,zero,1002ff0 <xStreamBufferReceiveFromISR+0x4c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 1002fe4:	00800104 	movi	r2,4
 1002fe8:	e0bff815 	stw	r2,-32(fp)
 1002fec:	00000106 	br	1002ff4 <xStreamBufferReceiveFromISR+0x50>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 1002ff0:	e03ff815 	stw	zero,-32(fp)
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 1002ff4:	e13ff917 	ldw	r4,-28(fp)
 1002ff8:	10035280 	call	1003528 <prvBytesInBuffer>
 1002ffc:	e0bffa15 	stw	r2,-24(fp)
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 1003000:	e0bffa17 	ldw	r2,-24(fp)
 1003004:	e0fff817 	ldw	r3,-32(fp)
 1003008:	1880192e 	bgeu	r3,r2,1003070 <xStreamBufferReceiveFromISR+0xcc>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 100300c:	e0bff817 	ldw	r2,-32(fp)
 1003010:	d8800015 	stw	r2,0(sp)
 1003014:	e1fffa17 	ldw	r7,-24(fp)
 1003018:	e1bffe17 	ldw	r6,-8(fp)
 100301c:	e17ffd17 	ldw	r5,-12(fp)
 1003020:	e13ff917 	ldw	r4,-28(fp)
 1003024:	10030880 	call	1003088 <prvReadMessageFromBuffer>
 1003028:	e0bff715 	stw	r2,-36(fp)

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 100302c:	e0bff717 	ldw	r2,-36(fp)
 1003030:	10000f26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 1003034:	e03ffb15 	stw	zero,-20(fp)
 1003038:	e0bff917 	ldw	r2,-28(fp)
 100303c:	10800517 	ldw	r2,20(r2)
 1003040:	10000b26 	beq	r2,zero,1003070 <xStreamBufferReceiveFromISR+0xcc>
 1003044:	e0bff917 	ldw	r2,-28(fp)
 1003048:	10c00517 	ldw	r3,20(r2)
 100304c:	e0bfff17 	ldw	r2,-4(fp)
 1003050:	d8800015 	stw	r2,0(sp)
 1003054:	000f883a 	mov	r7,zero
 1003058:	000d883a 	mov	r6,zero
 100305c:	000b883a 	mov	r5,zero
 1003060:	1809883a 	mov	r4,r3
 1003064:	10055e00 	call	10055e0 <xTaskGenericNotifyFromISR>
 1003068:	e0bff917 	ldw	r2,-28(fp)
 100306c:	10000515 	stw	zero,20(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 1003070:	e0bff717 	ldw	r2,-36(fp)
}
 1003074:	e037883a 	mov	sp,fp
 1003078:	dfc00117 	ldw	ra,4(sp)
 100307c:	df000017 	ldw	fp,0(sp)
 1003080:	dec00204 	addi	sp,sp,8
 1003084:	f800283a 	ret

01003088 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 1003088:	defff604 	addi	sp,sp,-40
 100308c:	dfc00915 	stw	ra,36(sp)
 1003090:	df000815 	stw	fp,32(sp)
 1003094:	df000804 	addi	fp,sp,32
 1003098:	e13ffc15 	stw	r4,-16(fp)
 100309c:	e17ffd15 	stw	r5,-12(fp)
 10030a0:	e1bffe15 	stw	r6,-8(fp)
 10030a4:	e1ffff15 	stw	r7,-4(fp)
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 10030a8:	e0800217 	ldw	r2,8(fp)
 10030ac:	10001726 	beq	r2,zero,100310c <prvReadMessageFromBuffer+0x84>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 10030b0:	e0bffc17 	ldw	r2,-16(fp)
 10030b4:	10800017 	ldw	r2,0(r2)
 10030b8:	e0bff915 	stw	r2,-28(fp)
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 10030bc:	e0bffb04 	addi	r2,fp,-20
 10030c0:	e1ffff17 	ldw	r7,-4(fp)
 10030c4:	e1800217 	ldw	r6,8(fp)
 10030c8:	100b883a 	mov	r5,r2
 10030cc:	e13ffc17 	ldw	r4,-16(fp)
 10030d0:	10034140 	call	1003414 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 10030d4:	e0bffb17 	ldw	r2,-20(fp)
 10030d8:	e0bff815 	stw	r2,-32(fp)

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 10030dc:	e0ffff17 	ldw	r3,-4(fp)
 10030e0:	e0800217 	ldw	r2,8(fp)
 10030e4:	1885c83a 	sub	r2,r3,r2
 10030e8:	e0bfff15 	stw	r2,-4(fp)

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 10030ec:	e0bff817 	ldw	r2,-32(fp)
 10030f0:	e0fffe17 	ldw	r3,-8(fp)
 10030f4:	1880072e 	bgeu	r3,r2,1003114 <prvReadMessageFromBuffer+0x8c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 10030f8:	e0bffc17 	ldw	r2,-16(fp)
 10030fc:	e0fff917 	ldw	r3,-28(fp)
 1003100:	10c00015 	stw	r3,0(r2)
			xNextMessageLength = 0;
 1003104:	e03ff815 	stw	zero,-32(fp)
 1003108:	00000206 	br	1003114 <prvReadMessageFromBuffer+0x8c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 100310c:	e0bffe17 	ldw	r2,-8(fp)
 1003110:	e0bff815 	stw	r2,-32(fp)
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 1003114:	e1ffff17 	ldw	r7,-4(fp)
 1003118:	e1bff817 	ldw	r6,-32(fp)
 100311c:	e17ffd17 	ldw	r5,-12(fp)
 1003120:	e13ffc17 	ldw	r4,-16(fp)
 1003124:	10034140 	call	1003414 <prvReadBytesFromBuffer>
 1003128:	e0bffa15 	stw	r2,-24(fp)

	return xReceivedLength;
 100312c:	e0bffa17 	ldw	r2,-24(fp)
}
 1003130:	e037883a 	mov	sp,fp
 1003134:	dfc00117 	ldw	ra,4(sp)
 1003138:	df000017 	ldw	fp,0(sp)
 100313c:	dec00204 	addi	sp,sp,8
 1003140:	f800283a 	ret

01003144 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 1003144:	defffb04 	addi	sp,sp,-20
 1003148:	df000415 	stw	fp,16(sp)
 100314c:	df000404 	addi	fp,sp,16
 1003150:	e13fff15 	stw	r4,-4(fp)
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003154:	e0bfff17 	ldw	r2,-4(fp)
 1003158:	e0bffd15 	stw	r2,-12(fp)
size_t xTail;

	configASSERT( pxStreamBuffer );

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 100315c:	e0bffd17 	ldw	r2,-12(fp)
 1003160:	10800017 	ldw	r2,0(r2)
 1003164:	e0bffe15 	stw	r2,-8(fp)
	if( pxStreamBuffer->xHead == xTail )
 1003168:	e0bffd17 	ldw	r2,-12(fp)
 100316c:	10c00117 	ldw	r3,4(r2)
 1003170:	e0bffe17 	ldw	r2,-8(fp)
 1003174:	1880031e 	bne	r3,r2,1003184 <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 1003178:	00800044 	movi	r2,1
 100317c:	e0bffc15 	stw	r2,-16(fp)
 1003180:	00000106 	br	1003188 <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 1003184:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003188:	e0bffc17 	ldw	r2,-16(fp)
}
 100318c:	e037883a 	mov	sp,fp
 1003190:	df000017 	ldw	fp,0(sp)
 1003194:	dec00104 	addi	sp,sp,4
 1003198:	f800283a 	ret

0100319c <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 100319c:	defffa04 	addi	sp,sp,-24
 10031a0:	dfc00515 	stw	ra,20(sp)
 10031a4:	df000415 	stw	fp,16(sp)
 10031a8:	df000404 	addi	fp,sp,16
 10031ac:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10031b0:	e0bfff17 	ldw	r2,-4(fp)
 10031b4:	e0bffe15 	stw	r2,-8(fp)

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 10031b8:	e0bffe17 	ldw	r2,-8(fp)
 10031bc:	10800703 	ldbu	r2,28(r2)
 10031c0:	10803fcc 	andi	r2,r2,255
 10031c4:	1080004c 	andi	r2,r2,1
 10031c8:	10000326 	beq	r2,zero,10031d8 <xStreamBufferIsFull+0x3c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 10031cc:	00800104 	movi	r2,4
 10031d0:	e0bffd15 	stw	r2,-12(fp)
 10031d4:	00000106 	br	10031dc <xStreamBufferIsFull+0x40>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 10031d8:	e03ffd15 	stw	zero,-12(fp)
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 10031dc:	e13fff17 	ldw	r4,-4(fp)
 10031e0:	10029900 	call	1002990 <xStreamBufferSpacesAvailable>
 10031e4:	1007883a 	mov	r3,r2
 10031e8:	e0bffd17 	ldw	r2,-12(fp)
 10031ec:	10c00336 	bltu	r2,r3,10031fc <xStreamBufferIsFull+0x60>
	{
		xReturn = pdTRUE;
 10031f0:	00800044 	movi	r2,1
 10031f4:	e0bffc15 	stw	r2,-16(fp)
 10031f8:	00000106 	br	1003200 <xStreamBufferIsFull+0x64>
	}
	else
	{
		xReturn = pdFALSE;
 10031fc:	e03ffc15 	stw	zero,-16(fp)
	}

	return xReturn;
 1003200:	e0bffc17 	ldw	r2,-16(fp)
}
 1003204:	e037883a 	mov	sp,fp
 1003208:	dfc00117 	ldw	ra,4(sp)
 100320c:	df000017 	ldw	fp,0(sp)
 1003210:	dec00204 	addi	sp,sp,8
 1003214:	f800283a 	ret

01003218 <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 1003218:	defff804 	addi	sp,sp,-32
 100321c:	dfc00715 	stw	ra,28(sp)
 1003220:	df000615 	stw	fp,24(sp)
 1003224:	df000604 	addi	fp,sp,24
 1003228:	e13ffe15 	stw	r4,-8(fp)
 100322c:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 1003230:	e0bffe17 	ldw	r2,-8(fp)
 1003234:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 1003238:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 100323c:	e0bffc17 	ldw	r2,-16(fp)
 1003240:	10800417 	ldw	r2,16(r2)
 1003244:	10000e26 	beq	r2,zero,1003280 <xStreamBufferSendCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 1003248:	e0bffc17 	ldw	r2,-16(fp)
 100324c:	10c00417 	ldw	r3,16(r2)
 1003250:	e0bfff17 	ldw	r2,-4(fp)
 1003254:	d8800015 	stw	r2,0(sp)
 1003258:	000f883a 	mov	r7,zero
 100325c:	000d883a 	mov	r6,zero
 1003260:	000b883a 	mov	r5,zero
 1003264:	1809883a 	mov	r4,r3
 1003268:	10055e00 	call	10055e0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 100326c:	e0bffc17 	ldw	r2,-16(fp)
 1003270:	10000415 	stw	zero,16(r2)
			xReturn = pdTRUE;
 1003274:	00800044 	movi	r2,1
 1003278:	e0bffb15 	stw	r2,-20(fp)
 100327c:	00000106 	br	1003284 <xStreamBufferSendCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003280:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003284:	e0bffb17 	ldw	r2,-20(fp)
}
 1003288:	e037883a 	mov	sp,fp
 100328c:	dfc00117 	ldw	ra,4(sp)
 1003290:	df000017 	ldw	fp,0(sp)
 1003294:	dec00204 	addi	sp,sp,8
 1003298:	f800283a 	ret

0100329c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 100329c:	defff804 	addi	sp,sp,-32
 10032a0:	dfc00715 	stw	ra,28(sp)
 10032a4:	df000615 	stw	fp,24(sp)
 10032a8:	df000604 	addi	fp,sp,24
 10032ac:	e13ffe15 	stw	r4,-8(fp)
 10032b0:	e17fff15 	stw	r5,-4(fp)
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 10032b4:	e0bffe17 	ldw	r2,-8(fp)
 10032b8:	e0bffc15 	stw	r2,-16(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 10032bc:	e03ffd15 	stw	zero,-12(fp)
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 10032c0:	e0bffc17 	ldw	r2,-16(fp)
 10032c4:	10800517 	ldw	r2,20(r2)
 10032c8:	10000e26 	beq	r2,zero,1003304 <xStreamBufferReceiveCompletedFromISR+0x68>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 10032cc:	e0bffc17 	ldw	r2,-16(fp)
 10032d0:	10c00517 	ldw	r3,20(r2)
 10032d4:	e0bfff17 	ldw	r2,-4(fp)
 10032d8:	d8800015 	stw	r2,0(sp)
 10032dc:	000f883a 	mov	r7,zero
 10032e0:	000d883a 	mov	r6,zero
 10032e4:	000b883a 	mov	r5,zero
 10032e8:	1809883a 	mov	r4,r3
 10032ec:	10055e00 	call	10055e0 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 10032f0:	e0bffc17 	ldw	r2,-16(fp)
 10032f4:	10000515 	stw	zero,20(r2)
			xReturn = pdTRUE;
 10032f8:	00800044 	movi	r2,1
 10032fc:	e0bffb15 	stw	r2,-20(fp)
 1003300:	00000106 	br	1003308 <xStreamBufferReceiveCompletedFromISR+0x6c>
		}
		else
		{
			xReturn = pdFALSE;
 1003304:	e03ffb15 	stw	zero,-20(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1003308:	e0bffb17 	ldw	r2,-20(fp)
}
 100330c:	e037883a 	mov	sp,fp
 1003310:	dfc00117 	ldw	ra,4(sp)
 1003314:	df000017 	ldw	fp,0(sp)
 1003318:	dec00204 	addi	sp,sp,8
 100331c:	f800283a 	ret

01003320 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 1003320:	defff904 	addi	sp,sp,-28
 1003324:	dfc00615 	stw	ra,24(sp)
 1003328:	df000515 	stw	fp,20(sp)
 100332c:	df000504 	addi	fp,sp,20
 1003330:	e13ffd15 	stw	r4,-12(fp)
 1003334:	e17ffe15 	stw	r5,-8(fp)
 1003338:	e1bfff15 	stw	r6,-4(fp)
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );

	xNextHead = pxStreamBuffer->xHead;
 100333c:	e0bffd17 	ldw	r2,-12(fp)
 1003340:	10800117 	ldw	r2,4(r2)
 1003344:	e0bffb15 	stw	r2,-20(fp)

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 1003348:	e0bffd17 	ldw	r2,-12(fp)
 100334c:	10c00217 	ldw	r3,8(r2)
 1003350:	e0bffb17 	ldw	r2,-20(fp)
 1003354:	1885c83a 	sub	r2,r3,r2
 1003358:	e0ffff17 	ldw	r3,-4(fp)
 100335c:	1880012e 	bgeu	r3,r2,1003364 <prvWriteBytesToBuffer+0x44>
 1003360:	1805883a 	mov	r2,r3
 1003364:	e0bffc15 	stw	r2,-16(fp)

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003368:	e0bffd17 	ldw	r2,-12(fp)
 100336c:	10c00617 	ldw	r3,24(r2)
 1003370:	e0bffb17 	ldw	r2,-20(fp)
 1003374:	1885883a 	add	r2,r3,r2
 1003378:	e1bffc17 	ldw	r6,-16(fp)
 100337c:	e17ffe17 	ldw	r5,-8(fp)
 1003380:	1009883a 	mov	r4,r2
 1003384:	1005a780 	call	1005a78 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 1003388:	e0bfff17 	ldw	r2,-4(fp)
 100338c:	e0fffc17 	ldw	r3,-16(fp)
 1003390:	18800a2e 	bgeu	r3,r2,10033bc <prvWriteBytesToBuffer+0x9c>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 1003394:	e0bffd17 	ldw	r2,-12(fp)
 1003398:	11000617 	ldw	r4,24(r2)
 100339c:	e0fffe17 	ldw	r3,-8(fp)
 10033a0:	e0bffc17 	ldw	r2,-16(fp)
 10033a4:	188b883a 	add	r5,r3,r2
 10033a8:	e0ffff17 	ldw	r3,-4(fp)
 10033ac:	e0bffc17 	ldw	r2,-16(fp)
 10033b0:	1885c83a 	sub	r2,r3,r2
 10033b4:	100d883a 	mov	r6,r2
 10033b8:	1005a780 	call	1005a78 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 10033bc:	e0fffb17 	ldw	r3,-20(fp)
 10033c0:	e0bfff17 	ldw	r2,-4(fp)
 10033c4:	1885883a 	add	r2,r3,r2
 10033c8:	e0bffb15 	stw	r2,-20(fp)
	if( xNextHead >= pxStreamBuffer->xLength )
 10033cc:	e0bffd17 	ldw	r2,-12(fp)
 10033d0:	10800217 	ldw	r2,8(r2)
 10033d4:	e0fffb17 	ldw	r3,-20(fp)
 10033d8:	18800536 	bltu	r3,r2,10033f0 <prvWriteBytesToBuffer+0xd0>
	{
		xNextHead -= pxStreamBuffer->xLength;
 10033dc:	e0bffd17 	ldw	r2,-12(fp)
 10033e0:	10800217 	ldw	r2,8(r2)
 10033e4:	e0fffb17 	ldw	r3,-20(fp)
 10033e8:	1885c83a 	sub	r2,r3,r2
 10033ec:	e0bffb15 	stw	r2,-20(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 10033f0:	e0bffd17 	ldw	r2,-12(fp)
 10033f4:	e0fffb17 	ldw	r3,-20(fp)
 10033f8:	10c00115 	stw	r3,4(r2)

	return xCount;
 10033fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003400:	e037883a 	mov	sp,fp
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	df000017 	ldw	fp,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 1003414:	defff704 	addi	sp,sp,-36
 1003418:	dfc00815 	stw	ra,32(sp)
 100341c:	df000715 	stw	fp,28(sp)
 1003420:	df000704 	addi	fp,sp,28
 1003424:	e13ffc15 	stw	r4,-16(fp)
 1003428:	e17ffd15 	stw	r5,-12(fp)
 100342c:	e1bffe15 	stw	r6,-8(fp)
 1003430:	e1ffff15 	stw	r7,-4(fp)
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 1003434:	e0ffff17 	ldw	r3,-4(fp)
 1003438:	e0bffe17 	ldw	r2,-8(fp)
 100343c:	1880012e 	bgeu	r3,r2,1003444 <prvReadBytesFromBuffer+0x30>
 1003440:	1805883a 	mov	r2,r3
 1003444:	e0bffa15 	stw	r2,-24(fp)

	if( xCount > ( size_t ) 0 )
 1003448:	e0bffa17 	ldw	r2,-24(fp)
 100344c:	10003026 	beq	r2,zero,1003510 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 1003450:	e0bffc17 	ldw	r2,-16(fp)
 1003454:	10800017 	ldw	r2,0(r2)
 1003458:	e0bff915 	stw	r2,-28(fp)

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 100345c:	e0bffc17 	ldw	r2,-16(fp)
 1003460:	10c00217 	ldw	r3,8(r2)
 1003464:	e0bff917 	ldw	r2,-28(fp)
 1003468:	1885c83a 	sub	r2,r3,r2
 100346c:	e0fffa17 	ldw	r3,-24(fp)
 1003470:	1880012e 	bgeu	r3,r2,1003478 <prvReadBytesFromBuffer+0x64>
 1003474:	1805883a 	mov	r2,r3
 1003478:	e0bffb15 	stw	r2,-20(fp)

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 100347c:	e0bffc17 	ldw	r2,-16(fp)
 1003480:	10c00617 	ldw	r3,24(r2)
 1003484:	e0bff917 	ldw	r2,-28(fp)
 1003488:	1885883a 	add	r2,r3,r2
 100348c:	e1bffb17 	ldw	r6,-20(fp)
 1003490:	100b883a 	mov	r5,r2
 1003494:	e13ffd17 	ldw	r4,-12(fp)
 1003498:	1005a780 	call	1005a78 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 100349c:	e0bffa17 	ldw	r2,-24(fp)
 10034a0:	e0fffb17 	ldw	r3,-20(fp)
 10034a4:	18800a2e 	bgeu	r3,r2,10034d0 <prvReadBytesFromBuffer+0xbc>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 10034a8:	e0fffd17 	ldw	r3,-12(fp)
 10034ac:	e0bffb17 	ldw	r2,-20(fp)
 10034b0:	1889883a 	add	r4,r3,r2
 10034b4:	e0bffc17 	ldw	r2,-16(fp)
 10034b8:	11400617 	ldw	r5,24(r2)
 10034bc:	e0fffa17 	ldw	r3,-24(fp)
 10034c0:	e0bffb17 	ldw	r2,-20(fp)
 10034c4:	1885c83a 	sub	r2,r3,r2
 10034c8:	100d883a 	mov	r6,r2
 10034cc:	1005a780 	call	1005a78 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 10034d0:	e0fff917 	ldw	r3,-28(fp)
 10034d4:	e0bffa17 	ldw	r2,-24(fp)
 10034d8:	1885883a 	add	r2,r3,r2
 10034dc:	e0bff915 	stw	r2,-28(fp)

		if( xNextTail >= pxStreamBuffer->xLength )
 10034e0:	e0bffc17 	ldw	r2,-16(fp)
 10034e4:	10800217 	ldw	r2,8(r2)
 10034e8:	e0fff917 	ldw	r3,-28(fp)
 10034ec:	18800536 	bltu	r3,r2,1003504 <prvReadBytesFromBuffer+0xf0>
		{
			xNextTail -= pxStreamBuffer->xLength;
 10034f0:	e0bffc17 	ldw	r2,-16(fp)
 10034f4:	10800217 	ldw	r2,8(r2)
 10034f8:	e0fff917 	ldw	r3,-28(fp)
 10034fc:	1885c83a 	sub	r2,r3,r2
 1003500:	e0bff915 	stw	r2,-28(fp)
		}

		pxStreamBuffer->xTail = xNextTail;
 1003504:	e0bffc17 	ldw	r2,-16(fp)
 1003508:	e0fff917 	ldw	r3,-28(fp)
 100350c:	10c00015 	stw	r3,0(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003510:	e0bffa17 	ldw	r2,-24(fp)
}
 1003514:	e037883a 	mov	sp,fp
 1003518:	dfc00117 	ldw	ra,4(sp)
 100351c:	df000017 	ldw	fp,0(sp)
 1003520:	dec00204 	addi	sp,sp,8
 1003524:	f800283a 	ret

01003528 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 1003528:	defffd04 	addi	sp,sp,-12
 100352c:	df000215 	stw	fp,8(sp)
 1003530:	df000204 	addi	fp,sp,8
 1003534:	e13fff15 	stw	r4,-4(fp)
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 1003538:	e0bfff17 	ldw	r2,-4(fp)
 100353c:	10c00217 	ldw	r3,8(r2)
 1003540:	e0bfff17 	ldw	r2,-4(fp)
 1003544:	10800117 	ldw	r2,4(r2)
 1003548:	1885883a 	add	r2,r3,r2
 100354c:	e0bffe15 	stw	r2,-8(fp)
	xCount -= pxStreamBuffer->xTail;
 1003550:	e0bfff17 	ldw	r2,-4(fp)
 1003554:	10800017 	ldw	r2,0(r2)
 1003558:	e0fffe17 	ldw	r3,-8(fp)
 100355c:	1885c83a 	sub	r2,r3,r2
 1003560:	e0bffe15 	stw	r2,-8(fp)
	if ( xCount >= pxStreamBuffer->xLength )
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	10800217 	ldw	r2,8(r2)
 100356c:	e0fffe17 	ldw	r3,-8(fp)
 1003570:	18800536 	bltu	r3,r2,1003588 <prvBytesInBuffer+0x60>
	{
		xCount -= pxStreamBuffer->xLength;
 1003574:	e0bfff17 	ldw	r2,-4(fp)
 1003578:	10800217 	ldw	r2,8(r2)
 100357c:	e0fffe17 	ldw	r3,-8(fp)
 1003580:	1885c83a 	sub	r2,r3,r2
 1003584:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 1003588:	e0bffe17 	ldw	r2,-8(fp)
}
 100358c:	e037883a 	mov	sp,fp
 1003590:	df000017 	ldw	fp,0(sp)
 1003594:	dec00104 	addi	sp,sp,4
 1003598:	f800283a 	ret

0100359c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 100359c:	defff904 	addi	sp,sp,-28
 10035a0:	dfc00615 	stw	ra,24(sp)
 10035a4:	df000515 	stw	fp,20(sp)
 10035a8:	df000504 	addi	fp,sp,20
 10035ac:	e13ffb15 	stw	r4,-20(fp)
 10035b0:	e17ffc15 	stw	r5,-16(fp)
 10035b4:	e1bffd15 	stw	r6,-12(fp)
 10035b8:	e1fffe15 	stw	r7,-8(fp)
 10035bc:	e0800217 	ldw	r2,8(fp)
 10035c0:	e0bfff05 	stb	r2,-4(fp)
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 10035c4:	01800804 	movi	r6,32
 10035c8:	000b883a 	mov	r5,zero
 10035cc:	e13ffb17 	ldw	r4,-20(fp)
 10035d0:	1005bc00 	call	1005bc0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 10035d4:	e0bffb17 	ldw	r2,-20(fp)
 10035d8:	e0fffc17 	ldw	r3,-16(fp)
 10035dc:	10c00615 	stw	r3,24(r2)
	pxStreamBuffer->xLength = xBufferSizeBytes;
 10035e0:	e0bffb17 	ldw	r2,-20(fp)
 10035e4:	e0fffd17 	ldw	r3,-12(fp)
 10035e8:	10c00215 	stw	r3,8(r2)
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 10035ec:	e0bffb17 	ldw	r2,-20(fp)
 10035f0:	e0fffe17 	ldw	r3,-8(fp)
 10035f4:	10c00315 	stw	r3,12(r2)
	pxStreamBuffer->ucFlags = ucFlags;
 10035f8:	e0bffb17 	ldw	r2,-20(fp)
 10035fc:	e0ffff03 	ldbu	r3,-4(fp)
 1003600:	10c00705 	stb	r3,28(r2)
}
 1003604:	0001883a 	nop
 1003608:	e037883a 	mov	sp,fp
 100360c:	dfc00117 	ldw	ra,4(sp)
 1003610:	df000017 	ldw	fp,0(sp)
 1003614:	dec00204 	addi	sp,sp,8
 1003618:	f800283a 	ret

0100361c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 100361c:	defff304 	addi	sp,sp,-52
 1003620:	dfc00c15 	stw	ra,48(sp)
 1003624:	df000b15 	stw	fp,44(sp)
 1003628:	df000b04 	addi	fp,sp,44
 100362c:	e13ffc15 	stw	r4,-16(fp)
 1003630:	e17ffd15 	stw	r5,-12(fp)
 1003634:	3005883a 	mov	r2,r6
 1003638:	e1ffff15 	stw	r7,-4(fp)
 100363c:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 1003640:	e0bffe0b 	ldhu	r2,-8(fp)
 1003644:	1085883a 	add	r2,r2,r2
 1003648:	1085883a 	add	r2,r2,r2
 100364c:	1009883a 	mov	r4,r2
 1003650:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003654:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 1003658:	e0bffb17 	ldw	r2,-20(fp)
 100365c:	10000c26 	beq	r2,zero,1003690 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 1003660:	01001404 	movi	r4,80
 1003664:	1000fb00 	call	1000fb0 <pvPortMalloc>
 1003668:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 100366c:	e0bff917 	ldw	r2,-28(fp)
 1003670:	10000426 	beq	r2,zero,1003684 <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 1003674:	e0bff917 	ldw	r2,-28(fp)
 1003678:	e0fffb17 	ldw	r3,-20(fp)
 100367c:	10c00c15 	stw	r3,48(r2)
 1003680:	00000406 	br	1003694 <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 1003684:	e13ffb17 	ldw	r4,-20(fp)
 1003688:	10011840 	call	1001184 <vPortFree>
 100368c:	00000106 	br	1003694 <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 1003690:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 1003694:	e0bff917 	ldw	r2,-28(fp)
 1003698:	10001226 	beq	r2,zero,10036e4 <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 100369c:	e0fffe0b 	ldhu	r3,-8(fp)
 10036a0:	d8000315 	stw	zero,12(sp)
 10036a4:	e0bff917 	ldw	r2,-28(fp)
 10036a8:	d8800215 	stw	r2,8(sp)
 10036ac:	e0800317 	ldw	r2,12(fp)
 10036b0:	d8800115 	stw	r2,4(sp)
 10036b4:	e0800217 	ldw	r2,8(fp)
 10036b8:	d8800015 	stw	r2,0(sp)
 10036bc:	e1ffff17 	ldw	r7,-4(fp)
 10036c0:	180d883a 	mov	r6,r3
 10036c4:	e17ffd17 	ldw	r5,-12(fp)
 10036c8:	e13ffc17 	ldw	r4,-16(fp)
 10036cc:	10037040 	call	1003704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 10036d0:	e13ff917 	ldw	r4,-28(fp)
 10036d4:	10038e80 	call	10038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 10036d8:	00800044 	movi	r2,1
 10036dc:	e0bffa15 	stw	r2,-24(fp)
 10036e0:	00000206 	br	10036ec <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 10036e4:	00bfffc4 	movi	r2,-1
 10036e8:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 10036ec:	e0bffa17 	ldw	r2,-24(fp)
	}
 10036f0:	e037883a 	mov	sp,fp
 10036f4:	dfc00117 	ldw	ra,4(sp)
 10036f8:	df000017 	ldw	fp,0(sp)
 10036fc:	dec00204 	addi	sp,sp,8
 1003700:	f800283a 	ret

01003704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 1003704:	defff804 	addi	sp,sp,-32
 1003708:	dfc00715 	stw	ra,28(sp)
 100370c:	df000615 	stw	fp,24(sp)
 1003710:	df000604 	addi	fp,sp,24
 1003714:	e13ffc15 	stw	r4,-16(fp)
 1003718:	e17ffd15 	stw	r5,-12(fp)
 100371c:	e1bffe15 	stw	r6,-8(fp)
 1003720:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 1003724:	e0800417 	ldw	r2,16(fp)
 1003728:	10c00c17 	ldw	r3,48(r2)
 100372c:	e0bffe17 	ldw	r2,-8(fp)
 1003730:	1085883a 	add	r2,r2,r2
 1003734:	1085883a 	add	r2,r2,r2
 1003738:	100d883a 	mov	r6,r2
 100373c:	01402944 	movi	r5,165
 1003740:	1809883a 	mov	r4,r3
 1003744:	1005bc00 	call	1005bc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 1003748:	e0800417 	ldw	r2,16(fp)
 100374c:	10c00c17 	ldw	r3,48(r2)
 1003750:	e13ffe17 	ldw	r4,-8(fp)
 1003754:	00900034 	movhi	r2,16384
 1003758:	10bfffc4 	addi	r2,r2,-1
 100375c:	2085883a 	add	r2,r4,r2
 1003760:	1085883a 	add	r2,r2,r2
 1003764:	1085883a 	add	r2,r2,r2
 1003768:	1885883a 	add	r2,r3,r2
 100376c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 1003770:	e0fffb17 	ldw	r3,-20(fp)
 1003774:	00bfff04 	movi	r2,-4
 1003778:	1884703a 	and	r2,r3,r2
 100377c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 1003780:	e0bffd17 	ldw	r2,-12(fp)
 1003784:	10001e26 	beq	r2,zero,1003800 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 1003788:	e03ffa15 	stw	zero,-24(fp)
 100378c:	00001406 	br	10037e0 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 1003790:	e0fffd17 	ldw	r3,-12(fp)
 1003794:	e0bffa17 	ldw	r2,-24(fp)
 1003798:	1885883a 	add	r2,r3,r2
 100379c:	10c00003 	ldbu	r3,0(r2)
 10037a0:	e1000417 	ldw	r4,16(fp)
 10037a4:	e0bffa17 	ldw	r2,-24(fp)
 10037a8:	2085883a 	add	r2,r4,r2
 10037ac:	10800d04 	addi	r2,r2,52
 10037b0:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 10037b4:	e0fffd17 	ldw	r3,-12(fp)
 10037b8:	e0bffa17 	ldw	r2,-24(fp)
 10037bc:	1885883a 	add	r2,r3,r2
 10037c0:	10800003 	ldbu	r2,0(r2)
 10037c4:	10803fcc 	andi	r2,r2,255
 10037c8:	1080201c 	xori	r2,r2,128
 10037cc:	10bfe004 	addi	r2,r2,-128
 10037d0:	10000726 	beq	r2,zero,10037f0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 10037d4:	e0bffa17 	ldw	r2,-24(fp)
 10037d8:	10800044 	addi	r2,r2,1
 10037dc:	e0bffa15 	stw	r2,-24(fp)
 10037e0:	e0bffa17 	ldw	r2,-24(fp)
 10037e4:	10800230 	cmpltui	r2,r2,8
 10037e8:	103fe91e 	bne	r2,zero,1003790 <__alt_data_end+0xff003790>
 10037ec:	00000106 	br	10037f4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 10037f0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 10037f4:	e0800417 	ldw	r2,16(fp)
 10037f8:	10000ec5 	stb	zero,59(r2)
 10037fc:	00000206 	br	1003808 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 1003800:	e0800417 	ldw	r2,16(fp)
 1003804:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003808:	e0800217 	ldw	r2,8(fp)
 100380c:	10800170 	cmpltui	r2,r2,5
 1003810:	1000021e 	bne	r2,zero,100381c <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003814:	00800104 	movi	r2,4
 1003818:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 100381c:	e0800417 	ldw	r2,16(fp)
 1003820:	e0c00217 	ldw	r3,8(fp)
 1003824:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 1003828:	e0800417 	ldw	r2,16(fp)
 100382c:	e0c00217 	ldw	r3,8(fp)
 1003830:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 1003834:	e0800417 	ldw	r2,16(fp)
 1003838:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 100383c:	e0800417 	ldw	r2,16(fp)
 1003840:	10800104 	addi	r2,r2,4
 1003844:	1009883a 	mov	r4,r2
 1003848:	1000b540 	call	1000b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 100384c:	e0800417 	ldw	r2,16(fp)
 1003850:	10800604 	addi	r2,r2,24
 1003854:	1009883a 	mov	r4,r2
 1003858:	1000b540 	call	1000b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 100385c:	e0800417 	ldw	r2,16(fp)
 1003860:	e0c00417 	ldw	r3,16(fp)
 1003864:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003868:	00c00144 	movi	r3,5
 100386c:	e0800217 	ldw	r2,8(fp)
 1003870:	1887c83a 	sub	r3,r3,r2
 1003874:	e0800417 	ldw	r2,16(fp)
 1003878:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 100387c:	e0800417 	ldw	r2,16(fp)
 1003880:	e0c00417 	ldw	r3,16(fp)
 1003884:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 1003888:	e0800417 	ldw	r2,16(fp)
 100388c:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 1003890:	e0800417 	ldw	r2,16(fp)
 1003894:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003898:	e0800417 	ldw	r2,16(fp)
 100389c:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 10038a0:	e1bfff17 	ldw	r6,-4(fp)
 10038a4:	e17ffc17 	ldw	r5,-16(fp)
 10038a8:	e13ffb17 	ldw	r4,-20(fp)
 10038ac:	1000da80 	call	1000da8 <pxPortInitialiseStack>
 10038b0:	1007883a 	mov	r3,r2
 10038b4:	e0800417 	ldw	r2,16(fp)
 10038b8:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 10038bc:	e0800317 	ldw	r2,12(fp)
 10038c0:	10000326 	beq	r2,zero,10038d0 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 10038c4:	e0800317 	ldw	r2,12(fp)
 10038c8:	e0c00417 	ldw	r3,16(fp)
 10038cc:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10038d0:	0001883a 	nop
 10038d4:	e037883a 	mov	sp,fp
 10038d8:	dfc00117 	ldw	ra,4(sp)
 10038dc:	df000017 	ldw	fp,0(sp)
 10038e0:	dec00204 	addi	sp,sp,8
 10038e4:	f800283a 	ret

010038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 10038e8:	defffd04 	addi	sp,sp,-12
 10038ec:	dfc00215 	stw	ra,8(sp)
 10038f0:	df000115 	stw	fp,4(sp)
 10038f4:	df000104 	addi	fp,sp,4
 10038f8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 10038fc:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 1003900:	d0a6be17 	ldw	r2,-25864(gp)
 1003904:	10800044 	addi	r2,r2,1
 1003908:	d0a6be15 	stw	r2,-25864(gp)
		if( pxCurrentTCB == NULL )
 100390c:	d0a6ba17 	ldw	r2,-25880(gp)
 1003910:	1000071e 	bne	r2,zero,1003930 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 1003914:	e0bfff17 	ldw	r2,-4(fp)
 1003918:	d0a6ba15 	stw	r2,-25880(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 100391c:	d0a6be17 	ldw	r2,-25864(gp)
 1003920:	10800058 	cmpnei	r2,r2,1
 1003924:	10000b1e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 1003928:	1004b280 	call	1004b28 <prvInitialiseTaskLists>
 100392c:	00000906 	br	1003954 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 1003930:	d0a6c117 	ldw	r2,-25852(gp)
 1003934:	1000071e 	bne	r2,zero,1003954 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 1003938:	d0a6ba17 	ldw	r2,-25880(gp)
 100393c:	10800b17 	ldw	r2,44(r2)
 1003940:	e0ffff17 	ldw	r3,-4(fp)
 1003944:	18c00b17 	ldw	r3,44(r3)
 1003948:	18800236 	bltu	r3,r2,1003954 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 100394c:	e0bfff17 	ldw	r2,-4(fp)
 1003950:	d0a6ba15 	stw	r2,-25880(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 1003954:	d0a6c517 	ldw	r2,-25836(gp)
 1003958:	10800044 	addi	r2,r2,1
 100395c:	d0a6c515 	stw	r2,-25836(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 1003960:	e0bfff17 	ldw	r2,-4(fp)
 1003964:	10800b17 	ldw	r2,44(r2)
 1003968:	d0e6c017 	ldw	r3,-25856(gp)
 100396c:	1880032e 	bgeu	r3,r2,100397c <prvAddNewTaskToReadyList+0x94>
 1003970:	e0bfff17 	ldw	r2,-4(fp)
 1003974:	10800b17 	ldw	r2,44(r2)
 1003978:	d0a6c015 	stw	r2,-25856(gp)
 100397c:	e0bfff17 	ldw	r2,-4(fp)
 1003980:	10800b17 	ldw	r2,44(r2)
 1003984:	10c00524 	muli	r3,r2,20
 1003988:	00806074 	movhi	r2,385
 100398c:	10bab404 	addi	r2,r2,-5424
 1003990:	1887883a 	add	r3,r3,r2
 1003994:	e0bfff17 	ldw	r2,-4(fp)
 1003998:	10800104 	addi	r2,r2,4
 100399c:	100b883a 	mov	r5,r2
 10039a0:	1809883a 	mov	r4,r3
 10039a4:	1000b800 	call	1000b80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 10039a8:	10051b40 	call	10051b4 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 10039ac:	d0a6c117 	ldw	r2,-25852(gp)
 10039b0:	10000626 	beq	r2,zero,10039cc <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 10039b4:	d0a6ba17 	ldw	r2,-25880(gp)
 10039b8:	10c00b17 	ldw	r3,44(r2)
 10039bc:	e0bfff17 	ldw	r2,-4(fp)
 10039c0:	10800b17 	ldw	r2,44(r2)
 10039c4:	1880012e 	bgeu	r3,r2,10039cc <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 10039c8:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 10039cc:	0001883a 	nop
 10039d0:	e037883a 	mov	sp,fp
 10039d4:	dfc00117 	ldw	ra,4(sp)
 10039d8:	df000017 	ldw	fp,0(sp)
 10039dc:	dec00204 	addi	sp,sp,8
 10039e0:	f800283a 	ret

010039e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 10039e4:	defffc04 	addi	sp,sp,-16
 10039e8:	dfc00315 	stw	ra,12(sp)
 10039ec:	df000215 	stw	fp,8(sp)
 10039f0:	df000204 	addi	fp,sp,8
 10039f4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 10039f8:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 10039fc:	e0bfff17 	ldw	r2,-4(fp)
 1003a00:	1000021e 	bne	r2,zero,1003a0c <vTaskDelete+0x28>
 1003a04:	d0a6ba17 	ldw	r2,-25880(gp)
 1003a08:	00000106 	br	1003a10 <vTaskDelete+0x2c>
 1003a0c:	e0bfff17 	ldw	r2,-4(fp)
 1003a10:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003a14:	e0bffe17 	ldw	r2,-8(fp)
 1003a18:	10800104 	addi	r2,r2,4
 1003a1c:	1009883a 	mov	r4,r2
 1003a20:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003a24:	e0bffe17 	ldw	r2,-8(fp)
 1003a28:	10800a17 	ldw	r2,40(r2)
 1003a2c:	10000426 	beq	r2,zero,1003a40 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003a30:	e0bffe17 	ldw	r2,-8(fp)
 1003a34:	10800604 	addi	r2,r2,24
 1003a38:	1009883a 	mov	r4,r2
 1003a3c:	1000ce40 	call	1000ce4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 1003a40:	d0a6c517 	ldw	r2,-25836(gp)
 1003a44:	10800044 	addi	r2,r2,1
 1003a48:	d0a6c515 	stw	r2,-25836(gp)

			if( pxTCB == pxCurrentTCB )
 1003a4c:	d0a6ba17 	ldw	r2,-25880(gp)
 1003a50:	e0fffe17 	ldw	r3,-8(fp)
 1003a54:	18800a1e 	bne	r3,r2,1003a80 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 1003a58:	e0bffe17 	ldw	r2,-8(fp)
 1003a5c:	10800104 	addi	r2,r2,4
 1003a60:	100b883a 	mov	r5,r2
 1003a64:	01006074 	movhi	r4,385
 1003a68:	213adc04 	addi	r4,r4,-5264
 1003a6c:	1000b800 	call	1000b80 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 1003a70:	d0a6bd17 	ldw	r2,-25868(gp)
 1003a74:	10800044 	addi	r2,r2,1
 1003a78:	d0a6bd15 	stw	r2,-25868(gp)
 1003a7c:	00000606 	br	1003a98 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 1003a80:	d0a6be17 	ldw	r2,-25864(gp)
 1003a84:	10bfffc4 	addi	r2,r2,-1
 1003a88:	d0a6be15 	stw	r2,-25864(gp)
				prvDeleteTCB( pxTCB );
 1003a8c:	e13ffe17 	ldw	r4,-8(fp)
 1003a90:	1004d240 	call	1004d24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 1003a94:	1004d680 	call	1004d68 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 1003a98:	10051b40 	call	10051b4 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 1003a9c:	d0a6c117 	ldw	r2,-25852(gp)
 1003aa0:	10000426 	beq	r2,zero,1003ab4 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 1003aa4:	d0a6ba17 	ldw	r2,-25880(gp)
 1003aa8:	e0fffe17 	ldw	r3,-8(fp)
 1003aac:	1880011e 	bne	r3,r2,1003ab4 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 1003ab0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 1003ab4:	0001883a 	nop
 1003ab8:	e037883a 	mov	sp,fp
 1003abc:	dfc00117 	ldw	ra,4(sp)
 1003ac0:	df000017 	ldw	fp,0(sp)
 1003ac4:	dec00204 	addi	sp,sp,8
 1003ac8:	f800283a 	ret

01003acc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 1003acc:	defff804 	addi	sp,sp,-32
 1003ad0:	dfc00715 	stw	ra,28(sp)
 1003ad4:	df000615 	stw	fp,24(sp)
 1003ad8:	df000604 	addi	fp,sp,24
 1003adc:	e13ffe15 	stw	r4,-8(fp)
 1003ae0:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1003ae4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 1003ae8:	100424c0 	call	100424c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 1003aec:	d0a6bf17 	ldw	r2,-25860(gp)
 1003af0:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1003af4:	e0bffe17 	ldw	r2,-8(fp)
 1003af8:	10c00017 	ldw	r3,0(r2)
 1003afc:	e0bfff17 	ldw	r2,-4(fp)
 1003b00:	1885883a 	add	r2,r3,r2
 1003b04:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 1003b08:	e0bffe17 	ldw	r2,-8(fp)
 1003b0c:	10800017 	ldw	r2,0(r2)
 1003b10:	e0fffb17 	ldw	r3,-20(fp)
 1003b14:	18800a2e 	bgeu	r3,r2,1003b40 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1003b18:	e0bffe17 	ldw	r2,-8(fp)
 1003b1c:	10800017 	ldw	r2,0(r2)
 1003b20:	e0fffc17 	ldw	r3,-16(fp)
 1003b24:	18800f2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
 1003b28:	e0bffc17 	ldw	r2,-16(fp)
 1003b2c:	e0fffb17 	ldw	r3,-20(fp)
 1003b30:	18800c2e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b34:	00800044 	movi	r2,1
 1003b38:	e0bffa15 	stw	r2,-24(fp)
 1003b3c:	00000906 	br	1003b64 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1003b40:	e0bffe17 	ldw	r2,-8(fp)
 1003b44:	10800017 	ldw	r2,0(r2)
 1003b48:	e0fffc17 	ldw	r3,-16(fp)
 1003b4c:	18800336 	bltu	r3,r2,1003b5c <vTaskDelayUntil+0x90>
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	e0fffb17 	ldw	r3,-20(fp)
 1003b58:	1880022e 	bgeu	r3,r2,1003b64 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 1003b5c:	00800044 	movi	r2,1
 1003b60:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 1003b64:	e0bffe17 	ldw	r2,-8(fp)
 1003b68:	e0fffc17 	ldw	r3,-16(fp)
 1003b6c:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 1003b70:	e0bffa17 	ldw	r2,-24(fp)
 1003b74:	10000626 	beq	r2,zero,1003b90 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1003b78:	e0fffc17 	ldw	r3,-16(fp)
 1003b7c:	e0bffb17 	ldw	r2,-20(fp)
 1003b80:	1885c83a 	sub	r2,r3,r2
 1003b84:	000b883a 	mov	r5,zero
 1003b88:	1009883a 	mov	r4,r2
 1003b8c:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 1003b90:	10042780 	call	1004278 <xTaskResumeAll>
 1003b94:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003b98:	e0bffd17 	ldw	r2,-12(fp)
 1003b9c:	1000011e 	bne	r2,zero,1003ba4 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 1003ba0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003ba4:	0001883a 	nop
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	dfc00117 	ldw	ra,4(sp)
 1003bb0:	df000017 	ldw	fp,0(sp)
 1003bb4:	dec00204 	addi	sp,sp,8
 1003bb8:	f800283a 	ret

01003bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 1003bbc:	defffc04 	addi	sp,sp,-16
 1003bc0:	dfc00315 	stw	ra,12(sp)
 1003bc4:	df000215 	stw	fp,8(sp)
 1003bc8:	df000204 	addi	fp,sp,8
 1003bcc:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 1003bd0:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 1003bd4:	e0bfff17 	ldw	r2,-4(fp)
 1003bd8:	10000626 	beq	r2,zero,1003bf4 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 1003bdc:	100424c0 	call	100424c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1003be0:	000b883a 	mov	r5,zero
 1003be4:	e13fff17 	ldw	r4,-4(fp)
 1003be8:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 1003bec:	10042780 	call	1004278 <xTaskResumeAll>
 1003bf0:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 1003bf4:	e0bffe17 	ldw	r2,-8(fp)
 1003bf8:	1000011e 	bne	r2,zero,1003c00 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 1003bfc:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003c00:	0001883a 	nop
 1003c04:	e037883a 	mov	sp,fp
 1003c08:	dfc00117 	ldw	ra,4(sp)
 1003c0c:	df000017 	ldw	fp,0(sp)
 1003c10:	dec00204 	addi	sp,sp,8
 1003c14:	f800283a 	ret

01003c18 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 1003c18:	defffb04 	addi	sp,sp,-20
 1003c1c:	dfc00415 	stw	ra,16(sp)
 1003c20:	df000315 	stw	fp,12(sp)
 1003c24:	df000304 	addi	fp,sp,12
 1003c28:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 1003c2c:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003c30:	e0bfff17 	ldw	r2,-4(fp)
 1003c34:	1000021e 	bne	r2,zero,1003c40 <uxTaskPriorityGet+0x28>
 1003c38:	d0a6ba17 	ldw	r2,-25880(gp)
 1003c3c:	00000106 	br	1003c44 <uxTaskPriorityGet+0x2c>
 1003c40:	e0bfff17 	ldw	r2,-4(fp)
 1003c44:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003c48:	e0bffd17 	ldw	r2,-12(fp)
 1003c4c:	10800b17 	ldw	r2,44(r2)
 1003c50:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 1003c54:	10051b40 	call	10051b4 <vTaskExitCritical>

		return uxReturn;
 1003c58:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003c5c:	e037883a 	mov	sp,fp
 1003c60:	dfc00117 	ldw	ra,4(sp)
 1003c64:	df000017 	ldw	fp,0(sp)
 1003c68:	dec00204 	addi	sp,sp,8
 1003c6c:	f800283a 	ret

01003c70 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 1003c70:	defffb04 	addi	sp,sp,-20
 1003c74:	df000415 	stw	fp,16(sp)
 1003c78:	df000404 	addi	fp,sp,16
 1003c7c:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1003c80:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003c84:	e0bfff17 	ldw	r2,-4(fp)
 1003c88:	1000021e 	bne	r2,zero,1003c94 <uxTaskPriorityGetFromISR+0x24>
 1003c8c:	d0a6ba17 	ldw	r2,-25880(gp)
 1003c90:	00000106 	br	1003c98 <uxTaskPriorityGetFromISR+0x28>
 1003c94:	e0bfff17 	ldw	r2,-4(fp)
 1003c98:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 1003c9c:	e0bffd17 	ldw	r2,-12(fp)
 1003ca0:	10800b17 	ldw	r2,44(r2)
 1003ca4:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 1003ca8:	e0bffe17 	ldw	r2,-8(fp)
	}
 1003cac:	e037883a 	mov	sp,fp
 1003cb0:	df000017 	ldw	fp,0(sp)
 1003cb4:	dec00104 	addi	sp,sp,4
 1003cb8:	f800283a 	ret

01003cbc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 1003cbc:	defff804 	addi	sp,sp,-32
 1003cc0:	dfc00715 	stw	ra,28(sp)
 1003cc4:	df000615 	stw	fp,24(sp)
 1003cc8:	df000604 	addi	fp,sp,24
 1003ccc:	e13ffe15 	stw	r4,-8(fp)
 1003cd0:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 1003cd4:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1003cd8:	e0bfff17 	ldw	r2,-4(fp)
 1003cdc:	10800170 	cmpltui	r2,r2,5
 1003ce0:	1000021e 	bne	r2,zero,1003cec <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1003ce4:	00800104 	movi	r2,4
 1003ce8:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 1003cec:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 1003cf0:	e0bffe17 	ldw	r2,-8(fp)
 1003cf4:	1000021e 	bne	r2,zero,1003d00 <vTaskPrioritySet+0x44>
 1003cf8:	d0a6ba17 	ldw	r2,-25880(gp)
 1003cfc:	00000106 	br	1003d04 <vTaskPrioritySet+0x48>
 1003d00:	e0bffe17 	ldw	r2,-8(fp)
 1003d04:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1003d08:	e0bffb17 	ldw	r2,-20(fp)
 1003d0c:	10801017 	ldw	r2,64(r2)
 1003d10:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 1003d14:	e0fffc17 	ldw	r3,-16(fp)
 1003d18:	e0bfff17 	ldw	r2,-4(fp)
 1003d1c:	18804926 	beq	r3,r2,1003e44 <vTaskPrioritySet+0x188>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 1003d20:	e0bfff17 	ldw	r2,-4(fp)
 1003d24:	e0fffc17 	ldw	r3,-16(fp)
 1003d28:	18800a2e 	bgeu	r3,r2,1003d54 <vTaskPrioritySet+0x98>
				{
					if( pxTCB != pxCurrentTCB )
 1003d2c:	d0a6ba17 	ldw	r2,-25880(gp)
 1003d30:	e0fffb17 	ldw	r3,-20(fp)
 1003d34:	18800c26 	beq	r3,r2,1003d68 <vTaskPrioritySet+0xac>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1003d38:	d0a6ba17 	ldw	r2,-25880(gp)
 1003d3c:	10800b17 	ldw	r2,44(r2)
 1003d40:	e0ffff17 	ldw	r3,-4(fp)
 1003d44:	18800836 	bltu	r3,r2,1003d68 <vTaskPrioritySet+0xac>
						{
							xYieldRequired = pdTRUE;
 1003d48:	00800044 	movi	r2,1
 1003d4c:	e0bffa15 	stw	r2,-24(fp)
 1003d50:	00000506 	br	1003d68 <vTaskPrioritySet+0xac>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 1003d54:	d0a6ba17 	ldw	r2,-25880(gp)
 1003d58:	e0fffb17 	ldw	r3,-20(fp)
 1003d5c:	1880021e 	bne	r3,r2,1003d68 <vTaskPrioritySet+0xac>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 1003d60:	00800044 	movi	r2,1
 1003d64:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1003d68:	e0bffb17 	ldw	r2,-20(fp)
 1003d6c:	10800b17 	ldw	r2,44(r2)
 1003d70:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1003d74:	e0bffb17 	ldw	r2,-20(fp)
 1003d78:	10c01017 	ldw	r3,64(r2)
 1003d7c:	e0bffb17 	ldw	r2,-20(fp)
 1003d80:	10800b17 	ldw	r2,44(r2)
 1003d84:	1880031e 	bne	r3,r2,1003d94 <vTaskPrioritySet+0xd8>
					{
						pxTCB->uxPriority = uxNewPriority;
 1003d88:	e0bffb17 	ldw	r2,-20(fp)
 1003d8c:	e0ffff17 	ldw	r3,-4(fp)
 1003d90:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 1003d94:	e0bffb17 	ldw	r2,-20(fp)
 1003d98:	e0ffff17 	ldw	r3,-4(fp)
 1003d9c:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1003da0:	e0bffb17 	ldw	r2,-20(fp)
 1003da4:	10800617 	ldw	r2,24(r2)
 1003da8:	10000516 	blt	r2,zero,1003dc0 <vTaskPrioritySet+0x104>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1003dac:	00c00144 	movi	r3,5
 1003db0:	e0bfff17 	ldw	r2,-4(fp)
 1003db4:	1887c83a 	sub	r3,r3,r2
 1003db8:	e0bffb17 	ldw	r2,-20(fp)
 1003dbc:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1003dc0:	e0bffb17 	ldw	r2,-20(fp)
 1003dc4:	10c00517 	ldw	r3,20(r2)
 1003dc8:	e0bffd17 	ldw	r2,-12(fp)
 1003dcc:	11000524 	muli	r4,r2,20
 1003dd0:	00806074 	movhi	r2,385
 1003dd4:	10bab404 	addi	r2,r2,-5424
 1003dd8:	2085883a 	add	r2,r4,r2
 1003ddc:	1880161e 	bne	r3,r2,1003e38 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003de0:	e0bffb17 	ldw	r2,-20(fp)
 1003de4:	10800104 	addi	r2,r2,4
 1003de8:	1009883a 	mov	r4,r2
 1003dec:	1000ce40 	call	1000ce4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 1003df0:	e0bffb17 	ldw	r2,-20(fp)
 1003df4:	10800b17 	ldw	r2,44(r2)
 1003df8:	d0e6c017 	ldw	r3,-25856(gp)
 1003dfc:	1880032e 	bgeu	r3,r2,1003e0c <vTaskPrioritySet+0x150>
 1003e00:	e0bffb17 	ldw	r2,-20(fp)
 1003e04:	10800b17 	ldw	r2,44(r2)
 1003e08:	d0a6c015 	stw	r2,-25856(gp)
 1003e0c:	e0bffb17 	ldw	r2,-20(fp)
 1003e10:	10800b17 	ldw	r2,44(r2)
 1003e14:	10c00524 	muli	r3,r2,20
 1003e18:	00806074 	movhi	r2,385
 1003e1c:	10bab404 	addi	r2,r2,-5424
 1003e20:	1887883a 	add	r3,r3,r2
 1003e24:	e0bffb17 	ldw	r2,-20(fp)
 1003e28:	10800104 	addi	r2,r2,4
 1003e2c:	100b883a 	mov	r5,r2
 1003e30:	1809883a 	mov	r4,r3
 1003e34:	1000b800 	call	1000b80 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 1003e38:	e0bffa17 	ldw	r2,-24(fp)
 1003e3c:	10000126 	beq	r2,zero,1003e44 <vTaskPrioritySet+0x188>
				{
					taskYIELD_IF_USING_PREEMPTION();
 1003e40:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 1003e44:	10051b40 	call	10051b4 <vTaskExitCritical>
	}
 1003e48:	0001883a 	nop
 1003e4c:	e037883a 	mov	sp,fp
 1003e50:	dfc00117 	ldw	ra,4(sp)
 1003e54:	df000017 	ldw	fp,0(sp)
 1003e58:	dec00204 	addi	sp,sp,8
 1003e5c:	f800283a 	ret

01003e60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 1003e60:	defffc04 	addi	sp,sp,-16
 1003e64:	dfc00315 	stw	ra,12(sp)
 1003e68:	df000215 	stw	fp,8(sp)
 1003e6c:	df000204 	addi	fp,sp,8
 1003e70:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 1003e74:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1003e78:	e0bfff17 	ldw	r2,-4(fp)
 1003e7c:	1000021e 	bne	r2,zero,1003e88 <vTaskSuspend+0x28>
 1003e80:	d0a6ba17 	ldw	r2,-25880(gp)
 1003e84:	00000106 	br	1003e8c <vTaskSuspend+0x2c>
 1003e88:	e0bfff17 	ldw	r2,-4(fp)
 1003e8c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1003e90:	e0bffe17 	ldw	r2,-8(fp)
 1003e94:	10800104 	addi	r2,r2,4
 1003e98:	1009883a 	mov	r4,r2
 1003e9c:	1000ce40 	call	1000ce4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1003ea0:	e0bffe17 	ldw	r2,-8(fp)
 1003ea4:	10800a17 	ldw	r2,40(r2)
 1003ea8:	10000426 	beq	r2,zero,1003ebc <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1003eac:	e0bffe17 	ldw	r2,-8(fp)
 1003eb0:	10800604 	addi	r2,r2,24
 1003eb4:	1009883a 	mov	r4,r2
 1003eb8:	1000ce40 	call	1000ce4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1003ebc:	e0bffe17 	ldw	r2,-8(fp)
 1003ec0:	10800104 	addi	r2,r2,4
 1003ec4:	100b883a 	mov	r5,r2
 1003ec8:	01006074 	movhi	r4,385
 1003ecc:	213ae104 	addi	r4,r4,-5244
 1003ed0:	1000b800 	call	1000b80 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1003ed4:	e0bffe17 	ldw	r2,-8(fp)
 1003ed8:	10801303 	ldbu	r2,76(r2)
 1003edc:	10803fcc 	andi	r2,r2,255
 1003ee0:	10800058 	cmpnei	r2,r2,1
 1003ee4:	1000021e 	bne	r2,zero,1003ef0 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1003ee8:	e0bffe17 	ldw	r2,-8(fp)
 1003eec:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 1003ef0:	10051b40 	call	10051b4 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 1003ef4:	d0a6c117 	ldw	r2,-25852(gp)
 1003ef8:	10000326 	beq	r2,zero,1003f08 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 1003efc:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 1003f00:	1004d680 	call	1004d68 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 1003f04:	10051b40 	call	10051b4 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 1003f08:	d0a6ba17 	ldw	r2,-25880(gp)
 1003f0c:	e0fffe17 	ldw	r3,-8(fp)
 1003f10:	18800c1e 	bne	r3,r2,1003f44 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 1003f14:	d0a6c117 	ldw	r2,-25852(gp)
 1003f18:	10000226 	beq	r2,zero,1003f24 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 1003f1c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003f20:	00000806 	br	1003f44 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 1003f24:	00806074 	movhi	r2,385
 1003f28:	10bae104 	addi	r2,r2,-5244
 1003f2c:	10c00017 	ldw	r3,0(r2)
 1003f30:	d0a6be17 	ldw	r2,-25864(gp)
 1003f34:	1880021e 	bne	r3,r2,1003f40 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 1003f38:	d026ba15 	stw	zero,-25880(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003f3c:	00000106 	br	1003f44 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 1003f40:	10046340 	call	1004634 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1003f44:	0001883a 	nop
 1003f48:	e037883a 	mov	sp,fp
 1003f4c:	dfc00117 	ldw	ra,4(sp)
 1003f50:	df000017 	ldw	fp,0(sp)
 1003f54:	dec00204 	addi	sp,sp,8
 1003f58:	f800283a 	ret

01003f5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 1003f5c:	defffc04 	addi	sp,sp,-16
 1003f60:	df000315 	stw	fp,12(sp)
 1003f64:	df000304 	addi	fp,sp,12
 1003f68:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 1003f6c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 1003f70:	e0bfff17 	ldw	r2,-4(fp)
 1003f74:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1003f78:	e0bffe17 	ldw	r2,-8(fp)
 1003f7c:	10c00517 	ldw	r3,20(r2)
 1003f80:	00806074 	movhi	r2,385
 1003f84:	10bae104 	addi	r2,r2,-5244
 1003f88:	18800a1e 	bne	r3,r2,1003fb4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1003f8c:	e0bffe17 	ldw	r2,-8(fp)
 1003f90:	10c00a17 	ldw	r3,40(r2)
 1003f94:	00806074 	movhi	r2,385
 1003f98:	10bad704 	addi	r2,r2,-5284
 1003f9c:	18800526 	beq	r3,r2,1003fb4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 1003fa0:	e0bffe17 	ldw	r2,-8(fp)
 1003fa4:	10800a17 	ldw	r2,40(r2)
 1003fa8:	1000021e 	bne	r2,zero,1003fb4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 1003fac:	00800044 	movi	r2,1
 1003fb0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1003fb4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1003fb8:	e037883a 	mov	sp,fp
 1003fbc:	df000017 	ldw	fp,0(sp)
 1003fc0:	dec00104 	addi	sp,sp,4
 1003fc4:	f800283a 	ret

01003fc8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 1003fc8:	defffc04 	addi	sp,sp,-16
 1003fcc:	dfc00315 	stw	ra,12(sp)
 1003fd0:	df000215 	stw	fp,8(sp)
 1003fd4:	df000204 	addi	fp,sp,8
 1003fd8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 1003fdc:	e0bfff17 	ldw	r2,-4(fp)
 1003fe0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1003fe4:	d0a6ba17 	ldw	r2,-25880(gp)
 1003fe8:	e0fffe17 	ldw	r3,-8(fp)
 1003fec:	18802326 	beq	r3,r2,100407c <vTaskResume+0xb4>
 1003ff0:	e0bffe17 	ldw	r2,-8(fp)
 1003ff4:	10002126 	beq	r2,zero,100407c <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 1003ff8:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1003ffc:	e13ffe17 	ldw	r4,-8(fp)
 1004000:	1003f5c0 	call	1003f5c <prvTaskIsTaskSuspended>
 1004004:	10001c26 	beq	r2,zero,1004078 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1004008:	e0bffe17 	ldw	r2,-8(fp)
 100400c:	10800104 	addi	r2,r2,4
 1004010:	1009883a 	mov	r4,r2
 1004014:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1004018:	e0bffe17 	ldw	r2,-8(fp)
 100401c:	10800b17 	ldw	r2,44(r2)
 1004020:	d0e6c017 	ldw	r3,-25856(gp)
 1004024:	1880032e 	bgeu	r3,r2,1004034 <vTaskResume+0x6c>
 1004028:	e0bffe17 	ldw	r2,-8(fp)
 100402c:	10800b17 	ldw	r2,44(r2)
 1004030:	d0a6c015 	stw	r2,-25856(gp)
 1004034:	e0bffe17 	ldw	r2,-8(fp)
 1004038:	10800b17 	ldw	r2,44(r2)
 100403c:	10c00524 	muli	r3,r2,20
 1004040:	00806074 	movhi	r2,385
 1004044:	10bab404 	addi	r2,r2,-5424
 1004048:	1887883a 	add	r3,r3,r2
 100404c:	e0bffe17 	ldw	r2,-8(fp)
 1004050:	10800104 	addi	r2,r2,4
 1004054:	100b883a 	mov	r5,r2
 1004058:	1809883a 	mov	r4,r3
 100405c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004060:	e0bffe17 	ldw	r2,-8(fp)
 1004064:	10c00b17 	ldw	r3,44(r2)
 1004068:	d0a6ba17 	ldw	r2,-25880(gp)
 100406c:	10800b17 	ldw	r2,44(r2)
 1004070:	18800136 	bltu	r3,r2,1004078 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 1004074:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 1004078:	10051b40 	call	10051b4 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 100407c:	0001883a 	nop
 1004080:	e037883a 	mov	sp,fp
 1004084:	dfc00117 	ldw	ra,4(sp)
 1004088:	df000017 	ldw	fp,0(sp)
 100408c:	dec00204 	addi	sp,sp,8
 1004090:	f800283a 	ret

01004094 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 1004094:	defffa04 	addi	sp,sp,-24
 1004098:	dfc00515 	stw	ra,20(sp)
 100409c:	df000415 	stw	fp,16(sp)
 10040a0:	df000404 	addi	fp,sp,16
 10040a4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 10040a8:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 10040ac:	e0bfff17 	ldw	r2,-4(fp)
 10040b0:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10040b4:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 10040b8:	e13ffd17 	ldw	r4,-12(fp)
 10040bc:	1003f5c0 	call	1003f5c <prvTaskIsTaskSuspended>
 10040c0:	10002626 	beq	r2,zero,100415c <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10040c4:	d0a6c817 	ldw	r2,-25824(gp)
 10040c8:	10001e1e 	bne	r2,zero,1004144 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10040cc:	e0bffd17 	ldw	r2,-12(fp)
 10040d0:	10c00b17 	ldw	r3,44(r2)
 10040d4:	d0a6ba17 	ldw	r2,-25880(gp)
 10040d8:	10800b17 	ldw	r2,44(r2)
 10040dc:	18800236 	bltu	r3,r2,10040e8 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 10040e0:	00800044 	movi	r2,1
 10040e4:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10040e8:	e0bffd17 	ldw	r2,-12(fp)
 10040ec:	10800104 	addi	r2,r2,4
 10040f0:	1009883a 	mov	r4,r2
 10040f4:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 10040f8:	e0bffd17 	ldw	r2,-12(fp)
 10040fc:	10800b17 	ldw	r2,44(r2)
 1004100:	d0e6c017 	ldw	r3,-25856(gp)
 1004104:	1880032e 	bgeu	r3,r2,1004114 <xTaskResumeFromISR+0x80>
 1004108:	e0bffd17 	ldw	r2,-12(fp)
 100410c:	10800b17 	ldw	r2,44(r2)
 1004110:	d0a6c015 	stw	r2,-25856(gp)
 1004114:	e0bffd17 	ldw	r2,-12(fp)
 1004118:	10800b17 	ldw	r2,44(r2)
 100411c:	10c00524 	muli	r3,r2,20
 1004120:	00806074 	movhi	r2,385
 1004124:	10bab404 	addi	r2,r2,-5424
 1004128:	1887883a 	add	r3,r3,r2
 100412c:	e0bffd17 	ldw	r2,-12(fp)
 1004130:	10800104 	addi	r2,r2,4
 1004134:	100b883a 	mov	r5,r2
 1004138:	1809883a 	mov	r4,r3
 100413c:	1000b800 	call	1000b80 <vListInsertEnd>
 1004140:	00000606 	br	100415c <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1004144:	e0bffd17 	ldw	r2,-12(fp)
 1004148:	10800604 	addi	r2,r2,24
 100414c:	100b883a 	mov	r5,r2
 1004150:	01006074 	movhi	r4,385
 1004154:	213ad704 	addi	r4,r4,-5284
 1004158:	1000b800 	call	1000b80 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 100415c:	e0bffc17 	ldw	r2,-16(fp)
	}
 1004160:	e037883a 	mov	sp,fp
 1004164:	dfc00117 	ldw	ra,4(sp)
 1004168:	df000017 	ldw	fp,0(sp)
 100416c:	dec00204 	addi	sp,sp,8
 1004170:	f800283a 	ret

01004174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 1004174:	defffa04 	addi	sp,sp,-24
 1004178:	dfc00515 	stw	ra,20(sp)
 100417c:	df000415 	stw	fp,16(sp)
 1004180:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 1004184:	d0a6c704 	addi	r2,gp,-25828
 1004188:	d8800115 	stw	r2,4(sp)
 100418c:	d8000015 	stw	zero,0(sp)
 1004190:	000f883a 	mov	r7,zero
 1004194:	01810004 	movi	r6,1024
 1004198:	01404074 	movhi	r5,257
 100419c:	296d3504 	addi	r5,r5,-19244
 10041a0:	01004034 	movhi	r4,256
 10041a4:	2112c304 	addi	r4,r4,19212
 10041a8:	100361c0 	call	100361c <xTaskCreate>
 10041ac:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 10041b0:	e0bffe17 	ldw	r2,-8(fp)
 10041b4:	10800058 	cmpnei	r2,r2,1
 10041b8:	10000c1e 	bne	r2,zero,10041ec <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10041bc:	0005303a 	rdctl	r2,status
 10041c0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10041c4:	e0ffff17 	ldw	r3,-4(fp)
 10041c8:	00bfff84 	movi	r2,-2
 10041cc:	1884703a 	and	r2,r3,r2
 10041d0:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 10041d4:	00bfffc4 	movi	r2,-1
 10041d8:	d0a6c615 	stw	r2,-25832(gp)
		xSchedulerRunning = pdTRUE;
 10041dc:	00800044 	movi	r2,1
 10041e0:	d0a6c115 	stw	r2,-25852(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 10041e4:	d026bf15 	stw	zero,-25860(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 10041e8:	1000e880 	call	1000e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 10041ec:	0001883a 	nop
 10041f0:	e037883a 	mov	sp,fp
 10041f4:	dfc00117 	ldw	ra,4(sp)
 10041f8:	df000017 	ldw	fp,0(sp)
 10041fc:	dec00204 	addi	sp,sp,8
 1004200:	f800283a 	ret

01004204 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 1004204:	defffd04 	addi	sp,sp,-12
 1004208:	dfc00215 	stw	ra,8(sp)
 100420c:	df000115 	stw	fp,4(sp)
 1004210:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004214:	0005303a 	rdctl	r2,status
 1004218:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100421c:	e0ffff17 	ldw	r3,-4(fp)
 1004220:	00bfff84 	movi	r2,-2
 1004224:	1884703a 	and	r2,r3,r2
 1004228:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 100422c:	d026c115 	stw	zero,-25852(gp)
	vPortEndScheduler();
 1004230:	1000ec00 	call	1000ec0 <vPortEndScheduler>
}
 1004234:	0001883a 	nop
 1004238:	e037883a 	mov	sp,fp
 100423c:	dfc00117 	ldw	ra,4(sp)
 1004240:	df000017 	ldw	fp,0(sp)
 1004244:	dec00204 	addi	sp,sp,8
 1004248:	f800283a 	ret

0100424c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 100424c:	deffff04 	addi	sp,sp,-4
 1004250:	df000015 	stw	fp,0(sp)
 1004254:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 1004258:	d0a6c817 	ldw	r2,-25824(gp)
 100425c:	10800044 	addi	r2,r2,1
 1004260:	d0a6c815 	stw	r2,-25824(gp)
	portMEMORY_BARRIER();
}
 1004264:	0001883a 	nop
 1004268:	e037883a 	mov	sp,fp
 100426c:	df000017 	ldw	fp,0(sp)
 1004270:	dec00104 	addi	sp,sp,4
 1004274:	f800283a 	ret

01004278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 1004278:	defffb04 	addi	sp,sp,-20
 100427c:	dfc00415 	stw	ra,16(sp)
 1004280:	df000315 	stw	fp,12(sp)
 1004284:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 1004288:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 100428c:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 1004290:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 1004294:	d0a6c817 	ldw	r2,-25824(gp)
 1004298:	10bfffc4 	addi	r2,r2,-1
 100429c:	d0a6c815 	stw	r2,-25824(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10042a0:	d0a6c817 	ldw	r2,-25824(gp)
 10042a4:	1000431e 	bne	r2,zero,10043b4 <xTaskResumeAll+0x13c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 10042a8:	d0a6be17 	ldw	r2,-25864(gp)
 10042ac:	10004126 	beq	r2,zero,10043b4 <xTaskResumeAll+0x13c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 10042b0:	00002606 	br	100434c <xTaskResumeAll+0xd4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10042b4:	00806074 	movhi	r2,385
 10042b8:	10bad704 	addi	r2,r2,-5284
 10042bc:	10800317 	ldw	r2,12(r2)
 10042c0:	10800317 	ldw	r2,12(r2)
 10042c4:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 10042c8:	e0bffd17 	ldw	r2,-12(fp)
 10042cc:	10800604 	addi	r2,r2,24
 10042d0:	1009883a 	mov	r4,r2
 10042d4:	1000ce40 	call	1000ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 10042d8:	e0bffd17 	ldw	r2,-12(fp)
 10042dc:	10800104 	addi	r2,r2,4
 10042e0:	1009883a 	mov	r4,r2
 10042e4:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 10042e8:	e0bffd17 	ldw	r2,-12(fp)
 10042ec:	10800b17 	ldw	r2,44(r2)
 10042f0:	d0e6c017 	ldw	r3,-25856(gp)
 10042f4:	1880032e 	bgeu	r3,r2,1004304 <xTaskResumeAll+0x8c>
 10042f8:	e0bffd17 	ldw	r2,-12(fp)
 10042fc:	10800b17 	ldw	r2,44(r2)
 1004300:	d0a6c015 	stw	r2,-25856(gp)
 1004304:	e0bffd17 	ldw	r2,-12(fp)
 1004308:	10800b17 	ldw	r2,44(r2)
 100430c:	10c00524 	muli	r3,r2,20
 1004310:	00806074 	movhi	r2,385
 1004314:	10bab404 	addi	r2,r2,-5424
 1004318:	1887883a 	add	r3,r3,r2
 100431c:	e0bffd17 	ldw	r2,-12(fp)
 1004320:	10800104 	addi	r2,r2,4
 1004324:	100b883a 	mov	r5,r2
 1004328:	1809883a 	mov	r4,r3
 100432c:	1000b800 	call	1000b80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1004330:	e0bffd17 	ldw	r2,-12(fp)
 1004334:	10c00b17 	ldw	r3,44(r2)
 1004338:	d0a6ba17 	ldw	r2,-25880(gp)
 100433c:	10800b17 	ldw	r2,44(r2)
 1004340:	18800236 	bltu	r3,r2,100434c <xTaskResumeAll+0xd4>
					{
						xYieldPending = pdTRUE;
 1004344:	00800044 	movi	r2,1
 1004348:	d0a6c315 	stw	r2,-25844(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 100434c:	00806074 	movhi	r2,385
 1004350:	10bad704 	addi	r2,r2,-5284
 1004354:	10800017 	ldw	r2,0(r2)
 1004358:	103fd61e 	bne	r2,zero,10042b4 <__alt_data_end+0xff0042b4>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 100435c:	e0bffd17 	ldw	r2,-12(fp)
 1004360:	10000126 	beq	r2,zero,1004368 <xTaskResumeAll+0xf0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 1004364:	1004d680 	call	1004d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 1004368:	d0a6c217 	ldw	r2,-25848(gp)
 100436c:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 1004370:	e0bfff17 	ldw	r2,-4(fp)
 1004374:	10000a26 	beq	r2,zero,10043a0 <xTaskResumeAll+0x128>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 1004378:	10044840 	call	1004484 <xTaskIncrementTick>
 100437c:	10000226 	beq	r2,zero,1004388 <xTaskResumeAll+0x110>
							{
								xYieldPending = pdTRUE;
 1004380:	00800044 	movi	r2,1
 1004384:	d0a6c315 	stw	r2,-25844(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 1004388:	e0bfff17 	ldw	r2,-4(fp)
 100438c:	10bfffc4 	addi	r2,r2,-1
 1004390:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 1004394:	e0bfff17 	ldw	r2,-4(fp)
 1004398:	103ff71e 	bne	r2,zero,1004378 <__alt_data_end+0xff004378>

						uxPendedTicks = 0;
 100439c:	d026c215 	stw	zero,-25848(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 10043a0:	d0a6c317 	ldw	r2,-25844(gp)
 10043a4:	10000326 	beq	r2,zero,10043b4 <xTaskResumeAll+0x13c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 10043a8:	00800044 	movi	r2,1
 10043ac:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 10043b0:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 10043b4:	10051b40 	call	10051b4 <vTaskExitCritical>

	return xAlreadyYielded;
 10043b8:	e0bffe17 	ldw	r2,-8(fp)
}
 10043bc:	e037883a 	mov	sp,fp
 10043c0:	dfc00117 	ldw	ra,4(sp)
 10043c4:	df000017 	ldw	fp,0(sp)
 10043c8:	dec00204 	addi	sp,sp,8
 10043cc:	f800283a 	ret

010043d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 10043d0:	defffe04 	addi	sp,sp,-8
 10043d4:	df000115 	stw	fp,4(sp)
 10043d8:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 10043dc:	d0a6bf17 	ldw	r2,-25860(gp)
 10043e0:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 10043e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10043e8:	e037883a 	mov	sp,fp
 10043ec:	df000017 	ldw	fp,0(sp)
 10043f0:	dec00104 	addi	sp,sp,4
 10043f4:	f800283a 	ret

010043f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 10043f8:	defffd04 	addi	sp,sp,-12
 10043fc:	df000215 	stw	fp,8(sp)
 1004400:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 1004404:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 1004408:	d0a6bf17 	ldw	r2,-25860(gp)
 100440c:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 1004410:	e0bfff17 	ldw	r2,-4(fp)
}
 1004414:	e037883a 	mov	sp,fp
 1004418:	df000017 	ldw	fp,0(sp)
 100441c:	dec00104 	addi	sp,sp,4
 1004420:	f800283a 	ret

01004424 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 1004424:	deffff04 	addi	sp,sp,-4
 1004428:	df000015 	stw	fp,0(sp)
 100442c:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 1004430:	d0a6be17 	ldw	r2,-25864(gp)
}
 1004434:	e037883a 	mov	sp,fp
 1004438:	df000017 	ldw	fp,0(sp)
 100443c:	dec00104 	addi	sp,sp,4
 1004440:	f800283a 	ret

01004444 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1004444:	defffd04 	addi	sp,sp,-12
 1004448:	df000215 	stw	fp,8(sp)
 100444c:	df000204 	addi	fp,sp,8
 1004450:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 1004454:	e0bfff17 	ldw	r2,-4(fp)
 1004458:	1000021e 	bne	r2,zero,1004464 <pcTaskGetName+0x20>
 100445c:	d0a6ba17 	ldw	r2,-25880(gp)
 1004460:	00000106 	br	1004468 <pcTaskGetName+0x24>
 1004464:	e0bfff17 	ldw	r2,-4(fp)
 1004468:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 100446c:	e0bffe17 	ldw	r2,-8(fp)
 1004470:	10800d04 	addi	r2,r2,52
}
 1004474:	e037883a 	mov	sp,fp
 1004478:	df000017 	ldw	fp,0(sp)
 100447c:	dec00104 	addi	sp,sp,4
 1004480:	f800283a 	ret

01004484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 1004484:	defff904 	addi	sp,sp,-28
 1004488:	dfc00615 	stw	ra,24(sp)
 100448c:	df000515 	stw	fp,20(sp)
 1004490:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 1004494:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1004498:	d0a6c817 	ldw	r2,-25824(gp)
 100449c:	1000581e 	bne	r2,zero,1004600 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 10044a0:	d0a6bf17 	ldw	r2,-25860(gp)
 10044a4:	10800044 	addi	r2,r2,1
 10044a8:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 10044ac:	e0bffc17 	ldw	r2,-16(fp)
 10044b0:	d0a6bf15 	stw	r2,-25860(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 10044b4:	e0bffc17 	ldw	r2,-16(fp)
 10044b8:	10000a1e 	bne	r2,zero,10044e4 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 10044bc:	d0a6bb17 	ldw	r2,-25876(gp)
 10044c0:	e0bffd15 	stw	r2,-12(fp)
 10044c4:	d0a6bc17 	ldw	r2,-25872(gp)
 10044c8:	d0a6bb15 	stw	r2,-25876(gp)
 10044cc:	e0bffd17 	ldw	r2,-12(fp)
 10044d0:	d0a6bc15 	stw	r2,-25872(gp)
 10044d4:	d0a6c417 	ldw	r2,-25840(gp)
 10044d8:	10800044 	addi	r2,r2,1
 10044dc:	d0a6c415 	stw	r2,-25840(gp)
 10044e0:	1004d680 	call	1004d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 10044e4:	d0a6c617 	ldw	r2,-25832(gp)
 10044e8:	e0fffc17 	ldw	r3,-16(fp)
 10044ec:	18803836 	bltu	r3,r2,10045d0 <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 10044f0:	d0a6bb17 	ldw	r2,-25876(gp)
 10044f4:	10800017 	ldw	r2,0(r2)
 10044f8:	1000031e 	bne	r2,zero,1004508 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10044fc:	00bfffc4 	movi	r2,-1
 1004500:	d0a6c615 	stw	r2,-25832(gp)
					break;
 1004504:	00003206 	br	10045d0 <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004508:	d0a6bb17 	ldw	r2,-25876(gp)
 100450c:	10800317 	ldw	r2,12(r2)
 1004510:	10800317 	ldw	r2,12(r2)
 1004514:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1004518:	e0bffe17 	ldw	r2,-8(fp)
 100451c:	10800117 	ldw	r2,4(r2)
 1004520:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 1004524:	e0fffc17 	ldw	r3,-16(fp)
 1004528:	e0bfff17 	ldw	r2,-4(fp)
 100452c:	1880032e 	bgeu	r3,r2,100453c <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 1004530:	e0bfff17 	ldw	r2,-4(fp)
 1004534:	d0a6c615 	stw	r2,-25832(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 1004538:	00002506 	br	10045d0 <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 100453c:	e0bffe17 	ldw	r2,-8(fp)
 1004540:	10800104 	addi	r2,r2,4
 1004544:	1009883a 	mov	r4,r2
 1004548:	1000ce40 	call	1000ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 100454c:	e0bffe17 	ldw	r2,-8(fp)
 1004550:	10800a17 	ldw	r2,40(r2)
 1004554:	10000426 	beq	r2,zero,1004568 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1004558:	e0bffe17 	ldw	r2,-8(fp)
 100455c:	10800604 	addi	r2,r2,24
 1004560:	1009883a 	mov	r4,r2
 1004564:	1000ce40 	call	1000ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 1004568:	e0bffe17 	ldw	r2,-8(fp)
 100456c:	10800b17 	ldw	r2,44(r2)
 1004570:	d0e6c017 	ldw	r3,-25856(gp)
 1004574:	1880032e 	bgeu	r3,r2,1004584 <xTaskIncrementTick+0x100>
 1004578:	e0bffe17 	ldw	r2,-8(fp)
 100457c:	10800b17 	ldw	r2,44(r2)
 1004580:	d0a6c015 	stw	r2,-25856(gp)
 1004584:	e0bffe17 	ldw	r2,-8(fp)
 1004588:	10800b17 	ldw	r2,44(r2)
 100458c:	10c00524 	muli	r3,r2,20
 1004590:	00806074 	movhi	r2,385
 1004594:	10bab404 	addi	r2,r2,-5424
 1004598:	1887883a 	add	r3,r3,r2
 100459c:	e0bffe17 	ldw	r2,-8(fp)
 10045a0:	10800104 	addi	r2,r2,4
 10045a4:	100b883a 	mov	r5,r2
 10045a8:	1809883a 	mov	r4,r3
 10045ac:	1000b800 	call	1000b80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 10045b0:	e0bffe17 	ldw	r2,-8(fp)
 10045b4:	10c00b17 	ldw	r3,44(r2)
 10045b8:	d0a6ba17 	ldw	r2,-25880(gp)
 10045bc:	10800b17 	ldw	r2,44(r2)
 10045c0:	18bfcb36 	bltu	r3,r2,10044f0 <__alt_data_end+0xff0044f0>
						{
							xSwitchRequired = pdTRUE;
 10045c4:	00800044 	movi	r2,1
 10045c8:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 10045cc:	003fc806 	br	10044f0 <__alt_data_end+0xff0044f0>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 10045d0:	d0a6ba17 	ldw	r2,-25880(gp)
 10045d4:	10c00b17 	ldw	r3,44(r2)
 10045d8:	00806074 	movhi	r2,385
 10045dc:	10bab404 	addi	r2,r2,-5424
 10045e0:	18c00524 	muli	r3,r3,20
 10045e4:	10c5883a 	add	r2,r2,r3
 10045e8:	10800017 	ldw	r2,0(r2)
 10045ec:	108000b0 	cmpltui	r2,r2,2
 10045f0:	1000061e 	bne	r2,zero,100460c <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 10045f4:	00800044 	movi	r2,1
 10045f8:	e0bffb15 	stw	r2,-20(fp)
 10045fc:	00000306 	br	100460c <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 1004600:	d0a6c217 	ldw	r2,-25848(gp)
 1004604:	10800044 	addi	r2,r2,1
 1004608:	d0a6c215 	stw	r2,-25848(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 100460c:	d0a6c317 	ldw	r2,-25844(gp)
 1004610:	10000226 	beq	r2,zero,100461c <xTaskIncrementTick+0x198>
		{
			xSwitchRequired = pdTRUE;
 1004614:	00800044 	movi	r2,1
 1004618:	e0bffb15 	stw	r2,-20(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 100461c:	e0bffb17 	ldw	r2,-20(fp)
}
 1004620:	e037883a 	mov	sp,fp
 1004624:	dfc00117 	ldw	ra,4(sp)
 1004628:	df000017 	ldw	fp,0(sp)
 100462c:	dec00204 	addi	sp,sp,8
 1004630:	f800283a 	ret

01004634 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 1004634:	defffd04 	addi	sp,sp,-12
 1004638:	df000215 	stw	fp,8(sp)
 100463c:	df000204 	addi	fp,sp,8
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 1004640:	d0a6c817 	ldw	r2,-25824(gp)
 1004644:	10000326 	beq	r2,zero,1004654 <vTaskSwitchContext+0x20>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 1004648:	00800044 	movi	r2,1
 100464c:	d0a6c315 	stw	r2,-25844(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 1004650:	00002906 	br	10046f8 <vTaskSwitchContext+0xc4>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 1004654:	d026c315 	stw	zero,-25844(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004658:	d0a6c017 	ldw	r2,-25856(gp)
 100465c:	e0bffe15 	stw	r2,-8(fp)
 1004660:	00000306 	br	1004670 <vTaskSwitchContext+0x3c>
 1004664:	e0bffe17 	ldw	r2,-8(fp)
 1004668:	10bfffc4 	addi	r2,r2,-1
 100466c:	e0bffe15 	stw	r2,-8(fp)
 1004670:	00806074 	movhi	r2,385
 1004674:	10bab404 	addi	r2,r2,-5424
 1004678:	e0fffe17 	ldw	r3,-8(fp)
 100467c:	18c00524 	muli	r3,r3,20
 1004680:	10c5883a 	add	r2,r2,r3
 1004684:	10800017 	ldw	r2,0(r2)
 1004688:	103ff626 	beq	r2,zero,1004664 <__alt_data_end+0xff004664>
 100468c:	e0bffe17 	ldw	r2,-8(fp)
 1004690:	10c00524 	muli	r3,r2,20
 1004694:	00806074 	movhi	r2,385
 1004698:	10bab404 	addi	r2,r2,-5424
 100469c:	1885883a 	add	r2,r3,r2
 10046a0:	e0bfff15 	stw	r2,-4(fp)
 10046a4:	e0bfff17 	ldw	r2,-4(fp)
 10046a8:	10800117 	ldw	r2,4(r2)
 10046ac:	10c00117 	ldw	r3,4(r2)
 10046b0:	e0bfff17 	ldw	r2,-4(fp)
 10046b4:	10c00115 	stw	r3,4(r2)
 10046b8:	e0bfff17 	ldw	r2,-4(fp)
 10046bc:	10c00117 	ldw	r3,4(r2)
 10046c0:	e0bfff17 	ldw	r2,-4(fp)
 10046c4:	10800204 	addi	r2,r2,8
 10046c8:	1880051e 	bne	r3,r2,10046e0 <vTaskSwitchContext+0xac>
 10046cc:	e0bfff17 	ldw	r2,-4(fp)
 10046d0:	10800117 	ldw	r2,4(r2)
 10046d4:	10c00117 	ldw	r3,4(r2)
 10046d8:	e0bfff17 	ldw	r2,-4(fp)
 10046dc:	10c00115 	stw	r3,4(r2)
 10046e0:	e0bfff17 	ldw	r2,-4(fp)
 10046e4:	10800117 	ldw	r2,4(r2)
 10046e8:	10800317 	ldw	r2,12(r2)
 10046ec:	d0a6ba15 	stw	r2,-25880(gp)
 10046f0:	e0bffe17 	ldw	r2,-8(fp)
 10046f4:	d0a6c015 	stw	r2,-25856(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 10046f8:	0001883a 	nop
 10046fc:	e037883a 	mov	sp,fp
 1004700:	df000017 	ldw	fp,0(sp)
 1004704:	dec00104 	addi	sp,sp,4
 1004708:	f800283a 	ret

0100470c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 100470c:	defffc04 	addi	sp,sp,-16
 1004710:	dfc00315 	stw	ra,12(sp)
 1004714:	df000215 	stw	fp,8(sp)
 1004718:	df000204 	addi	fp,sp,8
 100471c:	e13ffe15 	stw	r4,-8(fp)
 1004720:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004724:	d0a6ba17 	ldw	r2,-25880(gp)
 1004728:	10800604 	addi	r2,r2,24
 100472c:	100b883a 	mov	r5,r2
 1004730:	e13ffe17 	ldw	r4,-8(fp)
 1004734:	1000c0c0 	call	1000c0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1004738:	01400044 	movi	r5,1
 100473c:	e13fff17 	ldw	r4,-4(fp)
 1004740:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>
}
 1004744:	0001883a 	nop
 1004748:	e037883a 	mov	sp,fp
 100474c:	dfc00117 	ldw	ra,4(sp)
 1004750:	df000017 	ldw	fp,0(sp)
 1004754:	dec00204 	addi	sp,sp,8
 1004758:	f800283a 	ret

0100475c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 100475c:	defffb04 	addi	sp,sp,-20
 1004760:	dfc00415 	stw	ra,16(sp)
 1004764:	df000315 	stw	fp,12(sp)
 1004768:	df000304 	addi	fp,sp,12
 100476c:	e13ffd15 	stw	r4,-12(fp)
 1004770:	e17ffe15 	stw	r5,-8(fp)
 1004774:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1004778:	d0a6ba17 	ldw	r2,-25880(gp)
 100477c:	e0fffe17 	ldw	r3,-8(fp)
 1004780:	18e00034 	orhi	r3,r3,32768
 1004784:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1004788:	d0a6ba17 	ldw	r2,-25880(gp)
 100478c:	10800604 	addi	r2,r2,24
 1004790:	100b883a 	mov	r5,r2
 1004794:	e13ffd17 	ldw	r4,-12(fp)
 1004798:	1000b800 	call	1000b80 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 100479c:	01400044 	movi	r5,1
 10047a0:	e13fff17 	ldw	r4,-4(fp)
 10047a4:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>
}
 10047a8:	0001883a 	nop
 10047ac:	e037883a 	mov	sp,fp
 10047b0:	dfc00117 	ldw	ra,4(sp)
 10047b4:	df000017 	ldw	fp,0(sp)
 10047b8:	dec00204 	addi	sp,sp,8
 10047bc:	f800283a 	ret

010047c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 10047c0:	defffb04 	addi	sp,sp,-20
 10047c4:	dfc00415 	stw	ra,16(sp)
 10047c8:	df000315 	stw	fp,12(sp)
 10047cc:	df000304 	addi	fp,sp,12
 10047d0:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10047d4:	e0bfff17 	ldw	r2,-4(fp)
 10047d8:	10800317 	ldw	r2,12(r2)
 10047dc:	10800317 	ldw	r2,12(r2)
 10047e0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 10047e4:	e0bffe17 	ldw	r2,-8(fp)
 10047e8:	10800604 	addi	r2,r2,24
 10047ec:	1009883a 	mov	r4,r2
 10047f0:	1000ce40 	call	1000ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 10047f4:	d0a6c817 	ldw	r2,-25824(gp)
 10047f8:	1000171e 	bne	r2,zero,1004858 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 10047fc:	e0bffe17 	ldw	r2,-8(fp)
 1004800:	10800104 	addi	r2,r2,4
 1004804:	1009883a 	mov	r4,r2
 1004808:	1000ce40 	call	1000ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 100480c:	e0bffe17 	ldw	r2,-8(fp)
 1004810:	10800b17 	ldw	r2,44(r2)
 1004814:	d0e6c017 	ldw	r3,-25856(gp)
 1004818:	1880032e 	bgeu	r3,r2,1004828 <xTaskRemoveFromEventList+0x68>
 100481c:	e0bffe17 	ldw	r2,-8(fp)
 1004820:	10800b17 	ldw	r2,44(r2)
 1004824:	d0a6c015 	stw	r2,-25856(gp)
 1004828:	e0bffe17 	ldw	r2,-8(fp)
 100482c:	10800b17 	ldw	r2,44(r2)
 1004830:	10c00524 	muli	r3,r2,20
 1004834:	00806074 	movhi	r2,385
 1004838:	10bab404 	addi	r2,r2,-5424
 100483c:	1887883a 	add	r3,r3,r2
 1004840:	e0bffe17 	ldw	r2,-8(fp)
 1004844:	10800104 	addi	r2,r2,4
 1004848:	100b883a 	mov	r5,r2
 100484c:	1809883a 	mov	r4,r3
 1004850:	1000b800 	call	1000b80 <vListInsertEnd>
 1004854:	00000606 	br	1004870 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 1004858:	e0bffe17 	ldw	r2,-8(fp)
 100485c:	10800604 	addi	r2,r2,24
 1004860:	100b883a 	mov	r5,r2
 1004864:	01006074 	movhi	r4,385
 1004868:	213ad704 	addi	r4,r4,-5284
 100486c:	1000b800 	call	1000b80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004870:	e0bffe17 	ldw	r2,-8(fp)
 1004874:	10800b17 	ldw	r2,44(r2)
 1004878:	d0e6ba17 	ldw	r3,-25880(gp)
 100487c:	18c00b17 	ldw	r3,44(r3)
 1004880:	1880052e 	bgeu	r3,r2,1004898 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 1004884:	00800044 	movi	r2,1
 1004888:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 100488c:	00800044 	movi	r2,1
 1004890:	d0a6c315 	stw	r2,-25844(gp)
 1004894:	00000106 	br	100489c <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 1004898:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 100489c:	e0bffd17 	ldw	r2,-12(fp)
}
 10048a0:	e037883a 	mov	sp,fp
 10048a4:	dfc00117 	ldw	ra,4(sp)
 10048a8:	df000017 	ldw	fp,0(sp)
 10048ac:	dec00204 	addi	sp,sp,8
 10048b0:	f800283a 	ret

010048b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 10048b4:	defffb04 	addi	sp,sp,-20
 10048b8:	dfc00415 	stw	ra,16(sp)
 10048bc:	df000315 	stw	fp,12(sp)
 10048c0:	df000304 	addi	fp,sp,12
 10048c4:	e13ffe15 	stw	r4,-8(fp)
 10048c8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 10048cc:	e0bfff17 	ldw	r2,-4(fp)
 10048d0:	10e00034 	orhi	r3,r2,32768
 10048d4:	e0bffe17 	ldw	r2,-8(fp)
 10048d8:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 10048dc:	e0bffe17 	ldw	r2,-8(fp)
 10048e0:	10800317 	ldw	r2,12(r2)
 10048e4:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 10048e8:	e13ffe17 	ldw	r4,-8(fp)
 10048ec:	1000ce40 	call	1000ce4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 10048f0:	e0bffd17 	ldw	r2,-12(fp)
 10048f4:	10800104 	addi	r2,r2,4
 10048f8:	1009883a 	mov	r4,r2
 10048fc:	1000ce40 	call	1000ce4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1004900:	e0bffd17 	ldw	r2,-12(fp)
 1004904:	10800b17 	ldw	r2,44(r2)
 1004908:	d0e6c017 	ldw	r3,-25856(gp)
 100490c:	1880032e 	bgeu	r3,r2,100491c <vTaskRemoveFromUnorderedEventList+0x68>
 1004910:	e0bffd17 	ldw	r2,-12(fp)
 1004914:	10800b17 	ldw	r2,44(r2)
 1004918:	d0a6c015 	stw	r2,-25856(gp)
 100491c:	e0bffd17 	ldw	r2,-12(fp)
 1004920:	10800b17 	ldw	r2,44(r2)
 1004924:	10c00524 	muli	r3,r2,20
 1004928:	00806074 	movhi	r2,385
 100492c:	10bab404 	addi	r2,r2,-5424
 1004930:	1887883a 	add	r3,r3,r2
 1004934:	e0bffd17 	ldw	r2,-12(fp)
 1004938:	10800104 	addi	r2,r2,4
 100493c:	100b883a 	mov	r5,r2
 1004940:	1809883a 	mov	r4,r3
 1004944:	1000b800 	call	1000b80 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1004948:	e0bffd17 	ldw	r2,-12(fp)
 100494c:	10800b17 	ldw	r2,44(r2)
 1004950:	d0e6ba17 	ldw	r3,-25880(gp)
 1004954:	18c00b17 	ldw	r3,44(r3)
 1004958:	1880022e 	bgeu	r3,r2,1004964 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 100495c:	00800044 	movi	r2,1
 1004960:	d0a6c315 	stw	r2,-25844(gp)
	}
}
 1004964:	0001883a 	nop
 1004968:	e037883a 	mov	sp,fp
 100496c:	dfc00117 	ldw	ra,4(sp)
 1004970:	df000017 	ldw	fp,0(sp)
 1004974:	dec00204 	addi	sp,sp,8
 1004978:	f800283a 	ret

0100497c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 100497c:	defffd04 	addi	sp,sp,-12
 1004980:	dfc00215 	stw	ra,8(sp)
 1004984:	df000115 	stw	fp,4(sp)
 1004988:	df000104 	addi	fp,sp,4
 100498c:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 1004990:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 1004994:	d0e6c417 	ldw	r3,-25840(gp)
 1004998:	e0bfff17 	ldw	r2,-4(fp)
 100499c:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 10049a0:	d0e6bf17 	ldw	r3,-25860(gp)
 10049a4:	e0bfff17 	ldw	r2,-4(fp)
 10049a8:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 10049ac:	10051b40 	call	10051b4 <vTaskExitCritical>
}
 10049b0:	0001883a 	nop
 10049b4:	e037883a 	mov	sp,fp
 10049b8:	dfc00117 	ldw	ra,4(sp)
 10049bc:	df000017 	ldw	fp,0(sp)
 10049c0:	dec00204 	addi	sp,sp,8
 10049c4:	f800283a 	ret

010049c8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 10049c8:	defffe04 	addi	sp,sp,-8
 10049cc:	df000115 	stw	fp,4(sp)
 10049d0:	df000104 	addi	fp,sp,4
 10049d4:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 10049d8:	d0e6c417 	ldw	r3,-25840(gp)
 10049dc:	e0bfff17 	ldw	r2,-4(fp)
 10049e0:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 10049e4:	d0e6bf17 	ldw	r3,-25860(gp)
 10049e8:	e0bfff17 	ldw	r2,-4(fp)
 10049ec:	10c00115 	stw	r3,4(r2)
}
 10049f0:	0001883a 	nop
 10049f4:	e037883a 	mov	sp,fp
 10049f8:	df000017 	ldw	fp,0(sp)
 10049fc:	dec00104 	addi	sp,sp,4
 1004a00:	f800283a 	ret

01004a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1004a04:	defff904 	addi	sp,sp,-28
 1004a08:	dfc00615 	stw	ra,24(sp)
 1004a0c:	df000515 	stw	fp,20(sp)
 1004a10:	df000504 	addi	fp,sp,20
 1004a14:	e13ffe15 	stw	r4,-8(fp)
 1004a18:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 1004a1c:	10051600 	call	1005160 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 1004a20:	d0a6bf17 	ldw	r2,-25860(gp)
 1004a24:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 1004a28:	e0bffe17 	ldw	r2,-8(fp)
 1004a2c:	10800117 	ldw	r2,4(r2)
 1004a30:	e0fffc17 	ldw	r3,-16(fp)
 1004a34:	1885c83a 	sub	r2,r3,r2
 1004a38:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 1004a3c:	e0bfff17 	ldw	r2,-4(fp)
 1004a40:	10800017 	ldw	r2,0(r2)
 1004a44:	10bfffd8 	cmpnei	r2,r2,-1
 1004a48:	1000021e 	bne	r2,zero,1004a54 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 1004a4c:	e03ffb15 	stw	zero,-20(fp)
 1004a50:	00001d06 	br	1004ac8 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 1004a54:	e0bffe17 	ldw	r2,-8(fp)
 1004a58:	10c00017 	ldw	r3,0(r2)
 1004a5c:	d0a6c417 	ldw	r2,-25840(gp)
 1004a60:	18800726 	beq	r3,r2,1004a80 <xTaskCheckForTimeOut+0x7c>
 1004a64:	e0bffe17 	ldw	r2,-8(fp)
 1004a68:	10800117 	ldw	r2,4(r2)
 1004a6c:	e0fffc17 	ldw	r3,-16(fp)
 1004a70:	18800336 	bltu	r3,r2,1004a80 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 1004a74:	00800044 	movi	r2,1
 1004a78:	e0bffb15 	stw	r2,-20(fp)
 1004a7c:	00001206 	br	1004ac8 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 1004a80:	e0bfff17 	ldw	r2,-4(fp)
 1004a84:	10800017 	ldw	r2,0(r2)
 1004a88:	e0fffd17 	ldw	r3,-12(fp)
 1004a8c:	18800a2e 	bgeu	r3,r2,1004ab8 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 1004a90:	e0bfff17 	ldw	r2,-4(fp)
 1004a94:	10c00017 	ldw	r3,0(r2)
 1004a98:	e0bffd17 	ldw	r2,-12(fp)
 1004a9c:	1887c83a 	sub	r3,r3,r2
 1004aa0:	e0bfff17 	ldw	r2,-4(fp)
 1004aa4:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 1004aa8:	e13ffe17 	ldw	r4,-8(fp)
 1004aac:	10049c80 	call	10049c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 1004ab0:	e03ffb15 	stw	zero,-20(fp)
 1004ab4:	00000406 	br	1004ac8 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 1004ab8:	e0bfff17 	ldw	r2,-4(fp)
 1004abc:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 1004ac0:	00800044 	movi	r2,1
 1004ac4:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 1004ac8:	10051b40 	call	10051b4 <vTaskExitCritical>

	return xReturn;
 1004acc:	e0bffb17 	ldw	r2,-20(fp)
}
 1004ad0:	e037883a 	mov	sp,fp
 1004ad4:	dfc00117 	ldw	ra,4(sp)
 1004ad8:	df000017 	ldw	fp,0(sp)
 1004adc:	dec00204 	addi	sp,sp,8
 1004ae0:	f800283a 	ret

01004ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1004ae4:	deffff04 	addi	sp,sp,-4
 1004ae8:	df000015 	stw	fp,0(sp)
 1004aec:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1004af0:	00800044 	movi	r2,1
 1004af4:	d0a6c315 	stw	r2,-25844(gp)
}
 1004af8:	0001883a 	nop
 1004afc:	e037883a 	mov	sp,fp
 1004b00:	df000017 	ldw	fp,0(sp)
 1004b04:	dec00104 	addi	sp,sp,4
 1004b08:	f800283a 	ret

01004b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 1004b0c:	defffd04 	addi	sp,sp,-12
 1004b10:	dfc00215 	stw	ra,8(sp)
 1004b14:	df000115 	stw	fp,4(sp)
 1004b18:	df000104 	addi	fp,sp,4
 1004b1c:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 1004b20:	1004be00 	call	1004be0 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 1004b24:	003ffe06 	br	1004b20 <__alt_data_end+0xff004b20>

01004b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 1004b28:	defffd04 	addi	sp,sp,-12
 1004b2c:	dfc00215 	stw	ra,8(sp)
 1004b30:	df000115 	stw	fp,4(sp)
 1004b34:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004b38:	e03fff15 	stw	zero,-4(fp)
 1004b3c:	00000a06 	br	1004b68 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 1004b40:	e0bfff17 	ldw	r2,-4(fp)
 1004b44:	10c00524 	muli	r3,r2,20
 1004b48:	00806074 	movhi	r2,385
 1004b4c:	10bab404 	addi	r2,r2,-5424
 1004b50:	1885883a 	add	r2,r3,r2
 1004b54:	1009883a 	mov	r4,r2
 1004b58:	1000aec0 	call	1000aec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1004b5c:	e0bfff17 	ldw	r2,-4(fp)
 1004b60:	10800044 	addi	r2,r2,1
 1004b64:	e0bfff15 	stw	r2,-4(fp)
 1004b68:	e0bfff17 	ldw	r2,-4(fp)
 1004b6c:	10800170 	cmpltui	r2,r2,5
 1004b70:	103ff31e 	bne	r2,zero,1004b40 <__alt_data_end+0xff004b40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1004b74:	01006074 	movhi	r4,385
 1004b78:	213acd04 	addi	r4,r4,-5324
 1004b7c:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 1004b80:	01006074 	movhi	r4,385
 1004b84:	213ad204 	addi	r4,r4,-5304
 1004b88:	1000aec0 	call	1000aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 1004b8c:	01006074 	movhi	r4,385
 1004b90:	213ad704 	addi	r4,r4,-5284
 1004b94:	1000aec0 	call	1000aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 1004b98:	01006074 	movhi	r4,385
 1004b9c:	213adc04 	addi	r4,r4,-5264
 1004ba0:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 1004ba4:	01006074 	movhi	r4,385
 1004ba8:	213ae104 	addi	r4,r4,-5244
 1004bac:	1000aec0 	call	1000aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 1004bb0:	00806074 	movhi	r2,385
 1004bb4:	10bacd04 	addi	r2,r2,-5324
 1004bb8:	d0a6bb15 	stw	r2,-25876(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 1004bbc:	00806074 	movhi	r2,385
 1004bc0:	10bad204 	addi	r2,r2,-5304
 1004bc4:	d0a6bc15 	stw	r2,-25872(gp)
}
 1004bc8:	0001883a 	nop
 1004bcc:	e037883a 	mov	sp,fp
 1004bd0:	dfc00117 	ldw	ra,4(sp)
 1004bd4:	df000017 	ldw	fp,0(sp)
 1004bd8:	dec00204 	addi	sp,sp,8
 1004bdc:	f800283a 	ret

01004be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 1004be0:	defffd04 	addi	sp,sp,-12
 1004be4:	dfc00215 	stw	ra,8(sp)
 1004be8:	df000115 	stw	fp,4(sp)
 1004bec:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004bf0:	00001306 	br	1004c40 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 1004bf4:	10051600 	call	1005160 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004bf8:	00806074 	movhi	r2,385
 1004bfc:	10badc04 	addi	r2,r2,-5264
 1004c00:	10800317 	ldw	r2,12(r2)
 1004c04:	10800317 	ldw	r2,12(r2)
 1004c08:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1004c0c:	e0bfff17 	ldw	r2,-4(fp)
 1004c10:	10800104 	addi	r2,r2,4
 1004c14:	1009883a 	mov	r4,r2
 1004c18:	1000ce40 	call	1000ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 1004c1c:	d0a6be17 	ldw	r2,-25864(gp)
 1004c20:	10bfffc4 	addi	r2,r2,-1
 1004c24:	d0a6be15 	stw	r2,-25864(gp)
				--uxDeletedTasksWaitingCleanUp;
 1004c28:	d0a6bd17 	ldw	r2,-25868(gp)
 1004c2c:	10bfffc4 	addi	r2,r2,-1
 1004c30:	d0a6bd15 	stw	r2,-25868(gp)
			}
			taskEXIT_CRITICAL();
 1004c34:	10051b40 	call	10051b4 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 1004c38:	e13fff17 	ldw	r4,-4(fp)
 1004c3c:	1004d240 	call	1004d24 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 1004c40:	d0a6bd17 	ldw	r2,-25868(gp)
 1004c44:	103feb1e 	bne	r2,zero,1004bf4 <__alt_data_end+0xff004bf4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1004c48:	0001883a 	nop
 1004c4c:	e037883a 	mov	sp,fp
 1004c50:	dfc00117 	ldw	ra,4(sp)
 1004c54:	df000017 	ldw	fp,0(sp)
 1004c58:	dec00204 	addi	sp,sp,8
 1004c5c:	f800283a 	ret

01004c60 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 1004c60:	defffd04 	addi	sp,sp,-12
 1004c64:	df000215 	stw	fp,8(sp)
 1004c68:	df000204 	addi	fp,sp,8
 1004c6c:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 1004c70:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004c74:	00000606 	br	1004c90 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 1004c78:	e0bfff17 	ldw	r2,-4(fp)
 1004c7c:	10800044 	addi	r2,r2,1
 1004c80:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 1004c84:	e0bffe17 	ldw	r2,-8(fp)
 1004c88:	10800044 	addi	r2,r2,1
 1004c8c:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 1004c90:	e0bfff17 	ldw	r2,-4(fp)
 1004c94:	10800003 	ldbu	r2,0(r2)
 1004c98:	10803fcc 	andi	r2,r2,255
 1004c9c:	10802960 	cmpeqi	r2,r2,165
 1004ca0:	103ff51e 	bne	r2,zero,1004c78 <__alt_data_end+0xff004c78>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 1004ca4:	e0bffe17 	ldw	r2,-8(fp)
 1004ca8:	1004d0ba 	srli	r2,r2,2
 1004cac:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 1004cb0:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004cb4:	e037883a 	mov	sp,fp
 1004cb8:	df000017 	ldw	fp,0(sp)
 1004cbc:	dec00104 	addi	sp,sp,4
 1004cc0:	f800283a 	ret

01004cc4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1004cc4:	defffa04 	addi	sp,sp,-24
 1004cc8:	dfc00515 	stw	ra,20(sp)
 1004ccc:	df000415 	stw	fp,16(sp)
 1004cd0:	df000404 	addi	fp,sp,16
 1004cd4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1004cd8:	e0bfff17 	ldw	r2,-4(fp)
 1004cdc:	1000021e 	bne	r2,zero,1004ce8 <uxTaskGetStackHighWaterMark+0x24>
 1004ce0:	d0a6ba17 	ldw	r2,-25880(gp)
 1004ce4:	00000106 	br	1004cec <uxTaskGetStackHighWaterMark+0x28>
 1004ce8:	e0bfff17 	ldw	r2,-4(fp)
 1004cec:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 1004cf0:	e0bffc17 	ldw	r2,-16(fp)
 1004cf4:	10800c17 	ldw	r2,48(r2)
 1004cf8:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1004cfc:	e13ffd17 	ldw	r4,-12(fp)
 1004d00:	1004c600 	call	1004c60 <prvTaskCheckFreeStackSpace>
 1004d04:	10bfffcc 	andi	r2,r2,65535
 1004d08:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1004d0c:	e0bffe17 	ldw	r2,-8(fp)
	}
 1004d10:	e037883a 	mov	sp,fp
 1004d14:	dfc00117 	ldw	ra,4(sp)
 1004d18:	df000017 	ldw	fp,0(sp)
 1004d1c:	dec00204 	addi	sp,sp,8
 1004d20:	f800283a 	ret

01004d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 1004d24:	defffd04 	addi	sp,sp,-12
 1004d28:	dfc00215 	stw	ra,8(sp)
 1004d2c:	df000115 	stw	fp,4(sp)
 1004d30:	df000104 	addi	fp,sp,4
 1004d34:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1004d38:	e0bfff17 	ldw	r2,-4(fp)
 1004d3c:	10800c17 	ldw	r2,48(r2)
 1004d40:	1009883a 	mov	r4,r2
 1004d44:	10011840 	call	1001184 <vPortFree>
			vPortFree( pxTCB );
 1004d48:	e13fff17 	ldw	r4,-4(fp)
 1004d4c:	10011840 	call	1001184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1004d50:	0001883a 	nop
 1004d54:	e037883a 	mov	sp,fp
 1004d58:	dfc00117 	ldw	ra,4(sp)
 1004d5c:	df000017 	ldw	fp,0(sp)
 1004d60:	dec00204 	addi	sp,sp,8
 1004d64:	f800283a 	ret

01004d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 1004d68:	defffe04 	addi	sp,sp,-8
 1004d6c:	df000115 	stw	fp,4(sp)
 1004d70:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 1004d74:	d0a6bb17 	ldw	r2,-25876(gp)
 1004d78:	10800017 	ldw	r2,0(r2)
 1004d7c:	1000031e 	bne	r2,zero,1004d8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 1004d80:	00bfffc4 	movi	r2,-1
 1004d84:	d0a6c615 	stw	r2,-25832(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 1004d88:	00000706 	br	1004da8 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1004d8c:	d0a6bb17 	ldw	r2,-25876(gp)
 1004d90:	10800317 	ldw	r2,12(r2)
 1004d94:	10800317 	ldw	r2,12(r2)
 1004d98:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1004d9c:	e0bfff17 	ldw	r2,-4(fp)
 1004da0:	10800117 	ldw	r2,4(r2)
 1004da4:	d0a6c615 	stw	r2,-25832(gp)
	}
}
 1004da8:	0001883a 	nop
 1004dac:	e037883a 	mov	sp,fp
 1004db0:	df000017 	ldw	fp,0(sp)
 1004db4:	dec00104 	addi	sp,sp,4
 1004db8:	f800283a 	ret

01004dbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 1004dbc:	defffe04 	addi	sp,sp,-8
 1004dc0:	df000115 	stw	fp,4(sp)
 1004dc4:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1004dc8:	d0a6ba17 	ldw	r2,-25880(gp)
 1004dcc:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1004dd0:	e0bfff17 	ldw	r2,-4(fp)
	}
 1004dd4:	e037883a 	mov	sp,fp
 1004dd8:	df000017 	ldw	fp,0(sp)
 1004ddc:	dec00104 	addi	sp,sp,4
 1004de0:	f800283a 	ret

01004de4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1004de4:	defffb04 	addi	sp,sp,-20
 1004de8:	dfc00415 	stw	ra,16(sp)
 1004dec:	df000315 	stw	fp,12(sp)
 1004df0:	df000304 	addi	fp,sp,12
 1004df4:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1004e00:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1004e04:	e0bfff17 	ldw	r2,-4(fp)
 1004e08:	10004026 	beq	r2,zero,1004f0c <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1004e0c:	e0bffe17 	ldw	r2,-8(fp)
 1004e10:	10c00b17 	ldw	r3,44(r2)
 1004e14:	d0a6ba17 	ldw	r2,-25880(gp)
 1004e18:	10800b17 	ldw	r2,44(r2)
 1004e1c:	1880342e 	bgeu	r3,r2,1004ef0 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1004e20:	e0bffe17 	ldw	r2,-8(fp)
 1004e24:	10800617 	ldw	r2,24(r2)
 1004e28:	10000616 	blt	r2,zero,1004e44 <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1004e2c:	d0a6ba17 	ldw	r2,-25880(gp)
 1004e30:	10800b17 	ldw	r2,44(r2)
 1004e34:	00c00144 	movi	r3,5
 1004e38:	1887c83a 	sub	r3,r3,r2
 1004e3c:	e0bffe17 	ldw	r2,-8(fp)
 1004e40:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1004e44:	e0bffe17 	ldw	r2,-8(fp)
 1004e48:	10c00517 	ldw	r3,20(r2)
 1004e4c:	e0bffe17 	ldw	r2,-8(fp)
 1004e50:	10800b17 	ldw	r2,44(r2)
 1004e54:	11000524 	muli	r4,r2,20
 1004e58:	00806074 	movhi	r2,385
 1004e5c:	10bab404 	addi	r2,r2,-5424
 1004e60:	2085883a 	add	r2,r4,r2
 1004e64:	18801b1e 	bne	r3,r2,1004ed4 <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1004e68:	e0bffe17 	ldw	r2,-8(fp)
 1004e6c:	10800104 	addi	r2,r2,4
 1004e70:	1009883a 	mov	r4,r2
 1004e74:	1000ce40 	call	1000ce4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004e78:	d0a6ba17 	ldw	r2,-25880(gp)
 1004e7c:	10c00b17 	ldw	r3,44(r2)
 1004e80:	e0bffe17 	ldw	r2,-8(fp)
 1004e84:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1004e88:	e0bffe17 	ldw	r2,-8(fp)
 1004e8c:	10800b17 	ldw	r2,44(r2)
 1004e90:	d0e6c017 	ldw	r3,-25856(gp)
 1004e94:	1880032e 	bgeu	r3,r2,1004ea4 <xTaskPriorityInherit+0xc0>
 1004e98:	e0bffe17 	ldw	r2,-8(fp)
 1004e9c:	10800b17 	ldw	r2,44(r2)
 1004ea0:	d0a6c015 	stw	r2,-25856(gp)
 1004ea4:	e0bffe17 	ldw	r2,-8(fp)
 1004ea8:	10800b17 	ldw	r2,44(r2)
 1004eac:	10c00524 	muli	r3,r2,20
 1004eb0:	00806074 	movhi	r2,385
 1004eb4:	10bab404 	addi	r2,r2,-5424
 1004eb8:	1887883a 	add	r3,r3,r2
 1004ebc:	e0bffe17 	ldw	r2,-8(fp)
 1004ec0:	10800104 	addi	r2,r2,4
 1004ec4:	100b883a 	mov	r5,r2
 1004ec8:	1809883a 	mov	r4,r3
 1004ecc:	1000b800 	call	1000b80 <vListInsertEnd>
 1004ed0:	00000406 	br	1004ee4 <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1004ed4:	d0a6ba17 	ldw	r2,-25880(gp)
 1004ed8:	10c00b17 	ldw	r3,44(r2)
 1004edc:	e0bffe17 	ldw	r2,-8(fp)
 1004ee0:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1004ee4:	00800044 	movi	r2,1
 1004ee8:	e0bffd15 	stw	r2,-12(fp)
 1004eec:	00000706 	br	1004f0c <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1004ef0:	e0bffe17 	ldw	r2,-8(fp)
 1004ef4:	10c01017 	ldw	r3,64(r2)
 1004ef8:	d0a6ba17 	ldw	r2,-25880(gp)
 1004efc:	10800b17 	ldw	r2,44(r2)
 1004f00:	1880022e 	bgeu	r3,r2,1004f0c <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1004f04:	00800044 	movi	r2,1
 1004f08:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1004f0c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1004f10:	e037883a 	mov	sp,fp
 1004f14:	dfc00117 	ldw	ra,4(sp)
 1004f18:	df000017 	ldw	fp,0(sp)
 1004f1c:	dec00204 	addi	sp,sp,8
 1004f20:	f800283a 	ret

01004f24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1004f24:	defffb04 	addi	sp,sp,-20
 1004f28:	dfc00415 	stw	ra,16(sp)
 1004f2c:	df000315 	stw	fp,12(sp)
 1004f30:	df000304 	addi	fp,sp,12
 1004f34:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1004f38:	e0bfff17 	ldw	r2,-4(fp)
 1004f3c:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1004f40:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1004f44:	e0bfff17 	ldw	r2,-4(fp)
 1004f48:	10002f26 	beq	r2,zero,1005008 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 1004f4c:	e0bffe17 	ldw	r2,-8(fp)
 1004f50:	10801117 	ldw	r2,68(r2)
 1004f54:	10ffffc4 	addi	r3,r2,-1
 1004f58:	e0bffe17 	ldw	r2,-8(fp)
 1004f5c:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1004f60:	e0bffe17 	ldw	r2,-8(fp)
 1004f64:	10c00b17 	ldw	r3,44(r2)
 1004f68:	e0bffe17 	ldw	r2,-8(fp)
 1004f6c:	10801017 	ldw	r2,64(r2)
 1004f70:	18802526 	beq	r3,r2,1005008 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1004f74:	e0bffe17 	ldw	r2,-8(fp)
 1004f78:	10801117 	ldw	r2,68(r2)
 1004f7c:	1000221e 	bne	r2,zero,1005008 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1004f80:	e0bffe17 	ldw	r2,-8(fp)
 1004f84:	10800104 	addi	r2,r2,4
 1004f88:	1009883a 	mov	r4,r2
 1004f8c:	1000ce40 	call	1000ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 1004f90:	e0bffe17 	ldw	r2,-8(fp)
 1004f94:	10c01017 	ldw	r3,64(r2)
 1004f98:	e0bffe17 	ldw	r2,-8(fp)
 1004f9c:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1004fa0:	e0bffe17 	ldw	r2,-8(fp)
 1004fa4:	10800b17 	ldw	r2,44(r2)
 1004fa8:	00c00144 	movi	r3,5
 1004fac:	1887c83a 	sub	r3,r3,r2
 1004fb0:	e0bffe17 	ldw	r2,-8(fp)
 1004fb4:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 1004fb8:	e0bffe17 	ldw	r2,-8(fp)
 1004fbc:	10800b17 	ldw	r2,44(r2)
 1004fc0:	d0e6c017 	ldw	r3,-25856(gp)
 1004fc4:	1880032e 	bgeu	r3,r2,1004fd4 <xTaskPriorityDisinherit+0xb0>
 1004fc8:	e0bffe17 	ldw	r2,-8(fp)
 1004fcc:	10800b17 	ldw	r2,44(r2)
 1004fd0:	d0a6c015 	stw	r2,-25856(gp)
 1004fd4:	e0bffe17 	ldw	r2,-8(fp)
 1004fd8:	10800b17 	ldw	r2,44(r2)
 1004fdc:	10c00524 	muli	r3,r2,20
 1004fe0:	00806074 	movhi	r2,385
 1004fe4:	10bab404 	addi	r2,r2,-5424
 1004fe8:	1887883a 	add	r3,r3,r2
 1004fec:	e0bffe17 	ldw	r2,-8(fp)
 1004ff0:	10800104 	addi	r2,r2,4
 1004ff4:	100b883a 	mov	r5,r2
 1004ff8:	1809883a 	mov	r4,r3
 1004ffc:	1000b800 	call	1000b80 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1005000:	00800044 	movi	r2,1
 1005004:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1005008:	e0bffd17 	ldw	r2,-12(fp)
	}
 100500c:	e037883a 	mov	sp,fp
 1005010:	dfc00117 	ldw	ra,4(sp)
 1005014:	df000017 	ldw	fp,0(sp)
 1005018:	dec00204 	addi	sp,sp,8
 100501c:	f800283a 	ret

01005020 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1005020:	defff804 	addi	sp,sp,-32
 1005024:	dfc00715 	stw	ra,28(sp)
 1005028:	df000615 	stw	fp,24(sp)
 100502c:	df000604 	addi	fp,sp,24
 1005030:	e13ffe15 	stw	r4,-8(fp)
 1005034:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1005038:	e0bffe17 	ldw	r2,-8(fp)
 100503c:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1005040:	00800044 	movi	r2,1
 1005044:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1005048:	e0bffe17 	ldw	r2,-8(fp)
 100504c:	10003e26 	beq	r2,zero,1005148 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1005050:	e0bffb17 	ldw	r2,-20(fp)
 1005054:	10c01017 	ldw	r3,64(r2)
 1005058:	e0bfff17 	ldw	r2,-4(fp)
 100505c:	1880032e 	bgeu	r3,r2,100506c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1005060:	e0bfff17 	ldw	r2,-4(fp)
 1005064:	e0bffa15 	stw	r2,-24(fp)
 1005068:	00000306 	br	1005078 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 100506c:	e0bffb17 	ldw	r2,-20(fp)
 1005070:	10801017 	ldw	r2,64(r2)
 1005074:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1005078:	e0bffb17 	ldw	r2,-20(fp)
 100507c:	10c00b17 	ldw	r3,44(r2)
 1005080:	e0bffa17 	ldw	r2,-24(fp)
 1005084:	18803026 	beq	r3,r2,1005148 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1005088:	e0bffb17 	ldw	r2,-20(fp)
 100508c:	10c01117 	ldw	r3,68(r2)
 1005090:	e0bffc17 	ldw	r2,-16(fp)
 1005094:	18802c1e 	bne	r3,r2,1005148 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1005098:	e0bffb17 	ldw	r2,-20(fp)
 100509c:	10800b17 	ldw	r2,44(r2)
 10050a0:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 10050a4:	e0bffb17 	ldw	r2,-20(fp)
 10050a8:	e0fffa17 	ldw	r3,-24(fp)
 10050ac:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 10050b0:	e0bffb17 	ldw	r2,-20(fp)
 10050b4:	10800617 	ldw	r2,24(r2)
 10050b8:	10000516 	blt	r2,zero,10050d0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 10050bc:	00c00144 	movi	r3,5
 10050c0:	e0bffa17 	ldw	r2,-24(fp)
 10050c4:	1887c83a 	sub	r3,r3,r2
 10050c8:	e0bffb17 	ldw	r2,-20(fp)
 10050cc:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 10050d0:	e0bffb17 	ldw	r2,-20(fp)
 10050d4:	10c00517 	ldw	r3,20(r2)
 10050d8:	e0bffd17 	ldw	r2,-12(fp)
 10050dc:	11000524 	muli	r4,r2,20
 10050e0:	00806074 	movhi	r2,385
 10050e4:	10bab404 	addi	r2,r2,-5424
 10050e8:	2085883a 	add	r2,r4,r2
 10050ec:	1880161e 	bne	r3,r2,1005148 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 10050f0:	e0bffb17 	ldw	r2,-20(fp)
 10050f4:	10800104 	addi	r2,r2,4
 10050f8:	1009883a 	mov	r4,r2
 10050fc:	1000ce40 	call	1000ce4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1005100:	e0bffb17 	ldw	r2,-20(fp)
 1005104:	10800b17 	ldw	r2,44(r2)
 1005108:	d0e6c017 	ldw	r3,-25856(gp)
 100510c:	1880032e 	bgeu	r3,r2,100511c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1005110:	e0bffb17 	ldw	r2,-20(fp)
 1005114:	10800b17 	ldw	r2,44(r2)
 1005118:	d0a6c015 	stw	r2,-25856(gp)
 100511c:	e0bffb17 	ldw	r2,-20(fp)
 1005120:	10800b17 	ldw	r2,44(r2)
 1005124:	10c00524 	muli	r3,r2,20
 1005128:	00806074 	movhi	r2,385
 100512c:	10bab404 	addi	r2,r2,-5424
 1005130:	1887883a 	add	r3,r3,r2
 1005134:	e0bffb17 	ldw	r2,-20(fp)
 1005138:	10800104 	addi	r2,r2,4
 100513c:	100b883a 	mov	r5,r2
 1005140:	1809883a 	mov	r4,r3
 1005144:	1000b800 	call	1000b80 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005148:	0001883a 	nop
 100514c:	e037883a 	mov	sp,fp
 1005150:	dfc00117 	ldw	ra,4(sp)
 1005154:	df000017 	ldw	fp,0(sp)
 1005158:	dec00204 	addi	sp,sp,8
 100515c:	f800283a 	ret

01005160 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1005160:	defffe04 	addi	sp,sp,-8
 1005164:	df000115 	stw	fp,4(sp)
 1005168:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100516c:	0005303a 	rdctl	r2,status
 1005170:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005174:	e0ffff17 	ldw	r3,-4(fp)
 1005178:	00bfff84 	movi	r2,-2
 100517c:	1884703a 	and	r2,r3,r2
 1005180:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 1005184:	d0a6c117 	ldw	r2,-25852(gp)
 1005188:	10000526 	beq	r2,zero,10051a0 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 100518c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005190:	10c00f17 	ldw	r3,60(r2)
 1005194:	18c00044 	addi	r3,r3,1
 1005198:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 100519c:	d0a6ba17 	ldw	r2,-25880(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 10051a0:	0001883a 	nop
 10051a4:	e037883a 	mov	sp,fp
 10051a8:	df000017 	ldw	fp,0(sp)
 10051ac:	dec00104 	addi	sp,sp,4
 10051b0:	f800283a 	ret

010051b4 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 10051b4:	defffe04 	addi	sp,sp,-8
 10051b8:	df000115 	stw	fp,4(sp)
 10051bc:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 10051c0:	d0a6c117 	ldw	r2,-25852(gp)
 10051c4:	10000e26 	beq	r2,zero,1005200 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 10051c8:	d0a6ba17 	ldw	r2,-25880(gp)
 10051cc:	10800f17 	ldw	r2,60(r2)
 10051d0:	10000b26 	beq	r2,zero,1005200 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 10051d4:	d0a6ba17 	ldw	r2,-25880(gp)
 10051d8:	10c00f17 	ldw	r3,60(r2)
 10051dc:	18ffffc4 	addi	r3,r3,-1
 10051e0:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 10051e4:	d0a6ba17 	ldw	r2,-25880(gp)
 10051e8:	10800f17 	ldw	r2,60(r2)
 10051ec:	1000041e 	bne	r2,zero,1005200 <vTaskExitCritical+0x4c>
 10051f0:	00800044 	movi	r2,1
 10051f4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10051f8:	e0bfff17 	ldw	r2,-4(fp)
 10051fc:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1005200:	0001883a 	nop
 1005204:	e037883a 	mov	sp,fp
 1005208:	df000017 	ldw	fp,0(sp)
 100520c:	dec00104 	addi	sp,sp,4
 1005210:	f800283a 	ret

01005214 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1005214:	defffe04 	addi	sp,sp,-8
 1005218:	df000115 	stw	fp,4(sp)
 100521c:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1005220:	d0a6ba17 	ldw	r2,-25880(gp)
 1005224:	10800617 	ldw	r2,24(r2)
 1005228:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 100522c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005230:	d0e6ba17 	ldw	r3,-25880(gp)
 1005234:	18c00b17 	ldw	r3,44(r3)
 1005238:	01000144 	movi	r4,5
 100523c:	20c7c83a 	sub	r3,r4,r3
 1005240:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 1005244:	e0bfff17 	ldw	r2,-4(fp)
}
 1005248:	e037883a 	mov	sp,fp
 100524c:	df000017 	ldw	fp,0(sp)
 1005250:	dec00104 	addi	sp,sp,4
 1005254:	f800283a 	ret

01005258 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1005258:	deffff04 	addi	sp,sp,-4
 100525c:	df000015 	stw	fp,0(sp)
 1005260:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 1005264:	d0a6ba17 	ldw	r2,-25880(gp)
 1005268:	10000426 	beq	r2,zero,100527c <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 100526c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005270:	10c01117 	ldw	r3,68(r2)
 1005274:	18c00044 	addi	r3,r3,1
 1005278:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 100527c:	d0a6ba17 	ldw	r2,-25880(gp)
	}
 1005280:	e037883a 	mov	sp,fp
 1005284:	df000017 	ldw	fp,0(sp)
 1005288:	dec00104 	addi	sp,sp,4
 100528c:	f800283a 	ret

01005290 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 1005290:	defffb04 	addi	sp,sp,-20
 1005294:	dfc00415 	stw	ra,16(sp)
 1005298:	df000315 	stw	fp,12(sp)
 100529c:	df000304 	addi	fp,sp,12
 10052a0:	e13ffe15 	stw	r4,-8(fp)
 10052a4:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 10052a8:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 10052ac:	d0a6ba17 	ldw	r2,-25880(gp)
 10052b0:	10801217 	ldw	r2,72(r2)
 10052b4:	1000091e 	bne	r2,zero,10052dc <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 10052b8:	d0a6ba17 	ldw	r2,-25880(gp)
 10052bc:	00c00044 	movi	r3,1
 10052c0:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 10052c4:	e0bfff17 	ldw	r2,-4(fp)
 10052c8:	10000426 	beq	r2,zero,10052dc <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10052cc:	01400044 	movi	r5,1
 10052d0:	e13fff17 	ldw	r4,-4(fp)
 10052d4:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10052d8:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10052dc:	10051b40 	call	10051b4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10052e0:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 10052e4:	d0a6ba17 	ldw	r2,-25880(gp)
 10052e8:	10801217 	ldw	r2,72(r2)
 10052ec:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 10052f0:	e0bffd17 	ldw	r2,-12(fp)
 10052f4:	10000926 	beq	r2,zero,100531c <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 10052f8:	e0bffe17 	ldw	r2,-8(fp)
 10052fc:	10000326 	beq	r2,zero,100530c <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 1005300:	d0a6ba17 	ldw	r2,-25880(gp)
 1005304:	10001215 	stw	zero,72(r2)
 1005308:	00000406 	br	100531c <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 100530c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005310:	e0fffd17 	ldw	r3,-12(fp)
 1005314:	18ffffc4 	addi	r3,r3,-1
 1005318:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 100531c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005320:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005324:	10051b40 	call	10051b4 <vTaskExitCritical>

		return ulReturn;
 1005328:	e0bffd17 	ldw	r2,-12(fp)
	}
 100532c:	e037883a 	mov	sp,fp
 1005330:	dfc00117 	ldw	ra,4(sp)
 1005334:	df000017 	ldw	fp,0(sp)
 1005338:	dec00204 	addi	sp,sp,8
 100533c:	f800283a 	ret

01005340 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1005340:	defff904 	addi	sp,sp,-28
 1005344:	dfc00615 	stw	ra,24(sp)
 1005348:	df000515 	stw	fp,20(sp)
 100534c:	df000504 	addi	fp,sp,20
 1005350:	e13ffc15 	stw	r4,-16(fp)
 1005354:	e17ffd15 	stw	r5,-12(fp)
 1005358:	e1bffe15 	stw	r6,-8(fp)
 100535c:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1005360:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1005364:	d0a6ba17 	ldw	r2,-25880(gp)
 1005368:	10801303 	ldbu	r2,76(r2)
 100536c:	10803fcc 	andi	r2,r2,255
 1005370:	108000a0 	cmpeqi	r2,r2,2
 1005374:	10000f1e 	bne	r2,zero,10053b4 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1005378:	d0a6ba17 	ldw	r2,-25880(gp)
 100537c:	11001217 	ldw	r4,72(r2)
 1005380:	e0fffc17 	ldw	r3,-16(fp)
 1005384:	00c6303a 	nor	r3,zero,r3
 1005388:	20c6703a 	and	r3,r4,r3
 100538c:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 1005390:	d0a6ba17 	ldw	r2,-25880(gp)
 1005394:	00c00044 	movi	r3,1
 1005398:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 100539c:	e0bfff17 	ldw	r2,-4(fp)
 10053a0:	10000426 	beq	r2,zero,10053b4 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 10053a4:	01400044 	movi	r5,1
 10053a8:	e13fff17 	ldw	r4,-4(fp)
 10053ac:	100595c0 	call	100595c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 10053b0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10053b4:	10051b40 	call	10051b4 <vTaskExitCritical>

		taskENTER_CRITICAL();
 10053b8:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 10053bc:	e0bffe17 	ldw	r2,-8(fp)
 10053c0:	10000426 	beq	r2,zero,10053d4 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 10053c4:	d0a6ba17 	ldw	r2,-25880(gp)
 10053c8:	10c01217 	ldw	r3,72(r2)
 10053cc:	e0bffe17 	ldw	r2,-8(fp)
 10053d0:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 10053d4:	d0a6ba17 	ldw	r2,-25880(gp)
 10053d8:	10801303 	ldbu	r2,76(r2)
 10053dc:	10803fcc 	andi	r2,r2,255
 10053e0:	108000a0 	cmpeqi	r2,r2,2
 10053e4:	1000021e 	bne	r2,zero,10053f0 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 10053e8:	e03ffb15 	stw	zero,-20(fp)
 10053ec:	00000806 	br	1005410 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 10053f0:	d0a6ba17 	ldw	r2,-25880(gp)
 10053f4:	11001217 	ldw	r4,72(r2)
 10053f8:	e0fffd17 	ldw	r3,-12(fp)
 10053fc:	00c6303a 	nor	r3,zero,r3
 1005400:	20c6703a 	and	r3,r4,r3
 1005404:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 1005408:	00800044 	movi	r2,1
 100540c:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005410:	d0a6ba17 	ldw	r2,-25880(gp)
 1005414:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 1005418:	10051b40 	call	10051b4 <vTaskExitCritical>

		return xReturn;
 100541c:	e0bffb17 	ldw	r2,-20(fp)
	}
 1005420:	e037883a 	mov	sp,fp
 1005424:	dfc00117 	ldw	ra,4(sp)
 1005428:	df000017 	ldw	fp,0(sp)
 100542c:	dec00204 	addi	sp,sp,8
 1005430:	f800283a 	ret

01005434 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 1005434:	defff704 	addi	sp,sp,-36
 1005438:	dfc00815 	stw	ra,32(sp)
 100543c:	df000715 	stw	fp,28(sp)
 1005440:	df000704 	addi	fp,sp,28
 1005444:	e13ffc15 	stw	r4,-16(fp)
 1005448:	e17ffd15 	stw	r5,-12(fp)
 100544c:	e1bffe15 	stw	r6,-8(fp)
 1005450:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 1005454:	00800044 	movi	r2,1
 1005458:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 100545c:	e0bffc17 	ldw	r2,-16(fp)
 1005460:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 1005464:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 1005468:	e0bfff17 	ldw	r2,-4(fp)
 100546c:	10000426 	beq	r2,zero,1005480 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 1005470:	e0bffa17 	ldw	r2,-24(fp)
 1005474:	10c01217 	ldw	r3,72(r2)
 1005478:	e0bfff17 	ldw	r2,-4(fp)
 100547c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1005480:	e0bffa17 	ldw	r2,-24(fp)
 1005484:	10801303 	ldbu	r2,76(r2)
 1005488:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 100548c:	e0bffa17 	ldw	r2,-24(fp)
 1005490:	00c00084 	movi	r3,2
 1005494:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 1005498:	e0bffe17 	ldw	r2,-8(fp)
 100549c:	10800168 	cmpgeui	r2,r2,5
 10054a0:	1000261e 	bne	r2,zero,100553c <xTaskGenericNotify+0x108>
 10054a4:	e0bffe17 	ldw	r2,-8(fp)
 10054a8:	100690ba 	slli	r3,r2,2
 10054ac:	00804034 	movhi	r2,256
 10054b0:	10953004 	addi	r2,r2,21696
 10054b4:	1885883a 	add	r2,r3,r2
 10054b8:	10800017 	ldw	r2,0(r2)
 10054bc:	1000683a 	jmp	r2
 10054c0:	01005544 	movi	r4,341
 10054c4:	010054d4 	movui	r4,339
 10054c8:	010054f0 	cmpltui	r4,zero,339
 10054cc:	01005508 	cmpgei	r4,zero,340
 10054d0:	01005518 	cmpnei	r4,zero,340
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 10054d4:	e0bffa17 	ldw	r2,-24(fp)
 10054d8:	10c01217 	ldw	r3,72(r2)
 10054dc:	e0bffd17 	ldw	r2,-12(fp)
 10054e0:	1886b03a 	or	r3,r3,r2
 10054e4:	e0bffa17 	ldw	r2,-24(fp)
 10054e8:	10c01215 	stw	r3,72(r2)
					break;
 10054ec:	00001606 	br	1005548 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 10054f0:	e0bffa17 	ldw	r2,-24(fp)
 10054f4:	10801217 	ldw	r2,72(r2)
 10054f8:	10c00044 	addi	r3,r2,1
 10054fc:	e0bffa17 	ldw	r2,-24(fp)
 1005500:	10c01215 	stw	r3,72(r2)
					break;
 1005504:	00001006 	br	1005548 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1005508:	e0bffa17 	ldw	r2,-24(fp)
 100550c:	e0fffd17 	ldw	r3,-12(fp)
 1005510:	10c01215 	stw	r3,72(r2)
					break;
 1005514:	00000c06 	br	1005548 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1005518:	e0bffb03 	ldbu	r2,-20(fp)
 100551c:	108000a0 	cmpeqi	r2,r2,2
 1005520:	1000041e 	bne	r2,zero,1005534 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1005524:	e0bffa17 	ldw	r2,-24(fp)
 1005528:	e0fffd17 	ldw	r3,-12(fp)
 100552c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1005530:	00000506 	br	1005548 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1005534:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 1005538:	00000306 	br	1005548 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 100553c:	0001883a 	nop
 1005540:	00000106 	br	1005548 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 1005544:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005548:	e0bffb03 	ldbu	r2,-20(fp)
 100554c:	10800058 	cmpnei	r2,r2,1
 1005550:	10001c1e 	bne	r2,zero,10055c4 <xTaskGenericNotify+0x190>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005554:	e0bffa17 	ldw	r2,-24(fp)
 1005558:	10800104 	addi	r2,r2,4
 100555c:	1009883a 	mov	r4,r2
 1005560:	1000ce40 	call	1000ce4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 1005564:	e0bffa17 	ldw	r2,-24(fp)
 1005568:	10800b17 	ldw	r2,44(r2)
 100556c:	d0e6c017 	ldw	r3,-25856(gp)
 1005570:	1880032e 	bgeu	r3,r2,1005580 <xTaskGenericNotify+0x14c>
 1005574:	e0bffa17 	ldw	r2,-24(fp)
 1005578:	10800b17 	ldw	r2,44(r2)
 100557c:	d0a6c015 	stw	r2,-25856(gp)
 1005580:	e0bffa17 	ldw	r2,-24(fp)
 1005584:	10800b17 	ldw	r2,44(r2)
 1005588:	10c00524 	muli	r3,r2,20
 100558c:	00806074 	movhi	r2,385
 1005590:	10bab404 	addi	r2,r2,-5424
 1005594:	1887883a 	add	r3,r3,r2
 1005598:	e0bffa17 	ldw	r2,-24(fp)
 100559c:	10800104 	addi	r2,r2,4
 10055a0:	100b883a 	mov	r5,r2
 10055a4:	1809883a 	mov	r4,r3
 10055a8:	1000b800 	call	1000b80 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 10055ac:	e0bffa17 	ldw	r2,-24(fp)
 10055b0:	10800b17 	ldw	r2,44(r2)
 10055b4:	d0e6ba17 	ldw	r3,-25880(gp)
 10055b8:	18c00b17 	ldw	r3,44(r3)
 10055bc:	1880012e 	bgeu	r3,r2,10055c4 <xTaskGenericNotify+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 10055c0:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 10055c4:	10051b40 	call	10051b4 <vTaskExitCritical>

		return xReturn;
 10055c8:	e0bff917 	ldw	r2,-28(fp)
	}
 10055cc:	e037883a 	mov	sp,fp
 10055d0:	dfc00117 	ldw	ra,4(sp)
 10055d4:	df000017 	ldw	fp,0(sp)
 10055d8:	dec00204 	addi	sp,sp,8
 10055dc:	f800283a 	ret

010055e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10055e0:	defff604 	addi	sp,sp,-40
 10055e4:	dfc00915 	stw	ra,36(sp)
 10055e8:	df000815 	stw	fp,32(sp)
 10055ec:	df000804 	addi	fp,sp,32
 10055f0:	e13ffc15 	stw	r4,-16(fp)
 10055f4:	e17ffd15 	stw	r5,-12(fp)
 10055f8:	e1bffe15 	stw	r6,-8(fp)
 10055fc:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1005600:	00800044 	movi	r2,1
 1005604:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1005608:	e0bffc17 	ldw	r2,-16(fp)
 100560c:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1005610:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 1005614:	e0bfff17 	ldw	r2,-4(fp)
 1005618:	10000426 	beq	r2,zero,100562c <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 100561c:	e0bff917 	ldw	r2,-28(fp)
 1005620:	10c01217 	ldw	r3,72(r2)
 1005624:	e0bfff17 	ldw	r2,-4(fp)
 1005628:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 100562c:	e0bff917 	ldw	r2,-28(fp)
 1005630:	10801303 	ldbu	r2,76(r2)
 1005634:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1005638:	e0bff917 	ldw	r2,-28(fp)
 100563c:	00c00084 	movi	r3,2
 1005640:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 1005644:	e0bffe17 	ldw	r2,-8(fp)
 1005648:	10800168 	cmpgeui	r2,r2,5
 100564c:	1000261e 	bne	r2,zero,10056e8 <xTaskGenericNotifyFromISR+0x108>
 1005650:	e0bffe17 	ldw	r2,-8(fp)
 1005654:	100690ba 	slli	r3,r2,2
 1005658:	00804034 	movhi	r2,256
 100565c:	10959b04 	addi	r2,r2,22124
 1005660:	1885883a 	add	r2,r3,r2
 1005664:	10800017 	ldw	r2,0(r2)
 1005668:	1000683a 	jmp	r2
 100566c:	010056f0 	cmpltui	r4,zero,347
 1005670:	01005680 	call	100568 <__reset-0xeffa98>
 1005674:	0100569c 	xori	r4,zero,346
 1005678:	010056b4 	movhi	r4,346
 100567c:	010056c4 	movi	r4,347
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1005680:	e0bff917 	ldw	r2,-28(fp)
 1005684:	10c01217 	ldw	r3,72(r2)
 1005688:	e0bffd17 	ldw	r2,-12(fp)
 100568c:	1886b03a 	or	r3,r3,r2
 1005690:	e0bff917 	ldw	r2,-28(fp)
 1005694:	10c01215 	stw	r3,72(r2)
					break;
 1005698:	00001606 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 100569c:	e0bff917 	ldw	r2,-28(fp)
 10056a0:	10801217 	ldw	r2,72(r2)
 10056a4:	10c00044 	addi	r3,r2,1
 10056a8:	e0bff917 	ldw	r2,-28(fp)
 10056ac:	10c01215 	stw	r3,72(r2)
					break;
 10056b0:	00001006 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 10056b4:	e0bff917 	ldw	r2,-28(fp)
 10056b8:	e0fffd17 	ldw	r3,-12(fp)
 10056bc:	10c01215 	stw	r3,72(r2)
					break;
 10056c0:	00000c06 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 10056c4:	e0bffb03 	ldbu	r2,-20(fp)
 10056c8:	108000a0 	cmpeqi	r2,r2,2
 10056cc:	1000041e 	bne	r2,zero,10056e0 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 10056d0:	e0bff917 	ldw	r2,-28(fp)
 10056d4:	e0fffd17 	ldw	r3,-12(fp)
 10056d8:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 10056dc:	00000506 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 10056e0:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 10056e4:	00000306 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 10056e8:	0001883a 	nop
 10056ec:	00000106 	br	10056f4 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 10056f0:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 10056f4:	e0bffb03 	ldbu	r2,-20(fp)
 10056f8:	10800058 	cmpnei	r2,r2,1
 10056fc:	10002b1e 	bne	r2,zero,10057ac <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005700:	d0a6c817 	ldw	r2,-25824(gp)
 1005704:	1000171e 	bne	r2,zero,1005764 <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005708:	e0bff917 	ldw	r2,-28(fp)
 100570c:	10800104 	addi	r2,r2,4
 1005710:	1009883a 	mov	r4,r2
 1005714:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005718:	e0bff917 	ldw	r2,-28(fp)
 100571c:	10800b17 	ldw	r2,44(r2)
 1005720:	d0e6c017 	ldw	r3,-25856(gp)
 1005724:	1880032e 	bgeu	r3,r2,1005734 <xTaskGenericNotifyFromISR+0x154>
 1005728:	e0bff917 	ldw	r2,-28(fp)
 100572c:	10800b17 	ldw	r2,44(r2)
 1005730:	d0a6c015 	stw	r2,-25856(gp)
 1005734:	e0bff917 	ldw	r2,-28(fp)
 1005738:	10800b17 	ldw	r2,44(r2)
 100573c:	10c00524 	muli	r3,r2,20
 1005740:	00806074 	movhi	r2,385
 1005744:	10bab404 	addi	r2,r2,-5424
 1005748:	1887883a 	add	r3,r3,r2
 100574c:	e0bff917 	ldw	r2,-28(fp)
 1005750:	10800104 	addi	r2,r2,4
 1005754:	100b883a 	mov	r5,r2
 1005758:	1809883a 	mov	r4,r3
 100575c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005760:	00000606 	br	100577c <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005764:	e0bff917 	ldw	r2,-28(fp)
 1005768:	10800604 	addi	r2,r2,24
 100576c:	100b883a 	mov	r5,r2
 1005770:	01006074 	movhi	r4,385
 1005774:	213ad704 	addi	r4,r4,-5284
 1005778:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 100577c:	e0bff917 	ldw	r2,-28(fp)
 1005780:	10800b17 	ldw	r2,44(r2)
 1005784:	d0e6ba17 	ldw	r3,-25880(gp)
 1005788:	18c00b17 	ldw	r3,44(r3)
 100578c:	1880072e 	bgeu	r3,r2,10057ac <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 1005790:	e0800217 	ldw	r2,8(fp)
 1005794:	10000326 	beq	r2,zero,10057a4 <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 1005798:	e0800217 	ldw	r2,8(fp)
 100579c:	00c00044 	movi	r3,1
 10057a0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10057a4:	00800044 	movi	r2,1
 10057a8:	d0a6c315 	stw	r2,-25844(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 10057ac:	e0bff817 	ldw	r2,-32(fp)
	}
 10057b0:	e037883a 	mov	sp,fp
 10057b4:	dfc00117 	ldw	ra,4(sp)
 10057b8:	df000017 	ldw	fp,0(sp)
 10057bc:	dec00204 	addi	sp,sp,8
 10057c0:	f800283a 	ret

010057c4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 10057c4:	defff904 	addi	sp,sp,-28
 10057c8:	dfc00615 	stw	ra,24(sp)
 10057cc:	df000515 	stw	fp,20(sp)
 10057d0:	df000504 	addi	fp,sp,20
 10057d4:	e13ffe15 	stw	r4,-8(fp)
 10057d8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 10057dc:	e0bffe17 	ldw	r2,-8(fp)
 10057e0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 10057e4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 10057e8:	e0bffb17 	ldw	r2,-20(fp)
 10057ec:	10801303 	ldbu	r2,76(r2)
 10057f0:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 10057f4:	e0bffb17 	ldw	r2,-20(fp)
 10057f8:	00c00084 	movi	r3,2
 10057fc:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1005800:	e0bffb17 	ldw	r2,-20(fp)
 1005804:	10801217 	ldw	r2,72(r2)
 1005808:	10c00044 	addi	r3,r2,1
 100580c:	e0bffb17 	ldw	r2,-20(fp)
 1005810:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1005814:	e0bffd03 	ldbu	r2,-12(fp)
 1005818:	10800058 	cmpnei	r2,r2,1
 100581c:	10002b1e 	bne	r2,zero,10058cc <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1005820:	d0a6c817 	ldw	r2,-25824(gp)
 1005824:	1000171e 	bne	r2,zero,1005884 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1005828:	e0bffb17 	ldw	r2,-20(fp)
 100582c:	10800104 	addi	r2,r2,4
 1005830:	1009883a 	mov	r4,r2
 1005834:	1000ce40 	call	1000ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 1005838:	e0bffb17 	ldw	r2,-20(fp)
 100583c:	10800b17 	ldw	r2,44(r2)
 1005840:	d0e6c017 	ldw	r3,-25856(gp)
 1005844:	1880032e 	bgeu	r3,r2,1005854 <vTaskNotifyGiveFromISR+0x90>
 1005848:	e0bffb17 	ldw	r2,-20(fp)
 100584c:	10800b17 	ldw	r2,44(r2)
 1005850:	d0a6c015 	stw	r2,-25856(gp)
 1005854:	e0bffb17 	ldw	r2,-20(fp)
 1005858:	10800b17 	ldw	r2,44(r2)
 100585c:	10c00524 	muli	r3,r2,20
 1005860:	00806074 	movhi	r2,385
 1005864:	10bab404 	addi	r2,r2,-5424
 1005868:	1887883a 	add	r3,r3,r2
 100586c:	e0bffb17 	ldw	r2,-20(fp)
 1005870:	10800104 	addi	r2,r2,4
 1005874:	100b883a 	mov	r5,r2
 1005878:	1809883a 	mov	r4,r3
 100587c:	1000b800 	call	1000b80 <vListInsertEnd>
 1005880:	00000606 	br	100589c <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1005884:	e0bffb17 	ldw	r2,-20(fp)
 1005888:	10800604 	addi	r2,r2,24
 100588c:	100b883a 	mov	r5,r2
 1005890:	01006074 	movhi	r4,385
 1005894:	213ad704 	addi	r4,r4,-5284
 1005898:	1000b800 	call	1000b80 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 100589c:	e0bffb17 	ldw	r2,-20(fp)
 10058a0:	10800b17 	ldw	r2,44(r2)
 10058a4:	d0e6ba17 	ldw	r3,-25880(gp)
 10058a8:	18c00b17 	ldw	r3,44(r3)
 10058ac:	1880072e 	bgeu	r3,r2,10058cc <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 10058b0:	e0bfff17 	ldw	r2,-4(fp)
 10058b4:	10000326 	beq	r2,zero,10058c4 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 10058b8:	e0bfff17 	ldw	r2,-4(fp)
 10058bc:	00c00044 	movi	r3,1
 10058c0:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 10058c4:	00800044 	movi	r2,1
 10058c8:	d0a6c315 	stw	r2,-25844(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 10058cc:	0001883a 	nop
 10058d0:	e037883a 	mov	sp,fp
 10058d4:	dfc00117 	ldw	ra,4(sp)
 10058d8:	df000017 	ldw	fp,0(sp)
 10058dc:	dec00204 	addi	sp,sp,8
 10058e0:	f800283a 	ret

010058e4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 10058e4:	defffb04 	addi	sp,sp,-20
 10058e8:	dfc00415 	stw	ra,16(sp)
 10058ec:	df000315 	stw	fp,12(sp)
 10058f0:	df000304 	addi	fp,sp,12
 10058f4:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 10058f8:	e0bfff17 	ldw	r2,-4(fp)
 10058fc:	1000021e 	bne	r2,zero,1005908 <xTaskNotifyStateClear+0x24>
 1005900:	d0a6ba17 	ldw	r2,-25880(gp)
 1005904:	00000106 	br	100590c <xTaskNotifyStateClear+0x28>
 1005908:	e0bfff17 	ldw	r2,-4(fp)
 100590c:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1005910:	10051600 	call	1005160 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1005914:	e0bffe17 	ldw	r2,-8(fp)
 1005918:	10801303 	ldbu	r2,76(r2)
 100591c:	10803fcc 	andi	r2,r2,255
 1005920:	10800098 	cmpnei	r2,r2,2
 1005924:	1000051e 	bne	r2,zero,100593c <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1005928:	e0bffe17 	ldw	r2,-8(fp)
 100592c:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 1005930:	00800044 	movi	r2,1
 1005934:	e0bffd15 	stw	r2,-12(fp)
 1005938:	00000106 	br	1005940 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 100593c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 1005940:	10051b40 	call	10051b4 <vTaskExitCritical>

		return xReturn;
 1005944:	e0bffd17 	ldw	r2,-12(fp)
	}
 1005948:	e037883a 	mov	sp,fp
 100594c:	dfc00117 	ldw	ra,4(sp)
 1005950:	df000017 	ldw	fp,0(sp)
 1005954:	dec00204 	addi	sp,sp,8
 1005958:	f800283a 	ret

0100595c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 100595c:	defffa04 	addi	sp,sp,-24
 1005960:	dfc00515 	stw	ra,20(sp)
 1005964:	df000415 	stw	fp,16(sp)
 1005968:	df000404 	addi	fp,sp,16
 100596c:	e13ffe15 	stw	r4,-8(fp)
 1005970:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1005974:	d0a6bf17 	ldw	r2,-25860(gp)
 1005978:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 100597c:	d0a6ba17 	ldw	r2,-25880(gp)
 1005980:	10800104 	addi	r2,r2,4
 1005984:	1009883a 	mov	r4,r2
 1005988:	1000ce40 	call	1000ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 100598c:	e0bffe17 	ldw	r2,-8(fp)
 1005990:	10bfffd8 	cmpnei	r2,r2,-1
 1005994:	1000091e 	bne	r2,zero,10059bc <prvAddCurrentTaskToDelayedList+0x60>
 1005998:	e0bfff17 	ldw	r2,-4(fp)
 100599c:	10000726 	beq	r2,zero,10059bc <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 10059a0:	d0a6ba17 	ldw	r2,-25880(gp)
 10059a4:	10800104 	addi	r2,r2,4
 10059a8:	100b883a 	mov	r5,r2
 10059ac:	01006074 	movhi	r4,385
 10059b0:	213ae104 	addi	r4,r4,-5244
 10059b4:	1000b800 	call	1000b80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 10059b8:	00001c06 	br	1005a2c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 10059bc:	e0fffc17 	ldw	r3,-16(fp)
 10059c0:	e0bffe17 	ldw	r2,-8(fp)
 10059c4:	1885883a 	add	r2,r3,r2
 10059c8:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 10059cc:	d0a6ba17 	ldw	r2,-25880(gp)
 10059d0:	e0fffd17 	ldw	r3,-12(fp)
 10059d4:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 10059d8:	e0fffd17 	ldw	r3,-12(fp)
 10059dc:	e0bffc17 	ldw	r2,-16(fp)
 10059e0:	1880072e 	bgeu	r3,r2,1005a00 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 10059e4:	d0e6bc17 	ldw	r3,-25872(gp)
 10059e8:	d0a6ba17 	ldw	r2,-25880(gp)
 10059ec:	10800104 	addi	r2,r2,4
 10059f0:	100b883a 	mov	r5,r2
 10059f4:	1809883a 	mov	r4,r3
 10059f8:	1000c0c0 	call	1000c0c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 10059fc:	00000b06 	br	1005a2c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 1005a00:	d0e6bb17 	ldw	r3,-25876(gp)
 1005a04:	d0a6ba17 	ldw	r2,-25880(gp)
 1005a08:	10800104 	addi	r2,r2,4
 1005a0c:	100b883a 	mov	r5,r2
 1005a10:	1809883a 	mov	r4,r3
 1005a14:	1000c0c0 	call	1000c0c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 1005a18:	d0a6c617 	ldw	r2,-25832(gp)
 1005a1c:	e0fffd17 	ldw	r3,-12(fp)
 1005a20:	1880022e 	bgeu	r3,r2,1005a2c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 1005a24:	e0bffd17 	ldw	r2,-12(fp)
 1005a28:	d0a6c615 	stw	r2,-25832(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1005a2c:	0001883a 	nop
 1005a30:	e037883a 	mov	sp,fp
 1005a34:	dfc00117 	ldw	ra,4(sp)
 1005a38:	df000017 	ldw	fp,0(sp)
 1005a3c:	dec00204 	addi	sp,sp,8
 1005a40:	f800283a 	ret

01005a44 <main>:
 */

#include <stdio.h>

int main()
{
 1005a44:	defffe04 	addi	sp,sp,-8
 1005a48:	dfc00115 	stw	ra,4(sp)
 1005a4c:	df000015 	stw	fp,0(sp)
 1005a50:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 1005a54:	01004074 	movhi	r4,257
 1005a58:	212d3704 	addi	r4,r4,-19236
 1005a5c:	1005da80 	call	1005da8 <puts>

  return 0;
 1005a60:	0005883a 	mov	r2,zero
}
 1005a64:	e037883a 	mov	sp,fp
 1005a68:	dfc00117 	ldw	ra,4(sp)
 1005a6c:	df000017 	ldw	fp,0(sp)
 1005a70:	dec00204 	addi	sp,sp,8
 1005a74:	f800283a 	ret

01005a78 <memcpy>:
 1005a78:	defffd04 	addi	sp,sp,-12
 1005a7c:	dfc00215 	stw	ra,8(sp)
 1005a80:	dc400115 	stw	r17,4(sp)
 1005a84:	dc000015 	stw	r16,0(sp)
 1005a88:	00c003c4 	movi	r3,15
 1005a8c:	2005883a 	mov	r2,r4
 1005a90:	1980452e 	bgeu	r3,r6,1005ba8 <memcpy+0x130>
 1005a94:	2906b03a 	or	r3,r5,r4
 1005a98:	18c000cc 	andi	r3,r3,3
 1005a9c:	1800441e 	bne	r3,zero,1005bb0 <memcpy+0x138>
 1005aa0:	347ffc04 	addi	r17,r6,-16
 1005aa4:	8822d13a 	srli	r17,r17,4
 1005aa8:	28c00104 	addi	r3,r5,4
 1005aac:	23400104 	addi	r13,r4,4
 1005ab0:	8820913a 	slli	r16,r17,4
 1005ab4:	2b000204 	addi	r12,r5,8
 1005ab8:	22c00204 	addi	r11,r4,8
 1005abc:	84000504 	addi	r16,r16,20
 1005ac0:	2a800304 	addi	r10,r5,12
 1005ac4:	22400304 	addi	r9,r4,12
 1005ac8:	2c21883a 	add	r16,r5,r16
 1005acc:	2811883a 	mov	r8,r5
 1005ad0:	200f883a 	mov	r7,r4
 1005ad4:	41000017 	ldw	r4,0(r8)
 1005ad8:	1fc00017 	ldw	ra,0(r3)
 1005adc:	63c00017 	ldw	r15,0(r12)
 1005ae0:	39000015 	stw	r4,0(r7)
 1005ae4:	53800017 	ldw	r14,0(r10)
 1005ae8:	6fc00015 	stw	ra,0(r13)
 1005aec:	5bc00015 	stw	r15,0(r11)
 1005af0:	4b800015 	stw	r14,0(r9)
 1005af4:	18c00404 	addi	r3,r3,16
 1005af8:	39c00404 	addi	r7,r7,16
 1005afc:	42000404 	addi	r8,r8,16
 1005b00:	6b400404 	addi	r13,r13,16
 1005b04:	63000404 	addi	r12,r12,16
 1005b08:	5ac00404 	addi	r11,r11,16
 1005b0c:	52800404 	addi	r10,r10,16
 1005b10:	4a400404 	addi	r9,r9,16
 1005b14:	1c3fef1e 	bne	r3,r16,1005ad4 <__alt_data_end+0xff005ad4>
 1005b18:	89c00044 	addi	r7,r17,1
 1005b1c:	380e913a 	slli	r7,r7,4
 1005b20:	310003cc 	andi	r4,r6,15
 1005b24:	02c000c4 	movi	r11,3
 1005b28:	11c7883a 	add	r3,r2,r7
 1005b2c:	29cb883a 	add	r5,r5,r7
 1005b30:	5900212e 	bgeu	r11,r4,1005bb8 <memcpy+0x140>
 1005b34:	1813883a 	mov	r9,r3
 1005b38:	2811883a 	mov	r8,r5
 1005b3c:	200f883a 	mov	r7,r4
 1005b40:	42800017 	ldw	r10,0(r8)
 1005b44:	4a400104 	addi	r9,r9,4
 1005b48:	39ffff04 	addi	r7,r7,-4
 1005b4c:	4abfff15 	stw	r10,-4(r9)
 1005b50:	42000104 	addi	r8,r8,4
 1005b54:	59fffa36 	bltu	r11,r7,1005b40 <__alt_data_end+0xff005b40>
 1005b58:	213fff04 	addi	r4,r4,-4
 1005b5c:	2008d0ba 	srli	r4,r4,2
 1005b60:	318000cc 	andi	r6,r6,3
 1005b64:	21000044 	addi	r4,r4,1
 1005b68:	2109883a 	add	r4,r4,r4
 1005b6c:	2109883a 	add	r4,r4,r4
 1005b70:	1907883a 	add	r3,r3,r4
 1005b74:	290b883a 	add	r5,r5,r4
 1005b78:	30000626 	beq	r6,zero,1005b94 <memcpy+0x11c>
 1005b7c:	198d883a 	add	r6,r3,r6
 1005b80:	29c00003 	ldbu	r7,0(r5)
 1005b84:	18c00044 	addi	r3,r3,1
 1005b88:	29400044 	addi	r5,r5,1
 1005b8c:	19ffffc5 	stb	r7,-1(r3)
 1005b90:	19bffb1e 	bne	r3,r6,1005b80 <__alt_data_end+0xff005b80>
 1005b94:	dfc00217 	ldw	ra,8(sp)
 1005b98:	dc400117 	ldw	r17,4(sp)
 1005b9c:	dc000017 	ldw	r16,0(sp)
 1005ba0:	dec00304 	addi	sp,sp,12
 1005ba4:	f800283a 	ret
 1005ba8:	2007883a 	mov	r3,r4
 1005bac:	003ff206 	br	1005b78 <__alt_data_end+0xff005b78>
 1005bb0:	2007883a 	mov	r3,r4
 1005bb4:	003ff106 	br	1005b7c <__alt_data_end+0xff005b7c>
 1005bb8:	200d883a 	mov	r6,r4
 1005bbc:	003fee06 	br	1005b78 <__alt_data_end+0xff005b78>

01005bc0 <memset>:
 1005bc0:	20c000cc 	andi	r3,r4,3
 1005bc4:	2005883a 	mov	r2,r4
 1005bc8:	18004426 	beq	r3,zero,1005cdc <memset+0x11c>
 1005bcc:	31ffffc4 	addi	r7,r6,-1
 1005bd0:	30004026 	beq	r6,zero,1005cd4 <memset+0x114>
 1005bd4:	2813883a 	mov	r9,r5
 1005bd8:	200d883a 	mov	r6,r4
 1005bdc:	2007883a 	mov	r3,r4
 1005be0:	00000406 	br	1005bf4 <memset+0x34>
 1005be4:	3a3fffc4 	addi	r8,r7,-1
 1005be8:	31800044 	addi	r6,r6,1
 1005bec:	38003926 	beq	r7,zero,1005cd4 <memset+0x114>
 1005bf0:	400f883a 	mov	r7,r8
 1005bf4:	18c00044 	addi	r3,r3,1
 1005bf8:	32400005 	stb	r9,0(r6)
 1005bfc:	1a0000cc 	andi	r8,r3,3
 1005c00:	403ff81e 	bne	r8,zero,1005be4 <__alt_data_end+0xff005be4>
 1005c04:	010000c4 	movi	r4,3
 1005c08:	21c02d2e 	bgeu	r4,r7,1005cc0 <memset+0x100>
 1005c0c:	29003fcc 	andi	r4,r5,255
 1005c10:	200c923a 	slli	r6,r4,8
 1005c14:	3108b03a 	or	r4,r6,r4
 1005c18:	200c943a 	slli	r6,r4,16
 1005c1c:	218cb03a 	or	r6,r4,r6
 1005c20:	010003c4 	movi	r4,15
 1005c24:	21c0182e 	bgeu	r4,r7,1005c88 <memset+0xc8>
 1005c28:	3b3ffc04 	addi	r12,r7,-16
 1005c2c:	6018d13a 	srli	r12,r12,4
 1005c30:	1a000104 	addi	r8,r3,4
 1005c34:	1ac00204 	addi	r11,r3,8
 1005c38:	6008913a 	slli	r4,r12,4
 1005c3c:	1a800304 	addi	r10,r3,12
 1005c40:	1813883a 	mov	r9,r3
 1005c44:	21000504 	addi	r4,r4,20
 1005c48:	1909883a 	add	r4,r3,r4
 1005c4c:	49800015 	stw	r6,0(r9)
 1005c50:	41800015 	stw	r6,0(r8)
 1005c54:	59800015 	stw	r6,0(r11)
 1005c58:	51800015 	stw	r6,0(r10)
 1005c5c:	42000404 	addi	r8,r8,16
 1005c60:	4a400404 	addi	r9,r9,16
 1005c64:	5ac00404 	addi	r11,r11,16
 1005c68:	52800404 	addi	r10,r10,16
 1005c6c:	413ff71e 	bne	r8,r4,1005c4c <__alt_data_end+0xff005c4c>
 1005c70:	63000044 	addi	r12,r12,1
 1005c74:	6018913a 	slli	r12,r12,4
 1005c78:	39c003cc 	andi	r7,r7,15
 1005c7c:	010000c4 	movi	r4,3
 1005c80:	1b07883a 	add	r3,r3,r12
 1005c84:	21c00e2e 	bgeu	r4,r7,1005cc0 <memset+0x100>
 1005c88:	1813883a 	mov	r9,r3
 1005c8c:	3811883a 	mov	r8,r7
 1005c90:	010000c4 	movi	r4,3
 1005c94:	49800015 	stw	r6,0(r9)
 1005c98:	423fff04 	addi	r8,r8,-4
 1005c9c:	4a400104 	addi	r9,r9,4
 1005ca0:	223ffc36 	bltu	r4,r8,1005c94 <__alt_data_end+0xff005c94>
 1005ca4:	393fff04 	addi	r4,r7,-4
 1005ca8:	2008d0ba 	srli	r4,r4,2
 1005cac:	39c000cc 	andi	r7,r7,3
 1005cb0:	21000044 	addi	r4,r4,1
 1005cb4:	2109883a 	add	r4,r4,r4
 1005cb8:	2109883a 	add	r4,r4,r4
 1005cbc:	1907883a 	add	r3,r3,r4
 1005cc0:	38000526 	beq	r7,zero,1005cd8 <memset+0x118>
 1005cc4:	19cf883a 	add	r7,r3,r7
 1005cc8:	19400005 	stb	r5,0(r3)
 1005ccc:	18c00044 	addi	r3,r3,1
 1005cd0:	38fffd1e 	bne	r7,r3,1005cc8 <__alt_data_end+0xff005cc8>
 1005cd4:	f800283a 	ret
 1005cd8:	f800283a 	ret
 1005cdc:	2007883a 	mov	r3,r4
 1005ce0:	300f883a 	mov	r7,r6
 1005ce4:	003fc706 	br	1005c04 <__alt_data_end+0xff005c04>

01005ce8 <_puts_r>:
 1005ce8:	defff604 	addi	sp,sp,-40
 1005cec:	dc000715 	stw	r16,28(sp)
 1005cf0:	2021883a 	mov	r16,r4
 1005cf4:	2809883a 	mov	r4,r5
 1005cf8:	dc400815 	stw	r17,32(sp)
 1005cfc:	dfc00915 	stw	ra,36(sp)
 1005d00:	2823883a 	mov	r17,r5
 1005d04:	1005dbc0 	call	1005dbc <strlen>
 1005d08:	10c00044 	addi	r3,r2,1
 1005d0c:	d8800115 	stw	r2,4(sp)
 1005d10:	00804074 	movhi	r2,257
 1005d14:	10ad3c04 	addi	r2,r2,-19216
 1005d18:	d8800215 	stw	r2,8(sp)
 1005d1c:	00800044 	movi	r2,1
 1005d20:	d8800315 	stw	r2,12(sp)
 1005d24:	00800084 	movi	r2,2
 1005d28:	dc400015 	stw	r17,0(sp)
 1005d2c:	d8c00615 	stw	r3,24(sp)
 1005d30:	dec00415 	stw	sp,16(sp)
 1005d34:	d8800515 	stw	r2,20(sp)
 1005d38:	80000226 	beq	r16,zero,1005d44 <_puts_r+0x5c>
 1005d3c:	80800e17 	ldw	r2,56(r16)
 1005d40:	10001426 	beq	r2,zero,1005d94 <_puts_r+0xac>
 1005d44:	81400217 	ldw	r5,8(r16)
 1005d48:	2880030b 	ldhu	r2,12(r5)
 1005d4c:	10c8000c 	andi	r3,r2,8192
 1005d50:	1800061e 	bne	r3,zero,1005d6c <_puts_r+0x84>
 1005d54:	29001917 	ldw	r4,100(r5)
 1005d58:	00f7ffc4 	movi	r3,-8193
 1005d5c:	10880014 	ori	r2,r2,8192
 1005d60:	20c6703a 	and	r3,r4,r3
 1005d64:	2880030d 	sth	r2,12(r5)
 1005d68:	28c01915 	stw	r3,100(r5)
 1005d6c:	d9800404 	addi	r6,sp,16
 1005d70:	8009883a 	mov	r4,r16
 1005d74:	10061f40 	call	10061f4 <__sfvwrite_r>
 1005d78:	1000091e 	bne	r2,zero,1005da0 <_puts_r+0xb8>
 1005d7c:	00800284 	movi	r2,10
 1005d80:	dfc00917 	ldw	ra,36(sp)
 1005d84:	dc400817 	ldw	r17,32(sp)
 1005d88:	dc000717 	ldw	r16,28(sp)
 1005d8c:	dec00a04 	addi	sp,sp,40
 1005d90:	f800283a 	ret
 1005d94:	8009883a 	mov	r4,r16
 1005d98:	10061a40 	call	10061a4 <__sinit>
 1005d9c:	003fe906 	br	1005d44 <__alt_data_end+0xff005d44>
 1005da0:	00bfffc4 	movi	r2,-1
 1005da4:	003ff606 	br	1005d80 <__alt_data_end+0xff005d80>

01005da8 <puts>:
 1005da8:	00804074 	movhi	r2,257
 1005dac:	10b3e304 	addi	r2,r2,-12404
 1005db0:	200b883a 	mov	r5,r4
 1005db4:	11000017 	ldw	r4,0(r2)
 1005db8:	1005ce81 	jmpi	1005ce8 <_puts_r>

01005dbc <strlen>:
 1005dbc:	208000cc 	andi	r2,r4,3
 1005dc0:	10002026 	beq	r2,zero,1005e44 <strlen+0x88>
 1005dc4:	20800007 	ldb	r2,0(r4)
 1005dc8:	10002026 	beq	r2,zero,1005e4c <strlen+0x90>
 1005dcc:	2005883a 	mov	r2,r4
 1005dd0:	00000206 	br	1005ddc <strlen+0x20>
 1005dd4:	10c00007 	ldb	r3,0(r2)
 1005dd8:	18001826 	beq	r3,zero,1005e3c <strlen+0x80>
 1005ddc:	10800044 	addi	r2,r2,1
 1005de0:	10c000cc 	andi	r3,r2,3
 1005de4:	183ffb1e 	bne	r3,zero,1005dd4 <__alt_data_end+0xff005dd4>
 1005de8:	10c00017 	ldw	r3,0(r2)
 1005dec:	01ffbff4 	movhi	r7,65279
 1005df0:	39ffbfc4 	addi	r7,r7,-257
 1005df4:	00ca303a 	nor	r5,zero,r3
 1005df8:	01a02074 	movhi	r6,32897
 1005dfc:	19c7883a 	add	r3,r3,r7
 1005e00:	31a02004 	addi	r6,r6,-32640
 1005e04:	1946703a 	and	r3,r3,r5
 1005e08:	1986703a 	and	r3,r3,r6
 1005e0c:	1800091e 	bne	r3,zero,1005e34 <strlen+0x78>
 1005e10:	10800104 	addi	r2,r2,4
 1005e14:	10c00017 	ldw	r3,0(r2)
 1005e18:	19cb883a 	add	r5,r3,r7
 1005e1c:	00c6303a 	nor	r3,zero,r3
 1005e20:	28c6703a 	and	r3,r5,r3
 1005e24:	1986703a 	and	r3,r3,r6
 1005e28:	183ff926 	beq	r3,zero,1005e10 <__alt_data_end+0xff005e10>
 1005e2c:	00000106 	br	1005e34 <strlen+0x78>
 1005e30:	10800044 	addi	r2,r2,1
 1005e34:	10c00007 	ldb	r3,0(r2)
 1005e38:	183ffd1e 	bne	r3,zero,1005e30 <__alt_data_end+0xff005e30>
 1005e3c:	1105c83a 	sub	r2,r2,r4
 1005e40:	f800283a 	ret
 1005e44:	2005883a 	mov	r2,r4
 1005e48:	003fe706 	br	1005de8 <__alt_data_end+0xff005de8>
 1005e4c:	0005883a 	mov	r2,zero
 1005e50:	f800283a 	ret

01005e54 <__fp_unlock>:
 1005e54:	0005883a 	mov	r2,zero
 1005e58:	f800283a 	ret

01005e5c <_cleanup_r>:
 1005e5c:	01404034 	movhi	r5,256
 1005e60:	295ee004 	addi	r5,r5,31616
 1005e64:	10067741 	jmpi	1006774 <_fwalk_reent>

01005e68 <__sinit.part.1>:
 1005e68:	defff704 	addi	sp,sp,-36
 1005e6c:	00c04034 	movhi	r3,256
 1005e70:	dfc00815 	stw	ra,32(sp)
 1005e74:	ddc00715 	stw	r23,28(sp)
 1005e78:	dd800615 	stw	r22,24(sp)
 1005e7c:	dd400515 	stw	r21,20(sp)
 1005e80:	dd000415 	stw	r20,16(sp)
 1005e84:	dcc00315 	stw	r19,12(sp)
 1005e88:	dc800215 	stw	r18,8(sp)
 1005e8c:	dc400115 	stw	r17,4(sp)
 1005e90:	dc000015 	stw	r16,0(sp)
 1005e94:	18d79704 	addi	r3,r3,24156
 1005e98:	24000117 	ldw	r16,4(r4)
 1005e9c:	20c00f15 	stw	r3,60(r4)
 1005ea0:	2080bb04 	addi	r2,r4,748
 1005ea4:	00c000c4 	movi	r3,3
 1005ea8:	20c0b915 	stw	r3,740(r4)
 1005eac:	2080ba15 	stw	r2,744(r4)
 1005eb0:	2000b815 	stw	zero,736(r4)
 1005eb4:	05c00204 	movi	r23,8
 1005eb8:	00800104 	movi	r2,4
 1005ebc:	2025883a 	mov	r18,r4
 1005ec0:	b80d883a 	mov	r6,r23
 1005ec4:	81001704 	addi	r4,r16,92
 1005ec8:	000b883a 	mov	r5,zero
 1005ecc:	80000015 	stw	zero,0(r16)
 1005ed0:	80000115 	stw	zero,4(r16)
 1005ed4:	80000215 	stw	zero,8(r16)
 1005ed8:	8080030d 	sth	r2,12(r16)
 1005edc:	80001915 	stw	zero,100(r16)
 1005ee0:	8000038d 	sth	zero,14(r16)
 1005ee4:	80000415 	stw	zero,16(r16)
 1005ee8:	80000515 	stw	zero,20(r16)
 1005eec:	80000615 	stw	zero,24(r16)
 1005ef0:	1005bc00 	call	1005bc0 <memset>
 1005ef4:	05804034 	movhi	r22,256
 1005ef8:	94400217 	ldw	r17,8(r18)
 1005efc:	05404034 	movhi	r21,256
 1005f00:	05004034 	movhi	r20,256
 1005f04:	04c04034 	movhi	r19,256
 1005f08:	b59e0f04 	addi	r22,r22,30780
 1005f0c:	ad5e2604 	addi	r21,r21,30872
 1005f10:	a51e4504 	addi	r20,r20,30996
 1005f14:	9cde5c04 	addi	r19,r19,31088
 1005f18:	85800815 	stw	r22,32(r16)
 1005f1c:	85400915 	stw	r21,36(r16)
 1005f20:	85000a15 	stw	r20,40(r16)
 1005f24:	84c00b15 	stw	r19,44(r16)
 1005f28:	84000715 	stw	r16,28(r16)
 1005f2c:	00800284 	movi	r2,10
 1005f30:	8880030d 	sth	r2,12(r17)
 1005f34:	00800044 	movi	r2,1
 1005f38:	b80d883a 	mov	r6,r23
 1005f3c:	89001704 	addi	r4,r17,92
 1005f40:	000b883a 	mov	r5,zero
 1005f44:	88000015 	stw	zero,0(r17)
 1005f48:	88000115 	stw	zero,4(r17)
 1005f4c:	88000215 	stw	zero,8(r17)
 1005f50:	88001915 	stw	zero,100(r17)
 1005f54:	8880038d 	sth	r2,14(r17)
 1005f58:	88000415 	stw	zero,16(r17)
 1005f5c:	88000515 	stw	zero,20(r17)
 1005f60:	88000615 	stw	zero,24(r17)
 1005f64:	1005bc00 	call	1005bc0 <memset>
 1005f68:	94000317 	ldw	r16,12(r18)
 1005f6c:	00800484 	movi	r2,18
 1005f70:	8c400715 	stw	r17,28(r17)
 1005f74:	8d800815 	stw	r22,32(r17)
 1005f78:	8d400915 	stw	r21,36(r17)
 1005f7c:	8d000a15 	stw	r20,40(r17)
 1005f80:	8cc00b15 	stw	r19,44(r17)
 1005f84:	8080030d 	sth	r2,12(r16)
 1005f88:	00800084 	movi	r2,2
 1005f8c:	80000015 	stw	zero,0(r16)
 1005f90:	80000115 	stw	zero,4(r16)
 1005f94:	80000215 	stw	zero,8(r16)
 1005f98:	80001915 	stw	zero,100(r16)
 1005f9c:	8080038d 	sth	r2,14(r16)
 1005fa0:	80000415 	stw	zero,16(r16)
 1005fa4:	80000515 	stw	zero,20(r16)
 1005fa8:	80000615 	stw	zero,24(r16)
 1005fac:	b80d883a 	mov	r6,r23
 1005fb0:	000b883a 	mov	r5,zero
 1005fb4:	81001704 	addi	r4,r16,92
 1005fb8:	1005bc00 	call	1005bc0 <memset>
 1005fbc:	00800044 	movi	r2,1
 1005fc0:	84000715 	stw	r16,28(r16)
 1005fc4:	85800815 	stw	r22,32(r16)
 1005fc8:	85400915 	stw	r21,36(r16)
 1005fcc:	85000a15 	stw	r20,40(r16)
 1005fd0:	84c00b15 	stw	r19,44(r16)
 1005fd4:	90800e15 	stw	r2,56(r18)
 1005fd8:	dfc00817 	ldw	ra,32(sp)
 1005fdc:	ddc00717 	ldw	r23,28(sp)
 1005fe0:	dd800617 	ldw	r22,24(sp)
 1005fe4:	dd400517 	ldw	r21,20(sp)
 1005fe8:	dd000417 	ldw	r20,16(sp)
 1005fec:	dcc00317 	ldw	r19,12(sp)
 1005ff0:	dc800217 	ldw	r18,8(sp)
 1005ff4:	dc400117 	ldw	r17,4(sp)
 1005ff8:	dc000017 	ldw	r16,0(sp)
 1005ffc:	dec00904 	addi	sp,sp,36
 1006000:	f800283a 	ret

01006004 <__fp_lock>:
 1006004:	0005883a 	mov	r2,zero
 1006008:	f800283a 	ret

0100600c <__sfmoreglue>:
 100600c:	defffc04 	addi	sp,sp,-16
 1006010:	dc400115 	stw	r17,4(sp)
 1006014:	2c7fffc4 	addi	r17,r5,-1
 1006018:	8c401a24 	muli	r17,r17,104
 100601c:	dc800215 	stw	r18,8(sp)
 1006020:	2825883a 	mov	r18,r5
 1006024:	89401d04 	addi	r5,r17,116
 1006028:	dc000015 	stw	r16,0(sp)
 100602c:	dfc00315 	stw	ra,12(sp)
 1006030:	10068380 	call	1006838 <_malloc_r>
 1006034:	1021883a 	mov	r16,r2
 1006038:	10000726 	beq	r2,zero,1006058 <__sfmoreglue+0x4c>
 100603c:	11000304 	addi	r4,r2,12
 1006040:	10000015 	stw	zero,0(r2)
 1006044:	14800115 	stw	r18,4(r2)
 1006048:	11000215 	stw	r4,8(r2)
 100604c:	89801a04 	addi	r6,r17,104
 1006050:	000b883a 	mov	r5,zero
 1006054:	1005bc00 	call	1005bc0 <memset>
 1006058:	8005883a 	mov	r2,r16
 100605c:	dfc00317 	ldw	ra,12(sp)
 1006060:	dc800217 	ldw	r18,8(sp)
 1006064:	dc400117 	ldw	r17,4(sp)
 1006068:	dc000017 	ldw	r16,0(sp)
 100606c:	dec00404 	addi	sp,sp,16
 1006070:	f800283a 	ret

01006074 <__sfp>:
 1006074:	defffb04 	addi	sp,sp,-20
 1006078:	dc000015 	stw	r16,0(sp)
 100607c:	04004074 	movhi	r16,257
 1006080:	8433e204 	addi	r16,r16,-12408
 1006084:	dcc00315 	stw	r19,12(sp)
 1006088:	2027883a 	mov	r19,r4
 100608c:	81000017 	ldw	r4,0(r16)
 1006090:	dfc00415 	stw	ra,16(sp)
 1006094:	dc800215 	stw	r18,8(sp)
 1006098:	20800e17 	ldw	r2,56(r4)
 100609c:	dc400115 	stw	r17,4(sp)
 10060a0:	1000021e 	bne	r2,zero,10060ac <__sfp+0x38>
 10060a4:	1005e680 	call	1005e68 <__sinit.part.1>
 10060a8:	81000017 	ldw	r4,0(r16)
 10060ac:	2480b804 	addi	r18,r4,736
 10060b0:	047fffc4 	movi	r17,-1
 10060b4:	91000117 	ldw	r4,4(r18)
 10060b8:	94000217 	ldw	r16,8(r18)
 10060bc:	213fffc4 	addi	r4,r4,-1
 10060c0:	20000a16 	blt	r4,zero,10060ec <__sfp+0x78>
 10060c4:	8080030f 	ldh	r2,12(r16)
 10060c8:	10000c26 	beq	r2,zero,10060fc <__sfp+0x88>
 10060cc:	80c01d04 	addi	r3,r16,116
 10060d0:	00000206 	br	10060dc <__sfp+0x68>
 10060d4:	18bfe60f 	ldh	r2,-104(r3)
 10060d8:	10000826 	beq	r2,zero,10060fc <__sfp+0x88>
 10060dc:	213fffc4 	addi	r4,r4,-1
 10060e0:	1c3ffd04 	addi	r16,r3,-12
 10060e4:	18c01a04 	addi	r3,r3,104
 10060e8:	247ffa1e 	bne	r4,r17,10060d4 <__alt_data_end+0xff0060d4>
 10060ec:	90800017 	ldw	r2,0(r18)
 10060f0:	10001d26 	beq	r2,zero,1006168 <__sfp+0xf4>
 10060f4:	1025883a 	mov	r18,r2
 10060f8:	003fee06 	br	10060b4 <__alt_data_end+0xff0060b4>
 10060fc:	00bfffc4 	movi	r2,-1
 1006100:	8080038d 	sth	r2,14(r16)
 1006104:	00800044 	movi	r2,1
 1006108:	8080030d 	sth	r2,12(r16)
 100610c:	80001915 	stw	zero,100(r16)
 1006110:	80000015 	stw	zero,0(r16)
 1006114:	80000215 	stw	zero,8(r16)
 1006118:	80000115 	stw	zero,4(r16)
 100611c:	80000415 	stw	zero,16(r16)
 1006120:	80000515 	stw	zero,20(r16)
 1006124:	80000615 	stw	zero,24(r16)
 1006128:	01800204 	movi	r6,8
 100612c:	000b883a 	mov	r5,zero
 1006130:	81001704 	addi	r4,r16,92
 1006134:	1005bc00 	call	1005bc0 <memset>
 1006138:	8005883a 	mov	r2,r16
 100613c:	80000c15 	stw	zero,48(r16)
 1006140:	80000d15 	stw	zero,52(r16)
 1006144:	80001115 	stw	zero,68(r16)
 1006148:	80001215 	stw	zero,72(r16)
 100614c:	dfc00417 	ldw	ra,16(sp)
 1006150:	dcc00317 	ldw	r19,12(sp)
 1006154:	dc800217 	ldw	r18,8(sp)
 1006158:	dc400117 	ldw	r17,4(sp)
 100615c:	dc000017 	ldw	r16,0(sp)
 1006160:	dec00504 	addi	sp,sp,20
 1006164:	f800283a 	ret
 1006168:	01400104 	movi	r5,4
 100616c:	9809883a 	mov	r4,r19
 1006170:	100600c0 	call	100600c <__sfmoreglue>
 1006174:	90800015 	stw	r2,0(r18)
 1006178:	103fde1e 	bne	r2,zero,10060f4 <__alt_data_end+0xff0060f4>
 100617c:	00800304 	movi	r2,12
 1006180:	98800015 	stw	r2,0(r19)
 1006184:	0005883a 	mov	r2,zero
 1006188:	003ff006 	br	100614c <__alt_data_end+0xff00614c>

0100618c <_cleanup>:
 100618c:	00804074 	movhi	r2,257
 1006190:	10b3e204 	addi	r2,r2,-12408
 1006194:	11000017 	ldw	r4,0(r2)
 1006198:	01404034 	movhi	r5,256
 100619c:	295ee004 	addi	r5,r5,31616
 10061a0:	10067741 	jmpi	1006774 <_fwalk_reent>

010061a4 <__sinit>:
 10061a4:	20800e17 	ldw	r2,56(r4)
 10061a8:	10000126 	beq	r2,zero,10061b0 <__sinit+0xc>
 10061ac:	f800283a 	ret
 10061b0:	1005e681 	jmpi	1005e68 <__sinit.part.1>

010061b4 <__sfp_lock_acquire>:
 10061b4:	f800283a 	ret

010061b8 <__sfp_lock_release>:
 10061b8:	f800283a 	ret

010061bc <__sinit_lock_acquire>:
 10061bc:	f800283a 	ret

010061c0 <__sinit_lock_release>:
 10061c0:	f800283a 	ret

010061c4 <__fp_lock_all>:
 10061c4:	00804074 	movhi	r2,257
 10061c8:	10b3e304 	addi	r2,r2,-12404
 10061cc:	11000017 	ldw	r4,0(r2)
 10061d0:	01404034 	movhi	r5,256
 10061d4:	29580104 	addi	r5,r5,24580
 10061d8:	10066b01 	jmpi	10066b0 <_fwalk>

010061dc <__fp_unlock_all>:
 10061dc:	00804074 	movhi	r2,257
 10061e0:	10b3e304 	addi	r2,r2,-12404
 10061e4:	11000017 	ldw	r4,0(r2)
 10061e8:	01404034 	movhi	r5,256
 10061ec:	29579504 	addi	r5,r5,24148
 10061f0:	10066b01 	jmpi	10066b0 <_fwalk>

010061f4 <__sfvwrite_r>:
 10061f4:	30800217 	ldw	r2,8(r6)
 10061f8:	10006726 	beq	r2,zero,1006398 <__sfvwrite_r+0x1a4>
 10061fc:	28c0030b 	ldhu	r3,12(r5)
 1006200:	defff404 	addi	sp,sp,-48
 1006204:	dd400715 	stw	r21,28(sp)
 1006208:	dd000615 	stw	r20,24(sp)
 100620c:	dc000215 	stw	r16,8(sp)
 1006210:	dfc00b15 	stw	ra,44(sp)
 1006214:	df000a15 	stw	fp,40(sp)
 1006218:	ddc00915 	stw	r23,36(sp)
 100621c:	dd800815 	stw	r22,32(sp)
 1006220:	dcc00515 	stw	r19,20(sp)
 1006224:	dc800415 	stw	r18,16(sp)
 1006228:	dc400315 	stw	r17,12(sp)
 100622c:	1880020c 	andi	r2,r3,8
 1006230:	2821883a 	mov	r16,r5
 1006234:	202b883a 	mov	r21,r4
 1006238:	3029883a 	mov	r20,r6
 100623c:	10002726 	beq	r2,zero,10062dc <__sfvwrite_r+0xe8>
 1006240:	28800417 	ldw	r2,16(r5)
 1006244:	10002526 	beq	r2,zero,10062dc <__sfvwrite_r+0xe8>
 1006248:	1880008c 	andi	r2,r3,2
 100624c:	a4400017 	ldw	r17,0(r20)
 1006250:	10002a26 	beq	r2,zero,10062fc <__sfvwrite_r+0x108>
 1006254:	05a00034 	movhi	r22,32768
 1006258:	0027883a 	mov	r19,zero
 100625c:	0025883a 	mov	r18,zero
 1006260:	b5bf0004 	addi	r22,r22,-1024
 1006264:	980d883a 	mov	r6,r19
 1006268:	a809883a 	mov	r4,r21
 100626c:	90004626 	beq	r18,zero,1006388 <__sfvwrite_r+0x194>
 1006270:	900f883a 	mov	r7,r18
 1006274:	b480022e 	bgeu	r22,r18,1006280 <__sfvwrite_r+0x8c>
 1006278:	01e00034 	movhi	r7,32768
 100627c:	39ff0004 	addi	r7,r7,-1024
 1006280:	80800917 	ldw	r2,36(r16)
 1006284:	81400717 	ldw	r5,28(r16)
 1006288:	103ee83a 	callr	r2
 100628c:	0080570e 	bge	zero,r2,10063ec <__sfvwrite_r+0x1f8>
 1006290:	a0c00217 	ldw	r3,8(r20)
 1006294:	98a7883a 	add	r19,r19,r2
 1006298:	90a5c83a 	sub	r18,r18,r2
 100629c:	1885c83a 	sub	r2,r3,r2
 10062a0:	a0800215 	stw	r2,8(r20)
 10062a4:	103fef1e 	bne	r2,zero,1006264 <__alt_data_end+0xff006264>
 10062a8:	0005883a 	mov	r2,zero
 10062ac:	dfc00b17 	ldw	ra,44(sp)
 10062b0:	df000a17 	ldw	fp,40(sp)
 10062b4:	ddc00917 	ldw	r23,36(sp)
 10062b8:	dd800817 	ldw	r22,32(sp)
 10062bc:	dd400717 	ldw	r21,28(sp)
 10062c0:	dd000617 	ldw	r20,24(sp)
 10062c4:	dcc00517 	ldw	r19,20(sp)
 10062c8:	dc800417 	ldw	r18,16(sp)
 10062cc:	dc400317 	ldw	r17,12(sp)
 10062d0:	dc000217 	ldw	r16,8(sp)
 10062d4:	dec00c04 	addi	sp,sp,48
 10062d8:	f800283a 	ret
 10062dc:	800b883a 	mov	r5,r16
 10062e0:	a809883a 	mov	r4,r21
 10062e4:	10079d80 	call	10079d8 <__swsetup_r>
 10062e8:	1000eb1e 	bne	r2,zero,1006698 <__sfvwrite_r+0x4a4>
 10062ec:	80c0030b 	ldhu	r3,12(r16)
 10062f0:	a4400017 	ldw	r17,0(r20)
 10062f4:	1880008c 	andi	r2,r3,2
 10062f8:	103fd61e 	bne	r2,zero,1006254 <__alt_data_end+0xff006254>
 10062fc:	1880004c 	andi	r2,r3,1
 1006300:	10003f1e 	bne	r2,zero,1006400 <__sfvwrite_r+0x20c>
 1006304:	0039883a 	mov	fp,zero
 1006308:	0025883a 	mov	r18,zero
 100630c:	90001a26 	beq	r18,zero,1006378 <__sfvwrite_r+0x184>
 1006310:	1880800c 	andi	r2,r3,512
 1006314:	84c00217 	ldw	r19,8(r16)
 1006318:	10002126 	beq	r2,zero,10063a0 <__sfvwrite_r+0x1ac>
 100631c:	982f883a 	mov	r23,r19
 1006320:	94c09336 	bltu	r18,r19,1006570 <__sfvwrite_r+0x37c>
 1006324:	1881200c 	andi	r2,r3,1152
 1006328:	10009e1e 	bne	r2,zero,10065a4 <__sfvwrite_r+0x3b0>
 100632c:	81000017 	ldw	r4,0(r16)
 1006330:	b80d883a 	mov	r6,r23
 1006334:	e00b883a 	mov	r5,fp
 1006338:	10071280 	call	1007128 <memmove>
 100633c:	80c00217 	ldw	r3,8(r16)
 1006340:	81000017 	ldw	r4,0(r16)
 1006344:	9005883a 	mov	r2,r18
 1006348:	1ce7c83a 	sub	r19,r3,r19
 100634c:	25cf883a 	add	r7,r4,r23
 1006350:	84c00215 	stw	r19,8(r16)
 1006354:	81c00015 	stw	r7,0(r16)
 1006358:	a0c00217 	ldw	r3,8(r20)
 100635c:	e0b9883a 	add	fp,fp,r2
 1006360:	90a5c83a 	sub	r18,r18,r2
 1006364:	18a7c83a 	sub	r19,r3,r2
 1006368:	a4c00215 	stw	r19,8(r20)
 100636c:	983fce26 	beq	r19,zero,10062a8 <__alt_data_end+0xff0062a8>
 1006370:	80c0030b 	ldhu	r3,12(r16)
 1006374:	903fe61e 	bne	r18,zero,1006310 <__alt_data_end+0xff006310>
 1006378:	8f000017 	ldw	fp,0(r17)
 100637c:	8c800117 	ldw	r18,4(r17)
 1006380:	8c400204 	addi	r17,r17,8
 1006384:	003fe106 	br	100630c <__alt_data_end+0xff00630c>
 1006388:	8cc00017 	ldw	r19,0(r17)
 100638c:	8c800117 	ldw	r18,4(r17)
 1006390:	8c400204 	addi	r17,r17,8
 1006394:	003fb306 	br	1006264 <__alt_data_end+0xff006264>
 1006398:	0005883a 	mov	r2,zero
 100639c:	f800283a 	ret
 10063a0:	81000017 	ldw	r4,0(r16)
 10063a4:	80800417 	ldw	r2,16(r16)
 10063a8:	11005736 	bltu	r2,r4,1006508 <__sfvwrite_r+0x314>
 10063ac:	85c00517 	ldw	r23,20(r16)
 10063b0:	95c05536 	bltu	r18,r23,1006508 <__sfvwrite_r+0x314>
 10063b4:	00a00034 	movhi	r2,32768
 10063b8:	10bfffc4 	addi	r2,r2,-1
 10063bc:	9009883a 	mov	r4,r18
 10063c0:	1480012e 	bgeu	r2,r18,10063c8 <__sfvwrite_r+0x1d4>
 10063c4:	1009883a 	mov	r4,r2
 10063c8:	b80b883a 	mov	r5,r23
 10063cc:	100868c0 	call	100868c <__divsi3>
 10063d0:	15cf383a 	mul	r7,r2,r23
 10063d4:	81400717 	ldw	r5,28(r16)
 10063d8:	80800917 	ldw	r2,36(r16)
 10063dc:	e00d883a 	mov	r6,fp
 10063e0:	a809883a 	mov	r4,r21
 10063e4:	103ee83a 	callr	r2
 10063e8:	00bfdb16 	blt	zero,r2,1006358 <__alt_data_end+0xff006358>
 10063ec:	8080030b 	ldhu	r2,12(r16)
 10063f0:	10801014 	ori	r2,r2,64
 10063f4:	8080030d 	sth	r2,12(r16)
 10063f8:	00bfffc4 	movi	r2,-1
 10063fc:	003fab06 	br	10062ac <__alt_data_end+0xff0062ac>
 1006400:	0027883a 	mov	r19,zero
 1006404:	0011883a 	mov	r8,zero
 1006408:	0039883a 	mov	fp,zero
 100640c:	0025883a 	mov	r18,zero
 1006410:	90001f26 	beq	r18,zero,1006490 <__sfvwrite_r+0x29c>
 1006414:	40005a26 	beq	r8,zero,1006580 <__sfvwrite_r+0x38c>
 1006418:	982d883a 	mov	r22,r19
 100641c:	94c0012e 	bgeu	r18,r19,1006424 <__sfvwrite_r+0x230>
 1006420:	902d883a 	mov	r22,r18
 1006424:	81000017 	ldw	r4,0(r16)
 1006428:	80800417 	ldw	r2,16(r16)
 100642c:	b02f883a 	mov	r23,r22
 1006430:	81c00517 	ldw	r7,20(r16)
 1006434:	1100032e 	bgeu	r2,r4,1006444 <__sfvwrite_r+0x250>
 1006438:	80c00217 	ldw	r3,8(r16)
 100643c:	38c7883a 	add	r3,r7,r3
 1006440:	1d801816 	blt	r3,r22,10064a4 <__sfvwrite_r+0x2b0>
 1006444:	b1c03e16 	blt	r22,r7,1006540 <__sfvwrite_r+0x34c>
 1006448:	80800917 	ldw	r2,36(r16)
 100644c:	81400717 	ldw	r5,28(r16)
 1006450:	e00d883a 	mov	r6,fp
 1006454:	da000115 	stw	r8,4(sp)
 1006458:	a809883a 	mov	r4,r21
 100645c:	103ee83a 	callr	r2
 1006460:	102f883a 	mov	r23,r2
 1006464:	da000117 	ldw	r8,4(sp)
 1006468:	00bfe00e 	bge	zero,r2,10063ec <__alt_data_end+0xff0063ec>
 100646c:	9de7c83a 	sub	r19,r19,r23
 1006470:	98001f26 	beq	r19,zero,10064f0 <__sfvwrite_r+0x2fc>
 1006474:	a0800217 	ldw	r2,8(r20)
 1006478:	e5f9883a 	add	fp,fp,r23
 100647c:	95e5c83a 	sub	r18,r18,r23
 1006480:	15efc83a 	sub	r23,r2,r23
 1006484:	a5c00215 	stw	r23,8(r20)
 1006488:	b83f8726 	beq	r23,zero,10062a8 <__alt_data_end+0xff0062a8>
 100648c:	903fe11e 	bne	r18,zero,1006414 <__alt_data_end+0xff006414>
 1006490:	8f000017 	ldw	fp,0(r17)
 1006494:	8c800117 	ldw	r18,4(r17)
 1006498:	0011883a 	mov	r8,zero
 100649c:	8c400204 	addi	r17,r17,8
 10064a0:	003fdb06 	br	1006410 <__alt_data_end+0xff006410>
 10064a4:	180d883a 	mov	r6,r3
 10064a8:	e00b883a 	mov	r5,fp
 10064ac:	da000115 	stw	r8,4(sp)
 10064b0:	d8c00015 	stw	r3,0(sp)
 10064b4:	10071280 	call	1007128 <memmove>
 10064b8:	d8c00017 	ldw	r3,0(sp)
 10064bc:	80800017 	ldw	r2,0(r16)
 10064c0:	800b883a 	mov	r5,r16
 10064c4:	a809883a 	mov	r4,r21
 10064c8:	10c5883a 	add	r2,r2,r3
 10064cc:	80800015 	stw	r2,0(r16)
 10064d0:	d8c00015 	stw	r3,0(sp)
 10064d4:	1007ea00 	call	1007ea0 <_fflush_r>
 10064d8:	d8c00017 	ldw	r3,0(sp)
 10064dc:	da000117 	ldw	r8,4(sp)
 10064e0:	103fc21e 	bne	r2,zero,10063ec <__alt_data_end+0xff0063ec>
 10064e4:	182f883a 	mov	r23,r3
 10064e8:	9de7c83a 	sub	r19,r19,r23
 10064ec:	983fe11e 	bne	r19,zero,1006474 <__alt_data_end+0xff006474>
 10064f0:	800b883a 	mov	r5,r16
 10064f4:	a809883a 	mov	r4,r21
 10064f8:	1007ea00 	call	1007ea0 <_fflush_r>
 10064fc:	103fbb1e 	bne	r2,zero,10063ec <__alt_data_end+0xff0063ec>
 1006500:	0011883a 	mov	r8,zero
 1006504:	003fdb06 	br	1006474 <__alt_data_end+0xff006474>
 1006508:	94c0012e 	bgeu	r18,r19,1006510 <__sfvwrite_r+0x31c>
 100650c:	9027883a 	mov	r19,r18
 1006510:	980d883a 	mov	r6,r19
 1006514:	e00b883a 	mov	r5,fp
 1006518:	10071280 	call	1007128 <memmove>
 100651c:	80800217 	ldw	r2,8(r16)
 1006520:	80c00017 	ldw	r3,0(r16)
 1006524:	14c5c83a 	sub	r2,r2,r19
 1006528:	1cc7883a 	add	r3,r3,r19
 100652c:	80800215 	stw	r2,8(r16)
 1006530:	80c00015 	stw	r3,0(r16)
 1006534:	10004326 	beq	r2,zero,1006644 <__sfvwrite_r+0x450>
 1006538:	9805883a 	mov	r2,r19
 100653c:	003f8606 	br	1006358 <__alt_data_end+0xff006358>
 1006540:	b00d883a 	mov	r6,r22
 1006544:	e00b883a 	mov	r5,fp
 1006548:	da000115 	stw	r8,4(sp)
 100654c:	10071280 	call	1007128 <memmove>
 1006550:	80800217 	ldw	r2,8(r16)
 1006554:	80c00017 	ldw	r3,0(r16)
 1006558:	da000117 	ldw	r8,4(sp)
 100655c:	1585c83a 	sub	r2,r2,r22
 1006560:	1dad883a 	add	r22,r3,r22
 1006564:	80800215 	stw	r2,8(r16)
 1006568:	85800015 	stw	r22,0(r16)
 100656c:	003fbf06 	br	100646c <__alt_data_end+0xff00646c>
 1006570:	81000017 	ldw	r4,0(r16)
 1006574:	9027883a 	mov	r19,r18
 1006578:	902f883a 	mov	r23,r18
 100657c:	003f6c06 	br	1006330 <__alt_data_end+0xff006330>
 1006580:	900d883a 	mov	r6,r18
 1006584:	01400284 	movi	r5,10
 1006588:	e009883a 	mov	r4,fp
 100658c:	10070440 	call	1007044 <memchr>
 1006590:	10003e26 	beq	r2,zero,100668c <__sfvwrite_r+0x498>
 1006594:	10800044 	addi	r2,r2,1
 1006598:	1727c83a 	sub	r19,r2,fp
 100659c:	02000044 	movi	r8,1
 10065a0:	003f9d06 	br	1006418 <__alt_data_end+0xff006418>
 10065a4:	80800517 	ldw	r2,20(r16)
 10065a8:	81400417 	ldw	r5,16(r16)
 10065ac:	81c00017 	ldw	r7,0(r16)
 10065b0:	10a7883a 	add	r19,r2,r2
 10065b4:	9885883a 	add	r2,r19,r2
 10065b8:	1026d7fa 	srli	r19,r2,31
 10065bc:	396dc83a 	sub	r22,r7,r5
 10065c0:	b1000044 	addi	r4,r22,1
 10065c4:	9885883a 	add	r2,r19,r2
 10065c8:	1027d07a 	srai	r19,r2,1
 10065cc:	2485883a 	add	r2,r4,r18
 10065d0:	980d883a 	mov	r6,r19
 10065d4:	9880022e 	bgeu	r19,r2,10065e0 <__sfvwrite_r+0x3ec>
 10065d8:	1027883a 	mov	r19,r2
 10065dc:	100d883a 	mov	r6,r2
 10065e0:	18c1000c 	andi	r3,r3,1024
 10065e4:	18001c26 	beq	r3,zero,1006658 <__sfvwrite_r+0x464>
 10065e8:	300b883a 	mov	r5,r6
 10065ec:	a809883a 	mov	r4,r21
 10065f0:	10068380 	call	1006838 <_malloc_r>
 10065f4:	102f883a 	mov	r23,r2
 10065f8:	10002926 	beq	r2,zero,10066a0 <__sfvwrite_r+0x4ac>
 10065fc:	81400417 	ldw	r5,16(r16)
 1006600:	b00d883a 	mov	r6,r22
 1006604:	1009883a 	mov	r4,r2
 1006608:	1005a780 	call	1005a78 <memcpy>
 100660c:	8080030b 	ldhu	r2,12(r16)
 1006610:	00fedfc4 	movi	r3,-1153
 1006614:	10c4703a 	and	r2,r2,r3
 1006618:	10802014 	ori	r2,r2,128
 100661c:	8080030d 	sth	r2,12(r16)
 1006620:	bd89883a 	add	r4,r23,r22
 1006624:	9d8fc83a 	sub	r7,r19,r22
 1006628:	85c00415 	stw	r23,16(r16)
 100662c:	84c00515 	stw	r19,20(r16)
 1006630:	81000015 	stw	r4,0(r16)
 1006634:	9027883a 	mov	r19,r18
 1006638:	81c00215 	stw	r7,8(r16)
 100663c:	902f883a 	mov	r23,r18
 1006640:	003f3b06 	br	1006330 <__alt_data_end+0xff006330>
 1006644:	800b883a 	mov	r5,r16
 1006648:	a809883a 	mov	r4,r21
 100664c:	1007ea00 	call	1007ea0 <_fflush_r>
 1006650:	103fb926 	beq	r2,zero,1006538 <__alt_data_end+0xff006538>
 1006654:	003f6506 	br	10063ec <__alt_data_end+0xff0063ec>
 1006658:	a809883a 	mov	r4,r21
 100665c:	10072840 	call	1007284 <_realloc_r>
 1006660:	102f883a 	mov	r23,r2
 1006664:	103fee1e 	bne	r2,zero,1006620 <__alt_data_end+0xff006620>
 1006668:	81400417 	ldw	r5,16(r16)
 100666c:	a809883a 	mov	r4,r21
 1006670:	10080500 	call	1008050 <_free_r>
 1006674:	8080030b 	ldhu	r2,12(r16)
 1006678:	00ffdfc4 	movi	r3,-129
 100667c:	1884703a 	and	r2,r3,r2
 1006680:	00c00304 	movi	r3,12
 1006684:	a8c00015 	stw	r3,0(r21)
 1006688:	003f5906 	br	10063f0 <__alt_data_end+0xff0063f0>
 100668c:	94c00044 	addi	r19,r18,1
 1006690:	02000044 	movi	r8,1
 1006694:	003f6006 	br	1006418 <__alt_data_end+0xff006418>
 1006698:	00bfffc4 	movi	r2,-1
 100669c:	003f0306 	br	10062ac <__alt_data_end+0xff0062ac>
 10066a0:	00800304 	movi	r2,12
 10066a4:	a8800015 	stw	r2,0(r21)
 10066a8:	8080030b 	ldhu	r2,12(r16)
 10066ac:	003f5006 	br	10063f0 <__alt_data_end+0xff0063f0>

010066b0 <_fwalk>:
 10066b0:	defff704 	addi	sp,sp,-36
 10066b4:	dd000415 	stw	r20,16(sp)
 10066b8:	dfc00815 	stw	ra,32(sp)
 10066bc:	ddc00715 	stw	r23,28(sp)
 10066c0:	dd800615 	stw	r22,24(sp)
 10066c4:	dd400515 	stw	r21,20(sp)
 10066c8:	dcc00315 	stw	r19,12(sp)
 10066cc:	dc800215 	stw	r18,8(sp)
 10066d0:	dc400115 	stw	r17,4(sp)
 10066d4:	dc000015 	stw	r16,0(sp)
 10066d8:	2500b804 	addi	r20,r4,736
 10066dc:	a0002326 	beq	r20,zero,100676c <_fwalk+0xbc>
 10066e0:	282b883a 	mov	r21,r5
 10066e4:	002f883a 	mov	r23,zero
 10066e8:	05800044 	movi	r22,1
 10066ec:	04ffffc4 	movi	r19,-1
 10066f0:	a4400117 	ldw	r17,4(r20)
 10066f4:	a4800217 	ldw	r18,8(r20)
 10066f8:	8c7fffc4 	addi	r17,r17,-1
 10066fc:	88000d16 	blt	r17,zero,1006734 <_fwalk+0x84>
 1006700:	94000304 	addi	r16,r18,12
 1006704:	94800384 	addi	r18,r18,14
 1006708:	8080000b 	ldhu	r2,0(r16)
 100670c:	8c7fffc4 	addi	r17,r17,-1
 1006710:	813ffd04 	addi	r4,r16,-12
 1006714:	b080042e 	bgeu	r22,r2,1006728 <_fwalk+0x78>
 1006718:	9080000f 	ldh	r2,0(r18)
 100671c:	14c00226 	beq	r2,r19,1006728 <_fwalk+0x78>
 1006720:	a83ee83a 	callr	r21
 1006724:	b8aeb03a 	or	r23,r23,r2
 1006728:	84001a04 	addi	r16,r16,104
 100672c:	94801a04 	addi	r18,r18,104
 1006730:	8cfff51e 	bne	r17,r19,1006708 <__alt_data_end+0xff006708>
 1006734:	a5000017 	ldw	r20,0(r20)
 1006738:	a03fed1e 	bne	r20,zero,10066f0 <__alt_data_end+0xff0066f0>
 100673c:	b805883a 	mov	r2,r23
 1006740:	dfc00817 	ldw	ra,32(sp)
 1006744:	ddc00717 	ldw	r23,28(sp)
 1006748:	dd800617 	ldw	r22,24(sp)
 100674c:	dd400517 	ldw	r21,20(sp)
 1006750:	dd000417 	ldw	r20,16(sp)
 1006754:	dcc00317 	ldw	r19,12(sp)
 1006758:	dc800217 	ldw	r18,8(sp)
 100675c:	dc400117 	ldw	r17,4(sp)
 1006760:	dc000017 	ldw	r16,0(sp)
 1006764:	dec00904 	addi	sp,sp,36
 1006768:	f800283a 	ret
 100676c:	002f883a 	mov	r23,zero
 1006770:	003ff206 	br	100673c <__alt_data_end+0xff00673c>

01006774 <_fwalk_reent>:
 1006774:	defff704 	addi	sp,sp,-36
 1006778:	dd000415 	stw	r20,16(sp)
 100677c:	dfc00815 	stw	ra,32(sp)
 1006780:	ddc00715 	stw	r23,28(sp)
 1006784:	dd800615 	stw	r22,24(sp)
 1006788:	dd400515 	stw	r21,20(sp)
 100678c:	dcc00315 	stw	r19,12(sp)
 1006790:	dc800215 	stw	r18,8(sp)
 1006794:	dc400115 	stw	r17,4(sp)
 1006798:	dc000015 	stw	r16,0(sp)
 100679c:	2500b804 	addi	r20,r4,736
 10067a0:	a0002326 	beq	r20,zero,1006830 <_fwalk_reent+0xbc>
 10067a4:	282b883a 	mov	r21,r5
 10067a8:	2027883a 	mov	r19,r4
 10067ac:	002f883a 	mov	r23,zero
 10067b0:	05800044 	movi	r22,1
 10067b4:	04bfffc4 	movi	r18,-1
 10067b8:	a4400117 	ldw	r17,4(r20)
 10067bc:	a4000217 	ldw	r16,8(r20)
 10067c0:	8c7fffc4 	addi	r17,r17,-1
 10067c4:	88000c16 	blt	r17,zero,10067f8 <_fwalk_reent+0x84>
 10067c8:	84000304 	addi	r16,r16,12
 10067cc:	8080000b 	ldhu	r2,0(r16)
 10067d0:	8c7fffc4 	addi	r17,r17,-1
 10067d4:	817ffd04 	addi	r5,r16,-12
 10067d8:	b080052e 	bgeu	r22,r2,10067f0 <_fwalk_reent+0x7c>
 10067dc:	8080008f 	ldh	r2,2(r16)
 10067e0:	9809883a 	mov	r4,r19
 10067e4:	14800226 	beq	r2,r18,10067f0 <_fwalk_reent+0x7c>
 10067e8:	a83ee83a 	callr	r21
 10067ec:	b8aeb03a 	or	r23,r23,r2
 10067f0:	84001a04 	addi	r16,r16,104
 10067f4:	8cbff51e 	bne	r17,r18,10067cc <__alt_data_end+0xff0067cc>
 10067f8:	a5000017 	ldw	r20,0(r20)
 10067fc:	a03fee1e 	bne	r20,zero,10067b8 <__alt_data_end+0xff0067b8>
 1006800:	b805883a 	mov	r2,r23
 1006804:	dfc00817 	ldw	ra,32(sp)
 1006808:	ddc00717 	ldw	r23,28(sp)
 100680c:	dd800617 	ldw	r22,24(sp)
 1006810:	dd400517 	ldw	r21,20(sp)
 1006814:	dd000417 	ldw	r20,16(sp)
 1006818:	dcc00317 	ldw	r19,12(sp)
 100681c:	dc800217 	ldw	r18,8(sp)
 1006820:	dc400117 	ldw	r17,4(sp)
 1006824:	dc000017 	ldw	r16,0(sp)
 1006828:	dec00904 	addi	sp,sp,36
 100682c:	f800283a 	ret
 1006830:	002f883a 	mov	r23,zero
 1006834:	003ff206 	br	1006800 <__alt_data_end+0xff006800>

01006838 <_malloc_r>:
 1006838:	defff504 	addi	sp,sp,-44
 100683c:	dc800315 	stw	r18,12(sp)
 1006840:	dfc00a15 	stw	ra,40(sp)
 1006844:	df000915 	stw	fp,36(sp)
 1006848:	ddc00815 	stw	r23,32(sp)
 100684c:	dd800715 	stw	r22,28(sp)
 1006850:	dd400615 	stw	r21,24(sp)
 1006854:	dd000515 	stw	r20,20(sp)
 1006858:	dcc00415 	stw	r19,16(sp)
 100685c:	dc400215 	stw	r17,8(sp)
 1006860:	dc000115 	stw	r16,4(sp)
 1006864:	288002c4 	addi	r2,r5,11
 1006868:	00c00584 	movi	r3,22
 100686c:	2025883a 	mov	r18,r4
 1006870:	18807f2e 	bgeu	r3,r2,1006a70 <_malloc_r+0x238>
 1006874:	047ffe04 	movi	r17,-8
 1006878:	1462703a 	and	r17,r2,r17
 100687c:	8800a316 	blt	r17,zero,1006b0c <_malloc_r+0x2d4>
 1006880:	8940a236 	bltu	r17,r5,1006b0c <_malloc_r+0x2d4>
 1006884:	1008f2c0 	call	1008f2c <__malloc_lock>
 1006888:	00807dc4 	movi	r2,503
 100688c:	1441e92e 	bgeu	r2,r17,1007034 <_malloc_r+0x7fc>
 1006890:	8804d27a 	srli	r2,r17,9
 1006894:	1000a126 	beq	r2,zero,1006b1c <_malloc_r+0x2e4>
 1006898:	00c00104 	movi	r3,4
 100689c:	18811e36 	bltu	r3,r2,1006d18 <_malloc_r+0x4e0>
 10068a0:	8804d1ba 	srli	r2,r17,6
 10068a4:	12000e44 	addi	r8,r2,57
 10068a8:	11c00e04 	addi	r7,r2,56
 10068ac:	4209883a 	add	r4,r8,r8
 10068b0:	04c04074 	movhi	r19,257
 10068b4:	2109883a 	add	r4,r4,r4
 10068b8:	9cee5804 	addi	r19,r19,-18080
 10068bc:	2109883a 	add	r4,r4,r4
 10068c0:	9909883a 	add	r4,r19,r4
 10068c4:	24000117 	ldw	r16,4(r4)
 10068c8:	213ffe04 	addi	r4,r4,-8
 10068cc:	24009726 	beq	r4,r16,1006b2c <_malloc_r+0x2f4>
 10068d0:	80800117 	ldw	r2,4(r16)
 10068d4:	01bfff04 	movi	r6,-4
 10068d8:	014003c4 	movi	r5,15
 10068dc:	1184703a 	and	r2,r2,r6
 10068e0:	1447c83a 	sub	r3,r2,r17
 10068e4:	28c00716 	blt	r5,r3,1006904 <_malloc_r+0xcc>
 10068e8:	1800920e 	bge	r3,zero,1006b34 <_malloc_r+0x2fc>
 10068ec:	84000317 	ldw	r16,12(r16)
 10068f0:	24008e26 	beq	r4,r16,1006b2c <_malloc_r+0x2f4>
 10068f4:	80800117 	ldw	r2,4(r16)
 10068f8:	1184703a 	and	r2,r2,r6
 10068fc:	1447c83a 	sub	r3,r2,r17
 1006900:	28fff90e 	bge	r5,r3,10068e8 <__alt_data_end+0xff0068e8>
 1006904:	3809883a 	mov	r4,r7
 1006908:	01804074 	movhi	r6,257
 100690c:	9c000417 	ldw	r16,16(r19)
 1006910:	31ae5804 	addi	r6,r6,-18080
 1006914:	32000204 	addi	r8,r6,8
 1006918:	82013426 	beq	r16,r8,1006dec <_malloc_r+0x5b4>
 100691c:	80c00117 	ldw	r3,4(r16)
 1006920:	00bfff04 	movi	r2,-4
 1006924:	188e703a 	and	r7,r3,r2
 1006928:	3c45c83a 	sub	r2,r7,r17
 100692c:	00c003c4 	movi	r3,15
 1006930:	18811f16 	blt	r3,r2,1006db0 <_malloc_r+0x578>
 1006934:	32000515 	stw	r8,20(r6)
 1006938:	32000415 	stw	r8,16(r6)
 100693c:	10007f0e 	bge	r2,zero,1006b3c <_malloc_r+0x304>
 1006940:	00807fc4 	movi	r2,511
 1006944:	11c0fd36 	bltu	r2,r7,1006d3c <_malloc_r+0x504>
 1006948:	3806d0fa 	srli	r3,r7,3
 100694c:	01c00044 	movi	r7,1
 1006950:	30800117 	ldw	r2,4(r6)
 1006954:	19400044 	addi	r5,r3,1
 1006958:	294b883a 	add	r5,r5,r5
 100695c:	1807d0ba 	srai	r3,r3,2
 1006960:	294b883a 	add	r5,r5,r5
 1006964:	294b883a 	add	r5,r5,r5
 1006968:	298b883a 	add	r5,r5,r6
 100696c:	38c6983a 	sll	r3,r7,r3
 1006970:	29c00017 	ldw	r7,0(r5)
 1006974:	2a7ffe04 	addi	r9,r5,-8
 1006978:	1886b03a 	or	r3,r3,r2
 100697c:	82400315 	stw	r9,12(r16)
 1006980:	81c00215 	stw	r7,8(r16)
 1006984:	30c00115 	stw	r3,4(r6)
 1006988:	2c000015 	stw	r16,0(r5)
 100698c:	3c000315 	stw	r16,12(r7)
 1006990:	2005d0ba 	srai	r2,r4,2
 1006994:	01400044 	movi	r5,1
 1006998:	288a983a 	sll	r5,r5,r2
 100699c:	19406f36 	bltu	r3,r5,1006b5c <_malloc_r+0x324>
 10069a0:	28c4703a 	and	r2,r5,r3
 10069a4:	10000a1e 	bne	r2,zero,10069d0 <_malloc_r+0x198>
 10069a8:	00bfff04 	movi	r2,-4
 10069ac:	294b883a 	add	r5,r5,r5
 10069b0:	2088703a 	and	r4,r4,r2
 10069b4:	28c4703a 	and	r2,r5,r3
 10069b8:	21000104 	addi	r4,r4,4
 10069bc:	1000041e 	bne	r2,zero,10069d0 <_malloc_r+0x198>
 10069c0:	294b883a 	add	r5,r5,r5
 10069c4:	28c4703a 	and	r2,r5,r3
 10069c8:	21000104 	addi	r4,r4,4
 10069cc:	103ffc26 	beq	r2,zero,10069c0 <__alt_data_end+0xff0069c0>
 10069d0:	02bfff04 	movi	r10,-4
 10069d4:	024003c4 	movi	r9,15
 10069d8:	21800044 	addi	r6,r4,1
 10069dc:	318d883a 	add	r6,r6,r6
 10069e0:	318d883a 	add	r6,r6,r6
 10069e4:	318d883a 	add	r6,r6,r6
 10069e8:	998d883a 	add	r6,r19,r6
 10069ec:	333ffe04 	addi	r12,r6,-8
 10069f0:	2017883a 	mov	r11,r4
 10069f4:	31800104 	addi	r6,r6,4
 10069f8:	34000017 	ldw	r16,0(r6)
 10069fc:	31fffd04 	addi	r7,r6,-12
 1006a00:	81c0041e 	bne	r16,r7,1006a14 <_malloc_r+0x1dc>
 1006a04:	0000fb06 	br	1006df4 <_malloc_r+0x5bc>
 1006a08:	1801030e 	bge	r3,zero,1006e18 <_malloc_r+0x5e0>
 1006a0c:	84000317 	ldw	r16,12(r16)
 1006a10:	81c0f826 	beq	r16,r7,1006df4 <_malloc_r+0x5bc>
 1006a14:	80800117 	ldw	r2,4(r16)
 1006a18:	1284703a 	and	r2,r2,r10
 1006a1c:	1447c83a 	sub	r3,r2,r17
 1006a20:	48fff90e 	bge	r9,r3,1006a08 <__alt_data_end+0xff006a08>
 1006a24:	80800317 	ldw	r2,12(r16)
 1006a28:	81000217 	ldw	r4,8(r16)
 1006a2c:	89400054 	ori	r5,r17,1
 1006a30:	81400115 	stw	r5,4(r16)
 1006a34:	20800315 	stw	r2,12(r4)
 1006a38:	11000215 	stw	r4,8(r2)
 1006a3c:	8463883a 	add	r17,r16,r17
 1006a40:	9c400515 	stw	r17,20(r19)
 1006a44:	9c400415 	stw	r17,16(r19)
 1006a48:	18800054 	ori	r2,r3,1
 1006a4c:	88800115 	stw	r2,4(r17)
 1006a50:	8a000315 	stw	r8,12(r17)
 1006a54:	8a000215 	stw	r8,8(r17)
 1006a58:	88e3883a 	add	r17,r17,r3
 1006a5c:	88c00015 	stw	r3,0(r17)
 1006a60:	9009883a 	mov	r4,r18
 1006a64:	1008f500 	call	1008f50 <__malloc_unlock>
 1006a68:	80800204 	addi	r2,r16,8
 1006a6c:	00001b06 	br	1006adc <_malloc_r+0x2a4>
 1006a70:	04400404 	movi	r17,16
 1006a74:	89402536 	bltu	r17,r5,1006b0c <_malloc_r+0x2d4>
 1006a78:	1008f2c0 	call	1008f2c <__malloc_lock>
 1006a7c:	00800184 	movi	r2,6
 1006a80:	01000084 	movi	r4,2
 1006a84:	04c04074 	movhi	r19,257
 1006a88:	1085883a 	add	r2,r2,r2
 1006a8c:	9cee5804 	addi	r19,r19,-18080
 1006a90:	1085883a 	add	r2,r2,r2
 1006a94:	9885883a 	add	r2,r19,r2
 1006a98:	14000117 	ldw	r16,4(r2)
 1006a9c:	10fffe04 	addi	r3,r2,-8
 1006aa0:	80c0d926 	beq	r16,r3,1006e08 <_malloc_r+0x5d0>
 1006aa4:	80c00117 	ldw	r3,4(r16)
 1006aa8:	81000317 	ldw	r4,12(r16)
 1006aac:	00bfff04 	movi	r2,-4
 1006ab0:	1884703a 	and	r2,r3,r2
 1006ab4:	81400217 	ldw	r5,8(r16)
 1006ab8:	8085883a 	add	r2,r16,r2
 1006abc:	10c00117 	ldw	r3,4(r2)
 1006ac0:	29000315 	stw	r4,12(r5)
 1006ac4:	21400215 	stw	r5,8(r4)
 1006ac8:	18c00054 	ori	r3,r3,1
 1006acc:	10c00115 	stw	r3,4(r2)
 1006ad0:	9009883a 	mov	r4,r18
 1006ad4:	1008f500 	call	1008f50 <__malloc_unlock>
 1006ad8:	80800204 	addi	r2,r16,8
 1006adc:	dfc00a17 	ldw	ra,40(sp)
 1006ae0:	df000917 	ldw	fp,36(sp)
 1006ae4:	ddc00817 	ldw	r23,32(sp)
 1006ae8:	dd800717 	ldw	r22,28(sp)
 1006aec:	dd400617 	ldw	r21,24(sp)
 1006af0:	dd000517 	ldw	r20,20(sp)
 1006af4:	dcc00417 	ldw	r19,16(sp)
 1006af8:	dc800317 	ldw	r18,12(sp)
 1006afc:	dc400217 	ldw	r17,8(sp)
 1006b00:	dc000117 	ldw	r16,4(sp)
 1006b04:	dec00b04 	addi	sp,sp,44
 1006b08:	f800283a 	ret
 1006b0c:	00800304 	movi	r2,12
 1006b10:	90800015 	stw	r2,0(r18)
 1006b14:	0005883a 	mov	r2,zero
 1006b18:	003ff006 	br	1006adc <__alt_data_end+0xff006adc>
 1006b1c:	01002004 	movi	r4,128
 1006b20:	02001004 	movi	r8,64
 1006b24:	01c00fc4 	movi	r7,63
 1006b28:	003f6106 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006b2c:	4009883a 	mov	r4,r8
 1006b30:	003f7506 	br	1006908 <__alt_data_end+0xff006908>
 1006b34:	81000317 	ldw	r4,12(r16)
 1006b38:	003fde06 	br	1006ab4 <__alt_data_end+0xff006ab4>
 1006b3c:	81c5883a 	add	r2,r16,r7
 1006b40:	11400117 	ldw	r5,4(r2)
 1006b44:	9009883a 	mov	r4,r18
 1006b48:	29400054 	ori	r5,r5,1
 1006b4c:	11400115 	stw	r5,4(r2)
 1006b50:	1008f500 	call	1008f50 <__malloc_unlock>
 1006b54:	80800204 	addi	r2,r16,8
 1006b58:	003fe006 	br	1006adc <__alt_data_end+0xff006adc>
 1006b5c:	9c000217 	ldw	r16,8(r19)
 1006b60:	00bfff04 	movi	r2,-4
 1006b64:	85800117 	ldw	r22,4(r16)
 1006b68:	b0ac703a 	and	r22,r22,r2
 1006b6c:	b4400336 	bltu	r22,r17,1006b7c <_malloc_r+0x344>
 1006b70:	b445c83a 	sub	r2,r22,r17
 1006b74:	00c003c4 	movi	r3,15
 1006b78:	18805d16 	blt	r3,r2,1006cf0 <_malloc_r+0x4b8>
 1006b7c:	05c04074 	movhi	r23,257
 1006b80:	00804074 	movhi	r2,257
 1006b84:	10baab04 	addi	r2,r2,-5460
 1006b88:	bdf3e404 	addi	r23,r23,-12400
 1006b8c:	15400017 	ldw	r21,0(r2)
 1006b90:	b8c00017 	ldw	r3,0(r23)
 1006b94:	00bfffc4 	movi	r2,-1
 1006b98:	858d883a 	add	r6,r16,r22
 1006b9c:	8d6b883a 	add	r21,r17,r21
 1006ba0:	1880ea26 	beq	r3,r2,1006f4c <_malloc_r+0x714>
 1006ba4:	ad4403c4 	addi	r21,r21,4111
 1006ba8:	00bc0004 	movi	r2,-4096
 1006bac:	a8aa703a 	and	r21,r21,r2
 1006bb0:	a80b883a 	mov	r5,r21
 1006bb4:	9009883a 	mov	r4,r18
 1006bb8:	d9800015 	stw	r6,0(sp)
 1006bbc:	10077e80 	call	10077e8 <_sbrk_r>
 1006bc0:	1029883a 	mov	r20,r2
 1006bc4:	00bfffc4 	movi	r2,-1
 1006bc8:	d9800017 	ldw	r6,0(sp)
 1006bcc:	a080e826 	beq	r20,r2,1006f70 <_malloc_r+0x738>
 1006bd0:	a180a636 	bltu	r20,r6,1006e6c <_malloc_r+0x634>
 1006bd4:	07006074 	movhi	fp,385
 1006bd8:	e73ae604 	addi	fp,fp,-5224
 1006bdc:	e0800017 	ldw	r2,0(fp)
 1006be0:	a887883a 	add	r3,r21,r2
 1006be4:	e0c00015 	stw	r3,0(fp)
 1006be8:	3500e626 	beq	r6,r20,1006f84 <_malloc_r+0x74c>
 1006bec:	b9000017 	ldw	r4,0(r23)
 1006bf0:	00bfffc4 	movi	r2,-1
 1006bf4:	2080ee26 	beq	r4,r2,1006fb0 <_malloc_r+0x778>
 1006bf8:	a185c83a 	sub	r2,r20,r6
 1006bfc:	10c5883a 	add	r2,r2,r3
 1006c00:	e0800015 	stw	r2,0(fp)
 1006c04:	a0c001cc 	andi	r3,r20,7
 1006c08:	1800bc26 	beq	r3,zero,1006efc <_malloc_r+0x6c4>
 1006c0c:	a0e9c83a 	sub	r20,r20,r3
 1006c10:	00840204 	movi	r2,4104
 1006c14:	a5000204 	addi	r20,r20,8
 1006c18:	10c7c83a 	sub	r3,r2,r3
 1006c1c:	a545883a 	add	r2,r20,r21
 1006c20:	1083ffcc 	andi	r2,r2,4095
 1006c24:	18abc83a 	sub	r21,r3,r2
 1006c28:	a80b883a 	mov	r5,r21
 1006c2c:	9009883a 	mov	r4,r18
 1006c30:	10077e80 	call	10077e8 <_sbrk_r>
 1006c34:	00ffffc4 	movi	r3,-1
 1006c38:	10c0e126 	beq	r2,r3,1006fc0 <_malloc_r+0x788>
 1006c3c:	1505c83a 	sub	r2,r2,r20
 1006c40:	1545883a 	add	r2,r2,r21
 1006c44:	10800054 	ori	r2,r2,1
 1006c48:	e0c00017 	ldw	r3,0(fp)
 1006c4c:	9d000215 	stw	r20,8(r19)
 1006c50:	a0800115 	stw	r2,4(r20)
 1006c54:	a8c7883a 	add	r3,r21,r3
 1006c58:	e0c00015 	stw	r3,0(fp)
 1006c5c:	84c00e26 	beq	r16,r19,1006c98 <_malloc_r+0x460>
 1006c60:	018003c4 	movi	r6,15
 1006c64:	3580a72e 	bgeu	r6,r22,1006f04 <_malloc_r+0x6cc>
 1006c68:	81400117 	ldw	r5,4(r16)
 1006c6c:	013ffe04 	movi	r4,-8
 1006c70:	b0bffd04 	addi	r2,r22,-12
 1006c74:	1104703a 	and	r2,r2,r4
 1006c78:	2900004c 	andi	r4,r5,1
 1006c7c:	2088b03a 	or	r4,r4,r2
 1006c80:	81000115 	stw	r4,4(r16)
 1006c84:	01400144 	movi	r5,5
 1006c88:	8089883a 	add	r4,r16,r2
 1006c8c:	21400115 	stw	r5,4(r4)
 1006c90:	21400215 	stw	r5,8(r4)
 1006c94:	3080cd36 	bltu	r6,r2,1006fcc <_malloc_r+0x794>
 1006c98:	00804074 	movhi	r2,257
 1006c9c:	10baaa04 	addi	r2,r2,-5464
 1006ca0:	11000017 	ldw	r4,0(r2)
 1006ca4:	20c0012e 	bgeu	r4,r3,1006cac <_malloc_r+0x474>
 1006ca8:	10c00015 	stw	r3,0(r2)
 1006cac:	00804074 	movhi	r2,257
 1006cb0:	10baa904 	addi	r2,r2,-5468
 1006cb4:	11000017 	ldw	r4,0(r2)
 1006cb8:	9c000217 	ldw	r16,8(r19)
 1006cbc:	20c0012e 	bgeu	r4,r3,1006cc4 <_malloc_r+0x48c>
 1006cc0:	10c00015 	stw	r3,0(r2)
 1006cc4:	80c00117 	ldw	r3,4(r16)
 1006cc8:	00bfff04 	movi	r2,-4
 1006ccc:	1886703a 	and	r3,r3,r2
 1006cd0:	1c45c83a 	sub	r2,r3,r17
 1006cd4:	1c400236 	bltu	r3,r17,1006ce0 <_malloc_r+0x4a8>
 1006cd8:	00c003c4 	movi	r3,15
 1006cdc:	18800416 	blt	r3,r2,1006cf0 <_malloc_r+0x4b8>
 1006ce0:	9009883a 	mov	r4,r18
 1006ce4:	1008f500 	call	1008f50 <__malloc_unlock>
 1006ce8:	0005883a 	mov	r2,zero
 1006cec:	003f7b06 	br	1006adc <__alt_data_end+0xff006adc>
 1006cf0:	88c00054 	ori	r3,r17,1
 1006cf4:	80c00115 	stw	r3,4(r16)
 1006cf8:	8463883a 	add	r17,r16,r17
 1006cfc:	10800054 	ori	r2,r2,1
 1006d00:	9c400215 	stw	r17,8(r19)
 1006d04:	88800115 	stw	r2,4(r17)
 1006d08:	9009883a 	mov	r4,r18
 1006d0c:	1008f500 	call	1008f50 <__malloc_unlock>
 1006d10:	80800204 	addi	r2,r16,8
 1006d14:	003f7106 	br	1006adc <__alt_data_end+0xff006adc>
 1006d18:	00c00504 	movi	r3,20
 1006d1c:	18804a2e 	bgeu	r3,r2,1006e48 <_malloc_r+0x610>
 1006d20:	00c01504 	movi	r3,84
 1006d24:	18806e36 	bltu	r3,r2,1006ee0 <_malloc_r+0x6a8>
 1006d28:	8804d33a 	srli	r2,r17,12
 1006d2c:	12001bc4 	addi	r8,r2,111
 1006d30:	11c01b84 	addi	r7,r2,110
 1006d34:	4209883a 	add	r4,r8,r8
 1006d38:	003edd06 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006d3c:	3804d27a 	srli	r2,r7,9
 1006d40:	00c00104 	movi	r3,4
 1006d44:	1880442e 	bgeu	r3,r2,1006e58 <_malloc_r+0x620>
 1006d48:	00c00504 	movi	r3,20
 1006d4c:	18808136 	bltu	r3,r2,1006f54 <_malloc_r+0x71c>
 1006d50:	11401704 	addi	r5,r2,92
 1006d54:	10c016c4 	addi	r3,r2,91
 1006d58:	294b883a 	add	r5,r5,r5
 1006d5c:	294b883a 	add	r5,r5,r5
 1006d60:	294b883a 	add	r5,r5,r5
 1006d64:	994b883a 	add	r5,r19,r5
 1006d68:	28800017 	ldw	r2,0(r5)
 1006d6c:	01804074 	movhi	r6,257
 1006d70:	297ffe04 	addi	r5,r5,-8
 1006d74:	31ae5804 	addi	r6,r6,-18080
 1006d78:	28806526 	beq	r5,r2,1006f10 <_malloc_r+0x6d8>
 1006d7c:	01bfff04 	movi	r6,-4
 1006d80:	10c00117 	ldw	r3,4(r2)
 1006d84:	1986703a 	and	r3,r3,r6
 1006d88:	38c0022e 	bgeu	r7,r3,1006d94 <_malloc_r+0x55c>
 1006d8c:	10800217 	ldw	r2,8(r2)
 1006d90:	28bffb1e 	bne	r5,r2,1006d80 <__alt_data_end+0xff006d80>
 1006d94:	11400317 	ldw	r5,12(r2)
 1006d98:	98c00117 	ldw	r3,4(r19)
 1006d9c:	81400315 	stw	r5,12(r16)
 1006da0:	80800215 	stw	r2,8(r16)
 1006da4:	2c000215 	stw	r16,8(r5)
 1006da8:	14000315 	stw	r16,12(r2)
 1006dac:	003ef806 	br	1006990 <__alt_data_end+0xff006990>
 1006db0:	88c00054 	ori	r3,r17,1
 1006db4:	80c00115 	stw	r3,4(r16)
 1006db8:	8463883a 	add	r17,r16,r17
 1006dbc:	34400515 	stw	r17,20(r6)
 1006dc0:	34400415 	stw	r17,16(r6)
 1006dc4:	10c00054 	ori	r3,r2,1
 1006dc8:	8a000315 	stw	r8,12(r17)
 1006dcc:	8a000215 	stw	r8,8(r17)
 1006dd0:	88c00115 	stw	r3,4(r17)
 1006dd4:	88a3883a 	add	r17,r17,r2
 1006dd8:	88800015 	stw	r2,0(r17)
 1006ddc:	9009883a 	mov	r4,r18
 1006de0:	1008f500 	call	1008f50 <__malloc_unlock>
 1006de4:	80800204 	addi	r2,r16,8
 1006de8:	003f3c06 	br	1006adc <__alt_data_end+0xff006adc>
 1006dec:	30c00117 	ldw	r3,4(r6)
 1006df0:	003ee706 	br	1006990 <__alt_data_end+0xff006990>
 1006df4:	5ac00044 	addi	r11,r11,1
 1006df8:	588000cc 	andi	r2,r11,3
 1006dfc:	31800204 	addi	r6,r6,8
 1006e00:	103efd1e 	bne	r2,zero,10069f8 <__alt_data_end+0xff0069f8>
 1006e04:	00002406 	br	1006e98 <_malloc_r+0x660>
 1006e08:	14000317 	ldw	r16,12(r2)
 1006e0c:	143f251e 	bne	r2,r16,1006aa4 <__alt_data_end+0xff006aa4>
 1006e10:	21000084 	addi	r4,r4,2
 1006e14:	003ebc06 	br	1006908 <__alt_data_end+0xff006908>
 1006e18:	8085883a 	add	r2,r16,r2
 1006e1c:	10c00117 	ldw	r3,4(r2)
 1006e20:	81000317 	ldw	r4,12(r16)
 1006e24:	81400217 	ldw	r5,8(r16)
 1006e28:	18c00054 	ori	r3,r3,1
 1006e2c:	10c00115 	stw	r3,4(r2)
 1006e30:	29000315 	stw	r4,12(r5)
 1006e34:	21400215 	stw	r5,8(r4)
 1006e38:	9009883a 	mov	r4,r18
 1006e3c:	1008f500 	call	1008f50 <__malloc_unlock>
 1006e40:	80800204 	addi	r2,r16,8
 1006e44:	003f2506 	br	1006adc <__alt_data_end+0xff006adc>
 1006e48:	12001704 	addi	r8,r2,92
 1006e4c:	11c016c4 	addi	r7,r2,91
 1006e50:	4209883a 	add	r4,r8,r8
 1006e54:	003e9606 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006e58:	3804d1ba 	srli	r2,r7,6
 1006e5c:	11400e44 	addi	r5,r2,57
 1006e60:	10c00e04 	addi	r3,r2,56
 1006e64:	294b883a 	add	r5,r5,r5
 1006e68:	003fbc06 	br	1006d5c <__alt_data_end+0xff006d5c>
 1006e6c:	84ff5926 	beq	r16,r19,1006bd4 <__alt_data_end+0xff006bd4>
 1006e70:	00804074 	movhi	r2,257
 1006e74:	10ae5804 	addi	r2,r2,-18080
 1006e78:	14000217 	ldw	r16,8(r2)
 1006e7c:	00bfff04 	movi	r2,-4
 1006e80:	80c00117 	ldw	r3,4(r16)
 1006e84:	1886703a 	and	r3,r3,r2
 1006e88:	003f9106 	br	1006cd0 <__alt_data_end+0xff006cd0>
 1006e8c:	60800217 	ldw	r2,8(r12)
 1006e90:	213fffc4 	addi	r4,r4,-1
 1006e94:	1300651e 	bne	r2,r12,100702c <_malloc_r+0x7f4>
 1006e98:	208000cc 	andi	r2,r4,3
 1006e9c:	633ffe04 	addi	r12,r12,-8
 1006ea0:	103ffa1e 	bne	r2,zero,1006e8c <__alt_data_end+0xff006e8c>
 1006ea4:	98800117 	ldw	r2,4(r19)
 1006ea8:	0146303a 	nor	r3,zero,r5
 1006eac:	1884703a 	and	r2,r3,r2
 1006eb0:	98800115 	stw	r2,4(r19)
 1006eb4:	294b883a 	add	r5,r5,r5
 1006eb8:	117f2836 	bltu	r2,r5,1006b5c <__alt_data_end+0xff006b5c>
 1006ebc:	283f2726 	beq	r5,zero,1006b5c <__alt_data_end+0xff006b5c>
 1006ec0:	2886703a 	and	r3,r5,r2
 1006ec4:	5809883a 	mov	r4,r11
 1006ec8:	183ec31e 	bne	r3,zero,10069d8 <__alt_data_end+0xff0069d8>
 1006ecc:	294b883a 	add	r5,r5,r5
 1006ed0:	2886703a 	and	r3,r5,r2
 1006ed4:	21000104 	addi	r4,r4,4
 1006ed8:	183ffc26 	beq	r3,zero,1006ecc <__alt_data_end+0xff006ecc>
 1006edc:	003ebe06 	br	10069d8 <__alt_data_end+0xff0069d8>
 1006ee0:	00c05504 	movi	r3,340
 1006ee4:	18801236 	bltu	r3,r2,1006f30 <_malloc_r+0x6f8>
 1006ee8:	8804d3fa 	srli	r2,r17,15
 1006eec:	12001e04 	addi	r8,r2,120
 1006ef0:	11c01dc4 	addi	r7,r2,119
 1006ef4:	4209883a 	add	r4,r8,r8
 1006ef8:	003e6d06 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006efc:	00c40004 	movi	r3,4096
 1006f00:	003f4606 	br	1006c1c <__alt_data_end+0xff006c1c>
 1006f04:	00800044 	movi	r2,1
 1006f08:	a0800115 	stw	r2,4(r20)
 1006f0c:	003f7406 	br	1006ce0 <__alt_data_end+0xff006ce0>
 1006f10:	1805d0ba 	srai	r2,r3,2
 1006f14:	01c00044 	movi	r7,1
 1006f18:	30c00117 	ldw	r3,4(r6)
 1006f1c:	388e983a 	sll	r7,r7,r2
 1006f20:	2805883a 	mov	r2,r5
 1006f24:	38c6b03a 	or	r3,r7,r3
 1006f28:	30c00115 	stw	r3,4(r6)
 1006f2c:	003f9b06 	br	1006d9c <__alt_data_end+0xff006d9c>
 1006f30:	00c15504 	movi	r3,1364
 1006f34:	18801a36 	bltu	r3,r2,1006fa0 <_malloc_r+0x768>
 1006f38:	8804d4ba 	srli	r2,r17,18
 1006f3c:	12001f44 	addi	r8,r2,125
 1006f40:	11c01f04 	addi	r7,r2,124
 1006f44:	4209883a 	add	r4,r8,r8
 1006f48:	003e5906 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006f4c:	ad400404 	addi	r21,r21,16
 1006f50:	003f1706 	br	1006bb0 <__alt_data_end+0xff006bb0>
 1006f54:	00c01504 	movi	r3,84
 1006f58:	18802336 	bltu	r3,r2,1006fe8 <_malloc_r+0x7b0>
 1006f5c:	3804d33a 	srli	r2,r7,12
 1006f60:	11401bc4 	addi	r5,r2,111
 1006f64:	10c01b84 	addi	r3,r2,110
 1006f68:	294b883a 	add	r5,r5,r5
 1006f6c:	003f7b06 	br	1006d5c <__alt_data_end+0xff006d5c>
 1006f70:	9c000217 	ldw	r16,8(r19)
 1006f74:	00bfff04 	movi	r2,-4
 1006f78:	80c00117 	ldw	r3,4(r16)
 1006f7c:	1886703a 	and	r3,r3,r2
 1006f80:	003f5306 	br	1006cd0 <__alt_data_end+0xff006cd0>
 1006f84:	3083ffcc 	andi	r2,r6,4095
 1006f88:	103f181e 	bne	r2,zero,1006bec <__alt_data_end+0xff006bec>
 1006f8c:	99000217 	ldw	r4,8(r19)
 1006f90:	b545883a 	add	r2,r22,r21
 1006f94:	10800054 	ori	r2,r2,1
 1006f98:	20800115 	stw	r2,4(r4)
 1006f9c:	003f3e06 	br	1006c98 <__alt_data_end+0xff006c98>
 1006fa0:	01003f84 	movi	r4,254
 1006fa4:	02001fc4 	movi	r8,127
 1006fa8:	01c01f84 	movi	r7,126
 1006fac:	003e4006 	br	10068b0 <__alt_data_end+0xff0068b0>
 1006fb0:	00804074 	movhi	r2,257
 1006fb4:	10b3e404 	addi	r2,r2,-12400
 1006fb8:	15000015 	stw	r20,0(r2)
 1006fbc:	003f1106 	br	1006c04 <__alt_data_end+0xff006c04>
 1006fc0:	00800044 	movi	r2,1
 1006fc4:	002b883a 	mov	r21,zero
 1006fc8:	003f1f06 	br	1006c48 <__alt_data_end+0xff006c48>
 1006fcc:	81400204 	addi	r5,r16,8
 1006fd0:	9009883a 	mov	r4,r18
 1006fd4:	10080500 	call	1008050 <_free_r>
 1006fd8:	00806074 	movhi	r2,385
 1006fdc:	10bae604 	addi	r2,r2,-5224
 1006fe0:	10c00017 	ldw	r3,0(r2)
 1006fe4:	003f2c06 	br	1006c98 <__alt_data_end+0xff006c98>
 1006fe8:	00c05504 	movi	r3,340
 1006fec:	18800536 	bltu	r3,r2,1007004 <_malloc_r+0x7cc>
 1006ff0:	3804d3fa 	srli	r2,r7,15
 1006ff4:	11401e04 	addi	r5,r2,120
 1006ff8:	10c01dc4 	addi	r3,r2,119
 1006ffc:	294b883a 	add	r5,r5,r5
 1007000:	003f5606 	br	1006d5c <__alt_data_end+0xff006d5c>
 1007004:	00c15504 	movi	r3,1364
 1007008:	18800536 	bltu	r3,r2,1007020 <_malloc_r+0x7e8>
 100700c:	3804d4ba 	srli	r2,r7,18
 1007010:	11401f44 	addi	r5,r2,125
 1007014:	10c01f04 	addi	r3,r2,124
 1007018:	294b883a 	add	r5,r5,r5
 100701c:	003f4f06 	br	1006d5c <__alt_data_end+0xff006d5c>
 1007020:	01403f84 	movi	r5,254
 1007024:	00c01f84 	movi	r3,126
 1007028:	003f4c06 	br	1006d5c <__alt_data_end+0xff006d5c>
 100702c:	98800117 	ldw	r2,4(r19)
 1007030:	003fa006 	br	1006eb4 <__alt_data_end+0xff006eb4>
 1007034:	8808d0fa 	srli	r4,r17,3
 1007038:	20800044 	addi	r2,r4,1
 100703c:	1085883a 	add	r2,r2,r2
 1007040:	003e9006 	br	1006a84 <__alt_data_end+0xff006a84>

01007044 <memchr>:
 1007044:	208000cc 	andi	r2,r4,3
 1007048:	280f883a 	mov	r7,r5
 100704c:	10003426 	beq	r2,zero,1007120 <memchr+0xdc>
 1007050:	30bfffc4 	addi	r2,r6,-1
 1007054:	30001a26 	beq	r6,zero,10070c0 <memchr+0x7c>
 1007058:	20c00003 	ldbu	r3,0(r4)
 100705c:	29803fcc 	andi	r6,r5,255
 1007060:	30c0051e 	bne	r6,r3,1007078 <memchr+0x34>
 1007064:	00001806 	br	10070c8 <memchr+0x84>
 1007068:	10001526 	beq	r2,zero,10070c0 <memchr+0x7c>
 100706c:	20c00003 	ldbu	r3,0(r4)
 1007070:	10bfffc4 	addi	r2,r2,-1
 1007074:	30c01426 	beq	r6,r3,10070c8 <memchr+0x84>
 1007078:	21000044 	addi	r4,r4,1
 100707c:	20c000cc 	andi	r3,r4,3
 1007080:	183ff91e 	bne	r3,zero,1007068 <__alt_data_end+0xff007068>
 1007084:	020000c4 	movi	r8,3
 1007088:	40801136 	bltu	r8,r2,10070d0 <memchr+0x8c>
 100708c:	10000c26 	beq	r2,zero,10070c0 <memchr+0x7c>
 1007090:	20c00003 	ldbu	r3,0(r4)
 1007094:	29403fcc 	andi	r5,r5,255
 1007098:	28c00b26 	beq	r5,r3,10070c8 <memchr+0x84>
 100709c:	20c00044 	addi	r3,r4,1
 10070a0:	39803fcc 	andi	r6,r7,255
 10070a4:	2089883a 	add	r4,r4,r2
 10070a8:	00000306 	br	10070b8 <memchr+0x74>
 10070ac:	18c00044 	addi	r3,r3,1
 10070b0:	197fffc3 	ldbu	r5,-1(r3)
 10070b4:	31400526 	beq	r6,r5,10070cc <memchr+0x88>
 10070b8:	1805883a 	mov	r2,r3
 10070bc:	20fffb1e 	bne	r4,r3,10070ac <__alt_data_end+0xff0070ac>
 10070c0:	0005883a 	mov	r2,zero
 10070c4:	f800283a 	ret
 10070c8:	2005883a 	mov	r2,r4
 10070cc:	f800283a 	ret
 10070d0:	28c03fcc 	andi	r3,r5,255
 10070d4:	1812923a 	slli	r9,r3,8
 10070d8:	02ffbff4 	movhi	r11,65279
 10070dc:	02a02074 	movhi	r10,32897
 10070e0:	48d2b03a 	or	r9,r9,r3
 10070e4:	4806943a 	slli	r3,r9,16
 10070e8:	5affbfc4 	addi	r11,r11,-257
 10070ec:	52a02004 	addi	r10,r10,-32640
 10070f0:	48d2b03a 	or	r9,r9,r3
 10070f4:	20c00017 	ldw	r3,0(r4)
 10070f8:	48c6f03a 	xor	r3,r9,r3
 10070fc:	1acd883a 	add	r6,r3,r11
 1007100:	00c6303a 	nor	r3,zero,r3
 1007104:	30c6703a 	and	r3,r6,r3
 1007108:	1a86703a 	and	r3,r3,r10
 100710c:	183fe01e 	bne	r3,zero,1007090 <__alt_data_end+0xff007090>
 1007110:	10bfff04 	addi	r2,r2,-4
 1007114:	21000104 	addi	r4,r4,4
 1007118:	40bff636 	bltu	r8,r2,10070f4 <__alt_data_end+0xff0070f4>
 100711c:	003fdb06 	br	100708c <__alt_data_end+0xff00708c>
 1007120:	3005883a 	mov	r2,r6
 1007124:	003fd706 	br	1007084 <__alt_data_end+0xff007084>

01007128 <memmove>:
 1007128:	2005883a 	mov	r2,r4
 100712c:	29000b2e 	bgeu	r5,r4,100715c <memmove+0x34>
 1007130:	298f883a 	add	r7,r5,r6
 1007134:	21c0092e 	bgeu	r4,r7,100715c <memmove+0x34>
 1007138:	2187883a 	add	r3,r4,r6
 100713c:	198bc83a 	sub	r5,r3,r6
 1007140:	30004826 	beq	r6,zero,1007264 <memmove+0x13c>
 1007144:	39ffffc4 	addi	r7,r7,-1
 1007148:	39000003 	ldbu	r4,0(r7)
 100714c:	18ffffc4 	addi	r3,r3,-1
 1007150:	19000005 	stb	r4,0(r3)
 1007154:	28fffb1e 	bne	r5,r3,1007144 <__alt_data_end+0xff007144>
 1007158:	f800283a 	ret
 100715c:	00c003c4 	movi	r3,15
 1007160:	1980412e 	bgeu	r3,r6,1007268 <memmove+0x140>
 1007164:	2886b03a 	or	r3,r5,r2
 1007168:	18c000cc 	andi	r3,r3,3
 100716c:	1800401e 	bne	r3,zero,1007270 <memmove+0x148>
 1007170:	33fffc04 	addi	r15,r6,-16
 1007174:	781ed13a 	srli	r15,r15,4
 1007178:	28c00104 	addi	r3,r5,4
 100717c:	13400104 	addi	r13,r2,4
 1007180:	781c913a 	slli	r14,r15,4
 1007184:	2b000204 	addi	r12,r5,8
 1007188:	12c00204 	addi	r11,r2,8
 100718c:	73800504 	addi	r14,r14,20
 1007190:	2a800304 	addi	r10,r5,12
 1007194:	12400304 	addi	r9,r2,12
 1007198:	2b9d883a 	add	r14,r5,r14
 100719c:	2811883a 	mov	r8,r5
 10071a0:	100f883a 	mov	r7,r2
 10071a4:	41000017 	ldw	r4,0(r8)
 10071a8:	39c00404 	addi	r7,r7,16
 10071ac:	18c00404 	addi	r3,r3,16
 10071b0:	393ffc15 	stw	r4,-16(r7)
 10071b4:	193ffc17 	ldw	r4,-16(r3)
 10071b8:	6b400404 	addi	r13,r13,16
 10071bc:	5ac00404 	addi	r11,r11,16
 10071c0:	693ffc15 	stw	r4,-16(r13)
 10071c4:	61000017 	ldw	r4,0(r12)
 10071c8:	4a400404 	addi	r9,r9,16
 10071cc:	42000404 	addi	r8,r8,16
 10071d0:	593ffc15 	stw	r4,-16(r11)
 10071d4:	51000017 	ldw	r4,0(r10)
 10071d8:	63000404 	addi	r12,r12,16
 10071dc:	52800404 	addi	r10,r10,16
 10071e0:	493ffc15 	stw	r4,-16(r9)
 10071e4:	1bbfef1e 	bne	r3,r14,10071a4 <__alt_data_end+0xff0071a4>
 10071e8:	79000044 	addi	r4,r15,1
 10071ec:	2008913a 	slli	r4,r4,4
 10071f0:	328003cc 	andi	r10,r6,15
 10071f4:	02c000c4 	movi	r11,3
 10071f8:	1107883a 	add	r3,r2,r4
 10071fc:	290b883a 	add	r5,r5,r4
 1007200:	5a801e2e 	bgeu	r11,r10,100727c <memmove+0x154>
 1007204:	1813883a 	mov	r9,r3
 1007208:	2811883a 	mov	r8,r5
 100720c:	500f883a 	mov	r7,r10
 1007210:	41000017 	ldw	r4,0(r8)
 1007214:	4a400104 	addi	r9,r9,4
 1007218:	39ffff04 	addi	r7,r7,-4
 100721c:	493fff15 	stw	r4,-4(r9)
 1007220:	42000104 	addi	r8,r8,4
 1007224:	59fffa36 	bltu	r11,r7,1007210 <__alt_data_end+0xff007210>
 1007228:	513fff04 	addi	r4,r10,-4
 100722c:	2008d0ba 	srli	r4,r4,2
 1007230:	318000cc 	andi	r6,r6,3
 1007234:	21000044 	addi	r4,r4,1
 1007238:	2109883a 	add	r4,r4,r4
 100723c:	2109883a 	add	r4,r4,r4
 1007240:	1907883a 	add	r3,r3,r4
 1007244:	290b883a 	add	r5,r5,r4
 1007248:	30000b26 	beq	r6,zero,1007278 <memmove+0x150>
 100724c:	198d883a 	add	r6,r3,r6
 1007250:	29c00003 	ldbu	r7,0(r5)
 1007254:	18c00044 	addi	r3,r3,1
 1007258:	29400044 	addi	r5,r5,1
 100725c:	19ffffc5 	stb	r7,-1(r3)
 1007260:	19bffb1e 	bne	r3,r6,1007250 <__alt_data_end+0xff007250>
 1007264:	f800283a 	ret
 1007268:	1007883a 	mov	r3,r2
 100726c:	003ff606 	br	1007248 <__alt_data_end+0xff007248>
 1007270:	1007883a 	mov	r3,r2
 1007274:	003ff506 	br	100724c <__alt_data_end+0xff00724c>
 1007278:	f800283a 	ret
 100727c:	500d883a 	mov	r6,r10
 1007280:	003ff106 	br	1007248 <__alt_data_end+0xff007248>

01007284 <_realloc_r>:
 1007284:	defff604 	addi	sp,sp,-40
 1007288:	dc800215 	stw	r18,8(sp)
 100728c:	dfc00915 	stw	ra,36(sp)
 1007290:	df000815 	stw	fp,32(sp)
 1007294:	ddc00715 	stw	r23,28(sp)
 1007298:	dd800615 	stw	r22,24(sp)
 100729c:	dd400515 	stw	r21,20(sp)
 10072a0:	dd000415 	stw	r20,16(sp)
 10072a4:	dcc00315 	stw	r19,12(sp)
 10072a8:	dc400115 	stw	r17,4(sp)
 10072ac:	dc000015 	stw	r16,0(sp)
 10072b0:	3025883a 	mov	r18,r6
 10072b4:	2800b726 	beq	r5,zero,1007594 <_realloc_r+0x310>
 10072b8:	282b883a 	mov	r21,r5
 10072bc:	2029883a 	mov	r20,r4
 10072c0:	1008f2c0 	call	1008f2c <__malloc_lock>
 10072c4:	a8bfff17 	ldw	r2,-4(r21)
 10072c8:	043fff04 	movi	r16,-4
 10072cc:	90c002c4 	addi	r3,r18,11
 10072d0:	01000584 	movi	r4,22
 10072d4:	acfffe04 	addi	r19,r21,-8
 10072d8:	1420703a 	and	r16,r2,r16
 10072dc:	20c0332e 	bgeu	r4,r3,10073ac <_realloc_r+0x128>
 10072e0:	047ffe04 	movi	r17,-8
 10072e4:	1c62703a 	and	r17,r3,r17
 10072e8:	8807883a 	mov	r3,r17
 10072ec:	88005816 	blt	r17,zero,1007450 <_realloc_r+0x1cc>
 10072f0:	8c805736 	bltu	r17,r18,1007450 <_realloc_r+0x1cc>
 10072f4:	80c0300e 	bge	r16,r3,10073b8 <_realloc_r+0x134>
 10072f8:	07004074 	movhi	fp,257
 10072fc:	e72e5804 	addi	fp,fp,-18080
 1007300:	e1c00217 	ldw	r7,8(fp)
 1007304:	9c09883a 	add	r4,r19,r16
 1007308:	22000117 	ldw	r8,4(r4)
 100730c:	21c06326 	beq	r4,r7,100749c <_realloc_r+0x218>
 1007310:	017fff84 	movi	r5,-2
 1007314:	414a703a 	and	r5,r8,r5
 1007318:	214b883a 	add	r5,r4,r5
 100731c:	29800117 	ldw	r6,4(r5)
 1007320:	3180004c 	andi	r6,r6,1
 1007324:	30003f26 	beq	r6,zero,1007424 <_realloc_r+0x1a0>
 1007328:	1080004c 	andi	r2,r2,1
 100732c:	10008326 	beq	r2,zero,100753c <_realloc_r+0x2b8>
 1007330:	900b883a 	mov	r5,r18
 1007334:	a009883a 	mov	r4,r20
 1007338:	10068380 	call	1006838 <_malloc_r>
 100733c:	1025883a 	mov	r18,r2
 1007340:	10011e26 	beq	r2,zero,10077bc <_realloc_r+0x538>
 1007344:	a93fff17 	ldw	r4,-4(r21)
 1007348:	10fffe04 	addi	r3,r2,-8
 100734c:	00bfff84 	movi	r2,-2
 1007350:	2084703a 	and	r2,r4,r2
 1007354:	9885883a 	add	r2,r19,r2
 1007358:	1880ee26 	beq	r3,r2,1007714 <_realloc_r+0x490>
 100735c:	81bfff04 	addi	r6,r16,-4
 1007360:	00800904 	movi	r2,36
 1007364:	1180b836 	bltu	r2,r6,1007648 <_realloc_r+0x3c4>
 1007368:	00c004c4 	movi	r3,19
 100736c:	19809636 	bltu	r3,r6,10075c8 <_realloc_r+0x344>
 1007370:	9005883a 	mov	r2,r18
 1007374:	a807883a 	mov	r3,r21
 1007378:	19000017 	ldw	r4,0(r3)
 100737c:	11000015 	stw	r4,0(r2)
 1007380:	19000117 	ldw	r4,4(r3)
 1007384:	11000115 	stw	r4,4(r2)
 1007388:	18c00217 	ldw	r3,8(r3)
 100738c:	10c00215 	stw	r3,8(r2)
 1007390:	a80b883a 	mov	r5,r21
 1007394:	a009883a 	mov	r4,r20
 1007398:	10080500 	call	1008050 <_free_r>
 100739c:	a009883a 	mov	r4,r20
 10073a0:	1008f500 	call	1008f50 <__malloc_unlock>
 10073a4:	9005883a 	mov	r2,r18
 10073a8:	00001206 	br	10073f4 <_realloc_r+0x170>
 10073ac:	00c00404 	movi	r3,16
 10073b0:	1823883a 	mov	r17,r3
 10073b4:	003fce06 	br	10072f0 <__alt_data_end+0xff0072f0>
 10073b8:	a825883a 	mov	r18,r21
 10073bc:	8445c83a 	sub	r2,r16,r17
 10073c0:	00c003c4 	movi	r3,15
 10073c4:	18802636 	bltu	r3,r2,1007460 <_realloc_r+0x1dc>
 10073c8:	99800117 	ldw	r6,4(r19)
 10073cc:	9c07883a 	add	r3,r19,r16
 10073d0:	3180004c 	andi	r6,r6,1
 10073d4:	3420b03a 	or	r16,r6,r16
 10073d8:	9c000115 	stw	r16,4(r19)
 10073dc:	18800117 	ldw	r2,4(r3)
 10073e0:	10800054 	ori	r2,r2,1
 10073e4:	18800115 	stw	r2,4(r3)
 10073e8:	a009883a 	mov	r4,r20
 10073ec:	1008f500 	call	1008f50 <__malloc_unlock>
 10073f0:	9005883a 	mov	r2,r18
 10073f4:	dfc00917 	ldw	ra,36(sp)
 10073f8:	df000817 	ldw	fp,32(sp)
 10073fc:	ddc00717 	ldw	r23,28(sp)
 1007400:	dd800617 	ldw	r22,24(sp)
 1007404:	dd400517 	ldw	r21,20(sp)
 1007408:	dd000417 	ldw	r20,16(sp)
 100740c:	dcc00317 	ldw	r19,12(sp)
 1007410:	dc800217 	ldw	r18,8(sp)
 1007414:	dc400117 	ldw	r17,4(sp)
 1007418:	dc000017 	ldw	r16,0(sp)
 100741c:	dec00a04 	addi	sp,sp,40
 1007420:	f800283a 	ret
 1007424:	017fff04 	movi	r5,-4
 1007428:	414a703a 	and	r5,r8,r5
 100742c:	814d883a 	add	r6,r16,r5
 1007430:	30c01f16 	blt	r6,r3,10074b0 <_realloc_r+0x22c>
 1007434:	20800317 	ldw	r2,12(r4)
 1007438:	20c00217 	ldw	r3,8(r4)
 100743c:	a825883a 	mov	r18,r21
 1007440:	3021883a 	mov	r16,r6
 1007444:	18800315 	stw	r2,12(r3)
 1007448:	10c00215 	stw	r3,8(r2)
 100744c:	003fdb06 	br	10073bc <__alt_data_end+0xff0073bc>
 1007450:	00800304 	movi	r2,12
 1007454:	a0800015 	stw	r2,0(r20)
 1007458:	0005883a 	mov	r2,zero
 100745c:	003fe506 	br	10073f4 <__alt_data_end+0xff0073f4>
 1007460:	98c00117 	ldw	r3,4(r19)
 1007464:	9c4b883a 	add	r5,r19,r17
 1007468:	11000054 	ori	r4,r2,1
 100746c:	18c0004c 	andi	r3,r3,1
 1007470:	1c62b03a 	or	r17,r3,r17
 1007474:	9c400115 	stw	r17,4(r19)
 1007478:	29000115 	stw	r4,4(r5)
 100747c:	2885883a 	add	r2,r5,r2
 1007480:	10c00117 	ldw	r3,4(r2)
 1007484:	29400204 	addi	r5,r5,8
 1007488:	a009883a 	mov	r4,r20
 100748c:	18c00054 	ori	r3,r3,1
 1007490:	10c00115 	stw	r3,4(r2)
 1007494:	10080500 	call	1008050 <_free_r>
 1007498:	003fd306 	br	10073e8 <__alt_data_end+0xff0073e8>
 100749c:	017fff04 	movi	r5,-4
 10074a0:	414a703a 	and	r5,r8,r5
 10074a4:	89800404 	addi	r6,r17,16
 10074a8:	8151883a 	add	r8,r16,r5
 10074ac:	4180590e 	bge	r8,r6,1007614 <_realloc_r+0x390>
 10074b0:	1080004c 	andi	r2,r2,1
 10074b4:	103f9e1e 	bne	r2,zero,1007330 <__alt_data_end+0xff007330>
 10074b8:	adbffe17 	ldw	r22,-8(r21)
 10074bc:	00bfff04 	movi	r2,-4
 10074c0:	9dadc83a 	sub	r22,r19,r22
 10074c4:	b1800117 	ldw	r6,4(r22)
 10074c8:	3084703a 	and	r2,r6,r2
 10074cc:	20002026 	beq	r4,zero,1007550 <_realloc_r+0x2cc>
 10074d0:	80af883a 	add	r23,r16,r2
 10074d4:	b96f883a 	add	r23,r23,r5
 10074d8:	21c05f26 	beq	r4,r7,1007658 <_realloc_r+0x3d4>
 10074dc:	b8c01c16 	blt	r23,r3,1007550 <_realloc_r+0x2cc>
 10074e0:	20800317 	ldw	r2,12(r4)
 10074e4:	20c00217 	ldw	r3,8(r4)
 10074e8:	81bfff04 	addi	r6,r16,-4
 10074ec:	01000904 	movi	r4,36
 10074f0:	18800315 	stw	r2,12(r3)
 10074f4:	10c00215 	stw	r3,8(r2)
 10074f8:	b0c00217 	ldw	r3,8(r22)
 10074fc:	b0800317 	ldw	r2,12(r22)
 1007500:	b4800204 	addi	r18,r22,8
 1007504:	18800315 	stw	r2,12(r3)
 1007508:	10c00215 	stw	r3,8(r2)
 100750c:	21801b36 	bltu	r4,r6,100757c <_realloc_r+0x2f8>
 1007510:	008004c4 	movi	r2,19
 1007514:	1180352e 	bgeu	r2,r6,10075ec <_realloc_r+0x368>
 1007518:	a8800017 	ldw	r2,0(r21)
 100751c:	b0800215 	stw	r2,8(r22)
 1007520:	a8800117 	ldw	r2,4(r21)
 1007524:	b0800315 	stw	r2,12(r22)
 1007528:	008006c4 	movi	r2,27
 100752c:	11807f36 	bltu	r2,r6,100772c <_realloc_r+0x4a8>
 1007530:	b0800404 	addi	r2,r22,16
 1007534:	ad400204 	addi	r21,r21,8
 1007538:	00002d06 	br	10075f0 <_realloc_r+0x36c>
 100753c:	adbffe17 	ldw	r22,-8(r21)
 1007540:	00bfff04 	movi	r2,-4
 1007544:	9dadc83a 	sub	r22,r19,r22
 1007548:	b1000117 	ldw	r4,4(r22)
 100754c:	2084703a 	and	r2,r4,r2
 1007550:	b03f7726 	beq	r22,zero,1007330 <__alt_data_end+0xff007330>
 1007554:	80af883a 	add	r23,r16,r2
 1007558:	b8ff7516 	blt	r23,r3,1007330 <__alt_data_end+0xff007330>
 100755c:	b0800317 	ldw	r2,12(r22)
 1007560:	b0c00217 	ldw	r3,8(r22)
 1007564:	81bfff04 	addi	r6,r16,-4
 1007568:	01000904 	movi	r4,36
 100756c:	18800315 	stw	r2,12(r3)
 1007570:	10c00215 	stw	r3,8(r2)
 1007574:	b4800204 	addi	r18,r22,8
 1007578:	21bfe52e 	bgeu	r4,r6,1007510 <__alt_data_end+0xff007510>
 100757c:	a80b883a 	mov	r5,r21
 1007580:	9009883a 	mov	r4,r18
 1007584:	10071280 	call	1007128 <memmove>
 1007588:	b821883a 	mov	r16,r23
 100758c:	b027883a 	mov	r19,r22
 1007590:	003f8a06 	br	10073bc <__alt_data_end+0xff0073bc>
 1007594:	300b883a 	mov	r5,r6
 1007598:	dfc00917 	ldw	ra,36(sp)
 100759c:	df000817 	ldw	fp,32(sp)
 10075a0:	ddc00717 	ldw	r23,28(sp)
 10075a4:	dd800617 	ldw	r22,24(sp)
 10075a8:	dd400517 	ldw	r21,20(sp)
 10075ac:	dd000417 	ldw	r20,16(sp)
 10075b0:	dcc00317 	ldw	r19,12(sp)
 10075b4:	dc800217 	ldw	r18,8(sp)
 10075b8:	dc400117 	ldw	r17,4(sp)
 10075bc:	dc000017 	ldw	r16,0(sp)
 10075c0:	dec00a04 	addi	sp,sp,40
 10075c4:	10068381 	jmpi	1006838 <_malloc_r>
 10075c8:	a8c00017 	ldw	r3,0(r21)
 10075cc:	90c00015 	stw	r3,0(r18)
 10075d0:	a8c00117 	ldw	r3,4(r21)
 10075d4:	90c00115 	stw	r3,4(r18)
 10075d8:	00c006c4 	movi	r3,27
 10075dc:	19804536 	bltu	r3,r6,10076f4 <_realloc_r+0x470>
 10075e0:	90800204 	addi	r2,r18,8
 10075e4:	a8c00204 	addi	r3,r21,8
 10075e8:	003f6306 	br	1007378 <__alt_data_end+0xff007378>
 10075ec:	9005883a 	mov	r2,r18
 10075f0:	a8c00017 	ldw	r3,0(r21)
 10075f4:	b821883a 	mov	r16,r23
 10075f8:	b027883a 	mov	r19,r22
 10075fc:	10c00015 	stw	r3,0(r2)
 1007600:	a8c00117 	ldw	r3,4(r21)
 1007604:	10c00115 	stw	r3,4(r2)
 1007608:	a8c00217 	ldw	r3,8(r21)
 100760c:	10c00215 	stw	r3,8(r2)
 1007610:	003f6a06 	br	10073bc <__alt_data_end+0xff0073bc>
 1007614:	9c67883a 	add	r19,r19,r17
 1007618:	4445c83a 	sub	r2,r8,r17
 100761c:	e4c00215 	stw	r19,8(fp)
 1007620:	10800054 	ori	r2,r2,1
 1007624:	98800115 	stw	r2,4(r19)
 1007628:	a8bfff17 	ldw	r2,-4(r21)
 100762c:	a009883a 	mov	r4,r20
 1007630:	1080004c 	andi	r2,r2,1
 1007634:	1462b03a 	or	r17,r2,r17
 1007638:	ac7fff15 	stw	r17,-4(r21)
 100763c:	1008f500 	call	1008f50 <__malloc_unlock>
 1007640:	a805883a 	mov	r2,r21
 1007644:	003f6b06 	br	10073f4 <__alt_data_end+0xff0073f4>
 1007648:	a80b883a 	mov	r5,r21
 100764c:	9009883a 	mov	r4,r18
 1007650:	10071280 	call	1007128 <memmove>
 1007654:	003f4e06 	br	1007390 <__alt_data_end+0xff007390>
 1007658:	89000404 	addi	r4,r17,16
 100765c:	b93fbc16 	blt	r23,r4,1007550 <__alt_data_end+0xff007550>
 1007660:	b0800317 	ldw	r2,12(r22)
 1007664:	b0c00217 	ldw	r3,8(r22)
 1007668:	81bfff04 	addi	r6,r16,-4
 100766c:	01000904 	movi	r4,36
 1007670:	18800315 	stw	r2,12(r3)
 1007674:	10c00215 	stw	r3,8(r2)
 1007678:	b4800204 	addi	r18,r22,8
 100767c:	21804336 	bltu	r4,r6,100778c <_realloc_r+0x508>
 1007680:	008004c4 	movi	r2,19
 1007684:	11803f2e 	bgeu	r2,r6,1007784 <_realloc_r+0x500>
 1007688:	a8800017 	ldw	r2,0(r21)
 100768c:	b0800215 	stw	r2,8(r22)
 1007690:	a8800117 	ldw	r2,4(r21)
 1007694:	b0800315 	stw	r2,12(r22)
 1007698:	008006c4 	movi	r2,27
 100769c:	11803f36 	bltu	r2,r6,100779c <_realloc_r+0x518>
 10076a0:	b0800404 	addi	r2,r22,16
 10076a4:	ad400204 	addi	r21,r21,8
 10076a8:	a8c00017 	ldw	r3,0(r21)
 10076ac:	10c00015 	stw	r3,0(r2)
 10076b0:	a8c00117 	ldw	r3,4(r21)
 10076b4:	10c00115 	stw	r3,4(r2)
 10076b8:	a8c00217 	ldw	r3,8(r21)
 10076bc:	10c00215 	stw	r3,8(r2)
 10076c0:	b447883a 	add	r3,r22,r17
 10076c4:	bc45c83a 	sub	r2,r23,r17
 10076c8:	e0c00215 	stw	r3,8(fp)
 10076cc:	10800054 	ori	r2,r2,1
 10076d0:	18800115 	stw	r2,4(r3)
 10076d4:	b0800117 	ldw	r2,4(r22)
 10076d8:	a009883a 	mov	r4,r20
 10076dc:	1080004c 	andi	r2,r2,1
 10076e0:	1462b03a 	or	r17,r2,r17
 10076e4:	b4400115 	stw	r17,4(r22)
 10076e8:	1008f500 	call	1008f50 <__malloc_unlock>
 10076ec:	9005883a 	mov	r2,r18
 10076f0:	003f4006 	br	10073f4 <__alt_data_end+0xff0073f4>
 10076f4:	a8c00217 	ldw	r3,8(r21)
 10076f8:	90c00215 	stw	r3,8(r18)
 10076fc:	a8c00317 	ldw	r3,12(r21)
 1007700:	90c00315 	stw	r3,12(r18)
 1007704:	30801126 	beq	r6,r2,100774c <_realloc_r+0x4c8>
 1007708:	90800404 	addi	r2,r18,16
 100770c:	a8c00404 	addi	r3,r21,16
 1007710:	003f1906 	br	1007378 <__alt_data_end+0xff007378>
 1007714:	90ffff17 	ldw	r3,-4(r18)
 1007718:	00bfff04 	movi	r2,-4
 100771c:	a825883a 	mov	r18,r21
 1007720:	1884703a 	and	r2,r3,r2
 1007724:	80a1883a 	add	r16,r16,r2
 1007728:	003f2406 	br	10073bc <__alt_data_end+0xff0073bc>
 100772c:	a8800217 	ldw	r2,8(r21)
 1007730:	b0800415 	stw	r2,16(r22)
 1007734:	a8800317 	ldw	r2,12(r21)
 1007738:	b0800515 	stw	r2,20(r22)
 100773c:	31000a26 	beq	r6,r4,1007768 <_realloc_r+0x4e4>
 1007740:	b0800604 	addi	r2,r22,24
 1007744:	ad400404 	addi	r21,r21,16
 1007748:	003fa906 	br	10075f0 <__alt_data_end+0xff0075f0>
 100774c:	a9000417 	ldw	r4,16(r21)
 1007750:	90800604 	addi	r2,r18,24
 1007754:	a8c00604 	addi	r3,r21,24
 1007758:	91000415 	stw	r4,16(r18)
 100775c:	a9000517 	ldw	r4,20(r21)
 1007760:	91000515 	stw	r4,20(r18)
 1007764:	003f0406 	br	1007378 <__alt_data_end+0xff007378>
 1007768:	a8c00417 	ldw	r3,16(r21)
 100776c:	ad400604 	addi	r21,r21,24
 1007770:	b0800804 	addi	r2,r22,32
 1007774:	b0c00615 	stw	r3,24(r22)
 1007778:	a8ffff17 	ldw	r3,-4(r21)
 100777c:	b0c00715 	stw	r3,28(r22)
 1007780:	003f9b06 	br	10075f0 <__alt_data_end+0xff0075f0>
 1007784:	9005883a 	mov	r2,r18
 1007788:	003fc706 	br	10076a8 <__alt_data_end+0xff0076a8>
 100778c:	a80b883a 	mov	r5,r21
 1007790:	9009883a 	mov	r4,r18
 1007794:	10071280 	call	1007128 <memmove>
 1007798:	003fc906 	br	10076c0 <__alt_data_end+0xff0076c0>
 100779c:	a8800217 	ldw	r2,8(r21)
 10077a0:	b0800415 	stw	r2,16(r22)
 10077a4:	a8800317 	ldw	r2,12(r21)
 10077a8:	b0800515 	stw	r2,20(r22)
 10077ac:	31000726 	beq	r6,r4,10077cc <_realloc_r+0x548>
 10077b0:	b0800604 	addi	r2,r22,24
 10077b4:	ad400404 	addi	r21,r21,16
 10077b8:	003fbb06 	br	10076a8 <__alt_data_end+0xff0076a8>
 10077bc:	a009883a 	mov	r4,r20
 10077c0:	1008f500 	call	1008f50 <__malloc_unlock>
 10077c4:	0005883a 	mov	r2,zero
 10077c8:	003f0a06 	br	10073f4 <__alt_data_end+0xff0073f4>
 10077cc:	a8c00417 	ldw	r3,16(r21)
 10077d0:	ad400604 	addi	r21,r21,24
 10077d4:	b0800804 	addi	r2,r22,32
 10077d8:	b0c00615 	stw	r3,24(r22)
 10077dc:	a8ffff17 	ldw	r3,-4(r21)
 10077e0:	b0c00715 	stw	r3,28(r22)
 10077e4:	003fb006 	br	10076a8 <__alt_data_end+0xff0076a8>

010077e8 <_sbrk_r>:
 10077e8:	defffd04 	addi	sp,sp,-12
 10077ec:	dc000015 	stw	r16,0(sp)
 10077f0:	04004074 	movhi	r16,257
 10077f4:	dc400115 	stw	r17,4(sp)
 10077f8:	843aac04 	addi	r16,r16,-5456
 10077fc:	2023883a 	mov	r17,r4
 1007800:	2809883a 	mov	r4,r5
 1007804:	dfc00215 	stw	ra,8(sp)
 1007808:	80000015 	stw	zero,0(r16)
 100780c:	10091100 	call	1009110 <sbrk>
 1007810:	00ffffc4 	movi	r3,-1
 1007814:	10c00526 	beq	r2,r3,100782c <_sbrk_r+0x44>
 1007818:	dfc00217 	ldw	ra,8(sp)
 100781c:	dc400117 	ldw	r17,4(sp)
 1007820:	dc000017 	ldw	r16,0(sp)
 1007824:	dec00304 	addi	sp,sp,12
 1007828:	f800283a 	ret
 100782c:	80c00017 	ldw	r3,0(r16)
 1007830:	183ff926 	beq	r3,zero,1007818 <__alt_data_end+0xff007818>
 1007834:	88c00015 	stw	r3,0(r17)
 1007838:	003ff706 	br	1007818 <__alt_data_end+0xff007818>

0100783c <__sread>:
 100783c:	defffe04 	addi	sp,sp,-8
 1007840:	dc000015 	stw	r16,0(sp)
 1007844:	2821883a 	mov	r16,r5
 1007848:	2940038f 	ldh	r5,14(r5)
 100784c:	dfc00115 	stw	ra,4(sp)
 1007850:	100857c0 	call	100857c <_read_r>
 1007854:	10000716 	blt	r2,zero,1007874 <__sread+0x38>
 1007858:	80c01417 	ldw	r3,80(r16)
 100785c:	1887883a 	add	r3,r3,r2
 1007860:	80c01415 	stw	r3,80(r16)
 1007864:	dfc00117 	ldw	ra,4(sp)
 1007868:	dc000017 	ldw	r16,0(sp)
 100786c:	dec00204 	addi	sp,sp,8
 1007870:	f800283a 	ret
 1007874:	80c0030b 	ldhu	r3,12(r16)
 1007878:	18fbffcc 	andi	r3,r3,61439
 100787c:	80c0030d 	sth	r3,12(r16)
 1007880:	dfc00117 	ldw	ra,4(sp)
 1007884:	dc000017 	ldw	r16,0(sp)
 1007888:	dec00204 	addi	sp,sp,8
 100788c:	f800283a 	ret

01007890 <__seofread>:
 1007890:	0005883a 	mov	r2,zero
 1007894:	f800283a 	ret

01007898 <__swrite>:
 1007898:	2880030b 	ldhu	r2,12(r5)
 100789c:	defffb04 	addi	sp,sp,-20
 10078a0:	dcc00315 	stw	r19,12(sp)
 10078a4:	dc800215 	stw	r18,8(sp)
 10078a8:	dc400115 	stw	r17,4(sp)
 10078ac:	dc000015 	stw	r16,0(sp)
 10078b0:	dfc00415 	stw	ra,16(sp)
 10078b4:	10c0400c 	andi	r3,r2,256
 10078b8:	2821883a 	mov	r16,r5
 10078bc:	2023883a 	mov	r17,r4
 10078c0:	3025883a 	mov	r18,r6
 10078c4:	3827883a 	mov	r19,r7
 10078c8:	18000526 	beq	r3,zero,10078e0 <__swrite+0x48>
 10078cc:	2940038f 	ldh	r5,14(r5)
 10078d0:	01c00084 	movi	r7,2
 10078d4:	000d883a 	mov	r6,zero
 10078d8:	10083600 	call	1008360 <_lseek_r>
 10078dc:	8080030b 	ldhu	r2,12(r16)
 10078e0:	8140038f 	ldh	r5,14(r16)
 10078e4:	10bbffcc 	andi	r2,r2,61439
 10078e8:	980f883a 	mov	r7,r19
 10078ec:	900d883a 	mov	r6,r18
 10078f0:	8809883a 	mov	r4,r17
 10078f4:	8080030d 	sth	r2,12(r16)
 10078f8:	dfc00417 	ldw	ra,16(sp)
 10078fc:	dcc00317 	ldw	r19,12(sp)
 1007900:	dc800217 	ldw	r18,8(sp)
 1007904:	dc400117 	ldw	r17,4(sp)
 1007908:	dc000017 	ldw	r16,0(sp)
 100790c:	dec00504 	addi	sp,sp,20
 1007910:	10079781 	jmpi	1007978 <_write_r>

01007914 <__sseek>:
 1007914:	defffe04 	addi	sp,sp,-8
 1007918:	dc000015 	stw	r16,0(sp)
 100791c:	2821883a 	mov	r16,r5
 1007920:	2940038f 	ldh	r5,14(r5)
 1007924:	dfc00115 	stw	ra,4(sp)
 1007928:	10083600 	call	1008360 <_lseek_r>
 100792c:	00ffffc4 	movi	r3,-1
 1007930:	10c00826 	beq	r2,r3,1007954 <__sseek+0x40>
 1007934:	80c0030b 	ldhu	r3,12(r16)
 1007938:	80801415 	stw	r2,80(r16)
 100793c:	18c40014 	ori	r3,r3,4096
 1007940:	80c0030d 	sth	r3,12(r16)
 1007944:	dfc00117 	ldw	ra,4(sp)
 1007948:	dc000017 	ldw	r16,0(sp)
 100794c:	dec00204 	addi	sp,sp,8
 1007950:	f800283a 	ret
 1007954:	80c0030b 	ldhu	r3,12(r16)
 1007958:	18fbffcc 	andi	r3,r3,61439
 100795c:	80c0030d 	sth	r3,12(r16)
 1007960:	dfc00117 	ldw	ra,4(sp)
 1007964:	dc000017 	ldw	r16,0(sp)
 1007968:	dec00204 	addi	sp,sp,8
 100796c:	f800283a 	ret

01007970 <__sclose>:
 1007970:	2940038f 	ldh	r5,14(r5)
 1007974:	1007b2c1 	jmpi	1007b2c <_close_r>

01007978 <_write_r>:
 1007978:	defffd04 	addi	sp,sp,-12
 100797c:	2805883a 	mov	r2,r5
 1007980:	dc000015 	stw	r16,0(sp)
 1007984:	04004074 	movhi	r16,257
 1007988:	dc400115 	stw	r17,4(sp)
 100798c:	300b883a 	mov	r5,r6
 1007990:	843aac04 	addi	r16,r16,-5456
 1007994:	2023883a 	mov	r17,r4
 1007998:	380d883a 	mov	r6,r7
 100799c:	1009883a 	mov	r4,r2
 10079a0:	dfc00215 	stw	ra,8(sp)
 10079a4:	80000015 	stw	zero,0(r16)
 10079a8:	10091fc0 	call	10091fc <write>
 10079ac:	00ffffc4 	movi	r3,-1
 10079b0:	10c00526 	beq	r2,r3,10079c8 <_write_r+0x50>
 10079b4:	dfc00217 	ldw	ra,8(sp)
 10079b8:	dc400117 	ldw	r17,4(sp)
 10079bc:	dc000017 	ldw	r16,0(sp)
 10079c0:	dec00304 	addi	sp,sp,12
 10079c4:	f800283a 	ret
 10079c8:	80c00017 	ldw	r3,0(r16)
 10079cc:	183ff926 	beq	r3,zero,10079b4 <__alt_data_end+0xff0079b4>
 10079d0:	88c00015 	stw	r3,0(r17)
 10079d4:	003ff706 	br	10079b4 <__alt_data_end+0xff0079b4>

010079d8 <__swsetup_r>:
 10079d8:	00804074 	movhi	r2,257
 10079dc:	defffd04 	addi	sp,sp,-12
 10079e0:	10b3e304 	addi	r2,r2,-12404
 10079e4:	dc400115 	stw	r17,4(sp)
 10079e8:	2023883a 	mov	r17,r4
 10079ec:	11000017 	ldw	r4,0(r2)
 10079f0:	dc000015 	stw	r16,0(sp)
 10079f4:	dfc00215 	stw	ra,8(sp)
 10079f8:	2821883a 	mov	r16,r5
 10079fc:	20000226 	beq	r4,zero,1007a08 <__swsetup_r+0x30>
 1007a00:	20800e17 	ldw	r2,56(r4)
 1007a04:	10003126 	beq	r2,zero,1007acc <__swsetup_r+0xf4>
 1007a08:	8080030b 	ldhu	r2,12(r16)
 1007a0c:	10c0020c 	andi	r3,r2,8
 1007a10:	1009883a 	mov	r4,r2
 1007a14:	18000f26 	beq	r3,zero,1007a54 <__swsetup_r+0x7c>
 1007a18:	80c00417 	ldw	r3,16(r16)
 1007a1c:	18001526 	beq	r3,zero,1007a74 <__swsetup_r+0x9c>
 1007a20:	1100004c 	andi	r4,r2,1
 1007a24:	20001c1e 	bne	r4,zero,1007a98 <__swsetup_r+0xc0>
 1007a28:	1080008c 	andi	r2,r2,2
 1007a2c:	1000291e 	bne	r2,zero,1007ad4 <__swsetup_r+0xfc>
 1007a30:	80800517 	ldw	r2,20(r16)
 1007a34:	80800215 	stw	r2,8(r16)
 1007a38:	18001c26 	beq	r3,zero,1007aac <__swsetup_r+0xd4>
 1007a3c:	0005883a 	mov	r2,zero
 1007a40:	dfc00217 	ldw	ra,8(sp)
 1007a44:	dc400117 	ldw	r17,4(sp)
 1007a48:	dc000017 	ldw	r16,0(sp)
 1007a4c:	dec00304 	addi	sp,sp,12
 1007a50:	f800283a 	ret
 1007a54:	2080040c 	andi	r2,r4,16
 1007a58:	10002e26 	beq	r2,zero,1007b14 <__swsetup_r+0x13c>
 1007a5c:	2080010c 	andi	r2,r4,4
 1007a60:	10001e1e 	bne	r2,zero,1007adc <__swsetup_r+0x104>
 1007a64:	80c00417 	ldw	r3,16(r16)
 1007a68:	20800214 	ori	r2,r4,8
 1007a6c:	8080030d 	sth	r2,12(r16)
 1007a70:	183feb1e 	bne	r3,zero,1007a20 <__alt_data_end+0xff007a20>
 1007a74:	1100a00c 	andi	r4,r2,640
 1007a78:	01408004 	movi	r5,512
 1007a7c:	217fe826 	beq	r4,r5,1007a20 <__alt_data_end+0xff007a20>
 1007a80:	800b883a 	mov	r5,r16
 1007a84:	8809883a 	mov	r4,r17
 1007a88:	10083c00 	call	10083c0 <__smakebuf_r>
 1007a8c:	8080030b 	ldhu	r2,12(r16)
 1007a90:	80c00417 	ldw	r3,16(r16)
 1007a94:	003fe206 	br	1007a20 <__alt_data_end+0xff007a20>
 1007a98:	80800517 	ldw	r2,20(r16)
 1007a9c:	80000215 	stw	zero,8(r16)
 1007aa0:	0085c83a 	sub	r2,zero,r2
 1007aa4:	80800615 	stw	r2,24(r16)
 1007aa8:	183fe41e 	bne	r3,zero,1007a3c <__alt_data_end+0xff007a3c>
 1007aac:	80c0030b 	ldhu	r3,12(r16)
 1007ab0:	0005883a 	mov	r2,zero
 1007ab4:	1900200c 	andi	r4,r3,128
 1007ab8:	203fe126 	beq	r4,zero,1007a40 <__alt_data_end+0xff007a40>
 1007abc:	18c01014 	ori	r3,r3,64
 1007ac0:	80c0030d 	sth	r3,12(r16)
 1007ac4:	00bfffc4 	movi	r2,-1
 1007ac8:	003fdd06 	br	1007a40 <__alt_data_end+0xff007a40>
 1007acc:	10061a40 	call	10061a4 <__sinit>
 1007ad0:	003fcd06 	br	1007a08 <__alt_data_end+0xff007a08>
 1007ad4:	0005883a 	mov	r2,zero
 1007ad8:	003fd606 	br	1007a34 <__alt_data_end+0xff007a34>
 1007adc:	81400c17 	ldw	r5,48(r16)
 1007ae0:	28000626 	beq	r5,zero,1007afc <__swsetup_r+0x124>
 1007ae4:	80801004 	addi	r2,r16,64
 1007ae8:	28800326 	beq	r5,r2,1007af8 <__swsetup_r+0x120>
 1007aec:	8809883a 	mov	r4,r17
 1007af0:	10080500 	call	1008050 <_free_r>
 1007af4:	8100030b 	ldhu	r4,12(r16)
 1007af8:	80000c15 	stw	zero,48(r16)
 1007afc:	80c00417 	ldw	r3,16(r16)
 1007b00:	00bff6c4 	movi	r2,-37
 1007b04:	1108703a 	and	r4,r2,r4
 1007b08:	80000115 	stw	zero,4(r16)
 1007b0c:	80c00015 	stw	r3,0(r16)
 1007b10:	003fd506 	br	1007a68 <__alt_data_end+0xff007a68>
 1007b14:	00800244 	movi	r2,9
 1007b18:	88800015 	stw	r2,0(r17)
 1007b1c:	20801014 	ori	r2,r4,64
 1007b20:	8080030d 	sth	r2,12(r16)
 1007b24:	00bfffc4 	movi	r2,-1
 1007b28:	003fc506 	br	1007a40 <__alt_data_end+0xff007a40>

01007b2c <_close_r>:
 1007b2c:	defffd04 	addi	sp,sp,-12
 1007b30:	dc000015 	stw	r16,0(sp)
 1007b34:	04004074 	movhi	r16,257
 1007b38:	dc400115 	stw	r17,4(sp)
 1007b3c:	843aac04 	addi	r16,r16,-5456
 1007b40:	2023883a 	mov	r17,r4
 1007b44:	2809883a 	mov	r4,r5
 1007b48:	dfc00215 	stw	ra,8(sp)
 1007b4c:	80000015 	stw	zero,0(r16)
 1007b50:	100887c0 	call	100887c <close>
 1007b54:	00ffffc4 	movi	r3,-1
 1007b58:	10c00526 	beq	r2,r3,1007b70 <_close_r+0x44>
 1007b5c:	dfc00217 	ldw	ra,8(sp)
 1007b60:	dc400117 	ldw	r17,4(sp)
 1007b64:	dc000017 	ldw	r16,0(sp)
 1007b68:	dec00304 	addi	sp,sp,12
 1007b6c:	f800283a 	ret
 1007b70:	80c00017 	ldw	r3,0(r16)
 1007b74:	183ff926 	beq	r3,zero,1007b5c <__alt_data_end+0xff007b5c>
 1007b78:	88c00015 	stw	r3,0(r17)
 1007b7c:	003ff706 	br	1007b5c <__alt_data_end+0xff007b5c>

01007b80 <_fclose_r>:
 1007b80:	28003926 	beq	r5,zero,1007c68 <_fclose_r+0xe8>
 1007b84:	defffc04 	addi	sp,sp,-16
 1007b88:	dc400115 	stw	r17,4(sp)
 1007b8c:	dc000015 	stw	r16,0(sp)
 1007b90:	dfc00315 	stw	ra,12(sp)
 1007b94:	dc800215 	stw	r18,8(sp)
 1007b98:	2023883a 	mov	r17,r4
 1007b9c:	2821883a 	mov	r16,r5
 1007ba0:	20000226 	beq	r4,zero,1007bac <_fclose_r+0x2c>
 1007ba4:	20800e17 	ldw	r2,56(r4)
 1007ba8:	10002726 	beq	r2,zero,1007c48 <_fclose_r+0xc8>
 1007bac:	8080030f 	ldh	r2,12(r16)
 1007bb0:	1000071e 	bne	r2,zero,1007bd0 <_fclose_r+0x50>
 1007bb4:	0005883a 	mov	r2,zero
 1007bb8:	dfc00317 	ldw	ra,12(sp)
 1007bbc:	dc800217 	ldw	r18,8(sp)
 1007bc0:	dc400117 	ldw	r17,4(sp)
 1007bc4:	dc000017 	ldw	r16,0(sp)
 1007bc8:	dec00404 	addi	sp,sp,16
 1007bcc:	f800283a 	ret
 1007bd0:	800b883a 	mov	r5,r16
 1007bd4:	8809883a 	mov	r4,r17
 1007bd8:	1007c840 	call	1007c84 <__sflush_r>
 1007bdc:	1025883a 	mov	r18,r2
 1007be0:	80800b17 	ldw	r2,44(r16)
 1007be4:	10000426 	beq	r2,zero,1007bf8 <_fclose_r+0x78>
 1007be8:	81400717 	ldw	r5,28(r16)
 1007bec:	8809883a 	mov	r4,r17
 1007bf0:	103ee83a 	callr	r2
 1007bf4:	10001616 	blt	r2,zero,1007c50 <_fclose_r+0xd0>
 1007bf8:	8080030b 	ldhu	r2,12(r16)
 1007bfc:	1080200c 	andi	r2,r2,128
 1007c00:	1000151e 	bne	r2,zero,1007c58 <_fclose_r+0xd8>
 1007c04:	81400c17 	ldw	r5,48(r16)
 1007c08:	28000526 	beq	r5,zero,1007c20 <_fclose_r+0xa0>
 1007c0c:	80801004 	addi	r2,r16,64
 1007c10:	28800226 	beq	r5,r2,1007c1c <_fclose_r+0x9c>
 1007c14:	8809883a 	mov	r4,r17
 1007c18:	10080500 	call	1008050 <_free_r>
 1007c1c:	80000c15 	stw	zero,48(r16)
 1007c20:	81401117 	ldw	r5,68(r16)
 1007c24:	28000326 	beq	r5,zero,1007c34 <_fclose_r+0xb4>
 1007c28:	8809883a 	mov	r4,r17
 1007c2c:	10080500 	call	1008050 <_free_r>
 1007c30:	80001115 	stw	zero,68(r16)
 1007c34:	10061b40 	call	10061b4 <__sfp_lock_acquire>
 1007c38:	8000030d 	sth	zero,12(r16)
 1007c3c:	10061b80 	call	10061b8 <__sfp_lock_release>
 1007c40:	9005883a 	mov	r2,r18
 1007c44:	003fdc06 	br	1007bb8 <__alt_data_end+0xff007bb8>
 1007c48:	10061a40 	call	10061a4 <__sinit>
 1007c4c:	003fd706 	br	1007bac <__alt_data_end+0xff007bac>
 1007c50:	04bfffc4 	movi	r18,-1
 1007c54:	003fe806 	br	1007bf8 <__alt_data_end+0xff007bf8>
 1007c58:	81400417 	ldw	r5,16(r16)
 1007c5c:	8809883a 	mov	r4,r17
 1007c60:	10080500 	call	1008050 <_free_r>
 1007c64:	003fe706 	br	1007c04 <__alt_data_end+0xff007c04>
 1007c68:	0005883a 	mov	r2,zero
 1007c6c:	f800283a 	ret

01007c70 <fclose>:
 1007c70:	00804074 	movhi	r2,257
 1007c74:	10b3e304 	addi	r2,r2,-12404
 1007c78:	200b883a 	mov	r5,r4
 1007c7c:	11000017 	ldw	r4,0(r2)
 1007c80:	1007b801 	jmpi	1007b80 <_fclose_r>

01007c84 <__sflush_r>:
 1007c84:	2880030b 	ldhu	r2,12(r5)
 1007c88:	defffb04 	addi	sp,sp,-20
 1007c8c:	dcc00315 	stw	r19,12(sp)
 1007c90:	dc400115 	stw	r17,4(sp)
 1007c94:	dfc00415 	stw	ra,16(sp)
 1007c98:	dc800215 	stw	r18,8(sp)
 1007c9c:	dc000015 	stw	r16,0(sp)
 1007ca0:	10c0020c 	andi	r3,r2,8
 1007ca4:	2823883a 	mov	r17,r5
 1007ca8:	2027883a 	mov	r19,r4
 1007cac:	1800311e 	bne	r3,zero,1007d74 <__sflush_r+0xf0>
 1007cb0:	28c00117 	ldw	r3,4(r5)
 1007cb4:	10820014 	ori	r2,r2,2048
 1007cb8:	2880030d 	sth	r2,12(r5)
 1007cbc:	00c04b0e 	bge	zero,r3,1007dec <__sflush_r+0x168>
 1007cc0:	8a000a17 	ldw	r8,40(r17)
 1007cc4:	40002326 	beq	r8,zero,1007d54 <__sflush_r+0xd0>
 1007cc8:	9c000017 	ldw	r16,0(r19)
 1007ccc:	10c4000c 	andi	r3,r2,4096
 1007cd0:	98000015 	stw	zero,0(r19)
 1007cd4:	18004826 	beq	r3,zero,1007df8 <__sflush_r+0x174>
 1007cd8:	89801417 	ldw	r6,80(r17)
 1007cdc:	10c0010c 	andi	r3,r2,4
 1007ce0:	18000626 	beq	r3,zero,1007cfc <__sflush_r+0x78>
 1007ce4:	88c00117 	ldw	r3,4(r17)
 1007ce8:	88800c17 	ldw	r2,48(r17)
 1007cec:	30cdc83a 	sub	r6,r6,r3
 1007cf0:	10000226 	beq	r2,zero,1007cfc <__sflush_r+0x78>
 1007cf4:	88800f17 	ldw	r2,60(r17)
 1007cf8:	308dc83a 	sub	r6,r6,r2
 1007cfc:	89400717 	ldw	r5,28(r17)
 1007d00:	000f883a 	mov	r7,zero
 1007d04:	9809883a 	mov	r4,r19
 1007d08:	403ee83a 	callr	r8
 1007d0c:	00ffffc4 	movi	r3,-1
 1007d10:	10c04426 	beq	r2,r3,1007e24 <__sflush_r+0x1a0>
 1007d14:	88c0030b 	ldhu	r3,12(r17)
 1007d18:	89000417 	ldw	r4,16(r17)
 1007d1c:	88000115 	stw	zero,4(r17)
 1007d20:	197dffcc 	andi	r5,r3,63487
 1007d24:	8940030d 	sth	r5,12(r17)
 1007d28:	89000015 	stw	r4,0(r17)
 1007d2c:	18c4000c 	andi	r3,r3,4096
 1007d30:	18002c1e 	bne	r3,zero,1007de4 <__sflush_r+0x160>
 1007d34:	89400c17 	ldw	r5,48(r17)
 1007d38:	9c000015 	stw	r16,0(r19)
 1007d3c:	28000526 	beq	r5,zero,1007d54 <__sflush_r+0xd0>
 1007d40:	88801004 	addi	r2,r17,64
 1007d44:	28800226 	beq	r5,r2,1007d50 <__sflush_r+0xcc>
 1007d48:	9809883a 	mov	r4,r19
 1007d4c:	10080500 	call	1008050 <_free_r>
 1007d50:	88000c15 	stw	zero,48(r17)
 1007d54:	0005883a 	mov	r2,zero
 1007d58:	dfc00417 	ldw	ra,16(sp)
 1007d5c:	dcc00317 	ldw	r19,12(sp)
 1007d60:	dc800217 	ldw	r18,8(sp)
 1007d64:	dc400117 	ldw	r17,4(sp)
 1007d68:	dc000017 	ldw	r16,0(sp)
 1007d6c:	dec00504 	addi	sp,sp,20
 1007d70:	f800283a 	ret
 1007d74:	2c800417 	ldw	r18,16(r5)
 1007d78:	903ff626 	beq	r18,zero,1007d54 <__alt_data_end+0xff007d54>
 1007d7c:	2c000017 	ldw	r16,0(r5)
 1007d80:	108000cc 	andi	r2,r2,3
 1007d84:	2c800015 	stw	r18,0(r5)
 1007d88:	84a1c83a 	sub	r16,r16,r18
 1007d8c:	1000131e 	bne	r2,zero,1007ddc <__sflush_r+0x158>
 1007d90:	28800517 	ldw	r2,20(r5)
 1007d94:	88800215 	stw	r2,8(r17)
 1007d98:	04000316 	blt	zero,r16,1007da8 <__sflush_r+0x124>
 1007d9c:	003fed06 	br	1007d54 <__alt_data_end+0xff007d54>
 1007da0:	90a5883a 	add	r18,r18,r2
 1007da4:	043feb0e 	bge	zero,r16,1007d54 <__alt_data_end+0xff007d54>
 1007da8:	88800917 	ldw	r2,36(r17)
 1007dac:	89400717 	ldw	r5,28(r17)
 1007db0:	800f883a 	mov	r7,r16
 1007db4:	900d883a 	mov	r6,r18
 1007db8:	9809883a 	mov	r4,r19
 1007dbc:	103ee83a 	callr	r2
 1007dc0:	80a1c83a 	sub	r16,r16,r2
 1007dc4:	00bff616 	blt	zero,r2,1007da0 <__alt_data_end+0xff007da0>
 1007dc8:	88c0030b 	ldhu	r3,12(r17)
 1007dcc:	00bfffc4 	movi	r2,-1
 1007dd0:	18c01014 	ori	r3,r3,64
 1007dd4:	88c0030d 	sth	r3,12(r17)
 1007dd8:	003fdf06 	br	1007d58 <__alt_data_end+0xff007d58>
 1007ddc:	0005883a 	mov	r2,zero
 1007de0:	003fec06 	br	1007d94 <__alt_data_end+0xff007d94>
 1007de4:	88801415 	stw	r2,80(r17)
 1007de8:	003fd206 	br	1007d34 <__alt_data_end+0xff007d34>
 1007dec:	28c00f17 	ldw	r3,60(r5)
 1007df0:	00ffb316 	blt	zero,r3,1007cc0 <__alt_data_end+0xff007cc0>
 1007df4:	003fd706 	br	1007d54 <__alt_data_end+0xff007d54>
 1007df8:	89400717 	ldw	r5,28(r17)
 1007dfc:	000d883a 	mov	r6,zero
 1007e00:	01c00044 	movi	r7,1
 1007e04:	9809883a 	mov	r4,r19
 1007e08:	403ee83a 	callr	r8
 1007e0c:	100d883a 	mov	r6,r2
 1007e10:	00bfffc4 	movi	r2,-1
 1007e14:	30801426 	beq	r6,r2,1007e68 <__sflush_r+0x1e4>
 1007e18:	8880030b 	ldhu	r2,12(r17)
 1007e1c:	8a000a17 	ldw	r8,40(r17)
 1007e20:	003fae06 	br	1007cdc <__alt_data_end+0xff007cdc>
 1007e24:	98c00017 	ldw	r3,0(r19)
 1007e28:	183fba26 	beq	r3,zero,1007d14 <__alt_data_end+0xff007d14>
 1007e2c:	01000744 	movi	r4,29
 1007e30:	19000626 	beq	r3,r4,1007e4c <__sflush_r+0x1c8>
 1007e34:	01000584 	movi	r4,22
 1007e38:	19000426 	beq	r3,r4,1007e4c <__sflush_r+0x1c8>
 1007e3c:	88c0030b 	ldhu	r3,12(r17)
 1007e40:	18c01014 	ori	r3,r3,64
 1007e44:	88c0030d 	sth	r3,12(r17)
 1007e48:	003fc306 	br	1007d58 <__alt_data_end+0xff007d58>
 1007e4c:	8880030b 	ldhu	r2,12(r17)
 1007e50:	88c00417 	ldw	r3,16(r17)
 1007e54:	88000115 	stw	zero,4(r17)
 1007e58:	10bdffcc 	andi	r2,r2,63487
 1007e5c:	8880030d 	sth	r2,12(r17)
 1007e60:	88c00015 	stw	r3,0(r17)
 1007e64:	003fb306 	br	1007d34 <__alt_data_end+0xff007d34>
 1007e68:	98800017 	ldw	r2,0(r19)
 1007e6c:	103fea26 	beq	r2,zero,1007e18 <__alt_data_end+0xff007e18>
 1007e70:	00c00744 	movi	r3,29
 1007e74:	10c00226 	beq	r2,r3,1007e80 <__sflush_r+0x1fc>
 1007e78:	00c00584 	movi	r3,22
 1007e7c:	10c0031e 	bne	r2,r3,1007e8c <__sflush_r+0x208>
 1007e80:	9c000015 	stw	r16,0(r19)
 1007e84:	0005883a 	mov	r2,zero
 1007e88:	003fb306 	br	1007d58 <__alt_data_end+0xff007d58>
 1007e8c:	88c0030b 	ldhu	r3,12(r17)
 1007e90:	3005883a 	mov	r2,r6
 1007e94:	18c01014 	ori	r3,r3,64
 1007e98:	88c0030d 	sth	r3,12(r17)
 1007e9c:	003fae06 	br	1007d58 <__alt_data_end+0xff007d58>

01007ea0 <_fflush_r>:
 1007ea0:	defffd04 	addi	sp,sp,-12
 1007ea4:	dc000115 	stw	r16,4(sp)
 1007ea8:	dfc00215 	stw	ra,8(sp)
 1007eac:	2021883a 	mov	r16,r4
 1007eb0:	20000226 	beq	r4,zero,1007ebc <_fflush_r+0x1c>
 1007eb4:	20800e17 	ldw	r2,56(r4)
 1007eb8:	10000c26 	beq	r2,zero,1007eec <_fflush_r+0x4c>
 1007ebc:	2880030f 	ldh	r2,12(r5)
 1007ec0:	1000051e 	bne	r2,zero,1007ed8 <_fflush_r+0x38>
 1007ec4:	0005883a 	mov	r2,zero
 1007ec8:	dfc00217 	ldw	ra,8(sp)
 1007ecc:	dc000117 	ldw	r16,4(sp)
 1007ed0:	dec00304 	addi	sp,sp,12
 1007ed4:	f800283a 	ret
 1007ed8:	8009883a 	mov	r4,r16
 1007edc:	dfc00217 	ldw	ra,8(sp)
 1007ee0:	dc000117 	ldw	r16,4(sp)
 1007ee4:	dec00304 	addi	sp,sp,12
 1007ee8:	1007c841 	jmpi	1007c84 <__sflush_r>
 1007eec:	d9400015 	stw	r5,0(sp)
 1007ef0:	10061a40 	call	10061a4 <__sinit>
 1007ef4:	d9400017 	ldw	r5,0(sp)
 1007ef8:	003ff006 	br	1007ebc <__alt_data_end+0xff007ebc>

01007efc <fflush>:
 1007efc:	20000526 	beq	r4,zero,1007f14 <fflush+0x18>
 1007f00:	00804074 	movhi	r2,257
 1007f04:	10b3e304 	addi	r2,r2,-12404
 1007f08:	200b883a 	mov	r5,r4
 1007f0c:	11000017 	ldw	r4,0(r2)
 1007f10:	1007ea01 	jmpi	1007ea0 <_fflush_r>
 1007f14:	00804074 	movhi	r2,257
 1007f18:	10b3e204 	addi	r2,r2,-12408
 1007f1c:	11000017 	ldw	r4,0(r2)
 1007f20:	01404034 	movhi	r5,256
 1007f24:	295fa804 	addi	r5,r5,32416
 1007f28:	10067741 	jmpi	1006774 <_fwalk_reent>

01007f2c <_malloc_trim_r>:
 1007f2c:	defffb04 	addi	sp,sp,-20
 1007f30:	dcc00315 	stw	r19,12(sp)
 1007f34:	04c04074 	movhi	r19,257
 1007f38:	dc800215 	stw	r18,8(sp)
 1007f3c:	dc400115 	stw	r17,4(sp)
 1007f40:	dc000015 	stw	r16,0(sp)
 1007f44:	dfc00415 	stw	ra,16(sp)
 1007f48:	2821883a 	mov	r16,r5
 1007f4c:	9cee5804 	addi	r19,r19,-18080
 1007f50:	2025883a 	mov	r18,r4
 1007f54:	1008f2c0 	call	1008f2c <__malloc_lock>
 1007f58:	98800217 	ldw	r2,8(r19)
 1007f5c:	14400117 	ldw	r17,4(r2)
 1007f60:	00bfff04 	movi	r2,-4
 1007f64:	88a2703a 	and	r17,r17,r2
 1007f68:	8c21c83a 	sub	r16,r17,r16
 1007f6c:	8403fbc4 	addi	r16,r16,4079
 1007f70:	8020d33a 	srli	r16,r16,12
 1007f74:	0083ffc4 	movi	r2,4095
 1007f78:	843fffc4 	addi	r16,r16,-1
 1007f7c:	8020933a 	slli	r16,r16,12
 1007f80:	1400060e 	bge	r2,r16,1007f9c <_malloc_trim_r+0x70>
 1007f84:	000b883a 	mov	r5,zero
 1007f88:	9009883a 	mov	r4,r18
 1007f8c:	10077e80 	call	10077e8 <_sbrk_r>
 1007f90:	98c00217 	ldw	r3,8(r19)
 1007f94:	1c47883a 	add	r3,r3,r17
 1007f98:	10c00a26 	beq	r2,r3,1007fc4 <_malloc_trim_r+0x98>
 1007f9c:	9009883a 	mov	r4,r18
 1007fa0:	1008f500 	call	1008f50 <__malloc_unlock>
 1007fa4:	0005883a 	mov	r2,zero
 1007fa8:	dfc00417 	ldw	ra,16(sp)
 1007fac:	dcc00317 	ldw	r19,12(sp)
 1007fb0:	dc800217 	ldw	r18,8(sp)
 1007fb4:	dc400117 	ldw	r17,4(sp)
 1007fb8:	dc000017 	ldw	r16,0(sp)
 1007fbc:	dec00504 	addi	sp,sp,20
 1007fc0:	f800283a 	ret
 1007fc4:	040bc83a 	sub	r5,zero,r16
 1007fc8:	9009883a 	mov	r4,r18
 1007fcc:	10077e80 	call	10077e8 <_sbrk_r>
 1007fd0:	00ffffc4 	movi	r3,-1
 1007fd4:	10c00d26 	beq	r2,r3,100800c <_malloc_trim_r+0xe0>
 1007fd8:	00c06074 	movhi	r3,385
 1007fdc:	18fae604 	addi	r3,r3,-5224
 1007fe0:	18800017 	ldw	r2,0(r3)
 1007fe4:	99000217 	ldw	r4,8(r19)
 1007fe8:	8c23c83a 	sub	r17,r17,r16
 1007fec:	8c400054 	ori	r17,r17,1
 1007ff0:	1421c83a 	sub	r16,r2,r16
 1007ff4:	24400115 	stw	r17,4(r4)
 1007ff8:	9009883a 	mov	r4,r18
 1007ffc:	1c000015 	stw	r16,0(r3)
 1008000:	1008f500 	call	1008f50 <__malloc_unlock>
 1008004:	00800044 	movi	r2,1
 1008008:	003fe706 	br	1007fa8 <__alt_data_end+0xff007fa8>
 100800c:	000b883a 	mov	r5,zero
 1008010:	9009883a 	mov	r4,r18
 1008014:	10077e80 	call	10077e8 <_sbrk_r>
 1008018:	99000217 	ldw	r4,8(r19)
 100801c:	014003c4 	movi	r5,15
 1008020:	1107c83a 	sub	r3,r2,r4
 1008024:	28ffdd0e 	bge	r5,r3,1007f9c <__alt_data_end+0xff007f9c>
 1008028:	01404074 	movhi	r5,257
 100802c:	2973e404 	addi	r5,r5,-12400
 1008030:	29400017 	ldw	r5,0(r5)
 1008034:	18c00054 	ori	r3,r3,1
 1008038:	20c00115 	stw	r3,4(r4)
 100803c:	00c06074 	movhi	r3,385
 1008040:	1145c83a 	sub	r2,r2,r5
 1008044:	18fae604 	addi	r3,r3,-5224
 1008048:	18800015 	stw	r2,0(r3)
 100804c:	003fd306 	br	1007f9c <__alt_data_end+0xff007f9c>

01008050 <_free_r>:
 1008050:	28004126 	beq	r5,zero,1008158 <_free_r+0x108>
 1008054:	defffd04 	addi	sp,sp,-12
 1008058:	dc400115 	stw	r17,4(sp)
 100805c:	dc000015 	stw	r16,0(sp)
 1008060:	2023883a 	mov	r17,r4
 1008064:	2821883a 	mov	r16,r5
 1008068:	dfc00215 	stw	ra,8(sp)
 100806c:	1008f2c0 	call	1008f2c <__malloc_lock>
 1008070:	81ffff17 	ldw	r7,-4(r16)
 1008074:	00bfff84 	movi	r2,-2
 1008078:	01004074 	movhi	r4,257
 100807c:	81bffe04 	addi	r6,r16,-8
 1008080:	3884703a 	and	r2,r7,r2
 1008084:	212e5804 	addi	r4,r4,-18080
 1008088:	308b883a 	add	r5,r6,r2
 100808c:	2a400117 	ldw	r9,4(r5)
 1008090:	22000217 	ldw	r8,8(r4)
 1008094:	00ffff04 	movi	r3,-4
 1008098:	48c6703a 	and	r3,r9,r3
 100809c:	2a005726 	beq	r5,r8,10081fc <_free_r+0x1ac>
 10080a0:	28c00115 	stw	r3,4(r5)
 10080a4:	39c0004c 	andi	r7,r7,1
 10080a8:	3800091e 	bne	r7,zero,10080d0 <_free_r+0x80>
 10080ac:	823ffe17 	ldw	r8,-8(r16)
 10080b0:	22400204 	addi	r9,r4,8
 10080b4:	320dc83a 	sub	r6,r6,r8
 10080b8:	31c00217 	ldw	r7,8(r6)
 10080bc:	1205883a 	add	r2,r2,r8
 10080c0:	3a406526 	beq	r7,r9,1008258 <_free_r+0x208>
 10080c4:	32000317 	ldw	r8,12(r6)
 10080c8:	3a000315 	stw	r8,12(r7)
 10080cc:	41c00215 	stw	r7,8(r8)
 10080d0:	28cf883a 	add	r7,r5,r3
 10080d4:	39c00117 	ldw	r7,4(r7)
 10080d8:	39c0004c 	andi	r7,r7,1
 10080dc:	38003a26 	beq	r7,zero,10081c8 <_free_r+0x178>
 10080e0:	10c00054 	ori	r3,r2,1
 10080e4:	30c00115 	stw	r3,4(r6)
 10080e8:	3087883a 	add	r3,r6,r2
 10080ec:	18800015 	stw	r2,0(r3)
 10080f0:	00c07fc4 	movi	r3,511
 10080f4:	18801936 	bltu	r3,r2,100815c <_free_r+0x10c>
 10080f8:	1004d0fa 	srli	r2,r2,3
 10080fc:	01c00044 	movi	r7,1
 1008100:	21400117 	ldw	r5,4(r4)
 1008104:	10c00044 	addi	r3,r2,1
 1008108:	18c7883a 	add	r3,r3,r3
 100810c:	1005d0ba 	srai	r2,r2,2
 1008110:	18c7883a 	add	r3,r3,r3
 1008114:	18c7883a 	add	r3,r3,r3
 1008118:	1907883a 	add	r3,r3,r4
 100811c:	3884983a 	sll	r2,r7,r2
 1008120:	19c00017 	ldw	r7,0(r3)
 1008124:	1a3ffe04 	addi	r8,r3,-8
 1008128:	1144b03a 	or	r2,r2,r5
 100812c:	32000315 	stw	r8,12(r6)
 1008130:	31c00215 	stw	r7,8(r6)
 1008134:	20800115 	stw	r2,4(r4)
 1008138:	19800015 	stw	r6,0(r3)
 100813c:	39800315 	stw	r6,12(r7)
 1008140:	8809883a 	mov	r4,r17
 1008144:	dfc00217 	ldw	ra,8(sp)
 1008148:	dc400117 	ldw	r17,4(sp)
 100814c:	dc000017 	ldw	r16,0(sp)
 1008150:	dec00304 	addi	sp,sp,12
 1008154:	1008f501 	jmpi	1008f50 <__malloc_unlock>
 1008158:	f800283a 	ret
 100815c:	100ad27a 	srli	r5,r2,9
 1008160:	00c00104 	movi	r3,4
 1008164:	19404a36 	bltu	r3,r5,1008290 <_free_r+0x240>
 1008168:	100ad1ba 	srli	r5,r2,6
 100816c:	28c00e44 	addi	r3,r5,57
 1008170:	18c7883a 	add	r3,r3,r3
 1008174:	29400e04 	addi	r5,r5,56
 1008178:	18c7883a 	add	r3,r3,r3
 100817c:	18c7883a 	add	r3,r3,r3
 1008180:	1909883a 	add	r4,r3,r4
 1008184:	20c00017 	ldw	r3,0(r4)
 1008188:	01c04074 	movhi	r7,257
 100818c:	213ffe04 	addi	r4,r4,-8
 1008190:	39ee5804 	addi	r7,r7,-18080
 1008194:	20c04426 	beq	r4,r3,10082a8 <_free_r+0x258>
 1008198:	01ffff04 	movi	r7,-4
 100819c:	19400117 	ldw	r5,4(r3)
 10081a0:	29ca703a 	and	r5,r5,r7
 10081a4:	1140022e 	bgeu	r2,r5,10081b0 <_free_r+0x160>
 10081a8:	18c00217 	ldw	r3,8(r3)
 10081ac:	20fffb1e 	bne	r4,r3,100819c <__alt_data_end+0xff00819c>
 10081b0:	19000317 	ldw	r4,12(r3)
 10081b4:	31000315 	stw	r4,12(r6)
 10081b8:	30c00215 	stw	r3,8(r6)
 10081bc:	21800215 	stw	r6,8(r4)
 10081c0:	19800315 	stw	r6,12(r3)
 10081c4:	003fde06 	br	1008140 <__alt_data_end+0xff008140>
 10081c8:	29c00217 	ldw	r7,8(r5)
 10081cc:	10c5883a 	add	r2,r2,r3
 10081d0:	00c04074 	movhi	r3,257
 10081d4:	18ee5a04 	addi	r3,r3,-18072
 10081d8:	38c03b26 	beq	r7,r3,10082c8 <_free_r+0x278>
 10081dc:	2a000317 	ldw	r8,12(r5)
 10081e0:	11400054 	ori	r5,r2,1
 10081e4:	3087883a 	add	r3,r6,r2
 10081e8:	3a000315 	stw	r8,12(r7)
 10081ec:	41c00215 	stw	r7,8(r8)
 10081f0:	31400115 	stw	r5,4(r6)
 10081f4:	18800015 	stw	r2,0(r3)
 10081f8:	003fbd06 	br	10080f0 <__alt_data_end+0xff0080f0>
 10081fc:	39c0004c 	andi	r7,r7,1
 1008200:	10c5883a 	add	r2,r2,r3
 1008204:	3800071e 	bne	r7,zero,1008224 <_free_r+0x1d4>
 1008208:	81fffe17 	ldw	r7,-8(r16)
 100820c:	31cdc83a 	sub	r6,r6,r7
 1008210:	30c00317 	ldw	r3,12(r6)
 1008214:	31400217 	ldw	r5,8(r6)
 1008218:	11c5883a 	add	r2,r2,r7
 100821c:	28c00315 	stw	r3,12(r5)
 1008220:	19400215 	stw	r5,8(r3)
 1008224:	10c00054 	ori	r3,r2,1
 1008228:	30c00115 	stw	r3,4(r6)
 100822c:	00c04074 	movhi	r3,257
 1008230:	18f3e504 	addi	r3,r3,-12396
 1008234:	18c00017 	ldw	r3,0(r3)
 1008238:	21800215 	stw	r6,8(r4)
 100823c:	10ffc036 	bltu	r2,r3,1008140 <__alt_data_end+0xff008140>
 1008240:	00804074 	movhi	r2,257
 1008244:	10baab04 	addi	r2,r2,-5460
 1008248:	11400017 	ldw	r5,0(r2)
 100824c:	8809883a 	mov	r4,r17
 1008250:	1007f2c0 	call	1007f2c <_malloc_trim_r>
 1008254:	003fba06 	br	1008140 <__alt_data_end+0xff008140>
 1008258:	28c9883a 	add	r4,r5,r3
 100825c:	21000117 	ldw	r4,4(r4)
 1008260:	2100004c 	andi	r4,r4,1
 1008264:	2000391e 	bne	r4,zero,100834c <_free_r+0x2fc>
 1008268:	29c00217 	ldw	r7,8(r5)
 100826c:	29000317 	ldw	r4,12(r5)
 1008270:	1885883a 	add	r2,r3,r2
 1008274:	10c00054 	ori	r3,r2,1
 1008278:	39000315 	stw	r4,12(r7)
 100827c:	21c00215 	stw	r7,8(r4)
 1008280:	30c00115 	stw	r3,4(r6)
 1008284:	308d883a 	add	r6,r6,r2
 1008288:	30800015 	stw	r2,0(r6)
 100828c:	003fac06 	br	1008140 <__alt_data_end+0xff008140>
 1008290:	00c00504 	movi	r3,20
 1008294:	19401536 	bltu	r3,r5,10082ec <_free_r+0x29c>
 1008298:	28c01704 	addi	r3,r5,92
 100829c:	18c7883a 	add	r3,r3,r3
 10082a0:	294016c4 	addi	r5,r5,91
 10082a4:	003fb406 	br	1008178 <__alt_data_end+0xff008178>
 10082a8:	280bd0ba 	srai	r5,r5,2
 10082ac:	00c00044 	movi	r3,1
 10082b0:	38800117 	ldw	r2,4(r7)
 10082b4:	194a983a 	sll	r5,r3,r5
 10082b8:	2007883a 	mov	r3,r4
 10082bc:	2884b03a 	or	r2,r5,r2
 10082c0:	38800115 	stw	r2,4(r7)
 10082c4:	003fbb06 	br	10081b4 <__alt_data_end+0xff0081b4>
 10082c8:	21800515 	stw	r6,20(r4)
 10082cc:	21800415 	stw	r6,16(r4)
 10082d0:	10c00054 	ori	r3,r2,1
 10082d4:	31c00315 	stw	r7,12(r6)
 10082d8:	31c00215 	stw	r7,8(r6)
 10082dc:	30c00115 	stw	r3,4(r6)
 10082e0:	308d883a 	add	r6,r6,r2
 10082e4:	30800015 	stw	r2,0(r6)
 10082e8:	003f9506 	br	1008140 <__alt_data_end+0xff008140>
 10082ec:	00c01504 	movi	r3,84
 10082f0:	19400536 	bltu	r3,r5,1008308 <_free_r+0x2b8>
 10082f4:	100ad33a 	srli	r5,r2,12
 10082f8:	28c01bc4 	addi	r3,r5,111
 10082fc:	18c7883a 	add	r3,r3,r3
 1008300:	29401b84 	addi	r5,r5,110
 1008304:	003f9c06 	br	1008178 <__alt_data_end+0xff008178>
 1008308:	00c05504 	movi	r3,340
 100830c:	19400536 	bltu	r3,r5,1008324 <_free_r+0x2d4>
 1008310:	100ad3fa 	srli	r5,r2,15
 1008314:	28c01e04 	addi	r3,r5,120
 1008318:	18c7883a 	add	r3,r3,r3
 100831c:	29401dc4 	addi	r5,r5,119
 1008320:	003f9506 	br	1008178 <__alt_data_end+0xff008178>
 1008324:	00c15504 	movi	r3,1364
 1008328:	19400536 	bltu	r3,r5,1008340 <_free_r+0x2f0>
 100832c:	100ad4ba 	srli	r5,r2,18
 1008330:	28c01f44 	addi	r3,r5,125
 1008334:	18c7883a 	add	r3,r3,r3
 1008338:	29401f04 	addi	r5,r5,124
 100833c:	003f8e06 	br	1008178 <__alt_data_end+0xff008178>
 1008340:	00c03f84 	movi	r3,254
 1008344:	01401f84 	movi	r5,126
 1008348:	003f8b06 	br	1008178 <__alt_data_end+0xff008178>
 100834c:	10c00054 	ori	r3,r2,1
 1008350:	30c00115 	stw	r3,4(r6)
 1008354:	308d883a 	add	r6,r6,r2
 1008358:	30800015 	stw	r2,0(r6)
 100835c:	003f7806 	br	1008140 <__alt_data_end+0xff008140>

01008360 <_lseek_r>:
 1008360:	defffd04 	addi	sp,sp,-12
 1008364:	2805883a 	mov	r2,r5
 1008368:	dc000015 	stw	r16,0(sp)
 100836c:	04004074 	movhi	r16,257
 1008370:	dc400115 	stw	r17,4(sp)
 1008374:	300b883a 	mov	r5,r6
 1008378:	843aac04 	addi	r16,r16,-5456
 100837c:	2023883a 	mov	r17,r4
 1008380:	380d883a 	mov	r6,r7
 1008384:	1009883a 	mov	r4,r2
 1008388:	dfc00215 	stw	ra,8(sp)
 100838c:	80000015 	stw	zero,0(r16)
 1008390:	1008ddc0 	call	1008ddc <lseek>
 1008394:	00ffffc4 	movi	r3,-1
 1008398:	10c00526 	beq	r2,r3,10083b0 <_lseek_r+0x50>
 100839c:	dfc00217 	ldw	ra,8(sp)
 10083a0:	dc400117 	ldw	r17,4(sp)
 10083a4:	dc000017 	ldw	r16,0(sp)
 10083a8:	dec00304 	addi	sp,sp,12
 10083ac:	f800283a 	ret
 10083b0:	80c00017 	ldw	r3,0(r16)
 10083b4:	183ff926 	beq	r3,zero,100839c <__alt_data_end+0xff00839c>
 10083b8:	88c00015 	stw	r3,0(r17)
 10083bc:	003ff706 	br	100839c <__alt_data_end+0xff00839c>

010083c0 <__smakebuf_r>:
 10083c0:	2880030b 	ldhu	r2,12(r5)
 10083c4:	10c0008c 	andi	r3,r2,2
 10083c8:	1800411e 	bne	r3,zero,10084d0 <__smakebuf_r+0x110>
 10083cc:	deffec04 	addi	sp,sp,-80
 10083d0:	dc000f15 	stw	r16,60(sp)
 10083d4:	2821883a 	mov	r16,r5
 10083d8:	2940038f 	ldh	r5,14(r5)
 10083dc:	dc401015 	stw	r17,64(sp)
 10083e0:	dfc01315 	stw	ra,76(sp)
 10083e4:	dcc01215 	stw	r19,72(sp)
 10083e8:	dc801115 	stw	r18,68(sp)
 10083ec:	2023883a 	mov	r17,r4
 10083f0:	28001c16 	blt	r5,zero,1008464 <__smakebuf_r+0xa4>
 10083f4:	d80d883a 	mov	r6,sp
 10083f8:	10085dc0 	call	10085dc <_fstat_r>
 10083fc:	10001816 	blt	r2,zero,1008460 <__smakebuf_r+0xa0>
 1008400:	d8800117 	ldw	r2,4(sp)
 1008404:	00e00014 	movui	r3,32768
 1008408:	10bc000c 	andi	r2,r2,61440
 100840c:	14c80020 	cmpeqi	r19,r2,8192
 1008410:	10c03726 	beq	r2,r3,10084f0 <__smakebuf_r+0x130>
 1008414:	80c0030b 	ldhu	r3,12(r16)
 1008418:	18c20014 	ori	r3,r3,2048
 100841c:	80c0030d 	sth	r3,12(r16)
 1008420:	00c80004 	movi	r3,8192
 1008424:	10c0521e 	bne	r2,r3,1008570 <__smakebuf_r+0x1b0>
 1008428:	8140038f 	ldh	r5,14(r16)
 100842c:	8809883a 	mov	r4,r17
 1008430:	10086380 	call	1008638 <_isatty_r>
 1008434:	10004c26 	beq	r2,zero,1008568 <__smakebuf_r+0x1a8>
 1008438:	8080030b 	ldhu	r2,12(r16)
 100843c:	80c010c4 	addi	r3,r16,67
 1008440:	80c00015 	stw	r3,0(r16)
 1008444:	10800054 	ori	r2,r2,1
 1008448:	8080030d 	sth	r2,12(r16)
 100844c:	00800044 	movi	r2,1
 1008450:	80c00415 	stw	r3,16(r16)
 1008454:	80800515 	stw	r2,20(r16)
 1008458:	04810004 	movi	r18,1024
 100845c:	00000706 	br	100847c <__smakebuf_r+0xbc>
 1008460:	8080030b 	ldhu	r2,12(r16)
 1008464:	10c0200c 	andi	r3,r2,128
 1008468:	18001f1e 	bne	r3,zero,10084e8 <__smakebuf_r+0x128>
 100846c:	04810004 	movi	r18,1024
 1008470:	10820014 	ori	r2,r2,2048
 1008474:	8080030d 	sth	r2,12(r16)
 1008478:	0027883a 	mov	r19,zero
 100847c:	900b883a 	mov	r5,r18
 1008480:	8809883a 	mov	r4,r17
 1008484:	10068380 	call	1006838 <_malloc_r>
 1008488:	10002c26 	beq	r2,zero,100853c <__smakebuf_r+0x17c>
 100848c:	80c0030b 	ldhu	r3,12(r16)
 1008490:	01004034 	movhi	r4,256
 1008494:	21179704 	addi	r4,r4,24156
 1008498:	89000f15 	stw	r4,60(r17)
 100849c:	18c02014 	ori	r3,r3,128
 10084a0:	80c0030d 	sth	r3,12(r16)
 10084a4:	80800015 	stw	r2,0(r16)
 10084a8:	80800415 	stw	r2,16(r16)
 10084ac:	84800515 	stw	r18,20(r16)
 10084b0:	98001a1e 	bne	r19,zero,100851c <__smakebuf_r+0x15c>
 10084b4:	dfc01317 	ldw	ra,76(sp)
 10084b8:	dcc01217 	ldw	r19,72(sp)
 10084bc:	dc801117 	ldw	r18,68(sp)
 10084c0:	dc401017 	ldw	r17,64(sp)
 10084c4:	dc000f17 	ldw	r16,60(sp)
 10084c8:	dec01404 	addi	sp,sp,80
 10084cc:	f800283a 	ret
 10084d0:	288010c4 	addi	r2,r5,67
 10084d4:	28800015 	stw	r2,0(r5)
 10084d8:	28800415 	stw	r2,16(r5)
 10084dc:	00800044 	movi	r2,1
 10084e0:	28800515 	stw	r2,20(r5)
 10084e4:	f800283a 	ret
 10084e8:	04801004 	movi	r18,64
 10084ec:	003fe006 	br	1008470 <__alt_data_end+0xff008470>
 10084f0:	81000a17 	ldw	r4,40(r16)
 10084f4:	00c04034 	movhi	r3,256
 10084f8:	18de4504 	addi	r3,r3,30996
 10084fc:	20ffc51e 	bne	r4,r3,1008414 <__alt_data_end+0xff008414>
 1008500:	8080030b 	ldhu	r2,12(r16)
 1008504:	04810004 	movi	r18,1024
 1008508:	84801315 	stw	r18,76(r16)
 100850c:	1484b03a 	or	r2,r2,r18
 1008510:	8080030d 	sth	r2,12(r16)
 1008514:	0027883a 	mov	r19,zero
 1008518:	003fd806 	br	100847c <__alt_data_end+0xff00847c>
 100851c:	8140038f 	ldh	r5,14(r16)
 1008520:	8809883a 	mov	r4,r17
 1008524:	10086380 	call	1008638 <_isatty_r>
 1008528:	103fe226 	beq	r2,zero,10084b4 <__alt_data_end+0xff0084b4>
 100852c:	8080030b 	ldhu	r2,12(r16)
 1008530:	10800054 	ori	r2,r2,1
 1008534:	8080030d 	sth	r2,12(r16)
 1008538:	003fde06 	br	10084b4 <__alt_data_end+0xff0084b4>
 100853c:	8080030b 	ldhu	r2,12(r16)
 1008540:	10c0800c 	andi	r3,r2,512
 1008544:	183fdb1e 	bne	r3,zero,10084b4 <__alt_data_end+0xff0084b4>
 1008548:	10800094 	ori	r2,r2,2
 100854c:	80c010c4 	addi	r3,r16,67
 1008550:	8080030d 	sth	r2,12(r16)
 1008554:	00800044 	movi	r2,1
 1008558:	80c00015 	stw	r3,0(r16)
 100855c:	80c00415 	stw	r3,16(r16)
 1008560:	80800515 	stw	r2,20(r16)
 1008564:	003fd306 	br	10084b4 <__alt_data_end+0xff0084b4>
 1008568:	04810004 	movi	r18,1024
 100856c:	003fc306 	br	100847c <__alt_data_end+0xff00847c>
 1008570:	0027883a 	mov	r19,zero
 1008574:	04810004 	movi	r18,1024
 1008578:	003fc006 	br	100847c <__alt_data_end+0xff00847c>

0100857c <_read_r>:
 100857c:	defffd04 	addi	sp,sp,-12
 1008580:	2805883a 	mov	r2,r5
 1008584:	dc000015 	stw	r16,0(sp)
 1008588:	04004074 	movhi	r16,257
 100858c:	dc400115 	stw	r17,4(sp)
 1008590:	300b883a 	mov	r5,r6
 1008594:	843aac04 	addi	r16,r16,-5456
 1008598:	2023883a 	mov	r17,r4
 100859c:	380d883a 	mov	r6,r7
 10085a0:	1009883a 	mov	r4,r2
 10085a4:	dfc00215 	stw	ra,8(sp)
 10085a8:	80000015 	stw	zero,0(r16)
 10085ac:	1008fb00 	call	1008fb0 <read>
 10085b0:	00ffffc4 	movi	r3,-1
 10085b4:	10c00526 	beq	r2,r3,10085cc <_read_r+0x50>
 10085b8:	dfc00217 	ldw	ra,8(sp)
 10085bc:	dc400117 	ldw	r17,4(sp)
 10085c0:	dc000017 	ldw	r16,0(sp)
 10085c4:	dec00304 	addi	sp,sp,12
 10085c8:	f800283a 	ret
 10085cc:	80c00017 	ldw	r3,0(r16)
 10085d0:	183ff926 	beq	r3,zero,10085b8 <__alt_data_end+0xff0085b8>
 10085d4:	88c00015 	stw	r3,0(r17)
 10085d8:	003ff706 	br	10085b8 <__alt_data_end+0xff0085b8>

010085dc <_fstat_r>:
 10085dc:	defffd04 	addi	sp,sp,-12
 10085e0:	2805883a 	mov	r2,r5
 10085e4:	dc000015 	stw	r16,0(sp)
 10085e8:	04004074 	movhi	r16,257
 10085ec:	dc400115 	stw	r17,4(sp)
 10085f0:	843aac04 	addi	r16,r16,-5456
 10085f4:	2023883a 	mov	r17,r4
 10085f8:	300b883a 	mov	r5,r6
 10085fc:	1009883a 	mov	r4,r2
 1008600:	dfc00215 	stw	ra,8(sp)
 1008604:	80000015 	stw	zero,0(r16)
 1008608:	10089b40 	call	10089b4 <fstat>
 100860c:	00ffffc4 	movi	r3,-1
 1008610:	10c00526 	beq	r2,r3,1008628 <_fstat_r+0x4c>
 1008614:	dfc00217 	ldw	ra,8(sp)
 1008618:	dc400117 	ldw	r17,4(sp)
 100861c:	dc000017 	ldw	r16,0(sp)
 1008620:	dec00304 	addi	sp,sp,12
 1008624:	f800283a 	ret
 1008628:	80c00017 	ldw	r3,0(r16)
 100862c:	183ff926 	beq	r3,zero,1008614 <__alt_data_end+0xff008614>
 1008630:	88c00015 	stw	r3,0(r17)
 1008634:	003ff706 	br	1008614 <__alt_data_end+0xff008614>

01008638 <_isatty_r>:
 1008638:	defffd04 	addi	sp,sp,-12
 100863c:	dc000015 	stw	r16,0(sp)
 1008640:	04004074 	movhi	r16,257
 1008644:	dc400115 	stw	r17,4(sp)
 1008648:	843aac04 	addi	r16,r16,-5456
 100864c:	2023883a 	mov	r17,r4
 1008650:	2809883a 	mov	r4,r5
 1008654:	dfc00215 	stw	ra,8(sp)
 1008658:	80000015 	stw	zero,0(r16)
 100865c:	1008c100 	call	1008c10 <isatty>
 1008660:	00ffffc4 	movi	r3,-1
 1008664:	10c00526 	beq	r2,r3,100867c <_isatty_r+0x44>
 1008668:	dfc00217 	ldw	ra,8(sp)
 100866c:	dc400117 	ldw	r17,4(sp)
 1008670:	dc000017 	ldw	r16,0(sp)
 1008674:	dec00304 	addi	sp,sp,12
 1008678:	f800283a 	ret
 100867c:	80c00017 	ldw	r3,0(r16)
 1008680:	183ff926 	beq	r3,zero,1008668 <__alt_data_end+0xff008668>
 1008684:	88c00015 	stw	r3,0(r17)
 1008688:	003ff706 	br	1008668 <__alt_data_end+0xff008668>

0100868c <__divsi3>:
 100868c:	20001b16 	blt	r4,zero,10086fc <__divsi3+0x70>
 1008690:	000f883a 	mov	r7,zero
 1008694:	28001616 	blt	r5,zero,10086f0 <__divsi3+0x64>
 1008698:	200d883a 	mov	r6,r4
 100869c:	29001a2e 	bgeu	r5,r4,1008708 <__divsi3+0x7c>
 10086a0:	00800804 	movi	r2,32
 10086a4:	00c00044 	movi	r3,1
 10086a8:	00000106 	br	10086b0 <__divsi3+0x24>
 10086ac:	10000d26 	beq	r2,zero,10086e4 <__divsi3+0x58>
 10086b0:	294b883a 	add	r5,r5,r5
 10086b4:	10bfffc4 	addi	r2,r2,-1
 10086b8:	18c7883a 	add	r3,r3,r3
 10086bc:	293ffb36 	bltu	r5,r4,10086ac <__alt_data_end+0xff0086ac>
 10086c0:	0005883a 	mov	r2,zero
 10086c4:	18000726 	beq	r3,zero,10086e4 <__divsi3+0x58>
 10086c8:	0005883a 	mov	r2,zero
 10086cc:	31400236 	bltu	r6,r5,10086d8 <__divsi3+0x4c>
 10086d0:	314dc83a 	sub	r6,r6,r5
 10086d4:	10c4b03a 	or	r2,r2,r3
 10086d8:	1806d07a 	srli	r3,r3,1
 10086dc:	280ad07a 	srli	r5,r5,1
 10086e0:	183ffa1e 	bne	r3,zero,10086cc <__alt_data_end+0xff0086cc>
 10086e4:	38000126 	beq	r7,zero,10086ec <__divsi3+0x60>
 10086e8:	0085c83a 	sub	r2,zero,r2
 10086ec:	f800283a 	ret
 10086f0:	014bc83a 	sub	r5,zero,r5
 10086f4:	39c0005c 	xori	r7,r7,1
 10086f8:	003fe706 	br	1008698 <__alt_data_end+0xff008698>
 10086fc:	0109c83a 	sub	r4,zero,r4
 1008700:	01c00044 	movi	r7,1
 1008704:	003fe306 	br	1008694 <__alt_data_end+0xff008694>
 1008708:	00c00044 	movi	r3,1
 100870c:	003fee06 	br	10086c8 <__alt_data_end+0xff0086c8>

01008710 <__modsi3>:
 1008710:	20001716 	blt	r4,zero,1008770 <__modsi3+0x60>
 1008714:	000f883a 	mov	r7,zero
 1008718:	2005883a 	mov	r2,r4
 100871c:	28001216 	blt	r5,zero,1008768 <__modsi3+0x58>
 1008720:	2900162e 	bgeu	r5,r4,100877c <__modsi3+0x6c>
 1008724:	01800804 	movi	r6,32
 1008728:	00c00044 	movi	r3,1
 100872c:	00000106 	br	1008734 <__modsi3+0x24>
 1008730:	30000a26 	beq	r6,zero,100875c <__modsi3+0x4c>
 1008734:	294b883a 	add	r5,r5,r5
 1008738:	31bfffc4 	addi	r6,r6,-1
 100873c:	18c7883a 	add	r3,r3,r3
 1008740:	293ffb36 	bltu	r5,r4,1008730 <__alt_data_end+0xff008730>
 1008744:	18000526 	beq	r3,zero,100875c <__modsi3+0x4c>
 1008748:	1806d07a 	srli	r3,r3,1
 100874c:	11400136 	bltu	r2,r5,1008754 <__modsi3+0x44>
 1008750:	1145c83a 	sub	r2,r2,r5
 1008754:	280ad07a 	srli	r5,r5,1
 1008758:	183ffb1e 	bne	r3,zero,1008748 <__alt_data_end+0xff008748>
 100875c:	38000126 	beq	r7,zero,1008764 <__modsi3+0x54>
 1008760:	0085c83a 	sub	r2,zero,r2
 1008764:	f800283a 	ret
 1008768:	014bc83a 	sub	r5,zero,r5
 100876c:	003fec06 	br	1008720 <__alt_data_end+0xff008720>
 1008770:	0109c83a 	sub	r4,zero,r4
 1008774:	01c00044 	movi	r7,1
 1008778:	003fe706 	br	1008718 <__alt_data_end+0xff008718>
 100877c:	00c00044 	movi	r3,1
 1008780:	003ff106 	br	1008748 <__alt_data_end+0xff008748>

01008784 <__udivsi3>:
 1008784:	200d883a 	mov	r6,r4
 1008788:	2900152e 	bgeu	r5,r4,10087e0 <__udivsi3+0x5c>
 100878c:	28001416 	blt	r5,zero,10087e0 <__udivsi3+0x5c>
 1008790:	00800804 	movi	r2,32
 1008794:	00c00044 	movi	r3,1
 1008798:	00000206 	br	10087a4 <__udivsi3+0x20>
 100879c:	10000e26 	beq	r2,zero,10087d8 <__udivsi3+0x54>
 10087a0:	28000516 	blt	r5,zero,10087b8 <__udivsi3+0x34>
 10087a4:	294b883a 	add	r5,r5,r5
 10087a8:	10bfffc4 	addi	r2,r2,-1
 10087ac:	18c7883a 	add	r3,r3,r3
 10087b0:	293ffa36 	bltu	r5,r4,100879c <__alt_data_end+0xff00879c>
 10087b4:	18000826 	beq	r3,zero,10087d8 <__udivsi3+0x54>
 10087b8:	0005883a 	mov	r2,zero
 10087bc:	31400236 	bltu	r6,r5,10087c8 <__udivsi3+0x44>
 10087c0:	314dc83a 	sub	r6,r6,r5
 10087c4:	10c4b03a 	or	r2,r2,r3
 10087c8:	1806d07a 	srli	r3,r3,1
 10087cc:	280ad07a 	srli	r5,r5,1
 10087d0:	183ffa1e 	bne	r3,zero,10087bc <__alt_data_end+0xff0087bc>
 10087d4:	f800283a 	ret
 10087d8:	0005883a 	mov	r2,zero
 10087dc:	f800283a 	ret
 10087e0:	00c00044 	movi	r3,1
 10087e4:	003ff406 	br	10087b8 <__alt_data_end+0xff0087b8>

010087e8 <__umodsi3>:
 10087e8:	2005883a 	mov	r2,r4
 10087ec:	2900122e 	bgeu	r5,r4,1008838 <__umodsi3+0x50>
 10087f0:	28001116 	blt	r5,zero,1008838 <__umodsi3+0x50>
 10087f4:	01800804 	movi	r6,32
 10087f8:	00c00044 	movi	r3,1
 10087fc:	00000206 	br	1008808 <__umodsi3+0x20>
 1008800:	30000c26 	beq	r6,zero,1008834 <__umodsi3+0x4c>
 1008804:	28000516 	blt	r5,zero,100881c <__umodsi3+0x34>
 1008808:	294b883a 	add	r5,r5,r5
 100880c:	31bfffc4 	addi	r6,r6,-1
 1008810:	18c7883a 	add	r3,r3,r3
 1008814:	293ffa36 	bltu	r5,r4,1008800 <__alt_data_end+0xff008800>
 1008818:	18000626 	beq	r3,zero,1008834 <__umodsi3+0x4c>
 100881c:	1806d07a 	srli	r3,r3,1
 1008820:	11400136 	bltu	r2,r5,1008828 <__umodsi3+0x40>
 1008824:	1145c83a 	sub	r2,r2,r5
 1008828:	280ad07a 	srli	r5,r5,1
 100882c:	183ffb1e 	bne	r3,zero,100881c <__alt_data_end+0xff00881c>
 1008830:	f800283a 	ret
 1008834:	f800283a 	ret
 1008838:	00c00044 	movi	r3,1
 100883c:	003ff706 	br	100881c <__alt_data_end+0xff00881c>

01008840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008840:	defffe04 	addi	sp,sp,-8
 1008844:	dfc00115 	stw	ra,4(sp)
 1008848:	df000015 	stw	fp,0(sp)
 100884c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008850:	d0a00b17 	ldw	r2,-32724(gp)
 1008854:	10000326 	beq	r2,zero,1008864 <alt_get_errno+0x24>
 1008858:	d0a00b17 	ldw	r2,-32724(gp)
 100885c:	103ee83a 	callr	r2
 1008860:	00000106 	br	1008868 <alt_get_errno+0x28>
 1008864:	d0a6cc04 	addi	r2,gp,-25808
}
 1008868:	e037883a 	mov	sp,fp
 100886c:	dfc00117 	ldw	ra,4(sp)
 1008870:	df000017 	ldw	fp,0(sp)
 1008874:	dec00204 	addi	sp,sp,8
 1008878:	f800283a 	ret

0100887c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100887c:	defffb04 	addi	sp,sp,-20
 1008880:	dfc00415 	stw	ra,16(sp)
 1008884:	df000315 	stw	fp,12(sp)
 1008888:	df000304 	addi	fp,sp,12
 100888c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1008890:	e0bfff17 	ldw	r2,-4(fp)
 1008894:	10000616 	blt	r2,zero,10088b0 <close+0x34>
 1008898:	e0bfff17 	ldw	r2,-4(fp)
 100889c:	10c00324 	muli	r3,r2,12
 10088a0:	00804074 	movhi	r2,257
 10088a4:	10af6404 	addi	r2,r2,-17008
 10088a8:	1885883a 	add	r2,r3,r2
 10088ac:	00000106 	br	10088b4 <close+0x38>
 10088b0:	0005883a 	mov	r2,zero
 10088b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 10088b8:	e0bffd17 	ldw	r2,-12(fp)
 10088bc:	10001926 	beq	r2,zero,1008924 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10088c0:	e0bffd17 	ldw	r2,-12(fp)
 10088c4:	10800017 	ldw	r2,0(r2)
 10088c8:	10800417 	ldw	r2,16(r2)
 10088cc:	10000626 	beq	r2,zero,10088e8 <close+0x6c>
 10088d0:	e0bffd17 	ldw	r2,-12(fp)
 10088d4:	10800017 	ldw	r2,0(r2)
 10088d8:	10800417 	ldw	r2,16(r2)
 10088dc:	e13ffd17 	ldw	r4,-12(fp)
 10088e0:	103ee83a 	callr	r2
 10088e4:	00000106 	br	10088ec <close+0x70>
 10088e8:	0005883a 	mov	r2,zero
 10088ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10088f0:	e13fff17 	ldw	r4,-4(fp)
 10088f4:	10090ac0 	call	10090ac <alt_release_fd>
    if (rval < 0)
 10088f8:	e0bffe17 	ldw	r2,-8(fp)
 10088fc:	1000070e 	bge	r2,zero,100891c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1008900:	10088400 	call	1008840 <alt_get_errno>
 1008904:	1007883a 	mov	r3,r2
 1008908:	e0bffe17 	ldw	r2,-8(fp)
 100890c:	0085c83a 	sub	r2,zero,r2
 1008910:	18800015 	stw	r2,0(r3)
      return -1;
 1008914:	00bfffc4 	movi	r2,-1
 1008918:	00000706 	br	1008938 <close+0xbc>
    }
    return 0;
 100891c:	0005883a 	mov	r2,zero
 1008920:	00000506 	br	1008938 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1008924:	10088400 	call	1008840 <alt_get_errno>
 1008928:	1007883a 	mov	r3,r2
 100892c:	00801444 	movi	r2,81
 1008930:	18800015 	stw	r2,0(r3)
    return -1;
 1008934:	00bfffc4 	movi	r2,-1
  }
}
 1008938:	e037883a 	mov	sp,fp
 100893c:	dfc00117 	ldw	ra,4(sp)
 1008940:	df000017 	ldw	fp,0(sp)
 1008944:	dec00204 	addi	sp,sp,8
 1008948:	f800283a 	ret

0100894c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100894c:	defffc04 	addi	sp,sp,-16
 1008950:	df000315 	stw	fp,12(sp)
 1008954:	df000304 	addi	fp,sp,12
 1008958:	e13ffd15 	stw	r4,-12(fp)
 100895c:	e17ffe15 	stw	r5,-8(fp)
 1008960:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1008964:	e0bfff17 	ldw	r2,-4(fp)
}
 1008968:	e037883a 	mov	sp,fp
 100896c:	df000017 	ldw	fp,0(sp)
 1008970:	dec00104 	addi	sp,sp,4
 1008974:	f800283a 	ret

01008978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008978:	defffe04 	addi	sp,sp,-8
 100897c:	dfc00115 	stw	ra,4(sp)
 1008980:	df000015 	stw	fp,0(sp)
 1008984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008988:	d0a00b17 	ldw	r2,-32724(gp)
 100898c:	10000326 	beq	r2,zero,100899c <alt_get_errno+0x24>
 1008990:	d0a00b17 	ldw	r2,-32724(gp)
 1008994:	103ee83a 	callr	r2
 1008998:	00000106 	br	10089a0 <alt_get_errno+0x28>
 100899c:	d0a6cc04 	addi	r2,gp,-25808
}
 10089a0:	e037883a 	mov	sp,fp
 10089a4:	dfc00117 	ldw	ra,4(sp)
 10089a8:	df000017 	ldw	fp,0(sp)
 10089ac:	dec00204 	addi	sp,sp,8
 10089b0:	f800283a 	ret

010089b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10089b4:	defffb04 	addi	sp,sp,-20
 10089b8:	dfc00415 	stw	ra,16(sp)
 10089bc:	df000315 	stw	fp,12(sp)
 10089c0:	df000304 	addi	fp,sp,12
 10089c4:	e13ffe15 	stw	r4,-8(fp)
 10089c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10089cc:	e0bffe17 	ldw	r2,-8(fp)
 10089d0:	10000616 	blt	r2,zero,10089ec <fstat+0x38>
 10089d4:	e0bffe17 	ldw	r2,-8(fp)
 10089d8:	10c00324 	muli	r3,r2,12
 10089dc:	00804074 	movhi	r2,257
 10089e0:	10af6404 	addi	r2,r2,-17008
 10089e4:	1885883a 	add	r2,r3,r2
 10089e8:	00000106 	br	10089f0 <fstat+0x3c>
 10089ec:	0005883a 	mov	r2,zero
 10089f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 10089f4:	e0bffd17 	ldw	r2,-12(fp)
 10089f8:	10001026 	beq	r2,zero,1008a3c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10089fc:	e0bffd17 	ldw	r2,-12(fp)
 1008a00:	10800017 	ldw	r2,0(r2)
 1008a04:	10800817 	ldw	r2,32(r2)
 1008a08:	10000726 	beq	r2,zero,1008a28 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1008a0c:	e0bffd17 	ldw	r2,-12(fp)
 1008a10:	10800017 	ldw	r2,0(r2)
 1008a14:	10800817 	ldw	r2,32(r2)
 1008a18:	e17fff17 	ldw	r5,-4(fp)
 1008a1c:	e13ffd17 	ldw	r4,-12(fp)
 1008a20:	103ee83a 	callr	r2
 1008a24:	00000a06 	br	1008a50 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1008a28:	e0bfff17 	ldw	r2,-4(fp)
 1008a2c:	00c80004 	movi	r3,8192
 1008a30:	10c00115 	stw	r3,4(r2)
      return 0;
 1008a34:	0005883a 	mov	r2,zero
 1008a38:	00000506 	br	1008a50 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1008a3c:	10089780 	call	1008978 <alt_get_errno>
 1008a40:	1007883a 	mov	r3,r2
 1008a44:	00801444 	movi	r2,81
 1008a48:	18800015 	stw	r2,0(r3)
    return -1;
 1008a4c:	00bfffc4 	movi	r2,-1
  }
}
 1008a50:	e037883a 	mov	sp,fp
 1008a54:	dfc00117 	ldw	ra,4(sp)
 1008a58:	df000017 	ldw	fp,0(sp)
 1008a5c:	dec00204 	addi	sp,sp,8
 1008a60:	f800283a 	ret

01008a64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1008a64:	defff104 	addi	sp,sp,-60
 1008a68:	df000e15 	stw	fp,56(sp)
 1008a6c:	df000e04 	addi	fp,sp,56
 1008a70:	e13ffd15 	stw	r4,-12(fp)
 1008a74:	e17ffe15 	stw	r5,-8(fp)
 1008a78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 1008a7c:	00bffa84 	movi	r2,-22
 1008a80:	e0bff215 	stw	r2,-56(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1008a84:	e0bffd17 	ldw	r2,-12(fp)
 1008a88:	10800828 	cmpgeui	r2,r2,32
 1008a8c:	10004c1e 	bne	r2,zero,1008bc0 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008a90:	0005303a 	rdctl	r2,status
 1008a94:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008a98:	e0fff617 	ldw	r3,-40(fp)
 1008a9c:	00bfff84 	movi	r2,-2
 1008aa0:	1884703a 	and	r2,r3,r2
 1008aa4:	1001703a 	wrctl	status,r2
  
  return context;
 1008aa8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1008aac:	e0bff415 	stw	r2,-48(fp)

    alt_irq[id].handler = handler;
 1008ab0:	00806074 	movhi	r2,385
 1008ab4:	10baf004 	addi	r2,r2,-5184
 1008ab8:	e0fffd17 	ldw	r3,-12(fp)
 1008abc:	180690fa 	slli	r3,r3,3
 1008ac0:	10c5883a 	add	r2,r2,r3
 1008ac4:	e0ffff17 	ldw	r3,-4(fp)
 1008ac8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 1008acc:	00806074 	movhi	r2,385
 1008ad0:	10baf004 	addi	r2,r2,-5184
 1008ad4:	e0fffd17 	ldw	r3,-12(fp)
 1008ad8:	180690fa 	slli	r3,r3,3
 1008adc:	10c5883a 	add	r2,r2,r3
 1008ae0:	10800104 	addi	r2,r2,4
 1008ae4:	e0fffe17 	ldw	r3,-8(fp)
 1008ae8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1008aec:	e0bfff17 	ldw	r2,-4(fp)
 1008af0:	10001926 	beq	r2,zero,1008b58 <alt_irq_register+0xf4>
 1008af4:	e0bffd17 	ldw	r2,-12(fp)
 1008af8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008afc:	0005303a 	rdctl	r2,status
 1008b00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008b04:	e0fff717 	ldw	r3,-36(fp)
 1008b08:	00bfff84 	movi	r2,-2
 1008b0c:	1884703a 	and	r2,r3,r2
 1008b10:	1001703a 	wrctl	status,r2
  
  return context;
 1008b14:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1008b18:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1008b1c:	00c00044 	movi	r3,1
 1008b20:	e0bff317 	ldw	r2,-52(fp)
 1008b24:	1884983a 	sll	r2,r3,r2
 1008b28:	1007883a 	mov	r3,r2
 1008b2c:	d0a6cd17 	ldw	r2,-25804(gp)
 1008b30:	1884b03a 	or	r2,r3,r2
 1008b34:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1008b38:	d0a6cd17 	ldw	r2,-25804(gp)
 1008b3c:	100170fa 	wrctl	ienable,r2
 1008b40:	e0bff817 	ldw	r2,-32(fp)
 1008b44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008b48:	e0bff917 	ldw	r2,-28(fp)
 1008b4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1008b50:	0005883a 	mov	r2,zero
 1008b54:	00001906 	br	1008bbc <alt_irq_register+0x158>
 1008b58:	e0bffd17 	ldw	r2,-12(fp)
 1008b5c:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008b60:	0005303a 	rdctl	r2,status
 1008b64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008b68:	e0fffa17 	ldw	r3,-24(fp)
 1008b6c:	00bfff84 	movi	r2,-2
 1008b70:	1884703a 	and	r2,r3,r2
 1008b74:	1001703a 	wrctl	status,r2
  
  return context;
 1008b78:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1008b7c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1008b80:	00c00044 	movi	r3,1
 1008b84:	e0bff517 	ldw	r2,-44(fp)
 1008b88:	1884983a 	sll	r2,r3,r2
 1008b8c:	0084303a 	nor	r2,zero,r2
 1008b90:	1007883a 	mov	r3,r2
 1008b94:	d0a6cd17 	ldw	r2,-25804(gp)
 1008b98:	1884703a 	and	r2,r3,r2
 1008b9c:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1008ba0:	d0a6cd17 	ldw	r2,-25804(gp)
 1008ba4:	100170fa 	wrctl	ienable,r2
 1008ba8:	e0bffb17 	ldw	r2,-20(fp)
 1008bac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008bb0:	e0bffc17 	ldw	r2,-16(fp)
 1008bb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1008bb8:	0005883a 	mov	r2,zero
 1008bbc:	e0bff215 	stw	r2,-56(fp)

    //alt_irq_enable_all(status);
  }
  return rc; 
 1008bc0:	e0bff217 	ldw	r2,-56(fp)
}
 1008bc4:	e037883a 	mov	sp,fp
 1008bc8:	df000017 	ldw	fp,0(sp)
 1008bcc:	dec00104 	addi	sp,sp,4
 1008bd0:	f800283a 	ret

01008bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008bd4:	defffe04 	addi	sp,sp,-8
 1008bd8:	dfc00115 	stw	ra,4(sp)
 1008bdc:	df000015 	stw	fp,0(sp)
 1008be0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008be4:	d0a00b17 	ldw	r2,-32724(gp)
 1008be8:	10000326 	beq	r2,zero,1008bf8 <alt_get_errno+0x24>
 1008bec:	d0a00b17 	ldw	r2,-32724(gp)
 1008bf0:	103ee83a 	callr	r2
 1008bf4:	00000106 	br	1008bfc <alt_get_errno+0x28>
 1008bf8:	d0a6cc04 	addi	r2,gp,-25808
}
 1008bfc:	e037883a 	mov	sp,fp
 1008c00:	dfc00117 	ldw	ra,4(sp)
 1008c04:	df000017 	ldw	fp,0(sp)
 1008c08:	dec00204 	addi	sp,sp,8
 1008c0c:	f800283a 	ret

01008c10 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1008c10:	deffed04 	addi	sp,sp,-76
 1008c14:	dfc01215 	stw	ra,72(sp)
 1008c18:	df001115 	stw	fp,68(sp)
 1008c1c:	df001104 	addi	fp,sp,68
 1008c20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1008c24:	e0bfff17 	ldw	r2,-4(fp)
 1008c28:	10000616 	blt	r2,zero,1008c44 <isatty+0x34>
 1008c2c:	e0bfff17 	ldw	r2,-4(fp)
 1008c30:	10c00324 	muli	r3,r2,12
 1008c34:	00804074 	movhi	r2,257
 1008c38:	10af6404 	addi	r2,r2,-17008
 1008c3c:	1885883a 	add	r2,r3,r2
 1008c40:	00000106 	br	1008c48 <isatty+0x38>
 1008c44:	0005883a 	mov	r2,zero
 1008c48:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1008c4c:	e0bfef17 	ldw	r2,-68(fp)
 1008c50:	10000e26 	beq	r2,zero,1008c8c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1008c54:	e0bfef17 	ldw	r2,-68(fp)
 1008c58:	10800017 	ldw	r2,0(r2)
 1008c5c:	10800817 	ldw	r2,32(r2)
 1008c60:	1000021e 	bne	r2,zero,1008c6c <isatty+0x5c>
    {
      return 1;
 1008c64:	00800044 	movi	r2,1
 1008c68:	00000d06 	br	1008ca0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1008c6c:	e0bff004 	addi	r2,fp,-64
 1008c70:	100b883a 	mov	r5,r2
 1008c74:	e13fff17 	ldw	r4,-4(fp)
 1008c78:	10089b40 	call	10089b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1008c7c:	e0bff117 	ldw	r2,-60(fp)
 1008c80:	10880020 	cmpeqi	r2,r2,8192
 1008c84:	10803fcc 	andi	r2,r2,255
 1008c88:	00000506 	br	1008ca0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1008c8c:	1008bd40 	call	1008bd4 <alt_get_errno>
 1008c90:	1007883a 	mov	r3,r2
 1008c94:	00801444 	movi	r2,81
 1008c98:	18800015 	stw	r2,0(r3)
    return 0;
 1008c9c:	0005883a 	mov	r2,zero
  }
}
 1008ca0:	e037883a 	mov	sp,fp
 1008ca4:	dfc00117 	ldw	ra,4(sp)
 1008ca8:	df000017 	ldw	fp,0(sp)
 1008cac:	dec00204 	addi	sp,sp,8
 1008cb0:	f800283a 	ret

01008cb4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1008cb4:	defffc04 	addi	sp,sp,-16
 1008cb8:	df000315 	stw	fp,12(sp)
 1008cbc:	df000304 	addi	fp,sp,12
 1008cc0:	e13ffd15 	stw	r4,-12(fp)
 1008cc4:	e17ffe15 	stw	r5,-8(fp)
 1008cc8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1008ccc:	e0fffe17 	ldw	r3,-8(fp)
 1008cd0:	e0bffd17 	ldw	r2,-12(fp)
 1008cd4:	18800c26 	beq	r3,r2,1008d08 <alt_load_section+0x54>
  {
    while( to != end )
 1008cd8:	00000806 	br	1008cfc <alt_load_section+0x48>
    {
      *to++ = *from++;
 1008cdc:	e0bffe17 	ldw	r2,-8(fp)
 1008ce0:	10c00104 	addi	r3,r2,4
 1008ce4:	e0fffe15 	stw	r3,-8(fp)
 1008ce8:	e0fffd17 	ldw	r3,-12(fp)
 1008cec:	19000104 	addi	r4,r3,4
 1008cf0:	e13ffd15 	stw	r4,-12(fp)
 1008cf4:	18c00017 	ldw	r3,0(r3)
 1008cf8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1008cfc:	e0fffe17 	ldw	r3,-8(fp)
 1008d00:	e0bfff17 	ldw	r2,-4(fp)
 1008d04:	18bff51e 	bne	r3,r2,1008cdc <__alt_data_end+0xff008cdc>
    {
      *to++ = *from++;
    }
  }
}
 1008d08:	0001883a 	nop
 1008d0c:	e037883a 	mov	sp,fp
 1008d10:	df000017 	ldw	fp,0(sp)
 1008d14:	dec00104 	addi	sp,sp,4
 1008d18:	f800283a 	ret

01008d1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1008d1c:	defffe04 	addi	sp,sp,-8
 1008d20:	dfc00115 	stw	ra,4(sp)
 1008d24:	df000015 	stw	fp,0(sp)
 1008d28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1008d2c:	01804074 	movhi	r6,257
 1008d30:	31b3f204 	addi	r6,r6,-12344
 1008d34:	01404074 	movhi	r5,257
 1008d38:	296d4f04 	addi	r5,r5,-19140
 1008d3c:	01004074 	movhi	r4,257
 1008d40:	2133f204 	addi	r4,r4,-12344
 1008d44:	1008cb40 	call	1008cb4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1008d48:	01804034 	movhi	r6,256
 1008d4c:	3180e804 	addi	r6,r6,928
 1008d50:	01404034 	movhi	r5,256
 1008d54:	29400804 	addi	r5,r5,32
 1008d58:	01004034 	movhi	r4,256
 1008d5c:	21000804 	addi	r4,r4,32
 1008d60:	1008cb40 	call	1008cb4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1008d64:	01804074 	movhi	r6,257
 1008d68:	31ad4f04 	addi	r6,r6,-19140
 1008d6c:	01404074 	movhi	r5,257
 1008d70:	296d3504 	addi	r5,r5,-19244
 1008d74:	01004074 	movhi	r4,257
 1008d78:	212d3504 	addi	r4,r4,-19244
 1008d7c:	1008cb40 	call	1008cb4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1008d80:	100a3c00 	call	100a3c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1008d84:	100a6380 	call	100a638 <alt_icache_flush_all>
}
 1008d88:	0001883a 	nop
 1008d8c:	e037883a 	mov	sp,fp
 1008d90:	dfc00117 	ldw	ra,4(sp)
 1008d94:	df000017 	ldw	fp,0(sp)
 1008d98:	dec00204 	addi	sp,sp,8
 1008d9c:	f800283a 	ret

01008da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008da0:	defffe04 	addi	sp,sp,-8
 1008da4:	dfc00115 	stw	ra,4(sp)
 1008da8:	df000015 	stw	fp,0(sp)
 1008dac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008db0:	d0a00b17 	ldw	r2,-32724(gp)
 1008db4:	10000326 	beq	r2,zero,1008dc4 <alt_get_errno+0x24>
 1008db8:	d0a00b17 	ldw	r2,-32724(gp)
 1008dbc:	103ee83a 	callr	r2
 1008dc0:	00000106 	br	1008dc8 <alt_get_errno+0x28>
 1008dc4:	d0a6cc04 	addi	r2,gp,-25808
}
 1008dc8:	e037883a 	mov	sp,fp
 1008dcc:	dfc00117 	ldw	ra,4(sp)
 1008dd0:	df000017 	ldw	fp,0(sp)
 1008dd4:	dec00204 	addi	sp,sp,8
 1008dd8:	f800283a 	ret

01008ddc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1008ddc:	defff904 	addi	sp,sp,-28
 1008de0:	dfc00615 	stw	ra,24(sp)
 1008de4:	df000515 	stw	fp,20(sp)
 1008de8:	df000504 	addi	fp,sp,20
 1008dec:	e13ffd15 	stw	r4,-12(fp)
 1008df0:	e17ffe15 	stw	r5,-8(fp)
 1008df4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1008df8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1008dfc:	e0bffd17 	ldw	r2,-12(fp)
 1008e00:	10000616 	blt	r2,zero,1008e1c <lseek+0x40>
 1008e04:	e0bffd17 	ldw	r2,-12(fp)
 1008e08:	10c00324 	muli	r3,r2,12
 1008e0c:	00804074 	movhi	r2,257
 1008e10:	10af6404 	addi	r2,r2,-17008
 1008e14:	1885883a 	add	r2,r3,r2
 1008e18:	00000106 	br	1008e20 <lseek+0x44>
 1008e1c:	0005883a 	mov	r2,zero
 1008e20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1008e24:	e0bffc17 	ldw	r2,-16(fp)
 1008e28:	10001026 	beq	r2,zero,1008e6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1008e2c:	e0bffc17 	ldw	r2,-16(fp)
 1008e30:	10800017 	ldw	r2,0(r2)
 1008e34:	10800717 	ldw	r2,28(r2)
 1008e38:	10000926 	beq	r2,zero,1008e60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1008e3c:	e0bffc17 	ldw	r2,-16(fp)
 1008e40:	10800017 	ldw	r2,0(r2)
 1008e44:	10800717 	ldw	r2,28(r2)
 1008e48:	e1bfff17 	ldw	r6,-4(fp)
 1008e4c:	e17ffe17 	ldw	r5,-8(fp)
 1008e50:	e13ffc17 	ldw	r4,-16(fp)
 1008e54:	103ee83a 	callr	r2
 1008e58:	e0bffb15 	stw	r2,-20(fp)
 1008e5c:	00000506 	br	1008e74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1008e60:	00bfde84 	movi	r2,-134
 1008e64:	e0bffb15 	stw	r2,-20(fp)
 1008e68:	00000206 	br	1008e74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1008e6c:	00bfebc4 	movi	r2,-81
 1008e70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1008e74:	e0bffb17 	ldw	r2,-20(fp)
 1008e78:	1000070e 	bge	r2,zero,1008e98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1008e7c:	1008da00 	call	1008da0 <alt_get_errno>
 1008e80:	1007883a 	mov	r3,r2
 1008e84:	e0bffb17 	ldw	r2,-20(fp)
 1008e88:	0085c83a 	sub	r2,zero,r2
 1008e8c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1008e90:	00bfffc4 	movi	r2,-1
 1008e94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1008e98:	e0bffb17 	ldw	r2,-20(fp)
}
 1008e9c:	e037883a 	mov	sp,fp
 1008ea0:	dfc00117 	ldw	ra,4(sp)
 1008ea4:	df000017 	ldw	fp,0(sp)
 1008ea8:	dec00204 	addi	sp,sp,8
 1008eac:	f800283a 	ret

01008eb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1008eb0:	defffd04 	addi	sp,sp,-12
 1008eb4:	dfc00215 	stw	ra,8(sp)
 1008eb8:	df000115 	stw	fp,4(sp)
 1008ebc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1008ec0:	0009883a 	mov	r4,zero
 1008ec4:	10093cc0 	call	10093cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1008ec8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1008ecc:	10094040 	call	1009404 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1008ed0:	01804074 	movhi	r6,257
 1008ed4:	31ad4104 	addi	r6,r6,-19196
 1008ed8:	01404074 	movhi	r5,257
 1008edc:	296d4104 	addi	r5,r5,-19196
 1008ee0:	01004074 	movhi	r4,257
 1008ee4:	212d4104 	addi	r4,r4,-19196
 1008ee8:	100a9d00 	call	100a9d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1008eec:	100a4e80 	call	100a4e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1008ef0:	01004074 	movhi	r4,257
 1008ef4:	21295204 	addi	r4,r4,-23224
 1008ef8:	100b1400 	call	100b140 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1008efc:	d0a6ce17 	ldw	r2,-25800(gp)
 1008f00:	d0e6cf17 	ldw	r3,-25796(gp)
 1008f04:	d126d017 	ldw	r4,-25792(gp)
 1008f08:	200d883a 	mov	r6,r4
 1008f0c:	180b883a 	mov	r5,r3
 1008f10:	1009883a 	mov	r4,r2
 1008f14:	1005a440 	call	1005a44 <main>
 1008f18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1008f1c:	01000044 	movi	r4,1
 1008f20:	100887c0 	call	100887c <close>
  exit (result);
 1008f24:	e13fff17 	ldw	r4,-4(fp)
 1008f28:	100b1540 	call	100b154 <exit>

01008f2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1008f2c:	defffe04 	addi	sp,sp,-8
 1008f30:	df000115 	stw	fp,4(sp)
 1008f34:	df000104 	addi	fp,sp,4
 1008f38:	e13fff15 	stw	r4,-4(fp)
}
 1008f3c:	0001883a 	nop
 1008f40:	e037883a 	mov	sp,fp
 1008f44:	df000017 	ldw	fp,0(sp)
 1008f48:	dec00104 	addi	sp,sp,4
 1008f4c:	f800283a 	ret

01008f50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1008f50:	defffe04 	addi	sp,sp,-8
 1008f54:	df000115 	stw	fp,4(sp)
 1008f58:	df000104 	addi	fp,sp,4
 1008f5c:	e13fff15 	stw	r4,-4(fp)
}
 1008f60:	0001883a 	nop
 1008f64:	e037883a 	mov	sp,fp
 1008f68:	df000017 	ldw	fp,0(sp)
 1008f6c:	dec00104 	addi	sp,sp,4
 1008f70:	f800283a 	ret

01008f74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008f74:	defffe04 	addi	sp,sp,-8
 1008f78:	dfc00115 	stw	ra,4(sp)
 1008f7c:	df000015 	stw	fp,0(sp)
 1008f80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1008f84:	d0a00b17 	ldw	r2,-32724(gp)
 1008f88:	10000326 	beq	r2,zero,1008f98 <alt_get_errno+0x24>
 1008f8c:	d0a00b17 	ldw	r2,-32724(gp)
 1008f90:	103ee83a 	callr	r2
 1008f94:	00000106 	br	1008f9c <alt_get_errno+0x28>
 1008f98:	d0a6cc04 	addi	r2,gp,-25808
}
 1008f9c:	e037883a 	mov	sp,fp
 1008fa0:	dfc00117 	ldw	ra,4(sp)
 1008fa4:	df000017 	ldw	fp,0(sp)
 1008fa8:	dec00204 	addi	sp,sp,8
 1008fac:	f800283a 	ret

01008fb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1008fb0:	defff904 	addi	sp,sp,-28
 1008fb4:	dfc00615 	stw	ra,24(sp)
 1008fb8:	df000515 	stw	fp,20(sp)
 1008fbc:	df000504 	addi	fp,sp,20
 1008fc0:	e13ffd15 	stw	r4,-12(fp)
 1008fc4:	e17ffe15 	stw	r5,-8(fp)
 1008fc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1008fcc:	e0bffd17 	ldw	r2,-12(fp)
 1008fd0:	10000616 	blt	r2,zero,1008fec <read+0x3c>
 1008fd4:	e0bffd17 	ldw	r2,-12(fp)
 1008fd8:	10c00324 	muli	r3,r2,12
 1008fdc:	00804074 	movhi	r2,257
 1008fe0:	10af6404 	addi	r2,r2,-17008
 1008fe4:	1885883a 	add	r2,r3,r2
 1008fe8:	00000106 	br	1008ff0 <read+0x40>
 1008fec:	0005883a 	mov	r2,zero
 1008ff0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1008ff4:	e0bffb17 	ldw	r2,-20(fp)
 1008ff8:	10002226 	beq	r2,zero,1009084 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1008ffc:	e0bffb17 	ldw	r2,-20(fp)
 1009000:	10800217 	ldw	r2,8(r2)
 1009004:	108000cc 	andi	r2,r2,3
 1009008:	10800060 	cmpeqi	r2,r2,1
 100900c:	1000181e 	bne	r2,zero,1009070 <read+0xc0>
        (fd->dev->read))
 1009010:	e0bffb17 	ldw	r2,-20(fp)
 1009014:	10800017 	ldw	r2,0(r2)
 1009018:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100901c:	10001426 	beq	r2,zero,1009070 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1009020:	e0bffb17 	ldw	r2,-20(fp)
 1009024:	10800017 	ldw	r2,0(r2)
 1009028:	10800517 	ldw	r2,20(r2)
 100902c:	e0ffff17 	ldw	r3,-4(fp)
 1009030:	180d883a 	mov	r6,r3
 1009034:	e17ffe17 	ldw	r5,-8(fp)
 1009038:	e13ffb17 	ldw	r4,-20(fp)
 100903c:	103ee83a 	callr	r2
 1009040:	e0bffc15 	stw	r2,-16(fp)
 1009044:	e0bffc17 	ldw	r2,-16(fp)
 1009048:	1000070e 	bge	r2,zero,1009068 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 100904c:	1008f740 	call	1008f74 <alt_get_errno>
 1009050:	1007883a 	mov	r3,r2
 1009054:	e0bffc17 	ldw	r2,-16(fp)
 1009058:	0085c83a 	sub	r2,zero,r2
 100905c:	18800015 	stw	r2,0(r3)
          return -1;
 1009060:	00bfffc4 	movi	r2,-1
 1009064:	00000c06 	br	1009098 <read+0xe8>
        }
        return rval;
 1009068:	e0bffc17 	ldw	r2,-16(fp)
 100906c:	00000a06 	br	1009098 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1009070:	1008f740 	call	1008f74 <alt_get_errno>
 1009074:	1007883a 	mov	r3,r2
 1009078:	00800344 	movi	r2,13
 100907c:	18800015 	stw	r2,0(r3)
 1009080:	00000406 	br	1009094 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1009084:	1008f740 	call	1008f74 <alt_get_errno>
 1009088:	1007883a 	mov	r3,r2
 100908c:	00801444 	movi	r2,81
 1009090:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1009094:	00bfffc4 	movi	r2,-1
}
 1009098:	e037883a 	mov	sp,fp
 100909c:	dfc00117 	ldw	ra,4(sp)
 10090a0:	df000017 	ldw	fp,0(sp)
 10090a4:	dec00204 	addi	sp,sp,8
 10090a8:	f800283a 	ret

010090ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10090ac:	defffe04 	addi	sp,sp,-8
 10090b0:	df000115 	stw	fp,4(sp)
 10090b4:	df000104 	addi	fp,sp,4
 10090b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10090bc:	e0bfff17 	ldw	r2,-4(fp)
 10090c0:	108000d0 	cmplti	r2,r2,3
 10090c4:	10000d1e 	bne	r2,zero,10090fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10090c8:	00804074 	movhi	r2,257
 10090cc:	10af6404 	addi	r2,r2,-17008
 10090d0:	e0ffff17 	ldw	r3,-4(fp)
 10090d4:	18c00324 	muli	r3,r3,12
 10090d8:	10c5883a 	add	r2,r2,r3
 10090dc:	10800204 	addi	r2,r2,8
 10090e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10090e4:	00804074 	movhi	r2,257
 10090e8:	10af6404 	addi	r2,r2,-17008
 10090ec:	e0ffff17 	ldw	r3,-4(fp)
 10090f0:	18c00324 	muli	r3,r3,12
 10090f4:	10c5883a 	add	r2,r2,r3
 10090f8:	10000015 	stw	zero,0(r2)
  }
}
 10090fc:	0001883a 	nop
 1009100:	e037883a 	mov	sp,fp
 1009104:	df000017 	ldw	fp,0(sp)
 1009108:	dec00104 	addi	sp,sp,4
 100910c:	f800283a 	ret

01009110 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1009110:	defff904 	addi	sp,sp,-28
 1009114:	df000615 	stw	fp,24(sp)
 1009118:	df000604 	addi	fp,sp,24
 100911c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009120:	0005303a 	rdctl	r2,status
 1009124:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009128:	e0fffe17 	ldw	r3,-8(fp)
 100912c:	00bfff84 	movi	r2,-2
 1009130:	1884703a 	and	r2,r3,r2
 1009134:	1001703a 	wrctl	status,r2
  
  return context;
 1009138:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100913c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1009140:	d0a00d17 	ldw	r2,-32716(gp)
 1009144:	10c000c4 	addi	r3,r2,3
 1009148:	00bfff04 	movi	r2,-4
 100914c:	1884703a 	and	r2,r3,r2
 1009150:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1009154:	d0e00d17 	ldw	r3,-32716(gp)
 1009158:	e0bfff17 	ldw	r2,-4(fp)
 100915c:	1887883a 	add	r3,r3,r2
 1009160:	00808034 	movhi	r2,512
 1009164:	10800004 	addi	r2,r2,0
 1009168:	10c0062e 	bgeu	r2,r3,1009184 <sbrk+0x74>
 100916c:	e0bffb17 	ldw	r2,-20(fp)
 1009170:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009174:	e0bffa17 	ldw	r2,-24(fp)
 1009178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100917c:	00bfffc4 	movi	r2,-1
 1009180:	00000b06 	br	10091b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1009184:	d0a00d17 	ldw	r2,-32716(gp)
 1009188:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100918c:	d0e00d17 	ldw	r3,-32716(gp)
 1009190:	e0bfff17 	ldw	r2,-4(fp)
 1009194:	1885883a 	add	r2,r3,r2
 1009198:	d0a00d15 	stw	r2,-32716(gp)
 100919c:	e0bffb17 	ldw	r2,-20(fp)
 10091a0:	e0bffc15 	stw	r2,-16(fp)
 10091a4:	e0bffc17 	ldw	r2,-16(fp)
 10091a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10091ac:	e0bffd17 	ldw	r2,-12(fp)
} 
 10091b0:	e037883a 	mov	sp,fp
 10091b4:	df000017 	ldw	fp,0(sp)
 10091b8:	dec00104 	addi	sp,sp,4
 10091bc:	f800283a 	ret

010091c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10091c0:	defffe04 	addi	sp,sp,-8
 10091c4:	dfc00115 	stw	ra,4(sp)
 10091c8:	df000015 	stw	fp,0(sp)
 10091cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10091d0:	d0a00b17 	ldw	r2,-32724(gp)
 10091d4:	10000326 	beq	r2,zero,10091e4 <alt_get_errno+0x24>
 10091d8:	d0a00b17 	ldw	r2,-32724(gp)
 10091dc:	103ee83a 	callr	r2
 10091e0:	00000106 	br	10091e8 <alt_get_errno+0x28>
 10091e4:	d0a6cc04 	addi	r2,gp,-25808
}
 10091e8:	e037883a 	mov	sp,fp
 10091ec:	dfc00117 	ldw	ra,4(sp)
 10091f0:	df000017 	ldw	fp,0(sp)
 10091f4:	dec00204 	addi	sp,sp,8
 10091f8:	f800283a 	ret

010091fc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10091fc:	defff904 	addi	sp,sp,-28
 1009200:	dfc00615 	stw	ra,24(sp)
 1009204:	df000515 	stw	fp,20(sp)
 1009208:	df000504 	addi	fp,sp,20
 100920c:	e13ffd15 	stw	r4,-12(fp)
 1009210:	e17ffe15 	stw	r5,-8(fp)
 1009214:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009218:	e0bffd17 	ldw	r2,-12(fp)
 100921c:	10000616 	blt	r2,zero,1009238 <write+0x3c>
 1009220:	e0bffd17 	ldw	r2,-12(fp)
 1009224:	10c00324 	muli	r3,r2,12
 1009228:	00804074 	movhi	r2,257
 100922c:	10af6404 	addi	r2,r2,-17008
 1009230:	1885883a 	add	r2,r3,r2
 1009234:	00000106 	br	100923c <write+0x40>
 1009238:	0005883a 	mov	r2,zero
 100923c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1009240:	e0bffb17 	ldw	r2,-20(fp)
 1009244:	10002126 	beq	r2,zero,10092cc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1009248:	e0bffb17 	ldw	r2,-20(fp)
 100924c:	10800217 	ldw	r2,8(r2)
 1009250:	108000cc 	andi	r2,r2,3
 1009254:	10001826 	beq	r2,zero,10092b8 <write+0xbc>
 1009258:	e0bffb17 	ldw	r2,-20(fp)
 100925c:	10800017 	ldw	r2,0(r2)
 1009260:	10800617 	ldw	r2,24(r2)
 1009264:	10001426 	beq	r2,zero,10092b8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1009268:	e0bffb17 	ldw	r2,-20(fp)
 100926c:	10800017 	ldw	r2,0(r2)
 1009270:	10800617 	ldw	r2,24(r2)
 1009274:	e0ffff17 	ldw	r3,-4(fp)
 1009278:	180d883a 	mov	r6,r3
 100927c:	e17ffe17 	ldw	r5,-8(fp)
 1009280:	e13ffb17 	ldw	r4,-20(fp)
 1009284:	103ee83a 	callr	r2
 1009288:	e0bffc15 	stw	r2,-16(fp)
 100928c:	e0bffc17 	ldw	r2,-16(fp)
 1009290:	1000070e 	bge	r2,zero,10092b0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1009294:	10091c00 	call	10091c0 <alt_get_errno>
 1009298:	1007883a 	mov	r3,r2
 100929c:	e0bffc17 	ldw	r2,-16(fp)
 10092a0:	0085c83a 	sub	r2,zero,r2
 10092a4:	18800015 	stw	r2,0(r3)
        return -1;
 10092a8:	00bfffc4 	movi	r2,-1
 10092ac:	00000c06 	br	10092e0 <write+0xe4>
      }
      return rval;
 10092b0:	e0bffc17 	ldw	r2,-16(fp)
 10092b4:	00000a06 	br	10092e0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10092b8:	10091c00 	call	10091c0 <alt_get_errno>
 10092bc:	1007883a 	mov	r3,r2
 10092c0:	00800344 	movi	r2,13
 10092c4:	18800015 	stw	r2,0(r3)
 10092c8:	00000406 	br	10092dc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10092cc:	10091c00 	call	10091c0 <alt_get_errno>
 10092d0:	1007883a 	mov	r3,r2
 10092d4:	00801444 	movi	r2,81
 10092d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10092dc:	00bfffc4 	movi	r2,-1
}
 10092e0:	e037883a 	mov	sp,fp
 10092e4:	dfc00117 	ldw	ra,4(sp)
 10092e8:	df000017 	ldw	fp,0(sp)
 10092ec:	dec00204 	addi	sp,sp,8
 10092f0:	f800283a 	ret

010092f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10092f4:	defffd04 	addi	sp,sp,-12
 10092f8:	dfc00215 	stw	ra,8(sp)
 10092fc:	df000115 	stw	fp,4(sp)
 1009300:	df000104 	addi	fp,sp,4
 1009304:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1009308:	d1600804 	addi	r5,gp,-32736
 100930c:	e13fff17 	ldw	r4,-4(fp)
 1009310:	100a4440 	call	100a444 <alt_dev_llist_insert>
}
 1009314:	e037883a 	mov	sp,fp
 1009318:	dfc00117 	ldw	ra,4(sp)
 100931c:	df000017 	ldw	fp,0(sp)
 1009320:	dec00204 	addi	sp,sp,8
 1009324:	f800283a 	ret

01009328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009328:	defffe04 	addi	sp,sp,-8
 100932c:	dfc00115 	stw	ra,4(sp)
 1009330:	df000015 	stw	fp,0(sp)
 1009334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1009338:	d0a00b17 	ldw	r2,-32724(gp)
 100933c:	10000326 	beq	r2,zero,100934c <alt_get_errno+0x24>
 1009340:	d0a00b17 	ldw	r2,-32724(gp)
 1009344:	103ee83a 	callr	r2
 1009348:	00000106 	br	1009350 <alt_get_errno+0x28>
 100934c:	d0a6cc04 	addi	r2,gp,-25808
}
 1009350:	e037883a 	mov	sp,fp
 1009354:	dfc00117 	ldw	ra,4(sp)
 1009358:	df000017 	ldw	fp,0(sp)
 100935c:	dec00204 	addi	sp,sp,8
 1009360:	f800283a 	ret

01009364 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 1009364:	defffc04 	addi	sp,sp,-16
 1009368:	dfc00315 	stw	ra,12(sp)
 100936c:	df000215 	stw	fp,8(sp)
 1009370:	df000204 	addi	fp,sp,8
 1009374:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 1009378:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 100937c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 1009380:	e0bffe17 	ldw	r2,-8(fp)
 1009384:	1000051e 	bne	r2,zero,100939c <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 1009388:	d1600e04 	addi	r5,gp,-32712
 100938c:	e13fff17 	ldw	r4,-4(fp)
 1009390:	100a4440 	call	100a444 <alt_dev_llist_insert>
 1009394:	e0bffe15 	stw	r2,-8(fp)
 1009398:	00000606 	br	10093b4 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 100939c:	10093280 	call	1009328 <alt_get_errno>
 10093a0:	1007883a 	mov	r3,r2
 10093a4:	00800304 	movi	r2,12
 10093a8:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 10093ac:	00bffd04 	movi	r2,-12
 10093b0:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 10093b4:	e0bffe17 	ldw	r2,-8(fp)
}
 10093b8:	e037883a 	mov	sp,fp
 10093bc:	dfc00117 	ldw	ra,4(sp)
 10093c0:	df000017 	ldw	fp,0(sp)
 10093c4:	dec00204 	addi	sp,sp,8
 10093c8:	f800283a 	ret

010093cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10093cc:	defffd04 	addi	sp,sp,-12
 10093d0:	dfc00215 	stw	ra,8(sp)
 10093d4:	df000115 	stw	fp,4(sp)
 10093d8:	df000104 	addi	fp,sp,4
 10093dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_CPU_1, nios_cpu_1);
 10093e0:	100ae440 	call	100ae44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10093e4:	00800044 	movi	r2,1
 10093e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10093ec:	0001883a 	nop
 10093f0:	e037883a 	mov	sp,fp
 10093f4:	dfc00117 	ldw	ra,4(sp)
 10093f8:	df000017 	ldw	fp,0(sp)
 10093fc:	dec00204 	addi	sp,sp,8
 1009400:	f800283a 	ret

01009404 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1009404:	defffe04 	addi	sp,sp,-8
 1009408:	dfc00115 	stw	ra,4(sp)
 100940c:	df000015 	stw	fp,0(sp)
 1009410:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1009414:	01c0fa04 	movi	r7,1000
 1009418:	01800044 	movi	r6,1
 100941c:	000b883a 	mov	r5,zero
 1009420:	01000804 	movi	r4,32
 1009424:	100a2180 	call	100a218 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1009428:	000d883a 	mov	r6,zero
 100942c:	000b883a 	mov	r5,zero
 1009430:	01004074 	movhi	r4,257
 1009434:	212fce04 	addi	r4,r4,-16584
 1009438:	10095d00 	call	10095d0 <altera_avalon_jtag_uart_init>
 100943c:	01004074 	movhi	r4,257
 1009440:	212fc404 	addi	r4,r4,-16624
 1009444:	10092f40 	call	10092f4 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 1009448:	01004074 	movhi	r4,257
 100944c:	2133dc04 	addi	r4,r4,-12432
 1009450:	10093640 	call	1009364 <alt_avalon_mutex_reg>
}
 1009454:	0001883a 	nop
 1009458:	e037883a 	mov	sp,fp
 100945c:	dfc00117 	ldw	ra,4(sp)
 1009460:	df000017 	ldw	fp,0(sp)
 1009464:	dec00204 	addi	sp,sp,8
 1009468:	f800283a 	ret

0100946c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100946c:	defffa04 	addi	sp,sp,-24
 1009470:	dfc00515 	stw	ra,20(sp)
 1009474:	df000415 	stw	fp,16(sp)
 1009478:	df000404 	addi	fp,sp,16
 100947c:	e13ffd15 	stw	r4,-12(fp)
 1009480:	e17ffe15 	stw	r5,-8(fp)
 1009484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1009488:	e0bffd17 	ldw	r2,-12(fp)
 100948c:	10800017 	ldw	r2,0(r2)
 1009490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1009494:	e0bffc17 	ldw	r2,-16(fp)
 1009498:	10c00a04 	addi	r3,r2,40
 100949c:	e0bffd17 	ldw	r2,-12(fp)
 10094a0:	10800217 	ldw	r2,8(r2)
 10094a4:	100f883a 	mov	r7,r2
 10094a8:	e1bfff17 	ldw	r6,-4(fp)
 10094ac:	e17ffe17 	ldw	r5,-8(fp)
 10094b0:	1809883a 	mov	r4,r3
 10094b4:	1009a940 	call	1009a94 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10094b8:	e037883a 	mov	sp,fp
 10094bc:	dfc00117 	ldw	ra,4(sp)
 10094c0:	df000017 	ldw	fp,0(sp)
 10094c4:	dec00204 	addi	sp,sp,8
 10094c8:	f800283a 	ret

010094cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10094cc:	defffa04 	addi	sp,sp,-24
 10094d0:	dfc00515 	stw	ra,20(sp)
 10094d4:	df000415 	stw	fp,16(sp)
 10094d8:	df000404 	addi	fp,sp,16
 10094dc:	e13ffd15 	stw	r4,-12(fp)
 10094e0:	e17ffe15 	stw	r5,-8(fp)
 10094e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10094e8:	e0bffd17 	ldw	r2,-12(fp)
 10094ec:	10800017 	ldw	r2,0(r2)
 10094f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10094f4:	e0bffc17 	ldw	r2,-16(fp)
 10094f8:	10c00a04 	addi	r3,r2,40
 10094fc:	e0bffd17 	ldw	r2,-12(fp)
 1009500:	10800217 	ldw	r2,8(r2)
 1009504:	100f883a 	mov	r7,r2
 1009508:	e1bfff17 	ldw	r6,-4(fp)
 100950c:	e17ffe17 	ldw	r5,-8(fp)
 1009510:	1809883a 	mov	r4,r3
 1009514:	1009cb00 	call	1009cb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1009518:	e037883a 	mov	sp,fp
 100951c:	dfc00117 	ldw	ra,4(sp)
 1009520:	df000017 	ldw	fp,0(sp)
 1009524:	dec00204 	addi	sp,sp,8
 1009528:	f800283a 	ret

0100952c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100952c:	defffc04 	addi	sp,sp,-16
 1009530:	dfc00315 	stw	ra,12(sp)
 1009534:	df000215 	stw	fp,8(sp)
 1009538:	df000204 	addi	fp,sp,8
 100953c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1009540:	e0bfff17 	ldw	r2,-4(fp)
 1009544:	10800017 	ldw	r2,0(r2)
 1009548:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100954c:	e0bffe17 	ldw	r2,-8(fp)
 1009550:	10c00a04 	addi	r3,r2,40
 1009554:	e0bfff17 	ldw	r2,-4(fp)
 1009558:	10800217 	ldw	r2,8(r2)
 100955c:	100b883a 	mov	r5,r2
 1009560:	1809883a 	mov	r4,r3
 1009564:	100993c0 	call	100993c <altera_avalon_jtag_uart_close>
}
 1009568:	e037883a 	mov	sp,fp
 100956c:	dfc00117 	ldw	ra,4(sp)
 1009570:	df000017 	ldw	fp,0(sp)
 1009574:	dec00204 	addi	sp,sp,8
 1009578:	f800283a 	ret

0100957c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100957c:	defffa04 	addi	sp,sp,-24
 1009580:	dfc00515 	stw	ra,20(sp)
 1009584:	df000415 	stw	fp,16(sp)
 1009588:	df000404 	addi	fp,sp,16
 100958c:	e13ffd15 	stw	r4,-12(fp)
 1009590:	e17ffe15 	stw	r5,-8(fp)
 1009594:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1009598:	e0bffd17 	ldw	r2,-12(fp)
 100959c:	10800017 	ldw	r2,0(r2)
 10095a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10095a4:	e0bffc17 	ldw	r2,-16(fp)
 10095a8:	10800a04 	addi	r2,r2,40
 10095ac:	e1bfff17 	ldw	r6,-4(fp)
 10095b0:	e17ffe17 	ldw	r5,-8(fp)
 10095b4:	1009883a 	mov	r4,r2
 10095b8:	10099a40 	call	10099a4 <altera_avalon_jtag_uart_ioctl>
}
 10095bc:	e037883a 	mov	sp,fp
 10095c0:	dfc00117 	ldw	ra,4(sp)
 10095c4:	df000017 	ldw	fp,0(sp)
 10095c8:	dec00204 	addi	sp,sp,8
 10095cc:	f800283a 	ret

010095d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10095d0:	defffa04 	addi	sp,sp,-24
 10095d4:	dfc00515 	stw	ra,20(sp)
 10095d8:	df000415 	stw	fp,16(sp)
 10095dc:	df000404 	addi	fp,sp,16
 10095e0:	e13ffd15 	stw	r4,-12(fp)
 10095e4:	e17ffe15 	stw	r5,-8(fp)
 10095e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10095ec:	e0bffd17 	ldw	r2,-12(fp)
 10095f0:	00c00044 	movi	r3,1
 10095f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10095f8:	e0bffd17 	ldw	r2,-12(fp)
 10095fc:	10800017 	ldw	r2,0(r2)
 1009600:	10800104 	addi	r2,r2,4
 1009604:	1007883a 	mov	r3,r2
 1009608:	e0bffd17 	ldw	r2,-12(fp)
 100960c:	10800817 	ldw	r2,32(r2)
 1009610:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1009614:	e0bffe17 	ldw	r2,-8(fp)
 1009618:	e0ffff17 	ldw	r3,-4(fp)
 100961c:	d8000015 	stw	zero,0(sp)
 1009620:	e1fffd17 	ldw	r7,-12(fp)
 1009624:	01804074 	movhi	r6,257
 1009628:	31a5a404 	addi	r6,r6,-26992
 100962c:	180b883a 	mov	r5,r3
 1009630:	1009883a 	mov	r4,r2
 1009634:	100a66c0 	call	100a66c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1009638:	e0bffd17 	ldw	r2,-12(fp)
 100963c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1009640:	e0bffd17 	ldw	r2,-12(fp)
 1009644:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1009648:	d0e6d117 	ldw	r3,-25788(gp)
 100964c:	e1fffd17 	ldw	r7,-12(fp)
 1009650:	01804074 	movhi	r6,257
 1009654:	31a62704 	addi	r6,r6,-26468
 1009658:	180b883a 	mov	r5,r3
 100965c:	1009883a 	mov	r4,r2
 1009660:	100a2940 	call	100a294 <alt_alarm_start>
 1009664:	1000040e 	bge	r2,zero,1009678 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1009668:	e0fffd17 	ldw	r3,-12(fp)
 100966c:	00a00034 	movhi	r2,32768
 1009670:	10bfffc4 	addi	r2,r2,-1
 1009674:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1009678:	0001883a 	nop
 100967c:	e037883a 	mov	sp,fp
 1009680:	dfc00117 	ldw	ra,4(sp)
 1009684:	df000017 	ldw	fp,0(sp)
 1009688:	dec00204 	addi	sp,sp,8
 100968c:	f800283a 	ret

01009690 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1009690:	defff804 	addi	sp,sp,-32
 1009694:	df000715 	stw	fp,28(sp)
 1009698:	df000704 	addi	fp,sp,28
 100969c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10096a0:	e0bfff17 	ldw	r2,-4(fp)
 10096a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10096a8:	e0bffb17 	ldw	r2,-20(fp)
 10096ac:	10800017 	ldw	r2,0(r2)
 10096b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10096b4:	e0bffc17 	ldw	r2,-16(fp)
 10096b8:	10800104 	addi	r2,r2,4
 10096bc:	10800037 	ldwio	r2,0(r2)
 10096c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10096c4:	e0bffd17 	ldw	r2,-12(fp)
 10096c8:	1080c00c 	andi	r2,r2,768
 10096cc:	10006d26 	beq	r2,zero,1009884 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10096d0:	e0bffd17 	ldw	r2,-12(fp)
 10096d4:	1080400c 	andi	r2,r2,256
 10096d8:	10003526 	beq	r2,zero,10097b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10096dc:	00800074 	movhi	r2,1
 10096e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10096e4:	e0bffb17 	ldw	r2,-20(fp)
 10096e8:	10800a17 	ldw	r2,40(r2)
 10096ec:	10800044 	addi	r2,r2,1
 10096f0:	1081ffcc 	andi	r2,r2,2047
 10096f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 10096f8:	e0bffb17 	ldw	r2,-20(fp)
 10096fc:	10c00b17 	ldw	r3,44(r2)
 1009700:	e0bffe17 	ldw	r2,-8(fp)
 1009704:	18801526 	beq	r3,r2,100975c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1009708:	e0bffc17 	ldw	r2,-16(fp)
 100970c:	10800037 	ldwio	r2,0(r2)
 1009710:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1009714:	e0bff917 	ldw	r2,-28(fp)
 1009718:	10a0000c 	andi	r2,r2,32768
 100971c:	10001126 	beq	r2,zero,1009764 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1009720:	e0bffb17 	ldw	r2,-20(fp)
 1009724:	10800a17 	ldw	r2,40(r2)
 1009728:	e0fff917 	ldw	r3,-28(fp)
 100972c:	1809883a 	mov	r4,r3
 1009730:	e0fffb17 	ldw	r3,-20(fp)
 1009734:	1885883a 	add	r2,r3,r2
 1009738:	10800e04 	addi	r2,r2,56
 100973c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1009740:	e0bffb17 	ldw	r2,-20(fp)
 1009744:	10800a17 	ldw	r2,40(r2)
 1009748:	10800044 	addi	r2,r2,1
 100974c:	10c1ffcc 	andi	r3,r2,2047
 1009750:	e0bffb17 	ldw	r2,-20(fp)
 1009754:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1009758:	003fe206 	br	10096e4 <__alt_data_end+0xff0096e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100975c:	0001883a 	nop
 1009760:	00000106 	br	1009768 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1009764:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1009768:	e0bff917 	ldw	r2,-28(fp)
 100976c:	10bfffec 	andhi	r2,r2,65535
 1009770:	10000f26 	beq	r2,zero,10097b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1009774:	e0bffb17 	ldw	r2,-20(fp)
 1009778:	10c00817 	ldw	r3,32(r2)
 100977c:	00bfff84 	movi	r2,-2
 1009780:	1886703a 	and	r3,r3,r2
 1009784:	e0bffb17 	ldw	r2,-20(fp)
 1009788:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100978c:	e0bffc17 	ldw	r2,-16(fp)
 1009790:	10800104 	addi	r2,r2,4
 1009794:	1007883a 	mov	r3,r2
 1009798:	e0bffb17 	ldw	r2,-20(fp)
 100979c:	10800817 	ldw	r2,32(r2)
 10097a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10097a4:	e0bffc17 	ldw	r2,-16(fp)
 10097a8:	10800104 	addi	r2,r2,4
 10097ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10097b0:	e0bffd17 	ldw	r2,-12(fp)
 10097b4:	1080800c 	andi	r2,r2,512
 10097b8:	103fbe26 	beq	r2,zero,10096b4 <__alt_data_end+0xff0096b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10097bc:	e0bffd17 	ldw	r2,-12(fp)
 10097c0:	1004d43a 	srli	r2,r2,16
 10097c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10097c8:	00001406 	br	100981c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10097cc:	e0bffc17 	ldw	r2,-16(fp)
 10097d0:	e0fffb17 	ldw	r3,-20(fp)
 10097d4:	18c00d17 	ldw	r3,52(r3)
 10097d8:	e13ffb17 	ldw	r4,-20(fp)
 10097dc:	20c7883a 	add	r3,r4,r3
 10097e0:	18c20e04 	addi	r3,r3,2104
 10097e4:	18c00003 	ldbu	r3,0(r3)
 10097e8:	18c03fcc 	andi	r3,r3,255
 10097ec:	18c0201c 	xori	r3,r3,128
 10097f0:	18ffe004 	addi	r3,r3,-128
 10097f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10097f8:	e0bffb17 	ldw	r2,-20(fp)
 10097fc:	10800d17 	ldw	r2,52(r2)
 1009800:	10800044 	addi	r2,r2,1
 1009804:	10c1ffcc 	andi	r3,r2,2047
 1009808:	e0bffb17 	ldw	r2,-20(fp)
 100980c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1009810:	e0bffa17 	ldw	r2,-24(fp)
 1009814:	10bfffc4 	addi	r2,r2,-1
 1009818:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100981c:	e0bffa17 	ldw	r2,-24(fp)
 1009820:	10000526 	beq	r2,zero,1009838 <altera_avalon_jtag_uart_irq+0x1a8>
 1009824:	e0bffb17 	ldw	r2,-20(fp)
 1009828:	10c00d17 	ldw	r3,52(r2)
 100982c:	e0bffb17 	ldw	r2,-20(fp)
 1009830:	10800c17 	ldw	r2,48(r2)
 1009834:	18bfe51e 	bne	r3,r2,10097cc <__alt_data_end+0xff0097cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1009838:	e0bffa17 	ldw	r2,-24(fp)
 100983c:	103f9d26 	beq	r2,zero,10096b4 <__alt_data_end+0xff0096b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1009840:	e0bffb17 	ldw	r2,-20(fp)
 1009844:	10c00817 	ldw	r3,32(r2)
 1009848:	00bfff44 	movi	r2,-3
 100984c:	1886703a 	and	r3,r3,r2
 1009850:	e0bffb17 	ldw	r2,-20(fp)
 1009854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1009858:	e0bffb17 	ldw	r2,-20(fp)
 100985c:	10800017 	ldw	r2,0(r2)
 1009860:	10800104 	addi	r2,r2,4
 1009864:	1007883a 	mov	r3,r2
 1009868:	e0bffb17 	ldw	r2,-20(fp)
 100986c:	10800817 	ldw	r2,32(r2)
 1009870:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1009874:	e0bffc17 	ldw	r2,-16(fp)
 1009878:	10800104 	addi	r2,r2,4
 100987c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1009880:	003f8c06 	br	10096b4 <__alt_data_end+0xff0096b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1009884:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1009888:	0001883a 	nop
 100988c:	e037883a 	mov	sp,fp
 1009890:	df000017 	ldw	fp,0(sp)
 1009894:	dec00104 	addi	sp,sp,4
 1009898:	f800283a 	ret

0100989c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100989c:	defff804 	addi	sp,sp,-32
 10098a0:	df000715 	stw	fp,28(sp)
 10098a4:	df000704 	addi	fp,sp,28
 10098a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10098ac:	e0bffb17 	ldw	r2,-20(fp)
 10098b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10098b4:	e0bff917 	ldw	r2,-28(fp)
 10098b8:	10800017 	ldw	r2,0(r2)
 10098bc:	10800104 	addi	r2,r2,4
 10098c0:	10800037 	ldwio	r2,0(r2)
 10098c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10098c8:	e0bffa17 	ldw	r2,-24(fp)
 10098cc:	1081000c 	andi	r2,r2,1024
 10098d0:	10000b26 	beq	r2,zero,1009900 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10098d4:	e0bff917 	ldw	r2,-28(fp)
 10098d8:	10800017 	ldw	r2,0(r2)
 10098dc:	10800104 	addi	r2,r2,4
 10098e0:	1007883a 	mov	r3,r2
 10098e4:	e0bff917 	ldw	r2,-28(fp)
 10098e8:	10800817 	ldw	r2,32(r2)
 10098ec:	10810014 	ori	r2,r2,1024
 10098f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10098f4:	e0bff917 	ldw	r2,-28(fp)
 10098f8:	10000915 	stw	zero,36(r2)
 10098fc:	00000a06 	br	1009928 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1009900:	e0bff917 	ldw	r2,-28(fp)
 1009904:	10c00917 	ldw	r3,36(r2)
 1009908:	00a00034 	movhi	r2,32768
 100990c:	10bfff04 	addi	r2,r2,-4
 1009910:	10c00536 	bltu	r2,r3,1009928 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1009914:	e0bff917 	ldw	r2,-28(fp)
 1009918:	10800917 	ldw	r2,36(r2)
 100991c:	10c00044 	addi	r3,r2,1
 1009920:	e0bff917 	ldw	r2,-28(fp)
 1009924:	10c00915 	stw	r3,36(r2)
 1009928:	d0a6d117 	ldw	r2,-25788(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100992c:	e037883a 	mov	sp,fp
 1009930:	df000017 	ldw	fp,0(sp)
 1009934:	dec00104 	addi	sp,sp,4
 1009938:	f800283a 	ret

0100993c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100993c:	defffd04 	addi	sp,sp,-12
 1009940:	df000215 	stw	fp,8(sp)
 1009944:	df000204 	addi	fp,sp,8
 1009948:	e13ffe15 	stw	r4,-8(fp)
 100994c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1009950:	00000506 	br	1009968 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1009954:	e0bfff17 	ldw	r2,-4(fp)
 1009958:	1090000c 	andi	r2,r2,16384
 100995c:	10000226 	beq	r2,zero,1009968 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1009960:	00bffd44 	movi	r2,-11
 1009964:	00000b06 	br	1009994 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1009968:	e0bffe17 	ldw	r2,-8(fp)
 100996c:	10c00d17 	ldw	r3,52(r2)
 1009970:	e0bffe17 	ldw	r2,-8(fp)
 1009974:	10800c17 	ldw	r2,48(r2)
 1009978:	18800526 	beq	r3,r2,1009990 <altera_avalon_jtag_uart_close+0x54>
 100997c:	e0bffe17 	ldw	r2,-8(fp)
 1009980:	10c00917 	ldw	r3,36(r2)
 1009984:	e0bffe17 	ldw	r2,-8(fp)
 1009988:	10800117 	ldw	r2,4(r2)
 100998c:	18bff136 	bltu	r3,r2,1009954 <__alt_data_end+0xff009954>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1009990:	0005883a 	mov	r2,zero
}
 1009994:	e037883a 	mov	sp,fp
 1009998:	df000017 	ldw	fp,0(sp)
 100999c:	dec00104 	addi	sp,sp,4
 10099a0:	f800283a 	ret

010099a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10099a4:	defffa04 	addi	sp,sp,-24
 10099a8:	df000515 	stw	fp,20(sp)
 10099ac:	df000504 	addi	fp,sp,20
 10099b0:	e13ffd15 	stw	r4,-12(fp)
 10099b4:	e17ffe15 	stw	r5,-8(fp)
 10099b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 10099bc:	00bff9c4 	movi	r2,-25
 10099c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 10099c4:	e0bffe17 	ldw	r2,-8(fp)
 10099c8:	10da8060 	cmpeqi	r3,r2,27137
 10099cc:	1800031e 	bne	r3,zero,10099dc <altera_avalon_jtag_uart_ioctl+0x38>
 10099d0:	109a80a0 	cmpeqi	r2,r2,27138
 10099d4:	1000181e 	bne	r2,zero,1009a38 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 10099d8:	00002906 	br	1009a80 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10099dc:	e0bffd17 	ldw	r2,-12(fp)
 10099e0:	10c00117 	ldw	r3,4(r2)
 10099e4:	00a00034 	movhi	r2,32768
 10099e8:	10bfffc4 	addi	r2,r2,-1
 10099ec:	18802126 	beq	r3,r2,1009a74 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 10099f0:	e0bfff17 	ldw	r2,-4(fp)
 10099f4:	10800017 	ldw	r2,0(r2)
 10099f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10099fc:	e0bffc17 	ldw	r2,-16(fp)
 1009a00:	10800090 	cmplti	r2,r2,2
 1009a04:	1000061e 	bne	r2,zero,1009a20 <altera_avalon_jtag_uart_ioctl+0x7c>
 1009a08:	e0fffc17 	ldw	r3,-16(fp)
 1009a0c:	00a00034 	movhi	r2,32768
 1009a10:	10bfffc4 	addi	r2,r2,-1
 1009a14:	18800226 	beq	r3,r2,1009a20 <altera_avalon_jtag_uart_ioctl+0x7c>
 1009a18:	e0bffc17 	ldw	r2,-16(fp)
 1009a1c:	00000206 	br	1009a28 <altera_avalon_jtag_uart_ioctl+0x84>
 1009a20:	00a00034 	movhi	r2,32768
 1009a24:	10bfff84 	addi	r2,r2,-2
 1009a28:	e0fffd17 	ldw	r3,-12(fp)
 1009a2c:	18800115 	stw	r2,4(r3)
      rc = 0;
 1009a30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1009a34:	00000f06 	br	1009a74 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1009a38:	e0bffd17 	ldw	r2,-12(fp)
 1009a3c:	10c00117 	ldw	r3,4(r2)
 1009a40:	00a00034 	movhi	r2,32768
 1009a44:	10bfffc4 	addi	r2,r2,-1
 1009a48:	18800c26 	beq	r3,r2,1009a7c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1009a4c:	e0bffd17 	ldw	r2,-12(fp)
 1009a50:	10c00917 	ldw	r3,36(r2)
 1009a54:	e0bffd17 	ldw	r2,-12(fp)
 1009a58:	10800117 	ldw	r2,4(r2)
 1009a5c:	1885803a 	cmpltu	r2,r3,r2
 1009a60:	10c03fcc 	andi	r3,r2,255
 1009a64:	e0bfff17 	ldw	r2,-4(fp)
 1009a68:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1009a6c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1009a70:	00000206 	br	1009a7c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1009a74:	0001883a 	nop
 1009a78:	00000106 	br	1009a80 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1009a7c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1009a80:	e0bffb17 	ldw	r2,-20(fp)
}
 1009a84:	e037883a 	mov	sp,fp
 1009a88:	df000017 	ldw	fp,0(sp)
 1009a8c:	dec00104 	addi	sp,sp,4
 1009a90:	f800283a 	ret

01009a94 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1009a94:	defff304 	addi	sp,sp,-52
 1009a98:	dfc00c15 	stw	ra,48(sp)
 1009a9c:	df000b15 	stw	fp,44(sp)
 1009aa0:	df000b04 	addi	fp,sp,44
 1009aa4:	e13ffc15 	stw	r4,-16(fp)
 1009aa8:	e17ffd15 	stw	r5,-12(fp)
 1009aac:	e1bffe15 	stw	r6,-8(fp)
 1009ab0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1009ab4:	e0bffd17 	ldw	r2,-12(fp)
 1009ab8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1009abc:	00004706 	br	1009bdc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1009ac0:	e0bffc17 	ldw	r2,-16(fp)
 1009ac4:	10800a17 	ldw	r2,40(r2)
 1009ac8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1009acc:	e0bffc17 	ldw	r2,-16(fp)
 1009ad0:	10800b17 	ldw	r2,44(r2)
 1009ad4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1009ad8:	e0fff717 	ldw	r3,-36(fp)
 1009adc:	e0bff817 	ldw	r2,-32(fp)
 1009ae0:	18800536 	bltu	r3,r2,1009af8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1009ae4:	e0fff717 	ldw	r3,-36(fp)
 1009ae8:	e0bff817 	ldw	r2,-32(fp)
 1009aec:	1885c83a 	sub	r2,r3,r2
 1009af0:	e0bff615 	stw	r2,-40(fp)
 1009af4:	00000406 	br	1009b08 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1009af8:	00c20004 	movi	r3,2048
 1009afc:	e0bff817 	ldw	r2,-32(fp)
 1009b00:	1885c83a 	sub	r2,r3,r2
 1009b04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1009b08:	e0bff617 	ldw	r2,-40(fp)
 1009b0c:	10001e26 	beq	r2,zero,1009b88 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1009b10:	e0fffe17 	ldw	r3,-8(fp)
 1009b14:	e0bff617 	ldw	r2,-40(fp)
 1009b18:	1880022e 	bgeu	r3,r2,1009b24 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1009b1c:	e0bffe17 	ldw	r2,-8(fp)
 1009b20:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1009b24:	e0bffc17 	ldw	r2,-16(fp)
 1009b28:	10c00e04 	addi	r3,r2,56
 1009b2c:	e0bff817 	ldw	r2,-32(fp)
 1009b30:	1885883a 	add	r2,r3,r2
 1009b34:	e1bff617 	ldw	r6,-40(fp)
 1009b38:	100b883a 	mov	r5,r2
 1009b3c:	e13ff517 	ldw	r4,-44(fp)
 1009b40:	1005a780 	call	1005a78 <memcpy>
      ptr   += n;
 1009b44:	e0fff517 	ldw	r3,-44(fp)
 1009b48:	e0bff617 	ldw	r2,-40(fp)
 1009b4c:	1885883a 	add	r2,r3,r2
 1009b50:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1009b54:	e0fffe17 	ldw	r3,-8(fp)
 1009b58:	e0bff617 	ldw	r2,-40(fp)
 1009b5c:	1885c83a 	sub	r2,r3,r2
 1009b60:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1009b64:	e0fff817 	ldw	r3,-32(fp)
 1009b68:	e0bff617 	ldw	r2,-40(fp)
 1009b6c:	1885883a 	add	r2,r3,r2
 1009b70:	10c1ffcc 	andi	r3,r2,2047
 1009b74:	e0bffc17 	ldw	r2,-16(fp)
 1009b78:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1009b7c:	e0bffe17 	ldw	r2,-8(fp)
 1009b80:	00bfcf16 	blt	zero,r2,1009ac0 <__alt_data_end+0xff009ac0>
 1009b84:	00000106 	br	1009b8c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1009b88:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1009b8c:	e0fff517 	ldw	r3,-44(fp)
 1009b90:	e0bffd17 	ldw	r2,-12(fp)
 1009b94:	1880141e 	bne	r3,r2,1009be8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1009b98:	e0bfff17 	ldw	r2,-4(fp)
 1009b9c:	1090000c 	andi	r2,r2,16384
 1009ba0:	1000131e 	bne	r2,zero,1009bf0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1009ba4:	0001883a 	nop
 1009ba8:	e0bffc17 	ldw	r2,-16(fp)
 1009bac:	10c00a17 	ldw	r3,40(r2)
 1009bb0:	e0bff717 	ldw	r2,-36(fp)
 1009bb4:	1880051e 	bne	r3,r2,1009bcc <altera_avalon_jtag_uart_read+0x138>
 1009bb8:	e0bffc17 	ldw	r2,-16(fp)
 1009bbc:	10c00917 	ldw	r3,36(r2)
 1009bc0:	e0bffc17 	ldw	r2,-16(fp)
 1009bc4:	10800117 	ldw	r2,4(r2)
 1009bc8:	18bff736 	bltu	r3,r2,1009ba8 <__alt_data_end+0xff009ba8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1009bcc:	e0bffc17 	ldw	r2,-16(fp)
 1009bd0:	10c00a17 	ldw	r3,40(r2)
 1009bd4:	e0bff717 	ldw	r2,-36(fp)
 1009bd8:	18800726 	beq	r3,r2,1009bf8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1009bdc:	e0bffe17 	ldw	r2,-8(fp)
 1009be0:	00bfb716 	blt	zero,r2,1009ac0 <__alt_data_end+0xff009ac0>
 1009be4:	00000506 	br	1009bfc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1009be8:	0001883a 	nop
 1009bec:	00000306 	br	1009bfc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1009bf0:	0001883a 	nop
 1009bf4:	00000106 	br	1009bfc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1009bf8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1009bfc:	e0fff517 	ldw	r3,-44(fp)
 1009c00:	e0bffd17 	ldw	r2,-12(fp)
 1009c04:	18801826 	beq	r3,r2,1009c68 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009c08:	0005303a 	rdctl	r2,status
 1009c0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009c10:	e0fffb17 	ldw	r3,-20(fp)
 1009c14:	00bfff84 	movi	r2,-2
 1009c18:	1884703a 	and	r2,r3,r2
 1009c1c:	1001703a 	wrctl	status,r2
  
  return context;
 1009c20:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1009c24:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1009c28:	e0bffc17 	ldw	r2,-16(fp)
 1009c2c:	10800817 	ldw	r2,32(r2)
 1009c30:	10c00054 	ori	r3,r2,1
 1009c34:	e0bffc17 	ldw	r2,-16(fp)
 1009c38:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1009c3c:	e0bffc17 	ldw	r2,-16(fp)
 1009c40:	10800017 	ldw	r2,0(r2)
 1009c44:	10800104 	addi	r2,r2,4
 1009c48:	1007883a 	mov	r3,r2
 1009c4c:	e0bffc17 	ldw	r2,-16(fp)
 1009c50:	10800817 	ldw	r2,32(r2)
 1009c54:	18800035 	stwio	r2,0(r3)
 1009c58:	e0bffa17 	ldw	r2,-24(fp)
 1009c5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009c60:	e0bff917 	ldw	r2,-28(fp)
 1009c64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1009c68:	e0fff517 	ldw	r3,-44(fp)
 1009c6c:	e0bffd17 	ldw	r2,-12(fp)
 1009c70:	18800426 	beq	r3,r2,1009c84 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1009c74:	e0fff517 	ldw	r3,-44(fp)
 1009c78:	e0bffd17 	ldw	r2,-12(fp)
 1009c7c:	1885c83a 	sub	r2,r3,r2
 1009c80:	00000606 	br	1009c9c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1009c84:	e0bfff17 	ldw	r2,-4(fp)
 1009c88:	1090000c 	andi	r2,r2,16384
 1009c8c:	10000226 	beq	r2,zero,1009c98 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1009c90:	00bffd44 	movi	r2,-11
 1009c94:	00000106 	br	1009c9c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1009c98:	00bffec4 	movi	r2,-5
}
 1009c9c:	e037883a 	mov	sp,fp
 1009ca0:	dfc00117 	ldw	ra,4(sp)
 1009ca4:	df000017 	ldw	fp,0(sp)
 1009ca8:	dec00204 	addi	sp,sp,8
 1009cac:	f800283a 	ret

01009cb0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1009cb0:	defff304 	addi	sp,sp,-52
 1009cb4:	dfc00c15 	stw	ra,48(sp)
 1009cb8:	df000b15 	stw	fp,44(sp)
 1009cbc:	df000b04 	addi	fp,sp,44
 1009cc0:	e13ffc15 	stw	r4,-16(fp)
 1009cc4:	e17ffd15 	stw	r5,-12(fp)
 1009cc8:	e1bffe15 	stw	r6,-8(fp)
 1009ccc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1009cd0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1009cd4:	e0bffd17 	ldw	r2,-12(fp)
 1009cd8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1009cdc:	00003706 	br	1009dbc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1009ce0:	e0bffc17 	ldw	r2,-16(fp)
 1009ce4:	10800c17 	ldw	r2,48(r2)
 1009ce8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1009cec:	e0bffc17 	ldw	r2,-16(fp)
 1009cf0:	10800d17 	ldw	r2,52(r2)
 1009cf4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1009cf8:	e0fff917 	ldw	r3,-28(fp)
 1009cfc:	e0bff517 	ldw	r2,-44(fp)
 1009d00:	1880062e 	bgeu	r3,r2,1009d1c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1009d04:	e0fff517 	ldw	r3,-44(fp)
 1009d08:	e0bff917 	ldw	r2,-28(fp)
 1009d0c:	1885c83a 	sub	r2,r3,r2
 1009d10:	10bfffc4 	addi	r2,r2,-1
 1009d14:	e0bff615 	stw	r2,-40(fp)
 1009d18:	00000b06 	br	1009d48 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1009d1c:	e0bff517 	ldw	r2,-44(fp)
 1009d20:	10000526 	beq	r2,zero,1009d38 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1009d24:	00c20004 	movi	r3,2048
 1009d28:	e0bff917 	ldw	r2,-28(fp)
 1009d2c:	1885c83a 	sub	r2,r3,r2
 1009d30:	e0bff615 	stw	r2,-40(fp)
 1009d34:	00000406 	br	1009d48 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1009d38:	00c1ffc4 	movi	r3,2047
 1009d3c:	e0bff917 	ldw	r2,-28(fp)
 1009d40:	1885c83a 	sub	r2,r3,r2
 1009d44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1009d48:	e0bff617 	ldw	r2,-40(fp)
 1009d4c:	10001e26 	beq	r2,zero,1009dc8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1009d50:	e0fffe17 	ldw	r3,-8(fp)
 1009d54:	e0bff617 	ldw	r2,-40(fp)
 1009d58:	1880022e 	bgeu	r3,r2,1009d64 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1009d5c:	e0bffe17 	ldw	r2,-8(fp)
 1009d60:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1009d64:	e0bffc17 	ldw	r2,-16(fp)
 1009d68:	10c20e04 	addi	r3,r2,2104
 1009d6c:	e0bff917 	ldw	r2,-28(fp)
 1009d70:	1885883a 	add	r2,r3,r2
 1009d74:	e1bff617 	ldw	r6,-40(fp)
 1009d78:	e17ffd17 	ldw	r5,-12(fp)
 1009d7c:	1009883a 	mov	r4,r2
 1009d80:	1005a780 	call	1005a78 <memcpy>
      ptr   += n;
 1009d84:	e0fffd17 	ldw	r3,-12(fp)
 1009d88:	e0bff617 	ldw	r2,-40(fp)
 1009d8c:	1885883a 	add	r2,r3,r2
 1009d90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1009d94:	e0fffe17 	ldw	r3,-8(fp)
 1009d98:	e0bff617 	ldw	r2,-40(fp)
 1009d9c:	1885c83a 	sub	r2,r3,r2
 1009da0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1009da4:	e0fff917 	ldw	r3,-28(fp)
 1009da8:	e0bff617 	ldw	r2,-40(fp)
 1009dac:	1885883a 	add	r2,r3,r2
 1009db0:	10c1ffcc 	andi	r3,r2,2047
 1009db4:	e0bffc17 	ldw	r2,-16(fp)
 1009db8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1009dbc:	e0bffe17 	ldw	r2,-8(fp)
 1009dc0:	00bfc716 	blt	zero,r2,1009ce0 <__alt_data_end+0xff009ce0>
 1009dc4:	00000106 	br	1009dcc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1009dc8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009dcc:	0005303a 	rdctl	r2,status
 1009dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009dd4:	e0fffb17 	ldw	r3,-20(fp)
 1009dd8:	00bfff84 	movi	r2,-2
 1009ddc:	1884703a 	and	r2,r3,r2
 1009de0:	1001703a 	wrctl	status,r2
  
  return context;
 1009de4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1009de8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1009dec:	e0bffc17 	ldw	r2,-16(fp)
 1009df0:	10800817 	ldw	r2,32(r2)
 1009df4:	10c00094 	ori	r3,r2,2
 1009df8:	e0bffc17 	ldw	r2,-16(fp)
 1009dfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1009e00:	e0bffc17 	ldw	r2,-16(fp)
 1009e04:	10800017 	ldw	r2,0(r2)
 1009e08:	10800104 	addi	r2,r2,4
 1009e0c:	1007883a 	mov	r3,r2
 1009e10:	e0bffc17 	ldw	r2,-16(fp)
 1009e14:	10800817 	ldw	r2,32(r2)
 1009e18:	18800035 	stwio	r2,0(r3)
 1009e1c:	e0bffa17 	ldw	r2,-24(fp)
 1009e20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009e24:	e0bff817 	ldw	r2,-32(fp)
 1009e28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1009e2c:	e0bffe17 	ldw	r2,-8(fp)
 1009e30:	0080100e 	bge	zero,r2,1009e74 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1009e34:	e0bfff17 	ldw	r2,-4(fp)
 1009e38:	1090000c 	andi	r2,r2,16384
 1009e3c:	1000101e 	bne	r2,zero,1009e80 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1009e40:	0001883a 	nop
 1009e44:	e0bffc17 	ldw	r2,-16(fp)
 1009e48:	10c00d17 	ldw	r3,52(r2)
 1009e4c:	e0bff517 	ldw	r2,-44(fp)
 1009e50:	1880051e 	bne	r3,r2,1009e68 <altera_avalon_jtag_uart_write+0x1b8>
 1009e54:	e0bffc17 	ldw	r2,-16(fp)
 1009e58:	10c00917 	ldw	r3,36(r2)
 1009e5c:	e0bffc17 	ldw	r2,-16(fp)
 1009e60:	10800117 	ldw	r2,4(r2)
 1009e64:	18bff736 	bltu	r3,r2,1009e44 <__alt_data_end+0xff009e44>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1009e68:	e0bffc17 	ldw	r2,-16(fp)
 1009e6c:	10800917 	ldw	r2,36(r2)
 1009e70:	1000051e 	bne	r2,zero,1009e88 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1009e74:	e0bffe17 	ldw	r2,-8(fp)
 1009e78:	00bfd016 	blt	zero,r2,1009dbc <__alt_data_end+0xff009dbc>
 1009e7c:	00000306 	br	1009e8c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1009e80:	0001883a 	nop
 1009e84:	00000106 	br	1009e8c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1009e88:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1009e8c:	e0fffd17 	ldw	r3,-12(fp)
 1009e90:	e0bff717 	ldw	r2,-36(fp)
 1009e94:	18800426 	beq	r3,r2,1009ea8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1009e98:	e0fffd17 	ldw	r3,-12(fp)
 1009e9c:	e0bff717 	ldw	r2,-36(fp)
 1009ea0:	1885c83a 	sub	r2,r3,r2
 1009ea4:	00000606 	br	1009ec0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1009ea8:	e0bfff17 	ldw	r2,-4(fp)
 1009eac:	1090000c 	andi	r2,r2,16384
 1009eb0:	10000226 	beq	r2,zero,1009ebc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1009eb4:	00bffd44 	movi	r2,-11
 1009eb8:	00000106 	br	1009ec0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1009ebc:	00bffec4 	movi	r2,-5
}
 1009ec0:	e037883a 	mov	sp,fp
 1009ec4:	dfc00117 	ldw	ra,4(sp)
 1009ec8:	df000017 	ldw	fp,0(sp)
 1009ecc:	dec00204 	addi	sp,sp,8
 1009ed0:	f800283a 	ret

01009ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009ed4:	defffe04 	addi	sp,sp,-8
 1009ed8:	dfc00115 	stw	ra,4(sp)
 1009edc:	df000015 	stw	fp,0(sp)
 1009ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1009ee4:	d0a00b17 	ldw	r2,-32724(gp)
 1009ee8:	10000326 	beq	r2,zero,1009ef8 <alt_get_errno+0x24>
 1009eec:	d0a00b17 	ldw	r2,-32724(gp)
 1009ef0:	103ee83a 	callr	r2
 1009ef4:	00000106 	br	1009efc <alt_get_errno+0x28>
 1009ef8:	d0a6cc04 	addi	r2,gp,-25808
}
 1009efc:	e037883a 	mov	sp,fp
 1009f00:	dfc00117 	ldw	ra,4(sp)
 1009f04:	df000017 	ldw	fp,0(sp)
 1009f08:	dec00204 	addi	sp,sp,8
 1009f0c:	f800283a 	ret

01009f10 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 1009f10:	defff904 	addi	sp,sp,-28
 1009f14:	df000615 	stw	fp,24(sp)
 1009f18:	df000604 	addi	fp,sp,24
 1009f1c:	e13ffe15 	stw	r4,-8(fp)
 1009f20:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 1009f24:	00bfffc4 	movi	r2,-1
 1009f28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 1009f2c:	0005317a 	rdctl	r2,cpuid
 1009f30:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 1009f34:	e0bffb17 	ldw	r2,-20(fp)
 1009f38:	1006943a 	slli	r3,r2,16
 1009f3c:	e0bfff17 	ldw	r2,-4(fp)
 1009f40:	1884b03a 	or	r2,r3,r2
 1009f44:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 1009f48:	e0bffe17 	ldw	r2,-8(fp)
 1009f4c:	10800317 	ldw	r2,12(r2)
 1009f50:	e0fffc17 	ldw	r3,-16(fp)
 1009f54:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 1009f58:	e0bffe17 	ldw	r2,-8(fp)
 1009f5c:	10800317 	ldw	r2,12(r2)
 1009f60:	10800037 	ldwio	r2,0(r2)
 1009f64:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 1009f68:	e0fffd17 	ldw	r3,-12(fp)
 1009f6c:	e0bffc17 	ldw	r2,-16(fp)
 1009f70:	1880011e 	bne	r3,r2,1009f78 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 1009f74:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 1009f78:	e0bffa17 	ldw	r2,-24(fp)
}
 1009f7c:	e037883a 	mov	sp,fp
 1009f80:	df000017 	ldw	fp,0(sp)
 1009f84:	dec00104 	addi	sp,sp,4
 1009f88:	f800283a 	ret

01009f8c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 1009f8c:	defffc04 	addi	sp,sp,-16
 1009f90:	dfc00315 	stw	ra,12(sp)
 1009f94:	df000215 	stw	fp,8(sp)
 1009f98:	df000204 	addi	fp,sp,8
 1009f9c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 1009fa0:	d1600e04 	addi	r5,gp,-32712
 1009fa4:	e13fff17 	ldw	r4,-4(fp)
 1009fa8:	100a5a80 	call	100a5a8 <alt_find_dev>
 1009fac:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 1009fb0:	e0bffe17 	ldw	r2,-8(fp)
 1009fb4:	1000041e 	bne	r2,zero,1009fc8 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 1009fb8:	1009ed40 	call	1009ed4 <alt_get_errno>
 1009fbc:	1007883a 	mov	r3,r2
 1009fc0:	008004c4 	movi	r2,19
 1009fc4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 1009fc8:	e0bffe17 	ldw	r2,-8(fp)
}
 1009fcc:	e037883a 	mov	sp,fp
 1009fd0:	dfc00117 	ldw	ra,4(sp)
 1009fd4:	df000017 	ldw	fp,0(sp)
 1009fd8:	dec00204 	addi	sp,sp,8
 1009fdc:	f800283a 	ret

01009fe0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 1009fe0:	defffe04 	addi	sp,sp,-8
 1009fe4:	df000115 	stw	fp,4(sp)
 1009fe8:	df000104 	addi	fp,sp,4
 1009fec:	e13fff15 	stw	r4,-4(fp)
  return;
 1009ff0:	0001883a 	nop
}
 1009ff4:	e037883a 	mov	sp,fp
 1009ff8:	df000017 	ldw	fp,0(sp)
 1009ffc:	dec00104 	addi	sp,sp,4
 100a000:	f800283a 	ret

0100a004 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 100a004:	defffc04 	addi	sp,sp,-16
 100a008:	dfc00315 	stw	ra,12(sp)
 100a00c:	df000215 	stw	fp,8(sp)
 100a010:	df000204 	addi	fp,sp,8
 100a014:	e13ffe15 	stw	r4,-8(fp)
 100a018:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 100a01c:	0001883a 	nop
 100a020:	e17fff17 	ldw	r5,-4(fp)
 100a024:	e13ffe17 	ldw	r4,-8(fp)
 100a028:	1009f100 	call	1009f10 <alt_mutex_trylock>
 100a02c:	103ffc1e 	bne	r2,zero,100a020 <__alt_data_end+0xff00a020>
}
 100a030:	0001883a 	nop
 100a034:	e037883a 	mov	sp,fp
 100a038:	dfc00117 	ldw	ra,4(sp)
 100a03c:	df000017 	ldw	fp,0(sp)
 100a040:	dec00204 	addi	sp,sp,8
 100a044:	f800283a 	ret

0100a048 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 100a048:	defffa04 	addi	sp,sp,-24
 100a04c:	dfc00515 	stw	ra,20(sp)
 100a050:	df000415 	stw	fp,16(sp)
 100a054:	df000404 	addi	fp,sp,16
 100a058:	e13ffd15 	stw	r4,-12(fp)
 100a05c:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 100a060:	e17ffe17 	ldw	r5,-8(fp)
 100a064:	e13ffd17 	ldw	r4,-12(fp)
 100a068:	1009f100 	call	1009f10 <alt_mutex_trylock>
 100a06c:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 100a070:	e0bffc17 	ldw	r2,-16(fp)
}
 100a074:	e037883a 	mov	sp,fp
 100a078:	dfc00117 	ldw	ra,4(sp)
 100a07c:	df000017 	ldw	fp,0(sp)
 100a080:	dec00204 	addi	sp,sp,8
 100a084:	f800283a 	ret

0100a088 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 100a088:	defffd04 	addi	sp,sp,-12
 100a08c:	df000215 	stw	fp,8(sp)
 100a090:	df000204 	addi	fp,sp,8
 100a094:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 100a098:	0005317a 	rdctl	r2,cpuid
 100a09c:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 100a0a0:	e0bfff17 	ldw	r2,-4(fp)
 100a0a4:	10800317 	ldw	r2,12(r2)
 100a0a8:	10800104 	addi	r2,r2,4
 100a0ac:	00c00044 	movi	r3,1
 100a0b0:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 100a0b4:	e0bfff17 	ldw	r2,-4(fp)
 100a0b8:	10800317 	ldw	r2,12(r2)
 100a0bc:	e0fffe17 	ldw	r3,-8(fp)
 100a0c0:	1806943a 	slli	r3,r3,16
 100a0c4:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 100a0c8:	0001883a 	nop
 100a0cc:	e037883a 	mov	sp,fp
 100a0d0:	df000017 	ldw	fp,0(sp)
 100a0d4:	dec00104 	addi	sp,sp,4
 100a0d8:	f800283a 	ret

0100a0dc <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 100a0dc:	defff904 	addi	sp,sp,-28
 100a0e0:	df000615 	stw	fp,24(sp)
 100a0e4:	df000604 	addi	fp,sp,24
 100a0e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 100a0ec:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 100a0f0:	0005317a 	rdctl	r2,cpuid
 100a0f4:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 100a0f8:	e0bfff17 	ldw	r2,-4(fp)
 100a0fc:	10800317 	ldw	r2,12(r2)
 100a100:	10800037 	ldwio	r2,0(r2)
 100a104:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 100a108:	e0bffc17 	ldw	r2,-16(fp)
 100a10c:	1004d43a 	srli	r2,r2,16
 100a110:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 100a114:	e0fffd17 	ldw	r3,-12(fp)
 100a118:	e0bffb17 	ldw	r2,-20(fp)
 100a11c:	1880071e 	bne	r3,r2,100a13c <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 100a120:	e0bffc17 	ldw	r2,-16(fp)
 100a124:	10bfffcc 	andi	r2,r2,65535
 100a128:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 100a12c:	e0bffe17 	ldw	r2,-8(fp)
 100a130:	10000226 	beq	r2,zero,100a13c <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 100a134:	00800044 	movi	r2,1
 100a138:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 100a13c:	e0bffa17 	ldw	r2,-24(fp)
}
 100a140:	e037883a 	mov	sp,fp
 100a144:	df000017 	ldw	fp,0(sp)
 100a148:	dec00104 	addi	sp,sp,4
 100a14c:	f800283a 	ret

0100a150 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 100a150:	defffc04 	addi	sp,sp,-16
 100a154:	df000315 	stw	fp,12(sp)
 100a158:	df000304 	addi	fp,sp,12
 100a15c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 100a160:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 100a164:	e0bfff17 	ldw	r2,-4(fp)
 100a168:	10800317 	ldw	r2,12(r2)
 100a16c:	10800104 	addi	r2,r2,4
 100a170:	10800037 	ldwio	r2,0(r2)
 100a174:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 100a178:	e0bffe17 	ldw	r2,-8(fp)
 100a17c:	1080004c 	andi	r2,r2,1
 100a180:	10000226 	beq	r2,zero,100a18c <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 100a184:	00800044 	movi	r2,1
 100a188:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 100a18c:	e0bffd17 	ldw	r2,-12(fp)
}
 100a190:	e037883a 	mov	sp,fp
 100a194:	df000017 	ldw	fp,0(sp)
 100a198:	dec00104 	addi	sp,sp,4
 100a19c:	f800283a 	ret

0100a1a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100a1a0:	defffa04 	addi	sp,sp,-24
 100a1a4:	dfc00515 	stw	ra,20(sp)
 100a1a8:	df000415 	stw	fp,16(sp)
 100a1ac:	df000404 	addi	fp,sp,16
 100a1b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100a1b4:	0007883a 	mov	r3,zero
 100a1b8:	e0bfff17 	ldw	r2,-4(fp)
 100a1bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100a1c0:	e0bfff17 	ldw	r2,-4(fp)
 100a1c4:	10800104 	addi	r2,r2,4
 100a1c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a1cc:	0005303a 	rdctl	r2,status
 100a1d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a1d4:	e0fffd17 	ldw	r3,-12(fp)
 100a1d8:	00bfff84 	movi	r2,-2
 100a1dc:	1884703a 	and	r2,r3,r2
 100a1e0:	1001703a 	wrctl	status,r2
  
  return context;
 100a1e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100a1e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 100a1ec:	100ad3c0 	call	100ad3c <alt_tick>
 100a1f0:	e0bffc17 	ldw	r2,-16(fp)
 100a1f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a1f8:	e0bffe17 	ldw	r2,-8(fp)
 100a1fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100a200:	0001883a 	nop
 100a204:	e037883a 	mov	sp,fp
 100a208:	dfc00117 	ldw	ra,4(sp)
 100a20c:	df000017 	ldw	fp,0(sp)
 100a210:	dec00204 	addi	sp,sp,8
 100a214:	f800283a 	ret

0100a218 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100a218:	defff804 	addi	sp,sp,-32
 100a21c:	dfc00715 	stw	ra,28(sp)
 100a220:	df000615 	stw	fp,24(sp)
 100a224:	df000604 	addi	fp,sp,24
 100a228:	e13ffc15 	stw	r4,-16(fp)
 100a22c:	e17ffd15 	stw	r5,-12(fp)
 100a230:	e1bffe15 	stw	r6,-8(fp)
 100a234:	e1ffff15 	stw	r7,-4(fp)
 100a238:	e0bfff17 	ldw	r2,-4(fp)
 100a23c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100a240:	d0a6d117 	ldw	r2,-25788(gp)
 100a244:	1000021e 	bne	r2,zero,100a250 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 100a248:	e0bffb17 	ldw	r2,-20(fp)
 100a24c:	d0a6d115 	stw	r2,-25788(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100a250:	e0bffc17 	ldw	r2,-16(fp)
 100a254:	10800104 	addi	r2,r2,4
 100a258:	00c001c4 	movi	r3,7
 100a25c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100a260:	d8000015 	stw	zero,0(sp)
 100a264:	e1fffc17 	ldw	r7,-16(fp)
 100a268:	01804074 	movhi	r6,257
 100a26c:	31a86804 	addi	r6,r6,-24160
 100a270:	e17ffe17 	ldw	r5,-8(fp)
 100a274:	e13ffd17 	ldw	r4,-12(fp)
 100a278:	100a66c0 	call	100a66c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100a27c:	0001883a 	nop
 100a280:	e037883a 	mov	sp,fp
 100a284:	dfc00117 	ldw	ra,4(sp)
 100a288:	df000017 	ldw	fp,0(sp)
 100a28c:	dec00204 	addi	sp,sp,8
 100a290:	f800283a 	ret

0100a294 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100a294:	defff504 	addi	sp,sp,-44
 100a298:	df000a15 	stw	fp,40(sp)
 100a29c:	df000a04 	addi	fp,sp,40
 100a2a0:	e13ffc15 	stw	r4,-16(fp)
 100a2a4:	e17ffd15 	stw	r5,-12(fp)
 100a2a8:	e1bffe15 	stw	r6,-8(fp)
 100a2ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100a2b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100a2b4:	d0a6d117 	ldw	r2,-25788(gp)
  
  if (alt_ticks_per_second ())
 100a2b8:	10003c26 	beq	r2,zero,100a3ac <alt_alarm_start+0x118>
  {
    if (alarm)
 100a2bc:	e0bffc17 	ldw	r2,-16(fp)
 100a2c0:	10003826 	beq	r2,zero,100a3a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 100a2c4:	e0bffc17 	ldw	r2,-16(fp)
 100a2c8:	e0fffe17 	ldw	r3,-8(fp)
 100a2cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100a2d0:	e0bffc17 	ldw	r2,-16(fp)
 100a2d4:	e0ffff17 	ldw	r3,-4(fp)
 100a2d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a2dc:	0005303a 	rdctl	r2,status
 100a2e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a2e4:	e0fff917 	ldw	r3,-28(fp)
 100a2e8:	00bfff84 	movi	r2,-2
 100a2ec:	1884703a 	and	r2,r3,r2
 100a2f0:	1001703a 	wrctl	status,r2
  
  return context;
 100a2f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 100a2f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100a2fc:	d0a6d217 	ldw	r2,-25784(gp)
      
      current_nticks = alt_nticks();
 100a300:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100a304:	e0fffd17 	ldw	r3,-12(fp)
 100a308:	e0bff617 	ldw	r2,-40(fp)
 100a30c:	1885883a 	add	r2,r3,r2
 100a310:	10c00044 	addi	r3,r2,1
 100a314:	e0bffc17 	ldw	r2,-16(fp)
 100a318:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100a31c:	e0bffc17 	ldw	r2,-16(fp)
 100a320:	10c00217 	ldw	r3,8(r2)
 100a324:	e0bff617 	ldw	r2,-40(fp)
 100a328:	1880042e 	bgeu	r3,r2,100a33c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 100a32c:	e0bffc17 	ldw	r2,-16(fp)
 100a330:	00c00044 	movi	r3,1
 100a334:	10c00405 	stb	r3,16(r2)
 100a338:	00000206 	br	100a344 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 100a33c:	e0bffc17 	ldw	r2,-16(fp)
 100a340:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100a344:	e0bffc17 	ldw	r2,-16(fp)
 100a348:	d0e01004 	addi	r3,gp,-32704
 100a34c:	e0fffa15 	stw	r3,-24(fp)
 100a350:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100a354:	e0bffb17 	ldw	r2,-20(fp)
 100a358:	e0fffa17 	ldw	r3,-24(fp)
 100a35c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100a360:	e0bffa17 	ldw	r2,-24(fp)
 100a364:	10c00017 	ldw	r3,0(r2)
 100a368:	e0bffb17 	ldw	r2,-20(fp)
 100a36c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100a370:	e0bffa17 	ldw	r2,-24(fp)
 100a374:	10800017 	ldw	r2,0(r2)
 100a378:	e0fffb17 	ldw	r3,-20(fp)
 100a37c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100a380:	e0bffa17 	ldw	r2,-24(fp)
 100a384:	e0fffb17 	ldw	r3,-20(fp)
 100a388:	10c00015 	stw	r3,0(r2)
 100a38c:	e0bff817 	ldw	r2,-32(fp)
 100a390:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a394:	e0bff717 	ldw	r2,-36(fp)
 100a398:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100a39c:	0005883a 	mov	r2,zero
 100a3a0:	00000306 	br	100a3b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 100a3a4:	00bffa84 	movi	r2,-22
 100a3a8:	00000106 	br	100a3b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 100a3ac:	00bfde84 	movi	r2,-134
  }
}
 100a3b0:	e037883a 	mov	sp,fp
 100a3b4:	df000017 	ldw	fp,0(sp)
 100a3b8:	dec00104 	addi	sp,sp,4
 100a3bc:	f800283a 	ret

0100a3c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100a3c0:	defffe04 	addi	sp,sp,-8
 100a3c4:	df000115 	stw	fp,4(sp)
 100a3c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100a3cc:	e03fff15 	stw	zero,-4(fp)
 100a3d0:	00000506 	br	100a3e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100a3d4:	e0bfff17 	ldw	r2,-4(fp)
 100a3d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100a3dc:	e0bfff17 	ldw	r2,-4(fp)
 100a3e0:	10800804 	addi	r2,r2,32
 100a3e4:	e0bfff15 	stw	r2,-4(fp)
 100a3e8:	e0bfff17 	ldw	r2,-4(fp)
 100a3ec:	10820030 	cmpltui	r2,r2,2048
 100a3f0:	103ff81e 	bne	r2,zero,100a3d4 <__alt_data_end+0xff00a3d4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100a3f4:	0001883a 	nop
 100a3f8:	e037883a 	mov	sp,fp
 100a3fc:	df000017 	ldw	fp,0(sp)
 100a400:	dec00104 	addi	sp,sp,4
 100a404:	f800283a 	ret

0100a408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a408:	defffe04 	addi	sp,sp,-8
 100a40c:	dfc00115 	stw	ra,4(sp)
 100a410:	df000015 	stw	fp,0(sp)
 100a414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100a418:	d0a00b17 	ldw	r2,-32724(gp)
 100a41c:	10000326 	beq	r2,zero,100a42c <alt_get_errno+0x24>
 100a420:	d0a00b17 	ldw	r2,-32724(gp)
 100a424:	103ee83a 	callr	r2
 100a428:	00000106 	br	100a430 <alt_get_errno+0x28>
 100a42c:	d0a6cc04 	addi	r2,gp,-25808
}
 100a430:	e037883a 	mov	sp,fp
 100a434:	dfc00117 	ldw	ra,4(sp)
 100a438:	df000017 	ldw	fp,0(sp)
 100a43c:	dec00204 	addi	sp,sp,8
 100a440:	f800283a 	ret

0100a444 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100a444:	defffa04 	addi	sp,sp,-24
 100a448:	dfc00515 	stw	ra,20(sp)
 100a44c:	df000415 	stw	fp,16(sp)
 100a450:	df000404 	addi	fp,sp,16
 100a454:	e13ffe15 	stw	r4,-8(fp)
 100a458:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100a45c:	e0bffe17 	ldw	r2,-8(fp)
 100a460:	10000326 	beq	r2,zero,100a470 <alt_dev_llist_insert+0x2c>
 100a464:	e0bffe17 	ldw	r2,-8(fp)
 100a468:	10800217 	ldw	r2,8(r2)
 100a46c:	1000061e 	bne	r2,zero,100a488 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 100a470:	100a4080 	call	100a408 <alt_get_errno>
 100a474:	1007883a 	mov	r3,r2
 100a478:	00800584 	movi	r2,22
 100a47c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100a480:	00bffa84 	movi	r2,-22
 100a484:	00001306 	br	100a4d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100a488:	e0bffe17 	ldw	r2,-8(fp)
 100a48c:	e0ffff17 	ldw	r3,-4(fp)
 100a490:	e0fffc15 	stw	r3,-16(fp)
 100a494:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100a498:	e0bffd17 	ldw	r2,-12(fp)
 100a49c:	e0fffc17 	ldw	r3,-16(fp)
 100a4a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100a4a4:	e0bffc17 	ldw	r2,-16(fp)
 100a4a8:	10c00017 	ldw	r3,0(r2)
 100a4ac:	e0bffd17 	ldw	r2,-12(fp)
 100a4b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100a4b4:	e0bffc17 	ldw	r2,-16(fp)
 100a4b8:	10800017 	ldw	r2,0(r2)
 100a4bc:	e0fffd17 	ldw	r3,-12(fp)
 100a4c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100a4c4:	e0bffc17 	ldw	r2,-16(fp)
 100a4c8:	e0fffd17 	ldw	r3,-12(fp)
 100a4cc:	10c00015 	stw	r3,0(r2)

  return 0;  
 100a4d0:	0005883a 	mov	r2,zero
}
 100a4d4:	e037883a 	mov	sp,fp
 100a4d8:	dfc00117 	ldw	ra,4(sp)
 100a4dc:	df000017 	ldw	fp,0(sp)
 100a4e0:	dec00204 	addi	sp,sp,8
 100a4e4:	f800283a 	ret

0100a4e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100a4e8:	defffd04 	addi	sp,sp,-12
 100a4ec:	dfc00215 	stw	ra,8(sp)
 100a4f0:	df000115 	stw	fp,4(sp)
 100a4f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100a4f8:	00804074 	movhi	r2,257
 100a4fc:	10ad3404 	addi	r2,r2,-19248
 100a500:	e0bfff15 	stw	r2,-4(fp)
 100a504:	00000606 	br	100a520 <_do_ctors+0x38>
        (*ctor) (); 
 100a508:	e0bfff17 	ldw	r2,-4(fp)
 100a50c:	10800017 	ldw	r2,0(r2)
 100a510:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100a514:	e0bfff17 	ldw	r2,-4(fp)
 100a518:	10bfff04 	addi	r2,r2,-4
 100a51c:	e0bfff15 	stw	r2,-4(fp)
 100a520:	e0ffff17 	ldw	r3,-4(fp)
 100a524:	00804074 	movhi	r2,257
 100a528:	10ad3504 	addi	r2,r2,-19244
 100a52c:	18bff62e 	bgeu	r3,r2,100a508 <__alt_data_end+0xff00a508>
        (*ctor) (); 
}
 100a530:	0001883a 	nop
 100a534:	e037883a 	mov	sp,fp
 100a538:	dfc00117 	ldw	ra,4(sp)
 100a53c:	df000017 	ldw	fp,0(sp)
 100a540:	dec00204 	addi	sp,sp,8
 100a544:	f800283a 	ret

0100a548 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100a548:	defffd04 	addi	sp,sp,-12
 100a54c:	dfc00215 	stw	ra,8(sp)
 100a550:	df000115 	stw	fp,4(sp)
 100a554:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100a558:	00804074 	movhi	r2,257
 100a55c:	10ad3404 	addi	r2,r2,-19248
 100a560:	e0bfff15 	stw	r2,-4(fp)
 100a564:	00000606 	br	100a580 <_do_dtors+0x38>
        (*dtor) (); 
 100a568:	e0bfff17 	ldw	r2,-4(fp)
 100a56c:	10800017 	ldw	r2,0(r2)
 100a570:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100a574:	e0bfff17 	ldw	r2,-4(fp)
 100a578:	10bfff04 	addi	r2,r2,-4
 100a57c:	e0bfff15 	stw	r2,-4(fp)
 100a580:	e0ffff17 	ldw	r3,-4(fp)
 100a584:	00804074 	movhi	r2,257
 100a588:	10ad3504 	addi	r2,r2,-19244
 100a58c:	18bff62e 	bgeu	r3,r2,100a568 <__alt_data_end+0xff00a568>
        (*dtor) (); 
}
 100a590:	0001883a 	nop
 100a594:	e037883a 	mov	sp,fp
 100a598:	dfc00117 	ldw	ra,4(sp)
 100a59c:	df000017 	ldw	fp,0(sp)
 100a5a0:	dec00204 	addi	sp,sp,8
 100a5a4:	f800283a 	ret

0100a5a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100a5a8:	defffa04 	addi	sp,sp,-24
 100a5ac:	dfc00515 	stw	ra,20(sp)
 100a5b0:	df000415 	stw	fp,16(sp)
 100a5b4:	df000404 	addi	fp,sp,16
 100a5b8:	e13ffe15 	stw	r4,-8(fp)
 100a5bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100a5c0:	e0bfff17 	ldw	r2,-4(fp)
 100a5c4:	10800017 	ldw	r2,0(r2)
 100a5c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100a5cc:	e13ffe17 	ldw	r4,-8(fp)
 100a5d0:	1005dbc0 	call	1005dbc <strlen>
 100a5d4:	10800044 	addi	r2,r2,1
 100a5d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100a5dc:	00000d06 	br	100a614 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100a5e0:	e0bffc17 	ldw	r2,-16(fp)
 100a5e4:	10800217 	ldw	r2,8(r2)
 100a5e8:	e0fffd17 	ldw	r3,-12(fp)
 100a5ec:	180d883a 	mov	r6,r3
 100a5f0:	e17ffe17 	ldw	r5,-8(fp)
 100a5f4:	1009883a 	mov	r4,r2
 100a5f8:	100b18c0 	call	100b18c <memcmp>
 100a5fc:	1000021e 	bne	r2,zero,100a608 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100a600:	e0bffc17 	ldw	r2,-16(fp)
 100a604:	00000706 	br	100a624 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100a608:	e0bffc17 	ldw	r2,-16(fp)
 100a60c:	10800017 	ldw	r2,0(r2)
 100a610:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100a614:	e0fffc17 	ldw	r3,-16(fp)
 100a618:	e0bfff17 	ldw	r2,-4(fp)
 100a61c:	18bff01e 	bne	r3,r2,100a5e0 <__alt_data_end+0xff00a5e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100a620:	0005883a 	mov	r2,zero
}
 100a624:	e037883a 	mov	sp,fp
 100a628:	dfc00117 	ldw	ra,4(sp)
 100a62c:	df000017 	ldw	fp,0(sp)
 100a630:	dec00204 	addi	sp,sp,8
 100a634:	f800283a 	ret

0100a638 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100a638:	defffe04 	addi	sp,sp,-8
 100a63c:	dfc00115 	stw	ra,4(sp)
 100a640:	df000015 	stw	fp,0(sp)
 100a644:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100a648:	01420004 	movi	r5,2048
 100a64c:	0009883a 	mov	r4,zero
 100a650:	100b0140 	call	100b014 <alt_icache_flush>
#endif
}
 100a654:	0001883a 	nop
 100a658:	e037883a 	mov	sp,fp
 100a65c:	dfc00117 	ldw	ra,4(sp)
 100a660:	df000017 	ldw	fp,0(sp)
 100a664:	dec00204 	addi	sp,sp,8
 100a668:	f800283a 	ret

0100a66c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100a66c:	defff904 	addi	sp,sp,-28
 100a670:	dfc00615 	stw	ra,24(sp)
 100a674:	df000515 	stw	fp,20(sp)
 100a678:	df000504 	addi	fp,sp,20
 100a67c:	e13ffc15 	stw	r4,-16(fp)
 100a680:	e17ffd15 	stw	r5,-12(fp)
 100a684:	e1bffe15 	stw	r6,-8(fp)
 100a688:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100a68c:	e0800217 	ldw	r2,8(fp)
 100a690:	d8800015 	stw	r2,0(sp)
 100a694:	e1ffff17 	ldw	r7,-4(fp)
 100a698:	e1bffe17 	ldw	r6,-8(fp)
 100a69c:	e17ffd17 	ldw	r5,-12(fp)
 100a6a0:	e13ffc17 	ldw	r4,-16(fp)
 100a6a4:	100a81c0 	call	100a81c <alt_iic_isr_register>
}  
 100a6a8:	e037883a 	mov	sp,fp
 100a6ac:	dfc00117 	ldw	ra,4(sp)
 100a6b0:	df000017 	ldw	fp,0(sp)
 100a6b4:	dec00204 	addi	sp,sp,8
 100a6b8:	f800283a 	ret

0100a6bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100a6bc:	defff904 	addi	sp,sp,-28
 100a6c0:	df000615 	stw	fp,24(sp)
 100a6c4:	df000604 	addi	fp,sp,24
 100a6c8:	e13ffe15 	stw	r4,-8(fp)
 100a6cc:	e17fff15 	stw	r5,-4(fp)
 100a6d0:	e0bfff17 	ldw	r2,-4(fp)
 100a6d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a6d8:	0005303a 	rdctl	r2,status
 100a6dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a6e0:	e0fffb17 	ldw	r3,-20(fp)
 100a6e4:	00bfff84 	movi	r2,-2
 100a6e8:	1884703a 	and	r2,r3,r2
 100a6ec:	1001703a 	wrctl	status,r2
  
  return context;
 100a6f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100a6f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 100a6f8:	00c00044 	movi	r3,1
 100a6fc:	e0bffa17 	ldw	r2,-24(fp)
 100a700:	1884983a 	sll	r2,r3,r2
 100a704:	1007883a 	mov	r3,r2
 100a708:	d0a6cd17 	ldw	r2,-25804(gp)
 100a70c:	1884b03a 	or	r2,r3,r2
 100a710:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100a714:	d0a6cd17 	ldw	r2,-25804(gp)
 100a718:	100170fa 	wrctl	ienable,r2
 100a71c:	e0bffc17 	ldw	r2,-16(fp)
 100a720:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a724:	e0bffd17 	ldw	r2,-12(fp)
 100a728:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100a72c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 100a730:	0001883a 	nop
}
 100a734:	e037883a 	mov	sp,fp
 100a738:	df000017 	ldw	fp,0(sp)
 100a73c:	dec00104 	addi	sp,sp,4
 100a740:	f800283a 	ret

0100a744 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100a744:	defff904 	addi	sp,sp,-28
 100a748:	df000615 	stw	fp,24(sp)
 100a74c:	df000604 	addi	fp,sp,24
 100a750:	e13ffe15 	stw	r4,-8(fp)
 100a754:	e17fff15 	stw	r5,-4(fp)
 100a758:	e0bfff17 	ldw	r2,-4(fp)
 100a75c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a760:	0005303a 	rdctl	r2,status
 100a764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a768:	e0fffb17 	ldw	r3,-20(fp)
 100a76c:	00bfff84 	movi	r2,-2
 100a770:	1884703a 	and	r2,r3,r2
 100a774:	1001703a 	wrctl	status,r2
  
  return context;
 100a778:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100a77c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100a780:	00c00044 	movi	r3,1
 100a784:	e0bffa17 	ldw	r2,-24(fp)
 100a788:	1884983a 	sll	r2,r3,r2
 100a78c:	0084303a 	nor	r2,zero,r2
 100a790:	1007883a 	mov	r3,r2
 100a794:	d0a6cd17 	ldw	r2,-25804(gp)
 100a798:	1884703a 	and	r2,r3,r2
 100a79c:	d0a6cd15 	stw	r2,-25804(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100a7a0:	d0a6cd17 	ldw	r2,-25804(gp)
 100a7a4:	100170fa 	wrctl	ienable,r2
 100a7a8:	e0bffc17 	ldw	r2,-16(fp)
 100a7ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a7b0:	e0bffd17 	ldw	r2,-12(fp)
 100a7b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100a7b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 100a7bc:	0001883a 	nop
}
 100a7c0:	e037883a 	mov	sp,fp
 100a7c4:	df000017 	ldw	fp,0(sp)
 100a7c8:	dec00104 	addi	sp,sp,4
 100a7cc:	f800283a 	ret

0100a7d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100a7d0:	defffc04 	addi	sp,sp,-16
 100a7d4:	df000315 	stw	fp,12(sp)
 100a7d8:	df000304 	addi	fp,sp,12
 100a7dc:	e13ffe15 	stw	r4,-8(fp)
 100a7e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100a7e4:	000530fa 	rdctl	r2,ienable
 100a7e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100a7ec:	00c00044 	movi	r3,1
 100a7f0:	e0bfff17 	ldw	r2,-4(fp)
 100a7f4:	1884983a 	sll	r2,r3,r2
 100a7f8:	1007883a 	mov	r3,r2
 100a7fc:	e0bffd17 	ldw	r2,-12(fp)
 100a800:	1884703a 	and	r2,r3,r2
 100a804:	1004c03a 	cmpne	r2,r2,zero
 100a808:	10803fcc 	andi	r2,r2,255
}
 100a80c:	e037883a 	mov	sp,fp
 100a810:	df000017 	ldw	fp,0(sp)
 100a814:	dec00104 	addi	sp,sp,4
 100a818:	f800283a 	ret

0100a81c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100a81c:	defff504 	addi	sp,sp,-44
 100a820:	dfc00a15 	stw	ra,40(sp)
 100a824:	df000915 	stw	fp,36(sp)
 100a828:	df000904 	addi	fp,sp,36
 100a82c:	e13ffc15 	stw	r4,-16(fp)
 100a830:	e17ffd15 	stw	r5,-12(fp)
 100a834:	e1bffe15 	stw	r6,-8(fp)
 100a838:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100a83c:	00bffa84 	movi	r2,-22
 100a840:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100a844:	e0bffd17 	ldw	r2,-12(fp)
 100a848:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100a84c:	e0bff817 	ldw	r2,-32(fp)
 100a850:	10800808 	cmpgei	r2,r2,32
 100a854:	1000271e 	bne	r2,zero,100a8f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a858:	0005303a 	rdctl	r2,status
 100a85c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a860:	e0fffb17 	ldw	r3,-20(fp)
 100a864:	00bfff84 	movi	r2,-2
 100a868:	1884703a 	and	r2,r3,r2
 100a86c:	1001703a 	wrctl	status,r2
  
  return context;
 100a870:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100a874:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 100a878:	00806074 	movhi	r2,385
 100a87c:	10baf004 	addi	r2,r2,-5184
 100a880:	e0fff817 	ldw	r3,-32(fp)
 100a884:	180690fa 	slli	r3,r3,3
 100a888:	10c5883a 	add	r2,r2,r3
 100a88c:	e0fffe17 	ldw	r3,-8(fp)
 100a890:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100a894:	00806074 	movhi	r2,385
 100a898:	10baf004 	addi	r2,r2,-5184
 100a89c:	e0fff817 	ldw	r3,-32(fp)
 100a8a0:	180690fa 	slli	r3,r3,3
 100a8a4:	10c5883a 	add	r2,r2,r3
 100a8a8:	10800104 	addi	r2,r2,4
 100a8ac:	e0ffff17 	ldw	r3,-4(fp)
 100a8b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100a8b4:	e0bffe17 	ldw	r2,-8(fp)
 100a8b8:	10000526 	beq	r2,zero,100a8d0 <alt_iic_isr_register+0xb4>
 100a8bc:	e0bff817 	ldw	r2,-32(fp)
 100a8c0:	100b883a 	mov	r5,r2
 100a8c4:	e13ffc17 	ldw	r4,-16(fp)
 100a8c8:	100a6bc0 	call	100a6bc <alt_ic_irq_enable>
 100a8cc:	00000406 	br	100a8e0 <alt_iic_isr_register+0xc4>
 100a8d0:	e0bff817 	ldw	r2,-32(fp)
 100a8d4:	100b883a 	mov	r5,r2
 100a8d8:	e13ffc17 	ldw	r4,-16(fp)
 100a8dc:	100a7440 	call	100a744 <alt_ic_irq_disable>
 100a8e0:	e0bff715 	stw	r2,-36(fp)
 100a8e4:	e0bffa17 	ldw	r2,-24(fp)
 100a8e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a8ec:	e0bff917 	ldw	r2,-28(fp)
 100a8f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100a8f4:	e0bff717 	ldw	r2,-36(fp)
}
 100a8f8:	e037883a 	mov	sp,fp
 100a8fc:	dfc00117 	ldw	ra,4(sp)
 100a900:	df000017 	ldw	fp,0(sp)
 100a904:	dec00204 	addi	sp,sp,8
 100a908:	f800283a 	ret

0100a90c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100a90c:	defff904 	addi	sp,sp,-28
 100a910:	dfc00615 	stw	ra,24(sp)
 100a914:	df000515 	stw	fp,20(sp)
 100a918:	df000504 	addi	fp,sp,20
 100a91c:	e13ffc15 	stw	r4,-16(fp)
 100a920:	e17ffd15 	stw	r5,-12(fp)
 100a924:	e1bffe15 	stw	r6,-8(fp)
 100a928:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100a92c:	e1bfff17 	ldw	r6,-4(fp)
 100a930:	e17ffe17 	ldw	r5,-8(fp)
 100a934:	e13ffd17 	ldw	r4,-12(fp)
 100a938:	100ab4c0 	call	100ab4c <open>
 100a93c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100a940:	e0bffb17 	ldw	r2,-20(fp)
 100a944:	10001c16 	blt	r2,zero,100a9b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 100a948:	00804074 	movhi	r2,257
 100a94c:	10af6404 	addi	r2,r2,-17008
 100a950:	e0fffb17 	ldw	r3,-20(fp)
 100a954:	18c00324 	muli	r3,r3,12
 100a958:	10c5883a 	add	r2,r2,r3
 100a95c:	10c00017 	ldw	r3,0(r2)
 100a960:	e0bffc17 	ldw	r2,-16(fp)
 100a964:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100a968:	00804074 	movhi	r2,257
 100a96c:	10af6404 	addi	r2,r2,-17008
 100a970:	e0fffb17 	ldw	r3,-20(fp)
 100a974:	18c00324 	muli	r3,r3,12
 100a978:	10c5883a 	add	r2,r2,r3
 100a97c:	10800104 	addi	r2,r2,4
 100a980:	10c00017 	ldw	r3,0(r2)
 100a984:	e0bffc17 	ldw	r2,-16(fp)
 100a988:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100a98c:	00804074 	movhi	r2,257
 100a990:	10af6404 	addi	r2,r2,-17008
 100a994:	e0fffb17 	ldw	r3,-20(fp)
 100a998:	18c00324 	muli	r3,r3,12
 100a99c:	10c5883a 	add	r2,r2,r3
 100a9a0:	10800204 	addi	r2,r2,8
 100a9a4:	10c00017 	ldw	r3,0(r2)
 100a9a8:	e0bffc17 	ldw	r2,-16(fp)
 100a9ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100a9b0:	e13ffb17 	ldw	r4,-20(fp)
 100a9b4:	10090ac0 	call	10090ac <alt_release_fd>
  }
} 
 100a9b8:	0001883a 	nop
 100a9bc:	e037883a 	mov	sp,fp
 100a9c0:	dfc00117 	ldw	ra,4(sp)
 100a9c4:	df000017 	ldw	fp,0(sp)
 100a9c8:	dec00204 	addi	sp,sp,8
 100a9cc:	f800283a 	ret

0100a9d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100a9d0:	defffb04 	addi	sp,sp,-20
 100a9d4:	dfc00415 	stw	ra,16(sp)
 100a9d8:	df000315 	stw	fp,12(sp)
 100a9dc:	df000304 	addi	fp,sp,12
 100a9e0:	e13ffd15 	stw	r4,-12(fp)
 100a9e4:	e17ffe15 	stw	r5,-8(fp)
 100a9e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100a9ec:	01c07fc4 	movi	r7,511
 100a9f0:	01800044 	movi	r6,1
 100a9f4:	e17ffd17 	ldw	r5,-12(fp)
 100a9f8:	01004074 	movhi	r4,257
 100a9fc:	212f6704 	addi	r4,r4,-16996
 100aa00:	100a90c0 	call	100a90c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100aa04:	01c07fc4 	movi	r7,511
 100aa08:	000d883a 	mov	r6,zero
 100aa0c:	e17ffe17 	ldw	r5,-8(fp)
 100aa10:	01004074 	movhi	r4,257
 100aa14:	212f6404 	addi	r4,r4,-17008
 100aa18:	100a90c0 	call	100a90c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100aa1c:	01c07fc4 	movi	r7,511
 100aa20:	01800044 	movi	r6,1
 100aa24:	e17fff17 	ldw	r5,-4(fp)
 100aa28:	01004074 	movhi	r4,257
 100aa2c:	212f6a04 	addi	r4,r4,-16984
 100aa30:	100a90c0 	call	100a90c <alt_open_fd>
}  
 100aa34:	0001883a 	nop
 100aa38:	e037883a 	mov	sp,fp
 100aa3c:	dfc00117 	ldw	ra,4(sp)
 100aa40:	df000017 	ldw	fp,0(sp)
 100aa44:	dec00204 	addi	sp,sp,8
 100aa48:	f800283a 	ret

0100aa4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aa4c:	defffe04 	addi	sp,sp,-8
 100aa50:	dfc00115 	stw	ra,4(sp)
 100aa54:	df000015 	stw	fp,0(sp)
 100aa58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100aa5c:	d0a00b17 	ldw	r2,-32724(gp)
 100aa60:	10000326 	beq	r2,zero,100aa70 <alt_get_errno+0x24>
 100aa64:	d0a00b17 	ldw	r2,-32724(gp)
 100aa68:	103ee83a 	callr	r2
 100aa6c:	00000106 	br	100aa74 <alt_get_errno+0x28>
 100aa70:	d0a6cc04 	addi	r2,gp,-25808
}
 100aa74:	e037883a 	mov	sp,fp
 100aa78:	dfc00117 	ldw	ra,4(sp)
 100aa7c:	df000017 	ldw	fp,0(sp)
 100aa80:	dec00204 	addi	sp,sp,8
 100aa84:	f800283a 	ret

0100aa88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100aa88:	defffd04 	addi	sp,sp,-12
 100aa8c:	df000215 	stw	fp,8(sp)
 100aa90:	df000204 	addi	fp,sp,8
 100aa94:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100aa98:	e0bfff17 	ldw	r2,-4(fp)
 100aa9c:	10800217 	ldw	r2,8(r2)
 100aaa0:	10d00034 	orhi	r3,r2,16384
 100aaa4:	e0bfff17 	ldw	r2,-4(fp)
 100aaa8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100aaac:	e03ffe15 	stw	zero,-8(fp)
 100aab0:	00001d06 	br	100ab28 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100aab4:	00804074 	movhi	r2,257
 100aab8:	10af6404 	addi	r2,r2,-17008
 100aabc:	e0fffe17 	ldw	r3,-8(fp)
 100aac0:	18c00324 	muli	r3,r3,12
 100aac4:	10c5883a 	add	r2,r2,r3
 100aac8:	10c00017 	ldw	r3,0(r2)
 100aacc:	e0bfff17 	ldw	r2,-4(fp)
 100aad0:	10800017 	ldw	r2,0(r2)
 100aad4:	1880111e 	bne	r3,r2,100ab1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100aad8:	00804074 	movhi	r2,257
 100aadc:	10af6404 	addi	r2,r2,-17008
 100aae0:	e0fffe17 	ldw	r3,-8(fp)
 100aae4:	18c00324 	muli	r3,r3,12
 100aae8:	10c5883a 	add	r2,r2,r3
 100aaec:	10800204 	addi	r2,r2,8
 100aaf0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100aaf4:	1000090e 	bge	r2,zero,100ab1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100aaf8:	e0bffe17 	ldw	r2,-8(fp)
 100aafc:	10c00324 	muli	r3,r2,12
 100ab00:	00804074 	movhi	r2,257
 100ab04:	10af6404 	addi	r2,r2,-17008
 100ab08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100ab0c:	e0bfff17 	ldw	r2,-4(fp)
 100ab10:	18800226 	beq	r3,r2,100ab1c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100ab14:	00bffcc4 	movi	r2,-13
 100ab18:	00000806 	br	100ab3c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100ab1c:	e0bffe17 	ldw	r2,-8(fp)
 100ab20:	10800044 	addi	r2,r2,1
 100ab24:	e0bffe15 	stw	r2,-8(fp)
 100ab28:	d0a00a17 	ldw	r2,-32728(gp)
 100ab2c:	1007883a 	mov	r3,r2
 100ab30:	e0bffe17 	ldw	r2,-8(fp)
 100ab34:	18bfdf2e 	bgeu	r3,r2,100aab4 <__alt_data_end+0xff00aab4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100ab38:	0005883a 	mov	r2,zero
}
 100ab3c:	e037883a 	mov	sp,fp
 100ab40:	df000017 	ldw	fp,0(sp)
 100ab44:	dec00104 	addi	sp,sp,4
 100ab48:	f800283a 	ret

0100ab4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100ab4c:	defff604 	addi	sp,sp,-40
 100ab50:	dfc00915 	stw	ra,36(sp)
 100ab54:	df000815 	stw	fp,32(sp)
 100ab58:	df000804 	addi	fp,sp,32
 100ab5c:	e13ffd15 	stw	r4,-12(fp)
 100ab60:	e17ffe15 	stw	r5,-8(fp)
 100ab64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100ab68:	00bfffc4 	movi	r2,-1
 100ab6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100ab70:	00bffb44 	movi	r2,-19
 100ab74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100ab78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100ab7c:	d1600804 	addi	r5,gp,-32736
 100ab80:	e13ffd17 	ldw	r4,-12(fp)
 100ab84:	100a5a80 	call	100a5a8 <alt_find_dev>
 100ab88:	e0bff815 	stw	r2,-32(fp)
 100ab8c:	e0bff817 	ldw	r2,-32(fp)
 100ab90:	1000051e 	bne	r2,zero,100aba8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100ab94:	e13ffd17 	ldw	r4,-12(fp)
 100ab98:	100ae680 	call	100ae68 <alt_find_file>
 100ab9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100aba0:	00800044 	movi	r2,1
 100aba4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100aba8:	e0bff817 	ldw	r2,-32(fp)
 100abac:	10002926 	beq	r2,zero,100ac54 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100abb0:	e13ff817 	ldw	r4,-32(fp)
 100abb4:	100af700 	call	100af70 <alt_get_fd>
 100abb8:	e0bff915 	stw	r2,-28(fp)
 100abbc:	e0bff917 	ldw	r2,-28(fp)
 100abc0:	1000030e 	bge	r2,zero,100abd0 <open+0x84>
    {
      status = index;
 100abc4:	e0bff917 	ldw	r2,-28(fp)
 100abc8:	e0bffa15 	stw	r2,-24(fp)
 100abcc:	00002306 	br	100ac5c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 100abd0:	e0bff917 	ldw	r2,-28(fp)
 100abd4:	10c00324 	muli	r3,r2,12
 100abd8:	00804074 	movhi	r2,257
 100abdc:	10af6404 	addi	r2,r2,-17008
 100abe0:	1885883a 	add	r2,r3,r2
 100abe4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100abe8:	e0fffe17 	ldw	r3,-8(fp)
 100abec:	00900034 	movhi	r2,16384
 100abf0:	10bfffc4 	addi	r2,r2,-1
 100abf4:	1886703a 	and	r3,r3,r2
 100abf8:	e0bffc17 	ldw	r2,-16(fp)
 100abfc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100ac00:	e0bffb17 	ldw	r2,-20(fp)
 100ac04:	1000051e 	bne	r2,zero,100ac1c <open+0xd0>
 100ac08:	e13ffc17 	ldw	r4,-16(fp)
 100ac0c:	100aa880 	call	100aa88 <alt_file_locked>
 100ac10:	e0bffa15 	stw	r2,-24(fp)
 100ac14:	e0bffa17 	ldw	r2,-24(fp)
 100ac18:	10001016 	blt	r2,zero,100ac5c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100ac1c:	e0bff817 	ldw	r2,-32(fp)
 100ac20:	10800317 	ldw	r2,12(r2)
 100ac24:	10000826 	beq	r2,zero,100ac48 <open+0xfc>
 100ac28:	e0bff817 	ldw	r2,-32(fp)
 100ac2c:	10800317 	ldw	r2,12(r2)
 100ac30:	e1ffff17 	ldw	r7,-4(fp)
 100ac34:	e1bffe17 	ldw	r6,-8(fp)
 100ac38:	e17ffd17 	ldw	r5,-12(fp)
 100ac3c:	e13ffc17 	ldw	r4,-16(fp)
 100ac40:	103ee83a 	callr	r2
 100ac44:	00000106 	br	100ac4c <open+0x100>
 100ac48:	0005883a 	mov	r2,zero
 100ac4c:	e0bffa15 	stw	r2,-24(fp)
 100ac50:	00000206 	br	100ac5c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100ac54:	00bffb44 	movi	r2,-19
 100ac58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100ac5c:	e0bffa17 	ldw	r2,-24(fp)
 100ac60:	1000090e 	bge	r2,zero,100ac88 <open+0x13c>
  {
    alt_release_fd (index);  
 100ac64:	e13ff917 	ldw	r4,-28(fp)
 100ac68:	10090ac0 	call	10090ac <alt_release_fd>
    ALT_ERRNO = -status;
 100ac6c:	100aa4c0 	call	100aa4c <alt_get_errno>
 100ac70:	1007883a 	mov	r3,r2
 100ac74:	e0bffa17 	ldw	r2,-24(fp)
 100ac78:	0085c83a 	sub	r2,zero,r2
 100ac7c:	18800015 	stw	r2,0(r3)
    return -1;
 100ac80:	00bfffc4 	movi	r2,-1
 100ac84:	00000106 	br	100ac8c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 100ac88:	e0bff917 	ldw	r2,-28(fp)
}
 100ac8c:	e037883a 	mov	sp,fp
 100ac90:	dfc00117 	ldw	ra,4(sp)
 100ac94:	df000017 	ldw	fp,0(sp)
 100ac98:	dec00204 	addi	sp,sp,8
 100ac9c:	f800283a 	ret

0100aca0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100aca0:	defffa04 	addi	sp,sp,-24
 100aca4:	df000515 	stw	fp,20(sp)
 100aca8:	df000504 	addi	fp,sp,20
 100acac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100acb0:	0005303a 	rdctl	r2,status
 100acb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100acb8:	e0fffc17 	ldw	r3,-16(fp)
 100acbc:	00bfff84 	movi	r2,-2
 100acc0:	1884703a 	and	r2,r3,r2
 100acc4:	1001703a 	wrctl	status,r2
  
  return context;
 100acc8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100accc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100acd0:	e0bfff17 	ldw	r2,-4(fp)
 100acd4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100acd8:	e0bffd17 	ldw	r2,-12(fp)
 100acdc:	10800017 	ldw	r2,0(r2)
 100ace0:	e0fffd17 	ldw	r3,-12(fp)
 100ace4:	18c00117 	ldw	r3,4(r3)
 100ace8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100acec:	e0bffd17 	ldw	r2,-12(fp)
 100acf0:	10800117 	ldw	r2,4(r2)
 100acf4:	e0fffd17 	ldw	r3,-12(fp)
 100acf8:	18c00017 	ldw	r3,0(r3)
 100acfc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100ad00:	e0bffd17 	ldw	r2,-12(fp)
 100ad04:	e0fffd17 	ldw	r3,-12(fp)
 100ad08:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100ad0c:	e0bffd17 	ldw	r2,-12(fp)
 100ad10:	e0fffd17 	ldw	r3,-12(fp)
 100ad14:	10c00015 	stw	r3,0(r2)
 100ad18:	e0bffb17 	ldw	r2,-20(fp)
 100ad1c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ad20:	e0bffe17 	ldw	r2,-8(fp)
 100ad24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100ad28:	0001883a 	nop
 100ad2c:	e037883a 	mov	sp,fp
 100ad30:	df000017 	ldw	fp,0(sp)
 100ad34:	dec00104 	addi	sp,sp,4
 100ad38:	f800283a 	ret

0100ad3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100ad3c:	defffb04 	addi	sp,sp,-20
 100ad40:	dfc00415 	stw	ra,16(sp)
 100ad44:	df000315 	stw	fp,12(sp)
 100ad48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100ad4c:	d0a01017 	ldw	r2,-32704(gp)
 100ad50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100ad54:	d0a6d217 	ldw	r2,-25784(gp)
 100ad58:	10800044 	addi	r2,r2,1
 100ad5c:	d0a6d215 	stw	r2,-25784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ad60:	00002e06 	br	100ae1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100ad64:	e0bffd17 	ldw	r2,-12(fp)
 100ad68:	10800017 	ldw	r2,0(r2)
 100ad6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100ad70:	e0bffd17 	ldw	r2,-12(fp)
 100ad74:	10800403 	ldbu	r2,16(r2)
 100ad78:	10803fcc 	andi	r2,r2,255
 100ad7c:	10000426 	beq	r2,zero,100ad90 <alt_tick+0x54>
 100ad80:	d0a6d217 	ldw	r2,-25784(gp)
 100ad84:	1000021e 	bne	r2,zero,100ad90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100ad88:	e0bffd17 	ldw	r2,-12(fp)
 100ad8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100ad90:	e0bffd17 	ldw	r2,-12(fp)
 100ad94:	10800217 	ldw	r2,8(r2)
 100ad98:	d0e6d217 	ldw	r3,-25784(gp)
 100ad9c:	18801d36 	bltu	r3,r2,100ae14 <alt_tick+0xd8>
 100ada0:	e0bffd17 	ldw	r2,-12(fp)
 100ada4:	10800403 	ldbu	r2,16(r2)
 100ada8:	10803fcc 	andi	r2,r2,255
 100adac:	1000191e 	bne	r2,zero,100ae14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100adb0:	e0bffd17 	ldw	r2,-12(fp)
 100adb4:	10800317 	ldw	r2,12(r2)
 100adb8:	e0fffd17 	ldw	r3,-12(fp)
 100adbc:	18c00517 	ldw	r3,20(r3)
 100adc0:	1809883a 	mov	r4,r3
 100adc4:	103ee83a 	callr	r2
 100adc8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100adcc:	e0bfff17 	ldw	r2,-4(fp)
 100add0:	1000031e 	bne	r2,zero,100ade0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100add4:	e13ffd17 	ldw	r4,-12(fp)
 100add8:	100aca00 	call	100aca0 <alt_alarm_stop>
 100addc:	00000d06 	br	100ae14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100ade0:	e0bffd17 	ldw	r2,-12(fp)
 100ade4:	10c00217 	ldw	r3,8(r2)
 100ade8:	e0bfff17 	ldw	r2,-4(fp)
 100adec:	1887883a 	add	r3,r3,r2
 100adf0:	e0bffd17 	ldw	r2,-12(fp)
 100adf4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100adf8:	e0bffd17 	ldw	r2,-12(fp)
 100adfc:	10c00217 	ldw	r3,8(r2)
 100ae00:	d0a6d217 	ldw	r2,-25784(gp)
 100ae04:	1880032e 	bgeu	r3,r2,100ae14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100ae08:	e0bffd17 	ldw	r2,-12(fp)
 100ae0c:	00c00044 	movi	r3,1
 100ae10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100ae14:	e0bffe17 	ldw	r2,-8(fp)
 100ae18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ae1c:	e0fffd17 	ldw	r3,-12(fp)
 100ae20:	d0a01004 	addi	r2,gp,-32704
 100ae24:	18bfcf1e 	bne	r3,r2,100ad64 <__alt_data_end+0xff00ad64>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100ae28:	0001883a 	nop
}
 100ae2c:	0001883a 	nop
 100ae30:	e037883a 	mov	sp,fp
 100ae34:	dfc00117 	ldw	ra,4(sp)
 100ae38:	df000017 	ldw	fp,0(sp)
 100ae3c:	dec00204 	addi	sp,sp,8
 100ae40:	f800283a 	ret

0100ae44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 100ae44:	deffff04 	addi	sp,sp,-4
 100ae48:	df000015 	stw	fp,0(sp)
 100ae4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100ae50:	000170fa 	wrctl	ienable,zero
}
 100ae54:	0001883a 	nop
 100ae58:	e037883a 	mov	sp,fp
 100ae5c:	df000017 	ldw	fp,0(sp)
 100ae60:	dec00104 	addi	sp,sp,4
 100ae64:	f800283a 	ret

0100ae68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100ae68:	defffb04 	addi	sp,sp,-20
 100ae6c:	dfc00415 	stw	ra,16(sp)
 100ae70:	df000315 	stw	fp,12(sp)
 100ae74:	df000304 	addi	fp,sp,12
 100ae78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100ae7c:	d0a00617 	ldw	r2,-32744(gp)
 100ae80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100ae84:	00003106 	br	100af4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 100ae88:	e0bffd17 	ldw	r2,-12(fp)
 100ae8c:	10800217 	ldw	r2,8(r2)
 100ae90:	1009883a 	mov	r4,r2
 100ae94:	1005dbc0 	call	1005dbc <strlen>
 100ae98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100ae9c:	e0bffd17 	ldw	r2,-12(fp)
 100aea0:	10c00217 	ldw	r3,8(r2)
 100aea4:	e0bffe17 	ldw	r2,-8(fp)
 100aea8:	10bfffc4 	addi	r2,r2,-1
 100aeac:	1885883a 	add	r2,r3,r2
 100aeb0:	10800003 	ldbu	r2,0(r2)
 100aeb4:	10803fcc 	andi	r2,r2,255
 100aeb8:	1080201c 	xori	r2,r2,128
 100aebc:	10bfe004 	addi	r2,r2,-128
 100aec0:	10800bd8 	cmpnei	r2,r2,47
 100aec4:	1000031e 	bne	r2,zero,100aed4 <alt_find_file+0x6c>
    {
      len -= 1;
 100aec8:	e0bffe17 	ldw	r2,-8(fp)
 100aecc:	10bfffc4 	addi	r2,r2,-1
 100aed0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100aed4:	e0bffe17 	ldw	r2,-8(fp)
 100aed8:	e0ffff17 	ldw	r3,-4(fp)
 100aedc:	1885883a 	add	r2,r3,r2
 100aee0:	10800003 	ldbu	r2,0(r2)
 100aee4:	10803fcc 	andi	r2,r2,255
 100aee8:	1080201c 	xori	r2,r2,128
 100aeec:	10bfe004 	addi	r2,r2,-128
 100aef0:	10800be0 	cmpeqi	r2,r2,47
 100aef4:	1000081e 	bne	r2,zero,100af18 <alt_find_file+0xb0>
 100aef8:	e0bffe17 	ldw	r2,-8(fp)
 100aefc:	e0ffff17 	ldw	r3,-4(fp)
 100af00:	1885883a 	add	r2,r3,r2
 100af04:	10800003 	ldbu	r2,0(r2)
 100af08:	10803fcc 	andi	r2,r2,255
 100af0c:	1080201c 	xori	r2,r2,128
 100af10:	10bfe004 	addi	r2,r2,-128
 100af14:	10000a1e 	bne	r2,zero,100af40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 100af18:	e0bffd17 	ldw	r2,-12(fp)
 100af1c:	10800217 	ldw	r2,8(r2)
 100af20:	e0fffe17 	ldw	r3,-8(fp)
 100af24:	180d883a 	mov	r6,r3
 100af28:	e17fff17 	ldw	r5,-4(fp)
 100af2c:	1009883a 	mov	r4,r2
 100af30:	100b18c0 	call	100b18c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100af34:	1000021e 	bne	r2,zero,100af40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100af38:	e0bffd17 	ldw	r2,-12(fp)
 100af3c:	00000706 	br	100af5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 100af40:	e0bffd17 	ldw	r2,-12(fp)
 100af44:	10800017 	ldw	r2,0(r2)
 100af48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100af4c:	e0fffd17 	ldw	r3,-12(fp)
 100af50:	d0a00604 	addi	r2,gp,-32744
 100af54:	18bfcc1e 	bne	r3,r2,100ae88 <__alt_data_end+0xff00ae88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100af58:	0005883a 	mov	r2,zero
}
 100af5c:	e037883a 	mov	sp,fp
 100af60:	dfc00117 	ldw	ra,4(sp)
 100af64:	df000017 	ldw	fp,0(sp)
 100af68:	dec00204 	addi	sp,sp,8
 100af6c:	f800283a 	ret

0100af70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100af70:	defffc04 	addi	sp,sp,-16
 100af74:	df000315 	stw	fp,12(sp)
 100af78:	df000304 	addi	fp,sp,12
 100af7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100af80:	00bffa04 	movi	r2,-24
 100af84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100af88:	e03ffd15 	stw	zero,-12(fp)
 100af8c:	00001906 	br	100aff4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100af90:	00804074 	movhi	r2,257
 100af94:	10af6404 	addi	r2,r2,-17008
 100af98:	e0fffd17 	ldw	r3,-12(fp)
 100af9c:	18c00324 	muli	r3,r3,12
 100afa0:	10c5883a 	add	r2,r2,r3
 100afa4:	10800017 	ldw	r2,0(r2)
 100afa8:	10000f1e 	bne	r2,zero,100afe8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 100afac:	00804074 	movhi	r2,257
 100afb0:	10af6404 	addi	r2,r2,-17008
 100afb4:	e0fffd17 	ldw	r3,-12(fp)
 100afb8:	18c00324 	muli	r3,r3,12
 100afbc:	10c5883a 	add	r2,r2,r3
 100afc0:	e0ffff17 	ldw	r3,-4(fp)
 100afc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100afc8:	d0e00a17 	ldw	r3,-32728(gp)
 100afcc:	e0bffd17 	ldw	r2,-12(fp)
 100afd0:	1880020e 	bge	r3,r2,100afdc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 100afd4:	e0bffd17 	ldw	r2,-12(fp)
 100afd8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 100afdc:	e0bffd17 	ldw	r2,-12(fp)
 100afe0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100afe4:	00000606 	br	100b000 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100afe8:	e0bffd17 	ldw	r2,-12(fp)
 100afec:	10800044 	addi	r2,r2,1
 100aff0:	e0bffd15 	stw	r2,-12(fp)
 100aff4:	e0bffd17 	ldw	r2,-12(fp)
 100aff8:	10800810 	cmplti	r2,r2,32
 100affc:	103fe41e 	bne	r2,zero,100af90 <__alt_data_end+0xff00af90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100b000:	e0bffe17 	ldw	r2,-8(fp)
}
 100b004:	e037883a 	mov	sp,fp
 100b008:	df000017 	ldw	fp,0(sp)
 100b00c:	dec00104 	addi	sp,sp,4
 100b010:	f800283a 	ret

0100b014 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100b014:	defffb04 	addi	sp,sp,-20
 100b018:	df000415 	stw	fp,16(sp)
 100b01c:	df000404 	addi	fp,sp,16
 100b020:	e13ffe15 	stw	r4,-8(fp)
 100b024:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100b028:	e0bfff17 	ldw	r2,-4(fp)
 100b02c:	10820070 	cmpltui	r2,r2,2049
 100b030:	1000021e 	bne	r2,zero,100b03c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100b034:	00820004 	movi	r2,2048
 100b038:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100b03c:	e0fffe17 	ldw	r3,-8(fp)
 100b040:	e0bfff17 	ldw	r2,-4(fp)
 100b044:	1885883a 	add	r2,r3,r2
 100b048:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100b04c:	e0bffe17 	ldw	r2,-8(fp)
 100b050:	e0bffc15 	stw	r2,-16(fp)
 100b054:	00000506 	br	100b06c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100b058:	e0bffc17 	ldw	r2,-16(fp)
 100b05c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100b060:	e0bffc17 	ldw	r2,-16(fp)
 100b064:	10800804 	addi	r2,r2,32
 100b068:	e0bffc15 	stw	r2,-16(fp)
 100b06c:	e0fffc17 	ldw	r3,-16(fp)
 100b070:	e0bffd17 	ldw	r2,-12(fp)
 100b074:	18bff836 	bltu	r3,r2,100b058 <__alt_data_end+0xff00b058>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100b078:	e0bffe17 	ldw	r2,-8(fp)
 100b07c:	108007cc 	andi	r2,r2,31
 100b080:	10000226 	beq	r2,zero,100b08c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100b084:	e0bffc17 	ldw	r2,-16(fp)
 100b088:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100b08c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100b090:	0001883a 	nop
 100b094:	e037883a 	mov	sp,fp
 100b098:	df000017 	ldw	fp,0(sp)
 100b09c:	dec00104 	addi	sp,sp,4
 100b0a0:	f800283a 	ret

0100b0a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 100b0a4:	defffe04 	addi	sp,sp,-8
 100b0a8:	df000115 	stw	fp,4(sp)
 100b0ac:	df000104 	addi	fp,sp,4
 100b0b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 100b0b4:	e0bfff17 	ldw	r2,-4(fp)
 100b0b8:	10bffe84 	addi	r2,r2,-6
 100b0bc:	10c00428 	cmpgeui	r3,r2,16
 100b0c0:	18001a1e 	bne	r3,zero,100b12c <alt_exception_cause_generated_bad_addr+0x88>
 100b0c4:	100690ba 	slli	r3,r2,2
 100b0c8:	00804074 	movhi	r2,257
 100b0cc:	10ac3704 	addi	r2,r2,-20260
 100b0d0:	1885883a 	add	r2,r3,r2
 100b0d4:	10800017 	ldw	r2,0(r2)
 100b0d8:	1000683a 	jmp	r2
 100b0dc:	0100b11c 	xori	r4,zero,708
 100b0e0:	0100b11c 	xori	r4,zero,708
 100b0e4:	0100b12c 	andhi	r4,zero,708
 100b0e8:	0100b12c 	andhi	r4,zero,708
 100b0ec:	0100b12c 	andhi	r4,zero,708
 100b0f0:	0100b11c 	xori	r4,zero,708
 100b0f4:	0100b124 	muli	r4,zero,708
 100b0f8:	0100b12c 	andhi	r4,zero,708
 100b0fc:	0100b11c 	xori	r4,zero,708
 100b100:	0100b11c 	xori	r4,zero,708
 100b104:	0100b12c 	andhi	r4,zero,708
 100b108:	0100b11c 	xori	r4,zero,708
 100b10c:	0100b124 	muli	r4,zero,708
 100b110:	0100b12c 	andhi	r4,zero,708
 100b114:	0100b12c 	andhi	r4,zero,708
 100b118:	0100b11c 	xori	r4,zero,708
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100b11c:	00800044 	movi	r2,1
 100b120:	00000306 	br	100b130 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 100b124:	0005883a 	mov	r2,zero
 100b128:	00000106 	br	100b130 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100b12c:	0005883a 	mov	r2,zero
  }
}
 100b130:	e037883a 	mov	sp,fp
 100b134:	df000017 	ldw	fp,0(sp)
 100b138:	dec00104 	addi	sp,sp,4
 100b13c:	f800283a 	ret

0100b140 <atexit>:
 100b140:	200b883a 	mov	r5,r4
 100b144:	000f883a 	mov	r7,zero
 100b148:	000d883a 	mov	r6,zero
 100b14c:	0009883a 	mov	r4,zero
 100b150:	100b2081 	jmpi	100b208 <__register_exitproc>

0100b154 <exit>:
 100b154:	defffe04 	addi	sp,sp,-8
 100b158:	000b883a 	mov	r5,zero
 100b15c:	dc000015 	stw	r16,0(sp)
 100b160:	dfc00115 	stw	ra,4(sp)
 100b164:	2021883a 	mov	r16,r4
 100b168:	100b3200 	call	100b320 <__call_exitprocs>
 100b16c:	00804074 	movhi	r2,257
 100b170:	10b3e204 	addi	r2,r2,-12408
 100b174:	11000017 	ldw	r4,0(r2)
 100b178:	20800f17 	ldw	r2,60(r4)
 100b17c:	10000126 	beq	r2,zero,100b184 <exit+0x30>
 100b180:	103ee83a 	callr	r2
 100b184:	8009883a 	mov	r4,r16
 100b188:	100b4a00 	call	100b4a0 <_exit>

0100b18c <memcmp>:
 100b18c:	01c000c4 	movi	r7,3
 100b190:	3980192e 	bgeu	r7,r6,100b1f8 <memcmp+0x6c>
 100b194:	2144b03a 	or	r2,r4,r5
 100b198:	11c4703a 	and	r2,r2,r7
 100b19c:	10000f26 	beq	r2,zero,100b1dc <memcmp+0x50>
 100b1a0:	20800003 	ldbu	r2,0(r4)
 100b1a4:	28c00003 	ldbu	r3,0(r5)
 100b1a8:	10c0151e 	bne	r2,r3,100b200 <memcmp+0x74>
 100b1ac:	31bfff84 	addi	r6,r6,-2
 100b1b0:	01ffffc4 	movi	r7,-1
 100b1b4:	00000406 	br	100b1c8 <memcmp+0x3c>
 100b1b8:	20800003 	ldbu	r2,0(r4)
 100b1bc:	28c00003 	ldbu	r3,0(r5)
 100b1c0:	31bfffc4 	addi	r6,r6,-1
 100b1c4:	10c00e1e 	bne	r2,r3,100b200 <memcmp+0x74>
 100b1c8:	21000044 	addi	r4,r4,1
 100b1cc:	29400044 	addi	r5,r5,1
 100b1d0:	31fff91e 	bne	r6,r7,100b1b8 <__alt_data_end+0xff00b1b8>
 100b1d4:	0005883a 	mov	r2,zero
 100b1d8:	f800283a 	ret
 100b1dc:	20c00017 	ldw	r3,0(r4)
 100b1e0:	28800017 	ldw	r2,0(r5)
 100b1e4:	18bfee1e 	bne	r3,r2,100b1a0 <__alt_data_end+0xff00b1a0>
 100b1e8:	31bfff04 	addi	r6,r6,-4
 100b1ec:	21000104 	addi	r4,r4,4
 100b1f0:	29400104 	addi	r5,r5,4
 100b1f4:	39bff936 	bltu	r7,r6,100b1dc <__alt_data_end+0xff00b1dc>
 100b1f8:	303fe91e 	bne	r6,zero,100b1a0 <__alt_data_end+0xff00b1a0>
 100b1fc:	003ff506 	br	100b1d4 <__alt_data_end+0xff00b1d4>
 100b200:	10c5c83a 	sub	r2,r2,r3
 100b204:	f800283a 	ret

0100b208 <__register_exitproc>:
 100b208:	defffa04 	addi	sp,sp,-24
 100b20c:	dc000315 	stw	r16,12(sp)
 100b210:	04004074 	movhi	r16,257
 100b214:	8433e204 	addi	r16,r16,-12408
 100b218:	80c00017 	ldw	r3,0(r16)
 100b21c:	dc400415 	stw	r17,16(sp)
 100b220:	dfc00515 	stw	ra,20(sp)
 100b224:	18805217 	ldw	r2,328(r3)
 100b228:	2023883a 	mov	r17,r4
 100b22c:	10003726 	beq	r2,zero,100b30c <__register_exitproc+0x104>
 100b230:	10c00117 	ldw	r3,4(r2)
 100b234:	010007c4 	movi	r4,31
 100b238:	20c00e16 	blt	r4,r3,100b274 <__register_exitproc+0x6c>
 100b23c:	1a000044 	addi	r8,r3,1
 100b240:	8800221e 	bne	r17,zero,100b2cc <__register_exitproc+0xc4>
 100b244:	18c00084 	addi	r3,r3,2
 100b248:	18c7883a 	add	r3,r3,r3
 100b24c:	18c7883a 	add	r3,r3,r3
 100b250:	12000115 	stw	r8,4(r2)
 100b254:	10c7883a 	add	r3,r2,r3
 100b258:	19400015 	stw	r5,0(r3)
 100b25c:	0005883a 	mov	r2,zero
 100b260:	dfc00517 	ldw	ra,20(sp)
 100b264:	dc400417 	ldw	r17,16(sp)
 100b268:	dc000317 	ldw	r16,12(sp)
 100b26c:	dec00604 	addi	sp,sp,24
 100b270:	f800283a 	ret
 100b274:	00800034 	movhi	r2,0
 100b278:	10800004 	addi	r2,r2,0
 100b27c:	10002626 	beq	r2,zero,100b318 <__register_exitproc+0x110>
 100b280:	01006404 	movi	r4,400
 100b284:	d9400015 	stw	r5,0(sp)
 100b288:	d9800115 	stw	r6,4(sp)
 100b28c:	d9c00215 	stw	r7,8(sp)
 100b290:	00000000 	call	0 <__reset-0x1000000>
 100b294:	d9400017 	ldw	r5,0(sp)
 100b298:	d9800117 	ldw	r6,4(sp)
 100b29c:	d9c00217 	ldw	r7,8(sp)
 100b2a0:	10001d26 	beq	r2,zero,100b318 <__register_exitproc+0x110>
 100b2a4:	81000017 	ldw	r4,0(r16)
 100b2a8:	10000115 	stw	zero,4(r2)
 100b2ac:	02000044 	movi	r8,1
 100b2b0:	22405217 	ldw	r9,328(r4)
 100b2b4:	0007883a 	mov	r3,zero
 100b2b8:	12400015 	stw	r9,0(r2)
 100b2bc:	20805215 	stw	r2,328(r4)
 100b2c0:	10006215 	stw	zero,392(r2)
 100b2c4:	10006315 	stw	zero,396(r2)
 100b2c8:	883fde26 	beq	r17,zero,100b244 <__alt_data_end+0xff00b244>
 100b2cc:	18c9883a 	add	r4,r3,r3
 100b2d0:	2109883a 	add	r4,r4,r4
 100b2d4:	1109883a 	add	r4,r2,r4
 100b2d8:	21802215 	stw	r6,136(r4)
 100b2dc:	01800044 	movi	r6,1
 100b2e0:	12406217 	ldw	r9,392(r2)
 100b2e4:	30cc983a 	sll	r6,r6,r3
 100b2e8:	4992b03a 	or	r9,r9,r6
 100b2ec:	12406215 	stw	r9,392(r2)
 100b2f0:	21c04215 	stw	r7,264(r4)
 100b2f4:	01000084 	movi	r4,2
 100b2f8:	893fd21e 	bne	r17,r4,100b244 <__alt_data_end+0xff00b244>
 100b2fc:	11006317 	ldw	r4,396(r2)
 100b300:	218cb03a 	or	r6,r4,r6
 100b304:	11806315 	stw	r6,396(r2)
 100b308:	003fce06 	br	100b244 <__alt_data_end+0xff00b244>
 100b30c:	18805304 	addi	r2,r3,332
 100b310:	18805215 	stw	r2,328(r3)
 100b314:	003fc606 	br	100b230 <__alt_data_end+0xff00b230>
 100b318:	00bfffc4 	movi	r2,-1
 100b31c:	003fd006 	br	100b260 <__alt_data_end+0xff00b260>

0100b320 <__call_exitprocs>:
 100b320:	defff504 	addi	sp,sp,-44
 100b324:	df000915 	stw	fp,36(sp)
 100b328:	dd400615 	stw	r21,24(sp)
 100b32c:	dc800315 	stw	r18,12(sp)
 100b330:	dfc00a15 	stw	ra,40(sp)
 100b334:	ddc00815 	stw	r23,32(sp)
 100b338:	dd800715 	stw	r22,28(sp)
 100b33c:	dd000515 	stw	r20,20(sp)
 100b340:	dcc00415 	stw	r19,16(sp)
 100b344:	dc400215 	stw	r17,8(sp)
 100b348:	dc000115 	stw	r16,4(sp)
 100b34c:	d9000015 	stw	r4,0(sp)
 100b350:	2839883a 	mov	fp,r5
 100b354:	04800044 	movi	r18,1
 100b358:	057fffc4 	movi	r21,-1
 100b35c:	00804074 	movhi	r2,257
 100b360:	10b3e204 	addi	r2,r2,-12408
 100b364:	12000017 	ldw	r8,0(r2)
 100b368:	45005217 	ldw	r20,328(r8)
 100b36c:	44c05204 	addi	r19,r8,328
 100b370:	a0001c26 	beq	r20,zero,100b3e4 <__call_exitprocs+0xc4>
 100b374:	a0800117 	ldw	r2,4(r20)
 100b378:	15ffffc4 	addi	r23,r2,-1
 100b37c:	b8000d16 	blt	r23,zero,100b3b4 <__call_exitprocs+0x94>
 100b380:	14000044 	addi	r16,r2,1
 100b384:	8421883a 	add	r16,r16,r16
 100b388:	8421883a 	add	r16,r16,r16
 100b38c:	84402004 	addi	r17,r16,128
 100b390:	a463883a 	add	r17,r20,r17
 100b394:	a421883a 	add	r16,r20,r16
 100b398:	e0001e26 	beq	fp,zero,100b414 <__call_exitprocs+0xf4>
 100b39c:	80804017 	ldw	r2,256(r16)
 100b3a0:	e0801c26 	beq	fp,r2,100b414 <__call_exitprocs+0xf4>
 100b3a4:	bdffffc4 	addi	r23,r23,-1
 100b3a8:	843fff04 	addi	r16,r16,-4
 100b3ac:	8c7fff04 	addi	r17,r17,-4
 100b3b0:	bd7ff91e 	bne	r23,r21,100b398 <__alt_data_end+0xff00b398>
 100b3b4:	00800034 	movhi	r2,0
 100b3b8:	10800004 	addi	r2,r2,0
 100b3bc:	10000926 	beq	r2,zero,100b3e4 <__call_exitprocs+0xc4>
 100b3c0:	a0800117 	ldw	r2,4(r20)
 100b3c4:	1000301e 	bne	r2,zero,100b488 <__call_exitprocs+0x168>
 100b3c8:	a0800017 	ldw	r2,0(r20)
 100b3cc:	10003226 	beq	r2,zero,100b498 <__call_exitprocs+0x178>
 100b3d0:	a009883a 	mov	r4,r20
 100b3d4:	98800015 	stw	r2,0(r19)
 100b3d8:	00000000 	call	0 <__reset-0x1000000>
 100b3dc:	9d000017 	ldw	r20,0(r19)
 100b3e0:	a03fe41e 	bne	r20,zero,100b374 <__alt_data_end+0xff00b374>
 100b3e4:	dfc00a17 	ldw	ra,40(sp)
 100b3e8:	df000917 	ldw	fp,36(sp)
 100b3ec:	ddc00817 	ldw	r23,32(sp)
 100b3f0:	dd800717 	ldw	r22,28(sp)
 100b3f4:	dd400617 	ldw	r21,24(sp)
 100b3f8:	dd000517 	ldw	r20,20(sp)
 100b3fc:	dcc00417 	ldw	r19,16(sp)
 100b400:	dc800317 	ldw	r18,12(sp)
 100b404:	dc400217 	ldw	r17,8(sp)
 100b408:	dc000117 	ldw	r16,4(sp)
 100b40c:	dec00b04 	addi	sp,sp,44
 100b410:	f800283a 	ret
 100b414:	a0800117 	ldw	r2,4(r20)
 100b418:	80c00017 	ldw	r3,0(r16)
 100b41c:	10bfffc4 	addi	r2,r2,-1
 100b420:	15c01426 	beq	r2,r23,100b474 <__call_exitprocs+0x154>
 100b424:	80000015 	stw	zero,0(r16)
 100b428:	183fde26 	beq	r3,zero,100b3a4 <__alt_data_end+0xff00b3a4>
 100b42c:	95c8983a 	sll	r4,r18,r23
 100b430:	a0806217 	ldw	r2,392(r20)
 100b434:	a5800117 	ldw	r22,4(r20)
 100b438:	2084703a 	and	r2,r4,r2
 100b43c:	10000b26 	beq	r2,zero,100b46c <__call_exitprocs+0x14c>
 100b440:	a0806317 	ldw	r2,396(r20)
 100b444:	2088703a 	and	r4,r4,r2
 100b448:	20000c1e 	bne	r4,zero,100b47c <__call_exitprocs+0x15c>
 100b44c:	89400017 	ldw	r5,0(r17)
 100b450:	d9000017 	ldw	r4,0(sp)
 100b454:	183ee83a 	callr	r3
 100b458:	a0800117 	ldw	r2,4(r20)
 100b45c:	15bfbf1e 	bne	r2,r22,100b35c <__alt_data_end+0xff00b35c>
 100b460:	98800017 	ldw	r2,0(r19)
 100b464:	153fcf26 	beq	r2,r20,100b3a4 <__alt_data_end+0xff00b3a4>
 100b468:	003fbc06 	br	100b35c <__alt_data_end+0xff00b35c>
 100b46c:	183ee83a 	callr	r3
 100b470:	003ff906 	br	100b458 <__alt_data_end+0xff00b458>
 100b474:	a5c00115 	stw	r23,4(r20)
 100b478:	003feb06 	br	100b428 <__alt_data_end+0xff00b428>
 100b47c:	89000017 	ldw	r4,0(r17)
 100b480:	183ee83a 	callr	r3
 100b484:	003ff406 	br	100b458 <__alt_data_end+0xff00b458>
 100b488:	a0800017 	ldw	r2,0(r20)
 100b48c:	a027883a 	mov	r19,r20
 100b490:	1029883a 	mov	r20,r2
 100b494:	003fb606 	br	100b370 <__alt_data_end+0xff00b370>
 100b498:	0005883a 	mov	r2,zero
 100b49c:	003ffb06 	br	100b48c <__alt_data_end+0xff00b48c>

0100b4a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100b4a0:	defffd04 	addi	sp,sp,-12
 100b4a4:	df000215 	stw	fp,8(sp)
 100b4a8:	df000204 	addi	fp,sp,8
 100b4ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100b4b0:	0001883a 	nop
 100b4b4:	e0bfff17 	ldw	r2,-4(fp)
 100b4b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100b4bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100b4c0:	10000226 	beq	r2,zero,100b4cc <_exit+0x2c>
    ALT_SIM_FAIL();
 100b4c4:	002af070 	cmpltui	zero,zero,43969
 100b4c8:	00000106 	br	100b4d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 100b4cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100b4d0:	003fff06 	br	100b4d0 <__alt_data_end+0xff00b4d0>
